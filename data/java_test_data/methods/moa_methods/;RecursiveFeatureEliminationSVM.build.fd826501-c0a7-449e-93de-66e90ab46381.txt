public void build(Dataset data) {
    /* The order of the importance of the features */
    int[] ordering = new int[data.noAttributes()];
    /* Bitmap of removed attributes */
    boolean[] removedAttributes = new boolean[data.noAttributes()];
    /*
         * Number of removed attributes, is always equal to the number of true
         * values in the above bitmap
         */
    int removed = 0;
    while (data.noAttributes() > 1) {
        Dataset training = data;
        LibSVM svm;
        if (optimize)
            svm = new SelfOptimizingLinearLibSVM(-4, 4, internalFolds);
        else {
            svm = new LibSVM();
            svm.getParameters().C = 1;
        }
        svm.buildClassifier(training);
        double[] weights = svm.getWeights();
        /* Use absolute values of the weights */
        ArrayUtils.abs(weights);
        /* Order weights */
        int[] order = ArrayUtils.sort(weights);
        /* Determine the number of attributes to prune, round up */
        int numRemove = (int) (order.length * removePercentage + 1);
        if (numRemove > order.length)
            numRemove = order.length - 1;
        Set<Integer> toRemove = new HashSet<Integer>();
        int[] trueIndices = new int[numRemove];
        for (int i = 0; i < numRemove; i++) {
            toRemove.add(order[i]);
            trueIndices[i] = getTrueIndex(order[i], removedAttributes);
            ordering[ordering.length - removed - 1] = trueIndices[i];
            removed++;
        }
        // method will fail.
        for (int i = 0; i < numRemove; i++) {
            removedAttributes[trueIndices[i]] = true;
        }
        RemoveAttributes filter = new RemoveAttributes(toRemove);
        Dataset filtered = new DefaultDataset();
        for (Instance i : data) {
            filter.filter(i);
            filtered.add(i);
        }
        data = filtered;
    }
    int index = 0;
    if (data.noAttributes() == 1) {
        for (int i = 0; i < removedAttributes.length; i++) {
            if (!removedAttributes[i])
                index = i;
        }
        ordering[0] = index;
    }
    ranking = new int[ordering.length];
    for (int i = 0; i < ranking.length; i++) ranking[ordering[i]] = i;
}
