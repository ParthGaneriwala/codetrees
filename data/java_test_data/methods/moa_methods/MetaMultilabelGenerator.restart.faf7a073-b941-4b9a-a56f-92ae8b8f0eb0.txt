@Override
public void restart() {
    // The number of class labels L
    this.m_L = numLabelsOption.getValue();
    if (this.labelCardinalityOption.getValue() > m_L) {
        System.err.println("Error: Label cardinality (z) cannot be greater than the number of labels (c)!");
        System.exit(1);
    }
    // Initialise the chosen binary generator
    this.m_BinaryGenerator = (InstanceStream) getPreparedClassOption(this.binaryGeneratorOption);
    this.m_BinaryGenerator.restart();
    // The number of attributes A (not including class-attributes)
    this.m_A = this.m_BinaryGenerator.getHeader().numAttributes() - 1;
    // Random seed
    this.m_MetaRandom = new Random(this.metaRandomSeedOption.getValue());
    // Set up a queue system
    this.queue = new LinkedList[2];
    for (int i = 0; i < this.queue.length; i++) {
        this.queue[i] = new LinkedList<Instance>();
    }
    // Generate the multi-label header
    this.m_MultilabelInstancesHeader = generateMultilabelHeader(this.m_BinaryGenerator.getHeader());
    // Generate label prior distribution
    this.priors = generatePriors(m_MetaRandom, m_L, labelCardinalityOption.getValue(), (skewOption.getValue() >= 1));
    // printVector(this.priors);
    // Generate the matrix marking the label-dependencies
    boolean[][] DependencyMatrix = modifyDependencyMatrix(new boolean[m_L][m_L], labelCardinalityRatioOption.getValue(), m_MetaRandom);
    // Modify the dependency matrix (and the priors) if they are to change in this stream
    if (labelDependencyChangeRatioOption.getValue() > 0.0) {
        priors = modifyPriorVector(priors, labelDependencyChangeRatioOption.getValue(), m_MetaRandom, (skewOption.getValue() >= 1));
        modifyDependencyMatrix(DependencyMatrix, labelDependencyChangeRatioOption.getValue(), m_MetaRandom);
    }
    // Generate the conditional matrix, using this change matrix
    this.Conditional = generateConditional(priors, DependencyMatrix);
    // printMatrix(this.Conditional);
    // Make a normalised version of the priors
    this.priors_norm = Arrays.copyOf(priors, priors.length);
    Utils.normalize(this.priors_norm);
    // Create the feature-label mappings
    m_TopCombinations = getTopCombinations(m_A);
}
