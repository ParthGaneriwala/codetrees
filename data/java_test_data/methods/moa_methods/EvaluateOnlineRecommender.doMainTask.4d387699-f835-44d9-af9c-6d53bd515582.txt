@Override
public Object doMainTask(TaskMonitor monitor, ObjectRepository repository) {
    Dataset d = (Dataset) getPreparedClassOption(this.datasetOption);
    RatingPredictor rp = (RatingPredictor) getPreparedClassOption(this.ratingPredictorOption);
    LearningCurve learningCurve = new LearningCurve("n");
    RecommenderData data = rp.getData();
    data.clear();
    data.disableUpdates(false);
    long start = System.currentTimeMillis();
    long evalTime = 0;
    double sum = 0;
    int n = 0;
    // ArrayList<TestMetric> metrics = new ArrayList<TestMetric>();
    int sampleFrequency = this.sampleFrequencyOption.getValue();
    int count = 0;
    while (d.next()) ++count;
    d.reset();
    while (d.next()) {
        Integer user = d.curUserID();
        Integer item = d.curItemID();
        Double rating = d.curRating();
        long startPredTime = System.currentTimeMillis();
        double pred = rp.predictRating(user, item);
        sum += Math.pow(pred - rating, 2);
        evalTime += System.currentTimeMillis() - startPredTime;
        data.setRating(user, item, rating);
        // System.out.println(data.countRatingsItem(item) + " " + data.countRatingsUser(user));
        // if (n++%100 == 99) metrics.add(new TestMetric("RMSE (" + n +")", Math.sqrt(sum/(double)n)));
        n++;
        if (n % sampleFrequency == sampleFrequency - 1) {
            if (monitor.taskShouldAbort()) {
                return null;
            }
            monitor.setCurrentActivityFractionComplete((double) n / (double) count);
            learningCurve.insertEntry(new LearningEvaluation(new Measurement[] { new Measurement("n", n), new Measurement("RMSE", Math.sqrt(sum / (double) n)), new Measurement("trainingTime", (int) ((System.currentTimeMillis() - start - evalTime) / 1000)), new Measurement("evalTime", (int) (evalTime / 1000)) }));
            if (monitor.resultPreviewRequested()) {
                monitor.setLatestResultPreview(learningCurve.headerToString() + "\n" + learningCurve.entryToString(learningCurve.numEntries() - 1));
            }
        }
    }
    return learningCurve;
}
