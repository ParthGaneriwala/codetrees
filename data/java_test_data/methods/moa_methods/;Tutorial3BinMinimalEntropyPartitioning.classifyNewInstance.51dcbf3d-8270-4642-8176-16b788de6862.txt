// private static void compareDS(Dataset data, Dataset discdata) {
// 
// int index = 0;
// for (Instance inst : data) {
// 
// // ddata.get(index3).setClassValue(inst.classValue());
// System.out.println("BEFORE: " + inst);
// System.out.println("AFTER!: " + discdata.get(index));
// System.out.println();
// index++;
// }
// 
// AbstractBayesianClassifier abc = new AbstractBayesianClassifier(true,
// false,);
// abc.buildClassifier(data);
// 
// AbstractBayesianClassifier abc_disc = new AbstractBayesianClassifier(
// true, false, sparsedata.get(fileindex));
// abc_disc.buildClassifier(discdata);
// 
// for (Object key : abc.getFeatureTable().keySet()) {
// System.out.println("#VALUES FOR FEATURE(=" + key + ") BEFORE: "
// + abc.getFeatureTable().get(key).keySet().size());
// System.out.println("#VALUES FOR FEATURE(=" + key + ") AFTER!: "
// + abc_disc.getFeatureTable().get(key).keySet().size());
// System.out.println();
// 
// }
// System.out.println();
// 
// }
private static int[] classifyNewInstance(Classifier nbc, boolean test_1sample, int workingK, ThreeBinMinimalEntropyPartitioning rmep) throws IOException {
    Dataset dataForClassification = TutorialData.IRIS.load();
    /* Counters for correct and wrong predictions. */
    int correct = 0, wrong = 0;
    for (Instance inst : dataForClassification) {
        rmep.filter(inst);
        Object predictedClassValue = nbc.classify(inst);
        // System.out.println("predictedClassValue "+
        // predictedClassValue);
        Object realClassValue = inst.classValue();
        // System.out.println("realClassValue "+ realClassValue);
        if (predictedClassValue.equals(realClassValue))
            correct++;
        else
            wrong++;
    }
    return new int[] { correct, wrong };
}
