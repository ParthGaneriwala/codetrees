protected AttributeExpansionSuggestion searchForBestSplitOption(Node currentNode, AttributeExpansionSuggestion currentBestOption, MultiLabelSplitCriterion criterion, DoubleVector[] preSplitStatistics, int inputAttributeIndex) {
    // Return null if the current node is null or we have finished looking through all the possible splits
    if (currentNode == null) {
        // TODO: JD check || countRightTotal == 0.0
        return currentBestOption;
    }
    if (currentNode.left != null) {
        currentBestOption = searchForBestSplitOption(currentNode.left, currentBestOption, criterion, preSplitStatistics, inputAttributeIndex);
    }
    for (int i = 0; i < leftStatistics.length; i++) {
        leftStatistics[i].addValues(currentNode.leftStatistics[i]);
        rightStatistics[i].subtractValues(currentNode.leftStatistics[i]);
    }
    DoubleVector[][] postSplitDists = new DoubleVector[leftStatistics.length][2];
    for (int i = 0; i < leftStatistics.length; i++) {
        postSplitDists[i] = new DoubleVector[2];
        postSplitDists[i][0] = leftStatistics[i];
        postSplitDists[i][1] = rightStatistics[i];
    }
    double merit = criterion.getMeritOfSplit(preSplitStatistics, postSplitDists);
    if ((currentBestOption == null) || (merit > currentBestOption.merit)) {
        currentBestOption = new AttributeExpansionSuggestion(new NumericRulePredicate(inputAttributeIndex, currentNode.cutPoint, true), Utils.copy(postSplitDists), merit);
    }
    if (currentNode.right != null) {
        currentBestOption = searchForBestSplitOption(currentNode.right, currentBestOption, criterion, preSplitStatistics, inputAttributeIndex);
    }
    for (int i = 0; i < leftStatistics.length; i++) {
        leftStatistics[i].subtractValues(currentNode.leftStatistics[i]);
        rightStatistics[i].addValues(currentNode.leftStatistics[i]);
    }
    return currentBestOption;
}
