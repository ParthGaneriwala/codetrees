void Graficar(Graphics ap, int xg, int yg) {
    Graphics2D g = (Graphics2D) ap;
    image = new BufferedImage(width, height, BufferedImage.TYPE_INT_BGR);
    gb = image.createGraphics();
    g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
    gb.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
    g.setFont(textFont);
    gb.setFont(textFont);
    // X axis
    g.setPaint(Color.BLACK);
    gb.setBackground(Color.WHITE);
    gb.clearRect(0, 0, image.getWidth(), image.getHeight());
    gb.setColor(Color.BLACK);
    int xleft = xg - width / 3;
    int xrigth = xg + width / 3;
    g.setStroke(stroke.getStroke());
    gb.setStroke(stroke.getStroke());
    // Values
    int xin = xleft - xScale;
    int xfin = xrigth + xScale;
    int rank1 = (int) Math.floor(algRank.get(0).rank);
    // ticks number
    int ticks = (int) (Math.ceil(algRank.get(algRank.size() - 1).rank));
    // number of divisions in the axis
    int xdiv = (xfin - xin) / ticks;
    int xinr = rank1 * xdiv + xin;
    // axis
    g.draw(new Line2D.Double(xinr, yg, xrigth + xScale, yg));
    gb.draw(new Line2D.Double(xinr, yg, xrigth + xScale, yg));
    int j = rank1;
    // put the ticks
    g.setStroke(currentStroke);
    gb.setStroke(currentStroke);
    for (int i = /*xin*/
    xinr; i <= xfin; i += xdiv) {
        g.draw(new Line2D.Double(i, yg - 4, i, yg));
        g.drawString("" + j, i, yg - 6);
        gb.draw(new Line2D.Double(i, yg - 4, i, yg));
        gb.drawString("" + j, i, yg - 6);
        j++;
    }
    int ydiv = (height / 2) / 4 - (height / 10);
    int ya = ydiv + yScale;
    FontMetrics fm = g.getFontMetrics();
    g.setStroke(stroke.getStroke());
    gb.setStroke(stroke.getStroke());
    boolean[][] visited = new boolean[algRank.size()][algRank.size()];
    for (int i = 0; i < algRank.size(); i++) {
        for (int k = 0; k < algRank.size(); k++) {
            visited[i][k] = false;
        }
    }
    // Draw algorithms Lines
    for (int i = 0; i < algRank.size(); i++) {
        g.draw(new Line2D.Double((double) (xdiv * algRank.get(i).rank + xin), yg + ya, (double) (xdiv * algRank.get(i).rank + xin), yg));
        gb.draw(new Line2D.Double((double) (xdiv * algRank.get(i).rank + xin), yg + ya, (double) (xdiv * algRank.get(i).rank + xin), yg));
        int k;
        for (k = i + 1; k <= algRank.size() - 1; k++) {
            int index = PValuePerTwoAlgorithm.getIndex(PValues, algRank.get(i).algName, algRank.get(k).algName);
            boolean v = PValues.get(index).isSignicativeBetterThan(pvalue);
            if (v == true) {
                visited[i][k] = true;
            } else {
                break;
            }
        }
        g.setStroke(difStroke.getStroke());
        gb.setStroke(difStroke.getStroke());
        if (i == 0 && k - 1 != 0) {
            g.draw(new Line2D.Double((double) (xdiv * algRank.get(i).rank + xin), (yg + ya + yg) / 2, (double) (xdiv * algRank.get(k - 1).rank + xin), (yg + ya + yg) / 2));
            gb.draw(new Line2D.Double((double) (xdiv * algRank.get(i).rank + xin), (yg + ya + yg) / 2, (double) (xdiv * algRank.get(k - 1).rank + xin), (yg + ya + yg) / 2));
        } else if (i != 0) {
            // If the last visited by the current algorithm is not in the visited of the previous one then draw a line
            if (visited[i - 1][k - 1] == false && (i != k - 1)) {
                g.draw(new Line2D.Double((double) (xdiv * algRank.get(i).rank + xin), (yg + ya + yg) / 2, (double) (xdiv * algRank.get(k - 1).rank + xin), (yg + ya + yg) / 2));
                gb.draw(new Line2D.Double((double) (xdiv * algRank.get(i).rank + xin), (yg + ya + yg) / 2, (double) (xdiv * algRank.get(k - 1).rank + xin), (yg + ya + yg) / 2));
            }
        }
        g.setStroke(stroke.getStroke());
        gb.setStroke(stroke.getStroke());
        if (i < algRank.size() / 2) {
            int lenght = fm.stringWidth(algRank.get(i).algName);
            g.draw(new Line2D.Double((double) (xdiv * algRank.get(i).rank + xin), yg + ya, xinr - 3, yg + ya));
            g.drawString(algRank.get(i).algName, xinr - 3 - lenght - 10, yg + ya);
            gb.draw(new Line2D.Double((double) (xdiv * algRank.get(i).rank + xin), yg + ya, xinr - 3, yg + ya));
            gb.drawString(algRank.get(i).algName, xinr - 3 - lenght - 10, yg + ya);
        } else {
            g.draw(new Line2D.Double((double) (xdiv * algRank.get(i).rank + xin), yg + ya, xfin + 3, yg + ya));
            g.drawString(algRank.get(i).algName, xfin + 3 + 10, yg + ya);
            gb.draw(new Line2D.Double((double) (xdiv * algRank.get(i).rank + xin), yg + ya, xfin + 3, yg + ya));
            gb.drawString(algRank.get(i).algName, xfin + 3 + 10, yg + ya);
        }
        ya += 20;
    }
}
