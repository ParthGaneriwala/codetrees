public void addChild(IndexItem newChild_, double distance) {
    @SuppressWarnings("unchecked") Node newChild = (Node) newChild_;
    class ChildWithDistance {

        Node child;

        double distance;

        private ChildWithDistance(Node child, double distance) {
            this.child = child;
            this.distance = distance;
        }
    }
    Deque<ChildWithDistance> newChildren = new ArrayDeque<ChildWithDistance>();
    newChildren.addFirst(new ChildWithDistance(newChild, distance));
    while (!newChildren.isEmpty()) {
        ChildWithDistance cwd = newChildren.removeFirst();
        newChild = cwd.child;
        distance = cwd.distance;
        if (thisNode.children.containsKey(newChild.data)) {
            @SuppressWarnings("unchecked") Node existingChild = (Node) thisNode.children.get(newChild.data);
            assert existingChild.data.equals(newChild.data);
            // Transfer the _children_ of the newChild to the existingChild
            for (IndexItem grandchild : newChild.children.values()) {
                existingChild.addChild(grandchild, grandchild.distanceToParent);
            }
            newChild.children.clear();
            try {
                existingChild.checkMaxCapacity();
            } catch (SplitNodeReplacement e) {
                IndexItem ii = thisNode.children.remove(existingChild.data);
                assert ii != null;
                for (int i = 0; i < e.newNodes.length; ++i) {
                    @SuppressWarnings("unchecked") Node newNode = (Node) e.newNodes[i];
                    distance = thisNode.mtree().distanceFunction.calculate(thisNode.data, newNode.data);
                    newChildren.addFirst(new ChildWithDistance(newNode, distance));
                }
            }
        } else {
            thisNode.children.put(newChild.data, newChild);
            thisNode.updateMetrics(newChild, distance);
        }
    }
}
