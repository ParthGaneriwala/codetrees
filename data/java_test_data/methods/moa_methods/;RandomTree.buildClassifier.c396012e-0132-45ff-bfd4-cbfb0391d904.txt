@Override
public void buildClassifier(Dataset data) {
    if (parentClasses == null)
        parentClasses = data.classes();
    if (data.classes().size() == 1) {
        finalClass = data.classes().first();
        data.clear();
        return;
    }
    Dataset left = null, right = null;
    boolean correctSplit = false;
    /* To keep track of how many times we already tried to split the data */
    int iterationCount = 0;
    while (!correctSplit) {
        iterationCount++;
        /*
             * Select the attributes on which to split the data.
             * 
             * When we face problems to split, we start using more attributes,
             * to force a split.
             */
        splitAttributes = new Vector<Integer>();
        for (int i = 0; i < data.noAttributes(); i++) splitAttributes.add(i);
        while (splitAttributes.size() / (iterationCount * iterationCount) > noSplitAttributes) {
            splitAttributes.remove(rg.nextInt(splitAttributes.size()));
        }
        /* calculate mean for each class */
        int count0 = 0, count1 = 0;
        leftCenter = new float[splitAttributes.size()];
        rightCenter = new float[splitAttributes.size()];
        for (Instance inst : data) {
            if (data.classIndex(inst.classValue()) == 0) {
                count0++;
                for (int j = 0; j < splitAttributes.size(); j++) {
                    leftCenter[j] += inst.value(splitAttributes.get(j));
                }
            } else {
                count1++;
                for (int j = 0; j < splitAttributes.size(); j++) {
                    rightCenter[j] += inst.value(splitAttributes.get(j));
                }
            }
        }
        for (int i = 0; i < splitAttributes.size(); i++) {
            leftCenter[i] /= count0;
            rightCenter[i] /= count1;
        }
        /* place-holder for instances */
        double[] tmp = new double[splitAttributes.size()];
        /* data sets to construct children */
        left = new DefaultDataset();
        right = new DefaultDataset();
        for (Instance inst : data) {
            for (int i = 0; i < splitAttributes.size(); i++) {
                tmp[i] = inst.value(splitAttributes.get(i));
            }
            double distLeft = dist(tmp, leftCenter);
            double distRight = dist(tmp, rightCenter);
            if (distLeft > distRight)
                right.add(inst);
            else
                left.add(inst);
        }
        correctSplit = left.size() != 0 && right.size() != 0;
        if (!correctSplit) {
            if ((iterationCount * iterationCount) * noSplitAttributes > data.noAttributes()) {
                /*
                     * This data set can not be split properly. This is most
                     * likely due to ambiguous training data. Randomly select
                     * one of the possible classes as output class.
                     */
                Vector<Object> possibleClasses = new Vector<Object>();
                possibleClasses.addAll(data.classes());
                this.finalClass = possibleClasses.get(rg.nextInt(possibleClasses.size()));
                data.clear();
                left = null;
                right = null;
                return;
            }
        }
    }
    leftChild = new RandomTree(noSplitAttributes, rg, parentClasses);
    leftChild.buildClassifier(left);
    rightChild = new RandomTree(noSplitAttributes, rg, parentClasses);
    rightChild.buildClassifier(right);
}
