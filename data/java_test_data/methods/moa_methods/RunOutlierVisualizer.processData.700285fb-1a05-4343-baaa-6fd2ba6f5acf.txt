private void processData() {
    if (m_stream0.hasMoreInstances()) {
        timestamp++;
        nProcessed++;
        if (timestamp % 100 == 0)
            m_visualPanel.setProcessedPointsCounter(timestamp);
        Instance nextStreamObj0 = m_stream0.nextInstance().getData();
        DataPoint point0 = new DataPoint(nextStreamObj0, timestamp);
        pointBuffer0.add(point0);
        while (pointBuffer0.size() > m_stream0_decayHorizon) {
            pointBuffer0.removeFirst();
        }
        MeasuredProcessStreamObj(ALGORITHM_1, nextStreamObj0);
        if (bUseAlgorithm2)
            MeasuredProcessStreamObj(ALGORITHM_2, nextStreamObj0);
        // draw new point
        m_streampanel[ALGORITHM_1].drawPoint(point0, false, false);
        if (bUseAlgorithm2)
            m_streampanel[ALGORITHM_2].drawPoint(point0, false, false);
        // apply decay at points
        if (nProcessed % m_redrawInterval == 0) {
            float f;
            if (m_stream0_decayHorizon <= m_redrawInterval)
                f = 1;
            else
                f = ((float) m_redrawInterval) / ((float) m_stream0_decayHorizon);
            m_streampanel[ALGORITHM_1].applyDrawDecay(f, false);
            if (bUseAlgorithm2)
                m_streampanel[ALGORITHM_2].applyDrawDecay(f, false);
        }
        // draw events
        // if (nProcessed % m_eventsInterval == 0) {
        drawEvents();
        // redraw point layer
        m_streampanel[ALGORITHM_1].RedrawPointLayer();
        if (bUseAlgorithm2)
            m_streampanel[ALGORITHM_2].RedrawPointLayer();
        if (CanPause()) {
            // automatically pause each m_pauseInterval objects
            // updatePointsWeight();
            showOutliers(true);
            drawOutliers();
            m_visualPanel.toggleVisualizer(true);
        }
    } else {
        System.out.println("DONE");
        pause();
        return;
    }
    // simulate visualization speed
    simulateVisualSpeed();
}
