@Override
protected void prepareForUseImpl(TaskMonitor tm, ObjectRepository or) {
    classFunction = concepts[this.functionOption.getValue() - 1];
    FastVector attributes = new FastVector();
    attributes.addElement(new Attribute("color", Arrays.asList(colorValues)));
    attributes.addElement(new Attribute("price", Arrays.asList(priceValues)));
    attributes.addElement(new Attribute("payment", Arrays.asList(paymentValues)));
    attributes.addElement(new Attribute("amount", Arrays.asList(amountValues)));
    attributes.addElement(new Attribute("deliveryDelay", Arrays.asList(deliveryDelayValues)));
    this.instanceRandom = new Random(System.currentTimeMillis());
    FastVector classLabels = new FastVector();
    for (int i = 0; i < classValues.length; i++) {
        classLabels.addElement(classValues[i]);
    }
    attributes.addElement(new Attribute("class", classLabels));
    this.streamHeader = new InstancesHeader(new Instances(getCLICreationString(InstanceStream.class), attributes, 0));
    this.streamHeader.setClassIndex(this.streamHeader.numAttributes() - 1);
    restart();
}
