@Override
public Prediction computeWeightedVote() {
    int n = votes.size();
    if (n > 0) {
        int numOutputs = outputAttributesCount.length;
        weights = new double[n][numOutputs];
        weightedVote = new MultiLabelPrediction(numOutputs);
        // For each output attribute
        for (int o = 0; o < numOutputs; o++) {
            // For each vote
            for (int i = 0; i < n; i++) {
                int numClasses = votes.get(i).numClasses(o);
                if (votes.get(i).hasVotesForAttribute(o))
                    weights[i][o] = 1.0 / outputAttributesCount[o];
                // For each class
                for (int j = 0; j < numClasses; j++) {
                    weightedVote.setVote(o, j, weightedVote.getVote(o, j) + votes.get(i).getVote(o, j) * weights[i][o]);
                }
            }
        }
    }
    return weightedVote;
}
