private void fetchNext() {
    assert !finished;
    if (finished || yieldedCount >= Query.this.limit) {
        finished = true;
        return;
    }
    while (!pendingQueue.isEmpty() || !nearestQueue.isEmpty()) {
        if (prepareNextNearest()) {
            return;
        }
        assert !pendingQueue.isEmpty();
        ItemWithDistances<Node> pending = pendingQueue.poll();
        Node node = pending.item;
        for (IndexItem child : node.children.values()) {
            if (Math.abs(pending.distance - child.distanceToParent) - child.radius <= Query.this.range) {
                double childDistance = MTree.this.distanceFunction.calculate(Query.this.data, child.data);
                double childMinDistance = Math.max(childDistance - child.radius, 0.0);
                if (childMinDistance <= Query.this.range) {
                    if (child instanceof MTree.Entry) {
                        @SuppressWarnings("unchecked") Entry entry = (Entry) child;
                        nearestQueue.add(new ItemWithDistances<Entry>(entry, childDistance, childMinDistance));
                    } else {
                        @SuppressWarnings("unchecked") Node childNode = (Node) child;
                        pendingQueue.add(new ItemWithDistances<Node>(childNode, childDistance, childMinDistance));
                    }
                }
            }
        }
        if (pendingQueue.isEmpty()) {
            nextPendingMinDistance = Double.POSITIVE_INFINITY;
        } else {
            nextPendingMinDistance = pendingQueue.peek().minDistance;
        }
    }
    finished = true;
}
