@Override
public void learnFromInstance(Instance inst, HoeffdingAdaptiveTree ht, SplitNode parent, int parentBranch) {
    int trueClass = (int) inst.classValue();
    // New option vore
    int k = MiscUtils.poisson(1.0, this.classifierRandom);
    Instance weightedInst = (Instance) inst.copy();
    if (k > 0) {
        weightedInst.setWeight(inst.weight() * k);
    }
    // Compute ClassPrediction using filterInstanceToLeaf
    int ClassPrediction = Utils.maxIndex(this.getClassVotes(inst, ht));
    boolean blCorrect = (trueClass == ClassPrediction);
    if (this.estimationErrorWeight == null) {
        this.estimationErrorWeight = new ADWIN();
    }
    double oldError = this.getErrorEstimation();
    this.ErrorChange = this.estimationErrorWeight.setInput(blCorrect == true ? 0.0 : 1.0);
    if (this.ErrorChange == true && oldError > this.getErrorEstimation()) {
        this.ErrorChange = false;
    }
    // Update statistics
    // inst
    learnFromInstance(weightedInst, ht);
    // Check for Split condition
    double weightSeen = this.getWeightSeen();
    if (weightSeen - this.getWeightSeenAtLastSplitEvaluation() >= ht.gracePeriodOption.getValue()) {
        ht.attemptToSplit(this, parent, parentBranch);
        this.setWeightSeenAtLastSplitEvaluation(weightSeen);
    }
// learnFromInstance alternate Tree and Child nodes
/*if (this.alternateTree != null)  {
            this.alternateTree.learnFromInstance(inst,ht);
            }
            for (Node child : this.children) {
            if (child != null) {
            child.learnFromInstance(inst,ht);
            }
            }*/
}
