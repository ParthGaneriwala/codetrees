private String tryMerging(GeneratorCluster merge) {
    String message = "";
    double overlapDegree = generator.overlapRadiusDegree(merge.generator);
    if (overlapDegree > merge_threshold) {
        SphereCluster mcluster = merge.generator;
        double radius = Math.max(generator.getRadius(), mcluster.getRadius());
        generator.combine(mcluster);
        // //adjust radius, get bigger and bigger with high dim data
        generator.setRadius(radius);
        // double[] center = generator.getCenter();
        // double[] mcenter = mcluster.getCenter();
        // double weight = generator.getWeight();
        // double mweight = generator.getWeight();
        // //                for (int i = 0; i < center.length; i++) {
        // //                    center[i] = (center[i] * weight + mcenter[i] * mweight) / (mweight + weight);
        // //                }
        // generator.setWeight(weight + mweight);
        message = "Clusters merging: " + mergeClusterB.generator.getId() + " into " + mergeClusterA.generator.getId();
        // clean up and restet merging stuff
        // mark kernel so it gets killed when it doesn't contain any more instances
        merge.kill = decayHorizonOption.getValue();
        // set weight to 0 so no new instances will be created in the cluster
        mcluster.setWeight(0.0);
        normalizeWeights();
        numActiveKernels--;
        mergeClusterB = mergeClusterA = null;
        merging = false;
        mergeKernelsOverlapping = false;
    } else {
        if (overlapDegree > 0 && !mergeKernelsOverlapping) {
            mergeKernelsOverlapping = true;
            message = "Merge overlapping started";
        }
    }
    return message;
}
