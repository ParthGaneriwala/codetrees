public void put(int col, int row, double value) {
    if (row < window.minJforI(col) || row > window.maxJforI(col))
        throw new InternalError("CostMatrix is filled in a cell (col=" + col + ", row=" + row + ") that is not in the " + "search window");
    if (col == currColIndex)
        currCol[row - minCurrRow] = value;
    else if (col == currColIndex - 1)
        lastCol[row - minLastRow] = value;
    else if (col == currColIndex + 1) {
        try {
            if (isSwapFileFreed)
                throw new InternalError("The SwapFileMatrix has been freeded by the freeMem() method");
            cellValuesFile.seek(cellValuesFile.length());
            colOffsets[currColIndex - 1] = cellValuesFile.getFilePointer();
            cellValuesFile.write(TypeConversions.doubleArrayToByteArray(lastCol));
        } catch (IOException e) {
            throw new InternalError("Unable to fill the CostMatrix in the Swap file (IOException)");
        }
        lastCol = currCol;
        minLastRow = minCurrRow;
        minCurrRow = window.minJforI(col);
        currColIndex++;
        currCol = new double[(window.maxJforI(col) - window.minJforI(col)) + 1];
        currCol[row - minCurrRow] = value;
    } else {
        throw new InternalError("A SwapFileMatrix can only fill in 2 adjacentcolumns at a time");
    }
}
