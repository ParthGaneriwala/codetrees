public void trainOnInstance(Instance instance, double weight, long instancesSeen) {
    Instance weightedInstance = (Instance) instance.copy();
    weightedInstance.setWeight(instance.weight() * weight);
    this.classifier.trainOnInstance(weightedInstance);
    if (this.bkgLearner != null)
        this.bkgLearner.classifier.trainOnInstance(instance);
    // Should it use a drift detector? Also, is it a backgroundLearner? If so, then do not "incept" another one.
    if (this.useDriftDetector && !this.isBackgroundLearner) {
        boolean correctlyClassifies = this.classifier.correctlyClassifies(instance);
        // Check for warning only if useBkgLearner is active
        if (this.useBkgLearner) {
            // Update the warning detection method
            this.warningDetectionMethod.input(correctlyClassifies ? 0 : 1);
            // Check if there was a change
            if (this.warningDetectionMethod.getChange()) {
                this.lastWarningOn = instancesSeen;
                this.numberOfWarningsDetected++;
                // Create a new bkgTree classifier
                ARFHoeffdingTree bkgClassifier = (ARFHoeffdingTree) this.classifier.copy();
                bkgClassifier.resetLearning();
                // Resets the evaluator
                BasicClassificationPerformanceEvaluator bkgEvaluator = (BasicClassificationPerformanceEvaluator) this.evaluator.copy();
                bkgEvaluator.reset();
                // Create a new bkgLearner object
                this.bkgLearner = new ARFBaseLearner(indexOriginal, bkgClassifier, bkgEvaluator, instancesSeen, this.useBkgLearner, this.useDriftDetector, this.driftOption, this.warningOption, true);
                // Update the warning detection object for the current object
                // (this effectively resets changes made to the object while it was still a bkg learner).
                this.warningDetectionMethod = ((ChangeDetector) getPreparedClassOption(this.warningOption)).copy();
            }
        }
        /**
         * ******** drift detection **********
         */
        // Update the DRIFT detection method
        this.driftDetectionMethod.input(correctlyClassifies ? 0 : 1);
        // Check if there was a change
        if (this.driftDetectionMethod.getChange()) {
            this.lastDriftOn = instancesSeen;
            this.numberOfDriftsDetected++;
            this.reset();
        }
    }
}
