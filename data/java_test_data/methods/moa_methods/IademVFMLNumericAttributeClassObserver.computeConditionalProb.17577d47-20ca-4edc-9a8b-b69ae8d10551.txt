@Override
public double[] computeConditionalProb(ArrayList<Double> cuts, double cutValue) {
    int numClasses = this.classDist.numValues();
    double[] instPerClass = new double[numClasses];
    Arrays.fill(instPerClass, 0);
    int keyPos;
    if (cutValue <= cuts.get(0)) {
        keyPos = 0;
        while (keyPos < this.binList.size() && this.binList.get(keyPos).upperBound <= cuts.get(0)) {
            for (int i = 0; i < numClasses; i++) {
                instPerClass[i] += this.binList.get(keyPos).classWeights.getValue(i);
            }
            keyPos++;
        }
    } else if (cutValue > cuts.get(cuts.size() - 1)) {
        keyPos = this.binList.size() - 1;
        while (keyPos < this.binList.size() && this.binList.get(keyPos).upperBound > cuts.get(cuts.size() - 1)) {
            for (int i = 0; i < numClasses; i++) {
                instPerClass[i] += this.binList.get(keyPos).classWeights.getValue(i);
            }
            keyPos--;
        }
    } else {
        int currentBin = 1;
        double lastBin = cuts.get(currentBin);
        while (cutValue > lastBin) {
            currentBin++;
            lastBin = cuts.get(currentBin);
        }
        double firstBin = cuts.get(currentBin - 1);
        keyPos = 0;
        while (keyPos < this.binList.size() && this.binList.get(keyPos).upperBound <= firstBin) {
            keyPos++;
        }
        while (keyPos < this.binList.size() && this.binList.get(keyPos).upperBound <= lastBin) {
            for (int i = 0; i < numClasses; i++) {
                instPerClass[i] += this.binList.get(keyPos).classWeights.getValue(i);
            }
            keyPos++;
        }
    }
    // if there is no information in this bin...
    boolean allZero = true;
    int pos = 0;
    while ((allZero) && (pos < numClasses)) {
        if (instPerClass[pos] > 0.0) {
            allZero = false;
        }
        pos++;
    }
    double[] classVotes = new double[numClasses];
    if (allZero) {
        for (int i = 0; i < numClasses; i++) {
            classVotes[i] = 1.0 / (double) numClasses;
        }
    } else {
        for (int i = 0; i < numClasses; i++) {
            if (classDist.getValue(i) == 0) {
                classVotes[i] = 0.0;
            } else {
                classVotes[i] = instPerClass[i] / classDist.getValue(i);
            }
        }
    }
    return classVotes;
}
