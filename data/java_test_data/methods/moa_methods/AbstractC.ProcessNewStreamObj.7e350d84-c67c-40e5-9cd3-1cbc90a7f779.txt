@Override
protected void ProcessNewStreamObj(Instance inst) {
    if (bShowProgress)
        ShowProgress("Processed " + (objId - 1) + " stream objects.");
    // PrintInstance(inst);
    double[] values = getInstanceValues(inst);
    StreamObj obj = new StreamObj(values);
    // process new data stream object
    if (bTrace)
        Println("\n- - - - - - - - - - - -\n");
    // create new ISB node
    ISBNode nodeNew = new ISBNode(inst, obj, objId);
    if (bTrace) {
        Print("New node: ");
        PrintNode(nodeNew);
    }
    // update object identifier (slide window)
    objId++;
    // purge expired node
    ISBNode nodeExpired = GetExpiredNode();
    if (nodeExpired != null) {
        // purge nodeExpired
        if (bTrace) {
            Print("nodeExpired: ");
            PrintNode(nodeExpired);
        }
        RemoveNode(nodeExpired);
    }
    // initialize nodeNew.lt_cnt
    if (bTrace)
        Println("initialize nodeNew");
    for (int i = 0; i < m_WindowSize; i++) {
        nodeNew.lt_cnt.add(1);
    }
    // add nodeNew to window and index
    AddNode(nodeNew);
    if (bTrace)
        PrintWindow();
    // perform range query search
    if (bTrace)
        Println("Perform range query seach");
    nRangeQueriesExecuted++;
    Vector<ISBIndex.ISBSearchResult> neighbors = ISB.RangeSearch(nodeNew, m_radius);
    // process each returned node
    for (ISBSearchResult res : neighbors) {
        ISBNode node = res.node;
        UpdateNeighbors(nodeNew, node);
    }
    OutputPatterns();
    if (bTrace) {
        PrintOutliers();
        for (ISBNode node : windowNodes) {
            Print(node.id + ".lt_count: ");
            Print_lt_cnt(node.lt_cnt);
        }
    }
}
