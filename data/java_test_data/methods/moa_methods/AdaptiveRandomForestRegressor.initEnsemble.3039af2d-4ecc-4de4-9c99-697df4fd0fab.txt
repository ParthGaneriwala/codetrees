protected void initEnsemble(Instance instance) {
    // Init the ensemble.
    int ensembleSize = this.ensembleSizeOption.getValue();
    this.ensemble = new ARFFIMTDDBaseLearner[ensembleSize];
    // TODO: this should be an option with default = BasicClassificationPerformanceEvaluator
    BasicRegressionPerformanceEvaluator regressionEvaluator = new BasicRegressionPerformanceEvaluator();
    this.subspaceSize = this.mFeaturesPerTreeSizeOption.getValue();
    // The size of m depends on:
    // 1) mFeaturesPerTreeSizeOption
    // 2) mFeaturesModeOption
    // Ignore class label ( -1 )
    int n = instance.numAttributes() - 1;
    switch(this.mFeaturesModeOption.getChosenIndex()) {
        case AdaptiveRandomForest.FEATURES_SQRT:
            this.subspaceSize = (int) Math.round(Math.sqrt(n)) + 1;
            break;
        case AdaptiveRandomForest.FEATURES_SQRT_INV:
            this.subspaceSize = n - (int) Math.round(Math.sqrt(n) + 1);
            break;
        case AdaptiveRandomForest.FEATURES_PERCENT:
            // If subspaceSize is negative, then first find out the actual percent, i.e., 100% - m.
            double percent = this.subspaceSize < 0 ? (100 + this.subspaceSize) / 100.0 : this.subspaceSize / 100.0;
            this.subspaceSize = (int) Math.round(n * percent);
            break;
    }
    // m is negative, use size(features) + -m
    if (this.subspaceSize < 0)
        this.subspaceSize = n + this.subspaceSize;
    // abs(m) > n), then use m = 1
    if (this.subspaceSize <= 0)
        this.subspaceSize = 1;
    // m > n, then it should use n
    if (this.subspaceSize > n)
        this.subspaceSize = n;
    ARFFIMTDD treeLearner = (ARFFIMTDD) getPreparedClassOption(this.treeLearnerOption);
    treeLearner.resetLearning();
    for (int i = 0; i < ensembleSize; ++i) {
        treeLearner.subspaceSizeOption.setValue(this.subspaceSize);
        this.ensemble[i] = new ARFFIMTDDBaseLearner(i, (ARFFIMTDD) treeLearner.copy(), (BasicRegressionPerformanceEvaluator) regressionEvaluator.copy(), this.instancesSeen, !this.disableBackgroundLearnerOption.isSet(), !this.disableDriftDetectionOption.isSet(), driftDetectionMethodOption, warningDetectionMethodOption, false);
    }
}
