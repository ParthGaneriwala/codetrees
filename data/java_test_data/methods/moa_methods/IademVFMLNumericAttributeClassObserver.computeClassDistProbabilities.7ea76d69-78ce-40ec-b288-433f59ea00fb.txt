@Override
public void computeClassDistProbabilities(double[][][] cut_value_classDist_lower, double[][][] cut_value_classDist_upper, double[][] counts_cut_value, boolean withIntervalEstimates) {
    int classes = this.classDist.numValues();
    Bin element = binList.get(0);
    double numLeftInst = element.classWeights.sumOfValues();
    double numRightInst = this.classDist.sumOfValues() - numLeftInst;
    counts_cut_value[0][0] = numLeftInst;
    counts_cut_value[0][1] = numRightInst;
    double[] leftClassDist = new double[classes];
    double[] rightClassDist = new double[classes];
    for (int i = 0; i < classes; i++) {
        leftClassDist[i] = element.classWeights.getValue(i);
        rightClassDist[i] = this.classDist.getValue(i) - leftClassDist[i];
        double lEstimates = 0.0;
        if (numLeftInst != 0) {
            lEstimates = leftClassDist[i] / numLeftInst;
        }
        double lError = 0.0;
        if (withIntervalEstimates) {
            lError = IademCommonProcedures.getIADEM_HoeffdingBound(lEstimates, numLeftInst);
        }
        cut_value_classDist_lower[0][0][i] = Math.max(0.0, lEstimates - lError);
        cut_value_classDist_upper[0][0][i] = Math.min(1.0, lEstimates + lError);
        double rEstimates = 0.0;
        if (numRightInst != 0.0) {
            rEstimates = rightClassDist[i] / numRightInst;
        }
        double rError = 0.0;
        if (withIntervalEstimates) {
            rError = IademCommonProcedures.getIADEM_HoeffdingBound(rEstimates, numRightInst);
        }
        cut_value_classDist_lower[0][1][i] = Math.max(0.0, rEstimates - rError);
        cut_value_classDist_upper[0][1][i] = Math.min(1.0, rEstimates + rError);
    }
    for (int i = 1; i < this.binList.size() - 1; i++) {
        element = this.binList.get(i);
        double numChangingInst = element.classWeights.sumOfValues();
        numLeftInst += numChangingInst;
        numRightInst -= numChangingInst;
        // corte i a la izquierda
        counts_cut_value[i][0] = numLeftInst;
        // corte i a la derecha
        counts_cut_value[i][1] = numRightInst;
        for (int j = 0; j < classes; j++) {
            double changingClassDist = element.classWeights.getValue(j);
            leftClassDist[j] += changingClassDist;
            rightClassDist[j] -= changingClassDist;
            double lEstimates = 0.0;
            if (numLeftInst != 0) {
                lEstimates = leftClassDist[j] / numLeftInst;
            }
            double lError = 0.0;
            if (withIntervalEstimates) {
                lError = IademCommonProcedures.getIADEM_HoeffdingBound(lEstimates, numLeftInst);
            }
            cut_value_classDist_lower[i][0][j] = Math.max(0.0, lEstimates - lError);
            cut_value_classDist_upper[i][0][j] = Math.min(1.0, lEstimates + lError);
            double rEstimates = 0.0;
            if (numRightInst != 0.0) {
                rEstimates = rightClassDist[j] / numRightInst;
            }
            double rError = 0.0;
            if (withIntervalEstimates) {
                rError = IademCommonProcedures.getIADEM_HoeffdingBound(rEstimates, numRightInst);
            }
            cut_value_classDist_lower[i][1][j] = Math.max(0.0, rEstimates - rError);
            cut_value_classDist_upper[i][1][j] = Math.min(1.0, rEstimates + rError);
        }
    }
}
