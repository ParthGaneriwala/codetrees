public double[] lnsrch(double[] xold, double[] gradient, double[] direct, double stpmax, boolean[] isFixed, double[][] nwsBounds, DynamicIntArray wsBdsIndx) {
    // idx of variable to be
    int i, k, len = xold.length, fixedOne = -1;
    // fixed
    // lambda to be found, and its lower bound
    double alam, alamin;
    // For convergence and bound test
    double temp, test, alpha = Double.POSITIVE_INFINITY, fold = m_f, sum;
    // For cubic interpolation
    double a, alam2 = 0, b, disc = 0, maxalam = 1.0, rhs1, rhs2, tmplam;
    // New variable values
    double[] x = new double[len];
    // Scale the step
    for (sum = 0.0, i = 0; i < len; i++) {
        if (// For fixed variables, direction = 0
        !isFixed[i])
            sum += direct[i] * direct[i];
    }
    sum = Math.sqrt(sum);
    // "stpmax: "+Utils.doubleToString(stpmax,10,7));
    if (sum > stpmax) {
        for (i = 0; i < len; i++) if (!isFixed[i])
            direct[i] *= stpmax / sum;
    } else
        maxalam = stpmax / sum;
    // Compute initial rate of decrease, g'*d
    m_Slope = 0.0;
    for (i = 0; i < len; i++) {
        x[i] = xold[i];
        if (!isFixed[i])
            m_Slope += gradient[i] * direct[i];
    }
    // Slope too small
    if (Math.abs(m_Slope) <= m_Zero) {
        if (m_Debug)
            System.err.println("Gradient and direction orthogonal -- " + "Min. found with current fixed variables" + " (or all variables fixed). Try to release" + " some variables now.");
        return x;
    }
    // Err: slope > 0
    if (m_Slope > m_Zero) {
        if (m_Debug)
            for (int h = 0; h < x.length; h++) System.err.println(h + ": isFixed=" + isFixed[h] + ", x=" + x[h] + ", grad=" + gradient[h] + ", direct=" + direct[h]);
        throw new RuntimeException("g'*p positive! -- Try to debug from here: line 327.");
    }
    // Compute LAMBDAmin and upper bound of lambda--alpha
    test = 0.0;
    for (i = 0; i < len; i++) {
        if (!isFixed[i]) {
            // No need for fixed variables
            temp = Math.abs(direct[i]) / Math.max(Math.abs(x[i]), 1.0);
            if (temp > test)
                test = temp;
        }
    }
    if (// Not converge
    test > m_Zero)
        alamin = m_TOLX / test;
    else {
        if (m_Debug)
            System.err.println("Zero directions for all free variables -- " + "Min. found with current fixed variables" + " (or all variables fixed). Try to release" + " some variables now.");
        return x;
    }
    // Check whether any non-working-set bounds are "binding"
    for (i = 0; i < len; i++) {
        if (!isFixed[i]) {
            // No need for fixed variables
            double alpi;
            if ((direct[i] < -m_Epsilon) && !Double.isNaN(nwsBounds[0][i])) {
                // Not
                // feasible
                alpi = (nwsBounds[0][i] - xold[i]) / direct[i];
                if (alpi <= m_Zero) {
                    // Zero
                    if (m_Debug)
                        System.err.println("Fix variable " + i + " to lower bound " + nwsBounds[0][i] + " from value " + xold[i]);
                    x[i] = nwsBounds[0][i];
                    // Fix this variable
                    isFixed[i] = true;
                    alpha = 0.0;
                    // Add cons. to working
                    nwsBounds[0][i] = Double.NaN;
                    // set
                    wsBdsIndx.addElement(i);
                } else if (alpha > alpi) {
                    // Fix one variable in one
                    // iteration
                    alpha = alpi;
                    fixedOne = i;
                }
            } else if ((direct[i] > m_Epsilon) && !Double.isNaN(nwsBounds[1][i])) {
                // Not
                // feasible
                alpi = (nwsBounds[1][i] - xold[i]) / direct[i];
                if (alpi <= m_Zero) {
                    // Zero
                    if (m_Debug)
                        System.err.println("Fix variable " + i + " to upper bound " + nwsBounds[1][i] + " from value " + xold[i]);
                    x[i] = nwsBounds[1][i];
                    // Fix this variable
                    isFixed[i] = true;
                    alpha = 0.0;
                    // Add cons. to working
                    nwsBounds[1][i] = Double.NaN;
                    // set
                    wsBdsIndx.addElement(i);
                } else if (alpha > alpi) {
                    alpha = alpi;
                    fixedOne = i;
                }
            }
        }
    }
    if (alpha <= m_Zero) {
        // Zero
        m_IsZeroStep = true;
        if (m_Debug)
            System.err.println("Alpha too small, try again");
        return x;
    }
    // Always try full feasible newton step
    alam = alpha;
    if (alam > 1.0)
        alam = 1.0;
    // Iteration of one newton step, if necessary, backtracking is done
    double // Initial function value
    initF = fold, hi = alam, lo = alam, newSlope = 0, fhi = m_f, // Variables
    flo = m_f;
    // used for
    // beta
    // condition
    // Gradient on the new variable values
    double[] newGrad;
    kloop: for (k = 0; ; k++) {
        if (m_Debug)
            System.err.println("\nLine search iteration: " + k);
        for (i = 0; i < len; i++) {
            if (!isFixed[i]) {
                // Compute xnew
                x[i] = xold[i] + alam * direct[i];
                if (!Double.isNaN(nwsBounds[0][i]) && (x[i] < nwsBounds[0][i])) {
                    // Rounding error
                    x[i] = nwsBounds[0][i];
                } else if (!Double.isNaN(nwsBounds[1][i]) && (x[i] > nwsBounds[1][i])) {
                    // Rounding error
                    x[i] = nwsBounds[1][i];
                }
            }
        }
        // Compute fnew
        m_f = objectiveFunction(x);
        if (Double.isNaN(m_f))
            throw new RuntimeException("Objective function value is NaN!");
        while (Double.isInfinite(m_f)) {
            // Avoid infinity
            if (m_Debug)
                System.err.println("Too large m_f.  Shrink step by half.");
            // Shrink by half
            alam *= 0.5;
            if (alam <= m_Epsilon) {
                if (m_Debug)
                    System.err.println("Wrong starting points, change them!");
                return x;
            }
            for (i = 0; i < len; i++) if (!isFixed[i])
                x[i] = xold[i] + alam * direct[i];
            m_f = objectiveFunction(x);
            if (Double.isNaN(m_f))
                throw new RuntimeException("Objective function value is NaN!");
            initF = Double.POSITIVE_INFINITY;
        }
        if (m_f <= fold + m_ALF * alam * m_Slope) {
            // decrease
            if (m_Debug)
                System.err.println("Sufficient function decrease (alpha condition): ");
            newGrad = evaluateGradient(x);
            for (newSlope = 0.0, i = 0; i < len; i++) if (!isFixed[i])
                newSlope += newGrad[i] * direct[i];
            if (newSlope >= m_BETA * m_Slope) {
                // pos. defnty.
                if (m_Debug)
                    System.err.println("Increasing derivatives (beta condition): ");
                if ((fixedOne != -1) && (alam >= alpha)) {
                    // and over
                    if (direct[fixedOne] > 0) {
                        // Avoid
                        x[fixedOne] = nwsBounds[1][fixedOne];
                        // rounding
                        // error
                        // Add cons.
                        nwsBounds[1][fixedOne] = Double.NaN;
                    // to
                    // working
                    // set
                    } else {
                        // Avoid
                        x[fixedOne] = nwsBounds[0][fixedOne];
                        // rounding
                        // error
                        // Add cons.
                        nwsBounds[0][fixedOne] = Double.NaN;
                    // to
                    // working
                    // set
                    }
                    if (m_Debug)
                        System.err.println("Fix variable " + fixedOne + " to bound " + x[fixedOne] + " from value " + xold[fixedOne]);
                    // Fix the variable
                    isFixed[fixedOne] = true;
                    wsBdsIndx.addElement(fixedOne);
                }
                return x;
            } else if (k == 0) {
                // First time: increase alam
                // Search for the smallest value not complying with alpha
                // condition
                double upper = Math.min(alpha, maxalam);
                if (m_Debug)
                    System.err.println("Alpha condition holds, increase alpha... ");
                while (!((alam >= upper) || (m_f > fold + m_ALF * alam * m_Slope))) {
                    lo = alam;
                    flo = m_f;
                    alam *= 2.0;
                    if (// Avoid rounding errors
                    alam >= upper)
                        alam = upper;
                    for (i = 0; i < len; i++) if (!isFixed[i])
                        x[i] = xold[i] + alam * direct[i];
                    m_f = objectiveFunction(x);
                    if (Double.isNaN(m_f))
                        throw new RuntimeException("Objective function value is NaN!");
                    newGrad = evaluateGradient(x);
                    for (newSlope = 0.0, i = 0; i < len; i++) if (!isFixed[i])
                        newSlope += newGrad[i] * direct[i];
                    if (newSlope >= m_BETA * m_Slope) {
                        if ((fixedOne != -1) && (alam >= alpha)) {
                            // over
                            if (direct[fixedOne] > 0) {
                                // Avoid
                                x[fixedOne] = nwsBounds[1][fixedOne];
                                // rounding
                                // error
                                // Add
                                nwsBounds[1][fixedOne] = Double.NaN;
                            // cons.
                            // to
                            // working
                            // set
                            } else {
                                // Avoid
                                x[fixedOne] = nwsBounds[0][fixedOne];
                                // rounding
                                // error
                                // Add
                                nwsBounds[0][fixedOne] = Double.NaN;
                            // cons.
                            // to
                            // working
                            // set
                            }
                            if (m_Debug)
                                System.err.println("Fix variable " + fixedOne + " to bound " + x[fixedOne] + " from value " + xold[fixedOne]);
                            // Fix the variable
                            isFixed[fixedOne] = true;
                            wsBdsIndx.addElement(fixedOne);
                        }
                        return x;
                    }
                }
                hi = alam;
                fhi = m_f;
                break kloop;
            } else {
                if (m_Debug)
                    System.err.println("Alpha condition holds.");
                hi = alam2;
                lo = alam;
                flo = m_f;
                break kloop;
            }
        } else if (alam < alamin) {
            // No feasible lambda found
            if (initF < fold) {
                alam = Math.min(1.0, alpha);
                for (i = 0; i < len; i++) if (!isFixed[i])
                    // Still take
                    x[i] = xold[i] + alam * direct[i];
                if (m_Debug)
                    System.err.println("No feasible lambda: still take" + " alpha=" + alam);
                if ((fixedOne != -1) && (alam >= alpha)) {
                    // and over
                    if (direct[fixedOne] > 0) {
                        // Avoid
                        x[fixedOne] = nwsBounds[1][fixedOne];
                        // rounding
                        // error
                        // Add cons.
                        nwsBounds[1][fixedOne] = Double.NaN;
                    // to
                    // working
                    // set
                    } else {
                        // Avoid
                        x[fixedOne] = nwsBounds[0][fixedOne];
                        // rounding
                        // error
                        // Add cons.
                        nwsBounds[0][fixedOne] = Double.NaN;
                    // to
                    // working
                    // set
                    }
                    if (m_Debug)
                        System.err.println("Fix variable " + fixedOne + " to bound " + x[fixedOne] + " from value " + xold[fixedOne]);
                    // Fix the variable
                    isFixed[fixedOne] = true;
                    wsBdsIndx.addElement(fixedOne);
                }
            } else {
                // Convergence on delta(x)
                for (i = 0; i < len; i++) x[i] = xold[i];
                m_f = fold;
                if (m_Debug)
                    System.err.println("Cannot find feasible lambda");
            }
            return x;
        } else {
            // Backtracking by polynomial interpolation
            if (k == 0) {
                // First time backtrack: quadratic interpolation
                if (!Double.isInfinite(initF))
                    initF = m_f;
                // lambda = -g'(0)/(2*g''(0))
                tmplam = -0.5 * alam * m_Slope / ((m_f - fold) / alam - m_Slope);
            } else {
                // Subsequent backtrack: cubic interpolation
                rhs1 = m_f - fold - alam * m_Slope;
                rhs2 = fhi - fold - alam2 * m_Slope;
                a = (rhs1 / (alam * alam) - rhs2 / (alam2 * alam2)) / (alam - alam2);
                b = (-alam2 * rhs1 / (alam * alam) + alam * rhs2 / (alam2 * alam2)) / (alam - alam2);
                if (a == 0.0)
                    tmplam = -m_Slope / (2.0 * b);
                else {
                    disc = b * b - 3.0 * a * m_Slope;
                    if (disc < 0.0)
                        disc = 0.0;
                    double numerator = -b + Math.sqrt(disc);
                    if (numerator >= Double.MAX_VALUE) {
                        numerator = Double.MAX_VALUE;
                        if (m_Debug)
                            System.err.print("-b+sqrt(disc) too large! Set it to MAX_VALUE.");
                    }
                    tmplam = numerator / (3.0 * a);
                }
                // "alam: " + Utils.doubleToString(alam,10,7)+ "\n");
                if (tmplam > 0.5 * alam)
                    // lambda <= 0.5*lambda_old
                    tmplam = 0.5 * alam;
            }
        }
        alam2 = alam;
        fhi = m_f;
        // lambda >= 0.1*lambda_old
        alam = Math.max(tmplam, 0.1 * alam);
        if (alam > alpha) {
            throw new RuntimeException("Sth. wrong in lnsrch:" + "Lambda infeasible!(lambda=" + alam + ", alpha=" + alpha + ", upper=" + tmplam + "|" + (-alpha * m_Slope / (2.0 * ((m_f - fold) / alpha - m_Slope))) + ", m_f=" + m_f + ", fold=" + fold + ", slope=" + m_Slope);
        }
    }
    // Endfor(k=0;;k++)
    // Quadratic interpolation between lamda values between lo and hi.
    // If cannot find a value satisfying beta condition, use lo.
    double ldiff = hi - lo, lincr;
    // 
    while ((newSlope < m_BETA * m_Slope) && (ldiff >= alamin)) {
        lincr = -0.5 * newSlope * ldiff * ldiff / (fhi - flo - newSlope * ldiff);
        if (m_Debug)
            System.err.println("fhi = " + fhi + "\n" + "flo = " + flo + "\n" + "ldiff = " + ldiff + "\n" + "lincr (using QI) = " + lincr + "\n");
        if (lincr < 0.2 * ldiff)
            lincr = 0.2 * ldiff;
        alam = lo + lincr;
        if (alam >= hi) {
            // We cannot go beyond the bounds, so the best
            // we can try is hi
            alam = hi;
            lincr = ldiff;
        }
        for (i = 0; i < len; i++) if (!isFixed[i])
            x[i] = xold[i] + alam * direct[i];
        m_f = objectiveFunction(x);
        if (Double.isNaN(m_f))
            throw new RuntimeException("Objective function value is NaN!");
        if (m_f > fold + m_ALF * alam * m_Slope) {
            // Alpha condition fails, shrink lambda_upper
            ldiff = lincr;
            fhi = m_f;
        } else {
            // Alpha condition holds
            newGrad = evaluateGradient(x);
            for (newSlope = 0.0, i = 0; i < len; i++) if (!isFixed[i])
                newSlope += newGrad[i] * direct[i];
            if (newSlope < m_BETA * m_Slope) {
                // Beta condition fails, shrink lambda_lower
                lo = alam;
                ldiff -= lincr;
                flo = m_f;
            }
        }
    }
    if (newSlope < m_BETA * m_Slope) {
        // take lo
        if (m_Debug)
            System.err.println("Beta condition cannot be satisfied, take alpha condition");
        alam = lo;
        for (i = 0; i < len; i++) if (!isFixed[i])
            x[i] = xold[i] + alam * direct[i];
        m_f = flo;
    }
    if ((fixedOne != -1) && (alam >= alpha)) {
        // Has bounds and over
        if (direct[fixedOne] > 0) {
            // Avoid rounding error
            x[fixedOne] = nwsBounds[1][fixedOne];
            // Add cons. to working
            nwsBounds[1][fixedOne] = Double.NaN;
        // set
        } else {
            // Avoid rounding error
            x[fixedOne] = nwsBounds[0][fixedOne];
            // Add cons. to working
            nwsBounds[0][fixedOne] = Double.NaN;
        // set
        }
        if (m_Debug)
            System.err.println("Fix variable " + fixedOne + " to bound " + x[fixedOne] + " from value " + xold[fixedOne]);
        // Fix the variable
        isFixed[fixedOne] = true;
        wsBdsIndx.addElement(fixedOne);
    }
    return x;
}
