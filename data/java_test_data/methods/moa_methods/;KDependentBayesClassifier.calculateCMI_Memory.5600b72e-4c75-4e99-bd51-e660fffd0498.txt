// end mutualInformation(Node)>
private LinkedList<Integer> calculateCMI_Memory(int FN1, Vector<Integer> usedFeatures, int m) {
    Hashtable<Integer, Hashtable<Double, ClassCounter>> featureName_HT = trainResult.getFeatureTable();
    int fcnt = 0;
    int allfcnt = 0;
    double[] freq = trainResult.getClassFreqs().clone();
    LinkedList<Integer> usedFeatures_SortedCMIvalueListLL = new LinkedList<Integer>();
    SortedMap<Double, LinkedList> sMap = new TreeMap<Double, LinkedList>().descendingMap();
    double sumXC = 0;
    for (Double FV1 : featureName_HT.get(FN1).keySet()) {
        for (int k = 0; k < numClasses; k++) {
            double pXC = featureName_HT.get(FN1).get(FV1).getCountClass(k) / freq[k];
            if (pXC != 0) {
                sumXC += pXC * (Math.log(pXC) / Math.log(10));
            }
        }
    }
    Iterator it = usedFeatures.iterator();
    while (it.hasNext()) {
        int FN2 = (Integer) it.next();
        double CMIvalue = 0.0;
        double sumXYC = 0;
        double sumYC = 0;
        for (double FV2 : featureName_HT.get(FN2).keySet()) {
            for (int k = 0; k < numClasses; k++) {
                double pYC = featureName_HT.get(FN2).get(FV2).getCountClass(k) / freq[k];
                if (pYC != 0) {
                    sumYC += pYC * (Math.log(pYC) / Math.log(10));
                }
                // pXYC
                for (double FV1 : featureName_HT.get(FN1).keySet()) {
                    double pXYC = compareConditionalInstanceIDLists(FN1, FV1, FN2, FV2, k) / freq[k];
                    if (pXYC != 0) {
                        sumXYC += pXYC * (Math.log(pXYC) / Math.log(10));
                    }
                }
            }
        }
        CMIvalue = (sumXYC - sumXC - sumYC);
        // KDB treshold to eliminate low CMI value features
        if (treshold < CMIvalue) {
            if (!sMap.containsKey(CMIvalue)) {
                LinkedList<Integer> list = new LinkedList<Integer>();
                list.add(FN2);
                sMap.put(CMIvalue, list);
            } else {
                sMap.get(CMIvalue).add(FN2);
            }
            fcnt++;
            allfcnt++;
        }
        // removing redundant and lowest CMI values
        if ((fcnt > (m + 10))) {
            int delAmount = fcnt - m;
            while (delAmount > 0) {
                LinkedList<Integer> list2 = sMap.get(sMap.lastKey());
                if (list2.size() <= delAmount) {
                    delAmount -= list2.size();
                    fcnt -= list2.size();
                    sMap.remove(sMap.lastKey());
                } else {
                    list2.removeFirst();
                    sMap.put(sMap.lastKey(), list2);
                    delAmount--;
                    fcnt--;
                }
            }
        }
    }
    for (double sc : sMap.keySet()) {
        usedFeatures_SortedCMIvalueListLL.addAll(sMap.get(sc));
    }
    return usedFeatures_SortedCMIvalueListLL;
}
