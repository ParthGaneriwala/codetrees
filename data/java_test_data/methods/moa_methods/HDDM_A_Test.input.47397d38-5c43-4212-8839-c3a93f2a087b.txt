@Override
public void input(double value) {
    total_n++;
    total_c += value;
    if (n_min == 0) {
        n_min = total_n;
        c_min = total_c;
    }
    if (n_max == 0) {
        n_max = total_n;
        c_max = total_c;
    }
    double cota = Math.sqrt(1.0 / (2 * n_min) * Math.log(1.0 / driftConfidenceOption.getValue())), cota1 = Math.sqrt(1.0 / (2 * total_n) * Math.log(1.0 / driftConfidenceOption.getValue()));
    if (c_min / n_min + cota >= total_c / total_n + cota1) {
        c_min = total_c;
        n_min = total_n;
    }
    cota = Math.sqrt(1.0 / (2 * n_max) * Math.log(1.0 / driftConfidenceOption.getValue()));
    if (c_max / n_max - cota <= total_c / total_n - cota1) {
        c_max = total_c;
        n_max = total_n;
    }
    if (meanIncr(c_min, n_min, total_c, total_n, driftConfidenceOption.getValue())) {
        nEstimacion = total_n - n_min;
        cEstimacion = total_c - c_min;
        n_min = n_max = total_n = 0;
        c_min = c_max = total_c = 0;
        this.isChangeDetected = true;
        this.isWarningZone = false;
    } else if (meanIncr(c_min, n_min, total_c, total_n, warningConfidenceOption.getValue())) {
        this.isChangeDetected = false;
        this.isWarningZone = true;
    } else {
        this.isChangeDetected = false;
        this.isWarningZone = false;
    }
    if (this.oneSidedTestOption.getChosenIndex() == 1 && meanDecr(c_max, n_max, total_c, total_n)) {
        nEstimacion = total_n - n_max;
        cEstimacion = total_c - c_max;
        n_min = n_max = total_n = 0;
        c_min = c_max = total_c = 0;
    }
    updateEstimations();
}
