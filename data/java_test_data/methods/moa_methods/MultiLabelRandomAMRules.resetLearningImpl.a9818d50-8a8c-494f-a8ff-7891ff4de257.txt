@Override
public void resetLearningImpl() {
    this.classifierRandom.setSeed(this.randomSeedOption.getValue());
    int n = this.ensembleSizeOption.getValue();
    this.ensemble = new AMRulesMultiLabelLearner[n];
    this.errorMeasurer = new MultiLabelErrorMeasurer[n];
    AMRulesMultiLabelLearner baseLearner = (AMRulesMultiLabelLearner) getPreparedClassOption(this.baseLearnerOption);
    MultiLabelErrorMeasurer measurer = (MultiLabelErrorMeasurer) getPreparedClassOption(this.errorMeasurerOption);
    baseLearner.setAttributesPercentage(numAttributesPercentageOption.getValue());
    baseLearner.resetLearning();
    for (int i = 0; i < this.ensemble.length; i++) {
        this.ensemble[i] = (AMRulesMultiLabelLearner) baseLearner.copy();
        this.ensemble[i].setRandomSeed(this.classifierRandom.nextInt());
        this.errorMeasurer[i] = (MultiLabelErrorMeasurer) measurer.copy();
    }
    this.isRegression = (baseLearner instanceof MultiTargetRegressor);
    featureRanking = (FeatureRanking) getPreparedClassOption(this.featureRankingOption);
}
