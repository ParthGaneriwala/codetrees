private Kritwert kritwertfft(double[] lambdasquare, double confLevel, double maxM, int k) {
    double sumLambasquare = this.sum(lambdasquare);
    // M<-2^11
    int M = (int) Math.pow(2, 11);
    // while (150*pi*M/K^2<(2*sum(lambdasquare)+lambdasquare[1])) M<-M*2
    while (150 * Math.PI * M / (k * k) < (2 * sumLambasquare + lambdasquare[0])) {
        M *= 2;
    }
    // M<-min(c(M,maxM))
    M = (int) Math.min(M, maxM);
    // goodlimit<-150*pi*M/K^2
    double goodlimit = 150 * Math.PI * M / (k * k);
    // a<-0
    // t<-0:(M-1)*K/M
    double[] t = this.createArray(M, k);
    // x<-0:(M-1)*2*pi/K
    double[] xx = this.createArray2(M, k);
    // t[1]<-1
    t[0] = 1;
    // h<-.cramer.characteristicfunction(lambdasquare,t)/t*exp(-a*1i*t);
    Complex[] h = this.characteristic(lambdasquare, t);
    Complex z = new Complex(0, 1).multiply(-0);
    Complex[] hTemp = this.multiply(t, z);
    for (int i = 0; i < hTemp.length; i++) {
        hTemp[i] = hTemp[i].exp();
    }
    this.multiply(t, hTemp);
    for (int i = 0; i < h.length; i++) {
        h[i] = h[i].divide(hTemp[i]);
    }
    // h[1]<-complex(1,0,1)*sum(lambdasquare)
    h[0] = new Complex(0, 1).multiply(sumLambasquare);
    // Fx<-1/2-Im(K/(M*pi)*fft(h,inverse=FALSE))+K/(2*M*pi)*(sum(lambdasquare)+x+a)
    Complex[] temp = fft(h);
    this.multiply(temp, k / (M * Math.PI));
    double[] tempFx = this.imaginary(temp);
    this.multiply(tempFx, -1);
    tempFx = this.plus(tempFx, 0.5);
    double[] tempX = this.plus(xx, sumLambasquare);
    this.multiply(tempX, k / (2 * M * Math.PI));
    double[] Fx = this.sum(tempFx, tempX);
    // xindex<-which.min(abs(Fx[1:(M/2)]-conf.level))
    int xindex = this.whichMin(Fx, M, confLevel);
    // if (Fx[xindex]>conf.level) xindex<-xindex-1
    if (Fx[xindex] > confLevel) {
        xindex--;
    }
    // if (xindex<1) xindex<-1
    if (xindex < 1) {
        xindex = 0;
    }
    // quantile<-x[xindex]+(conf.level-Fx[xindex])*(x[xindex+1]-x[xindex])/(Fx[xindex+1]-Fx[xindex])
    double quantile = xx[xindex] + (confLevel - Fx[xindex]) * (xx[xindex + 1] - xx[xindex]) / (Fx[xindex + 1] - Fx[xindex]);
    if (Fx[M / 2] < confLevel) {
        System.out.println("Quantile calculation discrepance. Try to increase K!");
    }
    if (quantile > goodlimit) {
        System.out.println("Quantile beyond good approximation limit. Try to increase maxM or decrease K!");
    }
    return new Kritwert(quantile, xx, Fx);
}
