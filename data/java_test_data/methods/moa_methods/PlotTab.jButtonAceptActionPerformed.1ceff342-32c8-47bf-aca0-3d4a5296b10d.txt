// GEN-LAST:event_jButtonDeleteStreamActionPerformed
private void jButtonAceptActionPerformed(java.awt.event.ActionEvent evt) {
    // GEN-FIRST:event_jButtonAceptActionPerformed
    int algCount = this.jTableAlgoritms.getRowCount();
    int streamCount = this.jTableStreams.getRowCount();
    chart = new ImageChart[streamCount];
    for (int i = 0; i < streamCount; i++) {
        String streamName = this.jTableStreams.getModel().getValueAt(i, 0).toString();
        String streamID = this.jTableStreams.getModel().getValueAt(i, 1).toString();
        XYSeriesCollection dataset = new XYSeriesCollection();
        for (int j = 0; j < algCount; j++) {
            try {
                String algName = this.jTableAlgoritms.getModel().getValueAt(j, 0).toString();
                String algID = this.jTableAlgoritms.getModel().getValueAt(j, 1).toString();
                String algPath = FilenameUtils.separatorsToSystem(this.path + "\\" + streamName + "\\" + algName);
                File inputFile = new File(algPath);
                if (!inputFile.exists()) {
                    JOptionPane.showMessageDialog(this, "File not found: " + inputFile.getAbsolutePath(), "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                /*Preparing the graph*/
                ArrayList<String[]> data = readCSV(algPath);
                XYSeries series = new XYSeries(algID);
                int x = ReadFile.getMeasureIndex(algPath, this.jComboBoxXColumn.getSelectedItem().toString());
                int y = ReadFile.getMeasureIndex(algPath, this.jComboBoxYColumn.getSelectedItem().toString());
                for (String[] s : data) {
                    series.add(Double.parseDouble(s[x]), Double.parseDouble(s[y]));
                }
                dataset.addSeries(series);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(PlotTab.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(PlotTab.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        // end for
        /*Create chart*/
        JFreeChart imgChart = ChartFactory.createXYLineChart(// Title
        this.jTextFieldTitle.getText(), // x-axis Label
        this.jTextFieldxTitle.getText(), // y-axis Label
        this.jTextFieldyTitle.getText(), // Dataset
        dataset, // Plot Orientation
        PlotOrientation.VERTICAL, // Show Legend
        true, // Use tooltips
        true, // Configure chart to generate URLs?
        false);
        final XYPlot plot = imgChart.getXYPlot();
        switch(this.jComboBoxGrid.getSelectedItem().toString()) {
            case "White":
                plot.setBackgroundPaint(Color.white);
                break;
            case "Default":
                plot.setBackgroundPaint(Color.lightGray);
        }
        if (this.jCheckBoxShape.isSelected()) {
            final XYLineAndShapeRenderer renderer = new XYLineAndShapeRenderer();
            renderer.setSeriesLinesVisible(0, true);
            renderer.setSeriesShapesVisible(1, false);
            for (int k = 0; k < algCount; k++) {
                renderer.setSeriesPaint(k, Color.black);
            }
            plot.setRenderer(renderer);
        }
        this.chart[i] = new ImageChart(streamID, imgChart, (int) this.jSpinnerWidth.getValue(), (int) this.jSpinnerHeight.getValue());
    }
    this.imgPanel = new ImageTreePanel(chart);
    new ImageViewer(imgPanel, path);
}
