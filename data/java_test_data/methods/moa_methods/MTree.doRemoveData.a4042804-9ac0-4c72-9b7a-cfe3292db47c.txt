public void doRemoveData(DATA data, double distance) throws DataNotFound {
    for (IndexItem childItem : thisNode.children.values()) {
        @SuppressWarnings("unchecked") Node child = (Node) childItem;
        if (Math.abs(distance - child.distanceToParent) <= child.radius) {
            double distanceToChild = thisNode.mtree().distanceFunction.calculate(data, child.data);
            if (distanceToChild <= child.radius) {
                try {
                    child.removeData(data, distanceToChild);
                    thisNode.updateRadius(child);
                    return;
                } catch (DataNotFound e) {
                // If DataNotFound was thrown, then the data was not found in the child
                } catch (NodeUnderCapacity e) {
                    Node expandedChild = balanceChildren(child);
                    thisNode.updateRadius(expandedChild);
                    return;
                } catch (RootNodeReplacement e) {
                    throw new RuntimeException("Should never happen!");
                }
            }
        }
    }
    throw new DataNotFound();
}
