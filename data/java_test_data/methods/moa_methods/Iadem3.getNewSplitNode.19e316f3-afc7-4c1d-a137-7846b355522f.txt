@Override
public SplitNode getNewSplitNode(long counter, Node parent, IademAttributeSplitSuggestion bestSplit, Instance instance) {
    double[] cutPoints = new double[] { bestCutPoint };
    // a binary split
    Node[] children = new Node[2];
    long[] newClassDist = numericAttClassObserver.getLeftClassDist(bestCutPoint);
    long sumClassDist = numericAttClassObserver.getValueCount();
    long[] sumAttClassDist = numericAttClassObserver.getClassDist();
    boolean equalsPassesTest = true;
    if (this.numericAttClassObserver instanceof IademVFMLNumericAttributeClassObserver) {
        equalsPassesTest = false;
    }
    AdaptiveSplitNode splitNode = new AdaptiveSplitNode((Iadem3) this.tree, parent, null, ((LeafNode) this.parent).getMajorityClassVotes(instance), new NumericAttributeBinaryTest(this.attIndex, cutPoints[0], equalsPassesTest), ((AdaptiveLeafNode) this.parent).estimator, (AdaptiveLeafNode) this.parent, ((Iadem3) this.tree).currentSplitState);
    long leftClassDist = sum(newClassDist);
    long rightClassDist = sumClassDist - leftClassDist;
    double[] newLeftClassDist = new double[instance.attribute(instance.classIndex()).numValues()];
    double[] newRightClassDist = new double[instance.attribute(instance.classIndex()).numValues()];
    Arrays.fill(newLeftClassDist, 0);
    Arrays.fill(newRightClassDist, 0);
    for (int i = 0; i < newClassDist.length; i++) {
        newLeftClassDist[i] = newClassDist[i];
        newRightClassDist[i] = sumAttClassDist[i] - newLeftClassDist[i];
    }
    splitNode.setChildren(null);
    children[0] = ((Iadem3) tree).newLeafNode(splitNode, counter, leftClassDist, newLeftClassDist, instance);
    children[1] = ((Iadem3) tree).newLeafNode(splitNode, counter, rightClassDist, newRightClassDist, instance);
    splitNode.setChildren(children);
    return splitNode;
}
