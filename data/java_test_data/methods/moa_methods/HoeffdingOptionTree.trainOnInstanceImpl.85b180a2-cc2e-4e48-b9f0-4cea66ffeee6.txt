@Override
public void trainOnInstanceImpl(Instance inst) {
    if (this.treeRoot == null) {
        this.treeRoot = newLearningNode();
        this.activeLeafNodeCount = 1;
    }
    FoundNode[] foundNodes = this.treeRoot.filterInstanceToLeaves(inst, null, -1, true);
    for (FoundNode foundNode : foundNodes) {
        // option leaves will have a parentBranch of -999
        // option splits will have an option count of -999
        Node leafNode = foundNode.node;
        if (leafNode == null) {
            leafNode = newLearningNode();
            foundNode.parent.setChild(foundNode.parentBranch, leafNode);
            this.activeLeafNodeCount++;
        }
        if (leafNode instanceof LearningNode) {
            LearningNode learningNode = (LearningNode) leafNode;
            learningNode.learnFromInstance(inst, this);
            if (learningNode instanceof ActiveLearningNode) {
                ActiveLearningNode activeLearningNode = (ActiveLearningNode) learningNode;
                double weightSeen = activeLearningNode.getWeightSeen();
                if (weightSeen - activeLearningNode.getWeightSeenAtLastSplitEvaluation() >= this.gracePeriodOption.getValue()) {
                    attemptToSplit(activeLearningNode, foundNode.parent, foundNode.parentBranch);
                    activeLearningNode.setWeightSeenAtLastSplitEvaluation(weightSeen);
                }
            }
        }
    }
    if (this.trainingWeightSeenByModel % this.memoryEstimatePeriodOption.getValue() == 0) {
        estimateModelByteSizes();
    }
}
