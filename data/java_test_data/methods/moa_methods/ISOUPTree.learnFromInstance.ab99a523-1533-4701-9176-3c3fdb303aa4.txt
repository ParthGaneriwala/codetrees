public void learnFromInstance(MultiLabelInstance inst, double[] prediction, boolean growthAllowed) {
    // Update the statistics for this node
    double[] predictionP = tree.buildingModelTree() ? getPredictionModel(inst) : null;
    double[] predictionM = getPredictionTargetMean(inst);
    // number of instances passing through the node
    examplesSeen += inst.weight();
    for (int i = 0; i < tree.getModelContext().numOutputAttributes(); i++) {
        // sum of y values
        sumOfValues.addToValue(i, inst.weight() * inst.valueOutputAttribute(i));
        // sum of squared y values
        sumOfSquares.addToValue(i, inst.weight() * inst.valueOutputAttribute(i) * inst.valueOutputAttribute(i));
        if (tree.buildingModelTree()) {
            errorP.setValue(i, errorP.getValue(i) * 0.95 + Math.abs(predictionP[i] - inst.valueOutputAttribute(i)));
            errorM.setValue(i, errorM.getValue(i) * 0.95 + Math.abs(predictionM[i] - inst.valueOutputAttribute(i)));
        }
    }
    if (tree.buildingModelTree())
        learningModel.updatePerceptron(inst);
    for (int i = 0; i < inst.numInputAttributes(); i++) {
        AttributeStatisticsObserver obs = attributeObservers.get(i);
        if (obs == null) {
            // At this stage all nominal attributes are ignored
            if (inst.inputAttribute(i).isNumeric()) {
                obs = tree.newNumericClassObserver();
                attributeObservers.set(i, obs);
            } else if (inst.inputAttribute(i).isNominal()) {
                obs = tree.newNominalClassObserver();
                attributeObservers.set(i, obs);
            }
        }
        if (obs != null) {
            DoubleVector[] observations = new DoubleVector[inst.numOutputAttributes()];
            for (int j = 0; j < inst.numOutputAttributes(); j++) {
                observations[j] = new DoubleVector();
                observations[j].setValue(0, inst.weight());
                observations[j].setValue(1, inst.weight() * inst.valueOutputAttribute(j));
                observations[j].setValue(2, inst.weight() * inst.valueOutputAttribute(j) * inst.valueOutputAttribute(j));
            }
            obs.observeAttribute(inst.valueInputAttribute(i), observations);
        // obs.observeAttributeClassVector(inst.valueInputAttribute(i), getTargetVector(inst), inst.weight());
        }
    }
    if (growthAllowed) {
        checkForSplit();
    }
}
