public void trainOnInstanceImplPerceptron(int numClasses, int actualClass, double[][] votes) {
    // Init Perceptron
    if (this.reset == true) {
        this.reset = false;
        this.weightAttribute = new double[numClasses][votes.length];
        for (int i = 0; i < numClasses; i++) {
            for (int j = 0; j < votes.length - 1; j++) {
                weightAttribute[i][j] = 1.0 / (votes.length - 1.0);
            }
        }
        numInstances = initialNumInstancesOption.getValue();
    }
    // Weight decay
    double learningRatio = learningRatioOption.getValue() * 2.0 / (numInstances + (votes.length - 1) + 2.0);
    double lambda = penaltyFactorOption.getValue();
    numInstances++;
    double[] preds = new double[numClasses];
    for (int i = 0; i < numClasses; i++) {
        preds[i] = prediction(votes, i);
    }
    for (int i = 0; i < numClasses; i++) {
        double actual = (i == actualClass) ? 1.0 : 0.0;
        double delta = (actual - preds[i]) * preds[i] * (1 - preds[i]);
        for (int j = 0; j < this.ensemble.length; j++) {
            this.weightAttribute[i][j] += learningRatio * (delta * votes[j][i] - lambda * this.weightAttribute[i][j]);
        }
        this.weightAttribute[i][this.ensemble.length] += learningRatio * delta;
    }
}
