public void weka() {
    try {
        Class.forName("weka.gui.Logger");
    } catch (Exception e) {
        m_logPanel.addText("Please add weka.jar to the classpath to use the Weka explorer.");
        return;
    }
    Clustering wekaClustering;
    if (m_clusterer0.implementsMicroClusterer() && m_clusterer0.evaluateMicroClusteringOption.isSet())
        wekaClustering = micro0;
    else
        wekaClustering = macro0;
    if (wekaClustering == null || wekaClustering.size() == 0) {
        m_logPanel.addText("Empty Clustering");
        return;
    }
    int dims = wekaClustering.get(0).getCenter().length;
    FastVector attributes = new FastVector();
    for (int i = 0; i < dims; i++) attributes.addElement(new Attribute("att" + i));
    Instances instances = new Instances("trainset", attributes, 0);
    for (int c = 0; c < wekaClustering.size(); c++) {
        Cluster cluster = wekaClustering.get(c);
        Instance inst = new DenseInstance(cluster.getWeight(), cluster.getCenter());
        inst.setDataset(instances);
        instances.add(inst);
    }
    WekaExplorer explorer = new WekaExplorer(instances);
}
