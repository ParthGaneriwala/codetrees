@Override
public void trainOnInstanceImpl(Instance inst) {
    this.instances[this.t] = inst;
    int trueClass = (int) inst.classValue();
    boolean stablePrediction = MiscUtils.maxIndex(this.stableLearner.getVotesForInstance(inst)) == trueClass;
    boolean reactivePrediction = MiscUtils.maxIndex(this.reactiveLearner.getVotesForInstance(inst)) == trueClass;
    this.numberOfErrors = this.numberOfErrors - this.c[this.t];
    if (!stablePrediction && reactivePrediction) {
        this.c[this.t] = 1;
        this.numberOfErrors++;
    } else {
        this.c[this.t] = 0;
    }
    if (this.theta < this.numberOfErrors) {
        this.changeDetected++;
        this.stableLearner = this.reactiveLearner.copy();
        // Resets c
        Arrays.fill(this.c, 0);
        this.numberOfErrors = 0;
    }
    this.stableLearner.trainOnInstance(inst);
    this.reactiveLearner.resetLearning();
    for (i = 0; i < this.instances.length && this.instances[i] != null; i++) {
        this.reactiveLearner.trainOnInstance(this.instances[i]);
    }
    this.t = (this.t + 1) % this.w;
}
