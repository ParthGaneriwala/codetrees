private Node changeTrees(int index) {
    for (int i = 0; i < this.alternativeTree.size(); i++) {
        if (i != index) {
            Iadem3Subtree subtree = this.alternativeTree.get(i);
            ((Iadem3) this.tree).updateNumberOfLeaves(-subtree.getNumberOfLeaves());
            ((Iadem3) this.tree).updateNumberOfNodes(-subtree.getNumberOfNodes());
            ((Iadem3) this.tree).updateNumberOfNodesSplitByTieBreaking(-subtree.numSplitsByBreakingTies);
        }
    }
    Iadem3Subtree subtree = this.alternativeTree.get(index);
    // rest nodes of this main tree
    int[] count = new int[3];
    super.getNumberOfNodes(count);
    if (this.causeOfSplit == ((Iadem3) this.tree).SPLIT_BY_TIE_BREAKING) {
        count[2]++;
    }
    ((Iadem3) this.tree).updateNumberOfLeaves(-count[1]);
    ((Iadem3) this.tree).updateNumberOfNodes(-count[0] - count[1]);
    ((Iadem3) this.tree).updateNumberOfNodesSplitByTieBreaking(-count[2]);
    // 
    AdaptiveSplitNode tmpParent = (AdaptiveSplitNode) this.parent;
    Node newNode = subtree.getTreeRoot();
    ((Iadem3) tree).newTreeChange();
    if (tmpParent == null) {
        ((Iadem3) tree).copyTree(subtree);
    } else {
        for (int i = 0; i < tmpParent.children.size(); i++) {
            if (tmpParent.children.get(i) == this) {
                tmpParent.children.set(i, newNode);
                newNode.parent = tmpParent;
            }
        }
    }
    updateAttributes(newNode);
    if (newNode instanceof AdaptiveSplitNode) {
        AdaptiveSplitNode splitNode = (AdaptiveSplitNode) newNode;
        for (Iadem3Subtree currentSubtree : splitNode.alternativeTree) {
            updateSubtreeLevel(currentSubtree.getTreeRoot());
        }
    }
    return newNode;
}
