private void jButtonRunActionPerformed(java.awt.event.ActionEvent evt) {
    // Validations
    if (this.jTextFieldTask.getText().equals("")) {
        JOptionPane.showMessageDialog(this, "The task is not specified", "Error", JOptionPane.ERROR_MESSAGE);
    } else if (this.jTextFieldDir.getText().equals("")) {
        JOptionPane.showMessageDialog(this, "The result directory is not specified", "Error", JOptionPane.ERROR_MESSAGE);
    } else {
        if (this.jTableAlgorithms.getRowCount() != 0) {
            if (this.jTableStreams.getRowCount() != 0) {
                List<String> stream = new ArrayList<>();
                for (int i = 0; i < this.streamModel.getRowCount(); i++) {
                    if (this.streamModel.getValueAt(i, 0).equals("") || this.streamModel.getValueAt(i, 1).equals("")) {
                        JOptionPane.showMessageDialog(this, "Fields incompleted in Table Stream", "Error", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                    if (i == 0) {
                        stream.add(this.streamModel.getValueAt(i, 1).toString());
                    } else {
                        if (stream.remove(this.streamModel.getValueAt(i, 1).toString())) {
                            stream.add(this.streamModel.getValueAt(i, 1).toString());
                            JOptionPane.showMessageDialog(this, "There are reapeted values in Table Stream", "Error", JOptionPane.ERROR_MESSAGE);
                            return;
                        } else {
                            stream.add(this.streamModel.getValueAt(i, 1).toString());
                        }
                    }
                }
                List<String> algorithm = new ArrayList<>();
                for (int i = 0; i < this.algoritmModel.getRowCount(); i++) {
                    if (this.algoritmModel.getValueAt(i, 0).equals("") || this.algoritmModel.getValueAt(i, 1).equals("")) {
                        JOptionPane.showMessageDialog(this, "Fields incompleted in Table Algorithm", "Error", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                    if (i == 0) {
                        algorithm.add(this.algoritmModel.getValueAt(i, 1).toString());
                    } else {
                        if (algorithm.remove(this.algoritmModel.getValueAt(i, 1).toString())) {
                            algorithm.add(this.algoritmModel.getValueAt(i, 1).toString());
                            JOptionPane.showMessageDialog(this, "There are reapeted values in Table Algorithm", "Error", JOptionPane.ERROR_MESSAGE);
                            return;
                        } else {
                            algorithm.add(this.algoritmModel.getValueAt(i, 1).toString());
                        }
                    }
                }
                // End Validations
                runTask();
            } else {
                JOptionPane.showMessageDialog(this, "You must select at least one dataset", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "You must select at least one algorithm", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
}
