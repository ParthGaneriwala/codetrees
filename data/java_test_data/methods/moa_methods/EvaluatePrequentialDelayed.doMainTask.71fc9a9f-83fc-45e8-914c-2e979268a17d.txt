@Override
protected Object doMainTask(TaskMonitor monitor, ObjectRepository repository) {
    Learner learner = (Learner) getPreparedClassOption(this.learnerOption);
    ExampleStream stream = (ExampleStream) getPreparedClassOption(this.streamOption);
    LearningPerformanceEvaluator evaluator = (LearningPerformanceEvaluator) getPreparedClassOption(this.evaluatorOption);
    LearningCurve learningCurve = new LearningCurve("learning evaluation instances");
    this.trainInstances = new LinkedList<Example>();
    // New for prequential methods
    if (evaluator instanceof WindowClassificationPerformanceEvaluator) {
        // ((WindowClassificationPerformanceEvaluator) evaluator).setWindowWidth(widthOption.getValue());
        if (widthOption.getValue() != 1000) {
            System.out.println("DEPRECATED! Use EvaluatePrequential -e (WindowClassificationPerformanceEvaluator -w " + widthOption.getValue() + ")");
            return learningCurve;
        }
    }
    if (evaluator instanceof EWMAClassificationPerformanceEvaluator) {
        // ((EWMAClassificationPerformanceEvaluator) evaluator).setalpha(alphaOption.getValue());
        if (alphaOption.getValue() != .01) {
            System.out.println("DEPRECATED! Use EvaluatePrequential -e (EWMAClassificationPerformanceEvaluator -a " + alphaOption.getValue() + ")");
            return learningCurve;
        }
    }
    if (evaluator instanceof FadingFactorClassificationPerformanceEvaluator) {
        // ((FadingFactorClassificationPerformanceEvaluator) evaluator).setalpha(alphaOption.getValue());
        if (alphaOption.getValue() != .01) {
            System.out.println("DEPRECATED! Use EvaluatePrequential -e (FadingFactorClassificationPerformanceEvaluator -a " + alphaOption.getValue() + ")");
            return learningCurve;
        }
    }
    learner.setModelContext(stream.getHeader());
    int maxInstances = this.instanceLimitOption.getValue();
    long instancesProcessed = 0;
    int maxSeconds = this.timeLimitOption.getValue();
    int secondsElapsed = 0;
    monitor.setCurrentActivity("Evaluating learner...", -1.0);
    File dumpFile = this.dumpFileOption.getFile();
    PrintStream immediateResultStream = null;
    if (dumpFile != null) {
        try {
            if (dumpFile.exists()) {
                immediateResultStream = new PrintStream(new FileOutputStream(dumpFile, true), true);
            } else {
                immediateResultStream = new PrintStream(new FileOutputStream(dumpFile), true);
            }
        } catch (Exception ex) {
            throw new RuntimeException("Unable to open immediate result file: " + dumpFile, ex);
        }
    }
    // File for output predictions
    File outputPredictionFile = this.outputPredictionFileOption.getFile();
    PrintStream outputPredictionResultStream = null;
    if (outputPredictionFile != null) {
        try {
            if (outputPredictionFile.exists()) {
                outputPredictionResultStream = new PrintStream(new FileOutputStream(outputPredictionFile, true), true);
            } else {
                outputPredictionResultStream = new PrintStream(new FileOutputStream(outputPredictionFile), true);
            }
        } catch (Exception ex) {
            throw new RuntimeException("Unable to open prediction result file: " + outputPredictionFile, ex);
        }
    }
    boolean firstDump = true;
    boolean preciseCPUTiming = TimingUtils.enablePreciseTiming();
    long evaluateStartTime = TimingUtils.getNanoCPUTimeOfCurrentThread();
    long lastEvaluateStartTime = evaluateStartTime;
    double RAMHours = 0.0;
    while (stream.hasMoreInstances() && ((maxInstances < 0) || (instancesProcessed < maxInstances)) && ((maxSeconds < 0) || (secondsElapsed < maxSeconds))) {
        instancesProcessed++;
        Example currentInst = stream.nextInstance();
        if (instancesProcessed <= this.initialWindowSizeOption.getValue()) {
            if (this.trainOnInitialWindowOption.isSet()) {
                learner.trainOnInstance(currentInst);
            } else if ((this.initialWindowSizeOption.getValue() - instancesProcessed) < this.delayLengthOption.getValue()) {
                this.trainInstances.addLast(currentInst);
            }
        } else {
            this.trainInstances.addLast(currentInst);
            if (this.delayLengthOption.getValue() < this.trainInstances.size()) {
                if (this.trainInBatches.isSet()) {
                    // it would train on k+1 instances
                    while (this.trainInstances.size() > 1) {
                        Example trainInst = this.trainInstances.removeFirst();
                        learner.trainOnInstance(trainInst);
                    }
                } else {
                    Example trainInst = this.trainInstances.removeFirst();
                    learner.trainOnInstance(trainInst);
                }
            }
            // Remove class label from test instances.
            Instance testInstance = ((Instance) currentInst.getData()).copy();
            Example testInst = new InstanceExample(testInstance);
            testInstance.setMissing(testInstance.classAttribute());
            testInstance.setClassValue(0.0);
            double[] prediction = learner.getVotesForInstance(testInst);
            // reinstate the testInstance as it is used in evaluator.addResult
            testInstance = ((Instance) currentInst.getData()).copy();
            testInst = new InstanceExample(testInstance);
            // Output prediction
            if (outputPredictionFile != null) {
                int trueClass = (int) ((Instance) currentInst.getData()).classValue();
                outputPredictionResultStream.println(Utils.maxIndex(prediction) + "," + (((Instance) testInst.getData()).classIsMissing() == true ? " ? " : trueClass));
            }
            evaluator.addResult(testInst, prediction);
            if (instancesProcessed % this.sampleFrequencyOption.getValue() == 0 || stream.hasMoreInstances() == false) {
                long evaluateTime = TimingUtils.getNanoCPUTimeOfCurrentThread();
                double time = TimingUtils.nanoTimeToSeconds(evaluateTime - evaluateStartTime);
                double timeIncrement = TimingUtils.nanoTimeToSeconds(evaluateTime - lastEvaluateStartTime);
                // GBs
                double RAMHoursIncrement = learner.measureByteSize() / (1024.0 * 1024.0 * 1024.0);
                // Hours
                RAMHoursIncrement *= (timeIncrement / 3600.0);
                RAMHours += RAMHoursIncrement;
                lastEvaluateStartTime = evaluateTime;
                learningCurve.insertEntry(new LearningEvaluation(new Measurement[] { new Measurement("learning evaluation instances", instancesProcessed), new Measurement("evaluation time (" + (preciseCPUTiming ? "cpu " : "") + "seconds)", time), new Measurement("model cost (RAM-Hours)", RAMHours) }, evaluator, learner));
                if (immediateResultStream != null) {
                    if (firstDump) {
                        immediateResultStream.println(learningCurve.headerToString());
                        firstDump = false;
                    }
                    immediateResultStream.println(learningCurve.entryToString(learningCurve.numEntries() - 1));
                    immediateResultStream.flush();
                }
            }
            if (instancesProcessed % INSTANCES_BETWEEN_MONITOR_UPDATES == 0) {
                if (monitor.taskShouldAbort()) {
                    return null;
                }
                long estimatedRemainingInstances = stream.estimatedRemainingInstances();
                if (maxInstances > 0) {
                    long maxRemaining = maxInstances - instancesProcessed;
                    if ((estimatedRemainingInstances < 0) || (maxRemaining < estimatedRemainingInstances)) {
                        estimatedRemainingInstances = maxRemaining;
                    }
                }
                monitor.setCurrentActivityFractionComplete(estimatedRemainingInstances < 0 ? -1.0 : (double) instancesProcessed / (double) (instancesProcessed + estimatedRemainingInstances));
                if (monitor.resultPreviewRequested()) {
                    monitor.setLatestResultPreview(learningCurve.copy());
                }
                secondsElapsed = (int) TimingUtils.nanoTimeToSeconds(TimingUtils.getNanoCPUTimeOfCurrentThread() - evaluateStartTime);
            }
        }
    }
    if (immediateResultStream != null) {
        immediateResultStream.close();
    }
    if (outputPredictionResultStream != null) {
        outputPredictionResultStream.close();
    }
    return learningCurve;
}
