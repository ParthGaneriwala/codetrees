@Override
public SplitNode getNewSplitNode(long newTotal, Node parent, IademAttributeSplitSuggestion bestSuggestion, Instance instance) {
    double[] cut = new double[] { this.bestCutPoint };
    // a traditional binary split test for numeric attributes
    Node[] children = new Node[2];
    long[] newClassVotesAndTotal = this.numericAttClassObserver.getLeftClassDist(this.bestCutPoint);
    long totalLeft = arrSum(newClassVotesAndTotal);
    long total = this.numericAttClassObserver.getValueCount();
    long[] classVotesTotal = this.numericAttClassObserver.getClassDist();
    boolean equalsPassesTest = true;
    if (this.numericAttClassObserver instanceof IademVFMLNumericAttributeClassObserver) {
        equalsPassesTest = false;
    }
    SplitNode splitNode = new SplitNode(this.tree, parent, null, ((LeafNode) this.parent).getMajorityClassVotes(instance), new IademNumericAttributeBinaryTest(this.attIndex, cut[0], equalsPassesTest));
    long newTotalLeft = totalLeft;
    long newTotalRight = total - newTotalLeft;
    double[] newClassVotesLeft = new double[instance.attribute(instance.classIndex()).numValues()];
    double[] newClassVotesRight = new double[instance.attribute(instance.classIndex()).numValues()];
    Arrays.fill(newClassVotesLeft, 0);
    Arrays.fill(newClassVotesRight, 0);
    for (int i = 0; i < newClassVotesAndTotal.length; i++) {
        newClassVotesLeft[i] = newClassVotesAndTotal[i];
        newClassVotesRight[i] = classVotesTotal[i] - newClassVotesLeft[i];
    }
    splitNode.setChildren((Node[]) null);
    children[0] = this.tree.newLeafNode(splitNode, newTotal, newTotalLeft, newClassVotesLeft, instance);
    children[1] = this.tree.newLeafNode(splitNode, newTotal, newTotalRight, newClassVotesRight, instance);
    splitNode.setChildren(children);
    return splitNode;
}
