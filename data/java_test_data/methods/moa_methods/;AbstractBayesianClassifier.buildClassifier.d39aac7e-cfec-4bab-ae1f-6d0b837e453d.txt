@Override
public void buildClassifier(Dataset data) {
    this.trainingData = data;
    trainResult = new BayesResult();
    numInstances = trainingData.size();
    numClasses = trainingData.classes().size();
    classes = new Object[numClasses];
    int cnt = 0;
    for (Object o : trainingData.classes()) {
        String classname = o.toString();
        Classname2IndexCCountermap.put(classname, cnt);
        classes[cnt] = classname;
        cnt++;
    }
    // calculate freqs for class priors
    trainResult.setClassFreqs(calculateClassFreqs(trainingData));
    // calculate class priors
    trainResult.setClassProbs(calculateClassProbs());
    // calculate freqs for conditional probabilities
    trainResult.setFeatureTable(conditionalFreq(trainingData));
    // for when this feature is absent in the sample during classification
    if (sparse) {
        trainResult.setFeatureTable(updateFT());
    }
    // capacity of hashmaps to avoid resizing since the size is MAX
    initialCap = ((int) Math.ceil(numFeatures / 0.75) + 10);
}
