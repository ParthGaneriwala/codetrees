/**
 * Calculate Lowest Entropy Function
 *
 * @param FN
 * feature name
 * @param leftborder
 * begin of range
 * @param rightborder
 * end of range
 */
private Border calcLowestEntropyFunction(int FN, int index1stElement, int indexLastElement) {
    // f.e. 3 elements so index 0,1,2 so interval 0-1 , 1-2, 2-3
    // if border is behind first element so index 1 the left bin consists of
    // 1 and the right bin consist of 3-1=2
    Border border = new Border();
    double lowestLEF = Double.MAX_VALUE;
    // -1 because of 3 borders
    for (int border1index = index1stElement + 1; border1index <= indexLastElement - 1; border1index++) {
        for (int border2index = border1index + 1; border2index <= indexLastElement; border2index++) {
            int sizeBinLeft = border1index - index1stElement;
            int sizeBinMid = border2index - border1index;
            int sizeBinRight = indexLastElement - border2index + 1;
            HashMap<Integer, Double> classfreqBinS1 = calcClassLabelFreqInS(FN, index1stElement, border1index - 1);
            HashMap<Integer, Double> classfreqBinS2 = calcClassLabelFreqInS(FN, border1index, border2index - 1);
            HashMap<Integer, Double> classfreqBinS3 = calcClassLabelFreqInS(FN, border2index, indexLastElement);
            double EntS1 = calcEntropy(classfreqBinS1);
            double EntS2 = calcEntropy(classfreqBinS2);
            double EntS3 = calcEntropy(classfreqBinS3);
            double LEF = ((double) (sizeBinLeft) / (double) (sizeBinLeft + sizeBinRight + sizeBinMid)) * (EntS1);
            LEF += ((double) sizeBinMid) / ((double) (sizeBinLeft + sizeBinRight + sizeBinMid)) * (EntS2);
            LEF += ((double) sizeBinRight) / ((double) (sizeBinLeft + sizeBinRight + sizeBinMid)) * (EntS3);
            if (LEF < lowestLEF) {
                lowestLEF = LEF;
                border.setlowestLEF(LEF);
                Vector<Double> v = new Vector<Double>();
                v.add(workingfValues[border1index]);
                v.add(workingfValues[border2index]);
                border.setTMinC(v);
            }
        }
    }
    return border;
}
