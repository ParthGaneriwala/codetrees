public void getModelDescriptionNoAnomalyDetection(StringBuilder out, int indent) {
    // Get Model Description no Anomaly detection
    StringUtils.appendNewline(out);
    StringUtils.appendIndented(out, indent, "Number of Rule: " + ruleSet.size());
    StringUtils.appendNewline(out);
    StringUtils.appendNewline(out);
    for (int k = 0; k < this.ruleSet.size(); k++) {
        StringUtils.appendIndented(out, indent, "Rule " + (k + 1) + ": ");
        for (int i = 0; i < this.ruleSet.get(k).predicateSet.size(); i++) {
            if (this.ruleSet.get(k).predicateSet.size() == 1) {
                if (this.ruleSet.get(k).predicateSet.get(i).getSymbol() == 0.0) {
                    String nam = this.instance.attribute((int) this.ruleSet.get(k).predicateSet.get(i).getAttributeValue()).name();
                    String val = this.instance.attribute((int) this.ruleSet.get(k).predicateSet.get(i).getAttributeValue()).value((int) this.ruleSet.get(k).predicateSet.get(i).getValue());
                    StringUtils.appendIndented(out, indent, nam + " = " + val + " --> " + this.instance.classAttribute().value((int) getRuleMajorityClassIndex(this.ruleSet.get(k))));
                    StringUtils.appendNewline(out);
                } else if (this.ruleSet.get(k).predicateSet.get(i).getSymbol() == -1.0) {
                    String nam = this.instance.attribute((int) this.ruleSet.get(k).predicateSet.get(i).getAttributeValue()).name();
                    StringUtils.appendIndented(out, indent, nam + " <= " + this.ruleSet.get(k).predicateSet.get(i).getValue() + " --> " + this.instance.classAttribute().value((int) ruleClassIndex.getValue(k)));
                    StringUtils.appendNewline(out);
                } else {
                    String nam = this.instance.attribute((int) this.ruleSet.get(k).predicateSet.get(i).getAttributeValue()).name();
                    StringUtils.appendIndented(out, indent, nam + " > " + this.ruleSet.get(k).predicateSet.get(i).getValue() + " --> " + this.instance.classAttribute().value((int) this.ruleClassIndex.getValue(k)));
                    StringUtils.appendNewline(out);
                }
            } else {
                if (this.ruleSet.get(k).predicateSet.get(i).getSymbol() == 0.0) {
                    String nam = this.instance.attribute((int) this.ruleSet.get(k).predicateSet.get(i).getAttributeValue()).name();
                    String val = this.instance.attribute((int) this.ruleSet.get(k).predicateSet.get(i).getAttributeValue()).value((int) this.ruleSet.get(k).predicateSet.get(i).getValue());
                    StringUtils.appendIndented(out, indent, nam + " = " + val + " ");
                } else if (this.ruleSet.get(k).predicateSet.get(i).getSymbol() == -1.0) {
                    String nam = this.instance.attribute((int) this.ruleSet.get(k).predicateSet.get(i).getAttributeValue()).name();
                    StringUtils.appendIndented(out, indent, nam + " <= " + this.ruleSet.get(k).predicateSet.get(i).getValue() + " ");
                } else {
                    String nam = this.instance.attribute((int) this.ruleSet.get(k).predicateSet.get(i).getAttributeValue()).name();
                    StringUtils.appendIndented(out, indent, nam + " > " + this.ruleSet.get(k).predicateSet.get(i).getValue() + " ");
                }
                if (i < this.ruleSet.get(k).predicateSet.size() - 1) {
                    StringUtils.appendIndented(out, indent, "and ");
                } else {
                    int count = getCountNominalAttrib(this.ruleSet.get(k).predicateSet);
                    if ((this.ruleSet.get(k).predicateSet.get(i).getSymbol() == 0.0) || (count != 0)) {
                        StringUtils.appendIndented(out, indent, " --> " + this.instance.classAttribute().value((int) getRuleMajorityClassIndex(this.ruleSet.get(k))));
                        StringUtils.appendNewline(out);
                    } else {
                        StringUtils.appendIndented(out, indent, " --> " + this.instance.classAttribute().value((int) this.ruleClassIndex.getValue(k)));
                        StringUtils.appendNewline(out);
                    }
                }
            }
        }
        StringUtils.appendNewline(out);
    }
}
