private void jButtonShowSummaryActionPerformed(java.awt.event.ActionEvent evt) {
    if (this.jTextFieldResultsPath.getText().equals("")) {
        JOptionPane.showMessageDialog(this, "Directory not found", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }
    List<Measure> algmeasures = new ArrayList<>();
    List<Stream> streams = new ArrayList<>();
    List<String> algPath = new ArrayList<>();
    List<String> algShortNames = new ArrayList<>();
    int count = 0;
    for (int i = 0; i < this.measureModel.getRowCount(); i++) {
        for (int j = 0; j < this.jComboBoxMeasure.getItemCount(); j++) {
            if (this.measureModel.getValueAt(i, 0).equals(this.jComboBoxMeasure.getItemAt(j))) {
                count++;
            }
            if (this.measureModel.getValueAt(i, 0).equals("") || this.measureModel.getValueAt(i, 1).equals("") || this.measureModel.getValueAt(i, 2) == null) {
                JOptionPane.showMessageDialog(this, "There are fields incompleted in Table", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }
    }
    boolean type = true;
    for (int k = 0; k < this.measureModel.getRowCount(); k++) {
        type = this.measureModel.getValueAt(k, 2).equals("Mean");
        Measure m = new Measure(this.measureModel.getValueAt(k, 1).toString(), this.measureModel.getValueAt(k, 0).toString(), type, 0);
        algmeasures.add(m);
    }
    String path = this.jTextFieldResultsPath.getText();
    for (int i = 0; i < streamModel.getRowCount(); i++) {
        algPath.clear();
        for (int j = 0; j < algoritmModel.getRowCount(); j++) {
            File inputFile = new File(FilenameUtils.separatorsToSystem(path + "\\" + streamModel.getValueAt(i, 0) + "\\" + algoritmModel.getValueAt(j, 0)));
            File streamFile = new File(FilenameUtils.separatorsToSystem(path + "\\" + streamModel.getValueAt(i, 0)));
            if (!inputFile.exists()) {
                JOptionPane.showMessageDialog(this, "File not found: " + inputFile.getAbsolutePath(), "Error", JOptionPane.ERROR_MESSAGE);
                return;
            } else {
                String algorithmPath = FilenameUtils.separatorsToSystem(path + "\\" + streamModel.getValueAt(i, 0).toString() + "\\" + algoritmModel.getValueAt(j, 0).toString());
                algPath.add(algorithmPath);
                if (i == 0) {
                    algShortNames.add(algoritmModel.getValueAt(j, 1).toString());
                }
            }
        }
        Stream s = new Stream(streamModel.getValueAt(i, 1).toString(), algPath, algShortNames, algmeasures);
        streams.add(s);
    }
    // create summary
    try {
        summary = new Summary(streams, FilenameUtils.separatorsToSystem(path + "\\"));
        jButtonSummarize.setEnabled(true);
        SummaryTable[] table = summary.showSummary();
        SummaryViewer summaryViewer = new SummaryViewer(table, summary, jTextFieldResultsPath.getText());
    } catch (Exception exc) {
        JOptionPane.showMessageDialog(this, "Problems generating summaries", "Error", JOptionPane.ERROR_MESSAGE);
    }
}
