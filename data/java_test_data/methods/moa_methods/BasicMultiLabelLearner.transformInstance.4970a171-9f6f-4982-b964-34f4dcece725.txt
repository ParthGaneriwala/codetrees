protected Instance transformInstance(MultiLabelInstance inst, int outputIndex) {
    if (header == null) {
        this.header = new InstancesHeader[this.ensemble.length];
    }
    if (header[outputIndex] == null) {
        // Create Header
        FastVector<Attribute> attributes = new FastVector<>();
        for (int attributeIndex = 0; attributeIndex < inst.numInputAttributes(); attributeIndex++) {
            attributes.addElement(inst.inputAttribute(attributeIndex));
        }
        // System.out.println("Number of attributes: "+this.numAttributes+ ","+inst.numAttributes());
        attributes.addElement(inst.outputAttribute(outputIndex));
        this.header[outputIndex] = new InstancesHeader(new Instances(getCLICreationString(InstanceStream.class), attributes, 0));
        this.header[outputIndex].setClassIndex(attributes.size() - 1);
        this.ensemble[outputIndex].setModelContext(this.header[outputIndex]);
    }
    // Instance instance = new DenseInstance(this.numAttributes+1);
    // instance.setDataset(dataset[classifierIndex]);
    int numAttributes = this.header[outputIndex].numInputAttributes();
    // JD - +1 for class
    double[] attVals = new double[numAttributes + 1];
    for (int attributeIndex = 0; attributeIndex < numAttributes; attributeIndex++) {
        attVals[attributeIndex] = inst.valueInputAttribute(attributeIndex);
    }
    Instance instance = new DenseInstance(1.0, attVals);
    instance.setDataset(header[outputIndex]);
    instance.setClassValue(inst.valueOutputAttribute(outputIndex));
    // System.out.println("============");
    return instance;
}
