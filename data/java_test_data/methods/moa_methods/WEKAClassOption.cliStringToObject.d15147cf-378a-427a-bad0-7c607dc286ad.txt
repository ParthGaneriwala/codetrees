public static Object cliStringToObject(String cliString, Class<?> requiredType, Option[] externalOptions) throws Exception {
    if (cliString.startsWith(FILE_PREFIX_STRING)) {
        return new File(cliString.substring(FILE_PREFIX_STRING.length()));
    }
    if (cliString.startsWith(INMEM_PREFIX_STRING)) {
        return cliString.substring(INMEM_PREFIX_STRING.length());
    }
    cliString = cliString.trim();
    int firstSpaceIndex = cliString.indexOf(' ', 0);
    String className;
    String WEKAClassOptions;
    if (firstSpaceIndex > 0) {
        className = cliString.substring(0, firstSpaceIndex);
        WEKAClassOptions = cliString.substring(firstSpaceIndex + 1, cliString.length());
        WEKAClassOptions = WEKAClassOptions.trim();
    } else {
        className = cliString;
        WEKAClassOptions = "";
    }
    Class<?> classObject;
    try {
        classObject = Class.forName(className);
    } catch (Throwable t1) {
        try {
            // try prepending default package
            classObject = Class.forName(requiredType.getPackage().getName() + "." + className);
        } catch (Throwable t2) {
            try {
                // try prepending task package
                classObject = Class.forName(Task.class.getPackage().getName() + "." + className);
            } catch (Throwable t3) {
                throw new Exception("Class not found: " + className);
            }
        }
    }
    Object classInstance;
    try {
        classInstance = classObject.newInstance();
    } catch (Exception ex) {
        throw new Exception("Problem creating instance of class: " + className, ex);
    }
    if (requiredType.isInstance(classInstance) || ((classInstance instanceof Task) && requiredType.isAssignableFrom(((Task) classInstance).getTaskResultType()))) {
        Vector<String> options = new Vector<String>();
        if (externalOptions != null) {
            for (Option option : externalOptions) {
                options.add(option.getValueAsCLIString());
            }
        } else {
            String[] optionsTmp = Utils.splitOptions(cliString);
            for (int i = 1; i < optionsTmp.length; i++) options.add(optionsTmp[i]);
        }
        if (classInstance instanceof weka.core.OptionHandler) {
            try {
                ((weka.core.OptionHandler) classInstance).setOptions(options.toArray(new String[options.size()]));
            } catch (Exception ex) {
                Enumeration enm = ((weka.core.OptionHandler) classInstance).listOptions();
                StringBuffer optionsText = new StringBuffer();
                while (enm.hasMoreElements()) {
                    weka.core.Option option = (weka.core.Option) enm.nextElement();
                    optionsText.append(option.synopsis() + '\n');
                    optionsText.append(option.description() + "\n");
                }
                throw new Exception("Problem with options to '" + className + "'." + "\n\nValid options for " + className + ":\n" + optionsText.toString(), ex);
            }
        }
    } else {
        throw new Exception("Class named '" + className + "' is not an instance of " + requiredType.getName() + ".");
    }
    return classInstance;
}
