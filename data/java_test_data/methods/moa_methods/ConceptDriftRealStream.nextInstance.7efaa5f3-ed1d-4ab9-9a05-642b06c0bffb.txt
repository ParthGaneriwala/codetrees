@Override
public InstanceExample nextInstance() {
    numberInstanceStream++;
    double numclass = 0.0;
    double x = -4.0 * (double) (numberInstanceStream - this.positionOption.getValue()) / (double) this.widthOption.getValue();
    double probabilityDrift = 1.0 / (1.0 + Math.exp(x));
    if (this.random.nextDouble() > probabilityDrift) {
        if (this.inputStream.hasMoreInstances() == false) {
            this.inputStream.restart();
        }
        this.inputInstance = this.inputStream.nextInstance().getData();
        numclass = this.inputInstance.classValue();
    } else {
        if (this.driftStream.hasMoreInstances() == false) {
            this.driftStream.restart();
        }
        this.driftInstance = this.driftStream.nextInstance().getData();
        numclass = this.driftInstance.classValue();
    }
    int m = 0;
    double[] newVals = new double[this.inputInstance.numAttributes() + this.driftInstance.numAttributes() - 1];
    for (int j = 0; j < this.inputInstance.numAttributes() - 1; j++, m++) {
        newVals[m] = this.inputInstance.value(j);
    }
    for (int j = 0; j < this.driftInstance.numAttributes() - 1; j++, m++) {
        newVals[m] = this.driftInstance.value(j);
    }
    newVals[m] = numclass;
    // return new Instance(1.0, newVals);
    Instance inst = new DenseInstance(1.0, newVals);
    inst.setDataset(this.getHeader());
    inst.setClassValue(numclass);
    return new InstanceExample(inst);
}
