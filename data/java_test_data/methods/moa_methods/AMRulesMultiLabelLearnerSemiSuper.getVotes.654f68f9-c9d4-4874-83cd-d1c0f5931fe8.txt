public ErrorWeightedVoteMultiLabel getVotes(MultiLabelInstance instance) {
    ErrorWeightedVoteMultiLabel errorWeightedVote = newErrorWeightedVote();
    // int numberOfRulesCovering = 0;
    // Verbose to console Dataset name.
    VerboseToConsole(instance);
    for (MultiLabelRule rule : ruleSet) {
        if (rule.isCovering(instance) == true) {
            // numberOfRulesCovering++;
            Prediction vote = rule.getPredictionForInstance(instance);
            if (vote != null) {
                // should only happen for first instance
                double[] errors = rule.getCurrentErrors();
                if (// if errors==null, rule has seen no predictions since expansion: return maximum error, since prediction is not reliable
                errors == null)
                    errors = defaultRuleErrors(vote);
                // predictionValueForThisRule);
                debug("Rule No" + rule.getRuleNumberID() + " Vote: " + vote.toString() + " Error: " + errors + " Y: " + instance.classValue(), 3);
                errorWeightedVote.addVote(vote, errors);
            }
            if (VerbosityOption.getValue() > 1) {
                System.out.print("Rule " + rule.getRuleNumberID() + ": ");
                for (int i = 0; i < instance.numOutputAttributes(); i++) {
                    System.out.print(" " + vote.getVotes(i)[0]);
                }
                System.out.print("\n");
            }
            if (!this.unorderedRulesOption.isSet()) {
                // Only one rule cover the instance.
                break;
            }
        }
    }
    if (!errorWeightedVote.coversAllOutputs()) {
        // Complete Prediction (fill missing outputs with default)
        Prediction vote = errorWeightedVote.getPrediction();
        if (vote == null) {
            // use default rule
            vote = new MultiLabelPrediction(instance.numberOutputTargets());
        }
        Prediction defaultVote = defaultRule.getPredictionForInstance(instance);
        if (defaultVote != null) {
            double[] defaultErrors = defaultRule.getCurrentErrors();
            if (defaultErrors == null)
                defaultErrors = defaultRuleErrors(defaultVote);
            double[] fixErrors = new double[vote.numOutputAttributes()];
            Prediction fixVote = new MultiLabelPrediction(vote.numOutputAttributes());
            for (int i = 0; i < vote.numOutputAttributes(); i++) {
                if (!vote.hasVotesForAttribute(i)) {
                    fixVote.setVotes(i, defaultVote.getVotes(i));
                    fixErrors[i] = defaultErrors[i];
                }
            }
            errorWeightedVote.addVote(fixVote, fixErrors);
            debug("Default Rule Vote " + defaultVote.toString() + "\n Error " + defaultErrors + "  Y: " + instance, 3);
        }
    }
    errorWeightedVote.computeWeightedVote();
    return errorWeightedVote;
}
