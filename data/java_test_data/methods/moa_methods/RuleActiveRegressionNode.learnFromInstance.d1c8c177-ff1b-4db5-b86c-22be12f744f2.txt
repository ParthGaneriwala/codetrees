public void learnFromInstance(Instance inst) {
    // Update the statistics for this node
    // number of instances passing through the node
    nodeStatistics.addToValue(0, inst.weight());
    // sum of y values
    nodeStatistics.addToValue(1, inst.classValue() * inst.weight());
    // sum of squared y values
    nodeStatistics.addToValue(2, inst.classValue() * inst.classValue() * inst.weight());
    // if was of attributes was not created so far, generate one and create perceptron
    if (attributesMask == null) {
        numAttributesSelected = (int) Math.round((inst.numAttributes() - 1) * this.amRules.getAttributesPercentage()) / 100;
        attributesMask = new boolean[inst.numAttributes()];
        ArrayList<Integer> indices = new ArrayList<Integer>();
        for (int i = 0; i < inst.numAttributes(); i++) if (i != inst.classIndex())
            indices.add(i);
        Collections.shuffle(indices, this.amRules.classifierRandom);
        // add class index only after shuffle
        indices.add(inst.classIndex());
        for (int i = 0; i < numAttributesSelected; ++i) attributesMask[indices.get(i)] = true;
    }
    for (int i = 0, ct = 0; i < attributesMask.length; i++) {
        if (attributesMask[i]) {
            AttributeClassObserver obs = this.attributeObservers.get(ct);
            if (obs == null) {
                // At this stage all nominal attributes are ignored
                if (// instAttIndex
                inst.attribute(ct).isNumeric()) {
                    obs = newNumericClassObserver();
                    this.attributeObservers.set(ct, obs);
                }
            }
            if (obs != null) {
                ((FIMTDDNumericAttributeClassObserver) obs).observeAttributeClass(inst.value(i), inst.classValue(), inst.weight());
            }
            ++ct;
        }
    }
}
