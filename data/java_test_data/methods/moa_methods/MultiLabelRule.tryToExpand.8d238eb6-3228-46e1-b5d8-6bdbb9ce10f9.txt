public boolean tryToExpand(double splitConfidence, double tieThresholdOption) {
    boolean hasExpanded = learningLiteral.tryToExpand(splitConfidence, tieThresholdOption);
    // Merit check event
    double[] merit = learningLiteral.getMeritInputAttributes();
    if (merit != null)
        this.notifyAll(new MeritCheckMessage(new DoubleVector(merit), this.learningLiteral.getAttributeMask()));
    if (hasExpanded) {
        LearningLiteral otherOutputsLiteral = learningLiteral.getOtherOutputsLearningLiteral();
        // if && this.literalList.size()>0 is removed then consider including this code for default rule also
        if (otherOutputsLiteral != null && this.literalList.size() > 0) {
            // only add "other outputs" rule if antecedent is not empty
            otherOutputsRule = new MultiLabelRule();
            otherOutputsRule.instanceInformation = instanceInformation;
            otherOutputsRule.literalList = new LinkedList<Literal>(this.literalList);
            otherOutputsRule.learningLiteral = otherOutputsLiteral;
        }
        otherBranchRule = new MultiLabelRule((LearningLiteral) learningLiteral.getOtherBranchLearningLiteral());
        // check for obsolete predicate
        int attribIndex = learningLiteral.getBestSuggestion().getPredicate().getAttributeIndex();
        boolean isEqualOrLess = learningLiteral.getBestSuggestion().getPredicate().isEqualOrLess();
        boolean isSpecialization = false;
        Iterator<Literal> it = literalList.iterator();
        while (it.hasNext()) {
            Literal l = it.next();
            if (l.predicate.getAttributeIndex() == attribIndex && l.predicate.isEqualOrLess() == isEqualOrLess) {
                it.remove();
                isSpecialization = true;
                break;
            }
        }
        // Rule expansion event
        this.notifyAll(new RuleExpandedMessage(attribIndex, isSpecialization));
        this.literalList.add(new Literal(learningLiteral.getBestSuggestion().getPredicate()));
        learningLiteral = learningLiteral.getExpandedLearningLiteral();
    }
    return hasExpanded;
}
