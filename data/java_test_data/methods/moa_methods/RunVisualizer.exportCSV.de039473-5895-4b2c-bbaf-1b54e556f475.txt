public void exportCSV(String filepath) {
    PrintWriter out = null;
    try {
        if (!filepath.endsWith(".csv"))
            filepath += ".csv";
        out = new PrintWriter(new BufferedWriter(new FileWriter(filepath)));
        String del = ";";
        Iterator<ClusterEvent> eventIt = null;
        ClusterEvent event = null;
        if (clusterEvents != null && clusterEvents.size() > 0) {
            eventIt = clusterEvents.iterator();
            event = eventIt.next();
        }
        // raw data
        MeasureCollection[][] measurecol = new MeasureCollection[2][];
        measurecol[0] = m_measures0;
        measurecol[1] = m_measures1;
        int numValues = 0;
        // header
        out.write("Nr" + del);
        out.write("Event" + del);
        for (int m = 0; m < 2; m++) {
            for (int i = 0; i < measurecol[m].length; i++) {
                for (int j = 0; j < measurecol[m][i].getNumMeasures(); j++) {
                    if (measurecol[m][i].isEnabled(j)) {
                        out.write(m + "-" + measurecol[m][i].getName(j) + del);
                        numValues = measurecol[m][i].getNumberOfValues(j);
                    }
                }
            }
        }
        out.write("\n");
        // rows
        for (int v = 0; v < numValues; v++) {
            // Nr
            out.write(v + del);
            // events
            if (event != null && event.getTimestamp() <= m_stream0_decayHorizon * v) {
                out.write(event.getType() + del);
                if (eventIt != null && eventIt.hasNext()) {
                    event = eventIt.next();
                } else
                    event = null;
            } else
                out.write(del);
            // values
            for (int m = 0; m < 2; m++) {
                for (int i = 0; i < measurecol[m].length; i++) {
                    for (int j = 0; j < measurecol[m][i].getNumMeasures(); j++) {
                        if (measurecol[m][i].isEnabled(j)) {
                            double value = measurecol[m][i].getValue(j, v);
                            if (Double.isNaN(value))
                                out.write(del);
                            else
                                out.write(value + del);
                        }
                    }
                }
            }
            out.write("\n");
        }
        out.close();
    } catch (IOException ex) {
        Logger.getLogger(RunVisualizer.class.getName()).log(Level.SEVERE, null, ex);
    } finally {
        out.close();
    }
}
