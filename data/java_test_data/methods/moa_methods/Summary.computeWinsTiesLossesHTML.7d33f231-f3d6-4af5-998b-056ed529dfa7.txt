public void computeWinsTiesLossesHTML(String path) {
    List<Algorithm> alg = this.streams.get(0).algorithm;
    int algorithmSize = this.streams.get(0).algorithm.size();
    String tablaSalida = "";
    tablaSalida += "<TABLE BORDER=1 WIDTH=\"100%\" ALIGN=CENTER>\n";
    tablaSalida += "<CAPTION> Experiment";
    tablaSalida += "<TR> <TD ROWSPAN = 2>Algorithm <TD TD ROWSPAN = 2>PM";
    for (int i = 1; i < algorithmSize; i++) {
        tablaSalida += "<TD COLSPAN = 3>" + alg.get(i).name;
    }
    tablaSalida += "<TD>AVG";
    tablaSalida += "<TR>";
    for (int i = 1; i < algorithmSize; i++) {
        tablaSalida += "<TD>" + "Wins" + "<TD>" + "Losses" + "<TD>" + "Ties";
    }
    for (int i = 0; i < algorithmSize; i++) {
        tablaSalida += "<TR><TD ROWSPAN = " + alg.get(i).measures.size() + ">" + alg.get(i).name;
        List<Measure>[] measureRow = alg.get(i).getMeasuresPerData(streams);
        int cont = 0;
        while (cont != this.streams.get(0).algorithm.get(i).measures.size()) {
            // String name = measureRow[i].get(cont).getName();
            String name = alg.get(i).measures.get(cont).getName();
            tablaSalida += "<TD>" + name;
            double sum = 0.0;
            for (int j = 1; j < algorithmSize; j++) {
                List<Measure>[] measureCol = alg.get(j).getMeasuresPerData(streams);
                int win = 0, losses = 0, ties = 0;
                for (int k = 0; k < measureCol.length; k++) {
                    double alg1 = measureRow[k].get(cont).getValue();
                    double alg2 = measureCol[k].get(cont).getValue();
                    if (j == 1) {
                        sum += measureRow[k].get(cont).getValue();
                    }
                    if (measureRow[k].get(cont).isType()) {
                        if (Algorithm.Round(alg1) > Algorithm.Round(alg2)) {
                            win++;
                        } else if (Algorithm.Round(alg1) < Algorithm.Round(alg2)) {
                            losses++;
                        } else {
                            ties++;
                        }
                    } else {
                        if (alg1 < alg2) {
                            win++;
                        } else if (alg1 > alg2) {
                            losses++;
                        } else {
                            ties++;
                        }
                    }
                }
                if (i < j) {
                    tablaSalida += "<TD>" + win;
                    tablaSalida += "<TD>" + losses;
                    tablaSalida += "<TD>" + ties;
                } else {
                    tablaSalida += "<TD> ";
                    tablaSalida += "<TD> ";
                    tablaSalida += "<TD> ";
                }
            }
            sum = (double) sum / measureRow.length;
            tablaSalida += "<TD>" + Algorithm.format(sum);
            tablaSalida += "<TR>";
            cont++;
        }
    }
    tablaSalida += "</TABLE>";
    // salida.close();
    try {
        BufferedWriter out = new BufferedWriter(new FileWriter(path + "summary.win.ties.losses.html"));
        // Replace with the string
        out.write(tablaSalida);
        // you are trying to write
        out.close();
    } catch (IOException e) {
        System.out.println("Error saving summary.win.ties.losses.html");
    }
}
