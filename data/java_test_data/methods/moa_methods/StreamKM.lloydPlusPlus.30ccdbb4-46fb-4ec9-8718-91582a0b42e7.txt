public CoresetCostTriple lloydPlusPlus(int k, int n, int d, Point[] points) {
    // printf("starting kMeans++\n");
    CoresetCostTriple triple;
    double[] radii = new double[k];
    // choose random centres
    Point[] centres = chooseRandomCentres(k, n, d, points);
    double cost = targetFunctionValue(k, n, centres, points);
    double newCost = cost;
    Point[] massCentres = new Point[k];
    double[] numberOfPoints = new double[k];
    do {
        cost = newCost;
        // reset centres of mass
        int i = 0;
        for (i = 0; i < k; i++) {
            massCentres[i] = new Point(d);
            numberOfPoints[i] = 0.0;
        }
        // compute centres of mass
        for (i = 0; i < n; i++) {
            int centre = points[i].determineClusterCentreKMeans(k, centres);
            for (int l = 0; l < massCentres[centre].dimension; l++) {
                if (points[i].weight != 0.0)
                    massCentres[centre].coordinates[l] += points[i].coordinates[l];
            }
            numberOfPoints[centre] += points[i].weight;
        }
        // move centres
        for (i = 0; i < k; i++) {
            for (int l = 0; l < centres[i].dimension; l++) {
                centres[i].coordinates[l] = massCentres[i].coordinates[l];
            }
            centres[i].weight = numberOfPoints[i];
        }
        // calculate costs
        newCost = targetFunctionValue(k, n, centres, points);
    // printf("old cost:%f, new cost:%f \n",cost,newCost);
    } while (newCost < THRESHOLD * cost);
    // compute radii
    for (int i = 0; i < n; i++) {
        int centre = points[i].determineClusterCentreKMeans(k, centres);
        double radius = 0.0;
        double distance;
        for (int j = 0; j < points[i].dimension; j++) {
            distance = Math.abs((centres[centre].coordinates[j] / centres[centre].weight) - (points[i].coordinates[j] / points[i].weight));
            radius += Math.pow(distance, 2.0);
        }
        radii[centre] += radius * points[i].weight;
    }
    for (int i = 0; i < k; i++) {
        radii[i] = 2.0 * Math.sqrt(radii[i] / centres[i].weight);
    }
    /*printf("Centres: \n");
		int i=0;
		for(i=0;i<k;i++){
			printf("(");
			int l = 0;
			for(l=0;l<centres[i].dimension;l++){
				printf("%f,",centres[i].coordinates[l] / centres[i].weight);
			}
			printf(")\n");
		}
		printf("kMeans++ finished\n");
		 */
    triple = new CoresetCostTriple(centres, radii, newCost);
    return triple;
}
