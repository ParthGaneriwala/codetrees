public void estimateModelByteSizes() {
    FoundNode[] learningNodes = findLearningNodes();
    long totalActiveSize = 0;
    long totalInactiveSize = 0;
    for (FoundNode foundNode : learningNodes) {
        if (foundNode.node instanceof ActiveLearningNode) {
            totalActiveSize += SizeOf.fullSizeOf(foundNode.node);
        } else {
            totalInactiveSize += SizeOf.fullSizeOf(foundNode.node);
        }
    }
    if (totalActiveSize > 0) {
        this.activeLeafByteSizeEstimate = (double) totalActiveSize / this.activeLeafNodeCount;
    }
    if (totalInactiveSize > 0) {
        this.inactiveLeafByteSizeEstimate = (double) totalInactiveSize / this.inactiveLeafNodeCount;
    }
    int actualModelSize = this.measureByteSize();
    double estimatedModelSize = (this.activeLeafNodeCount * this.activeLeafByteSizeEstimate + this.inactiveLeafNodeCount * this.inactiveLeafByteSizeEstimate);
    this.byteSizeEstimateOverheadFraction = actualModelSize / estimatedModelSize;
    if (actualModelSize > this.maxByteSizeOption.getValue()) {
        enforceTrackerLimit();
    }
}
