private String splitKernel() {
    isSplitting = true;
    // todo radius range
    double radius = kernelRadiiOption.getValue();
    double avgWeight = 1.0 / numClusterOption.getValue();
    double weight = avgWeight + avgWeight * densityRangeOption.getValue() * instanceRandom.nextDouble();
    SphereCluster spcluster = null;
    double[] center = generator.getCenter();
    spcluster = new SphereCluster(center, radius, weight);
    if (spcluster != null) {
        GeneratorCluster gc = new GeneratorCluster(clusterIdCounter++, spcluster);
        gc.isSplitting = true;
        kernels.add(gc);
        normalizeWeights();
        numActiveKernels++;
        return "Split from Kernel " + generator.getId();
    } else {
        System.out.println("Tried to split new kernel from C" + generator.getId() + ". Not enough room for new cluster, decrease average radii, number of clusters or enable overlap.");
        return "";
    }
}
