private void determineBorders(Dataset data, boolean sparse) {
    // for discretisation we need a list of all features and all
    // featurevalues
    abc_compact = new AbstractBayesianClassifier_compact(true, false, sparse);
    abc_compact.buildClassifier(data);
    featureName_HT_compact = abc_compact.getFeatureTable_compact();
    numFeatures = featureName_HT_compact.size();
    initialCap = ((int) Math.ceil(numFeatures / 0.75) + 10);
    featureName_HT_Discretized = new Hashtable<Integer, Vector<Double>>(initialCap);
    for (Object key : featureName_HT_compact.keySet()) {
        workingfValues = new double[featureName_HT_compact.get(key).keySet().size()];
        int featureName = (Integer) key;
        int index = 0;
        for (Object value : featureName_HT_compact.get(key).keySet()) {
            Double featureValue = (Double) value;
            workingfValues[index] = featureValue;
            index++;
        }
        Arrays.sort(workingfValues);
        borders = new Vector<Double>();
        calculateBins(featureName);
        Collections.sort(borders);
        featureName_HT_Discretized.put(featureName, borders);
    }
}
