private double[] compute(double[][] set, int d, int n1, int n2) throws InterruptedException {
    double n = n1 + n2;
    Arrays.fill(set[d], 0, n1, 1.0);
    Arrays.fill(set[d], n1, n1 + n2, 2.0);
    int[] counts = this.knn(set, n1 + n2, d, this.kValueOption.getValue());
    double Tk = 0;
    for (int i = 0; i < counts.length; i++) {
        Tk += counts[i];
    }
    Tk /= (n * this.kValueOption.getValue());
    double V = (n1 - 1) * (n2 - 1) / ((n - 1) * (n - 1)) + 4 * ((n1 - 1) * (n1 - 2) / ((n - 1) * (n - 2))) * ((n2 - 1) * (n2 - 2) / ((n - 1) * (n - 2)));
    double Z = Math.sqrt(n * this.kValueOption.getValue()) * (Tk - (n1 - 1) * (n1 - 2) / ((n - 1) * (n - 2)) - (n2 - 1) * (n2 - 2) / ((n - 1) * (n - 2))) / Math.sqrt(V);
    double P = this.pnorm(Z, 0, 1, false, false);
    return new double[] { Tk, Z, P };
}
