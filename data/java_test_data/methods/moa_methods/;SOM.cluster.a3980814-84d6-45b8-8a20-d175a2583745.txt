@Override
public Dataset[] cluster(Dataset data) {
    // hexa || rect
    wV = new WeightVectors(xdim, ydim, data.noAttributes(), gridType.toString());
    InputVectors iV = convertDataset(data);
    JSomTraining jst = new JSomTraining(iV);
    // exponential || inverse || linear
    // gaussian || step
    jst.setTrainingInstructions(iterations, learningRate, initialRadius, learningType.toString(), neighbourhoodFunction.toString());
    // WeightVectors out = jst.doTraining();
    jst.doTraining();
    Vector<Dataset> clusters = new Vector<Dataset>();
    for (int i = 0; i < wV.size(); i++) {
        clusters.add(new DefaultDataset());
    }
    wV = doLabeling(wV, iV, data, clusters);
    // Filter empty clusters out;
    int nonEmptyClusterCount = 0;
    for (int i = 0; i < clusters.size(); i++) {
        if (clusters.get(i).size() > 0)
            nonEmptyClusterCount++;
    }
    Dataset[] output = new Dataset[nonEmptyClusterCount];
    int index = 0;
    for (Dataset tmp : clusters) {
        if (tmp.size() > 0) {
            output[index] = tmp;
            index++;
        }
    }
    return output;
}
