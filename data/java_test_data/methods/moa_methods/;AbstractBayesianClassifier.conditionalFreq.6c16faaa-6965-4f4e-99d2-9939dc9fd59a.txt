private Hashtable<Integer, Hashtable<Double, ClassCounter>> conditionalFreq(Dataset Instances2Train) {
    // we will still need division by total count of class frequency to
    // become the conditional probs
    // this will be done on the fly when calculating the result
    trainResult.initInstanceIDtoClassListArray(numClasses);
    // Initialize hashtable giving conditional prob of each class given a
    // feature
    Hashtable<Integer, Hashtable<Double, ClassCounter>> featureName_HT = new Hashtable<Integer, Hashtable<Double, ClassCounter>>(numFeatures);
    Hashtable<Double, ClassCounter> featureValue_CC;
    int instanceid_count = 1;
    for (Instance inst : Instances2Train) {
        for (Object key : inst.keySet()) {
            int featureName = (Integer) key;
            Double featureValue = inst.value((Integer) key);
            if (!featureName_HT.containsKey(featureName)) {
                featureValue_CC = new Hashtable<Double, ClassCounter>();
                featureValue_CC.put(featureValue, new ClassCounter(numClasses));
                featureName_HT.put(featureName, featureValue_CC);
            } else {
                if (!featureName_HT.get(featureName).containsKey(featureValue)) {
                    featureName_HT.get(featureName).put(featureValue, new ClassCounter(classes.length));
                }
            }
            featureName_HT.get(featureName).get(featureValue).setCountClass(featureName_HT.get(featureName).get(featureValue).getCountClass(Classname2IndexCCountermap.get(inst.classValue())) + 1, Classname2IndexCCountermap.get(inst.classValue()));
            featureName_HT.get(featureName).get(featureValue).addInstanceIDtoList(Classname2IndexCCountermap.get(inst.classValue()), instanceid_count);
        }
        trainResult.addInstanceIDtoClassList(Classname2IndexCCountermap.get(inst.classValue()), instanceid_count);
        instanceid_count++;
    }
    numFeatures = featureName_HT.size();
    return (featureName_HT);
}
