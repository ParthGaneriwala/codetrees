public void learnFromInstance(Instance inst, boolean growthAllowed) {
    // The prediction must be calculated here -- it may be different from the tree's prediction due to alternate trees
    // Update the statistics for this node
    // number of instances passing through the node
    examplesSeen += inst.weight();
    // sum of y values
    sumOfValues += inst.weight() * inst.classValue();
    // sum of squared y values
    sumOfSquares += inst.weight() * inst.classValue() * inst.classValue();
    // sum of absolute errors
    sumOfAbsErrors += inst.weight() * Math.abs(tree.normalizeTargetValue(Math.abs(inst.classValue() - getPrediction(inst))));
    if (tree.buildingModelTree())
        learningModel.updatePerceptron(inst);
    for (int i = 0; i < inst.numAttributes() - 1; i++) {
        int instAttIndex = modelAttIndexToInstanceAttIndex(i, inst);
        FIMTDDNumericAttributeClassObserver obs = attributeObservers.get(i);
        if (obs == null) {
            // At this stage all nominal attributes are ignored
            if (inst.attribute(instAttIndex).isNumeric()) {
                obs = tree.newNumericClassObserver();
                this.attributeObservers.set(i, obs);
            }
        }
        if (obs != null) {
            obs.observeAttributeClass(inst.value(instAttIndex), inst.classValue(), inst.weight());
        }
    }
    if (growthAllowed) {
        checkForSplit(tree);
    }
}
