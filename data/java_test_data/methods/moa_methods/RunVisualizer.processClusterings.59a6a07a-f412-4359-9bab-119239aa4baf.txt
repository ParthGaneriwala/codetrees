private void processClusterings(ArrayList<DataPoint> points0, ArrayList<DataPoint> points1) {
    gtClustering0 = new Clustering(points0);
    gtClustering1 = null;
    if (m_clusterer1 != null) {
        gtClustering1 = new Clustering(points1);
    }
    Clustering evalClustering0 = null;
    Clustering evalClustering1 = null;
    // special case for ClusterGenerator
    if (gtClustering0 != null) {
        if (m_clusterer0 instanceof ClusterGenerator)
            ((ClusterGenerator) m_clusterer0).setSourceClustering(gtClustering0);
        if (m_clusterer1 instanceof ClusterGenerator)
            ((ClusterGenerator) m_clusterer1).setSourceClustering(gtClustering1);
    }
    macro0 = m_clusterer0.getClusteringResult();
    evalClustering0 = macro0;
    // TODO: should we check if micro/macro is being drawn or needed for evaluation and skip otherwise to speed things up?
    if (m_clusterer0.implementsMicroClusterer()) {
        micro0 = m_clusterer0.getMicroClusteringResult();
        if (macro0 == null && micro0 != null) {
            // TODO: we need a Macro Clusterer Interface and the option for kmeans to use the non optimal centers
            macro0 = moa.clusterers.KMeans.gaussianMeans(gtClustering0, micro0);
        }
        if (m_clusterer0.evaluateMicroClusteringOption.isSet())
            evalClustering0 = micro0;
        else
            evalClustering0 = macro0;
    }
    if (m_clusterer1 != null) {
        macro1 = m_clusterer1.getClusteringResult();
        evalClustering1 = macro1;
        if (m_clusterer1.implementsMicroClusterer()) {
            micro1 = m_clusterer1.getMicroClusteringResult();
            if (macro1 == null && micro1 != null) {
                macro1 = moa.clusterers.KMeans.gaussianMeans(gtClustering1, micro1);
            }
            if (m_clusterer1.evaluateMicroClusteringOption.isSet())
                evalClustering1 = micro1;
            else
                evalClustering1 = macro1;
        }
    }
    evaluateClustering(evalClustering0, gtClustering0, points0, true);
    evaluateClustering(evalClustering1, gtClustering1, points1, false);
    drawClusterings(points0, points1);
}
