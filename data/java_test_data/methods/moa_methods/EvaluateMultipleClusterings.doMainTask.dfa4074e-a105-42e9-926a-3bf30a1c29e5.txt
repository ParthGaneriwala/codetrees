@Override
protected Object doMainTask(TaskMonitor monitor, ObjectRepository repository) {
    Object result = null;
    String arffFile, outputFile;
    FileStream fStream;
    String mergedFile = this.dumpFileOption.getValueAsCLIString();
    String tempFile = mergedFile.substring(0, mergedFile.length() - 4).concat("*.csv");
    for (int i = 0; i < this.numStreamsOption.getValue(); i++) {
        // Get Base task
        this.task = new EvaluateClustering();
        // Learner
        this.task.learnerOption.setValueViaCLIString(this.learnerOption.getValueAsCLIString());
        // Build stream
        fStream = (FileStream) getPreparedClassOption(this.streamOption);
        arffFile = fStream.arffFileOption.getValueAsCLIString();
        arffFile = arffFile.substring(0, arffFile.lastIndexOf('n') + 1).concat(i + ".arff");
        fStream.arffFileOption.setValueViaCLIString(arffFile);
        this.task.streamOption.setValueViaCLIString(fStream.getCLICreationString(fStream.getClass()));
        // Build Output File
        outputFile = this.dumpFileOption.getValueAsCLIString();
        if (outputFile.endsWith(".csv")) {
            outputFile = outputFile.substring(0, outputFile.length() - 4);
        }
        outputFile = outputFile.concat("n" + i + ".csv");
        this.task.dumpFileOption.setValueViaCLIString(outputFile);
        // Instance Limit
        this.task.instanceLimitOption.setValue(-1);
        // Measure Collection
        // Create an array to summarize the selected measures
        boolean[] measureCollection = new boolean[8];
        measureCollection[0] = this.generalEvalOption.isSet();
        measureCollection[1] = this.f1Option.isSet();
        measureCollection[2] = this.entropyOption.isSet();
        measureCollection[3] = this.cmmOption.isSet();
        measureCollection[4] = this.ssqOption.isSet();
        measureCollection[5] = this.separationOption.isSet();
        measureCollection[6] = this.silhouetteOption.isSet();
        measureCollection[7] = this.statisticalOption.isSet();
        this.task.setMeasures(measureCollection);
        System.out.println("Evaluation #" + (i + 1) + " of " + this.numStreamsOption.getValue() + ": " + this.task.getCLICreationString(this.task.getClass()));
        // Run task
        result = this.task.doTask(monitor, repository);
        if (this.mergeResultsOption.isSet()) {
            System.out.println("Merge " + mergedFile + " and " + outputFile);
            if (i == 0)
                writeToMergeFile(mergedFile, outputFile);
            else
                mergeFiles(mergedFile, outputFile, tempFile);
        }
    }
    return result;
}
