@Override
public void input(double prediction) {
    // It monitors the error rate
    if (this.isChangeDetected == true || this.isInitialized == false) {
        resetLearning();
        this.isInitialized = true;
    }
    m_sum += prediction;
    // m_p + (prediction - m_p) / (double) (m_n+1);
    m_p = m_sum / m_n;
    m_s = Math.sqrt(m_p * (1.0 - m_p) * lambda * (1.0 - Math.pow(1.0 - lambda, 2.0 * m_n)) / (2.0 - lambda));
    m_n++;
    z_t += lambda * (prediction - z_t);
    // double L_t = 2.76 - 6.23 * m_p + 18.12 * Math.pow(m_p, 3) - 312.45 * Math.pow(m_p, 5) + 1002.18 * Math.pow(m_p, 7); //%1 FP
    // %1 FP
    double L_t = 3.97 - 6.56 * m_p + 48.73 * Math.pow(m_p, 3) - 330.13 * Math.pow(m_p, 5) + 848.18 * Math.pow(m_p, 7);
    // double L_t = 1.17 + 7.56 * m_p - 21.24 * Math.pow(m_p, 3) + 112.12 * Math.pow(m_p, 5) - 987.23 * Math.pow(m_p, 7); //%1 FP
    // System.out.print(prediction + " " + m_n + " " + (m_p+m_s) + " ");
    this.estimation = m_p;
    this.isChangeDetected = false;
    this.isWarningZone = false;
    this.delay = 0;
    if (m_n < this.minNumInstancesOption.getValue()) {
        return;
    }
    if (m_n > this.minNumInstancesOption.getValue() && z_t > m_p + L_t * m_s) {
        // System.out.println(m_p + ",D");
        this.isChangeDetected = true;
    // resetLearning();
    } else if (z_t > m_p + 0.5 * L_t * m_s) {
        // System.out.println(m_p + ",W");
        this.isWarningZone = true;
    } else {
        this.isWarningZone = false;
    // System.out.println(m_p + ",N");
    }
}
