@Override
public Object doMainTask(TaskMonitor monitor, ObjectRepository repository) {
    Learner learner = (Learner) getPreparedClassOption(this.learnerOption);
    ExampleStream stream = (ExampleStream) getPreparedClassOption(this.streamOption);
    learner.setModelContext(stream.getHeader());
    int numPasses = this.numPassesOption.getValue();
    int maxInstances = this.maxInstancesOption.getValue();
    for (int pass = 0; pass < numPasses; pass++) {
        long instancesProcessed = 0;
        monitor.setCurrentActivity("Training learner" + (numPasses > 1 ? (" (pass " + (pass + 1) + "/" + numPasses + ")") : "") + "...", -1.0);
        if (pass > 0) {
            stream.restart();
        }
        while (stream.hasMoreInstances() && ((maxInstances < 0) || (instancesProcessed < maxInstances))) {
            learner.trainOnInstance(stream.nextInstance());
            instancesProcessed++;
            if (instancesProcessed % INSTANCES_BETWEEN_MONITOR_UPDATES == 0) {
                if (monitor.taskShouldAbort()) {
                    return null;
                }
                long estimatedRemainingInstances = stream.estimatedRemainingInstances();
                if (maxInstances > 0) {
                    long maxRemaining = maxInstances - instancesProcessed;
                    if ((estimatedRemainingInstances < 0) || (maxRemaining < estimatedRemainingInstances)) {
                        estimatedRemainingInstances = maxRemaining;
                    }
                }
                monitor.setCurrentActivityFractionComplete(estimatedRemainingInstances < 0 ? -1.0 : (double) instancesProcessed / (double) (instancesProcessed + estimatedRemainingInstances));
                if (monitor.resultPreviewRequested()) {
                    monitor.setLatestResultPreview(learner.copy());
                }
            }
        }
    }
    learner.setModelContext(stream.getHeader());
    return learner;
}
