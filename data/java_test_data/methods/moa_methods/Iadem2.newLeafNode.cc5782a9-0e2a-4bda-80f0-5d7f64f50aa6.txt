public LeafNode newLeafNode(Node parent, long instTreeCountSinceVirtual, long instNodeCountSinceVirtual, double[] classDist, Instance instance) {
    switch(this.leafPredictionOption.getChosenIndex()) {
        case 0:
            {
                return new LeafNode(this, parent, instTreeCountSinceVirtual, instNodeCountSinceVirtual, classDist, newNumericClassObserver(), this.splitTestsOption.getChosenIndex() == 2, this.splitTestsOption.getChosenIndex() == 0, instance);
            }
        case 1:
            {
                return new LeafNodeNB(this, parent, instTreeCountSinceVirtual, instNodeCountSinceVirtual, classDist, newNumericClassObserver(), this.naiveBayesLimit, this.splitTestsOption.getChosenIndex() == 2, this.splitTestsOption.getChosenIndex() == 0, instance);
            }
        case 2:
            {
                return new LeafNodeNBKirkby(this, parent, instTreeCountSinceVirtual, instNodeCountSinceVirtual, classDist, newNumericClassObserver(), this.naiveBayesLimit, this.splitTestsOption.getChosenIndex() == 2, this.splitTestsOption.getChosenIndex() == 0, (AbstractChangeDetector) ((AbstractChangeDetector) getPreparedClassOption(this.driftDetectionMethodOption)).copy(), instance);
            }
        default:
            {
                return new LeafNodeWeightedVote(this, parent, instTreeCountSinceVirtual, instNodeCountSinceVirtual, classDist, newNumericClassObserver(), this.naiveBayesLimit, this.splitTestsOption.getChosenIndex() == 2, this.splitTestsOption.getChosenIndex() == 0, (AbstractChangeDetector) ((AbstractChangeDetector) getPreparedClassOption(this.driftDetectionMethodOption)).copy(), instance);
            }
    }
}
