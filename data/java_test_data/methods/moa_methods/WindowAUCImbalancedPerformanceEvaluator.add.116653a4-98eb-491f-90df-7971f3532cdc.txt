public void add(double score, boolean isPositive, boolean correctPrediction) {
    // // periodically update holdout evaluation
    if (size > 0 && posWindow % this.size == 0) {
        this.holdoutSortedScores = new TreeSet<Score>();
        for (Score s : this.sortedScores) {
            this.holdoutSortedScores.add(s);
        }
        this.holdoutNumPos = this.numPos;
        this.holdoutNumNeg = this.numNeg;
    }
    // // if the window is used and it's full
    if (size > 0 && posWindow >= this.size) {
        // // remove the oldest example
        sortedScores.remove(window[posWindow % size]);
        correctPredictions -= predictions[posWindow % size];
        correctPositivePredictions -= window[posWindow % size].isPositive ? predictions[posWindow % size] : 0;
        if (window[posWindow % size].isPositive) {
            numPos--;
        } else {
            numNeg--;
        }
        int oldestExampleTrueClass = window[posWindow % size].isPositive ? 1 : 0;
        int oldestExamplePredictedClass = predictions[posWindow % size] == 1.0 ? oldestExampleTrueClass : Math.abs(oldestExampleTrueClass - 1);
        this.rowKappa[oldestExamplePredictedClass] -= 1;
        this.columnKappa[oldestExampleTrueClass] -= 1;
    }
    // // add new example
    Score newScore = new Score(score, posWindow, isPositive);
    sortedScores.add(newScore);
    correctPredictions += correctPrediction ? 1 : 0;
    correctPositivePredictions += correctPrediction && isPositive ? 1 : 0;
    int trueClass = isPositive ? 1 : 0;
    int predictedClass = correctPrediction ? trueClass : Math.abs(trueClass - 1);
    this.rowKappa[predictedClass] += 1;
    this.columnKappa[trueClass] += 1;
    if (newScore.isPositive) {
        numPos++;
    } else {
        numNeg++;
    }
    if (size > 0) {
        window[posWindow % size] = newScore;
        predictions[posWindow % size] = correctPrediction ? 1 : 0;
    }
    // // posWindow needs to be always incremented to differentiate between examples in the red-black tree
    posWindow++;
}
