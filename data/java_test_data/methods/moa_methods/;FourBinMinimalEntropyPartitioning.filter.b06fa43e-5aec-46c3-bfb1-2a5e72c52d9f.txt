@Override
public void filter(Dataset ddata) {
    if (memoryMode) {
        // but will be slower
        for (Instance inst : ddata) {
            filter(inst);
        }
    } else {
        // faster solution: every unqiue value -> only one calculation of
        // replacement value
        // but needs a list of all sample-ids so needs memory
        abc = new AbstractBayesianClassifier(true, false, sparse);
        abc.buildClassifier(ddata);
        // for discretisation we need a list of all features and all
        // featurevalues
        featureName_HT = abc.getFeatureTable();
        for (Integer key : featureName_HT.keySet()) {
            int FN = key;
            for (Object value : featureName_HT.get(key).keySet()) {
                Double FV = (Double) value;
                // not adding zero values again)
                if ((!sparse) || (FV != 0.0)) {
                    double repVal = calcReplacementValue(FN, FV);
                    Vector<Integer> v = featureName_HT.get(FN).get(FV).getClassInstanceIDLists();
                    Iterator it = v.iterator();
                    while (it.hasNext()) {
                        int instanceID = (Integer) it.next();
                        ddata.get(instanceID - 1).put(key, repVal);
                    }
                }
            }
        }
    }
}
