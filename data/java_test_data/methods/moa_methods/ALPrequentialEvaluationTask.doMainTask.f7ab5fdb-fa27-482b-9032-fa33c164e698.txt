@SuppressWarnings("unchecked")
@Override
protected Object doMainTask(TaskMonitor monitor, ObjectRepository repository) {
    // get stream
    ExampleStream<Example<Instance>> stream = (ExampleStream<Example<Instance>>) getPreparedClassOption(this.streamOption);
    // initialize learner
    ALClassifier learner = (ALClassifier) getPreparedClassOption(this.learnerOption);
    learner.resetLearning();
    learner.setModelContext(stream.getHeader());
    // get evaluator
    ALClassificationPerformanceEvaluator evaluator = (ALClassificationPerformanceEvaluator) getPreparedClassOption(this.evaluatorOption);
    // initialize learning curve
    LearningCurve learningCurve = new LearningCurve("learning evaluation instances");
    // perform training and testing
    int maxInstances = this.instanceLimitOption.getValue();
    int instancesProcessed = 0;
    int maxSeconds = this.timeLimitOption.getValue();
    int secondsElapsed = 0;
    boolean firstDump = true;
    boolean preciseCPUTiming = TimingUtils.enablePreciseTiming();
    long evaluateStartTime = TimingUtils.getNanoCPUTimeOfCurrentThread();
    long lastEvaluateStartTime = evaluateStartTime;
    double RAMHours = 0.0;
    File dumpFile = this.dumpFileOption.getFile();
    PrintStream immediateResultStream = null;
    if (dumpFile != null) {
        try {
            if (dumpFile.exists()) {
                immediateResultStream = new PrintStream(new FileOutputStream(dumpFile, true), true);
            } else {
                immediateResultStream = new PrintStream(new FileOutputStream(dumpFile), true);
            }
        } catch (Exception ex) {
            throw new RuntimeException("Unable to open immediate result file: " + dumpFile, ex);
        }
    }
    monitor.setCurrentActivity("Evaluating learner...", -1.0);
    while (stream.hasMoreInstances() && ((maxInstances < 0) || (instancesProcessed < maxInstances)) && ((maxSeconds < 0) || (secondsElapsed < maxSeconds))) {
        Example<Instance> trainInst = stream.nextInstance();
        Example<Instance> testInst = trainInst;
        // predict class for instance
        double[] prediction = learner.getVotesForInstance(testInst);
        evaluator.addResult(testInst, prediction);
        // train on instance
        learner.trainOnInstance(trainInst);
        // check if label was acquired
        int labelAcquired = learner.getLastLabelAcqReport();
        evaluator.doLabelAcqReport(trainInst, labelAcquired);
        instancesProcessed++;
        // update learning curve
        if (instancesProcessed % this.sampleFrequencyOption.getValue() == 0 || !stream.hasMoreInstances()) {
            long evaluateTime = TimingUtils.getNanoCPUTimeOfCurrentThread();
            double time = TimingUtils.nanoTimeToSeconds(evaluateTime - evaluateStartTime);
            double timeIncrement = TimingUtils.nanoTimeToSeconds(evaluateTime - lastEvaluateStartTime);
            double RAMHoursIncrement = // GBs
            learner.measureByteSize() / (1024.0 * 1024.0 * 1024.0);
            // Hours
            RAMHoursIncrement *= (timeIncrement / 3600.0);
            RAMHours += RAMHoursIncrement;
            lastEvaluateStartTime = evaluateTime;
            learningCurve.insertEntry(new LearningEvaluation(new Measurement[] { new Measurement("learning evaluation instances", instancesProcessed), new Measurement("evaluation time (" + (preciseCPUTiming ? "cpu " : "") + "seconds)", time), new Measurement("model cost (RAM-Hours)", RAMHours) }, evaluator, learner));
            if (immediateResultStream != null) {
                if (firstDump) {
                    immediateResultStream.println(learningCurve.headerToString());
                    firstDump = false;
                }
                immediateResultStream.println(learningCurve.entryToString(learningCurve.numEntries() - 1));
                immediateResultStream.flush();
            }
        }
        // update monitor
        if (instancesProcessed % INSTANCES_BETWEEN_MONITOR_UPDATES == 0 && learningCurve.numEntries() > 0) {
            if (monitor.taskShouldAbort()) {
                return null;
            }
            long estimatedRemainingInstances = stream.estimatedRemainingInstances();
            if (maxInstances > 0) {
                long maxRemaining = maxInstances - instancesProcessed;
                if ((estimatedRemainingInstances < 0 || estimatedRemainingInstances == 0) || (maxRemaining < estimatedRemainingInstances)) {
                    estimatedRemainingInstances = maxRemaining;
                }
            }
            // calculate completion fraction
            double fractionComplete = (double) instancesProcessed / (instancesProcessed + estimatedRemainingInstances);
            monitor.setCurrentActivityFractionComplete(estimatedRemainingInstances < 0 ? -1.0 : fractionComplete);
            // should be changed later on
            if (monitor.resultPreviewRequested() || isSubtask()) {
                monitor.setLatestResultPreview(new PreviewCollectionLearningCurveWrapper((LearningCurve) learningCurve.copy(), this.getClass()));
            }
            // update time measurement
            secondsElapsed = (int) TimingUtils.nanoTimeToSeconds(TimingUtils.getNanoCPUTimeOfCurrentThread() - evaluateStartTime);
        }
    }
    if (immediateResultStream != null) {
        immediateResultStream.close();
    }
    return new PreviewCollectionLearningCurveWrapper(learningCurve, this.getClass());
}
