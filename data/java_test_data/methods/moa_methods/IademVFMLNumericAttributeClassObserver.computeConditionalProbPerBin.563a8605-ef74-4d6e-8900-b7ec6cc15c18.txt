@Override
public ArrayList<Double[]> computeConditionalProbPerBin(ArrayList<Double> cortes) {
    ArrayList<Double[]> condProb = new ArrayList<Double[]>();
    int numClasses = classDist.numValues();
    double[] numClassesPerBin = new double[numClasses];
    Arrays.fill(numClassesPerBin, 0);
    int currentBin = 0;
    Bin element;
    for (int j = 0; j < this.binList.size(); j++) {
        element = this.binList.get(j);
        double aux = element.upperBound;
        if (// last bin
        (currentBin == cortes.size()) || (aux <= cortes.get(currentBin))) {
            // keeps in the same bin
            for (int i = 0; i < numClasses; i++) {
                numClassesPerBin[i] += element.classWeights.getValue(i);
            }
        } else {
            // change of bin
            // store the previous data
            Double[] probCond_intervalo = new Double[numClasses];
            for (int i = 0; i < numClasses; i++) {
                if (this.classDist.getValue(i) == 0) {
                    probCond_intervalo[i] = 0.0;
                } else {
                    probCond_intervalo[i] = numClassesPerBin[i] / this.classDist.getValue(i);
                }
            }
            condProb.add(probCond_intervalo);
            currentBin++;
            while ((currentBin < cortes.size()) && (aux > cortes.get(currentBin))) {
                currentBin++;
                condProb.add(null);
            }
            Arrays.fill(numClassesPerBin, 0);
            // store data in the last bin
            for (int i = 0; i < numClasses; i++) {
                numClassesPerBin[i] += element.classWeights.getValue(i);
            }
        }
    }
    // store data in the last bin
    Double[] probCond_intervalo = new Double[numClasses];
    for (int i = 0; i < numClasses; i++) {
        if (this.classDist.getValue(i) == 0) {
            probCond_intervalo[i] = 0.0;
        } else {
            probCond_intervalo[i] = numClassesPerBin[i] / this.classDist.getValue(i);
        }
    }
    condProb.add(probCond_intervalo);
    return condProb;
}
