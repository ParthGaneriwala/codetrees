@Override
public void trainOnInstanceImpl(Instance inst) {
    if (this.initialized == false) {
        this.dimension = inst.numAttributes();
        manager = new BucketManager(this.length, this.dimension, this.coresetsize, this.clustererRandom);
        this.initialized = true;
    }
    manager.insertPoint(new Point(inst, this.numberInstances));
    this.numberInstances++;
    if (this.numberInstances % lengthOption.getValue() == 0) {
        Point[] streamingCoreset = manager.getCoresetFromManager(dimension);
        // compute 5 clusterings of the coreset with kMeans++ and take the best
        CoresetCostTriple triple;
        double minCost = 0.0;
        double curCost = 0.0;
        triple = lloydPlusPlus(numberOfCentres, coresetsize, dimension, streamingCoreset);
        minCost = triple.getCoresetCost();
        for (int j = 0; j < this.numberOfCentres; j++) {
            centresStreamingCoreset[j] = triple.getCoresetCentres()[j].clone();
        }
        curCost = minCost;
        for (int i = 1; i < 5; i++) {
            triple = lloydPlusPlus(numberOfCentres, coresetsize, dimension, streamingCoreset);
            curCost = triple.getCoresetCost();
            if (curCost < minCost) {
                minCost = curCost;
                for (int j = 0; j < this.numberOfCentres; j++) {
                    centresStreamingCoreset[j] = triple.getCoresetCentres()[j].clone();
                }
            }
        }
    }
}
