public boolean tryToExpand(double splitConfidence, double tieThreshold) {
    // splitConfidence. Hoeffding Bound test parameter.
    // tieThreshold. Hoeffding Bound test parameter.
    // SplitCriterion splitCriterion = new SDRSplitCriterionAMRules();
    // SplitCriterion splitCriterion = new SDRSplitCriterionAMRulesNode();//JD for assessing only best branch
    AMRulesSplitCriterion splitCriterion = (AMRulesSplitCriterion) ((AMRulesSplitCriterion) ((AMRulesRegressorOld) this.amRules).splitCriterionOption.getPreMaterializedObject()).copy();
    // Using this criterion, find the best split per attribute and rank the results
    AttributeSplitSuggestion[] bestSplitSuggestions = this.getBestSplitSuggestions(splitCriterion);
    Arrays.sort(bestSplitSuggestions);
    // Declare a variable to determine if any of the splits should be performed
    boolean shouldSplit = false;
    // If only one split was returned, use it
    if (bestSplitSuggestions.length < 2) {
        shouldSplit = ((bestSplitSuggestions.length > 0) && (bestSplitSuggestions[0].merit > 0));
        bestSuggestion = bestSplitSuggestions[bestSplitSuggestions.length - 1];
    } else // Otherwise, consider which of the splits proposed may be worth trying
    {
        // Determine the hoeffding bound value, used to select how many instances should be used to make a test decision
        // to feel reasonably confident that the test chosen by this sample is the same as what would be chosen using infinite examples
        double hoeffdingBound = computeHoeffdingBound(1, splitConfidence, getWeightSeen());
        debug("Hoeffding bound " + hoeffdingBound, 4);
        // Determine the top two ranked splitting suggestions
        bestSuggestion = bestSplitSuggestions[bestSplitSuggestions.length - 1];
        AttributeSplitSuggestion secondBestSuggestion = bestSplitSuggestions[bestSplitSuggestions.length - 2];
        debug("Merits: " + secondBestSuggestion.merit + " " + bestSuggestion.merit, 4);
        if (bestSuggestion.merit > 0) {
            // if ((((secondBestSuggestion.merit / bestSuggestion.merit) + hoeffdingBound) < 1) //ratio
            if (// if normalized
            (((bestSuggestion.merit - secondBestSuggestion.merit)) > hoeffdingBound) || (hoeffdingBound < tieThreshold)) {
                debug("Expanded ", 5);
                shouldSplit = true;
            }
        }
    }
    if (shouldSplit == true) {
        AttributeSplitSuggestion splitDecision = bestSplitSuggestions[bestSplitSuggestions.length - 1];
        double minValue = Double.MAX_VALUE;
        double[] branchMerits = splitCriterion.computeBranchSplitMerits(bestSuggestion.resultingClassDistributions);
        for (int i = 0; i < bestSuggestion.numSplits(); i++) {
            double value = branchMerits[i];
            if (value < minValue) {
                minValue = value;
                splitIndex = i;
                statisticsNewRuleActiveLearningNode = bestSuggestion.resultingClassDistributionFromSplit(i);
            }
        }
        statisticsBranchSplit = splitDecision.resultingClassDistributionFromSplit(splitIndex);
        statisticsOtherBranchSplit = bestSuggestion.resultingClassDistributionFromSplit(splitIndex == 0 ? 1 : 0);
    }
    return shouldSplit;
}
