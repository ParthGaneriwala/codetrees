public IademAttributeSplitSuggestion getBestSplitSuggestionIADEM(Instance instance) throws IademException {
    int bestAtt;
    int bestAttIndex = -1;
    int secondBestAttIndex = -1;
    double bestAtt_upper = Double.MAX_VALUE;
    double bestAtt_lower = Double.MAX_VALUE;
    double secondBestAtt_upper = Double.MAX_VALUE;
    double secondBestAtt_lower = Double.MAX_VALUE;
    double worstAtt_upper = Double.MIN_VALUE;
    double worstAtt_lower = Double.MIN_VALUE;
    for (int i = 0; i < virtualChildren.size(); i++) {
        VirtualNode currentVirtualChild = virtualChildren.get(i);
        if (currentVirtualChild != null) {
            try {
                currentVirtualChild.updateHeuristicMeasure(instance);
            } catch (IademException e) {
                throw new IademException("LeafNode", "getBestSplitSuggestion7", "Problems when updating measures: \n" + e.getMessage());
            }
            // find the best and second-best attributes
            if (currentVirtualChild.getHeuristicMeasureUpper(instance) >= 0) {
                if ((currentVirtualChild.getHeuristicMeasureUpper(instance) < bestAtt_upper) || ((currentVirtualChild.getHeuristicMeasureUpper(instance) == bestAtt_upper) && (currentVirtualChild.getHeuristicMeasureLower(instance) < bestAtt_lower))) {
                    secondBestAttIndex = bestAttIndex;
                    secondBestAtt_upper = bestAtt_upper;
                    secondBestAtt_lower = bestAtt_lower;
                    bestAttIndex = i;
                    bestAtt_upper = currentVirtualChild.getHeuristicMeasureUpper(instance);
                    bestAtt_lower = currentVirtualChild.getHeuristicMeasureLower(instance);
                } else if ((currentVirtualChild.getHeuristicMeasureUpper(instance) < secondBestAtt_upper) || ((currentVirtualChild.getHeuristicMeasureUpper(instance) == secondBestAtt_upper) && (currentVirtualChild.getHeuristicMeasureLower(instance) < secondBestAtt_lower))) {
                    secondBestAttIndex = i;
                    secondBestAtt_upper = currentVirtualChild.getHeuristicMeasureUpper(instance);
                    secondBestAtt_lower = currentVirtualChild.getHeuristicMeasureLower(instance);
                }
                // find the worst attribute
                if ((currentVirtualChild.getHeuristicMeasureUpper(instance) > worstAtt_upper) || ((currentVirtualChild.getHeuristicMeasureUpper(instance) == worstAtt_upper) && (currentVirtualChild.getHeuristicMeasureLower(instance) > worstAtt_lower))) {
                    worstAtt_upper = currentVirtualChild.getHeuristicMeasureUpper(instance);
                    worstAtt_lower = currentVirtualChild.getHeuristicMeasureLower(instance);
                }
            }
        }
    }
    bestAtt = bestAttIndex;
    if (secondBestAttIndex != -1) {
        // percents in common
        // best and worst
        double best_worst = percentInCommon(bestAtt_upper, bestAtt_lower, worstAtt_upper, worstAtt_lower);
        double worst_best = percentInCommon(worstAtt_upper, worstAtt_lower, bestAtt_upper, bestAtt_lower);
        double d = tree.getAttributeDifferentiation();
        boolean similarityBestWorst = (best_worst >= (1.0 - d)) && (worst_best >= (1.0 - d));
        boolean similarityWithConfidenceBestWorst = similarityBestWorst && ((bestAtt_upper - bestAtt_lower) <= d);
        boolean differenceBestWorst = (best_worst <= d) || (worst_best <= d);
        if (!similarityWithConfidenceBestWorst && !differenceBestWorst) {
            bestAtt = -1;
        }
    }
    if (bestAtt != -1) {
        VirtualNode bestNode = virtualChildren.get(bestAtt);
        double percent;
        if (bestNode instanceof NumericVirtualNode) {
            percent = 1.0 - bestNode.getPercent();
        } else {
            percent = bestNode.getPercent();
        }
        if (percent > tree.getPercentInCommon()) {
            bestAtt = -1;
        }
    }
    if (bestAtt >= 0) {
        return virtualChildren.get(bestAtt).bestSplitSuggestion;
    }
    return null;
}
