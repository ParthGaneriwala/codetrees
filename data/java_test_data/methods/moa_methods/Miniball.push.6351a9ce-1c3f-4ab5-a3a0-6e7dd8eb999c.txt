boolean push(double[] p) {
    // System.out.println("Miniball_b:push");
    int i, j;
    double eps = 1e-32;
    if (m == 0) {
        for (i = 0; i < d; ++i) {
            q0[i] = p[i];
        }
        for (i = 0; i < d; ++i) {
            c[0][i] = q0[i];
        }
        sqr_r[0] = 0;
    } else {
        // set v_m to Q_m
        for (i = 0; i < d; ++i) {
            v[m][i] = p[i] - q0[i];
        }
        // compute the a_{m,i}, i< m
        for (i = 1; i < m; ++i) {
            a[m][i] = 0;
            for (j = 0; j < d; ++j) {
                a[m][i] += v[i][j] * v[m][j];
            }
            a[m][i] *= (2 / z[i]);
        }
        // update v_m to Q_m-\bar{Q}_m
        for (i = 1; i < m; ++i) {
            for (j = 0; j < d; ++j) {
                v[m][j] -= a[m][i] * v[i][j];
            }
        }
        // compute z_m
        z[m] = 0;
        for (j = 0; j < d; ++j) {
            z[m] += mb_sqr(v[m][j]);
        }
        z[m] *= 2;
        // reject push if z_m too small
        if (z[m] < eps * current_sqr_r) {
            return false;
        }
        // update c, sqr_r
        double e = -sqr_r[m - 1];
        for (i = 0; i < d; ++i) {
            e += mb_sqr(p[i] - c[m - 1][i]);
        }
        f[m] = e / z[m];
        for (i = 0; i < d; ++i) {
            c[m][i] = c[m - 1][i] + f[m] * v[m][i];
        }
        sqr_r[m] = sqr_r[m - 1] + e * f[m] / 2;
    }
    current_c = c[m];
    current_sqr_r = sqr_r[m];
    s = ++m;
    return true;
}
