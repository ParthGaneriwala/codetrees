private Node checkAlternativeSubtrees(boolean acierto, Instance instance) throws IademException {
    if (this.estimator != null) {
        double loss = (acierto == true ? 0.0 : 1.0);
        estimator.input(loss);
        if (estimator.getChange()) {
            this.createTree(instance);
        }
        for (int i = 0; i < this.alternativeTree.size(); i++) {
            Iadem3Subtree subtree = alternativeTree.get(i);
            double treeError = subtree.estimacionValorMedio(), thisError = this.estimator.getEstimation();
            double bound = IademCommonProcedures.AverageComparitionByHoeffdingCorollary(this.estimator.getDelay(), subtree.windowWidth(), 1e-4);
            if (thisError - treeError > bound) /**/
            {
                ((Iadem3) this.tree).interchangedTrees++;
                return changeTrees(i);
            } else if (isUseless(i)) {
                ((Iadem3) this.tree).updateNumberOfLeaves(-subtree.getNumberOfLeaves());
                ((Iadem3) this.tree).updateNumberOfNodes(-subtree.getNumberOfNodes());
                ((Iadem3) this.tree).updateNumberOfNodesSplitByTieBreaking(-subtree.numSplitsByBreakingTies);
                i--;
            } else if (this.estimator.getDelay() > 6000 && subtree.windowWidth() > 6000) /**/
            {
                {
                    if (treeError - thisError > bound) {
                        this.alternativeTree.remove(i);
                        // update number of nodes
                        ((Iadem3) this.tree).updateNumberOfLeaves(-subtree.getNumberOfLeaves());
                        ((Iadem3) this.tree).updateNumberOfNodes(-subtree.getNumberOfNodes());
                        ((Iadem3) this.tree).updateNumberOfNodesSplitByTieBreaking(-subtree.numSplitsByBreakingTies);
                        i--;
                    } else /**/
                    {
                        int[] countMain = new int[3], countAlt = new int[3];
                        for (Node child : this.children) {
                            child.getNumberOfNodes(countMain);
                        }
                        subtree.getNumberOfNodes(countAlt);
                        if (countMain[0] + countMain[1] + 1 > countAlt[0] + countAlt[1]) {
                            return changeTrees(i);
                        } else {
                            this.alternativeTree.remove(i);
                            // update number of nodes
                            ((Iadem3) this.tree).updateNumberOfLeaves(-subtree.getNumberOfLeaves());
                            ((Iadem3) this.tree).updateNumberOfNodes(-subtree.getNumberOfNodes());
                            ((Iadem3) this.tree).updateNumberOfNodesSplitByTieBreaking(-subtree.numSplitsByBreakingTies);
                            i--;
                        }
                    }
                }
            /**/
            }
        }
    }
    return null;
}
