public void setMeasures(MeasureCollection[] measures0, ActionListener listener) {
    this.measures0 = measures0;
    names = new ArrayList<JLabel>();
    values = new ArrayList<JLabel>();
    radiobuttons = new ArrayList<JRadioButton>();
    for (int i = 0; i < measures0.length; i++) {
        for (int j = 0; j < measures0[i].getNumMeasures(); j++) {
            if (measures0[i].isEnabled(j)) {
                names.add(new JLabel(measures0[i].getName(j)));
            }
        }
    }
    setLayout(new java.awt.GridBagLayout());
    GridBagConstraints gb;
    // Radiobuttons
    radioGroup = new ButtonGroup();
    gb = new GridBagConstraints();
    gb.gridx = 0;
    for (int i = 0; i < names.size(); i++) {
        JRadioButton rb = new JRadioButton();
        rb.setActionCommand(Integer.toString(i));
        rb.addActionListener(listener);
        radiobuttons.add(rb);
        gb.gridy = i + 1;
        contentPanel.add(rb, gb);
        radioGroup.add(rb);
    }
    radiobuttons.get(0).setSelected(true);
    // name labels
    gb = new GridBagConstraints();
    gb.gridx = 1;
    for (int i = 0; i < names.size(); i++) {
        names.get(i).setPreferredSize(new Dimension(40, 14));
        gb.anchor = GridBagConstraints.WEST;
        gb.insets = new java.awt.Insets(4, 7, 4, 7);
        gb.gridy = i + 1;
        contentPanel.add(names.get(i), gb);
    }
    int counter = 0;
    for (int i = 0; i < measures0.length; i++) {
        for (int j = 0; j < measures0[i].getNumMeasures(); j++) {
            if (!measures0[i].isEnabled(j))
                continue;
            for (int k = 0; k < 4; k++) {
                String tooltip = "";
                Color color = Color.black;
                switch(k) {
                    case 0:
                        tooltip = "current value";
                        color = Color.red;
                        break;
                    case 1:
                        tooltip = "current value";
                        color = Color.blue;
                        break;
                    case 2:
                        tooltip = "mean";
                        color = Color.black;
                        break;
                    case 3:
                        tooltip = "mean";
                        color = Color.black;
                        break;
                }
                JLabel l = new JLabel("-");
                l.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                l.setPreferredSize(new java.awt.Dimension(50, 14));
                l.setToolTipText(measures0[i].getName(j) + " " + tooltip);
                l.setForeground(color);
                values.add(l);
                gb = new GridBagConstraints();
                gb.gridy = 1 + counter;
                gb.gridx = 2 + k;
                gb.weightx = 1.0;
                contentPanel.add(l, gb);
            }
            counter++;
        }
    }
    // dummy label to align the labels at the top
    gb = new GridBagConstraints();
    gb.gridx = 0;
    gb.gridy = names.size() + 2;
    gb.gridwidth = 6;
    gb.weighty = 1.0;
    JLabel fill = new JLabel();
    contentPanel.add(fill, gb);
    addLabels();
    contentPanel.setPreferredSize(new Dimension(250, names.size() * (14 + 8) + 20));
}
