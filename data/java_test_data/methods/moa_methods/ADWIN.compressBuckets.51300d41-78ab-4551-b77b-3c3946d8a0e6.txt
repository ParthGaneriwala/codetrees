public void compressBuckets() {
    // Traverse the list of buckets in increasing order
    int n1, n2;
    double u2, u1, incVariance;
    ListItem cursor;
    ListItem nextNode;
    cursor = listRowBuckets.head();
    int i = 0;
    do {
        // Find the number of buckets in a row
        int k = cursor.bucketSizeRow;
        // If the row is full, merge buckets
        if (k == MAXBUCKETS + 1) {
            nextNode = cursor.next();
            if (nextNode == null) {
                listRowBuckets.addToTail();
                nextNode = cursor.next();
                lastBucketRow++;
            }
            n1 = bucketSize(i);
            n2 = bucketSize(i);
            u1 = cursor.Total(0) / n1;
            u2 = cursor.Total(1) / n2;
            incVariance = n1 * n2 * (u1 - u2) * (u1 - u2) / (n1 + n2);
            nextNode.insertBucket(cursor.Total(0) + cursor.Total(1), cursor.Variance(0) + cursor.Variance(1) + incVariance);
            BucketNumber++;
            cursor.compressBucketsRow(2);
            if (nextNode.bucketSizeRow <= MAXBUCKETS) {
                break;
            }
        } else {
            break;
        }
        cursor = cursor.next();
        i++;
    } while (cursor != null);
}
