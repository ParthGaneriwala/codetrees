@Override
public void trainOnInstanceImpl(Instance inst) {
    // this.trainStepCount++;
    if (inst.classValue() > maxClassValue)
        maxClassValue = (int) inst.classValue();
    this.stm.add(inst);
    memorySizeCheck();
    clean(this.stm, this.ltm, true);
    double[] distancesSTM = this.get1ToNDistances(inst, this.stm);
    for (int i = 0; i < this.stm.numInstances(); i++) {
        this.distanceMatrixSTM[this.stm.numInstances() - 1][i] = distancesSTM[i];
    }
    int oldWindowSize = this.stm.numInstances();
    int newWindowSize = this.getNewSTMSize(recalculateSTMErrorOption.isSet());
    if (newWindowSize < oldWindowSize) {
        int diff = oldWindowSize - newWindowSize;
        Instances discardedSTMInstances = new Instances(this.stm, 0);
        for (int i = diff; i > 0; i--) {
            discardedSTMInstances.add(this.stm.get(0).copy());
            this.stm.delete(0);
        }
        for (int i = 0; i < this.stm.numInstances(); i++) {
            for (int j = 0; j < this.stm.numInstances(); j++) {
                this.distanceMatrixSTM[i][j] = this.distanceMatrixSTM[diff + i][diff + j];
            }
        }
        for (int i = 0; i < diff; i++) {
            this.stmHistory.remove(0);
            this.ltmHistory.remove(0);
            this.cmHistory.remove(0);
        }
        this.clean(this.stm, discardedSTMInstances, false);
        for (int i = 0; i < discardedSTMInstances.numInstances(); i++) {
            this.ltm.add(discardedSTMInstances.get(i).copy());
        }
        memorySizeCheck();
    }
}
