@Override
protected Measurement[] getModelMeasurementsImpl() {
    // Measurement [] baseLearnerMeasurements=((AMRulesMultiLabelLearner) getPreparedClassOption(this.baseLearnerOption)).getModelMeasurements();
    Measurement[] baseLearnerMeasurements = ensemble[0].getModelMeasurements();
    int nMeasurements = baseLearnerMeasurements.length;
    int numMeasurements;
    if (featureRanking instanceof NoFeatureRanking)
        numMeasurements = nMeasurements + 1;
    else
        numMeasurements = nMeasurements + nAttributes + 1;
    Measurement[] m = new Measurement[numMeasurements];
    int ensembleSize = 0;
    if (this.ensemble != null) {
        ensembleSize = this.ensemble.length;
        for (int i = 0; i < nMeasurements; i++) {
            double value = 0;
            for (int j = 0; j < ensembleSize; ++j) {
                Measurement[] measurements = ensemble[j].getModelMeasurements();
                value += measurements[i].getValue();
            }
            m[i + 1] = new Measurement("Avg " + baseLearnerMeasurements[i].getName(), value / ensembleSize);
        }
    } else {
        for (int i = 0; i < baseLearnerMeasurements.length; i++) m[i + 1] = baseLearnerMeasurements[i];
    }
    m[0] = new Measurement("ensemble size", ensembleSize);
    // add feature importance is a method was selected
    if (!(featureRanking instanceof NoFeatureRanking)) {
        DoubleVector rankings = this.featureRanking.getFeatureRankings();
        for (int i = 0; i < nAttributes; i++) {
            double importance = 0;
            if (rankings != null)
                importance = rankings.getValue(i);
            m[i + nMeasurements + 1] = new Measurement("Attribute" + i, importance);
        }
    }
    return m;
}
