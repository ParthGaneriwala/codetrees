public void enforceTrackerLimit() {
    if ((this.inactiveLeafNodeCount > 0) || ((this.activeLeafNodeCount * this.activeLeafByteSizeEstimate + this.inactiveLeafNodeCount * this.inactiveLeafByteSizeEstimate) * this.byteSizeEstimateOverheadFraction > this.maxByteSizeOption.getValue())) {
        FoundNode[] learningNodes = findLearningNodes();
        Arrays.sort(learningNodes, new Comparator<FoundNode>() {

            public int compare(FoundNode fn1, FoundNode fn2) {
                if (HoeffdingOptionTree.this.memoryStrategyOption.getValue() == 0) {
                    // strategy 1 - every leaf treated equal
                    return Double.compare(fn1.node.calculatePromise(), fn2.node.calculatePromise());
                } else if (HoeffdingOptionTree.this.memoryStrategyOption.getValue() == 1) {
                    // strategy 2 - internal leaves penalised
                    double p1 = fn1.node.calculatePromise();
                    if (fn1.parentBranch == -999) {
                        p1 /= fn1.parent.getHeadOptionCount();
                    }
                    double p2 = fn2.node.calculatePromise();
                    if (fn2.parentBranch == -999) {
                        p1 /= fn2.parent.getHeadOptionCount();
                    }
                    return Double.compare(p1, p2);
                } else {
                    // strategy 3 - all true leaves beat internal leaves
                    if (fn1.parentBranch == -999) {
                        if (fn2.parentBranch == -999) {
                            return Double.compare(fn1.node.calculatePromise(), fn2.node.calculatePromise());
                        }
                        // fn1 < fn2
                        return -1;
                    }
                    if (fn2.parentBranch == -999) {
                        // fn1 > fn2
                        return 1;
                    }
                    return Double.compare(fn1.node.calculatePromise(), fn2.node.calculatePromise());
                }
            }
        });
        int maxActive = 0;
        while (maxActive < learningNodes.length) {
            maxActive++;
            if ((maxActive * this.activeLeafByteSizeEstimate + (learningNodes.length - maxActive) * this.inactiveLeafByteSizeEstimate) * this.byteSizeEstimateOverheadFraction > this.maxByteSizeOption.getValue()) {
                maxActive--;
                break;
            }
        }
        int cutoff = learningNodes.length - maxActive;
        for (int i = 0; i < cutoff; i++) {
            if (learningNodes[i].node instanceof ActiveLearningNode) {
                deactivateLearningNode((ActiveLearningNode) learningNodes[i].node, learningNodes[i].parent, learningNodes[i].parentBranch);
            }
        }
        for (int i = cutoff; i < learningNodes.length; i++) {
            if (learningNodes[i].node instanceof InactiveLearningNode) {
                activateLearningNode((InactiveLearningNode) learningNodes[i].node, learningNodes[i].parent, learningNodes[i].parentBranch);
            }
        }
    }
}
