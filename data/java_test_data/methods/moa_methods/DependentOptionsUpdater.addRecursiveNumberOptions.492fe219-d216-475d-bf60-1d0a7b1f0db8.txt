private void addRecursiveNumberOptions(ClassOption option, List<String> optionNames, List<String> optionDescriptions, String namePrefix) {
    OptionHandler optionHandler = (OptionHandler) option.getPreMaterializedObject();
    Option[] options = optionHandler.getOptions().getOptionArray();
    // filter for Int and Float Options
    List<Option> numberOptions = new ArrayList<Option>(options.length);
    for (Option o : options) {
        if (o instanceof IntOption || o instanceof FloatOption) {
            numberOptions.add(o);
        }
    }
    // get names and descriptions
    String newNamePrefix = namePrefix + option.getName() + "/";
    List<String> names = new ArrayList<String>(numberOptions.size());
    List<String> descriptions = new ArrayList<String>(numberOptions.size());
    for (Option o : numberOptions) {
        names.add(newNamePrefix + o.getName());
        descriptions.add(o.getPurpose());
    }
    // add to overall lists
    optionNames.addAll(names);
    optionDescriptions.addAll(descriptions);
    // filter for ClassOptions
    List<ClassOption> classOptions = new ArrayList<ClassOption>(options.length);
    for (Option o : options) {
        if (o instanceof ClassOption) {
            classOptions.add((ClassOption) o);
        }
    }
    // add number options of this class option to the overall list
    for (ClassOption classOption : classOptions) {
        this.addRecursiveNumberOptions(classOption, optionNames, optionDescriptions, newNamePrefix);
    }
}
