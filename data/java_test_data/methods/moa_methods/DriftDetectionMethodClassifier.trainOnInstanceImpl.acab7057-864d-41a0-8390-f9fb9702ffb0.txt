@Override
public void trainOnInstanceImpl(Instance inst) {
    // this.numberInstances++;
    int trueClass = (int) inst.classValue();
    boolean prediction;
    if (Utils.maxIndex(this.classifier.getVotesForInstance(inst)) == trueClass) {
        prediction = true;
    } else {
        prediction = false;
    }
    // this.ddmLevel = this.driftDetectionMethod.computeNextVal(prediction);
    this.driftDetectionMethod.input(prediction ? 0.0 : 1.0);
    this.ddmLevel = DDM_INCONTROL_LEVEL;
    if (this.driftDetectionMethod.getChange()) {
        this.ddmLevel = DDM_OUTCONTROL_LEVEL;
    }
    if (this.driftDetectionMethod.getWarningZone()) {
        this.ddmLevel = DDM_WARNING_LEVEL;
    }
    switch(this.ddmLevel) {
        case DDM_WARNING_LEVEL:
            // System.out.println("DDM_WARNING_LEVEL");
            if (newClassifierReset == true) {
                this.warningDetected++;
                this.newclassifier.resetLearning();
                newClassifierReset = false;
            }
            this.newclassifier.trainOnInstance(inst);
            break;
        case DDM_OUTCONTROL_LEVEL:
            // System.out.println("0 1 O");
            // System.out.println("DDM_OUTCONTROL_LEVEL");
            this.changeDetected++;
            this.classifier = null;
            this.classifier = this.newclassifier;
            if (this.classifier instanceof WEKAClassifier) {
                ((WEKAClassifier) this.classifier).buildClassifier();
            }
            this.newclassifier = ((Classifier) getPreparedClassOption(this.baseLearnerOption)).copy();
            this.newclassifier.resetLearning();
            break;
        case DDM_INCONTROL_LEVEL:
            // System.out.println("0 0 I");
            // System.out.println("DDM_INCONTROL_LEVEL");
            newClassifierReset = true;
            break;
        default:
    }
    this.classifier.trainOnInstance(inst);
}
