void ProcessNewNode(ISBNode nodeNew, boolean bNewNode) {
    if (bTrace) {
        Print("ProcessNewNode: ");
        PrintNode(nodeNew);
    }
    if (bTrace)
        Println("Perform 3R/2 range query to cluster centers w.r.t new node");
    Vector<SearchResultMC> resultsMC;
    // results are sorted ascenting by distance
    resultsMC = RangeSearchMC(nodeNew, 1.5 * m_radius);
    if (bTrace) {
        Println("MC query found: ");
        for (SearchResultMC sr : resultsMC) {
            Printf("  (%.1f) mcc: ", sr.distance);
            PrintNode(sr.mc.mcc);
        }
    }
    if (bTrace)
        Println("Get closest micro-cluster");
    MicroCluster mcClosest = null;
    if (resultsMC.size() > 0) {
        mcClosest = resultsMC.get(0).mc;
        if (bTrace)
            Println("Closest mcc: " + mcClosest.mcc.id);
    }
    // check if nodeNew can be insterted to closest micro-cluster
    boolean bFoundMC = false;
    if (mcClosest != null) {
        double d = GetEuclideanDist(nodeNew, mcClosest.mcc);
        if (d <= m_radius / 2) {
            bFoundMC = true;
        } else {
            if (bTrace)
                Println("Not close enough to closest mcc");
        }
    }
    if (bFoundMC) {
        if (bTrace)
            Println("Add new node to micro-cluster");
        nodeNew.mc = mcClosest;
        SetNodeType(nodeNew, NodeType.INLIER_MC);
        mcClosest.AddNode(nodeNew);
        if (bTrace) {
            Print("mcClosest.nodes: ");
            PrintNodeList(mcClosest.nodes);
        }
        if (bTrace)
            Println("Update neighbors of set PD");
        Vector<ISBNode> nodes;
        nodes = ISB_PD.GetAllNodes();
        for (ISBNode q : nodes) {
            if (q.Rmc.contains(mcClosest)) {
                if (GetEuclideanDist(q, nodeNew) <= m_radius) {
                    if (bNewNode) {
                        // update q.count_after and its' outlierness
                        AddNeighbor(q, nodeNew, true);
                    } else {
                        if (nodesReinsert.contains(q)) {
                            // update q.count_after or q.nn_before and its' outlierness
                            AddNeighbor(q, nodeNew, true);
                        }
                    }
                }
            }
        }
    } else {
        if (bTrace)
            Println("Perform 3R/2 range query to nodes in set PD");
        nRangeQueriesExecuted++;
        // create helper sets for micro-cluster management
        ArrayList<ISBNode> setNC = new ArrayList<ISBNode>();
        ArrayList<ISBNode> setNNC = new ArrayList<ISBNode>();
        Vector<ISBSearchResult> resultNodes;
        // 1.5 ###
        resultNodes = ISB_PD.RangeSearch(nodeNew, 1.5 * m_radius);
        for (ISBSearchResult sr : resultNodes) {
            ISBNode q = sr.node;
            if (sr.distance <= m_radius) {
                // add q to neighs of nodeNew
                AddNeighbor(nodeNew, q, false);
                if (bNewNode) {
                    // update q.count_after and its' outlierness
                    AddNeighbor(q, nodeNew, true);
                } else {
                    if (nodesReinsert.contains(q)) {
                        // update q.count_after or q.nn_before and its' outlierness
                        AddNeighbor(q, nodeNew, true);
                    }
                }
            }
            if (sr.distance <= m_radius / 2.0) {
                setNC.add(q);
            } else {
                setNNC.add(q);
            }
        }
        if (bTrace) {
            Print("Prec neighs of new node: ");
            PrintNodeList(nodeNew.Get_nn_before());
            Print("NC: ");
            PrintNodeList(setNC);
            Print("NNC: ");
            PrintNodeList(setNNC);
        }
        // check if size of set NC big enough to create cluster
        if (bTrace)
            Println("Check size of set NC");
        if (setNC.size() >= m_theta * m_k) {
            // create new micro-cluster with center nodeNew
            if (bTrace)
                Println("Create new micro-cluster");
            MicroCluster mcNew = new MicroCluster(nodeNew);
            AddMicroCluster(mcNew);
            nodeNew.mc = mcNew;
            SetNodeType(nodeNew, NodeType.INLIER_MC);
            if (bTrace)
                Println("Add to new mc nodes within range R/2");
            for (ISBNode q : setNC) {
                q.mc = mcNew;
                mcNew.AddNode(q);
                // move q from set PD to set inlier-mc
                SetNodeType(q, NodeType.INLIER_MC);
                ISB_PD.Remove(q);
                // needed? ###
                RemoveOutlier(q);
            }
            if (bTrace) {
                Print("mcNew.nodes: ");
                PrintNodeList(mcNew.nodes);
                PrintPD();
            }
            if (bTrace)
                Println("Update Rmc lists of nodes of PD in range 3R/2 from mcNew");
            for (ISBNode q : setNNC) {
                q.Rmc.add(mcNew);
                if (bTrace) {
                    Print(q.id + ".Rmc: ");
                    PrintMCSet(q.Rmc);
                }
            }
        } else {
            if (bTrace)
                Println("Add to nodeNew neighs nodes of near micro-clusters");
            for (SearchResultMC sr : resultsMC) {
                for (ISBNode q : sr.mc.nodes) {
                    if (GetEuclideanDist(q, nodeNew) <= m_radius) {
                        // add q to neighs of nodeNew
                        AddNeighbor(nodeNew, q, false);
                    }
                }
            }
            if (bTrace) {
                Println("nodeNew.count_after = " + nodeNew.count_after);
                Print("nodeNew.nn_before: ");
                PrintNodeList(nodeNew.Get_nn_before());
            }
            if (bTrace)
                Println("Insert nodeNew to index of nodes of PD");
            ISB_PD.Insert(nodeNew);
            if (bTrace)
                PrintPD();
            // check if nodeNew is an inlier or outlier
            // use both nn_before and count_after for case bNewNode=false
            int count = nodeNew.CountPrecNeighs(GetWindowStart()) + nodeNew.count_after;
            if (count >= m_k) {
                if (bTrace)
                    Println("nodeNew is an inlier");
                SetNodeType(nodeNew, NodeType.INLIER_PD);
                // insert nodeNew to event queue
                ISBNode nodeMinExp = nodeNew.GetMinPrecNeigh(GetWindowStart());
                AddToEventQueue(nodeNew, nodeMinExp);
            } else {
                if (bTrace)
                    Println("nodeNew is an outlier");
                SetNodeType(nodeNew, NodeType.OUTLIER);
                SaveOutlier(nodeNew);
            }
            if (bTrace)
                Println("Update nodeNew.Rmc");
            for (SearchResultMC sr : resultsMC) {
                nodeNew.Rmc.add(sr.mc);
            }
            if (bTrace) {
                Print("nodeNew.Rmc: ");
                PrintMCSet(nodeNew.Rmc);
            }
        }
    }
}
