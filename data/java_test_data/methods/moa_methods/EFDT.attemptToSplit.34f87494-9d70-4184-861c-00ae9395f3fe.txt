protected void attemptToSplit(ActiveLearningNode node, SplitNode parent, int parentIndex) {
    if (!node.observedClassDistributionIsPure()) {
        // even if we don't actually attempt to split, we've computed infogains
        node.addToSplitAttempts(1);
        SplitCriterion splitCriterion = (SplitCriterion) getPreparedClassOption(this.splitCriterionOption);
        AttributeSplitSuggestion[] bestSplitSuggestions = node.getBestSplitSuggestions(splitCriterion, this);
        Arrays.sort(bestSplitSuggestions);
        boolean shouldSplit = false;
        for (AttributeSplitSuggestion bestSplitSuggestion : bestSplitSuggestions) {
            if (bestSplitSuggestion.splitTest != null) {
                if (!node.getInfogainSum().containsKey((bestSplitSuggestion.splitTest.getAttsTestDependsOn()[0]))) {
                    node.getInfogainSum().put((bestSplitSuggestion.splitTest.getAttsTestDependsOn()[0]), 0.0);
                }
                double currentSum = node.getInfogainSum().get((bestSplitSuggestion.splitTest.getAttsTestDependsOn()[0]));
                node.getInfogainSum().put((bestSplitSuggestion.splitTest.getAttsTestDependsOn()[0]), currentSum + bestSplitSuggestion.merit);
            } else {
                // handle the null attribute
                // null split
                double currentSum = node.getInfogainSum().get(-1);
                node.getInfogainSum().put(-1, Math.max(0.0, currentSum + bestSplitSuggestion.merit));
                assert node.getInfogainSum().get(-1) >= 0.0 : "Negative infogain shouldn't be possible here.";
            }
        }
        if (bestSplitSuggestions.length < 2) {
            shouldSplit = bestSplitSuggestions.length > 0;
        } else {
            double hoeffdingBound = computeHoeffdingBound(splitCriterion.getRangeOfMerit(node.getObservedClassDistribution()), this.splitConfidenceOption.getValue(), node.getWeightSeen());
            AttributeSplitSuggestion bestSuggestion = bestSplitSuggestions[bestSplitSuggestions.length - 1];
            double bestSuggestionAverageMerit;
            double currentAverageMerit = node.getInfogainSum().get(-1) / node.getNumSplitAttempts();
            if (bestSuggestion.splitTest == null) {
                // if you have a null split
                bestSuggestionAverageMerit = node.getInfogainSum().get(-1) / node.getNumSplitAttempts();
            } else {
                bestSuggestionAverageMerit = node.getInfogainSum().get((bestSuggestion.splitTest.getAttsTestDependsOn()[0])) / node.getNumSplitAttempts();
            }
            if (bestSuggestion.merit < 1e-10) {
                // we don't use average here
                shouldSplit = false;
            } else if ((bestSuggestionAverageMerit - currentAverageMerit) > hoeffdingBound || (hoeffdingBound < this.tieThresholdOption.getValue())) {
                if (bestSuggestionAverageMerit - currentAverageMerit < hoeffdingBound) {
                // Placeholder to list this possibility
                }
                shouldSplit = true;
            }
            if (shouldSplit) {
                for (Integer i : node.usedNominalAttributes) {
                    if (bestSuggestion.splitTest.getAttsTestDependsOn()[0] == i) {
                        shouldSplit = false;
                        break;
                    }
                }
            }
            // }
            if ((this.removePoorAttsOption != null) && this.removePoorAttsOption.isSet()) {
                Set<Integer> poorAtts = new HashSet<>();
                // scan 1 - add any poor to set
                for (AttributeSplitSuggestion bestSplitSuggestion : bestSplitSuggestions) {
                    if (bestSplitSuggestion.splitTest != null) {
                        int[] splitAtts = bestSplitSuggestion.splitTest.getAttsTestDependsOn();
                        if (splitAtts.length == 1) {
                            if (bestSuggestion.merit - bestSplitSuggestion.merit > hoeffdingBound) {
                                poorAtts.add(splitAtts[0]);
                            }
                        }
                    }
                }
                // scan 2 - remove good ones from set
                for (AttributeSplitSuggestion bestSplitSuggestion : bestSplitSuggestions) {
                    if (bestSplitSuggestion.splitTest != null) {
                        int[] splitAtts = bestSplitSuggestion.splitTest.getAttsTestDependsOn();
                        if (splitAtts.length == 1) {
                            if (bestSuggestion.merit - bestSplitSuggestion.merit < hoeffdingBound) {
                                poorAtts.remove(splitAtts[0]);
                            }
                        }
                    }
                }
                for (int poorAtt : poorAtts) {
                    node.disableAttribute(poorAtt);
                }
            }
        }
        if (shouldSplit) {
            splitCount++;
            AttributeSplitSuggestion splitDecision = bestSplitSuggestions[bestSplitSuggestions.length - 1];
            if (splitDecision.splitTest == null) {
                // preprune - null wins
                deactivateLearningNode(node, parent, parentIndex);
            } else {
                Node newSplit = newSplitNode(splitDecision.splitTest, node.getObservedClassDistribution(), splitDecision.numSplits());
                // copy the attribute observers
                ((EFDTSplitNode) newSplit).attributeObservers = node.attributeObservers;
                // transfer infogain history, leaf to split
                newSplit.setInfogainSum(node.getInfogainSum());
                for (int i = 0; i < splitDecision.numSplits(); i++) {
                    double[] j = splitDecision.resultingClassDistributionFromSplit(i);
                    Node newChild = newLearningNode(splitDecision.resultingClassDistributionFromSplit(i));
                    if (splitDecision.splitTest.getClass() == NominalAttributeBinaryTest.class || splitDecision.splitTest.getClass() == NominalAttributeMultiwayTest.class) {
                        // deep copy
                        newChild.usedNominalAttributes = new ArrayList<>(node.usedNominalAttributes);
                        newChild.usedNominalAttributes.add(splitDecision.splitTest.getAttsTestDependsOn()[0]);
                    // no  nominal attribute should be split on more than once in the path
                    }
                    ((EFDTSplitNode) newSplit).setChild(i, newChild);
                }
                this.activeLeafNodeCount--;
                this.decisionNodeCount++;
                this.activeLeafNodeCount += splitDecision.numSplits();
                if (parent == null) {
                    this.treeRoot = newSplit;
                } else {
                    parent.setChild(parentIndex, newSplit);
                }
            }
            // manage memory
            enforceTrackerLimit();
        }
    }
}
