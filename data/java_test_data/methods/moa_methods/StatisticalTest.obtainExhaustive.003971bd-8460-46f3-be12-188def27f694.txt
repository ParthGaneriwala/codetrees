private static ArrayList obtainExhaustive(ArrayList indices) {
    ArrayList result = new ArrayList();
    int i, j, k;
    String binario;
    boolean[] number = new boolean[indices.size()];
    ArrayList ind1, ind2;
    ArrayList set = new ArrayList();
    ArrayList res1, res2;
    ArrayList temp;
    ArrayList temp2;
    ArrayList temp3;
    ind1 = new ArrayList();
    ind2 = new ArrayList();
    temp = new ArrayList();
    temp2 = new ArrayList();
    temp3 = new ArrayList();
    for (i = 0; i < indices.size(); i++) {
        for (j = i + 1; j < indices.size(); j++) {
            set.add(new Relation(((Integer) indices.get(i)), ((Integer) indices.get(j))));
        }
    }
    if (set.size() > 0) {
        result.add(set);
    }
    for (i = 1; i < (int) (Math.pow(2, indices.size() - 1)); i++) {
        Arrays.fill(number, false);
        ind1.clear();
        ind2.clear();
        temp.clear();
        temp2.clear();
        temp3.clear();
        binario = Integer.toString(i, 2);
        for (k = 0; k < number.length - binario.length(); k++) {
            number[k] = false;
        }
        for (j = 0; j < binario.length(); j++, k++) {
            if (binario.charAt(j) == '1') {
                number[k] = true;
            }
        }
        for (j = 0; j < number.length; j++) {
            if (number[j] == true) {
                ind1.add(((Integer) indices.get(j)));
            } else {
                ind2.add(((Integer) indices.get(j)));
            }
        }
        res1 = obtainExhaustive(ind1);
        res2 = obtainExhaustive(ind2);
        for (j = 0; j < res1.size(); j++) {
            result.add(new ArrayList((ArrayList) res1.get(j)));
        }
        for (j = 0; j < res2.size(); j++) {
            result.add(new ArrayList((ArrayList) res2.get(j)));
        }
        for (j = 0; j < res1.size(); j++) {
            temp = (ArrayList) ((ArrayList) res1.get(j)).clone();
            for (k = 0; k < res2.size(); k++) {
                temp2 = (ArrayList) temp.clone();
                temp3 = (ArrayList) ((ArrayList) res2.get(k)).clone();
                if (((Relation) temp2.get(0)).i < ((Relation) temp3.get(0)).i) {
                    temp2.addAll((ArrayList) temp3);
                    result.add(new ArrayList(temp2));
                } else {
                    temp3.addAll((ArrayList) temp2);
                    result.add(new ArrayList(temp3));
                }
            }
        }
    }
    for (i = 0; i < result.size(); i++) {
        if (((ArrayList) result.get(i)).toString().equalsIgnoreCase("[]")) {
            result.remove(i);
            i--;
        }
    }
    for (i = 0; i < result.size(); i++) {
        for (j = i + 1; j < result.size(); j++) {
            if (((ArrayList) result.get(i)).toString().equalsIgnoreCase(((ArrayList) result.get(j)).toString())) {
                result.remove(j);
                j--;
            }
        }
    }
    return result;
}
