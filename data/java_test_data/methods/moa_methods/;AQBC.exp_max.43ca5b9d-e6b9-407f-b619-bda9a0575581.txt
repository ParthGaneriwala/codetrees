private boolean exp_max(Vector<TaggedInstance> AS, double[] CK, double QUAL, double S) {
    double D = E - 2;
    double R = Math.sqrt(E - 1);
    // System.out.println("CK= "+Arrays.toString(CK));
    double[] RD = calculateDistances(AS, CK);
    // System.out.println("RD = "+Arrays.toString(RD));
    int samples = RD.length;
    int MAXITER = 500;
    double CDIF = 0.001;
    // float sum = 0;
    double count = 0;
    for (int i = 0; i < RD.length; i++) {
        if (RD[i] < QUAL) {
            count++;
        // sum += RD[i];
        }
    }
    // System.out.println("count = "+count);
    // System.out.println("RD.length = "+RD.length);
    // sum / RD.length;
    double PC = count / RD.length;
    double PB = 1 - PC;
    // System.out.println("PC = "+PC);
    // System.out.println("PB = "+PB);
    double tmpVAR = 0;
    // double sum=0;
    for (int i = 0; i < RD.length; i++) {
        if (RD[i] < QUAL) {
            // sum += RD[i];
            tmpVAR += RD[i] * RD[i];
        }
    }
    // System.out.println("sum = "+sum);
    // System.out.println("tmpVAR = "+tmpVAR);
    double VAR = (1 / D) * tmpVAR / count;
    boolean CONV = false;
    for (int i = 0; i < MAXITER && !CONV; i++) {
        // System.out.println("\tEM iteration: "+i);
        // System.out.println("\tVAR = "+VAR);
        double[] prc = clusterdistrib(RD, VAR, D, R);
        // System.out.println("PRC = "+Arrays.toString(prc));
        double[] prb = background(RD, D, R);
        double[] prcpc = new double[prc.length];
        for (int j = 0; j < prc.length; j++) {
            prcpc[j] = prc[j] * PC;
        }
        double[] prbpb = new double[prb.length];
        for (int j = 0; j < prb.length; j++) {
            prbpb[j] = prb[j] * PB;
        }
        double[] pr = new double[prcpc.length];
        for (int j = 0; j < prc.length; j++) {
            pr[j] = prcpc[j] + prbpb[j];
        }
        double[] pcr = new double[prcpc.length];
        for (int j = 0; j < prc.length; j++) {
            pcr[j] = prcpc[j] / pr[j];
        }
        double SM = 0;
        for (int j = 0; j < prc.length; j++) {
            SM += pcr[j];
        }
        // System.out.println("\tSM = "+SM);
        if (MathUtils.eq(SM, 0) || Double.isInfinite(SM)) {
            // will return from loop
            i = MAXITER;
        }
        float tmpVAR_new = 0;
        for (int j = 0; j < prc.length; j++) {
            tmpVAR_new += RD[j] * RD[j] * pcr[j];
        }
        // System.out.println("tmpVAR_new = "+tmpVAR_new);
        double VAR_new = (1 / D) * tmpVAR_new / SM;
        // System.out.println("PCR = "+Arrays.toString(pcr));
        // System.out.println("\tVAR_new = "+VAR_new);
        // System.out.println("\tPC = "+PC);
        double PC_new = SM / samples;
        // System.out.println("\tPC_new = "+PC_new);
        double PB_new = 1 - PC_new;
        if (Math.abs(VAR_new - VAR) < CDIF && Math.abs(PC_new - PC) < CDIF) {
            CONV = true;
        }
        PC = PC_new;
        PB = PB_new;
        VAR = VAR_new;
    }
    if (CONV) {
        if (MathUtils.eq(PC, 0) || MathUtils.eq(PB, 0)) {
            System.out.println("EM: No or incorrect convergence! - PC==0 || PB==0");
            CONV = false;
            RADNW = 0;
            return false;
        }
        double SD = (2 * Math.pow(Math.PI, D / 2)) / (GammaFunction.gamma(D / 2));
        double SD1 = (2 * Math.pow(Math.PI, (D + 1) / 2)) / (GammaFunction.gamma((D + 1) / 2));
        // System.out.println("SD = "+SD);
        // System.out.println("SD1 = "+SD1);
        double CC = SD * (1 / (Math.pow(2 * Math.PI * VAR, D / 2)));
        double CB = (SD / (SD1 * Math.pow(Math.sqrt(D + 1), D)));
        double LO = (S / (1 - S)) * ((PB * CB) / (PC * CC));
        // System.out.println("LO = "+LO);
        if (LO <= 0) {
            System.out.println("EM: Impossible to calculate radius - LO<0!");
            return false;
        }
        double DIS = -2 * VAR * Math.log(LO);
        // System.out.println("DIS = "+DIS);
        if (DIS <= 0) {
            System.out.println("EM: Impossible to calculate radius - DIS<0!");
            System.out.println();
            return false;
        }
        RADNW = (float) Math.sqrt(DIS);
        return true;
    } else {
        System.out.println("EM: No or incorrect convergence! Probably not enough iterations for EM");
        return false;
    }
}
