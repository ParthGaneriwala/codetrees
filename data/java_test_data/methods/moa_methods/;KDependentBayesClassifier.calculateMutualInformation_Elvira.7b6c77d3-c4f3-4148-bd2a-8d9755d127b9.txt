// **********************************************************************************************//
// rx ry
// Ip(X;Y) = SUM SUM P(X=xi, Y=yj) * log P(X=xi, Y=yj)
// i=1 j=1
// 
// rx ry
// - SUM P(X=xi) * log P(X=xi) - SUM P(Y=yj) * log P(Y=yj)
// i=1 j=1
// 
// 
// **********************************************************************************************//
private LinkedList<Integer> calculateMutualInformation_Elvira() {
    Hashtable<Integer, Hashtable<Double, ClassCounter>> featureName_HT = trainResult.getFeatureTable();
    // set initial probabilities to the prior probs
    double[] freq = trainResult.getClassFreqs().clone();
    // Red black tree structure to have constant sorted structure
    // so we can remove lowest cmi values, good for memory
    SortedMap<Double, LinkedList> sMap = new TreeMap<Double, LinkedList>().descendingMap();
    int fncount = 0;
    double probCj;
    double clsum = 0.0;
    // only once
    for (int j = 0; j < numClasses; j++) {
        // avoid probs k because its rounded
        probCj = freq[j] / numInstances;
        if (probCj != 0)
            clsum += (probCj * (Math.log(probCj) / Math.log(10)));
    }
    for (Object key : featureName_HT.keySet()) {
        fncount++;
        int FN = (Integer) key;
        double info = 0;
        int nClasses = numClasses;
        double probXiCj, probXi, numXi;
        for (Object key2 : featureName_HT.get(FN).keySet()) {
            Double FV = (Double) key2;
            probXi = 0.0;
            // probXiCj
            for (int j = 0; j < nClasses; j++) {
                double probXi_temp = featureName_HT.get(FN).get(FV).getCountClass(j);
                probXi += probXi_temp;
                probXiCj = (probXi_temp) / numInstances;
                if (probXiCj != 0)
                    info += probXiCj * (Math.log(probXiCj) / Math.log(10));
            }
            // probXi
            probXi /= numInstances;
            if (probXi != 0)
                info = info - (probXi * (Math.log(probXi) / Math.log(10)));
        }
        info -= clsum;
        if (!sMap.containsKey(info)) {
            LinkedList<Integer> list = new LinkedList<Integer>();
            list.add(FN);
            sMap.put(info, list);
        } else {
            sMap.get(info).add(FN);
        }
    }
    // end loop all FEATURES
    LinkedList<Integer> list2 = new LinkedList<Integer>();
    for (double sc : sMap.keySet()) {
        list2.addAll(sMap.get(sc));
    }
    return list2;
}
