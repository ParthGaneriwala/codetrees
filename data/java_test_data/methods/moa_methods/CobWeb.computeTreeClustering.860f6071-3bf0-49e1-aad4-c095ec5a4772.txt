protected void computeTreeClustering(int depth, Clustering clustering) {
    if (depth == 0) {
        determineNumberOfClusters();
    }
    if (m_children == null) {
        /*text.append("\n");
                for (int j = 0; j < depth; j++) {
                    text.append("|   ");
                }
                text.append("leaf " + m_clusterNum + " ["
                        + m_clusterInstances.numInstances() + "]");
		clustering.add(SphereCluster(this.coordinates, .05, m_clusterInstances.numInstances()));*/
        if (depth == 0) {
            double[] centroidCoordinates = new double[m_clusterInstances.numAttributes()];
            for (int j = 0; j < m_clusterInstances.numAttributes() - 1; j++) {
                centroidCoordinates[j] = m_clusterInstances.meanOrMode(j);
            }
            clustering.add(new SphereCluster(centroidCoordinates, .05, m_clusterInstances.numInstances()));
        }
    } else {
        for (int i = 0; i < m_children.size(); i++) {
            /*text.append("\n");
                    for (int j = 0; j < depth; j++) {
                        text.append("|   ");
                    }
                    text.append("node " + m_clusterNum + " ["
                            + m_clusterInstances.numInstances()
                            + "]");*/
            double[] centroidCoordinates = new double[m_clusterInstances.numAttributes()];
            for (int j = 0; j < m_clusterInstances.numAttributes() - 1; j++) {
                centroidCoordinates[j] = m_clusterInstances.meanOrMode(j);
            }
            clustering.add(new SphereCluster(centroidCoordinates, .05, m_clusterInstances.numInstances()));
            ((CNode) m_children.elementAt(i)).computeTreeClustering(depth + 1, clustering);
        }
    }
}
