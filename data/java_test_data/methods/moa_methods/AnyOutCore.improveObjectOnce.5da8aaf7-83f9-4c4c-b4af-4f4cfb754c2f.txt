public void improveObjectOnce(int objectId) {
    currentLevel.put(objectId, currentLevel.get(objectId) + 1);
    // descend into closest entry and find the next closest entry there
    ClusKernel mKernel = objectAsKernel.get(objectId);
    previousOScoreResultList.get(objectId).add(new Double(lastOScoreResult.get(objectId)));
    Entry closestEntry = descendToNode.get(objectId).nearestEntry(mKernel);
    // return if irrelevant and keep the previous score.
    if (closestEntry.data.getWeight() < weightThreshold) {
        // if (closestEntry.isIrrelevant(weightThreshold)) {
        descendToNode.remove((objectId));
    } else {
        // update score and next Node to descend into
        if (UseMeanScoreOption.isSet())
            lastOScoreResult.put(objectId, mKernel.calcDistance(closestEntry.data));
        else
            lastOScoreResult.put(objectId, getDensityOutlierScore(mKernel, closestEntry.data));
        useAggregatedOScoreResults(objectId);
        descendToNode.put(objectId, closestEntry.getChild());
        // update confidence
        updateConfidence(objectId);
    }
}
