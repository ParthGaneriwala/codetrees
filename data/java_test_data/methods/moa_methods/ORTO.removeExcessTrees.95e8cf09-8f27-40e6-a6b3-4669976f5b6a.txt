protected void removeExcessTrees() {
    while (numTrees > maxTreesOption.getValue()) {
        Node option = findWorstOption();
        OptionNode parent = (OptionNode) option.parent;
        int index = parent.getChildIndex(option);
        if (parent.children.size() == 2) {
            parent.children.remove(index);
            for (Node chld : parent.children) {
                chld.parent = parent.parent;
                parent.parent.setChild(parent.parent.getChildIndex(parent), chld);
            }
        } else {
            AutoExpandVector<Node> children = new AutoExpandVector<Node>();
            double[] optionFFSSL = new double[parent.children.size() - 1];
            double[] optionFFSeen = new double[parent.children.size() - 1];
            int seen = 0;
            for (int i = 0; i < parent.children.size() - 1; i++) {
                if (parent.getChild(i) != option) {
                    children.add(parent.getChild(i));
                    optionFFSSL[i] = parent.optionFFSSL[i + seen];
                    optionFFSeen[i] = parent.optionFFSeen[i + seen];
                } else {
                    seen = 1;
                }
            }
            parent.children = children;
            parent.optionFFSSL = optionFFSSL;
            parent.optionFFSeen = optionFFSeen;
            assert parent.children.size() == parent.optionFFSSL.length;
        }
        numTrees--;
    }
}
