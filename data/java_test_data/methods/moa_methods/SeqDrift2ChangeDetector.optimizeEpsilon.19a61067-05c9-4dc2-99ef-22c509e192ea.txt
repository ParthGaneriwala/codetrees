private void optimizeEpsilon() {
    int tests = leftReservoir.getSize() / blockSize;
    if (tests >= 1) {
        variance = getVariance();
        if (variance == 0) {
            // to avoid divide by zero exception
            variance = 0.0001;
        }
        // Drift epsilon
        double ddeltadash = getDriftEpsilon(tests);
        double x = Math.log(4.0 / ddeltadash);
        double ktemp = this.k;
        double previousStepEpsilon;
        double currentStepEpsilon;
        double squareRootValue = 0.0;
        boolean IsNotOptimized = true;
        while (IsNotOptimized) {
            squareRootValue = Math.sqrt(x * x + 18 * rightRepositorySize * x * variance);
            previousStepEpsilon = (1.0 / (3 * rightRepositorySize * (1 - ktemp))) * (x + squareRootValue);
            ktemp = 3 * ktemp / 4;
            currentStepEpsilon = (1.0 / (3 * rightRepositorySize * (1 - ktemp))) * (x + squareRootValue);
            if (((previousStepEpsilon - currentStepEpsilon) / previousStepEpsilon) < 0.0001) {
                IsNotOptimized = false;
            }
        }
        ktemp = 4 * ktemp / 3;
        ktemp = adjustForDataRate(ktemp);
        leftReservoirSize = (int) (rightRepositorySize * (1 - ktemp) / ktemp);
        leftReservoir.setMaxSize(leftReservoirSize);
        squareRootValue = Math.sqrt(x * x + 18 * rightRepositorySize * x * variance);
        currentStepEpsilon = (1.0 / (3 * rightRepositorySize * (1 - ktemp))) * (x + squareRootValue);
        epsilon = currentStepEpsilon;
    }
}
