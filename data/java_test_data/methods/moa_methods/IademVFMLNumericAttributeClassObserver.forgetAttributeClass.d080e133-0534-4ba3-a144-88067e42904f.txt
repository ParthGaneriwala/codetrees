public void forgetAttributeClass(double attVal, int classVal, double weight) {
    if (Utils.isMissingValue(attVal)) {
    } else if (this.classDist.sumOfValues() > 0) {
        this.classDist.addToValue(classVal, -weight);
        int i, index;
        boolean found = false;
        int min, max;
        Bin bin;
        int numBins = binList.size();
        // Find the bin holding the example to be forgotten
        index = 0;
        min = 0;
        max = numBins - 1;
        // Binary search
        while (min <= max && !found) {
            i = (min + max) / 2;
            bin = binList.get(i);
            if ((attVal >= bin.lowerBound && attVal < bin.upperBound) || ((i == numBins - 1) && (attVal >= bin.lowerBound) && (attVal <= bin.upperBound))) {
                found = true;
                index = i;
            } else if (attVal < bin.lowerBound) {
                max = i - 1;
            } else {
                min = i + 1;
            }
        }
        // Reduce counts
        if (!found) {
            return;
        }
        bin = binList.get(index);
        // decrement counts
        bin.classWeights.addToValue(classVal, -weight);
        if (bin.classWeights.getValue(classVal) < 0) {
            bin.classWeights.setValue(classVal, 0);
        }
        if (bin.boundaryClass == classVal) {
            bin.boundaryWeight -= weight;
        }
        if (bin.boundaryWeight < 0) {
            bin.boundaryWeight = 0;
        }
        // Remove bin
        if (bin.boundaryWeight == 0 && binList.size() > 0) {
            int numClasses = bin.classWeights.numValues();
            if (index != 0) {
                int j;
                Bin prevBin = binList.get(index - 1);
                prevBin.upperBound = bin.upperBound;
                // prevBin->exampleCount += bin->exampleCount;
                for (j = 0; j < numClasses; j++) {
                    prevBin.classWeights.addToValue(j, bin.classWeights.getValue(j));
                }
                binList.remove(index);
                bin = binList.get(index - 1);
            } else // Remove first bin
            if (binList.size() > 1) {
                int j;
                Bin newFirstBin = binList.get(1);
                Bin oldFirstBin = binList.get(0);
                /*
                     printf( "removing first bin: %f - %f (%f) bc - %ld\n", oldFirstBin->lowerBound,
                     oldFirstBin->upperBound, oldFirstBin->exampleCount, oldFirstBin->boundryCount);
                     */
                newFirstBin.lowerBound = oldFirstBin.lowerBound;
                for (j = 0; j < numClasses; j++) {
                    newFirstBin.classWeights.addToValue(j, oldFirstBin.classWeights.getValue(j));
                }
                /*
                     printf( "new first bin: %f - %f (%f) bc - %ld\n", newFirstBin->lowerBound,
                     newFirstBin->upperBound, newFirstBin->exampleCount, newFirstBin->boundryCount);
                     */
                binList.remove(0);
            }
        }
    }
}
