public boolean proccesCMD() {
    int threads = 1;
    String algNames = null;
    String algShortNames = null;
    String streamNames = null;
    String streamShortNames = null;
    String task = null;
    String resultsFolder = null;
    CommandLineParser parser = null;
    CommandLine cmdLine = null;
    try {
        // Parse the input with the set configuration
        parser = new BasicParser();
        cmdLine = parser.parse(options, args);
        if (cmdLine.hasOption("h")) {
            new HelpFormatter().printHelp(ExperimeterCLI.class.getCanonicalName(), options);
            return false;
        }
        if (cmdLine.hasOption("th")) {
            threads = Integer.parseInt(cmdLine.getOptionValue("th"));
            this.setThreads(threads);
        }
        task = cmdLine.getOptionValue("ts");
        if (task == null) {
            throw new org.apache.commons.cli.ParseException("The task is required");
        }
        this.setTask(task);
        // Algorithms names
        algNames = cmdLine.getOptionValue("ls");
        if (algNames == null) {
            throw new org.apache.commons.cli.ParseException("The name of the algorithms are required");
        }
        try {
            if (algNames.contains(",")) {
                this.setAlgorithms(algNames.split(","));
            } else {
                String[] alg = new String[1];
                alg[0] = algNames;
                this.setAlgorithms(alg);
            }
        } catch (Exception e) {
            System.out.println("Problems with algortihms ls options");
            new HelpFormatter().printHelp(ExperimeterCLI.class.getCanonicalName(), options);
        }
        // Agorithms ID
        if (cmdLine.hasOption("lss")) {
            algShortNames = cmdLine.getOptionValue("lss");
            if (algShortNames.contains(",")) {
                this.setAlgorithmsID(algShortNames.split(","));
            } else {
                String[] ash = new String[1];
                ash[0] = algShortNames;
                this.setAlgorithmsID(ash);
            }
        } else {
            this.setAlgorithmsID(this.getAlgorithms());
        }
        // Streams names
        streamNames = cmdLine.getOptionValue("ds");
        if (streamNames == null) {
            throw new org.apache.commons.cli.ParseException("The name of the streams are required");
        }
        if (streamNames.contains(",")) {
            this.setStreams(streamNames.split(","));
            for (int i = 0; i < this.getStreams().length; i++) {
                String ds = this.getStreams()[i];
                if (ds.contains(":")) {
                    String dir = ds.split(":")[0];
                    if (dir.contains(File.separator)) {
                        dir = dir.split(File.separator + File.separator)[0];
                        ds = dir + ":" + ds.split(":")[1];
                        this.setStreamIndex(i, ds);
                    }
                }
            }
        } else {
            String[] str = new String[1];
            str[0] = FilenameUtils.separatorsToSystem(streamNames);
            this.setStreams(str);
        }
        // stream ID
        if (cmdLine.hasOption("dss")) {
            streamShortNames = cmdLine.getOptionValue("dss");
            if (streamShortNames.contains(",")) {
                this.setStreamsID(streamShortNames.split(","));
            } else {
                String[] strh = new String[1];
                strh[0] = streamShortNames;
                this.setStreamsID(strh);
            }
        } else {
            this.setStreamsID(this.getStreams());
        }
        // Results folder
        resultsFolder = cmdLine.getOptionValue("rf");
        if (resultsFolder == null) {
            // throw new org.apache.commons.cli.ParseException("The resuts folder are required");
            File excPath = new File(".");
            try {
                resultsFolder = excPath.getCanonicalPath();
            } catch (IOException ex) {
                Logger.getLogger(ExperimeterCLI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (resultsFolder.contains(":")) {
            String dir = resultsFolder.split(":")[0];
            if (dir.contains(File.separator)) {
                dir = dir.split(File.separator + File.separator)[0];
                resultsFolder = dir + ":" + resultsFolder.split(":")[1];
            }
        }
        this.setResultsFolder(FilenameUtils.separatorsToSystem(resultsFolder));
    // System.out.println("OK");
    // System.out.println(task);
    // System.out.println(algNames);
    // System.out.println(streamNames);
    } catch (org.apache.commons.cli.ParseException ex) {
        System.out.println(ex.getMessage());
        // Error, print help
        new HelpFormatter().printHelp(ExperimeterCLI.class.getCanonicalName(), options);
        return false;
    } catch (java.lang.NumberFormatException ex) {
        // Error, print help
        new HelpFormatter().printHelp(ExperimeterCLI.class.getCanonicalName(), options);
        return false;
    }
    return true;
}
