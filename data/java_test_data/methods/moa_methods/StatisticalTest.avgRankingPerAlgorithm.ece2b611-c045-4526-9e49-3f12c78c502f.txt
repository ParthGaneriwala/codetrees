private void avgRankingPerAlgorithm() {
    Rj = new double[algoritmos.size()];
    for (i = 0; i < algoritmos.size(); i++) {
        Rj[i] = 0;
        for (j = 0; j < datasets.size(); j++) {
            Rj[i] += rank[j][i].indice / ((double) datasets.size());
        }
    }
    /*Print the average ranking per algorithm*/
    for (i = 0; i < algoritmos.size(); i++) {
        rankAlg.add(new RankPerAlgorithm((String) algoritmos.get(i), Rj[i]));
    }
    // Order de Algorithms with rank
    Collections.sort(rankAlg, new ComparatorImpl());
    /*Compute the Friedman statistic*/
    termino1 = (12 * (double) datasets.size()) / ((double) algoritmos.size() * ((double) algoritmos.size() + 1));
    termino2 = (double) algoritmos.size() * ((double) algoritmos.size() + 1) * ((double) algoritmos.size() + 1) / (4.0);
    for (i = 0; i < algoritmos.size(); i++) {
        sumatoria += Rj[i] * Rj[i];
    }
    friedman = (sumatoria - termino2) * termino1;
    pFriedman = ChiSq(friedman, (algoritmos.size() - 1));
    /*Compute the Iman-Davenport statistic*/
    iman = ((datasets.size() - 1) * friedman) / (datasets.size() * (algoritmos.size() - 1) - friedman);
    pIman = FishF(iman, (algoritmos.size() - 1), (algoritmos.size() - 1) * (datasets.size() - 1));
    // System.out.print("P-value computed by Iman and Daveport Test: " + pIman + ".\\newline\n\n");
    termino3 = Math.sqrt((double) algoritmos.size() * ((double) algoritmos.size() + 1) / (6.0 * (double) datasets.size()));
    // Inicialize values
    inicialize();
}
