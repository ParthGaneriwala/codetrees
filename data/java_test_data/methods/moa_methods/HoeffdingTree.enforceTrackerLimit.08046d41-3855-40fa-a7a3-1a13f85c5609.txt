public void enforceTrackerLimit() {
    if ((this.inactiveLeafNodeCount > 0) || ((this.activeLeafNodeCount * this.activeLeafByteSizeEstimate + this.inactiveLeafNodeCount * this.inactiveLeafByteSizeEstimate) * this.byteSizeEstimateOverheadFraction > this.maxByteSizeOption.getValue())) {
        if (this.stopMemManagementOption.isSet()) {
            this.growthAllowed = false;
            return;
        }
        FoundNode[] learningNodes = findLearningNodes();
        Arrays.sort(learningNodes, new Comparator<FoundNode>() {

            @Override
            public int compare(FoundNode fn1, FoundNode fn2) {
                return Double.compare(fn1.node.calculatePromise(), fn2.node.calculatePromise());
            }
        });
        int maxActive = 0;
        while (maxActive < learningNodes.length) {
            maxActive++;
            if ((maxActive * this.activeLeafByteSizeEstimate + (learningNodes.length - maxActive) * this.inactiveLeafByteSizeEstimate) * this.byteSizeEstimateOverheadFraction > this.maxByteSizeOption.getValue()) {
                maxActive--;
                break;
            }
        }
        int cutoff = learningNodes.length - maxActive;
        for (int i = 0; i < cutoff; i++) {
            if (learningNodes[i].node instanceof ActiveLearningNode) {
                deactivateLearningNode((ActiveLearningNode) learningNodes[i].node, learningNodes[i].parent, learningNodes[i].parentBranch);
            }
        }
        for (int i = cutoff; i < learningNodes.length; i++) {
            if (learningNodes[i].node instanceof InactiveLearningNode) {
                activateLearningNode((InactiveLearningNode) learningNodes[i].node, learningNodes[i].parent, learningNodes[i].parentBranch);
            }
        }
    }
}
