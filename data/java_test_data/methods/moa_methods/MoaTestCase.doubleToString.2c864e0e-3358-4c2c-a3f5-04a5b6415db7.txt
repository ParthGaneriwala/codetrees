public static String doubleToString(double value, int afterDecimalPoint) {
    StringBuilder builder;
    double temp;
    int dotPosition;
    int currentPos;
    long precisionValue;
    char separator;
    temp = value * Math.pow(10.0, afterDecimalPoint);
    if (Math.abs(temp) < Long.MAX_VALUE) {
        precisionValue = (temp > 0) ? (long) (temp + 0.5) : -(long) (Math.abs(temp) + 0.5);
        if (precisionValue == 0)
            builder = new StringBuilder(String.valueOf(0));
        else
            builder = new StringBuilder(String.valueOf(precisionValue));
        if (afterDecimalPoint == 0)
            return builder.toString();
        separator = '.';
        dotPosition = builder.length() - afterDecimalPoint;
        while (((precisionValue < 0) && (dotPosition < 1)) || (dotPosition < 0)) {
            if (precisionValue < 0)
                builder.insert(1, '0');
            else
                builder.insert(0, '0');
            dotPosition++;
        }
        builder.insert(dotPosition, separator);
        if ((precisionValue < 0) && (builder.charAt(1) == separator))
            builder.insert(1, '0');
        else if (builder.charAt(0) == separator)
            builder.insert(0, '0');
        currentPos = builder.length() - 1;
        while ((currentPos > dotPosition) && (builder.charAt(currentPos) == '0')) builder.setCharAt(currentPos--, ' ');
        if (builder.charAt(currentPos) == separator)
            builder.setCharAt(currentPos, ' ');
        return builder.toString().trim();
    }
    return new String("" + value);
}
