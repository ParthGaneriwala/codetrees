private int[] knn(double[][] points, int n, int d, int k) throws InterruptedException {
    int[] counts = new int[n];
    int[] closest = new int[n * k];
    // Percorrendo todos os atributos
    for (int i = 0; i != n; ++i) {
        if (Thread.interrupted()) {
            // We've been interrupted: no more crunching.
            throw new InterruptedException();
        }
        PriorityQueue<DIPair> q = new PriorityQueue(k, new HigherComparator());
        // Percorrendo os valores do atributo
        for (int j = 0; j != n; ++j) {
            if (i != j) {
                DIPair dis = new DIPair(this.dist(points, i, j, d), j);
                if (q.size() == k) {
                    if (dis.getE() < q.peek().getE()) {
                        q.add(dis);
                        q.poll();
                    }
                } else {
                    q.add(dis);
                }
            }
        }
        // crescente para cada instancia
        for (int j = 0; j != k; ++j) {
            closest[i * k + j] = q.poll().getI();
        }
    }
    // Percorrendo todas as instancias
    for (int i = 0; i != n; ++i) {
        if (Thread.interrupted()) {
            // We've been interrupted: no more crunching.
            throw new InterruptedException();
        }
        // Percorrendo os k valores mais proximos
        for (int j = 0; j != k; ++j) {
            // amostra
            if (points[d][closest[i * k + j]] == points[d][i]) {
                counts[i] += 1;
            }
        }
    }
    return counts;
}
