@Override
protected void prepareForUseImpl(TaskMonitor monitor, ObjectRepository repository) {
    super.prepareForUseImpl(monitor, repository);
    colorCoding = Color.WHITE;
    // get subtask objects
    ALMultiParamTask multiParamTask = (ALMultiParamTask) this.multiParamTaskOption.getPreMaterializedObject();
    ALPrequentialEvaluationTask evalTask = (ALPrequentialEvaluationTask) multiParamTask.prequentialEvaluationTaskOption.getPreMaterializedObject();
    String baseStream = evalTask.streamOption.getValueAsCLIString();
    Random random = new Random(randomSeedOption.getValue());
    // setup subtask for each partition
    for (int i = 0; i < this.numPartitionsOption.getValue(); i++) {
        // wrap base stream into a PartitioningStream to split up data
        PartitioningStream stream = new PartitioningStream();
        stream.streamOption.setValueViaCLIString(baseStream);
        stream.partitionIndexOption.setValue(i);
        stream.numPartitionsOption.setValue(this.numPartitionsOption.getValue());
        stream.randomSeedOption.setValue(random.nextInt());
        // create subtask
        ALMultiParamTask partitionTask = (ALMultiParamTask) multiParamTask.copy();
        partitionTask.setIsLastSubtaskOnLevel(this.isLastSubtaskOnLevel, i == this.numPartitionsOption.getValue() - 1);
        partitionTask.setPartitionIdx(i);
        ALPrequentialEvaluationTask partitionEvalTask = (ALPrequentialEvaluationTask) partitionTask.prequentialEvaluationTaskOption.getPreMaterializedObject();
        partitionEvalTask.streamOption.setCurrentObject(stream);
        partitionTask.prepareForUse();
        List<ALTaskThread> childSubtasks = partitionTask.getSubtaskThreads();
        ALTaskThread subtaskThread = new ALTaskThread(partitionTask);
        this.subtaskThreads.add(subtaskThread);
        this.flattenedSubtaskThreads.add(subtaskThread);
        this.flattenedSubtaskThreads.addAll(childSubtasks);
    }
}
