public Clustering getClustering(long currentTime, int targetLevel) {
    if (root == null) {
        return null;
    }
    Clustering clusters = new Clustering();
    LinkedList<Node> queue = new LinkedList<Node>();
    queue.add(root);
    while (!queue.isEmpty()) {
        Node current = queue.remove();
        // if (current == null)
        // continue;
        int currentLevel = current.getLevel(this);
        boolean isLeaf = (current.isLeaf() && currentLevel <= maxHeight) || currentLevel == maxHeight;
        if (currentLevel == targetLevel || (targetLevel == -1 && isLeaf)) {
            assert (currentLevel <= maxHeight);
            Entry[] entries = current.getEntries();
            for (int i = 0; i < entries.length; i++) {
                Entry entry = entries[i];
                if (entry == null || entry.isEmpty()) {
                    continue;
                }
                // XXX
                entry.makeOlder(currentTime, this.negLambda);
                if (entry.isIrrelevant(this.weightThreshold))
                    continue;
                ClusKernel gaussKernel = new ClusKernel(entry.getData());
                // long diff = currentTime - entry.getTimestamp();
                // if (diff > 0) {
                // gaussKernel.makeOlder(diff, negLambda);
                // }
                clusters.add(gaussKernel);
            }
        } else if (!current.isLeaf()) {
            Entry[] entries = current.getEntries();
            for (int i = 0; i < entries.length; i++) {
                Entry entry = entries[i];
                if (entry.isEmpty()) {
                    continue;
                }
                if (entry.isIrrelevant(weightThreshold)) {
                    continue;
                }
                queue.add(entry.getChild());
            }
        }
    }
    return clusters;
}
