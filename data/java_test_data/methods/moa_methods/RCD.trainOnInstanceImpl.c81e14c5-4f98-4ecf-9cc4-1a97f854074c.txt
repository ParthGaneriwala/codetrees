@Override
public void trainOnInstanceImpl(Instance inst) {
    int trueClass = (int) inst.classValue();
    boolean prediction = MiscUtils.maxIndex(this.classifier.getVotesForInstance(inst)) == trueClass;
    this.driftDetectionMethod.input(prediction ? 0.0 : 1.0);
    this.ddmLevel = DDM_INCONTROL_LEVEL;
    if (this.driftDetectionMethod.getChange()) {
        this.ddmLevel = DDM_OUTCONTROL_LEVEL;
    }
    if (this.driftDetectionMethod.getWarningZone()) {
        this.ddmLevel = DDM_WARNING_LEVEL;
    }
    switch(this.ddmLevel) {
        case DDM_WARNING_LEVEL:
            this.warningDetected++;
            switch(this.previousState) {
                case DDM_INCONTROL_LEVEL:
                    this.newclassifier.resetLearning();
                    this.currentChunk2 = new ArrayList();
                    break;
            }
            this.newclassifier.trainOnInstance(inst);
            this.addInstance(this.currentChunk2, inst);
            this.previousState = DDM_WARNING_LEVEL;
            break;
        case DDM_OUTCONTROL_LEVEL:
            this.changeDetected++;
            switch(this.previousState) {
                case DDM_WARNING_LEVEL:
                    ClassifierKS cs = this.getPreviousClassifier(this.classifier, this.currentChunk2);
                    if (cs == null) {
                        this.classifier = this.newclassifier;
                        this.newclassifier = ((Classifier) getPreparedClassOption(this.baseLearnerOption)).copy();
                        this.classifiers.add(new ClassifierKS(this.classifier, this.currentChunk2));
                        this.currentChunk = this.currentChunk2;
                        int maxSize = this.classifiersSizeOption.getValue();
                        if (this.classifiers.size() > maxSize && maxSize > 0) {
                            this.classifiers.remove(0);
                        }
                    } else {
                        this.classifier = cs.getClassifier();
                        this.currentChunk = cs.getInstances();
                    }
                    this.currentChunk2 = null;
                    this.newclassifier.resetLearning();
            }
            this.previousState = DDM_OUTCONTROL_LEVEL;
            break;
        case DDM_INCONTROL_LEVEL:
            switch(this.previousState) {
                case DDM_INCONTROL_LEVEL:
                case DDM_OUTCONTROL_LEVEL:
                    break;
                case DDM_WARNING_LEVEL:
                    this.currentChunk2 = null;
                    break;
                default:
                    this.currentChunk = new ArrayList();
                    this.classifiers.add(new ClassifierKS(this.classifier, this.currentChunk));
                    break;
            }
            this.addInstance(this.currentChunk, inst);
            this.previousState = DDM_INCONTROL_LEVEL;
            break;
    }
    this.classifier.trainOnInstance(inst);
}
