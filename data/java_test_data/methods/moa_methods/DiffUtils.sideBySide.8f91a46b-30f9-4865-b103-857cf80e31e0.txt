public static SideBySideDiff sideBySide(List<String> list1, List<String> list2) {
    List[] result;
    Patch patch;
    int from;
    int to;
    int sizeDiff;
    result = new List[SIDEBYSIDE_SIZE];
    result[SIDEBYSIDE_FIRST] = new ArrayList();
    result[SIDEBYSIDE_SECOND] = new ArrayList();
    result[SIDEBYSIDE_INDICATOR] = new ArrayList();
    result[SIDEBYSIDE_STARTPOS] = new ArrayList();
    result[SIDEBYSIDE_ENDPOS] = new ArrayList();
    patch = difflib.DiffUtils.diff(list1, list2);
    // the same?
    if (patch.getDeltas().size() == 0) {
        result[SIDEBYSIDE_FIRST].addAll(list1);
        result[SIDEBYSIDE_SECOND].addAll(list2);
        addToList(0, list1.size() - 1, INDICATOR_SAME, result[SIDEBYSIDE_INDICATOR]);
        return new SideBySideDiff(result);
    }
    to = 0;
    for (Delta delta : patch.getDeltas()) {
        from = to;
        // common content
        to = delta.getOriginal().getPosition() - 1;
        addToList(from, to, list1, result[SIDEBYSIDE_FIRST]);
        addToList(from, to, list1, result[SIDEBYSIDE_SECOND]);
        addToList(from, to, INDICATOR_SAME, result[SIDEBYSIDE_INDICATOR]);
        // start pos of delta
        result[SIDEBYSIDE_STARTPOS].add(result[SIDEBYSIDE_FIRST].size());
        if (delta instanceof InsertDelta) {
            // added content
            addToList(0, delta.getRevised().size() - 1, new Filler(), result[SIDEBYSIDE_FIRST]);
            result[SIDEBYSIDE_SECOND].addAll(delta.getRevised().getLines());
            addToList(0, delta.getRevised().size() - 1, INDICATOR_ADDED, result[SIDEBYSIDE_INDICATOR]);
            to = delta.getOriginal().getPosition() + delta.getOriginal().size();
        } else if (delta instanceof DeleteDelta) {
            // deleted content
            result[SIDEBYSIDE_FIRST].addAll(delta.getOriginal().getLines());
            addToList(0, delta.getOriginal().size() - 1, new Filler(), result[SIDEBYSIDE_SECOND]);
            addToList(0, delta.getOriginal().size() - 1, INDICATOR_DELETED, result[SIDEBYSIDE_INDICATOR]);
            to = delta.getOriginal().getPosition() + delta.getOriginal().size();
        } else {
            // changed content
            result[SIDEBYSIDE_FIRST].addAll(delta.getOriginal().getLines());
            result[SIDEBYSIDE_SECOND].addAll(delta.getRevised().getLines());
            addToList(1, Math.max(delta.getOriginal().size(), delta.getRevised().size()), INDICATOR_CHANGED, result[SIDEBYSIDE_INDICATOR]);
            // filler necessary?
            sizeDiff = delta.getRevised().size() - delta.getOriginal().size();
            if (sizeDiff > 0)
                addToList(1, sizeDiff, new Filler(), result[SIDEBYSIDE_FIRST]);
            if (sizeDiff < 0)
                addToList(1, -sizeDiff, new Filler(), result[SIDEBYSIDE_SECOND]);
            to = delta.getOriginal().getPosition() + delta.getOriginal().size();
        }
        // end pos of delta
        result[SIDEBYSIDE_ENDPOS].add(result[SIDEBYSIDE_FIRST].size());
    }
    // trailing common content?
    if (to < list1.size()) {
        addToList(to, list1.size() - 1, list1, result[SIDEBYSIDE_FIRST]);
        addToList(to, list1.size() - 1, list1, result[SIDEBYSIDE_SECOND]);
        addToList(to, list1.size() - 1, INDICATOR_SAME, result[SIDEBYSIDE_INDICATOR]);
    }
    return new SideBySideDiff(result);
}
