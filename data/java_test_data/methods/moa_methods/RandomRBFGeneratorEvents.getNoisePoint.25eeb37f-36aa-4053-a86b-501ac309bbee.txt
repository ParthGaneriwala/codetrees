private double[] getNoisePoint() {
    double[] sample = new double[numAttsOption.getValue()];
    boolean incluster = true;
    int counter = 20;
    while (incluster) {
        for (int j = 0; j < numAttsOption.getValue(); j++) {
            sample[j] = instanceRandom.nextDouble();
        }
        incluster = false;
        if (!noiseInClusterOption.isSet() && counter > 0) {
            counter--;
            for (int c = 0; c < kernels.size(); c++) {
                for (int m = 0; m < kernels.get(c).microClusters.size(); m++) {
                    Instance inst = new DenseInstance(1, sample);
                    if (kernels.get(c).microClusters.get(m).getInclusionProbability(inst) > 0) {
                        incluster = true;
                        break;
                    }
                }
                if (incluster)
                    break;
            }
        }
    }
    return sample;
}
