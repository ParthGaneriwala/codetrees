// </editor-fold>//GEN-END:initComponents
private void jButtonResultsActionPerformed(java.awt.event.ActionEvent evt) {
    // GEN-FIRST:event_jButtonResultsActionPerformed
    BaseDirectoryChooser resultsFile = new BaseDirectoryChooser();
    // resultsFile.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
    int selection = resultsFile.showOpenDialog(this);
    if (selection == JFileChooser.APPROVE_OPTION) {
        path = resultsFile.getSelectedFile().getAbsolutePath();
    }
    if (!path.equals("")) {
        reset();
        this.jTextFieldResultsPath.setText(path);
        rf = new ReadFile(path);
        String str = rf.processFiles();
        if (str.equals("")) {
            int algSize = rf.getAlgShortNames().size();
            int streamSize = rf.getStream().size();
            this.measures = rf.getMeasures();
            for (int i = 0; i < algSize; i++) {
                this.algoritmModel.addRow(new Object[] { rf.getAlgNames().get(i), rf.getAlgShortNames().get(i) });
            }
            for (int i = 0; i < streamSize; i++) {
                this.streamModel.addRow(new Object[] { rf.getStream().get(i), rf.getStream().get(i) });
            }
            String[] measuresNames = measures.getFirst().split(",");
            for (String measuresName : measuresNames) {
                jComboBoxMeasure.addItem(measuresName);
                if (measuresName.equals("classifications correct (percent)") == true || measuresName.equals("[avg] classifications correct (percent)") == true) {
                    jComboBoxMeasure.setSelectedItem(measuresName);
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, str, "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
}
