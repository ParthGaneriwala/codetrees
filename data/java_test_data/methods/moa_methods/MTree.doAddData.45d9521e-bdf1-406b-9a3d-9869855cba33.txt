public void doAddData(DATA data, double distance) {
    class CandidateChild {

        Node node;

        double distance;

        double metric;

        private CandidateChild(Node node, double distance, double metric) {
            this.node = node;
            this.distance = distance;
            this.metric = metric;
        }
    }
    CandidateChild minRadiusIncreaseNeeded = new CandidateChild(null, -1.0, Double.POSITIVE_INFINITY);
    CandidateChild nearestDistance = new CandidateChild(null, -1.0, Double.POSITIVE_INFINITY);
    for (IndexItem item : thisNode.children.values()) {
        @SuppressWarnings("unchecked") Node child = (Node) item;
        double childDistance = thisNode.mtree().distanceFunction.calculate(child.data, data);
        if (childDistance > child.radius) {
            double radiusIncrease = childDistance - child.radius;
            if (radiusIncrease < minRadiusIncreaseNeeded.metric) {
                minRadiusIncreaseNeeded = new CandidateChild(child, childDistance, radiusIncrease);
            }
        } else {
            if (childDistance < nearestDistance.metric) {
                nearestDistance = new CandidateChild(child, childDistance, childDistance);
            }
        }
    }
    CandidateChild chosen = (nearestDistance.node != null) ? nearestDistance : minRadiusIncreaseNeeded;
    Node child = chosen.node;
    try {
        child.addData(data, chosen.distance);
        thisNode.updateRadius(child);
    } catch (SplitNodeReplacement e) {
        // Replace current child with new nodes
        IndexItem ii = thisNode.children.remove(child.data);
        assert ii != null;
        for (int i = 0; i < e.newNodes.length; ++i) {
            @SuppressWarnings("unchecked") Node newChild = (Node) e.newNodes[i];
            distance = thisNode.mtree().distanceFunction.calculate(thisNode.data, newChild.data);
            thisNode.addChild(newChild, distance);
        }
    }
}
