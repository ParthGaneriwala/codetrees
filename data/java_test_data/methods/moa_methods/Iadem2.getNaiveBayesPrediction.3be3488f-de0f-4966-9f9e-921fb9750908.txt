protected double[] getNaiveBayesPrediction(Instance obs) {
    double[] classVotes = getMajorityClassVotes(obs);
    DoubleVector condProbabilities;
    for (int i = 0; i < virtualChildren.size(); i++) {
        VirtualNode currentVirtualNode = virtualChildren.get(i);
        if (currentVirtualNode != null && currentVirtualNode.hasInformation()) {
            double valor = obs.value(i);
            condProbabilities = currentVirtualNode.computeConditionalProbability(valor);
            if (condProbabilities != null) {
                for (int j = 0; j < classVotes.length; j++) {
                    classVotes[j] *= condProbabilities.getValue(j);
                }
            }
        }
    }
    // normalize class votes
    double classVoteCount = 0.0;
    for (int i = 0; i < classVotes.length; i++) {
        classVoteCount += classVotes[i];
    }
    if (classVoteCount == 0.0) {
        for (int i = 0; i < classVotes.length; i++) {
            classVotes[i] = 1.0 / classVotes.length;
        }
    } else {
        for (int i = 0; i < classVotes.length; i++) {
            classVotes[i] /= classVoteCount;
        }
    }
    return classVotes;
}
