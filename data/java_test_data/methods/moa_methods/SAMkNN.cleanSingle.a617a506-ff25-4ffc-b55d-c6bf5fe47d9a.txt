private void cleanSingle(Instances cleanAgainst, int cleanAgainstindex, Instances toClean) {
    Instances cleanAgainstTmp = new Instances(cleanAgainst);
    cleanAgainstTmp.delete(cleanAgainstindex);
    double[] distancesSTM = get1ToNDistances(cleanAgainst.get(cleanAgainstindex), cleanAgainstTmp);
    int[] nnIndicesSTM = nArgMin(Math.min(this.kOption.getValue(), distancesSTM.length), distancesSTM);
    double[] distancesLTM = get1ToNDistances(cleanAgainst.get(cleanAgainstindex), toClean);
    int[] nnIndicesLTM = nArgMin(Math.min(this.kOption.getValue(), distancesLTM.length), distancesLTM);
    double distThreshold = 0;
    for (int nnIdx : nnIndicesSTM) {
        if (cleanAgainstTmp.get(nnIdx).classValue() == cleanAgainst.get(cleanAgainstindex).classValue()) {
            if (distancesSTM[nnIdx] > distThreshold) {
                distThreshold = distancesSTM[nnIdx];
            }
        }
    }
    List<Integer> delIndices = new ArrayList<>();
    for (int nnIdx : nnIndicesLTM) {
        if (toClean.get(nnIdx).classValue() != cleanAgainst.get(cleanAgainstindex).classValue()) {
            if (distancesLTM[nnIdx] <= distThreshold) {
                delIndices.add(nnIdx);
            }
        }
    }
    Collections.sort(delIndices, Collections.reverseOrder());
    for (Integer idx : delIndices) toClean.delete(idx);
}
