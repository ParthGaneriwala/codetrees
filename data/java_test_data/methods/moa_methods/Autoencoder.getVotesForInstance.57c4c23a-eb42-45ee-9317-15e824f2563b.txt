/**
 * Calculates the autoencoder's output for a given input instance
 *
 * @param inst the instance given to the autoencoder
 * @return the outputs of the hidden layer and the output vector that attempts to reconstruct the input
 *
 * private RealMatrix prediction(RealMatrix input)
 * {
 * RealMatrix output = new double[this.numAttributes+2];
 *
 * // Initialize arrays and compute total net input for the hidden layer
 * for(int i = 0 ; i < this.numAttributes ; i++)
 * {
 * input[i] = inst.value(i);
 * output[i+2] = this.biasTwo;
 * output[0] += input[i]*this.weightsOne[i][0];
 * output[1] += input[i]*this.weightsOne[i][1];
 * }
 *
 * // Logistic function used for hidden layer activation
 * output[0] = 1.0 / (1.0 + Math.pow(Math.E,-1.0 * (output[0] + this.biasOne)));
 * output[1] = 1.0 / (1.0 + Math.pow(Math.E,-1.0 * (output[1] + this.biasOne)));
 *
 * // Compute total net input for the output layer
 * // Use the logistic function for output layer activation.
 * for(int i = 2 ; i < this.numAttributes ; i++)
 * {
 * output[i] += (output[0]*this.weightsTwo[0][i])+(output[1]*this.weightsTwo[1][i]);
 * output[i] = 1.0 / (1.0 + Math.pow(Math.E,-1.0 * output[i]));
 * }
 *
 * return output;
 * }
 */
@Override
public double[] getVotesForInstance(Instance inst) {
    double[] votes = new double[2];
    if (this.reset == false) {
        double error = this.getAnomalyScore(inst);
        // Exponential function to convert the error [0, +inf) into a vote [1,0].
        votes[0] = Math.pow(2.0, -1.0 * (error / this.threshold));
        votes[1] = 1.0 - votes[0];
    }
    return votes;
}
