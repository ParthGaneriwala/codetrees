private void constructMeanStdPreviewsForParam(int numEntriesPerPreview, int numParamValues, int paramValue) {
    // calculate mean
    List<double[]> meanParamMeasurements = calculateMeanMeasurementsForParam(numEntriesPerPreview, numParamValues, paramValue);
    // calculate standard deviation
    List<double[]> stdParamMeasurements = calculateStdMeasurementsForParam(numEntriesPerPreview, numParamValues, paramValue, meanParamMeasurements);
    // get actual measurement names (first four are only additional IDs)
    String[] meanMeasurementNames = this.origMultiRunPreviews.getMeasurementNames();
    meanMeasurementNames = Arrays.copyOfRange(meanMeasurementNames, 4, meanMeasurementNames.length);
    // Create names for standard deviations.
    // First name is used for indexing and remains unchanged. For the
    // remaining names, [std] is prepended to the original name.
    String[] stdMeasurementNames = new String[meanMeasurementNames.length];
    stdMeasurementNames[0] = meanMeasurementNames[0];
    for (int m = 1; m < meanMeasurementNames.length; m++) {
        stdMeasurementNames[m] = "[std] " + meanMeasurementNames[m];
    }
    // wrap into LearningCurves
    LearningCurve meanLearningCurve = new LearningCurve(meanMeasurementNames[0]);
    meanLearningCurve.setData(Arrays.asList(meanMeasurementNames), meanParamMeasurements);
    LearningCurve stdLearningCurve = new LearningCurve(stdMeasurementNames[0]);
    stdLearningCurve.setData(Arrays.asList(stdMeasurementNames), stdParamMeasurements);
    // wrap into PreviewCollectionLearningCurveWrapper
    Preview meanParamValuePreview = new PreviewCollectionLearningCurveWrapper(meanLearningCurve, this.origMultiRunPreviews.taskClass);
    Preview stdParamValuePreview = new PreviewCollectionLearningCurveWrapper(stdLearningCurve, this.origMultiRunPreviews.taskClass);
    // store Previews in corresponding PreviewCollections
    this.meanPreviews.setPreview(paramValue, meanParamValuePreview);
    this.stdPreviews.setPreview(paramValue, stdParamValuePreview);
}
