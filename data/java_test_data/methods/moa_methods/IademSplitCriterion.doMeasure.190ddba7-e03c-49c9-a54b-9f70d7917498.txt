public double doMeasure(ArrayList<Double> vector) throws IademException {
    // logarithm base for entropy
    double logBase;
    logBase = (double) vector.size();
    double measure = 0.0;
    switch(this.splitMeasure) {
        case IademSplitCriterion.ENTROPY:
            {
                logBase = vector.size();
                if (logBase > 1.0) {
                    double n = 0.0;
                    for (Double elem : vector) {
                        double tmpValue = elem;
                        if (tmpValue > 0.0) {
                            n += tmpValue;
                        } else if (tmpValue < 0.0) {
                            throw new IademException("MySplitMeasure", "doMeasure", "All values must be positive");
                        }
                    }
                    if (n == 0.0) {
                        throw new IademException("MySplitMeasure", "doMeasure", "Vector must be different from 0.0");
                    } else {
                        double a_i = 0.0;
                        double sum = 0.0;
                        for (int i = 0; i < vector.size(); i++) {
                            a_i = vector.get(i);
                            if (a_i > 0.0) {
                                sum += (a_i * IademCommonProcedures.log(logBase, a_i));
                            }
                        }
                        measure = -((1 / n) * (sum - (n * IademCommonProcedures.log(logBase, n))));
                    }
                } else if (logBase == 1.0) {
                    measure = 0.0;
                }
            }
            break;
        case ENTROPY_LOG_VAR:
            {
                if (logBase > 1.0) {
                    double n = 0.0;
                    for (Double elem : vector) {
                        double tmpValue = elem;
                        if (tmpValue > 0.0) {
                            n += tmpValue;
                        } else if (tmpValue < 0.0) {
                            throw new IademException("MySplitMeasure", "doMeasure", "All values must be positive");
                        }
                    }
                    if (n == 0.0) {
                        throw new IademException("MySplitMeasure", "doMeasure", "Vector must be different from 0.0");
                    } else {
                        double a_i = 0.0;
                        double sum = 0.0;
                        for (Double elem : vector) {
                            a_i = elem;
                            if (a_i > 0.0) {
                                sum += a_i * IademCommonProcedures.log(logBase, a_i);
                            }
                        }
                        measure = -((1 / n) * (sum - (n * IademCommonProcedures.log(logBase, n))));
                    }
                } else if (logBase == 1.0) {
                    measure = 0.0;
                }
            }
            break;
        case WEIGHTED_ENTROPY:
            {
                if (logBase > 1.0) {
                    double n = 0.0;
                    for (int i = 0; i < vector.size(); i++) {
                        double tmpValue = vector.get(i);
                        if (tmpValue > 0.0) {
                            n += tmpValue;
                        } else if (tmpValue < 0.0) {
                            throw new IademException("MySplitMeasure", "doMeasure", "All values must be positive");
                        }
                    }
                    if (n == 0.0) {
                        measure = 0.0;
                    } else {
                        double a_i = 0.0;
                        double sum = 0.0;
                        for (int i = 0; i < vector.size(); i++) {
                            a_i = vector.get(i);
                            if (a_i > 0.0) {
                                sum += (a_i * IademCommonProcedures.log(logBase, a_i));
                            }
                        }
                        measure = -((1 / n) * (sum - (n * IademCommonProcedures.log(logBase, n))));
                    }
                } else if (logBase == 1.0) {
                    measure = 0.0;
                }
            }
            break;
        case WEIGHTED_ENTROPY_LOG_VAR:
            {
                logBase = vector.size();
                if (logBase > 1.0) {
                    double n = 0.0;
                    for (int i = 0; i < vector.size(); i++) {
                        double tmpValue = vector.get(i);
                        if (tmpValue > 0.0) {
                            n += tmpValue;
                        } else if (tmpValue < 0.0) {
                            throw new IademException("MySplitMeasure", "doMeasure", "All values must be positive");
                        }
                    }
                    if (n == 0.0) {
                        measure = 0.0;
                    } else {
                        double a_i = 0.0;
                        double sum = 0.0;
                        for (Double elem : vector) {
                            a_i = elem;
                            if (a_i > 0.0) {
                                sum += (a_i * IademCommonProcedures.log(logBase, a_i));
                            }
                        }
                        measure = -((1 / n) * (sum - (n * IademCommonProcedures.log(logBase, n))));
                    }
                } else if (logBase == 1.0) {
                    measure = 0.0;
                }
            }
            break;
        case BETA_1:
            {
                double mayor = 0.0;
                for (Double elem : vector) {
                    mayor = Math.max(mayor, elem);
                }
                measure = 1.0 - mayor;
            }
            break;
        case GAMMA_1:
            {
                double max = 0.0;
                for (Double elem : vector) {
                    max = Math.max(max, elem);
                }
                measure = 1.0 - max;
                measure = Math.sqrt(2.0 * measure);
            }
            break;
        case BETA_2:
            {
                double mayor = 0.0;
                double sum = 0.0;
                for (Double elem : vector) {
                    double num = elem;
                    mayor = Math.max(mayor, num);
                    sum += (num * num);
                }
                measure = 1.0 - mayor + (mayor * mayor) - sum;
            }
            break;
        case GAMMA_2:
            {
                double max = 0.0;
                double sum = 0.0;
                for (Double elem : vector) {
                    double num = elem;
                    max = Math.max(max, num);
                    sum += (num * num);
                }
                measure = 1.0 - max + (max * max) - sum;
                measure = Math.sqrt(4.0 * measure);
            }
            break;
        case BETA_4:
            {
                double sum = 0.0;
                for (Double elem : vector) {
                    double num = elem;
                    sum += (num * num);
                }
                measure = 1.0 - sum;
            }
            break;
        case GAMMA_4:
            {
                double sum = 0.0;
                for (Double elem : vector) {
                    double num = elem;
                    sum += (num * num);
                }
                measure = 1.0 - sum;
                measure = Math.sqrt(2.0 * measure);
            }
            break;
    }
    if (measure < 0.0) {
        throw new IademException("MySplitMeasure", "doMeasure", "Measure could not be calculated");
    }
    return measure;
}
