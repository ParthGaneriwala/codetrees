private double[] pnorm_both(double x, double cum, int i_tail, boolean log_p) {
    double ccum = 0;
    final double[] a = { 2.2352520354606839287, 161.02823106855587881, 1067.6894854603709582, 18154.981253343561249, 0.065682337918207449113 };
    final double[] b = { 47.20258190468824187, 976.09855173777669322, 10260.932208618978205, 45507.789335026729956 };
    final double[] c = { 0.39894151208813466764, 8.8831497943883759412, 93.506656132177855979, 597.27027639480026226, 2494.5375852903726711, 6848.1904505362823326, 11602.651437647350124, 9842.7148383839780218, 1.0765576773720192317e-8 };
    final double[] d = { 22.266688044328115691, 235.38790178262499861, 1519.377599407554805, 6485.558298266760755, 18615.571640885098091, 34900.952721145977266, 38912.003286093271411, 19685.429676859990727 };
    final double[] p = { 0.21589853405795699, 0.1274011611602473639, 0.022235277870649807, 0.001421619193227893466, 2.9112874951168792e-5, 0.02307344176494017303 };
    final double[] q = { 1.28426009614491121, 0.468238212480865118, 0.0659881378689285515, 0.00378239633202758244, 7.29751555083966205e-5 };
    final double M_SQRT_32 = 5.656854249492380195206754896838;
    final double M_1_SQRT_2PI = 0.398942280401432677939946059934;
    double xden, xnum, temp, eps, xsq, y;
    double min = Double.MIN_VALUE;
    int i;
    boolean lower, upper;
    if (Double.isNaN(x)) {
        cum = ccum = x;
        return new double[] { cum, ccum };
    }
    eps = 1E-9 * 0.5;
    lower = i_tail != 1;
    upper = i_tail != 0;
    y = Math.abs(x);
    if (y <= 0.67448975) {
        /*
								 * qnorm(3/4) = .6744.... -- earlier had
								 * 0.66291
             */
        if (y > eps) {
            xsq = x * x;
            xnum = a[4] * xsq;
            xden = xsq;
            for (i = 0; i < 3; ++i) {
                xnum = (xnum + a[i]) * xsq;
                xden = (xden + b[i]) * xsq;
            }
        } else {
            xnum = xden = 0.0;
        }
        temp = x * (xnum + a[3]) / (xden + b[3]);
        if (lower) {
            cum = 0.5 + temp;
        }
        if (upper) {
            ccum = 0.5 - temp;
        }
        if (log_p) {
            if (lower) {
                cum = Math.log(cum);
            }
            if (upper) {
                ccum = Math.log(ccum);
            }
        }
    } else if (y <= M_SQRT_32) {
        xnum = c[8] * y;
        xden = y;
        for (i = 0; i < 7; ++i) {
            xnum = (xnum + c[i]) * y;
            xden = (xden + d[i]) * y;
        }
        temp = (xnum + c[7]) / (xden + d[7]);
        double[] retorno = do_del(y, log_p, cum, ccum, lower, x, temp, upper);
        retorno = swap_tail(x, temp, retorno[0], lower, retorno[1]);
        cum = retorno[0];
        ccum = retorno[1];
    } else if (log_p || (lower && -37.5193 < x && x < 8.2924) || (upper && -8.2924 < x && x < 37.5193)) {
        /* Evaluate pnorm for x in (-37.5, -5.657) union (5.657, 37.5) */
        xsq = 1.0 / (x * x);
        xnum = p[5] * xsq;
        xden = xsq;
        for (i = 0; i < 4; ++i) {
            xnum = (xnum + p[i]) * xsq;
            xden = (xden + q[i]) * xsq;
        }
        temp = xsq * (xnum + p[4]) / (xden + q[4]);
        temp = (M_1_SQRT_2PI - temp) / y;
        double[] retorno = do_del(x, log_p, cum, ccum, lower, x, temp, upper);
        retorno = swap_tail(x, temp, retorno[0], lower, retorno[1]);
        cum = retorno[0];
        ccum = retorno[1];
    } else /* no log_p , large x such that probs are 0 or 1 */
    if (x > 0) {
        cum = 1.;
        ccum = 0.;
    } else {
        cum = 0.;
        ccum = 1.;
    }
    /* do not return "denormalized" -- we do in R */
    if (log_p) {
        if (cum > -min) {
            cum = -0.;
        }
        if (ccum > -min) {
            ccum = -0.;
        }
    } else {
        if (cum < min) {
            cum = 0.;
        }
        if (ccum < min) {
            ccum = 0.;
        }
    }
    return new double[] { cum, ccum };
}
