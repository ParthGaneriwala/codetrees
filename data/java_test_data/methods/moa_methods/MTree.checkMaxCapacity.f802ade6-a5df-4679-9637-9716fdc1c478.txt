private final void checkMaxCapacity() throws SplitNodeReplacement {
    if (children.size() > MTree.this.maxNodeCapacity) {
        DistanceFunction<? super DATA> cachedDistanceFunction = DistanceFunctions.cached(MTree.this.distanceFunction);
        SplitResult<DATA> splitResult = MTree.this.splitFunction.process(children.keySet(), cachedDistanceFunction);
        Node newNode0 = null;
        Node newNode1 = null;
        for (int i = 0; i < 2; ++i) {
            DATA promotedData = splitResult.promoted.get(i);
            Set<DATA> partition = splitResult.partitions.get(i);
            Node newNode = newSplitNodeReplacement(promotedData);
            for (DATA data : partition) {
                IndexItem child = children.get(data);
                children.remove(data);
                double distance = cachedDistanceFunction.calculate(promotedData, data);
                newNode.addChild(child, distance);
            }
            if (i == 0) {
                newNode0 = newNode;
            } else {
                newNode1 = newNode;
            }
        }
        assert children.isEmpty();
        throw new SplitNodeReplacement(newNode0, newNode1);
    }
}
