private DataSet[] mergeDataSets(DataSet[] subDataSets, int setToMerge) throws Exception {
    DataSet[] result = new DataSet[subDataSets.length - 1];
    DataSet tmpDataSet;
    int nrOfDim = subDataSets[0].getNrOfDimensions();
    double[] tmpFeatures, tmpMean = new double[nrOfDim];
    DataObject tmpObject = subDataSets[setToMerge].getObject(0);
    int closestSet = 0;
    double tmpDist, shortestDist = Double.MAX_VALUE;
    int newIndex = 0;
    for (int i = 0; i < subDataSets.length; i++) {
        if (i != setToMerge) {
            tmpDataSet = subDataSets[i];
            result[newIndex] = tmpDataSet;
            // calculate mean of current sub data set
            for (int j = 0; j < tmpDataSet.size(); j++) {
                tmpFeatures = tmpDataSet.getObject(j).getFeatures();
                for (int d = 0; d < nrOfDim; d++) {
                    tmpMean[d] += tmpFeatures[d];
                }
            }
            for (int d = 0; d < nrOfDim; d++) {
                tmpMean[d] /= tmpDataSet.size();
            }
            // compare distance
            tmpDist = euclideanDistance(tmpMean, tmpObject.getFeatures());
            if (tmpDist < shortestDist) {
                shortestDist = tmpDist;
                closestSet = newIndex;
            }
            newIndex++;
        }
    }
    // add object to closest set and return
    result[closestSet].addObject(tmpObject);
    return result;
}
