@Override
public void addResult(Example<Instance> testInst, Prediction prediction) {
    MultiLabelInstance inst = (MultiLabelInstance) testInst.getData();
    if (this.squareError == null) {
        this.squareError = new Estimator[inst.numOutputAttributes()];
        this.averageError = new Estimator[inst.numOutputAttributes()];
        this.averageErrorToTargetMean = new Estimator[inst.numOutputAttributes()];
        this.squareErrorToTargetMean = new Estimator[inst.numOutputAttributes()];
        this.sumY = new Estimator[inst.numOutputAttributes()];
        for (int i = 0; i < inst.numOutputAttributes(); i++) {
            this.averageError[i] = new Estimator(this.widthOption.getValue());
            this.averageErrorToTargetMean[i] = new Estimator(this.widthOption.getValue());
            this.squareError[i] = new Estimator(this.widthOption.getValue());
            this.squareErrorToTargetMean[i] = new Estimator(this.widthOption.getValue());
            this.sumY[i] = new Estimator(this.widthOption.getValue());
        }
    }
    double weight = inst.weight();
    if (numberOutputs == 0) {
        numberOutputs = inst.numberOutputTargets();
    }
    if (weight > 0.0) {
        if (TotalweightObserved == 0) {
            reset(inst.dataset().numClasses());
        }
        this.TotalweightObserved += weight;
        this.weightObserved.add(weight);
        if (prediction != null) {
            for (int i = 0; i < numberOutputs; i++) {
                double error = (inst.valueOutputAttribute(i) - prediction.getVote(i, 0));
                this.sumY[i].add(inst.valueOutputAttribute(i));
                double errorTM = (inst.valueOutputAttribute(i) - this.sumY[i].total() / this.weightObserved.total());
                this.averageErrorToTargetMean[i].add(Math.abs(errorTM));
                ;
                this.squareErrorToTargetMean[i].add(errorTM * errorTM);
                ;
                this.averageError[i].add(Math.abs(error));
                this.squareError[i].add(error * error);
            }
        }
    // System.out.println(inst.classValue()+", "+prediction[0]);
    }
}
