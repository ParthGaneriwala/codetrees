@Override
public Pair<Set<DATA>> process(final Pair<DATA> promoted, Set<DATA> dataSet, final DistanceFunction<? super DATA> distanceFunction) {
    List<DATA> queue1 = new ArrayList<DATA>(dataSet);
    // Sort by distance to the first promoted data
    Collections.sort(queue1, new Comparator<DATA>() {

        @Override
        public int compare(DATA data1, DATA data2) {
            double distance1 = distanceFunction.calculate(data1, promoted.first);
            double distance2 = distanceFunction.calculate(data2, promoted.first);
            return Double.compare(distance1, distance2);
        }
    });
    List<DATA> queue2 = new ArrayList<DATA>(dataSet);
    // Sort by distance to the second promoted data
    Collections.sort(queue2, new Comparator<DATA>() {

        @Override
        public int compare(DATA data1, DATA data2) {
            double distance1 = distanceFunction.calculate(data1, promoted.second);
            double distance2 = distanceFunction.calculate(data2, promoted.second);
            return Double.compare(distance1, distance2);
        }
    });
    Pair<Set<DATA>> partitions = new Pair<Set<DATA>>(new HashSet<DATA>(), new HashSet<DATA>());
    int index1 = 0;
    int index2 = 0;
    while (index1 < queue1.size() || index2 != queue2.size()) {
        while (index1 < queue1.size()) {
            DATA data = queue1.get(index1++);
            if (!partitions.second.contains(data)) {
                partitions.first.add(data);
                break;
            }
        }
        while (index2 < queue2.size()) {
            DATA data = queue2.get(index2++);
            if (!partitions.first.contains(data)) {
                partitions.second.add(data);
                break;
            }
        }
    }
    return partitions;
}
