@Override
protected Object doMainTask(TaskMonitor monitor, ObjectRepository repository) {
    File resultFile = this.plotOutputOption.getFile();
    if (this.plotOutputOption.getFile() == null) {
        throw new RuntimeException("Plot output file option not set!");
    }
    String resultDirectory = (new File(resultFile.getAbsolutePath())).getParent();
    String gnuPlotPath = gnuplotPathOption.getValue();
    File gnuplotDir = new File(gnuPlotPath);
    if (!gnuplotDir.exists()) {
        throw new RuntimeException("Gnuplot directory not found: " + gnuPlotPath);
    }
    monitor.setCurrentActivity("Verifying input files...", 0.0);
    if (inputFilesOption.getList().length > fileAliasesOption.getList().length) {
        throw new RuntimeException("Too little aliases for input files!");
    } else if (inputFilesOption.getList().length < fileAliasesOption.getList().length) {
        throw new RuntimeException("Too many aliases for input files!");
    } else {
        for (int i = 0; i < inputFilesOption.getList().length; i++) {
            File inputFile = new File(((StringOption) inputFilesOption.getList()[i]).getValue());
            if (!inputFile.exists()) {
                throw new RuntimeException("File not found: " + inputFile.getAbsolutePath());
            }
        }
    }
    if (monitor.taskShouldAbort()) {
        return null;
    }
    monitor.setCurrentActivity("Creating script file...", 1.0 / 4.0);
    String gnuplotScriptPath = resultDirectory + File.separator + resultFile.getName() + ".plt";
    String script = createScript(resultFile);
    File scriptFile = writeScriptToFile(gnuplotScriptPath, script);
    if (monitor.taskShouldAbort()) {
        return null;
    }
    monitor.setCurrentActivity("Plotting data...", 2.0 / 4.0);
    String gnuplotCommand = gnuPlotPath + File.separator + "gnuplot \"" + gnuplotScriptPath + "\"";
    String line, gnuplotOutput = "";
    try {
        Process p = Runtime.getRuntime().exec(gnuplotCommand);
        BufferedReader err = new BufferedReader(new InputStreamReader(p.getErrorStream()));
        while ((line = err.readLine()) != null) {
            gnuplotOutput += line + System.getProperty("line.separator");
        }
        err.close();
    } catch (IOException ex) {
        throw new RuntimeException("Error while executing gnuplot script:" + scriptFile, ex);
    }
    if (monitor.taskShouldAbort()) {
        return null;
    }
    if (deleteScriptsOption.isSet()) {
        monitor.setCurrentActivity("Deleting script...", 3.0 / 4.0);
        scriptFile.delete();
    }
    if (monitor.taskShouldAbort()) {
        return null;
    }
    monitor.setCurrentActivity("Done", 1.0);
    return resultFile.getAbsolutePath() + System.getProperty("line.separator") + gnuplotOutput;
}
