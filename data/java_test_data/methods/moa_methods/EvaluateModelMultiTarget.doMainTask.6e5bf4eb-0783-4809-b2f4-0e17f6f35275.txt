@Override
public Object doMainTask(TaskMonitor monitor, ObjectRepository repository) {
    Learner model = (Learner) getPreparedClassOption(this.modelOption);
    ExampleStream stream = (ExampleStream) getPreparedClassOption(this.streamOption);
    LearningPerformanceEvaluator evaluator = (LearningPerformanceEvaluator) getPreparedClassOption(this.evaluatorOption);
    int maxInstances = this.maxInstancesOption.getValue();
    long instancesProcessed = 0;
    monitor.setCurrentActivity("Evaluating model...", -1.0);
    // File for output predictions
    File outputPredictionFile = this.outputPredictionFileOption.getFile();
    PrintStream outputPredictionResultStream = null;
    if (outputPredictionFile != null) {
        try {
            if (outputPredictionFile.exists()) {
                outputPredictionResultStream = new PrintStream(new FileOutputStream(outputPredictionFile, true), true);
            } else {
                outputPredictionResultStream = new PrintStream(new FileOutputStream(outputPredictionFile), true);
            }
        } catch (Exception ex) {
            throw new RuntimeException("Unable to open prediction result file: " + outputPredictionFile, ex);
        }
    }
    while (stream.hasMoreInstances() && ((maxInstances < 0) || (instancesProcessed < maxInstances))) {
        // .copy();
        Example testInst = (Example) stream.nextInstance();
        double trueClass = ((Instance) testInst.getData()).classValue();
        // testInst.setClassMissing();
        double[] prediction = model.getVotesForInstance(testInst);
        // .weight());
        if (outputPredictionFile != null) {
            outputPredictionResultStream.println(prediction[0] + "," + trueClass);
        }
        evaluator.addResult(testInst, prediction);
        instancesProcessed++;
        if (instancesProcessed % INSTANCES_BETWEEN_MONITOR_UPDATES == 0) {
            if (monitor.taskShouldAbort()) {
                return null;
            }
            long estimatedRemainingInstances = stream.estimatedRemainingInstances();
            if (maxInstances > 0) {
                long maxRemaining = maxInstances - instancesProcessed;
                if ((estimatedRemainingInstances < 0) || (maxRemaining < estimatedRemainingInstances)) {
                    estimatedRemainingInstances = maxRemaining;
                }
            }
            monitor.setCurrentActivityFractionComplete(estimatedRemainingInstances < 0 ? -1.0 : (double) instancesProcessed / (double) (instancesProcessed + estimatedRemainingInstances));
            if (monitor.resultPreviewRequested()) {
                monitor.setLatestResultPreview(new LearningEvaluation(evaluator, model));
            }
        }
    }
    if (outputPredictionResultStream != null) {
        outputPredictionResultStream.close();
    }
    return new LearningEvaluation(evaluator, model);
}
