@Override
public void trainOnInstanceImpl(Instance inst) {
    // System.err.println(i++);
    if (this.treeRoot == null) {
        this.treeRoot = newLearningNode();
        this.activeLeafNodeCount = 1;
    }
    FoundNode foundNode = this.treeRoot.filterInstanceToLeaf(inst, null, -1);
    Node leafNode = foundNode.node;
    if (leafNode == null) {
        leafNode = newLearningNode();
        foundNode.parent.setChild(foundNode.parentBranch, leafNode);
        this.activeLeafNodeCount++;
    }
    if (leafNode instanceof LearningNode) {
        LearningNode learningNode = (LearningNode) leafNode;
        learningNode.learnFromInstance(inst, this);
        if (this.growthAllowed && (learningNode instanceof ActiveLearningNode)) {
            ActiveLearningNode activeLearningNode = (ActiveLearningNode) learningNode;
            double weightSeen = activeLearningNode.getWeightSeen();
            if (activeLearningNode.nodeTime % this.gracePeriodOption.getValue() == 0) {
                attemptToSplit(activeLearningNode, foundNode.parent, foundNode.parentBranch);
                activeLearningNode.setWeightSeenAtLastSplitEvaluation(weightSeen);
            }
        }
    }
    if (this.trainingWeightSeenByModel % this.memoryEstimatePeriodOption.getValue() == 0) {
        estimateModelByteSizes();
    }
    numInstances++;
}
