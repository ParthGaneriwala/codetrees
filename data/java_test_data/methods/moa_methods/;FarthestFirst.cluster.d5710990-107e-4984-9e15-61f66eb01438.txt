public Dataset[] cluster(Dataset data) {
    this.data = data;
    centroids = new Instance[m_NumClusters];
    int n = data.size();
    boolean[] selected = new boolean[n];
    double[] minDistance = new double[n];
    for (int i = 0; i < n; i++) minDistance[i] = Double.MAX_VALUE;
    int firstI = rg.nextInt(n);
    centroids[0] = data.instance(firstI);
    selected[firstI] = true;
    updateMinDistance(minDistance, selected, data.instance(firstI));
    if (m_NumClusters > n)
        m_NumClusters = n;
    for (int i = 1; i < m_NumClusters; i++) {
        int nextI = farthestAway(minDistance, selected);
        centroids[i] = data.instance(nextI);
        selected[nextI] = true;
        updateMinDistance(minDistance, selected, data.instance(nextI));
    }
    // put data in clusters using the calculated centroids
    Dataset[] clusters = new Dataset[m_NumClusters];
    for (int i = 0; i < m_NumClusters; i++) {
        clusters[i] = new DefaultDataset();
    }
    for (int i = 0; i < data.size(); i++) {
        Instance inst = data.instance(i);
        double min = dm.measure(inst, centroids[0]);
        int index = 0;
        for (int j = 1; j < m_NumClusters; j++) {
            double tmp = dm.measure(inst, centroids[j]);
            if (tmp < min) {
                min = tmp;
                index = j;
            }
        }
        clusters[index].add(inst);
    }
    return clusters;
}
