@Override
public LeafNode newLeafNode(Node parent, long instTreeCountSinceVirtual, long instNodeCountSinceVirtual, double[] initialClassCount, Instance instance) {
    switch(this.leafPredictionOption.getChosenIndex()) {
        case 0:
            {
                return new AdaptiveLeafNode(this, parent, instTreeCountSinceVirtual, instNodeCountSinceVirtual, initialClassCount, newNumericClassObserver(), this.estimator, this.splitTestsOption.getChosenIndex() == 2, this.splitTestsOption.getChosenIndex() == 0, instance);
            }
        case 1:
            {
                return new AdaptiveLeafNodeNB(this, parent, instTreeCountSinceVirtual, instNodeCountSinceVirtual, initialClassCount, newNumericClassObserver(), this.naiveBayesLimit, this.estimator, this.splitTestsOption.getChosenIndex() == 2, this.splitTestsOption.getChosenIndex() == 0, instance);
            }
        case 2:
            {
                return new AdaptiveLeafNodeNBKirkby(this, parent, instTreeCountSinceVirtual, instNodeCountSinceVirtual, initialClassCount, newNumericClassObserver(), this.naiveBayesLimit, this.splitTestsOption.getChosenIndex() == 2, this.splitTestsOption.getChosenIndex() == 0, this.estimator, instance);
            }
        default:
            {
                return new AdaptiveLeafNodeWeightedVote(this, parent, instTreeCountSinceVirtual, instNodeCountSinceVirtual, initialClassCount, newNumericClassObserver(), this.naiveBayesLimit, this.splitTestsOption.getChosenIndex() == 2, this.splitTestsOption.getChosenIndex() == 0, this.estimator, instance);
            }
    }
}
