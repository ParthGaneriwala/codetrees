private void jButtonAlgorithmActionPerformed(java.awt.event.ActionEvent evt) {
    String newTaskString;
    if (this.currentTask instanceof moa.tasks.EvaluateConceptDrift) {
        newTaskString = ClassOptionSelectionPanel.showSelectClassDialog(TaskManagerTabPanel.this, "Configure learner", ChangeDetectorLearner.class, this.initialString, null);
        if (newTaskString.equals(this.initialString) == true) {
            return;
        }
        this.initialString = newTaskString;
        try {
            this.detector = (ChangeDetectorLearner) ClassOption.cliStringToObject(newTaskString, ChangeDetectorLearner.class, null);
        } catch (Exception ex) {
            Logger.getLogger(TaskManagerTabPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    } else {
        newTaskString = ClassOptionSelectionPanel.showSelectClassDialog(TaskManagerTabPanel.this, "Configure learner", Learner.class, this.initialString, null);
        if (newTaskString.equals(this.initialString) == true) {
            return;
        }
        this.initialString = newTaskString;
        try {
            this.learner = (Classifier) ClassOption.cliStringToObject(newTaskString, Learner.class, null);
        } catch (Exception ex) {
            Logger.getLogger(TaskManagerTabPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    for (int i = 0; i < this.algoritmModel.getRowCount(); i++) {
        if (this.algoritmModel.getValueAt(i, 0).equals(newTaskString)) {
            JOptionPane.showMessageDialog(this, "The value exist", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
    }
    this.algoritmModel.addRow(new Object[] { newTaskString, newTaskString });
}
