public double[] getSplitPointSuggestions() {
    Set<Double> suggestedSplitValues = new TreeSet<Double>();
    double minValue = Double.POSITIVE_INFINITY;
    double maxValue = Double.NEGATIVE_INFINITY;
    for (int i = 0; i < this.attValDistPerClass.size(); i++) {
        GaussianEstimator estimator = this.attValDistPerClass.get(i);
        if (estimator != null) {
            if (this.minValueObservedPerClass.getValue(i) < minValue) {
                minValue = this.minValueObservedPerClass.getValue(i);
            }
            if (this.maxValueObservedPerClass.getValue(i) > maxValue) {
                maxValue = this.maxValueObservedPerClass.getValue(i);
            }
        }
    }
    if (minValue < Double.POSITIVE_INFINITY) {
        double range = maxValue - minValue;
        for (int i = 0; i < this.numBinsOption.getValue(); i++) {
            double splitValue = range / (this.numBinsOption.getValue() + 1.0) * (i + 1) + minValue;
            if ((splitValue > minValue) && (splitValue < maxValue)) {
                suggestedSplitValues.add(splitValue);
            }
        }
    }
    double[] suggestions = new double[suggestedSplitValues.size()];
    int i = 0;
    for (double suggestion : suggestedSplitValues) {
        suggestions[i++] = suggestion;
    }
    return suggestions;
}
