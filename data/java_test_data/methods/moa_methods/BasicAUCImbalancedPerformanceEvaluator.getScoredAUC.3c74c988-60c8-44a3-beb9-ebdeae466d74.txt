public double getScoredAUC() {
    double AOC = 0;
    double AUC = 0;
    double r = 0;
    double prevr = 0;
    double c = 0;
    double prevc = 0;
    double R_plus, R_minus;
    double lastPosScore = Double.MAX_VALUE;
    double lastNegScore = Double.MAX_VALUE;
    if (!this.calculateAuc) {
        return -1;
    }
    if (numPos == 0 || numNeg == 0) {
        return 1;
    }
    for (Score s : sortedScores) {
        if (s.isPositive) {
            if (s.value != lastPosScore) {
                prevc = c;
                lastPosScore = s.value;
            }
            c += s.value;
            if (s.value == lastNegScore) {
                // tie
                AOC += ((double) (r + prevr)) / 2.0;
            } else {
                AOC += r;
            }
        } else {
            if (s.value != lastNegScore) {
                prevr = r;
                lastNegScore = s.value;
            }
            r += s.value;
            if (s.value == lastPosScore) {
                // tie
                AUC += ((double) (c + prevc)) / 2.0;
            } else {
                AUC += c;
            }
        }
    }
    R_minus = (numPos * r - AOC) / (numPos * numNeg);
    R_plus = (AUC) / (numPos * numNeg);
    return R_plus - R_minus;
}
