public void updateWeights(Instance inst, double learningRatio) {
    // Normalize Instance
    double[] normalizedInstance = normalizedInstance(inst);
    // Compute the Normalized Prediction of Perceptron
    double normalizedPredict = prediction(normalizedInstance);
    double normalizedY = normalizeActualClassValue(inst);
    double sumWeights = 0.0;
    double delta = normalizedY - normalizedPredict;
    for (int j = 0; j < numericAttributesIndex.length; j++) {
        // int instAttIndex = modelAttIndexToInstanceAttIndex(numericAttributesIndex[j], inst);
        // if(inst.attribute(instAttIndex).isNumeric()) {
        this.weightAttribute[j] += learningRatio * delta * normalizedInstance[j] * inst.weight();
        sumWeights += Math.abs(this.weightAttribute[j]);
    // }
    }
    this.weightAttribute[numericAttributesIndex.length] += learningRatio * delta * inst.weight();
    sumWeights += Math.abs(this.weightAttribute[numericAttributesIndex.length]);
    if (sumWeights > numericAttributesIndex.length) {
        // Lasso regression
        for (int j = 0; j < numericAttributesIndex.length; j++) {
            // int instAttIndex = modelAttIndexToInstanceAttIndex(numericAttributesIndex[j], inst);
            // if(inst.attribute(instAttIndex).isNumeric()) {
            this.weightAttribute[j] = this.weightAttribute[j] / sumWeights;
        // }
        }
        this.weightAttribute[numericAttributesIndex.length] = this.weightAttribute[numericAttributesIndex.length] / sumWeights;
    }
// return denormalizedPrediction(normalizedPredict);
}
