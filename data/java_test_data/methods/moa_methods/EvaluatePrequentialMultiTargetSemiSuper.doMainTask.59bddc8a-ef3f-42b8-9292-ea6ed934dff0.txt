@Override
protected Object doMainTask(TaskMonitor monitor, ObjectRepository repository) {
    MultiTargetLearnerSemiSupervised learner = (MultiTargetLearnerSemiSupervised) getPreparedClassOption(this.learnerOption);
    ExampleStream stream = (ExampleStream) getPreparedClassOption(this.streamOption);
    LearningPerformanceEvaluator evaluator = (LearningPerformanceEvaluator) getPreparedClassOption(this.evaluatorOption);
    LearningCurve learningCurve = new LearningCurve("learning evaluation instances");
    // New for prequential methods
    if (evaluator instanceof WindowClassificationPerformanceEvaluator) {
        // ((WindowClassificationPerformanceEvaluator) evaluator).setWindowWidth(widthOption.getValue());
        if (widthOption.getValue() != 1000) {
            System.out.println("DEPRECATED! Use EvaluatePrequential -e (WindowClassificationPerformanceEvaluator -w " + widthOption.getValue() + ")");
            return learningCurve;
        }
    }
    if (evaluator instanceof EWMAClassificationPerformanceEvaluator) {
        // ((EWMAClassificationPerformanceEvaluator) evaluator).setalpha(alphaOption.getValue());
        if (alphaOption.getValue() != .01) {
            System.out.println("DEPRECATED! Use EvaluatePrequential -e (EWMAClassificationPerformanceEvaluator -a " + alphaOption.getValue() + ")");
            return learningCurve;
        }
    }
    if (evaluator instanceof FadingFactorClassificationPerformanceEvaluator) {
        // ((FadingFactorClassificationPerformanceEvaluator) evaluator).setalpha(alphaOption.getValue());
        if (alphaOption.getValue() != .01) {
            System.out.println("DEPRECATED! Use EvaluatePrequential -e (FadingFactorClassificationPerformanceEvaluator -a " + alphaOption.getValue() + ")");
            return learningCurve;
        }
    }
    // End New for prequential methods
    learner.setModelContext(stream.getHeader());
    int maxInstances = this.instanceLimitOption.getValue();
    long instancesProcessed = 0;
    int maxSeconds = this.timeLimitOption.getValue();
    int secondsElapsed = 0;
    monitor.setCurrentActivity("Evaluating learner...", -1.0);
    File dumpFile = this.dumpFileOption.getFile();
    PrintStream immediateResultStream = null;
    if (dumpFile != null) {
        try {
            if (dumpFile.exists()) {
                immediateResultStream = new PrintStream(new FileOutputStream(dumpFile, true), true);
            } else {
                immediateResultStream = new PrintStream(new FileOutputStream(dumpFile), true);
            }
        } catch (Exception ex) {
            throw new RuntimeException("Unable to open immediate result file: " + dumpFile, ex);
        }
    }
    // File for output predictions
    File outputPredictionFile = this.outputPredictionFileOption.getFile();
    PrintStream outputPredictionResultStream = null;
    if (outputPredictionFile != null) {
        try {
            if (outputPredictionFile.exists()) {
                outputPredictionResultStream = new PrintStream(new FileOutputStream(outputPredictionFile, true), true);
            } else {
                outputPredictionResultStream = new PrintStream(new FileOutputStream(outputPredictionFile), true);
            }
        } catch (Exception ex) {
            throw new RuntimeException("Unable to open prediction result file: " + outputPredictionFile, ex);
        }
    }
    boolean firstDump = true;
    boolean preciseCPUTiming = TimingUtils.enablePreciseTiming();
    long evaluateStartTime = TimingUtils.getNanoCPUTimeOfCurrentThread();
    long lastEvaluateStartTime = evaluateStartTime;
    double RAMHours = 0.0;
    // Examples scrambler
    Random randomGenerator1 = new Random(runSeed.getValue());
    // Labeled/Unlabeled selector
    Random randomGenerator2 = new Random(1);
    List<Double> slidingWindow = new LinkedList<Double>();
    // Compute stream size
    int StrmDtSz = 0;
    while (stream.hasMoreInstances() == true) {
        stream.nextInstance();
        StrmDtSz++;
    }
    Example[] streamData = new Example[StrmDtSz];
    int[] randIndex = new int[StrmDtSz];
    int i = 0;
    stream.restart();
    while (stream.hasMoreInstances()) {
        streamData[i] = stream.nextInstance();
        i++;
    }
    for (int ri = 0; ri < StrmDtSz; ri++) randIndex[ri] = ri;
    // the randomly selected index each time through the loop
    int randomIndex;
    // the value at nums[randomIndex] each time through the loop
    int randomValue;
    // Randomize order of examples
    if (runSeed.getValue() > 0) {
        for (int ri = 0; ri < randIndex.length; ++ri) {
            randomIndex = randomGenerator1.nextInt(randIndex.length);
            randomValue = randIndex[randomIndex];
            randIndex[randomIndex] = randIndex[ri];
            randIndex[ri] = randomValue;
        }
    }
    // TRAIN  initial Model
    double errorAllSum = 0;
    int examplesCounter = 0;
    Example trainInst = streamData[randIndex[0]];
    Example testInst = (Example) trainInst;
    Instance inst = (Instance) testInst.getData();
    while (examplesCounter < dbInitialModelPercentage.getValue() / 100 * StrmDtSz) {
        trainInst = streamData[randIndex[examplesCounter]];
        testInst = (Example) trainInst;
        inst = (Instance) testInst.getData();
        examplesCounter++;
        learner.trainOnInstance(trainInst);
        if (examplesCounter > 1) {
            Prediction trainPrediction = learner.getTrainingPrediction();
            double sumDenominator = 0;
            double sumNumerator = 0;
            for (int m = 0; m < inst.numOutputAttributes(); m++) {
                // sumNumerator+=Math.pow( inst.valueOutputAttribute(m) - learner.prediction.getVote(m,0) , 2 );
                sumNumerator += Math.pow(inst.valueOutputAttribute(m) - trainPrediction.getVote(m, 0), 2);
                sumDenominator += Math.pow(inst.valueOutputAttribute(m), 2);
            }
            errorAllSum += Math.sqrt(sumNumerator / sumDenominator);
            slidingWindow.add(Math.sqrt(sumNumerator / sumDenominator));
            if (slidingWindow.size() == slidingWindowSize.getValue() + 1)
                slidingWindow.remove(0);
        }
        if (examplesCounter % slidingWindowStep.getValue() == 0) {
            // System.out.format(" %.4f" + " ",(double)errorAllSum/(double)examplesCounter);
            double windowMean = 0;
            for (int j = 0; j < slidingWindow.size(); j++) windowMean += slidingWindow.get(j);
        // System.out.format(" %.4f" + "\n",windowMean/slidingWindow.size());
        }
    }
    double[] exampleOutputs = new double[inst.numOutputAttributes()];
    // TEST
    while (examplesCounter < StrmDtSz - 1) {
        trainInst = streamData[randIndex[examplesCounter]];
        testInst = (Example) trainInst;
        inst = (Instance) testInst.getData();
        Prediction prediction = learner.getPredictionForInstance(testInst);
        evaluator.addResult(testInst, prediction);
        // Labeled or unlabeled imposition
        if (randomGenerator2.nextDouble() <= unlabeledPercentage.getValue() / 100) {
            for (int m = 0; m < inst.numOutputAttributes(); m++) {
                // Double.NaN
                inst.setClassValue(m, Double.NEGATIVE_INFINITY);
            }
        }
        examplesCounter++;
        learner.trainOnInstance(trainInst);
        // MONITORING
        instancesProcessed++;
        if (instancesProcessed % this.sampleFrequencyOption.getValue() == 0) {
            // || stream.hasMoreInstances() == false
            long evaluateTime = TimingUtils.getNanoCPUTimeOfCurrentThread();
            double time = TimingUtils.nanoTimeToSeconds(evaluateTime - evaluateStartTime);
            double timeIncrement = TimingUtils.nanoTimeToSeconds(evaluateTime - lastEvaluateStartTime);
            // GBs
            double RAMHoursIncrement = learner.measureByteSize() / (1024.0 * 1024.0 * 1024.0);
            // Hours
            RAMHoursIncrement *= (timeIncrement / 3600.0);
            RAMHours += RAMHoursIncrement;
            lastEvaluateStartTime = evaluateTime;
            learningCurve.insertEntry(new LearningEvaluation(new Measurement[] { new Measurement("learning evaluation instances", instancesProcessed), new Measurement("evaluation time (" + (preciseCPUTiming ? "cpu " : "") + "seconds)", time), new Measurement("model cost (RAM-Hours)", RAMHours) }, evaluator, learner));
            if (immediateResultStream != null) {
                if (firstDump) {
                    immediateResultStream.println(learningCurve.headerToString());
                    firstDump = false;
                }
                immediateResultStream.println(learningCurve.entryToString(learningCurve.numEntries() - 1));
                immediateResultStream.flush();
            }
        }
        if (instancesProcessed % INSTANCES_BETWEEN_MONITOR_UPDATES == 0) {
            if (monitor.taskShouldAbort()) {
                return null;
            }
            long estimatedRemainingInstances = stream.estimatedRemainingInstances();
            if (maxInstances > 0) {
                long maxRemaining = maxInstances - instancesProcessed;
                if ((estimatedRemainingInstances < 0) || (maxRemaining < estimatedRemainingInstances)) {
                    estimatedRemainingInstances = maxRemaining;
                }
            }
            monitor.setCurrentActivityFractionComplete(estimatedRemainingInstances < 0 ? -1.0 : (double) instancesProcessed / (double) (instancesProcessed + estimatedRemainingInstances));
            if (monitor.resultPreviewRequested()) {
                monitor.setLatestResultPreview(learningCurve.copy());
            }
            secondsElapsed = (int) TimingUtils.nanoTimeToSeconds(TimingUtils.getNanoCPUTimeOfCurrentThread() - evaluateStartTime);
        }
    }
    // || stream.hasMoreInstances() == false
    long evaluateTime = TimingUtils.getNanoCPUTimeOfCurrentThread();
    double time = TimingUtils.nanoTimeToSeconds(evaluateTime - evaluateStartTime);
    double timeIncrement = TimingUtils.nanoTimeToSeconds(evaluateTime - lastEvaluateStartTime);
    // GBs
    double RAMHoursIncrement = learner.measureByteSize() / (1024.0 * 1024.0 * 1024.0);
    // Hours
    RAMHoursIncrement *= (timeIncrement / 3600.0);
    RAMHours += RAMHoursIncrement;
    lastEvaluateStartTime = evaluateTime;
    learningCurve.insertEntry(new LearningEvaluation(new Measurement[] { new Measurement("learning evaluation instances", instancesProcessed), new Measurement("evaluation time (" + (preciseCPUTiming ? "cpu " : "") + "seconds)", time), new Measurement("model cost (RAM-Hours)", RAMHours) }, evaluator, learner));
    if (immediateResultStream != null) {
        if (firstDump) {
            immediateResultStream.println(learningCurve.headerToString());
            firstDump = false;
        }
        immediateResultStream.println(learningCurve.entryToString(learningCurve.numEntries() - 1));
        immediateResultStream.flush();
    }
    StringBuilder sb = new StringBuilder();
    learner.getDescription(sb, 0);
    System.out.println(sb.toString());
    if (immediateResultStream != null) {
        immediateResultStream.close();
    }
    if (outputPredictionResultStream != null) {
        outputPredictionResultStream.close();
    }
    return learningCurve;
}
