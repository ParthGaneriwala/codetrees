public boolean isUseless(int i) {
    boolean removed = false;
    Iadem3Subtree subtree = this.alternativeTree.get(i);
    if (subtree.getTreeRoot() instanceof AdaptiveSplitNode) /**/
    {
        // change if it already has an alternative subtree
        AdaptiveSplitNode splitNode = ((AdaptiveSplitNode) subtree.getTreeRoot());
        int nMain = (int) this.estimator.getDelay(), nAlt = (int) subtree.getEstimador().getDelay();
        double errorMain = this.estimator.getEstimation(), errorAlt = subtree.getEstimador().getEstimation();
        double errorDifference = errorAlt - errorMain, absError = Math.abs(errorDifference);
        if (!removed && nMain > 0 && nAlt > 0) {
            double m = 1.0 / nMain + 1.0 / nAlt;
            double delta = 1e-4;
            double bound = Math.sqrt(m * Math.log(2.0 / delta) / 2.0);
            if (errorDifference > bound) {
                // alternative tree is too inaccurate
                this.alternativeTree.remove(i);
                removed = true;
            }
        }
        if (!removed) {
            InstanceConditionalTest condTest = splitNode.splitTest;
            if (condTest instanceof IademNominalAttributeBinaryTest && this.splitTest instanceof IademNominalAttributeBinaryTest) {
                IademNominalAttributeBinaryTest altTest = (IademNominalAttributeBinaryTest) condTest, mainTest = (IademNominalAttributeBinaryTest) this.splitTest;
                if (mainTest.getAttValue() == altTest.getAttValue() && mainTest.getAttsTestDependsOn()[0] == altTest.getAttsTestDependsOn()[0]) {
                    this.alternativeTree.remove(i);
                    removed = true;
                }
            } else if (condTest instanceof NominalAttributeMultiwayTest && this.splitTest instanceof NominalAttributeMultiwayTest) {
                NominalAttributeMultiwayTest altTest = (NominalAttributeMultiwayTest) condTest, mainTest = (NominalAttributeMultiwayTest) this.splitTest;
                if (mainTest.getAttsTestDependsOn()[0] == altTest.getAttsTestDependsOn()[0]) {
                    this.alternativeTree.remove(i);
                    removed = true;
                }
            } else if (condTest instanceof NumericAttributeBinaryTest && this.splitTest instanceof NumericAttributeBinaryTest) {
                NumericAttributeBinaryTest altTest = (NumericAttributeBinaryTest) condTest, mainTest = (NumericAttributeBinaryTest) this.splitTest;
                if (mainTest.getAttsTestDependsOn()[0] == altTest.getAttsTestDependsOn()[0] && mainTest.getSplitValue() == altTest.getSplitValue()) {
                    this.alternativeTree.remove(i);
                    removed = true;
                }
            }
        }
    }
    return removed;
}
