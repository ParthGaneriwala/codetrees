@Override
public SplitNode getNewSplitNode(long counter, Node parent, IademAttributeSplitSuggestion bestSplit, Instance instance) {
    AdaptiveSplitNode splitNode = new AdaptiveSplitNode((Iadem3) this.tree, parent, null, ((LeafNode) this.parent).getMajorityClassVotes(instance), bestSplit.splitTest, ((AdaptiveLeafNode) this.parent).estimator, (AdaptiveLeafNode) this.parent, ((Iadem3) this.tree).currentSplitState);
    Node[] children;
    if (bestSplit.splitTest instanceof NominalAttributeMultiwayTest) {
        children = new Node[instance.attribute(this.attIndex).numValues()];
        for (int i = 0; i < children.length; i++) {
            long tmpConter = 0;
            double[] newClassDist = new double[instance.attribute(instance.classIndex()).numValues()];
            Arrays.fill(newClassDist, 0);
            for (int j = 0; j < newClassDist.length; j++) {
                DoubleVector tmpClassDist = nominalAttClassObserver.get(i);
                double tmpAttClassCounter = tmpClassDist != null ? tmpClassDist.getValue(j) : 0.0;
                newClassDist[j] = tmpAttClassCounter;
                tmpConter += newClassDist[j];
            }
            children[i] = ((Iadem3) tree).newLeafNode(splitNode, counter, tmpConter, newClassDist, instance);
        }
    } else {
        // binary split
        children = new Node[2];
        IademNominalAttributeBinaryTest binarySplit = (IademNominalAttributeBinaryTest) bestSplit.splitTest;
        double[] newClassDist = new double[instance.attribute(instance.classIndex()).numValues()];
        double tmpCounter = 0;
        Arrays.fill(newClassDist, 0);
        DoubleVector classDist = nominalAttClassObserver.get(binarySplit.getAttValue());
        for (int i = 0; i < newClassDist.length; i++) {
            newClassDist[i] = classDist.getValue(i);
            tmpCounter += classDist.getValue(i);
        }
        children[0] = ((Iadem3) tree).newLeafNode(splitNode, counter, (int) tmpCounter, newClassDist, instance);
        // a la derecha...
        tmpCounter = this.classValueDist.sumOfValues() - tmpCounter;
        for (int i = 0; i < newClassDist.length; i++) {
            newClassDist[i] = this.classValueDist.getValue(i) - newClassDist[i];
        }
        children[1] = ((Iadem3) tree).newLeafNode(splitNode, counter, (int) tmpCounter, newClassDist, instance);
    }
    splitNode.setChildren(children);
    return splitNode;
}
