protected void computeClassDistBinaryTest(double[][][] classDistPerTestAndSplit_lower, double[][][] classDistPerTestAndSplit_upper) {
    int numberOfClasses = classDistPerTestAndSplit_lower[0][0].length;
    double estimator, bound;
    double leftTotal = this.classValueDist.sumOfValues();
    for (int currentAttIndex = 0; currentAttIndex < classDistPerTestAndSplit_lower.length; currentAttIndex++) {
        for (int j = 0; j < numberOfClasses; j++) {
            // compute probabilities in the left branch
            DoubleVector classCounter = nominalAttClassObserver.get(currentAttIndex);
            double attClassCounter = classCounter != null ? classCounter.getValue(j) : 0.0;
            if (attValueDist.getValue(currentAttIndex) != 0) {
                estimator = attClassCounter / attValueDist.getValue(currentAttIndex);
                bound = IademCommonProcedures.getIADEM_HoeffdingBound(estimator, attValueDist.getValue(currentAttIndex));
                classDistPerTestAndSplit_lower[currentAttIndex][0][j] = Math.max(0.0, estimator - bound);
                classDistPerTestAndSplit_upper[currentAttIndex][0][j] = Math.min(1.0, estimator + bound);
            } else {
                classDistPerTestAndSplit_lower[currentAttIndex][0][j] = 0.0;
                classDistPerTestAndSplit_upper[currentAttIndex][0][j] = 1.0;
            }
            // compute probabilities in the right branch
            attClassCounter = classValueDist.getValue(j) - attClassCounter;
            double rightTotal = leftTotal - attValueDist.getValue(currentAttIndex);
            if (rightTotal != 0) {
                estimator = attClassCounter / rightTotal;
                bound = IademCommonProcedures.getIADEM_HoeffdingBound(estimator, rightTotal);
                classDistPerTestAndSplit_lower[currentAttIndex][1][j] = Math.max(0.0, estimator - bound);
                classDistPerTestAndSplit_upper[currentAttIndex][1][j] = Math.min(1.0, estimator + bound);
            } else {
                classDistPerTestAndSplit_lower[currentAttIndex][1][j] = 0.0;
                classDistPerTestAndSplit_upper[currentAttIndex][1][j] = 1.0;
            }
        }
    }
}
