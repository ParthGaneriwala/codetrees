public Class<?>[] findSuitableClasses(Class<?> requiredType) {
    AutoExpandVector<Class<?>> finalClasses = new AutoExpandVector<Class<?>>();
    Class<?>[] classesFound = AutoClassDiscovery.findClassesOfType("moa", requiredType);
    for (Class<?> foundClass : classesFound) {
        // Skip this class if it doesn't meet the capabilities requirement
        if (requiredCapabilities != null && !requiredCapabilities.isMetBy(foundClass))
            continue;
        finalClasses.add(foundClass);
    }
    Class<?>[] tasksFound = AutoClassDiscovery.findClassesOfType("moa", Task.class);
    for (Class<?> foundTask : tasksFound) {
        try {
            Task task = (Task) foundTask.newInstance();
            if (requiredType.isAssignableFrom(task.getTaskResultType())) {
                // Skip this task if its result type doesn't meet the capabilities requirement
                if (requiredCapabilities != null && !requiredCapabilities.isMetBy(task.getTaskResultType()))
                    continue;
                finalClasses.add(foundTask);
            }
        } catch (Exception e) {
        // ignore
        }
    }
    return finalClasses.toArray(new Class<?>[finalClasses.size()]);
}
