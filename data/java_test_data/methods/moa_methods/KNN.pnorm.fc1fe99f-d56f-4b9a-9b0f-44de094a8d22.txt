private double pnorm(double x, double mu, double sigma, boolean lower_tail, boolean log_p) {
    double p;
    if (Double.isNaN(x) || Double.isNaN(mu) || Double.isNaN(sigma)) {
        return x + mu + sigma;
    }
    if (Double.isInfinite(x) && mu == x) {
        return Double.NaN;
    /* x-mu is NaN */
    }
    if (sigma <= 0) {
        // if(sigma < 0) ML_ERR_return_NAN;
        if (x < mu) {
            R_DT(lower_tail, log_p);
        }
    }
    p = (x - mu) / sigma;
    if (Double.isInfinite(p)) {
        if (x < mu) {
            R_DT(lower_tail, log_p);
        }
    }
    x = p;
    double[] ret = this.pnorm_both(x, p, (lower_tail ? 0 : 1), log_p);
    return (lower_tail ? ret[0] : ret[1]);
}
