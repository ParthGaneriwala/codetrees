public static Clustering kMeans(Cluster[] centers, List<? extends Cluster> data) {
    int k = centers.length;
    int dimensions = centers[0].getCenter().length;
    ArrayList<ArrayList<Cluster>> clustering = new ArrayList<ArrayList<Cluster>>();
    for (int i = 0; i < k; i++) {
        clustering.add(new ArrayList<Cluster>());
    }
    int repetitions = 100;
    while (repetitions-- >= 0) {
        // Assign points to clusters
        for (Cluster point : data) {
            double minDistance = distance(point.getCenter(), centers[0].getCenter());
            int closestCluster = 0;
            for (int i = 1; i < k; i++) {
                double distance = distance(point.getCenter(), centers[i].getCenter());
                if (distance < minDistance) {
                    closestCluster = i;
                    minDistance = distance;
                }
            }
            clustering.get(closestCluster).add(point);
        }
        // Calculate new centers and clear clustering lists
        SphereCluster[] newCenters = new SphereCluster[centers.length];
        for (int i = 0; i < k; i++) {
            newCenters[i] = calculateCenter(clustering.get(i), dimensions);
            clustering.get(i).clear();
        }
        centers = newCenters;
    }
    return new Clustering(centers);
}
