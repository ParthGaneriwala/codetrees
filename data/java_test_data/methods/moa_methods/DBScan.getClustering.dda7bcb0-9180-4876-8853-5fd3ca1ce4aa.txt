@Override
public Clustering getClustering(Clustering microClusters) {
    if (microClusters != null && microClusters.size() != 0) {
        Vector<DenseMicroCluster> dbmc = new Vector<DenseMicroCluster>();
        for (Cluster c : microClusters.getClustering()) {
            CFCluster cf = null;
            if (c instanceof CFCluster) {
                cf = (CFCluster) c;
                dbmc.add(new DenseMicroCluster(cf));
            } else
                throw new RuntimeException();
        }
        ArrayList<ArrayList<DenseMicroCluster>> clusters = new ArrayList<ArrayList<DenseMicroCluster>>();
        for (DenseMicroCluster dmc : dbmc) {
            if (!dmc.isVisited()) {
                dmc.setVisited();
                List<DenseMicroCluster> neighbours = getNeighbourhood(dmc, dbmc);
                if (neighbours.size() >= mMinPts) {
                    ArrayList<DenseMicroCluster> cluster = expandCluster(dmc, neighbours, new ArrayList<DenseMicroCluster>(), dbmc);
                    clusters.add(cluster);
                }
            }
        }
        // ** create big microclusters,
        // CFCluster[] res = new CFCluster[clusters.size()];
        // int clusterPos = 0;
        // for (ArrayList<DenseMicroCluster> cluster : clusters) {
        // if (cluster.size() != 0) {
        // CFCluster temp = (CFCluster) (cluster.get(0).mCluster.copy());
        // res[clusterPos] = temp;
        // for (int i = 1; i < cluster.size(); i++) {
        // res[clusterPos].add(cluster.get(i).mCluster);
        // }
        // clusterPos++;
        // }
        // }
        // Clustering result = new Clustering(res);
        // **
        CFCluster[] res = new CFCluster[clusters.size()];
        int clusterPos = 0;
        for (ArrayList<DenseMicroCluster> cluster : clusters) {
            if (cluster.size() != 0) {
                CFCluster temp = new NonConvexCluster(cluster.get(0).getCFCluster(), Convert2microclusterList(cluster));
                res[clusterPos] = temp;
                for (int i = 1; i < cluster.size(); i++) {
                    res[clusterPos].add(cluster.get(i).getCFCluster());
                }
                clusterPos++;
            }
        }
        // //// count Noise
        int noise = 0;
        for (DenseMicroCluster c : dbmc) {
            if (!c.isClustered()) {
                noise++;
            }
        }
        System.out.println("microclusters which are not clustered:: " + noise);
        Clustering result = new Clustering(res);
        setClusterIDs(result);
        // }
        return result;
    }
    return new Clustering();
}
