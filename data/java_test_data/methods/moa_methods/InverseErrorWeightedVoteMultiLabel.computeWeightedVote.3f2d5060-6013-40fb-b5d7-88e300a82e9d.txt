@Override
public Prediction computeWeightedVote() {
    int n = votes.size();
    if (n > 0) {
        int numOutputs = outputAttributesCount.length;
        weights = new double[n][numOutputs];
        weightedVote = new MultiLabelPrediction(numOutputs);
        double[] sumError = new double[numOutputs];
        // For each output attribute
        for (int o = 0; o < numOutputs; o++) {
            for (int i = 0; i < n; i++) {
                if (votes.get(i).hasVotesForAttribute(o) && errors.get(i) != null) {
                    weights[i][o] = 1.0 / (errors.get(i)[o] + EPS);
                    sumError[o] += weights[i][o];
                }
            }
            // For each vote
            for (int i = 0; i < n; i++) {
                int numClasses = votes.get(i).numClasses(o);
                if (votes.get(i).hasVotesForAttribute(o)) {
                    if (sumError[o] > 0)
                        weights[i][o] /= sumError[o];
                    else
                        weights[i][o] = 1.0 / outputAttributesCount[o];
                }
                // For each class
                for (int j = 0; j < numClasses; j++) {
                    weightedVote.setVote(o, j, weightedVote.getVote(o, j) + votes.get(i).getVote(o, j) * weights[i][o]);
                }
            }
        }
    }
    return weightedVote;
}
