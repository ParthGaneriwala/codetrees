private DataSet[] splitDataSetUsingMeanShift(DataSet dataSet) {
    // calculate cluster features
    DataObject[] dataObjects = dataSet.getDataObjectArray();
    int N = dataSet.size();
    int dim = dataObjects[0].getFeatures().length;
    double[] tempFeatures;
    double[] LS = new double[dim];
    double[] SS = new double[dim];
    for (int i = 0; i < dataObjects.length; i++) {
        tempFeatures = dataObjects[i].getFeatures();
        for (int j = 0; j < dim; j++) {
            LS[j] += tempFeatures[j];
            SS[j] += (tempFeatures[j] * tempFeatures[j]);
        }
    }
    // calculate mean and variance per dimension
    double[] sigmaSquared = new double[dim];
    double[] mean = new double[dim];
    for (int i = 0; i < dim; i++) {
        mean[i] = LS[i] / N;
        sigmaSquared[i] = (SS[i] / N) - ((LS[i] * LS[i]) / (N * N));
        if (sigmaSquared[i] <= 0.0) {
            sigmaSquared[i] = 0.1;
        }
    }
    // calculate shifted means
    double[] mean1 = new double[dim];
    double[] mean2 = new double[dim];
    for (int i = 0; i < dim; i++) {
        mean1[i] = mean[i] + Math.sqrt(sigmaSquared[i]);
        mean2[i] = mean[i] - Math.sqrt(sigmaSquared[i]);
    }
    // assign objects to closest mean in two data set
    DataSet[] subDataSets = new DataSet[2];
    try {
        subDataSets[0] = new DataSet(dataSet.getNrOfDimensions());
        subDataSets[1] = new DataSet(dataSet.getNrOfDimensions());
        double dist1, dist2;
        for (int i = 0; i < dataObjects.length; i++) {
            dist1 = euclideanDistance(dataObjects[i].getFeatures(), mean1);
            dist2 = euclideanDistance(dataObjects[i].getFeatures(), mean2);
            if (dist1 < dist2)
                subDataSets[0].addObject(dataObjects[i]);
            else
                subDataSets[1].addObject(dataObjects[i]);
        }
    } catch (Exception e) {
        e.printStackTrace();
    }
    // if one data set is empty return only one
    if (subDataSets[0].size() == 0) {
        DataSet tmpDS = subDataSets[1];
        subDataSets = new DataSet[1];
        subDataSets[0] = tmpDS;
    } else if (subDataSets[1].size() == 0) {
        DataSet tmpDS = subDataSets[0];
        subDataSets = new DataSet[1];
        subDataSets[0] = tmpDS;
    }
    return subDataSets;
}
