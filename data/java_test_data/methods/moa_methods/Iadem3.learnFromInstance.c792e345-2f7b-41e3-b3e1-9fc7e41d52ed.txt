@Override
public Node learnFromInstance(Instance instance) {
    try {
        double thisError = this.estimator.getEstimation(), thisSize = this.estimator.getDelay();
        double leafError = this.leaf.estimator.getEstimation(), leafSize = this.leaf.estimator.getDelay();
        double m = 1.0 / thisSize + 1.0 / leafSize;
        double delta = 0.0001;
        double bound = Math.sqrt(m * Math.log(2.0 / delta) / 2.0);
        double diff = thisError - leafError;
        if (diff > bound && thisSize > 600 && leafSize > 600) /**/
        {
            prune();
            return this.leaf;
        } else if (-diff > bound) {
            this.leaf.restartVariablesAtDrift();
            this.leaf.estimator = (AbstractChangeDetector) this.leaf.estimator.copy();
        }
        Node node;
        boolean rightPredicted = ((Iadem3) this.tree).lastPredictionInLeaf == instance.classValue();
        node = checkAlternativeSubtrees(rightPredicted, instance);
        if (node == null) {
            // no subtree change
            for (Iadem3Subtree subtree : this.alternativeTree) {
                try {
                    subtree.learnFromInstance(instance);
                    subtree.incrNumberOfInstancesProcessed();
                } catch (IademException ex) {
                    Logger.getLogger(AdaptiveSplitNode.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            this.leaf.learnFromInstance(instance);
            return super.learnFromInstance(instance);
        } else {
            // subtree change
            return node.learnFromInstance(instance);
        }
    } catch (IademException ex) {
        Logger.getLogger(AdaptiveSplitNode.class.getName()).log(Level.SEVERE, null, ex);
    }
    return null;
}
