public void train() {
    userFeature.clear();
    itemFeature.clear();
    int n = data.getNumRatings();
    Iterator<Integer> it = data.getUsers().iterator();
    while (it.hasNext()) {
        float[] feats = new float[nFeatures];
        resetFeatures(feats, true);
        userFeature.put(it.next(), feats);
    }
    it = data.getItems().iterator();
    while (it.hasNext()) {
        float[] feats = new float[nFeatures];
        resetFeatures(feats, false);
        itemFeature.put(it.next(), feats);
    }
    int exit = 0;
    double lastRMSE = 1e20;
    int count = 0;
    int trainDiv = Math.max(20, n / 1000000);
    ArrayList<Rating> ratTest = new ArrayList<Rating>(n / trainDiv);
    do {
        long start = System.currentTimeMillis();
        Iterator<Rating> ratIt = data.ratingIterator();
        int idx = 0;
        while (ratIt.hasNext()) {
            Rating rat = ratIt.next();
            if (idx % trainDiv == 0) {
                if (count == 0)
                    ratTest.add(rat);
            } else {
                int userID = rat.userID;
                int itemID = rat.itemID;
                double rating = rat.rating;
                float[] userFeats = userFeature.get(userID);
                float[] itemFeats = itemFeature.get(itemID);
                double pred = predictRating(userFeats, itemFeats);
                double err = rating - pred;
                itemFeats[0] += lRate * (err * userFeats[0] - rFactor * itemFeats[0]);
                userFeats[1] += lRate * (err * itemFeats[1] - rFactor * userFeats[1]);
                for (int j = 2; j < nFeatures; ++j) {
                    double uv = userFeats[j];
                    userFeats[j] += lRate * (err * itemFeats[j] - rFactor * userFeats[j]);
                    itemFeats[j] += lRate * (err * uv - rFactor * itemFeats[j]);
                }
            }
            ++idx;
        }
        int nTest = ratTest.size();
        double sum = 0;
        for (int i = 0; i < nTest; ++i) {
            int userID = ratTest.get(i).userID;
            int itemID = ratTest.get(i).itemID;
            double rating = ratTest.get(i).rating;
            double pred = predictRating(userID, itemID);
            sum += Math.pow(rating - pred, 2);
        }
        double curRMSE = Math.sqrt(sum / (double) nTest);
        System.out.println(curRMSE + " " + (System.currentTimeMillis() - start) / 1000);
        if (curRMSE + 0.0001 >= lastRMSE) {
            ++exit;
        }
        lastRMSE = curRMSE;
        ++count;
    } while (exit < 1);
}
