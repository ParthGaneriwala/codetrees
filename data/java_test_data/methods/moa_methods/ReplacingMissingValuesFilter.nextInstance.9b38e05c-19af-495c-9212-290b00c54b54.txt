@Override
public InstanceExample nextInstance() {
    Instance inst = (Instance) ((Instance) this.inputStream.nextInstance().getData()).copy();
    // Initialization
    if (numAttributes < 0) {
        numAttributes = inst.numAttributes();
        columnsStatistics = new double[numAttributes];
        numberOfSamples = new long[numAttributes];
        lastNominalValues = new double[numAttributes];
        for (int i = 0; i < numAttributes; i++) {
            lastNominalValues[i] = -1;
        }
        frequencies = new HashMap[numAttributes];
        for (int i = 0; i < inst.numAttributes(); i++) {
            if (inst.attribute(i).isNominal())
                frequencies[i] = new HashMap<Double, Integer>();
        }
        numericalSelectedStrategy = this.numericReplacementStrategyOption.getChosenIndex();
        nominalSelectedStrategy = this.nominalReplacementStrategyOption.getChosenIndex();
    }
    for (int i = 0; i < numAttributes; i++) {
        // ---- Numerical values ----
        if (inst.attribute(i).isNumeric()) {
            // Handle missing value
            if (inst.isMissing(i)) {
                switch(numericalSelectedStrategy) {
                    case // NOTHING
                    0:
                        break;
                    // LAST KNOWN VALUE
                    case 1:
                    // MEAN
                    case 2:
                    // MAX
                    case 3:
                    case // MIN
                    4:
                        inst.setValue(i, columnsStatistics[i]);
                        break;
                    case // CONSTANT
                    5:
                        inst.setValue(i, numericalConstantValueOption.getValue());
                        break;
                    default:
                        continue;
                }
            } else // Update statistics with non-missing values
            {
                switch(numericalSelectedStrategy) {
                    case // LAST KNOWN VALUE
                    1:
                        columnsStatistics[i] = inst.value(i);
                        break;
                    case // MEAN
                    2:
                        numberOfSamples[i]++;
                        columnsStatistics[i] = columnsStatistics[i] + (inst.value(i) - columnsStatistics[i]) / numberOfSamples[i];
                        break;
                    case // MAX
                    3:
                        columnsStatistics[i] = columnsStatistics[i] < inst.value(i) ? inst.value(i) : columnsStatistics[i];
                        break;
                    case // MIN
                    4:
                        columnsStatistics[i] = columnsStatistics[i] > inst.value(i) ? inst.value(i) : columnsStatistics[i];
                        break;
                    default:
                        continue;
                }
            }
        } else // ---- Nominal values ----
        if (inst.attribute(i).isNominal()) {
            // Handle missing value
            if (inst.isMissing(i)) {
                switch(nominalSelectedStrategy) {
                    case // NOTHING
                    0:
                        break;
                    case // LAST KNOWN VALUE
                    1:
                        if (lastNominalValues[i] != -1) {
                            // null){
                            inst.setValue(i, lastNominalValues[i]);
                        }
                        break;
                    case // MODE
                    2:
                        if (!frequencies[i].isEmpty()) {
                            // Sort the map to get the most frequent value
                            Map<Double, Integer> sortedMap = MapUtil.sortByValue(frequencies[i]);
                            inst.setValue(i, sortedMap.entrySet().iterator().next().getKey());
                        }
                        break;
                    default:
                        continue;
                }
            } else // Update statistics with non-missing values
            {
                switch(nominalSelectedStrategy) {
                    case // LAST KNOWN VALUE
                    1:
                        lastNominalValues[i] = inst.value(i);
                        break;
                    case // MODE
                    2:
                        Integer previousCounter = frequencies[i].get(inst.value(i));
                        if (previousCounter == null)
                            previousCounter = 0;
                        frequencies[i].put(inst.value(i), ++previousCounter);
                        break;
                    default:
                        continue;
                }
            }
        }
    }
    return new InstanceExample(inst);
}
