public void avgPerformance() {
    mean = new double[datasets.size()][algoritmos.size()];
    /*Compute the average performance per algorithm for each data set*/
    for (i = 0; i < datasets.size(); i++) {
        for (j = 0; j < algoritmos.size(); j++) {
            mean[i][j] = ((Double) ((ArrayList) datos.get(j)).get(i));
        }
    }
    /*We use the pareja structure to compute and order rankings*/
    orden = new Pareja[datasets.size()][algoritmos.size()];
    for (i = 0; i < datasets.size(); i++) {
        for (j = 0; j < algoritmos.size(); j++) {
            orden[i][j] = new Pareja(j, mean[i][j]);
        }
        Arrays.sort(orden[i]);
    }
    /*building of the rankings table per algorithms and data sets*/
    rank = new Pareja[datasets.size()][algoritmos.size()];
    posicion = 0;
    for (i = 0; i < datasets.size(); i++) {
        for (j = 0; j < algoritmos.size(); j++) {
            encontrado = false;
            for (k = 0; k < algoritmos.size() && !encontrado; k++) {
                if (orden[i][k].indice == j) {
                    encontrado = true;
                    posicion = k + 1;
                }
            }
            rank[i][j] = new Pareja(posicion, orden[i][posicion - 1].valor);
        }
    }
    /*In the case of having the same performance, the rankings are equal*/
    for (i = 0; i < datasets.size(); i++) {
        visto = new boolean[algoritmos.size()];
        porVisitar = new ArrayList();
        Arrays.fill(visto, false);
        for (j = 0; j < algoritmos.size(); j++) {
            porVisitar.clear();
            sum = rank[i][j].indice;
            visto[j] = true;
            ig = 1;
            for (k = j + 1; k < algoritmos.size(); k++) {
                if (rank[i][j].valor == rank[i][k].valor && !visto[k]) {
                    sum += rank[i][k].indice;
                    ig++;
                    porVisitar.add(new Integer(k));
                    visto[k] = true;
                }
            }
            sum /= (double) ig;
            rank[i][j].indice = sum;
            for (k = 0; k < porVisitar.size(); k++) {
                rank[i][((Integer) porVisitar.get(k))].indice = sum;
            }
        }
    }
    avgRankingPerAlgorithm();
}
