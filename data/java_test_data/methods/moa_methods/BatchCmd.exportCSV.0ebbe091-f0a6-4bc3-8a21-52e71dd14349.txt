public static void exportCSV(String filepath, ArrayList<ClusterEvent> clusterEvents, MeasureCollection[] measures, int horizon) {
    PrintWriter out = null;
    try {
        // Prepare an output file
        if (!filepath.endsWith(".csv")) {
            filepath += ".csv";
        }
        out = new PrintWriter(new BufferedWriter(new FileWriter(filepath)));
        String delimiter = ";";
        // Header
        int numValues = 0;
        out.write("Nr" + delimiter);
        out.write("Event" + delimiter);
        for (int m = 0; m < 1; m++) {
            // TODO: Multiple group of measures
            for (int i = 0; i < measures.length; i++) {
                for (int j = 0; j < measures[i].getNumMeasures(); j++) {
                    if (measures[i].isEnabled(j)) {
                        out.write(measures[i].getName(j) + delimiter);
                        numValues = measures[i].getNumberOfValues(j);
                    }
                }
            }
        }
        out.write("\n");
        // Rows
        Iterator<ClusterEvent> eventIt = null;
        ClusterEvent event = null;
        if (clusterEvents != null) {
            if (clusterEvents.size() > 0) {
                eventIt = clusterEvents.iterator();
                event = eventIt.next();
            }
        }
        for (int v = 0; v < numValues; v++) {
            // Nr
            out.write(v + delimiter);
            // Events
            if (event != null && event.getTimestamp() <= ((v + 1) * horizon)) {
                out.write(event.getType() + delimiter);
                if (eventIt != null && eventIt.hasNext()) {
                    event = eventIt.next();
                } else {
                    event = null;
                }
            } else {
                out.write(delimiter);
            }
            // Values
            for (int m = 0; m < 1; m++) {
                // TODO: Multiple group of measures
                for (int i = 0; i < measures.length; i++) {
                    for (int j = 0; j < measures[i].getNumMeasures(); j++) {
                        if (measures[i].isEnabled(j)) {
                            out.write(measures[i].getValue(j, v) + delimiter);
                        }
                    }
                }
            }
            out.write("\n");
        }
        out.close();
    } catch (IOException ex) {
        Logger.getLogger(RunVisualizer.class.getName()).log(Level.SEVERE, null, ex);
    } finally {
        out.close();
    }
}
