public int compare(FoundNode fn1, FoundNode fn2) {
    if (HoeffdingOptionTree.this.memoryStrategyOption.getValue() == 0) {
        // strategy 1 - every leaf treated equal
        return Double.compare(fn1.node.calculatePromise(), fn2.node.calculatePromise());
    } else if (HoeffdingOptionTree.this.memoryStrategyOption.getValue() == 1) {
        // strategy 2 - internal leaves penalised
        double p1 = fn1.node.calculatePromise();
        if (fn1.parentBranch == -999) {
            p1 /= fn1.parent.getHeadOptionCount();
        }
        double p2 = fn2.node.calculatePromise();
        if (fn2.parentBranch == -999) {
            p1 /= fn2.parent.getHeadOptionCount();
        }
        return Double.compare(p1, p2);
    } else {
        // strategy 3 - all true leaves beat internal leaves
        if (fn1.parentBranch == -999) {
            if (fn2.parentBranch == -999) {
                return Double.compare(fn1.node.calculatePromise(), fn2.node.calculatePromise());
            }
            // fn1 < fn2
            return -1;
        }
        if (fn2.parentBranch == -999) {
            // fn1 > fn2
            return 1;
        }
        return Double.compare(fn1.node.calculatePromise(), fn2.node.calculatePromise());
    }
}
