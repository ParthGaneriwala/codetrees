@Override
public Prediction getPredictionForInstance(MultiLabelInstance inst) {
    Prediction vote = null;
    // ErrorWeightedVote combinedVote = (ErrorWeightedVote)((ErrorWeightedVote) votingTypeOption.getPreMaterializedObject()).copy();
    ErrorWeightedVoteMultiLabel combinedVote = (ErrorWeightedVoteMultiLabel) ((ErrorWeightedVoteMultiLabel) getPreparedClassOption(this.votingFunctionOption)).copy();
    StringBuilder sb = null;
    if (VerbosityOption.getValue() > 1)
        sb = new StringBuilder();
    for (int i = 0; i < this.ensemble.length; i++) {
        // transformInstance method visibility changed from private to protected in RandomRules
        ErrorWeightedVoteMultiLabel v = ((AMRulesMultiLabelLearner) this.ensemble[i]).getVotes(inst);
        if (VerbosityOption.getValue() > 1)
            sb.append(v.getPrediction() + ", " + " E: " + v.getWeightedError() + " ");
        /*if (!this.isRegression){
					v.normalize();
			}*/
        Prediction p = v.getPrediction();
        if (p != null) {
            if (this.votingTypeOption.getChosenIndex() == 0) {
                // Overall error estimation
                combinedVote.addVote(p, errorMeasurer[i].getCurrentErrors());
            } else
                // Error estimation over the rules that cover the example
                combinedVote.addVote(p, v.getOutputAttributesErrors());
        }
    }
    vote = combinedVote.computeWeightedVote();
    if (VerbosityOption.getValue() > 1) {
        sb.append(vote + ", ").append(inst.classValue());
        System.out.println(sb.toString());
    }
    return vote;
}
