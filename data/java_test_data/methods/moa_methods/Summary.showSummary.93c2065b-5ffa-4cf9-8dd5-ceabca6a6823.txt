public SummaryTable[] showSummary() {
    int cont = 0;
    int algorithmSize = this.streams.get(0).algorithm.size();
    int streamSize = this.streams.size();
    int measureSize = this.streams.get(0).algorithm.get(0).measures.size();
    summary = new SummaryTable[measureSize];
    while (cont != measureSize) {
        summary[cont] = new SummaryTable();
        summary[cont].measureName = this.streams.get(0).algorithm.get(0).measures.get(cont).getName();
        summary[cont].algNames = new String[algorithmSize + 1];
        summary[cont].algNames[0] = "Algorithm";
        summary[cont].value = new Object[streamSize][algorithmSize + 1];
        for (int i = 0; i < algorithmSize; i++) {
            summary[cont].algNames[i + 1] = this.streams.get(0).algorithm.get(i).name;
        }
        for (int i = 0; i < streamSize; i++) {
            List<Algorithm> alg = this.streams.get(i).algorithm;
            summary[cont].value[i][0] = this.streams.get(i).name;
            for (int j = 0; j < algorithmSize; j++) {
                if (alg.get(j).measures.get(cont).isType()) {
                    summary[cont].value[i][j + 1] = Algorithm.format(alg.get(j).measures.get(cont).getValue()) + "Â±" + Algorithm.format(alg.get(j).measures.get(cont).getStd());
                } else {
                    summary[cont].value[i][j + 1] = Algorithm.format1(alg.get(j).measures.get(cont).getValue());
                }
            }
        }
        cont++;
    }
    return summary;
}
