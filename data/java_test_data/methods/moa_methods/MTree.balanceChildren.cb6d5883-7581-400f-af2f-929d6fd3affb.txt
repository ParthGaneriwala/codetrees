private Node balanceChildren(Node theChild) {
    // Tries to find anotherChild which can donate a grand-child to theChild.
    Node nearestDonor = null;
    double distanceNearestDonor = Double.POSITIVE_INFINITY;
    Node nearestMergeCandidate = null;
    double distanceNearestMergeCandidate = Double.POSITIVE_INFINITY;
    for (IndexItem child : thisNode.children.values()) {
        @SuppressWarnings("unchecked") Node anotherChild = (Node) child;
        if (anotherChild == theChild)
            continue;
        double distance = thisNode.mtree().distanceFunction.calculate(theChild.data, anotherChild.data);
        if (anotherChild.children.size() > anotherChild.getMinCapacity()) {
            if (distance < distanceNearestDonor) {
                distanceNearestDonor = distance;
                nearestDonor = anotherChild;
            }
        } else {
            if (distance < distanceNearestMergeCandidate) {
                distanceNearestMergeCandidate = distance;
                nearestMergeCandidate = anotherChild;
            }
        }
    }
    if (nearestDonor == null) {
        // Merge
        for (IndexItem grandchild : theChild.children.values()) {
            if (nearestMergeCandidate != null) {
                // ### added by mits
                double distance = thisNode.mtree().distanceFunction.calculate(grandchild.data, nearestMergeCandidate.data);
                nearestMergeCandidate.addChild(grandchild, distance);
            }
        }
        IndexItem removed = thisNode.children.remove(theChild.data);
        assert removed != null;
        return nearestMergeCandidate;
    } else {
        // Donate
        // Look for the nearest grandchild
        IndexItem nearestGrandchild = null;
        double nearestGrandchildDistance = Double.POSITIVE_INFINITY;
        for (IndexItem grandchild : nearestDonor.children.values()) {
            double distance = thisNode.mtree().distanceFunction.calculate(grandchild.data, theChild.data);
            if (distance < nearestGrandchildDistance) {
                nearestGrandchildDistance = distance;
                nearestGrandchild = grandchild;
            }
        }
        IndexItem ii = nearestDonor.children.remove(nearestGrandchild.data);
        assert ii != null;
        theChild.addChild(nearestGrandchild, nearestGrandchildDistance);
        return theChild;
    }
}
