@Override
protected Object doMainTask(TaskMonitor monitor, ObjectRepository repository) {
    Learner learner = (Learner) getPreparedClassOption(this.learnerOption);
    ExampleStream stream = (ExampleStream) getPreparedClassOption(this.streamOption);
    LearningPerformanceEvaluator evaluator = (LearningPerformanceEvaluator) getPreparedClassOption(this.evaluatorOption);
    learner.setModelContext(stream.getHeader());
    int maxInstances = this.instanceLimitOption.getValue();
    int chunkSize = this.chunkSizeOption.getValue();
    long instancesProcessed = 0;
    int maxSeconds = this.timeLimitOption.getValue();
    int secondsElapsed = 0;
    monitor.setCurrentActivity("Evaluating learner...", -1.0);
    LearningCurve learningCurve = new LearningCurve("learning evaluation instances");
    File dumpFile = this.dumpFileOption.getFile();
    PrintStream immediateResultStream = null;
    if (dumpFile != null) {
        try {
            if (dumpFile.exists()) {
                immediateResultStream = new PrintStream(new FileOutputStream(dumpFile, true), true);
            } else {
                immediateResultStream = new PrintStream(new FileOutputStream(dumpFile), true);
            }
        } catch (Exception ex) {
            throw new RuntimeException("Unable to open immediate result file: " + dumpFile, ex);
        }
    }
    boolean firstDump = true;
    boolean firstChunk = true;
    boolean preciseCPUTiming = TimingUtils.enablePreciseTiming();
    long evaluateStartTime = TimingUtils.getNanoCPUTimeOfCurrentThread();
    long sampleTestTime = 0, sampleTrainTime = 0;
    double RAMHours = 0.0;
    while (stream.hasMoreInstances() && ((maxInstances < 0) || (instancesProcessed < maxInstances)) && ((maxSeconds < 0) || (secondsElapsed < maxSeconds))) {
        Instances chunkInstances = new Instances(stream.getHeader(), chunkSize);
        while (stream.hasMoreInstances() && chunkInstances.numInstances() < chunkSize) {
            chunkInstances.add((Instance) stream.nextInstance().getData());
            if (chunkInstances.numInstances() % INSTANCES_BETWEEN_MONITOR_UPDATES == 0) {
                if (monitor.taskShouldAbort()) {
                    return null;
                }
                long estimatedRemainingInstances = stream.estimatedRemainingInstances();
                if (maxInstances > 0) {
                    long maxRemaining = maxInstances - instancesProcessed;
                    if ((estimatedRemainingInstances < 0) || (maxRemaining < estimatedRemainingInstances)) {
                        estimatedRemainingInstances = maxRemaining;
                    }
                }
                monitor.setCurrentActivityFractionComplete((double) instancesProcessed / (double) (instancesProcessed + estimatedRemainingInstances));
            }
        }
        // //Testing
        long testStartTime = TimingUtils.getNanoCPUTimeOfCurrentThread();
        if (!firstChunk) {
            for (int i = 0; i < chunkInstances.numInstances(); i++) {
                Example testInst = new InstanceExample((Instance) chunkInstances.instance(i));
                // testInst.setClassMissing();
                double[] prediction = learner.getVotesForInstance(testInst);
                evaluator.addResult(testInst, prediction);
            }
        } else {
            firstChunk = false;
        }
        sampleTestTime += TimingUtils.getNanoCPUTimeOfCurrentThread() - testStartTime;
        // //Training
        long trainStartTime = TimingUtils.getNanoCPUTimeOfCurrentThread();
        for (int i = 0; i < chunkInstances.numInstances(); i++) {
            learner.trainOnInstance(new InstanceExample(chunkInstances.instance(i)));
            instancesProcessed++;
        }
        sampleTrainTime += TimingUtils.getNanoCPUTimeOfCurrentThread() - trainStartTime;
        // //Result output
        if (instancesProcessed % this.sampleFrequencyOption.getValue() == 0) {
            // GBs
            double RAMHoursIncrement = learner.measureByteSize() / (1024.0 * 1024.0 * 1024.0);
            // Hours
            RAMHoursIncrement *= (TimingUtils.nanoTimeToSeconds(sampleTrainTime + sampleTestTime) / 3600.0);
            RAMHours += RAMHoursIncrement;
            double avgTrainTime = TimingUtils.nanoTimeToSeconds(sampleTrainTime) / ((double) this.sampleFrequencyOption.getValue() / chunkInstances.numInstances());
            double avgTestTime = TimingUtils.nanoTimeToSeconds(sampleTestTime) / ((double) this.sampleFrequencyOption.getValue() / chunkInstances.numInstances());
            sampleTestTime = 0;
            sampleTrainTime = 0;
            learningCurve.insertEntry(new LearningEvaluation(new Measurement[] { new Measurement("learning evaluation instances", instancesProcessed), new Measurement(("evaluation time (" + (preciseCPUTiming ? "cpu " : "") + "seconds)"), TimingUtils.nanoTimeToSeconds(TimingUtils.getNanoCPUTimeOfCurrentThread() - evaluateStartTime)), new Measurement("average chunk train time", avgTrainTime), new Measurement("average chunk train speed", chunkInstances.numInstances() / avgTrainTime), new Measurement("average chunk test time", avgTestTime), new Measurement("average chunk test speed", chunkInstances.numInstances() / avgTestTime), new Measurement("model cost (RAM-Hours)", RAMHours) }, evaluator, learner));
            if (immediateResultStream != null) {
                if (firstDump) {
                    immediateResultStream.println(learningCurve.headerToString());
                    firstDump = false;
                }
                immediateResultStream.println(learningCurve.entryToString(learningCurve.numEntries() - 1));
                immediateResultStream.flush();
            }
        }
        // //Memory testing
        if (instancesProcessed % INSTANCES_BETWEEN_MONITOR_UPDATES == 0) {
            if (monitor.taskShouldAbort()) {
                return null;
            }
            long estimatedRemainingInstances = stream.estimatedRemainingInstances();
            if (maxInstances > 0) {
                long maxRemaining = maxInstances - instancesProcessed;
                if ((estimatedRemainingInstances < 0) || (maxRemaining < estimatedRemainingInstances)) {
                    estimatedRemainingInstances = maxRemaining;
                }
            }
            monitor.setCurrentActivityFractionComplete(estimatedRemainingInstances < 0 ? -1.0 : (double) instancesProcessed / (double) (instancesProcessed + estimatedRemainingInstances));
            if (monitor.resultPreviewRequested()) {
                monitor.setLatestResultPreview(learningCurve.copy());
            }
            secondsElapsed = (int) TimingUtils.nanoTimeToSeconds(TimingUtils.getNanoCPUTimeOfCurrentThread() - evaluateStartTime);
        }
    }
    if (immediateResultStream != null) {
        immediateResultStream.close();
    }
    return learningCurve;
}
