/**
 * Prepares the trained datastructures for handling new (in sample)
 * feature-values
 *
 * @param inst
 * current Instance being handled
 */
protected void coverAbsentFeatures_And_fill_helpMap_compact(Instance inst) {
    Hashtable<Integer, Hashtable<Double, ClassCounter_compact>> featureName_HT = trainResult.getFeatureTable_compact();
    for (Object key : inst.keySet()) {
        int featureName = (Integer) key;
        Double featureValue = inst.value((Integer) key);
        if (!featureName_HT.containsKey(featureName)) {
        } else {
            if (!featureName_HT.get(featureName).containsKey(featureValue)) {
                featureName_HT.get(featureName).put(featureValue, new ClassCounter_compact(classes.length));
            }
        }
    }
    trainResult.setFeatureTable_compact(featureName_HT);
}
