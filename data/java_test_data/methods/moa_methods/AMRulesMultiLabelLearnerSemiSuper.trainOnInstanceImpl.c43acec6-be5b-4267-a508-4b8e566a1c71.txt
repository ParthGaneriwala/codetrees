@Override
public void trainOnInstanceImpl(MultiLabelInstance instance) {
    if (nAttributes == 0)
        nAttributes = instance.numInputAttributes();
    numInstances += instance.weight();
    debug("Train", 3);
    debug("NÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Âº instance " + numInstances + " - " + instance.toString(), 3);
    boolean rulesCoveringInstance = false;
    ListIterator<MultiLabelRule> ruleIterator = this.ruleSet.listIterator();
    numberTotalExamples++;
    prediction = new MultiLabelPrediction(instance.numOutputAttributes());
    boolean isUnlabeledRejected = true;
    isUnlabeled = false;
    for (int m = 0; m < instance.numOutputAttributes(); m++) {
        if (instance.valueOutputAttribute(m) == Double.NEGATIVE_INFINITY) {
            isUnlabeled = true;
            break;
        }
    }
    if (numberTotalExamples == 1) {
        anomalyDetector2 = new OddsRatioScore();
    }
    // ----------------------------------------------------------------------
    while (ruleIterator.hasNext()) {
        MultiLabelRule rule = ruleIterator.next();
        if (rule.isCovering(instance) == true) {
            rulesCoveringInstance = true;
            if (!rule.updateAnomalyDetection(instance)) {
                prediction = rule.getPredictionForInstance(instance);
                if (isUnlabeled) {
                    if (rule.getAnomalyScore() >= scoreThreshold.getValue()) {
                        for (int a = 0; a < instance.numOutputAttributes(); a++) instance.setClassValue(a, prediction.getVote(a, 0));
                        // Unlabeled rejected
                        isUnlabeledRejected = false;
                    } else
                        continue;
                }
                // ----------------------------------------------------------
                if (rule.updateChangeDetection(instance)) {
                    debug("I) Drift Detected. Exa. : " + numInstances + " (" + rule.getWeightSeenSinceExpansion() + ") Remove Rule: " + rule.getRuleNumberID(), 1);
                    // Remove a regra
                    ruleIterator.remove();
                    // Rule expansion event
                    rule.notifyAll(new ChangeDetectedMessage());
                    // Just for statistics
                    this.numChangesDetected += instance.weight();
                } else {
                    // <<<<<<<<<<<<
                    rule.trainOnInstance(instance);
                    if (rule.getWeightSeenSinceExpansion() % gracePeriodOption.getValue() == 0.0) {
                        if (rule.tryToExpand(splitConfidenceOption.getValue(), tieThresholdOption.getValue())) {
                            // Need to be outside to make sure other rules are cleaned
                            MultiLabelRule otherMultiLabelRule = rule.getNewRuleFromOtherOutputs();
                            if (!dropOldRuleAfterExpansionOption.isSet() && rule.hasNewRuleFromOtherOutputs()) {
                                rule.clearOtherOutputs();
                                otherMultiLabelRule.setRuleNumberID(++ruleNumberID);
                                setRuleOptions(otherMultiLabelRule);
                                ruleIterator.add(otherMultiLabelRule);
                                if (observer != null)
                                    otherMultiLabelRule.addObserver(observer);
                            }
                            setRuleOptions(rule);
                            debug("Rule Expanded:", 2);
                            debug(rule.toString(), 2);
                        }
                    }
                }
            } else {
                debug("Anomaly Detected: " + numInstances + " Rule: " + rule.getRuleNumberID(), 1);
                // Just for statistics
                numAnomaliesDetected += instance.weight();
            }
            // Testa se  ordered ou unordered
            if (!unorderedRulesOption.isSet())
                break;
        }
    }
    if (rulesCoveringInstance == false) {
        isUnlabeledRejected = false;
        for (int m = 0; m < instance.numOutputAttributes(); m++) {
            if (instance.valueOutputAttribute(m) == Double.NEGATIVE_INFINITY) {
                prediction = defaultRule.getPredictionForInstance(instance);
                for (int a = 0; a < instance.numOutputAttributes(); a++) {
                    instance.setClassValue(a, prediction.getVote(a, 0));
                }
                break;
            }
        }
        defaultRule.trainOnInstance(instance);
        if (defaultRule.getWeightSeenSinceExpansion() % this.gracePeriodOption.getValue() == 0.0) {
            debug("Nr. examples " + defaultRule.getWeightSeenSinceExpansion(), 4);
            if (defaultRule.tryToExpand(this.splitConfidenceOption.getValue(), this.tieThresholdOption.getValue()) == true) {
                MultiLabelRule newDefaultRule = defaultRule.getNewRuleFromOtherBranch();
                newDefaultRule.setRuleNumberID(++ruleNumberID);
                setRuleOptions(newDefaultRule);
                setRuleOptions(defaultRule);
                ruleSet.add(defaultRule);
                debug("Default rule expanded! New Rule:", 2);
                debug(defaultRule.toString(), 2);
                debug("New default rule:", 3);
                debug(newDefaultRule.toString(), 3);
                defaultRule = newDefaultRule;
                if (observer != null)
                    defaultRule.addObserver(observer);
            }
        }
    }
// ----------------------------------------------------------------------
}
