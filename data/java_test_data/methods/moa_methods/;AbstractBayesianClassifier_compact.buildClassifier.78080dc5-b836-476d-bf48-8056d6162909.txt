/**
 * Instantiate the Abstract Bayesian classifier building process.
 *
 * @param data
 * dataset to build model on
 */
@Override
public void buildClassifier(Dataset data) {
    this.trainingData = data;
    trainResult = new BayesResult();
    numInstances = trainingData.size();
    numClasses = trainingData.classes().size();
    classes = new Object[numClasses];
    Iterator it = trainingData.classes().iterator();
    int cnt = 0;
    while (it.hasNext()) {
        String classname = it.next().toString();
        Classname2IndexCCountermap.put(classname, cnt);
        classes[cnt] = classname;
        cnt++;
    }
    // calculate freqs for class priors
    trainResult.setClassFreqs(calculateClassFreqs(trainingData));
    // calculate class priors
    trainResult.setClassProbs(calculateClassProbs());
    // calculate freqs for conditional probabilities
    trainResult.setFeatureTable_compact(conditionalFreq_compact(trainingData));
    // for when this feature is absent in the sample during classification
    if (sparse) {
        trainResult.setFeatureTable_compact(updateFT_compact());
    }
    // capacity of hashmaps to avoid resizing since the size is MAX
    initialCap = ((int) Math.ceil(numFeatures / 0.75) + 10);
}
