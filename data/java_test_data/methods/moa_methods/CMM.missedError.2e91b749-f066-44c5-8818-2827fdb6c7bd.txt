private double missedError(CMMPoint cmdp, boolean useHullDistance) {
    cmdp.p.setMeasureValue("CMM Type", "missed");
    if (!useHullDistance) {
        return cmdp.connectivity;
    } else {
        // main idea: look at relative distance of missed point to cluster
        double minHullDist = 1;
        for (int fc = 0; fc < numFClusters; fc++) {
            // if fc is mappend onto the class of the point, check it for its hulldist
            if (matchMap[fc] != -1 && matchMap[fc] == cmdp.workclass()) {
                if (clustering.get(fc) instanceof SphereCluster) {
                    SphereCluster sc = (SphereCluster) clustering.get(fc);
                    double distanceFC = sc.getCenterDistance(cmdp);
                    double radius = sc.getRadius();
                    double hullDist = (distanceFC - radius) / (distanceFC + radius);
                    if (hullDist < minHullDist)
                        minHullDist = hullDist;
                } else {
                    double min = 1;
                    double max = 1;
                    // TODO: distance for random shape
                    // generate X points from the cluster with clustering.get(fc).sample(null)
                    // and find Min and Max values
                    double hullDist = min / max;
                    if (hullDist < minHullDist)
                        minHullDist = hullDist;
                }
            }
        }
        // use distance as weight
        if (minHullDist > 1)
            minHullDist = 1;
        double weight = (1 - Math.exp(-lamdaMissed * minHullDist));
        cmdp.p.setMeasureValue("HullDistWeight", weight);
        return weight * cmdp.connectivity;
    }
}
