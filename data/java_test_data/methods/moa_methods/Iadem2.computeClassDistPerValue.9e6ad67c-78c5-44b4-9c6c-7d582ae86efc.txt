private void computeClassDistPerValue(double[][] classDistLower, double[][] classDistUpper) {
    double estimator, classDistError;
    int numberOfValues = classDistLower.length;
    int numberOfClasses = classDistLower[0].length;
    for (int i = 0; i < numberOfValues; i++) {
        for (int j = 0; j < numberOfClasses; j++) {
            if (attValueDist.getValue(i) == 0.0) {
                classDistLower[i][j] = 0.0;
                classDistUpper[i][j] = 1.0;
            } else {
                DoubleVector classCounter = nominalAttClassObserver.get(i);
                double attValuePerClassCounter = classCounter != null ? classCounter.getValue(j) : 0.0;
                estimator = attValuePerClassCounter / attValueDist.getValue(i);
                classDistError = IademCommonProcedures.getIADEM_HoeffdingBound(estimator, attValueDist.getValue(i));
                classDistLower[i][j] = Math.max(0.0, estimator - classDistError);
                classDistUpper[i][j] = Math.min(1.0, estimator + classDistError);
            }
        }
    }
}
