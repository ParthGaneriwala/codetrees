public void processInstanceOptionNode(Instance inst, OptionNode node, double prediction, double normalError, boolean growthAllowed, boolean inAlternate) {
    if (node.changeDetection) {
        double error = Math.abs(prediction - inst.classValue());
        node.sumOfAbsErrors += error;
        if (((InnerNode) node).PageHinckleyTest(error - node.sumOfAbsErrors / node.examplesSeen + PageHinckleyAlphaOption.getValue(), PageHinckleyThresholdOption.getValue())) {
            node.initializeAlternateTree();
        }
    }
    for (Node child : node.children) {
        int index = node.getChildIndex(child);
        double childPrediction = child.getPrediction(inst);
        // Loop for compatibility with bagging methods
        for (int i = 0; i < inst.weight(); i++) {
            node.optionFFSeen[index] = node.optionFFSeen[index] * optionFadingFactorOption.getValue() + 1;
            node.optionFFSSL[index] = node.optionFFSSL[index] * optionFadingFactorOption.getValue() + Math.pow(childPrediction - inst.classValue(), 2);
        }
    }
    for (Node child : node.children) {
        processInstance(inst, child, child.getPrediction(inst), normalError, growthAllowed && node.alternateTree == null, inAlternate);
    }
}
