public void update(ObservableMOAObject o, Object arg) {
    if (arg instanceof MeritCheckMessage) {
        MeritCheckMessage msg = (MeritCheckMessage) arg;
        // Get Learning attributes
        // because it will be modified
        boolean[] attributesMask = msg.getLearningAttributes().clone();
        int numAttributes = attributesMask.length;
        if (this.attributeImportance == null) {
            this.attributeImportance = new double[numAttributes];
            for (int i = 0; i < attributesMask.length; i++) attributeImportance[i] = 1.0;
        }
        int numRules = ruleInformation.size();
        RuleInformation ri = ruleInformation.get(o);
        // Merit check of a new rule
        if (ri == null) {
            ri = new RuleInformation(numAttributes);
            ruleInformation.put(o, ri);
            // new
            for (int i = 0; i < numAttributes; i++) attributeImportance[i] = (attributeImportance[i] * numRules + 1) / (numRules + 1);
        } else // Merit check of an existing rule
        {
            // it may change after update
            double[] old = ri.getAttributesImportance().clone();
            List<Integer> updated = ri.update(msg.getMerits().getArrayRef(), attributesMask, meritThresholdOption.getValue());
            Iterator<Integer> it = updated.iterator();
            while (it.hasNext()) {
                int attIndex = it.next();
                this.attributeImportance[attIndex] = (attributeImportance[attIndex] * numRules - old[attIndex] + ri.getAttributeImportance(attIndex)) / numRules;
            }
        }
    } else // Rule expanded
    if (arg instanceof RuleExpandedMessage) {
        int numRules = ruleInformation.size();
        RuleInformation ri = ruleInformation.get(o);
        RuleExpandedMessage msg = ((RuleExpandedMessage) arg);
        int attIndex = msg.getAttributeIndex();
        double oldValue = ri.getAttributeImportance(attIndex);
        this.attributeImportance[attIndex] = (attributeImportance[attIndex] * numRules - oldValue + 1) / numRules;
        ri.addLiteralAttribute(attIndex);
    } else // Rule will be removed
    if (arg instanceof ChangeDetectedMessage) {
        RuleInformation ri = ruleInformation.get(o);
        int numRules = ruleInformation.size();
        double[] attribImportance = ri.getAttributesImportance();
        for (int i = 0; i < this.attributeImportance.length; i++) attributeImportance[i] = (attributeImportance[i] * numRules - attribImportance[i]) / (numRules - 1);
        ruleInformation.remove(o);
    }
}
