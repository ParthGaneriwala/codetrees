public Vote getVotes(Instance instance) {
    ErrorWeightedVote errorWeightedVote = newErrorWeightedVote();
    // DoubleVector combinedVote = new DoubleVector();
    debug("Test", 3);
    int numberOfRulesCovering = 0;
    // Verbose to console Dataset name.
    VerboseToConsole(instance);
    for (Rule rule : ruleSet) {
        if (rule.isCovering(instance) == true) {
            numberOfRulesCovering++;
            // DoubleVector vote = new DoubleVector(rule.getPrediction(instance));
            double[] vote = rule.getPrediction(instance);
            double error = rule.getCurrentError();
            // predictionValueForThisRule);
            debug("Rule No" + rule.getRuleNumberID() + " Vote: " + Arrays.toString(vote) + " Error: " + error + " Y: " + instance.classValue(), 3);
            errorWeightedVote.addVote(vote, error);
            // combinedVote.addValues(vote);
            if (!this.unorderedRulesOption.isSet()) {
                // Only one rule cover the instance.
                break;
            }
        }
    }
    if (numberOfRulesCovering == 0) {
        // combinedVote = new DoubleVector(defaultRule.getPrediction(instance));
        double[] vote = defaultRule.getPrediction(instance);
        double error = defaultRule.getCurrentError();
        errorWeightedVote.addVote(vote, error);
        debug("Default Rule Vote " + Arrays.toString(vote) + " Error " + error + "  Y: " + instance.classValue(), 3);
    }
    double[] weightedVote = errorWeightedVote.computeWeightedVote();
    double weightedError = errorWeightedVote.getWeightedError();
    debug("Weighted Rule - Vote: " + Arrays.toString(weightedVote) + " Weighted Error: " + weightedError + " Y:" + instance.classValue(), 3);
    return new Vote(weightedVote, weightedError);
}
