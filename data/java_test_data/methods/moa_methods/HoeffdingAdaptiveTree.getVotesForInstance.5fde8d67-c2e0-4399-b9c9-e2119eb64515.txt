@Override
public double[] getVotesForInstance(Instance inst) {
    if (this.treeRoot != null) {
        FoundNode[] foundNodes = filterInstanceToLeaves(inst, null, -1, false);
        DoubleVector result = new DoubleVector();
        int predictionPaths = 0;
        for (FoundNode foundNode : foundNodes) {
            if (foundNode.parentBranch != -999) {
                Node leafNode = foundNode.node;
                if (leafNode == null) {
                    leafNode = foundNode.parent;
                }
                double[] dist = leafNode.getClassVotes(inst, this);
                // Albert: changed for weights
                // double distSum = Utils.sum(dist);
                // if (distSum > 0.0) {
                // Utils.normalize(dist, distSum);
                // }
                result.addValues(dist);
            // predictionPaths++;
            }
        }
        // }
        return result.getArrayRef();
    }
    return new double[0];
}
