public Map<Object, PerformanceMeasure> crossValidation(Dataset data, int numFolds, Random rg) {
    // TODO use EvaluateDataset
    Dataset[] folds = data.folds(numFolds, rg);
    Map<Object, PerformanceMeasure> out = new HashMap<Object, PerformanceMeasure>();
    for (Object o : data.classes()) {
        out.put(o, new PerformanceMeasure());
    }
    for (int i = 0; i < numFolds; i++) {
        Dataset validation = folds[i];
        Dataset training = new DefaultDataset();
        for (int j = 0; j < numFolds; j++) {
            if (j != i)
                training.addAll(folds[j]);
        }
        classifier.buildClassifier(training);
        for (Instance instance : validation) {
            Object prediction = classifier.classify(instance);
            if (instance.classValue().equals(prediction)) {
                // ==class
                for (Object o : out.keySet()) {
                    if (o.equals(instance.classValue())) {
                        out.get(o).tp++;
                    } else {
                        out.get(o).tn++;
                    }
                }
            } else {
                // prediction != class
                for (Object o : out.keySet()) {
                    /* prediction is positive class */
                    if (prediction.equals(o)) {
                        out.get(o).fp++;
                    } else /* instance is positive class */
                    if (o.equals(instance.classValue())) {
                        out.get(o).fn++;
                    } else /* none is positive class */
                    {
                        out.get(o).tn++;
                    }
                }
            }
        }
    }
    return out;
}
