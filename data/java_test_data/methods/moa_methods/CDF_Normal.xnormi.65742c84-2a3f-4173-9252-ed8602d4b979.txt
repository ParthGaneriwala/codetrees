/**
 * This method calculates the normal cdf inverse function.
 * <p>
 * Let PHI(x) be the normal cdf.  Suppose that Q calculates
 * 1.0 - PHI(x), and that QINV calculates QINV(p) for p in (0.0,.5].
 * Then for p .le. .5, x = PHIINV(p) = -QINV(p).
 * For p .gt. .5, x = PHIINV(p) = QINV(1.0 - p).
 * The formula for approximating QINV is taken from Abramowitz and Stegun,
 * Handbook of Mathematical Functions, Dover, 9th printing,
 * formula 26.2.3, page 933.  The error in x is claimed to
 * be less than 4.5e-4 in absolute value.
 *
 * @param   p    p must lie between 0 and 1.  xnormi returns
 * the normal cdf inverse evaluated at p.
 *
 * @author Steve Verrill
 * @version .5 --- June 7, 1996
 * @return
 */
// FIX: Eventually I should build in a check that p lies in (0,1)
public static double xnormi(double p) {
    double arg, t, t2, t3, xnum, xden, qinvp, x, pc;
    final double[] c = { 2.515517, .802853, .010328 };
    final double[] d = { 1.432788, .189269, .001308 };
    if (p <= .5) {
        arg = -2.0 * Math.log(p);
        t = Math.sqrt(arg);
        t2 = t * t;
        t3 = t2 * t;
        xnum = c[0] + c[1] * t + c[2] * t2;
        xden = 1.0 + d[0] * t + d[1] * t2 + d[2] * t3;
        qinvp = t - xnum / xden;
        x = -qinvp;
        return x;
    } else {
        pc = 1.0 - p;
        arg = -2.0 * Math.log(pc);
        t = Math.sqrt(arg);
        t2 = t * t;
        t3 = t2 * t;
        xnum = c[0] + c[1] * t + c[2] * t2;
        xden = 1.0 + d[0] * t + d[1] * t2 + d[2] * t3;
        x = t - xnum / xden;
        return x;
    }
}
