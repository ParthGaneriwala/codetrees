@Override
public void learnFromInstance(Instance inst, EFDT ht, EFDTSplitNode parent, int parentBranch) {
    nodeTime++;
    // // Update node statistics and class distribution
    // update prior (predictor)
    this.observedClassDistribution.addToValue((int) inst.classValue(), inst.weight());
    for (int i = 0; i < inst.numAttributes() - 1; i++) {
        // update likelihood
        int instAttIndex = modelAttIndexToInstanceAttIndex(i, inst);
        AttributeClassObserver obs = this.attributeObservers.get(i);
        if (obs == null) {
            obs = inst.attribute(instAttIndex).isNominal() ? ht.newNominalClassObserver() : ht.newNumericClassObserver();
            this.attributeObservers.set(i, obs);
        }
        obs.observeAttributeClass(inst.value(instAttIndex), (int) inst.classValue(), inst.weight());
    }
    // check if a better split is available. if so, chop the tree at this point, copying likelihood. predictors for children are from parent likelihood.
    if (ht.numInstances % ht.reEvalPeriodOption.getValue() == 0) {
        this.reEvaluateBestSplit(this, parent, parentBranch);
    }
    int childBranch = this.instanceChildIndex(inst);
    Node child = this.getChild(childBranch);
    if (child != null) {
        ((EFDTNode) child).learnFromInstance(inst, ht, this, childBranch);
    }
}
