@Override
public void input(double prediction) {
    // In MOA, 1.0=false, 0.0=true.
    if (!this.isInitialized) {
        initialize();
        this.isInitialized = true;
    } else {
        if (this.isChangeDetected) {
            resetLearning();
        }
    }
    if (nr == windowSize) {
        // Recent window is full.
        // Oldest prediction in recent window
        wo = wo + storedPredictions[firstPos];
        // is moved to older window,
        no++;
        wr = wr - storedPredictions[firstPos];
        // Start of recent window moves.
        firstPos++;
        if (firstPos == windowSize) {
            firstPos = 0;
        }
    } else {
        // Recent window grows.
        nr++;
    }
    // Adds prediction at the end of recent window.
    lastPos++;
    if (lastPos == windowSize) {
        lastPos = 0;
    }
    ;
    storedPredictions[lastPos] = (byte) prediction;
    wr += prediction;
    this.isWarningZone = false;
    if (no >= windowSize) {
        // The same as: (no + nr) >= 2 * windowSize.
        // Numbers of correct predictions are calculated.
        ro = no - wo;
        rr = nr - wr;
        // Auxiliary variable.
        sizeInvertedSum = 1.0 / no + 1.0 / nr;
        // Calculation of the statistics of STEPD.
        p = (ro + rr) / (no + nr);
        Z = Math.abs(ro / no - rr / nr);
        Z = Z - sizeInvertedSum / 2.0;
        Z = Z / Math.sqrt(p * (1.0 - p) * sizeInvertedSum);
        Z = Statistics.normalProbability(Math.abs(Z));
        Z = 2 * (1 - Z);
        if (Z < alphaDrift) {
            // Drift Level
            this.isChangeDetected = true;
        } else {
            if (Z < alphaWarning) {
                // Warning Level
                this.isWarningZone = true;
            }
        }
    }
}
