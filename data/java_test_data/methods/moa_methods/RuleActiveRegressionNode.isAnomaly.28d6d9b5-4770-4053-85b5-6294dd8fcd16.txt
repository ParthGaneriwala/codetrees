public boolean isAnomaly(Instance instance, double uniVariateAnomalyProbabilityThreshold, double multiVariateAnomalyProbabilityThreshold, int numberOfInstanceesForAnomaly) {
    // AMRUles is equipped with anomaly detection. If on, compute the anomaly value.
    double perceptronIntancesSeen = this.perceptron.getInstancesSeen();
    if (perceptronIntancesSeen >= numberOfInstanceesForAnomaly) {
        double atribSum = 0.0;
        double atribSquredSum = 0.0;
        double D = 0.0;
        double N = 0.0;
        double anomaly = 0.0;
        for (int x = 0; x < instance.numAttributes() - 1; x++) {
            // Perceptron is initialized each rule.
            // this is a local anomaly.
            int instAttIndex = AMRulesRegressorOld.modelAttIndexToInstanceAttIndex(x, instance);
            atribSum = this.perceptron.perceptronattributeStatistics.getValue(x);
            atribSquredSum = this.perceptron.squaredperceptronattributeStatistics.getValue(x);
            double mean = atribSum / perceptronIntancesSeen;
            double sd = computeSD(atribSquredSum, atribSum, perceptronIntancesSeen);
            double probability = computeProbability(mean, sd, instance.value(instAttIndex));
            // odds ratio
            if (probability > 0)
                anomaly += Math.log(probability / (1 - probability));
            if (// TODO: JD comment: only for testing
            probability == 1)
                anomaly += Math.log(probability / (1 - probability));
        }
        /*anomaly = 0.0; //Old implementation
			if (D != 0.0) { 
				anomaly = N / D;
			}
			if (anomaly >= multiVariateAnomalyProbabilityThreshold) {
				debuganomaly(instance,
						uniVariateAnomalyProbabilityThreshold,
						multiVariateAnomalyProbabilityThreshold,
						anomaly);
				return true;
			}*/
        // TODO: JD remove commented code
        System.out.println("Anomaly = " + anomaly);
        /*try {
			    PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter("/home/jduarte/fried_anomalies.txt", true)));
			    out.println(anomaly);
			    out.close();
			} catch (IOException e) {
			    //exception handling left as an exercise for the reader
			}*/
        return anomaly < 0;
    }
    return false;
}
