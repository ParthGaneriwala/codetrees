// We retrain the user/item separately, depending on a probability
// calculated using the error when predicting the new rating
@Override
public void updateSetRating(int userID, int itemID, double rating) {
    double nUsr = data.countRatingsUser(userID);
    double nItm = data.countRatingsItem(itemID);
    double prob1 = Math.pow(0.99, nUsr);
    double prob2 = Math.pow(0.99, nItm);
    if (nUsr < 5 || rnd.nextDouble() < prob1) {
        SparseVector usrRats = data.getRatingsUser(userID);
        ArrayList<Integer> itm = new ArrayList<Integer>();
        ArrayList<Double> rat = new ArrayList<Double>();
        // Train user
        boolean found = false;
        Iterator<Pair<Integer, Double>> it = usrRats.iterator();
        while (it.hasNext()) {
            Pair<Integer, Double> p = it.next();
            itm.add(p.getFirst());
            if (p.getFirst() == itemID) {
                found = true;
                rat.add(rating);
            } else
                rat.add(p.getSecond());
        }
        if (!found) {
            itm.add(itemID);
            rat.add(rating);
        }
        trainUser(userID, itm, rat);
    }
    if (nItm < 5 || rnd.nextDouble() < prob2) {
        SparseVector itmRats = data.getRatingsItem(itemID);
        // Train item
        Iterator<Pair<Integer, Double>> it = itmRats.iterator();
        boolean found = false;
        ArrayList<Integer> usr = new ArrayList<Integer>();
        ArrayList<Double> rat = new ArrayList<Double>();
        while (it.hasNext()) {
            Pair<Integer, Double> p = it.next();
            usr.add(p.getFirst());
            if (p.getFirst() == userID) {
                found = true;
                rat.add(rating);
            } else
                rat.add(p.getSecond());
        }
        if (!found) {
            usr.add(itemID);
            rat.add(rating);
        }
        trainItem(itemID, usr, rat);
    }
}
