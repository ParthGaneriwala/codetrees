protected void attemptToSplit(ActiveLearningNode node, SplitNode parent, int parentIndex) {
    if (!node.observedClassDistributionIsPure()) {
        SplitCriterion splitCriterion = (SplitCriterion) getPreparedClassOption(this.splitCriterionOption);
        AttributeSplitSuggestion[] bestSplitSuggestions = node.getBestSplitSuggestions(splitCriterion, this);
        Arrays.sort(bestSplitSuggestions);
        boolean shouldSplit = false;
        if (parentIndex != -999) {
            if (bestSplitSuggestions.length < 2) {
                shouldSplit = bestSplitSuggestions.length > 0;
            } else {
                double hoeffdingBound = computeHoeffdingBound(splitCriterion.getRangeOfMerit(node.getObservedClassDistribution()), this.splitConfidenceOption.getValue(), node.getWeightSeen());
                AttributeSplitSuggestion bestSuggestion = bestSplitSuggestions[bestSplitSuggestions.length - 1];
                AttributeSplitSuggestion secondBestSuggestion = bestSplitSuggestions[bestSplitSuggestions.length - 2];
                if ((bestSuggestion.merit - secondBestSuggestion.merit > hoeffdingBound) || (hoeffdingBound < this.tieThresholdOption.getValue())) {
                    shouldSplit = true;
                }
                if ((this.removePoorAttsOption != null) && this.removePoorAttsOption.isSet()) {
                    Set<Integer> poorAtts = new HashSet<Integer>();
                    // scan 1 - add any poor to set
                    for (int i = 0; i < bestSplitSuggestions.length; i++) {
                        if (bestSplitSuggestions[i].splitTest != null) {
                            int[] splitAtts = bestSplitSuggestions[i].splitTest.getAttsTestDependsOn();
                            if (splitAtts.length == 1) {
                                if (bestSuggestion.merit - bestSplitSuggestions[i].merit > hoeffdingBound) {
                                    poorAtts.add(new Integer(splitAtts[0]));
                                }
                            }
                        }
                    }
                    // scan 2 - remove good ones from set
                    for (int i = 0; i < bestSplitSuggestions.length; i++) {
                        if (bestSplitSuggestions[i].splitTest != null) {
                            int[] splitAtts = bestSplitSuggestions[i].splitTest.getAttsTestDependsOn();
                            if (splitAtts.length == 1) {
                                if (bestSuggestion.merit - bestSplitSuggestions[i].merit < hoeffdingBound) {
                                    poorAtts.remove(new Integer(splitAtts[0]));
                                }
                            }
                        }
                    }
                    for (int poorAtt : poorAtts) {
                        node.disableAttribute(poorAtt);
                    }
                }
            }
        } else if (bestSplitSuggestions.length > 0) {
            double hoeffdingBound = computeHoeffdingBound(splitCriterion.getRangeOfMerit(node.getObservedClassDistribution()), this.secondarySplitConfidenceOption.getValue(), node.getWeightSeen());
            AttributeSplitSuggestion bestSuggestion = bestSplitSuggestions[bestSplitSuggestions.length - 1];
            // in option case, scan back through existing options to
            // find best
            SplitNode current = parent;
            double bestPreviousMerit = Double.NEGATIVE_INFINITY;
            double[] preDist = node.getObservedClassDistribution();
            while (true) {
                double merit = current.computeMeritOfExistingSplit(splitCriterion, preDist);
                if (merit > bestPreviousMerit) {
                    bestPreviousMerit = merit;
                }
                if (current.optionCount != -999) {
                    break;
                }
                current = current.parent;
            }
            if (bestSuggestion.merit - bestPreviousMerit > hoeffdingBound) {
                shouldSplit = true;
            }
        }
        if (shouldSplit) {
            AttributeSplitSuggestion splitDecision = bestSplitSuggestions[bestSplitSuggestions.length - 1];
            if (splitDecision.splitTest == null) {
                // preprune - null wins
                if (parentIndex != -999) {
                    deactivateLearningNode(node, parent, parentIndex);
                }
            } else {
                SplitNode newSplit = new SplitNode(splitDecision.splitTest, node.getObservedClassDistribution());
                newSplit.parent = parent;
                // add option procedure
                SplitNode optionHead = parent;
                if (parent != null) {
                    while (optionHead.optionCount == -999) {
                        optionHead = optionHead.parent;
                    }
                }
                if ((parentIndex == -999) && (parent != null)) {
                    // adding a new option
                    newSplit.optionCount = -999;
                    optionHead.updateOptionCountBelow(1, this);
                    if (optionHead.parent != null) {
                        optionHead.parent.updateOptionCount(optionHead, this);
                    }
                    addToOptionTable(splitDecision, optionHead.parent);
                } else {
                    // adding a regular leaf
                    if (optionHead == null) {
                        newSplit.optionCount = 1;
                    } else {
                        newSplit.optionCount = optionHead.optionCount;
                    }
                }
                int numOptions = 1;
                if (optionHead != null) {
                    numOptions = optionHead.optionCount;
                }
                if (numOptions < this.maxOptionPathsOption.getValue()) {
                    // preserve leaf
                    newSplit.nextOption = node;
                    // disable attribute just used
                    int[] splitAtts = splitDecision.splitTest.getAttsTestDependsOn();
                    for (int i : splitAtts) {
                        node.disableAttribute(i);
                    }
                } else {
                    this.activeLeafNodeCount--;
                }
                for (int i = 0; i < splitDecision.numSplits(); i++) {
                    Node newChild = newLearningNode(splitDecision.resultingClassDistributionFromSplit(i));
                    newSplit.setChild(i, newChild);
                }
                this.decisionNodeCount++;
                this.activeLeafNodeCount += splitDecision.numSplits();
                if (parent == null) {
                    this.treeRoot = newSplit;
                } else {
                    if (parentIndex != -999) {
                        parent.setChild(parentIndex, newSplit);
                    } else {
                        parent.nextOption = newSplit;
                    }
                }
            }
            // manage memory
            enforceTrackerLimit();
        }
    }
}
