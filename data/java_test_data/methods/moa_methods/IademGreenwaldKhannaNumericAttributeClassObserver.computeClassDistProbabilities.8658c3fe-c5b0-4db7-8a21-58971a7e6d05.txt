@Override
public void computeClassDistProbabilities(double[][][] cut_value_classDist_lower, double[][][] cut_value_classDist_upper, double[][] counts_cut_value, boolean withIntervalEstimates) {
    ArrayList<Double> cuts = cutPointSuggestion(-1);
    long[] totalDist = getClassDist();
    for (int i = 0; i < cuts.size(); i++) {
        long[] lDist = getLeftClassDist(cuts.get(i)), rDist = new long[lDist.length];
        long totalIzq = sum(lDist);
        long total = sum(totalDist);
        counts_cut_value[i][0] = totalIzq;
        counts_cut_value[i][1] = total - totalIzq;
        for (int j = 0; j < totalDist.length; j++) {
            rDist[j] = totalDist[j] - lDist[j];
            double lEst = 0.0;
            if (counts_cut_value[i][0] != 0) {
                lEst = (double) lDist[j] / counts_cut_value[i][0];
            }
            double lError = 0.0;
            if (withIntervalEstimates) {
                lError = IademCommonProcedures.getIADEM_HoeffdingBound(lEst, counts_cut_value[i][0]);
            }
            cut_value_classDist_lower[i][0][j] = Math.max(0.0, lEst - lError);
            cut_value_classDist_upper[i][0][j] = Math.min(1.0, lEst + lError);
            double rEst = 0.0;
            if (counts_cut_value[i][1] != 0) {
                rEst = (double) rDist[j] / counts_cut_value[i][1];
            }
            double rightError = 0.0;
            if (withIntervalEstimates) {
                rightError = IademCommonProcedures.getIADEM_HoeffdingBound(rEst, counts_cut_value[i][1]);
            }
            cut_value_classDist_lower[i][1][j] = Math.max(0.0, rEst - rightError);
            cut_value_classDist_upper[i][1][j] = Math.min(1.0, rEst + rightError);
        }
    }
}
