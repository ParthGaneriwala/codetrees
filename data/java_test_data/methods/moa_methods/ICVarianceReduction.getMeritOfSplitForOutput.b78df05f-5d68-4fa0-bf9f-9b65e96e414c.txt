protected double getMeritOfSplitForOutput(DoubleVector preSplitDist, DoubleVector[] postSplitDists) {
    double merit = 0;
    // count number of branches with weightSeen higher than threshold
    int count = 0;
    for (int i = 0; i < postSplitDists.length; i++) if (postSplitDists[i].getValue(0) >= 0.05 * preSplitDist.getValue(0))
        count = count + 1;
    // Consider split if all branches have required weight seen
    if (count == postSplitDists.length) {
        double varPreSplit = computeVariance(preSplitDist);
        double sumVarPostSplit = 0;
        double weightTotal = 0;
        for (int i = 0; i < postSplitDists.length; i++) {
            weightTotal += postSplitDists[i].getValue(0);
        }
        double[] variances = getBranchSplitVarianceOutput(postSplitDists);
        for (int i = 0; i < variances.length; i++) if (postSplitDists[i].getValue(0) > 0)
            // weight variance
            sumVarPostSplit += (postSplitDists[i].getValue(0) / weightTotal * variances[i]);
        merit = 1 - sumVarPostSplit / varPreSplit;
    }
    /*if(merit<0 || merit>1)
			System.out.println("out of range");*/
    return merit;
}
