@Override
public void buildClassifier(Dataset data) {
    super.buildClassifier(data);
    this.data = data;
    svm_problem p = transformDataset(data);
    model = svm.svm_train(p, param);
    double[][] coef = model.sv_coef;
    assert model.SV != null;
    assert model.SV.length > 0;
    double[][] prob = new double[model.SV.length][data.noAttributes()];
    for (int i = 0; i < model.SV.length; i++) {
        for (int j = 0; j < data.noAttributes(); j++) {
            prob[i][j] = 0;
        }
    }
    for (int i = 0; i < model.SV.length; i++) {
        for (int j = 0; j < model.SV[i].length; j++) {
            prob[i][model.SV[i][j].index] = model.SV[i][j].value;
        }
    }
    /* Weights are only available for linear SVMs */
    if (param.svm_type == svm_parameter.C_SVC) {
        double[][][] w_list = new double[model.nr_class][model.nr_class - 1][data.noAttributes()];
        for (int i = 0; i < data.noAttributes(); ++i) {
            for (int j = 0; j < model.nr_class - 1; ++j) {
                int index = 0;
                int end = 0;
                double acc;
                for (int k = 0; k < model.nr_class; ++k) {
                    acc = 0.0;
                    index += (k == 0) ? 0 : model.nSV[k - 1];
                    end = index + model.nSV[k];
                    for (int m = index; m < end; ++m) {
                        acc += coef[j][m] * prob[m][i];
                    }
                    w_list[k][j][i] = acc;
                }
            }
        }
        weights = new double[data.noAttributes()];
        for (int i = 0; i < model.nr_class - 1; ++i) {
            for (int j = i + 1, k = i; j < model.nr_class; ++j, ++k) {
                for (int m = 0; m < data.noAttributes(); ++m) {
                    weights[m] = (w_list[i][k][m] + w_list[j][i][m]);
                }
            }
        }
    } else {
        weights = null;
    }
}
