public void updatePerceptron(Instance inst) {
    // Initialize perceptron if necessary
    if (reset == true) {
        reset = false;
        weightAttribute = new DoubleVector();
        instancesSeen = 0;
        for (int j = 0; j < inst.numAttributes(); j++) {
            // The last index corresponds to the constant b
            weightAttribute.setValue(j, 2 * tree.classifierRandom.nextDouble() - 1);
        }
    }
    // Update attribute statistics
    instancesSeen += inst.weight();
    // Update weights
    double learningRatio = 0.0;
    if (tree.learningRatioConstOption.isSet()) {
        learningRatio = learningRatioOption.getValue();
    } else {
        learningRatio = learningRatioOption.getValue() / (1 + instancesSeen * tree.learningRateDecayFactorOption.getValue());
    }
    sumOfValues += inst.weight() * inst.classValue();
    sumOfSquares += inst.weight() * inst.classValue() * inst.classValue();
    // Loop for compatibility with bagging methods
    for (int i = 0; i < (int) inst.weight(); i++) {
        updateWeights(inst, learningRatio);
    }
}
