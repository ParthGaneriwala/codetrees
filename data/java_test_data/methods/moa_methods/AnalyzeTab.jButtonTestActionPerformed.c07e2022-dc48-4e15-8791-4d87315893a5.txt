// GEN-LAST:event_jButtonDelStreamActionPerformed
private void jButtonTestActionPerformed(java.awt.event.ActionEvent evt) {
    // GEN-FIRST:event_jButtonTestActionPerformed
    if (this.jTextFieldResultsPath.getText().equals("")) {
        JOptionPane.showMessageDialog(this, "Directory not found", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }
    List<Measure> algmeasures = new ArrayList<>();
    List<Stream> streams = new ArrayList<>();
    List<String> algPath = new ArrayList<>();
    List<String> algShortNames = new ArrayList<>();
    int count = 0;
    boolean type = true;
    type = this.jComboBoxType.getSelectedItem().toString().equals("Mean");
    Measure m = new Measure(this.jComboBoxMeasure.getSelectedItem().toString(), this.jComboBoxMeasure.getSelectedItem().toString(), type, 0);
    algmeasures.add(m);
    String path = this.jTextFieldResultsPath.getText();
    for (int i = 0; i < streamModel.getRowCount(); i++) {
        algPath.clear();
        for (int j = 0; j < algoritmModel.getRowCount(); j++) {
            File inputFile = new File(FilenameUtils.separatorsToSystem(path + "\\" + streamModel.getValueAt(i, 0) + "\\" + algoritmModel.getValueAt(j, 0)));
            File streamFile = new File(FilenameUtils.separatorsToSystem(path + "\\" + streamModel.getValueAt(i, 0)));
            if (!inputFile.exists()) {
                JOptionPane.showMessageDialog(this, "File not found: " + inputFile.getAbsolutePath(), "Error", JOptionPane.ERROR_MESSAGE);
                return;
            } else {
                String algorithmPath = FilenameUtils.separatorsToSystem(path + "\\" + streamModel.getValueAt(i, 0).toString() + "\\" + algoritmModel.getValueAt(j, 0).toString());
                algPath.add(algorithmPath);
                if (i == 0) {
                    algShortNames.add(algoritmModel.getValueAt(j, 1).toString());
                }
            }
        }
        Stream s = new Stream(streamModel.getValueAt(i, 1).toString(), algPath, algShortNames, algmeasures);
        streams.add(s);
    }
    // Statistical Test
    StatisticalTest test = new StatisticalTest(streams);
    try {
        // test.readCSV(this.jTextFieldCSV.getText());
        test.readData();
    } catch (Exception exp) {
        JOptionPane.showMessageDialog(this, "Problem with csv file", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }
    test.avgPerformance();
    this.jTextAreaOut.append("P-values involving all algorithms\n");
    this.jTextAreaOut.append(System.getProperty("line.separator"));
    this.jTextAreaOut.append("P-value computed by Friedman Test: " + test.getFriedmanPValue() + "\n");
    this.jTextAreaOut.append("P-value computed by Iman and Daveport Test: " + test.getImanPValue() + "\n");
    rank = test.getRankAlg();
    this.jTextAreaOut.append(System.getProperty("line.separator"));
    this.jTextAreaOut.append("Ranking of the algorithms\n");
    this.jTextAreaOut.append(System.getProperty("line.separator"));
    rank.stream().forEach((RankPerAlgorithm rank1) -> {
        this.jTextAreaOut.append(rank1.algName + ": " + rank1.rank + "\n");
    });
    switch(jComboBoxTest.getSelectedItem().toString()) {
        case "Holm":
            pvalues = test.holmTest();
            break;
        case "Shaffer":
            pvalues = test.shafferTest();
            break;
        case "Nemenyi":
            pvalues = test.nemenyiTest();
    }
    this.jTextAreaOut.append(System.getProperty("line.separator"));
    this.jTextAreaOut.append("P-values of classifiers against each other\n");
    this.jTextAreaOut.append(System.getProperty("line.separator"));
    pvalues.stream().forEach((pvalue) -> {
        this.jTextAreaOut.append(pvalue.algName1 + " vs " + pvalue.algName2 + ": " + pvalue.PValue + "\n");
    });
    jButtonImage.setEnabled(true);
// 
}
