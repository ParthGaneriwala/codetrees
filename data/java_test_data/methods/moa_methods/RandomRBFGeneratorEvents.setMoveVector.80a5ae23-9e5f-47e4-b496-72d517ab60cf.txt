void setMoveVector(double[] vector) {
    // we are ignoring the steps, otherwise we have to change
    // speed of the kernels, do we want that?
    moveVector = vector;
    int speedInPoints = speedOption.getValue();
    if (speedRangeOption.getValue() > 0)
        speedInPoints += (instanceRandom.nextBoolean() ? -1 : 1) * instanceRandom.nextInt(speedRangeOption.getValue());
    if (speedInPoints < 1)
        speedInPoints = speedOption.getValue();
    double length = 0;
    for (int d = 0; d < moveVector.length; d++) {
        length += Math.pow(vector[d], 2);
    }
    length = Math.sqrt(length);
    totalMovementSteps = (int) (length / (maxDistanceMoveThresholdByStep * kernelMovePointFrequency) * speedInPoints);
    for (int d = 0; d < moveVector.length; d++) {
        moveVector[d] /= (double) totalMovementSteps;
    }
    currentMovementSteps = 0;
// if(debug){
// System.out.println("Setting new direction for C"+generator.getId()+": distance "
// +length+" in "+totalMovementSteps+" steps");
// }
}
