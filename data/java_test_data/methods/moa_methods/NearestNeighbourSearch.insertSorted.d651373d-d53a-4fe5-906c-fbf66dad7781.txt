public void insertSorted(double distance, Instance instance) {
    if (isEmpty()) {
        m_First = m_Last = new NeighborNode(distance, instance);
    } else {
        NeighborNode current = m_First;
        if (distance < m_First.m_Distance) {
            // Insert at head
            m_First = new NeighborNode(distance, instance, m_First);
        } else {
            // Insert further down the list
            for (; (current.m_Next != null) && (current.m_Next.m_Distance < distance); current = current.m_Next) ;
            current.m_Next = new NeighborNode(distance, instance, current.m_Next);
            if (current.equals(m_Last)) {
                m_Last = current.m_Next;
            }
        }
        // Trip down the list until we've got k list elements (or more if the
        // distance to the last elements is the same).
        int valcount = 0;
        for (current = m_First; current.m_Next != null; current = current.m_Next) {
            valcount++;
            if ((valcount >= m_Length) && (current.m_Distance != current.m_Next.m_Distance)) {
                m_Last = current;
                current.m_Next = null;
                break;
            }
        }
    }
}
