@Override
public void trainOnInstanceImpl(Instance inst) {
    this.iterationControl++;
    double costNow;
    if (this.iterationControl <= this.numInstancesInitOption.getValue()) {
        costNow = 0;
        // Use all instances at the beginning
        this.classifier.trainOnInstance(inst);
        this.costLabeling++;
        return;
    } else {
        costNow = (this.costLabeling - this.numInstancesInitOption.getValue()) / ((double) this.iterationControl - this.numInstancesInitOption.getValue());
    }
    if (costNow < this.budgetOption.getValue()) {
        // allow to label
        switch(this.activeLearningStrategyOption.getChosenIndex()) {
            case // fixed
            0:
                maxPosterior = getMaxPosterior(this.classifier.getVotesForInstance(inst));
                labelFixed(maxPosterior, inst);
                break;
            case // variable
            1:
                maxPosterior = getMaxPosterior(this.classifier.getVotesForInstance(inst));
                labelVar(maxPosterior, inst);
                break;
            case // randomized
            2:
                maxPosterior = getMaxPosterior(this.classifier.getVotesForInstance(inst));
                maxPosterior = maxPosterior / (this.classifierRandom.nextGaussian() + 1.0);
                labelVar(maxPosterior, inst);
                break;
            case // selective-sampling
            3:
                maxPosterior = getMaxPosterior(this.classifier.getVotesForInstance(inst));
                labelSelSampling(maxPosterior, inst);
                break;
        }
    }
}
