private void evaluateClustering(Clustering found_clustering, Clustering trueClustering, ArrayList<DataPoint> points, boolean algorithm0) {
    StringBuilder sb = new StringBuilder();
    for (int i = 0; i < m_measures0.length; i++) {
        if (algorithm0) {
            if (found_clustering != null && found_clustering.size() > 0) {
                try {
                    double msec = m_measures0[i].evaluateClusteringPerformance(found_clustering, trueClustering, points);
                    sb.append(m_measures0[i].getClass().getSimpleName() + " took " + msec + "ms (Mean:" + m_measures0[i].getMeanRunningTime() + ")");
                    sb.append("\n");
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            } else {
                for (int j = 0; j < m_measures0[i].getNumMeasures(); j++) {
                    m_measures0[i].addEmptyValue(j);
                }
            }
        } else {
            if (m_clusterer1 != null && found_clustering != null && found_clustering.size() > 0) {
                try {
                    double msec = m_measures1[i].evaluateClusteringPerformance(found_clustering, trueClustering, points);
                    sb.append(m_measures1[i].getClass().getSimpleName() + " took " + msec + "ms (Mean:" + m_measures1[i].getMeanRunningTime() + ")");
                    sb.append("\n");
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            } else {
                for (int j = 0; j < m_measures1[i].getNumMeasures(); j++) {
                    m_measures1[i].addEmptyValue(j);
                }
            }
        }
    }
    m_logPanel.setText(sb.toString());
    m_evalPanel.update();
    m_graphcanvas.updateCanvas();
}
