/**
 * This method describes the implementation of how to prepare this object for use.
 * All classes that extends this class have to implement <code>prepareForUseImpl</code>
 * and not <code>prepareForUse</code> since
 * <code>prepareForUse</code> calls <code>prepareForUseImpl</code>.
 *
 * @param monitor the TaskMonitor to use
 * @param repository  the ObjectRepository to use
 */
// protected abstract void prepareForUseImpl(TaskMonitor monitor,
// ObjectRepository repository);
/* public String getCLICreationString(Class<?> expectedType) {
        return ClassOption.stripPackagePrefix(this.getClass().getName(),
                expectedType)
                + " " + getOptions().getAsCLIString();
    }*/
/**
 * Gets the options of this class via reflection.
 *
 * @return an array of options
 */
/*public Option[] discoverOptionsViaReflection() {
        //Class<? extends AbstractOptionHandler> c = this.getClass();
        Class c = this.handler.getClass();
        Field[] fields = c.getFields();
        List<Option> optList = new LinkedList<Option>();
        for (Field field : fields) {
            String fName = field.getName();
            Class<?> fType = field.getType();
            if (fType.getName().endsWith("Option")) {
                if (Option.class.isAssignableFrom(fType)) {
                    Option oVal = null;
                    try {
                        field.setAccessible(true);
                        oVal = (Option) field.get(this.handler);
                    } catch (IllegalAccessException ignored) {
                        // cannot access this field
                    }
                    if (oVal != null) {
                        optList.add(oVal);
                    }
                }
            }
        }
        return optList.toArray(new Option[optList.size()]);
    }*/
public void prepareClassOptions(TaskMonitor monitor, ObjectRepository repository) {
    this.classOptionNamesToPreparedObjects = null;
    Option[] optionArray = getOptions().getOptionArray();
    for (Option option : optionArray) {
        if (option instanceof ClassOption) {
            ClassOption classOption = (ClassOption) option;
            monitor.setCurrentActivity("Materializing option " + classOption.getName() + "...", -1.0);
            Object optionObj = classOption.materializeObject(monitor, repository);
            if (monitor.taskShouldAbort()) {
                return;
            }
            if (optionObj instanceof OptionHandler) {
                monitor.setCurrentActivity("Preparing option " + classOption.getName() + "...", -1.0);
                ((OptionHandler) optionObj).prepareForUse(monitor, repository);
                if (monitor.taskShouldAbort()) {
                    return;
                }
            }
            if (this.classOptionNamesToPreparedObjects == null) {
                this.classOptionNamesToPreparedObjects = new HashMap<String, Object>();
            }
            this.classOptionNamesToPreparedObjects.put(option.getName(), optionObj);
        }
    }
}
