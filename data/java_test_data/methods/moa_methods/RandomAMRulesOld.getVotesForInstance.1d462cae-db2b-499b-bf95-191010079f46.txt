@Override
public double[] getVotesForInstance(Instance inst) {
    double[] votes = null;
    // ErrorWeightedVote combinedVote = (ErrorWeightedVote)((ErrorWeightedVote) votingTypeOption.getPreMaterializedObject()).copy();
    ErrorWeightedVote combinedVote = (ErrorWeightedVote) ((ErrorWeightedVote) getPreparedClassOption(this.votingFunctionOption)).copy();
    StringBuilder sb = null;
    if (VerbosityOption.getValue() > 1)
        sb = new StringBuilder();
    for (int i = 0; i < this.ensemble.length; i++) {
        // transformInstance method visibility changed from private to protected in RandomRules
        Vote v = ((AbstractAMRules) this.ensemble[i]).getVotes(inst);
        if (VerbosityOption.getValue() > 1)
            sb.append(Arrays.toString(v.getVote()) + ", " + " E: " + v.getError() + " ");
        if (this.isRegression == false && v.sumVoteDistrib() != 0.0) {
            v.normalize();
        }
        if (this.votingTypeOption.getChosenIndex() == 0) {
            // Overall error estimation
            combinedVote.addVote(v.getVote(), this.sumError[i] / this.nError[i]);
        } else
            // Error estimation over the rules that cover the example
            combinedVote.addVote(v.getVote(), v.getError());
    }
    votes = combinedVote.computeWeightedVote();
    if (VerbosityOption.getValue() > 1) {
        sb.append(Arrays.toString(votes) + ", ").append(inst.classValue());
        System.out.println(sb.toString());
    }
    return votes;
}
