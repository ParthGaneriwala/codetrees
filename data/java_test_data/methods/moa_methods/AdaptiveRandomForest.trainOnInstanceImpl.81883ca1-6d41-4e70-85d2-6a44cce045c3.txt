@Override
public void trainOnInstanceImpl(Instance instance) {
    ++this.instancesSeen;
    if (this.ensemble == null)
        initEnsemble(instance);
    Collection<TrainingRunnable> trainers = new ArrayList<TrainingRunnable>();
    for (int i = 0; i < this.ensemble.length; i++) {
        DoubleVector vote = new DoubleVector(this.ensemble[i].getVotesForInstance(instance));
        InstanceExample example = new InstanceExample(instance);
        this.ensemble[i].evaluator.addResult(example, vote.getArrayRef());
        int k = MiscUtils.poisson(this.lambdaOption.getValue(), this.classifierRandom);
        if (k > 0) {
            if (this.executor != null) {
                TrainingRunnable trainer = new TrainingRunnable(this.ensemble[i], instance, k, this.instancesSeen);
                trainers.add(trainer);
            } else {
                // SINGLE_THREAD is in-place...
                this.ensemble[i].trainOnInstance(instance, k, this.instancesSeen);
            }
        }
    }
    if (this.executor != null) {
        try {
            this.executor.invokeAll(trainers);
        } catch (InterruptedException ex) {
            throw new RuntimeException("Could not call invokeAll() on training threads.");
        }
    }
}
