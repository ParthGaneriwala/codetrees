@Override
public void input(double prediction) {
    // System.out.print(prediction + " " + m_n + " " + probability + " ");
    if (this.isChangeDetected == true || this.isInitialized == false) {
        resetLearning();
        this.isInitialized = true;
    }
    this.isChangeDetected = false;
    m_n++;
    if (prediction == 1.0) {
        this.isWarningZone = false;
        this.delay = 0;
        m_numErrors += 1;
        m_lastd = m_d;
        m_d = m_n - 1;
        int distance = m_d - m_lastd;
        double oldmean = m_mean;
        m_mean = m_mean + ((double) distance - m_mean) / m_numErrors;
        this.estimation = m_mean;
        m_stdTemp = m_stdTemp + (distance - m_mean) * (distance - oldmean);
        double std = Math.sqrt(m_stdTemp / m_numErrors);
        double m2s = m_mean + 2 * std;
        if (m2s > m_m2smax) {
            if (m_n > FDDM_MINNUMINSTANCES) {
                m_m2smax = m2s;
            }
        // m_lastLevel = DDM_INCONTROL_LEVEL;
        // System.out.print(1 + " ");
        } else {
            double p = m2s / m_m2smax;
            // System.out.print(p + " ");
            if (m_n > FDDM_MINNUMINSTANCES && m_numErrors > m_minNumErrors && p < FDDM_OUTCONTROL) {
                // System.out.println(m_mean + ",D");
                this.isChangeDetected = true;
            // resetLearning();
            // return DDM_OUTCONTROL_LEVEL;
            } else if (m_n > FDDM_MINNUMINSTANCES && m_numErrors > m_minNumErrors && p < FDDM_WARNING) {
                // System.out.println(m_mean + ",W");
                // m_lastLevel = DDM_WARNING_LEVEL;
                this.isWarningZone = true;
            // return DDM_WARNING_LEVEL;
            } else {
                this.isWarningZone = false;
            // System.out.println(m_mean + ",N");
            // m_lastLevel = DDM_INCONTROL_LEVEL;
            // return DDM_INCONTROL_LEVEL;
            }
        }
    } else {
    // System.out.print(m_numErrors + " " + m_mean + " " +
    // Math.sqrt(m_stdTemp/m_numErrors) + " " + (m_mean +
    // 2*Math.sqrt(m_stdTemp/m_numErrors)) + " " + m_m2smax + " ");
    // System.out.print(((m_mean +
    // 2*Math.sqrt(m_stdTemp/m_numErrors))/m_m2smax) + " ");
    }
}
