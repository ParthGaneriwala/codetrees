public double[] getMajorityClassVotes(Instance instance) {
    double[] votes = new double[instance.attribute(instance.classIndex()).numValues()];
    Arrays.fill(votes, 0.0);
    if (instNodeCountSinceVirtual == 0) {
        if (parent != null) {
            ArrayList<LeafNode> siblings = parent.getLeaves();
            siblings.remove(this);
            ArrayList<LeafNode> siblingWithInfo = new ArrayList<LeafNode>();
            long count = 0;
            for (LeafNode currentSibling : siblings) {
                if (currentSibling.getInstNodeCountSinceVirtual() > 0) {
                    siblingWithInfo.add(currentSibling);
                    count += currentSibling.getInstNodeCountSinceVirtual();
                }
            }
            if (count > 0) {
                for (LeafNode currentSibling : siblingWithInfo) {
                    double[] sibVotes = currentSibling.getMajorityClassVotes(instance);
                    double weight = (double) currentSibling.getInstNodeCountSinceVirtual() / (double) count;
                    for (int i = 0; i < votes.length; i++) {
                        votes[i] += weight * sibVotes[i];
                    }
                }
            }
        }
    } else {
        for (int i = 0; i < votes.length; i++) {
            votes[i] = classValueDist.getValue(i) / (double) instNodeCountSinceVirtual;
        }
    }
    // normalize votes
    double voteCount = 0.0;
    for (int i = 0; i < votes.length; i++) {
        voteCount += votes[i];
    }
    if (voteCount == 0.0) {
        for (int i = 0; i < votes.length; i++) {
            votes[i] = 1.0 / (double) votes.length;
        }
    } else {
        for (int i = 0; i < votes.length; i++) {
            votes[i] /= voteCount;
        }
    }
    return votes;
}
