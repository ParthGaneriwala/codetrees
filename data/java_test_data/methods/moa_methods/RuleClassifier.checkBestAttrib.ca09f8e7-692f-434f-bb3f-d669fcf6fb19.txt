public boolean checkBestAttrib(double n, AutoExpandVector<AttributeClassObserver> observerss, DoubleVector observedClassDistribution) {
    double h0 = entropy(observedClassDistribution);
    boolean isTheBest = false;
    double[] entropyValues = getBestSecondBestEntropy(this.saveBestGlobalEntropy);
    double bestEntropy = entropyValues[0];
    double secondBestEntropy = entropyValues[1];
    double range = Utils.log2(this.numClass);
    double hoeffdingBound = ComputeHoeffdingBound(range, this.splitConfidenceOption.getValue(), n);
    if ((h0 > bestEntropy) && ((secondBestEntropy - bestEntropy > hoeffdingBound) || (hoeffdingBound < this.tieThresholdOption.getValue()))) {
        for (int i = 0; i < this.saveBestValGlobalEntropy.size(); i++) {
            if (bestEntropy == (this.saveBestValGlobalEntropy.get(i).get(1))) {
                this.saveTheBest.add(this.saveBestValGlobalEntropy.get(i).get(0));
                this.saveTheBest.add(this.saveBestValGlobalEntropy.get(i).get(1));
                this.saveTheBest.add(this.saveBestValGlobalEntropy.get(i).get(2));
                this.saveTheBest.add((double) i);
                if (this.saveTheBest.get(2) != 0.0) {
                    this.saveTheBest.add(this.saveBestValGlobalEntropy.get(i).get(3));
                }
                break;
            }
        }
        isTheBest = true;
    } else {
        isTheBest = false;
    }
    return isTheBest;
}
