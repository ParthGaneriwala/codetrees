@Override
public void trainOnInstanceImpl(Instance inst) {
    // train
    try {
        super.trainOnInstanceImpl(inst);
    } catch (NullPointerException e) {
        System.err.println("[Warning] NullPointer on train.");
    // e.printStackTrace();
    }
    for (int i = 0; i < this.ensemble.length; i++) {
        // get prediction
        double[] prediction = this.ensemble[i].getVotesForInstance(inst);
        if (prediction == null) {
            prediction = new double[] {};
        }
        // get true value
        double[] actual = new double[prediction.length];
        for (int j = 0; j < prediction.length; j++) {
            actual[j] = (double) inst.classValue(j);
        }
        // compute loss
        double loss = Metrics.L_ZeroOne(A.toIntArray(actual, 0.5), A.toIntArray(prediction, 0.5));
        // System.err.println("loss["+i+"] = "+loss);
        // adwin stuff
        double ErrEstim = this.ADError[i].getEstimation();
        if (this.ADError[i].setInput(loss)) {
            if (this.ADError[i].getEstimation() > ErrEstim) {
                System.err.println("Change model " + i + "!");
                this.ensemble[i].resetLearning();
                this.ensemble[i].trainOnInstance(inst);
                this.ADError[i] = new ADWIN();
            }
        }
    }
}
