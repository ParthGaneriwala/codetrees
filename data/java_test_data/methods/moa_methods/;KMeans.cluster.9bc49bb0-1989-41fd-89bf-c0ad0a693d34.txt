public Dataset[] cluster(Dataset data) {
    if (data.size() == 0)
        throw new RuntimeException("The dataset should not be empty");
    if (numberOfClusters == 0)
        throw new RuntimeException("There should be at least one cluster");
    // Place K points into the space represented by the objects that are
    // being clustered. These points represent the initial group of
    // centroids.
    // DatasetTools.
    Instance min = DatasetTools.minAttributes(data);
    Instance max = DatasetTools.maxAttributes(data);
    this.centroids = new Instance[numberOfClusters];
    int instanceLength = data.instance(0).noAttributes();
    for (int j = 0; j < numberOfClusters; j++) {
        // double[] randomInstance = new double[instanceLength];
        // for (int i = 0; i < instanceLength; i++) {
        // double dist = Math.abs(max.value(i) - min.value(i));
        // randomInstance[i] = (float) (min.value(i) + rg.nextDouble() * dist);
        // 
        // }
        double[] randomInstance = DatasetTools.getRandomInstance(data, rg);
        this.centroids[j] = new DenseInstance(randomInstance);
    }
    int iterationCount = 0;
    boolean centroidsChanged = true;
    boolean randomCentroids = true;
    while (randomCentroids || (iterationCount < this.numberOfIterations && centroidsChanged)) {
        iterationCount++;
        // Assign each object to the group that has the closest centroid.
        int[] assignment = new int[data.size()];
        for (int i = 0; i < data.size(); i++) {
            int tmpCluster = 0;
            double minDistance = dm.measure(centroids[0], data.instance(i));
            for (int j = 1; j < centroids.length; j++) {
                double dist = dm.measure(centroids[j], data.instance(i));
                if (dm.compare(dist, minDistance)) {
                    minDistance = dist;
                    tmpCluster = j;
                }
            }
            assignment[i] = tmpCluster;
        }
        // When all objects have been assigned, recalculate the positions of
        // the K centroids and start over.
        // The new position of the centroid is the weighted center of the
        // current cluster.
        double[][] sumPosition = new double[this.numberOfClusters][instanceLength];
        int[] countPosition = new int[this.numberOfClusters];
        for (int i = 0; i < data.size(); i++) {
            Instance in = data.instance(i);
            for (int j = 0; j < instanceLength; j++) {
                sumPosition[assignment[i]][j] += in.value(j);
            }
            countPosition[assignment[i]]++;
        }
        centroidsChanged = false;
        randomCentroids = false;
        for (int i = 0; i < this.numberOfClusters; i++) {
            if (countPosition[i] > 0) {
                double[] tmp = new double[instanceLength];
                for (int j = 0; j < instanceLength; j++) {
                    tmp[j] = (float) sumPosition[i][j] / countPosition[i];
                }
                Instance newCentroid = new DenseInstance(tmp);
                if (dm.measure(newCentroid, centroids[i]) > 0.0001) {
                    centroidsChanged = true;
                    centroids[i] = newCentroid;
                }
            } else {
                double[] randomInstance = new double[instanceLength];
                for (int j = 0; j < instanceLength; j++) {
                    double dist = Math.abs(max.value(j) - min.value(j));
                    randomInstance[j] = (float) (min.value(j) + rg.nextDouble() * dist);
                }
                randomCentroids = true;
                this.centroids[i] = new DenseInstance(randomInstance);
            }
        }
    }
    Dataset[] output = new Dataset[centroids.length];
    for (int i = 0; i < centroids.length; i++) output[i] = new DefaultDataset();
    for (int i = 0; i < data.size(); i++) {
        int tmpCluster = 0;
        double minDistance = dm.measure(centroids[0], data.instance(i));
        for (int j = 0; j < centroids.length; j++) {
            double dist = dm.measure(centroids[j], data.instance(i));
            if (dm.compare(dist, minDistance)) {
                minDistance = dist;
                tmpCluster = j;
            }
        }
        output[tmpCluster].add(data.instance(i));
    }
    return output;
}
