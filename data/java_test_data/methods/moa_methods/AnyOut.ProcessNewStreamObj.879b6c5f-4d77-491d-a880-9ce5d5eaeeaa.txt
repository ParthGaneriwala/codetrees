@Override
protected void ProcessNewStreamObj(Instance i) {
    if (trainingSetSize >= trainingCount) {
        if (trainingSet == null) {
            trainingSet = new DataSet(i.numAttributes() - 1);
        }
        // fill training set
        DataObject o = new DataObject(idCounter++, i);
        trainingSet.addObject(o);
        trainingCount++;
    } else {
        // Train once.
        if (trainingSetSize != -1) {
            anyout.train(trainingSet);
            trainingSet.clear();
            trainingSetSize = -1;
            outlierClass = i.classAttribute().numValues() - 1;
        }
        // Create DataObject from instance.
        DataObject o = new DataObject(idCounter++, i);
        objects.add(o);
        // Count ground truth.
        if (o.getClassLabel() == outlierClass) {
            totalOutliers += 1;
        }
        // Update window objects.
        if (objects.size() > windowSize) {
            DataObject obj = objects.get(0);
            objects.remove(0);
            anyout.removeObject(obj.getId());
            RemoveExpiredOutlier(new Outlier(obj.getInstance(), obj.getId(), obj));
        }
        // Calculate scores for the object.
        anyout.initObject(o.getId(), o.getFeatures());
        // Simulate anyout characteristics.
        double depth = Math.random();
        if (depth < minDepth) {
            depth = minDepth;
        } else if (depth > maxDepth) {
            depth = maxDepth;
        }
        while (anyout.moreImprovementsPossible(o.getId(), depth)) {
            anyout.improveObjectOnce(o.getId());
        }
        // Learn object into ClusTree.
        anyout.learnObject(o.getFeatures());
        // Evaluation of the window objects.
        for (DataObject obj : objects) {
            int id = obj.getId();
            if (anyout.isOutlier(id)) {
                if (obj.isOutiler() == false) {
                    // Statistics gathering.
                    if (obj.getClassLabel() == outlierClass) {
                        truePositive += 1;
                    } else {
                        falsePositive += 1;
                    }
                    AddOutlier(new Outlier(obj.getInstance(), id, obj));
                    obj.setOutiler(true);
                }
            } else {
                RemoveOutlier(new Outlier(obj.getInstance(), id, obj));
                obj.setOutiler(false);
            }
        }
    }
}
