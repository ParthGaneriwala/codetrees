// SplitNodes can have alternative trees, but LearningNodes can't
// LearningNodes can split, but SplitNodes can't
@Override
public void learnFromInstance(Instance inst, HoeffdingAdaptiveTree ht, SplitNode parent, int parentBranch) {
    int trueClass = (int) inst.classValue();
    // New option vore
    int k = MiscUtils.poisson(1.0, this.classifierRandom);
    Instance weightedInst = (Instance) inst.copy();
    if (k > 0) {
    // weightedInst.setWeight(inst.weight() * k);
    }
    // Compute ClassPrediction using filterInstanceToLeaf
    // int ClassPrediction = Utils.maxIndex(filterInstanceToLeaf(inst, null, -1).node.getClassVotes(inst, ht));
    int ClassPrediction = 0;
    if (filterInstanceToLeaf(inst, parent, parentBranch).node != null) {
        ClassPrediction = Utils.maxIndex(filterInstanceToLeaf(inst, parent, parentBranch).node.getClassVotes(inst, ht));
    }
    boolean blCorrect = (trueClass == ClassPrediction);
    if (this.estimationErrorWeight == null) {
        this.estimationErrorWeight = new ADWIN();
    }
    double oldError = this.getErrorEstimation();
    this.ErrorChange = this.estimationErrorWeight.setInput(blCorrect == true ? 0.0 : 1.0);
    if (this.ErrorChange == true && oldError > this.getErrorEstimation()) {
        // if error is decreasing, don't do anything
        this.ErrorChange = false;
    }
    // if (this.isAlternateTree == false) {
    if (this.ErrorChange == true) {
        // && this.alternateTree == null) {
        // Start a new alternative tree : learning node
        this.alternateTree = ht.newLearningNode();
        // this.alternateTree.isAlternateTree = true;
        ht.alternateTrees++;
    } else // Check condition to replace tree
    if (this.alternateTree != null && ((NewNode) this.alternateTree).isNullError() == false) {
        if (this.getErrorWidth() > 300 && ((NewNode) this.alternateTree).getErrorWidth() > 300) {
            double oldErrorRate = this.getErrorEstimation();
            double altErrorRate = ((NewNode) this.alternateTree).getErrorEstimation();
            double fDelta = .05;
            // if (gNumAlts>0) fDelta=fDelta/gNumAlts;
            double fN = 1.0 / ((double) ((NewNode) this.alternateTree).getErrorWidth()) + 1.0 / ((double) this.getErrorWidth());
            double Bound = (double) Math.sqrt((double) 2.0 * oldErrorRate * (1.0 - oldErrorRate) * Math.log(2.0 / fDelta) * fN);
            if (Bound < oldErrorRate - altErrorRate) {
                // Switch alternate tree
                ht.activeLeafNodeCount -= this.numberLeaves();
                ht.activeLeafNodeCount += ((NewNode) this.alternateTree).numberLeaves();
                killTreeChilds(ht);
                if (parent != null) {
                    parent.setChild(parentBranch, this.alternateTree);
                // ((AdaSplitNode) parent.getChild(parentBranch)).alternateTree = null;
                } else {
                    // Switch root tree
                    ht.treeRoot = ((AdaSplitNode) ht.treeRoot).alternateTree;
                }
                ht.switchedAlternateTrees++;
            } else if (Bound < altErrorRate - oldErrorRate) {
                // Erase alternate tree
                if (this.alternateTree instanceof ActiveLearningNode) {
                    this.alternateTree = null;
                // ht.activeLeafNodeCount--;
                } else if (this.alternateTree instanceof InactiveLearningNode) {
                    this.alternateTree = null;
                // ht.inactiveLeafNodeCount--;
                } else {
                    ((AdaSplitNode) this.alternateTree).killTreeChilds(ht);
                }
                ht.prunedAlternateTrees++;
            }
        }
    }
    // learnFromInstance alternate Tree and Child nodes
    if (this.alternateTree != null) {
        ((NewNode) this.alternateTree).learnFromInstance(weightedInst, ht, parent, parentBranch);
    }
    int childBranch = this.instanceChildIndex(inst);
    Node child = this.getChild(childBranch);
    if (child != null) {
        ((NewNode) child).learnFromInstance(weightedInst, ht, this, childBranch);
    }
}
