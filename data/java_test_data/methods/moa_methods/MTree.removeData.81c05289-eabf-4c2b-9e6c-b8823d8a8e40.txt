void removeData(DATA data, double distance) throws RootNodeReplacement, NodeUnderCapacity, DataNotFound {
    try {
        super.removeData(data, distance);
    } catch (NodeUnderCapacity e) {
        // Promote the only child to root
        @SuppressWarnings("unchecked") Node theChild = (Node) (children.values().iterator().next());
        Node newRoot;
        if (theChild instanceof MTree.InternalNode) {
            newRoot = new RootNode(theChild.data);
        } else {
            assert theChild instanceof MTree.LeafNode;
            newRoot = new RootLeafNode(theChild.data);
        }
        for (IndexItem grandchild : theChild.children.values()) {
            distance = MTree.this.distanceFunction.calculate(newRoot.data, grandchild.data);
            newRoot.addChild(grandchild, distance);
        }
        theChild.children.clear();
        throw new RootNodeReplacement(newRoot);
    }
}
