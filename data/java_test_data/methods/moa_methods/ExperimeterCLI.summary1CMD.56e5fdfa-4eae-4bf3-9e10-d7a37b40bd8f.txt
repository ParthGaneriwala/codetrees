public boolean summary1CMD(String[] args) {
    CommandLineParser parser = null;
    CommandLine cmdLine = null;
    try {
        parser = new BasicParser();
        cmdLine = parser.parse(optionsm, args);
        if (cmdLine.hasOption("h")) {
            new HelpFormatter().printHelp(ExperimeterCLI.class.getCanonicalName(), optionsm);
            return false;
        }
        String measure = cmdLine.getOptionValue("m");
        if (measure == null) {
            System.out.println("The measures are required");
            return false;
        }
        if (measure.contains(",")) {
            String[] m = measure.split(",");
            measures = new int[m.length];
            for (int i = 0; i < m.length; i++) {
                measures[i] = Integer.parseInt(m[i]);
            }
        } else {
            measures = new int[1];
            measures[0] = Integer.parseInt(measure);
        }
        if (cmdLine.hasOption("tm")) {
            String type = cmdLine.getOptionValue("tm");
            if (type.contains(",")) {
                types = type.split(",");
            } else {
                types = new String[1];
                types[0] = type;
            }
        } else {
            types = new String[measures.length];
            for (int i = 0; i < types.length; i++) {
                types[i] = "Mean";
            }
        }
    } catch (org.apache.commons.cli.ParseException ex) {
        System.out.println(ex.getMessage());
        // Error, imprimimos la ayuda
        new HelpFormatter().printHelp(ExperimeterCLI.class.getCanonicalName(), optionsm);
    } catch (java.lang.NumberFormatException ex) {
        // Error, imprimimos la ayuda
        new HelpFormatter().printHelp(ExperimeterCLI.class.getCanonicalName(), optionsm);
    }
    return true;
}
