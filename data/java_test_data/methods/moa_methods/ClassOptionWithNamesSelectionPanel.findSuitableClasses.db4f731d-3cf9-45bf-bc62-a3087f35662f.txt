public Class<?>[] findSuitableClasses(Class<?> requiredType, String[] classNames) {
    AutoExpandVector<Class<?>> finalClasses = new AutoExpandVector<Class<?>>();
    Class<?>[] classesFound = AutoClassDiscovery.findClassesOfType("moa", requiredType);
    for (Class<?> cl : classesFound) {
        for (int i = 0; i < classNames.length; i++) {
            if (cl.getSimpleName().contains(classNames[i])) {
                finalClasses.add(cl);
                break;
            }
        }
    }
    Class<?>[] tasksFound = AutoClassDiscovery.findClassesOfType("moa", Task.class);
    for (Class<?> foundTask : tasksFound) {
        try {
            Task task = (Task) foundTask.newInstance();
            if (requiredType.isAssignableFrom(task.getTaskResultType())) {
                for (int i = 0; i < classNames.length; i++) {
                    if (foundTask.getSimpleName().contains(classNames[i])) {
                        finalClasses.add(foundTask);
                        break;
                    }
                }
            }
        } catch (Exception e) {
        // ignore
        }
    }
    return finalClasses.toArray(new Class<?>[finalClasses.size()]);
}
