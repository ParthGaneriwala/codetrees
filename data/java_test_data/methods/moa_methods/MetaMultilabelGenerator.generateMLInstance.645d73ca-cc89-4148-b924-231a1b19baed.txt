private Instance generateMLInstance(HashSet<Integer> Y) {
    // create a multi-label instance:
    Instance x_ml = new SparseInstance(this.multilabelStreamTemplate.numAttributes());
    x_ml.setDataset(this.multilabelStreamTemplate);
    // set classes
    for (int j = 0; j < m_L; j++) {
        x_ml.setValue(j, 0.0);
    }
    for (int l : Y) {
        x_ml.setValue(l, 1.0);
    }
    // generate binary instances
    Instance x_0 = getNextWithBinary(0);
    Instance x_1 = getNextWithBinary(1);
    // Loop through each feature attribute @warning: assumes class is last index
    for (int a = 0; a < m_A; a++) {
        // The combination is present: use a positive value
        if (Y.containsAll(m_TopCombinations[a])) {
            x_ml.setValue(m_L + a, x_1.value(a));
        // x_ml.setValue(m_L+a,1.0);
        } else // The combination is absent: use a negative value
        {
            x_ml.setValue(m_L + a, x_0.value(a));
        // x_ml.setValue(m_L+a,0.0);
        }
    }
    return x_ml;
}
