@Override
public double[] getVotesForInstance(Instance inst) {
    if (this.initClassifiers == true) {
        return new double[0];
    }
    int numClasses = inst.numClasses();
    int sizeEnsemble = this.ensemble.length;
    if (pruneOption.isSet()) {
        sizeEnsemble = this.numEnsemblePruningOption.getValue();
    }
    double[][] votes = new double[sizeEnsemble + 1][numClasses];
    int[] bestClassifiers = new int[sizeEnsemble];
    if (pruneOption.isSet()) {
        // Check for the best classifiers
        double[] weight = new double[this.ensemble.length];
        for (int i = 0; i < numClasses; i++) {
            for (int j = 0; j < this.ensemble.length; j++) {
                weight[j] += weightAttribute[i][j];
            }
        }
        Arrays.sort(weight);
        // reverse order
        double cutValue = weight[this.ensemble.length - sizeEnsemble];
        int ii = 0;
        for (int j = 0; j < this.ensemble.length; j++) {
            if (weight[j] >= cutValue && ii < sizeEnsemble) {
                bestClassifiers[ii] = j;
                ii++;
            }
        }
    } else {
        // Not pruning: all classifiers
        for (int ii = 0; ii < sizeEnsemble; ii++) {
            bestClassifiers[ii] = ii;
        }
    }
    for (int ii = 0; ii < sizeEnsemble; ii++) {
        int i = bestClassifiers[ii];
        double[] v = new double[numClasses];
        for (int j = 0; j < v.length; j++) {
            v[j] = (double) this.oddsOffsetOption.getValue();
        }
        double[] vt = this.ensemble[i].getVotesForInstance(inst);
        double sum = Utils.sum(vt);
        if (!Double.isNaN(sum) && (sum > 0)) {
            for (int j = 0; j < vt.length; j++) {
                vt[j] /= sum;
            }
        } else {
            // Just in case the base learner returns NaN
            for (int k = 0; k < vt.length; k++) {
                vt[k] = 0.0;
            }
        }
        sum = numClasses * (double) this.oddsOffsetOption.getValue();
        for (int j = 0; j < vt.length; j++) {
            v[j] += vt[j];
            sum += vt[j];
        }
        for (int j = 0; j < vt.length; j++) {
            votes[ii][j] = Math.log(v[j] / (sum - v[j]));
        // votes[i][j] = vt[j];
        }
    }
    return getVotesForInstancePerceptron(votes, bestClassifiers, inst.numClasses());
}
