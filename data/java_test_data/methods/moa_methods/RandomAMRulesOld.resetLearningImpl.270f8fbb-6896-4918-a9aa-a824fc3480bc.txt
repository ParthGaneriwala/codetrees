@Override
public void resetLearningImpl() {
    this.classifierRandom.setSeed(this.randomSeedOption.getValue());
    int n = this.ensembleSizeOption.getValue();
    this.ensemble = new AbstractAMRules[n];
    sumError = new double[n];
    nError = new double[n];
    // Classifier baseLearner = (Classifier) getPreparedClassOption(this.baseLearnerOption);
    AbstractAMRules baseLearner = (AbstractAMRules) getPreparedClassOption(this.baseLearnerOption);
    baseLearner.setAttributesPercentage(numAttributesPercentageOption.getValue());
    baseLearner.resetLearning();
    for (int i = 0; i < this.ensemble.length; i++) {
        this.ensemble[i] = (AbstractAMRules) baseLearner.copy();
        this.ensemble[i].setRandomSeed(this.classifierRandom.nextInt());
    }
    this.isRegression = (baseLearner instanceof Regressor);
}
