public void setGraph(String preview) {
    // Change the graph when there is change in the text
    double processFrequency = 1000;
    if (preview != null && !preview.equals("")) {
        MeasureCollection oldAccuracy = acc1[0];
        acc1[0] = getNewMeasureCollection();
        Scanner scanner = new Scanner(preview);
        String firstLine = scanner.nextLine();
        boolean isSecondLine = true;
        boolean isPrequential = firstLine.startsWith("learning evaluation instances,evaluation time");
        boolean isHoldOut = firstLine.startsWith("evaluation instances,to");
        int accuracyColumn = 6;
        int kappaColumn = 4;
        int RamColumn = 2;
        int timeColumn = 1;
        int memoryColumn = 9;
        int kappaTempColumn = 5;
        if (this.taskManagerPanel instanceof CDTaskManagerPanel) {
            accuracyColumn = 6;
            kappaColumn = 4;
            RamColumn = 2;
            timeColumn = 1;
            memoryColumn = 9;
        } else if (isPrequential || isHoldOut) {
            accuracyColumn = 4;
            kappaColumn = 5;
            RamColumn = 2;
            timeColumn = 1;
            memoryColumn = 7;
            kappaTempColumn = 5;
            String[] tokensFirstLine = firstLine.split(",");
            int i = 0;
            for (String s : tokensFirstLine) {
                if (s.equals("classifications correct (percent)") || s.equals("[avg] classifications correct (percent)")) {
                    accuracyColumn = i;
                } else if (s.equals("Kappa Statistic (percent)") || s.equals("[avg] Kappa Statistic (percent)")) {
                    kappaColumn = i;
                } else if (s.equals("Kappa Temporal Statistic (percent)") || s.equals("[avg] Kappa Temporal Statistic (percent)")) {
                    kappaTempColumn = i;
                } else if (s.equals("model cost (RAM-Hours)")) {
                    RamColumn = i;
                } else if (s.equals("evaluation time (cpu seconds)") || s.equals("total train time")) {
                    timeColumn = i;
                } else if (s.equals("model serialized size (bytes)")) {
                    memoryColumn = i;
                }
                i++;
            }
        }
        if (isPrequential || isHoldOut || this.taskManagerPanel instanceof CDTaskManagerPanel) {
            while (scanner.hasNextLine()) {
                String line = scanner.nextLine();
                String[] tokens = line.split(",");
                this.acc1[0].addValue(0, round(parseDouble(tokens[accuracyColumn])));
                this.acc1[0].addValue(1, round(parseDouble(tokens[kappaColumn])));
                this.acc1[0].addValue(2, round(parseDouble(tokens[kappaTempColumn])));
                if (!isHoldOut) {
                    this.acc1[0].addValue(3, Math.abs(parseDouble(tokens[RamColumn])));
                }
                this.acc1[0].addValue(4, round(parseDouble(tokens[timeColumn])));
                this.acc1[0].addValue(5, round(parseDouble(tokens[memoryColumn]) / (1024 * 1024)));
                if (isSecondLine == true) {
                    processFrequency = Math.abs(parseDouble(tokens[0]));
                    isSecondLine = false;
                    if (acc1[0].getValue(0, 0) != oldAccuracy.getValue(0, 0)) {
                        // (!line.equals(secondLine)) {
                        // If we are in a new task, compare with the previous
                        secondLine = line;
                        if (processFrequency == this.graphCanvas.getProcessFrequency()) {
                            acc2[0] = oldAccuracy;
                        }
                    }
                }
            }
        } else {
            this.acc2[0] = getNewMeasureCollection();
        }
        scanner.close();
    } else {
        this.acc1[0] = getNewMeasureCollection();
        this.acc2[0] = getNewMeasureCollection();
    }
    if (this.taskManagerPanel instanceof CDTaskManagerPanel) {
        ConceptDriftMainTask cdTask = this.taskManagerPanel.getSelectedCurrenTask();
        ArrayList<ClusterEvent> clusterEvents = cdTask.getEventsList();
        this.graphCanvas.setClusterEventsList(clusterEvents);
    }
    this.graphCanvas.setGraph(acc1[0], acc2[0], this.graphCanvas.getMeasureSelected(), (int) processFrequency);
    this.graphCanvas.updateCanvas(true);
    this.graphCanvas.forceAddEvents();
    this.clusteringVisualEvalPanel1.update();
}
