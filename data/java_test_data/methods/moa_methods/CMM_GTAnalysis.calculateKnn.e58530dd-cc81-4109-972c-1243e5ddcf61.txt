private void calculateKnn() {
    for (int p0 : points) {
        CMMPoint cmdp = cmmpoints.get(p0);
        if (!cmdp.isNoise()) {
            AutoExpandVector<Double> knnDist = new AutoExpandVector<Double>();
            AutoExpandVector<Integer> knnPointIndex = new AutoExpandVector<Integer>();
            // calculate nearest neighbours
            getKnnInCluster(cmdp, knnNeighbourhood, points, knnDist, knnPointIndex);
            // TODO: What to do if we have less then k neighbours?
            double avgKnn = 0;
            for (int i = 0; i < knnDist.size(); i++) {
                avgKnn += knnDist.get(i);
            }
            if (knnDist.size() != 0)
                avgKnn /= knnDist.size();
            cmdp.knnInCluster = avgKnn;
            cmdp.knnIndices = knnPointIndex;
            cmdp.p.setMeasureValue("knnAvg", cmdp.knnInCluster);
            knnMeanAvg += avgKnn;
            knnDevAvg += Math.pow(avgKnn, 2);
        }
    }
    knnMeanAvg = knnMeanAvg / (double) points.size();
    knnDevAvg = knnDevAvg / (double) points.size();
    double variance = knnDevAvg - Math.pow(knnMeanAvg, 2.0);
    // Due to numerical errors, small negative values can occur.
    if (variance <= 0.0)
        variance = 1e-50;
    knnDevAvg = Math.sqrt(variance);
}
