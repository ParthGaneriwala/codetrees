@Override
public SplitNode getNewSplitNode(long newTotal, Node parent, IademAttributeSplitSuggestion bestSuggestion, Instance instance) {
    SplitNode splitNode = new SplitNode(this.tree, parent, null, ((LeafNode) this.parent).getMajorityClassVotes(instance), bestSuggestion.splitTest);
    Node[] children;
    if (bestSuggestion.splitTest instanceof IademNominalAttributeMultiwayTest) {
        children = new Node[instance.attribute(this.attIndex).numValues()];
        for (int i = 0; i < children.length; i++) {
            long count = 0;
            double[] tmpClassDist = new double[instance.attribute(instance.classIndex()).numValues()];
            Arrays.fill(tmpClassDist, 0);
            for (int j = 0; j < tmpClassDist.length; j++) {
                DoubleVector classCount = nominalAttClassObserver.get(i);
                double contadorAtributoClase = classCount != null ? classCount.getValue(j) : 0.0;
                tmpClassDist[j] = contadorAtributoClase;
                count += tmpClassDist[j];
            }
            children[i] = tree.newLeafNode(splitNode, newTotal, count, tmpClassDist, instance);
        }
    } else {
        // binary split
        children = new Node[2];
        IademNominalAttributeBinaryTest binarySplit = (IademNominalAttributeBinaryTest) bestSuggestion.splitTest;
        // to the left
        double[] tmpClassDist = new double[instance.attribute(instance.classIndex()).numValues()];
        // total de valores
        double tmpCount = 0;
        Arrays.fill(tmpClassDist, 0);
        DoubleVector classDist = nominalAttClassObserver.get(binarySplit.getAttValue());
        if (classDist != null) {
            for (int i = 0; i < tmpClassDist.length; i++) {
                tmpClassDist[i] = classDist.getValue(i);
                tmpCount += classDist.getValue(i);
            }
        }
        children[0] = tree.newLeafNode(splitNode, newTotal, (int) tmpCount, tmpClassDist, instance);
        // to the right
        tmpCount = this.classValueDist.sumOfValues() - tmpCount;
        for (int i = 0; i < tmpClassDist.length; i++) {
            tmpClassDist[i] = this.classValueDist.getValue(i) - tmpClassDist[i];
        }
        children[1] = tree.newLeafNode(splitNode, newTotal, (int) tmpCount, tmpClassDist, instance);
    }
    splitNode.setChildren(children);
    return splitNode;
}
