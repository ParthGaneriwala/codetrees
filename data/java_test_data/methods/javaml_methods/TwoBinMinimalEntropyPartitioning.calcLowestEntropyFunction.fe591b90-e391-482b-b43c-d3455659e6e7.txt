/**
 * Calculate Lowest Entropy Function
 *
 * @param FN
 * feature name
 * @param leftborder
 * begin of range
 * @param rightborder
 * end of range
 */
private Border calcLowestEntropyFunction(int FN, int index1stElement, int indexLastElement) {
    // f.e. 3 elements so index 0,1,2 so interval 0-1 , 1-2, 2-3
    // if border is behind first element so index 1 the left bin consists of
    // 1 and the right bin consist of 3-1=2
    Border border = new Border();
    double lowestLEF = Double.MAX_VALUE;
    // -1 because of 3 borders
    for (int borderindex = index1stElement + 1; borderindex <= indexLastElement; borderindex++) {
        int sizeBinLeft = borderindex - index1stElement;
        int sizeBinRight = indexLastElement - borderindex + 1;
        HashMap<Integer, Double> classfreqBinS1 = calcClassLabelFreqInS(FN, index1stElement, borderindex - 1);
        HashMap<Integer, Double> classfreqBinS2 = calcClassLabelFreqInS(FN, borderindex, indexLastElement);
        double EntS1 = calcEntropy(classfreqBinS1);
        double EntS2 = calcEntropy(classfreqBinS2);
        double LEF = ((double) (sizeBinLeft) / (double) (sizeBinLeft + sizeBinRight)) * (EntS1);
        LEF += ((double) sizeBinRight) / ((double) (sizeBinLeft + sizeBinRight)) * (EntS2);
        if (LEF < lowestLEF) {
            lowestLEF = LEF;
            border.setlowestLEF(LEF);
            Vector<Double> v = new Vector<Double>();
            v.add(workingfValues[borderindex]);
            border.setTMinC(v);
        }
    }
    return border;
}
