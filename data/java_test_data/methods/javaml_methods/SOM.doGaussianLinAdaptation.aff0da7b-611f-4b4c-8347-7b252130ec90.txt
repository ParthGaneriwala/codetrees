private void doGaussianLinAdaptation() {
    double[] input;
    // location of a winner node
    double[] wLocation;
    // width cache
    double wCache;
    double lin;
    for (int n = 0; n < steps; n++) {
        wCache = math.gaussianWidth(width, n, steps);
        lin = math.linLRP(n, lrate, steps);
        input = iVector.getNodeValuesAt(generator.nextInt(iVectorSize));
        index = resolveIndexOfWinningNeuron(input);
        wLocation = wV.getNodeLocationAt(index);
        for (int h = 0; h < wVectorSize; h++) {
            wV.setNodeValuesAt(h, math.gaussianAdaptation(input, wV.getNodeValuesAt(h), wLocation, wV.getNodeLocationAt(h), wCache, lin));
        }
    }
}
