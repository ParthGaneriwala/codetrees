private Hashtable<Integer, Hashtable<Double, ClassCounter>> updateFT() {
    Hashtable<Integer, Hashtable<Double, ClassCounter>> featureName_HT = trainResult.getFeatureTable();
    double[] freq = trainResult.getClassFreqs().clone();
    for (Object key : featureName_HT.keySet()) {
        // feature
        if (!featureName_HT.get(key).containsKey(012345.6789)) {
            featureName_HT.get(key).put(012345.6789, new ClassCounter(classes.length));
            for (int k = 0; k < numClasses; k++) {
                // frequency of absent feature is calculated using existing
                // freqs of other values of this feature for each class
                featureName_HT.get(key).get(012345.6789).setCountClass((freq[k] - sumOccurencesAllFVsForClass((Integer) key, k)), k);
                // analogue for calculating sample-id's for the samples
                // consisting of this absent feature
                featureName_HT.get(key).get(012345.6789).setClassInstanceIDList(sumOccurencesAllFVsForClassInstanceIDs((Integer) key, k), k);
            }
        }
    }
    return featureName_HT;
}
