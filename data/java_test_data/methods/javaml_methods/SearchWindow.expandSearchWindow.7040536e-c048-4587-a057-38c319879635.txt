private final void expandSearchWindow(int radius) {
    if (radius > 0) {
        ArrayList windowCells = new ArrayList(size());
        for (Iterator cellIter = iterator(); cellIter.hasNext(); windowCells.add(cellIter.next())) ;
        for (int cell = 0; cell < windowCells.size(); cell++) {
            ColMajorCell currentCell = (ColMajorCell) windowCells.get(cell);
            int targetCol;
            int targetRow;
            if (currentCell.getCol() != minI() && currentCell.getRow() != maxJ()) {
                targetCol = currentCell.getCol() - radius;
                targetRow = currentCell.getRow() + radius;
                if (targetCol >= minI() && targetRow <= maxJ()) {
                    markVisited(targetCol, targetRow);
                } else {
                    int cellsPastEdge = Math.max(minI() - targetCol, targetRow - maxJ());
                    markVisited(targetCol + cellsPastEdge, targetRow - cellsPastEdge);
                }
            }
            if (currentCell.getRow() != maxJ()) {
                targetCol = currentCell.getCol();
                targetRow = currentCell.getRow() + radius;
                if (targetRow <= maxJ()) {
                    markVisited(targetCol, targetRow);
                } else {
                    int cellsPastEdge = targetRow - maxJ();
                    markVisited(targetCol, targetRow - cellsPastEdge);
                }
            }
            if (currentCell.getCol() != maxI() && currentCell.getRow() != maxJ()) {
                targetCol = currentCell.getCol() + radius;
                targetRow = currentCell.getRow() + radius;
                if (targetCol <= maxI() && targetRow <= maxJ()) {
                    markVisited(targetCol, targetRow);
                } else {
                    int cellsPastEdge = Math.max(targetCol - maxI(), targetRow - maxJ());
                    markVisited(targetCol - cellsPastEdge, targetRow - cellsPastEdge);
                }
            }
            if (currentCell.getCol() != minI()) {
                targetCol = currentCell.getCol() - radius;
                targetRow = currentCell.getRow();
                if (targetCol >= minI()) {
                    markVisited(targetCol, targetRow);
                } else {
                    int cellsPastEdge = minI() - targetCol;
                    markVisited(targetCol + cellsPastEdge, targetRow);
                }
            }
            if (currentCell.getCol() != maxI()) {
                targetCol = currentCell.getCol() + radius;
                targetRow = currentCell.getRow();
                if (targetCol <= maxI()) {
                    markVisited(targetCol, targetRow);
                } else {
                    int cellsPastEdge = targetCol - maxI();
                    markVisited(targetCol - cellsPastEdge, targetRow);
                }
            }
            if (currentCell.getCol() != minI() && currentCell.getRow() != minJ()) {
                targetCol = currentCell.getCol() - radius;
                targetRow = currentCell.getRow() - radius;
                if (targetCol >= minI() && targetRow >= minJ()) {
                    markVisited(targetCol, targetRow);
                } else {
                    int cellsPastEdge = Math.max(minI() - targetCol, minJ() - targetRow);
                    markVisited(targetCol + cellsPastEdge, targetRow + cellsPastEdge);
                }
            }
            if (currentCell.getRow() != minJ()) {
                targetCol = currentCell.getCol();
                targetRow = currentCell.getRow() - radius;
                if (targetRow >= minJ()) {
                    markVisited(targetCol, targetRow);
                } else {
                    int cellsPastEdge = minJ() - targetRow;
                    markVisited(targetCol, targetRow + cellsPastEdge);
                }
            }
            if (currentCell.getCol() == maxI() || currentCell.getRow() == minJ())
                continue;
            targetCol = currentCell.getCol() + radius;
            targetRow = currentCell.getRow() - radius;
            if (targetCol <= maxI() && targetRow >= minJ()) {
                markVisited(targetCol, targetRow);
            } else {
                int cellsPastEdge = Math.max(targetCol - maxI(), minJ() - targetRow);
                markVisited(targetCol - cellsPastEdge, targetRow + cellsPastEdge);
            }
        }
    }
}
