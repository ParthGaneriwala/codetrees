public Dataset[] cluster(Dataset data) {
    this.data = data;
    // dm=new NormalizedEuclideanDistance(data);
    dm = new EuclideanDistance();
    // Filter filter=new NormalizeMean();
    // data=filter.filterDataset(data);
    Vector<TaggedInstance> SP;
    if (normalize)
        SP = normalize(data);
    else
        SP = dontnormalize(data);
    System.out.println("Remaining datapoints = " + SP.size());
    // Vector<Instance> SP = new Vector<Instance>();
    // for (int i = 0; i < norm.size(); i++) {
    // SP.add(data.getInstance(i));
    // }
    int NRNOCONV = 0;
    int maxNRNOCONV = 2;
    int TOOFEWPOINTS = 0;
    int TFPTH = 10;
    int BPR = 0;
    int RRES = 0;
    int BPRTH = 10;
    double REITERTHR = 0.1;
    E = data.noAttributes();
    if (E > 170)
        throw new RuntimeException("AQBC is unable to work for more than 170 dimensions! This is a limitation of the Gamma function");
    // int D = E - 2;
    double R = Math.sqrt(E - 1);
    double EXTTRESH = R / 2.0f;
    int MINNRGENES = 2;
    int cluster = 0;
    while (NRNOCONV < maxNRNOCONV && TOOFEWPOINTS < TFPTH && BPR < BPRTH && RRES < 2) {
        // determine cluster center
        boolean clusterLocalisationConverged = wan_shr_adap(SP, EXTTRESH);
        if (clusterLocalisationConverged) {
            System.out.println("Found cluster -> EM");
            // System.out.println("EXTTRESH2 = "+EXTTRESH2);
            // optimize cluster quality
            System.out.println("Starting EM");
            boolean emConverged = exp_max(SP, ME, EXTTRESH2, S);
            if (emConverged) {
                System.out.println("EM converged, predicting radius...");
                // System.exit(-1);
                NRNOCONV = 0;
                if (Math.abs(RADNW - EXTTRESH) / EXTTRESH < REITERTHR) {
                    Vector<TaggedInstance> Q = retrieveInstances(SP, ME, RADNW);
                    if (Q.size() == 0) {
                        System.err.println("Significance level not reached");
                    }
                    if (Q.size() > MINNRGENES) {
                        cluster++;
                        outputCluster(Q, cluster);
                        removeInstances(SP, Q);
                        TOOFEWPOINTS = 0;
                        EXTTRESH = RADNW;
                    } else {
                        removeInstances(SP, Q);
                        TOOFEWPOINTS++;
                    }
                } else {
                    EXTTRESH = RADNW;
                    BPR++;
                    if (BPR == BPRTH) {
                        System.out.println("Radius cannot be predicted!");
                    } else {
                        System.out.println("Trying new radius...");
                    }
                }
            } else {
                NRNOCONV++;
                if (NRNOCONV < maxNRNOCONV) {
                    EXTTRESH = R / 2;
                    RRES++;
                    System.out.println("Resetting radius to: " + EXTTRESH);
                    if (RRES == 2) {
                        System.out.println("No convergence: Algorithm aborted - RRES exceeded!");
                        break;
                    } else {
                        BPR = 0;
                    }
                } else {
                    System.out.println("No convergence: Algorithm aborted - NRNOCONV exceeded!");
                    break;
                }
            }
            if (TOOFEWPOINTS == TFPTH) {
                System.out.println("No more significant clusters found: Algorithms aborted!");
                break;
            }
        }
    }
    Dataset[] output = new Dataset[clusters.size()];
    for (int i = 0; i < clusters.size(); i++) {
        output[i] = clusters.get(i);
    }
    return output;
}
