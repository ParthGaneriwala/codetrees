private static TimeWarpInfo constrainedTimeWarp(TimeSeries tsI, TimeSeries tsJ, SearchWindow window) {
    WindowMatrix costMatrix = new WindowMatrix(window);
    int maxI = tsI.size() - 1;
    int maxJ = tsJ.size() - 1;
    for (Iterator matrixIterator = window.iterator(); matrixIterator.hasNext(); ) {
        ColMajorCell currentCell = (ColMajorCell) matrixIterator.next();
        int i = currentCell.getCol();
        int j = currentCell.getRow();
        if (i == 0 && j == 0)
            costMatrix.put(i, j, euclideanDist(tsI.getMeasurementVector(0), tsJ.getMeasurementVector(0)));
        else if (i == 0)
            costMatrix.put(i, j, euclideanDist(tsI.getMeasurementVector(0), tsJ.getMeasurementVector(j)) + costMatrix.get(i, j - 1));
        else if (j == 0) {
            costMatrix.put(i, j, euclideanDist(tsI.getMeasurementVector(i), tsJ.getMeasurementVector(0)) + costMatrix.get(i - 1, j));
        } else {
            double minGlobalCost = Math.min(costMatrix.get(i - 1, j), Math.min(costMatrix.get(i - 1, j - 1), costMatrix.get(i, j - 1)));
            costMatrix.put(i, j, minGlobalCost + euclideanDist(tsI.getMeasurementVector(i), tsJ.getMeasurementVector(j)));
        }
    }
    double minimumCost = costMatrix.get(maxI, maxJ);
    WarpPath minCostPath = new WarpPath((maxI + maxJ) - 1);
    int i = maxI;
    int j = maxJ;
    minCostPath.addFirst(i, j);
    for (; i > 0 || j > 0; minCostPath.addFirst(i, j)) {
        double diagCost;
        if (i > 0 && j > 0)
            diagCost = costMatrix.get(i - 1, j - 1);
        else
            diagCost = (1.0D / 0.0D);
        double leftCost;
        if (i > 0)
            leftCost = costMatrix.get(i - 1, j);
        else
            leftCost = (1.0D / 0.0D);
        double downCost;
        if (j > 0)
            downCost = costMatrix.get(i, j - 1);
        else
            downCost = (1.0D / 0.0D);
        if (diagCost <= leftCost && diagCost <= downCost) {
            i--;
            j--;
            continue;
        }
        if (leftCost < diagCost && leftCost < downCost) {
            i--;
            continue;
        }
        if (downCost < diagCost && downCost < leftCost) {
            j--;
            continue;
        }
        if (i <= j)
            j--;
        else
            i--;
    }
    costMatrix.freeMem();
    return new TimeWarpInfo(minimumCost, minCostPath);
}
