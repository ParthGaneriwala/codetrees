private static TimeWarpInfo DynamicTimeWarp(TimeSeries tsI, TimeSeries tsJ) {
    double[][] costMatrix = new double[tsI.size()][tsJ.size()];
    int maxI = tsI.size() - 1;
    int maxJ = tsJ.size() - 1;
    costMatrix[0][0] = euclideanDist(tsI.getMeasurementVector(0), tsJ.getMeasurementVector(0));
    for (int j = 1; j <= maxJ; j++) costMatrix[0][j] = costMatrix[0][j - 1] + euclideanDist(tsI.getMeasurementVector(0), tsJ.getMeasurementVector(j));
    for (int i = 1; i <= maxI; i++) {
        costMatrix[i][0] = costMatrix[i - 1][0] + euclideanDist(tsI.getMeasurementVector(i), tsJ.getMeasurementVector(0));
        for (int j = 1; j <= maxJ; j++) {
            double minGlobalCost = Math.min(costMatrix[i - 1][j], Math.min(costMatrix[i - 1][j - 1], costMatrix[i][j - 1]));
            costMatrix[i][j] = minGlobalCost + euclideanDist(tsI.getMeasurementVector(i), tsJ.getMeasurementVector(j));
        }
    }
    double minimumCost = costMatrix[maxI][maxJ];
    WarpPath minCostPath = new WarpPath((maxI + maxJ) - 1);
    int i = maxI;
    int j = maxJ;
    minCostPath.addFirst(i, j);
    for (; i > 0 || j > 0; minCostPath.addFirst(i, j)) {
        double diagCost;
        if (i > 0 && j > 0)
            diagCost = costMatrix[i - 1][j - 1];
        else
            diagCost = (1.0D / 0.0D);
        double leftCost;
        if (i > 0)
            leftCost = costMatrix[i - 1][j];
        else
            leftCost = (1.0D / 0.0D);
        double downCost;
        if (j > 0)
            downCost = costMatrix[i][j - 1];
        else
            downCost = (1.0D / 0.0D);
        if (diagCost <= leftCost && diagCost <= downCost) {
            i--;
            j--;
            continue;
        }
        if (leftCost < diagCost && leftCost < downCost) {
            i--;
            continue;
        }
        if (downCost < diagCost && downCost < leftCost) {
            j--;
            continue;
        }
        if (i <= j)
            j--;
        else
            i--;
    }
    return new TimeWarpInfo(minimumCost, minCostPath);
}
