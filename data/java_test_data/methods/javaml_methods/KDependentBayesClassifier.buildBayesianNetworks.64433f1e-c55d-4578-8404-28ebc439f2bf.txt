private void buildBayesianNetworks() {
    // calculate/store only needed CMI values (=for highest k value)
    System.out.println("Start calculating MI/CMI");
    calculateNeededCMIbyMIorder();
    // fetch MI sorted features and CMI
    Vector<Integer> usedFeatures = trainResult.getUsedFeatures_SortedMI();
    HashMap<Integer, Object[]> ImaxLL = trainResult.getBNBB_XiXjinS_SortedCMI();
    System.out.println("Start building BN");
    // BN for k0 will be base for latter networks
    BayesNet BN = trainResult.getBayesNet(kparents[0]).getBN().cloon();
    // will be cloned for all BN
    BN.setIC(numFeatures, initialCap);
    // kparents is sorted by el1<el2
    for (int r = 0; r < kparents.length; r++) {
        // KDB 0 has no edges
        if (kparents[r] != 0) {
            // always o-1 elements in S)
            for (int o = 1; o < usedFeatures.size(); o++) {
                // select feature with highest (next) MI
                Integer Imax = usedFeatures.get(o);
                // retrieve parents of this feature (already sorted by
                // highest needed CMI)
                Object[] nextXjArray = ImaxLL.get(Imax);
                // in theory: m variable
                int endAmountOfEdges = Math.min(kparents[r], nextXjArray.length);
                int beginAmountOfEdges;
                // r-1 would be -1 ,must be 0
                if (r == 0) {
                    beginAmountOfEdges = 0;
                } else {
                    beginAmountOfEdges = kparents[r - 1];
                }
                // if stops at 7 links so index 0-6 so -1
                for (int index = beginAmountOfEdges; index <= endAmountOfEdges - 1; index++) {
                    BN.addParent(Imax, (Integer) nextXjArray[index]);
                }
            }
            // clone network to be independent of future edge adding
            trainResult.getBayesNet(kparents[r]).setBN(BN.cloon());
        }
    }
// end k
}
