private void gainCheck(int FN, int IndexFirstElementInCurrentBin, int IndexLastElementInCurrentBin) {
    // border check (at least 2 elements)
    if (IndexLastElementInCurrentBin - IndexFirstElementInCurrentBin >= 1) {
        Border resultBorder = calcLowestEntropyFunction(FN, IndexFirstElementInCurrentBin, IndexLastElementInCurrentBin);
        double LEF = resultBorder.getlowestLEF();
        HashMap<Integer, Double> classfreqBin = calcClassLabelFreqInS(FN, IndexFirstElementInCurrentBin, IndexLastElementInCurrentBin);
        int N = IndexLastElementInCurrentBin - IndexFirstElementInCurrentBin + 1;
        double EntS = calcEntropy(classfreqBin);
        double gain = EntS - LEF;
        int k = classfreqBin.size();
        int k1 = resultBorder.getK1();
        int k2 = resultBorder.getK2();
        double deltaLEF = ((Math.log(Math.pow(3, k) - 2)) / Math.log(2)) - (k * EntS - k1 * resultBorder.getEntropyS1() - k2 * resultBorder.getEntropyS2());
        double RightMember = ((Math.log(N - 1) / Math.log(2)) / N);
        RightMember += (deltaLEF / N);
        if (gain >= RightMember) {
            // left and right from border
            borders.add(resultBorder.getTmin());
            gainCheck(FN, IndexFirstElementInCurrentBin, resultBorder.getTminIndex() - 1);
            gainCheck(FN, resultBorder.getTminIndex(), IndexLastElementInCurrentBin);
        }
    }
}
