private Hashtable<Integer, Hashtable<Double, ClassCounter_compact>> conditionalFreq_compact(Dataset Instances2Train) {
    // will still need division by total count of class frequency to become
    // the conditional probs
    // this will be done on the fly when calculating the result
    // Initialize hashtable giving conditional prob of each class given a
    // feature
    Hashtable<Integer, Hashtable<Double, ClassCounter_compact>> featureName_HT = new Hashtable<Integer, Hashtable<Double, ClassCounter_compact>>(numFeatures);
    // = new
    Hashtable<Double, ClassCounter_compact> featureValue_CC;
    for (Instance inst : Instances2Train) {
        for (Object key : inst.keySet()) {
            int featureName = (Integer) key;
            Double featureValue = inst.value((Integer) key);
            if (!featureName_HT.containsKey(featureName)) {
                featureValue_CC = new Hashtable<Double, ClassCounter_compact>();
                featureValue_CC.put(featureValue, new ClassCounter_compact(numClasses));
                featureName_HT.put(featureName, featureValue_CC);
            } else {
                if (!featureName_HT.get(featureName).containsKey(featureValue)) {
                    featureName_HT.get(featureName).put(featureValue, new ClassCounter_compact(classes.length));
                }
            }
            featureName_HT.get(featureName).get(featureValue).setCountClass(featureName_HT.get(featureName).get(featureValue).getCountClass(Classname2IndexCCountermap.get(inst.classValue())) + 1, Classname2IndexCCountermap.get(inst.classValue()));
        }
    }
    numFeatures = featureName_HT.size();
    return (featureName_HT);
}
