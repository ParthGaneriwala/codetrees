private double[] pairWise(Object p, Object q, Dataset data) {
    double[] divergence = new double[data.noAttributes()];
    /*
         * For probability distributions P and Q of a discrete random variable
         * the Kï¿½L divergence of Q from P is defined to be:
         * 
         * D_KL(P|Q)=sum_i(P(i)log(P(i)/Q(i)))
         */
    double maxSum = 0;
    for (int i = 0; i < data.noAttributes(); i++) {
        double sum = 0;
        double[] countQ = new double[bins];
        double[] countP = new double[bins];
        double pCount = 0, qCount = 0;
        for (Instance inst : data) {
            if (inst.classValue().equals(q)) {
                countQ[(int) inst.value(i)]++;
                qCount++;
            }
            if (inst.classValue().equals(p)) {
                countP[(int) inst.value(i)]++;
                pCount++;
            }
        }
        for (int j = 0; j < countP.length; j++) {
            countP[j] /= pCount;
            countQ[j] /= qCount;
            /*
                 * Probabilities should never be really 0, they can be small
                 * though
                 */
            if (countP[j] == 0)
                countP[j] = 0.0000001;
            if (countQ[j] == 0)
                countQ[j] = 0.0000001;
            sum += countP[j] * Math.log(countP[j] / countQ[j]);
        }
        divergence[i] = sum;
        /* Keep track of highest value */
        if (sum > maxSum)
            maxSum = sum;
    }
    /* Normalize to [0,1] */
    for (int i = 0; i < data.noAttributes(); i++) {
        divergence[i] /= maxSum;
    }
    return divergence;
}
