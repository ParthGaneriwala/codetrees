private void doBubbleExpAdaptation() {
    double[] input;
    // location of a winner node
    double[] wLocation;
    double s = (double) steps;
    // width cache
    double wCache;
    double exp;
    for (int n = 0; n < steps; n++) {
        // adapts the width
        wCache = Math.ceil(width * (1 - (n / s)));
        // function as it is
        // a function of
        // time.
        exp = math.expLRP(n, lrate, steps);
        input = iVector.getNodeValuesAt(generator.nextInt(iVectorSize));
        index = resolveIndexOfWinningNeuron(input);
        wLocation = wV.getNodeLocationAt(index);
        for (int h = 0; h < wVectorSize; h++) {
            wV.setNodeValuesAt(h, math.bubbleAdaptation(input, wV.getNodeValuesAt(h), wLocation, wV.getNodeLocationAt(h), wCache, exp));
        }
    }
}
