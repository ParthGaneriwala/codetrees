/**
 * Calculate/store only needed CMI values (=for highest k value)
 */
private void calculateNeededCMIbyMIorder() {
    // calculate Mutual Information values and store it
    LinkedList<Integer> MI = calculateMutualInformation_Elvira();
    // if we calculate cmi values for highest k we can build all BN with
    // other k values out of it
    // this is the KDB building Bayesian network algorithm: cfr theory
    // filling in vertexes + KDB0
    BayesNet BN = new BayesNet();
    Vector<Integer> usedFeatures = new Vector<Integer>(numFeatures);
    Iterator MIIt = MI.iterator();
    HashMap<Integer, Object[]> ImaxLL = new HashMap<Integer, Object[]>(initialCap);
    while ((usedFeatures.size() < MI.size()) && (MIIt.hasNext())) {
        int Imax = (Integer) MIIt.next();
        if (!BN.getNodes().contains(Imax)) {
            BN.addNode(Imax);
        }
        int m = Math.min(usedFeatures.size(), maxkparents);
        // only calculate m highest CMI values out of list N
        // output: sorted features Xj belonging to those highest cmi values
        LinkedList<Integer> usedFeatures_SortedCMIvalueListLL = calculateCMI_Memory(Imax, (Vector<Integer>) usedFeatures.clone(), m);
        Object[] usedFeatures_SortedCMIvalueA = usedFeatures_SortedCMIvalueListLL.toArray();
        ImaxLL.put(Imax, usedFeatures_SortedCMIvalueA);
        // store list as features not MI values
        usedFeatures.add(Imax);
    }
    trainResult.setBNBB_XiXjinS_SortedCMI(ImaxLL);
    trainResult.setUsedFeatures_SortedMI(usedFeatures);
    // set basic network,topology later when network completed
    for (int r = 0; r < kparents.length; r++) {
        trainResult.setBayesNet(new BayesKSolution(BN, null), kparents[r]);
    }
}
