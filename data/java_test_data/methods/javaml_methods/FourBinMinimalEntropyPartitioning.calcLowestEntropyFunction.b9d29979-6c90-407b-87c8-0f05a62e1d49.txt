/**
 * Calculate Lowest Entropy Function
 *
 * @param FN
 * feature name
 * @param leftborder
 * begin of range
 * @param rightborder
 * end of range
 */
private Border calcLowestEntropyFunction(int FN, int index1stElement, int indexLastElement) {
    // f.e. 3 elements so index 0,1,2 so interval 0-1 , 1-2, 2-3
    // if border is behind first element so index 1 the left bin consists of
    // 1 and the right bin consist of 3-1=2
    Border border = new Border();
    double lowestLEF = Double.MAX_VALUE;
    // -1 because of 3 borders
    for (int border1index = index1stElement + 1; border1index <= indexLastElement - 2; border1index++) {
        for (int border2index = border1index + 1; border2index <= indexLastElement - 1; border2index++) {
            for (int border3index = border2index + 1; border3index <= indexLastElement; border3index++) {
                int sizeBinLeft = border1index - index1stElement;
                int sizeBinMid1 = border2index - border1index;
                int sizeBinMid2 = border3index - border2index;
                int sizeBinRight = indexLastElement - border3index + 1;
                HashMap<Integer, Double> classfreqBinS1 = calcClassLabelFreqInS(FN, index1stElement, border1index - 1);
                HashMap<Integer, Double> classfreqBinS2 = calcClassLabelFreqInS(FN, border1index, border2index - 1);
                HashMap<Integer, Double> classfreqBinS3 = calcClassLabelFreqInS(FN, border2index, border3index - 1);
                HashMap<Integer, Double> classfreqBinS4 = calcClassLabelFreqInS(FN, border3index, indexLastElement);
                double EntS1 = calcEntropy(classfreqBinS1);
                double EntS2 = calcEntropy(classfreqBinS2);
                double EntS3 = calcEntropy(classfreqBinS3);
                double EntS4 = calcEntropy(classfreqBinS4);
                double LEF = ((double) (sizeBinLeft) / (double) (sizeBinLeft + sizeBinRight + sizeBinMid1 + sizeBinMid2)) * (EntS1);
                LEF += ((double) sizeBinMid1) / ((double) (sizeBinLeft + sizeBinRight + sizeBinMid1 + sizeBinMid2)) * (EntS2);
                LEF += ((double) sizeBinMid2) / ((double) (sizeBinLeft + sizeBinRight + sizeBinMid1 + sizeBinMid2)) * (EntS3);
                LEF += ((double) sizeBinRight) / ((double) (sizeBinLeft + sizeBinRight + sizeBinMid1 + sizeBinMid2)) * (EntS4);
                if (LEF < lowestLEF) {
                    lowestLEF = LEF;
                    border.setlowestLEF(LEF);
                    Vector<Double> v = new Vector<Double>();
                    v.add(workingfValues[border1index]);
                    v.add(workingfValues[border2index]);
                    v.add(workingfValues[border3index]);
                    border.setTMinC(v);
                }
            }
        }
    }
    return border;
}
