@Override
public Map<Object, Double> classDistribution(Instance instance) {
    if (training == null)
        throw new TrainingRequiredException();
    /* Get nearest neighbors */
    // //training.kNearest(k,
    Object[] neighbors = tree.nearest(InstanceTools.array(instance), k);
    // euc,
    // instance);
    /* Build distribution map */
    HashMap<Object, Double> out = new HashMap<Object, Double>();
    for (Object o : training.classes()) out.put(o, 0.0);
    for (Object o : neighbors) {
        Instance i = (Instance) o;
        out.put(i.classValue(), out.get(i.classValue()) + 1);
    }
    double min = k;
    double max = 0;
    for (Object key : out.keySet()) {
        double val = out.get(key);
        if (val > max)
            max = val;
        if (val < min)
            min = val;
    }
    /* Normalize distribution map */
    if (max != min) {
        for (Object key : out.keySet()) {
            out.put(key, (out.get(key) - min) / (max - min));
        }
    }
    return out;
}
