public Object[] nearest(double[] key, int n) {
    if (n < 0 || n > m_count) {
        throw new IllegalArgumentException("Number of neighbors (" + n + ") cannot" + " be negative or greater than number of nodes (" + m_count + ").");
    }
    if (key.length != m_K) {
        throw new RuntimeException("KDTree: wrong key size!");
    }
    Object[] nbrs = new Object[n];
    NearestNeighborList nnl = new NearestNeighborList(n);
    // initial call is with infinite hyper-rectangle and max distance
    HRect hr = HRect.infiniteHRect(key.length);
    double max_dist_sqd = Double.MAX_VALUE;
    HPoint keyp = new HPoint(key);
    KDNode.nnbr(m_root, keyp, hr, max_dist_sqd, 0, m_K, nnl);
    for (int i = 0; i < n; ++i) {
        KDNode kd = (KDNode) nnl.removeHighest();
        nbrs[n - i - 1] = kd.v;
    }
    return nbrs;
}
