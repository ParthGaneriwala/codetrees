public Dataset[] cluster(Dataset data) {
    SparseMatrix dataSparseMatrix = new SparseMatrix();
    for (int i = 0; i < data.size(); i++) {
        for (int j = 0; j <= i; j++) {
            Instance x = data.instance(i);
            Instance y = data.instance(j);
            double dist = dm.measure(x, y);
            if (dist > maxZero)
                dataSparseMatrix.add(i, j, dm.measure(x, y));
        }
    }
    MarkovClustering mcl = new MarkovClustering();
    SparseMatrix matrix = mcl.run(dataSparseMatrix, maxResidual, pGamma, loopGain, maxZero);
    // convert matrix to output dataset:
    int[] sparseMatrixSize = matrix.getSize();
    // find number of attractors (non zero values) in diagonal
    int attractors = 0;
    for (int i = 0; i < sparseMatrixSize[0]; i++) {
        double val = matrix.get(i, i);
        if (val != 0) {
            attractors++;
        }
    }
    // create cluster for each attractor with value close to 1
    Vector<Vector<Instance>> finalClusters = new Vector<Vector<Instance>>();
    for (int i = 0; i < sparseMatrixSize[0]; i++) {
        Vector<Instance> cluster = new Vector<Instance>();
        double val = matrix.get(i, i);
        if (val >= 0.98) {
            for (int j = 0; j < sparseMatrixSize[0]; j++) {
                double value = matrix.get(j, i);
                if (value != 0) {
                    cluster.add(data.instance(j));
                }
            }
            finalClusters.add(cluster);
        }
    }
    Dataset[] output = new Dataset[finalClusters.size()];
    for (int i = 0; i < finalClusters.size(); i++) {
        output[i] = new DefaultDataset();
    }
    for (int i = 0; i < finalClusters.size(); i++) {
        Vector<Instance> getCluster = new Vector<Instance>();
        getCluster = finalClusters.get(i);
        for (int j = 0; j < getCluster.size(); j++) {
            output[i].add(getCluster.get(j));
        }
    }
    return output;
}
