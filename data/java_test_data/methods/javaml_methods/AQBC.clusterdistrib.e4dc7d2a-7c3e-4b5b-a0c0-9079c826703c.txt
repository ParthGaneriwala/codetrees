private double[] clusterdistrib(double[] r, double VAR, double D, double R) {
    // System.out.println("\t\tCD:VAR = "+VAR);
    // System.out.println("\t\tCD:D = "+D);
    // System.out.println("\t\tCD:R = "+R);
    // System.out.println("\t\tCD:r = "+Arrays.toString(r));
    double[] out = new double[r.length];
    if (MathUtils.eq(VAR, 0)) {
        // System.out.println("\t\tCD: VAR is considered ZERO !!!");
        for (int i = 0; i < r.length; i++) {
            if (MathUtils.eq(r[i], 0)) {
                out[i] = Float.POSITIVE_INFINITY;
            }
        }
    } else {
        double SD = (2 * Math.pow(Math.PI, D / 2)) / (GammaFunction.gamma(D / 2));
        double tmp_piVAR = 2 * Math.PI * VAR;
        double tmp_piVARpow = Math.pow(tmp_piVAR, D / 2);
        double tmp_piVARpowINV = 1 / tmp_piVARpow;
        for (int i = 0; i < r.length; i++) {
            double tmp_exp = -((r[i] * r[i]) / (2 * VAR));
            // System.out.println("\t\tMath.pow(r[i],D-1) =
            // "+Math.pow(r[i],D-1));
            // System.out.println("\t\tCD:tmp_exp = "+tmp_exp);
            // System.out.println("\t\tCD:exp(tmp_exp) =
            // "+Math.exp(tmp_exp));
            out[i] = (float) (SD * tmp_piVARpowINV * Math.pow(r[i], D - 1) * Math.exp(tmp_exp));
        }
        for (int i = 0; i < r.length; i++) {
            if (MathUtils.eq(r[i], 0))
                out[i] = 1;
        }
    }
    return out;
}
