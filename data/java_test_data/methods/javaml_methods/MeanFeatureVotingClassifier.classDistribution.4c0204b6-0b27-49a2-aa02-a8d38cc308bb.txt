@Override
public Map<Object, Double> classDistribution(Instance instance) {
    HashMap<Object, Double> voting = new HashMap<Object, Double>();
    int count = 0;
    for (Object o : parentClasses) {
        voting.put(o, 0.0);
    }
    for (int i = 0; i < instance.noAttributes(); i++) {
        double min = Double.POSITIVE_INFINITY;
        Object vote = null;
        for (Object o : mean.keySet()) {
            double d = Math.abs(instance.value(i) - mean.get(o).value(i));
            if (d < min) {
                min = d;
                vote = o;
            }
        }
        voting.put(vote, voting.get(vote) + 1);
        count++;
    }
    for (Object o : voting.keySet()) {
        voting.put(o, voting.get(o) / count);
    }
    return voting;
}
