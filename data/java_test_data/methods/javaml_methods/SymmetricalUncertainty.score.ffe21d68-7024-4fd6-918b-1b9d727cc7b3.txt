public double score(int attribute) {
    // int ii, jj;
    // int ni = training.numValues(attribute) + 1;
    // int nj = training.numClasses() + 1;
    double[][] counts = new double[bins][training.classes().size()];
    List<Object> classes = new Vector<Object>();
    classes.addAll(training.classes());
    // System.out.println(training);
    for (Instance inst : training) {
        // jj = (int) inst.classValue();
        if ((int) inst.value(attribute) >= bins) {
            System.err.println("Exceeding bins: " + bins);
        }
        if (classes.indexOf(inst.classValue()) >= training.classes().size())
            System.err.println("Exceeding classes: " + training.classes().size());
        counts[(int) inst.value(attribute)][classes.indexOf(inst.classValue())]++;
    }
    return ContingencyTables.symmetricalUncertainty(counts);
}
