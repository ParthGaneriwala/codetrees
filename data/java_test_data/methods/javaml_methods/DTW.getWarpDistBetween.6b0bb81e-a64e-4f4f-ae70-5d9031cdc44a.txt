public static double getWarpDistBetween(TimeSeries tsI, TimeSeries tsJ, SearchWindow window) {
    PartialWindowMatrix costMatrix = new PartialWindowMatrix(window);
    int maxI = tsI.size() - 1;
    int maxJ = tsJ.size() - 1;
    for (Iterator matrixIterator = window.iterator(); matrixIterator.hasNext(); ) {
        ColMajorCell currentCell = (ColMajorCell) matrixIterator.next();
        int i = currentCell.getCol();
        int j = currentCell.getRow();
        if (i == 0 && j == 0)
            costMatrix.put(i, j, euclideanDist(tsI.getMeasurementVector(0), tsJ.getMeasurementVector(0)));
        else if (i == 0)
            costMatrix.put(i, j, euclideanDist(tsI.getMeasurementVector(0), tsJ.getMeasurementVector(j)) + costMatrix.get(i, j - 1));
        else if (j == 0) {
            costMatrix.put(i, j, euclideanDist(tsI.getMeasurementVector(i), tsJ.getMeasurementVector(0)) + costMatrix.get(i - 1, j));
        } else {
            double minGlobalCost = Math.min(costMatrix.get(i - 1, j), Math.min(costMatrix.get(i - 1, j - 1), costMatrix.get(i, j - 1)));
            costMatrix.put(i, j, minGlobalCost + euclideanDist(tsI.getMeasurementVector(i), tsJ.getMeasurementVector(j)));
        }
    }
    return costMatrix.get(maxI, maxJ);
}
