protected void updateClassifier(Instance instance, boolean filter) throws Exception {
    if (!instance.classIsMissing()) {
        if (filter) {
            if (m_replaceMissing != null) {
                m_replaceMissing.input(instance);
                instance = m_replaceMissing.output();
            }
            if (m_nominalToBinary != null) {
                m_nominalToBinary.input(instance);
                instance = m_nominalToBinary.output();
            }
            if (m_normalize != null) {
                m_normalize.input(instance);
                instance = m_normalize.output();
            }
        }
        double wx = dotProd(instance, m_weights, instance.classIndex());
        double y;
        double z;
        if (instance.classAttribute().isNominal()) {
            y = (instance.classValue() == 0) ? -1 : 1;
            z = y * (wx + m_weights[m_weights.length - 1]);
        } else {
            y = instance.classValue();
            z = y - (wx + m_weights[m_weights.length - 1]);
            y = 1;
        }
        // Compute multiplier for weight decay
        double multiplier = 1.0;
        if (m_numInstances == 0) {
            multiplier = 1.0 - (m_learningRate * m_lambda) / m_t;
        } else {
            multiplier = 1.0 - (m_learningRate * m_lambda) / m_numInstances;
        }
        for (int i = 0; i < m_weights.length - 1; i++) {
            m_weights[i] *= multiplier;
        }
        // if (m_loss != HINGE || (z < 1)) {
        if (m_loss == SQUAREDLOSS || m_loss == LOGLOSS || m_loss == HUBER || (m_loss == HINGE && (z < 1)) || (m_loss == EPSILON_INSENSITIVE && Math.abs(z) > m_epsilon)) {
            // Compute Factor for updates
            double factor = m_learningRate * y * dloss(z);
            // Update coefficients for attributes
            int n1 = instance.numValues();
            for (int p1 = 0; p1 < n1; p1++) {
                int indS = instance.index(p1);
                if (indS != instance.classIndex() && !instance.isMissingSparse(p1)) {
                    m_weights[indS] += factor * instance.valueSparse(p1);
                }
            }
            // update the bias
            m_weights[m_weights.length - 1] += factor;
        }
        m_t++;
    }
}
