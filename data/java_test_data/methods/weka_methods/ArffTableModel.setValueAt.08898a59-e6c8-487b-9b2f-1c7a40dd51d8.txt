public void setValueAt(Object aValue, int rowIndex, int columnIndex, boolean notify) {
    int type;
    int index;
    String tmp;
    Instance inst;
    Attribute att;
    Object oldValue;
    if (!m_IgnoreChanges) {
        addUndoPoint();
    }
    // Is this actually an instance weight?
    if (m_ShowInstanceWeights && columnIndex == 1) {
        double oldWeight = m_Data.instance(rowIndex).weight();
        try {
            double newWeight = Double.parseDouble(aValue.toString());
            if (oldWeight != newWeight) {
                m_Data.instance(rowIndex).setWeight(newWeight);
            } else {
                return;
            }
        } catch (Exception e) {
        // ignore
        }
        if (notify) {
            notifyListener(new TableModelEvent(this, rowIndex, columnIndex));
        }
        return;
    }
    oldValue = getValueAt(rowIndex, columnIndex);
    type = getType(rowIndex, columnIndex);
    index = getAttributeIndex(columnIndex);
    inst = m_Data.instance(rowIndex);
    att = inst.attribute(index);
    // missing?
    if (aValue == null) {
        inst.setValue(index, Utils.missingValue());
    } else {
        tmp = aValue.toString();
        switch(type) {
            case Attribute.DATE:
                try {
                    att.parseDate(tmp);
                    inst.setValue(index, att.parseDate(tmp));
                } catch (Exception e) {
                // ignore
                }
                break;
            case Attribute.NOMINAL:
                if (att.indexOfValue(tmp) > -1) {
                    inst.setValue(index, att.indexOfValue(tmp));
                }
                break;
            case Attribute.STRING:
                inst.setValue(index, tmp);
                break;
            case Attribute.NUMERIC:
                try {
                    Double.parseDouble(tmp);
                    inst.setValue(index, Double.parseDouble(tmp));
                } catch (Exception e) {
                // ignore
                }
                break;
            case Attribute.RELATIONAL:
                try {
                    inst.setValue(index, inst.attribute(index).addRelation((Instances) aValue));
                } catch (Exception e) {
                // ignore
                }
                break;
            default:
                throw new IllegalArgumentException("Unsupported Attribute type: " + type + "!");
        }
    }
    // notify only if the value has changed!
    if (notify && (!("" + oldValue).equals("" + aValue))) {
        notifyListener(new TableModelEvent(this, rowIndex, columnIndex));
    }
}
