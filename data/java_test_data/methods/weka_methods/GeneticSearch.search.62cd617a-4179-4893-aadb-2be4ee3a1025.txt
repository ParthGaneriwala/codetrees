// class BayesNetRepresentation
@Override
protected void search(BayesNet bayesNet, Instances instances) throws Exception {
    // sanity check
    if (getDescendantPopulationSize() < getPopulationSize()) {
        throw new Exception("Descendant PopulationSize should be at least Population Size");
    }
    if (!getUseCrossOver() && !getUseMutation()) {
        throw new Exception("At least one of mutation or cross-over should be used");
    }
    m_random = new Random(m_nSeed);
    // keeps track of best structure found so far
    BayesNet bestBayesNet;
    // keeps track of score pf best structure found so far
    double fBestScore = calcScore(bayesNet);
    // initialize bestBayesNet
    bestBayesNet = new BayesNet();
    bestBayesNet.m_Instances = instances;
    bestBayesNet.initStructure();
    copyParentSets(bestBayesNet, bayesNet);
    // initialize population
    BayesNetRepresentation[] population = new BayesNetRepresentation[getPopulationSize()];
    for (int i = 0; i < getPopulationSize(); i++) {
        population[i] = new BayesNetRepresentation(instances.numAttributes());
        population[i].randomInit();
        if (population[i].getScore() > fBestScore) {
            copyParentSets(bestBayesNet, bayesNet);
            fBestScore = population[i].getScore();
        }
    }
    // go do the search
    for (int iRun = 0; iRun < m_nRuns; iRun++) {
        // create descendants
        BayesNetRepresentation[] descendantPopulation = new BayesNetRepresentation[getDescendantPopulationSize()];
        for (int i = 0; i < getDescendantPopulationSize(); i++) {
            descendantPopulation[i] = population[m_random.nextInt(getPopulationSize())].copy();
            if (getUseMutation()) {
                if (getUseCrossOver() && m_random.nextBoolean()) {
                    descendantPopulation[i].crossOver(population[m_random.nextInt(getPopulationSize())]);
                } else {
                    descendantPopulation[i].mutate();
                }
            } else {
                // use crossover
                descendantPopulation[i].crossOver(population[m_random.nextInt(getPopulationSize())]);
            }
            if (descendantPopulation[i].getScore() > fBestScore) {
                copyParentSets(bestBayesNet, bayesNet);
                fBestScore = descendantPopulation[i].getScore();
            }
        }
        // select new population
        boolean[] bSelected = new boolean[getDescendantPopulationSize()];
        for (int i = 0; i < getPopulationSize(); i++) {
            int iSelected = 0;
            if (m_bUseTournamentSelection) {
                // use tournament selection
                iSelected = m_random.nextInt(getDescendantPopulationSize());
                while (bSelected[iSelected]) {
                    iSelected = (iSelected + 1) % getDescendantPopulationSize();
                }
                int iSelected2 = m_random.nextInt(getDescendantPopulationSize());
                while (bSelected[iSelected2]) {
                    iSelected2 = (iSelected2 + 1) % getDescendantPopulationSize();
                }
                if (descendantPopulation[iSelected2].getScore() > descendantPopulation[iSelected].getScore()) {
                    iSelected = iSelected2;
                }
            } else {
                // find best scoring network in population
                while (bSelected[iSelected]) {
                    iSelected++;
                }
                double fScore = descendantPopulation[iSelected].getScore();
                for (int j = 0; j < getDescendantPopulationSize(); j++) {
                    if (!bSelected[j] && descendantPopulation[j].getScore() > fScore) {
                        fScore = descendantPopulation[j].getScore();
                        iSelected = j;
                    }
                }
            }
            population[i] = descendantPopulation[iSelected];
            bSelected[iSelected] = true;
        }
    }
    // restore current network to best network
    copyParentSets(bayesNet, bestBayesNet);
    // free up memory
    bestBayesNet = null;
    g_bIsSquare = null;
}
