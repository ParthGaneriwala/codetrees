@Override
public double[] getMembershipValues(Instance instance) throws Exception {
    if (m_zeroR != null) {
        double[] m = new double[1];
        m[0] = instance.weight();
        return m;
    } else {
        // Set up array for membership values
        double[] a = new double[numElements()];
        // Initialize queues
        Queue<Double> queueOfWeights = new LinkedList<Double>();
        Queue<Tree> queueOfNodes = new LinkedList<Tree>();
        queueOfWeights.add(instance.weight());
        queueOfNodes.add(m_Tree);
        int index = 0;
        // While the queue is not empty
        while (!queueOfNodes.isEmpty()) {
            a[index++] = queueOfWeights.poll();
            Tree node = queueOfNodes.poll();
            // Is node a leaf?
            if (node.m_Attribute <= -1) {
                continue;
            }
            // Compute weight distribution
            double[] weights = new double[node.m_Successors.length];
            if (instance.isMissing(node.m_Attribute)) {
                System.arraycopy(node.m_Prop, 0, weights, 0, node.m_Prop.length);
            } else if (m_Info.attribute(node.m_Attribute).isNominal()) {
                weights[(int) instance.value(node.m_Attribute)] = 1.0;
            } else {
                if (instance.value(node.m_Attribute) < node.m_SplitPoint) {
                    weights[0] = 1.0;
                } else {
                    weights[1] = 1.0;
                }
            }
            for (int i = 0; i < node.m_Successors.length; i++) {
                queueOfNodes.add(node.m_Successors[i]);
                queueOfWeights.add(a[index - 1] * weights[i]);
            }
        }
        return a;
    }
}
