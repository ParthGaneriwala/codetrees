public static void initialize() {
    List<String> classnames;
    try {
        // init
        m_FileLoaders = new Hashtable<String, String>();
        m_URLFileLoaders = new Hashtable<String, String>();
        m_FileSavers = new Hashtable<String, String>();
        // generate properties
        // Note: does NOT work with RMI, hence m_FileLoadersCore/m_FileSaversCore
        Properties props = GenericPropertiesCreator.getGlobalOutputProperties();
        if (props == null) {
            GenericPropertiesCreator creator = new GenericPropertiesCreator();
            creator.execute(false);
            props = creator.getOutputProperties();
        }
        // loaders
        m_FileLoaders = getFileConverters(props.getProperty(Loader.class.getName(), ConverterResources.CORE_FILE_LOADERS), new String[] { FileSourcedConverter.class.getName() });
        // URL loaders
        m_URLFileLoaders = getFileConverters(props.getProperty(Loader.class.getName(), ConverterResources.CORE_FILE_LOADERS), new String[] { FileSourcedConverter.class.getName(), URLSourcedLoader.class.getName() });
        // savers
        m_FileSavers = getFileConverters(props.getProperty(Saver.class.getName(), ConverterResources.CORE_FILE_SAVERS), new String[] { FileSourcedConverter.class.getName() });
    } catch (Exception e) {
        e.printStackTrace();
    // ignore
    } finally {
        // loaders
        if (m_FileLoaders.size() == 0) {
            classnames = PluginManager.getPluginNamesOfTypeList(AbstractFileLoader.class.getName());
            if (classnames.size() > 0) {
                m_FileLoaders = getFileConverters(classnames, new String[] { FileSourcedConverter.class.getName() });
            } else {
                m_FileLoaders = getFileConverters(ConverterResources.CORE_FILE_LOADERS, new String[] { FileSourcedConverter.class.getName() });
            }
        }
        // URL loaders
        if (m_URLFileLoaders.size() == 0) {
            classnames = PluginManager.getPluginNamesOfTypeList(AbstractFileLoader.class.getName());
            if (classnames.size() > 0) {
                m_URLFileLoaders = getFileConverters(classnames, new String[] { FileSourcedConverter.class.getName(), URLSourcedLoader.class.getName() });
            } else {
                m_URLFileLoaders = getFileConverters(ConverterResources.CORE_FILE_LOADERS, new String[] { FileSourcedConverter.class.getName(), URLSourcedLoader.class.getName() });
            }
        }
        // savers
        if (m_FileSavers.size() == 0) {
            classnames = PluginManager.getPluginNamesOfTypeList(AbstractFileSaver.class.getName());
            if (classnames.size() > 0) {
                m_FileSavers = getFileConverters(classnames, new String[] { FileSourcedConverter.class.getName() });
            } else {
                m_FileSavers = getFileConverters(ConverterResources.CORE_FILE_SAVERS, new String[] { FileSourcedConverter.class.getName() });
            }
        }
    }
}
