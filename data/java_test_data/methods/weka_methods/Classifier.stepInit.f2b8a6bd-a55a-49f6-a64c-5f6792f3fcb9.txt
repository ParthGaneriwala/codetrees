@Override
public void stepInit() throws WekaException {
    try {
        m_trainedClassifier = null;
        m_trainedClassifierHeader = null;
        m_trainTestHelper = null;
        m_incrementalData = new Data(StepManager.CON_INCREMENTAL_CLASSIFIER);
        m_classifierTemplate = AbstractClassifier.makeCopy((weka.classifiers.Classifier) getWrappedAlgorithm());
        if (m_classifierTemplate instanceof EnvironmentHandler) {
            ((EnvironmentHandler) m_classifierTemplate).setEnvironment(getStepManager().getExecutionEnvironment().getEnvironmentVariables());
        }
        // Check to see if the classifier is one that must run single-threaded
        Annotation a = m_classifierTemplate.getClass().getAnnotation(SingleThreadedExecution.class);
        if (a != null) {
            getStepManager().logBasic(getClassifier().getClass().getCanonicalName() + " " + "will be executed in the single threaded executor");
            getStepManager().setStepMustRunSingleThreaded(true);
        }
    } catch (Exception ex) {
        throw new WekaException(ex);
    }
    // create and initialize our train/test pair helper if necessary
    if (getStepManager().numIncomingConnectionsOfType(StepManager.CON_TRAININGSET) > 0) {
        m_trainTestHelper = new PairedDataHelper<weka.classifiers.Classifier>(this, this, StepManager.CON_TRAININGSET, getStepManager().numIncomingConnectionsOfType(StepManager.CON_TESTSET) > 0 ? StepManager.CON_TESTSET : null);
    }
    m_isReset = true;
    m_classifierIsIncremental = m_classifierTemplate instanceof UpdateableClassifier;
    if (getLoadClassifierFileName() != null && getLoadClassifierFileName().toString().length() > 0 && getStepManager().numIncomingConnectionsOfType(StepManager.CON_TRAININGSET) == 0) {
        String resolvedFileName = getStepManager().environmentSubstitute(getLoadClassifierFileName().toString());
        try {
            getStepManager().logBasic("Loading classifier: " + resolvedFileName);
            loadModel(resolvedFileName);
        } catch (Exception ex) {
            throw new WekaException(ex);
        }
    }
    if (m_trainedClassifier != null && getStepManager().numIncomingConnectionsOfType(StepManager.CON_INSTANCE) > 0 && !m_classifierIsIncremental) {
        getStepManager().logWarning("Loaded classifier is not an incremental one " + "- will only be able to evaluate, and not update, on the incoming " + "instance stream.");
    }
}
