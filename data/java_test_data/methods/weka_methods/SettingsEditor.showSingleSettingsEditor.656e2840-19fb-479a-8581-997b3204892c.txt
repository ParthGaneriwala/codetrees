public static int showSingleSettingsEditor(Settings settings, String settingsID, String settingsName, JComponent parent, int width, int height) throws IOException {
    final SingleSettingsEditor sse = createSingleSettingsEditor(settings.getSettings(settingsID));
    sse.setPreferredSize(new Dimension(width, height));
    final JOptionPane pane = new JOptionPane(sse, JOptionPane.PLAIN_MESSAGE, JOptionPane.OK_CANCEL_OPTION);
    // There appears to be a bug in Java > 1.6 under Linux that, more often than
    // not, causes a sun.awt.X11.XException to occur when the following code
    // to make the dialog resizable is used. A workaround is to set the
    // suppressSwingDropSupport property to true (but this has to be done
    // at JVM startup, and setting it programatically, no matter how early,
    // does not seem to work). The hacky workaround here is to check for
    // a nix OS and disable the resizing, unless the user has specifically
    // used the -DsuppressSwingDropSupport=true JVM flag.
    // 
    // See: http://bugs.java.com/view_bug.do?bug_id=7027598
    // and: http://mipav.cit.nih.gov/pubwiki/index.php/FAQ:_Why_do_I_get_an_exception_when_running_MIPAV_via_X11_forwarding_on_Linux%3F
    String os = System.getProperty("os.name").toLowerCase();
    String suppressSwingDropSupport = System.getProperty("suppressSwingDropSupport", "false");
    boolean nix = os.contains("nix") || os.contains("nux") || os.contains("aix");
    if (!nix || suppressSwingDropSupport.equalsIgnoreCase("true")) {
        pane.addHierarchyListener(new HierarchyListener() {

            @Override
            public void hierarchyChanged(HierarchyEvent e) {
                Window window = SwingUtilities.getWindowAncestor(pane);
                if (window instanceof Dialog) {
                    Dialog dialog = (Dialog) window;
                    if (!dialog.isResizable()) {
                        dialog.setResizable(true);
                    }
                }
            }
        });
    }
    JDialog dialog = pane.createDialog((JComponent) parent, settingsName + " Settings");
    dialog.show();
    Object resultO = pane.getValue();
    /*
     * int result = JOptionPane.showConfirmDialog(parent, sse, settingsName +
     * " Settings", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE,
     * wekaIcon);
     */
    int result = -1;
    if (resultO == null) {
        result = JOptionPane.CLOSED_OPTION;
    } else if (resultO instanceof Integer) {
        result = (Integer) resultO;
    }
    if (result == JOptionPane.OK_OPTION) {
        sse.applyToSettings();
        settings.saveSettings();
    }
    if (result == JOptionPane.OK_OPTION) {
        sse.applyToSettings();
        settings.saveSettings();
    }
    return result;
}
