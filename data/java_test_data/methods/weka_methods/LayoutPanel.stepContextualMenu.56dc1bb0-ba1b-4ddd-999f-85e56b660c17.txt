protected void stepContextualMenu(final StepVisual step, final int x, final int y) {
    PopupMenu stepContextMenu = new PopupMenu();
    boolean executing = m_visLayout.isExecuting();
    int menuItemCount = 0;
    MenuItem edit = new MenuItem("Edit:");
    edit.setEnabled(false);
    stepContextMenu.insert(edit, menuItemCount);
    menuItemCount++;
    if (m_visLayout.getSelectedSteps().size() > 0) {
        MenuItem copyItem = new MenuItem("Copy");
        copyItem.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    m_visLayout.copySelectedStepsToClipboard();
                } catch (WekaException ex) {
                    m_visLayout.getMainPerspective().showErrorDialog(ex);
                }
                m_visLayout.setSelectedSteps(new ArrayList<StepVisual>());
            }
        });
        stepContextMenu.add(copyItem);
        copyItem.setEnabled(!executing);
        menuItemCount++;
    }
    MenuItem deleteItem = new MenuItem("Delete");
    deleteItem.addActionListener(new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent e) {
            m_visLayout.addUndoPoint();
            try {
                m_visLayout.removeStep(step);
            } catch (WekaException ex) {
                m_visLayout.getMainPerspective().showErrorDialog(ex);
            }
            // step.getStepManager().clearAllConnections();
            // LayoutPanel.this.remove(step);
            String key = step.getStepName() + "$" + step.getStepManager().getManagedStep().hashCode();
            m_visLayout.getLogPanel().statusMessage(key + "|remove");
            LayoutPanel.this.revalidate();
            LayoutPanel.this.repaint();
            m_visLayout.setEdited(true);
            m_visLayout.getMainPerspective().notifyIsDirty();
            m_visLayout.getMainPerspective().getMainToolBar().enableWidget(MainKFPerspectiveToolBar.Widgets.SELECT_ALL_BUTTON.toString(), m_visLayout.getSelectedSteps().size() > 0);
        }
    });
    deleteItem.setEnabled(!executing);
    stepContextMenu.add(deleteItem);
    menuItemCount++;
    MenuItem nameItem = new MenuItem("Set name...");
    nameItem.addActionListener(new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent e) {
            String oldName = step.getStepName();
            String name = JOptionPane.showInputDialog(m_visLayout.getMainPerspective(), "Enter a name for this step", oldName);
            if (name != null) {
                m_visLayout.renameStep(oldName, name);
                m_visLayout.setEdited(true);
                revalidate();
                repaint();
            }
        }
    });
    nameItem.setEnabled(!executing);
    stepContextMenu.add(nameItem);
    menuItemCount++;
    MenuItem configItem = new MenuItem("Configure...");
    configItem.addActionListener(new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent e) {
            popupStepEditorDialog(step);
            m_visLayout.getMainPerspective().notifyIsDirty();
        }
    });
    configItem.setEnabled(!executing);
    stepContextMenu.add(configItem);
    menuItemCount++;
    // connections
    List<String> outgoingConnTypes = step.getStepManager().getManagedStep().getOutgoingConnectionTypes();
    if (outgoingConnTypes != null && outgoingConnTypes.size() > 0) {
        MenuItem connections = new MenuItem("Connections:");
        connections.setEnabled(false);
        stepContextMenu.insert(connections, menuItemCount);
        menuItemCount++;
        for (final String connType : outgoingConnTypes) {
            MenuItem conItem = new MenuItem(connType);
            conItem.setEnabled(!executing);
            conItem.addActionListener(new ActionListener() {

                @Override
                public void actionPerformed(ActionEvent e) {
                    initiateConnection(connType, step, x, y);
                    m_visLayout.getMainPerspective().notifyIsDirty();
                }
            });
            stepContextMenu.add(conItem);
            menuItemCount++;
        }
    }
    // Any interactive views?
    Map<String, String> interactiveViews = step.getStepManager().getManagedStep().getInteractiveViewers();
    Map<String, StepInteractiveViewer> interactiveViewsImpls = step.getStepManager().getManagedStep().getInteractiveViewersImpls();
    if (interactiveViews != null && interactiveViews.size() > 0) {
        MenuItem actions = new MenuItem("Actions:");
        actions.setEnabled(false);
        stepContextMenu.insert(actions, menuItemCount++);
        for (Map.Entry<String, String> e : interactiveViews.entrySet()) {
            String command = e.getKey();
            String viewerClassName = e.getValue();
            addInteractiveViewMenuItem(step, e.getKey(), !executing, e.getValue(), null, stepContextMenu);
            menuItemCount++;
        }
    } else if (interactiveViewsImpls != null && interactiveViewsImpls.size() > 0) {
        MenuItem actions = new MenuItem("Actions:");
        actions.setEnabled(false);
        stepContextMenu.insert(actions, menuItemCount++);
        for (Map.Entry<String, StepInteractiveViewer> e : interactiveViewsImpls.entrySet()) {
            String command = e.getKey();
            StepInteractiveViewer impl = e.getValue();
            addInteractiveViewMenuItem(step, e.getKey(), !executing, null, impl, stepContextMenu);
            menuItemCount++;
        }
    }
    // perspective stuff...
    final List<Perspective> perspectives = m_visLayout.getMainPerspective().getMainApplication().getPerspectiveManager().getVisiblePerspectives();
    if (perspectives.size() > 0 && step.getStepManager().getManagedStep() instanceof Loader) {
        final weka.core.converters.Loader theLoader = ((Loader) step.getStepManager().getManagedStep()).getLoader();
        boolean ok = true;
        if (theLoader instanceof FileSourcedConverter) {
            String fileName = ((FileSourcedConverter) theLoader).retrieveFile().getPath();
            fileName = m_visLayout.environmentSubstitute(fileName);
            File tempF = new File(fileName);
            String fileNameFixedPathSep = fileName.replace(File.separatorChar, '/');
            if (!tempF.isFile() && this.getClass().getClassLoader().getResource(fileNameFixedPathSep) == null) {
                ok = false;
            }
        }
        if (ok) {
            stepContextMenu.addSeparator();
            menuItemCount++;
            if (perspectives.size() > 1) {
                MenuItem sendToAllPerspectives = new MenuItem("Send to all perspectives");
                menuItemCount++;
                sendToAllPerspectives.addActionListener(new ActionListener() {

                    @Override
                    public void actionPerformed(ActionEvent e) {
                        loadDataAndSendToPerspective(theLoader, perspectives, -1);
                    }
                });
                stepContextMenu.add(sendToAllPerspectives);
            }
            Menu sendToPerspective = new Menu("Send to perspective...");
            stepContextMenu.add(sendToPerspective);
            menuItemCount++;
            for (int i = 0; i < perspectives.size(); i++) {
                final int pIndex = i;
                if (perspectives.get(i).acceptsInstances() && !perspectives.get(i).getPerspectiveID().equalsIgnoreCase(KFDefaults.MAIN_PERSPECTIVE_ID)) {
                    String pName = perspectives.get(i).getPerspectiveTitle();
                    final MenuItem pI = new MenuItem(pName);
                    pI.addActionListener(new ActionListener() {

                        @Override
                        public void actionPerformed(ActionEvent e) {
                            loadDataAndSendToPerspective(theLoader, perspectives, pIndex);
                        }
                    });
                    sendToPerspective.add(pI);
                }
            }
        }
    }
    if (menuItemCount > 0) {
        // make sure that popup location takes current scaling into account
        double z = m_visLayout.getZoomSetting() / 100.0;
        double px = x * z;
        double py = y * z;
        this.add(stepContextMenu);
        stepContextMenu.show(this, (int) px, (int) py);
    }
}
