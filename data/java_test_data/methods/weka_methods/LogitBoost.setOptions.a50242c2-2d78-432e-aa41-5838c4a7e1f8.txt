public void setOptions(String[] options) throws Exception {
    String thresholdString = Utils.getOption('P', options);
    if (thresholdString.length() != 0) {
        setWeightThreshold(Integer.parseInt(thresholdString));
    } else {
        setWeightThreshold(100);
    }
    String precisionString = Utils.getOption('L', options);
    if (precisionString.length() != 0) {
        setLikelihoodThreshold(new Double(precisionString).doubleValue());
    } else {
        setLikelihoodThreshold(-Double.MAX_VALUE);
    }
    String shrinkageString = Utils.getOption('H', options);
    if (shrinkageString.length() != 0) {
        setShrinkage(new Double(shrinkageString).doubleValue());
    } else {
        setShrinkage(1.0);
    }
    String zString = Utils.getOption('Z', options);
    if (zString.length() > 0) {
        setZMax(Double.parseDouble(zString));
    }
    setUseResampling(Utils.getFlag('Q', options));
    if (m_UseResampling && (thresholdString.length() != 0)) {
        throw new Exception("Weight pruning with resampling" + "not allowed.");
    }
    setUseEstimatedPriors(Utils.getFlag("use-estimated-priors", options));
    String PoolSize = Utils.getOption('O', options);
    if (PoolSize.length() != 0) {
        setPoolSize(Integer.parseInt(PoolSize));
    } else {
        setPoolSize(1);
    }
    String NumThreads = Utils.getOption('E', options);
    if (NumThreads.length() != 0) {
        setNumThreads(Integer.parseInt(NumThreads));
    } else {
        setNumThreads(1);
    }
    setResume(Utils.getFlag("resume", options));
    super.setOptions(options);
    Utils.checkForRemainingOptions(options);
}
