private void selection(ArrayList<NeuralConnection> v, boolean ctrl, boolean left) {
    if (v == null) {
        // then unselect all.
        m_selected.clear();
        repaint();
        return;
    }
    // then exclusive or the new selection with the current one.
    if ((ctrl || m_selected.size() == 0) && left) {
        boolean removed = false;
        for (int noa = 0; noa < v.size(); noa++) {
            removed = false;
            for (int nob = 0; nob < m_selected.size(); nob++) {
                if (v.get(noa) == m_selected.get(nob)) {
                    // then remove that element
                    m_selected.remove(nob);
                    removed = true;
                    break;
                }
            }
            if (!removed) {
                m_selected.add(v.get(noa));
            }
        }
        repaint();
        return;
    }
    if (left) {
        // then connect the current selection to the new one.
        for (int noa = 0; noa < m_selected.size(); noa++) {
            for (int nob = 0; nob < v.size(); nob++) {
                NeuralConnection.connect(m_selected.get(noa), v.get(nob));
            }
        }
    } else if (m_selected.size() > 0) {
        for (int noa = 0; noa < m_selected.size(); noa++) {
            for (int nob = 0; nob < v.size(); nob++) {
                NeuralConnection.disconnect(m_selected.get(noa), v.get(nob));
                NeuralConnection.disconnect(v.get(nob), m_selected.get(noa));
            }
        }
    } else {
        // no other units were selected
        for (int noa = 0; noa < v.size(); noa++) {
            v.get(noa).removeAllInputs();
            v.get(noa).removeAllOutputs();
            removeNode(v.get(noa));
        }
    }
    repaint();
}
