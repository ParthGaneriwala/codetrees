@Override
public String toString() {
    if (!m_ModelBuilt) {
        return "Linear Regression: No model built yet.";
    }
    if (m_Minimal) {
        return "Linear Regression: Model built.";
    }
    try {
        StringBuilder text = new StringBuilder();
        int column = 0;
        boolean first = true;
        text.append("\nLinear Regression Model\n\n");
        text.append(m_TransformedData.classAttribute().name() + " =\n\n");
        for (int i = 0; i < m_TransformedData.numAttributes(); i++) {
            if ((i != m_ClassIndex) && (m_SelectedAttributes[i])) {
                if (!first) {
                    text.append(" +\n");
                } else {
                    first = false;
                }
                text.append(Utils.doubleToString(m_Coefficients[column], 12, m_numDecimalPlaces) + " * ");
                text.append(m_TransformedData.attribute(i).name());
                column++;
            }
        }
        text.append(" +\n" + Utils.doubleToString(m_Coefficients[column], 12, m_numDecimalPlaces));
        if (m_outputAdditionalStats) {
            int maxAttLength = 0;
            for (int i = 0; i < m_TransformedData.numAttributes(); i++) {
                if ((i != m_ClassIndex) && (m_SelectedAttributes[i])) {
                    if (m_TransformedData.attribute(i).name().length() > maxAttLength) {
                        maxAttLength = m_TransformedData.attribute(i).name().length();
                    }
                }
            }
            maxAttLength += 3;
            if (maxAttLength < "Variable".length() + 3) {
                maxAttLength = "Variable".length() + 3;
            }
            text.append("\n\nRegression Analysis:\n\n" + Utils.padRight("Variable", maxAttLength) + "  Coefficient     SE of Coef        t-Stat");
            column = 0;
            for (int i = 0; i < m_TransformedData.numAttributes(); i++) {
                if ((i != m_ClassIndex) && (m_SelectedAttributes[i])) {
                    text.append("\n" + Utils.padRight(m_TransformedData.attribute(i).name(), maxAttLength));
                    text.append(Utils.doubleToString(m_Coefficients[column], 12, m_numDecimalPlaces));
                    text.append("   " + Utils.doubleToString(m_StdErrorOfCoef[column], 12, m_numDecimalPlaces));
                    text.append("   " + Utils.doubleToString(m_TStats[column], 12, m_numDecimalPlaces));
                    column++;
                }
            }
            text.append(Utils.padRight("\nconst", maxAttLength + 1) + Utils.doubleToString(m_Coefficients[column], 12, m_numDecimalPlaces));
            text.append("   " + Utils.doubleToString(m_StdErrorOfCoef[column], 12, m_numDecimalPlaces));
            text.append("   " + Utils.doubleToString(m_TStats[column], 12, m_numDecimalPlaces));
            text.append("\n\nDegrees of freedom = " + Integer.toString(m_df));
            text.append("\nR^2 value = " + Utils.doubleToString(m_RSquared, m_numDecimalPlaces));
            text.append("\nAdjusted R^2 = " + Utils.doubleToString(m_RSquaredAdj, 5));
            text.append("\nF-statistic = " + Utils.doubleToString(m_FStat, m_numDecimalPlaces));
        }
        return text.toString();
    } catch (Exception e) {
        return "Can't print Linear Regression!";
    }
}
