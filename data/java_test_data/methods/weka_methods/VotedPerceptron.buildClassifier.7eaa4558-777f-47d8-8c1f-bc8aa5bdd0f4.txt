public void buildClassifier(Instances insts) throws Exception {
    // can classifier handle the data?
    getCapabilities().testWithFail(insts);
    // remove instances with missing class
    insts = new Instances(insts);
    insts.deleteWithMissingClass();
    // Filter data
    m_Train = new Instances(insts);
    m_ReplaceMissingValues = new ReplaceMissingValues();
    m_ReplaceMissingValues.setInputFormat(m_Train);
    m_Train = Filter.useFilter(m_Train, m_ReplaceMissingValues);
    m_NominalToBinary = new NominalToBinary();
    m_NominalToBinary.setInputFormat(m_Train);
    m_Train = Filter.useFilter(m_Train, m_NominalToBinary);
    /**
     * Randomize training data
     */
    m_Train.randomize(new Random(m_Seed));
    /**
     * Make space to store perceptrons
     */
    m_Additions = new int[m_MaxK + 1];
    m_IsAddition = new boolean[m_MaxK + 1];
    m_Weights = new int[m_MaxK + 1];
    /**
     * Compute perceptrons
     */
    m_K = 0;
    out: for (int it = 0; it < m_NumIterations; it++) {
        for (int i = 0; i < m_Train.numInstances(); i++) {
            Instance inst = m_Train.instance(i);
            if (!inst.classIsMissing()) {
                int prediction = makePrediction(m_K, inst);
                int classValue = (int) inst.classValue();
                if (prediction == classValue) {
                    m_Weights[m_K]++;
                } else {
                    m_IsAddition[m_K] = (classValue == 1);
                    m_Additions[m_K] = i;
                    m_K++;
                    m_Weights[m_K]++;
                }
                if (m_K == m_MaxK) {
                    break out;
                }
            }
        }
    }
}
