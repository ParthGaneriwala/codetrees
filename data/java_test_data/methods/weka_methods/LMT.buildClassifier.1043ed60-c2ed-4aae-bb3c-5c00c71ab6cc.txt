@Override
public void buildClassifier(Instances data) throws Exception {
    // can classifier handle the data?
    getCapabilities().testWithFail(data);
    // remove instances with missing class
    Instances filteredData = new Instances(data);
    filteredData.deleteWithMissingClass();
    // replace missing values
    m_replaceMissing = new ReplaceMissingValues();
    m_replaceMissing.setInputFormat(filteredData);
    filteredData = Filter.useFilter(filteredData, m_replaceMissing);
    // possibly convert nominal attributes globally
    m_nominalToBinary = new NominalToBinary();
    m_nominalToBinary.setInputFormat(filteredData);
    if (m_convertNominal) {
        filteredData = Filter.useFilter(filteredData, m_nominalToBinary);
    }
    int minNumInstances = 2;
    // create ModelSelection object, either for splits on the residuals or for
    // splits on the class value
    ModelSelection modSelection;
    if (m_splitOnResiduals) {
        modSelection = new ResidualModelSelection(minNumInstances);
    } else {
        modSelection = new C45ModelSelection(minNumInstances, filteredData, true, m_doNotMakeSplitPointActualValue);
    }
    // create tree root
    m_tree = new LMTNode(modSelection, m_numBoostingIterations, m_fastRegression, m_errorOnProbabilities, m_minNumInstances, m_weightTrimBeta, m_useAIC, m_nominalToBinary, m_numDecimalPlaces);
    // build tree
    m_tree.buildClassifier(filteredData);
    if (modSelection instanceof C45ModelSelection) {
        ((C45ModelSelection) modSelection).cleanup();
    }
}
