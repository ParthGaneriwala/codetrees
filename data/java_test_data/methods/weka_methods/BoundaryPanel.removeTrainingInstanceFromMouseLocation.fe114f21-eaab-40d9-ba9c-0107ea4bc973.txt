public void removeTrainingInstanceFromMouseLocation(int mouseX, int mouseY) {
    // convert to coordinates in the training instance space.
    double x = convertFromPanelX(mouseX);
    double y = convertFromPanelY(mouseY);
    int bestIndex = -1;
    double bestDistanceBetween = Integer.MAX_VALUE;
    // find the closest point.
    for (int i = 0; i < m_trainingData.numInstances(); i++) {
        Instance current = m_trainingData.instance(i);
        double distanceBetween = (current.value(m_xAttribute) - x) * (current.value(m_xAttribute) - x) + (current.value(m_yAttribute) - y) * // won't bother to sqrt, just used
        (current.value(m_yAttribute) - y);
        if (distanceBetween < bestDistanceBetween) {
            bestIndex = i;
            bestDistanceBetween = distanceBetween;
        }
    }
    if (bestIndex == -1) {
        return;
    }
    Instance best = m_trainingData.instance(bestIndex);
    double panelDistance = (convertToPanelX(best.value(m_xAttribute)) - mouseX) * (convertToPanelX(best.value(m_xAttribute)) - mouseX) + (convertToPanelY(best.value(m_yAttribute)) - mouseY) * (convertToPanelY(best.value(m_yAttribute)) - mouseY);
    if (panelDistance < REMOVE_POINT_RADIUS * REMOVE_POINT_RADIUS) {
        // the best
        // point is
        // close
        // enough.
        // (using
        // squared
        // distances)
        m_trainingData.delete(bestIndex);
    }
}
