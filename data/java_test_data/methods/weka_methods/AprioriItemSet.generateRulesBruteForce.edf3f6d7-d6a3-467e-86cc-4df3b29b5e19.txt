public final ArrayList<Object>[] generateRulesBruteForce(double minMetric, int metricType, ArrayList<Hashtable<ItemSet, Integer>> hashtables, int numItemsInSet, int numTransactions, double significanceLevel) throws Exception {
    ArrayList<Object> premises = new ArrayList<Object>(), consequences = new ArrayList<Object>(), conf = new ArrayList<Object>(), lift = new ArrayList<Object>(), lev = new ArrayList<Object>(), conv = new ArrayList<Object>();
    @SuppressWarnings("unchecked") ArrayList<Object>[] rules = new ArrayList[6];
    AprioriItemSet premise, consequence;
    Hashtable<ItemSet, Integer> hashtableForPremise, hashtableForConsequence;
    int numItemsInPremise, help, max, consequenceUnconditionedCounter;
    double[][] contingencyTable = new double[2][2];
    double metric, chiSquared = 0;
    // Generate all possible rules for this item set and test their
    // significance.
    max = (int) Math.pow(2, numItemsInSet);
    for (int j = 1; j < max; j++) {
        numItemsInPremise = 0;
        help = j;
        while (help > 0) {
            if (help % 2 == 1) {
                numItemsInPremise++;
            }
            help /= 2;
        }
        if (numItemsInPremise < numItemsInSet) {
            hashtableForPremise = hashtables.get(numItemsInPremise - 1);
            hashtableForConsequence = hashtables.get(numItemsInSet - numItemsInPremise - 1);
            premise = new AprioriItemSet(m_totalTransactions);
            consequence = new AprioriItemSet(m_totalTransactions);
            premise.m_items = new int[m_items.length];
            consequence.m_items = new int[m_items.length];
            consequence.m_counter = m_counter;
            help = j;
            for (int i = 0; i < m_items.length; i++) {
                if (m_items[i] != -1) {
                    if (help % 2 == 1) {
                        premise.m_items[i] = m_items[i];
                        consequence.m_items[i] = -1;
                    } else {
                        premise.m_items[i] = -1;
                        consequence.m_items[i] = m_items[i];
                    }
                    help /= 2;
                } else {
                    premise.m_items[i] = -1;
                    consequence.m_items[i] = -1;
                }
            }
            premise.m_counter = hashtableForPremise.get(premise).intValue();
            consequenceUnconditionedCounter = hashtableForConsequence.get(consequence).intValue();
            consequence.m_secondaryCounter = consequenceUnconditionedCounter;
            if (significanceLevel != -1) {
                contingencyTable[0][0] = (consequence.m_counter);
                contingencyTable[0][1] = (premise.m_counter - consequence.m_counter);
                contingencyTable[1][0] = (consequenceUnconditionedCounter - consequence.m_counter);
                contingencyTable[1][1] = (numTransactions - premise.m_counter - consequenceUnconditionedCounter + consequence.m_counter);
                chiSquared = ContingencyTables.chiSquared(contingencyTable, false);
            }
            if (metricType == 0) {
                metric = confidenceForRule(premise, consequence);
                if ((!(metric < minMetric)) && (significanceLevel == -1 || !(chiSquared > significanceLevel))) {
                    premises.add(premise);
                    consequences.add(consequence);
                    conf.add(new Double(metric));
                    lift.add(new Double(liftForRule(premise, consequence, consequenceUnconditionedCounter)));
                    lev.add(new Double(leverageForRule(premise, consequence, premise.m_counter, consequenceUnconditionedCounter)));
                    conv.add(new Double(convictionForRule(premise, consequence, premise.m_counter, consequenceUnconditionedCounter)));
                }
            } else {
                double tempConf = confidenceForRule(premise, consequence);
                double tempLift = liftForRule(premise, consequence, consequenceUnconditionedCounter);
                double tempLev = leverageForRule(premise, consequence, premise.m_counter, consequenceUnconditionedCounter);
                double tempConv = convictionForRule(premise, consequence, premise.m_counter, consequenceUnconditionedCounter);
                switch(metricType) {
                    case 1:
                        metric = tempLift;
                        break;
                    case 2:
                        metric = tempLev;
                        break;
                    case 3:
                        metric = tempConv;
                        break;
                    default:
                        throw new Exception("ItemSet: Unknown metric type!");
                }
                if (!(metric < minMetric) && (significanceLevel == -1 || !(chiSquared > significanceLevel))) {
                    premises.add(premise);
                    consequences.add(consequence);
                    conf.add(new Double(tempConf));
                    lift.add(new Double(tempLift));
                    lev.add(new Double(tempLev));
                    conv.add(new Double(tempConv));
                }
            }
        }
    }
    rules[0] = premises;
    rules[1] = consequences;
    rules[2] = conf;
    rules[3] = lift;
    rules[4] = lev;
    rules[5] = conv;
    return rules;
}
