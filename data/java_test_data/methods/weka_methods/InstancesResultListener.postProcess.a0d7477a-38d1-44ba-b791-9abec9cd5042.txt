@Override
public void postProcess(ResultProducer rp) throws Exception {
    if (m_RP != rp) {
        throw new Error("Unrecognized ResultProducer sending results!!");
    }
    String[] keyNames = m_RP.getKeyNames();
    String[] resultNames = m_RP.getResultNames();
    ArrayList<Attribute> attribInfo = new ArrayList<Attribute>();
    for (int i = 0; i < m_AttributeTypes.length; i++) {
        String attribName = "Unknown";
        if (i < keyNames.length) {
            attribName = "Key_" + keyNames[i];
        } else {
            attribName = resultNames[i - keyNames.length];
        }
        switch(m_AttributeTypes[i]) {
            case Attribute.NOMINAL:
                if (m_NominalStrings[i].size() > 0) {
                    attribInfo.add(new Attribute(attribName, m_NominalStrings[i]));
                } else {
                    attribInfo.add(new Attribute(attribName, (ArrayList<String>) null));
                }
                break;
            case Attribute.NUMERIC:
                attribInfo.add(new Attribute(attribName));
                break;
            case Attribute.STRING:
                attribInfo.add(new Attribute(attribName, (ArrayList<String>) null));
                break;
            default:
                throw new Exception("Unknown attribute type");
        }
    }
    Instances result = new Instances("InstanceResultListener", attribInfo, m_Instances.size());
    for (int i = 0; i < m_Instances.size(); i++) {
        result.add(m_Instances.get(i));
    }
    m_Out.println(new Instances(result, 0));
    for (int i = 0; i < result.numInstances(); i++) {
        m_Out.println(result.instance(i));
    }
    if (!(m_OutputFile == null) && !(m_OutputFile.getName().equals("-"))) {
        m_Out.close();
    }
}
