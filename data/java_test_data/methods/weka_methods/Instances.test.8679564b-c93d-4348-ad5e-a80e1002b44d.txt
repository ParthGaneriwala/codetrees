/**
 * Method for testing this class.
 *
 * @param argv should contain one element: the name of an ARFF file
 */
// @ requires argv != null;
// @ requires argv.length == 1;
public static void test(String[] argv) {
    Instances instances, secondInstances, train, test, empty;
    Random random = new Random(2);
    Reader reader;
    int start, num;
    ArrayList<Attribute> testAtts;
    ArrayList<String> testVals;
    int i, j;
    try {
        if (argv.length > 1) {
            throw (new Exception("Usage: Instances [<filename>]"));
        }
        // Creating set of instances from scratch
        testVals = new ArrayList<String>(2);
        testVals.add("first_value");
        testVals.add("second_value");
        testAtts = new ArrayList<Attribute>(2);
        testAtts.add(new Attribute("nominal_attribute", testVals));
        testAtts.add(new Attribute("numeric_attribute"));
        instances = new Instances("test_set", testAtts, 10);
        instances.add(new DenseInstance(instances.numAttributes()));
        instances.add(new DenseInstance(instances.numAttributes()));
        instances.add(new DenseInstance(instances.numAttributes()));
        instances.setClassIndex(0);
        System.out.println("\nSet of instances created from scratch:\n");
        System.out.println(instances);
        if (argv.length == 1) {
            String filename = argv[0];
            reader = new FileReader(filename);
            // Read first five instances and print them
            System.out.println("\nFirst five instances from file:\n");
            instances = new Instances(reader, 1);
            instances.setClassIndex(instances.numAttributes() - 1);
            i = 0;
            while ((i < 5) && (instances.readInstance(reader))) {
                i++;
            }
            System.out.println(instances);
            // Read all the instances in the file
            reader = new FileReader(filename);
            instances = new Instances(reader);
            // Make the last attribute be the class
            instances.setClassIndex(instances.numAttributes() - 1);
            // Print header and instances.
            System.out.println("\nDataset:\n");
            System.out.println(instances);
            System.out.println("\nClass index: " + instances.classIndex());
        }
        // Test basic methods based on class index.
        System.out.println("\nClass name: " + instances.classAttribute().name());
        System.out.println("\nClass index: " + instances.classIndex());
        System.out.println("\nClass is nominal: " + instances.classAttribute().isNominal());
        System.out.println("\nClass is numeric: " + instances.classAttribute().isNumeric());
        System.out.println("\nClasses:\n");
        for (i = 0; i < instances.numClasses(); i++) {
            System.out.println(instances.classAttribute().value(i));
        }
        System.out.println("\nClass values and labels of instances:\n");
        for (i = 0; i < instances.numInstances(); i++) {
            Instance inst = instances.instance(i);
            System.out.print(inst.classValue() + "\t");
            System.out.print(inst.toString(inst.classIndex()));
            if (instances.instance(i).classIsMissing()) {
                System.out.println("\tis missing");
            } else {
                System.out.println();
            }
        }
        // Create random weights.
        System.out.println("\nCreating random weights for instances.");
        for (i = 0; i < instances.numInstances(); i++) {
            instances.instance(i).setWeight(random.nextDouble());
        }
        // Print all instances and their weights (and the sum of weights).
        System.out.println("\nInstances and their weights:\n");
        System.out.println(instances.instancesAndWeights());
        System.out.print("\nSum of weights: ");
        System.out.println(instances.sumOfWeights());
        // Insert an attribute
        secondInstances = new Instances(instances);
        Attribute testAtt = new Attribute("Inserted");
        secondInstances.insertAttributeAt(testAtt, 0);
        System.out.println("\nSet with inserted attribute:\n");
        System.out.println(secondInstances);
        System.out.println("\nClass name: " + secondInstances.classAttribute().name());
        // Delete the attribute
        secondInstances.deleteAttributeAt(0);
        System.out.println("\nSet with attribute deleted:\n");
        System.out.println(secondInstances);
        System.out.println("\nClass name: " + secondInstances.classAttribute().name());
        // Test if headers are equal
        System.out.println("\nHeaders equal: " + instances.equalHeaders(secondInstances) + "\n");
        // Print data in internal format.
        System.out.println("\nData (internal values):\n");
        for (i = 0; i < instances.numInstances(); i++) {
            for (j = 0; j < instances.numAttributes(); j++) {
                if (instances.instance(i).isMissing(j)) {
                    System.out.print("? ");
                } else {
                    System.out.print(instances.instance(i).value(j) + " ");
                }
            }
            System.out.println();
        }
        // Just print header
        System.out.println("\nEmpty dataset:\n");
        empty = new Instances(instances, 0);
        System.out.println(empty);
        System.out.println("\nClass name: " + empty.classAttribute().name());
        // Create copy and rename an attribute and a value (if possible)
        if (empty.classAttribute().isNominal()) {
            Instances copy = new Instances(empty, 0);
            copy.renameAttribute(copy.classAttribute(), "new_name");
            copy.renameAttributeValue(copy.classAttribute(), copy.classAttribute().value(0), "new_val_name");
            System.out.println("\nDataset with names changed:\n" + copy);
            System.out.println("\nOriginal dataset:\n" + empty);
        }
        // Create and prints subset of instances.
        start = instances.numInstances() / 4;
        num = instances.numInstances() / 2;
        System.out.print("\nSubset of dataset: ");
        System.out.println(num + " instances from " + (start + 1) + ". instance");
        secondInstances = new Instances(instances, start, num);
        System.out.println("\nClass name: " + secondInstances.classAttribute().name());
        // Print all instances and their weights (and the sum of weights).
        System.out.println("\nInstances and their weights:\n");
        System.out.println(secondInstances.instancesAndWeights());
        System.out.print("\nSum of weights: ");
        System.out.println(secondInstances.sumOfWeights());
        // Create and print training and test sets for 3-fold
        // cross-validation.
        System.out.println("\nTrain and test folds for 3-fold CV:");
        if (instances.classAttribute().isNominal()) {
            instances.stratify(3);
        }
        for (j = 0; j < 3; j++) {
            train = instances.trainCV(3, j, new Random(1));
            test = instances.testCV(3, j);
            // Print all instances and their weights (and the sum of weights).
            System.out.println("\nTrain: ");
            System.out.println("\nInstances and their weights:\n");
            System.out.println(train.instancesAndWeights());
            System.out.print("\nSum of weights: ");
            System.out.println(train.sumOfWeights());
            System.out.println("\nClass name: " + train.classAttribute().name());
            System.out.println("\nTest: ");
            System.out.println("\nInstances and their weights:\n");
            System.out.println(test.instancesAndWeights());
            System.out.print("\nSum of weights: ");
            System.out.println(test.sumOfWeights());
            System.out.println("\nClass name: " + test.classAttribute().name());
        }
        // Randomize instances and print them.
        System.out.println("\nRandomized dataset:");
        instances.randomize(random);
        // Print all instances and their weights (and the sum of weights).
        System.out.println("\nInstances and their weights:\n");
        System.out.println(instances.instancesAndWeights());
        System.out.print("\nSum of weights: ");
        System.out.println(instances.sumOfWeights());
        // Sort instances according to first attribute and
        // print them.
        System.out.print("\nInstances sorted according to first attribute:\n ");
        instances.sort(0);
        // Print all instances and their weights (and the sum of weights).
        System.out.println("\nInstances and their weights:\n");
        System.out.println(instances.instancesAndWeights());
        System.out.print("\nSum of weights: ");
        System.out.println(instances.sumOfWeights());
    } catch (Exception e) {
        e.printStackTrace();
    }
}
