@Override
public double[] distributionForInstance(Instance i) throws Exception {
    // default model?
    if (m_useDefaultModel) {
        return m_ZeroR.distributionForInstance(i);
    }
    if (m_useNomToBin) {
        m_nominalToBinaryFilter.input(i);
        m_currentInstance = m_nominalToBinaryFilter.output();
    } else {
        m_currentInstance = i;
    }
    // Make a copy of the instance so that it isn't modified
    m_currentInstance = (Instance) m_currentInstance.copy();
    if (m_normalizeAttributes) {
        double[] instance = new double[m_currentInstance.numAttributes()];
        for (int noa = 0; noa < m_instances.numAttributes(); noa++) {
            if (noa != m_instances.classIndex()) {
                if (m_attributeRanges[noa] != 0) {
                    instance[noa] = (m_currentInstance.value(noa) - m_attributeBases[noa]) / m_attributeRanges[noa];
                } else {
                    instance[noa] = m_currentInstance.value(noa) - m_attributeBases[noa];
                }
            } else {
                instance[noa] = m_currentInstance.value(noa);
            }
        }
        m_currentInstance = new DenseInstance(m_currentInstance.weight(), instance);
        m_currentInstance.setDataset(m_instances);
    }
    resetNetwork();
    // since all the output values are needed.
    // They are calculated manually here and the values collected.
    double[] theArray = new double[m_numClasses];
    for (int noa = 0; noa < m_numClasses; noa++) {
        theArray[noa] = m_outputs[noa].outputValue(true);
    }
    if (m_instances.classAttribute().isNumeric()) {
        return theArray;
    }
    // now normalize the array
    double count = 0;
    for (int noa = 0; noa < m_numClasses; noa++) {
        count += theArray[noa];
    }
    if (count <= 0) {
        return m_ZeroR.distributionForInstance(i);
    }
    for (int noa = 0; noa < m_numClasses; noa++) {
        theArray[noa] /= count;
    }
    return theArray;
}
