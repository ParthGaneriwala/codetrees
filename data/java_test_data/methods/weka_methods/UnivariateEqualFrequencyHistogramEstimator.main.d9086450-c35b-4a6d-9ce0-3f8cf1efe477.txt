public static void main(String[] args) {
    // Get random number generator initialized by system
    Random r = new Random();
    // Create density estimator
    UnivariateEqualFrequencyHistogramEstimator e = new UnivariateEqualFrequencyHistogramEstimator();
    // Output the density estimator
    System.out.println(e);
    // Monte Carlo integration
    double sum = 0;
    for (int i = 0; i < 1000; i++) {
        sum += Math.exp(e.logDensity(r.nextDouble() * 10.0 - 5.0));
    }
    System.out.println("Approximate integral: " + 10.0 * sum / 1000);
    // Add Gaussian values into it
    for (int i = 0; i < 1000; i++) {
        e.addValue(0.1 * r.nextGaussian() - 3, 1);
        e.addValue(r.nextGaussian() * 0.25, 3);
    }
    // Monte Carlo integration
    sum = 0;
    int points = 10000000;
    for (int i = 0; i < points; i++) {
        double value = r.nextDouble() * 20.0 - 10.0;
        sum += Math.exp(e.logDensity(value));
    }
    // Output the density estimator
    System.out.println(e);
    System.out.println("Approximate integral: " + 20.0 * sum / points);
    // Check interval estimates
    double[][] Intervals = e.predictIntervals(0.9);
    System.out.println("Printing histogram intervals ---------------------");
    for (double[] interval : Intervals) {
        System.out.println("Left: " + interval[0] + "\t Right: " + interval[1]);
    }
    System.out.println("Finished histogram printing intervals ---------------------");
    double Covered = 0;
    for (int i = 0; i < 1000; i++) {
        double val = -1;
        if (r.nextDouble() < 0.25) {
            val = 0.1 * r.nextGaussian() - 3.0;
        } else {
            val = r.nextGaussian() * 0.25;
        }
        for (double[] interval : Intervals) {
            if (val >= interval[0] && val <= interval[1]) {
                Covered++;
                break;
            }
        }
    }
    System.out.println("Coverage at 0.9 level for histogram intervals: " + Covered / 1000);
    for (int j = 1; j < 5; j++) {
        double numTrain = Math.pow(10, j);
        System.out.println("Number of training cases: " + numTrain);
        // Compare performance to normal estimator on normally distributed data
        UnivariateEqualFrequencyHistogramEstimator eHistogram = new UnivariateEqualFrequencyHistogramEstimator();
        UnivariateNormalEstimator eNormal = new UnivariateNormalEstimator();
        // Add training cases
        for (int i = 0; i < numTrain; i++) {
            double val = r.nextGaussian() * 1.5 + 0.5;
            /*
         * if (j == 4) { System.err.println(val); }
         */
            eHistogram.addValue(val, 1);
            eNormal.addValue(val, 1);
        }
        // Monte Carlo integration
        sum = 0;
        points = 10000000;
        for (int i = 0; i < points; i++) {
            double value = r.nextDouble() * 20.0 - 10.0;
            sum += Math.exp(eHistogram.logDensity(value));
        }
        System.out.println(eHistogram);
        System.out.println("Approximate integral for histogram estimator: " + 20.0 * sum / points);
        // Evaluate estimators
        double loglikelihoodHistogram = 0, loglikelihoodNormal = 0;
        for (int i = 0; i < 1000; i++) {
            double val = r.nextGaussian() * 1.5 + 0.5;
            loglikelihoodHistogram += eHistogram.logDensity(val);
            loglikelihoodNormal += eNormal.logDensity(val);
        }
        System.out.println("Loglikelihood for histogram estimator: " + loglikelihoodHistogram / 1000);
        System.out.println("Loglikelihood for normal estimator: " + loglikelihoodNormal / 1000);
        // Check interval estimates
        double[][] histogramIntervals = eHistogram.predictIntervals(0.95);
        double[][] normalIntervals = eNormal.predictIntervals(0.95);
        System.out.println("Printing histogram intervals ---------------------");
        for (double[] histogramInterval : histogramIntervals) {
            System.out.println("Left: " + histogramInterval[0] + "\t Right: " + histogramInterval[1]);
        }
        System.out.println("Finished histogram printing intervals ---------------------");
        System.out.println("Printing normal intervals ---------------------");
        for (double[] normalInterval : normalIntervals) {
            System.out.println("Left: " + normalInterval[0] + "\t Right: " + normalInterval[1]);
        }
        System.out.println("Finished normal printing intervals ---------------------");
        double histogramCovered = 0;
        double normalCovered = 0;
        for (int i = 0; i < 1000; i++) {
            double val = r.nextGaussian() * 1.5 + 0.5;
            for (double[] histogramInterval : histogramIntervals) {
                if (val >= histogramInterval[0] && val <= histogramInterval[1]) {
                    histogramCovered++;
                    break;
                }
            }
            for (double[] normalInterval : normalIntervals) {
                if (val >= normalInterval[0] && val <= normalInterval[1]) {
                    normalCovered++;
                    break;
                }
            }
        }
        System.out.println("Coverage at 0.95 level for histogram intervals: " + histogramCovered / 1000);
        System.out.println("Coverage at 0.95 level for normal intervals: " + normalCovered / 1000);
        histogramIntervals = eHistogram.predictIntervals(0.8);
        normalIntervals = eNormal.predictIntervals(0.8);
        histogramCovered = 0;
        normalCovered = 0;
        for (int i = 0; i < 1000; i++) {
            double val = r.nextGaussian() * 1.5 + 0.5;
            for (double[] histogramInterval : histogramIntervals) {
                if (val >= histogramInterval[0] && val <= histogramInterval[1]) {
                    histogramCovered++;
                    break;
                }
            }
            for (double[] normalInterval : normalIntervals) {
                if (val >= normalInterval[0] && val <= normalInterval[1]) {
                    normalCovered++;
                    break;
                }
            }
        }
        System.out.println("Coverage at 0.8 level for histogram intervals: " + histogramCovered / 1000);
        System.out.println("Coverage at 0.8 level for normal intervals: " + normalCovered / 1000);
    }
}
