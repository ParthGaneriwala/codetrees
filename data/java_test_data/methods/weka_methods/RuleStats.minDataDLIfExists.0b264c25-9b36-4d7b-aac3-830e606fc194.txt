public double minDataDLIfExists(int index, double expFPRate, boolean checkErr) {
    // System.out.println("!!!Enter with: ");
    // Stats of ruleset if rule exists
    double[] rulesetStat = new double[6];
    for (int j = 0; j < m_SimpleStats.size(); j++) {
        // Covered stats are cumulative
        rulesetStat[0] += m_SimpleStats.get(j)[0];
        rulesetStat[2] += m_SimpleStats.get(j)[2];
        rulesetStat[4] += m_SimpleStats.get(j)[4];
        if (j == m_SimpleStats.size() - 1) {
            // Last rule
            rulesetStat[1] = m_SimpleStats.get(j)[1];
            rulesetStat[3] = m_SimpleStats.get(j)[3];
            rulesetStat[5] = m_SimpleStats.get(j)[5];
        }
    }
    // Potential
    double potential = 0;
    for (int k = index + 1; k < m_SimpleStats.size(); k++) {
        double[] ruleStat = getSimpleStats(k);
        double ifDeleted = potential(k, expFPRate, rulesetStat, ruleStat, checkErr);
        if (!Double.isNaN(ifDeleted)) {
            potential += ifDeleted;
        }
    }
    // Data DL of the ruleset without the rule
    // Note that ruleset stats has already been updated to reflect deletion
    // if any potential
    double dataDLWith = dataDL(expFPRate, rulesetStat[0], rulesetStat[1], rulesetStat[4], rulesetStat[5]);
    // potential);
    return (dataDLWith - potential);
}
