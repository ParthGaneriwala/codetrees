private void checkAccuracy(long[] weightedValues, long mean, long stdDev, double tolerance) {
    Stats stats = getStats();
    addWeightedStats(stats, weightedValues);
    stats.calculateDerived();
    Stats subtracted1 = getStats();
    addWeightedStatsWithSubtracts(subtracted1, weightedValues, weightedValues, 3, 3);
    subtracted1.calculateDerived();
    Stats subtracted2 = getStats();
    addWeightedStatsWithSubtracts(subtracted2, weightedValues, weightedValues, 2, 4);
    subtracted2.calculateDerived();
    double meanDouble = Double.longBitsToDouble(mean);
    double stdDevDouble = Double.longBitsToDouble(stdDev);
    assertEquals("Inaccurate mean calculation!", meanDouble, stats.mean, Math.abs(meanDouble * tolerance));
    assertEquals("Inaccurate stdDev calculation!", stdDevDouble, stats.stdDev, Math.abs(stdDevDouble * tolerance));
    assertEquals("Inaccurate mean calculation when using subtract!", meanDouble, subtracted1.mean, Math.abs(meanDouble * tolerance));
    assertEquals("Inaccurate stdDev calculation when using subtract!", stdDevDouble, subtracted1.stdDev, Math.abs(stdDevDouble * tolerance));
    assertEquals("Inaccurate mean calculation when using subtract!", meanDouble, subtracted2.mean, Math.abs(meanDouble * tolerance));
    assertEquals("Inaccurate stdDev calculation when using subtract!", stdDevDouble, subtracted2.stdDev, Math.abs(stdDevDouble * tolerance));
}
