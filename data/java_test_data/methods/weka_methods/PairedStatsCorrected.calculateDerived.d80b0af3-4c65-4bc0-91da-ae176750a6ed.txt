public void calculateDerived() {
    xStats.calculateDerived();
    yStats.calculateDerived();
    differencesStats.calculateDerived();
    correlation = Double.NaN;
    if (!Double.isNaN(xStats.stdDev) && !Double.isNaN(yStats.stdDev) && (xStats.stdDev > 0) && (yStats.stdDev > 0) && (count > 1)) {
        correlation = (xySum - xStats.sum * yStats.sum / count) / ((count - 1) * xStats.stdDev * yStats.stdDev);
    }
    if (differencesStats.stdDev > 0) {
        double tval = differencesStats.mean / Math.sqrt((1 / count + m_testTrainRatio) * differencesStats.stdDev * differencesStats.stdDev);
        if (count > 1) {
            differencesProbability = Statistics.FProbability(tval * tval, 1, (int) count - 1);
        } else
            differencesProbability = 1;
    } else {
        if (differencesStats.sumSq == 0) {
            differencesProbability = 1.0;
        } else {
            differencesProbability = 0.0;
        }
    }
    differencesSignificance = 0;
    if (differencesProbability <= sigLevel) {
        if (xStats.mean > yStats.mean) {
            differencesSignificance = 1;
        } else {
            differencesSignificance = -1;
        }
    }
}
