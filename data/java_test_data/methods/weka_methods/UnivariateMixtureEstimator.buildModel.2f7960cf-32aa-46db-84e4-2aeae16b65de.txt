public MM buildModel(int K, double[] values, double[] weights) {
    // Initialize model using k-means
    MM model = null;
    double bestMSE = Double.MAX_VALUE;
    int numAttempts = 0;
    while (numAttempts < 5) {
        // Initialize model
        MM tempModel = new UnivariateMixtureEstimator().new MM();
        tempModel.initializeModel(K, values, weights, m_Random);
        // Run k-means until MSE converges
        double oldMSE = Double.MAX_VALUE;
        double MSE = tempModel.MSE();
        if (m_Debug) {
            System.err.println("MSE: " + MSE);
        }
        double[][] probs = new double[tempModel.m_K][values.length];
        while (Utils.sm(MSE, oldMSE)) {
            // Compute memberships
            for (int j = 0; j < probs.length; j++) {
                Arrays.fill(probs[j], 0);
            }
            for (int i = 0; i < values.length; i++) {
                probs[tempModel.nearestMean(values[i])][i] = 1.0;
            }
            // Estimate parameters
            tempModel.estimateParameters(values, weights, probs);
            // Compute MSE for updated model
            oldMSE = MSE;
            MSE = tempModel.MSE();
            if (m_Debug) {
                System.err.println("MSE: " + MSE);
            }
        }
        if (MSE < bestMSE) {
            bestMSE = MSE;
            model = tempModel;
        }
        if (m_Debug) {
            System.err.println("Best MSE: " + bestMSE);
        }
        numAttempts++;
    }
    // Run until likelihood converges
    double oldLogLikelihood = -Double.MAX_VALUE;
    double loglikelihood = model.loglikelihood(values, weights);
    double[][] probs = new double[model.m_K][values.length];
    while (Utils.gr(loglikelihood, oldLogLikelihood)) {
        // Establish membership probabilities
        for (int i = 0; i < values.length; i++) {
            double[] p = Utils.logs2probs(model.logJointDensities(values[i]));
            for (int j = 0; j < p.length; j++) {
                probs[j][i] = p[j];
            }
        }
        // Estimate parameters
        model.estimateParameters(values, weights, probs);
        // Compute loglikelihood for updated model
        oldLogLikelihood = loglikelihood;
        loglikelihood = model.loglikelihood(values, weights);
    }
    return model;
}
