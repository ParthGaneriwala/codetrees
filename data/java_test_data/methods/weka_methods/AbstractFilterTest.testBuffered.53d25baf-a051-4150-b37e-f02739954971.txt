public void testBuffered() {
    Instances icopy = new Instances(m_Instances);
    Instances result = null;
    try {
        m_Filter.setInputFormat(icopy);
    } catch (Exception ex) {
        ex.printStackTrace();
        fail("Exception thrown on setInputFormat(): \n" + ex.getMessage());
    }
    try {
        result = Filter.useFilter(icopy, m_Filter);
        assertNotNull(result);
    } catch (Exception ex) {
        ex.printStackTrace();
        fail("Exception thrown on useFilter(): \n" + ex.getMessage());
    }
    // Check the output is valid for printing by trying to write out to
    // a stringbuffer
    StringWriter sw = new StringWriter(2000);
    sw.write(result.toString());
    // Check the input hasn't been modified
    // We just check the headers are the same and that the instance
    // count is the same.
    assertTrue(icopy.equalHeaders(m_Instances));
    assertEquals(icopy.numInstances(), m_Instances.numInstances());
    // Try repeating the filtering and check we get the same results
    Instances result2 = null;
    try {
        m_Filter.setInputFormat(icopy);
    } catch (Exception ex) {
        ex.printStackTrace();
        fail("Exception thrown on setInputFormat(): \n" + ex.getMessage());
    }
    try {
        result2 = Filter.useFilter(icopy, m_Filter);
        assertNotNull(result2);
    } catch (Exception ex) {
        ex.printStackTrace();
        fail("Exception thrown on useFilter(): \n" + ex.getMessage());
    }
    // Again check the input hasn't been modified
    // We just check the headers are the same and that the instance
    // count is the same.
    assertTrue(icopy.equalHeaders(m_Instances));
    assertEquals(icopy.numInstances(), m_Instances.numInstances());
    // Check the same results for both runs
    assertTrue(result.equalHeaders(result2));
    assertEquals(result.numInstances(), result2.numInstances());
}
