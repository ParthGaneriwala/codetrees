// getDistance0
double getDistance(double[][] fDistance, Vector<Integer> cluster1, Vector<Integer> cluster2) {
    double fBestDist = Double.MAX_VALUE;
    switch(m_nLinkType) {
        case SINGLE:
            // find single link distance aka minimum link, which is the closest
            // distance between
            // any item in cluster1 and any item in cluster2
            fBestDist = Double.MAX_VALUE;
            for (int i = 0; i < cluster1.size(); i++) {
                int i1 = cluster1.elementAt(i);
                for (int j = 0; j < cluster2.size(); j++) {
                    int i2 = cluster2.elementAt(j);
                    double fDist = fDistance[i1][i2];
                    if (fBestDist > fDist) {
                        fBestDist = fDist;
                    }
                }
            }
            break;
        case COMPLETE:
        case ADJCOMPLETE:
            // find complete link distance aka maximum link, which is the largest
            // distance between
            // any item in cluster1 and any item in cluster2
            fBestDist = 0;
            for (int i = 0; i < cluster1.size(); i++) {
                int i1 = cluster1.elementAt(i);
                for (int j = 0; j < cluster2.size(); j++) {
                    int i2 = cluster2.elementAt(j);
                    double fDist = fDistance[i1][i2];
                    if (fBestDist < fDist) {
                        fBestDist = fDist;
                    }
                }
            }
            if (m_nLinkType == COMPLETE) {
                break;
            }
            // calculate adjustment, which is the largest within cluster distance
            double fMaxDist = 0;
            for (int i = 0; i < cluster1.size(); i++) {
                int i1 = cluster1.elementAt(i);
                for (int j = i + 1; j < cluster1.size(); j++) {
                    int i2 = cluster1.elementAt(j);
                    double fDist = fDistance[i1][i2];
                    if (fMaxDist < fDist) {
                        fMaxDist = fDist;
                    }
                }
            }
            for (int i = 0; i < cluster2.size(); i++) {
                int i1 = cluster2.elementAt(i);
                for (int j = i + 1; j < cluster2.size(); j++) {
                    int i2 = cluster2.elementAt(j);
                    double fDist = fDistance[i1][i2];
                    if (fMaxDist < fDist) {
                        fMaxDist = fDist;
                    }
                }
            }
            fBestDist -= fMaxDist;
            break;
        case AVERAGE:
            // finds average distance between the elements of the two clusters
            fBestDist = 0;
            for (int i = 0; i < cluster1.size(); i++) {
                int i1 = cluster1.elementAt(i);
                for (int j = 0; j < cluster2.size(); j++) {
                    int i2 = cluster2.elementAt(j);
                    fBestDist += fDistance[i1][i2];
                }
            }
            fBestDist /= (cluster1.size() * cluster2.size());
            break;
        case MEAN:
            {
                // calculates the mean distance of a merged cluster (akak Group-average
                // agglomerative clustering)
                Vector<Integer> merged = new Vector<Integer>();
                merged.addAll(cluster1);
                merged.addAll(cluster2);
                fBestDist = 0;
                for (int i = 0; i < merged.size(); i++) {
                    int i1 = merged.elementAt(i);
                    for (int j = i + 1; j < merged.size(); j++) {
                        int i2 = merged.elementAt(j);
                        fBestDist += fDistance[i1][i2];
                    }
                }
                int n = merged.size();
                fBestDist /= (n * (n - 1.0) / 2.0);
            }
            break;
        case CENTROID:
            // finds the distance of the centroids of the clusters
            double[] fValues1 = new double[m_instances.numAttributes()];
            for (int i = 0; i < cluster1.size(); i++) {
                Instance instance = m_instances.instance(cluster1.elementAt(i));
                for (int j = 0; j < m_instances.numAttributes(); j++) {
                    fValues1[j] += instance.value(j);
                }
            }
            double[] fValues2 = new double[m_instances.numAttributes()];
            for (int i = 0; i < cluster2.size(); i++) {
                Instance instance = m_instances.instance(cluster2.elementAt(i));
                for (int j = 0; j < m_instances.numAttributes(); j++) {
                    fValues2[j] += instance.value(j);
                }
            }
            for (int j = 0; j < m_instances.numAttributes(); j++) {
                fValues1[j] /= cluster1.size();
                fValues2[j] /= cluster2.size();
            }
            fBestDist = m_DistanceFunction.distance(m_instances.instance(0).copy(fValues1), m_instances.instance(0).copy(fValues2));
            break;
        case WARD:
            {
                // finds the distance of the change in caused by merging the cluster.
                // The information of a cluster is calculated as the error sum of squares
                // of the
                // centroids of the cluster and its members.
                double ESS1 = calcESS(cluster1);
                double ESS2 = calcESS(cluster2);
                Vector<Integer> merged = new Vector<Integer>();
                merged.addAll(cluster1);
                merged.addAll(cluster2);
                double ESS = calcESS(merged);
                fBestDist = ESS * merged.size() - ESS1 * cluster1.size() - ESS2 * cluster2.size();
            }
            break;
    }
    return fBestDist;
}
