protected JPanel createSorterPanel() {
    JPanel sorterPanel = new JPanel(new BorderLayout());
    JPanel fieldHolder = new JPanel();
    fieldHolder.setLayout(new GridLayout(0, 2));
    JPanel attListP = new JPanel();
    attListP.setLayout(new BorderLayout());
    attListP.setBorder(BorderFactory.createTitledBorder("Sort on attribute"));
    attListP.add(m_attCombo, BorderLayout.CENTER);
    m_attCombo.setEditable(true);
    m_attCombo.setToolTipText("<html>Accepts an attribute name, index or <br> " + "the special string \"/first\" and \"/last\"</html>");
    m_descending.addItem("No");
    m_descending.addItem("Yes");
    JPanel descendingP = new JPanel();
    descendingP.setLayout(new BorderLayout());
    descendingP.setBorder(BorderFactory.createTitledBorder("Sort descending"));
    descendingP.add(m_descending, BorderLayout.CENTER);
    fieldHolder.add(attListP);
    fieldHolder.add(descendingP);
    sorterPanel.add(fieldHolder, BorderLayout.NORTH);
    m_list.setVisibleRowCount(5);
    m_deleteBut.setEnabled(false);
    JPanel listPanel = new JPanel();
    listPanel.setLayout(new BorderLayout());
    JPanel butHolder = new JPanel();
    butHolder.setLayout(new GridLayout(1, 0));
    butHolder.add(m_newBut);
    butHolder.add(m_deleteBut);
    butHolder.add(m_upBut);
    butHolder.add(m_downBut);
    m_upBut.setEnabled(false);
    m_downBut.setEnabled(false);
    listPanel.add(butHolder, BorderLayout.NORTH);
    JScrollPane js = new JScrollPane(m_list);
    js.setBorder(BorderFactory.createTitledBorder("Sort-by list (rows applied in order)"));
    listPanel.add(js, BorderLayout.CENTER);
    sorterPanel.add(listPanel, BorderLayout.CENTER);
    m_list.addListSelectionListener(new ListSelectionListener() {

        @Override
        public void valueChanged(ListSelectionEvent e) {
            if (!e.getValueIsAdjusting()) {
                if (!m_deleteBut.isEnabled()) {
                    m_deleteBut.setEnabled(true);
                }
                Object entry = m_list.getSelectedValue();
                if (entry != null) {
                    Sorter.SortRule m = (Sorter.SortRule) entry;
                    m_attCombo.setSelectedItem(m.getAttribute());
                    if (m.getDescending()) {
                        m_descending.setSelectedIndex(1);
                    } else {
                        m_descending.setSelectedIndex(0);
                    }
                }
            }
        }
    });
    m_newBut.addActionListener(new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent e) {
            Sorter.SortRule m = new Sorter.SortRule();
            String att = (m_attCombo.getSelectedItem() != null) ? m_attCombo.getSelectedItem().toString() : "";
            m.setAttribute(att);
            m.setDescending(m_descending.getSelectedIndex() == 1);
            m_listModel.addElement(m);
            if (m_listModel.size() > 1) {
                m_upBut.setEnabled(true);
                m_downBut.setEnabled(true);
            }
            m_list.setSelectedIndex(m_listModel.size() - 1);
        }
    });
    m_deleteBut.addActionListener(new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent e) {
            int selected = m_list.getSelectedIndex();
            if (selected >= 0) {
                m_listModel.removeElementAt(selected);
                if (m_listModel.size() <= 1) {
                    m_upBut.setEnabled(false);
                    m_downBut.setEnabled(false);
                }
            }
        }
    });
    m_upBut.addActionListener(new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent e) {
            JListHelper.moveUp(m_list);
        }
    });
    m_downBut.addActionListener(new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent e) {
            JListHelper.moveDown(m_list);
        }
    });
    m_attCombo.getEditor().getEditorComponent().addKeyListener(new KeyAdapter() {

        @Override
        public void keyReleased(KeyEvent e) {
            Object m = m_list.getSelectedValue();
            String text = "";
            if (m_attCombo.getSelectedItem() != null) {
                text = m_attCombo.getSelectedItem().toString();
            }
            java.awt.Component theEditor = m_attCombo.getEditor().getEditorComponent();
            if (theEditor instanceof JTextField) {
                text = ((JTextField) theEditor).getText();
            }
            if (m != null) {
                ((Sorter.SortRule) m).setAttribute(text);
                m_list.repaint();
            }
        }
    });
    m_attCombo.addActionListener(new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent e) {
            Object m = m_list.getSelectedValue();
            Object selected = m_attCombo.getSelectedItem();
            if (m != null && selected != null) {
                ((Sorter.SortRule) m).setAttribute(selected.toString());
                m_list.repaint();
            }
        }
    });
    m_descending.addActionListener(new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent e) {
            Object m = m_list.getSelectedValue();
            if (m != null) {
                ((Sorter.SortRule) m).setDescending(m_descending.getSelectedIndex() == 1);
                m_list.repaint();
            }
        }
    });
    return sorterPanel;
}
