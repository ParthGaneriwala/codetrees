@Override
public synchronized void statusMessage(String message) {
    boolean hasDelimiters = (message.indexOf('|') > 0);
    String stepName = "";
    String stepHash = "";
    String stepParameters = "";
    String stepStatus = "";
    boolean noTimer = false;
    if (!hasDelimiters) {
        stepName = "Unknown";
        stepHash = "Unknown";
        stepStatus = message;
    } else {
        // Extract the fields of the status message
        stepHash = message.substring(0, message.indexOf('|'));
        message = message.substring(message.indexOf('|') + 1, message.length());
        // See if there is a unique object ID in the stepHash string
        if (stepHash.indexOf('$') > 0) {
            // Extract the step name
            stepName = stepHash.substring(0, stepHash.indexOf('$'));
        } else {
            stepName = stepHash;
        }
        if (stepName.startsWith("@!@")) {
            noTimer = true;
            stepName = stepName.substring(3, stepName.length());
        }
        // See if there are any step parameters to extract
        if (message.indexOf('|') >= 0) {
            stepParameters = message.substring(0, message.indexOf('|'));
            stepStatus = message.substring(message.indexOf('|') + 1, message.length());
        } else {
            // set the status message to the remainder
            stepStatus = message;
        }
    }
    // Now see if this step is in the hashmap
    if (m_tableIndexes.containsKey(stepHash)) {
        // Get the row number and update the table model...
        final Integer rowNum = m_tableIndexes.get(stepHash);
        if (stepStatus.equalsIgnoreCase("remove") || stepStatus.equalsIgnoreCase("remove.")) {
            // m_tableModel.fireTableDataChanged();
            m_tableIndexes.remove(stepHash);
            Timer t = m_timers.get(stepHash);
            if (t != null) {
                t.stop();
                m_timers.remove(stepHash);
            }
            // now need to decrement all the row indexes of
            // any rows greater than this one
            Iterator<String> i = m_tableIndexes.keySet().iterator();
            while (i.hasNext()) {
                String nextKey = i.next();
                int index = m_tableIndexes.get(nextKey).intValue();
                if (index > rowNum.intValue()) {
                    index--;
                    // System.err.println("*** " + nextKey + " needs decrementing to " +
                    // index);
                    m_tableIndexes.put(nextKey, index);
                // System.err.println("new index " +
                // m_rows.get(nextKey).intValue());
                }
            }
            // Remove the entry...
            if (!SwingUtilities.isEventDispatchThread()) {
                try {
                    SwingUtilities.invokeLater(new Runnable() {

                        @Override
                        public void run() {
                            m_tableModel.removeRow(rowNum);
                        }
                    });
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            } else {
                m_tableModel.removeRow(rowNum);
            }
        } else {
            final String stepNameCopy = stepName;
            final String stepStatusCopy = stepStatus;
            final String stepParametersCopy = stepParameters;
            if (!SwingUtilities.isEventDispatchThread()) {
                try {
                    SwingUtilities.invokeLater(new Runnable() {

                        @Override
                        public void run() {
                            String currentStatus = m_tableModel.getValueAt(rowNum.intValue(), 3).toString();
                            if (currentStatus.startsWith("INTERRUPTED") || currentStatus.startsWith("ERROR")) {
                                // leave these in place until the status area is cleared.
                                return;
                            }
                            // ERROR overrides INTERRUPTED
                            if (!(stepStatusCopy.startsWith("INTERRUPTED") && ((String) m_tableModel.getValueAt(rowNum.intValue(), 3)).startsWith("ERROR"))) {
                                m_tableModel.setValueAt(stepNameCopy, rowNum.intValue(), 0);
                                m_tableModel.setValueAt(stepParametersCopy, rowNum.intValue(), 1);
                                m_tableModel.setValueAt(m_table.getValueAt(rowNum.intValue(), 2), rowNum.intValue(), 2);
                                m_tableModel.setValueAt(stepStatusCopy, rowNum.intValue(), 3);
                            }
                        }
                    });
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            } else {
                String currentStatus = m_tableModel.getValueAt(rowNum.intValue(), 3).toString();
                if (currentStatus.startsWith("INTERRUPTED") || currentStatus.startsWith("ERROR")) {
                    // leave these in place until the status area is cleared.
                    return;
                }
                if (!(stepStatusCopy.startsWith("INTERRUPTED") && ((String) m_tableModel.getValueAt(rowNum.intValue(), 3)).startsWith("ERROR"))) {
                    m_tableModel.setValueAt(stepNameCopy, rowNum.intValue(), 0);
                    m_tableModel.setValueAt(stepParametersCopy, rowNum.intValue(), 1);
                    m_tableModel.setValueAt(m_table.getValueAt(rowNum.intValue(), 2), rowNum.intValue(), 2);
                    if (m_table.getValueAt(rowNum.intValue(), 3) != null && !m_table.getValueAt(rowNum.intValue(), 3).toString().toLowerCase().startsWith("finished")) {
                        m_tableModel.setValueAt(stepStatusCopy, rowNum.intValue(), 3);
                    }
                }
            }
            if (stepStatus.startsWith("ERROR") || stepStatus.startsWith("INTERRUPTED") || stepStatus.toLowerCase().startsWith("finished") || // stepStatus.toLowerCase().startsWith("finished.") ||
            stepStatus.toLowerCase().startsWith("done") || // stepStatus.toLowerCase().startsWith("done.") ||
            stepStatus.equalsIgnoreCase("stopped") || stepStatus.equalsIgnoreCase("stopped.")) {
                // stop the timer.
                Timer t = m_timers.get(stepHash);
                if (t != null) {
                    t.stop();
                }
            } else if (m_timers.get(stepHash) != null && !m_timers.get(stepHash).isRunning()) {
                // need to create a new one in order to reset the
                // elapsed time.
                installTimer(stepHash);
            }
        // m_tableModel.fireTableCellUpdated(rowNum.intValue(), 3);
        }
    } else if (!stepStatus.equalsIgnoreCase("Remove") && !stepStatus.equalsIgnoreCase("Remove.")) {
        // Add this one to the hash map
        int numKeys = m_tableIndexes.keySet().size();
        m_tableIndexes.put(stepHash, numKeys);
        // Now add a row to the table model
        final Object[] newRow = new Object[4];
        newRow[0] = stepName;
        newRow[1] = stepParameters;
        newRow[2] = "-";
        newRow[3] = stepStatus;
        final String stepHashCopy = stepHash;
        try {
            if (!SwingUtilities.isEventDispatchThread()) {
                SwingUtilities.invokeLater(new Runnable() {

                    @Override
                    public void run() {
                        m_tableModel.addRow(newRow);
                    // m_tableModel.fireTableDataChanged();
                    }
                });
            } else {
                m_tableModel.addRow(newRow);
            }
            if (!noTimer && !stepStatus.toLowerCase().startsWith("finished") && !stepStatus.toLowerCase().startsWith("done")) {
                installTimer(stepHashCopy);
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}
