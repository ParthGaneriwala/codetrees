@Override
public String toStringNoWeight(int afterDecimalPoint) {
    StringBuilder text = new StringBuilder();
    text.append('{');
    String prefix = "";
    int sparseIndex = 0;
    for (int i = 0; i < m_NumAttributes; i++) {
        // Have we already output some values?
        if (text.length() > 1) {
            prefix = ",";
        }
        double value = 0;
        try {
            // Get the actual attribute value
            if (sparseIndex < m_Indices.length && m_Indices[sparseIndex] == i) {
                value = m_AttValues[sparseIndex++];
                if (Utils.isMissingValue(value)) {
                    text.append(prefix).append(i).append(" ?");
                    continue;
                }
            }
            // Have to treat all attributes as numeric if we don't have access to a dataset
            if (m_Dataset == null) {
                if (value != 0) {
                    text.append(prefix).append(i).append(" ").append(Utils.doubleToString(value, afterDecimalPoint));
                }
            } else {
                Attribute att = m_Dataset.attribute(i);
                if (att.isString()) {
                    // Output string value regardless
                    text.append(prefix).append(i).append(" ").append(Utils.quote(att.value((int) value)));
                } else if (att.isRelationValued()) {
                    // Output relational value regardless
                    text.append(prefix).append(i).append(" ").append(Utils.quote(att.relation((int) value).stringWithoutHeader()));
                } else if (value != 0) {
                    // Only output other attribute types if value != 0
                    if (att.isNominal()) {
                        text.append(prefix).append(i).append(" ").append(Utils.quote(att.value((int) value)));
                    } else if (att.isDate()) {
                        text.append(prefix).append(i).append(" ").append(Utils.quote(att.formatDate(value)));
                    } else {
                        text.append(prefix).append(i).append(" ").append(Utils.doubleToString(value, afterDecimalPoint));
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            System.err.println(new Instances(m_Dataset, 0) + "\n" + "Att: " + i + " Val: " + value);
            throw new Error("This should never happen!");
        }
    }
    text.append('}');
    return text.toString();
}
