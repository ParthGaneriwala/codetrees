public void testParsing() throws Exception {
    // bug in AttributeExpression
    evaluateDouble("0.0 + (-0.0 + 0.0)");
    // bug in MathematicalExpression
    evaluateDouble("(4.0-2.0)");
    // basic strings
    assertEquals("asdf", evaluateString("'asdf'"));
    assertEquals("asdf", evaluateString("\"asdf\""));
    // escape sequences
    assertEquals("\b\f\n\r\t\\\"\'", evaluateString("'\\b\\f\\n\\r\\t\\\\\\\"\\''"));
    assertEquals("\b\f\n\r\t\\\"\'", evaluateString("\"\\b\\f\\n\\r\\t\\\\\\\"\\'\""));
    // incorrect escaping
    try {
        evaluateString("'\\a\\b'");
        fail("Didn't detect improper string escaping");
    } catch (Exception e) {
    // ok
    }
    try {
        evaluateString("\"\\a\\b\"");
        fail("Didn't detect improper string escaping");
    } catch (Exception e) {
    // ok
    }
    // parser respects brackets:
    assertEquals(4.0, evaluateDouble("8.0/(4.0/2.0)"));
    assertEquals(6.0, evaluateDouble("8.0 - (4.0 - 2.0)"));
    // parser can handle brackets
    evaluateDouble("((((((((((((1))))))))))))");
    evaluateDouble("((((((((((((1)))))))))))) + ((((((((((((1))))))))))))");
    evaluateDouble("((((((((((((1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1");
    // parser can handle many operators in a row
    evaluateDouble("1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1");
    evaluateDouble("1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1");
    evaluateDouble("1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1");
    evaluateDouble("1 / 1 / 1 / 1 / 1 / 1 / 1 / 1 / 1 / 1 / 1 / 1 / 1");
    evaluateDouble("1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1");
    // unary operators
    evaluateDouble("--------1");
    evaluateDouble("1--------1");
    evaluateDouble("++++++++1");
    evaluateDouble("1++++++++1");
    evaluateDouble("-+-+-+-+1");
    evaluateDouble("1-+-+-+-+1");
    evaluateBoolean("not not not not not not true");
    evaluateBoolean("! ! ! ! ! true");
    evaluateBoolean("!!!!!true");
    evaluateBoolean("not ! not ! not true");
    evaluateBoolean("not!not!not true");
    // float parsing
    try {
        assertEquals(1.0, evaluateDouble("1"));
    } catch (Exception e) {
        fail("Parsing failure!");
    }
    try {
        assertEquals(1.0, evaluateDouble("1.0"));
    } catch (Exception e) {
        fail("Parsing failure!");
    }
    try {
        assertEquals(1.0, evaluateDouble("1.0000000000000000000000000000000"));
    } catch (Exception e) {
        fail("Parsing failure!");
    }
    try {
        assertEquals(0.0, evaluateDouble("0"));
    } catch (Exception e) {
        fail("Parsing failure!");
    }
    try {
        assertEquals(0.0, evaluateDouble("0.0"));
    } catch (Exception e) {
        fail("Parsing failure!");
    }
    try {
        assertEquals(0.0, evaluateDouble("0.00000000000000000000000000000000"));
    } catch (Exception e) {
        fail("Parsing failure!");
    }
    try {
        assertEquals(-1.0, evaluateDouble("-1"));
    } catch (Exception e) {
        fail("Parsing failure!");
    }
    try {
        assertEquals(-1.0, evaluateDouble("-1.0"));
    } catch (Exception e) {
        fail("Parsing failure!");
    }
    try {
        assertEquals(-1.0, evaluateDouble("-1.00000000000000000000000000000000"));
    } catch (Exception e) {
        fail("Parsing failure!");
    }
    try {
        // parser error
        evaluateDouble("1.0 & 5");
        fail("Failed to find syntax error!");
    } catch (Exception e) {
    // ok
    }
    try {
        // scanner error
        evaluateDouble("1.000a0");
        fail("Failed to find syntax error!");
    } catch (Exception e) {
    // ok
    }
}
