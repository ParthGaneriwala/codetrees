private void saveModel(String fileName, Instances trainHeader, Object model) {
    m_fileFormat = validateFileFormat(m_fileFormat);
    if (m_fileFormat == null) {
        // default to binary if validation fails
        m_fileFormat = s_fileFormatsAvailable.get(0);
    }
    if (model instanceof UpdateableBatchProcessor) {
        // make sure model cleans up before saving
        try {
            ((UpdateableBatchProcessor) model).batchFinished();
        } catch (Exception ex) {
            System.err.println("[SerializedModelSaver] Problem saving model");
            if (m_logger != null) {
                m_logger.logMessage("[SerializedModelSaver] " + statusMessagePrefix() + " Problem saving model. Reason: " + ex.getMessage());
                m_logger.statusMessage(statusMessagePrefix() + "ERROR (See log for details)");
            }
        }
    }
    m_logger.logMessage("[SerializedModelSaver] " + statusMessagePrefix() + " Saving model " + model.getClass().getName());
    try {
        switch(m_fileFormat.getID()) {
            case KOMLV:
                fileName = fileName + KOML.FILE_EXTENSION + FILE_EXTENSION;
                saveKOML(new File(fileName), model, trainHeader);
                break;
            case XSTREAM:
                fileName = fileName + XStream.FILE_EXTENSION + FILE_EXTENSION;
                saveXStream(new File(fileName), model, trainHeader);
                break;
            default:
                fileName = fileName + "." + FILE_EXTENSION;
                saveBinary(new File(fileName), model, trainHeader);
                break;
        }
    } catch (Exception ex) {
        System.err.println("[SerializedModelSaver] Problem saving model");
        if (m_logger != null) {
            m_logger.logMessage("[SerializedModelSaver] " + statusMessagePrefix() + " Problem saving model. Reason: " + ex.getMessage());
            m_logger.statusMessage(statusMessagePrefix() + "ERROR (See log for details)");
        }
    }
}
