protected String compareDatasets(Instances data1, Instances data2) {
    int x;
    int y;
    Comparable c1;
    Comparable c2;
    if (data1.numInstances() != data2.numInstances())
        System.err.println(getName() + " [compareDatasets] datasets differ in number of instances: " + data1.numInstances() + " != " + data2.numInstances());
    if (data1.numAttributes() != data2.numAttributes())
        System.err.println(getName() + " [compareDatasets] datasets differ in number of attributes: " + data1.numAttributes() + " != " + data2.numAttributes());
    for (x = 0; x < data1.numAttributes() && x < data2.numAttributes(); x++) {
        if (data1.attribute(x).type() != data2.attribute(x).type()) {
            System.err.println(getName() + " [compareDatasets] datasets differ in attribute type at " + (x + 1) + ": " + Attribute.typeToString(data1.attribute(x).type()) + " != " + Attribute.typeToString(data2.attribute(x).type()));
        }
    }
    for (y = 0; y < data1.numInstances() && y < data2.numInstances(); y++) {
        for (x = 0; x < data1.numAttributes() && x < data2.numAttributes(); x++) {
            if (data1.attribute(x).type() == data2.attribute(x).type()) {
                switch(data1.attribute(x).type()) {
                    case Attribute.STRING:
                        c1 = data1.instance(y).stringValue(x);
                        c2 = data2.instance(y).stringValue(x);
                        break;
                    case Attribute.RELATIONAL:
                        c1 = data1.instance(y).relationalValue(x).toString();
                        c2 = data2.instance(y).relationalValue(x).toString();
                        break;
                    default:
                        c1 = data1.instance(y).value(x);
                        c2 = data2.instance(y).value(x);
                        break;
                }
                if (c1.compareTo(c2) != 0)
                    return "Values differ in instance " + (y + 1) + " at attribute " + (x + 1) + ":\n" + c1 + "\n" + "!=\n" + c2;
            }
        }
    }
    return null;
}
