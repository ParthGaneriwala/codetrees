protected static Instances getDataDictionaryAsInstances(Document doc) throws Exception {
    // TO-DO: definition of missing values (see below)
    ArrayList<Attribute> attInfo = new ArrayList<Attribute>();
    NodeList dataDictionary = doc.getElementsByTagName("DataField");
    for (int i = 0; i < dataDictionary.getLength(); i++) {
        Node dataField = dataDictionary.item(i);
        if (dataField.getNodeType() == Node.ELEMENT_NODE) {
            Element dataFieldEl = (Element) dataField;
            String name = dataFieldEl.getAttribute("name");
            String type = dataFieldEl.getAttribute("optype");
            Attribute tempAtt = null;
            if (name != null && type != null) {
                if (type.equals("continuous")) {
                    tempAtt = new Attribute(name);
                } else if (type.equals("categorical") || type.equals("ordinal")) {
                    NodeList valueList = dataFieldEl.getElementsByTagName("Value");
                    if (valueList == null || valueList.getLength() == 0) {
                        // assume that categorical values will be revealed in the actual
                        // model.
                        // Create a string attribute for now
                        ArrayList<String> nullV = null;
                        tempAtt = new Attribute(name, nullV);
                    } else {
                        // add the values (if defined as "valid")
                        ArrayList<String> valueVector = new ArrayList<String>();
                        for (int j = 0; j < valueList.getLength(); j++) {
                            Node val = valueList.item(j);
                            if (val.getNodeType() == Node.ELEMENT_NODE) {
                                // property is optional (default value is "valid")
                                String property = ((Element) val).getAttribute("property");
                                if (property == null || property.length() == 0 || property.equals("valid")) {
                                    String value = ((Element) val).getAttribute("value");
                                    valueVector.add(value);
                                } else {
                                // Just ignore invalid or missing value definitions for
                                // now...
                                // TO-DO: implement Value meta data with missing/invalid
                                // value defs.
                                }
                            }
                        }
                        tempAtt = new Attribute(name, valueVector);
                    }
                } else {
                    throw new Exception("[PMMLFactory] can't handle " + type + "attributes.");
                }
                attInfo.add(tempAtt);
            }
        }
    }
    // TO-DO: check whether certain values are declared to represent
    // missing or invalid values (applies to both categorical and continuous
    // attributes
    // create the Instances structure
    Instances insts = new Instances("dataDictionary", attInfo, 0);
    return insts;
}
