/**
 * log(N!) + (sum for all the words i)(log(Pi^ni) - log(ni!))
 *
 * where
 * N is the total number of words
 * Pi is the probability of obtaining word i
 * ni is the number of times the word at index i occurs in the document
 *
 * Actually, this method just computes (sum for all the words i)(log(Pi^ni) because the factorials are irrelevant
 * when posterior class probabilities are computed.
 *
 * @param inst       The instance to be classified
 * @param classIndex The index of the class we are calculating the probability with respect to
 *
 * @return The log of the probability of the document occuring given the class
 */
protected double probOfDocGivenClass(Instance inst, int classIndex) {
    double answer = 0;
    for (int i = 0; i < inst.numValues(); i++) {
        if (inst.index(i) != inst.classIndex()) {
            answer += (inst.valueSparse(i) * m_probOfWordGivenClass[classIndex][inst.index(i)]);
        }
    }
    return answer;
}
