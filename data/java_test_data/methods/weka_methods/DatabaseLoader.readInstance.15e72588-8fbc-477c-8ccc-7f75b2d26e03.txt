private Instance readInstance(ResultSet rs) throws Exception {
    ResultSetMetaData md = rs.getMetaData();
    int numAttributes = md.getColumnCount();
    double[] vals = new double[numAttributes];
    m_structure.delete();
    for (int i = 1; i <= numAttributes; i++) {
        switch(m_DataBaseConnection.translateDBColumnType(md.getColumnTypeName(i))) {
            case DatabaseConnection.STRING:
                String str = rs.getString(i);
                if (rs.wasNull()) {
                    vals[i - 1] = Utils.missingValue();
                } else {
                    Double index = m_nominalIndexes[i - 1].get(str);
                    if (index == null) {
                        index = new Double(m_structure.attribute(i - 1).addStringValue(str));
                    }
                    vals[i - 1] = index.doubleValue();
                }
                break;
            case DatabaseConnection.TEXT:
                str = rs.getString(i);
                if (rs.wasNull()) {
                    vals[i - 1] = Utils.missingValue();
                } else {
                    Double index = m_nominalIndexes[i - 1].get(str);
                    if (index == null) {
                        index = new Double(m_structure.attribute(i - 1).addStringValue(str));
                    }
                    vals[i - 1] = index.doubleValue();
                }
                break;
            case DatabaseConnection.BOOL:
                boolean boo = rs.getBoolean(i);
                if (rs.wasNull()) {
                    vals[i - 1] = Utils.missingValue();
                } else {
                    vals[i - 1] = (boo ? 1.0 : 0.0);
                }
                break;
            case DatabaseConnection.DOUBLE:
                // BigDecimal bd = rs.getBigDecimal(i, 4);
                double dd = rs.getDouble(i);
                // Use the column precision instead of 4?
                if (rs.wasNull()) {
                    vals[i - 1] = Utils.missingValue();
                } else {
                    // newInst.setValue(i - 1, bd.doubleValue());
                    vals[i - 1] = dd;
                }
                break;
            case DatabaseConnection.BYTE:
                byte by = rs.getByte(i);
                if (rs.wasNull()) {
                    vals[i - 1] = Utils.missingValue();
                } else {
                    vals[i - 1] = by;
                }
                break;
            case DatabaseConnection.SHORT:
                short sh = rs.getShort(i);
                if (rs.wasNull()) {
                    vals[i - 1] = Utils.missingValue();
                } else {
                    vals[i - 1] = sh;
                }
                break;
            case DatabaseConnection.INTEGER:
                int in = rs.getInt(i);
                if (rs.wasNull()) {
                    vals[i - 1] = Utils.missingValue();
                } else {
                    vals[i - 1] = in;
                }
                break;
            case DatabaseConnection.LONG:
                long lo = rs.getLong(i);
                if (rs.wasNull()) {
                    vals[i - 1] = Utils.missingValue();
                } else {
                    vals[i - 1] = lo;
                }
                break;
            case DatabaseConnection.FLOAT:
                float fl = rs.getFloat(i);
                if (rs.wasNull()) {
                    vals[i - 1] = Utils.missingValue();
                } else {
                    vals[i - 1] = fl;
                }
                break;
            case DatabaseConnection.DATE:
                Date date = rs.getDate(i);
                if (rs.wasNull()) {
                    vals[i - 1] = Utils.missingValue();
                } else {
                    // TODO: Do a value check here.
                    vals[i - 1] = date.getTime();
                }
                break;
            case DatabaseConnection.TIME:
                Time time = rs.getTime(i);
                if (rs.wasNull()) {
                    vals[i - 1] = Utils.missingValue();
                } else {
                    // TODO: Do a value check here.
                    vals[i - 1] = time.getTime();
                }
                break;
            default:
                vals[i - 1] = Utils.missingValue();
        }
    }
    Instance inst;
    if (m_CreateSparseData) {
        inst = new SparseInstance(1.0, vals);
    } else {
        inst = new DenseInstance(1.0, vals);
    }
    // get rid of m_idColumn
    if (m_DataBaseConnection.getUpperCase()) {
        m_idColumn = m_idColumn.toUpperCase();
    }
    if (m_structure.attribute(0).name().equals(m_idColumn)) {
        inst.deleteAttributeAt(0);
        m_oldStructure.add(inst);
        inst = m_oldStructure.instance(0);
        m_oldStructure.delete(0);
    } else {
        // instances is added to and deleted from the structure to get the true
        // nominal values instead of the index of the values.
        m_structure.add(inst);
        inst = m_structure.instance(0);
        m_structure.delete(0);
    }
    return inst;
}
