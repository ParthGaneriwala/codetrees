public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(int CUP$Parser$act_num, java_cup.runtime.lr_parser CUP$Parser$parser, java.util.Stack CUP$Parser$stack, int CUP$Parser$top) throws java.lang.Exception {
    /* Symbol object for return from actions */
    java_cup.runtime.Symbol CUP$Parser$result;
    /* select the action based on the action number */
    switch(CUP$Parser$act_num) {
        /*. . . . . . . . . . . . . . . . . . . .*/
        case // $START ::= unit EOF
        0:
            {
                Object RESULT = null;
                Node start_val = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                RESULT = start_val;
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START", 0, RESULT);
            }
            /* ACCEPT */
            CUP$Parser$parser.done_parsing();
            return CUP$Parser$result;
        /*. . . . . . . . . . . . . . . . . . . .*/
        case // unit ::= expr
        1:
            {
                Node RESULT = null;
                Node e = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                RESULT = e;
                setRoot(RESULT);
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("unit", 0, RESULT);
            }
            return CUP$Parser$result;
        /*. . . . . . . . . . . . . . . . . . . .*/
        case // paramlist ::= paramlist COMMA expr
        2:
            {
                List<Node> RESULT = null;
                List<Node> l = (List<Node>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                Node e = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                l.add(e);
                RESULT = l;
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramlist", 3, RESULT);
            }
            return CUP$Parser$result;
        /*. . . . . . . . . . . . . . . . . . . .*/
        case // paramlist ::= expr
        3:
            {
                List<Node> RESULT = null;
                Node e = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                List<Node> l = new ArrayList<Node>();
                l.add(e);
                RESULT = l;
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramlist", 3, RESULT);
            }
            return CUP$Parser$result;
        /*. . . . . . . . . . . . . . . . . . . .*/
        case // paramlistOpt ::= paramlist
        4:
            {
                List<Node> RESULT = null;
                List<Node> l = (List<Node>) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                RESULT = l;
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramlistOpt", 2, RESULT);
            }
            return CUP$Parser$result;
        /*. . . . . . . . . . . . . . . . . . . .*/
        case // paramlistOpt ::=
        5:
            {
                List<Node> RESULT = null;
                RESULT = new ArrayList<Node>();
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramlistOpt", 2, RESULT);
            }
            return CUP$Parser$result;
        /*. . . . . . . . . . . . . . . . . . . .*/
        case // expr ::= LPAREN expr RPAREN
        6:
            {
                Node RESULT = null;
                Node e = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                RESULT = e;
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 1, RESULT);
            }
            return CUP$Parser$result;
        /*. . . . . . . . . . . . . . . . . . . .*/
        case // expr ::= IDENTIFIER LPAREN paramlistOpt RPAREN
        7:
            {
                Node RESULT = null;
                String m = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                List<Node> p = (List<Node>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                if (!macros.hasMacro(m))
                    throw new SemanticException("Macro '" + m + "' is undefined!");
                RESULT = macros.getMacro(m).evaluate(p.toArray(new Node[0]));
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 1, RESULT);
            }
            return CUP$Parser$result;
        /*. . . . . . . . . . . . . . . . . . . .*/
        case // expr ::= IDENTIFIER
        8:
            {
                Node RESULT = null;
                String v = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                if (!variables.hasVariable(v))
                    throw new SemanticException("Variable '" + v + "' is undefined!");
                RESULT = variables.getVariable(v);
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 1, RESULT);
            }
            return CUP$Parser$result;
        /*. . . . . . . . . . . . . . . . . . . .*/
        case // expr ::= FLOAT
        9:
            {
                Node RESULT = null;
                Double f = (Double) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                RESULT = new DoubleConstant(f);
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 1, RESULT);
            }
            return CUP$Parser$result;
        /*. . . . . . . . . . . . . . . . . . . .*/
        case // expr ::= BOOLEAN
        10:
            {
                Node RESULT = null;
                Boolean b = (Boolean) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                RESULT = new BooleanConstant(b);
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 1, RESULT);
            }
            return CUP$Parser$result;
        /*. . . . . . . . . . . . . . . . . . . .*/
        case // expr ::= STRING
        11:
            {
                Node RESULT = null;
                String s = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                RESULT = new StringConstant(s);
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 1, RESULT);
            }
            return CUP$Parser$result;
        /*. . . . . . . . . . . . . . . . . . . .*/
        case // expr ::= PLUS expr
        12:
            {
                Node RESULT = null;
                Node e = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                RESULT = Operators.uplus(e);
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 1, RESULT);
            }
            return CUP$Parser$result;
        /*. . . . . . . . . . . . . . . . . . . .*/
        case // expr ::= MINUS expr
        13:
            {
                Node RESULT = null;
                Node e = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                RESULT = Operators.uminus(e);
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 1, RESULT);
            }
            return CUP$Parser$result;
        /*. . . . . . . . . . . . . . . . . . . .*/
        case // expr ::= expr POW expr
        14:
            {
                Node RESULT = null;
                Node l = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                Node r = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                RESULT = Operators.pow(l, r);
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 1, RESULT);
            }
            return CUP$Parser$result;
        /*. . . . . . . . . . . . . . . . . . . .*/
        case // expr ::= expr PLUS expr
        15:
            {
                Node RESULT = null;
                Node l = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                Node r = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                RESULT = Operators.plus(l, r);
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 1, RESULT);
            }
            return CUP$Parser$result;
        /*. . . . . . . . . . . . . . . . . . . .*/
        case // expr ::= expr MINUS expr
        16:
            {
                Node RESULT = null;
                Node l = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                Node r = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                RESULT = Operators.minus(l, r);
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 1, RESULT);
            }
            return CUP$Parser$result;
        /*. . . . . . . . . . . . . . . . . . . .*/
        case // expr ::= expr TIMES expr
        17:
            {
                Node RESULT = null;
                Node l = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                Node r = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                RESULT = Operators.times(l, r);
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 1, RESULT);
            }
            return CUP$Parser$result;
        /*. . . . . . . . . . . . . . . . . . . .*/
        case // expr ::= expr DIVISION expr
        18:
            {
                Node RESULT = null;
                Node l = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                Node r = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                RESULT = Operators.division(l, r);
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 1, RESULT);
            }
            return CUP$Parser$result;
        /*. . . . . . . . . . . . . . . . . . . .*/
        case // expr ::= expr AND expr
        19:
            {
                Node RESULT = null;
                Node l = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                Node r = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                RESULT = Operators.and(l, r);
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 1, RESULT);
            }
            return CUP$Parser$result;
        /*. . . . . . . . . . . . . . . . . . . .*/
        case // expr ::= expr OR expr
        20:
            {
                Node RESULT = null;
                Node l = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                Node r = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                RESULT = Operators.or(l, r);
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 1, RESULT);
            }
            return CUP$Parser$result;
        /*. . . . . . . . . . . . . . . . . . . .*/
        case // expr ::= NOT expr
        21:
            {
                Node RESULT = null;
                Node e = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                RESULT = Operators.not(e);
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 1, RESULT);
            }
            return CUP$Parser$result;
        /*. . . . . . . . . . . . . . . . . . . .*/
        case // expr ::= expr EQUAL expr
        22:
            {
                Node RESULT = null;
                Node l = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                Node r = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                RESULT = Operators.equal(l, r);
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 1, RESULT);
            }
            return CUP$Parser$result;
        /*. . . . . . . . . . . . . . . . . . . .*/
        case // expr ::= expr LT expr
        23:
            {
                Node RESULT = null;
                Node l = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                Node r = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                RESULT = Operators.lessThan(l, r);
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 1, RESULT);
            }
            return CUP$Parser$result;
        /*. . . . . . . . . . . . . . . . . . . .*/
        case // expr ::= expr LE expr
        24:
            {
                Node RESULT = null;
                Node l = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                Node r = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                RESULT = Operators.lessEqual(l, r);
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 1, RESULT);
            }
            return CUP$Parser$result;
        /*. . . . . . . . . . . . . . . . . . . .*/
        case // expr ::= expr GT expr
        25:
            {
                Node RESULT = null;
                Node l = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                Node r = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                RESULT = Operators.greaterThan(l, r);
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 1, RESULT);
            }
            return CUP$Parser$result;
        /*. . . . . . . . . . . . . . . . . . . .*/
        case // expr ::= expr GE expr
        26:
            {
                Node RESULT = null;
                Node l = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                Node r = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                RESULT = Operators.greaterEqual(l, r);
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 1, RESULT);
            }
            return CUP$Parser$result;
        /*. . . . . . . . . . . . . . . . . . . .*/
        case // expr ::= expr IS expr
        27:
            {
                Node RESULT = null;
                Node l = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                Node r = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                RESULT = Operators.is(l, r);
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 1, RESULT);
            }
            return CUP$Parser$result;
        /*. . . . . . . . . . . . . . . . . . . .*/
        case // expr ::= expr REGEXP expr
        28:
            {
                Node RESULT = null;
                Node l = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                Node r = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                RESULT = Operators.regexp(l, r);
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 1, RESULT);
            }
            return CUP$Parser$result;
        /* . . . . . .*/
        default:
            throw new Exception("Invalid action number " + CUP$Parser$act_num + "found in internal parse table");
    }
}
