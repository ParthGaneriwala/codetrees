public void prune() throws Exception {
    Evaluation nodeModelEval = null;
    if (m_isLeaf) {
        buildLinearModel(m_indices);
        nodeModelEval = new Evaluation(m_instances);
        // count the constant term as a paramter for a leaf
        // Evaluate the model
        nodeModelEval.evaluateModel(m_nodeModel, m_instances);
        m_rootMeanSquaredError = nodeModelEval.rootMeanSquaredError();
    } else {
        // Prune the left and right subtrees
        if (m_left != null) {
            m_left.prune();
        }
        if (m_right != null) {
            m_right.prune();
        }
        buildLinearModel(m_indices);
        nodeModelEval = new Evaluation(m_instances);
        double rmsModel;
        double adjustedErrorModel;
        nodeModelEval.evaluateModel(m_nodeModel, m_instances);
        rmsModel = nodeModelEval.rootMeanSquaredError();
        adjustedErrorModel = rmsModel * pruningFactor(m_numInstances, m_nodeModel.numParameters() + 1);
        // Evaluate this node (ie its left and right subtrees)
        Evaluation nodeEval = new Evaluation(m_instances);
        double rmsSubTree;
        double adjustedErrorNode;
        int l_params = 0, r_params = 0;
        nodeEval.evaluateModel(this, m_instances);
        rmsSubTree = nodeEval.rootMeanSquaredError();
        if (m_left != null) {
            l_params = m_left.numParameters();
        }
        if (m_right != null) {
            r_params = m_right.numParameters();
        }
        adjustedErrorNode = rmsSubTree * pruningFactor(m_numInstances, (l_params + r_params + 1));
        if ((adjustedErrorModel <= adjustedErrorNode) || (adjustedErrorModel < (m_globalDeviation * 0.00001))) {
            // Choose linear model for this node rather than subtree model
            m_isLeaf = true;
            m_right = null;
            m_left = null;
            m_numParameters = m_nodeModel.numParameters() + 1;
            m_rootMeanSquaredError = rmsModel;
        } else {
            m_numParameters = (l_params + r_params + 1);
            m_rootMeanSquaredError = rmsSubTree;
        }
    }
    // save space
    if (!m_saveInstances) {
        m_instances = new Instances(m_instances, 0);
    }
}
