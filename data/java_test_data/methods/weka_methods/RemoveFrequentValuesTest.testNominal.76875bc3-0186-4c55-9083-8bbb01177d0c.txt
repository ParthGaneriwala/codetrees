public void testNominal() {
    Instances icopy;
    Instances result;
    // setting the nominal index
    ((RemoveFrequentValues) m_Filter).setAttributeIndex(Integer.toString(indexNominal));
    // don't modify header
    icopy = new Instances(m_Instances);
    m_Filter = getFilter();
    try {
        m_Filter.setInputFormat(icopy);
        result = useFilter();
        assertEquals("Doesn't modify the header, i.e. removing labels", m_Instances.attribute(indexNominal).numValues(), result.attribute(indexNominal).numValues());
    } catch (Exception ex) {
    // OK
    }
    // modify header
    icopy = new Instances(m_Instances);
    m_Filter = getFilter();
    try {
        ((RemoveFrequentValues) m_Filter).setModifyHeader(true);
        m_Filter.setInputFormat(icopy);
        result = useFilter();
        assertEquals("Returns " + ((RemoveFrequentValues) m_Filter).getNumValues() + " out of the " + m_Instances.attribute(indexNominal).numValues() + " labels", ((RemoveFrequentValues) m_Filter).getNumValues(), result.attribute(indexNominal).numValues());
    } catch (Exception ex) {
    // OK
    }
    // modify header + least common
    icopy = new Instances(m_Instances);
    m_Filter = getFilter();
    try {
        ((RemoveFrequentValues) m_Filter).setModifyHeader(true);
        ((RemoveFrequentValues) m_Filter).setUseLeastValues(true);
        m_Filter.setInputFormat(icopy);
        result = useFilter();
        assertEquals("Returns " + ((RemoveFrequentValues) m_Filter).getNumValues() + " out of the " + m_Instances.attribute(indexNominal).numValues() + " labels", ((RemoveFrequentValues) m_Filter).getNumValues(), result.attribute(indexNominal).numValues());
    } catch (Exception ex) {
    // OK
    }
    // modify header + least common + inverse
    icopy = new Instances(m_Instances);
    m_Filter = getFilter();
    try {
        ((RemoveFrequentValues) m_Filter).setModifyHeader(true);
        ((RemoveFrequentValues) m_Filter).setUseLeastValues(true);
        ((RemoveFrequentValues) m_Filter).setInvertSelection(true);
        ((RemoveFrequentValues) m_Filter).setNumValues(4);
        m_Filter.setInputFormat(icopy);
        result = useFilter();
        assertEquals("Returns 1 out of the " + m_Instances.attribute(indexNominal).numValues() + " labels, even though we try to remove " + ((RemoveFrequentValues) m_Filter).getNumValues() + " labels, since it always returns at least 1 label", 1, result.attribute(indexNominal).numValues());
    } catch (Exception ex) {
    // OK
    }
}
