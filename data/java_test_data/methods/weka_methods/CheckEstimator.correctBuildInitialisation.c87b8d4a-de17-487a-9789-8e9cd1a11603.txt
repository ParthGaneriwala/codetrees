protected boolean[] correctBuildInitialisation(AttrTypes attrTypes, int classType) {
    boolean[] result = new boolean[2];
    print("correct initialisation during buildEstimator");
    printAttributeSummary(attrTypes, classType);
    print("...");
    int numTrain = getNumInstances();
    getNumInstances();
    int numClasses = 2, missingLevel = 0;
    boolean attributeMissing = false, classMissing = false;
    Instances train1 = null;
    Instances train2 = null;
    Estimator estimator = null;
    Estimator estimator1 = null;
    boolean built = false;
    int stage = 0;
    int attrIndex1 = 1;
    int attrIndex2 = 2;
    try {
        // Make two sets of train/test splits with different
        // numbers of attributes
        train1 = makeTestDataset(42, numTrain, 2, attrTypes, numClasses, classType);
        train2 = makeTestDataset(84, numTrain, 3, attrTypes, numClasses, classType);
        if (missingLevel > 0) {
            addMissing(train1, missingLevel, attributeMissing, classMissing, attrIndex1);
            addMissing(train2, missingLevel, attributeMissing, classMissing, attrIndex2);
        }
        estimator = Estimator.makeCopies(getEstimator(), 1)[0];
    } catch (Exception ex) {
        throw new Error("Error setting up for tests: " + ex.getMessage());
    }
    try {
        // TESTING??
        stage = 0;
        estimator.addValues(train1, attrIndex1);
        built = true;
        estimator1 = Estimator.makeCopies(getEstimator(), 1)[0];
        stage = 1;
        built = false;
        estimator.addValues(train2, attrIndex2);
        built = true;
        stage = 2;
        built = false;
        estimator.addValues(train1, attrIndex1);
        built = true;
        stage = 3;
        if (!estimator.equals(estimator1)) {
            if (m_Debug) {
                println("\n=== Full report ===\n" + "\nFirst build estimator\n" + estimator.toString() + "\n\n");
                println("\nSecond build estimator\n" + estimator.toString() + "\n\n");
            }
            throw new Exception("Results differ between buildEstimator calls");
        }
        println("yes");
        result[0] = true;
    } catch (Exception ex) {
        String msg = ex.getMessage().toLowerCase();
        if (msg.indexOf("worse than zeror") >= 0) {
            println("warning: performs worse than ZeroR");
            result[0] = true;
            result[1] = true;
        } else {
            println("no");
            result[0] = false;
        }
        if (m_Debug) {
            println("\n=== Full Report ===");
            print("Problem during");
            if (built) {
                print(" testing");
            } else {
                print(" training");
            }
            switch(stage) {
                case 0:
                    print(" of dataset 1");
                    break;
                case 1:
                    print(" of dataset 2");
                    break;
                case 2:
                    print(" of dataset 1 (2nd build)");
                    break;
                case 3:
                    print(", comparing results from builds of dataset 1");
                    break;
            }
            println(": " + ex.getMessage() + "\n");
            println("here are the datasets:\n");
            println("=== Train1 Dataset ===\n" + train1.toString() + "\n");
            println("=== Train2 Dataset ===\n" + train2.toString() + "\n");
        }
    }
    return result;
}
