protected double kernelHelper2(int n, char[] s, int endIndexS, char[] t, int endIndexT) {
    // recursion ends if one of the indices in both strings is <0
    if (endIndexS < 0 || endIndexT < 0) {
        return getReturnValue(n);
    }
    int adr = 0;
    if (m_useRecursionCache) {
        adr = m_multX * n + m_multY * endIndexS + m_multZ * endIndexT;
        if (cachekh2K[adr % maxCache] == adr + 1) {
            return cachekh2[adr % maxCache];
        }
    }
    // spot the last character in s, we'll need it
    char x = s[endIndexS];
    // by omitting y.
    if (x == t[endIndexT]) {
        double ret = m_lambda * (kernelHelper2(n, s, endIndexS, t, endIndexT - 1) + m_lambda * kernelHelper(n - 1, s, endIndexS - 1, t, endIndexT - 1));
        if (m_useRecursionCache) {
            cachekh2K[adr % maxCache] = adr + 1;
            cachekh2[adr % maxCache] = ret;
        }
        return ret;
    } else {
        double ret = m_lambda * kernelHelper2(n, s, endIndexS, t, endIndexT - 1);
        if (m_useRecursionCache) {
            cachekh2K[adr % maxCache] = adr + 1;
            cachekh2[adr % maxCache] = ret;
        }
        return ret;
    }
// look for x in t from back to front.
// this is actually an optimization from [1] that spares unneccessary
// recursions iff
// x is actually found in t, but not at the last position.
/*
     * int i; int threshold = n>0?n-1:0; for (i=endIndexT-1; i >= threshold;i--)
     * { if (x == t[i]) { double ret=getPowerOfLambda(endIndexT-i) *
     * kernelHelper2(n,s,endIndexS, t, i); if (m_useRecursionCache) {
     * cachekh2K[adr % maxCache]=adr+1; cachekh2[adr % maxCache]=ret; } return
     * ret; } }
     */
// end the recursion if x is not found in t.
/*
     * double ret = getReturnValue(n); if (m_useRecursionCache) { cachekh2K[adr
     * % maxCache]=adr+1; cachekh2[adr % maxCache]=ret; } return ret;
     */
}
