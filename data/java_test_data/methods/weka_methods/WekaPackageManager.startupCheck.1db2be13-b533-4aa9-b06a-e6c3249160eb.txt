public static Exception startupCheck(boolean force, PrintStream... progress) {
    Exception problem = null;
    BufferedReader br = null;
    PrintWriter pw = null;
    File newPackageLastTimeCheckFile = new File(WEKA_HOME.toString() + File.separator + "new_package_check.txt");
    try {
        // first check against last time that new packages were checked for
        boolean doChecks = false;
        long currentTime = System.currentTimeMillis();
        if (!newPackageLastTimeCheckFile.exists()) {
            doChecks = true;
        } else if (!force) {
            br = new BufferedReader(new FileReader(newPackageLastTimeCheckFile));
            String t = br.readLine();
            long lastTime = Long.parseLong(t);
            doChecks = (currentTime - lastTime > 720L * 60L * 1000L);
        }
        if (doChecks || force) {
            if (REP_MIRROR == null) {
                establishMirror();
            }
            establishCacheIfNeeded(progress);
            boolean forcedCacheRefresh = false;
            try {
                if (forcedCacheRefresh = checkForForcedCacheRefresh()) {
                    for (PrintStream p : progress) {
                        p.println("Forced repository metadata refresh, please wait...");
                    }
                    problem = refreshCache(progress);
                }
            } catch (MalformedURLException ex) {
                problem = ex;
            }
            if (!forcedCacheRefresh) {
                checkForNewPackages(progress);
            }
            pw = new PrintWriter(new FileWriter(newPackageLastTimeCheckFile));
            pw.println(currentTime);
            pw.flush();
        }
    } catch (IOException e) {
        e.printStackTrace();
    } finally {
        if (br != null) {
            try {
                br.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        if (pw != null) {
            pw.close();
        }
    }
    return problem;
}
