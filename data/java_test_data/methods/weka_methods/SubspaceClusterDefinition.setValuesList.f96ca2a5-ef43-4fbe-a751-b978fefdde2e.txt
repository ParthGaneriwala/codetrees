public void setValuesList(String fromToList) throws Exception {
    m_valueA = new double[m_numClusterAttributes];
    m_valueB = new double[m_numClusterAttributes];
    setValuesList(fromToList, m_valueA, m_valueB, "D");
    SubspaceCluster parent = (SubspaceCluster) getParent();
    for (int i = 0; i < m_numClusterAttributes; i++) {
        if ((!isGaussian()) && (m_valueA[i] > m_valueB[i])) {
            throw new Exception("Min must be smaller than max.");
        }
        if (getParent() != null) {
            // boolean values are only 0.0 and 1.0
            if (parent.isBoolean(m_attrIndices[i])) {
                parent.getNumValues()[m_attrIndices[i]] = 2;
                if (((m_valueA[i] != 0.0) && (m_valueA[i] != 1.0)) || ((m_valueB[i] != 0.0) && (m_valueB[i] != 1.0))) {
                    throw new Exception("Ranges for boolean must be 0 or 1 only.");
                }
            }
            if (parent.isNominal(m_attrIndices[i])) {
                // nominal values: attributes range might have to be enlarged
                double rest = m_valueA[i] - Math.rint(m_valueA[i]);
                if (rest != 0.0) {
                    throw new Exception(" Ranges for nominal must be integer");
                }
                rest = m_valueB[i] - Math.rint(m_valueB[i]);
                if (rest != 0.0) {
                    throw new Exception("Ranges for nominal must be integer");
                }
                if (m_valueA[i] < 0.0) {
                    throw new Exception("Range for nominal must start with number 0.0 or higher");
                }
                if (m_valueB[i] + 1 > parent.getNumValues()[m_attrIndices[i]]) {
                    // add new values to attribute
                    // (actual format is not yet defined)
                    parent.getNumValues()[m_attrIndices[i]] = (int) m_valueB[i] + 1;
                }
            }
        }
    }
}
