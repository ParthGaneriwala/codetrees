@Override
public void mouseClicked(MouseEvent e) {
    final int index = m_List.locationToIndex(e.getPoint());
    if ((e.getClickCount() == 2) && (e.getButton() == MouseEvent.BUTTON1)) {
        // returned
        if (index > -1) {
            actionPerformed(new ActionEvent(m_EditBut, 0, ""));
        }
    } else if (e.getClickCount() == 1) {
        if ((e.getButton() == MouseEvent.BUTTON3) || ((e.getButton() == MouseEvent.BUTTON1) && e.isAltDown() && e.isShiftDown())) {
            JPopupMenu menu = new JPopupMenu();
            JMenuItem item;
            item = new JMenuItem("Add configuration(s)...");
            item.addActionListener(new ActionListener() {

                @Override
                public void actionPerformed(ActionEvent e) {
                    String str = JOptionPane.showInputDialog(self, "Configuration (<classname> [<options>])");
                    if (str != null && str.length() > 0) {
                        try {
                            String[] options = Utils.splitOptions(str);
                            String classname = options[0];
                            options[0] = "";
                            Class c = Utils.forName(Object.class, classname, null).getClass();
                            if (c.isArray()) {
                                for (int i = 1; i < options.length; i++) {
                                    String[] ops = Utils.splitOptions(options[i]);
                                    String cname = ops[0];
                                    ops[0] = "";
                                    m_AlgorithmListModel.addElement(Utils.forName(Object.class, cname, ops));
                                }
                            } else {
                                m_AlgorithmListModel.addElement(Utils.forName(Object.class, classname, options));
                            }
                            updateExperiment();
                        } catch (Exception ex) {
                            ex.printStackTrace();
                            JOptionPane.showMessageDialog(self, "Error parsing commandline:\n" + ex, "Error...", JOptionPane.ERROR_MESSAGE);
                        }
                    }
                }
            });
            menu.add(item);
            if (m_List.getSelectedValue() != null) {
                menu.addSeparator();
                item = new JMenuItem("Show properties...");
                item.addActionListener(new ActionListener() {

                    @Override
                    public void actionPerformed(ActionEvent e) {
                        if (m_List.getSelectedValuesList().size() > 1) {
                            JOptionPane.showMessageDialog(self, "You have selected more than one element in the list.", "Error...", JOptionPane.ERROR_MESSAGE);
                            return;
                        }
                        self.actionPerformed(new ActionEvent(m_EditBut, 0, ""));
                    }
                });
                menu.add(item);
                item = new JMenuItem("Copy configuration(s) to clipboard");
                item.addActionListener(new ActionListener() {

                    @Override
                    public void actionPerformed(ActionEvent e) {
                        List<Classifier> list = m_List.getSelectedValuesList();
                        Object value = null;
                        if (list.size() > 1) {
                            value = list.toArray(new Classifier[0]);
                        } else {
                            value = list.get(0);
                        }
                        String str = "";
                        if (value.getClass().isArray()) {
                            str += value.getClass().getName();
                            Object[] arr = (Object[]) value;
                            for (Object v : arr) {
                                String s = v.getClass().getName();
                                if (v instanceof OptionHandler) {
                                    s += " " + Utils.joinOptions(((OptionHandler) v).getOptions());
                                }
                                str += " \"" + Utils.backQuoteChars(s.trim()) + "\"";
                            }
                        } else {
                            str += value.getClass().getName();
                            if (value instanceof OptionHandler) {
                                str += " " + Utils.joinOptions(((OptionHandler) value).getOptions());
                            }
                        }
                        StringSelection selection = new StringSelection(str.trim());
                        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                        clipboard.setContents(selection, selection);
                    }
                });
                menu.add(item);
                item = new JMenuItem("Enter configuration...");
                item.addActionListener(new ActionListener() {

                    @Override
                    public void actionPerformed(ActionEvent e) {
                        if (m_List.getSelectedValuesList().size() > 1) {
                            JOptionPane.showMessageDialog(self, "You have selected more than one element in the list.", "Error...", JOptionPane.ERROR_MESSAGE);
                            return;
                        }
                        String str = JOptionPane.showInputDialog(self, "Configuration (<classname> [<options>])");
                        if (str != null && str.length() > 0) {
                            try {
                                String[] options = Utils.splitOptions(str);
                                String classname = options[0];
                                options[0] = "";
                                Object obj = Utils.forName(Object.class, classname, options);
                                m_AlgorithmListModel.setElementAt(obj, index);
                                updateExperiment();
                            } catch (Exception ex) {
                                ex.printStackTrace();
                                JOptionPane.showMessageDialog(self, "Error parsing commandline:\n" + ex, "Error...", JOptionPane.ERROR_MESSAGE);
                            }
                        }
                    }
                });
                menu.add(item);
            }
            menu.show(m_List, e.getX(), e.getY());
        }
    }
}
