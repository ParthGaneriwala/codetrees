private static void init() {
    weka.core.logging.Logger.log(weka.core.logging.Logger.Level.INFO, "[KnowledgeFlow] Initializing KF...");
    // suppress these benign warnings when loading/deserializing XML flows
    if (!XMLBeans.SUPPRESS_PROPERTY_WARNINGS.contains("visual.iconPath")) {
        XMLBeans.SUPPRESS_PROPERTY_WARNINGS.add("visual.iconPath");
    }
    if (!XMLBeans.SUPPRESS_PROPERTY_WARNINGS.contains("visual.animatedIconPath")) {
        XMLBeans.SUPPRESS_PROPERTY_WARNINGS.add("visual.animatedIconPath");
    }
    try {
        TOOLBARS = new Vector<Vector<?>>();
        TreeMap<Integer, Object> wrapList = new TreeMap<Integer, Object>();
        Properties GEOProps = GenericPropertiesCreator.getGlobalOutputProperties();
        if (GEOProps == null) {
            GenericPropertiesCreator creator = new GenericPropertiesCreator();
            if (creator.useDynamic()) {
                creator.execute(false);
                /*
           * now process the keys in the GenericObjectEditor.props. For each key
           * that has an entry in the Beans.props associating it with a bean
           * component a button tool bar will be created
           */
                GEOProps = creator.getOutputProperties();
            } else {
                // Read the static information from the GenericObjectEditor.props
                GEOProps = Utils.readProperties("weka/gui/GenericObjectEditor.props");
            }
        }
        Enumeration<?> en = GEOProps.propertyNames();
        while (en.hasMoreElements()) {
            String geoKey = (String) en.nextElement();
            // System.err.println("GEOKey " + geoKey);
            // try to match this key with one in the Beans.props file
            String beanCompName = BeansProperties.BEAN_PROPERTIES.getProperty(geoKey);
            if (beanCompName != null) {
                // add details necessary to construct a button bar for this class
                // of algorithms
                Vector<Object> newV = new Vector<Object>();
                // check for a naming alias for this toolbar
                String toolBarNameAlias = BeansProperties.BEAN_PROPERTIES.getProperty(geoKey + ".alias");
                String toolBarName = (toolBarNameAlias != null) ? toolBarNameAlias : geoKey.substring(geoKey.lastIndexOf('.') + 1, geoKey.length());
                // look for toolbar ordering information for this wrapper type
                String order = BeansProperties.BEAN_PROPERTIES.getProperty(geoKey + ".order");
                Integer intOrder = (order != null) ? new Integer(order) : new Integer(0);
                // Name for the toolbar (name of weka algorithm class)
                newV.addElement(toolBarName);
                // Name of bean capable of handling this class of algorithm
                newV.addElement(beanCompName);
                // add the root package for this key
                String rootPackage = geoKey.substring(0, geoKey.lastIndexOf('.'));
                newV.addElement(rootPackage);
                // All the weka algorithms of this class of algorithm
                String wekaAlgs = GEOProps.getProperty(geoKey);
                Hashtable<String, String> roots = GenericObjectEditor.sortClassesByRoot(wekaAlgs);
                Hashtable<String, HierarchyPropertyParser> hpps = new Hashtable<String, HierarchyPropertyParser>();
                Enumeration<String> enm = roots.keys();
                while (enm.hasMoreElements()) {
                    String root = enm.nextElement();
                    String classes = roots.get(root);
                    weka.gui.HierarchyPropertyParser hpp = new weka.gui.HierarchyPropertyParser();
                    hpp.build(classes, ", ");
                    // System.err.println(hpp.showTree());
                    hpps.put(root, hpp);
                }
                // ------ test the HierarchyPropertyParser
                /*
           * weka.gui.HierarchyPropertyParser hpp = new
           * weka.gui.HierarchyPropertyParser(); hpp.build(wekaAlgs, ", ");
           *
           * System.err.println(hpp.showTree());
           */
                // ----- end test the HierarchyPropertyParser
                // newV.addElement(hpp); // add the hierarchical property parser
                // add the hierarchical property parser
                newV.addElement(hpps);
                StringTokenizer st = new StringTokenizer(wekaAlgs, ", ");
                while (st.hasMoreTokens()) {
                    String current = st.nextToken().trim();
                    newV.addElement(current);
                }
                wrapList.put(intOrder, newV);
            // TOOLBARS.addElement(newV);
            }
        }
        Iterator<Integer> keysetIt = wrapList.keySet().iterator();
        while (keysetIt.hasNext()) {
            Integer key = keysetIt.next();
            @SuppressWarnings("unchecked") Vector<Object> newV = (Vector<Object>) wrapList.get(key);
            if (newV != null) {
                TOOLBARS.addElement(newV);
            }
        }
    } catch (Exception ex) {
        JOptionPane.showMessageDialog(null, "Could not read a configuration file for the generic objecte editor" + ". An example file is included with the Weka distribution.\n" + "This file should be named \"GenericObjectEditor.props\" and\n" + "should be placed either in your user home (which is set\n" + "to \"" + System.getProperties().getProperty("user.home") + "\")\n" + "or the directory that java was started from\n", "KnowledgeFlow", JOptionPane.ERROR_MESSAGE);
    }
    try {
        String standardToolBarNames = BeansProperties.BEAN_PROPERTIES.getProperty("weka.gui.beans.KnowledgeFlow.standardToolBars");
        StringTokenizer st = new StringTokenizer(standardToolBarNames, ", ");
        while (st.hasMoreTokens()) {
            String tempBarName = st.nextToken().trim();
            // construct details for this toolbar
            Vector<String> newV = new Vector<String>();
            // add the name of the toolbar
            newV.addElement(tempBarName);
            // indicate that this is a standard toolbar (no wrapper bean)
            newV.addElement("null");
            String toolBarContents = BeansProperties.BEAN_PROPERTIES.getProperty("weka.gui.beans.KnowledgeFlow." + tempBarName);
            StringTokenizer st2 = new StringTokenizer(toolBarContents, ", ");
            while (st2.hasMoreTokens()) {
                String tempBeanName = st2.nextToken().trim();
                newV.addElement(tempBeanName);
            }
            TOOLBARS.addElement(newV);
        }
    } catch (Exception ex) {
        JOptionPane.showMessageDialog(null, ex.getMessage(), "KnowledgeFlow", JOptionPane.ERROR_MESSAGE);
    }
}
