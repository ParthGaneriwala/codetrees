protected void runSequentially(List<StepManagerImpl> startPoints) throws WekaException {
    m_logHandler.logDetailed("Flow runner: using execution environment - " + "" + m_execEnv.getDescription());
    TreeMap<Integer, StepManagerImpl> sortedStartPoints = new TreeMap<Integer, StepManagerImpl>();
    List<StepManagerImpl> unNumbered = new ArrayList<StepManagerImpl>();
    for (StepManagerImpl s : startPoints) {
        String stepName = s.getManagedStep().getName();
        if (stepName.startsWith("!")) {
            continue;
        }
        if (stepName.indexOf(":") > 0) {
            try {
                Integer num = Integer.parseInt(stepName.split(":")[0]);
                sortedStartPoints.put(num, s);
            } catch (NumberFormatException ex) {
                unNumbered.add(s);
            }
        } else {
            unNumbered.add(s);
        }
    }
    int biggest = 0;
    if (sortedStartPoints.size() > 0) {
        biggest = sortedStartPoints.lastKey();
    }
    for (StepManagerImpl s : unNumbered) {
        biggest++;
        sortedStartPoints.put(biggest, s);
    }
    for (final StepManagerImpl stepToStart : sortedStartPoints.values()) {
        if (stepToStart.getManagedStep() instanceof Note) {
            continue;
        }
        m_logHandler.logLow("FlowRunner: Launching start point: " + stepToStart.getManagedStep().getName());
        m_execEnv.launchStartPoint(stepToStart);
    /*
       * m_execEnv.submitTask(new StepTask<Void>(null) {
       * 
       * /** For serialization * private static final long serialVersionUID =
       * -5466021103296024455L;
       * 
       * @Override public void process() throws Exception {
       * stepToStart.startStep(); } });
       */
    }
    m_logHandler.logDebug("FlowRunner: Launching shutdown monitor");
    launchExecutorShutdownThread();
}
