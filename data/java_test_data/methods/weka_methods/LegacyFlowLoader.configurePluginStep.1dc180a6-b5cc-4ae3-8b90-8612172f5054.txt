protected void configurePluginStep(Object legacy, Step current) throws WekaException {
    if (legacy.getClass().toString().endsWith("PythonScriptExecutor") && current.getClass().toString().endsWith("PythonScriptExecutor")) {
        try {
            transferSetting(legacy, current, "Debug", Boolean.TYPE);
            transferSetting(legacy, current, "PythonScript", String.class);
            Method getM = legacy.getClass().getDeclaredMethod("getScriptFile", new Class[] {});
            Object value = getM.invoke(legacy, new Object[] {});
            Method setM = current.getClass().getDeclaredMethod("setScriptFile", new Class[] { File.class });
            setM.invoke(current, new Object[] { new File(value.toString()) });
            transferSetting(legacy, current, "VariablesToGetFromPython", String.class);
        } catch (Exception ex) {
            throw new WekaException(ex);
        }
    } else if (legacy.getClass().toString().endsWith("RScriptExecutor") && current.getClass().toString().endsWith("RScriptExecutor")) {
        try {
            transferSetting(legacy, current, "RScript", String.class);
            Method getM = legacy.getClass().getDeclaredMethod("getScriptFile", new Class[] {});
            Object value = getM.invoke(legacy, new Object[] {});
            Method setM = current.getClass().getDeclaredMethod("setScriptFile", new Class[] { File.class });
            setM.invoke(current, new Object[] { new File(value.toString()) });
        } catch (Exception ex) {
            throw new WekaException(ex);
        }
    } else if (legacy.getClass().toString().endsWith("JsonFieldExtractor") && current.getClass().toString().endsWith("JsonFieldExtractor")) {
        try {
            transferSetting(legacy, current, "PathDetails", String.class);
        } catch (Exception ex) {
            throw new WekaException(ex);
        }
    } else if (legacy.getClass().toString().endsWith("TimeSeriesForecasting") && current.getClass().toString().endsWith("TimeSeriesForecasting")) {
        try {
            transferSetting(legacy, current, "EncodedForecaster", String.class);
            transferSetting(legacy, current, "NumStepsToForecast", String.class);
            transferSetting(legacy, current, "ArtificialTimeStartOffset", String.class);
            transferSetting(legacy, current, "RebuildForecaster", Boolean.TYPE);
            Method getM = legacy.getClass().getDeclaredMethod("getFilename", new Class[] {});
            Object value = getM.invoke(legacy, new Object[] {});
            Method setM = current.getClass().getDeclaredMethod("setFilename", new Class[] { File.class });
            setM.invoke(current, new Object[] { new File(value.toString()) });
            getM = legacy.getClass().getDeclaredMethod("getSaveFilename", new Class[] {});
            value = getM.invoke(legacy, new Object[] {});
            setM = current.getClass().getDeclaredMethod("setSaveFilename", new Class[] { File.class });
            setM.invoke(current, new Object[] { new File(value.toString()) });
        } catch (Exception ex) {
            throw new WekaException(ex);
        }
    } else if (legacy.getClass().toString().endsWith("GroovyComponent") && current.getClass().toString().endsWith("GroovyStep")) {
        transferSetting(legacy, current, "Script", String.class);
    } else if (legacy.getClass().getSuperclass().toString().endsWith("AbstractSparkJob") && current.getClass().getSuperclass().toString().endsWith("AbstractSparkJob")) {
        transferSetting(legacy, current, "JobOptions", String.class);
    } else if (legacy.getClass().getSuperclass().toString().endsWith("AbstractHadoopJob")) {
        transferSetting(legacy, current, "JobOptions", String.class);
    }
}
