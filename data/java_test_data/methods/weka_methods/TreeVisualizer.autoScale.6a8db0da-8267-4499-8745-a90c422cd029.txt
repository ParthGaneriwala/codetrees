private void autoScale() {
    // this function will determine the smallest scale value that keeps the text
    // from overlapping
    // it will leave the view centered
    int dist;
    // Node ln,rn; NOT USED
    Dimension temp = new Dimension(10, 10);
    if (m_numNodes <= 1) {
        return;
    }
    // calc height needed by first node
    dist = (m_nodes[0].m_height + 40) * m_numLevels;
    if (dist > temp.height) {
        temp.height = dist;
    }
    for (int noa = 0; noa < m_numNodes - 1; noa++) {
        calcScreenCoords(noa);
        calcScreenCoords(noa + 1);
        if (m_nodes[noa + 1].m_change) {
        // then on a new level so don't check width this time round
        } else {
            dist = m_nodes[noa + 1].m_center - m_nodes[noa].m_center;
            // the distance between the node centers, along horiz
            if (dist <= 0) {
                dist = 1;
            }
            dist = ((6 + m_nodes[noa].m_side + m_nodes[noa + 1].m_side) * m_viewSize.width) / // calc optimal size for width
            dist;
            if (dist > temp.width) {
                temp.width = dist;
            }
        }
        // now calc.. minimun hieght needed by nodes
        dist = (m_nodes[noa + 1].m_height + 40) * m_numLevels;
        if (dist > temp.height) {
            temp.height = dist;
        }
    }
    int y1, y2, xa, xb;
    y1 = m_nodes[m_edges[0].m_parent].m_top;
    y2 = m_nodes[m_edges[0].m_child].m_top;
    dist = y2 - y1;
    if (dist <= 0) {
        dist = 1;
    }
    dist = ((60 + m_edges[0].m_height + m_nodes[m_edges[0].m_parent].m_height) * m_viewSize.height) / dist;
    if (dist > temp.height) {
        temp.height = dist;
    }
    for (int noa = 0; noa < m_numNodes - 2; noa++) {
        // check the edges now
        if (m_nodes[m_edges[noa + 1].m_child].m_change) {
        // then edge is on a different level , so skip this one
        } else {
            // calc the width requirements of this pair of edges
            xa = m_nodes[m_edges[noa].m_child].m_center - m_nodes[m_edges[noa].m_parent].m_center;
            xa /= 2;
            xa += m_nodes[m_edges[noa].m_parent].m_center;
            xb = m_nodes[m_edges[noa + 1].m_child].m_center - m_nodes[m_edges[noa + 1].m_parent].m_center;
            xb /= 2;
            xb += m_nodes[m_edges[noa + 1].m_parent].m_center;
            dist = xb - xa;
            if (dist <= 0) {
                dist = 1;
            }
            dist = ((12 + m_edges[noa].m_side + m_edges[noa + 1].m_side) * m_viewSize.width) / dist;
            if (dist > temp.width) {
                temp.width = dist;
            }
        }
        // now calc height need by the edges
        y1 = m_nodes[m_edges[noa + 1].m_parent].m_top;
        y2 = m_nodes[m_edges[noa + 1].m_child].m_top;
        dist = y2 - y1;
        if (dist <= 0) {
            dist = 1;
        }
        dist = ((60 + m_edges[noa + 1].m_height + m_nodes[m_edges[noa + 1].m_parent].m_height) * m_viewSize.height) / dist;
        if (dist > temp.height) {
            temp.height = dist;
        }
    }
    Dimension e = getSize();
    Dimension np = new Dimension();
    np.width = (int) (e.width / 2 - (((double) e.width / 2) - m_viewPos.width) / (m_viewSize.width) * temp.width);
    np.height = (int) (e.height / 2 - (((double) e.height / 2) - m_viewPos.height) / (m_viewSize.height) * temp.height);
    for (int noa = 0; noa < m_numNodes; noa++) {
        // this resets the coords so that next time a refresh occurs they don't
        // accidentally get used
        // I will use 32000 to signify that they are invalid, even if this
        // coordinate occurs it doesn't
        // matter as it is only for the sake of the caching
        m_nodes[noa].m_top = 32000;
    }
    animateScaling(np, temp, 10);
}
