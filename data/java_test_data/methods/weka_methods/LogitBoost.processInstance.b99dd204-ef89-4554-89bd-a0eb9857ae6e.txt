protected double[] processInstance(Instance instance) throws Exception {
    double[] Fs = new double[m_NumClasses];
    double[] pred = new double[m_NumClasses];
    if (m_InitialFs != null) {
        for (int i = 0; i < m_NumClasses; i++) {
            Fs[i] = m_InitialFs[i];
        }
    }
    for (int i = 0; i < m_NumGenerated; i++) {
        double predSum = 0;
        for (int j = 0; j < m_NumClasses; j++) {
            double tempPred = m_Shrinkage * m_Classifiers.get(i)[j].classifyInstance(instance);
            if (Utils.isMissingValue(tempPred)) {
                throw new UnassignedClassException("LogitBoost: base learner predicted missing value.");
            }
            pred[j] = tempPred;
            if (m_NumClasses == 2) {
                // Can treat 2 classes as special case
                pred[1] = -tempPred;
                break;
            }
            predSum += pred[j];
        }
        predSum /= m_NumClasses;
        for (int j = 0; j < m_NumClasses; j++) {
            Fs[j] += (pred[j] - predSum) * (m_NumClasses - 1) / m_NumClasses;
        }
    }
    return probs(Fs);
}
