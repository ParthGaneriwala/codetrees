@Override
public Instances getStructure() throws IOException {
    if (getDirectory() == null) {
        throw new IOException("No directory/source has been specified");
    }
    // determine class labels, i.e., sub-dirs
    if (m_structure == null) {
        String directoryPath = getDirectory().getAbsolutePath();
        ArrayList<Attribute> atts = new ArrayList<Attribute>();
        ArrayList<String> classes = new ArrayList<String>();
        File dir = new File(directoryPath);
        String[] subdirs = dir.list();
        for (String subdir2 : subdirs) {
            File subdir = new File(directoryPath + File.separator + subdir2);
            if (subdir.isDirectory()) {
                classes.add(subdir2);
            }
        }
        atts.add(new Attribute("text", (ArrayList<String>) null));
        if (m_OutputFilename) {
            atts.add(new Attribute("filename", (ArrayList<String>) null));
        }
        // make sure that the name of the class attribute is unlikely to
        // clash with any attribute created via the StringToWordVector filter
        atts.add(new Attribute("@@class@@", classes));
        String relName = directoryPath.replaceAll("/", "_");
        relName = relName.replaceAll("\\\\", "_").replaceAll(":", "_");
        m_structure = new Instances(relName, atts, 0);
        m_structure.setClassIndex(m_structure.numAttributes() - 1);
    }
    return m_structure;
}
