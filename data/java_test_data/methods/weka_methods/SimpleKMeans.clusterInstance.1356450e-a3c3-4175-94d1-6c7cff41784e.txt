protected int clusterInstance(Instance inst, long[] instanceCanopies) {
    double minDist = Integer.MAX_VALUE;
    int bestCluster = 0;
    for (int i = 0; i < m_NumClusters; i++) {
        double dist;
        if (m_speedUpDistanceCompWithCanopies && instanceCanopies != null && instanceCanopies.length > 0) {
            try {
                if (!Canopy.nonEmptyCanopySetIntersection(m_centroidCanopyAssignments.get(i), instanceCanopies)) {
                    // + Canopy.printSingleAssignment(instanceCanopies));
                    continue;
                }
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
        dist = m_DistanceFunction.distance(inst, m_ClusterCentroids.instance(i), minDist);
        if (dist < minDist) {
            minDist = dist;
            bestCluster = i;
        }
    }
    return bestCluster;
}
