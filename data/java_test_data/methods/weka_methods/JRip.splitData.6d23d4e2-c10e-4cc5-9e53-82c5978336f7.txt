@Override
public Instances[] splitData(Instances insts, double defAcRt, double cl) {
    Instances data = insts;
    // Total number of instances without
    int total = data.numInstances();
    // missing value for att
    // Current split position
    int split = 1;
    // Previous split position
    int prev = 0;
    // Final split position
    int finalSplit = split;
    maxInfoGain = 0;
    value = 0;
    double fstCover = 0, sndCover = 0, fstAccu = 0, sndAccu = 0;
    data.sort(att);
    // Find the las instance without missing value
    for (int x = 0; x < data.numInstances(); x++) {
        Instance inst = data.instance(x);
        if (inst.isMissing(att)) {
            total = x;
            break;
        }
        sndCover += inst.weight();
        if (Utils.eq(inst.classValue(), cl)) {
            sndAccu += inst.weight();
        }
    }
    if (total == 0) {
        // Data all missing for the attribute
        return null;
    }
    splitPoint = data.instance(total - 1).value(att);
    for (; split <= total; split++) {
        if ((split == total) || (// Can't
        data.instance(split).value(att) > // within
        data.instance(prev).value(att))) {
            for (int y = prev; y < split; y++) {
                Instance inst = data.instance(y);
                fstCover += inst.weight();
                if (Utils.eq(data.instance(y).classValue(), cl)) {
                    // First bag positive# ++
                    fstAccu += inst.weight();
                }
            }
            double fstAccuRate = (fstAccu + 1.0) / (fstCover + 1.0), sndAccuRate = (sndAccu + 1.0) / (sndCover + 1.0);
            /* Which bag has higher information gain? */
            boolean isFirst;
            double fstInfoGain, sndInfoGain;
            double accRate, infoGain, coverage, accurate;
            fstInfoGain = // fstAccu/(double)numConds :
            fstAccu * (Utils.log2(fstAccuRate) - Utils.log2(defAcRt));
            sndInfoGain = // sndAccu/(double)numConds :
            sndAccu * (Utils.log2(sndAccuRate) - Utils.log2(defAcRt));
            if (fstInfoGain > sndInfoGain) {
                isFirst = true;
                infoGain = fstInfoGain;
                accRate = fstAccuRate;
                accurate = fstAccu;
                coverage = fstCover;
            } else {
                isFirst = false;
                infoGain = sndInfoGain;
                accRate = sndAccuRate;
                accurate = sndAccu;
                coverage = sndCover;
            }
            /* Check whether so far the max infoGain */
            if (infoGain > maxInfoGain) {
                splitPoint = data.instance(prev).value(att);
                value = (isFirst) ? 0 : 1;
                accuRate = accRate;
                accu = accurate;
                cover = coverage;
                maxInfoGain = infoGain;
                finalSplit = (isFirst) ? split : prev;
            }
            for (int y = prev; y < split; y++) {
                Instance inst = data.instance(y);
                sndCover -= inst.weight();
                if (Utils.eq(data.instance(y).classValue(), cl)) {
                    // Second bag positive# --
                    sndAccu -= inst.weight();
                }
            }
            prev = split;
        }
    }
    /* Split the data */
    Instances[] splitData = new Instances[2];
    splitData[0] = new Instances(data, 0, finalSplit);
    splitData[1] = new Instances(data, finalSplit, total - finalSplit);
    return splitData;
}
