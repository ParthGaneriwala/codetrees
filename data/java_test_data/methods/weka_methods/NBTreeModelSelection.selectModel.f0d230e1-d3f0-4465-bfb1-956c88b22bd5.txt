@Override
public final ClassifierSplitModel selectModel(Instances data) {
    double globalErrors = 0;
    double minResult;
    NBTreeSplit[] currentModel;
    NBTreeSplit bestModel = null;
    NBTreeNoSplit noSplitModel = null;
    int validModels = 0;
    Distribution checkDistribution;
    Attribute attribute;
    double sumOfWeights;
    int i;
    try {
        // build the global model at this node
        noSplitModel = new NBTreeNoSplit();
        noSplitModel.buildClassifier(data);
        if (data.numInstances() < 5) {
            return noSplitModel;
        }
        // evaluate it
        globalErrors = noSplitModel.getErrors();
        if (globalErrors == 0) {
            return noSplitModel;
        }
        // Check if all Instances belong to one class or if not
        // enough Instances to split.
        checkDistribution = new Distribution(data);
        if (Utils.sm(checkDistribution.total(), m_minNoObj) || Utils.eq(checkDistribution.total(), checkDistribution.perClass(checkDistribution.maxClass()))) {
            return noSplitModel;
        }
        // lot of values.
        if (m_allData != null) {
            Enumeration<Attribute> enu = data.enumerateAttributes();
            while (enu.hasMoreElements()) {
                attribute = enu.nextElement();
                if ((attribute.isNumeric()) || (Utils.sm(attribute.numValues(), (0.3 * m_allData.numInstances())))) {
                    break;
                }
            }
        }
        currentModel = new NBTreeSplit[data.numAttributes()];
        sumOfWeights = data.sumOfWeights();
        // For each attribute.
        for (i = 0; i < data.numAttributes(); i++) {
            // Apart from class attribute.
            if (i != (data).classIndex()) {
                // Get models for current attribute.
                currentModel[i] = new NBTreeSplit(i, m_minNoObj, sumOfWeights);
                currentModel[i].setGlobalModel(noSplitModel);
                currentModel[i].buildClassifier(data);
                // a lot of values.
                if (currentModel[i].checkModel()) {
                    validModels++;
                }
            } else {
                currentModel[i] = null;
            }
        }
        // Check if any useful split was found.
        if (validModels == 0) {
            return noSplitModel;
        }
        // Find "best" attribute to split on.
        minResult = globalErrors;
        for (i = 0; i < data.numAttributes(); i++) {
            if ((i != (data).classIndex()) && (currentModel[i].checkModel())) {
                /*
           * System.err.println("Errors for "+data.attribute(i).name()+" "+
           * currentModel[i].getErrors());
           */
                if (currentModel[i].getErrors() < minResult) {
                    bestModel = currentModel[i];
                    minResult = currentModel[i].getErrors();
                }
            }
        }
        if (((globalErrors - minResult) / globalErrors) < 0.05) {
            return noSplitModel;
        }
        return bestModel;
    } catch (Exception e) {
        e.printStackTrace();
    }
    return null;
}
