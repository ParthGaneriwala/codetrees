@SuppressWarnings("unchecked")
private final ArrayList<Object>[] moreComplexRules(ArrayList<Object>[] rules, int numItemsInSet, int numItemsInConsequence, double minConfidence, ArrayList<Hashtable<ItemSet, Integer>> hashtables) {
    AprioriItemSet newPremise;
    ArrayList<Object>[] result, moreResults;
    ArrayList<Object> newConsequences, newPremises = new ArrayList<Object>(), newConf = new ArrayList<Object>();
    Hashtable<ItemSet, Integer> hashtable;
    ArrayList<Object> newLift = null, newLev = null, newConv = null;
    // if (rules.length > 3) {
    newLift = new ArrayList<Object>();
    newLev = new ArrayList<Object>();
    newConv = new ArrayList<Object>();
    if (numItemsInSet > numItemsInConsequence + 1) {
        hashtable = hashtables.get(numItemsInSet - numItemsInConsequence - 2);
        newConsequences = mergeAllItemSets(rules[1], numItemsInConsequence - 1, m_totalTransactions);
        int newNumInConsequence = numItemsInConsequence + 1;
        Hashtable<ItemSet, Integer> hashtableForConsequence = hashtables.get(newNumInConsequence - 1);
        Enumeration<Object> enu = new WekaEnumeration<Object>(newConsequences);
        while (enu.hasMoreElements()) {
            AprioriItemSet current = (AprioriItemSet) enu.nextElement();
            for (int m_item : current.m_items) {
                if (m_item != -1) {
                }
            }
            current.m_counter = m_counter;
            newPremise = subtract(current);
            newPremise.m_counter = hashtable.get(newPremise).intValue();
            newPremises.add(newPremise);
            newConf.add(new Double(confidenceForRule(newPremise, current)));
            // if (rules.length > 3) {
            int consequenceUnconditionedCounter = hashtableForConsequence.get(current).intValue();
            current.m_secondaryCounter = consequenceUnconditionedCounter;
            double tempLift = liftForRule(newPremise, current, consequenceUnconditionedCounter);
            double tempLev = leverageForRule(newPremise, current, newPremise.m_counter, consequenceUnconditionedCounter);
            double tempConv = convictionForRule(newPremise, current, newPremise.m_counter, consequenceUnconditionedCounter);
            newLift.add(new Double(tempLift));
            newLev.add(new Double(tempLev));
            newConv.add(new Double(tempConv));
        // }
        }
        result = new ArrayList[rules.length];
        result[0] = newPremises;
        result[1] = newConsequences;
        result[2] = newConf;
        // if (rules.length > 3) {
        result[3] = newLift;
        result[4] = newLev;
        result[5] = newConv;
        // }
        pruneRules(result, minConfidence);
        moreResults = moreComplexRules(result, numItemsInSet, numItemsInConsequence + 1, minConfidence, hashtables);
        if (moreResults != null) {
            for (int i = 0; i < moreResults[0].size(); i++) {
                result[0].add(moreResults[0].get(i));
                result[1].add(moreResults[1].get(i));
                result[2].add(moreResults[2].get(i));
                // 
                result[3].add(moreResults[3].get(i));
                result[4].add(moreResults[4].get(i));
                result[5].add(moreResults[5].get(i));
            }
        }
        return result;
    } else {
        return null;
    }
}
