/**
 * Implements computation of the kth-smallest element according to Manber's
 * "Introduction to Algorithms".
 *
 * @param array the array of double
 * @param index the index into the array of doubles
 * @param left the first index of the subset
 * @param right the last index of the subset
 * @param k the value of k
 *
 * @return the index of the kth-smallest element
 */
private static int select(/* @non_null@ */
double[] array, /* @non_null@ */
int[] index, int left, int right, int k) {
    int diff = right - left;
    switch(diff) {
        case 0:
            // Nothing to be done
            return left;
        case 1:
            // Swap two elements if necessary
            conditionalSwap(array, index, left, right);
            return left + k - 1;
        case 2:
            // Just need to sort three elements
            conditionalSwap(array, index, left, left + 1);
            conditionalSwap(array, index, left, right);
            conditionalSwap(array, index, left + 1, right);
            return left + k - 1;
        default:
            // Establish pivot
            int pivotLocation = sortLeftRightAndCenter(array, index, left, right);
            // Move pivot to the right, partition, and restore pivot
            swap(index, pivotLocation, right - 1);
            int center = partition(array, index, left, right, array[index[right - 1]]);
            swap(index, center, right - 1);
            // Proceed recursively
            if ((center - left + 1) >= k) {
                return select(array, index, left, center, k);
            } else {
                return select(array, index, center + 1, right, k - (center - left + 1));
            }
    }
}
