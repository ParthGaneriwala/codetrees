@Override
public List<Dependency> getAllDependenciesForPackage(Package target, Map<String, List<Dependency>> conflicts) throws Exception {
    // start with the target package's list of dependencies
    List<Dependency> initialList = target.getDependencies();
    // load them into a map for quick lookup
    Map<String, Dependency> lookup = new HashMap<String, Dependency>();
    for (Dependency d : initialList) {
        lookup.put(d.getTarget().getPackage().getPackageMetaDataElement("PackageName").toString(), d);
        ArrayList<Dependency> deps = new ArrayList<Dependency>();
        deps.add(d);
        // Pre-load a conficts Map
        conflicts.put(d.getTarget().getPackage().getPackageMetaDataElement("PackageName").toString(), deps);
    }
    // now process each of these to build the full list
    for (Dependency d : initialList) {
        checkDependencies(d.getTarget(), lookup, conflicts);
    }
    List<Dependency> fullList = new ArrayList<Dependency>(lookup.values());
    // Prune packages from conflicts Map that only have one
    // item in their list (i.e. these ones have no conflicts)
    ArrayList<String> removeList = new ArrayList<String>();
    Iterator<String> keyIt = conflicts.keySet().iterator();
    while (keyIt.hasNext()) {
        String key = keyIt.next();
        List<Dependency> tempD = conflicts.get(key);
        if (tempD.size() == 1) {
            // remove this one
            removeList.add(key);
        }
    }
    for (String s : removeList) {
        conflicts.remove(s);
    }
    return fullList;
}
