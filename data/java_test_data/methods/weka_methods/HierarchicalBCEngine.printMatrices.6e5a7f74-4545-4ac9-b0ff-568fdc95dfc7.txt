protected void printMatrices(final int[][] levels) {
    int i = 0;
    for (i = 0; i < levels.length - 1; i++) {
        float[] rowBC = null;
        float[] colBC = null;
        try {
            rowBC = calcRowBC(i, levels);
            colBC = calcColBC(i, levels);
        } catch (NullPointerException ne) {
            System.out.println("i: " + i + " levels.length: " + levels.length);
            ne.printStackTrace();
            return;
        }
        System.out.print("\nM" + (i + 1) + "\t");
        for (int j = 0; j < levels[i + 1].length; j++) {
            System.out.print(m_nodes.get(levels[i + 1][j]).ID + " ");
        // ((Integer)levels[i+1].get(j)).intValue())+" ");
        }
        System.out.println("");
        for (int j = 0; j < levels[i].length; j++) {
            System.out.print(m_nodes.get(levels[i][j]).ID + "\t");
            // ((Integer)levels[i].get(j)).intValue())+"\t");
            for (int k = 0; k < levels[i + 1].length; k++) {
                System.out.print(graphMatrix[levels[i][j]][// ((Integer)levels[i].get(j)).intValue()]
                levels[i + 1][k]] + " ");
            // ((Integer)levels[i+1].get(k)).intValue()]+" ");
            }
            System.out.println(rowBC[j]);
        }
        System.out.print("\t");
        for (int k = 0; k < levels[i + 1].length; k++) {
            System.out.print(colBC[k] + " ");
        }
    }
    System.out.println("\nAt the end i: " + i + " levels.length: " + levels.length);
}
