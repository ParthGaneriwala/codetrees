public static VaryNode makeVaryNode(int iNode, ArrayList<Integer> nRecords, Instances instances) {
    VaryNode _VaryNode = new VaryNode(iNode);
    int nValues = instances.attribute(iNode).numValues();
    // reserve memory and initialize
    @SuppressWarnings("unchecked") ArrayList<Integer>[] nChildRecords = new ArrayList[nValues];
    for (int iChild = 0; iChild < nValues; iChild++) {
        nChildRecords[iChild] = new ArrayList<Integer>();
    }
    // divide the records among children
    for (int iRecord = 0; iRecord < nRecords.size(); iRecord++) {
        int iInstance = nRecords.get(iRecord).intValue();
        nChildRecords[(int) instances.instance(iInstance).value(iNode)].add(new Integer(iInstance));
    }
    // find most common value
    int nCount = nChildRecords[0].size();
    int nMCV = 0;
    for (int iChild = 1; iChild < nValues; iChild++) {
        if (nChildRecords[iChild].size() > nCount) {
            nCount = nChildRecords[iChild].size();
            nMCV = iChild;
        }
    }
    _VaryNode.m_nMCV = nMCV;
    // determine child nodes
    _VaryNode.m_ADNodes = new ADNode[nValues];
    for (int iChild = 0; iChild < nValues; iChild++) {
        if (iChild == nMCV || nChildRecords[iChild].size() == 0) {
            _VaryNode.m_ADNodes[iChild] = null;
        } else {
            _VaryNode.m_ADNodes[iChild] = makeADTree(iNode + 1, nChildRecords[iChild], instances);
        }
    }
    return _VaryNode;
}
