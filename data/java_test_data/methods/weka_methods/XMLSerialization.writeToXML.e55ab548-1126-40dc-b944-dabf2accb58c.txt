public Element writeToXML(Element parent, Object o, String name) throws Exception {
    String classname;
    Element node;
    Hashtable<String, PropertyDescriptor> memberlist;
    Enumeration<String> enm;
    Object member;
    String memberName;
    Method method;
    PropertyDescriptor desc;
    boolean primitive;
    int array;
    int i;
    Object obj;
    String tmpStr;
    node = null;
    // for debugging only
    if (DEBUG) {
        trace(new Throwable(), name);
    }
    // special handling of null-objects
    if (o == null) {
        node = addElement(parent, name, "" + null, false, 0, true);
        return node;
    }
    // used for overriding the classname
    obj = null;
    // get information about object
    array = 0;
    if (o.getClass().isArray()) {
        array = Utils.getArrayDimensions(o);
    }
    if (array > 0) {
        classname = Utils.getArrayClass(o.getClass()).getName();
        primitive = isPrimitiveArray(o.getClass());
    } else {
        // try to get property descriptor to determine real class
        // (for primitives the getClass() method returns the corresponding
        // Object-Class!)
        desc = null;
        if (parent != null) {
            desc = determineDescriptor(parent.getAttribute(ATT_CLASS), name);
        }
        if (desc != null) {
            primitive = desc.getPropertyType().isPrimitive();
        } else {
            primitive = o.getClass().isPrimitive();
        }
        // might only return an interface as class!
        if (primitive) {
            classname = desc.getPropertyType().getName();
        } else {
            obj = o;
            classname = o.getClass().getName();
        }
    }
    // reflection the elements of the array are objects and not primitives!
    if ((parent != null) && (!parent.getAttribute(ATT_ARRAY).equals("")) && (!parent.getAttribute(ATT_ARRAY).equals(VAL_NO)) && (stringToBoolean(parent.getAttribute(ATT_PRIMITIVE)))) {
        primitive = true;
        classname = parent.getAttribute(ATT_CLASS);
        obj = null;
    }
    // perhaps we need to override the classname
    if (obj != null) {
        // for non-arrays
        classname = overrideClassname(obj);
    } else {
        // for arrays
        classname = overrideClassname(classname);
    }
    // create node for current object
    node = addElement(parent, name, classname, primitive, array);
    // array? -> save as child with 'name="<index>"'
    if (array > 0) {
        for (i = 0; i < Array.getLength(o); i++) {
            invokeWriteToXML(node, Array.get(o, i), Integer.toString(i));
        }
    } else // non-array
    {
        // primitive? -> only toString()
        if (primitive) {
            node.appendChild(node.getOwnerDocument().createTextNode(o.toString()));
        } else // object
        {
            // process recursively members of this object
            memberlist = getDescriptors(o);
            // if no get/set methods -> we assume it has String-Constructor
            if (memberlist.size() == 0) {
                if (!o.toString().equals("")) {
                    tmpStr = o.toString();
                    // these five entities are recognized by every XML processor
                    // see http://www.xml.com/pub/a/2001/03/14/trxml10.html
                    tmpStr = tmpStr.replaceAll("&", "&amp;").replaceAll("\"", "&quot;").replaceAll("'", "&apos;").replaceAll("<", "&lt;").replaceAll(">", "&gt;");
                    // in addition, replace some other entities as well
                    tmpStr = tmpStr.replaceAll("\n", "&#10;").replaceAll("\r", "&#13;").replaceAll("\t", "&#9;");
                    if (o instanceof java.io.File) {
                        // hack to force separators to be always saved as /
                        tmpStr = tmpStr.replace('\\', '/');
                    }
                    node.appendChild(node.getOwnerDocument().createTextNode(tmpStr));
                }
            } else {
                enm = memberlist.keys();
                while (enm.hasMoreElements()) {
                    memberName = enm.nextElement().toString();
                    // in ignore list?
                    if ((m_Properties.isIgnored(memberName)) || (m_Properties.isIgnored(getPath(node) + "." + memberName)) || (m_Properties.isIgnored(o, getPath(node) + "." + memberName))) {
                        continue;
                    }
                    // is it allowed?
                    if (!m_Properties.isAllowed(o, memberName)) {
                        continue;
                    }
                    desc = memberlist.get(memberName);
                    method = desc.getReadMethod();
                    member = method.invoke(o, (Object[]) null);
                    invokeWriteToXML(node, member, memberName);
                }
            }
        }
    }
    return node;
}
