protected Instances makeOutputDataClassifier(Instances inputData, weka.classifiers.Classifier classifier, boolean distribution, String relationNameModifier) throws Exception {
    // get class attribute from InputMappedClassifier (if necessary)
    Attribute classAttribute = inputData.classAttribute();
    if (classifier instanceof weka.classifiers.misc.InputMappedClassifier) {
        classAttribute = ((InputMappedClassifier) classifier).getModelHeader(new Instances(inputData, 0)).classAttribute();
    }
    String classifierName = classifier.getClass().getName();
    classifierName = classifierName.substring(classifierName.lastIndexOf('.') + 1, classifierName.length());
    Instances newData = new Instances(inputData);
    if (distribution) {
        for (int i = 0; i < classAttribute.numValues(); i++) {
            Add addF = new Add();
            addF.setAttributeIndex("last");
            addF.setAttributeName(classifierName + "_prob_" + classAttribute.value(i));
            addF.setInputFormat(newData);
            newData = weka.filters.Filter.useFilter(newData, addF);
        }
    } else {
        Add addF = new Add();
        addF.setAttributeIndex("last");
        addF.setAttributeName("class_predicted_by: " + classifierName);
        if (classAttribute.isNominal()) {
            String classLabels = classAttribute.value(0);
            for (int i = 1; i < classAttribute.numValues(); i++) {
                classLabels += "," + classAttribute.value(i);
            }
            addF.setNominalLabels(classLabels);
        }
        addF.setInputFormat(inputData);
        newData = weka.filters.Filter.useFilter(inputData, addF);
    }
    newData.setRelationName(inputData.relationName() + relationNameModifier);
    return newData;
}
