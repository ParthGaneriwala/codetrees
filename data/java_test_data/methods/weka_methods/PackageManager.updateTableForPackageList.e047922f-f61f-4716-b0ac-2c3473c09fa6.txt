private void updateTableForPackageList(List<Package> packageList) {
    m_table.clearSelection();
    m_model.setRowCount(packageList.size());
    int row = 0;
    for (Package p : packageList) {
        m_model.setValueAt(p.getName(), row, getColumnIndex(PACKAGE_COLUMN));
        String installedV = "";
        if (p.isInstalled()) {
            try {
                Package installed = WekaPackageManager.getInstalledPackageInfo(p.getName());
                installedV = installed.getPackageMetaDataElement("Version").toString();
            } catch (Exception ex) {
                ex.printStackTrace();
                displayErrorDialog("An error has occurred while trying to obtain" + " installed package info", ex);
            }
        }
        String category = "";
        if (p.getPackageMetaDataElement("Category") != null) {
            category = p.getPackageMetaDataElement("Category").toString();
        }
        List<Object> catAndVers = m_packageLookupInfo.get(p.getName());
        Object repositoryV = "-----";
        if (catAndVers != null) {
            // handle non-repository packages
            @SuppressWarnings("unchecked") List<Object> repVersions = (List<Object>) catAndVers.get(1);
            // repositoryV = repVersions.get(0);
            try {
                Package latestRepoV = WekaPackageManager.getLatestCompatibleVersion(p.getName());
                if (latestRepoV != null) {
                    repositoryV = latestRepoV.getPackageMetaDataElement(WekaPackageManager.VERSION_KEY);
                }
            } catch (Exception e) {
                e.printStackTrace();
                displayErrorDialog("An error has occurred while trying to obtain" + " installed package info", e);
            }
        // p.getPackageMetaDataElement(WekaPackageManager.VERSION_KEY);
        }
        // String repString = getRepVersions(p.getName(), repositoryV);
        // repositoryV = repositoryV + " " + repString;
        m_model.setValueAt(category, row, getColumnIndex(CATEGORY_COLUMN));
        m_model.setValueAt(installedV, row, getColumnIndex(INSTALLED_COLUMN));
        m_model.setValueAt(repositoryV, row, getColumnIndex(REPOSITORY_COLUMN));
        if (catAndVers != null) {
            String loadStatus = (String) catAndVers.get(2);
            m_model.setValueAt(loadStatus, row, getColumnIndex(LOADED_COLUMN));
        } else {
            // handle non-repository packages
            File packageRoot = new File(WekaPackageManager.getPackageHome().toString() + File.separator + p.getName());
            // boolean loaded = WekaPackageManager.loadCheck(p, packageRoot);
            boolean loaded = WekaPackageManager.hasBeenLoaded(p);
            String loadStatus = loaded ? "Yes" : "No - check log";
            m_model.setValueAt(loadStatus, row, getColumnIndex(LOADED_COLUMN));
        }
        row++;
    }
}
