public double[] variances() {
    double[] vars = new double[numAttributes()];
    for (int i = 0; i < numAttributes(); i++) vars[i] = Double.NaN;
    double[] means = new double[numAttributes()];
    double[] sumWeights = new double[numAttributes()];
    for (int i = 0; i < numInstances(); i++) {
        double weight = instance(i).weight();
        for (int attIndex = 0; attIndex < numAttributes(); attIndex++) {
            if (attribute(attIndex).isNumeric()) {
                if (!instance(i).isMissing(attIndex)) {
                    double value = instance(i).value(attIndex);
                    if (Double.isNaN(vars[attIndex])) {
                        // For the first value the mean can suffer from loss of precision
                        // so we treat it separately and make sure the calculation stays accurate
                        means[attIndex] = value;
                        sumWeights[attIndex] = weight;
                        vars[attIndex] = 0;
                        continue;
                    }
                    double delta = weight * (value - means[attIndex]);
                    sumWeights[attIndex] += weight;
                    means[attIndex] += delta / sumWeights[attIndex];
                    vars[attIndex] += delta * (value - means[attIndex]);
                }
            }
        }
    }
    for (int attIndex = 0; attIndex < numAttributes(); attIndex++) {
        if (attribute(attIndex).isNumeric()) {
            if (sumWeights[attIndex] <= 1) {
                vars[attIndex] = Double.NaN;
            } else {
                vars[attIndex] /= sumWeights[attIndex] - 1;
                if (vars[attIndex] < 0)
                    vars[attIndex] = 0;
            }
        }
    }
    return vars;
}
