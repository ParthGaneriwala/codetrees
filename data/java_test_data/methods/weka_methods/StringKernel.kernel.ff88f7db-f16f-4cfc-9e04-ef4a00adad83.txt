protected double kernel(int n, char[] s, int endIndexS, char[] t, int endIndexT) {
    // normal recursion ending case
    if (Math.min(endIndexS + 1, endIndexT + 1) < n) {
        return getReturnValue(n);
    }
    // accumulate all recursion results in one:
    double result = 0;
    // skim s from back to front
    for (int iS = endIndexS; iS > n - 2; iS--) {
        double buf = 0;
        // let the current character in s be x
        char x = s[iS];
        // iterate over all occurrences of x in t
        for (int j = 0; j <= endIndexT; j++) {
            if (t[j] == x) {
                // this is a match for the current character, hence
                // 1. use previous chars in both strings (iS-1, j-1)
                // 2. decrement the remainingMatchLength (n-1)
                // and start a recursion branch for these parameters
                buf += kernelHelper(n - 1, s, iS - 1, t, j - 1);
            }
        }
        // ok, all occurrences of x in t have been found
        // multiply the result with lambda^2
        // (one lambda for x, and the other for all matches of x in t)
        result += buf * m_powersOflambda[2];
    }
    return result;
}
