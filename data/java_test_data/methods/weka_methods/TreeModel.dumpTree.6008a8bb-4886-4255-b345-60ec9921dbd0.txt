protected void dumpTree(int level, StringBuffer text) {
    if (m_childNodes.size() > 0) {
        for (int i = 0; i < m_childNodes.size(); i++) {
            text.append("\n");
            /*
           * for (int j = 0; j < level; j++) { text.append("|   "); }
           */
            // output the predicate for this child node
            TreeNode child = m_childNodes.get(i);
            text.append(child.getPredicate().toString(level, false));
            // process recursively
            child.dumpTree(level + 1, text);
        }
    } else {
        // leaf
        text.append(": ");
        if (!Utils.isMissingValue(m_scoreNumeric)) {
            text.append(m_scoreNumeric);
        } else {
            text.append(m_scoreString + " ");
            if (m_scoreDistributions.size() > 0) {
                text.append("[");
                for (ScoreDistribution s : m_scoreDistributions) {
                    text.append(s);
                }
                text.append("]");
            } else {
                text.append(m_scoreString);
            }
        }
    }
}
