protected double distribution(double[][] props, double[][][] dists, int att, int[] sortedIndices, double[] weights, double[][] subsetWeights, Instances data) throws Exception {
    double splitPoint = Double.NaN;
    Attribute attribute = data.attribute(att);
    double[][] dist = null;
    int i;
    if (attribute.isNominal()) {
        // For nominal attributes
        dist = new double[attribute.numValues()][data.numClasses()];
        for (i = 0; i < sortedIndices.length; i++) {
            Instance inst = data.instance(sortedIndices[i]);
            if (inst.isMissing(att)) {
                break;
            }
            dist[(int) inst.value(att)][(int) inst.classValue()] += weights[i];
        }
    } else {
        // For numeric attributes
        double[][] currDist = new double[2][data.numClasses()];
        dist = new double[2][data.numClasses()];
        // Move all instances into second subset
        for (int j = 0; j < sortedIndices.length; j++) {
            Instance inst = data.instance(sortedIndices[j]);
            if (inst.isMissing(att)) {
                break;
            }
            currDist[1][(int) inst.classValue()] += weights[j];
        }
        double priorVal = priorVal(currDist);
        System.arraycopy(currDist[1], 0, dist[1], 0, dist[1].length);
        // Try all possible split points
        double currSplit = data.instance(sortedIndices[0]).value(att);
        double currVal, bestVal = -Double.MAX_VALUE;
        for (i = 0; i < sortedIndices.length; i++) {
            Instance inst = data.instance(sortedIndices[i]);
            if (inst.isMissing(att)) {
                break;
            }
            if (inst.value(att) > currSplit) {
                currVal = gain(currDist, priorVal);
                if (currVal > bestVal) {
                    bestVal = currVal;
                    splitPoint = (inst.value(att) + currSplit) / 2.0;
                    // Check for numeric precision problems
                    if (splitPoint <= currSplit) {
                        splitPoint = inst.value(att);
                    }
                    for (int j = 0; j < currDist.length; j++) {
                        System.arraycopy(currDist[j], 0, dist[j], 0, dist[j].length);
                    }
                }
            }
            currSplit = inst.value(att);
            currDist[0][(int) inst.classValue()] += weights[i];
            currDist[1][(int) inst.classValue()] -= weights[i];
        }
    }
    // Compute weights
    props[att] = new double[dist.length];
    for (int k = 0; k < props[att].length; k++) {
        props[att][k] = Utils.sum(dist[k]);
    }
    if (!(Utils.sum(props[att]) > 0)) {
        for (int k = 0; k < props[att].length; k++) {
            props[att][k] = 1.0 / props[att].length;
        }
    } else {
        Utils.normalize(props[att]);
    }
    // Distribute counts
    while (i < sortedIndices.length) {
        Instance inst = data.instance(sortedIndices[i]);
        for (int j = 0; j < dist.length; j++) {
            dist[j][(int) inst.classValue()] += props[att][j] * weights[i];
        }
        i++;
    }
    // Compute subset weights
    subsetWeights[att] = new double[dist.length];
    for (int j = 0; j < dist.length; j++) {
        subsetWeights[att][j] += Utils.sum(dist[j]);
    }
    // Return distribution and split point
    dists[att] = dist;
    return splitPoint;
}
