public void sort() {
    Comparator<FrequentBinaryItemSet> compF = new Comparator<FrequentBinaryItemSet>() {

        @Override
        public int compare(FrequentBinaryItemSet one, FrequentBinaryItemSet two) {
            Collection<BinaryItem> compOne = one.getItems();
            Collection<BinaryItem> compTwo = two.getItems();
            // ones
            if (compOne.size() < compTwo.size()) {
                return -1;
            } else if (compOne.size() > compTwo.size()) {
                return 1;
            } else {
                // compare items
                Iterator<BinaryItem> twoIterator = compTwo.iterator();
                for (BinaryItem oneI : compOne) {
                    BinaryItem twoI = twoIterator.next();
                    int result = oneI.compareTo(twoI);
                    if (result != 0) {
                        return result;
                    }
                }
                // equal
                return 0;
            }
        // return 0;
        /*
           * } else if (one.getSupport() > two.getSupport()) { // reverse
           * ordering (i.e. descending by support) return -1; }
           */
        // return 1;
        }
    };
    sort(compF);
}
