@Override
public Node evaluate(Node... nodes) throws SemanticException {
    if (nodes.length < 2)
        throw new SemanticException("The " + JAVA_MACRO + " macro takes at least 2 arguments!");
    if (!(nodes[0] instanceof StringConstant && nodes[1] instanceof StringConstant))
        throw new SemanticException(JAVA_MACRO + "'s first and second argument must be String constants!");
    Node[] parameterNodes = Arrays.copyOfRange(nodes, 2, nodes.length);
    String className = ((StringConstant) nodes[0]).evaluate();
    String signature = ((StringConstant) nodes[1]).evaluate();
    // get types
    List<Class<?>> parameterTypes = new ArrayList<Class<?>>();
    String name = parseSignature(signature, parameterTypes);
    Class<?> returnType = parameterTypes.remove(0);
    // get method
    Method m;
    try {
        m = Class.forName(className).getMethod(name, parameterTypes.toArray(new Class<?>[0]));
    } catch (Exception e) {
        throw new SemanticException("Failed to load method '" + className + "." + name + "' in " + JAVA_MACRO + " macro!", e);
    }
    // check parameters
    if (parameterTypes.size() != parameterNodes.length)
        throw new SemanticException("Wrong amount of parameters given in " + JAVA_MACRO + " macro!");
    for (int i = 0; i < parameterTypes.size() && i < parameterNodes.length; i++) {
        if (parameterTypes.get(i).equals(Boolean.TYPE) && parameterNodes[i] instanceof BooleanExpression)
            continue;
        if (parameterTypes.get(i).equals(Double.TYPE) && parameterNodes[i] instanceof DoubleExpression)
            continue;
        if (parameterTypes.get(i).equals(String.class) && parameterNodes[i] instanceof StringExpression)
            continue;
        throw new SemanticException("Type error in " + JAVA_MACRO + " macro!");
    }
    if (returnType.equals(Boolean.TYPE))
        return new BooleanJavaMethod(m, parameterNodes);
    if (returnType.equals(Double.TYPE))
        return new DoubleJavaMethod(m, parameterNodes);
    if (returnType.equals(String.class))
        return new StringJavaMethod(m, parameterNodes);
    assert false;
    throw new SemanticException("Internal error in " + JAVA_MACRO + " macro!");
}
