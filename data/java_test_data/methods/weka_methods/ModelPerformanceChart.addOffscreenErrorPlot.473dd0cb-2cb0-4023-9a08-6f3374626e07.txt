protected BufferedImage addOffscreenErrorPlot(PlotData2D plotData) throws WekaException {
    Instances predictedI = plotData.getPlotInstances();
    if (predictedI.classAttribute().isNominal()) {
        // split the classes out into individual series.
        // add a new attribute to hold point sizes - correctly
        // classified instances get default point size (2);
        // misclassified instances get point size (5).
        // WekaOffscreenChartRenderer can take advantage of this
        // information - other plugin renderers may or may not
        // be able to use it
        ArrayList<Attribute> atts = new ArrayList<Attribute>();
        for (int i = 0; i < predictedI.numAttributes(); i++) {
            atts.add((Attribute) predictedI.attribute(i).copy());
        }
        atts.add(new Attribute("@@size@@"));
        Instances newInsts = new Instances(predictedI.relationName(), atts, predictedI.numInstances());
        newInsts.setClassIndex(predictedI.classIndex());
        for (int i = 0; i < predictedI.numInstances(); i++) {
            double[] vals = new double[newInsts.numAttributes()];
            for (int j = 0; j < predictedI.numAttributes(); j++) {
                vals[j] = predictedI.instance(i).value(j);
            }
            // default shape size
            vals[vals.length - 1] = 2;
            Instance ni = new DenseInstance(1.0, vals);
            newInsts.add(ni);
        }
        // predicted class attribute is always actualClassIndex - 1
        Instances[] classes = new Instances[newInsts.numClasses()];
        for (int i = 0; i < newInsts.numClasses(); i++) {
            classes[i] = new Instances(newInsts, 0);
            classes[i].setRelationName(newInsts.classAttribute().value(i));
        }
        Instances errors = new Instances(newInsts, 0);
        int actualClass = newInsts.classIndex();
        for (int i = 0; i < newInsts.numInstances(); i++) {
            Instance current = newInsts.instance(i);
            classes[(int) current.classValue()].add((Instance) current.copy());
            if (current.value(actualClass) != current.value(actualClass - 1)) {
                Instance toAdd = (Instance) current.copy();
                // larger shape for an error
                toAdd.setValue(toAdd.numAttributes() - 1, 5);
                // swap predicted and actual class value so
                // that the color plotted for the error series
                // is that of the predicted class
                double actualClassV = toAdd.value(actualClass);
                double predictedClassV = toAdd.value(actualClass - 1);
                toAdd.setValue(actualClass, predictedClassV);
                toAdd.setValue(actualClass - 1, actualClassV);
                errors.add(toAdd);
            }
        }
        errors.setRelationName("Errors");
        m_offscreenPlotData.add(errors);
        for (Instances classe : classes) {
            m_offscreenPlotData.add(classe);
        }
    } else {
        // numeric class - have to make a new set of instances
        // with the point sizes added as an additional attribute
        ArrayList<Attribute> atts = new ArrayList<Attribute>();
        for (int i = 0; i < predictedI.numAttributes(); i++) {
            atts.add((Attribute) predictedI.attribute(i).copy());
        }
        atts.add(new Attribute("@@size@@"));
        Instances newInsts = new Instances(predictedI.relationName(), atts, predictedI.numInstances());
        int[] shapeSizes = plotData.getShapeSize();
        for (int i = 0; i < predictedI.numInstances(); i++) {
            double[] vals = new double[newInsts.numAttributes()];
            for (int j = 0; j < predictedI.numAttributes(); j++) {
                vals[j] = predictedI.instance(i).value(j);
            }
            vals[vals.length - 1] = shapeSizes[i];
            Instance ni = new DenseInstance(1.0, vals);
            newInsts.add(ni);
        }
        newInsts.setRelationName(predictedI.classAttribute().name());
        m_offscreenPlotData.add(newInsts);
    }
    List<String> options = new ArrayList<String>();
    String additional = "-color=" + predictedI.classAttribute().name() + ",-hasErrors";
    if (m_additionalOptions != null && m_additionalOptions.length() > 0) {
        additional += "," + m_additionalOptions;
        additional = environmentSubstitute(additional);
    }
    String[] optionsParts = additional.split(",");
    for (String p : optionsParts) {
        options.add(p.trim());
    }
    // if (predictedI.classAttribute().isNumeric()) {
    options.add("-shapeSize=@@size@@");
    // }
    String xAxis = m_xAxis;
    xAxis = environmentSubstitute(xAxis);
    String yAxis = m_yAxis;
    yAxis = environmentSubstitute(yAxis);
    String width = m_width;
    String height = m_height;
    int defWidth = 500;
    int defHeight = 400;
    width = environmentSubstitute(width);
    height = environmentSubstitute(height);
    defWidth = Integer.parseInt(width);
    defHeight = Integer.parseInt(height);
    try {
        return m_offscreenRenderer.renderXYScatterPlot(defWidth, defHeight, m_offscreenPlotData, xAxis, yAxis, options);
    } catch (Exception e1) {
        throw new WekaException(e1);
    }
}
