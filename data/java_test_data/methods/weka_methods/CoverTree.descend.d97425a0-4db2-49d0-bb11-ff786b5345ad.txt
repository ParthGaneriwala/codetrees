protected int descend(final CoverTreeNode query, MyHeap upper_k, // amk14comment: make sure this gets
int current_scale, // amk14comment: make sure this gets
int max_scale, // amk14comment: contains children in
Stack<Stack<d_node>> cover_sets, // amk14comment: zeroset contains the children at
Stack<d_node> zero_set) throws // the lowest level i.e. -infinity
Exception {
    d_node parent;
    Stack<d_node> cover_set_currentscale = getCoverSet(current_scale, cover_sets);
    for (int i = 0; i < cover_set_currentscale.length; i++) {
        parent = cover_set_currentscale.element(i);
        CoverTreeNode par = parent.n;
        double upper_dist = upper_k.peek().distance + query.max_dist + // *upper_bound + query->max_dist + query->max_dist;
        query.max_dist;
        if (parent.dist <= upper_dist + par.max_dist) {
            CoverTreeNode chi;
            if (par == m_Root && par.num_children == 0) {
                // only one root(which is
                // also leaf) node
                chi = par;
            } else {
                chi = par.children.element(0);
            }
            if (parent.dist <= upper_dist + chi.max_dist) {
                // the parent itself)
                if (chi.num_children > 0) {
                    if (max_scale < chi.scale) {
                        max_scale = chi.scale;
                    }
                    d_node temp = new d_node(parent.dist, chi);
                    getCoverSet(chi.scale, cover_sets).push(temp);
                    if (m_TreeStats != null) {
                        m_TreeStats.incrIntNodeCount();
                    }
                } else if (parent.dist <= upper_dist) {
                    d_node temp = new d_node(parent.dist, chi);
                    zero_set.push(temp);
                    if (m_TreeStats != null) {
                        m_TreeStats.incrLeafCount();
                    }
                }
            }
            for (int c = 1; c < par.num_children; c++) {
                chi = par.children.element(c);
                double upper_chi = upper_k.peek().distance + chi.max_dist + query.max_dist + // *upper_bound + chi.max_dist
                query.max_dist;
                // query.max_dist;
                if (shell(parent.dist, chi.parent_dist, upper_chi)) {
                    // amk14comment:parent_query_dist
                    // -
                    // child_parent_dist
                    // <= upper_chi
                    // - if child
                    // can be
                    // inside the
                    // shrunk query
                    // ball
                    // NOT the same as above parent->dist <= upper_dist + chi->max_dist
                    double d = Math.sqrt(m_DistanceFunction.distance(query.p(), chi.p(), upper_chi * upper_chi, m_TreeStats));
                    if (m_TreeStats != null) {
                        m_TreeStats.incrPointCount();
                    }
                    if (d <= upper_chi) {
                        // if child is inside the shrunk query ball
                        if (d < upper_k.peek().distance) {
                            update(upper_k, d);
                        }
                        if (chi.num_children > 0) {
                            if (max_scale < chi.scale) {
                                max_scale = chi.scale;
                            }
                            d_node temp = new d_node(d, chi);
                            getCoverSet(chi.scale, cover_sets).push(temp);
                            if (m_TreeStats != null) {
                                m_TreeStats.incrIntNodeCount();
                            }
                        } else if (d <= upper_chi - chi.max_dist) {
                            d_node temp = new d_node(d, chi);
                            zero_set.push(temp);
                            if (m_TreeStats != null) {
                                m_TreeStats.incrLeafCount();
                            }
                        }
                    }
                // end if(d<=upper_chi)
                }
            // end if(shell(parent.dist,...
            }
        // end for(child_1 to n)
        }
    // end if(parent.dist<=upper_dist..
    }
    // end for(covers_sets[current_scale][i])
    return max_scale;
}
