@Override
public Enumeration<Option> listOptions() {
    Vector<Option> result = new Vector<Option>();
    result.addElement(new Option("\tNumber of clusters.\n" + "\t(default 2).", "N", 1, "-N <num>"));
    result.addElement(new Option("\tMaximum number of candidate canopies to retain in memory\n\t" + "at any one time. T2 distance plus, data characteristics,\n\t" + "will determine how many candidate canopies are formed before\n\t" + "periodic and final pruning are performed, which might result\n\t" + "in exceess memory consumption. This setting avoids large numbers\n\t" + "of candidate canopies consuming memory. (default = 100)", "-max-candidates", 1, "-max-candidates <num>"));
    result.addElement(new Option("\tHow often to prune low density canopies. \n\t" + "(default = every 10,000 training instances)", "periodic-pruning", 1, "-periodic-pruning <num>"));
    result.addElement(new Option("\tMinimum canopy density, below which a canopy will be pruned\n\t" + "during periodic pruning. (default = 2 instances)", "min-density", 1, "-min-density"));
    result.addElement(new Option("\tThe T2 distance to use. Values < 0 indicate that\n\t" + "a heuristic based on attribute std. deviation should be used to set this.\n\t" + "Note that this heuristic can only be used when batch training\n\t" + "(default = -1.0)", "t2", 1, "-t2"));
    result.addElement(new Option("\tThe T1 distance to use. A value < 0 is taken as a\n\t" + "positive multiplier for T2. (default = -1.5)", "t1", 1, "-t1"));
    result.addElement(new Option("\tDon't replace missing values with mean/mode when " + "running in batch mode.\n", "M", 0, "-M"));
    result.addAll(Collections.list(super.listOptions()));
    return result.elements();
}
