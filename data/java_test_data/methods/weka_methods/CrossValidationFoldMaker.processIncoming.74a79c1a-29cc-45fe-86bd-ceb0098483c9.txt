@Override
public void processIncoming(Data data) throws WekaException {
    getStepManager().processing();
    String incomingConnName = data.getConnectionName();
    Instances dataSet = (Instances) data.getPayloadElement(incomingConnName);
    if (dataSet == null) {
        throw new WekaException("Incoming instances should not be null!");
    }
    dataSet = new Instances(dataSet);
    getStepManager().logBasic("Creating cross-validation folds");
    getStepManager().statusMessage("Creating cross-validation folds");
    Random random = new Random(m_seed);
    if (!getPreserveOrder()) {
        dataSet.randomize(random);
    }
    if (dataSet.classIndex() >= 0 && dataSet.attribute(dataSet.classIndex()).isNominal() && !getPreserveOrder()) {
        getStepManager().logBasic("Stratifying data");
        dataSet.stratify(m_numFolds);
    }
    for (int i = 0; i < m_numFolds; i++) {
        if (isStopRequested()) {
            break;
        }
        Instances train = (!m_preserveOrder) ? dataSet.trainCV(m_numFolds, i, random) : dataSet.trainCV(m_numFolds, i);
        Instances test = dataSet.testCV(m_numFolds, i);
        Data trainData = new Data(StepManager.CON_TRAININGSET);
        trainData.setPayloadElement(StepManager.CON_TRAININGSET, train);
        trainData.setPayloadElement(StepManager.CON_AUX_DATA_SET_NUM, i + 1);
        trainData.setPayloadElement(StepManager.CON_AUX_DATA_MAX_SET_NUM, m_numFolds);
        Data testData = new Data(StepManager.CON_TESTSET);
        testData.setPayloadElement(StepManager.CON_TESTSET, test);
        testData.setPayloadElement(StepManager.CON_AUX_DATA_SET_NUM, i + 1);
        testData.setPayloadElement(StepManager.CON_AUX_DATA_MAX_SET_NUM, m_numFolds);
        if (!isStopRequested()) {
            getStepManager().outputData(trainData, testData);
        }
    }
    getStepManager().finished();
}
