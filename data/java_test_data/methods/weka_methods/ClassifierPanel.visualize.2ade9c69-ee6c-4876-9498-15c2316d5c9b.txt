@SuppressWarnings("unchecked")
protected void visualize(List<String> names, int x, int y) {
    final List<String> selectedNames = names;
    JPopupMenu resultListMenu = new JPopupMenu();
    JMenuItem visMainBuffer = new JMenuItem("View in main window");
    if (selectedNames != null && selectedNames.size() == 1) {
        visMainBuffer.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                m_History.setSingle(selectedNames.get(0));
            }
        });
    } else {
        visMainBuffer.setEnabled(false);
    }
    resultListMenu.add(visMainBuffer);
    JMenuItem visSepBuffer = new JMenuItem("View in separate window");
    if (selectedNames != null && selectedNames.size() == 1) {
        visSepBuffer.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                m_History.openFrame(selectedNames.get(0));
            }
        });
    } else {
        visSepBuffer.setEnabled(false);
    }
    resultListMenu.add(visSepBuffer);
    JMenuItem saveOutput = new JMenuItem("Save result buffer");
    if (selectedNames != null && selectedNames.size() == 1) {
        saveOutput.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                saveBuffer(selectedNames.get(0));
            }
        });
    } else {
        saveOutput.setEnabled(false);
    }
    resultListMenu.add(saveOutput);
    JMenuItem deleteOutput = new JMenuItem("Delete result buffer(s)");
    if (selectedNames != null) {
        deleteOutput.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                m_History.removeResults(selectedNames);
            }
        });
    } else {
        deleteOutput.setEnabled(false);
    }
    resultListMenu.add(deleteOutput);
    resultListMenu.addSeparator();
    JMenuItem loadModel = new JMenuItem("Load model");
    loadModel.addActionListener(new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent e) {
            loadClassifier();
        }
    });
    resultListMenu.add(loadModel);
    ArrayList<Object> o = null;
    if (selectedNames != null && selectedNames.size() == 1) {
        o = (ArrayList<Object>) m_History.getNamedObject(selectedNames.get(0));
    }
    VisualizePanel temp_vp = null;
    String temp_grph = null;
    ArrayList<Prediction> temp_preds = null;
    Attribute temp_classAtt = null;
    Classifier temp_classifier = null;
    Instances temp_trainHeader = null;
    if (o != null) {
        for (int i = 0; i < o.size(); i++) {
            Object temp = o.get(i);
            if (temp instanceof Classifier) {
                temp_classifier = (Classifier) temp;
            } else if (temp instanceof Instances) {
                // training header
                temp_trainHeader = (Instances) temp;
            } else if (temp instanceof VisualizePanel) {
                // normal errors
                temp_vp = (VisualizePanel) temp;
            } else if (temp instanceof String) {
                // graphable output
                temp_grph = (String) temp;
            } else if (temp instanceof ArrayList<?>) {
                // predictions
                temp_preds = (ArrayList<Prediction>) temp;
            } else if (temp instanceof Attribute) {
                // class attribute
                temp_classAtt = (Attribute) temp;
            }
        }
    }
    final VisualizePanel vp = temp_vp;
    final String grph = temp_grph;
    final ArrayList<Prediction> preds = temp_preds;
    final Attribute classAtt = temp_classAtt;
    final Classifier classifier = temp_classifier;
    final Instances trainHeader = temp_trainHeader;
    JMenuItem saveModel = new JMenuItem("Save model");
    if (classifier != null && selectedNames != null && selectedNames.size() == 1) {
        saveModel.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                saveClassifier(selectedNames.get(0), classifier, trainHeader);
            }
        });
    } else {
        saveModel.setEnabled(false);
    }
    resultListMenu.add(saveModel);
    JMenuItem reEvaluate = new JMenuItem("Re-evaluate model on current test set");
    if (classifier != null && m_TestLoader != null && selectedNames != null && selectedNames.size() == 1) {
        reEvaluate.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                reevaluateModel(selectedNames.get(0), classifier, trainHeader);
            }
        });
    } else {
        reEvaluate.setEnabled(false);
    }
    resultListMenu.add(reEvaluate);
    if (classifier instanceof IterativeClassifier && ((IterativeClassifier) classifier).getResume()) {
        if (selectedNames != null && selectedNames.size() == 1) {
            JMenuItem continueIterating = new JMenuItem("Continue iterating using the training data");
            continueIterating.addActionListener(new ActionListener() {

                @Override
                public void actionPerformed(ActionEvent e) {
                    continueIterating(selectedNames.get(0), classifier);
                }
            });
            resultListMenu.add(continueIterating);
            JMenuItem finalizeIterative = new JMenuItem("Clean up model");
            finalizeIterative.setToolTipText("Reduces storage size of model. " + "However, models cannot be trained further, even if resume " + "is set to true.");
            finalizeIterative.addActionListener(new ActionListener() {

                @Override
                public void actionPerformed(ActionEvent e) {
                    try {
                        ((IterativeClassifier) classifier).setResume(false);
                        ((IterativeClassifier) classifier).done();
                    } catch (Exception e1) {
                        e1.printStackTrace();
                    }
                }
            });
            resultListMenu.add(finalizeIterative);
        }
    }
    JMenuItem reApplyConfig = new JMenuItem("Re-apply this model's configuration");
    if (classifier != null && selectedNames != null && selectedNames.size() == 1) {
        reApplyConfig.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                m_ClassifierEditor.setValue(classifier);
            }
        });
    } else {
        reApplyConfig.setEnabled(false);
    }
    resultListMenu.add(reApplyConfig);
    resultListMenu.addSeparator();
    JMenuItem visErrors = new JMenuItem("Visualize classifier errors");
    if (vp != null) {
        if ((vp.getXIndex() == 0) && (vp.getYIndex() == 1)) {
            try {
                // class
                vp.setXIndex(vp.getInstances().classIndex());
                // predicted class
                vp.setYIndex(vp.getInstances().classIndex() - 1);
            } catch (Exception e) {
            // ignored
            }
        }
        visErrors.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                visualizeClassifierErrors(vp);
            }
        });
    } else {
        visErrors.setEnabled(false);
    }
    resultListMenu.add(visErrors);
    JMenuItem visGrph = new JMenuItem("Visualize tree");
    if (grph != null) {
        if (((Drawable) temp_classifier).graphType() == Drawable.TREE) {
            visGrph.addActionListener(new ActionListener() {

                @Override
                public void actionPerformed(ActionEvent e) {
                    String title;
                    if (vp != null) {
                        title = vp.getName();
                    } else {
                        title = selectedNames.get(0);
                    }
                    visualizeTree(grph, title);
                }
            });
        } else if (((Drawable) temp_classifier).graphType() == Drawable.BayesNet) {
            visGrph.setText("Visualize graph");
            visGrph.addActionListener(new ActionListener() {

                @Override
                public void actionPerformed(ActionEvent e) {
                    Thread th = new Thread() {

                        @Override
                        public void run() {
                            visualizeBayesNet(grph, selectedNames.get(0));
                        }
                    };
                    th.start();
                }
            });
        } else {
            visGrph.setEnabled(false);
        }
    } else {
        visGrph.setEnabled(false);
    }
    resultListMenu.add(visGrph);
    JMenuItem visMargin = new JMenuItem("Visualize margin curve");
    if ((preds != null) && (classAtt != null) && (classAtt.isNominal())) {
        visMargin.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    MarginCurve tc = new MarginCurve();
                    Instances result = tc.getCurve(preds);
                    VisualizePanel vmc = new VisualizePanel();
                    if (getMainApplication() != null) {
                        Settings settings = getMainApplication().getApplicationSettings();
                        m_CurrentVis.applySettings(settings, weka.gui.explorer.VisualizePanel.ScatterDefaults.ID);
                    }
                    vmc.setName(result.relationName());
                    vmc.setLog(m_Log);
                    PlotData2D tempd = new PlotData2D(result);
                    tempd.setPlotName(result.relationName());
                    tempd.addInstanceNumberAttribute();
                    vmc.addPlot(tempd);
                    visualizeClassifierErrors(vmc);
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }
        });
    } else {
        visMargin.setEnabled(false);
    }
    resultListMenu.add(visMargin);
    JMenu visThreshold = new JMenu("Visualize threshold curve");
    if ((preds != null) && (classAtt != null) && (classAtt.isNominal())) {
        for (int i = 0; i < classAtt.numValues(); i++) {
            JMenuItem clv = new JMenuItem(classAtt.value(i));
            final int classValue = i;
            clv.addActionListener(new ActionListener() {

                @Override
                public void actionPerformed(ActionEvent e) {
                    try {
                        ThresholdCurve tc = new ThresholdCurve();
                        Instances result = tc.getCurve(preds, classValue);
                        // VisualizePanel vmc = new VisualizePanel();
                        ThresholdVisualizePanel vmc = new ThresholdVisualizePanel();
                        vmc.setROCString("(Area under ROC = " + Utils.doubleToString(ThresholdCurve.getROCArea(result), 4) + ")");
                        vmc.setLog(m_Log);
                        vmc.setName(result.relationName() + ". (Class value " + classAtt.value(classValue) + ")");
                        PlotData2D tempd = new PlotData2D(result);
                        tempd.setPlotName(result.relationName());
                        tempd.addInstanceNumberAttribute();
                        // specify which points are connected
                        boolean[] cp = new boolean[result.numInstances()];
                        for (int n = 1; n < cp.length; n++) {
                            cp[n] = true;
                        }
                        tempd.setConnectPoints(cp);
                        // add plot
                        vmc.addPlot(tempd);
                        visualizeClassifierErrors(vmc);
                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }
                }
            });
            visThreshold.add(clv);
        }
    } else {
        visThreshold.setEnabled(false);
    }
    resultListMenu.add(visThreshold);
    JMenu visCostBenefit = new JMenu("Cost/Benefit analysis");
    if ((preds != null) && (classAtt != null) && (classAtt.isNominal())) {
        for (int i = 0; i < classAtt.numValues(); i++) {
            JMenuItem clv = new JMenuItem(classAtt.value(i));
            final int classValue = i;
            clv.addActionListener(new ActionListener() {

                @Override
                public void actionPerformed(ActionEvent e) {
                    try {
                        ThresholdCurve tc = new ThresholdCurve();
                        Instances result = tc.getCurve(preds, classValue);
                        // Create a dummy class attribute with the chosen
                        // class value as index 0 (if necessary).
                        Attribute classAttToUse = classAtt;
                        if (classValue != 0) {
                            ArrayList<String> newNames = new ArrayList<String>();
                            newNames.add(classAtt.value(classValue));
                            for (int k = 0; k < classAtt.numValues(); k++) {
                                if (k != classValue) {
                                    newNames.add(classAtt.value(k));
                                }
                            }
                            classAttToUse = new Attribute(classAtt.name(), newNames);
                        }
                        CostBenefitAnalysis cbAnalysis = new CostBenefitAnalysis();
                        PlotData2D tempd = new PlotData2D(result);
                        tempd.setPlotName(result.relationName());
                        tempd.m_alwaysDisplayPointsOfThisSize = 10;
                        // specify which points are connected
                        boolean[] cp = new boolean[result.numInstances()];
                        for (int n = 1; n < cp.length; n++) {
                            cp[n] = true;
                        }
                        tempd.setConnectPoints(cp);
                        String windowTitle = "";
                        if (classifier != null) {
                            String cname = classifier.getClass().getName();
                            if (cname.startsWith("weka.classifiers.")) {
                                windowTitle = "" + cname.substring("weka.classifiers.".length()) + " ";
                            }
                        }
                        windowTitle += " (class = " + classAttToUse.value(0) + ")";
                        // add plot
                        cbAnalysis.setCurveData(tempd, classAttToUse);
                        visualizeCostBenefitAnalysis(cbAnalysis, windowTitle);
                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }
                }
            });
            visCostBenefit.add(clv);
        }
    } else {
        visCostBenefit.setEnabled(false);
    }
    resultListMenu.add(visCostBenefit);
    JMenu visCost = new JMenu("Visualize cost curve");
    if ((preds != null) && (classAtt != null) && (classAtt.isNominal())) {
        for (int i = 0; i < classAtt.numValues(); i++) {
            JMenuItem clv = new JMenuItem(classAtt.value(i));
            final int classValue = i;
            clv.addActionListener(new ActionListener() {

                @Override
                public void actionPerformed(ActionEvent e) {
                    try {
                        CostCurve cc = new CostCurve();
                        Instances result = cc.getCurve(preds, classValue);
                        VisualizePanel vmc = new VisualizePanel();
                        if (getMainApplication() != null) {
                            Settings settings = getMainApplication().getApplicationSettings();
                            m_CurrentVis.applySettings(settings, weka.gui.explorer.VisualizePanel.ScatterDefaults.ID);
                        }
                        vmc.setLog(m_Log);
                        vmc.setName(result.relationName() + ". (Class value " + classAtt.value(classValue) + ")");
                        PlotData2D tempd = new PlotData2D(result);
                        tempd.m_displayAllPoints = true;
                        tempd.setPlotName(result.relationName());
                        boolean[] connectPoints = new boolean[result.numInstances()];
                        for (int jj = 1; jj < connectPoints.length; jj += 2) {
                            connectPoints[jj] = true;
                        }
                        tempd.setConnectPoints(connectPoints);
                        // tempd.addInstanceNumberAttribute();
                        vmc.addPlot(tempd);
                        visualizeClassifierErrors(vmc);
                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }
                }
            });
            visCost.add(clv);
        }
    } else {
        visCost.setEnabled(false);
    }
    resultListMenu.add(visCost);
    // visualization plugins
    JMenu visPlugins = new JMenu("Plugins");
    boolean availablePlugins = false;
    // predictions
    List<String> pluginsVector = PluginManager.getPluginNamesOfTypeList(VisualizePlugin.class.getName());
    for (int i = 0; i < pluginsVector.size(); i++) {
        String className = (pluginsVector.get(i));
        try {
            VisualizePlugin plugin = (VisualizePlugin) WekaPackageClassLoaderManager.objectForName(className);
            // (VisualizePlugin) Class.forName(className).newInstance();
            if (plugin == null) {
                continue;
            }
            availablePlugins = true;
            JMenuItem pluginMenuItem = plugin.getVisualizeMenuItem(preds, classAtt);
            new Version();
            if (pluginMenuItem != null) {
                /*
           * if (version.compareTo(plugin.getMinVersion()) < 0)
           * pluginMenuItem.setText(pluginMenuItem.getText() +
           * " (weka outdated)"); if (version.compareTo(plugin.getMaxVersion())
           * >= 0) pluginMenuItem.setText(pluginMenuItem.getText() +
           * " (plugin outdated)");
           */
                visPlugins.add(pluginMenuItem);
            }
        } catch (Exception e) {
        // e.printStackTrace();
        }
    }
    // errros
    pluginsVector = PluginManager.getPluginNamesOfTypeList(ErrorVisualizePlugin.class.getName());
    for (int i = 0; i < pluginsVector.size(); i++) {
        String className = (pluginsVector.get(i));
        try {
            ErrorVisualizePlugin plugin = (ErrorVisualizePlugin) WekaPackageClassLoaderManager.objectForName(className);
            // (ErrorVisualizePlugin) Class.forName(className).newInstance();
            if (plugin == null) {
                continue;
            }
            availablePlugins = true;
            JMenuItem pluginMenuItem = plugin.getVisualizeMenuItem(vp.getInstances());
            new Version();
            if (pluginMenuItem != null) {
                /*
           * if (version.compareTo(plugin.getMinVersion()) < 0)
           * pluginMenuItem.setText(pluginMenuItem.getText() +
           * " (weka outdated)"); if (version.compareTo(plugin.getMaxVersion())
           * >= 0) pluginMenuItem.setText(pluginMenuItem.getText() +
           * " (plugin outdated)");
           */
                visPlugins.add(pluginMenuItem);
            }
        } catch (Exception e) {
        // e.printStackTrace();
        }
    }
    // graphs+trees
    if (grph != null) {
        // trees
        if (((Drawable) temp_classifier).graphType() == Drawable.TREE) {
            pluginsVector = PluginManager.getPluginNamesOfTypeList(TreeVisualizePlugin.class.getName());
            for (int i = 0; i < pluginsVector.size(); i++) {
                String className = (pluginsVector.get(i));
                try {
                    TreeVisualizePlugin plugin = (TreeVisualizePlugin) WekaPackageClassLoaderManager.objectForName(className);
                    // (TreeVisualizePlugin) Class.forName(className).newInstance();
                    if (plugin == null) {
                        continue;
                    }
                    availablePlugins = true;
                    JMenuItem pluginMenuItem = plugin.getVisualizeMenuItem(grph, selectedNames.get(0));
                    new Version();
                    if (pluginMenuItem != null) {
                        /*
               * if (version.compareTo(plugin.getMinVersion()) < 0)
               * pluginMenuItem.setText(pluginMenuItem.getText() +
               * " (weka outdated)"); if
               * (version.compareTo(plugin.getMaxVersion()) >= 0)
               * pluginMenuItem.setText(pluginMenuItem.getText() +
               * " (plugin outdated)");
               */
                        visPlugins.add(pluginMenuItem);
                    }
                } catch (Exception e) {
                // e.printStackTrace();
                }
            }
        } else // graphs
        {
            pluginsVector = PluginManager.getPluginNamesOfTypeList(GraphVisualizePlugin.class.getName());
            for (int i = 0; i < pluginsVector.size(); i++) {
                String className = (pluginsVector.get(i));
                try {
                    GraphVisualizePlugin plugin = (GraphVisualizePlugin) WekaPackageClassLoaderManager.objectForName(className);
                    // (GraphVisualizePlugin) Class.forName(className).newInstance();
                    if (plugin == null) {
                        continue;
                    }
                    availablePlugins = true;
                    JMenuItem pluginMenuItem = plugin.getVisualizeMenuItem(grph, selectedNames.get(0));
                    new Version();
                    if (pluginMenuItem != null) {
                        /*
               * if (version.compareTo(plugin.getMinVersion()) < 0)
               * pluginMenuItem.setText(pluginMenuItem.getText() +
               * " (weka outdated)"); if
               * (version.compareTo(plugin.getMaxVersion()) >= 0)
               * pluginMenuItem.setText(pluginMenuItem.getText() +
               * " (plugin outdated)");
               */
                        visPlugins.add(pluginMenuItem);
                    }
                } catch (Exception e) {
                // e.printStackTrace();
                }
            }
        }
    }
    if (availablePlugins) {
        resultListMenu.add(visPlugins);
    }
    resultListMenu.show(m_History.getList(), x, y);
}
