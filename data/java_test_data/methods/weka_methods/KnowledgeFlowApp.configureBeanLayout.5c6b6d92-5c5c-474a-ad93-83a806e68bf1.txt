private void configureBeanLayout(final BeanLayout layout) {
    layout.setLayout(null);
    // handle mouse events
    layout.addMouseListener(new MouseAdapter() {

        @Override
        public void mousePressed(MouseEvent me) {
            layout.requestFocusInWindow();
            double z = m_layoutZoom / 100.0;
            double px = me.getX();
            double py = me.getY();
            py /= z;
            px /= z;
            if (m_toolBarBean == null) {
                if (((me.getModifiers() & InputEvent.BUTTON1_MASK) == InputEvent.BUTTON1_MASK) && m_mode == NONE) {
                    /*
             * BeanInstance bi = BeanInstance.findInstance(me.getPoint(),
             * m_mainKFPerspective.getCurrentTabIndex());
             */
                    BeanInstance bi = BeanInstance.findInstance(new Point((int) px, (int) py), m_mainKFPerspective.getCurrentTabIndex());
                    JComponent bc = null;
                    if (bi != null) {
                        bc = (JComponent) (bi.getBean());
                    }
                    if (bc != null) /* && (bc instanceof Visible) */
                    {
                        m_editElement = bi;
                        /*
               * m_oldX = me.getX(); m_oldY = me.getY();
               */
                        m_oldX = (int) px;
                        m_oldY = (int) py;
                        m_mode = MOVING;
                    }
                    if (m_mode != MOVING) {
                        m_mode = SELECTING;
                        /*
               * m_oldX = me.getX(); m_oldY = me.getY();
               */
                        m_oldX = (int) px;
                        m_oldY = (int) py;
                        m_startX = m_oldX;
                        m_startY = m_oldY;
                        Graphics2D gx = (Graphics2D) layout.getGraphics();
                        gx.setXORMode(java.awt.Color.white);
                        // gx.drawRect(m_oldX, m_oldY, m_oldX, m_oldY);
                        // gx.drawLine(m_startX, m_startY, m_startX, m_startY);
                        gx.dispose();
                        m_mode = SELECTING;
                    }
                }
            }
        }

        @Override
        public void mouseReleased(MouseEvent me) {
            layout.requestFocusInWindow();
            if (m_editElement != null && m_mode == MOVING) {
                if (m_snapToGridB.isSelected()) {
                    int x = snapToGrid(m_editElement.getX());
                    int y = snapToGrid(m_editElement.getY());
                    m_editElement.setXY(x, y);
                    snapSelectedToGrid();
                }
                m_editElement = null;
                revalidate();
                layout.repaint();
                m_mode = NONE;
            }
            if (m_mode == SELECTING) {
                revalidate();
                layout.repaint();
                m_mode = NONE;
                double z = m_layoutZoom / 100.0;
                double px = me.getX();
                double py = me.getY();
                py /= z;
                px /= z;
                // highlightSubFlow(m_startX, m_startY, me.getX(), me.getY());
                highlightSubFlow(m_startX, m_startY, (int) px, (int) py);
            }
        }

        @Override
        public void mouseClicked(MouseEvent me) {
            layout.requestFocusInWindow();
            Point p = me.getPoint();
            Point np = new Point();
            double z = m_layoutZoom / 100.0;
            np.setLocation(p.getX() / z, p.getY() / z);
            BeanInstance bi = BeanInstance.findInstance(np, m_mainKFPerspective.getCurrentTabIndex());
            if (m_mode == ADDING || m_mode == NONE) {
                // been clicked over a bean.
                if (bi != null) {
                    JComponent bc = (JComponent) bi.getBean();
                    // as long as we're not a meta bean
                    if (me.getClickCount() == 2 && !(bc instanceof MetaBean)) {
                        try {
                            Class<?> custClass = Introspector.getBeanInfo(bc.getClass()).getBeanDescriptor().getCustomizerClass();
                            if (custClass != null) {
                                if (bc instanceof BeanCommon) {
                                    if (!((BeanCommon) bc).isBusy() && !m_mainKFPerspective.getExecuting()) {
                                        popupCustomizer(custClass, bc);
                                    }
                                } else {
                                    popupCustomizer(custClass, bc);
                                }
                            }
                        } catch (IntrospectionException ex) {
                            ex.printStackTrace();
                        }
                    } else if (((me.getModifiers() & InputEvent.BUTTON1_MASK) != InputEvent.BUTTON1_MASK) || me.isAltDown()) {
                        // doPopup(me.getPoint(), bi, me.getX(), me.getY());
                        doPopup(me.getPoint(), bi, (int) (p.getX() / z), (int) (p.getY() / z));
                        return;
                    } else {
                        // just select this bean
                        Vector<Object> v = m_mainKFPerspective.getSelectedBeans();
                        if (me.isShiftDown()) {
                        } else {
                            v = new Vector<Object>();
                        }
                        v.add(bi);
                        m_mainKFPerspective.setSelectedBeans(v);
                        return;
                    }
                } else {
                    if (((me.getModifiers() & InputEvent.BUTTON1_MASK) != InputEvent.BUTTON1_MASK) || me.isAltDown()) {
                        double px = me.getX();
                        double py = me.getY();
                        py /= z;
                        px /= z;
                        // find connections if any close to this point
                        if (!m_mainKFPerspective.getExecuting()) {
                            // rightClickCanvasPopup(me.getX(), me.getY());
                            rightClickCanvasPopup((int) px, (int) py);
                            revalidate();
                            repaint();
                            notifyIsDirty();
                        }
                        return;
                    /*
               * int delta = 10; deleteConnectionPopup(BeanConnection.
               * getClosestConnections(new Point(me.getX(), me.getY()), delta,
               * m_mainKFPerspective.getCurrentTabIndex()), me.getX(),
               * me.getY());
               */
                    } else if (m_toolBarBean != null) {
                        // otherwise, if a toolbar button is active then
                        // add the component
                        // snap to grid
                        double x = me.getX();
                        double y = me.getY();
                        x /= z;
                        y /= z;
                        if (m_snapToGridB.isSelected()) {
                            // x = snapToGrid(me.getX());
                            x = snapToGrid((int) x);
                            // y = snapToGrid(me.getY());
                            y = snapToGrid((int) y);
                        }
                        addUndoPoint();
                        if (m_toolBarBean instanceof StringBuffer) {
                            // serialized user meta bean
                            pasteFromClipboard((int) x, (int) y, (StringBuffer) m_toolBarBean, false);
                            m_mode = NONE;
                            KnowledgeFlowApp.this.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                            m_toolBarBean = null;
                        } else {
                            // saveLayout(m_mainKFPerspective.getCurrentTabIndex(), false);
                            addComponent((int) x, (int) y);
                        }
                        m_componentTree.clearSelection();
                        m_mainKFPerspective.setEditedStatus(true);
                    }
                }
                revalidate();
                repaint();
                notifyIsDirty();
            }
            double px = me.getX();
            double py = me.getY();
            px /= z;
            py /= z;
            if (m_mode == PASTING && m_pasteBuffer.length() > 0) {
                // pasteFromClipboard(me.getX(), me.getY(), m_pasteBuffer, true);
                pasteFromClipboard((int) px, (int) py, m_pasteBuffer, true);
                m_mode = NONE;
                KnowledgeFlowApp.this.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                return;
            }
            if (m_mode == CONNECTING) {
                // turn off connecting points and remove connecting line
                layout.repaint();
                Vector<Object> beanInstances = BeanInstance.getBeanInstances(m_mainKFPerspective.getCurrentTabIndex());
                for (int i = 0; i < beanInstances.size(); i++) {
                    JComponent bean = (JComponent) ((BeanInstance) beanInstances.elementAt(i)).getBean();
                    if (bean instanceof Visible) {
                        ((Visible) bean).getVisual().setDisplayConnectors(false);
                    }
                }
                if (bi != null) {
                    boolean doConnection = false;
                    if (!(bi.getBean() instanceof BeanCommon)) {
                        doConnection = true;
                    } else {
                        // connection
                        if (((BeanCommon) bi.getBean()).connectionAllowed(m_sourceEventSetDescriptor)) {
                            doConnection = true;
                        }
                    }
                    if (doConnection) {
                        addUndoPoint();
                        // attempt to connect source and target beans
                        if (bi.getBean() instanceof MetaBean) {
                            BeanConnection.doMetaConnection(m_editElement, bi, m_sourceEventSetDescriptor, layout, m_mainKFPerspective.getCurrentTabIndex());
                        } else {
                            new BeanConnection(m_editElement, bi, m_sourceEventSetDescriptor, m_mainKFPerspective.getCurrentTabIndex());
                        }
                        m_mainKFPerspective.setEditedStatus(true);
                    }
                    layout.repaint();
                }
                m_mode = NONE;
                m_editElement = null;
                m_sourceEventSetDescriptor = null;
            }
            if (m_mainKFPerspective.getSelectedBeans().size() > 0) {
                m_mainKFPerspective.setSelectedBeans(new Vector<Object>());
            }
        }
    });
    layout.addMouseMotionListener(new MouseMotionAdapter() {

        @Override
        public void mouseDragged(MouseEvent me) {
            double z = m_layoutZoom / 100.0;
            double px = me.getX();
            double py = me.getY();
            px /= z;
            py /= z;
            if (m_editElement != null && m_mode == MOVING) {
                /*
           * int deltaX = me.getX() - m_oldX; int deltaY = me.getY() - m_oldY;
           */
                int deltaX = (int) px - m_oldX;
                int deltaY = (int) py - m_oldY;
                m_editElement.setXY(m_editElement.getX() + deltaX, m_editElement.getY() + deltaY);
                if (m_mainKFPerspective.getSelectedBeans().size() > 0) {
                    Vector<Object> v = m_mainKFPerspective.getSelectedBeans();
                    for (int i = 0; i < v.size(); i++) {
                        BeanInstance b = (BeanInstance) v.get(i);
                        if (b != m_editElement) {
                            b.setXY(b.getX() + deltaX, b.getY() + deltaY);
                        }
                    }
                }
                layout.repaint();
                // note the new points
                /*
           * m_oldX = me.getX(); m_oldY = me.getY();
           */
                m_oldX = (int) px;
                m_oldY = (int) py;
                m_mainKFPerspective.setEditedStatus(true);
            }
            if (m_mode == SELECTING) {
                layout.repaint();
                /*
           * m_oldX = me.getX(); m_oldY = me.getY();
           */
                m_oldX = (int) px;
                m_oldY = (int) py;
            }
        }

        @Override
        public void mouseMoved(MouseEvent e) {
            double z = m_layoutZoom / 100.0;
            double px = e.getX();
            double py = e.getY();
            px /= z;
            py /= z;
            if (m_mode == CONNECTING) {
                layout.repaint();
                // note the new coordinates
                /*
           * m_oldX = e.getX(); m_oldY = e.getY();
           */
                m_oldX = (int) px;
                m_oldY = (int) py;
            }
        }
    });
}
