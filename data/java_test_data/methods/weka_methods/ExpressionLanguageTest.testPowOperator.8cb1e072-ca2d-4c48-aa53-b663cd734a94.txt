public void testPowOperator() throws Exception {
    double[] values = { 0.0, 1.0, 2.0, 3.0, 100.0, 1000.0, 1e8, 1e-8, 0.1, -0.0, -1.0, -2.0, -3.0, -100.0, -1000.0, -1e8, -1e-8, -0.1 };
    for (double left : values) {
        // neutral element:
        assertTrue(left == evaluateDouble(String.format("%.20f ^ 1.0", left)));
        assertTrue(1.0 == evaluateDouble(String.format("1.0 ^ %.20f", left)));
        for (double right : values) {
            // basics
            if (!Double.isNaN(Math.pow(left, right)))
                assertTrue(Math.pow(left, right) == evaluateDouble(String.format("(%.20f) ^ (%.20f)", left, right)));
        }
    }
    double[] safe_values = { 0.0, 1.0, 2.0, -0.0, -1.0, -2.0 };
    for (double first : safe_values) {
        for (double second : safe_values) {
            for (double third : safe_values) {
                // right associativity
                if (!Double.isNaN(Math.pow(first, Math.pow(second, third))))
                    assertTrue(evaluateDouble(String.format("(%.20f) ^ (%.20f) ^ (%.20f)", first, second, third)) == evaluateDouble(String.format("(%.20f) ^ ((%.20f) ^ (%.20f))", first, second, third)));
            }
        }
    }
    // basic double semantics
    // NaN ^ v == NaN
    assertTrue(Double.isNaN(evaluateDouble("sqrt(-1) ^ 1.0")));
    // v ^ NaN == NaN
    assertTrue(Double.isNaN(evaluateDouble("1.0 ^ sqrt(-1)")));
    // NaN ^ NaN == NaN
    assertTrue(Double.isNaN(evaluateDouble("sqrt(-1) ^ sqrt(-1.0)")));
    // overflow -> ^inf
    assertTrue(Double.isInfinite(evaluateDouble(String.format("%.20f ^ 2", Double.MAX_VALUE))));
    // inf ^ (-inf) == NaN
    assertTrue(Double.isNaN(evaluateDouble("1/0 ^ -1/0")));
    // inf ^ inf == inf
    assertTrue(Double.isInfinite(evaluateDouble("1/0 + 1/0")));
}
