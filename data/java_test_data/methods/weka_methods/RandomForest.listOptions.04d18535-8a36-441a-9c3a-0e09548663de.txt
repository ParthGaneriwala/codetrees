@Override
public Enumeration<Option> listOptions() {
    Vector<Option> newVector = new Vector<Option>();
    newVector.addElement(new Option("\tSize of each bag, as a percentage of the\n" + "\ttraining set size. (default 100)", "P", 1, "-P"));
    newVector.addElement(new Option("\tCalculate the out of bag error.", "O", 0, "-O"));
    newVector.addElement(new Option("\tWhether to store out of bag predictions in internal evaluation object.", "store-out-of-bag-predictions", 0, "-store-out-of-bag-predictions"));
    newVector.addElement(new Option("\tWhether to output complexity-based statistics when out-of-bag evaluation is performed.", "output-out-of-bag-complexity-statistics", 0, "-output-out-of-bag-complexity-statistics"));
    newVector.addElement(new Option("\tPrint the individual classifiers in the output", "print", 0, "-print"));
    newVector.addElement(new Option("\tCompute and output attribute importance (mean impurity decrease " + "method)", "attribute-importance", 0, "-attribute-importance"));
    newVector.addElement(new Option("\tNumber of iterations.\n" + "\t(current value " + getNumIterations() + ")", "I", 1, "-I <num>"));
    newVector.addElement(new Option("\tNumber of execution slots.\n" + "\t(default 1 - i.e. no parallelism)\n" + "\t(use 0 to auto-detect number of cores)", "num-slots", 1, "-num-slots <num>"));
    // Add base classifier options
    List<Option> list = Collections.list(((OptionHandler) getClassifier()).listOptions());
    newVector.addAll(list);
    return newVector.elements();
}
