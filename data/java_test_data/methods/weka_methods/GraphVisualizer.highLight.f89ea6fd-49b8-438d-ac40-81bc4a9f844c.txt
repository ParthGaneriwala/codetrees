public void highLight(GraphNode n) {
    Graphics2D g = (Graphics2D) this.getGraphics();
    RenderingHints rh = new RenderingHints(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
    rh.put(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_SPEED);
    g.setRenderingHints(rh);
    g.setPaintMode();
    g.scale(scale, scale);
    int x = 0, y = 0;
    Dimension d = this.getPreferredSize();
    // if the display area is larger than the graph
    if (d.width < this.getWidth()) {
        x = (int) ((x + this.getWidth() / 2 - d.width / 2) / scale);
    }
    if (d.height < this.getHeight()) {
        y = (int) ((y + this.getHeight() / 2 - d.height / 2) / scale);
    }
    // if the node is of type NORMAL only then highlight
    if (n.nodeType == NORMAL) {
        // g.setColor(Color.green);
        g.setXORMode(Color.green);
        g.fillOval(x + n.x + paddedNodeWidth - nodeWidth - (paddedNodeWidth - nodeWidth) / 2, y + n.y, nodeWidth, nodeHeight);
        g.setXORMode(Color.red);
        // if any can fit in node's current width
        if (fm.stringWidth(n.lbl) <= nodeWidth) {
            g.drawString(n.lbl, x + n.x + paddedNodeWidth / 2 - fm.stringWidth(n.lbl) / 2, y + n.y + nodeHeight / 2 + fm.getHeight() / 2 - 2);
        } else if (fm.stringWidth(n.ID) <= nodeWidth) {
            g.drawString(n.ID, x + n.x + paddedNodeWidth / 2 - fm.stringWidth(n.ID) / 2, y + n.y + nodeHeight / 2 + fm.getHeight() / 2 - 2);
        } else if (fm.stringWidth(Integer.toString(m_nodes.indexOf(n))) <= nodeWidth) {
            g.drawString(Integer.toString(m_nodes.indexOf(n)), x + n.x + paddedNodeWidth / 2 - fm.stringWidth(Integer.toString(m_nodes.indexOf(n))) / 2, y + n.y + nodeHeight / 2 + fm.getHeight() / 2 - 2);
        }
        g.setXORMode(Color.green);
        GraphNode n2;
        int x1, y1, x2, y2;
        // System.out.println("Drawing edges of "+n.lbl);
        if (n.edges != null) {
            // Drawing all the edges from and upward ones coming to the node
            for (int[] edge2 : n.edges) {
                if (edge2[1] == DIRECTED || edge2[1] == DOUBLE) {
                    // m_nodes.get(k);
                    n2 = m_nodes.get(edge2[0]);
                    // System.out.println("  -->to "+n2.lbl);
                    x1 = n.x + paddedNodeWidth / 2;
                    y1 = n.y + nodeHeight;
                    x2 = n2.x + paddedNodeWidth / 2;
                    y2 = n2.y;
                    g.drawLine(x + x1, y + y1, x + x2, y + y2);
                    if (edge2[1] == DIRECTED) {
                        if (n2.nodeType == GraphConstants.NORMAL) {
                            drawArrow(g, x + x1, y + y1, x + x2, y + y2);
                        }
                    } else if (edge2[1] == DOUBLE) {
                        if (n.nodeType == NORMAL) {
                            drawArrow(g, x + x2, y + y2, x + x1, y + y1);
                        }
                        if (n2.nodeType == NORMAL) {
                            drawArrow(g, x + x1, y + y1, x + x2, y + y2);
                        }
                    }
                    if (n2.nodeType == NORMAL) {
                        g.fillOval(x + n2.x + paddedNodeWidth - nodeWidth - (paddedNodeWidth - nodeWidth) / 2, y + n2.y, nodeWidth, nodeHeight);
                    }
                    // If n2 is not of NORMAL type
                    // then carry on drawing all the edges and add all the
                    // dummy nodes encountered in a Vector until no
                    // more dummy nodes are found and all the child nodes(node n2)
                    // are of type normal
                    java.util.Vector<GraphNode> t = new java.util.Vector<GraphNode>();
                    while (n2.nodeType != NORMAL || t.size() > 0) {
                        // System.out.println("in while processing "+n2.ID);
                        if (t.size() > 0) {
                            n2 = t.get(0);
                            t.removeElementAt(0);
                        }
                        if (n2.nodeType != NORMAL) {
                            g.drawLine(x + n2.x + paddedNodeWidth / 2, y + n2.y, x + n2.x + paddedNodeWidth / 2, y + n2.y + nodeHeight);
                            x1 = n2.x + paddedNodeWidth / 2;
                            y1 = n2.y + nodeHeight;
                            // System.out.println("Drawing from "+n2.lbl);
                            for (int[] edge : n2.edges) {
                                // graphMatrix[tmpIndex][m]);
                                if (edge[1] > 0) {
                                    // m_nodes.get(m);
                                    GraphNode n3 = m_nodes.get(edge[0]);
                                    g.drawLine(x + x1, y + y1, x + n3.x + paddedNodeWidth / 2, y + n3.y);
                                    if (n3.nodeType == NORMAL) {
                                        // !n2.dummy)
                                        g.fillOval(x + n3.x + paddedNodeWidth - nodeWidth - (paddedNodeWidth - nodeWidth) / 2, y + n3.y, nodeWidth, nodeHeight);
                                        drawArrow(g, x + x1, y + y1, x + n3.x + paddedNodeWidth / 2, y + n3.y);
                                    }
                                    // if(n3.nodeType!=n3.NORMAL)
                                    t.addElement(n3);
                                // break;
                                }
                            }
                        }
                    }
                } else if (edge2[1] == -REVERSED || edge2[1] == -DOUBLE) {
                    // Drawing all the reversed and double edges which are going
                    // upwards in the drawing.
                    // m_nodes.get(k);
                    n2 = m_nodes.get(edge2[0]);
                    // System.out.println("  -->to "+n2.lbl);
                    x1 = n.x + paddedNodeWidth / 2;
                    y1 = n.y;
                    x2 = n2.x + paddedNodeWidth / 2;
                    y2 = n2.y + nodeHeight;
                    g.drawLine(x + x1, y + y1, x + x2, y + y2);
                    if (edge2[1] == -DOUBLE) {
                        drawArrow(g, x + x2, y + y2, x + x1, y + y1);
                        if (n2.nodeType != SINGULAR_DUMMY) {
                            drawArrow(g, x + x1, y + y1, x + x2, y + y2);
                        }
                    }
                    while (n2.nodeType != NORMAL) {
                        // n2.dummy==true) {
                        g.drawLine(x + n2.x + paddedNodeWidth / 2, y + n2.y + nodeHeight, x + n2.x + paddedNodeWidth / 2, y + n2.y);
                        x1 = n2.x + paddedNodeWidth / 2;
                        y1 = n2.y;
                        for (int[] edge : n2.edges) {
                            if (edge[1] < 0) {
                                // m_nodes.get(m);
                                n2 = m_nodes.get(edge[0]);
                                g.drawLine(x + x1, y + y1, x + n2.x + paddedNodeWidth / 2, y + n2.y + nodeHeight);
                                if (n2.nodeType != SINGULAR_DUMMY) {
                                    drawArrow(g, x + x1, y + y1, x + n2.x + paddedNodeWidth / 2, y + n2.y + nodeHeight);
                                }
                                break;
                            }
                        }
                    }
                }
            }
        }
    }
}
