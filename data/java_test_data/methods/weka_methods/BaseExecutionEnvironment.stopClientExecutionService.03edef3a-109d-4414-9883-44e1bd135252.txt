protected void stopClientExecutionService() {
    if (m_executorService != null) {
        m_executorService.shutdown();
        try {
            // try to avoid a situation where a step might not have received
            // data yet (and will be launching tasks on the client executor service
            // when it does), all preceding steps have finished, and the shutdown
            // monitor has polled and found all steps not busy. In this case,
            // both executor services will be shutdown. The main one will have
            // the job of executing the step in question (and will already have
            // a runnable for this in its queue, so this will get executed).
            // However,
            // the client executor service will (potentially) have an empty queue
            // as the step has not launched a task on it yet. This can lead to
            // a situation where the step tries to launch a task when the
            // client executor service has been shutdown. Blocking here at the
            // main executor service should avoid this situation.
            m_executorService.awaitTermination(5L, TimeUnit.SECONDS);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
    if (m_clientExecutorService != null) {
        m_clientExecutorService.shutdown();
    }
    if (m_singleThreadService != null) {
        m_singleThreadService.shutdown();
    }
}
