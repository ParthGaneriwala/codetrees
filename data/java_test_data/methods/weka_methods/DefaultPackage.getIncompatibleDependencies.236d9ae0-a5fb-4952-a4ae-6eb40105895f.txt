@Override
public List<Dependency> getIncompatibleDependencies() throws Exception {
    List<Package> installedP = m_packageManager.getInstalledPackages();
    String dependencies = getPackageMetaDataElement("Depends").toString();
    return getIncompatibleDependencies(installedP);
/*
     * if (dependencies != null) { StringTokenizer tok = new
     * StringTokenizer(dependencies, ","); while (tok.hasMoreTokens()) { String
     * nextT = tok.nextToken().trim(); String[] splitD =
     * splitNameVersion(nextT);
     * 
     * // check only if a version number was supplied in the dependency list. if
     * (splitD[1] != null && splitD[2] != null) { for (Package p : installedP) {
     * String packageNameI =
     * p.getPackageMetaDataElement("PackageName").toString(); if
     * (packageNameI.trim().equalsIgnoreCase(splitD[0].trim())) { // now check
     * version against installed String versionI =
     * p.getPackageMetaDataElement("Version").toString().trim(); // String[]
     * splitI = splitNameVersion(versionI);
     * 
     * VersionPackageConstraint.VersionComparison constraint =
     * VersionPackageConstraint.getVersionComparison(splitD[1]); if
     * (!VersionPackageConstraint.checkConstraint(versionI, constraint,
     * splitD[2])) { VersionPackageConstraint vpc = new
     * VersionPackageConstraint(p); vpc.setVersionConstraint(constraint);
     * incompatible.add(new Dependency(this, vpc)); } } } } } }
     * 
     * return incompatible;
     */
}
