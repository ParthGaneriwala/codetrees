@Override
protected Instances process(Instances instances) throws Exception {
    Instances result;
    Instance instOld;
    Instance instNew;
    int i;
    int n;
    double[] values;
    int numAttNew;
    int numAttOld;
    if (!isFirstBatchDone()) {
        computeThresholds(instances);
    }
    result = getOutputFormat();
    numAttOld = instances.numAttributes();
    numAttNew = result.numAttributes();
    for (n = 0; n < instances.numInstances(); n++) {
        instOld = instances.instance(n);
        values = new double[numAttNew];
        System.arraycopy(instOld.toDoubleArray(), 0, values, 0, numAttOld);
        // per attribute?
        if (!getDetectionPerAttribute()) {
            // outlier?
            if (isOutlier(instOld)) {
                values[m_OutlierAttributePosition[0]] = 1;
            }
            // extreme value?
            if (isExtremeValue(instOld)) {
                values[m_OutlierAttributePosition[0] + 1] = 1;
                // tag extreme values also as outliers?
                if (getExtremeValuesAsOutliers()) {
                    values[m_OutlierAttributePosition[0]] = 1;
                }
            }
        } else {
            for (i = 0; i < m_AttributeIndices.length; i++) {
                // non-numeric attribute?
                if (m_AttributeIndices[i] == NON_NUMERIC) {
                    continue;
                }
                // outlier?
                if (isOutlier(instOld, m_AttributeIndices[i])) {
                    values[m_OutlierAttributePosition[i]] = 1;
                }
                // extreme value?
                if (isExtremeValue(instOld, m_AttributeIndices[i])) {
                    values[m_OutlierAttributePosition[i] + 1] = 1;
                    // tag extreme values also as outliers?
                    if (getExtremeValuesAsOutliers()) {
                        values[m_OutlierAttributePosition[i]] = 1;
                    }
                }
                // add multiplier?
                if (getOutputOffsetMultiplier()) {
                    values[m_OutlierAttributePosition[i] + 2] = calculateMultiplier(instOld, m_AttributeIndices[i]);
                }
            }
        }
        // generate new instance
        instNew = new DenseInstance(1.0, values);
        instNew.setDataset(result);
        // copy possible strings, relational values...
        copyValues(instNew, false, instOld.dataset(), outputFormatPeek());
        // add to output
        result.add(instNew);
    }
    return result;
}
