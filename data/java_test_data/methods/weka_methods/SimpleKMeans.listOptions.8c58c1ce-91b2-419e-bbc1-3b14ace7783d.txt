@Override
public Enumeration<Option> listOptions() {
    Vector<Option> result = new Vector<Option>();
    result.addElement(new Option("\tNumber of clusters.\n" + "\t(default 2).", "N", 1, "-N <num>"));
    result.addElement(new Option("\tInitialization method to use.\n\t0 = random, 1 = k-means++, " + "2 = canopy, 3 = farthest first.\n\t(default = 0)", "init", 1, "-init"));
    result.addElement(new Option("\tUse canopies to reduce the number of distance calculations.", "C", 0, "-C"));
    result.addElement(new Option("\tMaximum number of candidate canopies to retain in memory\n\t" + "at any one time when using canopy clustering.\n\t" + "T2 distance plus, data characteristics,\n\t" + "will determine how many candidate canopies are formed before\n\t" + "periodic and final pruning are performed, which might result\n\t" + "in exceess memory consumption. This setting avoids large numbers\n\t" + "of candidate canopies consuming memory. (default = 100)", "-max-candidates", 1, "-max-candidates <num>"));
    result.addElement(new Option("\tHow often to prune low density canopies when using canopy clustering. \n\t" + "(default = every 10,000 training instances)", "periodic-pruning", 1, "-periodic-pruning <num>"));
    result.addElement(new Option("\tMinimum canopy density, when using canopy clustering, below which\n\t" + " a canopy will be pruned during periodic pruning. (default = 2 instances)", "min-density", 1, "-min-density"));
    result.addElement(new Option("\tThe T2 distance to use when using canopy clustering. Values < 0 indicate that\n\t" + "a heuristic based on attribute std. deviation should be used to set this.\n\t" + "(default = -1.0)", "t2", 1, "-t2"));
    result.addElement(new Option("\tThe T1 distance to use when using canopy clustering. A value < 0 is taken as a\n\t" + "positive multiplier for T2. (default = -1.5)", "t1", 1, "-t1"));
    result.addElement(new Option("\tDisplay std. deviations for centroids.\n", "V", 0, "-V"));
    result.addElement(new Option("\tDon't replace missing values with mean/mode.\n", "M", 0, "-M"));
    result.add(new Option("\tDistance function to use.\n" + "\t(default: weka.core.EuclideanDistance)", "A", 1, "-A <classname and options>"));
    result.add(new Option("\tMaximum number of iterations.\n", "I", 1, "-I <num>"));
    result.addElement(new Option("\tPreserve order of instances.\n", "O", 0, "-O"));
    result.addElement(new Option("\tEnables faster distance calculations, using cut-off values.\n" + "\tDisables the calculation/output of squared errors/distances.\n", "fast", 0, "-fast"));
    result.addElement(new Option("\tNumber of execution slots.\n" + "\t(default 1 - i.e. no parallelism)", "num-slots", 1, "-num-slots <num>"));
    result.addAll(Collections.list(super.listOptions()));
    return result.elements();
}
