private void setup() {
    JPanel aboutAndControlHolder = new JPanel();
    aboutAndControlHolder.setLayout(new BorderLayout());
    JPanel controlHolder = new JPanel();
    controlHolder.setLayout(new BorderLayout());
    JPanel fieldHolder = new JPanel();
    fieldHolder.setLayout(new GridLayout(0, 4));
    JPanel lhsP = new JPanel();
    lhsP.setLayout(new BorderLayout());
    lhsP.setBorder(BorderFactory.createTitledBorder("Attribute"));
    // m_lhsField = new EnvironmentField(m_env);
    m_lhsField.setEditable(true);
    lhsP.add(m_lhsField, BorderLayout.CENTER);
    lhsP.setToolTipText("<html>Name or index of attribute. " + "also accepts<br>the special labels \"/first\" and \"/last\"" + " to indicate<br>the first and last attribute respecitively</html>");
    m_lhsField.setToolTipText("<html>Name or index of attribute. " + "also accepts<br>the special labels \"/first\" and \"/last\"" + " to indicate<br>the first and last attribute respecitively</html>");
    JPanel operatorP = new JPanel();
    operatorP.setLayout(new BorderLayout());
    operatorP.setBorder(BorderFactory.createTitledBorder("Operator"));
    m_operatorCombo.addItem(" = ");
    m_operatorCombo.addItem(" != ");
    m_operatorCombo.addItem(" < ");
    m_operatorCombo.addItem(" <= ");
    m_operatorCombo.addItem(" > ");
    m_operatorCombo.addItem(" >= ");
    m_operatorCombo.addItem(" isMissing ");
    m_operatorCombo.addItem(" contains ");
    m_operatorCombo.addItem(" startsWith ");
    m_operatorCombo.addItem(" endsWith ");
    m_operatorCombo.addItem(" regex ");
    operatorP.add(m_operatorCombo, BorderLayout.CENTER);
    JPanel rhsP = new JPanel();
    rhsP.setLayout(new BorderLayout());
    rhsP.setBorder(BorderFactory.createTitledBorder("Constant or attribute"));
    rhsP.setToolTipText("<html>Constant value to test/check for. If " + "testing<br>against an attribute, then this specifies" + "an attribute index or name</html>");
    // m_rhsField = new EnvironmentField(m_env);
    m_rhsField.setEditable(true);
    rhsP.add(m_rhsField, BorderLayout.CENTER);
    fieldHolder.add(lhsP);
    fieldHolder.add(operatorP);
    fieldHolder.add(rhsP);
    fieldHolder.add(m_rhsIsAttribute);
    controlHolder.add(fieldHolder, BorderLayout.SOUTH);
    JPanel tempPanel = new JPanel();
    tempPanel.setLayout(new BorderLayout());
    JPanel expressionP = new JPanel();
    expressionP.setLayout(new BorderLayout());
    expressionP.setBorder(BorderFactory.createTitledBorder("Expression"));
    JPanel tempE = new JPanel();
    tempE.setLayout(new BorderLayout());
    tempE.setBorder(BorderFactory.createEmptyBorder(5, 0, 5, 0));
    tempE.add(m_expressionLab, BorderLayout.CENTER);
    JScrollPane expressionScroller = new JScrollPane(tempE);
    expressionP.add(expressionScroller, BorderLayout.CENTER);
    tempPanel.add(expressionP, BorderLayout.SOUTH);
    // 
    JPanel flowControlP = new JPanel();
    flowControlP.setLayout(new GridLayout(2, 2));
    flowControlP.add(new JLabel("Send true instances to node", SwingConstants.RIGHT));
    flowControlP.add(m_trueData);
    flowControlP.add(new JLabel("Send false instances to node", SwingConstants.RIGHT));
    flowControlP.add(m_falseData);
    tempPanel.add(flowControlP, BorderLayout.NORTH);
    String falseStepN = m_expression.getFalseStepName();
    String trueStepN = m_expression.getTrueStepName();
    Object[] connectedSteps = m_expression.m_downstream;
    m_trueData.addItem("<none>");
    m_falseData.addItem("<none>");
    if (connectedSteps != null && connectedSteps.length > 0) {
        if (connectedSteps[0] != null) {
            String first = ((BeanCommon) connectedSteps[0]).getCustomName();
            m_trueData.addItem(first);
            m_falseData.addItem(first);
        }
        if (connectedSteps.length > 1 && connectedSteps[1] != null) {
            String second = ((BeanCommon) connectedSteps[1]).getCustomName();
            m_trueData.addItem(second);
            m_falseData.addItem(second);
        }
    }
    if (falseStepN != null && falseStepN.length() > 0) {
        m_falseData.setSelectedItem(falseStepN);
    }
    if (trueStepN != null && trueStepN.length() > 0) {
        m_trueData.setSelectedItem(trueStepN);
    }
    controlHolder.add(tempPanel, BorderLayout.NORTH);
    aboutAndControlHolder.add(controlHolder, BorderLayout.SOUTH);
    JPanel aboutP = m_tempEditor.getAboutPanel();
    aboutAndControlHolder.add(aboutP, BorderLayout.NORTH);
    add(aboutAndControlHolder, BorderLayout.NORTH);
    addButtons();
    m_rhsIsAttribute.addActionListener(new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent e) {
            if (m_expressionTree != null) {
                TreePath p = m_expressionTree.getSelectionPath();
                if (p != null) {
                    if (p.getLastPathComponent() instanceof DefaultMutableTreeNode) {
                        DefaultMutableTreeNode tNode = (DefaultMutableTreeNode) p.getLastPathComponent();
                        FlowByExpression.ExpressionNode thisNode = (FlowByExpression.ExpressionNode) tNode.getUserObject();
                        if (thisNode instanceof FlowByExpression.ExpressionClause) {
                            ((FlowByExpression.ExpressionClause) thisNode).m_rhsIsAttribute = m_rhsIsAttribute.isSelected();
                            DefaultTreeModel tmodel = (DefaultTreeModel) m_expressionTree.getModel();
                            tmodel.nodeStructureChanged(tNode);
                            updateExpressionLabel();
                        }
                    }
                }
            }
        }
    });
    m_operatorCombo.addActionListener(new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent e) {
            if (m_operatorCombo.getSelectedIndex() > 5) {
                m_rhsIsAttribute.setSelected(false);
                m_rhsIsAttribute.setEnabled(false);
            } else {
                m_rhsIsAttribute.setEnabled(true);
            }
            if (m_expressionTree != null) {
                TreePath p = m_expressionTree.getSelectionPath();
                if (p != null) {
                    if (p.getLastPathComponent() instanceof DefaultMutableTreeNode) {
                        DefaultMutableTreeNode tNode = (DefaultMutableTreeNode) p.getLastPathComponent();
                        FlowByExpression.ExpressionNode thisNode = (FlowByExpression.ExpressionNode) tNode.getUserObject();
                        if (thisNode instanceof FlowByExpression.ExpressionClause) {
                            String selection = m_operatorCombo.getSelectedItem().toString();
                            FlowByExpression.ExpressionClause.ExpressionType t = FlowByExpression.ExpressionClause.ExpressionType.EQUALS;
                            for (FlowByExpression.ExpressionClause.ExpressionType et : FlowByExpression.ExpressionClause.ExpressionType.values()) {
                                if (et.toString().equals(selection)) {
                                    t = et;
                                    break;
                                }
                            }
                            ((FlowByExpression.ExpressionClause) thisNode).m_operator = t;
                            DefaultTreeModel tmodel = (DefaultTreeModel) m_expressionTree.getModel();
                            tmodel.nodeStructureChanged(tNode);
                            updateExpressionLabel();
                        }
                    }
                }
            }
        }
    });
    m_lhsField.addActionListener(new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent e) {
            if (m_expressionTree != null) {
                TreePath p = m_expressionTree.getSelectionPath();
                if (p != null) {
                    if (p.getLastPathComponent() instanceof DefaultMutableTreeNode) {
                        DefaultMutableTreeNode tNode = (DefaultMutableTreeNode) p.getLastPathComponent();
                        FlowByExpression.ExpressionNode thisNode = (FlowByExpression.ExpressionNode) tNode.getUserObject();
                        if (thisNode instanceof FlowByExpression.ExpressionClause) {
                            Object text = m_lhsField.getSelectedItem();
                            if (text != null) {
                                ((FlowByExpression.ExpressionClause) thisNode).m_lhsAttributeName = text.toString();
                                DefaultTreeModel tmodel = (DefaultTreeModel) m_expressionTree.getModel();
                                tmodel.nodeStructureChanged(tNode);
                                updateExpressionLabel();
                            }
                        }
                    }
                }
            }
        }
    });
    m_lhsField.getEditor().getEditorComponent().addKeyListener(new KeyAdapter() {

        @Override
        public void keyReleased(KeyEvent e) {
            if (m_expressionTree != null) {
                TreePath p = m_expressionTree.getSelectionPath();
                if (p != null) {
                    if (p.getLastPathComponent() instanceof DefaultMutableTreeNode) {
                        DefaultMutableTreeNode tNode = (DefaultMutableTreeNode) p.getLastPathComponent();
                        FlowByExpression.ExpressionNode thisNode = (FlowByExpression.ExpressionNode) tNode.getUserObject();
                        if (thisNode instanceof FlowByExpression.ExpressionClause) {
                            String text = "";
                            if (m_lhsField.getSelectedItem() != null) {
                                text = m_lhsField.getSelectedItem().toString();
                            }
                            java.awt.Component theEditor = m_lhsField.getEditor().getEditorComponent();
                            if (theEditor instanceof JTextField) {
                                text = ((JTextField) theEditor).getText();
                            }
                            ((FlowByExpression.ExpressionClause) thisNode).m_lhsAttributeName = text;
                            DefaultTreeModel tmodel = (DefaultTreeModel) m_expressionTree.getModel();
                            tmodel.nodeStructureChanged(tNode);
                            updateExpressionLabel();
                        }
                    }
                }
            }
        }
    });
    m_rhsField.addActionListener(new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent e) {
            if (m_expressionTree != null) {
                TreePath p = m_expressionTree.getSelectionPath();
                if (p != null) {
                    if (p.getLastPathComponent() instanceof DefaultMutableTreeNode) {
                        DefaultMutableTreeNode tNode = (DefaultMutableTreeNode) p.getLastPathComponent();
                        FlowByExpression.ExpressionNode thisNode = (FlowByExpression.ExpressionNode) tNode.getUserObject();
                        if (thisNode instanceof FlowByExpression.ExpressionClause) {
                            Object text = m_rhsField.getSelectedItem();
                            if (text != null) {
                                ((FlowByExpression.ExpressionClause) thisNode).m_rhsOperand = text.toString();
                                DefaultTreeModel tmodel = (DefaultTreeModel) m_expressionTree.getModel();
                                tmodel.nodeStructureChanged(tNode);
                                updateExpressionLabel();
                            }
                        }
                    }
                }
            }
        }
    });
    m_rhsField.getEditor().getEditorComponent().addKeyListener(new KeyAdapter() {

        @Override
        public void keyReleased(KeyEvent e) {
            if (m_expressionTree != null) {
                TreePath p = m_expressionTree.getSelectionPath();
                if (p != null) {
                    if (p.getLastPathComponent() instanceof DefaultMutableTreeNode) {
                        DefaultMutableTreeNode tNode = (DefaultMutableTreeNode) p.getLastPathComponent();
                        FlowByExpression.ExpressionNode thisNode = (FlowByExpression.ExpressionNode) tNode.getUserObject();
                        if (thisNode instanceof FlowByExpression.ExpressionClause) {
                            String text = "";
                            if (m_rhsField.getSelectedItem() != null) {
                                text = m_rhsField.getSelectedItem().toString();
                            }
                            java.awt.Component theEditor = m_rhsField.getEditor().getEditorComponent();
                            if (theEditor instanceof JTextField) {
                                text = ((JTextField) theEditor).getText();
                            }
                            if (m_rhsField.getSelectedItem() != null) {
                                ((FlowByExpression.ExpressionClause) thisNode).m_rhsOperand = text;
                                DefaultTreeModel tmodel = (DefaultTreeModel) m_expressionTree.getModel();
                                tmodel.nodeStructureChanged(tNode);
                                updateExpressionLabel();
                            }
                        }
                    }
                }
            }
        }
    });
    // try and setup combo boxes with incoming attribute names
    if (m_expression.getConnectedFormat() != null) {
        Instances incoming = m_expression.getConnectedFormat();
        m_lhsField.removeAllItems();
        m_rhsField.removeAllItems();
        for (int i = 0; i < incoming.numAttributes(); i++) {
            m_lhsField.addItem(incoming.attribute(i).name());
            m_rhsField.addItem(incoming.attribute(i).name());
        }
    }
    Dimension d = operatorP.getPreferredSize();
    lhsP.setPreferredSize(d);
    rhsP.setPreferredSize(d);
}
