private double scaleFactorUsingBlend() {
    int i, j, lowestcount = 0;
    double lowest = -1.0, nextlowest = -1.0;
    double root, broot, up, bot;
    double aimfor, min_val = 9e300, scale = 1.0;
    double avgprob = 0.0, minprob = 0.0, min_pos = 0.0;
    KStarWrapper botvals = new KStarWrapper();
    KStarWrapper upvals = new KStarWrapper();
    KStarWrapper vals = new KStarWrapper();
    m_Distances = new double[m_NumInstances];
    for (j = 0; j < m_NumInstances; j++) {
        if (m_TrainSet.instance(j).isMissing(m_AttrIndex)) {
            // mark the train instance with a missing value by setting
            // the distance to -1.0
            m_Distances[j] = -1.0;
        } else {
            m_Distances[j] = Math.abs(m_TrainSet.instance(j).value(m_AttrIndex) - m_Test.value(m_AttrIndex));
            if ((m_Distances[j] + 1e-5) < nextlowest || nextlowest == -1.0) {
                if ((m_Distances[j] + 1e-5) < lowest || lowest == -1.0) {
                    nextlowest = lowest;
                    lowest = m_Distances[j];
                    lowestcount = 1;
                } else if (Math.abs(m_Distances[j] - lowest) < 1e-5) {
                    // record the number training instances (number n0) at
                    // the smallest distance from test instance
                    lowestcount++;
                } else {
                    nextlowest = m_Distances[j];
                }
            }
            // records the actual number of instances with no missing value
            m_ActualCount++;
        }
    }
    if (nextlowest == -1 || lowest == -1) {
        // Data values are all the same
        scale = 1.0;
        m_SmallestProb = m_AverageProb = 1.0;
        return scale;
    } else {
        // starting point for root
        root = 1.0 / (nextlowest - lowest);
        i = 0;
        // given the expression: n0 <= E(scale) <= N
        // E(scale) = (N - n0) * b + n0 with blending factor: 0 <= b <= 1
        // aimfor = (N - n0) * b + n0
        aimfor = (m_ActualCount - lowestcount) * (double) m_BlendFactor / 100.0 + lowestcount;
        if (m_BlendFactor == 0) {
            aimfor += 1.0;
        }
        // root is bracketed in interval [bot,up]
        bot = 0.0 + ROOT_FINDER_ACCURACY / 2.0;
        // This is bodgy
        up = root * 16;
        // E(bot)
        calculateSphereSize(bot, botvals);
        botvals.sphere -= aimfor;
        // E(up)
        calculateSphereSize(up, upvals);
        upvals.sphere -= aimfor;
        if (botvals.sphere < 0) {
            // Couldn't include that many
            // instances - going for max possible
            min_pos = bot;
            avgprob = botvals.avgProb;
            minprob = botvals.minProb;
        } else if (upvals.sphere > 0) {
            // Couldn't include that few,
            // going for min possible
            min_pos = up;
            avgprob = upvals.avgProb;
            minprob = upvals.minProb;
        } else {
            // Root finding Algorithm starts here !
            for (; ; ) {
                calculateSphereSize(root, vals);
                vals.sphere -= aimfor;
                if (Math.abs(vals.sphere) < min_val) {
                    min_val = Math.abs(vals.sphere);
                    min_pos = root;
                    avgprob = vals.avgProb;
                    minprob = vals.minProb;
                }
                if (Math.abs(vals.sphere) <= ROOT_FINDER_ACCURACY) {
                    // converged to a solution, done!
                    break;
                }
                if (vals.sphere > 0.0) {
                    broot = (root + up) / 2.0;
                    bot = root;
                    root = broot;
                } else {
                    broot = (root + bot) / 2.0;
                    up = root;
                    root = broot;
                }
                i++;
                if (i > ROOT_FINDER_MAX_ITER) {
                    // System.err.println("Warning: "+debug+"
                    // ROOT_FINDER_MAX_ITER exceeded");
                    root = min_pos;
                    break;
                }
            }
        }
        m_SmallestProb = minprob;
        m_AverageProb = avgprob;
        // Set the probability of transforming to a missing value
        switch(m_MissingMode) {
            case M_DELETE:
                m_MissingProb = 0.0;
                break;
            case M_NORMAL:
                m_MissingProb = 1.0;
                break;
            case M_MAXDIFF:
                m_MissingProb = m_SmallestProb;
                break;
            case M_AVERAGE:
                m_MissingProb = m_AverageProb;
                break;
        }
        // set the scale factor value
        scale = min_pos;
        return scale;
    }
}
