private void setupTree() {
    JPanel treeHolder = new JPanel();
    treeHolder.setLayout(new BorderLayout());
    treeHolder.setBorder(BorderFactory.createTitledBorder("Expression tree"));
    String expressionString = m_expression.getExpressionString();
    if (expressionString == null || expressionString.length() == 0) {
        expressionString = "()";
    }
    FlowByExpression.BracketNode root = new FlowByExpression.BracketNode();
    root.parseFromInternal(expressionString);
    root.setShowAndOr(false);
    m_treeRoot = root.toJTree(null);
    DefaultTreeModel model = new DefaultTreeModel(m_treeRoot);
    m_expressionTree = new JTree(model);
    m_expressionTree.setEnabled(true);
    m_expressionTree.setRootVisible(true);
    m_expressionTree.setShowsRootHandles(true);
    DefaultTreeSelectionModel selectionModel = new DefaultTreeSelectionModel();
    selectionModel.setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
    m_expressionTree.setSelectionModel(selectionModel);
    // add mouse listener to tree
    m_expressionTree.addMouseListener(new MouseAdapter() {

        @Override
        public void mouseClicked(MouseEvent e) {
            TreePath p = m_expressionTree.getSelectionPath();
            if (p != null) {
                if (p.getLastPathComponent() instanceof DefaultMutableTreeNode) {
                    DefaultMutableTreeNode tNode = (DefaultMutableTreeNode) p.getLastPathComponent();
                    FlowByExpression.ExpressionNode thisNode = (FlowByExpression.ExpressionNode) tNode.getUserObject();
                    if (thisNode instanceof FlowByExpression.ExpressionClause) {
                        setExpressionEditor((FlowByExpression.ExpressionClause) thisNode);
                    }
                }
            }
        }
    });
    updateExpressionLabel();
    JScrollPane treeView = new JScrollPane(m_expressionTree);
    treeHolder.add(treeView, BorderLayout.CENTER);
    JPanel butHolder = new JPanel();
    // butHolder.setLayout(new BorderLayout());
    butHolder.add(m_addExpressionNode);
    butHolder.add(m_addBracketNode);
    butHolder.add(m_toggleNegation);
    butHolder.add(m_andOr);
    butHolder.add(m_deleteNode);
    treeHolder.add(butHolder, BorderLayout.NORTH);
    add(treeHolder, BorderLayout.CENTER);
    Dimension d = treeHolder.getPreferredSize();
    treeHolder.setPreferredSize(new Dimension(d.width, d.height / 2));
    m_andOr.addActionListener(new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent e) {
            TreePath p = m_expressionTree.getSelectionPath();
            if (p != null) {
                if (p.getLastPathComponent() instanceof DefaultMutableTreeNode) {
                    DefaultMutableTreeNode tNode = (DefaultMutableTreeNode) p.getLastPathComponent();
                    FlowByExpression.ExpressionNode thisNode = (FlowByExpression.ExpressionNode) tNode.getUserObject();
                    thisNode.setIsOr(!thisNode.isOr());
                    DefaultTreeModel tmodel = (DefaultTreeModel) m_expressionTree.getModel();
                    tmodel.nodeStructureChanged(tNode);
                    updateExpressionLabel();
                }
            } else {
                JOptionPane.showMessageDialog(FlowByExpressionCustomizer.this, "Please select a node in the tree to alter the boolean operator of", "And/Or", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    });
    m_toggleNegation.addActionListener(new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent e) {
            TreePath p = m_expressionTree.getSelectionPath();
            if (p != null) {
                if (p.getLastPathComponent() instanceof DefaultMutableTreeNode) {
                    DefaultMutableTreeNode tNode = (DefaultMutableTreeNode) p.getLastPathComponent();
                    FlowByExpression.ExpressionNode thisNode = (FlowByExpression.ExpressionNode) tNode.getUserObject();
                    thisNode.setNegated(!thisNode.isNegated());
                    DefaultTreeModel tmodel = (DefaultTreeModel) m_expressionTree.getModel();
                    tmodel.nodeStructureChanged(tNode);
                    updateExpressionLabel();
                }
            } else {
                JOptionPane.showMessageDialog(FlowByExpressionCustomizer.this, "Please select a node in the tree to toggle its negation", "Toggle negation", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    });
    m_deleteNode.addActionListener(new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent e) {
            TreePath p = m_expressionTree.getSelectionPath();
            if (p != null) {
                if (p.getLastPathComponent() instanceof DefaultMutableTreeNode) {
                    DefaultMutableTreeNode tNode = (DefaultMutableTreeNode) p.getLastPathComponent();
                    if (tNode == m_treeRoot) {
                        JOptionPane.showMessageDialog(FlowByExpressionCustomizer.this, "You can't delete the root of the tree!", "Delete node", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        FlowByExpression.ExpressionNode thisNode = (FlowByExpression.ExpressionNode) tNode.getUserObject();
                        FlowByExpression.BracketNode parentNode = (FlowByExpression.BracketNode) ((DefaultMutableTreeNode) tNode.getParent()).getUserObject();
                        // remove from internal tree structure
                        parentNode.removeChild(thisNode);
                        // remove from jtree structure
                        DefaultTreeModel tmodel = (DefaultTreeModel) m_expressionTree.getModel();
                        tmodel.removeNodeFromParent(tNode);
                        updateExpressionLabel();
                    }
                }
            } else {
                JOptionPane.showMessageDialog(FlowByExpressionCustomizer.this, "Please select a node in the tree to delete.", "Delete node", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    });
    m_addExpressionNode.addActionListener(new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent e) {
            TreePath p = m_expressionTree.getSelectionPath();
            if (p != null) {
                if (p.getLastPathComponent() instanceof DefaultMutableTreeNode) {
                    DefaultMutableTreeNode tNode = (DefaultMutableTreeNode) p.getLastPathComponent();
                    FlowByExpression.ExpressionNode thisNode = (FlowByExpression.ExpressionNode) tNode.getUserObject();
                    if (thisNode instanceof FlowByExpression.BracketNode) {
                        FlowByExpression.ExpressionClause newNode = new FlowByExpression.ExpressionClause(FlowByExpression.ExpressionClause.ExpressionType.EQUALS, "<att name>", "<value>", false, false);
                        ((FlowByExpression.BracketNode) thisNode).addChild(newNode);
                        DefaultMutableTreeNode childNode = new DefaultMutableTreeNode(newNode);
                        DefaultTreeModel tmodel = (DefaultTreeModel) m_expressionTree.getModel();
                        tNode.add(childNode);
                        tmodel.nodeStructureChanged(tNode);
                        updateExpressionLabel();
                    } else {
                        JOptionPane.showMessageDialog(FlowByExpressionCustomizer.this, "An expression can only be added to a bracket node.", "Add expression", JOptionPane.INFORMATION_MESSAGE);
                    }
                }
            } else {
                JOptionPane.showMessageDialog(FlowByExpressionCustomizer.this, "You must select a bracket node in the tree view to add a new expression to.", "Add expression", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    });
    m_addBracketNode.addActionListener(new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent e) {
            TreePath p = m_expressionTree.getSelectionPath();
            if (p != null) {
                if (p.getLastPathComponent() instanceof DefaultMutableTreeNode) {
                    DefaultMutableTreeNode tNode = (DefaultMutableTreeNode) p.getLastPathComponent();
                    FlowByExpression.ExpressionNode thisNode = (FlowByExpression.ExpressionNode) tNode.getUserObject();
                    if (thisNode instanceof FlowByExpression.BracketNode) {
                        FlowByExpression.BracketNode newNode = new FlowByExpression.BracketNode();
                        ((FlowByExpression.BracketNode) thisNode).addChild(newNode);
                        DefaultMutableTreeNode childNode = new DefaultMutableTreeNode(newNode);
                        DefaultTreeModel tmodel = (DefaultTreeModel) m_expressionTree.getModel();
                        tNode.add(childNode);
                        tmodel.nodeStructureChanged(tNode);
                        updateExpressionLabel();
                    } else {
                        JOptionPane.showMessageDialog(FlowByExpressionCustomizer.this, "An new bracket node can only be added to an existing bracket node.", "Add bracket", JOptionPane.INFORMATION_MESSAGE);
                    }
                }
            } else {
                JOptionPane.showMessageDialog(FlowByExpressionCustomizer.this, "You must select an existing bracket node in the tree in order to add a new bracket node.", "Add bracket", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    });
}
