public void buildClassifier(Instances data) throws Exception {
    // can classifier handle the data?
    getCapabilities().testWithFail(data);
    // get fresh instances
    m_data = new Instances(data);
    super.buildClassifier(m_data);
    if (!(m_Classifier instanceof Randomizable)) {
        throw new IllegalArgumentException("Base learner must implement Randomizable!");
    }
    m_Classifiers = AbstractClassifier.makeCopies(m_Classifier, m_NumIterations);
    Random random = m_data.getRandomNumberGenerator(m_Seed);
    // Resample data based on weights if base learner can't handle weights
    if (!(m_Classifier instanceof WeightedInstancesHandler)) {
        m_data = m_data.resampleWithWeights(random);
    }
    for (int j = 0; j < m_Classifiers.length; j++) {
        // Set the random number seed for the current classifier.
        ((Randomizable) m_Classifiers[j]).setSeed(random.nextInt());
    // Build the classifier.
    // m_Classifiers[j].buildClassifier(m_data);
    }
    buildClassifiers();
    // save memory
    m_data = null;
}
