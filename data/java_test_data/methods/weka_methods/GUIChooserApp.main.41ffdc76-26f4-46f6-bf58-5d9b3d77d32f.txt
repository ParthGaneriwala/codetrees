public static void main(String[] args) {
    weka.core.logging.Logger.log(weka.core.logging.Logger.Level.INFO, "Logging started");
    try {
        LookAndFeel.setLookAndFeel(GUIChooserDefaults.APP_ID, GUIChooserDefaults.APP_ID + ".lookAndFeel", GUIChooserDefaults.LAF);
    } catch (IOException ex) {
        ex.printStackTrace();
    }
    // Save std err and std out because they may be redirected by external code
    final PrintStream savedStdOut = System.out;
    final PrintStream savedStdErr = System.err;
    // Set up security manager to intercept System.exit() calls in external code
    final SecurityManager sm = System.getSecurityManager();
    System.setSecurityManager(new SecurityManager() {

        public void checkExit(int status) {
            if (sm != null) {
                sm.checkExit(status);
            }
            // Currently, we are just checking for calls from TigerJython code
            for (Class cl : getClassContext()) {
                if (cl.getName().equals("tigerjython.gui.MainWindow")) {
                    for (Frame frame : Frame.getFrames()) {
                        if (frame.getTitle().toLowerCase().startsWith("tigerjython")) {
                            frame.dispose();
                        }
                    }
                    // Set std err and std out back to original values
                    System.setOut(savedStdOut);
                    System.setErr(savedStdErr);
                // Make entry in log and
                /*
             * weka.core.logging.Logger.log(weka.core.logging.Logger.Level.INFO,
             * "Intercepted System.exit() from TigerJython. Please ignore");
             * throw new SecurityException(
             * "Intercepted System.exit() from TigerJython. Please ignore!");
             */
                }
            }
            weka.core.logging.Logger.log(weka.core.logging.Logger.Level.INFO, "Intercepted System.exit() from a class other than the GUIChooser. " + "Please ignore.");
            throw new SecurityException("Intercepted System.exit() from " + "a class other than the GUIChooser. Please ignore.");
        }

        public void checkPermission(Permission perm) {
            if (sm != null) {
                sm.checkPermission(perm);
            }
        }

        public void checkPermission(Permission perm, Object context) {
            if (sm != null) {
                sm.checkPermission(perm, context);
            }
        }
    });
    try {
        // uncomment to disable the memory management:
        // m_Memory.setEnabled(false);
        // m_chooser = new GUIChooser();
        GUIChooserApp.createSingleton();
        m_chooser.pack();
        m_chooser.setSize(500, 350);
        m_chooser.setVisible(true);
        if (args != null && args.length > 0) {
            m_chooser.showExplorer(args[0]);
        }
        Thread memMonitor = new Thread() {

            @SuppressWarnings("static-access")
            @Override
            public void run() {
                while (true) {
                    if (m_Memory.isOutOfMemory()) {
                        // clean up
                        m_chooser.dispose();
                        if (m_chooser.m_Frames.size() > 0) {
                            for (int i = 0; i < m_chooser.m_Frames.size(); i++) {
                                JFrame av = m_chooser.m_Frames.get(i);
                                av.dispose();
                            }
                            m_chooser.m_Frames.clear();
                        }
                        m_chooser = null;
                        System.gc();
                        // display error
                        GUIChooserApp.m_LogWindow.pack();
                        GUIChooserApp.m_LogWindow.setSize(1024, 768);
                        GUIChooserApp.m_LogWindow.setVisible(true);
                        GUIChooserApp.m_LogWindow.toFront();
                        System.err.println("\ndisplayed message:");
                        m_Memory.showOutOfMemory();
                        System.err.println("\nexiting...");
                        System.setSecurityManager(null);
                        System.exit(-1);
                    }
                // } catch (InterruptedException ex) {
                // ex.printStackTrace();
                // }
                }
            }
        };
        memMonitor.setPriority(Thread.NORM_PRIORITY);
        memMonitor.start();
    } catch (Exception ex) {
        ex.printStackTrace();
        System.err.println(ex.getMessage());
    }
}
