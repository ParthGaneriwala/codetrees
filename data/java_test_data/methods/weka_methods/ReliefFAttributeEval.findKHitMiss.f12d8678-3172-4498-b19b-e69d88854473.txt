private void findKHitMiss(int instNum) {
    int i, j;
    int cl;
    double ww;
    double temp_diff = 0.0;
    Instance thisInst = m_trainInstances.instance(instNum);
    for (i = 0; i < m_numInstances; i++) {
        if (i != instNum) {
            Instance cmpInst = m_trainInstances.instance(i);
            temp_diff = distance(cmpInst, thisInst);
            // class of this training instance or 0 if numeric
            if (m_numericClass) {
                cl = 0;
            } else {
                if (m_trainInstances.instance(i).classIsMissing()) {
                    // skip instances with missing class values in the nominal class case
                    continue;
                }
                cl = (int) m_trainInstances.instance(i).value(m_classIndex);
            }
            // add this diff to the list for the class of this instance
            if (m_stored[cl] < m_Knn) {
                m_karray[cl][m_stored[cl]][0] = temp_diff;
                m_karray[cl][m_stored[cl]][1] = i;
                m_stored[cl]++;
                // note the worst diff for this class
                for (j = 0, ww = -1.0; j < m_stored[cl]; j++) {
                    if (m_karray[cl][j][0] > ww) {
                        ww = m_karray[cl][j][0];
                        m_index[cl] = j;
                    }
                }
                m_worst[cl] = ww;
            } else /*
         * if we already have stored knn for this class then check to see if
         * this instance is better than the worst
         */
            {
                if (temp_diff < m_karray[cl][m_index[cl]][0]) {
                    m_karray[cl][m_index[cl]][0] = temp_diff;
                    m_karray[cl][m_index[cl]][1] = i;
                    for (j = 0, ww = -1.0; j < m_stored[cl]; j++) {
                        if (m_karray[cl][j][0] > ww) {
                            ww = m_karray[cl][j][0];
                            m_index[cl] = j;
                        }
                    }
                    m_worst[cl] = ww;
                }
            }
        }
    }
}
