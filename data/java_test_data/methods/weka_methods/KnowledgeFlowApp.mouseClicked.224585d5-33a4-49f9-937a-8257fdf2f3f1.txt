@Override
public void mouseClicked(MouseEvent e) {
    if (((e.getModifiers() & InputEvent.BUTTON1_MASK) != InputEvent.BUTTON1_MASK) || e.isAltDown()) {
        boolean clearSelection = true;
        if (clearSelection) {
            // right click cancels selected component
            m_toolBarBean = null;
            m_mode = NONE;
            KnowledgeFlowApp.this.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
            m_componentTree.clearSelection();
        }
    }
    TreePath p = m_componentTree.getSelectionPath();
    if (p != null) {
        if (p.getLastPathComponent() instanceof DefaultMutableTreeNode) {
            DefaultMutableTreeNode tNode = (DefaultMutableTreeNode) p.getLastPathComponent();
            if (tNode.isLeaf()) {
                // System.err.println("Selected : " +
                // tNode.getUserObject().toString());
                Object userObject = tNode.getUserObject();
                if (userObject instanceof JTreeLeafDetails) {
                    if ((e.getModifiers() & InputEvent.SHIFT_MASK) != 0 && ((JTreeLeafDetails) userObject).isMetaBean()) {
                        if (m_firstUserComponentOpp) {
                            installWindowListenerForSavingUserStuff();
                            m_firstUserComponentOpp = false;
                        }
                        Vector<Object> toRemove = ((JTreeLeafDetails) userObject).getMetaBean();
                        DefaultTreeModel model = (DefaultTreeModel) m_componentTree.getModel();
                        MutableTreeNode userRoot = (MutableTreeNode) tNode.getParent();
                        model.removeNodeFromParent(tNode);
                        m_userComponents.remove(toRemove);
                        if (m_userComponents.size() == 0) {
                            model.removeNodeFromParent(userRoot);
                            m_userCompNode = null;
                        }
                    } else {
                        ((JTreeLeafDetails) userObject).instantiateBean();
                    }
                }
            }
        }
    }
}
