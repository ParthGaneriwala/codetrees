public void setRangeConstraint(String bound1, VersionPackageConstraint.VersionComparison comp1, String bound2, VersionPackageConstraint.VersionComparison comp2) throws Exception {
    // ranged constraint doesn't allow =
    if (comp1 == VersionPackageConstraint.VersionComparison.EQUAL || comp2 == VersionPackageConstraint.VersionComparison.EQUAL) {
        throw new Exception("[VersionRangePackageConstraint] malformed version " + "range constraint (= not allowed)!");
    }
    // VersionPackageConstraint could be used to cover them both
    if (comp1.compatibleWith(comp2)) {
        throw new Exception("[VersionRangePackageConstraint] malformed " + "version range constraint!");
    }
    // determine which type of range this is
    VersionPackageConstraint.VersionComparison boundsComp = VersionPackageConstraint.compare(bound1, bound2);
    if (boundsComp == VersionPackageConstraint.VersionComparison.EQUAL) {
        throw new Exception("[VersionRangePackageConstraint] malformed version" + " range - both bounds are equal!");
    }
    if (comp1 == VersionPackageConstraint.VersionComparison.GREATERTHAN || comp1 == VersionPackageConstraint.VersionComparison.GREATERTHANOREQUAL) {
        if (boundsComp == VersionPackageConstraint.VersionComparison.GREATERTHAN) {
            // it is an OR with respect to the two inequalities
            m_boundOr = true;
        }
    } else {
        if (boundsComp == VersionPackageConstraint.VersionComparison.LESSTHAN) {
            // it is an OR with respect to the two inequalities
            m_boundOr = true;
        }
    }
    // store bounds in ascending order
    if (boundsComp == VersionPackageConstraint.VersionComparison.LESSTHAN) {
        m_lowerBound = bound1;
        m_lowerConstraint = comp1;
        m_upperBound = bound2;
        m_upperConstraint = comp2;
    } else {
        m_lowerBound = bound2;
        m_lowerConstraint = comp2;
        m_upperBound = bound1;
        m_upperConstraint = comp1;
    }
}
