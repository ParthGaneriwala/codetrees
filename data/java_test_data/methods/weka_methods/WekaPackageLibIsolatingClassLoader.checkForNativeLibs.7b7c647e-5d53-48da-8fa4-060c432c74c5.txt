protected List<String> checkForNativeLibs(Package toLoad, File packageDir) {
    List<String> jarsForClassloaderToIgnore = new ArrayList<>();
    if (toLoad.getPackageMetaDataElement("NativeLibs") != null) {
        String nativeLibs = toLoad.getPackageMetaDataElement("NativeLibs").toString();
        if (nativeLibs.length() > 0) {
            String[] jarsWithLibs = nativeLibs.split(";");
            for (String entry : jarsWithLibs) {
                String[] jarAndEntries = entry.split(":");
                if (jarAndEntries.length != 2) {
                    System.err.println("Was expecting two entries for native lib spec - " + "jar:comma-separated lib paths");
                    continue;
                }
                String jarPath = jarAndEntries[0].trim();
                String[] libPathsInJar = jarAndEntries[1].split(",");
                List<String> libsToInstall = new ArrayList<>();
                // add entries to java.library.path
                for (String lib : libPathsInJar) {
                    String libName = lib.trim().replace("\\", "/");
                    if (!nativeLibInstalled(libName.substring(libName.lastIndexOf("/") + 1, libName.length()))) {
                        libsToInstall.add(libName.substring(libName.lastIndexOf("/") + 1, libName.length()));
                    }
                }
                if (libsToInstall.size() > 0) {
                    try {
                        installNativeLibs(packageDir, jarPath, libsToInstall);
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            /*
           * if (libsToAddToPath.size() > 0) {
           * addNativeLibsToLibsProp(libsToAddToPath); }
           */
            }
        }
    }
    // root class loader
    if (toLoad.getPackageMetaDataElement("InjectLoader") != null) {
        String injectDetails = toLoad.getPackageMetaDataElement("InjectLoader").toString();
        String[] entries = injectDetails.split(";");
        for (String entry : entries) {
            String jarPath = entry.trim();
            boolean rootClassLoader = false;
            if (jarPath.startsWith("root|")) {
                jarPath = jarPath.replace("root|", "");
                rootClassLoader = true;
            }
            String ignoreJar = jarPath.replace("\\", "/");
            ignoreJar = ignoreJar.substring(ignoreJar.lastIndexOf("/") + 1);
            jarsForClassloaderToIgnore.add(ignoreJar);
            try {
                WekaPackageClassLoaderManager.injectAllClassesInJar(new File(packageDir.toString() + File.separator + jarPath.trim()));
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
    return jarsForClassloaderToIgnore;
}
