@Override
public void estimate(double[][] observations, double[] weights) {
    if (weights == null) {
        weights = new double[observations.length];
        for (int i = 0; i < weights.length; i++) {
            weights[i] = 1.0;
        }
    }
    DenseVector weightVector = new DenseVector(weights);
    weightVector = weightVector.scale(1.0 / weightVector.norm(Vector.Norm.One));
    mean = weightedMean(observations, weightVector);
    Matrix cov = weightedCovariance(observations, weightVector, mean);
    // Compute inverse of covariance matrix
    DenseCholesky chol = new DenseCholesky(observations[0].length, true).factor((UpperSPDDenseMatrix) cov);
    covarianceInverse = new UpperSPDDenseMatrix(chol.solve(Matrices.identity(observations[0].length)));
    double logDeterminant = 0;
    for (int i = 0; i < observations[0].length; i++) {
        logDeterminant += Math.log(chol.getU().get(i, i));
    }
    logDeterminant *= 2;
    lnconstant = -(Log2PI * observations[0].length + logDeterminant) * 0.5;
}
