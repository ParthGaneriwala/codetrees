public static void main(String[] args) {
    LookAndFeel.setLookAndFeel();
    try {
        // uncomment to disable the memory management:
        // m_Memory.setEnabled(false);
        final javax.swing.JFrame jf = new javax.swing.JFrame();
        jf.getContentPane().setLayout(new java.awt.BorderLayout());
        for (int i = 0; i < args.length; i++) {
            if (args[i].toLowerCase().endsWith(".kf") || args[i].toLowerCase().endsWith(".kfml")) {
                args[i] = "file=" + args[i];
            }
        }
        KnowledgeFlowApp.createSingleton(args);
        Image icon = Toolkit.getDefaultToolkit().getImage(m_knowledgeFlow.getClass().getClassLoader().getResource("weka/gui/weka_icon_new_48.png"));
        jf.setIconImage(icon);
        jf.getContentPane().add(m_knowledgeFlow, java.awt.BorderLayout.CENTER);
        jf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        jf.setSize(1024, 768);
        jf.setVisible(true);
        Thread memMonitor = new Thread() {

            @SuppressWarnings("static-access")
            @Override
            public void run() {
                while (true) {
                    if (m_Memory.isOutOfMemory()) {
                        // clean up
                        jf.dispose();
                        m_knowledgeFlow = null;
                        System.gc();
                        // display error
                        System.err.println("\n[KnowledgeFlow] displayed message:");
                        m_Memory.showOutOfMemory();
                        System.err.println("\nexiting");
                        System.exit(-1);
                    }
                // } catch (InterruptedException ex) {
                // ex.printStackTrace();
                // }
                }
            }
        };
        memMonitor.setPriority(Thread.NORM_PRIORITY);
        memMonitor.start();
    } catch (Exception ex) {
        ex.printStackTrace();
        System.err.println(ex.getMessage());
    }
}
