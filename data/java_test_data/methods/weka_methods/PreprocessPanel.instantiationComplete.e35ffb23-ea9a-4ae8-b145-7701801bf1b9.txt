@Override
public void instantiationComplete() {
    // overridden here so that we know if we're operating within
    // a non-legacy UI, and can thus set up our send data to perspective
    // menu (if necessary)
    boolean sendToAll = getMainApplication().getApplicationSettings().getSetting(getPerspectiveID(), PreprocessDefaults.ALWAYS_SEND_INSTANCES_TO_ALL_KEY, PreprocessDefaults.ALWAYS_SEND_INSTANCES_TO_ALL, Environment.getSystemWide());
    // install a menu item to allow the user to choose to send to all or
    // send to a specific perspective
    final List<Perspective> perspectivesThatAcceptInstances = new ArrayList<Perspective>();
    List<Perspective> visiblePerspectives = getMainApplication().getPerspectiveManager().getVisiblePerspectives();
    for (Perspective p : visiblePerspectives) {
        if (p.acceptsInstances() && !p.getPerspectiveID().equals(getPerspectiveID())) {
            perspectivesThatAcceptInstances.add(p);
        }
    }
    if (perspectivesThatAcceptInstances.size() > 0) {
        JMenu fileMenu = m_menus.get(0);
        m_sendToPerspective = new JMenu();
        m_sendToPerspective.setText("Send to perspective");
        fileMenu.add(m_sendToPerspective);
        if (!sendToAll) {
            m_sendToPerspective.setEnabled(false);
        }
        JMenuItem sendToAllItem = new JMenuItem("All perspectives");
        sendToAllItem.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                for (Perspective p : perspectivesThatAcceptInstances) {
                    if (getInstances() != null && p.acceptsInstances()) {
                        p.setInstances(getInstances());
                        getMainApplication().getPerspectiveManager().setEnablePerspectiveTab(p.getPerspectiveID(), true);
                    }
                }
            }
        });
        m_sendToPerspective.add(sendToAllItem);
        for (final Perspective p : perspectivesThatAcceptInstances) {
            JMenuItem item = new JMenuItem(p.getPerspectiveTitle());
            m_sendToPerspective.add(item);
            item.addActionListener(new ActionListener() {

                @Override
                public void actionPerformed(ActionEvent e) {
                    if (getInstances() != null) {
                        p.setInstances(getInstances());
                        getMainApplication().getPerspectiveManager().setEnablePerspectiveTab(p.getPerspectiveID(), true);
                        getMainApplication().getPerspectiveManager().setActivePerspective(p.getPerspectiveID());
                    }
                }
            });
        }
    }
}
