public double[] computeAverageImpurityDecreasePerAttribute(double[] nodeCounts) throws WekaException {
    if (m_Classifiers == null) {
        throw new WekaException("Classifier has not been built yet!");
    }
    if (!getComputeAttributeImportance()) {
        throw new WekaException("Stats for attribute importance have not " + "been collected!");
    }
    double[] impurityDecreases = new double[m_data.numAttributes()];
    if (nodeCounts == null) {
        nodeCounts = new double[m_data.numAttributes()];
    }
    for (Classifier c : m_Classifiers) {
        double[][] forClassifier = ((RandomTree) c).getImpurityDecreases();
        for (int i = 0; i < m_data.numAttributes(); i++) {
            impurityDecreases[i] += forClassifier[i][0];
            nodeCounts[i] += forClassifier[i][1];
        }
    }
    for (int i = 0; i < m_data.numAttributes(); i++) {
        if (nodeCounts[i] > 0) {
            impurityDecreases[i] /= nodeCounts[i];
        }
    }
    return impurityDecreases;
}
