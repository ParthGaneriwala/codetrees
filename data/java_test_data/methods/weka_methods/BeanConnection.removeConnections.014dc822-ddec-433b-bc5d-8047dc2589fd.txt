public static void removeConnections(BeanInstance instance, Integer... tab) {
    int tabIndex = 0;
    if (tab.length > 0) {
        tabIndex = tab[0].intValue();
    }
    Vector<BeanConnection> connections = TABBED_CONNECTIONS.get(tabIndex);
    Vector<Object> instancesToRemoveFor = new Vector<Object>();
    if (instance.getBean() instanceof MetaBean) {
        instancesToRemoveFor = ((MetaBean) instance.getBean()).getBeansInSubFlow();
    } else {
        instancesToRemoveFor.add(instance);
    }
    Vector<BeanConnection> removeVector = new Vector<BeanConnection>();
    for (int j = 0; j < instancesToRemoveFor.size(); j++) {
        BeanInstance tempInstance = (BeanInstance) instancesToRemoveFor.elementAt(j);
        for (int i = 0; i < connections.size(); i++) {
            // In cases where this instance is the target, deregister it
            // as a listener for the source
            BeanConnection bc = connections.elementAt(i);
            BeanInstance tempTarget = bc.getTarget();
            BeanInstance tempSource = bc.getSource();
            EventSetDescriptor tempEsd = bc.getSourceEventSetDescriptor();
            if (tempInstance == tempTarget) {
                // try to deregister the target as a listener for the source
                try {
                    Method deregisterMethod = tempEsd.getRemoveListenerMethod();
                    Object targetBean = tempTarget.getBean();
                    Object[] args = new Object[1];
                    args[0] = targetBean;
                    deregisterMethod.invoke(tempSource.getBean(), args);
                    // System.err.println("Deregistering listener");
                    removeVector.addElement(bc);
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            } else if (tempInstance == tempSource) {
                removeVector.addElement(bc);
                if (tempTarget.getBean() instanceof BeanCommon) {
                    // tell the target that the source is going away, therefore
                    // this type of connection is as well
                    ((BeanCommon) tempTarget.getBean()).disconnectionNotification(tempEsd.getName(), tempSource.getBean());
                }
            }
        }
    }
    for (int i = 0; i < removeVector.size(); i++) {
        // System.err.println("removing connection");
        connections.removeElement(removeVector.elementAt(i));
    }
}
