@Override
public void paintComponent(Graphics g) {
    g.setColor(Color.WHITE);
    g.fillRect(0, 0, this.getWidth(), this.getHeight());
    g.setColor(Color.BLACK);
    if (m_as != null) {
        // If calculations have been done and histogram/barplot
        if (!m_doneCurrentAttribute && !m_threadRun) {
            calcGraph(this.getWidth(), this.getHeight());
        }
        if (m_threadRun == false && m_displayCurrentAttribute) {
            // calculation
            // thread is not
            // running
            int buttonHeight = 0;
            if (m_colorAttrib != null) {
                buttonHeight = m_colorAttrib.getHeight() + m_colorAttrib.getLocation().y;
            }
            // if current attribute is nominal then draw barplot.
            if (m_as.nominalWeights != null && (m_histBarClassCounts != null || m_histBarCounts != null)) {
                double heightRatio, intervalWidth;
                int x = 0, y = 0, barWidth;
                // subbars for each bar
                if ((m_classIndex >= 0) && (m_data.attribute(m_classIndex).isNominal())) {
                    intervalWidth = (this.getWidth() / (float) m_histBarClassCounts.length);
                    // 1 and padding of 1 pixel on each side of the bar.
                    if (intervalWidth > 5) {
                        barWidth = (int) Math.floor(intervalWidth * 0.8F);
                    } else {
                        barWidth = 1;
                    }
                    // initializing x to 10% of interval width or to 1 if 10% is <1.
                    // This
                    // is essentially the LHS padding of the 1st bar.
                    x = x + (int) ((Math.floor(intervalWidth * 0.1F)) < 1 ? 1 : (Math.floor(intervalWidth * 0.1F)));
                    // a "centered" barplot.
                    if (this.getWidth() - (m_histBarClassCounts.length * barWidth + (int) ((Math.floor(intervalWidth * 0.2F)) < 1 ? 1 : (Math.floor(intervalWidth * 0.2F))) * m_histBarClassCounts.length) > 2) {
                        // We take the width of all the bars and all the paddings (20%
                        // of interval width), and subtract it from the width of the panel
                        // to get the extra space that would be left after drawing. We
                        // divide that space by 2 to get its mid-point and add that to our
                        // x, thus making the whole bar plot drawn centered in our
                        // component.
                        x += (this.getWidth() - (m_histBarClassCounts.length * barWidth + (int) ((Math.floor(intervalWidth * 0.2F)) < 1 ? 1 : (Math.floor(intervalWidth * 0.2F))) * m_histBarClassCounts.length)) / 2;
                    }
                    // this holds the count of the bar and will be calculated by adding
                    // up the counts of individual subbars. It is displayed at the top
                    // of each bar.
                    double sum = 0;
                    for (SparseInstance m_histBarClassCount : m_histBarClassCounts) {
                        // calculating the proportion of the components height compared to
                        // the maxvalue in our attribute, also taking into account the
                        // height of font to display bars count and the height of the
                        // class
                        // ComboBox.
                        heightRatio = (this.getHeight() - (double) m_fm.getHeight() - buttonHeight) / m_maxValue;
                        y = this.getHeight();
                        if (m_histBarClassCount != null) {
                            for (int j = 0; j < m_histBarClassCount.numAttributes(); j++) {
                                sum = sum + m_histBarClassCount.value(j);
                                y = (int) (y - Math.round(m_histBarClassCount.value(j) * heightRatio));
                                // selecting the colour corresponding to the current class.
                                g.setColor(m_colorList.get(j));
                                g.fillRect(x, y, barWidth, (int) Math.round(m_histBarClassCount.value(j) * heightRatio));
                                g.setColor(Color.black);
                            }
                        }
                        // interval width. draw it 1px up to avoid touching the bar.
                        if (m_fm.stringWidth(Utils.doubleToString(sum, 1)) < intervalWidth) {
                            g.drawString(Utils.doubleToString(sum, 1), x, y - 1);
                        }
                        // advancing x to the next bar by adding bar width and padding
                        // of both the bars (i.e. RHS padding of the bar just drawn and
                        // LHS
                        // padding of the new bar).
                        x = x + barWidth + (int) ((Math.floor(intervalWidth * 0.2F)) < 1 ? 1 : (Math.floor(intervalWidth * 0.2F)));
                        // reseting sum for the next bar.
                        sum = 0;
                    }
                } else // else if class attribute is numeric or not set then draw black bars.
                {
                    intervalWidth = (this.getWidth() / (float) m_histBarCounts.length);
                    // corresponding to the current else above).
                    if (intervalWidth > 5) {
                        barWidth = (int) Math.floor(intervalWidth * 0.8F);
                    } else {
                        barWidth = 1;
                    }
                    // same as in the case of nominal class (see inside of if stmt
                    // corresponding to the current else above).
                    x = x + (int) ((Math.floor(intervalWidth * 0.1F)) < 1 ? 1 : (Math.floor(intervalWidth * 0.1F)));
                    // same as in the case of nominal class
                    if (this.getWidth() - (m_histBarCounts.length * barWidth + (int) ((Math.floor(intervalWidth * 0.2F)) < 1 ? 1 : (Math.floor(intervalWidth * 0.2F))) * m_histBarCounts.length) > 2) {
                        x += (this.getWidth() - (m_histBarCounts.length * barWidth + (int) ((Math.floor(intervalWidth * 0.2F)) < 1 ? 1 : (Math.floor(intervalWidth * 0.2F))) * m_histBarCounts.length)) / 2;
                    }
                    for (double m_histBarCount : m_histBarCounts) {
                        // calculating the proportion of the height of the component
                        // compared to the maxValue in our attribute.
                        heightRatio = (this.getHeight() - (float) m_fm.getHeight() - buttonHeight) / m_maxValue;
                        y = (int) (this.getHeight() - Math.round(m_histBarCount * heightRatio));
                        g.fillRect(x, y, barWidth, (int) Math.round(m_histBarCount * heightRatio));
                        // draw it 1px above to avoid touching the bar.
                        if (m_fm.stringWidth(Utils.doubleToString(m_histBarCount, 1)) < intervalWidth) {
                            g.drawString(Utils.doubleToString(m_histBarCount, 1), x, y - 1);
                        }
                        // Advance x to the next bar by adding bar-width and padding
                        // of the bars (RHS padding of current bar & LHS padding of next
                        // bar).
                        x = x + barWidth + (int) ((Math.floor(intervalWidth * 0.2F)) < 1 ? 1 : (Math.floor(intervalWidth * 0.2F)));
                    }
                }
            } else // if the current attribute is numeric then draw a histogram.
            if (m_as.numericStats != null && (m_histBarClassCounts != null || m_histBarCounts != null)) {
                double heightRatio;
                int x = 0, y = 0, barWidth;
                // subbars for the histogram bars
                if ((m_classIndex >= 0) && (m_data.attribute(m_classIndex).isNominal())) {
                    // There is a padding of 3px on each side of the histogram.
                    barWidth = ((this.getWidth() - 6) / m_histBarClassCounts.length) < 1 ? 1 : ((this.getWidth() - 6) / m_histBarClassCounts.length);
                    // initializing x to start at the start of the 1st bar after
                    // padding.
                    x = 3;
                    // histogram
                    if ((this.getWidth() - (x + m_histBarClassCounts.length * barWidth)) > 5) {
                        // We take the current value of x (histogram's RHS padding) and
                        // add
                        // the barWidths of all the bars to it to us the size of
                        // our histogram. We subtract that from the width of the panel
                        // giving us the extra space that would be left if the histogram
                        // is
                        // drawn and divide that by 2 to get the midpoint of that extra
                        // space. That space is then added to our x, hence making the
                        // histogram centered.
                        x += (this.getWidth() - (x + m_histBarClassCounts.length * barWidth)) / 2;
                    }
                    for (SparseInstance m_histBarClassCount : m_histBarClassCounts) {
                        if (m_histBarClassCount != null) {
                            // Calculating height ratio. Leave space of 19 for an axis line
                            // at
                            // the bottom
                            heightRatio = (this.getHeight() - (float) m_fm.getHeight() - buttonHeight - 19) / m_maxValue;
                            y = this.getHeight() - 19;
                            // This would hold the count of the bar (sum of sub-bars).
                            double sum = 0;
                            for (int j = 0; j < m_histBarClassCount.numValues(); j++) {
                                y = (int) (y - Math.round(m_histBarClassCount.valueSparse(j) * heightRatio));
                                // System.out.println("Filling x:"+x+" y:"+y+" width:"+barWidth+
                                // " height:"+
                                // (m_histBarClassCounts[i][j]*heightRatio));
                                // selecting the color corresponding to our class
                                g.setColor(m_colorList.get(m_histBarClassCount.index(j)));
                                // drawing the bar if its width is greater than 1
                                if (barWidth > 1) {
                                    g.fillRect(x, y, barWidth, (int) Math.round(m_histBarClassCount.valueSparse(j) * heightRatio));
                                } else if ((m_histBarClassCount.valueSparse(j) * heightRatio) > 0) {
                                    g.drawLine(x, y, x, (int) (y + Math.round(m_histBarClassCount.valueSparse(j) * heightRatio)));
                                }
                                g.setColor(Color.black);
                                sum = sum + m_histBarClassCount.valueSparse(j);
                            }
                            // Drawing bar count on the top of the bar if it is < barWidth
                            if (m_fm.stringWidth(" " + Utils.doubleToString(sum, 1)) < barWidth) {
                                g.drawString(" " + Utils.doubleToString(sum, 1), x, y - 1);
                            }
                            // Moving x to the next bar
                            x = x + barWidth;
                        }
                    }
                    // Now drawing the axis line at the bottom of the histogram
                    // initializing x again to the start of the plot
                    x = 3;
                    if ((this.getWidth() - (x + m_histBarClassCounts.length * barWidth)) > 5) {
                        x += (this.getWidth() - (x + m_histBarClassCounts.length * barWidth)) / 2;
                    }
                    g.drawLine(x, this.getHeight() - 17, (barWidth == 1) ? x + barWidth * m_histBarClassCounts.length - 1 : x + barWidth * m_histBarClassCounts.length, // axis
                    this.getHeight() - 17);
                    // line --
                    // see
                    // footnote
                    // 2.
                    // minimum
                    g.drawLine(x, this.getHeight() - 16, x, this.getHeight() - 12);
                    // line
                    g.drawString(Utils.doubleToString(m_as.numericStats.min, 2), x, // minimum value
                    this.getHeight() - 12 + m_fm.getHeight());
                    g.drawLine(x + (barWidth * m_histBarClassCounts.length) / 2, this.getHeight() - 16, x + (barWidth * m_histBarClassCounts.length) / 2, // median line
                    this.getHeight() - 12);
                    // Drawing median value. X position for drawing the value is: from
                    // start of the plot take the mid point and subtract from it half
                    // of the width of the value to draw.
                    g.drawString(Utils.doubleToString(m_as.numericStats.max / 2 + m_as.numericStats.min / 2, 2), x + (barWidth * m_histBarClassCounts.length) / 2 - m_fm.stringWidth(Utils.doubleToString(m_as.numericStats.max / 2 + m_as.numericStats.min / 2, 2)) / 2, this.getHeight() - 12 + // median value
                    m_fm.getHeight());
                    g.drawLine((barWidth == 1) ? x + barWidth * m_histBarClassCounts.length - 1 : x + barWidth * m_histBarClassCounts.length, this.getHeight() - 16, (barWidth == 1) ? x + barWidth * m_histBarClassCounts.length - 1 : x + barWidth * m_histBarClassCounts.length, // maximum line
                    this.getHeight() - 12);
                    g.drawString(Utils.doubleToString(m_as.numericStats.max, 2), (barWidth == 1) ? x + barWidth * m_histBarClassCounts.length - m_fm.stringWidth(Utils.doubleToString(m_as.numericStats.max, 2)) - 1 : x + barWidth * m_histBarClassCounts.length - m_fm.stringWidth(Utils.doubleToString(m_as.numericStats.max, 2)), // maximum
                    this.getHeight() - 12 + m_fm.getHeight());
                // value --
                // see 2.
                } else {
                    // if class attribute is numeric
                    // There is a padding of 3px on each side of the histogram.
                    barWidth = ((this.getWidth() - 6) / m_histBarCounts.length) < 1 ? 1 : ((this.getWidth() - 6) / m_histBarCounts.length);
                    // Same as above. Pls inside of the if stmt.
                    x = 3;
                    if ((this.getWidth() - (x + m_histBarCounts.length * barWidth)) > 5) {
                        x += (this.getWidth() - (x + m_histBarCounts.length * barWidth)) / 2;
                    }
                    // Same as above
                    for (double m_histBarCount : m_histBarCounts) {
                        // calculating the ration of the component's height compared to
                        // the maxValue in our current attribute. Leaving 19 pixels to
                        // draw the axis at the bottom of the histogram.
                        heightRatio = (this.getHeight() - (float) m_fm.getHeight() - buttonHeight - 19) / m_maxValue;
                        y = (int) (this.getHeight() - Math.round(m_histBarCount * heightRatio) - 19);
                        // same as in the if stmt above
                        if (barWidth > 1) {
                            g.drawRect(x, y, barWidth, (int) Math.round(m_histBarCount * heightRatio));
                        } else if ((m_histBarCount * heightRatio) > 0) {
                            g.drawLine(x, y, x, (int) (y + Math.round(m_histBarCount * heightRatio)));
                        }
                        if (m_fm.stringWidth(" " + Utils.doubleToString(m_histBarCount, 1)) < barWidth) {
                            g.drawString(" " + Utils.doubleToString(m_histBarCount, 1), x, y - 1);
                        }
                        x = x + barWidth;
                    }
                    // Now drawing the axis at the bottom of the histogram
                    x = 3;
                    if ((this.getWidth() - (x + m_histBarCounts.length * barWidth)) > 5) {
                        x += (this.getWidth() - (x + m_histBarCounts.length * barWidth)) / 2;
                    }
                    // This is exact the same as in the if stmt above. See the inside of
                    // the stmt for details
                    g.drawLine(x, this.getHeight() - 17, (barWidth == 1) ? x + barWidth * m_histBarCounts.length - 1 : x + barWidth * m_histBarCounts.length, // axis line
                    this.getHeight() - 17);
                    // minimum
                    g.drawLine(x, this.getHeight() - 16, x, this.getHeight() - 12);
                    // line
                    g.drawString(Utils.doubleToString(m_as.numericStats.min, 2), x, // minimum value
                    this.getHeight() - 12 + m_fm.getHeight());
                    g.drawLine(x + (barWidth * m_histBarCounts.length) / 2, this.getHeight() - 16, x + (barWidth * m_histBarCounts.length) / 2, // median line
                    this.getHeight() - 12);
                    g.drawString(Utils.doubleToString(m_as.numericStats.max / 2 + m_as.numericStats.min / 2, 2), x + (barWidth * m_histBarCounts.length) / 2 - m_fm.stringWidth(Utils.doubleToString(m_as.numericStats.max / 2 + m_as.numericStats.min / 2, 2)) / 2, this.getHeight() - 12 + // median value
                    m_fm.getHeight());
                    g.drawLine((barWidth == 1) ? x + barWidth * m_histBarCounts.length - 1 : x + barWidth * m_histBarCounts.length, this.getHeight() - 16, (barWidth == 1) ? x + barWidth * m_histBarCounts.length - 1 : x + barWidth * m_histBarCounts.length, // maximum
                    this.getHeight() - 12);
                    // line
                    g.drawString(Utils.doubleToString(m_as.numericStats.max, 2), (barWidth == 1) ? x + barWidth * m_histBarCounts.length - m_fm.stringWidth(Utils.doubleToString(m_as.numericStats.max, 2)) - 1 : x + barWidth * m_histBarCounts.length - m_fm.stringWidth(Utils.doubleToString(m_as.numericStats.max, 2)), // maximum
                    this.getHeight() - 12 + m_fm.getHeight());
                // value
                }
            // System.out.println("barWidth:"+barWidth+
            // " histBarCount:"+m_histBarCounts.length);
            } else {
                g.clearRect(0, 0, this.getWidth(), this.getHeight());
                g.drawString("Attribute is neither numeric nor nominal.", this.getWidth() / 2 - m_fm.stringWidth("Attribute is neither numeric nor nominal.") / 2, this.getHeight() / 2 - m_fm.getHeight() / 2);
            }
        } else // <--end if of calculation thread
        if (m_displayCurrentAttribute) {
            // if still calculation thread is
            // running plot
            g.clearRect(0, 0, this.getWidth(), this.getHeight());
            g.drawString("Calculating. Please Wait...", this.getWidth() / 2 - m_fm.stringWidth("Calculating. Please Wait...") / 2, this.getHeight() / 2 - m_fm.getHeight() / 2);
        } else if (!m_displayCurrentAttribute) {
            g.clearRect(0, 0, this.getWidth(), this.getHeight());
            g.drawString("Too many values to display.", this.getWidth() / 2 - m_fm.stringWidth("Too many values to display.") / 2, this.getHeight() / 2 - m_fm.getHeight() / 2);
        }
    }
// <--end if(m_as==null) this means
}
