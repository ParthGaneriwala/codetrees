protected Instances resampleAttributes(Instances data, boolean original, Random random) throws Exception {
    // Need to sample attributes so that weights are represented by sample
    int nAtt = (data.classIndex() >= 0) ? data.numAttributes() - 1 : data.numAttributes();
    int index = 0;
    double[] attributeWeights = new double[nAtt];
    for (int i = 0; i < data.numAttributes(); i++) {
        if (i != data.classIndex()) {
            attributeWeights[index++] = data.attribute(i).weight();
        }
    }
    int[] frequencies = Utils.takeSample(attributeWeights, random);
    // Make list of attribute indices based on frequencies in sample
    ArrayList<Integer> al = new ArrayList<Integer>();
    index = 0;
    for (int j = 0; j < data.numAttributes(); j++) {
        if (j == data.classIndex()) {
            al.add(j);
        } else {
            for (int i = 0; i < frequencies[index]; i++) {
                al.add(j);
            }
            index++;
        }
    }
    // Filter data
    if (original) {
        m_ReorderOriginal = new Reorder();
        m_ReorderOriginal.setAttributeIndicesArray(al.stream().mapToInt(j -> j).toArray());
        m_ReorderOriginal.setAllAttributeWeightsToOne(true);
        m_ReorderOriginal.setInputFormat(data);
        return Filter.useFilter(data, m_ReorderOriginal);
    } else {
        m_ReorderFiltered = new Reorder();
        m_ReorderFiltered.setAttributeIndicesArray(al.stream().mapToInt(j -> j).toArray());
        m_ReorderFiltered.setAllAttributeWeightsToOne(true);
        m_ReorderFiltered.setInputFormat(data);
        return Filter.useFilter(data, m_ReorderFiltered);
    }
}
