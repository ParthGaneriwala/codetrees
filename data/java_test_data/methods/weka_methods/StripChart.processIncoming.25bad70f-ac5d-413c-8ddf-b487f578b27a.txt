@SuppressWarnings("unchecked")
@Override
public synchronized void processIncoming(Data data) throws WekaException {
    if (isStopRequested()) {
        return;
    }
    if (getStepManager().isStreamFinished(data)) {
        // done
        // notify downstream steps of end of stream
        Data d = new Data(data.getConnectionName());
        getStepManager().throughputFinished(d);
        return;
    }
    getStepManager().throughputUpdateStart();
    if (m_plotListeners.size() > 0) {
        if (getStepManager().numIncomingConnectionsOfType(StepManager.CON_INSTANCE) > 0) {
            Instance instance = (Instance) data.getPayloadElement(StepManager.CON_INSTANCE);
            if (m_reset) {
                m_reset = false;
                List<String> legendEntries = new ArrayList<String>();
                int i;
                for (i = 0; i < instance.dataset().numAttributes() && i < 10; i++) {
                    legendEntries.add(instance.dataset().attribute(i).name());
                }
                m_instanceWidth = i;
                for (PlotNotificationListener l : m_plotListeners) {
                    l.setLegend(legendEntries, 0.0, 1.0);
                }
            }
            double[] dataPoint = new double[m_instanceWidth];
            for (int i = 0; i < dataPoint.length; i++) {
                if (!instance.isMissing(i)) {
                    dataPoint[i] = instance.value(i);
                }
            }
            for (PlotNotificationListener l : m_plotListeners) {
                l.acceptDataPoint(dataPoint);
            }
        } else if (getStepManager().numIncomingConnectionsOfType(StepManager.CON_CHART) > 0) {
            if (m_reset) {
                m_reset = false;
                double min = data.getPayloadElement(StepManager.CON_AUX_DATA_CHART_MIN, 0.0);
                double max = data.getPayloadElement(StepManager.CON_AUX_DATA_CHART_MAX, 1.0);
                List<String> legend = (List<String>) data.getPayloadElement(StepManager.CON_AUX_DATA_CHART_LEGEND);
                for (PlotNotificationListener l : m_plotListeners) {
                    l.setLegend(legend, min, max);
                }
            }
            double[] dataPoint = (double[]) data.getPayloadElement(StepManager.CON_AUX_DATA_CHART_DATA_POINT);
            for (PlotNotificationListener l : m_plotListeners) {
                l.acceptDataPoint(dataPoint);
            }
        }
    }
    getStepManager().throughputUpdateEnd();
}
