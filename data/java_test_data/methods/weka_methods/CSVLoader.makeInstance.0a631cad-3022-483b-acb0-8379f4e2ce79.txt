protected Instance makeInstance() throws IOException {
    if (m_current == null) {
        return null;
    }
    double[] vals = new double[m_structure.numAttributes()];
    for (int i = 0; i < m_structure.numAttributes(); i++) {
        Object val = m_current.get(i);
        if (val.toString().equals("?")) {
            vals[i] = Utils.missingValue();
        } else if (m_structure.attribute(i).isString()) {
            vals[i] = 0;
            m_structure.attribute(i).setStringValue(Utils.unquote(val.toString()));
        } else if (m_structure.attribute(i).isDate()) {
            String format = m_structure.attribute(i).getDateFormat();
            SimpleDateFormat sdf = new SimpleDateFormat(format);
            String dateVal = Utils.unquote(val.toString());
            try {
                vals[i] = sdf.parse(dateVal).getTime();
            } catch (ParseException e) {
                throw new IOException("Unable to parse date value " + dateVal + " using date format " + format + " for date attribute " + m_structure.attribute(i) + " (line: " + m_rowCount + ")");
            }
        } else if (m_structure.attribute(i).isNumeric()) {
            try {
                Double v = Double.parseDouble(val.toString());
                vals[i] = v.doubleValue();
            } catch (NumberFormatException ex) {
                throw new IOException("Was expecting a number for attribute " + m_structure.attribute(i).name() + " but read " + val.toString() + " instead. (line: " + m_rowCount + ")");
            }
        } else {
            // nominal
            double index = m_structure.attribute(i).indexOfValue(Utils.unquote(val.toString()));
            if (index < 0) {
                throw new IOException("Read unknown nominal value " + val.toString() + "for attribute " + m_structure.attribute(i).name() + " (line: " + m_rowCount + "). Try increasing the size of the memory buffer" + " (-B option) or explicitly specify legal nominal values with " + "the -L option.");
            }
            vals[i] = index;
        }
    }
    DenseInstance inst = new DenseInstance(1.0, vals);
    inst.setDataset(m_structure);
    return inst;
}
