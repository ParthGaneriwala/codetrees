protected Instance getInstanceFull(boolean flag) throws IOException {
    double[] instance = new double[m_Data.numAttributes()];
    int index;
    // Get values for all attributes.
    for (int i = 0; i < m_Data.numAttributes(); i++) {
        // Get next token
        if (i > 0) {
            getNextToken();
        }
        // Check if value is missing.
        if (m_Tokenizer.ttype == '?') {
            instance[i] = Utils.missingValue();
        } else {
            // Check if token is valid.
            if (m_Tokenizer.ttype != StreamTokenizer.TT_WORD) {
                errorMessage("not a valid value");
            }
            switch(m_Data.attribute(i).type()) {
                case Attribute.NOMINAL:
                    // Check if value appears in header.
                    index = m_Data.attribute(i).indexOfValue(m_Tokenizer.sval);
                    if (index == -1) {
                        errorMessage("nominal value not declared in header");
                    }
                    instance[i] = index;
                    break;
                case Attribute.NUMERIC:
                    // Check if value is really a number.
                    try {
                        instance[i] = Double.valueOf(m_Tokenizer.sval).doubleValue();
                    } catch (NumberFormatException e) {
                        errorMessage("number expected");
                    }
                    break;
                case Attribute.STRING:
                    if (m_batchMode || m_retainStringValues) {
                        instance[i] = m_Data.attribute(i).addStringValue(m_Tokenizer.sval);
                    } else {
                        instance[i] = 0;
                        m_Data.attribute(i).setStringValue(m_Tokenizer.sval);
                    }
                    break;
                case Attribute.DATE:
                    try {
                        instance[i] = m_Data.attribute(i).parseDate(m_Tokenizer.sval);
                    } catch (ParseException e) {
                        errorMessage("unparseable date: " + m_Tokenizer.sval);
                    }
                    break;
                case Attribute.RELATIONAL:
                    try {
                        ArffReader arff = new ArffReader(new StringReader(m_Tokenizer.sval), m_Data.attribute(i).relation(), 0);
                        Instances data = arff.getData();
                        instance[i] = m_Data.attribute(i).addRelation(data);
                    } catch (Exception e) {
                        throw new IOException(e.toString() + " of line " + getLineNo());
                    }
                    break;
                default:
                    errorMessage("unknown attribute type in column " + i);
            }
        }
    }
    double weight = 1.0;
    if (flag) {
        // check for an instance weight
        weight = getInstanceWeight();
        if (!Double.isNaN(weight)) {
            getLastToken(true);
        } else {
            weight = 1.0;
        }
    }
    // Add instance to dataset
    Instance inst = new DenseInstance(weight, instance);
    inst.setDataset(m_Data);
    return inst;
}
