// AddArcMakesCycle
protected boolean reverseArcMakesSense(BayesNet bayesNet, Instances instances, int iAttributeHead, int iAttributeTail) {
    if (iAttributeHead == iAttributeTail) {
        return false;
    }
    // sanity check: arc should be in parent set already
    if (!isArc(bayesNet, iAttributeHead, iAttributeTail)) {
        return false;
    }
    // sanity check: arc should not introduce a cycle
    int nNodes = instances.numAttributes();
    boolean[] bDone = new boolean[nNodes];
    for (int iNode = 0; iNode < nNodes; iNode++) {
        bDone[iNode] = false;
    }
    // check for cycles
    bayesNet.getParentSet(iAttributeTail).addParent(iAttributeHead, instances);
    for (int iNode = 0; iNode < nNodes; iNode++) {
        // find a node for which all parents are 'done'
        boolean bFound = false;
        for (int iNode2 = 0; !bFound && iNode2 < nNodes; iNode2++) {
            if (!bDone[iNode2]) {
                ParentSet parentSet = bayesNet.getParentSet(iNode2);
                boolean bHasNoParents = true;
                for (int iParent = 0; iParent < parentSet.getNrOfParents(); iParent++) {
                    if (!bDone[parentSet.getParent(iParent)]) {
                        // to be reversed
                        if (!(iNode2 == iAttributeHead && parentSet.getParent(iParent) == iAttributeTail)) {
                            bHasNoParents = false;
                        }
                    }
                }
                if (bHasNoParents) {
                    bDone[iNode2] = true;
                    bFound = true;
                }
            }
        }
        if (!bFound) {
            bayesNet.getParentSet(iAttributeTail).deleteLastParent(instances);
            return false;
        }
    }
    bayesNet.getParentSet(iAttributeTail).deleteLastParent(instances);
    return true;
}
