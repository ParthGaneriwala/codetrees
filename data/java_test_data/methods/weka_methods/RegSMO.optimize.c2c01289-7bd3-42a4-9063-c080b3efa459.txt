public void optimize() throws Exception {
    // main routine:
    // initialize threshold to zero
    // numChanged = 0
    // examineAll = 1
    // SigFig = -100
    // LoopCounter = 0
    int numChanged = 0;
    int examineAll = 1;
    int sigFig = -100;
    int loopCounter = 0;
    // while ((numChanged > 0 | examineAll) | (SigFig < 3))
    while ((numChanged > 0 || (examineAll > 0)) | (sigFig < 3)) {
        // LoopCounter++
        // numChanged = 0;
        loopCounter++;
        numChanged = 0;
        // if (examineAll)
        // loop I over all training examples
        // numChanged += examineExample(I)
        // else
        // loop I over examples where alpha is not 0 & not C
        // numChanged += examineExample(I)
        // endif
        int numSamples = 0;
        if (examineAll > 0) {
            for (int i = 0; i < m_nInstances; i++) {
                numChanged += examineExample(i);
            }
        } else {
            for (int i = 0; i < m_target.length; i++) {
                if ((m_alpha[i] > 0 && m_alpha[i] < m_C * m_data.instance(i).weight()) || (m_alphaStar[i] > 0 && m_alphaStar[i] < m_C * m_data.instance(i).weight())) {
                    numSamples++;
                    numChanged += examineExample(i);
                }
            }
        }
        // 
        // if (mod(LoopCounter, 2) == 0)
        // MinimumNumChanged = max(1, 0.1*NumSamples)
        // else
        // MinimumNumChanged = 1
        // endif
        int minimumNumChanged = 1;
        if (loopCounter % 2 == 0) {
            minimumNumChanged = (int) Math.max(1, 0.1 * numSamples);
        }
        // endif
        if (examineAll == 1) {
            examineAll = 0;
        } else if (numChanged < minimumNumChanged) {
            examineAll = 1;
        }
        // endwhile
        if (loopCounter == 2500) {
            break;
        }
    }
// endmain
}
