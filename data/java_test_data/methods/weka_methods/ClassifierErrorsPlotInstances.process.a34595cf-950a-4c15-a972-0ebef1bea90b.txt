public void process(Instances batch, double[][] predictions, Evaluation eval) {
    try {
        for (int j = 0; j < batch.numInstances(); j++) {
            Instance toPredict = batch.instance(j);
            double[] preds = predictions[j];
            double probActual = 0;
            double probNext = 0;
            double pred = 0;
            if (batch.classAttribute().isNominal()) {
                pred = (Utils.sum(preds) == 0) ? Utils.missingValue() : Utils.maxIndex(preds);
                probActual = (Utils.sum(preds) == 0) ? Utils.missingValue() : (!Utils.isMissingValue(toPredict.classIndex()) ? preds[(int) toPredict.classValue()] : preds[Utils.maxIndex(preds)]);
                for (int i = 0; i < toPredict.classAttribute().numValues(); i++) {
                    if (i != (int) toPredict.classValue() && preds[i] > probNext) {
                        probNext = preds[i];
                    }
                }
            } else {
                pred = preds[0];
            }
            eval.evaluationForSingleInstance(preds, toPredict, true);
            if (!m_SaveForVisualization) {
                continue;
            }
            if (m_PlotInstances != null) {
                double[] values = new double[m_PlotInstances.numAttributes()];
                boolean isNominal = toPredict.classAttribute().isNominal();
                for (int i = 0; i < m_PlotInstances.numAttributes(); i++) {
                    if (i < toPredict.classIndex()) {
                        values[i] = toPredict.value(i);
                    } else if (i == toPredict.classIndex()) {
                        if (isNominal) {
                            values[i] = probActual - probNext;
                            values[i + 1] = pred;
                            values[i + 2] = toPredict.value(i);
                            i += 2;
                        } else {
                            values[i] = pred;
                            values[i + 1] = toPredict.value(i);
                            i++;
                        }
                    } else {
                        if (isNominal) {
                            values[i] = toPredict.value(i - 2);
                        } else {
                            values[i] = toPredict.value(i - 1);
                        }
                    }
                }
                m_PlotInstances.add(new DenseInstance(1.0, values));
                if (toPredict.classAttribute().isNominal()) {
                    if (toPredict.isMissing(toPredict.classIndex()) || Utils.isMissingValue(pred)) {
                        m_PlotShapes.add(new Integer(Plot2D.MISSING_SHAPE));
                    } else if (pred != toPredict.classValue()) {
                        // set to default error point shape
                        m_PlotShapes.add(new Integer(Plot2D.ERROR_SHAPE));
                    } else {
                        // otherwise set to constant (automatically assigned) point shape
                        m_PlotShapes.add(new Integer(Plot2D.CONST_AUTOMATIC_SHAPE));
                    }
                    if (m_pointSizeProportionalToMargin) {
                        // margin
                        m_PlotSizes.add(new Double(probActual - probNext));
                    } else {
                        int sizeAdj = 0;
                        if (pred != toPredict.classValue()) {
                            sizeAdj = 1;
                        }
                        m_PlotSizes.add(new Integer(Plot2D.DEFAULT_SHAPE_SIZE + sizeAdj));
                    }
                } else {
                    // store the error (to be converted to a point size later)
                    Double errd = null;
                    if (!toPredict.isMissing(toPredict.classIndex()) && !Utils.isMissingValue(pred)) {
                        errd = new Double(pred - toPredict.classValue());
                        m_PlotShapes.add(new Integer(Plot2D.CONST_AUTOMATIC_SHAPE));
                    } else {
                        // missing shape if actual class not present or prediction is
                        // missing
                        m_PlotShapes.add(new Integer(Plot2D.MISSING_SHAPE));
                    }
                    m_PlotSizes.add(errd);
                }
            }
        }
    } catch (Exception ex) {
        ex.printStackTrace();
    }
}
