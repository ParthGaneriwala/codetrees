protected void copySettingsNonWrapper(Object legacy, Step current) throws WekaException {
    if (current instanceof Note && legacy instanceof weka.gui.beans.Note) {
        ((Note) current).setNoteText(((weka.gui.beans.Note) legacy).getNoteText());
    } else if (current instanceof TrainTestSplitMaker && legacy instanceof weka.gui.beans.TrainTestSplitMaker) {
        ((TrainTestSplitMaker) current).setSeed("" + ((weka.gui.beans.TrainTestSplitMaker) legacy).getSeed());
        ((TrainTestSplitMaker) current).setTrainPercent("" + ((weka.gui.beans.TrainTestSplitMaker) legacy).getTrainPercent());
    } else if (current instanceof CrossValidationFoldMaker && legacy instanceof weka.gui.beans.CrossValidationFoldMaker) {
        ((CrossValidationFoldMaker) current).setSeed("" + ((weka.gui.beans.CrossValidationFoldMaker) legacy).getSeed());
        ((CrossValidationFoldMaker) current).setNumFolds("" + ((weka.gui.beans.CrossValidationFoldMaker) legacy).getFolds());
        ((CrossValidationFoldMaker) current).setPreserveOrder(((weka.gui.beans.CrossValidationFoldMaker) legacy).getPreserveOrder());
    } else if (current instanceof ClassAssigner && legacy instanceof weka.gui.beans.ClassAssigner) {
        ((ClassAssigner) current).setClassColumn(((weka.gui.beans.ClassAssigner) legacy).getClassColumn());
    } else if (current instanceof ClassValuePicker && legacy instanceof weka.gui.beans.ClassValuePicker) {
        ((ClassValuePicker) current).setClassValue(((weka.gui.beans.ClassValuePicker) legacy).getClassValue());
    } else if (current instanceof ClassifierPerformanceEvaluator && legacy instanceof weka.gui.beans.ClassifierPerformanceEvaluator) {
        ((ClassifierPerformanceEvaluator) current).setEvaluationMetricsToOutput(((weka.gui.beans.ClassifierPerformanceEvaluator) legacy).getEvaluationMetricsToOutput());
        ((ClassifierPerformanceEvaluator) current).setErrorPlotPointSizeProportionalToMargin(((weka.gui.beans.ClassifierPerformanceEvaluator) legacy).getErrorPlotPointSizeProportionalToMargin());
    } else if (current instanceof IncrementalClassifierEvaluator && legacy instanceof weka.gui.beans.IncrementalClassifierEvaluator) {
        ((IncrementalClassifierEvaluator) current).setChartingEvalWindowSize(((weka.gui.beans.IncrementalClassifierEvaluator) legacy).getChartingEvalWindowSize());
        ((IncrementalClassifierEvaluator) current).setOutputPerClassInfoRetrievalStats(((weka.gui.beans.IncrementalClassifierEvaluator) legacy).getOutputPerClassInfoRetrievalStats());
        ((IncrementalClassifierEvaluator) current).setStatusFrequency(((weka.gui.beans.IncrementalClassifierEvaluator) legacy).getStatusFrequency());
    } else if (current instanceof PredictionAppender && legacy instanceof weka.gui.beans.PredictionAppender) {
        ((PredictionAppender) current).setAppendProbabilities(((weka.gui.beans.PredictionAppender) legacy).getAppendPredictedProbabilities());
    } else if (current instanceof SerializedModelSaver && legacy instanceof weka.gui.beans.SerializedModelSaver) {
        ((SerializedModelSaver) current).setFilenamePrefix(((weka.gui.beans.SerializedModelSaver) legacy).getPrefix());
        ((SerializedModelSaver) current).setIncludeRelationNameInFilename(((weka.gui.beans.SerializedModelSaver) legacy).getIncludeRelationName());
        ((SerializedModelSaver) current).setOutputDirectory(((weka.gui.beans.SerializedModelSaver) legacy).getDirectory());
        ((SerializedModelSaver) current).setIncrementalSaveSchedule(((weka.gui.beans.SerializedModelSaver) legacy).getIncrementalSaveSchedule());
    } else if (current instanceof ImageSaver && legacy instanceof weka.gui.beans.ImageSaver) {
        ((ImageSaver) current).setFile(new File(((weka.gui.beans.ImageSaver) legacy).getFilename()));
    } else if (current instanceof TextSaver && legacy instanceof weka.gui.beans.TextSaver) {
        ((TextSaver) current).setFile(new File(((weka.gui.beans.TextSaver) legacy).getFilename()));
        ((TextSaver) current).setAppend(((weka.gui.beans.TextSaver) legacy).getAppend());
    } else if (current instanceof StripChart && legacy instanceof weka.gui.beans.StripChart) {
        ((StripChart) current).setRefreshFreq(((weka.gui.beans.StripChart) legacy).getRefreshFreq());
        ((StripChart) current).setRefreshWidth(((weka.gui.beans.StripChart) legacy).getRefreshWidth());
        ((StripChart) current).setXLabelFreq(((weka.gui.beans.StripChart) legacy).getXLabelFreq());
    } else if (current instanceof ModelPerformanceChart && legacy instanceof weka.gui.beans.ModelPerformanceChart) {
        ((ModelPerformanceChart) current).setOffscreenAdditionalOpts(((weka.gui.beans.ModelPerformanceChart) legacy).getOffscreenAdditionalOpts());
        ((ModelPerformanceChart) current).setOffscreenRendererName(((weka.gui.beans.ModelPerformanceChart) legacy).getOffscreenRendererName());
        ((ModelPerformanceChart) current).setOffscreenHeight(((weka.gui.beans.ModelPerformanceChart) legacy).getOffscreenHeight());
        ((ModelPerformanceChart) current).setOffscreenWidth(((weka.gui.beans.ModelPerformanceChart) legacy).getOffscreenWidth());
        ((ModelPerformanceChart) current).setOffscreenXAxis(((weka.gui.beans.ModelPerformanceChart) legacy).getOffscreenXAxis());
        ((ModelPerformanceChart) current).setOffscreenYAxis(((weka.gui.beans.ModelPerformanceChart) legacy).getOffscreenYAxis());
    } else if (current instanceof DataVisualizer && legacy instanceof weka.gui.beans.DataVisualizer) {
        ((DataVisualizer) current).setOffscreenHeight(((weka.gui.beans.DataVisualizer) legacy).getOffscreenHeight());
        ((DataVisualizer) current).setOffscreenWidth(((weka.gui.beans.DataVisualizer) legacy).getOffscreenWidth());
        ((DataVisualizer) current).setOffscreenXAxis(((weka.gui.beans.DataVisualizer) legacy).getOffscreenXAxis());
        ((DataVisualizer) current).setOffscreenRendererName(((weka.gui.beans.DataVisualizer) legacy).getOffscreenRendererName());
        ((DataVisualizer) current).setOffscreenAdditionalOpts(((weka.gui.beans.DataVisualizer) legacy).getOffscreenAdditionalOpts());
    } else if (current instanceof FlowByExpression && legacy instanceof weka.gui.beans.FlowByExpression) {
        ((FlowByExpression) current).setExpressionString(((weka.gui.beans.FlowByExpression) legacy).getExpressionString());
        ((FlowByExpression) current).setTrueStepName(((weka.gui.beans.FlowByExpression) legacy).getTrueStepName());
        ((FlowByExpression) current).setFalseStepName(((weka.gui.beans.FlowByExpression) legacy).getFalseStepName());
    } else if (current instanceof Join && legacy instanceof weka.gui.beans.Join) {
        ((Join) current).setKeySpec(((weka.gui.beans.Join) legacy).getKeySpec());
    } else if (current instanceof Sorter && legacy instanceof weka.gui.beans.Sorter) {
        ((Sorter) current).setSortDetails(((weka.gui.beans.Sorter) legacy).getSortDetails());
        ((Sorter) current).setBufferSize(((weka.gui.beans.Sorter) legacy).getBufferSize());
        ((Sorter) current).setTempDirectory(new File(((weka.gui.beans.Sorter) legacy).getTempDirectory()));
    } else if (current instanceof SubstringReplacer && legacy instanceof weka.gui.beans.SubstringReplacer) {
        ((SubstringReplacer) current).setMatchReplaceDetails(((weka.gui.beans.SubstringReplacer) legacy).getMatchReplaceDetails());
    } else if (current instanceof SubstringLabeler && legacy instanceof weka.gui.beans.SubstringLabeler) {
        ((SubstringLabeler) current).setMatchDetails(((weka.gui.beans.SubstringLabeler) legacy).getMatchDetails());
        ((SubstringLabeler) current).setConsumeNonMatching(((weka.gui.beans.SubstringLabeler) legacy).getConsumeNonMatching());
        ((SubstringLabeler) current).setMatchAttributeName(((weka.gui.beans.SubstringLabeler) legacy).getMatchAttributeName());
        ((SubstringLabeler) current).setNominalBinary(((weka.gui.beans.SubstringLabeler) legacy).getNominalBinary());
    } else {
        // configure plugin steps
        configurePluginStep(legacy, current);
    }
}
