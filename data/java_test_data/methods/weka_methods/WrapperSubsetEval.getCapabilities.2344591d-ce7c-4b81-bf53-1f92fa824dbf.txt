@Override
public Capabilities getCapabilities() {
    Capabilities result;
    if (getClassifier() == null) {
        result = super.getCapabilities();
        result.disableAll();
    } else {
        result = getClassifier().getCapabilities();
    }
    // set dependencies
    for (Capability cap : Capability.values()) {
        result.enableDependency(cap);
    }
    // adjustment for class based on selected evaluation metric
    result.disable(Capability.NUMERIC_CLASS);
    result.disable(Capability.DATE_CLASS);
    boolean pluginMetricNominalClass = false;
    if (m_evaluationMeasure.getID() >= EVAL_PLUGIN) {
        String metricName = ((PluginTag) m_evaluationMeasure).getMetricName();
        for (AbstractEvaluationMetric m : PLUGIN_METRICS) {
            if (m.getMetricName().equals(metricName)) {
                pluginMetricNominalClass = m.appliesToNominalClass();
                break;
            }
        }
    }
    if (m_evaluationMeasure.getID() != EVAL_ACCURACY && m_evaluationMeasure.getID() != EVAL_FMEASURE && m_evaluationMeasure.getID() != EVAL_AUC && m_evaluationMeasure.getID() != EVAL_AUPRC && !pluginMetricNominalClass) {
        result.enable(Capability.NUMERIC_CLASS);
        result.enable(Capability.DATE_CLASS);
    }
    result.setMinimumNumberInstances(getFolds());
    return result;
}
