protected double kernelLP(int n, char[] s, int endIndexS, char[] t, int endIndexT, int remainingMatchLength) {
    // see code docs in kernel()
    if (Math.min(endIndexS + 1, endIndexT + 1) < n) {
        return getReturnValue(n);
    }
    // and this check never stops the recursion
    if (remainingMatchLength == 0) {
        return getReturnValue(n);
    }
    double result = 0;
    // see code docs in kernel()
    for (int iS = endIndexS; iS > n - 2; iS--) {
        double buf = 0;
        char x = s[iS];
        for (int j = 0; j <= endIndexT; j++) {
            if (t[j] == x) {
                // both t[j] and x are considered part of the subsequence match, hence
                // subtract 2 from the remainingMatchLength
                buf += kernelHelperLP(n - 1, s, iS - 1, t, j - 1, remainingMatchLength - 2);
            }
        }
        result += buf * m_powersOflambda[2];
    }
    return result;
}
