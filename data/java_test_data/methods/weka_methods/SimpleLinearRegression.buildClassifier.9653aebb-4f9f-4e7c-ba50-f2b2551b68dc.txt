public void buildClassifier(Instances insts) {
    // Compute relevant statistics
    double[] means = computeMeans(insts);
    double[] slopes = new double[insts.numAttributes()];
    double[] sumWeightedDiffsSquared = new double[insts.numAttributes()];
    int classIndex = insts.classIndex();
    // For all instances
    for (int j = 0; j < insts.numInstances(); j++) {
        Instance inst = insts.instance(j);
        double yDiff = inst.value(classIndex) - means[classIndex];
        double weightedYDiff = inst.weight() * yDiff;
        // For all attributes
        for (int i = 0; i < insts.numAttributes(); i++) {
            double diff = inst.value(i) - means[i];
            double weightedDiff = inst.weight() * diff;
            // Doesn't matter if we compute this for the class
            slopes[i] += weightedYDiff * diff;
            // We need this for the class as well
            sumWeightedDiffsSquared[i] += weightedDiff * diff;
        }
    }
    // Pick the best attribute
    double minSSE = Double.MAX_VALUE;
    m_attributeIndex = -1;
    for (int i = 0; i < insts.numAttributes(); i++) {
        // Should we skip this attribute?
        if ((i == classIndex) || (sumWeightedDiffsSquared[i] == 0)) {
            continue;
        }
        // Compute final slope and intercept
        double numerator = slopes[i];
        slopes[i] /= sumWeightedDiffsSquared[i];
        double intercept = means[classIndex] - slopes[i] * means[i];
        // Compute sum of squared errors
        double sse = sumWeightedDiffsSquared[classIndex] - slopes[i] * numerator;
        // Check whether this is the best attribute
        if (sse < minSSE) {
            minSSE = sse;
            m_attributeIndex = i;
            m_slope = slopes[i];
            m_intercept = intercept;
        }
    }
}
