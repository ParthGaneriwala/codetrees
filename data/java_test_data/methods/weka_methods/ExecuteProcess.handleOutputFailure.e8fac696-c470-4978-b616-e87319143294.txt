protected void handleOutputFailure(int returnCode, Map<String, String> varsToSet, Map<String, Map<String, String>> propsToSet, Map<String, LinkedHashSet<Data>> results, String command) throws WekaException {
    if (getStepManager().numOutgoingConnectionsOfType(StepManager.CON_JOB_FAILURE) > 0) {
        Data failure = new Data(StepManager.CON_JOB_FAILURE, m_stdErrBuffer.length() > 0 ? m_stdErrBuffer.toString() : "Process did not complete successfully - return code " + returnCode);
        failure.setPayloadElement(StepManager.CON_AUX_DATA_IS_INCREMENTAL, true);
        addAuxToData(failure, varsToSet, propsToSet, results);
        getStepManager().outputData(failure);
    }
    if (getStepManager().numOutgoingConnectionsOfType(StepManager.CON_INSTANCE) > 0) {
        m_instanceOutHeader.attribute(1).setStringValue(m_stdOutbuffer.length() > 0 ? m_stdOutbuffer.toString() : "");
        m_instanceOutHeader.attribute(2).setStringValue(m_stdErrBuffer.length() > 0 ? m_stdErrBuffer.toString() : "Process did " + "not complete successfully");
        double[] vals = new double[3];
        // failure code
        vals[0] = returnCode;
        Instance outputInst = new DenseInstance(1.0, vals);
        outputInst.setDataset(m_instanceOutHeader);
        Data instOut = new Data(StepManager.CON_INSTANCE, outputInst);
        getStepManager().outputData(instOut);
    }
    if (getStepManager().numOutgoingConnectionsOfType(StepManager.CON_TEXT) > 0) {
        Data textOut = new Data(StepManager.CON_TEXT, m_stdErrBuffer.toString());
        textOut.setPayloadElement(StepManager.CON_AUX_DATA_TEXT_TITLE, "Process did not complete successfully: " + command);
        getStepManager().outputData(textOut);
    }
}
