protected void trySplit(ActiveHNode node, SplitNode parent, String parentBranch) throws Exception {
    // non-pure?
    if (node.numEntriesInClassDistribution() > 1) {
        List<SplitCandidate> bestSplits = node.getPossibleSplits(m_splitMetric);
        Collections.sort(bestSplits);
        boolean doSplit = false;
        if (bestSplits.size() < 2) {
            doSplit = bestSplits.size() > 0;
        } else {
            // compute the Hoeffding bound
            double metricMax = m_splitMetric.getMetricRange(node.m_classDistribution);
            double hoeffdingBound = computeHoeffdingBound(metricMax, m_splitConfidence, node.totalWeight());
            SplitCandidate best = bestSplits.get(bestSplits.size() - 1);
            SplitCandidate secondBest = bestSplits.get(bestSplits.size() - 2);
            if (best.m_splitMerit - secondBest.m_splitMerit > hoeffdingBound || hoeffdingBound < m_hoeffdingTieThreshold) {
                doSplit = true;
            }
        // TODO - remove poor attributes stuff?
        }
        if (doSplit) {
            SplitCandidate best = bestSplits.get(bestSplits.size() - 1);
            if (best.m_splitTest == null) {
                // preprune
                deactivateNode(node, parent, parentBranch);
            } else {
                SplitNode newSplit = new SplitNode(node.m_classDistribution, best.m_splitTest);
                for (int i = 0; i < best.numSplits(); i++) {
                    ActiveHNode newChild = newLearningNode();
                    newChild.m_classDistribution = best.m_postSplitClassDistributions.get(i);
                    newChild.m_weightSeenAtLastSplitEval = newChild.totalWeight();
                    String branchName = "";
                    if (m_header.attribute(best.m_splitTest.splitAttributes().get(0)).isNumeric()) {
                        branchName = i == 0 ? "left" : "right";
                    } else {
                        Attribute splitAtt = m_header.attribute(best.m_splitTest.splitAttributes().get(0));
                        branchName = splitAtt.value(i);
                    }
                    newSplit.setChild(branchName, newChild);
                }
                m_activeLeafCount--;
                m_decisionNodeCount++;
                m_activeLeafCount += best.numSplits();
                if (parent == null) {
                    m_root = newSplit;
                } else {
                    parent.setChild(parentBranch, newSplit);
                }
            }
        }
    }
}
