// moralizeNode
public boolean[][] fillIn(int[] order, boolean[][] bAdjacencyMatrix) {
    int nNodes = bAdjacencyMatrix.length;
    int[] inverseOrder = new int[nNodes];
    for (int iNode = 0; iNode < nNodes; iNode++) {
        inverseOrder[order[iNode]] = iNode;
    }
    // consult nodes in reverse order
    for (int i = nNodes - 1; i >= 0; i--) {
        int iNode = order[i];
        // find pairs of neighbors with lower order
        for (int j = 0; j < i; j++) {
            int iNode2 = order[j];
            if (bAdjacencyMatrix[iNode][iNode2]) {
                for (int k = j + 1; k < i; k++) {
                    int iNode3 = order[k];
                    if (bAdjacencyMatrix[iNode][iNode3]) {
                        // fill in
                        if (m_debug && (!bAdjacencyMatrix[iNode2][iNode3] || !bAdjacencyMatrix[iNode3][iNode2])) {
                            System.out.println("Fill in " + iNode2 + "--" + iNode3);
                        }
                        bAdjacencyMatrix[iNode2][iNode3] = true;
                        bAdjacencyMatrix[iNode3][iNode2] = true;
                    }
                }
            }
        }
    }
    return bAdjacencyMatrix;
}
