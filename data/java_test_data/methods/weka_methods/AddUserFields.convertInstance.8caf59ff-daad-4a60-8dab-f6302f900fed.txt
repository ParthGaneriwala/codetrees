protected void convertInstance(Instance instance) {
    double[] vals = new double[outputFormatPeek().numAttributes()];
    // original values first
    for (int i = 0; i < instance.numAttributes(); i++) {
        vals[i] = instance.value(i);
    }
    // new user values
    Instances outputFormat = getOutputFormat();
    for (int i = instance.numAttributes(); i < outputFormatPeek().numAttributes(); i++) {
        AttributeSpec spec = m_attributeSpecs.get(i - instance.numAttributes());
        Attribute outAtt = outputFormat.attribute(i);
        if (outAtt.isDate()) {
            vals[i] = spec.getDateValue().getTime();
        } else if (outAtt.isNumeric()) {
            vals[i] = spec.getNumericValue();
        } else if (outAtt.isNominal()) {
            String nomVal = spec.getNominalOrStringValue();
            vals[i] = outAtt.indexOfValue(nomVal);
        } else {
            // string attribute
            String nomVal = spec.getNominalOrStringValue();
            vals[i] = outAtt.addStringValue(nomVal);
        }
    }
    Instance inst = null;
    if (instance instanceof SparseInstance) {
        inst = new SparseInstance(instance.weight(), vals);
    } else {
        inst = new DenseInstance(instance.weight(), vals);
    }
    inst.setDataset(outputFormat);
    // No need to copy instance
    push(inst, false);
}
