public double weightedTrueNegativeRate() {
    double[] classCounts = new double[m_NumClasses];
    double classCountSum = 0;
    for (int i = 0; i < m_NumClasses; i++) {
        for (int j = 0; j < m_NumClasses; j++) {
            classCounts[i] += m_ConfusionMatrix[i][j];
        }
        classCountSum += classCounts[i];
    }
    double trueNegTotal = 0;
    for (int i = 0; i < m_NumClasses; i++) {
        double temp = trueNegativeRate(i);
        if (classCounts[i] > 0) {
            // If temp is NaN, we want the sum to also be NaN if count > 0
            trueNegTotal += (temp * classCounts[i]);
        }
    }
    return trueNegTotal / classCountSum;
}
