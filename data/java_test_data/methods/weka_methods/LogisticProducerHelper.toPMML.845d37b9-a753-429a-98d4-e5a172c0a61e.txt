public static String toPMML(Instances train, Instances structureAfterFiltering, double[][] par, int numClasses) {
    PMML pmml = initPMML();
    addDataDictionary(train, pmml);
    String currentAttrName = null;
    TransformationDictionary transformDict = null;
    LocalTransformations localTransforms = null;
    MiningSchema schema = new MiningSchema();
    for (int i = 0; i < structureAfterFiltering.numAttributes(); i++) {
        Attribute attr = structureAfterFiltering.attribute(i);
        Attribute originalAttr = train.attribute(attr.name());
        if (i == structureAfterFiltering.classIndex()) {
            schema.addMiningFields(new MiningField(attr.name(), FIELDUSAGETYPE.PREDICTED));
        }
        if (originalAttr == null) {
            // this must be a derived one
            if (localTransforms == null) {
                localTransforms = new LocalTransformations();
            }
            if (transformDict == null) {
                transformDict = new TransformationDictionary();
            }
            String[] nameAndValue = getNameAndValueFromUnsupervisedNominalToBinaryDerivedAttribute(train, attr);
            if (!nameAndValue[0].equals(currentAttrName)) {
                currentAttrName = nameAndValue[0];
                if (i != structureAfterFiltering.classIndex()) {
                    // add a mining field
                    int mode = (int) train.meanOrMode(train.attribute(nameAndValue[0]));
                    schema.addMiningFields(new MiningField(nameAndValue[0], FIELDUSAGETYPE.ACTIVE, MISSINGVALUETREATMENTMETHOD.AS_MODE, train.attribute(nameAndValue[0]).value(mode)));
                }
            }
            DerivedField derivedfield = new DerivedField(attr.name(), DATATYPE.DOUBLE, OPTYPE.CONTINUOUS);
            NormDiscrete normDiscrete = new NormDiscrete(nameAndValue[0], nameAndValue[1]);
            derivedfield.setNormDiscrete(normDiscrete);
            transformDict.addDerivedField(derivedfield);
        } else {
            // its either already numeric or was a binary nominal one
            if (i != structureAfterFiltering.classIndex()) {
                if (originalAttr.isNumeric()) {
                    String mean = "" + train.meanOrMode(originalAttr);
                    schema.addMiningFields(new MiningField(originalAttr.name(), FIELDUSAGETYPE.ACTIVE, MISSINGVALUETREATMENTMETHOD.AS_MEAN, mean));
                } else {
                    int mode = (int) train.meanOrMode(originalAttr);
                    schema.addMiningFields(new MiningField(originalAttr.name(), FIELDUSAGETYPE.ACTIVE, MISSINGVALUETREATMENTMETHOD.AS_MODE, originalAttr.value(mode)));
                }
            }
        }
    }
    RegressionModel model = new RegressionModel();
    if (transformDict != null) {
        pmml.setTransformationDictionary(transformDict);
    }
    model.addContent(schema);
    model.setFunctionName(MININGFUNCTION.CLASSIFICATION);
    model.setAlgorithmName("logisticRegression");
    model.setModelType("logisticRegression");
    model.setNormalizationMethod(REGRESSIONNORMALIZATIONMETHOD.SOFTMAX);
    Output output = new Output();
    Attribute classAttribute = structureAfterFiltering.classAttribute();
    for (int i = 0; i < classAttribute.numValues(); i++) {
        OutputField outputField = new OutputField();
        outputField.setName(classAttribute.name());
        outputField.setValue(classAttribute.value(i));
        output.addOutputField(outputField);
    }
    model.addContent(output);
    for (int i = 0; i < numClasses - 1; i++) {
        RegressionTable table = new RegressionTable(structureAfterFiltering.classAttribute().value(i));
        // coefficients
        int j = 1;
        for (int k = 0; k < structureAfterFiltering.numAttributes(); k++) {
            if (k != structureAfterFiltering.classIndex()) {
                Attribute attr = structureAfterFiltering.attribute(k);
                table.addNumericPredictor(new NumericPredictor(attr.name(), BigInteger.valueOf(1), par[j][i]));
                j++;
            }
        }
        table.setIntercept(par[0][i]);
        model.addContent(table);
    }
    pmml.addAssociationModelOrBaselineModelOrClusteringModes(model);
    try {
        StringWriter sw = new StringWriter();
        JAXBContext jc = JAXBContext.newInstance(PMML.class);
        Marshaller marshaller = jc.createMarshaller();
        marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);
        marshaller.marshal(pmml, sw);
        return sw.toString();
    } catch (JAXBException e) {
        e.printStackTrace();
    }
    return "";
}
