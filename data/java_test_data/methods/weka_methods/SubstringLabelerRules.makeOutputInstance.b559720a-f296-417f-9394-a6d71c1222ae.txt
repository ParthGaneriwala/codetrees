public Instance makeOutputInstance(Instance inputI, boolean batch) throws Exception {
    if (m_outputStructure == null) {
        throw new Exception("OutputStructure has not been determined!");
    }
    int newAttIndex = m_outputStructure.numAttributes() - 1;
    Instance result = inputI;
    if (m_matchRules.size() > 0) {
        String label = null;
        int[] labelVotes = new int[m_matchRules.size()];
        int index = 0;
        for (SubstringLabelerMatchRule m : m_matchRules) {
            label = m.apply(inputI);
            if (label != null) {
                if (m_voteLabels) {
                    labelVotes[index]++;
                } else {
                    break;
                }
            }
            index++;
        }
        if (m_voteLabels && Utils.sum(labelVotes) > 0) {
            int maxIndex = Utils.maxIndex(labelVotes);
            label = m_matchRules.get(maxIndex).getLabel();
        }
        double[] vals = new double[m_outputStructure.numAttributes()];
        for (int i = 0; i < inputI.numAttributes(); i++) {
            if (!inputI.attribute(i).isString()) {
                vals[i] = inputI.value(i);
            } else {
                if (!batch) {
                    vals[i] = 0;
                    String v = inputI.stringValue(i);
                    m_outputStructure.attribute(i).setStringValue(v);
                } else {
                    String v = inputI.stringValue(i);
                    vals[i] = m_outputStructure.attribute(i).addStringValue(v);
                }
            }
        }
        if (label != null) {
            if (m_hasLabels) {
                vals[newAttIndex] = m_outputStructure.attribute(m_attName).indexOfValue(label);
            } else {
                vals[newAttIndex] = 1;
            }
        } else {
            // non match
            if (m_hasLabels) {
                if (!getConsumeNonMatching()) {
                    vals[newAttIndex] = Utils.missingValue();
                } else {
                    return null;
                }
            } else {
                vals[newAttIndex] = 0;
            }
        }
        result = new DenseInstance(1.0, vals);
        result.setDataset(m_outputStructure);
    }
    return result;
}
