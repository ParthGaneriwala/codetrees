public static void openURL(Component parent, String url, boolean showDialog) {
    String osName = System.getProperty("os.name");
    try {
        if (Desktop.isDesktopSupported() && Desktop.getDesktop().isSupported(Action.BROWSE)) {
            Desktop.getDesktop().browse(new URI(url));
        } else {
            System.err.println("Desktop or browse action not supported, using fallback to determine browser.");
            // Mac OS
            if (osName.startsWith("Mac OS")) {
                Class<?> fileMgr = Class.forName("com.apple.eio.FileManager");
                Method openURL = fileMgr.getDeclaredMethod("openURL", new Class[] { String.class });
                openURL.invoke(null, new Object[] { url });
            } else // Windows
            if (osName.startsWith("Windows")) {
                Runtime.getRuntime().exec("rundll32 url.dll,FileProtocolHandler " + url);
            } else // assume Unix or Linux
            {
                String browser = null;
                for (int count = 0; count < LINUX_BROWSERS.length && browser == null; count++) {
                    // look for binaries and take first that's available
                    if (Runtime.getRuntime().exec(new String[] { "which", LINUX_BROWSERS[count] }).waitFor() == 0) {
                        browser = LINUX_BROWSERS[count];
                        break;
                    }
                }
                if (browser == null) {
                    throw new Exception("Could not find web browser");
                } else {
                    Runtime.getRuntime().exec(new String[] { browser, url });
                }
            }
        }
    } catch (Exception e) {
        String errMsg = "Error attempting to launch web browser:\n" + e.getMessage();
        if (showDialog) {
            JOptionPane.showMessageDialog(parent, errMsg);
        } else {
            System.err.println(errMsg);
        }
    }
}
