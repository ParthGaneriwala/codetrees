@Override
public void settingsChanged() {
    if (getMainApplication() != null) {
        if (!m_initialSettingsSet) {
            Object initialC = getMainApplication().getApplicationSettings().getSetting(getPerspectiveID(), ClassifierPanelDefaults.CLASSIFIER_KEY, ClassifierPanelDefaults.CLASSIFIER, Environment.getSystemWide());
            m_ClassifierEditor.setValue(initialC);
            TestMode initialTestMode = getMainApplication().getApplicationSettings().getSetting(getPerspectiveID(), ClassifierPanelDefaults.TEST_MODE_KEY, ClassifierPanelDefaults.TEST_MODE, Environment.getSystemWide());
            m_CVBut.setSelected(initialTestMode == TestMode.CROSS_VALIDATION);
            m_PercentBut.setSelected(initialTestMode == TestMode.PERCENTAGE_SPLIT);
            m_TrainBut.setSelected(initialTestMode == TestMode.USE_TRAINING_SET);
            m_TestSplitBut.setSelected(initialTestMode == TestMode.SEPARATE_TEST_SET);
            m_CVText.setEnabled(m_CVBut.isSelected());
            m_PercentText.setEnabled(m_PercentBut.isSelected());
            m_CVText.setText("" + getMainApplication().getApplicationSettings().getSetting(getPerspectiveID(), ClassifierPanelDefaults.CROSS_VALIDATION_FOLDS_KEY, ClassifierPanelDefaults.CROSS_VALIDATION_FOLDS, Environment.getSystemWide()));
            m_PercentText.setText("" + getMainApplication().getApplicationSettings().getSetting(getPerspectiveID(), ClassifierPanelDefaults.PERCENTAGE_SPLIT_KEY, ClassifierPanelDefaults.PERCENTAGE_SPLIT, Environment.getSystemWide()));
            // TODO these widgets will disappear, as the "More options" dialog will
            // not be necessary
            m_OutputModelBut.setSelected(getMainApplication().getApplicationSettings().getSetting(getPerspectiveID(), ClassifierPanelDefaults.OUTPUT_MODEL_KEY, ClassifierPanelDefaults.OUTPUT_MODEL, Environment.getSystemWide()));
            m_OutputModelsForTrainingSplitsBut.setSelected(getMainApplication().getApplicationSettings().getSetting(getPerspectiveID(), ClassifierPanelDefaults.OUTPUT_MODELS_FOR_TRAINING_SPLITS_KEY, ClassifierPanelDefaults.OUTPUT_MODELS_FOR_TRAINING_SPLITS, Environment.getSystemWide()));
            m_OutputPerClassBut.setSelected(getMainApplication().getApplicationSettings().getSetting(getPerspectiveID(), ClassifierPanelDefaults.OUTPUT_PER_CLASS_STATS_KEY, ClassifierPanelDefaults.OUTPUT_PER_CLASS_STATS, Environment.getSystemWide()));
            m_OutputEntropyBut.setSelected(getMainApplication().getApplicationSettings().getSetting(getPerspectiveID(), ClassifierPanelDefaults.OUTPUT_ENTROPY_EVAL_METRICS_KEY, ClassifierPanelDefaults.OUTPUT_ENTROPY_EVAL_METRICS, Environment.getSystemWide()));
            m_OutputConfusionBut.setSelected(getMainApplication().getApplicationSettings().getSetting(getPerspectiveID(), ClassifierPanelDefaults.OUTPUT_CONFUSION_MATRIX_KEY, ClassifierPanelDefaults.OUTPUT_CONFUSION_MATRIX, Environment.getSystemWide()));
            m_StorePredictionsBut.setSelected(getMainApplication().getApplicationSettings().getSetting(getPerspectiveID(), ClassifierPanelDefaults.STORE_PREDICTIONS_FOR_VIS_KEY, ClassifierPanelDefaults.STORE_PREDICTIONS_FOR_VIS, Environment.getSystemWide()));
            m_errorPlotPointSizeProportionalToMargin.setSelected(getMainApplication().getApplicationSettings().getSetting(getPerspectiveID(), ClassifierPanelDefaults.ERROR_PLOT_POINT_SIZE_PROP_TO_MARGIN_KEY, ClassifierPanelDefaults.ERROR_PLOT_POINT_SIZE_PROP_TO_MARGIN, Environment.getSystemWide()));
            m_RandomSeedText.setText("" + getMainApplication().getApplicationSettings().getSetting(getPerspectiveID(), ClassifierPanelDefaults.RANDOM_SEED_KEY, ClassifierPanelDefaults.RANDOM_SEED, Environment.getSystemWide()));
        }
        m_initialSettingsSet = true;
        Font outputFont = getMainApplication().getApplicationSettings().getSetting(getPerspectiveID(), ClassifierPanelDefaults.OUTPUT_FONT_KEY, ClassifierPanelDefaults.OUTPUT_FONT, Environment.getSystemWide());
        m_OutText.setFont(outputFont);
        m_History.setFont(outputFont);
        Color textColor = getMainApplication().getApplicationSettings().getSetting(getPerspectiveID(), ClassifierPanelDefaults.OUTPUT_TEXT_COLOR_KEY, ClassifierPanelDefaults.OUTPUT_TEXT_COLOR, Environment.getSystemWide());
        m_OutText.setForeground(textColor);
        m_History.setForeground(textColor);
        Color outputBackgroundColor = getMainApplication().getApplicationSettings().getSetting(getPerspectiveID(), ClassifierPanelDefaults.OUTPUT_BACKGROUND_COLOR_KEY, ClassifierPanelDefaults.OUTPUT_BACKGROUND_COLOR, Environment.getSystemWide());
        m_OutText.setBackground(outputBackgroundColor);
        m_History.setBackground(outputBackgroundColor);
    }
}
