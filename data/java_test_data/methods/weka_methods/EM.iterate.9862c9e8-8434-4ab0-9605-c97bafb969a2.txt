private double iterate(Instances inst, boolean report) throws Exception {
    int i;
    double llkold = 0.0;
    double llk = 0.0;
    if (report) {
        EM_Report(inst);
    }
    boolean ok = false;
    int seed = getSeed();
    int restartCount = 0;
    m_iterationsPerformed = -1;
    while (!ok) {
        try {
            for (i = 0; i < m_max_iterations; i++) {
                llkold = llk;
                llk = launchESteps(inst);
                if (report) {
                    System.out.println("Loglikely: " + llk);
                }
                if (i > 0) {
                    if ((llk - llkold) < m_minLogLikelihoodImprovementIterating) {
                        if (llk - llkold < 0) {
                            // decrease in log likelihood - revert to the model from the
                            // previous iteration
                            m_modelNormal = m_modelNormalPrev;
                            m_model = m_modelPrev;
                            m_priors = m_priorsPrev;
                            m_iterationsPerformed = i - 1;
                        } else {
                            m_iterationsPerformed = i;
                        }
                        break;
                    }
                }
                launchMSteps(inst);
            }
            ok = true;
        } catch (Exception ex) {
            // System.err.println("Restarting after training failure");
            ex.printStackTrace();
            seed++;
            restartCount++;
            m_rr = new Random(seed);
            for (int z = 0; z < 10; z++) {
                m_rr.nextDouble();
                m_rr.nextInt();
            }
            if (restartCount > 5) {
                // System.err.println("Reducing the number of clusters");
                m_num_clusters--;
                restartCount = 0;
            }
            EM_Init(m_theInstances);
            startExecutorPool();
        }
    }
    if (m_iterationsPerformed == -1) {
        m_iterationsPerformed = m_max_iterations;
    }
    if (m_verbose) {
        System.out.println("# iterations performed: " + m_iterationsPerformed);
    }
    if (report) {
        EM_Report(inst);
    }
    return llk;
}
