// CalcNodeScore
private double calcNodeScorePlain(int nNode) {
    Instances instances = m_BayesNet.m_Instances;
    ParentSet oParentSet = m_BayesNet.getParentSet(nNode);
    // determine cardinality of parent set & reserve space for frequency counts
    int nCardinality = oParentSet.getCardinalityOfParents();
    int numValues = instances.attribute(nNode).numValues();
    int[] nCounts = new int[nCardinality * numValues];
    // initialize (don't need this?)
    for (int iParent = 0; iParent < nCardinality * numValues; iParent++) {
        nCounts[iParent] = 0;
    }
    // estimate distributions
    Enumeration<Instance> enumInsts = instances.enumerateInstances();
    while (enumInsts.hasMoreElements()) {
        Instance instance = enumInsts.nextElement();
        // updateClassifier;
        double iCPT = 0;
        for (int iParent = 0; iParent < oParentSet.getNrOfParents(); iParent++) {
            int nParent = oParentSet.getParent(iParent);
            iCPT = iCPT * instances.attribute(nParent).numValues() + instance.value(nParent);
        }
        nCounts[numValues * ((int) iCPT) + (int) instance.value(nNode)]++;
    }
    return calcScoreOfCounts(nCounts, nCardinality, numValues, instances);
}
