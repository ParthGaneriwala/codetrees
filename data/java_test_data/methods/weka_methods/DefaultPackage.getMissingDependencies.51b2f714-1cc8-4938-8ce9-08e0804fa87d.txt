@Override
public List<Dependency> getMissingDependencies() throws Exception {
    List<Package> installedPackages = m_packageManager.getInstalledPackages();
    String dependencies = getPackageMetaDataElement("Depends").toString();
    return getMissingDependencies(installedPackages);
/*
     * if (dependencies != null) { StringTokenizer tok = new
     * StringTokenizer(dependencies, ","); while (tok.hasMoreTokens()) { String
     * nextT = tok.nextToken().trim(); String[] split = splitNameVersion(nextT);
     * 
     * // don't consider the base system! if
     * (!(split[0].equalsIgnoreCase(m_packageManager.getBaseSystemName()))) {
     * 
     * // gets the latest version of this package if split[2] is null Package
     * tempDep = m_packageManager.getRepositoryPackageInfo(split[0], split[2]);
     * if (!tempDep.isInstalled()) { VersionPackageConstraint versionConstraint
     * = new VersionPackageConstraint(tempDep); if (split[2] == null) { //
     * assume anything up to and including the current version is acceptable
     * versionConstraint.
     * setVersionConstraint(VersionPackageConstraint.VersionComparison
     * .LESSTHANOREQUAL); } else {
     * versionConstraint.setVersionConstraint(split[1]); }
     * 
     * missing.add(new Dependency(this, versionConstraint)); } } } }
     * 
     * return missing;
     */
}
