@Override
public void setOptions(String[] options) throws Exception {
    resetOptions();
    setDebug(Utils.getFlag('V', options));
    String optionString = Utils.getOption('I', options);
    if (optionString.length() != 0) {
        setMaxIterations(Integer.parseInt(optionString));
    }
    optionString = Utils.getOption('X', options);
    if (optionString.length() > 0) {
        setNumFolds(Integer.parseInt(optionString));
    }
    optionString = Utils.getOption("ll-iter", options);
    if (optionString.length() > 0) {
        setMinLogLikelihoodImprovementIterating(Double.parseDouble(optionString));
    }
    optionString = Utils.getOption("ll-cv", options);
    if (optionString.length() > 0) {
        setMinLogLikelihoodImprovementCV(Double.parseDouble(optionString));
    }
    optionString = Utils.getOption('N', options);
    if (optionString.length() != 0) {
        setNumClusters(Integer.parseInt(optionString));
    }
    optionString = Utils.getOption("max", options);
    if (optionString.length() > 0) {
        setMaximumNumberOfClusters(Integer.parseInt(optionString));
    }
    optionString = Utils.getOption('M', options);
    if (optionString.length() != 0) {
        setMinStdDev((new Double(optionString)).doubleValue());
    }
    optionString = Utils.getOption('K', options);
    if (optionString.length() != 0) {
        setNumKMeansRuns((new Integer(optionString)).intValue());
    }
    setDisplayModelInOldFormat(Utils.getFlag('O', options));
    String slotsS = Utils.getOption("num-slots", options);
    if (slotsS.length() > 0) {
        setNumExecutionSlots(Integer.parseInt(slotsS));
    }
    super.setOptions(options);
    Utils.checkForRemainingOptions(options);
}
