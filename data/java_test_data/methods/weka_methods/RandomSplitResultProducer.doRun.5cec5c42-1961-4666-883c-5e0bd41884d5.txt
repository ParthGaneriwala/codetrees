@Override
public void doRun(int run) throws Exception {
    if (getRawOutput()) {
        if (m_ZipDest == null) {
            m_ZipDest = new OutputZipper(m_OutputFile);
        }
    }
    if (m_Instances == null) {
        throw new Exception("No Instances set");
    }
    // Add in some fields to the key like run number, dataset name
    Object[] seKey = m_SplitEvaluator.getKey();
    Object[] key = new Object[seKey.length + 2];
    key[0] = Utils.backQuoteChars(m_Instances.relationName());
    key[1] = "" + run;
    System.arraycopy(seKey, 0, key, 2, seKey.length);
    if (m_ResultListener.isResultRequired(this, key)) {
        // Randomize on a copy of the original dataset
        Instances runInstances = new Instances(m_Instances);
        Instances train;
        Instances test;
        if (!m_randomize) {
            // Don't do any randomization
            int trainSize = Utils.round(runInstances.numInstances() * m_TrainPercent / 100);
            int testSize = runInstances.numInstances() - trainSize;
            train = new Instances(runInstances, 0, trainSize);
            test = new Instances(runInstances, trainSize, testSize);
        } else {
            Random rand = new Random(run);
            runInstances.randomize(rand);
            // Nominal class
            if (runInstances.classAttribute().isNominal()) {
                // create the subset for each classs
                int numClasses = runInstances.numClasses();
                Instances[] subsets = new Instances[numClasses + 1];
                for (int i = 0; i < numClasses + 1; i++) {
                    subsets[i] = new Instances(runInstances, 10);
                }
                // divide instances into subsets
                Enumeration<Instance> e = runInstances.enumerateInstances();
                while (e.hasMoreElements()) {
                    Instance inst = e.nextElement();
                    if (inst.classIsMissing()) {
                        subsets[numClasses].add(inst);
                    } else {
                        subsets[(int) inst.classValue()].add(inst);
                    }
                }
                // Compactify them
                for (int i = 0; i < numClasses + 1; i++) {
                    subsets[i].compactify();
                }
                // merge into train and test sets
                train = new Instances(runInstances, runInstances.numInstances());
                test = new Instances(runInstances, runInstances.numInstances());
                for (int i = 0; i < numClasses + 1; i++) {
                    int trainSize = Utils.probRound(subsets[i].numInstances() * m_TrainPercent / 100, rand);
                    for (int j = 0; j < trainSize; j++) {
                        train.add(subsets[i].instance(j));
                    }
                    for (int j = trainSize; j < subsets[i].numInstances(); j++) {
                        test.add(subsets[i].instance(j));
                    }
                    // free memory
                    subsets[i] = null;
                }
                train.compactify();
                test.compactify();
                // randomize the final sets
                train.randomize(rand);
                test.randomize(rand);
            } else {
                // Numeric target
                int trainSize = Utils.probRound(runInstances.numInstances() * m_TrainPercent / 100, rand);
                int testSize = runInstances.numInstances() - trainSize;
                train = new Instances(runInstances, 0, trainSize);
                test = new Instances(runInstances, trainSize, testSize);
            }
        }
        try {
            Object[] seResults = m_SplitEvaluator.getResult(train, test);
            Object[] results = new Object[seResults.length + 1];
            results[0] = getTimestamp();
            System.arraycopy(seResults, 0, results, 1, seResults.length);
            if (m_debugOutput) {
                String resultName = ("" + run + "." + Utils.backQuoteChars(runInstances.relationName()) + "." + m_SplitEvaluator.toString()).replace(' ', '_');
                resultName = Utils.removeSubstring(resultName, "weka.classifiers.");
                resultName = Utils.removeSubstring(resultName, "weka.filters.");
                resultName = Utils.removeSubstring(resultName, "weka.attributeSelection.");
                m_ZipDest.zipit(m_SplitEvaluator.getRawResultOutput(), resultName);
            }
            m_ResultListener.acceptResult(this, key, results);
        } catch (Exception ex) {
            // Save the train and test datasets for debugging purposes?
            throw ex;
        }
    }
}
