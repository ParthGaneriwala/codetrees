/**
 * Simple main method for testing this class.
 *
 * @param ops the commandline options
 */
// @ requires ops != null;
public static void main(String[] ops) {
    try {
        new Attribute("length");
        Attribute weight = new Attribute("weight");
        // Create date attribute "date"
        Attribute date = new Attribute("date", "yyyy-MM-dd HH:mm:ss");
        System.out.println(date);
        double dd = date.parseDate("2001-04-04 14:13:55");
        System.out.println("Test date = " + dd);
        System.out.println(date.formatDate(dd));
        dd = new Date().getTime();
        System.out.println("Date now = " + dd);
        System.out.println(date.formatDate(dd));
        // Create vector to hold nominal values "first", "second", "third"
        List<String> my_nominal_values = new ArrayList<String>(3);
        my_nominal_values.add("first");
        my_nominal_values.add("second");
        my_nominal_values.add("third");
        // Create nominal attribute "position"
        Attribute position = new Attribute("position", my_nominal_values);
        // Print the name of "position"
        System.out.println("Name of \"position\": " + position.name());
        // Print the values of "position"
        Enumeration<Object> attValues = position.enumerateValues();
        while (attValues.hasMoreElements()) {
            String string = (String) attValues.nextElement();
            System.out.println("Value of \"position\": " + string);
        }
        // Shallow copy attribute "position"
        Attribute copy = (Attribute) position.copy();
        // Test if attributes are the same
        System.out.println("Copy is the same as original: " + copy.equals(position));
        // Print index of attribute "weight" (should be unset: -1)
        System.out.println("Index of attribute \"weight\" (should be -1): " + weight.index());
        // Print index of value "first" of attribute "position"
        System.out.println("Index of value \"first\" of \"position\" (should be 0): " + position.indexOfValue("first"));
        // Tests type of attribute "position"
        System.out.println("\"position\" is numeric: " + position.isNumeric());
        System.out.println("\"position\" is nominal: " + position.isNominal());
        System.out.println("\"position\" is string: " + position.isString());
        // Prints name of attribute "position"
        System.out.println("Name of \"position\": " + position.name());
        // Prints number of values of attribute "position"
        System.out.println("Number of values for \"position\": " + position.numValues());
        // Prints the values (againg)
        for (int i = 0; i < position.numValues(); i++) {
            System.out.println("Value " + i + ": " + position.value(i));
        }
        // Prints the attribute "position" in ARFF format
        System.out.println(position);
        // Checks type of attribute "position" using constants
        switch(position.type()) {
            case Attribute.NUMERIC:
                System.out.println("\"position\" is numeric");
                break;
            case Attribute.NOMINAL:
                System.out.println("\"position\" is nominal");
                break;
            case Attribute.STRING:
                System.out.println("\"position\" is string");
                break;
            case Attribute.DATE:
                System.out.println("\"position\" is date");
                break;
            case Attribute.RELATIONAL:
                System.out.println("\"position\" is relation-valued");
                break;
            default:
                System.out.println("\"position\" has unknown type");
        }
        ArrayList<Attribute> atts = new ArrayList<Attribute>(1);
        atts.add(position);
        Instances relation = new Instances("Test", atts, 0);
        Attribute relationValuedAtt = new Attribute("test", relation);
        System.out.println(relationValuedAtt);
    } catch (Exception e) {
        e.printStackTrace();
    }
}
