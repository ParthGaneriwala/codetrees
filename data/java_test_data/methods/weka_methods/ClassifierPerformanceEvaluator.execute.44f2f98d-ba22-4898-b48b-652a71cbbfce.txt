@Override
public void execute() {
    if (m_stopped) {
        return;
    }
    if (m_logger != null) {
        m_logger.statusMessage(statusMessagePrefix() + "Evaluating (" + m_setNum + ")...");
    }
    try {
        ClassifierErrorsPlotInstances plotInstances = ExplorerDefaults.getClassifierErrorsPlotInstances();
        Evaluation eval = null;
        if (m_trainData == null || m_trainData.numInstances() == 0) {
            eval = new Evaluation(m_testData);
            plotInstances.setInstances(m_testData);
            plotInstances.setClassifier(m_classifier);
            plotInstances.setClassIndex(m_testData.classIndex());
            plotInstances.setEvaluation(eval);
            plotInstances.setPointSizeProportionalToMargin(m_errorPlotPointSizeProportionalToMargin);
            eval = adjustForInputMappedClassifier(eval, m_classifier, m_testData, plotInstances);
            eval.useNoPriors();
            eval.setMetricsToDisplay(m_metricsList);
        } else {
            eval = new Evaluation(m_trainData);
            plotInstances.setInstances(m_trainData);
            plotInstances.setClassifier(m_classifier);
            plotInstances.setClassIndex(m_trainData.classIndex());
            plotInstances.setEvaluation(eval);
            plotInstances.setPointSizeProportionalToMargin(m_errorPlotPointSizeProportionalToMargin);
            eval = adjustForInputMappedClassifier(eval, m_classifier, m_trainData, plotInstances);
            eval.setMetricsToDisplay(m_metricsList);
        }
        plotInstances.setUp();
        if (m_classifier instanceof BatchPredictor && ((BatchPredictor) m_classifier).implementsMoreEfficientBatchPrediction()) {
            double[][] predictions = ((BatchPredictor) m_classifier).distributionsForInstances(m_testData);
            plotInstances.process(m_testData, predictions, eval);
        } else {
            for (int i = 0; i < m_testData.numInstances(); i++) {
                if (m_stopped) {
                    break;
                }
                Instance temp = m_testData.instance(i);
                plotInstances.process(temp, m_classifier, eval);
            }
        }
        if (m_stopped) {
            return;
        }
        aggregateEvalTask(eval, m_classifier, m_testData, plotInstances, m_setNum, m_maxSetNum, m_evalLabel);
    } catch (Exception ex) {
        // stop all processing
        ClassifierPerformanceEvaluator.this.stop();
        if (m_logger != null) {
            m_logger.logMessage("[ClassifierPerformanceEvaluator] " + statusMessagePrefix() + " problem evaluating classifier. " + ex.getMessage());
        }
        ex.printStackTrace();
    }
}
