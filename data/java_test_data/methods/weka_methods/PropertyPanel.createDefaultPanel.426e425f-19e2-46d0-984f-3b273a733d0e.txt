protected void createDefaultPanel() {
    setBorder(BorderFactory.createEtchedBorder());
    setToolTipText("Left-click to edit properties for this object, right-click/Alt+Shift+left-click for menu");
    setOpaque(true);
    final Component comp = this;
    addMouseListener(new MouseAdapter() {

        @Override
        public void mouseClicked(MouseEvent evt) {
            if (evt.getClickCount() == 1) {
                if ((evt.getButton() == MouseEvent.BUTTON1) && !evt.isAltDown() && !evt.isShiftDown()) {
                    showPropertyDialog();
                } else if ((evt.getButton() == MouseEvent.BUTTON3) || ((evt.getButton() == MouseEvent.BUTTON1) && evt.isAltDown() && evt.isShiftDown())) {
                    JPopupMenu menu = new JPopupMenu();
                    JMenuItem item;
                    if (m_Editor.getValue() != null) {
                        item = new JMenuItem("Show properties...");
                        item.addActionListener(new ActionListener() {

                            @Override
                            public void actionPerformed(ActionEvent e) {
                                showPropertyDialog();
                            }
                        });
                        menu.add(item);
                        item = new JMenuItem("Copy configuration to clipboard");
                        item.addActionListener(new ActionListener() {

                            @Override
                            public void actionPerformed(ActionEvent e) {
                                Object value = m_Editor.getValue();
                                String str = "";
                                if (value.getClass().isArray()) {
                                    str += value.getClass().getName();
                                    Object[] arr = (Object[]) value;
                                    for (Object v : arr) {
                                        String s = v.getClass().getName();
                                        if (v instanceof OptionHandler) {
                                            s += " " + Utils.joinOptions(((OptionHandler) v).getOptions());
                                        }
                                        str += " \"" + Utils.backQuoteChars(s.trim()) + "\"";
                                    }
                                } else {
                                    str += value.getClass().getName();
                                    if (value instanceof OptionHandler) {
                                        str += " " + Utils.joinOptions(((OptionHandler) value).getOptions());
                                    }
                                }
                                StringSelection selection = new StringSelection(str.trim());
                                Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                                clipboard.setContents(selection, selection);
                            }
                        });
                        menu.add(item);
                    }
                    item = new JMenuItem("Enter configuration...");
                    item.addActionListener(new ActionListener() {

                        @Override
                        public void actionPerformed(ActionEvent e) {
                            String str = JOptionPane.showInputDialog(comp, "Configuration (<classname> [<options>])");
                            if (str != null && str.length() > 0) {
                                try {
                                    String[] options = Utils.splitOptions(str);
                                    String classname = options[0];
                                    options[0] = "";
                                    Class c = Utils.forName(Object.class, classname, null).getClass();
                                    if (c.isArray()) {
                                        Object[] arr = (Object[]) Array.newInstance(c.getComponentType(), options.length - 1);
                                        for (int i = 1; i < options.length; i++) {
                                            String[] ops = Utils.splitOptions(options[i]);
                                            String cname = ops[0];
                                            ops[0] = "";
                                            arr[i - 1] = Utils.forName(Object.class, cname, ops);
                                        }
                                        m_Editor.setValue(arr);
                                    } else {
                                        m_Editor.setValue(Utils.forName(Object.class, classname, options));
                                    }
                                } catch (Exception ex) {
                                    JOptionPane.showMessageDialog(comp, "Error parsing commandline:\n" + ex, "Error...", JOptionPane.ERROR_MESSAGE);
                                }
                            }
                        }
                    });
                    menu.add(item);
                    if (m_Editor.getValue() instanceof OptionHandler) {
                        item = new JMenuItem("Edit configuration...");
                        item.addActionListener(new ActionListener() {

                            @Override
                            public void actionPerformed(ActionEvent e) {
                                String str = m_Editor.getValue().getClass().getName();
                                str += " " + Utils.joinOptions(((OptionHandler) m_Editor.getValue()).getOptions());
                                str = JOptionPane.showInputDialog(comp, "Configuration", str);
                                if (str != null && str.length() > 0) {
                                    try {
                                        String[] options = Utils.splitOptions(str);
                                        String classname = options[0];
                                        options[0] = "";
                                        m_Editor.setValue(Utils.forName(Object.class, classname, options));
                                    } catch (Exception ex) {
                                        JOptionPane.showMessageDialog(comp, "Error parsing commandline:\n" + ex, "Error...", JOptionPane.ERROR_MESSAGE);
                                    }
                                }
                            }
                        });
                        menu.add(item);
                    }
                    if (m_Editor instanceof GenericObjectEditor) {
                        ((GenericObjectEditor) m_Editor).getHistory().customizePopupMenu(menu, m_Editor.getValue(), new HistorySelectionListener() {

                            @Override
                            public void historySelected(HistorySelectionEvent e) {
                                m_Editor.setValue(e.getHistoryItem());
                            }
                        });
                    }
                    menu.show(comp, evt.getX(), evt.getY());
                }
            }
        }
    });
    Dimension newPref = getPreferredSize();
    newPref.height = getFontMetrics(getFont()).getHeight() * 5 / 4;
    newPref.width = newPref.height * 5;
    setPreferredSize(newPref);
    m_Editor.addPropertyChangeListener(new PropertyChangeListener() {

        @Override
        public void propertyChange(PropertyChangeEvent evt) {
            repaint();
        }
    });
}
