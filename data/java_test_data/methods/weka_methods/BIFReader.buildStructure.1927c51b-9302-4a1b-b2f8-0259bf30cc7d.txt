void buildStructure(Document doc) throws Exception {
    // Get the name of the network
    // initialize conditional distribution tables
    m_Distributions = new Estimator[m_Instances.numAttributes()][];
    for (int iNode = 0; iNode < m_Instances.numAttributes(); iNode++) {
        // find definition that goes with this node
        String sName = m_Instances.attribute(iNode).name();
        Element definition = getDefinition(doc, sName);
        /*
       * if (nodelist.getLength() == 0) { throw new
       * Exception("No definition found for node " + sName); } if
       * (nodelist.getLength() > 1) {
       * System.err.println("More than one definition found for node " + sName +
       * ". Using first definition."); } Element definition = (Element)
       * nodelist.item(0);
       */
        // get the parents for this node
        // resolve structure
        ArrayList<Node> nodelist = getParentNodes(definition);
        for (int iParent = 0; iParent < nodelist.size(); iParent++) {
            Node parentName = nodelist.get(iParent).getFirstChild();
            String sParentName = ((CharacterData) (parentName)).getData();
            int nParent = getNode(sParentName);
            m_ParentSets[iNode].addParent(nParent, m_Instances);
        }
        // resolve conditional probability table
        int nCardinality = m_ParentSets[iNode].getCardinalityOfParents();
        int nValues = m_Instances.attribute(iNode).numValues();
        m_Distributions[iNode] = new Estimator[nCardinality];
        for (int i = 0; i < nCardinality; i++) {
            m_Distributions[iNode][i] = new DiscreteEstimatorBayes(nValues, 0.0f);
        }
        /*
       * StringBuffer sTable = new StringBuffer(); for (int iText = 0; iText <
       * nodelist.getLength(); iText++) { sTable.append(((CharacterData)
       * (nodelist.item(iText))).getData()); sTable.append(' '); }
       * StringTokenizer st = new StringTokenizer(sTable.toString());
       */
        String sTable = getTable(definition);
        StringTokenizer st = new StringTokenizer(sTable.toString());
        for (int i = 0; i < nCardinality; i++) {
            DiscreteEstimatorBayes d = (DiscreteEstimatorBayes) m_Distributions[iNode][i];
            for (int iValue = 0; iValue < nValues; iValue++) {
                String sWeight = st.nextToken();
                d.addValue(iValue, new Double(sWeight).doubleValue());
            }
        }
    }
}
