private void addToUserTreeNode(BeanInstance meta, boolean installListener) {
    DefaultTreeModel model = (DefaultTreeModel) m_componentTree.getModel();
    DefaultMutableTreeNode root = (DefaultMutableTreeNode) model.getRoot();
    if (m_userCompNode == null) {
        m_userCompNode = new InvisibleNode("User");
        model.insertNodeInto(m_userCompNode, root, 0);
    }
    Vector<Object> beanHolder = new Vector<Object>();
    beanHolder.add(meta);
    try {
        StringBuffer serialized = copyToBuffer(beanHolder);
        String displayName = "";
        ImageIcon scaledIcon = null;
        // 
        if (meta.getBean() instanceof Visible) {
            // ((Visible)copy).getVisual().scale(3);
            scaledIcon = new ImageIcon(((Visible) meta.getBean()).getVisual().scale(0.33));
            displayName = ((Visible) meta.getBean()).getVisual().getText();
        }
        Vector<Object> metaDetails = new Vector<Object>();
        metaDetails.add(displayName);
        metaDetails.add(serialized);
        metaDetails.add(scaledIcon);
        SerializedObject so = new SerializedObject(metaDetails);
        @SuppressWarnings("unchecked") Vector<Object> copy = (Vector<Object>) so.getObject();
        JTreeLeafDetails metaLeaf = new JTreeLeafDetails(displayName, copy, scaledIcon);
        DefaultMutableTreeNode newUserComp = new InvisibleNode(metaLeaf);
        model.insertNodeInto(newUserComp, m_userCompNode, 0);
        // add to the list of user components
        m_userComponents.add(copy);
        if (installListener && m_firstUserComponentOpp) {
            try {
                installWindowListenerForSavingUserStuff();
                m_firstUserComponentOpp = false;
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    } catch (Exception ex) {
        ex.printStackTrace();
    }
/*
     * java.awt.Color bckC = getBackground(); Vector beans =
     * BeanInstance.getBeanInstances(m_mainKFPerspective.getCurrentTabIndex());
     * detachFromLayout(beans);
     */
// Disconnect any beans connected to the inputs or outputs
// of this MetaBean (prevents serialization of the entire
// KnowledgeFlow!!)
/*
     * Vector tempRemovedConnections = new Vector(); Vector allConnections =
     * BeanConnection.getConnections(m_mainKFPerspective.getCurrentTabIndex());
     * Vector inputs = bean.getInputs(); Vector outputs = bean.getOutputs();
     * Vector allComps = bean.getSubFlow();
     *
     * for (int i = 0; i < inputs.size(); i++) { BeanInstance temp =
     * (BeanInstance)inputs.elementAt(i); // is this input a target for some
     * event? for (int j = 0; j < allConnections.size(); j++) { BeanConnection
     * tempC = (BeanConnection)allConnections.elementAt(j); if
     * (tempC.getTarget() == temp) { tempRemovedConnections.add(tempC); }
     *
     * // also check to see if this input is a source for // some target that is
     * *not* in the subFlow if (tempC.getSource() == temp &&
     * !bean.subFlowContains(tempC.getTarget())) {
     * tempRemovedConnections.add(tempC); } } }
     *
     * for (int i = 0; i < outputs.size(); i++) { BeanInstance temp =
     * (BeanInstance)outputs.elementAt(i); // is this output a source for some
     * target? for (int j = 0; j < allConnections.size(); j++) { BeanConnection
     * tempC = (BeanConnection)allConnections.elementAt(j); if
     * (tempC.getSource() == temp) { tempRemovedConnections.add(tempC); } } }
     *
     *
     * for (int i = 0; i < tempRemovedConnections.size(); i++) { BeanConnection
     * temp = (BeanConnection)tempRemovedConnections.elementAt(i);
     * temp.remove(m_mainKFPerspective.getCurrentTabIndex()); }
     *
     * MetaBean copy = copyMetaBean(bean, true);
     *
     * String displayName =""; ImageIcon scaledIcon = null; // if (copy
     * instanceof Visible) { //((Visible)copy).getVisual().scale(3); scaledIcon
     * = new ImageIcon(((Visible)copy).getVisual().scale(0.33)); displayName =
     * ((Visible)copy).getVisual().getText(); }
     *
     * JTreeLeafDetails metaLeaf = new JTreeLeafDetails(displayName, copy,
     * scaledIcon); DefaultMutableTreeNode newUserComp = new
     * DefaultMutableTreeNode(metaLeaf); model.insertNodeInto(newUserComp,
     * m_userCompNode, 0);
     *
     * // add to the list of user components m_userComponents.add(copy);
     *
     * if (installListener && m_firstUserComponentOpp) { try {
     * installWindowListenerForSavingUserBeans(); m_firstUserComponentOpp =
     * false; } catch (Exception ex) { ex.printStackTrace(); } }
     *
     * // Now reinstate any deleted connections to the original MetaBean for
     * (int i = 0; i < tempRemovedConnections.size(); i++) { BeanConnection temp
     * = (BeanConnection)tempRemovedConnections.elementAt(i); BeanConnection
     * newC = new BeanConnection(temp.getSource(), temp.getTarget(),
     * temp.getSourceEventSetDescriptor(),
     * m_mainKFPerspective.getCurrentTabIndex()); }
     */
/*
     * for (int i = 0; i < beans.size(); i++) { BeanInstance tempB =
     * (BeanInstance)beans.elementAt(i); if (tempB.getBean() instanceof Visible)
     * { ((Visible)(tempB.getBean())).getVisual().
     * addPropertyChangeListener(KnowledgeFlowApp.this);
     *
     * if (tempB.getBean() instanceof MetaBean) { ((MetaBean)tempB.getBean()).
     * addPropertyChangeListenersSubFlow(KnowledgeFlowApp.this); } // Restore
     * the default background colour ((Visible)(tempB.getBean())).getVisual().
     * setBackground(bckC); ((JComponent)(tempB.getBean())).setBackground(bckC);
     * } }
     */
}
