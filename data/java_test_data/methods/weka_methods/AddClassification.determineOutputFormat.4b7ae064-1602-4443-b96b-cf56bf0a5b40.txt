@Override
protected Instances determineOutputFormat(Instances inputFormat) throws Exception {
    Instances result;
    int i;
    ArrayList<String> values;
    int classindex;
    classindex = -1;
    // Need to get actual class attribute from saved model if we are working with a saved model and it
    // is an InputMappedClassifier.
    Attribute classAttribute = inputFormat.classIndex() >= 0 ? inputFormat.classAttribute() : null;
    Classifier classifier = getActualClassifier();
    if (!getSerializedClassifierFile().isDirectory()) {
        if (classifier instanceof InputMappedClassifier) {
            classAttribute = ((InputMappedClassifier) classifier).getModelHeader(new Instances(inputFormat, 0)).classAttribute();
        }
    } else {
        if ((classAttribute == null) && (!(classifier instanceof InputMappedClassifier))) {
            throw new IllegalArgumentException("AddClassification: class must be set if InputMappedClassifier is not used.");
        }
    }
    // copy old attributes
    ArrayList<Attribute> atts = new ArrayList<Attribute>();
    for (i = 0; i < inputFormat.numAttributes(); i++) {
        // remove class?
        if ((i == inputFormat.classIndex()) && (getRemoveOldClass())) {
            continue;
        }
        // record class index
        if (i == inputFormat.classIndex()) {
            classindex = i;
        }
        atts.add((Attribute) inputFormat.attribute(i).copy());
    }
    // 1. classification?
    if (getOutputClassification()) {
        // if old class got removed, use this one
        if (classindex == -1) {
            classindex = atts.size();
        }
        atts.add(classAttribute.copy("classification"));
    }
    // 2. distribution?
    if (getOutputDistribution()) {
        if (classAttribute.isNominal()) {
            for (i = 0; i < classAttribute.numValues(); i++) {
                atts.add(new Attribute("distribution_" + classAttribute.value(i)));
            }
        } else {
            atts.add(new Attribute("distribution"));
        }
    }
    // 2. error flag?
    if (getOutputErrorFlag()) {
        if (classAttribute.isNominal()) {
            values = new ArrayList<String>();
            values.add("no");
            values.add("yes");
            atts.add(new Attribute("error", values));
        } else {
            atts.add(new Attribute("error"));
        }
    }
    // generate new header
    result = new Instances(inputFormat.relationName(), atts, 0);
    result.setClassIndex(classindex);
    return result;
}
