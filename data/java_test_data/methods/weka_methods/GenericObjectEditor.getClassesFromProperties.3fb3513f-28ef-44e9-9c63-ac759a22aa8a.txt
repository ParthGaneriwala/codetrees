protected Hashtable<String, HierarchyPropertyParser> getClassesFromProperties() {
    Hashtable<String, HierarchyPropertyParser> hpps = new Hashtable<String, HierarchyPropertyParser>();
    String className = m_ClassType.getName();
    Set<String> cls = PluginManager.getPluginNamesOfType(className);
    if (cls == null) {
        return hpps;
    }
    List<String> toSort = new ArrayList<String>(cls);
    Collections.sort(toSort, new ClassDiscovery.StringCompare());
    StringBuilder b = new StringBuilder();
    for (String s : toSort) {
        b.append(s).append(",");
    }
    String listS = b.substring(0, b.length() - 1);
    // Hashtable typeOptions =
    // sortClassesByRoot(EDITOR_PROPERTIES.getProperty(className));
    Hashtable<String, String> typeOptions = sortClassesByRoot(listS);
    if (typeOptions == null) {
    /*
       * System.err.println("Warning: No configuration property found in\n" +
       * PROPERTY_FILE + "\n" + "for " + className);
       */
    } else {
        try {
            Enumeration<String> enm = typeOptions.keys();
            while (enm.hasMoreElements()) {
                String root = enm.nextElement();
                String typeOption = typeOptions.get(root);
                HierarchyPropertyParser hpp = new HierarchyPropertyParser();
                hpp.build(typeOption, ", ");
                hpps.put(root, hpp);
            }
        } catch (Exception ex) {
            Logger.log(weka.core.logging.Logger.Level.WARNING, "Invalid property: " + typeOptions);
        }
    }
    return hpps;
}
