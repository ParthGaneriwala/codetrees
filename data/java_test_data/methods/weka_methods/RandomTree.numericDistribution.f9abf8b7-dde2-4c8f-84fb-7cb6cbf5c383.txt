protected double numericDistribution(double[][] props, double[][][] dists, int att, double[][] subsetWeights, Instances data, double[] vals) throws Exception {
    double splitPoint = Double.NaN;
    Attribute attribute = data.attribute(att);
    double[][] dist = null;
    double[] sums = null;
    double[] sumSquared = null;
    double[] sumOfWeights = null;
    double totalSum = 0, totalSumSquared = 0, totalSumOfWeights = 0;
    int indexOfFirstMissingValue = data.numInstances();
    if (attribute.isNominal()) {
        sums = new double[attribute.numValues()];
        sumSquared = new double[attribute.numValues()];
        sumOfWeights = new double[attribute.numValues()];
        int attVal;
        for (int i = 0; i < data.numInstances(); i++) {
            Instance inst = data.instance(i);
            if (inst.isMissing(att)) {
                // Skip missing values at this stage
                if (indexOfFirstMissingValue == data.numInstances()) {
                    indexOfFirstMissingValue = i;
                }
                continue;
            }
            attVal = (int) inst.value(att);
            sums[attVal] += inst.classValue() * inst.weight();
            sumSquared[attVal] += inst.classValue() * inst.classValue() * inst.weight();
            sumOfWeights[attVal] += inst.weight();
        }
        totalSum = Utils.sum(sums);
        totalSumSquared = Utils.sum(sumSquared);
        totalSumOfWeights = Utils.sum(sumOfWeights);
    } else {
        // For numeric attributes
        sums = new double[2];
        sumSquared = new double[2];
        sumOfWeights = new double[2];
        double[] currSums = new double[2];
        double[] currSumSquared = new double[2];
        double[] currSumOfWeights = new double[2];
        // Sort data
        data.sort(att);
        // Move all instances into second subset
        for (int j = 0; j < data.numInstances(); j++) {
            Instance inst = data.instance(j);
            if (inst.isMissing(att)) {
                // Can stop as soon as we hit a missing value
                indexOfFirstMissingValue = j;
                break;
            }
            currSums[1] += inst.classValue() * inst.weight();
            currSumSquared[1] += inst.classValue() * inst.classValue() * inst.weight();
            currSumOfWeights[1] += inst.weight();
        }
        totalSum = currSums[1];
        totalSumSquared = currSumSquared[1];
        totalSumOfWeights = currSumOfWeights[1];
        sums[1] = currSums[1];
        sumSquared[1] = currSumSquared[1];
        sumOfWeights[1] = currSumOfWeights[1];
        // Try all possible split points
        double currSplit = data.instance(0).value(att);
        double currVal, bestVal = Double.MAX_VALUE;
        for (int i = 0; i < indexOfFirstMissingValue; i++) {
            Instance inst = data.instance(i);
            if (inst.value(att) > currSplit) {
                currVal = RandomTree.variance(currSums, currSumSquared, currSumOfWeights);
                if (currVal < bestVal) {
                    bestVal = currVal;
                    splitPoint = (inst.value(att) + currSplit) / 2.0;
                    // Check for numeric precision problems
                    if (splitPoint <= currSplit) {
                        splitPoint = inst.value(att);
                    }
                    for (int j = 0; j < 2; j++) {
                        sums[j] = currSums[j];
                        sumSquared[j] = currSumSquared[j];
                        sumOfWeights[j] = currSumOfWeights[j];
                    }
                }
            }
            currSplit = inst.value(att);
            double classVal = inst.classValue() * inst.weight();
            double classValSquared = inst.classValue() * classVal;
            currSums[0] += classVal;
            currSumSquared[0] += classValSquared;
            currSumOfWeights[0] += inst.weight();
            currSums[1] -= classVal;
            currSumSquared[1] -= classValSquared;
            currSumOfWeights[1] -= inst.weight();
        }
    }
    // Compute weights
    props[0] = new double[sums.length];
    for (int k = 0; k < props[0].length; k++) {
        props[0][k] = sumOfWeights[k];
    }
    if (!(Utils.sum(props[0]) > 0)) {
        for (int k = 0; k < props[0].length; k++) {
            props[0][k] = 1.0 / props[0].length;
        }
    } else {
        Utils.normalize(props[0]);
    }
    // Distribute weights for instances with missing values
    for (int i = indexOfFirstMissingValue; i < data.numInstances(); i++) {
        Instance inst = data.instance(i);
        for (int j = 0; j < sums.length; j++) {
            sums[j] += props[0][j] * inst.classValue() * inst.weight();
            sumSquared[j] += props[0][j] * inst.classValue() * inst.classValue() * inst.weight();
            sumOfWeights[j] += props[0][j] * inst.weight();
        }
        totalSum += inst.classValue() * inst.weight();
        totalSumSquared += inst.classValue() * inst.classValue() * inst.weight();
        totalSumOfWeights += inst.weight();
    }
    // Compute final distribution
    dist = new double[sums.length][data.numClasses()];
    for (int j = 0; j < sums.length; j++) {
        if (sumOfWeights[j] > 0) {
            dist[j][0] = sums[j] / sumOfWeights[j];
        } else {
            dist[j][0] = totalSum / totalSumOfWeights;
        }
    }
    // Compute variance gain
    double priorVar = singleVariance(totalSum, totalSumSquared, totalSumOfWeights);
    double var = variance(sums, sumSquared, sumOfWeights);
    double gain = priorVar - var;
    // Return distribution and split point
    subsetWeights[att] = sumOfWeights;
    dists[0] = dist;
    vals[att] = gain;
    return splitPoint;
}
