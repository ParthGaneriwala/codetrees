public void testNegativeCount() {
    Stats stats;
    Stats reference;
    // go negative right from the start
    stats = getStats();
    subtractWeightedStats(stats, weightedValues1);
    checkStatsNegativeCount(stats);
    stats.calculateDerived();
    checkStatsNegativeCount(stats);
    // go first positive and only afterwards negative
    stats = getStats();
    addWeightedStats(stats, weightedValues1);
    stats.calculateDerived();
    checkStatsValidState(stats);
    subtractWeightedStats(stats, weightedValues1);
    checkStatsInitialized(stats);
    stats.calculateDerived();
    checkStatsInitialized(stats);
    subtractWeightedStats(stats, weightedValues2);
    checkStatsNegativeCount(stats);
    stats.calculateDerived();
    checkStatsNegativeCount(stats);
    // go first negative and then recover
    reference = getStats();
    stats = getStats();
    subtractWeightedStats(stats, weightedValues1);
    checkStatsNegativeCount(stats);
    addWeightedStats(stats, weightedValues1);
    checkStatsInitialized(stats);
    stats.calculateDerived();
    checkStatsInitialized(stats);
    addWeightedStats(stats, weightedValues1);
    stats.calculateDerived();
    checkStatsValidState(stats);
    addWeightedStats(reference, weightedValues1);
    reference.calculateDerived();
    checkStats(stats, "Incorrect behaviour after negative count recovry!", reference, 0.0);
    // go first positive, then negative, then recover
    stats = getStats();
    reference = getStats();
    addWeightedStats(stats, weightedValues3);
    stats.calculateDerived();
    checkStatsValidState(stats);
    subtractWeightedStats(stats, weightedValues3);
    checkStatsInitialized(stats);
    stats.calculateDerived();
    checkStatsInitialized(stats);
    subtractWeightedStats(stats, weightedValues2);
    checkStatsNegativeCount(stats);
    stats.calculateDerived();
    checkStatsNegativeCount(stats);
    subtractWeightedStats(stats, weightedValues1);
    checkStatsNegativeCount(stats);
    stats.calculateDerived();
    checkStatsNegativeCount(stats);
    addWeightedStats(stats, weightedValues2);
    checkStatsNegativeCount(stats);
    stats.calculateDerived();
    checkStatsNegativeCount(stats);
    addWeightedStats(stats, weightedValues1);
    checkStatsInitialized(stats);
    stats.calculateDerived();
    checkStatsInitialized(stats);
    addWeightedStats(stats, weightedValues3);
    stats.calculateDerived();
    checkStatsValidState(stats);
    addWeightedStats(reference, weightedValues3);
    reference.calculateDerived();
    checkStats(stats, "Incorrect behaviour after negative count recovery!", reference, 0.0);
}
