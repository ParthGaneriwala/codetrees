@Override
public void init() throws WekaException {
    addButton(m_clearButton);
    m_history = new ResultHistoryPanel(null);
    m_history.setBorder(BorderFactory.createTitledBorder("Result list"));
    m_history.setHandleRightClicks(false);
    m_history.setDeleteListener(new ResultHistoryPanel.RDeleteListener() {

        @Override
        public void entryDeleted(String name, int index) {
            ((CostBenefitAnalysis) getStep()).getDatasets().remove(index);
        }

        @Override
        public void entriesDeleted(java.util.List<String> names, java.util.List<Integer> indexes) {
            List<Data> ds = ((CostBenefitAnalysis) getStep()).getDatasets();
            List<Data> toRemove = new ArrayList<Data>();
            for (int i : indexes) {
                toRemove.add(ds.get(i));
            }
            ds.removeAll(toRemove);
        }
    });
    m_history.getList().addMouseListener(new ResultHistoryPanel.RMouseAdapter() {

        private static final long serialVersionUID = -5174882230278923704L;

        @Override
        public void mouseClicked(MouseEvent e) {
            int index = m_history.getList().locationToIndex(e.getPoint());
            if (index != -1) {
                String name = m_history.getNameAtIndex(index);
                // doPopup(name);
                Object data = m_history.getNamedObject(name);
                if (data instanceof Data) {
                    PlotData2D threshData = ((Data) data).getPrimaryPayload();
                    Attribute classAtt = ((Data) data).getPayloadElement(StepManager.CON_AUX_DATA_CLASS_ATTRIBUTE);
                    try {
                        m_cbPanel.setDataSet(threshData, classAtt);
                        m_cbPanel.repaint();
                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }
                }
            }
        }
    });
    m_history.getList().getSelectionModel().addListSelectionListener(new ListSelectionListener() {

        @Override
        public void valueChanged(ListSelectionEvent e) {
            if (!e.getValueIsAdjusting()) {
                ListSelectionModel lm = (ListSelectionModel) e.getSource();
                for (int i = e.getFirstIndex(); i <= e.getLastIndex(); i++) {
                    if (lm.isSelectedIndex(i)) {
                        // m_AttSummaryPanel.setAttribute(i);
                        if (i != -1) {
                            String name = m_history.getNameAtIndex(i);
                            Object data = m_history.getNamedObject(name);
                            if (data != null && data instanceof Data) {
                                PlotData2D threshData = ((Data) data).getPrimaryPayload();
                                Attribute classAtt = ((Data) data).getPayloadElement(StepManager.CON_AUX_DATA_CLASS_ATTRIBUTE);
                                try {
                                    m_cbPanel.setDataSet(threshData, classAtt);
                                    m_cbPanel.repaint();
                                } catch (Exception ex) {
                                    ex.printStackTrace();
                                }
                            }
                        }
                        break;
                    }
                }
            }
        }
    });
    m_splitPane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT, m_history, m_cbPanel);
    add(m_splitPane, BorderLayout.CENTER);
    m_cbPanel.setPreferredSize(new Dimension(1000, 600));
    boolean first = true;
    for (Data d : ((CostBenefitAnalysis) getStep()).getDatasets()) {
        PlotData2D threshData = d.getPrimaryPayload();
        Attribute classAtt = d.getPayloadElement(StepManager.CON_AUX_DATA_CLASS_ATTRIBUTE);
        String title = threshData.getPlotName();
        m_history.addResult(title, new StringBuffer());
        m_history.addObject(title, d);
        if (first) {
            try {
                m_cbPanel.setDataSet(threshData, classAtt);
                m_cbPanel.repaint();
                first = false;
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }
    m_clearButton.addActionListener(new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent e) {
            m_history.clearResults();
            ((CostBenefitAnalysis) getStep()).getDatasets().clear();
            m_splitPane.remove(m_cbPanel);
            m_splitPane.revalidate();
        }
    });
}
