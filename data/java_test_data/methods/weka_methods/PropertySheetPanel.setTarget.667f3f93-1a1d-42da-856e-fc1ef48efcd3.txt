public synchronized void setTarget(Object targ) {
    if (m_env == null) {
        m_env = Environment.getSystemWide();
    }
    // used to offset the components for the properties of targ
    // if there happens to be globalInfo available in targ
    int componentOffset = 0;
    // Close any child windows at this point
    removeAll();
    setLayout(new BorderLayout());
    JPanel scrollablePanel = new JPanel();
    JScrollPane scrollPane = new JScrollPane(scrollablePanel);
    scrollPane.setBorder(BorderFactory.createEmptyBorder());
    add(scrollPane, BorderLayout.CENTER);
    GridBagLayout gbLayout = new GridBagLayout();
    scrollablePanel.setLayout(gbLayout);
    setVisible(false);
    m_NumEditable = 0;
    m_Target = targ;
    Class<?> custClass = null;
    try {
        BeanInfo bi = Introspector.getBeanInfo(m_Target.getClass());
        m_Properties = bi.getPropertyDescriptors();
        m_Methods = bi.getMethodDescriptors();
        custClass = Introspector.getBeanInfo(m_Target.getClass()).getBeanDescriptor().getCustomizerClass();
    } catch (IntrospectionException ex) {
        System.err.println("PropertySheet: Couldn't introspect");
        return;
    }
    JTextArea jt = new JTextArea();
    m_HelpText = null;
    // Look for a globalInfo method that returns a string
    // describing the target
    Object[] args = {};
    boolean firstTip = true;
    StringBuffer optionsBuff = new StringBuffer();
    for (MethodDescriptor m_Method : m_Methods) {
        String name = m_Method.getDisplayName();
        Method meth = m_Method.getMethod();
        OptionMetadata o = meth.getAnnotation(OptionMetadata.class);
        if (name.endsWith("TipText") || o != null) {
            if (meth.getReturnType().equals(String.class) || o != null) {
                try {
                    String tempTip = o != null ? o.description() : (String) (meth.invoke(m_Target, args));
                    // int ci = tempTip.indexOf('.');
                    name = o != null ? o.displayName() : name;
                    if (firstTip) {
                        optionsBuff.append("OPTIONS\n");
                        firstTip = false;
                    }
                    tempTip = tempTip.replace("<html>", "").replace("</html>", "").replace("<br>", "\n").replace("<p>", "\n\n");
                    optionsBuff.append(name.replace("TipText", "")).append(" -- ");
                    optionsBuff.append(tempTip).append("\n\n");
                // jt.setText(m_HelpText.toString());
                } catch (Exception ex) {
                }
            // break;
            }
        }
        if (name.equals("globalInfo")) {
            if (meth.getReturnType().equals(String.class)) {
                try {
                    // Object args[] = { };
                    String globalInfo = (String) (meth.invoke(m_Target, args));
                    String summary = globalInfo;
                    int ci = globalInfo.indexOf('.');
                    if (ci != -1) {
                        summary = globalInfo.substring(0, ci + 1);
                    }
                    final String className = targ.getClass().getName();
                    m_HelpText = new StringBuffer("NAME\n");
                    m_HelpText.append(className).append("\n\n");
                    m_HelpText.append("SYNOPSIS\n").append(globalInfo).append("\n\n");
                    m_HelpBut = new JButton("More");
                    m_HelpBut.setToolTipText("More information about " + className);
                    m_HelpBut.addActionListener(new ActionListener() {

                        @Override
                        public void actionPerformed(ActionEvent a) {
                            openHelpFrame();
                            m_HelpBut.setEnabled(false);
                        }
                    });
                    if (m_Target instanceof CapabilitiesHandler) {
                        m_CapabilitiesBut = new JButton("Capabilities");
                        m_CapabilitiesBut.setToolTipText("The capabilities of " + className);
                        m_CapabilitiesBut.addActionListener(new ActionListener() {

                            @Override
                            public void actionPerformed(ActionEvent a) {
                                openCapabilitiesHelpDialog();
                                m_CapabilitiesBut.setEnabled(false);
                            }
                        });
                    } else {
                        m_CapabilitiesBut = null;
                    }
                    jt.setColumns(30);
                    jt.setFont(new Font("SansSerif", Font.PLAIN, 12));
                    jt.setEditable(false);
                    jt.setLineWrap(true);
                    jt.setWrapStyleWord(true);
                    jt.setText(summary);
                    jt.setBackground(getBackground());
                    JPanel jp = new JPanel();
                    jp.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createTitledBorder("About"), BorderFactory.createEmptyBorder(5, 5, 5, 5)));
                    jp.setLayout(new BorderLayout());
                    jp.add(jt, BorderLayout.CENTER);
                    JPanel p2 = new JPanel();
                    p2.setLayout(new BorderLayout());
                    p2.add(m_HelpBut, BorderLayout.NORTH);
                    if (m_CapabilitiesBut != null) {
                        JPanel p3 = new JPanel();
                        p3.setLayout(new BorderLayout());
                        p3.add(m_CapabilitiesBut, BorderLayout.NORTH);
                        p2.add(p3, BorderLayout.CENTER);
                    }
                    jp.add(p2, BorderLayout.EAST);
                    GridBagConstraints gbConstraints = new GridBagConstraints();
                    // gbConstraints.anchor = GridBagConstraints.EAST;
                    gbConstraints.fill = GridBagConstraints.BOTH;
                    // gbConstraints.gridy = 0; gbConstraints.gridx = 0;
                    gbConstraints.gridwidth = 2;
                    gbConstraints.insets = new Insets(0, 5, 0, 5);
                    gbLayout.setConstraints(jp, gbConstraints);
                    m_aboutPanel = jp;
                    if (m_showAboutPanel) {
                        scrollablePanel.add(m_aboutPanel);
                    }
                    componentOffset = 1;
                // break;
                } catch (Exception ex) {
                }
            }
        }
    }
    if (m_HelpText != null) {
        m_HelpText.append(optionsBuff.toString());
    }
    if (custClass != null) {
        // System.out.println("**** We've found a customizer for this object!");
        try {
            Object customizer = custClass.newInstance();
            if (customizer instanceof JComponent && customizer instanceof GOECustomizer) {
                m_Customizer = (GOECustomizer) customizer;
                m_Customizer.dontShowOKCancelButtons();
                m_Customizer.setObject(m_Target);
                GridBagConstraints gbc = new GridBagConstraints();
                gbc.fill = GridBagConstraints.BOTH;
                gbc.gridwidth = 2;
                gbc.gridy = componentOffset;
                gbc.gridx = 0;
                gbc.insets = new Insets(0, 5, 0, 5);
                gbLayout.setConstraints((JComponent) m_Customizer, gbc);
                scrollablePanel.add((JComponent) m_Customizer);
                validate();
                // sometimes, the calculated dimensions seem to be too small and the
                // scrollbars show up, though there is still plenty of space on the
                // screen. hence we increase the dimensions a bit to fix this.
                Dimension dim = scrollablePanel.getPreferredSize();
                dim.height += 20;
                dim.width += 20;
                scrollPane.setPreferredSize(dim);
                validate();
                setVisible(true);
                return;
            }
        } catch (InstantiationException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }
    int[] propOrdering = new int[m_Properties.length];
    for (int i = 0; i < propOrdering.length; i++) {
        propOrdering[i] = Integer.MAX_VALUE;
    }
    for (int i = 0; i < m_Properties.length; i++) {
        Method getter = m_Properties[i].getReadMethod();
        Method setter = m_Properties[i].getWriteMethod();
        if (getter == null || setter == null) {
            continue;
        }
        List<Annotation> annotations = new ArrayList<Annotation>();
        if (setter.getDeclaredAnnotations().length > 0) {
            annotations.addAll(Arrays.asList(setter.getDeclaredAnnotations()));
        }
        if (getter.getDeclaredAnnotations().length > 0) {
            annotations.addAll(Arrays.asList(getter.getDeclaredAnnotations()));
        }
        for (Annotation a : annotations) {
            if (a instanceof OptionMetadata) {
                propOrdering[i] = ((OptionMetadata) a).displayOrder();
                break;
            }
        }
    }
    int[] sortedPropOrderings = Utils.sort(propOrdering);
    m_Editors = new PropertyEditor[m_Properties.length];
    m_Values = new Object[m_Properties.length];
    m_Views = new JComponent[m_Properties.length];
    m_Labels = new JLabel[m_Properties.length];
    m_TipTexts = new String[m_Properties.length];
    // boolean firstTip = true;
    for (int i = 0; i < m_Properties.length; i++) {
        // Don't display hidden or expert properties.
        if (m_Properties[sortedPropOrderings[i]].isHidden() || m_Properties[sortedPropOrderings[i]].isExpert()) {
            continue;
        }
        String name = m_Properties[sortedPropOrderings[i]].getDisplayName();
        String origName = name;
        Class<?> type = m_Properties[sortedPropOrderings[i]].getPropertyType();
        Method getter = m_Properties[sortedPropOrderings[i]].getReadMethod();
        Method setter = m_Properties[sortedPropOrderings[i]].getWriteMethod();
        // Only display read/write properties.
        if (getter == null || setter == null) {
            continue;
        }
        List<Annotation> annotations = new ArrayList<Annotation>();
        if (setter.getDeclaredAnnotations().length > 0) {
            annotations.addAll(Arrays.asList(setter.getDeclaredAnnotations()));
        }
        if (getter.getDeclaredAnnotations().length > 0) {
            annotations.addAll(Arrays.asList(getter.getDeclaredAnnotations()));
        }
        boolean skip = false;
        boolean password = false;
        FilePropertyMetadata fileProp = null;
        for (Annotation a : annotations) {
            if (a instanceof ProgrammaticProperty) {
                // skip property that is only supposed to be manipulated programatically
                skip = true;
                break;
            }
            if (a instanceof OptionMetadata) {
                name = ((OptionMetadata) a).displayName();
                String tempTip = ((OptionMetadata) a).description();
                int ci = tempTip.indexOf('.');
                if (ci < 0) {
                    m_TipTexts[sortedPropOrderings[i]] = tempTip;
                } else {
                    m_TipTexts[sortedPropOrderings[i]] = tempTip.substring(0, ci);
                }
            }
            if (a instanceof PasswordProperty) {
                password = true;
            }
            if (a instanceof FilePropertyMetadata) {
                fileProp = (FilePropertyMetadata) a;
            }
        }
        if (skip) {
            continue;
        }
        JComponent view = null;
        try {
            // Object args[] = { };
            Object value = getter.invoke(m_Target, args);
            m_Values[sortedPropOrderings[i]] = value;
            PropertyEditor editor = null;
            Class<?> pec = m_Properties[sortedPropOrderings[i]].getPropertyEditorClass();
            if (pec != null) {
                try {
                    editor = (PropertyEditor) pec.newInstance();
                } catch (Exception ex) {
                // Drop through.
                }
            }
            if (editor == null) {
                if (password && String.class.isAssignableFrom(type)) {
                    editor = new PasswordField();
                } else if (m_useEnvironmentPropertyEditors && String.class.isAssignableFrom(type)) {
                    editor = new EnvironmentField();
                } else if ((m_useEnvironmentPropertyEditors || fileProp != null) && File.class.isAssignableFrom(type)) {
                    if (fileProp != null) {
                        editor = new FileEnvironmentField("", fileProp.fileChooserDialogType(), fileProp.directoriesOnly());
                    } else {
                        editor = new FileEnvironmentField();
                    }
                } else {
                    editor = PropertyEditorManager.findEditor(type);
                }
            }
            m_Editors[sortedPropOrderings[i]] = editor;
            // If we can't edit this component, skip it.
            if (editor == null) {
                /*
           * System.err.println("Warning: Can't find public property editor" +
           * " for property \"" + name + "\" (class \"" + type.getName() +
           * "\").  Skipping.");
           */
                continue;
            }
            if (editor instanceof GenericObjectEditor) {
                ((GenericObjectEditor) editor).setClassType(type);
            }
            if (editor instanceof EnvironmentHandler) {
                ((EnvironmentHandler) editor).setEnvironment(m_env);
            }
            // Don't try to set null values:
            if (value == null) {
                /*
           * if (getterClass.indexOf("java.") != 0) {
           * System.err.println("Warning: Property \"" + name +
           * "\" has null initial value.  Skipping."); }
           */
                continue;
            }
            editor.setValue(value);
            if (m_TipTexts[sortedPropOrderings[i]] == null) {
                // now look for a TipText method for this property
                String tipName = origName + "TipText";
                for (MethodDescriptor m_Method : m_Methods) {
                    String mname = m_Method.getDisplayName();
                    Method meth = m_Method.getMethod();
                    if (mname.equals(tipName)) {
                        if (meth.getReturnType().equals(String.class)) {
                            try {
                                String tempTip = (String) (meth.invoke(m_Target, args));
                                int ci = tempTip.indexOf('.');
                                if (ci < 0) {
                                    m_TipTexts[sortedPropOrderings[i]] = tempTip;
                                } else {
                                    m_TipTexts[sortedPropOrderings[i]] = tempTip.substring(0, ci);
                                }
                            /*
                 * if (m_HelpText != null) { if (firstTip) {
                 * m_HelpText.append("OPTIONS\n"); firstTip = false; }
                 * m_HelpText.append(name).append(" -- ");
                 * m_HelpText.append(tempTip).append("\n\n");
                 * //jt.setText(m_HelpText.toString()); }
                 */
                            } catch (Exception ex) {
                            }
                            break;
                        }
                    }
                }
            }
            // Now figure out how to display it...
            if (editor.isPaintable() && editor.supportsCustomEditor()) {
                view = new PropertyPanel(editor);
            } else if (editor.supportsCustomEditor() && (editor.getCustomEditor() instanceof JComponent)) {
                view = (JComponent) editor.getCustomEditor();
            } else if (editor.getTags() != null) {
                view = new PropertyValueSelector(editor);
            } else if (editor.getAsText() != null) {
                view = new PropertyText(editor);
            } else {
                System.err.println("Warning: Property \"" + name + "\" has non-displayabale editor.  Skipping.");
                continue;
            }
            editor.addPropertyChangeListener(this);
        } catch (InvocationTargetException ex) {
            System.err.println("Skipping property " + name + " ; exception on target: " + ex.getTargetException());
            ex.getTargetException().printStackTrace();
            continue;
        } catch (Exception ex) {
            System.err.println("Skipping property " + name + " ; exception: " + ex);
            ex.printStackTrace();
            continue;
        }
        m_Labels[sortedPropOrderings[i]] = new JLabel(name, SwingConstants.RIGHT);
        m_Labels[sortedPropOrderings[i]].setBorder(BorderFactory.createEmptyBorder(10, 10, 0, 5));
        m_Views[sortedPropOrderings[i]] = view;
        GridBagConstraints gbConstraints = new GridBagConstraints();
        gbConstraints.anchor = GridBagConstraints.EAST;
        gbConstraints.fill = GridBagConstraints.HORIZONTAL;
        gbConstraints.gridy = i + componentOffset;
        gbConstraints.gridx = 0;
        gbLayout.setConstraints(m_Labels[sortedPropOrderings[i]], gbConstraints);
        scrollablePanel.add(m_Labels[sortedPropOrderings[i]]);
        JPanel newPanel = new JPanel();
        if (m_TipTexts[sortedPropOrderings[i]] != null) {
            m_Views[sortedPropOrderings[i]].setToolTipText(m_TipTexts[sortedPropOrderings[i]]);
            m_Labels[sortedPropOrderings[i]].setToolTipText(m_TipTexts[sortedPropOrderings[i]]);
        }
        newPanel.setBorder(BorderFactory.createEmptyBorder(10, 5, 0, 10));
        newPanel.setLayout(new BorderLayout());
        newPanel.add(m_Views[sortedPropOrderings[i]], BorderLayout.CENTER);
        gbConstraints = new GridBagConstraints();
        gbConstraints.anchor = GridBagConstraints.WEST;
        gbConstraints.fill = GridBagConstraints.BOTH;
        gbConstraints.gridy = i + componentOffset;
        gbConstraints.gridx = 1;
        gbConstraints.weightx = 100;
        gbLayout.setConstraints(newPanel, gbConstraints);
        scrollablePanel.add(newPanel);
        m_NumEditable++;
    }
    if (m_NumEditable == 0) {
        JLabel empty = new JLabel("No editable properties", SwingConstants.CENTER);
        Dimension d = empty.getPreferredSize();
        empty.setPreferredSize(new Dimension(d.width * 2, d.height * 2));
        empty.setBorder(BorderFactory.createEmptyBorder(10, 5, 0, 10));
        GridBagConstraints gbConstraints = new GridBagConstraints();
        gbConstraints.anchor = GridBagConstraints.CENTER;
        gbConstraints.fill = GridBagConstraints.HORIZONTAL;
        gbConstraints.gridy = componentOffset;
        gbConstraints.gridx = 0;
        gbLayout.setConstraints(empty, gbConstraints);
        scrollablePanel.add(empty);
    }
    validate();
    // sometimes, the calculated dimensions seem to be too small and the
    // scrollbars show up, though there is still plenty of space on the
    // screen. hence we increase the dimensions a bit to fix this.
    Dimension dim = scrollablePanel.getPreferredSize();
    dim.height += 20;
    dim.width += 20;
    scrollPane.setPreferredSize(dim);
    validate();
    setVisible(true);
}
