@Override
public String[] getOptions() {
    Vector<String> result = new Vector<String>();
    result.add("-init");
    result.add("" + getInitializationMethod().getSelectedTag().getID());
    if (m_speedUpDistanceCompWithCanopies) {
        result.add("-C");
    }
    result.add("-max-candidates");
    result.add("" + getCanopyMaxNumCanopiesToHoldInMemory());
    result.add("-periodic-pruning");
    result.add("" + getCanopyPeriodicPruningRate());
    result.add("-min-density");
    result.add("" + getCanopyMinimumCanopyDensity());
    result.add("-t1");
    result.add("" + getCanopyT1());
    result.add("-t2");
    result.add("" + getCanopyT2());
    if (m_displayStdDevs) {
        result.add("-V");
    }
    if (m_dontReplaceMissing) {
        result.add("-M");
    }
    result.add("-N");
    result.add("" + getNumClusters());
    result.add("-A");
    result.add((m_DistanceFunction.getClass().getName() + " " + Utils.joinOptions(m_DistanceFunction.getOptions())).trim());
    result.add("-I");
    result.add("" + getMaxIterations());
    if (m_PreserveOrder) {
        result.add("-O");
    }
    if (m_FastDistanceCalc) {
        result.add("-fast");
    }
    result.add("-num-slots");
    result.add("" + getNumExecutionSlots());
    Collections.addAll(result, super.getOptions());
    return result.toArray(new String[result.size()]);
}
