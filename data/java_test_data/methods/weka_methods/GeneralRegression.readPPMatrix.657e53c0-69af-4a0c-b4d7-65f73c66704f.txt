protected void readPPMatrix(Element model) throws Exception {
    Instances miningSchemaI = m_miningSchema.getFieldsAsInstances();
    NodeList matrixL = model.getElementsByTagName("PPMatrix");
    // should be exactly one PPMatrix
    if (matrixL.getLength() == 1) {
        // allocate space for the matrix
        // column that corresponds to the class will be empty (and will be missed out
        // when printing the model).
        m_ppMatrix = new PPCell[m_parameterList.size()][miningSchemaI.numAttributes()];
        Node ppM = matrixL.item(0);
        if (ppM.getNodeType() == Node.ELEMENT_NODE) {
            NodeList cellL = ((Element) ppM).getElementsByTagName("PPCell");
            for (int i = 0; i < cellL.getLength(); i++) {
                Node cell = cellL.item(i);
                if (cell.getNodeType() == Node.ELEMENT_NODE) {
                    String predictorName = ((Element) cell).getAttribute("predictorName");
                    String parameterName = ((Element) cell).getAttribute("parameterName");
                    String value = ((Element) cell).getAttribute("value");
                    double expOrIndex = -1;
                    int predictorIndex = -1;
                    int parameterIndex = -1;
                    for (int j = 0; j < m_parameterList.size(); j++) {
                        if (m_parameterList.get(j).m_name.equals(parameterName)) {
                            parameterIndex = j;
                            break;
                        }
                    }
                    if (parameterIndex == -1) {
                        throw new Exception("[GeneralRegression] unable to find parameter name " + parameterName + " in parameter list");
                    }
                    Predictor p = getCovariate(predictorName);
                    if (p != null) {
                        try {
                            expOrIndex = Double.parseDouble(value);
                            predictorIndex = p.m_miningSchemaIndex;
                        } catch (IllegalArgumentException ex) {
                            throw new Exception("[GeneralRegression] unable to parse PPCell value: " + value);
                        }
                    } else {
                        // try as a factor
                        p = getFactor(predictorName);
                        if (p != null) {
                            // to be treated as a factor, so we have to check for this
                            if (miningSchemaI.attribute(p.m_miningSchemaIndex).isNumeric()) {
                                // a factor here
                                try {
                                    expOrIndex = Double.parseDouble(value);
                                } catch (IllegalArgumentException ex) {
                                    throw new Exception("[GeneralRegresion] unable to parse PPCell value: " + value);
                                }
                            } else {
                                // it is a nominal attribute in the mining schema so find
                                // the index that correponds to this value
                                Attribute att = miningSchemaI.attribute(p.m_miningSchemaIndex);
                                expOrIndex = att.indexOfValue(value);
                                if (expOrIndex == -1) {
                                    throw new Exception("[GeneralRegression] unable to find PPCell value " + value + " in mining schema attribute " + att.name());
                                }
                            }
                        } else {
                            throw new Exception("[GeneralRegression] cant find predictor " + predictorName + "in either the factors list " + "or the covariates list");
                        }
                        predictorIndex = p.m_miningSchemaIndex;
                    }
                    // fill in cell value
                    PPCell ppc = new PPCell();
                    ppc.m_predictorName = predictorName;
                    ppc.m_parameterName = parameterName;
                    ppc.m_value = expOrIndex;
                    // TO-DO: ppc.m_targetCategory (when handling for multiple PPMatrixes is implemented)
                    m_ppMatrix[parameterIndex][predictorIndex] = ppc;
                }
            }
        }
    } else {
        throw new Exception("[GeneralRegression] more than one PPMatrix!");
    }
}
