@SuppressWarnings("unchecked")
private void doPopup(String name) {
    ArrayList<Object> graph;
    String grphString;
    int grphType;
    graph = (ArrayList<Object>) m_history.getNamedObject(name);
    grphType = ((Integer) graph.get(0)).intValue();
    grphString = (String) graph.get(graph.size() - 1);
    if (grphType == Drawable.TREE) {
        final javax.swing.JFrame jf = Utils.getWekaJFrame("Weka Classifier Tree Visualizer: " + name, m_resultsFrame);
        jf.getContentPane().setLayout(new BorderLayout());
        TreeVisualizer tv = new TreeVisualizer(null, grphString, new PlaceNode2());
        jf.getContentPane().add(tv, BorderLayout.CENTER);
        jf.addWindowListener(new java.awt.event.WindowAdapter() {

            @Override
            public void windowClosing(java.awt.event.WindowEvent e) {
                jf.dispose();
            }
        });
        jf.pack();
        jf.setSize(500, 400);
        jf.setLocationRelativeTo(m_resultsFrame);
        jf.setVisible(true);
    }
    if (grphType == Drawable.BayesNet) {
        final javax.swing.JFrame jf = Utils.getWekaJFrame("Weka Classifier Graph Visualizer: " + name, m_resultsFrame);
        jf.getContentPane().setLayout(new BorderLayout());
        GraphVisualizer gv = new GraphVisualizer();
        try {
            gv.readBIF(grphString);
        } catch (BIFFormatException be) {
            System.err.println("unable to visualize BayesNet");
            be.printStackTrace();
        }
        gv.layoutGraph();
        jf.getContentPane().add(gv, BorderLayout.CENTER);
        jf.addWindowListener(new java.awt.event.WindowAdapter() {

            @Override
            public void windowClosing(java.awt.event.WindowEvent e) {
                jf.dispose();
            }
        });
        jf.pack();
        jf.setSize(500, 400);
        jf.setLocationRelativeTo(m_resultsFrame);
        jf.setVisible(true);
    }
}
