public void loadDictionary(Reader reader) throws IOException {
    BufferedReader br = new BufferedReader(reader);
    m_consolidatedDict = new LinkedHashMap<String, int[]>();
    try {
        String line = br.readLine();
        int index = 0;
        if (line != null) {
            if (line.startsWith("@@@") && line.endsWith("@@@")) {
                String avgS = line.replace("@@@", "");
                try {
                    m_avgDocLength = Double.parseDouble(avgS);
                } catch (NumberFormatException ex) {
                    System.err.println("Unable to parse average document length '" + avgS + "'");
                }
                line = br.readLine();
                if (line == null) {
                    throw new IOException("Empty dictionary file!");
                }
            }
            boolean hasDocCounts = false;
            if (line.lastIndexOf(",") > 0) {
                String countS = line.substring(line.lastIndexOf(",") + 1, line.length()).trim();
                try {
                    int dCount = Integer.parseInt(countS);
                    hasDocCounts = true;
                    int[] holder = new int[2];
                    holder[1] = dCount;
                    holder[0] = index++;
                    m_consolidatedDict.put(line.substring(0, line.lastIndexOf(",")), holder);
                } catch (NumberFormatException ex) {
                // ignore quietly
                }
            }
            while ((line = br.readLine()) != null) {
                int[] holder = new int[hasDocCounts ? 2 : 1];
                holder[0] = index++;
                if (hasDocCounts) {
                    String countS = line.substring(line.lastIndexOf(",") + 1, line.length()).trim();
                    line = line.substring(0, line.lastIndexOf(","));
                    try {
                        int dCount = Integer.parseInt(countS);
                        holder[1] = dCount;
                    } catch (NumberFormatException e) {
                        throw new IOException(e);
                    }
                }
                m_consolidatedDict.put(line, holder);
            }
        } else {
            throw new IOException("Empty dictionary file!");
        }
    } finally {
        br.close();
    }
    try {
        m_outputFormat = getVectorizedFormat();
    } catch (Exception ex) {
        throw new IOException(ex);
    }
}
