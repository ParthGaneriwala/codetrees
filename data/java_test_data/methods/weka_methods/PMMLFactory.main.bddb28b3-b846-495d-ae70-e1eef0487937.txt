public static void main(String[] args) {
    try {
        String[] optionsTmp = new String[args.length];
        for (int i = 0; i < args.length; i++) {
            optionsTmp[i] = args[i];
        }
        String pmmlFile = Utils.getOption('l', optionsTmp);
        if (pmmlFile.length() == 0) {
            throw new Exception("[PMMLFactory] must specify a PMML file using the -l option.");
        }
        // see if it is supported before going any further
        getPMMLModel(pmmlFile, null);
        PMMLClassifierRunner pcr = new PMMLClassifierRunner();
        pcr.evaluatePMMLClassifier(args);
    /*
       * PMMLModel model = getPMMLModel(args[0], null);
       * System.out.println(model); if (args.length == 2) { // load an arff file
       * Instances testData = new Instances(new java.io.BufferedReader(new
       * java.io.FileReader(args[1]))); Instances miningSchemaI =
       * model.getMiningSchema().getFieldsAsInstances(); if
       * (miningSchemaI.classIndex() >= 0) { String className =
       * miningSchemaI.classAttribute().name(); for (int i = 0; i <
       * testData.numAttributes(); i++) { if
       * (testData.attribute(i).name().equals(className)) {
       * testData.setClassIndex(i); System.out.println("Found class " +
       * className + " in test data."); break; } } }
       * System.out.println(applyClassifier(model, testData)); }
       */
    } catch (Exception ex) {
        ex.printStackTrace();
    }
}
