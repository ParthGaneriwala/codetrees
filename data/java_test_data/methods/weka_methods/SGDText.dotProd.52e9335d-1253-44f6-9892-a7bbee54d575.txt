protected double dotProd(Map<String, Count> document) {
    double result = 0;
    // document normalization
    double iNorm = 0;
    double fv = 0;
    if (m_normalize) {
        for (Count c : document.values()) {
            // word counts or bag-of-words?
            fv = (m_wordFrequencies) ? c.m_count : 1.0;
            iNorm += Math.pow(Math.abs(fv), m_lnorm);
        }
        iNorm = Math.pow(iNorm, 1.0 / m_lnorm);
    }
    for (Map.Entry<String, Count> feature : document.entrySet()) {
        String word = feature.getKey();
        double freq = (m_wordFrequencies) ? feature.getValue().m_count : 1.0;
        // double freq = (feature.getValue().m_count / iNorm * m_norm);
        if (m_normalize) {
            freq *= (m_norm / iNorm);
        }
        Count weight = m_dictionary.get(word);
        if (weight != null && weight.m_count >= m_minWordP && Math.abs(weight.m_weight) >= m_minAbsCoefficient) {
            result += freq * weight.m_weight;
        }
    }
    return result;
}
