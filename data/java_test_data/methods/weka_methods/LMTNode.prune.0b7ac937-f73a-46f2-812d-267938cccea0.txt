public int prune(double[] alphas, double[] errors, Instances test) throws Exception {
    Vector<LMTNode> nodeList;
    CompareNode comparator = new CompareNode();
    // determine training error of logistic models and subtrees, and calculate
    // alpha-values from them
    treeErrors();
    calculateAlphas();
    // get list of all inner nodes in the tree
    nodeList = getNodes();
    boolean prune = (nodeList.size() > 0);
    // alpha_0 is always zero (unpruned tree)
    alphas[0] = 0;
    Evaluation eval;
    // error of unpruned tree
    if (errors != null) {
        eval = new Evaluation(test);
        eval.evaluateModel(this, test);
        errors[0] = eval.errorRate();
    }
    int iteration = 0;
    while (prune) {
        iteration++;
        // get node with minimum alpha
        LMTNode nodeToPrune = Collections.min(nodeList, comparator);
        nodeToPrune.m_isLeaf = true;
        // Do not set m_sons null, want to unprune
        // get alpha-value of node
        alphas[iteration] = nodeToPrune.m_alpha;
        // log error
        if (errors != null) {
            eval = new Evaluation(test);
            eval.evaluateModel(this, test);
            errors[iteration] = eval.errorRate();
        }
        // update errors/alphas
        treeErrors();
        calculateAlphas();
        nodeList = getNodes();
        prune = (nodeList.size() > 0);
    }
    // set last alpha 1 to indicate end
    alphas[iteration + 1] = 1.0;
    return iteration;
}
