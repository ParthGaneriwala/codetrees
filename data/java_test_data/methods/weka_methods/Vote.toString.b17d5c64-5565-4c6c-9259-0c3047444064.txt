@Override
public String toString() {
    if (m_Classifiers == null) {
        return "Vote: No model built yet.";
    }
    String result = "Vote combines";
    result += " the probability distributions of these base learners:\n";
    for (int i = 0; i < m_Classifiers.length; i++) {
        result += '\t' + getClassifierSpec(i) + '\n';
    }
    for (Classifier c : m_preBuiltClassifiers) {
        result += "\t" + c.getClass().getName() + Utils.joinOptions(((OptionHandler) c).getOptions()) + "\n";
    }
    result += "using the '";
    switch(m_CombinationRule) {
        case AVERAGE_RULE:
            result += "Average";
            break;
        case PRODUCT_RULE:
            result += "Product";
            break;
        case MAJORITY_VOTING_RULE:
            result += "Majority Voting";
            break;
        case MIN_RULE:
            result += "Minimum";
            break;
        case MAX_RULE:
            result += "Maximum";
            break;
        case MEDIAN_RULE:
            result += "Median";
            break;
        default:
            throw new IllegalStateException("Unknown combination rule '" + m_CombinationRule + "'!");
    }
    result += "' combination rule \n";
    StringBuilder resultBuilder = null;
    if (!m_dontPrintModels) {
        resultBuilder = new StringBuilder();
        resultBuilder.append(result).append("\nAll the models:\n\n");
        for (Classifier c : m_Classifiers) {
            resultBuilder.append(c).append("\n");
        }
        for (Classifier c : m_preBuiltClassifiers) {
            resultBuilder.append(c).append("\n");
        }
    }
    return resultBuilder == null ? result : resultBuilder.toString();
}
