protected MM findModelUsingNormalizedEntropy() {
    if (m_NumComponents > 0) {
        return buildModel(m_NumComponents, m_Values, m_Weights);
    }
    if (m_MaxNumComponents <= 1) {
        return buildModel(1, m_Values, m_Weights);
    }
    // Loglikelihood for one cluster
    MM bestMixtureModel = buildModel(1, m_Values, m_Weights);
    double loglikelihoodForOneCluster = bestMixtureModel.loglikelihood(m_Values, m_Weights);
    double bestNormalizedEntropy = 1;
    for (int i = 2; i <= m_MaxNumComponents; i++) {
        MM mixtureModel = buildModel(i, m_Values, m_Weights);
        double loglikelihood = mixtureModel.loglikelihood(m_Values, m_Weights);
        if (loglikelihood < loglikelihoodForOneCluster) {
            // This appears to happen in practice, hopefully not because of a bug...
            if (m_Debug) {
                System.err.println("Likelihood for one cluster greater than for " + i + " clusters.");
            }
            continue;
        }
        double entropy = entropy(mixtureModel);
        double normalizedEntropy = entropy / (loglikelihood - loglikelihoodForOneCluster);
        if (m_Debug) {
            System.err.println("Entropy: " + entropy + "\tLogLikelihood: " + loglikelihood + "\tLoglikelihood for one cluster: " + loglikelihoodForOneCluster + "\tNormalized entropy: " + normalizedEntropy + "\tNumber of components: " + i);
        }
        if (normalizedEntropy < bestNormalizedEntropy) {
            bestMixtureModel = mixtureModel;
            bestNormalizedEntropy = normalizedEntropy;
        }
    }
    return bestMixtureModel;
}
