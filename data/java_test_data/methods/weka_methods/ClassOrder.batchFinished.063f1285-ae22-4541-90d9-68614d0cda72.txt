@Override
public boolean batchFinished() throws Exception {
    Instances data = getInputFormat();
    if (data == null) {
        throw new IllegalStateException("No input instance format defined");
    }
    if (m_Converter == null) {
        // Get randomized indices and class counts
        int[] randomIndices = new int[m_ClassCounts.length];
        for (int i = 0; i < randomIndices.length; i++) {
            randomIndices[i] = i;
        }
        for (int j = randomIndices.length - 1; j > 0; j--) {
            int toSwap = m_Random.nextInt(j + 1);
            int tmpIndex = randomIndices[j];
            randomIndices[j] = randomIndices[toSwap];
            randomIndices[toSwap] = tmpIndex;
        }
        double[] randomizedCounts = new double[m_ClassCounts.length];
        for (int i = 0; i < randomizedCounts.length; i++) {
            randomizedCounts[i] = m_ClassCounts[randomIndices[i]];
        }
        // into old ones.
        if (m_ClassOrder == RANDOM) {
            m_Converter = randomIndices;
            m_ClassCounts = randomizedCounts;
        } else {
            int[] sorted = Utils.sort(randomizedCounts);
            m_Converter = new int[sorted.length];
            if (m_ClassOrder == FREQ_ASCEND) {
                for (int i = 0; i < sorted.length; i++) {
                    m_Converter[i] = randomIndices[sorted[i]];
                }
            } else if (m_ClassOrder == FREQ_DESCEND) {
                for (int i = 0; i < sorted.length; i++) {
                    m_Converter[i] = randomIndices[sorted[sorted.length - i - 1]];
                }
            } else {
                throw new IllegalArgumentException("Class order not defined!");
            }
            // Change class counts
            double[] tmp2 = new double[m_ClassCounts.length];
            for (int i = 0; i < m_Converter.length; i++) {
                tmp2[i] = m_ClassCounts[m_Converter[i]];
            }
            m_ClassCounts = tmp2;
        }
        // Change the class values
        ArrayList<String> values = new ArrayList<String>(data.classAttribute().numValues());
        for (int i = 0; i < data.numClasses(); i++) {
            values.add(data.classAttribute().value(m_Converter[i]));
        }
        ArrayList<Attribute> newVec = new ArrayList<Attribute>(data.numAttributes());
        for (int i = 0; i < data.numAttributes(); i++) {
            if (i == data.classIndex()) {
                newVec.add(new Attribute(data.classAttribute().name(), values, data.classAttribute().getMetadata()));
            } else {
                newVec.add(data.attribute(i));
            }
        }
        Instances newInsts = new Instances(data.relationName(), newVec, 0);
        newInsts.setClassIndex(data.classIndex());
        setOutputFormat(newInsts);
        // From now on we need m_Converter to convert old indices into new ones
        int[] temp = new int[m_Converter.length];
        for (int i = 0; i < temp.length; i++) {
            temp[m_Converter[i]] = i;
        }
        m_Converter = temp;
        // Process all instances
        for (int xyz = 0; xyz < data.numInstances(); xyz++) {
            Instance datum = data.instance(xyz);
            if (!datum.isMissing(datum.classIndex())) {
                datum.setClassValue(m_Converter[(int) datum.classValue()]);
            }
            // No need to copy instance.
            push(datum, false);
        }
    }
    flushInput();
    m_NewBatch = true;
    return (numPendingOutput() != 0);
}
