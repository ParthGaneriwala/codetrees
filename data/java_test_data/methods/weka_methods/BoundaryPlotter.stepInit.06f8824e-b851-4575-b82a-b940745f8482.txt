@Override
public void stepInit() throws WekaException {
    List<StepManager> infos = getStepManager().getIncomingConnectedStepsOfConnectionType(StepManager.CON_INFO);
    if (infos.size() == 0) {
        throw new WekaException("One or more classifiers/clusterers need to be supplied via an 'info' " + "connection type");
    }
    m_classifierTemplates = new ArrayList<Classifier>();
    m_clustererTemplates = new ArrayList<DensityBasedClusterer>();
    for (StepManager m : infos) {
        Step info = m.getInfoStep();
        if (info instanceof weka.knowledgeflow.steps.Classifier) {
            m_classifierTemplates.add(((weka.knowledgeflow.steps.Classifier) info).getClassifier());
        } else if (info instanceof weka.knowledgeflow.steps.Clusterer) {
            weka.clusterers.Clusterer c = ((weka.knowledgeflow.steps.Clusterer) info).getClusterer();
            if (!(c instanceof DensityBasedClusterer)) {
                throw new WekaException("Clusterer " + c.getClass().getCanonicalName() + " is not a DensityBasedClusterer");
            }
            m_clustererTemplates.add((DensityBasedClusterer) c);
        }
    }
    m_completedImages = new LinkedHashMap<String, BufferedImage>();
    if (m_nSamples != null && m_nSamples.length() > 0) {
        String nSampes = environmentSubstitute(m_nSamples);
        try {
            m_numSamplesPerRegion = Integer.parseInt(nSampes);
        } catch (NumberFormatException ex) {
            getStepManager().logWarning("Unable to parse '" + nSampes + "' for num " + "samples per region parameter, using default: " + m_numSamplesPerRegion);
        }
    }
    if (m_sBase != null && m_sBase.length() > 0) {
        String sBase = environmentSubstitute(m_sBase);
        try {
            m_samplesBase = Integer.parseInt(sBase);
        } catch (NumberFormatException ex) {
            getStepManager().logWarning("Unable to parse '" + sBase + "' for " + "the base for sampling parameter, using default: " + m_samplesBase);
        }
    }
    if (m_kBand != null && m_kBand.length() > 0) {
        String kBand = environmentSubstitute(m_kBand);
        try {
            m_kernelBandwidth = Integer.parseInt(kBand);
        } catch (NumberFormatException ex) {
            getStepManager().logWarning("Unable to parse '" + kBand + "' for kernel " + "bandwidth parameter, using default: " + m_kernelBandwidth);
        }
    }
    /*
     * m_osi = new BufferedImage(m_imageWidth, m_imageHeight,
     * BufferedImage.TYPE_INT_RGB);
     */
    m_isReset = true;
}
