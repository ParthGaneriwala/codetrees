@Override
public Enumeration<Option> listOptions() {
    Vector<Option> result = new Vector<Option>();
    result.add(new Option("\tNo header row present in the data.", "H", 0, "-H"));
    result.add(new Option("\tThe range of attributes to force type to be NOMINAL.\n" + "\t'first' and 'last' are accepted as well.\n" + "\tExamples: \"first-last\", \"1,4,5-27,50-last\"\n" + "\t(default: -none-)", "N", 1, "-N <range>"));
    result.add(new Option("\tOptional specification of legal labels for nominal\n" + "\tattributes. May be specified multiple times.\n" + "\tBatch mode can determine this\n" + "\tautomatically (and so can incremental mode if\n" + "\tthe first in memory buffer load of instances\n" + "\tcontains an example of each legal value). The\n" + "\tspec contains two parts separated by a \":\". The\n" + "\tfirst part can be a range of attribute indexes or\n" + "\ta comma-separated list off attruibute names; the\n" + "\tsecond part is a comma-separated list of labels. E.g\n" + "\t\"1,2,4-6:red,green,blue\" or \"att1,att2:red,green," + "blue\"", "L", 1, "-L <nominal label spec>"));
    result.add(new Option("\tThe range of attribute to force type to be STRING.\n" + "\t'first' and 'last' are accepted as well.\n" + "\tExamples: \"first-last\", \"1,4,5-27,50-last\"\n" + "\t(default: -none-)", "S", 1, "-S <range>"));
    result.add(new Option("\tThe range of attribute to force type to be DATE.\n" + "\t'first' and 'last' are accepted as well.\n" + "\tExamples: \"first-last\", \"1,4,5-27,50-last\"\n" + "\t(default: -none-)", "D", 1, "-D <range>"));
    result.add(new Option("\tThe date formatting string to use to parse date values.\n" + "\t(default: \"yyyy-MM-dd'T'HH:mm:ss\")", "format", 1, "-format <date format>"));
    result.add(new Option("\tThe range of attribute to force type to be NUMERIC.\n" + "\t'first' and 'last' are accepted as well.\n" + "\tExamples: \"first-last\", \"1,4,5-27,50-last\"\n" + "\t(default: -none-)", "R", 1, "-R <range>"));
    result.add(new Option("\tThe string representing a missing value.\n" + "\t(default: ?)", "M", 1, "-M <str>"));
    result.addElement(new Option("\tThe field separator to be used.\n" + "\t'\\t' can be used as well.\n" + "\t(default: ',')", "F", 1, "-F <separator>"));
    result.addElement(new Option("\tThe enclosure character(s) to use for strings.\n" + "\tSpecify as a comma separated list (e.g. \",'" + " (default: \",')", "E", 1, "-E <enclosures>"));
    result.add(new Option("\tThe size of the in memory buffer (in rows).\n" + "\t(default: 100)", "B", 1, "-B <num>"));
    return result.elements();
}
