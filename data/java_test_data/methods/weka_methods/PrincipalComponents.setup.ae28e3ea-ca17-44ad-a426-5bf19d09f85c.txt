protected void setup(Instances instances) throws Exception {
    int i;
    int j;
    Vector<Integer> deleteCols;
    int[] todelete;
    double[][] v;
    m_TrainInstances = new Instances(instances);
    // make a copy of the training data so that we can get the class
    // column to append to the transformed data (if necessary)
    m_TrainCopy = new Instances(m_TrainInstances, 0);
    m_ReplaceMissingFilter = new ReplaceMissingValues();
    m_ReplaceMissingFilter.setInputFormat(m_TrainInstances);
    m_TrainInstances = Filter.useFilter(m_TrainInstances, m_ReplaceMissingFilter);
    m_NominalToBinaryFilter = new NominalToBinary();
    m_NominalToBinaryFilter.setInputFormat(m_TrainInstances);
    m_TrainInstances = Filter.useFilter(m_TrainInstances, m_NominalToBinaryFilter);
    // delete any attributes with only one distinct value or are all missing
    deleteCols = new Vector<Integer>();
    for (i = 0; i < m_TrainInstances.numAttributes(); i++) {
        if (m_TrainInstances.numDistinctValues(i) <= 1) {
            deleteCols.addElement(i);
        }
    }
    if (m_TrainInstances.classIndex() >= 0) {
        // get rid of the class column
        m_HasClass = true;
        m_ClassIndex = m_TrainInstances.classIndex();
        deleteCols.addElement(new Integer(m_ClassIndex));
    }
    // remove columns from the data if necessary
    if (deleteCols.size() > 0) {
        m_AttributeFilter = new Remove();
        todelete = new int[deleteCols.size()];
        for (i = 0; i < deleteCols.size(); i++) {
            todelete[i] = (deleteCols.elementAt(i)).intValue();
        }
        m_AttributeFilter.setAttributeIndicesArray(todelete);
        m_AttributeFilter.setInvertSelection(false);
        m_AttributeFilter.setInputFormat(m_TrainInstances);
        m_TrainInstances = Filter.useFilter(m_TrainInstances, m_AttributeFilter);
    }
    // can evaluator handle the processed data ? e.g., enough attributes?
    getCapabilities().testWithFail(m_TrainInstances);
    m_NumInstances = m_TrainInstances.numInstances();
    m_NumAttribs = m_TrainInstances.numAttributes();
    // fillCorrelation();
    fillCovariance();
    // get eigen vectors/values
    SymmDenseEVD evd = SymmDenseEVD.factorize(m_Correlation);
    m_Eigenvectors = Matrices.getArray(evd.getEigenvectors());
    m_Eigenvalues = evd.getEigenvalues();
    // any eigenvalues less than 0 are not worth anything --- change to 0
    for (i = 0; i < m_Eigenvalues.length; i++) {
        if (m_Eigenvalues[i] < 0) {
            m_Eigenvalues[i] = 0.0;
        }
    }
    m_SortedEigens = Utils.sort(m_Eigenvalues);
    m_SumOfEigenValues = Utils.sum(m_Eigenvalues);
    m_TransformedFormat = determineOutputFormat(m_TrainInstances);
    setOutputFormat(m_TransformedFormat);
    m_TrainInstances = null;
}
