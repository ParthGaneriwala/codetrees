/**
 * Function used to stop code that calls acceptClassifier. This is needed as
 * classifier evaluation is performed inside a separate thread of execution.
 *
 * @param tf a <code>boolean</code> value
 *
 * private synchronized void block(boolean tf) { if (tf) { try { //
 * only block if thread is still doing something useful! if
 * (m_evaluateThread != null && m_evaluateThread.isAlive()) { wait();
 * } } catch (InterruptedException ex) { } } else { notifyAll(); } }
 */
@Override
public Enumeration<String> enumerateRequests() {
    Vector<String> newVector = new Vector<String>(0);
    /*
     * if (m_evaluateThread != null) { newVector.addElement("Stop"); }
     */
    if (m_executorPool != null && (m_executorPool.getQueue().size() > 0 || m_executorPool.getActiveCount() > 0)) {
        newVector.addElement("Stop");
    }
    return newVector.elements();
}
