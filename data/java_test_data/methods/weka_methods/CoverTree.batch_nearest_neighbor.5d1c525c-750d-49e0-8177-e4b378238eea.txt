protected void batch_nearest_neighbor(final int k, CoverTreeNode tree_root, CoverTreeNode query_root, Stack<NeighborList> results) throws Exception {
    // amk14comment: These contain the covering nodes at each level
    Stack<Stack<d_node>> cover_sets = new Stack<Stack<d_node>>(100);
    // amk14comment: These contain the nodes thought to be nearest at the leaf
    // level
    Stack<d_node> zero_set = new Stack<d_node>();
    MyHeap upper_k = new MyHeap(k);
    // probably not needed //amk14comment:initializes the array to MAXFLOAT
    setter(upper_k, Double.POSITIVE_INFINITY, k);
    // amk14comment:distance from top query point to top node point
    double treeroot_to_query_dist = Math.sqrt(m_DistanceFunction.distance(query_root.p(), tree_root.p(), Double.POSITIVE_INFINITY));
    // amk14comment:probably stores the kth smallest distances encountered so
    // far
    update(upper_k, treeroot_to_query_dist);
    d_node temp = new d_node(treeroot_to_query_dist, tree_root);
    getCoverSet(0, cover_sets).push(temp);
    // incrementing counts for the root node
    if (m_TreeStats != null) {
        m_TreeStats.incrPointCount();
        if (tree_root.num_children > 0) {
            m_TreeStats.incrIntNodeCount();
        } else {
            m_TreeStats.incrLeafCount();
        }
    }
    internal_batch_nearest_neighbor(k, query_root, cover_sets, zero_set, 0, 0, upper_k, results);
}
