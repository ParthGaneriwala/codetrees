@Override
public void initializeClassifier(Instances data) throws Exception {
    m_numItsPerformed = 0;
    if (m_Data == null) {
        // can classifier handle the data?
        getCapabilities().testWithFail(data);
        // remove instances with missing class
        m_Data = new Instances(data);
        m_Data.deleteWithMissingClass();
        // Add the model for the mean first
        if (getMinimizeAbsoluteError()) {
            m_InitialPrediction = m_Data.kthSmallestValue(m_Data.classIndex(), m_Data.numInstances() / 2);
        } else {
            m_InitialPrediction = m_Data.meanOrMode(m_Data.classIndex());
        }
        // only class? -> use only ZeroR model
        if (m_Data.numAttributes() == 1) {
            System.err.println("Cannot build non-trivial model (only class attribute present in data!).");
            m_SuitableData = false;
            return;
        } else {
            m_SuitableData = true;
        }
        // Initialize list of classifiers and data
        m_Classifiers = new ArrayList<Classifier>(m_NumIterations);
        m_Data = residualReplace(m_Data, m_InitialPrediction);
        // Calculate error
        m_Error = 0;
        m_Diff = Double.MAX_VALUE;
        for (int i = 0; i < m_Data.numInstances(); i++) {
            if (getMinimizeAbsoluteError()) {
                m_Error += m_Data.instance(i).weight() * Math.abs(m_Data.instance(i).classValue());
            } else {
                m_Error += m_Data.instance(i).weight() * m_Data.instance(i).classValue() * m_Data.instance(i).classValue();
            }
        }
        if (m_Debug) {
            if (getMinimizeAbsoluteError()) {
                System.err.println("Sum of absolute residuals (predicting the median) : " + m_Error);
            } else {
                System.err.println("Sum of squared residuals (predicting the mean) : " + m_Error);
            }
        }
    }
}
