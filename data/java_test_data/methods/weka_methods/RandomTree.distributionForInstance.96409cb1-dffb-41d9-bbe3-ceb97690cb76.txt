public double[] distributionForInstance(Instance instance) throws Exception {
    double[] returnedDist = null;
    if (m_Attribute > -1) {
        // Node is not a leaf
        if (instance.isMissing(m_Attribute)) {
            // Value is missing
            returnedDist = new double[m_Info.numClasses()];
            // Split instance up
            for (int i = 0; i < m_Successors.length; i++) {
                double[] help = m_Successors[i].distributionForInstance(instance);
                if (help != null) {
                    for (int j = 0; j < help.length; j++) {
                        returnedDist[j] += m_Prop[i] * help[j];
                    }
                }
            }
        } else if (m_Info.attribute(m_Attribute).isNominal()) {
            // For nominal attributes
            returnedDist = m_Successors[(int) instance.value(m_Attribute)].distributionForInstance(instance);
        } else {
            // For numeric attributes
            if (instance.value(m_Attribute) < m_SplitPoint) {
                returnedDist = m_Successors[0].distributionForInstance(instance);
            } else {
                returnedDist = m_Successors[1].distributionForInstance(instance);
            }
        }
    }
    // Node is a leaf or successor is empty?
    if ((m_Attribute == -1) || (returnedDist == null)) {
        // Is node empty?
        if (m_ClassDistribution == null) {
            if (getAllowUnclassifiedInstances()) {
                double[] result = new double[m_Info.numClasses()];
                if (m_Info.classAttribute().isNumeric()) {
                    result[0] = Utils.missingValue();
                }
                return result;
            } else {
                return null;
            }
        }
        // Else return normalized distribution
        double[] normalizedDistribution = m_ClassDistribution.clone();
        if (m_Info.classAttribute().isNominal()) {
            Utils.normalize(normalizedDistribution);
        }
        return normalizedDistribution;
    } else {
        return returnedDist;
    }
}
