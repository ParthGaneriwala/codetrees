@Override
public void setOptions(String[] options) throws Exception {
    reset();
    String lossString = Utils.getOption('F', options);
    if (lossString.length() != 0) {
        setLossFunction(new SelectedTag(Integer.parseInt(lossString), TAGS_SELECTION));
    }
    setOutputProbsForSVM(Utils.getFlag("output-probs", options));
    String lambdaString = Utils.getOption('R', options);
    if (lambdaString.length() > 0) {
        setLambda(Double.parseDouble(lambdaString));
    }
    String learningRateString = Utils.getOption('L', options);
    if (learningRateString.length() > 0) {
        setLearningRate(Double.parseDouble(learningRateString));
    }
    String epochsString = Utils.getOption("E", options);
    if (epochsString.length() > 0) {
        setEpochs(Integer.parseInt(epochsString));
    }
    setUseWordFrequencies(Utils.getFlag("W", options));
    String pruneFreqS = Utils.getOption("P", options);
    if (pruneFreqS.length() > 0) {
        setPeriodicPruning(Integer.parseInt(pruneFreqS));
    }
    String minFreq = Utils.getOption("M", options);
    if (minFreq.length() > 0) {
        setMinWordFrequency(Double.parseDouble(minFreq));
    }
    String minCoeff = Utils.getOption("min-coeff", options);
    if (minCoeff.length() > 0) {
        setMinAbsoluteCoefficientValue(Double.parseDouble(minCoeff));
    }
    setNormalizeDocLength(Utils.getFlag("normalize", options));
    String normFreqS = Utils.getOption("norm", options);
    if (normFreqS.length() > 0) {
        setNorm(Double.parseDouble(normFreqS));
    }
    String lnormFreqS = Utils.getOption("lnorm", options);
    if (lnormFreqS.length() > 0) {
        setLNorm(Double.parseDouble(lnormFreqS));
    }
    setLowercaseTokens(Utils.getFlag("lowercase", options));
    String stemmerString = Utils.getOption("stemmer", options);
    if (stemmerString.length() == 0) {
        setStemmer(null);
    } else {
        String[] stemmerSpec = Utils.splitOptions(stemmerString);
        if (stemmerSpec.length == 0) {
            throw new Exception("Invalid stemmer specification string");
        }
        String stemmerName = stemmerSpec[0];
        stemmerSpec[0] = "";
        Stemmer stemmer = (Stemmer) Utils.forName(Class.forName("weka.core.stemmers.Stemmer"), stemmerName, stemmerSpec);
        setStemmer(stemmer);
    }
    String stopwordsHandlerString = Utils.getOption("stopwords-handler", options);
    if (stopwordsHandlerString.length() == 0) {
        setStopwordsHandler(null);
    } else {
        String[] stopwordsHandlerSpec = Utils.splitOptions(stopwordsHandlerString);
        if (stopwordsHandlerSpec.length == 0) {
            throw new Exception("Invalid StopwordsHandler specification string");
        }
        String stopwordsHandlerName = stopwordsHandlerSpec[0];
        stopwordsHandlerSpec[0] = "";
        StopwordsHandler stopwordsHandler = (StopwordsHandler) Utils.forName(Class.forName("weka.core.stopwords.StopwordsHandler"), stopwordsHandlerName, stopwordsHandlerSpec);
        setStopwordsHandler(stopwordsHandler);
    }
    String tokenizerString = Utils.getOption("tokenizer", options);
    if (tokenizerString.length() == 0) {
        setTokenizer(new WordTokenizer());
    } else {
        String[] tokenizerSpec = Utils.splitOptions(tokenizerString);
        if (tokenizerSpec.length == 0) {
            throw new Exception("Invalid tokenizer specification string");
        }
        String tokenizerName = tokenizerSpec[0];
        tokenizerSpec[0] = "";
        Tokenizer tokenizer = (Tokenizer) Utils.forName(Class.forName("weka.core.tokenizers.Tokenizer"), tokenizerName, tokenizerSpec);
        setTokenizer(tokenizer);
    }
    super.setOptions(options);
    Utils.checkForRemainingOptions(options);
}
