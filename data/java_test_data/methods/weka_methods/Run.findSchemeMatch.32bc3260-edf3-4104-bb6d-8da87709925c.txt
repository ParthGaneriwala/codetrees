public static List<String> findSchemeMatch(Class<?> classType, String schemeToFind, boolean matchAnywhere, boolean notJustRunnables) {
    weka.core.ClassDiscovery.clearCache();
    ArrayList<String> matches = weka.core.ClassDiscovery.find(schemeToFind);
    ArrayList<String> prunedMatches = new ArrayList<String>();
    // prune list for anything that isn't a runnable scheme
    for (int i = 0; i < matches.size(); i++) {
        if (matches.get(i).endsWith(schemeToFind) || matchAnywhere) {
            try {
                // Object scheme = java.beans.Beans.instantiate((new Run()).getClass()
                // .getClassLoader(), matches.get(i));
                Object scheme = WekaPackageClassLoaderManager.objectForName(matches.get(i));
                if (classType == null || classType.isAssignableFrom(scheme.getClass())) {
                    if (notJustRunnables || scheme instanceof weka.classifiers.Classifier || scheme instanceof weka.clusterers.Clusterer || scheme instanceof weka.associations.Associator || scheme instanceof weka.attributeSelection.ASEvaluation || scheme instanceof weka.filters.Filter || scheme instanceof weka.core.converters.AbstractFileLoader || scheme instanceof weka.core.converters.AbstractFileSaver || scheme instanceof weka.datagenerators.DataGenerator || scheme instanceof weka.core.CommandlineRunnable) {
                        prunedMatches.add(matches.get(i));
                    }
                }
            } catch (Exception ex) {
            // ignore any classes that we can't instantiate due to no no-arg
            // constructor
            }
        }
    }
    return prunedMatches;
}
