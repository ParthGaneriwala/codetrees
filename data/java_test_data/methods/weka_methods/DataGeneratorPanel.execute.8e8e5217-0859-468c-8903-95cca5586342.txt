public boolean execute(boolean storeOutput) {
    boolean result = true;
    DataGenerator generator = (DataGenerator) m_GeneratorEditor.getValue();
    String relName = generator.getRelationName();
    String cname = generator.getClass().getName().replaceAll(".*\\.", "");
    String cmd = generator.getClass().getName();
    if (generator instanceof OptionHandler) {
        cmd += " " + Utils.joinOptions(((OptionHandler) generator).getOptions());
    }
    try {
        m_Log.logMessage("Started " + cname);
        m_Log.logMessage("Command: " + cmd);
        m_Output = new StringWriter();
        generator.setOutput(new PrintWriter(m_Output));
        // define dataset format
        // computes actual number of examples to be produced
        generator.setDatasetFormat(generator.defineDataFormat());
        if (storeOutput) {
            m_Output.append(generator.getPrologue());
        } else {
            m_Output.append("String output of data generator has not been stored");
        }
        if (generator.getSingleModeFlag()) {
            m_Instances = generator.getDatasetFormat();
            for (int i = 0; i < generator.getNumExamplesAct(); i++) {
                m_Instances.add(generator.generateExample());
            }
        } else {
            m_Instances = generator.generateExamples();
        }
        if (storeOutput) {
            m_Output.append(m_Instances.toString());
            m_Output.append(generator.getEpilogue());
        }
        generator.getOutput().close();
        m_Log.logMessage("Finished " + cname);
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error generating data:\n" + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        m_Instances = null;
        m_Output = new StringWriter();
        result = false;
    }
    generator.setRelationName(relName);
    return result;
}
