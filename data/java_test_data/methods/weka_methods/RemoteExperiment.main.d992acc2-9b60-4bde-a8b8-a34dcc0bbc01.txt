public static void main(String[] args) {
    try {
        weka.core.WekaPackageManager.loadPackages(false, true, false);
        RemoteExperiment exp = null;
        // get options from XML?
        String xmlOption = Utils.getOption("xml", args);
        if (!xmlOption.equals("")) {
            args = new XMLOptions(xmlOption).toArray();
        }
        Experiment base = null;
        String expFile = Utils.getOption('l', args);
        String saveFile = Utils.getOption('s', args);
        boolean runExp = Utils.getFlag('r', args);
        ArrayList<String> remoteHosts = new ArrayList<String>();
        String runHost = " ";
        while (runHost.length() != 0) {
            runHost = Utils.getOption('h', args);
            if (runHost.length() != 0) {
                remoteHosts.add(runHost);
            }
        }
        if (expFile.length() == 0) {
            base = new Experiment();
            try {
                base.setOptions(args);
                Utils.checkForRemainingOptions(args);
            } catch (Exception ex) {
                ex.printStackTrace();
                String result = "Usage:\n\n" + "-l <exp file>\n" + "\tLoad experiment from file (default use cli options)\n" + "-s <exp file>\n" + "\tSave experiment to file after setting other options\n" + "\t(default don't save)\n" + "-h <remote host name>\n" + "\tHost to run experiment on (may be specified more than once\n" + "\tfor multiple remote hosts)\n" + "-r \n" + "\tRun experiment on (default don't run)\n" + "-xml <filename | xml-string>\n" + "\tget options from XML-Data instead from parameters\n" + "\n";
                Enumeration<Option> enm = ((OptionHandler) base).listOptions();
                while (enm.hasMoreElements()) {
                    Option option = enm.nextElement();
                    result += option.synopsis() + "\n";
                    result += option.description() + "\n";
                }
                throw new Exception(result + "\n" + ex.getMessage());
            }
        } else {
            Object tmp;
            // KOML?
            if ((KOML.isPresent()) && (expFile.toLowerCase().endsWith(KOML.FILE_EXTENSION))) {
                tmp = KOML.read(expFile);
            } else // XML?
            if (expFile.toLowerCase().endsWith(".xml")) {
                XMLExperiment xml = new XMLExperiment();
                tmp = xml.read(expFile);
            } else // binary
            {
                FileInputStream fi = new FileInputStream(expFile);
                ObjectInputStream oi = new ObjectInputStream(new BufferedInputStream(fi));
                tmp = oi.readObject();
                oi.close();
            }
            if (tmp instanceof RemoteExperiment) {
                exp = (RemoteExperiment) tmp;
            } else {
                base = (Experiment) tmp;
            }
        }
        if (base != null) {
            exp = new RemoteExperiment(base);
        }
        for (int i = 0; i < remoteHosts.size(); i++) {
            exp.addRemoteHost(remoteHosts.get(i));
        }
        System.err.println("Experiment:\n" + exp.toString());
        if (saveFile.length() != 0) {
            // KOML?
            if ((KOML.isPresent()) && (saveFile.toLowerCase().endsWith(KOML.FILE_EXTENSION))) {
                KOML.write(saveFile, exp);
            } else // XML?
            if (saveFile.toLowerCase().endsWith(".xml")) {
                XMLExperiment xml = new XMLExperiment();
                xml.write(saveFile, exp);
            } else // binary
            {
                FileOutputStream fo = new FileOutputStream(saveFile);
                ObjectOutputStream oo = new ObjectOutputStream(new BufferedOutputStream(fo));
                oo.writeObject(exp);
                oo.close();
            }
        }
        if (runExp) {
            System.err.println("Initializing...");
            exp.initialize();
            System.err.println("Iterating...");
            exp.runExperiment();
            System.err.println("Postprocessing...");
            exp.postProcess();
        }
    } catch (Exception ex) {
        ex.printStackTrace();
        System.err.println(ex.getMessage());
    }
}
