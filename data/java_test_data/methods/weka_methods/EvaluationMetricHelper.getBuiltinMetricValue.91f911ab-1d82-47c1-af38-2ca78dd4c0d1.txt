protected double getBuiltinMetricValue(int metricIndex, int... classValIndex) throws Exception {
    boolean hasValIndex = classValIndex != null && classValIndex.length == 1;
    switch(metricIndex) {
        case 0:
            return m_eval.correct();
        case 1:
            return m_eval.incorrect();
        case 2:
            return m_eval.kappa();
        case 3:
            return m_eval.totalCost();
        case 4:
            return m_eval.avgCost();
        case 5:
            return m_eval.KBRelativeInformation();
        case 6:
            return m_eval.KBInformation();
        case 7:
            return m_eval.correlationCoefficient();
        case 8:
            return m_eval.SFPriorEntropy();
        case 9:
            return m_eval.SFSchemeEntropy();
        case 10:
            return m_eval.SFEntropyGain();
        case 11:
            return m_eval.meanAbsoluteError();
        case 12:
            return m_eval.rootMeanSquaredError();
        case 13:
            return m_eval.relativeAbsoluteError();
        case 14:
            return m_eval.rootRelativeSquaredError();
        case 15:
            return m_eval.coverageOfTestCasesByPredictedRegions();
        case 16:
            return m_eval.sizeOfPredictedRegions();
        case 17:
            return hasValIndex ? m_eval.truePositiveRate(classValIndex[0]) : m_eval.weightedTruePositiveRate();
        case 18:
            return hasValIndex ? m_eval.falsePositiveRate(classValIndex[0]) : m_eval.weightedFalsePositiveRate();
        case 19:
            return hasValIndex ? m_eval.precision(classValIndex[0]) : m_eval.weightedPrecision();
        case 20:
            return hasValIndex ? m_eval.recall(classValIndex[0]) : m_eval.weightedRecall();
        case 21:
            return hasValIndex ? m_eval.fMeasure(classValIndex[0]) : m_eval.weightedFMeasure();
        case 22:
            return hasValIndex ? m_eval.matthewsCorrelationCoefficient(classValIndex[0]) : m_eval.weightedMatthewsCorrelation();
        case 23:
            return hasValIndex ? m_eval.areaUnderROC(classValIndex[0]) : m_eval.weightedAreaUnderROC();
        case 24:
            return hasValIndex ? m_eval.areaUnderPRC(classValIndex[0]) : m_eval.weightedAreaUnderPRC();
    }
    throw new Exception("Unknown built-in metric");
}
