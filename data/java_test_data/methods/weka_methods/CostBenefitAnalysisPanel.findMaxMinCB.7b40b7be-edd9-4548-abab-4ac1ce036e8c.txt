private void findMaxMinCB(boolean max) {
    double maxMin = (max) ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY;
    Instances cBCurve = m_costBenefit.getPlotInstances();
    int maxMinIndex = 0;
    for (int i = 0; i < cBCurve.numInstances(); i++) {
        Instance current = cBCurve.instance(i);
        if (max) {
            if (current.value(1) > maxMin) {
                maxMin = current.value(1);
                maxMinIndex = i;
            }
        } else {
            if (current.value(1) < maxMin) {
                maxMin = current.value(1);
                maxMinIndex = i;
            }
        }
    }
    // set the slider to the correct position
    int indexOfSampleSize = m_masterPlot.getPlotInstances().attribute(ThresholdCurve.SAMPLE_SIZE_NAME).index();
    int indexOfPercOfTarget = m_masterPlot.getPlotInstances().attribute(ThresholdCurve.RECALL_NAME).index();
    int indexOfThreshold = m_masterPlot.getPlotInstances().attribute(ThresholdCurve.THRESHOLD_NAME).index();
    int indexOfMetric;
    if (m_percPop.isSelected()) {
        indexOfMetric = indexOfSampleSize;
    } else if (m_percOfTarget.isSelected()) {
        indexOfMetric = indexOfPercOfTarget;
    } else {
        indexOfMetric = indexOfThreshold;
    }
    double valueOfMetric = m_masterPlot.getPlotInstances().instance(maxMinIndex).value(indexOfMetric);
    valueOfMetric *= 100.0;
    // set the approximate location of the slider
    m_thresholdSlider.setValue((int) valueOfMetric);
    // make sure the actual values relate to the true min/max rather
    // than being off due to slider location error.
    updateInfoGivenIndex(maxMinIndex);
}
