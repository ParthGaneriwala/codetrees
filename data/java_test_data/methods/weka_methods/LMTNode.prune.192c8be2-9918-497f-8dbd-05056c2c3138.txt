public void prune(double alpha) throws Exception {
    Vector<LMTNode> nodeList;
    CompareNode comparator = new CompareNode();
    // determine training error of logistic models and subtrees, and calculate
    // alpha-values from them
    treeErrors();
    calculateAlphas();
    // get list of all inner nodes in the tree
    nodeList = getNodes();
    boolean prune = (nodeList.size() > 0);
    while (prune) {
        // select node with minimum alpha
        LMTNode nodeToPrune = Collections.min(nodeList, comparator);
        // want to prune if its alpha is smaller than alpha
        if (nodeToPrune.m_alpha > alpha) {
            break;
        }
        nodeToPrune.m_isLeaf = true;
        nodeToPrune.m_sons = null;
        // update tree errors and alphas
        treeErrors();
        calculateAlphas();
        nodeList = getNodes();
        prune = (nodeList.size() > 0);
    }
    // needed
    for (Object node : getNodes()) {
        LMTNode lnode = (LMTNode) node;
        if (!lnode.m_isLeaf) {
            m_regressions = null;
        }
    }
}
