private boolean KononenkosMDL(double[] priorCounts, double[][] bestCounts, double numInstances, int numCutPoints) {
    double distPrior, instPrior, distAfter = 0, sum, instAfter = 0;
    double before, after;
    int numClassesTotal;
    // Number of classes occuring in the set
    numClassesTotal = 0;
    for (double priorCount : priorCounts) {
        if (priorCount > 0) {
            numClassesTotal++;
        }
    }
    // Encode distribution prior to split
    distPrior = SpecialFunctions.log2Binomial(numInstances + numClassesTotal - 1, numClassesTotal - 1);
    // Encode instances prior to split.
    instPrior = SpecialFunctions.log2Multinomial(numInstances, priorCounts);
    before = instPrior + distPrior;
    // Encode distributions and instances after split.
    for (double[] bestCount : bestCounts) {
        sum = Utils.sum(bestCount);
        distAfter += SpecialFunctions.log2Binomial(sum + numClassesTotal - 1, numClassesTotal - 1);
        instAfter += SpecialFunctions.log2Multinomial(sum, bestCount);
    }
    // Coding cost after split
    after = Utils.log2(numCutPoints) + distAfter + instAfter;
    // Check if split is to be accepted
    return (before > after);
}
