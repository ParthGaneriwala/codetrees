// initializeUp
public void initializeDown(boolean recursively) {
    if (m_parentSeparator == null) {
        // a root node
        calcMarginalProbabilities();
    } else {
        m_parentSeparator.updateFromParent();
        int[] values = new int[m_nNodes.length];
        int[] order = new int[m_bayesNet.getNrOfNodes()];
        for (int iNode = 0; iNode < m_nNodes.length; iNode++) {
            order[m_nNodes[iNode]] = iNode;
        }
        // Update the values
        for (int iPos = 0; iPos < m_nCardinality; iPos++) {
            int iSepCPT = getCPT(m_parentSeparator.m_nNodes, m_parentSeparator.m_nNodes.length, values, order, m_bayesNet);
            int iNodeCPT = getCPT(m_nNodes, m_nNodes.length, values, order, m_bayesNet);
            if (m_parentSeparator.m_fiChild[iSepCPT] > 0) {
                m_P[iNodeCPT] *= m_parentSeparator.m_fiParent[iSepCPT] / m_parentSeparator.m_fiChild[iSepCPT];
            } else {
                m_P[iNodeCPT] = 0;
            }
            // update values
            int i = 0;
            values[i]++;
            while (i < m_nNodes.length && values[i] == m_bayesNet.getCardinality(m_nNodes[i])) {
                values[i] = 0;
                i++;
                if (i < m_nNodes.length) {
                    values[i]++;
                }
            }
        }
        // normalize
        double sum = 0;
        for (int iPos = 0; iPos < m_nCardinality; iPos++) {
            sum += m_P[iPos];
        }
        for (int iPos = 0; iPos < m_nCardinality; iPos++) {
            m_P[iPos] /= sum;
        }
        m_parentSeparator.updateFromChild();
        calcMarginalProbabilities();
    }
    if (recursively) {
        for (Object element : m_children) {
            JunctionTreeNode childNode = (JunctionTreeNode) element;
            childNode.initializeDown(true);
        }
    }
}
