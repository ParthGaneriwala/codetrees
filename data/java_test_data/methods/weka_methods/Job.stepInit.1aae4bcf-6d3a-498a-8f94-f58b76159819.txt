@Override
public void stepInit() throws WekaException {
    String fileName = m_flowToRun.toString();
    if (fileName.equals("--NONE--")) {
        throw new WekaException("No flow to execute specified!");
    }
    fileName = getStepManager().environmentSubstitute(fileName);
    m_flowExecutor = ((BaseExecutionEnvironment) getStepManager().getExecutionEnvironment()).getDefaultFlowExecutor();
    Settings settings = new Settings("weka", KFDefaults.APP_ID);
    try {
        settings.loadSettings();
    } catch (IOException ex) {
        throw new WekaException(ex);
    }
    settings.applyDefaults(new KFDefaults());
    m_flowExecutor.setSettings(settings);
    // setting it on the flow executor
    Environment env = new Environment(getStepManager().getExecutionEnvironment().getEnvironmentVariables());
    m_flowExecutor.getExecutionEnvironment().setEnvironmentVariables(env);
    Flow flowToRun = null;
    if (new File(fileName).exists()) {
        flowToRun = Flow.loadFlow(new File(fileName), getStepManager().getLog());
    } else {
        String fileNameWithCorrectSeparators = fileName.replace(File.separatorChar, '/');
        if (this.getClass().getClassLoader().getResource(fileNameWithCorrectSeparators) != null) {
            flowToRun = Flow.loadFlow(this.getClass().getClassLoader().getResourceAsStream(fileNameWithCorrectSeparators), new JSONFlowLoader());
        }
    }
    m_flowExecutor.setFlow(flowToRun);
    final String flowToRunName = flowToRun.getFlowName();
    m_flowExecutor.setLogger(new FlowRunner.SimpleLogger() {

        @Override
        public void logMessage(String lm) {
            if (lm.contains("[Low]")) {
                getStepManager().logLow(lm.replace("[Low]", "<sub-flow:" + flowToRunName + ">"));
            } else if (lm.contains("[Basic]")) {
                getStepManager().logBasic(lm.replace("[Basic]", "<sub-flow:" + flowToRunName + ">"));
            } else if (lm.contains("[Detailed]")) {
                getStepManager().logDetailed(lm.replace("[Detailed]", "<sub-flow:" + flowToRunName + ">"));
            } else if (lm.contains("[Debugging]")) {
                getStepManager().logDebug(lm.replace("[Debugging]", "<sub-flow:" + flowToRunName + ">"));
            } else if (lm.contains("[Warning]")) {
                getStepManager().logWarning(lm.replace("[Warning]", "<sub-flow:" + flowToRunName + ">"));
            } else {
                getStepManager().logBasic("<sub-flow>" + lm);
            }
        }
    });
}
