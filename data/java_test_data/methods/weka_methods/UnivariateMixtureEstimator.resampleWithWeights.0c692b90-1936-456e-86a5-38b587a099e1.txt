public double[][] resampleWithWeights(Random random, boolean[] sampled) {
    // Walker's method, see pp. 232 of "Stochastic Simulation" by B.D. Ripley
    double[] P = new double[m_Weights.length];
    System.arraycopy(m_Weights, 0, P, 0, m_Weights.length);
    Utils.normalize(P);
    double[] Q = new double[m_Weights.length];
    int[] A = new int[m_Weights.length];
    int[] W = new int[m_Weights.length];
    int M = m_Weights.length;
    int NN = -1;
    int NP = M;
    for (int I = 0; I < M; I++) {
        if (P[I] < 0) {
            throw new IllegalArgumentException("Weights have to be positive.");
        }
        Q[I] = M * P[I];
        if (Q[I] < 1.0) {
            W[++NN] = I;
        } else {
            W[--NP] = I;
        }
    }
    if (NN > -1 && NP < M) {
        for (int S = 0; S < M - 1; S++) {
            int I = W[S];
            int J = W[NP];
            A[I] = J;
            Q[J] += Q[I] - 1.0;
            if (Q[J] < 1.0) {
                NP++;
            }
            if (NP >= M) {
                break;
            }
        }
    // A[W[M]] = W[M];
    }
    for (int I = 0; I < M; I++) {
        Q[I] += I;
    }
    // Do we need to keep track of how many copies to use?
    int[] counts = new int[M];
    int count = 0;
    for (int i = 0; i < m_Weights.length; i++) {
        int ALRV;
        double U = M * random.nextDouble();
        int I = (int) U;
        if (U < Q[I]) {
            ALRV = I;
        } else {
            ALRV = A[I];
        }
        counts[ALRV]++;
        if (!sampled[ALRV]) {
            sampled[ALRV] = true;
            count++;
        }
    }
    // Generate output
    double[][] output = new double[2][count];
    int index = 0;
    for (int i = 0; i < M; i++) {
        if (counts[i] > 0) {
            output[0][index] = m_Values[i];
            output[1][index] = counts[i];
            index++;
        }
    }
    return output;
}
