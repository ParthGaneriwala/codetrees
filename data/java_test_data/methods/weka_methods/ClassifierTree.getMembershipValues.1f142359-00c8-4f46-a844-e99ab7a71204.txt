public double[] getMembershipValues(Instance instance) throws Exception {
    // Set up array for membership values
    double[] a = new double[numNodes()];
    // Initialize queues
    Queue<Double> queueOfWeights = new LinkedList<Double>();
    Queue<ClassifierTree> queueOfNodes = new LinkedList<ClassifierTree>();
    queueOfWeights.add(instance.weight());
    queueOfNodes.add(this);
    int index = 0;
    // While the queue is not empty
    while (!queueOfNodes.isEmpty()) {
        a[index++] = queueOfWeights.poll();
        ClassifierTree node = queueOfNodes.poll();
        // Is node a leaf?
        if (node.m_isLeaf) {
            continue;
        }
        // Which subset?
        int treeIndex = node.localModel().whichSubset(instance);
        // Space for weight distribution
        double[] weights = new double[node.m_sons.length];
        // Check for missing value
        if (treeIndex == -1) {
            weights = node.localModel().weights(instance);
        } else {
            weights[treeIndex] = 1.0;
        }
        for (int i = 0; i < node.m_sons.length; i++) {
            queueOfNodes.add(node.son(i));
            queueOfWeights.add(a[index - 1] * weights[i]);
        }
    }
    return a;
}
