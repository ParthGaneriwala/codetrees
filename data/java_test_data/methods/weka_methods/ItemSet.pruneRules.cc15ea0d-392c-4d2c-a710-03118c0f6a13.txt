public static void pruneRules(ArrayList<Object>[] rules, double minConfidence) {
    ArrayList<Object> newPremises = new ArrayList<Object>(rules[0].size()), newConsequences = new ArrayList<Object>(rules[1].size()), newConf = new ArrayList<Object>(rules[2].size());
    ArrayList<Object> newLift = null, newLev = null, newConv = null;
    if (rules.length > 3) {
        newLift = new ArrayList<Object>(rules[3].size());
        newLev = new ArrayList<Object>(rules[4].size());
        newConv = new ArrayList<Object>(rules[5].size());
    }
    for (int i = 0; i < rules[0].size(); i++) {
        if (!(((Double) rules[2].get(i)).doubleValue() < minConfidence)) {
            newPremises.add(rules[0].get(i));
            newConsequences.add(rules[1].get(i));
            newConf.add(rules[2].get(i));
            if (rules.length > 3) {
                newLift.add(rules[3].get(i));
                newLev.add(rules[4].get(i));
                newConv.add(rules[5].get(i));
            }
        }
    }
    rules[0] = newPremises;
    rules[1] = newConsequences;
    rules[2] = newConf;
    if (rules.length > 3) {
        rules[3] = newLift;
        rules[4] = newLev;
        rules[5] = newConv;
    }
}
