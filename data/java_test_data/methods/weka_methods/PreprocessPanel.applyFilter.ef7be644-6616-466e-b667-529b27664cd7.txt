protected void applyFilter(final Filter filter) {
    if (m_IOThread == null) {
        m_IOThread = new Thread() {

            @Override
            public void run() {
                try {
                    if (filter != null) {
                        m_FilterPanel.addToHistory();
                        if (m_Log instanceof TaskLogger) {
                            ((TaskLogger) m_Log).taskStarted();
                        }
                        m_Log.statusMessage("Passing dataset through filter " + filter.getClass().getName());
                        String cmd = filter.getClass().getName();
                        if (filter instanceof OptionHandler)
                            cmd += " " + Utils.joinOptions(((OptionHandler) filter).getOptions());
                        m_Log.logMessage("Command: " + cmd);
                        int classIndex = m_AttVisualizePanel.getColoringIndex();
                        if ((classIndex < 0) && (filter instanceof SupervisedFilter)) {
                            throw new IllegalArgumentException("Class (colour) needs to " + "be set for supervised " + "filter.");
                        }
                        Instances copy = new Instances(m_Instances);
                        copy.setClassIndex(classIndex);
                        m_StopBut.setEnabled(true);
                        Filter filterCopy = Filter.makeCopy(filter);
                        filterCopy.setInputFormat(copy);
                        Instances newInstances = Filter.useFilter(copy, filterCopy);
                        m_StopBut.setEnabled(false);
                        if (newInstances == null || newInstances.numAttributes() < 1) {
                            throw new Exception("Dataset is empty.");
                        }
                        m_Log.statusMessage("Saving undo information");
                        addUndoPoint();
                        m_AttVisualizePanel.setColoringIndex(copy.classIndex());
                        // if class was not set before, reset it again after use of filter
                        if (m_Instances.classIndex() < 0)
                            newInstances.setClassIndex(-1);
                        m_Instances = newInstances;
                        setInstances(m_Instances);
                        if (m_Log instanceof TaskLogger) {
                            ((TaskLogger) m_Log).taskFinished();
                        }
                    }
                } catch (Exception ex) {
                    if (m_Log instanceof TaskLogger) {
                        ((TaskLogger) m_Log).taskFinished();
                    }
                    // Pop up an error optionpane
                    JOptionPane.showMessageDialog(PreprocessPanel.this, "Problem filtering instances:\n" + ex.getMessage(), "Apply Filter", JOptionPane.ERROR_MESSAGE);
                    m_Log.logMessage("Problem filtering instances: " + ex.getMessage());
                    m_Log.statusMessage("Problem filtering instances");
                    ex.printStackTrace();
                }
                m_IOThread = null;
            }
        };
        // UI has most priority
        m_IOThread.setPriority(Thread.MIN_PRIORITY);
        m_IOThread.start();
    } else {
        JOptionPane.showMessageDialog(this, "Can't apply filter at this time,\n" + "currently busy with other IO", "Apply Filter", JOptionPane.WARNING_MESSAGE);
    }
}
