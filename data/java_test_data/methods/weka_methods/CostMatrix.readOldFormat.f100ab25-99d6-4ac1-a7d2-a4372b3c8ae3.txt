public void readOldFormat(Reader reader) throws Exception {
    StreamTokenizer tokenizer;
    int currentToken;
    double firstIndex, secondIndex, weight;
    tokenizer = new StreamTokenizer(reader);
    initialize();
    tokenizer.commentChar('%');
    tokenizer.eolIsSignificant(true);
    while (StreamTokenizer.TT_EOF != (currentToken = tokenizer.nextToken())) {
        // Skip empty lines
        if (currentToken == StreamTokenizer.TT_EOL) {
            continue;
        }
        // Get index of first class.
        if (currentToken != StreamTokenizer.TT_NUMBER) {
            throw new Exception("Only numbers and comments allowed " + "in cost file!");
        }
        firstIndex = tokenizer.nval;
        if (!Utils.eq((int) firstIndex, firstIndex)) {
            throw new Exception("First number in line has to be " + "index of a class!");
        }
        if ((int) firstIndex >= size()) {
            throw new Exception("Class index out of range!");
        }
        // Get index of second class.
        if (StreamTokenizer.TT_EOF == (currentToken = tokenizer.nextToken())) {
            throw new Exception("Premature end of file!");
        }
        if (currentToken == StreamTokenizer.TT_EOL) {
            throw new Exception("Premature end of line!");
        }
        if (currentToken != StreamTokenizer.TT_NUMBER) {
            throw new Exception("Only numbers and comments allowed " + "in cost file!");
        }
        secondIndex = tokenizer.nval;
        if (!Utils.eq((int) secondIndex, secondIndex)) {
            throw new Exception("Second number in line has to be " + "index of a class!");
        }
        if ((int) secondIndex >= size()) {
            throw new Exception("Class index out of range!");
        }
        if ((int) secondIndex == (int) firstIndex) {
            throw new Exception("Diagonal of cost matrix non-zero!");
        }
        // Get cost factor.
        if (StreamTokenizer.TT_EOF == (currentToken = tokenizer.nextToken())) {
            throw new Exception("Premature end of file!");
        }
        if (currentToken == StreamTokenizer.TT_EOL) {
            throw new Exception("Premature end of line!");
        }
        if (currentToken != StreamTokenizer.TT_NUMBER) {
            throw new Exception("Only numbers and comments allowed " + "in cost file!");
        }
        weight = tokenizer.nval;
        if (!Utils.gr(weight, 0)) {
            throw new Exception("Only positive weights allowed!");
        }
        setCell((int) firstIndex, (int) secondIndex, new Double(weight));
    }
}
