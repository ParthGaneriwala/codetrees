public void reduceDL(double expFPRate, boolean checkErr) {
    boolean needUpdate = false;
    double[] rulesetStat = new double[6];
    for (int j = 0; j < m_SimpleStats.size(); j++) {
        // Covered stats are cumulative
        rulesetStat[0] += m_SimpleStats.get(j)[0];
        rulesetStat[2] += m_SimpleStats.get(j)[2];
        rulesetStat[4] += m_SimpleStats.get(j)[4];
        if (j == m_SimpleStats.size() - 1) {
            // Last rule
            rulesetStat[1] = m_SimpleStats.get(j)[1];
            rulesetStat[3] = m_SimpleStats.get(j)[3];
            rulesetStat[5] = m_SimpleStats.get(j)[5];
        }
    }
    // Potential
    for (int k = m_SimpleStats.size() - 1; k >= 0; k--) {
        double[] ruleStat = m_SimpleStats.get(k);
        // rulesetStat updated
        double ifDeleted = potential(k, expFPRate, rulesetStat, ruleStat, checkErr);
        if (!Double.isNaN(ifDeleted)) {
            if (k == (m_SimpleStats.size() - 1)) {
                removeLast();
            } else {
                m_Ruleset.remove(k);
                needUpdate = true;
            }
        }
    }
    if (needUpdate) {
        m_Filtered = null;
        m_SimpleStats = null;
        countData();
    }
}
