@Override
public List<Dependency> getBaseSystemDependency() throws Exception {
    String dependenciesS = getPackageMetaDataElement("Depends").toString();
    Dependency baseDep = null;
    List<Dependency> baseDeps = new ArrayList<Dependency>();
    if (dependenciesS != null) {
        StringTokenizer tok = new StringTokenizer(dependenciesS, ",");
        while (tok.hasMoreTokens()) {
            String nextT = tok.nextToken().trim();
            String[] split = splitNameVersion(nextT);
            if ((split[0].equalsIgnoreCase(m_packageManager.getBaseSystemName()))) {
                // construct a "dummy" package for the base system
                Map<String, String> baseMap = new HashMap<String, String>();
                baseMap.put("PackageName", "weka");
                // use a suitably ridiculous max version number if one hasn't been
                // supplied
                // for some reason
                split[2] = (split[2] == null ? "1000.1000.1000" : split[2]);
                baseMap.put("Version", split[2]);
                Package basePackage = new DefaultPackage(null, m_packageManager, baseMap);
                if (split.length == 3) {
                    VersionPackageConstraint baseConstraint = new VersionPackageConstraint(basePackage);
                    VersionPackageConstraint.VersionComparison baseComp = VersionPackageConstraint.VersionComparison.LESSTHANOREQUAL;
                    if (split[1] != null) {
                        baseComp = VersionPackageConstraint.getVersionComparison(split[1]);
                    }
                    baseConstraint.setVersionConstraint(baseComp);
                    baseDep = new Dependency(this, baseConstraint);
                    baseDeps.add(baseDep);
                } else {
                    // ranged constraint
                    VersionRangePackageConstraint baseConstraint = new VersionRangePackageConstraint(basePackage);
                    VersionPackageConstraint.VersionComparison comp1 = VersionPackageConstraint.getVersionComparison(split[1]);
                    VersionPackageConstraint.VersionComparison comp2 = VersionPackageConstraint.getVersionComparison(split[3]);
                    baseConstraint.setRangeConstraint(split[2], comp1, split[4], comp2);
                    baseDep = new Dependency(this, baseConstraint);
                    baseDeps.add(baseDep);
                }
            }
        }
    }
    if (baseDeps.size() == 0) {
        throw new Exception("[Package] " + getPackageMetaDataElement("PackageName").toString() + " can't determine what version of the base system is required!!");
    }
    return baseDeps;
}
