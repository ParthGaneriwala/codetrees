public void testOrOperator() throws Exception {
    boolean[] values = { true, false };
    for (boolean left : values) {
        for (boolean right : values) {
            // basics
            assertEquals(left || right, evaluateBoolean(left + " or " + right));
            assertEquals(left || right, evaluateBoolean(left + " | " + right));
            // commutativity
            assertEquals(evaluateBoolean(right + " or " + left), evaluateBoolean(left + " or " + right));
            assertEquals(evaluateBoolean(right + " | " + left), evaluateBoolean(left + " | " + right));
            for (boolean third : values) {
                // due to commutativity the operator is both left and right associative
                // so we test both
                // left associativity
                assertEquals(left || right || third, evaluateBoolean("(" + left + " or " + right + ") or " + third));
                assertEquals(left || right || third, evaluateBoolean("(" + left + " | " + right + ") | " + third));
                // right associativity
                assertEquals(left || right || third, evaluateBoolean(left + " or (" + right + " or " + third + ")"));
                assertEquals(left || right || third, evaluateBoolean(left + " | (" + right + " | " + third + ")"));
                // interchangeability
                assertEquals(left || right || third, evaluateBoolean(left + " or " + right + " | " + third));
            }
        }
    }
}
