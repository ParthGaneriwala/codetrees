@SuppressWarnings("deprecation")
@Override
public synchronized void acceptInstance(InstanceEvent e) {
    if (e.getStatus() == InstanceEvent.FORMAT_AVAILABLE) {
        m_throughput = new StreamThroughput(statusMessagePrefix());
        // start of a new stream
        try {
            m_Saver = makeCopy();
        } catch (Exception ex) {
            if (m_logger != null) {
                m_logger.statusMessage(statusMessagePrefix() + "ERROR (See log for details)");
                m_logger.logMessage("[Saver] " + statusMessagePrefix() + " unable to copy saver. " + ex.getMessage());
            }
        }
        m_Saver.setRetrieval(weka.core.converters.Saver.INCREMENTAL);
        m_structure = e.getStructure();
        m_fileName = sanitizeFilename(m_structure.relationName());
        m_Saver.setInstances(m_structure);
        if (m_isDBSaver) {
            if (((DatabaseSaver) m_SaverTemplate).getRelationForTableName()) {
                ((DatabaseSaver) m_Saver).setTableName(m_fileName);
                ((DatabaseSaver) m_Saver).setRelationForTableName(false);
            }
        }
    }
    if (e.getStatus() == InstanceEvent.INSTANCE_AVAILABLE) {
        m_visual.setAnimated();
        m_throughput.updateStart();
        if (m_count == 0) {
            passEnvOnToSaver();
            if (!m_isDBSaver) {
                try {
                    m_Saver.setDirAndPrefix(m_fileName, "");
                } catch (Exception ex) {
                    System.out.println(ex);
                    m_visual.setStatic();
                }
            }
            m_count++;
        }
        try {
            /*
         * String visText = this.getName(); visText = (m_fileName.length() > 0)
         * ? m_fileName : m_Saver.filePrefix(); m_visual.setText(m_fileName);
         */
            m_Saver.writeIncremental(e.getInstance());
            m_throughput.updateEnd(m_logger);
        } catch (Exception ex) {
            m_visual.setStatic();
            System.err.println("Instance " + e.getInstance() + " could not been saved");
            ex.printStackTrace();
        }
    }
    if (e.getStatus() == InstanceEvent.BATCH_FINISHED) {
        try {
            if (m_count == 0) {
                passEnvOnToSaver();
                if (!m_isDBSaver) {
                    try {
                        m_Saver.setDirAndPrefix(m_fileName, "");
                    } catch (Exception ex) {
                        System.out.println(ex);
                        m_visual.setStatic();
                    }
                }
                m_count++;
            }
            m_Saver.writeIncremental(e.getInstance());
            if (e.getInstance() != null) {
                m_throughput.updateStart();
                m_Saver.writeIncremental(null);
                m_throughput.updateEnd(m_logger);
            }
            // m_firstNotice = true;
            m_visual.setStatic();
            // System.out.println("...relation " + m_fileName + " saved.");
            /*
         * String visText = this.getName(); visText = (m_fileName.length() > 0)
         * ? m_fileName : m_Saver.filePrefix(); m_visual.setText(visText);
         */
            m_count = 0;
            m_throughput.finished(m_logger);
        } catch (Exception ex) {
            m_visual.setStatic();
            System.err.println("File could not have been closed.");
            ex.printStackTrace();
        }
    }
}
