@Override
protected Instances process(Instances instances) throws Exception {
    // Only change first batch of data
    if (isFirstBatchDone()) {
        return new Instances(instances);
    }
    Instances dataToUseForMakingWeights = instances;
    if (instances.classAttribute().isNumeric()) {
        Discretize discretizer = new Discretize();
        discretizer.setBins(m_NumIntervals);
        discretizer.setIgnoreClass(true);
        int[] indices = new int[] { instances.classIndex() };
        discretizer.setAttributeIndicesArray(indices);
        discretizer.setInputFormat(instances);
        dataToUseForMakingWeights = Filter.useFilter(instances, discretizer);
    }
    // Calculate the sum of weights per class and in total
    double[] sumOfWeightsPerClass = new double[dataToUseForMakingWeights.numClasses()];
    for (int i = 0; i < dataToUseForMakingWeights.numInstances(); i++) {
        Instance inst = dataToUseForMakingWeights.instance(i);
        sumOfWeightsPerClass[(int) inst.classValue()] += inst.weight();
    }
    double sumOfWeights = Utils.sum(sumOfWeightsPerClass);
    // Copy data and rescale weights
    Instances result = new Instances(instances);
    double factor = sumOfWeights / (double) dataToUseForMakingWeights.numClasses();
    for (int i = 0; i < result.numInstances(); i++) {
        result.instance(i).setWeight(factor * result.instance(i).weight() / sumOfWeightsPerClass[(int) dataToUseForMakingWeights.instance(i).classValue()]);
    }
    return result;
}
