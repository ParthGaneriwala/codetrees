private static String[] processPackage(File packageDirectory) throws Exception {
    System.err.println("Processing " + packageDirectory);
    File[] contents = packageDirectory.listFiles();
    File latest = null;
    ArrayList<File> propsFiles = new ArrayList<File>();
    StringBuffer versionsTextBuffer = new StringBuffer();
    for (File content : contents) {
        if (content.isFile() && content.getName().endsWith(".props")) {
            propsFiles.add(content);
            if (content.getName().equals("Latest.props")) {
                latest = content;
            }
        /*
           * else { String versionNumber = contents[i].getName().substring(0,
           * contents[i].getName().indexOf(".props"));
           * versionsTextBuffer.append(versionNumber + "\n"); }
           */
        }
    }
    File[] sortedPropsFiles = propsFiles.toArray(new File[0]);
    Arrays.sort(sortedPropsFiles, new Comparator<File>() {

        @Override
        public int compare(File first, File second) {
            String firstV = first.getName().substring(0, first.getName().indexOf(".props"));
            String secondV = second.getName().substring(0, second.getName().indexOf(".props"));
            if (firstV.equalsIgnoreCase("Latest")) {
                return -1;
            } else if (secondV.equalsIgnoreCase("Latest")) {
                return 1;
            }
            return -RepositoryIndexGenerator.compare(firstV, secondV);
        }
    });
    StringBuffer indexBuff = new StringBuffer();
    indexBuff.append(HEADER + "\n\n");
    // indexBuff.append(HEADER + BIRD_IMAGE2);
    // indexBuff.append(PENTAHO_IMAGE2);
    Properties latestProps = new Properties();
    latestProps.load(new BufferedReader(new FileReader(latest)));
    String packageName = latestProps.getProperty("PackageName") + ": ";
    String packageTitle = latestProps.getProperty("Title");
    String packageCategory = latestProps.getProperty("Category");
    String latestVersion = latestProps.getProperty("Version");
    if (packageCategory == null) {
        packageCategory = "";
    }
    indexBuff.append("<h2>" + packageName + packageTitle + "</h2>\n\n");
    String author = latestProps.getProperty("Author");
    author = cleansePropertyValue(author);
    String URL = latestProps.getProperty("URL");
    if (URL != null) {
        URL = cleansePropertyValue(URL);
    }
    String maintainer = latestProps.getProperty("Maintainer");
    maintainer = cleansePropertyValue(maintainer);
    indexBuff.append("\n<table>\n");
    if (URL != null && URL.length() > 0) {
        indexBuff.append("<tr><td valign=top>" + "URL" + ":</td><td width=50></td>");
        URL = "<a href=\"" + URL + "\">" + URL + "</a>";
        indexBuff.append("<td>" + URL + "</td></tr>\n");
    }
    indexBuff.append("<tr><td valign=top>" + "Author" + ":</td><td width=50></td>");
    indexBuff.append("<td>" + author + "</td></tr>\n");
    indexBuff.append("<tr><td valign=top>" + "Maintainer" + ":</td><td width=50></td>");
    indexBuff.append("<td>" + maintainer + "</td></tr>\n");
    indexBuff.append("</table>\n<p>\n");
    String description = latestProps.getProperty("Description");
    indexBuff.append("<p>" + description.replace("\n", "<br/>") + "</p>\n\n");
    indexBuff.append("<p>All available versions:<br>\n");
    for (int i = 0; i < sortedPropsFiles.length; i++) {
        if (i > 0) {
            String versionNumber = sortedPropsFiles[i].getName().substring(0, sortedPropsFiles[i].getName().indexOf(".props"));
            versionsTextBuffer.append(versionNumber + "\n");
            System.err.println(versionNumber);
        }
        String name = sortedPropsFiles[i].getName();
        name = name.substring(0, name.indexOf(".props"));
        indexBuff.append("<a href=\"" + name + ".html" + "\">" + name + "</a><br>\n");
        StringBuffer version = new StringBuffer();
        version.append(HEADER + "\n\n");
        // version.append(HEADER + BIRD_IMAGE2);
        // version.append(PENTAHO_IMAGE2);
        version.append("<table summary=\"Package " + packageName + " summary\">\n");
        Properties versionProps = new Properties();
        versionProps.load(new BufferedReader(new FileReader(sortedPropsFiles[i])));
        Set<Object> keys = versionProps.keySet();
        String[] sortedKeys = keys.toArray(new String[0]);
        Arrays.sort(sortedKeys);
        // while (keyI.hasNext()) {
        for (String key : sortedKeys) {
            // String key = (String)keyI.next();
            if (key.equalsIgnoreCase("PackageName") || key.equalsIgnoreCase("Title") || /* key.equalsIgnoreCase("Description") || */
            key.equalsIgnoreCase("DoNotLoadIfFileNotPresentMessage") || key.equalsIgnoreCase("DoNotLoadIfClassNotPresentMessage") || key.equalsIgnoreCase("DoNotLoadIfEnvVarNotSetMessage")) {
            } else {
                version.append("<tr><td valign=top>" + key + ":</td><td width=50></td>");
                String propValue = versionProps.getProperty(key);
                if (!key.equalsIgnoreCase("Description")) {
                    propValue = propValue.replace("<", "&#60;");
                    propValue = propValue.replace(">", "&#62;");
                    propValue = propValue.replace("@", "{[at]}");
                    propValue = propValue.replace("\n", "<br/>");
                }
                if (key.equals("PackageURL") || key.equals("URL")) {
                    propValue = "<a href=\"" + propValue + "\">" + propValue + "</a>";
                }
                version.append("<td>" + propValue + "</td></tr>\n");
            }
        }
        version.append("</table>\n</body>\n</html>\n");
        String versionHTMLFileName = packageDirectory.getAbsolutePath() + File.separator + name + ".html";
        BufferedWriter br = new BufferedWriter(new FileWriter(versionHTMLFileName));
        br.write(version.toString());
        br.flush();
        br.close();
    }
    indexBuff.append("</body>\n</html>\n");
    String packageIndexName = packageDirectory.getAbsolutePath() + File.separator + "index.html";
    BufferedWriter br = new BufferedWriter(new FileWriter(packageIndexName));
    br.write(indexBuff.toString());
    br.flush();
    br.close();
    // write the versions file to the directory
    String packageVersionsName = packageDirectory.getAbsolutePath() + File.separator + "versions.txt";
    br = new BufferedWriter(new FileWriter(packageVersionsName));
    br.write(versionsTextBuffer.toString());
    br.flush();
    br.close();
    // return indexBuff.toString();
    String[] returnInfo = new String[3];
    returnInfo[0] = packageTitle;
    returnInfo[1] = packageCategory;
    returnInfo[2] = latestVersion;
    return returnInfo;
}
