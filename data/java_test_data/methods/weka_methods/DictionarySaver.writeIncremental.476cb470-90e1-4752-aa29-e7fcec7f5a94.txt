@Override
public void writeIncremental(Instance inst) throws IOException {
    int writeMode = getWriteMode();
    Instances structure = getInstances();
    if (getRetrieval() == BATCH || getRetrieval() == NONE) {
        throw new IOException("Batch and incremental saving cannot be mixed.");
    }
    if (writeMode == WAIT) {
        if (structure == null) {
            setWriteMode(CANCEL);
            if (inst != null) {
                throw new IOException("Structure (header Information) has to be set " + "in advance");
            }
        } else {
            setWriteMode(STRUCTURE_READY);
        }
        writeMode = getWriteMode();
    }
    if (writeMode == CANCEL) {
        cancel();
    }
    if (writeMode == STRUCTURE_READY) {
        m_dictionaryBuilder.reset();
        try {
            m_dictionaryBuilder.setup(structure);
        } catch (Exception ex) {
            throw new IOException(ex);
        }
        setWriteMode(WRITE);
        writeMode = getWriteMode();
    }
    if (writeMode == WRITE) {
        if (structure == null) {
            throw new IOException("No instances information available.");
        }
        if (inst != null) {
            m_dictionaryBuilder.processInstance(inst);
        } else {
            try {
                m_dictionaryBuilder.finalizeDictionary();
            } catch (Exception e) {
                throw new IOException(e);
            }
            if (retrieveFile() == null && getWriter() == null) {
                if (getSaveBinaryDictionary()) {
                    throw new IOException("Can't output binary dictionary to standard out!");
                }
                m_dictionaryBuilder.saveDictionary(System.out);
            } else {
                if (getSaveBinaryDictionary()) {
                    m_dictionaryBuilder.saveDictionary(m_binaryStream);
                } else {
                    m_dictionaryBuilder.saveDictionary(getWriter());
                }
            }
            resetStructure();
            resetWriter();
        }
    }
}
