protected Object drillToProperty(Object baseObject, List<String> propertyPath) throws WekaException {
    Object objectBeingConfigured = baseObject;
    if (propertyPath != null) {
        for (String methodName : propertyPath) {
            try {
                boolean isArray = methodName.endsWith("]");
                int arrayIndex = -1;
                if (isArray) {
                    String arrayPart = methodName.substring(methodName.indexOf('[') + 1, methodName.lastIndexOf(']'));
                    arrayIndex = Integer.parseInt(arrayPart.trim());
                    methodName = methodName.substring(0, methodName.indexOf('['));
                }
                BeanInfo bi = Introspector.getBeanInfo(objectBeingConfigured.getClass());
                PropertyDescriptor[] properties = bi.getPropertyDescriptors();
                PropertyDescriptor targetProperty = null;
                for (PropertyDescriptor p : properties) {
                    if (p.getName().equals(methodName)) {
                        targetProperty = p;
                        break;
                    }
                }
                if (targetProperty == null) {
                    throw new WekaException("Unable to find accessor method for property path part: " + methodName + " on object " + objectBeingConfigured.getClass().getName());
                }
                Method getMethod = targetProperty.getReadMethod();
                Object[] args = {};
                objectBeingConfigured = getMethod.invoke(objectBeingConfigured, args);
                if (isArray) {
                    // get the indexed element
                    if (!objectBeingConfigured.getClass().isArray()) {
                        throw new WekaException("Property path element '" + methodName + "' was specified as an array type, but the " + "resulting object retrieved " + "from this property is not an array!");
                    }
                    objectBeingConfigured = ((Object[]) objectBeingConfigured)[arrayIndex];
                }
            } catch (IntrospectionException ex) {
                throw new WekaException("GOEManager: couldn't introspect", ex);
            } catch (InvocationTargetException e) {
                throw new WekaException("Invocation target exception when invoking " + methodName + " on " + objectBeingConfigured.getClass().getName(), e);
            } catch (IllegalAccessException e) {
                throw new WekaException(e);
            }
        }
    }
    return objectBeingConfigured;
}
