protected static void writeRepoZipFile(File repositoryHome, StringBuffer packagesList) {
    System.out.print("Writing repo archive");
    StringReader r = new StringReader(packagesList.toString());
    BufferedReader br = new BufferedReader(r);
    String packageName;
    try {
        FileOutputStream fo = new FileOutputStream(repositoryHome.getAbsolutePath() + File.separator + "repo.zip");
        ZipOutputStream zos = new ZipOutputStream(fo);
        while ((packageName = br.readLine()) != null) {
            writeZipEntryForPackage(repositoryHome, packageName, zos);
            System.out.print(".");
        }
        System.out.println();
        // include the package list (legacy) in the zip
        ZipEntry z = new ZipEntry("packageList.txt");
        FileInputStream fi = new FileInputStream(repositoryHome.getAbsolutePath() + File.separator + "packageList.txt");
        BufferedInputStream bi = new BufferedInputStream(fi);
        zos.putNextEntry(z);
        transBytes(bi, zos);
        bi.close();
        // include the package list with latest version numbers
        z = new ZipEntry("packageListWithVersion.txt");
        fi = new FileInputStream(repositoryHome.getAbsolutePath() + File.separator + "packageListWithVersion.txt");
        bi = new BufferedInputStream(fi);
        zos.putNextEntry(z);
        transBytes(bi, zos);
        bi.close();
        // include the forced refresh count file (if it exists)
        File forced = new File(repositoryHome.getAbsolutePath() + File.separator + WekaPackageManager.FORCED_REFRESH_COUNT_FILE);
        if (forced.exists()) {
            z = new ZipEntry(WekaPackageManager.FORCED_REFRESH_COUNT_FILE);
            fi = new FileInputStream(forced);
            bi = new BufferedInputStream(fi);
            zos.putNextEntry(z);
            transBytes(bi, zos);
            bi.close();
        }
        // Include the top level images
        FileReader fr = new FileReader(repositoryHome.getAbsolutePath() + File.separator + "images.txt");
        br = new BufferedReader(fr);
        String imageName;
        while ((imageName = br.readLine()) != null) {
            z = new ZipEntry(imageName);
            fi = new FileInputStream(repositoryHome.getAbsolutePath() + File.separator + imageName);
            bi = new BufferedInputStream(fi);
            zos.putNextEntry(z);
            transBytes(bi, zos);
            bi.close();
        }
        // include the image list in the zip
        z = new ZipEntry("images.txt");
        fi = new FileInputStream(repositoryHome.getAbsolutePath() + File.separator + "images.txt");
        bi = new BufferedInputStream(fi);
        zos.putNextEntry(z);
        transBytes(bi, zos);
        bi.close();
        zos.close();
        File f = new File(repositoryHome.getAbsolutePath() + File.separator + "repo.zip");
        long size = f.length();
        // write the size of the repo (in KB) to a file
        FileWriter fw = new FileWriter(repositoryHome.getAbsolutePath() + File.separator + "repoSize.txt");
        if (size > 1024) {
            size /= 1024;
        }
        fw.write("" + size);
        fw.flush();
        fw.close();
    } catch (Exception ex) {
        ex.printStackTrace();
    }
}
