private String parseSignature(String signature, List<Class<?>> types) throws InvalidSignature {
    // tokens now should be <returntype> <name> '(' [ <type> [ ',' <type> ]* ] ')'
    List<String> tokens = tokenize(signature);
    if (tokens.size() < 4)
        throw new InvalidSignature("Not enough tokens in '" + signature + "'");
    // get return type
    types.add(getType(tokens.get(0)));
    // check name
    if (!isJavaIdentifier(tokens.get(1)))
        throw new InvalidSignature("Invalid function name '" + tokens.get(1) + "'");
    String name = tokens.get(1);
    // check opening bracket
    if (!"(".equals(tokens.get(2)))
        throw new InvalidSignature("Missing opening bracket, got '" + tokens.get(2) + "' instead");
    boolean first = true;
    int i = 3;
    for (; i < tokens.size() && !")".equals(tokens.get(i)); i++) {
        // check comma
        if (!first && !",".equals(tokens.get(i)))
            throw new InvalidSignature("Missing comma between parameters, got '" + tokens.get(i) + "' instead");
        if (!first)
            ++i;
        // get parameter
        if (i >= tokens.size())
            throw new InvalidSignature("No parameter after comma!");
        types.add(getType(tokens.get(i)));
        first = false;
    }
    // check closing bracket
    if (i < tokens.size() && !")".equals(tokens.get(i))) {
        System.out.println(i);
        System.out.println(tokens);
        throw new InvalidSignature("Missing closing bracket, got '" + tokens.get(i) + "' instead");
    }
    // check end
    if (i != tokens.size() - 1)
        throw new InvalidSignature("Failed parsing signature at token '" + tokens.get(i) + "'");
    return name;
}
