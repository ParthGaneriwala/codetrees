private void arrayFill(Node t, NodeInfo[] l, EdgeInfo[] k) {
    if (t == null || l == null) {
        // this is just a preliminary safety check
        System.exit(1);
    // (i shouldn' need it)
    }
    Edge e;
    Node r, s;
    l[0] = new NodeInfo();
    l[0].m_node = t;
    l[0].m_parent = -1;
    l[0].m_change = true;
    // this will point at a node that has previously been
    int floater;
    // put in the list
    // all of the children that this node has shall be put in the list ,
    // once this is done the floater shall point at the next node in the list
    // this will allow the nodes to be put into order from closest to top node
    // to furtherest from top node
    // the next empty array position
    int free_space = 1;
    // this will be used to determine if the node
    double height = t.getTop();
    for (floater = 0; floater < free_space; floater++) {
        r = l[floater].m_node;
        for (int noa = 0; (e = r.getChild(noa)) != null; noa++) {
            // this loop pulls out each child of r
            // e points to a child edge, getTarget will return that edges child node
            s = e.getTarget();
            l[free_space] = new NodeInfo();
            l[free_space].m_node = s;
            l[free_space].m_parent = free_space - 1;
            k[free_space - 1] = new EdgeInfo();
            k[free_space - 1].m_edge = e;
            k[free_space - 1].m_parent = floater;
            // note although it's child
            k[free_space - 1].m_child = free_space;
            // determine if level of node has changed from previous one
            if (height != s.getTop()) {
                l[free_space].m_change = true;
                height = s.getTop();
            } else {
                l[free_space].m_change = false;
            }
            free_space++;
        }
    }
}
