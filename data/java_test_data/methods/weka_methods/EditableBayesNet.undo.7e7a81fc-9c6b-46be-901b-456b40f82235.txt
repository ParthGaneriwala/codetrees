// c'tor
@Override
public void undo() {
    try {
        for (int iNode = 0; iNode < m_nodes.size(); iNode++) {
            int nTargetNode = m_nodes.get(iNode);
            m_Instances.insertAttributeAt(m_att[iNode], nTargetNode);
        }
        int nAtts = m_Instances.numAttributes();
        // update parentsets
        ParentSet[] parentSets = new ParentSet[nAtts];
        int[] offset = new int[nAtts];
        for (int iNode = 0; iNode < nAtts; iNode++) {
            offset[iNode] = iNode;
        }
        for (int iNode = m_nodes.size() - 1; iNode >= 0; iNode--) {
            int nTargetNode = m_nodes.get(iNode);
            for (int i = nTargetNode; i < nAtts - 1; i++) {
                offset[i] = offset[i + 1];
            }
        }
        int iTargetNode = 0;
        for (int iParentSet = 0; iParentSet < nAtts; iParentSet++) {
            if (iTargetNode < m_nodes.size() && m_nodes.get(iTargetNode) == iParentSet) {
                SerializedObject so = new SerializedObject(m_ParentSet[iTargetNode]);
                parentSets[iParentSet] = (ParentSet) so.getObject();
                iTargetNode++;
            } else {
                parentSets[iParentSet] = m_ParentSets[iParentSet - iTargetNode];
                for (int iParent = 0; iParent < parentSets[iParentSet].getNrOfParents(); iParent++) {
                    int nParent = parentSets[iParentSet].getParent(iParent);
                    parentSets[iParentSet].SetParent(iParent, offset[nParent]);
                }
            }
        }
        m_ParentSets = parentSets;
        // update distributions
        Estimator[][] distributions = new Estimator[nAtts][];
        iTargetNode = 0;
        for (int iNode = 0; iNode < nAtts; iNode++) {
            if (iTargetNode < m_nodes.size() && m_nodes.get(iTargetNode) == iNode) {
                SerializedObject so = new SerializedObject(m_CPT[iTargetNode]);
                distributions[iNode] = (Estimator[]) so.getObject();
                iTargetNode++;
            } else {
                distributions[iNode] = m_Distributions[iNode - iTargetNode];
            }
        }
        m_Distributions = distributions;
        for (int iNode = 0; iNode < m_nodes.size(); iNode++) {
            int nTargetNode = m_nodes.get(iNode);
            m_nPositionX.add(nTargetNode, m_nPosX[iNode]);
            m_nPositionY.add(nTargetNode, m_nPosY[iNode]);
            m_nEvidence.add(nTargetNode, -1);
            m_fMarginP.add(nTargetNode, new double[getCardinality(nTargetNode)]);
        }
        for (int deletedArc = 0; deletedArc < m_deleteArcActions.size(); deletedArc++) {
            DeleteArcAction action = m_deleteArcActions.get(deletedArc);
            action.undo();
        }
    } catch (Exception e) {
        e.printStackTrace();
    }
}
