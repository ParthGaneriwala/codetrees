/**
 * Get the result of applying this function when the output type categorical.
 * Will throw an exception for numeric output. If subclasses output definition
 * is a string attribute (i.e. because all legal values can't be computed apriori),
 * then the subclass will need to overide this method and return something sensible
 * in this case.
 *
 * @param incoming the incoming arguments to this function (supplied in order to match
 * that of the parameter definitions
 * @return the result of applying this function as a String.
 * @throws Exception if this method is not applicable because the optype is not
 * categorical/ordinal
 *
 * public String getResultCategorical(double[] incoming) throws Exception {
 * if (m_parameterDefs == null) {
 * throw new Exception("[BuiltInString] incoming parameter structure has not been set");
 * }
 *
 * if (!m_func.legalNumParams(incoming.length)) {
 * throw new Exception("[BuiltInString] wrong number of parameters!");
 * }
 *
 * // construct the input to the function
 * Object[] args = setUpArgs(incoming);
 *
 * // get the result
 * String result = m_func.eval(args);
 *
 * return result;
 * }
 */
public void setParameterDefs(ArrayList<Attribute> paramDefs) throws Exception {
    m_parameterDefs = paramDefs;
    if (!m_func.legalNumParams(m_parameterDefs.size())) {
        throw new Exception("[BuiltInMath] illegal number of parameters for function: " + m_functionName);
    }
}
