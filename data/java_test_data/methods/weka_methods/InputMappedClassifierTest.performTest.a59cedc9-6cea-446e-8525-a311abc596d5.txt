protected void performTest(boolean nomClass, int numClassesTrain, int numTrainAtts, boolean reorderAtts, boolean reorderNomLabels, boolean reorderClassLabels) {
    Instances train = null;
    Instances test = null;
    try {
        train = generateData(nomClass, numClassesTrain, numTrainAtts, 3);
    } catch (Exception ex) {
        fail("Generating training data failed: " + ex);
    }
    test = new Instances(train);
    if (reorderNomLabels) {
        // do the first attribute
        try {
            test = swapValues(1, test);
        } catch (Exception ex) {
            fail("Reordering nominal labels failed: " + ex);
        }
    }
    if (reorderClassLabels && nomClass) {
        try {
            test = swapValues(7, test);
        } catch (Exception ex) {
            fail("Reordering class labels failed: " + ex);
        }
    }
    if (reorderAtts) {
        try {
            test = reorderAtts(test);
        } catch (Exception ex) {
            fail("Reordering test data failed: " + ex);
        }
    }
    InputMappedClassifier toUse = null;
    try {
        toUse = trainClassifier(train, nomClass);
    } catch (Exception ex) {
        fail("Training classifier failed: " + ex);
    }
    double[] resultsOnTrainingStructure = null;
    try {
        resultsOnTrainingStructure = testClassifier(train, toUse);
    } catch (Exception ex) {
        fail("Testing classifier on training data failed: " + ex);
    }
    double[] resultsOnTestStructure = null;
    try {
        resultsOnTestStructure = testClassifier(test, toUse);
    } catch (Exception ex) {
        fail("Testing classifier on test data failed: " + ex);
    }
    try {
        for (int i = 0; i < resultsOnTrainingStructure.length; i++) {
            if (resultsOnTrainingStructure[i] != resultsOnTestStructure[i]) {
                throw new Exception("Result #" + (i + 1) + " differs!");
            }
        }
    } catch (Exception ex) {
        fail("Comparing results failed " + ex);
    }
}
