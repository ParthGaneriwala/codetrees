@Override
public void setOptions(String[] options) throws Exception {
    String tmpStr;
    setNoHeaderRowPresent(Utils.getFlag('H', options));
    tmpStr = Utils.getOption('N', options);
    if (tmpStr.length() != 0) {
        setNominalAttributes(tmpStr);
    } else {
        setNominalAttributes("");
    }
    tmpStr = Utils.getOption('S', options);
    if (tmpStr.length() != 0) {
        setStringAttributes(tmpStr);
    } else {
        setStringAttributes("");
    }
    tmpStr = Utils.getOption('D', options);
    if (tmpStr.length() > 0) {
        setDateAttributes(tmpStr);
    }
    tmpStr = Utils.getOption("format", options);
    if (tmpStr.length() > 0) {
        setDateFormat(tmpStr);
    }
    tmpStr = Utils.getOption('R', options);
    if (tmpStr.length() > 0) {
        setNumericAttributes(tmpStr);
    }
    tmpStr = Utils.getOption('M', options);
    if (tmpStr.length() != 0) {
        setMissingValue(tmpStr);
    } else {
        setMissingValue("?");
    }
    tmpStr = Utils.getOption('F', options);
    if (tmpStr.length() != 0) {
        setFieldSeparator(tmpStr);
    } else {
        setFieldSeparator(",");
    }
    tmpStr = Utils.getOption('B', options);
    if (tmpStr.length() > 0) {
        int buff = Integer.parseInt(tmpStr);
        if (buff < 1) {
            throw new Exception("Buffer size must be >= 1");
        }
        setBufferSize(buff);
    }
    tmpStr = Utils.getOption("E", options);
    if (tmpStr.length() > 0) {
        setEnclosureCharacters(tmpStr);
    }
    while (true) {
        tmpStr = Utils.getOption('L', options);
        if (tmpStr.length() == 0) {
            break;
        }
        m_nominalLabelSpecs.add(tmpStr);
    }
}
