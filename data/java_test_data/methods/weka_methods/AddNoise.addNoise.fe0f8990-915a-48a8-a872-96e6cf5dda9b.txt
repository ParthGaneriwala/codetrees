public void addNoise(Instances instances, int seed, int percent, int attIndex, boolean useMissing) {
    int[] indexList;
    int[] partition_count;
    int[] partition_max;
    // percentage used for splits
    double splitPercent = percent;
    // fill array with the indexes
    indexList = new int[instances.numInstances()];
    for (int i = 0; i < instances.numInstances(); i++) {
        indexList[i] = i;
    }
    // randomize list of indexes
    Random random = new Random(seed);
    for (int i = instances.numInstances() - 1; i >= 0; i--) {
        int hValue = indexList[i];
        int hIndex = (int) (random.nextDouble() * i);
        indexList[i] = indexList[hIndex];
        indexList[hIndex] = hValue;
    }
    // initialize arrays that are used to count instances
    // of each value and to keep the amount of instances of that value
    // that has to be changed
    // this is done for the missing values in the two variables
    // missing_count and missing_max
    int numValues = instances.attribute(attIndex).numValues();
    partition_count = new int[numValues];
    partition_max = new int[numValues];
    int missing_count = 0;
    int missing_max = 0;
    for (int i = 0; i < numValues; i++) {
        partition_count[i] = 0;
        partition_max[i] = 0;
    }
    // variable missing_max
    for (Object element : instances) {
        Instance instance = (Instance) element;
        if (instance.isMissing(attIndex)) {
            missing_max++;
        } else {
            instance.value(attIndex);
            partition_max[(int) instance.value(attIndex)]++;
        }
    }
    // how many of the missing values
    if (!useMissing) {
        missing_max = missing_count;
    } else {
        missing_max = (int) (((double) missing_max / 100) * splitPercent + 0.5);
    }
    int sum_max = missing_max;
    for (int i = 0; i < numValues; i++) {
        partition_max[i] = (int) (((double) partition_max[i] / 100) * splitPercent + 0.5);
        sum_max = sum_max + partition_max[i];
    }
    // initialize sum_count to zero, use this variable to see if
    // everything is done already
    int sum_count = 0;
    // add noise
    // using the randomized index-array
    // 
    Random randomValue = new Random(seed);
    int numOfValues = instances.attribute(attIndex).numValues();
    for (int i = 0; i < instances.numInstances(); i++) {
        if (sum_count >= sum_max) {
            break;
        }
        // finished
        Instance currInstance = instances.instance(indexList[i]);
        // if value is missing then...
        if (currInstance.isMissing(attIndex)) {
            if (missing_count < missing_max) {
                changeValueRandomly(randomValue, numOfValues, attIndex, currInstance, useMissing);
                missing_count++;
                sum_count++;
            }
        } else {
            int vIndex = (int) currInstance.value(attIndex);
            if (partition_count[vIndex] < partition_max[vIndex]) {
                changeValueRandomly(randomValue, numOfValues, attIndex, currInstance, useMissing);
                partition_count[vIndex]++;
                sum_count++;
            }
        }
    }
}
