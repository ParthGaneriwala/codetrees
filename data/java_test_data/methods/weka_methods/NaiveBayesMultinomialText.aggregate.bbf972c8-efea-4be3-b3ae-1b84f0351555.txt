@Override
public NaiveBayesMultinomialText aggregate(NaiveBayesMultinomialText toAggregate) throws Exception {
    if (m_numModels == Integer.MIN_VALUE) {
        throw new Exception("Can't aggregate further - model has already been " + "aggregated and finalized");
    }
    if (m_probOfClass == null) {
        throw new Exception("No model built yet, can't aggregate");
    }
    // merging dictionaries
    if (!m_data.classAttribute().equals(toAggregate.m_data.classAttribute())) {
        throw new Exception("Can't aggregate - class attribute in data headers " + "does not match: " + m_data.classAttribute().equalsMsg(toAggregate.m_data.classAttribute()));
    }
    for (int i = 0; i < m_probOfClass.length; i++) {
        // we already have a laplace correction, so -1
        m_probOfClass[i] += toAggregate.m_probOfClass[i] - 1;
        m_wordsPerClass[i] += toAggregate.m_wordsPerClass[i];
    }
    Map<Integer, LinkedHashMap<String, Count>> dicts = toAggregate.m_probOfWordGivenClass;
    Iterator<Map.Entry<Integer, LinkedHashMap<String, Count>>> perClass = dicts.entrySet().iterator();
    while (perClass.hasNext()) {
        Map.Entry<Integer, LinkedHashMap<String, Count>> currentClassDict = perClass.next();
        LinkedHashMap<String, Count> masterDict = m_probOfWordGivenClass.get(currentClassDict.getKey());
        if (masterDict == null) {
            // we haven't seen this class during our training
            masterDict = new LinkedHashMap<String, Count>();
            m_probOfWordGivenClass.put(currentClassDict.getKey(), masterDict);
        }
        // now process words seen for this class
        Iterator<Map.Entry<String, Count>> perClassEntries = currentClassDict.getValue().entrySet().iterator();
        while (perClassEntries.hasNext()) {
            Map.Entry<String, Count> entry = perClassEntries.next();
            Count masterCount = masterDict.get(entry.getKey());
            if (masterCount == null) {
                // we haven't seen this entry (or its been pruned)
                masterCount = new Count(entry.getValue().m_count);
                masterDict.put(entry.getKey(), masterCount);
            } else {
                // add up
                masterCount.m_count += entry.getValue().m_count - 1;
            }
        }
    }
    m_t += toAggregate.m_t;
    m_numModels++;
    return this;
}
