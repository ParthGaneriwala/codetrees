protected void continueIterating(final String name, final Classifier classifier) {
    IterativeClassifier iClassifier = (IterativeClassifier) classifier;
    Classifier fromGOE = (Classifier) m_ClassifierEditor.getValue();
    String classifierName = iClassifier.getClass().getCanonicalName();
    boolean matchesGOE = iClassifier.getClass().getCanonicalName().equals(fromGOE.getClass().getCanonicalName());
    // apply options from GOE
    if (fromGOE instanceof OptionHandler && matchesGOE) {
        String[] opts = ((OptionHandler) fromGOE).getOptions();
        try {
            m_Log.logMessage("Setting options for iterative classifier " + classifierName + " to " + Utils.joinOptions(opts));
            ((OptionHandler) iClassifier).setOptions(opts);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    if (m_RunThread == null) {
        synchronized (this) {
            m_StartBut.setEnabled(false);
            m_StopBut.setEnabled(true);
        }
        m_RunThread = new Thread() {

            @Override
            public void run() {
                m_Log.statusMessage("Setting up...");
                StringBuffer outBuff = m_History.getNamedBuffer(name);
                Instances inst = new Instances(m_Instances);
                inst.setClassIndex(m_ClassCombo.getSelectedIndex());
                // for timing
                long trainTimeStart = 0, trainTimeElapsed = 0;
                boolean outputModel = m_OutputModelBut.isSelected();
                try {
                    iClassifier.initializeClassifier(inst);
                    m_Log.logMessage("Iterating...");
                    if (m_Log instanceof TaskLogger) {
                        ((TaskLogger) m_Log).taskStarted();
                    }
                    while (iClassifier.next()) {
                    }
                    iClassifier.done();
                    outBuff.append("=== Model after iterating ===\n");
                    outBuff.append(iClassifier);
                    m_History.updateResult(name);
                    m_Log.logMessage("Finished " + classifierName);
                    m_Log.statusMessage("OK");
                } catch (Exception e) {
                    e.printStackTrace();
                } finally {
                    if (isInterrupted()) {
                        m_Log.logMessage("Interrupted " + classifierName);
                        m_Log.statusMessage("Interrupted");
                    }
                    synchronized (this) {
                        m_StartBut.setEnabled(true);
                        m_StopBut.setEnabled(true);
                        m_RunThread = null;
                    }
                    if (m_Log instanceof TaskLogger) {
                        ((TaskLogger) m_Log).taskFinished();
                    }
                }
            }
        };
        m_RunThread.setPriority(Thread.MIN_PRIORITY);
        m_RunThread.start();
    }
}
