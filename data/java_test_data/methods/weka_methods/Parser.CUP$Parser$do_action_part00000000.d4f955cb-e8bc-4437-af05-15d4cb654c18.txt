public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(int CUP$Parser$act_num, java_cup.runtime.lr_parser CUP$Parser$parser, java.util.Stack CUP$Parser$stack, int CUP$Parser$top) throws java.lang.Exception {
    /* Symbol object for return from actions */
    java_cup.runtime.Symbol CUP$Parser$result;
    /* select the action based on the action number */
    switch(CUP$Parser$act_num) {
        /*. . . . . . . . . . . . . . . . . . . .*/
        case // json ::= LCURLY RCURLY
        0:
            {
                Object RESULT = null;
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("json", 0, RESULT);
            }
            return CUP$Parser$result;
        /*. . . . . . . . . . . . . . . . . . . .*/
        case // $START ::= json EOF
        1:
            {
                Object RESULT = null;
                Object start_val = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                RESULT = start_val;
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START", 0, RESULT);
            }
            /* ACCEPT */
            CUP$Parser$parser.done_parsing();
            return CUP$Parser$result;
        /*. . . . . . . . . . . . . . . . . . . .*/
        case // json ::= LCURLY pairs RCURLY
        2:
            {
                Object RESULT = null;
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("json", 0, RESULT);
            }
            return CUP$Parser$result;
        /*. . . . . . . . . . . . . . . . . . . .*/
        case // pairs ::= pairs COMMA pair
        3:
            {
                Object RESULT = null;
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("pairs", 1, RESULT);
            }
            return CUP$Parser$result;
        /*. . . . . . . . . . . . . . . . . . . .*/
        case // pairs ::= pair
        4:
            {
                Object RESULT = null;
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("pairs", 1, RESULT);
            }
            return CUP$Parser$result;
        /*. . . . . . . . . . . . . . . . . . . .*/
        case // pair ::= primitive
        5:
            {
                Object RESULT = null;
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("pair", 2, RESULT);
            }
            return CUP$Parser$result;
        /*. . . . . . . . . . . . . . . . . . . .*/
        case // pair ::= named_object
        6:
            {
                Object RESULT = null;
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("pair", 2, RESULT);
            }
            return CUP$Parser$result;
        /*. . . . . . . . . . . . . . . . . . . .*/
        case // pair ::= named_array
        7:
            {
                Object RESULT = null;
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("pair", 2, RESULT);
            }
            return CUP$Parser$result;
        /*. . . . . . . . . . . . . . . . . . . .*/
        case // primitive ::= null
        8:
            {
                Object RESULT = null;
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive", 3, RESULT);
            }
            return CUP$Parser$result;
        /*. . . . . . . . . . . . . . . . . . . .*/
        case // primitive ::= boolean
        9:
            {
                Object RESULT = null;
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive", 3, RESULT);
            }
            return CUP$Parser$result;
        /*. . . . . . . . . . . . . . . . . . . .*/
        case // primitive ::= integer
        10:
            {
                Object RESULT = null;
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive", 3, RESULT);
            }
            return CUP$Parser$result;
        /*. . . . . . . . . . . . . . . . . . . .*/
        case // primitive ::= double
        11:
            {
                Object RESULT = null;
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive", 3, RESULT);
            }
            return CUP$Parser$result;
        /*. . . . . . . . . . . . . . . . . . . .*/
        case // primitive ::= string
        12:
            {
                Object RESULT = null;
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive", 3, RESULT);
            }
            return CUP$Parser$result;
        /*. . . . . . . . . . . . . . . . . . . .*/
        case // null ::= STRING COLON NULL
        13:
            {
                Object RESULT = null;
                String name = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                parser.getStack().peek().addNull(name);
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("null", 4, RESULT);
            }
            return CUP$Parser$result;
        /*. . . . . . . . . . . . . . . . . . . .*/
        case // boolean ::= STRING COLON BOOLEAN
        14:
            {
                Boolean RESULT = null;
                String name = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                Boolean b = (Boolean) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                parser.getStack().peek().addPrimitive(name, b);
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean", 5, RESULT);
            }
            return CUP$Parser$result;
        /*. . . . . . . . . . . . . . . . . . . .*/
        case // integer ::= STRING COLON INTEGER
        15:
            {
                Integer RESULT = null;
                String name = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                Integer i = (Integer) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                parser.getStack().peek().addPrimitive(name, i);
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("integer", 6, RESULT);
            }
            return CUP$Parser$result;
        /*. . . . . . . . . . . . . . . . . . . .*/
        case // double ::= STRING COLON DOUBLE
        16:
            {
                Double RESULT = null;
                String name = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                Double d = (Double) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                parser.getStack().peek().addPrimitive(name, d);
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("double", 7, RESULT);
            }
            return CUP$Parser$result;
        /*. . . . . . . . . . . . . . . . . . . .*/
        case // string ::= STRING COLON STRING
        17:
            {
                String RESULT = null;
                String name = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                String s = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                parser.getStack().peek().addPrimitive(name, s);
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("string", 8, RESULT);
            }
            return CUP$Parser$result;
        /*. . . . . . . . . . . . . . . . . . . .*/
        case // named_object ::= named_object_start object_end
        18:
            {
                Object RESULT = null;
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("named_object", 10, RESULT);
            }
            return CUP$Parser$result;
        /*. . . . . . . . . . . . . . . . . . . .*/
        case // named_object ::= named_object_start object_content object_end
        19:
            {
                Object RESULT = null;
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("named_object", 10, RESULT);
            }
            return CUP$Parser$result;
        /*. . . . . . . . . . . . . . . . . . . .*/
        case // named_object_start ::= STRING COLON LCURLY
        20:
            {
                Object RESULT = null;
                String name = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                JSONNode node = parser.getStack().peek().addObject(name);
                parser.getStack().push(node);
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("named_object_start", 11, RESULT);
            }
            return CUP$Parser$result;
        /*. . . . . . . . . . . . . . . . . . . .*/
        case // anon_object ::= anon_object_start object_end
        21:
            {
                Object RESULT = null;
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("anon_object", 9, RESULT);
            }
            return CUP$Parser$result;
        /*. . . . . . . . . . . . . . . . . . . .*/
        case // anon_object ::= anon_object_start object_content object_end
        22:
            {
                Object RESULT = null;
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("anon_object", 9, RESULT);
            }
            return CUP$Parser$result;
        /*. . . . . . . . . . . . . . . . . . . .*/
        case // anon_object_start ::= LCURLY
        23:
            {
                Object RESULT = null;
                JSONNode node = parser.getStack().peek().addObject(null);
                parser.getStack().push(node);
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("anon_object_start", 12, RESULT);
            }
            return CUP$Parser$result;
        /*. . . . . . . . . . . . . . . . . . . .*/
        case // object_content ::= pairs
        24:
            {
                Object RESULT = null;
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("object_content", 13, RESULT);
            }
            return CUP$Parser$result;
        /*. . . . . . . . . . . . . . . . . . . .*/
        case // object_end ::= RCURLY
        25:
            {
                Object RESULT = null;
                parser.getStack().pop();
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("object_end", 14, RESULT);
            }
            return CUP$Parser$result;
        /*. . . . . . . . . . . . . . . . . . . .*/
        case // named_array ::= named_array_start array_end
        26:
            {
                Object RESULT = null;
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("named_array", 16, RESULT);
            }
            return CUP$Parser$result;
        /*. . . . . . . . . . . . . . . . . . . .*/
        case // named_array ::= named_array_start array_content array_end
        27:
            {
                Object RESULT = null;
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("named_array", 16, RESULT);
            }
            return CUP$Parser$result;
        /*. . . . . . . . . . . . . . . . . . . .*/
        case // named_array_start ::= STRING COLON LSQUARE
        28:
            {
                Object RESULT = null;
                String name = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                JSONNode node = parser.getStack().peek().addArray(name);
                parser.getStack().push(node);
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("named_array_start", 17, RESULT);
            }
            return CUP$Parser$result;
        /*. . . . . . . . . . . . . . . . . . . .*/
        case // anon_array ::= anon_array_start array_end
        29:
            {
                Object RESULT = null;
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("anon_array", 15, RESULT);
            }
            return CUP$Parser$result;
        /*. . . . . . . . . . . . . . . . . . . .*/
        case // anon_array ::= anon_array_start array_content array_end
        30:
            {
                Object RESULT = null;
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("anon_array", 15, RESULT);
            }
            return CUP$Parser$result;
        /*. . . . . . . . . . . . . . . . . . . .*/
        case // anon_array_start ::= LSQUARE
        31:
            {
                Object RESULT = null;
                JSONNode node = parser.getStack().peek().addArray(null);
                parser.getStack().push(node);
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("anon_array_start", 18, RESULT);
            }
            return CUP$Parser$result;
        /*. . . . . . . . . . . . . . . . . . . .*/
        case // array_content ::= elements
        32:
            {
                Object RESULT = null;
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_content", 19, RESULT);
            }
            return CUP$Parser$result;
        /*. . . . . . . . . . . . . . . . . . . .*/
        case // array_end ::= RSQUARE
        33:
            {
                Object RESULT = null;
                parser.getStack().pop();
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_end", 20, RESULT);
            }
            return CUP$Parser$result;
        /*. . . . . . . . . . . . . . . . . . . .*/
        case // elements ::= elements COMMA element
        34:
            {
                Object RESULT = null;
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("elements", 21, RESULT);
            }
            return CUP$Parser$result;
        /*. . . . . . . . . . . . . . . . . . . .*/
        case // elements ::= element
        35:
            {
                Object RESULT = null;
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("elements", 21, RESULT);
            }
            return CUP$Parser$result;
        /*. . . . . . . . . . . . . . . . . . . .*/
        case // element ::= NULL
        36:
            {
                Object RESULT = null;
                parser.getStack().peek().addArrayElement(null);
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("element", 22, RESULT);
            }
            return CUP$Parser$result;
        /*. . . . . . . . . . . . . . . . . . . .*/
        case // element ::= BOOLEAN
        37:
            {
                Object RESULT = null;
                Boolean b = (Boolean) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                parser.getStack().peek().addArrayElement(b);
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("element", 22, RESULT);
            }
            return CUP$Parser$result;
        /*. . . . . . . . . . . . . . . . . . . .*/
        case // element ::= INTEGER
        38:
            {
                Object RESULT = null;
                Integer i = (Integer) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                parser.getStack().peek().addArrayElement(i);
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("element", 22, RESULT);
            }
            return CUP$Parser$result;
        /*. . . . . . . . . . . . . . . . . . . .*/
        case // element ::= DOUBLE
        39:
            {
                Object RESULT = null;
                Double d = (Double) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                parser.getStack().peek().addArrayElement(d);
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("element", 22, RESULT);
            }
            return CUP$Parser$result;
        /*. . . . . . . . . . . . . . . . . . . .*/
        case // element ::= STRING
        40:
            {
                Object RESULT = null;
                String s = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                parser.getStack().peek().addArrayElement(s);
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("element", 22, RESULT);
            }
            return CUP$Parser$result;
        /*. . . . . . . . . . . . . . . . . . . .*/
        case // element ::= anon_object
        41:
            {
                Object RESULT = null;
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("element", 22, RESULT);
            }
            return CUP$Parser$result;
        /*. . . . . . . . . . . . . . . . . . . .*/
        case // element ::= anon_array
        42:
            {
                Object RESULT = null;
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("element", 22, RESULT);
            }
            return CUP$Parser$result;
        /* . . . . . .*/
        default:
            throw new Exception("Invalid action number " + CUP$Parser$act_num + "found in internal parse table");
    }
}
