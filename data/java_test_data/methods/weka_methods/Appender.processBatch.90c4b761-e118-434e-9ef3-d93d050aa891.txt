protected synchronized void processBatch(Data data) throws WekaException {
    Integer setNum = data.getPayloadElement(StepManager.CON_AUX_DATA_SET_NUM, 1);
    Integer maxSetNum = data.getPayloadElement(StepManager.CON_AUX_DATA_MAX_SET_NUM, 1);
    Instances insts = data.getPrimaryPayload();
    if (setNum > 1 || maxSetNum > 1) {
        // can't accept more than one dataset/batch from a particular source
        throw new WekaException("Source " + data.getSourceStep().getName() + " " + "is generating more than one " + data.getConnectionName() + " " + "in a batch");
    }
    Instances header = new Instances(insts, 0);
    m_completed.put(data.getSourceStep(), header);
    // write these instances (serialized) to a temp file
    try {
        File tmpF = File.createTempFile("weka", SerializedInstancesLoader.FILE_EXTENSION);
        // tmpF.deleteOnExit();
        ObjectOutputStream oos = new ObjectOutputStream(new BufferedOutputStream(new FileOutputStream(tmpF)));
        oos.writeObject(insts);
        oos.flush();
        oos.close();
        m_tempBatchFiles.put(data.getSourceStep(), tmpF);
    } catch (IOException e1) {
        throw new WekaException(e1);
    }
    if (isStopRequested()) {
        return;
    }
    // have we seen a dataset from every incoming connection?
    if (m_completed.size() == getStepManager().numIncomingConnections()) {
        // process all headers and create mongo header for new output.
        // missing values will fill columns that don't exist in particular data
        // sets
        Instances output = makeOutputHeader();
        getStepManager().logDetailed("Making output header structure");
        try {
            for (File f : m_tempBatchFiles.values()) {
                ObjectInputStream ois = new ObjectInputStream(new BufferedInputStream(new FileInputStream(f)));
                Instances temp = (Instances) ois.readObject();
                ois.close();
                // copy each instance over
                for (int i = 0; i < temp.numInstances(); i++) {
                    Instance converted = makeOutputInstance(output, temp.instance(i));
                    output.add(converted);
                }
            }
            Data outputD = new Data(data.getConnectionName(), output);
            outputD.setPayloadElement(StepManager.CON_AUX_DATA_SET_NUM, 1);
            outputD.setPayloadElement(StepManager.CON_AUX_DATA_MAX_SET_NUM, 1);
            getStepManager().outputData(outputD);
        } catch (Exception ex) {
            throw new WekaException(ex);
        }
    }
}
