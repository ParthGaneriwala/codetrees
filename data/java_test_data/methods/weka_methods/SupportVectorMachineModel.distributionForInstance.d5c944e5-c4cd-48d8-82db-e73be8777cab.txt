public void distributionForInstance(double[] input, Kernel kernel, VectorDictionary vecDict, double[] preds, classificationMethod cMethod, double globalThreshold) throws Exception {
    int targetIndex = 0;
    if (!m_coeffsOnly) {
        // get an array that only holds the values that are referenced
        // by the support vectors
        input = vecDict.incomingInstanceToVectorFieldVals(input);
    }
    if (m_miningSchema.getFieldsAsInstances().classAttribute().isNominal()) {
        targetIndex = m_targetCategoryIndex;
    }
    double result = 0;
    for (int i = 0; i < m_coefficients.length; i++) {
        // System.err.println("X : " + m_supportVectors.get(i).getValues());
        double val = 0;
        if (!m_coeffsOnly) {
            val = kernel.evaluate(m_supportVectors.get(i), input);
        } else {
            val = input[i];
        }
        val *= m_coefficients[i];
        // System.err.println("val " + val);
        result += val;
    }
    result += m_intercept;
    if (cMethod == classificationMethod.NONE || m_miningSchema.getFieldsAsInstances().classAttribute().isNumeric()) {
        if (m_miningSchema.getFieldsAsInstances().classAttribute().isNominal()) {
            if (result < 0) {
                preds[targetIndex] = 1;
            } else {
                preds[targetIndex] = 0;
            }
        } else {
            preds[targetIndex] = result;
        }
    } else {
        // PMML 4.0
        if (cMethod == classificationMethod.ONE_AGAINST_ALL) {
            // smallest value output by a machine is the predicted class
            preds[targetIndex] = result;
        } else {
            // one-vs-one
            double threshold = (m_localThreshold < Double.MAX_VALUE) ? m_localThreshold : globalThreshold;
            // vote
            if (result < threshold) {
                preds[targetIndex]++;
            } else {
                int altCat = (m_localAlternateTargetCategoryIndex != -1) ? m_localAlternateTargetCategoryIndex : m_globalAlternateTargetCategoryIndex;
                preds[altCat]++;
            }
        }
    }
// preds[targetIndex] = result;
}
