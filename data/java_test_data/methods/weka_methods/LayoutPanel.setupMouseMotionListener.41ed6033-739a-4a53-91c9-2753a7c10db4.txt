protected void setupMouseMotionListener() {
    addMouseMotionListener(new MouseMotionAdapter() {

        @Override
        public void mouseDragged(MouseEvent me) {
            double z = m_visLayout.getZoomSetting() / 100.0;
            double px = me.getX();
            double py = me.getY();
            px /= z;
            py /= z;
            if (m_visLayout.getEditStep() != null && m_visLayout.getFlowLayoutOperation() == LayoutOperation.MOVING) {
                int deltaX = (int) px - m_oldX;
                int deltaY = (int) py - m_oldY;
                m_visLayout.getEditStep().setX(m_visLayout.getEditStep().getX() + deltaX);
                m_visLayout.getEditStep().setY(m_visLayout.getEditStep().getY() + deltaY);
                for (StepVisual v : m_visLayout.getSelectedSteps()) {
                    if (v != m_visLayout.getEditStep()) {
                        v.setX(v.getX() + deltaX);
                        v.setY(v.getY() + deltaY);
                    }
                }
                repaint();
                m_oldX = (int) px;
                m_oldY = (int) py;
                m_visLayout.setEdited(true);
            }
            if (m_visLayout.getFlowLayoutOperation() == LayoutOperation.SELECTING) {
                repaint();
                m_oldX = (int) px;
                m_oldY = (int) py;
            }
        }

        @Override
        public void mouseMoved(MouseEvent me) {
            double z = m_visLayout.getZoomSetting() / 100.0;
            double px = me.getX();
            double py = me.getY();
            px /= z;
            py /= z;
            if (m_visLayout.getFlowLayoutOperation() == LayoutOperation.CONNECTING) {
                repaint();
                m_oldX = (int) px;
                m_oldY = (int) py;
            }
        }
    });
}
