public static Vector<Option> listOptionsForClass(Class<?> clazz) {
    Vector<Option> results = new Vector<Option>();
    List<Method> allMethods = new ArrayList<Method>();
    addMethodsToList(clazz, allMethods);
    Class<?>[] interfaces = clazz.getInterfaces();
    for (Class c : interfaces) {
        addMethodsToList(c, allMethods);
    }
    Option[] unsorted = new Option[allMethods.size()];
    int[] opOrder = new int[allMethods.size()];
    for (int i = 0; i < opOrder.length; i++) {
        opOrder[i] = Integer.MAX_VALUE;
    }
    int index = 0;
    for (Method m : allMethods) {
        OptionMetadata o = m.getAnnotation(OptionMetadata.class);
        if (o != null) {
            if (o.commandLineParamName().length() > 0) {
                opOrder[index] = o.displayOrder();
                String description = o.description();
                if (!description.startsWith("\t")) {
                    description = "\t" + description;
                }
                description = description.replace("\n", "\n\t");
                String name = o.commandLineParamName();
                if (name.startsWith("-")) {
                    name = name.substring(1, name.length());
                }
                String synopsis = o.commandLineParamSynopsis();
                if (!synopsis.startsWith("-")) {
                    synopsis = "-" + synopsis;
                }
                int numParams = o.commandLineParamIsFlag() ? 0 : 1;
                Option option = new Option(description, name, numParams, synopsis);
                unsorted[index] = option;
                index++;
            }
        }
    }
    int[] sortedOpts = Utils.sort(opOrder);
    for (int i = 0; i < opOrder.length; i++) {
        if (opOrder[i] < Integer.MAX_VALUE) {
            results.add(unsorted[sortedOpts[i]]);
        }
    }
    return results;
}
