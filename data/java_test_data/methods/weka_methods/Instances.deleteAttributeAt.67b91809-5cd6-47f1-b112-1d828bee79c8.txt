/**
 * Deletes an attribute at the given position (0 to numAttributes()
 * - 1). Attribute objects after the deletion point are copied so
 * that their indices can be decremented. Creates a fresh list to
 * hold the old and new attribute objects.
 * @param position the attribute's position (position starts with 0)
 * @throws IllegalArgumentException if the given index is out of range or the
 * class attribute is being deleted
 */
// @ requires 0 <= position && position < numAttributes();
public void deleteAttributeAt(int position) {
    if ((position < 0) || (position >= m_Attributes.size())) {
        throw new IllegalArgumentException("Index out of range");
    }
    if (position == m_ClassIndex) {
        throw new IllegalArgumentException("Can't delete class attribute");
    }
    ArrayList<Attribute> newList = new ArrayList<Attribute>(m_Attributes.size() - 1);
    HashMap<String, Integer> newMap = new HashMap<String, Integer>((int) ((m_Attributes.size() - 1) / 0.75));
    for (int i = 0; i < position; i++) {
        Attribute att = m_Attributes.get(i);
        newList.add(att);
        newMap.put(att.name(), i);
    }
    for (int i = position + 1; i < m_Attributes.size(); i++) {
        Attribute newAtt = (Attribute) m_Attributes.get(i).copy();
        newAtt.setIndex(i - 1);
        newList.add(newAtt);
        newMap.put(newAtt.name(), i - 1);
    }
    m_Attributes = newList;
    m_NamesToAttributeIndices = newMap;
    if (m_ClassIndex > position) {
        m_ClassIndex--;
    }
    for (int i = 0; i < numInstances(); i++) {
        instance(i).setDataset(null);
        instance(i).deleteAttributeAt(position);
        instance(i).setDataset(this);
    }
}
