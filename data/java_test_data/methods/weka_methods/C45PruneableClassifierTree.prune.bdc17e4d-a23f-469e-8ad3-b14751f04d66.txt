public void prune() throws Exception {
    double errorsLargestBranch;
    double errorsLeaf;
    double errorsTree;
    int indexOfLargestBranch;
    C45PruneableClassifierTree largestBranch;
    int i;
    if (!m_isLeaf) {
        // Prune all subtrees.
        for (i = 0; i < m_sons.length; i++) son(i).prune();
        // Compute error for largest branch
        indexOfLargestBranch = localModel().distribution().maxBag();
        if (m_subtreeRaising) {
            errorsLargestBranch = son(indexOfLargestBranch).getEstimatedErrorsForBranch((Instances) m_train);
        } else {
            errorsLargestBranch = Double.MAX_VALUE;
        }
        // Compute error if this Tree would be leaf
        errorsLeaf = getEstimatedErrorsForDistribution(localModel().distribution());
        // Compute error for the whole subtree
        errorsTree = getEstimatedErrors();
        // Decide if leaf is best choice.
        if (Utils.smOrEq(errorsLeaf, errorsTree + 0.1) && Utils.smOrEq(errorsLeaf, errorsLargestBranch + 0.1)) {
            // Free son Trees
            m_sons = null;
            m_isLeaf = true;
            // Get NoSplit Model for node.
            m_localModel = new NoSplit(localModel().distribution());
            return;
        }
        // than whole subtree.
        if (Utils.smOrEq(errorsLargestBranch, errorsTree + 0.1)) {
            largestBranch = son(indexOfLargestBranch);
            m_sons = largestBranch.m_sons;
            m_localModel = largestBranch.localModel();
            m_isLeaf = largestBranch.m_isLeaf;
            newDistribution(m_train);
            prune();
        }
    }
}
