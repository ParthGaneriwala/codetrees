@Override
public void actionPerformed(ActionEvent e) {
    if (e.getActionCommand() == null) {
        if (m_scaling == 0) {
            repaint();
        } else {
            animateScaling(m_nViewPos, m_nViewSize, m_scaling);
        }
    } else if (e.getActionCommand().equals("Fit to Screen")) {
        Dimension np = new Dimension();
        Dimension ns = new Dimension();
        getScreenFit(np, ns);
        animateScaling(np, ns, 10);
    } else if (e.getActionCommand().equals("Center on Top Node")) {
        // calculate
        int tpx = (int) (m_topNode.getCenter() * m_viewSize.width);
        // the top nodes postion but don't adjust for where
        // view is
        int tpy = (int) (m_topNode.getTop() * m_viewSize.height);
        Dimension np = new Dimension(getSize().width / 2 - tpx, getSize().width / 6 - tpy);
        animateScaling(np, m_viewSize, 10);
    } else if (e.getActionCommand().equals("Auto Scale")) {
        // this will figure the best scale value
        autoScale();
    // keep the focus on the middle of the screen and call animate
    } else if (e.getActionCommand().equals("Visualize The Node")) {
        // send the node data to the visualizer
        if (m_focusNode >= 0) {
            Instances inst;
            if ((inst = m_nodes[m_focusNode].m_node.getInstances()) != null) {
                VisualizePanel pan = new VisualizePanel();
                pan.setInstances(inst);
                JFrame nf = Utils.getWekaJFrame("", this);
                nf.getContentPane().add(pan);
                nf.pack();
                nf.setSize(800, 600);
                nf.setLocationRelativeTo(SwingUtilities.getWindowAncestor(this));
                nf.setVisible(true);
            } else {
                JOptionPane.showMessageDialog(this, "Sorry, there is no " + "available Instances data for " + "this Node.", "Sorry!", JOptionPane.WARNING_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Error, there is no " + "selected Node to perform " + "this operation on.", "Error!", JOptionPane.ERROR_MESSAGE);
        }
    } else if (e.getActionCommand().equals("Create Child Nodes")) {
        if (m_focusNode >= 0) {
            if (m_listener != null) {
                // then send message to the listener
                m_listener.userCommand(new TreeDisplayEvent(TreeDisplayEvent.ADD_CHILDREN, m_nodes[m_focusNode].m_node.getRefer()));
            } else {
                JOptionPane.showMessageDialog(this, "Sorry, there is no " + "available Decision Tree to " + "perform this operation on.", "Sorry!", JOptionPane.WARNING_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Error, there is no " + "selected Node to perform this " + "operation on.", "Error!", JOptionPane.ERROR_MESSAGE);
        }
    } else if (e.getActionCommand().equals("Remove Child Nodes")) {
        if (m_focusNode >= 0) {
            if (m_listener != null) {
                // then send message to the listener
                m_listener.userCommand(new TreeDisplayEvent(TreeDisplayEvent.REMOVE_CHILDREN, m_nodes[m_focusNode].m_node.getRefer()));
            } else {
                JOptionPane.showMessageDialog(this, "Sorry, there is no " + "available Decsion Tree to " + "perform this operation on.", "Sorry!", JOptionPane.WARNING_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Error, there is no " + "selected Node to perform this " + "operation on.", "Error!", JOptionPane.ERROR_MESSAGE);
        }
    } else if (e.getActionCommand().equals("classify_child")) {
        if (m_focusNode >= 0) {
            if (m_listener != null) {
                // then send message to the listener
                m_listener.userCommand(new TreeDisplayEvent(TreeDisplayEvent.CLASSIFY_CHILD, m_nodes[m_focusNode].m_node.getRefer()));
            } else {
                JOptionPane.showMessageDialog(this, "Sorry, there is no " + "available Decsion Tree to " + "perform this operation on.", "Sorry!", JOptionPane.WARNING_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Error, there is no " + "selected Node to perform this " + "operation on.", "Error!", JOptionPane.ERROR_MESSAGE);
        }
    } else if (e.getActionCommand().equals("send_instances")) {
        if (m_focusNode >= 0) {
            if (m_listener != null) {
                // then send message to the listener
                m_listener.userCommand(new TreeDisplayEvent(TreeDisplayEvent.SEND_INSTANCES, m_nodes[m_focusNode].m_node.getRefer()));
            } else {
                JOptionPane.showMessageDialog(this, "Sorry, there is no " + "available Decsion Tree to " + "perform this operation on.", "Sorry!", JOptionPane.WARNING_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Error, there is no " + "selected Node to perform this " + "operation on.", "Error!", JOptionPane.ERROR_MESSAGE);
        }
    } else if (e.getActionCommand().equals("Accept The Tree")) {
        if (m_listener != null) {
            // then send message to the listener saying that the tree is done
            m_listener.userCommand(new TreeDisplayEvent(TreeDisplayEvent.ACCEPT, null));
        } else {
            JOptionPane.showMessageDialog(this, "Sorry, there is no " + "available Decision Tree to " + "perform this operation on.", "Sorry!", JOptionPane.WARNING_MESSAGE);
        }
    }
}
