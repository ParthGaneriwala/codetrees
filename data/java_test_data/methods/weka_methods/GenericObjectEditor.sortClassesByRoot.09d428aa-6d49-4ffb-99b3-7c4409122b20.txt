public static Hashtable<String, String> sortClassesByRoot(String classes) {
    Hashtable<String, Vector<String>> roots;
    Hashtable<String, String> result;
    Enumeration<String> enm;
    int i;
    StringTokenizer tok;
    String clsname;
    Vector<String> list;
    HierarchyPropertyParser hpp;
    String separator;
    String root;
    String tmpStr;
    if (classes == null) {
        return null;
    }
    roots = new Hashtable<String, Vector<String>>();
    hpp = new HierarchyPropertyParser();
    separator = hpp.getSeperator();
    // go over all classnames and store them in the hashtable, with the
    // root element as the key
    tok = new StringTokenizer(classes, ", ");
    while (tok.hasMoreElements()) {
        clsname = tok.nextToken();
        root = getRootFromClass(clsname, separator);
        if (root == null) {
            continue;
        }
        // already stored?
        if (!roots.containsKey(root)) {
            list = new Vector<String>();
            roots.put(root, list);
        } else {
            list = roots.get(root);
        }
        list.add(clsname);
    }
    // build result
    result = new Hashtable<String, String>();
    enm = roots.keys();
    while (enm.hasMoreElements()) {
        root = enm.nextElement();
        list = roots.get(root);
        tmpStr = "";
        for (i = 0; i < list.size(); i++) {
            if (i > 0) {
                tmpStr += ",";
            }
            tmpStr += list.get(i);
        }
        result.put(root, tmpStr);
    }
    return result;
}
