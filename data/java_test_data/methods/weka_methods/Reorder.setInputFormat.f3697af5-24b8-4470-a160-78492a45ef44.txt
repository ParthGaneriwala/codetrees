@Override
public boolean setInputFormat(Instances instanceInfo) throws Exception {
    super.setInputFormat(instanceInfo);
    // An array to keep track of how of how often each attribute is chosen
    int[] frequency = new int[instanceInfo.numAttributes()];
    m_SelectedAttributes = determineIndices(instanceInfo.numAttributes());
    boolean atLeastOneAttributeOccursMoreThanOnce = false;
    for (int current : m_SelectedAttributes) {
        frequency[current]++;
        if (frequency[current] > 1) {
            if (current == instanceInfo.classIndex()) {
                throw new IllegalArgumentException("Reorder filter: Cannot duplicate class attribute");
            }
            atLeastOneAttributeOccursMoreThanOnce = true;
            break;
        }
    }
    Arrays.fill(frequency, 0);
    ArrayList<Attribute> attributes = new ArrayList<Attribute>();
    int outputClass = -1;
    for (int current : m_SelectedAttributes) {
        if (instanceInfo.classIndex() == current) {
            outputClass = attributes.size();
        }
        String newName = instanceInfo.attribute(current).name();
        if (atLeastOneAttributeOccursMoreThanOnce) {
            // Make sure attribute names in filtered data are unique
            newName += "_" + (++frequency[current]);
        }
        Attribute keep = (Attribute) instanceInfo.attribute(current).copy(newName);
        if (m_setAllAttributeWeightsToOne) {
            keep.setWeight(1.0);
        }
        attributes.add(keep);
    }
    initInputLocators(instanceInfo, m_SelectedAttributes);
    Instances outputFormat = new Instances(instanceInfo.relationName(), attributes, 0);
    outputFormat.setClassIndex(outputClass);
    setOutputFormat(outputFormat);
    return true;
}
