public void launchNext(final int wexp, final int ah) {
    Thread subExpThread;
    subExpThread = new Thread() {

        @Override
        public void run() {
            m_remoteHostsStatus[ah] = IN_USE;
            m_subExpComplete[wexp] = TaskStatusInfo.PROCESSING;
            RemoteExperimentSubTask expSubTsk = new RemoteExperimentSubTask();
            expSubTsk.setExperiment(m_subExperiments[wexp]);
            String subTaskType = null;
            if (getSplitByDataSet()) {
                subTaskType = "dataset: " + ((File) m_subExperiments[wexp].getDatasets().elementAt(0)).getName();
            } else if (getSplitByProperty()) {
                subTaskType = "property: " + m_subExperiments[wexp].getPropertyArrayValue(0).getClass().getName() + " :" + m_subExperiments[wexp].getPropertyArrayValue(0);
            } else {
                subTaskType = "run: " + m_subExperiments[wexp].getRunLower();
            }
            try {
                String name = "//" + ((String) m_remoteHosts.elementAt(ah)) + "/RemoteEngine";
                Compute comp = (Compute) Naming.lookup(name);
                // assess the status of the sub-exp
                notifyListeners(false, true, false, "Starting " + subTaskType + " on host " + ((String) m_remoteHosts.elementAt(ah)));
                Object subTaskId = comp.executeTask(expSubTsk);
                boolean finished = false;
                TaskStatusInfo is = null;
                while (!finished) {
                    try {
                        Thread.sleep(2000);
                        TaskStatusInfo cs = (TaskStatusInfo) comp.checkStatus(subTaskId);
                        if (cs.getExecutionStatus() == TaskStatusInfo.FINISHED) {
                            // push host back onto queue and try launching any waiting
                            // sub-experiments
                            notifyListeners(false, true, false, cs.getStatusMessage());
                            m_remoteHostsStatus[ah] = AVAILABLE;
                            incrementFinished();
                            availableHost(ah);
                            finished = true;
                        } else if (cs.getExecutionStatus() == TaskStatusInfo.FAILED) {
                            // a non connection related error---possibly host doesn't have
                            // access to data sets or security policy is not set up
                            // correctly or classifier(s) failed for some reason
                            notifyListeners(false, true, false, cs.getStatusMessage());
                            m_remoteHostsStatus[ah] = SOME_OTHER_FAILURE;
                            m_subExpComplete[wexp] = TaskStatusInfo.FAILED;
                            notifyListeners(false, true, false, subTaskType + " " + cs.getStatusMessage() + ". Scheduling for execution on another host.");
                            incrementFailed(ah);
                            // push experiment back onto queue
                            waitingExperiment(wexp);
                            // push host back onto queue and try launching any waiting
                            // sub-experiments. Host is pushed back on the queue as the
                            // failure may be temporary---eg. with InstantDB using the
                            // RMI bridge, two or more threads may try to create the
                            // experiment index or results table simultaneously; all but
                            // one will throw an exception. These hosts are still usable
                            // however.
                            availableHost(ah);
                            finished = true;
                        } else {
                            if (is == null) {
                                is = cs;
                                notifyListeners(false, true, false, cs.getStatusMessage());
                            } else {
                                if (cs.getStatusMessage().compareTo(is.getStatusMessage()) != 0) {
                                    notifyListeners(false, true, false, cs.getStatusMessage());
                                }
                                is = cs;
                            }
                        }
                    } catch (InterruptedException ie) {
                    }
                }
            } catch (Exception ce) {
                m_remoteHostsStatus[ah] = CONNECTION_FAILED;
                m_subExpComplete[wexp] = TaskStatusInfo.TO_BE_RUN;
                System.err.println(ce);
                ce.printStackTrace();
                notifyListeners(false, true, false, "Connection to " + ((String) m_remoteHosts.elementAt(ah)) + " failed. Scheduling " + subTaskType + " for execution on another host.");
                checkForAllFailedHosts();
                waitingExperiment(wexp);
            } finally {
                if (isInterrupted()) {
                    System.err.println("Sub exp Interupted!");
                }
            }
        }
    };
    subExpThread.setPriority(Thread.MIN_PRIORITY);
    subExpThread.start();
}
