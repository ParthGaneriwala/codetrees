@Override
public void updateFinished() {
    if (m_canopies == null || m_canopies.numInstances() == 0) {
        return;
    }
    pruneCandidateCanopies();
    // set the final canopy centers and weights
    double[] densities = new double[m_canopies.size()];
    for (int i = 0; i < m_canopies.numInstances(); i++) {
        double[] density = m_canopyT2Density.get(i);
        double[][] centerSums = m_canopyCenters.get(i);
        double[] numMissingForNumerics = m_canopyNumMissingForNumerics.get(i);
        double[] finalCenter = new double[m_canopies.numAttributes()];
        for (int j = 0; j < m_canopies.numAttributes(); j++) {
            if (m_canopies.attribute(j).isNumeric()) {
                if (numMissingForNumerics[j] == density[0]) {
                    finalCenter[j] = Utils.missingValue();
                } else {
                    finalCenter[j] = centerSums[j][0] / (density[0] - numMissingForNumerics[j]);
                }
            } else if (m_canopies.attribute(j).isNominal()) {
                int mode = Utils.maxIndex(centerSums[j]);
                if (mode == centerSums[j].length - 1) {
                    finalCenter[j] = Utils.missingValue();
                } else {
                    finalCenter[j] = mode;
                }
            }
        }
        Instance finalCenterInst = m_canopies.instance(i) instanceof SparseInstance ? new SparseInstance(1.0, finalCenter) : new DenseInstance(1.0, finalCenter);
        m_canopies.set(i, finalCenterInst);
        m_canopies.instance(i).setWeight(density[0]);
        densities[i] = density[0];
    }
    adjustCanopies(densities);
}
