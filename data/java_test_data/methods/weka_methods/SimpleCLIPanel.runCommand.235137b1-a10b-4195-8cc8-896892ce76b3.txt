public void runCommand(String command) throws Exception {
    System.out.println("> " + command + '\n');
    System.out.flush();
    String[] commandArgs;
    if (!System.getProperty("os.name").toLowerCase().contains("win")) {
        commandArgs = Utils.splitOptions(command);
    } else {
        // If we are on Windows, we must not replace \t, \n, etc., at this stage because \ is path separator
        commandArgs = Utils.splitOptions(command, new String[] { "\\\\", "\\\"" }, new char[] { '\\', '"' });
    }
    // no command
    if (commandArgs.length == 0) {
        return;
    }
    // find command
    AbstractCommand cmd = AbstractCommand.getCommand(commandArgs[0]);
    // unknown command
    if (cmd == null) {
        System.err.println("Unknown command: " + commandArgs[0]);
        Help help = new Help();
        help.setOwner(this);
        help.execute(new String[0]);
        return;
    }
    // execute command
    String[] params = new String[commandArgs.length - 1];
    System.arraycopy(commandArgs, 1, params, 0, params.length);
    cmd.setOwner(this);
    try {
        cmd.execute(params);
    } catch (Exception e) {
        System.err.println("Error executing: " + command);
        e.printStackTrace();
    }
}
