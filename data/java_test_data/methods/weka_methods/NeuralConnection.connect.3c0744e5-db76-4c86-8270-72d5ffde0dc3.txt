public static boolean connect(NeuralConnection s, NeuralConnection t) {
    if (s == null || t == null) {
        return false;
    }
    // this ensures that there is no existing connection between these
    // two units already. This will also cause the current weight there to be
    // lost
    disconnect(s, t);
    if (s == t) {
        return false;
    }
    if ((t.getType() & PURE_INPUT) == PURE_INPUT) {
        // target is an input node.
        return false;
    }
    if ((s.getType() & PURE_OUTPUT) == PURE_OUTPUT) {
        // source is an output node
        return false;
    }
    if ((s.getType() & PURE_INPUT) == PURE_INPUT && (t.getType() & PURE_OUTPUT) == PURE_OUTPUT) {
        // there is no actual working node in use
        return false;
    }
    if ((t.getType() & PURE_OUTPUT) == PURE_OUTPUT && t.getNumInputs() > 0) {
        // more than 1 node is trying to feed a particular output
        return false;
    }
    if ((t.getType() & PURE_OUTPUT) == PURE_OUTPUT && (s.getType() & OUTPUT) == OUTPUT) {
        // an output node already feeding out a final answer
        return false;
    }
    if (!s.connectOutput(t, t.getNumInputs())) {
        return false;
    }
    if (!t.connectInput(s, s.getNumOutputs() - 1)) {
        s.disconnectOutput(t, t.getNumInputs());
        return false;
    }
    // now ammend the type.
    if ((s.getType() & PURE_INPUT) == PURE_INPUT) {
        t.setType(t.getType() | INPUT);
    } else if ((t.getType() & PURE_OUTPUT) == PURE_OUTPUT) {
        s.setType(s.getType() | OUTPUT);
    }
    t.setType(t.getType() | CONNECTED);
    s.setType(s.getType() | CONNECTED);
    return true;
}
