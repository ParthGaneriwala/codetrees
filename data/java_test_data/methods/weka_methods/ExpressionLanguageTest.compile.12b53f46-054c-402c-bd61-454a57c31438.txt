private static Node compile(String expression, Object[] values) throws Exception {
    SimpleVariableDeclarations variables = new SimpleVariableDeclarations();
    for (int i = 0; i < values.length; i++) {
        String name = "" + (char) ('A' + i);
        if (values[i] instanceof Boolean)
            variables.addBoolean(name);
        else if (values[i] instanceof Double)
            variables.addDouble(name);
        else if (values[i] instanceof String)
            variables.addString(name);
        else
            throw new Exception("Unsupported variable type!");
    }
    Node node = Parser.parse(// expression
    expression, // variables
    variables, // marcos
    new MacroDeclarationsCompositor(new MathFunctions(), new IfElseMacro(), new JavaMacro()));
    for (int i = 0; i < values.length; i++) {
        String name = "" + (char) ('A' + i);
        if (!variables.getInitializer().hasVariable(name))
            continue;
        if (values[i] instanceof Boolean)
            variables.getInitializer().setBoolean(name, (Boolean) values[i]);
        else if (values[i] instanceof Double)
            variables.getInitializer().setDouble(name, (Double) values[i]);
        else if (values[i] instanceof String)
            variables.getInitializer().setString(name, (String) values[i]);
        else
            throw new Exception("Unsupported variable type!");
    }
    return node;
}
