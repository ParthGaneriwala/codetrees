@Override
public void setOptions(String[] options) throws Exception {
    super.setOptions(options);
    setUseAverage(Utils.getFlag('A', options));
    String lookAheadIterations = Utils.getOption('L', options);
    if (lookAheadIterations.length() != 0) {
        setLookAheadIterations(Integer.parseInt(lookAheadIterations));
    } else {
        setLookAheadIterations(50);
    }
    String PoolSize = Utils.getOption('P', options);
    if (PoolSize.length() != 0) {
        setPoolSize(Integer.parseInt(PoolSize));
    } else {
        setPoolSize(1);
    }
    String NumThreads = Utils.getOption('E', options);
    if (NumThreads.length() != 0) {
        setNumThreads(Integer.parseInt(NumThreads));
    } else {
        setNumThreads(1);
    }
    String stepSize = Utils.getOption('I', options);
    if (stepSize.length() != 0) {
        setStepSize(Integer.parseInt(stepSize));
    } else {
        setStepSize(1);
    }
    String numFolds = Utils.getOption('F', options);
    if (numFolds.length() != 0) {
        setNumFolds(Integer.parseInt(numFolds));
    } else {
        setNumFolds(10);
    }
    String numRuns = Utils.getOption('R', options);
    if (numRuns.length() != 0) {
        setNumRuns(Integer.parseInt(numRuns));
    } else {
        setNumRuns(1);
    }
    String splitPercentage = Utils.getOption("percentage", options);
    if (splitPercentage.length() != 0) {
        setSplitPercentage(Double.parseDouble(splitPercentage));
    } else {
        setSplitPercentage(0.0);
    }
    setPreserveOrderInPercentageSplitEvaluation(Utils.getFlag("order", options));
    String evalMetric = Utils.getOption("metric", options);
    if (evalMetric.length() > 0) {
        boolean found = false;
        for (int i = 0; i < TAGS_EVAL.length; i++) {
            if (TAGS_EVAL[i].getIDStr().equalsIgnoreCase(evalMetric)) {
                setEvaluationMetric(new SelectedTag(i, TAGS_EVAL));
                found = true;
                break;
            }
        }
        if (!found) {
            throw new Exception("Unknown evaluation metric: " + evalMetric);
        }
    }
    String classValIndex = Utils.getOption("class-value-index", options);
    if (classValIndex.length() > 0) {
        setClassValueIndex(Integer.parseInt(classValIndex));
    } else {
        setClassValueIndex(-1);
    }
    String classifierName = Utils.getOption('W', options);
    if (classifierName.length() > 0) {
        setIterativeClassifier(getIterativeClassifier(classifierName, Utils.partitionOptions(options)));
    } else {
        setIterativeClassifier(getIterativeClassifier(defaultIterativeClassifierString(), Utils.partitionOptions(options)));
    }
}
