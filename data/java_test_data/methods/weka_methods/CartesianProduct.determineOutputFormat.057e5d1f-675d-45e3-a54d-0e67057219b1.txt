@Override
protected Instances determineOutputFormat(Instances inputFormat) throws Exception {
    // attributes must be numeric
    m_Attributes.setUpper(inputFormat.numAttributes() - 1);
    ArrayList<Attribute> atts = new ArrayList<Attribute>(inputFormat.numAttributes() + 1);
    ArrayList<String> values = new ArrayList<String>();
    String name = "";
    double sumOfWeights = 0;
    for (int i = 0; i < inputFormat.numAttributes(); i++) {
        // Can just copy reference because index remains unchanged.
        atts.add(inputFormat.attribute(i));
        if (inputFormat.attribute(i).isNominal() && m_Attributes.isInRange(i) && i != inputFormat.classIndex()) {
            sumOfWeights += inputFormat.attribute(i).weight();
            if (values.size() == 0) {
                values = new ArrayList<String>(inputFormat.attribute(i).numValues());
                for (int j = 0; j < inputFormat.attribute(i).numValues(); j++) {
                    values.add(inputFormat.attribute(i).value(j));
                }
                name = inputFormat.attribute(i).name();
            } else {
                ArrayList<String> newValues = new ArrayList<String>(values.size() * inputFormat.attribute(i).numValues());
                for (String value : values) {
                    for (int j = 0; j < inputFormat.attribute(i).numValues(); j++) {
                        newValues.add(value + "_x_" + inputFormat.attribute(i).value(j));
                    }
                }
                name += "_x_" + inputFormat.attribute(i).name();
                values = newValues;
            }
        }
    }
    if (values.size() > 0) {
        Attribute a = new Attribute(name, values);
        a.setWeight(sumOfWeights);
        atts.add(a);
    }
    // generate header
    Instances result = new Instances(inputFormat.relationName(), atts, 0);
    result.setClassIndex(inputFormat.classIndex());
    return result;
}
