// GenerateRandomNetwork
public void Init(int nNodes, int nValues) throws Exception {
    random = new Random(m_nSeed);
    // initialize structure
    ArrayList<Attribute> attInfo = new ArrayList<Attribute>(nNodes);
    // generate value strings
    ArrayList<String> nomStrings = new ArrayList<String>(nValues + 1);
    for (int iValue = 0; iValue < nValues; iValue++) {
        nomStrings.add("Value" + (iValue + 1));
    }
    for (int iNode = 0; iNode < nNodes; iNode++) {
        Attribute att = new Attribute("Node" + (iNode + 1), nomStrings);
        attInfo.add(att);
    }
    m_Instances = new Instances("RandomNet", attInfo, 100);
    m_Instances.setClassIndex(nNodes - 1);
    setUseADTree(false);
    // m_bInitAsNaiveBayes = false;
    // m_bMarkovBlanketClassifier = false;
    initStructure();
    // initialize conditional distribution tables
    m_Distributions = new Estimator[nNodes][1];
    for (int iNode = 0; iNode < nNodes; iNode++) {
        m_Distributions[iNode][0] = new DiscreteEstimatorBayes(nValues, getEstimator().getAlpha());
    }
    m_nEvidence = new ArrayList<Integer>(nNodes);
    for (int i = 0; i < nNodes; i++) {
        m_nEvidence.add(-1);
    }
    m_fMarginP = new ArrayList<double[]>(nNodes);
    for (int i = 0; i < nNodes; i++) {
        double[] P = new double[getCardinality(i)];
        m_fMarginP.add(P);
    }
    m_nPositionX = new ArrayList<Integer>(nNodes);
    m_nPositionY = new ArrayList<Integer>(nNodes);
    for (int iNode = 0; iNode < nNodes; iNode++) {
        m_nPositionX.add(iNode % 10 * 50);
        m_nPositionY.add((iNode / 10) * 50);
    }
}
