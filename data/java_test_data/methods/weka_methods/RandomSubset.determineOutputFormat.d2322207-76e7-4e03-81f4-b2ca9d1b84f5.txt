@Override
protected Instances determineOutputFormat(Instances inputFormat) throws Exception {
    // determine the number of attributes
    int numAttsWithoutClass = inputFormat.numAttributes();
    if (inputFormat.classIndex() > -1) {
        numAttsWithoutClass--;
    }
    int sizeOfSample = 0;
    if (m_NumAttributes < 1) {
        sizeOfSample = (int) Math.round(numAttsWithoutClass * m_NumAttributes);
    } else {
        if (m_NumAttributes < numAttsWithoutClass) {
            sizeOfSample = (int) m_NumAttributes;
        }
    }
    if (getDebug()) {
        System.out.println("# of atts: " + sizeOfSample);
    }
    // Get a random number generator that depends on the particular dataset passed in
    Random rand = inputFormat.getRandomNumberGenerator(getSeed());
    // The random indices (we will need to take care of the class attribute)
    int[] indices = RandomSample.drawSortedSample(sizeOfSample, numAttsWithoutClass, rand);
    // Do we need to take the inverse?
    if (m_invertSelection) {
        int[] newIndices = new int[numAttsWithoutClass - indices.length];
        int index = 0;
        int indexNew = 0;
        int i = 0;
        while ((i < numAttsWithoutClass)) {
            while ((indexNew < newIndices.length) && ((indices.length <= index) || (i < indices[index]))) {
                newIndices[indexNew++] = i++;
            }
            index++;
            i++;
        }
        indices = newIndices;
    }
    // Make a new list of indices, taking care of the class
    List<Integer> selected = new ArrayList<>();
    int newClassIndex = -1;
    if (inputFormat.classIndex() > -1) {
        for (int i = 0; i < indices.length; i++) {
            int index = indices[i];
            if (index < inputFormat.classIndex()) {
                selected.add(index);
            } else {
                selected.add(index + 1);
            }
        }
        newClassIndex = -Collections.binarySearch(selected, inputFormat.classIndex()) - 1;
        selected.add(newClassIndex, inputFormat.classIndex());
    } else {
        for (int i = 0; i < indices.length; i++) {
            selected.add(indices[i]);
        }
    }
    if (getDebug()) {
        System.out.println("Selected indices: " + selected);
    }
    // generate output format
    ArrayList<Attribute> atts = new ArrayList<>();
    m_Indices = new int[selected.size()];
    for (int i = 0; i < selected.size(); i++) {
        atts.add((Attribute) inputFormat.attribute(selected.get(i)).copy());
        m_Indices[i] = selected.get(i);
    }
    Instances result = new Instances(inputFormat.relationName(), atts, 0).stringFreeStructure();
    if (inputFormat.classIndex() > -1) {
        result.setClassIndex(newClassIndex);
    }
    initInputLocators(inputFormatPeek(), m_Indices);
    return result;
}
