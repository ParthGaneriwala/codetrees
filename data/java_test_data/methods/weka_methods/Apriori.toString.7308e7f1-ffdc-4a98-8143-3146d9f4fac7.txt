@Override
public String toString() {
    StringBuffer text = new StringBuffer();
    if (m_Ls.size() <= 1) {
        return "\nNo large itemsets and rules found!\n";
    }
    text.append("\nApriori\n=======\n\n");
    text.append("Minimum support: " + Utils.doubleToString(m_minSupport, 2) + " (" + ((int) (m_minSupport * m_instances.numInstances() + 0.5)) + " instances)" + '\n');
    text.append("Minimum metric <");
    switch(m_metricType) {
        case CONFIDENCE:
            text.append("confidence>: ");
            break;
        case LIFT:
            text.append("lift>: ");
            break;
        case LEVERAGE:
            text.append("leverage>: ");
            break;
        case CONVICTION:
            text.append("conviction>: ");
            break;
    }
    text.append(Utils.doubleToString(m_minMetric, 2) + '\n');
    if (m_significanceLevel != -1) {
        text.append("Significance level: " + Utils.doubleToString(m_significanceLevel, 2) + '\n');
    }
    text.append("Number of cycles performed: " + m_cycles + '\n');
    text.append("\nGenerated sets of large itemsets:\n");
    if (!m_car) {
        for (int i = 0; i < m_Ls.size(); i++) {
            text.append("\nSize of set of large itemsets L(" + (i + 1) + "): " + (m_Ls.get(i)).size() + '\n');
            if (m_outputItemSets) {
                text.append("\nLarge Itemsets L(" + (i + 1) + "):\n");
                for (int j = 0; j < (m_Ls.get(i)).size(); j++) {
                    text.append(((AprioriItemSet) (m_Ls.get(i)).get(j)).toString(m_instances) + "\n");
                }
            }
        }
        text.append("\nBest rules found:\n\n");
        if (m_toStringDelimiters != null) {
            text.append("Number,Premise,Premise Support,Consequence,Consequence Support,Confidence,Lift,Leverage,LeverageT,Conviction\n");
        }
        for (int i = 0; i < m_allTheRules[0].size(); i++) {
            /*
         * text.append(Utils.doubleToString((double) i + 1, (int)
         * (Math.log(m_numRules) / Math.log(10) + 1), 0) + ". " +
         * ((AprioriItemSet) m_allTheRules[0].get(i)) .toString(m_instances) +
         * " ==> " + ((AprioriItemSet) m_allTheRules[1].get(i))
         * .toString(m_instances)); text.append("    " + ((m_metricType ==
         * CONFIDENCE) ? "<" : "") + "conf:(" + Utils.doubleToString( ((Double)
         * m_allTheRules[2].get(i)).doubleValue(), 2) + ")" + ((m_metricType ==
         * CONFIDENCE) ? ">" : ""));
         */
            String outerDelim;
            String innerDelim;
            String stop;
            String implies;
            String confOpen;
            String confClose;
            String liftOpen;
            String liftClose;
            String levOpen;
            String levInner;
            String levClose;
            String convOpen;
            String convClose;
            if (m_toStringDelimiters != null) {
                outerDelim = m_toStringDelimiters.substring(0, 1);
                innerDelim = m_toStringDelimiters.substring(1, 2);
                stop = outerDelim;
                implies = outerDelim;
                confOpen = outerDelim;
                confClose = "";
                liftOpen = outerDelim;
                liftClose = "";
                levOpen = outerDelim;
                levInner = outerDelim;
                levClose = "";
                convOpen = outerDelim;
                convClose = "";
            } else {
                outerDelim = " ";
                innerDelim = " ";
                stop = ". ";
                implies = " ==> ";
                confOpen = "    " + (m_metricType == CONFIDENCE ? "<" : "") + "conf:(";
                confClose = ")" + (m_metricType == CONFIDENCE ? ">" : "");
                liftOpen = (m_metricType == LIFT ? " <" : "") + " lift:(";
                liftClose = ")" + (m_metricType == LIFT ? ">" : "");
                levOpen = (m_metricType == LEVERAGE ? " <" : "") + " lev:(";
                levInner = ")" + " [";
                levClose = "]" + (m_metricType == LEVERAGE ? ">" : "");
                convOpen = (m_metricType == CONVICTION ? " <" : "") + " conv:(";
                convClose = ")" + (m_metricType == CONVICTION ? ">" : "");
            }
            char odc = outerDelim.charAt(0);
            char idc = innerDelim.charAt(0);
            String n = Utils.doubleToString((double) i + 1, (int) (Math.log(m_numRules) / Math.log(10) + 1), 0);
            String premise = ((AprioriItemSet) m_allTheRules[0].get(i)).toString(m_instances, odc, idc);
            String consequence = ((AprioriItemSet) m_allTheRules[1].get(i)).toString(m_instances, odc, idc);
            String confidence = Utils.doubleToString(((Double) m_allTheRules[2].get(i)).doubleValue(), 2);
            String lift = Utils.doubleToString(((Double) m_allTheRules[3].get(i)).doubleValue(), 2);
            String leverage = Utils.doubleToString(((Double) m_allTheRules[4].get(i)).doubleValue(), 2);
            String conviction = Utils.doubleToString(((Double) m_allTheRules[5].get(i)).doubleValue(), 2);
            int leverageT = (int) (((Double) m_allTheRules[4].get(i)).doubleValue() * m_instances.numInstances());
            text.append(n).append(stop);
            text.append(premise).append(implies).append(consequence);
            text.append(confOpen).append(confidence).append(confClose);
            // if (/*m_metricType != CONFIDENCE ||*/ m_significanceLevel != -1) {
            text.append(liftOpen).append(lift).append(liftClose);
            text.append(levOpen).append(leverage).append(levInner).append(leverageT).append(levClose);
            text.append(convOpen).append(conviction).append(convClose);
            // if (/*m_metricType != CONFIDENCE ||*/ m_significanceLevel != -1) {
            /*
         * text.append((m_metricType == LIFT ? " <" : "") + " lift:(" +
         * Utils.doubleToString( ((Double)
         * m_allTheRules[3].get(i)).doubleValue(), 2) + ")" + (m_metricType ==
         * LIFT ? ">" : "")); text.append((m_metricType == LEVERAGE ? " <" : "")
         * + " lev:(" + Utils.doubleToString( ((Double)
         * m_allTheRules[4].get(i)).doubleValue(), 2) + ")"); text.append(" [" +
         * (int) (((Double) m_allTheRules[4].get(i)).doubleValue() * m_instances
         * .numInstances()) + "]" + (m_metricType == LEVERAGE ? ">" : ""));
         * text.append((m_metricType == CONVICTION ? " <" : "") + " conv:(" +
         * Utils.doubleToString( ((Double)
         * m_allTheRules[5].get(i)).doubleValue(), 2) + ")" + (m_metricType ==
         * CONVICTION ? ">" : ""));
         */
            // }
            text.append('\n');
        }
    } else {
        for (int i = 0; i < m_Ls.size(); i++) {
            text.append("\nSize of set of large itemsets L(" + (i + 1) + "): " + (m_Ls.get(i)).size() + '\n');
            if (m_outputItemSets) {
                text.append("\nLarge Itemsets L(" + (i + 1) + "):\n");
                for (int j = 0; j < (m_Ls.get(i)).size(); j++) {
                    text.append(((ItemSet) (m_Ls.get(i)).get(j)).toString(m_instances) + "\n");
                    text.append(((LabeledItemSet) (m_Ls.get(i)).get(j)).m_classLabel + "  ");
                    text.append(((LabeledItemSet) (m_Ls.get(i)).get(j)).support() + "\n");
                }
            }
        }
        text.append("\nBest rules found:\n\n");
        if (m_toStringDelimiters != null) {
            text.append("Number,Premise,Premise Support,Consequence,Consequence Support,Confidence\n");
        }
        for (int i = 0; i < m_allTheRules[0].size(); i++) {
            /*
         * text.append(Utils.doubleToString((double) i + 1, (int)
         * (Math.log(m_numRules) / Math.log(10) + 1), 0) + ". " + ((ItemSet)
         * m_allTheRules[0].get(i)).toString(m_instances) + " ==> " + ((ItemSet)
         * m_allTheRules[1].get(i)).toString(m_onlyClass) + "    conf:(" +
         * Utils.doubleToString( ((Double)
         * m_allTheRules[2].get(i)).doubleValue(), 2) + ")");
         */
            String outerDelim;
            String innerDelim;
            String stop;
            String implies;
            String confOpen;
            String confClose;
            if (m_toStringDelimiters != null) {
                outerDelim = m_toStringDelimiters.substring(0, 1);
                innerDelim = m_toStringDelimiters.substring(1, 2);
                stop = outerDelim;
                implies = outerDelim;
                confOpen = outerDelim;
                confClose = "";
            } else {
                outerDelim = " ";
                innerDelim = " ";
                stop = ". ";
                implies = " ==> ";
                confOpen = "    " + "conf:(";
                confClose = ")";
            }
            char odc = outerDelim.charAt(0);
            char idc = innerDelim.charAt(0);
            String n = Utils.doubleToString((double) i + 1, (int) (Math.log(m_numRules) / Math.log(10) + 1), 0);
            String premise = ((ItemSet) m_allTheRules[0].get(i)).toString(m_instances, odc, idc);
            String consequence = ((ItemSet) m_allTheRules[1].get(i)).toString(m_onlyClass, odc, idc);
            String confidence = Utils.doubleToString(((Double) m_allTheRules[2].get(i)).doubleValue(), 2);
            text.append(n).append(stop).append(premise).append(implies).append(consequence).append(confOpen).append(confidence).append(confClose);
            text.append('\n');
        }
    }
    return text.toString();
}
