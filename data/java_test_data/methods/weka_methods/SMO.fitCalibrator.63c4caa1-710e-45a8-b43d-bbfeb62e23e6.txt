protected void fitCalibrator(Instances insts, int cl1, int cl2, int numFolds, Random random) throws Exception {
    // Create header of instances object
    ArrayList<Attribute> atts = new ArrayList<Attribute>(2);
    atts.add(new Attribute("pred"));
    ArrayList<String> attVals = new ArrayList<String>(2);
    attVals.add(insts.classAttribute().value(cl1));
    attVals.add(insts.classAttribute().value(cl2));
    atts.add(new Attribute("class", attVals));
    Instances data = new Instances("data", atts, insts.numInstances());
    data.setClassIndex(1);
    m_calibrationDataHeader = data;
    // Collect data for fitting the calibration model
    if (numFolds <= 0) {
        // Use training data
        for (int j = 0; j < insts.numInstances(); j++) {
            Instance inst = insts.instance(j);
            double[] vals = new double[2];
            vals[0] = SVMOutput(-1, inst);
            if (inst.classValue() == cl2) {
                vals[1] = 1;
            }
            data.add(new DenseInstance(inst.weight(), vals));
        }
    } else {
        // Check whether number of folds too large
        if (numFolds > insts.numInstances()) {
            numFolds = insts.numInstances();
        }
        // Make copy of instances because we will shuffle them around
        insts = new Instances(insts);
        // Perform three-fold cross-validation to collect
        // unbiased predictions
        insts.randomize(random);
        insts.stratify(numFolds);
        for (int i = 0; i < numFolds; i++) {
            Instances train = insts.trainCV(numFolds, i, random);
            /*	  SerializedObject so = new SerializedObject(this);
                  BinarySMO smo = (BinarySMO)so.getObject(); */
            BinarySMO smo = new BinarySMO();
            smo.setKernel(Kernel.makeCopy(SMO.this.m_kernel));
            smo.buildClassifier(train, cl1, cl2, false, -1, -1);
            Instances test = insts.testCV(numFolds, i);
            for (int j = 0; j < test.numInstances(); j++) {
                double[] vals = new double[2];
                vals[0] = smo.SVMOutput(-1, test.instance(j));
                if (test.instance(j).classValue() == cl2) {
                    vals[1] = 1;
                }
                data.add(new DenseInstance(test.instance(j).weight(), vals));
            }
        }
    }
    // Build calibration model
    m_calibrator = AbstractClassifier.makeCopy(getCalibrator());
    m_calibrator.buildClassifier(data);
}
