@Override
public void processIncoming(Data data) throws WekaException {
    getStepManager().processing();
    String incomingConnName = data.getConnectionName();
    Instances dataSet = (Instances) data.getPayloadElement(incomingConnName);
    if (dataSet == null) {
        throw new WekaException("Incoming instances should not be null!");
    }
    getStepManager().logBasic("Creating train/test split");
    getStepManager().statusMessage("Creating train/test split");
    if (!getPreserveOrder()) {
        dataSet.randomize(new Random(m_seed));
    }
    int trainSize = (int) Math.round(dataSet.numInstances() * m_trainPercentage / 100);
    int testSize = dataSet.numInstances() - trainSize;
    Instances train = new Instances(dataSet, 0, trainSize);
    Instances test = new Instances(dataSet, trainSize, testSize);
    Data trainData = new Data(StepManager.CON_TRAININGSET);
    trainData.setPayloadElement(StepManager.CON_TRAININGSET, train);
    trainData.setPayloadElement(StepManager.CON_AUX_DATA_SET_NUM, 1);
    trainData.setPayloadElement(StepManager.CON_AUX_DATA_MAX_SET_NUM, 1);
    Data testData = new Data(StepManager.CON_TESTSET);
    testData.setPayloadElement(StepManager.CON_TESTSET, test);
    testData.setPayloadElement(StepManager.CON_AUX_DATA_SET_NUM, 1);
    testData.setPayloadElement(StepManager.CON_AUX_DATA_MAX_SET_NUM, 1);
    if (!isStopRequested()) {
        getStepManager().outputData(trainData, testData);
    }
    getStepManager().finished();
}
