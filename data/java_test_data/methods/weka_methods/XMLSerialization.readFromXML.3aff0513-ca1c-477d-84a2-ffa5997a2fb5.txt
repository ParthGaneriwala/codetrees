public Object readFromXML(Object o, String name, Element child) throws Exception {
    Object result;
    Hashtable<String, PropertyDescriptor> descriptors;
    PropertyDescriptor descriptor;
    String methodName;
    Method method;
    Object[] methodArgs;
    Object tmpResult;
    Class<?> paramClass;
    result = o;
    descriptors = getDescriptors(result);
    methodName = child.getAttribute(ATT_NAME);
    // in ignore list?
    if (m_Properties.isIgnored(getPath(child))) {
        return result;
    }
    // in ignore list of class?
    if (m_Properties.isIgnored(result, getPath(child))) {
        return result;
    }
    // is it allowed?
    if (!m_Properties.isAllowed(result, methodName)) {
        return result;
    }
    descriptor = descriptors.get(methodName);
    // unknown property?
    if (descriptor == null) {
        if (!m_CustomMethods.read().contains(methodName) && !SUPPRESS_PROPERTY_WARNINGS.contains(name + "." + methodName)) {
            System.out.println("WARNING: unknown property '" + name + "." + methodName + "'!");
        }
        return result;
    }
    method = descriptor.getWriteMethod();
    methodArgs = new Object[1];
    tmpResult = invokeReadFromXML(child);
    paramClass = method.getParameterTypes()[0];
    // array?
    if (paramClass.isArray()) {
        // no data?
        if (Array.getLength(tmpResult) == 0) {
            return result;
        }
        methodArgs[0] = tmpResult;
    } else // non-array
    {
        methodArgs[0] = tmpResult;
    }
    try {
        method.invoke(result, methodArgs);
    } catch (Exception ex) {
        System.err.println("Warning: error invoking method: " + methodName + " (" + ex.getCause().getMessage() + ")");
    }
    return result;
}
