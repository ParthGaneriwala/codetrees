@Override
public void stepInit() throws WekaException {
    if (!(getWrappedAlgorithm() instanceof weka.clusterers.Clusterer)) {
        throw new WekaException("Incorrect type of algorithm");
    }
    try {
        m_clustererTemplate = weka.clusterers.AbstractClusterer.makeCopy((weka.clusterers.Clusterer) getWrappedAlgorithm());
        if (m_clustererTemplate instanceof EnvironmentHandler) {
            ((EnvironmentHandler) m_clustererTemplate).setEnvironment(getStepManager().getExecutionEnvironment().getEnvironmentVariables());
        }
    } catch (Exception ex) {
        throw new WekaException(ex);
    }
    // create and initialize our train/test pair helper if necessary
    if (getStepManager().numIncomingConnectionsOfType(StepManager.CON_TRAININGSET) > 0) {
        m_trainTestHelper = new PairedDataHelper<weka.clusterers.Clusterer>(this, this, StepManager.CON_TRAININGSET, getStepManager().numIncomingConnectionsOfType(StepManager.CON_TESTSET) > 0 ? StepManager.CON_TESTSET : null);
    }
    m_isReset = true;
    m_streaming = false;
    m_incrementalData = new Data(StepManager.CON_INCREMENTAL_CLUSTERER);
    if (getLoadClustererFileName() != null && getLoadClustererFileName().toString().length() > 0 && getStepManager().numIncomingConnectionsOfType(StepManager.CON_TRAININGSET) == 0) {
        String resolvedFileName = getStepManager().environmentSubstitute(getLoadClustererFileName().toString());
        try {
            loadModel(resolvedFileName);
        } catch (Exception ex) {
            throw new WekaException(ex);
        }
    }
}
