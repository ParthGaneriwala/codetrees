protected int[] mergeValues(double[][] counts) {
    int[] indicators = new int[counts.length];
    // Initially, each value is in its own subset
    for (int i = 0; i < indicators.length; i++) {
        indicators[i] = i;
    }
    // Can't merge further if only one subset remains
    while (counts.length > 1) {
        // Find two rows that differ the least according to chi-squared statistic
        double[][] reducedCounts = new double[2][];
        double minVal = Double.MAX_VALUE;
        int toMergeOne = -1;
        int toMergeTwo = -1;
        for (int i = 0; i < counts.length; i++) {
            reducedCounts[0] = counts[i];
            for (int j = i + 1; j < counts.length; j++) {
                reducedCounts[1] = counts[j];
                double val = ContingencyTables.chiVal(reducedCounts, true);
                if (val < minVal) {
                    minVal = val;
                    toMergeOne = i;
                    toMergeTwo = j;
                }
            }
        }
        // Is least significant difference still significant?
        if (Statistics.chiSquaredProbability(minVal, reducedCounts[0].length - 1) <= m_SigLevel) {
            // Check whether overall split is insignificant using Bonferroni
            // correction
            double val = ContingencyTables.chiVal(counts, true);
            int df = (counts[0].length - 1) * (counts.length - 1);
            double originalSig = Statistics.chiSquaredProbability(val, df);
            double adjustedSig = originalSig * BFfactor(indicators.length, counts.length);
            if (m_Debug) {
                System.err.println("Original p-value: " + originalSig + "\tAdjusted p-value: " + adjustedSig);
            }
            if (!(adjustedSig <= m_SigLevel)) {
                // Not significant: merge all values
                for (int i = 0; i < indicators.length; i++) {
                    indicators[i] = 0;
                }
            }
            break;
        }
        // Reduce table by merging
        double[][] newCounts = new double[counts.length - 1][];
        for (int i = 0; i < counts.length; i++) {
            if (i < toMergeTwo) {
                // Can simply copy reference
                newCounts[i] = counts[i];
            } else if (i == toMergeTwo) {
                // Need to add counts
                for (int k = 0; k < counts[i].length; k++) {
                    newCounts[toMergeOne][k] += counts[i][k];
                }
            } else {
                // Need to shift row
                newCounts[i - 1] = counts[i];
            }
        }
        // Update membership indicators
        for (int i = 0; i < indicators.length; i++) {
            // All row indices < toMergeTwo remain unmodified
            if (indicators[i] >= toMergeTwo) {
                if (indicators[i] == toMergeTwo) {
                    // Need to change index for *all* indicator fields corresponding to
                    // merged row
                    indicators[i] = toMergeOne;
                } else {
                    // We have one row less because toMergeTwo is gone
                    indicators[i]--;
                }
            }
        }
        // Replace matrix
        counts = newCounts;
    }
    return indicators;
}
