@Override
public void processIncoming(Data data) throws WekaException {
    weka.clusterers.Clusterer clusterer = (weka.clusterers.Clusterer) data.getPayloadElement(StepManager.CON_BATCH_CLUSTERER);
    Instances trainData = (Instances) data.getPayloadElement(StepManager.CON_AUX_DATA_TRAININGSET);
    Instances testData = (Instances) data.getPayloadElement(StepManager.CON_AUX_DATA_TESTSET);
    Integer setNum = (Integer) data.getPayloadElement(StepManager.CON_AUX_DATA_SET_NUM);
    Integer maxSetNum = (Integer) data.getPayloadElement(StepManager.CON_AUX_DATA_MAX_SET_NUM);
    if (setNum == 1) {
        getStepManager().processing();
    }
    ClusterEvaluation eval = new ClusterEvaluation();
    eval.setClusterer(clusterer);
    // cluster evaluation is no cumulative across sets, so each
    // set is a separate evaluation
    String clusterSpec = makeClustererSpec(clusterer);
    String clusterClass = clusterer.getClass().getCanonicalName();
    clusterClass = clusterClass.substring(clusterClass.lastIndexOf('.') + 1, clusterClass.length());
    if (trainData != null && !isStopRequested()) {
        getStepManager().statusMessage("Evaluating (training set " + setNum + " of " + maxSetNum + ") " + clusterSpec);
        try {
            eval.evaluateClusterer(trainData);
        } catch (Exception ex) {
            throw new WekaException(ex);
        }
        if (!isStopRequested()) {
            String resultT = "=== Evaluation result for training instances ===\n\n" + "Scheme: " + clusterSpec + "\n" + "Relation: " + trainData.relationName() + "\n\n" + eval.clusterResultsToString();
            if (trainData.classIndex() >= 0 && trainData.classAttribute().isNumeric()) {
                resultT += "\n\nNo class-based evaluation possible. Class attribute has to be " + "nominal.";
            }
            Data text = new Data(StepManager.CON_TEXT, resultT);
            text.setPayloadElement(StepManager.CON_AUX_DATA_TEXT_TITLE, clusterClass + " train (" + setNum + " of " + maxSetNum + ")");
            getStepManager().outputData(text);
        }
    }
    if (testData != null && !isStopRequested()) {
        getStepManager().statusMessage("Evaluating (test set " + setNum + " of " + maxSetNum + ") " + clusterSpec);
        eval = new ClusterEvaluation();
        eval.setClusterer(clusterer);
        try {
            eval.evaluateClusterer(testData);
        } catch (Exception ex) {
            throw new WekaException(ex);
        }
        if (!isStopRequested()) {
            String resultT = "=== Evaluation result for test instances ===\n\n" + "Scheme: " + clusterSpec + "\n" + "Relation: " + testData.relationName() + "\n\n" + eval.clusterResultsToString();
            if (testData.classIndex() >= 0 && testData.classAttribute().isNumeric()) {
                resultT += "\n\nNo class-based evaluation possible. Class attribute has to be " + "nominal.";
            }
            Data text = new Data(StepManager.CON_TEXT, resultT);
            text.setPayloadElement(StepManager.CON_AUX_DATA_TEXT_TITLE, clusterClass + " test (" + setNum + " of " + maxSetNum + ")");
            getStepManager().outputData(text);
        }
    }
    if (isStopRequested()) {
        getStepManager().interrupted();
    } else if (setNum.intValue() == maxSetNum.intValue()) {
        getStepManager().finished();
    }
}
