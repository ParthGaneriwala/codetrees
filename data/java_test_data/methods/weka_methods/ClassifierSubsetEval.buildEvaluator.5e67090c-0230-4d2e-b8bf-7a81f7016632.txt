@Override
public void buildEvaluator(Instances data) throws Exception {
    // can evaluator handle data?
    getCapabilities().testWithFail(data);
    m_trainingInstances = new Instances(data);
    m_classIndex = m_trainingInstances.classIndex();
    m_numAttribs = m_trainingInstances.numAttributes();
    // load the testing data
    if (!m_useTraining && (!getHoldOutFile().getPath().startsWith("Click to set"))) {
        java.io.Reader r = new java.io.BufferedReader(new java.io.FileReader(getHoldOutFile().getPath()));
        m_holdOutInstances = new Instances(r);
        m_holdOutInstances.setClassIndex(m_trainingInstances.classIndex());
        if (m_trainingInstances.equalHeaders(m_holdOutInstances) == false) {
            throw new Exception("Hold out/test set is not compatable with " + "training data.\n" + m_trainingInstances.equalHeadersMsg(m_holdOutInstances));
        }
    } else if (m_usePercentageSplit) {
        // default
        int splitPercentage = 90;
        try {
            splitPercentage = Integer.parseInt(m_splitPercent);
        } catch (NumberFormatException n) {
        }
        m_trainingInstances.randomize(new Random(m_seed));
        int trainSize = Math.round(m_trainingInstances.numInstances() * splitPercentage / 100);
        int testSize = m_trainingInstances.numInstances() - trainSize;
        m_holdOutInstances = new Instances(m_trainingInstances, trainSize, testSize);
        m_trainingInstances = new Instances(m_trainingInstances, 0, trainSize);
    }
    if (m_IRClassValS != null && m_IRClassValS.length() > 0) {
        // try to parse as a number first
        try {
            m_IRClassVal = Integer.parseInt(m_IRClassValS);
            // make zero-based
            m_IRClassVal--;
        } catch (NumberFormatException e) {
            // now try as a named class label
            m_IRClassVal = m_trainingInstances.classAttribute().indexOfValue(m_IRClassValS);
        }
    }
}
