private void determineAdditionalResultMeasures() throws Exception {
    m_AdditionalMeasures = null;
    ArrayList<String> measureNames = new ArrayList<String>();
    // first try the result producer, then property array if applicable
    if (m_ResultProducer instanceof AdditionalMeasureProducer) {
        Enumeration<String> am = ((AdditionalMeasureProducer) m_ResultProducer).enumerateMeasures();
        while (am.hasMoreElements()) {
            String mname = am.nextElement();
            if (mname.startsWith("measure")) {
                if (measureNames.indexOf(mname) == -1) {
                    measureNames.add(mname);
                }
            } else {
                throw new Exception("Additional measures in " + m_ResultProducer.getClass().getName() + " must obey the naming convention" + " of starting with \"measure\"");
            }
        }
    }
    if (m_UsePropertyIterator && (m_PropertyArray != null)) {
        for (int i = 0; i < Array.getLength(m_PropertyArray); i++) {
            Object current = Array.get(m_PropertyArray, i);
            if (current instanceof AdditionalMeasureProducer) {
                Enumeration<String> am = ((AdditionalMeasureProducer) current).enumerateMeasures();
                while (am.hasMoreElements()) {
                    String mname = am.nextElement();
                    if (mname.startsWith("measure")) {
                        if (measureNames.indexOf(mname) == -1) {
                            measureNames.add(mname);
                        }
                    } else {
                        throw new Exception("Additional measures in " + current.getClass().getName() + " must obey the naming convention" + " of starting with \"measure\"");
                    }
                }
            }
        }
    }
    if (measureNames.size() > 0) {
        m_AdditionalMeasures = new String[measureNames.size()];
        for (int i = 0; i < measureNames.size(); i++) {
            m_AdditionalMeasures[i] = measureNames.get(i);
        }
    }
}
