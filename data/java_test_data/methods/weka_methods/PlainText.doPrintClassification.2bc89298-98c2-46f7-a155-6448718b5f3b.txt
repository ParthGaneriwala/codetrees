protected void doPrintClassification(double[] dist, Instance inst, int index) throws Exception {
    int width = 7 + m_NumDecimals;
    int prec = m_NumDecimals;
    Instance withMissing = (Instance) inst.copy();
    withMissing.setDataset(inst.dataset());
    double predValue = 0;
    if (Utils.sum(dist) == 0) {
        predValue = Utils.missingValue();
    } else {
        if (inst.classAttribute().isNominal()) {
            predValue = Utils.maxIndex(dist);
        } else {
            predValue = dist[0];
        }
    }
    // index
    append(Utils.padLeftAndAllowOverflow("" + (index + 1), 9));
    if (inst.dataset().classAttribute().isNumeric()) {
        // actual
        if (inst.classIsMissing())
            append(" " + Utils.padLeft("?", width));
        else
            append(" " + Utils.doubleToString(inst.classValue(), width, prec));
        // predicted
        if (Utils.isMissingValue(predValue))
            append(" " + Utils.padLeft("?", width));
        else
            append(" " + Utils.doubleToString(predValue, width, prec));
        // error
        if (Utils.isMissingValue(predValue) || inst.classIsMissing())
            append(" " + Utils.padLeft("?", width));
        else
            append(" " + Utils.doubleToString(predValue - inst.classValue(), width, prec));
    } else {
        // actual
        append(" " + Utils.padLeftAndAllowOverflow(((int) inst.classValue() + 1) + ":" + inst.toString(inst.classIndex()), width));
        // predicted
        if (Utils.isMissingValue(predValue))
            append(" " + Utils.padLeft("?", width));
        else
            append(" " + Utils.padLeftAndAllowOverflow(((int) predValue + 1) + ":" + inst.dataset().classAttribute().value((int) predValue), width));
        // error?
        if (!Utils.isMissingValue(predValue) && !inst.classIsMissing() && ((int) predValue + 1 != (int) inst.classValue() + 1))
            append(" " + "  +  ");
        else
            append(" " + "     ");
        // prediction/distribution
        if (m_OutputDistribution) {
            if (Utils.isMissingValue(predValue)) {
                append(" " + "?");
            } else {
                append(" ");
                for (int n = 0; n < dist.length; n++) {
                    if (n > 0)
                        append(",");
                    if (n == (int) predValue)
                        append("*");
                    append(Utils.doubleToString(dist[n], prec));
                }
            }
        } else {
            if (Utils.isMissingValue(predValue))
                append(" " + "?");
            else
                append(" " + Utils.doubleToString(dist[(int) predValue], prec));
        }
    }
    // attributes
    append(" " + attributeValuesString(withMissing) + "\n");
}
