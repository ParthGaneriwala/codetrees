public String toString() {
    // only ZeroR model?
    if (m_ZeroR != null) {
        StringBuffer buf = new StringBuffer();
        buf.append(this.getClass().getName().replaceAll(".*\\.", "") + "\n");
        buf.append(this.getClass().getName().replaceAll(".*\\.", "").replaceAll(".", "=") + "\n\n");
        buf.append("Warning: No model could be built, hence ZeroR model is used:\n\n");
        buf.append(m_ZeroR.toString());
        return buf.toString();
    }
    StringBuffer text = new StringBuffer();
    if ((m_InitialFs != null) && getUseEstimatedPriors()) {
        text.append("Initial Fs: \n");
        for (int j = 0; j < m_NumClasses; j++) {
            text.append("\n\tClass " + (j + 1) + " (" + m_ClassAttribute.name() + "=" + m_ClassAttribute.value(j) + "): " + Utils.doubleToString(m_InitialFs[j], getNumDecimalPlaces()) + "\n");
        }
        text.append("\n");
    }
    if (m_NumGenerated == 0) {
        text.append("LogitBoost: No model built yet.");
    // text.append(m_Classifiers[0].toString()+"\n");
    } else {
        text.append("LogitBoost: Base classifiers and their weights: \n");
        for (int i = 0; i < m_NumGenerated; i++) {
            text.append("\nIteration " + (i + 1));
            for (int j = 0; j < m_NumClasses; j++) {
                text.append("\n\tClass " + (j + 1) + " (" + m_ClassAttribute.name() + "=" + m_ClassAttribute.value(j) + ")\n\n" + m_Classifiers.get(i)[j].toString() + "\n");
                if (m_NumClasses == 2) {
                    text.append("Two-class case: second classifier predicts " + "additive inverse of first classifier and " + "is not explicitly computed.\n\n");
                    break;
                }
            }
        }
        text.append("Number of performed iterations: " + m_NumGenerated + "\n");
    }
    return text.toString();
}
