public ArrayList<Object>[] generateRules(double minConfidence, ArrayList<Hashtable<ItemSet, Integer>> hashtables, int numItemsInSet) {
    ArrayList<Object> premises = new ArrayList<Object>(), consequences = new ArrayList<Object>(), conf = new ArrayList<Object>();
    // TODO
    ArrayList<Object> lift = new ArrayList<Object>(), lev = new ArrayList<Object>(), conv = new ArrayList<Object>();
    // TODO
    @SuppressWarnings("unchecked") ArrayList<Object>[] rules = new ArrayList[6], moreResults;
    AprioriItemSet premise, consequence;
    Hashtable<ItemSet, Integer> hashtable = hashtables.get(numItemsInSet - 2);
    // Generate all rules with one item in the consequence.
    for (int i = 0; i < m_items.length; i++) {
        if (m_items[i] != -1) {
            premise = new AprioriItemSet(m_totalTransactions);
            consequence = new AprioriItemSet(m_totalTransactions);
            premise.m_items = new int[m_items.length];
            consequence.m_items = new int[m_items.length];
            consequence.m_counter = m_counter;
            for (int j = 0; j < m_items.length; j++) {
                consequence.m_items[j] = -1;
            }
            System.arraycopy(m_items, 0, premise.m_items, 0, m_items.length);
            premise.m_items[i] = -1;
            consequence.m_items[i] = m_items[i];
            premise.m_counter = hashtable.get(premise).intValue();
            Hashtable<ItemSet, Integer> hashtableForConsequence = hashtables.get(0);
            int consequenceUnconditionedCounter = hashtableForConsequence.get(consequence).intValue();
            consequence.m_secondaryCounter = consequenceUnconditionedCounter;
            premises.add(premise);
            consequences.add(consequence);
            conf.add(new Double(confidenceForRule(premise, consequence)));
            double tempLift = liftForRule(premise, consequence, consequenceUnconditionedCounter);
            double tempLev = leverageForRule(premise, consequence, premise.m_counter, consequenceUnconditionedCounter);
            double tempConv = convictionForRule(premise, consequence, premise.m_counter, consequenceUnconditionedCounter);
            lift.add(new Double(tempLift));
            lev.add(new Double(tempLev));
            conv.add(new Double(tempConv));
        }
    }
    rules[0] = premises;
    rules[1] = consequences;
    rules[2] = conf;
    rules[3] = lift;
    rules[4] = lev;
    rules[5] = conv;
    pruneRules(rules, minConfidence);
    // Generate all the other rules
    moreResults = moreComplexRules(rules, numItemsInSet, 1, minConfidence, hashtables);
    if (moreResults != null) {
        for (int i = 0; i < moreResults[0].size(); i++) {
            rules[0].add(moreResults[0].get(i));
            rules[1].add(moreResults[1].get(i));
            rules[2].add(moreResults[2].get(i));
            // TODO
            rules[3].add(moreResults[3].get(i));
            rules[4].add(moreResults[4].get(i));
            rules[5].add(moreResults[5].get(i));
        }
    }
    return rules;
}
