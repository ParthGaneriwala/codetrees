// setPosition
public void setPosition(int nNode, int nX, int nY, ArrayList<Integer> nodes) {
    int dX = nX - getPositionX(nNode);
    int dY = nY - getPositionY(nNode);
    // update undo stack
    if (m_bNeedsUndoAction) {
        boolean isUpdate = false;
        try {
            UndoAction undoAction = null;
            if (m_undoStack.size() > 0) {
                undoAction = m_undoStack.get(m_undoStack.size() - 1);
                SetGroupPositionAction posAction = (SetGroupPositionAction) undoAction;
                isUpdate = true;
                int iNode = 0;
                while (isUpdate && iNode < posAction.m_nodes.size()) {
                    if (posAction.m_nodes.get(iNode) != nodes.get(iNode)) {
                        isUpdate = false;
                    }
                    iNode++;
                }
                if (isUpdate == true) {
                    posAction.setUndoPosition(dX, dY);
                }
            }
        } catch (Exception e) {
        // ignore. it's not a SetPositionAction
        }
        if (!isUpdate) {
            addUndoAction(new SetGroupPositionAction(nodes, dX, dY));
        }
    }
    for (int iNode = 0; iNode < nodes.size(); iNode++) {
        nNode = nodes.get(iNode);
        m_nPositionX.set(nNode, getPositionX(nNode) + dX);
        m_nPositionY.set(nNode, getPositionY(nNode) + dY);
    }
}
