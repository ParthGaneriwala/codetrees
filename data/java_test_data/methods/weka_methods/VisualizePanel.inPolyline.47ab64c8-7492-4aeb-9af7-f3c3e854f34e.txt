private boolean inPolyline(ArrayList<Double> ob, double x, double y) {
    // this works similar to the inPoly below except that
    // the first and last lines are treated as extending infinite in one
    // direction and
    // then infinitly in the x dirction their is a line that will
    // normaly be infinite but
    // can be finite in one or both directions
    int countx = 0;
    double vecx, vecy;
    double change;
    double x1, y1, x2, y2;
    for (int noa = 1; noa < ob.size() - 4; noa += 2) {
        y1 = ob.get(noa + 1).doubleValue();
        y2 = ob.get(noa + 3).doubleValue();
        x1 = ob.get(noa).doubleValue();
        x2 = ob.get(noa + 2).doubleValue();
        // System.err.println(y1 + " " + y2 + " " + x1 + " " + x2);
        vecy = y2 - y1;
        vecx = x2 - x1;
        if (noa == 1 && noa == ob.size() - 6) {
            // then do special test first and last edge
            if (vecy != 0) {
                change = (y - y1) / vecy;
                if (vecx * change + x1 >= x) {
                    // then intersection
                    countx++;
                }
            }
        } else if (noa == 1) {
            if ((y < y2 && vecy > 0) || (y > y2 && vecy < 0)) {
                // now just determine intersection or not
                change = (y - y1) / vecy;
                if (vecx * change + x1 >= x) {
                    // then intersection on horiz
                    countx++;
                }
            }
        } else if (noa == ob.size() - 6) {
            // then do special test on last edge
            if ((y <= y1 && vecy < 0) || (y >= y1 && vecy > 0)) {
                change = (y - y1) / vecy;
                if (vecx * change + x1 >= x) {
                    countx++;
                }
            }
        } else if ((y1 <= y && y < y2) || (y2 < y && y <= y1)) {
            // then continue tests.
            if (vecy == 0) {
            // then lines are parallel stop tests in
            // ofcourse it should never make it this far
            } else {
                change = (y - y1) / vecy;
                if (vecx * change + x1 >= x) {
                    // then intersects on horiz
                    countx++;
                }
            }
        }
    }
    // now check for intersection with the infinity line
    y1 = ob.get(ob.size() - 2).doubleValue();
    y2 = ob.get(ob.size() - 1).doubleValue();
    if (y1 > y2) {
        // then normal line
        if (y1 >= y && y > y2) {
            countx++;
        }
    } else {
        // then the line segment is inverted
        if (y1 >= y || y > y2) {
            countx++;
        }
    }
    if ((countx % 2) == 1) {
        return true;
    } else {
        return false;
    }
}
