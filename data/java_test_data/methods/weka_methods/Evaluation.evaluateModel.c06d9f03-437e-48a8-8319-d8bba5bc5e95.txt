public double[] evaluateModel(Classifier classifier, Instances data, Object... forPredictionsPrinting) throws Exception {
    // for predictions printing
    AbstractOutput classificationOutput = null;
    double[] predictions = new double[data.numInstances()];
    if (forPredictionsPrinting.length > 0) {
        classificationOutput = (AbstractOutput) forPredictionsPrinting[0];
    }
    if (classifier instanceof BatchPredictor && ((BatchPredictor) classifier).implementsMoreEfficientBatchPrediction()) {
        // make a copy and set the class to missing
        Instances dataPred = new Instances(data);
        for (int i = 0; i < data.numInstances(); i++) {
            dataPred.instance(i).setClassMissing();
        }
        double[][] preds = ((BatchPredictor) classifier).distributionsForInstances(dataPred);
        for (int i = 0; i < data.numInstances(); i++) {
            double[] p = preds[i];
            predictions[i] = evaluationForSingleInstance(p, data.instance(i), true);
            if (classificationOutput != null) {
                classificationOutput.printClassification(p, data.instance(i), i);
            }
        }
    } else {
        for (int i = 0; i < data.numInstances(); i++) {
            predictions[i] = evaluateModelOnceAndRecordPrediction(classifier, data.instance(i));
            if (classificationOutput != null) {
                classificationOutput.printClassification(classifier, data.instance(i), i);
            }
        }
    }
    return predictions;
}
