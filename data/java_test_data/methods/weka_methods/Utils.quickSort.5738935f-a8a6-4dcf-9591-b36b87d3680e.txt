/**
 * Implements quicksort with median-of-three method and explicit sort for
 * problems of size three or less.
 *
 * @param array the array of doubles to be sorted
 * @param index the index into the array of doubles
 * @param left the first index of the subset to be sorted
 * @param right the last index of the subset to be sorted
 */
// @ requires 0 <= first && first <= right && right < array.length;
// @ requires (\forall int i; 0 <= i && i < index.length; 0 <= index[i] &&
// index[i] < array.length);
// @ requires array != index;
private static void quickSort(/* @non_null@ */
double[] array, /* @non_null@ */
int[] index, int left, int right) {
    int diff = right - left;
    switch(diff) {
        case 0:
            // No need to do anything
            return;
        case 1:
            // Swap two elements if necessary
            conditionalSwap(array, index, left, right);
            return;
        case 2:
            // Just need to sort three elements
            conditionalSwap(array, index, left, left + 1);
            conditionalSwap(array, index, left, right);
            conditionalSwap(array, index, left + 1, right);
            return;
        default:
            // Establish pivot
            int pivotLocation = sortLeftRightAndCenter(array, index, left, right);
            // Move pivot to the right, partition, and restore pivot
            swap(index, pivotLocation, right - 1);
            int center = partition(array, index, left, right, array[index[right - 1]]);
            swap(index, center, right - 1);
            // Sort recursively
            quickSort(array, index, left, center - 1);
            quickSort(array, index, center + 1, right);
    }
}
