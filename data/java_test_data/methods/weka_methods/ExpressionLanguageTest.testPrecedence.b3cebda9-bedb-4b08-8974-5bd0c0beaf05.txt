public void testPrecedence() throws Exception {
    // ^ has higher precedence than *, /
    // bug in AttributeExpression
    assertEquals(32.0, evaluateDouble("8*2^2"));
    assertEquals(2.0, evaluateDouble("8/2^2"));
    // ^ has higher precedence than unary -
    assertEquals(-1.0, evaluateDouble("-1^2"));
    // *, / have higher precedence than +, -
    assertEquals(10.0, evaluateDouble("2.0*3.0 + 4.0"));
    assertEquals(2.0, evaluateDouble("2.0*3.0 - 4.0"));
    assertEquals(-0.5, evaluateDouble("2.0/4.0 - 1.0"));
    assertEquals(1.5, evaluateDouble("2.0/4.0 + 1.0"));
    // unary - has higher precedence than +, -
    assertEquals(1.0, evaluateDouble("-1.0 + 2.0"));
    assertEquals(-3.0, evaluateDouble("-1.0 - 2.0"));
    // due to the associativity of *, / we don't have to test for unary - over *, /
    // +, -, /, * have higher precedence than =, <=, <, >, >=
    // if not, then the program will fail due to a type error
    assertTrue(evaluateBoolean("1.0 + 2.0 >= 2.5"));
    assertFalse(evaluateBoolean("-2.0 - 2.0 > -2.5"));
    assertFalse(evaluateBoolean("2.0 * 2.0 <= 2.5"));
    assertFalse(evaluateBoolean("1.0 / 0.5 < 1.0"));
    assertTrue(evaluateBoolean("1.0 + 2.0 = 3.0"));
    // =, <=, <, >, >= have higher precedence than &&, ||
    // if not, then the program will fail due to a type error
    assertTrue(evaluateBoolean("1.0 < 2.0 and true"));
    assertTrue(evaluateBoolean("1.0 <= 2.0 or false"));
    assertFalse(evaluateBoolean("1.0 > 2.0 and true"));
    assertFalse(evaluateBoolean("1.0 >= 2.0 or false"));
    assertFalse(evaluateBoolean("1.0 = 2.0 and true"));
    assertTrue(evaluateBoolean("1.0 < 2.0 & true"));
    assertTrue(evaluateBoolean("1.0 <= 2.0 | false"));
    assertFalse(evaluateBoolean("1.0 > 2.0 & true"));
    assertFalse(evaluateBoolean("1.0 >= 2.0 | false"));
    assertFalse(evaluateBoolean("1.0 = 2.0 & true"));
    // ! has higher precedence than &&
    assertFalse(evaluateBoolean("not true and false"));
    assertFalse(evaluateBoolean("not false and false"));
    assertFalse(evaluateBoolean("! true & false"));
    assertFalse(evaluateBoolean("! false & false"));
    // ! has higher precedence than ||
    assertTrue(evaluateBoolean("not true or true"));
    assertTrue(evaluateBoolean("not false or true"));
    assertTrue(evaluateBoolean("! true | true"));
    assertTrue(evaluateBoolean("! false | true"));
    // && has higher precedence than ||
    assertTrue(evaluateBoolean("false and false or true"));
    assertTrue(evaluateBoolean("false and true or true"));
    assertTrue(evaluateBoolean("false & false | true"));
    assertTrue(evaluateBoolean("false & true | true"));
}
