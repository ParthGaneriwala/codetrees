private void removeGapsWithEdgeConcentration(int[] nodesLevel) {
    final int temp = m_nodes.size(), temp2 = graphMatrix[0].length;
    int tempCnt = 1;
    for (int n = 0; n < temp; n++) {
        for (int i = 0; i < temp2; i++) {
            if (graphMatrix[n][i] > 0) {
                if (nodesLevel[i] > nodesLevel[n] + 1) {
                    // System.out.println("Processing node "+
                    // ((GraphNode)m_nodes.get(n)).ID+
                    // " for "+((GraphNode)m_nodes.get(i)).ID);
                    int tempLevel = nodesLevel[n];
                    boolean tempNodePresent = false;
                    int k = temp;
                    int tempnode = n;
                    while (tempLevel < nodesLevel[i] - 1) {
                        tempNodePresent = false;
                        for (; k < graphMatrix.length; k++) {
                            if (graphMatrix[tempnode][k] > 0) {
                                // System.out.println("tempnode will be true");
                                tempNodePresent = true;
                                break;
                            }
                        }
                        if (tempNodePresent) {
                            tempnode = k;
                            k = k + 1;
                            tempLevel++;
                        } else {
                            if (tempnode != n) {
                                tempnode = k - 1;
                            }
                            // System.out.println("breaking from loop");
                            break;
                        }
                    }
                    if (m_nodes.get(tempnode).nodeType == SINGULAR_DUMMY) {
                        m_nodes.get(tempnode).nodeType = PLURAL_DUMMY;
                    }
                    if (tempNodePresent) {
                        // Link the last known temp node to target
                        graphMatrix[tempnode][i] = graphMatrix[n][i];
                        // System.out.println("modifying "+
                        // ((GraphNode)nodes.get(tempnode)).ID+
                        // ", "+((GraphNode)nodes.get(n)).ID);
                        // ///matrix[lastknowntempnode][source]=-original_val
                        // ///graphMatrix[tempnode][n] = -graphMatrix[n][i];
                        // System.out.println("modifying "+
                        // ((GraphNode)nodes.get(i)).ID+
                        // ", "+
                        // ((GraphNode)nodes.get(tempnode)).ID);
                        // and matrix[target][lastknowntempnode]=-original_val
                        // for reverse tracing
                        graphMatrix[i][tempnode] = -graphMatrix[n][i];
                        // unlink source from the target
                        graphMatrix[n][i] = 0;
                        graphMatrix[i][n] = 0;
                        continue;
                    }
                    int len = graphMatrix.length;
                    int[][] tempMatrix = new int[graphMatrix.length + (nodesLevel[i] - nodesLevel[tempnode] - 1)][graphMatrix.length + (nodesLevel[i] - nodesLevel[tempnode] - 1)];
                    int level = nodesLevel[tempnode] + 1;
                    copyMatrix(graphMatrix, tempMatrix);
                    String s1 = new String("S" + tempCnt++);
                    // System.out.println("Adding dummy "+s1);
                    m_nodes.add(new GraphNode(s1, s1, SINGULAR_DUMMY));
                    int[] temp3 = new int[nodeLevels[level].length + 1];
                    System.arraycopy(nodeLevels[level], 0, temp3, 0, nodeLevels[level].length);
                    temp3[temp3.length - 1] = m_nodes.size() - 1;
                    nodeLevels[level] = temp3;
                    temp3 = new int[m_nodes.size() + 1];
                    System.arraycopy(nodesLevel, 0, temp3, 0, nodesLevel.length);
                    temp3[m_nodes.size() - 1] = level;
                    nodesLevel = temp3;
                    level++;
                    // nodeLevels[level++].addElement(new Integer(m_nodes.size()-1));
                    // System.out.println("len:"+len+"("+
                    // ((GraphNode)m_nodes.get(len)).ID+"),"+
                    // nodesLevel[i]+","+nodesLevel[tempnode]);
                    int m;
                    for (m = len; m < len + nodesLevel[i] - nodesLevel[tempnode] - 1 - 1; m++) {
                        String s2 = new String("S" + tempCnt++);
                        // System.out.println("Adding dummy "+s2);
                        m_nodes.add(new GraphNode(s2, s2, SINGULAR_DUMMY));
                        temp3 = new int[nodeLevels[level].length + 1];
                        // for(int j=0; j<nodeLevels[level].length; j++)
                        // temp3[j] = nodeLevels[level][j];
                        System.arraycopy(nodeLevels[level], 0, temp3, 0, nodeLevels[level].length);
                        temp3[temp3.length - 1] = m_nodes.size() - 1;
                        nodeLevels[level] = temp3;
                        temp3 = new int[m_nodes.size() + 1];
                        System.arraycopy(nodesLevel, 0, temp3, 0, nodesLevel.length);
                        temp3[m_nodes.size() - 1] = level;
                        nodesLevel = temp3;
                        level++;
                        // nodeLevels[level++].addElement(new Integer(m_nodes.size()-1));
                        // System.out.println("modifying "+
                        // ((GraphNode)nodes.get(m)).ID+", "+
                        // ((GraphNode)nodes.get(m+1)).ID);
                        // tempCnt++;
                        tempMatrix[m][m + 1] = tempMatrix[n][i];
                        if (m > len) {
                            // System.out.println("modifying "+
                            // ((GraphNode)nodes.get(m)).ID+
                            // ", "+((GraphNode)nodes.get(m-1)).ID);
                            tempMatrix[m][m - 1] = -1 * tempMatrix[n][i];
                        }
                    }
                    // System.out.println("m "+((GraphNode)m_nodes.get(m)).ID+
                    // " i "+((GraphNode)m_nodes.get(i)).ID+
                    // " tempnode "+((GraphNode)m_nodes.get(tempnode)).ID+
                    // " len "+((GraphNode)m_nodes.get(len)).ID );
                    // System.out.println("modifying "+
                    // ((GraphNode)nodes.get(m)).ID+", "+
                    // ((GraphNode)nodes.get(i)).ID);
                    // temp[lastTempNodeCreated][targetNode]=temp[origNode][targetNode]
                    tempMatrix[m][i] = tempMatrix[n][i];
                    // System.out.println("modifying "+
                    // ((GraphNode)nodes.get(tempnode)).ID+", "+
                    // ((GraphNode)nodes.get(len)).ID);
                    // temp[origNode][firstTempNodecreated] = temp[origNode][targetNode]
                    tempMatrix[tempnode][len] = tempMatrix[n][i];
                    // System.out.println("modifying "+
                    // ((GraphNode)nodes.get(len)).ID+", "+
                    // ((GraphNode)nodes.get(tempnode)).ID);
                    // temp[firstTempNodeCreated][origNode] for reverse tracing
                    tempMatrix[len][tempnode] = -1 * tempMatrix[n][i];
                    // System.out.println("modifying "+
                    // ((GraphNode)nodes.get(i)).ID+", "+
                    // ((GraphNode)nodes.get(m)).ID);
                    // temp[targetNode][lastTempNodecreated] for reverse tracing
                    tempMatrix[i][m] = -1 * tempMatrix[n][i];
                    if (m > len) {
                        // System.out.println("modifying "+
                        // ((GraphNode)nodes.get(m)).ID+
                        // ", "+((GraphNode)nodes.get(m-1)).ID);
                        // temp[lastTempNodeCreated][secondlastNode] for reverse tracing
                        // but only do this if more than 1 temp nodes are created
                        tempMatrix[m][m - 1] = -1 * tempMatrix[n][i];
                    }
                    // temp[origNode][targetNode] = 0 unlinking as they have been
                    tempMatrix[n][i] = 0;
                    // linked by a chain of temporary nodes now.
                    tempMatrix[i][n] = 0;
                    graphMatrix = tempMatrix;
                } else {
                    // System.out.println("modifying "+
                    // ((GraphNode)nodes.get(i)).ID+", "+
                    // ((GraphNode)nodes.get(n)).ID);
                    // ****Even if there is no gap just add a reference for the
                    // ****parent to the child for reverse tracing, useful if the
                    // ****there is a reversed edge from parent to child and therefore
                    // ****visualizer would know to highlight this edge when
                    // ****highlighting the child.
                    graphMatrix[i][n] = -1 * graphMatrix[n][i];
                }
            }
        }
    }
}
