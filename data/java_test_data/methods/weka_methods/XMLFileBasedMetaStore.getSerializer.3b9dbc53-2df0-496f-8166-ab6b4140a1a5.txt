protected XMLBasicSerialization getSerializer() {
    try {
        XMLBasicSerialization ser = new XMLBasicSerialization() {

            public void clear() throws Exception {
                super.clear();
                m_Properties.addAllowed(weka.classifiers.Classifier.class, "debug");
                m_Properties.addAllowed(weka.classifiers.Classifier.class, "options");
                m_Properties.addAllowed(weka.associations.Associator.class, "options");
                m_Properties.addAllowed(weka.clusterers.Clusterer.class, "options");
                m_Properties.addAllowed(weka.filters.Filter.class, "options");
                m_Properties.addAllowed(weka.core.converters.Saver.class, "options");
                m_Properties.addAllowed(weka.core.converters.Loader.class, "options");
                m_Properties.addAllowed(weka.attributeSelection.ASSearch.class, "options");
                m_Properties.addAllowed(weka.attributeSelection.ASEvaluation.class, "options");
                m_Properties.addAllowed(weka.core.converters.DatabaseSaver.class, "options");
                m_Properties.addAllowed(weka.core.converters.DatabaseLoader.class, "options");
                m_Properties.addAllowed(weka.core.converters.TextDirectoryLoader.class, "options");
                // we assume that classes implementing SplitEvaluator also implement
                // OptionHandler
                m_Properties.addAllowed(weka.experiment.SplitEvaluator.class, "options");
                // we assume that classes implementing ResultProducer also implement
                // OptionHandler
                m_Properties.addAllowed(weka.experiment.ResultProducer.class, "options");
            }
        };
        ser.setSuppressWarnings(true);
        return ser;
    } catch (Exception ex) {
        ex.printStackTrace();
    }
    return null;
}
