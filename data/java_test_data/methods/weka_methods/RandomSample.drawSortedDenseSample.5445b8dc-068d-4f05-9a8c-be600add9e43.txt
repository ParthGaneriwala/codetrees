public static int[] drawSortedDenseSample(int n, int N, Random r) throws IllegalArgumentException {
    if ((n > N) || (n < 0) || (N < 0)) {
        throw new IllegalArgumentException("drawSortedDenseSample: cannot sample" + n + " points from " + N + " points.");
    }
    // Set aside space for storing selected indices
    int[] vals = new int[n];
    // Number of values available for skipping
    double toBeSkipped = N - n;
    // Number of values that have not yet been processed
    double toProcess = N;
    while (n > 1) {
        // While more than two values remain to be selected
        // Random value in (0, 1]
        double rv = 1.0 - r.nextDouble();
        // Probability of skipping current value
        double p = toBeSkipped / toProcess;
        while (rv < p) {
            // Number of values available for skipping needs to be reduced by one
            toBeSkipped--;
            // Number of values that have not yet been processed needs to be reduced by one
            toProcess--;
            // Probability of skipping the next value as well
            p = (p * toBeSkipped) / toProcess;
        }
        // Add to list of selected values
        vals[vals.length - n] = N - (int) toProcess;
        // Number of values that have not yet been processed needs to be reduced by one
        toProcess--;
        // Number of values that still have to be selected is reduced by one
        n--;
    }
    if (vals.length > 0) {
        // Select last value
        vals[vals.length - 1] = N - (int) toProcess + (int) (toProcess * r.nextDouble());
    }
    return vals;
}
