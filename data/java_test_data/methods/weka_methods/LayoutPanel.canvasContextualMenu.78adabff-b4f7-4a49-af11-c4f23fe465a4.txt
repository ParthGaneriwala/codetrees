protected void canvasContextualMenu(final int x, final int y) {
    Map<String, List<StepManagerImpl[]>> closestConnections = m_visLayout.findClosestConnections(new Point(x, y), 10);
    PopupMenu contextualMenu = new PopupMenu();
    int menuItemCount = 0;
    if (m_visLayout.getSelectedSteps().size() > 0) {
        MenuItem snapItem = new MenuItem("Snap selected to grid");
        snapItem.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                snapSelectedToGrid();
            }
        });
        contextualMenu.add(snapItem);
        menuItemCount++;
        MenuItem copyItem = new MenuItem("Copy selected");
        copyItem.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    m_visLayout.copySelectedStepsToClipboard();
                    m_visLayout.setSelectedSteps(new ArrayList<StepVisual>());
                } catch (WekaException ex) {
                    m_visLayout.getMainPerspective().showErrorDialog(ex);
                }
            }
        });
        contextualMenu.add(copyItem);
        menuItemCount++;
        MenuItem cutItem = new MenuItem("Cut selected");
        cutItem.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    m_visLayout.copySelectedStepsToClipboard();
                    m_visLayout.removeSelectedSteps();
                } catch (WekaException ex) {
                    m_visLayout.getMainPerspective().showErrorDialog(ex);
                }
            }
        });
        contextualMenu.add(cutItem);
        menuItemCount++;
        MenuItem deleteSelected = new MenuItem("Delete selected");
        deleteSelected.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    m_visLayout.removeSelectedSteps();
                } catch (WekaException ex) {
                    m_visLayout.getMainPerspective().showErrorDialog(ex);
                }
            }
        });
        contextualMenu.add(deleteSelected);
        menuItemCount++;
    }
    if (m_visLayout.getMainPerspective().getPasteBuffer() != null && m_visLayout.getMainPerspective().getPasteBuffer().length() > 0) {
        contextualMenu.addSeparator();
        menuItemCount++;
        MenuItem pasteItem = new MenuItem("Paste");
        pasteItem.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    m_visLayout.pasteFromClipboard(x, y);
                } catch (WekaException ex) {
                    m_visLayout.getMainPerspective().showErrorDialog(ex);
                }
            }
        });
        contextualMenu.add(pasteItem);
        menuItemCount++;
    }
    if (closestConnections.size() > 0) {
        contextualMenu.addSeparator();
        menuItemCount++;
        MenuItem deleteConnection = new MenuItem("Delete connection:");
        deleteConnection.setEnabled(false);
        contextualMenu.insert(deleteConnection, menuItemCount++);
        for (Map.Entry<String, List<StepManagerImpl[]>> e : closestConnections.entrySet()) {
            final String connName = e.getKey();
            for (StepManagerImpl[] cons : e.getValue()) {
                final StepManagerImpl source = cons[0];
                final StepManagerImpl target = cons[1];
                MenuItem deleteItem = new MenuItem(connName + "-->" + target.getName());
                deleteItem.addActionListener(new ActionListener() {

                    @Override
                    public void actionPerformed(ActionEvent e) {
                        m_visLayout.addUndoPoint();
                        source.disconnectStepWithConnection(target.getManagedStep(), connName);
                        target.disconnectStepWithConnection(source.getManagedStep(), connName);
                        if (m_visLayout.getSelectedSteps().size() > 0) {
                            m_visLayout.setSelectedSteps(new ArrayList<StepVisual>());
                        }
                        m_visLayout.setEdited(true);
                        revalidate();
                        repaint();
                        m_visLayout.getMainPerspective().notifyIsDirty();
                    }
                });
                contextualMenu.add(deleteItem);
                menuItemCount++;
            }
        }
    }
    if (menuItemCount > 0) {
        contextualMenu.addSeparator();
        menuItemCount++;
    }
    MenuItem noteItem = new MenuItem("New note");
    noteItem.addActionListener(new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent e) {
            initiateAddNote();
        }
    });
    contextualMenu.add(noteItem);
    this.add(contextualMenu);
    // make sure that popup location takes current scaling into account
    double z = m_visLayout.getZoomSetting() / 100.0;
    double px = x * z;
    double py = y * z;
    contextualMenu.show(this, (int) px, (int) py);
}
