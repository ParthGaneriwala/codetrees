@Override
public void buildClusterer(Instances data) throws Exception {
    // /System.err.println("Method " + m_nLinkType);
    m_instances = data;
    int nInstances = m_instances.numInstances();
    if (nInstances == 0) {
        return;
    }
    m_DistanceFunction.setInstances(m_instances);
    // use array of integer vectors to store cluster indices,
    // starting with one cluster per instance
    @SuppressWarnings("unchecked") Vector<Integer>[] nClusterID = new Vector[data.numInstances()];
    for (int i = 0; i < data.numInstances(); i++) {
        nClusterID[i] = new Vector<Integer>();
        nClusterID[i].add(i);
    }
    // calculate distance matrix
    int nClusters = data.numInstances();
    // used for keeping track of hierarchy
    Node[] clusterNodes = new Node[nInstances];
    if (m_nLinkType == NEIGHBOR_JOINING) {
        neighborJoining(nClusters, nClusterID, clusterNodes);
    } else {
        doLinkClustering(nClusters, nClusterID, clusterNodes);
    }
    // move all clusters in m_nClusterID array
    // & collect hierarchy
    int iCurrent = 0;
    m_clusters = new Node[m_nNumClusters];
    m_nClusterNr = new int[nInstances];
    for (int i = 0; i < nInstances; i++) {
        if (nClusterID[i].size() > 0) {
            for (int j = 0; j < nClusterID[i].size(); j++) {
                m_nClusterNr[nClusterID[i].elementAt(j)] = iCurrent;
            }
            m_clusters[iCurrent] = clusterNodes[i];
            iCurrent++;
        }
    }
}
