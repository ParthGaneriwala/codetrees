protected void setOutputFormat() {
    if (m_CutPoints == null) {
        setOutputFormat(null);
        return;
    }
    ArrayList<Attribute> attributes = new ArrayList<Attribute>(getInputFormat().numAttributes());
    int classIndex = getInputFormat().classIndex();
    for (int i = 0, m = getInputFormat().numAttributes(); i < m; ++i) {
        if ((m_DiscretizeCols.isInRange(i)) && (getInputFormat().attribute(i).isNumeric()) && (getInputFormat().classIndex() != i)) {
            Set<String> cutPointsCheck = new HashSet<String>();
            double[] cutPoints = m_CutPoints[i];
            if (!m_MakeBinary) {
                ArrayList<String> attribValues;
                if (cutPoints == null) {
                    attribValues = new ArrayList<String>(1);
                    attribValues.add("'All'");
                } else {
                    attribValues = new ArrayList<String>(cutPoints.length + 1);
                    if (m_UseBinNumbers) {
                        for (int j = 0, n = cutPoints.length; j <= n; ++j) {
                            attribValues.add("'B" + (j + 1) + "of" + (n + 1) + "'");
                        }
                    } else {
                        for (int j = 0, n = cutPoints.length; j <= n; ++j) {
                            String newBinRangeString = binRangeString(cutPoints, j, getBinRangePrecision());
                            if (!cutPointsCheck.add(newBinRangeString)) {
                                throw new IllegalArgumentException("A duplicate bin range was detected. Try increasing the bin range precision.");
                            }
                            attribValues.add("'" + newBinRangeString + "'");
                        }
                    }
                }
                Attribute newAtt = new Attribute(getInputFormat().attribute(i).name(), attribValues);
                newAtt.setWeight(getInputFormat().attribute(i).weight());
                attributes.add(newAtt);
            } else {
                if (cutPoints == null) {
                    ArrayList<String> attribValues = new ArrayList<String>(1);
                    attribValues.add("'All'");
                    Attribute newAtt = new Attribute(getInputFormat().attribute(i).name(), attribValues);
                    newAtt.setWeight(getInputFormat().attribute(i).weight());
                    attributes.add(newAtt);
                } else {
                    if (i < getInputFormat().classIndex()) {
                        classIndex += cutPoints.length - 1;
                    }
                    for (int j = 0, n = cutPoints.length; j < n; ++j) {
                        ArrayList<String> attribValues = new ArrayList<String>(2);
                        if (m_UseBinNumbers) {
                            attribValues.add("'B1of2'");
                            attribValues.add("'B2of2'");
                        } else {
                            double[] binaryCutPoint = { cutPoints[j] };
                            String newBinRangeString1 = binRangeString(binaryCutPoint, 0, m_BinRangePrecision);
                            String newBinRangeString2 = binRangeString(binaryCutPoint, 1, m_BinRangePrecision);
                            if (newBinRangeString1.equals(newBinRangeString2)) {
                                throw new IllegalArgumentException("A duplicate bin range was detected. Try increasing the bin range precision.");
                            }
                            attribValues.add("'" + newBinRangeString1 + "'");
                            attribValues.add("'" + newBinRangeString2 + "'");
                        }
                        Attribute newAtt = new Attribute(getInputFormat().attribute(i).name() + "_" + (j + 1), attribValues);
                        if (getSpreadAttributeWeight()) {
                            newAtt.setWeight(getInputFormat().attribute(i).weight() / cutPoints.length);
                        } else {
                            newAtt.setWeight(getInputFormat().attribute(i).weight());
                        }
                        attributes.add(newAtt);
                    }
                }
            }
        } else {
            attributes.add((Attribute) getInputFormat().attribute(i).copy());
        }
    }
    Instances outputFormat = new Instances(getInputFormat().relationName(), attributes, 0);
    outputFormat.setClassIndex(classIndex);
    setOutputFormat(outputFormat);
}
