@Override
protected Instances determineOutputFormat(Instances inputFormat) throws Exception {
    if (m_excludeNominalAttributes && m_excludeNumericAttributes) {
        throw new Exception("No transformation will be done if both nominal and " + "numeric attributes are excluded!");
    }
    if (m_remove == null) {
        List<Integer> attsToExclude = new ArrayList<Integer>();
        if (m_excludeNumericAttributes) {
            for (int i = 0; i < inputFormat.numAttributes(); i++) {
                if (inputFormat.attribute(i).isNumeric() && i != inputFormat.classIndex()) {
                    attsToExclude.add(i);
                }
            }
        }
        if (m_excludeNominalAttributes || m_nominalConversionThreshold > 1) {
            for (int i = 0; i < inputFormat.numAttributes(); i++) {
                if (inputFormat.attribute(i).isNominal() && i != inputFormat.classIndex()) {
                    if (m_excludeNominalAttributes || inputFormat.attribute(i).numValues() < m_nominalConversionThreshold) {
                        attsToExclude.add(i);
                    }
                }
            }
        }
        if (attsToExclude.size() > 0) {
            int[] r = new int[attsToExclude.size()];
            for (int i = 0; i < attsToExclude.size(); i++) {
                r[i] = attsToExclude.get(i);
            }
            m_remove = new Remove();
            m_remove.setAttributeIndicesArray(r);
            m_remove.setInputFormat(inputFormat);
            Remove forRetaining = new Remove();
            forRetaining.setAttributeIndicesArray(r);
            forRetaining.setInvertSelection(true);
            forRetaining.setInputFormat(inputFormat);
            m_unchanged = Filter.useFilter(inputFormat, forRetaining);
        }
    }
    ArrayList<Attribute> atts = new ArrayList<Attribute>();
    for (int i = 0; i < inputFormat.numAttributes(); i++) {
        if (i != inputFormat.classIndex()) {
            if (m_unchanged != null && m_unchanged.attribute(inputFormat.attribute(i).name()) != null) {
                atts.add((Attribute) m_unchanged.attribute(inputFormat.attribute(i).name()).copy());
                continue;
            }
            for (int j = 0; j < inputFormat.classAttribute().numValues(); j++) {
                String name = "pr_" + inputFormat.attribute(i).name() + "|" + inputFormat.classAttribute().value(j);
                Attribute a = new Attribute(name);
                if (getSpreadAttributeWeight()) {
                    a.setWeight(inputFormat.attribute(i).weight() / inputFormat.classAttribute().numValues());
                } else {
                    a.setWeight(inputFormat.attribute(i).weight());
                }
                atts.add(a);
            }
        }
    }
    atts.add((Attribute) inputFormat.classAttribute().copy());
    Instances data = new Instances(inputFormat.relationName(), atts, 0);
    data.setClassIndex(data.numAttributes() - 1);
    return data;
}
