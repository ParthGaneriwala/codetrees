protected void processPackage(HierarchyPropertyParser hpp, DefaultMutableTreeNode parentFolder, WekaAlgorithmWrapper wrapper) throws Exception {
    String[] primaryPackages = hpp.childrenValues();
    for (String primaryPackage : primaryPackages) {
        hpp.goToChild(primaryPackage);
        if (hpp.isLeafReached()) {
            String algName = hpp.fullValue();
            Object wrappedA = // Beans.instantiate(this.getClass().getClassLoader(), algName);
            WekaPackageClassLoaderManager.objectForName(algName);
            if (wrappedA.getClass().getAnnotation(StepTreeIgnore.class) == null && wrappedA.getClass().getAnnotation(weka.gui.beans.KFIgnore.class) == null) {
                WekaAlgorithmWrapper wrapperCopy = /*
           * (WekaAlgorithmWrapper) Beans.instantiate(this.getClass()
           * .getClassLoader(), wrapper.getClass().getCanonicalName());
           */
                (WekaAlgorithmWrapper) wrapper.getClass().newInstance();
                wrapperCopy.setWrappedAlgorithm(wrappedA);
                StepTreeLeafDetails leafData = new StepTreeLeafDetails(wrapperCopy);
                DefaultMutableTreeNode wrapperLeafNode = new InvisibleNode(leafData);
                parentFolder.add(wrapperLeafNode);
                String tipText = leafData.getToolTipText() != null ? leafData.getToolTipText() : "";
                m_nodeTextIndex.put(algName.toLowerCase() + " " + tipText, wrapperLeafNode);
            }
            hpp.goToParent();
        } else {
            DefaultMutableTreeNode firstLevelOfMainAlgoType = new InvisibleNode(primaryPackage);
            parentFolder.add(firstLevelOfMainAlgoType);
            processPackage(hpp, firstLevelOfMainAlgoType, wrapper);
            hpp.goToParent();
        }
    }
}
