@Override
public Void doInBackground() {
    m_installing = true;
    m_installBut.setEnabled(false);
    m_uninstallBut.setEnabled(false);
    m_refreshCacheBut.setEnabled(false);
    m_toggleLoad.setEnabled(false);
    m_unofficialBut.setEnabled(false);
    m_availableBut.setEnabled(false);
    m_allBut.setEnabled(false);
    m_installedBut.setEnabled(false);
    ProgressPrintStream pps = new ProgressPrintStream(this);
    m_progress.setMaximum(30);
    Package installedPackage = null;
    String toInstall = m_target;
    try {
        toInstall = Environment.getSystemWide().substitute(m_target);
    } catch (Exception ex) {
    }
    try {
        if (toInstall.toLowerCase().startsWith("http://") || toInstall.toLowerCase().startsWith("https://")) {
            String packageName = WekaPackageManager.installPackageFromURL(new URL(toInstall), pps);
            installedPackage = WekaPackageManager.getInstalledPackageInfo(packageName);
        } else if (toInstall.toLowerCase().endsWith(".zip")) {
            String packageName = WekaPackageManager.installPackageFromArchive(toInstall, pps);
            installedPackage = WekaPackageManager.getInstalledPackageInfo(packageName);
        } else {
            displayErrorDialog("Unable to install package " + "\nfrom " + toInstall + ". Unrecognized as a URL or zip archive.", (String) null);
            m_errorOccurred = true;
            pps.close();
            return null;
        }
    } catch (Exception ex) {
        displayErrorDialog("Unable to install package " + "\nfrom " + m_target + ". Check the log for error messages.", ex);
        m_errorOccurred = true;
        return null;
    }
    if (installedPackage != null) {
        if (!Utils.getDontShowDialog("weka.gui.PackageManager.RestartAfterUpgrade")) {
            JCheckBox dontShow = new JCheckBox("Do not show this message again");
            Object[] stuff = new Object[2];
            stuff[0] = "Weka will need to be restared after installation for\n" + "the changes to come into effect.\n";
            stuff[1] = dontShow;
            JOptionPane.showMessageDialog(PackageManager.this, stuff, "Weka Package Manager", JOptionPane.OK_OPTION);
            if (dontShow.isSelected()) {
                try {
                    Utils.setDontShowDialog("weka.gui.PackageManager.RestartAfterUpgrade");
                } catch (Exception ex) {
                // quietly ignore
                }
            }
        }
        try {
            File packageRoot = new File(WekaPackageManager.getPackageHome() + File.separator + installedPackage.getName());
            boolean loadCheck = // WekaPackageManager.loadCheck(installedPackage, packageRoot, pps);
            WekaPackageManager.hasBeenLoaded(installedPackage);
            if (!loadCheck) {
                displayErrorDialog("Package was installed correctly but could not " + "be loaded. Check log for details", (String) null);
            }
        } catch (Exception ex) {
            displayErrorDialog("Unable to install package " + "\nfrom " + m_target + ".", ex);
            m_errorOccurred = true;
        }
    // since we can't determine whether an unofficial package is installed
    // already before performing the install/upgrade (due to the fact that
    // the package name isn't known until the archive is unpacked) we will
    // not refresh the GOE properties and make the user restart Weka in
    // order
    // to be safe and avoid any conflicts between old and new versions of
    // classes
    // for this package
    // WekaPackageManager.refreshGOEProperties();
    }
    return null;
}
