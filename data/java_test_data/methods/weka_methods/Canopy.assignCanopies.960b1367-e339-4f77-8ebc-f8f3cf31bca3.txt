public long[] assignCanopies(Instance inst) throws Exception {
    if (m_missingValuesReplacer != null) {
        m_missingValuesReplacer.input(inst);
        inst = m_missingValuesReplacer.output();
    }
    int numLongs = m_canopies.size() / 64 + 1;
    long[] assigned = new long[numLongs];
    double minDist = Double.MAX_VALUE;
    double bitsSet = 0;
    int index = -1;
    for (int i = 0; i < m_canopies.numInstances(); i++) {
        double dist = m_distanceFunction.distance(inst, m_canopies.instance(i));
        if (dist < minDist) {
            minDist = dist;
            index = i;
        }
        if (dist < m_t1) {
            updateCanopyAssignment(assigned, i);
            bitsSet++;
        // assigned.add(i);
        }
    }
    // naturally according to the t2 radius
    if (bitsSet == 0) {
        // add the closest canopy
        updateCanopyAssignment(assigned, index);
    }
    return assigned;
}
