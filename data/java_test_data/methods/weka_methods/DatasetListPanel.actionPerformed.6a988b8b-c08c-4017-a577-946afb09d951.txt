@Override
public void actionPerformed(ActionEvent e) {
    boolean useRelativePaths = m_relativeCheck.isSelected();
    if (e.getSource() == m_AddBut) {
        // Let the user select an arff file from a file chooser
        int returnVal = m_FileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            if (m_FileChooser.isMultiSelectionEnabled()) {
                File[] selected = m_FileChooser.getSelectedFiles();
                for (File element : selected) {
                    if (element.isDirectory()) {
                        Vector<File> files = new Vector<File>();
                        getFilesRecursively(element, files);
                        // sort the result
                        Collections.sort(files);
                        for (int j = 0; j < files.size(); j++) {
                            File temp = files.elementAt(j);
                            if (useRelativePaths) {
                                try {
                                    temp = Utils.convertToRelativePath(temp);
                                } catch (Exception ex) {
                                    ex.printStackTrace();
                                }
                            }
                            m_Exp.getDatasets().addElement(temp);
                        }
                    } else {
                        File temp = element;
                        if (useRelativePaths) {
                            try {
                                temp = Utils.convertToRelativePath(temp);
                            } catch (Exception ex) {
                                ex.printStackTrace();
                            }
                        }
                        m_Exp.getDatasets().addElement(temp);
                    }
                }
                setButtons(null);
            } else {
                if (m_FileChooser.getSelectedFile().isDirectory()) {
                    Vector<File> files = new Vector<File>();
                    getFilesRecursively(m_FileChooser.getSelectedFile(), files);
                    // sort the result
                    Collections.sort(files);
                    for (int j = 0; j < files.size(); j++) {
                        File temp = files.elementAt(j);
                        if (useRelativePaths) {
                            try {
                                temp = Utils.convertToRelativePath(temp);
                            } catch (Exception ex) {
                                ex.printStackTrace();
                            }
                        }
                        m_Exp.getDatasets().addElement(temp);
                    }
                } else {
                    File temp = m_FileChooser.getSelectedFile();
                    if (useRelativePaths) {
                        try {
                            temp = Utils.convertToRelativePath(temp);
                        } catch (Exception ex) {
                            ex.printStackTrace();
                        }
                    }
                    m_Exp.getDatasets().addElement(temp);
                }
                setButtons(null);
            }
        }
    } else if (e.getSource() == m_DeleteBut) {
        // Delete the selected files
        int[] selected = m_List.getSelectedIndices();
        if (selected != null) {
            for (int i = selected.length - 1; i >= 0; i--) {
                int current = selected[i];
                m_Exp.getDatasets().removeElementAt(current);
                if (m_Exp.getDatasets().size() > current) {
                    m_List.setSelectedIndex(current);
                } else {
                    m_List.setSelectedIndex(current - 1);
                }
            }
        }
        setButtons(null);
    } else if (e.getSource() == m_EditBut) {
        // Delete the selected files
        int selected = m_List.getSelectedIndex();
        if (selected != -1) {
            ViewerDialog dialog = new ViewerDialog(null);
            String filename = m_List.getSelectedValue().toString();
            int result;
            try {
                DataSource source = new DataSource(filename);
                result = dialog.showDialog(source.getDataSet());
                // nasty workaround for Windows regarding locked files:
                // if file Reader in Loader is not closed explicitly, we cannot
                // overwrite the file.
                source = null;
                System.gc();
                // workaround end
                if ((result == ViewerDialog.APPROVE_OPTION) && (dialog.isChanged())) {
                    result = JOptionPane.showConfirmDialog(this, "File was modified - save changes?");
                    if (result == JOptionPane.YES_OPTION) {
                        Saver saver = ConverterUtils.getSaverForFile(filename);
                        saver.setFile(new File(filename));
                        saver.setInstances(dialog.getInstances());
                        saver.writeBatch();
                    }
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Error loading file '" + filename + "':\n" + ex.toString(), "Error loading file", JOptionPane.INFORMATION_MESSAGE);
            }
        }
        setButtons(null);
    } else if (e.getSource() == m_UpBut) {
        JListHelper.moveUp(m_List);
    } else if (e.getSource() == m_DownBut) {
        JListHelper.moveDown(m_List);
    }
}
