public static List<Package> getAvailableCompatiblePackages() throws Exception {
    // List<Package> allAvail = getAvailablePackages();
    List<Package> allAvail = getAllPackages();
    List<Package> compatible = new ArrayList<Package>();
    for (Package p : allAvail) {
        List<Object> availableVersions = PACKAGE_MANAGER.getRepositoryPackageVersions(p.getName());
        // version
        for (Object version : availableVersions) {
            Package versionedPackage = getRepositoryPackageInfo(p.getName(), version.toString());
            if (versionedPackage.isCompatibleBaseSystem()) {
                if (p.isInstalled()) {
                    // see if the latest compatible version is newer than the installed
                    // version
                    Package installed = getInstalledPackageInfo(p.getName());
                    String installedV = installed.getPackageMetaDataElement(VersionPackageConstraint.VERSION_KEY).toString();
                    String versionedV = versionedPackage.getPackageMetaDataElement(VersionPackageConstraint.VERSION_KEY).toString();
                    VersionPackageConstraint.VersionComparison v = VersionPackageConstraint.compare(versionedV, installedV);
                    if (v == VersionPackageConstraint.VersionComparison.GREATERTHAN) {
                        compatible.add(versionedPackage);
                    }
                } else {
                    compatible.add(versionedPackage);
                }
                break;
            }
        }
    }
    return compatible;
}
