protected void processStreaming(Data data) throws WekaException {
    if (isStopRequested()) {
        return;
    }
    Instance inst = (Instance) data.getPayloadElement(StepManager.CON_INSTANCE);
    if (getStepManager().isStreamFinished(data)) {
        // finished
        if (m_trainedClassifier instanceof UpdateableBatchProcessor) {
            try {
                ((UpdateableBatchProcessor) m_trainedClassifier).batchFinished();
            } catch (Exception ex) {
                throw new WekaException(ex);
            }
        }
        // notify any downstream steps consuming incremental classifier
        // data that the stream has finished
        m_incrementalData.setPayloadElement(StepManager.CON_INCREMENTAL_CLASSIFIER, m_trainedClassifier);
        m_incrementalData.setPayloadElement(StepManager.CON_AUX_DATA_TEST_INSTANCE, null);
        // getStepManager().outputData(m_incrementalData);
        outputTextData(m_trainedClassifier, -1);
        outputGraphData(m_trainedClassifier, 0);
        if (!isStopRequested()) {
            getStepManager().throughputFinished(m_incrementalData);
        }
        return;
    }
    // test on the instance
    m_incrementalData.setPayloadElement(StepManager.CON_AUX_DATA_TEST_INSTANCE, inst);
    m_incrementalData.setPayloadElement(StepManager.CON_INCREMENTAL_CLASSIFIER, m_trainedClassifier);
    getStepManager().outputData(m_incrementalData.getConnectionName(), m_incrementalData);
    // train on the instance?
    getStepManager().throughputUpdateStart();
    if (m_classifierIsIncremental && m_updateIncrementalClassifier) {
        if (!inst.classIsMissing()) {
            try {
                ((UpdateableClassifier) m_trainedClassifier).updateClassifier(inst);
            } catch (Exception ex) {
                throw new WekaException(ex);
            }
        }
    }
    getStepManager().throughputUpdateEnd();
}
