public double[][] estimatePooled(double[][][] observations, double[][] weights) {
    // Establish number of attributes and number of classes
    int m = -1;
    int c = observations.length;
    for (int i = 0; i < observations.length; i++) {
        if (observations[i].length > 0) {
            m = observations[i][0].length;
        }
    }
    if (m == -1) {
        throw new IllegalArgumentException("Cannot compute pooled estimates with no data.");
    }
    // Compute per-group covariance matrices and mean vectors
    Matrix[] groupCovariance = new Matrix[c];
    DenseVector[] groupMean = new DenseVector[c];
    double[] groupWeights = new double[c];
    for (int i = 0; i < groupCovariance.length; i++) {
        if (observations[i].length > 0) {
            DenseVector weightVector = new DenseVector(weights[i]);
            weightVector = weightVector.scale(1.0 / weightVector.norm(Vector.Norm.One));
            groupMean[i] = weightedMean(observations[i], weightVector);
            groupCovariance[i] = weightedCovariance(observations[i], weightVector, groupMean[i]);
            groupWeights[i] = Utils.sum(weights[i]);
        }
    }
    Utils.normalize(groupWeights);
    // Pool covariance matrices and means
    double[][] means = new double[c][];
    Matrix cov = new UpperSPDDenseMatrix(m);
    mean = new DenseVector(groupMean[0].size());
    for (int i = 0; i < c; i++) {
        if (observations[i].length > 0) {
            cov = cov.add(groupWeights[i], groupCovariance[i]);
            mean = (DenseVector) mean.add(groupWeights[i], groupMean[i]);
            means[i] = groupMean[i].getData();
        }
    }
    // Compute inverse of covariance matrix
    DenseCholesky chol = new DenseCholesky(m, true).factor((UpperSPDDenseMatrix) cov);
    covarianceInverse = new UpperSPDDenseMatrix(chol.solve(Matrices.identity(m)));
    double logDeterminant = 0;
    for (int i = 0; i < m; i++) {
        logDeterminant += Math.log(chol.getU().get(i, i));
    }
    logDeterminant *= 2;
    lnconstant = -(Log2PI * m + logDeterminant) * 0.5;
    return means;
}
