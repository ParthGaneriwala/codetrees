@Override
public Enumeration<Option> listOptions() {
    Vector<Option> newVector = new Vector<Option>(7);
    newVector.addElement(new Option("\tIf set, average estimate is used rather " + "than one estimate from pooled predictions.", "A", 0, "-A"));
    newVector.addElement(new Option("\t" + lookAheadIterationsTipText() + "\n" + "\t(default 50)", "L", 1, "-L <num>"));
    newVector.addElement(new Option("\t" + poolSizeTipText() + "\n\t(default 1)", "P", 1, "-P <int>"));
    newVector.addElement(new Option("\t" + numThreadsTipText() + "\n" + "\t(default 1)", "E", 1, "-E <int>"));
    newVector.addElement(new Option("\t" + stepSizeTipText() + "\n" + "\t(default 1)", "I", 1, "-I <num>"));
    newVector.addElement(new Option("\tNumber of folds for cross-validation.\n" + "\t(default 10)", "F", 1, "-F <num>"));
    newVector.addElement(new Option("\tNumber of runs for cross-validation.\n" + "\t(default 1)", "R", 1, "-R <num>"));
    newVector.addElement(new Option("\tThe percentage of data to be used for training (if 0, k-fold " + "cross-validation is used)\n" + "\t(default 0)", "percentage", 1, "-percentage <num>"));
    newVector.addElement(new Option("\tWhether to preserve order when a percentage split evaluation " + "is performed.", "order", 0, "-order"));
    newVector.addElement(new Option("\tFull name of base classifier.\n" + "\t(default: " + defaultIterativeClassifierString() + ")", "W", 1, "-W"));
    List<String> metrics = EvaluationMetricHelper.getAllMetricNames();
    StringBuilder b = new StringBuilder();
    int length = 0;
    for (String m : metrics) {
        b.append(m.toLowerCase()).append(",");
        length += m.length();
        if (length >= 60) {
            b.append("\n\t");
            length = 0;
        }
    }
    newVector.addElement(new Option("\tEvaluation metric to optimise (default rmse). Available metrics:\n\t" + b.substring(0, b.length() - 1), "metric", 1, "-metric <name>"));
    newVector.addElement(new Option("\tClass value index to optimise. Ignored for all but information-retrieval\n\t" + "type metrics (such as roc area). If unspecified (or a negative value is supplied),\n\t" + "and an information-retrieval metric is specified, then the class-weighted average\n\t" + "metric used. (default -1)", "class-value-index", 1, "-class-value-index <0-based index>"));
    newVector.addAll(Collections.list(super.listOptions()));
    newVector.addElement(new Option("", "", 0, "\nOptions specific to classifier " + m_IterativeClassifier.getClass().getName() + ":"));
    newVector.addAll(Collections.list(((OptionHandler) m_IterativeClassifier).listOptions()));
    return newVector.elements();
}
