/**
 * This methods sorts the vertices in level[] according to their barycenters
 * in BC[], using combsort11. It, however, doesn't touch the vertices with
 * barycenter equal to zero.
 */
/*
   * //This method should be removed protected static void combSort11(int
   * level[], float BC[]) { int switches, j, top, gap, lhold; float hold; gap =
   * BC.length; do { gap=(int)(gap/1.3); switch(gap) { case 0: gap = 1; break;
   * case 9: case 10: gap=11; break; default: break; } switches=0; top =
   * BC.length-gap; for(int i=0; i<top; i++) { j=i+gap; if(BC[i]==0 || BC[j]==0)
   * continue; if(BC[i] > BC[j]) { hold=BC[i]; BC[i]=BC[j]; BC[j]=hold; lhold =
   * level[i]; level[i] = level[j]; level[j] = lhold; switches++; }//endif
   * }//endfor }while(switches>0 || gap>1); }
   */
/**
 * This methods sorts the vertices in level[] according to their barycenters
 * in BC[], using insertion sort. It, however, doesn't touch the vertices with
 * barycenter equal to zero.
 */
protected static void isort(int[] level, float[] BC) {
    float temp;
    int temp2;
    for (int i = 0; i < BC.length - 1; i++) {
        int j = i;
        temp = BC[j + 1];
        temp2 = level[j + 1];
        if (temp == 0) {
            continue;
        }
        int prej = j + 1;
        while (j > -1 && (temp < BC[j] || BC[j] == 0)) {
            if (BC[j] == 0) {
                j--;
                continue;
            } else {
                BC[prej] = BC[j];
                level[prej] = level[j];
                prej = j;
                j--;
            }
        }
        // j++;
        BC[prej] = temp;
        level[prej] = temp2;
    // Integer node = (Integer)level.get(i+1);
    // level.remove(i+1);
    // level.insertElementAt(node, prej);
    }
}
