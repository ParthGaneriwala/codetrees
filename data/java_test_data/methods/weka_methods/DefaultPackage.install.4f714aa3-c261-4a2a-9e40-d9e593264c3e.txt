/**
 * Returns true if this package is good to go with the current version of the
 * software and versions of any installed packages that it depends on.
 *
 * @return true if this package is good to go.
 * @throws Exception if a problem occurs while checking compatibility.
 */
/*
   * public boolean isCompatible() throws Exception { // TODO rewrite this to
   * make use of getIncompatibleDependencies() // and getMissingDependencies()
   * (IF this package is installed)
   * 
   * // MIGHT just rename this method to isCompatibleWithBaseSystem
   * 
   * boolean ok = isCompatibleBaseSystem();
   * 
   * if (ok) { // check for any incompatible dependencies List<Dependency>
   * incompatible = getIncompatibleDependencies(); if (incompatible.size() > 0)
   * { ok = false; } }
   * 
   * if (ok && isInstalled()) { // first check to see if the installed version
   * is the same as us Package installedVersion =
   * m_packageManager.getInstalledPackageInfo
   * (getPackageMetaDataElement("PackageName").toString()); String
   * installedVersionS =
   * installedVersion.getPackageMetaDataElement("Version").toString(); String
   * thisVersionS = getPackageMetaDataElement("Version").toString();
   * 
   * if (VersionPackageConstraint.compare(thisVersionS, installedVersionS) ==
   * VersionPackageConstraint.VersionComparison.EQUAL) { // if equal to the
   * installed version then check to see if any dependencies are // missing. If
   * not equal to the installed version then just assume that we // we be
   * overwriting the installed version and any missing dependencies will // be
   * downloaded during the install. List<Dependency> missing =
   * getMissingDependencies(); if (missing.size() > 0) { ok = false; } } }
   * 
   * return ok; }
   */
@Override
public void install() throws Exception {
    URL packageURL = getPackageURL();
    m_packageManager.installPackageFromURL(packageURL);
}
