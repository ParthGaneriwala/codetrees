protected static void addLoader(String propName, weka.core.converters.Loader loader, JSONNode json) {
    JSONNode loaderNode = json.addObject(propName);
    loaderNode.addPrimitive("type", LOADER);
    loaderNode.addPrimitive("class", loader.getClass().getCanonicalName());
    File file = null;
    if (loader instanceof weka.core.converters.AbstractFileLoader) {
        file = ((weka.core.converters.AbstractFileLoader) loader).retrieveFile();
    }
    Boolean relativeB = null;
    if (loader instanceof weka.core.converters.FileSourcedConverter) {
        relativeB = ((weka.core.converters.FileSourcedConverter) loader).getUseRelativePath();
    }
    if (file != null && !file.isDirectory()) {
        String withResourceSeparators = file.getPath().replace(File.pathSeparatorChar, '/');
        boolean notAbsolute = (((weka.core.converters.AbstractFileLoader) loader).getUseRelativePath() || (loader instanceof EnvironmentHandler && Environment.containsEnvVariables(file.getPath())) || JSONFlowUtils.class.getClassLoader().getResource(withResourceSeparators) != null || !file.exists());
        String path = (notAbsolute) ? file.getPath() : file.getAbsolutePath();
        // Replace any windows file separators with forward slashes (Java under
        // windows can
        // read paths with forward slashes (apparantly)
        path = path.replace('\\', '/');
        loaderNode.addPrimitive("filePath", path);
    } else {
        loaderNode.addPrimitive("filePath", "");
    }
    if (relativeB != null) {
        loaderNode.addPrimitive("useRelativePath", relativeB);
    }
    if (loader instanceof OptionHandler) {
        String optsString = Utils.joinOptions(((OptionHandler) loader).getOptions());
        loaderNode.addPrimitive(OPTIONS, optsString);
    }
}
