private Instance generateExample(Instances format, Random randomG, SubspaceClusterDefinition cl, String cName) {
    boolean makeInteger = cl.isInteger();
    int num = -1;
    int numAtts = m_NumAttributes;
    if (getClassFlag()) {
        numAtts++;
    }
    double[] values = new double[numAtts];
    boolean[] attributes = cl.getAttributes();
    double[] minValue = cl.getMinValue();
    double[] maxValue = cl.getMaxValue();
    double value;
    int clusterI = -1;
    for (int i = 0; i < m_NumAttributes; i++) {
        if (attributes[i]) {
            clusterI++;
            num++;
            // boolean or nominal attribute
            if (isBoolean(i) || isNominal(i)) {
                if (minValue[clusterI] == maxValue[clusterI]) {
                    value = minValue[clusterI];
                } else {
                    int numValues = (int) (maxValue[clusterI] - minValue[clusterI] + 1.0);
                    value = randomG.nextInt(numValues);
                    value += minValue[clusterI];
                }
            } else {
                // numeric attribute
                value = randomG.nextDouble() * (maxValue[num] - minValue[num]) + minValue[num];
                if (makeInteger) {
                    value = Math.round(value);
                }
            }
            values[i] = value;
        } else {
            values[i] = Utils.missingValue();
        }
    }
    if (getClassFlag()) {
        values[format.classIndex()] = format.classAttribute().indexOfValue(cName);
    }
    DenseInstance example = new DenseInstance(1.0, values);
    example.setDataset(format);
    return example;
}
