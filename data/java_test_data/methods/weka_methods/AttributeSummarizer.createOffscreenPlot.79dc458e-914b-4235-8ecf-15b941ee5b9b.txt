protected void createOffscreenPlot(Data data) {
    List<Instances> offscreenPlotData = new ArrayList<Instances>();
    Instances predictedI = data.getPrimaryPayload();
    boolean colorSpecified = false;
    String additional = m_additionalOptions;
    if (m_additionalOptions.length() > 0) {
        additional = environmentSubstitute(additional);
    }
    if (!additional.contains("-color") && m_offscreenRendererName.contains("Weka Chart Renderer")) {
        // for WekaOffscreenChartRenderer only
        if (additional.length() > 0) {
            additional += ",";
        }
        if (predictedI.classIndex() >= 0) {
            additional += "-color=" + predictedI.classAttribute().name();
        } else {
            additional += "-color=/last";
        }
    } else {
        colorSpecified = true;
    }
    if (predictedI.classIndex() >= 0 && predictedI.classAttribute().isNominal() && !colorSpecified) {
        // set up multiple series - one for each class
        Instances[] classes = new Instances[predictedI.numClasses()];
        for (int i = 0; i < predictedI.numClasses(); i++) {
            classes[i] = new Instances(predictedI, 0);
            classes[i].setRelationName(predictedI.classAttribute().value(i));
        }
        for (int i = 0; i < predictedI.numInstances(); i++) {
            Instance current = predictedI.instance(i);
            classes[(int) current.classValue()].add((Instance) current.copy());
        }
        for (Instances classe : classes) {
            offscreenPlotData.add(classe);
        }
    } else {
        offscreenPlotData.add(new Instances(predictedI));
    }
    List<String> options = new ArrayList<String>();
    String[] optionsParts = additional.split(",");
    for (String p : optionsParts) {
        options.add(p.trim());
    }
    // only need the x-axis (used to specify the attribute to plot)
    String xAxis = m_xAxis;
    xAxis = environmentSubstitute(xAxis);
    String width = m_width;
    String height = m_height;
    int defWidth = 500;
    int defHeight = 400;
    width = environmentSubstitute(width);
    height = environmentSubstitute(height);
    defWidth = Integer.parseInt(width);
    defHeight = Integer.parseInt(height);
    try {
        getStepManager().logDetailed("Creating image");
        BufferedImage osi = m_offscreenRenderer.renderHistogram(defWidth, defHeight, offscreenPlotData, xAxis, options);
        Data imageData = new Data(StepManager.CON_IMAGE, osi);
        String relationName = predictedI.relationName();
        if (relationName.length() > 10) {
            relationName = relationName.substring(0, 10);
        }
        imageData.setPayloadElement(StepManager.CON_AUX_DATA_TEXT_TITLE, relationName + ":" + m_xAxis);
        getStepManager().outputData(imageData);
    } catch (Exception e1) {
        e1.printStackTrace();
    }
}
