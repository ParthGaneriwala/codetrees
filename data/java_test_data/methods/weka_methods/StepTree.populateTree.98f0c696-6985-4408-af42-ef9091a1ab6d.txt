protected void populateTree(DefaultMutableTreeNode jtreeRoot) throws Exception {
    Properties GOEProps = initGOEProps();
    // builtin steps don't get added to the plugin manager because,
    // due to the package loading process, they would get added after
    // any plugin steps. This would stuff up the ordering we want in
    // the design palette
    InputStream inputStream = getClass().getClassLoader().getResourceAsStream(STEP_LIST_PROPS);
    Properties builtinSteps = new Properties();
    builtinSteps.load(inputStream);
    inputStream.close();
    inputStream = null;
    String stepClassNames = builtinSteps.getProperty("weka.knowledgeflow.steps.Step");
    String[] s = stepClassNames.split(",");
    Set<String> stepImpls = new LinkedHashSet<String>();
    stepImpls.addAll(Arrays.asList(s));
    populateTree(stepImpls, jtreeRoot, GOEProps);
    // get any plugin steps here
    Set<String> stepClasses = PluginManager.getPluginNamesOfType("weka.knowledgeflow.steps.Step");
    if (stepClasses != null && stepClasses.size() > 0) {
        // filtering here because the LegacyFlowLoader adds all builtin
        // steps to the PluginManager. This is really only necessary if
        // a KnowledgeFlowApp is constructed a second time, as the first
        // time round StepTree gets constructed before the LegacyFlowLoader
        // class gets loaded into the classpath (and thus populates the
        // PluginManager). We can remove this filtering when LegacyFlowLoader
        // is no longer needed.
        Set<String> filteredStepClasses = new LinkedHashSet<String>();
        for (String plugin : stepClasses) {
            if (!stepClassNames.contains(plugin)) {
                filteredStepClasses.add(plugin);
            }
        }
        populateTree(filteredStepClasses, jtreeRoot, GOEProps);
    }
}
