@Override
public void buildEvaluator(Instances data) throws Exception {
    // can evaluator handle data?
    getCapabilities().testWithFail(data);
    m_numEntries = 0;
    m_numFilled = new AtomicInteger();
    m_trainInstances = new Instances(data);
    m_trainInstances.deleteWithMissingClass();
    m_classIndex = m_trainInstances.classIndex();
    m_numAttribs = m_trainInstances.numAttributes();
    m_numInstances = m_trainInstances.numInstances();
    m_isNumeric = m_trainInstances.attribute(m_classIndex).isNumeric();
    if (!m_isNumeric) {
        m_disTransform = new Discretize();
        m_disTransform.setUseBetterEncoding(true);
        m_disTransform.setInputFormat(m_trainInstances);
        m_trainInstances = Filter.useFilter(m_trainInstances, m_disTransform);
        if (m_debug) {
            System.err.println("Finished discretizing input data");
        }
    }
    m_std_devs = new double[m_numAttribs];
    m_corr_matrix = new float[m_numAttribs][];
    for (int i = 0; i < m_numAttribs; i++) {
        m_corr_matrix[i] = new float[i + 1];
        m_numEntries += (i + 1);
    }
    m_numEntries -= m_numAttribs;
    for (int i = 0; i < m_corr_matrix.length; i++) {
        m_corr_matrix[i][i] = 1.0f;
        m_std_devs[i] = 1.0;
    }
    for (int i = 0; i < m_numAttribs; i++) {
        for (int j = 0; j < m_corr_matrix[i].length - 1; j++) {
            m_corr_matrix[i][j] = -999;
        }
    }
    if (m_preComputeCorrelationMatrix && m_poolSize > 1) {
        m_pool = Executors.newFixedThreadPool(m_poolSize);
        Set<Future<Void>> results = new HashSet<Future<Void>>();
        int numEntriesPerThread = (m_numEntries + m_numAttribs) / m_numThreads;
        numEntriesPerThread = numEntriesPerThread < 1 ? 1 : numEntriesPerThread;
        int startRow = 0;
        int startCol = 0;
        int count = 0;
        for (int i = 0; i < m_corr_matrix.length; i++) {
            for (int j = 0; j < m_corr_matrix[i].length; j++) {
                count++;
                if (count == numEntriesPerThread || (i == m_corr_matrix.length - 1 && j == m_corr_matrix[i].length - 1)) {
                    final int sR = startRow;
                    final int sC = startCol;
                    final int eR = i;
                    final int eC = j;
                    startRow = i;
                    startCol = j;
                    count = 0;
                    Future<Void> future = m_pool.submit(new Callable<Void>() {

                        @Override
                        public Void call() throws Exception {
                            if (m_debug) {
                                System.err.println("Starting correlation computation task...");
                            }
                            for (int i = sR; i <= eR; i++) {
                                for (int j = (i == sR ? sC : 0); j < (i == eR ? eC : m_corr_matrix[i].length); j++) {
                                    if (m_corr_matrix[i][j] == -999) {
                                        float corr = correlate(i, j);
                                        m_corr_matrix[i][j] = corr;
                                    }
                                }
                            }
                            if (m_debug) {
                                System.err.println("Percentage of correlation matrix computed: " + Utils.doubleToString(((double) m_numFilled.get() / m_numEntries * 100.0), 2) + "%");
                            }
                            return null;
                        }
                    });
                    results.add(future);
                }
            }
        }
        for (Future<Void> f : results) {
            f.get();
        }
        // shut down the thread pool
        m_pool.shutdown();
    }
}
