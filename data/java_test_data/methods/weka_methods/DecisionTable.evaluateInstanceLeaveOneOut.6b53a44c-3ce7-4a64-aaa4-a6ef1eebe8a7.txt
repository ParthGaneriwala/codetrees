protected double evaluateInstanceLeaveOneOut(Instance instance, double[] instA) throws Exception {
    // System.err.println("---------------- superclass leave-one-out ------------");
    DecisionTableHashKey thekey;
    double[] tempDist;
    double[] normDist;
    thekey = new DecisionTableHashKey(instA);
    if (m_classIsNominal) {
        // if this one is not in the table
        if ((tempDist = m_entries.get(thekey)) == null) {
            throw new Error("This should never happen!");
        } else {
            normDist = new double[tempDist.length];
            System.arraycopy(tempDist, 0, normDist, 0, tempDist.length);
            normDist[(int) instance.classValue()] -= instance.weight();
            // update the table
            // first check to see if the class counts are all zero now
            boolean ok = false;
            for (double element : normDist) {
                if (Utils.gr(element, 1.0)) {
                    ok = true;
                    break;
                }
            }
            // downdate the class prior counts
            m_classPriorCounts[(int) instance.classValue()] -= instance.weight();
            double[] classPriors = m_classPriorCounts.clone();
            Utils.normalize(classPriors);
            if (!ok) {
                // majority class
                normDist = classPriors;
            }
            m_classPriorCounts[(int) instance.classValue()] += instance.weight();
            // if (ok) {
            Utils.normalize(normDist);
            if (m_evaluationMeasure == EVAL_AUC) {
                m_evaluation.evaluateModelOnceAndRecordPrediction(normDist, instance);
            } else {
                m_evaluation.evaluateModelOnce(normDist, instance);
            }
            return Utils.maxIndex(normDist);
        /*
         * } else { normDist = new double [normDist.length];
         * normDist[(int)m_majority] = 1.0; if (m_evaluationMeasure == EVAL_AUC)
         * { m_evaluation.evaluateModelOnceAndRecordPrediction(normDist,
         * instance); } else { m_evaluation.evaluateModelOnce(normDist,
         * instance); } return m_majority; }
         */
        }
    // return Utils.maxIndex(tempDist);
    } else {
        // see if this one is already in the table
        if ((tempDist = m_entries.get(thekey)) != null) {
            normDist = new double[tempDist.length];
            System.arraycopy(tempDist, 0, normDist, 0, tempDist.length);
            normDist[0] -= (instance.classValue() * instance.weight());
            normDist[1] -= instance.weight();
            if (Utils.eq(normDist[1], 0.0)) {
                double[] temp = new double[1];
                temp[0] = m_majority;
                m_evaluation.evaluateModelOnce(temp, instance);
                return m_majority;
            } else {
                double[] temp = new double[1];
                temp[0] = normDist[0] / normDist[1];
                m_evaluation.evaluateModelOnce(temp, instance);
                return temp[0];
            }
        } else {
            throw new Error("This should never happen!");
        }
    }
// shouldn't get here
// return 0.0;
}
