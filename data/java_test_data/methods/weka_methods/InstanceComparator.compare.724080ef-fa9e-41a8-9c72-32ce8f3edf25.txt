public int compare(Instance inst1, Instance inst2) {
    int result;
    int classindex;
    int i;
    Instances data1;
    Instances data2;
    int n;
    InstanceComparator comp;
    m_Range.setUpper(inst1.numAttributes() - 1);
    // get class index
    if (inst1.classIndex() == -1)
        classindex = inst1.numAttributes() - 1;
    else
        classindex = inst1.classIndex();
    result = 0;
    for (i = 0; i < inst1.numAttributes(); i++) {
        // in selected range?
        if (!m_Range.isInRange(i))
            continue;
        // exclude class?
        if (!getIncludeClass() && (i == classindex))
            continue;
        // 1. special handling if missing value (NaN) is involved:
        if (inst1.isMissing(i) || inst2.isMissing(i)) {
            if (inst1.isMissing(i) && inst2.isMissing(i)) {
                continue;
            } else {
                if (inst1.isMissing(i))
                    result = -1;
                else
                    result = 1;
                break;
            }
        } else // 2. regular values:
        {
            switch(inst1.attribute(i).type()) {
                case Attribute.STRING:
                    result = inst1.stringValue(i).compareTo(inst2.stringValue(i));
                    break;
                case Attribute.RELATIONAL:
                    data1 = inst1.relationalValue(i);
                    data2 = inst2.relationalValue(i);
                    n = 0;
                    comp = new InstanceComparator();
                    while ((n < data1.numInstances()) && (n < data2.numInstances()) && (result == 0)) {
                        result = comp.compare(data1.instance(n), data2.instance(n));
                        n++;
                    }
                    break;
                default:
                    if (inst1.value(i) == inst2.value(i)) {
                        continue;
                    } else {
                        if (inst1.value(i) < inst2.value(i))
                            result = -1;
                        else
                            result = 1;
                        break;
                    }
            }
        }
        if (result != 0)
            break;
    }
    return result;
}
