public static void main(String[] options) {
    try {
        // Create numeric attributes "length" and "weight"
        Attribute length = new Attribute("length");
        Attribute weight = new Attribute("weight");
        // Create vector to hold nominal values "first", "second", "third"
        ArrayList<String> my_nominal_values = new ArrayList<String>(3);
        my_nominal_values.add("first");
        my_nominal_values.add("second");
        my_nominal_values.add("third");
        // Create nominal attribute "position"
        Attribute position = new Attribute("position", my_nominal_values);
        // Create vector of the above attributes
        ArrayList<Attribute> attributes = new ArrayList<Attribute>(3);
        attributes.add(length);
        attributes.add(weight);
        attributes.add(position);
        // Create the empty dataset "race" with above attributes
        Instances race = new Instances("race", attributes, 0);
        // Make position the class attribute
        race.setClassIndex(position.index());
        // Create empty instance with three attribute values
        SparseInstance inst = new SparseInstance(3);
        // Set instance's values for the attributes "length", "weight", and
        // "position"
        inst.setValue(length, 5.3);
        inst.setValue(weight, 300);
        inst.setValue(position, "first");
        // Set instance's dataset to be the dataset "race"
        inst.setDataset(race);
        // Print the instance
        System.out.println("The instance: " + inst);
        // Print the first attribute
        System.out.println("First attribute: " + inst.attribute(0));
        // Print the class attribute
        System.out.println("Class attribute: " + inst.classAttribute());
        // Print the class index
        System.out.println("Class index: " + inst.classIndex());
        // Say if class is missing
        System.out.println("Class is missing: " + inst.classIsMissing());
        // Print the instance's class value in internal format
        System.out.println("Class value (internal format): " + inst.classValue());
        // Print a shallow copy of this instance
        SparseInstance copy = (SparseInstance) inst.copy();
        System.out.println("Shallow copy: " + copy);
        // Set dataset for shallow copy
        copy.setDataset(inst.dataset());
        System.out.println("Shallow copy with dataset set: " + copy);
        // Print out all values in internal format
        System.out.print("All stored values in internal format: ");
        for (int i = 0; i < inst.numValues(); i++) {
            if (i > 0) {
                System.out.print(",");
            }
            System.out.print(inst.valueSparse(i));
        }
        System.out.println();
        // Set all values to zero
        System.out.print("All values set to zero: ");
        while (inst.numValues() > 0) {
            inst.setValueSparse(0, 0);
        }
        for (int i = 0; i < inst.numValues(); i++) {
            if (i > 0) {
                System.out.print(",");
            }
            System.out.print(inst.valueSparse(i));
        }
        System.out.println();
        // Set all values to one
        System.out.print("All values set to one: ");
        for (int i = 0; i < inst.numAttributes(); i++) {
            inst.setValue(i, 1);
        }
        for (int i = 0; i < inst.numValues(); i++) {
            if (i > 0) {
                System.out.print(",");
            }
            System.out.print(inst.valueSparse(i));
        }
        System.out.println();
        // Unset dataset for copy, delete first attribute, and insert it again
        copy.setDataset(null);
        copy.deleteAttributeAt(0);
        copy.insertAttributeAt(0);
        copy.setDataset(inst.dataset());
        System.out.println("Copy with first attribute deleted and inserted: " + copy);
        // Same for second attribute
        copy.setDataset(null);
        copy.deleteAttributeAt(1);
        copy.insertAttributeAt(1);
        copy.setDataset(inst.dataset());
        System.out.println("Copy with second attribute deleted and inserted: " + copy);
        // Same for last attribute
        copy.setDataset(null);
        copy.deleteAttributeAt(2);
        copy.insertAttributeAt(2);
        copy.setDataset(inst.dataset());
        System.out.println("Copy with third attribute deleted and inserted: " + copy);
        // Enumerate attributes (leaving out the class attribute)
        System.out.println("Enumerating attributes (leaving out class):");
        Enumeration<Attribute> enu = inst.enumerateAttributes();
        while (enu.hasMoreElements()) {
            Attribute att = enu.nextElement();
            System.out.println(att);
        }
        // Headers are equivalent?
        System.out.println("Header of original and copy equivalent: " + inst.equalHeaders(copy));
        // Test for missing values
        System.out.println("Length of copy missing: " + copy.isMissing(length));
        System.out.println("Weight of copy missing: " + copy.isMissing(weight.index()));
        System.out.println("Length of copy missing: " + Utils.isMissingValue(copy.value(length)));
        // Prints number of attributes and classes
        System.out.println("Number of attributes: " + copy.numAttributes());
        System.out.println("Number of classes: " + copy.numClasses());
        // Replace missing values
        double[] meansAndModes = { 2, 3, 0 };
        copy.replaceMissingValues(meansAndModes);
        System.out.println("Copy with missing value replaced: " + copy);
        // Setting and getting values and weights
        copy.setClassMissing();
        System.out.println("Copy with missing class: " + copy);
        copy.setClassValue(0);
        System.out.println("Copy with class value set to first value: " + copy);
        copy.setClassValue("third");
        System.out.println("Copy with class value set to \"third\": " + copy);
        copy.setMissing(1);
        System.out.println("Copy with second attribute set to be missing: " + copy);
        copy.setMissing(length);
        System.out.println("Copy with length set to be missing: " + copy);
        copy.setValue(0, 0);
        System.out.println("Copy with first attribute set to 0: " + copy);
        copy.setValue(weight, 1);
        System.out.println("Copy with weight attribute set to 1: " + copy);
        copy.setValue(position, "second");
        System.out.println("Copy with position set to \"second\": " + copy);
        copy.setValue(2, "first");
        System.out.println("Copy with last attribute set to \"first\": " + copy);
        System.out.println("Current weight of instance copy: " + copy.weight());
        copy.setWeight(2);
        System.out.println("Current weight of instance copy (set to 2): " + copy.weight());
        System.out.println("Last value of copy: " + copy.toString(2));
        System.out.println("Value of position for copy: " + copy.toString(position));
        System.out.println("Last value of copy (internal format): " + copy.value(2));
        System.out.println("Value of position for copy (internal format): " + copy.value(position));
    } catch (Exception e) {
        e.printStackTrace();
    }
}
