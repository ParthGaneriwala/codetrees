@Override
public double[] findArgmin(double[] initX, double[][] constraints) throws Exception {
    int l = initX.length;
    // Initial value of obj. function, gradient and inverse of the Hessian
    m_f = objectiveFunction(initX);
    if (Double.isNaN(m_f)) {
        throw new Exception("Objective function value is NaN!");
    }
    // Get gradient at initial point
    double[] grad = evaluateGradient(initX), oldGrad, oldX, deltaX = new double[l], direct = new double[l], x = new double[l];
    // Turn gradient into direction and calculate squared length
    double sum = 0;
    for (int i = 0; i < grad.length; i++) {
        direct[i] = -grad[i];
        sum += grad[i] * grad[i];
    }
    // Same as in Optimization.java
    double stpmax = m_STPMX * Math.max(Math.sqrt(sum), l);
    boolean[] isFixed = new boolean[initX.length];
    DynamicIntArray wsBdsIndx = new DynamicIntArray(initX.length);
    double[][] consts = new double[2][initX.length];
    for (int i = 0; i < initX.length; i++) {
        if (!Double.isNaN(constraints[0][i]) || (!Double.isNaN(constraints[1][i]))) {
            throw new Exception("Cannot deal with constraints, sorry.");
        }
        consts[0][i] = constraints[0][i];
        consts[1][i] = constraints[1][i];
        x[i] = initX[i];
    }
    boolean finished = false;
    for (int step = 0; step < m_MAXITS; step++) {
        if (m_Debug) {
            System.err.println("\nIteration # " + step + ":");
        }
        oldX = x;
        oldGrad = grad;
        // Make a copy of direction vector because it may get modified in lnsrch
        double[] directB = Arrays.copyOf(direct, direct.length);
        // Perform a line search based on new direction
        m_IsZeroStep = false;
        x = lnsrch(x, grad, directB, stpmax, isFixed, constraints, wsBdsIndx);
        if (m_IsZeroStep) {
            throw new Exception("Exiting due to zero step.");
        }
        double test = 0.0;
        for (int h = 0; h < x.length; h++) {
            deltaX[h] = x[h] - oldX[h];
            double tmp = Math.abs(deltaX[h]) / Math.max(Math.abs(x[h]), 1.0);
            if (tmp > test) {
                test = tmp;
            }
        }
        if (test < m_Zero) {
            if (m_Debug) {
                System.err.println("\nDeltaX converged: " + test);
            }
            finished = true;
            break;
        }
        // Check zero gradient
        grad = evaluateGradient(x);
        test = 0.0;
        for (int g = 0; g < l; g++) {
            double tmp = Math.abs(grad[g]) * Math.max(Math.abs(directB[g]), 1.0) / Math.max(Math.abs(m_f), 1.0);
            if (tmp > test) {
                test = tmp;
            }
        }
        if (test < m_Zero) {
            if (m_Debug) {
                for (int i = 0; i < l; i++) {
                    System.out.println(grad[i] + " " + directB[i] + " " + m_f);
                }
                System.err.println("Gradient converged: " + test);
            }
            finished = true;
            break;
        }
        // Calculate multiplier
        double betaHSNumerator = 0, betaDYNumerator = 0;
        double betaHSandDYDenominator = 0;
        for (int i = 0; i < grad.length; i++) {
            betaDYNumerator += grad[i] * grad[i];
            betaHSNumerator += (grad[i] - oldGrad[i]) * grad[i];
            betaHSandDYDenominator += (grad[i] - oldGrad[i]) * direct[i];
        }
        double betaHS = betaHSNumerator / betaHSandDYDenominator;
        double betaDY = betaDYNumerator / betaHSandDYDenominator;
        if (m_Debug) {
            System.err.println("Beta HS: " + betaHS);
            System.err.println("Beta DY: " + betaDY);
        }
        for (int i = 0; i < direct.length; i++) {
            direct[i] = -grad[i] + Math.max(0, Math.min(betaHS, betaDY)) * direct[i];
        }
    }
    if (finished) {
        if (m_Debug) {
            System.err.println("Minimum found.");
        }
        m_f = objectiveFunction(x);
        if (Double.isNaN(m_f)) {
            throw new Exception("Objective function value is NaN!");
        }
        return x;
    }
    if (m_Debug) {
        System.err.println("Cannot find minimum -- too many iterations!");
    }
    m_X = x;
    return null;
}
