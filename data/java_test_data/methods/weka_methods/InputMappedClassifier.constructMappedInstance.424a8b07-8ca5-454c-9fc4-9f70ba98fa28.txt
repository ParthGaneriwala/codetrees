public synchronized Instance constructMappedInstance(Instance incoming) throws Exception {
    boolean regenerateMapping = false;
    if (m_inputHeader == null) {
        m_inputHeader = incoming.dataset();
        regenerateMapping = true;
        m_initialTestStructureKnown = false;
    } else if (!m_inputHeader.equalHeaders(incoming.dataset())) {
        /*
       * System.out.println("[InputMappedClassifier] incoming data does not match "
       * + "last known input format - regenerating mapping...");
       * System.out.println("Incoming\n" + new Instances(incoming.dataset(),
       * 0)); System.out.println("Stored input header\n" + new
       * Instances(m_inputHeader, 0)); System.out.println("Model header\n" + new
       * Instances(m_modelHeader, 0));
       */
        m_inputHeader = incoming.dataset();
        regenerateMapping = true;
        m_initialTestStructureKnown = false;
    } else if (m_attributeMap == null) {
        regenerateMapping = true;
        m_initialTestStructureKnown = false;
    }
    if (regenerateMapping) {
        regenerateMapping();
        m_vals = null;
        if (!m_suppressMappingReport) {
            StringBuffer result = createMappingReport();
            System.out.println(result.toString());
        }
    }
    m_vals = new double[m_modelHeader.numAttributes()];
    for (int i = 0; i < m_modelHeader.numAttributes(); i++) {
        if (m_attributeStatus[i] == OK) {
            Attribute modelAtt = m_modelHeader.attribute(i);
            m_inputHeader.attribute(m_attributeMap[i]);
            if (Utils.isMissingValue(incoming.value(m_attributeMap[i]))) {
                m_vals[i] = Utils.missingValue();
                continue;
            }
            if (modelAtt.isNumeric()) {
                m_vals[i] = incoming.value(m_attributeMap[i]);
            } else if (modelAtt.isNominal()) {
                int mapVal = m_nominalValueMap[i][(int) incoming.value(m_attributeMap[i])];
                if (mapVal == NO_MATCH) {
                    m_vals[i] = Utils.missingValue();
                } else {
                    m_vals[i] = mapVal;
                }
            }
        } else {
            m_vals[i] = Utils.missingValue();
        }
    }
    Instance newInst = new DenseInstance(incoming.weight(), m_vals);
    newInst.setDataset(m_modelHeader);
    return newInst;
}
