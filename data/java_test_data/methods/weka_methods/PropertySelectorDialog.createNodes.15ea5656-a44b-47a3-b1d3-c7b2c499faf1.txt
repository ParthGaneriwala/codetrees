protected void createNodes(DefaultMutableTreeNode localNode) {
    PropertyNode pNode = (PropertyNode) localNode.getUserObject();
    Object localObject = pNode.value;
    // Find all the properties of the object in the root node
    PropertyDescriptor[] localProperties;
    try {
        BeanInfo bi = Introspector.getBeanInfo(localObject.getClass());
        localProperties = bi.getPropertyDescriptors();
    } catch (IntrospectionException ex) {
        System.err.println("PropertySelectorDialog: Couldn't introspect");
        return;
    }
    // Put their values into child nodes.
    for (PropertyDescriptor localPropertie : localProperties) {
        // Don't display hidden or expert properties.
        if (localPropertie.isHidden() || localPropertie.isExpert()) {
            continue;
        }
        String name = localPropertie.getDisplayName();
        Class<?> type = localPropertie.getPropertyType();
        Method getter = localPropertie.getReadMethod();
        Method setter = localPropertie.getWriteMethod();
        Object value = null;
        // Only display read/write properties.
        if (getter == null || setter == null) {
            continue;
        }
        try {
            Object[] args = {};
            value = getter.invoke(localObject, args);
            PropertyEditor editor = null;
            Class<?> pec = localPropertie.getPropertyEditorClass();
            if (pec != null) {
                try {
                    editor = (PropertyEditor) pec.newInstance();
                } catch (Exception ex) {
                }
            }
            if (editor == null) {
                editor = PropertyEditorManager.findEditor(type);
            }
            if ((editor == null) || (value == null)) {
                continue;
            }
        } catch (InvocationTargetException ex) {
            System.err.println("Skipping property " + name + " ; exception on target: " + ex.getTargetException());
            ex.getTargetException().printStackTrace();
            continue;
        } catch (Exception ex) {
            System.err.println("Skipping property " + name + " ; exception: " + ex);
            ex.printStackTrace();
            continue;
        }
        // Make a child node
        DefaultMutableTreeNode child = new DefaultMutableTreeNode(new PropertyNode(value, localPropertie, localObject.getClass()));
        localNode.add(child);
        createNodes(child);
    }
}
