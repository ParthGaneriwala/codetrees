public void setInstances(Instances inst) throws Exception {
    if (inst == null) {
        m_trainingInstances = inst;
        m_classPanel.setInstances(m_trainingInstances);
        return;
    }
    // count the number of numeric attributes
    int numCount = 0;
    for (int i = 0; i < inst.numAttributes(); i++) {
        if (inst.attribute(i).isNumeric()) {
            numCount++;
        }
    }
    if (numCount < 2) {
        JOptionPane.showMessageDialog(null, "We need at least two numeric " + "attributes in order to visualize!");
        return;
    }
    m_trainingInstances = inst;
    m_classPanel.setInstances(m_trainingInstances);
    // setup combo boxes
    String[] classAttNames = new String[m_trainingInstances.numAttributes()];
    final Vector<String> xAttNames = new Vector<String>();
    Vector<String> yAttNames = new Vector<String>();
    for (int i = 0; i < m_trainingInstances.numAttributes(); i++) {
        classAttNames[i] = m_trainingInstances.attribute(i).name();
        String type = " (" + Attribute.typeToStringShort(m_trainingInstances.attribute(i)) + ")";
        classAttNames[i] += type;
        if (m_trainingInstances.attribute(i).isNumeric()) {
            xAttNames.add("X: " + classAttNames[i]);
            yAttNames.add("Y: " + classAttNames[i]);
        }
    }
    m_classAttBox.setModel(new DefaultComboBoxModel(classAttNames));
    m_xAttBox.setModel(new DefaultComboBoxModel(xAttNames));
    m_yAttBox.setModel(new DefaultComboBoxModel(yAttNames));
    if (xAttNames.size() > 1) {
        m_yAttBox.setSelectedIndex(1);
    }
    m_classAttBox.addActionListener(new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent e) {
            configureForClassAttribute();
        }
    });
    m_xAttBox.addItemListener(new ItemListener() {

        @Override
        public void itemStateChanged(ItemEvent e) {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                /*
           * if (xAttNames.size() > 1) { if (m_xAttBox.getSelectedIndex() ==
           * m_yAttBox.getSelectedIndex()) {
           * m_xAttBox.setSelectedIndex((m_xAttBox.getSelectedIndex() + 1) %
           * xAttNames.size()); } }
           */
                computeBounds();
                repaint();
                try {
                    plotTrainingData();
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            // jimmy
            }
        }
    });
    m_yAttBox.addItemListener(new ItemListener() {

        @Override
        public void itemStateChanged(ItemEvent e) {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                /*
           * if (xAttNames.size() > 1) { if (m_yAttBox.getSelectedIndex() ==
           * m_xAttBox.getSelectedIndex()) {
           * m_yAttBox.setSelectedIndex((m_yAttBox.getSelectedIndex() + 1) %
           * xAttNames.size()); } }
           */
                computeBounds();
                repaint();
                try {
                    plotTrainingData();
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }
        }
    });
    if (classAttNames.length > 0) {
        // select last
        m_classAttBox.setSelectedIndex(classAttNames.length - 1);
    // attribute as
    // class by
    // default.
    // -jimmy
    }
    // set up the add points selector combo box
    setUpClassValueSelectorCB();
    configureForClassAttribute();
    m_classPanel.setCindex(m_classAttBox.getSelectedIndex());
    plotTrainingData();
    computeBounds();
    revalidate();
    repaint();
    if (getTopLevelAncestor() instanceof java.awt.Window) {
        ((java.awt.Window) getTopLevelAncestor()).pack();
    }
}
