protected void pruneDictionary(boolean force) {
    if ((m_periodicP <= 0 || m_t % m_periodicP > 0) && !force) {
        return;
    }
    Set<Integer> classesSet = m_probOfWordGivenClass.keySet();
    for (Integer classIndex : classesSet) {
        LinkedHashMap<String, Count> dictForClass = m_probOfWordGivenClass.get(classIndex);
        Iterator<Map.Entry<String, Count>> entries = dictForClass.entrySet().iterator();
        while (entries.hasNext()) {
            Map.Entry<String, Count> entry = entries.next();
            if (entry.getValue().m_count < m_minWordP) {
                m_wordsPerClass[classIndex] -= entry.getValue().m_count;
                entries.remove();
            }
        }
    }
}
