protected void estimateParameters(double[] values, double[] weights, double[][] probs) {
    double totalSumOfWeights = 0;
    for (int j = 0; j < m_K; j++) {
        double sum = 0;
        double sumWeights = 0;
        for (int i = 0; i < values.length; i++) {
            double weight = probs[j][i] * weights[i];
            sum += weight * values[i];
            sumWeights += weight;
        }
        if (sumWeights <= 0) {
            m_Means[j] = 0;
        } else {
            m_Means[j] = sum / sumWeights;
        }
        totalSumOfWeights += sumWeights;
    }
    for (int j = 0; j < m_K; j++) {
        double sum = 0;
        double sumWeights = 0;
        for (int i = 0; i < values.length; i++) {
            double weight = probs[j][i] * weights[i];
            double diff = values[i] - m_Means[j];
            sum += weight * diff * diff;
            sumWeights += weight;
        }
        if ((sum <= 0) || (sumWeights <= 0)) {
            // Hack to prevent unpleasantness
            m_StdDevs[j] = 1.0e-6;
        } else {
            m_StdDevs[j] = Math.sqrt(sum / sumWeights);
            if (m_StdDevs[j] < 1.0e-6) {
                m_StdDevs[j] = 1.0e-6;
            }
        }
        if (sumWeights <= 0) {
            m_LogPriors[j] = -Double.MAX_VALUE;
        } else {
            m_LogPriors[j] = Math.log(sumWeights / totalSumOfWeights);
        }
    }
}
