private void findLargeCarItemSets() throws Exception {
    ArrayList<Object> kMinusOneSets, kSets;
    Hashtable<ItemSet, Integer> hashtable;
    int necSupport, i = 0;
    // Find large itemsets
    // minimum support
    double nextMinSupport = m_minSupport * m_instances.numInstances();
    double nextMaxSupport = m_upperBoundMinSupport * m_instances.numInstances();
    if (Math.rint(nextMinSupport) == nextMinSupport) {
        necSupport = (int) nextMinSupport;
    } else {
        necSupport = Math.round((float) (nextMinSupport + 0.5));
    }
    if (Math.rint(nextMaxSupport) == nextMaxSupport) {
    } else {
        Math.round((float) (nextMaxSupport + 0.5));
    }
    // find item sets of length one
    kSets = LabeledItemSet.singletons(m_instances, m_onlyClass);
    LabeledItemSet.upDateCounters(kSets, m_instances, m_onlyClass);
    // check if a item set of lentgh one is frequent, if not delete it
    kSets = LabeledItemSet.deleteItemSets(kSets, necSupport, m_instances.numInstances());
    if (kSets.size() == 0) {
        return;
    }
    do {
        m_Ls.add(kSets);
        kMinusOneSets = kSets;
        kSets = LabeledItemSet.mergeAllItemSets(kMinusOneSets, i, m_instances.numInstances());
        hashtable = LabeledItemSet.getHashtable(kMinusOneSets, kMinusOneSets.size());
        kSets = LabeledItemSet.pruneItemSets(kSets, hashtable);
        LabeledItemSet.upDateCounters(kSets, m_instances, m_onlyClass);
        kSets = LabeledItemSet.deleteItemSets(kSets, necSupport, m_instances.numInstances());
        i++;
    } while (kSets.size() > 0);
}
