protected Object invokeReadFromXML(Element node) throws Exception {
    Method method;
    Class<?>[] methodClasses;
    Object[] methodArgs;
    boolean array;
    boolean useDefault;
    useDefault = false;
    method = null;
    m_CurrentNode = node;
    try {
        // special handling of null values
        if (stringToBoolean(node.getAttribute(ATT_NULL))) {
            useDefault = true;
        }
        if (!useDefault) {
            array = stringToBoolean(node.getAttribute(ATT_ARRAY));
            // display name?
            if (m_CustomMethods.read().contains(node.getAttribute(ATT_NAME))) {
                method = m_CustomMethods.read().get(node.getAttribute(ATT_NAME));
            } else // class name?
            if ((!array) && (m_CustomMethods.read().contains(determineClass(node.getAttribute(ATT_CLASS))))) {
                method = m_CustomMethods.read().get(determineClass(node.getAttribute(ATT_CLASS)));
            } else {
                method = null;
            }
            useDefault = (method == null);
        }
        // custom method
        if (!useDefault) {
            methodClasses = new Class[1];
            methodClasses[0] = Element.class;
            methodArgs = new Object[1];
            methodArgs[0] = node;
            return method.invoke(this, methodArgs);
        } else // standard
        {
            return readFromXML(node);
        }
    } catch (Exception e) {
        if (DEBUG) {
            e.printStackTrace();
        }
        if (m_CurrentNode != null) {
            System.out.println("Happened near: " + getPath(m_CurrentNode));
            // print it only once!
            m_CurrentNode = null;
        }
        System.out.println("PROBLEM (read): " + node.getAttribute("name"));
        throw (Exception) e.fillInStackTrace();
    }
}
