/**
 * Removes a value of a nominal, string, or relation-valued attribute. Creates
 * a fresh list of attribute values before removing it.
 *
 * @param index the value's index
 * @throws IllegalArgumentException if the attribute is not of the correct
 * type
 */
// @ requires isNominal() || isString() || isRelationValued();
final void delete(int index) {
    if (!isNominal() && !isString() && !isRelationValued()) {
        throw new IllegalArgumentException("Can only remove value of " + "nominal, string or relation-" + " valued attribute!");
    } else {
        ((NominalAttributeInfo) m_AttributeInfo).m_Values = Utils.cast(((NominalAttributeInfo) m_AttributeInfo).m_Values.clone());
        ((NominalAttributeInfo) m_AttributeInfo).m_Values.remove(index);
        if (!isRelationValued()) {
            Hashtable<Object, Integer> hash = new Hashtable<Object, Integer>(((NominalAttributeInfo) m_AttributeInfo).m_Hashtable.size());
            Enumeration<Object> enu = ((NominalAttributeInfo) m_AttributeInfo).m_Hashtable.keys();
            while (enu.hasMoreElements()) {
                Object string = enu.nextElement();
                Integer valIndexObject = ((NominalAttributeInfo) m_AttributeInfo).m_Hashtable.get(string);
                int valIndex = valIndexObject.intValue();
                if (valIndex > index) {
                    hash.put(string, new Integer(valIndex - 1));
                } else if (valIndex < index) {
                    hash.put(string, valIndexObject);
                }
            }
            ((NominalAttributeInfo) m_AttributeInfo).m_Hashtable = hash;
        }
    }
}
