protected void sortBuffer(boolean write) throws Exception {
    String msg = statusMessagePrefix() + "Sorting in memory buffer....";
    if (m_log != null) {
        m_log.statusMessage(msg);
        m_log.logMessage("[" + getCustomName() + "] " + msg);
    }
    Collections.sort(m_incrementalBuffer, m_sortComparator);
    if (!write) {
        return;
    }
    String tmpDir = m_tempDirectory;
    File tempFile = File.createTempFile("Sorter", ".tmp");
    if (tmpDir != null && tmpDir.length() > 0) {
        try {
            tmpDir = m_env.substitute(tmpDir);
            File tempDir = new File(tmpDir);
            if (tempDir.exists() && tempDir.canWrite()) {
                String filename = tempFile.getName();
                File newFile = new File(tmpDir + File.separator + filename);
                tempFile = newFile;
                tempFile.deleteOnExit();
            }
        } catch (Exception ex) {
        }
    }
    if (!m_stopRequested.get()) {
        m_bufferFiles.add(tempFile);
        FileOutputStream fos = new FileOutputStream(tempFile);
        // GZIPOutputStream gzo = new GZIPOutputStream(fos);
        BufferedOutputStream bos = new BufferedOutputStream(fos, 50000);
        ObjectOutputStream oos = new ObjectOutputStream(bos);
        msg = statusMessagePrefix() + "Writing buffer to temp file " + m_bufferFiles.size() + "...";
        if (m_log != null) {
            m_log.statusMessage(msg);
            m_log.logMessage("[" + getCustomName() + "] " + msg);
        }
        for (int i = 0; i < m_incrementalBuffer.size(); i++) {
            InstanceHolder temp = m_incrementalBuffer.get(i);
            temp.m_instance.setDataset(null);
            oos.writeObject(temp);
            if (i % (m_bufferSizeI / 10) == 0) {
                oos.reset();
            }
        }
        bos.flush();
        oos.close();
    }
    m_incrementalBuffer.clear();
}
