public void setInstances(Instances data) {
    try {
        super.setInstances(data);
        // Apply user-specified filter
        getCapabilities().testWithFail(data);
        Instances filteredData = new Instances(data);
        getFilter().setInputFormat(filteredData);
        filteredData = Filter.useFilter(data, getFilter());
        if (data.numInstances() != filteredData.numInstances()) {
            throw new IllegalArgumentException("FilteredNeighbourSearch: Filter has changed the number of instances!");
        }
        // Set up filter to add ID
        m_IndexOfID = filteredData.numAttributes();
        m_AddID.setIDIndex("" + (filteredData.numAttributes() + 1));
        ;
        m_AddID.setInputFormat(filteredData);
        filteredData = Filter.useFilter(filteredData, m_AddID);
        // Modify distance function for base method to skip ID
        // User-specified range setting for the distance function is simply
        // ignored
        m_ModifiedSearchMethod = (NearestNeighbourSearch) new SerializedObject(getSearchMethod()).getObject();
        m_ModifiedSearchMethod.getDistanceFunction().setAttributeIndices("1-" + m_IndexOfID);
        m_ModifiedSearchMethod.getDistanceFunction().setInvertSelection(false);
        // Set up the distance function
        m_ModifiedSearchMethod.setInstances(filteredData);
    } catch (Exception e) {
        e.printStackTrace();
    }
}
