@Override
public synchronized void connectionNotification(String eventName, Object source) {
    if (eventName.compareTo("instance") == 0) {
        if (!(m_ClassifierTemplate instanceof weka.classifiers.UpdateableClassifier)) {
            if (m_log != null) {
                String msg = statusMessagePrefix() + "WARNING: " + m_ClassifierTemplate.getClass().getName() + " Is not an updateable classifier. This " + "classifier will only be evaluated on incoming " + "instance events and not trained on them.";
                m_log.logMessage("[Classifier] " + msg);
                m_log.statusMessage(msg);
            }
        }
    }
    if (eventName.equals("testSet") && m_listenees.containsKey("testSet") && m_log != null) {
        if (!Utils.getDontShowDialog("weka.gui.beans.ClassifierMultipleTestSetConnections") && !java.awt.GraphicsEnvironment.isHeadless()) {
            String msg = "You have more than one incoming test set connection to \n" + "'" + getCustomName() + "'. In order for this setup to run properly\n" + "and generate correct evaluation results you MUST execute the flow\n" + "by launching start points sequentially (second play button). In order\n" + "to specify the order you'd like the start points launched in you can\n" + "set the name of each start point (right click on start point and select\n" + "'Set name') to include a number prefix - e.g. '1: load my arff file'.";
            JCheckBox dontShow = new JCheckBox("Do not show this message again");
            Object[] stuff = new Object[2];
            stuff[0] = msg;
            stuff[1] = dontShow;
            JOptionPane.showMessageDialog(null, stuff, "Classifier test connection", JOptionPane.OK_OPTION);
            if (dontShow.isSelected()) {
                try {
                    Utils.setDontShowDialog("weka.gui.beans.ClassifierMultipleTestSetConnections");
                } catch (Exception ex) {
                // quietly ignore
                }
            }
        }
    }
    if (connectionAllowed(eventName)) {
        List<Object> listenee = m_listenees.get(eventName);
        if (listenee == null) {
            listenee = new ArrayList<Object>();
            m_listenees.put(eventName, listenee);
        }
        listenee.add(source);
    /*
       * if (eventName.compareTo("instance") == 0) { startIncrementalHandler();
       * }
       */
    }
}
