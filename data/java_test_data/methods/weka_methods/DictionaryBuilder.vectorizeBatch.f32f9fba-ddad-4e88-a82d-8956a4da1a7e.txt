public Instances vectorizeBatch(Instances batch, boolean setAvgDocLength) throws Exception {
    if (m_inputFormat == null) {
        throw new Exception("No input format available. Call setup() and " + "make sure a dictionary has been built first.");
    }
    if (!m_inputContainsStringAttributes) {
        // nothing to do
        return batch;
    }
    if (m_consolidatedDict == null) {
        throw new Exception("Dictionary hasn't been built or consolidated yet!");
    }
    Instances vectorized = new Instances(m_outputFormat, batch.numInstances());
    boolean normTemp = m_normalize;
    if (setAvgDocLength) {
        // make sure normalization is turned off until the second pass once
        // we've set the post dictionary pruning average document length
        m_normalize = false;
    }
    if (batch.numInstances() > 0) {
        int[] offsetHolder = new int[1];
        vectorized.add(vectorizeInstance(batch.instance(0), offsetHolder, true));
        for (int i = 1; i < batch.numInstances(); i++) {
            vectorized.add(vectorizeInstance(batch.instance(i), offsetHolder, true));
        }
        if (setAvgDocLength) {
            m_avgDocLength = 0;
            for (int i = 0; i < vectorized.numInstances(); i++) {
                Instance inst = vectorized.instance(i);
                double docLength = 0;
                for (int j = 0; j < inst.numValues(); j++) {
                    if (inst.index(j) >= offsetHolder[0]) {
                        docLength += inst.valueSparse(j) * inst.valueSparse(j);
                    }
                }
                m_avgDocLength += Math.sqrt(docLength);
            }
            m_avgDocLength /= vectorized.numInstances();
            if (normTemp) {
                for (int i = 0; i < vectorized.numInstances(); i++) {
                    normalizeInstance(vectorized.instance(i), offsetHolder[0]);
                }
            }
        }
    }
    m_normalize = normTemp;
    vectorized.compactify();
    return vectorized;
}
