protected void emitBufferedInstances() throws WekaException {
    if (isStopRequested()) {
        return;
    }
    if (m_incrementalBuffer.size() > 0) {
        try {
            getStepManager().throughputUpdateStart();
            sortBuffer(false);
            getStepManager().throughputUpdateEnd();
        } catch (Exception ex) {
            throw new WekaException(ex);
        }
        if (m_bufferFiles.size() == 0) {
            // we only have the in memory buffer
            getStepManager().logDetailed("Emitting in memory buffer");
            Instances newHeader = new Instances(m_incrementalBuffer.get(0).m_instance.dataset(), 0);
            for (int i = 0; i < m_incrementalBuffer.size(); i++) {
                getStepManager().throughputUpdateStart();
                InstanceHolder currentH = m_incrementalBuffer.get(i);
                currentH.m_instance.setDataset(newHeader);
                if (m_stringAttIndexes != null) {
                    for (String attName : m_stringAttIndexes.keySet()) {
                        boolean setValToZero = newHeader.attribute(attName).numValues() > 0;
                        newHeader.attribute(attName).setStringValue(currentH.m_stringVals.get(attName));
                        if (setValToZero) {
                            currentH.m_instance.setValue(newHeader.attribute(attName), 0);
                        }
                    }
                }
                if (isStopRequested()) {
                    return;
                }
                m_streamingData.setPayloadElement(StepManager.CON_INSTANCE, currentH.m_instance);
                getStepManager().throughputUpdateEnd();
                getStepManager().outputData(m_streamingData);
                if (i == m_incrementalBuffer.size() - 1) {
                    // end of stream
                    m_streamingData.clearPayload();
                    getStepManager().throughputFinished(m_streamingData);
                }
            }
            return;
        }
    }
    List<ObjectInputStream> inputStreams = new ArrayList<ObjectInputStream>();
    // for the interleaving part of the merge sort
    List<InstanceHolder> merger = new ArrayList<InstanceHolder>();
    Instances tempHeader = new Instances(m_connectedFormat, 0);
    // add an instance from the in-memory buffer first
    if (m_incrementalBuffer.size() > 0) {
        InstanceHolder tempH = m_incrementalBuffer.remove(0);
        merger.add(tempH);
    }
    if (isStopRequested()) {
        return;
    }
    if (m_bufferFiles.size() > 0) {
        getStepManager().logDetailed("Merging temp files");
    }
    // open all temp buffer files and read one instance from each
    for (int i = 0; i < m_bufferFiles.size(); i++) {
        ObjectInputStream ois = null;
        try {
            FileInputStream fis = new FileInputStream(m_bufferFiles.get(i));
            BufferedInputStream bis = new BufferedInputStream(fis, 50000);
            ois = new ObjectInputStream(bis);
            InstanceHolder tempH = (InstanceHolder) ois.readObject();
            if (tempH != null) {
                inputStreams.add(ois);
                tempH.m_fileNumber = i;
                merger.add(tempH);
            } else {
                // no instances?!??
                ois.close();
            }
        } catch (Exception ex) {
            if (ois != null) {
                try {
                    ois.close();
                } catch (Exception e) {
                    throw new WekaException(e);
                }
            }
            throw new WekaException(ex);
        }
    }
    Collections.sort(merger, m_sortComparator);
    int mergeCount = 0;
    do {
        if (isStopRequested()) {
            return;
        }
        InstanceHolder holder = merger.remove(0);
        holder.m_instance.setDataset(tempHeader);
        if (m_stringAttIndexes != null) {
            for (String attName : m_stringAttIndexes.keySet()) {
                boolean setValToZero = (tempHeader.attribute(attName).numValues() > 1);
                tempHeader.attribute(attName).setStringValue(holder.m_stringVals.get(attName));
                if (setValToZero) {
                    holder.m_instance.setValue(tempHeader.attribute(attName), 0);
                }
            }
        }
        m_streamingData.setPayloadElement(StepManager.CON_INSTANCE, holder.m_instance);
        mergeCount++;
        getStepManager().outputData(m_streamingData);
        getStepManager().throughputUpdateStart();
        if (mergeCount % m_bufferSizeI == 0) {
            getStepManager().logDetailed("Merged " + mergeCount + " instances");
        }
        int smallest = holder.m_fileNumber;
        // now get another instance from the source of "smallest"
        InstanceHolder nextH = null;
        if (smallest == -1) {
            if (m_incrementalBuffer.size() > 0) {
                nextH = m_incrementalBuffer.remove(0);
                nextH.m_fileNumber = -1;
            }
        } else {
            ObjectInputStream tis = inputStreams.get(smallest);
            try {
                InstanceHolder tempH = (InstanceHolder) tis.readObject();
                if (tempH != null) {
                    nextH = tempH;
                    nextH.m_fileNumber = smallest;
                } else {
                    throw new Exception("end of buffer");
                }
            } catch (Exception ex) {
                // EOF
                try {
                    getStepManager().logDetailed("Closing temp file");
                    tis.close();
                } catch (Exception e) {
                    throw new WekaException(ex);
                }
                File file = m_bufferFiles.remove(smallest);
                // file.delete();
                inputStreams.remove(smallest);
                // update file numbers
                for (InstanceHolder h : merger) {
                    if (h.m_fileNumber != -1 && h.m_fileNumber > smallest) {
                        h.m_fileNumber--;
                    }
                }
            }
        }
        if (nextH != null) {
            // find the correct position (i.e. interleave) for this new Instance
            int index = Collections.binarySearch(merger, nextH, m_sortComparator);
            if (index < 0) {
                merger.add(index * -1 - 1, nextH);
            } else {
                merger.add(index, nextH);
            }
            nextH = null;
        }
        getStepManager().throughputUpdateEnd();
    } while (merger.size() > 0 && !isStopRequested());
    if (!isStopRequested()) {
        // signal end of stream
        m_streamingData.clearPayload();
        getStepManager().throughputFinished(m_streamingData);
    } else {
        // try an close any input streams still open...
        for (ObjectInputStream is : inputStreams) {
            try {
                is.close();
            } catch (Exception ex) {
            // ignore
            }
        }
    }
}
