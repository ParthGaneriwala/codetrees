private void addWeightedStatsWithSubtracts(Stats stats, long[] adds, long[] subtracts, int jump, int buffer) {
    assert adds.length % 2 == 0;
    assert subtracts.length % 2 == 0;
    assert subtracts.length > 0;
    assert jump > 0;
    assert buffer > 0;
    List<Double> b = new ArrayList<Double>(2 * buffer);
    for (int i = 0, k = 0; i < adds.length; k += 2, i += 2 * jump) {
        for (int j = i; j < adds.length && j < i + jump * 2; j += 2) {
            double value = Double.longBitsToDouble(adds[j]);
            double weight = Double.longBitsToDouble(adds[j + 1]);
            stats.add(value, weight);
        }
        // wrap around if we go beyond the bound
        if (k >= subtracts.length)
            k = 0;
        double value = Double.longBitsToDouble(subtracts[k]);
        double weight = Double.longBitsToDouble(subtracts[k + 1]);
        stats.add(value, weight);
        b.add(value);
        b.add(weight);
        while (b.size() >= buffer * 2) {
            stats.subtract(b.get(0), b.get(1));
            b.remove(1);
            b.remove(0);
        }
    }
    for (int i = 0; i < b.size(); i += 2) {
        stats.subtract(b.get(i), b.get(i + 1));
    }
}
