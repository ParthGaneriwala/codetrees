@Override
public void setStepToEdit(Step step) {
    copyOriginal(step);
    m_CostMatrixEditor.setValue(new CostMatrix(1));
    if (((ClassifierPerformanceEvaluator) getStepToEdit()).getEvaluateWithRespectToCosts()) {
        String costString = ((ClassifierPerformanceEvaluator) getStepToEdit()).getCostMatrixString();
        if (costString != null && costString.length() > 0) {
            try {
                CostMatrix cm = CostMatrix.parseMatlab(costString);
                m_CostMatrixEditor.setValue(cm);
            } catch (Exception e) {
                showErrorDialog(e);
            }
        }
    }
    addPrimaryEditorPanel(BorderLayout.NORTH);
    JPanel p = new JPanel(new BorderLayout());
    p.add(m_showEvalDialog, BorderLayout.NORTH);
    m_primaryEditorHolder.add(p, BorderLayout.CENTER);
    add(m_editorHolder, BorderLayout.NORTH);
    JPanel costP = new JPanel();
    costP.add(m_useCosts);
    costP.add(m_setCostMatrix);
    m_useCosts.setSelected(((ClassifierPerformanceEvaluator) getStepToEdit()).getEvaluateWithRespectToCosts());
    m_setCostMatrix.setEnabled(((ClassifierPerformanceEvaluator) getStepToEdit()).getEvaluateWithRespectToCosts());
    p.add(costP, BorderLayout.SOUTH);
    String evalM = ((ClassifierPerformanceEvaluator) step).getEvaluationMetricsToOutput();
    if (evalM != null && evalM.length() > 0) {
        String[] parts = evalM.split(",");
        for (String s : parts) {
            m_evaluationMetrics.add(s.trim());
        }
    }
    m_showEvalDialog.addActionListener(new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent e) {
            EvaluationMetricSelectionDialog esd = new EvaluationMetricSelectionDialog(m_parent, m_evaluationMetrics);
            esd.setLocation(m_showEvalDialog.getLocationOnScreen());
            esd.pack();
            esd.setVisible(true);
            m_evaluationMetrics = esd.getSelectedEvalMetrics();
        }
    });
    m_useCosts.addActionListener(new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent e) {
            m_setCostMatrix.setEnabled(m_useCosts.isSelected());
            if (m_SetCostsFrame != null && !m_useCosts.isSelected()) {
                m_SetCostsFrame.setVisible(false);
            }
        }
    });
    m_setCostMatrix.addActionListener(new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent e) {
            m_setCostMatrix.setEnabled(false);
            if (m_SetCostsFrame == null) {
                if (PropertyDialog.getParentDialog(ClassifierPerformanceEvaluatorStepEditorDialog.this) != null) {
                    m_SetCostsFrame = new PropertyDialog(PropertyDialog.getParentDialog(ClassifierPerformanceEvaluatorStepEditorDialog.this), m_CostMatrixEditor, -1, -1);
                } else {
                    m_SetCostsFrame = new PropertyDialog(PropertyDialog.getParentFrame(ClassifierPerformanceEvaluatorStepEditorDialog.this), m_CostMatrixEditor, -1, -1);
                }
                m_SetCostsFrame.setTitle("Cost Matrix Editor");
                // pd.setSize(250,150);
                m_SetCostsFrame.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent p) {
                        m_setCostMatrix.setEnabled(m_useCosts.isSelected());
                        if ((m_SetCostsFrame != null) && !m_useCosts.isSelected()) {
                            m_SetCostsFrame.setVisible(false);
                        }
                    }
                });
            }
            m_SetCostsFrame.setVisible(true);
        }
    });
}
