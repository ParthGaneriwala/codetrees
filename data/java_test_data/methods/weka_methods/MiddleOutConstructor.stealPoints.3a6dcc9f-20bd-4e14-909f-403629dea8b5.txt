public boolean stealPoints(TempNode newAnchor, Vector<TempNode> anchors, Vector<double[]> anchorDistances) {
    double maxDist = Double.NEGATIVE_INFINITY;
    double[] distArray = anchorDistances.lastElement();
    for (double element : distArray) {
        if (maxDist < element) {
            maxDist = element;
        }
    }
    boolean anyPointsStolen = false, pointsStolen = false;
    TempNode anchorI;
    double newDist, distI, interAnchMidDist;
    Instance newAnchInst = newAnchor.anchor, anchIInst;
    for (int i = 0; i < anchors.size(); i++) {
        anchorI = anchors.elementAt(i);
        anchIInst = anchorI.anchor;
        pointsStolen = false;
        interAnchMidDist = m_DistanceFunction.distance(newAnchInst, anchIInst) / 2D;
        for (int j = 0; j < anchorI.points.length(); j++) {
            ListNode tmp = anchorI.points.get(j);
            // of inter anchor distance
            if (tmp.distance < interAnchMidDist) {
                break;
            }
            // else test if this point can be stolen by the new anchor
            newDist = m_DistanceFunction.distance(newAnchInst, m_Instances.instance(tmp.idx));
            distI = tmp.distance;
            if (newDist < distI) {
                newAnchor.points.insertReverseSorted(tmp.idx, newDist);
                anchorI.points.remove(j);
                anyPointsStolen = pointsStolen = true;
            }
        }
        if (pointsStolen) {
            anchorI.radius = anchorI.points.getFirst().distance;
        }
    }
    // end for
    return anyPointsStolen;
}
