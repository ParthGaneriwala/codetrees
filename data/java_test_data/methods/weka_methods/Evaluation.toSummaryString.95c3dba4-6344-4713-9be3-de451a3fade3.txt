public String toSummaryString(String title, boolean printComplexityStatistics) {
    StringBuffer text = new StringBuffer();
    if (printComplexityStatistics && m_NoPriors) {
        printComplexityStatistics = false;
        System.err.println("Priors disabled, cannot print complexity statistics!");
    }
    text.append(title + "\n");
    try {
        if (m_WithClass > 0) {
            if (m_ClassIsNominal) {
                boolean displayCorrect = m_metricsToDisplay.contains("correct");
                boolean displayIncorrect = m_metricsToDisplay.contains("incorrect");
                boolean displayKappa = m_metricsToDisplay.contains("kappa");
                boolean displayTotalCost = m_metricsToDisplay.contains("total cost");
                boolean displayAverageCost = m_metricsToDisplay.contains("average cost");
                if (displayCorrect) {
                    text.append("Correctly Classified Instances     ");
                    text.append(Utils.doubleToString(correct(), 12, 4) + "     " + Utils.doubleToString(pctCorrect(), 12, 4) + " %\n");
                }
                if (displayIncorrect) {
                    text.append("Incorrectly Classified Instances   ");
                    text.append(Utils.doubleToString(incorrect(), 12, 4) + "     " + Utils.doubleToString(pctIncorrect(), 12, 4) + " %\n");
                }
                if (displayKappa) {
                    text.append("Kappa statistic                    ");
                    text.append(Utils.doubleToString(kappa(), 12, 4) + "\n");
                }
                if (m_CostMatrix != null) {
                    if (displayTotalCost) {
                        text.append("Total Cost                         ");
                        text.append(Utils.doubleToString(totalCost(), 12, 4) + "\n");
                    }
                    if (displayAverageCost) {
                        text.append("Average Cost                       ");
                        text.append(Utils.doubleToString(avgCost(), 12, 4) + "\n");
                    }
                }
                if (printComplexityStatistics) {
                    boolean displayKBRelative = m_metricsToDisplay.contains("kb relative");
                    boolean displayKBInfo = m_metricsToDisplay.contains("kb information");
                    if (displayKBRelative) {
                        text.append("K&B Relative Info Score            ");
                        text.append(Utils.doubleToString(KBRelativeInformation(), 12, 4) + " %\n");
                    }
                    if (displayKBInfo) {
                        text.append("K&B Information Score              ");
                        text.append(Utils.doubleToString(KBInformation(), 12, 4) + " bits");
                        text.append(Utils.doubleToString(KBMeanInformation(), 12, 4) + " bits/instance\n");
                    }
                }
                if (m_pluginMetrics != null) {
                    for (AbstractEvaluationMetric m : m_pluginMetrics) {
                        if (m instanceof StandardEvaluationMetric && m.appliesToNominalClass() && !m.appliesToNumericClass()) {
                            String metricName = m.getMetricName().toLowerCase();
                            boolean display = m_metricsToDisplay.contains(metricName);
                            // toSummaryString() method
                            if (display) {
                                String formattedS = ((StandardEvaluationMetric) m).toSummaryString();
                                text.append(formattedS);
                            }
                        }
                    }
                }
            } else {
                boolean displayCorrelation = m_metricsToDisplay.contains("correlation");
                if (displayCorrelation) {
                    text.append("Correlation coefficient            ");
                    text.append(Utils.doubleToString(correlationCoefficient(), 12, 4) + "\n");
                }
                if (m_pluginMetrics != null) {
                    for (AbstractEvaluationMetric m : m_pluginMetrics) {
                        if (m instanceof StandardEvaluationMetric && !m.appliesToNominalClass() && m.appliesToNumericClass()) {
                            String metricName = m.getMetricName().toLowerCase();
                            boolean display = m_metricsToDisplay.contains(metricName);
                            if (display) {
                                String formattedS = ((StandardEvaluationMetric) m).toSummaryString();
                                text.append(formattedS);
                            }
                        }
                    }
                }
            }
            if (printComplexityStatistics && m_ComplexityStatisticsAvailable) {
                boolean displayComplexityOrder0 = m_metricsToDisplay.contains("complexity 0");
                boolean displayComplexityScheme = m_metricsToDisplay.contains("complexity scheme");
                boolean displayComplexityImprovement = m_metricsToDisplay.contains("complexity improvement");
                if (displayComplexityOrder0) {
                    text.append("Class complexity | order 0         ");
                    text.append(Utils.doubleToString(SFPriorEntropy(), 12, 4) + " bits");
                    text.append(Utils.doubleToString(SFMeanPriorEntropy(), 12, 4) + " bits/instance\n");
                }
                if (displayComplexityScheme) {
                    text.append("Class complexity | scheme          ");
                    text.append(Utils.doubleToString(SFSchemeEntropy(), 12, 4) + " bits");
                    text.append(Utils.doubleToString(SFMeanSchemeEntropy(), 12, 4) + " bits/instance\n");
                }
                if (displayComplexityImprovement) {
                    text.append("Complexity improvement     (Sf)    ");
                    text.append(Utils.doubleToString(SFEntropyGain(), 12, 4) + " bits");
                    text.append(Utils.doubleToString(SFMeanEntropyGain(), 12, 4) + " bits/instance\n");
                }
            }
            if (printComplexityStatistics && m_pluginMetrics != null) {
                for (AbstractEvaluationMetric m : m_pluginMetrics) {
                    if (m instanceof InformationTheoreticEvaluationMetric) {
                        if ((m_ClassIsNominal && m.appliesToNominalClass()) || (!m_ClassIsNominal && m.appliesToNumericClass())) {
                            String metricName = m.getMetricName().toLowerCase();
                            boolean display = m_metricsToDisplay.contains(metricName);
                            List<String> statNames = m.getStatisticNames();
                            for (String s : statNames) {
                                display = (display && m_metricsToDisplay.contains(s.toLowerCase()));
                            }
                            if (display) {
                                String formattedS = ((InformationTheoreticEvaluationMetric) m).toSummaryString();
                                text.append(formattedS);
                            }
                        }
                    }
                }
            }
            boolean displayMAE = m_metricsToDisplay.contains("mae");
            boolean displayRMSE = m_metricsToDisplay.contains("rmse");
            boolean displayRAE = m_metricsToDisplay.contains("rae");
            boolean displayRRSE = m_metricsToDisplay.contains("rrse");
            if (displayMAE) {
                text.append("Mean absolute error                ");
                text.append(Utils.doubleToString(meanAbsoluteError(), 12, 4) + "\n");
            }
            if (displayRMSE) {
                text.append("Root mean squared error            ");
                text.append(Utils.doubleToString(rootMeanSquaredError(), 12, 4) + "\n");
            }
            if (!m_NoPriors) {
                if (displayRAE) {
                    text.append("Relative absolute error            ");
                    text.append(Utils.doubleToString(relativeAbsoluteError(), 12, 4) + " %\n");
                }
                if (displayRRSE) {
                    text.append("Root relative squared error        ");
                    text.append(Utils.doubleToString(rootRelativeSquaredError(), 12, 4) + " %\n");
                }
            }
            if (m_pluginMetrics != null) {
                for (AbstractEvaluationMetric m : m_pluginMetrics) {
                    if (m instanceof StandardEvaluationMetric && m.appliesToNominalClass() && m.appliesToNumericClass()) {
                        String metricName = m.getMetricName().toLowerCase();
                        boolean display = m_metricsToDisplay.contains(metricName);
                        List<String> statNames = m.getStatisticNames();
                        for (String s : statNames) {
                            display = (display && m_metricsToDisplay.contains(s.toLowerCase()));
                        }
                        if (display) {
                            String formattedS = ((StandardEvaluationMetric) m).toSummaryString();
                            text.append(formattedS);
                        }
                    }
                }
            }
            if (m_CoverageStatisticsAvailable) {
                boolean displayCoverage = m_metricsToDisplay.contains("coverage");
                boolean displayRegionSize = m_metricsToDisplay.contains("region size");
                if (displayCoverage) {
                    text.append("Coverage of cases (" + Utils.doubleToString(m_ConfLevel, 4, 2) + " level)     ");
                    text.append(Utils.doubleToString(coverageOfTestCasesByPredictedRegions(), 12, 4) + " %\n");
                }
                if (!m_NoPriors) {
                    if (displayRegionSize) {
                        text.append("Mean rel. region size (" + Utils.doubleToString(m_ConfLevel, 4, 2) + " level) ");
                        text.append(Utils.doubleToString(sizeOfPredictedRegions(), 12, 4) + " %\n");
                    }
                }
            }
        }
        if (Utils.gr(unclassified(), 0)) {
            text.append("UnClassified Instances             ");
            text.append(Utils.doubleToString(unclassified(), 12, 4) + "     " + Utils.doubleToString(pctUnclassified(), 12, 4) + " %\n");
        }
        text.append("Total Number of Instances          ");
        text.append(Utils.doubleToString(m_WithClass, 12, 4) + "\n");
        if (m_MissingClass > 0) {
            text.append("Ignored Class Unknown Instances            ");
            text.append(Utils.doubleToString(m_MissingClass, 12, 4) + "\n");
        }
    } catch (Exception ex) {
        // Should never occur since the class is known to be nominal
        // here
        System.err.println("Arggh - Must be a bug in Evaluation class");
        ex.printStackTrace();
    }
    return text.toString();
}
