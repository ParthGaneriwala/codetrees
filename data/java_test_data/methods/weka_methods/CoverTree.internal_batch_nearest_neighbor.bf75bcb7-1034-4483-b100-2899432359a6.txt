protected void internal_batch_nearest_neighbor(final int k, final CoverTreeNode query_node, Stack<Stack<d_node>> cover_sets, Stack<d_node> zero_set, int current_scale, int max_scale, MyHeap upper_k, Stack<NeighborList> results) throws Exception {
    if (current_scale > max_scale) {
        // All remaining points are in the zero
        // set.
        brute_nearest(k, query_node, zero_set, upper_k, results);
    } else {
        // Our query_node has too much scale. Reduce.
        if (query_node.scale <= current_scale && query_node.scale != 100) {
            // amk14comment:if
            // j>=i
            // in
            // paper
            CoverTreeNode query_chi;
            Stack<d_node> new_zero_set = new Stack<d_node>();
            Stack<Stack<d_node>> new_cover_sets = new Stack<Stack<d_node>>();
            MyHeap new_upper_k = new MyHeap(k);
            for (int i = 1; i < query_node.num_children; i++) {
                // processing
                // child_1 and
                // onwards
                query_chi = query_node.children.element(i);
                setter(new_upper_k, upper_k.peek().distance + query_chi.parent_dist, k);
                // copy the zero set that satisfy a certain bound to the new zero set
                copy_zero_set(query_chi, new_upper_k, zero_set, new_zero_set);
                // copy the coversets[current_scale] nodes that satisfy a certain
                // bound to the new_cover_sets[current_scale]
                copy_cover_sets(query_chi, new_upper_k, cover_sets, new_cover_sets, current_scale, max_scale);
                // search for the query_node child in the nodes nearer to it.
                internal_batch_nearest_neighbor(k, query_chi, new_cover_sets, new_zero_set, current_scale, max_scale, new_upper_k, results);
            }
            new_cover_sets = null;
            new_zero_set = null;
            new_upper_k = null;
            // now doing child_0 //which is the parent itself, that's why we don't
            // need new_zero_set or new_cover_sets
            internal_batch_nearest_neighbor(k, query_node.children.element(0), cover_sets, zero_set, current_scale, max_scale, upper_k, results);
        } else {
            // reduce cover set scale -- amk14comment: if j<i in paper
            Stack<d_node> cover_set_i = getCoverSet(current_scale, cover_sets);
            // println("sorting");
            halfsort(cover_set_i);
            max_scale = descend(query_node, upper_k, current_scale, max_scale, cover_sets, zero_set);
            cover_set_i.clear();
            current_scale++;
            internal_batch_nearest_neighbor(k, query_node, cover_sets, zero_set, current_scale, max_scale, upper_k, results);
        }
    }
}
