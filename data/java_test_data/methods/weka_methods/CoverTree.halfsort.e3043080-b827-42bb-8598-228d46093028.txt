/**
 * Half-sorts a cover set, so that nodes nearer to the query are at the front.
 *
 * @param cover_set The cover set to sort.
 */
protected void halfsort(Stack<d_node> cover_set) {
    if (cover_set.length <= 1) {
        return;
    }
    int start = 0;
    int hi = cover_set.length - 1;
    int right = hi;
    int left;
    while (right > start) {
        int mid = start + ((hi - start) >> 1);
        boolean jumpover = false;
        if (compare(mid, start, cover_set) < 0.0) {
            SWAP(mid, start, cover_set);
        }
        if (compare(hi, mid, cover_set) < 0.0) {
            SWAP(mid, hi, cover_set);
        } else {
            jumpover = true;
        }
        if (!jumpover && compare(mid, start, cover_set) < 0.0) {
            SWAP(mid, start, cover_set);
        }
        ;
        left = start + 1;
        right = hi - 1;
        do {
            while (compare(left, mid, cover_set) < 0.0) {
                left++;
            }
            while (compare(mid, right, cover_set) < 0.0) {
                right--;
            }
            if (left < right) {
                SWAP(left, right, cover_set);
                if (mid == left) {
                    mid = right;
                } else if (mid == right) {
                    mid = left;
                }
                left++;
                right--;
            } else if (left == right) {
                left++;
                right--;
                break;
            }
        } while (left <= right);
        hi = right;
    }
}
