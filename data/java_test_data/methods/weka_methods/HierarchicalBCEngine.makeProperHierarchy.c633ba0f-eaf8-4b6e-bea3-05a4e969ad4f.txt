protected void makeProperHierarchy() {
    processGraph();
    m_progress.setValue(1);
    m_progress.setString("Removing Cycles");
    // ****removing cycles
    removeCycles();
    m_progress.setValue(2);
    m_progress.setString("Assigning levels to nodes");
    // ****Assigning vertical level to each node
    int[] nodesLevel = new int[m_nodes.size()];
    int depth = 0;
    for (int i = 0; i < graphMatrix.length; i++) {
        assignLevels(nodesLevel, depth, i, 0);
    }
    for (int i = 0; i < nodesLevel.length; i++) {
        if (nodesLevel[i] == 0) {
            int min = 65536;
            for (int j = 0; j < graphMatrix[i].length; j++) {
                if (graphMatrix[i][j] == DIRECTED) {
                    if (min > nodesLevel[j]) {
                        min = nodesLevel[j];
                    }
                }
            }
            // and it is not a lone parent with no children
            if (min != 65536 && min > 1) {
                nodesLevel[i] = min - 1;
            }
        }
    }
    // System.out.println("");
    int maxLevel = 0;
    for (int element : nodesLevel) {
        if (element > maxLevel) {
            maxLevel = element;
        // System.out.println( ((GraphNode)m_nodes.get(i)).ID+" "+i+">"+
        // nodesLevel[i]);
        }
    }
    int[] levelCounts = new int[maxLevel + 1];
    for (int i = 0; i < nodesLevel.length; i++) {
        levelCounts[nodesLevel[i]]++;
    }
    // System.out.println("------------------------------------------");
    // ****Assigning nodes to each level
    int[] levelsCounter = new int[maxLevel + 1];
    nodeLevels = new int[maxLevel + 1][];
    for (int i = 0; i < nodesLevel.length; i++) {
        if (nodeLevels[nodesLevel[i]] == null) {
            nodeLevels[nodesLevel[i]] = new int[levelCounts[nodesLevel[i]]];
        }
        // nodeLevels[nodesLevel[i]].addElement(new Integer(i));
        // System.out.println(((GraphNode)m_nodes.get(i)).ID+" "+
        // nodesLevel[i]+">"+levelCounts[nodesLevel[i]]);
        nodeLevels[nodesLevel[i]][levelsCounter[nodesLevel[i]]++] = i;
    }
    m_progress.setValue(3);
    m_progress.setString("Removing gaps by adding dummy vertices");
    // *Making a proper Hierarchy by putting in dummy vertices to close all gaps
    if (m_jCbEdgeConcentration.isSelected()) {
        removeGapsWithEdgeConcentration(nodesLevel);
    } else {
        removeGaps(nodesLevel);
    }
    // ****by the Visualizer class to draw edges
    for (int i = 0; i < graphMatrix.length; i++) {
        GraphNode n = m_nodes.get(i);
        int sum = 0;
        for (int j = 0; j < graphMatrix[i].length; j++) {
            if (graphMatrix[i][j] != 0) {
                sum++;
            }
        }
        n.edges = new int[sum][2];
        for (int j = 0, k = 0; j < graphMatrix[i].length; j++) {
            if (graphMatrix[i][j] != 0) {
                n.edges[k][0] = j;
                n.edges[k][1] = graphMatrix[i][j];
                k++;
            }
        // n.edges = graphMatrix[i];
        }
    }
// Interconnection matrices at each level, 1 to n-1
// printMatrices(nodeLevels);
}
