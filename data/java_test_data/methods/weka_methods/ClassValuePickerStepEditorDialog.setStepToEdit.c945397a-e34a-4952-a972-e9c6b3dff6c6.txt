@Override
@SuppressWarnings("unchecked")
public void setStepToEdit(Step step) {
    copyOriginal(step);
    Instances incomingStructure = null;
    try {
        incomingStructure = step.getStepManager().getIncomingStructureForConnectionType(StepManager.CON_DATASET);
        if (incomingStructure == null) {
            incomingStructure = step.getStepManager().getIncomingStructureForConnectionType(StepManager.CON_TRAININGSET);
        }
        if (incomingStructure == null) {
            incomingStructure = step.getStepManager().getIncomingStructureForConnectionType(StepManager.CON_TESTSET);
        }
        if (incomingStructure == null) {
            incomingStructure = step.getStepManager().getIncomingStructureForConnectionType(StepManager.CON_INSTANCE);
        }
    } catch (WekaException ex) {
        showErrorDialog(ex);
    }
    if (incomingStructure != null) {
        if (incomingStructure.classIndex() < 0) {
            showInfoDialog("No class attribute is set in the data", "ClassValuePicker", true);
            add(new JLabel("No class attribute set in data"), BorderLayout.CENTER);
        } else if (incomingStructure.classAttribute().isNumeric()) {
            showInfoDialog("Cant set class value - class is numeric!", "ClassValuePicker", true);
            add(new JLabel("Can't set class value - class is numeric"), BorderLayout.CENTER);
        } else {
            m_classValueCombo.setEditable(true);
            m_classValueCombo.setToolTipText("Class label. /first, /last and /<num> " + "can be used to specify the first, last or specific index " + "of the label to use respectively");
            for (int i = 0; i < incomingStructure.classAttribute().numValues(); i++) {
                m_classValueCombo.addItem(incomingStructure.classAttribute().value(i));
            }
            String stepL = ((ClassValuePicker) getStepToEdit()).getClassValue();
            if (stepL != null && stepL.length() > 0) {
                m_classValueCombo.setSelectedItem(stepL);
            }
            JPanel p = new JPanel(new BorderLayout());
            p.setBorder(BorderFactory.createTitledBorder("Choose class value"));
            p.add(m_classValueCombo, BorderLayout.NORTH);
            createAboutPanel(step);
            add(p, BorderLayout.CENTER);
        }
    } else {
        super.setStepToEdit(step);
    }
}
