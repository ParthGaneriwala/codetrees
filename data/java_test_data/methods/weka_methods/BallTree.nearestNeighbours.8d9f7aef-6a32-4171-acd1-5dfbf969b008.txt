protected void nearestNeighbours(MyHeap heap, BallNode node, Instance target, int k) throws Exception {
    double distance = Double.NEGATIVE_INFINITY;
    if (heap.totalSize() >= k)
        distance = m_DistanceFunction.distance(target, node.getPivot());
    // The radius is not squared so need to take sqrt before comparison
    if (distance > -0.000001 && Math.sqrt(heap.peek().distance) < distance - node.getRadius()) {
        return;
    } else if (node.m_Left != null && node.m_Right != null) {
        // a leaf
        if (m_TreeStats != null) {
            m_TreeStats.incrIntNodeCount();
        }
        double leftPivotDist = Math.sqrt(m_DistanceFunction.distance(target, node.m_Left.getPivot(), Double.POSITIVE_INFINITY));
        double rightPivotDist = Math.sqrt(m_DistanceFunction.distance(target, node.m_Right.getPivot(), Double.POSITIVE_INFINITY));
        double leftBallDist = leftPivotDist - node.m_Left.getRadius();
        double rightBallDist = rightPivotDist - node.m_Right.getRadius();
        // if target is inside both balls then see which center is closer
        if (leftBallDist < 0 && rightBallDist < 0) {
            if (leftPivotDist < rightPivotDist) {
                nearestNeighbours(heap, node.m_Left, target, k);
                nearestNeighbours(heap, node.m_Right, target, k);
            } else {
                nearestNeighbours(heap, node.m_Right, target, k);
                nearestNeighbours(heap, node.m_Left, target, k);
            }
        } else // else see which ball is closer (if dist < 0 target is inside a ball, and
        // hence the ball is closer).
        {
            if (leftBallDist < rightBallDist) {
                nearestNeighbours(heap, node.m_Left, target, k);
                nearestNeighbours(heap, node.m_Right, target, k);
            } else {
                nearestNeighbours(heap, node.m_Right, target, k);
                nearestNeighbours(heap, node.m_Left, target, k);
            }
        }
    } else if (node.m_Left != null || node.m_Right != null) {
        // assignment
        throw new Exception("Error: Only one leaf of the built ball tree is " + "assigned. Please check code.");
    } else if (node.m_Left == null && node.m_Right == null) {
        // leaf
        if (m_TreeStats != null) {
            m_TreeStats.updatePointCount(node.numInstances());
            m_TreeStats.incrLeafCount();
        }
        for (int i = node.m_Start; i <= node.m_End; i++) {
            if (// for hold-one-out cross-validation
            target == m_Instances.instance(m_InstList[i]))
                continue;
            if (heap.totalSize() < k) {
                distance = m_DistanceFunction.distance(target, m_Instances.instance(m_InstList[i]), Double.POSITIVE_INFINITY, m_Stats);
                heap.put(m_InstList[i], distance);
            } else {
                MyHeapElement head = heap.peek();
                distance = m_DistanceFunction.distance(target, m_Instances.instance(m_InstList[i]), head.distance, m_Stats);
                if (distance < head.distance) {
                    heap.putBySubstitute(m_InstList[i], distance);
                } else if (distance == head.distance) {
                    heap.putKthNearest(m_InstList[i], distance);
                }
            }
        // end else(heap.totalSize())
        }
    }
// end else if node is a leaf
}
