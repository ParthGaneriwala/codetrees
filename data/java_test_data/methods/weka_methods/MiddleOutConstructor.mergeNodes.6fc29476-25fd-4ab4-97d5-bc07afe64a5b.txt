protected BallNode mergeNodes(Vector<TempNode> list, int startIdx, int endIdx) throws Exception {
    for (int i = 0; i < list.size(); i++) {
        TempNode n = list.get(i);
        n.anchor = calcPivot(n.points, new MyIdxList(), m_Instances);
        n.radius = calcRadius(n.points, new MyIdxList(), n.anchor, m_Instances);
    }
    // tmpVolume, minVolume;
    double minRadius, tmpRadius;
    Instance pivot, minPivot = null;
    TempNode parent;
    int min1 = -1, min2 = -1;
    while (list.size() > 1) {
        // main merging loop
        minRadius = Double.POSITIVE_INFINITY;
        for (int i = 0; i < list.size(); i++) {
            TempNode first = list.get(i);
            for (int j = i + 1; j < list.size(); j++) {
                TempNode second = list.get(j);
                pivot = calcPivot(first, second, m_Instances);
                // calcRadius(first.points,
                tmpRadius = calcRadius(first, second);
                // m_Instances);
                if (tmpRadius < minRadius) {
                    // (tmpVolume < minVolume) {
                    // minVolume = tmpVolume;
                    minRadius = tmpRadius;
                    minPivot = pivot;
                    min1 = i;
                    min2 = j;
                // minInstList = tmpInstList;
                }
            }
        // end for(j)
        }
        // end for(i)
        parent = new TempNode();
        parent.left = list.get(min1);
        parent.right = list.get(min2);
        parent.anchor = minPivot;
        parent.radius = calcRadius(parent.left.points, parent.right.points, minPivot, // minRadius;
        m_Instances);
        parent.points = parent.left.points.append(parent.left.points, parent.right.points);
        list.remove(min1);
        list.remove(min2 - 1);
        list.add(parent);
    }
    // end while
    TempNode tmpRoot = list.get(list.size() - 1);
    if ((endIdx - startIdx + 1) != tmpRoot.points.length()) {
        throw new Exception("Root nodes instance list is of irregular length. " + "Please check code. Length should " + "be: " + (endIdx - startIdx + 1) + " whereas it is found to be: " + tmpRoot.points.length());
    }
    for (int i = 0; i < tmpRoot.points.length(); i++) {
        m_InstList[startIdx + i] = tmpRoot.points.get(i).idx;
    }
    BallNode node = makeBallTreeNodes(tmpRoot, startIdx, endIdx, 0);
    return node;
}
