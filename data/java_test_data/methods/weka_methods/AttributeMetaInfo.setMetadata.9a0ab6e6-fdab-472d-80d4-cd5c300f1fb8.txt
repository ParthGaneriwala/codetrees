/**
 * Sets the metadata for the attribute. Processes the strings stored in the
 * metadata of the attribute so that the properties can be set up for the
 * easy-access metadata methods. Any strings sought that are omitted will
 * cause default values to be set.
 *
 * The following properties are recognised: ordering, averageable, zeropoint,
 * regular, weight, and range.
 *
 * All other properties can be queried and handled appropriately by classes
 * calling the getMetadata() method.
 *
 * @param metadata the metadata
 * @throws IllegalArgumentException if the properties are not consistent
 */
private void setMetadata(ProtectedProperties metadata, Attribute att) {
    m_Metadata = metadata;
    if (att.m_Type == Attribute.DATE) {
        m_Ordering = Attribute.ORDERING_ORDERED;
        m_IsRegular = true;
        m_IsAveragable = false;
        m_HasZeropoint = false;
    } else {
        // get ordering
        String orderString = m_Metadata.getProperty("ordering", "");
        // numeric ordered attributes are averagable and zeropoint by default
        String def;
        if (att.m_Type == Attribute.NUMERIC && orderString.compareTo("modulo") != 0 && orderString.compareTo("symbolic") != 0) {
            def = "true";
        } else {
            def = "false";
        }
        // determine boolean states
        m_IsAveragable = (m_Metadata.getProperty("averageable", def).compareTo("true") == 0);
        m_HasZeropoint = (m_Metadata.getProperty("zeropoint", def).compareTo("true") == 0);
        // averagable or zeropoint implies regular
        if (m_IsAveragable || m_HasZeropoint) {
            def = "true";
        }
        m_IsRegular = (m_Metadata.getProperty("regular", def).compareTo("true") == 0);
        // determine ordering
        if (orderString.compareTo("symbolic") == 0) {
            m_Ordering = Attribute.ORDERING_SYMBOLIC;
        } else if (orderString.compareTo("ordered") == 0) {
            m_Ordering = Attribute.ORDERING_ORDERED;
        } else if (orderString.compareTo("modulo") == 0) {
            m_Ordering = Attribute.ORDERING_MODULO;
        } else {
            if (att.m_Type == Attribute.NUMERIC || m_IsAveragable || m_HasZeropoint) {
                m_Ordering = Attribute.ORDERING_ORDERED;
            } else {
                m_Ordering = Attribute.ORDERING_SYMBOLIC;
            }
        }
    }
    // consistency checks
    if (m_IsAveragable && !m_IsRegular) {
        throw new IllegalArgumentException("An averagable attribute must be" + " regular");
    }
    if (m_HasZeropoint && !m_IsRegular) {
        throw new IllegalArgumentException("A zeropoint attribute must be" + " regular");
    }
    if (m_IsRegular && m_Ordering == Attribute.ORDERING_SYMBOLIC) {
        throw new IllegalArgumentException("A symbolic attribute cannot be" + " regular");
    }
    if (m_IsAveragable && m_Ordering != Attribute.ORDERING_ORDERED) {
        throw new IllegalArgumentException("An averagable attribute must be" + " ordered");
    }
    if (m_HasZeropoint && m_Ordering != Attribute.ORDERING_ORDERED) {
        throw new IllegalArgumentException("A zeropoint attribute must be" + " ordered");
    }
    // determine weight
    att.m_Weight = 1.0;
    String weightString = m_Metadata.getProperty("weight");
    if (weightString != null) {
        try {
            att.m_Weight = Double.valueOf(weightString).doubleValue();
        } catch (NumberFormatException e) {
            // Check if value is really a number
            throw new IllegalArgumentException("Not a valid attribute weight: '" + weightString + "'");
        }
    }
    // determine numeric range
    if (att.m_Type == Attribute.NUMERIC) {
        setNumericRange(m_Metadata.getProperty("range"));
    }
}
