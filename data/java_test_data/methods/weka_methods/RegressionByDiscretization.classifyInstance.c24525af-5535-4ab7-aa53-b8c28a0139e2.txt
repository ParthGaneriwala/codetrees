public double classifyInstance(Instance instance) throws Exception {
    // Make sure structure of class attribute correct
    m_Discretizer.input(instance);
    m_Discretizer.batchFinished();
    // (Instance)instance.copy();
    Instance newInstance = m_Discretizer.output();
    if (m_OldIndexToNewIndex != null) {
        newInstance.setClassValue(m_OldIndexToNewIndex[(int) newInstance.classValue()]);
    }
    newInstance.setDataset(m_DiscretizedHeader);
    double[] probs = m_Classifier.distributionForInstance(newInstance);
    if (!m_MinimizeAbsoluteError) {
        // Compute actual prediction
        double prediction = 0, probSum = 0;
        for (int j = 0; j < probs.length; j++) {
            prediction += probs[j] * m_ClassMeans[j];
            probSum += probs[j];
        }
        return prediction / probSum;
    } else {
        // Get density estimator
        UnivariateQuantileEstimator e = (UnivariateQuantileEstimator) getDensityEstimator(instance, true);
        // Return estimate
        return e.predictQuantile(0.5);
    }
}
