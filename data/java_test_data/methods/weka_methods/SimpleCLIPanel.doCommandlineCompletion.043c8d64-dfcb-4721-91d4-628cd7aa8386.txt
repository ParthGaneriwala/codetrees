public void doCommandlineCompletion(KeyEvent e) {
    if (e.getSource() == m_Input) {
        switch(e.getKeyCode()) {
            // completion
            case KeyEvent.VK_TAB:
                if (e.getModifiers() == 0) {
                    // it might take a while before we determined all of the possible
                    // matches (Java doesn't have an application wide cursor handling??)
                    m_Input.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                    m_OutputArea.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                    try {
                        String txt = m_Input.getText();
                        // java call?
                        if (txt.trim().startsWith("java ")) {
                            int pos = m_Input.getCaretPosition();
                            int nonNameCharPos = -1;
                            // i.e., " or blank
                            for (int i = pos - 1; i >= 0; i--) {
                                if ((txt.charAt(i) == '"') || (txt.charAt(i) == ' ')) {
                                    nonNameCharPos = i;
                                    break;
                                }
                            }
                            if (nonNameCharPos > -1) {
                                String search = txt.substring(nonNameCharPos + 1, pos);
                                // find matches and common prefix
                                Vector<String> list = m_Completion.getMatches(search);
                                String common = m_Completion.getCommonPrefix(list);
                                // just extending by separator is not a real extension
                                if ((search.toLowerCase() + File.separator).equals(common.toLowerCase())) {
                                    common = search;
                                }
                                // can we complete the string?
                                if (common.length() > search.length()) {
                                    try {
                                        m_Input.getDocument().remove(nonNameCharPos + 1, search.length());
                                        m_Input.getDocument().insertString(nonNameCharPos + 1, common, null);
                                    } catch (Exception ex) {
                                        ex.printStackTrace();
                                    }
                                } else // ambigiuous? -> print matches
                                if (list.size() > 1) {
                                    System.out.println("\nPossible matches:");
                                    for (int i = 0; i < list.size(); i++) {
                                        System.out.println("  " + list.get(i));
                                    }
                                } else {
                                // nothing found, don't do anything
                                }
                            }
                        }
                    } finally {
                        // set cursor back to default
                        m_Input.setCursor(null);
                        m_OutputArea.setCursor(null);
                    }
                }
                break;
            // delete last part up to next blank or dot
            case KeyEvent.VK_BACK_SPACE:
                if (e.getModifiers() == KeyEvent.ALT_MASK) {
                    String txt = m_Input.getText();
                    int pos = m_Input.getCaretPosition();
                    // skip whitespaces
                    int start = pos;
                    start--;
                    while (start >= 0) {
                        if ((txt.charAt(start) == '.') || (txt.charAt(start) == ' ') || (txt.charAt(start) == '\\') || (txt.charAt(start) == '/')) {
                            start--;
                        } else {
                            break;
                        }
                    }
                    // find first blank or dot back from position
                    int newPos = -1;
                    for (int i = start; i >= 0; i--) {
                        if ((txt.charAt(i) == '.') || (txt.charAt(i) == ' ') || (txt.charAt(i) == '\\') || (txt.charAt(i) == '/')) {
                            newPos = i;
                            break;
                        }
                    }
                    // remove string
                    try {
                        m_Input.getDocument().remove(newPos + 1, pos - newPos - 1);
                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }
                }
                break;
        }
    }
}
