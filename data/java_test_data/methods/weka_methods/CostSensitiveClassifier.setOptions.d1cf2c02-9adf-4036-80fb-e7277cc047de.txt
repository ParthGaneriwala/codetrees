public void setOptions(String[] options) throws Exception {
    setMinimizeExpectedCost(Utils.getFlag('M', options));
    String costFile = Utils.getOption('C', options);
    if (costFile.length() != 0) {
        try {
            setCostMatrix(new CostMatrix(new BufferedReader(new FileReader(costFile))));
        } catch (Exception ex) {
            // now flag as possible old format cost matrix. Delay cost matrix
            // loading until buildClassifer is called
            setCostMatrix(null);
        }
        setCostMatrixSource(new SelectedTag(MATRIX_SUPPLIED, TAGS_MATRIX_SOURCE));
        m_CostFile = costFile;
    } else {
        setCostMatrixSource(new SelectedTag(MATRIX_ON_DEMAND, TAGS_MATRIX_SOURCE));
    }
    String demandDir = Utils.getOption('N', options);
    if (demandDir.length() != 0) {
        setOnDemandDirectory(new File(demandDir));
    }
    String cost_matrix = Utils.getOption("cost-matrix", options);
    if (cost_matrix.length() != 0) {
        StringWriter writer = new StringWriter();
        CostMatrix.parseMatlab(cost_matrix).write(writer);
        setCostMatrix(new CostMatrix(new StringReader(writer.toString())));
        setCostMatrixSource(new SelectedTag(MATRIX_SUPPLIED, TAGS_MATRIX_SOURCE));
    }
    super.setOptions(options);
    Utils.checkForRemainingOptions(options);
}
