public void printClassifications(Classifier classifier, DataSource testset) throws Exception {
    int i;
    Instances test;
    Instance inst;
    i = 0;
    testset.reset();
    if (classifier instanceof BatchPredictor && ((BatchPredictor) classifier).implementsMoreEfficientBatchPrediction()) {
        test = testset.getDataSet();
        if (!(classifier instanceof InputMappedClassifier)) {
            try {
                test.setClassIndex(m_Header.classIndex());
            } catch (Exception e) {
                throw new IllegalArgumentException("AbstractOutput: header of test set does not match.");
            }
            if (!(test.equalHeaders(m_Header))) {
                throw new IllegalArgumentException("AbstractOutput: header of test set does not match.");
            }
        }
        double[][] predictions = ((BatchPredictor) classifier).distributionsForInstances(test);
        for (i = 0; i < test.numInstances(); i++) {
            printClassification(predictions[i], preProcessInstance(test.instance(i), classifier), i);
        }
    } else {
        test = testset.getStructure();
        if (!(classifier instanceof InputMappedClassifier)) {
            try {
                test.setClassIndex(m_Header.classIndex());
            } catch (Exception e) {
                throw new IllegalArgumentException("AbstractOutput: header of test set does not match.");
            }
            if (!(test.equalHeaders(m_Header))) {
                throw new IllegalArgumentException("AbstractOutput: header of test set does not match.");
            }
        }
        while (testset.hasMoreElements(test)) {
            inst = testset.nextElement(test);
            printClassification(classifier.distributionForInstance(inst), preProcessInstance(inst, classifier), i);
            i++;
        }
    }
}
