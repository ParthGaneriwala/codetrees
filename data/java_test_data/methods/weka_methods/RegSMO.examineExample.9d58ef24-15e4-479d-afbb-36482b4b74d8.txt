protected int examineExample(int i2) throws Exception {
    // alpha2, alpha2* = Lagrange multipliers for i2
    double alpha2 = m_alpha[i2];
    double alpha2Star = m_alphaStar[i2];
    // C2, C2* = Constraints for i2
    double C2 = m_C;
    double C2Star = m_C;
    // phi2 = SVM output on point[i2] ? y2 (in error cache)
    double phi2 = m_error[i2];
    // phi2b contains the error, taking the offset in account
    double phi2b = phi2 - m_b;
    // (?-phi2 > epsilon && alpha2 > 0 ))
    if ((phi2b > m_epsilon && alpha2Star < C2Star) || (phi2b < m_epsilon && alpha2Star > 0) || (-phi2b > m_epsilon && alpha2 < C2) || (-phi2b > m_epsilon && alpha2 > 0)) {
        // if (number of non?zero & non?C alpha > 1)
        // i1 = result of second choice heuristic
        // if takeStep(i1,i2) return 1
        // endif
        int i1 = secondChoiceHeuristic(i2);
        if (i1 >= 0 && (takeStep(i1, i2, alpha2, alpha2Star, phi2) > 0)) {
            return 1;
        }
        // endloop
        for (i1 = 0; i1 < m_target.length; i1++) {
            if ((m_alpha[i1] > 0 && m_alpha[i1] < m_C) || (m_alphaStar[i1] > 0 && m_alphaStar[i1] < m_C)) {
                if (takeStep(i1, i2, alpha2, alpha2Star, phi2) > 0) {
                    return 1;
                }
            }
        }
        // endloop
        for (i1 = 0; i1 < m_target.length; i1++) {
            if (takeStep(i1, i2, alpha2, alpha2Star, phi2) > 0) {
                return 1;
            }
        }
    // endif
    }
    // return 0
    return 0;
// endprocedure
}
