public static int[] drawSparseSample(int n, int N, Random r) throws IllegalArgumentException {
    if ((n > N) || (n < 0) || (N < 0)) {
        throw new IllegalArgumentException("drawSparseSample: cannot sample" + n + " points from " + N + " points.");
    }
    // This will hold the n selected indices
    final int[] vals = new int[n];
    final HashMap<Integer, Integer> map = new HashMap<>(2 * n);
    int selected = 0;
    // Do partial Fisher-Yates shuffle and use HashMap to keep track of what has been moved
    for (int i = N; i > N - n; i--) {
        final Integer index_rand = r.nextInt(i);
        final Integer iObj = i - 1;
        final Integer stored_at_index_from_end = map.remove(iObj);
        if (index_rand.equals(iObj)) {
            // Last element selected? (Making sure we use correct comparison!)
            vals[selected++] = (stored_at_index_from_end != null) ? stored_at_index_from_end : iObj;
        } else {
            final Integer stored_at_index_rand = map.put(index_rand, (stored_at_index_from_end != null) ? stored_at_index_from_end : iObj);
            vals[selected++] = (stored_at_index_rand != null) ? stored_at_index_rand : index_rand;
        }
    }
    return vals;
}
