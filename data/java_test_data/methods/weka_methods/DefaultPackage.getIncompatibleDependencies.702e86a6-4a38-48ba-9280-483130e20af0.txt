@Override
public List<Dependency> getIncompatibleDependencies(List<Package> packages) throws Exception {
    List<Dependency> incompatible = new ArrayList<Dependency>();
    String dependencies = getPackageMetaDataElement("Depends").toString();
    if (dependencies != null) {
        StringTokenizer tok = new StringTokenizer(dependencies, ",");
        while (tok.hasMoreTokens()) {
            String nextT = tok.nextToken().trim();
            String[] splitD = splitNameVersion(nextT);
            // check only if a version number was supplied in the dependency list.
            if (splitD[1] != null && splitD[2] != null) {
                for (Package p : packages) {
                    String packageNameI = p.getPackageMetaDataElement("PackageName").toString();
                    if (packageNameI.trim().equalsIgnoreCase(splitD[0].trim())) {
                        // now check version against this one
                        String versionI = p.getPackageMetaDataElement("Version").toString().trim();
                        if (splitD.length == 3) {
                            VersionPackageConstraint.VersionComparison constraint = VersionPackageConstraint.getVersionComparison(splitD[1]);
                            if (!VersionPackageConstraint.checkConstraint(versionI, constraint, splitD[2])) {
                                VersionPackageConstraint vpc = new VersionPackageConstraint(p);
                                vpc.setVersionConstraint(constraint);
                                incompatible.add(new Dependency(this, vpc));
                            }
                        } else {
                            VersionRangePackageConstraint versionRConstraint = new VersionRangePackageConstraint(p);
                            VersionPackageConstraint.VersionComparison comp1 = VersionPackageConstraint.getVersionComparison(splitD[1]);
                            VersionPackageConstraint.VersionComparison comp2 = VersionPackageConstraint.getVersionComparison(splitD[3]);
                            versionRConstraint.setRangeConstraint(splitD[2], comp1, splitD[4], comp2);
                            incompatible.add(new Dependency(this, versionRConstraint));
                        }
                    /*
               * int comparisonResult =
               * VersionPackageConstraint.compare(versionI, splitD[2]); if
               * (!versionOK(splitD[1], comparisonResult)) {
               * incompatible.add(p); }
               */
                    }
                }
            }
        }
    }
    return incompatible;
}
