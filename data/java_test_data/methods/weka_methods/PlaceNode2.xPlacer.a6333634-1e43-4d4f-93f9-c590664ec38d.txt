/*
   * private void thinner() { //what this function does is it retains the
   * symmetry of the // parent node about the children but the children are no
   * longer evenly //spaced this stops children from being pushed too far to the
   * sides //,note this algorithm may need the method altered as it may //
   * require heavy optimisation to go at any decent speed
   * 
   * Node r,s; Edge e; double parent_x; for (int noa = group_num - 1;noa >=
   * 0;noa--) { Vector shifts = new Vector(20,10); shifts.addElement(0); int
   * g_num = 0;//this is the offset from groups.m_start to get the right 1 r =
   * groups[noa].m_p; parent_x = r.getCenter(); for (int nob = 1;(e =
   * r.getChild(nob)) != null;nob++) { double margin; s = e.getTarget(); margin
   * = s_getCenter - r.getChild(nob - 1).getTarget().getCenter-1 -
   * shift.elementAt(nob-1); if (margin > 0) { margin =
   * check_down(s,g_num,margin); if (margin > 0) { shift.addElement(-margin); }
   * else { shift.addElement(0); } } else { shift.addElement(0); } if
   * (s.getChild(0) != null) { g_num++; } } } }
   * 
   * 
   * private double check_down(Node r,int gn,double m) { //note i need to know
   * where the children of the //other changers are to properly overlap check
   * //to do this i think the best way is to go up the other group //parents
   * line and see if it goes through the current group //this means to save time
   * i need to know the level that is being //worked with along with the group
   * 
   * Edge e; for (int noa = 0;(e = r.getChild(noa)) != null;noa++) {
   * 
   * } }
   */
private void xPlacer(int start) {
    // this can be one of a few x_placers (the first)
    // it will work by placing 1 space inbetween each node
    // ie the first at 0 the second at 1 and so on
    // then it will add to this value the place of the parent
    // node - half of the size
    // i will break this up into several functions
    // first the gap setter;
    // then the shifter
    // it will require a vector shift function added to the node class
    // i will write an additional shifter for the untangler
    // for its particular situation
    Node r;
    Edge e;
    if (m_groupNum > 0) {
        m_groups[0].m_p.setCenter(0);
        for (int noa = start; noa < m_groupNum; noa++) {
            int nob, alter = 0;
            double c = m_groups[noa].m_gap;
            r = m_groups[noa].m_p;
            for (nob = 0; (e = r.getChild(nob)) != null; nob++) {
                if (e.getTarget().getParent(0) == e) {
                    e.getTarget().setCenter(nob * c);
                } else {
                    alter++;
                }
            }
            m_groups[noa].m_size = (nob - 1 - alter) * c;
            xShift(noa);
        }
    }
}
