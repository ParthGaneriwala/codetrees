public static double gainRatio(double[][] matrix) {
    double preSplit = 0, postSplit = 0, splitEnt = 0, sumForRow, sumForColumn, total = 0, infoGain;
    // Compute entropy before split
    for (int i = 0; i < matrix[0].length; i++) {
        sumForColumn = 0;
        for (int j = 0; j < matrix.length; j++) sumForColumn += matrix[j][i];
        preSplit += lnFunc(sumForColumn);
        total += sumForColumn;
    }
    preSplit -= lnFunc(total);
    // Compute entropy after split and split entropy
    for (int i = 0; i < matrix.length; i++) {
        sumForRow = 0;
        for (int j = 0; j < matrix[0].length; j++) {
            postSplit += lnFunc(matrix[i][j]);
            sumForRow += matrix[i][j];
        }
        splitEnt += lnFunc(sumForRow);
    }
    postSplit -= splitEnt;
    splitEnt -= lnFunc(total);
    infoGain = preSplit - postSplit;
    if (Utils.eq(splitEnt, 0))
        return 0;
    return infoGain / splitEnt;
}
