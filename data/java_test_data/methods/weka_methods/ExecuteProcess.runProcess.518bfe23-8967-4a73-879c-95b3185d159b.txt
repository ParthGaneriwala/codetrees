protected void runProcess(ProcessBuilder builder, Map<String, String> varsToSet, Map<String, Map<String, String>> propsToSet, Map<String, LinkedHashSet<Data>> results) throws IOException, InterruptedException, WekaException {
    Map<String, String> env = builder.environment();
    // add environment vars
    Environment flowEnv = getStepManager().getExecutionEnvironment().getEnvironmentVariables();
    if (flowEnv != null) {
        Set<String> vars = flowEnv.getVariableNames();
        for (String var : vars) {
            env.put(var, flowEnv.getVariableValue(var));
        }
    }
    StringWriter stdOutWriter = new StringWriter();
    StringWriter stdErrWriter = new StringWriter();
    try {
        m_stdOutbuffer = new StringBuffer();
        m_stdErrBuffer = new StringBuffer();
        m_runningProcess = builder.start();
        copy(m_runningProcess.getInputStream(), stdOutWriter);
        copy(m_runningProcess.getErrorStream(), stdErrWriter);
        int status = m_runningProcess.waitFor();
        m_stdOutbuffer = stdOutWriter.getBuffer();
        m_stdErrBuffer = stdErrWriter.getBuffer();
        if (status == 0) {
            handleOutputSuccess(varsToSet, propsToSet, results, Utils.joinOptions(builder.command().toArray(new String[0])));
        } else {
            handleOutputFailure(status, varsToSet, propsToSet, results, Utils.joinOptions(builder.command().toArray(new String[0])));
        }
    } catch (IOException ex) {
        if (m_raiseAnExceptionOnCommandFailure) {
            throw ex;
        }
        getStepManager().logWarning("Command: " + Utils.joinOptions(builder.command().toArray(new String[0])) + " failed with exception:\n" + LogManager.stackTraceToString(ex));
        handleOutputFailure(1, varsToSet, propsToSet, results, Utils.joinOptions(builder.command().toArray(new String[0])));
    }
}
