@Override
public void acceptDataSet(DataSetEvent e) {
    m_busy = true;
    if (m_log != null && !e.isStructureOnly()) {
        m_log.statusMessage(statusMessagePrefix() + "Processing batch...");
    }
    init(new Instances(e.getDataSet(), 0));
    if (m_root != null) {
        Instances trueBatch = new Instances(e.getDataSet(), 0);
        Instances falseBatch = new Instances(e.getDataSet(), 0);
        for (int i = 0; i < e.getDataSet().numInstances(); i++) {
            Instance current = e.getDataSet().instance(i);
            boolean result = m_root.evaluate(current, true);
            if (result) {
                if (m_indexOfTrueStep >= 0) {
                    trueBatch.add(current);
                }
            } else {
                if (m_indexOfFalseStep >= 0) {
                    falseBatch.add(current);
                }
            }
        }
        if (m_indexOfTrueStep >= 0) {
            DataSetEvent d = new DataSetEvent(this, trueBatch);
            ((DataSourceListener) m_downstream[m_indexOfTrueStep]).acceptDataSet(d);
        }
        if (m_indexOfFalseStep >= 0) {
            DataSetEvent d = new DataSetEvent(this, falseBatch);
            ((DataSourceListener) m_downstream[m_indexOfFalseStep]).acceptDataSet(d);
        }
    } else {
        if (m_indexOfTrueStep >= 0) {
            DataSetEvent d = new DataSetEvent(this, e.getDataSet());
            ((DataSourceListener) m_downstream[m_indexOfTrueStep]).acceptDataSet(d);
        }
    }
    if (m_log != null && !e.isStructureOnly()) {
        m_log.statusMessage(statusMessagePrefix() + "Finished");
    }
    m_busy = false;
}
