public static Vector<String> find(Class<?> cls, String pkgname) {
    Vector<String> result;
    int i;
    Class<?> clsNew;
    // already cached?
    result = getCache(cls, pkgname);
    if (result == null) {
        if (VERBOSE) {
            System.out.println("Searching for '" + cls.getName() + "' in '" + pkgname + "':");
        }
        result = new Vector<String>();
        if (m_ClassCache.getClassnames(pkgname) != null) {
            result.addAll(m_ClassCache.getClassnames(pkgname));
        }
        // check classes
        i = 0;
        while (i < result.size()) {
            try {
                // clsNew = Class.forName(result.get(i));
                clsNew = WekaPackageClassLoaderManager.forName(result.get(i));
                // no abstract classes
                if (Modifier.isAbstract(clsNew.getModifiers())) {
                    m_ClassCache.remove(result.get(i));
                    result.remove(i);
                } else // must implement interface
                if ((cls.isInterface()) && (!InheritanceUtils.hasInterface(cls, clsNew))) {
                    result.remove(i);
                } else // must be derived from class
                if ((!cls.isInterface()) && (!InheritanceUtils.isSubclass(cls, clsNew))) {
                    result.remove(i);
                } else {
                    i++;
                }
            } catch (Exception e) {
                System.out.println("Accessing class '" + result.get(i) + "' resulted in error:");
                e.printStackTrace();
            }
        }
        // sort result
        Collections.sort(result, new StringCompare());
        // add to cache
        addCache(cls, pkgname, result);
    }
    return result;
}
