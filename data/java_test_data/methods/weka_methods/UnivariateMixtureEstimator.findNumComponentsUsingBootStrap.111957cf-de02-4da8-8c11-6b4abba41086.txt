protected int findNumComponentsUsingBootStrap() {
    if (m_NumComponents > 0) {
        return m_NumComponents;
    }
    if (m_MaxNumComponents <= 1) {
        return 1;
    }
    double bestLogLikelihood = -Double.MAX_VALUE;
    int bestNumComponents = 1;
    for (int i = 1; i <= m_MaxNumComponents; i++) {
        double logLikelihood = 0;
        for (int k = 0; k < m_NumBootstrapRuns; k++) {
            boolean[] inBag = new boolean[m_NumValues];
            double[][] output = resampleWithWeights(m_Random, inBag);
            MM mixtureModel = buildModel(i, output[0], output[1]);
            double locLogLikelihood = 0;
            double totalWeight = 0;
            for (int j = 0; j < m_NumValues; j++) {
                if (!inBag[j]) {
                    double weight = m_Weights[j];
                    locLogLikelihood += weight * mixtureModel.logDensity(m_Values[j]);
                    totalWeight += weight;
                }
            }
            locLogLikelihood /= totalWeight;
            logLikelihood += locLogLikelihood;
        }
        logLikelihood /= (double) m_NumBootstrapRuns;
        if (m_Debug) {
            System.err.println("Loglikelihood: " + logLikelihood + "\tNumber of components: " + i);
        }
        if (logLikelihood > bestLogLikelihood) {
            bestNumComponents = i;
            bestLogLikelihood = logLikelihood;
        }
    }
    return bestNumComponents;
}
