public static String[] getOptions(Object target, Class<?> targetClazz) {
    ArrayList<String> options = new ArrayList<String>();
    try {
        Object[] args = {};
        Class<?> parent = targetClazz.getSuperclass();
        PropertyDescriptor[] properties = getPropertyDescriptors(targetClazz, parent);
        for (PropertyDescriptor p : properties) {
            Method getter = p.getReadMethod();
            Method setter = p.getWriteMethod();
            if (getter == null || setter == null) {
                continue;
            }
            OptionMetadata parameterDescription = null;
            parameterDescription = getter.getAnnotation(OptionMetadata.class);
            if (parameterDescription == null) {
                parameterDescription = setter.getAnnotation(OptionMetadata.class);
            }
            if (parameterDescription != null && parameterDescription.commandLineParamName().length() > 0) {
                Object value = getter.invoke(target, args);
                if (value != null) {
                    if (!parameterDescription.commandLineParamIsFlag()) {
                        options.add("-" + parameterDescription.commandLineParamName());
                    }
                    if (value.getClass().isArray()) {
                        if (parameterDescription.commandLineParamIsFlag()) {
                            throw new IllegalArgumentException("Getter method for a command " + "line flag should return a boolean value");
                        }
                        if (((Object[]) value).length == 0) {
                            // remove the initial option identifier (added above)
                            // as the array is empty
                            options.remove(options.size() - 1);
                        }
                        int index = 0;
                        for (Object element : (Object[]) value) {
                            if (index > 0) {
                                options.add("-" + parameterDescription.commandLineParamName());
                            }
                            if (element instanceof OptionHandler) {
                                options.add(getOptionStringForOptionHandler((OptionHandler) element));
                            } else {
                                options.add(element.toString());
                            }
                            index++;
                        }
                    } else if (value instanceof OptionHandler) {
                        if (parameterDescription.commandLineParamIsFlag()) {
                            throw new IllegalArgumentException("Getter method for a command " + "line flag should return a boolean value");
                        }
                        options.add(getOptionStringForOptionHandler((OptionHandler) value));
                    } else if (value instanceof SelectedTag) {
                        options.add("" + ((SelectedTag) value).getSelectedTag().getReadable());
                    } else {
                        // check for boolean/flag
                        if (parameterDescription.commandLineParamIsFlag()) {
                            if (!(value instanceof Boolean)) {
                                throw new IllegalArgumentException("Getter method for a command " + "line flag should return a boolean value");
                            }
                            if (((Boolean) value).booleanValue()) {
                                options.add("-" + parameterDescription.commandLineParamName());
                            }
                        } else {
                            if (value.toString().length() > 0) {
                                options.add(value.toString());
                            } else {
                                // don't allow empty strings
                                options.remove(options.size() - 1);
                            }
                        }
                    }
                }
            }
        }
    } catch (Exception ex) {
        ex.printStackTrace();
    }
    return options.toArray(new String[options.size()]);
}
