@Override
public String toString() {
    StringBuffer text = new StringBuffer();
    if (m_trainInstances == null) {
        text.append("\tWrapper subset evaluator has not been built yet\n");
    } else {
        text.append("\tWrapper Subset Evaluator\n");
        text.append("\tLearning scheme: " + getClassifier().getClass().getName() + "\n");
        text.append("\tScheme options: ");
        String[] classifierOptions = new String[0];
        if (m_BaseClassifier instanceof OptionHandler) {
            classifierOptions = ((OptionHandler) m_BaseClassifier).getOptions();
            for (String classifierOption : classifierOptions) {
                text.append(classifierOption + " ");
            }
        }
        text.append("\n");
        String IRClassL = "";
        if (m_IRClassVal >= 0) {
            IRClassL = "(class value: " + m_trainInstances.classAttribute().value(m_IRClassVal) + ")";
        }
        switch(m_evaluationMeasure.getID()) {
            case EVAL_DEFAULT:
            case EVAL_ACCURACY:
                if (m_trainInstances.attribute(m_classIndex).isNumeric()) {
                    text.append("\tSubset evaluation: RMSE\n");
                } else {
                    text.append("\tSubset evaluation: classification accuracy\n");
                }
                break;
            case EVAL_RMSE:
                if (m_trainInstances.attribute(m_classIndex).isNumeric()) {
                    text.append("\tSubset evaluation: RMSE\n");
                } else {
                    text.append("\tSubset evaluation: RMSE (probability estimates)\n");
                }
                break;
            case EVAL_MAE:
                if (m_trainInstances.attribute(m_classIndex).isNumeric()) {
                    text.append("\tSubset evaluation: MAE\n");
                } else {
                    text.append("\tSubset evaluation: MAE (probability estimates)\n");
                }
                break;
            case EVAL_FMEASURE:
                text.append("\tSubset evaluation: F-measure " + (m_IRClassVal >= 0 ? IRClassL : "") + "\n");
                break;
            case EVAL_AUC:
                text.append("\tSubset evaluation: area under the ROC curve " + (m_IRClassVal >= 0 ? IRClassL : "") + "\n");
                break;
            case EVAL_AUPRC:
                text.append("\tSubset evaluation: area under the precision-recall curve " + (m_IRClassVal >= 0 ? IRClassL : "") + "\n");
                break;
            case EVAL_CORRELATION:
                text.append("\tSubset evaluation: correlation coefficient\n");
                break;
            default:
                text.append("\tSubset evaluation: " + m_evaluationMeasure.getReadable());
                if (((PluginTag) m_evaluationMeasure).getMetric() instanceof InformationRetrievalEvaluationMetric) {
                    text.append(" " + (m_IRClassVal > 0 ? IRClassL : ""));
                }
                text.append("\n");
                break;
        }
        text.append("\tNumber of folds for accuracy estimation: " + m_folds + "\n");
    }
    return text.toString();
}
