public static Exception checkForNewPackages(PrintStream... progress) {
    if (m_offline) {
        return null;
    }
    Exception problem = null;
    Map<String, String> localPackageNameList = getPackageList(true);
    if (localPackageNameList == null) {
        System.err.println("Local package list is missing, trying a " + "cache refresh to restore...");
        refreshCache(progress);
        localPackageNameList = getPackageList(true);
        if (localPackageNameList == null) {
            // quietly return and see if we can continue anyway
            return null;
        }
    }
    Map<String, String> repositoryPackageNameList = getPackageList(false);
    if (repositoryPackageNameList == null) {
        // quietly return and see if we can continue anyway
        return null;
    }
    if (repositoryPackageNameList.keySet().size() != localPackageNameList.keySet().size()) {
        // Force a cache refresh...
        if (repositoryPackageNameList.keySet().size() < localPackageNameList.keySet().size()) {
            for (PrintStream p : progress) {
                p.println("Some packages no longer exist at the repository. " + "Refreshing cache...");
            }
        } else {
            for (PrintStream p : progress) {
                p.println("There are new packages at the repository. " + "Refreshing cache...");
            }
        }
        problem = refreshCache(progress);
    } else {
        // check for new versions of packages
        boolean refresh = false;
        for (String localPackage : localPackageNameList.keySet()) {
            String localVersion = localPackageNameList.get(localPackage);
            String repoVersion = repositoryPackageNameList.get(localPackage);
            if (repoVersion == null) {
                continue;
            }
            // a difference here indicates a newer version on the server
            if (!localVersion.equals(repoVersion)) {
                refresh = true;
                break;
            }
        }
        if (refresh) {
            for (PrintStream p : progress) {
                p.println("There are newer versions of existing packages " + "at the repository. Refreshing cache...");
            }
            problem = refreshCache(progress);
        }
    }
    return problem;
}
