public void addUndoPoint() throws Exception {
    if (!ExplorerDefaults.get("enableUndo", "true").equalsIgnoreCase("true")) {
        return;
    }
    if (getMainApplication() != null) {
        boolean undoEnabled = getMainApplication().getApplicationSettings().getSetting(getPerspectiveID(), PreprocessDefaults.ENABLE_UNDO_KEY, PreprocessDefaults.ENABLE_UNDO, Environment.getSystemWide());
        if (!undoEnabled) {
            return;
        }
    }
    if (m_Instances != null) {
        // create temporary file
        File tempFile = File.createTempFile("weka", SerializedInstancesLoader.FILE_EXTENSION);
        tempFile.deleteOnExit();
        boolean nonDefaultTmpDir = false;
        String dir = "";
        if (getMainApplication() != null) {
            dir = getMainApplication().getApplicationSettings().getSetting(getPerspectiveID(), PreprocessDefaults.UNDO_DIR_KEY, PreprocessDefaults.UNDO_DIR).toString();
            if (Environment.getSystemWide().containsEnvVariables(dir)) {
                dir = Environment.getSystemWide().substitute(dir);
            }
            if (!dir.equals(PreprocessDefaults.UNDO_DIR)) {
                nonDefaultTmpDir = true;
            }
        } else if (!ExplorerDefaults.get("undoDirectory", "%t").equalsIgnoreCase("%t")) {
            nonDefaultTmpDir = true;
            dir = ExplorerDefaults.get("undoDirectory", "%t");
        }
        if (nonDefaultTmpDir) {
            File undoDir = new File(dir);
            if (undoDir.exists()) {
                String fileName = tempFile.getName();
                File newFile = new File(dir + File.separator + fileName);
                if (undoDir.canWrite()) {
                    newFile.deleteOnExit();
                    tempFile = newFile;
                } else {
                    System.err.println("Explorer: it doesn't look like we have permission" + " to write to the user-specified undo directory " + "'" + dir + "'");
                }
            } else {
                System.err.println("Explorer: user-specified undo directory '" + dir + "' does not exist!");
            }
        }
        ObjectOutputStream oos = new ObjectOutputStream(new BufferedOutputStream(new FileOutputStream(tempFile)));
        oos.writeObject(m_Instances);
        oos.flush();
        oos.close();
        // update undo file list
        if (m_tempUndoFiles[m_tempUndoIndex] != null) {
            // remove undo points that are too old
            m_tempUndoFiles[m_tempUndoIndex].delete();
        }
        m_tempUndoFiles[m_tempUndoIndex] = tempFile;
        if (++m_tempUndoIndex >= m_tempUndoFiles.length) {
            // wrap pointer around
            m_tempUndoIndex = 0;
        }
        m_UndoBut.setEnabled(true);
    }
}
