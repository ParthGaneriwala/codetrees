@SuppressWarnings({ "deprecation", "unchecked" })
protected synchronized void aggregateEvalTask(Evaluation eval, Classifier classifier, Instances testData, ClassifierErrorsPlotInstances plotInstances, int setNum, int maxSetNum, String evalLabel) {
    m_eval.aggregate(eval);
    if (m_aggregatedPlotInstances == null) {
        // get these first so that the post-processing does not scale the sizes!!
        m_aggregatedPlotShapes = (ArrayList<Integer>) plotInstances.getPlotShapes().clone();
        m_aggregatedPlotSizes = (ArrayList<Object>) plotInstances.getPlotSizes().clone();
        // this calls the post-processing, so do this last
        m_aggregatedPlotInstances = new Instances(plotInstances.getPlotInstances());
    } else {
        // get these first so that post-processing does not scale sizes
        ArrayList<Object> tmpSizes = (ArrayList<Object>) plotInstances.getPlotSizes().clone();
        ArrayList<Integer> tmpShapes = (ArrayList<Integer>) plotInstances.getPlotShapes().clone();
        Instances temp = plotInstances.getPlotInstances();
        for (int i = 0; i < temp.numInstances(); i++) {
            m_aggregatedPlotInstances.add(temp.get(i));
            m_aggregatedPlotShapes.add(tmpShapes.get(i));
            m_aggregatedPlotSizes.add(tmpSizes.get(i));
        }
    }
    m_setsComplete++;
    if (m_logger != null) {
        if (m_setsComplete < maxSetNum) {
            m_logger.statusMessage(statusMessagePrefix() + "Completed (" + m_setsComplete + ").");
        }
    }
    // if (ce.getSetNumber() == ce.getMaxSetNumber()) {
    if (m_setsComplete == maxSetNum) {
        try {
            AggregateableClassifierErrorsPlotInstances aggPlot = new AggregateableClassifierErrorsPlotInstances();
            aggPlot.setInstances(testData);
            aggPlot.setPlotInstances(m_aggregatedPlotInstances);
            aggPlot.setPlotShapes(m_aggregatedPlotShapes);
            aggPlot.setPlotSizes(m_aggregatedPlotSizes);
            aggPlot.setPointSizeProportionalToMargin(m_errorPlotPointSizeProportionalToMargin);
            // triggers scaling of shape sizes
            aggPlot.getPlotInstances();
            String textTitle = "";
            textTitle += classifier.getClass().getName();
            String textOptions = "";
            if (classifier instanceof OptionHandler) {
                textOptions = Utils.joinOptions(((OptionHandler) classifier).getOptions());
            }
            textTitle = textTitle.substring(textTitle.lastIndexOf('.') + 1, textTitle.length());
            if (evalLabel != null && evalLabel.length() > 0) {
                if (!textTitle.toLowerCase().startsWith(evalLabel.toLowerCase())) {
                    textTitle = evalLabel + " : " + textTitle;
                }
            }
            String resultT = "=== Evaluation result ===\n\n" + "Scheme: " + textTitle + "\n" + ((textOptions.length() > 0) ? "Options: " + textOptions + "\n" : "") + "Relation: " + testData.relationName() + "\n\n" + m_eval.toSummaryString();
            if (testData.classAttribute().isNominal()) {
                resultT += "\n" + m_eval.toClassDetailsString() + "\n" + m_eval.toMatrixString();
            }
            TextEvent te = new TextEvent(ClassifierPerformanceEvaluator.this, resultT, textTitle);
            notifyTextListeners(te);
            // set up visualizable errors
            if (m_visualizableErrorListeners.size() > 0) {
                PlotData2D errorD = new PlotData2D(m_aggregatedPlotInstances);
                errorD.setShapeSize(m_aggregatedPlotSizes);
                errorD.setShapeType(m_aggregatedPlotShapes);
                errorD.setPlotName(textTitle + " " + textOptions);
                /*
           * PlotData2D errorD = m_PlotInstances.getPlotData( textTitle + " " +
           * textOptions);
           */
                VisualizableErrorEvent vel = new VisualizableErrorEvent(ClassifierPerformanceEvaluator.this, errorD);
                notifyVisualizableErrorListeners(vel);
                m_PlotInstances.cleanUp();
            }
            if (testData.classAttribute().isNominal() && m_thresholdListeners.size() > 0) {
                ThresholdCurve tc = new ThresholdCurve();
                Instances result = tc.getCurve(m_eval.predictions(), 0);
                result.setRelationName(testData.relationName());
                PlotData2D pd = new PlotData2D(result);
                String htmlTitle = "<html><font size=-2>" + textTitle;
                String newOptions = "";
                if (classifier instanceof OptionHandler) {
                    String[] options = ((OptionHandler) classifier).getOptions();
                    if (options.length > 0) {
                        for (int ii = 0; ii < options.length; ii++) {
                            if (options[ii].length() == 0) {
                                continue;
                            }
                            if (options[ii].charAt(0) == '-' && !(options[ii].charAt(1) >= '0' && options[ii].charAt(1) <= '9')) {
                                newOptions += "<br>";
                            }
                            newOptions += options[ii];
                        }
                    }
                }
                htmlTitle += " " + newOptions + "<br>" + " (class: " + testData.classAttribute().value(0) + ")" + "</font></html>";
                pd.setPlotName(textTitle + " (class: " + testData.classAttribute().value(0) + ")");
                pd.setPlotNameHTML(htmlTitle);
                boolean[] connectPoints = new boolean[result.numInstances()];
                for (int jj = 1; jj < connectPoints.length; jj++) {
                    connectPoints[jj] = true;
                }
                pd.setConnectPoints(connectPoints);
                ThresholdDataEvent rde = new ThresholdDataEvent(ClassifierPerformanceEvaluator.this, pd, testData.classAttribute());
                notifyThresholdListeners(rde);
            }
            if (m_logger != null) {
                m_logger.statusMessage(statusMessagePrefix() + "Finished.");
            }
        } catch (Exception ex) {
            if (m_logger != null) {
                m_logger.logMessage("[ClassifierPerformanceEvaluator] " + statusMessagePrefix() + " problem constructing evaluation results. " + ex.getMessage());
            }
            ex.printStackTrace();
        } finally {
            m_visual.setStatic();
            // save memory
            m_PlotInstances = null;
            m_setsComplete = 0;
            m_tasks = null;
            m_aggregatedPlotInstances = null;
        }
    }
}
