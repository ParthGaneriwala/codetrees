@Override
public void buildGenerator(Instances inputInstances) throws Exception {
    m_random = new Random(m_seed);
    m_instances = inputInstances;
    // m_standardDeviations = new double[m_instances.numAttributes()]; NOT USED
    m_globalMeansOrModes = new double[m_instances.numAttributes()];
    if (m_weightingDimensions == null) {
        m_weightingDimensions = new boolean[m_instances.numAttributes()];
    }
    /*
     * for (int i = 0; i < m_instances.numAttributes(); i++) { if (i !=
     * m_instances.classIndex()) { if (m_instances.attribute(i).isNumeric()) {
     * // global standard deviations double var = m_instances.variance(i); if
     * (var == 0) { var = m_minStdDev; } else { var = Math.sqrt(var); //
     * heuristic to take into account # instances and dimensions double adjust =
     * Math.pow((double) m_instances.numInstances(), 1.0 /
     * m_instances.numAttributes()); // double adjust =
     * m_instances.numInstances(); var /= adjust; } m_standardDeviations[i] =
     * var; } else { m_globalMeansOrModes[i] = m_instances.meanOrMode(i); } } }
     */
    for (int i = 0; i < m_instances.numAttributes(); i++) {
        if (i != m_instances.classIndex()) {
            m_globalMeansOrModes[i] = m_instances.meanOrMode(i);
        }
    }
    m_kernelParams = new double[m_instances.numInstances()][m_instances.numAttributes()];
    computeParams();
}
