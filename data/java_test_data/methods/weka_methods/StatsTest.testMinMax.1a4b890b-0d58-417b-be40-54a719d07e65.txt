public void testMinMax() {
    Stats stats;
    stats = getStats();
    // start off with small values:
    addWeightedStats(stats, smallWeightedValues);
    double max_simple = getWeightedMax(smallWeightedValues);
    double min_simple = getWeightedMin(smallWeightedValues);
    assertEquals("Incorrect min!", min_simple, stats.min);
    assertEquals("Incorrect max!", max_simple, stats.max);
    // change min/max
    assertTrue("Assumption violated in testcase!", max_simple < getWeightedMax(weightedValues1));
    assertTrue("Assumption violated in testcase!", min_simple > getWeightedMin(weightedValues1));
    addWeightedStats(stats, weightedValues1);
    max_simple = Math.max(max_simple, getWeightedMax(weightedValues1));
    min_simple = Math.min(min_simple, getWeightedMin(weightedValues1));
    assertEquals("Incorrect min!", min_simple, stats.min);
    assertEquals("Incorrect max!", max_simple, stats.max);
    // check that min/max don't change if existing values have been added
    addWeightedStats(stats, weightedValues1);
    assertEquals("Incorrect min!", min_simple, stats.min);
    assertEquals("Incorrect max!", max_simple, stats.max);
    // add different values, but don't change min/max
    addWeightedStats(stats, weightedValues2);
    // keep track of min/max of values_added \ values_subtracted
    double max_real = max_simple;
    double min_real = min_simple;
    max_simple = Math.max(max_simple, getWeightedMax(weightedValues2));
    min_simple = Math.min(min_simple, getWeightedMin(weightedValues2));
    assertEquals("Incorrect min!", min_simple, stats.min);
    assertEquals("Incorrect max!", max_simple, stats.max);
    // subtract existing values
    subtractWeightedStats(stats, weightedValues2);
    assertEquals("Assumption violated in testcase!", max_simple, max_real);
    assertEquals("Assumption violated in testcase!", min_simple, min_real);
    assertTrue("Incorrect min!", min_real >= stats.min && stats.min >= min_simple);
    assertTrue("Incorrect max!", max_real <= stats.max && stats.max <= max_simple);
    // add values after subtracting
    addWeightedStats(stats, weightedValues3);
    max_simple = Math.max(max_simple, getWeightedMax(weightedValues3));
    min_simple = Math.min(min_simple, getWeightedMin(weightedValues3));
    max_real = Math.max(max_real, getWeightedMax(weightedValues3));
    min_real = Math.min(min_real, getWeightedMin(weightedValues3));
    assertTrue("Incorrect min!", min_real >= stats.min && stats.min >= min_simple);
    assertTrue("Incorrect max!", max_real <= stats.max && stats.max <= max_simple);
    // add bigger values
    addWeightedStats(stats, bigWeightedValues);
    max_simple = Math.max(max_simple, getWeightedMax(bigWeightedValues));
    min_simple = Math.min(min_simple, getWeightedMin(bigWeightedValues));
    assertEquals("Incorrect min!", min_simple, stats.min);
    assertEquals("Incorrect max!", max_simple, stats.max);
    // subtract bigger values
    subtractWeightedStats(stats, weightedValues2);
    assertTrue("Assumption violated in testcase!", max_simple > max_real);
    assertTrue("Assumption violated in testcase!", min_simple < min_real);
    assertTrue("Incorrect min!", min_real >= stats.min && stats.min >= min_simple);
    assertTrue("Incorrect max!", max_real <= stats.max && stats.max <= max_simple);
}
