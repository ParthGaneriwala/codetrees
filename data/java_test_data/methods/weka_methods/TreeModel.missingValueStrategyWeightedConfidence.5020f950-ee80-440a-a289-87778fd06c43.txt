protected double[] missingValueStrategyWeightedConfidence(double[] instance, Attribute classAtt) throws Exception {
    if (classAtt.isNumeric()) {
        throw new Exception("[TreeNode] missing value strategy weighted confidence, " + "but class is numeric!");
    }
    double[] preds = null;
    TreeNode trueNode = null;
    boolean strategyInvoked = false;
    int nodeCount = 0;
    // look at the evaluation of the child predicates
    for (TreeNode c : m_childNodes) {
        if (c.getPredicate().evaluate(instance) == Predicate.Eval.TRUE) {
            // note the first child to evaluate to true
            if (trueNode == null) {
                trueNode = c;
            }
            nodeCount++;
        } else if (c.getPredicate().evaluate(instance) == Predicate.Eval.UNKNOWN) {
            strategyInvoked = true;
            nodeCount++;
        }
    }
    if (strategyInvoked) {
        // we expect to combine nodeCount distributions
        double[][] dists = new double[nodeCount][];
        double[] weights = new double[nodeCount];
        // collect the distributions and weights
        int count = 0;
        for (TreeNode c : m_childNodes) {
            if (c.getPredicate().evaluate(instance) == Predicate.Eval.TRUE || c.getPredicate().evaluate(instance) == Predicate.Eval.UNKNOWN) {
                weights[count] = c.getRecordCount();
                if (Utils.isMissingValue(weights[count])) {
                    throw new Exception("[TreeNode] weighted confidence missing value " + "strategy invoked, but no record count defined for node " + c.getID());
                }
                dists[count++] = c.score(instance, classAtt);
            }
        }
        // do the combination
        preds = new double[classAtt.numValues()];
        for (int i = 0; i < classAtt.numValues(); i++) {
            for (int j = 0; j < nodeCount; j++) {
                preds[i] += ((weights[j] / m_recordCount) * dists[j][i]);
            }
        }
    } else {
        if (trueNode != null) {
            preds = trueNode.score(instance, classAtt);
        } else {
            doNoTrueChild(classAtt, preds);
        }
    }
    return preds;
}
