@Override
protected Instance process(Instance instance) throws Exception {
    int i;
    double val;
    double factor;
    double[] result = new double[instance.numAttributes()];
    if (m_Decimals > -1) {
        factor = StrictMath.pow(10, m_Decimals);
    } else {
        factor = 1;
    }
    for (i = 0; i < instance.numAttributes(); i++) {
        // Save old value for the moment
        result[i] = instance.value(i);
        // only numeric attributes
        if (!instance.attribute(i).isNumeric()) {
            continue;
        }
        // out of range?
        if (!m_Cols.isInRange(i)) {
            continue;
        }
        // skip class?
        if ((instance.classIndex() == i) && (!m_IncludeClass)) {
            continue;
        }
        // too small?
        if (result[i] < m_MinThreshold) {
            if (getDebug()) {
                System.out.println("Too small: " + result[i] + " -> " + m_MinDefault);
            }
            result[i] = m_MinDefault;
        } else // too big?
        if (result[i] > m_MaxThreshold) {
            if (getDebug()) {
                System.out.println("Too big: " + result[i] + " -> " + m_MaxDefault);
            }
            result[i] = m_MaxDefault;
        } else // too close?
        if ((result[i] - m_CloseTo < m_CloseToTolerance) && (m_CloseTo - result[i] < m_CloseToTolerance) && (result[i] != m_CloseTo)) {
            if (getDebug()) {
                System.out.println("Too close: " + result[i] + " -> " + m_CloseToDefault);
            }
            result[i] = m_CloseToDefault;
        }
        // decimals?
        if (m_Decimals > -1 && !Utils.isMissingValue(result[i])) {
            val = result[i];
            val = StrictMath.round(val * factor) / factor;
            result[i] = val;
        }
    }
    return instance.copy(result);
}
