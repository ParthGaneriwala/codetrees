public void add(double value, double weight) {
    // treat as subtract
    if (weight < 0) {
        subtract(value, -weight);
        return;
    }
    // don't leave invalid state
    if (isInvalid())
        return;
    // go invalid
    if (Double.isInfinite(weight) || Double.isNaN(weight) || Double.isInfinite(value) || Double.isNaN(value)) {
        goInvalid();
        return;
    }
    // ignore
    if (weight == 0)
        return;
    double newCount = count + weight;
    if (count < 0 && (newCount > 0 || Utils.eq(newCount, 0))) {
        reset();
        return;
    }
    count = newCount;
    if (count < 0) {
        return;
    }
    double weightedValue = value * weight;
    sum += weightedValue;
    sumSq += value * weightedValue;
    if (Double.isNaN(mean)) {
        // For the first value the mean can suffer from loss of precision
        // so we treat it separately and make sure the calculation stays accurate
        mean = value;
        stdDevFactor = 0;
    } else {
        double delta = weight * (value - mean);
        mean += delta / count;
        stdDevFactor += delta * (value - mean);
    }
    if (Double.isNaN(min)) {
        min = max = value;
    } else if (value < min) {
        min = value;
    } else if (value > max) {
        max = value;
    }
}
