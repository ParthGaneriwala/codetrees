protected double kernelHelper(int n, char[] s, int endIndexS, char[] t, int endIndexT) {
    // which is the case here
    if (n <= 0) {
        return getReturnValue(n);
    }
    // also to contribute
    if (Math.min(endIndexS + 1, endIndexT + 1) < n) {
        return getReturnValue(n);
    }
    int adr = 0;
    if (m_useRecursionCache) {
        adr = m_multX * n + m_multY * endIndexS + m_multZ * endIndexT;
        if (cachekhK[adr % maxCache] == adr + 1) {
            return cachekh[adr % maxCache];
        }
    }
    // the tail-recursive function defined in [1] is turned into a
    // loop here, preventing stack overflows.
    // loop over s, nearly from the start (skip the first n-1 characters)
    // and only up until endIndexS, and recursively apply K''. Thus, every
    // character between n-1 and endIndexS in s is counted once as
    // being part of the subsequence match and once just as a gap.
    // In both cases lambda is multiplied with the result.
    double result = 0;
    /*
     * for (int iS = n-1; iS <= endIndexS;iS++) { result *= m_lambda; result +=
     * kernelHelper2(n,s,iS, t, endIndexT); } if (m_useRecursionCache) {
     * cachekhK[adr % maxCache]=adr+1; cachekh[adr % maxCache]=result; } return
     * result;
     */
    /* ^^^ again, above code segment does not store some intermediate results... */
    result = m_lambda * kernelHelper(n, s, endIndexS - 1, t, endIndexT) + kernelHelper2(n, s, endIndexS, t, endIndexT);
    if (m_useRecursionCache) {
        cachekhK[adr % maxCache] = adr + 1;
        cachekh[adr % maxCache] = result;
    }
    return result;
}
