protected Instances determineOutputFormat(Instances inputFormat) throws Exception {
    double cumulative;
    ArrayList<Attribute> attributes;
    int i;
    int j;
    StringBuffer attName;
    double[] coeff_mags;
    int num_attrs;
    int[] coeff_inds;
    double coeff_value;
    int numAttsLowerBound;
    if (m_Eigenvalues == null) {
        return inputFormat;
    }
    if (m_MaxAttributes > 0) {
        numAttsLowerBound = m_NumAttribs - m_MaxAttributes;
    } else {
        numAttsLowerBound = 0;
    }
    if (numAttsLowerBound < 0) {
        numAttsLowerBound = 0;
    }
    cumulative = 0.0;
    attributes = new ArrayList<Attribute>();
    for (i = m_NumAttribs - 1; i >= numAttsLowerBound; i--) {
        attName = new StringBuffer();
        // build array of coefficients
        coeff_mags = new double[m_NumAttribs];
        for (j = 0; j < m_NumAttribs; j++) {
            coeff_mags[j] = -Math.abs(m_Eigenvectors[j][m_SortedEigens[i]]);
        }
        num_attrs = (m_MaxAttrsInName > 0) ? Math.min(m_NumAttribs, m_MaxAttrsInName) : m_NumAttribs;
        // this array contains the sorted indices of the coefficients
        if (m_NumAttribs > 0) {
            // if m_maxAttrsInName > 0, sort coefficients by decreasing magnitude
            coeff_inds = Utils.sort(coeff_mags);
        } else {
            // if m_maxAttrsInName <= 0, use all coeffs in original order
            coeff_inds = new int[m_NumAttribs];
            for (j = 0; j < m_NumAttribs; j++) {
                coeff_inds[j] = j;
            }
        }
        // build final attName string
        for (j = 0; j < num_attrs; j++) {
            coeff_value = m_Eigenvectors[coeff_inds[j]][m_SortedEigens[i]];
            if (j > 0 && coeff_value >= 0) {
                attName.append("+");
            }
            attName.append(Utils.doubleToString(coeff_value, 5, 3) + inputFormat.attribute(coeff_inds[j]).name());
        }
        if (num_attrs < m_NumAttribs) {
            attName.append("...");
        }
        attributes.add(new Attribute(attName.toString()));
        cumulative += m_Eigenvalues[m_SortedEigens[i]];
        if ((cumulative / m_SumOfEigenValues) >= m_CoverVariance) {
            break;
        }
    }
    if (m_HasClass) {
        attributes.add((Attribute) m_TrainCopy.classAttribute().copy());
    }
    Instances outputFormat = new Instances(m_TrainCopy.relationName() + "_principal components", attributes, 0);
    // set the class to be the last attribute if necessary
    if (m_HasClass) {
        outputFormat.setClassIndex(outputFormat.numAttributes() - 1);
    }
    m_OutputNumAtts = outputFormat.numAttributes();
    return outputFormat;
}
