@Override
public void initializeClassifier(Instances data) throws Exception {
    m_numItsPerformed = 0;
    if (m_instances == null || m_instances.numInstances() == 0) {
        // can classifier handle the data?
        getCapabilities().testWithFail(data);
        // remove instances with missing class
        data = new Instances(data);
        data.deleteWithMissingClass();
        originalFormatData = data;
        m_ZeroR = new weka.classifiers.rules.ZeroR();
        m_ZeroR.buildClassifier(data);
        // only class? -> use ZeroR model
        if (data.numAttributes() == 1) {
            System.err.println("Cannot build model (only class attribute present in data!), " + "using ZeroR model instead!");
            m_useDefaultModel = true;
            return;
        } else {
            m_useDefaultModel = false;
        }
        m_epoch = 0;
        m_error = 0;
        m_instances = null;
        m_currentInstance = null;
        m_controlPanel = null;
        m_nodePanel = null;
        m_outputs = new NeuralEnd[0];
        m_inputs = new NeuralEnd[0];
        m_numAttributes = 0;
        m_numClasses = 0;
        m_neuralNodes = new NeuralConnection[0];
        m_selected = new ArrayList<NeuralConnection>(4);
        m_nextId = 0;
        m_stopIt = true;
        m_stopped = true;
        m_accepted = false;
        m_instances = new Instances(data);
        m_random = new Random(m_randomSeed);
        m_instances.randomize(m_random);
        if (m_useNomToBin) {
            m_nominalToBinaryFilter = new NominalToBinary();
            m_nominalToBinaryFilter.setInputFormat(m_instances);
            m_instances = Filter.useFilter(m_instances, m_nominalToBinaryFilter);
        }
        m_numAttributes = m_instances.numAttributes() - 1;
        m_numClasses = m_instances.numClasses();
        setClassType(m_instances);
        // this sets up the validation set.
        // numinval is needed later
        numInVal = (int) (m_valSize / 100.0 * m_instances.numInstances());
        if (m_valSize > 0) {
            if (numInVal == 0) {
                numInVal = 1;
            }
            valSet = new Instances(m_instances, 0, numInVal);
        }
        // /////////
        setupInputs();
        setupOutputs();
        if (m_autoBuild) {
            setupHiddenLayer();
        }
        // this sets up the gui for usage
        if (m_gui) {
            m_win = Utils.getWekaJFrame("Neural Network", null);
            m_win.addWindowListener(new WindowAdapter() {

                @Override
                public void windowClosing(WindowEvent e) {
                    boolean k = m_stopIt;
                    m_stopIt = true;
                    int well = JOptionPane.showConfirmDialog(m_win, "Are You Sure...\n" + "Click Yes To Accept" + " The Neural Network" + "\n Click No To Return", "Accept Neural Network", JOptionPane.YES_NO_OPTION);
                    if (well == 0) {
                        m_win.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                        m_accepted = true;
                        blocker(false);
                    } else {
                        m_win.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
                    }
                    m_stopIt = k;
                }
            });
            m_win.getContentPane().setLayout(new BorderLayout());
            m_nodePanel = new NodePanel();
            // without the following two lines, the
            // NodePanel.paintComponents(Graphics)
            // method will go berserk if the network doesn't fit completely: it will
            // get called on a constant basis, using 100% of the CPU
            // see the following forum thread:
            // http://forum.java.sun.com/thread.jspa?threadID=580929&messageID=2945011
            m_nodePanel.setPreferredSize(new Dimension(640, 480));
            m_nodePanel.revalidate();
            JScrollPane sp = new JScrollPane(m_nodePanel, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
            m_controlPanel = new ControlPanel();
            m_win.getContentPane().add(sp, BorderLayout.CENTER);
            m_win.getContentPane().add(m_controlPanel, BorderLayout.SOUTH);
            m_win.setSize(640, 480);
            m_win.setVisible(true);
        }
        // This sets up the initial state of the gui
        if (m_gui) {
            blocker(true);
            m_controlPanel.m_changeEpochs.setEnabled(false);
            m_controlPanel.m_changeLearning.setEnabled(false);
            m_controlPanel.m_changeMomentum.setEnabled(false);
        }
        // commences
        if (m_numeric) {
            setEndsToLinear();
        }
        if (m_accepted) {
            return;
        }
        // connections done.
        totalWeight = 0;
        totalValWeight = 0;
        driftOff = 0;
        lastRight = Double.POSITIVE_INFINITY;
        bestError = Double.POSITIVE_INFINITY;
        // ensure that at least 1 instance is trained through.
        if (numInVal == m_instances.numInstances()) {
            numInVal--;
        }
        if (numInVal < 0) {
            numInVal = 0;
        }
        for (int noa = numInVal; noa < m_instances.numInstances(); noa++) {
            if (!m_instances.instance(noa).classIsMissing()) {
                totalWeight += m_instances.instance(noa).weight();
            }
        }
        if (m_valSize != 0) {
            for (int noa = 0; noa < valSet.numInstances(); noa++) {
                if (!valSet.instance(noa).classIsMissing()) {
                    totalValWeight += valSet.instance(noa).weight();
                }
            }
        }
        m_stopped = false;
    }
}
