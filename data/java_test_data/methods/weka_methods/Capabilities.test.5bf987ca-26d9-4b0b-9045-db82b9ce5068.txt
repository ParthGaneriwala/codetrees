public boolean test(Instances data, int fromIndex, int toIndex) {
    // Do we actually want to check capabilities?
    if (doNotCheckCapabilities()) {
        return true;
    }
    int i;
    int n;
    int m;
    Attribute att;
    Instance inst;
    boolean testClass;
    Capabilities cap;
    boolean missing;
    Iterator<Capability> iter;
    // shall we test the data?
    if (!m_InstancesTest) {
        return true;
    }
    // no Capabilities? -> warning
    if ((m_Capabilities.size() == 0) || ((m_Capabilities.size() == 1) && handles(Capability.NO_CLASS))) {
        System.err.println(createMessage("No capabilities set!"));
    }
    // any attributes?
    if (toIndex - fromIndex < 0) {
        m_FailReason = new WekaException(createMessage("No attributes!"));
        return false;
    }
    // do wee need to test the class attribute, i.e., is the class attribute
    // within the range of attributes?
    testClass = (data.classIndex() > -1) && (data.classIndex() >= fromIndex) && (data.classIndex() <= toIndex);
    // attributes
    Class weightedAttributesHandler = getClass("weka.core.WeightedAttributesHandler");
    for (i = fromIndex; i <= toIndex; i++) {
        att = data.attribute(i);
        // class is handled separately
        if (i == data.classIndex()) {
            continue;
        }
        // check attribute types
        if (!test(att)) {
            return false;
        }
        if (att.weight() != 1.0) {
            if (INTERFACE_DEFINED_CAPABILITIES.contains(weightedAttributesHandler) && !m_InterfaceDefinedCapabilities.contains(weightedAttributesHandler)) {
                m_FailReason = new WekaException(createMessage("Some attribute weights are not equal to 1 and " + "scheme does not implement the WeightedAttributesHandler interface!"));
                return false;
            }
        }
    }
    // class
    if (!handles(Capability.NO_CLASS) && (data.classIndex() == -1)) {
        m_FailReason = new UnassignedClassException(createMessage("Class attribute not set!"));
        return false;
    }
    // special case: no class attribute can be handled
    if (handles(Capability.NO_CLASS) && (data.classIndex() > -1)) {
        cap = getClassCapabilities();
        cap.disable(Capability.NO_CLASS);
        iter = cap.capabilities();
        if (!iter.hasNext()) {
            m_FailReason = new WekaException(createMessage("Cannot handle any class attribute!"));
            return false;
        }
    }
    if (testClass && !handles(Capability.NO_CLASS)) {
        att = data.classAttribute();
        if (!test(att, true)) {
            return false;
        }
        // missing class labels
        if (m_MissingClassValuesTest) {
            if (!handles(Capability.MISSING_CLASS_VALUES)) {
                for (i = 0; i < data.numInstances(); i++) {
                    if (data.instance(i).classIsMissing()) {
                        m_FailReason = new WekaException(createMessage("Cannot handle missing class values!"));
                        return false;
                    }
                }
            } else {
                if (m_MinimumNumberInstancesTest) {
                    int hasClass = 0;
                    for (i = 0; i < data.numInstances(); i++) {
                        if (!data.instance(i).classIsMissing()) {
                            hasClass++;
                        }
                    }
                    // not enough instances with class labels?
                    if (hasClass < getMinimumNumberInstances()) {
                        m_FailReason = new WekaException(createMessage("Not enough training instances with class labels (required: " + getMinimumNumberInstances() + ", provided: " + hasClass + ")!"));
                        return false;
                    }
                }
            }
        }
    }
    // missing values and instance weights
    missing = false;
    Class weightedInstancesHandler = getClass("weka.core.WeightedInstancesHandler");
    for (i = 0; i < data.numInstances(); i++) {
        inst = data.instance(i);
        if (inst.weight() != 1.0) {
            if (INTERFACE_DEFINED_CAPABILITIES.contains(weightedInstancesHandler) && !m_InterfaceDefinedCapabilities.contains(weightedInstancesHandler)) {
                m_FailReason = new WekaException(createMessage("Some instance weights are not equal to 1 and " + "scheme does not implement the WeightedInstancesHandler interface!"));
                return false;
            }
        }
        if (m_MissingValuesTest) {
            if (!handles(Capability.MISSING_VALUES)) {
                if (inst instanceof SparseInstance) {
                    for (m = 0; m < inst.numValues(); m++) {
                        n = inst.index(m);
                        // out of scope?
                        if (n < fromIndex) {
                            continue;
                        }
                        if (n > toIndex) {
                            break;
                        }
                        // skip class
                        if (n == inst.classIndex()) {
                            continue;
                        }
                        if (inst.isMissing(n)) {
                            missing = true;
                            break;
                        }
                    }
                } else {
                    for (n = fromIndex; n <= toIndex; n++) {
                        // skip class
                        if (n == inst.classIndex()) {
                            continue;
                        }
                        if (inst.isMissing(n)) {
                            missing = true;
                            break;
                        }
                    }
                }
                if (missing) {
                    m_FailReason = new NoSupportForMissingValuesException(createMessage("Cannot handle missing values!"));
                    return false;
                }
            }
        }
    }
    // instances
    if (m_MinimumNumberInstancesTest) {
        if (data.numInstances() < getMinimumNumberInstances()) {
            m_FailReason = new WekaException(createMessage("Not enough training instances (required: " + getMinimumNumberInstances() + ", provided: " + data.numInstances() + ")!"));
            return false;
        }
    }
    // Multi-Instance? -> check structure (regardless of attribute range!)
    if (handles(Capability.ONLY_MULTIINSTANCE)) {
        // number of attributes?
        if (data.numAttributes() != 3) {
            m_FailReason = new WekaException(createMessage("Incorrect Multi-Instance format, must be 'bag-id, bag, class'!"));
            return false;
        }
        // type of attributes and position of class?
        if (!data.attribute(0).isNominal() || !data.attribute(1).isRelationValued() || (data.classIndex() != data.numAttributes() - 1)) {
            m_FailReason = new WekaException(createMessage("Incorrect Multi-Instance format, must be 'NOMINAL att, RELATIONAL att, CLASS att'!"));
            return false;
        }
        // check data immediately
        if (getOwner() instanceof MultiInstanceCapabilitiesHandler) {
            MultiInstanceCapabilitiesHandler handler = (MultiInstanceCapabilitiesHandler) getOwner();
            cap = handler.getMultiInstanceCapabilities();
            boolean result;
            if (data.numInstances() > 0 && data.attribute(1).numValues() > 0) {
                result = cap.test(data.attribute(1).relation(0));
            } else {
                result = cap.test(data.attribute(1).relation());
            }
            if (!result) {
                m_FailReason = cap.m_FailReason;
                return false;
            }
        }
    }
    // passed all tests!
    return true;
}
