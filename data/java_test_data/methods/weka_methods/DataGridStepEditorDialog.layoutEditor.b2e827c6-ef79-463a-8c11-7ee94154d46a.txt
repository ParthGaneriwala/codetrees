@Override
protected void layoutEditor() {
    initialize();
    m_upBut.setEnabled(false);
    m_downBut.setEnabled(false);
    JPanel mainHolder = new JPanel(new BorderLayout());
    JPanel controlHolder = new JPanel();
    controlHolder.setLayout(new BorderLayout());
    JPanel fieldHolder = new JPanel();
    fieldHolder.setLayout(new GridLayout(1, 0));
    JPanel attNameP = new JPanel(new BorderLayout());
    attNameP.setBorder(BorderFactory.createTitledBorder("Attribute name"));
    attNameP.add(m_attNameField, BorderLayout.CENTER);
    JPanel attTypeP = new JPanel(new BorderLayout());
    attTypeP.setBorder(BorderFactory.createTitledBorder("Attribute type"));
    attTypeP.add(m_attTypeField, BorderLayout.CENTER);
    m_attTypeField.addItem("numeric");
    m_attTypeField.addItem("nominal");
    m_attTypeField.addItem("date");
    m_attTypeField.addItem("string");
    JPanel nomDateP = new JPanel(new BorderLayout());
    nomDateP.setBorder(BorderFactory.createTitledBorder("Nominal vals/date format"));
    nomDateP.add(m_nominalOrDateFormatField, BorderLayout.CENTER);
    fieldHolder.add(attNameP);
    fieldHolder.add(attTypeP);
    fieldHolder.add(nomDateP);
    controlHolder.add(fieldHolder, BorderLayout.NORTH);
    mainHolder.add(controlHolder, BorderLayout.NORTH);
    m_list.setVisibleRowCount(5);
    m_deleteBut.setEnabled(false);
    JPanel listPanel = new JPanel();
    listPanel.setLayout(new BorderLayout());
    JPanel butHolder = new JPanel();
    butHolder.setLayout(new GridLayout(1, 0));
    butHolder.add(m_newBut);
    butHolder.add(m_deleteBut);
    butHolder.add(m_upBut);
    butHolder.add(m_downBut);
    listPanel.add(butHolder, BorderLayout.NORTH);
    JScrollPane js = new JScrollPane(m_list);
    js.setBorder(BorderFactory.createTitledBorder("Attributes"));
    listPanel.add(js, BorderLayout.CENTER);
    mainHolder.add(listPanel, BorderLayout.CENTER);
    m_tabbedPane.addTab("Attribute definitions", mainHolder);
    m_tabbedPane.addTab("Data", m_viewerPanel);
    add(m_tabbedPane, BorderLayout.CENTER);
    m_attNameField.addPropertyChangeListener(new PropertyChangeListener() {

        @Override
        public void propertyChange(PropertyChangeEvent evt) {
            AttDef a = m_list.getSelectedValue();
            if (a != null) {
                a.m_name = m_attNameField.getText();
                m_list.repaint();
            }
        }
    });
    m_nominalOrDateFormatField.addPropertyChangeListener(new PropertyChangeListener() {

        @Override
        public void propertyChange(PropertyChangeEvent evt) {
            AttDef a = m_list.getSelectedValue();
            if (a != null) {
                a.m_nomOrDate = m_nominalOrDateFormatField.getText();
                m_list.repaint();
            }
        }
    });
    m_attTypeField.addActionListener(new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent e) {
            AttDef a = m_list.getSelectedValue();
            if (a != null) {
                String type = m_attTypeField.getSelectedItem().toString();
                a.m_type = AttDef.attStringToType(type);
                m_list.repaint();
            }
        }
    });
    m_tabbedPane.addChangeListener(new ChangeListener() {

        @Override
        public void stateChanged(ChangeEvent e) {
            if (m_tabbedPane.getSelectedIndex() == 1) {
                handleTabChange();
            }
        }
    });
    m_list.addListSelectionListener(new ListSelectionListener() {

        @Override
        public void valueChanged(ListSelectionEvent e) {
            if (!e.getValueIsAdjusting()) {
                if (!m_deleteBut.isEnabled()) {
                    m_deleteBut.setEnabled(true);
                }
                checkUpDown();
                AttDef entry = m_list.getSelectedValue();
                if (entry != null) {
                    m_attNameField.setText(entry.m_name);
                    m_attTypeField.setSelectedItem(Attribute.typeToString(entry.m_type));
                    m_nominalOrDateFormatField.setText(entry.m_nomOrDate != null ? entry.m_nomOrDate : "");
                }
            }
        }
    });
    m_newBut.addActionListener(new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent e) {
            AttDef def = new AttDef(m_attNameField.getText(), AttDef.attStringToType(m_attTypeField.getSelectedItem().toString()), m_nominalOrDateFormatField.getText());
            m_listModel.addElement(def);
            m_list.setSelectedIndex(m_listModel.size() - 1);
            checkUpDown();
        }
    });
    m_deleteBut.addActionListener(new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent e) {
            int selected = m_list.getSelectedIndex();
            if (selected >= 0) {
                m_listModel.removeElementAt(selected);
                checkUpDown();
                if (m_listModel.size() <= 1) {
                    m_upBut.setEnabled(false);
                    m_downBut.setEnabled(false);
                }
            }
        }
    });
    m_upBut.addActionListener(new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent e) {
            JListHelper.moveUp(m_list);
            checkUpDown();
        }
    });
    m_downBut.addActionListener(new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent e) {
            JListHelper.moveDown(m_list);
            checkUpDown();
        }
    });
}
