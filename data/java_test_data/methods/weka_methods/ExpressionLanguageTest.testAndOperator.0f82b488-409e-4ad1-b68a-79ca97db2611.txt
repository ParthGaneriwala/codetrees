public void testAndOperator() throws Exception {
    boolean[] values = { true, false };
    for (boolean left : values) {
        for (boolean right : values) {
            // basics
            assertEquals(left && right, evaluateBoolean(left + " and " + right));
            assertEquals(left && right, evaluateBoolean(left + " & " + right));
            // commutativity
            assertEquals(evaluateBoolean(right + " and " + left), evaluateBoolean(left + " and " + right));
            assertEquals(evaluateBoolean(right + " & " + left), evaluateBoolean(left + " & " + right));
            for (boolean third : values) {
                // due to commutativity the operator is both left and right associative
                // so we test both
                // left associativity
                assertEquals(left && right && third, evaluateBoolean("(" + left + " and " + right + ") and " + third));
                assertEquals(left && right && third, evaluateBoolean("(" + left + " & " + right + ") & " + third));
                // right associativity
                assertEquals(left && right && third, evaluateBoolean(left + " and (" + right + " and " + third + ")"));
                assertEquals(left && right && third, evaluateBoolean(left + " & (" + right + " & " + third + ")"));
                // interchangeability
                assertEquals(left && right && third, evaluateBoolean(left + " & " + right + " and " + third));
            }
        }
    }
}
