public void prune(Instances pruneData, boolean useWhole) {
    Instances data = pruneData;
    double total = data.sumOfWeights();
    if (!Utils.gr(total, 0.0)) {
        return;
    }
    /* The default accurate # and rate on pruning data */
    double defAccu = computeDefAccu(data);
    if (m_Debug) {
        System.err.println("Pruning with " + defAccu + " positive data out of " + total + " instances");
    }
    int size = m_Antds.size();
    if (size == 0) {
        // Default rule before pruning
        return;
    }
    double[] worthRt = new double[size];
    double[] coverage = new double[size];
    double[] worthValue = new double[size];
    for (int w = 0; w < size; w++) {
        worthRt[w] = coverage[w] = worthValue[w] = 0.0;
    }
    /* Calculate accuracy parameters for all the antecedents in this rule */
    // True negative if useWhole
    double tn = 0.0;
    for (int x = 0; x < size; x++) {
        Antd antd = m_Antds.get(x);
        Instances newData = data;
        // Make data empty
        data = new Instances(newData, 0);
        for (int y = 0; y < newData.numInstances(); y++) {
            Instance ins = newData.instance(y);
            if (antd.covers(ins)) {
                // Covered by this antecedent
                coverage[x] += ins.weight();
                // Add to data for further pruning
                data.add(ins);
                if ((int) ins.classValue() == (int) m_Consequent) {
                    worthValue[x] += ins.weight();
                }
            } else if (useWhole) {
                // Not covered
                if ((int) ins.classValue() != (int) m_Consequent) {
                    tn += ins.weight();
                }
            }
        }
        if (useWhole) {
            worthValue[x] += tn;
            worthRt[x] = worthValue[x] / total;
        } else {
            worthRt[x] = (worthValue[x] + 1.0) / (coverage[x] + 2.0);
        }
    }
    double maxValue = (defAccu + 1.0) / (total + 2.0);
    int maxIndex = -1;
    for (int i = 0; i < worthValue.length; i++) {
        if (m_Debug) {
            double denom = useWhole ? total : coverage[i];
            System.err.println(i + "(useAccuray? " + !useWhole + "): " + worthRt[i] + "=" + worthValue[i] + "/" + denom);
        }
        if (worthRt[i] > maxValue) {
            // Prefer to the
            // shorter rule
            maxValue = worthRt[i];
            maxIndex = i;
        }
    }
    /* Prune the antecedents according to the accuracy parameters */
    for (int z = size - 1; z > maxIndex; z--) {
        m_Antds.remove(z);
    }
}
