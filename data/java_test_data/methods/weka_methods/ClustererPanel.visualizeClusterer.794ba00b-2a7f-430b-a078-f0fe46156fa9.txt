@SuppressWarnings("unchecked")
protected void visualizeClusterer(List<String> names, int x, int y) {
    final List<String> selectedNames = names;
    JPopupMenu resultListMenu = new JPopupMenu();
    JMenuItem visMainBuffer = new JMenuItem("View in main window");
    if (selectedNames != null && selectedNames.size() == 1) {
        visMainBuffer.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                m_History.setSingle(selectedNames.get(0));
            }
        });
    } else {
        visMainBuffer.setEnabled(false);
    }
    resultListMenu.add(visMainBuffer);
    JMenuItem visSepBuffer = new JMenuItem("View in separate window");
    if (selectedNames != null && selectedNames.size() == 1) {
        visSepBuffer.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                m_History.openFrame(selectedNames.get(0));
            }
        });
    } else {
        visSepBuffer.setEnabled(false);
    }
    resultListMenu.add(visSepBuffer);
    JMenuItem saveOutput = new JMenuItem("Save result buffer");
    if (selectedNames != null && selectedNames.size() == 1) {
        saveOutput.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                saveBuffer(selectedNames.get(0));
            }
        });
    } else {
        saveOutput.setEnabled(false);
    }
    resultListMenu.add(saveOutput);
    JMenuItem deleteOutput = new JMenuItem("Delete result buffer(s)");
    if (selectedNames != null) {
        deleteOutput.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                m_History.removeResults(selectedNames);
            }
        });
    } else {
        deleteOutput.setEnabled(false);
    }
    resultListMenu.add(deleteOutput);
    resultListMenu.addSeparator();
    JMenuItem loadModel = new JMenuItem("Load model");
    loadModel.addActionListener(new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent e) {
            loadClusterer();
        }
    });
    resultListMenu.add(loadModel);
    ArrayList<Object> o = null;
    if (selectedNames != null && selectedNames.size() == 1) {
        o = (ArrayList<Object>) m_History.getNamedObject(selectedNames.get(0));
    }
    VisualizePanel temp_vp = null;
    String temp_grph = null;
    Clusterer temp_clusterer = null;
    Instances temp_trainHeader = null;
    int[] temp_ignoreAtts = null;
    if (o != null) {
        for (int i = 0; i < o.size(); i++) {
            Object temp = o.get(i);
            if (temp instanceof Clusterer) {
                temp_clusterer = (Clusterer) temp;
            } else if (temp instanceof Instances) {
                // training header
                temp_trainHeader = (Instances) temp;
            } else if (temp instanceof int[]) {
                // ignored attributes
                temp_ignoreAtts = (int[]) temp;
            } else if (temp instanceof VisualizePanel) {
                // normal errors
                temp_vp = (VisualizePanel) temp;
            } else if (temp instanceof String) {
                // graphable output
                temp_grph = (String) temp;
            }
        }
    }
    final VisualizePanel vp = temp_vp;
    final String grph = temp_grph;
    final Clusterer clusterer = temp_clusterer;
    final Instances trainHeader = temp_trainHeader;
    final int[] ignoreAtts = temp_ignoreAtts;
    JMenuItem saveModel = new JMenuItem("Save model");
    if (clusterer != null && selectedNames != null && selectedNames.size() == 1) {
        saveModel.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                saveClusterer(selectedNames.get(0), clusterer, trainHeader, ignoreAtts);
            }
        });
    } else {
        saveModel.setEnabled(false);
    }
    resultListMenu.add(saveModel);
    JMenuItem reEvaluate = new JMenuItem("Re-evaluate model on current test set");
    if (clusterer != null && m_TestInstances != null && selectedNames != null && selectedNames.size() == 1) {
        reEvaluate.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                reevaluateModel(selectedNames.get(0), clusterer, trainHeader, ignoreAtts);
            }
        });
    } else {
        reEvaluate.setEnabled(false);
    }
    resultListMenu.add(reEvaluate);
    JMenuItem reApplyConfig = new JMenuItem("Re-apply this model's configuration");
    if (clusterer != null) {
        reApplyConfig.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                m_ClustererEditor.setValue(clusterer);
            }
        });
    } else {
        reApplyConfig.setEnabled(false);
    }
    resultListMenu.add(reApplyConfig);
    resultListMenu.addSeparator();
    JMenuItem visClusts = new JMenuItem("Visualize cluster assignments");
    if (vp != null) {
        visClusts.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                visualizeClusterAssignments(vp);
            }
        });
    } else {
        visClusts.setEnabled(false);
    }
    resultListMenu.add(visClusts);
    JMenuItem visTree = new JMenuItem("Visualize tree");
    if (grph != null) {
        visTree.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                String title;
                if (vp != null) {
                    title = vp.getName();
                } else {
                    title = selectedNames.get(0);
                }
                visualizeTree(grph, title);
            }
        });
    } else {
        visTree.setEnabled(false);
    }
    resultListMenu.add(visTree);
    // visualization plugins
    JMenu visPlugins = new JMenu("Plugins");
    boolean availablePlugins = false;
    // trees
    if (grph != null) {
        // trees
        List<String> pluginsVector = PluginManager.getPluginNamesOfTypeList(TreeVisualizePlugin.class.getName());
        for (int i = 0; i < pluginsVector.size(); i++) {
            String className = (pluginsVector.get(i));
            try {
                TreeVisualizePlugin plugin = (TreeVisualizePlugin) WekaPackageClassLoaderManager.objectForName(className);
                // Class.forName(className).newInstance();
                if (plugin == null) {
                    continue;
                }
                availablePlugins = true;
                JMenuItem pluginMenuItem = plugin.getVisualizeMenuItem(grph, selectedNames.get(0));
                Version version = new Version();
                if (pluginMenuItem != null) {
                    if (version.compareTo(plugin.getMinVersion()) < 0) {
                        pluginMenuItem.setText(pluginMenuItem.getText() + " (weka outdated)");
                    }
                    if (version.compareTo(plugin.getMaxVersion()) >= 0) {
                        pluginMenuItem.setText(pluginMenuItem.getText() + " (plugin outdated)");
                    }
                    visPlugins.add(pluginMenuItem);
                }
            } catch (Exception e) {
            // e.printStackTrace();
            }
        }
    }
    if (availablePlugins) {
        resultListMenu.add(visPlugins);
    }
    resultListMenu.show(m_History.getList(), x, y);
}
