public static void setOptions(String[] options, Object target, Class<?> targetClazz) {
    if (options != null && options.length > 0) {
        // Set the options just for this class
        try {
            Object[] getterArgs = {};
            Class<?> parent = targetClazz.getSuperclass();
            PropertyDescriptor[] properties = getPropertyDescriptors(targetClazz, parent);
            for (PropertyDescriptor p : properties) {
                Method getter = p.getReadMethod();
                Method setter = p.getWriteMethod();
                if (getter == null || setter == null) {
                    continue;
                }
                OptionMetadata parameterDescription = null;
                parameterDescription = getter.getAnnotation(OptionMetadata.class);
                if (parameterDescription == null) {
                    parameterDescription = setter.getAnnotation(OptionMetadata.class);
                }
                if (parameterDescription != null && parameterDescription.commandLineParamName().length() > 0) {
                    boolean processOpt = false;
                    String optionValue = "";
                    Object valueToSet = null;
                    if (parameterDescription.commandLineParamIsFlag()) {
                        processOpt = true;
                        valueToSet = (Utils.getFlag(parameterDescription.commandLineParamName(), options));
                    } else {
                        optionValue = Utils.getOption(parameterDescription.commandLineParamName(), options);
                        processOpt = optionValue.length() > 0;
                    }
                    // grab the default/current return value so that we can determine
                    // the type
                    Object value = getter.invoke(target, getterArgs);
                    if (value != null && processOpt) {
                        if (value.getClass().isArray() && ((Object[]) value).length >= 0) {
                            // We're interested in the actual element type...
                            Class<?> elementType = getter.getReturnType().getComponentType();
                            // handle arrays by looking for the option multiple times
                            List<String> optionValues = new ArrayList<String>();
                            optionValues.add(optionValue);
                            while (true) {
                                optionValue = Utils.getOption(parameterDescription.commandLineParamName(), options);
                                if (optionValue.length() == 0) {
                                    break;
                                }
                                optionValues.add(optionValue);
                            }
                            valueToSet = Array.newInstance(elementType, optionValues.size());
                            for (int i = 0; i < optionValues.size(); i++) {
                                Object elementObject = null;
                                if (elementType.isAssignableFrom(File.class)) {
                                    elementObject = new File(optionValues.get(i));
                                } else {
                                    elementObject = constructOptionHandlerValue(optionValues.get(i));
                                }
                                Array.set(valueToSet, i, elementObject);
                            }
                        } else if (value instanceof SelectedTag) {
                            Tag[] legalTags = ((SelectedTag) value).getTags();
                            int tagIndex = Integer.MAX_VALUE;
                            // first try and parse as an integer
                            try {
                                int specifiedID = Integer.parseInt(optionValue);
                                for (int z = 0; z < legalTags.length; z++) {
                                    if (legalTags[z].getID() == specifiedID) {
                                        tagIndex = z;
                                        break;
                                    }
                                }
                            } catch (NumberFormatException e) {
                                // try to match tag strings
                                for (int z = 0; z < legalTags.length; z++) {
                                    if (legalTags[z].getReadable().equals(optionValue.trim())) {
                                        tagIndex = z;
                                        break;
                                    }
                                }
                            }
                            if (tagIndex != Integer.MAX_VALUE) {
                                valueToSet = new SelectedTag(tagIndex, legalTags);
                            } else {
                                throw new Exception("Unable to set option: '" + parameterDescription.commandLineParamName() + "'. This option takes a SelectedTag argument, and " + "the supplied value of '" + optionValue + "' " + "does not match any of the legal IDs or strings " + "for it.");
                            }
                        } else if (value instanceof Enum) {
                            Class<?> eClazz = value.getClass();
                            valueToSet = EnumHelper.valueFromString(eClazz, optionValue);
                        } else if (value instanceof OptionHandler) {
                            valueToSet = constructOptionHandlerValue(optionValue);
                        } else if (value instanceof Number) {
                            try {
                                if (value instanceof Integer) {
                                    valueToSet = new Integer(optionValue);
                                } else if (value instanceof Long) {
                                    valueToSet = new Long(optionValue);
                                } else if (value instanceof Double) {
                                    valueToSet = new Double(optionValue);
                                } else if (value instanceof Float) {
                                    valueToSet = new Float(optionValue);
                                }
                            } catch (NumberFormatException e) {
                                throw new Exception("Option: '" + parameterDescription.commandLineParamName() + "' requires a " + value.getClass().getCanonicalName() + " argument");
                            }
                        } else if (value instanceof String) {
                            valueToSet = optionValue;
                        } else if (value instanceof File) {
                            valueToSet = new File(optionValue);
                        }
                        if (valueToSet != null) {
                            // set it!
                            // System.err.println("Setter: " + setter.getName());
                            // System.err.println("Argument: " +
                            // valueToSet.getClass().getCanonicalName());
                            setOption(setter, target, valueToSet);
                        }
                    }
                }
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}
