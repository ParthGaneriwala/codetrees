private String getInstance(StreamTokenizer tokenizer) throws IOException {
    try {
        // Check if end of file reached.
        StreamTokenizerUtils.getFirstToken(tokenizer);
        if (tokenizer.ttype == StreamTokenizer.TT_EOF) {
            return null;
        }
        boolean first = true;
        boolean wasSep;
        m_current.clear();
        int i = 0;
        while (tokenizer.ttype != StreamTokenizer.TT_EOL && tokenizer.ttype != StreamTokenizer.TT_EOF) {
            // Get next token
            if (!first) {
                StreamTokenizerUtils.getToken(tokenizer);
            }
            if (tokenizer.ttype == m_FieldSeparator.charAt(0) || tokenizer.ttype == StreamTokenizer.TT_EOL) {
                m_current.add("?");
                wasSep = true;
            } else {
                wasSep = false;
                if (tokenizer.sval.equals(m_MissingValue) || tokenizer.sval.trim().length() == 0) {
                    m_current.add("?");
                } else if (m_types[i] == TYPE.NUMERIC || m_types[i] == TYPE.UNDETERMINED) {
                    // try to parse as a number
                    try {
                        Double.parseDouble(tokenizer.sval);
                        m_current.add(tokenizer.sval);
                        m_types[i] = TYPE.NUMERIC;
                    } catch (NumberFormatException e) {
                        // otherwise assume its an enumerated value
                        m_current.add(Utils.quote(tokenizer.sval));
                        if (m_types[i] == TYPE.UNDETERMINED) {
                            m_types[i] = TYPE.NOMINAL;
                            LinkedHashSet<String> ts = new LinkedHashSet<String>();
                            ts.add(tokenizer.sval);
                            m_nominalVals.put(i, ts);
                        } else {
                            m_types[i] = TYPE.STRING;
                        }
                    }
                } else if (m_types[i] == TYPE.STRING || m_types[i] == TYPE.DATE) {
                    m_current.add(Utils.quote(tokenizer.sval));
                } else if (m_types[i] == TYPE.NOMINAL) {
                    m_current.add(Utils.quote(tokenizer.sval));
                    m_nominalVals.get(i).add(tokenizer.sval);
                }
            }
            if (!wasSep) {
                StreamTokenizerUtils.getToken(tokenizer);
            }
            first = false;
            i++;
        }
        // check number of values read
        if (m_current.size() != m_structure.numAttributes()) {
            for (Object o : m_current) {
                System.out.print(o.toString() + "|||");
            }
            System.out.println();
            StreamTokenizerUtils.errms(tokenizer, "wrong number of values. Read " + m_current.size() + ", expected " + m_structure.numAttributes());
        }
    } catch (Exception ex) {
        throw new IOException(ex.getMessage() + " Problem encountered on line: " + (m_rowCount + 1));
    }
    StringBuilder temp = new StringBuilder();
    for (Object o : m_current) {
        temp.append(o.toString()).append(m_FieldSeparator);
    }
    m_rowCount++;
    return temp.substring(0, temp.length() - 1);
}
