@Override
public String toString() {
    if (m_probOfClass == null) {
        return "NaiveBayesMultinomialText: No model built yet.\n";
    }
    StringBuffer result = new StringBuffer();
    // build a master dictionary over all classes
    HashSet<String> master = new HashSet<String>();
    for (int i = 0; i < m_data.numClasses(); i++) {
        LinkedHashMap<String, Count> classDict = m_probOfWordGivenClass.get(i);
        for (String key : classDict.keySet()) {
            master.add(key);
        }
    }
    result.append("Dictionary size: " + master.size()).append("\n\n");
    result.append("The independent frequency of a class\n");
    result.append("--------------------------------------\n");
    for (int i = 0; i < m_data.numClasses(); i++) {
        result.append(m_data.classAttribute().value(i)).append("\t").append(Double.toString(m_probOfClass[i])).append("\n");
    }
    if (master.size() > 150000) {
        result.append("\nFrequency table ommitted due to size\n");
        return result.toString();
    }
    result.append("\nThe frequency of a word given the class\n");
    result.append("-----------------------------------------\n");
    for (int i = 0; i < m_data.numClasses(); i++) {
        result.append(Utils.padLeft(m_data.classAttribute().value(i), 11)).append("\t");
    }
    result.append("\n");
    Iterator<String> masterIter = master.iterator();
    while (masterIter.hasNext()) {
        String word = masterIter.next();
        for (int i = 0; i < m_data.numClasses(); i++) {
            LinkedHashMap<String, Count> classDict = m_probOfWordGivenClass.get(i);
            Count c = classDict.get(word);
            if (c == null) {
                result.append("<laplace=1>\t");
            } else {
                result.append(Utils.padLeft(Double.toString(c.m_count), 11)).append("\t");
            }
        }
        result.append(word);
        result.append("\n");
    }
    return result.toString();
}
