public double minDataDLIfDeleted(int index, double expFPRate, boolean checkErr) {
    // System.out.println("!!!Enter without: ");
    // Stats of ruleset if deleted
    double[] rulesetStat = new double[6];
    // How many rules after?
    int more = m_Ruleset.size() - 1 - index;
    // Their
    ArrayList<double[]> indexPlus = new ArrayList<double[]>(more);
    // 0...(index-1) are OK
    for (int j = 0; j < index; j++) {
        // Covered stats are cumulative
        rulesetStat[0] += m_SimpleStats.get(j)[0];
        rulesetStat[2] += m_SimpleStats.get(j)[2];
        rulesetStat[4] += m_SimpleStats.get(j)[4];
    }
    // Recount data from index+1
    Instances data = (index == 0) ? m_Data : m_Filtered.get(index - 1)[1];
    for (int j = (index + 1); j < m_Ruleset.size(); j++) {
        double[] stats = new double[6];
        Instances[] split = computeSimpleStats(j, data, stats, null);
        indexPlus.add(stats);
        rulesetStat[0] += stats[0];
        rulesetStat[2] += stats[2];
        rulesetStat[4] += stats[4];
        data = split[1];
    }
    // Uncovered stats are those of the last rule
    if (more > 0) {
        rulesetStat[1] = indexPlus.get(indexPlus.size() - 1)[1];
        rulesetStat[3] = indexPlus.get(indexPlus.size() - 1)[3];
        rulesetStat[5] = indexPlus.get(indexPlus.size() - 1)[5];
    } else if (index > 0) {
        rulesetStat[1] = m_SimpleStats.get(index - 1)[1];
        rulesetStat[3] = m_SimpleStats.get(index - 1)[3];
        rulesetStat[5] = m_SimpleStats.get(index - 1)[5];
    } else {
        // Null coverage
        rulesetStat[1] = m_SimpleStats.get(0)[0] + m_SimpleStats.get(0)[1];
        rulesetStat[3] = m_SimpleStats.get(0)[3] + m_SimpleStats.get(0)[4];
        rulesetStat[5] = m_SimpleStats.get(0)[2] + m_SimpleStats.get(0)[5];
    }
    // Potential
    double potential = 0;
    for (int k = index + 1; k < m_Ruleset.size(); k++) {
        double[] ruleStat = indexPlus.get(k - index - 1);
        double ifDeleted = potential(k, expFPRate, rulesetStat, ruleStat, checkErr);
        if (!Double.isNaN(ifDeleted)) {
            potential += ifDeleted;
        }
    }
    // Data DL of the ruleset without the rule
    // Note that ruleset stats has already been updated to reflect
    // deletion if any potential
    double dataDLWithout = dataDL(expFPRate, rulesetStat[0], rulesetStat[1], rulesetStat[4], rulesetStat[5]);
    // Why subtract potential again? To reflect change of theory DL??
    return (dataDLWithout - potential);
}
