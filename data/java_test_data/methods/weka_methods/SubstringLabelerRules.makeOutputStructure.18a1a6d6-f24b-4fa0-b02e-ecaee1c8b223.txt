protected void makeOutputStructure() throws Exception {
    // m_matchRules = new ArrayList<Match>();
    if (m_matchRules.size() > 0) {
        int labelCount = 0;
        // StringBuffer labelList = new StringBuffer();
        HashSet<String> uniqueLabels = new HashSet<String>();
        Vector<String> labelVec = new Vector<String>();
        for (SubstringLabelerMatchRule m : m_matchRules) {
            if (m.getLabel() != null && m.getLabel().length() > 0) {
                if (!uniqueLabels.contains(m.getLabel())) {
                    /*
             * if (labelCount > 0) { labelList.append(","); }
             */
                    // labelList.append(m.getLabel());
                    uniqueLabels.add(m.getLabel());
                    labelVec.addElement(m.getLabel());
                }
                labelCount++;
            }
        }
        if (labelCount > 0) {
            if (labelCount == m_matchRules.size()) {
                m_hasLabels = true;
            } else {
                throw new Exception("Can't have only some rules with a label!");
            }
        }
        m_outputStructure = (Instances) (new SerializedObject(m_inputStructure).getObject());
        Attribute newAtt = null;
        if (m_hasLabels) {
            newAtt = new Attribute(m_attName, labelVec);
        } else if (m_nominalBinary) {
            labelVec.addElement("0");
            labelVec.addElement("1");
            newAtt = new Attribute(m_attName, labelVec);
        } else {
            newAtt = new Attribute(m_attName);
        }
        m_outputStructure.insertAttributeAt(newAtt, m_outputStructure.numAttributes());
        return;
    }
    m_outputStructure = new Instances(m_inputStructure);
}
