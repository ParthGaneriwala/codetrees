public static void main(String[] args) {
    try {
        LookAndFeel.setLookAndFeel(KFDefaults.APP_ID, KFDefaults.APP_ID + ".lookAndFeel", KFDefaults.LAF);
    } catch (IOException ex) {
        ex.printStackTrace();
    }
    weka.gui.GenericObjectEditor.determineClasses();
    try {
        if (System.getProperty("os.name").contains("Mac")) {
            System.setProperty("apple.laf.useScreenMenuBar", "true");
        }
        m_kfApp = new KnowledgeFlowApp();
        if (args.length == 1) {
            File toLoad = new File(args[0]);
            if (toLoad.exists() && toLoad.isFile()) {
                ((MainKFPerspective) m_kfApp.getMainPerspective()).loadLayout(toLoad, false);
            }
        }
        final javax.swing.JFrame jf = new javax.swing.JFrame("Weka " + m_kfApp.getApplicationName());
        jf.getContentPane().setLayout(new java.awt.BorderLayout());
        Image icon = Toolkit.getDefaultToolkit().getImage(KnowledgeFlowApp.class.getClassLoader().getResource("weka/gui/weka_icon_new_48.png"));
        jf.setIconImage(icon);
        jf.getContentPane().add(m_kfApp, BorderLayout.CENTER);
        jf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        jf.pack();
        m_kfApp.showMenuBar(jf);
        jf.setSize(1023, 768);
        jf.setVisible(true);
        // weird effect where, if there are more perspectives than would fit
        // in one row horizontally in the perspective manager, then the WrapLayout
        // does not wrap when the Frame is first pack()ed. No amount of
        // invalidating/revalidating/repainting components
        // and ancestors seems to make a difference. Resizing - even by one pixel
        // -
        // however, does force it to re-layout and wrap. Perhaps this is an OSX
        // bug...
        jf.setSize(1024, 768);
        Thread memMonitor = new Thread() {

            @Override
            public void run() {
                while (true) {
                    if (m_Memory.isOutOfMemory()) {
                        // clean up
                        jf.dispose();
                        m_kfApp = null;
                        System.gc();
                        // display error
                        System.err.println("\ndisplayed message:");
                        m_Memory.showOutOfMemory();
                        System.err.println("\nexiting");
                        System.exit(-1);
                    }
                }
            }
        };
        memMonitor.setPriority(Thread.MAX_PRIORITY);
        memMonitor.start();
    } catch (Exception ex) {
        ex.printStackTrace();
    }
}
