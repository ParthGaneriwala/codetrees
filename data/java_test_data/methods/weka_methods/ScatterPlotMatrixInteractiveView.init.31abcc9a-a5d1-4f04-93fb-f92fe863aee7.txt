@Override
public void init() throws WekaException {
    addButton(m_clearButton);
    m_history = new ResultHistoryPanel(null);
    m_history.setBorder(BorderFactory.createTitledBorder("Result list"));
    m_history.setHandleRightClicks(false);
    m_history.setDeleteListener(new ResultHistoryPanel.RDeleteListener() {

        @Override
        public void entryDeleted(String name, int index) {
            ((ScatterPlotMatrix) getStep()).getDatasets().remove(index);
        }

        @Override
        public void entriesDeleted(List<String> names, List<Integer> indexes) {
            List<Data> ds = ((ScatterPlotMatrix) getStep()).getDatasets();
            List<Data> toRemove = new ArrayList<Data>();
            for (int i : indexes) {
                toRemove.add(ds.get(i));
            }
            ds.removeAll(toRemove);
        }
    });
    m_history.getList().addMouseListener(new ResultHistoryPanel.RMouseAdapter() {

        private static final long serialVersionUID = -5174882230278923704L;

        @Override
        public void mouseClicked(MouseEvent e) {
            int index = m_history.getList().locationToIndex(e.getPoint());
            if (index != -1) {
                String name = m_history.getNameAtIndex(index);
                // doPopup(name);
                Object insts = m_history.getNamedObject(name);
                if (insts instanceof Instances) {
                    try {
                        m_matrixPanel.setInstances((Instances) insts);
                        m_matrixPanel.repaint();
                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }
                }
            }
        }
    });
    m_history.getList().getSelectionModel().addListSelectionListener(new ListSelectionListener() {

        @Override
        public void valueChanged(ListSelectionEvent e) {
            if (!e.getValueIsAdjusting()) {
                ListSelectionModel lm = (ListSelectionModel) e.getSource();
                for (int i = e.getFirstIndex(); i <= e.getLastIndex(); i++) {
                    if (lm.isSelectedIndex(i)) {
                        // m_AttSummaryPanel.setAttribute(i);
                        if (i != -1) {
                            String name = m_history.getNameAtIndex(i);
                            Object insts = m_history.getNamedObject(name);
                            if (insts != null && insts instanceof Instances) {
                                try {
                                    m_matrixPanel.setInstances((Instances) insts);
                                    m_matrixPanel.repaint();
                                } catch (Exception ex) {
                                    ex.printStackTrace();
                                }
                            }
                        }
                        break;
                    }
                }
            }
        }
    });
    // JScrollPane scatterScroller = new JScrollPane( m_matrixPanel );
    m_matrixPanel.setPreferredSize(new Dimension(800, 600));
    m_history.setMinimumSize(new Dimension(150, 600));
    m_splitPane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT, m_history, m_matrixPanel);
    add(m_splitPane, BorderLayout.CENTER);
    boolean first = true;
    for (Data d : ((ScatterPlotMatrix) getStep()).getDatasets()) {
        String title = d.getPayloadElement(StepManager.CON_AUX_DATA_TEXT_TITLE).toString();
        m_history.addResult(title, new StringBuffer());
        Instances instances = d.getPrimaryPayload();
        m_history.addObject(title, instances);
        if (first) {
            m_matrixPanel.setInstances(instances);
            m_matrixPanel.repaint();
            first = false;
        }
    }
    m_clearButton.addActionListener(new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent e) {
            m_history.clearResults();
            ((ScatterPlotMatrix) getStep()).getDatasets().clear();
            m_splitPane.remove(m_matrixPanel);
        }
    });
    applySettings(getSettings());
}
