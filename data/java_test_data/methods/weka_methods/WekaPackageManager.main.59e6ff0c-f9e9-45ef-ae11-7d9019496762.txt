public static void main(String[] args) {
    weka.core.logging.Logger.log(weka.core.logging.Logger.Level.INFO, "Logging started");
    try {
        // scan for -offline
        for (int i = 0; i < args.length; i++) {
            if (args[i].equals("-offline")) {
                m_offline = true;
                String[] temp = new String[args.length - 1];
                if (i > 0) {
                    System.arraycopy(args, 0, temp, 0, i);
                }
                System.arraycopy(args, i + 1, temp, i, args.length - (i + 1));
                args = temp;
            }
        }
        // establishCacheIfNeeded(System.out);
        // checkForNewPackages(System.out);
        startupCheck(true, System.out);
        if (args.length == 0 || args[0].equalsIgnoreCase("-h") || args[0].equalsIgnoreCase("-help")) {
            printUsage();
            // System.exit(1);
            return;
        }
        if (args[0].equals("-package-info")) {
            if (args.length < 3) {
                printUsage();
                return;
            // System.exit(1);
            }
            if (args[1].equals("archive")) {
                printPackageArchiveInfo(args[2]);
            } else if (args[1].equals("installed")) {
                printInstalledPackageInfo(args[2]);
            } else if (args[1].equals("repository")) {
                String version = "Latest";
                if (args.length == 4) {
                    version = args[3];
                }
                try {
                    printRepositoryPackageInfo(args[2], version);
                } catch (Exception ex) {
                    // problem with getting info on package from repository?
                    // Must not be an "official" repository package
                    System.out.println("[WekaPackageManager] Nothing known about package " + args[2] + " at the repository!");
                }
            } else {
                System.err.println("[WekaPackageManager] Unknown argument " + args[2]);
                printUsage();
                return;
            // System.exit(1);
            }
        } else if (args[0].equals("-install-package")) {
            String targetLowerCase = args[1].toLowerCase();
            if (targetLowerCase.startsWith("http://") || targetLowerCase.startsWith("https://")) {
                URL packageURL = new URL(args[1]);
                installPackageFromURL(packageURL, System.out);
            } else if (targetLowerCase.endsWith(".zip")) {
                installPackageFromArchive(args[1], System.out);
            } else {
                // assume a named package at the central repository
                String version = "Latest";
                if (args.length == 3) {
                    version = args[2];
                }
                installPackageFromRepository(args[1], version, false);
            }
            System.exit(0);
        } else if (args[0].equals("-uninstall-package")) {
            if (args.length < 2) {
                printUsage();
                return;
            // System.exit(1);
            }
            boolean force = false;
            if (args.length == 3) {
                if (args[2].equals("-force")) {
                    force = true;
                }
            }
            removeInstalledPackage(args[1], force, System.out);
            // System.exit(0);
            return;
        } else if (args[0].equals("-list-packages")) {
            if (args.length < 2) {
                printUsage();
                // System.exit(1);
                return;
            }
            listPackages(args[1]);
        } else if (args[0].equals("-toggle-load-status")) {
            if (args.length == 1) {
                printUsage();
                return;
            }
            List<String> toToggle = new ArrayList<String>();
            for (int i = 1; i < args.length; i++) {
                toToggle.add(args[i].trim());
            }
            if (toToggle.size() >= 1) {
                toggleLoadStatus(toToggle);
            }
        } else if (args[0].equals("-refresh-cache")) {
            refreshCache(System.out);
        } else {
            System.err.println("Unknown option: " + args[0]);
            printUsage();
        }
    // System.exit(0);
    } catch (Exception ex) {
        ex.printStackTrace();
    }
}
