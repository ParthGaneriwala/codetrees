protected double[] distributionForInstanceMajorityVoting(Instance instance) throws Exception {
    double[] probs = new double[instance.classAttribute().numValues()];
    double[] votes = new double[probs.length];
    for (int i = 0; i < m_Classifiers.length; i++) {
        probs = getClassifier(i).distributionForInstance(instance);
        int maxIndex = 0;
        for (int j = 0; j < probs.length; j++) {
            if (probs[j] > probs[maxIndex]) {
                maxIndex = j;
            }
        }
        // probability
        if (probs[maxIndex] > 0) {
            for (int j = 0; j < probs.length; j++) {
                if (probs[j] == probs[maxIndex]) {
                    votes[j]++;
                }
            }
        }
    }
    for (int i = 0; i < m_preBuiltClassifiers.size(); i++) {
        probs = m_preBuiltClassifiers.get(i).distributionForInstance(instance);
        int maxIndex = 0;
        for (int j = 0; j < probs.length; j++) {
            if (probs[j] > probs[maxIndex]) {
                maxIndex = j;
            }
        }
        // probability
        if (probs[maxIndex] > 0) {
            for (int j = 0; j < probs.length; j++) {
                if (probs[j] == probs[maxIndex]) {
                    votes[j]++;
                }
            }
        }
    }
    int tmpMajorityIndex = 0;
    for (int k = 1; k < votes.length; k++) {
        if (votes[k] > votes[tmpMajorityIndex]) {
            tmpMajorityIndex = k;
        }
    }
    // No votes received
    if (votes[tmpMajorityIndex] == 0) {
        return new double[instance.numClasses()];
    }
    // Consider the cases when multiple classes receive the same amount of votes
    Vector<Integer> majorityIndexes = new Vector<Integer>();
    for (int k = 0; k < votes.length; k++) {
        if (votes[k] == votes[tmpMajorityIndex]) {
            majorityIndexes.add(k);
        }
    }
    int majorityIndex = tmpMajorityIndex;
    if (majorityIndexes.size() > 1) {
        // resolve ties by looking at the predicted distribution
        double[] distPreds = distributionForInstanceAverage(instance);
        majorityIndex = Utils.maxIndex(distPreds);
    // Resolve the ties according to a uniform random distribution
    // majorityIndex = majorityIndexes.get(m_Random.nextInt(majorityIndexes.size()));
    }
    // set probs to 0
    probs = new double[probs.length];
    // the class that have been voted the most
    probs[majorityIndex] = 1;
    return probs;
}
