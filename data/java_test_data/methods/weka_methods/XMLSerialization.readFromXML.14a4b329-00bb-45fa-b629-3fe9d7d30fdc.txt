public Object readFromXML(Element node) throws Exception {
    String classname;
    String name;
    boolean primitive;
    boolean array;
    boolean isnull;
    Class<?> cls;
    Vector<Element> children;
    Object result;
    int i;
    Constructor<?> constructor;
    Class<?>[] methodClasses;
    Object[] methodArgs;
    Element child;
    // for debugging only
    if (DEBUG) {
        trace(new Throwable(), node.getAttribute(ATT_NAME));
    }
    m_CurrentNode = node;
    result = null;
    name = node.getAttribute(ATT_NAME);
    classname = node.getAttribute(ATT_CLASS);
    primitive = stringToBoolean(node.getAttribute(ATT_PRIMITIVE));
    array = stringToBoolean(node.getAttribute(ATT_ARRAY));
    isnull = stringToBoolean(node.getAttribute(ATT_NULL));
    // special handling of null
    if (isnull) {
        return result;
    }
    children = XMLDocument.getChildTags(node);
    cls = determineClass(classname);
    // array
    if (array) {
        result = Array.newInstance(cls, getArrayDimensions(node));
        for (i = 0; i < children.size(); i++) {
            child = children.get(i);
            Array.set(result, Integer.parseInt(child.getAttribute(ATT_NAME)), invokeReadFromXML(child));
        }
    } else // non-array
    {
        // primitive/String-constructor
        if (children.size() == 0) {
            // primitive
            if (primitive) {
                result = getPrimitive(node);
            } else // assumed String-constructor
            {
                methodClasses = new Class[1];
                methodClasses[0] = String.class;
                methodArgs = new Object[1];
                methodArgs[0] = XMLDocument.getContent(node);
                try {
                    constructor = cls.getConstructor(methodClasses);
                    result = constructor.newInstance(methodArgs);
                } catch (Exception e) {
                    // constructor
                    try {
                        result = cls.newInstance();
                    } catch (Exception e2) {
                        // sorry, can't instantiate!
                        result = null;
                        System.out.println("ERROR: Can't instantiate '" + classname + "'!");
                    }
                }
            }
        } else // normal get/set methods
        {
            result = cls.newInstance();
            for (i = 0; i < children.size(); i++) {
                result = readFromXML(result, name, children.get(i));
            }
        }
    }
    return result;
}
