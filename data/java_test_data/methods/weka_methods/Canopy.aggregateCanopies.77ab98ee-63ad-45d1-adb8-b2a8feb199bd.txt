public static Canopy aggregateCanopies(List<Canopy> canopies, double aggregationT1, double aggregationT2, NormalizableDistance finalDistanceFunction, Filter missingValuesReplacer, int finalNumCanopies) {
    Instances collectedCanopies = new Instances(canopies.get(0).getCanopies(), 0);
    Instances finalCanopies = new Instances(collectedCanopies, 0);
    List<double[][]> finalCenters = new ArrayList<double[][]>();
    List<double[]> finalMissingNumerics = new ArrayList<double[]>();
    List<double[]> finalT2Densities = new ArrayList<double[]>();
    List<Instance> finalCanopiesList = new ArrayList<Instance>();
    List<double[][]> centersForEachCanopy = new ArrayList<double[][]>();
    List<double[]> numMissingNumericsForEachCanopy = new ArrayList<double[]>();
    for (Canopy c : canopies) {
        Instances tempC = c.getCanopies();
        // System.err.println("A canopy clusterer:\n " + c.toString());
        for (int i = 0; i < tempC.numInstances(); i++) {
            collectedCanopies.add(tempC.instance(i));
            centersForEachCanopy.add(c.m_canopyCenters.get(i));
            numMissingNumericsForEachCanopy.add(c.m_canopyNumMissingForNumerics.get(i));
        }
    }
    for (int i = 0; i < collectedCanopies.numInstances(); i++) {
        boolean addPoint = true;
        Instance candidate = collectedCanopies.instance(i);
        double[][] candidateCenter = centersForEachCanopy.get(i);
        double[] candidateMissingNumerics = numMissingNumericsForEachCanopy.get(i);
        for (int j = 0; j < finalCanopiesList.size(); j++) {
            Instance fc = finalCanopiesList.get(j);
            if (finalDistanceFunction.distance(candidate, fc) < aggregationT2) {
                addPoint = false;
                // now absorb candidate into fc
                double[][] center = finalCenters.get(j);
                double[] missingNumerics = finalMissingNumerics.get(j);
                // double newDensity = fc.weight() + candidate.weight();
                finalT2Densities.get(j)[0] += candidate.weight();
                for (int k = 0; k < candidate.numAttributes(); k++) {
                    missingNumerics[k] += candidateMissingNumerics[k];
                    for (int l = 0; l < center[k].length; l++) {
                        center[k][l] += candidateCenter[k][l];
                    }
                }
                break;
            }
        }
        if (addPoint) {
            finalCanopiesList.add(candidate);
            finalCanopies.add(candidate);
            finalCenters.add(candidateCenter);
            finalMissingNumerics.add(candidateMissingNumerics);
            double[] dens = new double[1];
            dens[0] = candidate.weight();
            finalT2Densities.add(dens);
        }
    }
    // now construct a new Canopy encapsulating the final set of canopies
    // System.err.println(finalCanopies);
    Canopy finalC = new Canopy();
    finalC.setCanopies(finalCanopies);
    finalC.setMissingValuesReplacer(missingValuesReplacer);
    finalC.m_distanceFunction = finalDistanceFunction;
    finalC.m_canopyCenters = finalCenters;
    finalC.m_canopyNumMissingForNumerics = finalMissingNumerics;
    finalC.m_canopyT2Density = finalT2Densities;
    finalC.m_t2 = aggregationT2;
    finalC.m_t1 = aggregationT1;
    try {
        finalC.setNumClusters(finalNumCanopies);
    } catch (Exception e) {
    // can safely ignore as Canopy does not generate an exception
    }
    finalC.updateFinished();
    return finalC;
}
