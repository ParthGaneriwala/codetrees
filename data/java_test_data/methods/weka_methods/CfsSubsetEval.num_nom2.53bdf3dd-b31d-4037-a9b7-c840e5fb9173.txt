private double num_nom2(int att1, int att2) {
    int i, ii, k;
    double temp;
    Instance inst;
    int mx = (int) m_trainInstances.meanOrMode(m_trainInstances.attribute(att1));
    double my = m_trainInstances.meanOrMode(m_trainInstances.attribute(att2));
    double stdv_num = 0.0;
    double diff1, diff2;
    double r = 0.0, rr;
    int nx = (!m_missingSeparate) ? m_trainInstances.attribute(att1).numValues() : m_trainInstances.attribute(att1).numValues() + 1;
    double[] prior_nom = new double[nx];
    double[] stdvs_nom = new double[nx];
    double[] covs = new double[nx];
    for (i = 0; i < nx; i++) {
        stdvs_nom[i] = covs[i] = prior_nom[i] = 0.0;
    }
    // attribute
    for (i = 0; i < m_numInstances; i++) {
        inst = m_trainInstances.instance(i);
        if (inst.isMissing(att1)) {
            if (!m_missingSeparate) {
                ii = mx;
            } else {
                ii = nx - 1;
            }
        } else {
            ii = (int) inst.value(att1);
        }
        // increment freq for nominal
        prior_nom[ii]++;
    }
    for (k = 0; k < m_numInstances; k++) {
        inst = m_trainInstances.instance(k);
        // std dev of numeric attribute
        diff2 = (inst.isMissing(att2)) ? 0.0 : (inst.value(att2) - my);
        stdv_num += (diff2 * diff2);
        // 
        for (i = 0; i < nx; i++) {
            if (inst.isMissing(att1)) {
                if (!m_missingSeparate) {
                    temp = (i == mx) ? 1.0 : 0.0;
                } else {
                    temp = (i == (nx - 1)) ? 1.0 : 0.0;
                }
            } else {
                temp = (i == inst.value(att1)) ? 1.0 : 0.0;
            }
            diff1 = (temp - (prior_nom[i] / m_numInstances));
            stdvs_nom[i] += (diff1 * diff1);
            covs[i] += (diff1 * diff2);
        }
    }
    // calculate weighted correlation
    for (i = 0, temp = 0.0; i < nx; i++) {
        // calculate the weighted variance of the nominal
        temp += ((prior_nom[i] / m_numInstances) * (stdvs_nom[i] / m_numInstances));
        if ((stdvs_nom[i] * stdv_num) > 0.0) {
            // System.out.println("Stdv :"+stdvs_nom[i]);
            rr = (covs[i] / (Math.sqrt(stdvs_nom[i] * stdv_num)));
            if (rr < 0.0) {
                rr = -rr;
            }
            r += ((prior_nom[i] / m_numInstances) * rr);
        } else /*
       * if there is zero variance for the numeric att at a specific level of
       * the catergorical att then if neither is the class then make this
       * correlation at this level maximally bad i.e. 1.0. If either is the
       * class then maximally bad correlation is 0.0
       */
        {
            if (att1 != m_classIndex && att2 != m_classIndex) {
                r += ((prior_nom[i] / m_numInstances) * 1.0);
            }
        }
    }
    // if ((att1 != classIndex) && (att2 != classIndex)) // =============
    if (temp != 0.0) {
        if (m_std_devs[att1] == 1.0) {
            m_std_devs[att1] = Math.sqrt(temp);
        }
    }
    if (stdv_num != 0.0) {
        if (m_std_devs[att2] == 1.0) {
            m_std_devs[att2] = Math.sqrt((stdv_num / m_numInstances));
        }
    }
    if (r == 0.0) {
        if (att1 != m_classIndex && att2 != m_classIndex) {
            r = 1.0;
        }
    }
    return r;
}
