protected void scaleNumericPredictions() {
    double maxErr;
    double minErr;
    double err;
    int i;
    Double errd;
    double temp;
    maxErr = Double.NEGATIVE_INFINITY;
    minErr = Double.POSITIVE_INFINITY;
    if (m_Instances.classAttribute().isNominal()) {
        maxErr = 1;
        minErr = 0;
    } else {
        // find min/max errors
        for (i = 0; i < m_PlotSizes.size(); i++) {
            errd = (Double) m_PlotSizes.get(i);
            if (errd != null) {
                err = Math.abs(errd.doubleValue());
                if (err < minErr) {
                    minErr = err;
                }
                if (err > maxErr) {
                    maxErr = err;
                }
            }
        }
    }
    // scale errors
    for (i = 0; i < m_PlotSizes.size(); i++) {
        errd = (Double) m_PlotSizes.get(i);
        if (errd != null) {
            err = Math.abs(errd.doubleValue());
            if (maxErr - minErr > 0) {
                temp = (((err - minErr) / (maxErr - minErr)) * (m_MaximumPlotSizeNumeric - m_MinimumPlotSizeNumeric + 1));
                m_PlotSizes.set(i, new Integer((int) temp) + m_MinimumPlotSizeNumeric);
            } else {
                m_PlotSizes.set(i, new Integer(m_MinimumPlotSizeNumeric));
            }
        } else {
            m_PlotSizes.set(i, new Integer(m_MinimumPlotSizeNumeric));
        }
    }
}
