protected // current
CoverTreeNode batch_insert(// current
Integer p, // current
int max_scale, // max scale/level for this dataset
int top_scale, // set of points that are nearer to p
Stack<DistanceNode> point_set, // to return the set of points that have
Stack<DistanceNode> consumed_set) // been used to calc. max_dist to a
// descendent
// Stack<Stack<DistanceNode>> stack) //may not be needed
{
    if (point_set.length == 0) {
        CoverTreeNode leaf = new_leaf(p);
        // incrementing node count
        m_NumNodes++;
        // incrementing leaves count
        m_NumLeaves++;
        return leaf;
    } else {
        // O(|point_set|) the max dist
        double max_dist = max_set(point_set);
        // in point_set to point "p".
        int next_scale = Math.min(max_scale - 1, get_scale(max_dist));
        if (next_scale == Integer.MIN_VALUE) {
            // We have points with distance
            // 0. if max_dist is 0.
            Stack<CoverTreeNode> children = new Stack<CoverTreeNode>();
            CoverTreeNode leaf = new_leaf(p);
            children.push(leaf);
            m_NumLeaves++;
            // incrementing node and leaf count
            m_NumNodes++;
            while (point_set.length > 0) {
                DistanceNode tmpnode = point_set.pop();
                leaf = new_leaf(tmpnode.idx);
                children.push(leaf);
                m_NumLeaves++;
                // incrementing node and leaf count
                m_NumNodes++;
                consumed_set.push(tmpnode);
            }
            // make a new node out of p and assign
            CoverTreeNode n = new_node(p);
            // incrementing node count
            m_NumNodes++;
            // A magic number meant to be larger than all scales.
            n.scale = 100;
            // since all points have distance 0 to p
            n.max_dist = 0;
            n.num_children = children.length;
            n.children = children;
            return n;
        } else {
            Stack<DistanceNode> far = new Stack<DistanceNode>();
            // O(|point_set|)
            split(point_set, far, max_scale);
            CoverTreeNode child = batch_insert(p, next_scale, top_scale, point_set, consumed_set);
            if (point_set.length == 0) {
                // not creating any node in this
                // recursive call
                // push(stack,point_set);
                // point_set=far;
                point_set.replaceAllBy(far);
                return child;
            } else {
                CoverTreeNode n = new_node(p);
                // incrementing node count
                m_NumNodes++;
                Stack<CoverTreeNode> children = new Stack<CoverTreeNode>();
                children.push(child);
                while (point_set.length != 0) {
                    // O(|point_set| * num_children)
                    Stack<DistanceNode> new_point_set = new Stack<DistanceNode>();
                    Stack<DistanceNode> new_consumed_set = new Stack<DistanceNode>();
                    DistanceNode tmpnode = point_set.pop();
                    double new_dist = tmpnode.dist.last();
                    consumed_set.push(tmpnode);
                    // putting points closer to new_point into new_point_set (and
                    // removing them from point_set)
                    // O(|point_saet|)
                    dist_split(point_set, new_point_set, tmpnode, max_scale);
                    // putting points closer to new_point into new_point_set (and
                    // removing them from far)
                    // O(|far|)
                    dist_split(far, new_point_set, tmpnode, max_scale);
                    CoverTreeNode new_child = batch_insert(tmpnode.idx, next_scale, top_scale, new_point_set, new_consumed_set);
                    new_child.parent_dist = new_dist;
                    children.push(new_child);
                    // putting the unused points from new_point_set back into
                    // point_set and far
                    double fmax = dist_of_scale(max_scale);
                    tmpnode = null;
                    for (int i = 0; i < new_point_set.length; i++) {
                        // O(|new_point_set|)
                        tmpnode = new_point_set.element(i);
                        tmpnode.dist.pop();
                        if (tmpnode.dist.last() <= fmax) {
                            point_set.push(tmpnode);
                        } else {
                            far.push(tmpnode);
                        }
                    }
                    // putting the points consumed while recursing for new_point
                    // into consumed_set
                    tmpnode = null;
                    for (int i = 0; i < new_consumed_set.length; i++) {
                        // O(|new_point_set|)
                        tmpnode = new_consumed_set.element(i);
                        tmpnode.dist.pop();
                        consumed_set.push(tmpnode);
                    }
                }
                // end while(point_size.size!=0)
                // point_set=far;
                point_set.replaceAllBy(far);
                n.scale = top_scale - max_scale;
                n.max_dist = max_set(consumed_set);
                n.num_children = children.length;
                n.children = children;
                return n;
            }
        // end else if(pointset!=0)
        }
    // end else if(next_scale != -214....
    }
// end else if(pointset!=0)
}
