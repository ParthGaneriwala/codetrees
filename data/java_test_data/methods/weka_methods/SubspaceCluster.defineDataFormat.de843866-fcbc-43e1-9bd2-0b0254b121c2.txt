/**
 * Initializes the format for the dataset produced.
 *
 * @return the output data format
 * @throws Exception data format could not be defined
 */
@Override
public Instances defineDataFormat() throws Exception {
    // initialize
    setOptions(getOptions());
    checkCoverage();
    Random random = new Random(getSeed());
    setRandom(random);
    Instances dataset;
    ArrayList<Attribute> attributes = new ArrayList<Attribute>(3);
    Attribute attribute;
    boolean classFlag = getClassFlag();
    ArrayList<String> classValues = null;
    if (classFlag) {
        classValues = new ArrayList<String>(getClusters().length);
    }
    ArrayList<String> boolValues = new ArrayList<String>(2);
    boolValues.add("false");
    boolValues.add("true");
    ArrayList<String> nomValues = null;
    // define dataset
    for (int i = 0; i < getNumAttributes(); i++) {
        // define boolean attribute
        if (m_booleanCols.isInRange(i)) {
            attribute = new Attribute("B" + i, boolValues);
        } else if (m_nominalCols.isInRange(i)) {
            // define nominal attribute
            nomValues = new ArrayList<String>(m_numValues[i]);
            for (int j = 0; j < m_numValues[i]; j++) {
                nomValues.add("value-" + j);
            }
            attribute = new Attribute("N" + i, nomValues);
        } else {
            // numerical attribute
            attribute = new Attribute("X" + i);
        }
        attributes.add(attribute);
    }
    if (classFlag) {
        for (int i = 0; i < getClusters().length; i++) {
            classValues.add("c" + i);
        }
        attribute = new Attribute("class", classValues);
        attributes.add(attribute);
    }
    dataset = new Instances(getRelationNameToUse(), attributes, 0);
    if (classFlag) {
        dataset.setClassIndex(m_NumAttributes);
    }
    // set dataset format of this class
    Instances format = new Instances(dataset, 0);
    setDatasetFormat(format);
    for (int i = 0; i < getClusters().length; i++) {
        SubspaceClusterDefinition cl = (SubspaceClusterDefinition) getClusters()[i];
        cl.setNumInstances(random);
        cl.setParent(this);
    }
    return dataset;
}
