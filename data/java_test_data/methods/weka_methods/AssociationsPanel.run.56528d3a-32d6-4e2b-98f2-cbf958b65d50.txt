@Override
public void run() {
    m_CEPanel.addToHistory();
    // Copy the current state of things
    m_Log.statusMessage("Setting up...");
    Instances inst = new Instances(m_Instances);
    String grph = null;
    // String xmlRules = null;
    AssociationRules rulesList = null;
    Associator associator = (Associator) m_AssociatorEditor.getValue();
    StringBuffer outBuff = new StringBuffer();
    String name = (new SimpleDateFormat("HH:mm:ss - ")).format(new Date());
    String cname = associator.getClass().getName();
    if (cname.startsWith("weka.associations.")) {
        name += cname.substring("weka.associations.".length());
    } else {
        name += cname;
    }
    String cmd = m_AssociatorEditor.getValue().getClass().getName();
    if (m_AssociatorEditor.getValue() instanceof OptionHandler) {
        cmd += " " + Utils.joinOptions(((OptionHandler) m_AssociatorEditor.getValue()).getOptions());
    }
    try {
        // Output some header information
        m_Log.logMessage("Started " + cname);
        m_Log.logMessage("Command: " + cmd);
        if (m_Log instanceof TaskLogger) {
            ((TaskLogger) m_Log).taskStarted();
        }
        outBuff.append("=== Run information ===\n\n");
        outBuff.append("Scheme:       " + cname);
        if (associator instanceof OptionHandler) {
            String[] o = ((OptionHandler) associator).getOptions();
            outBuff.append(" " + Utils.joinOptions(o));
        }
        outBuff.append("\n");
        outBuff.append("Relation:     " + inst.relationName() + '\n');
        outBuff.append("Instances:    " + inst.numInstances() + '\n');
        outBuff.append("Attributes:   " + inst.numAttributes() + '\n');
        if (inst.numAttributes() < 100) {
            for (int i = 0; i < inst.numAttributes(); i++) {
                outBuff.append("              " + inst.attribute(i).name() + '\n');
            }
        } else {
            outBuff.append("              [list of attributes omitted]\n");
        }
        m_History.addResult(name, outBuff);
        m_History.setSingle(name);
        // Build the model and output it.
        m_Log.statusMessage("Building model on training data...");
        associator.buildAssociations(inst);
        outBuff.append("=== Associator model (full training set) ===\n\n");
        outBuff.append(associator.toString() + '\n');
        m_History.updateResult(name);
        if (m_storeOutput.isSelected()) {
            if (associator instanceof Drawable) {
                grph = null;
                try {
                    grph = ((Drawable) associator).graph();
                } catch (Exception ex) {
                }
            }
            if (associator instanceof weka.associations.AssociationRulesProducer) {
                // xmlRules = null;
                rulesList = null;
                try {
                    // xmlRules =
                    // ((weka.associations.XMLRulesProducer)associator).xmlRules();
                    rulesList = ((weka.associations.AssociationRulesProducer) associator).getAssociationRules();
                } catch (Exception ex) {
                }
            }
        }
        m_Log.logMessage("Finished " + cname);
        m_Log.statusMessage("OK");
    } catch (Exception ex) {
        m_Log.logMessage(ex.getMessage());
        m_Log.statusMessage("See error log");
    } finally {
        Vector<Object> visVect = new Vector<Object>();
        try {
            // save a copy since we don't need the learned model for
            // anything yet.
            // TODO should probably add options to store full model and
            // save/load
            // models like the classifier and clusterer panels
            Associator configCopy = associator.getClass().newInstance();
            if (configCopy instanceof OptionHandler) {
                ((OptionHandler) configCopy).setOptions(((OptionHandler) associator).getOptions());
            }
            visVect.add(configCopy);
        } catch (Exception ex) {
            ex.printStackTrace();
            // just add the original if we have problems copying
            visVect.add(associator);
        }
        if (grph != null || rulesList != null) {
            if (grph != null) {
                visVect.add(grph);
            }
            if (rulesList != null) {
                visVect.add(rulesList);
            }
        }
        m_History.addObject(name, visVect);
        if (isInterrupted()) {
            m_Log.logMessage("Interrupted " + cname);
            m_Log.statusMessage("See error log");
        }
        m_RunThread = null;
        m_StartBut.setEnabled(true);
        m_StopBut.setEnabled(false);
        if (m_Log instanceof TaskLogger) {
            ((TaskLogger) m_Log).taskFinished();
        }
    }
}
