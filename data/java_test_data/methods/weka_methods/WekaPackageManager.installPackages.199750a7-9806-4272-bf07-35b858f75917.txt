public static boolean installPackages(List<Package> toInstall, PrintStream... progress) throws Exception {
    useCacheOrOnlineRepository();
    List<Boolean> upgrades = new ArrayList<Boolean>();
    for (Package p : toInstall) {
        if (p.isInstalled()) {
            upgrades.add(new Boolean(true));
        } else {
            upgrades.add(new Boolean(false));
        }
    }
    PACKAGE_MANAGER.installPackages(toInstall, progress);
    boolean atLeastOneUpgrade = false;
    List<File> gpcFiles = new ArrayList<File>();
    int i = 0;
    Map<String, List<String>> injectDependencies = new HashMap<>();
    for (Package p : toInstall) {
        boolean isAnUpgrade = upgrades.get(i++);
        if (isAnUpgrade) {
            atLeastOneUpgrade = true;
        }
        String packageName = p.getName();
        File packageDir = new File(PACKAGE_MANAGER.getPackageHome().toString() + File.separator + packageName);
        checkForInjectDependencies(p, injectDependencies);
        boolean loadIt = loadCheck(p, packageDir, progress);
        if (loadIt & !isAnUpgrade) {
            processPackageDirectory(packageDir, false, gpcFiles, false);
        }
    }
    // inject dependencies before triggering any class discovery
    injectPackageDependencies(injectDependencies);
    WekaPackageClassLoaderManager.getWekaPackageClassLoaderManager().performIntegrityCheck();
    for (File f : gpcFiles) {
        processGenericPropertiesCreatorProps(f);
    }
    return atLeastOneUpgrade;
}
