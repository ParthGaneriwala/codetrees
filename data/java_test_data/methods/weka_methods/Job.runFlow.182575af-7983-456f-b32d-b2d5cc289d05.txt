protected void runFlow(Map<String, String> varsToSet, Map<String, Map<String, String>> propsToSet, Map<String, LinkedHashSet<Data>> results) throws WekaException {
    getStepManager().processing();
    JobEnvironment env = new JobEnvironment(getStepManager().getExecutionEnvironment().getEnvironmentVariables());
    m_flowExecutor.getExecutionEnvironment().setEnvironmentVariables(env);
    if (varsToSet != null) {
        for (Map.Entry<String, String> e : varsToSet.entrySet()) {
            env.addVariable(e.getKey(), e.getValue());
        }
    }
    if (propsToSet != null) {
        env.addToStepProperties(propsToSet);
    }
    if (results != null) {
        env.addAllResults(results);
    }
    getStepManager().statusMessage("Executing flow '" + m_flowExecutor.getFlow().getFlowName() + "'");
    try {
        m_flowExecutor.runParallel();
        m_flowExecutor.waitUntilFinished();
        // complete shutdown of executor services
        try {
            Thread.sleep(200);
        } catch (InterruptedException e) {
        // ignore
        }
        Data success = new Data(StepManager.CON_JOB_SUCCESS, getName() + " completed successfully.");
        success.setPayloadElement(StepManager.CON_AUX_DATA_IS_INCREMENTAL, true);
        if (varsToSet != null) {
            success.setPayloadElement(StepManager.CON_AUX_DATA_ENVIRONMENT_VARIABLES, varsToSet);
        }
        if (propsToSet != null) {
            success.setPayloadElement(StepManager.CON_AUX_DATA_ENVIRONMENT_PROPERTIES, propsToSet);
        }
        JobEnvironment flowEnv = (JobEnvironment) m_flowExecutor.getExecutionEnvironment().getEnvironmentVariables();
        if (flowEnv.getResultData() != null) {
            success.setPayloadElement(StepManager.CON_AUX_DATA_ENVIRONMENT_RESULTS, flowEnv.getResultData());
        }
        getStepManager().outputData(success);
    } catch (WekaException ex) {
        Data failure = new Data(StepManager.CON_JOB_FAILURE, LogManager.stackTraceToString(ex));
        failure.setPayloadElement(StepManager.CON_AUX_DATA_IS_INCREMENTAL, true);
        if (varsToSet != null) {
            failure.setPayloadElement(StepManager.CON_AUX_DATA_ENVIRONMENT_VARIABLES, varsToSet);
        }
        if (propsToSet != null) {
            failure.setPayloadElement(StepManager.CON_AUX_DATA_ENVIRONMENT_PROPERTIES, propsToSet);
        }
        getStepManager().outputData(failure);
    }
    getStepManager().finished();
}
