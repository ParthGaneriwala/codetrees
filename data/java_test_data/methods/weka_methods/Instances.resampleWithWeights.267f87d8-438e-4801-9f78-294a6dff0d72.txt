public Instances resampleWithWeights(Random random, double[] weights, boolean[] sampled, boolean representUsingWeights, double sampleSize) {
    if (weights.length != numInstances()) {
        throw new IllegalArgumentException("weights.length != numInstances.");
    }
    if ((sampleSize < 0) || (sampleSize > 100)) {
        throw new IllegalArgumentException("Sample size must be a percentage.");
    }
    Instances newData = new Instances(this, numInstances());
    if (numInstances() == 0) {
        return newData;
    }
    // Walker's method, see pp. 232 of "Stochastic Simulation" by B.D. Ripley
    double[] P = new double[weights.length];
    System.arraycopy(weights, 0, P, 0, weights.length);
    Utils.normalize(P);
    double[] Q = new double[weights.length];
    int[] A = new int[weights.length];
    int[] W = new int[weights.length];
    int M = weights.length;
    int NN = -1;
    int NP = M;
    for (int I = 0; I < M; I++) {
        if (P[I] < 0) {
            throw new IllegalArgumentException("Weights have to be positive.");
        }
        Q[I] = M * P[I];
        if (Q[I] < 1.0) {
            W[++NN] = I;
        } else {
            W[--NP] = I;
        }
    }
    if (NN > -1 && NP < M) {
        for (int S = 0; S < M - 1; S++) {
            int I = W[S];
            int J = W[NP];
            A[I] = J;
            Q[J] += Q[I] - 1.0;
            if (Q[J] < 1.0) {
                NP++;
            }
            if (NP >= M) {
                break;
            }
        }
    // A[W[M]] = W[M];
    }
    for (int I = 0; I < M; I++) {
        Q[I] += I;
    }
    // Do we need to keep track of how many copies to use?
    int[] counts = null;
    if (representUsingWeights) {
        counts = new int[M];
    }
    int numToBeSampled = (int) (numInstances() * (sampleSize / 100.0));
    for (int i = 0; i < numToBeSampled; i++) {
        int ALRV;
        double U = M * random.nextDouble();
        int I = (int) U;
        if (U < Q[I]) {
            ALRV = I;
        } else {
            ALRV = A[I];
        }
        if (representUsingWeights) {
            counts[ALRV]++;
        } else {
            newData.add(instance(ALRV));
        }
        if (sampled != null) {
            sampled[ALRV] = true;
        }
        if (!representUsingWeights) {
            newData.instance(newData.numInstances() - 1).setWeight(1);
        }
    }
    // Add data based on counts if weights should represent numbers of copies.
    if (representUsingWeights) {
        for (int i = 0; i < counts.length; i++) {
            if (counts[i] > 0) {
                newData.add(instance(i));
                newData.instance(newData.numInstances() - 1).setWeight(counts[i]);
            }
        }
    }
    return newData;
}
