protected synchronized Instance generateMergedInstance(Sorter.InstanceHolder one, Sorter.InstanceHolder two) {
    double[] vals = new double[m_mergedHeader.numAttributes()];
    int count = 0;
    Instances currentStructure = m_mergedHeader;
    if (m_runningIncrementally && m_stringAttsPresent) {
        currentStructure = m_headerPool.get(m_count.getAndIncrement() % 10);
    }
    for (int i = 0; i < m_headerOne.numAttributes(); i++) {
        vals[count] = one.m_instance.value(i);
        if (one.m_stringVals != null && one.m_stringVals.size() > 0 && m_mergedHeader.attribute(count).isString()) {
            String valToSetInHeader = one.m_stringVals.get(one.m_instance.attribute(i).name());
            currentStructure.attribute(count).setStringValue(valToSetInHeader);
            vals[count] = 0;
        }
        count++;
    }
    for (int i = 0; i < m_headerTwo.numAttributes(); i++) {
        vals[count] = two.m_instance.value(i);
        if (two.m_stringVals != null && two.m_stringVals.size() > 0 && m_mergedHeader.attribute(count).isString()) {
            String valToSetInHeader = one.m_stringVals.get(two.m_instance.attribute(i).name());
            currentStructure.attribute(count).setStringValue(valToSetInHeader);
            vals[count] = 0;
        }
        count++;
    }
    Instance newInst = new DenseInstance(1.0, vals);
    newInst.setDataset(currentStructure);
    return newInst;
}
