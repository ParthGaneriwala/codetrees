protected void calculateCutPointsByEqualFrequencyBinning(int index) {
    // Copy data so that it can be sorted
    Instances data = new Instances(getInputFormat());
    // Sort input data
    data.sort(index);
    // Compute weight of instances without missing values
    double sumOfWeights = 0;
    for (int i = 0; i < data.numInstances(); i++) {
        if (data.instance(i).isMissing(index)) {
            break;
        } else {
            sumOfWeights += data.instance(i).weight();
        }
    }
    double freq;
    double[] cutPoints = new double[m_NumBins - 1];
    if (getDesiredWeightOfInstancesPerInterval() > 0) {
        freq = getDesiredWeightOfInstancesPerInterval();
        cutPoints = new double[(int) (sumOfWeights / freq)];
    } else {
        freq = sumOfWeights / m_NumBins;
        cutPoints = new double[m_NumBins - 1];
    }
    // Compute break points
    double counter = 0, last = 0;
    int cpindex = 0, lastIndex = -1;
    for (int i = 0; i < data.numInstances() - 1; i++) {
        // Stop if value missing
        if (data.instance(i).isMissing(index)) {
            break;
        }
        counter += data.instance(i).weight();
        sumOfWeights -= data.instance(i).weight();
        // Do we have a potential breakpoint?
        if (data.instance(i).value(index) < data.instance(i + 1).value(index)) {
            // Have we passed the ideal size?
            if (counter >= freq) {
                // Is this break point worse than the last one?
                if (((freq - last) < (counter - freq)) && (lastIndex != -1)) {
                    cutPoints[cpindex] = (data.instance(lastIndex).value(index) + data.instance(lastIndex + 1).value(index)) / 2;
                    counter -= last;
                    last = counter;
                    lastIndex = i;
                } else {
                    cutPoints[cpindex] = (data.instance(i).value(index) + data.instance(i + 1).value(index)) / 2;
                    counter = 0;
                    last = 0;
                    lastIndex = -1;
                }
                cpindex++;
                freq = (sumOfWeights + counter) / ((cutPoints.length + 1) - cpindex);
            } else {
                lastIndex = i;
                last = counter;
            }
        }
    }
    // Check whether there was another possibility for a cut point
    if ((cpindex < cutPoints.length) && (lastIndex != -1)) {
        cutPoints[cpindex] = (data.instance(lastIndex).value(index) + data.instance(lastIndex + 1).value(index)) / 2;
        cpindex++;
    }
    // Did we find any cutpoints?
    if (cpindex == 0) {
        m_CutPoints[index] = null;
    } else {
        double[] cp = new double[cpindex];
        for (int i = 0; i < cpindex; i++) {
            cp[i] = cutPoints[i];
        }
        m_CutPoints[index] = cp;
    }
}
