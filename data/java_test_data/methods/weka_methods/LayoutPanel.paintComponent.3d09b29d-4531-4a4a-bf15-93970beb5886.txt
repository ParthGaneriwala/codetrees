@Override
public void paintComponent(Graphics gx) {
    Color backG = m_visLayout.getMainPerspective().getSetting(KFDefaults.LAYOUT_COLOR_KEY, KFDefaults.LAYOUT_COLOR);
    if (!backG.equals(getBackground())) {
        setBackground(backG);
    }
    double lz = m_visLayout.getZoomSetting() / 100.0;
    ((Graphics2D) gx).scale(lz, lz);
    if (m_visLayout.getZoomSetting() < 100) {
        ((Graphics2D) gx).setStroke(new BasicStroke(2));
    }
    super.paintComponent(gx);
    ((Graphics2D) gx).setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
    ((Graphics2D) gx).setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_GASP);
    paintStepLabels(gx);
    paintConnections(gx);
    if (m_visLayout.getFlowLayoutOperation() == LayoutOperation.CONNECTING) {
        gx.drawLine(m_currentX, m_currentY, m_oldX, m_oldY);
    } else if (m_visLayout.getFlowLayoutOperation() == LayoutOperation.SELECTING) {
        gx.drawRect(m_currentX < m_oldX ? m_currentX : m_oldX, m_currentY < m_oldY ? m_currentY : m_oldY, Math.abs(m_oldX - m_currentX), Math.abs(m_oldY - m_currentY));
    }
    if (m_visLayout.getMainPerspective().getSetting(KFDefaults.SHOW_GRID_KEY, KFDefaults.SHOW_GRID)) {
        Color gridColor = m_visLayout.getMainPerspective().getSetting(KFDefaults.GRID_COLOR_KEY, KFDefaults.GRID_COLOR);
        gx.setColor(gridColor);
        int gridSpacing = m_visLayout.getMainPerspective().getSetting(KFDefaults.GRID_SPACING_KEY, KFDefaults.GRID_SPACING);
        int layoutWidth = m_visLayout.getMainPerspective().getSetting(KFDefaults.LAYOUT_WIDTH_KEY, KFDefaults.LAYOUT_WIDTH);
        int layoutHeight = m_visLayout.getMainPerspective().getSetting(KFDefaults.LAYOUT_HEIGHT_KEY, KFDefaults.LAYOUT_HEIGHT);
        Stroke original = ((Graphics2D) gx).getStroke();
        Stroke dashed = new BasicStroke(1, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL, 0, new float[] { 3 }, 0);
        ((Graphics2D) gx).setStroke(dashed);
        for (int i = gridSpacing; i < layoutWidth / lz; i += gridSpacing) {
            gx.drawLine(i, 0, i, (int) (layoutHeight / lz));
        }
        for (int i = gridSpacing; i < layoutHeight / lz; i += gridSpacing) {
            gx.drawLine(0, i, (int) (layoutWidth / lz), i);
        }
        ((Graphics2D) gx).setStroke(original);
    }
}
