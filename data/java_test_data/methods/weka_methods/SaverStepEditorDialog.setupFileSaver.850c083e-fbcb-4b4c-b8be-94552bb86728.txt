protected void setupFileSaver(final Saver wrappedStep) {
    addPrimaryEditorPanel(BorderLayout.NORTH);
    m_prefixOrFile = new EnvironmentField();
    m_prefixOrFile.setEnvironment(m_env);
    m_directory = new FileEnvironmentField("", JFileChooser.SAVE_DIALOG, true);
    m_directory.setEnvironment(m_env);
    JPanel p = new JPanel();
    p.setLayout(new BorderLayout());
    m_secondaryEditor = new PropertySheetPanel(false);
    m_secondaryEditor.setEnvironment(m_env);
    m_secondaryEditor.setTarget(m_stepToEdit);
    p.add(m_secondaryEditor, BorderLayout.NORTH);
    JPanel tp = new JPanel();
    tp.setLayout(new BorderLayout());
    JPanel dp = new JPanel();
    dp.setLayout(new GridLayout(0, 1));
    dp.add(m_dirLab);
    dp.add(m_prefLab);
    JPanel dp2 = new JPanel();
    dp2.setLayout(new GridLayout(0, 1));
    dp2.add(m_directory);
    dp2.add(m_prefixOrFile);
    tp.add(dp, BorderLayout.WEST);
    tp.add(dp2, BorderLayout.CENTER);
    p.add(tp, BorderLayout.CENTER);
    m_primaryEditorHolder.add(p, BorderLayout.CENTER);
    add(m_editorHolder, BorderLayout.CENTER);
    if (!wrappedStep.getRelationNameForFilename()) {
        m_prefLab.setText("Filename");
    }
    try {
        String dir = wrappedStep.getSaver().retrieveDir();
        String prefixOrFile = wrappedStep.getSaver().filePrefix();
        m_directory.setText(dir);
        m_prefixOrFile.setText(prefixOrFile);
    } catch (Exception e) {
        e.printStackTrace();
    }
    m_secondaryEditor.addPropertyChangeListener(new PropertyChangeListener() {

        @Override
        public void propertyChange(PropertyChangeEvent evt) {
            if (wrappedStep.getRelationNameForFilename()) {
                if (m_prefLab.getText().startsWith("File")) {
                    m_prefLab.setText("Prefix ");
                }
            } else {
                if (m_prefLab.getText().startsWith("Prefix")) {
                    m_prefLab.setText("Filename ");
                }
            }
        }
    });
}
