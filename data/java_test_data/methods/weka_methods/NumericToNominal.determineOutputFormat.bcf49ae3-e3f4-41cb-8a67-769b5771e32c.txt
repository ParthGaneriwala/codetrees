@Override
protected Instances determineOutputFormat(Instances inputFormat) throws Exception {
    Instances data;
    Instances result;
    ArrayList<Attribute> atts;
    ArrayList<String> values;
    HashSet<Double> hash;
    int i;
    int n;
    boolean isDate;
    Instance inst;
    Vector<Double> sorted;
    m_Cols.setUpper(inputFormat.numAttributes() - 1);
    data = new Instances(inputFormat);
    atts = new ArrayList<Attribute>();
    for (i = 0; i < data.numAttributes(); i++) {
        if (!m_Cols.isInRange(i) || !data.attribute(i).isNumeric()) {
            atts.add(data.attribute(i));
            continue;
        }
        // date attribute?
        isDate = (data.attribute(i).type() == Attribute.DATE);
        // determine all available attribute values in dataset
        hash = new HashSet<Double>();
        for (n = 0; n < data.numInstances(); n++) {
            inst = data.instance(n);
            if (inst.isMissing(i)) {
                continue;
            }
            hash.add(new Double(inst.value(i)));
        }
        // sort values
        sorted = new Vector<Double>();
        for (Double o : hash) {
            sorted.add(o);
        }
        Collections.sort(sorted);
        // create attribute from sorted values
        values = new ArrayList<String>();
        for (Double o : sorted) {
            if (isDate) {
                values.add(data.attribute(i).formatDate(o.doubleValue()));
            } else {
                String label = Utils.doubleToString(o.doubleValue(), MAX_DECIMALS);
                if (!values.contains(label))
                    values.add(label);
            }
        }
        Attribute newAtt = new Attribute(data.attribute(i).name(), values);
        newAtt.setWeight(data.attribute(i).weight());
        atts.add(newAtt);
    }
    result = new Instances(inputFormat.relationName(), atts, 0);
    result.setClassIndex(inputFormat.classIndex());
    return result;
}
