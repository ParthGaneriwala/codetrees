@Override
public void processIncoming(Data data) throws WekaException {
    try {
        if (m_isReset) {
            m_isReset = false;
            getStepManager().processing();
            Instances incomingStructure = null;
            if (data.getConnectionName().equals(StepManager.CON_INSTANCE)) {
                incomingStructure = ((Instance) data.getPayloadElement(StepManager.CON_INSTANCE)).dataset();
            } else {
                incomingStructure = (Instances) data.getPayloadElement(data.getConnectionName());
            }
            if (data.getConnectionName().equals(StepManager.CON_INSTANCE)) {
                m_streaming = true;
                if (m_trainedClusterer == null) {
                    m_trainedClusterer = weka.clusterers.AbstractClusterer.makeCopy(m_clustererTemplate);
                    if (m_trainedClusterer instanceof EnvironmentHandler) {
                        ((EnvironmentHandler) m_trainedClusterer).setEnvironment(getStepManager().getExecutionEnvironment().getEnvironmentVariables());
                    }
                // TODO - support incremental training at some point?
                }
            } else if (data.getConnectionName().equals(StepManager.CON_TRAININGSET)) {
                m_trainedClustererHeader = incomingStructure;
            }
            if (m_trainedClustererHeader != null && !incomingStructure.equalHeaders(m_trainedClustererHeader)) {
                throw new WekaException("Structure of incoming data does not match " + "that of the trained clusterer");
            }
        }
        if (m_streaming) {
        // TODO processStreaming()
        } else if (m_trainTestHelper != null) {
            // train test pairs
            m_trainTestHelper.process(data);
        } else {
            processOnlyTestSet(data);
        }
    } catch (Exception ex) {
        throw new WekaException(ex);
    }
}
