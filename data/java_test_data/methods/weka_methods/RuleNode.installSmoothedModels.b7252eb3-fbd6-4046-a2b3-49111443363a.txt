public void installSmoothedModels() throws Exception {
    if (m_isLeaf) {
        double[] coefficients = new double[m_numAttributes];
        double intercept;
        double[] coeffsUsedByLinearModel = m_nodeModel.coefficients();
        RuleNode current = this;
        // prime array with leaf node coefficients
        for (int i = 0; i < coeffsUsedByLinearModel.length; i++) {
            if (i != m_classIndex) {
                coefficients[i] = coeffsUsedByLinearModel[i];
            }
        }
        // intercept
        intercept = m_nodeModel.intercept();
        do {
            if (current.m_parent != null) {
                double n = current.m_numInstances;
                // contribution of the model below
                for (int i = 0; i < coefficients.length; i++) {
                    coefficients[i] = ((coefficients[i] * n) / (n + SMOOTHING_CONSTANT));
                }
                intercept = ((intercept * n) / (n + SMOOTHING_CONSTANT));
                // contribution of this model
                coeffsUsedByLinearModel = current.m_parent.getModel().coefficients();
                for (int i = 0; i < coeffsUsedByLinearModel.length; i++) {
                    if (i != m_classIndex) {
                        // smooth in these coefficients (at this node)
                        coefficients[i] += ((SMOOTHING_CONSTANT * coeffsUsedByLinearModel[i]) / (n + SMOOTHING_CONSTANT));
                    }
                }
                // smooth in the intercept
                intercept += ((SMOOTHING_CONSTANT * current.m_parent.getModel().intercept()) / (n + SMOOTHING_CONSTANT));
                current = current.m_parent;
            }
        } while (current.m_parent != null);
        m_nodeModel = new PreConstructedLinearModel(coefficients, intercept);
        m_nodeModel.buildClassifier(m_instances);
    }
    if (m_left != null) {
        m_left.installSmoothedModels();
    }
    if (m_right != null) {
        m_right.installSmoothedModels();
    }
}
