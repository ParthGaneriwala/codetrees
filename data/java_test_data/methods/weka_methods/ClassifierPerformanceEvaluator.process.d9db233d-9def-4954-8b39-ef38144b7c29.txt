@Override
public void process() throws Exception {
    Object[] r = new Object[6];
    r[4] = m_setNum;
    getExecutionResult().setResult(r);
    getLogHandler().statusMessage("Evaluating " + m_classifierDesc + " on fold/set " + m_setNum);
    getLogHandler().logDetailed("Evaluating " + m_classifierDesc + " on " + m_testData.relationName() + " fold/set " + m_setNum);
    ClassifierErrorsPlotInstances plotInstances = ExplorerDefaults.getClassifierErrorsPlotInstances();
    Evaluation eval = null;
    if (m_trainData == null) {
        eval = new Evaluation(m_testData, m_cMatrix);
        plotInstances.setInstances(m_testData);
        plotInstances.setClassifier(m_classifier);
        plotInstances.setClassIndex(m_testData.classIndex());
        plotInstances.setEvaluation(eval);
        plotInstances.setPointSizeProportionalToMargin(m_errPlotPtSizePropToMarg);
        eval = adjustForInputMappedClassifier(eval, m_classifier, m_testData, plotInstances, m_cMatrix);
        eval.useNoPriors();
        eval.setMetricsToDisplay(m_metricsList);
    } else {
        eval = new Evaluation(m_trainData, m_cMatrix);
        plotInstances.setInstances(m_trainData);
        plotInstances.setClassifier(m_classifier);
        plotInstances.setClassIndex(m_trainData.classIndex());
        plotInstances.setEvaluation(eval);
        plotInstances.setPointSizeProportionalToMargin(m_errPlotPtSizePropToMarg);
        eval = adjustForInputMappedClassifier(eval, m_classifier, m_trainData, plotInstances, m_cMatrix);
        eval.setMetricsToDisplay(m_metricsList);
    }
    plotInstances.setUp();
    if (m_classifier instanceof BatchPredictor && ((BatchPredictor) m_classifier).implementsMoreEfficientBatchPrediction()) {
        double[][] predictions = ((BatchPredictor) m_classifier).distributionsForInstances(m_testData);
        plotInstances.process(m_testData, predictions, eval);
    } else {
        for (int i = 0; i < m_testData.numInstances(); i++) {
            Instance temp = m_testData.instance(i);
            plotInstances.process(temp, m_classifier, eval);
        }
    }
    r[0] = eval;
    r[1] = m_classifier;
    r[2] = m_testData;
    r[3] = plotInstances;
    r[5] = m_evalLabel;
}
