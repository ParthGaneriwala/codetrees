protected ArrayList<Attribute> parseAttribute(ArrayList<Attribute> attributes) throws IOException {
    String attributeName;
    ArrayList<String> attributeValues;
    // Get attribute name.
    getNextToken();
    attributeName = m_Tokenizer.sval;
    getNextToken();
    // Check if attribute is nominal.
    if (m_Tokenizer.ttype == StreamTokenizer.TT_WORD) {
        // Attribute is real, integer, or string.
        if (m_Tokenizer.sval.equalsIgnoreCase(Attribute.ARFF_ATTRIBUTE_REAL) || m_Tokenizer.sval.equalsIgnoreCase(Attribute.ARFF_ATTRIBUTE_INTEGER) || m_Tokenizer.sval.equalsIgnoreCase(Attribute.ARFF_ATTRIBUTE_NUMERIC)) {
            Attribute att = new Attribute(attributeName, attributes.size());
            att.setWeight(getAttributeWeight());
            attributes.add(att);
            readTillEOL();
        } else if (m_Tokenizer.sval.equalsIgnoreCase(Attribute.ARFF_ATTRIBUTE_STRING)) {
            Attribute att = new Attribute(attributeName, (ArrayList<String>) null, attributes.size());
            att.setWeight(getAttributeWeight());
            readTillEOL();
            attributes.add(att);
        } else if (m_Tokenizer.sval.equalsIgnoreCase(Attribute.ARFF_ATTRIBUTE_DATE)) {
            String format = null;
            m_Tokenizer.nextToken();
            if (m_Tokenizer.ttype == '{') {
                // No date format but it looks like there is an attribute weight
                m_Tokenizer.pushBack();
                Attribute att = new Attribute(attributeName, format, attributes.size());
                att.setWeight(getAttributeWeight());
                attributes.add(att);
                readTillEOL();
            } else if (m_Tokenizer.ttype != StreamTokenizer.TT_EOL) {
                // Looks like there is a date format
                if ((m_Tokenizer.ttype != StreamTokenizer.TT_WORD) && (m_Tokenizer.ttype != '\'') && (m_Tokenizer.ttype != '\"')) {
                    errorMessage("not a valid date format");
                }
                format = m_Tokenizer.sval;
                Attribute att = new Attribute(attributeName, format, attributes.size());
                // Now check for attribute weight
                att.setWeight(getAttributeWeight());
                attributes.add(att);
                readTillEOL();
            } else {
                m_Tokenizer.pushBack();
                attributes.add(new Attribute(attributeName, format, attributes.size()));
            }
        } else if (m_Tokenizer.sval.equalsIgnoreCase(Attribute.ARFF_ATTRIBUTE_RELATIONAL)) {
            double weight = getAttributeWeight();
            readTillEOL();
            // Read attributes for subrelation
            // First, save current set of attributes
            ArrayList<Attribute> atts = attributes;
            attributes = new ArrayList<Attribute>();
            // Now, read attributes until we hit end of declaration of relational
            // value
            getFirstToken();
            if (m_Tokenizer.ttype == StreamTokenizer.TT_EOF) {
                errorMessage("premature end of file");
            }
            do {
                if (Attribute.ARFF_ATTRIBUTE.equalsIgnoreCase(m_Tokenizer.sval)) {
                    attributes = parseAttribute(attributes);
                } else if (Attribute.ARFF_END_SUBRELATION.equalsIgnoreCase(m_Tokenizer.sval)) {
                    getNextToken();
                    if (!attributeName.equalsIgnoreCase(m_Tokenizer.sval)) {
                        errorMessage("declaration of subrelation " + attributeName + " must be terminated by " + "@end " + attributeName);
                    }
                    break;
                } else {
                    errorMessage("declaration of subrelation " + attributeName + " must be terminated by " + "@end " + attributeName);
                }
            } while (true);
            // Make relation and restore original set of attributes
            Instances relation = new Instances(attributeName, attributes, 0);
            attributes = atts;
            Attribute att = new Attribute(attributeName, relation, attributes.size());
            att.setWeight(weight);
            attributes.add(att);
        } else {
            errorMessage("no valid attribute type or invalid " + "enumeration");
        }
    } else {
        // Attribute is nominal.
        attributeValues = new ArrayList<String>();
        m_Tokenizer.pushBack();
        // Get values for nominal attribute.
        if (m_Tokenizer.nextToken() != '{') {
            errorMessage("{ expected at beginning of enumeration");
        }
        while (m_Tokenizer.nextToken() != '}') {
            if (m_Tokenizer.ttype == StreamTokenizer.TT_EOL) {
                errorMessage("} expected at end of enumeration");
            } else {
                attributeValues.add(m_Tokenizer.sval);
            }
        }
        Attribute att = new Attribute(attributeName, attributeValues, attributes.size());
        att.setWeight(getAttributeWeight());
        attributes.add(att);
        readTillEOL();
    }
    getLastToken(false);
    getFirstToken();
    if (m_Tokenizer.ttype == StreamTokenizer.TT_EOF) {
        errorMessage("premature end of file");
    }
    return attributes;
}
