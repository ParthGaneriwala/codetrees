@Override
public void process() throws Exception {
    RowResult result = new RowResult();
    result.m_rowNumber = m_rowNum;
    result.m_rowProbs = new double[m_imageWidth][0];
    m_random = new Random(m_rowNum * 11);
    m_dataGenerator.setSeed(m_rowNum * 11);
    m_numOfSamplesPerGenerator = (int) Math.pow(m_samplesBase, m_trainingData.numAttributes() - 3);
    if (m_trainingData == null) {
        throw new Exception("No training data set");
    }
    if (m_classifier == null && m_clusterer == null) {
        throw new Exception("No scheme set");
    }
    if (m_dataGenerator == null) {
        throw new Exception("No data generator set");
    }
    if (m_trainingData.attribute(m_xAtt).isNominal() || m_trainingData.attribute(m_yAtt).isNominal()) {
        throw new Exception("Visualization dimensions must be numeric");
    }
    m_attsToWeightOn = new boolean[m_trainingData.numAttributes()];
    m_attsToWeightOn[m_xAtt] = true;
    m_attsToWeightOn[m_yAtt] = true;
    // generate samples
    m_weightingAttsValues = new double[m_attsToWeightOn.length];
    m_vals = new double[m_trainingData.numAttributes()];
    m_predInst = new DenseInstance(1.0, m_vals);
    m_predInst.setDataset(m_trainingData);
    getLogHandler().logDetailed("Computing row number: " + m_rowNum);
    for (int j = 0; j < m_imageWidth; j++) {
        double[] preds = calculateRegionProbs(j, m_rowNum);
        result.m_rowProbs[j] = preds;
    }
    getExecutionResult().setResult(result);
}
