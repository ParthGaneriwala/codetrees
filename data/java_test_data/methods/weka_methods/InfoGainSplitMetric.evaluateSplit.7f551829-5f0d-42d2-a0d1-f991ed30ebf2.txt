@Override
public double evaluateSplit(Map<String, WeightMass> preDist, List<Map<String, WeightMass>> postDist) {
    double[] pre = new double[preDist.size()];
    int count = 0;
    for (Map.Entry<String, WeightMass> e : preDist.entrySet()) {
        pre[count++] = e.getValue().m_weight;
    }
    double preEntropy = ContingencyTables.entropy(pre);
    double[] distWeights = new double[postDist.size()];
    double totalWeight = 0.0;
    for (int i = 0; i < postDist.size(); i++) {
        distWeights[i] = SplitMetric.sum(postDist.get(i));
        totalWeight += distWeights[i];
    }
    int fracCount = 0;
    for (double d : distWeights) {
        if (d / totalWeight > m_minFracWeightForTwoBranches) {
            fracCount++;
        }
    }
    if (fracCount < 2) {
        return Double.NEGATIVE_INFINITY;
    }
    double postEntropy = 0;
    for (int i = 0; i < postDist.size(); i++) {
        Map<String, WeightMass> d = postDist.get(i);
        double[] post = new double[d.size()];
        count = 0;
        for (Map.Entry<String, WeightMass> e : d.entrySet()) {
            post[count++] = e.getValue().m_weight;
        }
        postEntropy += distWeights[i] * ContingencyTables.entropy(post);
    }
    if (totalWeight > 0) {
        postEntropy /= totalWeight;
    }
    return preEntropy - postEntropy;
}
