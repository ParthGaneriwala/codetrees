@Override
protected Instances determineOutputFormat(Instances inputFormat) throws Exception {
    ArrayList<Attribute> atts;
    ArrayList<String> values;
    Instances result;
    int i;
    // attributes must be numeric
    m_Attributes.setUpper(inputFormat.numAttributes() - 1);
    m_AttributeIndices = m_Attributes.getSelection();
    for (i = 0; i < m_AttributeIndices.length; i++) {
        // ignore class
        if (m_AttributeIndices[i] == inputFormat.classIndex()) {
            m_AttributeIndices[i] = NON_NUMERIC;
            continue;
        }
        // not numeric -> ignore it
        if (!inputFormat.attribute(m_AttributeIndices[i]).isNumeric()) {
            m_AttributeIndices[i] = NON_NUMERIC;
        }
    }
    // get old attributes
    atts = new ArrayList<Attribute>();
    for (i = 0; i < inputFormat.numAttributes(); i++) {
        atts.add(inputFormat.attribute(i));
    }
    if (!getDetectionPerAttribute()) {
        m_OutlierAttributePosition = new int[1];
        m_OutlierAttributePosition[0] = atts.size();
        // add 2 new attributes
        values = new ArrayList<String>();
        values.add("no");
        values.add("yes");
        atts.add(new Attribute("Outlier", values));
        values = new ArrayList<String>();
        values.add("no");
        values.add("yes");
        atts.add(new Attribute("ExtremeValue", values));
    } else {
        m_OutlierAttributePosition = new int[m_AttributeIndices.length];
        for (i = 0; i < m_AttributeIndices.length; i++) {
            if (m_AttributeIndices[i] == NON_NUMERIC) {
                continue;
            }
            m_OutlierAttributePosition[i] = atts.size();
            // add new attributes
            values = new ArrayList<String>();
            values.add("no");
            values.add("yes");
            Attribute aO = new Attribute(inputFormat.attribute(m_AttributeIndices[i]).name() + "_Outlier", values);
            aO.setWeight(inputFormat.attribute(m_AttributeIndices[i]).weight());
            atts.add(aO);
            values = new ArrayList<String>();
            values.add("no");
            values.add("yes");
            Attribute aE = new Attribute(inputFormat.attribute(m_AttributeIndices[i]).name() + "_ExtremeValue", values);
            aE.setWeight(inputFormat.attribute(m_AttributeIndices[i]).weight());
            atts.add(aE);
            if (getOutputOffsetMultiplier()) {
                Attribute aF = new Attribute(inputFormat.attribute(m_AttributeIndices[i]).name() + "_Offset");
                aF.setWeight(inputFormat.attribute(m_AttributeIndices[i]).weight());
                atts.add(aF);
            }
        }
    }
    // generate header
    result = new Instances(inputFormat.relationName(), atts, 0);
    result.setClassIndex(inputFormat.classIndex());
    return result;
}
