protected void readHeader(int capacity) throws IOException {
    m_Lines = 0;
    String relationName = "";
    // Get name of relation.
    getFirstToken();
    if (m_Tokenizer.ttype == StreamTokenizer.TT_EOF) {
        errorMessage("premature end of file");
    }
    if (Instances.ARFF_RELATION.equalsIgnoreCase(m_Tokenizer.sval)) {
        getNextToken();
        relationName = m_Tokenizer.sval;
        getLastToken(false);
    } else {
        errorMessage("keyword " + Instances.ARFF_RELATION + " expected");
    }
    // Create vectors to hold information temporarily.
    ArrayList<Attribute> attributes = new ArrayList<Attribute>();
    // Get attribute declarations.
    getFirstToken();
    if (m_Tokenizer.ttype == StreamTokenizer.TT_EOF) {
        errorMessage("premature end of file");
    }
    while (Attribute.ARFF_ATTRIBUTE.equalsIgnoreCase(m_Tokenizer.sval)) {
        attributes = parseAttribute(attributes);
    }
    // Check if data part follows. We can't easily check for EOL.
    if (!Instances.ARFF_DATA.equalsIgnoreCase(m_Tokenizer.sval)) {
        errorMessage("keyword " + Instances.ARFF_DATA + " expected");
    }
    // Check if any attributes have been declared.
    if (attributes.size() == 0) {
        errorMessage("no attributes declared");
    }
    m_Data = new Instances(relationName, attributes, capacity);
}
