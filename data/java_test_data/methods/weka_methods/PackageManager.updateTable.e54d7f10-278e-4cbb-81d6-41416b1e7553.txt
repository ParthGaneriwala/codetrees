private void updateTable() {
    if (m_installedPackages == null || m_availablePackages == null) {
        // update the loaded status
        for (Package p : m_allPackages) {
            List<Object> catAndVers = m_packageLookupInfo.get(p.getName());
            String loadStatus = catAndVers.get(2).toString();
            if (p.isInstalled()) {
                try {
                    p = WekaPackageManager.getInstalledPackageInfo(p.getName());
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
                File packageRoot = new File(WekaPackageManager.getPackageHome().toString() + File.separator + p.getName());
                // boolean loaded = WekaPackageManager.loadCheck(p, packageRoot);
                boolean loaded = WekaPackageManager.hasBeenLoaded(p);
                boolean userNoLoad = WekaPackageManager.m_doNotLoadList.contains(p.getName());
                if (!loadStatus.contains("pending")) {
                    loadStatus = (loaded) ? "Yes" : userNoLoad ? "No - user flagged" : "No - check log";
                }
            }
            catAndVers.set(2, loadStatus);
        }
    }
    if (m_searchField.getText() != null && m_searchField.getText().length() > 0) {
        updateTableForPackageList(m_searchResults);
        return;
    }
    if (m_allBut.isSelected()) {
        Collections.sort(m_allPackages, m_packageComparator);
        updateTableForPackageList(m_allPackages);
    } else if (m_installedBut.isSelected()) {
        try {
            if (m_installedPackages == null) {
                m_installedPackages = WekaPackageManager.getInstalledPackages();
            }
            updateTableForPackageList(m_installedPackages);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    } else {
        try {
            if (m_availablePackages == null) {
                m_availablePackages = WekaPackageManager.getAvailableCompatiblePackages();
            }
            updateTableForPackageList(m_availablePackages);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}
