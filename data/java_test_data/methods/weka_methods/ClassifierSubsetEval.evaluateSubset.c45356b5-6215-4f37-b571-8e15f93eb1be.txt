@Override
public double evaluateSubset(BitSet subset, Instance holdOut, boolean retrain) throws Exception {
    if (m_evaluationMeasure.getID() != EVAL_DEFAULT) {
        throw new Exception("Can only use default evaluation measure in the method");
    }
    int i, j;
    double error;
    int numAttributes = 0;
    Instances trainCopy = null;
    Instance testCopy = null;
    if (m_trainingInstances.equalHeaders(holdOut.dataset()) == false) {
        throw new Exception("evaluateSubset : Incompatable instance types.\n" + m_trainingInstances.equalHeadersMsg(holdOut.dataset()));
    }
    Remove delTransform = new Remove();
    delTransform.setInvertSelection(true);
    // copy the training instances
    trainCopy = new Instances(m_trainingInstances);
    testCopy = (Instance) holdOut.copy();
    // count attributes set in the BitSet
    for (i = 0; i < m_numAttribs; i++) {
        if (subset.get(i)) {
            numAttributes++;
        }
    }
    // set up an array of attribute indexes for the filter (+1 for the class)
    int[] featArray = new int[numAttributes + 1];
    for (i = 0, j = 0; i < m_numAttribs; i++) {
        if (subset.get(i)) {
            featArray[j++] = i;
        }
    }
    featArray[j] = m_classIndex;
    delTransform.setAttributeIndicesArray(featArray);
    delTransform.setInputFormat(trainCopy);
    if (retrain) {
        trainCopy = Filter.useFilter(trainCopy, delTransform);
        // build the classifier
        m_Classifier.buildClassifier(trainCopy);
    }
    delTransform.input(testCopy);
    testCopy = delTransform.output();
    double pred;
    double[] distrib;
    distrib = m_Classifier.distributionForInstance(testCopy);
    if (m_trainingInstances.classAttribute().isNominal()) {
        pred = distrib[(int) testCopy.classValue()];
    } else {
        pred = distrib[0];
    }
    if (m_trainingInstances.classAttribute().isNominal()) {
        error = 1.0 - pred;
    } else {
        error = testCopy.classValue() - pred;
    }
    // maximize something
    return -error;
}
