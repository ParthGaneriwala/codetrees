protected void pruneCandidateCanopies() {
    if (m_didPruneLastTime == false && m_canopies.size() == m_maxCanopyCandidates) {
        return;
    }
    m_didPruneLastTime = false;
    for (int i = m_canopies.numInstances() - 1; i >= 0; i--) {
        double dens = m_canopyT2Density.get(i)[0];
        if (dens < m_minClusterDensity) {
            double[] tempDens = m_canopyT2Density.remove(m_canopyT2Density.size() - 1);
            if (i < m_canopyT2Density.size()) {
                m_canopyT2Density.set(i, tempDens);
            }
            if (getDebug()) {
                System.err.println("Pruning a candidate canopy with density: " + dens);
            }
            m_didPruneLastTime = true;
            double[][] tempCenter = m_canopyCenters.remove(m_canopyCenters.size() - 1);
            if (i < m_canopyCenters.size()) {
                m_canopyCenters.set(i, tempCenter);
            }
            double[] tempNumMissingNumerics = m_canopyNumMissingForNumerics.remove(m_canopyNumMissingForNumerics.size() - 1);
            if (i < m_canopyNumMissingForNumerics.size()) {
                m_canopyNumMissingForNumerics.set(i, tempNumMissingNumerics);
            }
            if (i != m_canopies.numInstances() - 1) {
                m_canopies.swap(i, m_canopies.numInstances() - 1);
            }
            m_canopies.delete(m_canopies.numInstances() - 1);
        }
    }
}
