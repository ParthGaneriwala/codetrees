@Override
public void start() {
    TreeMap<Integer, Startable> startables = new TreeMap<Integer, Startable>();
    for (int i = 0; i < m_subFlow.size(); i++) {
        BeanInstance temp = (BeanInstance) m_subFlow.elementAt(i);
        if (temp.getBean() instanceof Startable) {
            Startable s = (Startable) temp.getBean();
            String beanName = s.getClass().getName();
            String customName = beanName;
            boolean ok = false;
            Integer position = null;
            boolean launch = true;
            // String beanName = s.getClass().getName();
            if (s instanceof BeanCommon) {
                customName = ((BeanCommon) s).getCustomName();
                beanName = customName;
                // see if we have a parseable integer at the start of the name
                if (customName.indexOf(':') > 0) {
                    if (customName.substring(0, customName.indexOf(':')).startsWith("!")) {
                        launch = false;
                    } else {
                        String startPos = customName.substring(0, customName.indexOf(':'));
                        try {
                            position = new Integer(startPos);
                            ok = true;
                        } catch (NumberFormatException n) {
                        }
                    }
                }
            }
            if (!ok && launch) {
                if (startables.size() == 0) {
                    position = new Integer(0);
                } else {
                    int newPos = startables.lastKey().intValue();
                    newPos++;
                    position = new Integer(newPos);
                }
            }
            if (s.getStartMessage().charAt(0) != '$') {
                if (launch) {
                    if (m_log != null) {
                        m_log.logMessage(statusMessagePrefix() + "adding start point " + beanName + " to the execution list (position " + position + ")");
                    }
                    startables.put(position, s);
                }
            }
        }
    }
    if (startables.size() > 0) {
        if (m_log != null) {
            m_log.logMessage(statusMessagePrefix() + "Starting " + startables.size() + " sub-flow start points sequentially.");
        }
        Set<Integer> s = startables.keySet();
        for (Integer i : s) {
            try {
                Startable startPoint = startables.get(i);
                String bN = startPoint.getClass().getName();
                if (startPoint instanceof BeanCommon) {
                    bN = ((BeanCommon) startPoint).getCustomName();
                }
                if (m_log != null) {
                    m_log.statusMessage(statusMessagePrefix() + "Starting sub-flow start point: " + bN);
                    m_log.logMessage(statusMessagePrefix() + "Starting sub-flow start point: " + bN);
                }
                startPoint.start();
                Thread.sleep(500);
                while (isBusy()) {
                    Thread.sleep(2000);
                }
            } catch (Exception ex) {
                if (m_log != null) {
                    m_log.logMessage(statusMessagePrefix() + "A problem occurred when launching start points in sub-flow: " + ex.getMessage());
                }
                stop();
                if (m_log != null) {
                    m_log.statusMessage(statusMessagePrefix() + "ERROR (see log for details)");
                }
            }
        }
        if (m_log != null) {
            m_log.statusMessage(statusMessagePrefix() + "Finished.");
        }
    }
}
