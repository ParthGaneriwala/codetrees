private static void listPackages(String arg) throws Exception {
    if (m_offline && (arg.equalsIgnoreCase("all") || arg.equalsIgnoreCase("available"))) {
        System.out.println("Running offline - unable to display " + "available or all package information");
        return;
    }
    List<Package> packageList = null;
    useCacheOrOnlineRepository();
    if (arg.equalsIgnoreCase("all")) {
        packageList = PACKAGE_MANAGER.getAllPackages();
    } else if (arg.equals("installed")) {
        packageList = PACKAGE_MANAGER.getInstalledPackages();
    } else if (arg.equals("available")) {
        // packageList = PACKAGE_MANAGER.getAvailablePackages();
        packageList = getAvailableCompatiblePackages();
    } else {
        System.err.println("[WekaPackageManager] Unknown argument " + arg);
        printUsage();
        // System.exit(1);
        return;
    }
    StringBuffer result = new StringBuffer();
    result.append("Installed\tRepository\tLoaded\tPackage\n");
    result.append("=========\t==========\t======\t=======\n");
    boolean userOptedNoLoad = false;
    Iterator<Package> i = packageList.iterator();
    while (i.hasNext()) {
        Package p = i.next();
        String installedV = "-----    ";
        String repositoryV = "-----     ";
        String loaded = "No";
        if (p.isInstalled()) {
            Package installedP = getInstalledPackageInfo(p.getName());
            if (loadCheck(installedP, new File(WekaPackageManager.getPackageHome().toString() + File.separator + p.getName()))) {
                loaded = "Yes";
            } else {
                if (m_doNotLoadList.contains(installedP.getName())) {
                    loaded = "No*";
                    userOptedNoLoad = true;
                }
            }
            installedV = installedP.getPackageMetaDataElement(VERSION_KEY).toString() + "    ";
            try {
                if (!m_offline) {
                    Package repP = getRepositoryPackageInfo(p.getName());
                    repositoryV = repP.getPackageMetaDataElement(VERSION_KEY).toString() + "     ";
                }
            } catch (Exception ex) {
            // not at the repository
            }
        } else {
            repositoryV = p.getPackageMetaDataElement(VERSION_KEY).toString() + "     ";
        }
        String title = p.getPackageMetaDataElement("Title").toString();
        result.append(installedV + "\t" + repositoryV + "\t" + loaded + "\t" + p.getName() + ": " + title + "\n");
    }
    if (userOptedNoLoad) {
        result.append("* User flagged as no load\n");
    }
    System.out.println(result.toString());
}
