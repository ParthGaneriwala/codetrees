protected boolean examineExample(int i2) throws Exception {
    double y2, F2;
    int i1 = -1;
    y2 = m_class[i2];
    if (m_I0.contains(i2)) {
        F2 = m_errors[i2];
    } else {
        F2 = SVMOutput(i2, m_data.instance(i2)) + m_b - y2;
        m_errors[i2] = F2;
        // Update thresholds
        if ((m_I1.contains(i2) || m_I2.contains(i2)) && (F2 < m_bUp)) {
            m_bUp = F2;
            m_iUp = i2;
        } else if ((m_I3.contains(i2) || m_I4.contains(i2)) && (F2 > m_bLow)) {
            m_bLow = F2;
            m_iLow = i2;
        }
    }
    // Check optimality using current bLow and bUp and, if
    // violated, find an index i1 to do joint optimization
    // with i2...
    boolean optimal = true;
    if (m_I0.contains(i2) || m_I1.contains(i2) || m_I2.contains(i2)) {
        if (m_bLow - F2 > 2 * m_tol) {
            optimal = false;
            i1 = m_iLow;
        }
    }
    if (m_I0.contains(i2) || m_I3.contains(i2) || m_I4.contains(i2)) {
        if (F2 - m_bUp > 2 * m_tol) {
            optimal = false;
            i1 = m_iUp;
        }
    }
    if (optimal) {
        return false;
    }
    // For i2 unbound choose the better i1...
    if (m_I0.contains(i2)) {
        if (m_bLow - F2 > F2 - m_bUp) {
            i1 = m_iLow;
        } else {
            i1 = m_iUp;
        }
    }
    if (i1 == -1) {
        throw new Exception("This should never happen!");
    }
    return takeStep(i1, i2, F2);
}
