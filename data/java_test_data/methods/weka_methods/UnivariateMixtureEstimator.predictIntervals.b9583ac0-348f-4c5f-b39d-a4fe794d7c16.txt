public double[][] predictIntervals(double conf) {
    // Compute minimum and maximum value, and delta
    double val = Statistics.normalInverse(1.0 - (1.0 - conf) / 2);
    double min = Double.MAX_VALUE;
    double max = -Double.MAX_VALUE;
    for (int i = 0; i < m_Means.length; i++) {
        double l = m_Means[i] - val * m_StdDevs[i];
        if (l < min) {
            min = l;
        }
        double r = m_Means[i] + val * m_StdDevs[i];
        if (r > max) {
            max = r;
        }
    }
    double delta = (max - min) / m_NumIntervals;
    // Create array with estimated probabilities
    double[] probabilities = new double[m_NumIntervals];
    double leftVal = Math.exp(logDensity(min));
    for (int i = 0; i < m_NumIntervals; i++) {
        double rightVal = Math.exp(logDensity(min + (i + 1) * delta));
        probabilities[i] = 0.5 * (leftVal + rightVal) * delta;
        leftVal = rightVal;
    }
    // Sort array based on area of bin estimates
    int[] sortedIndices = Utils.sort(probabilities);
    // Mark the intervals to use
    double sum = 0;
    boolean[] toUse = new boolean[probabilities.length];
    int k = 0;
    while ((sum < conf) && (k < toUse.length)) {
        toUse[sortedIndices[toUse.length - (k + 1)]] = true;
        sum += probabilities[sortedIndices[toUse.length - (k + 1)]];
        k++;
    }
    // Don't need probabilities anymore
    probabilities = null;
    // Create final list of intervals
    ArrayList<double[]> intervals = new ArrayList<double[]>();
    // The current interval
    double[] interval = null;
    // Calculate actual intervals
    boolean haveStartedInterval = false;
    for (int i = 0; i < m_NumIntervals; i++) {
        // Should the current bin be used?
        if (toUse[i]) {
            // Do we need to create a new interval?
            if (haveStartedInterval == false) {
                haveStartedInterval = true;
                interval = new double[2];
                interval[0] = min + i * delta;
            }
            // Regardless, we should update the upper boundary
            interval[1] = min + (i + 1) * delta;
        } else {
            // if necessary.
            if (haveStartedInterval) {
                haveStartedInterval = false;
                intervals.add(interval);
            }
        }
    }
    // Add last interval if there is one
    if (haveStartedInterval) {
        intervals.add(interval);
    }
    return intervals.toArray(new double[0][0]);
}
