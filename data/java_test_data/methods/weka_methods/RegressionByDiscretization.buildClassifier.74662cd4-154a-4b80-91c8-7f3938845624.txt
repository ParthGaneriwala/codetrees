public void buildClassifier(Instances instances) throws Exception {
    // can classifier handle the data?
    getCapabilities().testWithFail(instances);
    // remove instances with missing class
    instances = new Instances(instances);
    instances.deleteWithMissingClass();
    // Discretize the training data
    m_Discretizer.setIgnoreClass(true);
    m_Discretizer.setAttributeIndices("" + (instances.classIndex() + 1));
    m_Discretizer.setBins(getNumBins());
    m_Discretizer.setUseEqualFrequency(getUseEqualFrequency());
    m_Discretizer.setInputFormat(instances);
    Instances newTrain = Filter.useFilter(instances, m_Discretizer);
    // Should empty bins be deleted?
    m_OldIndexToNewIndex = null;
    if (m_DeleteEmptyBins) {
        // Figure out which classes are empty after discretization
        int numNonEmptyClasses = 0;
        boolean[] notEmptyClass = new boolean[newTrain.numClasses()];
        for (int i = 0; i < newTrain.numInstances(); i++) {
            if (!notEmptyClass[(int) newTrain.instance(i).classValue()]) {
                numNonEmptyClasses++;
                notEmptyClass[(int) newTrain.instance(i).classValue()] = true;
            }
        }
        // Compute new list of non-empty classes and mapping of indices
        ArrayList<String> newClassVals = new ArrayList<String>(numNonEmptyClasses);
        m_OldIndexToNewIndex = new int[newTrain.numClasses()];
        for (int i = 0; i < newTrain.numClasses(); i++) {
            if (notEmptyClass[i]) {
                m_OldIndexToNewIndex[i] = newClassVals.size();
                newClassVals.add(newTrain.classAttribute().value(i));
            }
        }
        // Compute new header information
        Attribute newClass = new Attribute(newTrain.classAttribute().name(), newClassVals);
        ArrayList<Attribute> newAttributes = new ArrayList<Attribute>(newTrain.numAttributes());
        for (int i = 0; i < newTrain.numAttributes(); i++) {
            if (i != newTrain.classIndex()) {
                newAttributes.add((Attribute) newTrain.attribute(i).copy());
            } else {
                newAttributes.add(newClass);
            }
        }
        // Create new header and modify instances
        Instances newTrainTransformed = new Instances(newTrain.relationName(), newAttributes, newTrain.numInstances());
        newTrainTransformed.setClassIndex(newTrain.classIndex());
        for (int i = 0; i < newTrain.numInstances(); i++) {
            Instance inst = newTrain.instance(i);
            newTrainTransformed.add(inst);
            newTrainTransformed.lastInstance().setClassValue(m_OldIndexToNewIndex[(int) inst.classValue()]);
        }
        newTrain = newTrainTransformed;
    }
    // Store target values, in case a prediction interval or computation of median is required
    m_OriginalTargetValues = new double[instances.numInstances()];
    m_NewTargetValues = new int[instances.numInstances()];
    for (int i = 0; i < m_OriginalTargetValues.length; i++) {
        m_OriginalTargetValues[i] = instances.instance(i).classValue();
        m_NewTargetValues[i] = (int) newTrain.instance(i).classValue();
    }
    m_DiscretizedHeader = new Instances(newTrain, 0);
    int numClasses = newTrain.numClasses();
    // Calculate the mean value for each bin of the new class attribute
    m_ClassMeans = new double[numClasses];
    m_ClassCounts = new int[numClasses];
    for (int i = 0; i < instances.numInstances(); i++) {
        Instance inst = newTrain.instance(i);
        if (!inst.classIsMissing()) {
            int classVal = (int) inst.classValue();
            m_ClassCounts[classVal]++;
            m_ClassMeans[classVal] += instances.instance(i).classValue();
        }
    }
    for (int i = 0; i < numClasses; i++) {
        if (m_ClassCounts[i] > 0) {
            m_ClassMeans[i] /= m_ClassCounts[i];
        }
    }
    if (m_Debug) {
        System.out.println("Bin Means");
        System.out.println("==========");
        for (int i = 0; i < m_ClassMeans.length; i++) {
            System.out.println(m_ClassMeans[i]);
        }
        System.out.println();
    }
    // Train the sub-classifier
    m_Classifier.buildClassifier(newTrain);
}
