@Override
public Void doInBackground() {
    Map<String, String> localPackageNameList = WekaPackageManager.getPackageList(true);
    if (localPackageNameList == null) {
        // quietly return and see if we can continue anyway
        return null;
    }
    Map<String, String> repositoryPackageNameList = WekaPackageManager.getPackageList(false);
    if (repositoryPackageNameList == null) {
        // quietly return and see if we can continue anyway
        return null;
    }
    if (repositoryPackageNameList.keySet().size() < localPackageNameList.keySet().size()) {
        // package(s) have disappeared from the repository.
        // Force a cache refresh...
        RefreshCache r = new RefreshCache(true);
        r.execute();
        return null;
    }
    StringBuffer newPackagesBuff = new StringBuffer();
    StringBuffer updatedPackagesBuff = new StringBuffer();
    for (String s : repositoryPackageNameList.keySet()) {
        if (!localPackageNameList.containsKey(s)) {
            newPackagesBuff.append(s + "<br>");
        }
    }
    for (String localPackage : localPackageNameList.keySet()) {
        String localVersion = localPackageNameList.get(localPackage);
        String repoVersion = repositoryPackageNameList.get(localPackage);
        if (repoVersion == null) {
            continue;
        }
        // a difference here indicates a newer version on the server
        if (!localVersion.equals(repoVersion)) {
            updatedPackagesBuff.append(localPackage + " (" + repoVersion + ")<br>");
        }
    }
    if (newPackagesBuff.length() > 0 || updatedPackagesBuff.length() > 0) {
        String information = "<html><font size=-2>New and/or updated packages: ";
        if (newPackagesBuff.length() > 0) {
            information += "<br><br><b>New:</b><br>" + newPackagesBuff.toString();
        }
        if (updatedPackagesBuff.length() > 0) {
            information += "<br><br><b>Updated:</b><br>" + updatedPackagesBuff.toString() + "<br><br>";
        }
        information += "</font></html>";
        m_newPackagesAvailableL.setToolTipText(information);
        m_browserTools.add(m_newPackagesAvailableL);
        // force a cache refresh (to match command line package manager client
        // behaviour)
        RefreshCache r = new RefreshCache(false);
        r.execute();
        m_browserTools.revalidate();
    }
    return null;
}
