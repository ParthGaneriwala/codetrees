@SuppressWarnings("unchecked")
private void loadUserComponents() {
    Vector<Vector<Object>> tempV = null;
    // String ext = "";
    /*
     * if (m_UserComponentsInXML) ext = USERCOMPONENTS_XML_EXTENSION;
     */
    File sFile = new File(weka.core.WekaPackageManager.WEKA_HOME.getPath() + File.separator + "knowledgeFlow" + File.separator + "userComponents");
    /*
     * new File(System.getProperty("user.home") +File.separator +
     * ".knowledgeFlow" +File.separator + "userComponents" +ext);
     */
    if (sFile.exists()) {
        try {
            /*
         * if (m_UserComponentsInXML) { XMLBeans xml = new
         * XMLBeans(m_beanLayout, m_bcSupport, XMLBeans.DATATYPE_USERCOMPONENTS,
         * 0); tempV = (Vector) xml.read(sFile); } else {
         */
            InputStream is = new FileInputStream(sFile);
            ObjectInputStream ois = new ObjectInputStream(is);
            tempV = (Vector<Vector<Object>>) ois.readObject();
            ois.close();
        // }
        } catch (Exception ex) {
            weka.core.logging.Logger.log(weka.core.logging.Logger.Level.WARNING, "[KnowledgeFlow] Problem reading user components.");
            ex.printStackTrace();
            return;
        }
        if (tempV.size() > 0) {
            DefaultTreeModel model = (DefaultTreeModel) m_componentTree.getModel();
            DefaultMutableTreeNode root = (DefaultMutableTreeNode) model.getRoot();
            if (m_userCompNode == null) {
                m_userCompNode = new InvisibleNode("User");
                model.insertNodeInto(m_userCompNode, root, 0);
            }
            // add the components
            for (int i = 0; i < tempV.size(); i++) {
                Vector<Object> tempB = tempV.elementAt(i);
                String displayName = (String) tempB.get(0);
                tempB.get(1);
                ImageIcon scaledIcon = (ImageIcon) tempB.get(2);
                JTreeLeafDetails treeLeaf = new JTreeLeafDetails(displayName, tempB, scaledIcon);
                DefaultMutableTreeNode newUserComp = new InvisibleNode(treeLeaf);
                model.insertNodeInto(newUserComp, m_userCompNode, 0);
                // add to the list of user components
                m_userComponents.add(tempB);
            // addToUserToolBar(tempB, false);
            // addToUserTreeNode(tempB, false);
            }
        }
    }
}
