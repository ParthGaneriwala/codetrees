protected void popupStepEditorDialog(StepVisual step) {
    String custEditor = step.getStepManager().getManagedStep().getCustomEditorForStep();
    StepEditorDialog toPopup = null;
    if (custEditor != null && custEditor.length() > 0) {
        try {
            Object custPanel = WekaPackageClassLoaderManager.objectForName(custEditor);
            if (!(custPanel instanceof StepEditorDialog)) {
                throw new WekaException("Custom editor must be a subclass of StepEditorDialog");
            }
            toPopup = ((StepEditorDialog) custPanel);
        } catch (Exception ex) {
            m_visLayout.getMainPerspective().showErrorDialog(ex);
            ex.printStackTrace();
        }
    } else {
        // create an editor based on the GenericObjectEditor
        toPopup = new GOEStepEditorDialog();
        toPopup.setMainPerspective(m_visLayout.getMainPerspective());
    }
    final JDialog d = new JDialog((java.awt.Frame) getTopLevelAncestor(), ModalityType.DOCUMENT_MODAL);
    d.setLayout(new BorderLayout());
    d.getContentPane().add(toPopup, BorderLayout.CENTER);
    final StepEditorDialog toPopupC = toPopup;
    d.addWindowListener(new java.awt.event.WindowAdapter() {

        @Override
        public void windowClosing(java.awt.event.WindowEvent e) {
            d.dispose();
        }
    });
    toPopup.setParentWindow(d);
    toPopup.setEnvironment(m_visLayout.getEnvironment());
    toPopup.setMainPerspective(m_visLayout.getMainPerspective());
    toPopup.setStepToEdit(step.getStepManager().getManagedStep());
    toPopup.setClosingListener(new StepEditorDialog.ClosingListener() {

        @Override
        public void closing() {
            if (toPopupC.isEdited()) {
                m_visLayout.setEdited(true);
            }
        }
    });
    d.pack();
    d.setLocationRelativeTo(m_visLayout.getMainPerspective());
    d.setVisible(true);
}
