protected void setUp() throws Exception {
    m_Associator = getAssociator();
    m_Tester = getTester();
    m_OptionTester = getOptionTester();
    m_GOETester = getGOETester();
    m_weightedInstancesHandler = m_Tester.weightedInstancesHandler()[0];
    m_multiInstanceHandler = m_Tester.multiInstanceHandler()[0];
    // LAST_CLASSTYPE+1 = no class attribute
    m_NominalPredictors = new boolean[LAST_CLASSTYPE + 2];
    m_NumericPredictors = new boolean[LAST_CLASSTYPE + 2];
    m_StringPredictors = new boolean[LAST_CLASSTYPE + 2];
    m_DatePredictors = new boolean[LAST_CLASSTYPE + 2];
    m_RelationalPredictors = new boolean[LAST_CLASSTYPE + 2];
    m_handleMissingPredictors = new boolean[LAST_CLASSTYPE + 2];
    m_handleMissingClass = new boolean[LAST_CLASSTYPE + 2];
    m_RegressionResults = new String[LAST_CLASSTYPE + 2];
    m_NClasses = 4;
    // initialize attributes
    checkAttributes(true, false, false, false, false, false);
    checkAttributes(false, true, false, false, false, false);
    checkAttributes(false, false, true, false, false, false);
    checkAttributes(false, false, false, true, false, false);
    checkAttributes(false, false, false, false, true, false);
    // initialize missing values handling
    for (int i = FIRST_CLASSTYPE; i <= LAST_CLASSTYPE + 1; i++) {
        // does the scheme support this type of class at all?
        if (!canPredict(i))
            continue;
        // 20% missing
        m_handleMissingPredictors[i] = checkMissingPredictors(i, 20, false);
        if (i <= LAST_CLASSTYPE)
            m_handleMissingClass[i] = checkMissingClass(i, 20, false);
    }
}
