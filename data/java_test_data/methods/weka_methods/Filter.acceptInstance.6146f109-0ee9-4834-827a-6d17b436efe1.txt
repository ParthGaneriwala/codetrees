@Override
public void acceptInstance(InstanceEvent e) {
    // to do!
    if (m_filterThread != null) {
        String messg = "[Filter] " + statusMessagePrefix() + " is currently batch processing!";
        if (m_log != null) {
            m_log.logMessage(messg);
            m_log.statusMessage(statusMessagePrefix() + "WARNING: Filter is currently batch processing.");
        } else {
            System.err.println(messg);
        }
        return;
    }
    if (!(m_Filter instanceof StreamableFilter)) {
        // stop all processing
        stop();
        if (m_log != null) {
            m_log.logMessage("[Filter] " + statusMessagePrefix() + " ERROR : " + m_Filter.getClass().getName() + "can't process streamed instances; can't continue");
            m_log.statusMessage(statusMessagePrefix() + "ERROR: Can't process streamed instances; can't continue.");
        }
        return;
    }
    if (e.getStatus() == InstanceEvent.FORMAT_AVAILABLE) {
        try {
            m_instanceCount = 0;
            // notifyInstanceListeners(e);
            // Instances dataset = e.getInstance().dataset();
            Instances dataset = e.getStructure();
            if (m_Filter instanceof SupervisedFilter) {
                // defualt to last column if no class is set
                if (dataset.classIndex() < 0) {
                    dataset.setClassIndex(dataset.numAttributes() - 1);
                }
            }
            // initialize filter
            m_Filter.setInputFormat(dataset);
            // attempt to determine post-filtering
            // structure. If successful this can be passed on to instance
            // listeners as a new FORMAT_AVAILABLE event.
            m_structurePassedOn = false;
            try {
                if (m_Filter.isOutputFormatDefined()) {
                    // System.err.println("Filter - passing on output format...");
                    // System.err.println(m_Filter.getOutputFormat());
                    m_ie.setStructure(new Instances(m_Filter.getOutputFormat(), 0));
                    m_ie.m_formatNotificationOnly = e.m_formatNotificationOnly;
                    notifyInstanceListeners(m_ie);
                    m_structurePassedOn = true;
                }
            } catch (Exception ex) {
                // stop all processing
                stop();
                if (m_log != null) {
                    m_log.logMessage("[Filter] " + statusMessagePrefix() + " Error in obtaining post-filter structure. " + ex.getMessage());
                    m_log.statusMessage(statusMessagePrefix() + "ERROR (See log for details).");
                } else {
                    System.err.println("[Filter] " + statusMessagePrefix() + " Error in obtaining post-filter structure");
                }
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return;
    }
    if (e.getStatus() == InstanceEvent.BATCH_FINISHED || e.getInstance() == null) {
        // get the last instance (if available)
        try {
            if (m_log != null) {
                m_log.statusMessage(statusMessagePrefix() + "Stream finished.");
            }
            if (e.getInstance() != null) {
                if (m_Filter.input(e.getInstance())) {
                    Instance filteredInstance = m_Filter.output();
                    if (filteredInstance != null) {
                        if (!m_structurePassedOn) {
                            // pass on the new structure first
                            m_ie.setStructure(new Instances(filteredInstance.dataset(), 0));
                            notifyInstanceListeners(m_ie);
                            m_structurePassedOn = true;
                        }
                        m_ie.setInstance(filteredInstance);
                        // System.err.println("Filter - in batch finisehd...");
                        if (m_Filter.batchFinished() && m_Filter.numPendingOutput() > 0) {
                            m_ie.setStatus(InstanceEvent.INSTANCE_AVAILABLE);
                        } else {
                            m_ie.setStatus(e.getStatus());
                        }
                        notifyInstanceListeners(m_ie);
                    }
                }
            }
            if (m_log != null) {
                m_log.statusMessage(statusMessagePrefix() + "Finished.");
            }
        } catch (Exception ex) {
            // stop all processing
            stop();
            if (m_log != null) {
                m_log.logMessage("[Filter] " + statusMessagePrefix() + ex.getMessage());
                m_log.statusMessage(statusMessagePrefix() + "ERROR (See log for details).");
            }
            ex.printStackTrace();
        }
        // check for any pending instances that we might need to pass on
        try {
            if (m_Filter.batchFinished() && m_Filter.numPendingOutput() > 0) {
                if (m_log != null) {
                    m_log.statusMessage(statusMessagePrefix() + "Passing on pending instances...");
                }
                Instance filteredInstance = m_Filter.output();
                if (filteredInstance != null) {
                    if (!m_structurePassedOn) {
                        // pass on the new structure first
                        m_ie.setStructure((Instances) (new SerializedObject(filteredInstance.dataset()).getObject()));
                        notifyInstanceListeners(m_ie);
                        m_structurePassedOn = true;
                    }
                    m_ie.setInstance(filteredInstance);
                    // TODO here is the problem I think
                    m_ie.setStatus(InstanceEvent.INSTANCE_AVAILABLE);
                    notifyInstanceListeners(m_ie);
                }
                while (m_Filter.numPendingOutput() > 0) {
                    filteredInstance = m_Filter.output();
                    if (filteredInstance.dataset().checkForStringAttributes()) {
                        for (int i = 0; i < filteredInstance.dataset().numAttributes(); i++) {
                            if (filteredInstance.dataset().attribute(i).isString() && !filteredInstance.isMissing(i)) {
                                String val = filteredInstance.stringValue(i);
                                m_ie.getStructure().attribute(i).setStringValue(val);
                                filteredInstance.setValue(i, 0);
                            }
                        }
                    }
                    filteredInstance.setDataset(m_ie.getStructure());
                    m_ie.setInstance(filteredInstance);
                    // System.err.println("Filter - sending pending...");
                    if (m_Filter.numPendingOutput() == 0) {
                        m_ie.setStatus(InstanceEvent.BATCH_FINISHED);
                    } else {
                        m_ie.setStatus(InstanceEvent.INSTANCE_AVAILABLE);
                    }
                    notifyInstanceListeners(m_ie);
                }
                if (m_log != null) {
                    m_log.statusMessage(statusMessagePrefix() + "Finished.");
                }
            }
        } catch (Exception ex) {
            // stop all processing
            stop();
            if (m_log != null) {
                m_log.logMessage("[Filter] " + statusMessagePrefix() + ex.toString());
                m_log.statusMessage(statusMessagePrefix() + "ERROR (See log for details.");
            }
            ex.printStackTrace();
        }
    } else {
        // pass instance through the filter
        try {
            if (!m_Filter.input(e.getInstance())) {
                // once the batch is finished.
                return;
            }
            // collect output instance.
            Instance filteredInstance = m_Filter.output();
            if (filteredInstance == null) {
                return;
            }
            m_instanceCount++;
            if (!m_structurePassedOn) {
                // pass on the new structure first
                m_ie.setStructure(new Instances(filteredInstance.dataset(), 0));
                notifyInstanceListeners(m_ie);
                m_structurePassedOn = true;
            }
            filteredInstance.setDataset(m_ie.getStructure());
            if (filteredInstance.dataset().checkForStringAttributes()) {
                for (int i = 0; i < filteredInstance.dataset().numAttributes(); i++) {
                    if (filteredInstance.dataset().attribute(i).isString() && !filteredInstance.isMissing(i)) {
                        String val = filteredInstance.stringValue(i);
                        filteredInstance.dataset().attribute(i).setStringValue(val);
                        filteredInstance.setValue(i, 0);
                    }
                }
            }
            m_ie.setInstance(filteredInstance);
            m_ie.setStatus(e.getStatus());
            if (m_log != null && (m_instanceCount % 10000 == 0)) {
                m_log.statusMessage(statusMessagePrefix() + "Received " + m_instanceCount + " instances.");
            }
            notifyInstanceListeners(m_ie);
        } catch (Exception ex) {
            // stop all processing
            stop();
            if (m_log != null) {
                m_log.logMessage("[Filter] " + statusMessagePrefix() + ex.toString());
                m_log.statusMessage(statusMessagePrefix() + "ERROR (See log for details).");
            }
            ex.printStackTrace();
        }
    }
}
