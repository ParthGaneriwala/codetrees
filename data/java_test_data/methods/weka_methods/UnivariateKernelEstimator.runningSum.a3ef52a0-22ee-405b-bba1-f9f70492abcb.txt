protected void runningSum(Set<Map.Entry<Double, Double>> c, double value, double[] sums) {
    // Auxiliary variables
    double offset = CONST - Math.log(m_Width);
    double logFactor = Math.log(m_Threshold) - Math.log(1 - m_Threshold);
    double logSumOfWeights = Math.log(m_SumOfWeights);
    // Iterate through values
    Iterator<Map.Entry<Double, Double>> itr = c.iterator();
    while (itr.hasNext()) {
        Map.Entry<Double, Double> entry = itr.next();
        // Skip entry if weight is zero because it cannot contribute to sum
        if (entry.getValue() > 0) {
            double diff = (entry.getKey() - value) / m_Width;
            double logDensity = offset - 0.5 * diff * diff;
            double logWeight = Math.log(entry.getValue());
            sums[0] = logOfSum(sums[0], logWeight + logDensity);
            sums[1] = logOfSum(sums[1], logWeight);
            // Can we stop assuming worst case?
            if (logDensity + logSumOfWeights < logOfSum(logFactor + sums[0], logDensity + sums[1])) {
                break;
            }
        }
    }
}
