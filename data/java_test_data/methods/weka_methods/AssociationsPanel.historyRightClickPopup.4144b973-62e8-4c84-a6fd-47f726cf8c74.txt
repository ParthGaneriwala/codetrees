@SuppressWarnings("unchecked")
protected void historyRightClickPopup(List<String> names, int x, int y) {
    final List<String> selectedNames = names;
    JPopupMenu resultListMenu = new JPopupMenu();
    JMenuItem visMainBuffer = new JMenuItem("View in main window");
    if (selectedNames != null && selectedNames.size() == 1) {
        visMainBuffer.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                m_History.setSingle(selectedNames.get(0));
            }
        });
    } else {
        visMainBuffer.setEnabled(false);
    }
    resultListMenu.add(visMainBuffer);
    JMenuItem visSepBuffer = new JMenuItem("View in separate window");
    if (selectedNames != null && selectedNames.size() == 1) {
        visSepBuffer.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                m_History.openFrame(selectedNames.get(0));
            }
        });
    } else {
        visSepBuffer.setEnabled(false);
    }
    resultListMenu.add(visSepBuffer);
    JMenuItem saveOutput = new JMenuItem("Save result buffer");
    if (selectedNames != null && selectedNames.size() == 1) {
        saveOutput.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                saveBuffer(selectedNames.get(0));
            }
        });
    } else {
        saveOutput.setEnabled(false);
    }
    resultListMenu.add(saveOutput);
    JMenuItem deleteOutput = new JMenuItem("Delete result buffer(s)");
    if (selectedNames != null) {
        deleteOutput.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                m_History.removeResults(selectedNames);
            }
        });
    } else {
        deleteOutput.setEnabled(false);
    }
    resultListMenu.add(deleteOutput);
    Vector<Object> visVect = null;
    if (selectedNames != null && selectedNames.size() == 1) {
        visVect = (Vector<Object>) m_History.getNamedObject(selectedNames.get(0));
    }
    // check for the associator itself
    if (visVect != null) {
        // should be the first element
        Associator temp_model = null;
        if (visVect.get(0) instanceof Associator) {
            temp_model = (Associator) visVect.get(0);
        }
        final Associator model = temp_model;
        JMenuItem reApplyConfig = new JMenuItem("Re-apply this model's configuration");
        if (model != null) {
            reApplyConfig.addActionListener(new ActionListener() {

                @Override
                public void actionPerformed(ActionEvent e) {
                    m_AssociatorEditor.setValue(model);
                }
            });
        } else {
            reApplyConfig.setEnabled(false);
        }
        resultListMenu.add(reApplyConfig);
    }
    // plugins
    JMenu visPlugins = new JMenu("Plugins");
    boolean availablePlugins = false;
    // tree plugins
    if (visVect != null) {
        for (Object o : visVect) {
            if (o instanceof AssociationRules) {
                List<String> pluginsVector = PluginManager.getPluginNamesOfTypeList(AssociationRuleVisualizePlugin.class.getName());
                for (int i = 0; i < pluginsVector.size(); i++) {
                    String className = (pluginsVector.get(i));
                    try {
                        AssociationRuleVisualizePlugin plugin = (AssociationRuleVisualizePlugin) WekaPackageClassLoaderManager.objectForName(className);
                        // Class.forName(className).newInstance();
                        if (plugin == null) {
                            continue;
                        }
                        availablePlugins = true;
                        JMenuItem pluginMenuItem = plugin.getVisualizeMenuItem((AssociationRules) o, selectedNames.get(0));
                        if (pluginMenuItem != null) {
                            visPlugins.add(pluginMenuItem);
                        }
                    } catch (Exception ex) {
                    // ex.printStackTrace();
                    }
                }
            } else if (o instanceof String) {
                List<String> pluginsVector = PluginManager.getPluginNamesOfTypeList(TreeVisualizePlugin.class.getName());
                for (int i = 0; i < pluginsVector.size(); i++) {
                    String className = (pluginsVector.get(i));
                    try {
                        TreeVisualizePlugin plugin = (TreeVisualizePlugin) WekaPackageClassLoaderManager.objectForName(className);
                        // Class.forName(className).newInstance();
                        if (plugin == null) {
                            continue;
                        }
                        availablePlugins = true;
                        JMenuItem pluginMenuItem = plugin.getVisualizeMenuItem((String) o, selectedNames.get(0));
                        // Version version = new Version();
                        if (pluginMenuItem != null) {
                            /*
                 * if (version.compareTo(plugin.getMinVersion()) < 0)
                 * pluginMenuItem.setText(pluginMenuItem.getText() +
                 * " (weka outdated)"); if
                 * (version.compareTo(plugin.getMaxVersion()) >= 0)
                 * pluginMenuItem.setText(pluginMenuItem.getText() +
                 * " (plugin outdated)");
                 */
                            visPlugins.add(pluginMenuItem);
                        }
                    } catch (Exception e) {
                    // e.printStackTrace();
                    }
                }
            }
        }
    }
    if (availablePlugins) {
        resultListMenu.add(visPlugins);
    }
    resultListMenu.show(m_History.getList(), x, y);
}
