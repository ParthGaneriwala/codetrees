public void testNominal() {
    ((RemoveWithValues) m_Filter).setAttributeIndex("2");
    Instances result = useFilter();
    assertEquals(m_Instances.numAttributes(), result.numAttributes());
    assertEquals("Default nominal selection matches all values", m_Instances.numInstances(), result.numInstances());
    try {
        ((RemoveWithValues) m_Filter).setNominalIndices("1-2");
    } catch (Exception ex) {
        fail("Shouldn't ever get here unless Range chamges incompatibly");
    }
    result = useFilter();
    assertEquals(m_Instances.numAttributes(), result.numAttributes());
    assertTrue(m_Instances.numInstances() > result.numInstances());
    try {
        ((RemoveWithValues) m_Filter).setNominalIndices("3-last");
    } catch (Exception ex) {
        fail("Shouldn't ever get here unless Range chamges incompatibly");
    }
    Instances result2 = useFilter();
    assertEquals(m_Instances.numAttributes(), result2.numAttributes());
    assertTrue(m_Instances.numInstances() > result2.numInstances());
    assertEquals(m_Instances.numInstances(), result.numInstances() + result2.numInstances());
    ((RemoveWithValues) m_Filter).setInvertSelection(false);
    result = useFilter();
    assertEquals(m_Instances.numAttributes(), result.numAttributes());
    assertEquals(m_Instances.numInstances(), result.numInstances() + result2.numInstances());
}
