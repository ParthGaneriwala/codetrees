@Override
public void setOptions(String[] options) throws Exception {
    String value = Utils.getOption('R', options);
    if (value.length() != 0) {
        setSelectedRange(value);
    } else {
        setSelectedRange("first-last");
    }
    setInvertSelection(Utils.getFlag('V', options));
    value = Utils.getOption('P', options);
    if (value.length() != 0) {
        setAttributeNamePrefix(value);
    } else {
        setAttributeNamePrefix("");
    }
    value = Utils.getOption('W', options);
    if (value.length() != 0) {
        setWordsToKeep(Integer.valueOf(value).intValue());
    } else {
        setWordsToKeep(1000);
    }
    value = Utils.getOption("prune-rate", options);
    if (value.length() > 0) {
        setPeriodicPruning(Double.parseDouble(value));
    } else {
        setPeriodicPruning(-1);
    }
    value = Utils.getOption('M', options);
    if (value.length() != 0) {
        setMinTermFreq(Integer.valueOf(value).intValue());
    } else {
        setMinTermFreq(1);
    }
    setOutputWordCounts(Utils.getFlag('C', options));
    setTFTransform(Utils.getFlag('T', options));
    setIDFTransform(Utils.getFlag('I', options));
    setDoNotOperateOnPerClassBasis(Utils.getFlag('O', options));
    String nString = Utils.getOption('N', options);
    if (nString.length() != 0) {
        setNormalizeDocLength(new SelectedTag(Integer.parseInt(nString), TAGS_FILTER));
    } else {
        setNormalizeDocLength(new SelectedTag(FILTER_NONE, TAGS_FILTER));
    }
    setLowerCaseTokens(Utils.getFlag('L', options));
    String stemmerString = Utils.getOption("stemmer", options);
    if (stemmerString.length() == 0) {
        setStemmer(null);
    } else {
        String[] stemmerSpec = Utils.splitOptions(stemmerString);
        if (stemmerSpec.length == 0) {
            throw new Exception("Invalid stemmer specification string");
        }
        String stemmerName = stemmerSpec[0];
        stemmerSpec[0] = "";
        Stemmer stemmer = (Stemmer) Utils.forName(Class.forName("weka.core.stemmers.Stemmer"), stemmerName, stemmerSpec);
        setStemmer(stemmer);
    }
    String stopwordsHandlerString = Utils.getOption("stopwords-handler", options);
    if (stopwordsHandlerString.length() == 0) {
        setStopwordsHandler(null);
    } else {
        String[] stopwordsHandlerSpec = Utils.splitOptions(stopwordsHandlerString);
        if (stopwordsHandlerSpec.length == 0) {
            throw new Exception("Invalid StopwordsHandler specification string");
        }
        String stopwordsHandlerName = stopwordsHandlerSpec[0];
        stopwordsHandlerSpec[0] = "";
        StopwordsHandler stopwordsHandler = (StopwordsHandler) Utils.forName(Class.forName("weka.core.stopwords.StopwordsHandler"), stopwordsHandlerName, stopwordsHandlerSpec);
        setStopwordsHandler(stopwordsHandler);
    }
    String tokenizerString = Utils.getOption("tokenizer", options);
    if (tokenizerString.length() == 0) {
        setTokenizer(new WordTokenizer());
    } else {
        String[] tokenizerSpec = Utils.splitOptions(tokenizerString);
        if (tokenizerSpec.length == 0) {
            throw new Exception("Invalid tokenizer specification string");
        }
        String tokenizerName = tokenizerSpec[0];
        tokenizerSpec[0] = "";
        Tokenizer tokenizer = (Tokenizer) Utils.forName(Class.forName("weka.core.tokenizers.Tokenizer"), tokenizerName, tokenizerSpec);
        setTokenizer(tokenizer);
    }
    String dictFile = Utils.getOption("dictionary", options);
    setDictionaryFileToSaveTo(new File(dictFile));
    setSaveDictionaryInBinaryForm(Utils.getFlag("binary-dict", options));
    Utils.checkForRemainingOptions(options);
}
