@Override
public void actionPerformed(ActionEvent e) {
    m_SetCostsBut.setEnabled(false);
    if (m_SetCostsFrame == null) {
        if (PropertyDialog.getParentDialog(m_SetCostsBut) != null) {
            m_SetCostsFrame = new PropertyDialog(PropertyDialog.getParentDialog(m_SetCostsBut), m_CostMatrixEditor, -1, -1);
        } else {
            m_SetCostsFrame = new PropertyDialog(PropertyDialog.getParentFrame(m_SetCostsBut), m_CostMatrixEditor, -1, -1);
        }
        m_SetCostsFrame.setTitle("Cost Matrix Editor");
        // pd.setSize(250,150);
        m_SetCostsFrame.addWindowListener(new java.awt.event.WindowAdapter() {

            @Override
            public void windowClosing(java.awt.event.WindowEvent p) {
                m_SetCostsBut.setEnabled(m_EvalWRTCostsBut.isSelected());
                if ((m_SetCostsFrame != null) && (!m_EvalWRTCostsBut.isSelected())) {
                    m_SetCostsFrame.setVisible(false);
                }
            }
        });
    }
    // do we need to change the size of the matrix?
    int classIndex = m_ClassCombo.getSelectedIndex();
    int numClasses = m_Instances.attribute(classIndex).numValues();
    if (numClasses != ((CostMatrix) m_CostMatrixEditor.getValue()).numColumns()) {
        m_CostMatrixEditor.setValue(new CostMatrix(numClasses));
    }
    if (PropertyDialog.getParentDialog(m_SetCostsBut) != null) {
        m_SetCostsFrame.setLocationRelativeTo(PropertyDialog.getParentDialog(m_SetCostsBut));
    } else {
        m_SetCostsFrame.setLocationRelativeTo(PropertyDialog.getParentFrame(m_SetCostsBut));
    }
    m_SetCostsFrame.setVisible(true);
}
