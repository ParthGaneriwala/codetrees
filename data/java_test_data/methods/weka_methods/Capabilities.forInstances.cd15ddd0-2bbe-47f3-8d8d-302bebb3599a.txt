public static Capabilities forInstances(Instances data, boolean multi) throws Exception {
    Capabilities result;
    Capabilities multiInstance;
    int i;
    int n;
    int m;
    Instance inst;
    boolean missing;
    result = new Capabilities(null);
    result.m_InterfaceDefinedCapabilities = new HashSet<Class>();
    // class
    if (data.classIndex() == -1) {
        result.enable(Capability.NO_CLASS);
    } else {
        switch(data.classAttribute().type()) {
            case Attribute.NOMINAL:
                if (data.classAttribute().numValues() == 1) {
                    result.enable(Capability.UNARY_CLASS);
                } else if (data.classAttribute().numValues() == 2) {
                    result.enable(Capability.BINARY_CLASS);
                } else {
                    result.enable(Capability.NOMINAL_CLASS);
                }
                break;
            case Attribute.NUMERIC:
                result.enable(Capability.NUMERIC_CLASS);
                break;
            case Attribute.STRING:
                result.enable(Capability.STRING_CLASS);
                break;
            case Attribute.DATE:
                result.enable(Capability.DATE_CLASS);
                break;
            case Attribute.RELATIONAL:
                result.enable(Capability.RELATIONAL_CLASS);
                break;
            default:
                throw new UnsupportedAttributeTypeException("Unknown class attribute type '" + data.classAttribute() + "'!");
        }
        // missing class values
        for (i = 0; i < data.numInstances(); i++) {
            if (data.instance(i).classIsMissing()) {
                result.enable(Capability.MISSING_CLASS_VALUES);
                break;
            }
        }
    }
    // attributes
    Class weightedAttributesHandler = getClass("weka.core.WeightedAttributesHandler");
    for (i = 0; i < data.numAttributes(); i++) {
        // skip class
        if (i == data.classIndex()) {
            continue;
        }
        if (data.attribute(i).weight() != 1.0) {
            result.m_InterfaceDefinedCapabilities.add(weightedAttributesHandler);
        }
        switch(data.attribute(i).type()) {
            case Attribute.NOMINAL:
                result.enable(Capability.UNARY_ATTRIBUTES);
                if (data.attribute(i).numValues() == 2) {
                    result.enable(Capability.BINARY_ATTRIBUTES);
                } else if (data.attribute(i).numValues() > 2) {
                    result.enable(Capability.NOMINAL_ATTRIBUTES);
                }
                break;
            case Attribute.NUMERIC:
                result.enable(Capability.NUMERIC_ATTRIBUTES);
                break;
            case Attribute.DATE:
                result.enable(Capability.DATE_ATTRIBUTES);
                break;
            case Attribute.STRING:
                result.enable(Capability.STRING_ATTRIBUTES);
                break;
            case Attribute.RELATIONAL:
                result.enable(Capability.RELATIONAL_ATTRIBUTES);
                break;
            default:
                throw new UnsupportedAttributeTypeException("Unknown attribute type '" + data.attribute(i).type() + "'!");
        }
    }
    // missing values and instance weights
    missing = false;
    Class weightedInstancesHandler = getClass("weka.core.WeightedInstancesHandler");
    for (i = 0; i < data.numInstances(); i++) {
        inst = data.instance(i);
        if (inst.weight() != 1.0) {
            result.m_InterfaceDefinedCapabilities.add(weightedInstancesHandler);
        }
        if (inst instanceof SparseInstance) {
            for (m = 0; m < inst.numValues(); m++) {
                n = inst.index(m);
                // skip class
                if (n == inst.classIndex()) {
                    continue;
                }
                if (inst.isMissing(n)) {
                    missing = true;
                    break;
                }
            }
        } else {
            for (n = 0; n < data.numAttributes(); n++) {
                // skip class
                if (n == inst.classIndex()) {
                    continue;
                }
                if (inst.isMissing(n)) {
                    missing = true;
                    break;
                }
            }
        }
        if (missing) {
            result.enable(Capability.MISSING_VALUES);
            break;
        }
    }
    // multi-instance data?
    if (multi) {
        if (// bag-id
        (data.numAttributes() == 3) && (data.attribute(0).isNominal()) && // bag
        (data.attribute(1).isRelationValued()) && (data.classIndex() == data.numAttributes() - 1)) {
            multiInstance = new Capabilities(null);
            multiInstance.or(result.getClassCapabilities());
            multiInstance.enable(Capability.NOMINAL_ATTRIBUTES);
            multiInstance.enable(Capability.RELATIONAL_ATTRIBUTES);
            multiInstance.enable(Capability.ONLY_MULTIINSTANCE);
            result.assign(multiInstance);
        }
    }
    return result;
}
