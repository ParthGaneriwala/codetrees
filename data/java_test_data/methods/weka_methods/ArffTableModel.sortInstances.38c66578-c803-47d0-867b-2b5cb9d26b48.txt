public void sortInstances(int columnIndex, boolean ascending) {
    if (isAttribute(columnIndex) || (m_ShowInstanceWeights && columnIndex == 1)) {
        addUndoPoint();
        double[] vals = new double[m_Data.numInstances()];
        Instance[] backup = new Instance[vals.length];
        for (int i = 0; i < vals.length; i++) {
            Instance inst = m_Data.instance(i);
            backup[i] = inst;
            vals[i] = isAttribute(columnIndex) ? inst.value(getAttributeIndex(columnIndex)) : inst.weight();
        }
        int[] sortOrder = Utils.stableSort(vals);
        for (int i = 0; i < vals.length; i++) {
            m_Data.set(i, backup[sortOrder[i]]);
        }
        if (!ascending) {
            Instances reversedData = new Instances(m_Data, m_Data.numInstances());
            int i = m_Data.numInstances();
            while (i > 0) {
                i--;
                int equalCount = 1;
                if (isAttribute(columnIndex)) {
                    while ((i > 0) && (m_Data.instance(i).value(getAttributeIndex(columnIndex)) == m_Data.instance(i - 1).value(getAttributeIndex(columnIndex)))) {
                        equalCount++;
                        i--;
                    }
                } else {
                    while ((i > 0) && (m_Data.instance(i).weight() == m_Data.instance(i - 1).weight())) {
                        equalCount++;
                        i--;
                    }
                }
                int j = 0;
                while (j < equalCount) {
                    reversedData.add(m_Data.instance(i + j));
                    j++;
                }
            }
            m_Data = reversedData;
        }
        notifyListener(new TableModelEvent(this));
    }
}
