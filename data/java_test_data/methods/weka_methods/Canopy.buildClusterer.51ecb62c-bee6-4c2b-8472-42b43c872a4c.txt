@Override
public void buildClusterer(Instances data) throws Exception {
    m_t1 = m_userT1;
    m_t2 = m_userT2;
    if (data.numInstances() == 0 && m_userT2 < 0) {
        System.err.println("The heuristic for setting T2 based on std. dev. can't be used when " + "running in incremental mode. Using default of 1.0.");
        m_t2 = 1.0;
    }
    m_canopyT2Density = new ArrayList<double[]>();
    m_canopyCenters = new ArrayList<double[][]>();
    m_canopyNumMissingForNumerics = new ArrayList<double[]>();
    if (data.numInstances() > 0) {
        if (!m_dontReplaceMissing) {
            m_missingValuesReplacer = new ReplaceMissingValues();
            m_missingValuesReplacer.setInputFormat(data);
            data = Filter.useFilter(data, m_missingValuesReplacer);
        }
        Random r = new Random(getSeed());
        for (int i = 0; i < 10; i++) {
            r.nextInt();
        }
        data.randomize(r);
        if (m_userT2 < 0) {
            setT2T1BasedOnStdDev(data);
        }
    }
    m_t1 = m_userT1 > 0 ? m_userT1 : -m_userT1 * m_t2;
    // if (m_t1 < m_t2) {
    // throw new Exception("T1 can't be less than T2. Computed T2 as " + m_t2
    // + " T1 is requested to be " + m_t1);
    // }
    m_distanceFunction.setInstances(data);
    m_canopies = new Instances(data, 0);
    if (data.numInstances() > 0) {
        m_trainingData = new Instances(data);
    }
    for (int i = 0; i < data.numInstances(); i++) {
        if (getDebug() && i % m_periodicPruningRate == 0) {
            System.err.println("Processed: " + i);
        }
        updateClusterer(data.instance(i));
    }
    updateFinished();
}
