@Override
public void actionPerformed(ActionEvent e) {
    m_MoreOptions.setEnabled(false);
    JPanel moreOptionsPanel = new JPanel();
    moreOptionsPanel.setBorder(BorderFactory.createEmptyBorder(0, 5, 5, 5));
    moreOptionsPanel.setLayout(new GridLayout(0, 1));
    moreOptionsPanel.add(m_OutputModelBut);
    moreOptionsPanel.add(m_OutputModelsForTrainingSplitsBut);
    moreOptionsPanel.add(m_OutputPerClassBut);
    moreOptionsPanel.add(m_OutputEntropyBut);
    moreOptionsPanel.add(m_OutputConfusionBut);
    moreOptionsPanel.add(m_StorePredictionsBut);
    moreOptionsPanel.add(m_errorPlotPointSizeProportionalToMargin);
    JPanel classOutPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
    classOutPanel.add(new JLabel("Output predictions"));
    classOutPanel.add(m_ClassificationOutputPanel);
    moreOptionsPanel.add(classOutPanel);
    JPanel costMatrixOption = new JPanel(new FlowLayout(FlowLayout.LEFT));
    costMatrixOption.add(m_EvalWRTCostsBut);
    costMatrixOption.add(m_SetCostsBut);
    moreOptionsPanel.add(costMatrixOption);
    JPanel seedPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
    seedPanel.add(m_RandomLab);
    seedPanel.add(m_RandomSeedText);
    moreOptionsPanel.add(seedPanel);
    moreOptionsPanel.add(m_PreserveOrderBut);
    JPanel sourcePanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
    m_OutputSourceCode.setEnabled(m_ClassifierEditor.getValue() instanceof Sourcable);
    m_SourceCodeClass.setEnabled(m_OutputSourceCode.isEnabled() && m_OutputSourceCode.isSelected());
    sourcePanel.add(m_OutputSourceCode);
    sourcePanel.add(m_SourceCodeClass);
    moreOptionsPanel.add(sourcePanel);
    JPanel all = new JPanel();
    all.setLayout(new BorderLayout());
    JButton oK = new JButton("OK");
    JPanel okP = new JPanel();
    okP.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
    okP.setLayout(new GridLayout(1, 1, 5, 5));
    okP.add(oK);
    all.add(moreOptionsPanel, BorderLayout.CENTER);
    all.add(okP, BorderLayout.SOUTH);
    final JDialog jd = new JDialog(PropertyDialog.getParentFrame(ClassifierPanel.this), "Classifier evaluation options");
    jd.getContentPane().setLayout(new BorderLayout());
    jd.getContentPane().add(all, BorderLayout.CENTER);
    jd.addWindowListener(new java.awt.event.WindowAdapter() {

        @Override
        public void windowClosing(java.awt.event.WindowEvent w) {
            jd.dispose();
            m_MoreOptions.setEnabled(true);
        }
    });
    oK.addActionListener(new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent a) {
            m_MoreOptions.setEnabled(true);
            jd.dispose();
        }
    });
    jd.pack();
    // panel height is only available now
    m_ClassificationOutputPanel.setPreferredSize(new Dimension(300, m_ClassificationOutputPanel.getHeight()));
    jd.pack();
    // final List<AbstractEvaluationMetric> pluginMetrics =
    // AbstractEvaluationMetric
    // .getPluginMetrics();
    final JButton editEvalMetrics = new JButton("Evaluation metrics...");
    JPanel evalP = new JPanel();
    evalP.setLayout(new BorderLayout());
    evalP.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
    evalP.add(editEvalMetrics, BorderLayout.CENTER);
    editEvalMetrics.setToolTipText("Enable/disable output of specific evaluation metrics");
    moreOptionsPanel.add(evalP);
    editEvalMetrics.addActionListener(new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent e) {
            EvaluationMetricSelectionDialog esd = new EvaluationMetricSelectionDialog(jd, m_selectedEvalMetrics);
            esd.setLocation(m_MoreOptions.getLocationOnScreen());
            esd.pack();
            esd.setVisible(true);
            m_selectedEvalMetrics = esd.getSelectedEvalMetrics();
        }
    });
    jd.setLocation(m_MoreOptions.getLocationOnScreen());
    jd.setVisible(true);
}
