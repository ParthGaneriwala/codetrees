public OneRRule newNumericRule(Attribute attr, Instances data, int[] missingValueCounts) throws Exception {
    // make a copy before sorting so that ties are treated consistently
    // and aren't affected by sorting performed for any numeric
    // attributes processed before this one
    data = new Instances(data);
    int lastInstance = data.numInstances();
    // missing values get sorted to the end of the instances
    data.sort(attr);
    while (lastInstance > 0 && data.instance(lastInstance - 1).isMissing(attr)) {
        lastInstance--;
        missingValueCounts[(int) data.instance(lastInstance).classValue()]++;
    }
    if (lastInstance == 0) {
        throw new Exception("Only missing values in the training data!");
    }
    // gather class distributions for all values
    double lastValue = 0;
    LinkedList<int[]> distributions = new LinkedList<int[]>();
    LinkedList<Double> values = new LinkedList<Double>();
    int[] distribution = null;
    for (int i = 0; i < lastInstance; i++) {
        // new value?
        if ((i == 0) || (data.instance(i).value(attr) > lastValue)) {
            if (i != 0) {
                values.add((lastValue + data.instance(i).value(attr)) / 2.0);
            }
            lastValue = data.instance(i).value(attr);
            distribution = new int[data.numClasses()];
            distributions.add(distribution);
        }
        distribution[(int) data.instance(i).classValue()]++;
    }
    values.add(Double.MAX_VALUE);
    // create iterator to go through list
    ListIterator<int[]> it = distributions.listIterator();
    ListIterator<Double> itVals = values.listIterator();
    int[] oldDist = null;
    while (it.hasNext()) {
        // grab next trivial bucket and iterate to next value as well
        int[] newDist = it.next();
        itVals.next();
        // should we merge the two buckets?
        if ((oldDist != null) && // classes the same?
        ((Utils.maxIndex(newDist) == Utils.maxIndex(oldDist)) || // bucket not large enough?
        (oldDist[Utils.maxIndex(oldDist)] < m_minBucketSize))) {
            // add counts
            for (int j = 0; j < oldDist.length; j++) {
                newDist[j] += oldDist[j];
            }
            // remove distribution
            // element just visited
            it.previous();
            // previous element we want to remove
            it.previous();
            it.remove();
            // back to element just visited
            it.next();
            // remove value
            // element just visited
            itVals.previous();
            // previous element we want to remove
            itVals.previous();
            itVals.remove();
            // back to element just visited
            itVals.next();
        }
        // make progress
        oldDist = newDist;
    }
    // last scan, merge adjacent intervals with same class and calculate correct
    // classifications
    int numCorrect = 0;
    it = distributions.listIterator();
    itVals = values.listIterator();
    oldDist = null;
    while (it.hasNext()) {
        // grab next trivial bucket and iterate to next value as well
        int[] newDist = it.next();
        itVals.next();
        // number of correct classifications does not change by merging
        numCorrect += newDist[Utils.maxIndex(newDist)];
        // should we merge the two buckets?
        if ((oldDist != null) && // classes the same?
        (Utils.maxIndex(newDist) == Utils.maxIndex(oldDist))) {
            // add counts
            for (int j = 0; j < oldDist.length; j++) {
                newDist[j] += oldDist[j];
            }
            // remove distribution
            // element just visited
            it.previous();
            // previous element we want to remove
            it.previous();
            it.remove();
            // back to element just visited
            it.next();
            // remove value
            // element just visited
            itVals.previous();
            // previous element we want to remove
            itVals.previous();
            itVals.remove();
            // back to element just visited
            itVals.next();
        }
        // make progress
        oldDist = newDist;
    }
    // new rule
    OneRRule r = new OneRRule(data, attr, distributions.size());
    // with cl
    // branches
    r.m_correct = numCorrect;
    it = distributions.listIterator();
    itVals = values.listIterator();
    int v = 0;
    while (it.hasNext()) {
        r.m_classifications[v] = Utils.maxIndex(it.next());
        double splitPoint = itVals.next();
        if (itVals.hasNext()) {
            r.m_breakpoints[v] = splitPoint;
        }
        v++;
    }
    return r;
}
