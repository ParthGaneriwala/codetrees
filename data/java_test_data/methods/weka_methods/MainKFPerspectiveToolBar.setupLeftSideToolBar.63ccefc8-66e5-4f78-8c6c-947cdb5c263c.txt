private void setupLeftSideToolBar() {
    JToolBar fixedTools2 = new JToolBar();
    fixedTools2.setOrientation(JToolBar.HORIZONTAL);
    fixedTools2.setFloatable(false);
    JButton playB = new JButton(new ImageIcon(loadIcon(ICON_PATH + "resultset_next.png").getImage()));
    playB.setBorder(BorderFactory.createEmptyBorder(0, 5, 0, 0));
    playB.setToolTipText("Run this flow (all start points launched in parallel)");
    final Action playParallelAction = new AbstractAction() {

        @Override
        public void actionPerformed(ActionEvent e) {
            if (m_mainPerspective.getCurrentLayout() != null) {
                boolean proceed = true;
                if (m_mainPerspective.isMemoryLow()) {
                    proceed = m_mainPerspective.showMemoryIsLow();
                }
                if (proceed) {
                    try {
                        m_mainPerspective.getCurrentLayout().executeFlow(false);
                    } catch (WekaException e1) {
                        m_mainPerspective.showErrorDialog(e1);
                    }
                }
            }
        }
    };
    playB.addActionListener(new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent e) {
            playParallelAction.actionPerformed(e);
        }
    });
    JButton playBB = new JButton(new ImageIcon(loadIcon(ICON_PATH + "resultset_last.png").getImage()));
    playBB.setBorder(BorderFactory.createEmptyBorder(0, 5, 0, 0));
    playBB.setToolTipText("Run this flow (start points launched sequentially)");
    final Action playSequentialAction = new AbstractAction() {

        @Override
        public void actionPerformed(ActionEvent e) {
            if (m_mainPerspective.getCurrentLayout() != null) {
                if (!Utils.getDontShowDialog("weka.gui.knowledgeflow.SequentialRunInfo")) {
                    JCheckBox dontShow = new JCheckBox("Do not show this message again");
                    Object[] stuff = new Object[2];
                    stuff[0] = "The order that data sources are launched in can be\n" + "specified by setting a custom name for each data source that\n" + "that includes a number. E.g. \"1:MyArffLoader\". To set a name,\n" + "right-click over a data source and select \"Set name\"\n\n" + "If the prefix is not specified, then the order of execution\n" + "will correspond to the order that the components were added\n" + "to the layout. Note that it is also possible to prevent a data\n" + "source from executing by prefixing its name with a \"!\". E.g\n" + "\"!:MyArffLoader\"";
                    stuff[1] = dontShow;
                    JOptionPane.showMessageDialog(m_mainPerspective, stuff, "Sequential execution information", JOptionPane.OK_OPTION);
                    if (dontShow.isSelected()) {
                        try {
                            Utils.setDontShowDialog("weka.gui.knowledgeFlow.SequentialRunInfo");
                        } catch (Exception e1) {
                        }
                    }
                }
                boolean proceed = true;
                if (m_mainPerspective.isMemoryLow()) {
                    proceed = m_mainPerspective.showMemoryIsLow();
                }
                if (proceed) {
                    try {
                        m_mainPerspective.getCurrentLayout().executeFlow(true);
                    } catch (WekaException e1) {
                        m_mainPerspective.showErrorDialog(e1);
                    }
                }
            }
        }
    };
    playBB.addActionListener(new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent e) {
            playSequentialAction.actionPerformed(e);
        }
    });
    JButton stopB = new JButton(new ImageIcon(loadIcon(ICON_PATH + "shape_square.png").getImage()));
    stopB.setBorder(BorderFactory.createEmptyBorder(0, 8, 0, 0));
    stopB.setToolTipText("Stop all execution");
    final Action stopAction = new AbstractAction() {

        @Override
        public void actionPerformed(ActionEvent e) {
            if (m_mainPerspective.getCurrentLayout() != null) {
                m_mainPerspective.getCurrentLayout().getLogPanel().statusMessage("@!@[KnowledgeFlow]|Attempting to stop all components...");
                m_mainPerspective.getCurrentLayout().stopFlow();
                m_mainPerspective.getCurrentLayout().getLogPanel().statusMessage("@!@[KnowledgeFlow]|OK.");
            }
        }
    };
    stopB.addActionListener(new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent e) {
            stopAction.actionPerformed(e);
        }
    });
    JButton pointerB = new JButton(new ImageIcon(loadIcon(ICON_PATH + "cursor.png").getImage()));
    pointerB.setBorder(BorderFactory.createEmptyBorder(0, 5, 0, 0));
    pointerB.addActionListener(new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent e) {
            m_mainPerspective.setPalleteSelectedStep(null);
            m_mainPerspective.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
            m_mainPerspective.clearDesignPaletteSelection();
            if (m_mainPerspective.getCurrentLayout() != null) {
                m_mainPerspective.getCurrentLayout().setFlowLayoutOperation(VisibleLayout.LayoutOperation.NONE);
            }
        }
    });
    addWidgetToToolBar(fixedTools2, Widgets.POINTER_BUTTON.toString(), pointerB);
    addWidgetToToolBar(fixedTools2, Widgets.PLAY_PARALLEL_BUTTON.toString(), playB);
    addWidgetToToolBar(fixedTools2, Widgets.PLAY_SEQUENTIAL_BUTTON.toString(), playBB);
    addWidgetToToolBar(fixedTools2, Widgets.STOP_BUTTON.toString(), stopB);
    Dimension d = playB.getPreferredSize();
    Dimension d2 = fixedTools2.getMinimumSize();
    Dimension d3 = new Dimension(d2.width, d.height + 4);
    fixedTools2.setPreferredSize(d3);
    fixedTools2.setMaximumSize(d3);
    add(fixedTools2, BorderLayout.WEST);
}
