public void buildClassifier(Instances data) throws Exception {
    ClassifierDecList currentRule;
    double currentWeight;
    Instances oldGrowData, newGrowData, oldPruneData, newPruneData;
    theRules = new Vector<ClassifierDecList>();
    if ((reducedErrorPruning) && !(unpruned)) {
        Random random = new Random(m_seed);
        data.randomize(random);
        data.stratify(numSetS);
        oldGrowData = data.trainCV(numSetS, numSetS - 1, random);
        oldPruneData = data.testCV(numSetS, numSetS - 1);
    } else {
        oldGrowData = data;
        oldPruneData = null;
    }
    while (Utils.gr(oldGrowData.numInstances(), 0)) {
        // Create rule
        if (unpruned) {
            currentRule = new ClassifierDecList(toSelectModeL, minNumObj);
            currentRule.buildRule(oldGrowData);
        } else if (reducedErrorPruning) {
            currentRule = new PruneableDecList(toSelectModeL, minNumObj);
            ((PruneableDecList) currentRule).buildRule(oldGrowData, oldPruneData);
        } else {
            currentRule = new C45PruneableDecList(toSelectModeL, CF, minNumObj);
            ((C45PruneableDecList) currentRule).buildRule(oldGrowData);
        }
        // Remove instances from growing data
        newGrowData = new Instances(oldGrowData, oldGrowData.numInstances());
        Enumeration<Instance> enu = oldGrowData.enumerateInstances();
        while (enu.hasMoreElements()) {
            Instance instance = enu.nextElement();
            currentWeight = currentRule.weight(instance);
            if (Utils.sm(currentWeight, 1)) {
                instance.setWeight(instance.weight() * (1 - currentWeight));
                newGrowData.add(instance);
            }
        }
        newGrowData.compactify();
        oldGrowData = newGrowData;
        // Remove instances from pruning data
        if ((reducedErrorPruning) && !(unpruned)) {
            newPruneData = new Instances(oldPruneData, oldPruneData.numInstances());
            enu = oldPruneData.enumerateInstances();
            while (enu.hasMoreElements()) {
                Instance instance = enu.nextElement();
                currentWeight = currentRule.weight(instance);
                if (Utils.sm(currentWeight, 1)) {
                    instance.setWeight(instance.weight() * (1 - currentWeight));
                    newPruneData.add(instance);
                }
            }
            newPruneData.compactify();
            oldPruneData = newPruneData;
        }
        theRules.addElement(currentRule);
    }
}
