@Override
public void keyReleased(KeyEvent e) {
    String searchTerm = searchField.getText();
    List<DefaultMutableTreeNode> nonhits = new ArrayList<DefaultMutableTreeNode>();
    List<DefaultMutableTreeNode> hits = new ArrayList<DefaultMutableTreeNode>();
    DefaultTreeModel model = (DefaultTreeModel) stepTree.getModel();
    // collapse all nodes first
    model.reload();
    for (Map.Entry<String, DefaultMutableTreeNode> entry : stepTree.getNodeTextIndex().entrySet()) {
        if (entry.getValue() instanceof InvisibleNode) {
            ((InvisibleNode) entry.getValue()).setVisible(true);
        }
        if (searchTerm != null && searchTerm.length() > 0) {
            if (entry.getKey().contains(searchTerm.toLowerCase())) {
                hits.add(entry.getValue());
            } else {
                nonhits.add(entry.getValue());
            }
        }
    }
    if (searchTerm == null || searchTerm.length() == 0) {
        // just reset everything
        model.reload();
    }
    // if we have some hits then set all the non-hits to invisible
    if (hits.size() > 0) {
        for (DefaultMutableTreeNode h : nonhits) {
            if (h instanceof InvisibleNode) {
                ((InvisibleNode) h).setVisible(false);
            }
        }
        // collapse all the nodes first
        model.reload();
        // expand all the hits
        for (DefaultMutableTreeNode h : hits) {
            TreeNode[] path = model.getPathToRoot(h);
            TreePath tpath = new TreePath(path);
            tpath = tpath.getParentPath();
            stepTree.expandPath(tpath);
        }
    }
}
