protected void splitNodes(BallNode node, int depth, final double rootRadius) throws Exception {
    if (node.m_NumInstances <= m_MaxInstancesInLeaf || (rootRadius == 0 ? true : node.m_Radius / rootRadius < m_MaxRelLeafRadius)) {
        return;
    }
    m_NumLeaves--;
    m_Splitter.splitNode(node, m_NumNodes);
    m_NumNodes += 2;
    m_NumLeaves += 2;
    if (m_MaxDepth < depth) {
        m_MaxDepth = depth;
    }
    splitNodes(node.m_Left, depth + 1, rootRadius);
    splitNodes(node.m_Right, depth + 1, rootRadius);
    if (m_FullyContainChildBalls) {
        double radius = BallNode.calcRadius(node.m_Left, node.m_Right, node.getPivot(), m_DistanceFunction);
        // The line that follows was commented out by Eibe because it does not
        // have any effect
        // Instance pivot = BallNode.calcPivot(node.m_Left, node.m_Right,
        // m_Instances);
        // System.err.println("Left Radius: "+node.m_Left.getRadius()+
        // " Right Radius: "+node.m_Right.getRadius()+
        // " d(p1,p2): "+
        // m_DistanceFunction.distance(node.m_Left.getPivot(),
        // node.m_Right.getPivot())+
        // " node's old radius: "+node.getRadius()+
        // " node's new Radius: "+radius+
        // " node;s old pivot: "+node.getPivot()+
        // " node's new pivot: "+pivot);
        node.setRadius(radius);
    }
}
