@Override
public void updateClusterer(Instance newInstance) throws Exception {
    if (m_instanceCount > 0) {
        if (m_instanceCount % m_periodicPruningRate == 0) {
            pruneCandidateCanopies();
        }
    }
    m_instanceCount++;
    if (m_missingValuesReplacer != null) {
        m_missingValuesReplacer.input(newInstance);
        newInstance = m_missingValuesReplacer.output();
    }
    m_distanceFunction.update(newInstance);
    boolean addPoint = true;
    for (int i = 0; i < m_canopies.numInstances(); i++) {
        if (m_distanceFunction.distance(newInstance, m_canopies.instance(i)) < m_t2) {
            double[] density = m_canopyT2Density.get(i);
            density[0]++;
            addPoint = false;
            double[][] center = m_canopyCenters.get(i);
            double[] numMissingNumerics = m_canopyNumMissingForNumerics.get(i);
            updateCanopyCenter(newInstance, center, numMissingNumerics);
            break;
        }
    }
    if (addPoint && m_canopies.numInstances() < m_maxCanopyCandidates) {
        m_canopies.add(newInstance);
        double[] density = new double[1];
        density[0] = 1.0;
        m_canopyT2Density.add(density);
        double[][] center = new double[newInstance.numAttributes()][0];
        double[] numMissingNumerics = new double[newInstance.numAttributes()];
        updateCanopyCenter(newInstance, center, numMissingNumerics);
        m_canopyCenters.add(center);
        m_canopyNumMissingForNumerics.add(numMissingNumerics);
    }
}
