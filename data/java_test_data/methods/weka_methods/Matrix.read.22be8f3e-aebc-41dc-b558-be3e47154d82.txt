public static Matrix read(BufferedReader input) throws java.io.IOException {
    StreamTokenizer tokenizer = new StreamTokenizer(input);
    // Although StreamTokenizer will parse numbers, it doesn't recognize
    // scientific notation (E or D); however, Double.valueOf does.
    // The strategy here is to disable StreamTokenizer's number parsing.
    // We'll only get whitespace delimited words, EOL's and EOF's.
    // These words should all be numbers, for Double.valueOf to parse.
    tokenizer.resetSyntax();
    tokenizer.wordChars(0, 255);
    tokenizer.whitespaceChars(0, ' ');
    tokenizer.eolIsSignificant(true);
    java.util.Vector<Object> v = new java.util.Vector<Object>();
    // Ignore initial empty lines
    while (tokenizer.nextToken() == StreamTokenizer.TT_EOL) {
        ;
    }
    if (tokenizer.ttype == StreamTokenizer.TT_EOF) {
        throw new java.io.IOException("Unexpected EOF on matrix read.");
    }
    do {
        // Read & store 1st row.
        v.addElement(Double.valueOf(tokenizer.sval));
    } while (tokenizer.nextToken() == StreamTokenizer.TT_WORD);
    // Now we've got the number of columns!
    int n = v.size();
    double[] row = new double[n];
    for (int j = 0; j < n; j++) {
        row[j] = ((Double) v.elementAt(j)).doubleValue();
    }
    v.removeAllElements();
    // Start storing rows instead of columns.
    v.addElement(row);
    while (tokenizer.nextToken() == StreamTokenizer.TT_WORD) {
        // While non-empty lines
        v.addElement(row = new double[n]);
        int j = 0;
        do {
            if (j >= n) {
                throw new java.io.IOException("Row " + v.size() + " is too long.");
            }
            row[j++] = Double.valueOf(tokenizer.sval).doubleValue();
        } while (tokenizer.nextToken() == StreamTokenizer.TT_WORD);
        if (j < n) {
            throw new java.io.IOException("Row " + v.size() + " is too short.");
        }
    }
    // Now we've got the number of rows.
    int m = v.size();
    double[][] A = new double[m][];
    // copy the rows out of the vector
    v.copyInto(A);
    return new Matrix(A);
}
