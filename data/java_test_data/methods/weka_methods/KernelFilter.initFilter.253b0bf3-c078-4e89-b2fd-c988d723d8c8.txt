public void initFilter(Instances instances) throws Exception {
    // determine kernel factor
    SimpleVariableDeclarations variables = new SimpleVariableDeclarations();
    variables.addDouble("A");
    variables.addDouble("N");
    Node root = Parser.parse(// expression
    getKernelFactorExpression(), // variables
    variables, // macros
    new MacroDeclarationsCompositor(new MathFunctions(), new IfElseMacro(), new JavaMacro()));
    if (!(root instanceof DoubleExpression))
        throw new Exception("Kernel factor expression must be of double type!");
    if (variables.getInitializer().hasVariable("A"))
        variables.getInitializer().setDouble("A", instances.numAttributes());
    if (variables.getInitializer().hasVariable("N"))
        variables.getInitializer().setDouble("N", instances.numInstances());
    m_KernelFactor = ((DoubleExpression) root).evaluate();
    // init filters
    if (!m_checksTurnedOff) {
        m_Missing = new ReplaceMissingValues();
        m_Missing.setInputFormat(instances);
        instances = Filter.useFilter(instances, m_Missing);
    } else {
        m_Missing = null;
    }
    if (getKernel().getCapabilities().handles(Capability.NUMERIC_ATTRIBUTES)) {
        boolean onlyNumeric = true;
        if (!m_checksTurnedOff) {
            for (int i = 0; i < instances.numAttributes(); i++) {
                if (i != instances.classIndex()) {
                    if (!instances.attribute(i).isNumeric()) {
                        onlyNumeric = false;
                        break;
                    }
                }
            }
        }
        if (!onlyNumeric) {
            m_NominalToBinary = new NominalToBinary();
            m_NominalToBinary.setInputFormat(instances);
            instances = Filter.useFilter(instances, m_NominalToBinary);
        } else {
            m_NominalToBinary = null;
        }
    } else {
        m_NominalToBinary = null;
    }
    if ((m_Filter != null) && (m_Filter.getClass() != AllFilter.class)) {
        m_ActualFilter = Filter.makeCopy(m_Filter);
        m_ActualFilter.setInputFormat(instances);
        instances = Filter.useFilter(instances, m_ActualFilter);
    } else {
        m_ActualFilter = null;
    }
    m_NumTrainInstances = instances.numInstances();
    // set factor for kernel
    m_ActualKernel = Kernel.makeCopy(m_Kernel);
    if (m_ActualKernel instanceof RBFKernel) {
        ((RBFKernel) m_ActualKernel).setGamma(m_KernelFactor * ((RBFKernel) m_ActualKernel).getGamma());
    }
    // build kernel
    m_ActualKernel.buildKernel(instances);
    m_Initialized = true;
}
