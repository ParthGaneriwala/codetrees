private void convertInstanceNumeric(Instance instance) {
    if (!m_needToTransform) {
        // No need to copy instance
        push(instance, false);
        return;
    }
    double[] vals = new double[outputFormatPeek().numAttributes()];
    int attSoFar = 0;
    for (int j = 0; j < getInputFormat().numAttributes(); j++) {
        Attribute att = getInputFormat().attribute(j);
        if ((!att.isNominal()) || (j == getInputFormat().classIndex())) {
            vals[attSoFar] = instance.value(j);
            attSoFar++;
        } else {
            if (instance.isMissing(j)) {
                for (int k = 0; k < att.numValues() - 1; k++) {
                    vals[attSoFar + k] = instance.value(j);
                }
            } else {
                int k = 0;
                while ((int) instance.value(j) != m_Indices[j][k]) {
                    vals[attSoFar + k] = 1;
                    k++;
                }
                while (k < att.numValues() - 1) {
                    vals[attSoFar + k] = 0;
                    k++;
                }
            }
            attSoFar += att.numValues() - 1;
        }
    }
    Instance inst = null;
    if (instance instanceof SparseInstance) {
        inst = new SparseInstance(instance.weight(), vals);
    } else {
        inst = new DenseInstance(instance.weight(), vals);
    }
    copyValues(inst, false, instance.dataset(), outputFormatPeek());
    // No need to copy instance
    push(inst);
}
