@Override
protected int examineExample(int i2) throws Exception {
    // if (i2 is in I.0)
    // F2 = f-cache[i2]
    // else
    // compute F2 = F.i2 and set f-cache[i2] = F2
    // % Update (b.low, i.low) or (b.up, i.up) using (F2, i2)...
    // if (i2 is in I.1)
    // if (F2+epsilon < b.up)
    // b.up = F2+epsilon,
    // i.up = i2
    // elseif (F2-epsilon > b.low)
    // b.low = F2-epsilon,
    // i.low = i2
    // end if
    // elseif ( (i2 is in I.2) && (F2+epsilon > b.low) )
    // b.low = F2+epsilon,
    // i.low = i2
    // elseif ( (i2 is in I.3) && (F2-epsilon < b.up) )
    // b.up = F2-epsilon,
    // i.up = i2
    // endif
    // endif
    int iSet = m_iSet[i2];
    double F2 = m_error[i2];
    if (!m_I0.contains(i2)) {
        F2 = -SVMOutput(i2) - m_b + m_target[i2];
        m_error[i2] = F2;
        if (iSet == I1) {
            if (F2 + m_epsilon < m_bUp) {
                m_bUp = F2 + m_epsilon;
                m_iUp = i2;
            } else if (F2 - m_epsilon > m_bLow) {
                m_bLow = F2 - m_epsilon;
                m_iLow = i2;
            }
        } else if ((iSet == I2) && (F2 + m_epsilon > m_bLow)) {
            m_bLow = F2 + m_epsilon;
            m_iLow = i2;
        } else if ((iSet == I3) && (F2 - m_epsilon < m_bUp)) {
            m_bUp = F2 - m_epsilon;
            m_iUp = i2;
        }
    }
    // % Check optimality using current b.low and b.up and, if
    // % violated, find an index i1 to do joint optimization with i2...
    // optimality = 1;
    // case 1: i2 is in I.0a
    // if (b.low-(F2-epsilon) > 2 * tol)
    // optimality = 0;
    // i1 = i.low;
    // % For i2 in I.0a choose the better i1...
    // if ((F2-epsilon)-b.up > b.low-(F2-epsilon))
    // i1 = i.up;
    // endif
    // elseif ((F2-epsilon)-b.up > 2 * tol)
    // optimality = 0;
    // i1 = i.up;
    // % For i2 in I.0a choose the better i1...
    // if ((b.low-(F2-epsilon) > (F2-epsilon)-b.up)
    // i1 = i.low;
    // endif
    // endif
    // case 2: i2 is in I.0b
    // if (b.low-(F2+epsilon) > 2 * tol)
    // optimality = 0;
    // i1 = i.low;
    // % For i2 in I.0b choose the better i1...
    // if ((F2+epsilon)-b.up > b.low-(F2+epsilon))
    // i1 = i.up;
    // endif
    // elseif ((F2+epsilon)-b.up > 2 * tol)
    // optimality = 0;
    // i1 = i.up;
    // % For i2 in I.0b choose the better i1...
    // if ((b.low-(F2+epsilon) > (F2+epsilon)-b.up)
    // i1 = i.low;
    // endif
    // endif
    // case 3: i2 is in I.1
    // if (b.low-(F2+epsilon) > 2 * tol)
    // optimality = 0;
    // i1 = i.low;
    // % For i2 in I1 choose the better i1...
    // if ((F2+epsilon)-b.up > b.low-(F2+epsilon)
    // i1 = i.up;
    // endif
    // elseif ((F2-epsilon)-b.up > 2 * tol)
    // optimality = 0;
    // i1 = i.up;
    // % For i2 in I1 choose the better i1...
    // if (b.low-(F2-epsilon) > (F2-epsilon)-b.up)
    // i1 = i.low;
    // endif
    // endif
    // case 4: i2 is in I.2
    // if ((F2+epsilon)-b.up > 2*tol)
    // optimality = 0,
    // i1 = i.up
    // endif
    // case 5: i2 is in I.3
    // if ((b.low-(F2-epsilon) > 2*tol)
    // optimality = 0, i1 = i.low
    // endif
    int i1 = i2;
    boolean bOptimality = true;
    // case 1: i2 is in I.0a
    if (iSet == I0a) {
        if (m_bLow - (F2 - m_epsilon) > 2 * m_fTolerance) {
            bOptimality = false;
            i1 = m_iLow;
            // % For i2 in I .0 a choose the better i1...
            if ((F2 - m_epsilon) - m_bUp > m_bLow - (F2 - m_epsilon)) {
                i1 = m_iUp;
            }
        } else if ((F2 - m_epsilon) - m_bUp > 2 * m_fTolerance) {
            bOptimality = false;
            i1 = m_iUp;
            // % For i2 in I.0a choose the better i1...
            if (m_bLow - (F2 - m_epsilon) > (F2 - m_epsilon) - m_bUp) {
                i1 = m_iLow;
            }
        }
    } else // case 2: i2 is in I.0b
    if (iSet == I0b) {
        if (m_bLow - (F2 + m_epsilon) > 2 * m_fTolerance) {
            bOptimality = false;
            // % For i2 in I.0b choose the better i1...
            i1 = m_iLow;
            if ((F2 + m_epsilon) - m_bUp > m_bLow - (F2 + m_epsilon)) {
                i1 = m_iUp;
            }
        } else if ((F2 + m_epsilon) - m_bUp > 2 * m_fTolerance) {
            bOptimality = false;
            // % For i2 in I.0b choose the better i1...
            i1 = m_iUp;
            if (m_bLow - (F2 + m_epsilon) > (F2 + m_epsilon) - m_bUp) {
                i1 = m_iLow;
            }
        }
    } else // case 3: i2 is in I.1
    if (iSet == I1) {
        if (m_bLow - (F2 + m_epsilon) > 2 * m_fTolerance) {
            bOptimality = false;
            i1 = m_iLow;
            // % For i2 in I1 choose the better i1...
            if ((F2 + m_epsilon) - m_bUp > m_bLow - (F2 + m_epsilon)) {
                i1 = m_iUp;
            }
        } else if ((F2 - m_epsilon) - m_bUp > 2 * m_fTolerance) {
            bOptimality = false;
            // % For i2 in I1 choose the better i1...
            i1 = m_iUp;
            if (m_bLow - (F2 - m_epsilon) > (F2 - m_epsilon) - m_bUp) {
                i1 = m_iLow;
            }
        }
    } else // case 4: i2 is in I.2
    if (iSet == I2) {
        if ((F2 + m_epsilon) - m_bUp > 2 * m_fTolerance) {
            bOptimality = false;
            i1 = m_iUp;
        }
    } else // case 5: i2 is in I.3
    if (iSet == I3) {
        if (m_bLow - (F2 - m_epsilon) > 2 * m_fTolerance) {
            bOptimality = false;
            i1 = m_iLow;
        }
    }
    // endprocedure
    if (bOptimality) {
        return 0;
    }
    return takeStep(i1, i2, m_alpha[i2], m_alphaStar[i2], F2);
}
