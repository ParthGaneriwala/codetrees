private void painter(Graphics g) {
    // I have moved what would normally be in the paintComponent
    // function to here
    // for now so that if I do in fact need to do double
    // buffering or the like it will be easier
    // this will go through the table of edges and draw the edge if it deems the
    // two nodes attached to it could cause it to cut the screen or be on it.
    // in the process flagging all nodes so that they can quickly be put to the
    // screen if they lie on it
    // I do it in this order because in some circumstances I have seen a line
    // cut through a node , to make things look better the line will
    // be drawn under the node
    // converting the screen edges to the node scale so that they
    // can be positioned relative to the screen
    // note I give a buffer around the edges of the screen.
    // when seeing
    // if a node is on screen I only bother to check the nodes top centre
    // if it has large enough size it may still fall onto the screen
    double left_clip = (double) (-m_viewPos.width - 50) / m_viewSize.width;
    double right_clip = (double) (getSize().width - m_viewPos.width + 50) / m_viewSize.width;
    double top_clip = (double) (-m_viewPos.height - 50) / m_viewSize.height;
    double bottom_clip = (double) (getSize().height - m_viewPos.height + 50) / m_viewSize.height;
    // 12 10 9 //the quadrants
    // 20 18 17
    // 36 34 33
    // first the edges must be rendered
    // Edge e; NOT USED
    // ,s; NOT USED
    Node r;
    double ncent, ntop;
    int row = 0, col = 0, pq, cq;
    for (int noa = 0; noa < m_numNodes; noa++) {
        r = m_nodes[noa].m_node;
        if (m_nodes[noa].m_change) {
            // then recalc row component of quadrant
            ntop = r.getTop();
            if (ntop < top_clip) {
                row = 8;
            } else if (ntop > bottom_clip) {
                row = 32;
            } else {
                row = 16;
            }
        }
        // calc the column the node falls in for the quadrant
        ncent = r.getCenter();
        if (ncent < left_clip) {
            col = 4;
        } else if (ncent > right_clip) {
            col = 1;
        } else {
            col = 2;
        }
        m_nodes[noa].m_quad = row | col;
        if (m_nodes[noa].m_parent >= 0) {
            // this will draw the edge if it should be drawn
            // It will do this by eliminating all edges that definitely won't enter
            // the screen and then draw the rest
            pq = m_nodes[m_edges[m_nodes[noa].m_parent].m_parent].m_quad;
            cq = m_nodes[noa].m_quad;
            // note that this will need to be altered if more than 1 parent exists
            if ((cq & 8) == 8) {
            // then child exists above screen
            } else if ((pq & 32) == 32) {
            // then parent exists below screen
            } else if ((cq & 4) == 4 && (pq & 4) == 4) {
            // then both child and parent exist to the left of the screen
            } else if ((cq & 1) == 1 && (pq & 1) == 1) {
            // then both child and parent exist to the right of the screen
            } else {
                // then draw the line
                drawLine(m_nodes[noa].m_parent, g);
            }
        }
    // now draw the nodes
    }
    for (int noa = 0; noa < m_numNodes; noa++) {
        if (m_nodes[noa].m_quad == 18) {
            // then the node is on the screen , draw it
            drawNode(noa, g);
        }
    }
    if (m_highlightNode >= 0 && m_highlightNode < m_numNodes) {
        // then draw outline
        if (m_nodes[m_highlightNode].m_quad == 18) {
            Color acol;
            if (m_NodeColor == null) {
                acol = m_nodes[m_highlightNode].m_node.getColor();
            } else {
                acol = m_NodeColor;
            }
            g.setColor(new Color((acol.getRed() + 125) % 256, (acol.getGreen() + 125) % 256, (acol.getBlue() + 125) % 256));
            // g.setXORMode(Color.white);
            if (m_nodes[m_highlightNode].m_node.getShape() == 1) {
                g.drawRect(m_nodes[m_highlightNode].m_center - m_nodes[m_highlightNode].m_side, m_nodes[m_highlightNode].m_top, m_nodes[m_highlightNode].m_width, m_nodes[m_highlightNode].m_height);
                g.drawRect(m_nodes[m_highlightNode].m_center - m_nodes[m_highlightNode].m_side + 1, m_nodes[m_highlightNode].m_top + 1, m_nodes[m_highlightNode].m_width - 2, m_nodes[m_highlightNode].m_height - 2);
            } else if (m_nodes[m_highlightNode].m_node.getShape() == 2) {
                g.drawOval(m_nodes[m_highlightNode].m_center - m_nodes[m_highlightNode].m_side, m_nodes[m_highlightNode].m_top, m_nodes[m_highlightNode].m_width, m_nodes[m_highlightNode].m_height);
                g.drawOval(m_nodes[m_highlightNode].m_center - m_nodes[m_highlightNode].m_side + 1, m_nodes[m_highlightNode].m_top + 1, m_nodes[m_highlightNode].m_width - 2, m_nodes[m_highlightNode].m_height - 2);
            }
        }
    }
    for (int noa = 0; noa < m_numNodes; noa++) {
        // this resets the coords so that next time a refresh occurs
        // they don't accidentally get used
        // I will use 32000 to signify that they are invalid, even if this
        // coordinate occurs it doesn't
        // matter as it is only for the sake of the caching
        m_nodes[noa].m_top = 32000;
    }
}
