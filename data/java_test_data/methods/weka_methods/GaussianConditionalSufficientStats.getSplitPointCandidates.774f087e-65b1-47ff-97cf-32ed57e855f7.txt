protected TreeSet<Double> getSplitPointCandidates() {
    TreeSet<Double> splits = new TreeSet<Double>();
    double min = Double.POSITIVE_INFINITY;
    double max = Double.NEGATIVE_INFINITY;
    for (String classVal : m_classLookup.keySet()) {
        if (m_minValObservedPerClass.containsKey(classVal)) {
            if (m_minValObservedPerClass.get(classVal) < min) {
                min = m_minValObservedPerClass.get(classVal);
            }
            if (m_maxValObservedPerClass.get(classVal) > max) {
                max = m_maxValObservedPerClass.get(classVal);
            }
        }
    }
    if (min < Double.POSITIVE_INFINITY) {
        double bin = max - min;
        bin /= (m_numBins + 1);
        for (int i = 0; i < m_numBins; i++) {
            double split = min + (bin * (i + 1));
            if (split > min && split < max) {
                splits.add(split);
            }
        }
    }
    return splits;
}
