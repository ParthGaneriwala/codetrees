private void convertInstance(Instance instance) throws Exception {
    double[] vals = instance.toDoubleArray();
    for (int i = 0; i < instance.numAttributes(); i++) {
        if (m_SelectCols.isInRange(i) && instance.attribute(i).isNumeric() && !Utils.isMissingValue(vals[i]) && getInputFormat().classIndex() != i) {
            // setup program
            m_InstancesHelper.setInstance(instance);
            m_StatsHelper.setStats(m_attStats[i]);
            if (m_CurrentValue.hasVariable("A"))
                m_CurrentValue.setDouble("A", vals[i]);
            // compute
            double value = m_CompiledExpression.evaluate();
            // set new value
            if (Double.isNaN(value) || Double.isInfinite(value) || m_InstancesHelper.missingAccessed()) {
                System.err.println("WARNING:Error in evaluating the expression: missing value set");
                vals[i] = Utils.missingValue();
            } else {
                vals[i] = value;
            }
        }
    }
    Instance outInstance;
    if (instance instanceof SparseInstance) {
        outInstance = new SparseInstance(instance.weight(), vals);
    } else {
        outInstance = new DenseInstance(instance.weight(), vals);
    }
    outInstance.setDataset(instance.dataset());
    // No need to copy instance
    push(outInstance, false);
}
