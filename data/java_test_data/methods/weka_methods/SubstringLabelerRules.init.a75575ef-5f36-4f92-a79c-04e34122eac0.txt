public void init(Environment env, Instances structure) {
    m_matchS = m_match;
    m_labelS = m_label;
    String attsToApplyToS = m_attsToApplyTo;
    try {
        m_matchS = env.substitute(m_matchS);
        m_labelS = env.substitute(m_labelS);
        attsToApplyToS = env.substitute(attsToApplyToS);
    } catch (Exception ex) {
    }
    if (m_regex) {
        String match = m_matchS;
        if (m_ignoreCase) {
            match = match.toLowerCase();
        }
        // precompile regular expression for speed
        m_regexPattern = Pattern.compile(match);
    }
    // Try a range first for the attributes
    String tempRangeS = attsToApplyToS;
    tempRangeS = tempRangeS.replace("/first", "first").replace("/last", "last");
    Range tempR = new Range();
    tempR.setRanges(attsToApplyToS);
    try {
        tempR.setUpper(structure.numAttributes() - 1);
        m_selectedAtts = tempR.getSelection();
    } catch (IllegalArgumentException ex) {
        // probably contains attribute names then
        m_selectedAtts = null;
    }
    if (m_selectedAtts == null) {
        // parse the comma separated list of attribute names
        Set<Integer> indexes = new HashSet<Integer>();
        String[] attParts = m_attsToApplyTo.split(",");
        for (String att : attParts) {
            att = att.trim();
            if (att.toLowerCase().equals("/first")) {
                indexes.add(0);
            } else if (att.toLowerCase().equals("/last")) {
                indexes.add((structure.numAttributes() - 1));
            } else {
                // try and find attribute
                if (structure.attribute(att) != null) {
                    indexes.add(new Integer(structure.attribute(att).index()));
                } else {
                    if (m_logger != null) {
                        String msg = m_statusMessagePrefix + "Can't find attribute '" + att + "in the incoming instances - ignoring";
                        m_logger.logMessage(msg);
                    }
                }
            }
        }
        m_selectedAtts = new int[indexes.size()];
        int c = 0;
        for (Integer i : indexes) {
            m_selectedAtts[c++] = i.intValue();
        }
    }
    // validate the types of the selected atts
    Set<Integer> indexes = new HashSet<Integer>();
    for (int m_selectedAtt : m_selectedAtts) {
        if (structure.attribute(m_selectedAtt).isString()) {
            indexes.add(m_selectedAtt);
        } else {
            if (m_logger != null) {
                String msg = m_statusMessagePrefix + "Attribute '" + structure.attribute(m_selectedAtt).name() + "is not a string attribute - " + "ignoring";
                m_logger.logMessage(msg);
            }
        }
    }
    // final array
    m_selectedAtts = new int[indexes.size()];
    int c = 0;
    for (Integer i : indexes) {
        m_selectedAtts[c++] = i.intValue();
    }
}
