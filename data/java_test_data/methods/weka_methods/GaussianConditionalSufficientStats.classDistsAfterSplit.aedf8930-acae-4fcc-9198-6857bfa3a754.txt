protected List<Map<String, WeightMass>> classDistsAfterSplit(double splitVal) {
    Map<String, WeightMass> lhsDist = new HashMap<String, WeightMass>();
    Map<String, WeightMass> rhsDist = new HashMap<String, WeightMass>();
    for (Map.Entry<String, Object> e : m_classLookup.entrySet()) {
        String classVal = e.getKey();
        GaussianEstimator attEst = (GaussianEstimator) e.getValue();
        if (attEst != null) {
            if (splitVal < m_minValObservedPerClass.get(classVal)) {
                WeightMass mass = rhsDist.get(classVal);
                if (mass == null) {
                    mass = new WeightMass();
                    rhsDist.put(classVal, mass);
                }
                mass.m_weight += attEst.getSumOfWeights();
            } else if (splitVal > m_maxValObservedPerClass.get(classVal)) {
                WeightMass mass = lhsDist.get(classVal);
                if (mass == null) {
                    mass = new WeightMass();
                    lhsDist.put(classVal, mass);
                }
                mass.m_weight += attEst.getSumOfWeights();
            } else {
                double[] weights = attEst.weightLessThanEqualAndGreaterThan(splitVal);
                WeightMass mass = lhsDist.get(classVal);
                if (mass == null) {
                    mass = new WeightMass();
                    lhsDist.put(classVal, mass);
                }
                // <=
                mass.m_weight += weights[0] + weights[1];
                mass = rhsDist.get(classVal);
                if (mass == null) {
                    mass = new WeightMass();
                    rhsDist.put(classVal, mass);
                }
                // >
                mass.m_weight += weights[2];
            }
        }
    }
    List<Map<String, WeightMass>> dists = new ArrayList<Map<String, WeightMass>>();
    dists.add(lhsDist);
    dists.add(rhsDist);
    return dists;
}
