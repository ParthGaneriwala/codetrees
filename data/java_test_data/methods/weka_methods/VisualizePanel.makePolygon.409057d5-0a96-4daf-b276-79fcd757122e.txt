private ArrayList<Double> makePolygon(ArrayList<Double> v) {
    ArrayList<Double> building = new ArrayList<Double>(v.size() + 10);
    double x1, y1, x2, y2;
    int edge1 = 0, edge2 = 0;
    for (int noa = 0; noa < v.size() - 2; noa++) {
        building.add(new Double(v.get(noa).doubleValue()));
    }
    // now clip the lines
    double[] new_coords;
    // note lineIntersect , expects the values to have been converted to
    // screen coords
    // note the first point passed is the one that gets shifted.
    x1 = m_plot2D.convertToPanelX(v.get(1).doubleValue());
    y1 = m_plot2D.convertToPanelY(v.get(2).doubleValue());
    x2 = m_plot2D.convertToPanelX(v.get(3).doubleValue());
    y2 = m_plot2D.convertToPanelY(v.get(4).doubleValue());
    if (x1 < 0) {
        // test left
        new_coords = lineIntersect(x1, y1, x2, y2, 0, this.getHeight(), 0);
        edge1 = 0;
        if (new_coords[0] < 0) {
            // then not left
            if (y1 < 0) {
                // test top
                new_coords = lineIntersect(x1, y1, x2, y2, this.getWidth(), 0, 0);
                edge1 = 1;
            } else {
                // test bottom
                new_coords = lineIntersect(x1, y1, x2, y2, this.getWidth(), 0, this.getHeight());
                edge1 = 3;
            }
        }
    } else if (x1 > this.getWidth()) {
        // test right
        new_coords = lineIntersect(x1, y1, x2, y2, 0, this.getHeight(), this.getWidth());
        edge1 = 2;
        if (new_coords[0] < 0) {
            // then not right
            if (y1 < 0) {
                // test top
                new_coords = lineIntersect(x1, y1, x2, y2, this.getWidth(), 0, 0);
                edge1 = 1;
            } else {
                // test bottom
                new_coords = lineIntersect(x1, y1, x2, y2, this.getWidth(), 0, this.getHeight());
                edge1 = 3;
            }
        }
    } else if (y1 < 0) {
        // test top
        new_coords = lineIntersect(x1, y1, x2, y2, this.getWidth(), 0, 0);
        edge1 = 1;
    } else {
        // test bottom
        new_coords = lineIntersect(x1, y1, x2, y2, this.getWidth(), 0, this.getHeight());
        edge1 = 3;
    }
    building.set(1, new Double(m_plot2D.convertToAttribX(new_coords[0])));
    building.set(2, new Double(m_plot2D.convertToAttribY(new_coords[1])));
    x1 = m_plot2D.convertToPanelX(v.get(v.size() - 4).doubleValue());
    y1 = m_plot2D.convertToPanelY(v.get(v.size() - 3).doubleValue());
    x2 = m_plot2D.convertToPanelX(v.get(v.size() - 6).doubleValue());
    y2 = m_plot2D.convertToPanelY(v.get(v.size() - 5).doubleValue());
    if (x1 < 0) {
        // test left
        new_coords = lineIntersect(x1, y1, x2, y2, 0, this.getHeight(), 0);
        edge2 = 0;
        if (new_coords[0] < 0) {
            // then not left
            if (y1 < 0) {
                // test top
                new_coords = lineIntersect(x1, y1, x2, y2, this.getWidth(), 0, 0);
                edge2 = 1;
            } else {
                // test bottom
                new_coords = lineIntersect(x1, y1, x2, y2, this.getWidth(), 0, this.getHeight());
                edge2 = 3;
            }
        }
    } else if (x1 > this.getWidth()) {
        // test right
        new_coords = lineIntersect(x1, y1, x2, y2, 0, this.getHeight(), this.getWidth());
        edge2 = 2;
        if (new_coords[0] < 0) {
            // then not right
            if (y1 < 0) {
                // test top
                new_coords = lineIntersect(x1, y1, x2, y2, this.getWidth(), 0, 0);
                edge2 = 1;
            } else {
                // test bottom
                new_coords = lineIntersect(x1, y1, x2, y2, this.getWidth(), 0, this.getHeight());
                edge2 = 3;
            }
        }
    } else if (y1 < 0) {
        // test top
        new_coords = lineIntersect(x1, y1, x2, y2, this.getWidth(), 0, 0);
        edge2 = 1;
    } else {
        // test bottom
        new_coords = lineIntersect(x1, y1, x2, y2, this.getWidth(), 0, this.getHeight());
        edge2 = 3;
    }
    building.set(building.size() - 2, new Double(m_plot2D.convertToAttribX(new_coords[0])));
    building.set(building.size() - 1, new Double(m_plot2D.convertToAttribY(new_coords[1])));
    // trust me this complicated piece of code will
    // determine what points on the boundary of the view to add to the polygon
    int xp, yp;
    xp = this.getWidth() * ((edge2 & 1) ^ ((edge2 & 2) / 2));
    yp = this.getHeight() * ((edge2 & 2) / 2);
    if (inPolyline(v, m_plot2D.convertToAttribX(xp), m_plot2D.convertToAttribY(yp))) {
        // then add points in a clockwise direction
        building.add(new Double(m_plot2D.convertToAttribX(xp)));
        building.add(new Double(m_plot2D.convertToAttribY(yp)));
        for (int noa = (edge2 + 1) % 4; noa != edge1; noa = (noa + 1) % 4) {
            xp = this.getWidth() * ((noa & 1) ^ ((noa & 2) / 2));
            yp = this.getHeight() * ((noa & 2) / 2);
            building.add(new Double(m_plot2D.convertToAttribX(xp)));
            building.add(new Double(m_plot2D.convertToAttribY(yp)));
        }
    } else {
        xp = this.getWidth() * ((edge2 & 2) / 2);
        yp = this.getHeight() * (1 & ~((edge2 & 1) ^ ((edge2 & 2) / 2)));
        if (inPolyline(v, m_plot2D.convertToAttribX(xp), m_plot2D.convertToAttribY(yp))) {
            // then add points in anticlockwise direction
            building.add(new Double(m_plot2D.convertToAttribX(xp)));
            building.add(new Double(m_plot2D.convertToAttribY(yp)));
            for (int noa = (edge2 + 3) % 4; noa != edge1; noa = (noa + 3) % 4) {
                xp = this.getWidth() * ((noa & 2) / 2);
                yp = this.getHeight() * (1 & ~((noa & 1) ^ ((noa & 2) / 2)));
                building.add(new Double(m_plot2D.convertToAttribX(xp)));
                building.add(new Double(m_plot2D.convertToAttribY(yp)));
            }
        }
    }
    return building;
}
