public double transProb() {
    double transProb, distance;
    // in which case it should be in the numeric cache
    if (m_Cache.containsKey(m_Test.value(m_AttrIndex))) {
        KStarCache.TableEntry te = m_Cache.getCacheValues(m_Test.value(m_AttrIndex));
        m_Scale = te.value;
        m_MissingProb = te.pmiss;
    } else {
        if (m_BlendMethod == B_ENTROPY) {
            m_Scale = scaleFactorUsingEntropy();
        } else {
            // default is B_SPHERE
            m_Scale = scaleFactorUsingBlend();
        }
        m_Cache.store(m_Test.value(m_AttrIndex), m_Scale, m_MissingProb);
    }
    // now what???
    if (m_Train.isMissing(m_AttrIndex)) {
        transProb = m_MissingProb;
    } else {
        distance = Math.abs(m_Test.value(m_AttrIndex) - m_Train.value(m_AttrIndex));
        transProb = PStar(distance, m_Scale);
    }
    return transProb;
}
