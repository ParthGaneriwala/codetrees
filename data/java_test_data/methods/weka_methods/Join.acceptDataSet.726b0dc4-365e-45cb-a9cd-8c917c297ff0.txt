@Override
public synchronized void acceptDataSet(DataSetEvent e) {
    m_runningIncrementally = false;
    m_stopRequested.set(false);
    if (e.getSource() == m_firstInput) {
        if (e.isStructureOnly() || e.getDataSet().numInstances() == 0) {
            m_headerOne = e.getDataSet();
            return;
        }
        if (m_headerOne == null) {
            m_headerOne = new Instances(e.getDataSet(), 0);
        }
        m_firstBuffer = new LinkedList<InstanceHolder>();
        for (int i = 0; i < e.getDataSet().numInstances() && !m_stopRequested.get(); i++) {
            InstanceHolder tempH = new InstanceHolder();
            tempH.m_instance = e.getDataSet().instance(i);
            m_firstBuffer.add(tempH);
        }
    } else if (e.getSource() == m_secondInput) {
        if (e.isStructureOnly() || e.getDataSet().numInstances() == 0) {
            m_headerTwo = e.getDataSet();
            return;
        }
        if (m_headerTwo == null) {
            m_headerTwo = new Instances(e.getDataSet(), 0);
        }
        m_secondBuffer = new LinkedList<InstanceHolder>();
        for (int i = 0; i < e.getDataSet().numInstances() && !m_stopRequested.get(); i++) {
            InstanceHolder tempH = new InstanceHolder();
            tempH.m_instance = e.getDataSet().instance(i);
            m_secondBuffer.add(tempH);
        }
    }
    if (m_firstBuffer != null && m_firstBuffer.size() > 0 && m_secondBuffer != null && m_secondBuffer.size() > 0) {
        m_busy = true;
        generateMergedHeader();
        DataSetEvent dse = new DataSetEvent(this, m_mergedHeader);
        notifyDataListeners(dse);
        Instances newData = new Instances(m_mergedHeader, 0);
        while (!m_stopRequested.get() && m_firstBuffer.size() > 0 && m_secondBuffer.size() > 0) {
            Instance newI = processBuffers();
            if (newI != null) {
                newData.add(newI);
            }
        }
        if (!m_stopRequested.get()) {
            dse = new DataSetEvent(this, newData);
            notifyDataListeners(dse);
        }
        m_busy = false;
        m_headerOne = null;
        m_headerTwo = null;
        m_mergedHeader = null;
        m_firstBuffer = null;
        m_secondBuffer = null;
    }
}
