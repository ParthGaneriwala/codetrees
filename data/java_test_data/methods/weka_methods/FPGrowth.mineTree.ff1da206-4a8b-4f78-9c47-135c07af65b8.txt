/**
 * Construct the frequent pattern tree by inserting each transaction in the
 * data into the tree. Only those items from each transaction that meet the
 * minimum support threshold are inserted.
 *
 * @param singletons the singleton item sets
 * @param data the Instances containing the transactions
 * @param minSupport the minimum support
 * @return the root of the tree
 */
/*
   * protected FPTreeRoot buildFPTree(ArrayList<BinaryItem> singletons,
   * Instances data, int minSupport) {
   * 
   * FPTreeRoot tree = new FPTreeRoot();
   * 
   * for (int i = 0; i < data.numInstances(); i++) { Instance current =
   * data.instance(i); ArrayList<BinaryItem> transaction = new
   * ArrayList<BinaryItem>(); if (current instanceof SparseInstance) { for (int
   * j = 0; j < current.numValues(); j++) { int attIndex = current.index(j); if
   * (singletons.get(attIndex).getFrequency() >= minSupport) {
   * transaction.add(singletons.get(attIndex)); } }
   * Collections.sort(transaction); tree.addItemSet(transaction, 1); } else {
   * for (int j = 0; j < data.numAttributes(); j++) { if (!current.isMissing(j))
   * { if (current.attribute(j).numValues() == 1 || current.value(j) ==
   * m_positiveIndex - 1) { if (singletons.get(j).getFrequency() >= minSupport)
   * { transaction.add(singletons.get(j)); } } } }
   * Collections.sort(transaction); tree.addItemSet(transaction, 1); } }
   * 
   * return tree; }
   */
protected void mineTree(FPTreeRoot tree, FrequentItemSets largeItemSets, int recursionLevel, FrequentBinaryItemSet conditionalItems, int minSupport) {
    if (!tree.isEmpty(recursionLevel)) {
        if (m_maxItems > 0 && recursionLevel >= m_maxItems) {
            // don't mine any further
            return;
        }
        Map<BinaryItem, FPTreeRoot.Header> headerTable = tree.getHeaderTable();
        Set<BinaryItem> keys = headerTable.keySet();
        // System.err.println("Number of freq item sets collected " +
        // largeItemSets.size());
        Iterator<BinaryItem> i = keys.iterator();
        while (i.hasNext()) {
            BinaryItem item = i.next();
            FPTreeRoot.Header itemHeader = headerTable.get(item);
            // check for minimum support at this level
            int support = itemHeader.getProjectedCounts().getCount(recursionLevel);
            if (support >= minSupport) {
                // process header list at this recursion level
                for (FPTreeNode n : itemHeader.getHeaderList()) {
                    // push count up path to root
                    int currentCount = n.getProjectedCount(recursionLevel);
                    if (currentCount > 0) {
                        FPTreeNode temp = n.getParent();
                        while (temp != tree) {
                            // set/increase for the node
                            temp.increaseProjectedCount(recursionLevel + 1, currentCount);
                            // set/increase for the header table
                            headerTable.get(temp.getItem()).getProjectedCounts().increaseCount(recursionLevel + 1, currentCount);
                            temp = temp.getParent();
                        }
                    }
                }
                FrequentBinaryItemSet newConditional = (FrequentBinaryItemSet) conditionalItems.clone();
                // this item gets added to the conditional items
                newConditional.addItem(item);
                newConditional.setSupport(support);
                // now add this conditional item set to the list of large item sets
                largeItemSets.addItemSet(newConditional);
                // now recursively process the new tree
                mineTree(tree, largeItemSets, recursionLevel + 1, newConditional, minSupport);
                // reverse the propagated counts
                for (FPTreeNode n : itemHeader.getHeaderList()) {
                    FPTreeNode temp = n.getParent();
                    while (temp != tree) {
                        temp.removeProjectedCount(recursionLevel + 1);
                        temp = temp.getParent();
                    }
                }
                // at this recursion level
                for (FPTreeRoot.Header h : headerTable.values()) {
                    h.getProjectedCounts().removeCount(recursionLevel + 1);
                }
            }
        }
    }
}
