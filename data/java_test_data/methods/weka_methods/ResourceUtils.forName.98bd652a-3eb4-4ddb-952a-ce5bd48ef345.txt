public static Object forName(Class<?> classType, String className, String[] options) throws Exception {
    if (System.getProperty("weka.test.maventest", "").equalsIgnoreCase("true")) {
        return forNameNoSchemeMatch(classType, className, options);
    }
    List<String> matches = Run.findSchemeMatch(classType, className, false, true);
    if (matches.size() == 0) {
        // Could be an array class type, which is not covered by findSchemeMatch()
        Class c = WekaPackageClassLoaderManager.forName(className);
        if (c.isArray() && (classType == null || classType.isAssignableFrom(c))) {
            return Array.newInstance(c.getComponentType(), 0);
        }
        throw new Exception("Can't find a permissible class called: " + className);
    }
    if (matches.size() > 1) {
        StringBuffer sb = new StringBuffer("More than one possibility matched '" + className + "':\n");
        for (String s : matches) {
            sb.append("  " + s + '\n');
        }
        throw new Exception(sb.toString());
    }
    className = matches.get(0);
    Class<?> c = null;
    try {
        // c = Class.forName(className);
        c = WekaPackageClassLoaderManager.forName(className);
    } catch (Exception ex) {
        throw new Exception("Can't find a permissible class called: " + className);
    }
    Object o = c.newInstance();
    if ((o instanceof OptionHandler) && (options != null)) {
        ((OptionHandler) o).setOptions(options);
        Utils.checkForRemainingOptions(options);
    }
    return o;
}
