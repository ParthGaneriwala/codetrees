@Override
public weka.clusterers.Clusterer processPrimary(Integer setNum, Integer maxSetNum, Data data, PairedDataHelper<weka.clusterers.Clusterer> helper) throws WekaException {
    Instances trainingData = data.getPrimaryPayload();
    try {
        weka.clusterers.Clusterer clusterer = weka.clusterers.AbstractClusterer.makeCopy(m_clustererTemplate);
        String clustererDesc = clusterer.getClass().getCanonicalName();
        clustererDesc = clustererDesc.substring(clustererDesc.lastIndexOf('.') + 1);
        if (clusterer instanceof OptionHandler) {
            String optsString = Utils.joinOptions(((OptionHandler) clusterer).getOptions());
            clustererDesc += " " + optsString;
        }
        if (clusterer instanceof EnvironmentHandler) {
            ((EnvironmentHandler) clusterer).setEnvironment(getStepManager().getExecutionEnvironment().getEnvironmentVariables());
        }
        // retain the training data
        helper.addIndexedValueToNamedStore("trainingSplits", setNum, trainingData);
        if (!isStopRequested()) {
            getStepManager().logBasic("Building " + clustererDesc + " on " + trainingData.relationName() + " for fold/set " + setNum + " out of " + maxSetNum);
            if (maxSetNum == 1) {
                // single train/test split - makes sense to retain this trained
                // classifier
                m_trainedClusterer = clusterer;
            }
            clusterer.buildClusterer(trainingData);
            getStepManager().logDetailed("Finished building " + clustererDesc + "on " + trainingData.relationName() + " for fold/set " + setNum + " out of " + maxSetNum);
            outputTextData(clusterer, setNum);
            outputGraphData(clusterer, setNum);
            if (getStepManager().numIncomingConnectionsOfType(StepManager.CON_TESTSET) == 0) {
                // output a butch clusterer for just the trained model
                outputBatchClusterer(clusterer, setNum, maxSetNum, trainingData, null);
            }
        }
        return clusterer;
    } catch (Exception ex) {
        throw new WekaException(ex);
    }
}
