protected void paintConnections(Graphics gx) {
    for (StepVisual stepVis : m_visLayout.getRenderGraph()) {
        Map<String, List<StepManager>> outConns = stepVis.getStepManager().getOutgoingConnections();
        if (outConns.size() > 0) {
            List<String> generatableOutputConnections = stepVis.getStepManager().getStepOutgoingConnectionTypes();
            // iterate over the outgoing connections and paint
            // with color according to what is present in
            // generatableOutputConnections
            int count = 0;
            for (Entry<String, List<StepManager>> e : outConns.entrySet()) {
                String connName = e.getKey();
                List<StepManager> connectedSteps = e.getValue();
                if (connectedSteps.size() > 0) {
                    int sX = stepVis.getX();
                    int sY = stepVis.getY();
                    int sWidth = stepVis.getWidth();
                    int sHeight = stepVis.getHeight();
                    for (StepManager target : connectedSteps) {
                        StepManagerImpl targetI = (StepManagerImpl) target;
                        int tX = targetI.getStepVisual().getX();
                        int tY = targetI.getStepVisual().getY();
                        int tWidth = targetI.getStepVisual().getWidth();
                        int tHeight = targetI.getStepVisual().getHeight();
                        Point bestSourcePoint = stepVis.getClosestConnectorPoint(new Point(tX + (tWidth / 2), tY + (tHeight / 2)));
                        Point bestTargetPoint = targetI.getStepVisual().getClosestConnectorPoint(new Point(sX + (sWidth / 2), sY + (sHeight / 2)));
                        gx.setColor(Color.red);
                        boolean active = generatableOutputConnections == null || !generatableOutputConnections.contains(connName) ? false : true;
                        if (!active) {
                            gx.setColor(Color.gray);
                        }
                        gx.drawLine((int) bestSourcePoint.getX(), (int) bestSourcePoint.getY(), (int) bestTargetPoint.getX(), (int) bestTargetPoint.getY());
                        // paint an arrow head
                        double angle;
                        try {
                            double a = (bestSourcePoint.getY() - bestTargetPoint.getY()) / (bestSourcePoint.getX() - bestTargetPoint.getX());
                            angle = Math.atan(a);
                        } catch (Exception ex) {
                            angle = Math.PI / 2;
                        }
                        Point arrowstart = new Point(bestTargetPoint.x, bestTargetPoint.y);
                        Point arrowoffset = new Point((int) (7 * Math.cos(angle)), (int) (7 * Math.sin(angle)));
                        Point arrowend;
                        if (bestSourcePoint.getX() >= bestTargetPoint.getX()) {
                            arrowend = new Point(arrowstart.x + arrowoffset.x, arrowstart.y + arrowoffset.y);
                        } else {
                            arrowend = new Point(arrowstart.x - arrowoffset.x, arrowstart.y - arrowoffset.y);
                        }
                        int[] xs = { arrowstart.x, arrowend.x + (int) (7 * Math.cos(angle + (Math.PI / 2))), arrowend.x + (int) (7 * Math.cos(angle - (Math.PI / 2))) };
                        int[] ys = { arrowstart.y, arrowend.y + (int) (7 * Math.sin(angle + (Math.PI / 2))), arrowend.y + (int) (7 * Math.sin(angle - (Math.PI / 2))) };
                        gx.fillPolygon(xs, ys, 3);
                        // paint the connection name
                        int midx = (int) bestSourcePoint.getX();
                        midx += (int) ((bestTargetPoint.getX() - bestSourcePoint.getX()) / 2);
                        int midy = (int) bestSourcePoint.getY();
                        midy += (int) ((bestTargetPoint.getY() - bestSourcePoint.getY()) / 2) - 2;
                        gx.setColor((active) ? Color.blue : Color.gray);
                        // between the source and target
                        if (m_visLayout.previousConn(outConns, targetI, count)) {
                            midy -= 15;
                        }
                        gx.drawString(connName, midx, midy);
                    }
                }
                count++;
            }
        }
    }
}
