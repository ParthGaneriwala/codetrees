public void testDivisionOperator() throws Exception {
    double[] values = { 0.0, 1.0, 2.0, 3.0, 100.0, 1000.0, 1e8, 1e-8, 0.1, -0.0, -1.0, -2.0, -3.0, -100.0, -1000.0, -1e8, -1e-8, -0.1 };
    for (double left : values) {
        // neutral element:
        assertTrue(left == evaluateDouble(String.format("%.20f / 1.0", left)));
        for (double right : values) {
            // basics
            if (left == 0.0 && right == 0.0)
                // NaN == NaN always evaluates to false
                continue;
            assertTrue(left / right == evaluateDouble(String.format("%.20f / %.20f", left, right)));
        }
    }
    double[] safe_values = { 0.0, 1.0, 2.0, -0.0, -1.0, -2.0 };
    for (double first : safe_values) {
        for (double second : safe_values) {
            for (double third : safe_values) {
                if (first == 0.0 && (second == 0.0 || third == 0.0))
                    // NaN == NaN always evaluates to false
                    continue;
                // left associativity
                try {
                    assertTrue(evaluateDouble(String.format("%.20f / %.20f / %.20f", first, second, third)) == evaluateDouble(String.format("(%.20f / %.20f) / %.20f", first, second, third)));
                } catch (AssertionFailedError e) {
                    System.out.println("failed");
                    assertTrue(evaluateDouble(String.format("%.20f / %.20f / %.20f", first, second, third)) == evaluateDouble(String.format("(%.20f / %.20f) / %.20f", first, second, third)));
                }
            }
        }
    }
    // basic double semantics
    // NaN / v == NaN
    assertTrue(Double.isNaN(evaluateDouble("sqrt(-1) / 1.0")));
    // NaN / NaN == NaN
    assertTrue(Double.isNaN(evaluateDouble("sqrt(-1) / sqrt(-1.0)")));
    // overflow -> +inf
    assertTrue(Double.isInfinite(evaluateDouble(String.format("%.20f + %.20f", Double.MAX_VALUE, Double.MAX_VALUE))));
    // inf / inf == NaN
    assertTrue(Double.isNaN(evaluateDouble("(1/0) / (1/0)")));
}
