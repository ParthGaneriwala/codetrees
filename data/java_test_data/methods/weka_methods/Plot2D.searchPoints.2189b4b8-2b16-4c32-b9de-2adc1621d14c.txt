public void searchPoints(int x, int y, final boolean newFrame) {
    if (m_masterPlot.m_plotInstances != null) {
        int longest = 0;
        for (int j = 0; j < m_masterPlot.m_plotInstances.numAttributes(); j++) {
            if (m_masterPlot.m_plotInstances.attribute(j).name().length() > longest) {
                longest = m_masterPlot.m_plotInstances.attribute(j).name().length();
            }
        }
        StringBuffer insts = new StringBuffer();
        Vector<Instances> data = new Vector<Instances>();
        for (int jj = 0; jj < m_plots.size(); jj++) {
            PlotData2D temp_plot = (m_plots.get(jj));
            data.add(new Instances(temp_plot.m_plotInstances, 0));
            for (int i = 0; i < temp_plot.m_plotInstances.numInstances(); i++) {
                if (temp_plot.m_pointLookup[i][0] != Double.NEGATIVE_INFINITY) {
                    double px = temp_plot.m_pointLookup[i][0] + temp_plot.m_pointLookup[i][2];
                    double py = temp_plot.m_pointLookup[i][1] + temp_plot.m_pointLookup[i][3];
                    // double size = temp_plot.m_pointLookup[i][2];
                    double size = temp_plot.m_shapeSize[i];
                    if ((x >= px - size) && (x <= px + size) && (y >= py - size) && (y <= py + size)) {
                        {
                            data.get(jj).add((Instance) temp_plot.m_plotInstances.instance(i).copy());
                            insts.append("\nPlot : " + temp_plot.m_plotName + "\nInstance: " + (i + 1) + "\n");
                            if (temp_plot.m_plotInstances.instance(i).weight() != 1.0) {
                                insts.append("Weight : " + temp_plot.m_plotInstances.instance(i).weight() + "\n");
                            }
                            for (int j = 0; j < temp_plot.m_plotInstances.numAttributes(); j++) {
                                for (int k = 0; k < (longest - temp_plot.m_plotInstances.attribute(j).name().length()); k++) {
                                    insts.append(" ");
                                }
                                insts.append(temp_plot.m_plotInstances.attribute(j).name());
                                insts.append(" : ");
                                if (temp_plot.m_plotInstances.instance(i).isMissing(j)) {
                                    insts.append("Missing");
                                } else if (temp_plot.m_plotInstances.attribute(j).isNominal() || temp_plot.m_plotInstances.attribute(j).isString()) {
                                    insts.append(temp_plot.m_plotInstances.attribute(j).value((int) temp_plot.m_plotInstances.instance(i).value(j)));
                                } else {
                                    insts.append(temp_plot.m_plotInstances.instance(i).value(j));
                                }
                                insts.append("\n");
                            }
                        }
                    }
                }
            }
        }
        // remove datasets that contain no instances
        int i = 0;
        while (data.size() > i) {
            if (data.get(i).numInstances() == 0) {
                data.remove(i);
            } else {
                i++;
            }
        }
        if (insts.length() > 0) {
            // Pop up a new frame
            if (newFrame || m_InstanceInfo == null) {
                try {
                    final JFrame jf = (JFrame) m_InstanceInfoFrameClass.newInstance();
                    ((InstanceInfo) jf).setInfoText(insts.toString());
                    ((InstanceInfo) jf).setInfoData(data);
                    final JFrame testf = m_InstanceInfo;
                    jf.addWindowListener(new WindowAdapter() {

                        @Override
                        public void windowClosing(WindowEvent e) {
                            if (!newFrame || testf == null) {
                                m_InstanceInfo = null;
                            }
                            jf.dispose();
                        }
                    });
                    jf.setVisible(true);
                    if (m_InstanceInfo == null) {
                        m_InstanceInfo = jf;
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else {
                // Overwrite info in existing frame
                ((InstanceInfo) m_InstanceInfo).setInfoText(insts.toString());
                ((InstanceInfo) m_InstanceInfo).setInfoData(data);
            }
        }
    }
}
