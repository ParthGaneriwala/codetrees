@Override
@SuppressWarnings("unchecked")
protected void layoutEditor() {
    initialize();
    JPanel controlHolder = new JPanel();
    controlHolder.setLayout(new BorderLayout());
    // input source names
    List<String> connected = ((Join) getStepToEdit()).getConnectedInputNames();
    String firstName = connected.get(0) == null ? "<not connected>" : connected.get(0);
    String secondName = connected.get(1) == null ? "<not connected>" : connected.get(1);
    JPanel firstSourceP = new JPanel();
    firstSourceP.setLayout(new BorderLayout());
    firstSourceP.add(new JLabel("First input ", SwingConstants.RIGHT), BorderLayout.CENTER);
    firstSourceP.add(new JLabel(firstName, SwingConstants.LEFT), BorderLayout.EAST);
    JPanel secondSourceP = new JPanel();
    secondSourceP.setLayout(new BorderLayout());
    secondSourceP.add(new JLabel("Second input ", SwingConstants.RIGHT), BorderLayout.CENTER);
    secondSourceP.add(new JLabel(secondName, SwingConstants.LEFT), BorderLayout.EAST);
    JPanel sourcePHolder = new JPanel();
    sourcePHolder.setBorder(BorderFactory.createEmptyBorder(0, 5, 0, 5));
    sourcePHolder.setLayout(new BorderLayout());
    sourcePHolder.add(firstSourceP, BorderLayout.NORTH);
    sourcePHolder.add(secondSourceP, BorderLayout.SOUTH);
    controlHolder.add(sourcePHolder, BorderLayout.NORTH);
    m_firstList.setVisibleRowCount(5);
    m_secondList.setVisibleRowCount(5);
    m_firstKeyFields.setEditable(true);
    JPanel listOneP = new JPanel();
    m_deleteOneBut.setEnabled(false);
    listOneP.setLayout(new BorderLayout());
    JPanel butOneHolder = new JPanel();
    butOneHolder.setLayout(new GridLayout(1, 0));
    butOneHolder.add(m_addOneBut);
    butOneHolder.add(m_deleteOneBut);
    butOneHolder.add(m_upOneBut);
    butOneHolder.add(m_downOneBut);
    m_upOneBut.setEnabled(false);
    m_downOneBut.setEnabled(false);
    JPanel fieldsAndButsOne = new JPanel();
    fieldsAndButsOne.setLayout(new BorderLayout());
    fieldsAndButsOne.add(m_firstKeyFields, BorderLayout.NORTH);
    fieldsAndButsOne.add(butOneHolder, BorderLayout.SOUTH);
    listOneP.add(fieldsAndButsOne, BorderLayout.NORTH);
    JScrollPane js1 = new JScrollPane(m_firstList);
    js1.setBorder(BorderFactory.createTitledBorder("First input key fields"));
    listOneP.add(js1, BorderLayout.CENTER);
    controlHolder.add(listOneP, BorderLayout.WEST);
    m_secondKeyFields.setEditable(true);
    JPanel listTwoP = new JPanel();
    m_deleteTwoBut.setEnabled(false);
    listTwoP.setLayout(new BorderLayout());
    JPanel butTwoHolder = new JPanel();
    butTwoHolder.setLayout(new GridLayout(1, 0));
    butTwoHolder.add(m_addTwoBut);
    butTwoHolder.add(m_deleteTwoBut);
    butTwoHolder.add(m_upTwoBut);
    butTwoHolder.add(m_downTwoBut);
    m_upTwoBut.setEnabled(false);
    m_downTwoBut.setEnabled(false);
    JPanel fieldsAndButsTwo = new JPanel();
    fieldsAndButsTwo.setLayout(new BorderLayout());
    fieldsAndButsTwo.add(m_secondKeyFields, BorderLayout.NORTH);
    fieldsAndButsTwo.add(butTwoHolder, BorderLayout.SOUTH);
    listTwoP.add(fieldsAndButsTwo, BorderLayout.NORTH);
    JScrollPane js2 = new JScrollPane(m_secondList);
    js2.setBorder(BorderFactory.createTitledBorder("Second input key fields"));
    listTwoP.add(js2, BorderLayout.CENTER);
    controlHolder.add(listTwoP, BorderLayout.EAST);
    add(controlHolder, BorderLayout.CENTER);
    // setup incoming atts combos
    try {
        if (((Join) getStepToEdit()).getFirstInputStructure() != null) {
            m_firstKeyFields.removeAllItems();
            Instances incoming = ((Join) getStepToEdit()).getFirstInputStructure();
            for (int i = 0; i < incoming.numAttributes(); i++) {
                m_firstKeyFields.addItem(incoming.attribute(i).name());
            }
        }
        if (((Join) getStepToEdit()).getSecondInputStructure() != null) {
            m_secondKeyFields.removeAllItems();
            Instances incoming = ((Join) getStepToEdit()).getSecondInputStructure();
            for (int i = 0; i < incoming.numAttributes(); i++) {
                m_secondKeyFields.addItem(incoming.attribute(i).name());
            }
        }
    } catch (WekaException ex) {
        showErrorDialog(ex);
    }
    m_firstList.addListSelectionListener(new ListSelectionListener() {

        @Override
        public void valueChanged(ListSelectionEvent e) {
            if (!e.getValueIsAdjusting()) {
                if (!m_deleteOneBut.isEnabled()) {
                    m_deleteOneBut.setEnabled(true);
                }
            }
        }
    });
    m_secondList.addListSelectionListener(new ListSelectionListener() {

        @Override
        public void valueChanged(ListSelectionEvent e) {
            if (!e.getValueIsAdjusting()) {
                if (!m_deleteTwoBut.isEnabled()) {
                    m_deleteTwoBut.setEnabled(true);
                }
            }
        }
    });
    m_addOneBut.addActionListener(new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent e) {
            if (m_firstKeyFields.getSelectedItem() != null && m_firstKeyFields.getSelectedItem().toString().length() > 0) {
                m_firstListModel.addElement(m_firstKeyFields.getSelectedItem().toString());
                if (m_firstListModel.size() > 1) {
                    m_upOneBut.setEnabled(true);
                    m_downOneBut.setEnabled(true);
                }
            }
        }
    });
    m_addTwoBut.addActionListener(new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent e) {
            if (m_secondKeyFields.getSelectedItem() != null && m_secondKeyFields.getSelectedItem().toString().length() > 0) {
                m_secondListModel.addElement(m_secondKeyFields.getSelectedItem().toString());
                if (m_secondListModel.size() > 1) {
                    m_upTwoBut.setEnabled(true);
                    m_downTwoBut.setEnabled(true);
                }
            }
        }
    });
    m_deleteOneBut.addActionListener(new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent e) {
            int selected = m_firstList.getSelectedIndex();
            if (selected >= 0) {
                m_firstListModel.remove(selected);
            }
            if (m_firstListModel.size() <= 1) {
                m_upOneBut.setEnabled(false);
                m_downOneBut.setEnabled(false);
            }
        }
    });
    m_deleteTwoBut.addActionListener(new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent e) {
            int selected = m_secondList.getSelectedIndex();
            if (selected >= 0) {
                m_secondListModel.remove(selected);
            }
            if (m_secondListModel.size() <= 1) {
                m_upTwoBut.setEnabled(false);
                m_downTwoBut.setEnabled(false);
            }
        }
    });
    m_upOneBut.addActionListener(new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent e) {
            JListHelper.moveUp(m_firstList);
            ;
        }
    });
    m_upTwoBut.addActionListener(new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent e) {
            JListHelper.moveUp(m_secondList);
        }
    });
    m_downOneBut.addActionListener(new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent e) {
            JListHelper.moveDown(m_firstList);
        }
    });
    m_downTwoBut.addActionListener(new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent e) {
            JListHelper.moveDown(m_secondList);
            ;
        }
    });
}
