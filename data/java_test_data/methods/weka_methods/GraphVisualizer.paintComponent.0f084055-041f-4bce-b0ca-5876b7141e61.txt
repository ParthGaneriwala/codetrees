@Override
public void paintComponent(Graphics gr) {
    Graphics2D g = (Graphics2D) gr;
    RenderingHints rh = new RenderingHints(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
    rh.put(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_SPEED);
    g.setRenderingHints(rh);
    g.scale(scale, scale);
    Rectangle r = g.getClipBounds();
    g.clearRect(r.x, r.y, r.width, r.height);
    // g.setColor(this.getBackground());
    // g.fillRect(0, 0, width+5, height+5);
    int x = 0, y = 0;
    Dimension d = this.getPreferredSize();
    // if the display area is larger than the graph
    if (d.width < this.getWidth()) {
        x = (int) ((x + this.getWidth() / 2 - d.width / 2) / scale);
    }
    if (d.height < this.getHeight()) {
        y = (int) ((y + this.getHeight() / 2 - d.height / 2) / scale);
    }
    for (int index = 0; index < m_nodes.size(); index++) {
        GraphNode n = m_nodes.get(index);
        if (n.nodeType == NORMAL) {
            g.setColor(this.getBackground().darker().darker());
            g.fillOval(x + n.x + paddedNodeWidth - nodeWidth - (paddedNodeWidth - nodeWidth) / 2, y + n.y, nodeWidth, nodeHeight);
            g.setColor(Color.white);
            // if any can fit in node's current width
            if (fm.stringWidth(n.lbl) <= nodeWidth) {
                g.drawString(n.lbl, x + n.x + paddedNodeWidth / 2 - fm.stringWidth(n.lbl) / 2, y + n.y + nodeHeight / 2 + fm.getHeight() / 2 - 2);
            } else if (fm.stringWidth(n.ID) <= nodeWidth) {
                g.drawString(n.ID, x + n.x + paddedNodeWidth / 2 - fm.stringWidth(n.ID) / 2, y + n.y + nodeHeight / 2 + fm.getHeight() / 2 - 2);
            } else if (fm.stringWidth(Integer.toString(index)) <= nodeWidth) {
                g.drawString(Integer.toString(index), x + n.x + paddedNodeWidth / 2 - fm.stringWidth(Integer.toString(index)) / 2, y + n.y + nodeHeight / 2 + fm.getHeight() / 2 - 2);
            }
            g.setColor(Color.black);
        } else {
            // g.draw( new java.awt.geom.QuadCurve2D.Double(n.x+paddedNodeWidth/2,
            // n.y,
            // n.x+paddedNodeWidth-nodeSize
            // -(paddedNodeWidth-nodeSize)/2,
            // n.y+nodeHeight/2,
            // n.x+paddedNodeWidth/2, n.y+nodeHeight) );
            g.drawLine(x + n.x + paddedNodeWidth / 2, y + n.y, x + n.x + paddedNodeWidth / 2, y + n.y + nodeHeight);
        }
        GraphNode n2;
        int x1, y1, x2, y2;
        // including reversed and double ones
        if (n.edges != null) {
            for (int[] edge : n.edges) {
                if (edge[1] > 0) {
                    // m_nodes.get(k);
                    n2 = m_nodes.get(edge[0]);
                    // System.out.println("  -->to "+n2.lbl);
                    x1 = n.x + paddedNodeWidth / 2;
                    y1 = n.y + nodeHeight;
                    x2 = n2.x + paddedNodeWidth / 2;
                    y2 = n2.y;
                    g.drawLine(x + x1, y + y1, x + x2, y + y2);
                    if (edge[1] == DIRECTED) {
                        if (n2.nodeType == GraphConstants.NORMAL) {
                            drawArrow(g, x + x1, y + y1, x + x2, y + y2);
                        }
                    } else if (edge[1] == REVERSED) {
                        if (n.nodeType == NORMAL) {
                            drawArrow(g, x + x2, y + y2, x + x1, y + y1);
                        }
                    } else if (edge[1] == DOUBLE) {
                        if (n.nodeType == NORMAL) {
                            drawArrow(g, x + x2, y + y2, x + x1, y + y1);
                        }
                        if (n2.nodeType == NORMAL) {
                            drawArrow(g, x + x1, y + y1, x + x2, y + y2);
                        }
                    }
                }
            }
        }
    }
}
