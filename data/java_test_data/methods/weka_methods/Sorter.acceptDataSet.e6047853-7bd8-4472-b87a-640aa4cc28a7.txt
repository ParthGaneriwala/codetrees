@Override
public void acceptDataSet(DataSetEvent e) {
    m_busy = true;
    m_stopRequested.set(false);
    if (m_log != null && e.getDataSet().numInstances() > 0) {
        m_log.statusMessage(statusMessagePrefix() + "Sorting batch...");
    }
    if (e.isStructureOnly()) {
        // nothing to sort!
        // just notify listeners of structure
        DataSetEvent d = new DataSetEvent(this, e.getDataSet());
        notifyDataListeners(d);
        m_busy = false;
        return;
    }
    try {
        init(new Instances(e.getDataSet(), 0));
    } catch (IllegalArgumentException ex) {
        if (m_log != null) {
            String message = "ERROR: There is a problem with the incoming instance structure";
            // m_log.statusMessage(statusMessagePrefix() + message
            // + " - see log for details");
            // m_log.logMessage(statusMessagePrefix() + message + " :"
            // + ex.getMessage());
            stopWithErrorMessage(message, ex);
            m_busy = false;
            return;
        }
    }
    List<InstanceHolder> instances = new ArrayList<InstanceHolder>();
    for (int i = 0; i < e.getDataSet().numInstances(); i++) {
        InstanceHolder h = new InstanceHolder();
        h.m_instance = e.getDataSet().instance(i);
        instances.add(h);
    }
    Collections.sort(instances, m_sortComparator);
    Instances output = new Instances(e.getDataSet(), 0);
    for (int i = 0; i < instances.size(); i++) {
        output.add(instances.get(i).m_instance);
    }
    DataSetEvent d = new DataSetEvent(this, output);
    notifyDataListeners(d);
    if (m_log != null) {
        m_log.statusMessage(statusMessagePrefix() + "Finished.");
    }
    m_busy = false;
}
