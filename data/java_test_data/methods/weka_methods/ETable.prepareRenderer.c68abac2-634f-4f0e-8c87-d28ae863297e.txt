@Override
public Component prepareRenderer(TableCellRenderer renderer, int row, int column) {
    Component c = super.prepareRenderer(renderer, row, column);
    boolean focused = hasFocus();
    boolean selected = isCellSelected(row, column);
    if (selected) {
        if (System.getProperty("os.name").contains("Mac") && focused == false) {
            // Native Mac OS renders the selection differently if the table doesn't
            // have the focus.
            // The Mac OS LAF doesn't imitate this for us.
            c.setBackground(MAC_UNFOCUSED_SELECTED_CELL_BACKGROUND_COLOR);
            c.setForeground(UIManager.getColor("Table.foreground"));
        } else {
            c.setBackground(UIManager.getColor("Table.selectionBackground"));
            c.setForeground(UIManager.getColor("Table.selectionForeground"));
        }
    } else {
        // Outside of selected rows, we want to alternate the background color.
        c.setBackground(colorForRow(row));
        c.setForeground(UIManager.getColor("Table.foreground"));
    }
    if (c instanceof JComponent) {
        JComponent jc = (JComponent) c;
        // when it's being used as a table cell renderer.
        if (UIManager.getLookAndFeel().getClass().getName().contains("GTK") && c instanceof JCheckBox) {
            jc.setOpaque(true);
        }
        if (getCellSelectionEnabled() == false && isEditing() == false) {
            if (System.getProperty("os.name").contains("Mac")) {
                // Native Mac OS doesn't draw a border on the selected cell.
                // It does however draw a horizontal line under the whole row, and a
                // vertical line separating each column.
                fixMacOsCellRendererBorder(jc, selected, focused);
            } else {
                // FIXME: doesn't Windows have row-wide selection focus?
                // Hide the cell focus.
                jc.setBorder(null);
            }
        }
        initToolTip(jc, row, column);
    }
    return c;
}
