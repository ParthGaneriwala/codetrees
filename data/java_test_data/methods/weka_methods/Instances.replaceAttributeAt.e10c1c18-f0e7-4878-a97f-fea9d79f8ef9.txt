/**
 * Replaces the attribute at the given position (0 to
 * numAttributes()) with the given attribute and sets all its values to
 * be missing. Shallow copies the given attribute before it is
 * inserted. Creates a fresh list to hold the old and new
 * attribute objects.
 *
 * @param att the attribute to be inserted
 * @param position the attribute's position (position starts with 0)
 * @throws IllegalArgumentException if the given index is out of range
 */
// @ requires 0 <= position;
public void replaceAttributeAt(/* @non_null@ */
Attribute att, int position) {
    if ((position < 0) || (position > m_Attributes.size())) {
        throw new IllegalArgumentException("Index out of range");
    }
    // Does the new attribute have a different name?
    if (!att.name().equals(m_Attributes.get(position).name())) {
        // Need to check if attribute name already exists
        Attribute candidate = attribute(att.name());
        if ((candidate != null) && (position != candidate.index())) {
            throw new IllegalArgumentException("Attribute name '" + att.name() + "' already in use at position #" + attribute(att.name()).index());
        }
    }
    att = (Attribute) att.copy();
    att.setIndex(position);
    ArrayList<Attribute> newList = new ArrayList<Attribute>(m_Attributes.size());
    HashMap<String, Integer> newMap = new HashMap<String, Integer>((int) ((m_Attributes.size() + 1) / 0.75));
    for (int i = 0; i < position; i++) {
        Attribute oldAtt = m_Attributes.get(i);
        newList.add(oldAtt);
        newMap.put(oldAtt.name(), i);
    }
    newList.add(att);
    newMap.put(att.name(), position);
    for (int i = position + 1; i < m_Attributes.size(); i++) {
        Attribute newAtt = (Attribute) m_Attributes.get(i);
        newList.add(newAtt);
        newMap.put(newAtt.name(), i);
    }
    m_Attributes = newList;
    m_NamesToAttributeIndices = newMap;
    for (int i = 0; i < numInstances(); i++) {
        instance(i).setDataset(null);
        instance(i).setMissing(position);
        instance(i).setDataset(this);
    }
}
