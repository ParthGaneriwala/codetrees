@Override
public PackageConstraint checkConstraint(PackageConstraint target) throws Exception {
    if (m_constraint == null) {
        throw new Exception("[VersionPackageConstraint] No constraint has been set!");
    }
    // delegate to VersionRangePackageConstraint if necessary
    if (target instanceof VersionRangePackageConstraint) {
        return target.checkConstraint(this);
    }
    String targetVersion = target.getPackage().getPackageMetaDataElement(VERSION_KEY).toString();
    String thisVersion = m_thePackage.getPackageMetaDataElement(VERSION_KEY).toString();
    VersionComparison comp = compare(thisVersion, targetVersion);
    if (comp == VersionComparison.EQUAL) {
        // return this if the constraints are the same for both this and target
        if (m_constraint == ((VersionPackageConstraint) target).getVersionComparison()) {
            return this;
        } else if (m_constraint == VersionComparison.GREATERTHAN && (((VersionPackageConstraint) target).getVersionComparison() == VersionComparison.GREATERTHAN || ((VersionPackageConstraint) target).getVersionComparison() == VersionComparison.GREATERTHANOREQUAL)) {
            // satisfies both
            return this;
        } else if ((m_constraint == VersionComparison.GREATERTHANOREQUAL || m_constraint == VersionComparison.GREATERTHAN) && ((VersionPackageConstraint) target).getVersionComparison() == VersionComparison.GREATERTHAN) {
            // satisfies both
            return target;
        }
        // can't satisfy
        return null;
    } else {
        // target constraint >/>=
        if (((VersionPackageConstraint) target).getVersionComparison() == VersionComparison.GREATERTHAN || ((VersionPackageConstraint) target).getVersionComparison() == VersionComparison.GREATERTHANOREQUAL) {
            if (m_constraint == VersionComparison.EQUAL || m_constraint == VersionComparison.GREATERTHAN || m_constraint == VersionComparison.GREATERTHANOREQUAL) {
                // return the higher of the two versions
                if (comp == VersionComparison.GREATERTHAN) {
                    return this;
                } else {
                    return target;
                }
            }
            // can't satisfy
            return null;
        // target constraint </<=
        } else if (((VersionPackageConstraint) target).getVersionComparison() == VersionComparison.LESSTHAN || ((VersionPackageConstraint) target).getVersionComparison() == VersionComparison.LESSTHANOREQUAL) {
            if (m_constraint == VersionComparison.EQUAL || m_constraint == VersionComparison.LESSTHAN || m_constraint == VersionComparison.LESSTHANOREQUAL) {
                // return the lower of the two versions
                if (comp == VersionComparison.GREATERTHAN) {
                    // satisfies both
                    return target;
                } else {
                    return this;
                }
            }
            // can't satisfy
            return null;
        }
        // can't satisfy
        return null;
    // Could also be compatible in the case where
    // our constraint is < and target is > (but would need to implement a
    // y < x < z type of version constraint
    }
}
