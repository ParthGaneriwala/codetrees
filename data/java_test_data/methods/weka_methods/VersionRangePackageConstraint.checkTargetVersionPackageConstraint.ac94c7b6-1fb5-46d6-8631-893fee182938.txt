protected PackageConstraint checkTargetVersionPackageConstraint(VersionPackageConstraint target) throws Exception {
    VersionPackageConstraint.VersionComparison targetComp = target.getVersionComparison();
    String targetVersion = target.getPackage().getPackageMetaDataElement(VersionPackageConstraint.VERSION_KEY).toString();
    VersionPackageConstraint.VersionComparison lowerComp = VersionPackageConstraint.compare(targetVersion, m_lowerBound);
    VersionPackageConstraint.VersionComparison upperComp = VersionPackageConstraint.compare(targetVersion, m_upperBound);
    boolean lowerCheck = false;
    boolean upperCheck = false;
    String coveringLowerBound = null;
    String coveringUpperBound = null;
    VersionPackageConstraint.VersionComparison coveringLowerConstraint = null;
    VersionPackageConstraint.VersionComparison coveringUpperConstraint = null;
    // equals is easy
    if (targetComp == VersionPackageConstraint.VersionComparison.EQUAL) {
        // is the least restrictive constraint that covers both
        if (checkConstraint(target.getPackage())) {
            return target;
        } else {
            // incompatible
            return null;
        }
    } else {
        if (m_boundOr) {
            // lower bound < case
            if (m_lowerConstraint == VersionPackageConstraint.VersionComparison.LESSTHAN) {
                if (lowerComp == VersionPackageConstraint.VersionComparison.EQUAL || lowerComp == VersionPackageConstraint.VersionComparison.GREATERTHAN) {
                    if (targetComp == VersionPackageConstraint.VersionComparison.GREATERTHAN || targetComp == VersionPackageConstraint.VersionComparison.GREATERTHANOREQUAL) {
                        // not compatible with our lower bound
                        lowerCheck = false;
                    } else {
                        lowerCheck = true;
                        // adjust the bounds
                        coveringLowerBound = m_lowerBound;
                        coveringLowerConstraint = m_lowerConstraint;
                    }
                } else if (lowerComp == VersionPackageConstraint.VersionComparison.LESSTHAN) {
                    lowerCheck = true;
                    coveringLowerBound = targetVersion;
                    coveringLowerConstraint = targetComp;
                    if (targetComp == VersionPackageConstraint.VersionComparison.LESSTHAN || targetComp == VersionPackageConstraint.VersionComparison.LESSTHANOREQUAL) {
                        // same direction as our lower
                        coveringUpperBound = null;
                    // constraint (so no upper bound)
                    } else {
                        // target's comparison is > or >= (new upper bound = our lower
                        // bound)
                        coveringUpperBound = m_lowerBound;
                        coveringUpperConstraint = m_lowerConstraint;
                    }
                }
            } else {
                // lower bound <= case
                if (lowerComp == VersionPackageConstraint.VersionComparison.GREATERTHAN) {
                    if (targetComp == VersionPackageConstraint.VersionComparison.GREATERTHAN || targetComp == VersionPackageConstraint.VersionComparison.GREATERTHANOREQUAL) {
                        // not compatible with our lower bound
                        lowerCheck = false;
                    } else {
                        lowerCheck = true;
                        // adjust bounds
                        coveringLowerBound = m_lowerBound;
                        coveringLowerConstraint = m_lowerConstraint;
                    }
                } else if (lowerComp == VersionPackageConstraint.VersionComparison.EQUAL) {
                    // can't be >
                    if (targetComp == VersionPackageConstraint.VersionComparison.GREATERTHAN) {
                        lowerCheck = false;
                    } else {
                        // target constraint is < or <=
                        lowerCheck = true;
                        coveringLowerBound = targetVersion;
                        coveringLowerConstraint = targetComp;
                        // same direction as our lower bound
                        coveringUpperBound = null;
                    // (so no upper bound)
                    }
                } else {
                    // target version is < or = to our lower bound
                    lowerCheck = true;
                    coveringLowerBound = targetVersion;
                    coveringLowerConstraint = targetComp;
                    if (targetComp == VersionPackageConstraint.VersionComparison.LESSTHAN || targetComp == VersionPackageConstraint.VersionComparison.LESSTHANOREQUAL) {
                        // same direction as our lower
                        coveringUpperBound = null;
                    // constraint (so no upper bound)
                    } else {
                        // target's comparison is > or >= (new upper bound = our lower
                        // bound)
                        coveringUpperBound = m_lowerBound;
                        coveringUpperConstraint = m_lowerConstraint;
                    }
                }
            }
            // check against our upper bound (if necessary)
            if (!lowerCheck) {
                // upper bound > case
                if (m_upperConstraint == VersionPackageConstraint.VersionComparison.GREATERTHAN) {
                    if (upperComp == VersionPackageConstraint.VersionComparison.EQUAL || upperComp == VersionPackageConstraint.VersionComparison.LESSTHAN) {
                        if (targetComp == VersionPackageConstraint.VersionComparison.LESSTHAN || targetComp == VersionPackageConstraint.VersionComparison.LESSTHANOREQUAL) {
                            // not compatible with our upper bound
                            upperCheck = false;
                        } else {
                            lowerCheck = true;
                            // adjust the bounds
                            coveringUpperBound = m_upperBound;
                            coveringUpperConstraint = m_upperConstraint;
                        }
                    } else if (upperComp == VersionPackageConstraint.VersionComparison.GREATERTHAN) {
                        upperCheck = true;
                        coveringUpperBound = targetVersion;
                        coveringUpperConstraint = targetComp;
                        if (targetComp == VersionPackageConstraint.VersionComparison.GREATERTHAN || targetComp == VersionPackageConstraint.VersionComparison.GREATERTHANOREQUAL) {
                            // same direction as our upper
                            coveringLowerBound = null;
                        // constraint (so no lower bound)
                        } else {
                            // target's comparison is < or <= (new lower bound = our upper
                            // bound)
                            coveringLowerBound = m_upperBound;
                            coveringLowerConstraint = m_upperConstraint;
                        }
                    }
                } else {
                    // upper bound >= case
                    if (upperComp == VersionPackageConstraint.VersionComparison.LESSTHAN) {
                        if (targetComp == VersionPackageConstraint.VersionComparison.LESSTHAN || targetComp == VersionPackageConstraint.VersionComparison.LESSTHANOREQUAL) {
                            // not compatible with our upper bound
                            upperCheck = false;
                        } else {
                            upperCheck = true;
                            // adjust bounds
                            coveringUpperBound = m_upperBound;
                            coveringUpperConstraint = m_upperConstraint;
                        }
                    } else if (upperComp == VersionPackageConstraint.VersionComparison.EQUAL) {
                        // can't be <
                        if (targetComp == VersionPackageConstraint.VersionComparison.LESSTHAN) {
                            upperCheck = false;
                        } else {
                            // target constraint is > or >=
                            upperCheck = true;
                            coveringUpperBound = targetVersion;
                            coveringUpperConstraint = targetComp;
                            // same direction as our upper bound
                            coveringLowerBound = null;
                        // (so no lower bound)
                        }
                    } else {
                        // target version is > or = to our upper bound
                        upperCheck = true;
                        coveringUpperBound = targetVersion;
                        coveringUpperConstraint = targetComp;
                        if (targetComp == VersionPackageConstraint.VersionComparison.GREATERTHAN || targetComp == VersionPackageConstraint.VersionComparison.GREATERTHANOREQUAL) {
                            // same direction as our upper
                            coveringLowerBound = null;
                        // constraint (so no lower bound)
                        } else {
                            // target's comparison is < or <= (new lower bound = our upper
                            // bound)
                            coveringLowerBound = m_upperBound;
                            coveringLowerConstraint = m_upperConstraint;
                        }
                    }
                }
            }
            if (!lowerCheck && !upperCheck) {
                // this shouldn't be possible
                throw new Exception("[VersionRangePackageConstraint] This shouldn't be possible!!");
            }
            if (coveringLowerBound != null && coveringUpperBound != null) {
                VersionRangePackageConstraint result = new VersionRangePackageConstraint(getPackage());
                result.setRangeConstraint(coveringLowerBound, coveringLowerConstraint, coveringUpperBound, coveringUpperConstraint);
                return result;
            }
            String newVersionNumber = (coveringLowerBound != null) ? coveringLowerBound : coveringUpperBound;
            VersionPackageConstraint.VersionComparison newConstraint = (coveringLowerConstraint != null) ? coveringLowerConstraint : coveringUpperConstraint;
            Package p = (Package) getPackage().clone();
            p.setPackageMetaDataElement(VersionPackageConstraint.VERSION_KEY, newVersionNumber);
            VersionPackageConstraint result = new VersionPackageConstraint(p);
            result.setVersionConstraint(newConstraint);
            return result;
        } else // end bounded OR case //////////
        {
            // bounded AND case
            if (lowerComp == VersionPackageConstraint.VersionComparison.LESSTHAN) {
                if (targetComp == VersionPackageConstraint.VersionComparison.LESSTHAN || targetComp == VersionPackageConstraint.VersionComparison.LESSTHANOREQUAL || targetComp == VersionPackageConstraint.VersionComparison.EQUAL) {
                    // outside of our range and inequality is in the wrong direction
                    lowerCheck = false;
                } else {
                    // outside our range, but inequality in right direction - our range
                    // satisfies both
                    lowerCheck = true;
                    coveringLowerBound = m_lowerBound;
                    coveringLowerConstraint = m_lowerConstraint;
                    coveringUpperBound = m_upperBound;
                    coveringUpperConstraint = m_upperConstraint;
                }
            } else if (lowerComp == VersionPackageConstraint.VersionComparison.EQUAL) {
                // satisfiable if target comp is > or >=
                if (targetComp == VersionPackageConstraint.VersionComparison.GREATERTHANOREQUAL || targetComp == VersionPackageConstraint.VersionComparison.GREATERTHAN) {
                    lowerCheck = true;
                    coveringLowerBound = m_lowerBound;
                    coveringLowerConstraint = (m_lowerConstraint == VersionPackageConstraint.VersionComparison.GREATERTHAN || targetComp == VersionPackageConstraint.VersionComparison.GREATERTHAN) ? VersionPackageConstraint.VersionComparison.GREATERTHAN : VersionPackageConstraint.VersionComparison.GREATERTHANOREQUAL;
                    coveringUpperBound = m_upperBound;
                    coveringUpperConstraint = m_upperConstraint;
                } else {
                    // constraint is >=
                    if (targetComp == VersionPackageConstraint.VersionComparison.LESSTHANOREQUAL && m_lowerConstraint == VersionPackageConstraint.VersionComparison.GREATERTHANOREQUAL) {
                        VersionPackageConstraint.VersionComparison newComp = VersionPackageConstraint.VersionComparison.EQUAL;
                        VersionPackageConstraint result = new VersionPackageConstraint(target.getPackage());
                        result.setVersionConstraint(newComp);
                        // we're done
                        return result;
                    }
                }
            } else if (lowerComp == VersionPackageConstraint.VersionComparison.GREATERTHAN) {
                // handle the within range (but not on the upper boundary) case here
                if (upperComp == VersionPackageConstraint.VersionComparison.LESSTHAN) {
                    if (targetComp == VersionPackageConstraint.VersionComparison.LESSTHAN || targetComp == VersionPackageConstraint.VersionComparison.LESSTHANOREQUAL) {
                        lowerCheck = true;
                        upperCheck = true;
                        coveringLowerBound = m_lowerBound;
                        coveringLowerConstraint = m_lowerConstraint;
                        coveringUpperBound = targetVersion;
                        coveringUpperConstraint = targetComp;
                    } else {
                        coveringLowerBound = targetVersion;
                        coveringLowerConstraint = targetComp;
                        coveringUpperBound = m_upperBound;
                        coveringUpperConstraint = m_upperConstraint;
                    }
                }
            }
            if (coveringLowerBound == null || coveringUpperBound == null) {
                // consider the upper bound
                if (upperComp == VersionPackageConstraint.VersionComparison.EQUAL) {
                    // satisfiable if target comp is < or <=
                    if (targetComp == VersionPackageConstraint.VersionComparison.LESSTHANOREQUAL || targetComp == VersionPackageConstraint.VersionComparison.LESSTHAN) {
                        upperCheck = true;
                        coveringUpperBound = m_upperBound;
                        coveringUpperConstraint = (m_upperConstraint == VersionPackageConstraint.VersionComparison.LESSTHAN || targetComp == VersionPackageConstraint.VersionComparison.LESSTHAN) ? VersionPackageConstraint.VersionComparison.LESSTHAN : VersionPackageConstraint.VersionComparison.LESSTHANOREQUAL;
                        coveringLowerBound = m_lowerBound;
                        coveringLowerConstraint = m_lowerConstraint;
                    } else {
                        // constraint is <=
                        if (targetComp == VersionPackageConstraint.VersionComparison.GREATERTHANOREQUAL && m_upperConstraint == VersionPackageConstraint.VersionComparison.LESSTHANOREQUAL) {
                            VersionPackageConstraint.VersionComparison newComp = VersionPackageConstraint.VersionComparison.EQUAL;
                            VersionPackageConstraint result = new VersionPackageConstraint(target.getPackage());
                            result.setVersionConstraint(newComp);
                            // we're done
                            return result;
                        }
                    }
                } else if (upperComp == VersionPackageConstraint.VersionComparison.GREATERTHAN) {
                    if (targetComp == VersionPackageConstraint.VersionComparison.GREATERTHAN || targetComp == VersionPackageConstraint.VersionComparison.GREATERTHANOREQUAL || targetComp == VersionPackageConstraint.VersionComparison.EQUAL) {
                        // outside of our range and inequality is in the wrong direction
                        upperCheck = false;
                    } else {
                        // outside our range, but inequality in right direction - our
                        // range satisfies both
                        upperCheck = true;
                        coveringUpperBound = m_upperBound;
                        coveringUpperConstraint = m_upperConstraint;
                        coveringLowerBound = m_lowerBound;
                        coveringLowerConstraint = m_lowerConstraint;
                    }
                }
            }
            if (coveringUpperBound == null && coveringLowerBound == null) {
                // we can't satisfy both
                return null;
            }
            if (coveringUpperBound == null || coveringLowerBound == null) {
                // both should be null) or we can (in which case both are non-null).
                throw new Exception("[VersionRangePackageConstraint] This shouldn't be possible!!");
            }
            VersionRangePackageConstraint result = new VersionRangePackageConstraint(getPackage());
            result.setRangeConstraint(coveringLowerBound, coveringLowerConstraint, coveringUpperBound, coveringUpperConstraint);
            return result;
        }
    // check for incompatible first
    /*
       * boolean checkLower =
       * VersionPackageConstraint.checkConstraint(targetVersion,
       * m_lowerConstraint, m_lowerBound);
       */
    /*
       * VersionPackageConstraint lowerBoundCover = new
       * VersionPackageConstraint((Package)(getPackage().clone()));
       * lowerBoundCover.setVersionConstraint(m_lowerConstraint);
       */
    }
}
