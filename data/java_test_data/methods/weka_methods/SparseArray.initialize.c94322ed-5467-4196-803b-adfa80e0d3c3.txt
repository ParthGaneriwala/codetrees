protected void initialize(Element arrayE) throws Exception {
    m_indices = new ArrayList<Integer>();
    String arrayS = arrayE.getTagName();
    String entriesName = null;
    if (arrayS.equals(ArrayType.REAL_SPARSE.toString())) {
        m_type = ArrayType.REAL_SPARSE;
        entriesName = "REAL-Entries";
    } else {
        m_type = ArrayType.INT_SPARSE;
        entriesName = "INT-Entries";
    }
    // see if we can get the "n" attribute to determine the
    // size
    String N = arrayE.getAttribute("n");
    if (N != null && N.length() > 0) {
        m_numValues = Integer.parseInt(N);
    }
    // get the values
    NodeList v = arrayE.getElementsByTagName(entriesName);
    if (v == null || v.getLength() == 0) {
        // there are no entries (and indices), so this
        // array must contain all zeros
        m_numNonZero = 0;
    } else {
        Element entries = (Element) v.item(0);
        String contents = entries.getChildNodes().item(0).getNodeValue();
        StringReader sr = new StringReader(contents);
        StreamTokenizer st = new StreamTokenizer(sr);
        st.resetSyntax();
        st.whitespaceChars(0, ' ');
        st.wordChars(' ' + 1, '\u00FF');
        st.whitespaceChars(' ', ' ');
        st.quoteChar('"');
        st.quoteChar('\'');
        // m_Tokenizer.eolIsSignificant(true);
        st.nextToken();
        while (st.ttype != StreamTokenizer.TT_EOF && st.ttype != StreamTokenizer.TT_EOL) {
            m_values.add(st.sval);
            st.nextToken();
        }
        // get the indices
        NodeList i = arrayE.getElementsByTagName("Indices");
        Element indices = (Element) i.item(0);
        contents = indices.getChildNodes().item(0).getNodeValue();
        sr = new StringReader(contents);
        st = new StreamTokenizer(sr);
        st.resetSyntax();
        st.whitespaceChars(0, ' ');
        st.wordChars(' ' + 1, '\u00FF');
        st.whitespaceChars(' ', ' ');
        st.quoteChar('"');
        st.quoteChar('\'');
        // m_Tokenizer.eolIsSignificant(true);
        st.nextToken();
        while (st.ttype != StreamTokenizer.TT_EOF && st.ttype != StreamTokenizer.TT_EOL) {
            Integer newInt = new Integer(Integer.parseInt(st.sval) - 1);
            m_indices.add(newInt);
            st.nextToken();
        }
        m_numNonZero = m_indices.size();
    }
}
