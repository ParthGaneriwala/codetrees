protected void processBatch(Data data) throws WekaException {
    Instances incoming = data.getPrimaryPayload();
    Instances trueBatch = new Instances(incoming, 0);
    Instances falseBatch = new Instances(incoming, 0);
    for (int i = 0; i < incoming.numInstances(); i++) {
        if (isStopRequested()) {
            return;
        }
        Instance current = incoming.instance(i);
        boolean result = m_root.evaluate(current, true);
        if (result) {
            if (m_validTrueStep) {
                trueBatch.add(current);
            }
        } else {
            if (m_validFalseStep) {
                falseBatch.add(current);
            }
        }
    }
    Integer setNum = data.getPayloadElement(StepManager.CON_AUX_DATA_SET_NUM, 1);
    Integer maxSetNum = data.getPayloadElement(StepManager.CON_AUX_DATA_MAX_SET_NUM, 1);
    if (m_validTrueStep) {
        getStepManager().logDetailed("Routing " + trueBatch.numInstances() + " instances to step " + m_customNameOfTrueStep);
        Data outputData = new Data(data.getConnectionName(), trueBatch);
        outputData.setPayloadElement(StepManager.CON_AUX_DATA_SET_NUM, setNum);
        outputData.setPayloadElement(StepManager.CON_AUX_DATA_MAX_SET_NUM, maxSetNum);
        getStepManager().outputData(data.getConnectionName(), m_customNameOfTrueStep, outputData);
    }
    if (m_validFalseStep) {
        getStepManager().logDetailed("Routing " + falseBatch.numInstances() + " instances to step " + m_customNameOfFalseStep);
        Data outputData = new Data(data.getConnectionName(), falseBatch);
        outputData.setPayloadElement(StepManager.CON_AUX_DATA_SET_NUM, setNum);
        outputData.setPayloadElement(StepManager.CON_AUX_DATA_MAX_SET_NUM, maxSetNum);
        getStepManager().outputData(data.getConnectionName(), m_customNameOfFalseStep, outputData);
    }
    if (setNum == maxSetNum) {
        m_batchCount.decrementAndGet();
    }
}
