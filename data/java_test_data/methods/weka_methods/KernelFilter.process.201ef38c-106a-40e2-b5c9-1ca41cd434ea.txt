@Override
protected Instances process(Instances instances) throws Exception {
    // initializing necessary?
    if (!m_Initialized) {
        // do we have a file to initialize with?
        if ((getInitFile() != null) && getInitFile().isFile()) {
            DataSource source = new DataSource(getInitFile().getAbsolutePath());
            Instances data = source.getDataSet();
            m_InitFileClassIndex.setUpper(data.numAttributes() - 1);
            data.setClassIndex(m_InitFileClassIndex.getIndex());
            initFilter(data);
        } else {
            initFilter(instances);
        }
    }
    // apply filters
    if (m_Missing != null) {
        instances = Filter.useFilter(instances, m_Missing);
    }
    if (m_NominalToBinary != null) {
        instances = Filter.useFilter(instances, m_NominalToBinary);
    }
    if (m_ActualFilter != null) {
        instances = Filter.useFilter(instances, m_ActualFilter);
    }
    // backup class attribute and remove it
    int classIndex = instances.classIndex();
    double[] classes = null;
    Attribute classAttribute = null;
    if (classIndex >= 0) {
        classes = instances.attributeToDoubleArray(instances.classIndex());
        classAttribute = (Attribute) instances.classAttribute().copy();
        instances.setClassIndex(-1);
        instances.deleteAttributeAt(classIndex);
    }
    // generate new header
    ArrayList<Attribute> atts = new ArrayList<Attribute>();
    for (int j = 0; j < m_NumTrainInstances; j++) {
        atts.add(new Attribute("Kernel " + j));
    }
    if (classIndex >= 0) {
        atts.add(classAttribute);
    }
    Instances result = new Instances("Kernel", atts, 0);
    if (classIndex >= 0) {
        result.setClassIndex(result.numAttributes() - 1);
    }
    // compute matrix
    for (int i = 0; i < instances.numInstances(); i++) {
        double[] k = new double[m_NumTrainInstances + ((classIndex >= 0) ? 1 : 0)];
        for (int j = 0; j < m_NumTrainInstances; j++) {
            double v = m_ActualKernel.eval(-1, j, instances.instance(i));
            k[j] = v;
        }
        if (classIndex >= 0) {
            k[k.length - 1] = classes[i];
        }
        // create new instance
        Instance in = new DenseInstance(1.0, k);
        result.add(in);
    }
    if (!isFirstBatchDone()) {
        setOutputFormat(result);
    }
    return result;
}
