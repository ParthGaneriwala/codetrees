@Override
protected Instances determineOutputFormat(Instances inputFormat) throws Exception {
    Instances result;
    Instances processed;
    int i;
    int n;
    ArrayList<Attribute> atts;
    Attribute att;
    if (!isFirstBatchDone()) {
        // we need the full dataset here, see process(Instances)
        if (inputFormat.numInstances() == 0) {
            return null;
        }
        checkDimensions();
        // determine unused indices
        determineUnusedIndices(inputFormat);
        atts = new ArrayList<Attribute>();
        for (i = 0; i < getFilters().length; i++) {
            if (!isFirstBatchDone()) {
                // generate subset
                processed = generateSubset(inputFormat, getRange(i));
                // set input format
                if (!getFilter(i).setInputFormat(processed)) {
                    Filter.useFilter(processed, getFilter(i));
                }
            }
            // get output format
            processed = getFilter(i).getOutputFormat();
            // rename attributes
            processed = renameAttributes(processed, "filtered-" + i + "-");
            // add attributes
            for (n = 0; n < processed.numAttributes(); n++) {
                if (n == processed.classIndex()) {
                    continue;
                }
                atts.add((Attribute) processed.attribute(n).copy());
            }
        }
        // add unused attributes
        if (!getRemoveUnused()) {
            for (i = 0; i < m_IndicesUnused.length; i++) {
                att = inputFormat.attribute(m_IndicesUnused[i]);
                atts.add(att.copy("unfiltered-" + att.name()));
            }
        }
        // add class if present
        if (inputFormat.classIndex() > -1) {
            atts.add((Attribute) inputFormat.classAttribute().copy());
        }
        // generate new dataset
        result = new Instances(inputFormat.relationName(), atts, 0);
        if (inputFormat.classIndex() > -1) {
            result.setClassIndex(result.numAttributes() - 1);
        }
    } else {
        result = getOutputFormat();
    }
    return result;
}
