public void testLtLeGtGeOperator() throws Exception {
    double[] values = { 0.0, 1.0, 2.0, 3.0, 100.0, 1000.0, 1e8, 1e-8, 0.1, -0.0, -1.0, -2.0, -3.0, -100.0, -1000.0, -1e8, -1e-8, -0.1 };
    for (double left : values) {
        assertFalse(evaluateBoolean(String.format("%.20f < %.20f", left, left)));
        assertTrue(evaluateBoolean(String.format("%.20f <= %.20f", left, left)));
        assertFalse(evaluateBoolean(String.format("%.20f > %.20f", left, left)));
        assertTrue(evaluateBoolean(String.format("%.20f >= %.20f", left, left)));
        for (double right : values) {
            // basics
            assertEquals(left < right, evaluateBoolean(String.format("%.20f < %.20f", left, right)));
            assertEquals(left <= right, evaluateBoolean(String.format("%.20f <= %.20f", left, right)));
            assertEquals(left > right, evaluateBoolean(String.format("%.20f > %.20f", left, right)));
            assertEquals(left >= right, evaluateBoolean(String.format("%.20f >= %.20f", left, right)));
        }
    }
    // non-associativity
    try {
        evaluateBoolean("1.0 < 1.0 < 1.0");
        fail("non-associativity!");
    } catch (Exception e) {
    // ok
    }
    try {
        evaluateBoolean("1.0 <= 1.0 <= 1.0");
        fail("non-associativity!");
    } catch (Exception e) {
    // ok
    }
    try {
        evaluateBoolean("1.0 > 1.0 > 1.0");
        fail("non-associativity!");
    } catch (Exception e) {
    // ok
    }
    try {
        evaluateBoolean("1.0 >= 1.0 >= 1.0");
        fail("non-associativity!");
    } catch (Exception e) {
    // ok
    }
    // basic double semantics
    // inf < inf -> false
    assertFalse(evaluateBoolean("1/0 < 1/0"));
    // inf <= inf -> true
    assertTrue(evaluateBoolean("1/0 <= 1/0"));
    // inf > inf -> false
    assertFalse(evaluateBoolean("1/0 > 1/0"));
    // inf >= inf -> true
    assertTrue(evaluateBoolean("1/0 >= 1/0"));
    // -inf < inf -> true
    assertTrue(evaluateBoolean("-1/0 < 1/0"));
    // -inf <= inf -> true
    assertTrue(evaluateBoolean("-1/0 <= 1/0"));
    // -inf > inf -> false
    assertFalse(evaluateBoolean("-1/0 > 1/0"));
    // -inf >= inf -> false
    assertFalse(evaluateBoolean("-1/0 >= 1/0"));
    // NaN < NaN -> false
    assertFalse(evaluateBoolean("sqrt(-1) < sqrt(-1)"));
    // NaN <= NaN -> false
    assertFalse(evaluateBoolean("sqrt(-1) <= sqrt(-1)"));
    // NaN > NaN -> false
    assertFalse(evaluateBoolean("sqrt(-1) > sqrt(-1)"));
    // NaN >= NaN -> false
    assertFalse(evaluateBoolean("sqrt(-1) >= sqrt(-1)"));
    // 0 < NaN -> false
    assertFalse(evaluateBoolean("0.0 < sqrt(-1)"));
    // 0 <= NaN -> false
    assertFalse(evaluateBoolean("0.0 <= sqrt(-1)"));
    // 0 > NaN -> false
    assertFalse(evaluateBoolean("0.0 > sqrt(-1)"));
    // 0 >= NaN -> false
    assertFalse(evaluateBoolean("0.0 >= sqrt(-1)"));
    // inf < NaN -> false
    assertFalse(evaluateBoolean("1/0 < sqrt(-1)"));
    // inf <= NaN -> false
    assertFalse(evaluateBoolean("1/0 <= sqrt(-1)"));
    // inf > NaN -> false
    assertFalse(evaluateBoolean("1/0 > sqrt(-1)"));
    // inf >= NaN -> false
    assertFalse(evaluateBoolean("1/0 >= sqrt(-1)"));
}
