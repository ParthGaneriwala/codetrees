protected void findParamsByCrossValidation(int depth, Instances trainData, Random random) throws Exception {
    if (depth < m_CVParams.size()) {
        CVParameter cvParam = (CVParameter) m_CVParams.elementAt(depth);
        double upper;
        switch((int) (cvParam.m_Lower - cvParam.m_Upper + 0.5)) {
            case 1:
                upper = m_NumAttributes;
                break;
            case 2:
                upper = m_TrainFoldSize;
                break;
            default:
                upper = cvParam.m_Upper;
                break;
        }
        double increment = (upper - cvParam.m_Lower) / (cvParam.m_Steps - 1);
        for (cvParam.m_ParamValue = cvParam.m_Lower; cvParam.m_ParamValue <= upper; cvParam.m_ParamValue += increment) {
            findParamsByCrossValidation(depth + 1, trainData, random);
        }
    } else {
        Evaluation evaluation = new Evaluation(trainData);
        // Work with a copy of the base classifier in case the base classifier does not initialize itself properly
        Classifier copiedClassifier = AbstractClassifier.makeCopy(m_Classifier);
        // Set the classifier options
        String[] options = createOptions();
        if (m_Debug) {
            System.err.print("Setting options for " + copiedClassifier.getClass().getName() + ":");
            for (int i = 0; i < options.length; i++) {
                System.err.print(" " + options[i]);
            }
            System.err.println("");
        }
        ((OptionHandler) copiedClassifier).setOptions(options);
        for (int j = 0; j < m_NumFolds; j++) {
            // We want to randomize the data the same way for every
            // learning scheme.
            Instances train = trainData.trainCV(m_NumFolds, j, new Random(1));
            Instances test = trainData.testCV(m_NumFolds, j);
            copiedClassifier.buildClassifier(train);
            evaluation.setPriors(train);
            evaluation.evaluateModel(copiedClassifier, test);
        }
        double error = evaluation.errorRate();
        if (m_Debug) {
            System.err.println("Cross-validated error rate: " + Utils.doubleToString(error, 6, 4));
        }
        if ((m_BestPerformance == -99) || (error < m_BestPerformance)) {
            m_BestPerformance = error;
            m_BestClassifierOptions = createOptions();
        }
    }
}
