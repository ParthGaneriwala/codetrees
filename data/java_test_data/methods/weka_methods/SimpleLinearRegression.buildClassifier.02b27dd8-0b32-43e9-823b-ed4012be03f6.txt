@Override
public void buildClassifier(Instances insts) throws Exception {
    // can classifier handle the data?
    getCapabilities().testWithFail(insts);
    if (m_outputAdditionalStats) {
        // check that the instances weights are all 1
        // because the RegressionAnalysis class does
        // not handle weights
        boolean ok = true;
        for (int i = 0; i < insts.numInstances(); i++) {
            if (insts.instance(i).weight() != 1) {
                ok = false;
                break;
            }
        }
        if (!ok) {
            throw new Exception("Can only compute additional statistics on unweighted data");
        }
    }
    // Compute sums and counts
    double[] sum = new double[insts.numAttributes()];
    double[] count = new double[insts.numAttributes()];
    double[] classSumForMissing = new double[insts.numAttributes()];
    double[] classSumSquaredForMissing = new double[insts.numAttributes()];
    double classCount = 0;
    double classSum = 0;
    for (int j = 0; j < insts.numInstances(); j++) {
        Instance inst = insts.instance(j);
        if (!inst.classIsMissing()) {
            for (int i = 0; i < insts.numAttributes(); i++) {
                if (!inst.isMissing(i)) {
                    sum[i] += inst.weight() * inst.value(i);
                    count[i] += inst.weight();
                } else {
                    classSumForMissing[i] += inst.classValue() * inst.weight();
                    classSumSquaredForMissing[i] += inst.classValue() * inst.classValue() * inst.weight();
                }
            }
            classCount += inst.weight();
            classSum += inst.weight() * inst.classValue();
        }
    }
    // Compute means
    double[] mean = new double[insts.numAttributes()];
    double[] classMeanForMissing = new double[insts.numAttributes()];
    double[] classMeanForKnown = new double[insts.numAttributes()];
    for (int i = 0; i < insts.numAttributes(); i++) {
        if (i != insts.classIndex()) {
            if (count[i] > 0) {
                mean[i] = sum[i] / count[i];
            }
            if (classCount - count[i] > 0) {
                classMeanForMissing[i] = classSumForMissing[i] / (classCount - count[i]);
            }
            if (count[i] > 0) {
                classMeanForKnown[i] = (classSum - classSumForMissing[i]) / count[i];
            }
        }
    }
    sum = null;
    count = null;
    double[] slopes = new double[insts.numAttributes()];
    double[] sumWeightedDiffsSquared = new double[insts.numAttributes()];
    double[] sumWeightedClassDiffsSquared = new double[insts.numAttributes()];
    // For all instances
    for (int j = 0; j < insts.numInstances(); j++) {
        Instance inst = insts.instance(j);
        // Only need to do something if the class isn't missing
        if (!inst.classIsMissing()) {
            // For all attributes
            for (int i = 0; i < insts.numAttributes(); i++) {
                if (!inst.isMissing(i) && (i != insts.classIndex())) {
                    double yDiff = inst.classValue() - classMeanForKnown[i];
                    double weightedYDiff = inst.weight() * yDiff;
                    double diff = inst.value(i) - mean[i];
                    double weightedDiff = inst.weight() * diff;
                    slopes[i] += weightedYDiff * diff;
                    sumWeightedDiffsSquared[i] += weightedDiff * diff;
                    sumWeightedClassDiffsSquared[i] += weightedYDiff * yDiff;
                }
            }
        }
    }
    // Pick the best attribute
    double minSSE = Double.MAX_VALUE;
    m_attribute = null;
    int chosen = -1;
    double chosenSlope = Double.NaN;
    double chosenIntercept = Double.NaN;
    double chosenMeanForMissing = Double.NaN;
    for (int i = 0; i < insts.numAttributes(); i++) {
        // Do we have missing values for this attribute?
        double sseForMissing = classSumSquaredForMissing[i] - (classSumForMissing[i] * classMeanForMissing[i]);
        // Should we skip this attribute?
        if ((i == insts.classIndex()) || (sumWeightedDiffsSquared[i] == 0)) {
            continue;
        }
        // Compute final slope and intercept
        double numerator = slopes[i];
        slopes[i] /= sumWeightedDiffsSquared[i];
        double intercept = classMeanForKnown[i] - slopes[i] * mean[i];
        // Compute sum of squared errors
        double sse = sumWeightedClassDiffsSquared[i] - slopes[i] * numerator;
        // Add component due to missing value prediction
        sse += sseForMissing;
        // Check whether this is the best attribute
        if (sse < minSSE) {
            minSSE = sse;
            chosen = i;
            chosenSlope = slopes[i];
            chosenIntercept = intercept;
            chosenMeanForMissing = classMeanForMissing[i];
        }
    }
    // Set parameters
    if (chosen == -1) {
        if (!m_suppressErrorMessage) {
            System.err.println("----- no useful attribute found");
        }
        m_attribute = null;
        m_attributeIndex = 0;
        m_slope = 0;
        m_intercept = classSum / classCount;
        m_classMeanForMissing = 0;
    } else {
        m_attribute = insts.attribute(chosen);
        m_attributeIndex = chosen;
        m_slope = chosenSlope;
        m_intercept = chosenIntercept;
        m_classMeanForMissing = chosenMeanForMissing;
        if (m_outputAdditionalStats) {
            // Reduce data so that stats are correct
            Instances newInsts = new Instances(insts, insts.numInstances());
            for (int i = 0; i < insts.numInstances(); i++) {
                Instance inst = insts.instance(i);
                if (!inst.classIsMissing() && !inst.isMissing(m_attributeIndex)) {
                    newInsts.add(inst);
                }
            }
            insts = newInsts;
            // do regression analysis
            m_df = insts.numInstances() - 2;
            double[] stdErrors = RegressionAnalysis.calculateStdErrorOfCoef(insts, m_attribute, m_slope, m_intercept, m_df);
            m_seSlope = stdErrors[0];
            m_seIntercept = stdErrors[1];
            double[] coef = new double[2];
            coef[0] = m_slope;
            coef[1] = m_intercept;
            double[] tStats = RegressionAnalysis.calculateTStats(coef, stdErrors, 2);
            m_tstatSlope = tStats[0];
            m_tstatIntercept = tStats[1];
            double ssr = RegressionAnalysis.calculateSSR(insts, m_attribute, m_slope, m_intercept);
            m_rsquared = RegressionAnalysis.calculateRSquared(insts, ssr);
            m_rsquaredAdj = RegressionAnalysis.calculateAdjRSquared(m_rsquared, insts.numInstances(), 2);
            m_fstat = RegressionAnalysis.calculateFStat(m_rsquared, insts.numInstances(), 2);
        }
    }
}
