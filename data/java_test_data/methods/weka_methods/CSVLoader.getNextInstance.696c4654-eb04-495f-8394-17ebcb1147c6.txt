@Override
public Instance getNextInstance(Instances structure) throws IOException {
    m_structure = structure;
    if (getRetrieval() == BATCH) {
        throw new IOException("Cannot mix getting instances in both incremental and batch modes");
    }
    setRetrieval(INCREMENTAL);
    if (m_dataDumper != null) {
        // close the uneeded temp files (if necessary)
        m_dataDumper.close();
        m_dataDumper = null;
    }
    if (m_rowBuffer.size() > 0 && m_incrementalReader == null) {
        StringBuilder tempB = new StringBuilder();
        for (String r : m_rowBuffer) {
            tempB.append(r).append("\n");
        }
        m_numBufferedRows = m_rowBuffer.size();
        Reader batchReader = new BufferedReader(new StringReader(tempB.toString()));
        m_incrementalReader = new ArffReader(batchReader, m_structure, 0, 0, m_fieldSeparatorAndEnclosures);
        m_rowBuffer.clear();
    }
    if (m_numBufferedRows == 0) {
        // m_incrementalReader = new ArffReader(m_sourceReader, m_structure, 0,
        // 0);
        m_numBufferedRows = -1;
        m_st = new StreamTokenizer(m_sourceReader);
        initTokenizer(m_st);
        m_st.ordinaryChar(m_FieldSeparator.charAt(0));
        // 
        m_incrementalReader = null;
    }
    Instance current = null;
    if (m_sourceReader != null) {
        if (m_incrementalReader != null) {
            current = m_incrementalReader.readInstance(m_structure);
        } else {
            if (getInstance(m_st) != null) {
                current = makeInstance();
            }
        }
        if (current == null) {
        }
        if (m_numBufferedRows > 0) {
            m_numBufferedRows--;
        }
    }
    if ((m_sourceReader != null) && (current == null)) {
        try {
            // close the stream
            m_sourceReader.close();
            m_sourceReader = null;
        // reset();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
    return current;
}
