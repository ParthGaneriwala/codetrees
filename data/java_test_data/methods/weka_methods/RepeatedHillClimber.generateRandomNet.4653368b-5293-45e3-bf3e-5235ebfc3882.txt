// search
void generateRandomNet(BayesNet bayesNet, Instances instances) {
    int nNodes = instances.numAttributes();
    // clear network
    for (int iNode = 0; iNode < nNodes; iNode++) {
        ParentSet parentSet = bayesNet.getParentSet(iNode);
        while (parentSet.getNrOfParents() > 0) {
            parentSet.deleteLastParent(instances);
        }
    }
    // initialize as naive Bayes?
    if (getInitAsNaiveBayes()) {
        int iClass = instances.classIndex();
        // each of the other nodes
        for (int iNode = 0; iNode < nNodes; iNode++) {
            if (iNode != iClass) {
                bayesNet.getParentSet(iNode).addParent(iClass, instances);
            }
        }
    }
    // insert random arcs
    int nNrOfAttempts = m_random.nextInt(nNodes * nNodes);
    for (int iAttempt = 0; iAttempt < nNrOfAttempts; iAttempt++) {
        int iTail = m_random.nextInt(nNodes);
        int iHead = m_random.nextInt(nNodes);
        if (bayesNet.getParentSet(iHead).getNrOfParents() < getMaxNrOfParents() && addArcMakesSense(bayesNet, instances, iHead, iTail)) {
            bayesNet.getParentSet(iHead).addParent(iTail, instances);
        }
    }
}
