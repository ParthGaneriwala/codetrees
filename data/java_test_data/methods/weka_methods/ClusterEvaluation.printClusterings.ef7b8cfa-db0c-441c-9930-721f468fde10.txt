private static String printClusterings(Clusterer clusterer, String trainFileName, String testFileName, Range attributesToOutput) throws Exception {
    StringBuffer text = new StringBuffer();
    int i = 0;
    int cnum;
    DataSource source = null;
    Instance inst;
    Instances structure;
    if (testFileName.length() != 0) {
        source = new DataSource(testFileName);
    } else {
        source = new DataSource(trainFileName);
    }
    structure = source.getStructure();
    Instances forBatchPredictors = (clusterer instanceof BatchPredictor && ((BatchPredictor) clusterer).implementsMoreEfficientBatchPrediction()) ? new Instances(source.getStructure(), 0) : null;
    while (source.hasMoreElements(structure)) {
        inst = source.nextElement(structure);
        if (forBatchPredictors != null) {
            forBatchPredictors.add(inst);
        } else {
            try {
                cnum = clusterer.clusterInstance(inst);
                text.append(i + " " + cnum + " " + attributeValuesString(inst, attributesToOutput) + "\n");
            } catch (Exception e) {
                /*
           * throw new Exception('\n' + "Unable to cluster instance\n" +
           * e.getMessage());
           */
                text.append(i + " Unclustered " + attributeValuesString(inst, attributesToOutput) + "\n");
            }
            i++;
        }
    }
    if (forBatchPredictors != null) {
        double[][] dists = ((BatchPredictor) clusterer).distributionsForInstances(forBatchPredictors);
        for (double[] d : dists) {
            cnum = Utils.maxIndex(d);
            text.append(i + " " + cnum + " " + attributeValuesString(forBatchPredictors.instance(i), attributesToOutput) + "\n");
            i++;
        }
    }
    return text.toString();
}
