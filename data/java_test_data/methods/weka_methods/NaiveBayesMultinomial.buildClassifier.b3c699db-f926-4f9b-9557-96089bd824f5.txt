public void buildClassifier(Instances instances) throws Exception {
    initializeClassifier(instances);
    // enumerate through the instances
    double[] wordsPerClass = new double[m_numClasses];
    for (Instance instance : instances) {
        double classValue = instance.value(instance.classIndex());
        if (!Utils.isMissingValue(classValue)) {
            int classIndex = (int) classValue;
            m_probOfClass[classIndex] += instance.weight();
            for (int a = 0; a < instance.numValues(); a++) {
                if (instance.index(a) != instance.classIndex()) {
                    if (!instance.isMissingSparse(a)) {
                        double numOccurrences = instance.valueSparse(a) * instance.weight();
                        if (numOccurrences < 0)
                            throw new Exception("Numeric attribute values must all be greater or equal to zero.");
                        wordsPerClass[classIndex] += numOccurrences;
                        m_probOfWordGivenClass[classIndex][instance.index(a)] += numOccurrences;
                    }
                }
            }
        }
    }
    /*
      normalising probOfWordGivenClass values
      and saving each value as the log of each value
    */
    for (int c = 0; c < m_numClasses; c++) {
        for (int v = 0; v < m_numAttributes; v++) {
            m_probOfWordGivenClass[c][v] = Math.log(m_probOfWordGivenClass[c][v]) - Math.log(wordsPerClass[c] + m_numAttributes - 1);
        }
    }
    // Normalize prior class probabilities
    Utils.normalize(m_probOfClass);
}
