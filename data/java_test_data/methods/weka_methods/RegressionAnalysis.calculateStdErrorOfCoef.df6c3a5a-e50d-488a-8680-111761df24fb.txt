public static double[] calculateStdErrorOfCoef(Instances data, boolean[] selected, double ssr, int n, int k) throws Exception {
    // Construct a matrix to hold X variables
    double[][] array = new double[n][k];
    // put data into 2-D array format
    int column = 0;
    for (int j = 0; j < data.numAttributes(); j++) {
        if ((data.classIndex() != j) && (selected[j])) {
            for (int i = 0; i < n; i++) {
                array[i][column] = data.instance(i).value(j);
            }
            column++;
        }
    }
    // last column in array is constant (1's)
    for (int i = 0; i < n; i++) {
        array[i][k - 1] = 1.0;
    }
    /*
     * linear algebra calculation: covariance matrix = mse * (XtX)^-1 diagonal
     * of covariance matrix is square of standard error of coefficients
     */
    Matrix X = new Matrix(array);
    Matrix Xt = X.transpose();
    Matrix XtX = Xt.times(X);
    Matrix inverse = XtX.inverse();
    double mse = ssr / (n - k);
    Matrix cov = inverse.times(mse);
    double[] result = new double[k];
    for (int i = 0; i < k; i++) {
        result[i] = Math.sqrt(cov.get(i, i));
    }
    return result;
}
