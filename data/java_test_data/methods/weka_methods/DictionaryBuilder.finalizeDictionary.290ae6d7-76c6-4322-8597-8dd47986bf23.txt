public Map<String, int[]> finalizeDictionary() throws Exception {
    if (!m_inputContainsStringAttributes) {
        return null;
    }
    // according to wordsToKeep
    if (m_consolidatedDict != null) {
        return m_consolidatedDict;
    }
    if (m_dictsPerClass == null) {
        System.err.println(this.hashCode());
        throw new WekaException("No dictionary built yet!");
    }
    int[] prune = new int[m_dictsPerClass.length];
    for (int z = 0; z < prune.length; z++) {
        int[] array = new int[m_dictsPerClass[z].size()];
        int index = 0;
        for (Map.Entry<String, int[]> e : m_dictsPerClass[z].entrySet()) {
            array[index++] = e.getValue()[0];
        }
        if (array.length < m_wordsToKeep) {
            prune[z] = m_minFrequency;
        } else {
            Arrays.sort(array);
            prune[z] = Math.max(m_minFrequency, array[array.length - m_wordsToKeep]);
        }
    }
    // now consolidate across classes
    Map<String, int[]> consolidated = new LinkedHashMap<String, int[]>();
    int index = 0;
    for (int z = 0; z < prune.length; z++) {
        for (Map.Entry<String, int[]> e : m_dictsPerClass[z].entrySet()) {
            if (e.getValue()[0] >= prune[z]) {
                int[] counts = consolidated.get(e.getKey());
                if (counts == null) {
                    counts = new int[2];
                    counts[0] = index++;
                    consolidated.put(e.getKey(), counts);
                }
                // counts[0] += e.getValue()[0];
                counts[1] += e.getValue()[1];
            }
        }
    }
    m_consolidatedDict = consolidated;
    m_dictsPerClass = null;
    if (m_normalize) {
        m_avgDocLength = m_docLengthSum / m_count;
    }
    m_outputFormat = getVectorizedFormat();
    return m_consolidatedDict;
}
