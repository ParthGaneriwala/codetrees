@Override
public boolean input(Instance inst) throws Exception {
    if (getInputFormat() == null) {
        throw new IllegalStateException("No input instance format defined");
    }
    if (m_NewBatch) {
        resetQueue();
        m_NewBatch = false;
    }
    double[] vals = new double[inst.numAttributes()];
    for (int i = 0; i < inst.numAttributes(); i++) {
        if (inst.isMissing(i) && m_selectedRange.isInRange(i)) {
            if (i != inst.classIndex()) {
                if (inst.attribute(i).isDate()) {
                    vals[i] = m_dateConstVal;
                } else if (inst.attribute(i).isNumeric()) {
                    vals[i] = m_numericConstVal;
                } else if (inst.attribute(i).isNominal()) {
                    // vals[i] = inst.attribute(i).numValues();
                    int temp = inst.attribute(i).indexOfValue(m_resolvedNominalStringConstant);
                    // vals[i] = (temp >= 0) ? temp : inst.attribute(i).numValues();
                    vals[i] = (temp >= 0) ? temp : 0;
                } else if (inst.attribute(i).isString()) {
                    // value, the current instance's value, is maintained in memory)
                    if (inst.attribute(i).numValues() <= 1) {
                        outputFormatPeek().attribute(i).setStringValue(m_resolvedNominalStringConstant);
                        vals[i] = 0;
                    } else {
                        vals[i] = outputFormatPeek().attribute(i).addStringValue(m_resolvedNominalStringConstant);
                    }
                } else {
                    vals[i] = inst.value(i);
                }
            } else {
                vals[i] = inst.value(i);
            }
        } else {
            if (m_selectedRange.isInRange(i)) {
                // in range but not missing
                if (inst.attribute(i).isString()) {
                    // value, the current instance's value, is maintained in memory)
                    if (inst.attribute(i).numValues() <= 1) {
                        outputFormatPeek().attribute(i).setStringValue(inst.stringValue(i));
                    } else {
                        outputFormatPeek().attribute(i).addStringValue(inst.stringValue(i));
                    }
                    vals[i] = outputFormatPeek().attribute(i).indexOfValue(inst.stringValue(i));
                } else if (inst.attribute(i).isNominal() && i != inst.classIndex()) {
                    // vals[i] = inst.value(i) + 1;
                    vals[i] = outputFormatPeek().attribute(i).indexOfValue(inst.stringValue(i));
                } else {
                    vals[i] = inst.value(i);
                }
            } else {
                // missing but not in range
                vals[i] = inst.value(i);
            }
        }
    }
    Instance newInst = null;
    if (inst instanceof SparseInstance) {
        newInst = new SparseInstance(inst.weight(), vals);
    } else {
        newInst = new DenseInstance(inst.weight(), vals);
    }
    newInst.setDataset(getOutputFormat());
    /*
     * copyValues(newInst, false, inst.dataset(), getOutputFormat());
     * newInst.setDataset(getOutputFormat());
     */
    // No need to copy
    push(newInst, false);
    return true;
}
