public void initializeModel(int K, double[] values, double[] weights, Random r) {
    // Initialize means using farthest points
    m_Means = new double[K];
    // Randomly choose first point
    double furthestVal = values[r.nextInt(values.length)];
    // Find K maximally distant points (if possible)
    m_K = 0;
    do {
        m_Means[m_K] = furthestVal;
        m_K++;
        if (m_K >= K) {
            break;
        }
        double maxMinDist = smallestDistance(values[0]);
        furthestVal = values[0];
        for (int i = 1; i < values.length; i++) {
            double minDist = smallestDistance(values[i]);
            if (minDist > maxMinDist) {
                maxMinDist = minDist;
                furthestVal = values[i];
            }
        }
        if (maxMinDist <= 0) {
            break;
        }
    } while (true);
    // Shrink array of means if necessary
    if (m_K < K) {
        double[] tempMeans = new double[m_K];
        System.arraycopy(m_Means, 0, tempMeans, 0, m_K);
        m_Means = tempMeans;
    }
    // Establish initial cluster assignments
    double[][] probs = new double[m_K][values.length];
    for (int i = 0; i < values.length; i++) {
        probs[nearestMean(values[i])][i] = 1.0;
    }
    // Compute initial parameters
    m_StdDevs = new double[m_K];
    m_LogPriors = new double[m_K];
    estimateParameters(values, weights, probs);
}
