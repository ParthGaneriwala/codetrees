@Override
public void run() {
    synchronized (m_locker) {
        // of the panel is less than the number of values for this attribute
        if (m_data.attribute(m_attribIndex).numValues() > m_panelWidth) {
            m_histBarClassCounts = null;
            m_threadRun = false;
            m_doneCurrentAttribute = true;
            m_displayCurrentAttribute = false;
            AttributeVisualizationPanel.this.repaint();
            return;
        }
        if ((m_classIndex >= 0) && (m_data.attribute(m_classIndex).isNominal())) {
            SparseInstance[] histClassCounts;
            histClassCounts = new SparseInstance[m_data.attribute(m_attribIndex).numValues()];
            if (m_as.nominalWeights.length > 0) {
                m_maxValue = m_as.nominalWeights[0];
                for (int i = 0; i < m_data.attribute(m_attribIndex).numValues(); i++) {
                    if (m_as.nominalWeights[i] > m_maxValue) {
                        m_maxValue = m_as.nominalWeights[i];
                    }
                }
            } else {
                m_maxValue = 0;
            }
            if (m_colorList.size() == 0) {
                m_colorList.add(Color.black);
            }
            for (int i = m_colorList.size(); i < m_data.attribute(m_classIndex).numValues() + 1; i++) {
                Color pc = m_defaultColors[(i - 1) % 10];
                int ija = (i - 1) / 10;
                ija *= 2;
                for (int j = 0; j < ija; j++) {
                    pc = pc.darker();
                }
                m_colorList.add(pc);
            }
            // first sort data on attribute values
            m_data.sort(m_attribIndex);
            double[] tempClassCounts = null;
            int tempAttValueIndex = -1;
            for (int k = 0; k < m_data.numInstances(); k++) {
                // m_data.instance(k).value(m_classIndex));
                if (!m_data.instance(k).isMissing(m_attribIndex)) {
                    // check to see if we need to allocate some space here
                    if (m_data.instance(k).value(m_attribIndex) != tempAttValueIndex) {
                        if (tempClassCounts != null) {
                            // set up the sparse instance for the previous bar (if any)
                            int numNonZero = 0;
                            for (double tempClassCount : tempClassCounts) {
                                if (tempClassCount > 0) {
                                    numNonZero++;
                                }
                            }
                            double[] nonZeroVals = new double[numNonZero];
                            int[] nonZeroIndices = new int[numNonZero];
                            int count = 0;
                            for (int z = 0; z < tempClassCounts.length; z++) {
                                if (tempClassCounts[z] > 0) {
                                    nonZeroVals[count] = tempClassCounts[z];
                                    nonZeroIndices[count++] = z;
                                }
                            }
                            SparseInstance tempS = new SparseInstance(1.0, nonZeroVals, nonZeroIndices, tempClassCounts.length);
                            histClassCounts[tempAttValueIndex] = tempS;
                        }
                        tempClassCounts = new double[m_data.attribute(m_classIndex).numValues() + 1];
                        tempAttValueIndex = (int) m_data.instance(k).value(m_attribIndex);
                    /*
                 * histClassCounts[(int)m_data.instance(k).value(m_attribIndex)]
                 * = new double[m_data.attribute(m_classIndex).numValues()+1];
                 */
                    }
                    if (m_data.instance(k).isMissing(m_classIndex)) {
                        /*
                 * histClassCounts[(int)m_data.instance(k).value(m_attribIndex)]
                 * [0] += m_data.instance(k).weight();
                 */
                        tempClassCounts[0] += m_data.instance(k).weight();
                    } else {
                        tempClassCounts[(int) m_data.instance(k).value(m_classIndex) + 1] += m_data.instance(k).weight();
                    /*
                 * histClassCounts[(int)m_data.instance(k).value(m_attribIndex)]
                 * [(int)m_data.instance(k).value(m_classIndex)+1] +=
                 * m_data.instance(k).weight();
                 */
                    }
                }
            }
            // set up sparse instance for last bar?
            if (tempClassCounts != null) {
                // set up the sparse instance for the previous bar (if any)
                int numNonZero = 0;
                for (double tempClassCount : tempClassCounts) {
                    if (tempClassCount > 0) {
                        numNonZero++;
                    }
                }
                double[] nonZeroVals = new double[numNonZero];
                int[] nonZeroIndices = new int[numNonZero];
                int count = 0;
                for (int z = 0; z < tempClassCounts.length; z++) {
                    if (tempClassCounts[z] > 0) {
                        nonZeroVals[count] = tempClassCounts[z];
                        nonZeroIndices[count++] = z;
                    }
                }
                SparseInstance tempS = new SparseInstance(1.0, nonZeroVals, nonZeroIndices, tempClassCounts.length);
                histClassCounts[tempAttValueIndex] = tempS;
            }
            // for(int i=0; i<histClassCounts.length; i++) {
            // int sum=0;
            // for(int j=0; j<histClassCounts[i].length; j++) {
            // sum = sum+histClassCounts[i][j];
            // }
            // System.out.println("histCount: "+sum+" Actual: "+
            // m_as.nominalWeights[i]);
            // }
            m_threadRun = false;
            m_doneCurrentAttribute = true;
            m_displayCurrentAttribute = true;
            m_histBarClassCounts = histClassCounts;
            // Image tmpImg = new BufferedImage(getWidth(), getHeight(),
            // BufferedImage.TYPE_INT_RGB);
            // drawGraph( tmpImg.getGraphics() );
            // img = tmpImg;
            AttributeVisualizationPanel.this.repaint();
        } else {
            double[] histCounts;
            histCounts = new double[m_data.attribute(m_attribIndex).numValues()];
            if (m_as.nominalWeights.length > 0) {
                m_maxValue = m_as.nominalWeights[0];
                for (int i = 0; i < m_data.attribute(m_attribIndex).numValues(); i++) {
                    if (m_as.nominalWeights[i] > m_maxValue) {
                        m_maxValue = m_as.nominalWeights[i];
                    }
                }
            } else {
                m_maxValue = 0;
            }
            for (int k = 0; k < m_data.numInstances(); k++) {
                if (!m_data.instance(k).isMissing(m_attribIndex)) {
                    histCounts[(int) m_data.instance(k).value(m_attribIndex)] += m_data.instance(k).weight();
                }
            }
            m_threadRun = false;
            m_displayCurrentAttribute = true;
            m_doneCurrentAttribute = true;
            m_histBarCounts = histCounts;
            // Image tmpImg = new BufferedImage(getWidth(), getHeight(),
            // BufferedImage.TYPE_INT_RGB);
            // drawGraph( tmpImg.getGraphics() );
            // img = tmpImg;
            AttributeVisualizationPanel.this.repaint();
        }
    }
// end synchronized
}
