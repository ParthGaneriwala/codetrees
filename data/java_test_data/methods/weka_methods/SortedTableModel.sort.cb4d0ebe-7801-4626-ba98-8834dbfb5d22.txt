public void sort(int columnIndex, boolean ascending) {
    int columnType;
    int i;
    ArrayList<SortContainer> sorted;
    SortContainer cont;
    Object value;
    // can we sort?
    if ((!isInitialized()) || (getModel().getRowCount() != mIndices.length)) {
        System.out.println(this.getClass().getName() + ": Table model not initialized!");
        return;
    }
    // init
    mSortColumn = columnIndex;
    mAscending = ascending;
    initializeIndices();
    // determine the column type: 0=string/other, 1=comparable
    if (InheritanceUtils.hasInterface(Comparable.class, getColumnClass(mSortColumn))) {
        columnType = 1;
    } else {
        columnType = 0;
    }
    // create list for sorting
    sorted = new ArrayList<SortContainer>();
    for (i = 0; i < getRowCount(); i++) {
        value = mModel.getValueAt(mIndices[i], mSortColumn);
        if (columnType == 0) {
            cont = new SortContainer((value == null) ? null : value.toString(), mIndices[i]);
        } else {
            cont = new SortContainer((Comparable<?>) value, mIndices[i]);
        }
        sorted.add(cont);
    }
    Collections.sort(sorted);
    for (i = 0; i < sorted.size(); i++) {
        if (mAscending) {
            mIndices[i] = sorted.get(i).getIndex();
        } else {
            mIndices[i] = sorted.get(sorted.size() - 1 - i).getIndex();
        }
    }
    sorted.clear();
    sorted = null;
}
