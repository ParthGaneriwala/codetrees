public double[] instanceToSchema(Instance inst, MiningSchema miningSchema) throws Exception {
    Instances miningSchemaI = miningSchema.getMiningSchemaAsInstances();
    // allocate enough space for both mining schema fields and any derived
    // fields
    double[] result = new double[miningSchema.getFieldsAsInstances().numAttributes()];
    // Copy over the values
    for (int i = 0; i < miningSchemaI.numAttributes(); i++) {
        // if (miningSchemaI.attribute(i).isNumeric()) {
        result[i] = inst.value(m_fieldsMap[i]);
        if (miningSchemaI.attribute(i).isNominal() || miningSchemaI.attribute(i).isString()) {
            // the mining schema
            if (!Utils.isMissingValue(inst.value(m_fieldsMap[i]))) {
                int[] valueMap = m_nominalValueMaps[i];
                int index = valueMap[(int) inst.value(m_fieldsMap[i])];
                String incomingAttValue = inst.attribute(m_fieldsMap[i]).value((int) inst.value(m_fieldsMap[i]));
                /*
           * int index =
           * miningSchemaI.attribute(i).indexOfValue(incomingAttValue);
           */
                if (index >= 0) {
                    result[i] = index;
                } else {
                    // set this to "unknown" (-1) for nominal valued attributes
                    result[i] = UNKNOWN_NOMINAL_VALUE;
                    String warningString = "[MappingInfo] WARNING: Can't match nominal value " + incomingAttValue;
                    if (m_log != null) {
                        m_log.logMessage(warningString);
                    } else {
                        System.err.println(warningString);
                    }
                }
            }
        }
    }
    // Now deal with missing values and outliers...
    miningSchema.applyMissingAndOutlierTreatments(result);
    // printInst(result);
    // now fill in any derived values
    ArrayList<DerivedFieldMetaInfo> derivedFields = miningSchema.getDerivedFields();
    for (int i = 0; i < derivedFields.size(); i++) {
        DerivedFieldMetaInfo temp = derivedFields.get(i);
        // System.err.println("Applying : " + temp);
        double r = temp.getDerivedValue(result);
        result[i + miningSchemaI.numAttributes()] = r;
    }
    return result;
}
