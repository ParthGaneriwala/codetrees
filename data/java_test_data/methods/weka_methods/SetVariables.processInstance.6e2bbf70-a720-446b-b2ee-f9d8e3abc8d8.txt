protected void processInstance(Instance inst, Data existingEnv) throws WekaException {
    Map<String, String> vars = new HashMap<>();
    for (Map.Entry<String, List<String>> e : m_varsToSetFromIncomingInstances.entrySet()) {
        String attName = environmentSubstitute(e.getKey());
        Attribute current = inst.dataset().attribute(attName);
        int index = -1;
        if (current != null) {
            index = current.index();
        } else {
            // try as a 1-based index
            try {
                index = Integer.parseInt(attName);
                // make zero-based
                index--;
            } catch (NumberFormatException ex) {
            // ignore
            }
        }
        if (index != -1) {
            String varToSet = environmentSubstitute(e.getValue().get(0));
            String val = environmentSubstitute(e.getValue().get(1));
            if (inst.isMissing(index)) {
                if (m_raiseErrorWhenValueMissing) {
                    throw new WekaException("Value of attribute '" + inst.attribute(index).name() + "' was missing in current instance");
                }
            } else {
                val = inst.stringValue(index);
            }
            vars.put(varToSet, val);
        }
    }
    Environment env = getStepManager().getExecutionEnvironment().getEnvironmentVariables();
    for (Map.Entry<String, String> e : vars.entrySet()) {
        env.addVariable(e.getKey(), e.getValue());
    }
    if (existingEnv != null) {
        Map<String, String> existingVars = existingEnv.getPayloadElement(StepManager.CON_AUX_DATA_ENVIRONMENT_VARIABLES);
        if (existingVars != null) {
            vars.putAll(existingVars);
        }
    }
    Data output = new Data(StepManager.CON_ENVIRONMENT);
    output.setPayloadElement(StepManager.CON_AUX_DATA_ENVIRONMENT_VARIABLES, vars);
    if (existingEnv != null) {
        output.setPayloadElement(StepManager.CON_AUX_DATA_ENVIRONMENT_PROPERTIES, existingEnv.getPayloadElement(StepManager.CON_AUX_DATA_ENVIRONMENT_PROPERTIES));
    }
    // make sure that each data output is in the same thread
    output.setPayloadElement(StepManager.CON_AUX_DATA_INSTANCE, inst);
    output.setPayloadElement(StepManager.CON_AUX_DATA_IS_INCREMENTAL, true);
    getStepManager().outputData(output);
}
