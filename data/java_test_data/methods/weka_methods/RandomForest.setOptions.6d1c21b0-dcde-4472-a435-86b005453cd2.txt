@Override
public void setOptions(String[] options) throws Exception {
    String bagSize = Utils.getOption('P', options);
    if (bagSize.length() != 0) {
        setBagSizePercent(Integer.parseInt(bagSize));
    } else {
        setBagSizePercent(100);
    }
    setCalcOutOfBag(Utils.getFlag('O', options));
    setStoreOutOfBagPredictions(Utils.getFlag("store-out-of-bag-predictions", options));
    setOutputOutOfBagComplexityStatistics(Utils.getFlag("output-out-of-bag-complexity-statistics", options));
    setPrintClassifiers(Utils.getFlag("print", options));
    setComputeAttributeImportance(Utils.getFlag("attribute-importance", options));
    String iterations = Utils.getOption('I', options);
    if (iterations.length() != 0) {
        setNumIterations(Integer.parseInt(iterations));
    } else {
        setNumIterations(defaultNumberOfIterations());
    }
    String numSlots = Utils.getOption("num-slots", options);
    if (numSlots.length() != 0) {
        setNumExecutionSlots(Integer.parseInt(numSlots));
    } else {
        setNumExecutionSlots(1);
    }
    RandomTree classifier = ((RandomTree) AbstractClassifier.forName(defaultClassifierString(), options));
    classifier.setComputeImpurityDecreases(m_computeAttributeImportance);
    setDoNotCheckCapabilities(classifier.getDoNotCheckCapabilities());
    setSeed(classifier.getSeed());
    setDebug(classifier.getDebug());
    setNumDecimalPlaces(classifier.getNumDecimalPlaces());
    setBatchSize(classifier.getBatchSize());
    classifier.setDoNotCheckCapabilities(true);
    // Set base classifier and options
    setClassifier(classifier);
    Utils.checkForRemainingOptions(options);
}
