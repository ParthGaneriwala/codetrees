@Override
public void initializeClassifier(Instances data) throws Exception {
    m_NumItsThisSession = 0;
    if (m_TrainingData == null) {
        super.buildClassifier(data);
        // can classifier handle the data?
        getCapabilities().testWithFail(data);
        // remove instances with missing class
        data = new Instances(data);
        data.deleteWithMissingClass();
        m_ZeroR = new weka.classifiers.rules.ZeroR();
        m_ZeroR.buildClassifier(data);
        m_NumClasses = data.numClasses();
        m_Betas = new double[m_Classifiers.length];
        m_NumIterationsPerformed = 0;
        m_TrainingData = new Instances(data);
        m_RandomInstance = new Random(m_Seed);
        m_NumIterationsPerformed = 0;
        if ((m_UseResampling) || (!(m_Classifier instanceof WeightedInstancesHandler))) {
            // Normalize weights so that they sum to one and can be used as sampling
            // probabilities
            double sumProbs = m_TrainingData.sumOfWeights();
            for (int i = 0; i < m_TrainingData.numInstances(); i++) {
                m_TrainingData.instance(i).setWeight(m_TrainingData.instance(i).weight() / sumProbs);
            }
        }
    } else {
        Classifier[] temp = new Classifier[m_Classifiers.length + m_NumIterations];
        System.arraycopy(m_Classifiers, 0, temp, 0, m_Classifiers.length);
        Classifier[] newOnes = AbstractClassifier.makeCopies(m_Classifier, m_NumIterations);
        System.arraycopy(newOnes, 0, temp, m_Classifiers.length, newOnes.length);
        m_Classifiers = temp;
        double[] tempBetas = new double[m_Betas.length + m_NumIterations];
        System.arraycopy(m_Betas, 0, tempBetas, 0, m_Betas.length);
        m_Betas = tempBetas;
    }
}
