protected AttrTypes testsPerClassType(int classType, EstTypes estTypes) {
    // in none of the estimators yet is the estimation depending on the class
    // type
    // since this could change the basic structure taken from checkclassifiers
    // is kept here
    // test A: simple test - if can estimate
    AttrTypes attrTypes = new AttrTypes();
    AttrTypes at = new AttrTypes(Attribute.NOMINAL);
    attrTypes.nominal = canEstimate(at, estTypes.supervised, classType)[0];
    at = new AttrTypes(Attribute.NUMERIC);
    attrTypes.numeric = canEstimate(at, estTypes.supervised, classType)[0];
    attrTypes.string = false;
    attrTypes.date = false;
    attrTypes.relational = false;
    if (attrTypes.oneIsSet()) {
        Vector<Integer> attributesSet = attrTypes.getVectorOfAttrTypes();
        // make tests for each attribute
        for (int i = 0; i < attributesSet.size(); i++) {
            AttrTypes workAttrTypes = new AttrTypes(attributesSet.elementAt(i).intValue());
            // test B: weights change estimate or not
            if (estTypes.weighted) {
                instanceWeights(workAttrTypes, classType);
            }
            if (classType == Attribute.NOMINAL) {
                int numClasses = 4;
                canHandleNClasses(workAttrTypes, numClasses);
            }
            // tests with class not the last attribute and the attribute not the
            // first
            // if (!multiInstance) {
            int numAtt = 4;
            canHandleClassAsNthAttribute(workAttrTypes, numAtt, 0, classType, 1);
            // TODOTODOcanHandleAttrAsNthAttribute(workAttrTypes, numAtt, 2,
            // classType);
            // }
            canHandleZeroTraining(workAttrTypes, classType);
            boolean handleMissingAttributes = canHandleMissing(workAttrTypes, classType, true, false, 20)[0];
            if (handleMissingAttributes) {
                canHandleMissing(workAttrTypes, classType, true, false, 100);
            }
            boolean handleMissingClass = canHandleMissing(workAttrTypes, classType, false, true, 20)[0];
            if (handleMissingClass) {
                canHandleMissing(workAttrTypes, classType, false, true, 100);
            }
            correctBuildInitialisation(workAttrTypes, classType);
            datasetIntegrity(workAttrTypes, classType, handleMissingAttributes, handleMissingClass);
            if (estTypes.incremental) {
                incrementingEquality(workAttrTypes, classType);
            }
        }
    }
    return attrTypes;
}
