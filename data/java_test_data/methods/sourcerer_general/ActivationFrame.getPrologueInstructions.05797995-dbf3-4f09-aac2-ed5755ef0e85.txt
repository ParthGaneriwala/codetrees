public Vector getPrologueInstructions() {
    int stackSize = getStackSize();
    Vector prologueList = new Vector();
    prologueList.addElement(tab + "# FUNCTION PROLOGUE" + newLine);
    // Set up the stack
    prologueList.addElement(tab + "subu $sp, $sp, " + stackSize + newLine);
    // Save the callee-saved registers
    int offSetFromSP = // The static link
    1 + // The parameters
    maxOutgoingParams + // The first callee-saved register ($s0)
    1;
    int offSetInBytes = offSetFromSP * WORDSIZE;
    int i;
    for (i = 0; i < numRegistersUsed; i++) {
        if (i > 7)
            break;
        String regToSave = "$s" + i;
        prologueList.addElement(tab + "sw " + regToSave + ", " + offSetInBytes + "($sp)" + newLine);
        offSetFromSP++;
        offSetInBytes = offSetFromSP * WORDSIZE;
    }
    // Update the offset to cover for the remaining empty callee-saved registers area (if any)
    if (i <= 7)
        offSetFromSP += 7 - i;
    // Save the return address
    // The caller-saved register region
    offSetFromSP += 10;
    offSetInBytes = offSetFromSP * WORDSIZE;
    prologueList.addElement(tab + "sw $ra, " + offSetInBytes + "($sp)" + newLine);
    // Save the frame pointer
    // The caller-saved register region
    offSetFromSP++;
    offSetInBytes = offSetFromSP * WORDSIZE;
    prologueList.addElement(tab + "sw $fp, " + offSetInBytes + "($sp)" + newLine);
    // Update the frame pointer
    prologueList.addElement(tab + "addu $fp, $sp, " + stackSize + newLine);
    prologueList.addElement(tab + "# END FUNCTION PROLOGUE" + newLine + newLine);
    return prologueList;
}
