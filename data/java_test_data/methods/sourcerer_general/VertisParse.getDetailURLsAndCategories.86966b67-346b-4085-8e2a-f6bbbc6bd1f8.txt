@Override
public /*
	 * Give a file name that contains the product listing from the ad page.
	 * This is HTML between the comments <!-- Items: Start --> and <!-- Items: End -->
	 * Returns a file name containing the categories and URL information in XML
	 * following the schema specified in Detail_CategoryOutputFormat.xsd.
	 */
String getDetailURLsAndCategories(String filename, String baseURL, String pageNum) {
    // File content = new File(filename);
    AndFilter anchor = new AndFilter(new TagNameFilter("a"), new NotFilter(new HasAttributeFilter("id", null)));
    // attempted to find a better filter so that only scripts containing categories were extracted.
    // AndFilter script = new AndFilter(new TagNameFilter("script"),new StringFilter("cat["));
    // new TagNameFilter("script")script
    OrFilter filter = new OrFilter(new TagNameFilter("script"), anchor);
    String output = "." + sep + "Test_Output" + sep + "TestOutput.xml";
    try {
        Parser parse = new Parser(filename);
        NodeList list = parse.extractAllNodesThatMatch(filter);
        FileOutputStream fos = new FileOutputStream(output);
        XMLOutputter xmlOut = new XMLOutputter();
        Document outDoc = new Document();
        Element root = new Element("Items");
        Namespace outputNS = Namespace.getNamespace("tns", constants.XML_Namespaces.Detail_CategoryOutputFormat);
        root.setNamespace(outputNS);
        Namespace xsiNS = Namespace.getNamespace("xsi", "http://www.w3.org/2001/XMLSchema-instance");
        root.setAttribute(new Attribute("schemaLocation", "Detail_CategoryOutputFormat ../XML_Formats/Detail_CategoryOutputFormat.xsd", xsiNS));
        root.setAttribute(new Attribute("Date", ""));
        root.setAttribute(new Attribute("pageNum", pageNum));
        root.setAttribute(new Attribute("StoreName", storeName));
        outDoc.setRootElement(root);
        // TODO comment out .setFormat line to remove whitespace
        xmlOut.setFormat(Format.getPrettyFormat());
        Element detailURL = new Element("detailURL").addContent("value");
        detailURL.setNamespace(outputNS);
        NodeList scriptList = list.extractAllNodesThatMatch(new TagNameFilter("script"));
        list.keepAllNodesThatMatch(new TagNameFilter("a"));
        System.out.println(list.size());
        for (int a = 0; a < list.size(); a++) {
            // System.out.println(list.elementAt(a).toHtml());
            // .setContent(detailURL);
            Element i = new Element("Item");
            i.setNamespace(outputNS);
            root.addContent(i);
            LinkTag link = (LinkTag) list.elementAt(a);
            i.addContent(parseLinkTag(link, baseURL));
            String scriptCode = null;
            ScriptTag scriptTag = null;
            do {
                scriptTag = (ScriptTag) scriptList.remove(0);
                scriptCode = scriptTag.getScriptCode();
            } while (!scriptCode.startsWith("cat["));
            i.addContent(parseScriptTag(scriptTag));
        }
        xmlOut.output(outDoc, fos);
        /*if(list.size()>0)
				System.out.println(list.elementAt(0).toString());*/
        fos.close();
    } catch (Exception e) {
        System.out.println("Parse exception: " + e.toString());
    } finally {
    }
    return output;
}
