@Override
public String applyForTofu(String str, List<SoyData> args) {
    int maxCharsBetweenWordBreaks;
    try {
        maxCharsBetweenWordBreaks = args.get(0).integerValue();
    } catch (SoyDataException sde) {
        throw new IllegalArgumentException("Could not parse 'insertWordBreaks' parameter as integer.");
    }
    StringBuilder result = new StringBuilder();
    // These variables keep track of important state while looping through the string below.
    // whether we're inside an HTML tag
    boolean isInTag = false;
    // whether we might be inside an HTML entity
    boolean isMaybeInEntity = false;
    // number of characters since the last word break
    int numCharsWithoutBreak = 0;
    for (int codePoint, i = 0; i < str.length(); i += Character.charCount(codePoint)) {
        codePoint = str.codePointAt(i);
        // If hit maxCharsBetweenWordBreaks, and next char is not a space, then add <wbr>.
        if (numCharsWithoutBreak >= maxCharsBetweenWordBreaks && codePoint != ' ') {
            result.append("<wbr>");
            numCharsWithoutBreak = 0;
        }
        if (isInTag) {
            // If inside an HTML tag and we see '>', it's the end of the tag.
            if (codePoint == '>') {
                isInTag = false;
            }
        } else if (isMaybeInEntity) {
            switch(codePoint) {
                // that just ended counts as one char, so increment numCharsWithoutBreak.
                case ';':
                    isMaybeInEntity = false;
                    ++numCharsWithoutBreak;
                    break;
                // now we're inside and HTML tag.
                case '<':
                    isMaybeInEntity = false;
                    isInTag = true;
                    break;
                // correct the state and reset the numCharsWithoutBreak since we just saw a space.
                case ' ':
                    isMaybeInEntity = false;
                    numCharsWithoutBreak = 0;
                    break;
            }
        } else {
            // !isInTag && !isInEntity
            switch(codePoint) {
                // When not within a tag or an entity and we see '<', we're now inside an HTML tag.
                case '<':
                    isInTag = true;
                    break;
                // When not within a tag or an entity and we see '&', we might be inside an entity.
                case '&':
                    isMaybeInEntity = true;
                    break;
                // When we see a space, reset the numCharsWithoutBreak count.
                case ' ':
                    numCharsWithoutBreak = 0;
                    break;
                // When we see a non-space, increment the numCharsWithoutBreak.
                default:
                    ++numCharsWithoutBreak;
                    break;
            }
        }
        // In addition to adding <wbr>s, we still have to add the original characters.
        result.appendCodePoint(codePoint);
    }
    return result.toString();
}
