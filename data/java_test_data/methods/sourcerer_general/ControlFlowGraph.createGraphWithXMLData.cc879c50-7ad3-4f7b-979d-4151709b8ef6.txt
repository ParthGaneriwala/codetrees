public void createGraphWithXMLData() {
    System.out.println("====createGraphWithXMLData===");
    int numIns = nodesInfo.size();
    System.out.println(numIns);
    // Map of label string versus the corresponding cf node
    LinkedHashMap<String, ControlFlowNode> labelStrVsNodes = new LinkedHashMap<String, ControlFlowNode>();
    ControlFlowNode controlFlowNode = new ControlFlowNode();
    controlFlowNode.setFromXml(true);
    ControlFlowNode lastControlFlowNode = new ControlFlowNode();
    lastControlFlowNode.setFromXml(true);
    ControlFlowNode targetNode = null;
    // String currentLabel = "";
    // int nodeCount = 0;
    boolean startNodeFound = false;
    boolean endNodeFound = false;
    ControlFlowNode startControlFlowNode = new ControlFlowNode();
    startControlFlowNode.setFromXml(true);
    for (int i = 0; i < numIns; i++) {
        // finding first and last nodes ----> starting point and end point
        System.out.println("entering for loop ----" + i);
        NodeInfo nodeInfo = nodesInfo.get(i);
        if (nodeInfo.isStartNode()) {
            // finding first node and adding to linkedhashmap
            System.out.println("starting node found");
            startNodeFound = true;
            // System.out.println("------");
            // System.out.println(nodeInfo.getInstrctionsInfo().size());
            controlFlowNode.setInstructions(new Vector(nodeInfo.getInstrctionsInfo()));
            System.out.println("--------- 0");
            controlFlowNode.setName(nodeInfo.getName());
            startControlFlowNode.setInstructions(new Vector(nodeInfo.getInstrctionsInfo()));
            startControlFlowNode.setName(nodeInfo.getName());
            System.out.println("--------- 1");
            addNode(controlFlowNode);
            System.out.println("--------- 2");
            labelStrVsNodes.put(nodeInfo.getName(), controlFlowNode);
            System.out.println("loop " + i);
        } else if (nodeInfo.isEndNode()) {
            // finding last node but not adding now
            System.out.println("end node found");
            endNodeFound = true;
            lastControlFlowNode.setInstructions(new Vector(nodeInfo.getInstrctionsInfo()));
            lastControlFlowNode.setName(nodeInfo.getName());
        }
        /*else if(startNodeFound && endNodeFound){
				System.out.println("both nodes found");
				break;
			}*/
        System.out.println("loop count " + i);
    }
    for (NodeInfo nodeInfo : nodesInfo) {
        // adding all nodes to hashmap
        System.out.println("adding all nodes");
        if (nodeInfo.isStartNode() || nodeInfo.isEndNode())
            continue;
        controlFlowNode = new ControlFlowNode();
        controlFlowNode.setFromXml(true);
        controlFlowNode.setInstructions(new Vector(nodeInfo.getInstrctionsInfo()));
        controlFlowNode.setName(nodeInfo.getName());
        addNode(controlFlowNode);
        labelStrVsNodes.put(nodeInfo.getName(), controlFlowNode);
    }
    addNode(lastControlFlowNode);
    // adding last node which is found previously
    labelStrVsNodes.put(lastControlFlowNode.getName(), lastControlFlowNode);
    Set entries = labelStrVsNodes.entrySet();
    Iterator iter = entries.iterator();
    // nodeCount = 0;
    while (iter.hasNext()) {
        System.out.println("no of times");
        Map.Entry entry = (Map.Entry) iter.next();
        ControlFlowNode cfNode = (ControlFlowNode) entry.getValue();
        System.out.println("finding for " + cfNode.getName());
        for (NodeInfo ndInfo : nodesInfo) {
            System.out.println("loop no");
            if (cfNode.getName().equals(ndInfo.getName()) && ndInfo.getLeftChilds() != null && ndInfo.getLeftChilds().size() > 0) {
                System.out.println("enter into if leftchilds");
                NodeInfo leftNode = null;
                for (NodeInfo localTargetNode : nodesInfo) {
                    if (localTargetNode.getId() == ndInfo.getLeftChilds().get(0)) {
                        leftNode = localTargetNode;
                        System.out.println("left child of " + ndInfo.getName() + " is " + leftNode.getName());
                    }
                }
                if (labelStrVsNodes.get(leftNode.getName()) != null) {
                    System.out.println("yes finded in the label String vs Nodes linked hash map");
                    targetNode = new ControlFlowNode();
                    targetNode = labelStrVsNodes.get(leftNode.getName());
                } else {
                    System.out.println("not finded in linked hash map");
                }
                if (leftNode != null) {
                    System.out.println("adding left edge");
                    // targetNode.setName(leftNode.getName());
                    // targetNode.setInstructions(new Vector(leftNode.getInstrctionsInfo()));
                    Edge edge = new Edge(cfNode, targetNode);
                    addDirectedEdge(edge, cfNode, targetNode);
                } else {
                    System.out.println("no left node" + cfNode.getName());
                }
            }
            if (cfNode.getName().equals(ndInfo.getName()) && ndInfo.getRightChilds() != null && ndInfo.getRightChilds().size() > 0) {
                System.out.println("enter into if rightchilds");
                NodeInfo rightNode = null;
                for (NodeInfo localTargetNode : nodesInfo) {
                    if (localTargetNode.getId() == ndInfo.getRightChilds().get(0)) {
                        rightNode = localTargetNode;
                        System.out.println("right child of " + ndInfo.getName() + " is " + rightNode.getName());
                    }
                }
                if (labelStrVsNodes.get(rightNode.getName()) != null) {
                    System.out.println("yes finded in the label String vs Nodes linked hash map");
                    targetNode = new ControlFlowNode();
                    targetNode = labelStrVsNodes.get(rightNode.getName());
                } else {
                    System.out.println("not finded in linked hash map");
                }
                if (rightNode != null) {
                    System.out.println("adding right edge");
                    // targetNode = new ControlFlowNode();
                    // targetNode.setName(rightNode.getName());
                    // targetNode.setInstructions(new Vector(rightNode.getInstrctionsInfo()));
                    Edge edge = new Edge(cfNode, targetNode);
                    addDirectedEdge(edge, cfNode, targetNode);
                } else {
                    System.out.println("no right node" + cfNode.getName());
                }
            }
        }
    }
    System.out.println("not here");
    for (int a = 0; a < getNumNodes(); a++) {
        ControlFlowNode node = (ControlFlowNode) getNode(a);
        System.out.println("label name" + node.getName());
        if (node.getNumOutgoingEdges() == 0) {
            endNode = node;
        // break;
        }
        if (node.getNumIncomingEdges() == 0) {
            startNode = node;
            System.out.println("found start node");
        }
    }
}
