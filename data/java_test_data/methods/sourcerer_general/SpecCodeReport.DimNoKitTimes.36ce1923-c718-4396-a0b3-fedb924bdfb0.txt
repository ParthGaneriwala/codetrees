public static List<KitTimesBean> DimNoKitTimes(String field, String type) {
    List<KitTimesBean> ktbList = new ArrayList<KitTimesBean>();
    Map<Long, String> map = MapResultService.getMsHistoryMap();
    List<Map.Entry<Long, String>> infoIds = new ArrayList<Map.Entry<Long, String>>(map.entrySet());
    // 排序
    Collections.sort(infoIds, new Comparator<Map.Entry<Long, String>>() {

        public int compare(Map.Entry<Long, String> o1, Map.Entry<Long, String> o2) {
            return (int) (o2.getKey() - o1.getKey());
        }
    });
    // 计算持续未出次数
    Map<String, Integer> nonKitTimesMap = new HashMap<String, Integer>();
    int count = 0;
    for (int i = 0; i < infoIds.size(); i++) {
        Map.Entry<Long, String> v = infoIds.get(i);
        if (CodeType.isBig(v.getValue())) {
            if (!nonKitTimesMap.containsKey("big")) {
                nonKitTimesMap.put("big", count);
            }
        } else {
            if (!nonKitTimesMap.containsKey("small")) {
                nonKitTimesMap.put("small", count);
            }
        }
        count++;
    }
    // 计算累计已经出次数
    Map<String, Integer> totalKitTimesMap = new HashMap<String, Integer>();
    for (int i = 0; i < infoIds.size(); i++) {
        Map.Entry<Long, String> v = infoIds.get(i);
        if (CodeType.isBig(v.getValue())) {
            count = 0;
            if (totalKitTimesMap.containsKey("big")) {
                count = totalKitTimesMap.remove("big");
            }
            count = count + 1;
            totalKitTimesMap.put("big", count);
        } else {
            count = 0;
            if (totalKitTimesMap.containsKey("small")) {
                count = totalKitTimesMap.remove("small");
            }
            count = count + 1;
            totalKitTimesMap.put("small", count);
        }
    }
    ktbList.add(new KitTimesBean(1, nonKitTimesMap.get("small"), Double.parseDouble(totalKitTimesMap.get("small").toString())));
    ktbList.add(new KitTimesBean(2, nonKitTimesMap.get("big"), Double.parseDouble(totalKitTimesMap.get("big").toString())));
    ktbList.add(new KitTimesBean(0, 0, 0.0));
    ktbList.addAll(DimNoKitTimes2(field, type));
    return ktbList;
}
