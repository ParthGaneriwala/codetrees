public void stateChanged(ChangeEvent e) {
    if (e.getSource() == theGUI.filterSlider) {
        if (!currentlyInUndoMethod) {
            history.add(0, new HistoryObject(HistoryObject.ACTION.CHANGE_FILTER_SLIDER, new Integer(oldFilterValue)));
        }
        theGUI.filterSlider.setEnabled(false);
        oldFilterValue = theGUI.filterSlider.getValue();
        if (lastSelected != null) {
            updateDetailsInScreen(lastSelected);
        }
        theGUI.filterSlider.setEnabled(true);
    } else if (e.getSource() == theGUI.corpusSlider) {
        theGUI.corpusSlider.setEnabled(false);
        int x = theGUI.corpusSlider.getValue();
        if (!currentlyInUndoMethod) {
            history.add(0, new HistoryObject(HistoryObject.ACTION.CHANGE_CORPUS_SLIDER, new Integer(oldCorpusValue)));
        }
        oldCorpusValue = x;
        int offset = 0;
        int indexA = 0;
        int indexB = 0;
        if (x == theGUI.corpusSlider.getMaximum()) {
            offset = 0;
            indexA = x;
            indexB = x - 10;
            percentageA = 100;
            percentageB = 0;
        } else {
            offset = x % 10;
            indexA = x - offset;
            indexB = x + (10 - offset);
            percentageA = 100 - (10 * offset);
            percentageB = 0 + (10 * offset);
        }
        corpusA = corpuses.get(new Integer(indexA));
        corpusB = corpuses.get(new Integer(indexB));
    }
    for (WordNode wn : currentNodes.values()) {
        updateNodeStatus(wn);
    }
    // TODO: fix this!
    Object[] sArray = currentNodes.keySet().toArray();
    for (int x = 0; x < sArray.length; x++) {
        String s = (String) sArray[x];
        WordNode wn = currentNodes.get(s);
        if (wn != null && wn.isNodeOpen()) {
            updateNodeLinks(wn, wordIndex.lookupCombinedWordNeighbours(wn.getWord(), corpusA, percentageA, corpusB, percentageB, Corpus.LIMIT_TYPE.NUMBER, oldFilterValue), false);
        }
    }
    theGUI.corpusSlider.setEnabled(true);
}
