public Vector<ModeleIndividu> creation(Vector<Individu> individusRevenus, int ressource) {
    Vector<ModeleIndividu> v = new Vector();
    int futurconso = 0;
    Random rand = new Random();
    if (individusRevenus.size() != 0) {
        // On a une chance sur deux de recreer le dernier individu qui vient d'arriver
        int n = rand.nextInt(2);
        if (n == 1) {
            if (ressource - individusRevenus.get(0).getReserve() > 0) {
                // si on peut créer l'individu, on le créé
                GenetiqueBrain g = new GenetiqueBrain(((GenetiqueBrain) individusRevenus.get(0).getBrain()).getGenome());
                ModeleIndividu m = new ModeleIndividu(individusRevenus.get(0).getTaille(), individusRevenus.get(0).getReserve(), g);
                v.add(m);
                futurconso += individusRevenus.get(0).getReserve();
            }
        }
        // On a une chance sur 8 de créer le dernier individu revenu mais muté
        n = rand.nextInt(8);
        if (n == 7) {
            // On mute le genome du dernier individu revenu
            Genome old_g = ((GenetiqueBrain) individusRevenus.get(0).getBrain()).getGenome();
            GenetiqueBrain g = new GenetiqueBrain(faireMutation(old_g));
            if (ressource - (futurconso + individusRevenus.get(0).getReserve()) > 0) {
                // si on peut créer l'individu, on le créé
                ModeleIndividu m = new ModeleIndividu(individusRevenus.get(0).getTaille(), individusRevenus.get(0).getReserve(), g);
                v.add(m);
                futurconso += individusRevenus.get(0).getReserve();
            }
        }
        // On a une chance sur 8 de créer le dernier individu revenu mais croisé avec un des genomes des individusRevenus
        n = rand.nextInt(8);
        if (n == 7) {
            int n2 = rand.nextInt(individusRevenus.size());
            // On croise le genome du dernier individu revenu
            Genome old_g1 = ((GenetiqueBrain) individusRevenus.get(0).getBrain()).getGenome();
            Genome old_g2 = ((GenetiqueBrain) individusRevenus.get(n2).getBrain()).getGenome();
            GenetiqueBrain g = new GenetiqueBrain(faireCroisement(old_g1, old_g2));
            if (ressource - (futurconso + individusRevenus.get(0).getReserve()) > 0) {
                // si on peut créer l'individu, on le créé
                ModeleIndividu m = new ModeleIndividu(individusRevenus.get(0).getTaille(), individusRevenus.get(0).getReserve(), g);
                v.add(m);
                futurconso += individusRevenus.get(0).getReserve();
            }
        }
        // On a une chance sur 8 de créer un des individusRevenu à l'identique
        n = rand.nextInt(8);
        if (n == 7) {
            int n2 = rand.nextInt(individusRevenus.size());
            // On créé le genome de l'individu revenu n2
            Genome old_g = ((GenetiqueBrain) individusRevenus.get(n2).getBrain()).getGenome();
            GenetiqueBrain g = new GenetiqueBrain(old_g);
            if (ressource - (futurconso + individusRevenus.get(n2).getReserve()) > 0) {
                // si on peut créer l'individu, on le créé
                ModeleIndividu m = new ModeleIndividu(individusRevenus.get(n2).getTaille(), individusRevenus.get(n2).getReserve(), g);
                v.add(m);
                futurconso += individusRevenus.get(n2).getReserve();
            }
        }
        // On a une chance sur 8 de créer un des individusRevenu muté
        n = rand.nextInt(8);
        if (n == 7) {
            int n2 = rand.nextInt(individusRevenus.size());
            // On mute le genome de l'individu revenu n2
            Genome old_g = ((GenetiqueBrain) individusRevenus.get(n2).getBrain()).getGenome();
            GenetiqueBrain g = new GenetiqueBrain(faireMutation(old_g));
            if (ressource - (futurconso + individusRevenus.get(n2).getReserve()) > 0) {
                // si on peut créer l'individu, on le créé
                ModeleIndividu m = new ModeleIndividu(individusRevenus.get(n2).getTaille(), individusRevenus.get(n2).getReserve(), g);
                v.add(m);
                futurconso += individusRevenus.get(n2).getReserve();
            }
        }
        // On a une chance sur 8 de créer un croisement d'individu à partir de 2 individusRevenu mutés
        n = rand.nextInt(8);
        if (n == 7) {
            int n2 = rand.nextInt(individusRevenus.size());
            int n3 = rand.nextInt(individusRevenus.size());
            // On croise le genome de l'individu revenu n2 avec celui de l'individu revenu n3
            Genome old_g1 = ((GenetiqueBrain) individusRevenus.get(n2).getBrain()).getGenome();
            Genome old_g2 = ((GenetiqueBrain) individusRevenus.get(n3).getBrain()).getGenome();
            GenetiqueBrain g = new GenetiqueBrain(faireCroisement(old_g1, old_g2));
            if (ressource - (futurconso + individusRevenus.get(n2).getReserve()) > 0) {
                // si on peut créer l'individu, on le créé
                ModeleIndividu m = new ModeleIndividu(individusRevenus.get(n2).getTaille(), individusRevenus.get(n2).getReserve(), g);
                v.add(m);
            }
        }
    } else {
        // pas encore d'individus revenus -> on en créé
        // On créé 5 individu au maximum
        int n = rand.nextInt(5);
        for (int i = 0; i < n && ((ressource - (futurconso + 20 * Deplacement.cout)) > 0); i++) {
            // On donne à l'individu une autonomie comprise entre 20 et 40 deplacements
            // (tant que la colonie a assez de ressources pour le créer)
            int taille = 0;
            while (taille < 20 * Deplacement.getCout(taille)) {
                taille = rand.nextInt(40) * Deplacement.cout;
            }
            int reserve = 0;
            while ((reserve < 20 * Deplacement.getCout(taille)) && ((ressource - (futurconso + reserve)) > 0)) {
                // Il est inutile de créer un individu avec une reserve rempli à fond
                // L'objectif étant de ramener plus de nourriture que ce qu'à couté la création de l'individu
                reserve = rand.nextInt(10) * taille;
            }
            ModeleIndividu m = new ModeleIndividu(taille, reserve, new GenetiqueBrain(new Genome()));
            v.add(m);
            futurconso += reserve;
        }
    }
    return v;
}
