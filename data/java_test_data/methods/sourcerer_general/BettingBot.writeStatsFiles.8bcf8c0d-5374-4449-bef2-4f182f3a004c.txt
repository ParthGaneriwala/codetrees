private void writeStatsFiles(int currNumber) {
    int[] tourneyNumbers = new int[maxStoredTourneys];
    float[] oldChipsStandings = new float[maxStoredTourneys];
    String[] statisticToSave = new String[maxStatisticsToSave];
    float[] statisticEntry = new float[maxStatisticsToSave];
    statisticToSave[0] = "average";
    statisticToSave[1] = "median";
    statisticEntry[0] = (float) (averageCurrent);
    statisticEntry[1] = (float) (medianCurrent);
    for (int j = 0; j < maxStatisticsToSave; j++) {
        int counting = 0;
        DataInputStream in = null;
        try {
            in = new DataInputStream(new BufferedInputStream(new FileInputStream("./BBWebServer/users/" + statisticToSave[j] + ".db")));
            while (true) {
                tourneyNumbers[counting] = in.readInt();
                oldChipsStandings[counting] = in.readFloat();
                counting = counting + 1;
            }
        } catch (FileNotFoundException e) {
        // new user
        } catch (EOFException e) {
        // finished reading file
        } catch (IOException e) {
            logException(e);
        } finally {
            FileHelper.closeQuietly(in);
        }
        tellProgrammers("statscounting is " + counting);
        DataOutputStream out = null;
        try {
            out = new DataOutputStream(new BufferedOutputStream(new FileOutputStream("./BBWebServer/users/" + statisticToSave[j] + ".db")));
            int testcounter = 0;
            for (int i = 0; i < counting; i++) {
                if (tourneyNumbers[i] > currNumber - maxStoredTourneys + 200) {
                    testcounter = testcounter + 1;
                    out.writeInt(tourneyNumbers[i]);
                    out.writeFloat(oldChipsStandings[i]);
                }
            }
            out.writeInt(currNumber);
            out.writeFloat(statisticEntry[j]);
            tellProgrammers("wrote back " + testcounter + " old entries for stat and one new, currnumber: " + currNumber + ".");
        } catch (FileNotFoundException e) {
            logException(e);
        // angeblich wird ja ein neues automatisch gemacht...
        } catch (IOException e) {
            logException(e);
        } finally {
            FileHelper.closeQuietly(out);
        }
    }
}
