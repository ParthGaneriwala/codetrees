// </editor-fold>
private void BCreateStudentActionPerformed(java.awt.event.ActionEvent evt) {
    try {
        SjsuUniversity impl = (SjsuUniversity) Naming.lookup("rmi://localhost/SJSU");
        InstructorVO instructor = new InstructorVO();
        String EmpId = (TEmpId.getText());
        String FirstName = TFirshtName.getText();
        String LastName = TLastName.getText();
        String Address = TAddress.getText();
        String City = TCity.getText();
        String State = (String) CState.getSelectedItem();
        int Zip = 0;
        try {
            Zip = Integer.valueOf(TZip.getText());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Please enter Digits in Zip Code");
            return;
        }
        String Dept = TDept.getText();
        String PDay = (String) CDay.getSelectedItem();
        int StartTime = 0;
        int EndTime = 0;
        try {
            StartTime = Integer.valueOf(TStartTime.getText());
            EndTime = Integer.valueOf(TEndTime.getText());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Please enter Digits in time");
            return;
        }
        int roomNo = 0;
        String building = TBuilding.getText();
        try {
            roomNo = Integer.valueOf(TRoomNumber.getText());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Please enter Digits in time");
            return;
        }
        LocationVO loc = new LocationVO();
        loc.setBuilding(building);
        loc.setRoom(roomNo);
        MeetingHrs meeting = new MeetingHrs();
        meeting.setDay(PDay);
        meeting.setStartHr(StartTime);
        meeting.setEndHr(EndTime);
        instructor.setEmployeeID(EmpId);
        instructor.setFisrtName(FirstName);
        instructor.setLastName(LastName);
        instructor.setAddress(Address);
        instructor.setCity(City);
        instructor.setState(State);
        instructor.setZip(Zip);
        instructor.setDepartment(Dept);
        instructor.setOfficeHours(meeting);
        instructor.setLocation(loc);
        impl.createInstructor(instructor);
        JOptionPane.showMessageDialog(null, "Instructor created successfully");
        SjsuClient mainclientmenu = new SjsuClient();
        mainclientmenu.setVisible(true);
        this.setVisible(false);
    } catch (SjsuUniversiryException e) {
        JOptionPane.showMessageDialog(null, "Error while createing student : " + e.getMsg());
    } catch (Exception ex) {
        System.out.println(ex.getMessage());
    }
// TODO add your handling code here:
}
