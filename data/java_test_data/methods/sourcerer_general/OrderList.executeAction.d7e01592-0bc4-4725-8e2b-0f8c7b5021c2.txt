private void executeAction(final List<BeanObject> items, String action) {
    if (items == null) {
        return;
    }
    final List listeners = new ArrayList();
    for (BeanObject item : items) {
        if ("delete".equals(action)) {
            DeleteListener listener = new DeleteListener();
            listeners.add(listener);
            deleteGoods(item.getString(IGoods.ID), listener);
        } else if ("new".equals(action)) {
            if (!Boolean.TRUE.equals(item.get(IGoods.NEWADDED))) {
                item.set(IGoods.NEWADDED, Boolean.TRUE);
                UpdateListener listener = new UpdateListener();
                listeners.add(listener);
                updateGoods(item, listener);
            }
        } else if ("notnew".equals(action)) {
            if (!Boolean.FALSE.equals(item.get(IGoods.NEWADDED))) {
                item.set(IGoods.NEWADDED, Boolean.FALSE);
                UpdateListener listener = new UpdateListener();
                listeners.add(listener);
                updateGoods(item, listener);
            }
        } else if ("hot".equals(action)) {
            if (!Boolean.TRUE.equals(item.get(IGoods.HOTSOLD))) {
                item.set(IGoods.HOTSOLD, Boolean.TRUE);
                UpdateListener listener = new UpdateListener();
                listeners.add(listener);
                updateGoods(item, listener);
            }
        } else if ("nothot".equals(action)) {
            if (!Boolean.FALSE.equals(item.get(IGoods.HOTSOLD))) {
                item.set(IGoods.HOTSOLD, Boolean.FALSE);
                UpdateListener listener = new UpdateListener();
                listeners.add(listener);
                updateGoods(item, listener);
            }
        } else if ("best".equals(action)) {
            if (!Boolean.TRUE.equals(item.get(IGoods.BESTSOLD))) {
                item.set(IGoods.BESTSOLD, Boolean.TRUE);
                UpdateListener listener = new UpdateListener();
                listeners.add(listener);
                updateGoods(item, listener);
            }
        } else if ("notbest".equals(action)) {
            if (!Boolean.FALSE.equals(item.get(IGoods.BESTSOLD))) {
                item.set(IGoods.BESTSOLD, Boolean.FALSE);
                UpdateListener listener = new UpdateListener();
                listeners.add(listener);
                updateGoods(item, listener);
            }
        }
    }
    new WaitService(new WaitService.Job() {

        public boolean isReady() {
            if (listeners.size() != items.size()) {
                return false;
            }
            for (int i = 0; i < listeners.size(); i++) {
                if (listeners.get(i) instanceof DeleteListener) {
                    if (!((DeleteListener) listeners.get(i)).isFinished()) {
                        return false;
                    }
                } else if (listeners.get(i) instanceof UpdateListener) {
                    if (!((UpdateListener) listeners.get(i)).isFinished()) {
                        return false;
                    }
                } else {
                    throw new RuntimeException("Unknown listener type:" + listeners.get(i));
                }
            }
            return false;
        }

        public void run() {
            toolBar.refresh();
        }
    });
}
