public void calEdgeWeight(CyNetwork inputNetwork) {
    String callerID = "In Algorithm.calEdgeWeight";
    String networkID = inputNetwork.getIdentifier();
    if (!edgeWeightNetworkMap.containsKey(networkID)) {
        double weight;
        int degree1, degree2, min;
        ArrayList al;
        TreeMap edgeWeightsMap = new TreeMap(new Comparator() {

            public int compare(Object o1, Object o2) {
                double d1 = ((Double) o1).doubleValue();
                double d2 = ((Double) o2).doubleValue();
                if (d1 == d2) {
                    return 0;
                } else if (d1 < d2) {
                    return 1;
                } else
                    return -1;
            }
        });
        Iterator edges = inputNetwork.edgesIterator();
        while (edges.hasNext() && !cancelled) {
            // for each edge, cal the weight
            weight = 0.0;
            int common = 0;
            Edge e = (Edge) edges.next();
            int nFrom = e.getSource().getRootGraphIndex();
            int nTo = e.getTarget().getRootGraphIndex();
            // cal the edge weght
            int[] neighbors1 = getNeighborArray(inputNetwork, nFrom);
            int[] neighbors2 = getNeighborArray(inputNetwork, nTo);
            Arrays.sort(neighbors1);
            for (int i = 0; i < neighbors2.length; i++) {
                int key = neighbors2[i];
                if (// exist a common neighbor of both nodes
                Arrays.binarySearch(neighbors1, key) >= 0)
                    common++;
            }
            common++;
            degree1 = inputNetwork.getDegree(e.getSource());
            degree2 = inputNetwork.getDegree(e.getTarget());
            min = degree1 < degree2 ? degree1 : degree2;
            weight = (double) (common) / (double) min;
            // add to the edge weights map
            if (edgeWeightsMap.containsKey(new Double(weight))) {
                al = (ArrayList) edgeWeightsMap.get(new Double(weight));
                al.add(new Integer(e.getRootGraphIndex()));
            } else {
                al = new ArrayList();
                al.add(new Integer(e.getRootGraphIndex()));
                edgeWeightsMap.put(new Double(weight), al);
            }
        }
        curEdgeWeights = edgeWeightsMap;
        edgeWeightNetworkMap.put(networkID, edgeWeightsMap);
    } else {
        curEdgeWeights = (TreeMap) edgeWeightNetworkMap.get(networkID);
    }
}
