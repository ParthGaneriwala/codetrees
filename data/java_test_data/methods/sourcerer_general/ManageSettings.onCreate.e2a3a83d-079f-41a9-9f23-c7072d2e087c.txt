@Override
public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    final ManageSettings finalthis = this;
    handler = new Handler() {

        @Override
        public void handleMessage(Message msg) {
            switch(msg.what) {
                case Messages.MSG_ADD_HOST:
                    {
                        Log.d(TAG, "MSG_ADD_HOST");
                        String host = (String) msg.obj;
                        host = host.trim();
                        if ("".equals(host)) {
                            // TODO: use a regex to check validity
                            new AlertDialog.Builder(finalthis).setTitle("Error").setMessage("Invalid host").setCancelable(true).setPositiveButton("Try again", new OnClickListener() {

                                @Override
                                public void onClick(DialogInterface dialog, int which) {
                                    finalthis.addHost("");
                                }
                            }).setNegativeButton("Cancel", new OnClickListener() {

                                @Override
                                public void onClick(DialogInterface dialog, int which) {
                                }
                            }).show();
                        } else if (hosts.contains(host)) {
                            final String finalhost = host;
                            new AlertDialog.Builder(finalthis).setTitle("Error").setMessage("Host is already being intercepted").setCancelable(true).setPositiveButton("Try again", new OnClickListener() {

                                @Override
                                public void onClick(DialogInterface dialog, int which) {
                                    finalthis.addHost(finalhost);
                                }
                            }).setNegativeButton("Cancel", new OnClickListener() {

                                @Override
                                public void onClick(DialogInterface dialog, int which) {
                                // do nothing
                                }
                            }).show();
                        } else {
                            storeRemoveHost(host, true);
                            PreferenceCategory category = (PreferenceCategory) findPreference("hosts");
                            HostPreference newPref = new HostPreference(finalthis, handler);
                            newPref.setTitle(host);
                            newPref.setHost(host);
                            newPref.setKey("host_" + host);
                            category.addPreference(newPref);
                        }
                        break;
                    }
                case Messages.MSG_REMOVE_HOST:
                    {
                        String host = (String) msg.obj;
                        Log.d(TAG, "MSG_REMOVE_HOST " + host);
                        storeRemoveHost(host, false);
                        PreferenceCategory category = (PreferenceCategory) findPreference("hosts");
                        Preference pref = findPreference("host_" + host);
                        category.removePreference(pref);
                        break;
                    }
            }
        }
    };
    SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(this);
    if (!preferences.contains("configured")) {
        new AlertDialog.Builder(this).setTitle("Check Redirect").setMessage("In order to use Check Redirect properly, when you " + "click on a link in the browser " + "you need to tell Android to use Check Redirect as the " + "default activity.").show();
        Editor editor = preferences.edit();
        editor.putBoolean("configured", true);
        for (String host : CheckRedirect.DEFAULT_HOSTS.split(",")) {
            editor.putString("host_" + host, host);
        }
        editor.putBoolean("enabled", true);
        editor.putString("browser", CheckRedirect.DEFAULT_BROWSER_PACKAGE + "," + CheckRedirect.DEFAULT_BROWSER_CLASS);
        editor.commit();
    }
    addPreferencesFromResource(R.xml.settings);
    Map<String, ?> all = preferences.getAll();
    for (String key : all.keySet()) {
        if (key.startsWith("host_")) {
            String host = (String) all.get(key);
            hosts.add(host);
        }
    }
    for (String host : hosts) {
        // use the sorted set here
        PreferenceCategory category = (PreferenceCategory) findPreference("hosts");
        HostPreference newPref = new HostPreference(this, handler);
        newPref.setTitle(host);
        newPref.setHost(host);
        newPref.setKey("host_" + host);
        category.addPreference(newPref);
    }
    ListPreference listPreference = (ListPreference) findPreference("browser");
    Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse("http://google.com"));
    intent.setComponent(null);
    PackageManager pm = getPackageManager();
    List<ResolveInfo> list = pm.queryIntentActivities(intent, 0);
    String[] entries = new String[list.size() - 1];
    String[] entryValues = new String[list.size() - 1];
    int i = 0;
    for (ResolveInfo info : list) {
        if (!info.activityInfo.name.equals("com.jamesots.android.checkredirect.CheckRedirect")) {
            try {
                ApplicationInfo appInfo = pm.getApplicationInfo(info.activityInfo.packageName, 0);
                Log.d(TAG, pm.getApplicationLabel(appInfo).toString());
                entries[i] = pm.getApplicationLabel(appInfo).toString();
            } catch (Exception e) {
                Log.d(TAG, e.toString());
            }
            entryValues[i] = info.activityInfo.packageName + "," + info.activityInfo.name;
            i++;
        }
        Log.d(TAG, info.activityInfo.packageName + " " + info.activityInfo.targetActivity + " " + info.activityInfo.name + " " + info.activityInfo.processName + " " + info.isDefault);
    }
    listPreference.setEntries(entries);
    listPreference.setEntryValues(entryValues);
    Log.d(TAG, "Managing settings");
}
