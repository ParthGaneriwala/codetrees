private static <RES> GettableFactory<RES> createFactory(Class<? extends NormalExpression> expressionClass) {
    // All reflection checks are done in generic-aware API generation.
    // Read generic NormalExpression type parameter of expression class.
    Type expressionType;
    {
        ParameterizedType normalExpressionType = null;
        for (Type inter : expressionClass.getGenericInterfaces()) {
            if (inter instanceof ParameterizedType == false) {
                continue;
            }
            ParameterizedType parameterizedType = (ParameterizedType) inter;
            if (!parameterizedType.getRawType().equals(NormalExpression.class)) {
                continue;
            }
            normalExpressionType = parameterizedType;
        }
        if (normalExpressionType == null) {
            throw new IllegalArgumentException("Expression does not directly implement " + NormalExpression.class.getName());
        }
        expressionType = normalExpressionType.getActualTypeArguments()[0];
    }
    // Read all methods of expression class and choose annotated ones.
    Method calculateMethod = null;
    final List<Method> dependencyMethods = new ArrayList<Method>(2);
    for (Method m : expressionClass.getMethods()) {
        if (m.getAnnotation(NormalExpression.Calculate.class) != null) {
            if (calculateMethod != null) {
                throw new IllegalArgumentException("Class " + expressionClass.getName() + " has more than one method with " + NormalExpression.Calculate.class.getName() + " annotation");
            }
            calculateMethod = m;
        }
        if (m.getAnnotation(NormalExpression.DependencyGetter.class) != null) {
            dependencyMethods.add(m);
        }
    }
    if (calculateMethod == null) {
        throw new IllegalArgumentException("Failed to found Class method with " + NormalExpression.Calculate.class.getName() + " annotation in " + expressionClass.getName());
    }
    Type methodReturnType = calculateMethod.getGenericReturnType();
    // Method is typically in anonymous class. Making it accessible is required.
    calculateMethod.setAccessible(true);
    // Prepare handling method return value (it's either a plain value or an optional wrapper).
    final ReturnValueHandler<RES> returnValueHandler;
    if (methodReturnType.equals(expressionType)) {
        returnValueHandler = new ReturnValueHandler<RES>() {

            Optional<? extends RES> castResult(Object resultObject) {
                // Type cast has been proven to be correct.
                return createOptional((RES) resultObject);
            }
        };
    } else {
        tryUnwrapOptional: {
            if (methodReturnType instanceof ParameterizedType) {
                ParameterizedType parameterizedType = (ParameterizedType) methodReturnType;
                if (parameterizedType.getRawType() == Optional.class) {
                    Type optionalParam = parameterizedType.getActualTypeArguments()[0];
                    boolean okToCast = false;
                    if (optionalParam instanceof WildcardType) {
                        WildcardType wildcardType = (WildcardType) optionalParam;
                        if (wildcardType.getUpperBounds()[0].equals(expressionType)) {
                            okToCast = true;
                        }
                    } else if (optionalParam.equals(expressionType)) {
                        okToCast = true;
                    }
                    if (okToCast) {
                        returnValueHandler = new ReturnValueHandler<RES>() {

                            Optional<? extends RES> castResult(Object resultObject) {
                                // Type cast has been proven to be correct.
                                return (Optional<? extends RES>) resultObject;
                            }
                        };
                        break tryUnwrapOptional;
                    }
                }
            }
            throw new IllegalArgumentException("Wrong return type " + methodReturnType + ", expected: " + expressionType);
        }
    }
    // Check that dependencies correspond to "calculate" method arguments.
    Type[] methodParamTypes = calculateMethod.getGenericParameterTypes();
    if (methodParamTypes.length != dependencyMethods.size()) {
        throw new IllegalArgumentException("Wrong number of agruments in calculate method " + calculateMethod);
    }
    // We depend on methods being ordered in Java reflection.
    for (int i = 0; i < methodParamTypes.length; i++) {
        Method depMethod = dependencyMethods.get(i);
        try {
            if (depMethod.getParameterTypes().length != 0) {
                throw new IllegalArgumentException("Dependency method should not have arguments");
            }
            Type depType = depMethod.getGenericReturnType();
            if (depType instanceof ParameterizedType == false) {
                throw new IllegalArgumentException("Dependency has wrong return type: " + depType);
            }
            ParameterizedType depParameterizedType = (ParameterizedType) depType;
            if (depParameterizedType.getRawType() != ValueSource.class) {
                throw new IllegalArgumentException("Dependency has wrong return type: " + depType);
            }
            // Method is typically in anonymous class. Making it accessible is required.
            depMethod.setAccessible(true);
        } catch (IllegalArgumentException e) {
            throw new IllegalArgumentException("Failed to process method " + depMethod, e);
        }
    }
    return new GettableFactory<RES>(dependencyMethods, returnValueHandler, calculateMethod);
}
