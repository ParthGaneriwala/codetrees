public ArrayList Dijkstra(QNode start, QNode finish, QNode[] qNodes) {
    if (start == finish)
        return new ArrayList();
    // Hashtable D = new Hashtable();
    // ArrayList Q = new ArrayList();
    D.clear();
    Q.clear();
    S.clear();
    for (int i = 0; i < qNodes.length; i++) {
        if (qNodes[i] == start)
            D.put(start, new Integer(0));
        else
            D.put(qNodes[i], new Integer(Integer.MAX_VALUE));
        Q.add(qNodes[i]);
    }
    while (Q.size() > 0) {
        QNode u = ExtractMin(D, Q);
        S.add(u);
        for (int i = 0; i < u.adj.length; i++) {
            if (u.adj[i] != null) {
                if (((Integer) D.get(u.adj[i])).intValue() > ((Integer) D.get(u)).intValue() + 1) {
                    D.put(u.adj[i], new Integer(((Integer) D.get(u)).intValue() + 1));
                }
            }
        }
    }
    ShortestPath.clear();
    QNode prev = finish;
    while (prev != start) {
        ShortestPath.add(prev);
        S.remove(prev);
        int min = Integer.MAX_VALUE;
        QNode new_prev = null;
        for (int i = 0; i < S.size(); i++) {
            QNode s = (QNode) S.get(i);
            if ((s.adj[0] == prev || s.adj[1] == prev || s.adj[2] == prev) && ((Integer) D.get(s)).intValue() < min) {
                min = ((Integer) D.get(s)).intValue();
                new_prev = s;
            }
        }
        prev = new_prev;
    }
    ShortestPath.add(start);
    return ShortestPath;
}
