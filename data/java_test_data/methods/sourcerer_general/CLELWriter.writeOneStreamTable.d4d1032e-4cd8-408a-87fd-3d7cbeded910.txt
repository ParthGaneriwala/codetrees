private void writeOneStreamTable(byte[] text, int off, StreamTable st) {
    switch(st.getType()) {
        case CLELConstants.MODULE_TABLE:
            writeModuleTable(text, off, st);
            break;
        case CLELConstants.TYPEREF_TABLE:
            writeTypeRefTable(text, off, st);
            break;
        case CLELConstants.TYPEDEF_TABLE:
            writeTypeDefTable(text, off, st);
            break;
        case CLELConstants.FIELD_TABLE:
            writeFieldTable(text, off, st);
            break;
        case CLELConstants.METHODDEF_TABLE:
            writeMethodDefTable(text, off, st);
            break;
        case CLELConstants.PARAM_TABLE:
            writeParamTable(text, off, st);
            break;
        case CLELConstants.INTERFACEIMPL_TABLE:
            writeInterfaceImplTable(text, off, st);
            break;
        case CLELConstants.MEMBERREF_TABLE:
            writeMemberRefTable(text, off, st);
            break;
        case CLELConstants.CONSTANT_TABLE:
            writeConstantTable(text, off, st);
            break;
        case CLELConstants.CUSTOMATTRIBUTE_TABLE:
            writeCustomAttributeTable(text, off, st);
            break;
        case CLELConstants.FIELDMARSHAL_TABLE:
            writeFieldMarshalTable(text, off, st);
            break;
        case CLELConstants.DECLSECURITY_TABLE:
            writeDeclSecurityTable(text, off, st);
            break;
        case CLELConstants.CLASSLAYOUT_TABLE:
            writeClassLayoutTable(text, off, st);
            break;
        case CLELConstants.FIELDLAYOUT_TABLE:
            writeFieldLayoutTable(text, off, st);
            break;
        case CLELConstants.STANDALONESIG_TABLE:
            writeStandAloneSigTable(text, off, st);
            break;
        case CLELConstants.EVENTMAP_TABLE:
            writeEventMapTable(text, off, st);
            break;
        case CLELConstants.EVENT_TABLE:
            writeEventTable(text, off, st);
            break;
        case CLELConstants.PROPERTYMAP_TABLE:
            writePropertyMapTable(text, off, st);
            break;
        case CLELConstants.PROPERTY_TABLE:
            writePropertyTable(text, off, st);
            break;
        case CLELConstants.METHODSEMANTICS_TABLE:
            writeMethodSemanticsTable(text, off, st);
            break;
        case CLELConstants.METHODIMPL_TABLE:
            writeMethodImplTable(text, off, st);
            break;
        case CLELConstants.MODULEREF_TABLE:
            writeModuleRefTable(text, off, st);
            break;
        case CLELConstants.TYPESPEC_TABLE:
            writeTypeSpecTable(text, off, st);
            break;
        case CLELConstants.IMPLMAP_TABLE:
            writeImplMapTable(text, off, st);
            break;
        case CLELConstants.FIELDRVA_TABLE:
            writeFieldRVATable(text, off, st);
            break;
        case CLELConstants.ASSEMBLY_TABLE:
            writeAssemblyTable(text, off, st);
            break;
        case CLELConstants.ASSEMBLYPROCESSOR_TABLE:
            writeAssemblyProcessorTable(text, off, st);
            break;
        case CLELConstants.ASSEMBLYOS_TABLE:
            writeAssemblyOSTable(text, off, st);
            break;
        case CLELConstants.ASSEMBLYREF_TABLE:
            writeAssemblyRefTable(text, off, st);
            break;
        case CLELConstants.ASSEMBLYREFPROCESSOR_TABLE:
            writeAssemblyRefProcessorTable(text, off, st);
            break;
        case CLELConstants.ASSEMBLYREFOS_TABLE:
            writeAssemblyRefOSTable(text, off, st);
            break;
        case CLELConstants.FILE_TABLE:
            writeFileTable(text, off, st);
            break;
        case CLELConstants.EXPORTEDTYPE_TABLE:
            writeExportedTypeTable(text, off, st);
            break;
        case CLELConstants.MANIFESTRESOURCE_TABLE:
            writeManifestResourceTable(text, off, st);
            break;
        case CLELConstants.NESTEDCLASS_TABLE:
            writeNestedClassTable(text, off, st);
            break;
        case CLELConstants.TYPETYPAR_TABLE:
            writeTypeTyParTable(text, off, st);
            break;
        case CLELConstants.METHODTYPAR_TABLE:
            writeMethodTyParTable(text, off, st);
            break;
    }
}
