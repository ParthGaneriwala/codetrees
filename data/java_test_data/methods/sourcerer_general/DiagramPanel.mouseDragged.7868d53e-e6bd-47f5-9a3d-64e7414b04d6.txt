public void mouseDragged(MouseEvent e) {
    System.out.println("MouseDragged");
    int x = e.getX(), y = e.getY();
    boolean handleDragged = false;
    if (this.draggingHandle) {
        for (Graphical g : model.getObjects("handle")) {
            Handle h = (Handle) g;
            if (h.isSelected()) {
                int rx = x - dragEndPoint.x;
                int ry = y - dragEndPoint.y;
                h.drag(rx, ry);
                handleDragged = true;
                if (model.getSelected().getClass().getName().equals("diagram.handles.ConnectHandle")) {
                    ConnectHandle ch = (ConnectHandle) model.getSelected();
                    System.out.println(ch != null);
                    ch.AdjustLine(dragEndPoint.x, dragEndPoint.y);
                    for (Graphical hhg : model.getObjects("triggerhandle")) {
                        TriggerHandle gh = (TriggerHandle) hhg;
                        if (gh.contains(dragEndPoint.x, dragEndPoint.y)) {
                            model.setAttachable(true);
                            popup.menuAttach(ch, gh.getLocation());
                        }
                    }
                }
            }
        }
    }
    if (!handleDragged) {
        if (this.draggingNode) {
            for (Graphical g : model.getObjects("node")) {
                Node n = (Node) g;
                if (n.isSelected()) {
                    int xn = n.getX() + x - dragEndPoint.x;
                    int yn = n.getY() + y - dragEndPoint.y;
                    n.getUpperLeft().setXY(xn, yn);
                }
            }
        } else {
            int xr = Math.min(dragStartPoint.x, x);
            int yr = Math.min(dragStartPoint.y, y);
            int wr = Math.abs(dragStartPoint.x - x);
            int hr = Math.abs(dragStartPoint.y - y);
            this.dragRectangle = new Rectangle(xr, yr, wr, hr);
        }
    }
    // if (model.getSelected() != null) {
    // if (model.getSelected().getClass().getName().equals("diagram.handles.ConnectHandle")) {
    // int rx = x - dragEndPoint.x;
    // int ry = y - dragEndPoint.y;
    // ConnectHandle ch = (ConnectHandle) model.getSelected();
    // ch.setConnectionTarget(new AbsoluteLocation(rx, ry));
    // }
    // }
    this.dragEndPoint = e.getPoint();
    this.repaint();
}
