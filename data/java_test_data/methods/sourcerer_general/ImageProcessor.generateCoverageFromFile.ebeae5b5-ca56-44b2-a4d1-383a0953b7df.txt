public GridCoverage2D generateCoverageFromFile(File f) {
    String[][] data;
    try {
        FileReader dataReader = new FileReader(f);
        edu.psu.geovista.io.csv.CSVParser csvp = new edu.psu.geovista.io.csv.CSVParser(dataReader);
        data = csvp.getAllValues();
    } catch (Exception e) {
        throw new RuntimeException("Exception reading file: " + e.getMessage());
    }
    double minX = Double.MAX_VALUE;
    double maxX = Double.MIN_VALUE;
    double minY = Double.MAX_VALUE;
    double maxY = Double.MIN_VALUE;
    Vector kernels = new Vector();
    for (int i = 1; i < data.length; i++) {
        EpanechnikovKernel ep = new EpanechnikovKernel();
        ep.setCentroid(new Point2D.Double(Double.parseDouble(data[i][1]), Double.parseDouble(data[i][3])));
        // was Double.parsedouble(data[i][17])
        ep.setHeight(Double.parseDouble(data[i][15]));
        ep.setMajorAxis(Double.parseDouble(data[i][5]));
        // was Double.parseDouble(data[i][9])
        ep.setMajorAxisOrientation(0);
        ep.setMinorAxis(Double.parseDouble(data[i][7]));
        kernels.add(ep);
        if (Double.parseDouble(data[i][1]) - Double.parseDouble(data[i][5]) < minX) {
            minX = Double.parseDouble(data[i][1]) - Double.parseDouble(data[i][5]);
        }
        if (Double.parseDouble(data[i][1]) + Double.parseDouble(data[i][5]) > maxX) {
            maxX = Double.parseDouble(data[i][1]) + Double.parseDouble(data[i][5]);
        }
        if (Double.parseDouble(data[i][3]) - Double.parseDouble(data[i][5]) < minY) {
            minY = Double.parseDouble(data[i][3]) - Double.parseDouble(data[i][5]);
        }
        if (Double.parseDouble(data[i][3]) + Double.parseDouble(data[i][5]) > maxY) {
            maxY = Double.parseDouble(data[i][3]) + Double.parseDouble(data[i][5]);
        }
    }
    double deltaX = maxX - minX;
    double deltaY = maxY - minY;
    System.out.println("minX = " + minX);
    System.out.println("maxX = " + maxX);
    System.out.println("minY = " + minY);
    System.out.println("maxY = " + maxY);
    double cellSize = Math.max(deltaX / 1000, deltaY / 1000);
    int xCells = (int) Math.round(deltaX / cellSize);
    int yCells = (int) Math.round(deltaY / cellSize);
    // for some reason, having the normal [xCells][yCells] order flipped it around
    // same goes for (i and j) and (x and y) in assignment statements in loops further down.
    float[][] rasterArray = new float[yCells][xCells];
    minHeight = Float.MAX_VALUE;
    maxHeight = Float.MIN_VALUE;
    for (int i = 0; i < xCells; i++) {
        for (int j = 0; j < yCells; j++) {
            rasterArray[j][i] = 0;
        }
    }
    int debugIndex = 0;
    System.out.println("There are " + kernels.size() + " kernels.");
    Iterator kernelIt = kernels.iterator();
    while (kernelIt.hasNext()) {
        EpanechnikovKernel nextKernel = (EpanechnikovKernel) kernelIt.next();
        for (int x = 0; x < xCells; x++) {
            for (int y = 0; y < yCells; y++) {
                Point2D.Double here = new Point2D.Double(minX + cellSize * x, minY + cellSize * y);
                rasterArray[y][x] = rasterArray[y][x] + (float) nextKernel.getValueAt(here);
            }
        }
        debugIndex++;
        System.out.println("processed kernel #" + debugIndex);
    }
    for (int x = 0; x < xCells; x++) {
        // there should be a way to fold this into the above loop.  I'll look at that later.
        for (int y = 0; y < yCells; y++) {
            if (rasterArray[y][x] < minHeight) {
                minHeight = rasterArray[y][x];
            }
            if (rasterArray[y][x] > maxHeight) {
                maxHeight = rasterArray[y][x];
            }
        }
    }
    GridCoverage2D gc = DissUtils.matrixToCoverage(rasterArray, new GeneralEnvelope(new Rectangle2D.Double(minX, minY, deltaX, deltaY)));
    return gc;
}
