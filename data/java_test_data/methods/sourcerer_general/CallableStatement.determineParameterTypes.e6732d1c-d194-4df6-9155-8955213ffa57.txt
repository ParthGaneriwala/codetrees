private void determineParameterTypes() throws SQLException {
    java.sql.ResultSet paramTypesRs = null;
    try {
        // Bug#57022, we need to check for db.SPname notation first
        // and pass on only SPname
        String procName = extractProcedureName();
        String quotedId = "";
        try {
            quotedId = this.connection.supportsQuotedIdentifiers() ? this.connection.getMetaData().getIdentifierQuoteString() : "";
        } catch (SQLException sqlEx) {
            // Forced by API, never thrown from getIdentifierQuoteString() in
            // this implementation.
            AssertionFailedException.shouldNotHappen(sqlEx);
        }
        List parseList = StringUtils.splitDBdotName(procName, "", quotedId, this.connection.isNoBackslashEscapesSet());
        String tmpCatalog = "";
        // There *should* be 2 rows, if any.
        if (parseList.size() == 2) {
            tmpCatalog = (String) parseList.get(0);
            procName = (String) parseList.get(1);
        } else {
        // keep values as they are
        }
        java.sql.DatabaseMetaData dbmd = this.connection.getMetaData();
        boolean useCatalog = false;
        if (tmpCatalog.length() <= 0) {
            useCatalog = true;
        }
        paramTypesRs = dbmd.getProcedureColumns(this.connection.versionMeetsMinimum(5, 0, 2) && useCatalog ? this.currentCatalog : tmpCatalog, /*null*/
        null, procName, // $NON-NLS-1$
        "%");
        boolean hasResults = false;
        try {
            if (paramTypesRs.next()) {
                paramTypesRs.previous();
                hasResults = true;
            }
        } catch (Exception e) {
        // paramTypesRs is empty, proceed with fake params. swallow, was expected
        }
        if (hasResults) {
            convertGetProcedureColumnsToInternalDescriptors(paramTypesRs);
        } else {
            fakeParameterTypes(true);
        }
    } finally {
        SQLException sqlExRethrow = null;
        if (paramTypesRs != null) {
            try {
                paramTypesRs.close();
            } catch (SQLException sqlEx) {
                sqlExRethrow = sqlEx;
            }
            paramTypesRs = null;
        }
        if (sqlExRethrow != null) {
            throw sqlExRethrow;
        }
    }
}
