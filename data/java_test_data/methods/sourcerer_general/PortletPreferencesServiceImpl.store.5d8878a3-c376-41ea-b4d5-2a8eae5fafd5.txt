public void store(PortletWindow portletWindow, PortletRequest request, InternalPortletPreference[] preferences) throws PortletContainerException {
    String key = getFormattedKey(portletWindow);
    if (key.startsWith("T")) {
        LOG.debug("Storing temporary portlet prefs");
        DashboardPortlet portlet = (DashboardPortlet) request.getAttribute("dashboardPortlet");
        LOG.debug("write------------------------------------");
        LOG.debug("portlet page name: " + portlet.getPageName());
        LOG.debug("portlet key: " + portlet.getWindowConfigId());
        LOG.debug("portlet formatted key: " + key);
        LOG.debug("-----------------------------------------");
        // Store them in an array for quick retrieval
        storage.put(key, clonePreferences(preferences));
    } else {
        // Store them in an array for quick retrieval
        storage.put(key, clonePreferences(preferences));
        // Store the preferences into the database -- container does not specify what changed
        // so delete them all
        int portletId = Integer.parseInt(key);
        Connection db = (Connection) request.getAttribute("connection");
        try {
            db.setAutoCommit(false);
            DashboardPortletPrefsList.delete(db, portletId);
            for (InternalPortletPreference thisPref : preferences) {
                DashboardPortletPrefs portletPrefs = new DashboardPortletPrefs();
                portletPrefs.setPortletId(portletId);
                portletPrefs.setName(thisPref.getName());
                portletPrefs.setValues(thisPref.getValues());
                portletPrefs.insert(db);
            }
            db.commit();
        } catch (Exception e) {
            try {
                db.rollback();
                e.printStackTrace(System.out);
                LOG.error("Preferences", e);
            } catch (Exception e2) {
            }
        } finally {
            try {
                db.setAutoCommit(true);
            } catch (Exception e2) {
            }
        }
    }
}
