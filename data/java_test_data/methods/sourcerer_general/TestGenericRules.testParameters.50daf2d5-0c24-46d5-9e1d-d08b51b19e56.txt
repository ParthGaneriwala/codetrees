public void testParameters() {
    Graph data = Factory.createGraphMem();
    data.add(new Triple(a, r, b));
    data.add(new Triple(p, ty, s));
    Model m = ModelFactory.createDefaultModel();
    Resource configuration = m.createResource(GenericRuleReasonerFactory.URI);
    configuration.addProperty(ReasonerVocabulary.PROPderivationLogging, "true");
    configuration.addProperty(ReasonerVocabulary.PROPruleMode, "hybrid");
    configuration.addProperty(ReasonerVocabulary.PROPruleSet, "testing/reasoners/genericRuleTest.rules");
    GenericRuleReasoner reasoner = (GenericRuleReasoner) GenericRuleReasonerFactory.theInstance().create(configuration);
    InfGraph infgraph = reasoner.bind(data);
    TestUtil.assertIteratorValues(this, infgraph.find(null, p, null), new Object[] { new Triple(a, p, a), new Triple(a, p, b), new Triple(b, p, a) });
    // Check derivation tracing as well
    Iterator di = infgraph.getDerivation(new Triple(b, p, a));
    assertTrue(di.hasNext());
    RuleDerivation d = (RuleDerivation) di.next();
    assertTrue(d.getRule().getName().equals("r1b"));
    TestUtil.assertIteratorValues(this, d.getMatches().iterator(), new Object[] { new Triple(a, p, b) });
    assertTrue(!di.hasNext());
    // Check retrieval of configuration
    Model m2 = ModelFactory.createDefaultModel();
    Resource newConfig = m2.createResource();
    reasoner.addDescription(m2, newConfig);
    TestUtil.assertIteratorValues(this, newConfig.listProperties(), new Statement[] { m2.createStatement(newConfig, ReasonerVocabulary.PROPderivationLogging, "true"), m2.createStatement(newConfig, ReasonerVocabulary.PROPruleMode, "hybrid"), m2.createStatement(newConfig, ReasonerVocabulary.PROPruleSet, "testing/reasoners/genericRuleTest.rules") });
    // Manual reconfig and check retrieval of changes
    reasoner.setParameter(ReasonerVocabulary.PROPderivationLogging, "false");
    newConfig = m2.createResource();
    reasoner.addDescription(m2, newConfig);
    TestUtil.assertIteratorValues(this, newConfig.listProperties(), new Statement[] { m2.createStatement(newConfig, ReasonerVocabulary.PROPderivationLogging, "false"), m2.createStatement(newConfig, ReasonerVocabulary.PROPruleMode, "hybrid"), m2.createStatement(newConfig, ReasonerVocabulary.PROPruleSet, "testing/reasoners/genericRuleTest.rules") });
    // Mutiple rule file loading
    m = ModelFactory.createDefaultModel();
    configuration = m.createResource(GenericRuleReasonerFactory.URI);
    configuration.addProperty(ReasonerVocabulary.PROPruleMode, "hybrid");
    configuration.addProperty(ReasonerVocabulary.PROPruleSet, "testing/reasoners/ruleset1.rules");
    configuration.addProperty(ReasonerVocabulary.PROPruleSet, "testing/reasoners/ruleset2.rules");
    reasoner = (GenericRuleReasoner) GenericRuleReasonerFactory.theInstance().create(configuration);
    infgraph = reasoner.bind(Factory.createGraphMem());
    Node an = Node.createURI(PrintUtil.egNS + "a");
    Node C = Node.createURI(PrintUtil.egNS + "C");
    Node D = Node.createURI(PrintUtil.egNS + "D");
    TestUtil.assertIteratorValues(this, infgraph.find(null, null, null), new Object[] { new Triple(an, RDF.Nodes.type, C), new Triple(an, RDF.Nodes.type, D) });
    // Test that the parameter initialization is not be overridden by subclasses
    m = ModelFactory.createDefaultModel();
    configuration = m.createResource(GenericRuleReasonerFactory.URI);
    configuration.addProperty(ReasonerVocabulary.PROPenableTGCCaching, m.createLiteral("true"));
    reasoner = (GenericRuleReasoner) GenericRuleReasonerFactory.theInstance().create(configuration);
    InfModel im = ModelFactory.createInfModel(reasoner, ModelFactory.createDefaultModel());
    Resource Ac = im.createResource(PrintUtil.egNS + "A");
    Resource Bc = im.createResource(PrintUtil.egNS + "B");
    Resource Cc = im.createResource(PrintUtil.egNS + "C");
    im.add(Ac, RDFS.subClassOf, Bc);
    im.add(Bc, RDFS.subClassOf, Cc);
    assertTrue("TGC enabled correctly", im.contains(Ac, RDFS.subClassOf, Cc));
}
