/*public void testThreadedIndexing() throws Exception {
        BasicEventList<POJO> data = new BasicEventList<POJO>();
        final IndexedList<POJO> il = new IndexedList<POJO>(POJO.class, data);


        final int loopCount = 100000;

        final CountDownLatch endLatch = new CountDownLatch(2);
        ExecutorService svc = Executors.newFixedThreadPool(2);
        svc.execute(new Runnable() {
            public void run() {
                System.out.println("Insert Started");
                insertTestData(il, loopCount);
                System.out.println("Insert Complete");
                endLatch.countDown();
            }
        });

        svc.execute(new Runnable() {
            public void run() {
                //try {
                    System.out.println("2nd Thread Started");
                    il.addIndex("id");
                    il.removeIndex("id");
                    il.addIndex("id");
                    il.removeIndex("id");
                    il.addIndex("id");
                    il.removeIndex("id");
                    il.addIndex("id");
                    il.removeIndex("id");
                    System.out.println("2nd Thread Complete");
//                } catch(InterruptedException e) {
//                    //no op
//                }

                endLatch.countDown();
            }
        });

        endLatch.await();


        il.dispose();
    }*/
public void testPropertyChange() {
    EventList<POJO> pojos = generateTestData(1000);
    final Date oldDate = new Date(0);
    ObservableElementList<POJO> observedPOJOs = new ObservableElementList<POJO>(pojos, GlazedLists.beanConnector(POJO.class));
    FilterList<POJO> filteredPOJOs = new FilterList<POJO>(observedPOJOs, new Matcher<POJO>() {

        public boolean matches(POJO item) {
            return item.getDate().after(oldDate);
        }
    });
    final Indexer<POJO> indexer = new Indexer<POJO>(POJO.class, filteredPOJOs, "id", "date");
    final POJO pj1 = new POJO("testid1", -1L, new Date(-10));
    pojos.add(pj1);
    final POJO pj2 = new POJO("testid2", -2L, new Date(10));
    pojos.add(pj2);
    List<POJO> results = indexer.search("date", new Date(10));
    assertNotNull(results);
    assertTrue(results.size() == 1);
    assertSame(results.get(0), pj2);
    pj1.setDate(new Date(10));
    results = indexer.search("date", new Date(10));
    assertNotNull(results);
    assertTrue("Expected result size == 2, not " + results.size(), results.size() == 2);
    assertTrue(results.contains(pj1));
    assertTrue(results.contains(pj2));
    /*filteredPOJOs.addListEventListener(new ListEventListener<POJO>() {
            public void listChanged(ListEvent<POJO> listChanges) {
                List<POJO> results = indexer.search("date", new Date(30));
                assertNotNull(results);
                assertTrue("Expected result size == 1, not " + results.size(), results.size() == 1);
                assertTrue(results.contains(pj1));
            }
        });*/
    indexer.addPropertyChangeListener(new PropertyChangeListener() {

        public void propertyChange(PropertyChangeEvent evt) {
            if (evt.getPropertyName() == Indexer.ITEM_ADDED) {
                List<POJO> results = indexer.search("date", new Date(30));
                assertNotNull(results);
                assertTrue("Expected result size == 1, not " + results.size(), results.size() == 1);
                assertTrue(results.contains(pj1));
            }
        }
    });
    pj1.setDate(new Date(30));
    filteredPOJOs.dispose();
    observedPOJOs.dispose();
    indexer.dispose();
}
