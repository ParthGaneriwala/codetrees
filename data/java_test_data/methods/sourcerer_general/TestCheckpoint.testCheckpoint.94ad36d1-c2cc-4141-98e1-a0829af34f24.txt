public void testCheckpoint() throws IOException {
    Path file1 = new Path("checkpoint.dat");
    Path file2 = new Path("checkpoint2.dat");
    Collection<File> namedirs = null;
    Configuration conf = new Configuration();
    conf.set("dfs.secondary.http.address", "0.0.0.0:0");
    replication = (short) conf.getInt("dfs.replication", 3);
    MiniDFSCluster cluster = new MiniDFSCluster(conf, numDatanodes, true, null);
    cluster.waitActive();
    FileSystem fileSys = cluster.getFileSystem();
    try {
        // 
        // verify that 'format' really blew away all pre-existing files
        // 
        assertTrue(!fileSys.exists(file1));
        assertTrue(!fileSys.exists(file2));
        namedirs = cluster.getNameDirs();
        // 
        // Create file1
        // 
        writeFile(fileSys, file1, replication);
        checkFile(fileSys, file1, replication);
        // 
        // Take a checkpoint
        // 
        SecondaryNameNode secondary = startSecondaryNameNode(conf);
        ErrorSimulator.initializeErrorSimulationEvent(3);
        secondary.doCheckpoint();
        secondary.shutdown();
    } finally {
        fileSys.close();
        cluster.shutdown();
    }
    // 
    // Restart cluster and verify that file1 still exist.
    // 
    cluster = new MiniDFSCluster(conf, numDatanodes, false, null);
    cluster.waitActive();
    fileSys = cluster.getFileSystem();
    try {
        // check that file1 still exists
        checkFile(fileSys, file1, replication);
        cleanupFile(fileSys, file1);
        // create new file file2
        writeFile(fileSys, file2, replication);
        checkFile(fileSys, file2, replication);
        // 
        // Take a checkpoint
        // 
        SecondaryNameNode secondary = startSecondaryNameNode(conf);
        secondary.doCheckpoint();
        secondary.shutdown();
    } finally {
        fileSys.close();
        cluster.shutdown();
    }
    // 
    // Restart cluster and verify that file2 exists and
    // file1 does not exist.
    // 
    cluster = new MiniDFSCluster(conf, numDatanodes, false, null);
    cluster.waitActive();
    fileSys = cluster.getFileSystem();
    assertTrue(!fileSys.exists(file1));
    try {
        // verify that file2 exists
        checkFile(fileSys, file2, replication);
    } finally {
        fileSys.close();
        cluster.shutdown();
    }
    // file2 is left behind.
    testSecondaryNamenodeError1(conf);
    testSecondaryNamenodeError2(conf);
    testSecondaryNamenodeError3(conf);
    testNamedirError(conf, namedirs);
    testSecondaryFailsToReturnImage(conf);
    testStartup(conf);
}
