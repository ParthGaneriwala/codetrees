/**
 * Returns the x position of the left-most node in a level that has that
 * maximum number of nodes, but is NOT the lowest level with the maximum
 * number of nodes
 */
private int getStartXOffSetForInnerLevelWithMaxNodes(Vector<Node> nodesInLevel, int currLevel) {
    int xOffSet = 0;
    // Establish the xOffSet for the left-most node in the level
    ControlFlowNode cfNodeLeftMost = (ControlFlowNode) nodesInLevel.elementAt(0);
    DrawingParameters drawingParametersOfNode = nodesVsDrawingParameters.get(cfNodeLeftMost);
    Vector<Node> sucssOfLeftMostNode = cfNodeLeftMost.getSuccessors();
    int numSucss = sucssOfLeftMostNode.size();
    if (numSucss == 1) {
        // This node has only one successor
        Node singleSuccessor = sucssOfLeftMostNode.elementAt(0);
        BFSLevel nextLevel = levels.elementAt(currLevel + 1);
        if (nextLevel.containsNode(singleSuccessor)) {
            // The successor is
            // in the next level
            DrawingParameters drawingParametersOfSucc = nodesVsDrawingParameters.get(singleSuccessor);
            int xOffSetOfSucc = drawingParametersOfSucc.getXPosition();
            if (isSingleSuccessorRightDiagonal(cfNodeLeftMost, singleSuccessor, currLevel)) {
                // Successor is to the
                // right of this node
                xOffSet = xOffSetOfSucc - drawingParametersOfNode.getSize().width;
            } else {
                // This node should be directly above the successor
                // node
                xOffSet = positionNodeAboveSuccessor(drawingParametersOfNode, drawingParametersOfSucc);
            }
        } else {
            // Check if the sucessor is in a level between the "base level"
            // and the current level
            int succLevel = -1;
            for (int i = indexOfLowestLevelWithMaxNodes; i > currLevel + 1; i--) {
                BFSLevel level = levels.elementAt(i);
                if (level.containsNode(singleSuccessor)) {
                    succLevel = i;
                    break;
                }
            }
            if (succLevel > 0) {
                // The successor node is at a level
                // between the lowest level with maximum
                // number
                // of nodes and the current level; get the minimum position
                // of the left-most nodes
                // in all levels between this node and the current node
                int minXOffSet = 0;
                for (int i = succLevel; i >= currLevel + 1; i--) {
                    BFSLevel lvl = levels.elementAt(i);
                    Node leftmostNode = lvl.getNodeAt(0);
                    int XoffSetOfLeftMostNode = nodesVsDrawingParameters.get(leftmostNode).getXPosition();
                    if (XoffSetOfLeftMostNode < minXOffSet)
                        minXOffSet = XoffSetOfLeftMostNode;
                }
                xOffSet = minXOffSet - drawingParametersOfNode.getSize().width;
            } else {
                // The xOffSet of the leftmost node in this level cannot be
                // determined from the successor
                // positions; default it to 0
                xOffSet = 0;
            }
        }
    }
    if (numSucss == 2) {
        // This node has two successors
        Node leftMostSuccessor = sucssOfLeftMostNode.elementAt(0);
        BFSLevel nextLevel = levels.elementAt(currLevel + 1);
        if (nextLevel.containsNode(leftMostSuccessor)) {
            // The successor
            // is in the
            // next level
            DrawingParameters dpLeftMostSucc = nodesVsDrawingParameters.get(leftMostSuccessor);
            int xOffSetOfLeftMostSucc = dpLeftMostSucc.getXPosition();
            xOffSet = xOffSetOfLeftMostSucc + dpLeftMostSucc.getSize().width;
        }
    }
    return xOffSet;
}
