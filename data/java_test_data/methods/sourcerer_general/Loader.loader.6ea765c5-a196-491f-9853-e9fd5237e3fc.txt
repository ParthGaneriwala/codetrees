/*
	 * Os m�dulos de comunica��o escutam o Manager O Manager ouve todos os
	 * demais
	 */
public static MBeanServer loader(MBeanServer mb, String confFile) {
    try {
        ObjectName objName = null;
        ObjectName metaConnec = null;
        // Cria��o dos elementos de leitura do XML
        XmlReader xml = new XmlReader();
        XMiddleware xmid = xml.readXml(confFile);
        // Leitura do arquivo confFile, obten��o dos Binds
        Binds binds = xmid.getBinds();
        CanonicalElements elements = xmid.getCanonicalElements();
        XComponent compFrom = null;
        XComponent compTo = null;
        XConnector conn = null;
        XConnector concreteConnector = null;
        Iterator<XBind> it = binds.getBinds().iterator();
        // Realiza a leitura do Bind TODO sao um Bind
        while (it.hasNext()) {
            XBind xbind = it.next();
            // Obtem o primeiro componente
            compFrom = elements.getXComponent(xbind.getFrom());
            // Obtem o segundo componente
            compTo = elements.getXComponent(xbind.getTo());
            // Obtem o connector abstrato
            conn = elements.getXConnector(xbind.getThrough());
            // Obtem o connector concreto
            concreteConnector = elements.getConcreteConnector();
            /*
				 * Iniciando registro dos elementos no JMX
				 */
            // Configurador
            // Registro do configurador
            metaConnec = new ObjectName("Middleware:Type=MetaConnector,name=Configurator");
            mb.registerMBean(new Configurator(mb, conn.getId()), metaConnec);
            Object obj = getComponent(compFrom.getId());
            objName = new ObjectName(compFrom.getId());
            mb.registerMBean(obj, objName);
            mb.addNotificationListener(objName, metaConnec, null, null);
            obj = getComponent(compTo.getId());
            objName = new ObjectName(compTo.getId());
            mb.registerMBean(obj, objName);
            mb.addNotificationListener(objName, metaConnec, null, null);
            obj = getConcreteConnector(concreteConnector.getId());
            objName = new ObjectName(concreteConnector.getId());
            mb.registerMBean(obj, objName);
            mb.addNotificationListener(objName, metaConnec, null, null);
            obj = getConnector(conn.getId(), compFrom.getId(), compTo.getId(), concreteConnector.getId());
            objName = new ObjectName(conn.getId());
            mb.registerMBean(obj, objName);
            mb.addNotificationListener(objName, metaConnec, null, null);
        }
        try {
            if (xmid.getType().equals(Constants.TYPE_CLIENT)) {
                objName = new ObjectName(Constants.COMP_CHECKER);
                Checker ch = (Checker) getComponent(Constants.COMP_CHECKER);
                loadMonitors(ch);
                mb.registerMBean(ch, objName);
                mb.addNotificationListener(objName, metaConnec, null, null);
            // Object obj =
            // getConcreteConnector(Constants.CONN_TCPCLIENT);
            // objName = new ObjectName(Constants.CONN_TCPCLIENT);
            // / mb.registerMBean(obj, objName);
            // mb.addNotificationListener(objName, metaConnec, null,
            // null);
            } else {
                try {
                    Object obj = getConcreteConnector(Constants.CONN_TCPSERVER);
                    objName = new ObjectName(Constants.CONN_TCPSERVER);
                    mb.registerMBean(obj, objName);
                    mb.addNotificationListener(objName, metaConnec, null, null);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            objName = new ObjectName(Constants.COMP_DECRYPT);
            mb.registerMBean(new Decrypt(), objName);
            mb.addNotificationListener(objName, metaConnec, null, null);
        } catch (Exception e) {
            e.printStackTrace();
            System.err.println("Error during Checker loading");
        }
    } catch (Exception e) {
        e.printStackTrace();
    }
    System.out.println("MBeanServer Loaded");
    return mb;
}
