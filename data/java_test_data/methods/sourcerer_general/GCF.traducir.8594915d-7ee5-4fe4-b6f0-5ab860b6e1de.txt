public void traducir(TablaSimbolos tabla) {
    int desp_arg1, desp_arg2, desp_resultado;
    Simbolo simbolo;
    // SUMA
    if (operacion.compareTo("+") == 0) {
        // System.out.println("suma");
        try {
            // hallamos los desplazamientos de los argumentos y del resultado
            simbolo = tabla.Buscar(op1);
            desp_arg1 = simbolo.getTamano();
            simbolo = tabla.Buscar(op2);
            desp_arg2 = simbolo.getTamano();
            simbolo = tabla.Buscar(op3);
            desp_resultado = simbolo.getTamano();
            bw.write("ADD #-" + desp_arg1 + "[.IX], #-" + desp_arg2 + "[.IX]\n");
            bw.write("MOVE .A, #-" + desp_resultado + "[.IX]\n");
        } catch (IOException e) {
        // TODO
        }
    } else // ASIGNACIONES CUANDO EN LA PARTE DCHA HAY UN STRING
    if (operacion.compareTo("ASIGNA") == 0) {
        try {
            // hallamos los desplazamientos del argumento y del resultado
            simbolo = tabla.Buscar(op1);
            desp_arg1 = simbolo.getTamano();
            simbolo = tabla.Buscar(op2);
            desp_resultado = simbolo.getTamano();
            bw.write("MOVE #-" + desp_arg1 + "[.IX], #-" + desp_resultado + "[.IX]");
        } catch (IOException e) {
        // TODO
        }
    } else // NO LA ENTIENDO... QUE HACE?????
    if (operacion.compareTo("ETIQUETA") == 0) {
    // boolean esWhile=false;
    // String auxd=this.darEtiq();
    // String axid=this.darEtiq();
    // TablaSimbolos aux;
    // try {
    // if (primero){
    // man=tabla.darEtiqueta("main()");
    // bw.write("PUSH #0\nPUSH #0;no tiene parametros\n"+
    // "CALL /"+man+"\nHALT;\n");primero=false;
    // }
    // bw.write(op3+":\n"+"NOP\n");
    // if (!op3.contains("FIN")){
    // aux=tablaActual;
    // tablaActual=tabla.getTablaFuncionhenry(op3);
    // if (tablaActual==null){
    // esWhile=true;
    // tablaActual=aux;
    // }
    // else{cambiarapadre=true;}
    // if (!esWhile){
    // bw.write("MOVE .SP,.R9\n");
    // this.insertarIds(tablaActual);
    // bw.write("SUB .R9,#3\n"+
    // "MOVE [.A],.R2\n"+
    // "SUB .R9,.R2\n"+
    // "SUB .A,#4\n"+
    // "MOVE .A,.R5\n"+
    // "SUB .R9,#3\n"+
    // "MOVE [.A],.R2\n"+
    // axid+":\n"+
    // "CMP #0,.R2\n"+
    // "BZ "+"/"+auxd+"\n"+
    // "SUB .R2,#1\n"+
    // "MOVE .A,.R2\n"+
    // "ADD .R2,.R5\n"+
    // "MOVE .A,.R1\n"+
    // "ADD .R2,.R9\n"+
    // "MOVE .A,.R3\n"+
    // "MOVE [.R1],[.R3]\n"+
    // "BR "+"/"+axid+"\n"+
    // auxd+":\nnop\n");
    // esWhile=false;
    // }
    // }
    // if (op3.contains("FIN")&&cambiarapadre){
    // if (op3.contains(man)){
    // bw.write("HALT\nNOP\n");
    // }
    // else {
    // tablaActual=tabla;
    // cambiarapadre=false;
    // bw.write("MOVE .R9,.SP\n"+
    // "RET\n" +
    // "nop\n");
    // }
    // }
    // }
    // catch (IOException ex) {
    // ex.printStackTrace();
    // }
    } else // SALTO INCONDICIONAL
    if (operacion.compareTo("GOTO") == 0) {
        try {
            bw.write("BR /" + op3 + "\n");
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    } else if (operacion.compareTo("RETURN") == 0) {
        try {
            desp_arg1 = tablaActual.getDesplazamientoElemento(op3);
            if (desp_arg1 == null) {
                bw.write("MOVE .R9,.SP\n");
                bw.write("RET\n");
            } else {
                // consigo la direccino de op1 y op2 y las meto en r2 y r3
                if (desp_arg1.contains("p")) {
                    desp_arg1 = desp_arg1.substring(0, desp_arg1.length() - 1);
                    bw.write("MOVE .R7, .R3" + ";cambio el puntero y lo pongo a 0" + "\n" + "ADD #" + desp_arg1 + ",.R3" + "\n");
                } else {
                    bw.write("MOVE .R9, .R3" + ";estoy en suma" + "\n" + "ADD #" + desp_arg1 + ",.R3" + "\n");
                }
                bw.write("MOVE [.A], .R1" + "\n" + "SUB .R9,#4\n" + "MOVE .R1,[.A]\n" + "MOVE .R9,.SP\n");
                bw.write("RET\n");
            }
        } catch (IOException e) {
        // TODO
        }
    } else if (operacion.compareTo("PARAM") == 0) {
        char tip;
        try {
            desp_arg1 = tablaActual.getDesplazamientoElemento(op1);
            if (desp_arg1.contains("p")) {
                desp_arg1 = desp_arg1.substring(0, desp_arg1.length() - 1);
                tip = tabla.buscarEntrada(op1).consultarTipo();
                if (tip == 'v') {
                    bw.write("MOVE .R7, .R3" + ";cambio el puntero y lo pongo a 0" + "\n" + "ADD #" + desp_arg1 + ",.R3" + "\n");
                    bw.write("PUSH .A\n");
                } else {
                    bw.write("MOVE .R7, .R3" + ";cambio el puntero y lo pongo a 0" + "\n" + "ADD #" + desp_arg1 + ",.R3" + "\n");
                }
                bw.write("PUSH [.A]\n");
            } else {
                tip = tablaActual.buscarEntrada(op1).consultarTipo();
                if (tip == 'v') {
                    bw.write("MOVE .R9, .R3" + ";estoy en suma" + "\n" + "ADD #" + desp_arg1 + ",.R3" + "\n");
                    bw.write("PUSH .A\n");
                } else {
                    bw.write("MOVE .R9, .R3" + ";estoy en suma" + "\n" + "ADD #" + desp_arg1 + ",.R3" + "\n");
                    bw.write("PUSH [.A]\n");
                }
            }
        } catch (IOException e) {
        // TODO
        }
    } else if (operacion.compareTo("CALL") == 0) {
        try {
            bw.write("PUSH #0\nPUSH #" + op2 + "\n" + "PUSH .R9\n" + "CALL /" + op1 + "\n" + "POP .R9\n");
        } catch (IOException e) {
        // TODO
        }
    } else // NEGACION
    if (operacion.compareTo("NOT") == 0) {
        try {
            String auxt1 = this.darEtiq();
            String auxt2 = this.darEtiq();
            desp_arg1 = tablaActual.getDesplazamientoElemento(op1);
            bw.write("MOVE .R9, .R3" + ";estoy en OR" + "\n" + "ADD #" + desp_arg1 + ",.R3" + "\n" + "MOVE [.A], .R1" + "\n" + "CMP #0,.R1" + "\n" + "BZ /" + auxt1 + "\n" + "MOVE #0, .R1" + "\n" + "BR /" + auxt2 + "\n" + auxt1 + ":\n" + "MOVE #1,.R1" + "\n" + auxt2 + ":\n" + // falta la comparacion
            "MOVE .R1,[.A]");
        } catch (IOException e) {
        // TODO
        }
    } else // TERCETOS PARA LO QUE DEVUELVEN LAS FUNCIONES AL TERMINAR
    if (operacion.compareTo("DEVVALOR") == 0) {
        try {
            desp_arg1 = tablaActual.getDesplazamientoElemento(op1);
            bw.write("MOVE .R9, .R3" + ";estoy en devolvervalor" + "\n" + "ADD #" + desp_arg1 + ",.R3" + "\n" + "MOVE .A,.R1\n" + "POP .A" + "\n" + "POP .A" + "\n" + "MOVE .A,[.R1]\n" + "SUB .SP,#1\n" + "MOVE .A,.SP\n");
        } catch (IOException e) {
        // TODO
        }
    }
}
