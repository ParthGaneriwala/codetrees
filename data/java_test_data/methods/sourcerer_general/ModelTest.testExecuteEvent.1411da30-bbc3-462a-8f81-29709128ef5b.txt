public final void testExecuteEvent() throws ConstraintViolationException {
    User user = new User("bob", "");
    Defect defect = new Defect("title", user);
    Product product = new Product("product");
    Module module = new Module("module");
    Build build = new Build("build");
    HistoricalEvent event;
    event = new HistoricalEvent(user, defect, DefectField.TITLE, defect.getTitle(), "new title");
    Model.getInstance().executeEvent(event);
    Model.getInstance().unexecuteEvent(event);
    event = new HistoricalEvent(user, defect, DefectField.CREATED, defect.getCreator(), user);
    Model.getInstance().executeEvent(event);
    Model.getInstance().unexecuteEvent(event);
    event = new HistoricalEvent(user, defect, DefectField.STATUS, defect.getDefectStatus(), DefectStatus.CLOSED);
    Model.getInstance().executeEvent(event);
    Model.getInstance().unexecuteEvent(event);
    event = new HistoricalEvent(user, defect, DefectField.PRODUCT, defect.getProduct(), product);
    Model.getInstance().executeEvent(event);
    Model.getInstance().unexecuteEvent(event);
    event = new HistoricalEvent(user, defect, DefectField.MODULE, defect.getModule(), module);
    Model.getInstance().executeEvent(event);
    Model.getInstance().unexecuteEvent(event);
    event = new HistoricalEvent(user, defect, DefectField.BUILD, defect.getBuild(), build);
    Model.getInstance().executeEvent(event);
    Model.getInstance().unexecuteEvent(event);
    event = new HistoricalEvent(user, defect, DefectField.SEVERITY, defect.getSeverity(), Severity.NO_WORK_AROUND);
    Model.getInstance().executeEvent(event);
    Model.getInstance().unexecuteEvent(event);
    event = new HistoricalEvent(user, defect, DefectField.PRIORITY, defect.getPriority(), Priority.MEDIUM);
    Model.getInstance().executeEvent(event);
    Model.getInstance().unexecuteEvent(event);
    event = new HistoricalEvent(user, defect, DefectField.TESTER, defect.getTester(), user);
    Model.getInstance().executeEvent(event);
    Model.getInstance().unexecuteEvent(event);
    event = new HistoricalEvent(user, defect, DefectField.DEVELOPER, defect.getDeveloper(), user);
    Model.getInstance().executeEvent(event);
    Model.getInstance().unexecuteEvent(event);
    event = new HistoricalEvent(user, defect, DefectField.DESCRIPTION, defect.getDescription(), "new Description");
    Model.getInstance().executeEvent(event);
    Model.getInstance().unexecuteEvent(event);
}
