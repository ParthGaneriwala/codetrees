public void initVEnv() {
    vEnv = new Table();
    // ��������
    Symbol sym = null;
    // ������
    RECORD formals = null;
    // ����ֵ����
    Type result = null;
    System.out.println("===================std function initial================");
    sym = Symbol.symbol("print");
    formals = new RECORD(Symbol.symbol("s"), new Types.STRING(), null);
    result = new Types.VOID();
    vEnv.put(sym, new FunEntry(formals, result));
    sym = Symbol.symbol("printi");
    formals = new RECORD(Symbol.symbol("i"), new Types.INT(), null);
    result = new Types.VOID();
    vEnv.put(sym, new FunEntry(formals, result));
    sym = Symbol.symbol("flush");
    formals = new RECORD(null, null, null);
    result = new Types.VOID();
    vEnv.put(sym, new FunEntry(formals, result));
    sym = Symbol.symbol("getchar");
    formals = new RECORD(null, null, null);
    result = new Types.STRING();
    vEnv.put(sym, new FunEntry(formals, result));
    sym = Symbol.symbol("ord");
    formals = new RECORD(Symbol.symbol("s"), new Types.STRING(), null);
    result = new Types.INT();
    vEnv.put(sym, new FunEntry(formals, result));
    sym = Symbol.symbol("chr");
    formals = new RECORD(Symbol.symbol("i"), new Types.INT(), null);
    result = new Types.STRING();
    vEnv.put(sym, new FunEntry(formals, result));
    sym = Symbol.symbol("size");
    formals = new RECORD(Symbol.symbol("s"), new Types.STRING(), null);
    result = new Types.INT();
    vEnv.put(sym, new FunEntry(formals, result));
    sym = Symbol.symbol("substring");
    formals = new RECORD(Symbol.symbol("s"), new Types.STRING(), new RECORD(Symbol.symbol("f"), new Types.INT(), new RECORD(Symbol.symbol("n"), new Types.INT(), null)));
    result = new Types.STRING();
    vEnv.put(sym, new FunEntry(formals, result));
    sym = Symbol.symbol("concat");
    formals = new RECORD(Symbol.symbol("s1"), new Types.STRING(), new RECORD(Symbol.symbol("s2"), new Types.STRING(), null));
    result = new Types.STRING();
    vEnv.put(sym, new FunEntry(formals, result));
    sym = Symbol.symbol("not");
    formals = new RECORD(Symbol.symbol("i"), new Types.INT(), null);
    result = new Types.INT();
    vEnv.put(sym, new FunEntry(formals, result));
    sym = Symbol.symbol("exit");
    formals = new RECORD(Symbol.symbol("i"), new Types.INT(), null);
    result = new Types.VOID();
    vEnv.put(sym, new FunEntry(formals, result));
}
