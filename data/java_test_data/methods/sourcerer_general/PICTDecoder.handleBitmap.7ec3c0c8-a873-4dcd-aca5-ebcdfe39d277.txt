void handleBitmap(int opcode) throws IOException, JimiException {
    int row;
    PICTBitmap bitmap;
    // raw byte buffer for data from file
    byte[] buf;
    // uncompressed data - possibly still pixel packed
    byte[] uBuf;
    // pixel per byte expanded pixel data
    byte[] outBuf;
    // mask off flags
    rowBytes &= 0x3FFF;
    DirectColorModel cm = new DirectColorModel(1, 0x1, 0x1, 0x1);
    bitmap = new PICTBitmap(dIn);
    int width = bitmap.bounding.brX - bitmap.bounding.tlX;
    int height = bitmap.bounding.brY - bitmap.bounding.tlY;
    ji.setSize(width, height);
    ji.setColorModel(cm);
    // allocate the memory for image
    ji.setPixels();
    // buf - enough to handle compressed data length for rowBytes
    buf = new byte[rowBytes + 1 + rowBytes / 128];
    uBuf = new byte[rowBytes];
    outBuf = new byte[width];
    for (row = 0; row < height; ++row) {
        if (// data is not compressed
        rowBytes < 8) {
            dIn.readFully(buf, 0, rowBytes);
            // and DirectColorModel is Zero Pixel Value is Black
            for (int j = buf.length; --j >= 0; ) buf[j] = (byte) ~buf[j];
            // 1 is pixel bitsize
            JimiUtil.expandPixels(1, buf, outBuf, outBuf.length);
        } else {
            int rawLen;
            if (rowBytes > 250)
                rawLen = dIn.readUnsignedShort();
            else
                rawLen = dIn.readUnsignedByte();
            dIn.readFully(buf, 0, rawLen);
            Packbits.unpackbits(buf, uBuf);
            // and DirectColorModel is Zero Pixel Value is Black
            for (int j = uBuf.length; --j >= 0; ) uBuf[j] = (byte) ~uBuf[j];
            // 1 is pixel bitsize
            JimiUtil.expandPixels(1, uBuf, outBuf, outBuf.length);
        }
        ji.setChannel(0, row, outBuf);
        setProgress((row * 100) / (height - 1));
    }
}
