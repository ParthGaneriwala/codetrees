private int readRemainingMultiPackets(Buffer reuse, byte multiPacketSeq, int packetEndPoint) throws IOException, SQLException {
    int lengthRead;
    int packetLength;
    lengthRead = readFully(this.mysqlInput, this.packetHeaderBuf, 0, 4);
    if (lengthRead < 4) {
        forceClose();
        // $NON-NLS-1$
        throw new IOException(Messages.getString("MysqlIO.47"));
    }
    packetLength = (this.packetHeaderBuf[0] & 0xff) + ((this.packetHeaderBuf[1] & 0xff) << 8) + ((this.packetHeaderBuf[2] & 0xff) << 16);
    Buffer multiPacket = new Buffer(packetLength);
    boolean firstMultiPkt = true;
    while (true) {
        if (!firstMultiPkt) {
            lengthRead = readFully(this.mysqlInput, this.packetHeaderBuf, 0, 4);
            if (lengthRead < 4) {
                forceClose();
                throw new IOException(Messages.getString(// $NON-NLS-1$
                "MysqlIO.48"));
            }
            packetLength = (this.packetHeaderBuf[0] & 0xff) + ((this.packetHeaderBuf[1] & 0xff) << 8) + ((this.packetHeaderBuf[2] & 0xff) << 16);
        } else {
            firstMultiPkt = false;
        }
        if (!this.useNewLargePackets && (packetLength == 1)) {
            clearInputStream();
            break;
        } else if (packetLength < this.maxThreeBytes) {
            byte newPacketSeq = this.packetHeaderBuf[3];
            if (newPacketSeq != (multiPacketSeq + 1)) {
                throw new IOException(Messages.getString(// $NON-NLS-1$
                "MysqlIO.49"));
            }
            multiPacketSeq = newPacketSeq;
            // Set the Buffer to it's original state
            multiPacket.setPosition(0);
            // Set the new length
            multiPacket.setBufLength(packetLength);
            // Read the data from the server
            byte[] byteBuf = multiPacket.getByteBuffer();
            int lengthToWrite = packetLength;
            int bytesRead = readFully(this.mysqlInput, byteBuf, 0, packetLength);
            if (bytesRead != lengthToWrite) {
                throw SQLError.createCommunicationsException(this.connection, this.lastPacketSentTimeMs, this.lastPacketReceivedTimeMs, SQLError.createSQLException(Messages.getString(// $NON-NLS-1$
                "MysqlIO.50") + lengthToWrite + Messages.getString("MysqlIO.51") + // $NON-NLS-1$
                bytesRead + ".", getExceptionInterceptor()), // $NON-NLS-1$
                getExceptionInterceptor());
            }
            reuse.writeBytesNoNull(byteBuf, 0, lengthToWrite);
            packetEndPoint += lengthToWrite;
            // end of multipacket sequence
            break;
        }
        byte newPacketSeq = this.packetHeaderBuf[3];
        if (newPacketSeq != (multiPacketSeq + 1)) {
            throw new IOException(Messages.getString(// $NON-NLS-1$
            "MysqlIO.53"));
        }
        multiPacketSeq = newPacketSeq;
        // Set the Buffer to it's original state
        multiPacket.setPosition(0);
        // Set the new length
        multiPacket.setBufLength(packetLength);
        // Read the data from the server
        byte[] byteBuf = multiPacket.getByteBuffer();
        int lengthToWrite = packetLength;
        int bytesRead = readFully(this.mysqlInput, byteBuf, 0, packetLength);
        if (bytesRead != lengthToWrite) {
            throw SQLError.createCommunicationsException(this.connection, this.lastPacketSentTimeMs, this.lastPacketReceivedTimeMs, SQLError.createSQLException(Messages.getString(// $NON-NLS-1$
            "MysqlIO.54") + lengthToWrite + // $NON-NLS-1$
            Messages.getString("MysqlIO.55") + bytesRead + ".", getExceptionInterceptor()), // $NON-NLS-1$
            getExceptionInterceptor());
        }
        reuse.writeBytesNoNull(byteBuf, 0, lengthToWrite);
        packetEndPoint += lengthToWrite;
    }
    reuse.setPosition(0);
    reuse.setWasMultiPacket(true);
    return packetLength;
}
