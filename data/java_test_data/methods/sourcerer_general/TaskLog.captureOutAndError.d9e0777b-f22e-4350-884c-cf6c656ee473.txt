public static List<String> captureOutAndError(List<String> setup, List<String> cmd, File stdoutFilename, File stderrFilename, long tailLength, String pidFileName) throws IOException {
    String stdout = FileUtil.makeShellPath(stdoutFilename);
    String stderr = FileUtil.makeShellPath(stderrFilename);
    List<String> result = new ArrayList<String>(3);
    result.add(bashCommand);
    result.add("-c");
    StringBuffer mergedCmd = new StringBuffer();
    // Spit out the pid to pidFileName
    if (pidFileName != null) {
        mergedCmd.append("echo $$ > ");
        mergedCmd.append(pidFileName);
        mergedCmd.append(" ;");
    }
    if (setup != null && setup.size() > 0) {
        mergedCmd.append(addCommand(setup, false));
        mergedCmd.append(";");
    }
    if (tailLength > 0) {
        mergedCmd.append("(");
    } else {
        mergedCmd.append("exec ");
    }
    mergedCmd.append(addCommand(cmd, true));
    mergedCmd.append(" < /dev/null ");
    if (tailLength > 0) {
        mergedCmd.append(" | ");
        mergedCmd.append(tailCommand);
        mergedCmd.append(" -c ");
        mergedCmd.append(tailLength);
        mergedCmd.append(" >> ");
        mergedCmd.append(stdout);
        mergedCmd.append(" ; exit $PIPESTATUS ) 2>&1 | ");
        mergedCmd.append(tailCommand);
        mergedCmd.append(" -c ");
        mergedCmd.append(tailLength);
        mergedCmd.append(" >> ");
        mergedCmd.append(stderr);
        mergedCmd.append(" ; exit $PIPESTATUS");
    } else {
        mergedCmd.append(" 1>> ");
        mergedCmd.append(stdout);
        mergedCmd.append(" 2>> ");
        mergedCmd.append(stderr);
    }
    result.add(mergedCmd.toString());
    return result;
}
