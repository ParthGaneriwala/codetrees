public void rotate(int dir) {
    int cos, sin;
    CLine line;
    SNodeTerminal terminal;
    int index;
    int x1, y1, x2, y2, tx, ty, x, y;
    int xpoints[], ypoints[], npoints;
    rotation = (rotation + dir) % 4;
    cos = (int) Math.round(Math.cos(dir * Math.PI / 2));
    sin = (int) Math.round(Math.sin(dir * Math.PI / 2));
    /*
         * First, rotate the body around (0,0)
         */
    for (index = 0; index < body.size(); index++) {
        line = (CLine) body.get(index);
        x1 = line.x1;
        y1 = line.y1;
        x2 = line.x2;
        y2 = line.y2;
        line.x1 = x1 * cos + y1 * sin;
        line.y1 = -x1 * sin + y1 * cos;
        line.x2 = x2 * cos + y2 * sin;
        line.y2 = -x2 * sin + y2 * cos;
    }
    /*
         * Rotate bounds about the center. First move back to origin.  Then do
         * the rotation.  Then move back to center.
         */
    xpoints = bounds.xpoints.clone();
    ypoints = bounds.ypoints.clone();
    npoints = bounds.npoints;
    bounds.reset();
    for (index = 0; index < npoints; index++) {
        x = xpoints[index];
        y = ypoints[index];
        x -= center.x;
        y -= center.y;
        tx = x;
        ty = y;
        x = tx * cos + ty * sin;
        y = -tx * sin + ty * cos;
        x += center.x;
        y += center.y;
        bounds.addPoint(x, y);
    }
    /*
         * Rotate the terminals about center.
         */
    for (index = 0; index < terminals.size(); index++) {
        terminal = (SNodeTerminal) terminals.get(index);
        x = terminal.p.x;
        y = terminal.p.y;
        x -= center.x;
        y -= center.y;
        tx = x;
        ty = y;
        x = tx * cos + ty * sin;
        y = -tx * sin + ty * cos;
        x += center.x;
        y += center.y;
        terminal.p.x = x;
        terminal.p.y = y;
    }
}
