public ActionForward search(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
    if (log.isDebugEnabled()) {
        log.debug("Entering 'search' method");
    }
    DataLogForm dataLogForm = (DataLogForm) form;
    // Exceptions are caught by ActionExceptionHandler
    String list = request.getParameter("list");
    String type = request.getParameter("type");
    request.setAttribute("type", type);
    if (list != null && list.equals("list")) {
        String sql = null;
        String groupBy = "";
        StringBuffer sqlBuff = new StringBuffer(62);
        List datas = new ArrayList();
        if (type.equals("log")) {
            sqlBuff.append("select chainId, uniqueid, readerId, antennaid, userData, ip, createdDate from DataLog where ");
        } else if (type.equals("reader")) {
            sqlBuff.append("select readerId, COUNT(readerId) as number from DataLog where ");
            groupBy = "group by readerId";
        } else if (type.equals("antenna")) {
            sqlBuff.append("select antennaid, COUNT(antennaid) as number from DataLog where ");
            groupBy = "group by antennaid";
        } else if (type.equals("tag")) {
            sqlBuff.append("select uniqueid, COUNT(uniqueid) as number from DataLog where ");
            groupBy = "group by uniqueid";
        }
        // ƴ��sql
        if (dataLogForm.getChainId() != null && !dataLogForm.getChainId().trim().equals("")) {
            sqlBuff.append("chainId = '" + dataLogForm.getChainId() + " 'and ");
        }
        if (dataLogForm.getReaderId() != null && !dataLogForm.getReaderId().trim().equals("")) {
            sqlBuff.append("readerId = '" + dataLogForm.getReaderId() + "' and ");
        }
        if (dataLogForm.getAntennaid() != null && !dataLogForm.getAntennaid().trim().equals("")) {
            sqlBuff.append("antennaid = '" + dataLogForm.getAntennaid() + "' and ");
        }
        if (dataLogForm.getUniqueid() != null && !dataLogForm.getUniqueid().trim().equals("")) {
            sqlBuff.append("uniqueid = '" + dataLogForm.getUniqueid() + "' and ");
        }
        String begin = null;
        if (dataLogForm.getBegDate() != null && !dataLogForm.getBegDate().trim().equals("")) {
            begin = dataLogForm.getBegDate() + " " + (dataLogForm.getBegTime() == null || dataLogForm.getBegTime().trim().equals("") ? "00:00:00" : dataLogForm.getBegTime());
        }
        String end = null;
        if (dataLogForm.getEndDate() != null && !dataLogForm.getEndDate().trim().equals("")) {
            end = dataLogForm.getEndDate() + " " + (dataLogForm.getEndTime() == null || dataLogForm.getEndTime().trim().equals("") ? "00:00:00" : dataLogForm.getEndTime());
        }
        if (begin != null) {
            System.out.println("not null");
        }
        if (end != null) {
            System.out.println("not null");
        }
        if (begin != null && end != null) {
            sqlBuff.append("createdDate > '" + begin + "' and createdDate < '" + end + "'");
        } else if (end != null) {
            sqlBuff.append("createdDate < '" + end + "'");
        } else if (begin != null) {
            sqlBuff.append("createdDate > '" + begin + "'");
        }
        sql = sqlBuff.toString();
        if (sql.indexOf("=") == -1 && sql.indexOf("<") == -1 && sql.indexOf(">") == -1) {
            sql += " 1 = 1 ";
        }
        if (sql.trim().lastIndexOf("and") == sql.trim().length() - 3) {
            sql = sql.substring(0, sql.lastIndexOf("and"));
        }
        sql += groupBy;
        // System.out.println("++++++++sql = " + sql);
        DataLogManager dlm = (DataLogManager) getBean("dataLogManager");
        datas = dlm.getDataLogs(sql.trim());
        Enumeration names = request.getParameterNames();
        int pageNo = 1;
        int pageSize = 50;
        int pageStartRow = 0;
        int pageEndRow = 0;
        int totalSize = 0;
        List<DataLogForm> dataLogs = new ArrayList<DataLogForm>();
        while (names.hasMoreElements()) {
            String parameter = (String) names.nextElement();
            if (parameter.matches("d-[0-9]+-p")) {
                pageNo = Integer.parseInt(request.getParameter(parameter));
                break;
            }
        }
        if (datas != null) {
            totalSize = datas.size();
            pageStartRow = (pageNo - 1) * pageSize;
            pageEndRow = Math.min(pageNo * pageSize, totalSize);
            for (int i = pageStartRow; i < pageEndRow; i++) {
                DataLogForm dataLog = new DataLogForm();
                Object[] o = (Object[]) datas.get(i);
                if (type.equals("log")) {
                    dataLog.setChainId(o[0].toString());
                    dataLog.setUniqueid(o[1].toString());
                    dataLog.setReaderId(o[2].toString());
                    dataLog.setAntennaid(o[3].toString());
                    dataLog.setUserData(o[4].toString());
                    if (o[5] == null) {
                        dataLog.setIp("172.0.0.1");
                    } else {
                        dataLog.setIp(o[5].toString());
                    }
                    Timestamp time = (Timestamp) o[6];
                    dataLog.setCreatedDate(new Date(time.getTime()));
                } else if (type.equals("reader")) {
                    dataLog.setReaderId(o[0].toString());
                    dataLog.setNumber(Integer.parseInt(o[1].toString()));
                } else if (type.equals("antenna")) {
                    dataLog.setAntennaid(o[0].toString());
                    dataLog.setNumber(Integer.parseInt(o[1].toString()));
                } else if (type.equals("tag")) {
                    dataLog.setUniqueid(o[0].toString());
                    dataLog.setNumber(Integer.parseInt(o[1].toString()));
                }
                dataLogs.add(dataLog);
            }
        }
        request.setAttribute("list", list);
        request.setAttribute(Constants.DATA_LIST, dataLogs);
        request.setAttribute("totalSize", totalSize);
    }
    // return a forward to the user list definition
    return mapping.findForward("list");
}
