@Override
protected String go() throws Exception {
    LessonsService service = (LessonsService) this.getBean("lessonsService");
    lesson.setLessondate(LessonsUtil.str2timestamp(datestart + " " + hmstart));
    if (onlyonline != 0) {
        lesson.setLessonend(lesson.getLessondate());
        if (lesson.getOnlinefile() == null || lesson.getOnlinefile().equals("")) {
            this.message = "在线文件不能为空,请返回";
            return "message";
        }
        // if(onlyonline==2){
        if (lesson.getTeacherid() != 0) {
            Teacher teacher = (Teacher) basicService.get(Teacher.class, lesson.getTeacherid());
            lesson.setTeachers(teacher.getUsername());
            lesson.setTeachertype(teacher.getTeacherType());
        }
    } else {
        lesson.setLessonend(LessonsUtil.str2timestamp(dateend + " " + hmend));
    }
    lesson.setCreateuserid(this.getLoginUser().getUserid());
    lesson.setCreateuser(this.getLoginUser().getUsername());
    lesson.setCreatetime(new java.sql.Timestamp(System.currentTimeMillis()));
    // 如果登录的对应的grouptype=4或5或者为空的话，则用下面的，否则，谁登陆算谁的
    SysGroup mygroup = this.getLoginUser().getSysGroup();
    if (mygroup == null || mygroup.getGrouptype() > 3) {
        if (datavisible.getProvinceid() != 0) {
            lesson.setProvinceid(datavisible.getProvinceid());
            lesson.setGroupid(lesson.getProvinceid());
        }
        if (datavisible.getCityid() != 0) {
            lesson.setCityid(datavisible.getCityid());
            lesson.setGroupid(lesson.getCityid());
        }
        if (datavisible.getProvinceid() == 0 && datavisible.getCityid() == 0) {
            lesson.setGroupid(mygroup == null ? 0 : mygroup.getGroupid());
        }
    } else {
        lesson.setGroupid(mygroup.getGroupid());
        lesson.setProvinceid(this.getLoginUser().getProvinceid());
        lesson.setCityid(this.getLoginUser().getCityid());
    }
    lesson.setDeleteflag(false);
    if (lesson.getOnlinefile() == null || lesson.getOnlinefile().trim().equals("")) {
        lesson.setOnlinefile(null);
        lesson.setLessonstyle(1);
    } else {
        // 既是现场培训的,又是在线的
        lesson.setLessonstyle(3);
    }
    if (onlyonline != 0) {
        // 通过添加在线课程的时候实现
        lesson.setLessonstyle(2);
    }
    String attach = "";
    String extendPath = "/lesson/";
    String toPath = com.changpeng.common.Constants.PHOTO_SAVE_PATH + extendPath;
    // 创建目录
    FileUtils.forceMkdir(new File(toPath));
    int i = 0;
    if (fileFileName != null) {
        for (String str : fileFileName) {
            if (str != null && !"".equals(str)) {
                String name = new java.text.SimpleDateFormat("yyyyMMddHHmmss").format(new java.util.Date()) + i;
                String ext = getExtention(str);
                String filename = name + ext;
                try {
                    File dest = new File(toPath + filename);
                    // 移动文件
                    FileUtils.copyFile(file[i], dest);
                } catch (IOException e) {
                    message = "上传培训资料错误：" + e.getMessage();
                    return "message";
                }
                attach += "," + filename;
            }
            i++;
            if (i > 5) {
                message = "对不起，您最多可上传5份附件";
                return "message";
            }
        }
    }
    System.out.println(picpreview);
    System.out.println(picpreviewFileName);
    if (picpreview != null) {
        String name = new java.text.SimpleDateFormat("yyyyMMddHHmmss").format(new java.util.Date()) + "pic";
        String ext = getExtention(picpreviewFileName);
        String filename = name + ext;
        try {
            File dest = new File(toPath + filename);
            // 移动文件
            FileUtils.copyFile(picpreview, dest);
            lesson.setPic(name + ext);
        } catch (IOException e) {
            message = "上传培训资料错误：" + e.getMessage();
            return "message";
        }
    }
    lesson.setAttach(attach);
    if (sharedgroupids == null || sharedgroupids.size() == 0) {
        sharedgroupids = new ArrayList();
    }
    if (mygroup != null)
        sharedgroupids.add(mygroup.getGroupid());
    if (!sharedgroupids.contains(lesson.getGroupid()) && lesson.getGroupid() != 0) {
        sharedgroupids.add(lesson.getGroupid());
    }
    if (!sharedgroupids.contains(lesson.getProvinceid()) && lesson.getProvinceid() != 0) {
        sharedgroupids.add(lesson.getProvinceid());
    }
    service.saveLesson(lesson, null, this.getLoginUser());
    if (onlyonline == 0) {
        this.nextPage = "lessonsLocalList.pl?lessonstyle=1";
    } else if (onlyonline == 1) {
        this.nextPage = "lessonsOnlineList.pl?lessonstyle=2";
    } else {
        this.nextPage = "teacherLessonsList.pl";
    }
    this.opResult += "新增课程,名称:" + lesson.getTitle();
    this.message = "课程新增成功";
    return SUCCESS;
}
