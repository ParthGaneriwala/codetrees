protected String describe(Session session, int blanks) {
    StringBuffer sb = new StringBuffer(64);
    sb.append('\n');
    for (int i = 0; i < blanks; i++) {
        sb.append(' ');
    }
    switch(opType) {
        case OpTypes.VALUE:
            sb.append("VALUE = ").append(valueData);
            sb.append(", TYPE = ").append(dataType.getNameString());
            return sb.toString();
        case OpTypes.ROW:
        // 
        case OpTypes.TABLE:
            sb.append("VALUELIST ");
            sb.append(" TYPE = ").append(dataType.getNameString());
            for (int i = 0; i < nodes.length; i++) {
                sb.append(nodes[i].describe(session, blanks + blanks));
                sb.append(' ');
            }
            break;
        case OpTypes.NEGATE:
            sb.append("NEGATE ");
            break;
        case OpTypes.ADD:
            sb.append("ADD ");
            break;
        case OpTypes.SUBTRACT:
            sb.append("SUBTRACT ");
            break;
        case OpTypes.MULTIPLY:
            sb.append("MULTIPLY ");
            break;
        case OpTypes.DIVIDE:
            sb.append("DIVIDE ");
            break;
        case OpTypes.CONCAT:
            sb.append("CONCAT ");
            break;
        case OpTypes.CAST:
            sb.append("CAST ");
            sb.append(dataType.getTypeDefinition());
            sb.append(' ');
            break;
    }
    if (getLeftNode() != null) {
        sb.append(" arg_left=[");
        sb.append(nodes[LEFT].describe(session, blanks + 1));
        sb.append(']');
    }
    if (getRightNode() != null) {
        sb.append(" arg_right=[");
        sb.append(nodes[RIGHT].describe(session, blanks + 1));
        sb.append(']');
    }
    return sb.toString();
}
