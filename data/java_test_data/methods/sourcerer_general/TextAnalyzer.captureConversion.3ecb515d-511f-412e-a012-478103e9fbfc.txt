private static GenTypeClass captureConversion(GenTypeClass c, Map<String, GenTypeSolid> tparMap) {
    // capture the outer type
    GenTypeClass newOuter = null;
    GenTypeClass oldOuter = c.getOuterType();
    if (oldOuter != null)
        newOuter = captureConversion(oldOuter, tparMap);
    // capture the arguments
    List oldArgs = c.getTypeParamList();
    List newArgs = new ArrayList(oldArgs.size());
    Iterator i = oldArgs.iterator();
    Iterator boundsIterator = c.getReflective().getTypeParams().iterator();
    while (i.hasNext()) {
        GenTypeParameter targ = (GenTypeParameter) i.next();
        GenTypeDeclTpar tpar = (GenTypeDeclTpar) boundsIterator.next();
        GenTypeSolid newArg;
        if (targ instanceof GenTypeWildcard) {
            GenTypeWildcard wc = (GenTypeWildcard) targ;
            GenTypeSolid[] ubounds = wc.getUpperBounds();
            GenTypeSolid lbound = wc.getLowerBound();
            GenTypeSolid[] tpbounds = tpar.upperBounds();
            for (int j = 0; j < tpbounds.length; j++) {
                tpbounds[j] = (GenTypeSolid) tpbounds[j].mapTparsToTypes(tparMap);
            }
            if (lbound != null) {
                // ? super XX
                newArg = new GenTypeCapture(new GenTypeWildcard(tpbounds, new GenTypeSolid[] { lbound }));
            } else {
                // ? extends ...
                GenTypeSolid[] newBounds = new GenTypeSolid[ubounds.length + tpbounds.length];
                System.arraycopy(ubounds, 0, newBounds, 0, ubounds.length);
                System.arraycopy(tpbounds, 0, newBounds, ubounds.length, tpbounds.length);
                newArg = new GenTypeCapture(new GenTypeWildcard(ubounds, new GenTypeSolid[0]));
            }
        } else {
            // The argument is not a wildcard. Capture doesn't affect it.
            newArg = (GenTypeSolid) targ;
        }
        newArgs.add(newArg);
        tparMap.put(tpar.getTparName(), newArg);
    }
    return new GenTypeClass(c.getReflective(), newArgs, newOuter);
}
