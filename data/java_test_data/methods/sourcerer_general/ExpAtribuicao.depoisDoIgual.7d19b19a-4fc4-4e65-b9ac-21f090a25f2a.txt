// 
public void depoisDoIgual(TabelaSimbolos tabelaSimbolos, String escopo, String tipoDaAtribuicao) {
    // chama chamadaDeFuncao
    if (tabelaSimbolos.getTipo().equals("identificador") && tabelaSimbolos.superLookahead(1).equals("(")) {
        // chama expressao aritimetica
        ExpressaoAritmetica expressaoaritmetica = new ExpressaoAritmetica();
        expressaoaritmetica.expAritmetica(tabelaSimbolos, escopo, tipoDaAtribuicao);
        // consome o ;
        tabelaSimbolos.soConsome();
    // chama Struct
    } else if (tabelaSimbolos.getLookahead().equals("->") || tabelaSimbolos.getLookahead().equals(".")) {
    // Chama acesso struct
    // acessoStruct acessostruct = new acessoStruct();
    // acessostruct.acessoStruct(tabelaSimbolos, escopo, tipoDaAtribuicao);
    // verifica se é a = 1;
    } else if (tabelaSimbolos.getTipo().equals("numero") && tabelaSimbolos.superLookahead(1).equals(";")) {
        // verifica se os tipos são iguais
        if (!tipoDaAtribuicao.equals(InformaTipo(tabelaSimbolos.getLookahead())) && !tipoDaAtribuicao.equals("")) {
            System.out.println(" ERRO SEMANTICO - Tipos diferentes :" + tipoDaAtribuicao + " != " + InformaTipo(tabelaSimbolos.getLookahead()));
            ErroSemantico.getInstance().getTabelaErros().add("Erro Semântico na linha  " + tabelaSimbolos.getLinha() + ". Descrição: Variável  " + tabelaSimbolos.getLookahead() + "  incompatível com tipo    " + tipoDaAtribuicao);
        }
        // consome o numero
        tabelaSimbolos.soConsome();
        // consome o ;
        tabelaSimbolos.soConsome();
    // verifica se é a = b;
    } else if (tabelaSimbolos.getTipo().equals("identificador") && tabelaSimbolos.superLookahead(1).equals(";")) {
        String TipoAtual = "";
        // verifica se o nome existe
        if (!tabelaSimbolos.validaNome(escopo, tabelaSimbolos.getLookahead())) {
            System.out.println(" ERRO SEMANTICO - Variável " + tabelaSimbolos.getLookahead() + " não declarada +");
            ErroSemantico.getInstance().getTabelaErros().add("Erro Semântico na linha " + tabelaSimbolos.getLinha() + ". Descrição: Variável  " + tabelaSimbolos.getLookahead() + "  não foi declarada ");
        } else {
            // define o tipo da variável
            if (tabelaSimbolos.RetornaTipoDeGlobalDeclarada(tabelaSimbolos.getLookahead()).equals("")) {
                // existe tipo
                TipoAtual = tabelaSimbolos.RetornaTipoDeLocalDeclarada(tabelaSimbolos.getLookahead(), escopo);
            } else {
                TipoAtual = tabelaSimbolos.RetornaTipoDeGlobalDeclarada(tabelaSimbolos.getLookahead());
            }
        }
        // 
        if (!TipoAtual.equals(tipoDaAtribuicao) && !tipoDaAtribuicao.equals("") && !TipoAtual.equals("")) {
            System.out.println(" ERRO SEMANTICO - Tipos diferentes :" + tipoDaAtribuicao + " != " + TipoAtual);
            ErroSemantico.getInstance().getTabelaErros().add("Erro Semântico na linha  " + tabelaSimbolos.getLinha() + ". Descrição: Variável  " + tabelaSimbolos.getLookahead() + "  incompatível com tipo    " + tipoDaAtribuicao);
        }
        // 
        // consome o nome
        tabelaSimbolos.soConsome();
        // consome o ;
        tabelaSimbolos.soConsome();
    // verifica se é uma expressão
    } else if ((tabelaSimbolos.getTipo().equals("identificador") || tabelaSimbolos.getTipo().equals("numero")) && tabelaSimbolos.superTipo(1).equals("operador")) {
        // chama expressao aritimetica
        ExpressaoAritmetica expressaoaritmetica = new ExpressaoAritmetica();
        expressaoaritmetica.expAritmetica(tabelaSimbolos, escopo, tipoDaAtribuicao);
        // consome o ;
        tabelaSimbolos.soConsome();
    // verifica se é um boolean
    } else if ((tabelaSimbolos.getLookahead().equals("true") || tabelaSimbolos.getLookahead().equals("false")) && tabelaSimbolos.superLookahead(1).equals(";")) {
        // verifica se os tipos são iguais
        if (!tipoDaAtribuicao.equals(InformaTipo(tabelaSimbolos.getLookahead())) && !tipoDaAtribuicao.equals("")) {
            System.out.println(" ERRO SEMANTICO - Tipos diferentes :" + tipoDaAtribuicao + " != " + InformaTipo(tabelaSimbolos.getLookahead()));
            ErroSemantico.getInstance().getTabelaErros().add("Erro Semântico na linha  " + tabelaSimbolos.getLinha() + ". Descrição: Variável  " + tabelaSimbolos.getLookahead() + "  incompatível com tipo    " + tipoDaAtribuicao);
        }
        // consome o true|false
        tabelaSimbolos.soConsome();
        // consome o ;
        tabelaSimbolos.soConsome();
    // verifica se é um caracter
    } else if (tabelaSimbolos.getTipo().equals("frase") && tabelaSimbolos.getLookahead().length() == 3 && tabelaSimbolos.superLookahead(1).equals(";")) {
        // verifica se os tipos são iguais
        if (!tipoDaAtribuicao.equals(InformaTipo(tabelaSimbolos.getLookahead())) && !tipoDaAtribuicao.equals("")) {
            System.out.println(" ERRO SEMANTICO - Tipos diferentes :" + tipoDaAtribuicao + " != " + InformaTipo(tabelaSimbolos.getLookahead()));
            ErroSemantico.getInstance().getTabelaErros().add("Erro Semântico na linha  " + tabelaSimbolos.getLinha() + ". Descrição: Variável  " + tabelaSimbolos.getLookahead() + "  incompatível com tipo    " + tipoDaAtribuicao);
        }
        // consome o caracter
        tabelaSimbolos.soConsome();
        // consome o ;
        tabelaSimbolos.soConsome();
    }
}
