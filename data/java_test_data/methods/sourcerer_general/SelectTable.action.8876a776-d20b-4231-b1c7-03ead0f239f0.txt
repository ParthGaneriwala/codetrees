public void action(int mode) {
    int width, height;
    List<String[]> listRow = new ArrayList<String[]>();
    String className = null;
    switch(mode) {
        case 0:
            className = "contrabase.test.perform.Student";
            break;
        case 1:
            className = "contrabase.test.perform.Professor";
            break;
        case 2:
            className = "contrabase.test.perform.Employee";
            break;
        case 3:
            className = "All";
    }
    try {
        Table table = dialog.getTable(tableName);
        ContrabaseResults results = table.selectTableContent();
        if (className == "All") {
            while (results.hasNext()) {
                ObjectContainer objectContainer = results.nextObjectContainer();
                String[] row = new String[3];
                row[0] = objectContainer.getKey();
                row[1] = repositoryMap.get(objectContainer.getRepositoryId());
                StringBuffer value = new StringBuffer(objectContainer.getClassName()).append("\n");
                Iterator<ObjectContainerField> it = objectContainer.iterator();
                while (it.hasNext()) {
                    ObjectContainerField field = it.next();
                    value.append(field.getTypeName()).append(" : ").append(field.getFieldName()).append(" : ").append(field.getValue()).append("\n");
                }
                row[2] = value.toString();
                listRow.add(row);
            }
        } else {
            while (results.hasNext()) {
                ObjectContainer objectContainer = results.nextObjectContainer();
                if (!objectContainer.getClassName().equals(className)) {
                    continue;
                }
                String[] row = new String[3];
                row[0] = objectContainer.getKey();
                row[1] = repositoryMap.get(objectContainer.getRepositoryId());
                StringBuffer value = new StringBuffer(objectContainer.getClassName()).append("\n");
                Iterator<ObjectContainerField> it = objectContainer.iterator();
                while (it.hasNext()) {
                    ObjectContainerField field = it.next();
                    value.append(field.getTypeName()).append(" : ").append(field.getFieldName()).append(" : ").append(field.getValue()).append("\n");
                }
                row[2] = value.toString();
                listRow.add(row);
            }
        }
    } catch (ContrabaseException e) {
        e.printStackTrace();
    } catch (ClassNotFoundException e) {
        e.printStackTrace();
    }
    DefaultTableModel tableModel = new DefaultTableModel() {

        private static final long serialVersionUID = 1L;

        public Class<String> getColumnClass(int columnIndex) {
            return String.class;
        }
    };
    int size = listRow.size();
    String[][] rowData = new String[size][3];
    for (int i = 0; i < size; i++) {
        rowData[i] = listRow.get(i);
    }
    String[] columnNames = { "Key", "RepositoryNo", "Value" };
    tableModel.setDataVector(rowData, columnNames);
    JTable selectedTable = new JTable(tableModel);
    int lines = 2;
    selectedTable.setEnabled(false);
    selectedTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
    TableColumn col = selectedTable.getColumn("Key");
    col.setPreferredWidth(120);
    col = selectedTable.getColumn("RepositoryNo");
    col.setPreferredWidth(100);
    col = selectedTable.getColumn("Value");
    col.setPreferredWidth(400);
    selectedTable.setRowHeight((selectedTable.getRowHeight() + 45) * lines);
    selectedTable.setDefaultRenderer(String.class, new MultiLineCellRenderer());
    selectedTable.setShowGrid(true);
    JScrollPane tablePane = new JScrollPane(selectedTable);
    tablePane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
    tablePane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
    if (tableTabPanel.getComponentCount() == 2)
        tableTabPanel.remove(1);
    tableTabPanel.add(tablePane);
    tablePane.setBounds(0, 0, 530, 458);
    dialog.repaint();
}
