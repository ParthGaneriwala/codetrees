// $ANTLR start "if_else_part"
public final MyGrammarParser.if_else_part_return if_else_part() throws RecognitionException {
    MyGrammarParser.if_else_part_return retval = new MyGrammarParser.if_else_part_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token ELSE52 = null;
    MyGrammarParser.statement_sequence_return statement_sequence53 = null;
    CommonTree ELSE52_tree = null;
    RewriteRuleTokenStream stream_ELSE = new RewriteRuleTokenStream(adaptor, "token ELSE");
    RewriteRuleSubtreeStream stream_statement_sequence = new RewriteRuleSubtreeStream(adaptor, "rule statement_sequence");
    try {
        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:185:2: ( ELSE statement_sequence -> ^( IF_ELSE_PART statement_sequence ) )
        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:185:4: ELSE statement_sequence
        {
            ELSE52 = (Token) match(input, ELSE, FOLLOW_ELSE_in_if_else_part1362);
            stream_ELSE.add(ELSE52);
            pushFollow(FOLLOW_statement_sequence_in_if_else_part1364);
            statement_sequence53 = statement_sequence();
            state._fsp--;
            stream_statement_sequence.add(statement_sequence53.getTree());
            // AST REWRITE
            // elements: statement_sequence
            // token labels:
            // rule labels: retval
            // token list labels:
            // rule list labels:
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", retval != null ? retval.tree : null);
            root_0 = (CommonTree) adaptor.nil();
            // 185:28: -> ^( IF_ELSE_PART statement_sequence )
            {
                // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:185:31: ^( IF_ELSE_PART statement_sequence )
                {
                    CommonTree root_1 = (CommonTree) adaptor.nil();
                    root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(IF_ELSE_PART, "IF_ELSE_PART"), root_1);
                    adaptor.addChild(root_1, stream_statement_sequence.nextTree());
                    adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
