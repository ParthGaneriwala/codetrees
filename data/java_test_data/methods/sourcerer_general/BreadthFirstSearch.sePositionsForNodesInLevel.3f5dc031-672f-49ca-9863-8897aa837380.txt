private void sePositionsForNodesInLevel(BFSLevel level, int yOffset, int currLevelIndex, Vector<Node> nodesInLevel) {
    int numNodesInLevel = nodesInLevel.size();
    // List of indices of nodes whose
    Vector<Integer> indicesOfNodesWithUnknownXPostions = new Vector<Integer>();
    for (int i = 0; i < numNodesInLevel; i++) {
        Node currNode = nodesInLevel.elementAt(i);
        DrawingParameters dpNode = nodesVsDrawingParameters.get(currNode);
        dpNode.setYPosition(yOffset);
        Vector<Node> sucss = currNode.getSuccessors();
        // To be determined
        int xPosOfNode = 0;
        int numSucss = sucss.size();
        if (numSucss == 1) {
            Node succ = sucss.elementAt(0);
            BFSLevel nextLevel = levels.elementAt(currLevelIndex + 1);
            if (nextLevel.containsNode(succ)) {
                DrawingParameters dpSucc = nodesVsDrawingParameters.get(succ);
                int succXPos = dpSucc.getXPosition();
                if (isSingleSuccessorRightDiagonal(currNode, succ, currLevelIndex)) {
                    Dimension nodeSize = dpNode.getSize();
                    xPosOfNode = succXPos - nodeSize.width;
                } else if (isSingleSuccessorLeftDiagonal(currNode, succ, currLevelIndex)) {
                    Dimension succSize = dpSucc.getSize();
                    xPosOfNode = succXPos + succSize.width;
                }
                dpNode.setXPosition(xPosOfNode);
            } else {
                // The position of the current node cannot be determined from the successor's information
                indicesOfNodesWithUnknownXPostions.addElement(new Integer(i));
            }
        } else if (numSucss == 2) {
            Node firstSucc = sucss.elementAt(0);
            Node secondSucc = sucss.elementAt(1);
            BFSLevel nextLevel = levels.elementAt(currLevelIndex + 1);
            if (nextLevel.containsNode(firstSucc)) {
                // Calculate the xPosition based on the successor on the left side
                DrawingParameters dpFirstSucc = nodesVsDrawingParameters.get(firstSucc);
                int xPosFirstSucc = dpFirstSucc.getXPosition();
                Dimension firstSuccSize = dpFirstSucc.getSize();
                xPosOfNode = xPosFirstSucc + firstSuccSize.width;
                dpNode.setXPosition(xPosOfNode);
            } else if (nextLevel.containsNode(firstSucc)) {
                DrawingParameters dpSecondSucc = nodesVsDrawingParameters.get(secondSucc);
                int xPosSecondSucc = dpSecondSucc.getXPosition();
                Dimension nodeSize = dpNode.getSize();
                xPosOfNode = xPosSecondSucc - nodeSize.width;
                dpNode.setXPosition(xPosOfNode);
            } else {
                // The position of the current node cannot be determined from the successor's information
                indicesOfNodesWithUnknownXPostions.addElement(new Integer(i));
            }
        }
    }
    // If there were some nodes whose x offsets could not be determined, iterate through them and attempt to establish a
    // a position
    // TBD - To implement later
    int numUnknowns = indicesOfNodesWithUnknownXPostions.size();
    if (numUnknowns > 0) {
        System.out.println("Found a node with unknown x postion");
    }
}
