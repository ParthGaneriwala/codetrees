// $ANTLR start "param_value"
public final MyGrammarParser.param_value_return param_value() throws RecognitionException {
    MyGrammarParser.param_value_return retval = new MyGrammarParser.param_value_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token VG155 = null;
    MyGrammarParser.value_return value154 = null;
    MyGrammarParser.value_return value156 = null;
    CommonTree VG155_tree = null;
    RewriteRuleTokenStream stream_VG = new RewriteRuleTokenStream(adaptor, "token VG");
    RewriteRuleSubtreeStream stream_value = new RewriteRuleSubtreeStream(adaptor, "rule value");
    try {
        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:261:13: ( value ( VG value )* -> ^( PARAM_VALUE ( value )+ ) )
        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:261:14: value ( VG value )*
        {
            pushFollow(FOLLOW_value_in_param_value2152);
            value154 = value();
            state._fsp--;
            stream_value.add(value154.getTree());
            // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:261:20: ( VG value )*
            loop26: do {
                int alt26 = 2;
                int LA26_0 = input.LA(1);
                if ((LA26_0 == VG)) {
                    alt26 = 1;
                }
                switch(alt26) {
                    case 1:
                        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:261:21: VG value
                        {
                            VG155 = (Token) match(input, VG, FOLLOW_VG_in_param_value2155);
                            stream_VG.add(VG155);
                            pushFollow(FOLLOW_value_in_param_value2157);
                            value156 = value();
                            state._fsp--;
                            stream_value.add(value156.getTree());
                        }
                        break;
                    default:
                        break loop26;
                }
            } while (true);
            // AST REWRITE
            // elements: value
            // token labels:
            // rule labels: retval
            // token list labels:
            // rule list labels:
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", retval != null ? retval.tree : null);
            root_0 = (CommonTree) adaptor.nil();
            // 261:32: -> ^( PARAM_VALUE ( value )+ )
            {
                // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:261:35: ^( PARAM_VALUE ( value )+ )
                {
                    CommonTree root_1 = (CommonTree) adaptor.nil();
                    root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(PARAM_VALUE, "PARAM_VALUE"), root_1);
                    if (!(stream_value.hasNext())) {
                        throw new RewriteEarlyExitException();
                    }
                    while (stream_value.hasNext()) {
                        adaptor.addChild(root_1, stream_value.nextTree());
                    }
                    stream_value.reset();
                    adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
