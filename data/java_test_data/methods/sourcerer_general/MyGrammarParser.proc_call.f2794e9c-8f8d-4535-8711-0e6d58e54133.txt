// $ANTLR start "proc_call"
public final MyGrammarParser.proc_call_return proc_call() throws RecognitionException {
    MyGrammarParser.proc_call_return retval = new MyGrammarParser.proc_call_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token IDENTIFIER150 = null;
    Token EPAR151 = null;
    Token DPAR153 = null;
    MyGrammarParser.param_value_return param_value152 = null;
    CommonTree IDENTIFIER150_tree = null;
    CommonTree EPAR151_tree = null;
    CommonTree DPAR153_tree = null;
    RewriteRuleTokenStream stream_EPAR = new RewriteRuleTokenStream(adaptor, "token EPAR");
    RewriteRuleTokenStream stream_DPAR = new RewriteRuleTokenStream(adaptor, "token DPAR");
    RewriteRuleTokenStream stream_IDENTIFIER = new RewriteRuleTokenStream(adaptor, "token IDENTIFIER");
    RewriteRuleSubtreeStream stream_param_value = new RewriteRuleSubtreeStream(adaptor, "rule param_value");
    try {
        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:258:10: ( IDENTIFIER EPAR ( param_value )? DPAR -> ^( PROC_CALL IDENTIFIER ( param_value )? ) )
        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:258:12: IDENTIFIER EPAR ( param_value )? DPAR
        {
            IDENTIFIER150 = (Token) match(input, IDENTIFIER, FOLLOW_IDENTIFIER_in_proc_call2123);
            stream_IDENTIFIER.add(IDENTIFIER150);
            EPAR151 = (Token) match(input, EPAR, FOLLOW_EPAR_in_proc_call2125);
            stream_EPAR.add(EPAR151);
            // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:258:28: ( param_value )?
            int alt25 = 2;
            int LA25_0 = input.LA(1);
            if (((LA25_0 >= TRUE && LA25_0 <= FALSE) || (LA25_0 >= IDENTIFIER && LA25_0 <= STRING))) {
                alt25 = 1;
            }
            switch(alt25) {
                case 1:
                    // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:258:29: param_value
                    {
                        pushFollow(FOLLOW_param_value_in_proc_call2128);
                        param_value152 = param_value();
                        state._fsp--;
                        stream_param_value.add(param_value152.getTree());
                    }
                    break;
            }
            DPAR153 = (Token) match(input, DPAR, FOLLOW_DPAR_in_proc_call2132);
            stream_DPAR.add(DPAR153);
            // AST REWRITE
            // elements: IDENTIFIER, param_value
            // token labels:
            // rule labels: retval
            // token list labels:
            // rule list labels:
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", retval != null ? retval.tree : null);
            root_0 = (CommonTree) adaptor.nil();
            // 258:48: -> ^( PROC_CALL IDENTIFIER ( param_value )? )
            {
                // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:258:51: ^( PROC_CALL IDENTIFIER ( param_value )? )
                {
                    CommonTree root_1 = (CommonTree) adaptor.nil();
                    root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(PROC_CALL, "PROC_CALL"), root_1);
                    adaptor.addChild(root_1, stream_IDENTIFIER.nextNode());
                    // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:258:74: ( param_value )?
                    if (stream_param_value.hasNext()) {
                        adaptor.addChild(root_1, stream_param_value.nextTree());
                    }
                    stream_param_value.reset();
                    adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
