private static int generateWrapArg(ClassFileWriter cfw, int paramOffset, Class<?> argType) {
    int size = 1;
    if (!argType.isPrimitive()) {
        cfw.add(ByteCode.ALOAD, paramOffset);
    } else if (argType == Boolean.TYPE) {
        // wrap boolean values with java.lang.Boolean.
        cfw.add(ByteCode.NEW, "java/lang/Boolean");
        cfw.add(ByteCode.DUP);
        cfw.add(ByteCode.ILOAD, paramOffset);
        cfw.addInvoke(ByteCode.INVOKESPECIAL, "java/lang/Boolean", "<init>", "(Z)V");
    } else if (argType == Character.TYPE) {
        // Create a string of length 1 using the character parameter.
        cfw.add(ByteCode.ILOAD, paramOffset);
        cfw.addInvoke(ByteCode.INVOKESTATIC, "java/lang/String", "valueOf", "(C)Ljava/lang/String;");
    } else {
        // convert all numeric values to java.lang.Double.
        cfw.add(ByteCode.NEW, "java/lang/Double");
        cfw.add(ByteCode.DUP);
        String typeName = argType.getName();
        switch(typeName.charAt(0)) {
            case 'b':
            case 's':
            case 'i':
                // load an int value, convert to double.
                cfw.add(ByteCode.ILOAD, paramOffset);
                cfw.add(ByteCode.I2D);
                break;
            case 'l':
                // load a long, convert to double.
                cfw.add(ByteCode.LLOAD, paramOffset);
                cfw.add(ByteCode.L2D);
                size = 2;
                break;
            case 'f':
                // load a float, convert to double.
                cfw.add(ByteCode.FLOAD, paramOffset);
                cfw.add(ByteCode.F2D);
                break;
            case 'd':
                cfw.add(ByteCode.DLOAD, paramOffset);
                size = 2;
                break;
        }
        cfw.addInvoke(ByteCode.INVOKESPECIAL, "java/lang/Double", "<init>", "(D)V");
    }
    return size;
}
