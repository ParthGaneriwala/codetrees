public void view(int time) {
    if (!init) {
        this.remove(chartPanel);
    }
    init = false;
    g = new SparseMultigraph<Integer, String>();
    index = time;
    next.setEnabled(true);
    prev.setEnabled(true);
    if (time == 0)
        prev.setEnabled(false);
    if (time >= slots.size() - 1) {
        time = slots.size() - 1;
        index = slots.size() - 1;
        next.setEnabled(false);
    }
    TimeSlot timeSlot = slots.get(time);
    for (int i = 0; i < timeSlot.slots.size(); i++) {
        g.addVertex(Integer.parseInt(timeSlot.slots.get(i).id));
    }
    int count = 0;
    for (int i = 0; i < timeSlot.slots.size(); i++) {
        double[] members = timeSlot.slots.get(i).members;
        for (int j = 0; j < members.length; j++) if (members[j] != 0) {
            String edgeName = "" + count;
            g.addEdge(edgeName, Integer.parseInt(timeSlot.slots.get(i).id), (int) members[j], EdgeType.DIRECTED);
            count++;
        }
    }
    Layout<Integer, String> layout = new SpringLayout<Integer, String>(g);
    layout.setSize(new Dimension(500, 400));
    chartPanel = new VisualizationViewer<Integer, String>(layout);
    chartPanel.setPreferredSize(new Dimension(500, 400));
    // Show vertex and edge labels
    chartPanel.getRenderContext().setVertexLabelTransformer(new ToStringLabeller());
    // chartPanel.getRenderContext().setEdgeLabelTransformer(new ToStringLabeller());
    // Create a graph mouse and add it to the visualization component
    DefaultModalGraphMouse gm = new DefaultModalGraphMouse();
    gm.setMode(ModalGraphMouse.Mode.TRANSFORMING);
    chartPanel.setGraphMouse(gm);
    this.add(chartPanel);
    chartPanel.repaint();
    repaint();
}
