private void updateBlobReferences(int off, int diff) {
    // check stream tables for blob reference
    PoundTildaStream pts = parser.getPoundTildaStream();
    StreamTable st = pts.getStreamTable(CLELConstants.FIELD_TABLE);
    ArrayList<StreamTableRow> rows;
    StreamTableRow r;
    int i;
    int offset;
    if (st != null) {
        rows = st.getRows();
        // check Field table
        for (i = 0; i < rows.size(); i++) {
            r = rows.get(i);
            offset = r.getFieldSignature();
            if (off < offset)
                r.setFieldSignature(offset + diff);
        }
    }
    st = pts.getStreamTable(CLELConstants.METHODDEF_TABLE);
    if (st != null) {
        rows = st.getRows();
        // check MethodDef table
        for (i = 0; i < rows.size(); i++) {
            r = rows.get(i);
            offset = r.getMethodDefSignature();
            if (off < offset)
                r.setMethodDefSignature(offset + diff);
        }
    }
    st = pts.getStreamTable(CLELConstants.MEMBERREF_TABLE);
    if (st != null) {
        rows = st.getRows();
        // check MemberRef table
        for (i = 0; i < rows.size(); i++) {
            r = rows.get(i);
            offset = r.getMemberRefSignature();
            if (off < offset)
                r.setMemberRefSignature(offset + diff);
        }
    }
    st = pts.getStreamTable(CLELConstants.CONSTANT_TABLE);
    if (st != null) {
        rows = st.getRows();
        // check Constant table
        for (i = 0; i < rows.size(); i++) {
            r = rows.get(i);
            offset = r.getConstantValue();
            if (off < offset)
                r.setConstantValue(offset + diff);
        }
    }
    st = pts.getStreamTable(CLELConstants.CUSTOMATTRIBUTE_TABLE);
    if (st != null) {
        rows = st.getRows();
        // check CustomAttribute table
        for (i = 0; i < rows.size(); i++) {
            r = rows.get(i);
            offset = r.getCustomValue();
            if (off < offset)
                r.setCustomValue(offset + diff);
        }
    }
    st = pts.getStreamTable(CLELConstants.FIELDMARSHAL_TABLE);
    if (st != null) {
        rows = st.getRows();
        // check FieldMarsal table
        for (i = 0; i < rows.size(); i++) {
            r = rows.get(i);
            offset = r.getFieldMarshalNativeType();
            if (off < offset)
                r.setFieldMarshalNativeType(offset + diff);
        }
    }
    st = pts.getStreamTable(CLELConstants.DECLSECURITY_TABLE);
    if (st != null) {
        rows = st.getRows();
        // check DeclSecurity
        for (i = 0; i < rows.size(); i++) {
            r = rows.get(i);
            offset = r.getDeclSecurityPermissionSet();
            if (off < offset)
                r.setDeclSecurityPermissionSet(offset + diff);
        }
    }
    st = pts.getStreamTable(CLELConstants.STANDALONESIG_TABLE);
    if (st != null) {
        rows = st.getRows();
        // check StandAloneSig table
        for (i = 0; i < rows.size(); i++) {
            r = rows.get(i);
            offset = r.getStandAloneSigSignature();
            if (off < offset)
                r.setStandAloneSigSignature(offset + diff);
        }
    }
    st = pts.getStreamTable(CLELConstants.PROPERTY_TABLE);
    if (st != null) {
        rows = st.getRows();
        // check Property table
        for (i = 0; i < rows.size(); i++) {
            r = rows.get(i);
            offset = r.getPropertyType();
            if (off < offset)
                r.setPropertyType(offset + diff);
        }
    }
    st = pts.getStreamTable(CLELConstants.TYPESPEC_TABLE);
    if (st != null) {
        rows = st.getRows();
        // check TypeSpec table
        for (i = 0; i < rows.size(); i++) {
            r = rows.get(i);
            offset = r.getTypeSpecSignature();
            if (off < offset)
                r.setTypeSpecSignature(offset + diff);
        }
    }
    st = pts.getStreamTable(CLELConstants.ASSEMBLY_TABLE);
    if (st != null) {
        rows = st.getRows();
        // check Assembly table
        for (i = 0; i < rows.size(); i++) {
            r = rows.get(i);
            offset = r.getAssemblyPublicKey();
            if (off < offset)
                r.setAssemblyPublicKey(offset + diff);
        }
    }
    st = pts.getStreamTable(CLELConstants.ASSEMBLYREF_TABLE);
    if (st != null) {
        rows = st.getRows();
        // check AssemblyRef table
        for (i = 0; i < rows.size(); i++) {
            r = rows.get(i);
            offset = r.getAssemblyRefPublicKeyOrToken();
            if (off < offset)
                r.setAssemblyRefPublicKeyOrToken(offset + diff);
            offset = r.getAssemblyRefHashValue();
            if (off < offset)
                r.setAssemblyRefHashValue(offset + diff);
        }
    }
    st = pts.getStreamTable(CLELConstants.FILE_TABLE);
    if (st != null) {
        rows = st.getRows();
        // check File table
        for (i = 0; i < rows.size(); i++) {
            r = rows.get(i);
            offset = r.getFileHashValue();
            if (off < offset)
                r.setFileHashValue(offset + diff);
        }
    }
}
