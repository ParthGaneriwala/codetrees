private boolean decodeImage() throws IOException, JimiException {
    try {
        // Is it RLE compressed?
        if (header.Type == header.BYTE_ENCODED_TYPE) {
            RLEDecodeImage();
        } else {
            int scanlineSize = (header.Width * header.Depth);
            if (scanlineSize % 16 != 0) {
                scanlineSize += 16 - (scanlineSize % 16);
            }
            scanlineSize /= 8;
            if (header.Depth == 8) {
                byte[] data = new byte[header.Width];
                for (int lineNum = 0; lineNum < header.Height; lineNum++) {
                    lin.readFully(data, 0, header.Width);
                    lin.skipBytes(scanlineSize - data.length);
                    sinkImage.setChannel(0, lineNum, data);
                    setProgress((lineNum * 100) / header.Height);
                }
            } else if (header.Depth == 4) {
                byte[] data = new byte[header.Width];
                for (int lineNum = 0; lineNum < header.Height; lineNum++) {
                    for (int i = 0; i < data.length; i += 2) {
                        byte t1 = lin.readByte();
                        data[i] = (byte) (t1 >> 4);
                        data[i + 1] = (byte) (t1 & 0xF);
                    }
                    lin.skipBytes(scanlineSize - (data.length / 2));
                    sinkImage.setChannel(0, lineNum, data);
                    setProgress((lineNum * 100) / header.Height);
                }
            } else if (header.Depth < 8) {
            /* INPROGRESS CODE
				   This won't work for a few reasons, 1 we grab too many bytes.
				   and 2 the shifting of the masks is foobar.

			   	//pull it in and store it into byte array
				byte[] data = new byte[header.Width];

				byte oldByte = 0x00;
				int oldByteMask = 0xFF;
				int thisByteMask = 0xFF;

				int mask = 0;

								for(int i = 0; i < header.Depth; i++) {

					mask = mask << i;
					mask |= 1;

				}

				for(int lineNum = 0; lineNum < header.Height; lineNum++) {

					int bytesRead = 0;

					//grab a byte.  Since it is less than 8 bytes
					//we've got to split it up and combine it with
					//the next byte to get the appropriate data
					for(int i = 0; i < data.length; i++) {
											
						byte thisByte = lin.readByte();
						data[i] = (byte)((oldByte & oldByteMask) | (thisByte & thisByteMask));
						oldByte = thisByte;

						//Shift the mask
						oldByteMask = mask << (bytesRead % header.Depth);
						bytesRead++;
						//Shift the mask
						thisByteMask = mask << (bytesRead % header.Depth);
			
					}

					lin.skipBytes(scanlineSize - bytesRead);
					sinkImage.setChannel(0, lineNum, data);

				}				
				*/
            } else if (header.Depth == 16) {
                int[] data = new int[header.Width];
                for (int lineNum = 0; lineNum < header.Height; lineNum++) {
                    for (int i = 0; i < data.length; i++) {
                        data[i] = lin.readInt();
                    }
                    lin.skipBytes(scanlineSize - (data.length * 2));
                    sinkImage.setChannel(lineNum, data);
                    setProgress((lineNum * 100) / header.Height);
                }
            } else if (header.Depth < 16) {
            // pull it in and store it into short array
            // grab a byte.  Since it is less than 16 bytes
            // we've got to split it up and combine it with
            // the next byte to get the appropriate data
            } else if (header.Depth == 24) {
                int[] data = new int[header.Width];
                for (int lineNum = 0; lineNum < header.Height; lineNum++) {
                    if (header.Type == header.RGB_FORMAT_TYPE) {
                        for (int i = 0; i < data.length; i++) {
                            int t1 = lin.readUnsignedByte();
                            int t2 = lin.readUnsignedByte();
                            int t3 = lin.readUnsignedByte();
                            data[i] = (t1 << 16) | (t2 << 8) | t3;
                        }
                    } else {
                        for (int i = 0; i < data.length; i++) {
                            int t1 = lin.readUnsignedByte();
                            int t2 = lin.readUnsignedByte();
                            int t3 = lin.readUnsignedByte();
                            data[i] = (t3 << 16) | (t2 << 8) | t1;
                        }
                    }
                    lin.skipBytes(scanlineSize - (data.length * 3));
                    sinkImage.setChannel(lineNum, data);
                    setProgress((lineNum * 100) / header.Height);
                }
            } else if (header.Depth == 32) {
                int[] data = new int[header.Width];
                for (int lineNum = 0; lineNum < header.Height; lineNum++) {
                    if (header.Type == header.RGB_FORMAT_TYPE) {
                        for (int i = 0; i < data.length; i++) {
                            // throw away pad
                            lin.readByte();
                            int t1 = lin.readUnsignedByte();
                            int t2 = lin.readUnsignedByte();
                            int t3 = lin.readUnsignedByte();
                            data[i] = (t1 << 16) | (t2 << 8) | t3;
                        }
                    } else {
                        for (int i = 0; i < data.length; i++) {
                            // throw away pad
                            lin.readByte();
                            int t1 = lin.readUnsignedByte();
                            int t2 = lin.readUnsignedByte();
                            int t3 = lin.readUnsignedByte();
                            data[i] = (t3 << 16) | (t2 << 8) | t1;
                        }
                    }
                    lin.skipBytes(scanlineSize - (data.length * 4));
                    sinkImage.setChannel(lineNum, data);
                    setProgress((lineNum * 100) / header.Height);
                }
            } else {
            // pull it in and store it into int array
            }
        }
    } catch (JimiException e) {
        throw e;
    } catch (IOException ioe) {
        throw ioe;
    }
    state |= IMAGEAVAIL;
    return true;
}
