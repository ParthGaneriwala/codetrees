void paintPalette(PaintEvent event) {
    GC gc = event.gc;
    gc.fillRectangle(paletteCanvas.getClientArea());
    if (imageData.palette.isDirect) {
        // For a direct palette, display the masks.
        int y = py + 10;
        int xTab = 50;
        gc.drawString("rMsk", 10, y, true);
        gc.drawString(toHex4ByteString(imageData.palette.redMask), xTab, y, true);
        gc.drawString("gMsk", 10, y += 12, true);
        gc.drawString(toHex4ByteString(imageData.palette.greenMask), xTab, y, true);
        gc.drawString("bMsk", 10, y += 12, true);
        gc.drawString(toHex4ByteString(imageData.palette.blueMask), xTab, y, true);
        gc.drawString("rShf", 10, y += 12, true);
        gc.drawString(Integer.toString(imageData.palette.redShift), xTab, y, true);
        gc.drawString("gShf", 10, y += 12, true);
        gc.drawString(Integer.toString(imageData.palette.greenShift), xTab, y, true);
        gc.drawString("bShf", 10, y += 12, true);
        gc.drawString(Integer.toString(imageData.palette.blueShift), xTab, y, true);
    } else {
        // For an indexed palette, display the palette colors and indices.
        RGB[] rgbs = imageData.palette.getRGBs();
        if (rgbs != null) {
            int xTab1 = 40, xTab2 = 100;
            for (int i = 0; i < rgbs.length; i++) {
                int y = (i + 1) * 10 + py;
                gc.drawString(String.valueOf(i), 10, y, true);
                gc.drawString(toHexByteString(rgbs[i].red) + toHexByteString(rgbs[i].green) + toHexByteString(rgbs[i].blue), xTab1, y, true);
                Color color = new Color(display, rgbs[i]);
                gc.setBackground(color);
                gc.fillRectangle(xTab2, y + 2, 10, 10);
                color.dispose();
            }
        }
    }
}
