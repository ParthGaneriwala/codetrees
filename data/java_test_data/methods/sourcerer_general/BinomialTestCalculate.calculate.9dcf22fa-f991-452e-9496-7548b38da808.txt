/*--------------------------------------------------------------
      METHODS.
    --------------------------------------------------------------*/
public void calculate() {
    BinomialDistribution bt;
    binomialTestMap = new HashMap();
    HashSet set = new HashSet(mapSmallX.keySet());
    Iterator iterator = set.iterator();
    Integer id;
    Integer smallXvalue;
    Integer smallNvalue;
    Integer bigXvalue;
    Integer bigNvalue;
    int currentProgress = 0;
    try {
        while (iterator.hasNext()) {
            id = new Integer(iterator.next().toString());
            smallXvalue = new Integer(mapSmallX.get(id).toString());
            smallNvalue = new Integer(mapSmallN.get(id).toString());
            bigXvalue = new Integer(mapBigX.get(id).toString());
            bigNvalue = new Integer(mapBigN.get(id).toString());
            bt = new BinomialDistribution(smallXvalue.intValue(), bigXvalue.intValue(), smallNvalue.intValue(), bigNvalue.intValue());
            binomialTestMap.put(id, bt.calculateBinomialDistribution());
            // Calculate Percentage.  This must be a value between 0..100.
            int percentComplete = (int) (((double) currentProgress / maxValue) * 100);
            // Estimate Time Remaining
            long timeRemaining = maxValue - currentProgress;
            // This automatically updates the UI Component w/ progress bar.
            if (taskMonitor != null) {
                taskMonitor.setPercentCompleted(percentComplete);
                taskMonitor.setStatus("Calculating Binomial P-value: " + currentProgress + " of " + maxValue);
                taskMonitor.setEstimatedTimeRemaining(timeRemaining);
            }
            currentProgress++;
            if (interrupted) {
                throw new InterruptedException();
            }
        }
    } catch (InterruptedException e) {
        taskMonitor.setException(e, "Binomial P-value calculation cancelled");
    }
}
