private boolean eleBC(Element ele) throws ConfigFileFormatException, ClassNotFoundException, ClassCastException, InstantiationException, XmlFormatException, NoSuchElementException, IllegalAccessException, InitValidatorException {
    if (ele.getName().toLowerCase().equals("bc")) {
        // 1. 子bc运算 ...
        logger.debug("bc运算");
        return this.bcBC(ele);
    }
    if (ele.getName().toLowerCase().equals("validator")) {
        // 2. 校验器校验 ...
        String validatorId = ele.getAttributeValue("ref");
        logger.debug("查找校验器： " + validatorId);
        Element valiEle = this.valiConfiger.getValidatorEle(validatorId);
        logger.debug("查找校验类");
        AbstractValidator av = (AbstractValidator) this.getValidatorInst(valiEle.getChild("class").getText());
        logger.debug("初始化校验器");
        List params = ele.getChildren("param");
        Object[] initValues = new Object[params.size()];
        for (int i = 0; i < params.size(); i++) {
            Element e = (Element) params.get(i);
            String from = e.getAttributeValue("from");
            String key = e.getAttributeValue("key");
            if (!(from == null || key == null)) {
                initValues[i] = this.ds.getValue(from, key);
            } else {
                initValues[i] = e.getText();
            }
            // 取对象
            Object utilObj = this.utils.get(initValues[i]);
            if (utilObj != null) {
                logger.info("取到util" + initValues[i] + "对象啦");
                initValues[i] = utilObj;
            }
        }
        logger.debug("开始校验");
        boolean rs = av.validing(this.fieldValue, initValues);
        logger.debug("校验结果：　" + rs);
        return rs;
    }
    throw new ConfigFileFormatException("非法定义标签：" + ele.getName() + " 只允许<bc> or <validator>");
}
