// ------------------------------------------------------------------------
public static byte[] encodePropertyData(int key, Object[] value) {
    /* nothing to encode? */
    if ((value == null) || (value.length == 0)) {
        Print.logError("Null/empty value specified");
        return null;
    }
    /* get property attributes */
    PropCodes.Attr attr = PropCodes.getAttr(key);
    if (attr == null) {
        Print.logError("Property not found: 0x" + StringTools.toHexString(key));
        return null;
    }
    /* proper array length? */
    int arrayLen = attr.getArrayLength();
    if (arrayLen > value.length) {
        Print.logError("Invalid array length [expected " + arrayLen + "]");
        return null;
    }
    /* data buffer */
    byte[] data = null;
    /* encode data */
    if (attr.isString()) {
        if (value[0] instanceof String) {
            byte[] vs = StringTools.getBytes((String) value[0]);
            int vsLen = (vs.length <= 253) ? vs.length : 253;
            data = new byte[vsLen];
            System.arraycopy(vs, 0, data, 0, vsLen);
        }
    } else if (attr.isBinary()) {
        if (value[0] instanceof byte[]) {
            byte[] vb = (byte[]) value[0];
            int vbLen = (vb.length <= 253) ? vb.length : 253;
            data = new byte[vbLen];
            System.arraycopy(vb, 0, data, 0, vbLen);
        }
    } else if (attr.isGPS()) {
        if (value[0] instanceof GeoPoint) {
            GeoPoint gp = (GeoPoint) value[0];
            data = new byte[GeoPoint.ENCODE_HIRES_LEN];
            GeoPoint.encodeGeoPoint(gp, data, 0, data.length);
        }
    } else if (attr.isBoolean()) {
        int elemLen = attr.getTypeLength(), ofs = 0;
        data = new byte[elemLen * arrayLen];
        for (int i = 0; i < arrayLen; i++) {
            long val = 0L;
            if (value[i] instanceof Boolean) {
                val = ((Boolean) value[i]).booleanValue() ? 1L : 0L;
            } else if (value[i] instanceof Number) {
                val = (((Number) value[i]).longValue() != 0L) ? 1L : 0L;
            } else {
                // only boolean/numeric object types are allowed
                data = null;
                break;
            }
            int len = Payload.encodeLong(data, ofs, elemLen, true, val);
            if (len != elemLen) {
                // should never occur
                data = null;
                break;
            }
            ofs += elemLen;
        }
    } else if (attr.isNumeric()) {
        int elemLen = attr.getTypeLength(), ofs = 0;
        data = new byte[elemLen * arrayLen];
        for (int i = 0; i < arrayLen; i++) {
            long val = 0L;
            if (value[i] instanceof Number) {
                Number v = (Number) value[i];
                val = attr.isDecimal() ? Math.round(v.doubleValue() * 10L) : v.longValue();
            } else {
                // only numeric object types are allowed
                data = null;
                break;
            }
            int len = Payload.encodeLong(data, ofs, elemLen, true, val);
            if (len != elemLen) {
                // should never occur
                data = null;
                break;
            }
            ofs += elemLen;
        }
    }
    /* return bytes */
    return data;
}
