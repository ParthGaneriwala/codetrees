void parse(Vector<AsmExpression> exp) {
    if (exp == null)
        return;
    // program counter
    int pc = 0;
    // label(s) for this symbol (if any)
    Vector<Label> lbl = null;
    for (AsmExpression e : exp) {
        if (e.empty())
            continue;
        if (e instanceof Label) {
            // new label frame
            if (lbl == null)
                lbl = new Vector<Label>();
            lbl.add((Label) e);
        // environment.symbols.put(c.name, new Symbol(Symbol.Type.LABEL, pc));
        } else if (e instanceof Command) {
            // add command
            Command c = (Command) e;
            // current context value (ie label value)
            Object value = null;
            // add a constant: 'constant' {name:String} {value:Integer}
            if (c.name.equalsIgnoreCase("constant")) {
                if (c.list == null || c.list.size() != 2 || !(c.list.get(0) instanceof String || c.list.get(0) instanceof Integer))
                    throw new IllegalArgumentException("Bad constant declaration: " + c.toString() + " at line " + c.line);
                String name = (String) c.list.get(0);
                value = c.list.get(1);
                if (value instanceof String) {
                    try {
                        value = Integer.valueOf((String) value, 16);
                    } catch (NumberFormatException ex) {
                        throw new IllegalArgumentException("Bad constant declaration: " + c.toString() + " at line " + c.line);
                    }
                }
                environment.symbols.put(name, new Symbol(Symbol.Type.CONSTANT, value));
            } else // change address: 'address' {addr:Integer}
            if (c.name.equalsIgnoreCase("address")) {
                if (c.list == null || c.list.size() != 1 || !(c.list.get(0) instanceof String || c.list.get(0) instanceof Integer))
                    throw new IllegalArgumentException("Bad address declaration: " + c.toString() + " at line " + c.line);
                value = c.list.get(0);
                if (value instanceof String) {
                    try {
                        value = Integer.valueOf((String) value, 16);
                    } catch (NumberFormatException ex) {
                        throw new IllegalArgumentException("Bad address declaration: " + c.toString() + " at line " + c.line);
                    }
                }
                pc = ((Integer) value).intValue();
            } else // add register alias: 'register' {name:String} {value:Integer}
            if (c.name.equalsIgnoreCase("register")) {
                if (c.list == null || c.list.size() != 2 || !(c.list.get(0) instanceof String) || !(c.list.get(1) instanceof String || c.list.get(1) instanceof Integer))
                    throw new IllegalArgumentException("Bad register declaration: " + c.toString() + " at line " + c.line);
                String name = (String) c.list.get(0);
                value = c.list.get(1);
                if (value instanceof String) {
                    try {
                        String sv = (String) value;
                        if (sv.charAt(0) != 's' && sv.charAt(0) != 'S')
                            throw new NumberFormatException();
                        value = Integer.valueOf(sv.substring(1), 16);
                    } catch (NumberFormatException ex) {
                        throw new IllegalArgumentException("Bad register declaration: " + c.toString() + " at line " + c.line);
                    }
                }
                environment.symbols.put(name, new Symbol(Symbol.Type.REGISTER, value));
            } else if (c.name.equalsIgnoreCase("namereg")) {
                if (c.list == null || c.list.size() != 2 || !(c.list.get(1) instanceof String) || !(c.list.get(0) instanceof String || c.list.get(0) instanceof Integer))
                    throw new IllegalArgumentException("Bad register declaration: " + c.toString() + " at line " + c.line);
                String name = (String) c.list.get(1);
                value = c.list.get(0);
                if (value instanceof String) {
                    try {
                        String sv = (String) value;
                        if (sv.charAt(0) != 's' && sv.charAt(0) != 'S')
                            throw new NumberFormatException();
                        value = Integer.valueOf(sv.substring(1), 16);
                    } catch (NumberFormatException ex) {
                        throw new IllegalArgumentException("Bad register declaration: " + c.toString() + " at line " + c.line);
                    }
                }
                environment.symbols.put(name, new Symbol(Symbol.Type.REGISTER, value));
            } else // else, assume code and increment program counter
            {
                value = new Integer(pc);
                ++pc;
            }
            // associate labels with current context value
            if (lbl != null) {
                // we have labels
                for (Label t : lbl) environment.symbols.put(t.name, new Symbol(Symbol.Type.LABEL, value));
                // clear labels
                lbl = null;
            }
        }
    }
}
