private Simbolo proximoToken() throws Exception {
    Simbolo simbolo = null;
    try {
        Character esteCaracter = manipulador.getEsteCaracter();
        if (ehCaracterVazio(esteCaracter)) {
            esteCaracter = manipulador.leProximoNaoVazioChar();
        }
        // verifica se o caracter eh letra
        if (Character.isLetter(esteCaracter)) {
            String identificador = constroiIdentificador().toLowerCase();
            if (tabelaSimbolos.ehPalavraReservada(identificador)) {
                simbolo = new Identificador(tabelaSimbolos.getCodigoPalavraReservada(identificador), identificador, manipulador.getLinha());
            } else {
                simbolo = new Identificador(identificador, manipulador.getLinha());
            }
        } else if (Character.isDigit(esteCaracter)) {
            String numerico = constroiNumerico();
            simbolo = new Numerico(numerico, manipulador.getLinha());
        // se ï¿½ um possivel operador
        } else if (tabelaSimbolos.ehPossivelOperador(Character.toString(esteCaracter))) {
            String operador = constroiOperador().toLowerCase();
            if (ehNumeroNegativo(operador)) {
                simbolo = new Numerico(operador, manipulador.getLinha());
            } else {
                int code = tabelaSimbolos.getCodigo(operador);
                // se nao eh um comentario
                if (code == TabelaDeSimbolos.COMENTARIO_FECHA_CODE) {
                    if (manipulador.getEsteCaracter().toString().equals(")")) {
                        simbolo = new Comentario(Constantes.COMENTARIO_FECHA_CODE, "*)", manipulador.getLinha());
                        manipulador.leProximoNaoVazioChar();
                    } else {
                        simbolo = new Delimitador(code, esteCaracter.toString(), manipulador.getLinha());
                    }
                } else {
                    simbolo = new Operador(code, operador, manipulador.getLinha());
                }
            }
        // se eh um delimitador (string)
        } else if (tabelaSimbolos.ehDelimitador(esteCaracter.toString())) {
            String delimitador = esteCaracter.toString().toLowerCase();
            int code = tabelaSimbolos.getCodigo(delimitador);
            if (code == TabelaDeSimbolos.STRING_CODE) {
                simbolo = constroiString();
                manipulador.leProximoNaoVazioChar();
            // se eh comentario
            } else if (code == TabelaDeSimbolos.COMENTARIO_CODE) {
                if (manipulador.leProximoChar().toString().equals("*")) {
                    simbolo = new Comentario(Constantes.COMENTARIO_CODE, constroiComentario(), manipulador.getLinha());
                } else {
                    simbolo = new Delimitador(code, esteCaracter.toString(), manipulador.getLinha());
                }
            } else {
                simbolo = new Delimitador(code, esteCaracter.toString(), manipulador.getLinha());
                manipulador.leProximoNaoVazioChar();
            }
        // marcas de pontuacao
        } else if (tabelaSimbolos.ehMarcaDePontuacao(esteCaracter.toString())) {
            String pontuacao = esteCaracter.toString().toLowerCase();
            int code = tabelaSimbolos.getCodigo(pontuacao);
            simbolo = new Delimitador(code, esteCaracter.toString(), manipulador.getLinha());
            manipulador.leProximoNaoVazioChar();
        } else {
        // throw new ErroLexico(Constantes.MENSAGEM_SIMBOLO_DESCONHECIDO, manipulador.getLinha());
        }
    } catch (Exception e) {
        throw e;
    }
    return simbolo;
}
