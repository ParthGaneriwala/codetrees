private double calculateNextRangeAndDistance(double angel, double range, boolean counterClockWise) {
    angel = MathHelper.normaliseAngel(angel);
    double deltaToVertically = Math.sin(angel) * range;
    double deltaToHorizontally = Math.cos(angel) * range;
    double newDeltaToVertically;
    double newDeltaToHorizontally;
    double verticalAngel;
    double horizontalAngel;
    if (angel < MathHelper.NORTH_WEST || angel >= MathHelper.NORTH_EAST) {
        // North
        newDeltaToHorizontally = deltaToHorizontally - maxHeight;
        if (counterClockWise) {
            newDeltaToVertically = deltaToVertically + maxWidth;
            // Corner
            horizontalAngel = Math.acos(newDeltaToHorizontally / range);
        } else {
            newDeltaToVertically = deltaToVertically - maxWidth;
            // Corner
            horizontalAngel = -Math.acos(newDeltaToHorizontally / range);
        }
        // Normal
        verticalAngel = Math.asin(newDeltaToVertically / range);
    } else if (MathHelper.NORTH_WEST <= angel && angel < MathHelper.SOUTH_WEST) {
        // West
        newDeltaToVertically = deltaToVertically - maxWidth;
        if (counterClockWise) {
            newDeltaToHorizontally = deltaToHorizontally - maxHeight;
            // Corner
            verticalAngel = MathHelper.SOUTH - Math.asin(newDeltaToVertically / range);
        } else {
            newDeltaToHorizontally = deltaToHorizontally + maxHeight;
            // Corner
            verticalAngel = Math.asin(newDeltaToVertically / range);
        }
        // Normal
        horizontalAngel = Math.acos(newDeltaToHorizontally / range);
    } else if (MathHelper.SOUTH_WEST <= angel && angel < MathHelper.SOUTH_EAST) {
        // South
        newDeltaToHorizontally = deltaToHorizontally + maxHeight;
        if (counterClockWise) {
            newDeltaToVertically = deltaToVertically - maxWidth;
            // Corner
            horizontalAngel = -Math.acos(newDeltaToHorizontally / range);
        } else {
            newDeltaToVertically = deltaToVertically + maxWidth;
            // Corner
            horizontalAngel = Math.acos(newDeltaToHorizontally / range);
        }
        // Normal
        verticalAngel = MathHelper.SOUTH - Math.asin(newDeltaToVertically / range);
    } else {
        // East
        newDeltaToVertically = deltaToVertically + maxWidth;
        if (counterClockWise) {
            newDeltaToHorizontally = deltaToHorizontally + maxHeight;
            // Corner
            verticalAngel = Math.asin(newDeltaToVertically / range);
        } else {
            newDeltaToHorizontally = deltaToHorizontally - maxHeight;
            // Corner
            verticalAngel = MathHelper.SOUTH - Math.asin(newDeltaToVertically / range);
        }
        // Normal
        horizontalAngel = -Math.acos(newDeltaToHorizontally / range);
    }
    double newAngel;
    if (Double.isNaN(verticalAngel) && Double.isNaN(horizontalAngel)) {
        throw new IllegalStateException("Both angels are NAN");
    } else if (Double.isNaN(verticalAngel)) {
        newAngel = horizontalAngel;
    } else if (Double.isNaN(horizontalAngel)) {
        newAngel = verticalAngel;
    } else {
        newAngel = MathHelper.closerToAngel(angel, verticalAngel, horizontalAngel);
    }
    return MathHelper.normaliseAngel(newAngel);
}
