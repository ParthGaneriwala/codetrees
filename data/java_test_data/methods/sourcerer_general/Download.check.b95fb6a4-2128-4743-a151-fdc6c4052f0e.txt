public void check(int count) {
    this.count += count;
    if (partFile != null)
        if (partFile.allChunksDone()) {
            System.out.println("Download of " + fileName + " completed.");
            complete = true;
            combineChunksThread tmp = new combineChunksThread(partFile);
            tmp.start();
            partFile = null;
            return;
        }
    if (!complete) {
        synchronized (sources) {
            Iterator it = sources.iterator();
            while (it.hasNext()) {
                DownloadSource ds = (DownloadSource) it.next();
                try {
                    ds.check(count);
                } catch (Exception e) {
                    it.remove();
                }
            }
        }
        if ((System.currentTimeMillis() - lastSourceSearch) > (dInfo.getSourceSearchInterval() * 1000)) {
            if (sources.size() < dInfo.getMaxSourcesPerDownload())
                searchSources();
        }
        if (count % 10 == 0) {
            speed[0] = 0;
            speed[1] = 0;
            synchronized (sources) {
                Iterator it = sources.iterator();
                while (it.hasNext()) {
                    DownloadSource ds = (DownloadSource) it.next();
                    speed[0] += ds.getActReceiveSpeed();
                    speed[1] += ds.getTotalReceiveSpeed();
                }
            }
            speed[0] = getSpeedInKBPS((int) speed[0]);
            speed[1] = getSpeedInKBPS((int) speed[1]);
        }
    }
    if (count == 1000) {
        count = 0;
        partFile.saveGapList();
    }
}
