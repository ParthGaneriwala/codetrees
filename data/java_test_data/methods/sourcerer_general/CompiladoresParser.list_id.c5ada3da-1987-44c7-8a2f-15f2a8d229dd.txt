// $ANTLR start "list_id"
public final CompiladoresParser.list_id_return list_id() throws RecognitionException {
    CompiladoresParser.list_id_return retval = new CompiladoresParser.list_id_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token COMMA146 = null;
    CompiladoresParser.id_return id145 = null;
    CompiladoresParser.id_return id147 = null;
    CommonTree COMMA146_tree = null;
    RewriteRuleTokenStream stream_COMMA = new RewriteRuleTokenStream(adaptor, "token COMMA");
    RewriteRuleSubtreeStream stream_id = new RewriteRuleSubtreeStream(adaptor, "rule id");
    try {
        dbg.enterRule(getGrammarFileName(), "list_id");
        if (getRuleLevel() == 0) {
            dbg.commence();
        }
        incRuleLevel();
        dbg.location(186, 1);
        try {
            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:186:10: ( id ( COMMA id )* -> id ( id )* )
            dbg.enterAlt(1);
            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:186:12: id ( COMMA id )*
            {
                dbg.location(186, 12);
                pushFollow(FOLLOW_id_in_list_id1555);
                id145 = id();
                state._fsp--;
                stream_id.add(id145.getTree());
                dbg.location(186, 14);
                // /home/CIN/fmm/Desktop/grammar/Compiladores.g:186:14: ( COMMA id )*
                try {
                    dbg.enterSubRule(36);
                    loop36: do {
                        int alt36 = 2;
                        try {
                            dbg.enterDecision(36);
                            int LA36_0 = input.LA(1);
                            if ((LA36_0 == COMMA)) {
                                alt36 = 1;
                            }
                        } finally {
                            dbg.exitDecision(36);
                        }
                        switch(alt36) {
                            case 1:
                                dbg.enterAlt(1);
                                // /home/CIN/fmm/Desktop/grammar/Compiladores.g:186:15: COMMA id
                                {
                                    dbg.location(186, 15);
                                    COMMA146 = (Token) match(input, COMMA, FOLLOW_COMMA_in_list_id1557);
                                    stream_COMMA.add(COMMA146);
                                    dbg.location(186, 21);
                                    pushFollow(FOLLOW_id_in_list_id1559);
                                    id147 = id();
                                    state._fsp--;
                                    stream_id.add(id147.getTree());
                                }
                                break;
                            default:
                                break loop36;
                        }
                    } while (true);
                } finally {
                    dbg.exitSubRule(36);
                }
                // AST REWRITE
                // elements: id, id
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                retval.tree = root_0;
                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.tree : null);
                root_0 = (CommonTree) adaptor.nil();
                // 187:4: -> id ( id )*
                {
                    dbg.location(187, 7);
                    adaptor.addChild(root_0, stream_id.nextTree());
                    dbg.location(187, 9);
                    // /home/CIN/fmm/Desktop/grammar/Compiladores.g:187:9: ( id )*
                    while (stream_id.hasNext()) {
                        dbg.location(187, 10);
                        adaptor.addChild(root_0, stream_id.nextTree());
                    }
                    stream_id.reset();
                }
                retval.tree = root_0;
            }
            retval.stop = input.LT(-1);
            retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
        }
        dbg.location(188, 4);
    } finally {
        dbg.exitRule(getGrammarFileName(), "list_id");
        decRuleLevel();
        if (getRuleLevel() == 0) {
            dbg.terminate();
        }
    }
    return retval;
}
