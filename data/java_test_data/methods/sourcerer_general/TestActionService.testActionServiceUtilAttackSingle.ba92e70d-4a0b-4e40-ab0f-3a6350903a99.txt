@Test
@DirtiesContext
public void testActionServiceUtilAttackSingle() throws Exception {
    // Setup
    configureComplexGame();
    Id actor1Id = new Id(1, 1, 1);
    Id targetId = new Id(2, 2, 2);
    SyncBaseItem target = createSyncBaseItem(TEST_START_BUILDER_ITEM_ID, new Index(2000, 2000), targetId);
    SyncBaseItem actor1 = createSyncBaseItem(TEST_ATTACK_ITEM_ID, new Index(1000, 1000), actor1Id);
    List<CircleFormation.CircleFormationItem> itemsIn = new ArrayList<CircleFormation.CircleFormationItem>();
    itemsIn.add(new CircleFormation.CircleFormationItem(actor1, 100));
    List<CircleFormation.CircleFormationItem> itemsOut = new ArrayList<CircleFormation.CircleFormationItem>();
    itemsOut.add(new CircleFormation.CircleFormationItem(actor1, 100, new Index(100, 100), true));
    ItemService itemServiceMock = EasyMock.createNiceMock(ItemService.class);
    EasyMock.expect(itemServiceMock.getItem(actor1Id)).andReturn(actor1);
    EasyMock.expect(itemServiceMock.getItem(targetId)).andReturn(target);
    EasyMock.replay(itemServiceMock);
    CollisionService collisionServiceMock = EasyMock.createNiceMock(CollisionService.class);
    EasyMock.expect(collisionServiceMock.setupDestinationHints(target, itemsIn)).andReturn(itemsOut);
    EasyMock.replay(collisionServiceMock);
    // Run test
    List<BaseCommand> baseCommands = new ArrayList<BaseCommand>();
    baseCommands.add(createAttackCommand(actor1Id, targetId));
    ActionServiceUtil.addDestinationHintToCommands(baseCommands, collisionServiceMock, itemServiceMock);
    // Verify
    Assert.assertEquals(1, baseCommands.size());
    Assert.assertEquals(new Index(100, 100), ((AttackCommand) baseCommands.get(0)).getDestinationHint());
}
