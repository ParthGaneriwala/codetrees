private void checkType(SynNode node) {
    while (node != null) {
        SymTable previousTable = null;
        SymTable newTable = null;
        if (node instanceof FuncDeclNode) {
            FuncDeclNode temp = (FuncDeclNode) node;
            String tableName = temp.getName() + FuncSymbol.getFuncSignatureString(FuncSymbol.getParamsType(temp));
            newTable = Tables.lookupSymTable(this.tables.get(GLOBAL_TABLE).getName() + "." + tableName, this.tables);
            if (newTable != null) {
                String[] s = newTable.getName().split("\\.");
                FuncSymbol fs = Tables.lookupFuncSymbol(s[s.length - 1], this.tables);
                TypeNode type = (TypeNode) temp.getChild(FuncDeclNode.TYPE);
                if (fs != null && fs.getType() == type.getType()) {
                    previousTable = this.currentTable;
                    newTable.setActive(true);
                    this.currentTable = newTable;
                }
            }
        } else if (node instanceof IfNode && this.currentTable.getScopeLevel() == FUNC_SCOPE) {
            newTable = Tables.lookupSymTable(this.currentTable.getName() + ".if", this.tables);
            if (newTable != null) {
                previousTable = this.currentTable;
                newTable.setActive(true);
                this.currentTable = newTable;
            }
        } else if (node instanceof ElseNode && this.currentTable.getScopeLevel() == FUNC_SCOPE) {
            newTable = Tables.lookupSymTable(this.currentTable.getName() + ".else", this.tables);
            if (newTable != null) {
                previousTable = this.currentTable;
                newTable.setActive(true);
                this.currentTable = newTable;
            }
        } else if (node instanceof ForNode && this.currentTable.getScopeLevel() == FUNC_SCOPE) {
            newTable = Tables.lookupSymTable(this.currentTable.getName() + ".for", this.tables);
            if (newTable != null) {
                previousTable = this.currentTable;
                newTable.setActive(true);
                this.currentTable = newTable;
            }
        } else if (node instanceof WhileNode && this.currentTable.getScopeLevel() == FUNC_SCOPE) {
            newTable = Tables.lookupSymTable(this.currentTable.getName() + ".while", this.tables);
            if (newTable != null) {
                previousTable = this.currentTable;
                newTable.setActive(true);
                this.currentTable = newTable;
            }
        }
        for (int i = 0; i < node.getChildCount(); i++) this.checkType(node.getChild(i));
        if (node instanceof NumNode) {
            NumNode temp = (NumNode) node;
            Object value = temp.getValue();
            if (value instanceof Integer)
                temp.setType(Type.INT);
            else if (value instanceof Double)
                temp.setType(Type.DEC);
        } else if (node instanceof TextNode) {
            TextNode temp = (TextNode) node;
            temp.setType(Type.TEXT);
        } else if (node instanceof BoolNode) {
            BoolNode temp = (BoolNode) node;
            temp.setType(Type.BOOLEAN);
        } else if (node instanceof VarNode) {
            VarNode temp = (VarNode) node;
            Symbol sym = Tables.lookupVarSymbol(temp.getName(), true, this.tables);
            if (sym != null) {
                ExpNode index = (ExpNode) temp.getChild(VarNode.INDEX);
                if (index != null) {
                    if (index.getType() != Type.INT)
                        this.putError(temp.getLineNo(), "El indice de un arreglo debe ser de tipo '" + Type.INT + "'");
                    Type baseType = this.typeOfArray(sym.getType());
                    if (baseType != Type.VOID)
                        temp.setType(baseType);
                    else {
                        temp.setType(sym.getType());
                        this.putError(temp.getLineNo(), "Se esperaba un arreglo, pero se encontro un tipo '" + sym.getType() + "'");
                    }
                } else
                    temp.setType(sym.getType());
            } else
                this.putError(temp.getLineNo(), "Uso de variable '" + temp.getName() + "' no declarada");
        } else if (node instanceof OpNode) {
            OpNode temp = (OpNode) node;
            String name = temp.getName();
            ExpNode c1 = (ExpNode) temp.getChild(OpNode.LEFT);
            ExpNode c2 = (ExpNode) temp.getChild(OpNode.RIGHT);
            if (name.equals(TokenType.EQ.toString()) || name.equals(TokenType.NEQ.toString()) || name.equals(TokenType.LT.toString()) || name.equals(TokenType.LTEQ.toString()) || name.equals(TokenType.GT.toString()) || name.equals(TokenType.GTEQ.toString()))
                temp.setType(Type.BOOLEAN);
            else if (name.equals(TokenType.PLUS.toString()) || name.equals(TokenType.MINUS.toString()) || name.equals(TokenType.TIMES.toString()) || name.equals(TokenType.OVER.toString())) {
                if (c1 != null && c2 != null) {
                    if ((c1.getType() == Type.ARRAYOFINT || c1.getType() == Type.ARRAYOFDEC) && (c2.getType() == Type.ARRAYOFINT || c2.getType() == Type.ARRAYOFDEC))
                        this.putError(temp.getLineNo(), "No se puede operar aritmeticamente arreglos");
                    else if ((c1.getType() == c2.getType()))
                        temp.setType(c1.getType());
                    else
                        this.putError(temp.getLineNo(), "Operacion aritmetica de tipos no compatibles, " + "no se puede convertir de '" + c2.getType() + "' a '" + c1.getType() + "'");
                } else if (c2 == null) {
                    if (c1.getType() == Type.ARRAYOFINT || c1.getType() == Type.ARRAYOFDEC)
                        this.putError(temp.getLineNo(), "No se puede operar aritmeticamente arreglos");
                    else
                        temp.setType(c1.getType());
                }
            } else if (name.equals(TokenType.ASSIGN.toString())) {
                if (c1 != null && c2 != null) {
                    if (c1.getType() == c2.getType())
                        temp.setType(c1.getType());
                    else
                        this.putError(temp.getLineNo(), "Asignacion de tipos diferentes, no se puede " + "convertir de '" + c2.getType() + "' a '" + c1.getType() + "'");
                }
            }
        } else if (node instanceof CallNode) {
            CallNode temp = (CallNode) node;
            ArrayList<Type> argsType = this.getCallArgsType(temp);
            String callName = temp.getName() + FuncSymbol.getFuncSignatureString(argsType);
            FuncSymbol fs = Tables.lookupFuncSymbol(callName, this.tables);
            if (fs != null)
                temp.setType(fs.getType());
            else
                this.putError(temp.getLineNo(), "Uso de funcion '" + temp.getName() + "' no declarada");
        }
        if (previousTable != null) {
            this.currentTable.setActive(false);
            this.currentTable = previousTable;
        }
        node = node.getSibling();
    }
}
