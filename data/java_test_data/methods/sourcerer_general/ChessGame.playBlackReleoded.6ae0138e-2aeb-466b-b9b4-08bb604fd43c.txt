public void playBlackReleoded() {
    ChessBoard originalBoard = ChessGame.getInstance().getBoard();
    List<BlackPieceChessMovement> movements = originalBoard.getAllPosibleBlackPiecesMovements();
    ChessHeuristicFunction function = new ChessHeuristicFunction();
    Integer minHeuristic = 200;
    BlackPieceChessMovement minHeuristicMovement = null;
    List<Integer> heuristicValues = new ArrayList<Integer>();
    List<BlackPieceChessMovement> validMovements = new ArrayList<BlackPieceChessMovement>();
    for (BlackPieceChessMovement move : movements) {
        ChessBoard clonedBoard = originalBoard.clone();
        move.setBoard(clonedBoard);
        if (clonedBoard.isValidMovement(move)) {
            clonedBoard.moveWithThis(move);
            int heuristicValue = function.getHeuristicValue(clonedBoard);
            heuristicValues.add(heuristicValue);
            validMovements.add(move);
            if (heuristicValue < minHeuristic) {
                minHeuristic = heuristicValue;
                minHeuristicMovement = move;
            }
        }
    }
    if (allMovesHaveSameHeuristic(heuristicValues)) {
        int randomIndex = getRandomValue(0, validMovements.size());
        ChessMovement move = validMovements.get(randomIndex);
        move.setBoard(originalBoard);
        originalBoard.moveWithThis(move);
    } else {
        // reestablece el tablero original
        minHeuristicMovement.setBoard(originalBoard);
        originalBoard.moveWithThis(minHeuristicMovement);
    }
}
