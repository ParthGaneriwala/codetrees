@SuppressWarnings("unchecked")
@Override
public List<Cost> getCosts(Code code) throws Exception {
    Expression e = ExpressionFactory.matchExp(Jcdetail.CATNUM_PROPERTY, code.getCostCode());
    e = e.andExp(ExpressionFactory.matchExp(Jcdetail.JOBNUM_PROPERTY, code.getJobNum()));
    e = e.andExp(ExpressionFactory.matchExp(Jcdetail.PHASENUM_PROPERTY, code.getDivision()));
    Expression types = null;
    for (Iterator<Integer> i = map(code.getPhaseCode()); i.hasNext(); ) {
        if (types == null)
            types = ExpressionFactory.matchExp(Jcdetail.TYPE_PROPERTY, i.next());
        else
            types = types.orExp(ExpressionFactory.matchExp(Jcdetail.TYPE_PROPERTY, i.next()));
    }
    e = e.andExp(types);
    SelectQuery s = new SelectQuery(Jcdetail.class, e);
    s.addOrdering(Jcdetail.DATE_PROPERTY, false);
    List<Cost> costs = new ArrayList<Cost>();
    Jcdetail jc;
    code = getCode(code);
    if (code != null) {
        Cost cost;
        Overhead oh = null;
        double burden = 0;
        for (Iterator i = context.performQuery(s).iterator(); i.hasNext(); ) {
            jc = (Jcdetail) i.next();
            if (oh == null)
                oh = new Overhead(jc.getJob());
            cost = getCost(jc);
            cost.setCode(code);
            burden += oh.get(jc.getType()) * cost.getCost();
            costs.add(cost);
        }
        if (burden != 0)
            costs.add(addOverhead(code, burden));
    }
    return costs;
}
