public void testDefaultParserFactory() throws Exception {
    DefaultFTPFileEntryParserFactory factory = new DefaultFTPFileEntryParserFactory();
    FTPFileEntryParser parser = factory.createFileEntryParser("unix");
    assertTrue(parser instanceof UnixFTPEntryParser);
    parser = factory.createFileEntryParser("UNIX");
    assertTrue(parser instanceof UnixFTPEntryParser);
    parser = factory.createFileEntryParser("Unix");
    assertTrue(parser instanceof UnixFTPEntryParser);
    parser = factory.createFileEntryParser("EnterpriseUnix");
    assertTrue(parser instanceof UnixFTPEntryParser);
    assertFalse(parser instanceof EnterpriseUnixFTPEntryParser);
    // works because contains the expression "Unix"
    parser = factory.createFileEntryParser("UnixFTPEntryParser");
    assertTrue(parser instanceof UnixFTPEntryParser);
    try {
        parser = factory.createFileEntryParser("NT");
        fail("Exception should have been thrown. \"NT\" is not a recognized key");
    } catch (ParserInitializationException pie) {
        assertNull(pie.getRootCause());
    }
    parser = factory.createFileEntryParser("WindowsNT");
    assertTrue(parser instanceof CompositeFileEntryParser);
    parser = factory.createFileEntryParser("ThigaVMSaMaJig");
    assertTrue(parser instanceof VMSFTPEntryParser);
    parser = factory.createFileEntryParser("OS/2");
    assertTrue(parser instanceof OS2FTPEntryParser);
    parser = factory.createFileEntryParser("OS/400");
    assertTrue(parser instanceof CompositeFileEntryParser);
    parser = factory.createFileEntryParser("AS/400");
    assertTrue(parser instanceof CompositeFileEntryParser);
    // Added test to make sure it handles the Unix systems that were
    // compiled with OS as "UNKNOWN". This test validates that the
    // check is case-insensitive.
    parser = factory.createFileEntryParser("UNKNOWN Type: L8");
    try {
        parser = factory.createFileEntryParser("OS2FTPFileEntryParser");
        fail("Exception should have been thrown. \"OS2FTPFileEntryParser\" is not a recognized key");
    } catch (ParserInitializationException pie) {
        assertNull(pie.getRootCause());
    }
    parser = factory.createFileEntryParser("org.apache.commons.net.ftp.parser.OS2FTPEntryParser");
    assertTrue(parser instanceof OS2FTPEntryParser);
    try {
        parser = factory.createFileEntryParser("org.apache.commons.net.ftp.parser.DefaultFTPFileEntryParserFactory");
        fail("Exception should have been thrown. \"DefaultFTPFileEntryParserFactory\" does not implement FTPFileEntryParser");
    } catch (ParserInitializationException pie) {
        Throwable root = pie.getRootCause();
        assertTrue(root instanceof ClassCastException);
    }
}
