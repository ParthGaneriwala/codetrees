public boolean checkAllRegexesInMacroMap() {
    boolean result = true;
    for (Map.Entry<String, String> entry : macroMap.entrySet()) {
        String key = entry.getKey();
        String value = entry.getValue();
        value = value.replaceAll("&backslash;", "\\\\");
        value = value.replaceAll("&dollar;", "\\$");
        try {
            if (!hasBalancedParentheses(value)) {
                throw new Exception("Unmatched parentheses in abbreviation " + key);
            }
        } catch (MalformedCachePatternException me) {
            System.err.println("Caught other (non-round-parentheses) regex error for abbreviation " + key);
            // + "\n\t" + value);
            result = false;
        } catch (Exception e) {
            System.err.println(e.toString());
            result = false;
        }
        Reader reader;
        Bob_Lexer lexer;
        Bob_Parser parser;
        Bob_TreeParser treeparser;
        try {
            reader = new StringReader('"' + value + '"');
            lexer = new Bob_Lexer(reader);
            parser = new Bob_Parser(lexer);
            parser.setASTNodeClass("it.unibz.lib.bob.check.MyAST");
            treeparser = new Bob_TreeParser();
            treeparser.setASTNodeClass("it.unibz.lib.bob.check.MyAST");
            // note that we do not use bexpression (since the abkdatei
            // doesn't contain extended regex)
            parser.quotedRe();
        } catch (RecognitionException e) {
            System.err.println("In abbreviation definition " + key + ": TreeParser threw RecognitionException. " + e.toString());
            result = false;
        } catch (TokenStreamException e) {
            System.err.println("In abbreviation definition " + key + ": TreeParser threw TokenStreamException. " + e.toString());
            result = false;
        } catch (Exception e) {
            System.err.println("In abbreviation definition " + key + ": TreeParser threw Exception. " + e.toString());
            result = false;
        }
    }
    return result;
}
