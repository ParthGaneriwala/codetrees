@Override
protected void handleMessage(ACLMessage msg) {
    NotifyCHMessage notifyCHMessage = null;
    Event e = null;
    try {
        notifyCHMessage = (NotifyCHMessage) msg.getContentObject();
    } catch (UnreadableException ex) {
        Logger.getLogger(NotifyListenBehaviour.class.getName()).log(Level.SEVERE, null, ex);
    }
    ContentEventFilter contentFilter = new ContentEventFilter();
    // ACLMessage nmsg = new ACLMessage(msg.getPerformative());
    // nmsg.setEncoding(Config.NOTIFY_NAME);
    NotifyCHMessage nchmsg = null;
    try {
        nchmsg = (NotifyCHMessage) msg.getContentObject();
    } catch (UnreadableException ex) {
        Logger.getLogger(NotifyListenBehaviour.class.getName()).log(Level.SEVERE, null, ex);
    }
    ACLMessage nmsg = new ACLMessage(ACLMessage.SUBSCRIBE);
    nmsg.setEncoding(Config.NOTIFY_NAME);
    try {
        nmsg.setContentObject((Serializable) nchmsg.getEvent());
    } catch (IOException ex) {
        Logger.getLogger(NotifyListenBehaviour.class.getName()).log(Level.SEVERE, null, ex);
    }
    Vector filtered = new Vector();
    Vector recipients = (Vector) ch.getNodesList().clone();
    recipients.retainAll(notifyCHMessage.getRecipients());
    if (recipients.size() == 0)
        return;
    ContentEventFilter contentEventFilter = new ContentEventFilter();
    Iterator i = recipients.iterator();
    while (i.hasNext()) {
        String recipient = (String) i.next();
        if (contentEventFilter.filterSubscription(nchmsg.getEvent(), ch.getNodeInfo(recipient).getContentSubscription()))
            ch.addReceiver(recipient, nmsg);
        else
            filtered.add(recipient);
    }
    ch.sendMessage(nmsg);
    NotifyRecipients(Config.EVENT_SERVICE_NAME, nchmsg.getEvent(), filtered);
}
