private void setVariables() {
    String cryptKey = database.urlProperties.getProperty(HsqlDatabaseProperties.url_crypt_key);
    if (cryptKey != null) {
        String cryptType = database.urlProperties.getProperty(HsqlDatabaseProperties.url_crypt_type);
        String cryptProvider = database.urlProperties.getProperty(HsqlDatabaseProperties.url_crypt_provider);
        crypto = new Crypto(cryptKey, cryptType, cryptProvider);
    }
    if (database.databaseProperties.isPropertyTrue(HsqlDatabaseProperties.hsqldb_readonly)) {
        database.setReadOnly();
    }
    if (database.databaseProperties.isPropertyTrue(HsqlDatabaseProperties.hsqldb_files_readonly)) {
        database.setFilesReadOnly();
    }
    // handle invalid paths as well as access issues
    if (!database.isFilesReadOnly()) {
        if (database.getType() == DatabaseURL.S_MEM || isStoredFileAccess) {
            tempDirectoryPath = database.getProperties().getStringProperty(HsqlDatabaseProperties.hsqldb_temp_directory);
        } else {
            tempDirectoryPath = database.getPath() + ".tmp";
        }
        if (tempDirectoryPath != null) {
            tempDirectoryPath = FileUtil.makeDirectories(tempDirectoryPath);
        }
    }
    boolean version18 = database.databaseProperties.isVersion18();
    if (!isNewDatabase && !version18) {
        return;
    }
    if (tempDirectoryPath != null) {
        int rows = database.databaseProperties.getIntegerProperty(HsqlDatabaseProperties.hsqldb_result_max_memory_rows);
        database.setResultMaxMemoryRows(rows);
    }
    String tableType = database.databaseProperties.getStringProperty(HsqlDatabaseProperties.hsqldb_default_table_type);
    if ("CACHED".equalsIgnoreCase(tableType)) {
        database.schemaManager.setDefaultTableType(TableBase.CACHED_TABLE);
    }
    String txMode = database.databaseProperties.getStringProperty(HsqlDatabaseProperties.hsqldb_tx);
    if (Tokens.T_MVCC.equalsIgnoreCase(txMode)) {
        propTxMode = TransactionManager.MVCC;
    } else if (Tokens.T_MVLOCKS.equalsIgnoreCase(txMode)) {
        propTxMode = TransactionManager.MVLOCKS;
    } else if (Tokens.T_LOCKS.equalsIgnoreCase(txMode)) {
        propTxMode = TransactionManager.LOCKS;
    }
    switch(propTxMode) {
        case TransactionManager.LOCKS:
            break;
        case TransactionManager.MVLOCKS:
            database.txManager = new TransactionManagerMV2PL(database);
            break;
        case TransactionManager.MVCC:
            database.txManager = new TransactionManagerMVCC(database);
            break;
    }
    String txLevel = database.databaseProperties.getStringProperty(HsqlDatabaseProperties.hsqldb_tx_level);
    if (Tokens.T_SERIALIZABLE.equalsIgnoreCase(txLevel)) {
        database.defaultIsolationLevel = SessionInterface.TX_SERIALIZABLE;
    } else {
        database.defaultIsolationLevel = SessionInterface.TX_READ_COMMITTED;
    }
    database.sqlEnforceRefs = database.databaseProperties.isPropertyTrue(HsqlDatabaseProperties.sql_enforce_refs);
    database.sqlEnforceSize = database.databaseProperties.isPropertyTrue(HsqlDatabaseProperties.sql_enforce_strict_size);
    database.sqlEnforceSize = database.databaseProperties.isPropertyTrue(HsqlDatabaseProperties.sql_enforce_size);
    database.sqlEnforceNames = database.databaseProperties.isPropertyTrue(HsqlDatabaseProperties.sql_enforce_names);
    if (database.databaseProperties.isPropertyTrue(HsqlDatabaseProperties.sql_compare_in_locale)) {
        database.collation.setCollationAsLocale();
    }
    propEventLogLevel = database.databaseProperties.getIntegerProperty(HsqlDatabaseProperties.hsqldb_applog);
    propFilesReadOnly = database.databaseProperties.isPropertyTrue(HsqlDatabaseProperties.hsqldb_files_readonly);
    propDatabaseReadOnly = database.databaseProperties.isPropertyTrue(HsqlDatabaseProperties.hsqldb_readonly);
    propIncrementBackup = database.databaseProperties.isPropertyTrue(HsqlDatabaseProperties.hsqldb_inc_backup);
    propNioDataFile = database.databaseProperties.isPropertyTrue(HsqlDatabaseProperties.hsqldb_nio_data_file);
    propCacheMaxRows = database.databaseProperties.getIntegerProperty(HsqlDatabaseProperties.hsqldb_cache_rows);
    propCacheMaxSize = database.databaseProperties.getIntegerProperty(HsqlDatabaseProperties.hsqldb_cache_size) * 1024;
    setLobFileScaleNoCheck(database.databaseProperties.getIntegerProperty(HsqlDatabaseProperties.hsqldb_lob_file_scale));
    setCacheFileScaleNoCheck(database.databaseProperties.getIntegerProperty(HsqlDatabaseProperties.hsqldb_cache_file_scale));
    propCacheDefragLimit = database.databaseProperties.getIntegerProperty(HsqlDatabaseProperties.hsqldb_defrag_limit);
    propMaxFreeBlocks = database.databaseProperties.getIntegerProperty(HsqlDatabaseProperties.hsqldb_cache_free_count_scale);
    propMaxFreeBlocks = 1 << propMaxFreeBlocks;
    propTextAllowFullPath = database.databaseProperties.isPropertyTrue(HsqlDatabaseProperties.textdb_allow_full_path);
    propWriteDelay = database.databaseProperties.getIntegerProperty(HsqlDatabaseProperties.hsqldb_write_delay_millis);
    if (!database.databaseProperties.isPropertyTrue(HsqlDatabaseProperties.hsqldb_write_delay)) {
        propWriteDelay = 0;
    }
    propLogSize = database.databaseProperties.getIntegerProperty(HsqlDatabaseProperties.hsqldb_log_size);
    propLogData = database.databaseProperties.isPropertyTrue(HsqlDatabaseProperties.hsqldb_log_data);
    propGC = database.databaseProperties.getIntegerProperty(HsqlDatabaseProperties.runtime_gc_interval);
    propRefIntegrity = database.databaseProperties.isPropertyTrue(HsqlDatabaseProperties.sql_ref_integrity);
}
