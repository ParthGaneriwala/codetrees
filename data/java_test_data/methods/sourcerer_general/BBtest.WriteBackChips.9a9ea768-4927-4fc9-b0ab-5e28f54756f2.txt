public void WriteBackChips() {
    String recordChipsString = "New personal bests for:";
    boolean atLeastOneNewRecord = false;
    DataOutputStream dos = null;
    try {
        dos = new DataOutputStream(new BufferedOutputStream(new FileOutputStream("./chipdata.db")));
        for (int i = 0; i < maxID; i++) {
            if (active[i]) {
                dos.writeFloat(actualchips[i]);
                chipslistretainorder[i] = actualchips[i];
            } else {
                dos.writeFloat(chipslistretainorder[i]);
            }
        }
    } catch (IOException e) {
        logException(e);
    } finally {
        FileHelper.closeQuietly(dos);
    }
    DataOutputStream dos2 = null;
    try {
        dos2 = new DataOutputStream(new BufferedOutputStream(new FileOutputStream("./futures.db")));
        for (int i = 0; i < maxID; i++) {
            dos2.writeInt(futures[i]);
        }
    } catch (IOException e) {
        logException(e);
    } finally {
        FileHelper.closeQuietly(dos2);
    }
    DataOutputStream dosr2b = null;
    try {
        dosr2b = new DataOutputStream(new BufferedOutputStream(new FileOutputStream("./orderbook.db")));
        for (int j = 2; j < orderBook[0].size(); j++) {
            dosr2b.writeInt(orderBook[0].elementAt(j));
            dosr2b.writeInt(orderBook[1].elementAt(j));
            dosr2b.writeInt(orderBook[2].elementAt(j));
            dosr2b.writeLong(orderBookTimeStamp.elementAt(j));
        }
        dosr2b.writeInt(99999);
        dosr2b.writeInt(0);
        dosr2b.writeInt(0);
        dosr2b.writeLong(System.currentTimeMillis());
    } catch (IOException e) {
        logException(e);
    } finally {
        FileHelper.closeQuietly(dosr2b);
    }
    DataOutputStream dosuu = null;
    try {
        dosuu = new DataOutputStream(new BufferedOutputStream(new FileOutputStream("./jackpot.db")));
        dosuu.writeFloat(slotJackpot);
    } catch (IOException e) {
        logException(e);
    } finally {
        FileHelper.closeQuietly(dosuu);
    }
    String bTitle = "";
    for (int i = 0; i < maxID; i++) {
        if (chipslistretainorder[i] + ((float) (futures[i] * (lastFuturesPrice / 10000.0))) > recordChips[i]) {
            if (masterPoints[i] > 9) {
                if (masterPoints[i] > 29) {
                    bTitle = "(BGM)";
                } else {
                    bTitle = "(BM)";
                }
            } else {
                bTitle = "";
            }
            for (int j = 1; j < 40; j++) {
                if (chipslistretainorder[i] + ((float) (futures[i] * (lastFuturesPrice / 10000.0))) >= (50000 * j)) {
                    if (recordChips[i] < j * 50000) {
                        if (masterPoints[i] == 0) {
                            masterHandleList[masterCounter] = handlelistretainorder[i];
                            masterPointsList[masterCounter] = masterPoints[i] + 1;
                            masterCounter = masterCounter + 1;
                        }
                        masterPoints[i] = masterPoints[i] + 1;
                        tellChannel("" + handlelistretainorder[i] + bTitle + " broke " + (j * 50000) + " chips and receives one Master point.");
                        sendLine("message " + handlelistretainorder[i] + " Congratulations on breaking " + (j * 50000) + " chips for the first time. You receive one Master point.");
                        break;
                    }
                } else {
                    break;
                }
            }
            recordChips[i] = chipslistretainorder[i] + ((float) (futures[i] * (lastFuturesPrice / 10000.0)));
            recordChipsString = recordChipsString.concat(" " + handlelistretainorder[i] + bTitle + "(" + ((int) (Math.floor(recordChips[i]))) + ")");
            atLeastOneNewRecord = true;
        }
    }
    if (atLeastOneNewRecord) {
        tellChannel(recordChipsString);
    // sendLine("message Regionchamp "+recordChipsString.substring(9));
    }
    DataOutputStream dosv = null;
    try {
        dosv = new DataOutputStream(new BufferedOutputStream(new FileOutputStream("./playervars.db")));
        for (int i = 0; i < maxID; i++) {
            dosv.writeInt(numbertourneysbet[i]);
            dosv.writeFloat(totalturnover[i]);
            dosv.writeBoolean(messagevar[i]);
            dosv.writeBoolean(nonoisevar[i]);
            dosv.writeBoolean(eligible[i]);
            dosv.writeBoolean(jin[i]);
            dosv.writeBoolean(simOpen[i]);
            dosv.writeBoolean(unpaidFT[i]);
            dosv.writeInt(amountvar[i]);
            dosv.writeInt(botvar[i]);
            dosv.writeInt(masterPoints[i]);
            dosv.writeFloat(recordChips[i]);
            dosv.writeInt(selfBetType[i]);
            dosv.writeInt(selfBetAmount[i]);
            dosv.writeInt(slotProfits[i]);
            dosv.writeInt(slotTurnover[i]);
            dosv.writeInt(weeklySlotProfits[i]);
            dosv.writeInt(weeklySlotTurnover[i]);
            dosv.writeInt(monthlyFuturesTurnover[i]);
            dosv.writeFloat(doubleintmultiplier[i]);
            dosv.writeInt(commentLength[i]);
            if (commentLength[i] > 0) {
                for (int j = 0; j < commentLength[i]; j++) {
                    dosv.writeBytes(comments[i].elementAt(j));
                    dosv.writeByte('\n');
                }
            }
        }
    } catch (IOException e) {
        logException(e);
    } finally {
        FileHelper.closeQuietly(dosv);
    }
}
