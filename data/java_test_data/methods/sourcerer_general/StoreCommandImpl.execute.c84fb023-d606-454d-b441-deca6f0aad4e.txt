public String execute(String cmdline, PrintStream out, PrintStream err) throws InsuffisantPrivilege {
    StringBuffer res = new StringBuffer();
    EcomCustomerRemote ecomCustomerBean = (EcomCustomerRemote) _context.getVar("customerBean");
    EcomAdminRemote ecomAdminBean = (EcomAdminRemote) _context.getVar("adminBean");
    Outputs currentOutput = (Outputs) _context.getVar("output");
    String currentCurrency = String.valueOf(_context.getVar("currency"));
    Collection<ProductStoreBean> storeList = null;
    StringTokenizer st = new StringTokenizer(cmdline, " ");
    // Ignore cmd
    st.nextToken();
    // without arg : list all stores
    if (st.countTokens() == 0) {
        storeList = ecomAdminBean.getStores();
        return printList(out, storeList, currentOutput, ecomCustomerBean, currentCurrency);
    } else // With option
    {
        String option = st.nextToken();
        // adding
        if (option.equals("-add")) {
            if (true != _context.getVar("adminMode")) {
                throw new InsuffisantPrivilege();
            }
            if (st.countTokens() == 3) {
                try {
                    String name = st.nextToken();
                    String city = st.nextToken();
                    int accountID = Integer.parseInt(st.nextToken());
                    int id = ecomAdminBean.createProductStore(accountID, name, city);
                    res.append(_context.returnCode("Store Created with id #" + id, RESULT_ACTION.SUCCESS));
                } catch (UnknownIdentifier ex) {
                    res.append(_context.returnCode(ex.toString(), RESULT_ACTION.FAILED));
                    err.println(ex);
                } catch (Exception ex) {
                    res.append(_context.returnCode(ex.toString(), RESULT_ACTION.FAILED));
                    err.println("Error with store creation");
                }
            } else {
                res.append(_context.returnCode(Shell.INCORRECT_ARGS_NUMBER, RESULT_ACTION.FAILED));
                err.println(Shell.INCORRECT_ARGS_NUMBER);
            }
        } else // removing
        if (option.equals("-remove")) {
            if (true != _context.getVar("adminMode")) {
                throw new InsuffisantPrivilege();
            }
            if (st.countTokens() == 1) {
                try {
                    int id = Integer.valueOf(st.nextToken());
                    ecomAdminBean.removeStore(id);
                    res.append(_context.returnCode("Store #" + id + " deleted", RESULT_ACTION.SUCCESS));
                } catch (UnknownIdentifier ex) {
                    res.append(_context.returnCode(ex.toString(), RESULT_ACTION.FAILED));
                    err.println(ex);
                } catch (Exception ex) {
                    res.append(_context.returnCode(ex.toString(), RESULT_ACTION.FAILED));
                    err.println("Error with store remove" + ex);
                }
            } else {
                res.append(_context.returnCode(Shell.INCORRECT_ARGS_NUMBER, RESULT_ACTION.FAILED));
                err.println(Shell.INCORRECT_ARGS_NUMBER);
            }
        } else if (option.equals("-id")) {
            if (st.countTokens() == 1) {
                try {
                    int id = Integer.valueOf(st.nextToken());
                    ProductStoreBean store = ecomCustomerBean.getStoreById(id);
                    return printStore(out, store, currentOutput, ecomCustomerBean, currentCurrency);
                } catch (UnknownIdentifier ex) {
                    res.append(_context.returnCode(ex.toString(), RESULT_ACTION.FAILED));
                    err.println(ex);
                } catch (Exception ex) {
                    res.append(_context.returnCode(ex.toString(), RESULT_ACTION.FAILED));
                    err.println("Error with store detail");
                }
            } else {
                res.append(_context.returnCode(Shell.INCORRECT_ARGS_NUMBER, RESULT_ACTION.FAILED));
                err.println(Shell.INCORRECT_ARGS_NUMBER);
            }
        } else if (option.equals("-addStock")) {
            if (true != _context.getVar("adminMode")) {
                throw new InsuffisantPrivilege();
            }
            if (st.countTokens() == 8) {
                try {
                    if (".p".equalsIgnoreCase(st.nextToken().trim())) {
                        int productId = Integer.valueOf(st.nextToken().trim());
                        if (".s".equalsIgnoreCase(st.nextToken().trim())) {
                            int storeId = Integer.valueOf(st.nextToken().trim());
                            if (".q".equalsIgnoreCase(st.nextToken().trim())) {
                                int q = Integer.valueOf(st.nextToken().trim());
                                if (".price".equalsIgnoreCase(st.nextToken().trim())) {
                                    double price = Double.valueOf(st.nextToken().trim());
                                    ecomAdminBean.createStockLine(storeId, productId, q, price);
                                    res.append(_context.returnCode("STOCK ADDED", RESULT_ACTION.SUCCESS));
                                }
                            }
                        }
                    }
                } catch (UnknownIdentifier ex) {
                    res.append(_context.returnCode(ex.toString(), RESULT_ACTION.FAILED));
                    err.println(ex);
                } catch (Exception ex) {
                    res.append(_context.returnCode(ex.toString(), RESULT_ACTION.FAILED));
                    err.println("Error with store warehouse update");
                }
            } else {
                res.append(_context.returnCode(Shell.INCORRECT_ARGS_NUMBER, RESULT_ACTION.FAILED));
                err.println(Shell.INCORRECT_ARGS_NUMBER);
            }
        } else {
            err.println("\t" + option + " is not known for Account Management");
        }
    }
    return res.toString();
}
