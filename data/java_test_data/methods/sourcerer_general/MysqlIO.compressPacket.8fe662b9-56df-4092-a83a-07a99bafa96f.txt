private Buffer compressPacket(Buffer packet, int offset, int packetLen, int headerLength) throws SQLException {
    packet.writeLongInt(packetLen - headerLength);
    // wrapped packet has 0 packet seq.
    packet.writeByte((byte) 0);
    int lengthToWrite = 0;
    int compressedLength = 0;
    byte[] bytesToCompress = packet.getByteBuffer();
    byte[] compressedBytes = null;
    int offsetWrite = 0;
    if (packetLen < MIN_COMPRESS_LEN) {
        lengthToWrite = packetLen;
        compressedBytes = packet.getByteBuffer();
        compressedLength = 0;
        offsetWrite = offset;
    } else {
        compressedBytes = new byte[bytesToCompress.length * 2];
        this.deflater.reset();
        this.deflater.setInput(bytesToCompress, offset, packetLen);
        this.deflater.finish();
        int compLen = this.deflater.deflate(compressedBytes);
        if (compLen > packetLen) {
            lengthToWrite = packetLen;
            compressedBytes = packet.getByteBuffer();
            compressedLength = 0;
            offsetWrite = offset;
        } else {
            lengthToWrite = compLen;
            headerLength += COMP_HEADER_LENGTH;
            compressedLength = packetLen;
        }
    }
    Buffer compressedPacket = new Buffer(packetLen + headerLength);
    compressedPacket.setPosition(0);
    compressedPacket.writeLongInt(lengthToWrite);
    compressedPacket.writeByte(this.packetSequence);
    compressedPacket.writeLongInt(compressedLength);
    compressedPacket.writeBytesNoNull(compressedBytes, offsetWrite, lengthToWrite);
    return compressedPacket;
}
