private static Object[] runTestSetUp(String className) {
    // Debug.message("[VM] runTestSetUp" + className);
    Class<?> cl = loadAndInitClass(className);
    try {
        // construct an instance of the test case (firstly trying the
        // String argument constructor - then the no-arg constructor)
        Object testCase = null;
        Class<?>[] partypes = new Class[1];
        partypes[0] = String.class;
        try {
            Constructor<?> ct = cl.getConstructor(partypes);
            Object[] arglist = new Object[1];
            arglist[0] = "TestCase " + className;
            testCase = ct.newInstance(arglist);
        } catch (NoSuchMethodException nsme) {
            testCase = null;
        }
        if (testCase == null) {
            testCase = cl.newInstance();
        }
        // cannot execute setUp directly because it is protected
        // we can however use reflection to call it because this VM
        // has access protection disabled
        Method setUpMethod = findMethod(cl, "setUp", null);
        if (setUpMethod != null) {
            setUpMethod.setAccessible(true);
            setUpMethod.invoke(testCase, (Object[]) null);
        }
        // pick up all declared fields
        // this will not get inherited fields!! (would need to deal
        // with them some other way)
        Field[] fields = cl.getDeclaredFields();
        // we make it one bigger than double the number of fields to store the
        // test case object which is used later for extracting (possibly generic) fields
        // whose exact generic types may not be available via class level
        // reflection
        Object[] obs = new Object[fields.length * 2 + 1];
        for (int i = 0; i < fields.length; i++) {
            // make sure we can access the field regardless of protection
            fields[i].setAccessible(true);
            // fill in the return array in the format
            // name, object, name, object
            obs[i * 2] = fields[i].getName();
            obs[i * 2 + 1] = fields[i].get(testCase);
        }
        // add the testcase as the last object in the array
        obs[obs.length - 1] = testCase;
        return obs;
    } catch (Throwable e) {
        e.printStackTrace();
    }
    return new Object[0];
}
