@SuppressWarnings("unchecked")
public void testInsertBlobByDTO() {
    InputStream inputStream = null;
    OutputStream outputStream = null;
    ReadableByteChannel inputChannel = null;
    WritableByteChannel outputChannel = null;
    String fileId;
    try {
        inputStream = new FileInputStream(sourceFile);
        outputStream = new ByteArrayOutputStream();
        inputChannel = Channels.newChannel(inputStream);
        outputChannel = Channels.newChannel(outputStream);
        int sourceFileSize = ChannelUtil.copy(inputChannel, outputChannel);
        fileId = sequenceIdGenerationService.getNextStringId();
        String uniqueFileName = uuidGenerationService.getNextStringId();
        // test
        FileDTO fileDTO = new FileDTO();
        fileDTO.setFileId(fileId);
        fileDTO.setRealFileName(sourceFile.getName());
        fileDTO.setUniqueFileName(uniqueFileName);
        fileDTO.setRepositoryPath(null);
        fileDTO.setContentType("image/jpeg");
        fileDTO.setFileSize(sourceFileSize);
        fileDTO.setBytes(((ByteArrayOutputStream) outputStream).toByteArray());
        queryService.create(fileDTO);
        // assert
        List<FileDTO> fileDTOList = (List) queryService.find(fileDTO);
        FileDTO returnedFileDTO = fileDTOList.get(0);
        targetFile = new File("C:/" + returnedFileDTO.getRealFileName());
        byte[] bytes = returnedFileDTO.getBytes();
        inputStream = new ByteArrayInputStream(bytes);
        outputStream = new FileOutputStream(targetFile);
        inputChannel = Channels.newChannel(inputStream);
        outputChannel = Channels.newChannel(outputStream);
        int targetFileSize = ChannelUtil.copy(inputChannel, outputChannel);
        assertEquals(sourceFileSize, targetFileSize);
        assertEquals(fileDTO.getUniqueFileName(), returnedFileDTO.getUniqueFileName());
    } catch (Exception e) {
        e.printStackTrace();
        fail();
    } finally {
        try {
            inputChannel.close();
            outputChannel.close();
            inputStream.close();
            outputStream.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
