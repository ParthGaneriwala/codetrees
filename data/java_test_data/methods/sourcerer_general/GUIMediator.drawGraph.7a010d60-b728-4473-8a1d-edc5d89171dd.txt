public void drawGraph(Graphics g) {
    removeAll();
    if (levels == null) {
        return;
    }
    graphics = g;
    graphics2D = (Graphics2D) g;
    // Find the minimum x offset of among all levels
    int numLevels = levels.size();
    int leftMostXOffset = 0;
    for (int i = 0; i < numLevels; i++) {
        BFSLevel level = levels.elementAt(i);
        Vector<Node> nodesInLevel = level.getNodes();
        Node leftMostNodeInLevel = nodesInLevel.elementAt(0);
        DrawingParameters drawingParams = nodesVsDrawingParameters.get(leftMostNodeInLevel);
        int xOffsetForLeftMostNode = drawingParams.getXPosition();
        if (xOffsetForLeftMostNode < leftMostXOffset)
            leftMostXOffset = xOffsetForLeftMostNode;
    }
    if (leftMostXOffset == 0) {
        leftMostXOffset = leftMargin;
    } else if (leftMostXOffset < 0) {
        leftMostXOffset = 0 - leftMostXOffset + 10;
    }
    // Now draw each node
    for (int i = 0; i < numLevels; i++) {
        BFSLevel level = levels.elementAt(i);
        Vector<Node> nodesInLevel = level.getNodes();
        // y offset for this
        int yOffSet = getVerticalDistanceForLayer(i);
        // level
        int numNodes = nodesInLevel.size();
        for (int j = 0; j < numNodes; j++) {
            Node node = nodesInLevel.elementAt(j);
            DrawingParameters drawingParams = nodesVsDrawingParameters.get(node);
            int xOffset = drawingParams.getXPosition();
            // Update the horizontal
            drawingParams.setXPosition(xOffset);
            // position
            drawNode(node, xOffset, yOffSet);
        }
    }
    // Draw all edges
    int numEdges = edgeParametersList.size();
    for (int i = 0; i < numEdges; i++) {
        EdgeParameters edgeParameters = edgeParametersList.elementAt(i);
        Color currentColor = getColor();
        if (edgeParameters.isBackEdge()) {
            graphics.setColor(Color.MAGENTA);
        }
        // Draw the lines
        Vector<Line> lines = edgeParameters.getLines();
        int numLines = lines.size();
        for (int a = 0; a < numLines; a++) {
            Line line = lines.elementAt(a);
            Point start = line.getStartPoint();
            Point end = line.getEndPoint();
            graphics.drawLine(start.x, start.y, end.x, end.y);
        }
        // Draw the triangles
        Vector<Point[]> triangles = edgeParameters.getTriangles();
        if (triangles != null) {
            for (int j = 0; j < triangles.size(); j++) {
                Point[] triangle = triangles.elementAt(j);
                int[] xPoints = new int[3];
                int[] yPoints = new int[3];
                xPoints[0] = triangle[0].x;
                xPoints[1] = triangle[1].x;
                xPoints[2] = triangle[2].x;
                yPoints[0] = triangle[0].y;
                yPoints[1] = triangle[1].y;
                yPoints[2] = triangle[2].y;
                graphics.fillPolygon(xPoints, yPoints, 3);
            }
        }
        // Reset to current color
        if (edgeParameters.isBackEdge()) {
            graphics.setColor(currentColor);
        }
    }
}
