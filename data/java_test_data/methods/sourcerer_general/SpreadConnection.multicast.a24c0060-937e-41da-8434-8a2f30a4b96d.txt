// Sends the message.
// ///////////////////
public void multicast(SpreadMessage message) throws SpreadException {
    // //////////////////////////
    if (connected == false) {
        throw new SpreadException("Not connected.");
    }
    // The groups this message is going to.
    // /////////////////////////////////////
    SpreadGroup[] groups = message.getGroups();
    // The message data.
    // //////////////////
    byte[] data = message.getData();
    // Calculate the total number of bytes.
    // /////////////////////////////////////
    // serviceType, numGroups, type/hint, dataLen
    int numBytes = 16;
    // private group
    numBytes += MAX_GROUP_NAME;
    // groups
    numBytes += (MAX_GROUP_NAME * groups.length);
    if (numBytes + data.length > MAX_MESSAGE_LENGTH) {
        throw new SpreadException("Message is too long for a Spread Message");
    }
    // Allocate the send buffer.
    // //////////////////////////
    byte[] buffer = new byte[numBytes];
    int bufferIndex = 0;
    // The service type.
    // //////////////////
    toBytes(message.getServiceType(), buffer, bufferIndex);
    bufferIndex += 4;
    // The private group.
    // ///////////////////
    toBytes(group, buffer, bufferIndex);
    bufferIndex += MAX_GROUP_NAME;
    // The number of groups.
    // //////////////////////
    toBytes(groups.length, buffer, bufferIndex);
    bufferIndex += 4;
    // The service type and hint.
    // ///////////////////////////
    toBytes(((int) message.getType() << 8) & 0x00FFFF00, buffer, bufferIndex);
    bufferIndex += 4;
    // The data length.
    // /////////////////
    toBytes(data.length, buffer, bufferIndex);
    bufferIndex += 4;
    // /////////////////
    for (int i = 0; i < groups.length; i++) {
        toBytes(groups[i], buffer, bufferIndex);
        bufferIndex += MAX_GROUP_NAME;
    }
    // /////////
    synchronized (wsynchro) {
        try {
            socketOutput.write(buffer);
            socketOutput.write(data);
        } catch (IOException e) {
            throw new SpreadException("write(): " + e.toString());
        }
    }
}
