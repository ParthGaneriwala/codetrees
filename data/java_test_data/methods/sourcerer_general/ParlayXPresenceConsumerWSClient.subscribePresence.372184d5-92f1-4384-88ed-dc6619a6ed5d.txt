public void subscribePresence(String watcher, String presentity) throws Exception {
    try {
        // create envelope for the request to send
        PresenceConsumerServiceStub.SubscribePresence subscribePresence = new PresenceConsumerServiceStub.SubscribePresence();
        // add method parameters to request envelope
        subscribePresence.setWatcher(new URI(watcher));
        URI[] presentities = new URI[1];
        presentities[0] = new URI(presentity);
        subscribePresence.setPresentities(presentities);
        // set a name for the application to use this method.
        subscribePresence.setApplication("subscription");
        // create a SimpleReference object. This object will have the reverse endpoint for another
        // interface where Gateway service will notify every presentity state change.
        SimpleReference reference = new SimpleReference();
        // read reverse notification endpoint from config properties and include into SimpleReference object
        String presenceNotificationEPR = PresenceConsumerConfigInfo.getInstance().getConfigProperty("parlayx.presence.notification.ws.endpoint");
        reference.setEndpoint(new URI(presenceNotificationEPR));
        // this correlator is needed for subsequents request to be correlated. All the request in
        // same correlator will be associated to the same initial operation. In this method, this
        // correlator is not really needed, because a new one is generated when this method is executed.
        reference.setCorrelator("subcribePresenceCorrelator");
        // name for the reverse interface. Not only the reverse end point where send notifications is needed
        // but interface name also to be completely identified.
        reference.setInterfaceName("PresenceNotificationService");
        subscribePresence.setReference(reference);
        // set as presence attribute to manage a PIDF xml content
        PresenceAttributeType[] attributes = new PresenceAttributeType[1];
        attributes[0] = PresenceAttributeType.PIDF;
        subscribePresence.setAttributes(attributes);
        // create request and add input data
        PresenceConsumerServiceStub.SubscribePresence3 request = new PresenceConsumerServiceStub.SubscribePresence3();
        request.setSubscribePresence(subscribePresence);
        // call webservice through the stub generated by WSDL2Java tool from wsdl.
        // The endpoint for the webservice to call is readed from config properties
        String endpointSync = PresenceConsumerConfigInfo.getInstance().getConfigProperty("parlayx.presence.consumer.ws.endpoint.sync");
        PresenceConsumerServiceStub stub = new PresenceConsumerServiceStub(endpointSync);
        // include name and password as basic authentication into soap headers, for security reasons
        ServiceClient sClient = stub._getServiceClient();
        Options opt = sClient.getOptions();
        HttpTransportProperties.Authenticator authenticator = new HttpTransportProperties.Authenticator();
        authenticator.setRealm(HttpTransportProperties.Authenticator.BASIC);
        authenticator.setUsername(PresenceConsumerConfigInfo.getInstance().getConfigProperty("security.user"));
        authenticator.setPassword(PresenceConsumerConfigInfo.getInstance().getConfigProperty("security.password"));
        authenticator.setPreemptiveAuthentication(true);
        opt.setProperty(org.apache.axis2.transport.http.HTTPConstants.AUTHENTICATE, authenticator);
        sClient.setOptions(opt);
        stub._setServiceClient(sClient);
        // call remote ws method
        stub.subscribePresence(request);
    // if nothing extrange happens, don't return nothing. Exception otherwise
    } catch (Exception e) {
        // an exception is thrown when some problem happens while calling remote ws.
        throw new Exception("An exception happened while calling subscribePresence():" + e.toString());
    }
}
