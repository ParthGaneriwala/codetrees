public void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {
    /*
UserService userService = UserServiceFactory.getUserService();
User user = userService.getCurrentUser();

String tokenID = req.getParameter("tokenID");
String refundTokenID = req.getParameter("refundTokenID");
String status = req.getParameter("status");
*/
    String signature = req.getParameter("signature");
    // The following generates a page showing all the request parameters
    PrintWriter out = resp.getWriter();
    resp.setContentType("text/plain");
    String accessKeyId = PropertyBundle.getProperty(PropertyKeys.AWS_ACCESS_KEY);
    String secretAccessKey = PropertyBundle.getProperty(PropertyKeys.AWS_SECRET_KEY);
    // out.println("accessKeyId: " + accessKeyId);
    // out.println("secretAccessKey: " + secretAccessKey);
    Customer c = null;
    EnqueuePayQueue enqueuepayqueue = null;
    PersistenceManager pm = PMF.get().getPersistenceManager();
    try {
        if (req.getParameter("_queueid") != null)
            enqueuepayqueue = pm.getObjectById(EnqueuePayQueue.class, Long.parseLong(req.getParameter("_queueid")));
        out.println("enqueuepayqueue: " + enqueuepayqueue);
    } finally {
        pm.close();
    }
    boolean valid = false;
    try {
        out.println("url: " + req.getRequestURL() + "?" + req.getQueryString());
        out.println("signature: " + signature);
        AmazonFPSCBUIUtils obj = new AmazonFPSCBUIUtils(accessKeyId, secretAccessKey);
        out.println("check signature: " + req.getQueryString().replaceFirst("_queueid=.*&signature", "signature"));
        valid = obj.validateQueryString(req.getQueryString().replaceFirst("_queueid=.*&signature", "signature"), signature);
        out.println("valid: " + valid);
    } catch (Exception e) {
        out.println("validate: e: " + e.getMessage());
        e.printStackTrace();
    }
    // do not check for signature.
    valid = true;
    if (valid) {
        // Get the values of all request parameters
        Enumeration enum1 = req.getParameterNames();
        String name = null;
        // String value = null;
        String id = null;
        String reference = null;
        String token = null;
        for (; enum1.hasMoreElements(); ) {
            // Get the name of the request parameter
            name = (String) enum1.nextElement();
            out.println(name);
            // Get the value of the request parameter
            // value = req.getParameter(name);
            // If the request parameter can appear more than once in the query string, get all values
            String[] values = req.getParameterValues(name);
            for (int i = 0; i < values.length; i++) {
                out.println("    " + values[i]);
                if (name.equals("callerReference")) {
                    id = values[i];
                    reference = values[i];
                }
                if (name.equals("tokenID")) {
                    token = values[i];
                }
            }
        }
        pm = PMF.get().getPersistenceManager();
        try {
            id = id.replaceAll(GET_CustomerRecurringToken_appengineServlet.NAME, "");
            id = id.replaceAll(NAME_RECURRING, "");
            c = pm.getObjectById(Customer.class, Long.parseLong(id));
            out.println("customer: " + c);
        } finally {
            pm.close();
        }
        /**
         * *********************************************************************
         * Instantiate Http Client Implementation of Amazon FPS
         * *********************************************************************
         */
        /**/
        AmazonFPS service = new AmazonFPSClient(accessKeyId, secretAccessKey);
        PayRequest fpsRequest = new PayRequest();
        fpsRequest.setCallerReference(NAME + "-" + System.currentTimeMillis() + "-" + reference);
        fpsRequest.setSenderTokenId(token);
        fpsRequest.setRecipientTokenId(c.getRec_token());
        // use to fund your account in the sandbox
        // fpsRequest.setChargeFeeTo( ChargeFeeTo.RECIPIENT );
        fpsRequest.setChargeFeeTo(ChargeFeeTo.CALLER);
        Amount amount = new Amount();
        amount.setCurrencyCode(CurrencyCode.USD);
        amount.setValue(c.getAmount());
        fpsRequest.setTransactionAmount(amount);
        // PayResponse fpsResponse = invokePay(service, fpsRequest, out);
        // String fpsResponse = invokePayString(service, fpsRequest, out);
        Document fpsResponse = invokePayDocument(service, fpsRequest, out);
        out.println("fpsResponse: " + fpsResponse);
        if (fpsResponse != null) {
            NodeList nodelist = fpsResponse.getElementsByTagName("TransactionId");
            for (int i = 0; i < nodelist.getLength(); i++) {
                Node childNode = nodelist.item(i);
                out.println("node: " + childNode);
                out.println("textcontent: " + childNode.getTextContent());
                c.setTransactionId(childNode.getTextContent());
            }
            NodeList nodelist1 = fpsResponse.getElementsByTagName("Error");
            for (int i = 0; i < nodelist1.getLength(); i++) {
                Node childNode = nodelist1.item(i);
                out.println("error node: " + childNode);
                out.println("textcontent: " + childNode.getTextContent());
                if (enqueuepayqueue != null)
                    enqueuepayqueue.setResponse(new Text(childNode.getTextContent()));
            }
            /*   
		for(Node childNode = node.getFirstChild();
		childNode!=null;){
		Node nextChild = childNode.getNextSibling();
		// Do something with childNode,
		//   including move or delete...
		childNode = nextChild;
		}
		*/
            /**/
            pm = PMF.get().getPersistenceManager();
            try {
                // c.setXmlResponse(fpsResponse);
                c.setXmlResponse(fpsResponse.getTextContent());
                // c.setXmlResponse(fpsResponse.toString());
                pm.makePersistent(c);
            } catch (Exception e) {
                System.out.println("QQQ: e: " + e.getMessage());
                e.printStackTrace();
                System.out.println("QQQ: ^^^^^^^^^^^^");
            } finally {
                pm.close();
            }
            pm = PMF.get().getPersistenceManager();
            try {
                System.out.println("QQQ: enqueuepayqueue: " + enqueuepayqueue);
                System.out.println("QQQ: enqueuepayqueue: setResponse: " + fpsResponse.getTextContent());
                if (enqueuepayqueue != null) {
                    if (fpsResponse.getTextContent() != null)
                        enqueuepayqueue.setResponse(new Text(fpsResponse.getTextContent()));
                    enqueuepayqueue.setDate_sent(new Date());
                    pm.makePersistent(enqueuepayqueue);
                }
            } catch (Exception e) {
                System.out.println("QQQ: e: " + e.getMessage());
                e.printStackTrace();
                System.out.println("QQQ: ^^^^^^^^^^^^");
            } finally {
                pm.close();
            }
        }
    } else {
        out.println("parameters have been modified and therefore are invalid.");
        pm = PMF.get().getPersistenceManager();
        out.println("enqueupayqueue: " + enqueuepayqueue);
        out.println("customer: " + c);
        try {
            if (c != null) {
                c.setXmlResponse("parameters have been modified and therefore are invalid.");
                pm.makePersistent(c);
            }
            if (enqueuepayqueue != null) {
                enqueuepayqueue.setResponse(new Text("parameters have been modified and therefore are invalid."));
                pm.makePersistent(enqueuepayqueue);
            }
        } finally {
            pm.close();
        }
    }
    out.close();
}
