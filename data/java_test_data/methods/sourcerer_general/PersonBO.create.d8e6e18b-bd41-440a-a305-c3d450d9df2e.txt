public void create(PersonVO person) throws SjsuUniversiryException {
    try {
        MyDBConnection db = new MyDBConnection();
        Connection con = db.getMyConnection();
        Statement smt = con.createStatement();
        String query = null;
        String sid = null;
        String stuType = null;
        String empid = null;
        String dept = null;
        String pDay = null;
        int pStartTime = 0;
        int pEndTime = 0;
        String Building = null;
        int room = 0;
        int locid = 0;
        String firstName = person.getFisrtName();
        if (firstName == null || firstName.length() < 1) {
            SjsuUniversiryException.raiseException("Please enter first name");
        }
        if (firstName.length() > 40) {
            SjsuUniversiryException.raiseException("First Name cannot be greater that 40 Characters");
        }
        String lastName = person.getLastName();
        if (lastName == null || lastName.length() < 1) {
            SjsuUniversiryException.raiseException("Please enter Last name");
        }
        if (lastName.length() > 40) {
            SjsuUniversiryException.raiseException("Last Name cannot be greater that 40 Characters");
        }
        String address = person.getAddress();
        if (address == null || address.length() < 1) {
            SjsuUniversiryException.raiseException("Please enter Address");
        }
        if (address.length() > 100) {
            SjsuUniversiryException.raiseException("Address cannot be greater that 100 Characters");
        }
        String city = person.getCity();
        if (city == null || city.length() < 1) {
            SjsuUniversiryException.raiseException("Please enter City");
        }
        if (city.length() > 40) {
            SjsuUniversiryException.raiseException("City cannot be greater that 40 Characters");
        }
        // new String[49];
        String[] states = { "AL", "AK", "AS", "AZ", "AR", "CA", "CO", "CT", "DE", "DC", "FM", "FL", "GA", "GU", "HI", "ID", "IL", "IN", "IA", "KS", "KY", "LA", "ME", "MH", "MD", "MA", "MI", "MN", "MS", "MO", "MT", "NE", "NV", "NH", "NJ", "NM", "NY", "NC", "ND", "MP", "OH", "OK", "OR", "PW", "PA", "PR", "RI", "SC", "SD", "TN", "TX", "UT", "VT", "VI", "VA", "WA", "WV", "WI", "WY" };
        String state = person.getState();
        boolean isStateFound = false;
        for (int i = 0; i < states.length; i++) {
            if (state.equals(states[i])) {
                isStateFound = true;
                break;
            }
        }
        if (!isStateFound) {
            SjsuUniversiryException.raiseException("Please enter a valid state");
        }
        if (state == null || state.length() < 1) {
            SjsuUniversiryException.raiseException("Please enter State");
        }
        int zip = person.getZip();
        if (!(zip >= 10000 && zip <= 99999)) {
            SjsuUniversiryException.raiseException("Invalid Zip Code - Only 5 digit Zip code allowed");
        }
        String personType = person.getPersonType();
        if (personType.equals("Student")) {
            StudentVO student = (StudentVO) person;
            sid = student.getStudentId();
            if (sid == null || sid.length() < 1) {
                SjsuUniversiryException.raiseException("Please enter Student ID");
            }
            boolean sidvalid = false;
            String[] sidTokens = sid.split("-");
            if (sidTokens.length == 3) {
                if (sidTokens[0].length() == 3)
                    if (sidTokens[1].length() == 2)
                        if (sidTokens[2].length() == 4) {
                            sidvalid = true;
                        }
            }
            if (!sidvalid) {
                SjsuUniversiryException.raiseException("Student ID is not valid");
            }
            stuType = student.getStudentType();
            if (!(stuType.equals("Resident") || stuType.equals("Non-Resident"))) {
                SjsuUniversiryException.raiseException("Student Type is not valid");
            }
            query = "INSERT INTO Person (Pid,FirstName,LastName,Address,City,State,Zip,StuType,PersonType) values('" + sid + "','" + firstName + "','" + lastName + "','" + address + "', '" + city + "','" + state + "'," + zip + " ,'" + stuType + "','" + personType + "');";
        } else if (personType.equals("Instructor")) {
            InstructorVO instructor = (InstructorVO) person;
            MeetingHrs meetingHr = instructor.getOfficeHours();
            pDay = meetingHr.getDay();
            pStartTime = meetingHr.getStartHr();
            pEndTime = meetingHr.getEndHr();
            LocationVO loc = instructor.getLocation();
            if (loc != null) {
                Building = loc.getBuilding();
                room = loc.getRoom();
            }
            CourseBO coursebo = new CourseBO();
            locid = coursebo.locExists(Building, room);
            if (locid == 0) {
                locid = coursebo.insertLocation(Building, room);
            }
            if (pStartTime > pEndTime) {
                SjsuUniversiryException.raiseException("End time cannot be before Start time");
            }
            empid = instructor.getEmployeeID();
            if (empid == null || empid.length() < 1) {
                SjsuUniversiryException.raiseException("Please enter EmpId");
            }
            dept = instructor.getDepartment();
            if (dept == null || dept.length() < 1) {
                SjsuUniversiryException.raiseException("Please enter State");
            }
            query = "INSERT INTO Person (Pid,FirstName,LastName,Address,City,State,Zip,Dept,PDay,PStartTime,PEndTime,PersonType,Lid) values('" + empid + "','" + firstName + "','" + lastName + "','" + address + "', '" + city + "','" + state + "'," + zip + " ,'" + dept + "','" + pDay + "','" + pStartTime + "','" + pEndTime + "','" + personType + "','" + locid + "');";
        }
        System.out.println("Query " + query);
        smt.executeUpdate(query);
        smt.close();
        MyDBConnection.close(smt);
    } catch (SQLException ex) {
        SjsuUniversiryException.raiseException("", ex);
    }
}
