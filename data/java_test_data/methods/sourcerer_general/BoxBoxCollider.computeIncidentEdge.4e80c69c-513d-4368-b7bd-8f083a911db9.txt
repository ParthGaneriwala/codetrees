private void computeIncidentEdge(ClipVertex[] c, ROVector2f h, ROVector2f pos, Matrix2f rot, Vector2f normal) {
    // The normal is from the reference box. Convert it
    // to the incident boxe's frame and flip sign.
    Matrix2f rotT = rot.transpose();
    Vector2f n = MathUtil.scale(MathUtil.mul(rotT, normal), -1);
    Vector2f nAbs = MathUtil.abs(n);
    if (nAbs.x > nAbs.y) {
        if (MathUtil.sign(n.x) > 0.0f) {
            c[0].v.set(h.getX(), -h.getY());
            c[0].fp.inEdge2 = EDGE3;
            c[0].fp.outEdge2 = EDGE4;
            c[1].v.set(h.getX(), h.getY());
            c[1].fp.inEdge2 = EDGE4;
            c[1].fp.outEdge2 = EDGE1;
        } else {
            c[0].v.set(-h.getX(), h.getY());
            c[0].fp.inEdge2 = EDGE1;
            c[0].fp.outEdge2 = EDGE2;
            c[1].v.set(-h.getX(), -h.getY());
            c[1].fp.inEdge2 = EDGE2;
            c[1].fp.outEdge2 = EDGE3;
        }
    } else {
        if (MathUtil.sign(n.y) > 0.0f) {
            c[0].v.set(h.getX(), h.getY());
            c[0].fp.inEdge2 = EDGE4;
            c[0].fp.outEdge2 = EDGE1;
            c[1].v.set(-h.getX(), h.getY());
            c[1].fp.inEdge2 = EDGE1;
            c[1].fp.outEdge2 = EDGE2;
        } else {
            c[0].v.set(-h.getX(), -h.getY());
            c[0].fp.inEdge2 = EDGE2;
            c[0].fp.outEdge2 = EDGE3;
            c[1].v.set(h.getX(), -h.getY());
            c[1].fp.inEdge2 = EDGE3;
            c[1].fp.outEdge2 = EDGE4;
        }
    }
    c[0].v = MathUtil.mul(rot, c[0].v);
    c[0].v.add(pos);
    c[1].v = MathUtil.mul(rot, c[1].v);
    c[1].v.add(pos);
}
