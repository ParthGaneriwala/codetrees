public FrameI startElement(String uri, String localName, String rawName, Attributes atts) throws SAXParseException {
    clearSubject();
    if (uri == null || uri.equals("")) {
        warning(WARN_UNQUALIFIED_ELEMENT, "Unqualified typed nodes are not allowed. Type treated as a relative URI.");
    }
    AttributeLexer ap = new AttributeLexer(this, A_XMLLANG | A_XMLBASE | A_XML_OTHER | // legal rdf:
    A_ID | A_NODEID | A_ABOUT | A_TYPE, // bad rdf:
    A_BADATTRS);
    ap.processSpecials(taint, atts);
    AbsXMLContext x = ap.xml(xml);
    if (ap.id != null) {
        subject = URIReference.fromID(this, x, ap.id);
    }
    if (ap.about != null) {
        if (subject != null)
            warning(ERR_SYNTAX_ERROR, "Both ID and about");
        subject = URIReference.resolve(this, x, ap.about);
    }
    if (ap.nodeID != null) {
        if (subject != null) {
            if (ap.about != null)
                warning(ERR_SYNTAX_ERROR, "Both nodeID and about");
            if (ap.id != null)
                warning(ERR_SYNTAX_ERROR, "Both ID and nodeID");
        }
        subject = new ARPResource(arp, ap.nodeID);
        checkXMLName(subject, ap.nodeID);
        subjectIsBlank = true;
    }
    if (subject == null) {
        subject = new ARPResource(arp);
        subjectIsBlank = true;
    }
    ElementLexer el = new ElementLexer(taint, this, uri, localName, rawName, E_DESCRIPTION, CoreAndOldTerms | E_LI, true);
    if (taint.isTainted())
        subject.taint();
    if (!el.goodMatch) {
        URIReference type = URIReference.fromQName(this, uri, localName);
        if (el.badMatch && taint.isTainted()) {
            type.taint();
        }
        triple(subject, RDF_TYPE, type);
    }
    processPropertyAttributes(ap, atts, x);
    return new WantPropertyElement(this, x);
}
