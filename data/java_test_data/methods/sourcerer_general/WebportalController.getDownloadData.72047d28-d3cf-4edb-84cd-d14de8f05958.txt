@RequestMapping(value = "/downloaddata/{id}", method = RequestMethod.GET)
public ModelAndView getDownloadData(@PathVariable("id") String id, HttpServletRequest req, HttpServletResponse resp) throws IOException {
    String output = new String();
    String eol = System.getProperty("line.separator");
    // Query the datastore
    DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();
    Query q = new Query("Report");
    q.addFilter("dataCollectionId", Query.FilterOperator.EQUAL, id);
    // Build the list of results
    PreparedQuery pq = datastore.prepare(q);
    for (Entity result : pq.asIterable()) {
        Key k = result.getKey();
        String rID = KeyFactory.keyToString(k);
        output += "ID = " + rID + eol + "Reporter ID = " + result.getProperty("reporterId").toString() + eol + "Collection Time = " + result.getProperty("collectionTime").toString() + eol + "Report Time = " + result.getProperty("reportTime").toString() + eol + "Data = " + eol + eol;
        // Query the datastore for existing types
        Query qString = new Query("StringDataItem");
        qString.addFilter("reportId", Query.FilterOperator.EQUAL, rID);
        Query qLocation = new Query("LocationDataItem");
        qLocation.addFilter("reportId", Query.FilterOperator.EQUAL, rID);
        // Build the list of string results
        PreparedQuery pqString = datastore.prepare(qString);
        for (Entity resultString : pqString.asIterable()) {
            Key kString = resultString.getKey();
            output += "   ID = " + KeyFactory.keyToString(kString) + eol + "   Type = String" + eol + "   Data = " + resultString.getProperty("data").toString() + eol + eol;
        }
        // Build the list of location results
        PreparedQuery pqLocation = datastore.prepare(qLocation);
        for (Entity resultLocation : pqLocation.asIterable()) {
            Key kLocation = resultLocation.getKey();
            output += "   ID = " + KeyFactory.keyToString(kLocation) + eol + "   Type = Location" + eol + "   Data = " + resultLocation.getProperty("latitude").toString() + ", " + resultLocation.getProperty("longitude").toString() + eol + eol;
        }
    }
    String filename = id + ".txt";
    byte[] content = output.getBytes();
    resp.setContentType("text/plain");
    resp.setContentLength(content.length);
    FileCopyUtils.copy(content, resp.getOutputStream());
    return null;
}
