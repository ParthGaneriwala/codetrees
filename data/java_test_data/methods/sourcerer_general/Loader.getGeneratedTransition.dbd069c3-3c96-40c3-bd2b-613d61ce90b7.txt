public static Transition getGeneratedTransition(Integer[] beforeCalendar, String[] strBeforeInter, Float[] beforeMonitors, Integer[] afterCalendar, String[] strAfterInter, Float[] afterMonitors, String rule) {
    Config before;
    Calendar beforeCal = Calendar.getInstance();
    List<String> beforeInterceptors;
    beforeInterceptors = new LinkedList<String>();
    for (int i = 0; i < strBeforeInter.length; i++) {
        beforeInterceptors.add(strBeforeInter[i]);
    }
    before = new Config();
    beforeCal.set(beforeCalendar[0], beforeCalendar[1], beforeCalendar[2], beforeCalendar[3], beforeCalendar[4]);
    before.setCalendar(beforeCal);
    before.setInterceptors(beforeInterceptors);
    before.putValue(Constants.MON_Memory, beforeMonitors[0]);
    before.putValue(Constants.MON_Processor, beforeMonitors[1]);
    before.putValue(Constants.MON_Throughput, beforeMonitors[2]);
    Config after;
    Calendar afterCal = Calendar.getInstance();
    List<String> afterInterceptors;
    afterInterceptors = new LinkedList<String>();
    for (int i = 0; i < strAfterInter.length; i++) {
        afterInterceptors.add(strAfterInter[i]);
    }
    after = new Config();
    afterCal.set(afterCalendar[0], afterCalendar[1], afterCalendar[2], afterCalendar[3], afterCalendar[4]);
    after.setCalendar(afterCal);
    after.setInterceptors(afterInterceptors);
    after.putValue(Constants.MON_Memory, afterMonitors[0]);
    after.putValue(Constants.MON_Processor, afterMonitors[1]);
    after.putValue(Constants.MON_Throughput, afterMonitors[2]);
    Transition t = new Transition(before, after, rule);
    return t;
}
