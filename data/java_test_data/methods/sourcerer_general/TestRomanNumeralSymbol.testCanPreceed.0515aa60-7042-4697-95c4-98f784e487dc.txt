@Test
public void testCanPreceed() {
    Assert.assertTrue(RomanNumeralSymbol.I.canPrecede(RomanNumeralSymbol.I));
    Assert.assertTrue(RomanNumeralSymbol.I.canPrecede(RomanNumeralSymbol.V));
    Assert.assertTrue(RomanNumeralSymbol.I.canPrecede(RomanNumeralSymbol.X));
    Assert.assertFalse(RomanNumeralSymbol.I.canPrecede(RomanNumeralSymbol.L));
    Assert.assertFalse(RomanNumeralSymbol.I.canPrecede(RomanNumeralSymbol.C));
    Assert.assertFalse(RomanNumeralSymbol.I.canPrecede(RomanNumeralSymbol.D));
    Assert.assertFalse(RomanNumeralSymbol.I.canPrecede(RomanNumeralSymbol.M));
    Assert.assertTrue(RomanNumeralSymbol.V.canPrecede(RomanNumeralSymbol.I));
    Assert.assertFalse(RomanNumeralSymbol.V.canPrecede(RomanNumeralSymbol.V));
    Assert.assertFalse(RomanNumeralSymbol.V.canPrecede(RomanNumeralSymbol.X));
    Assert.assertFalse(RomanNumeralSymbol.V.canPrecede(RomanNumeralSymbol.L));
    Assert.assertFalse(RomanNumeralSymbol.V.canPrecede(RomanNumeralSymbol.C));
    Assert.assertFalse(RomanNumeralSymbol.V.canPrecede(RomanNumeralSymbol.D));
    Assert.assertFalse(RomanNumeralSymbol.V.canPrecede(RomanNumeralSymbol.M));
    Assert.assertTrue(RomanNumeralSymbol.X.canPrecede(RomanNumeralSymbol.I));
    Assert.assertTrue(RomanNumeralSymbol.X.canPrecede(RomanNumeralSymbol.V));
    Assert.assertTrue(RomanNumeralSymbol.X.canPrecede(RomanNumeralSymbol.X));
    Assert.assertTrue(RomanNumeralSymbol.X.canPrecede(RomanNumeralSymbol.L));
    Assert.assertTrue(RomanNumeralSymbol.X.canPrecede(RomanNumeralSymbol.C));
    Assert.assertFalse(RomanNumeralSymbol.X.canPrecede(RomanNumeralSymbol.D));
    Assert.assertFalse(RomanNumeralSymbol.X.canPrecede(RomanNumeralSymbol.M));
    Assert.assertTrue(RomanNumeralSymbol.L.canPrecede(RomanNumeralSymbol.I));
    Assert.assertTrue(RomanNumeralSymbol.L.canPrecede(RomanNumeralSymbol.V));
    Assert.assertTrue(RomanNumeralSymbol.L.canPrecede(RomanNumeralSymbol.X));
    Assert.assertFalse(RomanNumeralSymbol.L.canPrecede(RomanNumeralSymbol.L));
    Assert.assertFalse(RomanNumeralSymbol.L.canPrecede(RomanNumeralSymbol.C));
    Assert.assertFalse(RomanNumeralSymbol.L.canPrecede(RomanNumeralSymbol.D));
    Assert.assertFalse(RomanNumeralSymbol.L.canPrecede(RomanNumeralSymbol.M));
    Assert.assertTrue(RomanNumeralSymbol.C.canPrecede(RomanNumeralSymbol.I));
    Assert.assertTrue(RomanNumeralSymbol.C.canPrecede(RomanNumeralSymbol.V));
    Assert.assertTrue(RomanNumeralSymbol.C.canPrecede(RomanNumeralSymbol.X));
    Assert.assertTrue(RomanNumeralSymbol.C.canPrecede(RomanNumeralSymbol.L));
    Assert.assertTrue(RomanNumeralSymbol.C.canPrecede(RomanNumeralSymbol.C));
    Assert.assertTrue(RomanNumeralSymbol.C.canPrecede(RomanNumeralSymbol.D));
    Assert.assertTrue(RomanNumeralSymbol.C.canPrecede(RomanNumeralSymbol.M));
    Assert.assertTrue(RomanNumeralSymbol.D.canPrecede(RomanNumeralSymbol.I));
    Assert.assertTrue(RomanNumeralSymbol.D.canPrecede(RomanNumeralSymbol.V));
    Assert.assertTrue(RomanNumeralSymbol.D.canPrecede(RomanNumeralSymbol.X));
    Assert.assertTrue(RomanNumeralSymbol.D.canPrecede(RomanNumeralSymbol.L));
    Assert.assertTrue(RomanNumeralSymbol.D.canPrecede(RomanNumeralSymbol.C));
    Assert.assertFalse(RomanNumeralSymbol.D.canPrecede(RomanNumeralSymbol.D));
    Assert.assertFalse(RomanNumeralSymbol.D.canPrecede(RomanNumeralSymbol.M));
    Assert.assertTrue(RomanNumeralSymbol.M.canPrecede(RomanNumeralSymbol.I));
    Assert.assertTrue(RomanNumeralSymbol.M.canPrecede(RomanNumeralSymbol.V));
    Assert.assertTrue(RomanNumeralSymbol.M.canPrecede(RomanNumeralSymbol.X));
    Assert.assertTrue(RomanNumeralSymbol.M.canPrecede(RomanNumeralSymbol.L));
    Assert.assertTrue(RomanNumeralSymbol.M.canPrecede(RomanNumeralSymbol.C));
    Assert.assertTrue(RomanNumeralSymbol.M.canPrecede(RomanNumeralSymbol.D));
    Assert.assertTrue(RomanNumeralSymbol.M.canPrecede(RomanNumeralSymbol.M));
}
