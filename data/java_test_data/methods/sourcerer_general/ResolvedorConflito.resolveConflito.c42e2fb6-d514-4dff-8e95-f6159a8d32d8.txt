public static void resolveConflito(Conflito conflito, Map<String, List<Alocacao>> alocacoesComposicoes, Map<String, List<Alocacao>> alocacoesElementos) {
    float tempoAtraso;
    String idComposicao;
    List<Alocacao> list;
    Alocacao atrasada, normal;
    if (verificarQualAtrasar(conflito)) {
        atrasada = conflito.getB();
        normal = conflito.getA();
    } else {
        atrasada = conflito.getA();
        normal = conflito.getB();
    }
    if (Math.max(atrasada.getInicio(), normal.getInicio()) == Float.MAX_VALUE) {
        tempoAtraso = Float.MAX_VALUE;
        idComposicao = normal.getComposicao().getIdElemento();
        invalidaAlocacoes(alocacoesComposicoes.get(idComposicao));
        idComposicao = atrasada.getComposicao().getIdElemento();
        invalidaAlocacoes(alocacoesComposicoes.get(idComposicao));
    } else {
        if (Configuracao.PERMITE_ADJACENCIA) {
            if (normal.getElemento() instanceof Chave) {
                tempoAtraso = normal.getFim() - atrasada.getInicio() + 1.0f * ((Chave) normal.getElemento()).getTempo_mudanca() + Configuracao.ERRO_ARREDONDAMENTO;
            } else {
                // sentidos diferentes
                if (normal.getComposicao().getSentido_atual().compareTo(atrasada.getComposicao().getSentido_atual()) != 0) {
                    tempoAtraso = normal.getFim() - atrasada.getInicio() + 1;
                } else {
                    Alocacao anterior, posterior;
                    if (normal.getInicio() < atrasada.getInicio()) {
                        posterior = normal;
                        anterior = atrasada;
                    } else {
                        posterior = atrasada;
                        anterior = normal;
                    }
                    Float deltaTempoInicial = anterior.getInicio() - posterior.getInicio();
                    float distanciaInicialEntreComposicoes = FisicaUtils.distanciaPercorridaMRU(posterior.getComposicao().getVelocidade_controlada(), deltaTempoInicial);
                    Float velocidadeRelativa = posterior.getComposicao().getVelocidade_controlada() - anterior.getComposicao().getVelocidade_controlada();
                    float deltaTempo = posterior.getFim() - anterior.getInicio();
                    float deltaDistanciaEntreComposicoes = FisicaUtils.distanciaPercorridaMRU(velocidadeRelativa, deltaTempo);
                    float distanciaAtraso = (Configuracao.DISTANCIA_MINIMA + posterior.getComposicao().getComprimento()) - (distanciaInicialEntreComposicoes + deltaDistanciaEntreComposicoes);
                    tempoAtraso = distanciaAtraso / anterior.getComposicao().getVelocidade_controlada() + 1;
                }
            }
        } else {
            if (normal.getElemento() instanceof Trecho) {
                tempoAtraso = normal.getFim() - atrasada.getInicio() + 1;
            } else {
                tempoAtraso = normal.getFim() - atrasada.getInicio() + ((Chave) normal.getElemento()).getTempo_mudanca() + 1;
            }
        }
        ContratoUtils.assertMaiorIgual(tempoAtraso, 0, "ResolvedorConflito::resolveConflito");
        idComposicao = atrasada.getComposicao().getIdElemento();
        list = alocacoesComposicoes.get(idComposicao);
        propagaAtraso(atrasada, list, tempoAtraso, alocacoesElementos);
    }
}
