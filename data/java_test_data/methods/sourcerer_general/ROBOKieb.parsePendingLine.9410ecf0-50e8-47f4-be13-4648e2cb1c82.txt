public void parsePendingLine(String line) {
    line = line.trim();
    Vector pendingLineVec = new Vector();
    pendingLineVec = Parse(line);
    Challenge currChallenge = null;
    byte bytenull = 0;
    short shortnull = 0;
    String stringnull = "";
    currChallenge = new Challenge(shortnull, shortnull, bytenull, true, false, bytenull, stringnull, shortnull, true);
    // public Challenge(short time, short inc, byte wild, boolean rated, boolean guest, byte color, String opponent, short oppRating, boolean timeOdds) {
    /*
		 * currChallenge.setWild(bytenull); currChallenge.setColor(bytenull); currChallenge.setOppRating(shortnull); currChallenge.setGuest((new
		 * Boolean(false)).booleanValue()); currChallenge.setTimeOdds((new Boolean(true)).booleanValue()); currChallenge.setRated((new
		 * Boolean(true)).booleanValue());
		 */
    currChallenge.setOpponent(pendingLineVec.elementAt(pendingLineVec.size() - 1).toString());
    try {
        currChallenge.setInc((short) (Short.parseShort(pendingLineVec.elementAt(0).toString())));
    } catch (NumberFormatException e) {
        short errVal = 5;
        currChallenge.setInc(errVal);
        sendLine("message kiebitz NumberFormatException when parsing inc, have " + (pendingLineVec.elementAt(0).toString()) + ".");
    }
    try {
        currChallenge.setTime((short) (Short.parseShort(pendingLineVec.elementAt(1).toString())));
    } catch (NumberFormatException e) {
        short errVal2 = 5;
        currChallenge.setTime(errVal2);
        sendLine("message kiebitz NumberFormatException when parsing time, have " + (pendingLineVec.elementAt(1).toString()) + ".");
    }
    for (int i = 2; i < pendingLineVec.size(); i++) {
        if (pendingLineVec.elementAt(i).toString().equalsIgnoreCase("[white]")) {
            byte whiteVal = 2;
            currChallenge.setColor(whiteVal);
        }
        if (pendingLineVec.elementAt(i).toString().equalsIgnoreCase("[black]")) {
            byte blackVal = 1;
            currChallenge.setColor(blackVal);
        }
        if ((pendingLineVec.elementAt(i).toString().indexOf("wild(") != -1) && (pendingLineVec.elementAt(i).toString().indexOf(")") != -1)) {
            try {
                currChallenge.setWild((byte) (Byte.parseByte(pendingLineVec.elementAt(i).toString().substring(5, pendingLineVec.elementAt(i).toString().length() - 1))));
            } catch (NumberFormatException e) {
                sendLine("message kiebitz NumberFormatException when parsing wild variant, have " + pendingLineVec.elementAt(i).toString().substring(5, pendingLineVec.elementAt(i).toString().length() - 1) + ".");
            }
        }
        if (pendingLineVec.elementAt(i).toString().indexOf("(unreg)") != -1) {
            currChallenge.setGuest((new Boolean(true)).booleanValue());
        }
        if (pendingLineVec.elementAt(i).toString().equalsIgnoreCase("unrated")) {
            currChallenge.setRated((new Boolean(false)).booleanValue());
        }
    }
    if (currChallenge.getGuest()) {
    // no oppr check
    } else {
        try {
            currChallenge.setOppRating((short) (Short.parseShort(line.substring(line.indexOf("(") + 1, line.indexOf(")")).trim())));
        // geht nur mit line, wegen "( 800)"!!
        } catch (NumberFormatException e) {
            sendLine("message kiebitz NumberFormatException when parsing opprating");
        }
    }
    short testingTimeOdds = 0;
    try {
        testingTimeOdds = ((short) (Short.parseShort(pendingLineVec.elementAt(2).toString())));
    } catch (NumberFormatException e) {
        currChallenge.setTimeOdds((new Boolean(false)).booleanValue());
    }
    currentChallenges.addElement(currChallenge);
}
