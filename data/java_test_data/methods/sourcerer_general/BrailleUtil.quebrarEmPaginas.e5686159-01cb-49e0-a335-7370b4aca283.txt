private static ArrayList<char[]> quebrarEmPaginas(char[] texto) {
    int numDechar = texto.length;
    ArrayList<char[]> paginas = new ArrayList<char[]>();
    int pos = 0;
    int contador;
    if (numDechar < NUM_CHAR_PAGINA)
        contador = numDechar;
    else
        contador = NUM_CHAR_PAGINA;
    String text = new String(texto);
    boolean espaco = false;
    while (((numDechar / NUM_CHAR_PAGINA) > 0) || (numDechar > 0)) {
        while (!espaco) {
            if (contador < 0) {
                // n�o tem espa�o
                contador = text.length();
                break;
            } else {
                if (contador < text.length() && verSePertence(text.charAt(contador), new char[] { ' ', '.', '!', '?' })) {
                    espaco = true;
                } else {
                    contador--;
                }
            }
        }
        espaco = false;
        paginas.add(copiarDeUmArrayRetornaArrayChar(texto, pos, contador));
        pos = contador;
        numDechar = numDechar - contador;
        contador += NUM_CHAR_PAGINA;
        if (numDechar < contador)
            break;
    }
    char[] resto = copiarDeUmArrayRetornaArrayChar(texto, pos);
    int aux = paginas.size() >= 1 ? paginas.size() - 1 : 0;
    char[] ultimaPag = paginas.get(aux);
    if (ultimaPag.length + resto.length < NUM_CHAR_PAGINA) {
        char[] fim = new char[ultimaPag.length + resto.length];
        for (int i = 0; i < ultimaPag.length; i++) fim[i] = ultimaPag[i];
        int j = 0;
        for (int i = ultimaPag.length; i < ultimaPag.length + resto.length; i++) {
            fim[i] = resto[j];
            j++;
        }
        paginas.remove(paginas.size() - 1);
        paginas.add(fim);
    } else {
        paginas.add(resto);
    }
    return paginas;
}
