public boolean resetPassword(ActionContext context, Connection db) throws SQLException {
    String temporaryPassword = String.valueOf(StringUtils.rand(100000, 999999));
    String encryptedPassword = PasswordHash.encrypt(temporaryPassword);
    ApplicationPrefs prefs = (ApplicationPrefs) context.getServletContext().getAttribute("applicationPrefs");
    // send the confirmation message
    SMTPMessage message = SMTPMessageFactory.createSMTPMessageInstance(prefs.getPrefs());
    message.setTo(email);
    message.setFrom(prefs.get("EMAILADDRESS"));
    message.setSubject("Your Password");
    message.setType("text/html");
    try {
        // Populate the message template
        Configuration configuration = ApplicationPrefs.getFreemarkerConfiguration(context.getServletContext());
        Template template = configuration.getTemplate("user_reset_password_email-html.ftl");
        Map bodyMappings = new HashMap();
        bodyMappings.put("firstname", firstName);
        bodyMappings.put("temporaryPassword", temporaryPassword);
        // Parse and send
        StringWriter inviteBodyTextWriter = new StringWriter();
        template.process(bodyMappings, inviteBodyTextWriter);
        message.setBody(inviteBodyTextWriter.toString());
    } catch (TemplateException te) {
    } catch (IOException io) {
    }
    int result = message.send();
    if (result > 0) {
        errors.put("emailError", message.getErrorMsg());
        return false;
    }
    // updatePassword
    PreparedStatement pst = db.prepareStatement("UPDATE users " + "SET temporary_password = ? " + "WHERE user_id = ? ");
    pst.setString(1, encryptedPassword);
    pst.setInt(2, id);
    pst.executeUpdate();
    pst.close();
    CacheUtils.invalidateValue(Constants.SYSTEM_USER_CACHE, id);
    return true;
}
