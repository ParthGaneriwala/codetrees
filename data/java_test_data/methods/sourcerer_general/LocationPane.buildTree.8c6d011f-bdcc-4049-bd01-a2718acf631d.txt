protected void buildTree(GridData grid, GridLayout layout) {
    HierarchyStringTree dataTree;
    // ArrayList<HierarchyTreeNode<String>> children;
    ArrayList<TreeItem> uiItems = new ArrayList<TreeItem>();
    TreeItem curItem;
    this.tree.removeAll();
    locationController.buildLocationTree();
    dataTree = locationController.getTree();
    this.locationOntologyURIs = locationController.getOntologyURIs();
    this.setLayout(layout);
    if (dataTree.getRoot() != null) {
        Object[] children;
        curItem = new TreeItem(tree, SWT.NULL);
        uiItems.add(curItem);
        curItem.setText("Root");
        children = sortChildren(dataTree.getRoot().getChildren());
        for (int i = 0; i < children.length; i++) {
            try {
                HierarchyStringTreeNode node = (HierarchyStringTreeNode) children[i];
                buildTreeHelper(curItem, node, uiItems);
            } catch (ClassCastException ce) {
            }
        }
    }
    // Preprocess some search indices after tree building
    int lastIndex = 0;
    this.sortedItems = new TreeItem[uiItems.size()];
    this.sortedItems = uiItems.toArray(this.sortedItems);
    Arrays.sort(this.sortedItems, new TreeItemComparator());
    for (char i = 'a'; i <= 'z'; i++) {
        for (int j = lastIndex; j < this.sortedItems.length; j++) {
            if (this.sortedItems[j].getText().toLowerCase().charAt(0) == i) {
                this.hashSortAlphas.put(new Character(i).toString(), j);
                lastIndex = j;
                break;
            }
        }
    }
}
