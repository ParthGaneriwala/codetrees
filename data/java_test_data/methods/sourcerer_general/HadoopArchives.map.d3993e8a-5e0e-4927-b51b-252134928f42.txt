// read files from the split input
// and write it onto the part files.
// also output hash(name) and string
// for reducer to create index
public void map(LongWritable key, Text value, OutputCollector<IntWritable, Text> out, Reporter reporter) throws IOException {
    String line = value.toString();
    MapStat mstat = new MapStat(line);
    Path srcPath = new Path(mstat.pathname);
    String towrite = null;
    Path relPath = makeRelative(srcPath);
    int hash = HarFileSystem.getHarHash(relPath);
    long startPos = partStream.getPos();
    if (mstat.isDir) {
        towrite = relPath.toString() + " " + "dir none " + 0 + " " + 0 + " ";
        StringBuffer sbuff = new StringBuffer();
        sbuff.append(towrite);
        for (String child : mstat.children) {
            sbuff.append(child + " ");
        }
        towrite = sbuff.toString();
        // reading directories is also progress
        reporter.progress();
    } else {
        FileSystem srcFs = srcPath.getFileSystem(conf);
        FileStatus srcStatus = srcFs.getFileStatus(srcPath);
        FSDataInputStream input = srcFs.open(srcStatus.getPath());
        reporter.setStatus("Copying file " + srcStatus.getPath() + " to archive.");
        copyData(srcStatus.getPath(), input, partStream, reporter);
        towrite = relPath.toString() + " file " + partname + " " + startPos + " " + srcStatus.getLen() + " ";
    }
    out.collect(new IntWritable(hash), new Text(towrite));
}
