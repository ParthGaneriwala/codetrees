private ClivetRegistration createNewUser(ClivetRegistration clivetRegistration, ActionRequest req) {
    log.info("Inside ProcessClivetRegistrationAction file - Method: createNewUser");
    HttpServletRequest httpReq = PortalUtil.getHttpServletRequest(req);
    PortletSession ses = req.getPortletSession();
    ThemeDisplay themeDisplay = (ThemeDisplay) req.getAttribute(WebKeys.THEME_DISPLAY);
    long[] organizationIds = StringUtil.split(ParamUtil.getString(req, "organizationIds"), 0L);
    String firstName = ParamUtil.getString(req, "nome");
    String lastName = ParamUtil.getString(req, "cognome");
    String screenName = ParamUtil.getString(req, "nomeUtente");
    String eMail = ParamUtil.getString(req, "emailAddress");
    String jobTitle = ParamUtil.getString(req, "titolo");
    String partyName = ParamUtil.getString(req, "partName");
    String categoryCode = ParamUtil.getString(req, "categoryCode");
    String responsibility = ParamUtil.getString(req, "responsibility");
    String territoryCode = ParamUtil.getString(req, "territoryCode");
    String cvaddress = ParamUtil.getString(req, "address1");
    String phone = ParamUtil.getString(req, "teleFono");
    String mobile = ParamUtil.getString(req, "cellulare");
    String fax = ParamUtil.getString(req, "fax");
    String type = ParamUtil.getString(req, "companyType");
    String city = ParamUtil.getString(req, "city");
    String cap = ParamUtil.getString(req, "postalCode");
    String province = ParamUtil.getString(req, "province");
    RegisterValue regBean = new RegisterValue();
    regBean.setFirstName(firstName);
    regBean.setLastName(lastName);
    regBean.setScreenName(screenName);
    regBean.setEmailAddress(eMail);
    regBean.setJobTitle(jobTitle);
    regBean.setCategoryCode(categoryCode);
    regBean.setTerritoryCode(territoryCode);
    regBean.setResponsibility(responsibility);
    regBean.setPhone(phone);
    regBean.setMobile(mobile);
    regBean.setFax(fax);
    regBean.setType(type);
    regBean.setAddress1(cvaddress);
    regBean.setCity(city);
    try {
        User userObj = UserServiceUtil.addUser(themeDisplay.getCompanyId(), true, null, null, false, screenName, eMail, themeDisplay.getLocale(), firstName, null, lastName, 0, 0, false, 01, 01, 1970, jobTitle, organizationIds, true);
        addPhonebook(userObj, phone, mobile, fax);
        // HTTP Calls - Begin.
        String sessionId = req.getRequestedSessionId();
        ClivetHTTPCall hhtpcall = new ClivetHTTPCall();
        clivetRegistration = hhtpcall.getCall(clivetRegistration, partyName, territoryCode, cap, province, sessionId);
        // HTTP Calls - End.
        req.setAttribute("USER_CREATED", "true");
        req.setAttribute("REGBEAN", regBean);
        if (Validator.isNull(clivetRegistration.getPrivacy())) {
            clivetRegistration.setPrivacy("N");
        }
        clivetRegistration.setUserId(userObj.getUserId());
        clivetRegistration.setCompanyId(userObj.getCompanyId());
        clivetRegistration.setUserType(type);
    } catch (UserScreenNameException e) {
        SessionMessages.add(req, "EXCEPTION_MSG", "wrongScreenName");
        log.error("wrongScreenName:" + e.getMessage());
    } catch (DuplicateUserScreenNameException e) {
        SessionMessages.add(req, "EXCEPTION_MSG", "duplicateScreenName");
        log.error("duplicateScreenName:" + e.getMessage());
    } catch (DuplicateUserEmailAddressException e) {
        SessionMessages.add(req, "EXCEPTION_MSG", "duplicateEmail");
        log.error("duplicateEmail:" + e.getMessage());
    } catch (UserEmailAddressException e) {
        SessionMessages.add(req, "EXCEPTION_MSG", "wrongEmail");
        log.error("wrongEmail:" + e.getMessage());
    } catch (Exception e) {
        SessionMessages.add(req, "EXCEPTION_MSG", "others");
        log.error("others:" + e.getMessage());
    } finally {
        SessionMessages.add(req, "EXCEPTION WHILE ADDING");
        SessionMessages.add(req, "CLIVETREGISTRATION", clivetRegistration);
        SessionMessages.add(req, "REGISTERVALUE", regBean);
    }
    return clivetRegistration;
}
