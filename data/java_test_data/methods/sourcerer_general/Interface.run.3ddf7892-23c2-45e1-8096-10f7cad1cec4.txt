@SuppressWarnings("static-access")
public void run() {
    // rodar a Thread ciclicamente
    while (true) {
        if (velocidade > 27) {
            jTextField1.setText(String.valueOf(30.00));
        } else {
            jTextField1.setText(String.valueOf(velocidade));
        }
        jTextField2.setText(String.valueOf((distIR / 0.75) - 33));
        jTextField3.setText(String.valueOf((distSonar / 0.75) - 66));
        jTextField4.setText(String.valueOf(angulo));
        // verifica colisoes com as paredes, porem nao considera fuzzy
        try {
            if (((roboPanel.getLocation().x) + 35) >= limites.getMaxX()) {
                colidiuParedeXd = true;
            }
            if (((roboPanel.getLocation().x) - 12) <= limites.getMinX()) {
                colidiuParedeXe = true;
            }
            if (((roboPanel.getLocation().y) + 35) >= limites.getMaxY()) {
                colidiuParedeYb = true;
            }
            if (((roboPanel.getLocation().y) - 12) <= limites.getMinY()) {
                colidiuParedeYt = true;
            }
            if (up) {
                // tecla pressionada para cima
                // sentido 0 = up
                distIR = colisao.calcularDistanciaIR(roboPanel.getLocation(), robotPanel.getArrayObstaculos(), 0);
                distSonar = colisao.calcularDistanciaSonar(roboPanel.getLocation(), robotPanel.getArrayObstaculos(), 0);
                // não descomente //angulo = colisao.calcularAngulo(robotPanel.getLocation(),robotPanel.getArrayObstaculos(),0); // deixe comentado todos os ângulos, o que eu fiz ah desolando demais o triangulo
                ControladorFuzzy controlador = new ControladorFuzzy(distIR, distSonar, 29);
                velocidade = controlador.iniciarControle();
                // velocidade = desfuzzyfica.defuzzyficar(fuzzyfica.fuzzificar(angulo, distSonar, 29))); // deixe o ângulo com o valor de 29, um valor a menos que o máximo
                System.out.println("velocidade na interface: " + velocidade);
                double velocidadeReal = 750 / velocidade * 2.5;
                if (velocidade < 9.0) {
                    roboPanel.setLocation(roboPanel.getLocation().x, roboPanel.getLocation().y);
                } else if (velocidade < 27) {
                    Thread.sleep((long) (velocidadeReal));
                    if (colidiuParedeYt != true) {
                        roboPanel.setLocation(roboPanel.getLocation().x, roboPanel.getLocation().y - 1);
                        colidiuParedeYb = false;
                    } else {
                        roboPanel.setLocation(roboPanel.getLocation().x, roboPanel.getLocation().y);
                    }
                } else {
                    Thread.sleep(10);
                    if (colidiuParedeYt != true) {
                        roboPanel.setLocation(roboPanel.getLocation().x, roboPanel.getLocation().y - 1);
                        colidiuParedeYb = false;
                    } else {
                        roboPanel.setLocation(roboPanel.getLocation().x, roboPanel.getLocation().y);
                    }
                }
            }
            if (down) {
                // tecla pressionada para baixo
                // sentido 2 = down
                distIR = colisao.calcularDistanciaIR(roboPanel.getLocation(), robotPanel.getArrayObstaculos(), 2);
                distSonar = colisao.calcularDistanciaSonar(roboPanel.getLocation(), robotPanel.getArrayObstaculos(), 2);
                // não descomente //angulo = colisao.calcularAngulo(robotPanel.getLocation(),robotPanel.getArrayObstaculos(),0); // deixe comentado todos os ângulos, o que eu fiz ah desolando demais o triangulo
                // velocidade = desfuzzyfica.defuzzyficar(fuzzyfica.fuzzificar(angulo, distSonar, angulo))); // deixe o ângulo com o valor de 29, um valor a menos que o máximo
                ControladorFuzzy controlador = new ControladorFuzzy(distIR, distSonar, 29);
                velocidade = controlador.iniciarControle();
                System.out.println("velocidade na interface: " + velocidade);
                double velocidadeReal = 750 / velocidade * 2.5;
                if (velocidade < 9.0) {
                    roboPanel.setLocation(roboPanel.getLocation().x, roboPanel.getLocation().y);
                } else if (velocidade < 27) {
                    Thread.sleep((long) (velocidadeReal));
                    if (colidiuParedeYb != true) {
                        roboPanel.setLocation(roboPanel.getLocation().x, roboPanel.getLocation().y + 1);
                        colidiuParedeYt = false;
                    } else {
                        roboPanel.setLocation(roboPanel.getLocation().x, roboPanel.getLocation().y);
                    }
                } else {
                    Thread.sleep(10);
                    if (colidiuParedeYb != true) {
                        roboPanel.setLocation(roboPanel.getLocation().x, roboPanel.getLocation().y + 1);
                        colidiuParedeYt = false;
                    } else {
                        roboPanel.setLocation(roboPanel.getLocation().x, roboPanel.getLocation().y);
                    }
                }
            }
            if (left) {
                // tecla pressionada para a esquerda
                // sentido 3 = left
                distIR = colisao.calcularDistanciaIR(roboPanel.getLocation(), robotPanel.getArrayObstaculos(), 3);
                distSonar = colisao.calcularDistanciaSonar(roboPanel.getLocation(), robotPanel.getArrayObstaculos(), 3);
                // não descomente //angulo = colisao.calcularAngulo(robotPanel.getLocation(),robotPanel.getArrayObstaculos(),0); // deixe comentado todos os ângulos, o que eu fiz ah desolando demais o triangulo
                // velocidade = desfuzzyfica.defuzzyficar(fuzzyfica.fuzzificar(angulo, distSonar, angulo))); // deixe o ângulo com o valor de 29, um valor a menos que o máximo
                ControladorFuzzy controlador = new ControladorFuzzy(distIR, distSonar, 29);
                velocidade = controlador.iniciarControle();
                System.out.println("velocidade na interface: " + velocidade);
                double velocidadeReal = 750 / velocidade * 2.5;
                if (velocidade < 9.0) {
                    roboPanel.setLocation(roboPanel.getLocation().x, roboPanel.getLocation().y);
                } else if (velocidade < 27) {
                    Thread.sleep((long) (velocidadeReal));
                    if (colidiuParedeXe != true) {
                        roboPanel.setLocation(roboPanel.getLocation().x - 1, roboPanel.getLocation().y);
                        colidiuParedeXd = false;
                    } else {
                        roboPanel.setLocation(roboPanel.getLocation().x, roboPanel.getLocation().y);
                    }
                } else {
                    Thread.sleep(10);
                    if (colidiuParedeXe != true) {
                        roboPanel.setLocation(roboPanel.getLocation().x - 1, roboPanel.getLocation().y);
                        colidiuParedeXd = false;
                    } else {
                        roboPanel.setLocation(roboPanel.getLocation().x, roboPanel.getLocation().y);
                    }
                }
            }
            if (right) {
                // tecla pressionada para a direita
                // sentido 1 = right
                distIR = colisao.calcularDistanciaIR(roboPanel.getLocation(), robotPanel.getArrayObstaculos(), 1);
                distSonar = colisao.calcularDistanciaSonar(roboPanel.getLocation(), robotPanel.getArrayObstaculos(), 1);
                // não descomente //angulo = colisao.calcularAngulo(robotPanel.getLocation(),robotPanel.getArrayObstaculos(),0); // deixe comentado todos os ângulos, o que eu fiz ah desolando demais o triangulo
                // velocidade = desfuzzyfica.defuzzyficar(fuzzyfica.fuzzificar(angulo, distSonar, angulo))); // deixe o ângulo com o valor de 29, um valor a menos que o máximo
                ControladorFuzzy controlador = new ControladorFuzzy(distIR, distSonar, 29);
                velocidade = controlador.iniciarControle();
                System.out.println("velocidade na interface: " + velocidade);
                double velocidadeReal = 750 / velocidade * 2.5;
                if (velocidade < 9.0) {
                    roboPanel.setLocation(roboPanel.getLocation().x, roboPanel.getLocation().y);
                } else if (velocidade < 27) {
                    Thread.sleep((long) (velocidadeReal));
                    if (colidiuParedeXd != true) {
                        roboPanel.setLocation(roboPanel.getLocation().x + 1, roboPanel.getLocation().y);
                        colidiuParedeXe = false;
                    } else {
                        roboPanel.setLocation(roboPanel.getLocation().x, roboPanel.getLocation().y);
                    }
                } else {
                    Thread.sleep(10);
                    if (colidiuParedeXd != true) {
                        roboPanel.setLocation(roboPanel.getLocation().x + 1, roboPanel.getLocation().y);
                        colidiuParedeXe = false;
                    } else {
                        roboPanel.setLocation(roboPanel.getLocation().x, roboPanel.getLocation().y);
                    }
                }
            }
        } catch (InterruptedException ex) {
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
