public void testBadgeCRUD() throws SQLException {
    // Insert a project category
    ProjectCategory projectCategory = new ProjectCategory();
    projectCategory.setDescription("Badge SQL Test" + System.currentTimeMillis());
    projectCategory.insert(db);
    // Insert a badge category
    BadgeCategory badgeCategory = new BadgeCategory();
    badgeCategory.setProjectCategoryId(projectCategory.getId());
    badgeCategory.setItemName("Badge SQL Test" + System.currentTimeMillis());
    badgeCategory.insert(db);
    // Insert badge
    Badge badge = new Badge();
    badge.setCategoryId(badgeCategory.getId());
    badge.setTitle("Badge SQL Test");
    badge.setDescription("Badge SQL Test Description");
    badge.setEnabled(true);
    badge.setEnteredBy(USER_ID);
    badge.setModifiedBy(USER_ID);
    assertNotNull(badge);
    boolean result = badge.insert(db);
    assertTrue("Badge was not inserted", result);
    assertTrue("Inserted badge did not have an id", badge.getId() > -1);
    // Update badge
    // Try updating without reloading the badge
    assertNull(badge.getModified());
    assertTrue("Badge to update does not have an id", badge.getId() > -1);
    int updateCount = badge.update(db);
    assertTrue("The modified field checks for concurrent updates so the modified field must match the load value", updateCount == 0);
    // Reload the badge, then update
    assertTrue(badge.getId() > -1);
    badge = BadgeUtils.loadBadge(badge.getId());
    badge.setTitle("Badge SQL Test Updated Badge");
    updateCount = badge.update(db);
    assertTrue("The badge was not updated by the database", updateCount == 1);
    // Find the previously set badge
    int badgeId = badge.getId();
    badge = null;
    BadgeList badgeList = new BadgeList();
    badgeList.setEnabled(Constants.TRUE);
    badgeList.buildList(db);
    assertTrue(badgeList.size() > 0);
    Iterator i = badgeList.iterator();
    while (i.hasNext()) {
        Badge thisBadge = (Badge) i.next();
        if (thisBadge.getId() == badgeId) {
            badge = thisBadge;
            break;
        }
    }
    assertNotNull(badge);
    // Delete the badge
    assertNotNull(badge);
    badge.delete(db, null);
    badgeId = badge.getId();
    badge = null;
    // Delete the badge category
    badgeCategory.delete(db, null);
    // Delete the project category
    projectCategory.delete(db, null);
    // Try to find the previously deleted badge
    badgeList = new BadgeList();
    badgeList.setBadgeId(badgeId);
    badgeList.buildList(db);
    Iterator ij = badgeList.iterator();
    while (ij.hasNext()) {
        Badge thisBadge = (Badge) ij.next();
        if (thisBadge.getId() == badgeId) {
            assertNull("Badge exists when it shouldn't", thisBadge);
        }
    }
}
