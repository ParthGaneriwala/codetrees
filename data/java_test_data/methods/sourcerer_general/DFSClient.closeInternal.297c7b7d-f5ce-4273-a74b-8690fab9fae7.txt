private synchronized void closeInternal() throws IOException {
    checkOpen();
    isClosed();
    try {
        // flush from all upper layers
        flushBuffer();
        // packet with empty payload.
        synchronized (dataQueue) {
            if (currentPacket == null && bytesCurBlock != 0) {
                currentPacket = new Packet(packetSize, chunksPerPacket, bytesCurBlock);
            }
            if (currentPacket != null) {
                currentPacket.lastPacketInBlock = true;
            }
        }
        // flush all data to Datanodes
        flushInternal();
        // check to see if flushInternal had any exceptions
        isClosed();
        // allow closeThreads() to showdown threads
        closed = true;
        closeThreads();
        synchronized (dataQueue) {
            if (blockStream != null) {
                // indicate end-of-block to datanode
                blockStream.writeInt(0);
                blockStream.close();
                blockReplyStream.close();
            }
            if (s != null) {
                s.close();
                s = null;
            }
        }
        streamer = null;
        blockStream = null;
        blockReplyStream = null;
        long localstart = System.currentTimeMillis();
        boolean fileComplete = false;
        while (!fileComplete) {
            fileComplete = namenode.complete(src, clientName);
            if (!fileComplete) {
                try {
                    Thread.sleep(400);
                    if (System.currentTimeMillis() - localstart > 5000) {
                        LOG.info("Could not complete file " + src + " retrying...");
                    }
                } catch (InterruptedException ie) {
                }
            }
        }
    } finally {
        closed = true;
    }
}
