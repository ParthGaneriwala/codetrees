public void testGenerateGuid() throws Exception {
    // Setup a test user
    User user = new User();
    user.setGroupId(GROUP_ID);
    user.setDepartmentId(DEPARTMENT_ID);
    user.setFirstName("Test First");
    user.setLastName("Test Last");
    user.setEmail(System.currentTimeMillis() + "@concursive.com");
    user.setUsername(System.currentTimeMillis() + "@concursive.com");
    user.setPassword("e358bf645a205cf15efa983b5517d945");
    user.setCountry("UNITED STATES");
    user.setPostalCode("23456");
    Timestamp entered = new Timestamp(System.currentTimeMillis());
    entered.setNanos(23456);
    user.setEntered(entered);
    user.insert(db, "127.0.0.1", mockPrefs);
    // Reset the fields from the database
    user = new User(db, user.getId());
    // Generate a guid
    String guid = UserUtils.generateGuid(user);
    // Test the output
    assertEquals("UserId mismatch", String.valueOf(user.getId()), String.valueOf(UserUtils.getUserIdFromGuid(guid)));
    assertEquals("Entered mismatch", String.valueOf(user.getEntered().getTime()), String.valueOf(UserUtils.getEnteredTimestampFromGuid(guid).getTime()));
    assertEquals("PW Substring mismatch", user.getPassword().substring(2, 15), UserUtils.getPasswordSubStringFromGuid(guid));
    // Test UserList query
    UserList userList = new UserList();
    userList.setGuid(guid);
    userList.buildList(db);
    assertTrue("User not found by guid: " + user.getId() + " (" + userList.size() + ")", userList.size() == 1);
    // Test UserUtils
    User retrievedUser = UserUtils.loadUserFromGuid(db, guid);
    assertNotNull("UserUtils did not find a user", retrievedUser);
    // Delete the test user
    user.getProfileProject().delete(db, null);
    user.delete(db);
}
