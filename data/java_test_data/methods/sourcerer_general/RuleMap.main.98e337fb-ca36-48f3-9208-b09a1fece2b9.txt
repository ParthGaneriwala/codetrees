public static void main(String[] args) {
    try {
        // Parse the command line
        CommandLine cl = new CommandLine();
        String usage = "Usage:  RuleMap [-il inlang] [-ol outlang] [-d] rulefile infile (- for stdin)";
        cl.setUsage(usage);
        cl.add("il", true);
        cl.add("ol", true);
        cl.add("d", false);
        cl.process(args);
        if (cl.numItems() != 2) {
            System.err.println(usage);
            System.exit(1);
        }
        // Load the input data
        Arg il = cl.getArg("il");
        String inLang = (il == null) ? null : il.getValue();
        String fname = cl.getItem(1);
        Model inModel = null;
        if (fname.equals("-")) {
            inModel = ModelFactory.createDefaultModel();
            inModel.read(System.in, null, inLang);
        } else {
            inModel = FileManager.get().loadModel(fname, inLang);
        }
        // Determine the type of the output
        Arg ol = cl.getArg("ol");
        String outLang = (ol == null) ? "N3" : ol.getValue();
        Arg d = cl.getArg("d");
        boolean deductionsOnly = (d != null);
        // Fetch the rule set and create the reasoner
        BuiltinRegistry.theRegistry.register(new Deduce());
        Map prefixes = new HashMap();
        List rules = loadRules((String) cl.getItem(0), prefixes);
        Reasoner reasoner = new GenericRuleReasoner(rules);
        // Process
        InfModel infModel = ModelFactory.createInfModel(reasoner, inModel);
        infModel.prepare();
        infModel.setNsPrefixes(prefixes);
        // Output
        PrintWriter writer = new PrintWriter(System.out);
        if (deductionsOnly) {
            Model deductions = infModel.getDeductionsModel();
            deductions.setNsPrefixes(prefixes);
            deductions.setNsPrefixes(inModel);
            deductions.write(writer, outLang);
        } else {
            infModel.write(writer, outLang);
        }
        writer.close();
    } catch (Throwable t) {
        System.err.println("An error occured: \n" + t);
        t.printStackTrace();
    }
}
