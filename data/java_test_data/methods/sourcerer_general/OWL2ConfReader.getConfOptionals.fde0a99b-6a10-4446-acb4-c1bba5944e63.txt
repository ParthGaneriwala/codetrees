protected void getConfOptionals() {
    NodeIterator niter;
    ResIterator riter;
    Resource location;
    ArrayList<String> list;
    String series = null;
    boolean hasTopics = false;
    // This really shouldn't happen.
    if (this.confResource == null) {
        return;
    }
    this.notifyObservers(new Progress("Loading optional properties... ", 85));
    // Query the properties and add them to the Conference object.
    niter = this.model.listObjectsOfProperty(this.confResource, ResourceFactory.createProperty(Conference.CONFERENCE_ADDRESS_URI));
    if (niter.hasNext()) {
        this.outConf.setAddress(niter.nextNode().toString());
    }
    niter = this.model.listObjectsOfProperty(this.confResource, ResourceFactory.createProperty(Conference.CONFERENCE_START_DATE_URI));
    if (niter.hasNext()) {
        this.outConf.setConferenceStartDate(niter.nextNode().toString());
    }
    niter = this.model.listObjectsOfProperty(this.confResource, ResourceFactory.createProperty(Conference.CONFERENCE_PAPER_DATE_URI));
    if (niter.hasNext()) {
        this.outConf.setConferencePaperSubmissionDeadline(niter.nextNode().toString());
    }
    niter = this.model.listObjectsOfProperty(this.confResource, ResourceFactory.createProperty(Conference.CONFERENCE_ABSTRACT_DATE_URI));
    if (niter.hasNext()) {
        this.outConf.setConferenceAbstractSubmissionDeadline(niter.nextNode().toString());
    }
    niter = this.model.listObjectsOfProperty(this.confResource, ResourceFactory.createProperty(Conference.CONFERENCE_END_DATE_URI));
    if (niter.hasNext()) {
        this.outConf.setConferenceEndDate(niter.nextNode().toString());
    }
    niter = this.model.listObjectsOfProperty(this.confResource, ResourceFactory.createProperty(Conference.CONFERENCE_WEBSITE_URI));
    if (niter.hasNext()) {
        this.outConf.setConferenceWebsite(niter.nextNode().toString());
    }
    niter = this.model.listObjectsOfProperty(this.confResource, ResourceFactory.createProperty(Conference.CONFERENCE_DESCRIPTION_URI));
    if (niter.hasNext()) {
        this.outConf.setConferenceDescription(niter.nextNode().toString());
    }
    niter = this.model.listObjectsOfProperty(this.confResource, ResourceFactory.createProperty(Conference.ANNOUNCEMENT_FULLTEXT_URI));
    if (niter.hasNext()) {
        this.outConf.setAnnouncementFullText(niter.nextNode().toString());
    }
    niter = this.model.listObjectsOfProperty(this.confResource, ResourceFactory.createProperty(Conference.CONFERENCE_LOCATED_URI));
    if (niter.hasNext()) {
        this.outConf.setLocatedInURI(niter.nextNode().toString());
    }
    niter = this.model.listObjectsOfProperty(this.confResource, ResourceFactory.createProperty(Conference.CONFERENCE_TOPIC_AREA_URI));
    list = new ArrayList<String>();
    while (niter.hasNext()) {
        list.add(niter.nextNode().toString());
        hasTopics = true;
    }
    this.outConf.setConferenceTopicArea(list);
    if (hasTopics && this.ontResource != null) {
        ArrayList<String> imports = new ArrayList<String>();
        niter = this.model.listObjectsOfProperty(this.ontResource, OWL.imports);
        while (niter.hasNext()) {
            imports.add(niter.nextNode().toString());
        }
        this.outConf.addLocationOntologyURIs(imports);
        this.outConf.addTopicOntologyURIs(imports);
    }
    niter = this.model.listObjectsOfProperty(this.confResource, ResourceFactory.createProperty(Conference.PART_OF_SERIES_URI));
    if (niter.hasNext()) {
        series = niter.nextNode().toString();
        this.outConf.setSeriesURI(series);
    }
    if (series != null && series.length() > 0) {
        Resource seriesInd = this.model.getResource(series);
        if (seriesInd != null) {
            ConferenceSeries s = new ConferenceSeries(series);
            niter = this.model.listObjectsOfProperty(seriesInd, ResourceFactory.createProperty(Conference.CONFERENCE_TITLE_URI));
            if (niter.hasNext()) {
                s.setSeriesTitle(niter.nextNode().toString());
            }
            niter = this.model.listObjectsOfProperty(seriesInd, ResourceFactory.createProperty(Conference.CONFERENCE_WEBSITE_URI));
            if (niter.hasNext()) {
                s.setWebsite(niter.nextNode().toString());
            }
            niter = this.model.listObjectsOfProperty(seriesInd, ResourceFactory.createProperty(ConferenceSeries.SUBMISSIONS_DUE_IN_URI));
            if (niter.hasNext()) {
                s.setSubmissionsDueIn(niter.nextNode().toString());
            }
            niter = this.model.listObjectsOfProperty(seriesInd, ResourceFactory.createProperty(ConferenceSeries.OCCURS_IN_URI));
            if (niter.hasNext()) {
                s.setOccursIn(niter.nextNode().toString());
            }
            list = new ArrayList<String>();
            niter = this.model.listObjectsOfProperty(seriesInd, ResourceFactory.createProperty(ConferenceSeries.CONFERENCE_INSTANCE));
            while (niter.hasNext()) {
                list.add(niter.nextNode().toString());
            }
            s.setConstituentConferences(list);
            list = new ArrayList<String>();
            niter = this.model.listObjectsOfProperty(seriesInd, ResourceFactory.createProperty(Conference.CONFERENCE_TOPIC_AREA_URI));
            while (niter.hasNext()) {
                list.add(niter.nextNode().toString());
            }
            s.setTopicAreas(list);
            this.outConf.setSeries(s);
        }
    }
    // Supplemental location
    riter = this.model.listSubjectsWithProperty(RDF.type, this.model.getResource(Conference.CITY));
    if (riter.hasNext()) {
        Location newLoc;
        RDFNode parent = null;
        location = riter.nextResource();
        niter = this.model.listObjectsOfProperty(location, this.model.getProperty(Conference.IS_IN_URI));
        if (niter.hasNext()) {
            parent = niter.nextNode();
        }
        newLoc = new Location(parent.toString(), null, location.toString());
        niter = this.model.listObjectsOfProperty(location, RDFS.label);
        if (niter.hasNext()) {
            newLoc.setDisplayName(niter.nextNode().toString());
        }
        this.outConf.setLocation(newLoc);
    }
}
