public static void main(String[] args) throws Exception {
    String[] filesList;
    double[][] dMatrix;
    ButtonListener bl = new ButtonListener();
    if (args.length != 0) {
        String fileName = args[1];
        /*
			if(args[0].toLowerCase().compareTo("ts")==0)
			{
				String fileNameDm = args[2];
				Object [] oFilesAndMatrix = ClusteringMain.loadMatrix(fileNameDm);
				filesList = (String [])oFilesAndMatrix[0];
				dMatrix = (double [][])oFilesAndMatrix[1];
				dMatrix = symm(dMatrix);
				File f = new File(fileName);
				FileInputStream fis = new FileInputStream(f);
				byte [] data = new byte[(int)f.length()];
				fis.read(data);
				String newickTree = new String(data);
				newickTree = newickTree.replaceAll(" ", "");
				newickTree = newickTree.replaceAll("\n", "");
				newickTree = removeBranchLengths(newickTree);
				QuartetTreeScorer qts = new QuartetTreeScorer();
				String sXmlTree = QuartetTree.newick2Xml(newickTree);
				
				for(int i=0;i<filesList.length;i++)
				{
					sXmlTree = sXmlTree.replaceAll("id=\""+filesList[i]+"\"", "id=\""+i+"\"");
				}
				
				f = new File("xmltree.xml");
				FileOutputStream fos = new FileOutputStream(f);
				fos.write(sXmlTree.getBytes());
				fos.close();
				
				DocumentBuilderFactory docbuilderfact = DocumentBuilderFactory.newInstance();
				DocumentBuilder docbuilder = docbuilderfact.newDocumentBuilder();
				Document xmlTree = docbuilder.parse(f);
				
				double score = qts.ComputeScore(xmlTree, dMatrix);
				
				System.out.println("Quartet score: " + score);
			}
			else if(args[0].toLowerCase().compareTo("cc")==0)
			{
				System.out.println("Compressing files using BZIP2... please wait.");
				File filesDir = new File(fileName);
				File [] files = filesDir.listFiles();
				filesList = new String[files.length];
				for(int i=0;i<files.length;i++){
					File f = files[i];
					filesList[i] = f.getPath();
				}
				Arrays.sort(filesList);
				DistanceMatrixComputer dmc = new DistanceMatrixComputer(new BZIP2Compressor(),new NCDistance());
				dMatrix = dmc.ComputeMatrix(filesList);
				dMatrix = symm(dMatrix);
				
				String outString = dMatrix.length + "\n";
				for(int i=0;i<dMatrix.length;i++)
				{
					filesList[i] = filesList[i].replace('\\', '/');
					int index = filesList[i].lastIndexOf('/');
					outString += filesList[i].substring(index + 1);
					for(int j=0;j<dMatrix.length;j++)
					{
						outString += " " + dMatrix[i][j];
					}
					outString += "\n";
				}
				
				FileWriter fw = new FileWriter(fileName + ".dist");
				fw.write(outString);
				fw.close();
				System.out.println("Done. Distance matrix written to: " + fileName + ".dist");
			}else*/
        if (args[0].toLowerCase().compareTo("dr") == 0) {
            int steps = 1;
            try {
                steps = Integer.parseInt(args[2]);
            } catch (Exception ex) {
                steps = 1;
            }
            Object[] oFilesAndMatrix = ClusteringMain.loadMatrix(fileName);
            filesList = (String[]) oFilesAndMatrix[0];
            dMatrix = (double[][]) oFilesAndMatrix[1];
            dMatrix = symm(dMatrix);
            try {
                MTCQPRandomTreeConstructor.QC = Integer.parseInt(args[3]) - 1;
            } catch (Exception ex) {
                MTCQPRandomTreeConstructor.QC = dMatrix.length;
            }
            bl = new ButtonListener();
            bl.ConstructRandomTree(dMatrix, filesList, false, steps);
            saveTreeFiles(filesList, dMatrix, MTCQPRandomTreeConstructor.allTrees);
        } else if (args[0].toLowerCase().compareTo("fm") == 0) {
            int steps = 1;
            try {
                steps = Integer.parseInt(args[2]);
            } catch (Exception ex) {
                steps = 1;
            }
            Object[] oFilesAndMatrix = ClusteringMain.loadMatrix(fileName);
            filesList = (String[]) oFilesAndMatrix[0];
            dMatrix = (double[][]) oFilesAndMatrix[1];
            dMatrix = symm(dMatrix);
            try {
                MTCQPExternalCriterionTreeConstructor.QC = Integer.parseInt(args[3]) - 1;
            } catch (Exception ex) {
                MTCQPExternalCriterionTreeConstructor.QC = dMatrix.length;
            }
            bl = new ButtonListener();
            bl.ConstructExternalCriterionTree(dMatrix, filesList, false, steps, new LeastSquaresEvaluator());
        // saveTreeFiles(filesList,dMatrix,MTCQPExternalCriterionTreeConstructor.allTrees);
        } else if (args[0].toLowerCase().compareTo("ml") == 0) {
            int steps = 1;
            try {
                steps = Integer.parseInt(args[2]);
            } catch (Exception ex) {
                steps = 1;
            }
            Object[] oFilesAndMatrix = ClusteringMain.loadMatrix(fileName);
            filesList = (String[]) oFilesAndMatrix[0];
            dMatrix = (double[][]) oFilesAndMatrix[1];
            dMatrix = symm(dMatrix);
            try {
                MTCQPExternalCriterionTreeConstructor.QC = Integer.parseInt(args[3]) - 1;
            } catch (Exception ex) {
                MTCQPExternalCriterionTreeConstructor.QC = dMatrix.length;
            }
            bl = new ButtonListener();
            bl.ConstructExternalCriterionTree(dMatrix, filesList, false, steps, new MaximumLikelihoodEvaluator());
        // saveTreeFiles(filesList,dMatrix,MTCQPExternalCriterionTreeConstructor.allTrees);
        } else /*
			else if(args[0].toLowerCase().compareTo("iqp")==0)
			{
				int steps = 1;
				try
				{
					steps = Integer.parseInt(args[2]);
				}catch(Exception ex)
				{
					steps = 1;
				}
				
				Object [] oFilesAndMatrix = ClusteringMain.loadMatrix(fileName);
				filesList = (String [])oFilesAndMatrix[0];
				dMatrix = (double [][])oFilesAndMatrix[1];
				dMatrix = symm(dMatrix);
				
				try
				{
					MTCQPExternalCriterionTreeConstructor.QC = Integer.parseInt(args[3])-1;
				}catch(Exception ex)
				{
					MTCQPExternalCriterionTreeConstructor.QC = dMatrix.length;
				}
				
				bl = new ButtonListener();
				bl.ConstructExternalCriterionTree(dMatrix,filesList,false,steps,new IqpnniMLEvaluator());
				//saveTreeFiles(filesList,dMatrix,MTCQPExternalCriterionTreeConstructor.allTrees);				
			}*/
        if (args[0].toLowerCase().compareTo("td") == 0) {
            int steps = 1;
            try {
                steps = Integer.parseInt(args[2]);
            } catch (Exception ex) {
                steps = 1;
            }
            Object[] oFilesAndMatrix = ClusteringMain.loadMatrix(fileName);
            filesList = (String[]) oFilesAndMatrix[0];
            dMatrix = (double[][]) oFilesAndMatrix[1];
            dMatrix = symm(dMatrix);
            try {
                MTCQPExternalCriterionTreeConstructor.QC = Integer.parseInt(args[3]) - 1;
            } catch (Exception ex) {
                MTCQPExternalCriterionTreeConstructor.QC = dMatrix.length;
            }
            bl = new ButtonListener();
            bl.ConstructExternalCriterionTree(dMatrix, filesList, false, steps, new TreedistEvaluator());
        // saveTreeFiles(filesList,dMatrix,MTCQPExternalCriterionTreeConstructor.allTrees);
        } else if (args[0].toLowerCase().compareTo("dm") == 0) {
            int steps = 1;
            try {
                steps = Integer.parseInt(args[2]);
            } catch (Exception ex) {
                steps = 1;
            }
            Object[] oFilesAndMatrix = ClusteringMain.loadMatrix(fileName);
            filesList = (String[]) oFilesAndMatrix[0];
            dMatrix = (double[][]) oFilesAndMatrix[1];
            dMatrix = symm(dMatrix);
            bl = new ButtonListener();
            bl.ConstructTree(dMatrix, filesList, false, steps);
        /*String allTrees = MCQP11TreeConstructor.allTrees;
				String progressTrees = MCQP11TreeConstructor.progressTrees;
				saveTreeFiles(filesList,dMatrix,allTrees,progressTrees,MCQP11TreeConstructor.allDiffs);
				*/
        }
    /*
			else if(args[0].toLowerCase().compareTo("dt")==0)
			{
				evolution_rate = Double.parseDouble(args[2]);
				Object [] oFilesAndMatrix = ClusteringMain.loadMatrix(fileName);
				filesList = (String [])oFilesAndMatrix[0];
				dMatrix = (double [][])oFilesAndMatrix[1];
				dMatrix = symm(dMatrix);
				bl = new ButtonListener();
				bl.ConstructTree(dMatrix,filesList,false,-1);				
			}
			else if(args[0].toLowerCase().compareTo("dd")==0)
			{
				int steps = Integer.parseInt(args[2]);
				String [] trees = new String[steps];
				double [] scores = new double[steps];
				Object [] oFilesAndMatrix = ClusteringMain.loadMatrix(fileName);
				filesList = (String [])oFilesAndMatrix[0];
				dMatrix = (double [][])oFilesAndMatrix[1];
				dMatrix = symm(dMatrix);
				bl = new ButtonListener();
				double max_st = 0;
				int max_index = -1;
				for(int j=0;j<steps;j++)
				{				
					trees[j] = bl.ConstructTree(dMatrix,filesList,false,3);
					scores[j] = MCQP11TreeConstructor.St;
					if(scores[j] >= max_st)
					{
						max_st = scores[j];
						max_index = j;
					}
				}
				File f = new File("mtcqp-" + dMatrix.length + ".tree");
		        FileOutputStream fos = new FileOutputStream(f);
		        fos.write(trees[max_index].getBytes());
		        fos.close();
		        System.out.println("Best score: " + scores[max_index]);
			}
			else if(args[0].toLowerCase().compareTo("li")==0)
			{
				int steps = Integer.parseInt(args[2]);
				String [] dmList = ClusteringMain.loadDMList(fileName);
				for(int k=0;k<dmList.length;k++){
					Object [] oFilesAndMatrix = ClusteringMain.loadMatrix(dmList[k]);
					filesList = (String [])oFilesAndMatrix[0];
					dMatrix = (double [][])oFilesAndMatrix[1];
					bl.ConstructTree(dMatrix,filesList,false,steps);
					File f = new File(dMatrix.length+".tree");
					File f2 = new File("clustio"+k+".tree");
					f.renameTo(f2);
			}*/
    } else {
        System.out.println("Please refer to the README file for a valid list of arguments.");
    }
}
