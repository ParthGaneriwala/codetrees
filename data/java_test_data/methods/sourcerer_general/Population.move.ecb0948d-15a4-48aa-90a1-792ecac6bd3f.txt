public void move(int i) {
    int x, y;
    Graphics g = getGraphics();
    // eraseGenome(i, g);
    int situation = getSituation(i);
    Genome genome = genomeArray.get(i);
    int movement = 0;
    try {
        movement = genome.react(situation);
    } catch (Exception e1) {
        // TODO Auto-generated catch block
        e1.printStackTrace();
    }
    x = genome.getX();
    y = genome.getY();
    switch(movement) {
        case (1):
            x = x - 1;
            y = y + 1;
            break;
        case (2):
            y = y + 1;
            break;
        case (3):
            x = x + 1;
            y = y + 1;
            break;
        case (4):
            x = x + 1;
            break;
        case (5):
            x = x + 1;
            y = y - 1;
            break;
        case (6):
            y = y - 1;
            break;
        case (7):
            x = x - 1;
            y = y - 1;
            break;
        case (8):
            x = x - 1;
            break;
        default:
            break;
    }
    // Vector neighbours = findNeighbours(i);
    int opponent = fieldOccupiedBy(boundaryGuard(x), boundaryGuard(y));
    if (opponent >= 0 && opponent != i) {
        /*Field already occupied*/
        try {
            Genome opponentGenome = genome.replicate();
            opponentGenome.setX(boundaryGuard(x));
            opponentGenome.setY(boundaryGuard(y));
            genomeArray.setElementAt(opponentGenome, opponent);
            drawGenome(opponent, g);
        } catch (Exception e) {
            System.err.println(" replication error");
        }
    } else {
        /*Nobody in the way*/
        eraseGenome(i, g);
        genome.setX(boundaryGuard(x));
        genome.setY(boundaryGuard(y));
        drawGenome(i, g);
    }
}
