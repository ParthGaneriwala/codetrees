public static void createMethodMenuItems(JPopupMenu menu, Class<?> cl, GenTypeClass gtype, InvokeListener il, DebuggerObject obj, String currentPackageName) {
    if (cl != null) {
        View view = View.getView(cl);
        Hashtable<JMenuItem, MethodView> actions = new Hashtable<JMenuItem, MethodView>();
        Hashtable<String, String> methodsUsed = new Hashtable<String, String>();
        List<Class<?>> classes = getClassHierarchy(cl);
        // define two view filters for different package visibility
        ViewFilter samePackageFilter = new ViewFilter(ViewFilter.INSTANCE | ViewFilter.PACKAGE);
        ViewFilter otherPackageFilter = new ViewFilter(ViewFilter.INSTANCE | ViewFilter.PUBLIC);
        // define a view filter
        ViewFilter filter;
        if (currentPackageName != null && currentPackageName.equals(view.getPackageName()))
            filter = samePackageFilter;
        else
            filter = otherPackageFilter;
        menu.addSeparator();
        // get declared methods for the class
        MethodView[] declaredMethods = view.getDeclaredMethods();
        // create method entries for locally declared methods
        GenTypeClass curType = gtype;
        if (curType == null) {
            curType = new GenTypeClass(new JavaReflective(cl));
        }
        // HACK to make it work in greenfoot.
        if (itemsOnScreen <= 0) {
            itemsOnScreen = 30;
        }
        int itemLimit = itemsOnScreen - 8 - classes.size();
        createMenuItems(menu, declaredMethods, il, filter, itemLimit, curType.getMap(), actions, methodsUsed);
        // create submenus for superclasses
        for (int i = 1; i < classes.size(); i++) {
            Class<?> currentClass = classes.get(i);
            view = View.getView(currentClass);
            // Determine visibility of package private / protected members
            if (currentPackageName != null && currentPackageName.equals(view.getPackageName()))
                filter = samePackageFilter;
            else
                filter = otherPackageFilter;
            // map generic type paramaters to the current superclass
            curType = curType.mapToSuper(currentClass.getName());
            declaredMethods = view.getDeclaredMethods();
            JMenu subMenu = new JMenu(inheritedFrom + " " + JavaNames.stripPrefix(currentClass.getName()));
            subMenu.setFont(PrefMgr.getStandoutMenuFont());
            createMenuItems(subMenu, declaredMethods, il, filter, (itemsOnScreen / 2), curType.getMap(), actions, methodsUsed);
            menu.insert(subMenu, 0);
        }
        menu.addSeparator();
    }
}
