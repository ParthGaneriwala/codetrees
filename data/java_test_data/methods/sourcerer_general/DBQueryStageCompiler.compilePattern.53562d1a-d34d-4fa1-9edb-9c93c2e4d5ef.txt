/**
 * compile a triple pattern.
 */
private static void compilePattern(DBQueryStageCompiler compiler, DBQuery query, DBPattern dbpat) {
    Element subj = dbpat.S;
    Element obj = dbpat.O;
    Element pred = dbpat.P;
    String qual = "";
    int alias = query.aliasCnt;
    if (query.isReifier) {
        boolean newAlias = true;
        if (!(pred instanceof Fixed))
            throw new JenaException("Reifier predicate not bound");
        Node p = ((Fixed) pred).asNodeMatch((Domain) null);
        char reifProp = getReificationChar(p);
        if (!subj.equals(Element.ANY)) {
            // that subject is already bound, skip the join.
            if (query.qryFullReif && (subj instanceof Free) && query.getBinding(((Free) subj).getListing()).isBoundToCol()) {
                alias = (query.getBinding(((Free) subj).getListing())).alias;
                newAlias = false;
            } else
                qual = query.sqlAnd.gen(getQual(query, alias, 'N', subj));
        }
        qual += query.sqlAnd.gen(getQual(query, alias, reifProp, obj));
        qual += query.sqlAnd.gen(query.driver.genSQLQualGraphId(alias, query.graphId));
        if (newAlias)
            query.newAlias();
    } else {
        // query over triple table
        qual = query.sqlAnd.gen(getQual(query, alias, 'S', subj));
        qual += query.sqlAnd.gen(getQual(query, alias, 'P', pred));
        qual += query.sqlAnd.gen(getQual(query, alias, 'O', obj));
        qual += query.sqlAnd.gen(query.driver.genSQLQualGraphId(alias, query.graphId));
        query.newAlias();
    }
    query.stmt += qual;
}
