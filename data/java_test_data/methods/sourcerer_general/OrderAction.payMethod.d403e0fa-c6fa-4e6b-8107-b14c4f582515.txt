public ActionForward payMethod(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
    if (!isLoggedIn(request)) {
        return mapping.findForward(ForwardConstants.INDEX);
    }
    DynaActionForm data = (DynaActionForm) form;
    String type = (String) data.get("radio");
    String sendMethod = "货到付款";
    if ("method1".equals(type)) {
        sendMethod = "货到付款";
    } else if ("method2".equals(type)) {
        sendMethod = "快递公司";
    } else if ("method3".equals(type)) {
        sendMethod = "EMS";
    } else if ("method4".equals(type)) {
        sendMethod = "邮局包裹";
    } else {
        sendMethod = "快递公司";
    }
    SessionContainer sessionContainer = getSessionContainer(request);
    sessionContainer.getCart().setSendMethod(sendMethod);
    request.setAttribute("sendMethod", sendMethod);
    request.setAttribute("type", type);
    Customer customer = customerService.findByEmail(sessionContainer.getCustomer().getEmail());
    if (customer.getAccount() != null) {
        request.setAttribute("money", customer.getAccount().getMoney());
    } else {
        request.setAttribute("money", 0);
    }
    if ("method1".equals(type)) {
        ShoppingCart cart = sessionContainer.getCart();
        float price = new Float(cart.getTotalPriceIncludeFreight());
        // do save order
        saveOrder(request, price);
        String orderNo = sessionContainer.getCurrentOrderNumber();
        java.text.DecimalFormat df = new java.text.DecimalFormat("#.##");
        request.setAttribute("price", df.format(price) + "");
        request.setAttribute("orderNo", orderNo);
        return mapping.findForward("hdfk");
    }
    List<Item> items = sessionContainer.getCart().getItems();
    Map<Integer, Integer> temp = new HashMap<Integer, Integer>();
    Map<String, Integer> itemContentMap = new HashMap<String, Integer>();
    StringBuffer itemsContent = new StringBuffer();
    List<Item> printPhotosItems = sessionContainer.getCart().getPrintPhotosItems();
    for (Item item : items) {
        Integer id = item.getProduct().getId();
        String name = item.getProduct().getName();
        Integer quantity = item.getQuantity();
        if (!temp.containsKey(id)) {
            itemContentMap.put(name, quantity);
            temp.put(id, id);
        } else {
            Integer oldQuantity = itemContentMap.get(name);
            Integer newQuantity = oldQuantity + item.getQuantity();
            itemContentMap.put(name, newQuantity);
        }
    }
    for (Item item : printPhotosItems) {
        Integer id = item.getProduct().getId();
        String name = item.getProduct().getName();
        Integer quantity = item.getQuantity();
        if (!temp.containsKey(id)) {
            itemContentMap.put(name, quantity);
            temp.put(id, id);
        } else {
            Integer oldQuantity = itemContentMap.get(name);
            Integer newQuantity = oldQuantity + item.getQuantity();
            itemContentMap.put(name, newQuantity);
        }
    }
    Set<Map.Entry<String, Integer>> sets = itemContentMap.entrySet();
    for (Map.Entry entry : sets) {
        itemsContent.append(entry.getKey());
        itemsContent.append("  ");
        itemsContent.append("数量：" + entry.getValue() + ";  ");
    }
    String content = itemsContent.toString();
    Address address = addressService.findById(sessionContainer.getCart().getAddress().getId());
    request.setAttribute("content", content);
    request.setAttribute("address", address);
    return mapping.findForward(ForwardConstants.SUCCESS);
}
