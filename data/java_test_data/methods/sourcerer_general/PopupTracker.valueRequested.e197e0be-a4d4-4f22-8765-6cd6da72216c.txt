@Override
public void valueRequested(ValuePort port) {
    sync = BidirectionalHashMap.getInstance();
    if (InPort.class.isAssignableFrom(port.getClass()) && sync.get(port) != null && GConnection.class.isAssignableFrom((sync.get(port)).getClass())) {
        GHandleConnection g = (GHandleConnection) sync.get(port);
        GInputPort gi = g.getInput();
        try {
            Thread.sleep(Constants.getHighlighttime());
            g.setHighlighted(true);
            gi.setHighlighted(true);
            gview.giveAttention();
            Thread.sleep(Constants.getHighlighttime());
            g.setHighlighted(false);
            gi.setHighlighted(false);
            gview.giveAttention();
            Thread.sleep(Constants.getHighlighttime());
            g.setHighlighted(true);
            gi.setHighlighted(true);
            gview.giveAttention();
            Thread.sleep(Constants.getHighlighttime());
            g.setHighlighted(false);
            gi.setHighlighted(false);
            gview.giveAttention();
            Thread.sleep(Constants.getHighlighttime());
            g.setHighlighted(true);
            gi.setHighlighted(true);
            gview.giveAttention();
            Thread.sleep(Constants.getHighlighttime());
            g.setHighlighted(false);
            gi.setHighlighted(false);
            gview.giveAttention();
            Thread.sleep(Constants.getPausetime());
            JOptionPane.showMessageDialog(gview.getParent(), LabelReader.getInstance().getString("Port") + " " + port + ": " + LabelReader.getInstance().getString("RequestedValue"));
        } catch (InterruptedException ex) {
            Logger.getLogger(HighLightTracker.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
