public GenericBean processAction(ActionRequest request, ActionResponse response) throws Exception {
    // get the modules details
    int linkItemId = PortalUtils.getPageViewAsInt(request);
    String moduleName = PortalUtils.getPageDomainObject(request);
    // get parameter values
    String tags = request.getParameter(TAGS);
    request.setAttribute(POPUP, request.getParameter(POPUP));
    // validate the object being tagged
    if (!ModuleUtils.MODULENAME_CLASSIFIEDS.equals(moduleName)) {
        return logErrorClosePanel(request, response, "Module mismatch while tagging object");
    }
    // Determine the project container to use
    Project project = findProject(request);
    if (project == null) {
        return logErrorClosePanel(request, response, "Project is null");
    }
    // Check the user's permissions
    User user = getUser(request);
    if (!ProjectUtils.hasAccess(project.getId(), user, "project-profile-view")) {
        return logErrorClosePanel(request, response, "Unauthorized to add in this project");
    }
    if (!ProjectUtils.hasAccess(project.getId(), user, "project-classifieds-view")) {
        return logErrorClosePanel(request, response, "Unauthorized to view this record");
    }
    // get database connection
    Connection db = useConnection(request);
    // Load the object being tagged to make sure it exists
    try {
        Classified classified = new Classified(db, linkItemId);
    } catch (Exception e) {
        return logErrorClosePanel(request, response, e.getMessage());
    }
    // update the tag changes
    UserTagLogList userTagLogList = new UserTagLogList();
    userTagLogList.setUserId(user.getId());
    userTagLogList.setLinkModuleId(Constants.PROJECT_CLASSIFIEDS_FILES);
    userTagLogList.setLinkItemId(linkItemId);
    userTagLogList.buildList(db);
    userTagLogList.updateTags(db, tags);
    // reload the tags to the page
    TagList moduleTagList = new TagList();
    moduleTagList.setTableName(Classified.TABLE);
    moduleTagList.setUniqueField(Classified.PRIMARY_KEY);
    moduleTagList.setLinkItemId(linkItemId);
    PagedListInfo tagListInfo = new PagedListInfo();
    tagListInfo.setColumnToSortBy("tag_count DESC, tag");
    moduleTagList.setPagedListInfo(tagListInfo);
    moduleTagList.buildList(db);
    HttpServletRequest req = (HttpServletRequest) request;
    req.getSession().setAttribute(CURRENT_TAGS, StringUtils.toHtml(moduleTagList.getTagsAsString(",")));
    response.sendRedirect(response.encodeURL(request.getContextPath() + "/projects_center_ajax_message.jsp"));
    return null;
}
