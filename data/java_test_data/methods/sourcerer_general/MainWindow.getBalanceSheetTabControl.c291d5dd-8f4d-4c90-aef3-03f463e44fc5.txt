private Control getBalanceSheetTabControl(TabFolder tabFolder) {
    final Composite composite = new Composite(tabFolder, SWT.NONE);
    // 口座ツリー
    List<Account> accounts = accountListProv.getAccounts();
    bsAccountTree = new AccountTree(accounts);
    bsAccountTree.createControl(composite);
    accountListProv.addChangeListener(new BaseDataAdapter<Account>() {

        public void onUpdated(Account item) {
            bsAccountTree.viewer.refresh();
        }
    });
    // default account selection
    // TODO select account last saved
    bsAccountTree.selectAccount(0);
    bsAccountTree.addSelectionListener(new SelectionAdapter() {

        @Override
        public void widgetSelected(SelectionEvent e) {
            super.widgetSelected(e);
            Account a = bsAccountTree.getSelected();
            if (a != null && a.getId() != null) {
                bsProv.setAccount(a);
                bsTableViewer.refresh();
                currentBalance.setText(numberFormat.format(bsProv.getBalance()));
            }
        }
    });
    // 表示範囲（日、週、月、年）
    // 日
    final Button oneDay = new Button(composite, SWT.RADIO);
    setText(oneDay, "Day");
    oneDay.setSelection(true);
    oneDay.addSelectionListener(new SelectionAdapter() {

        @Override
        public void widgetSelected(SelectionEvent e) {
            super.widgetSelected(e);
            changeBsDateRange(Calendar.DATE);
        }
    });
    // 週
    final Button oneWeek = new Button(composite, SWT.RADIO);
    setText(oneWeek, "Week");
    oneWeek.addSelectionListener(new SelectionAdapter() {

        @Override
        public void widgetSelected(SelectionEvent e) {
            super.widgetSelected(e);
            changeBsDateRange(Calendar.WEEK_OF_YEAR);
        }
    });
    // 月
    final Button oneMonth = new Button(composite, SWT.RADIO);
    setText(oneMonth, "Month");
    oneMonth.addSelectionListener(new SelectionAdapter() {

        @Override
        public void widgetSelected(SelectionEvent e) {
            super.widgetSelected(e);
            changeBsDateRange(Calendar.MONTH);
        }
    });
    // 年
    final Button oneYear = new Button(composite, SWT.RADIO);
    setText(oneYear, "Year");
    oneYear.addSelectionListener(new SelectionAdapter() {

        @Override
        public void widgetSelected(SelectionEvent e) {
            super.widgetSelected(e);
            changeBsDateRange(Calendar.YEAR);
        }
    });
    // 確定、未確定選択
    final Button btnConfirmed = new Button(composite, SWT.CHECK);
    setText(btnConfirmed, "Confirmed");
    btnConfirmed.setSelection(true);
    final Button btnUnconfirmed = new Button(composite, SWT.CHECK);
    setText(btnUnconfirmed, "Unconfirmed");
    btnUnconfirmed.setSelection(true);
    btnConfirmed.addSelectionListener(new SelectionAdapter() {

        @Override
        public void widgetSelected(SelectionEvent e) {
            super.widgetSelected(e);
            // Button b = (Button)e.widget;
            switchUnconfirmed(btnConfirmed.getSelection(), btnUnconfirmed.getSelection());
        }
    });
    btnUnconfirmed.addSelectionListener(new SelectionAdapter() {

        @Override
        public void widgetSelected(SelectionEvent e) {
            super.widgetSelected(e);
            // Button b = (Button)e.widget;
            switchUnconfirmed(btnConfirmed.getSelection(), btnUnconfirmed.getSelection());
        }
    });
    // カレンダー
    DateTime listDate = new DateTime(composite, SWT.CALENDAR | SWT.SHORT);
    listDate.addSelectionListener(new SelectionAdapter() {

        public void widgetSelected(SelectionEvent e) {
            DateTime dt = (DateTime) e.widget;
            selectedCal.set(dt.getYear(), dt.getMonth(), dt.getDay());
            if (oneDay.getSelection()) {
                oneDay.notifyListeners(SWT.Selection, new Event());
            } else if (oneWeek.getSelection()) {
                oneWeek.notifyListeners(SWT.Selection, new Event());
            } else if (oneMonth.getSelection()) {
                oneMonth.notifyListeners(SWT.Selection, new Event());
            } else if (oneYear.getSelection()) {
                oneYear.notifyListeners(SWT.Selection, new Event());
            }
        }
    });
    // バランスシート
    bsTable = new Table(composite, SWT.SINGLE | SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL | SWT.FULL_SELECTION | SWT.HIDE_SELECTION);
    bsTable.setLinesVisible(true);
    bsTable.setHeaderVisible(true);
    // カラム
    TableColumn[] cols = new TableColumn[6];
    for (int i = 0; i < 6; i++) {
        cols[i] = new TableColumn(bsTable, SWT.NONE);
        cols[i].setWidth(100);
    }
    setText(cols[0], "Date");
    setText(cols[1], "Item");
    cols[1].setWidth(150);
    setText(cols[2], "Expense");
    cols[2].setAlignment(SWT.RIGHT);
    setText(cols[3], "Income");
    cols[3].setAlignment(SWT.RIGHT);
    setText(cols[4], "Balance");
    cols[4].setAlignment(SWT.RIGHT);
    setText(cols[5], "Detail");
    // リスト
    createTableViewer();
    cols[0].pack();
    cols[0].setAlignment(SWT.CENTER);
    // ポップアップメニュー
    Menu mePopup = new Menu(sShell, SWT.POP_UP);
    MenuItem miDelete = new MenuItem(mePopup, SWT.PUSH);
    setText(miDelete, "Delete");
    miDelete.addSelectionListener(new SelectionAdapter() {

        @Override
        public void widgetSelected(SelectionEvent e) {
            super.widgetSelected(e);
            Transaction t = (Transaction) bsTable.getSelection()[0].getData();
            if (t.getDate() != null) {
                bsProv.removeItem(t);
            }
            bsTableViewer.refresh();
            currentBalance.setText(numberFormat.format(bsProv.getBalance()));
        }
    });
    MenuItem miExchg = new MenuItem(mePopup, SWT.PUSH);
    setText(miExchg, "Exchange");
    miExchg.addSelectionListener(new SelectionAdapter() {

        @Override
        public void widgetSelected(SelectionEvent e) {
            super.widgetSelected(e);
            sShell.setCursor(new Cursor(null, SWT.CURSOR_WAIT));
            ExchangeRateHandler.getRate();
            sShell.setCursor(new Cursor(null, SWT.NONE));
            Transaction t = (Transaction) bsTable.getSelection()[0].getData();
            if (ExchangeRateHandler.getRate() == 0) {
                InputDialog d = new InputDialog(sShell, "", "Input JPY for ￥1 RMB:", "12.0", null);
                if (d.open() == Window.OK) {
                    System.err.println(d.getValue());
                    ExchangeRateHandler.setRate(Double.valueOf(d.getValue()));
                } else {
                    return;
                }
            }
            t.setDebit((int) (t.getDebit() * ExchangeRateHandler.getRate()));
            t.setCredit((int) (t.getCredit() * ExchangeRateHandler.getRate()));
            bsProv.itemChanged(t);
        }
    });
    bsTable.setMenu(mePopup);
    // <Add New>
    bsTable.addMouseListener(new MouseAdapter() {

        @Override
        public void mouseDoubleClick(MouseEvent e) {
            if (e.button == 1) {
                Transaction t = (Transaction) bsTable.getSelection()[0].getData();
                if (t.getDate() == null) {
                    bsProv.addItem();
                    return;
                }
            }
            super.mouseDoubleClick(e);
        }
    });
    // 残高ラベル
    Label label = new Label(composite, SWT.NONE);
    setText(label, "Balance:");
    currentBalance = new Label(composite, SWT.RIGHT);
    // レイアウト
    FormLayout formLayout = new FormLayout();
    composite.setLayout(formLayout);
    formLayout.marginHeight = 10;
    formLayout.marginWidth = 10;
    Point calSize = listDate.computeSize(SWT.DEFAULT, SWT.DEFAULT);
    LOG.debug("cal size:" + calSize);
    // アカウント
    int treeX = bsAccountTree.viewer.getTree().computeSize(SWT.DEFAULT, SWT.DEFAULT).x;
    LOG.debug("account X:" + treeX);
    FormData layoutData = SWTUtil.setFormLayoutData(bsAccountTree.viewer.getTree(), listDate, 10, SWT.NONE, listDate, 0, SWT.LEFT);
    layoutData.height = 400 - calSize.y - 10;
    if (calSize.x > treeX) {
        layoutData.width = calSize.x;
    } else {
        listDate.setSize(treeX, calSize.y);
        SWTUtil.setFormLayoutData(listDate, 0, 10, 0, 10).width = treeX;
    }
    SWTUtil.setFormLayoutData(bsTable, listDate, 0, SWT.TOP, listDate, 20, SWT.NONE).height = 400;
    bsTable.setSize(tabFolder.getSize());
    SWTUtil.setFormLayoutData(oneDay, bsTable, 0, SWT.TOP, bsTable, 10, SWT.NONE).width = 80;
    SWTUtil.setFormLayoutData(oneWeek, oneDay, 10, SWT.NONE, oneDay, 0, SWT.LEFT).width = 80;
    SWTUtil.setFormLayoutData(oneMonth, oneWeek, 10, SWT.NONE, oneWeek, 0, SWT.LEFT).width = 80;
    SWTUtil.setFormLayoutData(oneYear, oneMonth, 10, SWT.NONE, oneMonth, 0, SWT.LEFT).width = 80;
    SWTUtil.setFormLayoutData(btnConfirmed, oneYear, 10, SWT.NONE, oneYear, 0, // .width = 80;
    SWT.LEFT);
    SWTUtil.setFormLayoutData(btnUnconfirmed, btnConfirmed, 10, SWT.NONE, oneYear, 0, // .width = 80;
    SWT.LEFT);
    SWTUtil.setFormLayoutDataRight(currentBalance, bsTable, 10, SWT.NONE, bsTable, -20, SWT.RIGHT).width = 100;
    SWTUtil.setFormLayoutDataRight(label, bsTable, 10, SWT.NONE, currentBalance, -150, SWT.RIGHT);
    return composite;
}
