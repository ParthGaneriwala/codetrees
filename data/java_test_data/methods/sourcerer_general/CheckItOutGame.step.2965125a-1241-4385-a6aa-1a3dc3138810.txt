public void step() {
    if (Math.random() * 2000 < info.waitTime) {
        createRandomItem();
    }
    if (fricForNext) {
        player.frictionForce(-conveyorSpeed, 0);
        fricForNext = false;
    }
    player.step();
    // collisions!
    Rect3D playerRect;
    // invisable walls:
    playerRect = new Rect3D(player.currentRect);
    if (playerRect.x - playerRect.width < floor.x - floor.width) {
        playerRect.x = floor.x - floor.width + playerRect.width;
    }
    if (playerRect.x + playerRect.width > floor.x + floor.width) {
        playerRect.x = floor.x + floor.width - playerRect.width;
    }
    if (playerRect.z - playerRect.depth < floor.z - floor.depth) {
        playerRect.z = floor.z - floor.depth + playerRect.depth;
    }
    if (playerRect.z + playerRect.depth > floor.z + floor.depth) {
        playerRect.z = floor.z + floor.depth - playerRect.depth;
    }
    if (!playerRect.equals(player.currentRect)) {
        putPlayerHereAfterCollision(playerRect);
    }
    // conveyor belt:
    playerRect = new Rect3D(player.currentRect);
    if (playerRect.collideAgainst(floor, floor, player.prevRect)) {
        putPlayerHereAfterCollision(playerRect);
    }
    // grocery items:
    playerRect = new Rect3D(player.currentRect);
    List<Rect3D> nextItems = new LinkedList<Rect3D>();
    for (Rect3D rr : items) {
        Rect3D pr = new Rect3D(rr);
        rr.translate(-conveyorSpeed, 0, 0);
        if (!(rr.x - rr.width > floor.x - floor.width)) {
            continue;
        }
        nextItems.add(rr);
        if (playerRect.collideAgainst(rr, pr, player.prevRect)) {
            putPlayerHereAfterCollision(playerRect);
        }
    }
    items = nextItems;
}
