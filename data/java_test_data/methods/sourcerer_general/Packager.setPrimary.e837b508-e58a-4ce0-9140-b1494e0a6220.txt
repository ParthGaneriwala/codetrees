@Override
public void setPrimary(final Class<?> primary) {
    if (primary == null)
        throw new IllegalArgumentException("Primary implementation cannot be null");
    try {
        final Object instance = primary.newInstance();
        if (!(instance instanceof IComponent)) {
            throw new IllegalArgumentException("Given class is not a component implementation.");
        }
    } catch (InstantiationException e) {
        e.printStackTrace();
    } catch (IllegalAccessException e) {
        e.printStackTrace();
    }
    // Remove old cache.
    if (this.primary != null && this.primary != primary) {
        for (final Class<?> c : this.classesadded) {
            this.classexporter.removeClass(c);
        }
        this.classesadded.clear();
        for (final ICxMapping m : this.mappingsadded) {
            this.cxexporter.removeMapping(m);
        }
        this.mappingsadded.clear();
    }
    // Cache provided mappings and interface classes.
    final Provide annop = primary.getAnnotation(Provide.class);
    if (annop != null) {
        final Class<?>[] provided = annop.value();
        for (final Class<?> p : provided) {
            final CxMapping mapping = new CxMapping(true);
            mapping.setInterface(p.getName());
            mapping.addClass(primary.getName());
            this.classesadded.add(p);
            this.classexporter.addClass(p);
            this.mappingsadded.add(mapping);
            this.cxexporter.addMapping(mapping);
        }
    }
    // Cache required mappings and interface classes.
    final Require annor = primary.getAnnotation(Require.class);
    if (annor != null) {
        final Class<?>[] required = annor.value();
        for (final Class<?> r : required) {
            final CxMapping mapping = new CxMapping(false);
            mapping.setInterface(r.getName());
            mapping.addClass(primary.getName());
            this.classesadded.add(r);
            this.classexporter.addClass(r);
            this.mappingsadded.add(mapping);
            this.cxexporter.addMapping(mapping);
        }
    }
    // Set activation.
    this.unit = new CxUnit(primary.getName());
    // Set resources for now, will be removed if no resources
    // during seal operation.
    this.unit.setResourcename(this.getName());
    this.cxexporter.setActivation(new ICxUnit[] { this.unit });
    // Add primary class.
    this.classesadded.add(primary);
    this.classexporter.addClass(primary);
    // Record new primary.
    this.primary = primary;
}
