public void testXpathOfMissingNode() throws Exception {
    String control = "<books>" + "  <book>" + "    <title>Kabale und Liebe</title>" + "  </book>" + "  <book>" + "    <title>Schuld und Suehne</title>" + "  </book>" + "</books>";
    String test = "<books>" + "  <book>" + "    <title>Schuld und Suehne</title>" + "  </book>" + "</books>";
    XMLUnit.setIgnoreWhitespace(true);
    try {
        Diff diff = new Diff(control, test);
        diff.overrideElementQualifier(new MultiLevelElementNameAndTextQualifier(2));
        DetailedDiff dd = new DetailedDiff(diff);
        List l = dd.getAllDifferences();
        assertEquals(3, l.size());
        // (0) number of children, (1) node not found, (2) order different
        Difference d = (Difference) l.get(1);
        assertEquals(DifferenceConstants.CHILD_NODE_NOT_FOUND_ID, d.getId());
        assertEquals("/books[1]/book[1]", d.getControlNodeDetail().getXpathLocation());
        assertNull("should be null but is " + d.getTestNodeDetail().getXpathLocation(), d.getTestNodeDetail().getXpathLocation());
        // and reverse
        diff = new Diff(test, control);
        diff.overrideElementQualifier(new MultiLevelElementNameAndTextQualifier(2));
        dd = new DetailedDiff(diff);
        l = dd.getAllDifferences();
        assertEquals(3, l.size());
        // (0) number of children, (1) order different, (2) node not found
        d = (Difference) l.get(2);
        assertEquals(DifferenceConstants.CHILD_NODE_NOT_FOUND_ID, d.getId());
        assertEquals("/books[1]/book[1]", d.getTestNodeDetail().getXpathLocation());
        assertNull(d.getControlNodeDetail().getXpathLocation());
    } finally {
        XMLUnit.setIgnoreWhitespace(false);
    }
}
