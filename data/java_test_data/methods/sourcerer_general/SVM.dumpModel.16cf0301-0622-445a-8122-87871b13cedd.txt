private List<FeaturePair> dumpModel(BufferedWriter out, Model model, int mode) {
    FeaturePair.clearFeatureSet();
    Entity[] features = model.getEntities().toArray(new Entity[0]);
    // Random shuffle the features.
    Collections.shuffle(Arrays.asList(features));
    int numPair = 0, numSim = 0, numRequire = 0, numExclude = 0;
    List<FeaturePair> pairs = new ArrayList<FeaturePair>();
    for (int i = 0; i < features.length; i++) {
        for (int j = i + 1; j < features.length; j++) {
            FeaturePair pair = new FeaturePair(features[i], features[j]);
            boolean keepPair = true;
            if (mode == MODE_TEST_BLANK) {
                // Set all pair to Non-constraint, and set all constraint-related
                // attributes to UNKNOWN
                pair.setLabel(FeaturePair.NO_CONSTRAINT);
                pair.setRequireOut(FeaturePair.UNKNOWN);
                pair.setExcludeOut(FeaturePair.UNKNOWN);
            } else if (mode == MODE_TEST_ALL) {
                // Set "No" to "Unknown" in test set
                if (pair.getRequireOut() == FeaturePair.NO) {
                    pair.setRequireOut(FeaturePair.UNKNOWN);
                }
                if (pair.getExcludeOut() == FeaturePair.NO) {
                    pair.setExcludeOut(FeaturePair.UNKNOWN);
                }
            }
            if (pair.getLabel() == FeaturePair.NO_CONSTRAINT || pair.getLabel() == FeaturePair.UNKNOWN) {
                // Skip non-constraint pairs in "train with constraints only" mode
                keepPair = (mode != MODE_TRAIN_ONLY_CON);
            }
            if (!keepPair) {
                continue;
            }
            pairs.add(pair);
            if (pair.getLabel() == FeaturePair.REQUIRE) {
                numRequire++;
            } else if (pair.getLabel() == FeaturePair.EXCLUDE) {
                numExclude++;
            }
            numPair++;
        }
    }
    // Complete the pair similarity and output them.
    for (FeaturePair p : pairs) {
        p.updateTextSimilarity();
        if (p.getTotalSim() > 0.0) {
            numSim++;
        }
        try {
            out.write(formatPair(p) + "\n");
        } catch (IOException e) {
            logger.warn("Cannot write pair.", e);
        }
    }
    logger.info("Feature Model: '" + model.getName() + "': " + modeName[mode] + ", " + features.length + " features, " + numPair + " pairs, " + numRequire + " require-pairs, " + numExclude + " exclude-pairs, " + numSim + " pairs of similar features.");
    return pairs;
}
