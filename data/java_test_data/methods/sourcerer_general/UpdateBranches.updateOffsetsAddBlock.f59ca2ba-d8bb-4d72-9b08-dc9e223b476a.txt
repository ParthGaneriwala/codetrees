public static void updateOffsetsAddBlock(ArrayList<CLInstruction> method, int size, ArrayList<CLInstruction> code, int index) {
    BranchRepresentationTable branches = new BranchRepresentationTable(method);
    int i;
    int stop = branches.size();
    BranchRepresentation br;
    method.addAll(index, code);
    int off = code.size();
    for (i = 0; i < stop; i++) {
        br = branches.get(i);
        // update indexs for removed instruction
        if (br.getTarget() >= 0)
            br.setToIndex(br.getToIndex() + off);
        else
            br.setIndex(br.getIndex() + off);
        // promote all optcodes to 4 byte target version
        br.setOptcode(getNewOptcode(br.getOptcode()));
    }
    int from, to, j;
    long target;
    // recaculate target values
    for (i = 0; i < stop; i++) {
        br = branches.get(i);
        from = br.getIndex();
        to = br.getToIndex();
        target = 0;
        // branch forward
        if (br.getIndex() <= br.getToIndex()) {
            for (j = from + 1; j < to; j++) target += method.get(j).getLength();
        } else // branch backwards
        {
            for (j = from; j >= to; j--) target -= method.get(j).getLength();
        }
        br.setTarget(target);
        method.set(from, getInstruction(br.getOptcode(), br.getTarget()));
    }
}
