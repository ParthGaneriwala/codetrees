public boolean Compilator(TabelaSimbolos tabelasimbolos) {
    // starta lookahead
    tabelasimbolos.ZeraLookahead();
    boolean retorno = true;
    // cria os objetos
    declaracaoBibliotecas bibliotecas = new declaracaoBibliotecas();
    declaracaoConstantes constantes = new declaracaoConstantes();
    Tipos tipoTipo = new Tipos();
    declaracaoStructs struct = new declaracaoStructs(tabelasimbolos);
    declaracaoVariaveis variaveis = new declaracaoVariaveis(tabelasimbolos);
    declaracaoPonteiros ponteiros = new declaracaoPonteiros(tabelasimbolos);
    declaracaoMetodos metodos = new declaracaoMetodos();
    declaracaoMetodosVoid metodosVoid = new declaracaoMetodosVoid();
    declaracaoMetodoMain metodoMain = new declaracaoMetodoMain();
    // Verifica bibliotecas
    while (tabelasimbolos.getLookahead().equals("include")) {
        retorno = bibliotecas.declaraBibliotecas(tabelasimbolos);
    }
    if (retorno == false)
        return retorno;
    // Verifica constantes
    while (tabelasimbolos.getLookahead().equals("const")) {
        retorno = constantes.declaraConstantes(tabelasimbolos);
    }
    // verifica delcaração de struct, variaveis e ponteiros que começam por typedef, struct ou é do tipo "tipos"
    while (tabelasimbolos.getLookahead().equals("typedef") || tabelasimbolos.getLookahead().equals("struct") || (Tipos.apenasCompara(tabelasimbolos) && (!tabelasimbolos.superLookahead(2).equals("(")))) {
        if (tabelasimbolos.getLookahead().equals("struct"))
            retorno = struct.declaraStructs();
        else if (tabelasimbolos.getLookahead().equals("typedef")) {
            if (tabelasimbolos.superLookahead(1).equals("struct"))
                retorno = struct.declaraStructs();
            else if (Tipos.isDentroDeTipo(tabelasimbolos, 1))
                retorno = variaveis.declaraVariaveis();
        } else if (Tipos.apenasCompara(tabelasimbolos)) {
            // se look estah dentro de tipos
            if (tabelasimbolos.superTipo(1).equals("identificador") && !tabelasimbolos.superLookahead(2).equals("("))
                retorno = variaveis.declaraVariaveis();
            else if (tabelasimbolos.superLookahead(1).equals("*") && tabelasimbolos.superTipo(2).equals("identificador") && !tabelasimbolos.superLookahead(3).equals("(") || (tabelasimbolos.superLookahead(1).equals("*") && tabelasimbolos.superLookahead(2).equals("*")))
                retorno = variaveis.declaraVariaveis();
            else
                break;
        } else
            break;
    }
    while (Tipos.apenasCompara(tabelasimbolos) || (tabelasimbolos.getLookahead().equals("void") && !tabelasimbolos.superLookahead(1).equals("main"))) {
        if (!tabelasimbolos.getLookahead().equals("void") && ((tabelasimbolos.superLookahead(1).equals("*") && tabelasimbolos.superTipo(2).equals("identificador") && tabelasimbolos.superLookahead(3).equals("(")) || (tabelasimbolos.superTipo(1).equals("identificador") && tabelasimbolos.superLookahead(2).equals("("))))
            retorno = metodos.declaraMetodos(tabelasimbolos);
        else if (tabelasimbolos.getLookahead().equals("void") && tabelasimbolos.superTipo(1).equals("identificador"))
            retorno = metodosVoid.declaracaoMetodosVoid(tabelasimbolos);
        else
            break;
    }
    retorno = metodoMain.declaracaoMetodoMain(tabelasimbolos);
    return retorno;
}
