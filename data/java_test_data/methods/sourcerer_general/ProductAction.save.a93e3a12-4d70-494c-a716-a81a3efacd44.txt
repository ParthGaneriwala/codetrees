public String save() throws Exception {
    System.out.println("Saving product...");
    if (cancel != null) {
        System.out.println("currentProduct: " + product);
        getSession().setAttribute("product", product);
        return CANCEL;
    }
    if (delete != null) {
        return delete();
    }
    boolean isNew = (product.getId() == null);
    featureProductList = (List<FeatureProduct>) getSession().getAttribute("featureProductList");
    if (product.getListFeatureProducts() == null) {
        product.setListFeatureProducts(featureProductList);
    } else {
        product.getListFeatureProducts().addAll(featureProductList);
    }
    if (file == null) {
        String path = ServletActionContext.getServletContext().getRealPath("/images");
        file = new File(path + "/403.jpg");
    }
    InputStream is = new FileInputStream(file);
    long length = file.length();
    if (length > Integer.MAX_VALUE) {
    // File is too large
    }
    byte[] bytes = new byte[(int) length];
    int offset = 0;
    int numRead = 0;
    while (offset < bytes.length && (numRead = is.read(bytes, offset, bytes.length - offset)) >= 0) {
        offset += numRead;
    }
    if (offset < bytes.length) {
        throw new IOException("Could not completely read file " + file.getName());
    }
    is.close();
    product.setImageProduct(bytes);
    if (validationPasses()) {
        // product.setImageProduct(null);
        product = productManager.save(product);
    } else {
        return ERROR;
    }
    StorageProduct sm = new StorageProduct();
    if (isNew) {
        sm.setProduct(product);
        sm.setStock(new Integer(0));
    } else {
        sm = storageProductManager.findByIdProduct(product.getId()).get(0);
    }
    sm = storageProductManager.save(sm);
    String key = (isNew) ? "product.added" : "product.updated";
    saveMessage(getText(key));
    if (!isNew) {
        return INPUT;
    } else {
        return SUCCESS;
    }
}
