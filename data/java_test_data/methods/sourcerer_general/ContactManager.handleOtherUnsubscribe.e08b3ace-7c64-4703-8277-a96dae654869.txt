private void handleOtherUnsubscribe(SmManager smManager, OnlineUser onlineUser, UserResource userResource, Presence presence) {
    JID to = presence.getTo();
    JID from = presence.getFrom();
    String username = to.getNode();
    try {
        IqRoster iqRoster = getIqRoster(username);
        IqRoster.Item item = iqRoster.getRosterItem(from);
        if (item == null) {
            return;
        }
        IqRoster.Subscription subs = item.getSubscription();
        if (subs == IqRoster.Subscription.from || subs == IqRoster.Subscription.both) {
            RosterItem rosterItem = new RosterItem();
            rosterItem.setUsername(username);
            rosterItem.setNickname(item.getName());
            // TODO check case sentity
            rosterItem.setRosterJID(item.getJid().toPrepedBareJID());
            rosterItem.setAsk(null);
            if (subs == IqRoster.Subscription.from) {
                item.setSubscription(IqRoster.Subscription.none);
                rosterItem.setSubscription(RosterItem.Subscription.none);
            } else {
                item.setSubscription(IqRoster.Subscription.to);
                rosterItem.setSubscription(RosterItem.Subscription.to);
            }
            rosterItem.setGroups(item.getGroupNames());
            updateRosterItem(rosterItem);
            if (onlineUser != null && onlineUser.getResourceCount() != 0) {
                notifyResourceRosterChanged(onlineUser, userResource, item);
                notifyAllResourceUnavailableState(smManager, onlineUser, userResource, from);
            }
        }
    } catch (Exception e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    }
}
