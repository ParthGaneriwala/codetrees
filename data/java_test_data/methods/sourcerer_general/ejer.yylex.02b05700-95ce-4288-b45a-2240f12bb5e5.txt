public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;
    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;
    char[] zzCMapL = ZZ_CMAP;
    int[] zzTransL = ZZ_TRANS;
    int[] zzRowMapL = ZZ_ROWMAP;
    int[] zzAttrL = ZZ_ATTRIBUTE;
    while (true) {
        zzMarkedPosL = zzMarkedPos;
        zzAction = -1;
        zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
        zzState = ZZ_LEXSTATE[zzLexicalState];
        zzForAction: {
            while (true) {
                if (zzCurrentPosL < zzEndReadL) {
                    zzInput = zzBufferL[zzCurrentPosL++];
                } else if (zzAtEOF) {
                    zzInput = YYEOF;
                    break zzForAction;
                } else {
                    // store back cached positions
                    zzCurrentPos = zzCurrentPosL;
                    zzMarkedPos = zzMarkedPosL;
                    boolean eof = zzRefill();
                    // get translated positions and possibly new buffer
                    zzCurrentPosL = zzCurrentPos;
                    zzMarkedPosL = zzMarkedPos;
                    zzBufferL = zzBuffer;
                    zzEndReadL = zzEndRead;
                    if (eof) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        zzInput = zzBufferL[zzCurrentPosL++];
                    }
                }
                int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
                if (zzNext == -1) {
                    break zzForAction;
                }
                zzState = zzNext;
                int zzAttributes = zzAttrL[zzState];
                if ((zzAttributes & 1) == 1) {
                    zzAction = zzState;
                    zzMarkedPosL = zzCurrentPosL;
                    if ((zzAttributes & 8) == 8) {
                        break zzForAction;
                    }
                }
            }
        }
        // store back cached position
        zzMarkedPos = zzMarkedPosL;
        switch(zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
            case 8:
                {
                    // vista.setArea_analisis("\t Exponencial: " + yytext() + "\n");
                    System.out.println("\texponencial: " + yytext());
                }
            case 9:
                break;
            case 5:
                {
                    // vista.setArea_analisis("\tNumero entero: " + yytext() + "\n");
                    System.out.println("\tNumero entero: " + yytext());
                }
            case 10:
                break;
            case 4:
                {
                    // vista.setArea_analisis("\tCaracter especial: " + yytext() + "\n");
                    System.out.println("\tCaracter especial: " + yytext());
                }
            case 11:
                break;
            case 3:
                {
                    // vista.setArea_analisis("\tPalabra: "+yytext()+"\n");
                    System.out.println("\tPalabra: " + yytext());
                }
            case 12:
                break;
            case 2:
                {
                    // System.out.println("\t vacioooo no hay nada "+ yytext());
                    break;
                }
            case 13:
                break;
            case 6:
                {
                    // vista.setArea_analisis("\tPalabra reservada: "+yytext()+"\n");
                    System.out.println("\tPalabra reservada:" + yytext());
                }
            case 14:
                break;
            case 1:
                {
                    // vista.setArea_analisis("\n"+yytext());
                    System.out.print(yytext());
                }
            case 15:
                break;
            case 7:
                {
                    System.out.println("\tNumero decimal: " + yytext());
                }
            case 16:
                break;
            default:
                if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                    zzAtEOF = true;
                    return YYEOF;
                } else {
                    zzScanError(ZZ_NO_MATCH);
                }
        }
    }
}
