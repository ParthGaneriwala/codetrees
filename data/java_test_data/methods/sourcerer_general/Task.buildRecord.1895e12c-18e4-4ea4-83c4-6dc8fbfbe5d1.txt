private void buildRecord(ResultSet rs) throws SQLException {
    id = rs.getInt("task_id");
    entered = rs.getTimestamp("entered");
    enteredBy = rs.getInt("enteredby");
    priority = rs.getInt("priority");
    description = rs.getString("description");
    dueDate = rs.getTimestamp("duedate");
    notes = rs.getString("notes");
    sharing = rs.getInt("sharing");
    complete = rs.getBoolean("complete");
    estimatedLOE = rs.getDouble("estimatedloe");
    estimatedLOEType = DatabaseUtils.getInt(rs, "estimatedloetype");
    owner = DatabaseUtils.getInt(rs, "owner");
    completeDate = rs.getTimestamp("completedate");
    modified = rs.getTimestamp("modified");
    modifiedBy = rs.getInt("modifiedby");
    categoryId = DatabaseUtils.getInt(rs, "category_id");
    ratingCount = rs.getInt("rating_count");
    ratingValue = rs.getInt("rating_value");
    ratingAverage = rs.getDouble("rating_avg");
    functionalArea = DatabaseUtils.getInt(rs, "functional_area");
    status = DatabaseUtils.getInt(rs, "status");
    businessValue = DatabaseUtils.getInt(rs, "business_value");
    complexity = DatabaseUtils.getInt(rs, "complexity");
    targetRelease = DatabaseUtils.getInt(rs, "target_release");
    targetSprint = DatabaseUtils.getInt(rs, "target_sprint");
    loeRemaining = DatabaseUtils.getInt(rs, "loe_remaining");
    assignedPriority = DatabaseUtils.getInt(rs, "assigned_priority");
    linkModuleId = DatabaseUtils.getInt(rs, "link_module_id");
    linkItemId = DatabaseUtils.getInt(rs, "link_item_id");
    // Other items
    if (entered != null) {
        float ageCheck = ((System.currentTimeMillis() - entered.getTime()) / 86400000);
        age = java.lang.Math.round(ageCheck);
    }
}
