@Override
public void run() {
    // now do it infinitely
    server.printer.print_info("Starting listening to alive messages");
    while (true) {
        byte[] alv = new byte[100000];
        DatagramPacket aliveMsg = new DatagramPacket(alv, alv.length);
        server.printer.print_info("UDP:Waiting for clients alive messages...");
        try {
            socket.receive(aliveMsg);
            int dataLen = aliveMsg.getLength();
            byte[] alvFromatted = new byte[dataLen];
            System.arraycopy(alv, 0, alvFromatted, 0, dataLen);
            String aliveMessage = new String(alvFromatted);
            ClientServerProtocol prot = new ClientServerProtocol(msgType.SERVER);
            String[] aliveMessageArr = prot.parseCommand(aliveMessage);
            if (aliveMessageArr == null) {
                server.printer.print_error(prot.result + ". Bad alive message");
                break;
            }
            String clientName = aliveMessageArr[1];
            server.printer.print_info("\n----------------------------\nUDP recieved From Client: " + clientName + ", " + aliveMsg.getAddress().toString() + " The message (len: " + dataLen + ") is:\n----------------------------\n" + aliveMessage);
            // set the client alive
            if (!server.clients.setAlive(clientName)) {
                server.printer.print_info("Client with name: " + clientName + " doesn't exists, checking...");
                addAliveClient(aliveMessageArr, aliveMsg);
                continue;
            }
            Timer clientTimer = this.clientTimers.get(clientName);
            clientTimer.reset();
            server.printer.print_info("Checking the players...");
            checkTimers();
        } catch (IOException e) {
            server.printer.print_error(e.getMessage());
        }
    }
}
