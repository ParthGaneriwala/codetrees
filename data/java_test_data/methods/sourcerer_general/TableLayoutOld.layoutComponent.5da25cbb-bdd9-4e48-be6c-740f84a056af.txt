private void layoutComponent(Component c, int componentID) {
    // Absolute position if in absolute positioning
    if (absoluteComponents.containsKey(c)) {
        Point p = (Point) absoluteComponents.get(c);
        c.setBounds(p.x, p.y, c.getPreferredSize().width, c.getPreferredSize().height);
        return;
    }
    // Determine container height
    int containerHeight = 0;
    for (int i = 0; i < heights.length; i++) {
        containerHeight += heights[i];
    }
    // Determine x, y position on grid
    int x = 0;
    int y = 0;
    loop: for (int row = 0; row < layout.length; row++) {
        for (int col = 0; col < layout[0].length; col++) {
            if (layout[row][col] == componentID) {
                x += col;
                y += row;
                break loop;
            }
        }
    }
    // Determine width and height
    int width = 0;
    int height = 0;
    int colSpan = 1;
    if (colSpans.get(c) != null) {
        colSpan = ((Integer) colSpans.get(c)).intValue();
    }
    int rowSpan = 1;
    if (rowSpans.get(c) != null) {
        rowSpan = ((Integer) rowSpans.get(c)).intValue();
    }
    for (int i = 0; i < colSpan; i++) {
        width += widths[x + i];
    }
    for (int i = 0; i < rowSpan; i++) {
        height += heights[y + i];
    }
    // Set X position
    int xOffset = 0;
    xOffset = c.getParent().getInsets().left;
    for (int i = 0; i < x; i++) {
        xOffset += widths[i];
    }
    x = xOffset;
    // Set Y Position
    int yOffset = 0;
    yOffset = c.getParent().getInsets().top;
    for (int i = 0; i < y; i++) {
        yOffset += heights[i];
    }
    y = yOffset;
    // Set bounds
    bounds.put(c, new Rectangle2D.Float(x, y, width, height));
    // System.out.println("Component: " + componentID + ", " + x + ", " + y);
    // If Default Fill is turned off then set it to the preferred size if smaller than column
    int leftMargin = defaultLeftMargin;
    int rightMargin = defaultRightMargin;
    int topMargin = defaultTopMargin;
    int bottomMargin = defaultBottomMargin;
    if (topPadding.containsKey(c)) {
        topMargin = ((Integer) topPadding.get(c)).intValue();
    } else if (bottomPadding.containsKey(c)) {
        bottomMargin = ((Integer) bottomPadding.get(c)).intValue();
    } else if (leftPadding.containsKey(c)) {
        leftMargin = ((Integer) leftPadding.get(c)).intValue();
    } else if (rightPadding.containsKey(c)) {
        rightMargin = ((Integer) rightPadding.get(c)).intValue();
    }
    int horizontalAlignment = defaultHorizontalAlignment;
    if (horizontalAlignments.get(c) != null) {
        horizontalAlignment = ((Integer) horizontalAlignments.get(c)).intValue();
    }
    int verticalAlignment = defaultVerticalAlignment;
    if (verticalAlignments.get(c) != null) {
        verticalAlignment = ((Integer) verticalAlignments.get(c)).intValue();
    }
    boolean fill = defaultFill;
    if (fills.get(c) != null) {
        fill = ((Boolean) fills.get(c)).booleanValue();
    }
    if (!fill) {
        Dimension d = c.getPreferredSize();
        if (d.width < width + leftMargin + rightMargin) {
            if (horizontalAlignment == ALIGN_RIGHT) {
                x += width - d.width - rightMargin;
            } else if ((horizontalAlignment == ALIGN_CENTER) || (horizontalAlignment == ALIGN_MIDDLE)) {
                int componentWidth = d.width;
                if (c instanceof JComponent) {
                    componentWidth += ((JComponent) c).getInsets().left;
                }
                x += (width - componentWidth) / 2;
            }
            width = d.width + leftMargin + rightMargin;
        }
        if (d.height < height + topMargin + bottomMargin) {
            if (verticalAlignment == ALIGN_BOTTOM) {
                y += height - d.height - bottomMargin;
            } else if ((verticalAlignment == ALIGN_MIDDLE) || (verticalAlignment == ALIGN_CENTER)) {
                y += (height - d.height) / 2;
            }
            height = d.height + topMargin + bottomMargin;
        }
    }
    // Adjust for internal margins
    x += leftMargin;
    y += topMargin;
    width -= leftMargin + rightMargin;
    height -= topMargin + bottomMargin;
    // System.out.println("Bounds: " + x + ", " + y + ", " + width + ", " + height + ", " + componentID);
    if (defaultVerticalContainerAlignment == ALIGN_BOTTOM) {
        y += c.getParent().getSize().height - c.getParent().getInsets().bottom;
        y -= containerHeight;
    } else if ((defaultVerticalContainerAlignment == ALIGN_MIDDLE) || (defaultVerticalContainerAlignment == ALIGN_CENTER)) {
        y += (c.getParent().getSize().height - c.getParent().getInsets().bottom) / 2;
        y -= containerHeight / 2;
    }
    c.setBounds(x, y, width, height);
    if (x + width + rightMargin + 1 > maxWide)
        maxWide = x + width + rightMargin + 1;
    if (y + height + bottomMargin + 1 > maxTall)
        maxTall = y + height + bottomMargin + 1;
}
