public void displayNextToScreen(int n) {
    /**
     * up? false is down
     */
    isToUp = false;
    /**
     * Get current line's offset
     */
    if (mCurrentLine == mMyLines.size()) {
        mCurrentOffset = ((TxtLine) mMyLines.get(0)).offset;
    }
    if (mCurrentLine < mMyLines.size()) {
        mCurrentOffset = ((TxtLine) mMyLines.get(mCurrentLine)).offset;
    }
    /**
     * is the first of document?
     */
    mBeforeOfDoc = (((TxtLine) mMyLines.get(0)).offset - ((TxtLine) mMyLines.get(0)).lineLength) == 0;
    /**
     * is the last document
     */
    if (mFileLength == mMyLines.get(mMyLines.size() - 1).offset) {
        mEndOfDoc = true;
    } else {
        mEndOfDoc = false;
    }
    int tempLines = mCurrentLine;
    /**
     * move down
     */
    mCurrentLine = mCurrentLine + n;
    Log.d("displayNextToScreen", ":::::" + (mCurrentLine + mLinesOfOneScreen >= mMyLines.size()));
    Log.d("displayNextToScreen", ":::::=====" + mEndOfDoc);
    /**
     * If to last line, and is last document, don't move lines
     */
    if (mCurrentLine + mLinesOfOneScreen >= mMyLines.size() && mEndOfDoc) {
        mCurrentLine = tempLines;
    }
    /**
     * If the data less than the screen when display to screen ,load the buffer
     */
    if (mCurrentLine + mLinesOfOneScreen >= mMyLines.size() && !mEndOfDoc) {
        readNextBuffer();
        analysisDisplayBuffer();
        mBeforeOfDoc = false;
    }
    if (mCurrentLine == 0 && mMyLines.size() <= mLinesOfOneScreen && mBeforeOfDoc) {
        /**
         * Get the last line data length
         */
        int lastDataLength = mMyLines.get(mMyLines.size() - 1).beforeLineLength;
        mScreenData = new byte[lastDataLength];
        System.arraycopy(mDisplayBuffer, 0, mScreenData, 0, lastDataLength);
        try {
            mTextView.setText(new String(mScreenData, this.encoding));
        } catch (UnsupportedEncodingException e) {
        }
        /**
         * computer the percent
         */
        double start = (mMyLines.get(mCurrentLine).offset + mScreenData.length);
        double total = mFileLength;
        mPercent = ((int) ((start / total) * 100));
        System.gc();
        return;
    }
    int temp = mCurrentLine;
    if (temp + mLinesOfOneScreen <= mMyLines.size()) {
        int lastLine = temp + mLinesOfOneScreen;
        mCurrentOffset = mMyLines.get(temp).offset;
        /**
         * Get the data length before this current line
         */
        int beforeDataLength = mMyLines.get(temp).beforeLineLength;
        int lastDataLength = mMyLines.get(lastLine).beforeLineLength;
        int len = 0;
        if (mCurrentLine - n == 0) {
            len = lastDataLength;
            mScreenData = new byte[len];
            System.arraycopy(mDisplayBuffer, 0, mScreenData, 0, len);
        } else {
            len = lastDataLength - beforeDataLength;
            mScreenData = new byte[len];
            System.arraycopy(mDisplayBuffer, beforeDataLength, mScreenData, 0, len);
        }
        try {
            mTextView.setText(new String(mScreenData, this.encoding));
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        /**
         * computer the percent
         */
        double start = (mMyLines.get(mCurrentLine).offset + mScreenData.length);
        double total = mFileLength;
        mPercent = ((int) ((start / total) * 100));
        System.gc();
    }
}
