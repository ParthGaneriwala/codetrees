public final void list(AST label) throws RecognitionException, TokenStreamException {
    returnAST = null;
    ASTPair currentAST = new ASTPair();
    AST list_AST = null;
    AST i_AST = null;
    AST n_AST = null;
    switch(LA(1)) {
        case QNAME:
        case KW_THIS:
        case STRING:
        case LBRACK:
        case LCURLY:
        case LPAREN:
        case NUMBER:
        case URIREF:
        case UVAR:
            {
                item();
                i_AST = (AST) returnAST;
                astFactory.addASTChild(currentAST, returnAST);
                if (inputState.guessing == 0) {
                    list_AST = (AST) currentAST.root;
                    if (label == null)
                        label = (AST) astFactory.make((new ASTArray(1)).add(astFactory.create(ANON, genAnonId())));
                    list_AST = label;
                    currentAST.root = list_AST;
                    currentAST.child = list_AST != null && list_AST.getFirstChild() != null ? list_AST.getFirstChild() : list_AST;
                    currentAST.advanceChildToEnd();
                }
                list(null);
                n_AST = (AST) returnAST;
                astFactory.addASTChild(currentAST, returnAST);
                if (inputState.guessing == 0) {
                    if (emitListTypeQuad)
                        emitQuad(label, (AST) astFactory.make((new ASTArray(1)).add(astFactory.create(KW_A, "list"))), (AST) astFactory.make((new ASTArray(1)).add(astFactory.create(TK_LIST, "List"))));
                    emitQuad(label, (AST) astFactory.make((new ASTArray(1)).add(astFactory.create(TK_LIST_FIRST, "first"))), i_AST);
                    emitQuad(label, (AST) astFactory.make((new ASTArray(1)).add(astFactory.create(TK_LIST_REST, "rest"))), n_AST);
                }
                list_AST = (AST) currentAST.root;
                break;
            }
        case RPAREN:
            {
                if (inputState.guessing == 0) {
                    list_AST = (AST) currentAST.root;
                    list_AST = (AST) astFactory.make((new ASTArray(1)).add(astFactory.create(TK_LIST_NIL, "nil")));
                    currentAST.root = list_AST;
                    currentAST.child = list_AST != null && list_AST.getFirstChild() != null ? list_AST.getFirstChild() : list_AST;
                    currentAST.advanceChildToEnd();
                }
                list_AST = (AST) currentAST.root;
                break;
            }
        default:
            {
                throw new NoViableAltException(LT(1), getFilename());
            }
    }
    returnAST = list_AST;
}
