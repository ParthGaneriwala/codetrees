public void saveDownloads() {
    System.out.println("Saving download list...");
    Vector myDownloads = (Vector) downloadList.clone();
    File downloadListFile = new File("downloads.lst");
    File downloadListFileTmp = new File("downloads.lst.tmp");
    int numDownloads = 0;
    ByteBuffer buffer = ByteBuffer.allocate(5 + (myDownloads.size() * 296));
    buffer.put(convert.intToByte(0x01));
    buffer.putInt(numDownloads);
    for (int i = 0; i < myDownloads.size(); i++) {
        Download download = (Download) myDownloads.get(i);
        if (!download.isComplete()) {
            numDownloads++;
            int nameLen = download.getFileName().getBytes().length;
            buffer.put(download.getHash());
            buffer.putInt(nameLen);
            buffer.put(download.getFileName().getBytes());
            buffer.putLong(download.getFileSize());
        }
    }
    int bufferlimit = buffer.position();
    buffer.position(1);
    buffer.putInt(numDownloads);
    buffer.limit(bufferlimit);
    buffer.rewind();
    FileOutputStream outStream = null;
    FileChannel outChannel = null;
    try {
        downloadListFileTmp.createNewFile();
        outStream = new FileOutputStream(downloadListFileTmp);
        outChannel = outStream.getChannel();
        outChannel.write(buffer);
        outChannel.close();
        outStream.close();
        deleteFile(downloadListFile);
        downloadListFileTmp.renameTo(downloadListFile);
        System.out.println("Saved " + numDownloads + " downloads.");
    } catch (FileNotFoundException e) {
    } catch (IOException e) {
        try {
            outChannel.close();
            outStream.close();
        } catch (IOException e2) {
        }
        deleteFile(downloadListFile);
        downloadListFileTmp.renameTo(downloadListFile);
        System.out.println("Error writing download list: " + e.getMessage());
    }
}
