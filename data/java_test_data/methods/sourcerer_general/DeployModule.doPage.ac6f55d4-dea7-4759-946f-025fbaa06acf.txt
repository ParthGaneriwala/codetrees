@SuppressWarnings("unchecked")
public String doPage(String page, HttpServletRequest request, HttpServletResponse response) {
    List<NodeDescriptor> nodes = new ArrayList<NodeDescriptor>();
    String[] nodesParam = request.getParameterValues("node");
    if (nodesParam != null) {
        for (String idx : nodesParam) {
            nodes.add(ClusterManager.getInstance().getNodes().get(Integer.parseInt(idx)));
        }
    }
    request.setAttribute("nodes", nodes);
    if (ServletFileUpload.isMultipartContent(request)) {
        // Create a factory for disk-based file items
        FileItemFactory factory = new DiskFileItemFactory();
        // Create a new file upload handler
        ServletFileUpload upload = new ServletFileUpload(factory);
        String name = null;
        byte[] content = null;
        String path = null;
        // Parse the request
        try {
            List<FileItem> items = upload.parseRequest(request);
            String message = "";
            for (FileItem item : items) {
                String fieldName = item.getFieldName();
                if (fieldName.equals("node")) {
                    NodeDescriptor node = ClusterManager.getInstance().getNodes().get(Integer.parseInt(item.getString()));
                    if (!node.isReachable())
                        message += node + " is unreachable<br/>";
                    if (getModuleNode(node) != null)
                        nodes.add(node);
                    else
                        message += node + " is not registered as deployable<br/>";
                }
                if (fieldName.equals("path"))
                    path = item.getString();
                if (fieldName.equals("file")) {
                    name = item.getName();
                    content = IOUtil.readAllBinary(item.getInputStream());
                }
            }
            List<Pair<NodeDescriptor, Throwable>> errors = deployFiles(nodes, path, name, content);
            if (errors != null && errors.size() > 0) {
                request.setAttribute("deployCorrect", false);
                request.setAttribute("deployErrors", errors);
            } else
                request.setAttribute("deployCorrect", true);
            request.setAttribute("message", message);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
    return "deploy.vm";
}
