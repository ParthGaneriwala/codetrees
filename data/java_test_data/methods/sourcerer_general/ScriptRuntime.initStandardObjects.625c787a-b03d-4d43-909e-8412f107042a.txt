public static ScriptableObject initStandardObjects(Context cx, ScriptableObject scope, boolean sealed) {
    if (scope == null) {
        scope = new NativeObject();
    }
    scope.associateValue(LIBRARY_SCOPE_KEY, scope);
    (new ClassCache()).associate(scope);
    BaseFunction.init(scope, sealed);
    NativeObject.init(scope, sealed);
    Scriptable objectProto = ScriptableObject.getObjectPrototype(scope);
    // Function.prototype.__proto__ should be Object.prototype
    Scriptable functionProto = ScriptableObject.getFunctionPrototype(scope);
    functionProto.setPrototype(objectProto);
    // Set the prototype of the object passed in if need be
    if (scope.getPrototype() == null)
        scope.setPrototype(objectProto);
    // must precede NativeGlobal since it's needed therein
    NativeError.init(scope, sealed);
    NativeGlobal.init(cx, scope, sealed);
    NativeArray.init(scope, sealed);
    if (cx.getOptimizationLevel() > 0) {
        // When optimizing, attempt to fulfill all requests for new Array(N)
        // with a higher threshold before switching to a sparse
        // representation
        NativeArray.setMaximumInitialCapacity(200000);
    }
    NativeString.init(scope, sealed);
    NativeBoolean.init(scope, sealed);
    NativeNumber.init(scope, sealed);
    NativeDate.init(scope, sealed);
    NativeMath.init(scope, sealed);
    NativeJSON.init(scope, sealed);
    NativeWith.init(scope, sealed);
    NativeCall.init(scope, sealed);
    NativeScript.init(scope, sealed);
    // Also initializes NativeGenerator
    NativeIterator.init(scope, sealed);
    boolean withXml = cx.hasFeature(Context.FEATURE_E4X) && cx.getE4xImplementationFactory() != null;
    for (int i = 0; i != lazilyNames.length; i += 2) {
        String topProperty = lazilyNames[i];
        String className = lazilyNames[i + 1];
        if (!withXml && className.equals("(xml)")) {
            continue;
        } else if (withXml && className.equals("(xml)")) {
            className = cx.getE4xImplementationFactory().getImplementationClassName();
        }
        new LazilyLoadedCtor(scope, topProperty, className, sealed, true);
    }
    return scope;
}
