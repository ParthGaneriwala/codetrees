State offerService() throws Exception {
    long lastHeartbeat = 0;
    while (running && !shuttingDown) {
        try {
            long now = System.currentTimeMillis();
            long waitTime = heartbeatInterval - (now - lastHeartbeat);
            if (waitTime > 0) {
                // sleeps for the wait time, wakes up if a task is finished.
                synchronized (finishedCount) {
                    if (finishedCount[0] == 0) {
                        finishedCount.wait(waitTime);
                    }
                    finishedCount[0] = 0;
                }
            }
            // 2. Get the system directory & filesystem
            if (justStarted) {
                String jobTrackerBV = jobClient.getBuildVersion();
                if (!VersionInfo.getBuildVersion().equals(jobTrackerBV)) {
                    String msg = "Shutting down. Incompatible buildVersion." + "\nJobTracker's: " + jobTrackerBV + "\nTaskTracker's: " + VersionInfo.getBuildVersion();
                    LOG.error(msg);
                    try {
                        jobClient.reportTaskTrackerError(taskTrackerName, null, msg);
                    } catch (Exception e) {
                        LOG.info("Problem reporting to jobtracker: " + e);
                    }
                    return State.DENIED;
                }
                String dir = jobClient.getSystemDir();
                if (dir == null) {
                    throw new IOException("Failed to get system directory");
                }
                systemDirectory = new Path(dir);
                systemFS = systemDirectory.getFileSystem(fConf);
            }
            // Send the heartbeat and process the jobtracker's directives
            HeartbeatResponse heartbeatResponse = transmitHeartBeat(now);
            // Note the time when the heartbeat returned, use this to decide when to send the
            // next heartbeat
            lastHeartbeat = System.currentTimeMillis();
            // Check if the map-event list needs purging
            if (heartbeatResponse.getLastKnownIndex() != null) {
                synchronized (this) {
                    // purge the local map events list
                    for (Map.Entry<JobID, Integer> entry : heartbeatResponse.getLastKnownIndex().entrySet()) {
                        RunningJob rjob;
                        synchronized (runningJobs) {
                            rjob = runningJobs.get(entry.getKey());
                            if (rjob != null) {
                                synchronized (rjob) {
                                    FetchStatus f = rjob.getFetchStatus();
                                    if (f != null) {
                                        f.purgeMapEvents(entry.getValue());
                                    }
                                }
                            }
                        }
                    }
                    // Mark the reducers in shuffle for rollback
                    synchronized (shouldReset) {
                        for (Map.Entry<TaskAttemptID, TaskInProgress> entry : runningTasks.entrySet()) {
                            if (entry.getValue().getStatus().getPhase() == Phase.SHUFFLE) {
                                this.shouldReset.add(entry.getKey());
                            }
                        }
                    }
                }
            }
            TaskTrackerAction[] actions = heartbeatResponse.getActions();
            if (LOG.isDebugEnabled()) {
                LOG.debug("Got heartbeatResponse from JobTracker with responseId: " + heartbeatResponse.getResponseId() + " and " + ((actions != null) ? actions.length : 0) + " actions");
            }
            if (reinitTaskTracker(actions)) {
                return State.STALE;
            }
            // resetting heartbeat interval from the response.
            heartbeatInterval = heartbeatResponse.getHeartbeatInterval();
            justStarted = false;
            if (actions != null) {
                for (TaskTrackerAction action : actions) {
                    if (action instanceof LaunchTaskAction) {
                        addToTaskQueue((LaunchTaskAction) action);
                    } else if (action instanceof CommitTaskAction) {
                        CommitTaskAction commitAction = (CommitTaskAction) action;
                        if (!commitResponses.contains(commitAction.getTaskID())) {
                            LOG.info("Received commit task action for " + commitAction.getTaskID());
                            commitResponses.add(commitAction.getTaskID());
                        }
                    } else {
                        tasksToCleanup.put(action);
                    }
                }
            }
            markUnresponsiveTasks();
            killOverflowingTasks();
            // we've cleaned up, resume normal operation
            if (!acceptNewTasks && isIdle()) {
                acceptNewTasks = true;
            }
        } catch (InterruptedException ie) {
            LOG.info("Interrupted. Closing down.");
            return State.INTERRUPTED;
        } catch (DiskErrorException de) {
            String msg = "Exiting task tracker for disk error:\n" + StringUtils.stringifyException(de);
            LOG.error(msg);
            synchronized (this) {
                jobClient.reportTaskTrackerError(taskTrackerName, "DiskErrorException", msg);
            }
            return State.STALE;
        } catch (RemoteException re) {
            String reClass = re.getClassName();
            if (DisallowedTaskTrackerException.class.getName().equals(reClass)) {
                LOG.info("Tasktracker disallowed by JobTracker.");
                return State.DENIED;
            }
        } catch (Exception except) {
            String msg = "Caught exception: " + StringUtils.stringifyException(except);
            LOG.error(msg);
        }
    }
    return State.NORMAL;
}
