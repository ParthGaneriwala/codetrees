private HTMLTag createJpgTracks(List<Track> inTracks) throws IOException {
    Div div = new Div();
    String title = "JPEG+Map Example of Tracks";
    Table table = div.addTable().setStyle("border-collapse: collapse;");
    Th cell = table.addRow().addHeaderCell(title).setAlign(Align.CENTER).br();
    for (Track track : inTracks) {
        if (track.hasGenesOnStrand(Strand.FORWARD)) {
            String safeTitle = (track.getName() + "_f").replaceAll("\\s+", "_");
            File imageFile = new File(sOutputDir, safeTitle + ".jpg");
            FileOutputStream fileStream = new FileOutputStream(imageFile);
            track.writeImageAsJpeg(fileStream, Strand.FORWARD);
            fileStream.close();
            String imageMapName = safeTitle + "_map";
            cell.addImage(imageFile.getName()).setUseMap("#" + imageMapName).setBorder(0);
            cell.br();
            div.addSubtag(track.getImageMap(Strand.FORWARD).setName(imageMapName).setId(imageMapName));
        }
    }
    File xAxisImageFile = new File(sOutputDir, "xAxis.jpg");
    FileOutputStream fileStream = new FileOutputStream(xAxisImageFile);
    inTracks.get(0).writeXAxisImageAsJpeg(fileStream);
    fileStream.close();
    cell.addImage(xAxisImageFile.getName()).setBorder(0);
    cell.br();
    for (Track track : inTracks) {
        if (track.hasGenesOnStrand(Strand.REVERSE)) {
            String safeTitle = (track.getName() + "_r").replaceAll("\\s+", "_");
            File imageFile = new File(sOutputDir, safeTitle + ".jpg");
            fileStream = new FileOutputStream(imageFile);
            track.writeImageAsJpeg(fileStream, Strand.REVERSE);
            fileStream.close();
            String imageMapName = safeTitle + "_map";
            cell.addImage(imageFile.getName()).setUseMap("#" + imageMapName).setBorder(0);
            cell.br();
            div.addSubtag(track.getImageMap(Strand.REVERSE).setName(imageMapName).setId(imageMapName));
        }
    }
    return div;
}
