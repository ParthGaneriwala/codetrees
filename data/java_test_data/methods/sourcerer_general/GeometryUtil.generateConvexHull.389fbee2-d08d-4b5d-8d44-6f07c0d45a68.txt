public static Polygon generateConvexHull(int[] points) {
    if (points.length < 6) {
        throw new IllegalArgumentException("unable to generate convex hull for points less than 3");
    }
    if (points.length % 2 != 0) {
        throw new IllegalArgumentException("number of coordinates should be even passed[" + points.length + "]");
    }
    Stack<Point> s = new Stack<Point>();
    int maxY = Integer.MIN_VALUE;
    int mi = -1;
    for (int i = 0; i < points.length - 1; i += 2) {
        int y = points[i + 1];
        if (y > maxY) {
            maxY = y;
            mi = i;
        }
    }
    // make (points[0] , points[1]) the 1st point
    int temp = points[0];
    points[0] = points[mi];
    points[mi] = temp;
    temp = points[1];
    points[1] = points[mi + 1];
    points[mi + 1] = temp;
    // order the left points with respect of polar degrees against 1st point
    for (int i = 2; i < points.length - 2; i += 2) {
        for (int j = i + 2; j < points.length - 1; j += 2) {
            int nxi = points[i] - points[0];
            int nyi = points[1] - points[i + 1];
            int nxj = points[j] - points[0];
            int nyj = points[1] - points[j + 1];
            int xp = nxi * nyj - nxj * nyi;
            if (xp < 0 || (xp == 0 && points[i] < points[j])) {
                temp = points[i];
                points[i] = points[j];
                points[j] = temp;
                temp = points[i + 1];
                points[i + 1] = points[j + 1];
                points[j + 1] = temp;
            }
        }
    }
    s.push(new Point(points[0], points[1]));
    s.push(new Point(points[2], points[3]));
    s.push(new Point(points[4], points[5]));
    // for each point in the collection
    for (int i = 6; i < points.length - 1; i += 2) {
        Point cp = new Point(points[i], points[i + 1]);
        int f = -1;
        do {
            Point tp = s.pop();
            Point tp2 = s.pop();
            s.push(tp2);
            s.push(tp);
            int x1 = tp.x - tp2.x;
            int y1 = tp2.y - tp.y;
            int x2 = cp.x - tp2.x;
            int y2 = tp2.y - cp.y;
            f = x1 * y2 - x2 * y1;
            if (f <= 0) {
                Point p = s.pop();
            }
        } while (f <= 0);
        s.push(cp);
    }
    int[] result = new int[s.size() * 2];
    int index = result.length - 1;
    while (!s.isEmpty()) {
        Point p = s.pop();
        result[index--] = p.y;
        result[index--] = p.x;
    }
    return new Polygon(result);
}
