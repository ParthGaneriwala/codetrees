private void checkAndAdministerBattles() {
    // Check and administer all battles
    Random r = new Random();
    for (Vector<Cell> v : cells) {
        for (Cell cell : v) {
            Collection<Individual> collection = cell.getIndividuals();
            Hashtable<Colony, List<Individual>> table = new Hashtable<Colony, List<Individual>>();
            for (Individual i : collection) {
                Colony key = i.getColony();
                if (table.containsKey(key))
                    table.get(key).add(i);
                else {
                    LinkedList<Individual> list = new LinkedList<Individual>();
                    list.add(i);
                    table.put(key, list);
                }
            }
            if (table.size() > 1) {
                // At least two individuals from different
                // colonies are in this cell
                // so we are now looking
                // for the two biggest.
                List<Individual> biggestIndividuals = new LinkedList<Individual>();
                Collection<List<Individual>> collec = table.values();
                for (List<Individual> l : collec) {
                    biggestIndividuals.add(findBiggestIndividual(l));
                }
                // We have now a list of the biggest
                // individual of each colony
                // Let's find the biggest of all and then
                // remove it from the list
                // to discover the next biggest.
                Individual first = findBiggestIndividual(biggestIndividuals);
                biggestIndividuals.remove(first);
                Individual second = findBiggestIndividual(biggestIndividuals);
                // than the second
                if (first.getSize() == second.getSize()) {
                    if (r.nextInt(1) == 0) {
                        cell.addCellContent(new Present(first.getStock()));
                        individuals.remove(first);
                        cell.removeCellContent(first);
                    } else {
                        cell.addCellContent(new Present(second.getStock()));
                        individuals.remove(second);
                        cell.removeCellContent(second);
                    }
                } else {
                    // If the first individual is the
                    // winner
                    cell.addCellContent(new Present(second.getStock()));
                    individuals.remove(second);
                    cell.removeCellContent(second);
                }
            }
        }
    }
}
