// ////////////////////////////// actions /////////////////////////////////
public void changeSampleCount(int newSampleCount, boolean keepOldSamples) {
    int oldSampleCount = getSampleCount();
    // sampleCount
    if (oldSampleCount >= newSampleCount) {
        setSampleCountImpl(newSampleCount);
        return;
    }
    // shortcut for one or 2 channels
    if (channelCount == 1 || channelCount == 2) {
        float[] ch = getChannel(0);
        if (ch.length < newSampleCount) {
            float[] newCh = new float[newSampleCount];
            if (keepOldSamples && oldSampleCount > 0) {
                // copy old samples
                System.arraycopy(ch, 0, newCh, 0, oldSampleCount);
            }
            channels[0] = newCh;
        } else if (keepOldSamples) {
            // silence out excess samples (according to the specification)
            for (int i = oldSampleCount; i < newSampleCount; i++) {
                ch[i] = 0.0f;
            }
        }
        if (channelCount == 2) {
            ch = getChannel(1);
            if (ch.length < newSampleCount) {
                float[] newCh = new float[newSampleCount];
                if (keepOldSamples && oldSampleCount > 0) {
                    // copy old samples
                    System.arraycopy(ch, 0, newCh, 0, oldSampleCount);
                }
                channels[1] = newCh;
            } else if (keepOldSamples) {
                // specification)
                for (int i = oldSampleCount; i < newSampleCount; i++) {
                    ch[i] = 0.0f;
                }
            }
        }
        setSampleCountImpl(newSampleCount);
        return;
    }
    Object[] oldChannels = null;
    if (keepOldSamples) {
        oldChannels = getAllChannels();
    }
    init(getChannelCount(), newSampleCount, getSampleRate());
    if (keepOldSamples) {
        // copy old channels and eventually silence out new samples
        int copyCount = newSampleCount < oldSampleCount ? newSampleCount : oldSampleCount;
        for (int ch = 0; ch < this.channelCount; ch++) {
            float[] oldSamples = (float[]) oldChannels[ch];
            float[] newSamples = (float[]) channels[ch];
            if (oldSamples != newSamples) {
                // if this sample array was not object of lazy delete
                System.arraycopy(oldSamples, 0, newSamples, 0, copyCount);
            }
            if (oldSampleCount < newSampleCount) {
                // silence out new samples
                for (int i = oldSampleCount; i < newSampleCount; i++) {
                    newSamples[i] = 0.0f;
                }
            }
        }
    }
}
