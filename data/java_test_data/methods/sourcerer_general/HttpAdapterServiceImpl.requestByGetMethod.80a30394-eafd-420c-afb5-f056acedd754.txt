public String requestByGetMethod(Map<String, String> parameterMap) throws Exception {
    String responseBody = null;
    GetMethod method = null;
    try {
        StringBuilder sb = new StringBuilder();
        sb.append(url);
        if (url.indexOf("?") == -1) {
            sb.append("?");
        }
        Set<String> keySet = parameterMap.keySet();
        Iterator<String> iter = keySet.iterator();
        String parameterKey = null;
        while (iter.hasNext()) {
            parameterKey = iter.next();
            sb.append(parameterKey);
            sb.append("=");
            sb.append(parameterMap.get(parameterKey));
            if (iter.hasNext()) {
                sb.append("&");
            }
        }
        String encodedURI = URIUtil.encodeQuery(sb.toString());
        if (log.isDebugEnabled()) {
            log.debug(encodedURI);
        }
        method = new GetMethod(encodedURI);
        HttpParams httpParams = new DefaultHttpParams();
        DefaultHttpMethodRetryHandler retryHandler = new DefaultHttpMethodRetryHandler(retry, false);
        httpParams.setParameter(HttpMethodParams.RETRY_HANDLER, retryHandler);
        HttpClient httpClient = new HttpClient(new HttpClientParams(httpParams));
        int statusCode = httpClient.executeMethod(method);
        if (log.isDebugEnabled()) {
            sb = new StringBuilder();
            sb.append("statusCode: ").append(statusCode);
            log.debug(sb.toString());
        }
        switch(statusCode) {
            case HttpStatus.SC_OK:
                responseBody = method.getResponseBodyAsString();
                if (log.isDebugEnabled()) {
                    sb = new StringBuilder();
                    sb = new StringBuilder();
                    sb.append("responseBody: ").append(responseBody);
                    log.debug(sb.toString());
                }
                break;
        }
    } catch (Exception e) {
        if (log.isErrorEnabled()) {
            String messageKey = "error.http.request";
            String userMessage = messageSource.getMessage(messageKey, new String[] {}, "default message", Locale.getDefault());
            log.error(userMessage, e);
        }
        e.printStackTrace();
        throw e;
    } finally {
        if (method != null) {
            method.releaseConnection();
        }
    }
    return responseBody;
}
