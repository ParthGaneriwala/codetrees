public static void main(String[] args) throws Exception {
    Scanner input = new Scanner(System.in);
    String entrada = "";
    int xPeca, yPeca, xCasa, yCasa;
    boolean jogadorVez = true;
    System.out.println("Digite o nome do Enxadrista Branco: ");
    entrada = input.next();
    Enxadrista enxadristaBranco = new Enxadrista(entrada, Cor.BRANCO);
    System.out.println("Digite o nome do Enxadrista Preto: ");
    entrada = input.next();
    Enxadrista enxadristaPreto = new Enxadrista(entrada, Cor.PRETO);
    Tabuleiro tabuleiro = new Tabuleiro();
    tabuleiro.imprimir();
    do {
        try {
            System.out.println();
            System.out.print("Peca: ");
            entrada = input.next();
            if (entrada.equals("sair"))
                continue;
            if (entrada.equals("restart")) {
                tabuleiro = new Tabuleiro();
                jogadorVez = true;
                tabuleiro.imprimir();
                continue;
            }
            yPeca = Character.getNumericValue(entrada.charAt(0)) - 10;
            xPeca = Integer.parseInt(String.valueOf(entrada.charAt(1)));
            if (tabuleiro.getTabuleiro()[xPeca][yPeca].getPeca() == null) {
                System.out.println("Casa vazia! escolha uma pe�a!");
                continue;
            }
            if (jogadorVez && tabuleiro.getTabuleiro()[xPeca][yPeca].getPeca().compareTo(Cor.PRETO)) {
                System.out.println("A vez � do " + enxadristaBranco.getNome() + " (Branco)");
                continue;
            }
            if (!jogadorVez && tabuleiro.getTabuleiro()[xPeca][yPeca].getPeca().compareTo(Cor.BRANCO)) {
                System.out.println("A vez � do " + enxadristaPreto.getNome() + " (Preto)");
                continue;
            }
            System.out.print("Casa: ");
            entrada = input.next();
            if (entrada.equals("sair"))
                continue;
            if (entrada.equals("restart")) {
                tabuleiro = new Tabuleiro();
                jogadorVez = true;
                tabuleiro.imprimir();
                continue;
            }
            yCasa = Character.getNumericValue(entrada.charAt(0)) - 10;
            xCasa = Integer.parseInt(String.valueOf(entrada.charAt(1)));
            tabuleiro.mover(tabuleiro.getTabuleiro()[xPeca][yPeca].getPeca(), tabuleiro.getTabuleiro()[xCasa][yCasa]);
            if (!tabuleiro.getPecasBrancas().isEmpty() && tabuleiro.getPecasBrancas().get(tabuleiro.getPecasBrancas().size() - 1).getClass().equals(Rei.class)) {
                tabuleiro.imprimir();
                System.out.println("Preto venceu o jogo!");
                entrada = "sair";
                continue;
            }
            if (!tabuleiro.getPecasPretas().isEmpty() && tabuleiro.getPecasPretas().get(tabuleiro.getPecasPretas().size() - 1).getClass().equals(Rei.class)) {
                tabuleiro.imprimir();
                System.out.println("Branco venceu o jogo!");
                entrada = "sair";
                continue;
            }
            jogadorVez = !jogadorVez;
            tabuleiro.imprimir();
        } catch (PromocaoException e) {
            List<Peca> pecasForaJogo;
            HashSet<String> opcoes = new HashSet<String>();
            if (jogadorVez)
                pecasForaJogo = tabuleiro.getPecasBrancas();
            else
                pecasForaJogo = tabuleiro.getPecasPretas();
            Iterator<Peca> i = pecasForaJogo.iterator();
            while (i.hasNext()) opcoes.add(i.next().getClass().toString().substring(6));
            tabuleiro.imprimir();
            // Caso n�o tenha peao no array e o jogador quiser continuar com um peao
            opcoes.add("Peao");
            System.out.println("Troque seu pe�o por uma das pe�as abaixo:");
            Iterator<String> o = opcoes.iterator();
            while (o.hasNext()) System.out.println(i.next());
            System.out.println("Digite o nome da pe�a: ");
            entrada = input.next();
            loopExterno: for (; ; ) {
                o = opcoes.iterator();
                while (o.hasNext()) if (o.next().toString().equals(entrada))
                    break loopExterno;
                System.out.println("Pe�a inv�lida!\nDigite novamente o nome da Peca: ");
                entrada = input.next();
            }
            Peca pecaOrig = tabuleiro.getUltimaPecaMovida();
            switch(entrada.charAt(0)) {
                case 'P':
                    tabuleiro.promocao(tabuleiro.getTabuleiro()[pecaOrig.getXAtual()][pecaOrig.getYAtual()].getPeca(), new Peao(pecaOrig.getXAtual(), pecaOrig.getYAtual(), pecaOrig.getCor()));
                    break;
                case 'T':
                    tabuleiro.promocao(tabuleiro.getTabuleiro()[pecaOrig.getXAtual()][pecaOrig.getYAtual()].getPeca(), new Torre(pecaOrig.getXAtual(), pecaOrig.getYAtual(), pecaOrig.getCor()));
                    break;
                case 'C':
                    tabuleiro.promocao(tabuleiro.getTabuleiro()[pecaOrig.getXAtual()][pecaOrig.getYAtual()].getPeca(), new Cavalo(pecaOrig.getXAtual(), pecaOrig.getYAtual(), pecaOrig.getCor()));
                    break;
                case 'B':
                    tabuleiro.promocao(tabuleiro.getTabuleiro()[pecaOrig.getXAtual()][pecaOrig.getYAtual()].getPeca(), new Bispo(pecaOrig.getXAtual(), pecaOrig.getYAtual(), pecaOrig.getCor()));
                    break;
                case 'D':
                    tabuleiro.promocao(tabuleiro.getTabuleiro()[pecaOrig.getXAtual()][pecaOrig.getYAtual()].getPeca(), new Dama(pecaOrig.getXAtual(), pecaOrig.getYAtual(), pecaOrig.getCor()));
                    break;
            }
            jogadorVez = !jogadorVez;
            tabuleiro.imprimir();
        } catch (Exception e) {
            tabuleiro.imprimir();
            System.out.println(e.getMessage());
        }
    } while (!entrada.equals("sair"));
    System.out.println("Jogo encerrado.");
}
