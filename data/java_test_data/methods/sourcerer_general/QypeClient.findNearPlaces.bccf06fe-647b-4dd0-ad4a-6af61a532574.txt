public ArrayList<Place> findNearPlaces(Location location, String searchTerm, String category, String radius) {
    // FIXME hacer
    // show={search_term}
    // in_category={category_id} does not work with show
    // order={order}
    // radius={radius} in kilometers
    Resources r = context.getResources();
    InputStream in = null;
    ArrayList<Place> places = new ArrayList<Place>();
    try {
        HttpGet request = new HttpGet();
        String qypeUrl = r.getString(R.string.qype_url);
        String qypeApiKey = r.getString(R.string.qype_api_key);
        String locUri = "positions/" + location.getLatitude() + "," + location.getLongitude() + "/places";
        String consumerKey = "consumer_key=" + qypeApiKey;
        // FIXME hacer posible que se puedan a�adir m�s cosas
        URI uri = new URI(qypeUrl + locUri + "?" + consumerKey);
        Log.d(TAG, "connecting to uri: " + uri);
        request.setURI(uri);
        HttpResponse response = client.execute(request);
        int responseCode = response.getStatusLine().getStatusCode();
        if (responseCode == HttpURLConnection.HTTP_OK) {
            in = response.getEntity().getContent();
            DocumentBuilderFactory dbf;
            dbf = DocumentBuilderFactory.newInstance();
            DocumentBuilder db = dbf.newDocumentBuilder();
            // Parse the qype xml response.
            Document dom = db.parse(in);
            Element docEle = dom.getDocumentElement();
            // Get a list of each place entry
            NodeList nl = docEle.getElementsByTagName("place");
            if (nl != null && nl.getLength() > 0) {
                for (int i = 0; i < nl.getLength(); i++) {
                    Element entry = (Element) nl.item(i);
                    Element titleEl = (Element) entry.getElementsByTagName("title").item(0);
                    Element idEl = (Element) entry.getElementsByTagName("id").item(0);
                    Element pointEl = (Element) entry.getElementsByTagName("point").item(0);
                    String title = titleEl.getFirstChild().getNodeValue();
                    String id = idEl.getFirstChild().getNodeValue();
                    String point = pointEl.getFirstChild().getNodeValue();
                    Log.d(TAG, title + ", " + id + ", " + point);
                    String delimiter = ",";
                    String[] loc = point.split(delimiter);
                    Location l = new Location("dummyGPS");
                    l.setLatitude(Double.parseDouble(loc[0]));
                    l.setLongitude(Double.parseDouble(loc[1]));
                    Place place = new Place(title, id, l);
                    // Process a newly found place
                    places.add(place);
                }
            }
        }
    } catch (URISyntaxException e) {
        e.printStackTrace();
    } catch (IOException e) {
        e.printStackTrace();
    } catch (ParserConfigurationException e) {
        e.printStackTrace();
    } catch (SAXException e) {
        e.printStackTrace();
    } finally {
        if (in != null) {
            try {
                in.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
    return places;
}
