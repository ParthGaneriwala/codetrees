public Mes obtenerMes(Usuario user, int mesActual, int annoActual, boolean siguiente, int idGrupo) {
    Mes mes = new Mes();
    int mesSiguiente;
    /* Obtenemos el calendario actual a mostrar */
    Calendar cal = Calendar.getInstance();
    int mesFechaInicial = cal.get(Calendar.MONTH);
    int annoFechaInicial = cal.get(Calendar.YEAR);
    int diaFechaInicial = cal.get(Calendar.DATE);
    if (siguiente) {
        if (mesActual == 11) {
            mesSiguiente = 0;
            cal.set(Calendar.YEAR, ++annoActual);
        } else {
            mesSiguiente = mesActual + 1;
            cal.set(Calendar.YEAR, annoActual);
        }
    } else {
        if (mesActual == 0) {
            mesSiguiente = 11;
            cal.set(Calendar.YEAR, --annoActual);
        } else {
            mesSiguiente = mesActual - 1;
            cal.set(Calendar.YEAR, annoActual);
        }
    }
    cal.set(Calendar.MONTH, mesSiguiente);
    cal.set(Calendar.DATE, 1);
    int diaSemana = cal.get(Calendar.DAY_OF_WEEK);
    // JavaCalendar devuelve 1 para domingo, 2 para lunes, ... Lo arregamos
    diaSemana = primerDia(diaSemana);
    /* Obtenemos el �ltimo d�a del mes (28,29,30 o 31) */
    int ultDiaMes = diaFinalMes(cal.get(Calendar.MONTH) + 1, cal.get(Calendar.YEAR));
    /*Obtenemos el grupo por el id*/
    Grupo grupo = grupoDao.obtenerGrupo(idGrupo);
    /* Le pasamos el d�a actual si estamos en el mismo mes del mismo a�o*/
    if (mesSiguiente == mesFechaInicial && annoActual == annoFechaInicial) {
        mes = rellenaMes(grupo, cal, ultDiaMes, diaSemana, diaFechaInicial);
    } else /* Si la fecha es anterior a la inicial, lo rellenamos con d�as pasados */
    if (annoActual < annoFechaInicial || (annoActual == annoFechaInicial && mesSiguiente <= mesFechaInicial)) {
        mes = rellenaMes(grupo, cal, ultDiaMes, diaSemana, 32);
    } else {
        /* En otro caso, lo rellenamos con d�as sin pasar */
        mes = rellenaMes(grupo, cal, ultDiaMes, diaSemana, 0);
    }
    return mes;
}
