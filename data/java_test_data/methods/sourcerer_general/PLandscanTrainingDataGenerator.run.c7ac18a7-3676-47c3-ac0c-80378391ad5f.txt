public void run() {
    MomentGenerator mg = new MomentGenerator();
    int start = 0;
    if ((type.equals("road")) && (method.equals("FZ"))) {
        start = 48;
    } else if ((type.equals("airport")) && (method.equals("FZ"))) {
        start = 28;
    }
    // for the tracks of each type
    for (int run = start; run < 50; run++) {
        // for each of the three types
        double[][] moments = new double[40][];
        // get the track length from the summary
        int length = 0;
        try {
            File summary = new File("D:/synthLandscan/" + type + "/run" + run + "/summary.csv");
            FileReader in = new FileReader(summary);
            CSVParser csvp = new CSVParser(in);
            String[][] values = csvp.getAllValues();
            length = (values.length - 2) * 5;
        } catch (IOException ioe) {
            System.out.println("what the? " + ioe.getMessage());
        }
        // for 200 evenly-spaced time steps (reduce to 100 in case of time issues, 40 for test data)
        for (int step = 0; step < 40; step++) {
            double interval = (double) length / 40d;
            int time = nearestMultipleOfFive((int) Math.round(interval * step));
            // if ((run != 2) || (type != 1) || (step > 81)){
            File file = new File("D:/synthLandscan/" + type + "/run" + run + "/" + type + "PAtime" + time + ".csv");
            float[][] raster;
            // run GAM & get a coverage out of it (or use the base raster)
            if (method.equals("FZ")) {
                raster = FZRasterFromFile(file);
            } else if (method.equals("GAM")) {
                raster = GAMRasterFromFile(file);
            } else {
                raster = baseRasterFromFile(file);
            }
            mg.setRaster(raster);
            // calculate moments
            double[] temp = mg.calculateMomentInvariants();
            moments[step] = new double[temp.length];
            for (int blob = 0; blob < temp.length; blob++) {
                moments[step][blob] = temp[blob];
            }
            System.out.println("finished moments for method" + method + ", type " + type + ", run " + run + ", step " + step);
            try {
                File momentFile = new File("D:/synthLandscan/" + type + "/run" + run + "/" + method + "Moments" + step + ".csv");
                FileWriter momentWriter = new FileWriter(momentFile);
                momentWriter.write("" + temp[0]);
                for (int l = 1; l < temp.length; l++) {
                    momentWriter.write("," + temp[l]);
                }
                momentWriter.write('\n');
                momentWriter.close();
            } catch (IOException ioe) {
                System.out.println("IOException writing moment file.  " + ioe.getMessage());
            }
        // }
        }
        // stash away for safekeeping and repeat, repeat, repeat!
        try {
            File momentFile = new File("D:/synthLandscan/" + type + "/run" + run + "/" + method + "Moments.csv");
            FileWriter momentWriter = new FileWriter(momentFile);
            for (int k = 0; k < moments.length; k++) {
                momentWriter.write("" + moments[k][0]);
                for (int l = 1; l < moments[k].length; l++) {
                    momentWriter.write("," + moments[k][l]);
                }
                momentWriter.write('\n');
            }
            momentWriter.close();
        } catch (IOException ioe) {
            System.out.println("IOException writing moment file.  " + ioe.getMessage());
        }
    }
// end for (int run...
}
