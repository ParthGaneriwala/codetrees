public void dumpTrellis(OutputStream os, boolean includeDeadEnd) {
    OutputStreamWriter out = new OutputStreamWriter(os);
    DecimalFormat nf = new DecimalFormat("0.###E0");
    nf.setMaximumFractionDigits(3);
    HashSet<TrellisItem> deadEnds = new HashSet<TrellisItem>();
    try {
        out.append("digraph Trellis {\n");
        out.append("  rankdir=LR\n;");
        for (TrellisSlice slice : slices) {
            deadEnds.clear();
            for (TrellisItem item : slice.getElements()) {
                if (!includeDeadEnd && slice != getCurrentSlice()) {
                    if (slice.getNext().prev2curr.get(item) == null) {
                        // drop items which have to continuation in the next slice
                        deadEnds.add(item);
                        continue;
                    }
                }
                out.append("  N" + item.toString());
                out.append(" [label=\"N" + item.toString());
                if (!item.clusterid.isEmpty()) {
                    out.append(" (" + item.clusterid + ")");
                }
                try {
                    String prefix = item.tree.getPrefix().toString();
                    if (!prefix.isEmpty()) {
                        out.append("\\nprefix=");
                        out.append(prefix);
                    }
                } catch (UnsupportedOperationException e) {
                // item.tree.getPrefix() will throw this if it's a ghost
                }
                out.append("\\nprev=" + nf.format(item.getPrevProb() * Math.pow(10.0, slice.getCumulativeLogScale() - slice.getSliceLogScale())));
                out.append("\\nprob=" + nf.format(item.tree.getTotalProb() * Math.pow(10.0, slice.getSliceLogScale())) + "\"];\n");
            }
            out.append(" {rank=same;");
            for (TrellisItem item : slice.getElements()) {
                if (includeDeadEnd || !deadEnds.contains(item)) {
                    out.append("  N" + item.toString());
                }
            }
            out.append("};\n");
            for (Map.Entry<TrellisItem, ArrayList<TrellisItem>> prevs : slice.curr2prev.entrySet()) {
                if (!includeDeadEnd && deadEnds.contains(prevs.getKey())) {
                    continue;
                }
                ArrayList<TrellisItem> prevLinks = prevs.getValue();
                if (prevLinks != null) {
                    out.append("N" + prevs.getKey().toString() + " -> {");
                    for (TrellisItem prev : prevLinks) {
                        out.append(" N" + prev.toString());
                    }
                    out.append("};\n");
                }
            }
        /*
				for(Map.Entry<SliceItem,ArrayList<SliceItem>> currs : slice.prev2curr.entrySet()) {
					out.append("N" + currs.getKey().toString() + " -> {");
					for(SliceItem prev : currs.getValue()) {
						out.append(" N" + prev.toString());
					}
					out.append("};\n");
				}
				*/
        }
        out.append("}\n");
        out.flush();
    } catch (IOException e) {
        e.printStackTrace();
    }
}
