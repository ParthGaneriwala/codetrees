public final Expressao PExpBinaria() throws ParseException {
    Expressao retorno, param2;
    retorno = PExpUnaria();
    label_1: while (true) {
        switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case AND:
            case OR:
            case EQ:
            case CONCAT:
            case PLUS:
            case MINUS:
                ;
                break;
            default:
                jj_la1[10] = jj_gen;
                break label_1;
        }
        switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case CONCAT:
                jj_consume_token(CONCAT);
                param2 = PExpUnaria();
                retorno = new ExpConcat(retorno, param2);
                break;
            case MINUS:
                jj_consume_token(MINUS);
                param2 = PExpUnaria();
                retorno = new ExpSub(retorno, param2);
                break;
            case AND:
                jj_consume_token(AND);
                param2 = PExpUnaria();
                retorno = new ExpAnd(retorno, param2);
                break;
            case OR:
                jj_consume_token(OR);
                param2 = PExpUnaria();
                retorno = new ExpOr(retorno, param2);
                break;
            case EQ:
                jj_consume_token(EQ);
                param2 = PExpUnaria();
                retorno = new ExpEquals(retorno, param2);
                break;
            case PLUS:
                jj_consume_token(PLUS);
                param2 = PExpUnaria();
                retorno = new ExpSoma(retorno, param2);
                break;
            default:
                jj_la1[11] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }
    {
        if (true)
            return retorno;
    }
    throw new Error("Missing return statement in function");
}
