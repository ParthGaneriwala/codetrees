private boolean treatMessage(String message) {
    boolean result = true;
    ClientServerProtocol prot = new ClientServerProtocol(msgType.CLIENT);
    String[] messageCommand = prot.parseCommand(message);
    if (messageCommand == null) {
        client.logger.print_error(prot.result + ". Bad server command.");
        result = false;
    } else // If it is the transmit command
    if (messageCommand[0].equals(ClientServerProtocol.VIEWERTRANSMIT)) {
        int watcherPort = Integer.parseInt(messageCommand[1]);
        InetAddress address = null;
        try {
            address = InetAddress.getByName(messageCommand[2]);
        } catch (UnknownHostException e) {
            client.logger.print_error(e.getMessage());
            result = false;
        }
        String watchName = messageCommand[3];
        client.removeViewerIfExists(watchName);
        TheClient.Viewer viewer = new TheClient.Viewer(client, address, watcherPort, watchName);
        client.addToViewerList(viewer);
        viewer.sendPreviousMoves();
    } else if (messageCommand[0].equals(ClientServerProtocol.SOCKETREFRESH)) {
        try {
            PrintWriter clientToOpponent = new PrintWriter(transmitCommandSocket.getOutputStream(), true);
            clientToOpponent.println(ClientServerProtocol.OK);
        } catch (IOException e) {
            client.logger.print_error("While sending ok to opponent: " + e.getMessage());
        }
        client.refreshGameConnection();
    } else if (messageCommand[0].equals(ClientServerProtocol.ISURRENDER)) {
        try {
            PrintWriter clientToOpponent = new PrintWriter(transmitCommandSocket.getOutputStream(), true);
            clientToOpponent.println(ClientServerProtocol.OK);
        } catch (IOException e) {
            client.logger.print_error("While sending ok to opponent: " + e.getMessage());
        }
        client.opponentSurrender();
    }
    return result;
}
