private void parse(InputStream inStream) {
    try {
        StringBuilder buffer = new StringBuilder();
        PhyloNode currentNode = null;
        int prevChar = 0;
        int theChar;
        while ((theChar = inStream.read()) != -1 && theChar != ';') {
            if (Character.isWhitespace(theChar))
                continue;
            if (prevChar == ',' || prevChar == ')') {
                currentNode = currentNode.getParentNode();
            }
            if (theChar == '(') {
                if (null == currentNode) {
                    currentNode = new PhyloNode();
                    mRootNode = currentNode;
                } else {
                    PhyloNode newNode = new PhyloNode();
                    currentNode.addEdge(newNode, null);
                    currentNode = newNode;
                }
            } else if (theChar == ')') {
                currentNode = currentNode.getParentNode();
            } else if (prevChar == '(' || prevChar == ',') {
                PhyloNode newNode = new PhyloNode();
                currentNode.addEdge(newNode, null);
                currentNode = newNode;
                // Read the label (if present).
                buffer.setLength(0);
                do {
                    // buffer.append(theChar == '_' ? ' ' : (char) theChar);
                    buffer.append((char) theChar);
                } while ((theChar = inStream.read()) != -1 && theChar != ':' && theChar != ',' && theChar != ';');
                if (StringUtil.isSet(buffer.toString()))
                    currentNode.setLabel(buffer.toString());
            } else if (prevChar == ':') {
                // Read the distance value (branch length)
                buffer.setLength(0);
                do {
                    buffer.append((char) theChar);
                } while ((theChar = inStream.read()) != -1 && theChar != ')' && theChar != ',' && theChar != ';');
                if (StringUtil.isSet(buffer.toString())) {
                    Edge<PhyloNode> parentEdge = currentNode.getParentEdge();
                    if (null == parentEdge) {
                        Edge<PhyloNode> edge = new Edge<PhyloNode>(null, currentNode, Float.parseFloat(buffer.toString()));
                        currentNode.addEdge(edge);
                    } else {
                        parentEdge.setDistance(Float.parseFloat(buffer.toString()));
                    }
                }
            }
            prevChar = theChar;
        }
    } catch (IOException e) {
        throw new RuntimeException(e);
    }
}
