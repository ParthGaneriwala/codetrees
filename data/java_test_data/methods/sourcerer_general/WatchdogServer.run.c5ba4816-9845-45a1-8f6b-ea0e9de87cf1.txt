public void run() {
    try {
        DatagramSocket socket = new DatagramSocket();
        socket.setSoTimeout(SOCKET_TIMEOUT);
        byte[] buffer = new byte[1024];
        DatagramPacket packet = null;
        while (true) {
            /**
             * Sending a PingMessage
             */
            ByteArrayOutputStream byteOutStream = new ByteArrayOutputStream(1024);
            ObjectOutputStream out = new ObjectOutputStream(new BufferedOutputStream(byteOutStream));
            out.flush();
            out.writeObject(new PingMessage(null, 0));
            out.flush();
            byte[] streamByteArray = byteOutStream.toByteArray();
            packet = new DatagramPacket(streamByteArray, streamByteArray.length);
            packet.setAddress(InetAddress.getByName(SERVER_HOSTNAME));
            packet.setPort(WatchdogServerListener.PORT);
            socket.send(packet);
            /**
             * Receiving PingReplyMessage
             */
            packet = new DatagramPacket(buffer, buffer.length);
            socket.receive(packet);
            ByteArrayInputStream byteStream = new ByteArrayInputStream(buffer);
            ObjectInputStream is = new ObjectInputStream(new BufferedInputStream(byteStream));
            if (is.readObject() instanceof PingReplyMessage) {
                Logger.outputMessage("PingReply received from server!");
                Thread.sleep(PING_DELAY);
            }
        }
    } catch (BindException e) {
        Logger.outputMessage("Error binding Watchdog");
    } catch (SocketTimeoutException te) {
        this.replyNotReceived();
    } catch (PortUnreachableException pe) {
        return;
    } catch (IOException e) {
        Logger.outputMessage("Problem with Watchdog receiving reply!");
    } catch (InterruptedException e) {
        Logger.outputMessage("InterrupptedException on Watchdog");
    } catch (ClassNotFoundException e) {
        System.out.println("Bad Message!");
        e.printStackTrace();
    }
}
