protected void doView(RenderRequest request, RenderResponse response) throws PortletException, IOException {
    LOG.debug("Determining routing using viewers map (" + viewers.size() + ") and actions map (" + actions.size() + ")");
    if (LOG.isTraceEnabled()) {
        showAllRequestParameters(request);
        showAllSessionParameters(request);
    }
    try {
        // Determine the command to execute, as set by the portlet
        String command = request.getParameter(COMMAND);
        if (!StringUtils.isEmpty(command)) {
            LOG.debug("using command from portlet: " + command);
        } else {
            // Determine the command to execute, as set by the portlet session
            PortletSession session = request.getPortletSession(false);
            if (session != null) {
                command = (String) session.getAttribute(COMMAND);
            }
            if (!StringUtils.isEmpty(command)) {
                LOG.debug("using command from portlet action: " + command);
                session.removeAttribute(COMMAND);
            } else {
                // Determine the command to execute, as set by the portal
                command = (String) request.getAttribute(COMMAND);
                if (!StringUtils.isEmpty(command)) {
                    LOG.debug("using command from portal: " + command);
                } else {
                    // Use the default command
                    command = defaultCommand;
                    LOG.debug("using default command: " + command);
                }
            }
        }
        request.setAttribute("portletCommand", command);
        // Retrieve the viewer from the map
        LOG.debug("Searching for viewer using command: " + command);
        IPortletViewer viewer = viewers.get(command);
        if (viewer == null) {
            LOG.error("A viewer was not found for command: " + command);
        } else {
            // Manage the form bean and make available to the request
            PortalUtils.processFormBean(request);
            // Execute the command
            LOG.debug("Executing viewer: " + viewer.getClass().getName());
            String jsp = viewer.doView(request, response);
            // The viewer optionally returns a JSP view
            if (jsp != null) {
                PortletContext context = getPortletContext();
                PortletRequestDispatcher requestDispatcher = context.getRequestDispatcher(jsp);
                if (requestDispatcher == null) {
                    LOG.error("JSP compile error: " + jsp);
                }
                LOG.debug("Dispatching to JSP: " + jsp);
                requestDispatcher.include(request, response);
            }
        }
    } catch (Throwable t) {
        LOG.error("doView", t);
    }
}
