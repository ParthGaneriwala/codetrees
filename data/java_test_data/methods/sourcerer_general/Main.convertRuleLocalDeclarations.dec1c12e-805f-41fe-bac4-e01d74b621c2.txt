private void convertRuleLocalDeclarations(PrintWriter writer) throws IOException, JeopsException {
    token = readNextToken();
    skipWhiteSpace(writer, false);
    int localDeclNumber = 0;
    while (token.getTokenType() != CONDITIONS) {
        checkToken(token, IDENT, "identifier expected");
        String declaredType = token.getLexeme();
        token = readNextToken();
        while (token.getTokenType() == DOT) {
            declaredType = declaredType.concat(token.getLexeme());
            token = readNextToken();
            checkToken(token, IDENT, "identifier expected");
            declaredType = declaredType.concat(token.getLexeme());
            token = readNextToken();
        }
        skipWhiteSpace(writer, false);
        checkToken(token, IDENT, "identifier expected");
        try {
            String[] primitiveTypes = new String[] { "boolean", "byte", "short", "char", "int", "long", "float", "double" };
            boolean isPrimitive = false;
            for (int i = 0; !isPrimitive && i < primitiveTypes.length; i++) {
                if (declaredType.equals(primitiveTypes[i])) {
                    isPrimitive = true;
                }
            }
            if (!isPrimitive) {
                Class c = importList.getRepresentingClass(declaredType);
                declaredType = c.getName();
            }
        } catch (ClassNotFoundException e) {
            throw new JeopsException("ClassNotFound: " + e.getMessage(), scanner.getCurrentLine(), scanner.getCurrentColumn());
        } catch (ImportException e) {
            throw new JeopsException(e.getMessage(), scanner.getCurrentLine(), scanner.getCurrentColumn());
        }
        // We've found a locally declared variable.
        String declaredIdent = token.getLexeme();
        token = readNextToken();
        skipWhiteSpace(writer, false);
        checkToken(token, EQUALS, "'=' expected");
        token = readNextToken();
        skipWhiteSpace(writer, false);
        // Stores all declarations used by
        Vector allDecls = new Vector();
        // this locally declared variable.]
        StringBuffer convertedExpression = new StringBuffer();
        StringBuffer originalExpression = new StringBuffer();
        originalExpression.append(declaredType);
        originalExpression.append(' ');
        originalExpression.append(declaredIdent);
        originalExpression.append(" = ");
        int lastDecl = 0;
        while (token.getTokenType() != SEMICOLON) {
            String lex = token.getLexeme();
            originalExpression.append(lex);
            String converted = lex;
            if (token.getTokenType() == IDENT && scanner.getLastNonWhiteSpaceToken().getTokenType() != DOT) {
                int indDecl = ruleDeclarations.indexOf(lex);
                if (indDecl == -1) {
                    int indLocalDecl = ruleLocalDeclarations.indexOf(lex);
                    if (indLocalDecl != -1) {
                        // it's a local declaration
                        converted = (String) convertedRuleLocalDeclarations.elementAt(indDecl);
                        Vector aux = (Vector) allDeclForLocalDecl.elementAt(indLocalDecl);
                        for (int i = 0; i < aux.size(); i++) {
                            Integer declIndex = (Integer) aux.elementAt(i);
                            if (!allDecls.contains(declIndex)) {
                                allDecls.addElement(declIndex);
                            }
                        }
                        indDecl = ((Integer) lastDeclForLocalDecl.elementAt(indLocalDecl)).intValue();
                    }
                } else {
                    // it's a (normal) declaration
                    Integer declIndex = new Integer(indDecl);
                    converted = (String) convertedRuleDeclarations.elementAt(indDecl);
                    if (!allDecls.contains(declIndex)) {
                        allDecls.addElement(declIndex);
                    }
                }
                if (indDecl > lastDecl) {
                    lastDecl = indDecl;
                }
            }
            convertedExpression.append(converted);
            token = readNextToken();
            if (token.getTokenType() == EOF) {
                String message = "EOF unexpected at line " + scanner.getCurrentLine() + ", column " + scanner.getCurrentColumn();
                throw new EOFException(message);
            }
        }
        ruleLocalDeclarations.addElement(declaredIdent);
        lastDeclForLocalDecl.addElement(new Integer(lastDecl));
        allDeclForLocalDecl.addElement(allDecls);
        token = readNextToken();
        skipWhiteSpace(writer, false);
        convertedExpression.insert(0, '(');
        convertedExpression.append(')');
        String convertedDeclaration = convertedExpression.toString();
        convertedRuleLocalDeclarations.addElement(convertedDeclaration);
        // locallyDeclaredClasses.addElement(declaredType);
        localDeclNumber++;
    }
    numberOfLocalDeclarations.addElement(new Integer(ruleLocalDeclarations.size()));
}
