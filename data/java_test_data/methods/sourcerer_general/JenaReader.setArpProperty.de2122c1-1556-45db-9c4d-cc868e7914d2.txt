// /**
// * @deprecated Use {@link ParseException#errorCodeName(int)}
// */
// static public String errorCodeName(int errNo) {
// return ParseException.errorCodeName(errNo);
// }
// 
// 
// 
// 
// /**
// * @deprecated Use {@link ParseException#errorCode(String)}
// */
// static public int errorCode(String upper) {
// return ParseException.errorCode(upper);
// }
static Object setArpProperty(ARPOptions options, String str, Object v, RDFErrorHandler eh) {
    // ARPOptions options = arpf.getOptions();
    str = str.toUpperCase();
    if (v == null)
        v = "";
    if (v instanceof String) {
        v = ((String) v).toUpperCase();
    }
    if (str.equals("ERROR-MODE")) {
        if (v instanceof String) {
            String val = (String) v;
            if (val.equals("LAX")) {
                options.setLaxErrorMode();
                return null;
            }
            if (val.equals("DEFAULT")) {
                options.setDefaultErrorMode();
                return null;
            }
            if (val.equals("STRICT")) {
                options.setStrictErrorMode();
                return null;
            }
            if (val.equals("STRICT-WARNING")) {
                options.setStrictErrorMode(EM_WARNING);
                return null;
            }
            if (val.equals("STRICT-FATAL")) {
                options.setStrictErrorMode(EM_FATAL);
                return null;
            }
            if (val.equals("STRICT-IGNORE")) {
                options.setStrictErrorMode(EM_IGNORE);
                return null;
            }
            if (val.equals("STRICT-ERROR")) {
                options.setStrictErrorMode(EM_ERROR);
                return null;
            }
        }
        eh.error(new IllegalArgumentException("Property \"ERROR-MODE\" takes the following values: " + "\"default\", \"lax\", \"strict\", \"strict-ignore\", \"strict-warning\", \"strict-error\", \"strict-fatal\"."));
        return null;
    }
    if (str.equals("EMBEDDING")) {
        if (v instanceof String) {
            v = Boolean.valueOf((String) v);
        }
        if ((v instanceof Boolean))
            return new Boolean(options.setEmbedding(((Boolean) v).booleanValue()));
        // Illegal value.
        eh.error(new IllegalArgumentException("Property \"EMBEDDING\" requires a boolean value."));
        boolean old = options.setEmbedding(false);
        options.setEmbedding(old);
        return new Boolean(old);
    }
    if (str.startsWith("ERR_") || str.startsWith("IGN_") || str.startsWith("WARN_")) {
        int cond = ParseException.errorCode(str);
        if (cond == -1) {
        // error, see end of function.
        } else {
            if (v instanceof String) {
                if (!((String) v).startsWith("EM_")) {
                // error, see below.
                } else {
                    int val = ParseException.errorCode((String) v);
                    if (val == -1) {
                    // error, see below.
                    } else {
                        int rslt = options.setErrorMode(cond, val);
                        return new Integer(rslt);
                    }
                }
            } else if (v instanceof Integer) {
                int val = ((Integer) v).intValue();
                switch(val) {
                    case EM_IGNORE:
                    case EM_WARNING:
                    case EM_ERROR:
                    case EM_FATAL:
                        int rslt = options.setErrorMode(cond, val);
                        return new Integer(rslt);
                    default:
                }
            }
            // Illegal value.
            eh.error(new IllegalArgumentException("Property \"" + str + "\" cannot have value: " + v.toString()));
            int old = options.setErrorMode(cond, EM_ERROR);
            options.setErrorMode(cond, old);
            return new Integer(old);
        }
    }
    eh.error(new UnknownPropertyException(str));
    return null;
}
