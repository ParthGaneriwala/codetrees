private void insertJimiPixels(int[] pix, int samples, int col, int row) throws JimiException {
    if (startingCol[pass] == 0 && colInc[pass] == 1) {
        switch(colorType) {
            case // int pixels - depths 1 to 16.
            IT_GRAYSCALE:
                {
                    byte[] buf2;
                    if (// 2 bytes data - keep high
                    depth == 16) {
                        buf2 = new byte[width];
                        int l = pix.length;
                        for (int k = width; --k >= 0; ) buf2[k] = (byte) pix[l -= 2];
                        // 3 = channel for colormodel
                        ji_.setChannel(3, row, buf2);
                    // ji_.addCoverage(row);
                    } else // depth 1 to 8
                    {
                        buf2 = new byte[pix.length];
                        for (int k = pix.length; --k >= 0; ) buf2[k] = (byte) pix[k];
                        if (depth == 8) {
                            // 3 = channel for colormodel
                            ji_.setChannel(3, row, buf2);
                        // ji_.addCoverage(row);
                        } else {
                            byte[] buf = new byte[width];
                            JimiUtil.expandPixels(depth, buf2, buf, buf.length);
                            // 3 = channel for colormodel
                            ji_.setChannel(3, row, buf);
                        // ji_.addCoverage(row);
                        }
                    }
                    break;
                }
            case IT_GRAYALPHA:
                {
                    int[] buf2 = new int[width];
                    int l;
                    if (// 4 bytes - 2 of alpha then gray
                    depth == 16) {
                        l = pix.length;
                        for (int k = width; --k >= 0; ) buf2[k] = pix[l -= 2] | (pix[l -= 2] << 8);
                        ji_.setChannel(row, buf2);
                    // ji_.addCoverage(row);
                    } else // (depth == 8) // 2 bytes - 1 of alpha then gray
                    {
                        l = pix.length;
                        for (int k = width; --k >= 0; ) buf2[k] = pix[--l] | (pix[--l] << 8);
                        ji_.setChannel(row, buf2);
                    // ji_.addCoverage(row);
                    }
                    break;
                }
            case // assume int pixels
            IT_RGB:
                {
                    int[] buf = new int[width];
                    int j;
                    int i;
                    if (depth == 8) {
                        j = pix.length;
                        for (i = width; --i >= 0; ) buf[i] = pix[--j] | (pix[--j] << 8) | (pix[--j] << 16);
                        ji_.setChannel(row, buf);
                    // ji_.addCoverage(row);
                    } else // (depth == 16)
                    {
                        j = pix.length;
                        for (i = width; --i >= 0; ) buf[i] = pix[j -= 2] | (pix[j -= 2] << 8) | (pix[j -= 2] << 16);
                        ji_.setChannel(row, buf);
                    // ji_.addCoverage(row);
                    }
                    break;
                }
            case // assume byte pixels
            IT_PALETTE:
                {
                    byte[] buf2 = new byte[pix.length];
                    for (int k = pix.length; --k >= 0; ) buf2[k] = (byte) pix[k];
                    if (depth == 8) {
                        ji_.setChannel(0, row, buf2);
                    // ji_.addCoverage(row);
                    } else // depth 1, 2, 4
                    {
                        byte[] buf = new byte[width];
                        JimiUtil.expandPixels(depth, buf2, buf, buf.length);
                        ji_.setChannel(0, row, buf);
                    // ji_.addCoverage(row);
                    }
                    break;
                }
            case // assume int pixels
            IT_RGBA:
                {
                    int j;
                    int i;
                    if (depth == 8) {
                        int[] buf = new int[width];
                        j = pix.length;
                        for (i = width; --i >= 0; ) buf[i] = (pix[--j] << 24) | pix[--j] | (pix[--j] << 8) | (pix[--j] << 16);
                        ji_.setChannel(row, buf);
                    // ji_.addCoverage(row);
                    } else // (depth == 16)
                    {
                        int[] buf = new int[width];
                        j = pix.length;
                        for (i = width; --i >= 0; ) buf[i] = (pix[j -= 2] << 24) | pix[j -= 2] | (pix[j -= 2] << 8) | (pix[j -= 2] << 16);
                        ji_.setChannel(row, buf);
                    // ji_.addCoverage(row);
                    }
                    break;
                }
        }
    } else
        insertPixels(pix, samples, col, row);
}
