private void compile() throws Exception {
    // create bytecode for a class
    // with name current_ns.defname[$letname]+
    // anonymous fns get names fn__id
    // derived from AFn/RestFn
    ClassWriter cw = new ClassWriter(ClassWriter.COMPUTE_MAXS);
    // ClassWriter cw = new ClassWriter(0);
    ClassVisitor cv = cw;
    // ClassVisitor cv = new TraceClassVisitor(new CheckClassAdapter(cw), new PrintWriter(System.out));
    // ClassVisitor cv = new TraceClassVisitor(cw, new PrintWriter(System.out));
    cv.visit(V1_5, ACC_PUBLIC + ACC_SUPER, internalName, null, superName != null ? superName : (isVariadic() ? "clojure/lang/RestFn" : "clojure/lang/AFunction"), null);
    String source = (String) SOURCE.deref();
    int lineBefore = (Integer) LINE_BEFORE.deref();
    int lineAfter = (Integer) LINE_AFTER.deref() + 1;
    if (source != null && SOURCE_PATH.deref() != null) {
        // cv.visitSource(source, null);
        String smap = "SMAP\n" + ((source.lastIndexOf('.') > 0) ? source.substring(0, source.lastIndexOf('.')) : simpleName) + ".java\n" + "Clojure\n" + "*S Clojure\n" + "*F\n" + "+ 1 " + source + "\n" + (String) SOURCE_PATH.deref() + "\n" + "*L\n" + String.format("%d#1,%d:%d\n", lineBefore, lineAfter - lineBefore, lineBefore) + "*E";
        cv.visitSource(source, smap);
    }
    // static fields for constants
    for (int i = 0; i < constants.count(); i++) {
        cv.visitField(ACC_PUBLIC + ACC_FINAL + ACC_STATIC, constantName(i), constantType(i).getDescriptor(), null, null);
    }
    /*
		//static fields for keywords
		for(ISeq s = RT.keys(keywords); s != null; s = s.rest())
			{
			Keyword k = (Keyword) s.first();
			cv.visitField(ACC_PUBLIC + ACC_FINAL + ACC_STATIC, munge(k.sym.toString()),
			              KEYWORD_TYPE.getDescriptor(), null, null);
			}
		//static fields for vars
		for(ISeq s = RT.keys(vars); s != null; s = s.rest())
			{
			Var v = (Var) s.first();
			cv.visitField(ACC_PUBLIC + ACC_FINAL + ACC_STATIC, munge(v.sym.toString()),
			              VAR_TYPE.getDescriptor(), null, null);
			}
			*/
    // static init for constants, keywords and vars
    GeneratorAdapter clinitgen = new GeneratorAdapter(ACC_PUBLIC + ACC_STATIC, Method.getMethod("void <clinit> ()"), null, null, cv);
    clinitgen.visitCode();
    clinitgen.visitLineNumber(line, clinitgen.mark());
    if (constants.count() > 0) {
        emitConstants(clinitgen);
    }
    clinitgen.returnValue();
    clinitgen.endMethod();
    // instance fields for closed-overs
    for (ISeq s = RT.keys(closes); s != null; s = s.next()) {
        LocalBinding lb = (LocalBinding) s.first();
        if (lb.getPrimitiveType() != null)
            // + ACC_FINAL
            cv.visitField(// + ACC_FINAL
            ACC_PUBLIC, lb.name, Type.getType(lb.getPrimitiveType()).getDescriptor(), null, null);
        else
            // + (onceOnly ? 0 : ACC_FINAL)
            cv.visitField(// + (onceOnly ? 0 : ACC_FINAL)
            ACC_PUBLIC, lb.name, OBJECT_TYPE.getDescriptor(), null, null);
    }
    // ctor that takes closed-overs and inits base + fields
    // Method m = new Method("<init>", Type.VOID_TYPE, ARG_TYPES[closes.count()]);
    Method m = new Method("<init>", Type.VOID_TYPE, ctorTypes());
    GeneratorAdapter ctorgen = new GeneratorAdapter(ACC_PUBLIC, m, null, null, cv);
    Label start = ctorgen.newLabel();
    Label end = ctorgen.newLabel();
    ctorgen.visitCode();
    ctorgen.visitLineNumber(line, ctorgen.mark());
    ctorgen.visitLabel(start);
    ctorgen.loadThis();
    if (superName != null)
        ctorgen.invokeConstructor(Type.getObjectType(superName), afnctor);
    else if (// RestFn ctor takes reqArity arg
    isVariadic()) {
        ctorgen.push(variadicMethod.reqParms.count());
        ctorgen.invokeConstructor(restFnType, restfnctor);
    } else
        ctorgen.invokeConstructor(aFnType, afnctor);
    int a = 1;
    for (ISeq s = RT.keys(closes); s != null; s = s.next(), ++a) {
        LocalBinding lb = (LocalBinding) s.first();
        ctorgen.loadThis();
        Class primc = lb.getPrimitiveType();
        if (primc != null) {
            ctorgen.visitVarInsn(Type.getType(primc).getOpcode(Opcodes.ILOAD), a);
            ctorgen.putField(fntype, lb.name, Type.getType(primc));
            if (primc == Long.TYPE || primc == Double.TYPE)
                ++a;
        } else {
            ctorgen.visitVarInsn(OBJECT_TYPE.getOpcode(Opcodes.ILOAD), a);
            ctorgen.putField(fntype, lb.name, OBJECT_TYPE);
        }
    }
    ctorgen.visitLabel(end);
    // a = 1;
    // for(ISeq s = RT.keys(closes); s != null; s = s.rest(), ++a)
    // {
    // LocalBinding lb = (LocalBinding) s.first();
    // Class primc = lb.getPrimitiveType();
    // if(primc != null)
    // {
    // ctorgen.visitLocalVariable(lb.name, Type.getDescriptor(primc), null, start, end, a);
    // if(primc == Long.TYPE || primc == Double.TYPE)
    // ++a;
    // }
    // else
    // {
    // ctorgen.visitLocalVariable(lb.name, "Ljava/lang/Object;", null, start, end, a);
    // }
    // }
    ctorgen.returnValue();
    // ctorgen.visitMaxs(1, 1);
    ctorgen.endMethod();
    // override of invoke/doInvoke for each method
    for (ISeq s = RT.seq(methods); s != null; s = s.next()) {
        FnMethod method = (FnMethod) s.first();
        method.emit(this, cv);
    }
    // end of class
    cv.visitEnd();
    bytecode = cw.toByteArray();
    if (RT.booleanCast(COMPILE_FILES.deref()))
        writeClassFile(internalName, bytecode);
// else
// getCompiledClass();
}
