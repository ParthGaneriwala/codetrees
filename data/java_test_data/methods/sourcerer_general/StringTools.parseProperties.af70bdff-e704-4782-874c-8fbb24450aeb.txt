public static Map<String, String> parseProperties(String props, char propSep, char keyValSep, Map<String, String> properties) {
    boolean spacePropSep = (propSep == 0) || (propSep == ' ');
    /* new properties? */
    if (properties == null) {
        properties = new OrderedMap<String, String>();
    }
    /* init */
    String r = StringTools.trim(props);
    char[] ch = new char[r.length()];
    r.getChars(0, r.length(), ch, 0);
    int c = 0;
    /* skip prefixing spaces */
    while ((c < ch.length) && (ch[c] == ' ')) {
        c++;
    }
    if (c > 0) {
        r = r.substring(c);
    }
    /* check for name */
    int n1 = 0, n2 = r.indexOf(" "), n3 = r.indexOf(keyValSep);
    if (n2 < 0) {
        n2 = r.length();
    }
    if ((n3 < 0) || (n2 < n3)) {
        // no '=', or position of '=' is before ' '
        // if (allowNameChange) { this.setName(r.substring(n1, n2)); }
        // if (this.getIncludeNameInArgs()) { n2 = 0; }
        // start at beginning of string
        n2 = 0;
    } else {
        // start at beginning of string
        n2 = 0;
    }
    /* extract properties */
    int argsLen = r.length() - n2, a = 0;
    char[] args = new char[argsLen];
    r.getChars(n2, r.length(), args, 0);
    for (; a < argsLen; ) {
        /* skip whitespace (and any prefixing property separators) */
        while ((a < argsLen) && (Character.isWhitespace(args[a]) || _isPropSep(propSep, args[a]))) {
            a++;
        }
        /* prop name */
        // scan until first Whitespace, PropertySeparator, or KeyValSeparator
        StringBuffer propName = new StringBuffer();
        for (; (a < argsLen) && !Character.isWhitespace(args[a]) && !_isPropSep(propSep, args[a]) && (args[a] != keyValSep); a++) {
            propName.append(args[a]);
        }
        /* skip whitespace? */
        if (!spacePropSep) {
            while ((a < argsLen) && Character.isWhitespace(args[a])) {
                a++;
            }
        }
        /* prop value */
        // only if next char is '='
        StringBuffer propValue = new StringBuffer();
        if ((a < argsLen) && (args[a] == keyValSep)) {
            // skip past '='
            a++;
            if (!spacePropSep) {
                // skip whitespace
                while ((a < argsLen) && Character.isWhitespace(args[a])) {
                    a++;
                }
            }
            if ((a < argsLen) && (args[a] == '\"')) {
                // quoted string
                // stop at end of quoted string
                // skip past first '\"'
                a++;
                for (; (a < argsLen) && (args[a] != '\"'); a++) {
                    if (((a + 1) < argsLen) && (args[a] == '\\')) {
                        a++;
                    }
                    propValue.append(args[a]);
                }
                // skip past last '\"'
                if (a < argsLen) {
                    a++;
                }
            } else {
                // stop at first Whitespace or PropertySeparator
                for (; (a < argsLen) && !Character.isWhitespace(args[a]) && !_isPropSep(propSep, args[a]); a++) {
                    propValue.append(args[a]);
                }
            }
        }
        /* add property */
        if (propName.length() > 0) {
            // we must have a property key
            String key = propName.toString();
            String val = propValue.toString();
            properties.put(key, val);
        }
        // trailing junk
        while ((a < argsLen) && !_isPropSep(propSep, args[a])) {
            a++;
        }
        // skip PropertySeparator
        if ((a < argsLen) && !_isPropSep(propSep, args[a])) {
            a++;
        }
    }
    return properties;
}
