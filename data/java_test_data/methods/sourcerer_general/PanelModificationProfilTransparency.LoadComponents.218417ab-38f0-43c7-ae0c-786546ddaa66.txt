private void LoadComponents() {
    setLayout(new BorderLayout());
    JPanel panelGlobal = new JPanel(new BorderLayout());
    JPanel keyboardT = new JPanel(new BorderLayout());
    JPanel p2 = new JPanel();
    p2.add(new JLabel(UIString.getUIString("LB_CONFPROFIL_PANEL_TRANSPARENCY_KEYBOARD")));
    keyboardT.add(p2, BorderLayout.NORTH);
    keyboardTransparency = new JSlider();
    keyboardTransparency.setMaximum(100);
    keyboardTransparency.setMinimum(0);
    keyboardTransparency.setMajorTickSpacing(10);
    keyboardTransparency.setMinorTickSpacing(10);
    keyboardTransparency.setPaintTicks(true);
    keyboardTransparency.setPaintLabels(true);
    keyboardT.add(keyboardTransparency, BorderLayout.CENTER);
    panelGlobal.add(keyboardT, BorderLayout.NORTH);
    // ========================================================================
    // Check OS type
    // ========================================================================
    JLabel lb_OSREstriction = new JLabel();
    if (OSTypeEnum.getCurrentOSType() == OSTypeEnum.WINDOWS) {
    // nothing to do
    } else if (OSTypeEnum.getCurrentOSType() == OSTypeEnum.LINUX) {
        lb_OSREstriction.setText(OSTypeEnum.getMessageOSREstriction() + " Linux");
        lb_OSREstriction.setForeground(Color.red);
        keyboardTransparency.setEnabled(false);
    } else if (OSTypeEnum.getCurrentOSType() == OSTypeEnum.MAC) {
        lb_OSREstriction.setText(OSTypeEnum.getMessageOSREstriction() + " Mac");
        lb_OSREstriction.setForeground(Color.red);
        keyboardTransparency.setEnabled(false);
    } else {
        lb_OSREstriction.setText(OSTypeEnum.getMessageOSREstriction());
        lb_OSREstriction.setForeground(Color.red);
        keyboardTransparency.setEnabled(false);
    }
    panelGlobal.add(lb_OSREstriction, BorderLayout.SOUTH);
    add(panelGlobal, BorderLayout.CENTER);
}
