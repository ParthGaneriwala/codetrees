public Cluster[] FAG_ECFinder(CyNetwork inputNetwork, String resultTitle) {
    String callerID = "Algorithm.FAG_ECFinder";
    System.out.println("In " + callerID);
    params = getParams();
    currentNetwork = inputNetwork;
    calNodeInfos(inputNetwork);
    calEdgeWeight(inputNetwork);
    if (curEdgeWeights == null || curNodeInfos == null) {
        System.err.println("In " + callerID + ": nodeInfos Map or edgeWeights Map was null.");
        return (null);
    }
    long msTimeBefore = System.currentTimeMillis();
    int findingProgress = 0;
    int findingTotal = 0;
    // returns a Collection sorted by key order (descending)
    Collection values = curEdgeWeights.values();
    for (Iterator i1 = values.iterator(); i1.hasNext(); ) {
        ArrayList value = (ArrayList) i1.next();
        for (Iterator i2 = value.iterator(); i2.hasNext(); ) {
            i2.next();
            findingTotal++;
        }
    }
    // stores the list of clusters as ArrayLists of node indices in the input Network
    ArrayList alOriginalClusters = new ArrayList(inputNetwork.getNodeCount());
    /**
     * *********************First, we sort each single node into a clique************************
     */
    int i = 0;
    Iterator nodes = inputNetwork.nodesIterator();
    while (nodes.hasNext()) {
        Node n = (Node) nodes.next();
        int degree = inputNetwork.getDegree(n);
        Cluster newCluster = new Cluster(i);
        ArrayList alNodes = new ArrayList();
        alNodes.add(new Integer(n.getRootGraphIndex()));
        newCluster.setALNodes(alNodes);
        newCluster.setTotalDegree(degree);
        Integer nodeIndex = new Integer(n.getRootGraphIndex());
        ((NodeInfo) curNodeInfos.get(nodeIndex)).setComplex(i);
        i++;
        alOriginalClusters.add(newCluster);
    }
    /**
     * *******************************************************************************************
     * Then, Operation UNION:	according to different situation, in which the two nodes consisting
     * this arc may belong to different Complexes or an identical Complex and that the
     * attributes of the Complexes varies, we take on different action
     * *********************************************************************************************
     */
    ArrayList alEdgeWithSameWeight;
    Edge curEdge;
    for (Iterator iterator = values.iterator(); iterator.hasNext(); ) {
        // each weight may be associated with multiple edges, iterate over these lists
        alEdgeWithSameWeight = (ArrayList) iterator.next();
        for (int j = 0; j < alEdgeWithSameWeight.size(); j++) {
            // for each edge
            int edgeIndex = ((Integer) alEdgeWithSameWeight.get(j)).intValue();
            curEdge = inputNetwork.getEdge(edgeIndex);
            int inFrom = curEdge.getSource().getRootGraphIndex();
            int inTo = curEdge.getTarget().getRootGraphIndex();
            // source node info
            NodeInfo fromNI = (NodeInfo) curNodeInfos.get(new Integer(inFrom));
            // target node info
            NodeInfo toNI = (NodeInfo) curNodeInfos.get(new Integer(inTo));
            // complex that the source node belongs to
            int icFrom = fromNI.iComplex;
            // complex that the target node belongs to
            int icTo = toNI.iComplex;
            if (// we have take some actions only if the two complexes are not the same
            icFrom != icTo) {
                Cluster cFrom = (Cluster) alOriginalClusters.get(icFrom);
                Cluster cTo = (Cluster) alOriginalClusters.get(icTo);
                if (// the two complexes are both mergeable
                cFrom.isMergeable() && cTo.isMergeable())
                    if (// either of the two complexes are not modules yet
                    !cFrom.isModule() || !cTo.isModule())
                        if (cFrom.getALNodes().size() >= cTo.getALNodes().size()) {
                            // merge the smaller complexe to the larger one
                            if (params.isWeak())
                                mergeComplexes1(cFrom, cTo);
                            else
                                mergeComplexes2(cFrom, cTo);
                        } else {
                            // merge the smaller complex to the larger one
                            if (params.isWeak())
                                mergeComplexes1(cTo, cFrom);
                            else
                                mergeComplexes2(cFrom, cTo);
                        }
                    else // both of the two complexes are modules
                    {
                        cFrom.setMergeable(false);
                        cTo.setMergeable(false);
                    }
                else // either of the two complexes is not mergeable
                {
                    cFrom.setMergeable(false);
                    cTo.setMergeable(false);
                }
            }
            if (taskMonitor != null) {
                findingProgress++;
                // We want to be sure that only progress changes are reported and not
                // miniscule decimal increments so that the taskMonitor isn't overwhelmed
                int newProgress = (findingProgress * 100) / findingTotal;
                int oldProgress = ((findingProgress - 1) * 100) / findingTotal;
                if (newProgress != oldProgress) {
                    taskMonitor.setPercentCompleted(newProgress);
                }
            }
            if (cancelled) {
                break;
            }
        }
    }
    ArrayList alClusters = new ArrayList();
    Iterator it = alOriginalClusters.iterator();
    while (it.hasNext()) {
        Cluster cluster = (Cluster) it.next();
        if (cluster.getALNodes().size() >= params.getComplexSizeThreshold()) {
            ArrayList alNodes = cluster.getALNodes();
            GraphPerspective gpCluster = Algorithm.createGraphPerspective(alNodes, inputNetwork);
            // cluster.setComplexID(counter++);
            cluster.setGPCluster(gpCluster);
            cluster.setClusterScore(0.0);
            cluster.setSeedNode((Integer) alNodes.get(0));
            cluster.setResultTitle(resultTitle);
            int ind = cluster.getInDegree();
            int outd = cluster.getTotalDegree() - 2 * ind;
            if (ind != 0 && outd != 0)
                cluster.setModularity((double) ind / (double) outd);
            else
                cluster.calModularity(inputNetwork);
            alClusters.add(cluster);
        }
    }
    // Once the clusters have been found we either return them or in the case of selection scope,
    // we select only the ones that contain the selected node(s) and return those
    ArrayList selectedALClusters = new ArrayList();
    if (!params.getScope().equals(ParameterSet.NETWORK)) {
        for (Iterator ic = alClusters.iterator(); ic.hasNext(); ) {
            Cluster cluster = (Cluster) ic.next();
            ArrayList alNodes = cluster.getALNodes();
            ArrayList alSelectedNodes = new ArrayList();
            for (int c = 0; c < params.getSelectedNodes().length; c++) {
                alSelectedNodes.add(params.getSelectedNodes()[c]);
            }
            // method for returning all clusters that contain any of the selected nodes
            boolean hit = false;
            for (Iterator in = alSelectedNodes.iterator(); in.hasNext(); ) {
                if (alNodes.contains((Integer) in.next())) {
                    hit = true;
                }
            }
            if (hit) {
                selectedALClusters.add(cluster);
            }
        }
        alClusters = selectedALClusters;
    }
    // Finally convert the arraylist into a fixed array
    Cluster[] clusters = new Cluster[alClusters.size()];
    for (int c = 0; c < clusters.length; c++) {
        clusters[c] = (Cluster) alClusters.get(c);
    }
    long msTimeAfter = System.currentTimeMillis();
    lastFindTime = msTimeAfter - msTimeBefore;
    return clusters;
}
