public static MatchStatistics loadMatch(int matchId) {
    String fileName = findMatchFile(matchId);
    Document document = new XMLReader().readXML(fileName);
    MatchStatistics match = new MatchStatistics();
    Element matchElement = document.getRootElement();
    try {
        match.setMatchId(matchElement.getAttribute("id").getIntValue());
    } catch (DataConversionException e) {
        e.printStackTrace();
    }
    match.setGameName(matchElement.getAttributeValue("gameName"));
    match.setMoveCount(Integer.parseInt(matchElement.getChildText("moves")));
    match.setWinner(matchElement.getChildText("winner"));
    SimpleDateFormat formatter = new SimpleDateFormat("dd/MMM/yyyy kk:mm:ss");
    try {
        match.setDateStarted(formatter.parse(matchElement.getChildText("dateStarted")));
    } catch (ParseException e) {
    }
    try {
        match.setDateEnded(formatter.parse(matchElement.getChildText("dateEnded")));
    } catch (ParseException e) {
    }
    List<Pair<String, Integer>> rankingList = new ArrayList<Pair<String, Integer>>();
    List<Pair<String, Integer>> scoreList = new ArrayList<Pair<String, Integer>>();
    Element usersElement = matchElement.getChild("rankingAndScore").getChild("users");
    for (Element userElement : (List<Element>) usersElement.getChildren()) {
        String login = userElement.getAttributeValue("login");
        int score = 0;
        try {
            score = Integer.parseInt(userElement.getChildText("score"));
        } catch (Exception ex) {
        }
        int ranking = 0;
        try {
            ranking = Integer.parseInt(userElement.getChildText("ranking"));
        } catch (Exception ex) {
        }
        rankingList.add(new Pair<String, Integer>(login, ranking));
        scoreList.add(new Pair<String, Integer>(login, score));
    }
    match.setRankingPoints(rankingList);
    match.setScore(scoreList);
    return match;
}
