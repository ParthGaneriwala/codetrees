private void sentenciaAsignacion(String identificador) throws AleXcore.ExcepcionCaracterInvalido, AleXcore.ExcepcionComentarioSinCerrar, AleXcore.ExcepcionIdentificadorInvalido, AleXcore.ExcepcionComentarioCerrado, ExcepcionErrorSintactico, ExcepcionErrorSemantico {
    // el lado derecho de una asignacion puede ser:
    // * un identificador o una constante numerica
    // * una llamada a funcion (con o sin parametros)
    // * un valor de un arreglo
    // * una expresion
    // Ya se leyo el lexema ':='
    Elemento idObj;
    Tipo idObjTIPO = null;
    int pasaje;
    if (TdS.pertenece(identificador)) {
        idObj = TdS.getEntrada(identificador);
        if (idObj.esParametro()) {
            // ((ParametroFormal)idObj).getPasaje();
            pasaje = VALOR;
            idObjTIPO = ((ParametroFormal) idObj).getTipo();
        } else if ((idObj.esVariable()) || (idObj.esFuncion())) {
            pasaje = VALOR;
            if (idObj.esVariable()) {
                idObjTIPO = ((Variable) idObj).getTipo();
                if (((Variable) idObj).getTipo().esArreglo()) {
                    // normalizo el indice del arreglo destino
                    MepaH.generarInstruccion("APCT " + ((Arreglo) ((Variable) idObj).getTipo()).getli());
                    MepaH.generarInstruccion("SUST");
                }
            } else {
                idObjTIPO = ((Funcion) idObj).getTipo();
            }
        } else {
            // no es variable, parametro o identificador de funcion por lo que no se le puede asignar un valor
            throw new ExcepcionErrorSemantico("En linea: " + ultimoToken.getLinea() + ". Se esperaba identificador de variable o funcion como lado izquierdo de la asignacion");
        }
        ultimoToken = alex.getToken();
        Tipo tipoExpresion = expresion(pasaje);
        if (TdS.compatibles(idObjTIPO, tipoExpresion)) {
            if (idObj.esParametro()) {
                ParametroFormal idObjPar = (ParametroFormal) idObj;
                // Dependiendo del tipo de pasaje genera una instruccion MEPa diferente
                if (idObjPar.getPasaje() == VALOR) {
                    // PASAJE POR VALOR
                    if (idObjPar.getTipo().esArreglo()) {
                        // Es una asignacion de un arreglo completo pasado por valor
                        MepaH.generarInstruccion("POAR " + idObjPar.getNivelLexico() + " , " + idObjPar.getOffset() + " , " + ((Arreglo) idObjPar.getTipo()).getCantElem());
                    } else if (idObjPar.getTipo().esSubrango()) {
                        // Controlo los indices del subrango
                        MepaH.generarInstruccion("CONT " + ((Subrango) idObjPar.getTipo()).getli() + " , " + ((Subrango) idObjPar.getTipo()).getls());
                        MepaH.generarInstruccion("ALVL " + idObjPar.getNivelLexico() + " , " + idObjPar.getOffset());
                    } else {
                        // Es una asignacion de un parametro de tipo simple pasado por valor
                        MepaH.generarInstruccion("ALVL " + idObjPar.getNivelLexico() + " , " + idObjPar.getOffset());
                    }
                } else {
                    // PASAJE POR REFERENCIA
                    if (idObjPar.getTipo().esArreglo()) {
                        // Es una asignacion de un arreglo completo pasado por referencia
                        MepaH.generarInstruccion("POAI " + idObjPar.getNivelLexico() + " , " + idObjPar.getOffset() + " , " + ((Arreglo) idObjPar.getTipo()).getCantElem());
                    } else if (idObjPar.getTipo().esSubrango()) {
                        // utilizo la operacion de chequeo de rangos provista por MEPa
                        MepaH.generarInstruccion("CONT " + ((Subrango) idObjPar.getTipo()).getli() + " , " + ((Subrango) idObjPar.getTipo()).getls());
                        MepaH.generarInstruccion("ALVI " + idObjPar.getNivelLexico() + " , " + idObjPar.getOffset());
                    } else {
                        // Es una asignacion de un parametro de tipo simple pasado por referencia
                        MepaH.generarInstruccion("ALVI " + idObjPar.getNivelLexico() + " , " + idObjPar.getOffset());
                    }
                }
            } else if (idObj.esVariable()) {
                Variable idObjVAR = (Variable) idObj;
                if (idObjVAR.getTipo().esArreglo()) {
                    // Es una asignacion de un arreglo completo pasado por valor
                    MepaH.generarInstruccion("POAR " + idObjVAR.getNivelLexico() + " , " + idObjVAR.getOffset() + " , " + ((Arreglo) idObjVAR.getTipo()).getCantElem());
                } else if (idObjVAR.getTipo().esSubrango()) {
                    // utilizo la operacion de chequeo de rangos provista por MEPa
                    MepaH.generarInstruccion("CONT " + ((Subrango) idObjVAR.getTipo()).getli() + " , " + ((Subrango) idObjVAR.getTipo()).getls());
                    MepaH.generarInstruccion("ALVL " + idObjVAR.getNivelLexico() + " , " + idObjVAR.getOffset());
                } else {
                    // es una variable de tipo simple
                    MepaH.generarInstruccion("ALVL " + idObjVAR.getNivelLexico() + " , " + idObjVAR.getOffset());
                }
            } else if (idObj.esFuncion()) {
                // getNombreNivel retorna el nivel del procedimiento o funcion asociado al nivel lexico actual
                Funcion idObjFCN = (Funcion) idObj;
                if (TdS.getTope().getIdentificador().toUpperCase().equals(identificador.toUpperCase())) {
                    MepaH.generarInstruccion("ALVL " + (idObjFCN.getNivelLexico()) + " , " + idObjFCN.getOffset());
                } else {
                    throw new ExcepcionErrorSemantico("En linea: " + ultimoToken.getLinea() + ". No se puede asignar un valor a un identificador de funcion fuera del nivel lexico local a la misma");
                }
            } else {
                throw new ExcepcionErrorSemantico("En linea: " + ultimoToken.getLinea() + ". Se esperaba identificador de variable o funcion");
            }
        } else {
            throw new ExcepcionErrorSemantico("En linea: " + ultimoToken.getLinea() + ". Los tipos involucrados no son compatibles");
        }
    } else {
        throw new ExcepcionErrorSemantico("En linea: " + ultimoToken.getLinea() + ". El identificador " + identificador + " no est√° definido");
    }
}
