public ResponseGroup execute(String message, String sourceAddress) {
    logger.info("--- Request is: '" + message + "'");
    Request req = null;
    ResponseGroup rg = new ResponseGroup();
    rg.setBack(null);
    rg.setBroadcast(null);
    rg.setPeer(null);
    try {
        // 1. Build request from message (a JSON string actually)
        req = ProtocolUtil.jsonToRequest(message);
        req.setAddress(sourceAddress);
        req.setLastError(null);
        // 2. Build a chain to process the request
        FilterChain chain = buildChain(req.getName());
        logger.info("Filter chain is starting...");
        chain.doNextFilter(req, rg);
        if (req.getLastError() != null) {
            logger.info("Got error when filtering request: " + req.getLastError());
            reportFilterError(Resources.RSP_ERROR, req, rg);
        }
    } catch (Exception e) {
        if (req.getLastError() == null) {
            req.setLastError("Internal error occured.");
        }
        logger.debug("Exception raised.", e);
        reportFilterError(Resources.RSP_SERVER_ERROR, req, rg);
    }
    try {
        convertResponsesToJson(rg);
    } catch (Exception ex) {
        logger.error("Internal error: couldn't convert responses to JSON.", ex);
        return null;
    }
    logger.info("Responses are ready: " + rg.toString());
    return rg;
}
