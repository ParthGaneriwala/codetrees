void flh_regular() // Regular floating horizon - no shading
// ======================================
{
    FHR[] fhr = new FHR[1024];
    for (int i = 0; i < 1024; ++i) fhr[i] = new FHR();
    // clock_t btime;  /* this type is defined in time.h */
    // double cps = (double)CLOCKS_PER_SEC;
    // , xtag, ytag, ztag;
    float z, X, Y;
    float zsa, zca, zsb, zcb;
    int XS, YS, firstXS, lastXS;
    int j, jstep;
    // btime = clock();
    // memset(screen, 0, (Maxx+1)*(Maxy+1));
    // TODO: init array
    // TODO: what is radius?
    float RADIUS = 10.0f;
    firstXS = Midx + (int) (-RADIUS * Ratio);
    lastXS = Midx + (int) (RADIUS * Ratio);
    float r1, u, v, w, y1, z1;
    float xtag, ytag, ztag;
    // printf("\nD1 = %g\n", D1);
    for (XS = firstXS; XS <= lastXS; XS++) {
        // Initialize min value in column.
        fhr[XS].ymin = Integer.MAX_VALUE;
        // Initialize max value in column.
        fhr[XS].ymax = Integer.MIN_VALUE;
    }
    // TODO: T_STEP and FUN_MAX
    float T_STEP = 0.3f;
    float FUN_MAX = 1.0f;
    for (z = NEG_ST; z <= POS_ST; z += T_STEP) {
        zsb = z * Sinb;
        zcb = z * Cosb;
        zsa = z * Sina;
        zca = z * Cosa;
        if (FUN_MAX * Sina + zca <= -D2)
            continue;
        for (XS = firstXS; XS <= lastXS; XS++) {
            X = (XS - Midx) / Ratio;
            xtag = X * Cosb + zsb;
            ztag = -X * Sinb + zcb;
            // calculate function
            ytag = FUNC(xtag, ztag);
            Y = ytag * Cosa - zsa;
            r1 = X * (zca + D3) / D1;
            u = r1 * Cosb + zsb;
            v = -r1 * Sinb + zcb;
            w = FUNC(u, v);
            y1 = w * Cosa - zsa;
            z1 = w * Sina + zca;
            Y = y1 * D1 / (z1 + D3);
            // TODO: check validity
            YS = (int) Math.round(Y * Ratio + Midy);
            // don't waste time on
            if (YS < 0)
                YS = -1;
            // invisible pixels
            if (YS > Maxy)
                YS = Maxy + 1;
            if (fhr[XS].ymin == Integer.MAX_VALUE && fhr[XS].ymax == Integer.MIN_VALUE) {
                // First pixel in column:
                fhr[XS].ymin = fhr[XS].ymax = fhr[XS].yprev = YS;
                if (// check if first column
                XS == firstXS)
                    Putpixel(XS, YS, 0, 0.0f);
                else
                    // draw line segment for continuity
                    Line(XS - 1, fhr[XS - 1].yprev, XS, YS);
            } else // not first pixel in column - check if visible:
            {
                if (// below minimum for column
                YS < fhr[XS].ymin) {
                    fhr[XS].ymin = fhr[XS].yprev = YS;
                    if (// check if first column
                    XS == firstXS)
                        Putpixel(XS, YS, 0, 0.0f);
                    else
                        // draw line segment for continuity
                        Line(XS - 1, fhr[XS - 1].ymin, XS, YS);
                } else if (// above maximum for column
                YS > fhr[XS].ymax) {
                    fhr[XS].ymax = fhr[XS].yprev = YS;
                    if (// check if first column
                    XS == firstXS)
                        Putpixel(XS, YS, 0, 0.0f);
                    else
                        // draw line segment for continuity
                        Line(XS - 1, fhr[XS - 1].ymax, XS, YS);
                } else if (// check if partial line needed:
                XS > firstXS) {
                    if (fhr[XS - 1].yprev > fhr[XS].ymax)
                        Line(XS - 1, fhr[XS - 1].yprev, XS, fhr[XS].ymax);
                    else if (fhr[XS - 1].yprev < fhr[XS].ymin)
                        Line(XS - 1, fhr[XS - 1].yprev, XS, fhr[XS].ymin);
                }
            }
        }
    // of x axis for
    }
// of z axis for
// write image to file:
// if (Write_flag)
// for (XS = firstXS; XS <= lastXS; XS++)
// { for (j=0; j<=Maxy; j++)
// { int val = (screen[XS][j]!=0) ? 0 : 255 ;
// fputc(val, Imgfile);
// if (fputc(val, Imgfile) == EOF)
// Errexit("Error writing to Imgfile in flh_regular.");
// }
// }
// printf("\nElapsed time: %lg sec.\n", (clock()-btime)/cps);
}
