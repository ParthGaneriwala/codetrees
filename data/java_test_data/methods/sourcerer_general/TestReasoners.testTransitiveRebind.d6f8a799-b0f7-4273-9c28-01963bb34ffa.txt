public void testTransitiveRebind() {
    Graph data = Factory.createGraphMem();
    Node C1 = Node.createURI("C1");
    Node C2 = Node.createURI("C2");
    Node C3 = Node.createURI("C3");
    Node C4 = Node.createURI("C4");
    data.add(new Triple(C1, RDFS.subClassOf.asNode(), C2));
    data.add(new Triple(C2, RDFS.subClassOf.asNode(), C3));
    Reasoner reasoner = TransitiveReasonerFactory.theInstance().create(null);
    assertTrue(reasoner.supportsProperty(RDFS.subClassOf));
    assertTrue(!reasoner.supportsProperty(RDFS.domain));
    InfGraph infgraph = reasoner.bind(data);
    TestUtil.assertIteratorValues(this, infgraph.find(C1, null, null), new Object[] { new Triple(C1, RDFS.subClassOf.asNode(), C1), new Triple(C1, RDFS.subClassOf.asNode(), C2), new Triple(C1, RDFS.subClassOf.asNode(), C3) });
    Graph data2 = Factory.createGraphMem();
    data2.add(new Triple(C1, RDFS.subClassOf.asNode(), C2));
    data2.add(new Triple(C2, RDFS.subClassOf.asNode(), C4));
    infgraph.rebind(data2);
    // Incremental additions
    Node a = Node.createURI("a");
    Node b = Node.createURI("b");
    Node c = Node.createURI("c");
    infgraph.add(new Triple(a, RDFS.subClassOf.asNode(), b));
    infgraph.add(new Triple(b, RDFS.subClassOf.asNode(), c));
    TestUtil.assertIteratorValues(this, infgraph.find(b, RDFS.subClassOf.asNode(), null), new Object[] { new Triple(b, RDFS.subClassOf.asNode(), c), new Triple(b, RDFS.subClassOf.asNode(), b) });
    TestUtil.assertIteratorValues(this, infgraph.find(a, RDFS.subClassOf.asNode(), null), new Object[] { new Triple(a, RDFS.subClassOf.asNode(), a), new Triple(a, RDFS.subClassOf.asNode(), b), new Triple(a, RDFS.subClassOf.asNode(), c) });
    Node p = Node.createURI("p");
    Node q = Node.createURI("q");
    Node r = Node.createURI("r");
    infgraph.add(new Triple(p, RDFS.subPropertyOf.asNode(), q));
    infgraph.add(new Triple(q, RDFS.subPropertyOf.asNode(), r));
    TestUtil.assertIteratorValues(this, infgraph.find(q, RDFS.subPropertyOf.asNode(), null), new Object[] { new Triple(q, RDFS.subPropertyOf.asNode(), q), new Triple(q, RDFS.subPropertyOf.asNode(), r) });
    TestUtil.assertIteratorValues(this, infgraph.find(p, RDFS.subPropertyOf.asNode(), null), new Object[] { new Triple(p, RDFS.subPropertyOf.asNode(), p), new Triple(p, RDFS.subPropertyOf.asNode(), q), new Triple(p, RDFS.subPropertyOf.asNode(), r) });
}
