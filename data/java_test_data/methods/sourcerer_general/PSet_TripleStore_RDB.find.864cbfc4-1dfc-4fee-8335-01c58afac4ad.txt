public ExtendedIterator find(TripleMatch t, IDBID graphID) {
    String astName = getTblName();
    Node subj_node = t.getMatchSubject();
    Node pred_node = t.getMatchPredicate();
    Node obj_node = t.getMatchObject();
    Node_Literal objLit;
    // String gid = graphID.getID().toString();
    int gid = ((DBIDInt) graphID).getIntID();
    boolean notFound = false;
    int hack = 0;
    ResultSetTripleIterator result = new ResultSetTripleIterator(this, graphID);
    PreparedStatement ps = null;
    String subj = null;
    String pred = null;
    String obj = null;
    String op = "selectStatement";
    String qual = "";
    int args = 1;
    if (hack != 0) {
        subj_node = pred_node = obj_node = null;
    }
    if (subj_node != null) {
        subj = m_driver.nodeToRDBString(subj_node, false);
        if (subj == null)
            notFound = true;
        else
            qual += "S";
    }
    if (pred_node != null) {
        pred = m_driver.nodeToRDBString(pred_node, false);
        if (pred == null)
            notFound = true;
        else
            qual += "P";
    }
    if (obj_node != null) {
        obj = m_driver.nodeToRDBString(obj_node, false);
        if (obj == null)
            notFound = true;
        else
            qual += "O";
    }
    if (notFound == false)
        try {
            op += qual;
            /*
				ps = m_sql.getPreparedSQLStatement(op, getTblName());
				if ( qual.equals("") ) {
					ps = m_sql.getPreparedSQLStatement(op+"Limit", getTblName(),Integer.toString(gid));
				
					// Statement stmt = m_driver.getConnection().getConnection().createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
					//			  java.sql.ResultSet.CONCUR_READ_ONLY);
					// stmt.setFetchSize(10);
					// String qry = "SELECT S.Subj, S.Prop, S.Obj FROM " + getTblName() + " S WHERE S.GraphID = "
					// 	+ gid;
					// ResultSet res = stmt.executeQuery(qry);
					result = new ResultSetLimitTripleIter(this, graphID);
				} else {
				//*/
            ps = m_sql.getPreparedSQLStatement(op, getTblName());
            if (obj != null)
                ps.setString(args++, obj);
            if (subj != null)
                ps.setString(args++, subj);
            if (pred != null)
                ps.setString(args++, pred);
            ps.setInt(args++, gid);
            // */ }
            m_sql.executeSQL(ps, op, result);
        // m_sql.returnPreparedSQLStatement(ps,op);
        } catch (Exception e) {
            notFound = true;
            logger.debug("find encountered exception: args=" + args + " err: ", e);
            // Rethrow in case there is a recovery option
            throw new JenaException("Exception during database access", e);
        }
    if (notFound)
        result.close();
    return (new TripleMatchIterator(t.asTriple(), result));
}
