protected void processVmMigrate(SimEvent ev, boolean ack) {
    Object tmp = ev.getData();
    if (!(tmp instanceof Map<?, ?>)) {
        throw new ClassCastException("The data object must be Map<String, Object>");
    }
    @SuppressWarnings("unchecked") Map<String, Object> migrate = (HashMap<String, Object>) tmp;
    Vm vm = (Vm) migrate.get("vm");
    Host host = (Host) migrate.get("host");
    boolean result = host.vmCreate(vm);
    if (!result) {
        Log.printLine("Allocation with best effort...");
        // VM allocation may fail, because utilization may change due to migration delay
        result = host.vmCreate(vm);
    }
    if (ack) {
        int[] data = new int[3];
        data[0] = getId();
        data[1] = vm.getId();
        if (result) {
            data[2] = CloudSimTags.TRUE;
        } else {
            data[2] = CloudSimTags.FALSE;
        }
        sendNow(ev.getSource(), CloudSimTags.VM_CREATE_ACK, data);
    }
    double amount = 0.0;
    if (debts.containsKey(vm.getUserId())) {
        amount = debts.get(vm.getUserId());
    }
    amount += getCharacteristics().getCostPerMem() * vm.getRam();
    amount += getCharacteristics().getCostPerStorage() * vm.getSize();
    debts.put(vm.getUserId(), amount);
    Log.formatLine("%.2f: Migration of VM #%d to Host #%d is completed", CloudSim.clock(), vm.getId(), host.getId());
    vm.setInMigration(false);
}
