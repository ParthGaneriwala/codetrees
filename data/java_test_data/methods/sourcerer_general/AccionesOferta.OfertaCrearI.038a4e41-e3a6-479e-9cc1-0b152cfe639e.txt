public ActionForward OfertaCrearI(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
    // Salidas
    final String SALIDA_0 = "ofertaCrear";
    String salida = SALIDA_0;
    Session s = HibernateUtil.getSessionFactory().getCurrentSession();
    Transaction tr = s.beginTransaction();
    try {
        HttpSession sess = request.getSession();
        {
            FOferta fFOferta = (FOferta) sess.getAttribute("FOferta");
            if (fFOferta == null) {
                fFOferta = new FOferta();
                sess.setAttribute("FOferta", fFOferta);
            } else {
                fFOferta.reset(mapping, request);
            }
            // Feed for combo listPeriodo.
            {
                java.util.List<ve.usb.cohesion.runtime.Pair> list = (java.util.List<ve.usb.cohesion.runtime.Pair>) s.createQuery("select new ve.usb.cohesion.runtime.Pair(nombre, idPeriodo) " + "from Periodo").list();
                list.add(0, new ve.usb.cohesion.runtime.Pair("Ninguna", 0));
                fFOferta.setListPeriodo(list);
            }
            if (Integer.parseInt(sess.getAttribute("tipoUsuario").toString()) != 0) {
                // Feed for combo listPlanDeEstudios.
                {
                    java.util.List<ve.usb.cohesion.runtime.Pair> list = (java.util.List<ve.usb.cohesion.runtime.Pair>) s.createQuery("select new ve.usb.cohesion.runtime.Pair(carrera, idPlan) " + "from PlanDeEstudios where coordinacion = " + request.getParameter("idCoordinacion")).list();
                    list.add(0, new ve.usb.cohesion.runtime.Pair("Ninguna", 0));
                    fFOferta.setListPlanDeEstudios(list);
                }
                // Feed for combo listRequisitos.
                {
                    java.util.List<ve.usb.cohesion.runtime.Pair> list = (java.util.List<ve.usb.cohesion.runtime.Pair>) s.createQuery("select new ve.usb.cohesion.runtime.Pair(asignatura.codigo, idRequisito) " + "from Requisitos where grupo.planDeEstudios.coordinacion = " + request.getParameter("idCoordinacion")).list();
                    list.add(0, new ve.usb.cohesion.runtime.Pair("Ninguna", 0));
                    fFOferta.setListRequisitos(list);
                }
            } else {
                // Feed for combo listPlanDeEstudios.
                {
                    java.util.List<ve.usb.cohesion.runtime.Pair> list = (java.util.List<ve.usb.cohesion.runtime.Pair>) s.createQuery("select new ve.usb.cohesion.runtime.Pair(carrera, idPlan) " + "from PlanDeEstudios").list();
                    list.add(0, new ve.usb.cohesion.runtime.Pair("Ninguna", 0));
                    fFOferta.setListPlanDeEstudios(list);
                }
                // Feed for combo listRequisitos.
                {
                    java.util.List<ve.usb.cohesion.runtime.Pair> list = (java.util.List<ve.usb.cohesion.runtime.Pair>) s.createQuery("select new ve.usb.cohesion.runtime.Pair(asignatura.codigo, idRequisito) " + "from Requisitos").list();
                    list.add(0, new ve.usb.cohesion.runtime.Pair("Ninguna", 0));
                    fFOferta.setListRequisitos(list);
                }
            }
        }
        tr.commit();
    } catch (Exception ex) {
        tr.rollback();
        throw ex;
    }
    return mapping.findForward(salida);
}
