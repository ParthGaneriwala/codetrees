public void testContributionCalculationForClassifiedsPlaced() throws SQLException {
    LookupContribution lookupContribution = new LookupContribution();
    lookupContribution.setConstant("200901101230");
    lookupContribution.setDescription("Test Classifieds Placed Contribution");
    lookupContribution.setPointsAwarded(2);
    assertNotNull(lookupContribution);
    boolean result = lookupContribution.insert(db);
    assertTrue("Contribution was not inserted ", result);
    assertTrue("Contribution did not have an id ", lookupContribution.getId() > -1);
    assertTrue("Contribution had run date when it should not have had one ", lookupContribution.getRunDate() == null);
    // Insert project so that it can be referred to by the test
    Project project = new Project();
    project.setTitle("Project SQL Test");
    project.setShortDescription("Project SQL Test testContributionCalculationForClassifiedsPlaced");
    project.setRequestDate(new Timestamp(System.currentTimeMillis() - 10));
    project.setEstimatedCloseDate((Timestamp) null);
    project.setRequestedBy("Project SQL Test Requested By");
    project.setRequestedByDept("Project SQL Test Requested By Department");
    project.setBudgetCurrency("USD");
    project.setBudget("10000.75");
    project.setGroupId(GROUP_ID);
    project.setApprovalDate(new Timestamp(System.currentTimeMillis() - 10));
    project.setEnteredBy(USER_ID);
    project.setModifiedBy(USER_ID);
    assertNotNull(project);
    boolean projectResult = project.insert(db);
    assertTrue("Project was not inserted", projectResult);
    assertTrue("Inserted project did not have an id", project.getId() > -1);
    // Inserting Classified
    Classified newClassified = new Classified();
    newClassified.setProjectId(project.getId());
    newClassified.setTitle("Classified Title");
    newClassified.setDescription("Classified Description");
    newClassified.setPublishDate(new Timestamp(System.currentTimeMillis() - 1000L * 60 * 60 * 10));
    newClassified.setExpirationDate(new Timestamp(System.currentTimeMillis() - 1000L * 60 * 60 * 1));
    newClassified.setEnteredBy(USER_ID);
    newClassified.setModifiedBy(USER_ID);
    boolean adInserted = newClassified.insert(db);
    assertTrue("Classified was not inserted", adInserted);
    assertTrue("Classified did not have an id", newClassified.getId() > -1);
    // load the user to get the points before the calculation of his contribution
    User user = new User(db, USER_ID);
    int originalPoints = user.getPoints();
    // load the user contributions to get the points before the calculation of his contribution
    UserContributionLogList userContributionLogList = new UserContributionLogList();
    userContributionLogList.setContributionId(lookupContribution.getId());
    userContributionLogList.setUserId(USER_ID);
    userContributionLogList.setProjectId(project.getId());
    userContributionLogList.buildList(db);
    int numberOfUserContributions = userContributionLogList.size();
    // Insert user contribution log record
    ContributionCalculationForClassifiedsPlaced contributionCalculationForClassifiedsPlaced = new ContributionCalculationForClassifiedsPlaced();
    contributionCalculationForClassifiedsPlaced.process(db, lookupContribution);
    // test that the run date in lookup contribution has been set
    int lookupContributionId = lookupContribution.getId();
    lookupContribution = new LookupContribution(db, lookupContributionId);
    assertTrue("Contribution had run date when it should not have had one ", lookupContribution.getRunDate() != null);
    // load the user to get the points after the calculation of his contribution
    user = new User(db, USER_ID);
    // test that the points in the user record is set
    assertTrue("Contribution points is not set ", user.getPoints() > originalPoints);
    // test that a user contribution log has been inserted
    userContributionLogList = new UserContributionLogList();
    userContributionLogList.setContributionId(lookupContribution.getId());
    userContributionLogList.setUserId(USER_ID);
    userContributionLogList.setProjectId(project.getId());
    userContributionLogList.buildList(db);
    // TODO: this test may need revision
    assertTrue("User contribution log not inserted ", userContributionLogList.size() > numberOfUserContributions);
    // Reset User Points
    User.resetPoints(db, USER_ID);
    // Delete test contribution which also deletes the contribution log records
    lookupContribution.delete(db);
    // Delete test project and classifieds
    project.delete(db, (String) null);
}
