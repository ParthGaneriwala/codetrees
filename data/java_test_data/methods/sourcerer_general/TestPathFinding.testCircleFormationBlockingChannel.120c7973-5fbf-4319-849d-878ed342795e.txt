@Test
@DirtiesContext
public void testCircleFormationBlockingChannel() throws Exception {
    configureMinimalGame();
    Rectangle rectangle1 = new Rectangle(0, 0, 1000, 300);
    Rectangle rectangle2 = new Rectangle(0, 300, 300, 500);
    Rectangle rectangle3 = new Rectangle(500, 300, 300, 500);
    SyncBaseItem target = createSyncBaseItem(TEST_ATTACK_ITEM_ID, new Index(400, 400), new Id(1, -100, -100));
    SyncBaseItem syncBaseItem = createSyncBaseItem(TEST_ATTACK_ITEM_ID, new Index(400, 400), new Id(1, -100, -100));
    List<CircleFormation.CircleFormationItem> items = new ArrayList<CircleFormation.CircleFormationItem>();
    items.add(new CircleFormation.CircleFormationItem(syncBaseItem, 160));
    items.add(new CircleFormation.CircleFormationItem(syncBaseItem, 160));
    items.add(new CircleFormation.CircleFormationItem(syncBaseItem, 160));
    items.add(new CircleFormation.CircleFormationItem(syncBaseItem, 160));
    items.add(new CircleFormation.CircleFormationItem(syncBaseItem, 160));
    items.add(new CircleFormation.CircleFormationItem(syncBaseItem, 160));
    items.add(new CircleFormation.CircleFormationItem(syncBaseItem, 160));
    CircleFormation circleFormation = new CircleFormation(target.getRectangle(), MathHelper.SOUTH - 0.35, items);
    List<Rectangle> expected = new ArrayList<Rectangle>();
    expected.add(new Rectangle(395, 504, 100, 100));
    expected.add(new Rectangle(352, 651, 100, 100));
    expected.add(new Rectangle(313, 790, 100, 100));
    expected.add(new Rectangle(74, 864, 100, 100));
    expected.add(new Rectangle(174, 906, 100, 100));
    expected.add(new Rectangle(274, 928, 100, 100));
    expected.add(new Rectangle(374, 932, 100, 100));
    List<Rectangle> rectangles = new ArrayList<Rectangle>();
    int count = 0;
    while (circleFormation.hasNext()) {
        CircleFormation.CircleFormationItem circleFormationItem = circleFormation.calculateNextEntry();
        Assert.assertNotNull(circleFormationItem.getDestinationHint());
        if (rectangle1.adjoinsEclusive(circleFormationItem.getRectangle()) || rectangle2.adjoinsEclusive(circleFormationItem.getRectangle()) || rectangle3.adjoinsEclusive(circleFormationItem.getRectangle())) {
            continue;
        }
        if (count < 1) {
            Assert.assertTrue(circleFormationItem.isInRange());
        } else {
            Assert.assertFalse(circleFormationItem.isInRange());
        }
        count++;
        circleFormation.lastAccepted();
        rectangles.add(Rectangle.generateRectangleFromMiddlePoint(circleFormationItem.getDestinationHint(), 100, 100));
    }
    for (int i = 0, rectanglesSize = rectangles.size(); i < rectanglesSize; i++) {
        Assert.assertEquals(expected.get(i), rectangles.get(i));
    }
    Assert.assertFalse(Rectangle.adjoinsExclusive(rectangles));
}
