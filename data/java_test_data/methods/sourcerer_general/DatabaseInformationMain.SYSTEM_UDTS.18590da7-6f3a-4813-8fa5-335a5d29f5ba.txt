Table SYSTEM_UDTS(Session session) {
    Table t = sysTables[SYSTEM_UDTS];
    if (t == null) {
        t = createBlankTable(sysTableHsqlNames[SYSTEM_UDTS]);
        addColumn(t, "TYPE_CAT", SQL_IDENTIFIER);
        addColumn(t, "TYPE_SCHEM", SQL_IDENTIFIER);
        addColumn(t, "TYPE_NAME", SQL_IDENTIFIER);
        addColumn(t, "CLASS_NAME", CHARACTER_DATA);
        addColumn(t, "DATA_TYPE", Type.SQL_INTEGER);
        addColumn(t, "REMARKS", CHARACTER_DATA);
        addColumn(t, "BASE_TYPE", Type.SQL_SMALLINT);
        // 
        HsqlName name = HsqlNameManager.newInfoSchemaObjectName(sysTableHsqlNames[SYSTEM_UDTS].name, false, SchemaObject.INDEX);
        t.createPrimaryKeyConstraint(name, null, false);
        return t;
    }
    boolean translateDTI = database.getProperties().isPropertyTrue(HsqlDatabaseProperties.jdbc_translate_dti_types);
    PersistentStore store = session.sessionData.getRowStore(t);
    // column number mappings
    final int type_catalog = 0;
    final int type_schema = 1;
    final int type_name = 2;
    final int class_name = 3;
    final int data_type = 4;
    final int remarks = 5;
    final int base_type = 6;
    Iterator it = database.schemaManager.databaseObjectIterator(SchemaObject.TYPE);
    while (it.hasNext()) {
        Type distinct = (Type) it.next();
        if (!distinct.isDistinctType()) {
            continue;
        }
        Object[] data = t.getEmptyRowData();
        Type type = distinct;
        if (translateDTI) {
            if (type.isIntervalType()) {
                type = CharacterType.getCharacterType(Types.SQL_VARCHAR, type.displaySize());
            } else if (type.isDateTimeTypeWithZone()) {
                type = ((DateTimeType) type).getDateTimeTypeWithoutZone();
            }
        }
        data[type_catalog] = database.getCatalogName().name;
        data[type_schema] = distinct.getSchemaName().name;
        data[type_name] = distinct.getName().name;
        data[class_name] = type.getJDBCClassName();
        data[data_type] = ValuePool.getInt(Types.DISTINCT);
        data[remarks] = null;
        data[base_type] = ValuePool.getInt(type.getJDBCTypeCode());
        t.insertSys(store, data);
    }
    return t;
}
