protected void buildTree(GridData grid, GridLayout layout) {
    HierarchyStringTree dataTree;
    ArrayList<HierarchyStringTreeNode> children;
    ArrayList<TreeItem> uiItems = new ArrayList<TreeItem>();
    TreeItem curItem, seriesItem;
    this.tree.removeAll();
    this.controller.clearSeriesTree();
    topicController.buildTopicTree();
    dataTree = topicController.getTree();
    this.setLayout(layout);
    if (dataTree.getRoot() != null) {
        curItem = new TreeItem(tree, SWT.NULL);
        uiItems.add(curItem);
        curItem.setText("Root");
        children = dataTree.getRoot().getChildren();
        seriesItem = new TreeItem(controller.getSeriesTree(), SWT.NULL);
        seriesItem.setText("Root");
        for (HierarchyStringTreeNode node : children) {
            buildTreeHelper(curItem, seriesItem, node, uiItems);
        }
    }
    // Preprocess some search indices after tree building
    int lastIndex = 0;
    this.sortedItems = new TreeItem[uiItems.size()];
    this.sortedItems = uiItems.toArray(this.sortedItems);
    Arrays.sort(this.sortedItems, new TreeItemComparator());
    for (char i = 'a'; i <= 'z'; i++) {
        for (int j = lastIndex; j < this.sortedItems.length; j++) {
            if (this.sortedItems[j].getText().toLowerCase().charAt(0) == i) {
                this.hashSortAlphas.put(new Character(i).toString(), j);
                lastIndex = j;
                break;
            }
        }
    }
}
