public int doEndTag() {
    try {
        PortletRequest renderRequest = (PortletRequest) pageContext.getRequest().getAttribute(org.apache.pluto.tags.Constants.PORTLET_REQUEST);
        RenderResponse renderResponse = (RenderResponse) pageContext.getRequest().getAttribute(org.apache.pluto.tags.Constants.PORTLET_RESPONSE);
        PagedListInfo pagedListInfo = null;
        // Check the request first
        pagedListInfo = (PagedListInfo) pageContext.getRequest().getAttribute(object);
        // Check the portlet next
        if (pagedListInfo == null) {
            if (renderRequest != null) {
                pagedListInfo = (PagedListInfo) renderRequest.getAttribute(object);
                if (pagedListInfo == null) {
                    pagedListInfo = (PagedListInfo) renderRequest.getPortletSession().getAttribute(object);
                }
            }
        }
        // Check the session last
        if (pagedListInfo == null) {
            pagedListInfo = (PagedListInfo) pageContext.getSession().getAttribute(object);
        }
        // Display the control
        if (pagedListInfo != null) {
            String ctx = ((HttpServletRequest) pageContext.getRequest()).getContextPath();
            boolean useCtx = true;
            if (url != null && url.startsWith(ctx)) {
                useCtx = false;
            }
            pagedListInfo.setShowForm(showForm);
            pagedListInfo.setResetList(resetList);
            pagedListInfo.setEnableJScript(enableJScript);
            JspWriter out = this.pageContext.getOut();
            String prevClass = pagedListInfo.getHasPreviousPageLink() ? CLASS_PREVIOUS_ENABLED : CLASS_PREVIOUS_DISABLED;
            String nextClass = pagedListInfo.getHasNextPageLink() ? CLASS_NEXT_ENABLED : CLASS_NEXT_DISABLED;
            if (enableJScript) {
                out.write("<SCRIPT LANGUAGE=\"JavaScript\" TYPE=\"text/javascript\" SRC=\"" + ctx + "/javascript/pageListInfo.js\"></SCRIPT>");
            }
            if (pagedListInfo.getMaxRecords() > 0 || pagedListInfo.getNumberOfPages() > 1) {
                out.write("<div class=\"pagination\">");
            }
            if (pagedListInfo.getMaxRecords() > 0) {
                out.write("<em>" + pagedListInfo.getMaxRecords() + " result" + (pagedListInfo.getMaxRecords() == 1 ? "" : "s") + " found</em>");
            }
            if (pagedListInfo.getNumberOfPages() > 1) {
                out.write("<ol class=\"" + CLASS_PAGINATE + "\">");
                if (url != null) {
                    int prevPage = 1;
                    if (pagedListInfo.getCurrentPageNumber() != 1) {
                        prevPage = pagedListInfo.getCurrentPageNumber() - 1;
                        String prevLink = (useCtx ? ctx : "") + url + ((prevPage != 1) ? "/" + prevPage : "");
                        out.write("<li class=\"" + prevClass + "\"><a href=\"" + getCompleteLink(prevLink) + "\">&lt; Previous</a></li>");
                    } else {
                        out.write("<li class=\"" + prevClass + "\"><a>&lt; Previous</a></li>");
                    }
                } else {
                    String previousPageLink = pagedListInfo.getPreviousPageLink("&lt; Previous", "&lt; Previous", null, renderResponse);
                    if (!previousPageLink.contains("<a")) {
                        previousPageLink = "<a>" + previousPageLink + "</a>";
                    }
                    out.write("<li class=\"" + prevClass + "\">" + previousPageLink + "</li>");
                }
                // @TODO make number of links shown available to customize for cases where pagination needs to be larger or smaller
                // this might be useful to be dynamic
                int PRIOR_LIMIT = 3;
                int AFTER_LIMIT = 3;
                int padPrior = 0;
                int padAfter = 0;
                int currentPage = pagedListInfo.getCurrentPageNumber();
                int lastPage = pagedListInfo.getNumberOfPages();
                int pageStart = currentPage - PRIOR_LIMIT;
                int pageEnd = currentPage + AFTER_LIMIT;
                // Make Sure pageStart and pageEnd fall within legal ranges and calculate any padding
                if (pageStart < 1) {
                    padAfter += 0 - pageStart;
                    pageStart = 1;
                }
                if (pageEnd > lastPage) {
                    padPrior += pageEnd - lastPage;
                    pageEnd = lastPage;
                }
                // Check to see if prior or after can get extra padding
                if (padAfter > 0 && pageEnd != lastPage) {
                    pageEnd += padAfter;
                    if (pageEnd > lastPage)
                        pageEnd = lastPage;
                }
                if (padPrior > 0 && pageStart != 1) {
                    pageStart -= padPrior;
                    if (pageStart < 1)
                        pageStart = 1;
                }
                if (pageStart != 1) {
                    // Show 1st 2 @TODO make dynamic
                    for (int i = 1; i < 3; i++) {
                        // don't print link twice
                        if (pageStart == i)
                            break;
                        String link = null;
                        if (url != null) {
                            link = (useCtx ? ctx : "") + url + ((i != 1) ? "/" + i : "");
                        } else {
                            link = pagedListInfo.getLinkForPage(i, renderResponse);
                        }
                        out.write("<li class=\"page\"><a href=\"" + getCompleteLink(link) + "\">" + i + "</a></li>");
                    }
                    if (pageStart > 3) {
                        // only show ... if there was a break in the counting
                        out.write("<li>...</li>");
                    }
                }
                for (int i = pageStart; i != pageEnd + 1; i++) {
                    if (i == pagedListInfo.getCurrentPageNumber()) {
                        out.write("<li class=\"" + CLASS_ACTIVE + "\"><a>" + i + "</a></li>");
                    } else {
                        String link = null;
                        if (url != null) {
                            link = (useCtx ? ctx : "") + url + ((i != 1) ? "/" + i : "");
                        } else {
                            link = pagedListInfo.getLinkForPage(i, renderResponse);
                        }
                        out.write("<li class=\"page\"><a href=\"" + getCompleteLink(link) + "\">" + i + "</a></li>");
                    }
                }
                if (pageEnd != lastPage) {
                    if (pageEnd < lastPage - 2) {
                        out.write("<li>...</li>");
                    }
                    // Show last 2 @TODO make dynamic
                    for (int i = lastPage - 1; i <= lastPage; i++) {
                        // don't print link twice
                        if (pageEnd == i)
                            continue;
                        String link = null;
                        if (url != null) {
                            link = (useCtx ? ctx : "") + url + ((i != 1) ? "/" + i : "");
                        } else {
                            link = pagedListInfo.getLinkForPage(i, renderResponse);
                        }
                        out.write("<li class=\"page\"><a href=\"" + getCompleteLink(link) + "\">" + i + "</a></li>");
                    }
                }
                if (url != null) {
                    int nextPage = 1;
                    if (pagedListInfo.getCurrentPageNumber() != pagedListInfo.getNumberOfPages()) {
                        nextPage = pagedListInfo.getCurrentPageNumber() + 1;
                        String nextLink = (useCtx ? ctx : "") + url + "/" + nextPage;
                        out.write("<li class=\"" + nextClass + "\"><a href=\"" + getCompleteLink(nextLink) + "\">Next &gt;</a></li>");
                    } else {
                        out.write("<li class=\"" + nextClass + "\"><a>Next &gt;</a></li>");
                    }
                } else {
                    String nextPageLink = pagedListInfo.getNextPageLink("Next &gt;", "Next &gt;", null, renderResponse);
                    if (!nextPageLink.contains("<a")) {
                        nextPageLink = "<a>" + nextPageLink + "</a>";
                    }
                    out.write("<li class=\"" + nextClass + "\">" + nextPageLink + "</li>");
                }
                out.write("</ol>");
            }
            if (pagedListInfo.getMaxRecords() > 0 || pagedListInfo.getNumberOfPages() > 1) {
                out.write("</div>");
            }
        } else {
            LOG.error("Control not found in request: " + object);
        }
    } catch (IOException e) {
        LOG.error("doEndTag error", e);
    }
    return EVAL_PAGE;
}
