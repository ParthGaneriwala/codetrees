private Node trySimplifyUnusedResult(Node n, boolean removeUnused) {
    Node result = n;
    // Simplify the results of conditional expressions
    switch(n.getType()) {
        case Token.HOOK:
            Node trueNode = trySimplifyUnusedResult(n.getFirstChild().getNext());
            Node falseNode = trySimplifyUnusedResult(n.getLastChild());
            // x ? 1 : 1 --> null
            if (trueNode == null && falseNode != null) {
                n.setType(Token.OR);
                Preconditions.checkState(n.getChildCount() == 2);
            } else if (trueNode != null && falseNode == null) {
                n.setType(Token.AND);
                Preconditions.checkState(n.getChildCount() == 2);
            } else if (trueNode == null && falseNode == null) {
                result = trySimplifyUnusedResult(n.getFirstChild());
            } else {
                // The structure didn't change.
                result = n;
            }
            break;
        case Token.AND:
        case Token.OR:
            // Try to remove the second operand from a AND or OR operations:
            // x() || f --> x()
            // x() && f --> x()
            Node conditionalResultNode = trySimplifyUnusedResult(n.getLastChild());
            if (conditionalResultNode == null) {
                Preconditions.checkState(n.hasOneChild());
                // The conditionally executed code was removed, so
                // replace the AND/OR with its LHS or remove it if it isn't useful.
                result = trySimplifyUnusedResult(n.getFirstChild());
            }
            break;
        case Token.FUNCTION:
            // A function expression isn't useful if it isn't used, remove it and
            // don't bother to look at its children.
            result = null;
            break;
        case Token.COMMA:
            // We rewrite other operations as COMMA expressions (which will later
            // get split into individual EXPR_RESULT statement, if possible), so
            // we special case COMMA (we don't want to rewrite COMMAs as new COMMAs
            // nodes.
            Node left = trySimplifyUnusedResult(n.getFirstChild());
            Node right = trySimplifyUnusedResult(n.getLastChild());
            if (left == null && right == null) {
                result = null;
            } else if (left == null) {
                result = right;
            } else if (right == null) {
                result = left;
            } else {
                // The structure didn't change.
                result = n;
            }
            break;
        default:
            if (!NodeUtil.nodeTypeMayHaveSideEffects(n)) {
                // This is the meat of this function. The node itself doesn't generate
                // any side-effects but preserve any side-effects in the children.
                Node resultList = null;
                for (Node next, c = n.getFirstChild(); c != null; c = next) {
                    next = c.getNext();
                    c = trySimplifyUnusedResult(c);
                    if (c != null) {
                        c.detachFromParent();
                        if (resultList == null) {
                            // The first side-effect can be used stand-alone.
                            resultList = c;
                        } else {
                            // Leave the side-effects in-place, simplifying it to a COMMA
                            // expression.
                            resultList = new Node(Token.COMMA, resultList, c).copyInformationFrom(c);
                        }
                    }
                }
                result = resultList;
            }
    }
    // Fix up the AST, replace or remove the an unused node (if requested).
    if (n != result) {
        Node parent = n.getParent();
        if (result == null) {
            if (removeUnused) {
                parent.removeChild(n);
            } else {
                result = new Node(Token.EMPTY).copyInformationFrom(n);
                parent.replaceChild(n, result);
            }
        } else {
            // A new COMMA expression may not have an existing parent.
            if (result.getParent() != null) {
                result.detachFromParent();
            }
            n.getParent().replaceChild(n, result);
        }
        reportCodeChange();
    }
    return result;
}
