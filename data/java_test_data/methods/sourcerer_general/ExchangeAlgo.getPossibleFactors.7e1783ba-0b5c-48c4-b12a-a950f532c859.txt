public static Set<Integer> getPossibleFactors(byte factorIdx, byte timeOffset, BinaryTree<HistoryTreePayload> node) {
    HashSet<Integer> possibleFactors = new HashSet<Integer>();
    HashSet<Integer> excludedFactors = new HashSet<Integer>();
    BinaryTree<HistoryTreePayload> child = node;
    BinaryTree<HistoryTreePayload> tree = node.getParent();
    while (tree != null) {
        HistoryTreePayload payload = tree.getPayload();
        Question q = payload.question;
        if (q.getTimeOffset() == timeOffset && q.getIndex() == factorIdx && !q.isAboutHidden()) {
            boolean answer = tree.getRight() == child;
            if (answer) {
                if (q.getQuestionType() == Question.IN_SET_QUESTION) {
                    InSetQuestion question = (InSetQuestion) q;
                    for (Integer value : question.getValues()) {
                        possibleFactors.add(value);
                    }
                } else if (q.getQuestionType() == Question.IDENTITY_QUESTION) {
                    IdentityQuestion question = (IdentityQuestion) q;
                    possibleFactors.add(question.getValue());
                }
                // no need to go futher up the tree
                break;
            } else {
                if (q.getQuestionType() == Question.IN_SET_QUESTION) {
                    InSetQuestion question = (InSetQuestion) q;
                    for (Integer value : question.getValues()) {
                        excludedFactors.add(value);
                    }
                } else if (q.getQuestionType() == Question.IDENTITY_QUESTION) {
                    IdentityQuestion question = (IdentityQuestion) q;
                    excludedFactors.add(question.getValue());
                }
            }
        }
        child = tree;
        tree = tree.getParent();
    }
    if (possibleFactors.size() == 0) {
        // if haven't seen any, then all factors are possible
        Experiment exp = Experiment.getInstance();
        Dictionary dict = exp.getTupleDescription().getDictionary(factorIdx);
        for (DictionaryIterator it = dict.iterator(true); it.hasNext(); ) {
            possibleFactors.add(it.next());
        }
    }
    for (Integer value : excludedFactors) {
        possibleFactors.remove(value);
    }
    return possibleFactors;
}
