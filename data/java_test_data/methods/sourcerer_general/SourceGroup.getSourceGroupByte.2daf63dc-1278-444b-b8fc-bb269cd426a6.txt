public byte[] getSourceGroupByte(short blockNum, InetAddress gIp) {
    if (isChange) {
        if (System.currentTimeMillis() - lastFreshTime >= 5000) {
            refreshSNL();
            lastFreshTime = System.currentTimeMillis();
        }
    }
    HashMap<Integer, SourceNode> hm = new HashMap<Integer, SourceNode>();
    LanGroup lg = lanIpTable.get(gIp);
    if (lg != null) {
        lg.getLanSource(blockNum, hm);
    }
    Random random = new Random();
    int index = random.nextInt(sourceNodeList.size());
    if (sourceTable.size() != 0) {
        for (int i = 0; i < sourceNodeList.size(); i++) {
            if (index >= sourceNodeList.size()) {
                index = 0;
            }
            int sourceSessionId = sourceNodeList.get(index);
            SourceNode sn = sourceTable.get(sourceSessionId);
            if (sn != null) {
                if (sn.containsBlock(blockNum)) {
                    hm.put(sourceSessionId, sn);
                }
            }
            if (hm.size() == 100) {
                break;
            }
            index++;
        }
    }
    byte[] gb = new byte[2 + 12 * hm.size()];
    peer.tools.ByteShortSwitch.toByteArray((short) hm.size(), gb, 0);
    Iterator<Integer> it = hm.keySet().iterator();
    for (int i = 0; i < hm.size(); i++) {
        int sessionId = it.next();
        SourceNode sn = sourceTable.get(sessionId);
        System.arraycopy(sn.assistNodeIp.getAddress(), 0, gb, 2 + i * 12, 4);
        peer.tools.ByteIntSwitch.toByteArray(sn.assistNodePort, gb, 6 + i * 12);
        peer.tools.ByteIntSwitch.toByteArray(sn.assistSessionId, gb, 10 + i * 12);
    }
    // System.out.println("������"+hm.size()+"("+sourceTable.size()+")"+"���ڵ�"+" "+mdb+" "+blockNum);
    Iterator<Integer> it2 = hm.keySet().iterator();
    for (int i = 0; i < hm.size(); i++) {
        int sessionId = it2.next();
        SourceNode sn = sourceTable.get(sessionId);
    // System.out.println("KKK "+sn.assistNodePort+" "+sn.assistSessionId);
    }
    return gb;
}
