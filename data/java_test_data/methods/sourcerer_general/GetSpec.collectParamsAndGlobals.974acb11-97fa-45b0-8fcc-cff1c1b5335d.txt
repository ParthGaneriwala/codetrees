/**
 * Collects the parameters of <code>spec.args</code> and the static fields
 * in <code>scope</code>, whose types are class types.
 */
private static ParamAndGlobalVarInfo collectParamsAndGlobals(/* @ non_null */
Spec spec, /* @ non_null */
FindContributors scope) {
    ParamAndGlobalVarInfo vars = null;
    ParamAndGlobalVarInfo varPrev = null;
    // Add the parameters
    for (int i = 0; i < spec.dmd.args.size(); i++) {
        FormalParaDecl arg = spec.dmd.args.elementAt(i);
        TypeSig classSig;
        boolean isNonnull;
        if (i == 0 && arg == GC.thisvar.decl) {
            classSig = TypeSig.getSig(spec.dmd.getContainingClass());
            isNonnull = true;
        } else {
            classSig = Types.toClassTypeSig(arg.type);
            isNonnull = NonNullPragma(arg) != null;
            // FIXME
            isNonnull = false;
        }
        if (classSig != null) {
            // The parameter is of a class type
            ParamAndGlobalVarInfo info = new ParamAndGlobalVarInfo();
            if (varPrev == null)
                vars = info;
            else
                varPrev.next = info;
            varPrev = info;
            info.vdecl = arg;
            info.U = classSig;
            info.isNonnull = isNonnull;
        }
    }
    // Add the static fields
    Enumeration en = scope.fields();
    while (en.hasMoreElements()) {
        FieldDecl fd = (FieldDecl) en.nextElement();
        TypeSig classSig = Types.toClassTypeSig(fd.type);
        if (classSig != null && Modifiers.isStatic(fd.modifiers)) {
            // the field is a static field of a class type
            ParamAndGlobalVarInfo info = new ParamAndGlobalVarInfo();
            if (varPrev == null)
                vars = info;
            else
                varPrev.next = info;
            varPrev = info;
            info.vdecl = fd;
            info.U = classSig;
            info.isNonnull = NonNullPragma(fd) != null;
        }
    }
    return vars;
}
