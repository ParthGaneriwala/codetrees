protected Metrics computeMetrics(Container target, boolean preferred, int whint) {
    Metrics metrics = new Metrics();
    metrics.columnWidths = new int[_fixedColumns.length];
    int rows = computeRows(target, preferred);
    if (metrics.rowHeights == null || metrics.rowHeights.length != rows) {
        metrics.rowHeights = new int[rows];
    } else {
        Arrays.fill(metrics.rowHeights, 0);
    }
    Arrays.fill(metrics.columnWidths, 0);
    int row = 0, col = 0, maxrh = 0;
    for (int ii = 0, ll = target.getComponentCount(); ii < ll; ii++) {
        Component child = target.getComponent(ii);
        if (child.isVisible()) {
            Dimension psize = _pscache.get(child);
            if (psize == null || !child.isValid()) {
                _pscache.put(child, psize = child.getPreferredSize(whint, -1));
            }
            if (psize.height > metrics.rowHeights[row]) {
                metrics.rowHeights[row] = psize.height;
                if (maxrh < metrics.rowHeights[row]) {
                    maxrh = metrics.rowHeights[row];
                }
            }
            if (psize.width > metrics.columnWidths[col]) {
                metrics.columnWidths[col] = psize.width;
            }
        }
        if (++col == metrics.columnWidths.length) {
            col = 0;
            row++;
        }
    }
    // components and adding new ones to a table-layout using container willy nilly
    if (_pscache.size() != target.getComponentCount()) {
        _pscache.clear();
    }
    // if we are stretching, adjust the column widths accordingly (however, no adjusting if
    // we're computing our preferred size)
    int naturalWidth;
    if (!preferred && _halign == STRETCH && (naturalWidth = sum(metrics.columnWidths)) > 0) {
        // sum the width of the non-fixed columns
        int freewid = 0;
        for (int ii = 0; ii < _fixedColumns.length; ii++) {
            if (!_fixedColumns[ii]) {
                freewid += metrics.columnWidths[ii];
            }
        }
        // now divide up the extra space among said non-fixed columns
        int avail = target.getWidth() - target.getInsets().getHorizontal() - naturalWidth - (_colgap * (metrics.columnWidths.length - 1));
        int used = 0;
        for (int ii = 0; ii < metrics.columnWidths.length; ii++) {
            if (_fixedColumns[ii]) {
                continue;
            }
            int adjust = metrics.columnWidths[ii] * avail / freewid;
            metrics.columnWidths[ii] += adjust;
            used += adjust;
        }
        // add any rounding error to the first non-fixed column
        if (metrics.columnWidths.length > 0) {
            for (int ii = 0; ii < _fixedColumns.length; ii++) {
                if (!_fixedColumns[ii]) {
                    metrics.columnWidths[ii] += (avail - used);
                    break;
                }
            }
        }
    }
    // if we're equalizing rows, make all row heights the max
    if (_equalRows) {
        Arrays.fill(metrics.rowHeights, maxrh);
    }
    return metrics;
}
