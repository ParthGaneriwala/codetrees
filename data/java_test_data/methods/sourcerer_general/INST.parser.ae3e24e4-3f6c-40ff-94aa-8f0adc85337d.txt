public static int parser(boolean[] inst) {
    int type = 0;
    boolean[] name = new boolean[6];
    boolean[] func = new boolean[6];
    for (int i = 0; i < 6; i++) {
        name[i] = inst[i];
        func[i] = inst[i + 26];
    }
    switch(INST.toInt(name)) {
        case 35:
            type = LW;
            break;
        case 43:
            type = SW;
            break;
        case 2:
            type = J;
            break;
        case 4:
            type = BEQZ;
            break;
        case 5:
            type = BNEZ;
            break;
        case 8:
            type = ADDI;
            break;
        case 9:
            type = ADDUI;
            break;
        case 10:
            type = SUBI;
            break;
        case 11:
            type = SUBUI;
            break;
        case 12:
            type = ANDI;
            break;
        case 13:
            type = ORI;
            break;
        case 14:
            type = XORI;
            break;
        case 20:
            type = SLLI;
            break;
        case 22:
            type = SRLI;
            break;
        case 23:
            type = SRAI;
            break;
        case 24:
            type = SEQI;
            break;
        case 25:
            type = SNEI;
            break;
        case 26:
            type = SLTI;
            break;
        case 27:
            type = SGTI;
            break;
        case 28:
            type = SLEI;
            break;
        case 0:
            switch(INST.toInt(func)) {
                case 4:
                    type = SLL;
                    break;
                case 6:
                    type = SRL;
                    break;
                case 7:
                    type = SRA;
                    break;
                case 32:
                    type = ADD;
                    break;
                case 33:
                    type = ADDU;
                    break;
                case 34:
                    type = SUB;
                    break;
                case 35:
                    type = SUBU;
                    break;
                case 36:
                    type = AND;
                    break;
                case 37:
                    type = OR;
                    break;
                case 38:
                    type = XOR;
                    break;
                case 40:
                    type = SEQ;
                    break;
                case 41:
                    type = SNE;
                    break;
                case 42:
                    type = SLT;
                    break;
                case 43:
                    type = SGT;
                    break;
                case 44:
                    type = SLE;
                    break;
                default:
                    type = NOP;
                    break;
            }
            break;
        case 1:
            switch(INST.toInt(func)) {
                case 14:
                    type = MULT;
                    break;
                case 15:
                    type = DIV;
                    break;
                case 22:
                    type = MULTU;
                    break;
                case 23:
                    type = DIVU;
                    break;
                default:
                    type = NOP;
            }
            break;
        case 63:
            type = HALT;
            break;
        default:
            type = NOP;
            break;
    }
    return type;
}
