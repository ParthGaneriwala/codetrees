public void resizeCapacity(int newCapacity) {
    if (newCapacity == capacity_)
        return;
    // update capacity and getTotalQuads
    totalQuads_ = Math.min(totalQuads_, newCapacity);
    capacity_ = newCapacity;
    ByteBuffer tbb = ByteBuffer.allocateDirect(CCQuad2.size * newCapacity * 4);
    tbb.order(ByteOrder.nativeOrder());
    FloatBuffer tmpTexCoords = tbb.asFloatBuffer();
    tmpTexCoords.put(textureCoordinates);
    textureCoordinates = tmpTexCoords;
    textureCoordinates.position(0);
    ByteBuffer vbb = ByteBuffer.allocateDirect(CCQuad3.size * newCapacity * 4);
    vbb.order(ByteOrder.nativeOrder());
    FloatBuffer tmpVertexCoords = vbb.asFloatBuffer();
    tmpVertexCoords.put(vertexCoordinates);
    vertexCoordinates = tmpVertexCoords;
    vertexCoordinates.position(0);
    ByteBuffer isb = ByteBuffer.allocateDirect(6 * newCapacity * 2);
    isb.order(ByteOrder.nativeOrder());
    ShortBuffer tmpIndices = isb.asShortBuffer();
    tmpIndices.put(indices);
    indices = tmpIndices;
    indices.position(0);
    initIndices();
    if (withColorArray_) {
        ByteBuffer cbb = ByteBuffer.allocateDirect(4 * CCColor4B.size * newCapacity * 1);
        ByteBuffer tmpColors = cbb;
        tmpColors.put(colors);
        colors = tmpColors;
        colors.position(0);
    }
}
