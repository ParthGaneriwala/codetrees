final Table SYSTEM_COLUMNS() throws HsqlException {
    Table t = sysTables[SYSTEM_COLUMNS];
    if (t == null) {
        t = createBlankTable(sysTableHsqlNames[SYSTEM_COLUMNS]);
        addColumn(t, "TABLE_CAT", Types.VARCHAR);
        addColumn(t, "TABLE_SCHEM", Types.VARCHAR);
        // not null
        addColumn(t, "TABLE_NAME", Types.VARCHAR, false);
        // not null
        addColumn(t, "COLUMN_NAME", Types.VARCHAR, false);
        // not null
        addColumn(t, "DATA_TYPE", Types.SMALLINT, false);
        // not null
        addColumn(t, "TYPE_NAME", Types.VARCHAR, 32, false);
        addColumn(t, "COLUMN_SIZE", Types.INTEGER);
        addColumn(t, "BUFFER_LENGTH", Types.INTEGER);
        addColumn(t, "DECIMAL_DIGITS", Types.INTEGER);
        addColumn(t, "NUM_PREC_RADIX", Types.INTEGER);
        // not null
        addColumn(t, "NULLABLE", Types.INTEGER, false);
        addColumn(t, "REMARKS", Types.VARCHAR);
        addColumn(t, "COLUMN_DEF", Types.VARCHAR);
        addColumn(t, "SQL_DATA_TYPE", Types.INTEGER);
        addColumn(t, "SQL_DATETIME_SUB", Types.INTEGER);
        addColumn(t, "CHAR_OCTET_LENGTH", Types.INTEGER);
        // not null
        addColumn(t, "ORDINAL_POSITION", Types.INTEGER, false);
        // not null
        addColumn(t, "IS_NULLABLE", Types.VARCHAR, 3, false);
        addColumn(t, "SCOPE_CATLOG", Types.VARCHAR);
        addColumn(t, "SCOPE_SCHEMA", Types.VARCHAR);
        addColumn(t, "SCOPE_TABLE", Types.VARCHAR);
        addColumn(t, "SOURCE_DATA_TYPE", Types.VARCHAR);
        // not null
        addColumn(t, "TYPE_SUB", Types.INTEGER, false);
        // order: TABLE_SCHEM, TABLE_NAME, ORDINAL_POSITION
        // added for unique: TABLE_CAT
        // false PK, as TABLE_SCHEM and/or TABLE_CAT may be null
        t.createPrimaryKey(null, new int[] { 1, 2, 16, 0 }, false);
        return t;
    }
    // calculated column values
    String tableCatalog;
    String tableSchema;
    String tableName;
    // intermediate holders
    int columnCount;
    Iterator tables;
    Table table;
    Object[] row;
    DITableInfo ti;
    // column number mappings
    final int itable_cat = 0;
    final int itable_schem = 1;
    final int itable_name = 2;
    final int icolumn_name = 3;
    final int idata_type = 4;
    final int itype_name = 5;
    final int icolumn_size = 6;
    final int ibuffer_length = 7;
    final int idecimal_digits = 8;
    final int inum_prec_radix = 9;
    final int inullable = 10;
    final int iremark = 11;
    final int icolumn_def = 12;
    final int isql_data_type = 13;
    final int isql_datetime_sub = 14;
    final int ichar_octet_length = 15;
    final int iordinal_position = 16;
    final int iis_nullable = 17;
    final int itype_sub = 22;
    // Initialization
    tables = allTables();
    ti = new DITableInfo();
    // Do it.
    while (tables.hasNext()) {
        table = (Table) tables.next();
        if (!isAccessibleTable(table)) {
            continue;
        }
        ti.setTable(table);
        tableCatalog = ns.getCatalogName(table);
        tableSchema = table.getSchemaName();
        tableName = ti.getName();
        columnCount = table.getColumnCount();
        for (int i = 0; i < columnCount; i++) {
            row = t.getEmptyRowData();
            row[itable_cat] = tableCatalog;
            row[itable_schem] = tableSchema;
            row[itable_name] = tableName;
            row[icolumn_name] = ti.getColName(i);
            row[idata_type] = ti.getColDataType(i);
            row[itype_name] = ti.getColDataTypeName(i);
            row[icolumn_size] = ti.getColSize(i);
            row[ibuffer_length] = ti.getColBufLen(i);
            row[idecimal_digits] = ti.getColScale(i);
            row[inum_prec_radix] = ti.getColPrecRadix(i);
            row[inullable] = ti.getColNullability(i);
            row[iremark] = ti.getColRemarks(i);
            row[icolumn_def] = ti.getColDefault(i);
            row[isql_data_type] = ti.getColSqlDataType(i);
            row[isql_datetime_sub] = ti.getColSqlDateTimeSub(i);
            row[ichar_octet_length] = ti.getColCharOctLen(i);
            row[iordinal_position] = ValuePool.getInt(i + 1);
            row[iis_nullable] = ti.getColIsNullable(i);
            row[itype_sub] = ti.getColDataTypeSub(i);
            t.insertSys(row);
        }
    }
    t.setDataReadOnly(true);
    return t;
}
