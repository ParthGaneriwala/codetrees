public void chamaFuncao(String escopo) {
    // ArrayList<String> parametros = new ArrayList<String>();
    // parametros = tabelaSimbolos.procuraParametrosDeFuncao(nomeMetodo);
    int posicaoArrayParametros = 0;
    String nomeMetodo = tabelaSimbolos.getLookahead();
    // consome o identificador, nome do metodo
    tabelaSimbolos.soConsome();
    // consome o (
    tabelaSimbolos.soConsome();
    while (!(tabelaSimbolos.getLookahead().equals(")"))) {
        // até achar o parenteses final, faça
        String parametroDeclarado = tabelaSimbolos.procuraParametrosDeFuncao(nomeMetodo).get(posicaoArrayParametros);
        if ((tabelaSimbolos.getTipo().equals("numero") || tabelaSimbolos.getTipo().equals("identificador")) && (tabelaSimbolos.superLookahead(1).equals("+") || tabelaSimbolos.superLookahead(1).equals("-") || tabelaSimbolos.superLookahead(1).equals("*") || tabelaSimbolos.superLookahead(1).equals("/"))) {
            ExpressaoAritmetica expArit2 = new ExpressaoAritmetica();
            // consome expressao aritmetica
            expArit2.expAritmetica(tabelaSimbolos, escopo, "int");
        } else if (tabelaSimbolos.getTipo().equals("identificador")) {
            // Verifica se a variável foi declarada
            if (!tabelaSimbolos.validaNome(escopo, tabelaSimbolos.getLookahead())) {
                // verifica se variavel dentro do parametro de função está declarada
                if (!(Utils.tipoValor(tabelaSimbolos.getLookahead()).equals("char") && parametroDeclarado.equals("char")) && (!((Utils.tipoValor(tabelaSimbolos.getLookahead()).equals("boolean"))) && ((parametroDeclarado.equals("true")) || parametroDeclarado.equals("false")))) {
                    System.out.println("Linha: " + tabelaSimbolos.getLinha() + " ERRO SEMANTICO - Variável " + tabelaSimbolos.getLookahead() + " não declarada");
                    ErroSemantico.getInstance().getTabelaErros().add("Erro Semântico na linha " + tabelaSimbolos.getLinha() + ". Descrição: Variável não já foi declarada");
                }
            // Esse segundo if existe, pois é necessário verificar se o identificador é um char. caso seja um char, o que a função irá receber como parâmetro seja um char: "a"
            // é necessário tratar dessa forma. pq ele considera o a como identificador, já que o léximo não add aspas na tabela de simbolos. E tb verificar a questão do vir o identificador
            // true ou false.
            }
            // Verifica o tipo da variável declarada e o tipo passado como parâmetro
            if (!tabelaSimbolos.RetornaTipoDeLocalDeclarada(tabelaSimbolos.getLookahead(), escopo).equals(parametroDeclarado)) {
                if (!(Utils.tipoValor(tabelaSimbolos.getLookahead()).equals("char") && parametroDeclarado.equals("char")) && (!((Utils.tipoValor(tabelaSimbolos.getLookahead()).equals("boolean"))) && ((parametroDeclarado.equals("true")) || parametroDeclarado.equals("false"))))
                    ;
                ErroSemantico.getInstance().getTabelaErros().add("Erro Semântico na linha " + tabelaSimbolos.getLinha() + ". Descrição: Variável incompatível com tipo");
            }
            if (tabelaSimbolos.procuraParametrosDeFuncao(nomeMetodo).get(posicaoArrayParametros + 1).equals("*")) {
                System.out.println("Linha: " + tabelaSimbolos.getLinha() + "- ERRO SEMANTICO - Esperado & na variável " + tabelaSimbolos.getLookahead());
                ErroSemantico.getInstance().getTabelaErros().add("Erro Semântico na linha " + tabelaSimbolos.getLinha() + ". Descrição: Esperado o & na variável");
                posicaoArrayParametros++;
            }
            posicaoArrayParametros++;
        } else if (tabelaSimbolos.getLookahead().equals("*")) {
            // consome o *
            tabelaSimbolos.soConsome();
            // Verifica o tipo da variável declarada e o tipo passado como parâmetro
            if (!tabelaSimbolos.RetornaTipoDeLocalDeclarada(tabelaSimbolos.getLookahead(), escopo).equals(parametroDeclarado)) {
                System.out.println("Linha: " + tabelaSimbolos.getLinha() + "- ERRO SEMANTICO - Variável " + tabelaSimbolos.getLookahead() + " com tipo incompativel");
                ErroSemantico.getInstance().getTabelaErros().add("Erro Semântico na linha " + tabelaSimbolos.getLinha() + ". Descrição: Variável incompatível com tipo");
            }
            // Verifica se a variável foi declarada
            if (!tabelaSimbolos.validaNome(escopo, tabelaSimbolos.getLookahead())) {
                // verifica se variavel dentro do parametro de função está declarada
                System.out.println("Linha: " + tabelaSimbolos.getLinha() + " ERRO SEMANTICO - Variável " + tabelaSimbolos.getLookahead() + " não declarada");
                ErroSemantico.getInstance().getTabelaErros().add("Erro Semântico na linha " + tabelaSimbolos.getLinha() + ". Descrição: Variável não declarada");
            }
            // Verifica se na declaração foi colocado o &
            if (!tabelaSimbolos.procuraParametrosDeFuncao(nomeMetodo).get(++posicaoArrayParametros).equals("&")) {
                System.out.println("Linha: " + tabelaSimbolos.getLinha() + "- ERRO SEMANTICO - Esperado & na variável " + tabelaSimbolos.getLookahead());
                ErroSemantico.getInstance().getTabelaErros().add("Erro Semântico na linha " + tabelaSimbolos.getLinha() + ". Descrição: Esperado & na variável");
            }
        } else if (tabelaSimbolos.getLookahead().equals("&")) {
            // consome o &
            tabelaSimbolos.soConsome();
            // Verifica o tipo da variável declarada e o tipo passado como parâmetro
            if (!tabelaSimbolos.RetornaTipoDeLocalDeclarada(tabelaSimbolos.getLookahead(), escopo).equals(parametroDeclarado)) {
                System.out.println("Linha: " + tabelaSimbolos.getLinha() + "- ERRO SEMANTICO - Variável " + tabelaSimbolos.getLookahead() + " com tipo incompativel");
                ErroSemantico.getInstance().getTabelaErros().add("Erro Semântico na linha " + tabelaSimbolos.getLinha() + ". Descrição: Variável incompatível com tipo");
            }
            // Verifica se a variável foi declarada
            if (!tabelaSimbolos.validaNome(escopo, tabelaSimbolos.getLookahead())) {
                // verifica se variavel dentro do parametro de função está declarada
                System.out.println("Linha: " + tabelaSimbolos.getLinha() + " ERRO SEMANTICO - Variável " + tabelaSimbolos.getLookahead() + " não declarada");
                ErroSemantico.getInstance().getTabelaErros().add("Erro Semântico na linha " + tabelaSimbolos.getLinha() + ". Descrição: Variável não declarada");
            }
            // Verifica se na declaração foi colocado o *
            if (!tabelaSimbolos.procuraParametrosDeFuncao(nomeMetodo).get(++posicaoArrayParametros).equals("*")) {
                System.out.println("Linha: " + tabelaSimbolos.getLinha() + "- ERRO SEMANTICO - Esperado * na variável " + tabelaSimbolos.getLookahead());
                ErroSemantico.getInstance().getTabelaErros().add("Erro Semântico na linha " + tabelaSimbolos.getLinha() + ". Descrição: Esperado * na variável");
            }
        }
        if (tabelaSimbolos.getLookahead().equals(",")) {
            // consome a virgula
            tabelaSimbolos.soConsome();
        }
    }
    // consome o )
    tabelaSimbolos.soConsome();
// tabelaSimbolos.soConsome(); // consome o ;
}
