/**
 * Retrieve the values from the view and perform the calculation.
 *
 * @param updateView - if true then update the view, otherwise just perform the calculation
 * @return true if a successful calculation was performed
 */
private boolean updateResults(boolean updateView) {
    TextView msgAddressRange = (TextView) findViewById(R.id.v6address_range);
    TextView msgMaximumAddresses = (TextView) findViewById(R.id.v6maximum_addresses);
    TextView msgInfo = (TextView) findViewById(R.id.v6info);
    // TextView msgIPBinaryNetwork = (TextView)findViewById(R.id.ipv6_binary_network);
    // TextView msgIPBinaryHost = (TextView)findViewById(R.id.ipv6_binary_host);
    // TextView msgIPBinaryNetmask = (TextView)findViewById(R.id.ipv6_binary_netmask);
    Spinner ipv6subnetmasks_spinner = (Spinner) findViewById(R.id.ipv6subnetmasks);
    String ip = msgIPAddress.getText().toString();
    try {
        InetAddress hostAddress = Inet6Address.getByName(ip);
        BigInteger ip128bit = new BigInteger(hostAddress.getAddress());
        if (debug)
            Log.d(TAG, "ip128bit=" + ip128bit.toString());
        int bitlength = ipv6subnetmasks_spinner.getSelectedItemPosition() + 1;
        if (debug)
            Log.d(TAG, "bitlength=" + bitlength);
        BigInteger ip128bitmask = BigInteger.ONE;
        ip128bitmask = ip128bitmask.shiftLeft(128 - bitlength);
        ip128bitmask = ip128bitmask.subtract(BigInteger.ONE);
        if (debug)
            Log.d(TAG, "ip128bitmask=" + ip128bitmask.toString(16));
        BigInteger firstip = ip128bitmask.xor(new BigInteger("ffffffffffffffffffffffffffffffff", 16));
        firstip = firstip.and(ip128bit);
        if (debug)
            Log.d(TAG, "firstip=" + firstip.toString(16));
        byte[] firstIPbytes = firstip.toByteArray();
        if (debug)
            Log.d(TAG, "firstIPbytes.length=" + firstIPbytes.length);
        InetAddress firstIPv6 = bigIntToIPv6Address(firstip);
        BigInteger lastip = firstip.or(ip128bitmask);
        if (debug)
            Log.d(TAG, "lastip=" + lastip.toString(16));
        InetAddress lastIPv6 = bigIntToIPv6Address(lastip);
        BigInteger maximumAddresses;
        if (ip128bitmask.equals(BigInteger.ZERO)) {
            maximumAddresses = BigInteger.ZERO;
        } else {
            maximumAddresses = ip128bitmask.subtract(BigInteger.ONE);
        }
        String addressInfo = "";
        if (hostAddress.isAnyLocalAddress()) {
            addressInfo = addStringWithSpace(addressInfo, getString(R.string.any_local));
        }
        if (hostAddress.isLinkLocalAddress()) {
            addressInfo = addStringWithSpace(addressInfo, getString(R.string.link_local));
        }
        if (hostAddress.isLoopbackAddress()) {
            addressInfo = addStringWithSpace(addressInfo, getString(R.string.loopback));
        }
        if (hostAddress.isMCGlobal()) {
            addressInfo = addStringWithSpace(addressInfo, getString(R.string.mcglobal));
        }
        if (hostAddress.isMCLinkLocal()) {
            addressInfo = addStringWithSpace(addressInfo, getString(R.string.mclink_local));
        }
        if (hostAddress.isMCNodeLocal()) {
            addressInfo = addStringWithSpace(addressInfo, getString(R.string.mcnode_local));
        }
        if (hostAddress.isMCOrgLocal()) {
            addressInfo = addStringWithSpace(addressInfo, getString(R.string.mcorg_local));
        }
        if (hostAddress.isMCSiteLocal()) {
            addressInfo = addStringWithSpace(addressInfo, getString(R.string.mcsite_local));
        }
        if (hostAddress.isMulticastAddress()) {
            addressInfo = addStringWithSpace(addressInfo, getString(R.string.multicast));
        }
        msgAddressRange.setText(firstIPv6.getHostAddress() + " - " + lastIPv6.getHostAddress());
        msgMaximumAddresses.setText(maximumAddresses.toString());
        msgInfo.setText(addressInfo);
        CurrentIPv6 = ip;
        CurrentBitsIPv6 = bitlength;
    } catch (UnknownHostException e) {
        e.printStackTrace();
        ClearResults();
        return false;
    } catch (NumberFormatException e) {
        e.printStackTrace();
        ClearResults();
        return false;
    }
    if (updateView) {
        msgAddressRange.startAnimation(anim);
    // updateHistory(CurrentIP, CurrentBits);
    }
    return true;
}
