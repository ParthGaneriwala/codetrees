protected void initMainRegistry() {
    setProcessReader(createProcessReader());
    // maps readers for children of process element
    // exclusive of activity (which is handled sep)
    registerReader(PROCESS_CLASS, TAG_VARIABLES, createDispatchReader(VARIABLES_CLASS));
    registerReader(PROCESS_CLASS, TAG_FAULT_HANDLERS, createDispatchReader(FAULT_HANDLERS_CLASS));
    registerReader(PROCESS_CLASS, TAG_EVENT_HANDLERS, createDispatchReader(EVENT_HANDLERS_CLASS));
    registerReader(PROCESS_CLASS, TAG_PARTNER_LINKS, createDispatchReader(PARTNER_LINKS_CLASS));
    registerReader(PROCESS_CLASS, TAG_PARTNERS, createDispatchReader(PARTNERS_CLASS));
    registerReader(PROCESS_CLASS, TAG_COMPENSATION_HANDLER, createDispatchReader(COMPENSATION_HANDLER_CLASS));
    registerReader(PROCESS_CLASS, TAG_CORRELATION_SETS, createDispatchReader(CORRELATION_SETS_CLASS));
    registerReader(ACTIVITY_SCOPE_CLASS, TAG_PARTNER_LINKS, createDispatchReader(PARTNER_LINKS_CLASS));
    // map readers for children of copy element
    registerReader(ACTIVITY_ASSIGN_CLASS, TAG_COPY, createDispatchReader(ASSIGN_COPY_CLASS));
    registerReader(ASSIGN_COPY_CLASS, TAG_TO, createDispatchReader(ASSIGN_TO_CLASS));
    registerReader(ASSIGN_COPY_CLASS, TAG_FROM, createDispatchReader(ASSIGN_FROM_CLASS));
    // maps readers for children of switch activity
    // exclusive of standard readers (source/target)
    registerReader(ACTIVITY_IF_CLASS, TAG_CASE, new AeSwitchCaseReader());
    registerReader(ACTIVITY_IF_CLASS, TAG_OTHERWISE, createDispatchReader(ELSE_CLASS));
    // maps readers for children of pick activity
    // exclusive of standard readers (source/target)
    registerReader(ACTIVITY_PICK_CLASS, TAG_ON_MESSAGE, createDispatchReader(ON_MESSAGE_CLASS));
    registerReader(ACTIVITY_PICK_CLASS, TAG_ON_ALARM, createDispatchReader(ON_ALARM_CLASS));
    // maps readers for children of scope activity
    // exclusive of standard readers (source/target)
    registerReader(ACTIVITY_SCOPE_CLASS, TAG_COMPENSATION_HANDLER, createDispatchReader(COMPENSATION_HANDLER_CLASS));
    registerReader(ACTIVITY_SCOPE_CLASS, TAG_FAULT_HANDLERS, createDispatchReader(FAULT_HANDLERS_CLASS));
    registerReader(ACTIVITY_SCOPE_CLASS, TAG_VARIABLES, createDispatchReader(VARIABLES_CLASS));
    registerReader(ACTIVITY_SCOPE_CLASS, TAG_CORRELATION_SETS, createDispatchReader(CORRELATION_SETS_CLASS));
    registerReader(ACTIVITY_SCOPE_CLASS, TAG_EVENT_HANDLERS, createDispatchReader(EVENT_HANDLERS_CLASS));
    // maps readers for children of invoke activity
    // exclusive of standard readers (source/target)
    registerReader(ACTIVITY_INVOKE_CLASS, TAG_CATCH, createDispatchReader(CATCH_CLASS));
    registerReader(ACTIVITY_INVOKE_CLASS, TAG_CATCH_ALL, createDispatchReader(CATCH_ALL_CLASS));
    registerReader(ACTIVITY_INVOKE_CLASS, TAG_COMPENSATION_HANDLER, createDispatchReader(COMPENSATION_HANDLER_CLASS));
    registerReader(ACTIVITY_INVOKE_CLASS, TAG_CORRELATIONS, createDispatchReader(CORRELATIONS_CLASS));
    // maps readers for children of eventHandlers element
    // treat onMessage as an onEvent in the unified def
    registerReader(EVENT_HANDLERS_CLASS, TAG_ON_MESSAGE, createDispatchReader(ON_EVENT_CLASS));
    registerReader(EVENT_HANDLERS_CLASS, TAG_ON_ALARM, createDispatchReader(ON_ALARM_CLASS));
    // maps readers for children of faultHandlers element
    registerReader(FAULT_HANDLERS_CLASS, TAG_CATCH, createDispatchReader(CATCH_CLASS));
    registerReader(FAULT_HANDLERS_CLASS, TAG_CATCH_ALL, createDispatchReader(CATCH_ALL_CLASS));
    // all of the various class to child element mappings
    registerReader(ACTIVITY_FLOW_CLASS, TAG_LINKS, createDispatchReader(LINKS_CLASS));
    registerReader(ACTIVITY_RECEIVE_CLASS, TAG_CORRELATIONS, createDispatchReader(CORRELATIONS_CLASS));
    registerReader(ACTIVITY_REPLY_CLASS, TAG_CORRELATIONS, createDispatchReader(CORRELATIONS_CLASS));
    registerReader(PARTNERS_CLASS, TAG_PARTNER, createDispatchReader(PARTNER_CLASS));
    registerReader(PARNTER_LINKS_CLASS, TAG_PARTNER_LINK, createDispatchReader(PARTNER_LINK_CLASS));
    registerReader(PARTNER_CLASS, TAG_PARTNER_LINK, createDispatchReader(PARTNER_LINK_CLASS));
    registerReader(VARIABLES_CLASS, TAG_VARIABLE, createDispatchReader(VARIABLE_CLASS));
    registerReader(LINKS_CLASS, TAG_LINK, createDispatchReader(LINK_CLASS));
    registerReader(ON_MESSAGE_CLASS, TAG_CORRELATIONS, createDispatchReader(CORRELATIONS_CLASS));
    registerReader(ON_EVENT_CLASS, TAG_CORRELATIONS, createDispatchReader(CORRELATIONS_CLASS));
    registerReader(CORRELATIONS_CLASS, TAG_CORRELATION, createDispatchReader(CORRELATION_CLASS));
    registerReader(CORRELATION_SETS_CLASS, TAG_CORRELATION_SET, createDispatchReader(CORRELATION_SET_CLASS));
    // forEach extensions
    registerReader(ACTIVITY_FOREACH_CLASS, new QName(IAeBPELConstants.ABX_2_0_NAMESPACE_URI, TAG_FOREACH_STARTCOUNTER), createDispatchReader(ACTIVITY_FOREACH_START));
    registerReader(ACTIVITY_FOREACH_CLASS, new QName(IAeBPELConstants.AE_EXTENSION_NAMESPACE_URI_ACTIVITY, TAG_FOREACH_STARTCOUNTER), createDispatchReader(ACTIVITY_FOREACH_START));
    registerReader(ACTIVITY_FOREACH_CLASS, new QName(IAeBPELConstants.ABX_2_0_NAMESPACE_URI, TAG_FOREACH_FINALCOUNTER), createDispatchReader(ACTIVITY_FOREACH_FINAL));
    registerReader(ACTIVITY_FOREACH_CLASS, new QName(IAeBPELConstants.AE_EXTENSION_NAMESPACE_URI_ACTIVITY, TAG_FOREACH_FINALCOUNTER), createDispatchReader(ACTIVITY_FOREACH_FINAL));
    registerReader(ACTIVITY_FOREACH_CLASS, new QName(IAeBPELConstants.ABX_2_0_NAMESPACE_URI, TAG_FOREACH_COMPLETION_CONDITION), createDispatchReader(AeForEachCompletionConditionDef.class));
    registerReader(ACTIVITY_FOREACH_CLASS, new QName(IAeBPELConstants.AE_EXTENSION_NAMESPACE_URI_ACTIVITY, TAG_FOREACH_COMPLETION_CONDITION), createDispatchReader(AeForEachCompletionConditionDef.class));
    registerReader(ACTIVITY_FOREACH_COMPLETION_CONDITION, new QName(IAeBPELConstants.ABX_2_0_NAMESPACE_URI, TAG_FOREACH_BRANCHES), createDispatchReader(AeForEachBranchesDef.class));
    registerReader(ACTIVITY_FOREACH_COMPLETION_CONDITION, new QName(IAeBPELConstants.AE_EXTENSION_NAMESPACE_URI_ACTIVITY, TAG_FOREACH_BRANCHES), createDispatchReader(AeForEachBranchesDef.class));
    // messageExchange extension
    registerReader(PROCESS_CLASS, new QName(IAeBPELConstants.ABX_2_0_NAMESPACE_URI, TAG_MESSAGE_EXCHANGES), createDispatchReader(AeMessageExchangesDef.class));
    registerReader(ACTIVITY_SCOPE_CLASS, new QName(IAeBPELConstants.ABX_2_0_NAMESPACE_URI, TAG_MESSAGE_EXCHANGES), createDispatchReader(AeMessageExchangesDef.class));
    registerReader(MESSAGE_EXCHANGES_CLASS, new QName(IAeBPELConstants.ABX_2_0_NAMESPACE_URI, TAG_MESSAGE_EXCHANGE), createDispatchReader(AeMessageExchangeDef.class));
    // legacy registration for the 2.0 beta that went out w/o a version qualifier in the namespace
    registerReader(PROCESS_CLASS, new QName(IAeBPELConstants.ABX_FUNCTIONS_NAMESPACE_URI, TAG_MESSAGE_EXCHANGES), createDispatchReader(AeMessageExchangesDef.class));
    registerReader(ACTIVITY_SCOPE_CLASS, new QName(IAeBPELConstants.ABX_FUNCTIONS_NAMESPACE_URI, TAG_MESSAGE_EXCHANGES), createDispatchReader(AeMessageExchangesDef.class));
    registerReader(MESSAGE_EXCHANGES_CLASS, new QName(IAeBPELConstants.ABX_FUNCTIONS_NAMESPACE_URI, TAG_MESSAGE_EXCHANGE), createDispatchReader(AeMessageExchangeDef.class));
    registerReader(ACTIVITY_FOREACH_CLASS, new QName(IAeBPELConstants.ABX_FUNCTIONS_NAMESPACE_URI, TAG_FOREACH_STARTCOUNTER), createDispatchReader(ACTIVITY_FOREACH_START));
    registerReader(ACTIVITY_FOREACH_CLASS, new QName(IAeBPELConstants.ABX_FUNCTIONS_NAMESPACE_URI, TAG_FOREACH_FINALCOUNTER), createDispatchReader(ACTIVITY_FOREACH_FINAL));
}
