// Inserts key/position entry in self (as leaf)
// key - Key to associate with the leaf
// position - position associated with key in external structure
// splitString - if not null then the smallest key in the new split leaf
// splitNode - if not null then the node was split and this is the leaf to the right
public // , out String splitString, out BPTDataLongNode splitNode)
String InsertLeaf(// , out String splitString, out BPTDataLongNode splitNode)
String key, // , out String splitString, out BPTDataLongNode splitNode)
long position) throws Exception {
    this.splitString = null;
    this.splitNode = null;
    boolean dosplit = false;
    if (!this.isLeaf) {
        throw new BPTException("bad call to InsertLeaf: this is not a leaf");
    }
    this.Soil();
    int insertposition = this.FindAtOrNextPosition(key, false);
    if (insertposition >= this.Size) {
        // throw new BplusTreeException("key too big and leaf is full");
        dosplit = true;
        this.PrepareForSplit();
    } else {
        // if it's already there then change the value at the current location (duplicate entries not supported).
        if (// this.ChildKeys[insertposition].equals(key)
        this.ChildKeys[insertposition] == null || this.owner.Compare(this.ChildKeys[insertposition], key) == 0) {
            this.ChildBufferNumbers[insertposition] = position;
            this.ChildKeys[insertposition] = key;
            if (insertposition == 0) {
                return key;
            } else {
                return null;
            }
        }
    }
    // check for a null position
    int nullindex = insertposition;
    while (nullindex < this.ChildKeys.length && this.ChildKeys[nullindex] != null) {
        nullindex++;
    }
    if (nullindex >= this.ChildKeys.length) {
        if (dosplit) {
            throw new BPTException("can't split twice!!");
        }
        dosplit = true;
        this.PrepareForSplit();
    }
    // bubble in the new info XXXX THIS SHOULD BUBBLE BACKWARDS
    String nextkey = this.ChildKeys[insertposition];
    long nextposition = this.ChildBufferNumbers[insertposition];
    this.ChildKeys[insertposition] = key;
    this.ChildBufferNumbers[insertposition] = position;
    while (nextkey != null) {
        key = nextkey;
        position = nextposition;
        insertposition++;
        nextkey = this.ChildKeys[insertposition];
        nextposition = this.ChildBufferNumbers[insertposition];
        this.ChildKeys[insertposition] = key;
        this.ChildBufferNumbers[insertposition] = position;
    }
    // split if needed
    if (dosplit) {
        int splitpoint = this.ChildKeys.length / 2;
        int splitlength = this.ChildKeys.length - splitpoint;
        splitNode = new BPTDataLongNode(this.owner, this.parent, -1, this.isLeaf);
        // copy the split info into the splitNode
        for (int i = 0; i < splitlength; i++) {
            splitNode.ChildBufferNumbers[i] = this.ChildBufferNumbers[i + splitpoint];
            splitNode.ChildKeys[i] = this.ChildKeys[i + splitpoint];
            splitNode.MaterializedChildNodes[i] = this.MaterializedChildNodes[i + splitpoint];
        }
        splitString = splitNode.ChildKeys[0];
        // archive the new node
        splitNode.DumpToFreshBuffer();
        // store the node data temporarily
        long[] buffernumbers = this.ChildBufferNumbers;
        String[] keys = this.ChildKeys;
        BPTDataLongNode[] nodes = this.MaterializedChildNodes;
        // repair current node, copy in the other part of the split
        this.ChildBufferNumbers = new long[this.Size + 1];
        this.ChildKeys = new String[this.Size];
        this.MaterializedChildNodes = new BPTDataLongNode[this.Size + 1];
        for (int i = 0; i < splitpoint; i++) {
            this.ChildBufferNumbers[i] = buffernumbers[i];
            this.ChildKeys[i] = keys[i];
            this.MaterializedChildNodes[i] = nodes[i];
        }
        for (int i = splitpoint; i < this.ChildKeys.length; i++) {
            this.ChildKeys[i] = null;
            this.ChildBufferNumbers[i] = BPTDataLong.NULLBUFFERNUMBER;
            this.MaterializedChildNodes[i] = null;
        }
        // store the new node
        this.owner.RecordTerminalNode(splitNode);
        splitNode.Soil();
    }
    if (insertposition == 0) {
        // smallest key changed.
        return key;
    } else {
        // no change in smallest key
        return null;
    }
}
