public void processOK(Response responseCloned, ClientTransaction clientTransaction) throws UnsupportedEncodingException {
    System.out.println("IMInviteProcessing processOK");
    InstantMessagingGUI instantMessagingGUI = imUA.getInstantMessagingGUI();
    ListenerInstantMessaging listenerInstantMessaging = instantMessagingGUI.getListenerInstantMessaging();
    ChatSessionManager chatSessionManager = listenerInstantMessaging.getChatSessionManager();
    ChatSession chatSession = null;
    String ToURL = IMUtilities.getKey(responseCloned, "To");
    if (chatSessionManager.hasAlreadyChatSession(ToURL))
        chatSession = chatSessionManager.getChatSession(ToURL);
    ChatFrame temp = chatSession.getChatFrame();
    temp.setChatState("Calling with " + ToURL + "....");
    /**
     * ����ACK
     */
    try {
        SipProvider sipProvider = imUA.getSipProvider();
        MessageFactory messageFactory = imUA.getMessageFactory();
        HeaderFactory headerFactory = imUA.getHeaderFactory();
        AddressFactory addressFactory = imUA.getAddressFactory();
        String proxyAddress = imUA.getProxyAddress();
        SipURI requestURI = null;
        requestURI = (SipURI) addressFactory.createSipURI(null, chatSession.getToIMaddress());
        requestURI.setTransportParam(imUA.getIMProtocol());
        requestURI.setPort(Integer.valueOf(chatSession.getToIMport()));
        logger.info("ACK" + requestURI.toString());
        // Call-Id:
        CallIdHeader callIdHeader = null;
        // CSeq:
        CSeqHeader cseqHeader = null;
        // To header:
        ToHeader toHeader = null;
        // From Header:
        FromHeader fromHeader = null;
        // Via header
        String branchId = Utils.generateBranchId();
        ViaHeader viaHeader = headerFactory.createViaHeader(imUA.getIMAddress(), imUA.getIMPort(), imUA.getIMProtocol(), branchId);
        Vector viaList = new Vector();
        viaList.addElement(viaHeader);
        // MaxForwards header:
        MaxForwardsHeader maxForwardsHeader = headerFactory.createMaxForwardsHeader(10);
        Dialog dialog = chatSession.getDialog();
        Address localAddress = dialog.getLocalParty();
        Address remoteAddress = dialog.getRemoteParty();
        fromHeader = headerFactory.createFromHeader(localAddress, dialog.getLocalTag());
        toHeader = headerFactory.createToHeader(remoteAddress, dialog.getRemoteTag());
        int cseq = dialog.getLocalSequenceNumber();
        DebugIM.println("the cseq number got from the dialog:" + cseq);
        cseqHeader = headerFactory.createCSeqHeader(cseq, Request.ACK);
        callIdHeader = dialog.getCallId();
        // ����request����
        Request request = messageFactory.createRequest(requestURI, Request.ACK, callIdHeader, cseqHeader, fromHeader, toHeader, viaList, maxForwardsHeader);
        // Contact header:
        SipURI sipURI = addressFactory.createSipURI(null, imUA.getIMAddress());
        sipURI.setPort(imUA.getIMPort());
        sipURI.setTransportParam(imUA.getIMProtocol());
        Address contactAddress = addressFactory.createAddress(sipURI);
        ContactHeader contactHeader = headerFactory.createContactHeader(contactAddress);
        request.setHeader(contactHeader);
        // ProxyAuthorization header if not null:
        ProxyAuthorizationHeader proxyAuthHeader = imUA.getProxyAuthorizationHeader();
        if (proxyAuthHeader != null)
            request.setHeader(proxyAuthHeader);
        ClientTransaction clientTransaction2 = sipProvider.getNewClientTransaction(request);
        clientTransaction2.sendRequest();
    } catch (Exception e) {
        e.printStackTrace();
    }
    /**
     * //		��ʼ��������
     */
    // receive
    String[] sessions = new String[1];
    ContactHeader contacthader = (ContactHeader) responseCloned.getHeader(ContactHeader.NAME);
    String toIp = contacthader.getAddress().getURI().toString();
    // ����toip
    toIp = toIp.substring(4);
    int i = 0;
    for (i = 0; i < toIp.length(); i++) if (toIp.charAt(i) == ':')
        break;
    toIp = toIp.substring(0, i);
    System.out.println(toIp);
    Object content = responseCloned.getContent();
    String port = null;
    if (content instanceof String)
        port = (String) content;
    else if (content instanceof byte[]) {
        port = new String((byte[]) content);
    } else {
    }
    System.out.println(port);
    sessions[0] = toIp + "/" + port + "/0";
    try {
        avReceive = new AVReceive3(sessions);
        avReceive.start();
        /*
			if (!avReceive.initialize()) {
		        System.err.println("Failed to initialize the sessions.");
		        System.exit(-1);
		    }
			
//			 Check to see if AVReceive3 is done.
		    try {
		        while (!avReceive.isDone())
		        Thread.sleep(1000);
		    } catch (Exception e) {}

		    System.err.println("Exiting AVReceive3");
		    */
        // send
        Format fmt = null;
        String address = toIp;
        String sendport = "49150";
        at2 = new AVTransmit3(address, sendport, fmt);
        String result = null;
        result = at2.start();
    } catch (Exception ex) {
        ex.printStackTrace();
    }
}
