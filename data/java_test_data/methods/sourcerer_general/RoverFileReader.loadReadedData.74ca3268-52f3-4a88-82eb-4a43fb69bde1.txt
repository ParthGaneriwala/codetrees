public void loadReadedData() {
    Vector<RoverFileProtein> aProteins = this.getProteins();
    Vector<RoverFileRatio> aRatios = this.getRatios();
    Vector<String> lNotUsedProteinAccession = this.getNotUsedProteinAccessions();
    Vector<String> lNotUsedPeptides = this.getNotUsedPeptides();
    // add the not used peptides to the iQuantitativeValidationSingelton
    for (int p = 0; p < lNotUsedPeptides.size(); p++) {
        iQuantitativeValidationSingelton.addNotUsedPeptide(lNotUsedProteinAccession.get(p), lNotUsedPeptides.get(p));
    }
    // now find them in the proteins
    for (int p = 0; p < iAllProteins.length; p++) {
        for (int a = 0; a < lNotUsedProteinAccession.size(); a++) {
            if (lNotUsedProteinAccession.get(a).equalsIgnoreCase(iAllProteins[p].getAccession())) {
                // protein found, set the peptides not used
                Vector<QuantitativePeptideGroup> lPeptideGroups = iAllProteins[p].getPeptideGroups(true);
                for (int b = 0; b < lPeptideGroups.size(); b++) {
                    if (lPeptideGroups.get(b).getSequence().equalsIgnoreCase(lNotUsedPeptides.get(a))) {
                        lPeptideGroups.get(b).setUsedInCalculation(false);
                    }
                }
            }
        }
    }
    for (int p = 0; p < iAllProteins.length; p++) {
        QuantitativeProtein lProtein = iAllProteins[p];
        for (int v = 0; v < aProteins.size(); v++) {
            if (lProtein.getAccession().equalsIgnoreCase(aProteins.get(v).getProteinAccession())) {
                // found a saved protein
                if (aProteins.get(v).isSelected()) {
                    // this is a selected protein
                    if (!lProtein.getSelected()) {
                        // it's not selected
                        lProtein.setSelected(true);
                        iQuantitativeValidationSingelton.addSelectedProtein(lProtein);
                    }
                }
                if (aProteins.get(v).isValidated()) {
                    // this is a validated protein
                    if (!lProtein.getValidated()) {
                        // it's not validated
                        lProtein.setValidated(true);
                        iQuantitativeValidationSingelton.addValidatedProtein(lProtein);
                    }
                }
                if (aProteins.get(v).getComment().length() != 0) {
                    if (lProtein.getProteinComment().length() == 0) {
                        lProtein.setProteinComment(aProteins.get(v).getComment());
                        iQuantitativeValidationSingelton.addCommentedProtein(lProtein);
                    }
                }
            }
        }
    }
    for (int i = 0; i < iAllProteins.length; i++) {
        QuantitativeProtein lProtein = iAllProteins[i];
        for (int j = 0; j < lProtein.getRatioGroups().size(); j++) {
            RatioGroup lRatioGroup = lProtein.getRatioGroups().get(j);
            for (int k = 0; k < lRatioGroup.getNumberOfRatios(); k++) {
                Ratio lRatio = lRatioGroup.getRatio(k);
                for (int r = 0; r < aRatios.size(); r++) {
                    RoverFileRatio lRoverRatio = aRatios.get(r);
                    if (lRoverRatio.getPeptideSequence().equalsIgnoreCase(lRatio.getParentRatioGroup().getPeptideSequence()) && lRoverRatio.getRatio() == lRatio.getRatio(false) && lRoverRatio.getRatioType().equalsIgnoreCase(lRatio.getType()) && lRoverRatio.getProteins().equalsIgnoreCase(lRatio.getParentRatioGroup().getProteinAccessionsAsString())) {
                        lRatio.setValid(lRoverRatio.isValid());
                        lRatio.setComment(lRoverRatio.getComment());
                    }
                }
            }
        }
    }
}
