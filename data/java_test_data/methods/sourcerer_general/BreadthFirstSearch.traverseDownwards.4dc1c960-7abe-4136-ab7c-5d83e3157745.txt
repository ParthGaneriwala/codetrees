private void traverseDownwards() {
    for (int i = indexOfLowestLevelWithMaxNodes + 1; i < levels.size(); i++) {
        BFSLevel level = levels.elementAt(i);
        // y offset for this level
        int yOffSet = getVerticalDistanceForLayer(i);
        Vector<Node> nodesInLevel = level.getNodes();
        int numNodesInLevel = nodesInLevel.size();
        for (int j = 0; j < numNodesInLevel; j++) {
            Node currNode = nodesInLevel.elementAt(j);
            DrawingParameters dpNode = nodesVsDrawingParameters.get(currNode);
            Vector preds = currNode.getPredecessors();
            int numPreds = preds.size();
            // To be determined
            int xOffset = 0;
            if (numPreds == 1) {
                Node predNode = (Node) preds.elementAt(0);
                DrawingParameters dpParent = nodesVsDrawingParameters.get(predNode);
                int xOffsetParent = dpParent.getXPosition();
                if (isSingleParentRightDiagonal(predNode, currNode, i)) {
                    int nodeSize = dpNode.getSize().width;
                    xOffset = xOffsetParent - nodeSize;
                } else if (isSingleParentLeftDiagonal(predNode, currNode, i)) {
                    int parentNodeSize = dpParent.getSize().width;
                    xOffset = xOffsetParent + parentNodeSize;
                } else {
                    // Same horizontal line as that of the parent
                    xOffset = xOffsetParent;
                }
            } else if (numPreds == 2) {
                Node leftParent = (Node) preds.elementAt(0);
                Node rightParent = (Node) preds.elementAt(1);
                BFSLevel prevLevel = levels.elementAt(i - 1);
                if (prevLevel.containsNode(leftParent)) {
                    DrawingParameters dpParent = nodesVsDrawingParameters.get(leftParent);
                    int xOffsetLeftParent = dpParent.getXPosition();
                    int widthOfLeftParent = dpParent.getSize().width;
                    xOffset = xOffsetLeftParent + widthOfLeftParent;
                } else if (prevLevel.containsNode(rightParent)) {
                    DrawingParameters dpParent = nodesVsDrawingParameters.get(rightParent);
                    int xOffsetLeftParent = dpParent.getXPosition();
                    int widthOfNode = dpNode.getSize().width;
                    xOffset = xOffsetLeftParent - widthOfNode;
                }
            }
            dpNode.setXPosition(xOffset);
            dpNode.setYPosition(yOffSet);
        }
    }
}
