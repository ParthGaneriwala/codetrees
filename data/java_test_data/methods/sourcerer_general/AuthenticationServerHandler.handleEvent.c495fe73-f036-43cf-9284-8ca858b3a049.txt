@Override
public boolean handleEvent(Object data) {
    if (data instanceof SocketChannel) {
        mClientList.remove(getClientUserName((SocketChannel) data));
        return true;
    }
    if (!(data instanceof Request))
        return false;
    Request request = (Request) data;
    Message.MessageType mType = request.getRequestType();
    Response response;
    if (mType == Message.MessageType.AUTHENTICATION) {
        User user = (User) request.getData(Message.AUTH_USER_INFO);
        // authenticate to db
        UserAdmin userAdmin = new UserAdmin();
        boolean authenticated = false;
        String errMsg = null;
        try {
            // the user shouldn't already be logged in
            if (mClientList.get(user.getUserName()) == null) {
                authenticated = (userAdmin.checkPassword(user.getUserName(), user.getPassword()));
                // update the user with other information from db (id, usertype)
                user = userAdmin.getUser(user.getUserName());
            } else {
                errMsg = "User already logged in.";
            }
        } catch (DatabaseException e1) {
            // TODO Auto-generated catch block
            e1.printStackTrace();
        }
        if (authenticated) {
            addClient(user.getUserName(), (SocketChannel) mChannel);
            if (user.getUserType() == UserConstants.TEACHER)
                teacherUserName = user.getUserName();
        } else {
            // authentication failed
            user = null;
            errMsg = errMsg == null ? "Incorrect username and password combination" : errMsg;
        }
        if (authenticated)
            response = new Response(request, Message.AUTH_USER_INFO, user);
        else
            response = new Response(request, Message.AUTH_ERROR, errMsg);
    } else if (mType == Message.MessageType.CLIENT_LIST_REQUEST) {
        response = new Response(request, Message.AUTH_CLIENT_LIST, getClientList());
        response.setUser(request.getUser());
    } else {
        return false;
    }
    try {
        sendMessage(response);
    } catch (IOException e) {
        e.printStackTrace();
    }
    return true;
}
