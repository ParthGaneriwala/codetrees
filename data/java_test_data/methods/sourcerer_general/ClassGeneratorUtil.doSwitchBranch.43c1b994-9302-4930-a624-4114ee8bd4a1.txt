static void doSwitchBranch(int index, String targetClassName, String[] paramTypes, Label endLabel, Label[] labels, int consArgsVar, CodeVisitor cv) {
    cv.visitLabel(labels[index]);
    // cv.visitLineNumber( index, labels[index] );
    // push this before args
    cv.visitVarInsn(ALOAD, 0);
    // Unload the arguments from the ConstructorArgs object
    for (int i = 0; i < paramTypes.length; i++) {
        String type = paramTypes[i];
        String method = null;
        if (type.equals("Z"))
            method = "getBoolean";
        else if (type.equals("B"))
            method = "getByte";
        else if (type.equals("C"))
            method = "getChar";
        else if (type.equals("S"))
            method = "getShort";
        else if (type.equals("I"))
            method = "getInt";
        else if (type.equals("J"))
            method = "getLong";
        else if (type.equals("D"))
            method = "getDouble";
        else if (type.equals("F"))
            method = "getFloat";
        else
            method = "getObject";
        // invoke the iterator method on the ConstructorArgs
        // push the ConstructorArgs
        cv.visitVarInsn(ALOAD, consArgsVar);
        String className = "bsh/ClassGeneratorUtil$ConstructorArgs";
        String retType;
        if (method.equals("getObject"))
            retType = OBJECT;
        else
            retType = type;
        cv.visitMethodInsn(INVOKEVIRTUAL, className, method, "()" + retType);
        // if it's an object type we must do a check cast
        if (method.equals("getObject"))
            cv.visitTypeInsn(CHECKCAST, descriptorToClassName(type));
    }
    // invoke the constructor for this branch
    String descriptor = getMethodDescriptor("V", paramTypes);
    cv.visitMethodInsn(INVOKESPECIAL, targetClassName, "<init>", descriptor);
    cv.visitJumpInsn(GOTO, endLabel);
}
