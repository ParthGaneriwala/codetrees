protected byte getNativeByte(int columnIndex, boolean overflowCheck) throws SQLException {
    checkRowPos();
    checkColumnBounds(columnIndex);
    Object value = this.thisRow.getColumnValue(columnIndex - 1);
    if (value == null) {
        this.wasNullFlag = true;
        return 0;
    }
    if (value == null) {
        this.wasNullFlag = true;
    } else {
        this.wasNullFlag = false;
    }
    if (this.wasNullFlag) {
        return 0;
    }
    columnIndex--;
    Field field = this.fields[columnIndex];
    switch(field.getMysqlType()) {
        case MysqlDefs.FIELD_TYPE_BIT:
            long valueAsLong = getNumericRepresentationOfSQLBitType(columnIndex + 1);
            if (overflowCheck && this.jdbcCompliantTruncationForReads && (valueAsLong < Byte.MIN_VALUE || valueAsLong > Byte.MAX_VALUE)) {
                throwRangeException(String.valueOf(valueAsLong), columnIndex + 1, Types.TINYINT);
            }
            return (byte) valueAsLong;
        case MysqlDefs.FIELD_TYPE_TINY:
            byte valueAsByte = ((byte[]) value)[0];
            if (!field.isUnsigned()) {
                return valueAsByte;
            }
            short valueAsShort = (valueAsByte >= 0) ? valueAsByte : (short) (valueAsByte + (short) 256);
            if (overflowCheck && this.jdbcCompliantTruncationForReads) {
                if (valueAsShort > Byte.MAX_VALUE) {
                    throwRangeException(String.valueOf(valueAsShort), columnIndex + 1, Types.TINYINT);
                }
            }
            return (byte) valueAsShort;
        case MysqlDefs.FIELD_TYPE_SHORT:
        case MysqlDefs.FIELD_TYPE_YEAR:
            valueAsShort = getNativeShort(columnIndex + 1);
            if (overflowCheck && this.jdbcCompliantTruncationForReads) {
                if (valueAsShort < Byte.MIN_VALUE || valueAsShort > Byte.MAX_VALUE) {
                    throwRangeException(String.valueOf(valueAsShort), columnIndex + 1, Types.TINYINT);
                }
            }
            return (byte) valueAsShort;
        case MysqlDefs.FIELD_TYPE_INT24:
        case MysqlDefs.FIELD_TYPE_LONG:
            int valueAsInt = getNativeInt(columnIndex + 1, false);
            if (overflowCheck && this.jdbcCompliantTruncationForReads) {
                if (valueAsInt < Byte.MIN_VALUE || valueAsInt > Byte.MAX_VALUE) {
                    throwRangeException(String.valueOf(valueAsInt), columnIndex + 1, Types.TINYINT);
                }
            }
            return (byte) valueAsInt;
        case MysqlDefs.FIELD_TYPE_FLOAT:
            float valueAsFloat = getNativeFloat(columnIndex + 1);
            if (overflowCheck && this.jdbcCompliantTruncationForReads) {
                if (valueAsFloat < Byte.MIN_VALUE || valueAsFloat > Byte.MAX_VALUE) {
                    throwRangeException(String.valueOf(valueAsFloat), columnIndex + 1, Types.TINYINT);
                }
            }
            return (byte) valueAsFloat;
        case MysqlDefs.FIELD_TYPE_DOUBLE:
            double valueAsDouble = getNativeDouble(columnIndex + 1);
            if (overflowCheck && this.jdbcCompliantTruncationForReads) {
                if (valueAsDouble < Byte.MIN_VALUE || valueAsDouble > Byte.MAX_VALUE) {
                    throwRangeException(String.valueOf(valueAsDouble), columnIndex + 1, Types.TINYINT);
                }
            }
            return (byte) valueAsDouble;
        case MysqlDefs.FIELD_TYPE_LONGLONG:
            valueAsLong = getNativeLong(columnIndex + 1, false, true);
            if (overflowCheck && this.jdbcCompliantTruncationForReads) {
                if (valueAsLong < Byte.MIN_VALUE || valueAsLong > Byte.MAX_VALUE) {
                    throwRangeException(String.valueOf(valueAsLong), columnIndex + 1, Types.TINYINT);
                }
            }
            return (byte) valueAsLong;
        default:
            if (this.useUsageAdvisor) {
                issueConversionViaParsingWarning("getByte()", columnIndex, this.thisRow.getColumnValue(columnIndex - 1), this.fields[columnIndex], new int[] { MysqlDefs.FIELD_TYPE_DOUBLE, MysqlDefs.FIELD_TYPE_TINY, MysqlDefs.FIELD_TYPE_SHORT, MysqlDefs.FIELD_TYPE_LONG, MysqlDefs.FIELD_TYPE_LONGLONG, MysqlDefs.FIELD_TYPE_FLOAT });
            }
            return getByteFromString(getNativeString(columnIndex + 1), columnIndex + 1);
    }
}
