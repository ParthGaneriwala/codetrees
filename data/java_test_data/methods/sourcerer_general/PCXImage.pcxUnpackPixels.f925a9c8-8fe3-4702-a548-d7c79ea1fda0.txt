public void pcxUnpackPixels(byte[] unpacked, byte[] source) {
    int bits;
    int bytesPerLine = bytesPerLine_;
    // source and unpacked counters
    int u_i = 0;
    int s_i = 0;
    if (bitCount_ == 8) {
        while (--bytesPerLine >= 0) unpacked[u_i++] = source[s_i++];
    } else if (bitCount_ == 4) {
        while (--bytesPerLine >= 0) {
            bits = source[s_i++];
            unpacked[u_i++] = (byte) ((bits >> 4) & 0x0f);
            unpacked[u_i++] = (byte) ((bits) & 0x0f);
        }
    } else if (bitCount_ == 2) {
        while (--bytesPerLine >= 0) {
            bits = source[s_i++];
            unpacked[u_i++] = (byte) ((bits >> 6) & 0x03);
            unpacked[u_i++] = (byte) ((bits >> 4) & 0x03);
            unpacked[u_i++] = (byte) ((bits >> 2) & 0x03);
            unpacked[u_i++] = (byte) ((bits) & 0x03);
        }
    } else if (bitCount_ == 1) {
        while (--bytesPerLine >= 0) {
            bits = source[s_i++];
            unpacked[u_i++] = (byte) ((bits >> 7) & 0x01);
            unpacked[u_i++] = (byte) ((bits >> 6) & 0x01);
            unpacked[u_i++] = (byte) ((bits >> 5) & 0x01);
            unpacked[u_i++] = (byte) ((bits >> 4) & 0x01);
            unpacked[u_i++] = (byte) ((bits >> 3) & 0x01);
            unpacked[u_i++] = (byte) ((bits >> 2) & 0x01);
            unpacked[u_i++] = (byte) ((bits >> 1) & 0x01);
            unpacked[u_i++] = (byte) ((bits) & 0x01);
        }
    }
}
