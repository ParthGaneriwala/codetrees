@SuppressWarnings("unused")
private void appendToTraceFile(Set<Shadow> shadowsBefore, ReachingStatesAnalysis forwardAnalysis, ReachingStatesAnalysis backwardAnalysis, File traceFile) {
    FileOutputStream fos = null;
    PrintWriter out = null;
    try {
        fos = new FileOutputStream(traceFile, true);
        out = new PrintWriter(fos);
        List<String> legendStrings = new ArrayList<String>();
        for (Shadow shadow : shadowsBefore) {
            legendStrings.add("# " + shadow.getID() + " " + tracePattern().getName() + "." + symbolNameForShadow(shadow) + " @ " + shadow.getPosition());
        }
        Collections.sort(legendStrings);
        for (String string : legendStrings) {
            out.println(string);
        }
        for (Shadow shadow : shadowsBefore) {
            Map<String, Set<InstanceKey>> shadowBinding = shadowBindings(shadow);
            Disjunct shadowDisjunct = Disjunct.TRUE.addBindingsForSymbol(shadowBinding);
            Set<SMNode> statesBefore = new LinkedHashSet<SMNode>();
            {
                ConfigurationSet flowBefore = forwardAnalysis.getFlowBefore(shadow.getStmtToAttachTo());
                for (Configuration config : flowBefore.getConfigurations()) {
                    if (config.getBinding().isCompatibleTo(shadowDisjunct)) {
                        statesBefore.addAll(config.getStates());
                    }
                }
            }
            {
                String stateString = "";
                for (Iterator<SMNode> iter = statesBefore.iterator(); iter.hasNext(); ) {
                    SMNode node = iter.next();
                    stateString = stateString + node.getNumber();
                    if (iter.hasNext()) {
                        stateString = stateString + ",";
                    }
                }
                out.println(shadow.getID() + ";fw;" + stateString);
            }
            Set<SMNode> statesAfter = new LinkedHashSet<SMNode>();
            {
                ConfigurationSet flowAfter = backwardAnalysis.getFlowBefore(shadow.getStmtToAttachTo());
                for (Configuration config : flowAfter.getConfigurations()) {
                    if (config.getBinding().isCompatibleTo(shadowDisjunct)) {
                        statesAfter.addAll(config.getStates());
                    }
                }
            }
            {
                String stateString = "";
                for (Iterator<SMNode> iter = statesAfter.iterator(); iter.hasNext(); ) {
                    SMNode node = iter.next();
                    stateString = stateString + node.getNumber();
                    if (iter.hasNext()) {
                        stateString = stateString + ",";
                    }
                }
                out.println(shadow.getID() + ";bw;" + stateString);
            }
        }
    } catch (FileNotFoundException e) {
        System.err.println("Error writing to trace file:");
        e.printStackTrace();
    } finally {
        if (out != null) {
            out.flush();
            out.close();
        }
        if (fos != null) {
            try {
                fos.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
}
