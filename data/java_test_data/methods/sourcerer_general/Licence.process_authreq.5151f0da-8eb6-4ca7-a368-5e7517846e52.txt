public void process_authreq(RdpPacket_Localised data) throws RdesktopException, UnsupportedEncodingException, IOException, CryptoException {
    byte[] out_token = new byte[LICENCE_TOKEN_SIZE];
    byte[] decrypt_token = new byte[LICENCE_TOKEN_SIZE];
    byte[] crypt_hwid = new byte[LICENCE_HWID_SIZE];
    byte[] sealed_buffer = new byte[LICENCE_TOKEN_SIZE + LICENCE_HWID_SIZE];
    byte[] out_sig = new byte[LICENCE_SIGNATURE_SIZE];
    RC4 rc4_licence = new RC4();
    byte[] crypt_key = null;
    /* parse incoming packet and save encrypted token */
    if (parse_authreq(data) != true) {
        throw new RdesktopException("Authentication Request was corrupt!");
    }
    System.arraycopy(this.in_token, 0, out_token, 0, LICENCE_TOKEN_SIZE);
    /* decrypt token. It should read TEST in Unicode */
    crypt_key = new byte[this.licence_key.length];
    System.arraycopy(this.licence_key, 0, crypt_key, 0, this.licence_key.length);
    rc4_licence.engineInitDecrypt(crypt_key);
    rc4_licence.crypt(this.in_token, 0, LICENCE_TOKEN_SIZE, decrypt_token, 0);
    /*construct HWID */
    byte[] hwid = this.generate_hwid();
    /* generate signature for a buffer of token and HWId */
    System.arraycopy(decrypt_token, 0, sealed_buffer, 0, LICENCE_TOKEN_SIZE);
    System.arraycopy(hwid, 0, sealed_buffer, LICENCE_TOKEN_SIZE, LICENCE_HWID_SIZE);
    out_sig = secure.sign(this.licence_sign_key, 16, 16, sealed_buffer, sealed_buffer.length);
    /* deliberately break signature if licencing disabled */
    if (!Constants.licence) {
        // set to 0
        out_sig = new byte[LICENCE_SIGNATURE_SIZE];
    }
    /*now crypt the hwid */
    System.arraycopy(this.licence_key, 0, crypt_key, 0, this.licence_key.length);
    rc4_licence.engineInitEncrypt(crypt_key);
    rc4_licence.crypt(hwid, 0, LICENCE_HWID_SIZE, crypt_hwid, 0);
    this.send_authresp(out_token, crypt_hwid, out_sig);
}
