@Override
protected void gotClassLiteral(LocatableToken token) {
    JavaEntity ent = popValueStack();
    TypeEntity tent = ent.resolveAsType();
    if (tent != null) {
        JavaType ttype = tent.getType();
        if (arrayCount > 0) {
            while (arrayCount-- > 0) {
                ttype = ttype.getArray();
            }
            tent = new TypeEntity(ttype);
        }
        GenTypeClass ctype = ttype.asClass();
        if (ctype != null) {
            TypeEntity jlcEnt = resolver.resolveQualifiedClass("java.lang.Class");
            if (jlcEnt != null) {
                List<TypeArgumentEntity> targs = new ArrayList<TypeArgumentEntity>(1);
                targs.add(new SolidTargEntity(tent));
                jlcEnt = jlcEnt.setTypeArgs(targs);
                if (jlcEnt != null) {
                    valueStack.push(new ValueEntity(jlcEnt.getType()));
                    return;
                }
            }
        } else {
            String repClass = null;
            if (ttype.typeIs(JavaType.JT_BOOLEAN)) {
                repClass = "java.lang.Boolean";
            } else if (ttype.typeIs(JavaType.JT_BYTE)) {
                repClass = "java.lang.Byte";
            } else if (ttype.typeIs(JavaType.JT_CHAR)) {
                repClass = "java.lang.Char";
            } else if (ttype.typeIs(JavaType.JT_DOUBLE)) {
                repClass = "java.lang.Double";
            } else if (ttype.typeIs(JavaType.JT_FLOAT)) {
                repClass = "java.lang.Float";
            } else if (ttype.typeIs(JavaType.JT_INT)) {
                repClass = "java.lang.Integer";
            } else if (ttype.typeIs(JavaType.JT_LONG)) {
                repClass = "java.lang.Long";
            } else if (ttype.typeIs(JavaType.JT_VOID)) {
                repClass = "java.lang.Void";
            }
            if (repClass != null) {
                TypeEntity jlcEnt = resolver.resolveQualifiedClass("java.lang.Class");
                TypeEntity repEnt = resolver.resolveQualifiedClass(repClass);
                if (jlcEnt != null && repEnt != null) {
                    List<TypeArgumentEntity> targs = new ArrayList<TypeArgumentEntity>(1);
                    targs.add(new SolidTargEntity(repEnt));
                    jlcEnt = jlcEnt.setTypeArgs(targs);
                    if (jlcEnt != null) {
                        valueStack.push(new ValueEntity(jlcEnt.getType()));
                        return;
                    }
                }
            }
        }
    }
    valueStack.push(new ErrorEntity());
}
