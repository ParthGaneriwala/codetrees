/**
 * The worker method. It will find the container, create the
 * file if missing or just replace its contents, and open
 * the editor on the newly created file.
 * @throws Exception
 */
private void doFinish(String containerName, PluginData data, IProgressMonitor monitor) throws Exception {
    Config config = new Config(data);
    String fileName = null;
    IFile file = null;
    /*
		 * Check if connection could be established - if not error dialog
		 * */
    // fetch content from DB
    ResultSet rs = null;
    InputStream stream = null;
    String query = "select " + data.getFileNameColumn() + ", " + data.getClobColumnName() + " from " + data.getTableName() + "";
    monitor.beginTask("Creating files in project!", 2);
    try {
        rs = config.getStatement().executeQuery(query);
        while (rs.next()) {
            fileName = rs.getString(1);
            fileName = fileName.trim().toLowerCase();
            fileName = fileName + ".html";
            Clob clob = rs.getClob(2);
            stream = clob.getAsciiStream();
            file = createFileInProject(monitor, fileName, stream, data);
        }
        monitor.worked(1);
        final IFile openFile = file;
        monitor.setTaskName("Opening file for editing...");
        getShell().getDisplay().asyncExec(new Runnable() {

            public void run() {
                IWorkbenchPage page = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
                try {
                    IDE.openEditor(page, openFile, true);
                } catch (PartInitException e) {
                // PluginLogger.logError("PartInitException: ", e);
                }
            }
        });
        monitor.worked(1);
    } catch (SQLException e) {
        PluginLogger.logError("SQLException: ", e);
    } finally {
        try {
            if (config.getStatement() != null)
                config.getStatement().close();
            if (config.getConnection() != null)
                config.getConnection().close();
        } catch (SQLException e) {
            PluginLogger.logError("Failed to close Connection: ", e);
        }
    }
}
