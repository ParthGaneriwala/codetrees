protected synchronized boolean fill(boolean force) throws IOException {
    int size;
    byte[] buffer;
    int read;
    boolean ret;
    ret = false;
    if (// mIn goes null when it's been sucked dry
    null != mIn) {
        if (!force) {
            // check for change of state while waiting on the monitor in a synchronous call
            if (0 != available())
                return (true);
            synchronous++;
        }
        // get some buffer space
        if (0 == mContentLength) {
            // unknown content length... keep doubling
            if (null == mBuffer) {
                mBuffer = new byte[Math.max(BUFFER_SIZE, mIn.available())];
                buffer = mBuffer;
            } else {
                if (mBuffer.length - mLevel < BUFFER_SIZE / 2)
                    buffer = new byte[Math.max(mBuffer.length * 2, mBuffer.length + mIn.available())];
                else
                    buffer = mBuffer;
            }
            size = buffer.length - mLevel;
        } else {
            // known content length... allocate once
            size = mContentLength - mLevel;
            if (null == mBuffer)
                mBuffer = new byte[size];
            buffer = mBuffer;
        }
        // read into the end of the 'new' buffer
        read = mIn.read(buffer, mLevel, size);
        if (-1 == read) {
            mIn.close();
            mIn = null;
        } else {
            if (mBuffer != buffer) {
                // copy the bytes previously read
                System.arraycopy(mBuffer, 0, buffer, 0, mLevel);
                mBuffer = buffer;
                reallocations++;
            }
            mLevel += read;
            if ((0 != mContentLength) && (mLevel == mContentLength)) {
                mIn.close();
                mIn = null;
            }
            ret = true;
            fills++;
        }
    }
    return (ret);
}
