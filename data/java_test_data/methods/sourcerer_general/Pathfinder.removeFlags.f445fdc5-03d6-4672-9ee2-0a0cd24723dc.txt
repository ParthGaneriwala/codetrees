protected void removeFlags(Shape shape, int flags, boolean entry, SpaceElement skip) {
    if (flags == 0) {
        // nothing to do
        return;
    }
    Rect bounds = shape.getBounds();
    Vector2f min = bounds.getMinimumExtent(), max = bounds.getMaximumExtent();
    int minx = FloatMath.ifloor(min.x);
    int maxx = FloatMath.ifloor(max.x);
    int miny = FloatMath.ifloor(min.y);
    int maxy = FloatMath.ifloor(max.y);
    for (int yy = miny; yy <= maxy; yy++) {
        for (int xx = minx; xx <= maxx; xx++) {
            if (entry) {
                updateQuad(xx, yy);
                if (shape.intersects(_quad)) {
                    updateEntryFlags(xx, yy, skip);
                }
            } else {
                for (int ys = 0; ys < SUBDIVISION; ys++) {
                    for (int xs = 0; xs < SUBDIVISION; xs++) {
                        updateQuadSubdivision(xx, yy, xs, ys);
                        if (shape.intersects(_quad)) {
                            // remove an entry from the flag list
                            int sx = xx * SUBDIVISION + xs;
                            int sy = yy * SUBDIVISION + ys;
                            int coord = Coord.encode(sx, sy);
                            List<Integer> list = _actorFlagLists.get(coord);
                            if (list == null) {
                                continue;
                            }
                            list.remove((Integer) flags);
                            int nsize = list.size();
                            if (nsize == 0) {
                                _actorFlagLists.remove(coord);
                                _actorFlags.remove(sx, sy);
                                continue;
                            }
                            int combined = 0;
                            for (int ii = 0; ii < nsize; ii++) {
                                combined |= list.get(ii);
                            }
                            _actorFlags.put(sx, sy, combined);
                        }
                    }
                }
            }
        }
    }
}
