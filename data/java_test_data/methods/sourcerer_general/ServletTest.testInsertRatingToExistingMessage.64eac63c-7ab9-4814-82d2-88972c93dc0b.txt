@Test
public void testInsertRatingToExistingMessage() throws Exception {
    // Insert start
    HttpTester request = new HttpTester();
    HttpTester response = new HttpTester();
    request.setMethod("POST");
    request.setURI("/api/insert");
    request.setVersion("HTTP/1.0");
    request.setHeader(HttpHeaders.AUTHORIZATION, getAuthenticationValue());
    request.setHeader("Content-Type", "application/x-www-form-urlencoded");
    // Collection<IPost> posts = new ArrayList<IPost>();
    Map<String, Object> postMap = new HashMap<String, Object>();
    postMap.put("content", "3");
    postMap.put("type", "rating");
    postMap.put("refers_to_id", 7);
    request.setContent("post=" + constructJSONString(postMap));
    response.parse(tester.getResponses(request.generate()));
    Assert.assertEquals("Request denied. " + response.getContent(), HttpServletResponse.SC_OK, response.getStatus());
    // Insert finish
    // query start
    request = new HttpTester();
    response = new HttpTester();
    request.setMethod("POST");
    request.setURI("/api/query");
    request.setVersion("HTTP/1.0");
    request.setHeader(HttpHeaders.AUTHORIZATION, getAuthenticationValue());
    request.setHeader("Content-Type", "application/x-www-form-urlencoded");
    // reading back from db
    List<Map> filterList = new ArrayList<Map>();
    HashMap<String, Object> ratingMap = new HashMap<String, Object>();
    ratingMap.put("output", "id");
    ratingMap.put("used_as", "id");
    ratingMap.put("type", "='rating'");
    ratingMap.put("author_post_id", "=" + TESTER_AUTHOR_ID);
    ratingMap.put("refers_to_id", "=7");
    filterList.add(ratingMap);
    request.setContent("filters=" + constructJSONString(filterList));
    response.parse(tester.getResponses(request.generate()));
    Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatus());
    Assert.assertNotNull(response.getContent());
    List<HashMap> posts = getJSONAsList(response.getContent());
    // query finish
    Map<Integer, IPost> expectedResult = new HashMap<Integer, IPost>();
    Post post1 = new Post(46, TESTER_AUTHOR_ID, 7, "rating", "3", null);
    expectedResult.put(post1.getId(), post1);
    Assert.assertEquals("Unexpected number of posts returned.", expectedResult.size(), posts.size());
    for (HashMap post : posts) {
        long postId = (Long) post.get("id");
        IPost expectedPost = expectedResult.get((int) postId);
        Assert.assertNotNull("Received unexpected post id = " + post.get("id"), expectedPost.getId());
        Assert.assertEquals("content did not match.", expectedPost.getContent(), post.get("content"));
        Assert.assertEquals("refersToId did not match.", expectedPost.getRefersToId(), post.get("refers_to_id"));
        Assert.assertEquals("type did not match.", expectedPost.getType(), post.get("type"));
        Assert.assertEquals("authorPostId did not match.", expectedPost.getAuthorPostId(), post.get("author_post_id"));
    }
}
