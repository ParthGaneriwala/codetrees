// --------------------------------------------------------------------------
@Test
public void testJpgHTML() throws IOException {
    File htmlFile = new File(sOutputDir, "Track2D_testJpgPngHTML.html");
    int minXAxisValue = 90;
    int maxXAxisValue = 1002;
    Track2D rgTrack = createRandomGenesTrack(minXAxisValue, maxXAxisValue);
    rgTrack.addHighlightRegion((maxXAxisValue - minXAxisValue) / 2, (maxXAxisValue - minXAxisValue) / 2);
    List<Track2D> tracks = new ArrayList<Track2D>();
    tracks.add(rgTrack);
    String title = "Track2D Examples";
    HTMLDoc htmlDoc = new HTMLDoc(Doctype.HTML_4_01_TRANSITIONAL);
    HTML html = new HTML(title);
    htmlDoc.setRootNode(html);
    html.getHead().addJavascript(new TooltipJS().generateJS());
    // Add the CSS classes needed for popup menus
    html.getHead().addStyleTag(PopupMenuJS.generateCommonCSS());
    // Add the javascript needed for popup menus
    html.getHead().addJavascript(PopupMenuJS.generateCommonJavascript());
    for (Track2D track : tracks) {
        html.getHead().addSubtag(track.getJavascript());
    }
    Body body = html.getBody();
    body.br(2);
    Center center = body.addCenter();
    center.br(2);
    Table table = center.addTable().setWidth(rgTrack.getImageWidth());
    Th cell = table.addRow().addHeaderCell("JPG Example of Track2D Tracks").setAlign(Align.CENTER).br(2);
    if (rgTrack.hasGenesOnStrand(Strand.FORWARD)) {
        File imageFile = new File(sOutputDir, "rgTrack_f.jpg");
        FileOutputStream fileStream = new FileOutputStream(imageFile);
        rgTrack.writeImageAsJpeg(fileStream, Strand.FORWARD);
        fileStream.close();
        String imageMapName = "rgTrackingMap_f";
        cell.addImage(imageFile.getName()).setUseMap("#" + imageMapName).setBorder(0);
        body.addSubtag(rgTrack.getImageMap(Strand.FORWARD).setName(imageMapName));
    }
    File xAxisImageFile = new File(sOutputDir, "xAxis.jpg");
    FileOutputStream fileStream = new FileOutputStream(xAxisImageFile);
    rgTrack.writeXAxisImageAsJpeg(fileStream);
    fileStream.close();
    cell.addImage(xAxisImageFile.getName()).setBorder(0);
    if (rgTrack.hasGenesOnStrand(Strand.REVERSE)) {
        File imageFile = new File(sOutputDir, "rgTrack_r.jpg");
        fileStream = new FileOutputStream(imageFile);
        rgTrack.writeImageAsJpeg(fileStream, Strand.REVERSE);
        fileStream.close();
        String imageMapName = "rgTrackingMap_r";
        cell.addImage(imageFile.getName()).setUseMap("#" + imageMapName).setBorder(0);
        body.addSubtag(rgTrack.getImageMap(Strand.REVERSE).setName(imageMapName));
    }
    table.addRow().addCell().br(3);
    // PNG version
    cell = table.addRow().addHeaderCell("PNG Example of Track2D Tracks").setAlign(Align.CENTER).br(2);
    if (rgTrack.hasGenesOnStrand(Strand.FORWARD)) {
        File imageFile = new File(sOutputDir, "rgTrack_f.png");
        fileStream = new FileOutputStream(imageFile);
        rgTrack.writeImageAsPng(fileStream, Strand.FORWARD);
        fileStream.close();
        String imageMapName = "rgTrackingMap_f";
        cell.addImage(imageFile.getName()).setUseMap("#" + imageMapName).setBorder(0);
    // The image map was already written
    }
    xAxisImageFile = new File(sOutputDir, "xAxis.png");
    fileStream = new FileOutputStream(xAxisImageFile);
    rgTrack.writeXAxisImageAsJpeg(fileStream);
    fileStream.close();
    cell.addImage(xAxisImageFile.getName()).setBorder(0);
    if (rgTrack.hasGenesOnStrand(Strand.REVERSE)) {
        File imageFile = new File(sOutputDir, "rgTrack_r.png");
        fileStream = new FileOutputStream(imageFile);
        rgTrack.writeImageAsJpeg(fileStream, Strand.REVERSE);
        fileStream.close();
        String imageMapName = "rgTrackingMap_r";
        cell.addImage(imageFile.getName()).setUseMap("#" + imageMapName).setBorder(0);
    // The image map was already written
    }
    htmlDoc.toIndentedHTML(new PrintWriter(new FileOutputStream(htmlFile)), 3, 3);
    System.out.println("Wrote " + htmlFile.getPath());
}
