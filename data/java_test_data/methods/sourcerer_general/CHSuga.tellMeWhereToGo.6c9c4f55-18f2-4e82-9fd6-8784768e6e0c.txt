public Movimento tellMeWhereToGo(boolean aleatorio) {
    double[] inputs;
    double[] outputs;
    Movimento retVal = new Movimento(0, 0);
    // 10 entradas, uma por jogador
    Vector<Double> inputsVector = neuralInfoOndeEstaoOsJogadores();
    inputsVector.add(neuralInfoNumJogNoAtaque());
    inputsVector.add(neuralInfoTimeComAPosseDeBola());
    inputsVector.add(neuralInfoDistJogBola());
    inputsVector.add(neuralInfoAngJogBola());
    // converte para double[]
    inputs = convertVectorToArray(inputsVector);
    if (aleatorio && (currTime / TIME_STEP % 113 == 0)) {
        // a cada 113 tentativas toma uma
        // atitude aleat�ria (se aleatorio estiver true)
        // gera sa�da aleat�ria (-0.8 ou +0.8)
        // usada no treinamento
        // s�o 4 sa�das nesta rede
        outputs = new double[4];
        for (int i = 0; i < outputs.length; i++) {
            outputs[i] = 0.8;
            if (randomGen.nextBoolean())
                outputs[i] *= -1;
        }
    } else {
        // gera sa�da por meio da rede neural
        outputs = neuralMovim.Output(inputs);
        // para fins de treinamento
        for (int i = 0; i < outputs.length; i++) {
            if (outputs[i] > 0) {
                outputs[i] = 0.8;
            } else {
                outputs[i] = -0.8;
            }
        }
    }
    // confiderando aqui que j� pequei o outputs[]
    double rightLeft = outputs[0];
    double rightLeftSpeed = outputs[1];
    double upDown = outputs[2];
    double upDownSpeed = outputs[3];
    // todos estes ifs e elses s�o s� para decidir para que lado vou e velocidade
    if (rightLeftSpeed > 0 && upDownSpeed > 0) {
        if (rightLeft > 0 && upDown > 0) {
            // direita e para cima
            retVal.direcao = Math.PI / 4;
            retVal.velocidade = 1;
        } else if (rightLeft > 0 && upDown <= 0) {
            // direita e para baixo
            retVal.direcao = -Math.PI / 4;
            retVal.velocidade = 1;
        } else if (rightLeft <= 0 && upDown > 0) {
            // esquerda para cima
            retVal.direcao = 3 * Math.PI / 4;
            retVal.velocidade = 1;
        }
    } else if (rightLeftSpeed > 0 && upDownSpeed <= 0) {
        if (rightLeft > 0) {
            // direita
            retVal.direcao = 0;
            retVal.velocidade = 1;
        } else if (rightLeft <= 0) {
            // esquerda
            retVal.direcao = Math.PI;
            retVal.velocidade = 1;
        }
    } else if (rightLeftSpeed <= 0 && upDownSpeed > 0) {
        if (upDown > 0) {
            // cima
            retVal.direcao = Math.PI / 2;
            retVal.velocidade = 1;
        } else if (upDown <= 0) {
            // baixo
            retVal.direcao = -Math.PI / 2;
            retVal.velocidade = 1;
        }
    } else if (rightLeftSpeed <= 0 && upDownSpeed <= 0) {
        // parado
        retVal.direcao = 0;
        retVal.velocidade = 0;
    }
    // troca sinal do x se estiver do outro lado do campo
    Vec2 vet = new Vec2(0, 0);
    vet.setr(1);
    vet.sett(retVal.direcao);
    trocaSinalX(vet);
    retVal.direcao = vet.t;
    // adicionamos entradas, sa�das e tempo atual � fila trainerDataMovim
    trainerDataMovim.add(new EntradaSaidaRede(inputs, outputs, currTime));
    return retVal;
}
