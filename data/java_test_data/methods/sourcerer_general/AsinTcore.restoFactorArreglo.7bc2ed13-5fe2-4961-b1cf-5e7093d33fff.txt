private Tipo restoFactorArreglo(Elemento idObj, String lexema, int pasaje) throws AleXcore.ExcepcionCaracterInvalido, AleXcore.ExcepcionComentarioSinCerrar, AleXcore.ExcepcionIdentificadorInvalido, AleXcore.ExcepcionComentarioCerrado, ExcepcionErrorSintactico, ExcepcionErrorSemantico {
    // (pasaje);
    Tipo tipoExpresion = expresion(VALOR);
    Tipo tipoResultado = null;
    tipoSimple(tipoExpresion);
    if (pasaje == REFERENCIA) {
        if (idObj.esVariable()) {
            Variable idObjPAR = ((Variable) idObj);
            if (idObjPAR.getTipo().esArreglo()) {
                if (TdS.compatibles(((Arreglo) ((Variable) idObj).getTipo()).getTipoIndice(), tipoExpresion)) {
                    // Controlo que la expresion a ser utilizada como indice del arreglo sea de tipo simple
                    tipoSimple(tipoExpresion);
                    // if ((tipoExpresion.esEntero()) || tipoExpresion.esSubrango() || tipoExpresion.esBoolean()){
                    // testear si est치 dentro del rango
                    Arreglo ArrIdObj = (Arreglo) ((Variable) idObj).getTipo();
                    MepaH.generarInstruccion("CONT " + ArrIdObj.getli() + " , " + ArrIdObj.getls());
                    // normalizo los indices
                    MepaH.generarInstruccion("APCT " + ArrIdObj.getli());
                    MepaH.generarInstruccion("SUST");
                    // apilo el valor del arreglo
                    MepaH.generarInstruccion("APDC " + ((Variable) idObj).getNivelLexico() + " , " + ((Variable) idObj).getOffset());
                    tipoResultado = ArrIdObj.getTipoElemento();
                // }
                } else {
                    throw new ExcepcionErrorSemantico(("En linea: " + ultimoToken.getLinea() + ". El tipo de la expresion no es compatible con el tipo indice del arreglo"));
                }
            } else {
                throw new ExcepcionErrorSemantico("En linea: " + ultimoToken.getLinea() + ". Se intenta indexar a un identificador que no corresponde a una variable de tipo arreglo");
            }
        } else if (idObj.esParametro()) {
            ParametroFormal idObjPAR = (ParametroFormal) idObj;
            if (idObjPAR.getTipo().esArreglo()) {
                if (TdS.compatibles(((Arreglo) idObjPAR.getTipo()).getTipoIndice(), tipoExpresion)) {
                    // Controlo que la expresion a ser utilizada como indice del arreglo sea de tipo simple
                    tipoSimple(tipoExpresion);
                    // if ((tipoExpresion.esEntero() || tipoExpresion.esSubrango()) || tipoExpresion.esBoolean()){
                    // testear si est치 dentro del rango
                    MepaH.generarInstruccion("CONT " + ((Arreglo) idObjPAR.getTipo()).getli() + " , " + ((Arreglo) idObjPAR.getTipo()).getls());
                    // normalizo los indices
                    MepaH.generarInstruccion("APCT " + ((Arreglo) idObjPAR.getTipo()).getli());
                    MepaH.generarInstruccion("SUST");
                    if (idObjPAR.getPasaje() == VALOR) {
                        // apilo el valor del arreglo
                        MepaH.generarInstruccion("APDC " + idObjPAR.getNivelLexico() + " , " + idObjPAR.getOffset());
                    } else {
                        // apilo el valor del arreglo
                        MepaH.generarInstruccion("APVL " + idObjPAR.getNivelLexico() + " , " + idObjPAR.getOffset());
                        MepaH.generarInstruccion("SUMA");
                    }
                    tipoResultado = ((Arreglo) idObjPAR.getTipo()).getTipoElemento();
                // }
                } else {
                    throw new ExcepcionErrorSemantico(("En linea: " + ultimoToken.getLinea() + ". El tipo de la expresion no es compatible con el tipo indice del arreglo"));
                }
            } else {
                throw new ExcepcionErrorSemantico("En linea: " + ultimoToken.getLinea() + ". Se intenta indexar a un identificador que no corresponde a una variable de tipo arreglo");
            }
        } else {
            throw new ExcepcionErrorSemantico("En linea: " + ultimoToken.getLinea() + ". Se intenta indexar a un identificador que no corresponde a una variable de tipo arreglo");
        }
    } else {
        // PASAJE POR VALOR
        if (idObj.esVariable()) {
            if (((Variable) idObj).getTipo().esArreglo()) {
                if (TdS.compatibles(((Arreglo) ((Variable) idObj).getTipo()).getTipoIndice(), tipoExpresion)) {
                    // Controlo que la expresion a ser utilizada como indice del arreglo sea de tipo simple
                    tipoSimple(tipoExpresion);
                    // if ((tipoExpresion.esEntero()) || tipoExpresion.esSubrango() || tipoExpresion.esBoolean()){
                    Arreglo ArrIdObj = (Arreglo) ((Variable) idObj).getTipo();
                    // testear si est치 dentro del rango
                    MepaH.generarInstruccion("CONT " + ArrIdObj.getli() + " , " + ArrIdObj.getls());
                    // normalizo los indices
                    MepaH.generarInstruccion("APCT " + ArrIdObj.getli());
                    MepaH.generarInstruccion("SUST");
                    // apilo el valor del arreglo
                    MepaH.generarInstruccion("APAR " + ((Variable) idObj).getNivelLexico() + " , " + ((Variable) idObj).getOffset());
                    tipoResultado = ArrIdObj.getTipoElemento();
                // }
                } else {
                    throw new ExcepcionErrorSemantico(("En linea: " + ultimoToken.getLinea() + ". El tipo de la expresion no es compatible con el tipo indice del arreglo"));
                }
            } else {
                throw new ExcepcionErrorSemantico("En linea: " + ultimoToken.getLinea() + ". Se intenta indexar a un identificador que no corresponde a una variable de tipo arreglo");
            }
        } else if (idObj.esParametro()) {
            ParametroFormal idObjPAR = (ParametroFormal) idObj;
            if (idObjPAR.getTipo().esArreglo()) {
                if (TdS.compatibles(((Arreglo) idObjPAR.getTipo()).getTipoIndice(), tipoExpresion)) {
                    // Controlo que la expresion a ser utilizada como indice del arreglo sea de tipo simple
                    tipoSimple(tipoExpresion);
                    // if ((tipoExpresion.esEntero() || tipoExpresion.esSubrango()) || tipoExpresion.esBoolean()){
                    Arreglo ArrIdObj = (Arreglo) ((ParametroFormal) idObj).getTipo();
                    // testear si est치 dentro del rango
                    MepaH.generarInstruccion("CONT " + ((Arreglo) idObjPAR.getTipo()).getli() + " , " + ((Arreglo) idObjPAR.getTipo()).getls());
                    // normalizo los indices
                    MepaH.generarInstruccion("APCT " + ((Arreglo) idObjPAR.getTipo()).getli());
                    MepaH.generarInstruccion("SUST");
                    if (idObjPAR.getPasaje() == VALOR) {
                        // apilo el valor del arreglo
                        MepaH.generarInstruccion("APAR " + idObjPAR.getNivelLexico() + " , " + idObjPAR.getOffset());
                    } else {
                        // apilo el valor del arreglo
                        MepaH.generarInstruccion("APAI " + idObjPAR.getNivelLexico() + " , " + idObjPAR.getOffset());
                    }
                    tipoResultado = ArrIdObj.getTipoElemento();
                // }
                } else {
                    throw new ExcepcionErrorSemantico(("En linea: " + ultimoToken.getLinea() + ". El tipo de la expresion no es compatible con el tipo indice del arreglo"));
                }
            } else {
                throw new ExcepcionErrorSemantico("En linea: " + ultimoToken.getLinea() + ". Se intenta indexar a un identificador que no corresponde a una variable de tipo arreglo");
            }
        } else {
            throw new ExcepcionErrorSemantico("En linea: " + ultimoToken.getLinea() + ". Se intenta indexar a un identificador que no corresponde a una variable de tipo arreglo");
        }
    /**/
    }
    // sentenciaArreglo();
    return tipoResultado;
}
