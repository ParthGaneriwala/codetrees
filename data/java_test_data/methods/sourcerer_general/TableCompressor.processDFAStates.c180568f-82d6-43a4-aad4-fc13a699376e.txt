// 
// 1st parse each DFA states into _noCompressList, _fullCompressList
// and _blockListMap.  For states that contain holes, also put it into
// _holeSet.
// 
// 2nd step basically fills all holes in the _holeSet
private void processDFAStates() {
    short i;
    int repeatCount;
    short[] repeatValue = new short[1];
    // 
    // process each state to see the repeats, holes, etc
    // 
    int diff;
    short cmpState;
    for (i = 0; i < m_dfaCopy.size(); i++) {
        repeatCount = findRepeat(m_dfaCopy.getRow(i), repeatValue);
        int hardDiff = getErrorCount(i);
        diff = getNonDefaultDiff(i, repeatValue[0]);
        cmpState = i;
        if (repeatCount < GOODREPEAT)
            diff = hardDiff;
        // difference
        if (repeatCount != m_rowSize) {
            int stateDiff = m_rowSize;
            short stateCmp = 0;
            // find the minimal difference state
            for (short j = 0; j < i; ++j) {
                int d = getStateDiff(i, j);
                if (d < stateDiff) {
                    stateCmp = j;
                    stateDiff = d;
                } else if (d == stateDiff) {
                    // for two same diff's, pick the smaller block size
                    int[] minMax = new int[2];
                    int b1, b2;
                    b1 = getStateDiffBlock(i, stateCmp, minMax);
                    b2 = getStateDiffBlock(i, j, minMax);
                    if (b2 < b1) {
                        stateCmp = j;
                        stateDiff = d;
                    }
                }
            }
            if (stateDiff < diff + BALANCE) {
                cmpState = stateCmp;
                diff = stateDiff;
            }
        }
        if (i == cmpState)
            processStateRepeat(i, repeatValue[0], repeatCount);
        else
            // processStateRepeat (i, (short)0, 0);
            processStateDiff(i, cmpState);
    }
}
