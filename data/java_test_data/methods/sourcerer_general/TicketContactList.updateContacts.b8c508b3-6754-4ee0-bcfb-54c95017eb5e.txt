public static void updateContacts(Connection db, int userId, int ticketId, String insertMembers, String deleteMembers) throws SQLException {
    if (insertMembers != null && !insertMembers.equals("") && ticketId > -1) {
        if (System.getProperty("DEBUG") != null) {
            System.out.println("TicketContactList-> New: " + insertMembers);
        }
        StringTokenizer items = new StringTokenizer(insertMembers, "|");
        while (items.hasMoreTokens()) {
            String itemIdValue = items.nextToken();
            // Insert the item type...
            TicketContact ticketContact = new TicketContact();
            ticketContact.setTicketId(ticketId);
            ticketContact.setEnteredBy(userId);
            // Lookup the email in the user table, if found associate the user
            if (itemIdValue.indexOf("@") > 0) {
                int existingUserId = User.getIdByEmailAddress(db, itemIdValue);
                if (existingUserId > -1) {
                    itemIdValue = String.valueOf(existingUserId);
                }
            }
            // Lookup the email in the contact table, if found associate the contact
            if (itemIdValue.indexOf("@") > 0) {
                int existingContactId = ContactList.getIdByEmailAddress(db, itemIdValue);
                if (existingContactId > -1) {
                    itemIdValue = "C" + String.valueOf(existingContactId);
                }
            }
            if (itemIdValue.indexOf("@") > 0) {
                // Contains "@" for using email
                ticketContact.setContactEmail(itemIdValue);
                ticketContact.insert(db);
            } else if (itemIdValue.startsWith("C")) {
                // Contains "C" + int for using contactId
                int newContactId = Integer.parseInt(itemIdValue.substring(1));
                // TODO: verify access to this contact id
                // if (hasContactAccess(db, userId, newContactId)) {
                ticketContact.setContactId(newContactId);
                ticketContact.insert(db);
            // }
            } else {
                // Contains int for using userId
                int newUserId = Integer.parseInt(itemIdValue);
                // if (UserList.hasUserAccess(db, userId, newUserId)) {
                ticketContact.setUserId(newUserId);
                // TODO: verify access to this userId
                ticketContact.insert(db);
            // }
            }
        }
    }
    // Removed deleted members
    if (deleteMembers != null && !deleteMembers.equals("") && ticketId > -1) {
        if (System.getProperty("DEBUG") != null) {
            System.out.println("TicketContactList-> Del: " + deleteMembers);
        }
        // Delete everyone but self
        StringTokenizer items = new StringTokenizer(deleteMembers, "|");
        while (items.hasMoreTokens()) {
            String itemId = items.nextToken();
            String query = "AND id = 0 ";
            if (itemId.indexOf("@") > 0) {
                // Contains "@" for using email
                query = "AND contact_email = ? ";
            } else if (itemId.startsWith("C")) {
                // Contains "C" + int for using contactId
                query = "AND contact_id = ? ";
            } else {
                // Contains int for using userId
                query = "AND user_id = ? ";
            }
            PreparedStatement pst = db.prepareStatement("DELETE FROM ticket_contacts " + "WHERE ticketid = ? " + query);
            pst.setInt(1, ticketId);
            if (itemId.indexOf("@") > 0) {
                // Contains "@" for using email
                pst.setString(2, itemId);
            } else if (itemId.startsWith("C")) {
                // Contains "C" + int for using contactId
                pst.setInt(2, Integer.parseInt(itemId.substring(1)));
            } else {
                // Contains int for using userId
                pst.setInt(2, Integer.parseInt(itemId));
            }
            pst.execute();
            pst.close();
        }
    }
}
