private void prunePreterminals(final double[] clusterScores) {
    int leavesToCut = nrLeaves - lm.getMaxClusters();
    BinaryTreeIterator<HistoryTreePayload> iterator;
    Comparator<BinaryTree<HistoryTreePayload>> cmp = new Comparator<BinaryTree<HistoryTreePayload>>() {

        private double getScore(BinaryTree<HistoryTreePayload> item) {
            // return Math.min(item.getLeft().getPayload().lambda, item.getRight().getPayload().lambda);
            return clusterScores[item.getPayload().clusterid];
        }

        public int compare(BinaryTree<HistoryTreePayload> item1, BinaryTree<HistoryTreePayload> item2) {
            double score1 = getScore(item1);
            double score2 = getScore(item2);
            return score1 < score2 ? -1 : (score1 > score2 ? 1 : 0);
        }
    };
    final PriorityQueue<BinaryTree<HistoryTreePayload>> preterminals = new PriorityQueue<BinaryTree<HistoryTreePayload>>(nrLeaves + 1, cmp);
    iterator = theTree.getPostOrderIterator();
    while (iterator.hasNext()) {
        BinaryTree<HistoryTreePayload> node = iterator.nextNode();
        if (!node.isLeaf() && node.getLeft().isLeaf() && node.getRight().isLeaf()) {
            preterminals.add(node);
        }
    }
    while (leavesToCut > 0) {
        // prune a couple of leaves
        BinaryTree<HistoryTreePayload> node = preterminals.remove();
        BinaryTree<HistoryTreePayload> left = node.getLeft();
        BinaryTree<HistoryTreePayload> right = node.getRight();
        // update parent's lambda
        double leftCount = left == null ? 0 : clusterScores[left.getPayload().clusterid];
        double rightCount = right == null ? 0 : clusterScores[right.getPayload().clusterid];
        double parentCount = clusterScores[node.getPayload().clusterid];
        System.out.printf("pruning node [%d]: count=%g, left=%g, right=%g\n", node.getPayload().clusterid, parentCount, leftCount, rightCount);
        node.setLeft(null);
        node.setRight(null);
        node.getPayload().question = null;
        BinaryTree<HistoryTreePayload> parent = node.getParent();
        if (parent.getRight().isLeaf() && parent.getLeft().isLeaf()) {
            preterminals.add(parent);
            int parentId = parent.getPayload().clusterid;
            System.out.printf("new preterminal [%d], count = %g\n", parentId, clusterScores[parentId]);
        }
        --leavesToCut;
    }
    nrLeaves = lm.getMaxClusters();
}
