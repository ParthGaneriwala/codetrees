public void testTokenizer() {
    Tokenizer tokenizer = new Tokenizer("a(foo,bar)  'i am a literal' so there", "()[], \t\n\r'", "'", true);
    assertEquals(tokenizer.nextToken(), "a");
    assertEquals(tokenizer.nextToken(), "(");
    assertEquals(tokenizer.nextToken(), "foo");
    assertEquals(tokenizer.nextToken(), ",");
    assertEquals(tokenizer.nextToken(), "bar");
    assertEquals(tokenizer.nextToken(), ")");
    assertEquals(tokenizer.nextToken(), " ");
    assertEquals(tokenizer.nextToken(), " ");
    assertEquals(tokenizer.nextToken(), "'");
    assertEquals(tokenizer.nextToken(), "i am a literal");
    assertEquals(tokenizer.nextToken(), "'");
    assertEquals(tokenizer.nextToken(), " ");
    assertEquals(tokenizer.nextToken(), "so");
    assertEquals(tokenizer.nextToken(), " ");
    assertEquals(tokenizer.nextToken(), "there");
    assertTrue(!tokenizer.hasMoreTokens());
    tokenizer = new Tokenizer("a(foo,bar)  'i am a literal' so there", "()[], \t\n\r'", "'", false);
    assertEquals(tokenizer.nextToken(), "a");
    assertEquals(tokenizer.nextToken(), "foo");
    assertEquals(tokenizer.nextToken(), "bar");
    assertEquals(tokenizer.nextToken(), "i am a literal");
    assertEquals(tokenizer.nextToken(), "so");
    assertEquals(tokenizer.nextToken(), "there");
    assertTrue(!tokenizer.hasMoreTokens());
}
