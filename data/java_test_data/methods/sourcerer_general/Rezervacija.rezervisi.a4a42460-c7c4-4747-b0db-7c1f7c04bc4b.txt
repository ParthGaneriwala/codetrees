public String rezervisi() {
    String result = null;
    FacesContext context = FacesContext.getCurrentInstance();
    HttpSession session = (HttpSession) context.getExternalContext().getSession(false);
    Korisnik kor = (Korisnik) session.getAttribute("korisnik");
    Termin ter = kor.getTermin();
    try {
        SimpleDateFormat dateFormatter = new SimpleDateFormat("dd.MM.yyyy.");
        setDatum(new Date(dateFormatter.parse(datumString).getTime()));
        SimpleDateFormat timeFormatter = new SimpleDateFormat("H:mm");
        setPocevOd(new Time(timeFormatter.parse(pocevOdString).getTime()));
    } catch (ParseException ex) {
        Logger.getLogger(Rezervacija.class.getName()).log(Level.SEVERE, null, ex);
    }
    setDatumRezervisanja(new Timestamp(System.currentTimeMillis()));
    if (kor.getIzabraniKorisnik() != null) {
        setKorisnik(kor.getIzabraniKorisnik());
    } else {
        setKorisnik(kor);
    }
    setSala(kor.getIzabrana());
    Calendar tmpCal = new GregorianCalendar();
    tmpCal.setTimeInMillis(pocevOd.getTime());
    tmpCal.set(0, 0, 0);
    tmpCal.set(Calendar.MINUTE, 0);
    tmpCal.set(Calendar.MILLISECOND, 0);
    setPocevOd(new Time(tmpCal.getTimeInMillis()));
    tmpCal.set(Calendar.HOUR_OF_DAY, tmpCal.get(Calendar.HOUR_OF_DAY) + trajanje);
    Time kraj = new Time(tmpCal.getTimeInMillis());
    List<Rezervacija> rezervacije = getRezervacijeByDate(sala, datum);
    boolean zauzet = false;
    for (Rezervacija r : rezervacije) {
        Calendar tmpCal2 = new GregorianCalendar();
        tmpCal2.setTimeInMillis(r.getPocevOd().getTime());
        tmpCal2.set(0, 0, 0);
        tmpCal2.set(Calendar.MINUTE, 0);
        tmpCal2.set(Calendar.MILLISECOND, 0);
        r.setPocevOd(new Time(tmpCal2.getTimeInMillis()));
        tmpCal2.set(Calendar.HOUR_OF_DAY, tmpCal2.get(Calendar.HOUR_OF_DAY) + r.getTrajanje());
        Time kraj2 = new Time(tmpCal2.getTimeInMillis());
        boolean pocetakJednak = pocevOd.equals(r.getPocevOd());
        boolean pocetakUIntervalu = pocevOd.after(r.getPocevOd()) && pocevOd.before(kraj2);
        boolean krajJednak = kraj.equals(kraj2);
        boolean krajUIntervalu = kraj.after(r.getPocevOd()) && kraj.before(kraj2);
        boolean obuhvata = pocevOd.before(r.pocevOd) && kraj.after(kraj2);
        if (pocetakJednak || pocetakUIntervalu || krajJednak || krajUIntervalu || obuhvata) {
            zauzet = true;
        }
    }
    Calendar tmpCal3 = new GregorianCalendar();
    tmpCal3.setTimeInMillis(pocevOd.getTime());
    tmpCal3.set(0, 0, 0);
    tmpCal3.set(Calendar.MINUTE, 0);
    tmpCal3.set(Calendar.MILLISECOND, 0);
    int poc = tmpCal3.get(Calendar.HOUR_OF_DAY);
    NeradniDan nd = NeradniDan.getDatumNeradan(sala, new java.util.Date(datum.getTime()));
    if (poc < 8 || poc + trajanje > 22) {
        result = "Izabrani termin prekoračuje radno vreme (od 8 do 22h). Molimo, izaberite termin u okviru radnog vremena.";
    } else if (zauzet) {
        result = "Izabrani termin se preklapa sa već postojećim terminom. Molimo, izaberite drugi termin ili drugu salu.";
    } else if (nd != null) {
        result = "Izabrani termin se nalazi u neradnom danu (" + nd.getRazlog() + "). Molimo, izaberite drugi termin.";
    } else {
        result = saveRezervacija(this);
    }
    context.addMessage(null, new FacesMessage(result));
    return kor.isIsAdmin() ? Korisnik.ACTION_ADMIN : Korisnik.ACTION_KORISNIK;
}
