public GenericBean processAction(ActionRequest request, ActionResponse response) throws Exception {
    // Determine the project container to use
    Project project = findProject(request);
    if (project == null) {
        throw new Exception("Project is null");
    }
    // Check the user's permissions
    User user = getUser(request);
    if (!ProjectUtils.hasAccess(project.getId(), user, "project-documents-files-delete")) {
        throw new PortletException("Unauthorized to delete in this project");
    }
    // Get the record id
    int id = getPageViewAsInt(request);
    // Get the record's version
    double version = getPageParameterAsDouble(request);
    // Determine the file path for documents
    String filePath = PortalUtils.getFileLibraryPath(request, "projects");
    // Determine the database connectivity
    Connection db = useConnection(request);
    // Load the record
    FileItem thisItem = new FileItem(db, id, project.getId(), Constants.PROJECTS_FILES);
    // Determine if just 1 version or the whole file is to be deleted
    boolean isVersion = false;
    boolean recordDeleted = false;
    if (version > 0) {
        thisItem.buildVersionList(db);
        if (thisItem.getVersionList().size() > 1) {
            isVersion = true;
            if (version == thisItem.getVersionList().get(0).getVersion()) {
                // Remove from index the old file item
                indexDeleteItem(request, thisItem);
                // The first entry in the list is being deleted
                // Delete the version, the next item will update the FileItem
                thisItem.getVersionList().get(0).delete(db, filePath);
                thisItem.updateVersion(db, thisItem.getVersionList().get(1));
                // Index the new top entry
                thisItem.setDirectory(filePath);
                indexAddItem(request, thisItem);
                // Trigger the workflow
                processDeleteHook(request, thisItem.getVersionList().get(0));
            } else {
                // Just delete the version since it's not the latest
                thisItem.getVersion(version).delete(db, filePath);
                // Trigger the workflow
                processDeleteHook(request, thisItem.getVersionList().get(0));
            }
        } else {
            // Delete the only version in the list
            thisItem.delete(db, filePath);
            // Remove from index
            indexDeleteItem(request, thisItem);
            // Trigger the workflow
            processDeleteHook(request, thisItem);
        }
    } else {
        // All versions are being deleted
        thisItem.delete(db, filePath);
        // Remove from index
        indexDeleteItem(request, thisItem);
        // Trigger the workflow
        processDeleteHook(request, thisItem);
    }
    // This call will close panels and perform redirects
    if (isVersion) {
        return (PortalUtils.performRefresh(request, response, "/show/file/" + thisItem.getId()));
    } else {
        if (thisItem.getFolderId() > -1) {
            return (PortalUtils.performRefresh(request, response, "/show/folder/" + thisItem.getFolderId()));
        } else {
            return (PortalUtils.performRefresh(request, response, "/show/documents/"));
        }
    }
}
