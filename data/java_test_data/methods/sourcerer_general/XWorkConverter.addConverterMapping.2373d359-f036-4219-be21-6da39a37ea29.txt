void addConverterMapping(Map<String, Object> mapping, Class clazz) {
    try {
        String converterFilename = buildConverterFilename(clazz);
        InputStream is = FileManager.loadFile(converterFilename, clazz);
        if (is != null) {
            if (LOG.isDebugEnabled()) {
                LOG.debug("processing conversion file [" + converterFilename + "] [class=" + clazz + "]");
            }
            Properties prop = new Properties();
            prop.load(is);
            Iterator it = prop.entrySet().iterator();
            while (it.hasNext()) {
                Map.Entry entry = (Map.Entry) it.next();
                String key = (String) entry.getKey();
                if (mapping.containsKey(key)) {
                    break;
                }
                // for keyProperty of Set
                if (key.startsWith(DefaultObjectTypeDeterminer.KEY_PROPERTY_PREFIX) || key.startsWith(DefaultObjectTypeDeterminer.CREATE_IF_NULL_PREFIX)) {
                    if (LOG.isDebugEnabled()) {
                        LOG.debug("\t" + key + ":" + entry.getValue() + "[treated as String]");
                    }
                    mapping.put(key, entry.getValue());
                } else // for properties of classes
                if (!(key.startsWith(DefaultObjectTypeDeterminer.ELEMENT_PREFIX) || key.startsWith(DefaultObjectTypeDeterminer.KEY_PREFIX) || key.startsWith(DefaultObjectTypeDeterminer.DEPRECATED_ELEMENT_PREFIX))) {
                    TypeConverter _typeConverter = createTypeConverter((String) entry.getValue());
                    if (LOG.isDebugEnabled()) {
                        LOG.debug("\t" + key + ":" + entry.getValue() + "[treated as TypeConverter " + _typeConverter + "]");
                    }
                    mapping.put(key, _typeConverter);
                } else // for keys of Maps
                if (key.startsWith(DefaultObjectTypeDeterminer.KEY_PREFIX)) {
                    Class converterClass = Thread.currentThread().getContextClassLoader().loadClass((String) entry.getValue());
                    // put a value in for the type converter of the class
                    if (converterClass.isAssignableFrom(TypeConverter.class)) {
                        TypeConverter _typeConverter = createTypeConverter((String) entry.getValue());
                        if (LOG.isDebugEnabled()) {
                            LOG.debug("\t" + key + ":" + entry.getValue() + "[treated as TypeConverter " + _typeConverter + "]");
                        }
                        mapping.put(key, _typeConverter);
                    } else {
                        if (LOG.isDebugEnabled()) {
                            LOG.debug("\t" + key + ":" + entry.getValue() + "[treated as Class " + converterClass + "]");
                        }
                        mapping.put(key, converterClass);
                    }
                } else // elements(values) of maps / lists
                {
                    Class _c = Thread.currentThread().getContextClassLoader().loadClass((String) entry.getValue());
                    if (LOG.isDebugEnabled()) {
                        LOG.debug("\t" + key + ":" + entry.getValue() + "[treated as Class " + _c + "]");
                    }
                    mapping.put(key, _c);
                }
            }
        }
    } catch (Exception ex) {
        LOG.error("Problem loading properties for " + clazz.getName(), ex);
    }
    // Process annotations
    Annotation[] annotations = clazz.getAnnotations();
    for (Annotation annotation : annotations) {
        if (annotation instanceof Conversion) {
            Conversion conversion = (Conversion) annotation;
            for (TypeConversion tc : conversion.conversions()) {
                String key = tc.key();
                if (mapping.containsKey(key)) {
                    break;
                }
                if (LOG.isDebugEnabled()) {
                    LOG.debug(key + ":" + key);
                }
                if (key != null) {
                    try {
                        if (tc.type() == ConversionType.APPLICATION) {
                            defaultMappings.put(key, createTypeConverter(tc.converter()));
                        } else {
                            if (tc.rule().toString().equals(ConversionRule.KEY_PROPERTY) || tc.rule().toString().equals(ConversionRule.CREATE_IF_NULL)) {
                                mapping.put(key, tc.value());
                            } else // for properties of classes
                            if (!(tc.rule().toString().equals(ConversionRule.ELEMENT.toString())) || tc.rule().toString().equals(ConversionRule.KEY.toString()) || tc.rule().toString().equals(ConversionRule.COLLECTION.toString())) {
                                mapping.put(key, createTypeConverter(tc.converter()));
                            } else // for keys of Maps
                            if (tc.rule().toString().equals(ConversionRule.KEY.toString())) {
                                Class converterClass = Thread.currentThread().getContextClassLoader().loadClass(tc.converter());
                                if (LOG.isDebugEnabled()) {
                                    LOG.debug("Converter class: " + converterClass);
                                }
                                // put a value in for the type converter of the class
                                if (converterClass.isAssignableFrom(TypeConverter.class)) {
                                    mapping.put(key, createTypeConverter(tc.converter()));
                                } else {
                                    mapping.put(key, converterClass);
                                    if (LOG.isDebugEnabled()) {
                                        LOG.debug("Object placed in mapping for key " + key + " is " + mapping.get(key));
                                    }
                                }
                            } else // elements(values) of maps / lists
                            {
                                mapping.put(key, Thread.currentThread().getContextClassLoader().loadClass(tc.converter()));
                            }
                        }
                    } catch (Exception e) {
                    }
                }
            }
        }
    }
    Method[] methods = clazz.getMethods();
    for (Method method : methods) {
        annotations = method.getAnnotations();
        for (Annotation annotation : annotations) {
            if (annotation instanceof TypeConversion) {
                TypeConversion tc = (TypeConversion) annotation;
                String key = tc.key();
                if (mapping.containsKey(key)) {
                    break;
                }
                // Default to the property name
                if (key != null && key.length() == 0) {
                    key = AnnotationUtils.resolvePropertyName(method);
                    LOG.debug("key from method name... " + key + " - " + method.getName());
                }
                if (LOG.isDebugEnabled()) {
                    LOG.debug(key + ":" + key);
                }
                if (key != null) {
                    try {
                        if (tc.type() == ConversionType.APPLICATION) {
                            defaultMappings.put(key, createTypeConverter(tc.converter()));
                        } else {
                            if (tc.rule().toString().equals(ConversionRule.KEY_PROPERTY)) {
                                mapping.put(key, tc.value());
                            } else // for properties of classes
                            if (!(tc.rule().toString().equals(ConversionRule.ELEMENT.toString())) || tc.rule().toString().equals(ConversionRule.KEY.toString()) || tc.rule().toString().equals(ConversionRule.COLLECTION.toString())) {
                                mapping.put(key, createTypeConverter(tc.converter()));
                            } else // for keys of Maps
                            if (tc.rule().toString().equals(ConversionRule.KEY.toString())) {
                                Class converterClass = Thread.currentThread().getContextClassLoader().loadClass(tc.converter());
                                if (LOG.isDebugEnabled()) {
                                    LOG.debug("Converter class: " + converterClass);
                                }
                                // put a value in for the type converter of the class
                                if (converterClass.isAssignableFrom(TypeConverter.class)) {
                                    mapping.put(key, createTypeConverter(tc.converter()));
                                } else {
                                    mapping.put(key, converterClass);
                                    if (LOG.isDebugEnabled()) {
                                        LOG.debug("Object placed in mapping for key " + key + " is " + mapping.get(key));
                                    }
                                }
                            } else // elements(values) of maps / lists
                            {
                                mapping.put(key, Thread.currentThread().getContextClassLoader().loadClass(tc.converter()));
                            }
                        }
                    } catch (Exception e) {
                    }
                }
            }
        }
    }
}
