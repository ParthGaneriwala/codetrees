public void buildList(Connection db) throws SQLException {
    PreparedStatement pst = null;
    ResultSet rs = null;
    int items = -1;
    StringBuffer sqlSelect = new StringBuffer();
    StringBuffer sqlCount = new StringBuffer();
    StringBuffer sqlFilter = new StringBuffer();
    StringBuffer sqlOrder = new StringBuffer();
    // Need to build a base SQL statement for counting records
    sqlCount.append("SELECT COUNT(*) as recordcount " + "FROM report_queue q " + "LEFT JOIN projects p ON (q.project_id = p.project_id) " + "WHERE queue_id > -1 ");
    createFilter(sqlFilter, db);
    if (pagedListInfo != null) {
        // Get the total number of records matching filter
        pst = db.prepareStatement(sqlCount.toString() + sqlFilter.toString());
        items = prepareFilter(pst);
        rs = pst.executeQuery();
        if (rs.next()) {
            int maxRecords = rs.getInt("recordcount");
            pagedListInfo.setMaxRecords(maxRecords);
        }
        rs.close();
        pst.close();
        // Determine column to sort by
        pagedListInfo.setDefaultSort("q.entered", "DESC");
        pagedListInfo.appendSqlTail(db, sqlOrder);
    } else {
        sqlOrder.append("ORDER BY p.title, p.project_id, q.status, q.processed desc, q.schedule_time ");
    }
    // Need to build a base SQL statement for returning records
    if (pagedListInfo != null) {
        pagedListInfo.appendSqlSelectHead(db, sqlSelect);
    } else {
        sqlSelect.append("SELECT ");
    }
    sqlSelect.append("q.* " + "FROM report_queue q " + "LEFT JOIN projects p ON (q.project_id = p.project_id) " + "WHERE queue_id > -1 ");
    pst = db.prepareStatement(sqlSelect.toString() + sqlFilter.toString() + sqlOrder.toString());
    items = prepareFilter(pst);
    rs = pst.executeQuery();
    if (pagedListInfo != null) {
        pagedListInfo.doManualOffset(db, rs);
    }
    while (rs.next()) {
        ReportQueue thisQueue = new ReportQueue(rs);
        this.add(thisQueue);
    }
    rs.close();
    pst.close();
    if (buildResources) {
        Iterator i = this.iterator();
        while (i.hasNext()) {
            ReportQueue thisQueue = (ReportQueue) i.next();
            thisQueue.buildReport(db);
        }
    }
}
