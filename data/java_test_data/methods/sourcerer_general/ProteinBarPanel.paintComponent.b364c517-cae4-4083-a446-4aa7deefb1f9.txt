protected void paintComponent(Graphics g) {
    this.iHeight = this.getHeight();
    this.iWidth = this.getWidth();
    // get the peptide groups linked to this protien
    Vector<QuantitativePeptideGroup> lPeptideGroups = iProtein.getPeptideGroups(true);
    this.setBackground(Color.white);
    // only go through with this if the height is minimal 40;
    if (iHeight < 40) {
        return;
    }
    // draw white backgrouns
    g.setColor(Color.white);
    g.fillRect(0, 0, iWidth, iHeight);
    g.setColor(Color.black);
    if (iSequence == null) {
        // not sequence found
        g.setFont(new Font("Times New Roman", Font.PLAIN, 20));
        g.drawString("No sequence found", iWidth / 20 - 40, iHeight / 2);
        // don't paint the rest
        return;
    }
    // calculate the height and widht of one box
    int lBoxHeight = (iHeight - 25 - (iNumberOfBoxes - 1) * 5) / iNumberOfBoxes;
    int lBoxWidth = iWidth - 95;
    int lLength = 0;
    for (int i = 0; i < iNumberOfBoxes; i++) {
        int lTempLength = iProtein.getTypes()[i].length();
        if (lTempLength > lLength) {
            lLength = lTempLength;
        }
    }
    if (lLength > 3) {
        lBoxWidth = lBoxWidth - (lLength - 3) * 5;
    }
    if (lBoxHeight < 5) {
        return;
    }
    // draw the gradient rectangle
    Graphics2D g2d = (Graphics2D) g;
    Color lRed = Color.red;
    Color lBlack = Color.black;
    GradientPaint gradient = new GradientPaint(15, 5, lRed, 15, iHeight / 2, lBlack, false);
    g2d.setPaint(gradient);
    g2d.fillRect(15, 5, 30, (iHeight - 10) / 2);
    Color lGreen = Color.green;
    GradientPaint gradient1 = new GradientPaint(15, iHeight / 2, lBlack, 15, iHeight - 5, lGreen, false);
    g2d.setPaint(gradient1);
    g2d.fillRect(15, iHeight / 2, 30, (iHeight - 10) / 2);
    g2d.setColor(Color.black);
    // paint markers on gradient
    g.setColor(Color.white);
    g.setFont(new Font("Times New Roman", Font.PLAIN, 12));
    if (iQuantitativeValidationSingelton.isLog2()) {
        g.drawString(String.valueOf(iQuantitativeValidationSingelton.getLeftGraphBorder()), 27, 15 + 12);
        g.drawString("0", 30, iHeight / 2 + 6);
        g.drawString(String.valueOf(iQuantitativeValidationSingelton.getRightGraphBorder()), 30, iHeight - 15 - 2);
    } else {
        g.drawString(String.valueOf(iQuantitativeValidationSingelton.getLeftGraphBorder()), 27, 15 + 12);
        g.drawString("1", 30, iHeight / 2 + 6);
        g.drawString(String.valueOf(iQuantitativeValidationSingelton.getRightGraphBorder()), 30, iHeight - 15 - 2);
    }
    g.setColor(Color.black);
    // paint the boxes
    for (int i = 0; i < iNumberOfBoxes; i++) {
        int lYstart = 5 + i * (5 + lBoxHeight);
        int lXstart = 80;
        if (lLength > 3) {
            lXstart = lXstart + (lLength - 3) * 5;
        }
        g.drawRect(lXstart, lYstart, lBoxWidth, lBoxHeight);
        // paint the box ratio type
        g.setFont(new Font("Times New Roman", Font.PLAIN, 12));
        g.drawString(iProtein.getTypes()[i] + " : ", 50, lYstart + 5 + lBoxHeight / 2);
        for (int j = 0; j < lPeptideGroups.size(); j++) {
            if (lPeptideGroups.get(j).isUsedInCalculations()) {
                boolean lCreateBox = true;
                if (iQuantitativeValidationSingelton.isUseOnlyValidRatioForProteinMean()) {
                    // check if it is valid
                    if (lPeptideGroups.get(j).getNumberOfValidRatiosForType(iProtein.getTypes()[i]) == 0) {
                        // it's not valid, don't create it
                        lCreateBox = false;
                    }
                }
                if (iQuantitativeValidationSingelton.isUseOnlyUniqueRatioForProteinMean()) {
                    // check if it is unique
                    if (lPeptideGroups.get(j).getRatioGroups().get(0).getProteinAccessions().length != 1) {
                        // it's not unique don't create it
                        lCreateBox = false;
                    }
                }
                if (lCreateBox) {
                    int lPeptideStart = lPeptideGroups.get(j).getStartPosition();
                    int lPeptideEnd = lPeptideGroups.get(j).getEndPosition();
                    if (lPeptideStart > -1) {
                        // only show it if it is found
                        int lXratioBoxStart = (int) Math.round((double) lBoxWidth * ((double) lPeptideStart / (double) iSequenceLength));
                        int lXratioBoxEnd = (int) Math.round((double) lBoxWidth * ((double) lPeptideEnd / (double) iSequenceLength));
                        Color lColor;
                        if (iQuantitativeValidationSingelton.isLog2()) {
                            lColor = calculateColor(lPeptideGroups.get(j).getMeanRatioForGroup(iProtein.getTypes()[i]), 0.0, (double) iQuantitativeValidationSingelton.getRightGraphBorder(), (double) iQuantitativeValidationSingelton.getLeftGraphBorder());
                        } else {
                            lColor = calculateColor(lPeptideGroups.get(j).getMeanRatioForGroup(iProtein.getTypes()[i]), 1.0, (double) iQuantitativeValidationSingelton.getRightGraphBorder(), (double) iQuantitativeValidationSingelton.getLeftGraphBorder());
                        }
                        // paint box
                        g.setColor(lColor);
                        int lXBoxstart = 80;
                        if (lLength > 3) {
                            lXBoxstart = lXBoxstart + (lLength - 3) * 5;
                        }
                        g.fillRect(lXBoxstart + lXratioBoxStart, lYstart, lXratioBoxEnd - lXratioBoxStart, lBoxHeight);
                        // paint identifier
                        g.setColor(Color.gray);
                        g.setFont(new Font("Times New Roman", Font.BOLD, 20));
                        g.drawString(String.valueOf(j + 1), lXBoxstart + (lXratioBoxStart + lXratioBoxEnd) / 2 - 5, 15 + lBoxHeight / 2 + i * (5 + lBoxHeight));
                        g.setColor(Color.black);
                    }
                }
            }
        }
    }
    // paint the bottom box
    // this is a box with orange and blue squares
    // the square is orange if the corresponding peptide is linked to multiple proteins
    int lXSubBoxstart = 80;
    if (lLength > 3) {
        lXSubBoxstart = lXSubBoxstart + (lLength - 3) * 5;
    }
    g.drawRect(lXSubBoxstart, iHeight - 15, lBoxWidth, 10);
    // paint the colored peptide boxes
    for (int j = 0; j < lPeptideGroups.size(); j++) {
        RatioGroup lRatioGroup = lPeptideGroups.get(j).getRatioGroups().get(0);
        boolean lRatioGroupedLinkedToMultipleProteins = lPeptideGroups.get(j).isLinkedToMoreProteins();
        int lPeptideStart = lPeptideGroups.get(j).getStartPosition();
        int lPeptideEnd = lPeptideStart + lRatioGroup.getPeptideSequence().length();
        if (lPeptideStart > -1) {
            // only show it if it is found
            int lXratioBoxStart = (int) Math.round((double) lBoxWidth * ((double) lPeptideStart / (double) iSequenceLength));
            int lXratioBoxEnd = (int) Math.round((double) lBoxWidth * ((double) lPeptideEnd / (double) iSequenceLength));
            Color lColor;
            if (iProtein.getAccession().trim().equalsIgnoreCase(lPeptideGroups.get(j).getRazorAccession()) && lRatioGroupedLinkedToMultipleProteins) {
                lColor = Color.RED;
            } else if (lRatioGroupedLinkedToMultipleProteins) {
                lColor = Color.ORANGE;
            } else {
                lColor = Color.BLUE;
            }
            // paint box
            g.setColor(lColor);
            int lXBoxstart = 80;
            if (lLength > 3) {
                lXBoxstart = lXBoxstart + (lLength - 3) * 5;
            }
            g.fillRect(lXBoxstart + lXratioBoxStart, iHeight - 15, lXratioBoxEnd - lXratioBoxStart, 10);
            // set color back to black
            g.setColor(Color.black);
        }
    }
}
