@Test
public void testSubtokens() {
    Tokenizer tokenizer = new Subtokenizer();
    List<Token> tokens;
    tokens = tokenizer.getTokens("Asdf");
    assertEquals(1, tokens.size());
    assertEquals("Asdf", tokens.get(0).getTokenText());
    tokens = tokenizer.getTokens("Asdf123");
    assertEquals(2, tokens.size());
    assertEquals("Asdf", tokens.get(0).getTokenText());
    assertEquals("123", tokens.get(1).getTokenText());
    tokens = tokenizer.getTokens("Asdf-123");
    assertEquals(3, tokens.size());
    assertEquals("Asdf", tokens.get(0).getTokenText());
    assertEquals("-", tokens.get(1).getTokenText());
    assertEquals("123", tokens.get(2).getTokenText());
    tokens = tokenizer.getTokens("B/CD28-responsive");
    assertEquals(6, tokens.size());
    assertEquals("B", tokens.get(0).getTokenText());
    assertEquals("/", tokens.get(1).getTokenText());
    assertEquals("CD", tokens.get(2).getTokenText());
    assertEquals("28", tokens.get(3).getTokenText());
    assertEquals("-", tokens.get(4).getTokenText());
    assertEquals("responsive", tokens.get(5).getTokenText());
    tokens = tokenizer.getTokens("activity,");
    assertEquals(2, tokens.size());
    assertEquals("activity", tokens.get(0).getTokenText());
    assertEquals(",", tokens.get(1).getTokenText());
    tokens = tokenizer.getTokens("(IL-2)");
    assertEquals(5, tokens.size());
    assertEquals("(", tokens.get(0).getTokenText());
    assertEquals("IL", tokens.get(1).getTokenText());
    assertEquals("-", tokens.get(2).getTokenText());
    assertEquals("2", tokens.get(3).getTokenText());
    assertEquals(")", tokens.get(4).getTokenText());
    tokens = tokenizer.getTokens("These findings should be useful for therapeutic strategies and the development of immunosuppressants targeting the CD28 costimulatory pathway. ");
    assertEquals(20, tokens.size());
}
