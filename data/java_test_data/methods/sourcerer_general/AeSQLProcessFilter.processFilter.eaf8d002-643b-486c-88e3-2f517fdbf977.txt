protected void processFilter() throws AeStorageException {
    clearWhereClause();
    // The static where clause is included on the query if it's been set in
    // the config file.
    appendCondition(getSQLStatement(IAeProcessSQLKeys.GET_PROCESS_LIST_WHERE));
    if (getFilter() != null) {
        AeProcessFilter filter = (AeProcessFilter) getFilter();
        // Handle process name specified in the filter.
        QName processName = filter.getProcessName();
        if (processName != null) {
            String localPart = processName.getLocalPart();
            String namespaceURI = processName.getNamespaceURI();
            // $NON-NLS-1$ //$NON-NLS-2$
            appendCondition(AeSQLProcessStateStorageProvider.SQL_PROCESS_TABLE_NAME + "." + IAeProcessColumns.PROCESS_NAME + " = ?", localPart);
            if (!AeUtil.isNullOrEmpty(namespaceURI)) {
                // $NON-NLS-1$ //$NON-NLS-2$
                appendCondition(AeSQLProcessStateStorageProvider.SQL_PROCESS_TABLE_NAME + "." + IAeProcessColumns.PROCESS_NAMESPACE + " = ?", namespaceURI);
            }
        }
        // Handle process state specified in the filter.
        switch(filter.getProcessState()) {
            case AeProcessFilter.STATE_COMPLETED:
                // $NON-NLS-1$
                appendCondition(IAeProcessColumns.PROCESS_STATE + " = ?", new Integer(IAeBusinessProcess.PROCESS_COMPLETE));
                break;
            case AeProcessFilter.STATE_RUNNING:
                // $NON-NLS-1$
                appendCondition(IAeProcessColumns.PROCESS_STATE + " = ?", new Integer(IAeBusinessProcess.PROCESS_RUNNING));
                break;
            case AeProcessFilter.STATE_FAULTED:
                // $NON-NLS-1$
                appendCondition(IAeProcessColumns.PROCESS_STATE + " = ?", new Integer(IAeBusinessProcess.PROCESS_FAULTED));
                break;
            case AeProcessFilter.STATE_SUSPENDED:
                // $NON-NLS-1$
                appendCondition(IAeProcessColumns.PROCESS_STATE + " = ?", new Integer(IAeBusinessProcess.PROCESS_SUSPENDED));
                break;
            case AeProcessFilter.STATE_SUSPENDED_FAULTING:
                // $NON-NLS-1$
                appendCondition(IAeProcessColumns.PROCESS_STATE + " = ?", new Integer(IAeBusinessProcess.PROCESS_SUSPENDED));
                // $NON-NLS-1$
                appendCondition(IAeProcessColumns.PROCESS_STATE_REASON + " = ?", new Integer(AeSuspendReason.SUSPEND_CODE_AUTOMATIC));
                break;
            case AeProcessFilter.STATE_SUSPENDED_PROGRAMMATIC:
                // $NON-NLS-1$
                appendCondition(IAeProcessColumns.PROCESS_STATE + " = ?", new Integer(IAeBusinessProcess.PROCESS_SUSPENDED));
                // $NON-NLS-1$
                appendCondition(IAeProcessColumns.PROCESS_STATE_REASON + " = ?", new Integer(AeSuspendReason.SUSPEND_CODE_LOGICAL));
                break;
            case AeProcessFilter.STATE_SUSPENDED_MANUAL:
                // $NON-NLS-1$
                appendCondition(IAeProcessColumns.PROCESS_STATE + " = ?", new Integer(IAeBusinessProcess.PROCESS_SUSPENDED));
                // $NON-NLS-1$
                appendCondition(IAeProcessColumns.PROCESS_STATE_REASON + " = ?", new Integer(AeSuspendReason.SUSPEND_CODE_MANUAL));
                break;
            case AeProcessFilter.STATE_COMPLETED_OR_FAULTED:
                appendCondition(IAeProcessColumns.PROCESS_STATE + " IN (?, ?)", new Object[] { // $NON-NLS-1$
                new Integer(IAeBusinessProcess.PROCESS_COMPLETE), new Integer(IAeBusinessProcess.PROCESS_FAULTED) });
                break;
            case AeProcessFilter.STATE_COMPENSATABLE:
                // $NON-NLS-1$
                appendCondition(IAeProcessColumns.PROCESS_STATE + " = ?", new Integer(IAeBusinessProcess.PROCESS_COMPENSATABLE));
                break;
            default:
                break;
        }
        // Handle start of process start date range specified in the filter.
        Date processCreateStart = filter.getProcessCreateStart();
        if (processCreateStart != null) {
            // $NON-NLS-1$
            appendCondition(IAeProcessColumns.START_DATE + " >= ?", processCreateStart);
        }
        // Handle end of process start date range specified in the filter.
        Date processCreateEnd = filter.getProcessCreateEndNextDay();
        if (processCreateEnd != null) {
            // $NON-NLS-1$
            appendCondition(IAeProcessColumns.START_DATE + " < ?", processCreateEnd);
        }
        // Handle start of process complete date range specified in the filter.
        Date processCompleteStart = filter.getProcessCompleteStart();
        if (processCompleteStart != null) {
            // $NON-NLS-1$
            appendCondition(IAeProcessColumns.END_DATE + " >= ?", processCompleteStart);
        }
        // Handle end of process complete date range specified in the filter.
        Date processCompleteEnd = filter.getProcessCompleteEndNextDay();
        if (processCompleteEnd != null) {
            // $NON-NLS-1$
            appendCondition(IAeProcessColumns.END_DATE + " < ?", processCompleteEnd);
        }
        // Handle the planId specified in the filter
        int planId = filter.getPlanId();
        if (planId != 0) {
            // $NON-NLS-1$ //$NON-NLS-2$
            appendCondition(AeSQLProcessStateStorageProvider.SQL_PROCESS_TABLE_NAME + "." + IAeProcessColumns.PLAN_ID + " = ?", new Integer(planId));
        }
        // Handle the endDate in the filter, when deletableDate > endDate, it can be deleted, where deletableDate = currentDeleteDate - retentationDays.
        Date deletableDate = filter.getDeletableDate();
        if (deletableDate != null) {
            // $NON-NLS-1$
            appendCondition(IAeProcessColumns.END_DATE + " < ?", deletableDate);
        }
        // Handle the deleteRange of processes specified in the filter
        long[] processIdRange = filter.getProcessIdRange();
        if (processIdRange != null) {
            Long fromIndex = new Long(processIdRange[0]);
            Long toIndex = new Long(processIdRange[1]);
            // $NON-NLS-1$
            appendCondition(IAeProcessColumns.PROCESS_ID + " BETWEEN ? AND ? ", new Long[] { fromIndex, toIndex });
        }
    }
}
