// $ANTLR start "prog"
public final MyGrammarParser.prog_return prog() throws RecognitionException {
    MyGrammarParser.prog_return retval = new MyGrammarParser.prog_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token MODULE1 = null;
    Token IDENTIFIER2 = null;
    Token PVG3 = null;
    Token PF7 = null;
    MyGrammarParser.decl_var_return decl_var4 = null;
    MyGrammarParser.decl_proc_return decl_proc5 = null;
    MyGrammarParser.init_bloc_void_return init_bloc_void6 = null;
    CommonTree MODULE1_tree = null;
    CommonTree IDENTIFIER2_tree = null;
    CommonTree PVG3_tree = null;
    CommonTree PF7_tree = null;
    RewriteRuleTokenStream stream_MODULE = new RewriteRuleTokenStream(adaptor, "token MODULE");
    RewriteRuleTokenStream stream_PF = new RewriteRuleTokenStream(adaptor, "token PF");
    RewriteRuleTokenStream stream_IDENTIFIER = new RewriteRuleTokenStream(adaptor, "token IDENTIFIER");
    RewriteRuleTokenStream stream_PVG = new RewriteRuleTokenStream(adaptor, "token PVG");
    RewriteRuleSubtreeStream stream_decl_var = new RewriteRuleSubtreeStream(adaptor, "rule decl_var");
    RewriteRuleSubtreeStream stream_init_bloc_void = new RewriteRuleSubtreeStream(adaptor, "rule init_bloc_void");
    RewriteRuleSubtreeStream stream_decl_proc = new RewriteRuleSubtreeStream(adaptor, "rule decl_proc");
    try {
        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:134:6: ( MODULE IDENTIFIER PVG ( decl_var )? ( decl_proc )* init_bloc_void PF -> ^( PROGRAM IDENTIFIER ( decl_var )? ( decl_proc )* init_bloc_void ) )
        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:134:8: MODULE IDENTIFIER PVG ( decl_var )? ( decl_proc )* init_bloc_void PF
        {
            MODULE1 = (Token) match(input, MODULE, FOLLOW_MODULE_in_prog738);
            stream_MODULE.add(MODULE1);
            IDENTIFIER2 = (Token) match(input, IDENTIFIER, FOLLOW_IDENTIFIER_in_prog740);
            stream_IDENTIFIER.add(IDENTIFIER2);
            PVG3 = (Token) match(input, PVG, FOLLOW_PVG_in_prog743);
            stream_PVG.add(PVG3);
            // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:134:33: ( decl_var )?
            int alt1 = 2;
            int LA1_0 = input.LA(1);
            if ((LA1_0 == VAR)) {
                alt1 = 1;
            }
            switch(alt1) {
                case 1:
                    // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:134:33: decl_var
                    {
                        pushFollow(FOLLOW_decl_var_in_prog747);
                        decl_var4 = decl_var();
                        state._fsp--;
                        stream_decl_var.add(decl_var4.getTree());
                    }
                    break;
            }
            // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:134:43: ( decl_proc )*
            loop2: do {
                int alt2 = 2;
                int LA2_0 = input.LA(1);
                if ((LA2_0 == PROCEDURE)) {
                    alt2 = 1;
                }
                switch(alt2) {
                    case 1:
                        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:134:44: decl_proc
                        {
                            pushFollow(FOLLOW_decl_proc_in_prog751);
                            decl_proc5 = decl_proc();
                            state._fsp--;
                            stream_decl_proc.add(decl_proc5.getTree());
                        }
                        break;
                    default:
                        break loop2;
                }
            } while (true);
            pushFollow(FOLLOW_init_bloc_void_in_prog755);
            init_bloc_void6 = init_bloc_void();
            state._fsp--;
            stream_init_bloc_void.add(init_bloc_void6.getTree());
            PF7 = (Token) match(input, PF, FOLLOW_PF_in_prog757);
            stream_PF.add(PF7);
            // AST REWRITE
            // elements: init_bloc_void, decl_proc, decl_var, IDENTIFIER
            // token labels:
            // rule labels: retval
            // token list labels:
            // rule list labels:
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", retval != null ? retval.tree : null);
            root_0 = (CommonTree) adaptor.nil();
            // 134:74: -> ^( PROGRAM IDENTIFIER ( decl_var )? ( decl_proc )* init_bloc_void )
            {
                // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:134:77: ^( PROGRAM IDENTIFIER ( decl_var )? ( decl_proc )* init_bloc_void )
                {
                    CommonTree root_1 = (CommonTree) adaptor.nil();
                    root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(PROGRAM, "PROGRAM"), root_1);
                    adaptor.addChild(root_1, stream_IDENTIFIER.nextNode());
                    // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:134:98: ( decl_var )?
                    if (stream_decl_var.hasNext()) {
                        adaptor.addChild(root_1, stream_decl_var.nextTree());
                    }
                    stream_decl_var.reset();
                    // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:134:108: ( decl_proc )*
                    while (stream_decl_proc.hasNext()) {
                        adaptor.addChild(root_1, stream_decl_proc.nextTree());
                    }
                    stream_decl_proc.reset();
                    adaptor.addChild(root_1, stream_init_bloc_void.nextTree());
                    adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
