private static String replaceMacrosMasked(String s, String lang) {
    Map<String, String> macroMap = null;
    lang = lang.toUpperCase();
    if (lang.equals("EN")) {
        macroMap = macroMapEN;
    } else if (lang.equals("DE")) {
        macroMap = macroMapDE;
    } else if (lang.equals("IT")) {
        macroMap = macroMapIT;
    } else {
        System.err.println("Error in replaceMacrosMasked(): lang = " + lang);
    }
    if (macroMap == null) {
        System.err.println("AAAARGH!!!!");
    }
    Reader reader;
    macroParser_Lexer lexer;
    String result = "";
    reader = new StringReader(s);
    lexer = new macroParser_Lexer(reader);
    macroParser_Parser parser = new macroParser_Parser(lexer);
    try {
        parser.string();
        AST ast = parser.getAST();
        AST firstchild = ast;
        // down first.
        if (ast.getType() == STRING_) {
            firstchild = ast.getFirstChild();
        }
        do {
            if (firstchild.getType() == MACRO) {
                // if (macroMap.get(firstchild.getFirstChild().toString())
                // != null) {
                String key = firstchild.getFirstChild().toString();
                if (macroMap.get(key.substring(1, key.length() - 1)) != null) {
                    result += macroMap.get(key.substring(1, key.length() - 1));
                } else {
                    result += ("----MacroNotFound-" + key.substring(1, key.length() - 1) + "----");
                // System.out.println("WARNING: MacroNotFound: " + key);
                }
            } else if (firstchild.getType() == NON_MACRO) {
                result += firstchild.getFirstChild().toString();
            }
        } while ((firstchild = firstchild.getNextSibling()) != null);
    } catch (RecognitionException e) {
        System.err.println(e.toString());
    } catch (TokenStreamException e) {
        System.err.println(e.toString());
    }
    return result;
/*
		 * Pattern MACRO = Pattern.compile("#([^#]+)#"); StringBuffer result =
		 * new StringBuffer(); Matcher matcher = MACRO.matcher(s); try { while
		 * (matcher.find()) { if (macroMap.get(matcher.group(1)) != null) {
		 * matcher.appendReplacement(result, macroMap.get(matcher .group(1))); }
		 * else { // System.err .println("ERROR: Reference to a macro name //
		 * that is undefined in the macro definition file"); // + s + "\n" +
		 * result.toString()); matcher.appendReplacement(result,
		 * "MacroNotFound"); } } } catch (Exception e) {
		 * System.err.println("ERROR: Unknown macro error on line:\n" + s + "\n"
		 * + e.getMessage()); Runtime.getRuntime().exit(1); }
		 * 
		 * matcher.appendTail(result); String res_str; res_str =
		 * result.toString(); return res_str;
		 */
}
