public synchronized void makeMove(Types.Direct direction, int player_id) {
    Player player = player_list.get(player_id);
    if (player == null)
        return;
    Cell player_pos = player.getPosition();
    int x = player_pos.getX();
    int y = player_pos.getY();
    switch(direction) {
        case LEFT:
            y--;
            break;
        case RIGHT:
            y++;
            break;
        case UP:
            x--;
            break;
        case DOWN:
            x++;
            break;
    }
    Tile nextTile = current_map.getTile(x, y);
    Types.TileAct tile_state = nextTile.okToStep(player);
    switch(tile_state) {
        case MOVE:
            break;
        case OPEN:
            current_map.knockDown(x, y);
            break;
        case ITEM:
            Types.Item item = ((NormalTile) nextTile).getItem();
            if (item == Types.Item.CHIP)
                chips_left--;
            else
                player.giveItem(item);
            break;
        /* clearing the moves queue stops the player from building up
		 * unwanted moves while on an ice patch or move tiles by idly
		 * poking keys*/
        case CONT:
            moves_queue.clear();
            player.changePosition(x, y);
            try {
                Thread.sleep(SLEEP);
            } catch (Exception e) {
            }
            sleep_count += SLEEP;
            makeMove(direction, player_id);
            return;
        case GOTO:
            moves_queue.clear();
            player.changePosition(x, y);
            try {
                Thread.sleep(SLEEP);
            } catch (Exception e) {
            }
            sleep_count += SLEEP;
            makeMove(((MoveTile) nextTile).getDirection(), player_id);
            return;
        case END:
            if (chips_left == 0)
                game_state = Types.EngineState.WIN;
            break;
        case KILL:
            game_state = Types.EngineState.DEAD;
            break;
        case STOP:
            return;
    }
    player.changePosition(x, y);
}
