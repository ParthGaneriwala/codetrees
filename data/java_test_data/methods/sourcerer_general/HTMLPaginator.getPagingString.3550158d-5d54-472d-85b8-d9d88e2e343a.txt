public String getPagingString(int start, int range, long results, int pages, String id, String pagingRequestPath) {
    int i, ci;
    boolean firstPage, lastPage, hasPreviousPage, hasNextPage;
    if (pages > 1) {
        // current index
        ci = (start / range);
        firstPage = ci < 2 ? true : false;
        lastPage = (ci == (pages - 1)) ? true : false;
        hasPreviousPage = ci > 0 ? true : false;
        hasNextPage = ci < pages - 1 ? true : false;
        // setting start to 0
        start = 0;
        StringBuffer sb = null;
        try {
            sb = new StringBuffer();
            sb.append(LB).append(SPACE);
            sb.append(pages).append(SPACE).append(pagesString).append(SPACE);
            if (hasPreviousPage) {
                sb.append(getAnchor((ci - 1) * range, range, previousString, id, pagingRequestPath)).append(PIPE).append(SPACE);
            }
            if (!firstPage) {
                sb.append(getAnchor(0, range, firstString, id, pagingRequestPath)).append(PIPE).append(SPACE);
            }
            /**
             * logica para as ancoras
             * deve mostrar 5 ancoras do lado esquerdo e direito do indice corrente se possivel
             */
            i = ci - 5 < 0 ? 0 : ci - 5;
            start = ci - 5 < 1 ? start : range * (ci - 5);
            pages = ci + 5 > pages ? pages : ci + 5;
            for (; i < pages; i++) {
                if (i == ci) {
                    sb.append(BOLDSTART).append(i + 1).append(BOLDEND).append(SPACE);
                } else {
                    sb.append(getAnchor(start, range, i + 1, id, pagingRequestPath));
                }
                start += range;
            }
            if (!lastPage) {
                sb.append(PIPE).append(SPACE).append(getAnchor((pages - 1) * range, /*results-1*/
                range, lastString, id, pagingRequestPath));
            }
            if (hasNextPage) {
                sb.append(PIPE).append(SPACE).append(getAnchor((ci + 1) * range, range, nextString, id, pagingRequestPath));
            }
            sb.append(RB);
            return sb.toString();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    return "";
}
