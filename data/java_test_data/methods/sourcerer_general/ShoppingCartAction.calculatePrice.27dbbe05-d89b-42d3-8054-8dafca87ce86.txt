private void calculatePrice(ActionForm form, HttpServletRequest request) {
    DynaActionForm dynaForm = (DynaActionForm) form;
    Integer[] photos = (Integer[]) dynaForm.get("photos");
    Integer[] counts = (Integer[]) dynaForm.get("counts");
    String type = request.getParameter("type");
    // noCountsPrintItem存储没有输入数量的照片冲印
    Map<Integer, Integer> noCountsPrintItem = new HashMap<Integer, Integer>();
    if ("1".equals(type)) {
        // 亮面相纸有5个数量输入框,5个数量输入框都为0算为无效的照片冲印,将被剔除。
        for (int i = 0; i < counts.length; i = i + 5) {
            if (counts[i] == 0 && counts[i + 1] == 0 && counts[i + 2] == 0 && counts[i + 3] == 0 && counts[i + 4] == 0) {
                noCountsPrintItem.put(photos[i], photos[i]);
            }
        }
    } else {
        // 绒面相纸和柯达皇家相纸有3个数量输入框,3个数量输入框都为0算为无效的照片冲印,将被剔除。
        for (int i = 0; i < counts.length; i = i + 3) {
            if (counts[i] == 0 && counts[i + 1] == 0 && counts[i + 2] == 0) {
                noCountsPrintItem.put(photos[i], photos[i]);
            }
        }
    }
    Map<String, Integer> printItemTempMap = new HashMap<String, Integer>();
    Integer[] products = (Integer[]) dynaForm.get("products");
    Map<String, String> tempMap = new HashMap<String, String>();
    for (int i = 0; i < counts.length; i++) {
        String key = products[i] + ":" + photos[i];
        if (counts[i] != 0) {
            if (!printItemTempMap.containsKey(key)) {
                printItemTempMap.put(key, counts[i]);
            } else {
                Integer oldValue = printItemTempMap.get(key);
                Integer newCount = oldValue + counts[i];
                printItemTempMap.put(key, newCount);
            }
        } else {
            tempMap.put(key, key);
        }
    }
    SessionContainer sessionContainer = getSessionContainer(request);
    List<Item> tempItems = new ArrayList<Item>();
    if (printItemTempMap.size() > 0) {
        Set<String> keys = printItemTempMap.keySet();
        for (String key : keys) {
            String[] ids = key.split(":");
            Product product = productService.findById(Integer.parseInt(ids[0]));
            Photo photo = photoService.findById(Integer.parseInt(ids[1]));
            Item item = new Item(photo, product, printItemTempMap.get(key));
            tempItems.add(item);
        }
    }
    Map<Integer, PrintPhotoItemDto[]> printPhotosItemsDtos = sessionContainer.getCart().getPrintPhotosItemsDto();
    printPhotosItemsDtos = changePrintPhotoItemDtos(type, sessionContainer, tempItems, printPhotosItemsDtos);
    Set<Map.Entry<Integer, PrintPhotoItemDto[]>> tempEntrys = printPhotosItemsDtos.entrySet();
    for (Entry<Integer, PrintPhotoItemDto[]> entry : tempEntrys) {
        PrintPhotoItemDto[] items = entry.getValue();
        for (int i = 0; i < items.length; i++) {
            PrintPhotoItemDto dto = items[i];
            String key = dto.getProductId() + ":" + dto.getPhotoId();
            if (tempMap.containsKey(key)) {
                dto.setItem(null);
                dto.setPrice(0f);
                dto.setQuantity(0);
            }
        }
    }
    // Iterator<Item> iter = printItems.iterator();
    if (noCountsPrintItem.size() > 0) {
        Set<Map.Entry<Integer, Integer>> entrys = noCountsPrintItem.entrySet();
        for (Entry<Integer, Integer> entry : entrys) {
            Integer key = entry.getKey();
            if (printPhotosItemsDtos.containsKey(key)) {
                printPhotosItemsDtos.remove(key);
            }
        }
    }
    Map<String, Integer> itemTempMap = new HashMap<String, Integer>();
    Integer[] products0 = (Integer[]) dynaForm.get("products0");
    String[] photos0 = (String[]) dynaForm.get("photos0");
    Integer[] counts0 = (Integer[]) dynaForm.get("counts0");
    for (int i = 0; i < counts0.length; i++) {
        if (counts0[i] != 0) {
            String key = products0[i] + ":" + photos0[i];
            if (!itemTempMap.containsKey(key)) {
                itemTempMap.put(key, counts0[i]);
            }
        }
    }
    List<Item> items = sessionContainer.getCart().getItems();
    for (Item item : items) {
        String key = "";
        if (IConstants.ITEM_TYPE1.equals(item.getItemType())) {
            key = item.getProduct().getId() + ":" + item.getPhotoIds();
        } else if (IConstants.ITEM_TYPE3.equals(item.getItemType())) {
            key = item.getProduct().getId() + ":" + item.getPhoto().getId();
        } else if (IConstants.ITEM_TYPE2.equals(item.getItemType())) {
            key = item.getProduct().getId() + ":" + IConstants.ITEM_TYPE2;
        } else if (IConstants.ITEM_TYPE4.equals(item.getItemType())) {
            key = item.getProduct().getId() + ":" + item.getPhoto().getId();
        }
        if (itemTempMap.containsKey(key)) {
            item.setQuantity(itemTempMap.get(key));
            item.setPrice();
        }
    }
}
