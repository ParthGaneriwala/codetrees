public Parametres FormerParametresOperation() {
    Parametres parametres;
    if (achat.isChecked()) {
        /*
Operation_Depense:
  Date Date = date;
  Boolean Verifie = verifie;
  OperationFactoryInfos.TypeOperation Typeoperation = OPERATION_DEPENSE;

  List<CategorieInfos> Categories = categorie selectionnee dans l'arbre
  List<ProprietaireInfos> Proprietaires = void;
  List<Compte> Comptes = Compte concerne;
  List<String> Libelles = new ArrayList<String>() = libelle;
  List<Dette> Dettes = new ArrayList<Dette>() = dettes (Crediteur, Debiteur, Somme due)
 (pas de restriction de nombre);
  List<MonnaieInfos> Monnaies = new ArrayList<MonnaieInfos>() = void;
  List<Float> Sommes = new ArrayList<Float>() = somme concernee;

*/
        /*
 Regarde petite Clairette, comment j'ai gere.
       Tu peux utiliser ce truc la, ca a l'air pas mal pas mal
       Va voir la pour plus d'infos : http://code.google.com/p/gwt-datepicker/wiki/HowToUse
       Bisous bisous j'espere que ca t'avancera bien pour le pub !
*/
        parametres = new Parametres(getDate(), verifie.isChecked(), OperationFactoryInfos.TypeOperation.OPERATION_DEPENSE);
        try {
            parametres.ajouterCategorie(categories.donneLaCategorieSelectionnee());
        } catch (MonException e) {
            message_information.setMessage(Label_MessageInformation.Etat.MAUVAISEENTREE, e.getMessage());
            throw new MonException(e.getMessage());
        }
        try {
            parametres.ajouterCompte(comptes.donneLeCompteSelectionne());
        } catch (MonException e) {
            message_information.setMessage(Label_MessageInformation.Etat.MAUVAISEENTREE, e.getMessage());
            throw e;
        }
        parametres.ajouterLibelle(libelle.getText());
        try {
            Float s = Float.valueOf(somme.getText().trim());
            parametres.ajouterSomme(s);
        } catch (NumberFormatException nfe) {
            MessageErreurEntree("La somme n'a pas ete rentree correctement. L'operation n'a pas ete entree.");
            throw new MonException("NumberFormatException: " + nfe.getMessage());
        }
        for (int i = 0; i < noproprietaires; i++) {
            Dette d;
            ProprietaireInfos crediteur1 = InformationsGlobales.personneLoguee;
            ProprietaireInfos debiteur1 = proprietaires_dettes.get(i);
            TextBox t = (TextBox) tableDette.getWidget(i + 1, 1);
            if (!t.getText().equals("")) {
                Float sommedue1;
                try {
                    sommedue1 = Float.valueOf(t.getText().trim());
                    d = new Dette(crediteur1, debiteur1, sommedue1);
                } catch (NumberFormatException nfe) {
                    MessageErreurEntree("Une somme de dette n'a pas ete rentree correctement. " + "L'operation n'a pas ete entree.");
                    throw new RuntimeException("NumberFormatException: " + nfe.getMessage());
                }
                parametres.ajouterDette(d);
            }
        }
    } else if (recette.isChecked()) {
        /*
Operation_Recette
  Date Date = date;
  Boolean Verifie = verifie;
  OperationFactoryInfos.TypeOperation Typeoperation = OPERATION_DEPENSE;

  List<CategorieInfos> Categories = categorie selectionnee dans l'arbre
  List<ProprietaireInfos> Proprietaires = void;
  List<Compte> Comptes = Compte concerne;
  List<String> Libelles = new ArrayList<String>() = libelle;
  List<Dette> Dettes = new ArrayList<Dette>() = dettes (Crediteur, Debiteur, Somme due)
 (pas de restriction de nombre);
  List<MonnaieInfos> Monnaies = new ArrayList<MonnaieInfos>() = void;
  List<Float> Sommes = new ArrayList<Float>() = somme concernee;
*/
        parametres = new Parametres(getDate(), verifie.isChecked(), OperationFactoryInfos.TypeOperation.OPERATION_RECETTE);
        try {
            parametres.ajouterCategorie(categories.donneLaCategorieSelectionnee());
        } catch (MonException e) {
            message_information.setMessage(Label_MessageInformation.Etat.MAUVAISEENTREE, e.getMessage());
            throw new MonException(e.getMessage());
        }
        try {
            parametres.ajouterCompte(comptes.donneLeCompteSelectionne());
        } catch (MonException e) {
            message_information.setMessage(Label_MessageInformation.Etat.MAUVAISEENTREE, e.getMessage());
            throw e;
        }
        parametres.ajouterLibelle(libelle.getText());
        try {
            Float s = Float.valueOf(somme.getText().trim());
            parametres.ajouterSomme(s);
        } catch (NumberFormatException nfe) {
            MessageErreurEntree("La somme n'a pas ete rentree correctement. L'operation n'a pas ete entree.");
        }
        for (int i = 0; i < noproprietaires; i++) {
            Dette d;
            ProprietaireInfos debiteur1 = InformationsGlobales.personneLoguee;
            ProprietaireInfos crediteur1 = proprietaires_dettes.get(i);
            TextBox t = (TextBox) tableDette.getWidget(i + 1, 1);
            if (!t.getText().equals("")) {
                Float sommedue1;
                try {
                    sommedue1 = Float.valueOf(t.getText().trim());
                    d = new Dette(crediteur1, debiteur1, sommedue1);
                } catch (NumberFormatException nfe) {
                    MessageErreurEntree("Une somme de dette n'a pas ete rentree correctement. " + "L'operation n'a pas ete entree.");
                    throw new RuntimeException("NumberFormatException: " + nfe.getMessage());
                }
                parametres.ajouterDette(d);
            }
        }
    } else {
        MessageErreurEntree("Tu n'as pas dit si tu voulais une recette ou un achat");
        parametres = null;
    }
    return parametres;
}
