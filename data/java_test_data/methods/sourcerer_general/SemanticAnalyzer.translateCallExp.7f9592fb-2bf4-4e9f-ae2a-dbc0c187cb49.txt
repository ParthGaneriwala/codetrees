public TranslatedExpAndType translateCallExp(CallExp callExp) {
    TranslatedExpAndType translatedExpAndType = new TranslatedExpAndType();
    Symbol funcSymbol = callExp.getFuncName();
    Entry entr = (Entry) environments.getVariableTable().get(funcSymbol);
    FunctionEntry fEntry = null;
    int paramCount = 0;
    RecordTypeEntry fParamsEntry = null;
    TypeEntry retTypeEntry = null;
    Stack argsStack = null;
    Label fLabel = null;
    if (entr == null) {
        errorHandler.addError(callExp.getPosition(), ErrorHandler.THE_FUNCTION, funcSymbol.toString(), ErrorHandler.NOT_DEFINED);
    } else {
        if (entr instanceof FunctionEntry) {
            fEntry = (FunctionEntry) entr;
            // Add this to the called functions list of the current level
            currentFunctionLevel.addCalledFunction(fEntry.getLevel());
            // fLabel = fEntry.getLevel().getActivationFrame().getLabel();
            // fLabel = new Label(fEntry.getLevel().getLevelName().toString());
            fLabel = new Label(funcSymbol.toString());
            retTypeEntry = fEntry.getReturnType();
            fParamsEntry = fEntry.getFormals();
            translatedExpAndType.setEntry(retTypeEntry);
            RecordTypeEntry re = fParamsEntry;
            int count = 1;
            argsStack = new Stack();
            for (ParamExpList paramExpList = callExp.getParamList(); paramExpList != null; paramExpList = paramExpList.getExpList()) {
                paramCount++;
                Exp exp = paramExpList.getHead();
                if (re != null) {
                    TranslatedExpAndType tte = translateExpression(exp);
                    AssemType assemTypeExp = tte.getAssemType();
                    argsStack.push(assemTypeExp);
                    if (tte.getTypeEntry() != re.getFieldType()) {
                        errorHandler.addError(callExp.getPosition(), ErrorHandler.THE_ARGUMENT_NUM, "" + count, ErrorHandler.PARAM_MISMATCH);
                    }
                    re = re.getNext();
                } else {
                    errorHandler.addError(callExp.getPosition(), ErrorHandler.NUM_ARGS_MISMATCH);
                }
                count++;
            }
            if (re != null) {
                // Function definition has more parameters than the call
                errorHandler.addError(callExp.getPosition(), ErrorHandler.NUM_ARGS_MISMATCH);
            }
        } else {
            errorHandler.addError(callExp.getPosition(), ErrorHandler.THE_FUNCTION, funcSymbol.toString(), ErrorHandler.NOT_DEFINED);
        }
    }
    // Translate the call to the abstract assembly type
    if (!(argsStack == null || fLabel == null)) {
        boolean hasReturnValue = true;
        if (retTypeEntry instanceof VoidTypeEntry)
            hasReturnValue = false;
        // TODO - Get the correct value of maxOutgoingParams
        int maxOutgoingParams = 3;
        AssemType retAssemType = translatingMediator.translateCallExp(fLabel, argsStack, paramCount, hasReturnValue, maxOutgoingParams, ActivationFrame.WORDSIZE);
        translatedExpAndType.setAssemType(retAssemType);
    }
    return translatedExpAndType;
}
