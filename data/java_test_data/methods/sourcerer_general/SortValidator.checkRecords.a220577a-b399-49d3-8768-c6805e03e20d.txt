static void checkRecords(Configuration defaults, int noMaps, int noReduces, Path sortInput, Path sortOutput) throws IOException {
    JobConf jobConf = new JobConf(defaults, RecordChecker.class);
    jobConf.setJobName("sortvalidate-record-checker");
    jobConf.setInputFormat(SequenceFileInputFormat.class);
    jobConf.setOutputFormat(SequenceFileOutputFormat.class);
    jobConf.setOutputKeyClass(BytesWritable.class);
    jobConf.setOutputValueClass(IntWritable.class);
    jobConf.setMapperClass(Map.class);
    jobConf.setReducerClass(Reduce.class);
    JobClient client = new JobClient(jobConf);
    ClusterStatus cluster = client.getClusterStatus();
    if (noMaps == -1) {
        noMaps = cluster.getTaskTrackers() * jobConf.getInt("test.sortvalidate.maps_per_host", 10);
    }
    if (noReduces == -1) {
        noReduces = (int) (cluster.getMaxReduceTasks() * 0.9);
        String sortReduces = jobConf.get("test.sortvalidate.reduces_per_host");
        if (sortReduces != null) {
            noReduces = cluster.getTaskTrackers() * Integer.parseInt(sortReduces);
        }
    }
    jobConf.setNumMapTasks(noMaps);
    jobConf.setNumReduceTasks(noReduces);
    FileInputFormat.setInputPaths(jobConf, sortInput);
    FileInputFormat.addInputPath(jobConf, sortOutput);
    Path outputPath = new Path("/tmp/sortvalidate/recordchecker");
    FileSystem fs = FileSystem.get(defaults);
    if (fs.exists(outputPath)) {
        fs.delete(outputPath, true);
    }
    FileOutputFormat.setOutputPath(jobConf, outputPath);
    // Uncomment to run locally in a single process
    // job_conf.set("mapred.job.tracker", "local");
    Path[] inputPaths = FileInputFormat.getInputPaths(jobConf);
    System.out.println("\nSortValidator.RecordChecker: Running on " + cluster.getTaskTrackers() + " nodes to validate sort from " + inputPaths[0] + ", " + inputPaths[1] + " into " + FileOutputFormat.getOutputPath(jobConf) + " with " + noReduces + " reduces.");
    Date startTime = new Date();
    System.out.println("Job started: " + startTime);
    JobClient.runJob(jobConf);
    Date end_time = new Date();
    System.out.println("Job ended: " + end_time);
    System.out.println("The job took " + (end_time.getTime() - startTime.getTime()) / 1000 + " seconds.");
}
