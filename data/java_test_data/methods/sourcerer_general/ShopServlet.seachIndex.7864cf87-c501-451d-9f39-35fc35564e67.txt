public Object[] seachIndex(String queryString, int page, int count, boolean getTotal) throws CorruptIndexException, IOException, ParseException {
    Object[] result = new Object[2];
    IndexSearcher searcher = new IndexSearcher(FSDirectory.open(new File(appPath + "/luceneTest/")), false);
    Map<Integer, ScoreDoc> scoreDocs = new TreeMap<Integer, ScoreDoc>();
    String[] searchField = { "title", "content", "type", "street", "district", "eusername" };
    for (String field : searchField) {
        QueryParser queryParser = new QueryParser(Version.LUCENE_29, field, getAnalyzer());
        Query query = queryParser.parse(queryString);
        TopDocs topDocs = searcher.search(query, 10000);
        ScoreDoc[] hits = topDocs.scoreDocs;
        for (int i = 0; i < hits.length; i++) {
            ScoreDoc scoreDoc = hits[i];
            int docid = scoreDoc.doc;
            if (!scoreDocs.containsKey(docid)) {
                scoreDocs.put(docid, scoreDoc);
            }
        }
    }
    int startIndex = (page - 1) * count;
    int currentIndex = 0;
    List<Shop> resultShops = new ArrayList<Shop>();
    for (ScoreDoc scoreDoc : scoreDocs.values()) {
        if (currentIndex >= startIndex) {
            Document d = searcher.doc(scoreDoc.doc);
            String idStr = d.get("id");
            Shop shop = new Shop();
            shop.setShopId(Integer.parseInt(idStr));
            shop.setTitle(d.get("title"));
            shop.setShopImg(d.get("shopImg"));
            shop.setTel(d.get("tel"));
            shop.setStreet(d.get("street"));
            resultShops.add(shop);
            if (resultShops.size() >= count) {
                break;
            }
        }
        ++currentIndex;
    }
    result[0] = scoreDocs.size();
    result[1] = resultShops.toArray(new Shop[] {});
    return result;
}
