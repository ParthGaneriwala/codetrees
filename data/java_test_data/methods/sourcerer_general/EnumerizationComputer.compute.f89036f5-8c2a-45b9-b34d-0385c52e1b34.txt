public void compute() throws CoreException {
    this.reset();
    this.wl.addAll(this.constFields);
    while (this.wl.hasNext()) {
        final IJavaElement je = (IJavaElement) this.wl.next();
        final SearchPattern pattern = SearchPattern.createPattern(je, IJavaSearchConstants.ALL_OCCURRENCES, SearchPattern.R_EXACT_MATCH);
        final SearchRequestor requestor = new SearchRequestor() {

            public void acceptSearchMatch(SearchMatch match) throws CoreException {
                if (match.getAccuracy() == SearchMatch.A_ACCURATE && !match.isInsideDocComment()) {
                    ASTNode node = Util.getExactASTNode(match, EnumerizationComputer.this.monitor);
                    ASTNodeProcessor processor = new ASTNodeProcessor(node, EnumerizationComputer.this.constFields, EnumerizationComputer.this.scope, EnumerizationComputer.this.monitor);
                    processor.process();
                    EnumerizationComputer.this.wl.addAll(processor.getFound());
                    Collection infixCol = (Collection) EnumerizationComputer.this.elemToLegalInfixExpressionSourceRangeMap.get(je);
                    if (infixCol == null)
                        EnumerizationComputer.this.elemToLegalInfixExpressionSourceRangeMap.put(je, processor.getLegalEncounteredInfixExpressionSourceLocations());
                    else
                        infixCol.addAll(processor.getLegalEncounteredInfixExpressionSourceLocations());
                }
            }
        };
        try {
            this.searchEngine.search(pattern, new SearchParticipant[] { SearchEngine.getDefaultSearchParticipant() }, this.scope, requestor, new SubProgressMonitor(this.monitor, 1, SubProgressMonitor.SUPPRESS_SUBTASK_LABEL));
            // parameters.
            if (je.getElementType() == IJavaElement.LOCAL_VARIABLE) {
                final ISourceRange isr = ((ILocalVariable) je).getNameRange();
                final SearchMatch match = new SearchMatch(je, SearchMatch.A_ACCURATE, isr.getOffset(), isr.getLength(), SearchEngine.getDefaultSearchParticipant(), je.getResource());
                requestor.acceptSearchMatch(match);
            }
        } catch (final DefinitelyNotEnumerizableException E) {
            this.defNotEnumConstants.addAll(this.wl.getCurrentComputationTreeElements());
            this.nonEnumerizableList.addAll(this.wl.getCurrentComputationTreeElements());
            this.wl.removeAll(this.nonEnumerizableList);
            for (final Iterator it = this.wl.getCurrentComputationTreeElements().iterator(); it.hasNext(); ) {
                final IJavaElement elem = (IJavaElement) it.next();
                this.elemToLegalInfixExpressionSourceRangeMap.remove(elem);
            }
            continue;
        } catch (final NonEnumerizableException E) {
            this.nonEnumerizableList.addAll(this.wl.getCurrentComputationTreeElements());
            this.wl.removeAll(this.nonEnumerizableList);
            for (final Iterator it = this.wl.getCurrentComputationTreeElements().iterator(); it.hasNext(); ) {
                final IJavaElement elem = (IJavaElement) it.next();
                this.elemToLegalInfixExpressionSourceRangeMap.remove(elem);
            }
            continue;
        }
    }
    this.defNotEnumConstants.retainAll(this.constFields);
    final Collection computationForest = Util.trimForest(this.wl.getComputationForest(), this.nonEnumerizableList);
    final Collection candidateSets = Util.getElementForest(computationForest);
    // [rk] HACK: merge sets for now into one big set.
    // TODO [rk] This plugin has the capability to make more than one enum type out of the input
    // constants. We should leverage that. The idea is that one button should refactor the entire
    // project.
    Collection oneBigSet = new LinkedHashSet();
    oneBigSet.add(Util.flattenForest(candidateSets));
    this.enumerizationForest = filterSetsAccordingToMemberConstraints(oneBigSet);
}
