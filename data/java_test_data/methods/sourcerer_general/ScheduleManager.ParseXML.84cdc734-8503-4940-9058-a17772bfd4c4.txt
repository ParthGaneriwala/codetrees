private Schedule ParseXML(String xmlStr, int id) {
    // method works, needs fixing to work with new scheduled item
    // create a DOM parser
    DOMParser parser = new DOMParser();
    // Document document = null;
    int index = -1;
    NodeList schedules;
    NodeList schedule;
    NodeList semesters;
    NodeList schedCrsGrp;
    NodeList classes;
    Node selectedSchedule;
    Node selectedSemester;
    Node selectedSchedCrsGrp;
    Node selectedClass;
    String profileID = "";
    Schedule theSchedule = new Schedule();
    ScheduledSemester theScheduledSemester = null;
    // AcademicYear theAcademicYear = null;
    ArrayList<ScheduledSemester> schedGroupCrsOfSemester = null;
    // List <Course> courseList = new ArrayList<Course>();
    // parse the document
    schedules = xmlDoc.getChildNodes().item(0).getChildNodes();
    selectedSchedule = schedules.item(0);
    profileID = xmlDoc.getElementsByTagName(TAG_SCHEDULES).item(0).getAttributes().getNamedItem("profile").getNodeValue();
    index = idExists(id);
    if (index == -1) {
        // specified id was not found in schedule
        getLogger().warn("Schedule with id of '" + id + "' was not found!");
        return null;
    }
    // Element selectedSemester = document.getElementById(new Integer(id).toString());
    semesters = xmlDoc.getElementsByTagName(TAG_SCHEDULE);
    if (semesters == null)
        return null;
    else
        System.out.println(semesters.item(0).toString());
    System.out.println("index is " + index);
    String name = semesters.item(index).getAttributes().getNamedItem("name").getNodeValue();
    theSchedule.setScheduleName(name);
    theSchedule.setScheduleProfile(new Integer(profileID).intValue());
    theSchedule.setScheduleId(id);
    semesters = semesters.item(index).getChildNodes();
    selectedSemester = semesters.item(0);
    int startYear = 0;
    int endYear = 0;
    int year = 0;
    String term = "";
    boolean StartYear = false;
    schedGroupCrsOfSemester = new ArrayList<ScheduledSemester>();
    while (selectedSemester != null) {
        if (!selectedSemester.getNodeName().equals("#text")) {
            year = new Integer(selectedSemester.getAttributes().getNamedItem("year").getNodeValue()).intValue();
            term = selectedSemester.getAttributes().getNamedItem("term").getNodeValue();
            if (!StartYear) {
                startYear = year;
                StartYear = true;
            }
            // TODO
            theScheduledSemester = new ScheduledSemester(theSchedule.getScheduleId(), year, term);
            endYear = year;
            schedCrsGrp = selectedSemester.getChildNodes();
            selectedSchedCrsGrp = schedCrsGrp.item(0);
            while (selectedSchedCrsGrp != null) {
                classes = selectedSchedCrsGrp.getChildNodes();
                selectedClass = classes.item(0);
                ScheduledCourseGroup currentCrsGrp = new ScheduledCourseGroup();
                while (selectedClass != null) {
                    if (!selectedClass.getNodeName().equals("#text")) {
                        // Course tempCourse = new Course();
                        Object tempCourse;
                        Integer classId = new Integer(selectedClass.getAttributes().getNamedItem("id").getNodeValue());
                        Integer sectionId = new Integer(selectedClass.getAttributes().getNamedItem("sid").getNodeValue());
                        String className = selectedClass.getTextContent();
                        if (new Integer(classId).intValue() == -1) {
                            // store -1 as classID of class not in database
                            // load degreeProgram, courseNum, and credits
                            tempCourse = new Course();
                            ((Course) tempCourse).setCourseId(classId.intValue());
                            ((Course) tempCourse).setDegreeProgram(className.substring(0, 4));
                            ((Course) tempCourse).setCourseNum(className.substring(4, className.length()));
                            ((Course) tempCourse).setSpecificSectionId(-1);
                        // currentCrsGrp.addCourse(((Course) tempCourse));
                        } else {
                            tempCourse = new CourseWrapper(classId.intValue());
                            tempCourse = ((CourseWrapper) tempCourse).getCourse();
                            ((Course) tempCourse).setSpecificSectionId(sectionId.intValue());
                        }
                        currentCrsGrp.addCourse(((Course) tempCourse));
                        System.out.print("\tClassID: " + classId.intValue());
                        System.out.println("\tClassName: " + className);
                    }
                    selectedClass = selectedClass.getNextSibling();
                }
                if (!currentCrsGrp.getCoursesList().isEmpty()) {
                    theScheduledSemester.addCourse(currentCrsGrp);
                // schedGroupCrsOfSemester.add(currentCrsGrp);
                }
                selectedSchedCrsGrp = selectedSchedCrsGrp.getNextSibling();
            }
        }
        selectedSemester = selectedSemester.getNextSibling();
        if (theScheduledSemester != null) {
            schedGroupCrsOfSemester.add(theScheduledSemester);
            theScheduledSemester = null;
        }
        System.out.println("startYear: " + startYear + " - " + "endYear: " + endYear);
        if (CompareUtil.compareYears(startYear, endYear) == -1) {
            AcademicYear currentAcadYear = new AcademicYear(startYear, endYear);
            for (int i = 0; i < schedGroupCrsOfSemester.size(); i++) {
                currentAcadYear.addSemester(schedGroupCrsOfSemester.get(i));
            }
            theSchedule.addAcademicYear(currentAcadYear);
            schedGroupCrsOfSemester = new ArrayList<ScheduledSemester>();
            StartYear = false;
            startYear = endYear;
        }
    }
    // Schedule.printSchedule(theSchedule);
    return theSchedule;
}
