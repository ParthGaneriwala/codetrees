protected byte[] fetchAnswer(byte[] quest) {
    Socket innerSocket = new InnerSocketBuilder(proxyHost, proxyPort, target).getSocket();
    DataInputStream in;
    DataOutputStream out;
    byte[] result = null;
    try {
        if (innerSocket != null && innerSocket.isConnected()) {
            // 构造TCP DNS包
            int dnsqLength = quest.length;
            byte[] tcpdnsq = new byte[dnsqLength + 2];
            System.arraycopy(Utils.int2byte(dnsqLength), 0, tcpdnsq, 1, 1);
            System.arraycopy(quest, 0, tcpdnsq, 2, dnsqLength);
            // 转发DNS
            in = new DataInputStream(innerSocket.getInputStream());
            out = new DataOutputStream(innerSocket.getOutputStream());
            out.write(tcpdnsq);
            out.flush();
            ByteArrayOutputStream bout = new ByteArrayOutputStream();
            int b = -1;
            while ((b = in.read()) != -1) {
                bout.write(b);
            }
            byte[] tcpdnsr = bout.toByteArray();
            if (tcpdnsr != null && tcpdnsr.length > 2) {
                result = new byte[tcpdnsr.length - 2];
                System.arraycopy(tcpdnsr, 2, result, 0, tcpdnsr.length - 2);
            }
            innerSocket.close();
        }
    } catch (IOException e) {
        Logger.e(TAG, "", e);
    }
    return result;
}
