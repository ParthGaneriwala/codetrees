@SuppressWarnings("unchecked")
public void descompactar(File file, File basePath) throws IOException {
    ZipFile zipFile = null;
    File fileAtual = null;
    InputStream inputStream = null;
    OutputStream outputStream = null;
    byte[] buffer = new byte[BUFFER_TAMANHO];
    try {
        // cria diret�rio informado, caso n�o exista
        if (!basePath.exists() || !basePath.isDirectory()) {
            throw new IOException("Informe um diret&oacute;rio v&aacute;lido");
        }
        zipFile = new ZipFile(file);
        int i = 0, total = zipFile.size();
        Enumeration e = zipFile.entries();
        while (e.hasMoreElements()) {
            progresso = (++i * 100) / total;
            ZipEntry entrada = (ZipEntry) e.nextElement();
            fileAtual = new File(basePath, entrada.getName());
            // e pula pra pr�xima entrada
            if (entrada.isDirectory() && !fileAtual.exists()) {
                fileAtual.mkdirs();
                continue;
            }
            // se a estrutura de diret�rios n�o existe, cria
            if (!fileAtual.getParentFile().exists()) {
                fileAtual.getParentFile().mkdirs();
            }
            try {
                // l� o arquivo do zip e grava em disco
                inputStream = zipFile.getInputStream(entrada);
                outputStream = new FileOutputStream(fileAtual);
                int bytesLidos = 0;
                if (inputStream == null) {
                    throw new ZipException("Erro ao ler a entrada do zip: " + entrada.getName());
                }
                while ((bytesLidos = inputStream.read(buffer)) > 0) {
                    outputStream.write(buffer, 0, bytesLidos);
                }
            } finally {
                if (inputStream != null) {
                    try {
                        inputStream.close();
                    } catch (Exception ex) {
                    }
                }
                if (outputStream != null) {
                    try {
                        outputStream.close();
                    } catch (Exception ex) {
                    }
                }
            }
        }
    } finally {
        if (zipFile != null) {
            try {
                zipFile.close();
            } catch (Exception e) {
            }
        }
    }
}
