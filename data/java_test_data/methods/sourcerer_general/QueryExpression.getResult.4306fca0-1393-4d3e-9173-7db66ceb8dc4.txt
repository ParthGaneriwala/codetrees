Result getResult(Session session, int maxRows) {
    int currentMaxRows = unionType == UNION_ALL ? maxRows : 0;
    Result first = leftQueryExpression.getResult(session, currentMaxRows);
    RowSetNavigatorData navigator = (RowSetNavigatorData) first.getNavigator();
    Result second = rightQueryExpression.getResult(session, currentMaxRows);
    RowSetNavigatorData rightNavigator = (RowSetNavigatorData) second.getNavigator();
    if (unionCorresponding) {
        RowSetNavigatorData rowSet;
        boolean memory = session.resultMaxMemoryRows == 0 || (navigator.getSize() < session.resultMaxMemoryRows && rightNavigator.getSize() < session.resultMaxMemoryRows);
        if (memory) {
            rowSet = new RowSetNavigatorData(session, this);
        } else {
            rowSet = new RowSetNavigatorDataTable(session, this);
        }
        rowSet.copy(navigator, leftQueryExpression.unionColumnMap);
        navigator = rowSet;
        first.setNavigator(navigator);
        first.metaData = this.getMetaData();
        if (memory) {
            rowSet = new RowSetNavigatorData(session, this);
        } else {
            rowSet = new RowSetNavigatorDataTable(session, this);
        }
        rowSet.copy(rightNavigator, rightQueryExpression.unionColumnMap);
        rightNavigator = rowSet;
    }
    switch(unionType) {
        case UNION:
            navigator.union(rightNavigator);
            break;
        case UNION_ALL:
            navigator.unionAll(rightNavigator);
            break;
        case INTERSECT:
            navigator.intersect(rightNavigator);
            break;
        case INTERSECT_ALL:
            navigator.intersectAll(rightNavigator);
            break;
        case EXCEPT:
            navigator.except(rightNavigator);
            break;
        case EXCEPT_ALL:
            navigator.exceptAll(rightNavigator);
            break;
        default:
            throw Error.runtimeError(ErrorCode.U_S0500, "QueryExpression");
    }
    if (sortAndSlice.hasOrder()) {
        navigator.sortUnion(sortAndSlice);
    }
    if (sortAndSlice.hasLimit()) {
        navigator.trim(sortAndSlice.getLimitStart(session), sortAndSlice.getLimitCount(session, maxRows));
    }
    navigator.reset();
    return first;
}
