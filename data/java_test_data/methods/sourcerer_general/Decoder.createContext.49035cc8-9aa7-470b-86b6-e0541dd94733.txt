public SentenceContext createContext() {
    Experiment experiment = Experiment.getInstance();
    int order = forest.getOrder();
    SentenceContext ctx = new SentenceContext(order - 1);
    // ctx.items = new SliceItem[Math.max(1, order-1)];
    // ctx.queues = new LinkQueue[Math.max(1, order-1)];
    // ctx.predictions = new BinaryTree[experiment.getNumLMs()];
    ctx.setDebug(debug);
    long startTuple = experiment.getTupleDescription().createStartTuple();
    BinaryPrefix startPrefix = experiment.getHiddenPrefix(startTuple);
    ctx.getTrellis().newSlice(startTuple);
    ProbTree startProbTree = new ProbTree(startPrefix);
    TrellisItem sliceItem = new TrellisItem(startProbTree, 1.0);
    ctx.getCurrentSlice().insertItem(sliceItem);
    ctx.getCurrentSlice().curr2prev.put(sliceItem, null);
    for (int i = 1; i < order - 1; ++i) {
        ctx.getTrellis().newSlice(startTuple);
        TrellisSlice currentSlice = ctx.getCurrentSlice();
        TrellisItem newSliceItem = new TrellisItem(startProbTree, 1.0);
        currentSlice.insertItem(newSliceItem);
        ArrayList<TrellisItem> lst = new ArrayList<TrellisItem>(1);
        lst.add(sliceItem);
        currentSlice.curr2prev.put(newSliceItem, lst);
        lst = new ArrayList<TrellisItem>(1);
        lst.add(newSliceItem);
        currentSlice.prev2curr.put(sliceItem, lst);
        sliceItem = newSliceItem;
        currentSlice.getTotalProb();
    }
    ctx.setLastSliceTotalProb(1.0);
    return ctx;
}
