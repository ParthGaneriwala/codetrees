private String toStringRec(ExpTreenode root, String ParentOp, boolean rightside) {
    String leftstr = "";
    String rightstr = "";
    if (root == null)
        return "";
    ArrayList varlist = getVariableList(root);
    boolean OneVar = (varlist.size() == 1);
    String var = "";
    if (OneVar)
        var = ((String) varlist.get(0)).toLowerCase();
    if ((!root.op_str.equals("#")) && OneVar && isPolynomialStandardForm(root, var) && (Terminal.indexOf(root.op_str) < 0)) {
        boolean includeParens = false;
        if (!ParentOp.equals("")) {
            if (MultOperator.indexOf(ParentOp) >= 0)
                includeParens = true;
            if (PowOperator.indexOf(ParentOp) >= 0)
                includeParens = true;
            if (ParentOp.equals("-") && rightside)
                includeParens = true;
        }
        if (includeParens)
            return "(" + polynomialToStringRec(root, var) + ")";
        else
            return polynomialToStringRec(root, var);
    }
    if (Operator.indexOf(root.op_str) >= 0) {
        leftstr = toStringRec(root.left, root.op_str, false);
        rightstr = toStringRec(root.right, root.op_str, true);
        boolean includeParens = false;
        if (!ParentOp.equals(""))
            if ((Operator.indexOf(root.op_str) >= 0) && (Operator.indexOf(ParentOp) >= 0)) {
                if ((AddOperator.indexOf(root.op_str) >= 0) && (MultOperator.indexOf(ParentOp) >= 0))
                    includeParens = true;
                if ((AddOperator.indexOf(root.op_str) >= 0) && (PowOperator.indexOf(ParentOp) >= 0))
                    includeParens = true;
                if ((MultOperator.indexOf(root.op_str) >= 0) && (PowOperator.indexOf(ParentOp) >= 0))
                    includeParens = true;
                if ((MultOperator.indexOf(root.op_str) >= 0) && (MultOperator.indexOf(ParentOp) >= 0))
                    includeParens = true;
                if ((PowOperator.indexOf(root.op_str) >= 0) && (PowOperator.indexOf(ParentOp) >= 0))
                    includeParens = true;
                if ((AddOperator.indexOf(root.op_str) >= 0) && ParentOp.equals("-") && rightside)
                    includeParens = true;
                if (root.op_str.equals("-") && (root.left == null))
                    includeParens = true;
            }
        if (includeParens)
            return "(" + leftstr + root.op_str + rightstr + ")";
        else
            return leftstr + root.op_str + rightstr;
    } else if (Terminal.indexOf(root.op_str) >= 0) {
        return root.op_str;
    } else if (root.op_str.equals("e")) {
        return "e";
    } else if (root.op_str.equals("pi")) {
        return "pi";
    } else if (root.op_str.equals("i")) {
        return "i";
    } else if (root.op_str.equals("#")) {
        boolean includeParens = false;
        if (!ParentOp.equals("")) {
            if (Operator.indexOf(ParentOp) >= 0) {
                if (root.num.hasTwoTerms())
                    includeParens = true;
                else if (root.num.hasNegativeFirstTerm())
                    includeParens = true;
            }
            if (PowOperator.indexOf(ParentOp) >= 0) {
                if (!root.num.isRealInteger())
                    includeParens = true;
            }
        }
        if (includeParens)
            return "(" + root.num.toString() + ")";
        else
            return root.num.toString();
    } else if (!FindFct(root.op_str).equals("")) {
        String retstr = "";
        rightstr = toStringRec(root.right, root.op_str, true);
        if (root.op_str.equals("exp"))
            retstr = "e^(" + rightstr + ")";
        else if (root.op_str.equals("abs"))
            retstr = "|" + rightstr + "|";
        else if (root.op_str.equals("mod"))
            retstr = "|" + rightstr + "|";
        else
            retstr = root.op_str + "(" + rightstr + ")";
        return retstr;
    }
    // Should not happen.
    return "";
}
