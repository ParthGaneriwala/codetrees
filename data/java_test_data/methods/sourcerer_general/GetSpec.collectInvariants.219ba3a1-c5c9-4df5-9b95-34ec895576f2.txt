private static InvariantInfo collectInvariants(/* @ non_null */
FindContributors scope, Hashtable premap) {
    collectInvariantsAxsToAdd = null;
    InvariantInfo ii = null;
    InvariantInfo iiPrev = null;
    Enumeration en = scope.invariants();
    try {
        TrAnExpr.initForClause();
        while (en.hasMoreElements()) {
            ExprDeclPragma ep = (ExprDeclPragma) en.nextElement();
            Expr J = ep.expr;
            boolean Jvisible = !Main.options().filterInvariants || exprIsVisible(scope.originType, J);
            if (Jvisible) {
                // System.out.println("COLLECTING INVARIANT " +
                // Location.toString(ep.getStartLoc()));
                // Add a new node at the end of "ii"
                InvariantInfo invinfo = new InvariantInfo();
                invinfo.prag = ep;
                invinfo.U = TypeSig.getSig(ep.parent);
                if (iiPrev == null)
                    ii = invinfo;
                else
                    iiPrev.next = invinfo;
                iiPrev = invinfo;
                // The following determines whether or not an invariant is a
                // static invariant by, in essence, checking for occurrence
                // of "this" in the guarded-command translation of "J", not
                // in "J" itself. (These yield different results in the
                // unusual case that "J" mentioned "this" in a subexpression
                // "E.g", where "g" is a static field.)
                // First, build the map "{this-->s}" for a new "s".
                LocalVarDecl sdecl = UniqName.newBoundThis();
                VariableAccess s = TrAnExpr.makeVarAccess(sdecl, Location.NULL);
                Hashtable map = new Hashtable();
                map.put(GC.thisvar.decl, s);
                int cReplacementsBefore = TrAnExpr.getReplacementCount();
                /*
           * Unlike any body we may be translating, for these translations
           * this's type is that of the type that contains the invariant J.
           */
                Type savedType = GC.thisvar.decl.type;
                GC.thisvar.decl.type = TypeSig.getSig(ep.getParent());
                invinfo.J = TrAnExpr.trSpecExpr(J, map, null);
                if (TrAnExpr.trSpecExprAuxConditions.size() != 0) {
                    // Use andx here, because the op needs to be and in preconditions
                    // and
                    // implies in postconditions
                    invinfo.J = GC.andx(GC.nary(TagConstants.BOOLAND, TrAnExpr.trSpecExprAuxConditions), invinfo.J);
                    TrAnExpr.trSpecExprAuxConditions = ExprVec.make();
                }
                GC.thisvar.decl.type = savedType;
                if (cReplacementsBefore == TrAnExpr.getReplacementCount()) {
                    // static invariant
                    invinfo.isStatic = true;
                    invinfo.sdecl = null;
                    invinfo.s = null;
                    invinfo.map = null;
                } else {
                    invinfo.isStatic = false;
                    invinfo.sdecl = sdecl;
                    invinfo.s = s;
                    invinfo.map = map;
                }
            // System.out.println("COLLECTING INVARIANT-END " +
            // Location.toString(ep.getStartLoc()));
            }
        }
        // FIXME - Possibly causing bloated VCs
        collectInvariantsAxsToAdd = new java.util.HashSet();
        collectInvariantsAxsToAdd.addAll(TrAnExpr.trSpecAuxAxiomsNeeded);
    // java.util.Set axsToAdd = new java.util.HashSet();
    // axsToAdd.addAll(TrAnExpr.trSpecAuxAxiomsNeeded);
    // java.util.Set axsDone = new java.util.HashSet();
    /*
       * while (false && ! axsToAdd.isEmpty()) { // FIXME - keep this off ???
       * RepHelper o = (RepHelper)axsToAdd.iterator().next();
       * axsToAdd.remove(o); if (!axsDone.add(o)) continue; Expr e =
       * TrAnExpr.getEquivalentAxioms(o,null); //axsToAdd.addAll(
       * TrAnExpr.trSpecAuxAxiomsNeeded); // Add a new node at the end of "ii"
       * InvariantInfo invinfo = new InvariantInfo(); invinfo.J = e;
       * invinfo.prag = ExprDeclPragma.make(TagConstants.AXIOM, e, 0,
       * Location.NULL); // FIXME invinfo.U = TypeSig.getSig(ep.parent); if
       * (iiPrev == null) ii = invinfo; else iiPrev.next = invinfo; iiPrev =
       * invinfo; if (true ) { //|| cReplacementsBefore ==
       * TrAnExpr.getReplacementCount()) // FIXME // static invariant
       * invinfo.isStatic = true; invinfo.sdecl = null; invinfo.s = null;
       * invinfo.map = null; } else { invinfo.isStatic = false; // FIXME
       * invinfo.sdecl = sdecl; // FIXME invinfo.s = s; // FIXME invinfo.map =
       * map; } }
       */
    } finally {
        TrAnExpr.closeForClause();
    }
    return ii;
}
