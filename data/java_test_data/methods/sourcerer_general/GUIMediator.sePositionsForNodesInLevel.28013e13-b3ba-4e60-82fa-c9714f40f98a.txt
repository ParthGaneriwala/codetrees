private void sePositionsForNodesInLevel(BFSLevel level, int yOffset, int currLevelIndex, Vector<Node> nodesInLevel) {
    int numNodesInLevel = nodesInLevel.size();
    for (int i = 0; i < numNodesInLevel; i++) {
        // Flag to check if the
        boolean cannotFindXPosFromSuccInfo = false;
        // xpos of the current
        // node can be
        // found from successor information
        Node currNode = nodesInLevel.elementAt(i);
        DrawingParameters dpNode = nodesVsDrawingParameters.get(currNode);
        dpNode.setYPosition(yOffset);
        Vector<Node> sucss = currNode.getSuccessors();
        // To be determined
        int xPosOfNodeFromSuccInfo = 0;
        int numSucss = sucss.size();
        if (numSucss == 1) {
            Node succ = sucss.elementAt(0);
            BFSLevel nextLevel = levels.elementAt(currLevelIndex + 1);
            if (nextLevel.containsNode(succ)) {
                DrawingParameters dpSucc = nodesVsDrawingParameters.get(succ);
                int succXPos = dpSucc.getXPosition();
                if (isSingleSuccessorRightDiagonal(currNode, succ, currLevelIndex)) {
                    Dimension nodeSize = dpNode.getSize();
                    xPosOfNodeFromSuccInfo = succXPos - nodeSize.width;
                } else if (isSingleSuccessorLeftDiagonal(currNode, succ, currLevelIndex)) {
                    Dimension succSize = dpSucc.getSize();
                    xPosOfNodeFromSuccInfo = succXPos + succSize.width;
                } else {
                    // Node is positioned directly above the
                    // successor
                    xPosOfNodeFromSuccInfo = positionNodeAboveSuccessor(dpNode, dpSucc);
                }
            } else {
                cannotFindXPosFromSuccInfo = true;
            }
        } else if (numSucss == 2) {
            Node firstSucc = sucss.elementAt(0);
            Node secondSucc = sucss.elementAt(1);
            DrawingParameters dpFirstSucc = nodesVsDrawingParameters.get(firstSucc);
            int xPosFirstSucc = dpFirstSucc.getXPosition();
            int widthOfFirstSucc = dpFirstSucc.getSize().width;
            BFSLevel nextLevel = levels.elementAt(currLevelIndex + 1);
            DrawingParameters dpSecondSucc = nodesVsDrawingParameters.get(secondSucc);
            int xPosSecondSucc = dpSecondSucc.getXPosition();
            if (nextLevel.containsNode(firstSucc) && nextLevel.containsNode(secondSucc)) {
                // Both successors are in the next level; center the node
                // between the two sucessors
                int distBtnSuccs = xPosSecondSucc - (xPosFirstSucc + widthOfFirstSucc);
                int nodeWidth = dpNode.getSize().width;
                int midway = xPosFirstSucc + widthOfFirstSucc + (int) (distBtnSuccs / 2.0);
                xPosOfNodeFromSuccInfo = midway - (int) (nodeWidth / 2.0);
            } else {
                if (nextLevel.containsNode(firstSucc)) {
                    // Calculate the xPosition based on the successor on the
                    // left side
                    Dimension firstSuccSize = dpFirstSucc.getSize();
                    xPosOfNodeFromSuccInfo = xPosFirstSucc + firstSuccSize.width;
                } else if (nextLevel.containsNode(secondSucc)) {
                    Dimension nodeSize = dpNode.getSize();
                    xPosOfNodeFromSuccInfo = xPosSecondSucc - nodeSize.width;
                } else {
                    cannotFindXPosFromSuccInfo = true;
                }
            }
        }
        if (cannotFindXPosFromSuccInfo) {
            // The position of the current node could not be determined from
            // the successor's information
            // Position it immediately after the previous node in the level
            // or at 0 if it is first node
            System.out.println("Found a node with unknown x postion");
            if (i == 0)
                dpNode.setXPosition(0);
            else {
                DrawingParameters dpPrevNode = nodesVsDrawingParameters.get(nodesInLevel.elementAt(i - 1));
                int xPos = dpPrevNode.getXPosition() + dpPrevNode.getSize().width + horizontalGap;
                dpNode.setXPosition(xPos);
            }
        } else {
            if (i == 0)
                dpNode.setXPosition(xPosOfNodeFromSuccInfo);
            else {
                DrawingParameters dpPrevNode = nodesVsDrawingParameters.get(nodesInLevel.elementAt(i - 1));
                int xPrevNodeAdvance = dpPrevNode.getXPosition() + dpPrevNode.getSize().width + horizontalGap;
                if (xPrevNodeAdvance < xPosOfNodeFromSuccInfo)
                    dpNode.setXPosition(xPosOfNodeFromSuccInfo);
                else
                    dpNode.setXPosition(xPrevNodeAdvance);
            }
        }
    }
}
