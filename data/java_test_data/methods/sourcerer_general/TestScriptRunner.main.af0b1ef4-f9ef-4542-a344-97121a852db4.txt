public static void main(String[] sa) throws IOException, SQLException {
    // Make a copy if argv so we can change it safely
    int argIndex = 0;
    boolean threaded = false;
    boolean verbose = false;
    boolean populate = false;
    String rcFile = DEFAULT_RCFILE;
    // scriptname -> URLID
    Map scriptFileMap = new HashMap();
    String currentUrlid = null;
    String sqlToolUrlid = null;
    Method sqlToolMainMethod = null;
    try {
        for (int i = 0; i < sa.length; i++) {
            if (sa[i].equals("--verbose")) {
                verbose = true;
                continue;
            }
            if (sa[i].equals("--threads")) {
                threaded = true;
                continue;
            }
            if (sa[i].equals("--populate")) {
                populate = true;
                continue;
            }
            if (sa[i].startsWith("--rcfile=")) {
                rcFile = sa[i].substring("--rcfile=".length());
                continue;
            }
            if (sa[i].startsWith("--urlid=")) {
                currentUrlid = sa[i].substring("--urlid=".length());
                continue;
            }
            if (sa[i].startsWith("--sqltool=")) {
                sqlToolUrlid = sa[i].substring("--sqltool=".length());
                continue;
            }
            if (currentUrlid == null) {
                throw new IllegalArgumentException("You must specify 'urlid' before script files.");
            }
            if (scriptFileMap.containsKey(sa[i]))
                throw new IllegalArgumentException(TestScriptRunner.class.getName() + " can't handle the same script name twice.  " + "(Just copy or sym-link the script).");
            scriptFileMap.put(sa[i], currentUrlid);
        }
        if (currentUrlid == null)
            throw new IllegalArgumentException();
        if (scriptFileMap.size() < 1) {
            scriptFileMap.put("-", currentUrlid);
        }
    } catch (IllegalArgumentException e) {
        if (e.getMessage() != null)
            System.err.println(e.getMessage());
        System.err.println(SYNTAX_MSG);
        System.exit(2);
    }
    if (sqlToolUrlid != null) {
        Class sqlToolClass = null;
        try {
            sqlToolClass = Class.forName("org.hsqldb.util.SqlTool");
        } catch (Exception e) {
            System.err.println("SqlTool class not accessible.  " + "Re-run without '--sqltool' switch.");
            System.exit(3);
        }
        try {
            sqlToolMainMethod = sqlToolClass.getMethod("objectMain", new Class[] { sa.getClass() });
        } catch (Exception e) {
            System.err.println("SqlTool integration failure: " + e);
            System.exit(3);
        }
    }
    TestScriptRunner runner = new TestScriptRunner(rcFile, scriptFileMap);
    runner.setVerbose(verbose);
    runner.setThreaded(threaded);
    TestCacheSize tcs = populate ? populate() : null;
    runner.establishConnections();
    boolean success = runner.runScripts();
    if (sqlToolMainMethod != null)
        try {
            sqlToolMainMethod.invoke(null, new Object[] { new String[] { "--rcfile=" + rcFile, sqlToolUrlid } });
        } catch (Exception e) {
            System.err.println("SqlTool failed: " + e);
            e.printStackTrace();
        }
    if (tcs != null)
        tcs.tearDown();
    System.exit(success ? 0 : 1);
}
