void forEach(Object catalogStr) throws SQLException {
    ResultSet results = null;
    try {
        StringBuffer queryBuf = new StringBuffer("SHOW COLUMNS FROM ");
        queryBuf.append(quotedId);
        queryBuf.append(table);
        queryBuf.append(quotedId);
        queryBuf.append(" FROM ");
        queryBuf.append(quotedId);
        queryBuf.append(catalogStr.toString());
        queryBuf.append(quotedId);
        results = stmt.executeQuery(queryBuf.toString());
        while (results.next()) {
            String keyType = results.getString("Key");
            if (keyType != null) {
                if (StringUtils.startsWithIgnoreCase(keyType, "PRI")) {
                    byte[][] rowVal = new byte[8][];
                    rowVal[0] = Integer.toString(java.sql.DatabaseMetaData.bestRowSession).getBytes();
                    rowVal[1] = results.getBytes("Field");
                    String type = results.getString("Type");
                    int size = MysqlIO.getMaxBuf();
                    int decimals = 0;
                    /*
									 * Parse the Type column from MySQL
									 */
                    if (type.indexOf("enum") != -1) {
                        String temp = type.substring(type.indexOf("("), type.indexOf(")"));
                        java.util.StringTokenizer tokenizer = new java.util.StringTokenizer(temp, ",");
                        int maxLength = 0;
                        while (tokenizer.hasMoreTokens()) {
                            maxLength = Math.max(maxLength, (tokenizer.nextToken().length() - 2));
                        }
                        size = maxLength;
                        decimals = 0;
                        type = "enum";
                    } else if (type.indexOf("(") != -1) {
                        if (type.indexOf(",") != -1) {
                            size = Integer.parseInt(type.substring(type.indexOf("(") + 1, type.indexOf(",")));
                            decimals = Integer.parseInt(type.substring(type.indexOf(",") + 1, type.indexOf(")")));
                        } else {
                            size = Integer.parseInt(type.substring(type.indexOf("(") + 1, type.indexOf(")")));
                        }
                        type = type.substring(0, type.indexOf("("));
                    }
                    rowVal[2] = s2b(String.valueOf(MysqlDefs.mysqlToJavaType(type)));
                    rowVal[3] = s2b(type);
                    rowVal[4] = Integer.toString(size + decimals).getBytes();
                    rowVal[5] = Integer.toString(size + decimals).getBytes();
                    rowVal[6] = Integer.toString(decimals).getBytes();
                    rowVal[7] = Integer.toString(java.sql.DatabaseMetaData.bestRowNotPseudo).getBytes();
                    rows.add(new ByteArrayRow(rowVal, getExceptionInterceptor()));
                }
            }
        }
    } catch (SQLException sqlEx) {
        if (!SQLError.SQL_STATE_BASE_TABLE_OR_VIEW_NOT_FOUND.equals(sqlEx.getSQLState())) {
            throw sqlEx;
        }
    } finally {
        if (results != null) {
            try {
                results.close();
            } catch (Exception ex) {
                ;
            }
            results = null;
        }
    }
}
