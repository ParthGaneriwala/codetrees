private void handleRegisterSubroutine() {
    SubroutineSubprogram ss = fomFactory.createSubroutineSubprogram(subRegister);
    // ss.getSubroutineStatement().getFormalArgument().add("comp");
    // ss.getSubroutineStatement().getFormalArgument().add("rc");
    ss.setSpecificationPart(fomFactory.createSpecificationPart());
    ss.setExecutionPart(fomFactory.createExecutionPart());
    // formal arguments
    ss.addFormalArgument("ESMF_CplComp", "comp");
    ss.addFormalArgument(IntrinsicType.INTEGER, "rc", IntentSpec.OUT);
    // intialize rc to success
    AssignmentStatement as = fomFactory.createAssignmentStatementWithNamedConstant("rc", "ESMF_SUCCESS");
    ss.addExecutionPartConstruct(as);
    // register callback routines
    // init
    CallStatement cs;
    for (int i = 0; i < subInit.size(); i++) {
        cs = fomFactory.createCallStatement("ESMF_CplCompSetEntryPoint");
        cs.addActualArgumentWithNamedConstant(null, "comp");
        cs.addActualArgumentWithNamedConstant(null, "ESMF_SETINIT");
        cs.addActualArgumentWithNamedConstant(null, subInit.get(i));
        if (subInit.size() == 1) {
            cs.addActualArgumentWithNamedConstant(null, "ESMF_SINGLEPHASE");
        } else {
            cs.addActualArgumentWithNamedConstant(null, String.valueOf(i));
        }
        cs.addActualArgumentWithNamedConstant(null, "rc");
        ss.addExecutionPartConstruct(cs);
    }
    // run
    for (int i = 0; i < subRun.size(); i++) {
        cs = fomFactory.createCallStatement("ESMF_CplCompSetEntryPoint");
        cs.addActualArgumentWithNamedConstant(null, "comp");
        cs.addActualArgumentWithNamedConstant(null, "ESMF_SETRUN");
        cs.addActualArgumentWithNamedConstant(null, subRun.get(i));
        if (subRun.size() == 1) {
            cs.addActualArgumentWithNamedConstant(null, "ESMF_SINGLEPHASE");
        } else {
            cs.addActualArgumentWithNamedConstant(null, String.valueOf(i));
        }
        cs.addActualArgumentWithNamedConstant(null, "rc");
        ss.addExecutionPartConstruct(cs);
    }
    // finalize
    for (int i = 0; i < subFinalize.size(); i++) {
        cs = fomFactory.createCallStatement("ESMF_CplCompSetEntryPoint");
        cs.addActualArgumentWithNamedConstant(null, "comp");
        cs.addActualArgumentWithNamedConstant(null, "ESMF_SETFINAL");
        cs.addActualArgumentWithNamedConstant(null, subFinalize.get(i));
        if (subFinalize.size() == 1) {
            cs.addActualArgumentWithNamedConstant(null, "ESMF_SINGLEPHASE");
        } else {
            cs.addActualArgumentWithNamedConstant(null, String.valueOf(i));
        }
        cs.addActualArgumentWithNamedConstant(null, "rc");
        ss.addExecutionPartConstruct(cs);
    }
    m.getModuleSubprogramPart().getModuleSubprogram().add(ss);
}
