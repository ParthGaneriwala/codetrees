@Override
protected void writeParseJava(MethodScope scope, String parseResultRef) {
    scope.startLine("");
    getFieldBinding().getTypeInfo().appendValueTypeNameJava(scope);
    scope.append(" " + parseResultRef + ";\n");
    boolean wrap = slowParser.javaCodeThrowsException() || !isOptional;
    if (wrap) {
        scope.startLine("try {\n");
        scope.indentRight();
    }
    String valueRef = scope.newMethodScopedName("value");
    String hasValueRef = scope.newMethodScopedName("hasValue");
    Util.writeReadValueAndHasValue(scope, fieldName, "underlying", valueRef, hasValueRef);
    scope.startLine("if (" + hasValueRef + ") {\n");
    scope.indentRight();
    if (slowParser.javaCodeThrowsException()) {
        scope.startLine("try {\n");
        scope.indentRight();
        slowParser.writeParseCode(scope, valueRef, "null", "r1");
        scope.startLine(parseResultRef + " = r1;\n");
        scope.indentLeft();
        scope.startLine("} catch (" + Util.BASE_PACKAGE + ".JsonProtocolParseException e) {\n");
        scope.startLine("  throw new " + Util.BASE_PACKAGE + ".JsonProtocolParseException(" + "\"Failed to parse field " + fieldName + " in type ");
        scope.append(typeClass.getName() + "\", e);\n");
        scope.startLine("}\n");
    } else {
        slowParser.writeParseCode(scope, valueRef, "null", "r1");
        scope.startLine(parseResultRef + " = r1;\n");
    }
    scope.indentLeft();
    scope.startLine("} else {\n");
    scope.indentRight();
    if (isOptional) {
        scope.startLine(parseResultRef + " = null;\n");
    } else {
        scope.startLine("throw new " + Util.BASE_PACKAGE + ".JsonProtocolParseException(" + "\"Field is not optional: " + fieldName + "\");\n");
    }
    scope.indentLeft();
    scope.startLine("}\n");
    if (wrap) {
        scope.indentLeft();
        scope.startLine("} catch (" + Util.BASE_PACKAGE + ".JsonProtocolParseException e) {\n");
        scope.startLine("  throw new " + Util.BASE_PACKAGE + ".implutil.CommonImpl.ParseRuntimeException(" + "\"On demand parsing failed for \" + underlying, e);\n");
        scope.startLine("}\n");
    }
}
