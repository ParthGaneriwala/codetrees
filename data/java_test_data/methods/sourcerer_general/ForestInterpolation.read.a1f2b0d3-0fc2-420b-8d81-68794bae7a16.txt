public void read(InputStream in) throws IOException {
    byte[] buf = new byte[4];
    ByteBuffer buffer = ByteBuffer.wrap(buf);
    int bytesRead = in.read(buf);
    if (bytesRead == -1) {
        throw new IOException("eof");
    }
    assert (bytesRead == 4);
    int len = buffer.getInt(0);
    buf = new byte[len];
    buffer = ByteBuffer.wrap(buf);
    int position = 0;
    while (position < len) {
        int read = in.read(buf, position, len - position);
        if (read > 0) {
            position += read;
        } else {
            throw new IOException("failed to read stream");
        }
    }
    word = buffer.getLong();
    position = buffer.position();
    int nrModels = PackedInteger.readInt(buf, position);
    position += PackedInteger.getReadIntLength(buf, position);
    int nrContexts = PackedInteger.readInt(buf, position);
    position += PackedInteger.getReadIntLength(buf, position);
    contexts = new ClusteredContext[nrContexts];
    counts = new int[nrContexts];
    probabilities = new double[nrContexts][];
    for (int i = 0; i < nrContexts; ++i) {
        ClusteredContext ctx = new ClusteredContext(nrModels);
        contexts[i] = ctx;
        for (int m = 0; m < nrModels; ++m) {
            ctx.clusters[m] = PackedInteger.readInt(buf, position);
            position += PackedInteger.getReadIntLength(buf, position);
        }
        counts[i] = PackedInteger.readInt(buf, position);
        position += PackedInteger.getReadIntLength(buf, position);
        buffer.position(position);
        double[] probs = new double[nrModels];
        for (int m = 0; m < nrModels; ++m) {
            probs[m] = buffer.getDouble();
        }
        probabilities[i] = probs;
        position = buffer.position();
    }
}
