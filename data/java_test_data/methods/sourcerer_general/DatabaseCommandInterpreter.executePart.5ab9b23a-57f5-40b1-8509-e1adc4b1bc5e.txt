private Result executePart(int cmd, String token) throws Throwable {
    Result result = Session.emptyUpdateCount;
    int brackets = 0;
    if (session.isSchemaDefintion()) {
        switch(cmd) {
            case Token.CREATE:
            case Token.GRANT:
                break;
            default:
                throw Trace.error(Trace.INVALID_IDENTIFIER, Trace.IN_SCHEMA_DEFINITION, new Object[] { token });
        }
    }
    switch(cmd) {
        case Token.OPENBRACKET:
            {
                Parser parser = new Parser(session, database, tokenizer);
                brackets = parser.parseOpenBracketsSelect() + 1;
            }
        case Token.SELECT:
            {
                Parser parser = new Parser(session, database, tokenizer);
                CompiledStatement cStatement = parser.compileSelectStatement(brackets);
                if (cStatement.parameters.length != 0) {
                    Trace.doAssert(false, Trace.getMessage(Trace.ASSERT_DIRECT_EXEC_WITH_PARAM));
                }
                result = session.sqlExecuteCompiledNoPreChecks(cStatement, null);
                break;
            }
        case Token.INSERT:
            {
                Parser parser = new Parser(session, database, tokenizer);
                CompiledStatement cStatement = parser.compileInsertStatement();
                if (cStatement.parameters.length != 0) {
                    Trace.doAssert(false, Trace.getMessage(Trace.ASSERT_DIRECT_EXEC_WITH_PARAM));
                }
                result = session.sqlExecuteCompiledNoPreChecks(cStatement, null);
                break;
            }
        case Token.UPDATE:
            {
                Parser parser = new Parser(session, database, tokenizer);
                CompiledStatement cStatement = parser.compileUpdateStatement();
                if (cStatement.parameters.length != 0) {
                    Trace.doAssert(false, Trace.getMessage(Trace.ASSERT_DIRECT_EXEC_WITH_PARAM));
                }
                result = session.sqlExecuteCompiledNoPreChecks(cStatement, null);
                break;
            }
        case Token.DELETE:
            {
                Parser parser = new Parser(session, database, tokenizer);
                CompiledStatement cStatement = parser.compileDeleteStatement();
                if (cStatement.parameters.length != 0) {
                    Trace.doAssert(false, Trace.getMessage(Trace.ASSERT_DIRECT_EXEC_WITH_PARAM));
                }
                result = session.sqlExecuteCompiledNoPreChecks(cStatement, null);
                break;
            }
        case Token.CALL:
            {
                Parser parser = new Parser(session, database, tokenizer);
                CompiledStatement cStatement = parser.compileCallStatement();
                if (cStatement.parameters.length != 0) {
                    Trace.doAssert(false, Trace.getMessage(Trace.ASSERT_DIRECT_EXEC_WITH_PARAM));
                }
                result = session.sqlExecuteCompiledNoPreChecks(cStatement, null);
                break;
            }
        case Token.SET:
            processSet();
            break;
        case Token.COMMIT:
            processCommit();
            break;
        case Token.ROLLBACK:
            processRollback();
            break;
        case Token.SAVEPOINT:
            processSavepoint();
            break;
        case Token.RELEASE:
            processReleaseSavepoint();
            break;
        case Token.CREATE:
            processCreate();
            database.setMetaDirty(false);
            break;
        case Token.ALTER:
            processAlter();
            database.setMetaDirty(true);
            break;
        case Token.DROP:
            processDrop();
            database.setMetaDirty(true);
            break;
        case Token.GRANT:
            processGrantOrRevoke(true);
            database.setMetaDirty(false);
            break;
        case Token.REVOKE:
            processGrantOrRevoke(false);
            database.setMetaDirty(true);
            break;
        case Token.CONNECT:
            processConnect();
            database.setMetaDirty(false);
            session.setScripting(false);
            break;
        case Token.DISCONNECT:
            processDisconnect();
            session.setScripting(true);
            break;
        case Token.SCRIPT:
            result = processScript();
            break;
        case Token.SHUTDOWN:
            processShutdown();
            break;
        case Token.CHECKPOINT:
            processCheckpoint();
            break;
        case Token.EXPLAIN:
            result = processExplainPlan();
            break;
        default:
            throw Trace.error(Trace.UNEXPECTED_TOKEN, token);
    }
    return result;
}
