@Override
protected List<Contact> parseContacts(InputStream contactsContent) throws IOException, JSONException, ContactListImporterException {
    String json = this.readInputStream(contactsContent);
    String startTag = "&&&START&&&";
    String endTag = "&&&END&&&";
    json = json.substring(json.indexOf(startTag) + startTag.length(), json.indexOf(endTag));
    JSONTokener jsonTokener = new JSONTokener(json);
    Object o = jsonTokener.nextValue();
    if (o == null || !(o instanceof JSONObject)) {
        throw new ContactListImporterException("Gmail contactlist format changed, cannot parse contacts");
    }
    JSONObject jsonObj = (JSONObject) o;
    jsonObj = jsonObj.getJSONObject("Body");
    JSONArray jsonContacts = jsonObj.getJSONArray("Contacts");
    List<Contact> contacts = new ArrayList<Contact>(jsonContacts.length());
    for (int i = 0; i < jsonContacts.length(); i++) {
        jsonObj = jsonContacts.getJSONObject(i);
        String name = null;
        if (jsonObj.has("Name")) {
            name = jsonObj.getString("Name");
        }
        if (!jsonObj.has("Emails"))
            continue;
        JSONArray emails = jsonObj.getJSONArray("Emails");
        for (int j = 0; j < emails.length(); j++) {
            jsonObj = emails.getJSONObject(j);
            if (!jsonObj.has("Address"))
                continue;
            String email = jsonObj.getString("Address");
            int atIndex = email.indexOf("@");
            // only add contacts that have an email adress
            if (atIndex == -1)
                continue;
            if (name == null || name.length() == 0) {
                name = email.substring(0, email.indexOf("@"));
            }
            email = email.toLowerCase();
            if (isEmailAddress(email)) {
                contacts.add(new ContactImpl(name, email));
            }
        }
    }
    return contacts;
}
