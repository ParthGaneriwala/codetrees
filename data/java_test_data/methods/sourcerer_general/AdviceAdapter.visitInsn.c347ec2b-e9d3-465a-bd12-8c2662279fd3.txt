public void visitInsn(final int opcode) {
    if (constructor) {
        switch(opcode) {
            case // empty stack
            RETURN:
                onMethodExit(opcode);
                break;
            // 1 before n/a after
            case IRETURN:
            // 1 before n/a after
            case FRETURN:
            // 1 before n/a after
            case ARETURN:
            case // 1 before n/a after
            ATHROW:
                popValue();
                popValue();
                onMethodExit(opcode);
                break;
            // 2 before n/a after
            case LRETURN:
            case // 2 before n/a after
            DRETURN:
                popValue();
                popValue();
                onMethodExit(opcode);
                break;
            case NOP:
            // remove 2 add 2
            case LALOAD:
            // remove 2 add 2
            case DALOAD:
            case LNEG:
            case DNEG:
            case FNEG:
            case INEG:
            case L2D:
            case D2L:
            case F2I:
            case I2B:
            case I2C:
            case I2S:
            case I2F:
            case Opcodes.ARRAYLENGTH:
                break;
            case ACONST_NULL:
            case ICONST_M1:
            case ICONST_0:
            case ICONST_1:
            case ICONST_2:
            case ICONST_3:
            case ICONST_4:
            case ICONST_5:
            case FCONST_0:
            case FCONST_1:
            case FCONST_2:
            // 1 before 2 after
            case F2L:
            case F2D:
            case I2L:
            case I2D:
                pushValue(OTHER);
                break;
            case LCONST_0:
            case LCONST_1:
            case DCONST_0:
            case DCONST_1:
                pushValue(OTHER);
                pushValue(OTHER);
                break;
            // remove 2 add 1
            case IALOAD:
            // remove 2 add 1
            case FALOAD:
            // remove 2 add 1
            case AALOAD:
            // remove 2 add 1
            case BALOAD:
            // remove 2 add 1
            case CALOAD:
            // remove 2 add 1
            case SALOAD:
            case POP:
            case IADD:
            case FADD:
            case ISUB:
            // 3 before 2 after
            case LSHL:
            // 3 before 2 after
            case LSHR:
            // 3 before 2 after
            case LUSHR:
            // 2 before 1 after
            case L2I:
            // 2 before 1 after
            case L2F:
            // 2 before 1 after
            case D2I:
            // 2 before 1 after
            case D2F:
            case FSUB:
            case FMUL:
            case FDIV:
            case FREM:
            // 2 before 1 after
            case FCMPL:
            // 2 before 1 after
            case FCMPG:
            case IMUL:
            case IDIV:
            case IREM:
            case ISHL:
            case ISHR:
            case IUSHR:
            case IAND:
            case IOR:
            case IXOR:
            case MONITORENTER:
            case MONITOREXIT:
                popValue();
                break;
            case POP2:
            case LSUB:
            case LMUL:
            case LDIV:
            case LREM:
            case LADD:
            case LAND:
            case LOR:
            case LXOR:
            case DADD:
            case DMUL:
            case DSUB:
            case DDIV:
            case DREM:
                popValue();
                popValue();
                break;
            case IASTORE:
            case FASTORE:
            case AASTORE:
            case BASTORE:
            case CASTORE:
            case SASTORE:
            // 4 before 1 after
            case LCMP:
            case DCMPL:
            case DCMPG:
                popValue();
                popValue();
                popValue();
                break;
            case LASTORE:
            case DASTORE:
                popValue();
                popValue();
                popValue();
                popValue();
                break;
            case DUP:
                pushValue(peekValue());
                break;
            case DUP_X1:
                // TODO optimize this
                {
                    Object o1 = popValue();
                    Object o2 = popValue();
                    pushValue(o1);
                    pushValue(o2);
                    pushValue(o1);
                }
                break;
            case DUP_X2:
                // TODO optimize this
                {
                    Object o1 = popValue();
                    Object o2 = popValue();
                    Object o3 = popValue();
                    pushValue(o1);
                    pushValue(o3);
                    pushValue(o2);
                    pushValue(o1);
                }
                break;
            case DUP2:
                // TODO optimize this
                {
                    Object o1 = popValue();
                    Object o2 = popValue();
                    pushValue(o2);
                    pushValue(o1);
                    pushValue(o2);
                    pushValue(o1);
                }
                break;
            case DUP2_X1:
                // TODO optimize this
                {
                    Object o1 = popValue();
                    Object o2 = popValue();
                    Object o3 = popValue();
                    pushValue(o2);
                    pushValue(o1);
                    pushValue(o3);
                    pushValue(o2);
                    pushValue(o1);
                }
                break;
            case DUP2_X2:
                // TODO optimize this
                {
                    Object o1 = popValue();
                    Object o2 = popValue();
                    Object o3 = popValue();
                    Object o4 = popValue();
                    pushValue(o2);
                    pushValue(o1);
                    pushValue(o4);
                    pushValue(o3);
                    pushValue(o2);
                    pushValue(o1);
                }
                break;
            case SWAP:
                {
                    Object o1 = popValue();
                    Object o2 = popValue();
                    pushValue(o1);
                    pushValue(o2);
                }
                break;
        }
    } else {
        switch(opcode) {
            case RETURN:
            case IRETURN:
            case FRETURN:
            case ARETURN:
            case LRETURN:
            case DRETURN:
            case ATHROW:
                onMethodExit(opcode);
                break;
        }
    }
    mv.visitInsn(opcode);
}
