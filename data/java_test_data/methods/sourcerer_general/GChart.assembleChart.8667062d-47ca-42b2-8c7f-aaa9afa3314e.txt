private void assembleChart() {
    if (chartDecorationsChanged || xAxis.limitsChanged() || yAxis.limitsChanged() || y2Axis.limitsChanged()) {
        plotPanel.reset(xChartSize, yChartSize, hasYAxis(), hasY2Axis(), xAxis, yAxis, y2Axis);
        /*
 * As of GChart 2.7, in most cases, font-family in annotations gets set
 * explicitly at the table-cell level. This is the only way to assure
 * that <td> stylings (present, for example, in GWT's default CSS
 * stylesheets) don't short-circuit the user-selected font-family for a
 * chart's annotations. But, for the special case where a low-level
 * annotation has explicitly defined it's font-family as "" (a.k.a.
 * USE_CSS) we still need this top level CSS so the GChart-wide
 * font-family cascades down when it isn't short-circuited (a savy
 * user can modify the GWT default stylesheet to eliminate the
 * <td> style rules, thus saving a bit of time by avoiding
 * the need to explicitly set the low level font-family style in
 * the DOM).
 *
 */
        GChart.setFontFamily(this, getFontFamily());
        GChart.setBackgroundColor(this, getBackgroundColor());
        GChart.setBorderColor(this, getBorderColor());
        GChart.setBorderStyle(this, getBorderStyle());
        GChart.setBorderWidth(this, getBorderWidth());
        GChart.setPadding(this, getPadding());
        GChart.setOverflow(this, getClipToDecoratedChart() ? "hidden" : "visible");
        this.setPixelSize(plotPanel.getXChartSizeDecoratedQuickly(), plotPanel.getYChartSizeDecoratedQuickly());
        updateDecorations(plotPanel.getXChartSizeDecoratedQuickly());
        xAxis.rememberLimits();
        yAxis.rememberLimits();
        y2Axis.rememberLimits();
        invalidateEveryCurve();
        chartDecorationsChanged = false;
    }
    // actually renders chart, including internal curves used
    // to represent the decorations (title, axis labels, etc.)
    realizePlotPanel();
    // first time, must add plotPanel only AFTER building chart
    if (plotPanel != chartPanel.getWidget()) {
        chartPanel.add(plotPanel);
        /*
       * Due to how GChart plays around with visible elements contained inside
       * hidden elements to align it's labels properly, if we allowed top level
       * <tt>visibility:hidden</tt> the result would be that everything
       * <i>except</i> annotations would be invisible. <p>
       * 
       * We can prevent such weird behavior by setting
       * <tt>visibility:visible</tt> on the top level element; this setting
       * effectively short-circuits any top level visibility setting the user
       * may have made. <p>
       * 
       * Users must either use <tt>display:none</tt> (as the Widget method
       * <tt>setVisible</tt> does) or create an enclosing 0-sized div with
       * <tt>overflow:hidden</tt>) to hide a GChart. <p>
       */
        DOM.setStyleAttribute(getElement(), "visibility", "visible");
    } else {
        /*
       * Without these 2 lines IE7 won't repaint GChart's annotations. The lines
       * are not needed in FF2; an IE7 bug is suspected.<p>
       * 
       * I got this workaround from <a href= "http://examples.roughian.com">Ian
       * Bambury</a> as part of <a href=
       * "http://groups.google.com/group/Google-Web-Toolkit/browse_thread/thread/4c54d8b4aea7f98b/6efd1ab4e5fc0e7b?#6efd1ab4e5fc0e7b"
       * > this discussion on the GWT forum</a>. <p>
       * 
       * (Note comment regarding need for explicit visibility above).
       */
        DOM.setStyleAttribute(getElement(), "visibility", "hidden");
        DOM.setStyleAttribute(getElement(), "visibility", "visible");
    }
}
