private WAHBitSet genericOp(OpType op, WAHBitSet other) {
    WAHBitSet ret = new WAHBitSet();
    // ensure that they have the same bit length.
    if (this.numBits() < other.numBits()) {
        this.setBit(other.numBits() - 1, 0);
    } else if (this.numBits() > other.numBits()) {
        other.setBit(numBits() - 1, 0);
    }
    if (vec.size() > 0) {
        run xrun = new run(vec), yrun = new run(other.vec);
        xrun.decode();
        yrun.decode();
        do {
            if (xrun.nWords == 0) {
                xrun.inc();
                xrun.decode();
            }
            if (yrun.nWords == 0) {
                yrun.inc();
                yrun.decode();
            }
            if (xrun.isFill()) {
                if (yrun.isFill()) {
                    int nWords = Math.min(xrun.nWords, yrun.nWords);
                    ret.appendFill(nWords, getOpResult(op, xrun.fillWord, yrun.fillWord));
                    xrun.nWords -= nWords;
                    yrun.nWords -= nWords;
                } else {
                    ret.active.val = getOpResult(op, xrun.fillWord, yrun.get());
                    ret.appendLiteral();
                    --xrun.nWords;
                    yrun.nWords = 0;
                }
            } else if (yrun.isFill()) {
                ret.active.val = getOpResult(op, yrun.fillWord, xrun.get());
                ret.appendLiteral();
                yrun.nWords--;
                xrun.nWords = 0;
            } else {
                ret.active.val = getOpResult(op, xrun.get(), yrun.get());
                ret.appendLiteral();
                yrun.nWords = 0;
                xrun.nWords = 0;
            }
        } while (!(xrun.end() && yrun.end()));
    }
    ret.active.val = getOpResult(op, this.active.val, other.active.val);
    ret.active.nbits = this.active.nbits;
    ret.doCount();
    return ret;
}
