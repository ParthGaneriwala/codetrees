private void parseDataField(String tag, byte[] bfield) {
    // indicators defaulting to a blank value
    // 指示符1
    char ind1 = BLANK;
    // 指示符2
    char ind2 = BLANK;
    // 子字段代码，比如a，b
    char code = BLANK;
    StringBuffer data = null;
    try {
        // 使用文件编码将字节数组转为字符数组
        // 此时1个汉字与1个英文字母一样被看作 1 个字符
        char[] field = new String(bfield, charsetName).toCharArray();
        if (field.length < 4 && eh != null) {
        // should do sth more
        } else {
            // 取得指示符1
            ind1 = field[0];
            // 取得指示符2
            ind2 = field[1];
        }
        if (mh != null) {
            mh.startDataField(tag, ind1, ind2);
        }
        // 紧跟在2个指示符后面的应该是子字段分隔符US(001F)
        if (field[2] != US && field.length > 3 && eh != null) {
        // should do sth more
        }
        // 取完两个指示符后，指针从 2 开始
        for (int i = 2; i < field.length; i++) {
            // 取得当前字符
            char c = field[i];
            switch(c) {
                // 如果是子字段分隔符
                case US:
                    if (data != null) {
                        // 通知 MarcHandler 前面已经读入的子字段的代码及数据
                        reportSubfield(code, data);
                        data.delete(0, data.length());
                    } else {
                        data = new StringBuffer();
                    }
                    // 取得子字段代码，比如a，b
                    code = field[i + 1];
                    i++;
                    break;
                // 如果是字段结束符
                case FT:
                    if (// 通知 MarcHandler 前面已经读入的子字段的代码及数据
                    data != null) {
                        reportSubfield(code, data);
                    }
                    break;
                // 默认将具体数据加入data
                default:
                    if (data != null) {
                        data.append(c);
                    }
            }
        }
        if (mh != null) {
            mh.endDataField(tag);
        }
    // 处理完毕后，通知MarcHandler当前数据字段结束
    } catch (ArrayIndexOutOfBoundsException e) {
        System.out.println(e);
        System.exit(1);
    } catch (UnsupportedEncodingException ex) {
        System.out.println(ex);
        System.exit(1);
    }
}
