protected void updateSelection() {
    if (!(_cursorVisible = _dragging && _editor.isFirstButtonDown() && getMousePlaneIntersection(_isect) && !_editor.isSpecialDown())) {
        _dragging = false;
        return;
    }
    // hold off displaying until the cursor is actually moved
    if (_anchor.equals(_isect)) {
        _cursorVisible = false;
    }
    // snap to tile grid if shift not held down
    boolean gx = (_isect.x >= _anchor.x), gy = (_isect.y >= _anchor.y);
    Polygon shape = (Polygon) _cursor.getShape();
    Vector2f corner = shape.getVertex(0);
    if (!_editor.isShiftDown()) {
        corner.x = gx ? FloatMath.floor(_anchor.x) + 0.01f : FloatMath.ceil(_anchor.x) - 0.01f;
        corner.y = gy ? FloatMath.floor(_anchor.y) + 0.01f : FloatMath.ceil(_anchor.y) - 0.01f;
        _isect.x = gx ? FloatMath.ceil(_isect.x) - 0.01f : FloatMath.floor(_isect.x) + 0.01f;
        _isect.y = gy ? FloatMath.ceil(_isect.y) - 0.01f : FloatMath.floor(_isect.y) + 0.01f;
    } else {
        corner.set(_anchor.x, _anchor.y);
    }
    // adjust the ordering to ensure ccw orientation
    shape.getVertex(2).set(_isect.x, _isect.y);
    if (gx ^ gy) {
        shape.getVertex(1).set(corner.x, _isect.y);
        shape.getVertex(3).set(_isect.x, corner.y);
    } else {
        shape.getVertex(1).set(_isect.x, corner.y);
        shape.getVertex(3).set(corner.x, _isect.y);
    }
    shape.updateBounds();
    // update the elevation
    _cursor.getTransform().getTranslation().z = TudeySceneMetrics.getTileZ(_editor.getGrid().getElevation());
    // update the selection
    _scene.getEntries(shape, Predicates.and(_options.filter, _editor.getLayerPredicate()), _entries);
    if (!keysEqual(_entries, _editor.getSelection())) {
        _editor.setSelection(_entries.toArray(new Entry[_entries.size()]));
    }
    _entries.clear();
}
