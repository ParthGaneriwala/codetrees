private void getTexts(Map<Long, Term> terms, List<String> languages) throws EurovocException {
    if (terms.size() == 0) {
        // Do nothing if no terms are provided
        return;
    }
    StringBuilder sql = new StringBuilder();
    sql.append("select node, text_type, language, value " + "from texts where node in ('");
    for (Long id : terms.keySet()) {
        // Build the list of term id's
        sql.append(id.toString());
        sql.append("', '");
    }
    if (sql.length() != 0) {
        // Remove the last ", '"
        sql.setLength(sql.length() - 3);
    }
    sql.append(")" + " and language in ('");
    for (int i = 0; i < languages.size(); i++) {
        // Build the list of
        // languages
        sql.append(languages.get(i));
        if (i != languages.size() - 1) {
            sql.append("', '");
        }
    }
    sql.append("')");
    // System.out.println("Find texts: " + sql);
    Term term;
    long id;
    String language;
    String text;
    char type;
    Statement s;
    ResultSet rs = null;
    try {
        s = getConnection().createStatement();
        s.execute(sql.toString());
        rs = s.getResultSet();
        while (rs.next()) {
            // For all texts - Store them on the term
            id = rs.getLong("node");
            term = terms.get(Long.valueOf(id));
            language = rs.getString("language");
            text = rs.getString("value");
            type = rs.getString("text_type").charAt(0);
            switch(type) {
                case // Descriptor
                'D':
                    term.setText(language, text);
                    break;
                case // Scope note
                'S':
                    term.setScopeNote(language, text);
                    break;
                case // Used fpr
                'U':
                    term.addUsedFor(language, text);
                    break;
                default:
                    System.out.println("Unknown text type!: " + type);
                    break;
            }
        }
        rs.close();
        s.close();
    } catch (SQLException e) {
        sqlErrorHandler(e, rs);
        e.printStackTrace();
        throw new EurovocException(e.getMessage());
    }
}
