public void taskFinished() {
    long start = System.currentTimeMillis();
    // 
    while (!done && (System.currentTimeMillis() - start < WAIT_FOR_DONE)) {
        try {
            Thread.sleep(1000);
        } catch (InterruptedException ie) {
        }
    }
    // 
    // Change state to success or failure, depending on whether
    // task was 'done' before terminating
    // 
    boolean needCleanup = false;
    synchronized (this) {
        if (!done) {
            if (!wasKilled) {
                failures += 1;
                taskStatus.setRunState(TaskStatus.State.FAILED);
                // call the script here for the failed tasks.
                if (debugCommand != null) {
                    String taskStdout = "";
                    String taskStderr = "";
                    String taskSyslog = "";
                    String jobConf = task.getJobFile();
                    try {
                        // get task's stdout file
                        taskStdout = FileUtil.makeShellPath(TaskLog.getRealTaskLogFileLocation(task.getTaskID(), TaskLog.LogName.STDOUT));
                        // get task's stderr file
                        taskStderr = FileUtil.makeShellPath(TaskLog.getRealTaskLogFileLocation(task.getTaskID(), TaskLog.LogName.STDERR));
                        // get task's syslog file
                        taskSyslog = FileUtil.makeShellPath(TaskLog.getRealTaskLogFileLocation(task.getTaskID(), TaskLog.LogName.SYSLOG));
                    } catch (IOException e) {
                        LOG.warn("Exception finding task's stdout/err/syslog files");
                    }
                    File workDir = null;
                    try {
                        workDir = new File(lDirAlloc.getLocalPathToRead(TaskTracker.getJobCacheSubdir() + Path.SEPARATOR + task.getJobID() + Path.SEPARATOR + task.getTaskID() + Path.SEPARATOR + MRConstants.WORKDIR, localJobConf).toString());
                    } catch (IOException e) {
                        LOG.warn("Working Directory of the task " + task.getTaskID() + "doesnt exist. Caught exception " + StringUtils.stringifyException(e));
                    }
                    // Build the command
                    File stdout = TaskLog.getRealTaskLogFileLocation(task.getTaskID(), TaskLog.LogName.DEBUGOUT);
                    // add pipes program as argument if it exists.
                    String program = "";
                    String executable = Submitter.getExecutable(localJobConf);
                    if (executable != null) {
                        try {
                            program = new URI(executable).getFragment();
                        } catch (URISyntaxException ur) {
                            LOG.warn("Problem in the URI fragment for pipes executable");
                        }
                    }
                    String[] debug = debugCommand.split(" ");
                    Vector<String> vargs = new Vector<String>();
                    for (String component : debug) {
                        vargs.add(component);
                    }
                    vargs.add(taskStdout);
                    vargs.add(taskStderr);
                    vargs.add(taskSyslog);
                    vargs.add(jobConf);
                    vargs.add(program);
                    try {
                        List<String> wrappedCommand = TaskLog.captureDebugOut(vargs, stdout);
                        // run the script.
                        try {
                            runScript(wrappedCommand, workDir);
                        } catch (IOException ioe) {
                            LOG.warn("runScript failed with: " + StringUtils.stringifyException(ioe));
                        }
                    } catch (IOException e) {
                        LOG.warn("Error in preparing wrapped debug command");
                    }
                    // add all lines of debug out to diagnostics
                    try {
                        int num = localJobConf.getInt("mapred.debug.out.lines", -1);
                        addDiagnostics(FileUtil.makeShellPath(stdout), num, "DEBUG OUT");
                    } catch (IOException ioe) {
                        LOG.warn("Exception in add diagnostics!");
                    }
                }
            } else {
                taskStatus.setRunState(TaskStatus.State.KILLED);
            }
            taskStatus.setProgress(0.0f);
        }
        this.taskStatus.setFinishTime(System.currentTimeMillis());
        needCleanup = (taskStatus.getRunState() == TaskStatus.State.FAILED || taskStatus.getRunState() == TaskStatus.State.KILLED);
    }
    // 
    if (needCleanup) {
        removeTaskFromJob(task.getJobID(), this);
    }
    try {
        cleanup(needCleanup);
    } catch (IOException ie) {
    }
}
