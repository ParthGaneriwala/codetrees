private void decodeImage(LEDataInputStream in, GIFImageDescriptor gifID, AdaptiveRasterImage ji) throws JimiException, IOException {
    int row;
    int height = gifID.height;
    int codeSize = in.readByte();
    // GIF Mode
    LZWDecompressor lzwD = new LZWDecompressor(in, codeSize, false);
    byte[] buf = new byte[gifID.width];
    int rowProgress = 0;
    if (gifID.interlace) {
        // interlaced so let the JimiImage know that the data will be sent in multiple passes
        ji.setHints(ImageConsumer.TOPDOWNLEFTRIGHT | ImageConsumer.COMPLETESCANLINES | ImageConsumer.SINGLEFRAME);
        for (row = 0; row < height; row += 8) {
            lzwD.decompress(buf);
            ji.setChannel(0, row, buf);
            setProgress((rowProgress++ * 100) / gifID.height);
        }
        for (row = 4; row < height; row += 8) {
            lzwD.decompress(buf);
            ji.setChannel(0, row, buf);
            setProgress((rowProgress++ * 100) / gifID.height);
        }
        for (row = 2; row < height; row += 4) {
            lzwD.decompress(buf);
            ji.setChannel(0, row, buf);
            setProgress((rowProgress++ * 100) / gifID.height);
        }
        for (row = 1; row < height; row += 2) {
            lzwD.decompress(buf);
            ji.setChannel(0, row, buf);
            setProgress((rowProgress++ * 100) / gifID.height);
        }
        setProgress(100);
    } else {
        for (row = 0; row < height; ++row) {
            lzwD.decompress(buf);
            ji.setChannel(0, row, buf);
            setProgress((row * 100) / height);
        }
    }
    // completed decompression
    // ensure past end of GIF data blocks
    lzwD.gifFinishBlocks();
}
