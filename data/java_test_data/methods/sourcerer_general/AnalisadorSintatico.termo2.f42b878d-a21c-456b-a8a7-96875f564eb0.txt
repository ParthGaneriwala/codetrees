protected boolean termo2(List<Integer> syncSymbols) {
    // <termo2> ::= "*" <fator><termo2> | "/" <fator><termo2> | &;
    // insere multiplicacao e soma
    List<Integer> syncTermo2 = PrimeirosSimbolos.getTermoPrimeiro();
    // insere adicao e subtracao
    syncTermo2.addAll(PrimeirosSimbolos.getExpressaoPrimeira());
    if (verificaEsteToken(PalavraReservada.MULTIPLICACAO)) {
        expressionCG = expressionCG + currentToken;
        cg.setaOperadorDeExpr(currentToken.toString());
        proximoToken();
        List<Integer> followTermo2 = new LinkedList<Integer>(syncTermo2);
        syncSymbols.addAll(followTermo2);
        // verifica as regras da gramatica do fator
        // <fator> ::= "(" <expressao> ")" | IDENTIFICADOR | NUMERO;  */
        fator(syncSymbols);
        CollectionsUtil.removeAll(syncSymbols, followTermo2);
        if (syncTermo2.contains(currentToken.getCodigo())) {
            // <termo2> ::= "*" <fator><termo2> | "/" <fator><termo2> | &;
            termo2(syncSymbols);
            semantico.verificaExpressao(currentToken.getLinha());
        }
    }
    if (verificaEsteToken(PalavraReservada.DIVICAO)) {
        expressionCG = expressionCG + currentToken;
        cg.setaOperadorDeExpr(currentToken.toString());
        proximoToken();
        List<Integer> followTermo = new LinkedList<Integer>(syncTermo2);
        syncSymbols.addAll(followTermo);
        // verifica as regras da gramatica do fator
        // <fator> ::= "(" <expressao> ")" | IDENTIFICADOR | NUMERO;  */
        fator(syncSymbols);
        // remove os simbolos que formam uma intersecao
        CollectionsUtil.removeAll(syncSymbols, followTermo);
        // verifica se este token eh um simbolo esperado
        if (followTermo.contains(currentToken.getCodigo())) {
            // <termo2> ::= "*" <fator><termo2> | "/" <fator><termo2> | &;
            termo2(syncSymbols);
            semantico.verificaExpressao(currentToken.getLinha());
        }
    }
    return true;
}
