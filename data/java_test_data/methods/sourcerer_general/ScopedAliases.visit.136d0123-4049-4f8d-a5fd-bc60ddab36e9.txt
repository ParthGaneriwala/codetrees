@Override
public void visit(NodeTraversal t, Node n, Node parent) {
    if (isCallToScopeMethod(n)) {
        if (preprocessorSymbolTable != null) {
            preprocessorSymbolTable.addReference(n.getFirstChild());
        }
        if (!NodeUtil.isExpressionNode(parent)) {
            report(t, n, GOOG_SCOPE_USED_IMPROPERLY);
        }
        if (n.getChildCount() != 2) {
            // The goog.scope call should have exactly 1 parameter.  The first
            // child is the "goog.scope" and the second should be the parameter.
            report(t, n, GOOG_SCOPE_HAS_BAD_PARAMETERS);
        } else {
            Node anonymousFnNode = n.getChildAtIndex(1);
            if (!NodeUtil.isFunction(anonymousFnNode) || NodeUtil.getFunctionName(anonymousFnNode) != null || NodeUtil.getFunctionParameters(anonymousFnNode).hasChildren()) {
                report(t, anonymousFnNode, GOOG_SCOPE_HAS_BAD_PARAMETERS);
            } else {
                scopeCalls.add(n);
            }
        }
    }
    if (t.getScopeDepth() == 2) {
        int type = n.getType();
        if (type == Token.NAME && parent.getType() == Token.VAR) {
            if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
                String name = n.getString();
                Var aliasVar = t.getScope().getVar(name);
                aliases.put(name, aliasVar);
                aliasDefinitions.add(n);
                String qualifiedName = aliasVar.getInitialValue().getQualifiedName();
                transformation.addAlias(name, qualifiedName);
                return;
            } else {
                // TODO(robbyw): Support using locals for private variables.
                report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
            }
        }
        if (type == Token.NAME && NodeUtil.isAssignmentOp(parent) && n == parent.getFirstChild()) {
            report(t, n, GOOG_SCOPE_ALIAS_REDEFINED, n.getString());
        }
        if (type == Token.RETURN) {
            report(t, n, GOOG_SCOPE_USES_RETURN);
        } else if (type == Token.THIS) {
            report(t, n, GOOG_SCOPE_REFERENCES_THIS);
        } else if (type == Token.THROW) {
            report(t, n, GOOG_SCOPE_USES_THROW);
        }
    }
    if (t.getScopeDepth() >= 2) {
        if (n.getType() == Token.NAME) {
            String name = n.getString();
            Var aliasVar = aliases.get(name);
            // Check if this name points to an alias.
            if (aliasVar != null && t.getScope().getVar(name) == aliasVar) {
                // Note, to support the transitive case, it's important we don't
                // clone aliasedNode here.  For example,
                // var g = goog; var d = g.dom; d.createElement('DIV');
                // The node in aliasedNode (which is "g") will be replaced in the
                // changes pass above with "goog".  If we cloned here, we'd end up
                // with <code>g.dom.createElement('DIV')</code>.
                Node aliasedNode = aliasVar.getInitialValue();
                aliasUsages.add(new AliasedNode(n, aliasedNode));
            }
        }
        JSDocInfo info = n.getJSDocInfo();
        if (info != null) {
            for (Node node : info.getTypeNodes()) {
                fixTypeNode(node);
            }
        }
    // TODO(robbyw): Error for goog.scope not at root.
    }
}
