@Test
@DirtiesContext
public void testKillAnonymousItem() throws Exception {
    configureMinimalGame();
    System.out.println("**** testKillAnonymousItem ****");
    beginHttpSession();
    beginHttpRequestAndOpenSessionInViewFilter();
    movableService.sendTutorialProgress(TutorialConfig.TYPE.TUTORIAL, "xx", "xx", 0, 0);
    SimpleBase targetBase = ((RealityInfo) movableService.getGameInfo()).getBase();
    endHttpRequestAndOpenSessionInViewFilter();
    endHttpSession();
    beginHttpSession();
    beginHttpRequestAndOpenSessionInViewFilter();
    userService.createUser("Actor", "test", "test", "test");
    userService.login("Actor", "test");
    movableService.sendTutorialProgress(TutorialConfig.TYPE.TUTORIAL, "xx", "xx", 0, 0);
    SimpleBase actorBase = ((RealityInfo) movableService.getGameInfo()).getBase();
    Index buildPos = collisionService.getFreeRandomPosition(itemService.getItemType(TEST_FACTORY_ITEM_ID), new Rectangle(0, 0, 100000, 100000), 400, true);
    sendBuildCommand(getFirstSynItemId(actorBase, TEST_START_BUILDER_ITEM_ID), buildPos, TEST_FACTORY_ITEM_ID);
    waitForActionServiceDone();
    sendFactoryCommand(getFirstSynItemId(actorBase, TEST_FACTORY_ITEM_ID), TEST_ATTACK_ITEM_ID);
    waitForActionServiceDone();
    sendAttackCommand(getFirstSynItemId(actorBase, TEST_ATTACK_ITEM_ID), getFirstSynItemId(targetBase, TEST_START_BUILDER_ITEM_ID));
    waitForActionServiceDone();
    endHttpRequestAndOpenSessionInViewFilter();
    endHttpSession();
    // Verify
    beginHttpSession();
    beginHttpRequestAndOpenSessionInViewFilter();
    List<DisplayHistoryElement> displayHistoryElements = historyService.getNewestHistoryElements(userService.getUser("Actor"), 1000);
    System.out.println("----- History Actor-----");
    for (DisplayHistoryElement displayHistoryElement : displayHistoryElements) {
        System.out.println(displayHistoryElement);
    }
    System.out.println("----- History End -----");
    Assert.assertEquals(7, displayHistoryElements.size());
    Assert.assertTrue(displayHistoryElements.get(1).getTimeStamp() >= displayHistoryElements.get(2).getTimeStamp());
    Assert.assertEquals("Destroyed a " + TEST_START_BUILDER_ITEM + " from Base 1", displayHistoryElements.get(1).getMessage());
    Assert.assertTrue(displayHistoryElements.get(0).getTimeStamp() >= displayHistoryElements.get(1).getTimeStamp());
    Assert.assertEquals("Base destroyed: Base 1", displayHistoryElements.get(0).getMessage());
    endHttpRequestAndOpenSessionInViewFilter();
    endHttpSession();
}
