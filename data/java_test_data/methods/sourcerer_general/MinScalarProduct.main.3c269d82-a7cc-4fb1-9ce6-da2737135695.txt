public static void main(String[] args) {
    try {
        BufferedReader br = new BufferedReader(new InputStreamReader("".getClass().getResourceAsStream("/A-small-practice.in")));
        String testCaseNumber = br.readLine();
        System.out.println(testCaseNumber);
        for (int i = 0; i < Integer.valueOf(testCaseNumber); i++) {
            int product = 0;
            String intNumber = br.readLine();
            List<Integer> vector1 = new ArrayList<Integer>();
            List<Integer> vector2 = new ArrayList<Integer>();
            String[] numbers = br.readLine().split(" ");
            for (int j = 0; j < Integer.valueOf(intNumber); j++) {
                vector1.add(Integer.valueOf(numbers[j]));
            }
            numbers = br.readLine().split(" ");
            for (int j = 0; j < Integer.valueOf(intNumber); j++) {
                vector2.add(Integer.valueOf(numbers[j]));
            }
            Collections.sort(vector1);
            for (int j = 0; j < Integer.valueOf(intNumber); j++) {
                if (vector1.get(j) < 0) {
                    int maxPositive = getMaxPositive(vector2);
                    if (maxPositive > 0) {
                        product += vector1.get(j) * maxPositive;
                        vector2.remove(new Integer(maxPositive));
                    } else {
                        product += vector1.get(j) * getMaxNegative(vector2);
                        vector2.remove(new Integer(getMaxNegative(vector2)));
                    }
                } else {
                    int maxPositive = getMaxPositive(vector2);
                    if (maxPositive > 0) {
                        product += vector1.get(j) * maxPositive;
                        vector2.remove(new Integer(maxPositive));
                    } else {
                        product += vector1.get(j) * getMaxNegative(vector2);
                        vector2.remove(new Integer(getMaxNegative(vector2)));
                    }
                }
            }
            System.out.println("Case #" + (i + 1) + ": " + product);
        }
        br.close();
    } catch (IOException e) {
        e.printStackTrace();
    }
}
