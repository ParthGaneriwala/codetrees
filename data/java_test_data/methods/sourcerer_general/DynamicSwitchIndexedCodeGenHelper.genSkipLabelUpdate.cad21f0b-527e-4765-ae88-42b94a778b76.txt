public void genSkipLabelUpdate(SMNode state, String symbol, SootMethod method) {
    // if not all variables are bound on this state, just proceed with super-call
    if (!state.boundVars.containsAll(tm.getFormalNames())) {
        super.genSkipLabelUpdate(state, symbol, method);
        return;
    }
    // else, apply the optimization
    Body body = method.getActiveBody();
    LocalGenerator localGen = new LocalGenerator(body);
    Chain newUnits = newChain();
    // create new nop-statement as jump target
    NopStmt jumpTarget = Jimple.v().newNopStmt();
    // Constraint c = this.tracematch$i_labelj;
    Local thisLocal = body.getThisLocal();
    Local constraintLocal = getLabel(body, newUnits, thisLocal, state.getNumber(), LABEL);
    // Set/Map $temp = c.<disjunctsFieldName>
    // field name and type of disjuncts set/map depends on whether or not the state uses indexing
    IndexingScheme scheme = tm.getIndexingScheme();
    boolean stateUsesIndexing = scheme.getStructure(state).height() > 0;
    String disjunctsFieldName = stateUsesIndexing ? "indexedDisjuncts" : "disjuncts";
    Type disjunctsFieldType = stateUsesIndexing ? RefType.v("java.util.Map") : set.getType();
    SootFieldRef disjunctsFieldRef = Scene.v().makeFieldRef(constraint, disjunctsFieldName, disjunctsFieldType, false);
    InstanceFieldRef rhs = Jimple.v().newInstanceFieldRef(constraintLocal, disjunctsFieldRef);
    Local disjunctsLocal = localGen.generateLocal(disjunctsFieldType);
    newUnits.add(Jimple.v().newAssignStmt(disjunctsLocal, rhs));
    // if($temp==null) goto jumpTarget
    EqExpr nullCheck = Jimple.v().newEqExpr(disjunctsLocal, NullConstant.v());
    newUnits.add(Jimple.v().newIfStmt(nullCheck, jumpTarget));
    // boolean $isEmpty = $temp.isEmpty();
    SootClass disjunctsFieldClass = stateUsesIndexing ? Scene.v().getSootClass("java.util.Map") : Scene.v().getSootClass("java.util.Set");
    Local isEmptyLocal = localGen.generateLocal(BooleanType.v());
    SootMethodRef isEmptyMethodRef = Scene.v().makeMethodRef(disjunctsFieldClass, "isEmpty", Collections.EMPTY_LIST, BooleanType.v(), false);
    InvokeExpr isEmptyInvokeExpr = Jimple.v().newInterfaceInvokeExpr(disjunctsLocal, isEmptyMethodRef);
    newUnits.add(Jimple.v().newAssignStmt(isEmptyLocal, isEmptyInvokeExpr));
    // if($isEmpty) goto jumpTarget
    EqExpr emptyCheck = Jimple.v().newEqExpr(isEmptyLocal, IntConstant.v(1));
    newUnits.add(Jimple.v().newIfStmt(emptyCheck, jumpTarget));
    // generate code we would generate otherwise
    Chain units = body.getUnits();
    insertBeforeReturn(newUnits, units);
    super.genSkipLabelUpdate(state, symbol, method);
    // insert jump target
    newUnits = newChain();
    newUnits.add(jumpTarget);
    insertBeforeReturn(newUnits, units);
}
