// ******************************************************************************
// ** java.awt.event.LayoutManager methods                                    ***
// ******************************************************************************
/**
 * To lay out the specified container using this layout.  This method
 * repositions the components in the specified target container.
 *
 * <p>User code should not have to call this method directly.</p>
 *
 * @param container    container being served by this layout manager
 */
public void layoutContainer(Container container) {
    // Use preferred size to get maximum width or height
    Dimension size = container.getSize();
    // Get the container's insets
    Insets inset = container.getInsets();
    // Start at top left of container
    int x = inset.left;
    int y = inset.top;
    // Get the components inside the container
    Component[] component = container.getComponents();
    // Components arranged in a column
    if (orientation == COLUMN)
        // Add each component
        for (int counter = 0; counter < component.length; counter++) {
            // Use preferred size of component
            Dimension d = component[counter].getPreferredSize();
            // Align component
            switch(justification) {
                case LEFT:
                    x = inset.left;
                    break;
                case CENTER:
                    x = ((size.width - d.width) >> 1) + inset.left - inset.right;
                    break;
                case FULL:
                    x = inset.left;
                    d.width = size.width - inset.left - inset.right;
                    break;
                case RIGHT:
                    x = size.width - d.width - inset.right;
                    break;
            }
            // Set size and location
            component[counter].setBounds(x, y, d.width, d.height);
            // Increment y
            y += d.height + gap;
        }
    else
        // Add each component
        for (int counter = 0; counter < component.length; counter++) {
            // Use preferred size of component
            Dimension d = component[counter].getPreferredSize();
            // Align component
            switch(justification) {
                case TOP:
                    y = inset.top;
                    break;
                case CENTER:
                    y = ((size.height - d.height) >> 1) + inset.top - inset.bottom;
                    break;
                case FULL:
                    y = inset.top;
                    d.height = size.height - inset.top - inset.bottom;
                    break;
                case BOTTOM:
                    y = size.height - d.height - inset.bottom;
                    break;
            }
            // Set size and location
            component[counter].setBounds(x, y, d.width, d.height);
            // Increment x
            x += d.width + gap;
        }
}
