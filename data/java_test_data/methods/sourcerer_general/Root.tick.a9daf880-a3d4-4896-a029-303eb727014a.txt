public void tick(float elapsed) {
    // update the tick stamp
    _tickStamp = System.currentTimeMillis();
    // repeat keys as necessary
    if (!_pressedKeys.isEmpty()) {
        for (KeyRecord key : _pressedKeys.values()) {
            key.maybeRepeat();
        }
    }
    // validate all invalid roots
    boolean updateHover = false;
    while (_invalidRoots.size() > 0) {
        Component root = _invalidRoots.remove(0);
        // make sure the root is still added to the view hierarchy
        if (root.isAdded()) {
            root.validate();
            updateHover = true;
        }
    }
    // update the hover component if necessary
    if (updateHover) {
        updateHoverComponent(_mouseX, _mouseY);
    }
    // notify our tick participants
    _tickParticipants.apply(_tickOp.init(elapsed));
    // check to see if we need to pop up a tooltip
    _lastMoveTime += elapsed;
    _lastTipTime += elapsed;
    String tiptext;
    if (_hcomponent == null || _tipwin != null || (_lastMoveTime < getTooltipTimeout() && _lastTipTime > TIP_MODE_RESET) || (tiptext = _hcomponent.getTooltipText()) == null) {
        if (_tipwin != null) {
            _lastTipTime = 0;
        }
        return;
    }
    // make sure the hover component is in a window and wants a tooltip
    Window hwin = _hcomponent.getWindow();
    Component tcomp = _hcomponent.createTooltipComponent(tiptext);
    if (hwin == null || tcomp == null) {
        return;
    }
    // create, set up and show the tooltip window
    _tipwin = new Window(_ctx, new BorderLayout()) {

        public boolean isOverlay() {
            // don't steal input focus
            return true;
        }
    };
    _tipwin.setLayer(Integer.MAX_VALUE / 2);
    _tipwin.setStyleConfig(_hcomponent.getTooltipWindowStyle());
    _tipwin.add(tcomp, BorderLayout.CENTER);
    addWindow(_tipwin);
    // make sure we don't NPE
    if (_tipwin == null) {
        return;
    }
    // if it's still here, lay it out
    int width = getDisplayWidth();
    int height = getDisplayHeight();
    _tipwin.pack(_tipWidth == -1 ? width - 10 : _tipWidth, height - 10);
    int tx = 0, ty = 0;
    if (_hcomponent.isTooltipRelativeToMouse()) {
        tx = _mouseX - _tipwin.getWidth() / 2;
        ty = _mouseY + 10;
    } else {
        tx = _hcomponent.getAbsoluteX() + (_hcomponent.getWidth() - _tipwin.getWidth()) / 2;
        ty = _hcomponent.getAbsoluteY() + _hcomponent.getHeight() + 10;
    }
    tx = Math.max(5, Math.min(tx, width - _tipwin.getWidth() - 5));
    ty = Math.min(ty, height - _tipwin.getHeight() - 5);
    _tipwin.setLocation(tx, ty);
    // we need to validate here because we're adding a window in the middle of our normal frame
    // processing
    _tipwin.validate();
}
