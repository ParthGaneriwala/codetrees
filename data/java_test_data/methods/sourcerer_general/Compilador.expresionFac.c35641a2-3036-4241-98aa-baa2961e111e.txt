private sintetizados expresionFac(tipo tipoH, boolean porValorH, String idPredefH) throws ErrorLexico, ErrorArchivo, ErrorSintactico, ErrorSemantico, Exception {
    int tokenValue;
    sintetizados s = new sintetizados();
    sintetizados sES;
    if (esOperadorRelacional(numeroTokenActual)) {
        if (!porValorH) {
            throw new ErrorSemantico(ErrorSemantico.EXP_POR_VALOR, getNumeroLinea(), getNumeroColumna());
        } else {
            tokenValue = tokenActual.getNumeroToken();
            match(numeroTokenActual);
            sES = expresionSimple(porValorH, idPredefH);
            if (TS.compatibles(tipoH, sES.getTipoS())) {
                s.setTipoS(new Booleano(TS.getNivelActual()));
                if (!(tipoH instanceof Booleano)) {
                    if (tokenValue == Token.IGUAL) {
                        generador.genInstSinArg("", generador.CMIG);
                    } else if (tokenValue == Token.MAYOR) {
                        generador.genInstSinArg("", generador.CMMA);
                    } else if (tokenValue == Token.MENOR) {
                        generador.genInstSinArg("", generador.CMME);
                    } else if (tokenValue == Token.MAYOROIGUAL) {
                        generador.genInstSinArg("", generador.CMYI);
                    } else if (tokenValue == Token.MENOROIGUAL) {
                        generador.genInstSinArg("", generador.CMNI);
                    } else if (tokenValue == Token.DISTINTO) {
                        generador.genInstSinArg("", generador.CMDG);
                    }
                } else {
                    if (tokenValue == Token.IGUAL) {
                        generador.genInstSinArg("", generador.CMIG);
                    } else if (tokenValue == Token.DISTINTO) {
                        generador.genInstSinArg("", generador.CMDG);
                    } else {
                        String t1, t2;
                        t1 = ErrorSemantico.construirMsj(tipoH.toString());
                        t2 = ErrorSemantico.construirMsj(sES.getTipoS().toString());
                        throw new ErrorSemantico(ErrorSemantico.TIPO_INCOMP, getNumeroLinea(), getNumeroColumna(), t1, t2);
                    }
                }
            } else {
                String t1, t2;
                t1 = ErrorSemantico.construirMsj(tipoH.toString());
                t2 = ErrorSemantico.construirMsj(sES.getTipoS().toString());
                throw new ErrorSemantico(ErrorSemantico.TIPO_INCOMP, getNumeroLinea(), getNumeroColumna(), t1, t2);
            }
        }
    } else {
        // lambda
        s.setTipoS(tipoH);
    }
    return s;
}
