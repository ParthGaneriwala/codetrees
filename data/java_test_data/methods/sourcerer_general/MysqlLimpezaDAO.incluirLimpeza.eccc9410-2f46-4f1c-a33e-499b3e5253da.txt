public boolean incluirLimpeza(Limpeza limpeza) throws DAOFactoryException {
    if (conn == null) {
        throw new IllegalStateException("n�o h� conex�o com o banco de dados");
    }
    if (limpeza.getPedidoId() == 0) {
        throw new IllegalArgumentException("ID Pedido limpeza inv�lido = 0");
    }
    try {
        conn.setAutoCommit(false);
    } catch (SQLException e2) {
        throw new DAOFactoryException(e2);
    }
    boolean ret = false;
    PreparedStatement stmt = null;
    String sql = "INSERT INTO limpeza (dtaLimpeza, numTermo, numLoteTermo, " + "horaInicioTermo, horaTerminoTermo, " + "cicloTermo, idFuncionario, statusLimpeza, idPedido) " + "VALUES (now(),?,?,?,?,?,?,?,?)";
    try {
        stmt = conn.prepareStatement(sql);
        stmt.setInt(1, limpeza.getNumtermo());
        stmt.setInt(2, limpeza.getNumlotetermo());
        stmt.setString(3, limpeza.getHrInicio());
        stmt.setString(4, limpeza.getHrTermino());
        stmt.setInt(5, limpeza.getCiclo());
        stmt.setInt(6, limpeza.getFuncionarioId());
        stmt.setInt(7, limpeza.getStatusPedido());
        stmt.setInt(8, limpeza.getPedidoId());
        int count = stmt.executeUpdate();
        ret = count > 0;
        int idLimpeza = MysqlNextID.getNextId(conn);
        ret = devolverMaterial(limpeza.getPedidoId());
        if (ret) {
            conn.commit();
        } else {
            throw new DAOFactoryException("N�o foi poss�vel realizar a devolu��o dos materiais");
        }
    } catch (SQLException e) {
        try {
            conn.rollback();
        } catch (SQLException e1) {
            throw new DAOFactoryException(e1);
        }
        throw new DAOFactoryException(e);
    } finally {
        if (stmt != null) {
            try {
                stmt.close();
            } catch (Exception e) {
                System.err.println(e);
                throw new DAOFactoryException(e);
            }
        }
    }
    return ret;
}
