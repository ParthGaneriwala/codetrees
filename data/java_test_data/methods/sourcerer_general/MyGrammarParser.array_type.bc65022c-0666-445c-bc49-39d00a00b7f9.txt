// $ANTLR start "array_type"
public final MyGrammarParser.array_type_return array_type() throws RecognitionException {
    MyGrammarParser.array_type_return retval = new MyGrammarParser.array_type_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token ARRAY138 = null;
    Token ECONCH139 = null;
    Token NUMBER140 = null;
    Token RET141 = null;
    Token NUMBER142 = null;
    Token DCONCH143 = null;
    Token OF144 = null;
    MyGrammarParser.simple_type_return simple_type145 = null;
    CommonTree ARRAY138_tree = null;
    CommonTree ECONCH139_tree = null;
    CommonTree NUMBER140_tree = null;
    CommonTree RET141_tree = null;
    CommonTree NUMBER142_tree = null;
    CommonTree DCONCH143_tree = null;
    CommonTree OF144_tree = null;
    RewriteRuleTokenStream stream_RET = new RewriteRuleTokenStream(adaptor, "token RET");
    RewriteRuleTokenStream stream_ECONCH = new RewriteRuleTokenStream(adaptor, "token ECONCH");
    RewriteRuleTokenStream stream_DCONCH = new RewriteRuleTokenStream(adaptor, "token DCONCH");
    RewriteRuleTokenStream stream_OF = new RewriteRuleTokenStream(adaptor, "token OF");
    RewriteRuleTokenStream stream_ARRAY = new RewriteRuleTokenStream(adaptor, "token ARRAY");
    RewriteRuleTokenStream stream_NUMBER = new RewriteRuleTokenStream(adaptor, "token NUMBER");
    RewriteRuleSubtreeStream stream_simple_type = new RewriteRuleSubtreeStream(adaptor, "rule simple_type");
    try {
        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:253:2: ( ARRAY ECONCH NUMBER RET NUMBER DCONCH OF simple_type -> ^( ARRAY_TYPE NUMBER NUMBER simple_type ) )
        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:253:4: ARRAY ECONCH NUMBER RET NUMBER DCONCH OF simple_type
        {
            ARRAY138 = (Token) match(input, ARRAY, FOLLOW_ARRAY_in_array_type2057);
            stream_ARRAY.add(ARRAY138);
            ECONCH139 = (Token) match(input, ECONCH, FOLLOW_ECONCH_in_array_type2060);
            stream_ECONCH.add(ECONCH139);
            NUMBER140 = (Token) match(input, NUMBER, FOLLOW_NUMBER_in_array_type2062);
            stream_NUMBER.add(NUMBER140);
            RET141 = (Token) match(input, RET, FOLLOW_RET_in_array_type2064);
            stream_RET.add(RET141);
            NUMBER142 = (Token) match(input, NUMBER, FOLLOW_NUMBER_in_array_type2066);
            stream_NUMBER.add(NUMBER142);
            DCONCH143 = (Token) match(input, DCONCH, FOLLOW_DCONCH_in_array_type2069);
            stream_DCONCH.add(DCONCH143);
            OF144 = (Token) match(input, OF, FOLLOW_OF_in_array_type2071);
            stream_OF.add(OF144);
            pushFollow(FOLLOW_simple_type_in_array_type2073);
            simple_type145 = simple_type();
            state._fsp--;
            stream_simple_type.add(simple_type145.getTree());
            // AST REWRITE
            // elements: NUMBER, NUMBER, simple_type
            // token labels:
            // rule labels: retval
            // token list labels:
            // rule list labels:
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", retval != null ? retval.tree : null);
            root_0 = (CommonTree) adaptor.nil();
            // 253:60: -> ^( ARRAY_TYPE NUMBER NUMBER simple_type )
            {
                // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:253:63: ^( ARRAY_TYPE NUMBER NUMBER simple_type )
                {
                    CommonTree root_1 = (CommonTree) adaptor.nil();
                    root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(ARRAY_TYPE, "ARRAY_TYPE"), root_1);
                    adaptor.addChild(root_1, stream_NUMBER.nextNode());
                    adaptor.addChild(root_1, stream_NUMBER.nextNode());
                    adaptor.addChild(root_1, stream_simple_type.nextTree());
                    adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
