public String execute(String cmdline, PrintStream out, PrintStream err) throws InsuffisantPrivilege {
    StringBuffer res = new StringBuffer();
    EcomCustomerRemote ecomCustomerBean = (EcomCustomerRemote) _context.getVar("customerBean");
    EcomAdminRemote ecomAdminBean = (EcomAdminRemote) _context.getVar("adminBean");
    Outputs currentOutput = (Outputs) _context.getVar("output");
    String currentCurrency = String.valueOf(_context.getVar("currency"));
    Collection<ProductBean> products = null;
    Collection<WarehouseLineBean> stocks = null;
    StringTokenizer st = new StringTokenizer(cmdline, " ");
    // Ignore cmd
    st.nextToken();
    // without arg : list all stores
    if (st.countTokens() == 0) {
        products = ecomAdminBean.getProducts();
        return printProductList(out, products, currentOutput);
    } else // With option
    {
        String option = st.nextToken();
        // adding
        try {
            if (option.equals("-add")) {
                if (true != _context.getVar("adminMode")) {
                    throw new InsuffisantPrivilege();
                }
                if (st.countTokens() == 3) {
                    String name = st.nextToken();
                    String description = st.nextToken();
                    int categIg = Integer.parseInt(st.nextToken());
                    int id = ecomAdminBean.createProduct(name, description, categIg);
                    res.append(_context.returnCode("Product Created with id #" + id, RESULT_ACTION.SUCCESS));
                } else {
                    res.append(_context.returnCode(Shell.INCORRECT_ARGS_NUMBER, RESULT_ACTION.FAILED));
                    err.println(Shell.INCORRECT_ARGS_NUMBER);
                }
            } else if (option.equals("-remove")) {
                if (true != _context.getVar("adminMode")) {
                    throw new InsuffisantPrivilege();
                }
                if (st.countTokens() == 1) {
                    int id = Integer.valueOf(st.nextToken());
                    ecomAdminBean.removeProduct(id);
                    res.append(_context.returnCode("Product #" + id + " deleted", RESULT_ACTION.SUCCESS));
                } else {
                    res.append(_context.returnCode(Shell.INCORRECT_ARGS_NUMBER, RESULT_ACTION.FAILED));
                    err.println(Shell.INCORRECT_ARGS_NUMBER);
                }
            } else if (option.equals("-addStock")) {
                if (true != _context.getVar("adminMode")) {
                    throw new InsuffisantPrivilege();
                }
                if (st.countTokens() == 8) {
                    if (".p".equalsIgnoreCase(st.nextToken().trim())) {
                        int productId = Integer.valueOf(st.nextToken().trim());
                        if (".s".equalsIgnoreCase(st.nextToken().trim())) {
                            int storeId = Integer.valueOf(st.nextToken().trim());
                            if (".q".equalsIgnoreCase(st.nextToken().trim())) {
                                int q = Integer.valueOf(st.nextToken().trim());
                                if (".price".equalsIgnoreCase(st.nextToken().trim())) {
                                    double price = Double.valueOf(st.nextToken().trim());
                                    ecomAdminBean.createStockLine(storeId, productId, q, price);
                                    res.append(_context.returnCode("STOCK ADDED", RESULT_ACTION.SUCCESS));
                                }
                            }
                        }
                    }
                } else {
                    err.println("\t'" + option + "' option is not known for Account Management");
                }
            } else if (option.equals("-id")) {
                if (st.countTokens() == 1) {
                    int id = Integer.valueOf(st.nextToken());
                    ProductBean product = ecomCustomerBean.getProductById(id);
                    return printProduct(out, product, currentOutput);
                } else {
                    res.append(_context.returnCode(Shell.INCORRECT_ARGS_NUMBER, RESULT_ACTION.FAILED));
                    err.println(Shell.INCORRECT_ARGS_NUMBER);
                }
            } else if (option.equalsIgnoreCase("-categ")) {
                while (st.hasMoreTokens()) {
                    int categId = Integer.valueOf(st.nextToken().trim());
                    stocks = ecomCustomerBean.getProductsByCategory(categId);
                    return printStockList(stocks, ecomCustomerBean, currentCurrency, out, currentOutput);
                }
            } else if (option.equalsIgnoreCase("-store")) {
                while (st.hasMoreTokens()) {
                    int storeId = Integer.valueOf(st.nextToken().trim());
                    stocks = ecomCustomerBean.getProductsInStore(storeId);
                    return printStockList(stocks, ecomCustomerBean, currentCurrency, out, currentOutput);
                }
            } else if (option.equalsIgnoreCase("-name")) {
                String name = String.valueOf(st.nextToken().trim());
                stocks = ecomCustomerBean.getProductsByName(name);
                return printStockList(stocks, ecomCustomerBean, currentCurrency, out, currentOutput);
            } else if (option.equalsIgnoreCase("-like")) {
                String like = String.valueOf(st.nextToken().trim());
                stocks = ecomCustomerBean.getProductsBySimilarName(like);
                return printStockList(stocks, ecomCustomerBean, currentCurrency, out, currentOutput);
            } else if (option.equalsIgnoreCase("-price")) {
                double firstRange = Double.valueOf(st.nextToken().trim());
                firstRange = ecomCustomerBean.convertToEuro(firstRange, currentCurrency);
                if (st.hasMoreTokens()) {
                    double secondRange = Double.valueOf(st.nextToken().trim());
                    secondRange = ecomCustomerBean.convertToEuro(secondRange, currentCurrency);
                    stocks = ecomCustomerBean.getProductsByPriceInterval(firstRange, secondRange);
                } else {
                    stocks = ecomCustomerBean.getProductsByByMaximumPrice(firstRange);
                }
                return printStockList(stocks, ecomCustomerBean, currentCurrency, out, currentOutput);
            }
        } catch (InsuffisantPrivilege e) {
            throw e;
        } catch (UnknownIdentifier ex) {
            res.append(_context.returnCode(ex.toString(), RESULT_ACTION.FAILED));
            err.println(ex);
        } catch (Exception ex) {
            res.append(_context.returnCode(ex.toString(), RESULT_ACTION.FAILED));
            err.println("Error with store warehouse update");
        }
    }
    return res.toString();
}
