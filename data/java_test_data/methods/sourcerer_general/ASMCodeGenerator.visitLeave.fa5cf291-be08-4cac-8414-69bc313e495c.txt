public boolean visitLeave(KeywordNode node) {
    if (node.getSymbol().isKeyword(Keyword.LEAVE) || node.getSymbol().isKeyword(Keyword.STAY) || node.getSymbol().isKeyword(Keyword.LOOP)) {
        newVoidCode(node);
        // leave stay loop �൱��print���Ƿ���һ��ֵ
        // ����һ������ ��Ӧ����void����value
        ASMCodeFragment arg1 = removeValueCode(node.child(0));
        code.append(arg1);
    } else if (node.getSymbol().isKeyword(Keyword.ROUTINE)) {
        newVoidCode(node);
        // [... pc]
        code.add(Label, RoutineTable.lookup(uniRoutineCounter).getRoutineName());
        if (RoutineTable.lookup(uniRoutineCounter).isWalrus()) {
            code.add(PushD, RunTime.FRAME_CURRETNT_SP);
            code.add(LoadI);
        } else
            code.add(PushD, "Mem-" + RoutineTable.lookup(uniRoutineCounter).getRoutineName());
        // code.add(PushD, "Mem-"+RoutineTable.lookup(uniRoutineCounter).getRoutineName());
        code.add(PushI, RoutineTable.lookup(uniRoutineCounter).getRoutineMemSize());
        code.add(Add);
        // [... addr pc]
        code.add(Exchange);
        // store pc [... ...]
        code.add(StoreI);
        // if(RoutineTable.lookup(uniRoutineCounter).isWalrus()){
        // store sp
        // }
        ASMCodeFragment arg = removeVoidCode(node.child(2).child(1).child(0));
        code.append(arg);
        // ????????????????????????????????????????????????
        if (!RoutineTable.lookup(uniRoutineCounter).isWalrus())
            code.add(Call, "$-Recursive-Detecting-Pop");
        // additional return after a return is no harm
        if (RoutineTable.lookup(uniRoutineCounter).isWalrus()) {
            code.add(PushD, RunTime.FRAME_CURRETNT_SP);
            code.add(LoadI);
        } else
            code.add(PushD, "Mem-" + RoutineTable.lookup(uniRoutineCounter).getRoutineName());
        code.add(PushI, RoutineTable.lookup(uniRoutineCounter).getRoutineMemSize());
        code.add(Add);
        // restore PC
        code.add(LoadI);
        /*
				 //push the correct result address into stack before restore the sp
				 if(RoutineTable.lookup(uniRoutineCounter).isWalrus()){
					 code.add(PushD, RunTime.FRAME_CURRETNT_SP);
					 code.add(LoadI);
				 }
				 else
					 code.add(PushD, "Mem-"+RoutineTable.lookup(uniRoutineCounter).getRoutineName());
				 //push the correct result address into stack before restore the sp
				 
				 
				 
				 
				 if(RoutineTable.lookup(uniRoutineCounter).isWalrus()){
					 //restore sp before leaving
					 code.add(PushD,RunTime.FRAME_CURRETNT_SP);
					 code.add(LoadI);
					 code.add(PushI,RoutineTable.lookup(uniRoutineCounter).getRoutineMemSize()+4);
					 code.add(Add);
					 code.add(LoadI);
					 code.add(PushD,RunTime.FRAME_CURRETNT_SP);
					 code.add(Exchange);
					 code.add(StoreI);
			
					 code.add(PushD,RunTime.FRAME_NEXT_FREE_SP);
					 code.add(LoadI);
					 code.add(PushI,RoutineTable.lookup(uniRoutineCounter).getRoutineMemSize()+8);
					 code.add(Subtract);
					 code.add(PushD,RunTime.FRAME_NEXT_FREE_SP);
					 code.add(Exchange);
					 code.add(StoreI);	 
				 }*/
        code.add(Return);
        uniRoutineCounter++;
    } else if (node.getSymbol().isKeyword(Keyword.RETURN)) {
        newVoidCode(node);
        if (node.nChildren() == 0) {
            if (!RoutineTable.lookup(uniRoutineCounter).isWalrus())
                code.add(Call, "$-Recursive-Detecting-Pop");
            if (RoutineTable.lookup(uniRoutineCounter).isWalrus()) {
                code.add(PushD, RunTime.FRAME_CURRETNT_SP);
                code.add(LoadI);
            } else
                code.add(PushD, "Mem-" + RoutineTable.lookup(uniRoutineCounter).getRoutineName());
            code.add(PushI, RoutineTable.lookup(uniRoutineCounter).getRoutineMemSize());
            code.add(Add);
            // restore PC
            code.add(LoadI);
            /*
					 //push the correct result address into stack before restore the sp
					 if(RoutineTable.lookup(uniRoutineCounter).isWalrus()){
						 code.add(PushD, RunTime.FRAME_CURRETNT_SP);
						 code.add(LoadI);
					 }
					 else
						 code.add(PushD, "Mem-"+RoutineTable.lookup(uniRoutineCounter).getRoutineName());
					 //push the correct result address into stack before restore the sp
					 
					 
					 
					 if(RoutineTable.lookup(uniRoutineCounter).isWalrus()){
						 //restore sp before leaving
						 code.add(PushD,RunTime.FRAME_CURRETNT_SP);
						 code.add(LoadI);
						 code.add(PushI,RoutineTable.lookup(uniRoutineCounter).getRoutineMemSize()+4);
						 code.add(Add);
						 code.add(LoadI);
						 code.add(PushD,RunTime.FRAME_CURRETNT_SP);
						 code.add(Exchange);
						 code.add(StoreI);
				
						 code.add(PushD,RunTime.FRAME_NEXT_FREE_SP);
						 code.add(LoadI);
						 code.add(PushI,RoutineTable.lookup(uniRoutineCounter).getRoutineMemSize()+8);
						 code.add(Subtract);
						 code.add(PushD,RunTime.FRAME_NEXT_FREE_SP);
						 code.add(Exchange);
						 code.add(StoreI);	 
					 }*/
            // ???????????????
            code.add(Return);
        } else if (node.nChildren() == 1) {
            ASMCodeFragment arg = removeValueCode(node.child(0));
            code.append(arg);
            // now the top of the stack is the return value
            if (RoutineTable.lookup(uniRoutineCounter).isWalrus()) {
                code.add(PushD, RunTime.FRAME_CURRETNT_SP);
                code.add(LoadI);
            } else
                code.add(PushD, "Mem-" + RoutineTable.lookup(uniRoutineCounter).getRoutineName());
            // code.add(PushD, "Mem-"+RoutineTable.lookup(uniRoutineCounter).getRoutineName());
            code.add(PushI, 0);
            code.add(Add);
            // [... addr]
            code.add(Exchange);
            if (// type-dependent!
            node.child(0).getType() == PrimitiveType.FLOAT)
                code.add(StoreF);
            else if (// type-dependent!
            node.child(0).getType() == PrimitiveType.INTEGER)
                // type-dependent!
                code.add(StoreI);
            else if (// type-dependent!
            node.child(0).getType() == PrimitiveType.BOOLEAN)
                code.add(StoreI);
            else if (// type-dependent!
            node.child(0).getType() == PrimitiveType.STRING)
                code.add(Call, RunTime.STRING_COPY_ROUTINE);
            // after this the stack should be like [... (address of the identifier)]
            if (!RoutineTable.lookup(uniRoutineCounter).isWalrus())
                code.add(Call, "$-Recursive-Detecting-Pop");
            // code.add(PushD, "Mem-"+RoutineTable.lookup(uniRoutineCounter).getRoutineName());
            if (RoutineTable.lookup(uniRoutineCounter).isWalrus()) {
                code.add(PushD, RunTime.FRAME_CURRETNT_SP);
                code.add(LoadI);
            } else
                code.add(PushD, "Mem-" + RoutineTable.lookup(uniRoutineCounter).getRoutineName());
            code.add(PushI, RoutineTable.lookup(uniRoutineCounter).getRoutineMemSize());
            code.add(Add);
            // restore PC
            code.add(LoadI);
            /*
					//push the correct result address into stack before restore the sp
					 if(RoutineTable.lookup(uniRoutineCounter).isWalrus()){
						 code.add(PushD, RunTime.FRAME_CURRETNT_SP);
						 code.add(LoadI);
					 }
					 else
						 code.add(PushD, "Mem-"+RoutineTable.lookup(uniRoutineCounter).getRoutineName());
					 //push the correct result address into stack before restore the sp
					 
					 
					 
					 //now the stack [... PC]
					 if(RoutineTable.lookup(uniRoutineCounter).isWalrus()){
						 //restore sp before leaving
						 code.add(PushD,RunTime.FRAME_CURRETNT_SP);
						 code.add(LoadI);
						 code.add(PushI,RoutineTable.lookup(uniRoutineCounter).getRoutineMemSize()+4);
						 code.add(Add);
						 code.add(LoadI);
						 code.add(PushD,RunTime.FRAME_CURRETNT_SP);
						 code.add(Exchange);
						 code.add(StoreI);
				
						 code.add(PushD,RunTime.FRAME_NEXT_FREE_SP);
						 code.add(LoadI);
						 code.add(PushI,RoutineTable.lookup(uniRoutineCounter).getRoutineMemSize()+8);
						 code.add(Subtract);
						 code.add(PushD,RunTime.FRAME_NEXT_FREE_SP);
						 code.add(Exchange);
						 code.add(StoreI);	 
					 }
					 */
            code.add(Return);
        // put the return value on the top of the stack
        // is the job of the routine invoacation not decl
        } else {
            error("Return syntax is wrong in code generation!!!");
        }
    } else if (node.getSymbol().isKeyword(Keyword.CALL)) {
        newVoidCode(node);
        ASMCodeFragment arg = removeValueCode(node.child(0));
        code.append(arg);
    } else {
        if (tokenFor(node).getLexeme().equals("length")) {
            int indexOfId;
            for (indexOfId = 0; indexOfId < node.nChildren(); indexOfId++) {
                if (!node.child(indexOfId).getSymbol().isPuctuation())
                    break;
            }
            if (indexOfId > 0) {
                newValueCode(node);
                ASMCodeFragment arg1 = removeAddressCode(node.child(indexOfId));
                code.append(arg1);
            } else {
                if (node.child(0).getSymbol().isTerminal(IdentifierToken.class) && node.child(0).getBinding().getNumberOfDim() > 0) {
                    newValueCode(node);
                    ASMCodeFragment arg1 = removeAddressCode(node.child(indexOfId));
                    code.append(arg1);
                } else {
                    newValueCode(node);
                    ASMCodeFragment arg1 = removeValueCode(node.child(0));
                    code.append(arg1);
                }
            }
        } else {
            newValueCode(node);
            ASMCodeFragment arg1 = removeValueCode(node.child(0));
            code.append(arg1);
        }
    }
    // opcodeForOperator(node.getOperator());
    ASMOpcode opcode = opcodeForKeyword(node);
    if (opcode == ASMOpcode.Length) {
        int n = node.nChildren();
        if (n == 1) {
            // still might be array id
            if (node.child(0).getSymbol().isTerminal(IdentifierToken.class) && node.child(0).getBinding().getNumberOfDim() != 0) {
                // array ask for the
                // upper bound of the first dimesion
                // n2
                code.add(PushI, 1 * 4);
                code.add(Add);
                code.add(LoadI);
            } else {
                // string
                // call subroutine length
                code.add(Call, "$-length-string-routine");
            }
        } else {
            // array
            if (node.child(n - 1).getSymbol().isPuctuation()) {
                // length [*] a;
                // multiple first dim
                // actually it's just loadI
                code.add(PushI, 4);
                code.add(Add);
                code.add(LoadI);
                int nDims = node.child(0).getBinding().getNumberOfDim();
                for (int i = 1; i < nDims; i++) {
                    code.add(PushD, "$-main-scope-space");
                    code.add(PushI, node.child(0).getBinding().getMemoryLocation().getOffset());
                    code.add(Add);
                    // n2
                    code.add(PushI, (i + 1) * 4);
                    code.add(Add);
                    code.add(LoadI);
                    code.add(Multiply);
                }
            } else {
                // length [][] a
                // n2
                code.add(PushI, n * 4);
                code.add(Add);
                code.add(LoadI);
            }
        }
    } else if (opcode == ASMOpcode.Leave) {
        code.add(JumpTrue, "$-loop-" + uniLoopStatementCounter + "-statement-end-" + // call subroutine length
        nestedLoopStatementCounter);
    } else if (opcode == ASMOpcode.Stay) {
        code.add(JumpFalse, "$-loop-" + uniLoopStatementCounter + "-statement-end-" + // call subroutine length
        nestedLoopStatementCounter);
    } else if (opcode == ASMOpcode.Routine) {
    } else if (opcode == ASMOpcode.Return) {
    } else if (opcode == ASMOpcode.Call) {
    } else if (opcode == ASMOpcode.Loop) {
        code.add(JumpTrue, "$-loop-" + uniLoopStatementCounter + "-statement-start-" + // call subroutine length
        nestedLoopStatementCounter);
    } else
        // type-dependent!
        code.add(opcode);
    return true;
}
