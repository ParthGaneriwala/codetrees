public RatioGroupCollection getRatioGroupCollection() {
    RatioGroupCollection lCollection = new RatioGroupCollection(DataType.MAXQUANT);
    // boolean that indicates if we have read the header
    boolean lEvidenceHeaderParsed = false;
    // hashmap with the header titles and their positions
    HashMap lHeaderMap = new HashMap();
    // boolean that indicates if we are using triple silac
    boolean lTripleSilac = false;
    // we will read the file line by line, on every line their is a peptide identification
    try {
        // get the identifications
        HashMap<Integer, DefaultPeptideIdentification> lIdentificationsMap = getIdentifications();
        int lCounter = 0;
        int lAddedCounter = 0;
        Runtime r = Runtime.getRuntime();
        r.gc();
        String[] lColumns;
        // 2.read the evidence file
        // create reader
        FileReader lReader = new FileReader(iEvidenceFile);
        LineNumberReader lnreader = new LineNumberReader(lReader);
        boolean lRatioSignificanceAFound = false;
        String line = "";
        // read it
        while ((line = lnreader.readLine()) != null) {
            if (!lEvidenceHeaderParsed) {
                // we will parse the header
                String[] lHeader = line.split("\t");
                for (int i = 0; i < lHeader.length; i++) {
                    if (lHeader[i].equalsIgnoreCase("Intensity M")) {
                        lTripleSilac = true;
                    }
                    lHeaderMap.put(lHeader[i], i);
                }
                // create the different types and components and add them to the RatioGroupCollection
                Vector<String> lTypes = new Vector<String>();
                Vector<String> lComponents = new Vector<String>();
                lTypes.add("H/L");
                lComponents.add("Light");
                lComponents.add("Heavy");
                if (lTripleSilac) {
                    lTypes.add("M/L");
                    lTypes.add("H/M");
                    lComponents.add("Medium");
                }
                lCollection.setComponentTypes(lComponents);
                lCollection.setRatioTypes(lTypes);
                // Check if we can find Significance A
                if ((Integer) lHeaderMap.get("Ratio H/L Significance(A)") != null) {
                    lRatioSignificanceAFound = true;
                    // QuantitativeValidationSingelton.getInstance().setRoverDataType(RoverSource.MAX_QUANT_NO_SIGN);
                    lCollection.setRatioGroupCollectionType(DataType.MAXQUANT_NO_SIGN);
                }
                // set the header parsed true
                lEvidenceHeaderParsed = true;
            } else {
                try {
                    lCounter = lCounter + 1;
                    if (lCounter % 50000 == 0) {
                        logger.info("Found " + lCounter + " evidence lines!");
                        r.gc();
                    }
                    lColumns = line.split("\t");
                    // set the type
                    Integer lTypeInt = (Integer) lHeaderMap.get("SILAC State");
                    boolean lSILAC = true;
                    if (lTypeInt != null) {
                        String lType = new String(lColumns[lTypeInt]);
                        if (lType.length() == 0) {
                            lSILAC = false;
                        }
                    } else {
                        Integer lRatioInt = (Integer) lHeaderMap.get("Ratio H/L");
                        if (lRatioInt >= lColumns.length) {
                            lSILAC = false;
                        } else {
                            String lRatio = new String(lColumns[lRatioInt]);
                            if (lRatio.length() == 0) {
                                lSILAC = false;
                            }
                        }
                    }
                    // only if we found a silac identification we will create  a ratio group
                    if (lSILAC && ((Integer) lHeaderMap.get("Intensity H")).intValue() < lColumns.length) {
                        // only add a ratio if we find any
                        if (!lColumns[((Integer) lHeaderMap.get("Intensity L")).intValue()].equalsIgnoreCase("")) {
                            MaxQuantRatioGroup lGroup = new MaxQuantRatioGroup(lCollection, Double.valueOf(lColumns[((Integer) lHeaderMap.get("PEP")).intValue()]), Integer.valueOf(lColumns[((Integer) lHeaderMap.get("id")).intValue()]));
                            lGroup.setPeptideSequence(new String(lColumns[((Integer) lHeaderMap.get("Sequence")).intValue()]));
                            // get the different identification ids
                            String lMsmsIdsString = new String(lColumns[((Integer) lHeaderMap.get("MS/MS IDs")).intValue()]);
                            String[] lMsmss = lMsmsIdsString.split(";");
                            for (int i = 0; i < lMsmss.length; i++) {
                                int lMsms = Integer.valueOf(lMsmss[i]);
                                DefaultPeptideIdentification lIdentification = lIdentificationsMap.get(lMsms);
                                if (lIdentification != null) {
                                    lGroup.addIdentification(lIdentification, lIdentification.getType());
                                } else {
                                    System.out.println("Error" + lMsmss[i]);
                                }
                            }
                            // create a vector with the absolute intensities
                            Vector<Double> lAbsoluteIntensityVector = new Vector<Double>();
                            if (lColumns[((Integer) lHeaderMap.get("Intensity L")).intValue()].length() > 0) {
                                lAbsoluteIntensityVector.add(Double.valueOf(lColumns[((Integer) lHeaderMap.get("Intensity L")).intValue()]));
                                lAbsoluteIntensityVector.add(Double.valueOf(lColumns[((Integer) lHeaderMap.get("Intensity H")).intValue()]));
                            } else {
                                lAbsoluteIntensityVector.add(0.0);
                                lAbsoluteIntensityVector.add(0.0);
                            }
                            // get the ratio(s)
                            if (((String) lColumns[((Integer) lHeaderMap.get("Ratio H/L")).intValue()]).length() != 0) {
                                MaxQuantRatio lHLRatio;
                                if (lRatioSignificanceAFound) {
                                    lHLRatio = new MaxQuantRatio(Double.valueOf(lColumns[((Integer) lHeaderMap.get("Ratio H/L")).intValue()]), Double.valueOf(lColumns[((Integer) lHeaderMap.get("Ratio H/L Normalized")).intValue()]), "H/L", true, lGroup);
                                } else {
                                    lHLRatio = new MaxQuantRatio(Double.valueOf(lColumns[((Integer) lHeaderMap.get("Ratio H/L")).intValue()]), Double.valueOf(lColumns[((Integer) lHeaderMap.get("Ratio H/L Normalized")).intValue()]), "H/L", true, lGroup);
                                }
                                lGroup.addRatio(lHLRatio);
                            }
                            // find the other ratios if it's triple silac
                            if (lTripleSilac) {
                                if (((String) lColumns[((Integer) lHeaderMap.get("Ratio H/M")).intValue()]).length() != 0) {
                                    MaxQuantRatio lHMRatio;
                                    if (lRatioSignificanceAFound) {
                                        lHMRatio = new MaxQuantRatio(Double.valueOf(lColumns[((Integer) lHeaderMap.get("Ratio H/M")).intValue()]), Double.valueOf(lColumns[((Integer) lHeaderMap.get("Ratio H/M Normalized")).intValue()]), "H/M", true, lGroup);
                                    } else {
                                        lHMRatio = new MaxQuantRatio(Double.valueOf(lColumns[((Integer) lHeaderMap.get("Ratio H/M")).intValue()]), Double.valueOf(lColumns[((Integer) lHeaderMap.get("Ratio H/M Normalized")).intValue()]), "H/M", true, lGroup);
                                    }
                                    lGroup.addRatio(lHMRatio);
                                }
                                if (((String) lColumns[((Integer) lHeaderMap.get("Ratio M/L")).intValue()]).length() != 0) {
                                    MaxQuantRatio lMLRatio;
                                    if (lRatioSignificanceAFound) {
                                        lMLRatio = new MaxQuantRatio(Double.valueOf(lColumns[((Integer) lHeaderMap.get("Ratio M/L")).intValue()]), Double.valueOf(lColumns[((Integer) lHeaderMap.get("Ratio M/L Normalized")).intValue()]), "M/L", true, lGroup);
                                    } else {
                                        lMLRatio = new MaxQuantRatio(Double.valueOf(lColumns[((Integer) lHeaderMap.get("Ratio M/L")).intValue()]), Double.valueOf(lColumns[((Integer) lHeaderMap.get("Ratio M/L Normalized")).intValue()]), "M/L", true, lGroup);
                                    }
                                    lGroup.addRatio(lMLRatio);
                                }
                                lAbsoluteIntensityVector.add(Double.valueOf(lColumns[((Integer) lHeaderMap.get("Intensity M")).intValue()]));
                            }
                            // set the absolute intensities
                            Double[] lAbsoluteIntensities = new Double[lAbsoluteIntensityVector.size()];
                            lAbsoluteIntensityVector.toArray(lAbsoluteIntensities);
                            lGroup.setRatioGroupAbsoluteIntensities(lAbsoluteIntensities);
                            lGroup.setRazorProteinAccession(new String(lColumns[((Integer) lHeaderMap.get("Leading Razor Protein")).intValue()]));
                            lAddedCounter = lAddedCounter + 1;
                            // System.out.println(lCollection.size() + " " + Integer.valueOf(lColumns[(Integer) lHeaderMap.get("id")]) + " " + lCounter + " " + lAddedCounter);
                            // add the ratiogroup to the collection
                            lCollection.add(lGroup);
                        }
                    }
                } catch (NumberFormatException e) {
                // logger.info("Problem extracting information from the following lineid (No ratio could be detected):" + line.substring(0, line.indexOf("\t")));
                }
            }
        }
        lnreader.close();
        lIdentificationsMap = null;
    } catch (FileNotFoundException e) {
        iFlamable.passHotPotato(new Throwable("Problem reading the maxquant files"));
        logger.error(e.getMessage(), e);
    } catch (IOException e) {
        iFlamable.passHotPotato(new Throwable("Problem reading the maxquant files"));
        logger.error(e.getMessage(), e);
    } catch (Exception e) {
        iFlamable.passHotPotato(new Throwable("Problem reading the maxquant files"));
        logger.error(e.getMessage(), e);
    }
    return lCollection;
}
