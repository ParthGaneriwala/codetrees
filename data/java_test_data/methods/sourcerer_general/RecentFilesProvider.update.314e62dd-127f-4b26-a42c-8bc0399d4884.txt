// }}}
public void update(JMenu menu) {
    final View view = GUIUtilities.getView(menu);
    // {{{ ActionListener...
    ActionListener actionListener = new ActionListener() {

        public void actionPerformed(ActionEvent evt) {
            jEdit.openFile(view, evt.getActionCommand());
            view.getStatus().setMessage(null);
        }
    };
    // }}}
    // {{{ MouseListener...
    /*
		MouseListener mouseListener = new MouseAdapter()
		{
			public void mouseEntered(MouseEvent evt)
			{
				view.getStatus().setMessage(
					((JMenuItem)evt.getSource())
					.getActionCommand());
			}

			public void mouseExited(MouseEvent evt)
			{
				view.getStatus().setMessage(null);
			}
		};
		*/
    // }}}
    // {{{ ChangeListener...
    ChangeListener changeListener = new ChangeListener() {

        public void stateChanged(ChangeEvent e) {
            JMenuItem menuItem = (JMenuItem) e.getSource();
            view.getStatus().setMessage(menuItem.isArmed() ? menuItem.getActionCommand() : null);
        }
    };
    // }}}
    List<BufferHistory.Entry> recentVector = BufferHistory.getHistory();
    if (recentVector.isEmpty()) {
        JMenuItem menuItem = new JMenuItem(jEdit.getProperty("no-recent-files.label"));
        menuItem.setEnabled(false);
        menu.add(menuItem);
        return;
    }
    final List<JMenuItem> menuItems = new ArrayList<JMenuItem>();
    final JTextField text = new JTextField();
    text.setToolTipText(jEdit.getProperty("recent-files.textfield.tooltip"));
    menu.add(text);
    text.addKeyListener(new KeyAdapter() {

        public void keyReleased(KeyEvent e) {
            String typedText = text.getText();
            for (JMenuItem tempMenuItem : menuItems) {
                if (typedText.length() == 0) {
                    tempMenuItem.setEnabled(true);
                } else {
                    String fileName = tempMenuItem.getText();
                    boolean matchesStart = fileName.toLowerCase().startsWith(typedText.toLowerCase());
                    tempMenuItem.setEnabled(matchesStart);
                }
            }
        }
    });
    boolean sort = jEdit.getBooleanProperty("sortRecent");
    int maxItems = jEdit.getIntegerProperty("menu.spillover", 20);
    Iterator<BufferHistory.Entry> iter = recentVector.iterator();
    while (iter.hasNext()) {
        String path = iter.next().path;
        JMenuItem menuItem = new JMenuItem(MiscUtilities.getFileName(path));
        menuItem.setActionCommand(path);
        menuItem.addActionListener(actionListener);
        // menuItem.addMouseListener(mouseListener);
        menuItem.addChangeListener(changeListener);
        menuItem.setIcon(FileCellRenderer.fileIcon);
        menuItems.add(menuItem);
        if (!sort) {
            if (menu.getMenuComponentCount() >= maxItems && iter.hasNext()) {
                JMenu newMenu = new JMenu(jEdit.getProperty("common.more"));
                menu.add(newMenu);
                menu = newMenu;
            }
            menu.add(menuItem);
        }
    }
    JMenuItem menuItem = new JMenuItem(jEdit.getProperty("clear-recent-files.label"));
    menuItem.addActionListener(new ActionListener() {

        public void actionPerformed(ActionEvent e) {
            BufferHistory.clear();
        }
    });
    menu.addSeparator();
    menu.add(menuItem);
}
