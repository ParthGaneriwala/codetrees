void compute() {
    m_next = new short[0];
    m_check = new short[0];
    m_default = resize(m_default, m_dfaCopy.size(), SHORT_MIN);
    m_base = resize(m_base, m_dfaCopy.size(), (short) 0);
    processDFAStates();
    // 
    // expand the base/default array to count error vectors
    // 
    m_base = resize(m_base, m_dfaCopy.size() + m_errors.size(), (short) 0);
    m_default = resize(m_default, m_dfaCopy.size() + m_errors.size(), SHORT_MIN);
    // 
    if (m_ecsError.getGroupCount() <= 1)
        m_useMeta = false;
    else
        m_useMeta = true;
    // 
    if (!m_useMeta && !m_useStateDiff)
        m_useError = false;
    else
        m_useError = true;
    // 
    if (m_useError)
        processErrorStates();
    // 
    // fill the table
    // 
    doFillStates();
    // 
    // check if we really needs m_default
    // 
    m_useDefault = false;
    for (int i = 0; i < m_default.length; ++i) if (m_default[i] != SHORT_MIN) {
        m_useDefault = true;
        break;
    }
    if (!m_useDefault)
        m_default = new short[0];
    // 
    // check if the indices at the end are all valid
    // 
    int expand;
    if (m_useDefault)
        // reserve space for default error state
        expand = m_ecsError.getGroupCount();
    else
        expand = 0;
    for (int i = m_next.length - m_rowSize; i < m_next.length; ++i) {
        if (i < 0)
            i = 0;
        if (m_check[i] == SHORT_MIN)
            continue;
        if (m_check[i] < m_dfaCopy.size()) {
            if (m_base[m_check[i]] + m_rowSize > m_next.length + expand) {
                expand = m_base[m_check[i]] + m_rowSize - m_next.length;
            }
        } else {
            if (m_base[m_check[i]] + m_ecsError.getGroupCount() > m_next.length + expand) {
                expand = m_base[m_check[i]] + m_ecsError.getGroupCount() - m_next.length;
            }
        }
    }
    short defaultError = (short) m_base.length;
    if (m_useDefault) {
        m_default = resize(m_default, m_default.length + 1, defaultError);
        m_base = resize(m_base, m_base.length + 1, (short) m_next.length);
    }
    m_next = resize(m_next, m_next.length + expand, (short) 0);
    m_check = resize(m_check, m_next.length, defaultError);
    // 
    if (m_useDefault) {
        if (m_useError)
            for (int i = 0; i < m_default.length; ++i) {
                if (m_default[i] == SHORT_MIN)
                    m_default[i] = defaultError;
            }
        else
            for (int i = 0; i < m_default.length; ++i) {
                if (m_default[i] == SHORT_MIN)
                    m_default[i] = 0;
                else
                    m_default[i] = m_errors.get(m_default[i] - m_dfaCopy.size()).getDefaultValue();
            }
    } else
        m_default = null;
    // 
    for (int i = 0; i < m_check.length; ++i) {
        if (m_check[i] == SHORT_MIN)
            m_check[i] = defaultError;
        if (m_next[i] == SHORT_MIN)
            m_next[i] = 0;
    }
}
