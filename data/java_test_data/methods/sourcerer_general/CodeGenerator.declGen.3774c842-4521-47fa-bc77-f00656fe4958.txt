private void declGen(SynNode node) {
    if (node != null) {
        if (node instanceof FuncDeclNode) {
            FuncDeclNode temp = (FuncDeclNode) node;
            String tableName = temp.getName() + FuncSymbol.getFuncSignatureString(FuncSymbol.getParamsType(temp));
            this.funcLoc.put(temp.getName(), Emit.emitLoc());
            SymTable previousTable = this.currentTable;
            SymTable newTable = Tables.lookupSymTable(this.tables.get(Analyzer.GLOBAL_TABLE).getName() + "." + tableName, this.tables);
            if (newTable != null) {
                this.currentScope = temp.getName();
                newTable.setActive(true);
                this.currentTable = newTable;
            }
            if (trace)
                this.codeBody.append(Emit.comment("Inicio de Funcion '" + temp.getName() + "'") + "\n");
            this.codeGen(temp.getChild(FuncDeclNode.PARAMS));
            this.codeGen(temp.getChild(FuncDeclNode.BODY));
            this.codeBody.append(Emit.opr(Emit.RET_OPR));
            if (trace)
                this.codeBody.append("\t" + Emit.comment("Regreso de funcion") + "\n");
            else
                this.codeBody.append("\n");
            if (trace)
                this.codeBody.append(Emit.comment("Fin de Funcion '" + temp.getName() + "'") + "\n");
            if (newTable != null) {
                newTable.setActive(false);
                this.currentTable = previousTable;
            }
        } else if (node instanceof ParamNode) {
            ParamNode temp = (ParamNode) node;
            this.codeBody.append(Emit.sto(temp.getName()));
            if (trace)
                this.codeBody.append("\t" + Emit.comment("Parametro '" + temp.getName() + "'") + "\n");
            else
                this.codeBody.append("\n");
        } else if (node instanceof VarDeclNode) {
            VarDeclNode temp = (VarDeclNode) node;
            Symbol vs = Tables.lookupVarSymbol(temp.getName(), true, this.tables);
            if (vs != null)
                this.addVar(vs.getName(), vs.getType(), this.currentScope);
        }
    }
}
