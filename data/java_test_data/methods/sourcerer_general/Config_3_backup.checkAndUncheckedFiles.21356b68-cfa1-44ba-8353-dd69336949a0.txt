// GEN-LAST:event_backupSetTableMouseExited
public void checkAndUncheckedFiles() {
    synchronized (this) {
        int selectRow = backupSetTable.getSelectedRow();
        int selectCol = backupSetTable.getSelectedColumn();
        if (selectCol == 0) {
            boolean bb = false;
            SettingsXml setting = new SettingsXml();
            // setting.setQuota(2.0);
            quota = setting.getQuota();
            totalFilesCount = 0;
            usedSize = 0;
            if ((backupSetTable.getValueAt(selectRow, 0)).equals(bb)) {
                tableModelArray[selectRow][0] = "false";
                for (int j = 0; j < Files.length; j++) {
                    if (tableModelArray[j][0] != null) {
                        if ((tableModelArray[j][0]).equalsIgnoreCase("true")) {
                            totalFilesCount = totalFilesCount + Long.parseLong(tableModelArray[j][2]);
                            usedSize = usedSize + Long.parseLong(tableModelArray[j][3]);
                            model.setValueAt(true, j, 0);
                        } else {
                            tableModelArray[j][0] = "false";
                            model.setValueAt(false, j, 0);
                        }
                    }
                }
                filesize = 0;
                filesize = Long.parseLong(tableModelArray[selectRow][3]);
                updateTotalFile = Long.parseLong(tableModelArray[selectRow][2]);
                // filesize = getFileSize(Files[selectRow]);
                // usedSize = usedSize - filesize;
                // totalFilesCount = totalFilesCount - updateTotalFile;
                displayValues(totalFilesCount, usedSize, quota);
            } else {
                tableModelArray[selectRow][0] = "true";
                for (int j = 0; j < Files.length; j++) {
                    if (tableModelArray[j][0] != null) {
                        if ((tableModelArray[j][0]).equalsIgnoreCase("true")) {
                            totalFilesCount = totalFilesCount + Long.parseLong(tableModelArray[j][2]);
                            usedSize = usedSize + Long.parseLong(tableModelArray[j][3]);
                            model.setValueAt(true, j, 0);
                        } else {
                            tableModelArray[j][0] = "false";
                            model.setValueAt(false, j, 0);
                        }
                    }
                }
                filesize = 0;
                filesize = Long.parseLong(tableModelArray[selectRow][3]);
                updateTotalFile = Long.parseLong(tableModelArray[selectRow][2]);
                // filesize = getFileSize(Files[selectRow]);
                // usedSize = usedSize + filesize;
                // backupSetTable.getValueAt(selectRow,2);
                // totalFilesCount = totalFilesCount + updateTotalFile;
                displayValues(totalFilesCount, usedSize, quota);
            }
        }
    }
}
