public void testAddRemoveWithDoubleClick() throws ComponentNotFoundException, MultipleComponentsFoundException {
    // Initial state - empty ?
    EquipmentList<Equipment> equipmentList = getPerson().getEquipment();
    ListModel catalogModel = catalogItemsList.getModel();
    assertEquals(0, equipmentList.size());
    assertEquals(0, selectedItemsList.getModel().getSize());
    assertTrue(catalogModel.getSize() > 0);
    double weightAdded = 0;
    double costAdded = 0;
    // Add the items in
    int listSize = equipmentList.size();
    for (int i = 0; i < NUMBER_OF_ITEMS; i++) {
        int idx = random.nextInt(catalogModel.getSize());
        Equipment selected = (Equipment) catalogModel.getElementAt(idx);
        catalogItemsList.setSelectedIndex(idx);
        tester.delay(75);
        selector.doQuickAdd(idx);
        int added = equipmentList.size() - listSize;
        listSize = equipmentList.size();
        weightAdded = weightAdded + (selected.getWeight() * added);
        costAdded = costAdded + (selected.getCost() * added);
        assertEquals(Math.round(weightAdded), Math.round(getPerson().getCarriedWeight()));
        assertEquals(Math.round(costAdded), Math.round(getPerson().getEquipmentCost()));
    }
    // Remove the items in
    while (equipmentList.size() > 0) {
        int idx = random.nextInt(equipmentList.getSize());
        Equipment selected = equipmentList.get(idx);
        selectedItemsList.setSelectedIndex(idx);
        tester.delay(75);
        selector.doQuickRemove(idx);
        weightAdded = weightAdded - selected.getWeight();
        costAdded = costAdded - selected.getCost();
        assertEquals(equipmentList.getWeightTotal(), getPerson().getCarriedWeight());
        assertEquals(equipmentList.getCostTotal(), getPerson().getEquipmentCost());
    }
}
