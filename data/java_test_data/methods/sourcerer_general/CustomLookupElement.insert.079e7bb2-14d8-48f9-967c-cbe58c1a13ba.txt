public boolean insert(Connection db) throws SQLException {
    if (tableName == null) {
        throw new SQLException("Table name not specified");
    }
    if (this.size() == 0) {
        throw new SQLException("Fields not specified");
    }
    String seqName = null;
    if (id < 0) {
        if (this.getUniqueField() != null && !"".equals(this.getUniqueField().trim())) {
            seqName = getPostgresSeqName(tableName, getUniqueField());
            id = DatabaseUtils.getNextSeq(db, seqName, id);
        }
    }
    // tableName = DatabaseUtils.getTableName(db, tableName);
    StringBuffer sql = new StringBuffer();
    sql.append("INSERT INTO " + tableName + " ");
    sql.append("(");
    if (this.getUniqueField() != null && id > -1) {
        sql.append(this.getUniqueField() + ", ");
    }
    Iterator fields = this.keySet().iterator();
    while (fields.hasNext()) {
        sql.append(DatabaseUtils.parseReservedWord(db, (String) fields.next()));
        if (fields.hasNext()) {
            sql.append(", ");
        }
    }
    sql.append(") VALUES (");
    if (this.getUniqueField() != null && id > -1) {
        sql.append("?, ");
    }
    for (int i = 0; i < this.size(); i++) {
        sql.append("?");
        if (i < this.size() - 1) {
            sql.append(",");
        }
    }
    sql.append(")");
    PreparedStatement pst = db.prepareStatement(sql.toString());
    int paramCount = 0;
    if (this.getUniqueField() != null && id > -1) {
        pst.setInt(++paramCount, id);
    }
    Iterator paramters = this.keySet().iterator();
    while (paramters.hasNext()) {
        String paramName = ((String) paramters.next());
        CustomLookupColumn thisColumn = this.get(paramName);
        // required, then the corresponding "else if" needs to be added.
        if (thisColumn.getType() == java.sql.Types.CHAR || thisColumn.getType() == java.sql.Types.VARCHAR || thisColumn.getType() == java.sql.Types.LONGVARCHAR) {
            pst.setString(++paramCount, thisColumn.getValue());
        } else if (thisColumn.getType() == java.sql.Types.INTEGER) {
            DatabaseUtils.setInt(pst, ++paramCount, StringUtils.hasText(thisColumn.getValue()) ? Integer.parseInt(thisColumn.getValue()) : -1);
        } else if (thisColumn.getType() == java.sql.Types.DOUBLE) {
            DatabaseUtils.setDouble(pst, ++paramCount, StringUtils.hasText(thisColumn.getValue()) ? Double.parseDouble(thisColumn.getValue()) : -1.0);
        } else if (thisColumn.getType() == java.sql.Types.BOOLEAN || thisColumn.getType() == java.sql.Types.BIT) {
            pst.setBoolean(++paramCount, StringUtils.hasText(thisColumn.getValue()) ? DatabaseUtils.parseBoolean(thisColumn.getValue()) : false);
        } else if (thisColumn.getType() == java.sql.Types.TIMESTAMP) {
            DatabaseUtils.setTimestamp(pst, ++paramCount, StringUtils.hasText(thisColumn.getValue()) ? DateUtils.parseTimestampString(thisColumn.getValue()) : new java.sql.Timestamp(System.currentTimeMillis()));
        }
    }
    pst.execute();
    pst.close();
    if (id < 0) {
        if (this.getUniqueField() != null && !"".equals(this.getUniqueField().trim())) {
            id = DatabaseUtils.getCurrVal(db, seqName, id);
        }
    }
    return true;
}
