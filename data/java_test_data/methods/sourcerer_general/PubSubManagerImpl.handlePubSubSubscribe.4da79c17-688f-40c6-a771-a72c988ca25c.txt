private Iq handlePubSubSubscribe(JID from, XmlStanza stanza, Iq iq, PubSubExtension pubSubExtension) {
    Iq iqResponse = null;
    Iq.Type type = iq.getType();
    if (type != Iq.Type.set) {
        iqResponse = PacketUtils.createErrorIq(iq);
        iqResponse.setError(new XmppError(XmppError.Condition.bad_request));
        if (iqResponse.getFrom() == null) {
            iqResponse.setFrom(new JID(null, getSubDomain(), null));
        }
        return iqResponse;
    }
    PubSubSubscribe pubSubSubscribe = (PubSubSubscribe) stanza;
    String node = pubSubSubscribe.getNode();
    JID subscriberJid = pubSubSubscribe.getSubscriberJid();
    if (!from.equalsWithBareJid(subscriberJid)) {
        iqResponse = PacketUtils.createErrorIq(iq);
        XmppError error = new XmppError(XmppError.Condition.bad_request);
        error.addOtherCondition("invalid-jid", "http://jabber.org/protocol/pubsub#errors");
        iqResponse.setError(error);
    } else {
        try {
            // TODO check case sentity
            String jid = subscriberJid.toPrepedBareJID();
            PubSubSubscription pubSubSubscription = pubSubEngine.subscribeNode(jid, node);
            DataForm configForm = null;
            List<XmlStanza> stanzas = pubSubExtension.getStanzas();
            if (stanzas.size() > 1) {
                PubSubOptions options = (PubSubOptions) stanzas.get(1);
                DataForm dataForm = options.getDataForm();
                Map<String, Object> config = new HashMap<String, Object>();
                if (dataForm != null && dataForm.getType() == DataForm.Type.submit) {
                    for (FormField field : dataForm.getFields()) {
                        String var = field.getVariable();
                        if ("pubsub#deliver".equals(var)) {
                            String valueStr = field.getValues().next();
                            int value = parseBoolean(valueStr);
                            config.put("deliver", value);
                        } else if ("pubsub#digest".equals(var)) {
                            String valueStr = field.getValues().next();
                            int value = parseBoolean(valueStr);
                            config.put("digest", value);
                        } else if ("pubsub#digest_frequency".equals(var)) {
                            String valueStr = field.getValues().next();
                            config.put("digest_frequency", Integer.parseInt(valueStr));
                        } else if ("pubsub#expire".equals(var)) {
                            String valueStr = field.getValues().next();
                            config.put("expire", Integer.parseInt(valueStr));
                        } else if ("pubsub#include_body".equals(var)) {
                            String valueStr = field.getValues().next();
                            int value = parseBoolean(valueStr);
                            config.put("includeBody", value);
                        } else if ("pubsub#show-values".equals(var)) {
                            Iterator<String> it = field.getValues();
                            StringBuilder value = new StringBuilder();
                            while (it.hasNext()) {
                                value.append(it.next() + ";");
                            }
                            config.put("showValues", value);
                        } else if ("pubsub#subscription_depth".equals(var)) {
                            String value = field.getValues().next();
                            config.put("subscriptionDepth", value);
                        }
                    }
                    pubSubEngine.updateSubscriptionConfigure(jid, node, pubSubSubscription.getSubId(), config);
                    configForm = dataForm;
                    configForm.setType(DataForm.Type.result);
                }
            }
            iqResponse = PacketUtils.createResultIq(iq);
            PubSubExtension pubSubExtensionResponse = new PubSubExtension(PubSubExtension.NAMESPACE);
            PubSubSubscriptionItem item = new PubSubSubscriptionItem(pubSubSubscription.getNodeId(), pubSubSubscription.getJid(), PubSubSubscriptionItem.SubscriptionType.valueOf(pubSubSubscription.getSubscription().name()));
            item.setSubId(pubSubSubscription.getSubId());
            pubSubExtensionResponse.addStanza(item);
            if (configForm != null) {
                pubSubExtensionResponse.addStanza(configForm);
            }
            iqResponse.addExtension(pubSubExtensionResponse);
        } catch (NodeNotExistException e) {
            iqResponse = PacketUtils.createErrorIq(iq);
            iqResponse.setError(new XmppError(XmppError.Condition.item_not_found));
        } catch (TooManySubscriptionsException e) {
            iqResponse = PacketUtils.createErrorIq(iq);
            XmppError error = new XmppError(XmppError.Condition.policy_violation);
            error.addOtherCondition("too-many-subscriptions", "http://jabber.org/protocol/pubsub#errors");
            iqResponse.setError(error);
        } catch (Exception e) {
            // TODO
            e.printStackTrace();
            iqResponse = PacketUtils.createErrorIq(iq);
            iqResponse.setError(new XmppError(XmppError.Condition.internal_server_error));
        }
    }
    return iqResponse;
}
