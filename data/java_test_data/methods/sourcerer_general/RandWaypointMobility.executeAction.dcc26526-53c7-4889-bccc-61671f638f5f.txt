private void executeAction(Node node) {
    DynamicCoordinates coordProt = (DynamicCoordinates) node.getProtocol(coordPid);
    MobilitySpeed mSpeed = (MobilitySpeed) node.getProtocol(speedPid);
    switch(status) {
        case STOP:
            // controllo se ho finito di stare fermo
            if (stopRuns != 0) {
                // posso muovermi
                // diminuisco il numero di runs di stop
                stopRuns--;
                break;
            } else {
                status = STARTED;
            }
        case STARTED:
            // System.out.println("parto da "+ coordProt.getX() + coordProt.getY());
            // generate future coordinates
            coordProt.setFutureX(CommonState.r.nextDouble());
            coordProt.setFutureY(CommonState.r.nextDouble());
            // System.out.println("voglio arrivare in "+ coordProt.getFutureX() +" "+ coordProt.getFutureY());
            double speedRandom = mSpeed.generateRandomSpeed();
            // System.out.println("con velocità "+speedRandom);
            mSpeed.setCurrentSpeed(speedRandom);
            double distanceInARun = mSpeed.getCurrentSpeed();
            double distance = getEuclideanDistance(coordProt);
            double nRuns = distance / distanceInARun;
            // System.out.println("distanza di "+distance + " in "+nRuns + " runs, ogni run una distanza di "+ distanceInARun);
            double distanceX = EuclideanDistance.getDistanceMonoDimensional(coordProt.getX(), coordProt.getFutureX());
            double distanceY = EuclideanDistance.getDistanceMonoDimensional(coordProt.getY(), coordProt.getFutureY());
            distanceInARunX = distanceX / nRuns;
            distanceInARunY = distanceY / nRuns;
            // System.out.println("quindi ogni run in x mi muovo di "+ distanceInARunX + " in y di " +distanceInARunY);
            status = MOVED;
        case MOVED:
            // distance to the two dimensions in this moment
            double newDistanceX = EuclideanDistance.getDistanceMonoDimensional(coordProt.getX(), coordProt.getFutureX());
            double newDistanceY = EuclideanDistance.getDistanceMonoDimensional(coordProt.getY(), coordProt.getFutureY());
            // se la distanza dei due punti ora è minore di quella che dovrei aggiungere allora sono arrivata
            if (newDistanceX <= distanceInARunX && newDistanceY <= distanceInARunY) {
                distanceInARunX = newDistanceX;
                distanceInARunY = newDistanceY;
                this.status = ARRIVED;
            }
            // System.out.println("mi muovo! "+newDistanceX + " " +newDistanceY);
            moveIn(coordProt, distanceInARunX, distanceInARunY);
            // moveIn(coordProt, coordProt.getY(), coordProt.getFutureY(), );
            if (status != ARRIVED)
                break;
        case ARRIVED:
            // decido quanti run il nodo dovrà stare fermo
            this.stopRuns = (int) (MIN_STOP + (MAX_STOP - MIN_STOP) * Math.random());
            status = STOP;
            // reset future coordinates
            coordProt.resetFutureCoord();
            // reset the distances to add at x and y each run
            resetDistance();
    }
}
