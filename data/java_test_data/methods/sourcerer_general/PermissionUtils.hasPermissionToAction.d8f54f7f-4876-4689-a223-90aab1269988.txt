public static boolean hasPermissionToAction(ServletRequest request, HttpSession session, String permission, String includeIf, String objectName) {
    // Use the object name specified, or use the default here
    String thisObjectName = objectName;
    if (thisObjectName == null) {
        thisObjectName = "project";
    }
    try {
        // Find the project to check for permissions...
        Project thisProject = null;
        // Check the current portlet first
        PortletRequest renderRequest = (PortletRequest) request.getAttribute(org.apache.pluto.tags.Constants.PORTLET_REQUEST);
        if (renderRequest != null) {
            // Get the requested object
            Object object = null;
            int dotPos = thisObjectName.indexOf(".");
            if (dotPos > -1) {
                // Get the base object from the request
                String currentObject = thisObjectName.substring(0, dotPos);
                object = renderRequest.getAttribute(currentObject);
                // Get the parsed object
                currentObject = thisObjectName.substring(dotPos + 1);
                object = ObjectUtils.getObject(object, currentObject);
                thisProject = (Project) object;
            } else {
                thisProject = (Project) renderRequest.getAttribute(thisObjectName);
            }
            if (thisProject == null && objectName == null) {
                thisProject = PortalUtils.getProject(renderRequest);
            }
        }
        // Check the request object
        if (thisProject == null) {
            // Get the requested object
            Object object = null;
            int dotPos = thisObjectName.indexOf(".");
            if (dotPos > -1) {
                // Get the base object from the request
                String currentObject = thisObjectName.substring(0, dotPos);
                object = request.getAttribute(currentObject);
                // Get the parsed object
                currentObject = thisObjectName.substring(dotPos + 1);
                object = ObjectUtils.getObject(object, currentObject);
                thisProject = (Project) object;
            } else {
                thisProject = (Project) request.getAttribute(thisObjectName);
            }
        }
        // Deny if not found
        if (thisProject == null) {
            LOG.warn("Project is null");
            return false;
        }
        // Check this user's permissions
        User thisUser = null;
        // Check the portlet
        if (thisUser == null && renderRequest != null) {
            thisUser = PortalUtils.getUser(renderRequest);
        }
        // Check the session object
        if (thisUser == null) {
            thisUser = (User) session.getAttribute(Constants.SESSION_USER);
        }
        // Deny if not found
        if (thisUser == null) {
            return false;
        }
        // Multiple permissions to check
        boolean doCheck = true;
        String thisPermission = null;
        StringTokenizer st = new StringTokenizer(permission, ",");
        while (st.hasMoreTokens() || doCheck) {
            doCheck = false;
            if (st.hasMoreTokens()) {
                thisPermission = st.nextToken();
            } else {
                thisPermission = permission;
            }
            if (NONE.equals(includeIf)) {
                if (ProjectUtils.hasAccess(thisProject.getId(), thisUser, thisPermission)) {
                    return false;
                }
            } else if (ANY.equals(includeIf)) {
                if (ProjectUtils.hasAccess(thisProject.getId(), thisUser, thisPermission)) {
                    return true;
                }
            } else {
                if (!ProjectUtils.hasAccess(thisProject.getId(), thisUser, thisPermission)) {
                    return false;
                }
            }
        }
        // If the above didn't trigger, then go with the default
        if (NONE.equals(includeIf)) {
            return true;
        } else if (ANY.equals(includeIf)) {
            return false;
        } else {
            return true;
        }
    } catch (Exception e) {
        LOG.error("hasPermissionToAction", e);
        return false;
    }
}
