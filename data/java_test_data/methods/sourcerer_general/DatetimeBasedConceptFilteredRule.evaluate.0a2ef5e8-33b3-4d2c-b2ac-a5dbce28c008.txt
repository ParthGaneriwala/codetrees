@Override
protected Result evaluate(final LogicContext context, final Integer patientId, final Map<String, Object> parameters) {
    Result result = new Result();
    Object conceptObjects = parameters.get(EvaluableConstants.OBS_CONCEPT);
    Map<Concept, Integer> conceptNamePositions = searchPositions(conceptObjects);
    ObsWithRestrictionRule obsWithRestrictionRule = new ObsWithStringRestrictionRule();
    Result obsResults = obsWithRestrictionRule.eval(context, patientId, parameters);
    Map<Date, Result[]> obsResultDates = new HashMap<Date, Result[]>();
    for (Result obsResult : obsResults) {
        Obs obs = (Obs) obsResult.getResultObject();
        Date obsDatetime = obs.getObsDatetime();
        // see if we already have obs array for this date
        Result[] obsResultDate = obsResultDates.get(obsDatetime);
        if (obsResultDate == null) {
            obsResultDate = new Result[CollectionUtils.size(conceptNamePositions)];
            obsResultDates.put(obsDatetime, obsResultDate);
        }
        // search the concept in the concept ordering map
        Integer position = conceptNamePositions.get(obs.getConcept());
        if (position != null)
            obsResultDate[position] = obsResult;
    }
    TreeSet<Date> keys = new TreeSet<Date>(new Comparator<Date>() {

        public int compare(final Date firstDate, final Date secondDate) {
            return firstDate.equals(secondDate) ? 0 : firstDate.after(secondDate) ? -1 : 1;
        }
    });
    keys.addAll(obsResultDates.keySet());
    // TODO: need to merge the two loop into one
    Integer counter = 0;
    Iterator<Date> iterator = keys.iterator();
    while (iterator.hasNext() && counter < 5) {
        Date date = iterator.next();
        // create the grouped results
        Result groupedResult = new Result();
        groupedResult.add(new Result(date));
        groupedResult.addAll(Arrays.asList(obsResultDates.get(date)));
        // add them to the main result of the rule
        result.add(groupedResult);
        // increase the counter as we only want last 5
        counter++;
    }
    Collections.reverse(result);
    return result;
}
