/**
 * Start up an instance of this tool, pass args.
 *
 * Main entry point---delegates almost everything to super.
 */
public static void main(String[] args) {
    // setCygwinEnv();
    JCrasher jcrasher = new JCrasher();
    jcrasher.setNameAndHint(name, hint);
    /* we interpret first arguments only. */
    int foundArgs = 1;
    while (args.length > 0 && foundArgs > 0) {
        // TODO move to gnu.getopt.
        // processed zero arguments so far.
        foundArgs = 0;
        if (args[0].equals("-debug")) {
            IS_DEBUG = true;
            foundArgs = 1;
        }
        if (args[0].equals("-NPE")) {
            SEARCH_FOR_NPE = true;
            foundArgs = 1;
        }
        if (args[0].equals("-explicitException")) {
            SEARCH_FOR_EXCEPTION = true;
            foundArgs = 1;
        }
        if (args[0].equals("-outdir")) {
            jcrasher.parseOutDir(args[1]);
            foundArgs = 2;
        }
        if (foundArgs > 0) {
            // remove processed args from list.
            String[] allArgs = args;
            args = new String[allArgs.length - foundArgs];
            System.arraycopy(allArgs, foundArgs, args, 0, args.length);
        }
    }
    /* Removed our arguments from args. */
    /* Add -nowarn switches. Only warn of the following six cases:
		 * + ArrayStore ``A[I] = E when the value of E is not assignment compatible with the actual element type of A.''
		 * + Cast ``(T)E when the value of E cannot be cast to the type E.''
		 * + ``array access A[I] when the value of the index I is negative.''
		 * + ``array access A[I] when A.length <= I.''
		 * + ``allocate an array of negative length.''
		 * + integer division by zero. */
    List<String> argList = new Vector<String>();
    argList.addAll(Arrays.asList("-nowarn", "All", "-warn", "ArrayStore", "-warn", "Cast", "-warn", "IndexNegative", "-warn", "IndexTooBig", "-warn", "NegSize", "-warn", "ZeroDiv"));
    if (SEARCH_FOR_EXCEPTION) {
        argList.addAll(Arrays.asList("-warn", "Exception"));
    }
    if (SEARCH_FOR_NPE) {
        argList.addAll(Arrays.asList("-warn", "Null"));
    }
    argList.addAll(Arrays.asList(args));
    // String[] nowarnAndArgs = null;
    // int defaultArgs = 16;
    // int optArgs = 2;
    // if (SEARCH_FOR_NPE) {nowarnAndArgs = new String[defaultArgs+optArgs+args.length];}
    // else {nowarnAndArgs = new String[defaultArgs+args.length];}
    // nowarnAndArgs[0] = "-nowarn";				//1
    // nowarnAndArgs[1] = "All";						//...
    // nowarnAndArgs[2] = "-warn";
    // nowarnAndArgs[3] = "ArrayStore";
    // nowarnAndArgs[4] = "-warn";
    // nowarnAndArgs[5] = "Cast";
    // nowarnAndArgs[6] = "-warn";
    // nowarnAndArgs[7] = "IndexNegative";
    // nowarnAndArgs[8] = "-warn";
    // nowarnAndArgs[9] = "IndexTooBig";
    // nowarnAndArgs[10] = "-warn";
    // nowarnAndArgs[11] = "NegSize";
    // nowarnAndArgs[12] = "-warn";
    // nowarnAndArgs[13] = "ZeroDiv";			//14
    // nowarnAndArgs[14] = "-warn";
    // nowarnAndArgs[15] = "Exception";		//16
    // 
    // /*
    // nowarnAndArgs[16] = "-warn";				//Warn that Daikon-inferred invariant violated
    // nowarnAndArgs[17] = "Invariant";		//16
    // */
    // if (SEARCH_FOR_NPE) {								//optArgs:
    // nowarnAndArgs[defaultArgs] = "-warn";			//1
    // nowarnAndArgs[defaultArgs+1] = "Null";		//2
    // System.arraycopy(args, 0, nowarnAndArgs, defaultArgs+optArgs, args.length);
    // }
    // else {
    // System.arraycopy(args, 0, nowarnAndArgs, defaultArgs, args.length);
    // }
    /* real work */
    // run time measurement
    long startTime = System.currentTimeMillis();
    // compile(nowarnAndArgs);			//main processing
    // main processing
    compile(argList.toArray(new String[argList.size()]));
    // int exitcode = compile(nowarnAndArgs);
    // run time measurement
    long endTime = System.currentTimeMillis();
    System.out.println("runtime = " + Long.toString((endTime - startTime) / 1000) + " seconds.");
}
