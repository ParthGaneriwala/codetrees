void loadList(ArrayList pieceList, boolean a) {
    for (int i = 0; i < pieceList.size() & run & m < availNewLoadPieceSum; i++) {
        int pieceNum = (Integer) pieceList.get(i);
        PieceRequest p = pieceRequestTable.get(pieceNum);
        int blockNum = pieceNum / 64;
        Iterator<SourceNodeIdent> it5 = sourceNodeTable.keySet().iterator();
        connectedSum = 0;
        // ��ȡ����&�����ڵ�
        ArrayList<SourceNode> list = new ArrayList<SourceNode>();
        HashSet s = new HashSet();
        while (it5.hasNext()) {
            SourceNodeIdent sni = it5.next();
            SourceNode sn = peer.Config.sourceNodeMange.getSourceNode(sni);
            if (sn != null) {
                if (sn.containsBlock(mdb, blockNum)) {
                    if (sn.isInConnect() | sn.isConnected()) {
                        connectedSum++;
                    }
                    if (!s.contains(sn) & sn.fixAvail(mdb, blockNum)) {
                        s.add(sn);
                        list.add(sn);
                    }
                }
            }
        }
        if (list.size() > 0) {
            int index = peer.tools.RandomNum.randomInt(list.size());
            SourceNode sn = list.get(index);
            if (sn != null) {
                // System.out.println("				���ط�3Ƭ "+sn.conn.dstPort+" "+pieceNum+" "+sn.fixAvail(mdb, blockNum)+" "+sn.isConnected()+" "+sn.containsBlock(mdb, blockNum)+" "+sn.transeSum+" "+sn.pieceWin+" ");
                if (sn.fixAvail(mdb, blockNum)) {
                    if (peer.Config.testSpeed) {
                        try {
                            testSpeed(sn.getConnection());
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                    p.fix(sn);
                    if (a) {
                    // System.out.println("�����ƬAAA "+pieceNum+"  "+sn.conn.dstPort);
                    } else {
                    // System.out.println("�����ƬBBB "+pieceNum+"  "+sn.conn.dstPort);
                    }
                    m++;
                    fixRequestSum++;
                    if (fixRecordTable.containsKey(pieceNum)) {
                        fixReSendSum++;
                    }
                    fixRecordTable.put(pieceNum, null);
                }
            }
        }
        it5 = sourceNodeTable.keySet().iterator();
        int needConnectSum = peer.Config.maxAvailSourceNode - connectedSum;
        if (needConnectSum > 0) {
            int n = 0;
            // ���Ӹ�������ڵ�
            while (it5.hasNext() & n < needConnectSum) {
                SourceNodeIdent sni = it5.next();
                SourceNode sn = peer.Config.sourceNodeMange.getSourceNode(sni);
                if (sn != null) {
                    if (sn.containsBlock(mdb, blockNum)) {
                        if (sn.connectAvail()) {
                            sn.connect();
                            n++;
                        }
                    }
                }
            }
            // ������������ڵ�
            if (searchThread.searchAvail(blockNum)) {
                searchThread.searchNow(blockNum);
            }
        }
    }
}
