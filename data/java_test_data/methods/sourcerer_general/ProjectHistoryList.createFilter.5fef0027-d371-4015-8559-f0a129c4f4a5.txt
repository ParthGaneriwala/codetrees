protected void createFilter(StringBuffer sqlFilter) throws SQLException {
    if (sqlFilter == null) {
        sqlFilter = new StringBuffer();
    }
    if (projectId > -1) {
        sqlFilter.append("AND (project_id = ? ");
        if (relativeEnteredBy != -1) {
            sqlFilter.append("OR relative_enteredby = ? ");
        }
        sqlFilter.append(")");
    }
    if (enteredBy > -1) {
        sqlFilter.append("AND enteredby = ? ");
    }
    if (linkObject != null) {
        sqlFilter.append("AND link_object = ? ");
    }
    if (linkItemId > -1) {
        sqlFilter.append("AND link_item_id = ? ");
    }
    if (eventType > -1) {
        sqlFilter.append("AND event_type = ? ");
    }
    if (rangeStart != null) {
        sqlFilter.append("AND link_start_date >= ? ");
    }
    if (rangeEnd != null) {
        sqlFilter.append("AND link_start_date < ? ");
    }
    if (parentId > -1) {
        sqlFilter.append("AND parent_id = ? ");
    }
    if (topId > -1) {
        sqlFilter.append("AND top_id = ? ");
    }
    if (position > -1) {
        sqlFilter.append("AND position = ? ");
    }
    if (indent > -1) {
        sqlFilter.append("AND indent = ? ");
    }
    if (relativeDate != null) {
        sqlFilter.append("AND relative_date = ? ");
    }
    if (untilLinkStartDate != null) {
        sqlFilter.append("AND link_start_date <= ? ");
    }
    if (objectPreferences != null && objectPreferences.size() > 0) {
        sqlFilter.append("AND link_object IN (");
        Iterator<String> itr = objectPreferences.iterator();
        while (itr.hasNext()) {
            String objectPreference = itr.next();
            if (StringUtils.hasText(objectPreference)) {
                sqlFilter.append("?");
            }
            if (itr.hasNext()) {
                sqlFilter.append(",");
            }
        }
        sqlFilter.append(") ");
    }
    if (instanceId > -1 || projectCategoryId > -1) {
        sqlFilter.append("AND project_id IN " + "(SELECT project_id FROM projects " + "WHERE project_id > -1 " + (instanceId > -1 ? "AND instance_id = ? " : "") + (projectCategoryId > -1 ? "AND category_id = ? " : "") + ") ");
    }
    if (forUser != -1) {
        sqlFilter.append("AND (ph.project_id IN (SELECT DISTINCT project_id FROM project_team WHERE user_id = ? " + "AND status IS NULL) OR ph.project_id IN (SELECT project_id FROM projects WHERE allow_guests = ? AND approvaldate IS NOT NULL)) ");
    }
    if (forEmailUpdates) {
        sqlFilter.append("AND ph.project_id IN " + "(SELECT DISTINCT project_id FROM project_team WHERE user_id = ? " + " AND status IS NULL AND email_updates_schedule = ?) ");
    }
    if (publicProjects == Constants.TRUE || forParticipant == Constants.TRUE) {
        sqlFilter.append("AND ph.project_id IN (SELECT project_id FROM projects WHERE project_id > 0 ");
        if (publicProjects == Constants.TRUE) {
            sqlFilter.append("AND allow_guests = ? AND approvaldate IS NOT NULL ");
        }
        if (forParticipant == Constants.TRUE) {
            sqlFilter.append("AND (allows_user_observers = ? OR allow_guests = ?) AND membership_required = ? AND approvaldate IS NOT NULL ");
        }
        sqlFilter.append(") ");
    }
    if (forMember != -1) {
        sqlFilter.append("AND (" + // What I'm doing in places I have access to
        "(relative_enteredby = ? " + "AND " + "(ph.project_id IN (SELECT project_id FROM project_team WHERE user_id = ? AND status IS NULL) " + "OR ph.project_id IN (SELECT project_id FROM projects WHERE (allows_user_observers = ? OR allow_guests = ?) AND approvaldate IS NOT NULL))) " + // What my relationships have going on
        "OR " + "ph.project_id IN (SELECT project_id FROM project_team WHERE user_id = ? AND status IS NULL) " + ") ");
    }
    if (forUserUpdates) {
        sqlFilter.append("AND (" + // Shared projects between friends
        "(relative_enteredby = ? " + "AND ph.project_id IN (SELECT project_id FROM project_team WHERE user_id = ? AND status IS NULL) " + "AND ph.project_id IN (SELECT project_id FROM project_team WHERE user_id = ? AND status IS NULL)) " + // Public projects where the user is attributed
        "OR " + "(relative_enteredby = ? " + "AND ph.project_id IN (SELECT project_id FROM projects WHERE (allows_user_observers = ? OR allow_guests = ?) AND approvaldate IS NOT NULL)) " + // It's about the owner's profile... comments, auto-updates
        "OR " + "(ph.project_id = ?) " + ") ");
    }
}
