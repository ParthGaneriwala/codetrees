protected void analyze() {
    double[][] trialPairCorrects = new double[8][8];
    double[][] trialPairCounts = new double[8][8];
    for (int i = 0; i < 8; i++) {
        for (int j = 0; j < 8; j++) {
            trialPairCorrects[i][j] = 0.0;
            trialPairCounts[i][j] = 0.0;
        }
    }
    double[][] abspresPairCorrects = new double[2][2];
    double[][] abspresPairCounts = new double[2][2];
    for (int i = 0; i < 2; i++) {
        for (int j = 0; j < 2; j++) {
            abspresPairCorrects[i][j] = 0.0;
            abspresPairCounts[i][j] = 0.0;
        }
    }
    for (int session = _sessionStart; session <= _sessionEnd; session++) {
        String database = Paths.DB_OPEN_STR + Paths.BINDING_DB_PATH + _dir + "/" + _fileNames[session - 1] + Paths.DB_CLOSE_STR;
        if (session != 47)
            try {
                Connection con = DriverManager.getConnection(database, "", "");
                Statement statement = con.createStatement();
                statement.execute("Select * from TrialResults");
                ResultSet rs = statement.getResultSet();
                BindingTrialObject last = null;
                BindingTrialObject current;
                while (rs.next()) {
                    current = new BindingTrialObject(rs);
                    if (last != null) {
                        int lastType = last.isPresentTrial() ? 1 : 0;
                        int currentType = current.isPresentTrial() ? 1 : 0;
                        int lastMapped = mapTrialIndex(last.getTrialType() - 1);
                        int currMapped = mapTrialIndex(current.getTrialType() - 1);
                        trialPairCounts[lastMapped][currMapped]++;
                        abspresPairCounts[lastType][currentType]++;
                        if (current.isCorrectTrial()) {
                            trialPairCorrects[lastMapped][currMapped]++;
                            abspresPairCorrects[lastType][currentType]++;
                        }
                    }
                    last = current;
                }
                if (DataPrinter.Rand0_10() > 2)
                    con.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
    }
    double[][] accuracies = new double[8][8];
    double[][] accuraciesAbsPres = new double[2][2];
    // and current trial type is in each column
    for (int i = 0; i < 8; i++) {
        for (int j = 0; j < 8; j++) {
            accuracies[j][i] = 100.0 * (trialPairCorrects[i][j] / trialPairCounts[i][j]);
            if (i < 2 && j < 2)
                accuraciesAbsPres[j][i] = 100.0 * (abspresPairCorrects[i][j] / abspresPairCounts[i][j]);
        }
    }
    // acc
    DataPrinter.printWithTabs(true, accuracies);
    // counts
    // Helper.printWithTabs(true, trialPairCounts);
    // acc
    DataPrinter.printWithTabs(true, accuraciesAbsPres);
// counts
// Helper.printWithTabs(true, abspresPairCounts);
}
