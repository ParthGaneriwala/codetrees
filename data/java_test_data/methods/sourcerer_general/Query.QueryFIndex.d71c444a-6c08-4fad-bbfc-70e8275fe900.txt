public static Table QueryFIndex(Comparable iComparable, int inMemorySize) throws Exception {
    statistics();
    Query.indexTables(inMemorySize);
    File tmp = new File(Utils.FILEPATH_WORKDIR + "join.txt");
    File tmp2 = new File(Utils.FILEPATH_WORKDIR + "join2.txt");
    File tmp3 = new File(Utils.FILEPATH_WORKDIR + "where.txt");
    File tmp4 = new File(Utils.FILEPATH_WORKDIR + "where2.txt");
    File tmp5 = new File(Utils.FILEPATH_WORKDIR + "distinct.txt");
    File tmp6 = new File(Utils.FILEPATH_OUTPUT + "queryF.txt");
    File tmp7 = new File(Utils.FILEPATH_WORKDIR + "projection.txt");
    File tmp8 = new File(Utils.FILEPATH_WORKDIR + "projection2.txt");
    File tmp9 = new File(Utils.FILEPATH_WORKDIR + "where3.txt");
    File tmp10 = new File(Utils.FILEPATH_WORKDIR + "where4.txt");
    File tmp11 = new File(Utils.FILEPATH_WORKDIR + "join1.txt");
    Table table1;
    Table table2;
    Table oTable;
    Table supplier1 = m_supplier.clone();
    Table supplier2 = new Supplier();
    Table lineitem = new Lineitem();
    Table tmpT;
    StringBuffer qp = new StringBuffer();
    double sum = 0;
    tmpT = lineitem;
    lineitem = SQL.projection(lineitem, tmp8, new int[] { lineitem.getIndex(Lineitem.FIELD_L_SUPPKEY), lineitem.getIndex(Lineitem.FIELD_L_ORDERKEY), lineitem.getIndex(Lineitem.FIELD_L_COMMITDATE), lineitem.getIndex(Lineitem.FIELD_L_RECEIPTDATE), lineitem.getIndex(Lineitem.FIELD_L_RETURNFLAG) }, inMemorySize);
    qp.append(getQPEntry(tmpT, null, lineitem, "Projection", new String[] { Lineitem.FIELD_L_SUPPKEY, Lineitem.FIELD_L_ORDERKEY, Lineitem.FIELD_L_COMMITDATE, Lineitem.FIELD_L_RECEIPTDATE, Lineitem.FIELD_L_RETURNFLAG }));
    sum += lineitem.getExecutionTime();
    // We could do optimization here by check which field has the biggest distribution. I'm assuming distribution on FIELD_L_RETURNFLAG is smaller than FIELD_L_RECEIPTDATE.
    tmpT = lineitem;
    lineitem = SQL.whereGreater(lineitem, tmp9, lineitem.getIndex(Lineitem.FIELD_L_RECEIPTDATE), lineitem.getIndex(Lineitem.FIELD_L_COMMITDATE), inMemorySize);
    qp.append(getQPEntry(tmpT, null, lineitem, "Where Greater", new String[] { Lineitem.FIELD_L_RECEIPTDATE, Lineitem.FIELD_L_COMMITDATE }));
    sum += lineitem.getExecutionTime();
    tmpT = lineitem;
    lineitem = SQL.whereEqual(lineitem, tmp10, new int[] { lineitem.getIndex(Lineitem.FIELD_L_RETURNFLAG) }, new Comparable[] { iComparable }, inMemorySize);
    qp.append(getQPEntry(tmpT, null, lineitem, "Where Equal", new String[] { Supplier.FIELD_S_SUPPKEY, Lineitem.FIELD_L_SUPPKEY }));
    sum += lineitem.getExecutionTime();
    /*
		if (supplier1.getNbRecords() < lineitem.getNbRecords()) {
			table1 = SQL.sortJoin(supplier1, lineitem, tmp, supplier1.getIndex(Supplier.FIELD_S_SUPPKEY), lineitem.getIndex(Lineitem.FIELD_L_SUPPKEY), SQL.JOIN_NATURAL, inMemorySize);
		} else {
			table1 = SQL.sortJoin(lineitem, supplier1, tmp, lineitem.getIndex(Lineitem.FIELD_L_SUPPKEY), supplier1.getIndex(Supplier.FIELD_S_SUPPKEY), SQL.JOIN_NATURAL, inMemorySize);
		}*/
    /*
		table1 = SQL.sortJoin(supplier1, lineitem, tmp, supplier1.getIndex(Supplier.FIELD_S_SUPPKEY), lineitem.getIndex(Lineitem.FIELD_L_SUPPKEY), SQL.JOIN_NATURAL, inMemorySize);
		qp.append(getQPEntry(supplier1,lineitem,table1,"Where Equal"));
		sum += table1.getExecutionTime();*/
    table1 = SQL.indexJoin(lineitem, supplier1, tmp11, lineitem.getIndex(Lineitem.FIELD_L_SUPPKEY), supplier1.getIndex(Supplier.FIELD_S_SUPPKEY), SQL.JOIN_NATURAL, inMemorySize);
    qp.append(getQPEntry(supplier1, lineitem, table1, "Where Equal", new String[] { Supplier.FIELD_S_SUPPKEY, Lineitem.FIELD_L_SUPPKEY }));
    sum += table1.getExecutionTime();
    tmpT = table1;
    table1 = SQL.projection(table1, tmp5, new int[] { table1.getIndex(Supplier.FIELD_S_NAME) }, inMemorySize);
    qp.append(getQPEntry(tmpT, null, table1, "Projection", new String[] { Supplier.FIELD_S_NAME }));
    sum += table1.getExecutionTime();
    tmpT = table1;
    table1 = SQL.sortDistinct(table1, tmp, table1.getIndex(Supplier.FIELD_S_NAME), inMemorySize);
    qp.append(getQPEntry(tmpT, null, lineitem, "Distinct", new String[] { Supplier.FIELD_S_NAME }));
    sum += table1.getExecutionTime();
    tmpT = supplier2;
    supplier2 = SQL.projection(supplier2, tmp7, new int[] { supplier2.getIndex(Supplier.FIELD_S_NAME) }, inMemorySize);
    qp.append(getQPEntry(tmpT, null, supplier2, "Projection", new String[] { Supplier.FIELD_S_NAME }));
    sum += supplier2.getExecutionTime();
    tmpT = supplier2;
    supplier2 = SQL.whereLike(supplier2, tmp3, supplier2.getIndex(Supplier.FIELD_S_NAME), "%0", false, inMemorySize);
    qp.append(getQPEntry(tmpT, null, supplier2, "Where Like", new String[] { Supplier.FIELD_S_NAME }));
    sum += supplier2.getExecutionTime();
    /*
		int hack = 0;
		int hack2 = 0;
		if (table1.getNbRecords() < supplier2.getNbRecords()) {
			table2 = SQL.sortJoin(table1, supplier2, tmp2, table1.getIndex(Supplier.FIELD_S_NAME), supplier2.getIndex(Supplier.FIELD_S_NAME), SQL.JOIN_LEFT_WITHOUT_REMOVE, inMemorySize);
			hack = 0;
			hack2 = 1;
			qp.append(getQPEntry(table1,supplier2,table2,"Join"));
			sum += table2.getExecutionTime();
		} else {
			table2 = SQL.sortJoin(supplier2, table1, tmp2, supplier2.getIndex(Supplier.FIELD_S_NAME), table1.getIndex(Supplier.FIELD_S_NAME), SQL.JOIN_LEFT_WITHOUT_REMOVE_ON2, inMemorySize);
			hack = 1;
			hack2 = 0;
			qp.append(getQPEntry(supplier2,table1,table2,"Join"));
			sum += table2.getExecutionTime();
		}*/
    table2 = SQL.sortJoin(table1, supplier2, tmp2, table1.getIndex(Supplier.FIELD_S_NAME), supplier2.getIndex(Supplier.FIELD_S_NAME), SQL.JOIN_LEFT_WITHOUT_REMOVE, inMemorySize);
    int hack = 0;
    int hack2 = 1;
    qp.append(getQPEntry(table1, supplier2, table2, "Sort LEFT Join", new String[] { Supplier.FIELD_S_NAME, Supplier.FIELD_S_NAME }));
    sum += table2.getExecutionTime();
    tmpT = table2;
    table2 = SQL.whereEqual(table2, tmp4, new int[] { hack2 }, new Comparable[] { Table.NULL_STRING }, inMemorySize);
    qp.append(getQPEntry(tmpT, null, table2, "Where Equal", new String[] { Supplier.FIELD_S_NAME }));
    sum += table2.getExecutionTime();
    tmpT = table2;
    table2 = SQL.projection(table2, tmp6, new int[] { hack }, inMemorySize);
    qp.append(getQPEntry(tmpT, null, table2, "Projection", new String[] { Supplier.FIELD_S_NAME }));
    sum += table2.getExecutionTime();
    qp.append("Total: " + sum);
    copyAndAppend(table2, new File(Utils.FILEPATH_OUTPUT + "fIndex.out"), qp.toString(), inMemorySize);
    ProjectGUI.getInstance().update("Memory Execution: QueryF done", 0);
    System.out.println("Done F");
    return table2;
}
