public Ref readAndEvaluateExpression(Token currentToken) throws LexicalException, ScopeException, TokenException, FunctionException, InterpreterException {
    Ref returnValue = null;
    if (isDef(currentToken)) {
        tokenizer.advance();
        if (!(tokenizer.getCurrent() instanceof Bracket)) {
            throw (new TokenException("Missing first bracket", tokenizer.getCurrent()));
        }
        tokenizer.advance();
        String newVarName = tokenizer.getCurrent().getStringValue();
        tokenizer.advance();
        if (!(tokenizer.getCurrent() instanceof Operator)) {
            throw (new TokenException("This function requires two elements", tokenizer.getCurrent()));
        }
        tokenizer.advance();
        Ref tst = readAndEvaluateExpression(tokenizer.getCurrent());
        System.out.println("test: " + tst.getObject());
        MutableRef arg = new MutableRef(readAndEvaluateExpression(tokenizer.getCurrent()).getObject());
        scope.defineLocal(newVarName, arg);
        tokenizer.advance();
        if (!(tokenizer.getCurrent() instanceof Bracket)) {
            throw (new TokenException("Missing last bracket", tokenizer.getCurrent()));
        }
        if (scope.isDefined(newVarName)) {
            Function function = (Function) scope.getValue("print").getObject();
            LiteralString lString = new LiteralString(newVarName + " -> " + arg.getObject(), -1);
            return function.apply(new Ref(lString));
        } else {
            throw new TokenException("An error occured while adding reference to scope", tokenizer.getCurrent());
        }
    } else if (isSet(currentToken)) {
        tokenizer.advance();
        if (!(tokenizer.getCurrent() instanceof Bracket)) {
            throw (new TokenException("Missing first bracket", tokenizer.getCurrent()));
        }
        tokenizer.advance();
        String varName = tokenizer.getCurrent().getStringValue();
        tokenizer.advance();
        if (!(tokenizer.getCurrent() instanceof Operator)) {
            throw (new TokenException("This function requires two elements", tokenizer.getCurrent()));
        }
        tokenizer.advance();
        MutableRef arg = new MutableRef(readAndEvaluateExpression(tokenizer.getCurrent()).getObject());
        // System.out.println("arg:" + arg.getObject().toString());
        try {
            ((MutableRef) scope.getValue(varName)).setObject(arg.getObject());
        } catch (ClassCastException c) {
            throw new TokenException(varName + " cannot be changed", currentToken);
        }
        tokenizer.advance();
        if (!(tokenizer.getCurrent() instanceof Bracket)) {
            throw (new TokenException("Missing last bracket", tokenizer.getCurrent()));
        }
        Function function = (Function) scope.getValue("print").getObject();
        LiteralString lString = new LiteralString(varName + " = " + arg.getObject(), -1);
        return function.apply(new Ref(lString));
    } else if (isLiteralInt(currentToken)) {
        // System.out.println("LiteralInt: " + currentToken.getStringValue());
        returnValue = new Ref(currentToken);
    } else if (isLiteralDouble(currentToken)) {
        // System.out.println("LiteralDouble: " + currentToken.getStringValue());
        returnValue = new Ref(currentToken);
    } else if (isLiteralString(currentToken)) {
        // System.out.println("LiteralString: " + currentToken.getStringValue());
        returnValue = new Ref(currentToken);
    } else if (isFunction(currentToken)) {
        // System.out.println("function: " + currentToken.getStringValue());
        Ref[] functionArguments = readAndEvaluateArguments();
        Function function = (Function) scope.getValue(currentToken.getStringValue()).getObject();
        returnValue = function.apply(functionArguments);
    } else if (isVar(currentToken)) {
        // System.out.println("var: " + currentToken.getStringValue());
        returnValue = scope.getValue(currentToken.getStringValue());
    } else {
        throw new InterpreterException("Cannot evaluate expression: " + currentToken.getStringValue());
    }
    return returnValue;
}
