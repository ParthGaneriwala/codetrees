protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
    response.setContentType("text/html");
    PrintWriter out = response.getWriter();
    String keyword = request.getParameter("keyword");
    String keywordToVote = request.getParameter("keywordToVote");
    String urlToVote = request.getParameter("urlToVote");
    String vote = request.getParameter("vote");
    indexIP = getServletConfig().getInitParameter("indexIP");
    indexPort = getServletConfig().getInitParameter("indexPort");
    // IS NOT AN AJAX REQUEST
    if (keyword != null) {
        String[] keywords = URLDecoder.decode(keyword, "UTF-8").split(" ");
        out.println("<html><head>");
        out.println("<title>Cookie</title>");
        out.println("<link href=\"cookie-static/styles.css\" rel=\"stylesheet\" type=\"text/css\" />");
        out.println("<script type=\"text/javascript\" src=\"cookie-static/jquery.js\" charset=\"utf-8\"></script>");
        out.println("<script type=\"text/javascript\" src=\"cookie-static/voting.js\" charset=\"utf-8\"></script>");
        out.println("</head><body>");
        out.println("<div id=\"results\">");
        out.println("<img src=\"cookie-static/logo_small.png\">");
        out.println("<form method=\"POST\" action=\"\">");
        out.println("<input type=\"text\" name=\"keyword\" value=\"\" />");
        out.println("<input id=\"search\" type=\"submit\" name=\"submit\" value=\"Search\" />");
        out.println("</form>");
        out.println("</div>");
        XMLParser parser = new XMLParser();
        ArrayList<List<Result>> resultList = new ArrayList<List<Result>>();
        // send a request to the index for each keyword
        for (int i = 0; i < keywords.length; i++) {
            ;
            List<Result> currentResult = Arrays.asList(getResults(keywords[i], parser));
            resultList.add(currentResult);
        }
        // mapping of URLs to the number of keyword result lists they appear in
        HashMap<Result, Integer> resultCounts = new HashMap<Result, Integer>();
        for (int i = 0; i < resultList.size(); i++) {
            List<Result> currentResult = resultList.get(i);
            for (int j = 0; j < currentResult.size(); j++) {
                if (resultCounts.containsKey(currentResult.get(j))) {
                    Integer currentCount = resultCounts.get(currentResult.get(j));
                    Integer newCount = new Integer(currentCount.intValue() + 1);
                    resultCounts.put(currentResult.get(j), newCount);
                } else {
                    resultCounts.put(currentResult.get(j), 1);
                }
            }
        }
        // mapping of appearances to URLs
        HashMap<Integer, ArrayList<Result>> reversedList = new HashMap<Integer, ArrayList<Result>>();
        Set<Result> resultKeys = resultCounts.keySet();
        for (Result result : resultKeys) {
            Integer currentCount = resultCounts.get(result);
            if (reversedList.containsKey(currentCount)) {
                ArrayList<Result> newList = reversedList.get(currentCount);
                newList.add(result);
                reversedList.put(currentCount, newList);
            } else {
                ArrayList<Result> newList = new ArrayList<Result>();
                newList.add(result);
                reversedList.put(currentCount, newList);
            }
        }
        // construct final list of results in decreasing order of appearances
        ArrayList<Result> results = new ArrayList<Result>();
        for (int i = reversedList.size(); i > 0; i--) {
            if (reversedList.containsKey(new Integer(i))) {
                ArrayList<Result> currentList = reversedList.get(new Integer(i));
                Result[] currentListArray = currentList.toArray(new Result[currentList.size()]);
                Arrays.sort(currentListArray);
                for (int j = 0; j < currentListArray.length; j++) {
                    results.add(currentListArray[j]);
                }
            }
        }
        Result[] resultArray = results.toArray(new Result[results.size()]);
        printResults(0, out, URLDecoder.decode(keyword, "UTF-8"), resultArray);
        printYahooResults(out, URLDecoder.decode(keyword, "UTF-8"), parser);
        printAmazonResults(out, URLDecoder.decode(keyword, "UTF-8"), parser);
        out.println("</body></html>");
        out.close();
    } else // IS AN AJAX REQUEST
    {
        String decodedURL = URLDecoder.decode(urlToVote.trim(), "UTF-8");
        if (votecache.get(keywordToVote.trim()) != null) {
            ArrayList<VoteResult> voteResultList = votecache.get(keywordToVote);
            boolean foundURL = false;
            for (int k = 0; k < voteResultList.size(); k++) {
                VoteResult current = voteResultList.get(k);
                if (current.getURL().equals(decodedURL)) {
                    foundURL = true;
                    current.vote(Integer.parseInt(vote));
                }
            }
            if (!foundURL) {
                voteResultList.add(new VoteResult(decodedURL, Integer.parseInt(vote)));
            }
            votecache.put(keywordToVote.trim(), voteResultList);
        } else {
            ArrayList<VoteResult> newVoteResultList = new ArrayList<VoteResult>();
            newVoteResultList.add(new VoteResult(decodedURL, Integer.parseInt(vote)));
            votecache.put(keywordToVote.trim(), newVoteResultList);
        }
        return;
    }
}
