public synchronized Source getSource(Class clazz) throws SQLException {
    checkClosed();
    checkWorkingWithResult();
    if (clazz == null || clazz.equals(SAXSource.class)) {
        InputSource inputSource = null;
        if (this.fromResultSet) {
            inputSource = new InputSource(this.owningResultSet.getCharacterStream(this.columnIndexOfXml));
        } else {
            inputSource = new InputSource(new StringReader(this.stringRep));
        }
        return new SAXSource(inputSource);
    } else if (clazz.equals(DOMSource.class)) {
        try {
            DocumentBuilderFactory builderFactory = DocumentBuilderFactory.newInstance();
            builderFactory.setNamespaceAware(true);
            DocumentBuilder builder = builderFactory.newDocumentBuilder();
            InputSource inputSource = null;
            if (this.fromResultSet) {
                inputSource = new InputSource(this.owningResultSet.getCharacterStream(this.columnIndexOfXml));
            } else {
                inputSource = new InputSource(new StringReader(this.stringRep));
            }
            return new DOMSource(builder.parse(inputSource));
        } catch (Throwable t) {
            SQLException sqlEx = SQLError.createSQLException(t.getMessage(), SQLError.SQL_STATE_ILLEGAL_ARGUMENT, this.exceptionInterceptor);
            sqlEx.initCause(t);
            throw sqlEx;
        }
    } else if (clazz.equals(StreamSource.class)) {
        Reader reader = null;
        if (this.fromResultSet) {
            reader = this.owningResultSet.getCharacterStream(this.columnIndexOfXml);
        } else {
            reader = new StringReader(this.stringRep);
        }
        return new StreamSource(reader);
    } else if (clazz.equals(StAXSource.class)) {
        try {
            Reader reader = null;
            if (this.fromResultSet) {
                reader = this.owningResultSet.getCharacterStream(this.columnIndexOfXml);
            } else {
                reader = new StringReader(this.stringRep);
            }
            return new StAXSource(this.inputFactory.createXMLStreamReader(reader));
        } catch (XMLStreamException ex) {
            SQLException sqlEx = SQLError.createSQLException(ex.getMessage(), SQLError.SQL_STATE_ILLEGAL_ARGUMENT, this.exceptionInterceptor);
            sqlEx.initCause(ex);
            throw sqlEx;
        }
    } else {
        throw SQLError.createSQLException("XML Source of type \"" + clazz.toString() + "\" Not supported.", SQLError.SQL_STATE_ILLEGAL_ARGUMENT, this.exceptionInterceptor);
    }
}
