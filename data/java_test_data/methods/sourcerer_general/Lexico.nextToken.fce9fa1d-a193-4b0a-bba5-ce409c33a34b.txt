public Token nextToken() {
    // Este bloco if apenas carrega a pr�xima linha a ser processada!
    if (lendo == null || lendo.size() == 0) {
        if (linhaAtual == null || linhaAtual.length() == 0) {
            linhaAtual = this.loadTokens();
            if (linhaAtual == null) {
                return Token.TOK_FIMARQUIVO;
            }
        }
        lendo = new ArrayList<Character>();
        char[] ar = linhaAtual.toCharArray();
        // A linha atual precisa ser esvaziada.
        linhaAtual = null;
        for (char c : ar) {
            lendo.add(new Character(c));
        }
    }
    char atual = lendo.get(0).charValue();
    while (atual == ' ') {
        lendo.remove(0).charValue();
        atual = lendo.get(0).charValue();
    }
    lendo.remove(0);
    switch(atual) {
        case '+':
            return Token.TOK_SOMA;
        case '-':
            return Token.TOK_SUBT;
        case '/':
            return Token.TOK_DIVI;
        case ',':
            return Token.TOK_SEPARADOR;
        case ';':
            return Token.TOK_DELIMITADOR;
        case '*':
            return Token.TOK_MULT;
        case '^':
            return Token.TOK_POTEN;
        case '>':
            {
                char atual2 = lendo.get(0).charValue();
                if (atual2 == '=') {
                    lendo.remove(0);
                    return Token.TOK_MAIOR_IGUAL;
                }
                return Token.TOK_MAIOR;
            }
        case '<':
            {
                char atual2 = lendo.get(0).charValue();
                if (atual2 == '=') {
                    lendo.remove(0);
                    return Token.TOK_MENOR_IGUAL;
                }
                return Token.TOK_MENOR;
            }
        case '=':
            {
                char atual2 = lendo.get(0).charValue();
                if (atual2 == '=') {
                    lendo.remove(0);
                    return Token.TOK_IGUAL;
                }
                return Token.TOK_ATRIBUICAO;
            }
        case '!':
            {
                char atual2 = lendo.get(0).charValue();
                if (atual2 == '=') {
                    lendo.remove(0);
                    return Token.TOK_NAO_IGUAL;
                }
                return Token.TOK_INVALIDO;
            }
        case '(':
            return Token.TOK_PARENTESE_ESQUERDO;
        case ')':
            return Token.TOK_PARENTESE_DIREITO;
        default:
            {
                lendo.add(0, atual);
                if (atual == '"' || atual == '�') {
                    String constante = "";
                    lendo.remove(0);
                    char c = lendo.get(0).charValue();
                    while (c != '�' && c != '"') {
                        lendo.remove(0);
                        constante += String.valueOf(c);
                        c = lendo.get(0).charValue();
                    }
                    lendo.remove(0);
                    return Token.TOK_STRING_CONSTANTE;
                }
                if (isNumero(atual)) {
                    char c = atual;
                    String numero = "";
                    boolean ponto = true;
                    do {
                        numero += String.valueOf(c);
                        lendo.remove(0);
                        c = lendo.size() > 0 ? lendo.get(0).charValue() : ' ';
                        if (c == '.' && ponto) {
                            ponto = false;
                            numero += String.valueOf(c);
                            lendo.remove(0);
                            c = lendo.size() > 0 ? lendo.get(0).charValue() : ' ';
                        }
                    } while (isNumero(c));
                    Token num;
                    if (ponto) {
                        num = Token.TOK_NUMERO_INTEIRO;
                        num.setValor(Double.parseDouble(numero));
                        return num;
                    } else {
                        num = Token.TOK_NUMERO_REAL;
                        num.setValor(Double.parseDouble(numero));
                        return num;
                    }
                }
                if (isAlphaOr_(atual)) {
                    char c = atual;
                    String palavra = "";
                    do {
                        palavra += String.valueOf(c);
                        lendo.remove(0);
                        c = lendo.size() > 0 ? lendo.get(0).charValue() : ' ';
                    } while (isAlphaOr_(c) || isNumero(c));
                    if (pr.containsKey(palavra)) {
                        return pr.get(palavra);
                    }
                    int index;
                    if (table.containsValue(palavra)) {
                        index = table.getIndex(palavra);
                    } else {
                        index = table.addConteudo(palavra);
                    }
                    Token ret = Token.TOK_ID;
                    ret.setIndex(index);
                    ret.setNome(palavra);
                    return ret;
                }
                lendo.remove(0);
                return Token.TOK_INVALIDO;
            }
    }
}
