public void testValidClassInfo() throws Exception {
    List<String> references = new ArrayList<String>();
    references.add("Insets");
    references.add("Color");
    references.add("Rectangle");
    references.add("Graphics");
    references.add("Graphics2D");
    references.add("Runnable");
    references.add("Exception");
    references.add("Dummy1");
    references.add("Dummy2");
    File file = getFile("AffinedTransformer.dat");
    ClassInfo info = ClassParser.parse(file, new ClassLoaderResolver(this.getClass().getClassLoader()));
    assertEquals("AffinedTransformer", info.getName());
    assertEquals("javax.swing.JFrame", info.getSuperclass());
    assertEquals("bluej.parser.ast.data", info.getPackage());
    // assertEquals(7, info.getUsed().size());
    // Check package selections
    Selection testSel = info.getPackageNameSelection();
    assertEquals(1, testSel.getLine());
    assertEquals(9, testSel.getColumn());
    assertEquals(1, testSel.getEndLine());
    assertEquals(30, testSel.getEndColumn());
    testSel = info.getPackageSemiSelection();
    assertEquals(1, testSel.getLine());
    assertEquals(30, testSel.getColumn());
    assertEquals(1, testSel.getEndLine());
    assertEquals(31, testSel.getEndColumn());
    testSel = info.getPackageStatementSelection();
    assertEquals(1, testSel.getLine());
    assertEquals(1, testSel.getColumn());
    assertEquals(1, testSel.getEndLine());
    assertEquals(8, testSel.getEndColumn());
    // AffinedTransformer already extends JFrame
    Selection extendsInsert = info.getExtendsInsertSelection();
    assertNull(extendsInsert);
    // No type parameters
    List<String> l = info.getTypeParameterTexts();
    if (l != null)
        assertEquals(0, l.size());
    // testSel = info.getTypeParametersSelection();
    // assertNull(testSel);
    // Implements insert
    Selection implementsInsert = info.getImplementsInsertSelection();
    assertEquals(47, implementsInsert.getEndColumn());
    assertEquals(47, implementsInsert.getColumn());
    assertEquals(6, implementsInsert.getEndLine());
    assertEquals(6, implementsInsert.getLine());
    Selection superReplace = info.getSuperReplaceSelection();
    assertEquals(6, superReplace.getLine());
    assertEquals(41, superReplace.getColumn());
    assertEquals(6, superReplace.getEndLine());
    assertEquals(47, superReplace.getEndColumn());
    // Check that comment is created with parameter names
    Properties comments = info.getComments();
    String wantedComment = "void resizeToInternalSize(int, int)";
    int wci = findTarget(comments, wantedComment);
    assertTrue(wci != -1);
    String paramNames = comments.getProperty("comment" + wci + ".params");
    assertEquals("internalWidth internalHeight", paramNames);
    /*
         * Second file - no superclass, multiple interfaces 
         */
    file = getFile("multi_interface.dat");
    info = ClassParser.parse(file);
    extendsInsert = info.getExtendsInsertSelection();
    assertEquals(10, extendsInsert.getEndColumn());
    assertEquals(10, extendsInsert.getColumn());
    assertEquals(1, extendsInsert.getEndLine());
    assertEquals(1, extendsInsert.getLine());
    // the implements insert selection should be just beyond the
    // end of the last implemented interface
    implementsInsert = info.getImplementsInsertSelection();
    assertEquals(32, implementsInsert.getEndColumn());
    assertEquals(32, implementsInsert.getColumn());
    assertEquals(1, implementsInsert.getEndLine());
    assertEquals(1, implementsInsert.getLine());
    // the interface selections: "implements" "AA" "," "BB" "," "CC"
    List<Selection> interfaceSels = info.getInterfaceSelections();
    assertEquals(6, interfaceSels.size());
    Iterator<Selection> i = interfaceSels.iterator();
    // "implements"
    Selection interfaceSel = (Selection) i.next();
    assertEquals(1, interfaceSel.getLine());
    assertEquals(11, interfaceSel.getColumn());
    assertEquals(1, interfaceSel.getEndLine());
    assertEquals(21, interfaceSel.getEndColumn());
    // "AA"
    interfaceSel = (Selection) i.next();
    assertEquals(1, interfaceSel.getLine());
    assertEquals(22, interfaceSel.getColumn());
    assertEquals(1, interfaceSel.getEndLine());
    assertEquals(24, interfaceSel.getEndColumn());
    // ", "
    interfaceSel = (Selection) i.next();
    assertEquals(1, interfaceSel.getLine());
    assertEquals(24, interfaceSel.getColumn());
    assertEquals(1, interfaceSel.getEndLine());
    assertEquals(26, interfaceSel.getEndColumn());
    // "BB"
    interfaceSel = (Selection) i.next();
    assertEquals(1, interfaceSel.getLine());
    assertEquals(26, interfaceSel.getColumn());
    assertEquals(1, interfaceSel.getEndLine());
    assertEquals(28, interfaceSel.getEndColumn());
    // ", "
    interfaceSel = (Selection) i.next();
    assertEquals(1, interfaceSel.getLine());
    assertEquals(28, interfaceSel.getColumn());
    assertEquals(1, interfaceSel.getEndLine());
    assertEquals(30, interfaceSel.getEndColumn());
    // "CC"
    interfaceSel = (Selection) i.next();
    assertEquals(1, interfaceSel.getLine());
    assertEquals(30, interfaceSel.getColumn());
    assertEquals(1, interfaceSel.getEndLine());
    assertEquals(32, interfaceSel.getEndColumn());
}
