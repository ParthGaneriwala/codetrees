public void run() {
    if (flashPlayer != null)
        flashPlayer.recreate();
    String SWFPlayerPath = StreamingSettings.getFlashPlayerPath();
    isATeacherBroadCast = false;
    /*
					 * Prepare the 'StartFlashPlayer' message for clients...
					 */
    StreamingControlMessage initReply = new StreamingControlMessage(scmsg);
    initReply.setUsername(ConstantsUtils.TEACHER);
    initReply.setStreamingCmd("StartFlashPlayer");
    Long val = (new Long(service.lastCmdID.longValue() + 1));
    initReply.setCmdID(val.toString());
    synchronized (this) {
        isLocked = true;
        lastStartFlashPlayerMessage = initReply;
        isLocked = false;
        notifyAll();
    }
    final StreamingControlMessage initReplyMsg = new StreamingControlMessage(initReply);
    final Runnable runOnPlayBackStart = new Runnable() {

        public void run() {
            final Timer firstMsgTimer = new Timer();
            firstMsgTimer.schedule(new TimerTask() {

                public void run() {
                    try {
                        service.sendStreamingControlMessage(initReplyMsg);
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            }, timeToWaitRed5);
        }
    };
    flashPlayer.runOnceOnFSCommand(runOnPlayBackStart, fsCmdLstForPlayBackStart);
    // Reset video MetaData to default values before loading new movie...
    currentVideoWidth = videoWidth = 360;
    currentVideoHeight = videoHeight = 270;
    videoLength = 0D;
    timeToWaitRed5 = 1500L;
    if ((scmsg.getStreamingCmd().endsWith("ForBroadcast")) && (!streamingComposite.isRemoteStreaming())) {
        streamTypeForAddContent = "Live BroadCast Started";
        timeToWaitRed5 = RED5_NETWORK_DELAY;
        if (flashPlayer != null)
            flashPlayer.recreate();
        isATeacherBroadCast = true;
        String broadCastSettingsVarsString = "&record=" + StartWebCamDialog.recordBoolean + "&ww=" + String.valueOf(StartWebCamDialog.ResWidths[StartWebCamDialog.indexResolution]) + "&hh=" + String.valueOf(StartWebCamDialog.ResHeights[StartWebCamDialog.indexResolution]) + "&fps=" + String.valueOf(StartWebCamDialog.fpsValue) + "&qlt=" + String.valueOf(StartWebCamDialog.qualityVideoValue) + "&micrate=" + String.valueOf(StartWebCamDialog.micRateValue);
        streamingReport.addStreamingContent(fileName, StreamingService.getCurrentDateAndTime(), streamTypeForAddContent, "");
        flashPlayer.startLiveBroadcast(SWFPlayerPath, scmsg.getAddress(), scmsg.getFilename(), scmsg.getProtocol(), String.valueOf(StartWebCamDialog.inputVideoDevice), broadCastSettingsVarsString, DEFAULT_BUFFER_TIME);
    } else // XXX http test...
    if (scmsg.getStreamingCmd().endsWith("ForHTTP")) {
        streamTypeForAddContent = "PlaybackStarted";
        streamingReport.addStreamingContent(fileName, StreamingService.getCurrentDateAndTime(), streamTypeForAddContent, "");
        flashPlayer.loadRemoteHTTPMovie(SWFPlayerPath, scmsg.getAddress(), scmsg.getFilename(), scmsg.getProtocol(), DEFAULT_BUFFER_TIME);
    } else {
        streamTypeForAddContent = "PlaybackStarted";
        streamingReport.addStreamingContent(fileName, StreamingService.getCurrentDateAndTime(), streamTypeForAddContent, "");
        flashPlayer.loadRemoteRTMPMovie(SWFPlayerPath, scmsg.getAddress(), scmsg.getFilename(), scmsg.getProtocol(), DEFAULT_BUFFER_TIME);
    }
}
