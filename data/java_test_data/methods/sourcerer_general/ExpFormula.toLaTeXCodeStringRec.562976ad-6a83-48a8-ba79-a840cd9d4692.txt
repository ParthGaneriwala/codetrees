private String toLaTeXCodeStringRec(ExpTreenode root, String ParentOp, boolean rightside) {
    String leftstr = "";
    String rightstr = "";
    if (root == null)
        return "";
    if ((!root.op_str.equals("#")) && isPolynomialNoPower(root) && (Terminal.indexOf(root.op_str) < 0)) {
        ArrayList varlist = getVariableList(root);
        boolean OneVar = (varlist.size() == 1);
        if (OneVar) {
            String var = ((String) varlist.get(0)).toLowerCase();
            if (isPolynomialStandardForm(root, var)) {
                boolean includeParens = false;
                if (!ParentOp.equals("")) {
                    if (ParentOp.equals("*"))
                        includeParens = true;
                    if (PowOperator.indexOf(ParentOp) >= 0)
                        includeParens = true;
                    if (ParentOp.equals("-") && rightside)
                        includeParens = true;
                }
                if (includeParens)
                    return "(" + polynomialToLaTeXStringRec(root, var) + ")";
                else
                    return polynomialToLaTeXStringRec(root, var);
            }
        }
    }
    if (Operator.indexOf(root.op_str) >= 0) {
        leftstr = toLaTeXCodeStringRec(root.left, root.op_str, false);
        rightstr = toLaTeXCodeStringRec(root.right, root.op_str, true);
        boolean includeParens = false;
        if (!ParentOp.equals(""))
            if ((Operator.indexOf(root.op_str) >= 0) && (Operator.indexOf(ParentOp) >= 0)) {
                if ((AddOperator.indexOf(root.op_str) >= 0) && ParentOp.equals("*"))
                    includeParens = true;
                if ((AddOperator.indexOf(root.op_str) >= 0) && ParentOp.equals("-") && rightside)
                    includeParens = true;
            }
        String retopstr = "";
        if (includeParens)
            retopstr += " \\left( ";
        if (root.op_str.equals("/"))
            retopstr += " \\frac{ " + leftstr + " }{ " + rightstr + " } ";
        else if (root.op_str.equals("*")) {
            retopstr += leftstr;
            if (includeParens)
                retopstr += " \\right) " + " \\left( ";
            retopstr += rightstr;
        } else if (root.op_str.equals("^"))
            retopstr += " { " + leftstr + " }^{ " + rightstr + " } ";
        else
            retopstr += leftstr + root.op_str + rightstr;
        if (includeParens)
            retopstr += " \\right) ";
        return retopstr;
    } else if (Terminal.indexOf(root.op_str) >= 0) {
        return root.op_str;
    } else if (root.op_str.equals("e")) {
        return "exp(1)";
    } else if (root.op_str.equals("\\pi")) {
        return "Pi";
    } else if (root.op_str.equals("i")) {
        return "I";
    } else if (root.op_str.equals("#")) {
        boolean includeParens = false;
        if (!ParentOp.equals(""))
            if (Operator.indexOf(ParentOp) >= 0) {
                if (root.num.hasTwoTerms())
                    includeParens = true;
                else if (root.num.isReal() && (root.num.getReal().approx() < 0))
                    includeParens = true;
                else if (root.num.isImag() && (root.num.getImag().approx() < 0))
                    includeParens = true;
            }
        if (includeParens)
            return "\\left(" + root.num.toLaTeXString() + "\\right)";
        else
            return root.num.toLaTeXString();
    } else if (!FindFct(root.op_str).equals("")) {
        rightstr = toLaTeXCodeStringRec(root.right, root.op_str, true);
        String fctStr = root.op_str;
        String LaTeXFctStr = "";
        if (root.op_str.equals("exp"))
            LaTeXFctStr = "e^{" + rightstr + "}";
        if (root.op_str.equals("ln"))
            LaTeXFctStr = "\\ln\\left(" + rightstr + "\\right)";
        if (root.op_str.equals("log"))
            LaTeXFctStr = "\\log\\left(" + rightstr + "\\right)";
        if (root.op_str.equals("sin"))
            LaTeXFctStr = "\\sin\\left(" + rightstr + "\\right)";
        if (root.op_str.equals("cos"))
            LaTeXFctStr = "\\cos\\left(" + rightstr + "\\right)";
        if (root.op_str.equals("tan"))
            LaTeXFctStr = "\\tan\\left(" + rightstr + "\\right)";
        if (root.op_str.equals("cot"))
            LaTeXFctStr = "\\cot\\left(" + rightstr + "\\right)";
        if (root.op_str.equals("sec"))
            LaTeXFctStr = "\\sec\\left(" + rightstr + "\\right)";
        if (root.op_str.equals("csc"))
            LaTeXFctStr = "\\csc\\left(" + rightstr + "\\right)";
        if (root.op_str.equals("sinh"))
            LaTeXFctStr = "{\\rm sinh}\\left(" + rightstr + "\\right)";
        if (root.op_str.equals("cosh"))
            LaTeXFctStr = "{\\rm cosh}\\left(" + rightstr + "\\right)";
        if (root.op_str.equals("tanh"))
            LaTeXFctStr = "{\\rm tanh}\\left(" + rightstr + "\\right)";
        if (root.op_str.equals("coth"))
            LaTeXFctStr = "{\\rm coth}\\left(" + rightstr + "\\right)";
        if (root.op_str.equals("sech"))
            LaTeXFctStr = "{\\rm sech}\\left(" + rightstr + "\\right)";
        if (root.op_str.equals("csch"))
            LaTeXFctStr = "{\\rm csch}\\left(" + rightstr + "\\right)";
        if (root.op_str.equals("abs"))
            LaTeXFctStr = "\\left|" + rightstr + "\\right|";
        if (root.op_str.equals("mod"))
            LaTeXFctStr = "\\left|" + rightstr + "\\right|";
        if (root.op_str.equals("arg"))
            LaTeXFctStr = "{\\rm arg}\\left(" + rightstr + "\\right)";
        if (root.op_str.equals("sign"))
            LaTeXFctStr = "{\\rm sign}\\left(" + rightstr + "\\right)";
        if (root.op_str.equals("zeron"))
            LaTeXFctStr = "{\\rm zeron}\\left(" + rightstr + "\\right)";
        if (root.op_str.equals("asin"))
            LaTeXFctStr = "\\sin^{-1}\\left(" + rightstr + "\\right)";
        if (root.op_str.equals("acos"))
            LaTeXFctStr = "\\cos^{-1}\\left(" + rightstr + "\\right)";
        if (root.op_str.equals("atan"))
            LaTeXFctStr = "\\tan^{-1}\\left(" + rightstr + "\\right)";
        if (root.op_str.equals("acot"))
            LaTeXFctStr = "\\cot^{-1}\\left(" + rightstr + "\\right)";
        if (root.op_str.equals("asec"))
            LaTeXFctStr = "\\sec^{-1}\\left(" + rightstr + "\\right)";
        if (root.op_str.equals("acsc"))
            LaTeXFctStr = "\\csc^{-1}\\left(" + rightstr + "\\right)";
        if (root.op_str.equals("asinh"))
            LaTeXFctStr = "{\\rm sinh}^{-1}\\left(" + rightstr + "\\right)";
        if (root.op_str.equals("acosh"))
            LaTeXFctStr = "{\\rm cosh}^{-1}\\left(" + rightstr + "\\right)";
        if (root.op_str.equals("atanh"))
            LaTeXFctStr = "{\\rm tanh}^{-1}\\left(" + rightstr + "\\right)";
        if (root.op_str.equals("acoth"))
            LaTeXFctStr = "{\\rm coth}^{-1}\\left(" + rightstr + "\\right)";
        if (root.op_str.equals("asech"))
            LaTeXFctStr = "{\\rm sech}^{-1}\\left(" + rightstr + "\\right)";
        if (root.op_str.equals("acsch"))
            LaTeXFctStr = "{\\rm csch}^{-1}\\left(" + rightstr + "\\right)";
        return LaTeXFctStr;
    }
    // Should not happen.
    return "";
}
