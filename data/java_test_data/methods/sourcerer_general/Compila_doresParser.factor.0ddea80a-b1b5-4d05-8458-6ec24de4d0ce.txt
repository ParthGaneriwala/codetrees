// $ANTLR start "factor"
public final Compila_doresParser.factor_return factor() throws RecognitionException {
    Compila_doresParser.factor_return retval = new Compila_doresParser.factor_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Compila_doresParser.number_return number162 = null;
    Compila_doresParser.str_return str163 = null;
    Compila_doresParser.bool_return bool164 = null;
    Compila_doresParser.id_return id165 = null;
    Compila_doresParser.call_return call166 = null;
    Compila_doresParser.index_return index167 = null;
    try {
        // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:252:2: ( number | str | bool | id | call | index )
        int alt40 = 6;
        switch(input.LA(1)) {
            case INTEGER:
                {
                    alt40 = 1;
                }
                break;
            case STRING:
                {
                    alt40 = 2;
                }
                break;
            case TRUE:
            case FALSE:
                {
                    alt40 = 3;
                }
                break;
            case ID:
                {
                    switch(input.LA(2)) {
                        case LPAR:
                            {
                                alt40 = 5;
                            }
                            break;
                        case LBR:
                            {
                                alt40 = 6;
                            }
                            break;
                        case PLUS:
                        case MINUS:
                        case MULT:
                        case DIV:
                        case MOD:
                        case AND:
                        case OR:
                        case EQUAL:
                        case DIF1:
                        case DIF2:
                        case GTE:
                        case LTE:
                        case GT:
                        case LT:
                        case THEN:
                        case TO:
                        case STEP:
                        case COMMA:
                        case RPAR:
                        case RBR:
                        case EOL:
                            {
                                alt40 = 4;
                            }
                            break;
                        default:
                            NoViableAltException nvae = new NoViableAltException("", 40, 4, input);
                            throw nvae;
                    }
                }
                break;
            default:
                NoViableAltException nvae = new NoViableAltException("", 40, 0, input);
                throw nvae;
        }
        switch(alt40) {
            case 1:
                // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:252:4: number
                {
                    root_0 = (CommonTree) adaptor.nil();
                    pushFollow(FOLLOW_number_in_factor1702);
                    number162 = number();
                    state._fsp--;
                    adaptor.addChild(root_0, number162.getTree());
                }
                break;
            case 2:
                // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:253:4: str
                {
                    root_0 = (CommonTree) adaptor.nil();
                    pushFollow(FOLLOW_str_in_factor1707);
                    str163 = str();
                    state._fsp--;
                    adaptor.addChild(root_0, str163.getTree());
                }
                break;
            case 3:
                // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:254:4: bool
                {
                    root_0 = (CommonTree) adaptor.nil();
                    pushFollow(FOLLOW_bool_in_factor1712);
                    bool164 = bool();
                    state._fsp--;
                    adaptor.addChild(root_0, bool164.getTree());
                }
                break;
            case 4:
                // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:255:4: id
                {
                    root_0 = (CommonTree) adaptor.nil();
                    pushFollow(FOLLOW_id_in_factor1717);
                    id165 = id();
                    state._fsp--;
                    adaptor.addChild(root_0, id165.getTree());
                }
                break;
            case 5:
                // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:256:4: call
                {
                    root_0 = (CommonTree) adaptor.nil();
                    pushFollow(FOLLOW_call_in_factor1722);
                    call166 = call();
                    state._fsp--;
                    adaptor.addChild(root_0, call166.getTree());
                }
                break;
            case 6:
                // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:257:4: index
                {
                    root_0 = (CommonTree) adaptor.nil();
                    pushFollow(FOLLOW_index_in_factor1727);
                    index167 = index();
                    state._fsp--;
                    adaptor.addChild(root_0, index167.getTree());
                }
                break;
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
