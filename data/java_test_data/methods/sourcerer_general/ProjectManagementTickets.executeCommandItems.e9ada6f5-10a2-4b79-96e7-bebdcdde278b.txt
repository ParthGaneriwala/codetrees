public String executeCommandItems(ActionContext context) {
    // Parameters
    String value = context.getRequest().getParameter("source");
    StringTokenizer st = new StringTokenizer(value, "|");
    String source = st.nextToken();
    String status = st.nextToken();
    String id = st.nextToken();
    Connection db = null;
    try {
        db = getConnection(context);
        if ("contacts".equals(source)) {
            // Determine data to search for
            ContactSearchBean searchCriteria = new ContactSearchBean();
            searchCriteria.setMethod(ContactSearchBean.JOIN_OR);
            searchCriteria.setFirstName(id);
            searchCriteria.setLastName(id);
            searchCriteria.setOrganization(id);
            searchCriteria.setEmail(id);
            // Perform the contact search
            ContactList contacts = new ContactList();
            contacts.setSearchCriteria(searchCriteria);
            contacts.setForUser(getUserId(context));
            if (getUser(context).getAccessViewAllContacts()) {
                contacts.setIncludeAllGlobal(Constants.TRUE);
            }
            contacts.buildList(db);
            context.getRequest().setAttribute("contacts", contacts);
            return ("MakeContactListOK");
        } else if ("my".equals(source) || "all".equals(source) || "this".equals(source)) {
            // Load the project and check permissions
            Project thisProject = retrieveAuthorizedProject(Integer.parseInt(id), context);
            // Prepare list of team members
            TeamMemberList team = new TeamMemberList();
            team.setProjectId(Integer.parseInt(id));
            // Check permission first
            if (hasProjectAccess(context, thisProject.getId(), "project-team-view")) {
                team.buildList(db);
            }
            context.getRequest().setAttribute("team", team);
            return ("MakeTeamMemberListOK");
        }
        if ("dept".equals(source) && "true".equals(getPref(context, "DEPARTMENT"))) {
            // Load departments and get the contacts
            UserList users = new UserList();
            users.setDepartmentId(Integer.parseInt(id));
            users.buildList(db);
            context.getRequest().setAttribute("UserList", users);
            return ("MakeUserListOK");
        }
    } catch (Exception e) {
        e.printStackTrace(System.out);
    } finally {
        freeConnection(context, db);
    }
    return null;
}
