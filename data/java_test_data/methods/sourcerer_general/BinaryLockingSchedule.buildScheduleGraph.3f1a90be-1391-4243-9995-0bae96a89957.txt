// [end]
@Override
public ScheduleGraph buildScheduleGraph() {
    // TODO: Completar
    // Se deben agregar arcos entre T1 -> T2 cuando:
    // - T1 hace lock de un ï¿½tem A y T2 hace lock de A
    // OBS: No agregar arcos que se deducen por transitividad
    ScheduleGraph sg = new ScheduleGraph();
    for (String transaccion : getTransactions()) {
        sg.addTransaction(transaccion);
    }
    Map<String, List<Par<BinaryLockingAction, Integer>>> operXItem;
    operXItem = new HashMap<String, List<Par<BinaryLockingAction, Integer>>>();
    for (String item : getItems()) {
        operXItem.put(item, new LinkedList<Par<BinaryLockingAction, Integer>>());
    }
    int i = 1;
    // separo acciones por item para hacer mas facil la busqueda de ejes
    for (Action accionGenerica : getActions()) {
        BinaryLockingAction accion = (BinaryLockingAction) accionGenerica;
        // solo guardamos los locks
        if (accion.getType().equals(BinaryLockingActionType.LOCK)) {
            // al igual que antes, el indice sirve para saber en
            // que parte de la historia esta la accion
            operXItem.get(accion.getItem()).add(new Par<BinaryLockingAction, Integer>(accion, i));
        }
        i = i + 1;
    }
    // diccionario para evitar ejes repetidos
    Map<String, Set<String>> ejesYaPuestos = new HashMap<String, Set<String>>();
    for (String transaccion : getTransactions()) {
        ejesYaPuestos.put(transaccion, new HashSet<String>());
    }
    for (String item : getItems()) {
        List<Par<BinaryLockingAction, Integer>> operaciones = operXItem.get(item);
        int tam = operaciones.size();
        for (int j = 0; j < tam - 1; j++) {
            BinaryLockingAction operacionActual = operaciones.get(0).fst;
            Integer indiceActual = operaciones.get(0).snd;
            String transaccionActual = operacionActual.getTransaction();
            operaciones.remove(0);
            String proximaTransaccion = operaciones.get(0).fst.getTransaction();
            /* si es la misma transaccion, paro de buscar ejes porque los agarro
                 * la siguiente accion
                 */
            if (!(proximaTransaccion == transaccionActual)) {
                // si se genera un eje nuevo, lo agrego
                if (!ejesYaPuestos.get(transaccionActual).contains(proximaTransaccion)) {
                    sg.addArc(new ScheduleArc(transaccionActual, proximaTransaccion, indiceActual, operaciones.get(0).snd));
                    ejesYaPuestos.get(transaccionActual).add(proximaTransaccion);
                }
            } else {
                break;
            }
        }
    }
    return sg;
}
