public int execute() {
    try {
        // Create a file system handle
        FileSystem fs = FileSystem.get(conf);
        // to appropriate locations
        for (loadFileDesc lfd : work.getLoadFileWork()) {
            Path targetPath = new Path(lfd.getTargetDir());
            Path sourcePath = new Path(lfd.getSourceDir());
            cleanseSource(fs, sourcePath);
            if (lfd.getIsDfsDir()) {
                // Just do a rename on the URIs
                String mesg = "Moving data to: " + lfd.getTargetDir();
                String mesg_detail = " from " + lfd.getSourceDir();
                console.printInfo(mesg, mesg_detail);
                // delete the output directory if it already exists
                fs.delete(targetPath, true);
                // if source exists, rename. Otherwise, create a empty directory
                if (fs.exists(sourcePath))
                    fs.rename(sourcePath, targetPath);
                else
                    fs.mkdirs(targetPath);
            } else {
                // This is a local file
                String mesg = "Copying data to local directory " + lfd.getTargetDir();
                String mesg_detail = " from " + lfd.getSourceDir();
                console.printInfo(mesg, mesg_detail);
                // delete the existing dest directory
                LocalFileSystem dstFs = FileSystem.getLocal(fs.getConf());
                if (dstFs.delete(targetPath, true) || !dstFs.exists(targetPath)) {
                    console.printInfo(mesg, mesg_detail);
                    // if source exists, rename. Otherwise, create a empty directory
                    if (fs.exists(sourcePath))
                        fs.copyToLocalFile(sourcePath, targetPath);
                    else
                        dstFs.mkdirs(targetPath);
                } else {
                    console.printInfo("Unable to delete the existing destination directory: " + targetPath);
                }
            }
        }
        // Next we do this for tables and partitions
        for (loadTableDesc tbd : work.getLoadTableWork()) {
            String mesg = "Loading data to table " + tbd.getTable().getTableName() + ((tbd.getPartitionSpec().size() > 0) ? " partition " + tbd.getPartitionSpec().toString() : "");
            String mesg_detail = " from " + tbd.getSourceDir();
            console.printInfo(mesg, mesg_detail);
            if (tbd.getPartitionSpec().size() == 0) {
                db.loadTable(new Path(tbd.getSourceDir()), tbd.getTable().getTableName(), tbd.getReplace());
            } else {
                LOG.info("Partition is: " + tbd.getPartitionSpec().toString());
                db.loadPartition(new Path(tbd.getSourceDir()), tbd.getTable().getTableName(), tbd.getPartitionSpec(), tbd.getReplace());
            }
        }
        return 0;
    } catch (Exception e) {
        console.printError("Failed with exception " + e.getMessage(), "\n" + StringUtils.stringifyException(e));
        return (1);
    }
}
