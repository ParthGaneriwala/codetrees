public static final Map parse(Map map, String src, char separator, char quote, boolean asValue, boolean multiple, boolean parenthesis) throws IllegalSyntaxException {
    if (separator == (char) 0)
        throw new IllegalArgumentException("Separator cannot be 0");
    if (map == null)
        map = new HashMap();
    if (src == null || src.length() == 0)
        // nothing to do
        return map;
    // prepare delimiters for keys and values.
    final String delimValue, delimKey;
    final boolean sngldblquote = quote == (char) 1;
    {
        final StringBuffer delimsb = new StringBuffer().append(separator);
        if (sngldblquote) {
            delimsb.append("\"'");
            quote = '"';
        } else if (quote != (char) 0) {
            delimsb.append(quote);
        }
        delimValue = delimsb.toString();
        delimKey = delimsb.append('=').toString();
    }
    // parse
    for (int j = 0, len = src.length(); ; ) {
        // handle name
        Token tk = next(src, delimKey, j, true, parenthesis);
        // if (D.ON && log.finerable()) log.finer("name: "+tk.token+" "+tk.cc);
        j = tk.next;
        String name = tk.token;
        switch(tk.cc) {
            case '=':
                if (name.length() == 0)
                    throw newIllegalSyntaxException(MCommon.UNEXPECTED_CHARACTER, tk.cc, src);
                // skip =
                ++j;
                break;
            case (char) 0:
                // assert tk.next >= len;
                if (name.length() > 0)
                    if (asValue)
                        put(map, null, name, multiple);
                    else
                        put(map, name, null, multiple);
                // done
                return map;
            default:
                if (quote != (char) 0 && (tk.cc == quote || (sngldblquote && tk.cc == '\''))) {
                    name = null;
                    // value only
                    break;
                }
                // If separator is ' ', tk.cc can be anything; see next()
                if ((separator != ' ' && tk.cc != separator) || name.length() == 0)
                    throw newIllegalSyntaxException(MCommon.UNEXPECTED_CHARACTER, tk.cc, src);
                if (asValue)
                    put(map, null, name, multiple);
                else
                    put(map, name, null, multiple);
                if (tk.cc == separator)
                    // skip separator
                    ++j;
                continue;
        }
        // handle value
        tk = next(src, delimValue, j, false, parenthesis);
        // if (D.ON && log.finerable()) log.finer("value: "+tk.token+" "+tk.cc);
        j = tk.next;
        final String value = tk.token;
        if (quote != (char) 0 && (tk.cc == quote || (sngldblquote && tk.cc == '\''))) {
            if (value.length() > 0)
                throw newIllegalSyntaxException(MCommon.UNEXPECTED_CHARACTER, tk.cc, src);
            final StringBuffer valsb = new StringBuffer(32);
            for (; ; ) {
                if (++j == len)
                    throw newIllegalSyntaxException(MCommon.EXPECTING_CHARACTER, tk.cc, src);
                final char cc = src.charAt(j);
                if (cc == tk.cc)
                    break;
                valsb.append(cc == '\\' ? escape(src, ++j) : cc);
            }
            put(map, name, valsb.toString(), multiple);
            // skip the closing ' or "
            ++j;
        } else {
            put(map, name, value, multiple);
        }
        if (separator != ' ') {
            // If not ' ', ensure the following is a separator
            j = Strings.skipWhitespaces(src, j);
            if (j >= len)
                return map;
            if (src.charAt(j) != separator)
                throw newIllegalSyntaxException(MCommon.EXPECTING_CHARACTER, separator, src);
            // skip separator
            ++j;
        }
    }
}
