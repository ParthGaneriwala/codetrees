public LinkedList<MoveData> findPath(Coordinate pStart, Coordinate pDest) {
    aShip.setLocation(pStart);
    aShip.setPathfinding(true);
    long time = System.currentTimeMillis();
    long endTime = time + 300;
    PriorityQueueFastLookup<SearchNode<MoveData>> lOpenList = new PriorityQueueFastLookup<SearchNode<MoveData>>();
    HashSet<MoveData> lClosedList = new HashSet<MoveData>();
    Coordinate pStartLoc = aShip.getLocation();
    Direction pStartDir = aShip.getDirection();
    SearchNode<MoveData> lStartNode = new SearchNode<MoveData>(new MoveData(pStartLoc, pStartDir), null, 0.0, aHeuristic.getValue(pStartLoc, pDest));
    lOpenList.add(lStartNode);
    while (true) {
        if (System.currentTimeMillis() > endTime) {
            aShip.setLocation(pStartLoc);
            aShip.setDirection(pStartDir);
            LinkedList<MoveData> best = new LinkedList<MoveData>();
            double min = Double.MAX_VALUE;
            MoveData bestData = null;
            Set<MoveData> fringe;
            if (aShip.getLocation().directDistanceTo(pDest) < aShip.getSpeed())
                fringe = getNextStates();
            else
                fringe = getMovementFringe();
            for (MoveData m : fringe) {
                double distance = m.location.directDistanceTo(pDest);
                if (distance < min) {
                    min = distance;
                    bestData = m;
                }
            }
            best.add(bestData);
            if (Application.enableDebug)
                System.out.println(System.currentTimeMillis() - time + "ms - gave up pathfinding!");
            aShip.setPathfinding(false);
            // Take the best step toward the goal
            return best;
        }
        if (lOpenList.isEmpty()) {
            aShip.setLocation(pStartLoc);
            aShip.setDirection(pStartDir);
            aShip.setPathfinding(false);
            if (Application.enableDebug)
                System.out.println(System.currentTimeMillis() - time + "ms - no solution!");
            // There is no solution!
            return null;
        }
        SearchNode<MoveData> lParentNode = lOpenList.getMin();
        lClosedList.add(lParentNode.getData());
        if (lParentNode.getData().location.equals(pDest)) {
            aShip.setLocation(pStartLoc);
            aShip.setDirection(pStartDir);
            aShip.setPathfinding(false);
            if (Application.enableDebug)
                System.out.println(System.currentTimeMillis() - time + "ms to pathfind");
            return finalizeChannel(lParentNode);
        }
        aShip.setLocation(lParentNode.getData().location, true);
        aShip.setDirection(lParentNode.getData().direction, true);
        Set<MoveData> lNextStates;
        if (aShip.getLocation().directDistanceTo(pDest) < aShip.getSpeed())
            lNextStates = getNextStates();
        else
            lNextStates = getMovementFringe();
        for (MoveData lChild : lNextStates) {
            if (lClosedList.contains(lChild)) {
                continue;
            }
            double lGScore = lParentNode.getGScore() + 1;
            double lHScore = aHeuristic.getValue(lChild.location, pDest);
            SearchNode<MoveData> lChildNode = new SearchNode<MoveData>(lChild, lParentNode, lGScore, lHScore);
            SearchNode<MoveData> lTemp = lOpenList.getRef(lChildNode);
            if (lTemp != null) {
                // This will update the G score and re-heapify the priority queue
                lOpenList.remove(lChildNode);
            }
            lOpenList.add(lChildNode);
        }
    }
}
