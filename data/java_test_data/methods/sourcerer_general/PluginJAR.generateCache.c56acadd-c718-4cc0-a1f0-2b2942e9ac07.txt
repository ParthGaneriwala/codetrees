// }}}
public PluginCacheEntry generateCache() throws IOException {
    properties = new Properties();
    List<String> classes = new LinkedList<String>();
    ZipFile zipFile = getZipFile();
    List<String> plugins = new LinkedList<String>();
    PluginCacheEntry cache = new PluginCacheEntry();
    cache.modTime = file.lastModified();
    cache.cachedProperties = new Properties();
    Enumeration<? extends ZipEntry> entries = zipFile.entries();
    while (entries.hasMoreElements()) {
        ZipEntry entry = entries.nextElement();
        String name = entry.getName();
        String lname = name.toLowerCase();
        if (lname.equals("actions.xml")) {
            cache.actionsURI = classLoader.getResource(name);
        } else if (lname.equals("browser.actions.xml")) {
            cache.browserActionsURI = classLoader.getResource(name);
        } else if (lname.equals("dockables.xml")) {
            dockablesURI = classLoader.getResource(name);
            cache.dockablesURI = dockablesURI;
        } else if (lname.equals("services.xml")) {
            servicesURI = classLoader.getResource(name);
            cache.servicesURI = servicesURI;
        } else if (lname.endsWith(".props")) {
            InputStream in = classLoader.getResourceAsStream(name);
            properties.load(in);
            in.close();
        } else if (name.endsWith(".class")) {
            String className = MiscUtilities.fileToClass(name);
            if (className.endsWith("Plugin")) {
                plugins.add(className);
            }
            classes.add(className);
        }
    }
    cache.cachedProperties = properties;
    jEdit.addPluginProps(properties);
    this.classes = cache.classes = classes.toArray(new String[classes.size()]);
    String label = null;
    for (String className : plugins) {
        String _label = jEdit.getProperty("plugin." + className + ".name");
        String version = jEdit.getProperty("plugin." + className + ".version");
        if (_label == null || version == null) {
            Log.log(Log.WARNING, this, "Ignoring: " + className);
        } else {
            cache.pluginClass = className;
            // is already loaded
            if (jEdit.getPlugin(className) != null) {
                jEdit.pluginError(path, "plugin-error.already-loaded", null);
                return null;
            }
            plugin = new EditPlugin.Deferred(this, className);
            label = _label;
            break;
        }
    }
    if (cache.actionsURI != null) {
        actions = new ActionSet(this, null, null, cache.actionsURI);
        actions.load();
        cache.cachedActionNames = actions.getCacheableActionNames();
        cache.cachedActionToggleFlags = new boolean[cache.cachedActionNames.length];
        for (int i = 0; i < cache.cachedActionNames.length; i++) {
            cache.cachedActionToggleFlags[i] = jEdit.getBooleanProperty(cache.cachedActionNames[i] + ".toggle");
        }
    }
    if (cache.browserActionsURI != null) {
        browserActions = new ActionSet(this, null, null, cache.browserActionsURI);
        browserActions.load();
        VFSBrowser.getActionContext().addActionSet(browserActions);
        cache.cachedBrowserActionNames = browserActions.getCacheableActionNames();
        cache.cachedBrowserActionToggleFlags = new boolean[cache.cachedBrowserActionNames.length];
        for (int i = 0; i < cache.cachedBrowserActionNames.length; i++) {
            cache.cachedBrowserActionToggleFlags[i] = jEdit.getBooleanProperty(cache.cachedBrowserActionNames[i] + ".toggle");
        }
    }
    if (dockablesURI != null) {
        DockableWindowFactory.getInstance().loadDockableWindows(this, dockablesURI, cache);
    }
    if (actions.size() != 0) {
        if (label != null) {
            actions.setLabel(jEdit.getProperty("action-set.plugin", new String[] { label }));
        } else
            actionsPresentButNotCoreClass();
        jEdit.addActionSet(actions);
    }
    if (servicesURI != null) {
        ServiceManager.loadServices(this, servicesURI, cache);
    }
    return cache;
}
