public String runFlow(ChainFlow chainFlow, ChainContext chainContext) throws FlowException {
    Socket socket = null;
    BufferedReader in = null;
    PrintWriter out = null;
    try {
        if (log.isInfoEnabled()) {
            log.info("Start to run the socket flow [" + chainFlow.getFlowName() + "]");
        }
        chainContext.addSimuList("<font color=blue><b> Start to run the socket flow [" + chainFlow.getFlowCode() + "] </b></font>");
        if ("Y".equals(chainFlow.getSkipYn())) {
            if (log.isInfoEnabled()) {
                log.info("Socket flow [" + chainFlow.getFlowName() + "]: skipFlag=true");
            }
            chainContext.addSimuList("Socket flow [" + chainFlow.getFlowName() + "]: skipFlag=true<br>=================");
            return "0";
        }
        List script = chainFlow.getScripts();
        if (script.size() < 1) {
            if (log.isInfoEnabled()) {
                log.info("Socket flow [" + chainFlow.getFlowName() + "]: there is no statement");
            }
            chainContext.addSimuList("Socket flow [" + chainFlow.getFlowName() + "]: there is no statement<br>=================");
            return "0";
        }
        String address = this.getChainFlow().getAttr1();
        String port = this.getChainFlow().getAttr2();
        if (StringUtils.isNotEmpty(address) && StringUtils.isNotEmpty(port)) {
            socket = new Socket(address, Integer.parseInt(port));
        } else {
            if (log.isInfoEnabled()) {
                log.info("The socket parameters error!");
            }
            chainContext.addSimuList("Socket flow [" + chainFlow.getFlowName() + "]: The socket parameters error!<br>=================");
            return "0";
        }
        String returnStr = "";
        for (int i = 0; i < script.size(); i++) {
            socket.setSoTimeout(2000);
            in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            out = new PrintWriter(socket.getOutputStream(), true);
            String sqlstr = (String) script.get(i);
            Iterator iter = chainContext.getDataMapIterator();
            while (iter.hasNext()) {
                DataMapping dataMapping = (DataMapping) iter.next();
                sqlstr = StringUtils.replace(sqlstr, dataMapping.getFieldName(), dataMapping.getFieldMapping());
            }
            sqlstr = FormulaFactory.getInstance().run(sqlstr);
            out.println(sqlstr);
            returnStr = in.readLine();
        }
        DataMapping dataMapping = new DataMapping();
        dataMapping.setFieldName(Constants.SEPARATOR_SYSTEM + Constants.VAR_SOCKET_RESULT + Constants.SEPARATOR_SYSTEM);
        dataMapping.setFieldValue(returnStr);
        dataMapping.setFieldMapping(returnStr);
        chainContext.addDataMap(dataMapping.getFieldName(), dataMapping);
        log.info("Socket result: " + returnStr);
        log.info("SocketFlow::runFlow OK");
        chainContext.addSimuList("Socket result: " + returnStr);
        chainContext.addSimuList("SocketFlowImp::runFlow OK<br>--------------------------------");
        return "0";
    } catch (Exception e) {
        log.error("Socket Flow :" + e.getMessage());
        try {
            onError(chainFlow, chainContext, 98);
        } catch (Exception ex) {
        // TODO
        }
        return "98";
    } finally {
        try {
            if (out != null) {
                out.close();
            }
            if (in != null) {
                in.close();
            }
            if (socket != null) {
                socket.close();
            }
        } catch (Exception ex) {
        // TODO
        }
    }
}
