public void resolveComments() {
    methodLoop: for (MethodDesc md : methodDescs) {
        // Build the method signature
        String methodSig;
        if (md.returnType != null) {
            md.returnType = md.returnType.resolveAsType();
            if (md.returnType == null) {
                continue;
            }
            methodSig = getTypeString(md.returnType) + " " + md.name + "(";
        } else {
            // constructor
            methodSig = md.name + "(";
        }
        Iterator<JavaEntity> i = md.paramTypes.iterator();
        while (i.hasNext()) {
            JavaEntity paramEnt = i.next();
            if (paramEnt == null) {
                continue methodLoop;
            }
            TypeEntity paramType = paramEnt.resolveAsType();
            if (paramType == null) {
                continue methodLoop;
            }
            methodSig += getTypeString(paramType);
            if (i.hasNext()) {
                methodSig += ", ";
            }
        }
        methodSig += ")";
        md.paramNames = md.paramNames.trim();
        info.addComment(methodSig, md.javadocText, md.paramNames);
    }
    // Now also resolve references
    for (JavaEntity entity : typeReferences) {
        entity = entity.resolveAsType();
        if (entity != null) {
            JavaType etype = entity.getType();
            if (!etype.isPrimitive()) {
                addTypeReference(etype);
            }
        }
    }
    refloop: for (UnresolvedVal val : valueReferences) {
        Iterator<LocatableToken> i = val.components.iterator();
        String name = i.next().getText();
        JavaEntity entity = val.resolver.getValueEntity(name, val.accessSource);
        if (entity != null && entity.resolveAsValue() != null) {
            continue refloop;
        }
        while (entity != null && i.hasNext()) {
            TypeEntity typeEnt = entity.resolveAsType();
            if (typeEnt != null && !typeEnt.getType().isPrimitive()) {
                addTypeReference(entity.getType());
            }
            entity = entity.getSubentity(i.next().getText(), val.accessSource);
            if (entity != null && entity.resolveAsValue() != null) {
                continue refloop;
            }
        }
        if (!i.hasNext() && entity != null) {
            TypeEntity typeEnt = entity.resolveAsType();
            if (typeEnt != null && !typeEnt.getType().isPrimitive()) {
                addTypeReference(entity.getType());
            }
        }
    }
    if (superclassEntity != null) {
        superclassEntity = superclassEntity.resolveAsType();
        if (superclassEntity != null) {
            JavaType sceType = superclassEntity.getType();
            GenTypeClass scecType = sceType.asClass();
            if (scecType != null) {
                info.setSuperclass(scecType.getReflective().getName());
            }
        }
    }
    if (interfaceEntities != null && !interfaceEntities.isEmpty()) {
        for (JavaEntity ifaceEnt : interfaceEntities) {
            TypeEntity iEnt = ifaceEnt.resolveAsType();
            if (iEnt != null) {
                GenTypeClass iType = iEnt.getType().asClass();
                if (iType != null) {
                    info.addImplements(iType.getReflective().getName());
                    continue;
                }
            }
            // gap filler
            info.addImplements("");
        }
    }
}
