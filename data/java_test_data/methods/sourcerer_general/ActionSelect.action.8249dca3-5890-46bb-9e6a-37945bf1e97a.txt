@Override
public void action(Message request, Message response) {
    String userId = (String) request.get(MSG.REQUEST.USER_ID);
    String tableName = (String) request.get(MSG.REQUEST.TABLE_NAME);
    Condition condition = (Condition) request.get(MSG.REQUEST.CONDITION);
    // SELECT 메시지를 생성한다.
    Message msg = new Message();
    msg.set(MSG.REQUEST.USER_ID, userId);
    msg.set(MSG.REQUEST.TABLE_NAME, tableName);
    msg.set(MSG.ACTION, MSG.REQUEST.SELECT);
    msg.set(MSG.REQUEST.CONDITION, condition);
    // 연결 요청용 MapReduce 를 생성해서, 요청을 뿌려준다.
    MapReduce mapReduce = new MapReduce(manager.getConnections());
    Message[] responses = null;
    try {
        responses = mapReduce.map(msg);
    } catch (InterruptedException e) {
        e.printStackTrace();
        response.setFailed(e.getMessage());
        return;
    }
    // 결과를 담아줄 리포지토리 정보
    List<RepositoryInfo> repositories = new ArrayList<RepositoryInfo>();
    // 결과를 종합한다.
    for (Message res : responses) {
        boolean hasData = (Boolean) res.get(MSG.RESPONSE.HAS_SELECTION_DATA);
        if (hasData) {
            String rid = (String) res.get(MSG.RESPONSE.RID);
            String channel = (String) res.get(MSG.RESPONSE.REPOSITORY_CHANNEL);
            String ip = (String) res.get(MSG.RESPONSE.REPOSITORY_IP);
            int port = (Integer) res.get(MSG.RESPONSE.REPOSITORY_PORT);
            repositories.add(new RepositoryInfo(rid, ip, port, channel));
        }
    }
    // 결과 메시지를 만들어준다. 리포지토리 정보를 담아준다.
    response.setSuccessed();
    response.set(MSG.RESPONSE.REPOSITORIES, repositories);
}
