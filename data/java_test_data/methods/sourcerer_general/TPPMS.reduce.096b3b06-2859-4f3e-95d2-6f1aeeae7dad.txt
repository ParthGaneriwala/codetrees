public static int reduce(Table iTable, File iWorkDir, File iOutputFile, int inTotalSublist, int nPhase, int[] inField, int inOrder, int inMemorySize) throws IOException, RecordException {
    int nLength = iTable.getLengthTotal();
    int nRecordAmount = (int) Math.floor((double) inMemorySize / nLength);
    int nOutputBufferSize = nRecordAmount / 5;
    int nInputBufferCount = (int) Math.floor(Math.sqrt(nRecordAmount - nOutputBufferSize));
    int nInputBufferSize = (nRecordAmount - nOutputBufferSize) / nInputBufferCount;
    int nOutputBufferCount = 1;
    int nBegSublist;
    int nEndSublist;
    int nSubSublistCount = Math.min(inTotalSublist, nInputBufferCount);
    int nSmallestIndex;
    // int nSubSublistIndex = 0;
    ProjectGUI.getInstance().update("Memory Execution: " + iTable.getName() + " merge ", 2);
    ProjectGUI.getInstance().update(0, nInputBufferSize * nInputBufferCount * nLength, ProjectGUI.getGI(0, 0, 1, nInputBufferSize * nInputBufferCount * nLength, iTable));
    ProjectGUI.getInstance().update(1, nOutputBufferSize * nOutputBufferCount * nLength, ProjectGUI.getGO(0, 1, nOutputBufferSize * nOutputBufferCount * nLength, iOutputFile));
    for (int nSubSublistIndex = 0; nSubSublistIndex * nSubSublistCount < inTotalSublist; nSubSublistIndex++) {
        nBegSublist = nSubSublistIndex * nSubSublistCount;
        nEndSublist = Math.min((nSubSublistIndex + 1) * nSubSublistCount, inTotalSublist);
        nInputBufferCount = nEndSublist - nBegSublist;
        TableInputBuffer[] iBuffer = new TableInputBuffer[nInputBufferCount];
        // Load data into input buffer
        for (int i = nBegSublist; i < nEndSublist; i++) {
            iBuffer[i - nBegSublist] = new TableInputBuffer(iTable, getSublistFile(iWorkDir, nPhase - 1, i), nInputBufferSize, i - nBegSublist);
        }
        Utils.clear(getSublistFile(iWorkDir, nPhase, nSubSublistIndex, iOutputFile, (int) Math.ceil((double) inTotalSublist / nSubSublistCount)));
        TableOutputBuffer oBuffer = new TableOutputBuffer(iTable, getSublistFile(iWorkDir, nPhase, nSubSublistIndex, iOutputFile, (int) Math.ceil((double) inTotalSublist / nSubSublistCount)), nOutputBufferSize, nInputBufferCount);
        // Add smallest to output buffer.
        while ((nSmallestIndex = smallest(iBuffer, inField, inOrder)) != -1) {
            oBuffer.write(iBuffer[nSmallestIndex].read());
            ProjectGUI.getInstance().hasBreak();
        }
        oBuffer.flush();
    }
    return (int) Math.ceil((double) inTotalSublist / Math.min(inTotalSublist, nSubSublistCount));
}
