public static void readData(ArrayList<Exon> exons, BufferedReader br) {
    int exonIndex = 0;
    // TODO: move this up so pileups are stored between iterations
    // TODO: might be missing some pileups here
    ArrayList<Pileup> Pileups = new ArrayList<Pileup>();
    String line = null;
    try {
        int count = 0;
        Exon e = exons.get(exonIndex);
        while ((line = br.readLine()) != null) {
            count++;
            Pileup p = new Pileup(line);
            Pileups.add(p);
            if (count % 1000000 == 0)
                System.out.println(p + "\t" + Pileups.size());
            if (// reached end of chromosome
            e.chr > p.chromosome) {
                // System.out.println(e + "==" + p);
                Pileups.clear();
                continue;
            }
            // break;
            while (!Pileups.isEmpty() && e.posLeft > Pileups.get(0).position) // remove until that point
            Pileups.remove(0);
            if (e.containsPosition(p.position)) {
                if (p.heterozygous != 0 || p.homozygous != 0)
                    e.SNPPositions.put(p.position, p.heterozygous);
                e.FPKM += p.coverage;
                e.numPileupPositions++;
            }
            while (e.posRight < p.position) {
                // done with the current exon
                exonIndex++;
                if (exonIndex >= exons.size())
                    break;
                // get next exon. initialize with values already loaded from pileup
                if (e.posLeft == 867769)
                    System.out.println("***" + e + "\t" + e.numPileupPositions + "\t" + e.FPKM / e.numPileupPositions);
                e = exons.get(exonIndex);
                for (Pileup pileup : Pileups) {
                    if (e.containsPosition(pileup.position)) {
                        e.FPKM += pileup.coverage;
                        e.numPileupPositions++;
                        if (pileup.heterozygous != 0 || pileup.homozygous != 0)
                            e.SNPPositions.put(pileup.position, pileup.heterozygous);
                    }
                }
            }
        }
        for (Exon ex : exons) {
            // /ex.length();
            ex.SNPs = (double) ex.SNPPositions.size();
            if (ex.numPileupPositions == 0)
                ex.numPileupPositions = 1;
            ex.FPKM = (double) ex.FPKM / ex.numPileupPositions;
        // ex.FPKM = (double)ex.FPKM/ex.length();
        }
    } catch (IOException e) {
        System.err.println("Exception: " + e.getMessage());
        e.printStackTrace();
    }
}
