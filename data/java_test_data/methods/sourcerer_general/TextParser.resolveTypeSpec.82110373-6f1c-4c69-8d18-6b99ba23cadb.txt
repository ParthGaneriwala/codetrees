private TypeEntity resolveTypeSpec(ListIterator<LocatableToken> i, DepthRef depthRef) {
    LocatableToken token = i.next();
    if (isPrimitiveType(token)) {
        if (token.getType() == JavaTokenTypes.LITERAL_void) {
            return new TypeEntity(JavaPrimitiveType.getVoid());
        }
        JavaType type = null;
        switch(token.getType()) {
            case JavaTokenTypes.LITERAL_int:
                type = JavaPrimitiveType.getInt();
                break;
            case JavaTokenTypes.LITERAL_short:
                type = JavaPrimitiveType.getShort();
                break;
            case JavaTokenTypes.LITERAL_char:
                type = JavaPrimitiveType.getChar();
                break;
            case JavaTokenTypes.LITERAL_byte:
                type = JavaPrimitiveType.getByte();
                break;
            case JavaTokenTypes.LITERAL_boolean:
                type = JavaPrimitiveType.getBoolean();
                break;
            case JavaTokenTypes.LITERAL_double:
                type = JavaPrimitiveType.getDouble();
                break;
            case JavaTokenTypes.LITERAL_float:
                type = JavaPrimitiveType.getFloat();
        }
        while (i.hasNext()) {
            token = i.next();
            if (token.getType() == JavaTokenTypes.LBRACK) {
                type = type.getArray();
                // RBRACK
                i.next();
            } else {
                return null;
            }
        }
        return new TypeEntity(type);
    }
    String text = token.getText();
    // DAV use correct request source:
    PackageOrClass poc = resolver.resolvePackageOrClass(text, null);
    while (poc != null && i.hasNext()) {
        token = i.next();
        if (token.getType() == JavaTokenTypes.LT) {
            // Type arguments
            TypeEntity classEnt = poc.resolveAsType();
            if (classEnt != null) {
                classEnt = processTypeArgs(classEnt, i, depthRef);
            }
            poc = classEnt;
            if (poc == null) {
                return null;
            }
            if (!i.hasNext()) {
                return classEnt;
            }
            token = i.next();
        }
        if (token.getType() != JavaTokenTypes.DOT) {
            poc = poc.resolveAsType();
            if (poc == null) {
                return null;
            }
            while (token.getType() == JavaTokenTypes.LBRACK) {
                poc = new TypeEntity(poc.getType().getCapture().getArray());
                if (i.hasNext()) {
                    // RBRACK
                    token = i.next();
                }
                if (!i.hasNext()) {
                    return poc.resolveAsType();
                }
                token = i.next();
            }
            // allow token to be re-read by caller
            i.previous();
            return poc.resolveAsType();
        }
        token = i.next();
        if (token.getType() != JavaTokenTypes.IDENT) {
            break;
        }
        poc = poc.getPackageOrClassMember(token.getText());
    }
    if (poc != null) {
        return poc.resolveAsType();
    } else {
        return null;
    }
}
