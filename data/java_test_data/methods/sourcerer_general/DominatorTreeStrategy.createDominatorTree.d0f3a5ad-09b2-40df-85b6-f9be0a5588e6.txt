private DominatorTree createDominatorTree() {
    // First create the dominator tree nodes
    HashMap nodeVsDominators = new HashMap();
    DominatorTreeNode dominatorTreeRoot = null;
    int numNodes = graph.getNumNodes();
    for (int i = 0; i < numNodes; i++) {
        Node node = graph.getNode(i);
        TreeNode treeNode = new TreeNode(node.getName());
        DominatorTreeNode dominatorTreeNode = new DominatorTreeNode(treeNode, node);
        dominatorTreeNode.setName(node.getName());
        if (node == startNode)
            dominatorTreeRoot = dominatorTreeNode;
        nodeVsDominators.put(node, dominatorTreeNode);
    }
    // Populate the tree from the immediateDominators HashMap
    Set entries = immediateDominators.entrySet();
    Iterator iter = entries.iterator();
    while (iter.hasNext()) {
        Map.Entry entry = (Map.Entry) iter.next();
        Node node = (Node) entry.getKey();
        Node domNode = (Node) entry.getValue();
        DominatorTreeNode dtNode = (DominatorTreeNode) nodeVsDominators.get(node);
        if (domNode == null) {
            // node must have had the starting node as it's immediate dominator
            dominatorTreeRoot.addChild(dtNode);
        } else {
            DominatorTreeNode dtDomNode = (DominatorTreeNode) nodeVsDominators.get(domNode);
            dtDomNode.addChild(dtNode);
        }
    }
    // Create a new dominator tree object, populate it and return it
    DominatorTree dominatorTree = new DominatorTree();
    dominatorTree.setDominatorTreeRoot(dominatorTreeRoot);
    dominatorTree.setGraphNodeVsDominatorTreeNode(nodeVsDominators);
    return dominatorTree;
}
