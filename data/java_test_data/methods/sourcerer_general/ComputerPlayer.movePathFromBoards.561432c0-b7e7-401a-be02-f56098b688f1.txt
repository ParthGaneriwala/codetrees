public static int[] movePathFromBoards(Board currentBoard, Board nextBoard) {
    int currentMovingColor;
    int currentOtherColor;
    int nextMovingColor;
    int nextOtherColor;
    if (currentBoard.blackToMove) {
        currentMovingColor = currentBoard.black;
        currentOtherColor = currentBoard.white;
        nextMovingColor = nextBoard.black;
        nextOtherColor = nextBoard.white;
    } else {
        currentMovingColor = currentBoard.white;
        currentOtherColor = currentBoard.black;
        nextMovingColor = nextBoard.white;
        nextOtherColor = nextBoard.black;
    }
    int currentEmpty = ~(currentMovingColor | currentOtherColor);
    int nextEmpty = ~(nextMovingColor | nextOtherColor);
    int fromTo = currentMovingColor ^ nextMovingColor;
    int capturedPieces = currentOtherColor ^ nextOtherColor;
    int nbrCapturedPieces = BitUtils.countBits(capturedPieces);
    if (fromTo == 0) {
        return loopPath(currentMovingColor, capturedPieces, nbrCapturedPieces);
    }
    int fromBit = fromTo & nextEmpty;
    int toBit = fromTo & currentEmpty;
    int fromIndex = BitUtils.floorLog2(fromBit);
    int toIndex = BitUtils.floorLog2(toBit);
    int[] move;
    if (nbrCapturedPieces == 0) {
        move = new int[2];
    } else {
        move = new int[nbrCapturedPieces + 1];
    }
    move[0] = fromIndex + 1;
    move[move.length - 1] = toIndex + 1;
    int capturedPiecesLeft = nbrCapturedPieces;
    int jumpingFromIndex = fromIndex;
    int moveIndex = 1;
    while (capturedPiecesLeft > 0) {
        int capturedNeighbors = capturedPieces & capturedMask[jumpingFromIndex];
        if ((capturedNeighbors & (capturedNeighbors - 1)) != 0) {
            // There is a loop and we can't handle that right now
            String error = "There are more than 1 captured piece near the" + " moving piece and we can't handle that yet.";
            err.println(error);
            throw new UnsupportedOperationException(error);
        }
        assert BitUtils.countBits(capturedNeighbors) == 1;
        capturedPieces ^= capturedNeighbors;
        int capturedIndex = BitUtils.floorLog2(capturedNeighbors);
        // 0 for even rows, 1 for odd rows
        int rowModifier = (fromIndex >>> 2) & 1;
        int capturedDistance = capturedIndex - jumpingFromIndex + rowModifier;
        int jumpingTo = Integer.MIN_VALUE;
        switch(capturedDistance) {
            case -4:
                // Capturing north west
                jumpingTo = jumpingFromIndex - 9;
                break;
            case -3:
                // Capturing north east
                jumpingTo = jumpingFromIndex - 7;
                break;
            case 4:
                // Capturing south west
                jumpingTo = jumpingFromIndex + 7;
                break;
            case 5:
                // Capturing south east
                jumpingTo = jumpingFromIndex + 9;
                break;
            default:
                // Error
                String error = "Unknown capturing distance " + capturedDistance + ". This means either that the move generation or the" + " movePathFromBoards() is faulty.";
                err.println(error);
                throw new RuntimeException(error);
        }
        capturedPiecesLeft--;
        move[moveIndex] = jumpingTo + 1;
        moveIndex++;
        jumpingFromIndex = jumpingTo;
    }
    assert (nbrCapturedPieces == 0) || (jumpingFromIndex == toIndex);
    assert (nbrCapturedPieces == 0) || (moveIndex == move.length);
    return move;
}
