public ActionForward save(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
    if (log.isDebugEnabled()) {
        log.debug("Entering 'save' method");
    }
    // run validation rules on this form
    // See https://appfuse.dev.java.net/issues/show_bug.cgi?id=128
    ActionMessages errors = form.validate(mapping, request);
    if (!errors.isEmpty()) {
        saveErrors(request, errors);
        return mapping.findForward("edit");
    }
    // Extract attributes and parameters we will need
    ActionMessages messages = new ActionMessages();
    UserForm userForm = (UserForm) form;
    User user = new User();
    // Exceptions are caught by ActionExceptionHandler
    // all we need to persist is the parent object
    BeanUtils.copyProperties(user, userForm);
    Boolean encrypt = (Boolean) getConfiguration().get(Constants.ENCRYPT_PASSWORD);
    if (StringUtils.equals(request.getParameter("encryptPass"), "true") && (encrypt != null && encrypt.booleanValue())) {
        String algorithm = (String) getConfiguration().get(Constants.ENC_ALGORITHM);
        if (algorithm == null) {
            // should only happen for test case
            log.debug("assuming testcase, setting algorithm to 'SHA'");
            algorithm = "SHA";
        }
        user.setPassword(StringUtil.encodePassword(user.getPassword(), algorithm));
    }
    UserManager mgr = (UserManager) getBean("userManager");
    RoleManager roleMgr = (RoleManager) getBean("roleManager");
    String[] userRoles = request.getParameterValues("userRoles");
    for (int i = 0; userRoles != null && i < userRoles.length; i++) {
        String roleName = userRoles[i];
        user.addRole(roleMgr.getRole(roleName));
    }
    user.initAudit(this.getLoginUser());
    user.setEnabled(true);
    try {
        mgr.saveUser(user);
    } catch (UserExistsException e) {
        log.warn(e.getMessage());
        errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("errors.existing.user", userForm.getUsername(), userForm.getEmail()));
        saveErrors(request, errors);
        BeanUtils.copyProperties(userForm, convert(user));
        userForm.setConfirmPassword(userForm.getPassword());
        // reset the version # to what was passed in
        userForm.setVersion(request.getParameter("version"));
        updateFormBean(mapping, request, userForm);
        return mapping.findForward("edit");
    }
    BeanUtils.copyProperties(userForm, convert(user));
    userForm.setConfirmPassword(userForm.getPassword());
    updateFormBean(mapping, request, userForm);
    if (!StringUtils.equals(request.getParameter("from"), "list")) {
        // add success messages
        messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("user.saved"));
        saveMessages(request.getSession(), messages);
        // return a forward to main Menu
        return mapping.findForward("mainMenu");
    } else {
        // add success messages
        if ("".equals(request.getParameter("version"))) {
            messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("user.added", user.getFullName()));
            saveMessages(request.getSession(), messages);
            sendNewUserEmail(request, userForm);
            return mapping.findForward("addUser");
        } else {
            messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("user.updated.byAdmin", user.getFullName()));
            saveMessages(request, messages);
            return mapping.findForward("edit");
        }
    }
}
