private void buildTree(Node node, Document doc, Element current, boolean atRoot) {
    // Recurse through the tree
    switch(node.getNodeType()) {
        case Node.DOCUMENT_NODE:
            NodeList nodes = node.getChildNodes();
            for (int i = 0, size = nodes.getLength(); i < size; i++) {
                buildTree(nodes.item(i), doc, current, true);
            }
            break;
        case Node.ELEMENT_NODE:
            String nodeName = node.getNodeName();
            String prefix = "";
            String localName = nodeName;
            int colon = nodeName.indexOf(':');
            if (colon >= 0) {
                prefix = nodeName.substring(0, colon);
                localName = nodeName.substring(colon + 1);
            }
            // Get element's namespace
            Namespace ns = null;
            String uri = node.getNamespaceURI();
            if (uri == null) {
                ns = (current == null) ? Namespace.NO_NAMESPACE : current.getNamespace(prefix);
            } else {
                ns = Namespace.getNamespace(prefix, uri);
            }
            Element element = factory.element(localName, ns);
            if (atRoot) {
                // If at root, set as document root
                // XXX should we use a factory call?
                doc.setRootElement(element);
            } else {
                // else add to parent element
                factory.addContent(current, element);
            }
            // Add namespaces
            NamedNodeMap attributeList = node.getAttributes();
            int attsize = attributeList.getLength();
            for (int i = 0; i < attsize; i++) {
                Attr att = (Attr) attributeList.item(i);
                String attname = att.getName();
                if (attname.startsWith("xmlns")) {
                    String attPrefix = "";
                    colon = attname.indexOf(':');
                    if (colon >= 0) {
                        attPrefix = attname.substring(colon + 1);
                    }
                    String attvalue = att.getValue();
                    Namespace declaredNS = Namespace.getNamespace(attPrefix, attvalue);
                    // matter)
                    if (prefix.equals(attPrefix)) {
                        element.setNamespace(declaredNS);
                    } else {
                        factory.addNamespaceDeclaration(element, declaredNS);
                    }
                }
            }
            // Add attributes
            for (int i = 0; i < attsize; i++) {
                Attr att = (Attr) attributeList.item(i);
                String attname = att.getName();
                if (!attname.startsWith("xmlns")) {
                    String attPrefix = "";
                    String attLocalName = attname;
                    colon = attname.indexOf(':');
                    if (colon >= 0) {
                        attPrefix = attname.substring(0, colon);
                        attLocalName = attname.substring(colon + 1);
                    }
                    String attvalue = att.getValue();
                    // Get attribute's namespace
                    Namespace attns = null;
                    if ("".equals(attPrefix)) {
                        attns = Namespace.NO_NAMESPACE;
                    } else {
                        attns = element.getNamespace(attPrefix);
                    }
                    Attribute attribute = factory.attribute(attLocalName, attvalue, attns);
                    factory.setAttribute(element, attribute);
                }
            }
            // Recurse on child nodes
            // The list should never be null nor should it ever contain
            // null nodes, but some DOM impls are broken
            NodeList children = node.getChildNodes();
            if (children != null) {
                int size = children.getLength();
                for (int i = 0; i < size; i++) {
                    Node item = children.item(i);
                    if (item != null) {
                        buildTree(item, doc, element, false);
                    }
                }
            }
            break;
        case Node.TEXT_NODE:
            String data = node.getNodeValue();
            factory.addContent(current, factory.text(data));
            break;
        case Node.CDATA_SECTION_NODE:
            String cdata = node.getNodeValue();
            factory.addContent(current, factory.cdata(cdata));
            break;
        case Node.PROCESSING_INSTRUCTION_NODE:
            if (atRoot) {
                factory.addContent(doc, factory.processingInstruction(node.getNodeName(), node.getNodeValue()));
            } else {
                factory.addContent(current, factory.processingInstruction(node.getNodeName(), node.getNodeValue()));
            }
            break;
        case Node.COMMENT_NODE:
            if (atRoot) {
                factory.addContent(doc, factory.comment(node.getNodeValue()));
            } else {
                factory.addContent(current, factory.comment(node.getNodeValue()));
            }
            break;
        case Node.ENTITY_REFERENCE_NODE:
            EntityRef entity = factory.entityRef(node.getNodeName());
            factory.addContent(current, entity);
            break;
        case Node.ENTITY_NODE:
            // ??
            break;
        case Node.DOCUMENT_TYPE_NODE:
            DocumentType domDocType = (DocumentType) node;
            String publicID = domDocType.getPublicId();
            String systemID = domDocType.getSystemId();
            String internalDTD = domDocType.getInternalSubset();
            DocType docType = factory.docType(domDocType.getName());
            docType.setPublicID(publicID);
            docType.setSystemID(systemID);
            docType.setInternalSubset(internalDTD);
            factory.addContent(doc, docType);
            break;
    }
}
