public String doView(RenderRequest request, RenderResponse response) throws Exception {
    // get the modules details
    int linkItemId = PortalUtils.getPageViewAsInt(request);
    String moduleName = PortalUtils.getPageDomainObject(request);
    // set the request attributes
    request.setAttribute(POPUP, request.getParameter(POPUP));
    // validate the object being tagged
    if (!ModuleUtils.MODULENAME_WIKI.equals(moduleName)) {
        throw new PortletException("Module mismatch while tagging object");
    }
    // Determine the project container to use
    Project project = findProject(request);
    if (project == null) {
        throw new Exception("Project is null");
    }
    // Check the user's permissions
    User user = getUser(request);
    if (!ProjectUtils.hasAccess(project.getId(), user, "project-profile-view")) {
        throw new PortletException("Unauthorized to access this profile");
    }
    if (!ProjectUtils.hasAccess(project.getId(), user, "project-wiki-view")) {
        throw new PortletException("Unauthorized to view this record");
    }
    // get database connection
    Connection db = useConnection(request);
    // Load the object being tagged to make sure it exists
    try {
        Wiki wiki = new Wiki(db, linkItemId);
    } catch (Exception e) {
        throw new Exception(e.getMessage());
    }
    // get popular tags for the module
    TagList popularTagList = new TagList();
    popularTagList.setTableName(Wiki.TABLE);
    popularTagList.setUniqueField(Wiki.PRIMARY_KEY);
    popularTagList.setLinkItemId(linkItemId);
    PagedListInfo tagListInfo = new PagedListInfo();
    tagListInfo.setColumnToSortBy("tag_count DESC, tag");
    tagListInfo.setItemsPerPage(10);
    popularTagList.setPagedListInfo(tagListInfo);
    popularTagList.buildList(db);
    request.setAttribute(POPULAR_TAGS, popularTagList);
    // get the user's tags used for this item
    TagLogList tagLogList = new TagLogList();
    tagLogList.setTableName(Wiki.TABLE);
    tagLogList.setUniqueField(Wiki.PRIMARY_KEY);
    tagLogList.setUserId(user.getId());
    tagLogList.setLinkItemId(linkItemId);
    tagLogList.buildList(db);
    request.setAttribute(USER_TAGS, tagLogList);
    // get the recent tags used by the user
    request.setAttribute(USER_RECENT_TAGS, UserUtils.loadRecentlyUsedTagsByUser(db, user.getId()));
    return TAGS_FORM_ADD;
}
