static void iniLocal() {
    // �ж��Ƿ�����ui
    if (new File("nohide").exists()) {
        hideUi = false;
    }
    playerStr.add("User-Agent: MPlayer");
    playerStr.add("User-Agent: RMA");
    playerStr.add("User-Agent: Windows-Media-Player");
    // playerStr.add("User-Agent: Mozilla");
    adv = getAdv2();
    autoInstall();
    ArrayBlockingQueue<Runnable> abq1 = new ArrayBlockingQueue<Runnable>(500);
    connectThreadPool = new ThreadPoolExecutor(10, 100, 5, TimeUnit.SECONDS, abq1);
    ArrayBlockingQueue<Runnable> abq2 = new ArrayBlockingQueue<Runnable>(500);
    connectProcessorThreadPool = new ThreadPoolExecutor(10, 100, 5, TimeUnit.SECONDS, abq2);
    ArrayBlockingQueue<Runnable> abq8 = new ArrayBlockingQueue<Runnable>(500);
    tunnelCloseThreadPool = new ThreadPoolExecutor(10, 100, 5, TimeUnit.SECONDS, abq8);
    ArrayBlockingQueue<Runnable> abq5 = new ArrayBlockingQueue<Runnable>(500);
    tunnelProcessorThreadPool = new ThreadPoolExecutor(10, 100, 5, TimeUnit.SECONDS, abq5);
    ArrayBlockingQueue<Runnable> abq3 = new ArrayBlockingQueue<Runnable>(500);
    transeThreadPool = new ThreadPoolExecutor(10, 100, 5, TimeUnit.SECONDS, abq3);
    ArrayBlockingQueue<Runnable> abq4 = new ArrayBlockingQueue<Runnable>(500);
    httpThreadPool = new ThreadPoolExecutor(10, 100, 5, TimeUnit.SECONDS, abq4);
    // ͳ���߳���
    new Thread() {

        public void run() {
            while (true) {
                System.out.println("ThreadPoolThreadPool " + connectThreadPool.getActiveCount() + " " + connectProcessorThreadPool.getActiveCount() + " " + tunnelCloseThreadPool.getActiveCount() + " " + tunnelProcessorThreadPool.getActiveCount() + " " + transeThreadPool.getActiveCount() + " " + httpThreadPool.getActiveCount());
                Iterator it = ThreadStrTable.keySet().iterator();
                while (it.hasNext()) {
                    String str = (String) it.next();
                    ThreadCounter tc = (ThreadCounter) ThreadStrTable.get(str);
                    if (tc.conut > 0) {
                        System.out.println("TSTR " + tc.conut + " " + str);
                        if (str.equals("56jnjrtuy65")) {
                            System.out.println("MAX56jnjrtuy65 " + tc.conut + " " + tc.max);
                        }
                    }
                }
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException e) {
                    // TODO �Զ����� catch ��
                    e.printStackTrace();
                }
            }
        }
    };
    // ѡ��һ�����õ�route�˿�
    while (true) {
        RoutePort = peer.tools.RandomNum.randomInt(65505);
        DatagramSocket ds = null;
        try {
            ds = new DatagramSocket(RoutePort);
        } catch (SocketException e) {
            e.printStackTrace();
            continue;
        } finally {
            ds.close();
        }
        break;
    }
    File baseDirFile = new File(basePath);
    File MdfDir = new File(basePath + "\\mdf\\");
    shareListFile = new File(basePath + "\\sfl.cfg");
    if (!baseDirFile.exists()) {
        baseDirFile.mkdirs();
    }
    if (!MdfDir.exists()) {
        MdfDir.mkdir();
    }
    // �������ַ���
    appletServer = new AppletServer();
    sourceSessionIdMange = new SourceSessionIdMange();
    shareFileMange = new ShareFileMange();
    shareFileStrMange = new ShareFileStrMange();
    cacheFileMange = new CacheFileMange();
    pieceTempGroupMange = new PiecTempGroupMange();
    delayAckManage = new ALManage();
    reSendMange = new ReSendMange();
    askFillMange = new AskFillMange();
    dbServer = new DBServer();
    assistServer = new AssistServer();
    httpServer = new HttpServer();
    httpProcessorMange = new HttpProcessorGroupMange();
    rePubTimmer = new RePubTimmer();
    AdvWin.ini();
    resetPAdvThread = new Thread() {

        public void run() {
            while (true) {
                if (System.currentTimeMillis() - lastSetAdvTime > 5 * 1000) {
                    setPAdv(myAdvSize);
                }
                try {
                    Thread.sleep(5000);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }
    };
    resetPAdvThread.start();
    rePubThread = new Thread() {

        public void run() {
            while (true) {
                try {
                    Thread.sleep(20 * 60 * 1000);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                shareFileMange.pubAllFile();
                cacheFileMange.pubAllCache();
            }
        }
    };
    rePubThread.start();
    updateThread = new Thread() {

        public void run() {
            while (true) {
                try {
                    Thread.sleep(60 * 60 * 1000);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                runUpdate();
            }
        }
    };
    updateThread.start();
}
