public boolean insert(Connection db) throws SQLException {
    if (!isValid()) {
        return false;
    }
    boolean autoCommit = db.getAutoCommit();
    try {
        if (autoCommit) {
            db.setAutoCommit(false);
        }
        statusTypeId = lookupStatusIdType(db, statusId);
        StringBuffer sql = new StringBuffer();
        sql.append("INSERT INTO project_assignments " + "(project_id, requirement_id, technology, " + "role, estimated_loevalue, estimated_loetype, actual_loevalue, actual_loetype, " + "priority_id, est_start_date, start_date, " + "due_date, status_id, status_date, percent_complete, responsible, complete_date, ");
        if (entered != null) {
            sql.append("entered, ");
        }
        if (modified != null) {
            sql.append("modified, ");
        }
        sql.append("enteredBy, modifiedBy, folder_id ) ");
        sql.append("VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ");
        if (entered != null) {
            sql.append("?, ");
        }
        if (modified != null) {
            sql.append("?, ");
        }
        sql.append("?, ?, ?) ");
        int i = 0;
        PreparedStatement pst = db.prepareStatement(sql.toString());
        pst.setInt(++i, projectId);
        DatabaseUtils.setInt(pst, ++i, requirementId);
        pst.setString(++i, technology);
        pst.setString(++i, role);
        DatabaseUtils.setInt(pst, ++i, estimatedLoe);
        DatabaseUtils.setInt(pst, ++i, estimatedLoeTypeId);
        DatabaseUtils.setInt(pst, ++i, actualLoe);
        DatabaseUtils.setInt(pst, ++i, actualLoeTypeId);
        DatabaseUtils.setInt(pst, ++i, priorityId);
        if (offset != 0 && estStartDate != null) {
            estStartDate = new Timestamp(estStartDate.getTime() + offset);
        }
        DatabaseUtils.setTimestamp(pst, ++i, estStartDate);
        if (statusTypeId != NOTSTARTED && statusTypeId != ONHOLD && startDate == null) {
            java.util.Date tmpDate = new java.util.Date();
            startDate = new java.sql.Timestamp(tmpDate.getTime());
            startDate.setNanos(0);
        } else {
            if (offset != 0 && startDate != null) {
                startDate = new Timestamp(startDate.getTime() + offset);
            }
        }
        DatabaseUtils.setTimestamp(pst, ++i, startDate);
        if (offset != 0 && dueDate != null) {
            dueDate = new Timestamp(dueDate.getTime() + offset);
        }
        DatabaseUtils.setTimestamp(pst, ++i, dueDate);
        DatabaseUtils.setInt(pst, ++i, statusId);
        // Status Date
        if (statusId > -1 && statusDate == null) {
            java.util.Date tmpDate = new java.util.Date();
            statusDate = new java.sql.Timestamp(tmpDate.getTime());
            statusDate.setNanos(0);
        }
        DatabaseUtils.setTimestamp(pst, ++i, statusDate);
        DatabaseUtils.setInt(pst, ++i, percentComplete);
        pst.setString(++i, responsible);
        // Handle assignment complete date
        if ((statusTypeId == COMPLETE || statusTypeId == CLOSED) && completeDate == null) {
            java.util.Date tmpDate = new java.util.Date();
            completeDate = new java.sql.Timestamp(tmpDate.getTime());
            completeDate.setNanos(0);
        }
        DatabaseUtils.setTimestamp(pst, ++i, completeDate);
        if (entered != null) {
            pst.setTimestamp(++i, entered);
        }
        if (modified != null) {
            pst.setTimestamp(++i, modified);
        }
        pst.setInt(++i, enteredBy);
        pst.setInt(++i, modifiedBy);
        DatabaseUtils.setInt(pst, ++i, folderId);
        pst.execute();
        pst.close();
        id = DatabaseUtils.getCurrVal(db, "project_assig_assignment_id_seq", -1);
        // Record the position of this entry
        RequirementMapItem mapItem = new RequirementMapItem();
        mapItem.setProjectId(projectId);
        mapItem.setRequirementId(requirementId);
        mapItem.setAssignmentId(id);
        mapItem.setIndent(indent);
        mapItem.setPrevIndent(prevIndent);
        mapItem.setPrevMapId(prevMapId);
        mapItem.append(db);
        indent = mapItem.getIndent();
        prevIndent = mapItem.getIndent();
        prevMapId = mapItem.getId();
        // Insert any notes
        assignmentNote = new AssignmentNote(this);
        if (assignmentNote.isValid()) {
            assignmentNote.insert(db);
        }
        // Insert any assigned users
        if (assignedUserList != null) {
            assignedUserList.setAssignmentId(id);
            assignedUserList.setEnteredBy(enteredBy);
            assignedUserList.setModifiedBy(modifiedBy);
            assignedUserList.insert(db);
        }
        if (autoCommit) {
            db.commit();
        }
    } catch (Exception e) {
        if (autoCommit) {
            db.rollback();
        }
        throw new SQLException(e.getMessage());
    } finally {
        if (autoCommit) {
            db.setAutoCommit(true);
        }
    }
    return true;
}
