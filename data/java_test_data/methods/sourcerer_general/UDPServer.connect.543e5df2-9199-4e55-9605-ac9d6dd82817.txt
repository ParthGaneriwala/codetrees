public void connect() {
    channelServer = null;
    try {
        channelServer = DatagramChannel.open();
        DatagramSocket socket = channelServer.socket();
        socket.bind(new InetSocketAddress(Constants.UDP_PORT));
    } catch (Exception e) {
        e.printStackTrace();
    }
    boolean wait = false;
    while (true) {
        ByteBuffer buffer = null;
        SocketAddress addr = null;
        if (wait) {
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
        synchronized (channelServer) {
            try {
                channelServer.disconnect();
                buffer = ByteBuffer.allocate(4);
                buffer.clear();
                channelServer.configureBlocking(false);
                addr = channelServer.receive(buffer);
                if (addr == null) {
                    wait = true;
                    continue;
                } else {
                    wait = false;
                    channelServer.configureBlocking(true);
                }
                channelServer.connect(addr);
                byte[] readSyze = buffer.array();
                int msgSize = ((0x00000000000000FF & ((Byte) readSyze[0]) << 24) | ((0x00000000000000FF & ((Byte) readSyze[1]).byteValue()) << 16) | ((0x00000000000000FF & ((Byte) readSyze[2]).byteValue()) << 8) | (0x00000000000000FF & ((Byte) readSyze[3]).byteValue()));
                buffer = null;
                readSyze = null;
                buffer = ByteBuffer.allocate(msgSize);
                buffer.clear();
                channelServer.receive(buffer);
                channelServer.disconnect();
            } catch (IOException e) {
                e.printStackTrace();
                continue;
            }
        }
        Message msg = null;
        try {
            msg = (Message) Marshal.recoverObject(buffer.array());
        } catch (IOException e) {
            e.printStackTrace();
            continue;
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
            continue;
        }
        buffer = null;
        connections.put(msg.getSender(), addr);
        invC(msg);
    }
}
