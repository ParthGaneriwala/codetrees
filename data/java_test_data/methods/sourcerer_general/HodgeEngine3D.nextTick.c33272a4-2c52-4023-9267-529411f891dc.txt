private int nextTick(int g, int K1, int K2, boolean neumann, boolean wrap) throws ArrayIndexOutOfBoundsException {
    if (!INITIALIZED)
        return -1;
    int minX = 1, minY = 1, minZ = 1, maxX = SIZE_X - 1, maxY = SIZE_Y - 1, maxZ = SIZE_Z - 1;
    if (wrap) {
        minX = 0;
        minY = 0;
        minZ = 1;
        maxX = SIZE_X;
        maxY = SIZE_Y;
        maxZ = SIZE_Z;
    }
    for (int x = minX; x < maxX; x++) for (int y = minY; y < maxY; y++) for (int z = minZ; z < maxZ; z++) {
        if (cells[x][y][z] == 0) {
            int A = 0;
            int B = 0;
            for (int i = x - 1; i <= x + 1; i++) for (int j = y - 1; j <= y + 1; j++) for (int k = z - 1; k <= z + 1; k++) {
                if (i == x && j == y && k == z)
                    A += 0;
                else if (cells[i][j][k] > 0)
                    A++;
                else
                    B++;
                tmp[x][y][z] = (A / K1) + (B / K2);
            }
            if (tmp[x][y][z] > N)
                tmp[x][y][z] = N;
        } else if (cells[x][y][z] < N) {
            int A = 1;
            int S = cells[x][y][z];
            for (int i = x - 1; i <= x + 1; i++) for (int j = y - 1; j <= y + 1; j++) for (int k = z - 1; k <= z + 1; k++) {
                if (i == x && j == y && k == z)
                    A += 0;
                else if (cells[i][j][k] > 0) {
                    A++;
                    S += cells[i][j][k];
                }
            }
            tmp[x][y][z] = (S / A) + G;
            if (tmp[x][y][z] > N)
                tmp[x][y][z] = N;
        } else
            tmp[x][y][z] = 0;
    }
    // update cells
    for (int x = 0; x < SIZE_X; x++) for (int y = 0; y < SIZE_Y; y++) for (int z = 0; z < SIZE_Z; z++) {
        cells[x][y][z] = tmp[x][y][z];
    }
    // increment and return ticks
    return ++ticks;
}
