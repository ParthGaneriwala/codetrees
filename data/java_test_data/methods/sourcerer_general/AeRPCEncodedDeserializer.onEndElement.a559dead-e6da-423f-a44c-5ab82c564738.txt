public void onEndElement(String aNamespace, String aLocalName, DeserializationContext aContext) throws SAXException {
    MessageElement msgElem = aContext.getCurElement();
    try {
        Document root = AeXmlUtil.newDocument();
        Element e = null;
        QName elementType = msgElem.getType();
        if (elementType == null) {
            // check for an element
            if (msgElem.getID() != null) {
                if (msgElem.getParentNode() instanceof SOAPBody) {
                    SOAPBody body = (SOAPBody) msgElem.getParentNode();
                    NodeList children = body.getChildNodes();
                    if (children.item(0) instanceof RPCElement) {
                        RPCElement operationElement = (RPCElement) children.item(0);
                        NodeList parts = operationElement.getChildNodes();
                        for (int i = 0; elementType == null && i < parts.getLength(); i++) {
                            MessageElement referrer = (MessageElement) parts.item(i);
                            // $NON-NLS-1$
                            String href = "#" + msgElem.getID();
                            if (href.equals(referrer.getHref())) {
                                elementType = AeXmlUtil.getElementType(referrer);
                            }
                        }
                    }
                }
            } else {
                elementType = new QName(aNamespace, aLocalName);
            }
        }
        boolean isPartElement = isElementDeclaration(elementType);
        String elementName = elementType == null ? aLocalName : elementType.getLocalPart();
        // $NON-NLS-1$
        String namespace = elementType == null ? "" : elementType.getNamespaceURI();
        String prefix = getNextPrefix();
        // $NON-NLS-1$ //$NON-NLS-2$
        String prefixWithColon = isPartElement ? prefix + ":" : "";
        // $NON-NLS-1$
        String rootNamespace = isPartElement ? namespace : "";
        // if the part is an element declaration, then we need to create the element
        // with a prefix so it'll be in the correct namespace.
        // in the case of complex types, we don't do this, instead opting for adding
        // an xsi-type element.
        e = root.createElementNS(rootNamespace, prefixWithColon + elementName);
        if (AeUtil.notNullOrEmpty(prefixWithColon)) {
            // $NON-NLS-1$
            e.setAttributeNS(IAeBPELConstants.W3C_XMLNS, "xmlns:" + prefix, namespace);
        }
        // if we have text data associated with this message element
        if (!AeUtil.isNullOrEmpty(msgElem.getValue()))
            e.appendChild(e.getOwnerDocument().createTextNode(msgElem.getValue()));
        // add the namespaces from the SOAPEnvelope and Body.
        // Apparently these aren't manifested in the child MessageElements
        addNSDeclarationsFromEnvelope(aContext, e);
        root.appendChild(e);
        addChildrenToElement(aContext, msgElem, elementType, null, e);
        value = root;
    } catch (Throwable t) {
        // $NON-NLS-1$
        AeException.logError(t, AeMessages.getString("AeLiteralDeserializer.ERROR_10"));
        if (t instanceof Exception)
            throw new SAXException((Exception) t);
        throw new SAXException(t.getLocalizedMessage());
    }
}
