public Contact parseXMLToContact(ArrayList<Contact> cons, Element con) {
    String name = null;
    String phoneNum = null;
    String fixedTel = null;
    String email = null;
    String qq = null;
    String nick = null;
    int sex = 0;
    BirthDay birth = null;
    String icon = null;
    String addr = null;
    String workplace = null;
    String zipCode = null;
    String homePage = null;
    ArrayList<String> otherWay = new ArrayList<String>();
    ArrayList<NormalTag> normal = new ArrayList<NormalTag>();
    ArrayList<String> re = new ArrayList<String>();
    NodeList children = con.getChildNodes();
    int j = 0;
    for (int i = 0; i < children.getLength(); i++) {
        Node child = children.item(i);
        if (!(child instanceof Element))
            continue;
        Element e = (Element) child;
        if (!checkNode(j, e.getTagName())) {
            // You can only delete some standard Tags, but not add some Tags.
            i--;
            j++;
            continue;
        }
        Text textNode = (Text) e.getFirstChild();
        if (textNode == null) {
            j++;
            continue;
        }
        String text = textNode.getData();
        text = antiXMLFormatString(text);
        switch(j) {
            case 0:
                name = text;
                break;
            case 1:
                phoneNum = text;
                break;
            case 2:
                fixedTel = text;
                break;
            case 3:
                email = text;
                break;
            case 4:
                qq = text;
                break;
            case 5:
                nick = text;
                break;
            case 6:
                if (text.equals("M"))
                    sex = 1;
                else if (text.equals("F"))
                    sex = 2;
                else
                    sex = 0;
                break;
            case 7:
                birth = new BirthDay(text);
                break;
            case 8:
                icon = text;
                break;
            case 9:
                addr = text;
                break;
            case 10:
                workplace = text;
                break;
            case 11:
                zipCode = text;
                break;
            case 12:
                homePage = text;
                break;
            case 13:
                String[] other = text.split(";");
                for (int k = 0; k < other.length; k++) {
                    if (other[k].equals(""))
                        continue;
                    otherWay.add(other[k]);
                }
                break;
            case 14:
                String[] norm = text.split(";");
                for (int k = 0; k < norm.length; k++) {
                    if (norm[k].equals(""))
                        continue;
                    normal.add(NormalTag.createNormalTag(norm[k]));
                }
                break;
            case 15:
                String[] rel = text.split(";");
                for (int k = 0; k < rel.length; k++) {
                    if (rel[k].equals(""))
                        continue;
                    re.add(rel[k]);
                }
                break;
        }
        j++;
    }
    try {
        Contact ret = Contact.createContact(name, phoneNum, fixedTel, email, qq, nick, sex, birth, icon, addr, workplace, zipCode, homePage, otherWay, normal, null);
        for (int i = 0; i < re.size(); i++) {
            String[] rel = re.get(i).split("[(),]");
            ArrayList<Contact> B = new ArrayList<Contact>();
            RelationTag rt = null;
            String rtname = null;
            boolean conti = false;
            j = 0;
            for (int k = 0; k < rel.length; k++) {
                rel[k] = rel[k].trim();
                if (rel[k].equals(""))
                    continue;
                switch(j) {
                    case 0:
                        rtname = rel[k];
                        break;
                    case 1:
                        if (!rel[k].equals(ret.getName()))
                            conti = true;
                        break;
                    case 2:
                        for (int kk = 0; kk < cons.size(); kk++) {
                            if (cons.get(kk).getName().equals(rel[k]))
                                B.add(cons.get(kk));
                        }
                        break;
                }
                if (conti)
                    break;
                j++;
            }
            if (conti)
                continue;
            if (B.size() == 0)
                continue;
            rt = RelationTag.createRelationTag(rtname);
            for (int k = 0; k < B.size(); k++) {
                ContactManager.addTagToContact(new Pair<Contact, Contact>(ret, B.get(k)), rt);
            }
        }
        return ret;
    } catch (Exception e) {
        e.printStackTrace();
        return null;
    }
}
