@RequestMapping(value = "/item", method = RequestMethod.POST)
public String list(Model model, @RequestParam(value = "q") String q, @RequestParam(value = "cid", required = false) String cid, @RequestParam(value = "orderByField", required = false) String orderByField, @RequestParam(value = "sortorder", required = false) String sortorder, @RequestParam(value = "pageNo", required = false) Integer pageNo, @RequestParam(value = "pageSize", required = false) Integer pageSize, @RequestParam(value = "state", required = false) String state, @RequestParam(value = "city", required = false) String city) {
    Integer totalResult = 0;
    List<Item> items = new ArrayList<Item>(0);
    List<ItemCategory> itemCategories = new ArrayList<ItemCategory>(0);
    try {
        ItemsSearchRequest isr = new ItemsSearchRequest();
        isr.setQ(q);
        isr.setFields("detail_url, num_iid, title, nick, cid, pic_url, location, price, score, volume");
        if (!StringUtil.isEmpty(cid)) {
            isr.setCid(cid);
        }
        if (StringUtil.isEmpty(orderByField)) {
            orderByField = "price";
        }
        if (StringUtil.isEmpty(sortorder)) {
            sortorder = "desc";
        }
        isr.setOrderBy(orderByField + ":" + sortorder);
        if (pageNo == null || pageNo < 1) {
            pageNo = 1;
        }
        isr.setPageNo(pageNo);
        if (!StringUtil.isEmpty(state)) {
            isr.setState(state);
        }
        if (!StringUtil.isEmpty(city)) {
            isr.setCity(city);
        }
        if (pageSize == null || pageSize < 1) {
            pageSize = 40;
        }
        isr.setPageSize(pageSize);
        ItemsSearchResponse isrs = TaoBaoUtils.getRestClient().itemsSearch(isr);
        totalResult = isrs.getTotalResults();
        ItemSearch is = isrs.getItemSearch();
        items = is.getItems();
        itemCategories = is.getItemCategories();
    } catch (Exception ex) {
        log.warning(ex.getMessage());
    }
    ComparatorCategory comparator = new ComparatorCategory();
    Collections.sort(itemCategories, comparator);
    int cCount = 0;
    List<OptionBean> itemCategoryOptions = new ArrayList<OptionBean>();
    for (ItemCategory itemCategory : itemCategories) {
        if (cCount >= 10) {
            break;
        }
        try {
            itemCategoryOptions.add(new OptionBean(itemCategory.getCategoryId(), TaobaoService.getCatName(itemCategory.getCategoryId()) + "(" + itemCategory.getCount() + ")"));
        } catch (Exception ex) {
        }
        cCount = cCount + 1;
    }
    Integer lastPageNo = 1;
    Integer prePageNo = 1;
    Integer nextPageNo = 1;
    if (totalResult > 0) {
        lastPageNo = totalResult / pageSize;
        if (totalResult % pageSize > 0) {
            lastPageNo = lastPageNo + 1;
        }
        prePageNo = pageNo - 1;
        if (prePageNo < 1) {
            prePageNo = 1;
        }
        nextPageNo = nextPageNo + 1;
        if (nextPageNo > lastPageNo) {
            nextPageNo = lastPageNo;
        }
    }
    if (!StringUtil.isEmpty(cid)) {
        String cidName = TaobaoService.getCatName(cid);
        model.addAttribute("cidName", cidName);
    }
    model.addAttribute("q", q);
    model.addAttribute("orderByField", orderByField);
    model.addAttribute("sortorder", sortorder);
    model.addAttribute("pageNo", pageNo);
    model.addAttribute("lastPageNo", lastPageNo);
    model.addAttribute("prePageNo", prePageNo);
    model.addAttribute("nextPageNo", nextPageNo);
    model.addAttribute("pageSize", pageSize);
    model.addAttribute("state", state);
    model.addAttribute("city", city);
    model.addAttribute("itemCount", totalResult);
    model.addAttribute("items", items);
    model.addAttribute("itemCategories", itemCategoryOptions);
    model.addAttribute("locationList", TaobaoService.getLocationList());
    log.info(totalResult.toString());
    return "search/item";
}
