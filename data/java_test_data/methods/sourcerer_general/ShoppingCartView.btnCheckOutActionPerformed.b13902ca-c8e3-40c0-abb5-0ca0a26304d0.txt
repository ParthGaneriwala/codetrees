// GEN-LAST:event_btnMoreActionPerformed
private // GEN-FIRST:event_btnCheckOutActionPerformed
void btnCheckOutActionPerformed(// GEN-FIRST:event_btnCheckOutActionPerformed
java.awt.event.ActionEvent evt) {
    // GEN-HEADEREND:event_btnCheckOutActionPerformed
    JTable dataTable = table.getTable();
    Timestamp currentTime = DateTimeHelper.getCurrentDateTime();
    Collection<BookedTicket> bookedTickets = new ArrayList<BookedTicket>();
    for (int i = 0; i < dataTable.getRowCount(); i++) {
        if (Boolean.parseBoolean(dataTable.getValueAt(i, 4).toString())) {
            BookedTicket bookedTicket = new BookedTicket();
            Ticket ticket = (Ticket) dataTable.getValueAt(i, 0);
            bookedTicket.setBookedDate(currentTime);
            bookedTicket.setCustomerID(ticket.getCustomerID());
            bookedTicket.setEventID(ticket.getTicketRate().getEventID());
            bookedTicket.setIsCancelled(false);
            bookedTicket.setIsPaid(false);
            bookedTicket.setSeatCategoryID(ticket.getTicketRate().getSeatCategoryID());
            bookedTicket.setSeatNumber(ticket.getSeat().getRealNumber());
            bookedTicket.setVenueID(ticket.getTicketRate().getVenueID());
            bookedTickets.add(bookedTicket);
        } else {
            Ticket ticket = (Ticket) dataTable.getValueAt(i, 0);
            cart.remove(ticket);
        }
    }
    BookedTicketController controller = new BookedTicketController();
    bookedTickets = controller.saveBookedTickets(bookedTickets);
    this.setBookedTickets(bookedTickets);
    directToShippingMethodsView();
}
