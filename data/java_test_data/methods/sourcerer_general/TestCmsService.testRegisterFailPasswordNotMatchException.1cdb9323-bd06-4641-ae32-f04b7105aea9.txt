@Test
@DirtiesContext
public void testRegisterFailPasswordNotMatchException() throws Exception {
    SecurityCmsUiService securityCmsUiServiceMock = EasyMock.createMock(SecurityCmsUiService.class);
    securityCmsUiServiceMock.signIn("U1", "test");
    User user = new User();
    user.registerUser("TestUser", "", "");
    EasyMock.expectLastCall().andThrow(new PasswordNotMatchException());
    EasyMock.replay(securityCmsUiServiceMock);
    ReflectionTestUtils.setField(cmsUiService, "securityCmsUiService", securityCmsUiServiceMock);
    prepare4RegisterCheck();
    // Verify
    beginHttpSession();
    beginHttpRequestAndOpenSessionInViewFilter();
    tester.startPage(CmsPage.class);
    tester.assertRenderedPage(CmsPage.class);
    tester.assertVisible("form:content:newUserForm:name");
    tester.assertVisible("form:content:newUserForm:email");
    tester.assertVisible("form:content:newUserForm:password");
    tester.assertVisible("form:content:newUserForm:confirmPassword");
    FormTester formTester = tester.newFormTester("form");
    formTester.setValue("content:newUserForm:name", "U1");
    formTester.setValue("content:newUserForm:email", "u1email");
    formTester.setValue("content:newUserForm:password", "test");
    formTester.setValue("content:newUserForm:confirmPassword", "test");
    formTester.submit();
    tester.assertRenderedPage(CmsPage.class);
    tester.assertLabel("form:content:message", "Password and confirm password do not match");
    endHttpRequestAndOpenSessionInViewFilter();
    endHttpSession();
}
