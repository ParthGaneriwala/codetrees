@Test
public void testSaveAndResave() throws ParseException, InterruptedException {
    Event event = getEventUtil().createEvent(begin, end);
    event.setDescription("This is some description.");
    Serializable id = getEventDao().save(event);
    // guarantees the object gets written to the DB
    getSessionFactory().getCurrentSession().evict(event);
    Thread.sleep(1000);
    Event returned = getEventDao().findById((Long) id);
    returned.setDescription("sdfsdf");
    getEventDao().saveOrUpdate(returned);
    getSessionFactory().getCurrentSession().evict(returned);
    // save, but don't make any changes.
    getEventDao().saveOrUpdate(returned);
    getSessionFactory().getCurrentSession().evict(returned);
    getEventDao().saveOrUpdate(returned);
    getSessionFactory().getCurrentSession().evict(returned);
    Event returned2 = getEventDao().findById((Long) id);
    assertEquals(EventUtil.filterMilliseconds(event.getCreated()), returned.getCreated());
    // make sure the last modified dates are different for the two instances we edited
    assertTrue(returned.getLastModified().compareTo(returned2.getLastModified()) != 0);
    // create another so that there are more than 2 total audit records
    getEventDao().save(getEventUtil().createEvent(begin, end));
    // now ensure correct number audit entries were created for this event
    List<AuditEntry> auditEntries = auditEntryDao.getAuditEntries(event, 0, MAX_RESULTS);
    assertEquals(4, auditEntries.size());
    // go down the list (entries are ordered by newest first)
    // verify username is in the field
    int version = auditEntries.size() - 1;
    for (AuditEntry auditEntry : auditEntries) {
        assertEquals((long) version--, auditEntry.getVersion());
        assertEquals(USERNAME, auditEntry.getUser());
    }
    // now test retrieval by fake object
    Event empty = new Event();
    empty.setId(event.getId());
    auditEntries = auditEntryDao.getAuditEntries(empty, 0, MAX_RESULTS);
    assertEquals(4, auditEntries.size());
    // now test getting the count
    Long count = auditEntryDao.getAuditEntriesCount(empty);
    assertEquals(4L, (long) count);
    // now test getting one of the entries
    // Session session = getEventTesterDao().getSessionFactory().openSession();
    // session.refresh(auditEntries.get(0));
    Collection<AuditFieldChange> changes = auditEntries.get(0).getAuditEntryFieldChange();
    for (AuditFieldChange auditFieldChange : changes) {
        AuditFieldChange newChange = auditEntryDao.getAuditFieldChange(auditFieldChange.getId());
        assertEquals(newChange.getNewValue(), auditFieldChange.getNewValue());
    }
    // session.close();
    // now test a bad ID
    empty.setId(4344L);
    auditEntries = auditEntryDao.getAuditEntries(empty, 0, MAX_RESULTS);
    assertEquals(0, auditEntries.size());
    // now test getting the count
    count = auditEntryDao.getAuditEntriesCount(empty);
    assertEquals(0L, (long) count);
}
