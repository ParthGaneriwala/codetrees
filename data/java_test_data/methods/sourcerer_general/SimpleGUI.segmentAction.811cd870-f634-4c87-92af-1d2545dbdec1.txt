private void segmentAction() {
    this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
    ImageBreaker ib = new ImageBreaker();
    ib.setImage(coverage);
    ib.isolateClusters();
    float[][][] rasters = ib.getRasterArrays();
    boolean[] isBackground = ib.getIsBackground();
    String[] classes = new String[rasters.length];
    double[][] classProbs = new double[rasters.length][];
    for (int i = 0; i < rasters.length; i++) {
        if (!(isBackground[i])) {
            classifier.setRaster(rasters[i]);
            classes[i] = classifier.classify();
            classProbs[i] = classifier.classifyProb();
        } else {
            classes[i] = "background";
            classProbs[i] = new double[] { Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN };
        }
    }
    String[] classNames = classifier.getClassNames();
    for (int j = 0; j < rasters.length; j++) {
        if (ib.getPixelCounts()[j] > 25) {
            System.out.println();
            System.out.println("Cluster " + j + "(size = " + ib.getPixelCounts()[j] + ")");
            System.out.println("Winner take all class: " + classes[j]);
            System.out.println("Probabilities:");
            for (int k = 0; k < classNames.length; k++) {
                System.out.print(classNames[k] + ",");
            }
            System.out.println();
            for (int l = 0; l < classProbs[j].length; l++) {
                System.out.print(classProbs[j][l] + ",");
            }
            System.out.println();
        }
    }
    this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
}
