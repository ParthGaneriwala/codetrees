@Test
public void testDeprecatedCharacterNGramProliferator() {
    FeatureProliferator proliferator = new CharacterNGramProliferator("CharNGram", CharacterNGramProliferator.RIGHT_TO_LEFT, 0, 3, 7, false);
    Feature feature = new Feature("OrigName", "emotion");
    List<Feature> ngramFeatures = proliferator.proliferate(feature);
    Assert.assertEquals(1, ngramFeatures.size());
    Assert.assertEquals("ion", ngramFeatures.get(0).getValue());
    feature = new Feature("OrigName", "motion");
    ngramFeatures = proliferator.proliferate(feature);
    Assert.assertEquals(0, ngramFeatures.size());
    feature = new Feature("OrigName", "locomotive");
    ngramFeatures = proliferator.proliferate(feature);
    Assert.assertEquals("ive", ngramFeatures.get(0).getValue());
    proliferator = new CharacterNGramProliferator(CharacterNGramProliferator.LEFT_TO_RIGHT, 0, 3, 3, false);
    feature = new Feature("OrigName", "locomotive");
    ngramFeatures = proliferator.proliferate(feature);
    Assert.assertEquals("loc", ngramFeatures.get(0).getValue());
    feature = new Feature("OrigName", "loc");
    ngramFeatures = proliferator.proliferate(feature);
    Assert.assertEquals("loc", ngramFeatures.get(0).getValue());
    feature = new Feature("OrigName", "lo");
    ngramFeatures = proliferator.proliferate(feature);
    Assert.assertEquals(0, ngramFeatures.size());
    proliferator = new CharacterNGramProliferator(CharacterNGramProliferator.LEFT_TO_RIGHT, 1, 3, 8, false);
    feature = new Feature("OrigName", "locomotive");
    ngramFeatures = proliferator.proliferate(feature);
    Assert.assertEquals("oc", ngramFeatures.get(0).getValue());
    proliferator = new CharacterNGramProliferator(CharacterNGramProliferator.LEFT_TO_RIGHT, 5, 6, 8, false);
    feature = new Feature("OrigName", "abcdefghi");
    ngramFeatures = proliferator.proliferate(feature);
    Assert.assertEquals("f", ngramFeatures.get(0).getValue());
}
