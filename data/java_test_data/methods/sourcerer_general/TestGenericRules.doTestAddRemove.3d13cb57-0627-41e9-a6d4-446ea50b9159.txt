public void doTestAddRemove(boolean useTGC) {
    Graph data = Factory.createGraphMem();
    data.add(new Triple(a, p, C1));
    data.add(new Triple(C1, sC, C2));
    data.add(new Triple(C2, sC, C3));
    List rules = Rule.parseRules("-> table(rdf:type)." + "[r1: (?x p ?c) -> (?x rdf:type ?c)] " + "[rdfs9:  (?x rdfs:subClassOf ?y) -> [ (?a rdf:type ?y) <- (?a rdf:type ?x)] ]");
    if (!useTGC) {
        rules.add(Rule.parseRule("[rdfs8:  (?a rdfs:subClassOf ?b), (?b rdfs:subClassOf ?c) -> (?a rdfs:subClassOf ?c)] "));
    }
    GenericRuleReasoner reasoner = (GenericRuleReasoner) GenericRuleReasonerFactory.theInstance().create(null);
    reasoner.setRules(rules);
    // reasoner.setTraceOn(true);
    reasoner.setMode(GenericRuleReasoner.HYBRID);
    reasoner.setTransitiveClosureCaching(useTGC);
    InfGraph infgraph = reasoner.bind(data);
    TestUtil.assertIteratorValues(this, infgraph.find(a, ty, null), new Object[] { new Triple(a, ty, C1), new Triple(a, ty, C2), new Triple(a, ty, C3) });
    logger.debug("Checkpoint 1");
    infgraph.delete(new Triple(C1, sC, C2));
    TestUtil.assertIteratorValues(this, infgraph.find(a, ty, null), new Object[] { new Triple(a, ty, C1) });
    logger.debug("Checkpoint 2");
    infgraph.add(new Triple(C1, sC, C3));
    infgraph.add(new Triple(b, p, C2));
    TestUtil.assertIteratorValues(this, infgraph.find(a, ty, null), new Object[] { new Triple(a, ty, C1), new Triple(a, ty, C3) });
    TestUtil.assertIteratorValues(this, infgraph.find(b, ty, null), new Object[] { new Triple(b, ty, C2), new Triple(b, ty, C3) });
    TestUtil.assertIteratorValues(this, data.find(null, null, null), new Object[] { new Triple(a, p, C1), new Triple(b, p, C2), new Triple(C2, sC, C3), new Triple(C1, sC, C3) });
}
