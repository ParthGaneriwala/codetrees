public ContactManager importContacts() throws Exception {
    if (!isLegalTable())
        throw new IllegalTableException();
    ArrayList<Contact> contacts = new ArrayList<Contact>();
    String sql = "SELECT * FROM " + tableName + ";";
    Statement stmt;
    try {
        stmt = conn.createStatement();
        ResultSet result = stmt.executeQuery(sql);
        while (result.next()) {
            long id = result.getInt("id");
            String name = result.getString("name");
            String phoneNum = result.getString("phoneNumber");
            String fixedTel = result.getString("fixedTel");
            String email = result.getString("email");
            String qq = result.getString("qq");
            String nick = result.getString("nick");
            String sexStr = result.getString("sex");
            String birthdayStr = result.getString("birthday");
            String icon = result.getString("icon");
            String addr = result.getString("address");
            String workplace = result.getString("workplace");
            String zipCode = result.getString("zipCode");
            String homePage = result.getString("homePage");
            String others = result.getString("otherWay");
            String normals = result.getString("normal");
            String relations = result.getString("relation");
            int sex = 0;
            if (sexStr.equalsIgnoreCase("M"))
                sex = 1;
            else if (sexStr.equalsIgnoreCase("F"))
                sex = 2;
            else
                ;
            BirthDay birth = new BirthDay(birthdayStr);
            ArrayList<String> otherWay = new ArrayList<String>();
            String regex = "([^;]+);*";
            Pattern pattern = Pattern.compile(regex);
            Matcher matcher = pattern.matcher(others);
            while (matcher.find()) {
                String str = matcher.group(1);
                otherWay.add(str);
            }
            ArrayList<NormalTag> normal = new ArrayList<NormalTag>();
            matcher = pattern.matcher(normals);
            while (matcher.find()) {
                String str = matcher.group(1);
                normal.add(NormalTag.createNormalTag(str));
            }
            Contact contact = Contact.createContact(name, phoneNum, fixedTel, email, qq, nick, sex, birth, icon, addr, workplace, zipCode, homePage, otherWay, normal, null);
            contacts.add(contact);
            regex = "(<([^;]+),([^;]+),([^;]+)>);*";
            pattern = Pattern.compile(regex);
            matcher = pattern.matcher(relations);
            while (matcher.find()) {
                String tag = matcher.group(2);
                String name1 = matcher.group(3);
                String name2 = matcher.group(4);
                RelationTag relationTag = RelationTag.createRelationTag(tag);
                ArrayList<Contact> B = new ArrayList<Contact>();
                for (int j = 0; j < contacts.size(); j++) {
                    if (contacts.get(j).getName().equals(name2))
                        B.add(contacts.get(j));
                }
                if (contact.getName().equals(name1)) {
                    for (int k = 0; k < B.size(); k++) {
                        ContactManager.addTagToContact(new Pair<Contact, Contact>(contact, B.get(k)), relationTag);
                    }
                }
            }
        }
        result.close();
    } catch (Exception e) {
        e.printStackTrace();
    }
    return new ContactManager(contacts);
}
