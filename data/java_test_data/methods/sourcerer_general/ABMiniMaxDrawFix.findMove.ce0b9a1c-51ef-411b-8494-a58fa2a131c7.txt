@Override
public Board findMove(Board board) {
    // REFLECT THE OPPONENTS BEST POSSIBLE SCORE
    assert board.blackToMove == isBlack;
    int bestValue = MIN;
    if (isBlack) {
        bestValue = MAX;
    }
    int alpha = MIN;
    int beta = MAX;
    ArrayList<Board> moves = board.generateMoves();
    // If no moves found, return null as error flag
    if (moves.isEmpty()) {
        return null;
    }
    // If only one possible move found - just return that.
    if (moves.size() == 1) {
        return moves.get(0);
    }
    Board bestMove = moves.get(0);
    for (Board move : moves) {
        int value = search(move, searchDepth, alpha, beta);
        if (isBlack) {
            if (value < bestValue) {
                if (value < beta) {
                    beta = value;
                }
                bestValue = value;
                bestMove = move;
            }
        } else {
            if (value > bestValue) {
                if (value > alpha) {
                    alpha = value;
                }
                bestValue = value;
                bestMove = move;
            }
        }
    // out.println("Considered value " + bestValue);
    }
    if (bestMove != null) {
        if (printBestMoveValue) {
            out.println("The best move has value " + bestValue);
        }
        int nBlack = BitUtils.countBits(bestMove.black);
        int nWhite = BitUtils.countBits(bestMove.white);
        // and is probably never repeated if > 5 pieces of each
        if ((board.black & board.kings) != 0 && (board.white & board.kings) != 0 && (nBlack < 6) && (nWhite < 6)) {
            int nOldPieces = BitUtils.countBits(board.black | board.white);
            int nOldKings = BitUtils.countBits(board.kings);
            int nNewPieces = BitUtils.countBits(bestMove.black | bestMove.white);
            int nNewKings = BitUtils.countBits(bestMove.kings);
            boolean piecesTaken = (nOldPieces - nNewPieces != 0);
            boolean wasCrowned = (nOldKings - nNewKings != 0);
            // - clear the board history (no risk for draws among prev. boards)
            if (piecesTaken || wasCrowned) {
                boardHistory.clear();
                drawBoardsSize = 0;
            // out.println("cleared");
            }
            // Add/increment count of the current move to the board history
            Integer occurrences = boardHistory.get(bestMove);
            if (occurrences != null) {
                int o = occurrences + 1;
                // out.println("Put board in boardHistory with a count of " + o);
                // GameEngine.printBoard(bestMove);
                boardHistory.put(new Board(bestMove), o);
                if (o == 2) {
                    drawBoards[drawBoardsSize] = new Board(bestMove);
                    drawBoardsSize++;
                }
            } else {
                // out.println("Put a new board in boardHistory with a count of 1");
                boardHistory.put(new Board(bestMove), ONE);
            }
        }
    }
    return bestMove;
}
