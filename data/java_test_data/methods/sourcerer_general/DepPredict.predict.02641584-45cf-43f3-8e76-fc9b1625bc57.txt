public void predict(String inputFile, String outputFile) throws Exception {
    AbstractReader<DepNode, DepTree> reader = null;
    if (s_format.equals(AbstractReader.FORMAT_RAW))
        reader = new RawReader(inputFile, g_tokenizer);
    else if (s_format.equals(AbstractReader.FORMAT_POS))
        reader = new PosReader(inputFile);
    else if (s_format.equals(AbstractReader.FORMAT_DEP))
        reader = new DepReader(inputFile, false);
    else if (s_format.equals(AbstractReader.FORMAT_CONLLX))
        reader = new CoNLLXReader(inputFile, false);
    reader.setLanguage(s_language);
    PrintStream fout = IOUtil.createPrintFileStream(outputFile);
    // PrintStream fplot = IOUtil.createPrintFileStream("plot.txt");
    DepTree tree;
    long st, et;
    int n = 0;
    System.out.println("\n* Predict: " + inputFile);
    while (true) {
        st = System.currentTimeMillis();
        tree = reader.nextTree();
        if (tree == null)
            break;
        if (s_format.equals(AbstractReader.FORMAT_RAW)) {
            g_postagger.postag(tree);
            g_lemmatizer.lemmatize(tree);
        } else if (s_format.equals(AbstractReader.FORMAT_POS)) {
            g_lemmatizer.lemmatize(tree);
        }
        g_parser.parse(tree);
        n++;
        et = System.currentTimeMillis();
        fout.println(tree + "\n");
        if (n % 100 == 0)
            System.out.print("\r- parsing: " + n);
        int index = (tree.size() >= 101) ? 9 : (tree.size() - 1) / 10;
        d_time[index] += (et - st);
        d_time_total += (et - st);
        n_size_total[index]++;
    // fplot.println(tree.size()+"\t"+tree.n_trans);
    }
    System.out.println("\r- parsing: " + n);
    n_total += n;
    fout.close();
    reader.close();
// fplot.flush();	fplot.close();
}
