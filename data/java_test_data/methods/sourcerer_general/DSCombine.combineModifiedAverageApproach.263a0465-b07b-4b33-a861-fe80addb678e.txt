public static BeliefFunction combineModifiedAverageApproach(BeliefFunction[] beliefs) {
    // System.out.println("Combining using a modified average approach (Yong et al 2004)");
    // System.out.println("in are");
    // for (int i = 0; i < beliefs.length; i++){
    // System.out.println(beliefs[i]);
    // System.out.println("- - - - - - - - - - - - - - - - - - - - - - -");
    // }
    // this is the approach in Yong et al. (2004) Decision Support Systems 38:489-493.
    // I first need the credibility of each belief function, which in turn requires the
    // support for each belief function
    double supportSum = 0;
    double[] supports = new double[beliefs.length];
    double[] credibilities = new double[beliefs.length];
    for (int i = 0; i < beliefs.length; i++) {
        double supportI = 0;
        for (int j = 0; j < beliefs.length; j++) {
            if (i != j) {
                // the distance is in Jousselme et al. (2001) Information Fusion 2:91-101.
                // equation 16 on p. 95
                double scalar_i_i = scalarProduct(beliefs[i], beliefs[i]);
                double scalar_j_j = scalarProduct(beliefs[j], beliefs[j]);
                double scalar_i_j = scalarProduct(beliefs[i], beliefs[j]);
                double temp = 0.5 * (scalar_i_i + scalar_j_j - 2 * scalar_i_j);
                if ((temp < 0) && (temp > -0.00001)) {
                    temp = 0;
                }
                double dist_i_j = Math.sqrt(temp);
                supportI = supportI + 1 - dist_i_j;
            // if (Double.isNaN(dist_i_j)){
            // System.out.println("I've got a NaN!");  //really, just stop for the debugger!
            // }
            }
        }
        supports[i] = supportI;
        supportSum = supportSum + supportI;
    }
    for (int i = 0; i < beliefs.length; i++) {
        credibilities[i] = supports[i] / supportSum;
    }
    // then compute the average weighted by the credibilities.
    BeliefFunction average = new BeliefFunction(singletons);
    Vector v = new Vector();
    for (int i = 0; i < beliefs.length; i++) {
        String[][] nonZeroI = beliefs[i].getNonZeroMassHypos();
        for (int j = 0; j < nonZeroI.length; j++) {
            if (!(v.contains(nonZeroI[j]))) {
                v.add(nonZeroI[j]);
            }
        }
    }
    Iterator it = v.iterator();
    while (it.hasNext()) {
        String[] hypo = (String[]) it.next();
        double sum = 0;
        for (int i = 0; i < beliefs.length; i++) {
            sum = sum + credibilities[i] * beliefs[i].getMass(hypo);
        }
        average.addMass(sum / beliefs.length, hypo);
    }
    // finally, combine the weighted average with itself n-1 times as in combineAverageApproach
    BeliefFunction ret = new BeliefFunction(singletons);
    try {
        ret = average;
        for (int i = 0; i < beliefs.length - 1; i++) {
            ret = combineShafer(ret, average);
        }
    } catch (DSTotalConflictException dtce) {
        System.out.println("This shouldn't happen--how can there be total conflict when iteratively combining identical functions!");
        System.out.println(average);
    }
    return ret;
}
