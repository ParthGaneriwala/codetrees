// GenericPortlet Impl -----------------------------------------------------
public void doView(RenderRequest request, RenderResponse response) throws PortletException, IOException {
    if (System.getProperty("DEBUG") != null) {
        System.out.println("ScrumReleasePortlet-> doView");
    }
    try {
        PortletContext context = getPortletContext();
        // Preferences
        String categoryId = request.getPreferences().getValue("categoryId", "-1");
        request.setAttribute("categoryId", categoryId);
        if ("-1".equals(categoryId)) {
            // Portlet is not configured
            PortletRequestDispatcher requestDispatcher = context.getRequestDispatcher(NOT_CONFIGURED_PAGE);
            requestDispatcher.include(request, response);
        } else {
            // Portlet is configured
            Connection db = PortalUtils.useConnection(request);
            Project thisProject = PortalUtils.getProject(request);
            TaskCategory category = new TaskCategory(db, Integer.parseInt(categoryId));
            request.setAttribute("category", category);
            // Cross reference the open target releases with the stories
            ProjectItemList targetReleaseList = new ProjectItemList();
            targetReleaseList.setProjectId(thisProject.getId());
            targetReleaseList.setEnabled(Constants.TRUE);
            targetReleaseList.buildList(db, ProjectItemList.LIST_TARGET_RELEASE);
            LinkedHashMap<ProjectItem, TaskList> releaseStatusList = new LinkedHashMap<ProjectItem, TaskList>();
            for (Object thisReleaseItem : targetReleaseList) {
                ProjectItem thisRelease = (ProjectItem) thisReleaseItem;
                TaskList storiesList = new TaskList();
                storiesList.setProjectId(thisProject.getId());
                storiesList.setCategoryId(Integer.parseInt(categoryId));
                storiesList.setTargetRelease(thisRelease.getId());
                storiesList.setComplete(Constants.FALSE);
                storiesList.buildList(db);
                if (storiesList.size() > 0) {
                    releaseStatusList.put(thisRelease, storiesList);
                }
            }
            request.setAttribute("releaseStatusList", releaseStatusList);
            // Cross reference the open target releases with the stories
            ProjectItemList statusList = new ProjectItemList();
            statusList.setProjectId(thisProject.getId());
            statusList.buildList(db, ProjectItemList.LIST_STATUS);
            request.setAttribute("statusList", statusList);
            // Cross reference the open target releases with the stories
            ProjectItemList remainingWorkList = new ProjectItemList();
            remainingWorkList.setProjectId(thisProject.getId());
            remainingWorkList.buildList(db, ProjectItemList.LIST_LOE_REMAINING);
            request.setAttribute("remainingWorkList", remainingWorkList);
            PortletRequestDispatcher requestDispatcher = context.getRequestDispatcher(VIEW_PAGE);
            requestDispatcher.include(request, response);
        }
    } catch (Exception e) {
        throw new PortletException(e.getMessage());
    }
}
