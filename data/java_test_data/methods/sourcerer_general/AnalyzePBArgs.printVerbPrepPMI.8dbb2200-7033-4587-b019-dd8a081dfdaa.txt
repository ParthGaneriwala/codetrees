void printVerbPrepPMI(String outputFile) {
    PrintStream fout = IOUtil.createPrintFileStream(outputFile);
    ArrayList<JObjectDoubleTuple<String>> list = new ArrayList<JObjectDoubleTuple<String>>();
    int nVerb, nVerbTotal, nPrep, nVerbArg, nVerbArgTotal, nVerbPrep;
    String key;
    String[] tmp;
    @SuppressWarnings("unused") double pmi, pv, p, v, pnv, pmv;
    double smooth = 0.000001;
    nVerbTotal = m_verbs.get(TOTAL);
    nVerbArgTotal = m_verbArgs.get(TOTAL);
    for (ObjectCursor<String> cur : m_verbPreps.keys()) {
        key = cur.value;
        tmp = key.split("_");
        nVerbPrep = m_verbPreps.get(key);
        if (nVerbPrep == 0)
            continue;
        nVerb = m_verbs.get(tmp[0]);
        nVerbArg = m_verbArgs.get(tmp[0]);
        nPrep = m_preps.get(tmp[1]);
        pv = (double) nVerbPrep / nVerbArg;
        p = (double) nPrep / nVerbArgTotal;
        v = (double) nVerb / nVerbTotal;
        pnv = smooth + (double) m_verbPrepNs.get(key) / m_verbArgNs.get(tmp[0]);
        pmv = smooth + (double) m_verbPrepMs.get(key) / m_verbArgMs.get(tmp[0]);
        if (m_verbArgMs.get(tmp[0]) == 0)
            pmv = smooth;
        pmi = Math.log(pnv / pmv);
        // pmi = getPMI(pv, p);
        // pmi /= -(Math.log(pv) + Math.log(v));
        list.add(new JObjectDoubleTuple<String>(key, pmi));
    }
    Collections.sort(list);
    for (JObjectDoubleTuple<String> tup : list) {
        key = tup.object;
        tmp = key.split("_");
        pnv = smooth + (double) m_verbPrepNs.get(key) / m_verbArgNs.get(tmp[0]);
        pmv = smooth + (double) m_verbPrepMs.get(key) / m_verbArgMs.get(tmp[0]);
        if (m_verbArgMs.get(tmp[0]) == 0)
            pmv = smooth;
        fout.println(key + "\t" + pnv + "\t" + pmv + "\t" + tup.value);
    // fout.println(key+"\t"+m_verbPreps.get(key)+"\t"+m_preps.get(tmp[1])+"\t"+m_verbs.get(tmp[0])+"\t"+tup.value);
    }
    fout.flush();
    fout.close();
}
