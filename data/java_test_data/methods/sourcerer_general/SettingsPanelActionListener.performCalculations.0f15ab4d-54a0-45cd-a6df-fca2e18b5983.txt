/**
 * Method that redirects the calculations of the distribution and the correction.
 * Redirects the visualization of the network and
 * redirects the making of a file with the interesting data.
 */
public void performCalculations(HashSet selectedNodes, HashSet allNodes, HashSet noClassificationsSet) {
    HashMap testMap = null;
    HashMap correctionMap = null;
    HashMap mapSmallX = null;
    HashMap mapSmallN = null;
    HashMap mapBigX = null;
    HashMap mapBigN = null;
    BingoAlgorithm algorithm = new BingoAlgorithm(params);
    CalculateTestTask test = algorithm.calculate_distribution();
    boolean success = TaskManager.executeTask(test, config);
    testMap = test.getTestMap();
    CalculateCorrectionTask correction = algorithm.calculate_corrections(testMap);
    if ((correction != null) && (!params.getTest().equals(NONE))) {
        success = TaskManager.executeTask(correction, config);
        correctionMap = correction.getCorrectionMap();
    }
    mapSmallX = test.getMapSmallX();
    mapSmallN = test.getMapSmallN();
    mapBigX = test.getMapBigX();
    mapBigN = test.getMapBigN();
    DisplayBiNGOWindow display;
    CreateBiNGOFile file;
    if (params.getVisualization().equals(VIZSTRING)) {
        display = new DisplayBiNGOWindow(testMap, correctionMap, mapSmallX, mapSmallN, mapBigX, mapBigN, params.getSignificance().toString(), params.getOntology(), params.getCluster_name(), params.getCategory() + "");
        // displaying the BiNGO CyNetwork.
        display.makeWindow();
    }
    if ((goBin == null) || goBin.isWindowClosed()) {
        goBin = new clusterviz.BiNGO.BiNGO.GOlorize.GoBin(settingsPanel, startNetworkView);
    }
    if (params.getAnnotationFile() == null) {
        params.setAnnotationFile("Cytoscape loaded annotation: " + params.getAnnotation().toString());
    }
    if (params.getOntologyFile() == null) {
        params.setOntologyFile("Cytoscape loaded ontology: " + params.getOntology().toString());
    }
    goBin.createResultTab(testMap, correctionMap, mapSmallX, mapSmallN, mapBigX, mapBigN, params.getSignificance().toString(), params.getAnnotation(), params.getAlias(), params.getOntology(), params.getAnnotationFile().toString(), params.getOntologyFile().toString(), params.getTest() + "", params.getCorrection() + "", params.getOverOrUnder() + "", params.getFileoutput_dir(), params.getCluster_name() + ".bgo", params.getReferenceSet() + "", params.getCategory() + "", selectedNodes, startNetwork, startNetworkView);
    if (params.isFileoutput()) {
        file = new CreateBiNGOFile(testMap, correctionMap, mapSmallX, mapSmallN, mapBigX, mapBigN, params.getSignificance().toString(), params.getAnnotation(), params.getDeleteCodes(), params.getAlias(), params.getOntology(), params.getAnnotationFile().toString(), params.getOntologyFile().toString(), params.getTest() + "", params.getCorrection() + "", params.getOverOrUnder() + "", params.getFileoutput_dir(), params.getCluster_name() + ".bgo", params.getReferenceSet() + "", params.getCategory() + "", selectedNodes, noClassificationsSet);
        file.makeFile();
        if (params.getTest().equals(NONE) && params.getCorrection().equals(NONE)) {
            CreateAnnotationFile file2 = new CreateAnnotationFile(params.getAnnotation(), params.getAlias(), params.getOntology(), params.getFileoutput_dir(), params.getCluster_name() + ".anno", selectedNodes);
            file2.makeFile();
        }
    // show resulting File in window
    /*      File f = new File(params.getFileoutput_dir(), params.getCluster_name() + ".bgo");
            String fileName = f.getAbsolutePath();
            TextFileReader reader = new TextFileReader(fileName);
            reader.read();
            String fullText = reader.getText();
            JTextArea textArea = new JTextArea(20, 60);
            JScrollPane scrollPane = new JScrollPane(textArea, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
            textArea.setEditable(false);
            textArea.append(fullText);
            textArea.setCaretPosition(0);
            JFrame window = new JFrame(params.getCluster_name() + " BiNGO Results");
            window.getContentPane().add(new JPanel().add(scrollPane));
            window.pack();
            window.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
            // for top right position of the output panel.
            window.setLocation(screenSize.width - window.getWidth(), 0);
            window.setVisible(true);
            window.setResizable(true);*/
    }
}
