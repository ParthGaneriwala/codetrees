protected boolean insert(Connection db) throws SQLException {
    if (!isValid()) {
        return false;
    }
    boolean commit = db.getAutoCommit();
    try {
        if (commit) {
            db.setAutoCommit(false);
        }
        StringBuffer sql = new StringBuffer();
        sql.append("INSERT INTO " + tableName + "(" + uniqueFieldId + ", comment, ");
        if (entered != null) {
            sql.append("entered, ");
        }
        if (modified != null) {
            sql.append("modified, ");
        }
        if (closed != null) {
            sql.append("closed, ");
        }
        sql.append("enteredby, modifiedby, closedby) ");
        sql.append("VALUES (?, ?, ");
        if (entered != null) {
            sql.append("?, ");
        }
        if (modified != null) {
            sql.append("?, ");
        }
        if (closed != null) {
            sql.append("?, ");
        }
        sql.append("?, ?, ?) ");
        int i = 0;
        // Insert the comment
        PreparedStatement pst = db.prepareStatement(sql.toString());
        pst.setInt(++i, linkItemId);
        pst.setString(++i, comment);
        if (entered != null) {
            pst.setTimestamp(++i, entered);
        }
        if (modified != null) {
            pst.setTimestamp(++i, entered);
        }
        if (closed != null) {
            pst.setTimestamp(++i, closed);
        }
        pst.setInt(++i, enteredBy);
        pst.setInt(++i, modifiedBy);
        DatabaseUtils.setInt(pst, ++i, closedBy);
        pst.execute();
        pst.close();
        id = DatabaseUtils.getCurrVal(db, tableName + "_comment_id_seq", -1);
        if (commit) {
            db.commit();
        }
    } catch (SQLException e) {
        if (commit) {
            db.rollback();
        }
        throw new SQLException(e.getMessage());
    } finally {
        if (commit) {
            db.setAutoCommit(true);
        }
    }
    return true;
}
