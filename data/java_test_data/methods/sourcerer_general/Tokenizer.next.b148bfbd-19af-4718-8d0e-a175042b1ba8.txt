int next() throws PreprocessorException {
    skipBlanks();
    startIndex = currentIndex;
    final String cmd = this.command;
    final int len = this.commandLength;
    if (currentIndex >= len) {
        tokenType = Token.EOI;
        return tokenType;
    }
    char ch = cmd.charAt(currentIndex);
    if (Character.isJavaIdentifierStart(ch)) {
        tokenType = Token.IDENT;
        currentIndex++;
        while (currentIndex < len && Character.isJavaIdentifierPart(cmd.charAt(currentIndex))) {
            currentIndex++;
        }
        return tokenType;
    } else if (Character.isDigit(ch)) {
        tokenType = Token.NUMBER;
        currentIndex++;
        while (currentIndex < len && Character.isDigit(cmd.charAt(currentIndex))) {
            currentIndex++;
        }
        if (currentIndex < len && cmd.charAt(currentIndex) == '.') {
            currentIndex++;
        }
        while (currentIndex < len && Character.isDigit(cmd.charAt(currentIndex))) {
            currentIndex++;
        }
        return tokenType;
    } else if (ch == '"') {
        tokenType = Token.STRING;
        currentIndex++;
        int pos = cmd.indexOf('"', currentIndex);
        if (pos == -1) {
            throw new PreprocessorException("Unclosed string literal: " + // NOI18N
            cmd.substring(startIndex));
        }
        currentIndex = pos + 1;
        return tokenType;
    }
    switch(ch) {
        case Token.LPAREN:
        case Token.RPAREN:
        case Token.XOR:
        case Token.NOT:
            {
                currentIndex++;
                return (tokenType = ch);
            }
        case Token.ASSIGN:
            {
                currentIndex++;
                if (currentIndex < len && cmd.charAt(currentIndex) == Token.ASSIGN) {
                    currentIndex++;
                    tokenType = Token.EQ;
                } else {
                    tokenType = Token.ASSIGN;
                }
                return tokenType;
            }
        case Token.LT:
            {
                currentIndex++;
                if (currentIndex < len && cmd.charAt(currentIndex) == Token.ASSIGN) {
                    currentIndex++;
                    tokenType = Token.LTE;
                } else {
                    tokenType = Token.LT;
                }
                return tokenType;
            }
        case Token.GT:
            {
                currentIndex++;
                if (currentIndex < len && cmd.charAt(currentIndex) == Token.ASSIGN) {
                    currentIndex++;
                    tokenType = Token.GTE;
                } else {
                    tokenType = Token.GT;
                }
                return tokenType;
            }
        case Token.AND:
        case Token.OR:
            {
                currentIndex++;
                if (currentIndex < len && cmd.charAt(currentIndex) == ch) {
                    currentIndex++;
                }
                return (tokenType = ch);
            }
        default:
            {
                throw new PreprocessorException("Syntax error: " + // NOI18N
                cmd.substring(currentIndex));
            }
    }
}
