public void initializePackageContents() {
    if (isInitialized)
        return;
    isInitialized = true;
    // Initialize package
    setName(eNAME);
    setNsPrefix(eNS_PREFIX);
    setNsURI(eNS_URI);
    // Obtain other dependent packages
    DomainPackage theDomainPackage = (DomainPackage) EPackage.Registry.INSTANCE.getEPackage(DomainPackage.eNS_URI);
    CorePackage theCorePackage = (CorePackage) EPackage.Registry.INSTANCE.getEPackage(CorePackage.eNS_URI);
    // Create type parameters
    // Set bounds for type parameters
    // Add supertypes to classes
    activePowerLimitEClass.getESuperTypes().add(this.getOperationalLimit());
    operationalLimitEClass.getESuperTypes().add(theCorePackage.getIdentifiedObject());
    apparentPowerLimitEClass.getESuperTypes().add(this.getOperationalLimit());
    branchGroupEClass.getESuperTypes().add(theCorePackage.getIdentifiedObject());
    currentLimitEClass.getESuperTypes().add(this.getOperationalLimit());
    operationalLimitSetEClass.getESuperTypes().add(theCorePackage.getIdentifiedObject());
    voltageLimitEClass.getESuperTypes().add(this.getOperationalLimit());
    // Initialize classes and features; add operations and parameters
    initEClass(activePowerLimitEClass, ActivePowerLimit.class, "ActivePowerLimit", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getActivePowerLimit_Value(), theDomainPackage.getActivePower(), null, "value", null, 0, 1, ActivePowerLimit.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, !IS_ORDERED);
    initEClass(operationalLimitEClass, OperationalLimit.class, "OperationalLimit", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getOperationalLimit_Type(), theDomainPackage.getString(), null, "type", null, 0, 1, OperationalLimit.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, !IS_ORDERED);
    initEClass(apparentPowerLimitEClass, ApparentPowerLimit.class, "ApparentPowerLimit", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getApparentPowerLimit_Value(), theDomainPackage.getApparentPower(), null, "value", null, 0, 1, ApparentPowerLimit.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, !IS_ORDERED);
    initEClass(branchGroupEClass, BranchGroup.class, "BranchGroup", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getBranchGroup_MaximumActivePower(), theDomainPackage.getActivePower(), null, "maximumActivePower", null, 0, 1, BranchGroup.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, !IS_ORDERED);
    initEReference(getBranchGroup_MaximumReactivePower(), theDomainPackage.getReactivePower(), null, "maximumReactivePower", null, 0, 1, BranchGroup.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, !IS_ORDERED);
    initEReference(getBranchGroup_MinimumActivePower(), theDomainPackage.getActivePower(), null, "minimumActivePower", null, 0, 1, BranchGroup.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, !IS_ORDERED);
    initEReference(getBranchGroup_MinimumReactivePower(), theDomainPackage.getReactivePower(), null, "minimumReactivePower", null, 0, 1, BranchGroup.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, !IS_ORDERED);
    initEReference(getBranchGroup_MonitorActivePower(), theDomainPackage.getBoolean(), null, "monitorActivePower", null, 0, 1, BranchGroup.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, !IS_ORDERED);
    initEReference(getBranchGroup_MonitorReactivePower(), theDomainPackage.getBoolean(), null, "monitorReactivePower", null, 0, 1, BranchGroup.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, !IS_ORDERED);
    initEClass(branchGroupTerminalEClass, BranchGroupTerminal.class, "BranchGroupTerminal", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getBranchGroupTerminal_PositiveFlowIn(), theDomainPackage.getBoolean(), null, "positiveFlowIn", null, 0, 1, BranchGroupTerminal.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, !IS_ORDERED);
    initEClass(currentLimitEClass, CurrentLimit.class, "CurrentLimit", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getCurrentLimit_Value(), theDomainPackage.getCurrentFlow(), null, "value", null, 0, 1, CurrentLimit.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, !IS_ORDERED);
    initEClass(operationalLimitSetEClass, OperationalLimitSet.class, "OperationalLimitSet", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEClass(operationalLimitTypeEClass, OperationalLimitType.class, "OperationalLimitType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getOperationalLimitType_AcceptableDuration(), theDomainPackage.getSeconds(), null, "acceptableDuration", null, 0, 1, OperationalLimitType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, !IS_ORDERED);
    initEAttribute(getOperationalLimitType_Direction(), this.getOperationalLimitDirectionKind(), "direction", null, 0, 1, OperationalLimitType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, !IS_ORDERED);
    initEClass(voltageLimitEClass, VoltageLimit.class, "VoltageLimit", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getVoltageLimit_Value(), theDomainPackage.getVoltage(), null, "value", null, 0, 1, VoltageLimit.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, !IS_ORDERED);
    // Initialize enums and add enum literals
    initEEnum(operationalLimitDirectionKindEEnum, OperationalLimitDirectionKind.class, "OperationalLimitDirectionKind");
    addEEnumLiteral(operationalLimitDirectionKindEEnum, OperationalLimitDirectionKind.HIGH);
    addEEnumLiteral(operationalLimitDirectionKindEEnum, OperationalLimitDirectionKind.LOW);
    addEEnumLiteral(operationalLimitDirectionKindEEnum, OperationalLimitDirectionKind.ABSOLUTE_VALUE);
}
