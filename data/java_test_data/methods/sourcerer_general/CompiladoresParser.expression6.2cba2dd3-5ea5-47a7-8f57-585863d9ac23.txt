// $ANTLR start "expression6"
public final CompiladoresParser.expression6_return expression6() throws RecognitionException {
    CompiladoresParser.expression6_return retval = new CompiladoresParser.expression6_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token NOT133 = null;
    CompiladoresParser.expression7_return expression7134 = null;
    CommonTree NOT133_tree = null;
    try {
        dbg.enterRule(getGrammarFileName(), "expression6");
        if (getRuleLevel() == 0) {
            dbg.commence();
        }
        incRuleLevel();
        dbg.location(176, 1);
        try {
            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:176:15: ( ( NOT )? expression7 )
            dbg.enterAlt(1);
            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:176:17: ( NOT )? expression7
            {
                root_0 = (CommonTree) adaptor.nil();
                dbg.location(176, 17);
                // /home/CIN/fmm/Desktop/grammar/Compiladores.g:176:17: ( NOT )?
                int alt33 = 2;
                try {
                    dbg.enterSubRule(33);
                    try {
                        dbg.enterDecision(33);
                        int LA33_0 = input.LA(1);
                        if ((LA33_0 == NOT)) {
                            alt33 = 1;
                        }
                    } finally {
                        dbg.exitDecision(33);
                    }
                    switch(alt33) {
                        case 1:
                            dbg.enterAlt(1);
                            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:176:18: NOT
                            {
                                dbg.location(176, 21);
                                NOT133 = (Token) match(input, NOT, FOLLOW_NOT_in_expression61470);
                                NOT133_tree = (CommonTree) adaptor.create(NOT133);
                                root_0 = (CommonTree) adaptor.becomeRoot(NOT133_tree, root_0);
                            }
                            break;
                    }
                } finally {
                    dbg.exitSubRule(33);
                }
                dbg.location(176, 25);
                pushFollow(FOLLOW_expression7_in_expression61475);
                expression7134 = expression7();
                state._fsp--;
                adaptor.addChild(root_0, expression7134.getTree());
            }
            retval.stop = input.LT(-1);
            retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
        }
        dbg.location(176, 36);
    } finally {
        dbg.exitRule(getGrammarFileName(), "expression6");
        decRuleLevel();
        if (getRuleLevel() == 0) {
            dbg.terminate();
        }
    }
    return retval;
}
