public boolean insert(Connection db) throws SQLException {
    boolean commit = false;
    try {
        commit = db.getAutoCommit();
        if (commit) {
            db.setAutoCommit(false);
        }
        StringBuffer sql = new StringBuffer();
        sql.append("INSERT INTO project_team ");
        sql.append("(" + (id > -1 ? "team_id, " : "") + "project_id, user_id, userlevel, tools, ");
        if (entered != null) {
            sql.append("entered, ");
        }
        if (modified != null) {
            sql.append("modified, ");
        }
        if (lastAccessed != null) {
            sql.append("last_accessed, ");
        }
        sql.append("enteredby, modifiedby, status, notification, email_updates_schedule) ");
        sql.append("VALUES (?, ?, ?, ?, ");
        if (id > -1) {
            sql.append("?, ");
        }
        if (entered != null) {
            sql.append("?, ");
        }
        if (modified != null) {
            sql.append("?, ");
        }
        if (lastAccessed != null) {
            sql.append("?, ");
        }
        sql.append("?, ?, ?, ?, ?) ");
        PreparedStatement pst = db.prepareStatement(sql.toString());
        int i = 0;
        if (id > -1) {
            pst.setInt(++i, id);
        }
        pst.setInt(++i, projectId);
        pst.setInt(++i, userId);
        DatabaseUtils.setInt(pst, ++i, userLevel);
        pst.setBoolean(++i, tools);
        if (entered != null) {
            pst.setTimestamp(++i, entered);
        }
        if (modified != null) {
            pst.setTimestamp(++i, modified);
        }
        if (lastAccessed != null) {
            pst.setTimestamp(++i, lastAccessed);
        }
        pst.setInt(++i, enteredBy);
        pst.setInt(++i, modifiedBy);
        DatabaseUtils.setInt(pst, ++i, status);
        pst.setBoolean(++i, notification);
        DatabaseUtils.setInt(pst, ++i, emailUpdatesSchedule);
        pst.execute();
        pst.close();
        id = DatabaseUtils.getCurrVal(db, "project_team_team_id_seq", id);
        // Update the scheduled emails queue
        EmailUpdatesUtils.saveQueue(db, this);
        if (commit) {
            db.commit();
        }
    } catch (SQLException e) {
        if (commit) {
            db.rollback();
        }
        throw new SQLException(e.getMessage());
    } finally {
        db.setAutoCommit(true);
    }
    CacheUtils.invalidateValue(Constants.SYSTEM_PROJECT_CACHE, projectId);
    return true;
}
