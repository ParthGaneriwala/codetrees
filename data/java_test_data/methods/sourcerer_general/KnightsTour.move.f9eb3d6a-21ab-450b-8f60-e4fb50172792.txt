@Override
public boolean move(int x, int y) {
    if (this.board.checkValidPoint(x, y) && !this.board.getGrid()[x][y].isOccupied()) {
        if (!knight.getHasMoved()) {
            knight.setHasMoved();
            this.board.getGrid()[x][y].setOccupied(true);
            // this.board.getGrid()[x][y].setPiece(knight);
            Knight temp = new Knight();
            temp.player = false;
            this.board.getGrid()[x][y].setPiece(temp);
            lastMove_x = x;
            lastMove_y = y;
            manageState();
            gs.addState(new KnightsTour(this, gs, x, y));
            gs.resetStateIndex();
            notifyAllObservers(new ButtonEventBundle(false, false, null, hasWon(), hasLost(x, y), knight, new ButtonEvent(x, y), new ButtonEvent(x, y)));
            return true;
        } else {
            if (knight.isMoveLegal(lastMove_x, lastMove_y, x, y)) {
                this.board.getGrid()[x][y].setPiece(knight);
                this.board.getGrid()[x][y].setOccupied(true);
                Pawn temp = new Pawn();
                temp.player = true;
                this.board.getGrid()[lastMove_x][lastMove_y].setPiece(temp);
                lastMove_x = x;
                lastMove_y = y;
                manageState();
                gs.addState(new KnightsTour(this, gs, x, y));
                gs.resetStateIndex();
                notifyAllObservers(null);
                return true;
            }
        }
    }
    return false;
}
