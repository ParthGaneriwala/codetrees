private void appendMetricsResultsToElement(final Metric myMetric, final Element myElement) {
    if (currentBuildType == ResultFileBuildType.UnitFile) {
        // the metric has an atomic value return
        if (myMetric.getMetricType().equals("single")) {
            Object results = null;
            try {
                // Processing the desired XQuery
                results = myMetric.getCompiledQuery().evaluateSingle(SaxonProcessor.getInstance().getDynamicQueryContext());
            } catch (XPathException e) {
                // TODO Bloc catch auto-g�n�r�
                e.printStackTrace();
            }
            // Stop the process if results are null
            if (results == null)
                return;
            // The metric have to be populated over all package level
            if (myMetric.getPopulationLevel() == 1) {
                thePackageMetricsResults.setMetricsResults(myMetric.getMetricShortName(), results);
            }
            // Set the value to the element
            Text textValue = theResultFile.createTextNode(results.toString());
            myElement.appendChild(textValue);
            return;
        }
        if (myMetric.getMetricType().equals("list")) {
            try {
                SequenceIterator iteratorResults = myMetric.getCompiledQuery().iterator(SaxonProcessor.getInstance().getDynamicQueryContext());
                QueryResult.serializeSequence(iteratorResults, SaxonProcessor.getInstance().getConfig(), new PrintWriter(new FileOutputStream(new File("temp.xml"))), SaxonProcessor.getInstance().getProperties());
                // Creates the XML Document
                DocumentBuilder db = documentBuilderFactory.newDocumentBuilder();
                // Read the metrics configuration file
                Document doc = db.parse("temp.xml");
                Element rootElement = doc.getDocumentElement();
                // Starting the parsing process
                if (rootElement != null && rootElement.hasChildNodes()) {
                    // Fetching the child nodes
                    NodeList nodeList = rootElement.getChildNodes();
                    int cpt = 0;
                    // Stepping trough the child node
                    while (nodeList.getLength() > 0 && cpt < nodeList.getLength()) {
                        Node childNode = nodeList.item(cpt++);
                        // Process the node to check his validity and generates
                        // the output element
                        Element generatedElementFromNode = processNodeParsing(childNode);
                        // Appending the new element to our document
                        if (generatedElementFromNode != null) {
                            myElement.appendChild(generatedElementFromNode);
                        }
                        // Continue to iterate over the xml tree
                        if (childNode.hasChildNodes()) {
                            parseXMLRecursively(childNode, generatedElementFromNode);
                        }
                    }
                }
            } catch (FileNotFoundException e1) {
                // TODO Bloc catch
                // auto-g�n�r�
                e1.printStackTrace();
            } catch (ParserConfigurationException e) {
                // TODO Bloc catch auto-g�n�r�
                e.printStackTrace();
            } catch (SAXException e) {
                // TODO Bloc catch auto-g�n�r�
                e.printStackTrace();
            } catch (IOException e) {
                // TODO Bloc catch auto-g�n�r�
                e.printStackTrace();
            } catch (XPathException e) {
                // TODO Bloc catch auto-g�n�r�
                e.printStackTrace();
            }
            return;
        }
    }
    if (currentBuildType == ResultFileBuildType.ProjectFile) {
        double result = 0.00;
        if (myMetric.getPopulationLevel() == 1) {
            result = projectResults.getValueFromMetricID(myMetric.getMetricShortName());
            // Set the value to the element
            Text textValue = theResultFile.createTextNode(Double.toString(result));
            myElement.appendChild(textValue);
        }
    }
}
