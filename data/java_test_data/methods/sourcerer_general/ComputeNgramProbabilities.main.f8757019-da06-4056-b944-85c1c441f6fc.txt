public static void main(String[] args) throws DatabaseException, IOException, InterruptedException, ClassNotFoundException {
    final MemoryMXBean memoryBean = ManagementFactory.getMemoryMXBean();
    MemoryUsage memuse;
    OptionParser optParser = new OptionParser(Options.class);
    final Options opts = (Options) optParser.parse(args, true);
    if (opts.upper && opts.lower) {
        System.err.println("Lowercase AND uppercase? doesn't sound right.");
        return;
    }
    if (opts.meminfo) {
        memuse = memoryBean.getHeapMemoryUsage();
        System.out.printf("MEMUSE: initial: %dM/%dM\n", memuse.getUsed() / 1048576, memuse.getMax() / 1048576);
    }
    LMDecodingOptions lmOpts = new LMDecodingOptions();
    lmOpts.config = opts.config;
    lmOpts.debug = opts.debug;
    if (opts.jobs > 0)
        lmOpts.jobs = opts.jobs;
    if (opts.host != null)
        lmOpts.host = opts.host;
    if (opts.port > 0)
        lmOpts.port = opts.port;
    if (opts.coarse > 0)
        lmOpts.coarseThreshold = opts.coarse;
    if (opts.forest != null)
        lmOpts.forest = opts.forest;
    if (opts.host != null && opts.port > 0)
        lmOpts.storage = LMDecodingOptions.Storage.REMOTE;
    if (opts.useJerboa)
        lmOpts.storage = LMDecodingOptions.Storage.JERBOA;
    if (opts.useBDB)
        lmOpts.storage = LMDecodingOptions.Storage.BDB;
    if (opts.useCompact)
        lmOpts.storage = LMDecodingOptions.Storage.COMPACT;
    if (opts.meminfo) {
        memuse = memoryBean.getHeapMemoryUsage();
        System.out.printf("MEMUSE: initial: %dM/%dM\n", memuse.getUsed() / 1048576, memuse.getMax() / 1048576);
    }
    LanguageModel.initDecoding(lmOpts);
    Experiment experiment = Experiment.getInstance();
    final InputParser parser = new PlainInputParser(experiment.getTupleDescription());
    /*	
		{
			long[] endTuples = new long[1];
			endTuples[0] = experiment.getTupleDescription().createEndTuple(); 
			parser.setEndTuples(endTuples);
		}
		*/
    final ForestModel forest = experiment.getForest(opts.forest);
    final NgramMarginalization marginalizer = new NgramMarginalization(forest, opts.ngramCacheSize, opts.trellisCacheSize, opts.memcached);
    marginalizer.setMaxForestStarts(opts.maxForestStarts);
    if (opts.meminfo) {
        memuse = memoryBean.getHeapMemoryUsage();
        System.out.printf("MEMUSE: after loading LMs: %dM/%dM\n", memuse.getUsed() / 1048576, memuse.getMax() / 1048576);
    }
    /*
		final MutableInteger extraWords = new MutableInteger(0);
		if (parser.getStartTuples() != null) {
			extraWords.set(extraWords.intValue() + parser.getStartTuples().length);
		}
		if (parser.getEndTuples() != null) {
			extraWords.set(extraWords.intValue() + parser.getEndTuples().length);
		}
*/
    final DataSequencer<String> sequencer = new DataSequencer<String>(1);
    final byte wordFactorIdx = experiment.getTupleDescription().getMainFactorIndex();
    class EvalRunnable implements Runnable {

        Pair<Integer, String> pair;

        public EvalRunnable(int sentNo, String line) {
            pair = new Pair<Integer, String>(sentNo, line);
        }

        public void run() {
            String input = pair.getSecond();
            if (opts.lower) {
                input = input.toLowerCase();
            } else if (opts.upper) {
                input = input.toUpperCase();
            }
            long[] ngram = parser.parseSentence(input);
            /*
		    	// remove <s>'s in the beginning, they will be added implicitly
		    	for(byte i=0; i<ngram.length; ++i) {
		    		if (!Dictionary.isStart(FactorTuple.getValue(ngram[i], wordFactorIdx))) {
		    			if (i > 0) {
		    				ngram = Arrays.copyOfRange(ngram, i, ngram.length);
		    			}
		    			break;
		    		}
		    	}
		    	*/
            // double logProb = marginalizer.computeNgramProbability(ngram);
            double logProb;
            if (opts.ngramCacheSize > 0)
                logProb = marginalizer.getNgramProbability(ngram);
            else
                logProb = marginalizer.newComputeNgramProbability(ngram);
            StringBuilder sb = new StringBuilder();
            sb.append(pair.getSecond());
            sb.append("\t");
            sb.append(Float.toString((float) logProb));
            pair.setSecond(sb.toString());
            // System.err.printf("done line %d, %s\n", pair.getFirst(), pair.getSecond());
            // System.err.flush();
            sequencer.putItem(pair);
            if (opts.meminfo) {
                MemoryUsage memuse = memoryBean.getHeapMemoryUsage();
                System.out.printf("MEMUSE: after evaluating sentence %s: %dM/%dM\n", pair.getFirst().toString(), memuse.getUsed() / 1048576, memuse.getMax() / 1048576);
            // System.out.println("STATS: " + eval.getStatistics());
            }
        }
    }
    Timer timer = null;
    if (opts.meminfo) {
        memuse = memoryBean.getHeapMemoryUsage();
        System.out.printf("MEMUSE: after experiment.closeXML(): %dM/%dM\n", memuse.getUsed() / 1048576, memuse.getMax() / 1048576);
        timer = new Timer(true);
        TimerTask task = new TimerTask() {

            public void run() {
                MemoryUsage memuse = memoryBean.getHeapMemoryUsage();
                DateFormat df = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.LONG);
                System.out.printf("MEMUSE: %s: %dM/%dM\n", df.format(new Date()), memuse.getUsed() / 1048576, memuse.getMax() / 1048576);
            }
        };
        timer.scheduleAtFixedRate(task, 0, 10000);
    }
    try {
        BufferedReader reader = IO.getReader(opts.input == null ? System.in : IO.getInputStream((opts.input)));
        BufferedWriter writer = IO.getWriter(opts.output == null ? System.out : IO.getOutputStream((opts.output)));
        JobManager manager = JobManager.getInstance();
        JobGroup group = manager.createJobGroup("decoding");
        Thread outputPrinter = new Thread(new OutputPrinter(sequencer, writer));
        outputPrinter.start();
        int lineNo = 0;
        try {
            final int interval = 100 * manager.getNumWorkers();
            int i = interval;
            for (String line = reader.readLine(); line != null; line = reader.readLine()) {
                Job job = new Job(new EvalRunnable(++lineNo, line), "decoding sentence #" + Integer.toString(lineNo));
                job.setPriority(lineNo);
                manager.addJob(group, job);
                if (--i == 0) {
                    group.join(2 * interval);
                    i = interval;
                }
            }
        } catch (IOException e) {
        }
        sequencer.setLastItem(lineNo);
        /*
		    try {
			    while(!sequencer.isDone()) {
			    	Pair<Integer, String> item = sequencer.getFirst();
			    	System.err.printf("printing line %d, %s\n", item.getFirst(), item.getSecond());
			    	System.err.flush();
			    	writer.append(item.getSecond());
			    	writer.newLine();
			    	writer.flush();
			    }
		    } catch(InterruptedException e) {
		    	e.printStackTrace();
		    }
		    */
        // System.err.println("all jobs submitted, waiting for the outputPrinter to finish...");
        // System.err.flush();
        outputPrinter.join();
        // System.err.println("outputPrinter done");
        // System.err.flush();
        // writer.append(opts.lm + " stats: \n" + eval.getStatistics() + "\n");
        writer.close();
        if (opts.debug > 0) {
            System.err.println(forest.getName() + " stats: \n" + forest.getDecoder().getStatistics() + "\n");
        }
        System.err.println(marginalizer.getStats());
    } catch (IOException e) {
        e.printStackTrace();
    }
}
