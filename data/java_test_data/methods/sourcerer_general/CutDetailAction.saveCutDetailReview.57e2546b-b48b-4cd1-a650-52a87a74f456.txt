public String saveCutDetailReview() {
    System.out.println("CutDetailAction -> saveCutDetailReview() ");
    CutDetail cutDetailAux = cutDetailManager.get(cutDetail.getId());
    List<PantDesign> pantDesignList = (List<PantDesign>) pantDesignManager.findByModel(cutDetailAux.getPantDesign().getModel().getId(), cutDetailAux.getPantDesign().getModelSize().getId(), cutDetailAux.getPantDesign().getMaterial().getId());
    StorageCut storageCut = null;
    Integer stock = 0;
    if (!pantDesignList.isEmpty()) {
        PantDesign pantDesignX = pantDesignList.get(0);
        List<StorageCut> storageCuts = (List<StorageCut>) storageCutManager.findByPantDesign(pantDesignX.getId());
        if (!storageCuts.isEmpty()) {
            storageCut = storageCuts.get(0);
            stock = (storageCut.getStock() == null ? 0 : storageCut.getStock());
            stock = stock + (cutDetail.getQuantityGet() - cutDetailAux.getQuantityGet()) - (cutDetail.getQuantityFail() - cutDetailAux.getQuantityFail());
        } else {
            storageCut = new StorageCut();
            storageCut.setPantDesign(pantDesignX);
            stock = (cutDetail.getQuantityGet() - cutDetailAux.getQuantityGet()) - (cutDetail.getQuantityFail() - cutDetailAux.getQuantityFail());
        }
    }
    Double diffTotalAmountClothes = (cutDetail.getQuantityGet() * cutDetail.getPriceXclothes()) - cutDetailAux.getTotalAmountClothes();
    Double diffTotalAmountClothesFail = (cutDetail.getQuantityFail() * cutDetail.getPriceXclotheFail()) - cutDetailAux.getTotalAmountFailClothes();
    cutDetailAux.setQuantityGet(cutDetail.getQuantityGet());
    cutDetailAux.setPriceXclothes(cutDetail.getPriceXclothes());
    cutDetailAux.setTotalAmountClothes(cutDetail.getQuantityGet() * cutDetail.getPriceXclothes());
    cutDetailAux.setQuantityFail(cutDetail.getQuantityFail());
    cutDetailAux.setPriceXclotheFail(cutDetail.getPriceXclotheFail());
    cutDetailAux.setTotalAmountFailClothes(cutDetail.getQuantityFail() * cutDetail.getPriceXclotheFail());
    cutDetailAux.setTotalAmount((cutDetail.getQuantityGet() * cutDetail.getPriceXclothes()) - (cutDetail.getQuantityFail() * cutDetail.getPriceXclotheFail()));
    cutDetailAux.setCurrentAmount((cutDetail.getQuantityGet() * cutDetail.getPriceXclothes()) - (cutDetail.getQuantityFail() * cutDetail.getPriceXclotheFail()));
    cutDetailAux.setQuantityRealClothes(cutDetail.getQuantityGet() - cutDetail.getQuantityFail());
    cutDetailAux.setQuantityRealClothesCurrent(cutDetail.getQuantityGet() - cutDetail.getQuantityFail());
    cutDetailAux.setModify(false);
    storageCut.setStock(stock);
    storageCutManager.save(storageCut);
    cutDetailManager.save(cutDetailAux);
    CutProcess cutProcess = cutDetailAux.getCutProcess();
    cutProcess.setTotalAmount(cutProcess.getTotalAmount() + diffTotalAmountClothes);
    cutProcess.setTotalAmountFail(cutProcess.getTotalAmountFail() + diffTotalAmountClothesFail);
    cutProcess.setTotalRealAmount(cutProcess.getTotalRealAmount() + diffTotalAmountClothes - diffTotalAmountClothesFail);
    cutProcess.setTotalCurrentAmount(cutProcess.getTotalCurrentAmount() + diffTotalAmountClothes - diffTotalAmountClothesFail);
    cutProcess.setDeleted(false);
    cutProcessManager.save(cutProcess);
    BalanceEmployee balanceEmployee = cutProcess.getBalanceEmployee();
    PeriodPaymentEmployee periodPaymentEmployee = balanceEmployee.getPeriodPaymentEmployee();
    Double diffBalanceWonNewTotalAmount = cutProcess.getTotalAmount() - balanceEmployee.getAmountWon();
    balanceEmployee.setAmountWon(cutProcess.getTotalAmount());
    balanceEmployee.setBalance(periodPaymentEmployee.getCurrentAmount() + diffBalanceWonNewTotalAmount);
    // for won
    balanceEmployee.setTypeBalance(1);
    balanceEmployee = balanceEmployeeManager.save(balanceEmployee);
    periodPaymentEmployee.setCurrentAmount(periodPaymentEmployee.getCurrentAmount() + diffBalanceWonNewTotalAmount);
    periodPaymentEmployee.setAmountWon(periodPaymentEmployee.getAmountWon() + diffTotalAmountClothes);
    periodPaymentEmployeeManager.save(periodPaymentEmployee);
    saveMessage(getText("cutDetailAction.upDateCutDetail"));
    System.out.println("CutDetailAction -> end saveCutDetailReview() ");
    return SUCCESS;
}
