// $ANTLR start "expression1"
public final Compila_doresParser.expression1_return expression1() throws RecognitionException {
    Compila_doresParser.expression1_return retval = new Compila_doresParser.expression1_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token AND136 = null;
    Compila_doresParser.expression2_return expression2135 = null;
    Compila_doresParser.expression2_return expression2137 = null;
    CommonTree AND136_tree = null;
    try {
        // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:220:2: ( expression2 ( AND expression2 )* )
        // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:220:4: expression2 ( AND expression2 )*
        {
            root_0 = (CommonTree) adaptor.nil();
            pushFollow(FOLLOW_expression2_in_expression11473);
            expression2135 = expression2();
            state._fsp--;
            adaptor.addChild(root_0, expression2135.getTree());
            // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:220:16: ( AND expression2 )*
            loop33: do {
                int alt33 = 2;
                int LA33_0 = input.LA(1);
                if ((LA33_0 == AND)) {
                    alt33 = 1;
                }
                switch(alt33) {
                    case 1:
                        // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:220:17: AND expression2
                        {
                            AND136 = (Token) match(input, AND, FOLLOW_AND_in_expression11476);
                            AND136_tree = (CommonTree) adaptor.create(AND136);
                            root_0 = (CommonTree) adaptor.becomeRoot(AND136_tree, root_0);
                            pushFollow(FOLLOW_expression2_in_expression11479);
                            expression2137 = expression2();
                            state._fsp--;
                            adaptor.addChild(root_0, expression2137.getTree());
                        }
                        break;
                    default:
                        break loop33;
                }
            } while (true);
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
