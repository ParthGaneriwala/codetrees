public String[] split(String s) {
    // Zeilenumbrüche in Kommentaren schützen
    s = replace("<!--((?:.|\n)*?)-->", "COMMENT⇨$1⇦TNEMMOC", s);
    s = replace("COMMENT⇨([^⇦]*?)" + "\n" + "([^⇦]*?)⇦TNEMMOC", "COMMENT⇨$1" + PNL + "$2⇦TNEMMOC", s);
    s = replace("COMMENT⇨(.*?)⇦TNEMMOC", "<!--$1-->", s);
    // Zeilenumbrüche in Tags schützen
    s = replace("<( *([^/>]+) *)>(.*?)</( *(\\2) *)>", "TAG$1TAG⇨$3⇦GAT$4GAT", s);
    s = replace("TAG([^>⇨⇦]+)TAG⇨([^⇦]*?)" + "\n" + "([^⇦]*?)⇦GAT\\1GAT", "TAG$1TAG⇨$2" + PNL + "$3⇦GAT$1GAT", s);
    s = replace("TAG( *([^⇨⇦/]+) *)TAG⇨(.*?)⇦GAT( *(\\2) *)GAT", "<$1>$3</$4>", s);
    // Zeilenumbrüche in Templates schützen
    s = replace("\\{\\{([^\\}]*?)\\}\\}", "TEMPLATE⇨$1⇦ETALPMET", s);
    s = replace("TEMPLATE⇨([^⇦]*)" + "\n" + "([^⇦]*)⇦ETALPMET", "TEMPLATE⇨$1" + PNL + "$2⇦ETALPMET", s);
    s = replace("TEMPLATE⇨(.*?)⇦ETALPMET", "{{$1}}", s);
    // Zeilenumbrüche nach Überschriften schützen
    s = replace("=((?:" + PNL + ")*)\n", "=$1" + PNL, s);
    // Zeilenumbrüche zwischen Aufzählungspunkten schützen
    s = replace("(\\*[^\\*]*)\n( *\\*)", "$1" + PNL + "$2", s);
    if (splitEnumerationAfter > 0) {
        // nach jedem n-ten Aufzählungspunkt Schutz entfernen
        String from = "";
        String to = "";
        for (int i = 1; i < splitEnumerationAfter; ++i) {
            from += "(\\*[^\\*\n]*)" + PNL + "( *)";
            to += "$" + (i * 2 - 1) + PNL + "$" + (i * 2);
        }
        from += "(\\*[^\\*\n]*)" + PNL + "( *\\*)";
        to += "$" + (splitEnumerationAfter * 2 - 1) + "\n" + "$" + (splitEnumerationAfter * 2);
        s = replace(from, to, s);
    }
    // alle ungeschützten Zeilenumbrüche durch Trennmarkierungen ersetzen
    boolean replacementComplete = false;
    while (!replacementComplete) {
        String textBeforeReplacement = new String(s);
        Pattern p = Pattern.compile("(?:\n|\r\n|\r|\u0085|\u2028|\u2029)", Pattern.MULTILINE);
        Matcher m = p.matcher(s);
        s = m.replaceAll(NL);
        if (s.compareTo(textBeforeReplacement) == 0) {
            replacementComplete = true;
        }
    }
    // Zeilenumbruch-Schutzersetzungen aufheben
    Pattern p = Pattern.compile(PNL);
    Matcher m = p.matcher(s);
    s = m.replaceAll("\n");
    // split the text
    Pattern p3 = Pattern.compile(NL);
    return p3.split(s);
}
