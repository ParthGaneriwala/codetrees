// $ANTLR start "case_alternative"
public final MyGrammarParser.case_alternative_return case_alternative() throws RecognitionException {
    MyGrammarParser.case_alternative_return retval = new MyGrammarParser.case_alternative_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token DP80 = null;
    MyGrammarParser.case_label_list_return case_label_list79 = null;
    MyGrammarParser.statement_sequence_return statement_sequence81 = null;
    CommonTree DP80_tree = null;
    RewriteRuleTokenStream stream_DP = new RewriteRuleTokenStream(adaptor, "token DP");
    RewriteRuleSubtreeStream stream_statement_sequence = new RewriteRuleSubtreeStream(adaptor, "rule statement_sequence");
    RewriteRuleSubtreeStream stream_case_label_list = new RewriteRuleSubtreeStream(adaptor, "rule case_label_list");
    try {
        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:205:2: ( ( case_label_list DP statement_sequence )? -> ^( CASE_ALTERNATIVE ( case_label_list statement_sequence )? ) )
        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:205:6: ( case_label_list DP statement_sequence )?
        {
            // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:205:6: ( case_label_list DP statement_sequence )?
            int alt15 = 2;
            int LA15_0 = input.LA(1);
            if (((LA15_0 >= TRUE && LA15_0 <= FALSE) || (LA15_0 >= IDENTIFIER && LA15_0 <= STRING))) {
                alt15 = 1;
            }
            switch(alt15) {
                case 1:
                    // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:205:7: case_label_list DP statement_sequence
                    {
                        pushFollow(FOLLOW_case_label_list_in_case_alternative1538);
                        case_label_list79 = case_label_list();
                        state._fsp--;
                        stream_case_label_list.add(case_label_list79.getTree());
                        DP80 = (Token) match(input, DP, FOLLOW_DP_in_case_alternative1540);
                        stream_DP.add(DP80);
                        pushFollow(FOLLOW_statement_sequence_in_case_alternative1542);
                        statement_sequence81 = statement_sequence();
                        state._fsp--;
                        stream_statement_sequence.add(statement_sequence81.getTree());
                    }
                    break;
            }
            // AST REWRITE
            // elements: statement_sequence, case_label_list
            // token labels:
            // rule labels: retval
            // token list labels:
            // rule list labels:
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", retval != null ? retval.tree : null);
            root_0 = (CommonTree) adaptor.nil();
            // 205:47: -> ^( CASE_ALTERNATIVE ( case_label_list statement_sequence )? )
            {
                // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:205:50: ^( CASE_ALTERNATIVE ( case_label_list statement_sequence )? )
                {
                    CommonTree root_1 = (CommonTree) adaptor.nil();
                    root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(CASE_ALTERNATIVE, "CASE_ALTERNATIVE"), root_1);
                    // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:205:69: ( case_label_list statement_sequence )?
                    if (stream_statement_sequence.hasNext() || stream_case_label_list.hasNext()) {
                        adaptor.addChild(root_1, stream_case_label_list.nextTree());
                        adaptor.addChild(root_1, stream_statement_sequence.nextTree());
                    }
                    stream_statement_sequence.reset();
                    stream_case_label_list.reset();
                    adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
