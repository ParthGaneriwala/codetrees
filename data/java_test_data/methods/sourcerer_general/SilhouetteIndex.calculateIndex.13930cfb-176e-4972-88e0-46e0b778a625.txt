public float calculateIndex(Dataset clusteredData) {
    Map<Integer, Cluster> clustermap = clusteredData.getClustermap();
    EuclideanDistance ed = new EuclideanDistance();
    float avgSilhouetteOverAllPoints = 0;
    if (clustermap.size() == 1) {
        // Index is not defined for k=1. needs at least 2 clusters
        return Float.NaN;
    }
    for (FeatureVector currentElement : clusteredData) {
        // for the current element get its cluster
        Cluster contCluster = clustermap.get(currentElement.getCalculatedClusternumber());
        // calculate average dist to other elements in the cluster
        float avgInClusterDist = 0f, dist = 0f;
        int counter = 0;
        for (FeatureVector clusterElement : contCluster.getClusterelements()) {
            // dist to every element except self
            if (clusterElement != currentElement) {
                dist = ed.calculate(currentElement.getFeatures(), clusterElement.getFeatures());
                avgInClusterDist += dist;
                counter++;
            }
        }
        assert (counter == contCluster.size() - 1) : "Element " + currentElement.getFeatures() + " could not be found in the cluster with its asigned clusternumber " + currentElement.getCalculatedClusternumber();
        if (counter > 0) {
            // this is value ai
            avgInClusterDist = avgInClusterDist / counter;
        }
        // for all clusters that the current element is not containded in
        float avgOutClusterDist = 0f;
        List<Float> avgOutClustDists = new ArrayList<Float>();
        for (Integer currClusternumber : clustermap.keySet()) {
            if (currClusternumber != currentElement.getCalculatedClusternumber()) {
                Cluster otherCluster = clustermap.get(currClusternumber);
                // calculate average dist to elements
                for (FeatureVector clusterElement : otherCluster.getClusterelements()) {
                    dist = ed.calculate(clusterElement.getFeatures(), currentElement.getFeatures());
                    avgOutClusterDist += dist;
                }
                avgOutClustDists.add(avgOutClusterDist / otherCluster.size());
            }
        }
        assert (avgOutClustDists.size() == clustermap.size() - 1);
        // else return not a number
        if (avgOutClustDists.isEmpty()) {
            return Float.NaN;
        }
        float bi = Collections.min(avgOutClustDists);
        // si for current element:
        float si;
        // si = 0
        if (contCluster.size() == 1) {
            si = 0.0f;
        } else {
            si = (bi - avgInClusterDist) / Math.max(bi, avgInClusterDist);
        }
        avgSilhouetteOverAllPoints += si;
    }
    // average si over all points
    return avgSilhouetteOverAllPoints / clusteredData.size();
}
