void balance(PersistentStore store, NodeAVL x, boolean isleft) {
    while (true) {
        int sign = isleft ? 1 : -1;
        switch(x.iBalance * sign) {
            case 1:
                x.iBalance = 0;
                return;
            case 0:
                x.iBalance = -sign;
                break;
            case -1:
                NodeAVL l = isleft ? x.nLeft : x.nRight;
                if (l.iBalance == -sign) {
                    x.replace(store, this, l);
                    x.set(store, isleft, l.child(store, !isleft));
                    l.set(store, !isleft, x);
                    x.iBalance = 0;
                    l.iBalance = 0;
                } else {
                    NodeAVL r = !isleft ? l.nLeft : l.nRight;
                    x.replace(store, this, r);
                    l.set(store, !isleft, r.child(store, isleft));
                    r.set(store, isleft, l);
                    x.set(store, isleft, r.child(store, !isleft));
                    r.set(store, !isleft, x);
                    int rb = r.iBalance;
                    x.iBalance = (rb == -sign) ? sign : 0;
                    l.iBalance = (rb == sign) ? -sign : 0;
                    r.iBalance = 0;
                }
                return;
        }
        if (x.nParent == null) {
            return;
        }
        isleft = x.nParent == null || x == x.nParent.nLeft;
        x = x.nParent;
    }
}
