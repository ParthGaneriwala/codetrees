private void getResultsImpl(String catalog, String table, String keysComment, List tuples, String fkTableName, boolean isExport) throws SQLException {
    LocalAndReferencedColumns parsedInfo = parseTableStatusIntoLocalAndReferencedColumns(keysComment);
    if (isExport && !parsedInfo.referencedTable.equals(table)) {
        return;
    }
    if (parsedInfo.localColumnsList.size() != parsedInfo.referencedColumnsList.size()) {
        throw SQLError.createSQLException("Error parsing foreign keys definition," + "number of local and referenced columns is not the same.", SQLError.SQL_STATE_GENERAL_ERROR, getExceptionInterceptor());
    }
    Iterator localColumnNames = parsedInfo.localColumnsList.iterator();
    Iterator referColumnNames = parsedInfo.referencedColumnsList.iterator();
    int keySeqIndex = 1;
    while (localColumnNames.hasNext()) {
        byte[][] tuple = new byte[14][];
        String lColumnName = removeQuotedId(localColumnNames.next().toString());
        String rColumnName = removeQuotedId(referColumnNames.next().toString());
        tuple[FKTABLE_CAT] = ((catalog == null) ? new byte[0] : s2b(catalog));
        tuple[FKTABLE_SCHEM] = null;
        tuple[FKTABLE_NAME] = s2b((isExport) ? fkTableName : table);
        tuple[FKCOLUMN_NAME] = s2b(lColumnName);
        tuple[PKTABLE_CAT] = s2b(parsedInfo.referencedCatalog);
        tuple[PKTABLE_SCHEM] = null;
        tuple[PKTABLE_NAME] = s2b((isExport) ? table : parsedInfo.referencedTable);
        tuple[PKCOLUMN_NAME] = s2b(rColumnName);
        tuple[KEY_SEQ] = s2b(Integer.toString(keySeqIndex++));
        int[] actions = getForeignKeyActions(keysComment);
        tuple[UPDATE_RULE] = s2b(Integer.toString(actions[1]));
        tuple[DELETE_RULE] = s2b(Integer.toString(actions[0]));
        tuple[FK_NAME] = s2b(parsedInfo.constraintName);
        // not available from show table status
        tuple[PK_NAME] = null;
        tuple[DEFERRABILITY] = s2b(Integer.toString(java.sql.DatabaseMetaData.importedKeyNotDeferrable));
        tuples.add(new ByteArrayRow(tuple, getExceptionInterceptor()));
    }
}
