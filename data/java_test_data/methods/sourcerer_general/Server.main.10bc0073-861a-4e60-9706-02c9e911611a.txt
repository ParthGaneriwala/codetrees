public static void main(String[] args) {
    String protocolDir = "protocol/";
    if (args.length > 0) {
        protocolDir = args[0];
    }
    // load the server config file
    Properties serverProp = new Properties();
    InputStream input = null;
    File propFile = new File(propFileName);
    try {
        input = new FileInputStream(propFile);
        // load from file
        serverProp.loadFromXML(input);
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Cannot read properties file: " + propFileName, "Error", JOptionPane.ERROR_MESSAGE);
        System.exit(0);
    } finally {
        if (input != null) {
            try {
                input.close();
            } catch (Exception e) {
            /* who cares */
            }
        }
    }
    // Construct manager classes
    try {
        // Test for existence of database and driver
        Database.testDriver();
        // Establishes the sql database cache
        GISCache gisCache = new SQLGISCache(1L << 30);
        // Creates a communnication protocol
        ProtocolManager pm = new ProtocolManager(protocolDir);
        // Initialize the LessonPlan Manager
        LessonPlanManager lm = null;
        if (serverProp.getProperty(LP_DIR) != null) {
            lm = new LessonPlanManager(serverProp.getProperty(LP_DIR));
        } else {
            lm = new LessonPlanManager(defaultLPDirectory);
        }
        // Initialize Comm Server for Client RMI and Socket communication.
        CommServer clientCommServer = null;
        // For TESTING PURPOSES ONLY
        TestChecker test = TestChecker.getInstance();
        test.initialize(serverProp);
        if (test.isTest())
            clientCommServer = new CommServer(Integer.valueOf(test.getNumClients()).intValue());
        else
            clientCommServer = new CommServer();
        if (serverProp.getProperty(RMI_PORT) != null && serverProp.getProperty(SOCKET_PORT) != null) {
            clientCommServer.run(Integer.parseInt(serverProp.getProperty(RMI_PORT)), Integer.parseInt(serverProp.getProperty(SOCKET_PORT)), pm, gisCache, lm);
        } else {
            clientCommServer.run(defaultProxyPort, defaultSocketPort, pm, gisCache, lm);
        }
        ExerciseQuestionsParser exParser = new ExerciseQuestionsParser();
        SAXParserFactory.newInstance().newSAXParser().parse(new ByteArrayInputStream(lm.getLessonPlan().getBytes()), exParser);
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Unable to create manager" + "classes", "Error", JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
        mLogger.fatal(e);
    }
}
