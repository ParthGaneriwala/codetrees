public void fixFinger() {
    boolean suc = true, pre = true;
    // Obtain the successor
    String[] succ = findSuccessor();
    try {
        // OPEN CONNECTIONS TO SUCCESSOR
        socket = new Socket(succ[0], Integer.parseInt(succ[1]));
        in = new ObjectInputStream(socket.getInputStream());
        out = new ObjectOutputStream(socket.getOutputStream());
        // SEE IF WE CAN COMMUNICATE BETWEEN EACH OTHER
        chitChat(in, out);
        /**
         * ************************************************
         */
        // CLOSE CONNECTIONS TO SUCCESSOR
        out.close();
        in.close();
        socket.close();
    } catch (NumberFormatException e) {
        e.printStackTrace();
    } catch (UnknownHostException e) {
        e.printStackTrace();
        suc = false;
        System.out.println("\"" + succ[0] + ":" + succ[1] + "\" was not found. ");
    } catch (IOException e) {
        e.printStackTrace();
    }
    // Obtain the predecessor
    String[] pred = findPredecessor();
    try {
        // OPEN CONNECTIONS TO PREDECESSOR
        socket = new Socket(pred[0], Integer.parseInt(pred[1]));
        in = new ObjectInputStream(socket.getInputStream());
        out = new ObjectOutputStream(socket.getOutputStream());
        // SEE IF WE CAN COMMUNICATE BETWEEN EACH OTHER
        chitChat(in, out);
        /**
         * ************************************************
         */
        // CLOSE CONNECTIONS TO PREDECESSOR
        out.close();
        in.close();
        socket.close();
    } catch (NumberFormatException e) {
        e.printStackTrace();
    } catch (UnknownHostException e) {
        e.printStackTrace();
        pre = false;
        System.out.println("\"" + pred[0] + ":" + pred[1] + "\" was not found. ");
    } catch (IOException e) {
        e.printStackTrace();
    }
    // Checks to see if there was communication
    if (!suc) {
        ft.remove(succ[0] + ":" + succ[1]);
    }
    if (!pre) {
        ft.remove(pred[0] + ":" + pred[1]);
    }
}
