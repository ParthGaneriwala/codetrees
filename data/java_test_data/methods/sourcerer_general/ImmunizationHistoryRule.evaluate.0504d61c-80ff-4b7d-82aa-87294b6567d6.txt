@Override
protected Result evaluate(final LogicContext context, final Integer patientId, final Map<String, Object> parameters) throws LogicException {
    Result result = new Result();
    Map<Concept, Double> immunizationAdministered = new HashMap<Concept, Double>();
    ObsWithRestrictionRule obsWithRestrictionRule = new ObsWithStringRestrictionRule();
    // evaluate both concept to get the entire history of patient immunization
    parameters.put(EvaluableConstants.OBS_CONCEPT, Arrays.asList(EvaluableNameConstants.IMMUNIZATIONS_HISTORY, EvaluableNameConstants.IMMUNIZATIONS_ORDERED_DETAILED));
    parameters.put(EvaluableConstants.OBS_FETCH_ORDER, FetchOrdering.ORDER_ASCENDING.getValue());
    Result immunizationResults = obsWithRestrictionRule.eval(context, patientId, parameters);
    // when the immunization is complete, the provider will answer with this concept
    Concept completeAdministeredConcept = Context.getConceptService().getConcept(EvaluableNameConstants.IMMUNIZATIONS_COMPLETED);
    // immunization history concept structure
    Concept previousAdministeredConcept = CacheUtils.getConcept(EvaluableNameConstants.PREVIOUS_IMMUNIZATIONS_ADMINISTERED);
    Concept dosesAdministeredConcept = CacheUtils.getConcept(EvaluableNameConstants.NUMBER_OF_DOSES_RECEIVED_BEFORE_ENROLLMENT);
    // immunization ordered concept structure
    Concept immunizationOrderedConcept = CacheUtils.getConcept(EvaluableNameConstants.IMMUNIZATIONS_ORDERED);
    Concept dosesOrderedConcept = CacheUtils.getConcept(EvaluableNameConstants.NUMBER_OF_DOSES_ORDERED);
    Concept noneConcept = CacheUtils.getConcept(EvaluableNameConstants.NONE);
    for (Result immunizationResult : immunizationResults) {
        Obs immunizationObs = (Obs) immunizationResult.getResultObject();
        if (immunizationObs.isObsGrouping()) {
            Set<Obs> immunizationObsMembers = immunizationObs.getGroupMembers();
            Double dosesAdministered = null;
            Concept administeredImmunization = null;
            for (Obs immunizationObsMember : immunizationObsMembers) {
                Concept immunizationObsMemberConcept = immunizationObsMember.getConcept();
                if (OpenmrsUtil.nullSafeEquals(immunizationObsMemberConcept, previousAdministeredConcept)) {
                    administeredImmunization = immunizationObsMember.getValueCoded();
                    if (OpenmrsUtil.nullSafeEquals(immunizationObsMember.getValueCoded(), completeAdministeredConcept))
                        return new Result(completeAdministeredConcept);
                }
                if (OpenmrsUtil.nullSafeEquals(immunizationObsMemberConcept, dosesAdministeredConcept))
                    dosesAdministered = immunizationObsMember.getValueNumeric();
                if (OpenmrsUtil.nullSafeEquals(immunizationObsMemberConcept, immunizationOrderedConcept) && !OpenmrsUtil.nullSafeEquals(immunizationObsMember.getValueCoded(), noneConcept))
                    administeredImmunization = immunizationObsMember.getValueCoded();
                if (OpenmrsUtil.nullSafeEquals(immunizationObsMemberConcept, dosesOrderedConcept))
                    dosesAdministered = immunizationObsMember.getValueNumeric();
            }
            if (administeredImmunization != null)
                immunizationAdministered.put(administeredImmunization, dosesAdministered);
        }
    }
    for (Concept administered : immunizationAdministered.keySet()) {
        Result administeredResult = new Result(administered);
        Double doses = immunizationAdministered.get(administered);
        if (doses == null)
            administeredResult.setValueText("No Dosing");
        administeredResult.setValueNumeric(doses);
        result.add(administeredResult);
    }
    return result;
}
