public String save() throws Exception {
    System.out.println("saving employee...");
    boolean existErrors = false;
    if (employee.getFirstName() == null || employee.getFirstName().matches("")) {
        errorMessage("Nombre es un campo requerido.");
        existErrors = true;
    }
    if (employee.getLastName() == null || employee.getLastName().matches("")) {
        errorMessage("Apellido Paterno es un campo requerido.");
        existErrors = true;
    }
    if (employee.getEmail() == null || employee.getEmail().matches("")) {
        errorMessage("E-Mail es un campo requerido.");
        existErrors = true;
    }
    if (employee.getAddress().getCity() == null || employee.getAddress().getCity().matches("")) {
        errorMessage("Ciudad es un campo requerido.");
        existErrors = true;
    }
    if (employee.getAddress().getProvince() == null || employee.getAddress().getProvince().matches("")) {
        errorMessage("Provincia es un campo requerido.");
        existErrors = true;
    }
    if (employee.getAddress().getCountry() == null || employee.getAddress().getCountry().matches("")) {
        errorMessage("Pais es un campo requerido.");
        existErrors = true;
    }
    if (selectRoles == null) {
        errorMessage(getText("employee.errorRole"));
        roleListLeft = new ArrayList<LabelValue>();
        LabelValue lV1 = new LabelValue(getText("employee.cutter"), "ROLE_EMPLOYEE_CUTTER");
        LabelValue lV2 = new LabelValue(getText("employee.dressmaker"), "ROLE_EMPLOYEE_DRESSMAKER");
        LabelValue lV3 = new LabelValue(getText("employee.fixed"), "ROLE_EMPLOYEE_FIXED");
        roleListLeft.add(lV1);
        roleListLeft.add(lV2);
        roleListLeft.add(lV3);
        roleListRight = new ArrayList<LabelValue>();
        existErrors = true;
    } else {
        roleListLeft = new ArrayList<LabelValue>();
        LabelValue lV1 = new LabelValue(getText("employee.cutter"), "ROLE_EMPLOYEE_CUTTER");
        LabelValue lV2 = new LabelValue(getText("employee.dressmaker"), "ROLE_EMPLOYEE_DRESSMAKER");
        LabelValue lV3 = new LabelValue(getText("employee.fixed"), "ROLE_EMPLOYEE_FIXED");
        roleListLeft.add(lV1);
        roleListLeft.add(lV2);
        roleListLeft.add(lV3);
        roleListRight = new ArrayList<LabelValue>();
        for (String s : selectRoles) {
            if (s.equals("ROLE_EMPLOYEE_CUTTER")) {
                roleListRight.add(lV1);
                roleListLeft.remove(lV1);
            }
            if (s.equals("ROLE_EMPLOYEE_DRESSMAKER")) {
                roleListRight.add(lV2);
                roleListLeft.remove(lV2);
            }
            if (s.equals("ROLE_EMPLOYEE_FIXED")) {
                roleListRight.add(lV3);
                roleListLeft.remove(lV3);
                if (employee.getSalarieFixed() == null || employee.getSalarieFixed() < 600) {
                    errorMessage("El Salario Fijo es un campo requerido y debe ser mayor o igual al salario minimo de 600 Bs.");
                    existErrors = true;
                }
            }
        }
    }
    if (employee.getTask() == null || employee.getTask().matches("")) {
        errorMessage("Tarea/Cargo es un campo requerido.");
        existErrors = true;
    }
    if (employee.getEntryDate() == null) {
        errorMessage("Fecha de entrada es un campo requerido.");
        existErrors = true;
    }
    if (existErrors) {
        return INPUT;
    }
    boolean isNew = (employee.getId() == null);
    if (isNew) {
        employee.setUsername(employee.getFirstName() + "." + employee.getLastName());
        employee.setPassword("");
        employee.setAccountExpired(false);
        employee.setAccountLocked(false);
        employee.setCredentialsExpired(false);
        employee.setFinishSalaries(false);
    }
    for (String s : selectRoles) {
        employee.addRole(roleManager.getRole(s));
    }
    employee = employeeManager.save(employee);
    if (isNew) {
        Set<Role> roles = employee.getRoles();
        for (Role role : roles) {
            if (!role.getName().equals("ROLE_EMPLOYEE_FIXED")) {
                PeriodPaymentEmployee perPayEmp = new PeriodPaymentEmployee();
                perPayEmp.setInitAmount(0.0D);
                perPayEmp.setCurrentAmount(0.0D);
                perPayEmp.setEndAmount(0.0D);
                perPayEmp.setInitDate(employee.getEntryDate());
                perPayEmp.setClosed(false);
                perPayEmp.setRole(role);
                perPayEmp.setAmountPayment(0.0D);
                perPayEmp.setAmountWon(0.0D);
                perPayEmp.setDiscount(0.0D);
                perPayEmp.setEmployee(employee);
                perPayEmp = periodPaymentEmployeeManager.save(perPayEmp);
            }
        }
    } else {
        Set<Role> roles = employee.getRoles();
        for (Role role : roles) {
            if (!role.getName().equals("ROLE_EMPLOYEE_FIXED") && periodPaymentEmployeeManager.getCurrentPeriodByIdEmployeeAndRole(employee.getId(), role.getIdRole()).getId() == null) {
                PeriodPaymentEmployee perPayEmp = new PeriodPaymentEmployee();
                perPayEmp.setInitAmount(0.0D);
                perPayEmp.setCurrentAmount(0.0D);
                perPayEmp.setEndAmount(0.0D);
                perPayEmp.setInitDate(employee.getEntryDate());
                perPayEmp.setClosed(false);
                perPayEmp.setRole(role);
                perPayEmp.setAmountPayment(0.0D);
                perPayEmp.setAmountWon(0.0D);
                perPayEmp.setDiscount(0.0D);
                perPayEmp.setEmployee(employee);
                perPayEmp = periodPaymentEmployeeManager.save(perPayEmp);
            }
        }
    }
    String key = (isNew) ? "employee.added" : "employee.updated";
    saveMessage(getText(key));
    return SUCCESS;
}
