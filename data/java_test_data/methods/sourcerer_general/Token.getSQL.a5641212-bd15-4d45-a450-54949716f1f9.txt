String getSQL() {
    if (expression instanceof ExpressionColumn) {
        if (tokenType == Tokens.ASTERISK) {
            StringBuffer sb = new StringBuffer();
            Expression expression = (Expression) this.expression;
            if (expression != null && expression.opType == OpTypes.MULTICOLUMN && expression.nodes.length > 0) {
                sb.append(' ');
                for (int i = 0; i < expression.nodes.length; i++) {
                    Expression e = expression.nodes[i];
                    ColumnSchema c = e.getColumn();
                    String name;
                    if (e.opType == OpTypes.COALESCE) {
                        if (i > 0) {
                            sb.append(',');
                        }
                        sb.append(e.getColumnName());
                        continue;
                    }
                    if (e.getRangeVariable().tableAlias == null) {
                        name = c.getName().getSchemaQualifiedStatementName();
                    } else {
                        RangeVariable range = e.getRangeVariable();
                        name = range.tableAlias.getStatementName() + '.' + c.getName().statementName;
                    }
                    if (i > 0) {
                        sb.append(',');
                    }
                    sb.append(name);
                }
                sb.append(' ');
            } else {
                return tokenString;
            }
            return sb.toString();
        }
    } else if (expression instanceof Type) {
        isDelimiter = false;
        Type type = (Type) expression;
        if (type.isDistinctType() || type.isDomainType()) {
            return type.getName().getSchemaQualifiedStatementName();
        }
        return type.getNameString();
    } else if (expression instanceof SchemaObject) {
        isDelimiter = false;
        return ((SchemaObject) expression).getName().getSchemaQualifiedStatementName();
    }
    if (namePrefix == null && isUndelimitedIdentifier) {
        return tokenString;
    }
    if (tokenType == Tokens.X_VALUE) {
        return dataType.convertToSQLString(tokenValue);
    }
    StringBuffer sb = new StringBuffer();
    if (namePrePrefix != null) {
        if (isDelimitedPrePrefix) {
            sb.append('"');
            sb.append(namePrePrefix);
            sb.append('"');
        } else {
            sb.append(namePrePrefix);
            isDelimiter = false;
        }
        sb.append('.');
    }
    if (namePrefix != null) {
        if (isDelimitedPrefix) {
            sb.append('"');
            sb.append(namePrefix);
            sb.append('"');
        } else {
            sb.append(namePrefix);
            isDelimiter = false;
        }
        sb.append('.');
    }
    if (isDelimitedIdentifier) {
        sb.append('"');
        sb.append(tokenString);
        sb.append('"');
        sb.append(' ');
    } else {
        sb.append(tokenString);
    }
    return sb.toString();
}
