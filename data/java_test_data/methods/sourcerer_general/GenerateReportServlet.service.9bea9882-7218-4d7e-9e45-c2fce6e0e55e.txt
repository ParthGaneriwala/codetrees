@Override
protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
    ServiceLocator locator = new ServiceLocator(getBundleContext());
    String reportName = request.getParameter("reportName");
    int exportFormat = Integer.parseInt(request.getParameter("reportExportFormat"));
    Map<String, Object> parametros = new HashMap<String, Object>();
    try {
        switch(exportFormat) {
            case 1:
                locator.getReportGeneratorService(-1).generateReportToRTF(response, reportName, parametros);
                break;
            case 2:
                locator.getReportGeneratorService(-1).generateReportToPDF(response, reportName, parametros);
                break;
            case 3:
                locator.getReportGeneratorService(-1).generateReportToCSV(response, reportName, parametros);
                break;
            case 4:
                locator.getReportGeneratorService(-1).generateReportToXML(response, reportName, parametros);
                break;
            case 5:
                locator.getReportGeneratorService(-1).generateReportToHTML(response, reportName, parametros);
                break;
            case 6:
                locator.getReportGeneratorService(-1).generateReportToXLS(response, reportName, parametros);
                break;
            case 7:
                locator.getReportGeneratorService(-1).generateReportToJXL(response, reportName, parametros);
                break;
            case 8:
                locator.getReportGeneratorService(-1).generateReportToODT(response, reportName, parametros);
                break;
            case 9:
                locator.getReportGeneratorService(-1).generateReportToODS(response, reportName, parametros);
                break;
            case 10:
                locator.getReportGeneratorService(-1).generateReportToDOCX(response, reportName, parametros);
                break;
            case 11:
                locator.getReportGeneratorService(-1).generateReportToXLSX(response, reportName, parametros);
                break;
            case 12:
                locator.getReportGeneratorService(-1).generateReportToPPTX(response, reportName, parametros);
                break;
            case 13:
                locator.getReportGeneratorService(-1).generateReportToXHTML(response, reportName, parametros);
                break;
            default:
                break;
        }
    } catch (ServiceLocator.ServiceUnavailableException e) {
        response.setContentType("text/html");
        PrintWriter out = response.getWriter();
        logger.log(Level.SEVERE, "El servicio no se encuentra disponible... -> {0} <-", reportName);
        out.println("El servicio no se encuentra disponible...");
    }
}
