protected void performAction(Node[] activatedNodes) {
    processed = new ArrayList();
    Node[] selectedNodes = uniqueNodes(activatedNodes);
    // no node selected
    if ((null == selectedNodes) || (0 == selectedNodes.length)) {
        return;
    }
    // "Checkstyle" output tab name defined
    String tabName = NbBundle.getMessage(Checkstyle.class, "CTL_Checkstyle");
    // "Checkstyle" tab is created in output window for writing the list
    // of errors found
    InputOutput io = IOProvider.getDefault().getIO(tabName, false);
    // Select Checkstyle tab ensuring it is visible
    io.select();
    writer = io.getOut();
    ClassLoader originalClassLoader = Thread.currentThread().getContextClassLoader();
    try {
        // Clean the output window
        writer.reset();
        // Retrieve current checkstyle settings
        CheckstyleSettings settings = new CheckstyleSettings();
        String configName = (String) settings.get(CheckstyleSettings.CHECKSTYLE_CONFIG);
        String propName = (String) settings.get(CheckstyleSettings.CHECKSTYLE_PROPERTIES);
        Thread.currentThread().setContextClassLoader(Checkstyle.class.getClassLoader());
        // Create a new Checker
        checker = new Checker();
        // Load extra properties for configuring checkstyle if the value is set
        Properties prop = new Properties();
        if ((null != propName) && (0 != propName.length())) {
            prop.load(new FileInputStream(propName));
        }
        // If the value for checkstyle configuration file does not exist,
        // default to Sun conventions configuration.
        InputStream is = null;
        if ((null == configName) || (0 == configName.length())) {
            is = Checkstyle.class.getClassLoader().getResourceAsStream(SUN_CONVENTIONS);
            if (null != is) {
                writer.println("No checkstyle configuration, using Sun Conventions.");
                writer.println("With properties: [" + propName + "]");
                checker.configure(ConfigurationLoader.loadConfiguration(is, new PropertiesExpander(prop), true));
                is.close();
            } else {
                // This case should really not happen as Sun Coding Conventions
                // should be part of this module
                writer.println("No checkstyle configuration and failed to load Sun Conventions.");
                return;
            }
        } else {
            // Use the defined configuration and properties file.
            writer.println("Using configuration: [" + configName + "]");
            writer.println("With properties: [" + propName + "]");
            checker.configure(ConfigurationLoader.loadConfiguration(configName, new PropertiesExpander(prop)));
        }
        nbListener = new NbListener(writer, selectedNodes);
        checker.addListener(nbListener);
        // Go through all selected file nodes and process checkstyle
        for (int i = 0; i < selectedNodes.length; i++) {
            processNodeCheck(selectedNodes[i], i);
        }
    } catch (CheckstyleException e) {
        writer.println("Checkstyle Error: " + e.getMessage());
    } catch (IOException e) {
        writer.println("Checkstyle Output Error: " + e.getMessage());
    } finally {
        writer.flush();
        writer.close();
        Thread.currentThread().setContextClassLoader(originalClassLoader);
    }
}
