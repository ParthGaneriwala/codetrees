@SuppressWarnings("unchecked")
@Override
public int updateEstimate(Code code) throws Exception {
    int op = NO_ACTION;
    boolean proceed = true;
    if (code.getAmount() != 0) {
        Expression e = ExpressionFactory.matchExp(Jcdetail.JOBNUM_PROPERTY, code.getJobNum());
        e = e.andExp(ExpressionFactory.matchExp(Jcdetail.PHASENUM_PROPERTY, code.getDivision()));
        e = e.andExp(ExpressionFactory.matchExp(Jcdetail.CATNUM_PROPERTY, code.getCostCode()));
        e = e.andExp(ExpressionFactory.matchExp(Jcdetail.TYPE_PROPERTY, 17));
        e = e.andExp(ExpressionFactory.matchExp(Jcdetail.GLPERIOD_PROPERTY, gl));
        SelectQuery s = new SelectQuery(Jcdetail.class, e);
        Jcdetail jc = null;
        List jcs = context.performQuery(s);
        if (!jcs.isEmpty())
            jc = (Jcdetail) jcs.get(0);
        DecimalFormat df = new DecimalFormat("0.00");
        Date date = new Date(System.currentTimeMillis());
        if (jc != null)
            op = UPDATED;
        else {
            Jccat cat = (Jccat) DataObjectUtils.objectForQuery(context, new ObjectIdQuery(getCodePK("Jccat", code)));
            if (cat == null)
                proceed = updateCode(code) == CREATED;
            jc = (Jcdetail) context.newObject(Jcdetail.class);
            jc.setCatnum(code.getCostCode());
            jc.setGlperiod(gl);
            jc.setJobnum(code.getJobNum());
            jc.setPhasenum(code.getDivision());
            jc.setType(JC_DETAIL_ESTIMATE);
            jc.setCost(0d);
            jc.setJcunique(0);
            jc.setHours(0d);
        }
        jc.setDes1("[#=" + df.format(code.getAmount()) + "]");
        jc.setDate(date);
        jc.setDateposted(date);
        if (proceed)
            context.commitChanges();
    }
    return op;
}
