void initIRGB(int[] tmp) {
    int i;
    int red, r, rdist, rinc, rxx;
    int green, g, gdist, ginc, gxx;
    int blue, b, bdist, binc, bxx;
    // 8 the size of 1 Dimension of each quantized cel
    int x = (1 << TRUNCBITS);
    // 64 - twice the smallest step size vale of quantized colors
    int xsqr = 1 << (TRUNCBITS * 2);
    int xsqr2 = xsqr + xsqr;
    int rgbI;
    byte[] irgb = irgb_;
    for (i = 0; i < numColors_; ++i) {
        red = rgbCMap_[i * 4] & 0xFF;
        green = rgbCMap_[i * 4 + 1] & 0xFF;
        blue = rgbCMap_[i * 4 + 2] & 0xFF;
        // distance of red to center of current cell
        rdist = red - x / 2;
        // ditto for green
        gdist = green - x / 2;
        // ditto for blue
        bdist = blue - x / 2;
        rdist = rdist * rdist + gdist * gdist + bdist * bdist;
        rinc = 2 * (xsqr - (red << TRUNCBITS));
        ginc = 2 * (xsqr - (green << TRUNCBITS));
        binc = 2 * (xsqr - (blue << TRUNCBITS));
        rgbI = 0;
        for (r = 0, rxx = rinc; r < MAXQUANTVAL; rdist += rxx, ++r, rxx += xsqr2) {
            for (g = 0, gdist = rdist, gxx = ginc; g < MAXQUANTVAL; gdist += gxx, ++g, gxx += xsqr2) {
                for (b = 0, bdist = gdist, bxx = binc; b < MAXQUANTVAL; bdist += bxx, ++b, ++rgbI, bxx += xsqr2) {
                    if (i == 0 || tmp[rgbI] > bdist) {
                        tmp[rgbI] = bdist;
                        irgb[rgbI] = (byte) i;
                    }
                }
            }
        }
    }
}
