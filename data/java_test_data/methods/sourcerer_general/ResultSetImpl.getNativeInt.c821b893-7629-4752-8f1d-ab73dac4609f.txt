protected int getNativeInt(int columnIndex, boolean overflowCheck) throws SQLException {
    checkRowPos();
    checkColumnBounds(columnIndex);
    // / JDBC is 1-based
    columnIndex--;
    if (this.thisRow.isNull(columnIndex)) {
        this.wasNullFlag = true;
        return 0;
    }
    this.wasNullFlag = false;
    Field f = this.fields[columnIndex];
    switch(f.getMysqlType()) {
        case MysqlDefs.FIELD_TYPE_BIT:
            long valueAsLong = getNumericRepresentationOfSQLBitType(columnIndex + 1);
            if (overflowCheck && this.jdbcCompliantTruncationForReads && (valueAsLong < Integer.MIN_VALUE || valueAsLong > Integer.MAX_VALUE)) {
                throwRangeException(String.valueOf(valueAsLong), columnIndex + 1, Types.INTEGER);
            }
            return (short) valueAsLong;
        case MysqlDefs.FIELD_TYPE_TINY:
            byte tinyintVal = getNativeByte(columnIndex + 1, false);
            if (!f.isUnsigned() || tinyintVal >= 0) {
                return tinyintVal;
            }
            return tinyintVal + 256;
        case MysqlDefs.FIELD_TYPE_SHORT:
        case MysqlDefs.FIELD_TYPE_YEAR:
            short asShort = getNativeShort(columnIndex + 1, false);
            if (!f.isUnsigned() || asShort >= 0) {
                return asShort;
            }
            return asShort + 65536;
        case MysqlDefs.FIELD_TYPE_INT24:
        case MysqlDefs.FIELD_TYPE_LONG:
            int valueAsInt = this.thisRow.getNativeInt(columnIndex);
            if (!f.isUnsigned()) {
                return valueAsInt;
            }
            valueAsLong = (valueAsInt >= 0) ? valueAsInt : valueAsInt + 4294967296L;
            if (overflowCheck && this.jdbcCompliantTruncationForReads && valueAsLong > Integer.MAX_VALUE) {
                throwRangeException(String.valueOf(valueAsLong), columnIndex + 1, Types.INTEGER);
            }
            return (int) valueAsLong;
        case MysqlDefs.FIELD_TYPE_LONGLONG:
            valueAsLong = getNativeLong(columnIndex + 1, false, true);
            if (overflowCheck && this.jdbcCompliantTruncationForReads) {
                if (valueAsLong < Integer.MIN_VALUE || valueAsLong > Integer.MAX_VALUE) {
                    throwRangeException(String.valueOf(valueAsLong), columnIndex + 1, Types.INTEGER);
                }
            }
            return (int) valueAsLong;
        case MysqlDefs.FIELD_TYPE_DOUBLE:
            double valueAsDouble = getNativeDouble(columnIndex + 1);
            if (overflowCheck && this.jdbcCompliantTruncationForReads) {
                if (valueAsDouble < Integer.MIN_VALUE || valueAsDouble > Integer.MAX_VALUE) {
                    throwRangeException(String.valueOf(valueAsDouble), columnIndex + 1, Types.INTEGER);
                }
            }
            return (int) valueAsDouble;
        case MysqlDefs.FIELD_TYPE_FLOAT:
            valueAsDouble = getNativeFloat(columnIndex + 1);
            if (overflowCheck && this.jdbcCompliantTruncationForReads) {
                if (valueAsDouble < Integer.MIN_VALUE || valueAsDouble > Integer.MAX_VALUE) {
                    throwRangeException(String.valueOf(valueAsDouble), columnIndex + 1, Types.INTEGER);
                }
            }
            return (int) valueAsDouble;
        default:
            String stringVal = getNativeString(columnIndex + 1);
            if (this.useUsageAdvisor) {
                issueConversionViaParsingWarning("getInt()", columnIndex, stringVal, this.fields[columnIndex], new int[] { MysqlDefs.FIELD_TYPE_DOUBLE, MysqlDefs.FIELD_TYPE_TINY, MysqlDefs.FIELD_TYPE_SHORT, MysqlDefs.FIELD_TYPE_LONG, MysqlDefs.FIELD_TYPE_LONGLONG, MysqlDefs.FIELD_TYPE_FLOAT });
            }
            return getIntFromString(stringVal, columnIndex + 1);
    }
}
