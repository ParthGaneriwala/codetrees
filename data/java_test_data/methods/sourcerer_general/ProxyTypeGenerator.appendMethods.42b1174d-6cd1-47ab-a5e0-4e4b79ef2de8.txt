private void appendMethods(StringBuilder code) {
    // 
    int id = 0;
    // 
    Iterable<MethodInfo> methods = getMethodsToImplement();
    for (MethodInfo method : methods) {
        String methodId = "method_" + id++;
        String methodName = method.getName();
        List<TypeInfo> parameterTypes = method.getParameterTypes();
        TypeInfo rti = method.getReturnType();
        // 
        String scope;
        switch(method.getAccess()) {
            case PACKAGE_PROTECTED:
                scope = "";
                break;
            case PROTECTED:
                scope = "protected";
                break;
            case PUBLIC:
                scope = "public";
                break;
            default:
                throw new AssertionError();
        }
        // 
        code.append("private static final ").append(Invoker.class.getSimpleName()).append(" ").append(methodId).append(" = ").append(Invoker.class.getSimpleName()).append(".getDeclaredMethod(").append(method.getOwner().getName()).append(".class,").append('"').append(methodName).append('"');
        for (TypeInfo parameterType : parameterTypes) {
            code.append(",");
            new TypeFormatter(type, FormatterStyle.LITERAL, code).format(parameterType);
            code.append(".class");
        }
        code.append(");\n");
        // 
        code.append(scope).append(" final ");
        new TypeFormatter(type, FormatterStyle.RETURN_TYPE, code).format(rti);
        code.append(" ").append(methodName).append("(");
        // 
        for (int i = 0; i < parameterTypes.size(); i++) {
            TypeInfo parameterType = parameterTypes.get(i);
            if (i > 0) {
                code.append(",");
            }
            new TypeFormatter(type, FormatterStyle.TYPE_PARAMETER, code).format(parameterType);
            code.append(" arg_").append(i);
        }
        code.append(")");
        // Build throws clause
        LinkedHashSet<String> catched = new LinkedHashSet<String>();
        boolean hasThrown = false;
        for (ClassTypeInfo thrownCTI : method.getThrownTypes()) {
            if (hasThrown) {
                code.append(", ");
            } else {
                code.append(" throws ");
                hasThrown = true;
            }
            code.append(thrownCTI.getName());
            catched.add(thrownCTI.getName());
        }
        // Complete catched throwables
        catched.add(RuntimeException.class.getName());
        catched.add(Error.class.getName());
        // 
        code.append(" {\n");
        // 
        code.append("try {\n");
        // 
        switch(parameterTypes.size()) {
            case 0:
                if (rti instanceof VoidTypeInfo) {
                    code.append("handler.invoke(this,").append(methodId).append(".getMethod());\n");
                } else {
                    code.append("return (");
                    new TypeFormatter(type, FormatterStyle.CAST, code).format(rti);
                    code.append(")");
                    code.append("handler.invoke(this,").append(methodId).append(".getMethod());\n");
                }
                break;
            case 1:
                if (rti instanceof VoidTypeInfo) {
                    code.append("handler.invoke(this,").append(methodId).append(".getMethod(),(Object)arg_0);\n");
                } else {
                    code.append("return (");
                    new TypeFormatter(type, FormatterStyle.CAST, code).format(rti);
                    code.append(")");
                    code.append("handler.invoke(this,").append(methodId).append(".getMethod(),(Object)arg_0);\n");
                }
                break;
            default:
                code.append("Object[] args = new Object[]{");
                for (int i = 0; i < parameterTypes.size(); i++) {
                    if (i > 0) {
                        code.append(",");
                    }
                    code.append("arg_").append(i);
                }
                code.append("};\n");
                if (rti instanceof VoidTypeInfo) {
                    code.append("handler.invoke(this,").append(methodId).append(".getMethod(),args);\n");
                } else {
                    code.append("return (");
                    new TypeFormatter(type, FormatterStyle.CAST, code).format(rti);
                    code.append(")");
                    code.append("handler.invoke(this,").append(methodId).append(".getMethod(),args);\n");
                }
                break;
        }
        // 
        code.append("} catch(Throwable t) {\n");
        for (String c : catched) {
            code.append("if (t instanceof ").append(c).append(") throw (").append(c).append(")t;\n");
        }
        code.append("throw new java.lang.reflect.UndeclaredThrowableException(t);\n");
        code.append("}\n");
        // 
        code.append("}\n");
    }
}
