public boolean doOptimization() {
    ArrayList<ClassDescriptor> classes = clel.getAllClassDescriptors();
    ClassDescriptor cd;
    ArrayList<MethodDescriptor> methods;
    MethodDescriptor md;
    CLInstruction instruction;
    int i, j, k, index2;
    for (// for each class
    i = 0; // for each class
    i < classes.size(); // for each class
    i++) {
        cd = classes.get(i);
        try {
            methods = clel.getClassesMethodDescriptors(cd);
        } catch (ClassNotFoundException cnfe) {
            return false;
        }
        for (// for each method
        j = 0; // for each method
        j < methods.size(); // for each method
        j++) {
            md = methods.get(j);
            try {
                // get methods code
                code = clel.getMethodsCode(md);
            } catch (MethodNotFoundException mnfe) {
                return false;
            }
            new_code = new ArrayList<CLInstruction>(code);
            branches = new BranchRepresentationTable(code);
            lists = new Hashtable<Integer, Hashtable<Integer, Integer>>();
            empties = new ArrayList<Integer>();
            changed = false;
            BranchRepresentation temp, temp2;
            long from;
            Hashtable<Integer, Integer> l;
            for (index = 0; index < branches.size(); index++) {
                temp = branches.get(index);
                l = new Hashtable<Integer, Integer>();
                // compare branch with every other branch but itself
                for (index2 = 0; index2 < branches.size(); index2++) {
                    if (index != index2) {
                        temp2 = branches.get(index2);
                        from = temp2.getFrom();
                        if ((from >= temp.getFrom() && from <= temp.getTo()) || (from <= temp.getFrom() && from >= temp.getTo())) {
                            l.put(new Integer(index2), new Integer(temp2.getDiff()));
                        }
                    }
                }
                if (l.size() == 0)
                    empties.add(new Integer(index));
                lists.put(new Integer(index), l);
            }
            boolean replace;
            Enumeration keys;
            Integer diff;
            long target;
            while (// for each instructions list
            empties.size() > 0) {
                // get next empty list
                index = empties.remove(0).intValue();
                // remove empty list
                l = lists.remove(index);
                // can branch be replaced
                replace = canReplace(index);
                if (// if it can be replaced?
                replace) {
                    changed = true;
                    if (branches.get(index).getTarget() < 0)
                        branches.get(index).setTarget(branches.get(index).getTarget() + branches.get(index).getDiff());
                    keys = lists.keys();
                    while (// for rest of lists
                    keys.hasMoreElements()) {
                        // get key
                        index2 = (Integer) keys.nextElement();
                        // get list
                        l = lists.get(index2);
                        // if branch is in list, return diff
                        diff = l.remove(index);
                        if (l.size() == 0)
                            empties.add(index2);
                        if (// if in list
                        diff != null) {
                            // WHAT IF ZERO??????
                            // update lists branch
                            target = branches.get(index2).getTarget();
                            if (target >= 0)
                                branches.get(index2).setTarget(target - diff);
                            else
                                branches.get(index2).setTarget(target + diff);
                        }
                    }
                }
            }
            for (index = 0; index < branches.size(); index++) {
                // put branches back
                putBranchBack(branches.get(index));
            }
            try {
                // to be more efficent only set code if it changed
                if (changed)
                    clel.setMethodsCode(md, new_code, clel.getMethodsLocals(md));
            } catch (MethodNotFoundException mnfe) {
                return false;
            }
        }
    }
    return true;
}
