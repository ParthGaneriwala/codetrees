public void process(int count) {
    super.process(count);
    if (newBlockSize > 0) {
        if ((!noNeededParts) && (!endConnection)) {
            int limit = (int) (100);
            if (lastRequestedBlockSize < limit)
                limit = (int) (lastRequestedBlockSize);
            if (fileBytesReceived >= requestedBytes - limit) {
                // System.out.println(totalBytesReceived + " " + requestedBytes + " " + limit);
                doDownload(false);
            }
        }
    }
    if (count % 10 == 0) {
        if (source.getDownload().isComplete())
            endConnection = true;
        if ((taggedGaps.numGaps() == 0) && (noNeededParts) && (!endConnection)) {
            endConnection = true;
        }
    }
    if (endConnection) {
        if (dSendQueue.size() + dReceiveQueue.size() == 0) {
            System.out.println(rnd + " " + (System.currentTimeMillis() - transferStart) + " Normal connection end.");
            close();
        }
    }
    if (change) {
        change = false;
        if (!transfering) {
            if (gotFileName && gotPartRequest) {
                System.out.println(rnd + " " + (System.currentTimeMillis() - transferStart) + " Joining queue...");
                addOutPacket(CreateDonkeyPacket.command(0x54));
                state = STATE_ENQUEUE;
                queueSince = System.currentTimeMillis();
                waiting = true;
                enqueue = true;
            }
        }
        if (blockSize == -1)
            blockSize = newBlockSize;
    }
    if (count == 100) {
        long currentTime = System.currentTimeMillis();
        if (enqueue) {
            if ((currentTime - lastActivity) >= 100 * 1000) {
                addOutPacket(CreateDonkeyPacket.command(0x54));
            }
            if ((currentTime - transferStart) >= 60 * 60 * 5 * 1000) {
                System.out.println(rnd + " " + (System.currentTimeMillis() - transferStart) + " Queue timeout.");
                source.setNextRetry(currentTime + (dInfo.getSourceRetryInterval() * 1000));
                close();
            }
        } else if ((currentTime - lastActivity) > (dInfo.getConnectionTimeOut() * 1000)) {
            System.out.println(rnd + " " + (System.currentTimeMillis() - transferStart) + " dDC: Connection timeout.");
            source.setNextRetry(currentTime + (dInfo.getSourceRetryInterval() * 1000));
            close();
        }
        if (source.getDownload().getPartFile().isHashSetMissing() && ((currentTime - transferStart) / 1000) % 100 == 0 && state == STATE_TRANSFERING) {
            System.out.println("Requesting hashset..");
            addOutPacket(CreateDonkeyPacket.command(0x51, fileHash));
        }
    }
}
