protected void doBetting(int round) {
    spam("Betting: " + style.getPhaseStr(round));
    int bettingTurn = 0, bettingLevel = 0;
    int lastRaise = 1;
    boolean raised = true;
    while (raised && (bettingTurn++ < 100)) {
        PokerPlayer[] bettors = mainPot.getPlayers();
        raised = false;
        boolean preFlop = (round == 0 && bettingTurn == 1);
        // BUG: what happens if chips < ante?
        if (preFlop) {
            for (int p = LITTLE_BLIND; p <= BIG_BLIND; p++) {
                spam(bettors[p].name + " -> " + blinds[p] + " (" + blindnames[p] + ")");
                addToPot(bettors[p], blinds[p]);
                bettors[p].setRoundBet(blinds[p]);
            }
            bettingLevel = blinds[BIG_BLIND];
        }
        // do betting (start position is SB)
        int startPosition = 0;
        if (preFlop) {
            if (bettors.length > 2)
                startPosition = 2;
            else
                startPosition = 0;
        }
        int endPosition = startPosition + bettors.length;
        for (int i = startPosition; i < endPosition; i++) {
            // note: latejoiners ignored
            // wraparound
            int p = (i >= bettors.length) ? i - bettors.length : i;
            int callAmt = bettingLevel - bettors[p].getRoundBet();
            // callAmt;
            int minBet = lastRaise * 2;
            if (callAmt > 0 || preFlop || bettingLevel == 0) {
                // bettingLevel = 0?!
                String query = callAmt > 0 ? "Call (" + callAmt + "), Raise or Fold? (C,R,F)" : "Check, Raise or Fold? (C,R,F)";
                String action = "";
                if (bettors[p].isAuto())
                    action = callAmt > 0 ? "FOLD" : "CALL";
                while (action.equals("")) {
                    action = bettors[p].ask(query, "C").toUpperCase();
                    if (action.startsWith("R") && bettors[p].getChips() < minBet) {
                        bettors[p].tell("You don't have enough to raise!");
                        action = "";
                    }
                }
                if (action.startsWith("F")) {
                    bettors[p].fold();
                    mainPot.removePlayer(bettors[p]);
                    spam(bettors[p].name + " folds.");
                } else if (action.startsWith("R")) {
                    // - player.getRoundBet());
                    int maxBet = bettors[p].getChips();
                    if (maxBet < minBet)
                        // should not happen!
                        maxBet = minBet;
                    int raise = minBet;
                    do {
                        raise = bettors[p].ask("How much? (" + minBet + " - " + maxBet + ")", minBet);
                    } while (raise < minBet || raise > maxBet);
                    if (p > startPosition)
                        raised = true;
                    lastRaise = raise;
                    bettingLevel += raise;
                    bettors[p].setRoundBet(bettingLevel);
                    spam(bettors[p].name + " raises " + raise + " chips!");
                    if (addToPot(bettors[p], callAmt + raise)) {
                        spam(bettors[p].name + " goes all in!");
                    }
                } else {
                    // call
                    bettors[p].setRoundBet(bettingLevel);
                    if (callAmt > 0)
                        spam(bettors[p].name + " calls.");
                    else
                        spam(bettors[p].name + " checks.");
                    if (addToPot(bettors[p], callAmt)) {
                        spam(bettors[p].name + " goes all in!");
                    }
                }
            }
        }
    }
    for (int p = 0; p < getNumPlayers(); p++) ((PokerPlayer) getPlayer(p)).setRoundBet(0);
}
