public void makeLeadNodeFor(Set members) {
    // Accumulate all successors
    Set newSucc = new HashSet();
    Set newSuccClosed = new HashSet();
    for (Iterator i = members.iterator(); i.hasNext(); ) {
        GraphNode n = (GraphNode) i.next();
        newSucc.addAll(n.succ);
        newSuccClosed.addAll(n.succClosed);
    }
    newSucc.removeAll(members);
    newSuccClosed.removeAll(members);
    succ = newSucc;
    succClosed = newSuccClosed;
    // Rewrite all direct successors to have us as predecessor
    for (Iterator i = succ.iterator(); i.hasNext(); ) {
        GraphNode n = (GraphNode) i.next();
        n.pred.removeAll(members);
        n.pred.add(this);
    }
    // Find all predecessor nodes and relink link them to point to us
    Set done = new HashSet();
    Set newAliases = new HashSet();
    for (Iterator i = members.iterator(); i.hasNext(); ) {
        GraphNode m = (GraphNode) i.next();
        if (m.aliases instanceof Set) {
            newAliases.addAll((Set) m.aliases);
        } else {
            newAliases.add(m);
        }
    }
    this.aliases = newAliases;
    for (Iterator i = members.iterator(); i.hasNext(); ) {
        GraphNode n = (GraphNode) i.next();
        if (n != this) {
            pred.addAll(n.pred);
            n.relocateAllRefTo(this, done);
            n.aliases = this;
        }
    }
    pred.removeAll(members);
}
