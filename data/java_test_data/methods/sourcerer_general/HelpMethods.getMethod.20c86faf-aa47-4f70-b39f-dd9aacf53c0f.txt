public static Method getMethod(Class cls, String name, Object[] params) {
    Method ret = null;
    if (params == null) {
        params = new Object[0];
    }
    Method[] methods = cls.getMethods();
    List res = new LinkedList();
    for (int m = 0; m < methods.length; m++) {
        Method method = methods[m];
        if (method.getName().equals(name)) {
            // ����������ͬ
            Class[] paramTypes = method.getParameterTypes();
            if (params.length == paramTypes.length) {
                // ����������ͬ
                StringBuilder inputParamTypeBuf = new StringBuilder(), methodParamTypeBuf = new StringBuilder();
                // ���첢�Ƚϲ������ͷ����Ƿ���ͬ
                int len = params.length;
                for (int i = 0; i < len; i++) {
                    Object inputParamObj = params[i];
                    if (inputParamObj != null) {
                        Class inputParamCls = inputParamObj.getClass();
                        boolean inputPrim = false;
                        if (inputParamObj instanceof Number) {
                            inputPrim = true;
                        } else if (inputParamObj instanceof Boolean) {
                            inputPrim = true;
                        }
                        boolean paramPrim = false;
                        if (isSubClass(paramTypes[i], Number.class)) {
                            paramPrim = true;
                        }
                        if (isSubClass(paramTypes[i], Boolean.class)) {
                            paramPrim = true;
                        }
                        boolean isPrimitiveType = inputPrim && (paramPrim || paramTypes[i].isPrimitive());
                        if (!isPrimitiveType) {
                            // ���ǻ�������
                            char chi = '*', chm = '&';
                            if (isSubClass(inputParamCls, paramTypes[i])) {
                                chm = chi;
                            }
                            inputParamTypeBuf.append(chi).append(' ');
                            methodParamTypeBuf.append(chm).append(' ');
                        } else {
                            // �Ƚϻ�������
                            String typeStr = getPrimitiveTypeStr(inputParamCls);
                            inputParamTypeBuf.append(typeStr).append(' ');
                            typeStr = getPrimitiveTypeStr(paramTypes[i]);
                            methodParamTypeBuf.append(typeStr).append(' ');
                        }
                    }
                }
                if (inputParamTypeBuf.toString().equals(methodParamTypeBuf.toString())) {
                    res.add(method);
                }
            }
        }
    }
    if (res.size() == 0) {
        int len = params.length;
        StringBuilder inputParamTypeBuf = new StringBuilder();
        for (int i = 0; i < len; i++) {
            Object inputParamObj = params[i];
            if (inputParamObj != null) {
                inputParamTypeBuf.append(inputParamObj.getClass().getName()).append(' ');
            } else {
                inputParamTypeBuf.append("null ");
            }
        }
        throw new RuntimeException("����" + cls.getName() + " �Ҳ������� " + name + "(" + inputParamTypeBuf + ")");
    } else if (res.size() > 1) {
        throw new RuntimeException("����" + cls.getName() + " �ϵ�����Ϊ" + name + "�ķ������ô������壨��ֹ��һ���������ϵ���ǩ����");
    } else {
        ret = (Method) res.get(0);
    }
    // System.out.println(ret.toGenericString());
    return ret;
}
