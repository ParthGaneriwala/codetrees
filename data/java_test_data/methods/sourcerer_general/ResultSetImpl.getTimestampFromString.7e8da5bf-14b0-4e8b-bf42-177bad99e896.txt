private Timestamp getTimestampFromString(int columnIndex, Calendar targetCalendar, String timestampValue, TimeZone tz, boolean rollForward) throws java.sql.SQLException {
    try {
        this.wasNullFlag = false;
        if (timestampValue == null) {
            this.wasNullFlag = true;
            return null;
        }
        // 
        // JDK-6 doesn't like trailing whitespace
        // 
        // Note this isn't a performance issue, other
        // than the iteration over the string, as String.trim()
        // will return a new string only if whitespace is present
        // 
        timestampValue = timestampValue.trim();
        int length = timestampValue.length();
        Calendar sessionCalendar = this.connection.getUseJDBCCompliantTimezoneShift() ? this.connection.getUtcCalendar() : getCalendarInstanceForSessionOrNew();
        synchronized (sessionCalendar) {
            if ((length > 0) && (timestampValue.charAt(0) == '0') && (timestampValue.equals("0000-00-00") || timestampValue.equals("0000-00-00 00:00:00") || timestampValue.equals("00000000000000") || timestampValue.equals("0"))) {
                if (ConnectionPropertiesImpl.ZERO_DATETIME_BEHAVIOR_CONVERT_TO_NULL.equals(this.connection.getZeroDateTimeBehavior())) {
                    this.wasNullFlag = true;
                    return null;
                } else if (ConnectionPropertiesImpl.ZERO_DATETIME_BEHAVIOR_EXCEPTION.equals(this.connection.getZeroDateTimeBehavior())) {
                    throw SQLError.createSQLException("Value '" + timestampValue + "' can not be represented as java.sql.Timestamp", SQLError.SQL_STATE_ILLEGAL_ARGUMENT, getExceptionInterceptor());
                }
                // represent, which is '0001-01-01'.
                return fastTimestampCreate(null, 1, 1, 1, 0, 0, 0, 0);
            } else if (this.fields[columnIndex - 1].getMysqlType() == MysqlDefs.FIELD_TYPE_YEAR) {
                if (!this.useLegacyDatetimeCode) {
                    return TimeUtil.fastTimestampCreate(tz, Integer.parseInt(timestampValue.substring(0, 4)), 1, 1, 0, 0, 0, 0);
                } else {
                    return TimeUtil.changeTimezone(this.connection, sessionCalendar, targetCalendar, fastTimestampCreate(sessionCalendar, Integer.parseInt(timestampValue.substring(0, 4)), 1, 1, 0, 0, 0, 0), this.connection.getServerTimezoneTZ(), tz, rollForward);
                }
            } else {
                if (timestampValue.endsWith(".")) {
                    timestampValue = timestampValue.substring(0, timestampValue.length() - 1);
                }
                // Convert from TIMESTAMP or DATE
                int year = 0;
                int month = 0;
                int day = 0;
                int hour = 0;
                int minutes = 0;
                int seconds = 0;
                int nanos = 0;
                switch(length) {
                    case 26:
                    case 25:
                    case 24:
                    case 23:
                    case 22:
                    case 21:
                    case 20:
                    case 19:
                        {
                            year = Integer.parseInt(timestampValue.substring(0, 4));
                            month = Integer.parseInt(timestampValue.substring(5, 7));
                            day = Integer.parseInt(timestampValue.substring(8, 10));
                            hour = Integer.parseInt(timestampValue.substring(11, 13));
                            minutes = Integer.parseInt(timestampValue.substring(14, 16));
                            seconds = Integer.parseInt(timestampValue.substring(17, 19));
                            nanos = 0;
                            if (length > 19) {
                                int decimalIndex = timestampValue.lastIndexOf('.');
                                if (decimalIndex != -1) {
                                    if ((decimalIndex + 2) <= length) {
                                        nanos = Integer.parseInt(timestampValue.substring(decimalIndex + 1));
                                        int numDigits = length - (decimalIndex + 1);
                                        if (numDigits < 9) {
                                            int factor = (int) (Math.pow(10, 9 - numDigits));
                                            nanos = nanos * factor;
                                        }
                                    } else {
                                        // re-thrown
                                        throw new IllegalArgumentException();
                                    // further
                                    // down
                                    // with
                                    // a
                                    // much better error message
                                    }
                                }
                            }
                            break;
                        }
                    case 14:
                        {
                            year = Integer.parseInt(timestampValue.substring(0, 4));
                            month = Integer.parseInt(timestampValue.substring(4, 6));
                            day = Integer.parseInt(timestampValue.substring(6, 8));
                            hour = Integer.parseInt(timestampValue.substring(8, 10));
                            minutes = Integer.parseInt(timestampValue.substring(10, 12));
                            seconds = Integer.parseInt(timestampValue.substring(12, 14));
                            break;
                        }
                    case 12:
                        {
                            year = Integer.parseInt(timestampValue.substring(0, 2));
                            if (year <= 69) {
                                year = (year + 100);
                            }
                            year += 1900;
                            month = Integer.parseInt(timestampValue.substring(2, 4));
                            day = Integer.parseInt(timestampValue.substring(4, 6));
                            hour = Integer.parseInt(timestampValue.substring(6, 8));
                            minutes = Integer.parseInt(timestampValue.substring(8, 10));
                            seconds = Integer.parseInt(timestampValue.substring(10, 12));
                            break;
                        }
                    case 10:
                        {
                            if ((this.fields[columnIndex - 1].getMysqlType() == MysqlDefs.FIELD_TYPE_DATE) || (timestampValue.indexOf("-") != -1)) {
                                year = Integer.parseInt(timestampValue.substring(0, 4));
                                month = Integer.parseInt(timestampValue.substring(5, 7));
                                day = Integer.parseInt(timestampValue.substring(8, 10));
                                hour = 0;
                                minutes = 0;
                            } else {
                                year = Integer.parseInt(timestampValue.substring(0, 2));
                                if (year <= 69) {
                                    year = (year + 100);
                                }
                                month = Integer.parseInt(timestampValue.substring(2, 4));
                                day = Integer.parseInt(timestampValue.substring(4, 6));
                                hour = Integer.parseInt(timestampValue.substring(6, 8));
                                minutes = Integer.parseInt(timestampValue.substring(8, 10));
                                // two-digit year
                                year += 1900;
                            }
                            break;
                        }
                    case 8:
                        {
                            if (timestampValue.indexOf(":") != -1) {
                                hour = Integer.parseInt(timestampValue.substring(0, 2));
                                minutes = Integer.parseInt(timestampValue.substring(3, 5));
                                seconds = Integer.parseInt(timestampValue.substring(6, 8));
                                year = 1970;
                                month = 1;
                                day = 1;
                                break;
                            }
                            year = Integer.parseInt(timestampValue.substring(0, 4));
                            month = Integer.parseInt(timestampValue.substring(4, 6));
                            day = Integer.parseInt(timestampValue.substring(6, 8));
                            year -= 1900;
                            month--;
                            break;
                        }
                    case 6:
                        {
                            year = Integer.parseInt(timestampValue.substring(0, 2));
                            if (year <= 69) {
                                year = (year + 100);
                            }
                            year += 1900;
                            month = Integer.parseInt(timestampValue.substring(2, 4));
                            day = Integer.parseInt(timestampValue.substring(4, 6));
                            break;
                        }
                    case 4:
                        {
                            year = Integer.parseInt(timestampValue.substring(0, 2));
                            if (year <= 69) {
                                year = (year + 100);
                            }
                            year += 1900;
                            month = Integer.parseInt(timestampValue.substring(2, 4));
                            day = 1;
                            break;
                        }
                    case 2:
                        {
                            year = Integer.parseInt(timestampValue.substring(0, 2));
                            if (year <= 69) {
                                year = (year + 100);
                            }
                            year += 1900;
                            month = 1;
                            day = 1;
                            break;
                        }
                    default:
                        throw new java.sql.SQLException("Bad format for Timestamp '" + timestampValue + "' in column " + columnIndex + ".", SQLError.SQL_STATE_ILLEGAL_ARGUMENT);
                }
                if (!this.useLegacyDatetimeCode) {
                    return TimeUtil.fastTimestampCreate(tz, year, month, day, hour, minutes, seconds, nanos);
                }
                return TimeUtil.changeTimezone(this.connection, sessionCalendar, targetCalendar, fastTimestampCreate(sessionCalendar, year, month, day, hour, minutes, seconds, nanos), this.connection.getServerTimezoneTZ(), tz, rollForward);
            }
        }
    } catch (Exception e) {
        SQLException sqlEx = SQLError.createSQLException("Cannot convert value '" + timestampValue + "' from column " + columnIndex + " to TIMESTAMP.", SQLError.SQL_STATE_ILLEGAL_ARGUMENT, getExceptionInterceptor());
        sqlEx.initCause(e);
        throw sqlEx;
    }
}
