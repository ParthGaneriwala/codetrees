public String gerarHtmlConteudo(Matcher mat, Conteudo conteudo, int nGroup, List<ItemConteudo> itens) {
    String strConteudo = mat.group(nGroup);
    Matcher matItem = patItens.matcher(strConteudo);
    String strTemplateItens = "";
    if (matItem.find()) {
        // itens infinitos "itens"
        strTemplateItens = matItem.group(1);
        StringBuilder sb = new StringBuilder();
        if (conteudo.getTipoConteudo().getNoTipoConteudo().equals(TIPO_CONTEUDO_ARQUIVO_DE_ITEM)) {
            // arquivo de blog
            strConteudo = matItem.replaceAll(StringUtils.tratarCaracteresEspeciaisRegex(conteudo.getDeCabecalho()));
        } else {
            int numero = 0;
            for (ItemConteudo item : itens) {
                sb.append(criarItem(strTemplateItens, item, conteudo, ++numero));
            }
            strConteudo = matItem.replaceFirst(StringUtils.tratarCaracteresEspeciaisRegex(sb.toString()));
        }
    } else {
        // loop pelos itens contados "item"
        int numero = 0;
        if (conteudo != null) {
            if (conteudo.getTipoConteudo().getNoTipoConteudo().equals(TIPO_CONTEUDO_ARQUIVO_DE_ITEM)) {
                matItem = patItem.matcher(strConteudo);
                if (matItem.find()) {
                    // arquivo de blog
                    strConteudo = matItem.replaceAll(StringUtils.tratarCaracteresEspeciaisRegex(conteudo.getDeCabecalho()));
                }
            } else {
                for (ItemConteudo item : itens) {
                    matItem = patItem.matcher(strConteudo);
                    String strItem = "";
                    if (matItem.find()) {
                        strItem = matItem.group(1);
                        String criado = criarItem(strItem, item, conteudo, ++numero);
                        try {
                            strConteudo = matItem.replaceFirst(StringUtils.tratarCaracteresEspeciaisRegex(criado));
                        } catch (IllegalArgumentException e) {
                            logger.warn("Erro: " + criado, e);
                        }
                    }
                }
            }
        }
    }
    // colocar o nome do conteudo
    Matcher matNomeConteudo = patNomeConteudo.matcher(strConteudo);
    if (matNomeConteudo.find()) {
        strConteudo = matNomeConteudo.replaceAll(conteudo.getNoConteudo());
    }
    // colocar o cabecalho do conteudo
    if (conteudo.getDeCabecalho() != null) {
        Matcher matCabConteudo = patCabecalhoConteudo.matcher(strConteudo);
        if (matCabConteudo.find()) {
            strConteudo = matCabConteudo.replaceAll(conteudo.getDeCabecalho());
        }
    }
    return mat.replaceFirst(StringUtils.tratarCaracteresEspeciaisRegex(strConteudo));
}
