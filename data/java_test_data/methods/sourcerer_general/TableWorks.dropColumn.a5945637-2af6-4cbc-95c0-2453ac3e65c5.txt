void dropColumn(int colIndex, boolean cascade) {
    OrderedHashSet constraintNameSet = new OrderedHashSet();
    OrderedHashSet dependentConstraints = table.getDependentConstraints(colIndex);
    OrderedHashSet cascadingConstraints = table.getContainingConstraints(colIndex);
    OrderedHashSet indexNameSet = table.getContainingIndexNames(colIndex);
    ColumnSchema column = table.getColumn(colIndex);
    HsqlName columnName = column.getName();
    OrderedHashSet referencingObjects = database.schemaManager.getReferencingObjectNames(table.getName(), columnName);
    checkModifyTable();
    if (!cascade) {
        if (!cascadingConstraints.isEmpty()) {
            Constraint c = (Constraint) cascadingConstraints.get(0);
            HsqlName name = c.getName();
            throw Error.error(ErrorCode.X_42536, name.getSchemaQualifiedStatementName());
        }
        if (!referencingObjects.isEmpty()) {
            mainLoop: for (int i = 0; i < referencingObjects.size(); i++) {
                HsqlName name = (HsqlName) referencingObjects.get(i);
                if (name == columnName) {
                    continue;
                }
                for (int j = 0; j < dependentConstraints.size(); j++) {
                    Constraint c = (Constraint) dependentConstraints.get(j);
                    ;
                    if (c.getName() == name) {
                        continue mainLoop;
                    }
                }
                throw Error.error(ErrorCode.X_42536, name.getSchemaQualifiedStatementName());
            }
        }
    }
    dependentConstraints.addAll(cascadingConstraints);
    cascadingConstraints.clear();
    OrderedHashSet tableSet = new OrderedHashSet();
    for (int i = 0; i < dependentConstraints.size(); i++) {
        Constraint c = (Constraint) dependentConstraints.get(i);
        if (c.constType == SchemaObject.ConstraintTypes.FOREIGN_KEY) {
            tableSet.add(c.getMain());
            constraintNameSet.add(c.getMainName());
            constraintNameSet.add(c.getRefName());
            indexNameSet.add(c.getRefIndex().getName());
        }
        if (c.constType == SchemaObject.ConstraintTypes.MAIN) {
            tableSet.add(c.getRef());
            constraintNameSet.add(c.getMainName());
            constraintNameSet.add(c.getRefName());
            indexNameSet.add(c.getRefIndex().getName());
        }
        constraintNameSet.add(c.getName());
    }
    tableSet = makeNewTables(tableSet, constraintNameSet, indexNameSet);
    Table tn = table.moveDefinition(session, table.tableType, null, null, null, colIndex, -1, constraintNameSet, indexNameSet);
    moveData(table, tn, colIndex, -1);
    database.schemaManager.removeSchemaObjects(referencingObjects);
    database.schemaManager.removeSchemaObjects(constraintNameSet);
    database.schemaManager.removeSchemaObject(columnName);
    setNewTableInSchema(tn);
    setNewTablesInSchema(tableSet);
    updateConstraints(tn, emptySet);
    updateConstraints(tableSet, constraintNameSet);
    database.schemaManager.recompileDependentObjects(tableSet);
    database.schemaManager.recompileDependentObjects(tn);
    tn.compile(session, null);
    if (column.getDataType().isLobType()) {
        RowIterator it = table.rowIterator(session);
        while (it.hasNext()) {
            Row row = it.getNextRow();
            Object[] data = row.getData();
            if (data[colIndex] != null) {
                session.sessionData.adjustLobUsageCount(data[colIndex], -1);
            }
        }
    }
    table = tn;
}
