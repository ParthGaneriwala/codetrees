private Expression readCondition() throws HsqlException {
    switch(iToken) {
        case Expression.NOT:
            {
                int type = iToken;
                read();
                return new Expression(type, readCondition(), null);
            }
        case Expression.EXISTS:
            {
                int type = iToken;
                read();
                readThis(Expression.OPEN);
                int brackets = 0;
                if (iToken == Expression.OPEN) {
                    brackets += parseOpenBrackets() + 1;
                    read();
                }
                Trace.check(iToken == Expression.SELECT, Trace.UNEXPECTED_TOKEN);
                SubQuery sq = parseSubquery(brackets, null, false, Expression.EXISTS);
                Expression s = new Expression(sq);
                read();
                readThis(Expression.CLOSE);
                return new Expression(type, s, null);
            }
        default:
            {
                Expression a = readConcat();
                if (iToken == Expression.IS) {
                    read();
                    boolean not;
                    if (iToken == Expression.NOT) {
                        not = true;
                        read();
                    } else {
                        not = false;
                    }
                    Trace.check(iToken == Expression.VALUE && oData == null, Trace.UNEXPECTED_TOKEN);
                    read();
                    // TODO: the TableFilter needs a right hand side to avoid null pointer exceptions...
                    a = new Expression(Expression.IS_NULL, a, new Expression(Types.NULL, null));
                    if (not) {
                        a = new Expression(Expression.NOT, a, null);
                    }
                    return a;
                }
                boolean not = false;
                if (iToken == Expression.NOT) {
                    not = true;
                    read();
                }
                switch(iToken) {
                    case Expression.LIKE:
                        {
                            a = parseLikePredicate(a);
                            break;
                        }
                    case Expression.BETWEEN:
                        {
                            a = parseBetweenPredicate(a);
                            break;
                        }
                    case Expression.IN:
                        {
                            a = this.parseInPredicate(a);
                            break;
                        }
                    default:
                        {
                            Trace.check(!not, Trace.UNEXPECTED_TOKEN);
                            if (Expression.isCompare(iToken)) {
                                int type = iToken;
                                read();
                                return new Expression(type, a, readConcat());
                            }
                            return a;
                        }
                }
                if (not) {
                    a = new Expression(Expression.NOT, a, null);
                }
                return a;
            }
    }
}
