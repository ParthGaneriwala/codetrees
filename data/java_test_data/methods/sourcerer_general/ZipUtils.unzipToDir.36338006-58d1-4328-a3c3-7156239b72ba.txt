public static long unzipToDir(InputStream inzip, String basedirdest) throws IOException, SecurityException {
    long sum = 0;
    File base = new File(basedirdest);
    if (!base.exists())
        base.mkdirs();
    try {
        CheckedInputStream checksum = new CheckedInputStream(inzip, new Adler32());
        try {
            // Buffer sur le zip
            BufferedInputStream bis = new BufferedInputStream(checksum);
            try {
                ZipInputStream zis = new ZipInputStream(bis);
                try {
                    ZipEntry entry;
                    File f;
                    int count;
                    byte[] buf = new byte[BUFFER_SIZE];
                    BufferedOutputStream bos;
                    FileOutputStream fos;
                    // Parcours les entr�es du zip
                    while ((entry = zis.getNextEntry()) != null) {
                        f = new File(basedirdest, entry.getName());
                        if (entry.isDirectory())
                            f.mkdirs();
                        else {
                            // L'entry semble �tre
                            // un fichier
                            // Si contient un / on
                            // cr�e les r�pertoires,
                            // car parfois on a pas
                            // dir/ avant
                            // dir/fichier.ext
                            int l = entry.getName().lastIndexOf('/');
                            if (l != -1) {
                                new File(basedirdest, entry.getName().substring(0, l)).mkdirs();
                            }
                            fos = new FileOutputStream(f);
                            try {
                                bos = new BufferedOutputStream(fos, BUFFER_SIZE);
                                try {
                                    // fichier
                                    while ((count = zis.read(buf, 0, BUFFER_SIZE)) != -1) {
                                        bos.write(buf, 0, count);
                                    }
                                } finally {
                                    bos.close();
                                }
                            } finally {
                                fos.close();
                            }
                        }
                        if (entry.getTime() != -1) {
                            f.setLastModified(entry.getTime());
                        }
                    }
                } finally {
                    zis.close();
                }
            } finally {
                bis.close();
            }
        } finally {
            checksum.close();
        }
        sum = checksum.getChecksum().getValue();
    } finally {
        inzip.close();
    }
    return sum;
}
