public void execute() throws MojoExecutionException {
    Log log = getLog();
    while (null != proyecto.getParent()) proyecto = proyecto.getParent();
    outputDirectory = new File(proyecto.getBuild().getDirectory());
    if (!outputDirectory.exists())
        outputDirectory.mkdirs();
    // Si a CambiaPom se le pasa un Hashtable de cambios null,
    // no hace ningun cambio, pero genera igualmente el listado
    // de artifacts en el pom.xml
    CambiaPom cp = new CambiaPom(null, basedir, todo, log, proyecto.getProperties());
    LinkedList<Artifact> listado = cp.getListado();
    File ficheroCambiaConf = new File(outputDirectory, "cambia.conf");
    LinkedList<String> listaArtefactos = new LinkedList<String>();
    if (ficheroCambiaConf.canRead()) {
        BufferedReader br;
        try {
            br = new BufferedReader(new FileReader(ficheroCambiaConf));
            String linea = br.readLine();
            while (null != linea) {
                String artefacto = linea.substring(0, linea.indexOf(" "));
                listaArtefactos.add(artefacto);
                linea = br.readLine();
            }
        } catch (Exception e) {
            log.error(e);
        }
    }
    try {
        PrintWriter pw = new PrintWriter(new FileWriter(new File(outputDirectory, "cambia.conf"), true));
        for (Artifact a : listado) {
            String artefacto = a.toString();
            if (-1 == listaArtefactos.indexOf(artefacto)) {
                String[] partesArtefacto = artefacto.split(":");
                if (null != groupId)
                    partesArtefacto[0] = groupId;
                if (null != version)
                    partesArtefacto[2] = version;
                pw.println(artefacto + " " + partesArtefacto[0] + ":" + partesArtefacto[1] + ":" + partesArtefacto[2]);
                listaArtefactos.add(artefacto);
            }
        }
        pw.close();
    } catch (IOException e) {
        log.error(e);
    }
}
