private void insertLeaf(int leaf) {
    ++m_insertionCount;
    if (m_root == nullNode) {
        m_root = leaf;
        m_nodes[m_root].parent = nullNode;
        return;
    }
    // Find the best sibling for this node.
    BBVec2 center = m_nodes[leaf].aabb.getCenter();
    int sibling = m_root;
    if (!m_nodes[sibling].IsLeaf()) {
        do {
            int child1 = m_nodes[sibling].child1;
            int child2 = m_nodes[sibling].child2;
            BBVec2 delta1 = abs(sub(m_nodes[child1].aabb.getCenter(), center));
            BBVec2 delta2 = abs(sub(m_nodes[child2].aabb.getCenter(), center));
            float norm1 = delta1.x + delta1.y;
            float norm2 = delta2.x + delta2.y;
            if (norm1 < norm2) {
                sibling = child1;
            } else {
                sibling = child2;
            }
        } while (!m_nodes[sibling].IsLeaf());
    }
    // create a parent for the siblings.
    int node1 = m_nodes[sibling].parent;
    int node2 = allocateNode();
    m_nodes[node2].parent = node1;
    m_nodes[node2].userData = null;
    m_nodes[node2].aabb.combine(m_nodes[leaf].aabb, m_nodes[sibling].aabb);
    if (node1 != nullNode) {
        if (m_nodes[m_nodes[sibling].parent].child1 == sibling) {
            m_nodes[node1].child1 = node2;
        } else {
            m_nodes[node1].child2 = node2;
        }
        m_nodes[node2].child1 = sibling;
        m_nodes[node2].child2 = leaf;
        m_nodes[sibling].parent = node2;
        m_nodes[leaf].parent = node2;
        do {
            if (m_nodes[node1].aabb.contains(m_nodes[node2].aabb)) {
                break;
            }
            m_nodes[node1].aabb.combine(m_nodes[m_nodes[node1].child1].aabb, m_nodes[m_nodes[node1].child2].aabb);
            node2 = node1;
            node1 = m_nodes[node1].parent;
        } while (node1 != nullNode);
    } else {
        m_nodes[node2].child1 = sibling;
        m_nodes[node2].child2 = leaf;
        m_nodes[sibling].parent = node2;
        m_nodes[leaf].parent = node2;
        m_root = node2;
    }
}
