// *********************************************//
// * OBS: EXPRESSAO BOOLEANA INCORRETA PARA || *//
public void expressaoBooleana(String[] expressaoNormal) {
    String[] expressao = Conversor.notacaoPolonesaBooleana(expressaoNormal);
    int pilha = 0;
    this.reservarEspacoMemoria("temp");
    this.reservarEspacoMemoria("temp" + pilha);
    for (int i = 0; i < expressao.length; i++) {
        String atual = expressao[i];
        if (ehNumero(atual)) {
            this.constanteParaAcumulador(Integer.parseInt(atual));
            this.acumuladorParaMemoria("temp" + pilha);
            pilha++;
            this.reservarEspacoMemoria("temp" + pilha);
        } else if (atual.equals("TRUE")) {
            // é TRUE
            this.constanteParaAcumulador(1);
            this.acumuladorParaMemoria("temp" + pilha);
            pilha++;
            this.reservarEspacoMemoria("temp" + pilha);
        } else if (atual.equals("FALSE")) {
            // é FALSE
            this.constanteParaAcumulador(0);
            this.acumuladorParaMemoria("temp" + pilha);
            pilha++;
            this.reservarEspacoMemoria("temp" + pilha);
        } else if (!atual.equals(Token.ECOMERCIAL_ECOMERCIAL) && !atual.equals(Token.BVERTICAL_BVERTICAL) && !atual.equals(Token.MAIOR) && !atual.equals(Token.MAIOR_IGUAL) && !atual.equals(Token.MENOR) && !atual.equals(Token.MENOR_IGUAL) && !atual.equals(Token.IGUAL_IGUAL) && !atual.equals(Token.EXCLAMACAO_IGUAL)) {
            // é IDENTIFICADOR
            this.memoriaParaAcumulador(atual);
            this.acumuladorParaMemoria("temp" + pilha);
            pilha++;
            this.reservarEspacoMemoria("temp" + pilha);
        } else {
            // é OPERADOR &&, ||, ==, !=, >, <, <=, >=
            pilha--;
            this.memoriaParaAcumulador("temp" + pilha);
            pilha--;
            if (atual.equals(Token.ECOMERCIAL_ECOMERCIAL)) {
                this.multiplicacao("temp" + pilha);
            } else if (atual.equals(Token.BVERTICAL_BVERTICAL)) {
                this.soma("temp" + pilha);
                this.acumuladorParaMemoria("temp");
                this.comparacaoDiferente("temp" + pilha, "temp", "false");
            } else if (atual.equals(Token.IGUAL_IGUAL)) {
                this.acumuladorParaMemoria("temp");
                this.comparacaoIgual("temp" + pilha, "temp" + pilha, "temp");
            } else if (atual.equals(Token.EXCLAMACAO_IGUAL)) {
                this.acumuladorParaMemoria("temp");
                this.comparacaoDiferente("temp" + pilha, "temp" + pilha, "temp");
            } else if (atual.equals(Token.MAIOR)) {
                this.acumuladorParaMemoria("temp");
                this.comparacaoMaior("temp" + pilha, "temp" + pilha, "temp");
            } else if (atual.equals(Token.MENOR)) {
                this.acumuladorParaMemoria("temp");
                this.comparacaoMenor("temp" + pilha, "temp" + pilha, "temp");
            } else if (atual.equals(Token.MAIOR_IGUAL)) {
                this.acumuladorParaMemoria("temp");
                this.comparacaoMaiorOuIgual("temp" + pilha, "temp" + pilha, "temp");
            } else if (atual.equals(Token.MENOR_IGUAL)) {
                this.acumuladorParaMemoria("temp");
                this.comparacaoMenorOuIgual("temp" + pilha, "temp" + pilha, "temp");
            }
            this.acumuladorParaMemoria("temp" + pilha);
            pilha++;
            this.reservarEspacoMemoria("temp" + pilha);
        }
    }
}
