// ------------------------------------------------------------------------
private int _getTransportType() {
    /* first check absolute minimum delay between connections */
    if (!Accounting.absoluteDelayExpired()) {
        // }
        return TRANSPORT_NONE;
    }
    /* check specific event priority */
    int xportType = TRANSPORT_NONE;
    int evPri = this.getEventQueue().getHighestPriority();
    // Log.info(LOG_NAME, "Highest event priority: " + evPri);
    switch(evPri) {
        // no events, time for 'checkup'?
        case Packet.PRIORITY_NONE:
            if (!Accounting.isUnderTotalQuota()) {
                // Over Total quota
                // Log.debug(LOG_NAME, "Over Total quota");
                xportType = TRANSPORT_NONE;
            } else if (!Accounting.maxIntervalExpired()) {
                // MAX interval has not expired
                // Log.debug(LOG_NAME, "MAX interval has not expired");
                xportType = TRANSPORT_NONE;
            } else if (Accounting.isUnderDuplexQuota()) {
                // Under Total/Duplex quota and MAX interval expired, time for Duplex checkup
                // Log.info(LOG_NAME, "Duplex checkup");
                xportType = TRANSPORT_DUPLEX;
            } else {
                // Over Duplex quota
                // Log.debug(LOG_NAME, "Over Duplex quota");
                xportType = TRANSPORT_NONE;
            }
            break;
        // low priority events
        case Packet.PRIORITY_LOW:
            if (!Accounting.isUnderTotalQuota()) {
                // Over Total quota, no sending
                // Log.debug(LOG_NAME, "Over total quota");
                xportType = TRANSPORT_NONE;
            } else if (!Accounting.minIntervalExpired()) {
                // Min interval has not expired, no sending
                // Log.debug(LOG_NAME, "MIN interval has not expired");
                xportType = TRANSPORT_NONE;
            } else if (Accounting.supportsSimplex()) {
                // Under Total quota, min interval expired, send Simplex
                // Log.info(LOG_NAME, "Send Simplex");
                xportType = TRANSPORT_SIMPLEX;
            } else if (Accounting.isUnderDuplexQuota()) {
                // under Total/Duplex quota and min interval expired, Simplex not supported, send Duplex
                // Log.info(LOG_NAME, "Send Duplex");
                xportType = TRANSPORT_DUPLEX;
            } else {
                if (!Accounting.supportsDuplex()) {
                    Log.error(LOG_NAME, "Transport does not support Simplex or Duplex!!!");
                }
                // Over Duplex quota (or Duplex not supported), no sending
                // Log.debug(LOG_NAME, "Over Duplex quota");
                xportType = TRANSPORT_NONE;
            }
            break;
        // normal priority events
        case Packet.PRIORITY_NORMAL:
            if (!Accounting.isUnderTotalQuota()) {
                // Over Total quota, no sending
                // Log.debug(LOG_NAME, "Over Total quota");
                xportType = TRANSPORT_NONE;
            } else if (!Accounting.minIntervalExpired()) {
                // Min interval has not expired, no sending
                // Log.debug(LOG_NAME, "MIN interval has not expired");
                xportType = TRANSPORT_NONE;
            } else if (Accounting.isUnderDuplexQuota()) {
                // Under Total/Duplex quota and min interval expired, send Duplex
                // Log.info(LOG_NAME, "Send Duplex");
                xportType = TRANSPORT_DUPLEX;
            } else if (!Accounting.supportsDuplex()) {
                // under Total quota, but the client doesn't support Duplex connections, send Simplex
                // Log.info(LOG_NAME, "Send Simplex");
                xportType = TRANSPORT_SIMPLEX;
            } else {
                // Over Duplex quota, no sending
                // Log.debug(LOG_NAME, "Over Duplex quota");
                xportType = TRANSPORT_NONE;
            }
            break;
        // high priority events
        case Packet.PRIORITY_HIGH:
        default:
            // catch-all
            if (Accounting.isUnderDuplexQuota()) {
                // (disregard timer interval and total quota)
                // Under Duplex quota and critical event, send Duplex
                // Log.info(LOG_NAME, "Send Duplex");
                xportType = TRANSPORT_DUPLEX;
            } else if (!Accounting.supportsDuplex()) {
                // critical event, but the client does not support duplex connections, send Simplex
                // Log.info(LOG_NAME, "Send Simplex");
                xportType = TRANSPORT_SIMPLEX;
            } else {
                // over Duplex quota, no sending
                // Log.debug(LOG_NAME, "Over Duplex quota");
                xportType = TRANSPORT_NONE;
            }
            break;
    }
    return xportType;
}
