// $ANTLR start "expression4"
public final CompiladoresParser.expression4_return expression4() throws RecognitionException {
    CompiladoresParser.expression4_return retval = new CompiladoresParser.expression4_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token set128 = null;
    CompiladoresParser.expression5_return expression5127 = null;
    CompiladoresParser.expression5_return expression5129 = null;
    CommonTree set128_tree = null;
    try {
        dbg.enterRule(getGrammarFileName(), "expression4");
        if (getRuleLevel() == 0) {
            dbg.commence();
        }
        incRuleLevel();
        dbg.location(172, 1);
        try {
            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:172:15: ( expression5 ( ( PLUS | MINUS ) expression5 )* )
            dbg.enterAlt(1);
            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:172:17: expression5 ( ( PLUS | MINUS ) expression5 )*
            {
                root_0 = (CommonTree) adaptor.nil();
                dbg.location(172, 17);
                pushFollow(FOLLOW_expression5_in_expression41421);
                expression5127 = expression5();
                state._fsp--;
                adaptor.addChild(root_0, expression5127.getTree());
                dbg.location(172, 29);
                // /home/CIN/fmm/Desktop/grammar/Compiladores.g:172:29: ( ( PLUS | MINUS ) expression5 )*
                try {
                    dbg.enterSubRule(31);
                    loop31: do {
                        int alt31 = 2;
                        try {
                            dbg.enterDecision(31);
                            int LA31_0 = input.LA(1);
                            if (((LA31_0 >= PLUS && LA31_0 <= MINUS))) {
                                alt31 = 1;
                            }
                        } finally {
                            dbg.exitDecision(31);
                        }
                        switch(alt31) {
                            case 1:
                                dbg.enterAlt(1);
                                // /home/CIN/fmm/Desktop/grammar/Compiladores.g:172:30: ( PLUS | MINUS ) expression5
                                {
                                    dbg.location(172, 30);
                                    set128 = (Token) input.LT(1);
                                    set128 = (Token) input.LT(1);
                                    if ((input.LA(1) >= PLUS && input.LA(1) <= MINUS)) {
                                        input.consume();
                                        root_0 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(set128), root_0);
                                        state.errorRecovery = false;
                                    } else {
                                        MismatchedSetException mse = new MismatchedSetException(null, input);
                                        dbg.recognitionException(mse);
                                        throw mse;
                                    }
                                    dbg.location(172, 46);
                                    pushFollow(FOLLOW_expression5_in_expression41433);
                                    expression5129 = expression5();
                                    state._fsp--;
                                    adaptor.addChild(root_0, expression5129.getTree());
                                }
                                break;
                            default:
                                break loop31;
                        }
                    } while (true);
                } finally {
                    dbg.exitSubRule(31);
                }
            }
            retval.stop = input.LT(-1);
            retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
        }
        dbg.location(172, 59);
    } finally {
        dbg.exitRule(getGrammarFileName(), "expression4");
        decRuleLevel();
        if (getRuleLevel() == 0) {
            dbg.terminate();
        }
    }
    return retval;
}
