public void startundelete(com.sforce.soap.enterprise.ID[] ids425, com.sforce.soap.enterprise.SessionHeader sessionHeader426, com.sforce.soap.enterprise.AllowFieldTruncationHeader allowFieldTruncationHeader427, com.sforce.soap.enterprise.DebuggingHeader debuggingHeader428, com.sforce.soap.enterprise.PackageVersionHeader packageVersionHeader429, final com.sforce.soap.enterprise.SforceServiceCallbackHandler callback) throws java.rmi.RemoteException {
    org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[12].getName());
    _operationClient.getOptions().setAction("\"\"");
    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);
    addPropertyToOperationClient(_operationClient, org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");
    // create SOAP envelope with that payload
    org.apache.axiom.soap.SOAPEnvelope env = null;
    org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();
    // Style is Doc.
    com.sforce.soap.enterprise.Undelete dummyWrappedType = null;
    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), ids425, dummyWrappedType, optimizeContent(new javax.xml.namespace.QName("urn:enterprise.soap.sforce.com", "undelete")));
    // add the soap_headers only if they are not null
    if (sessionHeader426 != null) {
        org.apache.axiom.om.OMElement omElementsessionHeader426 = toOM(sessionHeader426, optimizeContent(new javax.xml.namespace.QName("urn:enterprise.soap.sforce.com", "undelete")));
        addHeader(omElementsessionHeader426, env);
    }
    // add the soap_headers only if they are not null
    if (allowFieldTruncationHeader427 != null) {
        org.apache.axiom.om.OMElement omElementallowFieldTruncationHeader427 = toOM(allowFieldTruncationHeader427, optimizeContent(new javax.xml.namespace.QName("urn:enterprise.soap.sforce.com", "undelete")));
        addHeader(omElementallowFieldTruncationHeader427, env);
    }
    // add the soap_headers only if they are not null
    if (debuggingHeader428 != null) {
        org.apache.axiom.om.OMElement omElementdebuggingHeader428 = toOM(debuggingHeader428, optimizeContent(new javax.xml.namespace.QName("urn:enterprise.soap.sforce.com", "undelete")));
        addHeader(omElementdebuggingHeader428, env);
    }
    // add the soap_headers only if they are not null
    if (packageVersionHeader429 != null) {
        org.apache.axiom.om.OMElement omElementpackageVersionHeader429 = toOM(packageVersionHeader429, optimizeContent(new javax.xml.namespace.QName("urn:enterprise.soap.sforce.com", "undelete")));
        addHeader(omElementpackageVersionHeader429, env);
    }
    // adding SOAP soap_headers
    _serviceClient.addHeadersToEnvelope(env);
    // create message context with that soap envelope
    _messageContext.setEnvelope(env);
    // add the message context to the operation client
    _operationClient.addMessageContext(_messageContext);
    _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {

        public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
            try {
                org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();
                java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(), com.sforce.soap.enterprise.UndeleteResponse.class, getEnvelopeNamespaces(resultEnv));
                callback.receiveResultundelete(getUndeleteResponseResult((com.sforce.soap.enterprise.UndeleteResponse) object));
            } catch (org.apache.axis2.AxisFault e) {
                callback.receiveErrorundelete(e);
            }
        }

        public void onError(java.lang.Exception error) {
            if (error instanceof org.apache.axis2.AxisFault) {
                org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                org.apache.axiom.om.OMElement faultElt = f.getDetail();
                if (faultElt != null) {
                    if (faultExceptionNameMap.containsKey(faultElt.getQName())) {
                        // make the fault by reflection
                        try {
                            java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(faultElt.getQName());
                            java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                            java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
                            // message class
                            java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(faultElt.getQName());
                            java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                            java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                            java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage", new java.lang.Class[] { messageClass });
                            m.invoke(ex, new java.lang.Object[] { messageObject });
                            if (ex instanceof com.sforce.soap.enterprise.UnexpectedErrorFault) {
                                callback.receiveErrorundelete((com.sforce.soap.enterprise.UnexpectedErrorFault) ex);
                                return;
                            }
                            callback.receiveErrorundelete(new java.rmi.RemoteException(ex.getMessage(), ex));
                        } catch (java.lang.ClassCastException e) {
                            // we cannot intantiate the class - throw the original Axis fault
                            callback.receiveErrorundelete(f);
                        } catch (java.lang.ClassNotFoundException e) {
                            // we cannot intantiate the class - throw the original Axis fault
                            callback.receiveErrorundelete(f);
                        } catch (java.lang.NoSuchMethodException e) {
                            // we cannot intantiate the class - throw the original Axis fault
                            callback.receiveErrorundelete(f);
                        } catch (java.lang.reflect.InvocationTargetException e) {
                            // we cannot intantiate the class - throw the original Axis fault
                            callback.receiveErrorundelete(f);
                        } catch (java.lang.IllegalAccessException e) {
                            // we cannot intantiate the class - throw the original Axis fault
                            callback.receiveErrorundelete(f);
                        } catch (java.lang.InstantiationException e) {
                            // we cannot intantiate the class - throw the original Axis fault
                            callback.receiveErrorundelete(f);
                        } catch (org.apache.axis2.AxisFault e) {
                            // we cannot intantiate the class - throw the original Axis fault
                            callback.receiveErrorundelete(f);
                        }
                    } else {
                        callback.receiveErrorundelete(f);
                    }
                } else {
                    callback.receiveErrorundelete(f);
                }
            } else {
                callback.receiveErrorundelete(error);
            }
        }

        public void onFault(org.apache.axis2.context.MessageContext faultContext) {
            org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
            onError(fault);
        }

        public void onComplete() {
        // Do nothing by default
        }
    });
    org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
    if (_operations[12].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()) {
        _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
        _operations[12].setMessageReceiver(_callbackReceiver);
    }
    // execute the operation client
    _operationClient.execute(false);
}
