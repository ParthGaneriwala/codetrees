protected static void openMovieAddFromListWindow(final MovieDataEnum type, final int id) {
    shell.getShell().setEnabled(false);
    final Shell addToMovie = new Shell(SWT.CLOSE);
    Color bgColor = new Color(display, 177, 200, 231);
    addToMovie.setBackground(bgColor);
    Rectangle monitor_bounds = addToMovie.getShell().getMonitor().getBounds();
    addToMovie.setLocation(monitor_bounds.width / 2 - 100, monitor_bounds.height / 2 - 100);
    addToMovie.setText("Add To Movie");
    GridLayout layout = new GridLayout(2, false);
    addToMovie.setLayout(layout);
    Label label = new Label(addToMovie, SWT.NONE);
    label.setBackground(bgColor);
    final Combo combo = new Combo(addToMovie, SWT.FILL | SWT.BORDER | SWT.READ_ONLY);
    String[] listString;
    List<NamedEntity> list = countriesList;
    switch(type) {
        case MOVIE_COUNTRIES:
            {
                label.setText("Country:");
                break;
            }
        case MOVIE_GENRES:
            {
                label.setText("Genre:");
                list = genresList;
                break;
            }
        case MOVIE_LANGUAGES:
            {
                label.setText("Language:");
                Point size = new Point(monitor_bounds.width / 5, combo.getSize().y);
                combo.setSize(size);
                list = langList;
                break;
            }
    }
    listString = new String[list.size()];
    for (int i = 0; i < list.size(); i++) {
        listString[i] = list.get(i).getName();
    }
    final List<NamedEntity> finalList = list;
    combo.setItems(listString);
    addToMovie.setSize(combo.getSize().x + 120, 100);
    Button add = new Button(addToMovie, SWT.PUSH);
    add.setText("Add");
    add.setEnabled(isAdmin);
    add.setBackground(bgColor);
    Button close = new Button(addToMovie, SWT.PUSH);
    close.setText("Close");
    close.setBackground(bgColor);
    // listen to add button
    add.addSelectionListener(new SelectionListener() {

        public void widgetDefaultSelected(SelectionEvent e) {
        }

        public void widgetSelected(SelectionEvent e) {
            if (combo.getText() != "") {
                AbsType t = new Relation(id, Integer.parseInt(getID(finalList, combo.getText())));
                try {
                    // inserting
                    pool.execute(DataManager.insertMovieData(type, t, true));
                    shell.getShell().setEnabled(true);
                    addToMovie.close();
                } catch (InterruptedException e1) {
                    e1.printStackTrace();
                }
            } else {
                // nothing was written
                okMessageBox("Please insert information to add.");
            }
        }
    });
    // listen to the close button
    close.addSelectionListener(new SelectionListener() {

        public void widgetDefaultSelected(SelectionEvent e) {
        }

        public void widgetSelected(SelectionEvent e) {
            shell.getShell().setEnabled(true);
            addToMovie.close();
        }
    });
    // listen to the X button
    addToMovie.addDisposeListener(new DisposeListener() {

        public void widgetDisposed(DisposeEvent e) {
            shell.getShell().setEnabled(true);
        }
    });
    addToMovie.open();
}
