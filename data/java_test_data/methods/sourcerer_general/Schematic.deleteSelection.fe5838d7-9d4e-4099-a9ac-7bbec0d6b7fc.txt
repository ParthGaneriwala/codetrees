public void deleteSelection() {
    int index;
    SEdge edge;
    SObject obj;
    SObject head, tail;
    if (selection.size() == 0)
        return;
    transaction(0);
    /*
         * First clear the deleted flag from all objects
         */
    for (index = 0; index < objects.size(); index++) {
        obj = (SObject) objects.get(index);
        obj.mark_deleted = false;
    }
    for (index = 0; index < selection.size(); index++) {
        obj = (SObject) selection.get(index);
        obj.mark_deleted = true;
    }
    /*
         * Now that the delete objects are marked, analyze each one to see if 
         * they can really be deleted (based on dependent objects being marked)
         * and put them in the delete list 
         */
    delete_list.clear();
    for (index = 0; index < selection.size(); index++) {
        obj = (SObject) selection.get(index);
        if (obj.deletable()) {
            delete_list.add(obj);
        } else {
            obj.mark_deleted = false;
        }
    }
    /*
         * Since edges are the main objects where linking/unlinking take place
         * (edges are the 'glue' that stiches the schematic objects together), 
         * we sweep through the edges to do unlinking for the deletion
         */
    for (index = 0; index < edges.size(); index++) {
        edge = (SEdge) edges.get(index);
        head = edge.endobject(edge.head);
        tail = edge.endobject(edge.tail);
        if (edge.mark_deleted) {
            if (!head.mark_deleted) {
                checkpoint(head, 0);
                edge.unlink(0, edge.head, false, true);
            }
            if (!tail.mark_deleted) {
                checkpoint(tail, 0);
                edge.unlink(1, edge.tail, false, true);
            }
        } else {
            if (head.mark_deleted) {
                checkpoint(edge, 0);
                edge.unlink(0, edge.head, true, false);
            }
            if (tail.mark_deleted) {
                checkpoint(edge, 0);
                edge.unlink(1, edge.tail, true, false);
            }
        }
    }
    /*
         * Finally, remove the selected objects IF they are deletable()
         */
    for (index = 0; index < delete_list.size(); index++) {
        obj = (SObject) delete_list.get(index);
        checkpoint(obj, -1);
        remove_internal(obj);
    }
    transaction(1);
}
