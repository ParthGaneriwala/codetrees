public static void main(String[] args) {
    Graph g;
    boolean debug = false;
    JFrame frame = new JFrame();
    DelaunayTriangulator triangulator = new DelaunayTriangulator();
    if (debug) {
        AddAPointTriangulator aapt = new AddAPointTriangulator(AutoClustUtils.featureCollectionToNodeArray(createNodes()));
        frame.getContentPane().add(aapt);
    } else {
        triangulator.setNodeArray(AutoClustUtils.featureCollectionToNodeArray(createNodes()));
        g = triangulator.getTriangulation();
        try {
            FileWriter nodeWriter = new FileWriter("C:/jconley/diss/synthData/grid/delaunay/s100bw1bk0l4000p0nodes.csv");
            FileWriter edgeWriter = new FileWriter("C:/jconley/diss/synthData/grid/delaunay/s100bw1bk0l4000p0edges.csv");
            Iterator nodeIt = g.getNodes().iterator();
            while (nodeIt.hasNext()) {
                DelaunayNode next = (DelaunayNode) nodeIt.next();
                double x = next.getFeature().getDefaultGeometry().getCentroid().getX();
                double y = next.getFeature().getDefaultGeometry().getCentroid().getY();
                double pop = ((Double) next.getFeature().getAttribute("population")).doubleValue();
                double cases = ((Double) next.getFeature().getAttribute("target"));
                nodeWriter.write(x + "," + y + "," + pop + "," + cases + '\n');
            }
            Iterator edgeIt = g.getEdges().iterator();
            while (edgeIt.hasNext()) {
                DelaunayEdge next = (DelaunayEdge) edgeIt.next();
                double x1 = ((DelaunayNode) next.getNodeA()).getFeature().getDefaultGeometry().getCentroid().getX();
                double y1 = ((DelaunayNode) next.getNodeA()).getFeature().getDefaultGeometry().getCentroid().getY();
                double x2 = ((DelaunayNode) next.getNodeB()).getFeature().getDefaultGeometry().getCentroid().getX();
                double y2 = ((DelaunayNode) next.getNodeB()).getFeature().getDefaultGeometry().getCentroid().getY();
                edgeWriter.write(x1 + "," + y1 + "," + x2 + "," + y2 + '\n');
            }
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("Exception writing files: " + e.getMessage());
        }
        GraphViewer viewer = new GraphViewer();
        viewer.setGraph(g);
        frame.getContentPane().add(viewer);
    }
    // for debug purposes
    // System.out.println("long edges:");
    // java.util.Iterator edgeIt = g.getEdges().iterator();
    // while (edgeIt.hasNext()){
    // DelaunayEdge next = (DelaunayEdge) edgeIt.next();
    // if (next.getEuclideanDistance() > 50){
    // System.out.println(next.toString());
    // }
    // }
    // end debug
    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    frame.setSize(new Dimension(400, 400));
    frame.setVisible(true);
}
