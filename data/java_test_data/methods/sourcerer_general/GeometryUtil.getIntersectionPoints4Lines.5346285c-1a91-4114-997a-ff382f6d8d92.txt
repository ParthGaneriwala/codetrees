public static LineGroup[] getIntersectionPoints4Lines(Line[] lines) {
    debug("*****************************START SWEEP LINE*****************************");
    debug("SWEEP LINE INPUT " + Arrays.toString(lines));
    if (lines.length == 0) {
        return new LineGroup[0];
    }
    final Line[] backup = lines;
    lines = new Line[lines.length];
    for (int i = 0; i < backup.length; i++) {
        lines[i] = new Line(backup[i]);
    }
    final List<LineGroup> lgs = new ArrayList<LineGroup>();
    class PointItem {

        public static final int START_POINT = 0;

        public static final int END_POINT = 1;

        final int x, y;

        final Line line;

        final int type;

        public PointItem(int x, int y, Line line, int type) {
            super();
            this.x = x;
            this.y = y;
            this.line = line;
            this.type = type;
        }
    }
    // sort the start points according to x
    for (int i = 0; i < lines.length; i++) {
        Line line = lines[i];
        if (line.x1 > line.x2) {
            int temp = line.x1;
            line.x1 = line.x2;
            line.x2 = temp;
            temp = line.y1;
            line.y1 = line.y2;
            line.y2 = temp;
        }
    }
    List<PointItem> pis = new ArrayList<PointItem>();
    // sort the lines according to their start points' y values
    for (int i = 0; i < lines.length; i++) {
        Line l = lines[i];
        PointItem pi = new PointItem(l.x1, l.y1, l, PointItem.START_POINT);
        pis.add(pi);
        pi = new PointItem(l.x2, l.y2, l, PointItem.END_POINT);
        pis.add(pi);
    }
    for (int i = 0; i < pis.size() - 1; i++) {
        for (int j = i + 1; j < pis.size(); j++) {
            PointItem pi = pis.get(i);
            PointItem pj = pis.get(j);
            if (pi.x > pj.x) {
                pis.set(i, pj);
                pis.set(j, pi);
            }
        }
    }
    final List<Line> l = new ArrayList<Line>();
    for (int i = 0; i < pis.size(); i++) {
        final PointItem pi = pis.get(i);
        if (pi.type == PointItem.START_POINT) {
            // just put it in the line list with respect of y at x
            Line line = pi.line;
            l.add(line);
            Collections.sort(l, new Comparator<Line>() {

                public int compare(Line o1, Line o2) {
                    // TODO Auto-generated method stub
                    final int x = pi.x;
                    int y1 = 0;
                    int y2 = 0;
                    if (o1.x1 == o1.x2 && o2.x1 == o2.x2) {
                        return Math.min(o1.y1, o1.y2) - Math.min(o2.y1, o2.y2);
                    } else if (o1.x1 == o1.x2) {
                        y2 = fx(o2, x);
                        return Math.min(o1.y1, o1.y2) - y2;
                    } else if (o2.x1 == o2.x2) {
                        y1 = fx(o1, x);
                        return y1 - Math.min(o2.y1, o2.y2);
                    }
                    y1 = fx(o1, x);
                    y2 = fx(o2, x);
                    if (y1 == y2) {
                        // same start point
                        debug("START POINT INTERSECTION " + o1 + " AND " + o2 + " POINT [" + x + " , " + y1 + "]");
                        lgs.add(new LineGroup(o1, o2, x, y1));
                    }
                    return y1 - y2;
                }
            });
        } else {
            // check intersection if find put into line group
            final Line l1 = pi.line;
            final int x = pi.x;
            for (int j = 0; j < l.size(); j++) {
                final Line l2 = l.get(j);
                if (l2 != l1) {
                    Point[] ps = getIntersection2(l1, l2);
                    for (int k = 0; k < ps.length; k++) {
                        lgs.add(new LineGroup(l1, l2, ps[k]));
                    }
                // int sx = Math.max(l1.x1, l2.x1);
                // 
                // final int fxs1 = fx(l2, sx);
                // final int fxs2 = fx(l1 , sx);
                // 
                // final int fxe1 = fx(l2, x);
                // final int fxe2 = fx(l1 , x);
                // 
                // final int f = (fxs2 - fxs1) * (fxe2 - fxe1);
                // 
                // //now judge whether two lines have intersection points
                // 
                // if(f > 0){
                // //no intersection just move on
                // debug("NO INTERSECTION " + l2 + " AND " + l1);
                // }else if(f == 0){
                // //start point already dealt , just check the end point
                // if(fxe1 == fxe2){
                // debug("SAME END POINT " + l2 + " AND " + l1 + " POINT [" + l2.x2 + " , " + l1.y2 + "]");
                // lgs.add(new LineGroup(l2, l1, x , fxe1));
                // }
                // }else {
                // //trick part intersection of 2 segment
                // //							final Line l1 = line;
                // //							final Line l2 = lj;
                // 
                // //							int ix = ((l1.x2 - l1.x1) * (l2.x2 * l2.y1 - l2.x1 * l2.y2) - (l2.x2 - l2.x1) * (l1.x2 * l1.y1 - l1.x1 * l1.y2)) / ((l1.y2 - l1.y1) * (l2.x2 - l2.x1) - (l2.y2 - l2.y1) * (l1.x2 - l1.x1)) ;
                // //							int iy = (ix * (l1.y2 - l1.y1) + l1.x2 * l1.y1 - l1.x1 * l1.y2) / (l1.x2 - l1.x1);
                // 
                // org.cllib.data.Point p = getIntersection(l1, l2);
                // 
                // int ix = p.x;
                // int iy = p.y;
                // 
                // debug("INTERSECTION " + l1 + " AND " + l2 + " POINT [" + ix + " , " + iy + "]");
                // 
                // lgs.add(new LineGroup(l1, l2, ix , iy));
                // //							System.out.println("SIZE [" + lgs.size() + "]");
                // }
                }
            }
            l.remove(l1);
        }
    }
    // when reaching an end point find out the relationship of the lines
    // under control if their relative - relationship has changed they have intersection point
    // record it
    debug("*****************************END SWEEP LINE*****************************");
    // when all points are processed , done
    return lgs.toArray(new LineGroup[lgs.size()]);
}
