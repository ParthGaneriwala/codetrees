public void fromDHMS() {
    if (!(this.exponent >= 0 && this.mantissa != 0))
        return;
    boolean negative = (this.sign != 0);
    abs();
    int Y, M, D, m;
    long h;
    h = toLong();
    frac();
    tmp1.assign(100);
    mul(tmp1);
    m = toInteger();
    frac();
    mul(tmp1);
    // MAGIC ROUNDING: Check if we are 2**-10 second short of 100 seconds
    // i.e. "seconds" > 99.999
    {
        tmp2.mantissa = ONE.mantissa;
        tmp2.exponent = ONE.exponent;
        tmp2.sign = ONE.sign;
    }
    ;
    tmp2.scalbn(-10);
    add(tmp2);
    if (this.compare(tmp1) >= 0) {
        // Yes. So set zero secs instead and carry over to mins and hours
        {
            this.mantissa = ZERO.mantissa;
            this.exponent = ZERO.exponent;
            this.sign = ZERO.sign;
        }
        ;
        m++;
        if (m >= 100) {
            m -= 100;
            h++;
        }
    // Phew! That was close. From now on it is integer arithmetic...
    } else {
        // Nope. So try to undo the damage...
        sub(tmp2);
    }
    D = (int) (h / 100);
    h %= 100;
    if (D >= 10000) {
        M = D / 100;
        D %= 100;
        if (D == 0)
            D = 1;
        Y = M / 100;
        M %= 100;
        if (M == 0)
            M = 1;
        D = gregorian_to_jd(Y, M, D);
    }
    add(m * 60);
    div(3600);
    tmp1.assign(D * 24L + h);
    add(tmp1);
    if (negative)
        neg();
}
