public boolean remove(DockNode node, int pos) {
    DockNode child, first = null, second = null, parent = null;
    DockSplitter splitter;
    int index, size;
    int oldW, oldH;
    boolean middle = false, rval = false, collapse = false;
    assert (pos == 0 || pos == 1);
    /*
         * Easy, special case for the root leaf node.
         */
    if (node == tree.root) {
        assert (node.type == Dock.DOCK_LEAF);
        tree.root = null;
        this.repaint();
    } else if (node.type != Dock.DOCK_INODE) {
        /*
             * For now, we will be restricting node removals to only leaf nodes.
             */
        parent = node.getParent();
        assert (parent != null);
        assert (parent.children.size() >= 2);
        index = parent.children.indexOf(node);
        size = parent.children.size();
        if (index == 0) {
            parent.removeSplitter(0);
            first = (DockNode) parent.children.get(1);
        } else if (index == size - 1) {
            parent.removeSplitter(index - 1);
            second = (DockNode) parent.children.get(size - 2);
        } else {
            assert (parent.children.size() > 2);
            parent.removeSplitter(index);
            parent.removeSplitter(index - 1);
            first = (DockNode) parent.children.get(index - 1);
            second = (DockNode) parent.children.get(index + 1);
            middle = true;
        }
        oldW = node.w;
        oldH = node.h;
        parent.removeChild(node);
        /* 
             * Get the left and right of 'node' in case of 'middle' and then add 
             * splitters between them 
             */
        if (middle) {
            splitter = new DockSplitter();
            parent.addSplitter(first, second, splitter);
        }
        /*
             * If either 'middle' or (size > 2) then do bounds adjustment based 
             * on the 'position' value.
             */
        if (middle) {
            if (parent.orientation == Dock.DOCK_H) {
                if (pos == 0) {
                    first.setBoundsLinear(first.x, first.y, first.w, first.h + oldH);
                } else if (pos == 1) {
                    second.setBoundsLinear(second.x, second.y - oldH, second.w, second.h + oldH);
                }
            } else if (parent.orientation == Dock.DOCK_V) {
                if (pos == 0) {
                    first.setBoundsLinear(first.x, first.y, first.w + oldW, first.h);
                } else if (pos == 1) {
                    second.setBoundsLinear(second.x - oldW, second.y, second.w + oldW, second.h);
                }
            }
        } else if (size > 2) {
            /*
                 * 'pos' value does not come into the picture here since there 
                 * is only one node to resize.
                 */
            if (index == 0) {
                if (parent.orientation == Dock.DOCK_H) {
                    first.setBoundsLinear(first.x, first.y - oldH, first.w, first.h + oldH);
                } else if (parent.orientation == Dock.DOCK_V) {
                    first.setBoundsLinear(first.x - oldW, first.y, first.w + oldW, first.h);
                }
            } else if (index == size - 1) {
                if (parent.orientation == Dock.DOCK_H) {
                    second.setBoundsLinear(second.x, second.y, second.w, second.h + oldH);
                } else if (parent.orientation == Dock.DOCK_V) {
                    second.setBoundsLinear(second.x, second.y, second.w + oldW, second.h);
                }
            } else {
                assert (false);
            }
        }
        /*
             * If we have a case where the parent originally had two children
             * and now, as a result of the remove, has only one, then we need to
             * collapse the single child of the parent into the parent node
             * itself.
             */
        if (parent.children.size() == 1) {
            child = (DockNode) parent.children.get(0);
            rval = collapse(parent, child);
            collapse = true;
        }
    } else {
        /*
             * Do not allow inode removals
             */
        assert (false);
    }
    /*
         * Last, but not least, remove the physical component from the dock, the 
         * VDockNode from the leaves list, and sync everything
         */
    this.remove(node.component);
    this.leaves.remove(node);
    this.sync();
    return rval;
}
