public void sendFile(String filename, int mode, InputStream input, InetAddress host, int port) throws IOException {
    int bytesRead, timeouts, lastBlock, block, hostPort, dataLength, offset, totalThisPacket;
    TFTPPacket sent, received = null;
    TFTPErrorPacket error;
    TFTPDataPacket data = new TFTPDataPacket(host, port, 0, _sendBuffer, 4, 0);
    TFTPAckPacket ack;
    boolean justStarted = true;
    beginBufferedOps();
    dataLength = lastBlock = hostPort = bytesRead = totalThisPacket = 0;
    block = 0;
    boolean lastAckWait = false;
    if (mode == TFTP.ASCII_MODE)
        input = new ToNetASCIIInputStream(input);
    sent = new TFTPWriteRequestPacket(host, port, filename, mode);
    _sendPacket: do {
        // first time: block is 0, lastBlock is 0, send a request packet.
        // subsequent: block is integer starting at 1, send data packet.
        bufferedSend(sent);
        // this is trying to receive an ACK
        _receivePacket: while (true) {
            timeouts = 0;
            while (timeouts < __maxTimeouts) {
                try {
                    received = bufferedReceive();
                    break;
                } catch (SocketException e) {
                    if (++timeouts >= __maxTimeouts) {
                        endBufferedOps();
                        throw new IOException("Connection timed out.");
                    }
                    continue;
                } catch (InterruptedIOException e) {
                    if (++timeouts >= __maxTimeouts) {
                        endBufferedOps();
                        throw new IOException("Connection timed out.");
                    }
                    continue;
                } catch (TFTPPacketException e) {
                    endBufferedOps();
                    throw new IOException("Bad packet: " + e.getMessage());
                }
            }
            // answering host address (for hosts with multiple IPs)
            if (justStarted) {
                justStarted = false;
                hostPort = received.getPort();
                data.setPort(hostPort);
                if (!host.equals(received.getAddress())) {
                    host = received.getAddress();
                    data.setAddress(host);
                    sent.setAddress(host);
                }
            }
            // should be sent to originator if unexpected TID or host.
            if (host.equals(received.getAddress()) && received.getPort() == hostPort) {
                switch(received.getType()) {
                    case TFTPPacket.ERROR:
                        error = (TFTPErrorPacket) received;
                        endBufferedOps();
                        throw new IOException("Error code " + error.getError() + " received: " + error.getMessage());
                    case TFTPPacket.ACKNOWLEDGEMENT:
                        ack = (TFTPAckPacket) received;
                        lastBlock = ack.getBlockNumber();
                        if (lastBlock == block) {
                            ++block;
                            if (block > 65535) {
                                // wrap the block number
                                block = 0;
                            }
                            if (lastAckWait) {
                                break _sendPacket;
                            } else {
                                break _receivePacket;
                            }
                        } else {
                            discardPackets();
                            if (lastBlock == (block == 0 ? 65535 : (block - 1)))
                                // Resend last acknowledgement.
                                continue _sendPacket;
                            // Start fetching packets again.
                            continue _receivePacket;
                        }
                    default:
                        endBufferedOps();
                        throw new IOException("Received unexpected packet type.");
                }
            } else {
                error = new TFTPErrorPacket(received.getAddress(), received.getPort(), TFTPErrorPacket.UNKNOWN_TID, "Unexpected host or port.");
                bufferedSend(error);
                continue _sendPacket;
            }
        // We should never get here, but this is a safety to avoid
        // infinite loop.  If only Java had the goto statement.
        // break;
        }
        // OK, we have just gotten ACK about the last data we sent. Make another
        // and send it
        dataLength = TFTPPacket.SEGMENT_SIZE;
        offset = 4;
        totalThisPacket = 0;
        while (dataLength > 0 && (bytesRead = input.read(_sendBuffer, offset, dataLength)) > 0) {
            offset += bytesRead;
            dataLength -= bytesRead;
            totalThisPacket += bytesRead;
        }
        if (totalThisPacket < TFTPPacket.SEGMENT_SIZE) {
            /* this will be our last packet -- send, wait for ack, stop */
            lastAckWait = true;
        }
        data.setBlockNumber(block);
        data.setData(_sendBuffer, 4, totalThisPacket);
        sent = data;
    } while (totalThisPacket > 0 || lastAckWait);
    // Note: this was looping while dataLength == 0 || lastAckWait,
    // which was discarding the last packet if it was not full size
    // Should send the packet.
    endBufferedOps();
}
