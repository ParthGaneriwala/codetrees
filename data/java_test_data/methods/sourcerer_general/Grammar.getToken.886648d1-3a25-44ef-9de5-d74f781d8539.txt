public final Token getToken() throws ParseException {
    switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
        case 0:
            jj_consume_token(0);
            break;
        case IF:
            jj_consume_token(IF);
            break;
        case ELSE:
            jj_consume_token(ELSE);
            break;
        case WHILE:
            jj_consume_token(WHILE);
            break;
        case SOP:
            jj_consume_token(SOP);
            break;
        case CLASS:
            jj_consume_token(CLASS);
            break;
        case PUBLIC:
            jj_consume_token(PUBLIC);
            break;
        case STATIC:
            jj_consume_token(STATIC);
            break;
        case VOID:
            jj_consume_token(VOID);
            break;
        case MAIN:
            jj_consume_token(MAIN);
            break;
        case STRING:
            jj_consume_token(STRING);
            break;
        case EXTENDS:
            jj_consume_token(EXTENDS);
            break;
        case RETURN:
            jj_consume_token(RETURN);
            break;
        case INT:
            jj_consume_token(INT);
            break;
        case BOOLEAN:
            jj_consume_token(BOOLEAN);
            break;
        case LENGTH:
            jj_consume_token(LENGTH);
            break;
        case TRUE:
            jj_consume_token(TRUE);
            break;
        case FALSE:
            jj_consume_token(FALSE);
            break;
        case THIS:
            jj_consume_token(THIS);
            break;
        case NEW:
            jj_consume_token(NEW);
            break;
        case DOT:
            jj_consume_token(DOT);
            break;
        case SEMICOLON:
            jj_consume_token(SEMICOLON);
            break;
        case COMMA:
            jj_consume_token(COMMA);
            break;
        case EXCL:
            jj_consume_token(EXCL);
            break;
        case ASSIGN:
            jj_consume_token(ASSIGN);
            break;
        case BRACE_L:
            jj_consume_token(BRACE_L);
            break;
        case BRACE_R:
            jj_consume_token(BRACE_R);
            break;
        case PAREN_L:
            jj_consume_token(PAREN_L);
            break;
        case PAREN_R:
            jj_consume_token(PAREN_R);
            break;
        case BRACKET_L:
            jj_consume_token(BRACKET_L);
            break;
        case BRACKET_R:
            jj_consume_token(BRACKET_R);
            break;
        case SUM:
            jj_consume_token(SUM);
            break;
        case SUB:
            jj_consume_token(SUB);
            break;
        case MULTI:
            jj_consume_token(MULTI);
            break;
        case LESSTHAN:
            jj_consume_token(LESSTHAN);
            break;
        case AND:
            jj_consume_token(AND);
            break;
        case UNDERSCORE:
            jj_consume_token(UNDERSCORE);
            break;
        case ID:
            jj_consume_token(ID);
            break;
        case NUM:
            jj_consume_token(NUM);
            break;
        case REAL:
            jj_consume_token(REAL);
            break;
        case ERR:
            jj_consume_token(ERR);
            break;
        default:
            jj_la1[0] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
    }
    {
        if (true)
            return this.token;
    }
    throw new Error("Missing return statement in function");
}
