public void testOther2() throws Exception {
    // Comments
    TokenStream ts = getNonfilteringLexerFor("/* multiline */   // single line");
    LocatableToken token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.ML_COMMENT, token.getType());
    assertEquals("/* multiline */", token.getText());
    token = (LocatableToken) ts.nextToken();
    // Note this fails with the old lexer (whch filters SL_COMMENTs):
    assertEquals(JavaTokenTypes.SL_COMMENT, token.getType());
    assertEquals(19, token.getColumn());
    assertEquals(1, token.getLine());
    assertEquals(33, token.getEndColumn());
    assertEquals(1, token.getEndLine());
    // Make sure single line comment terminates
    ts = getNonfilteringLexerFor("// single line comment\n  an_identifier");
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.SL_COMMENT, token.getType());
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.IDENT, token.getType());
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.EOF, token.getType());
    // Simple EOF
    ts = getNonfilteringLexerFor("");
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.EOF, token.getType());
    assertEquals(1, token.getColumn());
    assertEquals(1, token.getLine());
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.EOF, token.getType());
    assertEquals(1, token.getColumn());
    assertEquals(1, token.getLine());
}
