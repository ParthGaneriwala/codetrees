public static void populateUserProfiles(Connection db) throws SQLException {
    // Determine the category id
    ProjectCategoryList projectCategoryList = new ProjectCategoryList();
    projectCategoryList.setCategoryDescription("People");
    projectCategoryList.buildList(db);
    ProjectCategory people = projectCategoryList.getFromValue("People");
    // Wiki
    WikiTemplateList wikiTemplateList = new WikiTemplateList();
    wikiTemplateList.setProjectCategoryId(people.getId());
    wikiTemplateList.buildList(db);
    // Document Folders
    DocumentFolderTemplateList folderTemplateList = new DocumentFolderTemplateList();
    folderTemplateList.setProjectCategoryId(people.getId());
    folderTemplateList.buildList(db);
    // Discussion Forums
    DiscussionForumTemplateList forumTemplateList = new DiscussionForumTemplateList();
    forumTemplateList.setProjectCategoryId(people.getId());
    forumTemplateList.buildList(db);
    // Lists
    ListsTemplateList listTemplateList = new ListsTemplateList();
    listTemplateList.setProjectCategoryId(people.getId());
    listTemplateList.buildList(db);
    // Page through the updates just in case there are lots of users do 100 at a time...
    PagedListInfo pagedListInfo = new PagedListInfo();
    pagedListInfo.setItemsPerPage(100);
    pagedListInfo.setDefaultSort("project_id", null);
    // Build the records
    ProjectList projectList = new ProjectList();
    projectList.setPagedListInfo(pagedListInfo);
    projectList.setCategoryId(people.getId());
    projectList.buildList(db);
    while (projectList.size() > 0) {
        LOG.debug(" Page: " + pagedListInfo.getPage() + " of " + pagedListInfo.getNumberOfPages());
        for (Project project : projectList) {
            // Check to see if wiki needs to be added
            for (WikiTemplate template : wikiTemplateList) {
                String wikiSubject = template.getTitle();
                if ("Home".equals(wikiSubject)) {
                    wikiSubject = "";
                }
                Wiki thisWiki = WikiList.queryBySubject(db, wikiSubject, project.getId());
                if (thisWiki.getId() == -1) {
                    // Insert the wiki
                    Wiki wiki = new Wiki();
                    wiki.setProjectId(project.getId());
                    wiki.setSubject(wikiSubject);
                    wiki.setContent(template.getContent());
                    wiki.setEnteredBy(project.getModifiedBy());
                    wiki.setModifiedBy(project.getModifiedBy());
                    wiki.setTemplateId(template.getId());
                    wiki.insert(db);
                }
            }
            // Check to see if folders need to be added
            FileFolderList fileFolderList = new FileFolderList();
            fileFolderList.setLinkModuleId(Constants.PROJECTS_FILES);
            fileFolderList.setLinkItemId(project.getId());
            fileFolderList.buildList(db);
            if (fileFolderList.size() == 0) {
                for (DocumentFolderTemplate template : folderTemplateList) {
                    ArrayList<String> folderNames = template.getFolderNamesArrayList();
                    for (String folderName : folderNames) {
                        FileFolder fileFolder = new FileFolder();
                        fileFolder.setLinkModuleId(Constants.PROJECTS_FILES);
                        fileFolder.setLinkItemId(project.getId());
                        fileFolder.setSubject(folderName);
                        fileFolder.setEnteredBy(project.getModifiedBy());
                        fileFolder.setModifiedBy(project.getModifiedBy());
                        fileFolder.insert(db);
                    }
                }
            }
            // Check to see if forums need to be added
            ForumList forumList = new ForumList();
            forumList.setProjectId(project.getId());
            forumList.buildList(db);
            if (forumList.size() == 0) {
                for (DiscussionForumTemplate template : forumTemplateList) {
                    ArrayList<String> folderNames = template.getForumNamesArrayList();
                    for (String forumName : folderNames) {
                        Forum forum = new Forum();
                        forum.setAllowFileAttachments(true);
                        forum.setEnabled(true);
                        forum.setProjectId(project.getId());
                        forum.setSubject(forumName);
                        forum.setEnteredBy(project.getModifiedBy());
                        forum.setModifiedBy(project.getModifiedBy());
                        forum.insert(db);
                    }
                }
            }
            // Check to see if lists need to be added
            TaskCategoryList lists = new TaskCategoryList();
            lists.setProjectId(project.getId());
            lists.buildList(db);
            if (lists.size() == 0) {
                int level = 0;
                for (ListsTemplate template : listTemplateList) {
                    ArrayList<String> listNames = template.getListNamesArrayList();
                    for (String listName : listNames) {
                        TaskCategory newCategory = new TaskCategory();
                        newCategory.setLinkModuleId(Constants.TASK_CATEGORY_PROJECTS);
                        newCategory.setLinkItemId(project.getId());
                        newCategory.setDescription(listName);
                        level = level + 10;
                        newCategory.setLevel(level);
                        newCategory.insert(db);
                    }
                }
            }
        }
        // Always reset the list or else the records are included on buildList again
        projectList.clear();
        if (pagedListInfo.getPage() < pagedListInfo.getNumberOfPages()) {
            pagedListInfo.setCurrentPage(pagedListInfo.getPage() + 1);
            projectList.buildList(db);
        }
    }
}
