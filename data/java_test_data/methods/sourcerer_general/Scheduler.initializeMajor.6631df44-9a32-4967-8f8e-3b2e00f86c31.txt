private void initializeMajor(Major major, Major gfr, Minor minor) {
    required = new PriorityQueue<SchedulerCourse>();
    gfrs = new PriorityQueue<SchedulerCourse>();
    ArrayList<SchedulerCourse> requiredArray = new ArrayList<SchedulerCourse>();
    ArrayList<SchedulerCourse> gfrArray = new ArrayList<SchedulerCourse>();
    // CreateDummyData myDummy = new CreateDummyData();									//test
    Set<RequirementGrouping> requiredGroup = null;
    Set<RequirementGrouping> minorGroup = null;
    Set<RequirementGrouping> GFRgroup = null;
    // Gets requirement groupings from database based on a specific major
    if (major != null)
        requiredGroup = major.getRequirementGroupings();
    if (minor != null)
        minorGroup = minor.getRequirementGroupings();
    if (gfr != null)
        GFRgroup = gfr.getRequirementGroupings();
    // Separates required courses and GFR courses  need to create multiples based on credits required
    if (requiredGroup != null)
        for (RequirementGrouping myReqGrouping : requiredGroup) {
            SchedulerCourse schedulerCourse = new SchedulerCourse(myReqGrouping);
            for (int x = 0; x < schedulerCourse.numOfCoursesRequired; x++) requiredArray.add(schedulerCourse);
        }
    // minor
    if (minorGroup != null)
        for (RequirementGrouping myReqGrouping : minorGroup) {
            SchedulerCourse schedulerCourse = new SchedulerCourse(myReqGrouping);
            for (int x = 0; x < schedulerCourse.numOfCoursesRequired; x++) requiredArray.add(schedulerCourse);
        }
    // GFRs
    if (GFRgroup != null)
        for (RequirementGrouping myGFRGrouping : GFRgroup) {
            SchedulerCourse schedulerCourse = new SchedulerCourse(myGFRGrouping);
            for (int x = 0; x < schedulerCourse.numOfCoursesRequired; x++) gfrArray.add(schedulerCourse);
        }
    // setup full prerequisites-------------------------------
    for (SchedulerCourse myCourse : requiredArray) starterPrereq(myCourse);
    for (SchedulerCourse myCourse : gfrArray) starterPrereq(myCourse);
    // setup priorities----------------------------------------
    for (SchedulerCourse myCourse : requiredArray) {
        myCourse.priority = setUpPriority(myCourse, requiredArray, gfrArray);
        // Gives more priority to lower level classes (an attempt at making a more even schedule)
        if (!myCourse.isGrouping) {
            if (myCourse.courseNum.charAt(0) == '1')
                myCourse.priority = myCourse.priority + 3;
            else if (myCourse.courseNum.charAt(0) == '2')
                myCourse.priority = myCourse.priority + 2;
            else if (myCourse.courseNum.charAt(0) == '3')
                myCourse.priority = myCourse.priority + 1;
        }
    }
    for (SchedulerCourse myCourse : gfrArray) {
        myCourse.priority = setUpPriority(myCourse, requiredArray, gfrArray);
        // Gives more priority to lower level classes (an attempt at making a more even schedule)
        if (!myCourse.isGrouping) {
            if (myCourse.courseNum.charAt(0) == '1')
                myCourse.priority = myCourse.priority + 3;
            else if (myCourse.courseNum.charAt(0) == '2')
                myCourse.priority = myCourse.priority + 2;
            else if (myCourse.courseNum.charAt(0) == '3')
                myCourse.priority = myCourse.priority + 1;
        }
    }
    // add to priority queues based on priorities-----------------------
    for (SchedulerCourse myCourse : requiredArray) {
        System.out.println(myCourse);
        required.add(myCourse);
    }
    for (SchedulerCourse myCourse : gfrArray) {
        System.out.println(myCourse);
        gfrs.add(myCourse);
    }
}
