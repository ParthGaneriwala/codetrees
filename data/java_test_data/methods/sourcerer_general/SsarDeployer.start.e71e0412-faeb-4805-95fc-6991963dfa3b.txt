public void start(DeploymentInfo di) throws DeploymentException {
    try {
        String warUrl = di.url.toString();
        Log.debug("deploying webapp at " + warUrl);
        try {
            if (_deployed.get(warUrl) != null)
                throw new DeploymentException(warUrl + " is already deployed");
            // make a context for the webapp and configure it from the jetty jboss-service.xml defaults
            // and the jboss-web.xml descriptor
            JBossSipAppContext app = new JBossSipAppContext(di, warUrl);
            // In case of directory, there is a '/' after .ssar.
            int index1 = warUrl.lastIndexOf('/', warUrl.length() - 4);
            int index2 = warUrl.lastIndexOf(".ssar");
            String contextPath = warUrl.substring(index1, index2);
            app.setContextPath(contextPath);
            URL webXml = di.localCl.findResource("WEB-INF/web.xml");
            if (webXml != null) {
                app.setConfigurationClasses(new String[] { "org.mortbay.jetty.webapp.WebInfConfiguration", "org.cipango.jboss.JBossWebXmlConfiguration", "org.mortbay.jetty.webapp.JettyWebXmlConfiguration", "org.mortbay.jetty.webapp.TagLibConfiguration", "org.cipango.jboss.JBossSipXmlConfiguration" });
            } else {
                app.setConfigurationClasses(new String[] { "org.mortbay.jetty.webapp.WebInfConfiguration", "org.cipango.jboss.JBossSipXmlConfiguration" });
            }
            app.setExtractWAR(_service.getUnpackWars());
            app.setParentLoaderPriority(_service.getJava2ClassLoadingCompliance());
            // as the jboss webservice client tests seem to use these invalid urls
            if (Log.isDebugEnabled())
                Log.debug("Allowing non-trailing '/' on context path");
            app.setAllowNullPathInfo(true);
            // if a different webdefault.xml file has been provided, use it
            if (_service.getWebDefaultResource() != null) {
                try {
                    URL url = getClass().getClassLoader().getResource(_service.getWebDefaultResource());
                    String fixedUrl = (fixURL(url.toString()));
                    app.setDefaultsDescriptor(fixedUrl);
                    if (Log.isDebugEnabled())
                        Log.debug("webdefault specification is: " + _service.getWebDefaultResource());
                } catch (Exception e) {
                    Log.warn("Could not find resource: " + _service.getWebDefaultResource() + " using default", e);
                }
            }
            // Add the webapp to jetty
            _contexts.addHandler(app);
            // handler just added
            if (_contexts.isStarted())
                app.start();
            // keep track of deployed contexts for undeployment
            _deployed.put(warUrl, app);
            // tell jboss about the jsr77 mbeans we've created
            // first check that there is an mbean for the webapp itself
            ObjectName webAppMBean = new ObjectName(CipangoService.MBEAN_DOMAIN + ":J2EEServer=none,J2EEApplication=none,J2EEWebModule=" + app.getUniqueName());
            if (server.isRegistered(webAppMBean)) {
                di.deployedObject = webAppMBean;
            } else {
                throw new IllegalStateException("No mbean registered for webapp at " + app.getUniqueName());
            }
            // now get all the mbeans that represent servlets and set them on the
            // deployment info so they will be found by the jsr77 management system
            ObjectName servletQuery = new ObjectName(CipangoService.MBEAN_DOMAIN + ":J2EEServer=none,J2EEApplication=none,J2EEWebModule=" + app.getUniqueName() + ",j2eeType=Servlet,*");
            Iterator iterator = server.queryNames(servletQuery, null).iterator();
            while (iterator.hasNext()) {
                di.mbeans.add(iterator.next());
            }
        } catch (Exception e) {
            Log.warn("Undeploying on start due to error", e);
            throw new DeploymentException(e);
        }
    } catch (Exception ex) {
        throw new DeploymentException(ex);
    }
    super.start(di);
}
