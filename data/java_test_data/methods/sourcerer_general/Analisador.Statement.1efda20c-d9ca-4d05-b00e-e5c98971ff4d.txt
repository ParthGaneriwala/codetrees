public static final Statement Statement() throws ParseException {
    Statement s;
    StatementList s1 = new StatementList();
    Exp expressao;
    Statement sentenca1;
    Statement sentenca2;
    If operadorIf;
    While operadorWhile;
    Print operadorPrint;
    Identifier id;
    Assign operadorAtribuicao;
    Exp expressao2;
    ArrayAssign operadorAtribuicaoArray;
    switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
        case CE:
            jj_consume_token(CE);
            label_6: while (true) {
                switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case IF:
                    case WHILE:
                    case SYSTEMOUTPRINTLN:
                    case CE:
                    case ID:
                        ;
                        break;
                    default:
                        jj_la1[12] = jj_gen;
                        break label_6;
                }
                s = Statement();
                s1.addElement(s);
            }
            jj_consume_token(CD);
            {
                if (true)
                    return new Block(s1);
            }
            break;
        case IF:
            jj_consume_token(IF);
            jj_consume_token(PE);
            expressao = Exp();
            jj_consume_token(PD);
            sentenca1 = Statement();
            jj_consume_token(ELSE);
            sentenca2 = Statement();
            operadorIf = new If(expressao, sentenca1, sentenca2);
            {
                if (true)
                    return (operadorIf);
            }
            break;
        case WHILE:
            jj_consume_token(WHILE);
            jj_consume_token(PE);
            expressao = Exp();
            jj_consume_token(PD);
            sentenca1 = Statement();
            operadorWhile = new While(expressao, sentenca1);
            {
                if (true)
                    return (operadorWhile);
            }
            break;
        case SYSTEMOUTPRINTLN:
            jj_consume_token(SYSTEMOUTPRINTLN);
            jj_consume_token(PE);
            expressao = Exp();
            jj_consume_token(PD);
            jj_consume_token(PVIR);
            operadorPrint = new Print(expressao);
            {
                if (true)
                    return (operadorPrint);
            }
            break;
        default:
            jj_la1[13] = jj_gen;
            if (jj_2_4(2)) {
                id = ID();
                jj_consume_token(ATR);
                expressao = Exp();
                jj_consume_token(PVIR);
                operadorAtribuicao = new Assign(id, expressao);
                {
                    if (true)
                        return (operadorAtribuicao);
                }
            } else {
                switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case ID:
                        id = ID();
                        jj_consume_token(CHE);
                        expressao = Exp();
                        jj_consume_token(CHD);
                        jj_consume_token(ATR);
                        expressao2 = Exp();
                        jj_consume_token(PVIR);
                        operadorAtribuicaoArray = new ArrayAssign(id, expressao, expressao2);
                        {
                            if (true)
                                return (operadorAtribuicaoArray);
                        }
                        break;
                    default:
                        jj_la1[14] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
            }
    }
    throw new Error("Missing return statement in function");
}
