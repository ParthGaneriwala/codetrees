public List getPosts(String filterTag, Date date, String url) {
    clearResultMetaInformation();
    List posts = new ArrayList();
    StringBuffer result = new StringBuffer();
    GetMethod get = new GetMethod(apiEndpoint + DeliciousConstants.POSTS_GET);
    get.setDoAuthentication(true);
    List params = new ArrayList();
    if (!DeliciousUtils.checkNullOrBlank(filterTag)) {
        NameValuePair tag = new NameValuePair(DeliciousConstants.TAG_PARAMETER, filterTag);
        params.add(tag);
    }
    if (date != null) {
        NameValuePair dt = new NameValuePair(DeliciousConstants.DT_PARAMETER, DeliciousUtils.getDeliciousDate(date));
        params.add(dt);
    }
    if (!DeliciousUtils.checkNullOrBlank(url)) {
        NameValuePair urlParam = new NameValuePair(DeliciousConstants.URL_PARAMETER, url);
        params.add(urlParam);
    }
    if (params.size() > 0) {
        get.setQueryString((NameValuePair[]) params.toArray(new NameValuePair[params.size()]));
    }
    try {
        httpResult = httpClient.executeMethod(get);
        checkNotAuthorized(httpResult);
        logger.debug("Result: " + httpResult);
        if (get.getResponseBodyAsStream() != null) {
            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(get.getResponseBodyAsStream(), DeliciousUtils.UTF_8));
            String input;
            while ((input = bufferedReader.readLine()) != null) {
                result.append(input).append(DeliciousUtils.LINE_SEPARATOR);
            }
            get.releaseConnection();
            Document document = documentBuilder.parse(new InputSource(new StringReader(result.toString())));
            NodeList postItems = document.getElementsByTagName(DeliciousConstants.POST_TAG);
            if (postItems != null && postItems.getLength() > 0) {
                for (int i = 0; i < postItems.getLength(); i++) {
                    Node postItem = postItems.item(i);
                    Post post;
                    String href = postItem.getAttributes().getNamedItem(DeliciousConstants.HREF_ATTRIBUTE).getNodeValue();
                    String description = postItem.getAttributes().getNamedItem(DeliciousConstants.DESCRIPTION_ATTRIBUTE).getNodeValue();
                    String hash = postItem.getAttributes().getNamedItem(DeliciousConstants.HASH_ATTRIBUTE).getNodeValue();
                    String tag = postItem.getAttributes().getNamedItem(DeliciousConstants.TAG_ATTRIBUTE).getNodeValue();
                    String time = postItem.getAttributes().getNamedItem(DeliciousConstants.TIME_ATTRIBUTE).getNodeValue();
                    String extended = null;
                    if (postItem.getAttributes().getNamedItem(DeliciousConstants.EXTENDED_ATTRIBUTE) != null) {
                        extended = postItem.getAttributes().getNamedItem(DeliciousConstants.EXTENDED_ATTRIBUTE).getNodeValue();
                    }
                    boolean shared = true;
                    if (postItem.getAttributes().getNamedItem(DeliciousConstants.SHARED_PARAMETER) != null) {
                        shared = Boolean.valueOf(postItem.getAttributes().getNamedItem(DeliciousConstants.SHARED_PARAMETER).getNodeValue()).booleanValue();
                    }
                    post = new Post(href, description, extended, hash, tag, time, shared);
                    posts.add(post);
                }
            }
        }
    } catch (IOException e) {
        logger.error(e);
    } catch (SAXException e) {
        logger.error(e);
        throw new DeliciousException("Response parsing error", e);
    }
    return posts;
}
