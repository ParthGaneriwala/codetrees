public static void main(String[] argv) throws Exception {
    if (argv.length != 5) {
        System.out.println("Usage: monitor <host> <user> <password> <mbox> <freq>");
        System.exit(1);
    }
    System.out.println("\nTesting monitor\n");
    try {
        Security.addProvider(new com.sun.net.ssl.internal.ssl.Provider());
        Properties props = System.getProperties();
        final String SSL_FACTORY = "javax.net.ssl.SSLSocketFactory";
        // IMAP provider
        props.setProperty("mail.imap.socketFactory.class", SSL_FACTORY);
        // POP3 provider
        props.setProperty("mail.pop3.socketFactory.class", SSL_FACTORY);
        // NNTP provider (if any)
        // props.setProperty( "mail.nntp.socketFactory.class", SSL_FACTORY);
        // IMAP provider
        props.setProperty("mail.imap.socketFactory.fallback", "false");
        // POP3 provider
        props.setProperty("mail.pop3.socketFactory.fallback", "false");
        // NNTP provider (if any)
        // props.setProperty( "mail.nntp.socketFactory.fallback", "false");
        // IMAP provider
        props.setProperty("mail.imap.port", "993");
        props.setProperty("mail.imap.socketFactory.port", "993");
        // POP3 provider
        props.setProperty("mail.pop3.port", "995");
        props.setProperty("mail.pop3.socketFactory.port", "995");
        // NNTP provider (if any)
        // props.setProperty( "mail.pop3.port", "563");
        // props.setProperty( "mail.pop3.socketFactory.port", "563");
        // Get a Session object
        Session session = Session.getInstance(props, null);
        // session.setDebug(true);
        // Get a Store object
        Store store = session.getStore("imap");
        // Connect
        store.connect(argv[0], argv[1], argv[2]);
        System.out.println("Conecto !!!");
        // Open a Folder
        Folder folder = store.getFolder("INBOX");
        if (folder == null || !folder.exists()) {
            System.out.println("Invalid folder");
            System.exit(1);
        }
        for (Folder folder1 : store.getDefaultFolder().list()) {
            System.out.println("Folder1 " + folder1.getFullName());
        }
        System.out.println("Folder exists " + folder.getFullName());
        folder.open(Folder.READ_ONLY);
        // Add messageCountListener to listen for new messages
        folder.addMessageCountListener(new MessageCountAdapter() {

            public void messagesAdded(MessageCountEvent ev) {
                Message[] msgs = ev.getMessages();
                System.out.println("Got " + msgs.length + " new messages");
                // Just dump out the new messages
                for (Message msg : msgs) {
                    try {
                        System.out.println("-----");
                        System.out.println("Message " + msg.getMessageNumber() + ":");
                        System.out.println("(MailListenerService) Description : " + msg.getSubject());
                    } catch (MessagingException mex) {
                        mex.printStackTrace();
                    }
                }
            }
        });
        // Check mail once in "freq" MILLIseconds
        int freq = Integer.parseInt(argv[4]);
        boolean supportsIdle = false;
        try {
            if (folder instanceof IMAPFolder) {
                IMAPFolder f = (IMAPFolder) folder;
                f.idle();
                supportsIdle = true;
            } else {
                System.out.println("Not ImapFolder");
            }
        } catch (FolderClosedException fex) {
            throw fex;
        } catch (MessagingException mex) {
            supportsIdle = false;
        }
        final boolean b = true;
        while (b) {
            if (supportsIdle && folder instanceof IMAPFolder) {
                IMAPFolder f = (IMAPFolder) folder;
                f.idle();
                System.out.println("IDLE done");
            } else {
                // sleep for freq milliseconds
                Thread.sleep(freq);
                // This is to force the IMAP server to send us
                // EXISTS notifications.
                folder.getMessageCount();
            }
        }
    } catch (Exception ex) {
        ex.printStackTrace();
    }
}
