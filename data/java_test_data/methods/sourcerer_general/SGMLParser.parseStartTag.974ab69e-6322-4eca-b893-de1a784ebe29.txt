int parseStartTag(int i) throws SGMLParserException {
    starttag_text = null;
    int start_pos = i;
    String buf = rawdata;
    Matcher matcher = SHORTTAGOPEN.matcher(buf);
    if (matcher.find(i)) {
        // SGML shorthand: <tag/data/ == <tag>data</tag>
        // XXX Can data contain &... (entity or char refs)?
        // XXX Can data contain < or > (tag characters)?
        // XXX Can there be whitespace before the first /?
        matcher = SHORTTAG.matcher(buf);
        if (!matcher.find(i))
            return -1;
        String tag = matcher.group(1);
        String data = matcher.group(2);
        starttag_text = "<" + tag + "/";
        tag = tag.toLowerCase();
        int k = matcher.end();
        finishShortTag(tag, data);
        starttag_text = buf.substring(start_pos, matcher.end(1) + 1);
        return k;
    }
    // XXX The following should skip matching quotes (' or ")
    matcher = ENDBRACKET.matcher(buf);
    if (!matcher.find(i + 1))
        return -1;
    int j = matcher.start(0);
    // Now parse the data between i+1 and j into a tag and attrs
    Hashtable<String, String> attrs = new Hashtable<String, String>();
    int k;
    String tag;
    if (buf.substring(i, i + 2) == "<>") {
        k = j;
        tag = lasttag;
    } else {
        matcher = TAGFIND.matcher(buf);
        if (!matcher.find(i + 1))
            error("Unexpected call to parseStartTag()");
        k = matcher.end(0);
        tag = buf.substring(i + 1, k).toLowerCase();
        lasttag = tag;
    }
    while (k < j) {
        matcher = ATTRFIND.matcher(buf);
        if (!matcher.find(k))
            break;
        String attrname = matcher.group(1);
        String rest = matcher.group(2);
        String attrvalue = matcher.group(3);
        int attrvalue_len = attrvalue.length();
        if (rest == null || rest.length() == 0) {
            attrvalue = attrname;
        } else if (attrvalue.length() > 1 && attrvalue.charAt(0) == '\'' && '\'' == attrvalue.charAt(attrvalue_len) || attrvalue.charAt(0) == '"' && attrvalue.charAt(attrvalue_len) == '"') {
            attrvalue = attrvalue.substring(1, attrvalue_len - 1);
        }
        attrs.put(attrname.toLowerCase(), attrvalue);
        k = matcher.end(0);
    }
    if (rawdata.charAt(j) == '>')
        j += 1;
    starttag_text = buf.substring(start_pos, j);
    finishStartTag(tag, attrs);
    return j;
}
