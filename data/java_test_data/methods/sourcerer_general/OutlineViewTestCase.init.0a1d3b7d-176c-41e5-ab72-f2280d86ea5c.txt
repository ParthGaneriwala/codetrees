public void init() {
    try {
        mngr = OWLManager.createOWLOntologyManager();
        ont = mngr.createOntology(ONTOLOGY_IRI);
        final OWLDataFactory df = mngr.getOWLDataFactory();
        a = df.getOWLClass(IRI.create(ONTOLOGY_IRI + "#A"));
        b = df.getOWLClass(IRI.create(ONTOLOGY_IRI + "#B"));
        c = df.getOWLClass(IRI.create(ONTOLOGY_IRI + "#C"));
        d = df.getOWLClass(IRI.create(ONTOLOGY_IRI + "#D"));
        e = df.getOWLClass(IRI.create(ONTOLOGY_IRI + "#E"));
        p = df.getOWLObjectProperty(IRI.create(ONTOLOGY_IRI + "#p"));
        q = df.getOWLObjectProperty(IRI.create(ONTOLOGY_IRI + "#q"));
        r = df.getOWLObjectProperty(IRI.create(ONTOLOGY_IRI + "#r"));
        // build the axioms and descriptions
        aPSomeB = df.getOWLSubClassOfAxiom(a, df.getOWLObjectSomeValuesFrom(p, b));
        aPSomeC = df.getOWLSubClassOfAxiom(a, df.getOWLObjectSomeValuesFrom(p, cAndRSomeE));
        aQSomeD = df.getOWLSubClassOfAxiom(a, df.getOWLObjectSomeValuesFrom(q, d));
        Set<OWLClassExpression> and = new HashSet<OWLClassExpression>();
        and.add(c);
        and.add(df.getOWLObjectSomeValuesFrom(r, e));
        cAndRSomeE = df.getOWLObjectIntersectionOf(and);
        // build the test ontology
        List<OWLOntologyChange> changes = new ArrayList<OWLOntologyChange>();
        changes.add(new AddAxiom(ont, aPSomeB));
        changes.add(new AddAxiom(ont, aPSomeC));
        changes.add(new AddAxiom(ont, aQSomeD));
        mngr.applyChanges(changes);
    } catch (Exception e) {
        e.printStackTrace();
        fail();
    }
}
