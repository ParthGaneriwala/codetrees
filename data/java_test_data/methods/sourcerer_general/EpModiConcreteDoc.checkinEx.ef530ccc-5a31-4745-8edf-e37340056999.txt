public IDfId checkinEx(boolean fRetainLock, String versionLabels, String oldCompoundArchValue, String oldSpecialAppValue, String newCompoundArchValue, String newSpecialAppValue) throws DfException {
    IDfId idfId = null;
    IEpModiConcreteDoc iepNewConcreteDoc = null;
    IEpModiLogicalDoc iepLogicalDoc = null;
    IDfVersionPolicy idfVersionPolicy = null;
    IDfId idfNewLogicalId = null;
    IEpModiLogicalDoc iepNewLogicalDoc = null;
    IEpModiConcreteDoc iepCopiedConcreteDoc = null;
    IDfId idfCopiedConcreteId = null;
    String strImplicitVersionLabel = null;
    if (this.isTranslationCheckOut()) {
        // perform super checkin
        idfId = super.checkinEx(fRetainLock, versionLabels, oldCompoundArchValue, oldSpecialAppValue, newCompoundArchValue, newSpecialAppValue);
        // set the "LAST" version label (used to identify the last
        // translation versions)
        iepNewConcreteDoc = (IEpModiConcreteDoc) this.getSession().getObject(idfId);
        this.removeVersionLabel(IEpModiConcreteDoc.VERSION_LABEL_LAST);
        iepNewConcreteDoc.addVersionLabel(IEpModiConcreteDoc.VERSION_LABEL_LAST);
        // remove the "CURRENT" version label (used to identify the last
        // translation versions) if the logical doc is not current
        iepLogicalDoc = iepNewConcreteDoc.getLogicalDoc();
        if (iepLogicalDoc.getVersionLabelIndex(IEpModiConcreteDoc.VERSION_LABEL_CURRENT) == -1) {
            iepNewConcreteDoc.removeVersionLabel(IEpModiConcreteDoc.VERSION_LABEL_CURRENT);
        }
        // set the full version label (<LOGICAL VERSION><LANGUAGE
        // CODE><CONCRETE VERSION>) for the concrete doc
        iepNewConcreteDoc.initConcreteVersionLabel();
    } else {
        idfId = super.checkinEx(fRetainLock, versionLabels, oldCompoundArchValue, oldSpecialAppValue, newCompoundArchValue, newSpecialAppValue);
        iepNewConcreteDoc = (IEpModiConcreteDoc) this.getSession().getObject(idfId);
        if (iepNewConcreteDoc == null) {
            DfException e = new DfException(DfException.DM_DFC_E_UNDEFINED, "Check in failed on this linguistic version, ID: " + this.getObjectId().toString() + ")");
            throw e;
        }
        iepLogicalDoc = this.getLogicalDoc();
        if (iepLogicalDoc == null) {
            DfException e = new DfException(DfException.DM_DFC_E_UNDEFINED, "No logical doc found for this linguistic version, ID: " + this.getObjectId().toString() + ")");
            throw e;
        }
        String[] strVersionLabels = versionLabels.split(",");
        idfVersionPolicy = iepLogicalDoc.getVersionPolicy();
        if (strVersionLabels[0].equals("")) {
            strImplicitVersionLabel = idfVersionPolicy.getNextMinorLabel();
        } else {
            strImplicitVersionLabel = idfVersionPolicy.getNextMajorLabel();
        }
        idfNewLogicalId = iepLogicalDoc.checkin(false, strImplicitVersionLabel + ", CURRENT");
        iepNewLogicalDoc = (IEpModiLogicalDoc) this.getSession().getObject(idfNewLogicalId);
        if (iepNewLogicalDoc == null) {
            DfException e = new DfException(DfException.DM_DFC_E_UNDEFINED, "Logical doc not checked in, logical ID: " + iepLogicalDoc.getObjectId().toString() + ")");
            throw e;
        }
        idfCopiedConcreteId = iepNewConcreteDoc.saveAsNew(true);
        iepCopiedConcreteDoc = (IEpModiConcreteDoc) this.getSession().getObject(idfCopiedConcreteId);
        if (iepCopiedConcreteDoc == null) {
            DfException e = new DfException(DfException.DM_DFC_E_UNDEFINED, "Failed to create the new linguistic version (previous version ID: " + this.getObjectId().toString() + ")");
            throw e;
        }
        iepNewLogicalDoc.linkLinguisticVersion(this.getLanguageCode(), iepCopiedConcreteDoc);
        if (iepCopiedConcreteDoc.getPermit() == IDfACL.DF_PERMIT_DELETE) {
            iepNewConcreteDoc.destroy();
        } else {
        // System.out.println("USE OF DESTROY METHOD");
        }
        idfId = idfCopiedConcreteId;
    }
    return idfId;
}
