public static void main(String[] args) {
    try {
        if (args.length > 0)
            AppData.getInstance().parseINIFile(args[0]);
        else
            AppData.getInstance().resetToDefaults();
    } catch (ClassFormatError cfe) {
        AppData.getInstance().resetToDefaults();
    }
    pool = new ThreadPool(AppData.getInstance().getMaxThreads());
    dm = new DataManager();
    display = new Display();
    CheckFlickGUI app = new CheckFlickGUI();
    app.createShell();
    Utils.centerDialogOnScreen(shell.getShell());
    app.shell.open();
    openAdminPassword(app);
    try {
        genresList = new ArrayList<NamedEntity>();
        genresList.add(new NamedEntity(0, ""));
        colorList = new ArrayList<NamedEntity>();
        colorList.add(new NamedEntity(0, ""));
        countriesList = new ArrayList<NamedEntity>();
        countriesList.add(new NamedEntity(0, ""));
        langList = new ArrayList<NamedEntity>();
        langList.add(new NamedEntity(0, ""));
        rolesList = new ArrayList<NamedEntity>();
        rolesList.add(new NamedEntity(0, ""));
        pool.execute(DataManager.getAllNamedEntities(NamedEntitiesEnum.COUNTRIES));
        pool.execute(DataManager.getAllNamedEntities(NamedEntitiesEnum.GENRES));
        pool.execute(DataManager.getAllNamedEntities(NamedEntitiesEnum.LANGUAGES));
        pool.execute(DataManager.getAllNamedEntities(NamedEntitiesEnum.PRODUCTION_ROLES));
    } catch (InterruptedException e1) {
        e1.printStackTrace();
    }
    System.out.println((isAdmin));
    while (!app.shell.isDisposed()) {
        if (!display.readAndDispatch())
            display.sleep();
    }
    display.dispose();
}
