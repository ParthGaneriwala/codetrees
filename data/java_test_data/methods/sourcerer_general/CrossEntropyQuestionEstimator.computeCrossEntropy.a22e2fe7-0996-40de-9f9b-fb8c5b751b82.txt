static double computeCrossEntropy(Long2DoubleMap parentDist, Long2DoubleMap trainingDist, long trainingCount, Long2DoubleMap devDist, long devCount, MutableDouble Lambda, double initialLambda) {
    // filter out irrelevant stuff
    /*
		Long2DoubleMap trimmedParentDist = new Long2DoubleMap(devDist.size());
		Long2DoubleMap trimmedTrainingDist = new Long2DoubleMap(devDist.size());
		
		for(Long2DoubleMap.Iterator i = devDist.iterator(); i.hasNext();) {
			Long2DoubleMap.Entry entry = i.next();
			long key = entry.getKey();
			trimmedParentDist.put(key, parentDist.get(key));
			trimmedTrainingDist.put(key, trainingDist.get(key));
		}
		*/
    // trainingDist = null;
    double revTrainingCount = 1.0 / trainingCount;
    double revDevCount = 1.0 / devCount;
    // do the EM
    double lambda = initialLambda;
    int iterations = 0;
    while (iterations < MAX_NR_ITERATIONS) {
        ++iterations;
        double sum = 0;
        for (Long2DoubleMap.Iterator i = devDist.iterator(); i.hasNext(); ) {
            Long2DoubleMap.Entry entry = i.next();
            long key = entry.getKey();
            double p = trainingDist.get(key) * revTrainingCount;
            double parent_p = parentDist.get(key);
            double interp_p = lambda * p + (1 - lambda) * parent_p;
            double add = entry.getValue() * p / interp_p;
            if (Double.isNaN(add)) {
                // System.err.printf("tuple %s not found in training distribution.\n", FactorTuple.toString(key));
                continue;
            }
            sum += add;
        }
        sum *= revDevCount;
        double new_lambda = lambda * sum;
        lambda = new_lambda;
        if (Math.abs(sum - 1.0) < 0.01) {
            break;
        }
        if (lambda < 1e-6) {
            break;
        }
    }
    Lambda.set(lambda);
    // compute cross entropy
    double entropy = 0;
    for (Long2DoubleMap.Iterator i = devDist.iterator(); i.hasNext(); ) {
        Long2DoubleMap.Entry entry = i.next();
        long key = entry.getKey();
        double p = trainingDist.get(key);
        double parent_p = parentDist.get(key);
        double interp_p = lambda * p + (1 - lambda) * parent_p;
        if (interp_p > 0) {
            entropy -= entry.getValue() * ProbMath.log2(interp_p);
        }
    }
    // System.out.printf("EM: %d iterations, lambda = %g (initial %g), entropy = %g\n", iterations, lambda, initialLambda, entropy);
    return entropy;
}
