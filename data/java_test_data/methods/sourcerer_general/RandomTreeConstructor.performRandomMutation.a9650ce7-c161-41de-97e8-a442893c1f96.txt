void performRandomMutation(QuartetTree qt) throws Exception {
    int operation = rand.nextInt(6);
    last_operation = operation;
    QNode n1 = null, n2 = null;
    if (operation == 0 || operation == 1) {
        if (operation == 0) {
            // leaf swap
            n1 = getRandomLeafNode();
            n2 = getRandomLeafNode();
            while (n1.adj[0] == n2.adj[0]) {
                n1 = getRandomLeafNode();
                n2 = getRandomLeafNode();
            }
            // just exchange their labels
            int temp_label = n1.label;
            n1.label = n2.label;
            n2.label = temp_label;
        } else {
            // subtree swap
            n1 = getRandomInternNode();
            n2 = getRandomInternNode();
            ArrayList path = qt.Dijkstra(n2, n1, qNodes);
            // make sure the path has more than 3 nodes, including n1 and n2
            while (path.size() <= 3) {
                n1 = getRandomInternNode();
                n2 = getRandomInternNode();
                path = qt.Dijkstra(n2, n1, qNodes);
            }
            // exchange the adjacent nodes
            QNode bucket = n1.adj[n1.getAdjIndex((QNode) path.get(1))];
            n1.adj[n1.getAdjIndex((QNode) path.get(1))] = n2.adj[n2.getAdjIndex((QNode) path.get(path.size() - 2))];
            n2.adj[n2.getAdjIndex((QNode) path.get(path.size() - 2))] = bucket;
            // update their referers
            QNode n1_adj = (QNode) path.get(1);
            n1_adj.adj[n1_adj.getAdjIndex(n1)] = n2;
            QNode n2_adj = (QNode) path.get(path.size() - 2);
            n2_adj.adj[n2_adj.getAdjIndex(n2)] = n1;
        }
    } else {
        // subtree transfer
        n1 = getRandomNode();
        n2 = getRandomNode();
        ArrayList path = qt.Dijkstra(n2, n1, qNodes);
        while (path.size() <= 3) {
            n1 = getRandomNode();
            n2 = getRandomNode();
            path = qt.Dijkstra(n2, n1, qNodes);
        }
        // --- begin of disconnect ---
        // the node to be transfered
        QNode tn = (QNode) path.get(path.size() - 2);
        // this is the next node after tn from the path from n2 to n1
        QNode n3 = (QNode) path.get(path.size() - 3);
        // the node to be shifted
        QNode shift = tn.adj[tn.getThirdAdjIndex(n3, n2)];
        n3.adj[n3.getAdjIndex(tn)] = shift;
        shift.adj[shift.getAdjIndex(tn)] = n3;
        // --- end of disconnect ---
        // --- begin of connect ---
        QNode n4 = (QNode) path.get(1);
        n1.adj[n1.getAdjIndex(n4)] = tn;
        int i1 = rand.nextInt(2);
        int i2 = (i1 + 1) % 3;
        int i3 = (i2 + 1) % 3;
        tn.adj[i1] = n1;
        tn.adj[i2] = n2;
        n4.adj[n4.getAdjIndex(n1)] = tn;
        tn.adj[i3] = n4;
    // --- end of connect --
    }
}
