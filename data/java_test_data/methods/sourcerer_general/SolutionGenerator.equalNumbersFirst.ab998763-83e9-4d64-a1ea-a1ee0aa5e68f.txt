static WICOutput equalNumbersFirst(WICInput inputData) {
    long time = 0;
    if (saveTime)
        time = System.currentTimeMillis();
    SolutionGenerator sl = new SolutionGenerator();
    int[] ySet = inputData.getYSet().clone();
    Vector<int[]> solution = new Vector<int[]>();
    QElement value = null;
    Hashtable<Integer, QElement> htable = findMultiplicities(ySet, sl);
    if (// we are done, only 0s
    htable.size() == 0)
        return new WICOutput(solution, solution.size());
    QElement temp = null;
    PriorityQueue<QElement> pq = null;
    HashSet<int[]> ts = null;
    int status = 0;
    int[] interval;
    int a, b, c;
    HashSet<Integer> blackList = new HashSet<Integer>();
    int[] modifiedInterval = null;
    while (true) {
        if (saveTime && System.currentTimeMillis() - time >= treshold)
            status = 2;
        switch(status) {
            case // scan the input sequence
            0:
                if (// we are done, only 0s
                htable.size() == 0)
                    return new WICOutput(solution, solution.size());
                pq = new PriorityQueue<QElement>(htable.size(), sl.new Comp());
                pq.addAll(htable.values());
                status = 1;
                break;
            case // extract elements from the queue and find the intervals
            1:
                if (pq.size() == 0)
                    return new WICOutput(solution, solution.size());
                modifiedInterval = createModifiedInterval(ts);
                temp = pq.poll();
                while (true) {
                    if (modifiedInterval != null) {
                        if (isInBlackInterval(temp, modifiedInterval)) {
                            blackList.remove(temp.getY());
                            break;
                        } else if (isBlackListed(temp, blackList))
                            temp = pq.poll();
                        else
                            break;
                    } else if (isBlackListed(temp, blackList))
                        temp = pq.poll();
                    else
                        break;
                }
                if (temp.getMultiplicity() == 1) {
                    status = 2;
                    break;
                }
                // Let's throw away the first element now
                // here we get the intervals
                ts = findIntervals(ySet, temp.getFirstOccurence(), temp.getMultiplicity() - 1, temp.getY());
                if (// empty set :(
                ts.size() == 0 && pq.size() != 0)
                    // let's try our luck with the next QElement - status = 1 here
                    blackList.add(temp.getY());
                else if (ts.size() == 0 && pq.size() == 0) {
                    status = 2;
                    break;
                } else {
                    Iterator<int[]> iter = ts.iterator();
                    while (iter.hasNext()) {
                        interval = iter.next();
                        a = interval[0];
                        b = interval[1];
                        c = temp.getY();
                        // update the values covered by the intervals
                        for (int i = a; i <= b; i++) {
                            // 1) update the hash table removing the old value
                            value = htable.get(ySet[i]);
                            if (// if this was the last one of his kind... bye!
                            value.getMultiplicity() == 1)
                                htable.remove(ySet[i]);
                            else {
                                value.removeOccurrence(i);
                                htable.put(ySet[i], value);
                            }
                            // 2) update the value
                            ySet[i] = ySet[i] - c;
                            // 3) update the hash table with the new value
                            value = htable.get(ySet[i]);
                            if (value == null && ySet[i] != 0) {
                                value = sl.new QElement(ySet[i], i);
                                htable.put(ySet[i], value);
                                blackList.remove(ySet[i]);
                            } else if (value != null) {
                                value.addOccurrence(i);
                                htable.put(ySet[i], value);
                                blackList.remove(ySet[i]);
                            }
                        }
                        // add the triple to the solution set. Adjust the values too
                        solution.add(new int[] { a + 1, b + 2, c });
                    }
                    // let's go back to regenerate the data
                    status = 0;
                }
                break;
            case // pass the control to generateSolutionMin()
            2:
                WICOutput partialSol = generateSolutionMin(new WICInput(inputData.getN(), inputData.getK(), ySet));
                solution.addAll(partialSol.getData());
                return new WICOutput(solution, solution.size());
        }
    }
}
