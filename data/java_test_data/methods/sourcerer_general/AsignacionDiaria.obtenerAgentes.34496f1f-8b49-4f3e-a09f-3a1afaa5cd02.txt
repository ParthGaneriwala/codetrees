private List<Agente> obtenerAgentes(ID idEmpresa, Map<String, Integer> mapMorasCargaDiaria) throws Exception {
    try {
        // Obtiene el recordtype de agente
        String sql = "Select r.Id From RecordType r Where r.SobjectType = 'Agente__c' and r.IsActive = true and Name = '" + Constantes.RECORD_TYPE_AGENTE_NORMAL + "'";
        ID recordTypeAgente = ((RecordType) this.client.getObjectSalesforce(sql)).getId();
        List<Agente> agentes = new ArrayList<Agente>();
        sql = "Select " + "a.Id, " + "a.Name, " + "a.Agente__c, " + "a.Maximo_Ciclo__c, " + "Carga_Diaria_Minima__c,Carga_Diaria_Maxima__c," + "a.Supervisor__c ," + "a.Ciclo__c, " + "a.Order__c, " + "(Select Id,Conf_Info_Producto__c,Conf_Info_Producto__r.Info_Cuenta__c,Maximo_Gestiones__c From Agente_Productos__r)," + "(Select Conf_Info_Mora__c,Agente_Producto__c From Agente_Moras__r Where Conf_Info_Mora__c IN " + UtilBasic.obtenerLlaves(mapMorasCargaDiaria) + ")" + "From Agente__c a " + "Where " + "Empresa_del_grupo__c = '" + idEmpresa + "' and " + "a.Maximo_Ciclo__c > 0 and " + "a.IsActive__c = true and " + "a.RecordTypeId = '" + recordTypeAgente + "' and " + "a.Es_Abogado__c = false and " + "a.Agente__r.IsActive = true " + "Order by a.Order__c";
        List<SObject> objects = this.getObjectsSalesforce(sql);
        if (objects != null) {
            for (SObject object : objects) {
                boolean tieneMorasCargaDiaria = false;
                Agente__c agenteObj = (Agente__c) object;
                Agente agente = null;
                List<Agente_Mora__c> morasAgente = new ArrayList<Agente_Mora__c>();
                List<Agente_Producto__c> productosAgente = new ArrayList<Agente_Producto__c>();
                List<SObject> productosAgenteObj = new ArrayList<SObject>();
                List<SObject> morasAgenteObj = new ArrayList<SObject>();
                if (agenteObj.getAgente_Productos__r() != null) {
                    productosAgenteObj = client.getObjectsSalesforce(agenteObj.getAgente_Productos__r());
                    for (SObject productoAgenteObj : productosAgenteObj) {
                        productosAgente.add((Agente_Producto__c) productoAgenteObj);
                    }
                }
                if (agenteObj.getAgente_Moras__r() != null) {
                    morasAgenteObj = client.getObjectsSalesforce(agenteObj.getAgente_Moras__r());
                    for (SObject moraAgenteObj : morasAgenteObj) {
                        morasAgente.add((Agente_Mora__c) moraAgenteObj);
                        // Lo marca como un gestor valido
                        tieneMorasCargaDiaria = true;
                    }
                }
                // Solo se agrega a la lista de agentes si ve moras de las que se que vienen en la carga diaria
                if (tieneMorasCargaDiaria) {
                    agente = new Agente(agenteObj.getId(), agenteObj.getAgente__c(), agenteObj.getSupervisor__c(), agenteObj.getName(), !Double.isNaN(agenteObj.getCiclo__c()) ? (int) agenteObj.getCiclo__c() : 0, !Double.isNaN(agenteObj.getMaximo_Ciclo__c()) ? (int) agenteObj.getMaximo_Ciclo__c() : 0, !Double.isNaN(agenteObj.getCarga_Diaria_Maxima__c()) ? (int) agenteObj.getCarga_Diaria_Maxima__c() : 0, !Double.isNaN(agenteObj.getCarga_Diaria_Minima__c()) ? (int) agenteObj.getCarga_Diaria_Minima__c() : 0, Integer.valueOf(agenteObj.getOrder__c()), !Double.isNaN(agenteObj.getTurno__c()) ? (int) agenteObj.getTurno__c() : 0, productosAgente, morasAgente);
                    agentes.add(agente);
                }
            }
        }
        return agentes;
    } catch (Exception e) {
        logger.error(e);
        throw e;
    }
}
