private void doCurveAction() {
    int iCurve = 0;
    curveId++;
    switch(// one complete cycle adds a single curve
    iAction) {
        case 0:
            addCurve();
            getCurve().setLegendLabel("" + curveId);
            getCurve().getSymbol().setHovertextTemplate("Curve:" + curveId);
            require(getCurve().onY2() == false);
            getCurve().setYAxis((curveCount % 2 == 0) ? Y_AXIS : Y2_AXIS);
            require(getCurve().getLegendLabel().equals("" + curveId));
            require(getCurve().getSymbol().getHovertextTemplate().equals("Curve:" + curveId));
            require(getCurve().getNPoints() == 0);
            require(getCurve().isVisible() == true);
            getCurve().setVisible(false);
            require(getCurve().isVisible() == false);
            getCurve().setVisible(true);
            curveCount++;
            break;
        case 1:
            addCurve(0);
            getCurve(0).setLegendLabel("" + curveId);
            getCurve(0).getSymbol().setHovertextTemplate("Curve:" + curveId);
            Symbol s = getCurve(0).getSymbol();
            getCurve(0).setYAxis((curveCount % 2 == 0) ? Y_AXIS : Y2_AXIS);
            require(s.getBackgroundColor().equals(DEFAULT_SYMBOL_BACKGROUND_COLOR));
            s.setBorderColor("#AAF");
            require(s.getBorderColor().equals("#AAF"));
            require(s.getBorderStyle().equals(DEFAULT_SYMBOL_BORDER_STYLE));
            require(s.getBorderWidth() == DEFAULT_SYMBOL_BORDER_WIDTH);
            require(s.getHeight() == DEFAULT_SYMBOL_HEIGHT);
            require(Double.isNaN(s.getModelHeight()));
            require(Double.isNaN(s.getModelWidth()));
            require(s.getSymbolType() == DEFAULT_SYMBOL_TYPE);
            require(s.getWidth() == DEFAULT_SYMBOL_WIDTH);
            curveCount++;
            break;
        case 2:
            iCurve = (int) (GChartTestApp.rnd() * getNCurves());
            addCurve(iCurve);
            getCurve(iCurve).setLegendLabel("" + curveId);
            getCurve(iCurve).getSymbol().setHovertextTemplate("Curve:" + curveId);
            getCurve(iCurve).setYAxis((curveCount % 2 == 0) ? Y_AXIS : Y2_AXIS);
            curveCount++;
            break;
        case 3:
            if (getCurve(0).getNPoints() > 0)
                getCurve(0).removePoint((int) (GChartTestApp.rnd() * getCurve(0).getNPoints()));
            getCurve(0).clearPoints();
            removeCurve(0);
            curveCount--;
            break;
        case 4:
            iCurve = (int) (GChartTestApp.rnd() * getNCurves());
            removeCurve(iCurve);
            curveCount--;
            break;
    }
    iAction = (iAction + 1) % NCURVEACTIONS;
}
