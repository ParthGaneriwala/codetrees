void handlePixmap(int opcode) throws IOException, JimiException {
    int width;
    int height;
    PICTPixmap pxmap = null;
    PICTPixmap9A pxmap9A = null;
    PICTColorTable colorTable = null;
    ColorModel cm = null;
    int pixelSize;
    short compCount;
    // handle 9A variation
    if (opcode == PICT_9A) {
        // this is the only opcode that holds 16, 24, 32 bit data
        pxmap9A = new PICTPixmap9A(dIn);
        width = pxmap9A.bounding.brX - pxmap9A.bounding.tlX;
        height = pxmap9A.bounding.brY - pxmap9A.bounding.tlY;
        pixelSize = pxmap9A.pixelSize;
        compCount = pxmap9A.compCount;
        // to its logical value
        switch(pixelSize) {
            case 32:
                // for compCount 3 or 4
                rowBytes = width * pxmap9A.compCount;
                // for now ignore 4 components in color model
                // color model for 8 bits R,G,B
                cm = new DirectColorModel(24, 0xFF0000, 0xFF00, 0xFF);
                break;
            case 16:
                rowBytes = width * 2;
                // color model for 5 bits R,G,B in bottom word of int
                cm = new DirectColorModel(16, (0x1F << 10), (0x1F << 5), 0x1F);
                break;
            default:
                throw new JimiException("Opcode 9a has pixelSize of " + pixelSize);
        }
    } else {
        // clear flag bits in rowBytes
        rowBytes &= 0x3FFF;
        pxmap = new PICTPixmap(dIn);
        colorTable = new PICTColorTable(dIn);
        cm = colorTable.createColorModel(pxmap);
        width = pxmap.bounding.brX - pxmap.bounding.tlX;
        height = pxmap.bounding.brY - pxmap.bounding.tlY;
        pixelSize = pxmap.pixelSize;
        compCount = pxmap.compCount;
    }
    PICTRectangle source = new PICTRectangle(dIn);
    PICTRectangle dest = new PICTRectangle(dIn);
    short mode = dIn.readShort();
    if (opcode == PICT_BITSRGN || opcode == PICT_PACKBITSRGN)
        // skip the region data
        skip_01();
    // Initialise JimiImage
    ji.setSize(width, height);
    ji.setColorModel(cm);
    // allocate image
    ji.setPixels();
    handlePixmap(ji, rowBytes, pixelSize, compCount);
}
