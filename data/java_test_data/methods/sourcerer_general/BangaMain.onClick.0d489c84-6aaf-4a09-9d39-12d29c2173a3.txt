public void onClick(View view) {
    if (view instanceof Button) {
        Log.d(TAG, "BangaMain received onClick for " + ((Button) view).getText());
    }
    switch(view.getId()) {
        case R.id.main_startButton:
            loginPage();
            break;
        case R.id.login_continue:
            Log.d(TAG, "Before EditText");
            EditText stored = (EditText) findViewById(R.id.login_input);
            String cid = stored.getText().toString();
            Log.d(TAG, "Before Writing Out: " + cid);
            BufferedOutputStream id;
            try {
                // id = new BufferedOutputStream( new FileOutputStream("/data/download/clientId.txt"));
                id = new BufferedOutputStream(openFileOutput("clientId.txt", 0));
                // id = new BufferedOutputStream( openFileOutput("/data/download/clientId.txt",0));
                id.write(cid.getBytes());
                id.write("\n".getBytes());
                id.flush();
                id.close();
            } catch (FileNotFoundException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            } catch (IOException e) {
                // TODO Auto-generated catch block
                Log.d(TAG, "exception in write");
                e.printStackTrace();
            }
            // Deck Management
            // Get the Client Id
            Log.d(TAG, "after write");
            String clientId = "";
            try {
                // BufferedReader idReader = new BufferedReader( new FileReader("/data/download/clientId.txt"));
                BufferedReader idReader = new BufferedReader(new InputStreamReader(openFileInput("clientId.txt")));
                // BufferedReader idReader = new BufferedReader( new InputStreamReader(openFileInput("/data/download/clientId.txt")));
                clientId = idReader.readLine();
            } catch (FileNotFoundException e) {
                // TODO Auto-generated catch block
                Log.d(TAG, "file not found in read");
                e.printStackTrace();
            } catch (IOException e) {
                // TODO Auto-generated catch block
                Log.d(TAG, "io exception in read");
                e.printStackTrace();
            }
            // see if we got it
            Log.d(TAG, "cId: " + clientId);
            // get command string
            String myString = null;
            try {
                /* Define the URL we want to load data from. */
                // URL myURL = new URL(
                // "http://10.0.2.2:8080/dm0?"+clientId); //used to get to the "local host" for app engine
                URL myURL = new URL(// used to get to the "local host" for app engine
                "http://bangasite.appspot.com/dm0?" + clientId);
                /* Open a connection to that URL. */
                URLConnection ucon = myURL.openConnection();
                Log.d(TAG, "after open connection");
                /* Define InputStreams to read
			              * from the URLConnection. */
                InputStream is = ucon.getInputStream();
                BufferedInputStream bis = new BufferedInputStream(is, 512);
                Log.d(TAG, "after buffered input stream");
                /* Read bytes to the Buffer until
			              * there is nothing more to read(-1). */
                ByteArrayBuffer baf = new ByteArrayBuffer(512);
                int current = 0;
                while ((current = bis.read()) != -1) {
                    baf.append((byte) current);
                    Log.d(TAG, "read a byte");
                }
                Log.d(TAG, "after read loop");
                /* Convert the Bytes read to a String. */
                myString = new String(baf.toByteArray());
            } catch (Exception e) {
                /* On any Error we want to display it. */
                Log.d(TAG, "error in getting from dm0");
                myString = e.getMessage();
            }
            Log.d(TAG, "command: " + myString);
            // now load the decks
            String[] words = myString.split(" ");
            for (int i = 0; i < words.length; i++) {
                String word = words[i];
                if (word.equals("load")) {
                    String deckName = words[i + 1];
                    // download this deck; see below
                    try {
                        /* Define the URL we want to load data from. */
                        // URL myURL = new URL("http://10.0.2.2:8080/dm1?"+deckName);
                        URL myURL = new URL("http://bangasite.appspot.com/dm1?" + deckName);
                        // used to get to the"local host" for app engine
                        /* Open a connection to that URL. */
                        URLConnection ucon = myURL.openConnection();
                        Log.d(TAG, "after openconnection");
                        /* Define InputStreams to read
					                     * from the URLConnection. */
                        InputStream in = ucon.getInputStream();
                        Log.d(TAG, "after getinputstream");
                        // code following is based on http://www.exampledepot.com/egs/java.io/CopyFile.html
                        // OutputStream out = new FileOutputStream("/data/download/"+deckName+".deck");
                        // OutputStream out = new FileOutputStream(deckName+".deck");
                        OutputStream out = openFileOutput(deckName + ".deck", 0);
                        // OutputStream out = openFileOutput("/data/download/"+deckName+".deck",0);
                        Log.d(TAG, "after new fileoutputstream");
                        // Transfer bytes from in to out
                        byte[] buf = new byte[1024];
                        int len;
                        while ((len = in.read(buf)) > 0) {
                            Log.d(TAG, "writing");
                            out.write(buf, 0, len);
                        }
                        in.close();
                        out.close();
                        Log.d(TAG, "finished writing");
                    } catch (Exception e) {
                        /* On any Error we want to display it. */
                        Log.d(TAG, "error in getting from dm1");
                    }
                } else if (word.equals("unload")) {
                    String deckName = words[i + 1];
                    File target = new File("/data/download/" + deckName + ".deck");
                    if (target.exists()) {
                        Log.d(TAG, "deleting " + deckName);
                        target.delete();
                    }
                }
            }
        case R.id.bangamain_selectNewDeckButton:
            startDealer();
            break;
        case R.id.main_viewStatsButton:
            setStatsView();
            break;
        case R.id.bangamain_exitButton:
            // exit the app
            sendStats();
            finish();
            break;
        case R.id.bangamain_mainMenuButton:
            setMainView();
            break;
        case R.id.stats_doneButton:
            setMainView();
            break;
        case R.id.hintstats_doneButton:
            setMainView();
            break;
        case R.id.bangamain_playAgainButton:
            startCardPlayer(currentlyPlayingCardList);
            break;
        case R.id.stats_clearStats:
        case R.id.hintstats_clearStats:
            clearStats();
            break;
        case R.id.main_endGameButton:
            Log.d(TAG, "ending");
            sendStats();
            Log.d(TAG, "after sendStats");
            finish();
            break;
        case R.id.hintstats_cardStats:
            setHintView();
            break;
        case R.id.hintstats_deckStats:
            setStatsView();
            break;
        case R.id.cardplayer1_nextHintButton:
        case R.id.cardplayer2_nextHintButton:
        case R.id.cardplayer2_replayHintButton:
        case R.id.cardplayer3_replayHintButton:
            numHintsNeeded++;
            break;
    }
}
