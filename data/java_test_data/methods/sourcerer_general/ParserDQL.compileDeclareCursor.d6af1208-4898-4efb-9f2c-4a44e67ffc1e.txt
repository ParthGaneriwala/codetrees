StatementDMQL compileDeclareCursor() {
    int sensitivity = ResultConstants.SQL_ASENSITIVE;
    int scrollability = ResultConstants.SQL_NONSCROLLABLE;
    int holdability = ResultConstants.SQL_NONHOLDABLE;
    int returnability = ResultConstants.SQL_WITHOUT_RETURN;
    readThis(Tokens.DECLARE);
    readNewSchemaObjectName(SchemaObject.CURSOR, true);
    switch(token.tokenType) {
        case Tokens.SENSITIVE:
            read();
            sensitivity = ResultConstants.SQL_SENSITIVE;
            break;
        case Tokens.INSENSITIVE:
            read();
            sensitivity = ResultConstants.SQL_INSENSITIVE;
            break;
        case Tokens.ASENSITIVE:
            read();
            break;
    }
    if (token.tokenType == Tokens.NO) {
        readThis(Tokens.SCROLL);
    } else {
        if (token.tokenType == Tokens.SCROLL) {
            read();
            scrollability = ResultConstants.SQL_SCROLLABLE;
        }
    }
    readThis(Tokens.CURSOR);
    for (int round = 0; round < 2; round++) {
        if (token.tokenType == Tokens.WITH) {
            read();
            if (round == 0 && token.tokenType == Tokens.HOLD) {
                read();
                holdability = ResultConstants.SQL_HOLDABLE;
            } else {
                readThis(Tokens.RETURN);
                round++;
                returnability = ResultConstants.SQL_WITH_RETURN;
            }
        } else if (token.tokenType == Tokens.WITHOUT) {
            read();
            if (round == 0 && token.tokenType == Tokens.HOLD) {
                read();
            } else {
                readThis(Tokens.RETURN);
                round++;
            }
        }
    }
    readThis(Tokens.FOR);
    int props = ResultProperties.getProperties(sensitivity, ResultConstants.SQL_UPDATABLE, scrollability, holdability, returnability);
    StatementDMQL cs = compileCursorSpecification(props);
    return cs;
}
