public final Exp ExpMax() {
    Token tk;
    Exp e1, e2;
    switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
        case TRUE:
            tk = jj_consume_token(TRUE);
            e1 = new True();
            e1 = ExpMax_prime(e1);
            e1.beginLine = tk.beginLine;
            e1.beginColumn = tk.beginColumn;
            {
                if (true)
                    return e1;
            }
            break;
        case FALSE:
            tk = jj_consume_token(FALSE);
            e1 = new False();
            e1 = ExpMax_prime(e1);
            e1.beginLine = tk.beginLine;
            e1.beginColumn = tk.beginColumn;
            {
                if (true)
                    return e1;
            }
            break;
        case ID:
            tk = jj_consume_token(ID);
            e1 = new IdentifierExp(tk.image);
            e2 = ExpMax_prime(e1);
            e2.beginLine = tk.beginLine;
            e2.beginColumn = tk.beginColumn;
            {
                if (true)
                    return e2;
            }
            break;
        case THIS:
            tk = jj_consume_token(THIS);
            e1 = new This();
            e1 = ExpMax_prime(e1);
            e1.beginLine = tk.beginLine;
            e1.beginColumn = tk.beginColumn;
            {
                if (true)
                    return e1;
            }
            break;
        case INTEGERLITERAL:
            tk = jj_consume_token(INTEGERLITERAL);
            e1 = new IntegerLiteral(Integer.parseInt(tk.image));
            e1 = ExpMax_prime(e1);
            e1.beginLine = tk.beginLine;
            e1.beginColumn = tk.beginColumn;
            {
                if (true)
                    return e1;
            }
            break;
        case NEW:
            tk = jj_consume_token(NEW);
            e1 = C();
            e1.beginLine = tk.beginLine;
            e1.beginColumn = tk.beginColumn;
            {
                if (true)
                    return e1;
            }
            break;
        case P_OPEN:
            tk = jj_consume_token(P_OPEN);
            e1 = Exp();
            jj_consume_token(P_CLOSE);
            e2 = ExpMax_prime(e1);
            e2.beginLine = tk.beginLine;
            e2.beginColumn = tk.beginColumn;
            {
                if (true)
                    return e2;
            }
            break;
        default:
            jj_la1[16] = jj_gen;
            jj_consume_token(-1);
            Error.getInstance().addErro("Esperado identificador, 'false', 'true','new' ou ( no lugar de " + token.image, token.beginLine);
    }
    return new IdentifierExp("Desconhecido");
}
