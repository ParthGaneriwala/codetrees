public Vector getQuadruples() {
    // return quadruples;
    Vector<AssemblyInstruction> quads = new Vector<AssemblyInstruction>();
    // Start with the start node
    HashSet<ControlFlowNode> visitedNodes = new HashSet<ControlFlowNode>();
    int numNodes = getNumNodes();
    boolean start = true;
    ControlFlowNode currentNode = null;
    while (visitedNodes.size() != numNodes) {
        if (start) {
            currentNode = startNode;
            Vector<AssemblyInstruction> instrsInNode = startNode.getInstructions();
            quads.addAll(instrsInNode);
            visitedNodes.add(startNode);
        }
        // Get the last instruction in the current node
        Vector<AssemblyInstruction> instrsInNode = currentNode.getInstructions();
        AssemblyInstruction lastInstr = instrsInNode.elementAt(instrsInNode.size() - 1);
        int lastInstrType = lastInstr.getType();
        if (lastInstrType == AssemblyInstruction.CJUMP) {
            CJump cjump = (CJump) lastInstr;
            String trueLbl = cjump.getTrueLabel();
            String falseLbl = cjump.getFalseLabel();
            // Identify the node for the "false" path
            Vector<Node> children = currentNode.getSuccessors();
            ControlFlowNode nodeForFalse = null;
            ControlFlowNode nodeForTrue = null;
            for (int i = 0; i < children.size(); i++) {
                ControlFlowNode cfChildNode = (ControlFlowNode) children.elementAt(i);
                Vector<AssemblyInstruction> childNodeIns = cfChildNode.getInstructions();
                AssemblyInstruction firstInstr = childNodeIns.elementAt(0);
                // First instr. must be a label
                LabelInstr lblInstr = (LabelInstr) firstInstr;
                String lblName = lblInstr.getLabelStr();
                if (falseLbl.equals(lblName)) {
                    nodeForFalse = cfChildNode;
                }
                if (trueLbl.equals(lblName)) {
                    nodeForTrue = cfChildNode;
                }
            }
            // Add the "if" and the "else" cf nodes
            if (visitedNodes.add(nodeForFalse)) {
                quads.addAll(nodeForFalse.getInstructions());
            }
            if (visitedNodes.add(nodeForTrue)) {
                quads.addAll(nodeForTrue.getInstructions());
            }
        // Update the current node
        } else if (lastInstrType == AssemblyInstruction.JUMP) {
        } else {
        }
    }
    return quads;
}
