@SuppressWarnings("unchecked")
public void joinRing(String ip, int port) {
    debug("In join already created ring");
    PrintWriter outPW;
    Socket sock;
    try {
        debug("before creating socket");
        sock = new Socket(ip, port);
        debug("before creating ObjectOutputStream");
        out = new ObjectOutputStream(sock.getOutputStream());
        debug("in = new ObjectInputStream(sock.getInputStream());");
        // in = new ObjectInputStream(sock.getInputStream());
        debug("before creating outputwriter");
        outPW = new PrintWriter(sock.getOutputStream(), true);
        // this gets the finger table of the node we specify to get its finger table to help establish our finger table
        debug("before -getFT");
        outPW.println("-getFT " + InetAddress.getLocalHost() + ":" + Node.DEFAULT_PORT);
        debug("after -getFT");
        outPW.println("-printFT");
        // unsafe cast but has to be done
        debug("before copyFinger");
        outPW.println("-copyFT");
        in = new ObjectInputStream(sock.getInputStream());
        ft.copyFinger((HashMap<Integer, String>) in.readObject());
        // this is sent around the network to say that we are a new node
        debug("attempting to send addFT around the network");
        outPW.println("-addFT " + InetAddress.getLocalHost() + ":" + Node.DEFAULT_PORT);
        out.close();
        sock.close();
        // this is called to make sure we fix our own finger table
        this.fixFinger();
    } catch (StreamCorruptedException e) {
        System.err.println(e);
        e.printStackTrace();
    } catch (IOException e) {
        System.err.println(e);
        e.printStackTrace();
    } catch (SecurityException e) {
        System.err.println(e);
        e.printStackTrace();
    } catch (NullPointerException e) {
        System.err.println(e);
        e.printStackTrace();
    } catch (ClassNotFoundException e) {
        System.err.println(e);
        e.printStackTrace();
    }
    while (true) {
        try {
            socket = serverSock.accept();
        // socketIn = serverSockIn.accept();
        // socketOut = serverSockOut.accept();
        } catch (Exception e) {
            System.err.println(e);
        }
        Runnable c = new myRunnable();
        Thread t1 = new Thread(c);
        t1.start();
    }
// while
}
