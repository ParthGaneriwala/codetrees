private static void doAdditionalPdefValidation(Document aDocument, IAeResourceValidationErrorHandler aHandler) {
    try {
        // Get a list of the role elements and check that they contain a wsa:EndpointReference child element.
        // $NON-NLS-1$
        NodeList nl = aDocument.getDocumentElement().getElementsByTagName("role");
        for (int i = 0; i < nl.getLength(); i++) {
            Element roleElem = (Element) nl.item(i);
            int numChildren = 0;
            boolean hasEndpointRef = false;
            NodeList nl2 = roleElem.getChildNodes();
            for (int j = 0; j < nl2.getLength(); j++) {
                Node node = nl2.item(j);
                if (node instanceof Element) {
                    numChildren++;
                    // TODO doesn't have to be wsa:!
                    if (// $NON-NLS-1$
                    "wsa:EndpointReference".equals(node.getNodeName()))
                        hasEndpointRef = true;
                }
            }
            if (numChildren != 1 || !hasEndpointRef) {
                // $NON-NLS-1$
                String msg = AeMessages.getString("AePdefValidator.INVALID_CONTENT_IN_ROLE_ERROR");
                aHandler.contentError(msg, roleElem);
            }
        }
        // Make sure that every partner link element contains a role child element.
        // $NON-NLS-1$
        nl = aDocument.getDocumentElement().getElementsByTagName("partnerLinkType");
        for (int i = 0; i < nl.getLength(); i++) {
            Element node = (Element) nl.item(i);
            // $NON-NLS-1$
            NodeList myRoleList = node.getElementsByTagName("role");
            if (myRoleList.getLength() == 0) {
                // $NON-NLS-1$
                String msg = AeMessages.getString("AePdefValidator.INVALID_CONTENT_IN_PLT_ERROR");
                aHandler.contentError(msg, node);
            }
        }
        // Do a bit of static validation on the wsa:EndpointReference tags, if any.
        // $NON-NLS-1$
        nl = aDocument.getDocumentElement().getElementsByTagName("wsa:EndpointReference");
        for (int i = 0; i < nl.getLength(); i++) {
            // Do a bit of static analysis on the endpoint reference definition.
            Element refNode = (Element) nl.item(i);
            // $NON-NLS-1$
            String attribValue = refNode.getAttribute("xmlns:s");
            if (// $NON-NLS-1$
            "FILL_IN_NAMESPACE".equals(attribValue)) {
                // Problem marker!
                // $NON-NLS-1$
                String msg = AeMessages.getString("AePdefValidator.ENDPOINT_REF_NS_NOT_CONFIGURED_WARNING");
                aHandler.contentWarning(msg, refNode);
            }
        }
    } catch (Exception e) {
        AeException.logError(e, e.getLocalizedMessage());
        // $NON-NLS-1$
        String msg = MessageFormat.format(AeMessages.getString("AePdefValidator.VALIDATION_ERROR"), new Object[] { e.getLocalizedMessage() });
        aHandler.fatalError(msg);
    }
}
