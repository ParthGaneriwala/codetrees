Table SYSTEM_TABLE_CONSTRAINTS() throws HsqlException {
    Table t = sysTables[SYSTEM_TABLE_CONSTRAINTS];
    if (t == null) {
        t = createBlankTable(sysTableHsqlNames[SYSTEM_TABLE_CONSTRAINTS]);
        addColumn(t, "CONSTRAINT_CATALOG", Types.VARCHAR);
        addColumn(t, "CONSTRAINT_SCHEMA", Types.VARCHAR);
        // not null
        addColumn(t, "CONSTRAINT_NAME", Types.VARCHAR, false);
        // not null
        addColumn(t, "CONSTRAINT_TYPE", Types.VARCHAR, 11, false);
        addColumn(t, "TABLE_CATALOG", Types.VARCHAR);
        addColumn(t, "TABLE_SCHEMA", Types.VARCHAR);
        // not null
        addColumn(t, "TABLE_NAME", Types.VARCHAR, false);
        // not null
        addColumn(t, "IS_DEFERRABLE", Types.VARCHAR, 3, false);
        // not null
        addColumn(t, "INITIALLY_DEFERRED", Types.VARCHAR, 3, false);
        // false PK, as CONSTRAINT_CATALOG, CONSTRAINT_SCHEMA,
        // TABLE_CATALOG and/or TABLE_SCHEMA may be null
        t.createPrimaryKey(null, new int[] { 0, 1, 2, 4, 5, 6 }, false);
        return t;
    }
    // Intermediate holders
    Iterator tables;
    Table table;
    Constraint[] constraints;
    int constraintCount;
    Constraint constraint;
    String cat;
    String schem;
    HashSet constraintSet;
    Object[] row;
    // column number mappings
    final int icons_cat = 0;
    final int icons_schem = 1;
    final int icons_name = 2;
    final int icons_type = 3;
    final int itab_cat = 4;
    final int itab_schem = 5;
    final int itab_name = 6;
    final int iis_defr = 7;
    final int iinit_defr = 8;
    // initialization
    tables = database.schemaManager.allTablesIterator();
    constraintSet = new HashSet();
    // else complier complains
    table = null;
    // do it
    while (tables.hasNext()) {
        table = (Table) tables.next();
        if (table.isView() || !isAccessibleTable(table)) {
            continue;
        }
        constraints = table.getConstraints();
        constraintCount = constraints.length;
        for (int i = 0; i < constraintCount; i++) {
            constraint = constraints[i];
            if (constraint.getType() == Constraint.FOREIGN_KEY && !isAccessibleTable(constraint.getRef())) {
                continue;
            }
            constraintSet.add(constraint);
        }
    }
    for (Iterator it = constraintSet.iterator(); it.hasNext(); ) {
        row = t.getEmptyRowData();
        constraint = (Constraint) it.next();
        switch(constraint.getType()) {
            case Constraint.CHECK:
                {
                    row[icons_type] = "CHECK";
                    table = constraint.getMain();
                    break;
                }
            case Constraint.UNIQUE:
                {
                    row[icons_type] = "UNIQUE";
                    table = constraint.getMain();
                    break;
                }
            case Constraint.FOREIGN_KEY:
                {
                    row[icons_type] = "FOREIGN KEY";
                    table = constraint.getRef();
                    break;
                }
            case Constraint.PRIMARY_KEY:
                {
                    row[icons_type] = "PRIMARY KEY";
                    table = constraint.getMain();
                    break;
                }
            case Constraint.MAIN:
            default:
                {
                    continue;
                }
        }
        cat = ns.getCatalogName(table);
        schem = table.getSchemaName();
        row[icons_cat] = cat;
        row[icons_schem] = schem;
        row[icons_name] = constraint.constName.name;
        row[itab_cat] = cat;
        row[itab_schem] = schem;
        row[itab_name] = table.getName().name;
        row[iis_defr] = "NO";
        row[iinit_defr] = "NO";
        t.insertSys(row);
    }
    t.setDataReadOnly(true);
    return t;
}
