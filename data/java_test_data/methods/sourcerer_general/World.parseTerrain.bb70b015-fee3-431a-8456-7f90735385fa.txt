private void parseTerrain(Element element) {
    Element fields = element.getChild("fields");
    Element position = element.getChild("position");
    Element scale = element.getChild("scale");
    Element color = element.getChild("color");
    Element texture = element.getChild("texture");
    Element transparency = element.getChild("transparency");
    Element lift = element.getChild("lift");
    Element sink = element.getChild("sink");
    try {
        boolean collidable = false;
        if (element.getAttribute("collidable") != null) {
            collidable = element.getAttribute("collidable").getBooleanValue();
        }
        int fieldsX = fields.getAttribute("x").getIntValue();
        int fieldsZ = fields.getAttribute("z").getIntValue();
        float positionX = position.getAttribute("x").getFloatValue();
        float positionY = position.getAttribute("y").getFloatValue();
        float positionZ = position.getAttribute("z").getFloatValue();
        float scaleX = scale.getAttribute("x").getFloatValue();
        float scaleY = scale.getAttribute("y").getFloatValue();
        float scaleZ = scale.getAttribute("z").getFloatValue();
        int colorRed = -1;
        int colorGreen = -1;
        int colorBlue = -1;
        float visible = transparency.getAttribute("visible").getFloatValue();
        if (color != null) {
            colorRed = color.getAttribute("red").getIntValue();
            colorGreen = color.getAttribute("green").getIntValue();
            colorBlue = color.getAttribute("blue").getIntValue();
        }
        String textureFileName = null;
        float textureScaleX = 1f;
        float textureScaleZ = 1f;
        if (texture != null) {
            textureFileName = texture.getAttribute("src").getValue();
            textureScaleX = texture.getAttribute("x").getFloatValue();
            textureScaleZ = texture.getAttribute("z").getFloatValue();
        }
        Terrain terrain = new Terrain(fieldsX, fieldsZ, positionX, positionY, positionZ, scaleX, scaleY, scaleZ);
        terrain.setCollidable(collidable);
        Iterator it = element.getChildren("randomize").iterator();
        while (it.hasNext()) {
            Element setElement = (Element) it.next();
            String xString = setElement.getAttribute("x").getValue();
            String yString = setElement.getAttribute("height").getValue();
            String zString = setElement.getAttribute("z").getValue();
            int seed = setElement.getAttribute("seed").getIntValue();
            xString = xString.replace(" ", "");
            zString = zString.replace(" ", "");
            int xStart = 0;
            int xEnd = 0;
            float yStart = 0;
            float yEnd = 0;
            int zStart = 0;
            int zEnd = 0;
            if (xString.contains("-")) {
                int minusPosition = xString.indexOf("-");
                xStart = new Integer(xString.substring(0, minusPosition)).intValue();
                xEnd = new Integer(xString.substring(minusPosition + 1, xString.length())).intValue();
            } else {
                xStart = xEnd = new Integer(xString).intValue();
            }
            if (yString.contains("-")) {
                int minusPosition = yString.indexOf("-");
                if (minusPosition == 0)
                    minusPosition = yString.indexOf("-", minusPosition + 1);
                yStart = new Float(yString.substring(0, minusPosition)).floatValue();
                yEnd = new Float(yString.substring(minusPosition + 1, yString.length())).floatValue();
            } else {
                yStart = yEnd = new Float(yString).floatValue();
            }
            if (zString.contains("-")) {
                int minusPosition = zString.indexOf("-");
                zStart = new Integer(zString.substring(0, minusPosition)).intValue();
                zEnd = new Integer(zString.substring(minusPosition + 1, zString.length())).intValue();
            } else {
                zStart = zEnd = new Integer(zString).intValue();
            }
            SynchronizedRandom rand = new SynchronizedRandom(Consts.RANDOM_CONFIG, seed);
            for (int x = xStart; x <= xEnd; x++) {
                for (int z = zStart; z <= zEnd; z++) {
                    float y = (float) (rand.getValue() * (yEnd - yStart) + yStart);
                    terrain.setCoordinates(x, y, z);
                }
            }
        }
        Iterator it2 = element.getChildren("set").iterator();
        while (it2.hasNext()) {
            Element setElement = (Element) it2.next();
            String xString = setElement.getAttribute("x").getValue();
            String zString = setElement.getAttribute("z").getValue();
            float y = setElement.getAttribute("height").getFloatValue();
            xString = xString.replace(" ", "");
            zString = zString.replace(" ", "");
            int xStart = 0;
            int xEnd = 0;
            int zStart = 0;
            int zEnd = 0;
            if (xString.contains("-")) {
                int minusPosition = xString.indexOf("-");
                xStart = new Integer(xString.substring(0, minusPosition)).intValue();
                xEnd = new Integer(xString.substring(minusPosition + 1, xString.length())).intValue();
            } else {
                xStart = xEnd = new Integer(xString).intValue();
            }
            if (zString.contains("-")) {
                int minusPosition = zString.indexOf("-");
                zStart = new Integer(zString.substring(0, minusPosition)).intValue();
                zEnd = new Integer(zString.substring(minusPosition + 1, zString.length())).intValue();
            } else {
                zStart = zEnd = new Integer(zString).intValue();
            }
            for (int x = xStart; x <= xEnd; x++) {
                for (int z = zStart; z <= zEnd; z++) {
                    terrain.setCoordinates(x, y, z);
                }
            }
        }
        if (lift != null) {
            float value = lift.getAttribute("value").getFloatValue();
            float step = lift.getAttribute("step").getFloatValue();
            terrain.setLiftValue(value);
            terrain.setLiftStep(step);
        }
        if (sink != null) {
            float value = lift.getAttribute("value").getFloatValue();
            terrain.setSink(value);
        }
        if (colorRed >= 0 && colorGreen >= 0 && colorBlue >= 0) {
            Color3f terrainColor = new Color3f(new Color(colorRed, colorGreen, colorBlue));
            terrain.setColor(terrainColor);
        }
        if (textureFileName != null)
            terrain.setTexture(textureFileName, textureScaleX, textureScaleZ);
        terrain.setVisible(visible);
        terrain.generateTerrain();
        terrains.add(terrain);
    } catch (ClassCastException e) {
        e.printStackTrace();
    } catch (DataConversionException e) {
        e.printStackTrace();
    }
}
