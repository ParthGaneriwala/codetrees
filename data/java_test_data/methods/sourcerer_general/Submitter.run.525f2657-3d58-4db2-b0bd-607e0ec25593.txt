@Override
public int run(String[] args) throws Exception {
    CommandLineParser cli = new CommandLineParser();
    if (args.length == 0) {
        cli.printUsage();
        return 1;
    }
    cli.addOption("input", false, "input path to the maps", "path");
    cli.addOption("output", false, "output path from the reduces", "path");
    cli.addOption("jar", false, "job jar file", "path");
    cli.addOption("inputformat", false, "java classname of InputFormat", "class");
    // cli.addArgument("javareader", false, "is the RecordReader in Java");
    cli.addOption("map", false, "java classname of Mapper", "class");
    cli.addOption("partitioner", false, "java classname of Partitioner", "class");
    cli.addOption("reduce", false, "java classname of Reducer", "class");
    cli.addOption("writer", false, "java classname of OutputFormat", "class");
    cli.addOption("program", false, "URI to application executable", "class");
    cli.addOption("reduces", false, "number of reduces", "num");
    cli.addOption("jobconf", false, "\"n1=v1,n2=v2,..\" (Deprecated) Optional. Add or override a JobConf property.", "key=val");
    Parser parser = cli.createParser();
    try {
        GenericOptionsParser genericParser = new GenericOptionsParser(getConf(), args);
        CommandLine results = parser.parse(genericParser.getRemainingArgs());
        JobConf job = new JobConf(getConf());
        if (results.hasOption("-input")) {
            FileInputFormat.setInputPaths(job, (String) results.getValue("-input"));
        }
        if (results.hasOption("-output")) {
            FileOutputFormat.setOutputPath(job, new Path((String) results.getValue("-output")));
        }
        if (results.hasOption("-jar")) {
            job.setJar((String) results.getValue("-jar"));
        }
        if (results.hasOption("-inputformat")) {
            setIsJavaRecordReader(job, true);
            job.setInputFormat(getClass(results, "-inputformat", job, InputFormat.class));
        }
        if (results.hasOption("-javareader")) {
            setIsJavaRecordReader(job, true);
        }
        if (results.hasOption("-map")) {
            setIsJavaMapper(job, true);
            job.setMapperClass(getClass(results, "-map", job, Mapper.class));
        }
        if (results.hasOption("-partitioner")) {
            job.setPartitionerClass(getClass(results, "-partitioner", job, Partitioner.class));
        }
        if (results.hasOption("-reduce")) {
            setIsJavaReducer(job, true);
            job.setReducerClass(getClass(results, "-reduce", job, Reducer.class));
        }
        if (results.hasOption("-reduces")) {
            job.setNumReduceTasks(Integer.parseInt((String) results.getValue("-reduces")));
        }
        if (results.hasOption("-writer")) {
            setIsJavaRecordWriter(job, true);
            job.setOutputFormat(getClass(results, "-writer", job, OutputFormat.class));
        }
        if (results.hasOption("-program")) {
            setExecutable(job, (String) results.getValue("-program"));
        }
        if (results.hasOption("-jobconf")) {
            LOG.warn("-jobconf option is deprecated, please use -D instead.");
            String options = (String) results.getValue("-jobconf");
            StringTokenizer tokenizer = new StringTokenizer(options, ",");
            while (tokenizer.hasMoreTokens()) {
                String keyVal = tokenizer.nextToken().trim();
                String[] keyValSplit = keyVal.split("=");
                job.set(keyValSplit[0], keyValSplit[1]);
            }
        }
        // if they gave us a jar file, include it into the class path
        String jarFile = job.getJar();
        if (jarFile != null) {
            final URL[] urls = new URL[] { FileSystem.getLocal(job).pathToFile(new Path(jarFile)).toURL() };
            // FindBugs complains that creating a URLClassLoader should be
            // in a doPrivileged() block.
            ClassLoader loader = AccessController.doPrivileged(new PrivilegedAction<ClassLoader>() {

                public ClassLoader run() {
                    return new URLClassLoader(urls);
                }
            });
            job.setClassLoader(loader);
        }
        runJob(job);
        return 0;
    } catch (OptionException oe) {
        cli.printUsage();
        return 1;
    }
}
