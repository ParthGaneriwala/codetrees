public boolean visitLeave(UnaryOperatorNode node) {
    newValueCode(node);
    ASMCodeFragment arg1;
    if ((node.getSymbol().isOperator(Operator.INC) || node.getSymbol().isOperator(Operator.DEC)) && node.child(0).getSymbol().isNonterminal(NonterminalGrammarSymbol.ARRAY)) {
        arg1 = removeAddressCode(node.child(0));
    } else {
        arg1 = removeValueCode(node.child(0));
    }
    code.append(arg1);
    // opcodeForOperator(node.getOperator());
    ASMOpcode opcode = opcodeForUnaryOperator(node);
    if (opcode == ASMOpcode.BNegate) {
        // type-dependent!
        code.add(opcode);
    } else if (opcode == ASMOpcode.Inc) {
        if (isMain) {
            // pass  "$-main-scope-space"
            code.add(PushD, "$-main-scope-space");
        } else {
            // "Mem-"+RoutineTable.lookup(uniRoutineCounter).getRoutineName()
            code.add(PushD, "Mem-" + RoutineTable.lookup(uniRoutineCounter).getRoutineName());
        }
        // passing parameter
        code.add(Exchange);
        if (node.child(0).getSymbol().isNonterminal(NonterminalGrammarSymbol.ARRAY)) {
            // [... main addr addr]
            code.add(Duplicate);
            // inc dec only applies to integer [... main addr value]
            code.add(LoadI);
            // [... main value addr]
            code.add(Exchange);
            if (isMain) {
                // pass  "$-main-scope-space"
                code.add(PushD, "$-main-scope-space");
            } else {
                // "Mem-"+RoutineTable.lookup(uniRoutineCounter).getRoutineName()
                code.add(PushD, "Mem-" + RoutineTable.lookup(uniRoutineCounter).getRoutineName());
            }
            // [... main value addr main]
            // [... main value offset]
            code.add(Subtract);
        } else
            code.add(PushI, node.child(0).getBinding().getMemoryLocation().getOffset());
        // passing parameter
        code.add(Exchange);
        // passing parametercall//call subroutine					// type-dependent!
        code.add(Call, "$-increment-++-routine");
        // now the top of the stack should be (initial value of a)+1
        if (node.nChildren() == 2) {
            // a++  recovery to the initial value of a
            code.add(PushI, 1);
            code.add(Subtract);
        }
    } else if (opcode == ASMOpcode.Dec) {
        if (isMain) {
            // pass  "$-main-scope-space"
            code.add(PushD, "$-main-scope-space");
        } else {
            // "Mem-"+RoutineTable.lookup(uniRoutineCounter).getRoutineName()
            code.add(PushD, "Mem-" + RoutineTable.lookup(uniRoutineCounter).getRoutineName());
        }
        // passing parameter
        code.add(Exchange);
        if (node.child(0).getSymbol().isNonterminal(NonterminalGrammarSymbol.ARRAY)) {
            // [... main addr addr]
            code.add(Duplicate);
            // inc dec only applies to integer [... main addr value]
            code.add(LoadI);
            // [... main value addr]
            code.add(Exchange);
            if (isMain) {
                // pass  "$-main-scope-space"
                code.add(PushD, "$-main-scope-space");
            } else {
                // "Mem-"+RoutineTable.lookup(uniRoutineCounter).getRoutineName()
                code.add(PushD, "Mem-" + RoutineTable.lookup(uniRoutineCounter).getRoutineName());
            }
            // [... main value addr main]
            // [... main value offset]
            code.add(Subtract);
        } else
            code.add(PushI, node.child(0).getBinding().getMemoryLocation().getOffset());
        // passing parameter
        code.add(Exchange);
        // passing parametercall//call subroutine
        code.add(Call, "$-decrement----routine");
        if (node.nChildren() == 2) {
            code.add(PushI, 1);
            code.add(Add);
        }
    } else if (opcode == ASMOpcode.Positive) {
    // do nothing since +1 == 1
    } else if (opcode == ASMOpcode.FNegate || opcode == ASMOpcode.Negate) {
        code.add(opcode);
    } else
        assert false : "illegal unary operator!";
    return true;
}
