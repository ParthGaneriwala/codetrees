protected double updateCloudetProcessingWithoutSchedulingFutureEventsForce() {
    double currentTime = CloudSim.clock();
    double minTime = Double.MAX_VALUE;
    double timeDiff = currentTime - getLastProcessTime();
    double timeFrameDatacenterEnergy = 0.0;
    Log.printLine("\n\n--------------------------------------------------------------\n\n");
    Log.formatLine("New resource usage for the time frame starting at %.2f:", currentTime);
    for (PowerHost host : this.<PowerHost>getHostList()) {
        Log.printLine();
        // inform VMs to update processing
        double time = host.updateVmsProcessing(currentTime);
        if (time < minTime) {
            minTime = time;
        }
        Log.formatLine("%.2f: [Host #%d] utilization is %.2f%%", currentTime, host.getId(), host.getUtilizationOfCpu() * 100);
    }
    if (timeDiff > 0) {
        Log.formatLine("\nEnergy consumption for the last time frame from %.2f to %.2f:", getLastProcessTime(), currentTime);
        for (PowerHost host : this.<PowerHost>getHostList()) {
            double previousUtilizationOfCpu = host.getPreviousUtilizationOfCpu();
            double utilizationOfCpu = host.getUtilizationOfCpu();
            double timeFrameHostEnergy = host.getEnergyLinearInterpolation(previousUtilizationOfCpu, utilizationOfCpu, timeDiff);
            timeFrameDatacenterEnergy += timeFrameHostEnergy;
            Log.printLine();
            Log.formatLine("%.2f: [Host #%d] utilization at %.2f was %.2f%%, now is %.2f%%", currentTime, host.getId(), getLastProcessTime(), previousUtilizationOfCpu * 100, utilizationOfCpu * 100);
            Log.formatLine("%.2f: [Host #%d] energy is %.2f W*sec", currentTime, host.getId(), timeFrameHostEnergy);
        }
        Log.formatLine("\n%.2f: Data center's energy is %.2f W*sec\n", currentTime, timeFrameDatacenterEnergy);
    }
    setPower(getPower() + timeFrameDatacenterEnergy);
    checkCloudletCompletion();
    /**
     * Remove completed VMs *
     */
    for (PowerHost host : this.<PowerHost>getHostList()) {
        for (Vm vm : host.getCompletedVms()) {
            getVmAllocationPolicy().deallocateHostForVm(vm);
            getVmList().remove(vm);
            Log.printLine("VM #" + vm.getId() + " has been deallocated from host #" + host.getId());
        }
    }
    Log.printLine();
    setLastProcessTime(currentTime);
    return minTime;
}
