public String savePackageDetailReview() {
    System.out.println("savePackageDetailReview()");
    PackageDetail packageDetailAux = packageDetailManager.get(packageDetail.getId());
    if (packageDetail.getRealQuantity() > 0 && packageDetail.getRealQuantity() <= packageDetailAux.getQuantity()) {
        Double incr = 0.0D;
        if (packageDetailAux.getRealQuantity() == 0) {
            incr = packageDetail.getRealQuantity() - packageDetailAux.getQuantity();
        } else {
            incr = packageDetail.getRealQuantity() - packageDetailAux.getRealQuantity();
        }
        packageDetailAux.setStock(packageDetailAux.getStock() + incr);
        if (packageDetailAux.getRealQuantity() <= 0) {
            packageDetailAux.setRealQuantity(packageDetail.getRealQuantity());
        } else {
            packageDetailAux.setRealQuantity(packageDetailAux.getRealQuantity() + incr);
        }
        PurchaseDetail purchaseDetail = packageDetailAux.getPurchaseDetail();
        Double incrPurchase = (purchaseDetail.getQuantityFail() + ((-1) * incr)) - purchaseDetail.getQuantityFail();
        purchaseDetail.setQuantityFail(purchaseDetail.getQuantityFail() + incrPurchase);
        purchaseDetail.setDiscountXfail(purchaseDetail.getDiscountXfail() + incrPurchase * purchaseDetail.getUnitPrice());
        purchaseDetail.setTotalPrice(purchaseDetail.getTotalPrice() - (incrPurchase * purchaseDetail.getUnitPrice()));
        purchaseDetail.setCurrentQuantity(purchaseDetail.getCurrentQuantity() + (purchaseDetail.getQuantityFail() - purchaseDetail.getCurrentQuantity()));
        Purchase purchase = purchaseDetail.getPurchase();
        purchase.setDiscountXfail(purchase.getDiscountXfail() + (incrPurchase * purchaseDetail.getUnitPrice()));
        purchase.setRestPrice(purchase.getRestPrice() - (incrPurchase * purchaseDetail.getUnitPrice()));
        purchase = purchaseManager.save(purchase);
        if (incrPurchase * purchaseDetail.getUnitPrice() > 0) {
            PurchasePayment purchasePayment = new PurchasePayment();
            purchasePayment.setAmount(incrPurchase * purchaseDetail.getUnitPrice());
            purchasePayment.setAmountLeft(purchase.getRestPrice());
            purchasePayment.setObservation(getText("purchasePayment.packageDetail.discountFail"));
            purchasePayment.setDate(purchase.getDate());
            purchasePayment.setTypePayment(2);
            purchasePayment.setPurchase(purchase);
            purchasePaymentManager.save(purchasePayment);
        } else {
            if (incrPurchase * purchaseDetail.getUnitPrice() < 0) {
                PurchasePayment purchasePayment = new PurchasePayment();
                purchasePayment.setIncrementAmount((-1) * (incrPurchase * purchaseDetail.getUnitPrice()));
                purchasePayment.setAmountLeft(purchase.getRestPrice());
                purchasePayment.setObservation(getText("purchasePayment.packageDetail.discountIncremtFail"));
                purchasePayment.setDate(purchase.getDate());
                // view type of payment into PurchasePayment class
                purchasePayment.setTypePayment(4);
                purchasePayment.setPurchase(purchase);
                purchasePaymentManager.save(purchasePayment);
            }
        }
        purchaseDetailManager.save(purchaseDetail);
        packageDetailManager.save(packageDetailAux);
        StorageMaterial storageMaterial = packageDetailAux.getStorageMaterial();
        storageMaterial.setStock(storageMaterial.getStock() + incr);
        storageMaterialManager.save(storageMaterial);
        System.out.println("End savePackageDetailReview()");
        return SUCCESS;
    }
    return ERROR;
}
