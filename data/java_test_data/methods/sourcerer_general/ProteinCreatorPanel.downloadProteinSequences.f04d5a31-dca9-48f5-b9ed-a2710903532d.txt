public void downloadProteinSequences(Vector<QuantitativeProtein> aProteins) {
    progressBar.setString("Downloading protein sequences");
    progressBar.setStringPainted(true);
    progressBar.setMaximum(aProteins.size());
    progressBar.setIndeterminate(false);
    Vector<QuantitativeProtein> lProteins = (Vector<QuantitativeProtein>) aProteins.clone();
    if (iQuantitativeValidationSingelton.getDatabaseType().equals(ProteinDatabaseType.LOCAL)) {
        progressBar.setString("Finding protein sequences in local FASTA file");
        // find the sequences in the fasta file
        try {
            // create the reader
            FileReader fDbReader = new FileReader(iQuantitativeValidationSingelton.getFastaDatabaseLocation());
            // create the line reader
            LineNumberReader lnreader = new LineNumberReader(fDbReader);
            // the current line
            String lLine = "";
            // create the header and the sequence strings
            String lHeader = "";
            String lSequence = "";
            int lCounter = 0;
            while ((lLine = lnreader.readLine()) != null) {
                lCounter = lCounter + 1;
                if (lLine.startsWith(">")) {
                    // find the previous one
                    if (lHeader.length() != 0 && lSequence.length() != 0) {
                        for (int i = 0; i < lProteins.size(); i++) {
                            if (lHeader.indexOf(lProteins.get(i).getAccession()) >= 0) {
                                progressBar.setValue(progressBar.getValue() + 1);
                                QuantitativeProtein lProtein = lProteins.get(i);
                                lProtein.setSequence(lSequence);
                                lProtein.setSequenceLength(lSequence.length());
                                lProtein.getPeptideGroups(true);
                                lProteins.remove(lProtein);
                                i = lProteins.size();
                            }
                        }
                    }
                    lSequence = "";
                    lHeader = lLine;
                } else if (!lLine.equalsIgnoreCase("\n")) {
                    lSequence = lSequence + lLine.replace("\n", "");
                }
            }
        } catch (IOException e) {
            logger.error(e.getMessage(), e);
        }
    } else {
        for (int i = 0; i < lProteins.size(); i++) {
            progressBar.setValue(progressBar.getValue() + 1);
            QuantitativeProtein lProtein = lProteins.get(i);
            try {
                if (lProtein.getSequence() == null) {
                    if (iQuantitativeValidationSingelton.getDatabaseType().equals(ProteinDatabaseType.UNIPROT)) {
                        lProtein.setSequence((new UniprotSequenceRetriever(lProtein.getAccession())).getSequence());
                    } else if (iQuantitativeValidationSingelton.getDatabaseType().equals(ProteinDatabaseType.IPI)) {
                        lProtein.setSequence((new IpiSequenceRetriever(lProtein.getAccession())).getSequence());
                    } else if (iQuantitativeValidationSingelton.getDatabaseType().equals(ProteinDatabaseType.NCBI)) {
                        lProtein.setSequence((new NcbiSequenceRetriever(lProtein.getAccession())).getSequence());
                    } else if (iQuantitativeValidationSingelton.getDatabaseType().equals(ProteinDatabaseType.TAIR)) {
                        lProtein.setSequence((new TairSequenceRetriever(lProtein.getAccession())).getSequence());
                    }
                }
                if (lProtein.getSequence() != null && lProtein.getSequence().length() > 0) {
                    lProtein.getPeptideGroups(true);
                    lProtein.setSequenceLength(lProtein.getSequence().length());
                    iQuantitativeValidationSingelton.addProteinSequence(lProtein.getAccession(), lProtein.getSequence());
                    lProtein.setSequence("");
                }
            } catch (Exception e) {
                logger.error(e.getMessage(), e);
            }
        }
    }
}
