protected int executeUpdate(String sql, boolean isBatch, boolean returnGeneratedKeys) throws SQLException {
    checkClosed();
    MySQLConnection locallyScopedConn = this.connection;
    char firstStatementChar = StringUtils.firstAlphaCharUc(sql, findStartOfStatement(sql));
    ResultSetInternalMethods rs = null;
    synchronized (locallyScopedConn.getMutex()) {
        this.retrieveGeneratedKeys = returnGeneratedKeys;
        resetCancelledState();
        checkNullOrEmptyQuery(sql);
        if (this.doEscapeProcessing) {
            Object escapedSqlResult = EscapeProcessor.escapeSQL(sql, this.connection.serverSupportsConvertFn(), this.connection);
            if (escapedSqlResult instanceof String) {
                sql = (String) escapedSqlResult;
            } else {
                sql = ((EscapeProcessorResult) escapedSqlResult).escapedSql;
            }
        }
        if (locallyScopedConn.isReadOnly()) {
            throw SQLError.createSQLException(Messages.getString(// $NON-NLS-1$
            "Statement.42") + // $NON-NLS-1$
            Messages.getString("Statement.43"), SQLError.SQL_STATE_ILLEGAL_ARGUMENT, // $NON-NLS-1$
            getExceptionInterceptor());
        }
        if (StringUtils.startsWithIgnoreCaseAndWs(sql, "select")) {
            // $NON-NLS-1$
            throw SQLError.createSQLException(Messages.getString(// $NON-NLS-1$
            "Statement.46"), "01S03", // $NON-NLS-1$
            getExceptionInterceptor());
        }
        if (this.results != null) {
            if (!locallyScopedConn.getHoldResultsOpenOverStatementClose()) {
                this.results.realClose(false);
            }
        }
        // The checking and changing of catalogs
        // must happen in sequence, so synchronize
        // on the same mutex that _conn is using
        CancelTask timeoutTask = null;
        String oldCatalog = null;
        try {
            if (locallyScopedConn.getEnableQueryTimeouts() && this.timeoutInMillis != 0 && locallyScopedConn.versionMeetsMinimum(5, 0, 0)) {
                timeoutTask = new CancelTask(this);
                locallyScopedConn.getCancelTimer().schedule(timeoutTask, this.timeoutInMillis);
            }
            if (!locallyScopedConn.getCatalog().equals(this.currentCatalog)) {
                oldCatalog = locallyScopedConn.getCatalog();
                locallyScopedConn.setCatalog(this.currentCatalog);
            }
            // 
            if (locallyScopedConn.useMaxRows()) {
                executeSimpleNonQuery(locallyScopedConn, "SET OPTION SQL_SELECT_LIMIT=DEFAULT");
            }
            rs = locallyScopedConn.execSQL(this, sql, -1, null, java.sql.ResultSet.TYPE_FORWARD_ONLY, java.sql.ResultSet.CONCUR_READ_ONLY, false, this.currentCatalog, null, /* force read of field info on DML */
            isBatch);
            if (timeoutTask != null) {
                if (timeoutTask.caughtWhileCancelling != null) {
                    throw timeoutTask.caughtWhileCancelling;
                }
                timeoutTask.cancel();
                locallyScopedConn.getCancelTimer().purge();
                timeoutTask = null;
            }
            synchronized (this.cancelTimeoutMutex) {
                if (this.wasCancelled) {
                    SQLException cause = null;
                    if (this.wasCancelledByTimeout) {
                        cause = new MySQLTimeoutException();
                    } else {
                        cause = new MySQLStatementCancelledException();
                    }
                    resetCancelledState();
                    throw cause;
                }
            }
        } finally {
            if (timeoutTask != null) {
                timeoutTask.cancel();
                locallyScopedConn.getCancelTimer().purge();
            }
            if (oldCatalog != null) {
                locallyScopedConn.setCatalog(oldCatalog);
            }
        }
    }
    this.results = rs;
    rs.setFirstCharOfQuery(firstStatementChar);
    this.updateCount = rs.getUpdateCount();
    int truncatedUpdateCount = 0;
    if (this.updateCount > Integer.MAX_VALUE) {
        truncatedUpdateCount = Integer.MAX_VALUE;
    } else {
        truncatedUpdateCount = (int) this.updateCount;
    }
    this.lastInsertId = rs.getUpdateID();
    return truncatedUpdateCount;
}
