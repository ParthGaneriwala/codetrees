private String buildWikiSignature(ParserInput parserInput, ParserOutput parserOutput, int mode, boolean includeUser, boolean includeDate) {
    try {
        String signature = "";
        if (includeUser) {
            String login = parserInput.getUserIpAddress();
            String email = parserInput.getUserIpAddress();
            String displayName = parserInput.getUserIpAddress();
            String userId = "-1";
            WikiUser user = parserInput.getWikiUser();
            if (user != null && !StringUtils.isBlank(user.getUsername())) {
                login = user.getUsername();
                displayName = (!StringUtils.isBlank(user.getDisplayName())) ? user.getDisplayName() : login;
                WikiUserInfo userInfo = WikiBase.getUserHandler().lookupWikiUserInfo(login);
                email = userInfo.getEmail();
                userId = Integer.toString(user.getUserId());
            }
            if (login == null || email == null || displayName == null) {
                logger.info("Signature tagged parsed without user information available, returning empty");
                return "";
            }
            MessageFormat formatter = new MessageFormat(Environment.getValue(Environment.PROP_PARSER_SIGNATURE_USER_PATTERN));
            Object[] params = new Object[7];
            params[0] = NamespaceHandler.NAMESPACE_USER + NamespaceHandler.NAMESPACE_SEPARATOR + login;
            // FIXME - hard coding
            params[1] = NamespaceHandler.NAMESPACE_SPECIAL + NamespaceHandler.NAMESPACE_SEPARATOR + "Contributions?contributor=" + login;
            params[2] = NamespaceHandler.NAMESPACE_USER_COMMENTS + NamespaceHandler.NAMESPACE_SEPARATOR + login;
            params[3] = login;
            params[4] = displayName;
            params[5] = email;
            params[6] = userId;
            signature = formatter.format(params);
            // parse signature as link in order to store link metadata
            WikiLinkTag wikiLinkTag = new WikiLinkTag();
            wikiLinkTag.parse(parserInput, parserOutput, mode, signature);
            if (mode != JFlexParser.MODE_MINIMAL) {
                signature = JFlexParserUtil.parseFragment(parserInput, signature, mode);
            }
        }
        if (includeUser && includeDate) {
            signature += " ";
        }
        if (includeDate) {
            SimpleDateFormat format = new SimpleDateFormat();
            format.applyPattern(Environment.getValue(Environment.PROP_PARSER_SIGNATURE_DATE_PATTERN));
            signature += format.format(new java.util.Date());
        }
        return signature;
    } catch (Exception e) {
        logger.severe("Failure while building wiki signature", e);
        // FIXME - return empty or a failure indicator?
        return "";
    }
}
