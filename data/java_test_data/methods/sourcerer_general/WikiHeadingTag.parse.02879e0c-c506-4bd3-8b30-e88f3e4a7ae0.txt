public String parse(ParserInput parserInput, ParserOutput parserOutput, int mode, String raw) {
    try {
        int level = 0;
        if (raw.startsWith("=====") && raw.endsWith("=====")) {
            level = 5;
        } else if (raw.startsWith("====") && raw.endsWith("====")) {
            level = 4;
        } else if (raw.startsWith("===") && raw.endsWith("===")) {
            level = 3;
        } else if (raw.startsWith("==") && raw.endsWith("==")) {
            level = 2;
        } else if (raw.startsWith("=") && raw.endsWith("=")) {
            level = 1;
        } else {
            return raw;
        }
        String tagText = raw.substring(level, raw.length() - level).trim();
        ParserInput tmpParserInput = new ParserInput(parserInput);
        String tocText = JFlexParserUtil.parseFragment(tmpParserInput, tagText, JFlexParser.MODE_PROCESS);
        tocText = Utilities.stripMarkup(tocText);
        String tagName = parserInput.getTableOfContents().checkForUniqueName(tocText);
        if (mode <= JFlexParser.MODE_SLICE) {
            parserOutput.setSectionName(Utilities.encodeForURL(tagName));
            return raw;
        }
        String output = this.updateToc(parserInput, tagName, tocText, level);
        int nextSection = parserInput.getTableOfContents().size();
        output += this.buildSectionEditLink(parserInput, nextSection);
        output += "<a name=\"" + Utilities.encodeForURL(tagName) + "\"></a>";
        output += "<h" + level + ">";
        output += JFlexParserUtil.parseFragment(parserInput, tagText, mode);
        output += "</h" + level + ">";
        return output.toString();
    } catch (Throwable t) {
        logger.info("Unable to parse " + raw, t);
        return raw;
    }
}
