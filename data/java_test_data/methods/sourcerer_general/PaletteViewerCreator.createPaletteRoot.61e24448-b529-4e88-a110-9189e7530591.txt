public PaletteRoot createPaletteRoot() {
    PaletteRoot root = new PaletteRoot();
    PaletteGroup toolGroup = new PaletteGroup(ChemeConstants.PALETTE_MAIN_GROUP_LABEL);
    // ----------------------------------------------------------------------
    ToolEntry toolEntry = new ChemeSelectionToolEntry();
    toolGroup.add(toolEntry);
    root.setDefaultEntry(toolEntry);
    root.add(toolGroup);
    PaletteDrawer drawer = new PaletteDrawer(ChemeConstants.PALETTE_PROCESS_UNIT_GROUP_LABEL);
    // ----------------------------------------------------------------------
    toolEntry = new CombinedTemplateCreationEntry(ChemeConstants.PALETTE_ITEM_MIXER_LABEL, ChemeConstants.PALETTE_ITEM_MIXER_DESC, Mixer.class, new SimpleFactory(Mixer.class), ChemeConstants.DESC_MIXER, ChemeConstants.DESC_MIXER);
    drawer.add(toolEntry);
    toolEntry = new CombinedTemplateCreationEntry(ChemeConstants.PALETTE_ITEM_SEPARATOR_LABEL, ChemeConstants.PALETTE_ITEM_SEPARATOR_DESC, Separator.class, new SimpleFactory(Separator.class), ChemeConstants.DESC_SEPARATOR, ChemeConstants.DESC_SEPARATOR);
    drawer.add(toolEntry);
    toolEntry = new CombinedTemplateCreationEntry(ChemeConstants.PALETTE_ITEM_HEAT_EXCHANGER_WITH_SOURCE_LABEL, ChemeConstants.PALETTE_ITEM_HEAT_EXCHANGER_WITH_SOURCE_DESC, HeatExchangerWithSource.class, new SimpleFactory(HeatExchangerWithSource.class), ChemeConstants.DESC_HEAT_EXCHANGER_WITH_UTILITY, ChemeConstants.DESC_HEAT_EXCHANGER_WITH_UTILITY);
    drawer.add(toolEntry);
    toolEntry = new CombinedTemplateCreationEntry(ChemeConstants.PALETTE_ITEM_HEAT_EXCHANGER_NO_SOURCE_LABEL, ChemeConstants.PALETTE_ITEM_HEAT_EXCHANGER_NO_SOURCE_DESC, HeatExchangerNoSource.class, new SimpleFactory(HeatExchangerNoSource.class), ChemeConstants.DESC_HEAT_EXCHANGER_NO_UTILITY, ChemeConstants.DESC_HEAT_EXCHANGER_NO_UTILITY);
    drawer.add(toolEntry);
    /*toolEntry = new CombinedTemplateCreationEntry(
				ChemeConstants.PALETTE_ITEM_SPLIT_JOIN_LABEL,
				ChemeConstants.PALETTE_ITEM_SPLIT_JOIN_DESC, SplitJoin.class,
				new SimpleFactory(SplitJoin.class),
				ChemeConstants.DESC_SPLIT_JOIN, ChemeConstants.DESC_SPLIT_JOIN);
		drawer.add(toolEntry);*/
    root.add(drawer);
    // ----------------------------------------------------------------------
    drawer = new PaletteDrawer(ChemeConstants.PALETTE_SUBPROCESS_GROUP_LABEL);
    /*toolEntry = new CreateGroupToolEntry(
				ChemeConstants.PALETTE_ITEM_SUBPROCESS_LABEL,
				ChemeConstants.PALETTE_ITEM_SUBPROCESS_DESC, new SimpleFactory(
						Subprocess.class));
		drawer.add(toolEntry);

		root.add(drawer);*/
    // ----------------------------------------------------------------------
    drawer = new PaletteDrawer(ChemeConstants.PALETTE_CHEMICAL_STREAM_GROUP_LABEL);
    StreamCreationToolEntry arrowConnxCreationEntry = new StreamCreationToolEntry(ChemeConstants.PALETTE_ITEM_CHEMICAL_STREAM_LABEL, ChemeConstants.PALETTE_ITEM_CHEMICAL_STREAM_DESC, new CreationFactory() {

        public Object getNewObject() {
            return ModelFactory.createModelElement(ProcessModelConstants.STREAM, null);
        }

        public Object getObjectType() {
            return Stream.class;
        }
    }, ChemeConstants.DESC_STREAM, ChemeConstants.DESC_STREAM);
    drawer.add(arrowConnxCreationEntry);
    arrowConnxCreationEntry = new StreamCreationToolEntry(ChemeConstants.PALETTE_ITEM_HEAT_EXCHANGER_STREAM_LABEL, ChemeConstants.PALETTE_ITEM_HEAT_EXCHANGER_WITH_SOURCE_DESC, new CreationFactory() {

        public Object getNewObject() {
            return ModelFactory.createModelElement(ProcessModelConstants.HEAT_EXCHANGER_STREAM, null);
        }

        public Object getObjectType() {
            return HeatExchangerStream.class;
        }
    }, ChemeConstants.DESC_HEAT_EXCHANGER_STREAM, ChemeConstants.DESC_HEAT_EXCHANGER_STREAM);
    drawer.add(arrowConnxCreationEntry);
    root.add(drawer);
    return root;
}
