public void run() {
    synchronized (ioLock) {
        if (plannedAnswer == in) {
            plannedAnswer = null;
        }
        // We use these sets to prevent duplicate records
        // FIXME - This should be moved into DNSOutgoing
        HashSet questions = new HashSet();
        HashSet answers = new HashSet();
        if (state == DNSState.ANNOUNCED) {
            try {
                long now = System.currentTimeMillis();
                // =now+DNSConstants.KNOWN_ANSWER_TTL;
                long expirationTime = now + 1;
                boolean isUnicast = (port != DNSConstants.MDNS_PORT);
                // Answer questions
                for (Iterator iterator = in.questions.iterator(); iterator.hasNext(); ) {
                    DNSEntry entry = (DNSEntry) iterator.next();
                    if (entry instanceof DNSQuestion) {
                        DNSQuestion q = (DNSQuestion) entry;
                        // for unicast responses the question must be included
                        if (isUnicast) {
                            // out.addQuestion(q);
                            questions.add(q);
                        }
                        int type = q.type;
                        if (type == DNSConstants.TYPE_ANY || type == DNSConstants.TYPE_SRV) {
                            // I ama not sure of why there is a special case here [PJYF Oct 15 2004]
                            if (localHost.getName().equalsIgnoreCase(q.getName())) {
                                // type = DNSConstants.TYPE_A;
                                DNSRecord answer = localHost.getDNS4AddressRecord();
                                if (answer != null) {
                                    answers.add(answer);
                                }
                                answer = localHost.getDNS6AddressRecord();
                                if (answer != null) {
                                    answers.add(answer);
                                }
                                type = DNSConstants.TYPE_IGNORE;
                            } else {
                                if (serviceTypes.containsKey(q.getName().toLowerCase())) {
                                    type = DNSConstants.TYPE_PTR;
                                }
                            }
                        }
                        switch(type) {
                            case DNSConstants.TYPE_A:
                                {
                                    // Answer a query for a domain name
                                    // out = addAnswer( in, addr, port, out, host );
                                    DNSRecord answer = localHost.getDNS4AddressRecord();
                                    if (answer != null) {
                                        answers.add(answer);
                                    }
                                    break;
                                }
                            case DNSConstants.TYPE_AAAA:
                                {
                                    // Answer a query for a domain name
                                    DNSRecord answer = localHost.getDNS6AddressRecord();
                                    if (answer != null) {
                                        answers.add(answer);
                                    }
                                    break;
                                }
                            case DNSConstants.TYPE_PTR:
                                {
                                    // find matching services
                                    for (Iterator serviceIterator = services.values().iterator(); serviceIterator.hasNext(); ) {
                                        ServiceInfo info = (ServiceInfo) serviceIterator.next();
                                        if (info.getState() == DNSState.ANNOUNCED) {
                                            if (q.name.equalsIgnoreCase(info.type)) {
                                                DNSRecord answer = localHost.getDNS4AddressRecord();
                                                if (answer != null) {
                                                    answers.add(answer);
                                                }
                                                answer = localHost.getDNS6AddressRecord();
                                                if (answer != null) {
                                                    answers.add(answer);
                                                }
                                                answers.add(new DNSRecord.Pointer(info.type, DNSConstants.TYPE_PTR, DNSConstants.CLASS_IN, DNSConstants.DNS_TTL, info.getQualifiedName()));
                                                answers.add(new DNSRecord.Service(info.getQualifiedName(), DNSConstants.TYPE_SRV, DNSConstants.CLASS_IN | DNSConstants.CLASS_UNIQUE, DNSConstants.DNS_TTL, info.priority, info.weight, info.port, localHost.getName()));
                                                answers.add(new DNSRecord.Text(info.getQualifiedName(), DNSConstants.TYPE_TXT, DNSConstants.CLASS_IN | DNSConstants.CLASS_UNIQUE, DNSConstants.DNS_TTL, info.text));
                                            }
                                        }
                                    }
                                    if (q.name.equalsIgnoreCase("_services._mdns._udp.local.")) {
                                        for (Iterator serviceTypeIterator = serviceTypes.values().iterator(); serviceTypeIterator.hasNext(); ) {
                                            answers.add(new DNSRecord.Pointer("_services._mdns._udp.local.", DNSConstants.TYPE_PTR, DNSConstants.CLASS_IN, DNSConstants.DNS_TTL, (String) serviceTypeIterator.next()));
                                        }
                                    }
                                    break;
                                }
                            case DNSConstants.TYPE_SRV:
                            case DNSConstants.TYPE_ANY:
                            case DNSConstants.TYPE_TXT:
                                {
                                    ServiceInfo info = (ServiceInfo) services.get(q.name.toLowerCase());
                                    if (info != null && info.getState() == DNSState.ANNOUNCED) {
                                        DNSRecord answer = localHost.getDNS4AddressRecord();
                                        if (answer != null) {
                                            answers.add(answer);
                                        }
                                        answer = localHost.getDNS6AddressRecord();
                                        if (answer != null) {
                                            answers.add(answer);
                                        }
                                        answers.add(new DNSRecord.Pointer(info.type, DNSConstants.TYPE_PTR, DNSConstants.CLASS_IN, DNSConstants.DNS_TTL, info.getQualifiedName()));
                                        answers.add(new DNSRecord.Service(info.getQualifiedName(), DNSConstants.TYPE_SRV, DNSConstants.CLASS_IN | DNSConstants.CLASS_UNIQUE, DNSConstants.DNS_TTL, info.priority, info.weight, info.port, localHost.getName()));
                                        answers.add(new DNSRecord.Text(info.getQualifiedName(), DNSConstants.TYPE_TXT, DNSConstants.CLASS_IN | DNSConstants.CLASS_UNIQUE, DNSConstants.DNS_TTL, info.text));
                                    }
                                    break;
                                }
                            default:
                                {
                                    // System.out.println("JmDNSResponder.unhandled query:"+q);
                                    break;
                                }
                        }
                    }
                }
                // the correct value. (See Draft Cheshire chapter 7.1.).
                for (Iterator i = in.answers.iterator(); i.hasNext(); ) {
                    DNSRecord knownAnswer = (DNSRecord) i.next();
                    if (knownAnswer.ttl > DNSConstants.DNS_TTL / 2 && answers.remove(knownAnswer)) {
                        logger.log(Level.FINER, "JmDNS Responder Known Answer Removed");
                    }
                }
                // responde if we have answers
                if (answers.size() != 0) {
                    logger.finer("run() JmDNS responding");
                    DNSOutgoing out = null;
                    if (isUnicast) {
                        out = new DNSOutgoing(DNSConstants.FLAGS_QR_RESPONSE | DNSConstants.FLAGS_AA, false);
                    }
                    for (Iterator i = questions.iterator(); i.hasNext(); ) {
                        out.addQuestion((DNSQuestion) i.next());
                    }
                    for (Iterator i = answers.iterator(); i.hasNext(); ) {
                        out = addAnswer(in, addr, port, out, (DNSRecord) i.next());
                    }
                    send(out);
                }
                cancel();
            } catch (Throwable e) {
                logger.log(Level.WARNING, "run() exception ", e);
                close();
            }
        }
    }
}
