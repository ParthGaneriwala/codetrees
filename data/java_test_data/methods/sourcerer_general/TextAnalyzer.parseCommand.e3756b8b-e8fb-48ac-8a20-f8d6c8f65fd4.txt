public String parseCommand(String command) {
    importCandidate = "";
    amendedCommand = command;
    declVars = Collections.emptyList();
    // AST rootAST;
    EntityResolver resolver = getResolver();
    TextParser parser = new TextParser(resolver, command);
    // check if it's an import statement
    try {
        parser.parseImportStatement();
        if (parser.atEnd()) {
            amendedCommand = "";
            importCandidate = command;
            return null;
        }
    } catch (Exception e) {
    }
    CodepadVarParser vparser = new CodepadVarParser(resolver, command);
    try {
        if (vparser.parseVariableDeclarations() != null) {
            declVars = vparser.getVariables();
            if (!declVars.isEmpty()) {
                for (DeclaredVar var : declVars) {
                    if (!var.isInitialized() && !var.isFinal()) {
                        amendedCommand += "\n" + var.getName();
                        String text;
                        JavaType declVarType = var.getDeclaredType();
                        if (declVarType.isPrimitive()) {
                            if (declVarType.isNumeric()) {
                                text = " = 0";
                            } else {
                                text = " = false";
                            }
                        } else {
                            // reference type
                            text = " = null";
                        }
                        amendedCommand += text + ";\n";
                    }
                }
                // not an expression
                return null;
            }
        }
    } catch (Exception e) {
    }
    // Check if it's an expression
    parser = new TextParser(resolver, command);
    try {
        parser.parseExpression();
        if (parser.atEnd()) {
            JavaEntity exprType = parser.getExpressionType();
            if (exprType == null) {
                return "";
            } else {
                return exprType.resolveAsValue().getType().toString();
            }
        }
    } catch (Exception e) {
    }
    return null;
}
