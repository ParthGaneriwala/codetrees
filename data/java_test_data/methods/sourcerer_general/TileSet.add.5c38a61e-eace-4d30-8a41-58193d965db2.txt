public void add(final Tile tile) {
    // this will be the new set
    ArrayList<Tile> regions;
    Iterator<Tile> iterator;
    Rectangle intersection;
    ArrayList<Tile> splits;
    Map<Object, ArrayList<Tile>> table;
    Rectangle rectangle;
    Rectangle r;
    int size;
    Tile test;
    regions = new ArrayList<Tile>();
    table = new HashMap<Object, ArrayList<Tile>>();
    rectangle = tile.getBounds();
    for (Tile rover : mRegions) {
        if (rover.getValid()) {
            ArrayList<Tile> siblings;
            r = rover.getBounds();
            if (r.intersects(rectangle)) {
                intersection = r.intersection(rectangle);
                if (!intersection.equals(rover)) {
                    // incoming lies completely within the existing tile
                    // or touches the existing tile somehow
                    splits = split(tile, rover, false);
                    siblings = table.get(rover.getIdentity());
                    if (null == siblings) {
                        siblings = new ArrayList<Tile>();
                        table.put(rover.getIdentity(), siblings);
                    }
                    for (int i = 0; i < splits.size(); i++) {
                        rover = splits.get(i);
                        regions.add(rover);
                        siblings.add(rover);
                    }
                } else
                    // incoming covers existing... drop the existing tile
                    rover.setValid(false);
            } else {
                // no conflict, keep the existing
                regions.add(rover);
                siblings = table.get(rover.getIdentity());
                if (null == siblings) {
                    siblings = new ArrayList<Tile>();
                    table.put(rover.getIdentity(), siblings);
                }
                siblings.add(rover);
            }
        }
    }
    regions.add(tile);
    // OK, see if we can amalgamate any siblings
    for (ArrayList<Tile> siblings : table.values()) {
        for (int i = 0; i < siblings.size(); i++) {
            Tile rover;
            rover = siblings.get(i);
            r = rover.getBounds();
            for (int j = i; j < siblings.size(); j++) {
                test = siblings.get(j);
                rectangle = test.getBounds();
                if ((r.x == rectangle.x) && (r.width == rectangle.width)) {
                    // x extent matches, check if top and bottom coincide
                    if (r.y == (rectangle.y + rectangle.height)) {
                        // tile above rover, set top up
                        r.y = rectangle.y;
                        r.height += rectangle.height;
                        regions.remove(test);
                        siblings.remove(test);
                        j--;
                    } else if (rectangle.y == (r.y + r.height)) {
                        // tile below rover, set bottom down
                        r.height += rectangle.height;
                        regions.remove(test);
                        siblings.remove(test);
                        j--;
                    }
                } else if ((r.y == rectangle.y) && (r.height == rectangle.height)) {
                    // y extent matches, check if left and right coincide
                    if (r.x == (rectangle.x + rectangle.width)) {
                        // tile to left of rover, set left less
                        r.x = rectangle.x;
                        r.width += rectangle.width;
                        regions.remove(test);
                        siblings.remove(test);
                        j--;
                    } else if (rectangle.x == (r.x + r.width)) {
                        // tile to right of rover, set right more
                        r.width += rectangle.width;
                        regions.remove(test);
                        siblings.remove(test);
                        j--;
                    }
                }
            }
            rover.setBounds(r);
        }
    }
    mRegions = regions;
}
