// $ANTLR start "body"
public final Compila_doresParser.body_return body() throws RecognitionException {
    Compila_doresParser.body_return retval = new Compila_doresParser.body_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Compila_doresParser.function_return function8 = null;
    Compila_doresParser.procedure_return procedure9 = null;
    try {
        // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:89:2: ( ( function | procedure ) )
        // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:89:4: ( function | procedure )
        {
            root_0 = (CommonTree) adaptor.nil();
            // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:89:4: ( function | procedure )
            int alt4 = 2;
            int LA4_0 = input.LA(1);
            if ((LA4_0 == FUNC)) {
                alt4 = 1;
            } else if ((LA4_0 == PROC)) {
                alt4 = 2;
            } else {
                NoViableAltException nvae = new NoViableAltException("", 4, 0, input);
                throw nvae;
            }
            switch(alt4) {
                case 1:
                    // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:89:5: function
                    {
                        pushFollow(FOLLOW_function_in_body571);
                        function8 = function();
                        state._fsp--;
                        adaptor.addChild(root_0, function8.getTree());
                    }
                    break;
                case 2:
                    // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:89:16: procedure
                    {
                        pushFollow(FOLLOW_procedure_in_body575);
                        procedure9 = procedure();
                        state._fsp--;
                        adaptor.addChild(root_0, procedure9.getTree());
                    }
                    break;
            }
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
