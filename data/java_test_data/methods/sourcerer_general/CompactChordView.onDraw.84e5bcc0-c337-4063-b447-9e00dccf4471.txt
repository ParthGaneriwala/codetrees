@Override
protected void onDraw(Canvas canvas) {
    super.onDraw(canvas);
    // Cache some values
    final int[] fingering = _chord == null ? new int[DEFAULT_STRINGS] : _chord.getFingering();
    final int stringCount = fingering.length;
    final int fretsToDraw = getFretsToDraw();
    final int height = getHeight();
    // than there are visible frets (for the bottom line)
    for (int i = 0; i < (fretsToDraw + 1); i++) {
        final int startX = FINGERING_MARKER_RADIUS;
        final int stopX = startX + (STRING_SPACING * (stringCount - 1));
        final int y = TOP_AND_BOTTOM_PADDING + i * FRET_SPACING;
        canvas.drawLine(startX, y, stopX, y, _fretPaint);
    }
    // Determine how many frets down the fretboard we need to shift to keep the chord
    // in view
    int startingFret = Integer.MAX_VALUE;
    int endingFret = 1;
    for (int currentFret : fingering) {
        // Don't consider open or muted frets as being held
        if (currentFret == 0 || currentFret < 0) {
            continue;
        }
        startingFret = Math.min(currentFret, startingFret);
        endingFret = Math.max(currentFret, endingFret);
    }
    if (startingFret == Integer.MAX_VALUE || endingFret < MINIMUM_FRET_COUNT) {
        startingFret = 1;
    }
    for (int i = 0; i < stringCount; i++) {
        int x = FINGERING_MARKER_RADIUS + (i * STRING_SPACING);
        // Draw the string
        canvas.drawLine(x, TOP_AND_BOTTOM_PADDING, x, height - TOP_AND_BOTTOM_PADDING, _stringPaint);
        // Figure out how many frets down the from starting fret this note is
        final int relativeFret = (fingering[i] - startingFret);
        // Draw the note on the string
        int fingeringY = TOP_AND_BOTTOM_PADDING + (FRET_SPACING * relativeFret) + FRET_SPACING / 2;
        if (fingering[i] < 0) {
            // Draw an X, for muted string
            canvas.drawLine(x - FINGERING_MARKER_RADIUS, fingeringY - FINGERING_MARKER_RADIUS, x + FINGERING_MARKER_RADIUS, fingeringY + FINGERING_MARKER_RADIUS, _fingeringPaint);
            canvas.drawLine(x + FINGERING_MARKER_RADIUS, fingeringY - FINGERING_MARKER_RADIUS, x - FINGERING_MARKER_RADIUS, fingeringY + FINGERING_MARKER_RADIUS, _fingeringPaint);
        } else if (fingering[i] > 0) {
            canvas.drawCircle(x, fingeringY, FINGERING_MARKER_RADIUS, _fingeringPaint);
        }
    }
    // at the top of the neck.
    if (startingFret == 1) {
        canvas.drawLine(FINGERING_MARKER_RADIUS, TOP_AND_BOTTOM_PADDING, FINGERING_MARKER_RADIUS + ((stringCount - 1) * STRING_SPACING), TOP_AND_BOTTOM_PADDING, _nutPaint);
    }
    // Draw the label beside the screen frets
    for (int i = 0; i < fretsToDraw; i++) {
        final String label = "" + (i + startingFret);
        final int x = FINGERING_MARKER_RADIUS + ((stringCount - 1) * STRING_SPACING) + FINGERING_MARKER_RADIUS + 2;
        final int y = TOP_AND_BOTTOM_PADDING + (i * FRET_SPACING) + (FRET_SPACING / 2) + 4;
        canvas.drawText(label, x, y, _labelPaint);
    }
}
