public void decrypt(String inputFile, String outputFile, IKey key) throws FileNotFoundException, IOException {
    SplineKey spKey = (SplineKey) key;
    List<Integer> encrText = TextWork.readText(inputFile);
    List<List<Integer>> blocks = TextWork.getBlocks(encrText, BLOCK_SIZE);
    List<Integer> decryptedText = new ArrayList<Integer>();
    int K = spKey.getRounds();
    for (int j = 0; j < blocks.size(); j++) {
        SplineKey k = spKey.clone();
        List<Integer> block = blocks.get(j);
        List<Integer> wavelet = new ArrayList<Integer>();
        List<Integer> numbers = new ArrayList<Integer>();
        List<Integer> striking = new ArrayList<Integer>();
        int blockSize = block.size();
        for (int i = 0; i < K; i++) {
            wavelet.add(block.remove(blockSize - K));
            numbers.add(k.nextNumber());
            striking.add(k.removeElem(numbers.get(numbers.size() - 1)));
        }
        for (int i = 0; i < K; i++) {
            if (i != 0) {
                block = MathUtil.shiftLeft(block);
            }
            int num = numbers.get(K - i - 1);
            int e = striking.get(K - i - 1);
            Binary eBin = new Binary(e);
            Binary A = eBin.sub(new Binary(k.getElem(num)));
            Binary B = eBin.sub(new Binary(k.getElem(num - 1)));
            Binary C = eBin.sub(new Binary(k.getElem(num - 2)));
            Binary D = eBin.sub(new Binary(k.getElem(num - 3)));
            Binary E = eBin.sub(new Binary(k.getElem(num + 1)));
            Binary F = new Binary(k.getElem(num + 2)).sub(new Binary(k.getElem(num - 1)));
            block.add(MathUtil.modul(num - 1, block.size() + 1), 0);
            Binary c_1 = new Binary(block.get(modul(num, block.size())));
            Binary c_2 = new Binary(block.get(modul(num - 2, block.size())));
            Binary c_3 = new Binary(block.get(modul(num - 3, block.size())));
            Binary c_4 = new Binary(block.get(modul(num - 4, block.size())));
            Binary b = new Binary(wavelet.get(K - i - 1));
            Binary Div_F = getInverse(F, MODULE);
            Binary Div_C_E = getInverse(C.sub(E), MODULE);
            Binary Div_D_A = getInverse(D.sub(A), MODULE);
            int newC_1 = c_2.sub(B.mult(Div_F).mult(c_2.sub(c_1))).add(b).mod(MODULE).intValue();
            int newC_2 = C.mult(Div_C_E).mult(c_2).sub(E.mult(Div_C_E).mult(c_3)).mod(MODULE).intValue();
            int newC_3 = D.mult(Div_D_A).mult(c_3).sub(A.mult(Div_D_A).mult(c_4)).mod(MODULE).intValue();
            block.set(modul(num - 3, block.size()), newC_3);
            block.set(modul(num - 2, block.size()), newC_2);
            block.set(modul(num - 1, block.size()), newC_1);
            // temporary for monitoring
            // System.out.println(" Result of round â„–" + i + ": b: " + block + " w: " + wavelet);
            // System.out.println("A: " + A + "\tB: " + B + "\tC:" + C
            // + "\tD:" + D + "\tE:" + E + "\tF:" + F + "\tnum:" + num + "\te:" + e
            // + "\tc_1:" + c_1 + "\tc_2:" + c_2 + "\tc_3:" + c_3 + "\tc_4:" + c_4);
            k.addElem(num, e);
        }
        // System.out.println("block: " + j + "\t" + block);
        decryptedText.addAll(block);
    }
    TextWork.writeText(outputFile, decryptedText);
}
