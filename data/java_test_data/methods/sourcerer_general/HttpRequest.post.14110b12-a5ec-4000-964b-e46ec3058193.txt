public String post(String url, Map<String, String> params) {
    Log.v(LOG_TAG, url);
    String rstr = "";
    HttpParams httpParameters = new BasicHttpParams();
    HttpConnectionParams.setConnectionTimeout(httpParameters, SOCKET_CONNECT_TIMEOUT);
    HttpClient httpclient = new DefaultHttpClient(httpParameters);
    // URL
    HttpPost httppost = new HttpPost(url);
    try {
        List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(2);
        // ����
        for (Map.Entry<String, String> entry : params.entrySet()) {
            nameValuePairs.add(new BasicNameValuePair(entry.getKey(), entry.getValue()));
        }
        httppost.setEntity(new UrlEncodedFormEntity(nameValuePairs));
        HttpResponse response;
        response = httpclient.execute(httppost);
        int statuscode = response.getStatusLine().getStatusCode();
        if (statuscode == 200) {
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            InputStream in = response.getEntity().getContent();
            byte[] tmpb = new byte[1024];
            int len;
            while ((len = in.read(tmpb)) != -1) {
                baos.write(tmpb, 0, len);
            }
            // Log.d(LOG_TAG, baos.toString());
            rstr = baos.toString();
        } else {
            rstr = "-" + statuscode;
        }
    } catch (ClientProtocolException e) {
        // TODO Auto-generated catch block
        rstr = "-1";
        e.printStackTrace();
    } catch (IOException e) {
        // TODO Auto-generated catch block
        rstr = "-1";
        e.printStackTrace();
    }
    Log.d(LOG_TAG, rstr);
    return rstr;
}
