private int getEdgeOffsetFromNode(Node node, short orientation) {
    int ret = minDistanceOfEdgeFromNode;
    Vector<AdjacentEdge> adjacentEdges = nodesVsAdjacentEdges.get(node);
    if (adjacentEdges == null) {
        adjacentEdges = new Vector<AdjacentEdge>();
        AdjacentEdge adjEdge = new AdjacentEdge();
        adjEdge.setOrientation(orientation);
        if (orientation == AdjacentEdge.LEFT)
            adjEdge.setLeftDistanceFromNode(minDistanceOfEdgeFromNode);
        else if (orientation == AdjacentEdge.RIGHT)
            adjEdge.setRightDistanceFromNode(minDistanceOfEdgeFromNode);
        else if (orientation == AdjacentEdge.TOP)
            adjEdge.setTopDistanceFromNode(minDistanceOfEdgeFromNode);
        else if (orientation == AdjacentEdge.BOTTOM)
            adjEdge.setBottomDistanceFromNode(minDistanceOfEdgeFromNode);
        adjacentEdges.addElement(adjEdge);
        nodesVsAdjacentEdges.put(node, adjacentEdges);
    } else {
        for (int i = 0; i < adjacentEdges.size(); i++) {
            AdjacentEdge adjEdge = adjacentEdges.elementAt(i);
            if (adjEdge.getOrientation() == orientation) {
                if (orientation == AdjacentEdge.LEFT) {
                    ret = adjEdge.getLeftDistanceFromNode() + minDistanceOfEdgeFromNode;
                    adjEdge.setLeftDistanceFromNode(ret);
                } else if (orientation == AdjacentEdge.RIGHT) {
                    ret = adjEdge.getRightDistanceFromNode() + minDistanceOfEdgeFromNode;
                    adjEdge.setRightDistanceFromNode(ret);
                } else if (orientation == AdjacentEdge.TOP) {
                    ret = adjEdge.getTopDistanceFromNode() + minDistanceOfEdgeFromNode;
                    adjEdge.setTopDistanceFromNode(ret);
                }
                if (orientation == AdjacentEdge.BOTTOM) {
                    ret = adjEdge.getBottomDistanceFromNode() + minDistanceOfEdgeFromNode;
                    adjEdge.setBottomDistanceFromNode(ret);
                }
            }
        }
    }
    return ret;
}
