private void setIndexConditions(RangeVariableConditions conditions, HsqlArrayList exprList, int rangeVarIndex, boolean includeOr) {
    boolean hasIndex;
    colIndexSetEqual.clear();
    colIndexSetOther.clear();
    for (int j = 0, size = exprList.size(); j < size; j++) {
        Expression e = (Expression) exprList.get(j);
        if (e == null) {
            continue;
        }
        // repeat check required for OR
        if (!e.isIndexable(conditions.rangeVar)) {
            continue;
        }
        int type = e.getType();
        switch(type) {
            case OpTypes.OR:
                {
                    continue;
                }
            case OpTypes.COLUMN:
                {
                    continue;
                }
            case OpTypes.EQUAL:
                {
                    if (e.exprSubType == OpTypes.ANY_QUANTIFIED || e.exprSubType == OpTypes.ALL_QUANTIFIED) {
                        continue;
                    }
                    if (e.getLeftNode().getRangeVariable() != conditions.rangeVar) {
                        continue;
                    }
                    int colIndex = e.getLeftNode().getColumnIndex();
                    colIndexSetEqual.add(colIndex);
                    break;
                }
            case OpTypes.IS_NULL:
                {
                    if (e.getLeftNode().getRangeVariable() != conditions.rangeVar) {
                        continue;
                    }
                    int colIndex = e.getLeftNode().getColumnIndex();
                    colIndexSetEqual.add(colIndex);
                    break;
                }
            case OpTypes.NOT:
                {
                    if (e.getLeftNode().getLeftNode().getRangeVariable() != conditions.rangeVar) {
                        continue;
                    }
                    int colIndex = e.getLeftNode().getLeftNode().getColumnIndex();
                    int count = colIndexSetOther.get(colIndex, 0);
                    colIndexSetOther.put(colIndex, count + 1);
                    break;
                }
            case OpTypes.SMALLER:
            case OpTypes.SMALLER_EQUAL:
            case OpTypes.GREATER:
            case OpTypes.GREATER_EQUAL:
                {
                    if (e.getLeftNode().getRangeVariable() != conditions.rangeVar) {
                        continue;
                    }
                    int colIndex = e.getLeftNode().getColumnIndex();
                    int count = colIndexSetOther.get(colIndex, 0);
                    colIndexSetOther.put(colIndex, count + 1);
                    break;
                }
            default:
                {
                    Error.runtimeError(ErrorCode.U_S0500, "RangeVariableResolver");
                }
        }
    }
    setEqaulityConditions(conditions, exprList);
    hasIndex = conditions.hasIndexCondition();
    if (!hasIndex) {
        setNonEqualityConditions(conditions, exprList);
    }
    hasIndex = conditions.hasIndexCondition();
    // no index found
    boolean isOR = false;
    if (!hasIndex && includeOr) {
        for (int j = 0, size = exprList.size(); j < size; j++) {
            Expression e = (Expression) exprList.get(j);
            if (e == null) {
                continue;
            }
            if (e.getType() == OpTypes.OR) {
                // 
                hasIndex = ((ExpressionLogical) e).isIndexable(conditions.rangeVar);
                if (hasIndex) {
                    hasIndex = setOrConditions(conditions, (ExpressionLogical) e, rangeVarIndex);
                }
                if (hasIndex) {
                    exprList.set(j, null);
                    isOR = true;
                    break;
                }
            } else if (e.getType() == OpTypes.EQUAL && e.exprSubType == OpTypes.ANY_QUANTIFIED) {
                if (e.getRightNode().isCorrelated()) {
                    continue;
                }
                OrderedIntHashSet set = new OrderedIntHashSet();
                ((ExpressionLogical) e).addLeftColumnsForAllAny(conditions.rangeVar, set);
                Index index = conditions.rangeVar.rangeTable.getIndexForColumns(session, set, false);
                // index = null;
                if (index != null && inExpressions[rangeVarIndex] == null) {
                    inExpressions[rangeVarIndex] = e;
                    inInJoin[rangeVarIndex] = conditions.isJoin;
                    inExpressionCount++;
                    exprList.set(j, null);
                    break;
                }
            }
        }
    }
    for (int i = 0, size = exprList.size(); i < size; i++) {
        Expression e = (Expression) exprList.get(i);
        if (e == null) {
            continue;
        }
        if (isOR) {
            for (int j = 0; j < conditions.rangeVar.joinConditions.length; j++) {
                if (conditions.isJoin) {
                    conditions.rangeVar.joinConditions[j].nonIndexCondition = ExpressionLogical.andExpressions(e, conditions.rangeVar.joinConditions[j].nonIndexCondition);
                } else {
                    conditions.rangeVar.whereConditions[j].nonIndexCondition = ExpressionLogical.andExpressions(e, conditions.rangeVar.whereConditions[j].nonIndexCondition);
                }
            }
        } else {
            conditions.addCondition(e);
        }
    }
}
