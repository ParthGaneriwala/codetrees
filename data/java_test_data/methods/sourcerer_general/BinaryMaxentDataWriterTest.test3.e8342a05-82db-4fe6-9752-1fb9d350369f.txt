/**
 * This test is identical to test2 except that the feature lookup file is sorted by
 * NameNumberFeaturesEncoder.
 *
 * @throws Exception
 */
@Test
public void test3() throws Exception {
    AnalysisEngine dataWriterAnnotator = AnalysisEngineFactory.createPrimitive(Test1Annotator.class, typeSystemDescription, DirectoryDataWriterFactory.PARAM_OUTPUT_DIRECTORY, outputDirectoryName, CleartkAnnotator.PARAM_DATA_WRITER_FACTORY_CLASS_NAME, DefaultBinaryMaxentDataWriterFactory.class.getName(), MaxentDataWriterFactory_ImplBase.PARAM_COMPRESS, true, MaxentDataWriterFactory_ImplBase.PARAM_SORT, true);
    dataWriterAnnotator.process(jCas);
    dataWriterAnnotator.collectionProcessComplete();
    File trainFile = new BinaryMaxentClassifierBuilder().getTrainingDataFile(this.outputDirectory);
    String[] lines = FileUtil.loadListOfStrings(trainFile);
    assertEquals("true 0 1=3.0 2=1.234", lines[0]);
    assertEquals("false 3 4=2", lines[1]);
    assertEquals("true null=0", lines[2]);
    assertEquals("false 5", lines[3]);
    lines = FileUtil.loadListOfStrings(new File(outputDirectoryName, NameNumberFeaturesEncoder.LOOKUP_FILE_NAME));
    int i = 0;
    assertEquals("6", lines[i++]);
    assertEquals("A_B_AB	5", lines[i++]);
    assertEquals("distance	1", lines[i++]);
    assertEquals("name_2PO	3", lines[i++]);
    assertEquals("p's	4", lines[i++]);
    assertEquals("pos_NN	0", lines[i++]);
    assertEquals("precision	2", lines[i++]);
    HideOutput hider = new HideOutput();
    Train.main(outputDirectoryName, "10", "1");
    hider.restoreOutput();
}
