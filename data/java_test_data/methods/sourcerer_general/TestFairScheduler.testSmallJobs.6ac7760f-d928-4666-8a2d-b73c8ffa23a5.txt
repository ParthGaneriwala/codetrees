public void testSmallJobs() throws IOException {
    JobInProgress job1 = submitJob(JobStatus.RUNNING, 2, 1);
    JobInfo info1 = scheduler.infos.get(job1);
    // Check scheduler variables
    assertEquals(0, info1.runningMaps);
    assertEquals(0, info1.runningReduces);
    assertEquals(2, info1.neededMaps);
    assertEquals(1, info1.neededReduces);
    assertEquals(0, info1.mapDeficit);
    assertEquals(0, info1.reduceDeficit);
    assertEquals(4.0, info1.mapFairShare);
    assertEquals(4.0, info1.reduceFairShare);
    // Advance time before submitting another job j2, to make j1 run before j2
    // deterministically.
    advanceTime(100);
    JobInProgress job2 = submitJob(JobStatus.RUNNING, 1, 2);
    JobInfo info2 = scheduler.infos.get(job2);
    // Check scheduler variables; the fair shares should now have been allocated
    // equally between j1 and j2, but j1 should have (4 slots)*(100 ms) deficit
    assertEquals(0, info1.runningMaps);
    assertEquals(0, info1.runningReduces);
    assertEquals(2, info1.neededMaps);
    assertEquals(1, info1.neededReduces);
    assertEquals(400, info1.mapDeficit);
    assertEquals(400, info1.reduceDeficit);
    assertEquals(2.0, info1.mapFairShare);
    assertEquals(2.0, info1.reduceFairShare);
    assertEquals(0, info2.runningMaps);
    assertEquals(0, info2.runningReduces);
    assertEquals(1, info2.neededMaps);
    assertEquals(2, info2.neededReduces);
    assertEquals(0, info2.mapDeficit);
    assertEquals(0, info2.reduceDeficit);
    assertEquals(2.0, info2.mapFairShare);
    assertEquals(2.0, info2.reduceFairShare);
    // Assign tasks and check that all slots are filled with j1, then j2
    checkAssignment("tt1", "attempt_test_0001_m_000001_0 on tt1");
    checkAssignment("tt1", "attempt_test_0001_m_000002_0 on tt1");
    checkAssignment("tt1", "attempt_test_0001_r_000003_0 on tt1");
    checkAssignment("tt1", "attempt_test_0002_r_000004_0 on tt1");
    checkAssignment("tt2", "attempt_test_0002_m_000005_0 on tt2");
    checkAssignment("tt2", "attempt_test_0002_r_000006_0 on tt2");
    assertNull(scheduler.assignTasks(tracker("tt2")));
    // Check that the scheduler has started counting the tasks as running
    // as soon as it launched them.
    assertEquals(2, info1.runningMaps);
    assertEquals(1, info1.runningReduces);
    assertEquals(0, info1.neededMaps);
    assertEquals(0, info1.neededReduces);
    assertEquals(1, info2.runningMaps);
    assertEquals(2, info2.runningReduces);
    assertEquals(0, info2.neededMaps);
    assertEquals(0, info2.neededReduces);
}
