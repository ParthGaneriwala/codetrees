@Test
public void testAddGetRemoveRenameColumnFields() throws ClassNotFoundException, SQLException {
    DatabaseTests.setupTestDatabase();
    DBManager dbm = new DBManager();
    dbm.openDatabaseConnection();
    // Test Add some new columns
    dbm.addColumnField("newProp1", DataType.LONG);
    dbm.addColumnField("newProp2", DataType.BYTES);
    dbm.addColumnField("newProp3", DataType.DOUBLE);
    dbm.addColumnField("newProp4", DataType.FLOAT);
    dbm.addColumnField("newProp5", DataType.INTEGER);
    // Check exception is thrown on duplicate name
    try {
        dbm.addColumnField("newProp1", DataType.INTEGER);
        fail();
    } catch (SQLException exc) {
    }
    ;
    // Test Get columns were added successfully
    List<ColumnField> cols = dbm.getCompoundTableColumns();
    assertTrue(cols.size() == 12);
    // Check pre-existing still exist
    assertTrue(cols.get(0).getName().equals("guid"));
    assertTrue(cols.get(1).getName().equals("ownerid"));
    assertTrue(cols.get(2).getName().equals("tags"));
    assertTrue(cols.get(3).getName().equals("smiles"));
    assertTrue(cols.get(4).getName().equals("structure"));
    assertTrue(cols.get(5).getName().equals("links"));
    assertTrue(cols.get(6).getName().equals("notes"));
    // Check new names
    assertTrue(cols.get(7).getName().equals("newProp1"));
    assertTrue(cols.get(8).getName().equals("newProp2"));
    assertTrue(cols.get(9).getName().equals("newProp3"));
    assertTrue(cols.get(10).getName().equals("newProp4"));
    assertTrue(cols.get(11).getName().equals("newProp5"));
    // Check new data types
    assertTrue(cols.get(7).getDataType().equals(DataType.LONG));
    assertTrue(cols.get(8).getDataType().equals(DataType.BYTES));
    assertTrue(cols.get(9).getDataType().equals(DataType.DOUBLE));
    assertTrue(cols.get(10).getDataType().equals(DataType.FLOAT));
    assertTrue(cols.get(11).getDataType().equals(DataType.INTEGER));
    // Check new column numbers
    assertTrue(cols.get(7).getColumnNumber() == 8);
    assertTrue(cols.get(8).getColumnNumber() == 9);
    assertTrue(cols.get(9).getColumnNumber() == 10);
    assertTrue(cols.get(10).getColumnNumber() == 11);
    assertTrue(cols.get(11).getColumnNumber() == 12);
    // Test Remove
    dbm.removeColumnField(cols.get(8));
    cols = dbm.getCompoundTableColumns();
    assertTrue(cols.size() == 11);
    // Check names are right
    assertTrue(cols.get(7).getName().equals("newProp1"));
    assertTrue(cols.get(8).getName().equals("newProp3"));
    assertTrue(cols.get(9).getName().equals("newProp4"));
    assertTrue(cols.get(10).getName().equals("newProp5"));
    // Check new data types
    assertTrue(cols.get(7).getDataType().equals(DataType.LONG));
    assertTrue(cols.get(8).getDataType().equals(DataType.DOUBLE));
    assertTrue(cols.get(9).getDataType().equals(DataType.FLOAT));
    assertTrue(cols.get(10).getDataType().equals(DataType.INTEGER));
    // Check new column numbers
    assertTrue(cols.get(7).getColumnNumber() == 8);
    assertTrue(cols.get(8).getColumnNumber() == 9);
    assertTrue(cols.get(9).getColumnNumber() == 10);
    assertTrue(cols.get(10).getColumnNumber() == 11);
    // Test Remove fails on initial columns.
    for (int x = 0; x < DBConfig.getNumberOfDefaultColumns(); x++) {
        try {
            dbm.removeColumnField(cols.get(x));
            fail("Should throw an exception removing default column");
        } catch (IllegalArgumentException exc) {
        }
    }
    // Test Rename
    dbm.renameColumnField(cols.get(8), "renamedProp1");
    cols = dbm.getCompoundTableColumns();
    assertTrue(cols.size() == 11);
    // Check names are right
    assertTrue(cols.get(7).getName().equals("newProp1"));
    assertTrue(cols.get(8).getName().equals("renamedProp1"));
    assertTrue(cols.get(9).getName().equals("newProp4"));
    assertTrue(cols.get(10).getName().equals("newProp5"));
    // Check new data types
    assertTrue(cols.get(7).getDataType().equals(DataType.LONG));
    assertTrue(cols.get(8).getDataType().equals(DataType.DOUBLE));
    assertTrue(cols.get(9).getDataType().equals(DataType.FLOAT));
    assertTrue(cols.get(10).getDataType().equals(DataType.INTEGER));
    // Check new column numbers
    assertTrue(cols.get(7).getColumnNumber() == 8);
    assertTrue(cols.get(8).getColumnNumber() == 9);
    assertTrue(cols.get(9).getColumnNumber() == 10);
    assertTrue(cols.get(10).getColumnNumber() == 11);
    // Test Remove fails on initial columns.
    for (int x = 0; x < DBConfig.getNumberOfDefaultColumns(); x++) {
        try {
            dbm.renameColumnField(cols.get(x), "blah");
            fail("Should throw an exception renaming default column");
        } catch (IllegalArgumentException exc) {
        }
    }
    dbm.closeDatabaseConnection();
}
