public boolean SolvePositionConstraints(float baumgarte) {
    float minSeparation = 0.0f;
    for (int i = 0; i < m_constraintCount; ++i) {
        BBContactConstraint c = m_constraints[i];
        BBBody bodyA = c.bodyA;
        BBBody bodyB = c.bodyB;
        float invMassA = bodyA.m_mass * bodyA.m_invMass;
        float invIA = bodyA.m_mass * bodyA.m_invI;
        float invMassB = bodyB.m_mass * bodyB.m_invMass;
        float invIB = bodyB.m_mass * bodyB.m_invI;
        BBPositionSolverManifold psm = new BBPositionSolverManifold();
        psm.initialize(c);
        BBVec2 normal = psm.m_normal;
        // solve normal constraints
        for (int j = 0; j < c.pointCount; ++j) {
            BBContactConstraintPoint ccp = c.points[j];
            BBVec2 point = psm.m_points[j];
            float separation = psm.m_separations[j];
            BBVec2 rA = sub(point, bodyA.m_sweep.c);
            BBVec2 rB = sub(point, bodyB.m_sweep.c);
            // Track max constraint error.
            minSeparation = min(minSeparation, separation);
            // Prevent large corrections and allow slop.
            float C = clamp(baumgarte * (separation + linearSlop), -maxLinearCorrection, 0.0f);
            // Compute normal impulse
            float impulse = -ccp.equalizedMass * C;
            BBVec2 P = mul(impulse, normal);
            bodyA.m_sweep.c.sub(mul(invMassA, P));
            bodyA.m_sweep.a -= invIA * cross(rA, P);
            bodyA.synchronizeTransform();
            bodyB.m_sweep.c.add(mul(invMassB, P));
            bodyB.m_sweep.a += invIB * cross(rB, P);
            bodyB.synchronizeTransform();
        }
    }
    // push the separation above -linearSlop.
    return minSeparation >= -1.5f * linearSlop;
}
