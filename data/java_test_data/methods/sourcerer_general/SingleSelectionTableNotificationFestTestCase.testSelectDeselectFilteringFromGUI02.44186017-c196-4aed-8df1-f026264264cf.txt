@Test
public void testSelectDeselectFilteringFromGUI02() {
    TableNotificationTestFrame frame = new TableNotificationTestFrame("TF");
    FrameFixture frameFix = new FrameFixture(frame);
    try {
        frameFix.show();
        JTableFixture tableFix = frameFix.table("table");
        JTextComponentFixture filterFix = frameFix.textBox("filterTextField");
        // Create to property change listeners for recording the events.
        final RecordingPropertyChangeListener valueListener = new RecordingPropertyChangeListener("value");
        final RecordingPropertyChangeListener selListener = new RecordingPropertyChangeListener("selectedValue");
        // Create the cobean
        ISingleSelectionListCobean<SimpleBean> cobean = createCobean(frame);
        // Add the listeners to the cobean
        ((IPropertyChangeListenerAware) cobean).setPropertyChangeListener(valueListener);
        ((IPropertyChangeListenerAware) cobean).setPropertyChangeListener(selListener);
        // Set a list of Simple beans to the cobean
        {
            List<SimpleBean> value = CobeanTestUtil.createSimpleBeanList("Der Assistent der Zauberer");
            cobean.setValue(value);
            // Assert that the value listener was notified exactly ones
            assertEquals(1, valueListener.getNotificationCount());
            assertEquals(0, selListener.getNotificationCount());
            assertEventContentBean(null, CobeanTestUtil.createSimpleBeanList("Der Assistent der Zauberer"), "value", valueListener.getEventContents().get(0));
            // Check the order of the list has not changed
            assertEquals("Der", cobean.getValue().get(0).getStrVal());
            assertEquals("Assistent", cobean.getValue().get(1).getStrVal());
            assertEquals("der", cobean.getValue().get(2).getStrVal());
            assertEquals("Zauberer", cobean.getValue().get(3).getStrVal());
        }
        // Select one row from the GUI
        {
            tableFix.selectCell(tableFix.cell("Zauberer"));
            pause();
            assertEquals(1, valueListener.getNotificationCount());
            assertEquals(1, selListener.getNotificationCount());
            assertEventContentBean(null, new SimpleBean("Zauberer"), "selectedValue", selListener.getEventContents().get(0));
            // Check if the right bean is selected.
            assertEquals("Zauberer", cobean.getSelectedValue().getStrVal());
            // Check the order of the list has not changed
            assertEquals("Der", cobean.getValue().get(0).getStrVal());
            assertEquals("Assistent", cobean.getValue().get(1).getStrVal());
            assertEquals("der", cobean.getValue().get(2).getStrVal());
            assertEquals("Zauberer", cobean.getValue().get(3).getStrVal());
        }
        // filter the list in a way that the slected value is no longer shown.
        // No Event should be thrown.
        {
            filterFix.enterText("A");
            pause();
            assertEquals(1, valueListener.getNotificationCount());
            assertEquals(1, selListener.getNotificationCount());
            // Check the order of the list has not changed
            assertEquals("Der", cobean.getValue().get(0).getStrVal());
            assertEquals("Assistent", cobean.getValue().get(1).getStrVal());
            assertEquals("der", cobean.getValue().get(2).getStrVal());
            assertEquals("Zauberer", cobean.getValue().get(3).getStrVal());
            assertEquals("Zauberer", cobean.getSelectedValue().getStrVal());
        }
        // clear the filter.
        // No Event should be thrown.
        {
            filterFix.deleteText();
            pause();
            assertEquals(1, valueListener.getNotificationCount());
            assertEquals(1, selListener.getNotificationCount());
            // Check the order of the list has not changed
            assertEquals("Der", cobean.getValue().get(0).getStrVal());
            assertEquals("Assistent", cobean.getValue().get(1).getStrVal());
            assertEquals("der", cobean.getValue().get(2).getStrVal());
            assertEquals("Zauberer", cobean.getValue().get(3).getStrVal());
            assertEquals("Zauberer", cobean.getSelectedValue().getStrVal());
        }
        // Select another row from the GUI
        {
            tableFix.selectCell(tableFix.cell("der"));
            pause();
            assertEquals(1, valueListener.getNotificationCount());
            assertEquals(2, selListener.getNotificationCount());
            assertEventContentBean(new SimpleBean("Zauberer"), new SimpleBean("der"), "selectedValue", selListener.getEventContents().get(1));
            // Check if the right bean is selected.
            assertEquals("der", cobean.getSelectedValue().getStrVal());
            // Check the order of the list has not changed
            assertEquals("Der", cobean.getValue().get(0).getStrVal());
            assertEquals("Assistent", cobean.getValue().get(1).getStrVal());
            assertEquals("der", cobean.getValue().get(2).getStrVal());
            assertEquals("Zauberer", cobean.getValue().get(3).getStrVal());
        }
        // Select the same row from the GUI
        {
            tableFix.selectCell(tableFix.cell("der"));
            pause();
            assertEquals(1, valueListener.getNotificationCount());
            assertEquals(2, selListener.getNotificationCount());
            assertEventContentBean(new SimpleBean("Zauberer"), new SimpleBean("der"), "selectedValue", selListener.getEventContents().get(1));
            // Check if the right bean is selected.
            assertEquals("der", cobean.getSelectedValue().getStrVal());
            // Check the order of the list has not changed
            assertEquals("Der", cobean.getValue().get(0).getStrVal());
            assertEquals("Assistent", cobean.getValue().get(1).getStrVal());
            assertEquals("der", cobean.getValue().get(2).getStrVal());
            assertEquals("Zauberer", cobean.getValue().get(3).getStrVal());
        }
    } finally {
        frameFix.cleanUp();
    }
}
