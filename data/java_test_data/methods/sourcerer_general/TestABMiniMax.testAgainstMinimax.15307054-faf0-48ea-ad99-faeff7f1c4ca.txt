public void testAgainstMinimax() {
    for (int depth = 1; depth < 6; depth++) {
        // out.println("depth=" + depth);
        MiniMax blackMini = new MiniMax(true, new EvalMaterialOnly(), depth);
        ABMiniMax blackABmin = new ABMiniMax(true, new EvalMaterialOnly(), depth);
        MiniMax whiteMini = new MiniMax(false, new EvalMaterialOnly(), depth);
        ABMiniMax whiteABmin = new ABMiniMax(false, new EvalMaterialOnly(), depth);
        for (int i = 0; i < 100; i++) {
            Board board = RandomBoard.randPieces();
            boolean isEqual = true;
            assertTrue(board.isSane());
            if (board.blackToMove) {
                // out.println("black to move");
                Board blackMiniBoard = blackMini.findMove(board);
                Board blackABminBoard = blackABmin.findMove(board);
                int blackMiniValue = blackMini.search(board, depth);
                int blackABminValue = blackABmin.search(board, depth, MIN, MAX);
                if (blackMiniBoard != null && blackABminBoard != null) {
                    isEqual = blackMiniBoard.equals(blackABminBoard);
                // assertEquals(true, isEqual);
                }
                if (!isEqual || (blackMiniValue != blackABminValue)) {
                    out.println("Black to move, this board caused conflict:");
                    GameEngine.printBoard(board);
                    out.println("At depth: " + depth);
                    out.println("Mini-choice:");
                    GameEngine.printBoard(blackMiniBoard);
                    out.println("Mini-val: " + blackMiniValue);
                    out.println("ABmin-choice:");
                    GameEngine.printBoard(blackABminBoard);
                    out.println("ABmin-val: " + blackABminValue);
                    return;
                }
            } else {
                // out.println("white to move");
                Board whiteMiniBoard = whiteMini.findMove(board);
                Board whiteABminBoard = whiteABmin.findMove(board);
                int whiteMiniValue = whiteMini.search(board, depth);
                int whiteABminValue = whiteABmin.search(board, depth, MIN, MAX);
                if (whiteMiniBoard != null && whiteABminBoard != null) {
                    isEqual = whiteMiniBoard.equals(whiteABminBoard);
                // assertEquals(true, isEqual);
                }
                if (!isEqual || (whiteMiniValue != whiteABminValue)) {
                    out.println("White to move, this board caused conflict:");
                    GameEngine.printBoard(board);
                    out.println("At depth: " + depth);
                    out.println("Mini-choice:");
                    GameEngine.printBoard(whiteMiniBoard);
                    out.println("Mini-val: " + whiteMiniValue);
                    out.println("ABmin-choice:");
                    GameEngine.printBoard(whiteABminBoard);
                    out.println("ABmin-val: " + whiteABminValue);
                    return;
                }
            }
        }
    }
}
