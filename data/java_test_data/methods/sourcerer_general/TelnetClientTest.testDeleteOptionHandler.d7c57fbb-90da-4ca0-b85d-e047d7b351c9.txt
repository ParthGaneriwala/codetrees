public void testDeleteOptionHandler() throws Exception {
    boolean remove_ok = false;
    boolean remove_invalid_ok1 = false;
    boolean remove_invalid_ok2 = false;
    byte[] buffread = new byte[6];
    byte[] send = { (byte) TelnetCommand.IAC, (byte) TelnetCommand.DO, (byte) TelnetOption.ECHO, (byte) TelnetCommand.IAC, (byte) TelnetCommand.DO, (byte) TelnetOption.SUPPRESS_GO_AHEAD, (byte) TelnetCommand.IAC, (byte) TelnetCommand.WILL, (byte) TelnetOption.SUPPRESS_GO_AHEAD };
    byte[] expected = { (byte) TelnetCommand.IAC, (byte) TelnetCommand.WONT, (byte) TelnetOption.SUPPRESS_GO_AHEAD, (byte) TelnetCommand.IAC, (byte) TelnetCommand.DONT, (byte) TelnetOption.SUPPRESS_GO_AHEAD };
    InputStream is = OPTIONS.server.getInputStream();
    OutputStream os = OPTIONS.server.getOutputStream();
    Thread.sleep(1000);
    is.skip(is.available());
    os.write(send);
    os.flush();
    Thread.sleep(1000);
    if (is.available() == 0) {
        OPTIONS.client.deleteOptionHandler(TelnetOption.SUPPRESS_GO_AHEAD);
        Thread.sleep(1000);
        if (is.available() == 6) {
            is.read(buffread);
            if (equalBytes(buffread, expected))
                remove_ok = true;
        }
    }
    try {
        OPTIONS.client.deleteOptionHandler(TelnetOption.SUPPRESS_GO_AHEAD);
    } catch (Exception e) {
        remove_invalid_ok1 = true;
    }
    try {
        OPTIONS.client.deleteOptionHandler(550);
    } catch (Exception e) {
        remove_invalid_ok2 = true;
    }
    assertTrue(remove_ok);
    assertTrue(remove_invalid_ok1);
    assertTrue(remove_invalid_ok2);
    assertTrue(OPTIONS.client.getLocalOptionState(TelnetOption.ECHO));
    assertTrue(!OPTIONS.client.getLocalOptionState(TelnetOption.SUPPRESS_GO_AHEAD));
    assertTrue(!OPTIONS.client.getLocalOptionState(TelnetOption.SUPPRESS_GO_AHEAD));
}
