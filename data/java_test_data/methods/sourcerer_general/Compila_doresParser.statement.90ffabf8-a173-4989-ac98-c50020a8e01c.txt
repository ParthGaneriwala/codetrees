// $ANTLR start "statement"
public final Compila_doresParser.statement_return statement() throws RecognitionException {
    Compila_doresParser.statement_return retval = new Compila_doresParser.statement_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token EXIT55 = null;
    Token FOR56 = null;
    Token EXIT57 = null;
    Token DO58 = null;
    Compila_doresParser.if_statement_return if_statement47 = null;
    Compila_doresParser.for_statement_return for_statement48 = null;
    Compila_doresParser.while_statement_return while_statement49 = null;
    Compila_doresParser.until_statement_return until_statement50 = null;
    Compila_doresParser.assignment_return assignment51 = null;
    Compila_doresParser.print_return print52 = null;
    Compila_doresParser.input_return input53 = null;
    Compila_doresParser.call_return call54 = null;
    CommonTree EXIT55_tree = null;
    CommonTree FOR56_tree = null;
    CommonTree EXIT57_tree = null;
    CommonTree DO58_tree = null;
    RewriteRuleTokenStream stream_EXIT = new RewriteRuleTokenStream(adaptor, "token EXIT");
    RewriteRuleTokenStream stream_DO = new RewriteRuleTokenStream(adaptor, "token DO");
    RewriteRuleTokenStream stream_FOR = new RewriteRuleTokenStream(adaptor, "token FOR");
    try {
        // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:115:2: ( if_statement | for_statement | while_statement | until_statement | assignment | print | input | call | ( EXIT FOR ) -> ^( EXIT_FOR ) | ( EXIT DO ) -> ^( EXIT_DO ) )
        int alt18 = 10;
        alt18 = dfa18.predict(input);
        switch(alt18) {
            case 1:
                // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:115:4: if_statement
                {
                    root_0 = (CommonTree) adaptor.nil();
                    pushFollow(FOLLOW_if_statement_in_statement830);
                    if_statement47 = if_statement();
                    state._fsp--;
                    adaptor.addChild(root_0, if_statement47.getTree());
                }
                break;
            case 2:
                // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:116:4: for_statement
                {
                    root_0 = (CommonTree) adaptor.nil();
                    pushFollow(FOLLOW_for_statement_in_statement835);
                    for_statement48 = for_statement();
                    state._fsp--;
                    adaptor.addChild(root_0, for_statement48.getTree());
                }
                break;
            case 3:
                // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:117:4: while_statement
                {
                    root_0 = (CommonTree) adaptor.nil();
                    pushFollow(FOLLOW_while_statement_in_statement840);
                    while_statement49 = while_statement();
                    state._fsp--;
                    adaptor.addChild(root_0, while_statement49.getTree());
                }
                break;
            case 4:
                // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:118:4: until_statement
                {
                    root_0 = (CommonTree) adaptor.nil();
                    pushFollow(FOLLOW_until_statement_in_statement845);
                    until_statement50 = until_statement();
                    state._fsp--;
                    adaptor.addChild(root_0, until_statement50.getTree());
                }
                break;
            case 5:
                // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:119:4: assignment
                {
                    root_0 = (CommonTree) adaptor.nil();
                    pushFollow(FOLLOW_assignment_in_statement850);
                    assignment51 = assignment();
                    state._fsp--;
                    adaptor.addChild(root_0, assignment51.getTree());
                }
                break;
            case 6:
                // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:120:4: print
                {
                    root_0 = (CommonTree) adaptor.nil();
                    pushFollow(FOLLOW_print_in_statement855);
                    print52 = print();
                    state._fsp--;
                    adaptor.addChild(root_0, print52.getTree());
                }
                break;
            case 7:
                // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:121:4: input
                {
                    root_0 = (CommonTree) adaptor.nil();
                    pushFollow(FOLLOW_input_in_statement860);
                    input53 = input();
                    state._fsp--;
                    adaptor.addChild(root_0, input53.getTree());
                }
                break;
            case 8:
                // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:122:4: call
                {
                    root_0 = (CommonTree) adaptor.nil();
                    pushFollow(FOLLOW_call_in_statement865);
                    call54 = call();
                    state._fsp--;
                    adaptor.addChild(root_0, call54.getTree());
                }
                break;
            case 9:
                // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:123:4: ( EXIT FOR )
                {
                    // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:123:4: ( EXIT FOR )
                    // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:123:5: EXIT FOR
                    {
                        EXIT55 = (Token) match(input, EXIT, FOLLOW_EXIT_in_statement871);
                        stream_EXIT.add(EXIT55);
                        FOR56 = (Token) match(input, FOR, FOLLOW_FOR_in_statement873);
                        stream_FOR.add(FOR56);
                    }
                    // AST REWRITE
                    // elements:
                    // token labels:
                    // rule labels: retval
                    // token list labels:
                    // rule list labels:
                    // wildcard labels:
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.tree : null);
                    root_0 = (CommonTree) adaptor.nil();
                    // 123:15: -> ^( EXIT_FOR )
                    {
                        // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:123:18: ^( EXIT_FOR )
                        {
                            CommonTree root_1 = (CommonTree) adaptor.nil();
                            root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(EXIT_FOR, "EXIT_FOR"), root_1);
                            adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;
                }
                break;
            case 10:
                // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:124:4: ( EXIT DO )
                {
                    // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:124:4: ( EXIT DO )
                    // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:124:5: EXIT DO
                    {
                        EXIT57 = (Token) match(input, EXIT, FOLLOW_EXIT_in_statement886);
                        stream_EXIT.add(EXIT57);
                        DO58 = (Token) match(input, DO, FOLLOW_DO_in_statement888);
                        stream_DO.add(DO58);
                    }
                    // AST REWRITE
                    // elements:
                    // token labels:
                    // rule labels: retval
                    // token list labels:
                    // rule list labels:
                    // wildcard labels:
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.tree : null);
                    root_0 = (CommonTree) adaptor.nil();
                    // 124:14: -> ^( EXIT_DO )
                    {
                        // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:124:17: ^( EXIT_DO )
                        {
                            CommonTree root_1 = (CommonTree) adaptor.nil();
                            root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(EXIT_DO, "EXIT_DO"), root_1);
                            adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;
                }
                break;
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
