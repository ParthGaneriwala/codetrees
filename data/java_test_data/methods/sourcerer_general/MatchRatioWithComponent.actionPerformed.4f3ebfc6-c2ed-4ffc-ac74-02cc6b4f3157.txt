public void actionPerformed(ActionEvent e) {
    // check the median value
    double lMedian = 1.0;
    try {
        lMedian = Double.valueOf(medianTextField.getText());
    } catch (NumberFormatException f) {
        JOptionPane.showMessageDialog(new JFrame(), "\"" + medianTextField.getText() + "\" is not a valid median", "ERROR", JOptionPane.WARNING_MESSAGE);
        return;
    }
    // count the selected
    int lCount = 0;
    for (int i = 0; i < iCheckBoxes.size(); i++) {
        if (iCheckBoxes.get(i).isSelected()) {
            lCount = lCount + 1;
        }
    }
    if (lCount == 2) {
        String lRatio = iRatios.get(iRatioCount);
        String[] lComponents = new String[2];
        String lUnregulatedComponent = "";
        for (int i = 0; i < iCheckBoxes.size(); i++) {
            if (iCheckBoxes.get(i).isSelected()) {
                if (lComponents[0] == null) {
                    lComponents[0] = iCheckBoxes.get(i).getText();
                } else {
                    lComponents[1] = iCheckBoxes.get(i).getText();
                }
            }
        }
        for (int i = 0; i < iUnregulatedCheckBoxes.size(); i++) {
            if (iUnregulatedCheckBoxes.get(i).isSelected()) {
                lUnregulatedComponent = iUnregulatedCheckBoxes.get(i).getText();
            }
        }
        // check if the unregulated component is part of the ratio
        boolean lComponentFound = false;
        if (lComponents[0].equalsIgnoreCase(lUnregulatedComponent)) {
            lComponentFound = true;
        } else if (lComponents[1].equalsIgnoreCase(lUnregulatedComponent)) {
            lComponentFound = true;
        }
        if (lComponentFound) {
            if (iQuantitativeValidationSingelton.isMultipleSources()) {
                if (iSetCount == 0) {
                    RatioType lType = new RatioType(lRatio, lComponents, lUnregulatedComponent, lMedian);
                    iQuantitativeValidationSingelton.addMatchedRatioTypes(lType);
                } else {
                    RatioType lRatioType = iQuantitativeValidationSingelton.getMatchedRatioTypes().get(iRatioCount);
                    lRatioType.addUnregulatedComponentForSet(lUnregulatedComponent);
                }
            } else {
                RatioType lType = new RatioType(lRatio, lComponents, lUnregulatedComponent, lMedian);
                iQuantitativeValidationSingelton.addMatchedRatioTypes(lType);
            }
            iRatioCount = iRatioCount + 1;
            if (iQuantitativeValidationSingelton.isMultipleSources()) {
                if (iRatioCount >= iRatios.size()) {
                    if (iSetCount + 1 >= iQuantitativeValidationSingelton.getTitles().size()) {
                        // close this frame
                        close();
                    } else {
                        iRatioCount = 0;
                        iSetCount = iSetCount + 1;
                        // show the next ratio
                        lblRatioType.setText(iQuantitativeValidationSingelton.getTitles().get(iSetCount) + " => " + iRatios.get(iRatioCount));
                        if (iCheckBoxes.size() != 2) {
                            for (int i = 0; i < iCheckBoxes.size(); i++) {
                                iCheckBoxes.get(i).setSelected(false);
                            }
                        }
                    }
                } else {
                    // show the next ratio
                    lblRatioType.setText(iQuantitativeValidationSingelton.getTitles().get(iSetCount) + " => " + iRatios.get(iRatioCount));
                    if (iCheckBoxes.size() != 2) {
                        for (int i = 0; i < iCheckBoxes.size(); i++) {
                            iCheckBoxes.get(i).setSelected(false);
                        }
                    }
                }
            } else {
                if (iRatioCount >= iRatios.size()) {
                    // close this frame
                    close();
                } else {
                    // show the next ratio
                    lblRatioType.setText(iRatios.get(iRatioCount));
                    if (iCheckBoxes.size() != 2) {
                        for (int i = 0; i < iCheckBoxes.size(); i++) {
                            iCheckBoxes.get(i).setSelected(false);
                        }
                    }
                }
            }
        } else {
            JOptionPane.showMessageDialog(new JFrame(), "The unregulated component " + lUnregulatedComponent + " is not " + lComponents[0] + " or " + lComponents[1] + " !", "ERROR", JOptionPane.WARNING_MESSAGE);
        }
    } else {
        if (iRatioCount == iRatios.size()) {
            if (lCount == 1) {
            } else {
                // the user must select two checkboxes
                JOptionPane.showMessageDialog(new JFrame(), "One unregulated component must be selected!", "ERROR", JOptionPane.WARNING_MESSAGE);
            }
        } else {
            // the user must select two checkboxes
            JOptionPane.showMessageDialog(new JFrame(), "Two components must be selected!", "ERROR", JOptionPane.WARNING_MESSAGE);
        }
    }
}
