public static ArrayList getScheduleElectiveLast(String[] cores, int[] cUnits, String[] supports, int[] sUnits, String[] ges, int[] gUnits, String[] electives, int[] eUnits, int maxQuarterlyUnits) throws Exception {
    Exception ex = new Exception("Max quarterly units limit is below units required for some class.");
    for (int i = 0; i < cUnits.length; i++) if (cUnits[i] > maxQuarterlyUnits) {
        throw ex;
    }
    for (int i = 0; i < sUnits.length; i++) if (sUnits[i] > maxQuarterlyUnits) {
        throw ex;
    }
    for (int i = 0; i < gUnits.length; i++) if (gUnits[i] > maxQuarterlyUnits) {
        throw ex;
    }
    for (int i = 0; i < eUnits.length; i++) if (eUnits[i] > maxQuarterlyUnits) {
        throw ex;
    }
    ClassUnitPair[] coreArray = ClassUnitPair.makeArray(cores, cUnits);
    ClassUnitPair[] supportArray = ClassUnitPair.makeArray(supports, sUnits);
    ClassUnitPair[] geArray = ClassUnitPair.makeArray(ges, gUnits);
    ClassUnitPair[] electiveArray = ClassUnitPair.makeArray(electives, eUnits);
    ClassUnitPair[][] first3 = { coreArray, supportArray, geArray };
    ClassUnitPair[] mixed = ArrayInterleave(first3);
    for (int i = 0; i < mixed.length; i++) System.out.print(mixed[i].classId + " ");
    System.out.println();
    // the last (core/support) class before elective can begin
    String electiveBeginClass = null;
    if (coreArray.length > supportArray.length) {
        if (coreArray.length > 0)
            electiveBeginClass = coreArray[coreArray.length - 1].classId;
    } else {
        if (supportArray.length > 0)
            electiveBeginClass = supportArray[supportArray.length - 1].classId;
    }
    ArrayList list = new ArrayList(mixed.length);
    for (int i = 0; i < mixed.length; i++) {
        list.add(mixed[i]);
    }
    int j;
    for (j = mixed.length - 1; j >= 0; j--) {
        if (mixed[j].classId.compareTo(electiveBeginClass) == 0)
            break;
    }
    System.out.println("j=" + j);
    if (j == mixed.length - 1) {
        for (int i = 0; i < electiveArray.length; i++) list.add(electiveArray[i]);
    } else {
        ArrayList preList = new ArrayList(list.subList(0, j + 1));
        ArrayList postList = new ArrayList(list.subList(j + 1, list.size()));
        ClassUnitPair[] remainingGE = new ClassUnitPair[postList.size()];
        for (int i = 0; i < postList.size(); i++) remainingGE[i] = (ClassUnitPair) postList.get(i);
        ClassUnitPair[][] remainings = { remainingGE, electiveArray };
        mixed = ArrayInterleave(remainings);
        ArrayList mixedList = new ArrayList();
        for (int i = 0; i < mixed.length; i++) mixedList.add(mixed[i]);
        list = preList;
        list.addAll(mixedList);
    }
    // Now, variable list stores a all the classes interleaved, with
    // core and support classes go first before getting into electives
    // Seperate them into arrays by maximum units
    ArrayList retVal = new ArrayList();
    ArrayList quarterList = new ArrayList();
    int units = 0;
    for (int i = 0; i < list.size(); i++) {
        ClassUnitPair cup = (ClassUnitPair) list.get(i);
        if (units + cup.units > maxQuarterlyUnits) {
            units = 0;
            retVal.add(quarterList);
            quarterList = new ArrayList();
        }
        quarterList.add(cup);
        units += cup.units;
    }
    if (quarterList.size() > 0)
        retVal.add(quarterList);
    return retVal;
}
