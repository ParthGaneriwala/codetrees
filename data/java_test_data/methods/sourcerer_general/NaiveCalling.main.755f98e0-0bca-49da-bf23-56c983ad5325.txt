public static void main(String[] args) {
    parseArguments(args);
    try {
        HiddenMarkovModel.initialize(parameterFileName);
        int nSamples = baselineExonFileNames.size();
        System.out.println("Number of baseline: " + nSamples);
        if (nSamples < 10)
            for (String s : baselineExonFileNames) System.out.println(s);
        for (int chromosome : chromosomes) {
            // System.out.println("Chromosome " + chromosome);
            System.out.println("Calculating expected values from given files....");
            ExpectedValues = Exon.calculateExpectedValues(baselineExonFileNames, chromosome);
            StdDeviations = Exon.calculateStdDevValues(baselineExonFileNames, chromosome, ExpectedValues);
            Exon.sortExons(ExpectedValues);
            Exon.sortExons(StdDeviations);
            System.out.println("Reading exon with measurements file....");
            Exons = Exon.readAndStoreExonFile(exonFileName, chromosome);
            Exon.sortExons(Exons);
            double genomeWideAve = getGenomeWideAverage(Exons);
            double genomeWideStdDev = getGenomeWideStdDev(Exons, genomeWideAve);
            for (int i = 0; i < Exons.size(); i++) {
                Exon e = ExpectedValues.get(i);
                Exon s = StdDeviations.get(i);
                e.FPKM = genomeWideAve;
                s.FPKM = genomeWideStdDev;
            }
            System.out.println("Calculating States....");
            getStates(Exons, ExpectedValues, StdDeviations);
            System.out.println("Finished calling");
        }
    } catch (Exception e) {
        System.err.println("Exception: " + e.getMessage());
        e.printStackTrace();
    }
}
