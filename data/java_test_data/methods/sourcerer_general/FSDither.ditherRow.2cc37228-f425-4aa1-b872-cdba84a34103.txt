void ditherRow(int[] pixels, byte[] out) {
    int col;
    int limitcol;
    // output index
    int o;
    // clear out next error rows for colour errors
    for (col = nextRerr_.length; --col >= 0; ) nextRerr_[col] = 0;
    System.arraycopy(nextRerr_, 0, nextGerr_, 0, nextRerr_.length);
    System.arraycopy(nextRerr_, 0, nextBerr_, 0, nextRerr_.length);
    // init index and limit
    if (forward_) {
        o = 0;
        col = 0;
        limitcol = width_;
    } else {
        o = width_ - 1;
        col = width_ - 1;
        limitcol = -1;
    }
    int idx;
    int p;
    int sr, sr2;
    int sg, sg2;
    int sb, sb2;
    long err;
    while (true) {
        p = pixels[col];
        if ((p & 0xff000000) == 0) {
            if (forward_) {
                out[o++] = (byte) numColors_;
                col++;
                if (col >= limitcol)
                    break;
            } else {
                out[o--] = (byte) numColors_;
                col--;
                if (col <= limitcol)
                    break;
            }
            continue;
        }
        sr = (int) (((p & 0x00FF0000) >> 16));
        sg = (int) (((p & 0x0000FF00) >> 8));
        sb = (int) ((p & 0x000000FF));
        sr = (int) (((p & 0x00FF0000) >> 16) + (thisRerr_[col + 1] / FS_SCALE));
        sg = (int) (((p & 0x0000FF00) >> 8) + (thisGerr_[col + 1] / FS_SCALE));
        sb = (int) ((p & 0x000000FF) + (thisBerr_[col + 1] / FS_SCALE));
        // clamp red/green/blue to min & max
        if (sr < 0)
            sr = 0;
        else if (sr > MAXVAL)
            sr = MAXVAL;
        if (sg < 0)
            sg = 0;
        else if (sg > MAXVAL)
            sg = MAXVAL;
        if (sb < 0)
            sb = 0;
        else if (sb > MAXVAL)
            sb = MAXVAL;
        // find color in color map that is closest to  sr/sg/sb color
        // idx = findIdx(sr, sg, sb);
        idx = invCM_.getIndexNearest(sr, sg, sb);
        // get the color that will represent current color
        sr2 = rgbCMap_[idx * 4] & 0xFF;
        sg2 = rgbCMap_[idx * 4 + 1] & 0xFF;
        sb2 = rgbCMap_[idx * 4 + 2] & 0xFF;
        // update Floyd-Steinberg errors
        if (forward_) {
            // output color index to buffer
            out[o++] = (byte) idx;
            err = (long) (sr - sr2) * FS_SCALE;
            thisRerr_[col + 2] += (err * 7) / 16;
            nextRerr_[col] += (err * 3) / 16;
            nextRerr_[col + 1] += (err * 5) / 16;
            nextRerr_[col + 2] += (err) / 16;
            err = (long) (sg - sg2) * FS_SCALE;
            thisGerr_[col + 2] += (err * 7) / 16;
            nextGerr_[col] += (err * 3) / 16;
            nextGerr_[col + 1] += (err * 5) / 16;
            nextGerr_[col + 2] += (err) / 16;
            err = (long) (sb - sb2) * FS_SCALE;
            thisBerr_[col + 2] += (err * 7) / 16;
            nextBerr_[col] += (err * 3) / 16;
            nextBerr_[col + 1] += (err * 5) / 16;
            nextBerr_[col + 2] += (err) / 16;
            ++col;
            if (col >= limitcol)
                // done row
                break;
        } else {
            // output color index to buffer
            out[o--] = (byte) idx;
            err = (long) (sr - sr2) * FS_SCALE;
            thisRerr_[col] += (err * 7) / 16;
            nextRerr_[col + 2] += (err * 3) / 16;
            nextRerr_[col + 1] += (err * 5) / 16;
            nextRerr_[col] += (err) / 16;
            err = (long) (sg - sg2) * FS_SCALE;
            thisGerr_[col] += (err * 7) / 16;
            nextGerr_[col + 2] += (err * 3) / 16;
            nextGerr_[col + 1] += (err * 5) / 16;
            nextGerr_[col] += (err) / 16;
            err = (long) (sb - sb2) * FS_SCALE;
            thisBerr_[col] += (err * 7) / 16;
            nextBerr_[col + 2] += (err * 3) / 16;
            nextBerr_[col + 1] += (err * 5) / 16;
            nextBerr_[col] += (err) / 16;
            --col;
            if (col <= limitcol)
                // done row
                break;
        }
    }
    // make next error info current for next call to this method
    int[] temperr;
    temperr = thisRerr_;
    thisRerr_ = nextRerr_;
    nextRerr_ = temperr;
    temperr = thisGerr_;
    thisGerr_ = nextGerr_;
    nextGerr_ = temperr;
    temperr = thisBerr_;
    thisBerr_ = nextBerr_;
    nextBerr_ = temperr;
    // disable different direction scanning
    forward_ = !forward_;
}
