public void run() {
    try {
        byte[] buffer = new byte[128];
        ServerSocket serverSocket = new ServerSocket(porta);
        /* laco infinito */
        while (true) {
            /* aceita conexao */
            System.out.println("Negociador: Aguardando conexao de cliente...");
            Socket socket = serverSocket.accept();
            /* seta entrada e saida */
            OutputStream out = socket.getOutputStream();
            InputStream in = socket.getInputStream();
            /* Le pacote de pedido de requisicao */
            if (in.read() == PedidoConexao.ID) {
                /* le restante do pacote */
                in.read(buffer);
                /* cria pacote, atravez do protocolo */
                PedidoConexao pedidoConexao = new PedidoConexao(buffer, false);
                System.out.println("Negociacao: Recebendo pedido de conexao de " + socket.getInetAddress() + ", " + pedidoConexao.getNome());
                /* verifica se nao estourou limite de jogadores online */
                if (Main.nucleo.numeroJogadores() >= Constantes.MAXIMO_JOGADORES) {
                    System.err.println("Negociacao: Pedido negado: numero limite atingido: " + Constantes.MAXIMO_JOGADORES);
                    /* envia resposta */
                    RespostaConexao resposta = new RespostaConexao(RespostaConexao.LIMITE_JOGADORES, 0, (byte) 0);
                    out.write(resposta.toBytes(true));
                    out.close();
                    in.close();
                    socket.close();
                    continue;
                }
                /* verifica se nome nao conflita */
                if (Main.nucleo.nomeExiste(pedidoConexao.getNome())) {
                    System.err.println("Negociacao: Pedido negado: nome ja existe: " + pedidoConexao.getNome());
                    /* envia resposta */
                    RespostaConexao resposta = new RespostaConexao(RespostaConexao.NOME_CONFLITANTE, 0, (byte) 0);
                    out.write(resposta.toBytes(true));
                    out.close();
                    in.close();
                    socket.close();
                    continue;
                }
                /* ok, adiciona jogador ao sistema */
                int porta = Main.nucleo.adicionarJogador(pedidoConexao.getNome());
                System.out.println("Negociacao: Jogador " + pedidoConexao.getNome() + " foi aceito na porta " + porta);
                /* envia resposta */
                RespostaConexao resposta = new RespostaConexao(RespostaConexao.CONEXAO_ACEITA, porta, (byte) (porta - Main.nucleo.PORTA_BASE));
                out.write(resposta.toBytes(true));
                out.close();
                in.close();
                socket.close();
                continue;
            } else {
                System.err.println("Negociacao: Pacote invalido recebido pela porta" + porta + " do cliente " + socket.getRemoteSocketAddress());
                out.close();
                in.close();
                socket.close();
                continue;
            }
        }
    } catch (IOException ex) {
        ex.printStackTrace();
    }
}
