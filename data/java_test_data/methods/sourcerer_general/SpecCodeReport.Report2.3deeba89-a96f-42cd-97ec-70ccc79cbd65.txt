public static List<KitTimesBean> Report2(String field, String type) {
    List<KitTimesBean> ktbList = new ArrayList<KitTimesBean>();
    Map<Long, String> map = MapResultService.getMsHistoryMap();
    List<Map.Entry<Long, String>> infoIds = new ArrayList<Map.Entry<Long, String>>(map.entrySet());
    // 排序
    Collections.sort(infoIds, new Comparator<Map.Entry<Long, String>>() {

        public int compare(Map.Entry<Long, String> o1, Map.Entry<Long, String> o2) {
            return (int) (o1.getKey() - o2.getKey());
        }
    });
    // 号码上次出现位置
    Map<String, Integer> numSepMap = new HashMap<String, Integer>();
    // 计算相同号码出现间隔
    for (int i = 0; i < infoIds.size(); i++) {
        Map.Entry<Long, String> v = infoIds.get(i);
        int maxInv = 0;
        int timesInv = 1;
        int totalInv = 0;
        if (numSepMap.containsKey(v.getValue())) {
            int iVal = numSepMap.remove(v.getValue());
            int iInv = i - iVal;
            maxInv = iInv;
            if (numSepMap.containsKey("MAX_" + v.getValue())) {
                int tMaxInv = numSepMap.remove("MAX_" + v.getValue());
                if (maxInv < tMaxInv) {
                    maxInv = tMaxInv;
                }
            }
            if (numSepMap.containsKey("TIMES_" + v.getValue())) {
                timesInv = numSepMap.remove("TIMES_" + v.getValue());
                timesInv = timesInv + 1;
            }
            if (numSepMap.containsKey("Total_" + v.getValue())) {
                totalInv = numSepMap.remove("Total_" + v.getValue());
            }
            totalInv = totalInv + iInv;
            numSepMap.put("MAX_" + v.getValue(), maxInv);
            numSepMap.put("TIMES_" + v.getValue(), timesInv);
            numSepMap.put("Total_" + v.getValue(), totalInv);
        }
        numSepMap.put(v.getValue(), i);
    }
    for (int j = 1; j <= 49; j++) {
        int nkt = numSepMap.get("MAX_" + String.valueOf(j));
        double tkt = numSepMap.get("Total_" + String.valueOf(j)) / numSepMap.get("TIMES_" + String.valueOf(j));
        ktbList.add(new KitTimesBean(j, nkt, tkt));
    }
    if (field != null && "nonKitTimes".toLowerCase().equals(field.toLowerCase())) {
        if ("desc".toLowerCase().equals(type.toLowerCase())) {
            Collections.sort(ktbList, new Comparator<KitTimesBean>() {

                public int compare(KitTimesBean o1, KitTimesBean o2) {
                    return (int) (o2.getNonKitTimes() - o1.getNonKitTimes());
                }
            });
        } else {
            Collections.sort(ktbList, new Comparator<KitTimesBean>() {

                public int compare(KitTimesBean o1, KitTimesBean o2) {
                    return (int) (o1.getNonKitTimes() - o2.getNonKitTimes());
                }
            });
        }
    } else if (field != null && "totalKitTimes".toLowerCase().equals(field.toLowerCase())) {
        if ("desc".toLowerCase().equals(type.toLowerCase())) {
            Collections.sort(ktbList, new Comparator<KitTimesBean>() {

                public int compare(KitTimesBean o1, KitTimesBean o2) {
                    return (int) (o2.getTotalKitTimes() - o1.getTotalKitTimes());
                }
            });
        } else {
            Collections.sort(ktbList, new Comparator<KitTimesBean>() {

                public int compare(KitTimesBean o1, KitTimesBean o2) {
                    return (int) (o1.getTotalKitTimes() - o2.getTotalKitTimes());
                }
            });
        }
    }
    return ktbList;
}
