public PBInstance nextInstance() {
    String line;
    if (!f_prop.hasNextLine()) {
        f_prop.close();
        return null;
    }
    if ((line = f_prop.nextLine().trim()).isEmpty()) {
        f_prop.close();
        return null;
    }
    String[] str = line.split(PBLib.FIELD_DELIM);
    PBInstance instance = new PBInstance();
    instance.treePath = str[0];
    instance.treeIndex = Integer.parseInt(str[1]);
    instance.predicateId = Integer.parseInt(str[2]);
    instance.annotator = str[3];
    instance.type = str[4];
    instance.rolesetId = str[5];
    for (int i = 7; i < str.length; i++) {
        String sarg = str[i];
        int idx = sarg.indexOf(PBLib.PROP_LABEL_DELIM);
        String label = sarg.substring(idx + 1);
        String locs = sarg.substring(0, idx);
        PBArg pbArg = new PBArg(label, instance.predicateId);
        StringTokenizer tok = new StringTokenizer(locs, PBLib.PROP_ARG_OP, true);
        String argType = "";
        while (tok.hasMoreTokens()) {
            String next = tok.nextToken();
            if (next.length() == 1)
                argType = next;
            else {
                String[] loc = next.split(PBLib.PROP_LOC_DELIM);
                int terminalId = Integer.parseInt(loc[0]);
                int height = Integer.parseInt(loc[1]);
                if (!pbArg.containsLoc(terminalId, height))
                    pbArg.addLoc(new PBLoc(argType, terminalId, height));
            // else
            // System.err.println("Duplicated location "+next+": "+line);
            }
        }
        instance.addArg(pbArg);
    }
    return instance;
}
