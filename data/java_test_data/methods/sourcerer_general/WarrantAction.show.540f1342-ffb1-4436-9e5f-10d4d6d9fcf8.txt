public String show() throws Exception {
    if ("Y".equals(this.getJsonYn())) {
        try {
            List<Warrant> datas = WarrantHtmlParser.execute();
            if (datas != null && datas.size() > 0) {
                List<Warrant> results = new ArrayList<Warrant>();
                for (Warrant warrant : datas) {
                    StockData sData = stockDataManager.getDataFromStatic(warrant.getWarrantName());
                    if (sData != null) {
                        warrant.setWarrantCode(sData.getWarrantCode());
                        // 权证的杠杠比例＝标的证券价格×行使比例÷权证价格
                        warrant.setRate(warrant.getStockPrice() * sData.getApplyRate() / warrant.getWarrantPrice());
                        // 认购权证溢价率=（行权价+认购权证价格/行权比例-正股价）/正股价
                        // 认沽权证溢价率=（正股价+认沽权证价格/行权比例-行权价）/正股价
                        double overPrice = ((sData.getApplyPrice() + warrant.getWarrantPrice() / sData.getApplyRate() - warrant.getStockPrice()) / warrant.getStockPrice()) * 100;
                        warrant.setOverPrice(overPrice);
                        double stockSumCharge = ((warrant.getStockPrice() - sData.getStockMinPrice()) / sData.getStockMinPrice()) * 100;
                        warrant.setStockSumChange(stockSumCharge);
                        double warrantSumCharge = ((warrant.getWarrantPrice() - sData.getWarrantMinPrice()) / sData.getWarrantMinPrice()) * 100;
                        warrant.setWarrantSumChange(warrantSumCharge);
                        warrant.setEndDate(sData.getEndDate());
                        warrant.setApplyPrice(sData.getApplyPrice());
                        warrant.setQuantity(sData.getQuantity());
                        warrant.setValue(warrant.getQuantity() * warrant.getWarrantPrice() / 10000);
                        warrant.setStockCode(sData.getStockCode());
                        warrant.setPe(warrant.getStockPrice() / sData.getIncome());
                        results.add(warrant);
                    }
                }
                JsonConfig cfg = new JsonConfig();
                cfg.registerJsonValueProcessor(java.util.Date.class, new JsonDateValueProcessor());
                JSONArray jsonArray = JSONArray.fromObject(results, cfg);
                this.setJsonString(jsonArray.toString());
            }
        } catch (JSONException e) {
            e.printStackTrace();
        }
        return JSON;
    } else {
        return SUCCESS;
    }
}
