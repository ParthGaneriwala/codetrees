public Vetor calcularLuz(int fonteDeLuz) {
    // TODO Adicionar multiplas fontes de luz
    Vetor il = parametros.getIl()[fonteDeLuz];
    Ponto pl = parametros.getPl()[fonteDeLuz];
    // vetor que indica a direção da luz
    Vetor nulo = new Vetor(0, 0, 0);
    // componente ambiental
    Vetor luz = pl.subtracao(this.pontoReal);
    // normalizando o vetor V
    this.ambiental = parametros.getIa().produtoEscalar(parametros.getKa());
    // normalizando o vetor N
    this.v.normalizar();
    // normalizando o vetor V
    this.normal.normalizar();
    luz.normalizar();
    // calculando o produto interno
    double teste = this.v.produtoInterno(this.normal);
    if (teste < 0) {
        this.normal = this.normal.produtoEscalar(-1);
    }
    // calcula o produto interno entre a luz e a normal do ponto
    double prodInt = this.normal.produtoInterno(luz);
    if (prodInt < 0) {
        this.difusa = nulo;
        this.especular = nulo;
    } else {
        Vetor r = (this.normal.produtoEscalar(2 * prodInt)).subtracao(luz);
        r.normalizar();
        this.difusa = ((parametros.getKd().produtoComponentes(parametros.getOd())).produtoComponentes(il)).produtoEscalar(prodInt);
        double temp = this.v.produtoInterno(r);
        if (temp < 0) {
            this.especular = nulo;
        } else {
            double temp2 = Math.pow(temp, parametros.getEta());
            this.especular = il.produtoEscalar(temp2 * parametros.getKs());
        }
    }
    return (this.ambiental.soma(this.luzTotal.soma(this.difusa.soma(this.especular))));
}
