public static void main(final String[] argv) {
    log.trace("Entering ComplexityPanel.main(String[])");
    UILib.setPlatformLookAndFeel();
    Config config = Config.getInstance();
    String directoryToProcess = null;
    File[] sourceDirectories = null;
    Tree initialTree = null;
    String frameTitle = ThemeFactory.getTheme().getFrameTitle();
    if (config.isLimitedMode()) {
        log.info("Loading data from XML-file");
        initialTree = DataService.loadTreeFromClasspathResource(config.getDataResourceName());
        frameTitle = frameTitle + "    (" + config.getFrameTitle() + ")";
    } else {
        directoryToProcess = config.getProperty(Constant.SOURCES_DIRECTORY_KEY);
        log.info("processing sources from: " + directoryToProcess);
        if (directoryToProcess == null) {
            log.fatal("No correct sources_directory specified in complexitymap.properties or complexitymap_local.properties");
            // ComplexityMap does not yet support starting without a tree
            System.exit(-1);
        } else {
            sourceDirectories = new File[] { new File(directoryToProcess) };
        }
        log.info("Loading data from FileSystem");
        if (sourceDirectories == null) {
            log.fatal("Could not find sources_directory to load Tree from filesystem.");
            // ComplexityMap does not yet support starting without a tree
            System.exit(-1);
        } else {
            // initialTree = DataService.loadTreeFromFile(); (currently broken)
            // initialTree = DataService.loadTreeFromConfluence();
            // initialTree = DataService.loadTreeFromClasspathResource(config.getDataResourceName());
            initialTree = DataService.loadTreeFromFileSystem(sourceDirectories);
        // initialTree = DataService.loadTreeFromXmlNamespaces();
        // initialTree = DataService.loadFromJarFile();
        // TreeUtil.verifyTreeForZeroWeight(initialTree);
        // TreeUtil.advancedTreeVerification(initialTree);
        }
        String frameTitleArgument = Constant.FRAME_TITLE_KEY + " argument unset";
        frameTitleArgument = Config.getInstance().getFrameTitle();
        frameTitle = frameTitle + "    (" + frameTitleArgument + ")";
    }
    JComponent complexityPanel = new ComplexityMapPanel(initialTree, sourceDirectories);
    JFrame frame = new JFrame(frameTitle);
    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    frame.setContentPane(complexityPanel);
    frame.pack();
    frame.setVisible(true);
    frame.setExtendedState(javax.swing.JFrame.MAXIMIZED_BOTH);
    log.trace("Leaving ComplexityPanel.main(String[])");
}
