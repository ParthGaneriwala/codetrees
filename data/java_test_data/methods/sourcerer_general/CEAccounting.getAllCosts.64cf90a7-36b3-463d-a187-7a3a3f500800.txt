@SuppressWarnings("unchecked")
@Override
public List<Cost> getAllCosts(String jobNum) throws Exception {
    Expression e = ExpressionFactory.matchExp(Jcdetail.JOBNUM_PROPERTY, jobNum);
    e = e.andExp(ExpressionFactory.lessExp(Jcdetail.TYPE_PROPERTY, 17));
    SelectQuery s = new SelectQuery(Jcdetail.class, e);
    s.addOrdering(Jcdetail.DATE_PROPERTY, true);
    List<Cost> costs = new ArrayList<Cost>();
    Jcdetail jc;
    Cost cost;
    Code code = null;
    Hashtable<String, Double> overhead = new Hashtable<String, Double>();
    Overhead oh = null;
    double burden = 0;
    String phase;
    List c = context.performQuery(s);
    for (Iterator i = c.iterator(); i.hasNext(); ) {
        jc = (Jcdetail) i.next();
        if (oh == null)
            oh = new Overhead(jc.getJob());
        phase = map(jc.getType());
        code = new Code();
        code.setCostCode(jc.getCatnum());
        code.setPhaseCode(phase);
        code.setDivision(jc.getPhasenum());
        cost = getCost(jc);
        try {
            burden = overhead.get(code.getDivision() + "\t" + code.getCostCode() + "\t" + code.getPhaseCode());
        } catch (NullPointerException np) {
            // primitive types hate null
            burden = 0;
        }
        burden += oh.get(jc.getType()) * cost.getCost();
        if (burden != 0)
            overhead.put(code.getDivision() + "\t" + code.getCostCode() + "\t" + code.getPhaseCode(), burden);
        cost.setCode(code);
        costs.add(cost);
    }
    c.clear();
    c = null;
    StringTokenizer st;
    String key;
    for (Enumeration<String> keys = overhead.keys(); keys.hasMoreElements(); ) {
        key = keys.nextElement();
        st = new StringTokenizer(key);
        code = new Code();
        code.setDivision(st.nextToken());
        code.setCostCode(st.nextToken());
        code.setPhaseCode(st.nextToken());
        costs.add(addOverhead(code, overhead.get(key)));
    }
    return costs;
}
