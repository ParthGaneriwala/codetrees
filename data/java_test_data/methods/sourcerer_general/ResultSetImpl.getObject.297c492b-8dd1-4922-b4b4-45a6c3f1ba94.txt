public Object getObject(int columnIndex) throws SQLException {
    checkRowPos();
    checkColumnBounds(columnIndex);
    int columnIndexMinusOne = columnIndex - 1;
    if (this.thisRow.isNull(columnIndexMinusOne)) {
        this.wasNullFlag = true;
        return null;
    }
    this.wasNullFlag = false;
    Field field;
    field = this.fields[columnIndexMinusOne];
    switch(field.getSQLType()) {
        case Types.BIT:
        case Types.BOOLEAN:
            if (field.getMysqlType() == MysqlDefs.FIELD_TYPE_BIT && !field.isSingleBit()) {
                return getBytes(columnIndex);
            }
            // uses.
            return Boolean.valueOf(getBoolean(columnIndex));
        case Types.TINYINT:
            if (!field.isUnsigned()) {
                return Constants.integerValueOf(getByte(columnIndex));
            }
            return Constants.integerValueOf(getInt(columnIndex));
        case Types.SMALLINT:
            return Constants.integerValueOf(getInt(columnIndex));
        case Types.INTEGER:
            if (!field.isUnsigned() || field.getMysqlType() == MysqlDefs.FIELD_TYPE_INT24) {
                return Constants.integerValueOf(getInt(columnIndex));
            }
            return Constants.longValueOf(getLong(columnIndex));
        case Types.BIGINT:
            if (!field.isUnsigned()) {
                return Constants.longValueOf(getLong(columnIndex));
            }
            String stringVal = getString(columnIndex);
            if (stringVal == null) {
                return null;
            }
            try {
                return new BigInteger(stringVal);
            } catch (NumberFormatException nfe) {
                throw SQLError.createSQLException(Messages.getString("ResultSet.Bad_format_for_BigInteger", new Object[] { Constants.integerValueOf(columnIndex), stringVal }), SQLError.SQL_STATE_ILLEGAL_ARGUMENT, // $NON-NLS-1$
                getExceptionInterceptor());
            }
        case Types.DECIMAL:
        case Types.NUMERIC:
            stringVal = getString(columnIndex);
            BigDecimal val;
            if (stringVal != null) {
                if (stringVal.length() == 0) {
                    val = new BigDecimal(0);
                    return val;
                }
                try {
                    val = new BigDecimal(stringVal);
                } catch (NumberFormatException ex) {
                    throw SQLError.createSQLException(Messages.getString(// $NON-NLS-1$
                    "ResultSet.Bad_format_for_BigDecimal", new Object[] { stringVal, new Integer(columnIndex) }), SQLError.SQL_STATE_ILLEGAL_ARGUMENT, getExceptionInterceptor());
                }
                return val;
            }
            return null;
        case Types.REAL:
            return new Float(getFloat(columnIndex));
        case Types.FLOAT:
        case Types.DOUBLE:
            return new Double(getDouble(columnIndex));
        case Types.CHAR:
        case Types.VARCHAR:
            if (!field.isOpaqueBinary()) {
                return getString(columnIndex);
            }
            return getBytes(columnIndex);
        case Types.LONGVARCHAR:
            if (!field.isOpaqueBinary()) {
                return getStringForClob(columnIndex);
            }
            return getBytes(columnIndex);
        case Types.BINARY:
        case Types.VARBINARY:
        case Types.LONGVARBINARY:
            if (field.getMysqlType() == MysqlDefs.FIELD_TYPE_GEOMETRY) {
                return getBytes(columnIndex);
            } else if (field.isBinary() || field.isBlob()) {
                byte[] data = getBytes(columnIndex);
                if (this.connection.getAutoDeserialize()) {
                    Object obj = data;
                    if ((data != null) && (data.length >= 2)) {
                        if ((data[0] == -84) && (data[1] == -19)) {
                            // Serialized object?
                            try {
                                ByteArrayInputStream bytesIn = new ByteArrayInputStream(data);
                                ObjectInputStream objIn = new ObjectInputStream(bytesIn);
                                obj = objIn.readObject();
                                objIn.close();
                                bytesIn.close();
                            } catch (ClassNotFoundException cnfe) {
                                throw SQLError.createSQLException(Messages.getString(// $NON-NLS-1$
                                "ResultSet.Class_not_found___91") + cnfe.toString() + Messages.getString("ResultSet._while_reading_serialized_object_92"), // $NON-NLS-1$
                                getExceptionInterceptor());
                            } catch (IOException ex) {
                                // not serialized?
                                obj = data;
                            }
                        } else {
                            return getString(columnIndex);
                        }
                    }
                    return obj;
                }
                return data;
            }
            return getBytes(columnIndex);
        case Types.DATE:
            if (field.getMysqlType() == MysqlDefs.FIELD_TYPE_YEAR && !this.connection.getYearIsDateType()) {
                return Constants.shortValueOf(getShort(columnIndex));
            }
            return getDate(columnIndex);
        case Types.TIME:
            return getTime(columnIndex);
        case Types.TIMESTAMP:
            return getTimestamp(columnIndex);
        default:
            return getString(columnIndex);
    }
}
