public Token getNextToken() {
    String chrRead = "";
    chrRead = getNextChar(true);
    wordRead = "";
    if (chrRead.equals("")) {
        return new Token("", Tag.VAZIO);
    }
    // adiciona numero da linha se é NEWLINE
    if (getCharValue(chrRead) == Tag.NEWLINE) {
        // pega o número da linha
        addLineNumber();
    }
    if (isWhitespace(chrRead)) {
        while (isWhitespace(chrRead) && !isEOF(chrRead)) {
            chrRead = getNextChar(true);
            if (getCharValue(chrRead) == Tag.NEWLINE) {
                // pega o número da linha
                addLineNumber();
            }
        }
    }
    // verifica os caracteres especiais e simbolos
    wordRead = chrRead;
    switch(getCharValue(chrRead)) {
        case // !
        Tag.EXCL:
            if (getCharValue(getNextChar(false)) == Tag.EQUAL_SIG) {
                new ErroLexico("Nesta linguagem 'diferente' é feito com <>, e nao com !=", lineNumber);
            }
        // $
        case Tag.CIFRAO:
        case // #
        Tag.SHARP:
            new ErroLexico("Caratere invalido", getLineNumber());
        // ,
        case Tag.COLON:
        // ;
        case Tag.SEMICOLON:
        case // :
        Tag.TWOPOINTS:
            if (isPalavraReservada(wordRead)) {
                return adicionaTabelaSimbolos(palReservada.get(wordRead));
            }
        // Pega o resto da divisao e os comentarios
        case // %
        Tag.PORCENT:
            if (getCharValue(getNextChar(false)) == Tag.PORCENT) {
                // trata comentario
                while (getCharValue(getNextChar(true)) != Tag.NEWLINE && !isEOF(chrRead)) ;
                // pega o número da linha
                addLineNumber();
                // ignora e devolve o próximo token
                return this.getNextToken();
            } else {
                if (isPalavraReservada(wordRead)) {
                    return adicionaTabelaSimbolos(palReservada.get(wordRead));
                }
            }
        // (
        case Tag.LEFTPAR:
        // )
        case Tag.LCHAVE:
        // {
        case Tag.RCHAVE:
        // }
        case Tag.RIGHTPAR:
        // [
        case Tag.LCOLCHETE:
        case // ]
        Tag.RCOLCHETE:
            if (isPalavraReservada(wordRead)) {
                return adicionaTabelaSimbolos(palReservada.get(wordRead));
            }
        // Pega o AND
        case // &
        Tag.ECOMERCIAL:
            if (getCharValue(getNextChar(false)) == Tag.ECOMERCIAL) {
                wordRead = wordRead + getNextChar(true);
                if (isPalavraReservada(wordRead)) {
                    return adicionaTabelaSimbolos(palReservada.get(wordRead));
                }
            } else {
                new ErroLexico("Uso incorreto de &", getLineNumber());
            }
        // Pega o OR
        case // |
        Tag.PIPE:
            if (getCharValue(getNextChar(false)) == Tag.PIPE) {
                wordRead = wordRead + getNextChar(true);
                if (isPalavraReservada(wordRead)) {
                    return adicionaTabelaSimbolos(palReservada.get(wordRead));
                }
            } else {
                new ErroLexico("Nao utilize pipe que nao seja ||", getLineNumber());
            }
        // Pega multiplicacao e potencia
        case // *
        Tag.ASTERISK:
            if (getCharValue(getNextChar(false)) == Tag.ASTERISK) {
                wordRead = wordRead + getNextChar(true);
                if (isPalavraReservada(wordRead)) {
                    return adicionaTabelaSimbolos(palReservada.get(wordRead));
                }
            } else {
                if (isPalavraReservada(wordRead)) {
                    return adicionaTabelaSimbolos(palReservada.get(wordRead));
                }
            }
        // +
        case Tag.PLUS_SIG:
        // -
        case Tag.MINUS_SIG:
        // Pea a divisao
        case // /
        Tag.DIV_SIG:
            if (isPalavraReservada(wordRead)) {
                return adicionaTabelaSimbolos(palReservada.get(wordRead));
            }
        // Pega a comparacao com < ou <= ou <>
        case // <
        Tag.MINOR:
            if (getCharValue(getNextChar(false)) == Tag.GREATER) {
                wordRead = wordRead + getNextChar(true);
                if (isPalavraReservada(wordRead)) {
                    return adicionaTabelaSimbolos(palReservada.get(wordRead));
                }
            }
        // >
        case Tag.GREATER:
        // Pega atribuicao de valor ou comparacao ==
        case // =
        Tag.EQUAL_SIG:
            if (getCharValue(getNextChar(false)) == Tag.EQUAL_SIG) {
                wordRead = wordRead + getNextChar(true);
                if (isPalavraReservada(wordRead)) {
                    return adicionaTabelaSimbolos(palReservada.get(wordRead));
                }
            } else {
                return adicionaTabelaSimbolos(new ReservedWord(chrRead, getCharValue(chrRead)));
            }
        case Tag.ASPASDUPLA:
            if (getCharValue(getNextChar(false)) != Tag.ASPASDUPLA) {
                while (getCharValue(getNextChar(false)) != Tag.ASPASDUPLA && !isEOF(chrRead)) {
                    wordRead = wordRead + getNextChar(true);
                }
                wordRead = wordRead + getNextChar(true);
            } else {
                wordRead = wordRead + getNextChar(true);
            }
            // pega so a primeira letra
            if (wordRead.length() >= 3) {
                wordRead = wordRead.substring(1, 2);
            }
            return adicionaTabelaSimbolos(new ReservedWord(wordRead, Tag.CHAR));
    }
    // verifica os numeros
    if (isDigit(chrRead)) {
        wordRead = "";
        do {
            wordRead = wordRead + chrRead;
            chrRead = isDigit(getNextChar(false)) ? getNextChar(true) : getNextChar(false);
        } while (isDigit(chrRead) && !isEOF(chrRead));
        if (getCharValue(chrRead) == Tag.POINT) {
            wordRead = wordRead + chrRead;
            // deletando o ponto
            deleteNextChar();
            chrRead = getNextChar(false);
            if (isDigit(chrRead)) {
                deleteNextChar();
                do {
                    wordRead = wordRead + chrRead;
                    chrRead = isDigit(getNextChar(false)) ? getNextChar(true) : getNextChar(false);
                } while (isDigit(chrRead) && !isEOF(chrRead));
            }
        }
        if (isLetter(getNextChar(false))) {
            new ErroLexico("Nao pode colocar letras depois de numeros", getLineNumber());
        }
        if (wordRead.contains(".")) {
            new ErroLexico("Nao use float point, ok?", getLineNumber());
            return adicionaTabelaSimbolos(new ReservedWord(wordRead, Tag.REAL));
        } else {
            return adicionaTabelaSimbolos(new ReservedWord(wordRead, Tag.NUMBER));
        }
    } else // verificar se eh palavra
    if (isLetter(chrRead)) {
        wordRead = "";
        do {
            wordRead = wordRead + chrRead;
            chrRead = (isValidIdCharacter(getNextChar(false))) ? getNextChar(true) : getNextChar(false);
        } while (isValidIdCharacter(chrRead) && !isEOF(chrRead));
        if (isPalavraReservada(wordRead))
            return adicionaTabelaSimbolos(palReservada.get(wordRead));
        else
            return adicionaTabelaSimbolos(new ReservedWord(wordRead, Tag.ID));
    } else // verifica se é EOF
    if (isEOF(chrRead)) {
        return new Token("\0", Tag.EOF);
    }
    return new Token("ERROR!", Tag.ERROR);
}
