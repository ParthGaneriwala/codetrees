public static void performanceExperiment() throws IOException {
    BufferedWriter writer = new BufferedWriter(new FileWriter(new File("stack_performance_experiment_(on dt-s2 server) IlConcurrentStack_v2_insert in random place.txt")));
    for (int i = 0; i < NumberOfOperations.length; i++) {
        for (int j = 0; j < NumberOfWorkers.length; j++) {
            int numberOfProducers = NumberOfWorkers[j] - 1;
            int numberOfInsertions = NumberOfOperations[i] / 2;
            int insrtionsPerWorker = numberOfInsertions / numberOfProducers;
            int realInsertions = numberOfProducers * insrtionsPerWorker;
            // for (int k = 0; k < SmallNumbers.length; k++) {
            // int smallNumber = SmallNumbers[k];
            IlConcurrentStack_v2<Integer> ilConcurrentStack = new IlConcurrentStack_v2<Integer>(numberOfProducers / 5);
            long currentTimeMillis = System.currentTimeMillis();
            for (int m = 0; m < numberOfProducers; m++) {
                // TODO
                new Thread(new PositiveProducer(ilConcurrentStack, insrtionsPerWorker, 10)).start();
            }
            // TODO
            Thread consumer = new Thread(new Consumer(ilConcurrentStack, realInsertions - 1, 10));
            consumer.start();
            try {
                consumer.join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            String out = "numberOfWorkers , " + (numberOfProducers + 1) + " , numberOfOperations , " + NumberOfOperations[i] + " , SmallNumbers , " + (numberOfProducers / 5) + " , time in millis , " + (System.currentTimeMillis() - currentTimeMillis);
            writer.write(out + "\n");
            writer.flush();
            System.out.println(out);
            // }
            ConcurrentStack<Integer> concurrentStack = new ConcurrentStack<Integer>();
            currentTimeMillis = System.currentTimeMillis();
            for (int m = 0; m < numberOfProducers; m++) {
                // TODO
                new Thread(new PositiveProducer(concurrentStack, insrtionsPerWorker, 10)).start();
            }
            // TODO
            consumer = new Thread(new Consumer(concurrentStack, realInsertions - 1, 10));
            consumer.start();
            try {
                consumer.join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            out = "numberOfWorkoers , " + (numberOfProducers + 1) + " , numberOfOperations , " + NumberOfOperations[i] + " , SmallNumbers , " + "--" + " , time in millis , " + (System.currentTimeMillis() - currentTimeMillis);
            writer.write(out + "\n");
            writer.flush();
            System.out.println(out);
        }
    }
    writer.close();
}
