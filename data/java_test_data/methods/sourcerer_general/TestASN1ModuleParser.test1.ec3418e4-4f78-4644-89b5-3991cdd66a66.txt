@Test
public void test1() throws Exception {
    String rsrcName = "rsrc/test1.asn";
    URL url = ASN1ModuleParser.class.getResource(rsrcName);
    if (null == url)
        throw new RuntimeException("The resource file " + StringUtil.singleQuote(rsrcName) + " couldn't be found!");
    File module = new File(url.getFile());
    ASN1ModuleParser moduleParser = new ASN1ModuleParser();
    moduleParser.initialize(module);
    Collection<ASN1Definition> defs = moduleParser.getDefinitions();
    Assert.assertEquals(6, defs.size());
    // User-field ::= SEQUENCE {
    // num INTEGER OPTIONAL ,
    // type ENUMERATED {
    // nameonly (0) ,
    // cas (1) ,
    // ec (2) } OPTIONAL ,
    // data CHOICE {
    // str VisibleString ,
    // int INTEGER ,
    // real REAL ,
    // bool BOOLEAN ,
    // os OCTET STRING ,
    // object User-object ,
    // strs SEQUENCE OF VisibleString ,
    // ints SEQUENCE OF INTEGER ,
    // reals SEQUENCE OF REAL ,
    // oss SEQUENCE OF OCTET STRING ,
    // fields SEQUENCE OF User-field ,
    // objects SEQUENCE OF User-object } }
    ASN1Definition def = moduleParser.getDefinition("User-field");
    Assert.assertNotNull(def);
    Assert.assertEquals(3, def.getFields().size());
    Assert.assertEquals("num", def.getField(0).getLabel());
    Assert.assertEquals("INTEGER", def.getField(0).getTypeName());
    Assert.assertTrue(def.getField(0).getIsOptional());
    Assert.assertEquals("type", def.getField(1).getLabel());
    Assert.assertEquals("ENUMERATED", def.getField(1).getTypeName());
    Assert.assertTrue(def.getField(1).getIsOptional());
    Assert.assertEquals("ec", def.getField(1).getEnumeratedValue(2));
    Assert.assertEquals("data", def.getField(2).getLabel());
    Assert.assertEquals("CHOICE", def.getField(2).getTypeName());
    Assert.assertFalse(def.getField(2).getIsOptional());
    Assert.assertEquals(12, def.getField(2).getFields().size());
    // Dbtag-set ::= SET OF Dbtag
    def = moduleParser.getDefinition("Dbtag-set");
    Assert.assertNotNull(def);
    Assert.assertEquals("SET", def.getTypeName());
    Assert.assertEquals("Dbtag", def.getCollectionFieldTypeName());
    Assert.assertNull(def.getFields());
    // NCBI2na ::= OCTET STRING
    def = moduleParser.getDefinition("NCBI2na");
    Assert.assertNotNull(def);
    Assert.assertEquals("OCTET STRING", def.getTypeName());
    Assert.assertNull(def.getFields());
    // NCBI4na ::= OCTET STRING
    def = moduleParser.getDefinition("NCBI4na");
    Assert.assertNotNull(def);
    Assert.assertEquals("OCTET STRING", def.getTypeName());
    Assert.assertNull(def.getFields());
}
