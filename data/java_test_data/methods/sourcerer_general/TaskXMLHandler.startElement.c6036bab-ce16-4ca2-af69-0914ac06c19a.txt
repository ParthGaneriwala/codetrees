@Override
public void startElement(String namespaceURI, String localName, String qName, Attributes atts) throws SAXException {
    if (localName.equals("location")) {
        // do nothing
        inTag = "location";
    } else if (localName.equals("task")) {
        inTag = "task";
        // get ID
        try {
            String attrValue = atts.getValue("id");
            if (attrValue != null)
                t = new Task(new UUID(Long.parseLong(attrValue), 1));
            else
                t = new Task(UUID.randomUUID());
            Log.i("cal", "Task id");
        } catch (Exception e) {
            Log.i("cal", "Could not parse task ID: " + e.toString());
            t = new Task(UUID.randomUUID());
        }
        // get name
        t.name = atts.getValue("name");
        if (t.name == null)
            t.name = "Unnamed task";
        Log.i("cal", "Task name");
        // get length
        try {
            String attrValue = atts.getValue("length");
            if (attrValue != null)
                t.length = Integer.parseInt(attrValue);
            else
                t.length = -1;
            Log.i("cal", "Task length");
        } catch (Exception e) {
            t.length = -1;
            Log.i("cal", "Could not parse task length: " + e.toString());
        }
        // get endtime
        try {
            String attrValue = atts.getValue("starttime");
            if (attrValue != null)
                t.startTime = Integer.parseInt(attrValue);
            else
                t.startTime = -1;
            Log.i("cal", "Task starttime");
        } catch (Exception e) {
            t.startTime = -1;
            Log.i("cal", "Could not parse task starttime: " + e.toString());
        }
    } else if (localName.equals("duration")) {
        inTag = "duration";
        // get ID
        try {
            String attrValue = atts.getValue("id");
            if (attrValue != null)
                d = new Duration(new UUID(Long.parseLong(attrValue), 1));
            else
                d = new Duration(UUID.randomUUID());
        } catch (Exception e) {
            Log.i("cal", "Could not parse duration ID: " + e.toString());
            d = new Duration(UUID.randomUUID());
        }
        // get length
        try {
            String attrValue = atts.getValue("length");
            if (attrValue != null)
                d.length = Integer.parseInt(attrValue);
            else
                d.length = -1;
        } catch (Exception e) {
            d.length = -1;
            Log.i("cal", "Could not parse duration length: " + e.toString());
        }
        // get endtime
        try {
            String attrValue = atts.getValue("endtime");
            if (attrValue != null)
                d.endTime = Integer.parseInt(attrValue);
            else
                d.endTime = -1;
        } catch (Exception e) {
            d.endTime = -1;
            Log.i("cal", "Could not parse duration endtime: " + e.toString());
        }
    } else if (localName.equals("step")) {
        inTag = "step";
        s = new Step(d);
        // get ID
        try {
            String attrValue = atts.getValue("id");
            if (attrValue != null)
                s = new Step(d, new UUID(Long.parseLong(attrValue), 1));
            else
                s = new Step(d, UUID.randomUUID());
        } catch (Exception e) {
            Log.i("cal", "Could not parse step ID: " + e.toString());
            s = new Step(d, UUID.randomUUID());
        }
    } else if (localName.equals("title")) {
        inTag = "title";
    } else if (localName.equals("image")) {
        inTag = "image";
    } else if (localName.equals("audio")) {
        inTag = "audio";
    } else if (localName.equals("video")) {
        inTag = "video";
    }
}
