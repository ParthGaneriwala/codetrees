// $ANTLR start "and_expression"
public final MyGrammarParser.and_expression_return and_expression() throws RecognitionException {
    MyGrammarParser.and_expression_return retval = new MyGrammarParser.and_expression_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    MyGrammarParser.simple_expression_return simple_expression169 = null;
    MyGrammarParser.relational_operator_return relational_operator170 = null;
    MyGrammarParser.simple_expression_return simple_expression171 = null;
    RewriteRuleSubtreeStream stream_simple_expression = new RewriteRuleSubtreeStream(adaptor, "rule simple_expression");
    RewriteRuleSubtreeStream stream_relational_operator = new RewriteRuleSubtreeStream(adaptor, "rule relational_operator");
    try {
        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:272:15: ( simple_expression ( relational_operator simple_expression )? -> ^( AND_EXPRESSION simple_expression ( relational_operator simple_expression )? ) )
        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:272:17: simple_expression ( relational_operator simple_expression )?
        {
            pushFollow(FOLLOW_simple_expression_in_and_expression2278);
            simple_expression169 = simple_expression();
            state._fsp--;
            stream_simple_expression.add(simple_expression169.getTree());
            // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:272:35: ( relational_operator simple_expression )?
            int alt30 = 2;
            int LA30_0 = input.LA(1);
            if (((LA30_0 >= IGUAL && LA30_0 <= MENOR_QUE))) {
                alt30 = 1;
            }
            switch(alt30) {
                case 1:
                    // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:272:36: relational_operator simple_expression
                    {
                        pushFollow(FOLLOW_relational_operator_in_and_expression2281);
                        relational_operator170 = relational_operator();
                        state._fsp--;
                        stream_relational_operator.add(relational_operator170.getTree());
                        pushFollow(FOLLOW_simple_expression_in_and_expression2283);
                        simple_expression171 = simple_expression();
                        state._fsp--;
                        stream_simple_expression.add(simple_expression171.getTree());
                    }
                    break;
            }
            // AST REWRITE
            // elements: simple_expression, simple_expression, relational_operator
            // token labels:
            // rule labels: retval
            // token list labels:
            // rule list labels:
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", retval != null ? retval.tree : null);
            root_0 = (CommonTree) adaptor.nil();
            // 273:17: -> ^( AND_EXPRESSION simple_expression ( relational_operator simple_expression )? )
            {
                // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:273:20: ^( AND_EXPRESSION simple_expression ( relational_operator simple_expression )? )
                {
                    CommonTree root_1 = (CommonTree) adaptor.nil();
                    root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(AND_EXPRESSION, "AND_EXPRESSION"), root_1);
                    adaptor.addChild(root_1, stream_simple_expression.nextTree());
                    // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:273:56: ( relational_operator simple_expression )?
                    if (stream_simple_expression.hasNext() || stream_relational_operator.hasNext()) {
                        adaptor.addChild(root_1, stream_relational_operator.nextTree());
                        adaptor.addChild(root_1, stream_simple_expression.nextTree());
                    }
                    stream_simple_expression.reset();
                    stream_relational_operator.reset();
                    adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
