// $ANTLR start "term"
public final MyGrammarParser.term_return term() throws RecognitionException {
    MyGrammarParser.term_return retval = new MyGrammarParser.term_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    MyGrammarParser.factor_return factor176 = null;
    MyGrammarParser.factor_operator_return factor_operator177 = null;
    MyGrammarParser.factor_return factor178 = null;
    RewriteRuleSubtreeStream stream_factor_operator = new RewriteRuleSubtreeStream(adaptor, "rule factor_operator");
    RewriteRuleSubtreeStream stream_factor = new RewriteRuleSubtreeStream(adaptor, "rule factor");
    try {
        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:277:7: ( factor ( factor_operator factor )* -> ^( TERM factor ( factor_operator factor )* ) )
        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:277:9: factor ( factor_operator factor )*
        {
            pushFollow(FOLLOW_factor_in_term2370);
            factor176 = factor();
            state._fsp--;
            stream_factor.add(factor176.getTree());
            // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:277:16: ( factor_operator factor )*
            loop33: do {
                int alt33 = 2;
                int LA33_0 = input.LA(1);
                if (((LA33_0 >= MULT && LA33_0 <= MOD))) {
                    alt33 = 1;
                }
                switch(alt33) {
                    case 1:
                        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:277:18: factor_operator factor
                        {
                            pushFollow(FOLLOW_factor_operator_in_term2374);
                            factor_operator177 = factor_operator();
                            state._fsp--;
                            stream_factor_operator.add(factor_operator177.getTree());
                            pushFollow(FOLLOW_factor_in_term2376);
                            factor178 = factor();
                            state._fsp--;
                            stream_factor.add(factor178.getTree());
                        }
                        break;
                    default:
                        break loop33;
                }
            } while (true);
            // AST REWRITE
            // elements: factor_operator, factor, factor
            // token labels:
            // rule labels: retval
            // token list labels:
            // rule list labels:
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", retval != null ? retval.tree : null);
            root_0 = (CommonTree) adaptor.nil();
            // 277:43: -> ^( TERM factor ( factor_operator factor )* )
            {
                // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:277:46: ^( TERM factor ( factor_operator factor )* )
                {
                    CommonTree root_1 = (CommonTree) adaptor.nil();
                    root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(TERM, "TERM"), root_1);
                    adaptor.addChild(root_1, stream_factor.nextTree());
                    // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:277:60: ( factor_operator factor )*
                    while (stream_factor_operator.hasNext() || stream_factor.hasNext()) {
                        adaptor.addChild(root_1, stream_factor_operator.nextTree());
                        adaptor.addChild(root_1, stream_factor.nextTree());
                    }
                    stream_factor_operator.reset();
                    stream_factor.reset();
                    adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
