public void convert() throws IOException, JeopsException {
    File file = File.createTempFile("jeops", ".tmp");
    FileWriter fw = new FileWriter(file);
    PrintWriter pw = new PrintWriter(fw);
    int openBracketCount = 0;
    boolean toPrint;
    boolean inRuleBaseDeclaration = false;
    boolean inRuleDeclaration = false;
    boolean inRuleBase = false;
    boolean inRule = false;
    boolean thereIsExtends = false;
    boolean thereIsPublic = false;
    token = readNextToken();
    while (token.getTokenType() != EOF) {
        toPrint = false;
        switch(token.getTokenType()) {
            case ERROR:
                {
                    throw new JeopsException("Error: " + token.getLexeme(), scanner.getCurrentLine(), scanner.getCurrentColumn());
                }
            case OPEN_CURLY_BRACKET:
                {
                    openBracketCount++;
                    if (openBracketCount == 1) {
                        inRuleBase = true;
                    }
                    if (inRuleBaseDeclaration) {
                        if (!thereIsExtends) {
                            pw.print("extends jeops.AbstractRuleBase ");
                        }
                        inRuleBaseDeclaration = false;
                    }
                    toPrint = true;
                    break;
                }
            case CLOSE_CURLY_BRACKET:
                {
                    openBracketCount--;
                    if (openBracketCount == 0) {
                        inRuleBase = false;
                        processEndOfRuleBase(pw);
                    } else if (openBracketCount == 1) {
                        inRule = false;
                    }
                    toPrint = true;
                    break;
                }
            case IDENT:
                {
                    toPrint = true;
                    break;
                }
            case RULE_BASE:
                {
                    inRuleBaseDeclaration = true;
                    thereIsRuleBase = true;
                    token = readNextToken();
                    skipWhiteSpace(pw, true);
                    checkToken(token, IDENT, "identifier expected");
                    ruleBaseName = token.getLexeme();
                    pw.print("class Jeops_RuleBase_" + ruleBaseName);
                    break;
                }
            case PUBLIC:
                {
                    // So' ha' uma classe publica: a base de regras.
                    toPrint = false;
                    break;
                }
            case RULE:
                {
                    convertRule(pw);
                    break;
                }
            case EXTENDS:
                {
                    toPrint = true;
                    thereIsExtends = true;
                    break;
                }
            case IMPORT:
                {
                    toPrint = false;
                    processImport(pw);
                    break;
                }
            case PACKAGE:
                {
                    toPrint = false;
                    processPackage(pw);
                    break;
                }
            case IMPLEMENTS:
                {
                    if (!thereIsExtends) {
                        thereIsExtends = true;
                        pw.print("extends jeops.AbstractRuleBase ");
                    }
                    toPrint = true;
                    break;
                }
            default:
                {
                    toPrint = true;
                    break;
                }
        }
        if (toPrint) {
            pw.print(token.getLexeme());
        }
        token = readNextToken();
    }
    // We're at the end of the file; now that the rule base class is
    // already defined, let's define the knowledge base itself.
    pw.println();
    pw.println("/**");
    String name = ruleFileName;
    int aux = name.lastIndexOf(File.separatorChar);
    if (aux != -1) {
        name = name.substring(aux + 1);
    }
    pw.println(" * Knowledge base created by JEOPS from file " + name);
    pw.println(" *");
    Date now = new Date();
    DateFormat dateFormat = DateFormat.getDateInstance();
    pw.println(" * @version " + dateFormat.format(now));
    pw.println(" */");
    pw.println("public class " + ruleBaseName + " extends jeops.AbstractKnowledgeBase {");
    pw.println();
    pw.println("    /**");
    pw.println("     * Creates a new knowledge base with the specified conflict set with the");
    pw.println("     * desired conflict resolution policy.");
    pw.println("     *");
    pw.println("     * @param conflictSet a conflict set with the desired resolution policy");
    pw.println("     */");
    pw.println("    public " + ruleBaseName + "(jeops.conflict.ConflictSet conflictSet) {");
    pw.println("        super(conflictSet);");
    pw.println("    }");
    pw.println();
    pw.println("    /**");
    pw.println("     * Creates a new knowledge base, using the default conflict resolution");
    pw.println("     * policy.");
    pw.println("     */");
    pw.println("    public " + ruleBaseName + "() {");
    pw.println("        this(new jeops.conflict.DefaultConflictSet());");
    pw.println("    }");
    pw.println();
    pw.println("    /**");
    pw.println("     * Factory method used to instantiate the rule base.");
    pw.println("     */");
    pw.println("    protected jeops.AbstractRuleBase createRuleBase() {");
    pw.println("        return new Jeops_RuleBase_" + ruleBaseName + "(this);");
    pw.println("    }");
    pw.println();
    pw.println("}");
    pw.flush();
    pw.close();
    fw.close();
    if (!thereIsRuleBase) {
        throw new JeopsException("There should be a rule base in the input file!", scanner.getCurrentLine(), scanner.getCurrentColumn());
    }
    int separatorIndex = javaFileName.lastIndexOf(File.separatorChar);
    javaFileName = javaFileName.substring(0, separatorIndex + 1) + ruleBaseName + ".java";
    File finalFile = new File(javaFileName);
    if (finalFile.exists()) {
        finalFile.delete();
    }
    file.renameTo(finalFile);
// JavaCompiler.compileJavaFile(finalFile.getAbsolutePath());
}
