private void operationAction() {
    String s = (String) operations.getSelectedItem();
    try {
        if (thresholder.isVisible()) {
            thresholder.setVisible(false);
        }
        addToUndoList();
        undoButton.setEnabled(true);
        if (coverage != null) {
            Operations ops = new Operations(new RenderingHints(null));
            if (s.equals("exp")) {
                segmentButton.setEnabled(false);
                GridCoverage2D exp = (GridCoverage2D) ops.exp(coverage);
                coverage = exp;
            } else if (s.equals("binarize")) {
                try {
                    segmentButton.setEnabled(true);
                    int ceiling = (int) Math.ceil(coverage.getSampleDimension(0).getMaximumValue());
                    floor = (int) Math.floor(coverage.getSampleDimension(0).getMinimumValue());
                    // floor = (int) Math.floor(ip.getMinHeight());
                    // int ceiling = (int) Math.ceil(ip.getMaxHeight());
                    scale = (double) 256 / (ceiling - floor);
                    int increment = (Math.max(1, (int) Math.round((ceiling - floor) / 10)));
                    System.out.println("floor = " + floor);
                    System.out.println("ceiling = " + ceiling);
                    System.out.println("scale = " + scale);
                    System.out.println("increment = " + increment);
                    thresholder.setMinimum(floor);
                    thresholder.setMaximum(ceiling);
                    thresholder.setVisible(true);
                    thresholder.setLabelTable(thresholder.createStandardLabels(increment, floor));
                    thresholder.setPaintLabels(true);
                    thresholder.setMajorTickSpacing(increment);
                    thresholder.setValue(floor + (ceiling - floor) / 2);
                    Operation binOp = def.getOperation("Binarize");
                    ParameterValueGroup pvg = binOp.getParameters();
                    GridCoverage2D band0 = (GridCoverage2D) ops.selectSampleDimension(coverage, new int[] { 0 });
                    pvg.parameter("Source").setValue(band0);
                    pvg.parameter("Threshold").setValue(new Double(floor + (ceiling - floor) / 2));
                    GridCoverage2D binarized = (GridCoverage2D) def.doOperation(pvg);
                    coverage = binarized;
                } catch (org.opengis.parameter.ParameterNotFoundException cause) {
                    throw new RuntimeException("No threshold parameter: " + cause);
                }
            } else if (s.equals("log")) {
                segmentButton.setEnabled(false);
                GridCoverage2D log = (GridCoverage2D) ops.log(coverage);
                coverage = log;
            // } else if (s.equals("invert")){
            // GridCoverage2D inv = (GridCoverage2D) ops.invert(coverage);
            // coverage = inv;
            } else if (s.equals("abs value")) {
                segmentButton.setEnabled(false);
                GridCoverage2D abs = (GridCoverage2D) ops.absolute(coverage);
                coverage = abs;
            } else if (s.equals("no data filter")) {
                segmentButton.setEnabled(false);
                GridCoverage2D no = (GridCoverage2D) ops.nodataFilter(coverage);
                coverage = no;
            } else if (s.equals("gradient magnitude")) {
                segmentButton.setEnabled(false);
                GridCoverage2D gradient = (GridCoverage2D) ops.gradientMagnitude(coverage);
                coverage = gradient;
            } else if (s.equals("smooth")) {
                AverageFilter filter = new AverageFilter();
                filter.setType(AverageFilter.MEDIAN);
                if (filter.getType() == AverageFilter.MEAN) {
                    segmentButton.setEnabled(false);
                }
                GridCoverage2D filtered = filter.filter(coverage);
                coverage = filtered;
            }
            replaceImage();
        }
    } catch (IllegalArgumentException iae) {
        JOptionPane.showMessageDialog(this, iae.getMessage(), "Illegal Argument Exception", JOptionPane.ERROR_MESSAGE);
    }
}
