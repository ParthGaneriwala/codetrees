public void loadData(String datafile) {
    DATAFILE = datafile;
    List<String> datavec = FileHelper.readFile(ClueBot.RES_PATH + DATAFILE);
    SUSPECTS = MiscUtil.strToInt(datavec.get(0));
    suspectnames = new String[SUSPECTS];
    for (int s = 0; s < SUSPECTS; s++) {
        suspectnames[s] = datavec.get(s + 1);
    }
    ROOMS = MiscUtil.strToInt(datavec.get(SUSPECTS + 1));
    roomnames = new String[ROOMS];
    // doorcode as well
    roomchars = new String[ROOMS];
    roompass = new int[ROOMS];
    // local
    String[] roomcode = new String[ROOMS];
    for (int r = 0; r < ROOMS; r++) {
        StringTokenizer ST = new StringTokenizer(datavec.get(r + SUSPECTS + 2));
        roomcode[r] = ST.nextToken();
        roomchars[r] = ST.nextToken();
        roompass[r] = MiscUtil.strToInt(ST.nextToken()) - 1;
        roomnames[r] = ST.nextToken();
        while (// roomnames may have spaces
        ST.hasMoreTokens()) roomnames[r] = roomnames[r] + " " + ST.nextToken();
    }
    WEAPONS = MiscUtil.strToInt(datavec.get(SUSPECTS + ROOMS + 2));
    weaponnames = new String[WEAPONS];
    for (int w = 0; w < WEAPONS; w++) {
        weaponnames[w] = datavec.get(w + SUSPECTS + ROOMS + 3);
    }
    MAPSIZE = MiscUtil.strToInt(datavec.get(SUSPECTS + ROOMS + WEAPONS + 3));
    map = new int[MAPSIZE][MAPSIZE];
    for (int y = 0; y < MAPSIZE; y++) {
        String MapRow = datavec.get(y + SUSPECTS + ROOMS + WEAPONS + 4);
        // perhaps inefficient
        for (int x = 0; x < MapRow.length(); x++) {
            map[x][y] = STAIRS;
            String c = MapRow.substring(x, x + 1);
            if (c.equals(PASSWAY))
                map[x][y] = PASSAGE;
            if (map[x][y] == STAIRS) {
                for (int k = 0; k < ROOMS; k++) {
                    if (c.equals(roomcode[k]))
                        // offset by 1
                        map[x][y] = k + 1;
                }
            }
            if (map[x][y] == STAIRS) {
                for (int k = 0; k < ROOMS; k++) {
                    if (c.equals(roomchars[k]))
                        // offset by 1
                        map[x][y] = -(k + 1);
                }
            }
        }
    }
}
