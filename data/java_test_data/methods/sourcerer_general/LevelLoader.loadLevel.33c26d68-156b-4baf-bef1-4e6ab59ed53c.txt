public static void loadLevel(String levelId, BasicPassManager passManager) {
    // 
    // Crea nodo raiz
    GlobalState.scene = new Node("rootNode");
    // 
    // Create a ZBuffer to display pixels closest to the camera above farther ones.
    Renderer renderer = GlobalState.renderer;
    ZBufferState buf = renderer.createZBufferState();
    buf.setEnabled(true);
    buf.setFunction(ZBufferState.TestFunction.LessThanOrEqualTo);
    GlobalState.scene.setRenderState(buf);
    // 
    // setea debugger para mostrar sï¿½lo las lineas y no el contenido
    GlobalState.scene.setRenderState(GlobalState.wireState);
    // 
    // Add the skybox
    GlobalState.skybox = SceneUtils.buildSkyBox(levelId, 10);
    // 
    // Add skybox first to make sure it is in the background
    RenderPass rPass = new RenderPass();
    rPass.add(GlobalState.skybox);
    passManager.add(rPass);
    // 
    ShadowedRenderPass shadowPass = new ShadowedRenderPass();
    shadowPass.add(GlobalState.scene);
    shadowPass.setRenderShadows(true);
    shadowPass.setLightingMethod(ShadowedRenderPass.LightingMethod.Modulative);
    passManager.add(shadowPass);
    // 
    // Crea HUD
    crearHUD();
    // 
    // Carga propiedades del nivel
    ResourceBundle levelProperties = MainSettings.getLevelProperties(levelId);
    // 
    // TODO: Obtener playerId del servidor
    String playerId = "0";
    // 
    // Setea posicion del jugador para el nivel
    GlobalState.me = new Player1();
    float x = Float.parseFloat(levelProperties.getString("Player." + playerId + ".x"));
    float y = Float.parseFloat(levelProperties.getString("Player." + playerId + ".y"));
    float z = Float.parseFloat(levelProperties.getString("Player." + playerId + ".z"));
    float angle = Float.parseFloat(levelProperties.getString("Player." + playerId + ".angle"));
    GlobalState.me.setLocation(x, y, z, angle);
    // 
    // Carga mapa: Setea los spatial y los modelobjects al Level
    String mapFileName = levelProperties.getString("map");
    MapLoader.loadMap(levelId, mapFileName);
    // 
    TextureCache.preloadTextureStates();
    // 
    SoundCache.preloadAudioTracks();
    // 
    // Input handler
    GlobalState.inputHandler = new CustomInputHandler();
    // 
    // Iluminacion
    buildLighting();
// 
}
