public void buildLocationTree() {
    HashMap<String, Integer> addedURIs = new HashMap<String, Integer>();
    for (String uri : this.subLocationURIs) {
        Property sublocation = ResourceFactory.createProperty(uri);
        StmtIterator stmt = this.model.listStatements((Resource) null, sublocation, (RDFNode) null);
        if (this.tree == null) {
            this.tree = new HierarchyStringTree();
        }
        while (stmt.hasNext()) {
            String parent, parentName = null, child, childName = null;
            NodeIterator ni;
            // Well, we have the parent and child, now we just need to retrieve their RDFS labels.
            Triple trp = stmt.nextStatement().asTriple();
            parent = trp.getObject().toString();
            child = trp.getSubject().toString();
            // Get parent name
            ni = this.model.listObjectsOfProperty(ResourceFactory.createResource(parent), RDFS.label);
            if (ni.hasNext()) {
                parentName = ni.next().toString();
            }
            // Get child name
            ni = this.model.listObjectsOfProperty(ResourceFactory.createResource(child), RDFS.label);
            if (ni.hasNext()) {
                childName = ni.next().toString();
            }
            // Are there parent & child names?
            if (childName != null || parentName != null) {
                String c = child, p = parent;
                if (childName != null) {
                    c = childName;
                }
                if (parentName != null) {
                    p = parentName;
                }
                this.tree.addSubClassLink(parent, p, child, c);
                addedURIs.put(parent, 1);
                addedURIs.put(child, 1);
            } else {
                // System.out.println(parentName + " -> "+ childName);
                this.tree.addSubClassLink(parent, child);
                addedURIs.put(parent, 1);
                addedURIs.put(child, 1);
            }
        }
    }
    // Add locations without sub/super locations.
    addSingletonLocations(addedURIs);
    this.tree.processTree();
}
