// $ANTLR start "inteiro"
public final gramaticaMM2Parser.inteiro_return inteiro() throws RecognitionException {
    gramaticaMM2Parser.inteiro_return retval = new gramaticaMM2Parser.inteiro_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    gramaticaMM2Parser.inteiro__return inteiro_216 = null;
    RewriteRuleSubtreeStream stream_inteiro_ = new RewriteRuleSubtreeStream(adaptor, "rule inteiro_");
    try {
        // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:186:9: ( inteiro_ -> ^( INTEIRO inteiro_ ) )
        // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:186:11: inteiro_
        {
            pushFollow(FOLLOW_inteiro__in_inteiro2055);
            inteiro_216 = inteiro_();
            state._fsp--;
            stream_inteiro_.add(inteiro_216.getTree());
            // AST REWRITE
            // elements: inteiro_
            // token labels:
            // rule labels: retval
            // token list labels:
            // rule list labels:
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", retval != null ? retval.tree : null);
            root_0 = (CommonTree) adaptor.nil();
            // 186:20: -> ^( INTEIRO inteiro_ )
            {
                // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:186:23: ^( INTEIRO inteiro_ )
                {
                    CommonTree root_1 = (CommonTree) adaptor.nil();
                    root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(INTEIRO, "INTEIRO"), root_1);
                    adaptor.addChild(root_1, stream_inteiro_.nextTree());
                    adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
