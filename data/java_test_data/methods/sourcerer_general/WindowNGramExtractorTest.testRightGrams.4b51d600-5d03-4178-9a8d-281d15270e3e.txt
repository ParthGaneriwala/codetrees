@Test
public void testRightGrams() throws Throwable {
    WindowNGramExtractor extractor = new WindowNGramExtractor(Token.class, new SpannedTextExtractor(), WindowNGramFeature.ORIENTATION_RIGHT, WindowNGramFeature.DIRECTION_LEFT_TO_RIGHT, " ", 0, 3);
    // feature extraction on "island" in "...because the island was only..."
    tokenBuilder.buildTokens(jCas, "text obtained from gutenberg\n" + "I WANTED to go and look at a place right about the middle of " + "the island that I ' d found when I was exploring ;\n" + "so we started and soon got to it");
    Token token = JCasUtil.selectByIndex(jCas, Token.class, 19);
    assertEquals("island", token.getCoveredText());
    Feature feature = extractor.extract(jCas, token, Sentence.class);
    assertEquals("WindowNGram_R0_3gram_L2R", feature.getName());
    assertEquals("that I '", feature.getValue().toString());
    // "I" - the first word of the sentence
    token = JCasUtil.selectByIndex(jCas, Token.class, 4);
    feature = extractor.extract(jCas, token, Sentence.class);
    assertEquals("WANTED to go", feature.getValue().toString());
    // "WANTED"
    token = JCasUtil.selectByIndex(jCas, Token.class, 5);
    feature = extractor.extract(jCas, token, Sentence.class);
    assertEquals("to go and", feature.getValue().toString());
    // ";"
    token = JCasUtil.selectByIndex(jCas, Token.class, 29);
    feature = extractor.extract(jCas, token, Sentence.class);
    assertEquals("OOB1 OOB2 OOB3", feature.getValue().toString());
    // "exploring"
    token = JCasUtil.selectByIndex(jCas, Token.class, 28);
    feature = extractor.extract(jCas, token, Sentence.class);
    assertEquals("; OOB1 OOB2", feature.getValue().toString());
    // "was"
    token = JCasUtil.selectByIndex(jCas, Token.class, 27);
    feature = extractor.extract(jCas, token, Sentence.class);
    assertEquals("exploring ; OOB1", feature.getValue().toString());
    // "I"
    token = JCasUtil.selectByIndex(jCas, Token.class, 26);
    feature = extractor.extract(jCas, token, Sentence.class);
    assertEquals("was exploring ;", feature.getValue().toString());
    // behavior when there is no encapsulating sentence
    jCas.reset();
    jCas.setDocumentText("foo bar baz");
    token = new Token(jCas, 4, 7);
    token.addToIndexes();
    feature = extractor.extract(jCas, token, Sentence.class);
    assertEquals("OOB1 OOB2 OOB3", feature.getValue().toString());
    extractor = new WindowNGramExtractor(Token.class, new SpannedTextExtractor(), WindowNGramFeature.ORIENTATION_RIGHT, WindowNGramFeature.DIRECTION_RIGHT_TO_LEFT, " ", 2, 8);
    // feature extraction on "island" in "...because the island was only..."
    jCas.reset();
    tokenBuilder.buildTokens(jCas, "text obtained from gutenberg\n" + "I WANTED to go and look at a place right about the middle of " + "the island that I ' d found when I was exploring ;\n" + "so we started and soon got to it");
    token = JCasUtil.selectByIndex(jCas, Token.class, 19);
    assertEquals("island", token.getCoveredText());
    feature = extractor.extract(jCas, token, Sentence.class);
    assertEquals("WindowNGram_R2_6gram_R2L", feature.getName());
    assertEquals("was I when found d '", feature.getValue().toString());
    // "I" - the first word of the sentence
    token = JCasUtil.selectByIndex(jCas, Token.class, 4);
    feature = extractor.extract(jCas, token, Sentence.class);
    assertEquals("place a at look and go", feature.getValue().toString());
    // "WANTED"
    token = JCasUtil.selectByIndex(jCas, Token.class, 5);
    feature = extractor.extract(jCas, token, Sentence.class);
    assertEquals("right place a at look and", feature.getValue().toString());
    // ";"
    token = JCasUtil.selectByIndex(jCas, Token.class, 29);
    feature = extractor.extract(jCas, token, Sentence.class);
    assertEquals("OOB8 OOB7 OOB6 OOB5 OOB4 OOB3", feature.getValue().toString());
    // "exploring"
    token = JCasUtil.selectByIndex(jCas, Token.class, 28);
    feature = extractor.extract(jCas, token, Sentence.class);
    assertEquals("OOB7 OOB6 OOB5 OOB4 OOB3 OOB2", feature.getValue().toString());
    // "was"
    token = JCasUtil.selectByIndex(jCas, Token.class, 27);
    feature = extractor.extract(jCas, token, Sentence.class);
    assertEquals("OOB6 OOB5 OOB4 OOB3 OOB2 OOB1", feature.getValue().toString());
    token = JCasUtil.selectByIndex(jCas, Token.class, 26);
    feature = extractor.extract(jCas, token, Sentence.class);
    assertEquals("OOB5 OOB4 OOB3 OOB2 OOB1 ;", feature.getValue().toString());
    // behavior when there is no encapsulating sentence
    jCas.reset();
    jCas.setDocumentText("foo bar baz");
    token = new Token(jCas, 4, 7);
    token.addToIndexes();
    feature = extractor.extract(jCas, token, Sentence.class);
    assertEquals(feature.getValue().toString(), "OOB8 OOB7 OOB6 OOB5 OOB4 OOB3");
}
