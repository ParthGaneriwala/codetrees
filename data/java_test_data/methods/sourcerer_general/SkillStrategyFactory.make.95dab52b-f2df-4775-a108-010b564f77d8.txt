public SkillStrategy make(String[] desc) {
    String name = getName();
    int cooldown = 0;
    StatCol[] ss = new StatCol[3];
    int sptr = 0;
    boolean isActive = false;
    State sss = null;
    int statstoget = 0;
    int skillstoget = 0;
    double statsrange = 0;
    double skillrange = 0;
    int moneytosteal = 0;
    int chancecap = 0;
    SkillStrategy S = null;
    SlotEnum weapon = null;
    int range = 0;
    for (String s : desc) {
        System.err.println("READING " + s);
        String s3 = formatName(s);
        if (s3.equals("StatCol")) {
            ss[sptr++] = new StatColFactory(getNextSeperator(), A).make(s);
        } else if (s3.equalsIgnoreCase("Cooldown")) {
            cooldown = Integer.parseInt(getRealAttribute(s));
        } else if (s3.equals("isActive")) {
            isActive = Boolean.parseBoolean(getRealAttribute(s));
        } else if (s3.equals("State")) {
            sss = new StateFactory(getNextSeperator(), A).make(s);
        } else if (s3.equals("statstoget")) {
            statstoget = Integer.parseInt(getRealAttribute(s));
        } else if (s3.equals("skillstoget")) {
            skillstoget = Integer.parseInt(getRealAttribute(s));
        } else if (s3.equals("statsrange")) {
            statsrange = Double.parseDouble(getRealAttribute(s));
        } else if (s3.equals("skillrange")) {
            skillrange = Double.parseDouble(getRealAttribute(s));
        } else if (s3.equals("moneytosteal")) {
            moneytosteal = Integer.parseInt(getRealAttribute(s));
        } else if (s3.equals("chancecap")) {
            chancecap = Integer.parseInt(getRealAttribute(s));
        } else if (s3.equals("range")) {
            range = Integer.parseInt(getRealAttribute(s));
        } else if (s3.equals("weapon")) {
            weapon = SlotEnum.get(getRealAttribute(s));
        } else {
            // skillstrat?
            S = new SkillStrategyFactory(getNextSeperator(), A).make(s);
        }
    }
    SkillStrategy F = null;
    if (name.equals("BaneBoon"))
        F = new BaneBoon(ss[0]);
    if (name.equals("Bargain"))
        F = new Bargain();
    if (name.equals("BindWounds"))
        F = new BindWounds();
    if (name.equals("Creep"))
        F = new Creep(ss[0], ss[1], isActive);
    if (name.equals("DetectTraps"))
        F = new DetectTraps(chancecap, range);
    if (name.equals("EnchantNPC"))
        F = new EnchantNPC(sss, chancecap);
    if (name.equals("FreezeEnchantment"))
        F = new FreezeEnchantment(statstoget);
    if (name.equals("HurtHealth"))
        F = new HurtHealth();
    if (name.equals("HurtHealthSpell"))
        F = new HurtHealthSpell(S, ss[0]);
    if (name.equals("Observation"))
        F = new Observation(statstoget, skillstoget, statsrange, skillrange);
    if (name.equals("PickPocket"))
        F = new PickPocket(moneytosteal, chancecap);
    if (name.equals("RemoveTraps"))
        F = new RemoveTraps(chancecap, range);
    if (name.equals("Spell"))
        F = new Spell(S, ss[0]);
    if (name.equals("Weapon"))
        F = new Weapon(weapon, range, cooldown);
    return F;
}
