public void run() {
    String[][] values = new String[84][84];
    File folder = new File("D:/synthLandscan/randomStarts/wind/run" + run);
    folder.mkdir();
    boolean done = false;
    while (!(done)) {
        try {
            File f = new File("D:/landscan/namerica06/export/nameraggcsv.csv");
            FileReader in = new FileReader(f);
            CSVParser csvp = new CSVParser(in);
            values = csvp.getAllValues();
        } catch (IOException ioe) {
            System.out.println("IOException: " + ioe.getMessage());
        }
        // System.out.println("values is " + values.length + "x" + values[1].length);
        susceptible = new int[values.length][values[0].length];
        for (int i = 0; i < 84; i++) {
            for (int j = 1; j < 85; j++) {
                // System.out.println("values[" + i + "][" + j + "] is " + values[i][j]);
                susceptible[j - 1][i] = Integer.parseInt(values[i][j]);
            }
        }
        infectious = new int[values.length][values[0].length];
        recovered = new int[values.length][values[0].length];
        concentration = new int[values.length][values[0].length];
        // this assumes people recover after exactly 10 days.
        recoverNow = new int[10][values.length][values[0].length];
        int totalInfected = 0;
        int totalRecovered = 0;
        infectedSummary = new int[25];
        recoveredSummary = new int[25];
        pollutionSummary = new int[25];
        for (int i = 0; i < concentration.length; i++) {
            Arrays.fill(concentration[i], 0);
        }
        // start with all the pollution at a random source
        int startX = r.nextInt(84);
        int startY = r.nextInt(84);
        concentration[startX][startY] = initTotalPollution;
        double northProb, southProb, eastProb, westProb;
        if (startX < 43) {
            northProb = 0.05;
            southProb = 0.45;
        } else {
            southProb = 0.05;
            northProb = 0.45;
        }
        if (startY < 43) {
            eastProb = 0.45;
            westProb = 0.05;
        } else {
            westProb = 0.45;
            eastProb = 0.05;
        }
        int[][] nextStepConcentration = new int[concentration.length][concentration[0].length];
        int time = 0;
        int airbornePollution = initTotalPollution;
        // for each time step
        while (airbornePollution > 0) {
            // make a copy to store the next time step without interfering with the current one.
            nextStepConcentration = concentration;
            // }
            for (int i = 0; i < concentration.length; i++) {
                for (int j = 0; j < concentration[i].length; j++) {
                    // but not guaranteed to move to the south or east.
                    for (int k = 0; k < concentration[i][j]; k++) {
                        double r = Math.random();
                        if (r < depositionProbability) {
                            // deposition is a simple decrement
                            // System.out.println("deposition at time step " + time);
                            nextStepConcentration[i][j]--;
                            airbornePollution--;
                        } else if (r < depositionProbability + motionProbability) {
                            // motion, decrement from here and increment in one of the neighbors
                            nextStepConcentration[i][j]--;
                            double s = Math.random();
                            if (s < westProb) {
                                // i controls east/west
                                if (i > 0) {
                                    nextStepConcentration[i - 1][j]++;
                                } else {
                                    airbornePollution--;
                                }
                            } else if (s < (northProb + westProb)) {
                                if (j > 0) {
                                    nextStepConcentration[i][j - 1]++;
                                } else {
                                    airbornePollution--;
                                }
                            } else if (s < (northProb + westProb + eastProb)) {
                                if (i < concentration.length - 1) {
                                    nextStepConcentration[i + 1][j]++;
                                } else {
                                    airbornePollution--;
                                }
                            } else {
                                if (j < concentration[i].length - 1) {
                                    nextStepConcentration[i][j + 1]++;
                                } else {
                                    airbornePollution--;
                                }
                            }
                        }
                    // end if (r < depositionProbability)
                    }
                // end for (int k...
                }
            // end for (int j...
            }
            // end for (int i...
            concentration = nextStepConcentration;
            if (time > 9) {
                for (int i = 0; i < infectious.length; i++) {
                    for (int j = 0; j < infectious[i].length; j++) {
                        for (int k = 0; k < recoverNow[time % 10][i][j]; k++) {
                            infectious[i][j]--;
                            totalInfected--;
                            recovered[i][j]++;
                            totalRecovered++;
                        }
                        // end for(int k...
                        recoverNow[time % 10][i][j] = 0;
                    }
                // end for(int j...
                }
            }
            for (int i = 0; i < susceptible.length; i++) {
                for (int j = 0; j < susceptible[i].length; j++) {
                    // for each person, they can get the disease from a particle in their
                    // cell with probability infectionProbability (more particles means higher
                    // probability, as the localInfProb calculation shows).
                    double localInfProb = 1 - Math.pow((1 - infectionProbability), concentration[i][j]);
                    if (localInfProb > 0) {
                        for (int k = 0; k < susceptible[i][j]; k++) {
                            if (Math.random() <= localInfProb) {
                                susceptible[i][j]--;
                                infectious[i][j]++;
                                totalInfected++;
                                recoverNow[time % 10][i][j]++;
                            }
                        }
                    }
                }
            }
            if (time % 5 == 0) {
                writeData(time, run);
                if (time / 5 >= pollutionSummary.length) {
                    expandSummaryArraySizes();
                }
                pollutionSummary[time / 5] = airbornePollution;
                infectedSummary[time / 5] = totalInfected;
                recoveredSummary[time / 5] = totalRecovered;
            }
            time++;
        }
        // end while (airbornePollution > 0)
        writeSummaries(run, startX, startY);
        // System.out.println("time is " + time);
        if (time > 250) {
            done = true;
            System.out.println("finished wind #" + run);
        }
    }
}
