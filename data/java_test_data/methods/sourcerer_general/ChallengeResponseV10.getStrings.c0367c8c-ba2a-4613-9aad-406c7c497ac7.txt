// -----------------------------------------------------------------
// Given a username, password and challenge string, this code returns
// the two valid response strings needed to login to Yahoo
static String[] getStrings(String username, String password, String challenge) throws NoSuchAlgorithmException {
    int operand = 0, i;
    // -----Count the number of operator characters, as this determines the
    // -----size of our magic bytes array
    int cnt = 0;
    for (i = 0; i < challenge.length(); i++) if (isOperator(challenge.charAt(i)))
        cnt++;
    int[] magic = new int[cnt];
    // -----PART ONE : Store operands, and OR them with operators.
    // -----(Note: ignore brackets, they are just there to confuse - making
    // -----the challenge string look like an expression of some sort!)
    cnt = 0;
    for (i = 0; i < challenge.length(); i++) {
        char c = challenge.charAt(i);
        if (Character.isLetter(c) || Character.isDigit(c)) {
            // 0-31, shifted to high 5 bits
            operand = ALPHANUM_LOOKUP.indexOf(c) << 3;
        } else if (isOperator(c)) {
            // 0-7
            int a = OPERATORS_LOOKUP.indexOf(c);
            // Mask with operand
            magic[cnt] = (operand | a) & 0xff;
            cnt++;
        }
    }
    if (DB)
        dump("P1", magic);
    // -----PART TWO : Monkey around with the data
    for (i = magic.length - 2; i >= 0; i--) {
        int a = magic[i], b = magic[i + 1];
        a = ((a * 0xcd) ^ b) & 0xff;
        magic[i + 1] = a;
    }
    if (DB)
        dump("P2", magic);
    // -----PART THREE : Create 20 byte buffer, copy first 4 bytes into arrays
    // 20 bytes
    byte[] comparison = _part3Munge(magic);
    // First 4 bytes reversed
    long seed = 0;
    // First 4 plus 3 empty
    byte[] binLookup = new byte[7];
    for (i = 0; i < 4; i++) {
        seed = seed << 8;
        seed += (int) (comparison[3 - i] & 0xff);
        binLookup[i] = (byte) (comparison[i] & 0xff);
    }
    if (DB)
        dump("P3.1", comparison);
    // -----PART THREE AND A BIT : Binary table lookup params
    int table = 0, depth = 0;
    synchronized (md5Obj) {
        for (i = 0; i < 0xffff; i++) {
            for (int j = 0; j < 5; j++) {
                binLookup[4] = (byte) (i & 0xff);
                binLookup[5] = (byte) ((i >> 8) & 0xff);
                binLookup[6] = (byte) j;
                byte[] result = md5Singleton(binLookup);
                if (_part3Compare(result, comparison) == true) {
                    depth = i;
                    table = j;
                    // Exit loops
                    i = 0xffff;
                    // Exit loops
                    j = 5;
                }
            }
        }
    }
    if (DB)
        System.out.println("P3.2: " + depth + " " + table + ": ");
    // -----PART THREE AND A BIT MORE : Do binary table lookup
    byte[] magicValue = new byte[4];
    if (DB)
        System.out.println("P3.3.a: " + seed);
    // Check PART THREE for
    seed = _part3Lookup(table, depth, seed);
    if (DB)
        System.out.println("P3.3.b: " + seed);
    // seed generation
    seed = _part3Lookup(table, depth, seed);
    if (DB)
        System.out.println("P3.3.c: " + seed);
    for (i = 0; i < magicValue.length; i++) {
        magicValue[i] = (byte) (seed & 0xff);
        seed = seed >> 8;
    }
    // -----PART FOUR : This bit is copied from the start of V9
    String regular = yahoo64(md5(password));
    String crypted = yahoo64(md5(md5Crypt(password, "$1$_2S43d5f")));
    if (DB)
        System.out.println("P4.1 " + regular + " " + crypted);
    // -----And now for some more hashing, this time with SHA-1
    // June 2004
    boolean hackSha1 = (table >= 3);
    String[] s = new String[2];
    s[0] = _part4Encode(_part4Hash(regular, magicValue, hackSha1));
    s[1] = _part4Encode(_part4Hash(crypted, magicValue, hackSha1));
    if (DB)
        System.out.println("FINAL " + s[0] + " " + s[1]);
    return s;
}
