public static void main(String[] args) {
    ChessBoard b = new ChessBoard();
    System.out.print(b.dumpString());
    PieceColor current = PieceColor.WHITE;
    Random rand = new Random();
    for (int movenumber = 0; movenumber < 200; movenumber++) {
        int validseen = 0;
        int captures_seen = 0;
        Point moveFrom = null;
        HalfMove moveChosen = null;
        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++) {
                Point here = new Point(j, i);
                ChessPiece thisOne = b.at(here);
                try {
                    List<HalfMove> fromHere = b.getMoves(here);
                    boolean ourturn = b.at(here).getColor() == current;
                    for (HalfMove m : fromHere) {
                        if (!b.checkMove(here, m.dest)) {
                            System.out.println("Can NOT move " + thisOne + " from " + here + " to " + m.dest + "(" + m.type + ")");
                            continue;
                        }
                        System.out.println("Can move " + thisOne + " from " + here + " to " + m.dest + "(" + m.type + ")");
                        if (ourturn) {
                            boolean choosemove = false;
                            if (m.type.isCapture()) {
                                if (0 == rand.nextInt(++captures_seen)) {
                                    choosemove = true;
                                }
                            } else if (0 == captures_seen && 0 == rand.nextInt(++validseen)) {
                                choosemove = true;
                            }
                            if (choosemove) {
                                moveFrom = here;
                                moveChosen = m;
                            }
                        }
                    }
                } catch (IllegalArgumentException e) {
                // meh
                }
            }
        }
        try {
            if (null == moveChosen) {
                System.out.println("No moves left for " + current + ": terminating");
                break;
            }
            System.out.println(String.format("Moving %s from %s to %s (%s)", new Object[] { b.at(moveFrom), moveFrom, moveChosen.dest, moveChosen.type }));
            try {
                b.commitMove(moveFrom, moveChosen.dest);
            } catch (UnPromotedPawnException e) {
                System.err.println("Promoting pawn at " + moveChosen.dest);
                b.commitMove(moveFrom, moveChosen.dest, PieceType.QUEEN);
            }
        } catch (IllegalArgumentException e) {
            System.err.println(e.getMessage());
            e.printStackTrace(System.err);
        }
        System.out.print(b.dumpString());
        current = current.reverse();
    }
}
