private void dumpResults(Set<Shadow> allShadows, ReachingStatesAnalysis forwardAnalysis, ReachingStatesAnalysis backwardAnalysis, UnnecessaryShadowsAnalysis unnecessaryShadowsAnalysis) {
    System.err.println();
    System.err.println();
    System.err.println(method().getSignature());
    System.err.println();
    for (Unit unit : unitGraph()) {
        System.err.println();
        boolean hasShadow = false;
        for (Shadow shadow : allShadows) {
            if (shadow.getStmtToAttachTo().equals(unit)) {
                hasShadow = true;
                break;
            }
        }
        {
            Set<Configuration> configs = new LinkedHashSet<Configuration>();
            {
                ConfigurationSet forwardFlow = forwardAnalysis.getFlowBefore(unit);
                configs.addAll(forwardFlow.getConfigurations());
            }
            System.err.println("forward:      " + configs);
        }
        {
            Set<Configuration> configs = new LinkedHashSet<Configuration>();
            {
                ConfigurationSet backwardFlow = backwardAnalysis.getFlowAfter(unit);
                configs.addAll(backwardFlow.getConfigurations());
            }
            System.err.println("backward:     " + configs);
        }
        if (hasShadow) {
            System.err.println("vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv");
        }
        {
            for (Shadow shadow : allShadows) {
                if (shadow.getStmtToAttachTo().equals(unit)) {
                    String symbol = symbolNameForShadow(shadow);
                    System.err.println(symbol + "-shadow at position " + shadow.getPosition());
                    System.err.println("states before:     " + unnecessaryShadowsAnalysis.statesBeforeTransition(shadow));
                    System.err.print("transitions:       ");
                    for (Entry<Integer, Set<Integer>> entry : unnecessaryShadowsAnalysis.transitions(shadow).entrySet()) {
                        System.err.print(entry.getKey() + "->" + entry.getValue() + "  ");
                    }
                    System.err.println();
                    System.err.println("live states after: " + unnecessaryShadowsAnalysis.liveStatesSetsAfterTransition(shadow));
                    if (unnecessaryShadowsAnalysis.foundUnnnecessaryShadow() && unnecessaryShadowsAnalysis.getUnnecessaryShadow().equals(shadow)) {
                        System.err.println("XXXXX THIS SHADOW WAS DEEMED UNNECESSARY! XXXXX");
                    }
                }
            }
        }
        if (hasShadow) {
            System.err.println("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
        }
        System.err.println(unit);
        System.err.println();
    }
    System.err.println("==================================================================");
    System.err.println("==================================================================");
    System.err.println("==================================================================");
    System.err.println("==================================================================");
    System.err.println("==================================================================");
}
