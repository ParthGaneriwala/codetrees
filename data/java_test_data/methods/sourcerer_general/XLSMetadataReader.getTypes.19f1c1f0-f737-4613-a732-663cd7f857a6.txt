public List<ElementType> getTypes() throws InvalidMetadataFormatException {
    XLSSheets sheet = XLSSheets.findSheet(typesSheet.getName());
    Map<ElementType, String> parents = new HashMap<ElementType, String>();
    if (typesSheet == null) {
        handleFormatError("Sheet not found! Check sheets names. ", sheet);
        return null;
    }
    List<ElementType> types = new ArrayList<ElementType>();
    for (int i = HEADER_ROWS_NR; i < typesSheet.getRows(); i++) {
        String name = typesSheet.getCell(T_NAME_COL_NR, i).getContents().trim();
        String parentName = typesSheet.getCell(T_PARENT_COL_NR, i).getContents().trim();
        String outConnNr = typesSheet.getCell(T_OUT_CON_COL_NR, i).getContents();
        if (name.equals("") && parentName.equals("") && outConnNr.equals(""))
            continue;
        String indexingInStartFrom = typesSheet.getCell(T_IN_INDEXING_START_FROM_COL_NR, i).getContents().trim();
        String indexingOutStartFrom = typesSheet.getCell(T_OUT_INDEXING_START_FROM_COL_NR, i).getContents().trim();
        String cableFlag = typesSheet.getCell(T_CABLE_FLAG_COL_NR, i).getContents().trim();
        ElementType type = new ElementType();
        if (name.equals(""))
            handleFormatError("Type name cannot be empty!", sheet, T_NAME_COL_NR, i);
        type.setTypeName(name);
        if (typeMap.containsKey(name)) {
            handleFormatError("Duplicate definition of type: " + name, sheet, T_NAME_COL_NR, i);
            continue;
        }
        typeMap.put(name, type);
        parents.put(type, parentName);
        if (!cableFlag.equals("0") && !cableFlag.equals("1") && !cableFlag.equals(""))
            handleFormatError("Cable flag should be empty, " + 0 + " or " + 1, sheet, T_CABLE_FLAG_COL_NR, i);
        type.setCable(cableFlag.equals("1"));
        String inConnNr = typesSheet.getCell(T_IN_CON_COL_NR, i).getContents();
        if (!inConnNr.equals(""))
            try {
                type.setInputConnectorsNr(Integer.parseInt(inConnNr));
            } catch (NumberFormatException e) {
                handleFormatError("Number of input connectors should be an integer number!", sheet, T_IN_CON_COL_NR, i);
            }
        if (!outConnNr.equals(""))
            type.setOutputConnectorsNr(Integer.parseInt(outConnNr));
        Set<Field> fields = new HashSet<Field>();
        for (int j = T_FIELDS_COL_NR; j < typesSheet.getColumns(); j++) {
            String fieldName = typesSheet.getCell(j, i).getContents();
            if (fieldName.equals(""))
                break;
            Field field = fieldMap.get(fieldName);
            if (field == null)
                handleFormatError("Field named " + fieldName + " not found.", sheet, j, i);
            fields.add(field);
        }
        type.setFields(fields);
        types.add(type);
        int indexingStartValueIn = -1;
        if (indexingInStartFrom.equals("")) {
            handleFormatError("Indexing start value is required.", sheet, T_IN_INDEXING_START_FROM_COL_NR, i);
        }
        if (!indexingInStartFrom.equals("")) {
            try {
                indexingStartValueIn = Integer.parseInt(indexingInStartFrom);
            } catch (NumberFormatException e) {
                handleFormatError("Indexing start value should" + " be an integer.\nWas: " + indexingInStartFrom, sheet, T_IN_INDEXING_START_FROM_COL_NR, i);
            }
        }
        // startIndexingMap.put(type, indexingStartValue);
        type.setFirstIndexIn(indexingStartValueIn);
        int indexingStartValueOut = -1;
        if (indexingOutStartFrom.equals("")) {
            handleFormatError("Indexing start value is required.", sheet, T_OUT_INDEXING_START_FROM_COL_NR, i);
        }
        if (!indexingOutStartFrom.equals("")) {
            try {
                indexingStartValueOut = Integer.parseInt(indexingOutStartFrom);
            } catch (NumberFormatException e) {
                handleFormatError("Indexing start value should" + " be an integer.\nWas: " + indexingOutStartFrom, sheet, T_OUT_INDEXING_START_FROM_COL_NR, i);
            }
        }
        // startIndexingMap.put(type, indexingStartValue);
        type.setFirstIndexOut(indexingStartValueOut);
    }
    for (ElementType elementType : types) {
        String parentName = parents.get(elementType);
        elementType.setParentType(typeMap.get(parentName));
    }
    // connectInternally();
    return types;
}
