void initial() throws IOException {
    cache = new File(Config.cachePath);
    if (peer.Config.cleanCache) {
        cache.delete();
    }
    cache = new File(Config.cachePath);
    if (cache.length() > peer.Config.delCacheSize) {
        cache.delete();
    // System.out.println("FFFFERsgfdfgd  "+cache.length()+" "+peer.Config.delCacheSize);
    }
    if (!cache.exists()) {
        cache.createNewFile();
    }
    if (cache.length() < 1024 * 1024) {
        FileOutputStream fos = new FileOutputStream(cache);
        fos.write(new byte[1024 * 1024]);
        fos.flush();
        fos.close();
    }
    ra = new RandomAccessFile(cache, "rw");
    Mdb mdb2 = new Mdb(new byte[16]);
    int point = 0;
    while (point < 1024 * 1024) {
        byte[] md = new byte[16];
        ra.read(md);
        point += 16;
        ra.seek(point);
        Mdb mdb = new Mdb(md);
        if (mdb.equals(mdb2)) {
            break;
        }
        int blockNum = ra.readInt();
        point += 4;
        ra.seek(point);
        long offset = ra.readLong();
        point += 8;
        ra.seek(point);
        int length = ra.readInt();
        point += 4;
        ra.seek(point);
        blockIndexOffset += 32;
        blockSaveOffset += length;
        BlockIndexIdent bii = new BlockIndexIdent(mdb, blockNum);
        BlockIndex bi = new BlockIndex(mdb, blockNum, offset, length);
        blockIndexTable.put(bii, bi);
        if (!cacheFileInfoTable.containsKey(mdb)) {
            CacheFileInfo bi2 = new CacheFileInfo();
            cacheFileInfoTable.put(mdb, bi2);
        }
        CacheFileInfo bi3 = cacheFileInfoTable.get(mdb);
        bi3.setBlock(blockNum);
    }
}
