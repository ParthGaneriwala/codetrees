public void testFlags() {
    boolean originalFlag = JenaParameters.enableEagerLiteralValidation;
    JenaParameters.enableEagerLiteralValidation = true;
    boolean foundException = false;
    try {
        Literal l = m.createTypedLiteral("fool", XSDDatatype.XSDint);
    } catch (DatatypeFormatException e1) {
        foundException = true;
    }
    JenaParameters.enableEagerLiteralValidation = originalFlag;
    assertTrue("Early datatype format exception", foundException);
    JenaParameters.enableEagerLiteralValidation = false;
    foundException = false;
    Literal l = null;
    try {
        l = m.createTypedLiteral("fool", XSDDatatype.XSDint);
    } catch (DatatypeFormatException e1) {
        JenaParameters.enableEagerLiteralValidation = originalFlag;
        assertTrue("Delayed datatype format validation", false);
    }
    try {
        l.getValue();
    } catch (DatatypeFormatException e2) {
        foundException = true;
    }
    JenaParameters.enableEagerLiteralValidation = originalFlag;
    assertTrue("Early datatype format exception", foundException);
    originalFlag = JenaParameters.enablePlainLiteralSameAsString;
    Literal l1 = m.createLiteral("test string");
    Literal l2 = m.createTypedLiteral("test string", XSDDatatype.XSDstring);
    JenaParameters.enablePlainLiteralSameAsString = true;
    boolean ok1 = l1.sameValueAs(l2);
    JenaParameters.enablePlainLiteralSameAsString = false;
    boolean ok2 = !l1.sameValueAs(l2);
    JenaParameters.enablePlainLiteralSameAsString = originalFlag;
    assertTrue(ok1);
    assertTrue(ok2);
}
