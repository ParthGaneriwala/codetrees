public Yytoken yylex() throws java.io.IOException {
    int yy_lookahead;
    int yy_anchor = YY_NO_ANCHOR;
    int yy_state = yy_state_dtrans[yy_lexical_state];
    int yy_next_state = YY_NO_STATE;
    int yy_last_accept_state = YY_NO_STATE;
    boolean yy_initial = true;
    int yy_this_accept;
    yy_mark_start();
    yy_this_accept = yy_acpt[yy_state];
    if (YY_NOT_ACCEPT != yy_this_accept) {
        yy_last_accept_state = yy_state;
        yy_mark_end();
    }
    while (true) {
        if (yy_initial && yy_at_bol)
            yy_lookahead = YY_BOL;
        else
            yy_lookahead = yy_advance();
        yy_next_state = YY_F;
        yy_next_state = yy_nxt[yy_rmap[yy_state]][yy_cmap[yy_lookahead]];
        if (YY_EOF == yy_lookahead && true == yy_initial) {
            return null;
        }
        if (YY_F != yy_next_state) {
            yy_state = yy_next_state;
            yy_initial = false;
            yy_this_accept = yy_acpt[yy_state];
            if (YY_NOT_ACCEPT != yy_this_accept) {
                yy_last_accept_state = yy_state;
                yy_mark_end();
            }
        } else {
            if (YY_NO_STATE == yy_last_accept_state) {
                throw (new Error("Lexical Error: Unmatched Input."));
            } else {
                yy_anchor = yy_acpt[yy_last_accept_state];
                if (0 != (YY_END & yy_anchor)) {
                    yy_move_end();
                }
                yy_to_mark();
                switch(yy_last_accept_state) {
                    case 1:
                    case -2:
                        break;
                    case 2:
                        {
                            sb.delete(0, sb.length());
                            yybegin(STRING_BEGIN);
                        }
                    case -3:
                        break;
                    case 3:
                        {
                            Long val = Long.valueOf(yytext());
                            return new Yytoken(Yytoken.TYPE_VALUE, val);
                        }
                    case -4:
                        break;
                    case 4:
                        {
                            return new Yytoken(Yytoken.TYPE_LEFT_BRACE, null);
                        }
                    case -5:
                        break;
                    case 5:
                        {
                            return new Yytoken(Yytoken.TYPE_RIGHT_BRACE, null);
                        }
                    case -6:
                        break;
                    case 6:
                        {
                            return new Yytoken(Yytoken.TYPE_LEFT_SQUARE, null);
                        }
                    case -7:
                        break;
                    case 7:
                        {
                            return new Yytoken(Yytoken.TYPE_RIGHT_SQUARE, null);
                        }
                    case -8:
                        break;
                    case 8:
                        {
                            return new Yytoken(Yytoken.TYPE_COMMA, null);
                        }
                    case -9:
                        break;
                    case 9:
                        {
                            return new Yytoken(Yytoken.TYPE_COLON, null);
                        }
                    case -10:
                        break;
                    case 10:
                        {
                        }
                    case -11:
                        break;
                    case 11:
                        {
                            Double val = Double.valueOf(yytext());
                            return new Yytoken(Yytoken.TYPE_VALUE, val);
                        }
                    case -12:
                        break;
                    case 12:
                        {
                            return new Yytoken(Yytoken.TYPE_VALUE, null);
                        }
                    case -13:
                        break;
                    case 13:
                        {
                            Boolean val = Boolean.valueOf(yytext());
                            return new Yytoken(Yytoken.TYPE_VALUE, val);
                        }
                    case -14:
                        break;
                    case 14:
                        {
                            sb.append(yytext());
                        }
                    case -15:
                        break;
                    case 15:
                        {
                            yybegin(YYINITIAL);
                            return new Yytoken(Yytoken.TYPE_VALUE, sb.toString());
                        }
                    case -16:
                        break;
                    case 16:
                        {
                            sb.append('\\');
                        }
                    case -17:
                        break;
                    case 17:
                        {
                            sb.append('"');
                        }
                    case -18:
                        break;
                    case 18:
                        {
                            sb.append('/');
                        }
                    case -19:
                        break;
                    case 19:
                        {
                            sb.append('\b');
                        }
                    case -20:
                        break;
                    case 20:
                        {
                            sb.append('\f');
                        }
                    case -21:
                        break;
                    case 21:
                        {
                            sb.append('\n');
                        }
                    case -22:
                        break;
                    case 22:
                        {
                            sb.append('\r');
                        }
                    case -23:
                        break;
                    case 23:
                        {
                            sb.append('\t');
                        }
                    case -24:
                        break;
                    case 24:
                        {
                            int ch = Integer.parseInt(yytext().substring(2), 16);
                            sb.append((char) ch);
                        }
                    case -25:
                        break;
                    case 26:
                        {
                            Double val = Double.valueOf(yytext());
                            return new Yytoken(Yytoken.TYPE_VALUE, val);
                        }
                    case -26:
                        break;
                    case 27:
                        {
                            sb.append(yytext());
                        }
                    case -27:
                        break;
                    default:
                        yy_error(YY_E_INTERNAL, false);
                    case -1:
                }
                yy_initial = true;
                yy_state = yy_state_dtrans[yy_lexical_state];
                yy_next_state = YY_NO_STATE;
                yy_last_accept_state = YY_NO_STATE;
                yy_mark_start();
                yy_this_accept = yy_acpt[yy_state];
                if (YY_NOT_ACCEPT != yy_this_accept) {
                    yy_last_accept_state = yy_state;
                    yy_mark_end();
                }
            }
        }
    }
}
