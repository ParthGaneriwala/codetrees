public void testFileCreationDeleteParent() throws IOException {
    Configuration conf = new Configuration();
    // 2s
    final int MAX_IDLE_TIME = 2000;
    conf.setInt("ipc.client.connection.maxidletime", MAX_IDLE_TIME);
    conf.setInt("heartbeat.recheck.interval", 1000);
    conf.setInt("dfs.heartbeat.interval", 1);
    // create cluster
    MiniDFSCluster cluster = new MiniDFSCluster(conf, 1, true, null);
    FileSystem fs = null;
    try {
        cluster.waitActive();
        fs = cluster.getFileSystem();
        final int nnport = cluster.getNameNodePort();
        // create file1.
        Path dir = new Path("/foo");
        Path file1 = new Path(dir, "file1");
        FSDataOutputStream stm1 = TestFileCreation.createFile(fs, file1, 1);
        System.out.println("testFileCreationDeleteParent: " + "Created file " + file1);
        TestFileCreation.writeFile(stm1, 1000);
        stm1.sync();
        // create file2.
        Path file2 = new Path("/file2");
        FSDataOutputStream stm2 = TestFileCreation.createFile(fs, file2, 1);
        System.out.println("testFileCreationDeleteParent: " + "Created file " + file2);
        TestFileCreation.writeFile(stm2, 1000);
        stm2.sync();
        // rm dir
        fs.delete(dir, true);
        // restart cluster with the same namenode port as before.
        // This ensures that leases are persisted in fsimage.
        cluster.shutdown();
        try {
            Thread.sleep(2 * MAX_IDLE_TIME);
        } catch (InterruptedException e) {
        }
        cluster = new MiniDFSCluster(nnport, conf, 1, false, true, null, null, null);
        cluster.waitActive();
        // restart cluster yet again. This triggers the code to read in
        // persistent leases from fsimage.
        cluster.shutdown();
        try {
            Thread.sleep(5000);
        } catch (InterruptedException e) {
        }
        cluster = new MiniDFSCluster(nnport, conf, 1, false, true, null, null, null);
        cluster.waitActive();
        fs = cluster.getFileSystem();
        assertTrue(!fs.exists(file1));
        assertTrue(fs.exists(file2));
    } finally {
        fs.close();
        cluster.shutdown();
    }
}
