public static boolean insert(Connection db, Wiki wiki) throws SQLException {
    boolean commit = db.getAutoCommit();
    try {
        if (commit) {
            db.setAutoCommit(false);
        }
        StringBuffer sql = new StringBuffer();
        sql.append("INSERT INTO project_wiki_version " + "(wiki_id, content, size, lines_total, lines_added, ");
        if (wiki.getModified() != null) {
            sql.append("entered, ");
        }
        sql.append("enteredby) ");
        sql.append("VALUES (?, ?, ?, ?, ?, ");
        if (wiki.getModified() != null) {
            sql.append("?, ");
        }
        sql.append("?) ");
        int i = 0;
        // Insert the page
        PreparedStatement pst = db.prepareStatement(sql.toString());
        pst.setInt(++i, wiki.getId());
        pst.setString(++i, wiki.getContent());
        pst.setInt(++i, wiki.getContent().length());
        pst.setInt(++i, StringUtils.countLines(wiki.getContent()));
        pst.setInt(++i, StringUtils.countLines(wiki.getContent()));
        if (wiki.getModified() != null) {
            pst.setTimestamp(++i, wiki.getModified());
        }
        pst.setInt(++i, wiki.getModifiedBy());
        pst.execute();
        pst.close();
        if (commit) {
            db.commit();
        }
    // id = DatabaseUtils.getCurrVal(db, "project_wiki_version_version_id_seq", id);
    } catch (SQLException e) {
        if (commit) {
            db.rollback();
        }
        throw new SQLException(e.getMessage());
    } finally {
        if (commit) {
            db.setAutoCommit(true);
        }
    }
    return true;
}
