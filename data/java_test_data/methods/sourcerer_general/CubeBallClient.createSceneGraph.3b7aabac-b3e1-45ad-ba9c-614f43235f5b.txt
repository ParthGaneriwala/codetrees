public BranchGroup createSceneGraph() {
    BranchGroup root = new BranchGroup();
    BoundingBox bounds = new BoundingBox(new Point3d(-arenaSize, -arenaSize, -arenaSize), new Point3d(arenaSize, arenaSize, arenaSize));
    AmbientLight AL = new AmbientLight(true, white);
    AL.setInfluencingBounds(bounds);
    root.addChild(AL);
    discoShape = new Shape3D();
    // discoShape.setCapability(
    // Shape3D.ALLOW_GEOMETRY_WRITE);
    int numCoords = numBars * numBars * 6 * 4;
    blurb("Coords: " + numCoords);
    disco = new QuadArray(numCoords, GeometryArray.COORDINATES | GeometryArray.TEXTURE_COORDINATE_2 | GeometryArray.COLOR_3);
    disco.setCapability(GeometryArray.ALLOW_COORDINATE_WRITE);
    disco.setCapability(GeometryArray.ALLOW_TEXCOORD_WRITE);
    disco.setCapability(GeometryArray.ALLOW_COLOR_WRITE);
    int c = 0;
    for (int s = 0; s < 6; s++) for (int x = 0; x < numBars; x++) for (int y = 0; y < numBars; y++) {
        coordMap[s][x][y] = c++;
    }
    discoShape.setGeometry(disco);
    discoApp = new Appearance();
    discoApp.setCapability(Appearance.ALLOW_TEXTURE_WRITE);
    // discoApp.setCapability(
    // Appearance.ALLOW_TEXTURE_ATTRIBUTES_WRITE);
    TextureAttributes TA = new TextureAttributes();
    TA.setTextureMode(TextureAttributes.COMBINE);
    discoApp.setTextureAttributes(TA);
    PolygonAttributes PA = new PolygonAttributes();
    PA.setCullFace(PolygonAttributes.CULL_NONE);
    PA.setPolygonMode(PolygonAttributes.POLYGON_FILL);
    discoApp.setPolygonAttributes(PA);
    TexCoordGeneration TG = new TexCoordGeneration();
    TG.setEnable(true);
    TG.setFormat(TexCoordGeneration.TEXTURE_COORDINATE_2);
    TG.setGenMode(TexCoordGeneration.SPHERE_MAP);
    discoApp.setTexCoordGeneration(TG);
    discoShape.setAppearance(discoApp);
    root.addChild(discoShape);
    powerTab = new boolean[MAX_POWERS][MAX_POW_UPS];
    discoPow = new QuadArray[MAX_POWERS];
    for (int i = 0; i < MAX_POWERS; i++) {
        discoPow[i] = new QuadArray(MAX_POW_UPS * 4, GeometryArray.COORDINATES | GeometryArray.TEXTURE_COORDINATE_2 | GeometryArray.COLOR_3);
        discoPow[i].setCapability(GeometryArray.ALLOW_COORDINATE_WRITE);
        discoPow[i].setCapability(GeometryArray.ALLOW_COORDINATE_READ);
        discoPow[i].setCapability(GeometryArray.ALLOW_COLOR_WRITE);
        for (int t = 0; t < MAX_POW_UPS; t++) {
            discoPow[i].setTextureCoordinates(0, t * 4, SQR_TEX);
        }
        Shape3D powShape = new Shape3D();
        powShape.addGeometry(discoPow[i]);
        Appearance powApp = new Appearance();
        TextureLoader TL = new TextureLoader(Toolkit.getDefaultToolkit().createImage(TEX_DIR + "pow" + i + ".jpg"), null);
        powApp.setTexture(TL.getTexture());
        powApp.setPolygonAttributes(PA);
        powShape.setAppearance(powApp);
        root.addChild(powShape);
    }
    cageShape = new Shape3D();
    cageShape.setCapability(Shape3D.ALLOW_GEOMETRY_WRITE);
    cage = getCage();
    showCage(SHOWBARS);
    root.addChild(cageShape);
    for (int i = 0; i < numPlay; i++) {
        root.addChild(players[i].getTrans());
    }
    for (int i = 0; i < numBalls; i++) {
        root.addChild(balls[i].getTrans());
    }
    fireball = new CubeSphere(fireRad, FIREBALL, TEX_DIR + "fireball.jpg");
    fireball.setVisible(false);
    root.addChild(fireball.getTrans());
    explo = new Exploder(fireball, xFrames, xSpeed);
    return root;
}
