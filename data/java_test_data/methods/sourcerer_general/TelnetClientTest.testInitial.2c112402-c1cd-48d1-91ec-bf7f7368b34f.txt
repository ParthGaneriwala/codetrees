public void testInitial() throws Exception {
    boolean connect1_ok = false;
    boolean connect2_ok = false;
    boolean connect3_ok = false;
    boolean init2_ok = false;
    boolean add_invalid_ok1 = false;
    boolean add_invalid_ok2 = false;
    byte[] buffread2 = new byte[9];
    byte[] expected2 = { (byte) TelnetCommand.IAC, (byte) TelnetCommand.WILL, (byte) TelnetOption.ECHO, (byte) TelnetCommand.IAC, (byte) TelnetCommand.WILL, (byte) TelnetOption.SUPPRESS_GO_AHEAD, (byte) TelnetCommand.IAC, (byte) TelnetCommand.DO, (byte) TelnetOption.SUPPRESS_GO_AHEAD };
    SimpleOptionHandler hand = new SimpleOptionHandler(550);
    try {
        STANDARD.client.addOptionHandler(hand);
    } catch (Exception e) {
        add_invalid_ok1 = true;
    }
    try {
        OPTIONS.client.addOptionHandler(hand);
    } catch (Exception e) {
        add_invalid_ok2 = true;
    }
    InputStream is1 = STANDARD.server.getInputStream();
    Thread.sleep(1000);
    if (is1.available() == 0) {
        connect1_ok = true;
    }
    Thread.sleep(1000);
    InputStream is2 = OPTIONS.server.getInputStream();
    if (is2.available() == 9) {
        is2.read(buffread2);
        connect2_ok = true;
        if (equalBytes(buffread2, expected2))
            init2_ok = true;
    }
    InputStream is3 = ANSI.server.getInputStream();
    Thread.sleep(1000);
    if (is3.available() == 0) {
        connect3_ok = true;
    }
    assertTrue(connect1_ok);
    assertTrue(connect2_ok);
    assertTrue(connect3_ok);
    assertTrue(!STANDARD.client.getLocalOptionState(TelnetOption.ECHO));
    assertTrue(!STANDARD.client.getRemoteOptionState(TelnetOption.ECHO));
    assertTrue(!OPTIONS.client.getLocalOptionState(TelnetOption.ECHO));
    assertTrue(!OPTIONS.client.getRemoteOptionState(TelnetOption.ECHO));
    assertTrue(!ANSI.client.getLocalOptionState(TelnetOption.TERMINAL_TYPE));
    assertTrue(!ANSI.client.getRemoteOptionState(TelnetOption.TERMINAL_TYPE));
    assertTrue(init2_ok);
    assertTrue(add_invalid_ok1);
    assertTrue(add_invalid_ok2);
}
