@Override
void writeMethodImplementationJava(ClassScope classScope, Method m) {
    classScope.startLine("@Override public ");
    writeReturnTypeJava(classScope, m);
    classScope.append(" ");
    appendMethodSignatureJava(classScope, m, Collections.<String>emptyList());
    {
        Type[] exceptions = m.getGenericExceptionTypes();
        if (exceptions.length > 0) {
            classScope.append(" throws ");
            for (int i = 0; i < exceptions.length; i++) {
                if (i != 0) {
                    classScope.append(", ");
                }
                Util.writeJavaTypeName(exceptions[i], classScope.getStringBuilder());
            }
        }
    }
    MethodScope scope = classScope.newMethodScope();
    scope.append(" {\n");
    scope.indentRight();
    classScope.startLine("");
    writeReturnTypeJava(classScope, m);
    scope.append(" result = ");
    getFieldBinding().writeGetExpressionJava(scope.getStringBuilder());
    scope.append(";\n");
    scope.startLine("if (result != null) {\n");
    scope.startLine("  return result;\n");
    scope.startLine("}\n");
    String parseResultRef = scope.newMethodScopedName("parseResult");
    writeParseJava(scope, parseResultRef);
    scope.startLine("if (" + parseResultRef + " != null) {\n");
    scope.indentRight();
    getFieldBinding().writeSetAndGetJava(scope, parseResultRef, "cachedResult");
    scope.startLine(parseResultRef + " = cachedResult;\n");
    scope.indentLeft();
    scope.startLine("}\n");
    scope.startLine("return " + parseResultRef + ";\n");
    scope.indentLeft();
    scope.startLine("}\n");
}
