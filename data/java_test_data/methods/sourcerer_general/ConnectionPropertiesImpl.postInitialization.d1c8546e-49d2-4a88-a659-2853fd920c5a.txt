protected void postInitialization() throws SQLException {
    // Support 'old' profileSql capitalization
    if (this.profileSql.getValueAsObject() != null) {
        this.profileSQL.initializeFrom(this.profileSql.getValueAsObject().toString());
    }
    this.reconnectTxAtEndAsBoolean = ((Boolean) this.reconnectAtTxEnd.getValueAsObject()).booleanValue();
    // Adjust max rows
    if (this.getMaxRows() == 0) {
        // adjust so that it will become MysqlDefs.MAX_ROWS
        // in execSQL()
        this.maxRows.setValueAsObject(Constants.integerValueOf(-1));
    }
    // 
    // Check character encoding
    // 
    String testEncoding = this.getEncoding();
    if (testEncoding != null) {
        // can't be used
        try {
            // $NON-NLS-1$
            String testString = "abc";
            testString.getBytes(testEncoding);
        } catch (UnsupportedEncodingException UE) {
            throw SQLError.createSQLException(Messages.getString("ConnectionProperties.unsupportedCharacterEncoding", new Object[] { testEncoding }), "0S100", // $NON-NLS-1$ //$NON-NLS-2$
            getExceptionInterceptor());
        }
    }
    // Check (and disable) if not supported
    if (((Boolean) this.cacheResultSetMetadata.getValueAsObject()).booleanValue()) {
        try {
            // $NON-NLS-1$
            Class.forName("java.util.LinkedHashMap");
        } catch (ClassNotFoundException cnfe) {
            this.cacheResultSetMetadata.setValue(false);
        }
    }
    this.cacheResultSetMetaDataAsBoolean = this.cacheResultSetMetadata.getValueAsBoolean();
    this.useUnicodeAsBoolean = this.useUnicode.getValueAsBoolean();
    this.characterEncodingAsString = ((String) this.characterEncoding.getValueAsObject());
    this.highAvailabilityAsBoolean = this.autoReconnect.getValueAsBoolean();
    this.autoReconnectForPoolsAsBoolean = this.autoReconnectForPools.getValueAsBoolean();
    this.maxRowsAsInt = ((Integer) this.maxRows.getValueAsObject()).intValue();
    this.profileSQLAsBoolean = this.profileSQL.getValueAsBoolean();
    this.useUsageAdvisorAsBoolean = this.useUsageAdvisor.getValueAsBoolean();
    this.useOldUTF8BehaviorAsBoolean = this.useOldUTF8Behavior.getValueAsBoolean();
    this.autoGenerateTestcaseScriptAsBoolean = this.autoGenerateTestcaseScript.getValueAsBoolean();
    this.maintainTimeStatsAsBoolean = this.maintainTimeStats.getValueAsBoolean();
    this.jdbcCompliantTruncationForReads = getJdbcCompliantTruncation();
    if (getUseCursorFetch()) {
        // assume they want to use server-side prepared statements
        // because they're required for this functionality
        setDetectServerPreparedStmts(true);
    }
}
