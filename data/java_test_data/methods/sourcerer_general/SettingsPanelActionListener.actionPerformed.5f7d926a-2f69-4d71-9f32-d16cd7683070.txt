/*--------------------------------------------------------------
    LISTENER-PART.
    --------------------------------------------------------------*/
public void actionPerformed(ActionEvent event) {
    // Initialize a Task to perform all the tasks
    // Configure JTask
    config = new JTaskConfig();
    // Show Cancel/Close Buttons
    config.displayCancelButton(true);
    config.displayStatus(true);
    String status = updateParameters();
    HashSet noClassificationsSet = new HashSet();
    redundantIDs = new HashMap<String, HashSet<String>>();
    // passed all tests.
    if (status.equals("OK")) {
        // split graph input and text input
        consistencyCheck = true;
        if (params.getTextOrGraph()) {
            // graph
            startNetworkView = Cytoscape.getCurrentNetworkView();
            startNetwork = startNetworkView.getNetwork();
            CyNetwork network = Cytoscape.getCurrentNetwork();
            params.setSelectedNodes(getSelectedCanonicalNamesFromNetwork(network));
            if (params.getReferenceSet().equals(GRAPH)) {
                params.setAllNodes(getAllCanonicalNamesFromNetwork(network));
            } else if (params.getReferenceSet().equals(GENOME)) {
                params.setAllNodes(getAllCanonicalNamesFromAnnotation(params.getSelectedNodes()));
            } else {
                params.setAllNodes(getAllCanonicalNamesFromAnnotation(params.getSelectedNodes()));
            }
            if (consistencyCheck) {
                int[] testData = getClassificationsFromVector(params.getSelectedNodes(), noClassificationsSet);
                boolean noElementsInTestData = false;
                // testing whether there are elements in sample data array.
                try {
                    int firstElement = testData[0];
                } catch (Exception ex) {
                    noElementsInTestData = true;
                }
                if (!noElementsInTestData) {
                    performCalculations(params.getSelectedNodes(), params.getAllNodes(), noClassificationsSet);
                } else {
                    JOptionPane.showMessageDialog(settingsPanel, "The selected annotation does not produce any" + "\n" + "classifications for the selected nodes." + "\n" + "Maybe you chose the wrong type of gene identifier ?");
                }
            }
        } else {
            if (!params.getCluster_name().equals("batch")) {
                if (params.getReferenceSet().equals(GRAPH)) {
                    // CyNetworkView graphView = Cytoscape.getCurrentNetworkView();
                    CyNetwork network = Cytoscape.getCurrentNetwork();
                    params.setAllNodes(getAllCanonicalNamesFromNetwork(network));
                    HashSet<String> selection = getSelectedCanonicalNamesFromTextArea();
                    // conformize names...
                    params.setSelectedNodes(conformize(selection, params.getAllNodes()));
                    if (!params.getAllNodes().containsAll(params.getSelectedNodes())) {
                        consistencyCheck = false;
                        JOptionPane.showMessageDialog(settingsPanel, "Some nodes in the text input panel do not exist in the network." + "\n" + "Option 'Test Cluster versus Graph' is not allowed.");
                    }
                } else if (params.getReferenceSet().equals(GENOME)) {
                    params.setSelectedNodes(getSelectedCanonicalNamesFromTextArea());
                    params.setAllNodes(getAllCanonicalNamesFromAnnotation(params.getSelectedNodes()));
                } else {
                    params.setSelectedNodes(getSelectedCanonicalNamesFromTextArea());
                    params.setAllNodes(getAllCanonicalNamesFromAnnotation(params.getSelectedNodes()));
                }
                if (consistencyCheck) {
                    int[] testData = getClassificationsFromVector(params.getSelectedNodes(), noClassificationsSet);
                    boolean noElementsInTestData = false;
                    // testing whether there are elements in sample data array.
                    try {
                        int firstElement = testData[0];
                    } catch (Exception ex) {
                        noElementsInTestData = true;
                    }
                    if (!noElementsInTestData) {
                        performCalculations(params.getSelectedNodes(), params.getAllNodes(), noClassificationsSet);
                    } else {
                        JOptionPane.showMessageDialog(settingsPanel, "The selected annotation does not produce any" + "\n" + "classifications for the selected nodes." + "\n" + "Maybe you chose the wrong type of gene identifier ?");
                    }
                }
            } else {
                String textNodes = params.getTextInput();
                String[] clusters = textNodes.split("batch");
                if (clusters.length == 0) {
                    JOptionPane.showMessageDialog(settingsPanel, "Please separate your clusters " + "\n" + "with the 'batch' keyword." + "\n");
                } else {
                    if (params.getReferenceSet().equals(GRAPH)) {
                        // CyNetworkView graphView = Cytoscape.getCurrentNetworkView();
                        CyNetwork network = Cytoscape.getCurrentNetwork();
                        params.setAllNodes(getAllCanonicalNamesFromNetwork(network));
                    } else if (params.getReferenceSet().equals(GENOME)) {
                        HashSet<String> allClusters = new HashSet<String>();
                        for (int i = 0; i < clusters.length; i++) {
                            HashSet<String> selection = getBatchClusterFromTextArea(clusters[i]);
                            allClusters.addAll(selection);
                        }
                        params.setAllNodes(getAllCanonicalNamesFromAnnotation(allClusters));
                    } else {
                        HashSet<String> allClusters = new HashSet<String>();
                        for (int i = 0; i < clusters.length; i++) {
                            HashSet<String> selection = getBatchClusterFromTextArea(clusters[i]);
                            allClusters.addAll(selection);
                        }
                        params.setAllNodes(getAllCanonicalNamesFromAnnotation(allClusters));
                    }
                    for (int i = 0; i < clusters.length; i++) {
                        consistencyCheck = true;
                        HashSet<String> selection = getBatchClusterFromTextArea(clusters[i]);
                        // conformize names...
                        if (params.getReferenceSet().equals(GRAPH)) {
                            params.setSelectedNodes(conformize(selection, params.getAllNodes()));
                        } else {
                            params.setSelectedNodes(selection);
                        }
                        if (params.getReferenceSet().equals(GRAPH) && !params.getAllNodes().containsAll(params.getSelectedNodes())) {
                            consistencyCheck = false;
                            JOptionPane.showMessageDialog(settingsPanel, "Some nodes in the text input panel do not exist in the network." + "\n" + "Option 'Test Cluster versus Graph' is not allowed.");
                        }
                        if (consistencyCheck) {
                            int[] testData = getClassificationsFromVector(params.getSelectedNodes(), noClassificationsSet);
                            boolean noElementsInTestData = false;
                            // testing whether there are elements in sample data array.
                            try {
                                int firstElement = testData[0];
                            } catch (Exception ex) {
                                noElementsInTestData = true;
                            }
                            if (!noElementsInTestData) {
                                performCalculations(params.getSelectedNodes(), params.getAllNodes(), noClassificationsSet);
                            } else {
                                JOptionPane.showMessageDialog(settingsPanel, "The selected annotation does not produce any" + "\n" + "classifications for the selected nodes." + "\n" + "Maybe you chose the wrong type of gene identifier ?");
                            }
                        }
                    }
                }
            }
        }
    }
}
