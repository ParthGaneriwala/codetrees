public static final Tree createTree() {
    // create the tree and add the root
    Tree tree = new Tree();
    Node rootNode = tree.addRoot();
    Table rootTable = rootNode.getTable();
    // add necessary colums
    rootNode.getTable().addColumn(NAME, String.class);
    rootNode.getTable().addColumn(FULL_NAME, String.class);
    rootNode.getTable().addColumn(WIRE_FRAME, int.class);
    rootNode.getTable().addColumn(COMPLEXITY_SUMMARIZED, int.class);
    // just the classes in the leafs
    rootNode.getTable().addColumn(WEIGHT, double.class);
    // classes in all dirs
    rootNode.getTable().addColumn(NUMBER_OF_CLASSES, int.class);
    // classes in all dirs
    rootNode.getTable().addColumn(NUMBER_OF_METHODS, int.class);
    // classes in all dirs summarized
    rootNode.getTable().addColumn(SUMMARIZED_NUMBER_OF_CLASSES, int.class);
    rootNode.getTable().addColumn(EXPERT_UI, int.class);
    // to support layouting (which is work in progress)
    rootNode.getTable().addColumn(TreeMapLayout.LAYOUT_TYPE, int.class);
    rootNode.getTable().addColumn(TreeMapLayout.LAYOUT_ORDER, float.class);
    // adding tables for the metrics (from configuration)
    initDataColumnsFromConfig(rootTable);
    // jdepend metrics
    rootNode.getTable().addColumn(SourceData.METRIC_JDEPEND_PREFIX + SourceData.CLASSCOUNT, int.class);
    rootNode.getTable().addColumn(SourceData.METRIC_JDEPEND_PREFIX + SourceData.ABSTRACT_CLASSCOUNT, int.class);
    rootNode.getTable().addColumn(SourceData.METRIC_JDEPEND_PREFIX + SourceData.AFFERENT_COUPLINGS, int.class);
    rootNode.getTable().addColumn(SourceData.METRIC_JDEPEND_PREFIX + SourceData.EFFERENT_COUPLINGS, int.class);
    rootNode.getTable().addColumn(SourceData.METRIC_JDEPEND_PREFIX + SourceData.ABSTRACTNESS, int.class);
    rootNode.getTable().addColumn(SourceData.METRIC_JDEPEND_PREFIX + SourceData.INSTABILITY, int.class);
    rootNode.getTable().addColumn(SourceData.METRIC_JDEPEND_PREFIX + SourceData.DISTANCE, int.class);
    rootNode.getTable().addColumn(SourceData.METRIC_JDEPEND_PREFIX + SourceData.DEPENDENCY_CYCLES, int.class);
    // add values for rootNode
    rootNode.setString(SourceData.NAME, SourceData.ROOT_NODE_NAME);
    rootNode.setString(SourceData.FULL_NAME, "");
    // initial one, used for wireframe
    rootNode.setInt(SourceData.WIRE_FRAME, INITIAL_NODE_VALUE);
    // initial one, used for summary
    rootNode.setInt(SourceData.COMPLEXITY_SUMMARIZED, INITIAL_NODE_VALUE);
    rootNode.setInt(SourceData.EXPERT_UI, INITIAL_NODE_VALUE);
    rootNode.setInt(SourceData.NUMBER_OF_CLASSES, 0);
    return tree;
}
