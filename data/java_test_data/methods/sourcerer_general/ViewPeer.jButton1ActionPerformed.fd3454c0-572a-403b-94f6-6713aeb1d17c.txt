// GEN-LAST:event_jButton5ActionPerformed
private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {
    // GEN-FIRST:event_jButton1ActionPerformed
    Vector v = (Vector) ((DefaultTableModel) jTable1.getModel()).getDataVector().get(jTable1.getSelectedRow());
    String filename = (String) v.get(0);
    String peerString = (String) v.get(1);
    String md5 = (String) v.get(3);
    ArrayList peers = new ArrayList();
    String[] tmp = peerString.split(",");
    for (int k = 1; k < tmp.length; k++) {
        String peerIP = tmp[k].split(":")[0];
        int peerPort = Integer.parseInt(tmp[k].split(":")[1]);
        RemotePeer tmpPeer = new RemotePeer(peerIP, peerPort);
        peers.add(tmpPeer);
    }
    long filesize = Long.parseLong((String) v.get(2));
    // Write Download in Download Table
    String[] headers = { "Filename", "Peer", "Status" };
    DefaultTableModel dtm = new DefaultTableModel(headers, 0);
    String[] data = { filename, peerString.toString() };
    dtm.addRow(data);
    jTable2.setModel(dtm);
    // Start Download
    jProgressBar1.setMinimum(0);
    jProgressBar1.setMaximum((int) filesize);
    jProgressBar1.setStringPainted(true);
    jProgressBar1.setString(null);
    // myOverlay.download(filename, new RemotePeer(peerIP, peerPort), filesize, (long)0, jProgressBar1);
    DownloadTask task = new DownloadTask(myOverlay, filename, peers, filesize, jProgressBar1, this, md5);
    // task.addPropertyChangeListener(this);
    task.execute();
}
