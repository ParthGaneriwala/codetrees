void generateConstructorSwitch(int consIndex, int argsVar, int consArgsVar, CodeVisitor cv) {
    Label defaultLabel = new Label();
    Label endLabel = new Label();
    int cases = superConstructors.length + constructors.length;
    Label[] labels = new Label[cases];
    for (int i = 0; i < cases; i++) labels[i] = new Label();
    // Generate code to call ClassGeneratorUtil to get our switch index
    // and give us args...
    // push super class name
    // use superClassName var?
    cv.visitLdcInsn(superClass.getName());
    // push class static This object
    cv.visitFieldInsn(GETSTATIC, fqClassName, BSHSTATIC + className, "Lbsh/This;");
    // push args
    cv.visitVarInsn(ALOAD, argsVar);
    // push this constructor index number onto stack
    cv.visitIntInsn(BIPUSH, consIndex);
    // invoke the ClassGeneratorUtil getConstructorsArgs() method
    cv.visitMethodInsn(INVOKESTATIC, "bsh/ClassGeneratorUtil", "getConstructorArgs", "(Ljava/lang/String;Lbsh/This;[Ljava/lang/Object;I)" + "Lbsh/ClassGeneratorUtil$ConstructorArgs;");
    // store ConstructorArgs in consArgsVar
    cv.visitVarInsn(ASTORE, consArgsVar);
    // Get the ConstructorArgs selector field from ConstructorArgs
    // push ConstructorArgs
    cv.visitVarInsn(ALOAD, consArgsVar);
    cv.visitFieldInsn(GETFIELD, "bsh/ClassGeneratorUtil$ConstructorArgs", "selector", "I");
    // start switch
    cv.visitTableSwitchInsn(0, /*min*/
    cases - 1, /*max*/
    defaultLabel, labels);
    // generate switch body
    int index = 0;
    for (int i = 0; i < superConstructors.length; i++, index++) doSwitchBranch(index, superClassName, getTypeDescriptors(superConstructors[i].getParameterTypes()), endLabel, labels, consArgsVar, cv);
    for (int i = 0; i < constructors.length; i++, index++) doSwitchBranch(index, fqClassName, constructors[i].getParamTypeDescriptors(), endLabel, labels, consArgsVar, cv);
    // generate the default branch of switch
    cv.visitLabel(defaultLabel);
    // default branch always invokes no args super
    // push 'this'
    cv.visitVarInsn(ALOAD, 0);
    cv.visitMethodInsn(INVOKESPECIAL, superClassName, "<init>", "()V");
    // done with switch
    cv.visitLabel(endLabel);
}
