private final byte[] streamToBytes(InputStream in, boolean escape, int streamLength, boolean useLength) throws SQLException {
    try {
        if (streamLength == -1) {
            useLength = false;
        }
        ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();
        int bc = -1;
        if (useLength) {
            bc = readblock(in, this.streamConvertBuf, streamLength);
        } else {
            bc = readblock(in, this.streamConvertBuf);
        }
        int lengthLeftToRead = streamLength - bc;
        if (escape) {
            if (this.connection.versionMeetsMinimum(4, 1, 0)) {
                bytesOut.write('_');
                bytesOut.write('b');
                bytesOut.write('i');
                bytesOut.write('n');
                bytesOut.write('a');
                bytesOut.write('r');
                bytesOut.write('y');
            }
            bytesOut.write('\'');
        }
        while (bc > 0) {
            if (escape) {
                escapeblockFast(this.streamConvertBuf, bytesOut, bc);
            } else {
                bytesOut.write(this.streamConvertBuf, 0, bc);
            }
            if (useLength) {
                bc = readblock(in, this.streamConvertBuf, lengthLeftToRead);
                if (bc > 0) {
                    lengthLeftToRead -= bc;
                }
            } else {
                bc = readblock(in, this.streamConvertBuf);
            }
        }
        if (escape) {
            bytesOut.write('\'');
        }
        return bytesOut.toByteArray();
    } finally {
        if (this.connection.getAutoClosePStmtStreams()) {
            try {
                in.close();
            } catch (IOException ioEx) {
                ;
            }
            in = null;
        }
    }
}
