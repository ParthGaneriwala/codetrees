public Dimension computePreferredSize(Container target, int whint, int hhint) {
    Dimension psize = new Dimension();
    int horizComps = 0, vertComps = 0;
    Component comp;
    for (Integer vert : VERTS) {
        comp = _components[vert.intValue()];
        if (comp != null && comp.isVisible()) {
            Dimension cpsize = comp.getPreferredSize(whint, -1);
            psize.width = Math.max(psize.width, cpsize.width);
            psize.height += cpsize.height;
            vertComps++;
            if (hhint > 0) {
                hhint -= (cpsize.height + _vgap);
            }
        }
    }
    int centerWidth = 0, centerHeight = 0;
    for (Integer horiz : HORIZS) {
        comp = _components[horiz.intValue()];
        if (comp != null && comp.isVisible()) {
            Dimension cpsize = comp.getPreferredSize(-1, hhint);
            centerWidth += cpsize.width;
            centerHeight = Math.max(centerHeight, cpsize.height);
            horizComps++;
            if (whint > 0) {
                whint -= (cpsize.width + _hgap);
            }
        }
    }
    comp = _components[CENTER.intValue()];
    if (comp != null && comp.isVisible()) {
        Dimension cpsize = comp.getPreferredSize(whint, hhint);
        centerWidth += cpsize.width;
        centerHeight = Math.max(centerHeight, cpsize.height);
        horizComps++;
    }
    centerWidth += Math.max(horizComps - 1, 0) * _hgap;
    if (centerHeight > 0) {
        vertComps++;
    }
    psize.width = Math.max(psize.width, centerWidth);
    psize.height += centerHeight;
    psize.height += Math.max(vertComps - 1, 0) * _vgap;
    return psize;
}
