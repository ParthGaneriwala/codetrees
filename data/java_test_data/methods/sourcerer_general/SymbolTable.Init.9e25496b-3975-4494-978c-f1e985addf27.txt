public void Init() {
    // Clear des maps
    this.mClassMap.clear();
    this.mDefaultLangageType.clear();
    this.mDefaultLangagePrimitive.clear();
    this.mLocalVarMap.clear();
    // Class object par d�faut dans le langage
    this.AddClass(msDefaultClass, "");
    // On lui ajoute son constructeur par d�faut sans arguments
    this.GetClass(msDefaultClass).AddConstructor(new Vector<String>());
    // Type par d�faut dans le langage
    this.mDefaultLangageType.add("bool");
    this.mDefaultLangageType.add("int");
    this.mDefaultLangageType.add("string");
    this.mDefaultLangageType.add("unit");
    // Primitives par d�faut dans le langage
    Vector<String> argList = new Vector<String>();
    // Type de retour en premier !
    argList.add("unit");
    argList.add("int");
    argList.add("int");
    this.mDefaultLangagePrimitive.put("open_screen", argList);
    argList = new Vector<String>();
    argList.add("unit");
    this.mDefaultLangagePrimitive.put("clear_screen", argList);
    argList = new Vector<String>();
    argList.add("unit");
    argList.add("int");
    argList.add("int");
    argList.add("int");
    this.mDefaultLangagePrimitive.put("set_color", argList);
    argList = new Vector<String>();
    argList.add("unit");
    argList.add("int");
    argList.add("int");
    this.mDefaultLangagePrimitive.put("draw_point", argList);
    argList = new Vector<String>();
    argList.add("unit");
    argList.add("int");
    argList.add("int");
    argList.add("int");
    argList.add("int");
    this.mDefaultLangagePrimitive.put("draw_line", argList);
    argList = new Vector<String>();
    argList.add("unit");
    argList.add("int");
    argList.add("int");
    argList.add("int");
    this.mDefaultLangagePrimitive.put("draw_circle", argList);
    argList = new Vector<String>();
    argList.add("unit");
    argList.add("int");
    argList.add("int");
    argList.add("int");
    argList.add("int");
    this.mDefaultLangagePrimitive.put("draw_rect", argList);
    argList = new Vector<String>();
    argList.add("unit");
    argList.add("int");
    argList.add("int");
    argList.add("int");
    argList.add("int");
    this.mDefaultLangagePrimitive.put("fill_rect", argList);
    argList = new Vector<String>();
    argList.add("unit");
    argList.add("int");
    this.mDefaultLangagePrimitive.put("usleep", argList);
    argList = new Vector<String>();
    argList.add("int");
    this.mDefaultLangagePrimitive.put("get", argList);
    argList = new Vector<String>();
    argList.add("unit");
    argList.add("int");
    this.mDefaultLangagePrimitive.put("set", argList);
    argList = new Vector<String>();
    argList.add("bool");
    this.mDefaultLangagePrimitive.put("move", argList);
    argList = new Vector<String>();
    argList.add("unit");
    this.mDefaultLangagePrimitive.put("turn_left", argList);
    argList = new Vector<String>();
    argList.add("unit");
    this.mDefaultLangagePrimitive.put("turn_right", argList);
    argList = new Vector<String>();
    argList.add("unit");
    // cas particulier de print : un nombre ind�fini d'arguments de type int, bool ou string
    argList.add("int");
    argList.add("bool");
    argList.add("string");
    this.mDefaultLangagePrimitive.put("print", argList);
}
