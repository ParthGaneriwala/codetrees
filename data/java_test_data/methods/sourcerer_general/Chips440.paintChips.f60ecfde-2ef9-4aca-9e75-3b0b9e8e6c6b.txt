public void paintChips() {
    Graphics2D graphics = (Graphics2D) strategy.getDrawGraphics();
    graphics.setColor(Color.black);
    graphics.fillRect(ORIGIN, ORIGIN, WINDOW_WIDTH, WINDOW_HEIGHT);
    graphics.setColor(Color.white);
    graphics.drawString("Time Remaining:     " + time_left, TEXT_X, TIME_Y);
    graphics.drawString("Chips Remaining:    " + chips_left, TEXT_X, CHIPS_Y);
    // there's no choice
    for (int p_num = P_ONE; p_num < num_play; p_num++) {
        int p_uid = this.player_uid[p_num];
        int x_pos = TEXT_X + BOX_OFF;
        int player_off = ITEM_SPACE * p_num;
        int y_boot = BOOTS_Y - IBOX_OFF + player_off;
        int y_key = KEYS_Y - IBOX_OFF + player_off;
        graphics.setColor(Color.white);
        graphics.drawString("Player " + (p_num + MIN_PLAY), TEXT_X, BOOTS_Y + player_off - LINE_DIF);
        graphics.drawString("Boots", TEXT_X, BOOTS_Y + player_off);
        graphics.drawString("Keys", TEXT_X, KEYS_Y + player_off);
        if (myEngine.hasItem(p_uid, Types.Item.F_BOOT))
            graphics.setColor(Color.red);
        else
            graphics.setColor(Color.gray);
        graphics.fillRect(x_pos, y_boot, OFFSET, OFFSET);
        if (myEngine.hasItem(p_uid, Types.Item.R_KEY))
            graphics.setColor(Color.red);
        else
            graphics.setColor(Color.gray);
        graphics.fillRect(x_pos, y_key, OFFSET, OFFSET);
        x_pos += BOX_SPACE;
        if (myEngine.hasItem(p_uid, Types.Item.W_BOOT))
            graphics.setColor(Color.blue);
        else
            graphics.setColor(Color.gray);
        graphics.fillRect(x_pos, y_boot, OFFSET, OFFSET);
        if (myEngine.hasItem(p_uid, Types.Item.B_KEY))
            graphics.setColor(Color.blue);
        else
            graphics.setColor(Color.gray);
        graphics.fillRect(x_pos, y_key, OFFSET, OFFSET);
        x_pos += BOX_SPACE;
        if (myEngine.hasItem(p_uid, Types.Item.I_BOOT))
            graphics.setColor(Color.white);
        else
            graphics.setColor(Color.gray);
        graphics.fillRect(x_pos, y_boot, OFFSET, OFFSET);
        if (myEngine.hasItem(p_uid, Types.Item.Y_KEY))
            graphics.setColor(Color.yellow);
        else
            graphics.setColor(Color.gray);
        graphics.fillRect(x_pos, y_key, OFFSET, OFFSET);
        x_pos += BOX_SPACE;
        if (myEngine.hasItem(p_uid, Types.Item.M_BOOT))
            graphics.setColor(Color.green);
        else
            graphics.setColor(Color.gray);
        graphics.fillRect(x_pos, y_boot, OFFSET, OFFSET);
        if (myEngine.hasItem(p_uid, Types.Item.G_KEY))
            graphics.setColor(Color.green);
        else
            graphics.setColor(Color.gray);
        graphics.fillRect(x_pos, y_key, OFFSET, OFFSET);
    }
    int pos_xone = player1_pos.getX();
    int pos_yone = player1_pos.getY();
    int pos_ytwo = 0;
    int pos_xtwo = 0;
    if (m_players) {
        pos_xtwo = player2_pos.getX();
        pos_ytwo = player2_pos.getY();
    }
    int img_y = OFFSET;
    for (int x = pos_xone - VIEW_LIMIT; x <= pos_xone + VIEW_LIMIT; x++) {
        int img_x = OFFSET;
        for (int y = pos_yone - VIEW_LIMIT; y <= pos_yone + VIEW_LIMIT; y++) {
            graphics.drawImage(myEngine.getImage(x, y), img_x, img_y, this);
            if (m_players && (x == pos_xtwo && y == pos_ytwo))
                graphics.drawImage(player2_image, img_x, img_y, this);
            if (x == pos_xone && y == pos_yone)
                graphics.drawImage(player_image, img_x, img_y, this);
            img_x += IMAGE_SIZE;
        }
        img_y += IMAGE_SIZE;
    }
    if (m_players) {
        img_y = OFFSET;
        for (int x = pos_xtwo - VIEW_LIMIT; x <= pos_xtwo + VIEW_LIMIT; x++) {
            int img_x = MP_OFF;
            for (int y = pos_ytwo - VIEW_LIMIT; y <= pos_ytwo + VIEW_LIMIT; y++) {
                graphics.drawImage(myEngine.getImage(x, y), img_x, img_y, this);
                if (x == pos_xone && y == pos_yone)
                    graphics.drawImage(player_image, img_x, img_y, this);
                if (x == pos_xtwo && y == pos_ytwo)
                    graphics.drawImage(player2_image, img_x, img_y, this);
                img_x += IMAGE_SIZE;
            }
            img_y += IMAGE_SIZE;
        }
    }
    strategy.show();
}
