tupla_id Expresion1() {
    if (la.line == 72) {
        int x;
        x = 123456;
    }
    tupla_id c1 = new tupla_id("", '-');
    Simbolo simba;
    String arg1, arg2, temporal;
    if ((next != null) && (next.kind == 28)) {
        next = null;
        c1 = Expresion1();
        if (c1.getTipo() != 'e')
            SemError("Se esperaba una expresión entera");
        Esperado(28);
        tupla_id c2;
        next2 = next;
        c2 = Expresion2();
        if (c2.getTipo() != 'e')
            SemError("Se esperaba una expresión entera");
        return new tupla_id("", 'b');
    }
    if (StartOf(2)) {
        tupla_id c2;
        next2 = la.next;
        c2 = Expresion2();
        return c2;
    } else if (StartOf(2)) {
        c1 = Expresion1();
        arg1 = c1.getId();
        if (c1.getTipo() != 'e')
            SemError("Se esperaba una expresión entera");
        Esperado(28);
        tupla_id c2;
        c2 = Expresion2();
        arg2 = c2.getId();
        if (c2.getTipo() != 'e')
            SemError("Se esperaba una expresión entera");
        temporal = tercetos.darTemporal();
        tercetos.operacionBinaria(arg1, arg2, "<", temporal);
        // Se mete el temporal en la Tabla de Símbolos
        // ¡¡¡ CUIDADO CON LOS TAMAÑOS Y LOS DESPLAZAMIENTOS !!! //
        simba = new Simbolo(temporal, 'b');
        tablasimbolos.InsertarSimbolo(simba, temporal);
        return new tupla_id("temporal", 'b');
    } else {
        // SynErr(48);
        next2 = next;
        c1 = Expresion2();
        return c1;
    }
}
