public static Board parseWdp(String string) {
    if (string.length() != 41) {
        if (printParsingErrors) {
            err.println("Unexpected length of string. Expected a length of" + " 41, got " + string.length());
        }
        return null;
    }
    int parsedBlack = 0;
    int parsedWhite = 0;
    int parsedKings = 0;
    boolean parsedBlackToMove;
    int i = 0;
    int bitNbr = 0;
    while (i < 40) {
        for (int j = 0; j < 4; j++) {
            int bit = 1 << bitNbr;
            char c = string.charAt(i);
            switch(c) {
                case 'B':
                    parsedBlack |= bit;
                    parsedKings |= bit;
                    break;
                case 'b':
                    parsedBlack |= bit;
                    break;
                case 'W':
                    parsedWhite |= bit;
                    parsedKings |= bit;
                    break;
                case 'w':
                    parsedWhite |= bit;
                    break;
                case '.':
                    // Do nothing
                    break;
                default:
                    if (printParsingErrors) {
                        err.printf("Unexpected character '%c'. Expected one of" + " ., b, B, w, or W\n", c);
                    }
                    return null;
            }
            i++;
            bitNbr++;
        }
        char s = string.charAt(i);
        if (s != ' ') {
            if (printParsingErrors) {
                err.printf("Unexpected character '%c'. Expected ' '\n", s);
            }
            return null;
        }
        i++;
    }
    char t = string.charAt(40);
    switch(t) {
        case 'B':
        case 'b':
            parsedBlackToMove = true;
            break;
        case 'W':
        case 'w':
            parsedBlackToMove = false;
            break;
        default:
            if (printParsingErrors) {
                err.printf("Unexpected character '%c'. Expected one of" + " b, B, w, or W\n", t);
            }
            return null;
    }
    return new Board(parsedBlack, parsedWhite, parsedKings, parsedBlackToMove);
}
