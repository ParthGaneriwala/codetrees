public String setEvrithing() {
    Users user = (Users) Contexts.getSession().getAttribute("user");
    Recipes rec = (Recipes) Contexts.getSession().getAttribute("recipe");
    if (rec == null)
        return "noRecipe";
    Session session = HibernateUtil.getSession();
    Transaction transaction = session.beginTransaction();
    Query query = session.createQuery("from Recipes rec" + " where rec.recipeId =:recId");
    query.setParameter("recId", rec.getRecipeId());
    List<Recipes> results = query.list();
    rec = results.get(0);
    try {
        query = session.createQuery("from Favorites fav" + " where fav.recipe.recipeId =:recId and fav.user.userId=:userId");
        query.setParameter("recId", rec.getRecipeId());
        query.setParameter("userId", user.getUserId());
        List<Favorites> list = query.list();
        if (list.size() == 0) {
            inFavorite = "add to favorite";
            peersonalNote = "there is no personal note";
        } else {
            inFavorite = "remove from favorite";
            peersonalNote = list.get(0).getPersonalNote();
            if (peersonalNote == null || peersonalNote.equals(""))
                peersonalNote = "there is no personal note";
        }
    } catch (Exception e) {
        inFavorite = "not a user";
        peersonalNote = "you need to be a user to add personal note";
    }
    rec.setNumOfViews(rec.getNumOfViews() + 1);
    System.out.println("1-----------------------------------------------");
    session.update(rec);
    System.out.println("2-----------------------------------------------");
    try {
        query = session.createQuery("from RecentlyViewed fav" + " where fav.recipe.recipeId =:recId and fav.user.userId=:userId");
        query.setParameter("recId", rec.getRecipeId());
        query.setParameter("userId", user.getUserId());
        List<Favorites> list = query.list();
        if (list.size() == 0) {
            RecentlyViewed RV = new RecentlyViewed();
            RV.setUser(user);
            RV.setRecipe(rec);
            session.save(RV);
            query = session.createQuery("from RecentlyViewed fav" + " where fav.user.userId=:userId");
            query.setParameter("userId", user.getUserId());
            list = query.list();
            if (list.size() > 6)
                session.delete(list.get(0));
        }
    } catch (Exception e) {
    }
    transaction.commit();
    session.flush();
    session.close();
    return "loadRecipe";
}
