public String ppfAndGroupToHTMLString(String URLPrefix, int pfgNumber) {
    // Partition this failure group by symbol and emit the necessary
    // SuperNote HTML for the failure group.
    StringBuffer res = new StringBuffer("<h1>Potential point of failure " + pfgNumber + " " + features + "</h1>\n");
    res.append("<script type='text/javascript'>\n");
    res.append("var supernote" + pfgNumber + " = new SuperNote('supernote" + pfgNumber + "', []);\n");
    res.append("</script>\n");
    Set<String> symbols = new HashSet<String>();
    HashMap<String, Set<Shadow>> symToShadows = new HashMap<String, Set<Shadow>>();
    Set<Shadow> ppfPlusOverlaps = new HashSet<Shadow>(ppfs);
    ppfPlusOverlaps.addAll(overlaps);
    for (Shadow s : ppfPlusOverlaps) {
        String sym = SymbolNames.v().symbolNameForShadow(s);
        symbols.add(sym);
        Set<Shadow> ss = symToShadows.get(sym);
        if (ss == null) {
            ss = new HashSet<Shadow>();
            symToShadows.put(sym, ss);
        }
        ss.add(s);
    }
    Set<String> unseenSymbols = new HashSet<String>(tm.getSymbols());
    for (String sym : symbols) {
        unseenSymbols.remove(sym);
        res.append("<div id='supernote" + pfgNumber + "-note-" + sym + "' class='notedefault snp-mouseoffset snb-pinned' style='width:400px'>\n");
        res.append("<h5><a href='#' class='note-close'>X</a>" + sym + "</h5>\n");
        for (Shadow s : symToShadows.get(sym)) res.append(shadowToHTMLString(URLPrefix, pfgNumber, s));
        res.append("</div>\n\n");
    }
    for (String sym : unseenSymbols) {
        res.append("<div id='supernote" + pfgNumber + "-note-" + sym + "' class='notedefault snp-mouseoffset snb-pinned' style='width:400px'>\n");
        res.append("<h5><a href='#' class='note-close'>X</a>" + sym + "</h5>\n");
        res.append("<p>no matches</p>\n");
        res.append("</div>\n\n");
    }
    return res.toString();
}
