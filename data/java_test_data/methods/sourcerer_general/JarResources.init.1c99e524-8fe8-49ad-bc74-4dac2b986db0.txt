private void init() {
    try {
        // extracts just sizes only.
        ZipFile zf = new ZipFile(jarFileName);
        Enumeration e = zf.entries();
        while (e.hasMoreElements()) {
            ZipEntry ze = (ZipEntry) e.nextElement();
            if (debugOn) {
                System.out.println(dumpZipEntry(ze));
            }
            htSizes.put(ze.getName(), new Integer((int) ze.getSize()));
        }
        zf.close();
        // extract resources and put them into the hashtable.
        FileInputStream fis = new FileInputStream(jarFileName);
        BufferedInputStream bis = new BufferedInputStream(fis);
        ZipInputStream zis = new ZipInputStream(bis);
        ZipEntry ze = null;
        while ((ze = zis.getNextEntry()) != null) {
            if (ze.isDirectory()) {
                continue;
            }
            if (debugOn) {
                System.out.println("ze.getName()=" + ze.getName() + "," + "getSize()=" + ze.getSize());
            }
            int size = (int) ze.getSize();
            // -1 means unknown size.
            if (size == -1) {
                size = ((Integer) htSizes.get(ze.getName())).intValue();
            }
            byte[] b = new byte[(int) size];
            int rb = 0;
            int chunk = 0;
            while (((int) size - rb) > 0) {
                chunk = zis.read(b, rb, (int) size - rb);
                if (chunk == -1) {
                    break;
                }
                rb += chunk;
            }
            // add to internal resource hashtable
            htJarContents.put(ze.getName(), b);
            if (debugOn) {
                System.out.println(ze.getName() + "  rb=" + rb + ",size=" + size + ",csize=" + ze.getCompressedSize());
            }
        }
    } catch (NullPointerException e) {
        System.out.println("done.");
    } catch (FileNotFoundException e) {
    // e.printStackTrace();
    } catch (IOException e) {
    // e.printStackTrace();
    }
}
