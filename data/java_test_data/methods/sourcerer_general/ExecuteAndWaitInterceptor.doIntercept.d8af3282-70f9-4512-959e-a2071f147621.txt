protected String doIntercept(ActionInvocation actionInvocation) throws Exception {
    ActionProxy proxy = actionInvocation.getProxy();
    String name = getBackgroundProcessName(proxy);
    ActionContext context = actionInvocation.getInvocationContext();
    Map session = context.getSession();
    Boolean secondTime = true;
    if (executeAfterValidationPass) {
        secondTime = (Boolean) context.get(KEY);
        if (secondTime == null) {
            context.put(KEY, true);
            secondTime = false;
        } else {
            secondTime = true;
            context.put(KEY, null);
        }
    }
    synchronized (session) {
        BackgroundProcess bp = (BackgroundProcess) session.get(KEY + name);
        if ((!executeAfterValidationPass || secondTime) && bp == null) {
            bp = getNewBackgroundProcess(name, actionInvocation, threadPriority);
            session.put(KEY + name, bp);
            // first time let some time pass before showing wait page
            performInitialDelay(bp);
            secondTime = false;
        }
        if ((!executeAfterValidationPass || !secondTime) && bp != null && !bp.isDone()) {
            actionInvocation.getStack().push(bp.getAction());
            Map results = proxy.getConfig().getResults();
            if (!results.containsKey(WAIT)) {
                LOG.warn("ExecuteAndWait interceptor has detected that no result named 'wait' is available. " + "Defaulting to a plain built-in wait page. It is highly recommend you " + "provide an action-specific or global result named '" + WAIT + "'! This requires FreeMarker support and won't work if you don't have it installed");
                // no wait result? hmm -- let's try to do dynamically put it in for you!
                ResultConfig rc = new ResultConfig(WAIT, "org.apache.struts2.views.freemarker.FreemarkerResult", Collections.singletonMap("location", "/org/apache/struts2/interceptor/wait.ftl"));
                results.put(WAIT, rc);
            }
            return WAIT;
        } else if ((!executeAfterValidationPass || !secondTime) && bp != null && bp.isDone()) {
            session.remove(KEY + name);
            actionInvocation.getStack().push(bp.getAction());
            // if an exception occured during action execution, throw it here
            if (bp.getException() != null) {
                throw bp.getException();
            }
            return bp.getResult();
        } else {
            // this interceptor
            return actionInvocation.invoke();
        }
    }
}
