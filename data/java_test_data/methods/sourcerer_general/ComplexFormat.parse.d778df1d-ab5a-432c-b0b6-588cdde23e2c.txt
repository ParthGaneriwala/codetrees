public Complex parse(String source, ParsePosition pos) {
    if (source == null) {
        throw new IllegalArgumentException("source is null");
    }
    if (pos == null) {
        throw new NullPointerException("pos is null");
    }
    int index = pos.getIndex();
    int errorIndex = -1;
    try {
        skipWhitespace(source, pos);
        int parsingIndex = pos.getIndex();
        String firstToken = tryParseToken(source, pos);
        if (IMAGINARY.equals(firstToken)) {
            errorIndex = parsingIndex;
            return null;
        }
        skipWhitespace(source, pos);
        parsingIndex = pos.getIndex();
        Number firstNumber = tryParseNumber(source, pos);
        if (firstNumber == null) {
            errorIndex = parsingIndex;
            return null;
        }
        double firstValue = firstNumber.doubleValue();
        if (MINUS.equals(firstToken)) {
            firstValue = -firstValue;
        }
        index = pos.getIndex();
        boolean whitespace = skipWhitespace(source, pos);
        String secondToken = tryParseToken(source, pos);
        if (IMAGINARY.equals(secondToken)) {
            if (whitespace) {
                return Complex.real(firstValue);
            } else {
                index = pos.getIndex();
                return Complex.imaginary(firstValue);
            }
        }
        if (secondToken == null || parsePartial) {
            return Complex.real(firstValue);
        }
        skipWhitespace(source, pos);
        Number secondNumber = tryParseNumber(source, pos);
        if (secondNumber == null) {
            return Complex.real(firstValue);
        }
        double secondValue = secondNumber.doubleValue();
        if (MINUS.equals(secondToken)) {
            secondValue = -secondValue;
        }
        whitespace = skipWhitespace(source, pos);
        String thirdToken = tryParseToken(source, pos);
        if (IMAGINARY.equals(thirdToken) && !whitespace) {
            index = pos.getIndex();
            return Complex.cartesian(firstValue, secondValue);
        } else {
            return Complex.real(firstValue);
        }
    } finally {
        pos.setIndex(index);
        pos.setErrorIndex(errorIndex);
    }
}
