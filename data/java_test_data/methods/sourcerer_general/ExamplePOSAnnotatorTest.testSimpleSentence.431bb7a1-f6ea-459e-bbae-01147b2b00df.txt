@Test
public void testSimpleSentence() throws Exception {
    AnalysisEngineDescription desc = CleartkAnnotatorDescriptionFactory.createCleartkSequenceAnnotator(ExamplePOSAnnotator.class, ExampleComponents.TYPE_SYSTEM_DESCRIPTION, PublicFieldSequenceDataWriter.StringFactory.class, ".");
    AnalysisEngine engine = AnalysisEngineFactory.createPrimitive(desc);
    // create some tokens, stems and part of speech tags
    tokenBuilder.buildTokens(jCas, "The Absurdis retreated in 2003.", "The Absurdis retreated in 2003 .", "DT NNP VBD IN CD .", "The Absurdi retreat in 2003 .");
    List<Instance<String>> instances = PublicFieldSequenceDataWriter.StringFactory.collectInstances(engine, jCas);
    List<String> featureValues;
    // check "The"
    featureValues = // word
    Arrays.asList(// word
    "The", // stem (thrown away if null)
    "The", // lower case
    "the", // capital type
    "INITIAL_UPPERCASE", // last 2 chars
    "he", // last 3 chars
    "The", // left 2 stems
    "OOB2", "OOB1", // right 2 stems
    "Absurdi", "retreat");
    Assert.assertEquals(featureValues, this.getFeatureValues(instances.get(0)));
    Assert.assertEquals("DT", instances.get(0).getOutcome());
    // check "Absurdis"
    featureValues = // word
    Arrays.asList(// word
    "Absurdi", // stem (thrown away if null)
    "Absurdis", // lower case
    "absurdis", // capital type
    "INITIAL_UPPERCASE", // last 2 chars
    "is", // last 3 chars
    "dis", // left 2 stems
    "OOB1", "The", // right 2 stems
    "retreat", "in");
    Assert.assertEquals(featureValues, this.getFeatureValues(instances.get(1)));
    Assert.assertEquals("NNP", instances.get(1).getOutcome());
    // check "retreated"
    featureValues = // word
    Arrays.asList(// word
    "retreat", // stem (thrown away if null)
    "retreated", // lower case
    "retreated", // capital type
    "ALL_LOWERCASE", // last 2 chars
    "ed", // last 3 chars
    "ted", // left 2 stems
    "The", // right 2 stems
    "Absurdi", "in", "2003");
    Assert.assertEquals(featureValues, this.getFeatureValues(instances.get(2)));
    Assert.assertEquals("VBD", instances.get(2).getOutcome());
    // check "in"
    featureValues = // word
    Arrays.asList(// word
    "in", // stem (thrown away if null)
    "in", // lower case
    "in", // capital type
    "ALL_LOWERCASE", // last 2 chars
    "in", // left 2 stems
    "Absurdi", "retreat", // right 2 stems
    "2003", ".");
    Assert.assertEquals(featureValues, this.getFeatureValues(instances.get(3)));
    Assert.assertEquals("IN", instances.get(3).getOutcome());
    // check "2003"
    featureValues = // word
    Arrays.asList(// word
    "2003", // stem (thrown away if null)
    "2003", // lower case
    "2003", // numeric type
    "YEAR_DIGITS", // last 2 chars
    "03", // last 3 chars
    "003", // left 2 stems
    "retreat", "in", // right 2 stems
    ".", "OOB1");
    Assert.assertEquals(featureValues, this.getFeatureValues(instances.get(4)));
    Assert.assertEquals("CD", instances.get(4).getOutcome());
    // check "."
    featureValues = // word
    Arrays.asList(// word
    ".", // stem (thrown away if null)
    ".", // lower case
    ".", // left 2 stems
    "in", "2003", // right 2 stems
    "OOB1", "OOB2");
    Assert.assertEquals(featureValues, this.getFeatureValues(instances.get(5)));
    Assert.assertEquals(".", instances.get(5).getOutcome());
}
