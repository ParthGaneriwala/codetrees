public void testRecoveryWithMultipleJobs(MiniDFSCluster dfs, MiniMRCluster mr) throws IOException {
    FileSystem fileSys = dfs.getFileSystem();
    JobConf jobConf = mr.createJobConf();
    JobPriority[] priorities = { JobPriority.NORMAL, JobPriority.LOW, JobPriority.HIGH };
    // Note that there is only 1 tracker
    int[] numMaps = { 50, 1, 1 };
    int[] numReds = { 1, 1, 1 };
    cleanUp(fileSys, shareDir);
    // Configure the jobs
    JobConf[] jobs = getJobs(jobConf, priorities, numMaps, numReds, outputDir, inDir, getMapSignalFile(shareDir), getReduceSignalFile(shareDir));
    // Master job parameters
    int masterJob = 0;
    JobPriority masterJobNewPriority = JobPriority.HIGH;
    // Submit a master job
    JobClient jobClient = new JobClient(jobs[masterJob]);
    RunningJob job = jobClient.submitJob(jobs[masterJob]);
    JobID id = job.getID();
    // Wait for the job to be inited
    mr.initializeJob(id);
    // Change the master job's priority so that priority logging is tested
    mr.setJobPriority(id, masterJobNewPriority);
    // Submit the remaining jobs and find the last job id
    for (int i = 1; i < jobs.length; ++i) {
        RunningJob rJob = (new JobClient(jobs[i])).submitJob(jobs[i]);
        mr.initializeJob(rJob.getID());
    }
    // Make sure that the master job is 50% completed
    while (getJobStatus(jobClient, id).mapProgress() < 0.5f) {
        waitFor(100);
    }
    // Note the data that needs to be tested upon restart
    long jobStartTime = getJobStatus(jobClient, id).getStartTime();
    // Kill the jobtracker
    mr.stopJobTracker();
    // Signal the maps to complete
    signalTasks(dfs, fileSys, true, getMapSignalFile(shareDir), getReduceSignalFile(shareDir));
    // Signal the reducers to complete
    signalTasks(dfs, fileSys, false, getMapSignalFile(shareDir), getReduceSignalFile(shareDir));
    // Enable recovery on restart
    mr.getJobTrackerConf().setBoolean("mapred.jobtracker.restart.recover", true);
    // Wait for a minute before submitting a job
    waitFor(60 * 1000);
    // Restart the jobtracker
    mr.startJobTracker();
    // Check if the jobs are still running
    // Wait for the JT to be ready
    waitForJobTracker(jobClient);
    // Check if the job recovered
    assertEquals("Restart failed as previously submitted job was missing", true, getJobStatus(jobClient, id) != null);
    // check if the job's priority got changed
    assertEquals("Restart failed as job's priority did not match", true, mr.getJobPriority(id).equals(masterJobNewPriority));
    waitTillDone(jobClient);
    // Check if the jobs are in order .. the order is 1->3->2
    JobStatus[] newStatuses = jobClient.getAllJobs();
    // Check if the jobs are in the order of submission
    // This is important for the following checks
    boolean jobOrder = newStatuses[0].getJobID().getId() == 1 && newStatuses[1].getJobID().getId() == 2 && newStatuses[2].getJobID().getId() == 3;
    assertTrue("Job submission order changed", jobOrder);
    // Start times are in order and non zero
    boolean startTimeOrder = newStatuses[0].getStartTime() > 0 && newStatuses[0].getStartTime() < newStatuses[1].getStartTime() && newStatuses[1].getStartTime() < newStatuses[2].getStartTime();
    assertTrue("Job start-times are out of order", startTimeOrder);
    boolean finishTimeOrder = mr.getJobFinishTime(newStatuses[0].getJobID()) > 0 && mr.getJobFinishTime(newStatuses[0].getJobID()) < mr.getJobFinishTime(newStatuses[2].getJobID()) && mr.getJobFinishTime(newStatuses[2].getJobID()) < mr.getJobFinishTime(newStatuses[1].getJobID());
    assertTrue("Jobs finish-times are out of order", finishTimeOrder);
    // This should be used for testing job counters
    job.getCounters();
    // check if the job was successful
    assertTrue("Previously submitted job was not successful", job.isSuccessful());
    // Check if the start time was recovered
    assertTrue("Previously submitted job's start time has changed", getJobStatus(jobClient, id).getStartTime() == jobStartTime);
    // Test history files
    testJobHistoryFiles(id, jobs[masterJob]);
}
