private static String bind(PreparedStatement ps, ObjectDescription objectDescription, int position, String field) throws SQLException {
    Object bindVariable = objectDescription.getValue();
    StringBuffer sqlSentence = new StringBuffer();
    if (bindVariable == null) {
        if (objectDescription.getDataType().equals("BigDecimal"))
            ps.setNull(position, 2);
        if (objectDescription.getDataType().equals("Calendar"))
            ps.setNull(position, 91);
        if (objectDescription.getDataType().equals("CLOB"))
            ps.setNull(position, 2005);
        if (objectDescription.getDataType().equals("String"))
            ps.setNull(position, 12);
        if (objectDescription.getDataType().equals("byte[]"))
            ps.setNull(position, -2);
        if (objectDescription.getDataType().equals("Timestamp"))
            ps.setNull(position, 91);
        if (objectDescription.getDataType().equals("Double"))
            ps.setNull(position, 8);
        if (objectDescription.getDataType().equals("Integer"))
            ps.setNull(position, 4);
        if (objectDescription.getDataType().equals("Long"))
            ps.setNull(position, -5);
        if (objectDescription.getDataType().equals("boolean"))
            ps.setNull(position, 16);
        sqlSentence.append(field).append("=NULL");
    }
    if (bindVariable instanceof Integer) {
        ps.setInt(position, ((Integer) bindVariable).intValue());
        sqlSentence.append(field).append("=").append(((Integer) bindVariable).intValue());
        return sqlSentence.toString();
    }
    if (bindVariable instanceof String) {
        if (objectDescription.getDataType().equals("String")) {
            ps.setString(position, (String) bindVariable);
            sqlSentence.append(field).append("='").append((String) bindVariable).append("'");
        }
        if (objectDescription.getDataType().equals("CLOB")) {
            String clob = (String) bindVariable;
            StringReader sr = new StringReader(clob);
            ps.setCharacterStream(position, sr, clob.length());
            sqlSentence.append(field).append("='").append(clob).append("'");
        }
        return sqlSentence.toString();
    }
    if (bindVariable instanceof Date) {
        ps.setDate(position, new java.sql.Date(((Date) bindVariable).getTime()));
        sqlSentence.append(field).append("='").append(new java.sql.Date(((Date) bindVariable).getTime())).append("'");
        return sqlSentence.toString();
    }
    if (bindVariable instanceof BigDecimal) {
        ps.setBigDecimal(position, (BigDecimal) bindVariable);
        sqlSentence.append(field).append("=").append(bindVariable);
        return sqlSentence.toString();
    }
    if (bindVariable instanceof Calendar) {
        Calendar calendar = (Calendar) bindVariable;
        Timestamp date = new Timestamp(calendar.getTime().getTime());
        ps.setTimestamp(position, date);
        try {
            sqlSentence.append(field).append("=").append(getStringDate(date));
        } catch (Exception e) {
        }
        return sqlSentence.toString();
    }
    if (bindVariable instanceof byte[]) {
        byte[] byteArray = (byte[]) (byte[]) bindVariable;
        ps.setBytes(position, byteArray);
        sqlSentence.append(field).append("=").append(((byte[]) (byte[]) bindVariable).toString());
        return sqlSentence.toString();
    }
    if (bindVariable instanceof Long) {
        ps.setLong(position, ((Long) bindVariable).longValue());
        sqlSentence.append(field).append("=").append(bindVariable);
        return sqlSentence.toString();
    }
    if (bindVariable instanceof Double) {
        ps.setDouble(position, ((Double) bindVariable).doubleValue());
        sqlSentence.append(field).append("=").append(bindVariable);
        return sqlSentence.toString();
    }
    if (bindVariable instanceof Boolean) {
        ps.setBoolean(position, ((Boolean) bindVariable).booleanValue());
        sqlSentence.append(field).append("=").append(bindVariable);
        return sqlSentence.toString();
    } else {
        return sqlSentence.toString();
    }
}
