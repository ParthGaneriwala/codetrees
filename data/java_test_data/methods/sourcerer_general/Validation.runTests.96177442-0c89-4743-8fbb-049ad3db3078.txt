public void runTests() {
    if (!ucm.isEmpty()) {
        long start = System.nanoTime();
        // keeps count of number of tests ran
        int testsRan = 0;
        // keeps count of errors found
        int totalErrors = 0;
        // run Unique Labels test
        TestUniqueLabels labelsTest = new TestUniqueLabels(ucm);
        if (labelsTest.test()) {
            // update errors list
            for (String error : labelsTest.getErrors()) {
                gui.addNewError("Uniqueness: " + error);
                totalErrors++;
            }
        }
        testsRan++;
        // run Start and End Points: the path must have at least 1 start and 1 end point
        TestStartEndPoints startEndPts = new TestStartEndPoints(ucm);
        if (startEndPts.test()) {
            for (String error : startEndPts.getErrors()) {
                // update errors list
                gui.addNewError("Start / End Point: " + error);
                totalErrors++;
            }
        }
        testsRan++;
        // run Responsibility Points test
        TestResponsibilities testResps = new TestResponsibilities(ucm);
        if (testResps.test()) {
            // update errors list
            for (String error : testResps.getErrors()) {
                gui.addNewError("Responsibilities: " + error);
                totalErrors++;
            }
        }
        testsRan++;
        long end = System.nanoTime();
        long elapsedTime = end - start;
        // calculate time taken to process
        double seconds = (double) elapsedTime / 1000000000.0;
        // update statistics
        gui.setTimeTaken(seconds);
        gui.setErrorsNum(totalErrors);
        gui.setTestsNum(testsRan);
        // display message if no errors were found
        if (totalErrors == 0) {
            JOptionPane.showMessageDialog(null, "No errors were found.");
        }
    }
}
