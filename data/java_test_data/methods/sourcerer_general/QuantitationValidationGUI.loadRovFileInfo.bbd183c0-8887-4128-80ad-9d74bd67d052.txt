private void loadRovFileInfo() {
    // only when its in distiller mode
    // remove everything first
    // remove everything from the tree
    iRovFileTreeNod.removeAllChildren();
    // remove everything from the jpanRatioInRovTab panel
    jpanRatioInRovTab.removeAll();
    jpanRatioInRovTab.updateUI();
    // 1. Find the rov files
    // select the second tab
    tabbedPane.setSelectedIndex(1);
    // create a vector with all the RatioGroups from the selected proteins
    iSelectedRatioGroups.removeAllElements();
    for (int i = 0; i < iQuantitativeValidationSingelton.getSelectedProteins().size(); i++) {
        QuantitativeProtein lProtein = iQuantitativeValidationSingelton.getSelectedProteins().get(i);
        // get the ratio groups linked to this protein
        Vector<RatioGroup> lRatioGroups = lProtein.getRatioGroups();
        for (int j = 0; j < lRatioGroups.size(); j++) {
            RatioGroup lRatioGroup = lRatioGroups.get(j);
            // check if it's already in the vector
            boolean found = false;
            for (int k = 0; k < iSelectedRatioGroups.size(); k++) {
                if (iSelectedRatioGroups.get(k).equals(lRatioGroup)) {
                    found = true;
                }
            }
            if (!found) {
                if (chbShowOnlyNonValid.isSelected()) {
                    // check if a ratio group linked to this rov file has a ratio that is not valid
                    boolean nonValidFound = false;
                    for (int l = 0; l < lRatioGroup.getNumberOfRatios(); l++) {
                        Ratio lRatio = (Ratio) lRatioGroup.getRatio(l);
                        if (!lRatio.getValid()) {
                            nonValidFound = true;
                        }
                    }
                    if (nonValidFound) {
                        // add it
                        iSelectedRatioGroups.add(lRatioGroups.get(j));
                    }
                } else {
                    // add it
                    iSelectedRatioGroups.add(lRatioGroups.get(j));
                }
            }
        }
    }
    // create a vector with rov file titles
    iRovFiles.removeAllElements();
    // try to find to rov files used in the selected DistillerRatioGroups
    for (int i = 0; i < iSelectedRatioGroups.size(); i++) {
        RatioGroup lRatioGroup = iSelectedRatioGroups.get(i);
        // get the rov file name from the ratiogroup
        String lRovFileName = (String) lRatioGroup.getParentCollection().getMetaData(QuantitationMetaType.FILENAME);
        // check if it's a new filename
        boolean found = false;
        for (int j = 0; j < iRovFiles.size(); j++) {
            if (iRovFiles.get(j).equalsIgnoreCase(lRovFileName)) {
                found = true;
            }
        }
        if (!found) {
            // it's a new rov file name
            iRovFiles.add(lRovFileName);
        }
    }
    // check if we found some rov files
    if (iRovFiles.size() == 0) {
        // nothing rov file found
        // tell this to the user
        JOptionPane.showMessageDialog(this, "No rov files could be found for " + iQuantitativeValidationSingelton.getSelectedProteins().size() + " selected proteins!", "WARNING", JOptionPane.WARNING_MESSAGE);
        iRovFileHits.removeAllElements();
        treeRovFiles.updateUI();
        jpanRatioInRovTab.removeAll();
        return;
    }
    for (int i = 0; i < iRovFiles.size(); i++) {
        DefaultMutableTreeNode rovFile = new DefaultMutableTreeNode(iRovFiles.get(i));
        iRovFileTreeNod.add(rovFile);
        // 2. find hits linked to this rov file
        // create a vector with the hits
        iRovFileHits.removeAllElements();
        // try to find to rov files used in the selected DistillerRatioGroups
        for (int j = 0; j < iSelectedRatioGroups.size(); j++) {
            DistillerRatioGroup lRatioGroup = (DistillerRatioGroup) iSelectedRatioGroups.get(j);
            // get the rov file name from the ratiogroup
            String lRovFileName = (String) lRatioGroup.getParentCollection().getMetaData(QuantitationMetaType.FILENAME);
            if (iRovFiles.get(i).equalsIgnoreCase(lRovFileName)) {
                // this ratio group belongs to this rov file
                int lHit = lRatioGroup.getReferenceOfParentHit();
                // check if it's a new hit
                boolean lOldHit = false;
                for (int k = 0; k < iRovFileHits.size(); k++) {
                    if (iRovFileHits.get(k) == lHit) {
                        lOldHit = true;
                    }
                }
                if (!lOldHit) {
                    // it's a new hit
                    if (chbShowOnlyNonValid.isSelected()) {
                        // check if one of the ratio groups linked to this hit has a ratio that is not valid
                        boolean nonValidFound = false;
                        for (int k = 0; k < lRatioGroup.getNumberOfRatios(); k++) {
                            DistillerRatio lRatio = (DistillerRatio) lRatioGroup.getRatio(k);
                            if (!lRatio.getValid()) {
                                nonValidFound = true;
                            }
                        }
                        if (nonValidFound) {
                            // add it
                            iRovFileHits.add(lHit);
                        }
                    } else {
                        // add it
                        iRovFileHits.add(lHit);
                    }
                }
            }
        }
        for (int j = 0; j < iRovFileHits.size(); j++) {
            // 3. find the ratiogroups linked to this hit
            // add the hit to the rov file
            DefaultMutableTreeNode hit = new DefaultMutableTreeNode(iRovFileHits.get(j));
            rovFile.add(hit);
            // create a vector with the different ratiogroups linked to this hit
            iHitRatioGroups.removeAllElements();
            // try to find to rov files used in the selected DistillerRatioGroups
            for (int k = 0; k < iSelectedRatioGroups.size(); k++) {
                DistillerRatioGroup lRatioGroup = (DistillerRatioGroup) iSelectedRatioGroups.get(k);
                if (lRatioGroup.getReferenceOfParentHit() == iRovFileHits.get(j)) {
                    // this ratio group belongs to this hit
                    iHitRatioGroups.add(lRatioGroup);
                }
            }
            for (int k = 0; k < iHitRatioGroups.size(); k++) {
                DefaultMutableTreeNode ratioGroup = new DefaultMutableTreeNode(iHitRatioGroups.get(k));
                hit.add(ratioGroup);
            }
        }
    }
    this.treeRovFiles.updateUI();
}
