public ActionForward CoordinacionI(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
    // Salidas
    final String SALIDA_0 = "coordinacion";
    String salida = SALIDA_0;
    Session s = HibernateUtil.getSessionFactory().getCurrentSession();
    Transaction tr = s.beginTransaction();
    try {
        String id = request.getParameter("idCoordinacion");
        Long idCoordinacion = (id == null) ? (Long) request.getSession().getAttribute("idCoordinacion") : new Long(id);
        HttpSession sess = request.getSession();
        FCoordinacion fFCoordinacion = (FCoordinacion) sess.getAttribute("FCoordinacion");
        if (fFCoordinacion == null) {
            fFCoordinacion = new FCoordinacion();
            sess.setAttribute("FCoordinacion", fFCoordinacion);
        } else {
            fFCoordinacion.reset(mapping, request);
        }
        Coordinacion coordinacion = (Coordinacion) s.load(Coordinacion.class, idCoordinacion);
        fFCoordinacion.setIdCoordinacion(coordinacion.getIdCoordinacion());
        fFCoordinacion.setNombre(coordinacion.getNombre());
        fFCoordinacion.setDireccion(coordinacion.getDireccion());
        fFCoordinacion.setTelefono(coordinacion.getTelefono());
        Hibernate.initialize(coordinacion.getUsuarios());
        request.setAttribute("L_Usuario", coordinacion.getUsuarios());
        Hibernate.initialize(coordinacion.getPlanesDeEstudio());
        request.setAttribute("L_PlanDeEstudios", coordinacion.getPlanesDeEstudio());
        request.getSession().setAttribute("idCoordinacion", idCoordinacion);
        tr.commit();
    } catch (Exception ex) {
        tr.rollback();
        throw ex;
    }
    return mapping.findForward(salida);
}
