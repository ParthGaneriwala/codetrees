private Expression readTerm() throws HsqlException {
    Expression r = null;
    switch(iToken) {
        case Expression.COLUMN:
            {
                r = readColumnExpression();
                break;
            }
        case Expression.NEGATE:
            {
                int type = iToken;
                read();
                r = new Expression(type, readTerm(), null);
                Trace.check(!r.getArg().isParam(), Trace.Expression_resolveTypes1);
                break;
            }
        case Expression.PLUS:
            {
                read();
                r = readTerm();
                Trace.check(!r.isParam(), Trace.UNRESOLVED_PARAMETER_TYPE, Trace.getMessage(Trace.Expression_resolveTypes1));
                break;
            }
        case Expression.OPEN:
            {
                read();
                r = readOr();
                if (iToken != Expression.CLOSE) {
                    throw Trace.error(Trace.UNEXPECTED_TOKEN, sToken);
                }
                read();
                break;
            }
        case Expression.VALUE:
            {
                r = new Expression(iType, oData);
                read();
                break;
            }
        case Expression.PARAM:
            {
                r = new Expression(Types.NULL, null, true);
                parameters.add(r);
                read();
                break;
            }
        case Expression.SELECT:
            {
                SubQuery sq = parseSubquery(0, null, false, Expression.SELECT);
                r = new Expression(sq);
                read();
                break;
            }
        case Expression.ANY:
        case Expression.ALL:
            {
                r = parseAllAnyPredicate();
                // read();
                break;
            }
        case Expression.MULTIPLY:
            {
                r = new Expression(sSchema, sTable, (String) null);
                read();
                break;
            }
        case Expression.CASEWHEN:
            return readCaseWhenExpression();
        case Expression.CASE:
            return readCaseExpression();
        case Expression.NULLIF:
            return readNullIfExpression();
        case Expression.COALESCE:
        case Expression.IFNULL:
            return readCoalesceExpression();
        case Expression.SEQUENCE:
            return readSequenceExpression();
        case Expression.CAST:
        case Expression.CONVERT:
            return readCastExpression();
        case Expression.EXTRACT:
            return readExtractExpression();
        case Expression.TRIM:
            return readTrimExpression();
        case Expression.POSITION:
            return readPositionExpression();
        case Expression.SUBSTRING:
            return readSubstringExpression();
        default:
            if (Expression.isAggregate(iToken)) {
                return readAggregate();
            } else {
                throw Trace.error(Trace.UNEXPECTED_TOKEN, sToken);
            }
    }
    return r;
}
