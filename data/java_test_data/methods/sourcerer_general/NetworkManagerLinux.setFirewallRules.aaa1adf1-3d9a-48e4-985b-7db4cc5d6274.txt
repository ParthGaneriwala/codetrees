private void setFirewallRules() {
    this.firewallRules = new ArrayList();
    if (OSValidator.isUnix() && this.checkRoot()) {
        List response = new ArrayList();
        response = Cmd.executeCommand(this.iptablesSavePath);
        for (Object line : response) {
            try {
                if (((String) line).charAt(0) == '-') {
                    FirewallRule rule = new FirewallRule();
                    int port = -1;
                    IPAddress srcAddress = new IPAddress("0.0.0.0");
                    IPAddress dstAddress = new IPAddress("0.0.0.0");
                    StringTokenizer commandArgs = new StringTokenizer(((String) line));
                    while (commandArgs.hasMoreTokens()) {
                        String temp = new String(commandArgs.nextToken());
                        if (temp.equals("-A")) {
                            rule.setChain(FlowType.valueOf(commandArgs.nextToken()));
                        } else if (temp.equals("-s")) {
                            srcAddress = new IPAddress(commandArgs.nextToken());
                        } else if (temp.equals("-d")) {
                            dstAddress = new IPAddress(commandArgs.nextToken());
                        } else if (temp.equals("-i")) {
                            rule.setAdapter(commandArgs.nextToken());
                        } else if (temp.equals("-p")) {
                            rule.setProtocol(commandArgs.nextToken());
                        } else if (temp.equals("--dport")) {
                            port = Integer.parseInt(commandArgs.nextToken());
                        } else if (temp.equals("-j")) {
                            rule.setPolicy(Policy.valueOf(commandArgs.nextToken()));
                        }
                    }
                    rule.setSrc(new Endpoint(srcAddress.getAddress(), -1));
                    rule.setDst(new Endpoint(dstAddress.getAddress(), port));
                    this.firewallRules.add(rule);
                }
            } catch (IllegalArgumentException ex) {
                logger.error("Firewall rule mismatch: " + line + ex.toString());
            }
        }
    }
}
