private void createJar(String fileName, String sourceDir, String mainClass, List<File> userLibs, boolean includeSource, boolean includePkgFiles) {
    // Construct classpath with used library jars
    String classpath = "";
    // add jar files from +libs to classpath
    List<URL> plusLibs = frame.getProject().getPlusLibsContent();
    List<File> plusLibAsFiles = new ArrayList<File>();
    for (Iterator<URL> it = plusLibs.iterator(); it.hasNext(); ) {
        URL url = it.next();
        try {
            File file = new File(new URI(url.toString()));
            plusLibAsFiles.add(file);
            classpath += " " + file.getName();
        } catch (URISyntaxException urie) {
        // nothing at the moment
        }
    }
    // add jar files from userlibs to classpath
    for (Iterator<File> it = userLibs.iterator(); it.hasNext(); ) {
        classpath += " " + it.next().getName();
    }
    File jarFile = null;
    File parent = null;
    if (classpath.length() == 0) {
        // if we don't have library jars, just create a single jar file
        if (!fileName.endsWith(".jar"))
            fileName = fileName + ".jar";
        jarFile = new File(fileName);
        if (jarFile.exists()) {
            if (DialogManager.askQuestion(frame, "error-jar-exists") != 0)
                return;
        }
    } else {
        // and all library jar files in it
        if (fileName.endsWith(".jar"))
            fileName = fileName.substring(0, fileName.length() - 4);
        parent = new File(fileName);
        if (parent.exists()) {
            if (DialogManager.askQuestion(frame, "error-jar-exists") != 0)
                return;
        }
        parent.mkdir();
        jarFile = new File(parent, parent.getName() + ".jar");
    }
    OutputStream oStream = null;
    JarOutputStream jStream = null;
    try {
        // create manifest
        Manifest manifest = new Manifest();
        Attributes attr = manifest.getMainAttributes();
        attr.put(Attributes.Name.MANIFEST_VERSION, "1.0");
        attr.put(Attributes.Name.MAIN_CLASS, mainClass);
        attr.put(Attributes.Name.CLASS_PATH, classpath);
        // create jar file
        oStream = new FileOutputStream(jarFile);
        jStream = new JarOutputStream(oStream, manifest);
        writeDirToJar(new File(sourceDir), "", jStream, includeSource, includePkgFiles, jarFile.getCanonicalFile());
        if (parent != null) {
            copyLibsToJar(plusLibAsFiles, parent);
            copyLibsToJar(userLibs, parent);
        }
        frame.setStatus(Config.getString("pkgmgr.exported.jar"));
    } catch (IOException exc) {
        DialogManager.showError(frame, "error-writing-jar");
        Debug.reportError("problen writing jar file: " + exc);
    } finally {
        try {
            if (jStream != null)
                jStream.close();
        } catch (IOException e) {
        }
    }
}
