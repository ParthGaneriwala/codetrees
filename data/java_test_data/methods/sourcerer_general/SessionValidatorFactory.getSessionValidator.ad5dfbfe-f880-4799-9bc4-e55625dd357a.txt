public ISessionValidator getSessionValidator(ServletContext context, HttpServletRequest request) {
    // Retrieve prefs to use global connection info
    ApplicationPrefs prefs = (ApplicationPrefs) context.getAttribute("applicationPrefs");
    // Connection info
    ConnectionElement ce = new ConnectionElement();
    ce.setDriver(prefs.get("SITE.DRIVER"));
    ce.setUrl(prefs.get("SITE.URL"));
    ce.setUsername(prefs.get("SITE.USER"));
    ce.setPassword(prefs.get("SITE.PASSWORD"));
    ConnectionPool sqlDriver = (ConnectionPool) context.getAttribute("ConnectionPool");
    // Determine session validator class to use, or default
    Connection db = null;
    String className = null;
    try {
        String loginMode = ((ApplicationPrefs) context.getAttribute("applicationPrefs")).get("LOGIN.MODE");
        LOG.debug("Seeking Session Authenticator for Mode: " + loginMode);
        // Get connection
        db = sqlDriver.getConnection(ce);
        // Get specified authentication class
        AuthenticationClassesLookupList aclList = new AuthenticationClassesLookupList();
        aclList.setLoginMode(loginMode);
        aclList.buildList(db);
        if (aclList.size() == 0) {
            className = DEFAULT_SESSION_VALIDATOR;
        } else {
            AuthenticationClassesLookup acl = aclList.get(0);
            className = acl.getLoginAuthenticator();
        }
    } catch (Exception e) {
        e.printStackTrace();
    } finally {
        if (db != null) {
            sqlDriver.free(db);
        }
    }
    // Instantiate the authenticator class
    try {
        if (className == null) {
            className = DEFAULT_SESSION_VALIDATOR;
        }
        Class clazz = Class.forName(className);
        return (ISessionValidator) clazz.newInstance();
    } catch (Exception e) {
        e.printStackTrace();
        return null;
    }
}
