@Override
protected Result evaluate(final LogicContext context, final Integer patientId, final Map<String, Object> parameters) throws LogicException {
    // just make sure that this is the patient from the database
    Patient patient = Context.getPatientService().getPatient(patientId);
    Date birthdate = patient.getBirthdate();
    if (log.isDebugEnabled())
        log.debug("Patient: " + patient.getPatientId() + ", birthdate: " + birthdate);
    Result ageResult = new Result();
    if (birthdate != null) {
        Calendar todayCalendar = Calendar.getInstance();
        Calendar birthCalendar = Calendar.getInstance();
        birthCalendar.setTime(birthdate);
        int birthYear = birthCalendar.get(Calendar.YEAR);
        int todayYear = todayCalendar.get(Calendar.YEAR);
        int ageInYear = todayYear - birthYear;
        int birthMonth = birthCalendar.get(Calendar.MONTH);
        int todayMonth = todayCalendar.get(Calendar.MONTH);
        int ageInMonth = todayMonth - birthMonth;
        if (ageInMonth < 0) {
            // birth month is bigger, the decrease the year
            ageInYear--;
            ageInMonth = 12 - birthMonth + todayMonth;
        }
        int birthDay = birthCalendar.get(Calendar.DATE);
        int todayDay = todayCalendar.get(Calendar.DATE);
        int ageInDay = todayDay - birthDay;
        if (ageInDay < 0) {
            ageInMonth--;
            birthCalendar.add(Calendar.MONTH, -1);
            ageInDay = birthCalendar.getActualMaximum(Calendar.DATE) - birthDay + todayDay;
            if (ageInDay > birthCalendar.getActualMaximum(Calendar.DATE) / 2)
                ageInMonth++;
        }
        if (ageInYear != 0)
            ageResult.add(new Result(ageInYear + " Years"));
        if (ageInMonth != 0)
            ageResult.add(new Result(ageInMonth + " Months"));
    }
    return ageResult;
}
