private void guardedRun() throws InterruptedException {
    mEglHelper = new EglHelper();
    /*
             * Specify a configuration for our opengl session
             * and grab the first configuration that matches is
             */
    int[] configSpec = mRenderer.getConfigSpec();
    mEglHelper.start(configSpec);
    GL10 gl = null;
    boolean tellRendererSurfaceCreated = true;
    boolean tellRendererSurfaceChanged = true;
    /*
             * This is our main activity thread's loop, we go until
             * asked to quit.
             */
    while (!mDone) {
        /*
                 *  Update the asynchronous state (window size)
                 */
        int w, h;
        boolean changed;
        boolean needStart = false;
        synchronized (this) {
            Runnable r;
            while ((r = getEvent()) != null) {
                r.run();
            }
            if (mPaused) {
                mEglHelper.finish();
                needStart = true;
            }
            if (needToWait()) {
                while (needToWait()) {
                    wait();
                }
            }
            if (mDone) {
                break;
            }
            changed = mSizeChanged;
            w = mWidth;
            h = mHeight;
            mSizeChanged = false;
        }
        if (needStart) {
            mEglHelper.start(configSpec);
            tellRendererSurfaceCreated = true;
            changed = true;
        }
        if (changed) {
            gl = (GL10) mEglHelper.createSurface(mHolder);
            tellRendererSurfaceChanged = true;
        }
        if (tellRendererSurfaceCreated) {
            mRenderer.surfaceCreated(gl);
            tellRendererSurfaceCreated = false;
        }
        if (tellRendererSurfaceChanged) {
            mRenderer.sizeChanged(gl, w, h);
            tellRendererSurfaceChanged = false;
        }
        if ((w > 0) && (h > 0)) {
            /* draw a frame here */
            mRenderer.drawFrame(gl);
            /*
                     * Once we're done with GL, we need to call swapBuffers()
                     * to instruct the system to display the rendered frame
                     */
            mEglHelper.swap();
        }
    }
    /*
             * clean-up everything...
             */
    mEglHelper.finish();
}
