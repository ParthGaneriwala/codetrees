int ComponentCheck(ArrayList<IChild> Inlist, ArrayList<IChild> Outlist) {
    boolean bResult = false;
    int iResult = FAILURE;
    // if both the lists are non empty
    if (!(Inlist.isEmpty()) && !(Outlist.isEmpty())) {
        Iterator InputListItr = Inlist.iterator();
        int iInputIndex = 0;
        while (InputListItr.hasNext()) {
            int size = Inlist.size();
            if (iInputIndex >= size)
                break;
            ITagComponent childComponent = (ITagComponent) InputListItr.next();
            iInputIndex++;
            String InelementName = childComponent.getMaterial();
            // Empty Element
            if (InelementName.equals("") || childComponent.isInitial()) {
                break;
            }
            String qty = childComponent.getQuantity();
            float InQty = 0.0f;
            String InUnits = "";
            InUnits = childComponent.getUnits();
            if (!(qty.equals("?") || (qty.equals("")))) {
                // if the units are in % then get the actual value
                if (InUnits.equals("%")) {
                    OverallTagComponent tmpParent = (OverallTagComponent) ((IModelElement) childComponent.getParent().getParent().getChildren().get(0));
                    String ParentQty = tmpParent.getQuantity();
                    float iParentQty = 0.0f;
                    if (!(ParentQty.isEmpty() || ParentQty.equals("?"))) {
                        iParentQty = Float.valueOf(ParentQty);
                        InQty = Float.valueOf(qty);
                        InQty = (iParentQty * InQty) / 100;
                    }
                } else {
                    InQty = Float.valueOf(qty);
                }
            }
            Iterator InputListItr2 = Inlist.iterator();
            int iInIndex2 = 0;
            // Make the second iterator point to the same element of the first iterator
            while (InputListItr2.hasNext() && iInIndex2 < iInputIndex) {
                InputListItr2.next();
                iInIndex2++;
            }
            // remove al the duplicate occurences of the element from the input list.
            while (InputListItr2.hasNext()) {
                // Second iterator gets the next item.
                ITagComponent childComponent2 = (ITagComponent) InputListItr2.next();
                String InelementName2 = childComponent2.getMaterial();
                if (InelementName2.equalsIgnoreCase(InelementName)) {
                    qty = childComponent2.getQuantity();
                    if (!(qty.equals("?") || (qty.equals("")))) {
                        InUnits = childComponent2.getUnits();
                        // if the units are in % then get the actual value
                        if (InUnits.equals("%")) {
                            OverallTagComponent tmpParent = (OverallTagComponent) ((IModelElement) childComponent2.getParent().getParent().getChildren().get(0));
                            String ParentQty = tmpParent.getQuantity();
                            float iParentQty = 0.0f;
                            if (!(ParentQty.isEmpty() || ParentQty.equals("?"))) {
                                iParentQty = Float.valueOf(ParentQty);
                                float InQty2 = Float.valueOf(qty);
                                // Add the quantity to the earlier value
                                InQty += (iParentQty * InQty2) / 100;
                            }
                        } else {
                            // Add the quantity to the earlier value
                            InQty += Float.valueOf(qty);
                        }
                    }
                    // Remove the second occurence of the same element from the original input list
                    Inlist.remove(iInIndex2);
                    // reintialize the iterator and bring it back to the original position
                    InputListItr = Inlist.iterator();
                    for (int i = 0; i < iInputIndex; i++) {
                        InputListItr.next();
                    }
                    InputListItr2 = Inlist.iterator();
                    iInIndex2 = iInputIndex;
                    for (int i = 0; i < iInputIndex; i++) {
                        InputListItr2.next();
                    }
                }
                iInIndex2++;
            }
            Iterator OutputListItr = Outlist.iterator();
            float iTotalOutQty = 0.0f;
            boolean bOutElementIsPresent = false;
            while (OutputListItr.hasNext()) {
                ITagComponent OutchildComponent = (ITagComponent) OutputListItr.next();
                String OutelementName = OutchildComponent.getMaterial();
                String OutUnits = OutchildComponent.getUnits();
                // Units check can be removed if we convert warning to error in component iterating rule.
                if (// && (OutUnits.equals(InUnits)|| OutUnits.equals("%"))
                OutelementName.equals(InelementName)) {
                    // if(!InUnits.equals("%") && !(OutUnits.equals(InUnits)))
                    if (!(InUnits.equals("%") || OutUnits.equals("%")) && !(InUnits.equals(OutUnits))) {
                        return UNITS_NOT_SAME;
                    }
                    String Outqty = OutchildComponent.getQuantity();
                    if (!(Outqty.equals("?") || (Outqty.equals("")))) {
                        if (OutUnits.equals("%")) {
                            OverallTagComponent tmpParent = (OverallTagComponent) ((IModelElement) OutchildComponent.getParent().getParent().getChildren().get(0));
                            String ParentQty = tmpParent.getQuantity();
                            float iParentQty = 0.0f;
                            if (!(ParentQty.isEmpty() || ParentQty.equals("?"))) {
                                iParentQty = Float.valueOf(ParentQty);
                                float InQty2 = Float.valueOf(Outqty);
                                // Add the quantity to the earlier value
                                iTotalOutQty += (iParentQty * InQty2) / 100;
                            } else {
                                bOutElementIsPresent = true;
                            }
                        } else {
                            iTotalOutQty += Float.valueOf(Outqty);
                        }
                    } else {
                        bOutElementIsPresent = true;
                    }
                }
            }
            // OR if element is present but qty is unknown
            if (iTotalOutQty == InQty || InQty == 0.0 || bOutElementIsPresent) {
                // bResult = true;
                iResult = SUCCESS;
            } else {
                // PA : We can prepare the string for elements not present in the out list here.
                // bResult = false;
                iResult = QTY_NOT_SAME;
                break;
            }
        }
    }
    return iResult;
}
