public <T, C> T bind(T model, IBinding<C> propertyBinding, C comp) {
    log.debug("[bind](0) model='" + model + "' binding='" + propertyBinding + "' comp='" + comp + "'");
    T re;
    if (model == null) {
        re = null;
    } else if (model instanceof Enum<?>) {
        // Do not wrap Enums as they cannot be changed.
        re = model;
    } else {
        String modelProperty = propertyBinding.getModelProperty();
        IModelChangeListener modelChangeListener;
        List<IModelChangeListener> modelChangeListeners;
        CollectionRemovingFactory<IModelChangeListener> removingFactory = new CollectionRemovingFactory<IModelChangeListener>();
        if (CobeanSpringUtil.isWrapped(model)) {
            modelChangeListeners = CobeanSpringUtils.getModelChangeListener(model);
            modelChangeListener = propertyBinding.createModelChangeListener(createBeanProperty(model, modelProperty), comp, removingFactory);
            re = model;
        } else {
            modelChangeListeners = new ArrayList<IModelChangeListener>();
            re = modelWrapper.wrapModel(model, modelChangeListeners);
            log.debug("[bind](1) wrapped model '" + model + "'");
            modelChangeListener = propertyBinding.createModelChangeListener(createBeanProperty(re, modelProperty), comp, removingFactory);
        }
        modelChangeListener.updateComponent();
        removingFactory.setColl(modelChangeListeners);
        removingFactory.setObj(modelChangeListener);
        modelChangeListeners.add(modelChangeListener);
        log.debug("[bind](2) added new model change listener '" + modelChangeListener + "' to model '" + model + "' listeners=" + modelChangeListeners);
    }
    return re;
}
