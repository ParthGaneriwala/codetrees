public void next() {
    if (!hasMore()) {
        // already at the end
        nind = 0;
        return;
    }
    // the index of the next position
    int index0 = idx != 0 ? ((ind[0] + (nind > MAXBITS ? nind : MAXBITS)) / MAXBITS) * MAXBITS : 0;
    // reset the index count
    nind = 0;
    while (idx < vec.size()) {
        // get the current word.
        int v = currentWord();
        if (isOneFill(v)) {
            // 1-fill
            // get the number of indexes.
            nind = (v & MAXCNT) * MAXBITS;
            ind[1] = index0 + nind;
            ind[0] = index0;
            ++idx;
            return;
        } else if (isZeroFill(v)) {
            // 0-fill
            // don't return, just skip to the next word.
            index0 += (v & MAXCNT) * MAXBITS;
            idx++;
        } else if (v > 0) {
            // non-zero literal word
            if (v < ALLONES) {
                // a mixture of 0 and 1
                nind = fillOnes(v, ind);
                // add the base index.
                for (int i = 0; i < nind; i++) {
                    ind[i] += index0;
                }
            } else {
                // all 1s
                // ok, we have 31 1 bits.
                nind = MAXBITS;
                ind[0] = index0;
                ind[1] = index0 + nind;
            }
            // update the next idx.
            ++idx;
            return;
        } else {
            // zero word
            index0 += MAXBITS;
            ++idx;
        }
    }
    // deal with the active word
    if (active.nbits > 0 && active.val > 0) {
        // a non-zero active word
        // similar to the v > 0 case above.
        int j = (active.val << (MAXBITS - active.nbits));
        nind = fillOnes(j, ind);
        for (int i = 0; i < nind; i++) {
            ind[i] += index0;
        }
    }
    // if you get here then you are done.
    activeFilled = true;
    // set the index accordingly.
    idx = vec.size() + 1;
    return;
}
