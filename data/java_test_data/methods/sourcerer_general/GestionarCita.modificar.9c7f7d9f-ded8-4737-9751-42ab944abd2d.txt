public ActionForward modificar(ActionMapping sMapping, ActionForm sForm, HttpServletRequest sRequest, HttpServletResponse sResponse) throws Exception {
    CitasForm formCitas = (CitasForm) sForm;
    // Obtenemos la cita
    Cita cita = formCitas.getCita();
    /* Codigo para la modificaci�n del archivo de la cita */
    // Borrar el archivo de la cita si se ha pedido en el formulario
    boolean peticionBorrado = formCitas.getPeticionBorrado();
    if (peticionBorrado) {
        // Obtenemos el archivo a modificar
        Archivo archivo = citaSvc.obtenerArchivo(formCitas.getIdCita());
        if (archivo != null) {
            String filePath = Constantes.RUTA_FICHEROS_CITAS + formCitas.getIdCita() + "/";
            String realPath = sRequest.getRealPath("/") + filePath;
            // Borramos el contenido del archivo
            File fileToDelete = new File(realPath, archivo.getNombre());
            fileToDelete.delete();
            // Eliminamos los datos del archivo
            citaSvc.eliminarArchivo(archivo);
        }
    }
    // Obtener el archivo de la cita del formulario
    FormFile formFile = formCitas.getFormFile();
    String fileName = formFile.getFileName();
    /* Codigo que elimina los caracteres Unicode del nombre del archivo */
    // Create the encoder and decoder for the character encoding
    Charset charset = Charset.forName("US-ASCII");
    CharsetDecoder decoder = charset.newDecoder();
    CharsetEncoder encoder = charset.newEncoder();
    // This line is the key to removing "unmappable" characters.
    encoder.onUnmappableCharacter(CodingErrorAction.IGNORE);
    // Convert a string to bytes in a ByteBuffer
    ByteBuffer bbuf = encoder.encode(CharBuffer.wrap(fileName));
    // Convert bytes in a ByteBuffer to a character ByteBuffer and then to a string.
    CharBuffer cbuf = decoder.decode(bbuf);
    fileName = cbuf.toString();
    // Obtenemos la ruta relativa del archivo y la ruta real, que es donde est� el servidor
    String filePath = Constantes.RUTA_FICHEROS_CITAS + cita.getIdCita() + "/";
    String realPath = sRequest.getRealPath("/") + filePath;
    // Obtenemos el contenido del archivo
    byte[] fileData = formFile.getFileData();
    // Se obtiene el archivo que hab�a antes de la modificacion
    Archivo archivoAnterior = citaSvc.obtenerArchivo(cita.getIdCita());
    // Escribir el contenido del archivo en una carpeta del servidor
    try {
        if (!fileName.equals("")) {
            // Crear el directorio donde se va a escribir si no existe
            File directorio = new File(realPath);
            directorio.mkdirs();
            // Se borra el fichero que se hubiese subido antes, si lo hab�a
            if (archivoAnterior != null) {
                File fileAnterior = new File(realPath, archivoAnterior.getNombre());
                fileAnterior.delete();
            }
            // Crear el directorio donde se va a escribir el contenido del archivo, si no existe
            File fileToCreate = new File(realPath, fileName);
            // Si el fichero no existe, se crea
            if (!fileToCreate.exists()) {
                FileOutputStream fileOutStream = new FileOutputStream(fileToCreate);
                fileOutStream.write(fileData);
                fileOutStream.flush();
                fileOutStream.close();
            }
        }
    } catch (Exception ex) {
        System.out.println(ex);
        return null;
    }
    formFile.destroy();
    // Modificar los datos del archivo
    if (!fileName.equals("")) {
        if (archivoAnterior != null) {
            // Si hab�a un archivo antes, se modifican sus datos
            archivoAnterior.setNombre(fileName);
            archivoAnterior.setRuta(filePath);
            archivoAnterior.setCita(cita.getIdCita());
            citaSvc.modificarArchivo(archivoAnterior);
        } else {
            // Si no hab�a un archivo antes, se inserta el archivo nuevo
            Archivo archivoNuevo = new Archivo();
            archivoNuevo.setNombre(fileName);
            archivoNuevo.setRuta(filePath);
            archivoNuevo.setCita(cita.getIdCita());
            citaSvc.insertarArchivo(archivoNuevo);
        }
    }
    /* Codigo para la modificacion de una cita */
    // Rellenamos la fecha
    SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyyhh:mm");
    Date dateInicio = sdf.parse(cita.getFechaInicioStr() + cita.getHoraInicioStr());
    Date dateFin = sdf.parse(cita.getFechaFinStr() + cita.getHoraFinStr());
    cita.getFechaInicio().setTime(dateInicio);
    cita.getFechaFin().setTime(dateFin);
    // Actualizamos la cita
    citaSvc.modificarCita(cita);
    // Reseteamos la cita en el formulario
    formCitas.setCita(new Cita());
    // Reseteamos el archivo en el formulario
    formCitas.setArchivo(new Archivo());
    /*Rellenamos el action actual*/
    CalendarioForm calForm = (CalendarioForm) sRequest.getSession().getAttribute("calendarioForm");
    calForm.setActionActual(Constantes.ACTION_MODIFICAR_CITA);
    sRequest.getSession().setAttribute("calendarioForm", calForm);
    return sMapping.findForward("listaCitasYActualizaCalen");
}
