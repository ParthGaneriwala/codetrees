@Override
public Element createXML(Document doc) {
    Element element = doc.createElement(XML_ELEMENT_NAME);
    // element.setAttribute(XML_ATTR_ORDER_NAME, Byte.toString(order));
    element.setAttribute(XML_ATTR_OVERT_ORDER_NAME, Byte.toString(overtOrder));
    element.setAttribute(XML_ATTR_HIDDEN_ORDER_NAME, Byte.toString(hiddenOrder));
    element.setAttribute(XML_ATTR_ID_NAME, id);
    /*
		if (decoder == null) {
			//element.appendChild(doc.importNode(getDecoderConfig(), true));
		} else {
			element.appendChild(getDecoder().createXML(doc));
		}
		*/
    {
        Element e;
        e = doc.createElement(XML_USE_COMPLEX_QUESTIONS_NAME);
        e.setTextContent(Boolean.toString(useComplexQuestions));
        element.appendChild(e);
        e = doc.createElement(XML_USE_HFT_QUESTIONS_NAME);
        e.setTextContent(Boolean.toString(useHFTQuestions));
        element.appendChild(e);
        e = doc.createElement(XML_MIN_TOTAL_COUNT_NAME);
        e.setTextContent(Long.toString(MIN_TOTAL_COUNT));
        element.appendChild(e);
        e = doc.createElement(XML_MIN_COST_DECREASE_NAME);
        e.setTextContent(Double.toString(MIN_COST_DECREASE));
        element.appendChild(e);
        e = doc.createElement(XML_MAX_CLUSTERS_NAME);
        e.setTextContent(Integer.toString(maxClusters));
        element.appendChild(e);
        e = doc.createElement(XML_OVERT_QUESTION_PENALTY_NAME);
        e.setTextContent(Double.toString(overtQuestionPenalty));
        element.appendChild(e);
        e = doc.createElement(XML_FORCE_HIDDEN_QUESTIONS_NAME);
        e.setTextContent(Integer.toString(forceHiddenQuestions));
        element.appendChild(e);
        e = doc.createElement(XML_PRUNING_THRESHOLD_NAME);
        e.setTextContent(Integer.toString(pruningThreshold));
        element.appendChild(e);
        if (contextVariableMetrics == null) {
            contextVariableMetrics = defaultContextVariableMetrics();
        }
        e = doc.createElement(XML_CONTEXT_VAR_METRICS_NAME);
        contextVariableMetrics.saveXML(e);
        element.appendChild(e);
        if (contextVariableStoppingRule == null) {
            contextVariableStoppingRule = defaultContextVariableStoppingRule();
        }
        e = doc.createElement(XML_CONTEXT_VAR_STOPPING_RULE_NAME);
        contextVariableStoppingRule.saveXML(e);
        element.appendChild(e);
        e = doc.createElement(XML_RANDOMNESS_NAME);
        e.setTextContent(Float.toString(randomness));
        element.appendChild(e);
    }
    if (historyTree != null) {
        saveHistoryTree();
    /*
			Element e = doc.createElement(XML_HISTORY_TREE_NAME);
			e.appendChild(historyTree.createXML(doc));
			element.appendChild(e);
			*/
    }
    return element;
}
