@SuppressWarnings("unchecked")
public ActionForward addCouponInManager(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse resqonse) {
    if (!isLoggedIn(request)) {
        return mapping.findForward(ForwardConstants.INDEX);
    }
    SessionContainer sessionContainer = getSessionContainer(request);
    Customer customer = sessionContainer.getCustomer();
    List<Coupon> coupons = couponService.findByCustomerId(customer.getId());
    HttpSession session = request.getSession();
    request.setAttribute("coupons", coupons);
    MembershipPoint point = sessionContainer.getCustomer().getMembershipPoint();
    request.setAttribute("point", point);
    String randomCode = (String) session.getAttribute("randomCode");
    ActionMessages errors = new ActionMessages();
    if (null == randomCode) {
        ActionMessage msg = new ActionMessage(MessageUtil.getMessage("register.page.not.input.random"), false);
        errors.add("emptycode", msg);
        saveMessages(request, errors);
        return mapping.getInputForward();
    }
    String reqRandom = request.getParameter("random");
    if (!randomCode.equals(reqRandom)) {
        ActionMessage msg = new ActionMessage(MessageUtil.getMessage("register.page.input.error.random"), false);
        errors.add("errorcode", msg);
        saveMessages(request, errors);
        return mapping.getInputForward();
    } else {
        DynaActionForm data = (DynaActionForm) form;
        String cardNo = (String) data.get("cardNo");
        String password = (String) data.get("password");
        CouponCard card = null;
        if (cardNo != null && "coochong".equals(cardNo.trim())) {
            // coochong卡促销
            List<Coupon> list = couponService.findByCustomerId(customer.getId());
            for (int i = 0; i < list.size(); i++) {
                Coupon c = list.get(i);
                if (c.getProduct().getId() == 1) {
                    if (!isCorrectCard(null, password, errors, request)) {
                        return mapping.getInputForward();
                    }
                }
            }
            CouponCard couponCard = new CouponCard();
            couponCard.setCardNo(1001);
            couponCard.setPassword("10001");
            couponCard.setCouponContent("优惠活动价9.9元");
            couponCard.setPrice(new Float(13.0));
            // 白杯
            Product product = productService.findById(1);
            couponCard.setProduct(product);
            couponCard.setQuantity(1);
            Calendar date = Calendar.getInstance();
            date.set(2011, 1, 1);
            couponCard.setExpirationDate(date.getTime());
            try {
                card = couponCardService.saveCouponCard(couponCard);
            } catch (ServiceException e) {
                e.printStackTrace();
            }
        } else {
            if (isEmptyCardNoOrPassword(Integer.parseInt(cardNo), password, errors, request)) {
                return mapping.getInputForward();
            }
            card = couponCardService.findByCardNo(Integer.parseInt(cardNo));
            if (!isCorrectCard(card, password, errors, request)) {
                return mapping.getInputForward();
            }
        }
        try {
            Coupon coupon = couponCardService.saveCoupon(card, customer);
            coupons.add(coupon);
        } catch (ServiceException e) {
            logger.error("优惠券已过期！", e);
            ActionMessage msg = new ActionMessage("优惠券已过期！", false);
            errors.add("errors", msg);
            saveMessages(request, errors);
        }
        return mapping.findForward(ForwardConstants.SUCCESS);
    }
}
