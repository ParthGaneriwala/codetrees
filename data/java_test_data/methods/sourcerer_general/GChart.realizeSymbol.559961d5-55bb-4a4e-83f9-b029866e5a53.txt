/*
       * Draws an approximate line from x,y to nextX, nextY, using an
       * appropriate series of vertical (for a > 45 degree slope) or (for a < 45
       * degree slope) horizontal line segments. If a GWT canvas is available
       * and if continuous fill (fillSpacing==0) was requested the
       * lineTo,stroke,etc. of the canvas Widget are instead used to draw the
       * line. <p>
       * 
       * The canvas part of this code assumes/requires that points on a curve
       * are rendered in the order that they appear on the point list (GChart
       * will assure this), and that on the first point on the curve
       * <tt>prevX</tt> and <tt>prevY</tt>, and on the last point <tt>nextX</tt>
       * and <tt>nextY</tt>, are undefined (Double.NaN)
       */
@Override
void realizeSymbol(PlotPanel pp, GraphicsRenderingPanel grp, AnnotationRenderingPanel arp, Symbol symbol, Annotation annotation, boolean onY2, boolean clipPlotArea, boolean clipDecoratedChart, double renderPaddingFactor, boolean drawMainSymbol, double x, double y, double prevX, double prevY, double nextX, double nextY) {
    if (// this point undefined (isNaN)
    (x != x) || (y != y))
        return;
    // else point itself is at least defined
    double spacing = symbol.getFillSpacing();
    int thickness = symbol.getFillThickness();
    GChartCanvasLite canvas = grp.getCanvas();
    if (0 == spacing && null != canvas && thickness > 0) {
        // when canvas is available and continuous fill requested,
        // BOX_CENTER and LINE work exactly the same way
        BOX_CENTER.realizeSymbol(pp, grp, arp, symbol, annotation, onY2, clipPlotArea, clipDecoratedChart, renderPaddingFactor, drawMainSymbol, x, y, prevX, prevY, nextX, nextY);
        return;
    }
    double xPx = pp.xToPixel(x);
    double yPx = pp.yToPixel(y, onY2);
    double nextXPx = pp.xToPixel(nextX);
    double nextYPx = pp.yToPixel(nextY, onY2);
    if (// next point defined
    nextX == nextX && nextY == nextY && // not a zero thickness connection
    thickness > 0 && (x != nextX || y != nextY)) {
        // Continuous fill not supported; 1px is reasonable approx.
        if (0 == spacing)
            spacing = 1;
        double deltaX = nextXPx - xPx;
        double deltaY = nextYPx - yPx;
        boolean dXIsShorter = deltaX * deltaX < deltaY * deltaY;
        /*
           * Increasing width by 1 adds half px on each edge
           * to heal the occasional roundoff-induced gap
           * 
           */
        final double EPS = 1;
        /*
           * TODO: the case in which the connecting line does not intersect the
           * plot area, and off-plot-area points are not being drawn is handled
           * very inefficiently, and not entirely correctly, by trying to draw
           * the entire line and excluding each segment as we attempt to draw
           * it.  Need to compute intersecting sub-line-segment and just draw
           * that instead, ignoring lines with no intersecting segments
           * completely. Can make a huge difference with lots of off-chart
           * points, such as a deliberately narrowed x axis range.
           * 
           */
        if (deltaX == 0) {
            // special-case of vertical line
            realizeOneImageOfSymbol(pp, grp, arp, symbol, null, onY2, clipPlotArea, clipDecoratedChart, renderPaddingFactor, xPx, 0.5 * (yPx + nextYPx), Double.NaN, Double.NaN, nextXPx, nextYPx, thickness, Math.abs(nextYPx - yPx) + EPS);
        } else if (deltaY == 0) {
            // special case of horizontal line
            realizeOneImageOfSymbol(pp, grp, arp, symbol, null, onY2, clipPlotArea, clipDecoratedChart, renderPaddingFactor, 0.5 * (xPx + nextXPx), yPx, Double.NaN, Double.NaN, nextXPx, nextYPx, Math.abs(nextXPx - xPx) + EPS, thickness);
        } else if (dXIsShorter) {
            // series of vertical segments
            double xMin = (xPx < nextXPx) ? xPx : nextXPx;
            double xMax = (xPx > nextXPx) ? xPx : nextXPx;
            double yAtXMin = (xPx < nextXPx) ? yPx : nextYPx;
            double yAtXMax = (xPx > nextXPx) ? yPx : nextYPx;
            double xiPrev = xMin;
            double yiPrev = yAtXMin;
            double xi = xiPrev;
            double yi = yiPrev;
            // round up to err on side of providing more detail
            int N = (int) Math.ceil((xMax - xMin) / spacing);
            double dy = Math.abs((yAtXMax - yAtXMin) / N) + EPS;
            for (int i = 1; i <= N; i++) {
                xi = xMin + i * (xMax - xMin) / N;
                yi = yAtXMin + i * (yAtXMax - yAtXMin) / N;
                realizeOneImageOfSymbol(pp, grp, arp, symbol, null, onY2, clipPlotArea, clipDecoratedChart, renderPaddingFactor, 0.5 * (xiPrev + xi), 0.5 * (yiPrev + yi), Double.NaN, Double.NaN, nextXPx, nextYPx, thickness, dy);
                xiPrev = xi;
                yiPrev = yi;
            }
        } else {
            // dY is shorter. Series of horizontal segments
            double yMin = (yPx < nextYPx) ? yPx : nextYPx;
            double yMax = (yPx > nextYPx) ? yPx : nextYPx;
            double xAtYMin = (yPx < nextYPx) ? xPx : nextXPx;
            double xAtYMax = (yPx > nextYPx) ? xPx : nextXPx;
            double xiPrev = xAtYMin;
            double yiPrev = yMin;
            double xi = xiPrev;
            double yi = yiPrev;
            int N = (int) Math.ceil((yMax - yMin) / spacing);
            double dx = Math.abs((xAtYMax - xAtYMin) / N) + EPS;
            for (int i = 1; i <= N; i++) {
                yi = yMin + i * (yMax - yMin) / N;
                xi = xAtYMin + i * (xAtYMax - xAtYMin) / N;
                realizeOneImageOfSymbol(pp, grp, arp, symbol, null, onY2, clipPlotArea, clipDecoratedChart, renderPaddingFactor, 0.5 * (xiPrev + xi), 0.5 * (yiPrev + yi), Double.NaN, Double.NaN, nextXPx, nextYPx, dx, thickness);
                xiPrev = xi;
                yiPrev = yi;
            }
        }
    }
    // rendered last to put it on top of interpolated images
    if (drawMainSymbol) {
        double w = symbol.getWidth(pp);
        double h = symbol.getHeight(pp, onY2);
        realizeOneImageOfSymbol(pp, grp, arp, symbol, annotation, onY2, clipPlotArea, clipDecoratedChart, renderPaddingFactor, xPx, yPx, Double.NaN, Double.NaN, nextXPx, nextYPx, w, h);
    }
}
