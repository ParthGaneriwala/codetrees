private void writeAssemblyRefTable(byte[] text, int off, StreamTable st) {
    ArrayList<StreamTableRow> rows = st.getRows();
    StreamTableRow str;
    int i;
    int row_off = off;
    for (i = 0; i < rows.size(); i++) {
        str = rows.get(i);
        insertShort(text, row_off, (short) str.getAssemblyRefMajorVersion());
        insertShort(text, row_off + 2, (short) str.getAssemblyRefMinorVersion());
        insertShort(text, row_off + 4, (short) str.getAssemblyRefBuildNumber());
        insertShort(text, row_off + 6, (short) str.getAssemblyRefRevisionNumber());
        insertInt(text, row_off + 8, str.getAssemblyRefFlags());
        row_off += 12;
        if (parser.getBlobHeap().size() < 0xffff) {
            insertShort(text, row_off, (short) str.getAssemblyRefPublicKeyOrToken());
            row_off += 2;
        } else {
            insertInt(text, row_off, str.getAssemblyRefPublicKeyOrToken());
            row_off += 4;
        }
        if (parser.getStringsHeap().size() < 0xffff) {
            insertShort(text, row_off, (short) str.getAssemblyRefName());
            insertShort(text, row_off + 2, (short) str.getAssemblyRefCulture());
            row_off += 4;
        } else {
            insertInt(text, row_off, str.getAssemblyRefName());
            insertInt(text, row_off + 4, str.getAssemblyRefCulture());
            row_off += 8;
        }
        if (parser.getBlobHeap().size() < 0xffff) {
            insertShort(text, row_off, (short) str.getAssemblyRefHashValue());
            row_off += 2;
        } else {
            insertInt(text, row_off, str.getAssemblyRefHashValue());
            row_off += 4;
        }
    }
}
