// 
// This is a very expensive operation.  Need to find a way to optimize it
// later.
private void computeFirstSet() {
    for (int i = 0; i < m_nonTerminalCount; ++i) m_firstSetVal.put(m_maxTerminal + 1 + i, createTokenSet());
    boolean changed;
    do {
        changed = false;
        for (Production production : m_productions) {
            int A = production.getSymbol();
            TokenSet current = m_firstSetVal.get(A);
            TokenSet old = current.clone();
            for (int sym : production.getProduction()) {
                if (sym <= m_maxTerminal) {
                    // for a terminal, first (X) is {X}
                    current.addSymbol(sym);
                    break;
                }
                // for a non-terminal, do or operation
                TokenSet val = m_firstSetVal.get(sym);
                current.or(val);
                if (!val.hasEpsilon())
                    break;
            }
            if (production.size() == 0)
                current.setEpsilon(true);
            // determine if anything got changed
            if (old.compareTo(current) != 0)
                changed = true;
        }
    } while (changed);
    for (int i = 0; i < m_nonTerminalCount; ++i) {
        int sym = m_maxTerminal + 1 + i;
        TokenSet val = m_firstSetVal.get(sym);
        int[] vec = new int[m_usedTerminalCount];
        int count = 0;
        for (int k = 0; k < m_usedTerminalCount; ++k) if (val.hasSymbol(k))
            vec[count++] = k;
        int[] newVec = new int[count];
        System.arraycopy(vec, 0, newVec, 0, count);
        m_firstSet.put(sym, newVec);
    }
    if (m_out != null) {
        verboseSection("First Sets");
        for (int i = 0; i < m_nonTerminalCount; ++i) {
            // m_out.print ("FIRST(" + m_symbolMap.get (m_usedSymbols[m_usedTerminalCount + i]) + ") = {");
            // for (int sym : m_firstSet.get (m_maxTerminal + 1 + i))
            // m_out.print (" " + m_symbolMap.get (m_usedSymbols[sym]));
            // m_out.println (" }");
            m_out.println("FIRST(" + m_symbolMap.get(m_usedSymbols[m_usedTerminalCount + i]) + ") = " + toString(m_firstSetVal.get(m_maxTerminal + 1 + i)) + (m_firstSetVal.get(m_maxTerminal + 1 + i).hasEpsilon() ? ", epsilon" : ""));
        }
    }
}
