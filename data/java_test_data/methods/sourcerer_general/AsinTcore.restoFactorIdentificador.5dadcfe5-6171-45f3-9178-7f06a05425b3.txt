private Tipo restoFactorIdentificador(Elemento idObj, String lexema, int pasaje) throws AleXcore.ExcepcionCaracterInvalido, AleXcore.ExcepcionComentarioSinCerrar, AleXcore.ExcepcionIdentificadorInvalido, AleXcore.ExcepcionComentarioCerrado, ExcepcionErrorSintactico, ExcepcionErrorSemantico {
    if (pasaje == VALOR) {
        if (idObj.esVariable()) {
            if (((Variable) idObj).getTipo().esArreglo()) {
                // se esta referenciando a un arreglo sin indices, por lo que se debe apilar todo el arreglo
                // Apilo el arreglo
                MepaH.generarInstruccion("PUAR " + ((Variable) idObj).getNivelLexico() + " , " + ((Variable) idObj).getOffset() + " , " + ((Variable) idObj).getTipo().getCantElem());
                return ((Variable) idObj).getTipo();
            } else {
                // Es una variable de tipo simple
                MepaH.generarInstruccion("APVL " + ((Variable) idObj).getNivelLexico() + " , " + ((Variable) idObj).getOffset());
                return ((Variable) idObj).getTipo();
            }
        } else if (idObj.esConstante()) {
            MepaH.generarInstruccion("APCT " + ((Constante) idObj).getValor());
            return ((Constante) idObj).getTipo();
        } else if (idObj.esFuncion()) {
            if (((Funcion) idObj).getCantidadParametros() == 0) {
                // Se llama a asignar offset parametros para que le asigne un offset a la celda de memoria utilizada para retornar el resultado de la funcion
                ((Funcion) idObj).asignarOffsetParametros(new ArrayList());
                MepaH.generarInstruccion("RMEM 1");
                MepaH.generarInstruccion("LLPR " + "l" + ((Funcion) idObj).getEtiqueta());
                return ((Funcion) idObj).getTipo();
            } else {
                throw new ExcepcionErrorSemantico("En linea: " + ultimoToken.getLinea() + ". Cantidad de parametros insuficiente en la llamada a funcion");
            }
        } else if (idObj.esParametro()) {
            ParametroFormal idObjPAR;
            idObjPAR = (ParametroFormal) idObj;
            if (idObjPAR.getPasaje() == VALOR) {
                if (idObjPAR.getTipo().esArreglo()) {
                    // se esta referenciando a un arreglo sin indices, por lo que se debe apilar todo el arreglo
                    // Apilo el arreglo
                    MepaH.generarInstruccion("PUAR " + idObjPAR.getNivelLexico() + " , " + idObjPAR.getOffset() + " , " + ((Arreglo) idObjPAR.getTipo()).getCantElem());
                } else {
                    // Es un parametro de tipo simple
                    MepaH.generarInstruccion("APVL " + idObjPAR.getNivelLexico() + " , " + idObjPAR.getOffset());
                }
                return idObjPAR.getTipo();
            } else {
                // El pasaje del parametro cuyo identificador estamos evaluando es por referencia
                if (idObjPAR.getTipo().esArreglo()) {
                    // se esta referenciando a un arreglo sin indices, por lo que se debe apilar todo el arreglo
                    // Apilo el arreglo
                    MepaH.generarInstruccion("PUAI " + idObjPAR.getNivelLexico() + " , " + idObjPAR.getOffset() + " , " + ((Arreglo) idObjPAR.getTipo()).getCantElem());
                } else {
                    // Es una variable de tipo simple
                    MepaH.generarInstruccion("APVI " + idObjPAR.getNivelLexico() + " , " + idObjPAR.getOffset());
                }
                return idObjPAR.getTipo();
            }
        } else {
            throw new ExcepcionErrorSemantico("En linea: " + ultimoToken.getLinea() + ". Factor incorrecto");
        }
    } else {
        // PASAJE POR REFERENCIA
        if (idObj.esVariable()) {
            if (((Variable) idObj).getTipo().esArreglo()) {
                // se esta referenciando a un arreglo sin indices, por lo que se debe apilar todo el arreglo
                // Apilo el arreglo
                MepaH.generarInstruccion("APDR " + ((Variable) idObj).getNivelLexico() + " , " + ((Variable) idObj).getOffset());
                return ((Variable) idObj).getTipo();
            } else {
                // Variable de tipo simple
                MepaH.generarInstruccion("APDR " + ((Variable) idObj).getNivelLexico() + " , " + ((Variable) idObj).getOffset());
                return ((Variable) idObj).getTipo();
            }
        } else if (idObj.esParametro()) {
            ParametroFormal idObjPAR;
            idObjPAR = (ParametroFormal) idObj;
            if (idObjPAR.getPasaje() == VALOR) {
                if (idObjPAR.getTipo().esArreglo()) {
                    // se esta referenciando a un arreglo sin indices, por lo que se debe apilar todo el arreglo
                    // Apilo el arreglo
                    MepaH.generarInstruccion("APDR " + idObjPAR.getNivelLexico() + " , " + idObjPAR.getOffset());
                } else {
                    // Es un parametro de tipo simple
                    MepaH.generarInstruccion("APDR " + idObjPAR.getNivelLexico() + " , " + idObjPAR.getOffset());
                }
                return idObjPAR.getTipo();
            } else {
                // El pasaje del parametro cuyo identificador estamos evaluando es por referencia
                if (idObjPAR.getTipo().esArreglo()) {
                    // se esta referenciando a un arreglo sin indices, por lo que se debe apilar todo el arreglo
                    // Apilo el arreglo
                    MepaH.generarInstruccion("APVL " + idObjPAR.getNivelLexico() + " , " + idObjPAR.getOffset());
                } else {
                    // Es una variable de tipo simple
                    MepaH.generarInstruccion("APVL " + idObjPAR.getNivelLexico() + " , " + idObjPAR.getOffset());
                }
                return idObjPAR.getTipo();
            }
        } else {
            // deber√≠a apilar el valor o no? preguntar al procer
            throw new ExcepcionErrorSemantico("En linea: " + ultimoToken.getLinea() + ". El parametro no puede ser pasado por referencia");
        }
    }
// return new Tipo();
}
