protected static void sharedMain(String[] aArgs, Class aInstallerClass) {
    try {
        Map params = new HashMap();
        // $NON-NLS-1$
        Pattern p = Pattern.compile("-([^=]+)=(.*)");
        for (int i = 0; i < aArgs.length; i++) {
            String param = aArgs[i];
            Matcher m = p.matcher(param);
            if (m.matches()) {
                String key = m.group(1);
                String val = m.group(2);
                key = (String) sKeyLookup.get(key);
                if (key != null) {
                    params.put(key, val);
                } else {
                    // $NON-NLS-1$
                    throw new RuntimeException(AeMessages.getString("AeTaminoUpgradeInstaller.UNKNOWN_CMD_LINE_PARAM") + m.group(1));
                }
            }
        }
        checkParams(params);
        // Load the final schema.
        // $NON-NLS-1$
        String schemaPath = (String) params.get("_Schema_");
        File schemaFile = new File(schemaPath);
        if (!schemaFile.isFile())
            // $NON-NLS-1$
            throw new AeException(AeMessages.getString("AeTaminoUpgradeInstaller.MISSING_SCHEMA") + schemaPath);
        AeTaminoSchema schema = new AeTaminoSchema(schemaFile);
        // Create the Tamino config.
        AeTaminoConfig config = new AeTaminoConfig(Collections.EMPTY_MAP);
        // Create the Tamino data source.
        AeTaminoDataSource.MAIN = new AeTaminoDataSource(params);
        AeXMLDBPerformanceLogger.init(null);
        IAeXMLDBStorageImpl storageImpl = new AeTaminoStorageImpl(AeTaminoDataSource.MAIN);
        ;
        // Now construct the Tamino upgrader instance.
        Constructor c = aInstallerClass.getConstructor(new Class[] { AeTaminoSchema.class, AeTaminoConfig.class, Map.class, IAeXMLDBStorageImpl.class });
        AeTaminoUpgradeInstaller upgrader = (AeTaminoUpgradeInstaller) c.newInstance(new Object[] { schema, config, params, storageImpl });
        upgrader.upgrade();
    } catch (Throwable t) {
        t.printStackTrace();
    }
}
