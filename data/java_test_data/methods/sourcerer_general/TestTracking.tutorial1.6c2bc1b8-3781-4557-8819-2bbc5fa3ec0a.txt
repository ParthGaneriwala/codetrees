private void tutorial1() throws Exception {
    // 0 until 1550 (client time )
    beginHttpRequestAndOpenSessionInViewFilter();
    userTrackingService.pageAccess("Page 1");
    userTrackingService.onJavaScriptDetected();
    endHttpRequestAndOpenSessionInViewFilter();
    beginHttpRequestAndOpenSessionInViewFilter();
    List<StartupTaskInfo> infos = new ArrayList<StartupTaskInfo>();
    infos.add(new StartupTaskInfo(ColdRealGameStartupTaskEnum.LOAD_JAVA_SCRIPT, 1000, 100));
    infos.add(new StartupTaskInfo(ColdRealGameStartupTaskEnum.INIT_GAME, 1100, 150));
    infos.add(new StartupTaskInfo(ColdRealGameStartupTaskEnum.INIT_GUI, 1250, 50));
    infos.add(new StartupTaskInfo(ColdRealGameStartupTaskEnum.LOAD_MAP, 1300, 200));
    movableService.sendStartupInfo(infos, 500);
    userTrackingService.onJavaScriptDetected();
    endHttpRequestAndOpenSessionInViewFilter();
    beginHttpRequestAndOpenSessionInViewFilter();
    userTrackingService.onTutorialProgressChanged(TutorialConfig.TYPE.STEP, "step1", "task1", 1, 1100);
    endHttpRequestAndOpenSessionInViewFilter();
    beginHttpRequestAndOpenSessionInViewFilter();
    userTrackingService.onTutorialProgressChanged(TutorialConfig.TYPE.TASK, "task1", "Tutorial1", 1, 1500);
    endHttpRequestAndOpenSessionInViewFilter();
    beginHttpRequestAndOpenSessionInViewFilter();
    // Tracking start
    userTrackingService.onEventTrackingStart(new EventTrackingStart(101, 102, 103, 104, 105, 106, 1200));
    // Mouse
    Collection<EventTrackingItem> eventTrackingItems = new ArrayList<EventTrackingItem>();
    eventTrackingItems.add(new EventTrackingItem(1, 1, 1, 1000));
    eventTrackingItems.add(new EventTrackingItem(1, 10, 2, 1100));
    eventTrackingItems.add(new EventTrackingItem(1, 10, 3, 1200));
    eventTrackingItems.add(new EventTrackingItem(1, 10, 4, 1300));
    eventTrackingItems.add(new EventTrackingItem(1, 10, 5, 1400));
    // Commands                                                                     1
    Collection<BaseCommand> baseCommands = new ArrayList<BaseCommand>();
    BuilderCommand builderCommand = new BuilderCommand();
    setPrivateField(BaseCommand.class, builderCommand, "timeStamp", 1200);
    baseCommands.add(builderCommand);
    // Selection
    Collection<SelectionTrackingItem> selectionTrackingItems = new ArrayList<SelectionTrackingItem>();
    SelectionTrackingItem selectionTrackingItem = new SelectionTrackingItem();
    setPrivateField(SelectionTrackingItem.class, selectionTrackingItem, "timeStamp", 1300);
    selectionTrackingItems.add(selectionTrackingItem);
    // Terrain scrolling
    Collection<TerrainScrollTracking> terrainScrollTrackings = new ArrayList<TerrainScrollTracking>();
    terrainScrollTrackings.add(new TerrainScrollTracking(2, 1, 2, 3, 1100));
    terrainScrollTrackings.add(new TerrainScrollTracking(3, 1, 2, 3, 1150));
    terrainScrollTrackings.add(new TerrainScrollTracking(1, 1, 2, 3, 1050));
    // Browser window
    Collection<BrowserWindowTracking> browserWindowTrackings = new ArrayList<BrowserWindowTracking>();
    browserWindowTrackings.add(new BrowserWindowTracking(1, 2, 3, 4, 5, 6, 1100));
    browserWindowTrackings.add(new BrowserWindowTracking(2, 2, 3, 4, 5, 6, 1200));
    browserWindowTrackings.add(new BrowserWindowTracking(3, 2, 3, 4, 5, 6, 1300));
    browserWindowTrackings.add(new BrowserWindowTracking(4, 2, 3, 4, 5, 6, 1400));
    movableService.sendEventTrackerItems(eventTrackingItems, baseCommands, selectionTrackingItems, terrainScrollTrackings, browserWindowTrackings);
    userTrackingService.onTutorialProgressChanged(TutorialConfig.TYPE.TASK, "tutorial1", null, 1, 1550);
    endHttpRequestAndOpenSessionInViewFilter();
}
