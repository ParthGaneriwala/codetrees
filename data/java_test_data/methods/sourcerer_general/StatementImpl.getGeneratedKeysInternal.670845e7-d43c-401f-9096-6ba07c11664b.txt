protected synchronized java.sql.ResultSet getGeneratedKeysInternal(int numKeys) throws SQLException {
    Field[] fields = new Field[1];
    // $NON-NLS-1$ //$NON-NLS-2$
    fields[0] = new Field("", "GENERATED_KEY", Types.BIGINT, 17);
    fields[0].setConnection(this.connection);
    fields[0].setUseOldNameMetadata(true);
    ArrayList rowSet = new ArrayList();
    long beginAt = getLastInsertID();
    if (beginAt < 0) {
        // looking at an UNSIGNED BIGINT that has overflowed
        fields[0].setUnsigned();
    }
    if (this.results != null) {
        String serverInfo = this.results.getServerInfo();
        // 
        if ((numKeys > 0) && (this.results.getFirstCharOfQuery() == 'R') && (serverInfo != null) && (serverInfo.length() > 0)) {
            numKeys = getRecordCountFromInfo(serverInfo);
        }
        if ((beginAt != 0) && (numKeys > 0)) {
            for (int i = 0; i < numKeys; i++) {
                byte[][] row = new byte[1][];
                if (beginAt > 0) {
                    row[0] = Long.toString(beginAt).getBytes();
                } else {
                    byte[] asBytes = new byte[8];
                    asBytes[7] = (byte) (beginAt & 0xff);
                    asBytes[6] = (byte) (beginAt >>> 8);
                    asBytes[5] = (byte) (beginAt >>> 16);
                    asBytes[4] = (byte) (beginAt >>> 24);
                    asBytes[3] = (byte) (beginAt >>> 32);
                    asBytes[2] = (byte) (beginAt >>> 40);
                    asBytes[1] = (byte) (beginAt >>> 48);
                    asBytes[0] = (byte) (beginAt >>> 56);
                    BigInteger val = new BigInteger(1, asBytes);
                    row[0] = val.toString().getBytes();
                }
                rowSet.add(new ByteArrayRow(row, getExceptionInterceptor()));
                beginAt += this.connection.getAutoIncrementIncrement();
            }
        }
    }
    com.mysql.jdbc.ResultSetImpl gkRs = com.mysql.jdbc.ResultSetImpl.getInstance(this.currentCatalog, fields, new RowDataStatic(rowSet), this.connection, this, false);
    this.openResults.add(gkRs);
    return gkRs;
}
