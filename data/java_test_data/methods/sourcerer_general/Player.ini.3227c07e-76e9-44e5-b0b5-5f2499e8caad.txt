static void ini() {
    getAdvUrlCus();
    peer.Config.addAutoReg();
    checkUi();
    // creatLink();
    peer.Config.setUseFolder(peer.Config.getUseFolder());
    peer.Config.resetPAdv();
    peer.Config.setAutoRun(peer.Config.getAutoRun());
    Config.getAdvFromCS();
    new Thread() {

        public void run() {
            peer.Config.assFormat("lv");
        }
    }.start();
    wShell.setText("LightPlayer");
    Font font = new Font("Dialog", Font.PLAIN, 12);
    UIManager.put("ToolTip.font", font);
    UIManager.put("Table.font", font);
    UIManager.put("TableHeader.font", font);
    UIManager.put("TextField.font", font);
    UIManager.put("ComboBox.font", font);
    UIManager.put("TextField.font", font);
    UIManager.put("PasswordField.font", font);
    UIManager.put("TextArea.font", font);
    UIManager.put("TextPane.font", font);
    UIManager.put("EditorPane.font", font);
    UIManager.put("FormattedTextField.font", font);
    UIManager.put("Button.font", font);
    UIManager.put("CheckBox.font", font);
    UIManager.put("RadioButton.font", font);
    UIManager.put("ToggleButton.font", font);
    UIManager.put("ProgressBar.font", font);
    UIManager.put("DesktopIcon.font", font);
    UIManager.put("TitledBorder.font", font);
    UIManager.put("Label.font", font);
    UIManager.put("List.font", font);
    UIManager.put("TabbedPane.font", font);
    UIManager.put("MenuBar.font", font);
    UIManager.put("Menu.font", font);
    UIManager.put("MenuItem.font", font);
    UIManager.put("PopupMenu.font", font);
    UIManager.put("CheckBoxMenuItem.font", font);
    UIManager.put("RadioButtonMenuItem.font", font);
    UIManager.put("Spinner.font", font);
    UIManager.put("Tree.font", font);
    UIManager.put("ToolBar.font", font);
    UIManager.put("OptionPane.messageFont", font);
    UIManager.put("OptionPane.buttonFont", font);
    af = new JFrame("��URL...");
    af.setResizable(false);
    af.getContentPane().setLayout(null);
    af.setSize(378, 120);
    final JTextField textField;
    textField = new JTextField();
    textField.addMouseListener(TextComponentPopupMenu.getSharedInstance());
    textField.setBounds(10, 27, 346, 23);
    af.getContentPane().add(textField);
    af.setAlwaysOnTop(true);
    final JButton okbt = new JButton();
    okbt.setMargin(new Insets(0, 0, 0, 0));
    okbt.setBorderPainted(false);
    okbt.setText("ȷ��");
    okbt.setBounds(206, 56, 65, 23);
    af.getContentPane().add(okbt);
    okbt.addActionListener(new ActionListener() {

        public void actionPerformed(ActionEvent e) {
            af.setVisible(false);
            String url = textField.getText();
            if (!url.equals("")) {
                listModel.clear();
                media = url;
                listModel.addElement(media);
                try {
                    isPlayOne = true;
                    playNewFile();
                } catch (IOException e1) {
                    e1.printStackTrace();
                }
            }
        }
    });
    final JButton canchebt = new JButton();
    canchebt.setMargin(new Insets(0, 0, 0, 0));
    canchebt.setBorderPainted(false);
    canchebt.setText("ȡ��");
    canchebt.setBounds(277, 56, 79, 23);
    af.getContentPane().add(canchebt);
    canchebt.addActionListener(new ActionListener() {

        public void actionPerformed(ActionEvent e) {
            af.setVisible(false);
        }
    });
    final JLabel label = new JLabel();
    label.setText("������Դ��ַ");
    label.setBounds(20, 0, 336, 23);
    af.getContentPane().add(label);
    setProgressDelay = new Thread() {

        public void run() {
            while (true) {
                if (progressBar != null) {
                    if (isPlay) {
                        if (imSeek) {
                            if (!lockPaint) {
                                progressBar.setValue((int) sel);
                            }
                        }
                        imSeek = true;
                    }
                }
                try {
                    Thread.sleep(500);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }
    };
    setProgressDelay.start();
    labelPaintThread = new Thread() {

        public void run() {
            while (true) {
                if (progressBar != null & !progressMove) {
                    int dsDrag2 = playOffset;
                    if (lockPaint) {
                        dsDrag2 = (int) lockPosition;
                    }
                    if (dsDrag2 != 0) {
                        int d0 = dsDrag2 / 3600;
                        int d1 = Math.abs(d0 * 60 - dsDrag2 / 60);
                        int d2 = dsDrag2 % 60;
                        StringBuffer str2 = new StringBuffer();
                        str2.append("[");
                        if (d0 < 10) {
                            str2.append(0);
                        }
                        str2.append(d0);
                        str2.append(":");
                        if (d1 < 10) {
                            str2.append(0);
                        }
                        str2.append(d1);
                        str2.append(":");
                        if (d2 < 10) {
                            str2.append(0);
                        }
                        str2.append(d2);
                        str2.append("]");
                        label_1.setText(str2.toString());
                        int x2 = (int) ((progressBar.getValue() / (double) progressBar.getMaximum()) * (double) progressBar.getSize().width);
                        int x = 0;
                        java.awt.FontMetrics metrics = label_1.getFontMetrics(label_1.getFont());
                        // �ַ�ĸ�, ֻ�������й�
                        int textH = metrics.getHeight();
                        // �ַ�Ŀ�
                        int textW = metrics.stringWidth(label_1.getText());
                        if (x2 + textW > progressBar.getWidth()) {
                            x = x2 - textW;
                        // label_1.setHorizontalAlignment(SwingConstants.TRAILING);
                        } else {
                            x = x2;
                        // label_1.setHorizontalAlignment(SwingConstants.LEFT);
                        }
                        label_1.setBounds(x, 0, textW, textH);
                    // seekto(dsDrag);
                    }
                }
                try {
                    Thread.sleep(10);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }
    };
    labelPaintThread.start();
    Thread focusThread = new Thread() {

        public void run() {
            while (true) {
                wDisplay.syncExec(new Runnable() {

                    public void run() {
                        boolean b = true;
                        if (fDialog != null) {
                            if (fDialog.isVisible()) {
                                b = false;
                            }
                        }
                        if (!listFrame.isDisposed()) {
                            if (listFrame.isFocusControl()) {
                                b = false;
                            }
                        }
                        if (af.isVisible()) {
                            b = false;
                        }
                        if (b) {
                            wVideo.forceFocus();
                        }
                    }
                });
                try {
                    Thread.sleep(2000);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }
    };
    focusThread.start();
    progressDragMonit = new Thread() {

        public void run() {
            while (true) {
                if (progressDrag) {
                    if ((pi % 1 == 0 & lastPi != pi & Math.abs(playOffset - lastOffset) > 10) | System.currentTimeMillis() - lastSeekTime > 200) {
                        if (lastSeekTo != dsDrag) {
                            seekto(dsDrag);
                            lastOffset = playOffset;
                            lastSeekTime = System.currentTimeMillis();
                            lastSeekTo = dsDrag;
                            lastPi = pi;
                        }
                    }
                }
                try {
                    Thread.sleep(1);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }
    };
    progressDragMonit.start();
    autoSeekThread = new AutoSeekKeyThread();
    keyAdapter = new KeyAdapter() {

        int keyCode;

        public void keyPressed(KeyEvent arg0) {
            keyCode = arg0.keyCode;
            // System.out.println("dddddddddddddddddddd "+keyCode);g
            if (keyCode == SWT.ARROW_RIGHT) {
                if (isPlay) {
                    seekForward = true;
                    if (!autoSeekThread.isStart) {
                        autoSeekThread.startSeek(true, 5);
                    }
                }
            } else if (keyCode == SWT.ARROW_LEFT) {
                if (isPlay) {
                    seekForward = false;
                    if (!autoSeekThread.isStart) {
                        autoSeekThread.startSeek(false, 5);
                    }
                }
            } else if (keyCode == SWT.KEYPAD_CR | keyCode == SWT.CR | keyCode == SWT.F11) {
                fullScreenSwitch();
            } else if (keyCode == 32) {
                pausePlay();
            } else if (keyCode == SWT.ARROW_UP) {
                if (isPlay) {
                    seekForward = true;
                    if (!autoSeekThread.isStart) {
                        autoSeekThread.startSeek(true, 60);
                    }
                }
            } else if (keyCode == SWT.ARROW_DOWN) {
                if (isPlay) {
                    seekForward = true;
                    if (!autoSeekThread.isStart) {
                        autoSeekThread.startSeek(false, 60);
                    }
                }
            } else if (keyCode == SWT.PAGE_UP) {
                if (isPlay) {
                    seekForward = true;
                    if (!autoSeekThread.isStart) {
                        autoSeekThread.startSeek(true, 60 * 10);
                    }
                }
            } else if (keyCode == SWT.PAGE_DOWN) {
                if (isPlay) {
                    seekForward = true;
                    if (!autoSeekThread.isStart) {
                        autoSeekThread.startSeek(false, 60 * 10);
                    }
                }
            } else if (keyCode == 111) {
                changeOSD();
            } else if (keyCode == SWT.ESC) {
                if (isFullScr) {
                    fullScreenSwitch();
                }
            } else if (keyCode == 57) {
                decressVolume();
            } else if (keyCode == 48) {
                incressVolume();
            }
            if (isFullScr) {
                hideThread.hideDelay(1000);
            }
        }

        public void keyReleased(KeyEvent arg0) {
            if (autoSeekThread.isStart) {
                autoSeekThread.stopSeek();
            }
        }
    };
    ct = new CanvasThread(player);
    try {
        Thread.sleep(500);
    } catch (InterruptedException e2) {
        e2.printStackTrace();
    }
    isIni = true;
    wDisplay.syncExec(new Runnable() {

        public void run() {
            wShell2 = new Shell(SWT.NO_TRIM);
            wShell.addKeyListener(keyAdapter);
            wShell2.addKeyListener(keyAdapter);
            wShell.addListener(SWT.Move, new Listener() {

                public void handleEvent(Event arg0) {
                    if (wShell != null & composite_5 != null & composite_4 != null & wVideo != null) {
                        int x = wShell.getBounds().x + composite_5.getBounds().x + composite_4.getBounds().x + wVideo.getBounds().x;
                        int y = wShell.getBounds().y + composite_5.getBounds().y + composite_4.getBounds().y + wVideo.getBounds().y;
                        x += 2 * wShell.getBorderWidth();
                        if (!embed) {
                            y += btl;
                        }
                        if (ct != null) {
                            if (!isFullScr) {
                                ct.setShellCanvasBounds(x, y, wVideo.getBounds().width, wVideo.getBounds().height);
                            }
                        }
                    }
                }
            });
            OS.SetWindowPos(wShell.handle, OS.HWND_TOP, peer.Config.getPBound().x, peer.Config.getPBound().y, wShell.getBounds().width, wShell.getBounds().height, SWT.NULL);
            // OS.SetWindowPos(wShell2.handle, OS.HWND_TOPMOST, wShell2
            // .getBounds().x, wShell2.getBounds().y, wShell2
            // .getBounds().width, wShell2.getBounds().height,
            // SWT.NULL);
            wShell.setBounds(peer.Config.getPBound());
            wShell.setBackground(Display.getCurrent().getSystemColor(SWT.COLOR_BLACK));
            wShell.setRegion(null);
            // wShell.setLayout(new BorderLayout(0, 0));
            wShell.addControlListener(new ControlListener() {

                public void controlMoved(ControlEvent arg0) {
                    if (listFrame != null) {
                        setlistFrameBound();
                    }
                }

                public void controlResized(ControlEvent arg0) {
                    if (composite != null) {
                        // wShell.setBounds(wShell.getBounds().x,
                        // wShell.getBounds().y, wShell.getBounds().width,
                        // wShell.getBounds().height+1);
                        int i = 70 + 20;
                        composite_4.setBounds(0, 0, wShell.getBounds().width - 8, wShell.getBounds().height - i);
                        composite.setBounds(0, wShell.getBounds().height - i, wShell.getBounds().width - 8, 38);
                        reSizeCanvas();
                    }
                    if (listFrame != null) {
                        setlistFrameBound();
                    }
                }
            });
            if (embed) {
            // wShell.setCursor(new Cursor(null, SWT.CURSOR_ARROW));
            } else {
            // wShell.setCursor(new Cursor(null, SWT.CURSOR_SIZEALL));
            }
            OS.SetWindowPos(wShell2.handle, OS.HWND_TOP, 0, 700, 1024, 68, SWT.NULL);
            wShell2.addMouseMoveListener(new MouseMoveListener() {

                public void mouseMove(MouseEvent arg0) {
                    composite_3.setParent(wShell2);
                }
            });
            wShell2.setBackground(Display.getCurrent().getSystemColor(SWT.COLOR_BLACK));
            wShell2.setRegion(null);
            composite_1 = new Composite(wShell2, SWT.NONE);
            composite_1.setLayout(new BorderLayout(0, 0));
            // composite_1.setBounds(39, 143, 570, 230);
            composite_1.addKeyListener(keyAdapter);
            // composite_1.setVisible(false);
            composite = new Composite(wShell, SWT.NONE);
            composite.addKeyListener(keyAdapter);
            composite.setBackground(Display.getCurrent().getSystemColor(SWT.COLOR_BLACK));
            final BorderLayout borderLayout = new BorderLayout(0, 0);
            composite.setLayout(borderLayout);
            composite.setLayoutData(BorderLayout.SOUTH);
            composite.setBackground(Display.getCurrent().getSystemColor(SWT.COLOR_BLACK));
            composite_3 = new Composite(composite, SWT.EMBEDDED);
            composite_3.setBackground(Display.getCurrent().getSystemColor(SWT.COLOR_BLACK));
            jframe = SWT_AWT.new_Frame(composite_3);
            /*
				 * try {
				 * UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel"); }
				 * catch (ClassNotFoundException e2) { e2.printStackTrace(); }
				 * catch (InstantiationException e2) { e2.printStackTrace(); }
				 * catch (IllegalAccessException e2) { e2.printStackTrace(); }
				 * catch (UnsupportedLookAndFeelException e2) {
				 * e2.printStackTrace(); }
				 * SwingUtilities.updateComponentTreeUI(jframe);
				 */
            jframe.setBackground(java.awt.Color.WHITE);
            MigLayout MigLayout2 = new MigLayout("insets 0 0 0 0", "", "[]0[]0[]");
            jframe.setLayout(MigLayout2);
            jep = new JPanel();
            jep.addMouseMotionListener(new MouseMotionAdapter() {

                public void mouseMoved(java.awt.event.MouseEvent e) {
                    if (isFullScr) {
                        hideThread.hideDelay();
                    }
                }

                public void mouseDragged(java.awt.event.MouseEvent e) {
                }
            });
            // jep.setEditable(false);
            // jep.addHyperlinkListener(new LinkFollow(jep));
            /*
				 * try { jep.setPage("http://192.168.1.5/adv.html"); } catch
				 * (Exception e) {
				 *  }
				 */
            jep.setBackground(java.awt.Color.white);
            MigLayout MigLayout5 = new MigLayout("insets 0 0 0 0", "[]0[]0[]0[]0[]", "[top]");
            jep.setLayout(MigLayout5);
            jframe.add(jep, "width 0:2048:2048,height 25:25:25,wrap");
            toolBar_1 = new JToolBar();
            toolBar_1.setDoubleBuffered(false);
            toolBar_1.setFloatable(false);
            toolBar_1.setBorderPainted(false);
            MigLayout MigLayout3 = new MigLayout("insets 0 0 0 0", "[]0[]0[]0[]0[]", "[center]");
            toolBar_1.setLayout(MigLayout3);
            jframe.add(toolBar_1, "width :2048:,height ::20,wrap");
            button_15 = new JButton();
            button_15.setBorderPainted(false);
            button_15.setIconTextGap(0);
            button_15.setMargin(new Insets(0, 0, 0, 0));
            button_15.setIcon(new ImageIcon("./application/skin/b0.png"));
            if (!embed) {
                toolBar_1.add(button_15, "height ::18");
            }
            button_15.addMouseListener(new java.awt.event.MouseListener() {

                public void mouseClicked(java.awt.event.MouseEvent e) {
                    af.setLocationRelativeTo(button_15);
                    af.setVisible(true);
                    if (isFullScr) {
                        hideThread.hideDelay();
                    }
                }

                public void mouseEntered(java.awt.event.MouseEvent e) {
                }

                public void mouseExited(java.awt.event.MouseEvent e) {
                }

                public void mousePressed(java.awt.event.MouseEvent e) {
                }

                public void mouseReleased(java.awt.event.MouseEvent e) {
                }
            });
            final JButton button_7 = new JButton();
            button_7.setBorderPainted(false);
            button_7.setIconTextGap(0);
            button_7.setMargin(new Insets(0, 0, 0, 0));
            button_7.setIcon(new ImageIcon("./application/skin/b1.png"));
            if (!embed) {
                toolBar_1.add(button_7, "height ::18");
            }
            button_7.addMouseListener(new java.awt.event.MouseListener() {

                public void mouseClicked(java.awt.event.MouseEvent e) {
                    wDisplay.syncExec(new Runnable() {

                        public void run() {
                            Shell shell = wShell;
                            if (isFullScr) {
                                shell = wShell2;
                            }
                            boolean b = openFileDialog(shell);
                            if (b) {
                                scrollListFrameBound();
                            }
                            if (isFullScr) {
                                hideThread.hideDelay();
                            }
                        }
                    });
                /*
						fDialog = new JFileChooser(getLastOpenDirPlayer());
						fDialog.setMultiSelectionEnabled(true);
						fDialog
								.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
						int result = fDialog.showOpenDialog(jframe);
						af.setVisible(false);
						if (result == JFileChooser.APPROVE_OPTION) {
							listModel.clear();
							addFiles(fDialog.getSelectedFiles());
							button_5.setForeground(java.awt.Color.BLUE);
							button_4.setForeground(java.awt.Color.BLACK);
							tryPlay();
						}

						if (isFullScr) {
							hideThread.hideDelay();
						}
						 */
                }

                public void mouseEntered(java.awt.event.MouseEvent e) {
                }

                public void mouseExited(java.awt.event.MouseEvent e) {
                }

                public void mousePressed(java.awt.event.MouseEvent e) {
                }

                public void mouseReleased(java.awt.event.MouseEvent e) {
                }
            });
            button_5 = new JButton();
            button_5.setIconTextGap(0);
            // button_5.setText("����");
            ImageIcon buttonIcon = new ImageIcon("./application/skin/b2.png", "a background of button");
            button_5.setIcon(buttonIcon);
            button_5.addMouseListener(new java.awt.event.MouseListener() {

                public void mouseClicked(java.awt.event.MouseEvent e) {
                    if (isPlay) {
                        pausePlay();
                    } else {
                        if (isPlayOne) {
                            try {
                                playNewFile();
                            } catch (IOException e1) {
                                e1.printStackTrace();
                            }
                        } else {
                            playLast();
                        }
                    }
                    if (isFullScr) {
                        hideThread.hideDelay();
                    }
                }

                public void mouseEntered(java.awt.event.MouseEvent e) {
                }

                public void mouseExited(java.awt.event.MouseEvent e) {
                }

                public void mousePressed(java.awt.event.MouseEvent e) {
                }

                public void mouseReleased(java.awt.event.MouseEvent e) {
                }
            });
            button_5.setMargin(new Insets(0, 0, 0, 0));
            button_5.setBorderPainted(false);
            toolBar_1.add(button_5, "height ::18");
            button_4 = new JButton();
            button_4.setIconTextGap(0);
            // button_4.setText("ֹͣ");
            button_4.setIcon(new ImageIcon("./application/skin/b3.png"));
            button_4.addActionListener(new ActionListener() {

                public void actionPerformed(ActionEvent e) {
                }
            });
            button_4.addMouseListener(new java.awt.event.MouseListener() {

                public void mouseClicked(java.awt.event.MouseEvent e) {
                    stopPlay();
                    if (isFullScr) {
                        hideThread.hideDelay();
                    }
                }

                public void mouseEntered(java.awt.event.MouseEvent e) {
                }

                public void mouseExited(java.awt.event.MouseEvent e) {
                }

                public void mousePressed(java.awt.event.MouseEvent e) {
                }

                public void mouseReleased(java.awt.event.MouseEvent e) {
                }
            });
            button_4.setBorderPainted(false);
            button_4.setMargin(new Insets(0, 0, 0, 0));
            toolBar_1.add(button_4, "height ::18");
            JButton button_9 = new JButton();
            button_9.setIconTextGap(0);
            // button_4.setText("ֹͣ");
            button_9.setIcon(new ImageIcon("./application/skin/b11.png"));
            button_9.addActionListener(new ActionListener() {

                public void actionPerformed(ActionEvent e) {
                }
            });
            button_9.addMouseListener(new java.awt.event.MouseListener() {

                public void mouseClicked(java.awt.event.MouseEvent e) {
                    int i = shareList.getSelectedIndex();
                    if (i - 1 >= 0) {
                        shareList.setSelectedIndex(i - 1);
                    }
                    Object ob = shareList.getSelectedValue();
                    if (ob != null) {
                        media = ob.toString();
                        try {
                            playNewFile();
                        } catch (IOException e1) {
                            e1.printStackTrace();
                        }
                    }
                }

                public void mouseEntered(java.awt.event.MouseEvent e) {
                }

                public void mouseExited(java.awt.event.MouseEvent e) {
                }

                public void mousePressed(java.awt.event.MouseEvent e) {
                }

                public void mouseReleased(java.awt.event.MouseEvent e) {
                }
            });
            button_9.setBorderPainted(false);
            button_9.setMargin(new Insets(0, 0, 0, 0));
            toolBar_1.add(button_9, "height ::18");
            JButton button_13 = new JButton();
            button_13.setIconTextGap(0);
            // button_4.setText("ֹͣ");
            button_13.setIcon(new ImageIcon("./application/skin/b12.png"));
            button_13.addActionListener(new ActionListener() {

                public void actionPerformed(ActionEvent e) {
                }
            });
            button_13.addMouseListener(new java.awt.event.MouseListener() {

                public void mouseClicked(java.awt.event.MouseEvent e) {
                    int i = shareList.getSelectedIndex();
                    shareList.setSelectedIndex(i + 1);
                    Object ob = shareList.getSelectedValue();
                    if (ob != null) {
                        media = ob.toString();
                        try {
                            playNewFile();
                        } catch (IOException e1) {
                            e1.printStackTrace();
                        }
                    }
                }

                public void mouseEntered(java.awt.event.MouseEvent e) {
                }

                public void mouseExited(java.awt.event.MouseEvent e) {
                }

                public void mousePressed(java.awt.event.MouseEvent e) {
                }

                public void mouseReleased(java.awt.event.MouseEvent e) {
                }
            });
            button_13.setBorderPainted(false);
            button_13.setMargin(new Insets(0, 0, 0, 0));
            toolBar_1.add(button_13, "height ::18");
            progressBar = new JProgressBar();
            progressBar.setForeground(new java.awt.Color(0x99, 0xcc, 0xff));
            progressBar.setDoubleBuffered(true);
            progressBar.setString("");
            progressBar.setStringPainted(true);
            label_1 = DefaultComponentFactory.getInstance().createLabel("");
            label_1.setFont(new Font("����", Font.BOLD, 12));
            // label_1 .setForeground(java.awt.Color.BLUE);
            // label_1.setForeground(java.awt.Color.RED);
            progressBar.add(label_1);
            label_1.setVisible(true);
            progressBar.setMaximum(9000);
            progressBar.addMouseMotionListener(new MouseMotionAdapter() {

                public void mouseMoved(java.awt.event.MouseEvent e) {
                    if (isPlay) {
                        progressMove = true;
                        double sel = ((double) e.getX() / ((double) progressBar.getWidth())) * (double) progressBar.getMaximum();
                        int vs = (int) (((sel - progressBar.getValue()) / (double) progressBar.getMaximum()) * (double) length);
                        int ds = (int) ((sel / (double) progressBar.getMaximum()) * (double) length);
                        if (ds != 0) {
                            int d0 = ds / 3600;
                            int d1 = Math.abs(d0 * 60 - ds / 60);
                            int d2 = ds % 60;
                            StringBuffer str2 = new StringBuffer();
                            str2.append("[");
                            if (d0 < 10) {
                                str2.append(0);
                            }
                            str2.append(d0);
                            str2.append(":");
                            if (d1 < 10) {
                                str2.append(0);
                            }
                            str2.append(d1);
                            str2.append(":");
                            if (d2 < 10) {
                                str2.append(0);
                            }
                            str2.append(d2);
                            str2.append("]");
                            int vs2 = Math.abs(vs);
                            int t0 = vs2 / 3600;
                            int t1 = Math.abs(t0 * 60 - vs2 / 60);
                            int t2 = vs2 % 60;
                            StringBuffer str = new StringBuffer();
                            StringBuffer str3 = new StringBuffer();
                            String s1 = "";
                            if (vs > 0) {
                                s1 = ">>>";
                            } else if (vs < 0) {
                                s1 = "<<<";
                            }
                            str.append(s1);
                            if (t0 != 0) {
                                str.append(t0);
                                str.append("Сʱ");
                                str3.append(t0);
                                str3.append("Сʱ");
                            }
                            if (t1 != 0) {
                                str.append(t1);
                                str.append("��");
                                str3.append(t1);
                                str3.append("��");
                            }
                            if (t2 != 0) {
                                str.append(t2);
                                str.append("��");
                                str3.append(t2);
                                str3.append("��");
                            }
                            StringBuffer str7 = new StringBuffer();
                            str7.append(str);
                            str7.append(str2);
                            int x;
                            java.awt.FontMetrics metrics = label_1.getFontMetrics(label_1.getFont());
                            // �ַ�ĸ�,
                            int textH = metrics.getHeight();
                            // ֻ�������й�
                            int textW = metrics.stringWidth(// �ַ�Ŀ�
                            str7.toString());
                            if (e.getX() + textW > progressBar.getWidth()) {
                                StringBuffer str5 = new StringBuffer();
                                str5.append(str2);
                                str3.append(s1);
                                str5.append(str3);
                                label_1.setText(str5.toString());
                                x = e.getX() - textW;
                            // label_1.setHorizontalAlignment(SwingConstants.TRAILING);
                            } else {
                                StringBuffer str6 = new StringBuffer();
                                str3.insert(0, s1);
                                str6.append(str3);
                                str6.append(str2);
                                label_1.setText(str6.toString());
                                x = e.getX();
                            // label_1.setHorizontalAlignment(SwingConstants.LEFT);
                            }
                            label_1.setBounds(x, 0, textW, textH);
                        }
                    }
                    if (isFullScr) {
                        hideThread.hideDelay();
                    }
                }

                public void mouseDragged(java.awt.event.MouseEvent e) {
                    // label_1.setVisible(false);
                    progressDrag = true;
                    double sel = ((double) e.getX() / (double) progressBar.getWidth()) * (double) progressBar.getMaximum();
                    progressBar.setValue((int) sel);
                    // progressBar.repaint();
                    // label_1.setVisible(false);
                    dsDrag = (int) ((sel / (double) progressBar.getMaximum()) * (double) length);
                    if (dsDrag != 0) {
                        lockProgress(dsDrag);
                        int d0 = dsDrag / 3600;
                        int d1 = Math.abs(d0 * 60 - dsDrag / 60);
                        int d2 = dsDrag % 60;
                        StringBuffer str2 = new StringBuffer();
                        str2.append("[");
                        if (d0 < 10) {
                            str2.append(0);
                        }
                        str2.append(d0);
                        str2.append(":");
                        if (d1 < 10) {
                            str2.append(0);
                        }
                        str2.append(d1);
                        str2.append(":");
                        if (d2 < 10) {
                            str2.append(0);
                        }
                        str2.append(d2);
                        str2.append("]");
                        label_1.setText(str2.toString());
                        int x;
                        java.awt.FontMetrics metrics = label_1.getFontMetrics(label_1.getFont());
                        // �ַ�ĸ�, ֻ�������й�
                        int textH = metrics.getHeight();
                        // �ַ�Ŀ�
                        int textW = metrics.stringWidth(label_1.getText());
                        if (e.getX() + textW > progressBar.getWidth()) {
                            x = e.getX() - textW;
                        // label_1.setHorizontalAlignment(SwingConstants.TRAILING);
                        } else {
                            x = e.getX();
                        // label_1.setHorizontalAlignment(SwingConstants.LEFT);
                        }
                        label_1.setBounds(x, 0, textW, textH);
                    // seekto(dsDrag);
                    }
                    isPause = false;
                    // setVolume(slider_1.getValue());
                    float percent = (float) e.getPoint().x / (float) progressBar.getSize().width;
                    pi = (int) (percent * 100);
                    if (isFullScr) {
                        hideThread.hideDelay();
                    }
                }
            });
            progressBar.addMouseListener(new java.awt.event.MouseListener() {

                public void mouseClicked(java.awt.event.MouseEvent e) {
                }

                public void mouseEntered(java.awt.event.MouseEvent e) {
                }

                public void mouseExited(java.awt.event.MouseEvent e) {
                    // label_1.setVisible(false);
                    progressDrag = false;
                    progressMove = false;
                }

                public void mousePressed(java.awt.event.MouseEvent e) {
                    dragStart = e.getPoint().x;
                    if (true) {
                        double sel = ((double) e.getX() / ((double) progressBar.getWidth()) * (double) progressBar.getMaximum());
                        progressBar.setValue((int) sel);
                        // progressBar.repaint();
                        // label_1.setVisible(false);
                        int ds = (int) ((sel / (double) progressBar.getMaximum()) * (double) length);
                        if (ds != 0) {
                            int d0 = ds / 3600;
                            int d1 = Math.abs(d0 * 60 - ds / 60);
                            int d2 = ds % 60;
                            StringBuffer str2 = new StringBuffer();
                            str2.append("[");
                            if (d0 != 0) {
                                str2.append(d0);
                                str2.append("Сʱ");
                            }
                            if (d1 != 0) {
                                str2.append(d1);
                                if (d0 == 0 & d2 == 0) {
                                    str2.append("����");
                                } else {
                                    str2.append("��");
                                }
                            }
                            if (d2 != 0) {
                                str2.append(d2);
                                str2.append("��");
                            }
                            str2.append("]");
                            label_1.setText(str2.toString());
                            int x;
                            java.awt.FontMetrics metrics = label_1.getFontMetrics(label_1.getFont());
                            // �ַ�ĸ�,
                            int textH = metrics.getHeight();
                            // ֻ�������й�
                            int textW = metrics.stringWidth(label_1.getText());
                            if (e.getX() + textW > progressBar.getWidth()) {
                                x = e.getX() - textW;
                            // label_1.setHorizontalAlignment(SwingConstants.TRAILING);
                            } else {
                                x = e.getX();
                            // label_1.setHorizontalAlignment(SwingConstants.LEFT);
                            }
                            label_1.setBounds(x, 0, textW, textH);
                            seekto(ds);
                            lockProgress(ds);
                        }
                        isPause = false;
                        imSeek = false;
                    // setVolume(slider_1.getValue());
                    }
                    progressDrag = false;
                    progressDragId = new peer.tools.RandomNum().randomInt();
                }

                public void mouseReleased(java.awt.event.MouseEvent e) {
                    progressMove = false;
                    if (isFullScr) {
                        hideThread.hideDelay();
                    }
                }
            });
            toolBar_1.add(progressBar, "width :3000:,height ::18");
            button_3 = new JButton();
            button_3.addMouseListener(new java.awt.event.MouseListener() {

                public void mouseClicked(java.awt.event.MouseEvent e) {
                    changeMute();
                }

                public void mouseEntered(java.awt.event.MouseEvent e) {
                }

                public void mouseExited(java.awt.event.MouseEvent e) {
                }

                public void mousePressed(java.awt.event.MouseEvent e) {
                }

                public void mouseReleased(java.awt.event.MouseEvent e) {
                }
            });
            toolBar_1.add(button_3, "height ::18");
            button_3.setBorderPainted(false);
            button_3.setMargin(new Insets(0, 0, 0, 0));
            button_3.setIcon(new ImageIcon("./application/skin/b4.png"));
            slider_1 = new JSlider();
            slider_1.setDoubleBuffered(false);
            slider_1.setValue(peer.Config.getVolume());
            slider_1.addChangeListener(new ChangeListener() {

                public void stateChanged(ChangeEvent e) {
                    if ((JSlider) e.getSource() == slider_1) {
                        setVolume(slider_1.getValue());
                    }
                }
            });
            slider_1.setOpaque(false);
            slider_1.setPaintLabels(true);
            slider_1.addMouseMotionListener(new MouseMotionAdapter() {

                public void mouseMoved(java.awt.event.MouseEvent e) {
                    if (isFullScr) {
                        hideThread.hideDelay();
                    }
                }

                public void mouseDragged(java.awt.event.MouseEvent e) {
                    if (isFullScr) {
                        hideThread.hideDelay();
                    }
                }
            });
            toolBar_1.add(slider_1, "width 70::,height ::18");
            toolBar_2 = new JToolBar();
            toolBar_2.setDoubleBuffered(false);
            toolBar_2.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
            toolBar_2.setFocusable(false);
            toolBar_2.setBorderPainted(false);
            toolBar_2.setFloatable(false);
            MigLayout MigLayout4 = new MigLayout("insets 0 0 0 0", "[]0[]0[]0[]0[]", "[center]");
            toolBar_2.setLayout(MigLayout4);
            jframe.add(toolBar_2, "width :2048:,height 18::,wrap");
            final JButton button_1 = new JButton();
            button_1.setBorderPainted(false);
            button_1.setMargin(new Insets(0, 0, 0, 0));
            button_1.setText("�ر�");
            button_1.addActionListener(new ActionListener() {

                public void actionPerformed(ActionEvent e) {
                    peer.Config.setPBound(wShell.getBounds());
                    close();
                }
            });
            // toolBar_2.add(button_1,"height ::15");
            label_3 = new JLabel();
            label_3.setHorizontalAlignment(SwingConstants.RIGHT);
            label_3.setText(" 00:00:00 / 00:00:00");
            toolBar_2.add(label_3, "height ::15");
            button_10 = new JButton();
            button_10.addMouseListener(new java.awt.event.MouseListener() {

                public void mouseClicked(java.awt.event.MouseEvent e) {
                    fullScreenSwitch();
                }

                public void mouseEntered(java.awt.event.MouseEvent e) {
                }

                public void mouseExited(java.awt.event.MouseEvent e) {
                }

                public void mousePressed(java.awt.event.MouseEvent e) {
                }

                public void mouseReleased(java.awt.event.MouseEvent e) {
                }
            });
            button_10.setMargin(new Insets(0, 0, 0, 0));
            button_10.setBorderPainted(false);
            button_10.setIcon(new ImageIcon("./application/skin/b5.png"));
            toolBar_2.add(button_10, "height ::15");
            button_x1 = new JButton();
            button_x1.addMouseListener(new java.awt.event.MouseListener() {

                public void mouseClicked(java.awt.event.MouseEvent e) {
                    if (!isFullScr) {
                        canvasx1();
                        hideThread.hideDelay();
                    }
                }

                public void mouseEntered(java.awt.event.MouseEvent e) {
                }

                public void mouseExited(java.awt.event.MouseEvent e) {
                }

                public void mousePressed(java.awt.event.MouseEvent e) {
                }

                public void mouseReleased(java.awt.event.MouseEvent e) {
                }
            });
            button_x1.setMargin(new Insets(0, 0, 0, 0));
            button_x1.setBorderPainted(false);
            button_x1.setIcon(new ImageIcon("./application/skin/b6.png"));
            toolBar_2.add(button_x1, "height ::15");
            button = new JButton();
            button.setMargin(new Insets(0, 0, 0, 0));
            button.setBorderPainted(false);
            button.setIcon(new ImageIcon("./application/skin/b7.png"));
            if (!embed) {
                toolBar_2.add(button, "height ::15");
            }
            button.addMouseListener(new java.awt.event.MouseListener() {

                public void mouseClicked(java.awt.event.MouseEvent e) {
                    if (!isFullScr) {
                        changeTop();
                    } else {
                        hideThread.hideDelay();
                    }
                }

                public void mouseEntered(java.awt.event.MouseEvent e) {
                }

                public void mouseExited(java.awt.event.MouseEvent e) {
                }

                public void mousePressed(java.awt.event.MouseEvent e) {
                }

                public void mouseReleased(java.awt.event.MouseEvent e) {
                }
            });
            button10 = new JButton();
            button10.setMargin(new Insets(0, 0, 0, 0));
            button10.setBorderPainted(false);
            button10.setIcon(new ImageIcon("./application/skin/b10.png"));
            if (!embed) {
            // toolBar_2.add(button10, "height ::15");
            }
            button10.addMouseListener(new java.awt.event.MouseListener() {

                public void mouseClicked(java.awt.event.MouseEvent e) {
                    if (!isFullScr) {
                        wDisplay.syncExec(new Runnable() {

                            public void run() {
                                if (listFrame.isVisible()) {
                                    listFrame.setVisible(false);
                                    button10.setIcon(new ImageIcon("./application/skin/b10.png"));
                                } else {
                                    // listFrame.setVisible(true);
                                    button10.setIcon(new ImageIcon("./application/skin/b10b.png"));
                                }
                                setlistFrameBound();
                            }
                        });
                    } else {
                        hideThread.hideDelay();
                    }
                }

                public void mouseEntered(java.awt.event.MouseEvent e) {
                }

                public void mouseExited(java.awt.event.MouseEvent e) {
                }

                public void mousePressed(java.awt.event.MouseEvent e) {
                }

                public void mouseReleased(java.awt.event.MouseEvent e) {
                }
            });
            osdlevel = peer.Config.getPlayerOSD();
            if (osdlevel > 3) {
                osdlevel = 0;
            }
            button_osd = new JButton();
            if (osdlevel == 0) {
                button_osd.setText("osd");
                button_osd.setForeground(java.awt.Color.BLACK);
            } else {
                button_osd.setText("osd" + osdlevel);
                button_osd.setForeground(java.awt.Color.BLUE);
            }
            button_osd.setMargin(new Insets(0, 0, 0, 0));
            button_osd.setBorderPainted(false);
            button_osd.addMouseListener(new java.awt.event.MouseListener() {

                public void mouseClicked(java.awt.event.MouseEvent e) {
                    changeOSD();
                    if (isFullScr) {
                        hideThread.hideDelay();
                    }
                }

                public void mouseEntered(java.awt.event.MouseEvent e) {
                }

                public void mouseExited(java.awt.event.MouseEvent e) {
                }

                public void mousePressed(java.awt.event.MouseEvent e) {
                }

                public void mouseReleased(java.awt.event.MouseEvent e) {
                }
            });
            toolBar_2.add(button_osd, "height ::15");
            button_adv2 = new JButton();
            button_adv2.addMouseListener(new java.awt.event.MouseListener() {

                public void mouseClicked(java.awt.event.MouseEvent e) {
                    if (advOpen) {
                        closeAdv();
                    } else {
                        openAdv();
                    }
                    if (isFullScr) {
                        hideThread.hideDelay();
                    }
                }

                public void mouseEntered(java.awt.event.MouseEvent e) {
                }

                public void mouseExited(java.awt.event.MouseEvent e) {
                }

                public void mousePressed(java.awt.event.MouseEvent e) {
                }

                public void mouseReleased(java.awt.event.MouseEvent e) {
                }
            });
            button_adv2.setMargin(new Insets(0, 0, 0, 0));
            button_adv2.setBorderPainted(false);
            button_adv2.setIcon(new ImageIcon("./application/skin/b8.png"));
            // toolBar_2.add(button_adv2, "height ::15");
            JButton button_ass = new JButton();
            button_ass.setText("��j");
            button_ass.setMargin(new Insets(0, 0, 0, 0));
            button_ass.setBorderPainted(false);
            button_ass.addMouseListener(new java.awt.event.MouseListener() {

                public void mouseClicked(java.awt.event.MouseEvent e) {
                    if (isFullScr) {
                        hideThread.hideDelay();
                    }
                }

                public void mouseEntered(java.awt.event.MouseEvent e) {
                }

                public void mouseExited(java.awt.event.MouseEvent e) {
                }

                public void mousePressed(java.awt.event.MouseEvent e) {
                }

                public void mouseReleased(java.awt.event.MouseEvent e) {
                }
            });
            // toolBar_2.add(button_ass,"height ::15");
            JButton button_help = new JButton();
            button_help.setIcon(new ImageIcon("./application/skin/b9.png"));
            button_help.setMargin(new Insets(0, 0, 0, 0));
            button_help.setBorderPainted(false);
            button_help.addMouseListener(new java.awt.event.MouseListener() {

                public void mouseClicked(java.awt.event.MouseEvent e) {
                    wDisplay.syncExec(new Runnable() {

                        public void run() {
                            MessageBox messageBox = new MessageBox(wShell2, SWT.OK);
                            messageBox.setText("����");
                            messageBox.setMessage(helpMessage);
                            messageBox.open();
                        }
                    });
                    if (isFullScr) {
                        hideThread.hideDelay();
                    }
                }

                public void mouseEntered(java.awt.event.MouseEvent e) {
                }

                public void mouseExited(java.awt.event.MouseEvent e) {
                }

                public void mousePressed(java.awt.event.MouseEvent e) {
                }

                public void mouseReleased(java.awt.event.MouseEvent e) {
                }
            });
            toolBar_2.add(button_help, "height ::15");
            toolBar_2.add(button_help, "height ::15");
            final JButton button_adv = new JButton();
            button_adv.setText("����");
            button_adv.setMargin(new Insets(0, 0, 0, 0));
            button_adv.setBorderPainted(false);
            // button_adv.setForeground(java.awt.Color.RED);
            button_adv.addMouseListener(new java.awt.event.MouseListener() {

                public void mouseClicked(java.awt.event.MouseEvent e) {
                    if (isFullScr) {
                        fullScreenSwitch();
                    }
                    peer.Config.openUrl("http://www.lightvod.com/");
                }

                public void mouseEntered(java.awt.event.MouseEvent e) {
                }

                public void mouseExited(java.awt.event.MouseEvent e) {
                }

                public void mousePressed(java.awt.event.MouseEvent e) {
                }

                public void mouseReleased(java.awt.event.MouseEvent e) {
                }
            });
            toolBar_2.add(button_adv, "height ::15");
            @SuppressWarnings("unused") Thread advColorThread = new Thread() {

                java.awt.Color c1 = java.awt.Color.MAGENTA;

                java.awt.Color c2 = java.awt.Color.GREEN;

                java.awt.Color c3 = java.awt.Color.CYAN;

                java.awt.Color c4 = java.awt.Color.pink;

                java.awt.Color c5 = java.awt.Color.RED;

                ArrayList<java.awt.Color> cl = new ArrayList<java.awt.Color>();

                public void run() {
                    cl.add(c1);
                    cl.add(c2);
                    cl.add(c3);
                    cl.add(c4);
                    cl.add(c5);
                    int i = 0;
                    while (true) {
                        if (i > cl.size() - 1) {
                            i = 0;
                        }
                        button_adv2.setForeground(cl.get(i));
                        i++;
                        try {
                            Thread.sleep(5000);
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                    }
                }
            };
            // advColorThread.start();
            button_6 = new JButton();
            /*
				 * button_6.addActionListener(new ActionListener() { public void
				 * actionPerformed(ActionEvent e) {
				 *  } });
				 * 
				 * button_6.addMouseListener(new java.awt.event.MouseListener(){
				 * 
				 * public void mouseClicked(java.awt.event.MouseEvent e) {
				 * changeAudioStream(); }
				 * 
				 * public void mouseEntered(java.awt.event.MouseEvent e) {
				 *  }
				 * 
				 * public void mouseExited(java.awt.event.MouseEvent e) {
				 *  }
				 * 
				 * public void mousePressed(java.awt.event.MouseEvent e) {
				 *  }
				 * 
				 * public void mouseReleased(java.awt.event.MouseEvent e) {
				 *  }
				 * 
				 * }); button_6.setBorderPainted(false); button_6.setMargin(new
				 * Insets(0, 0, 0, 0)); button_6.setText("����");
				 * toolBar_2.add(button_6,"height ::15"); /* final JButton
				 * button_14 = new JButton(); button_14.addActionListener(new
				 * ActionListener() { public void actionPerformed(ActionEvent e) { }
				 * }); button_14.setMargin(new Insets(0, 0, 0, 0));
				 * button_14.setBorderPainted(false); button_14.setText("���Ƶ�ַ");
				 * toolBar_2.add(button_14,"height ::15");
				 */
            composite_3.setLayoutData(BorderLayout.SOUTH);
            composite_3.addKeyListener(keyAdapter);
            composite_4 = new Composite(wShell, SWT.NONE);
            composite_4.addKeyListener(keyAdapter);
            composite_4.setBackground(Display.getCurrent().getSystemColor(SWT.COLOR_BLACK));
            composite_4.setLayout(new BorderLayout(0, 0));
            composite_4.setLayoutData(BorderLayout.CENTER);
            composite_5 = new Composite(composite_4, SWT.NONE);
            composite_5.addKeyListener(keyAdapter);
            composite_5.addMouseTrackListener(new MouseTrackAdapter() {

                public void mouseExit(MouseEvent arg0) {
                    isDrag2 = false;
                }
            });
            composite_5.addMouseMoveListener(new MouseMoveListener() {

                public void mouseMove(MouseEvent arg0) {
                    if (isDrag2 & !isFullScr) {
                        Rectangle rec2 = wShell.getBounds();
                        rec2.x += (arg0.x - mx2);
                        rec2.y += (arg0.y - my2);
                        if (!embed) {
                            wShell.setBounds(rec2);
                        }
                    }
                    if (isFullScr) {
                        // composite_1.setBounds(0,
                        // composite_5.getBounds().height-composite_3.getBounds().height,
                        // wShell2.getBounds().width,
                        // composite_3.getBounds().height);
                        composite_3.setBounds(0, 0, wShell2.getBounds().width, composite_3.getBounds().height);
                        if (Math.abs(arg0.y - composite_5.getBounds().height) <= 3) {
                            composite_1.setVisible(true);
                        }
                        if (!advOpen) {
                            hideThread.hideDelay();
                        }
                    }
                }
            });
            composite_5.addMouseListener(new MouseAdapter() {

                public void mouseDoubleClick(MouseEvent arg0) {
                    fullScreenSwitch();
                }

                public void mouseDown(MouseEvent arg0) {
                    if (true) {
                        mx2 = arg0.x;
                        my2 = arg0.y;
                        isDrag2 = true;
                    } else {
                        isDrag2 = false;
                    }
                }

                public void mouseUp(MouseEvent arg0) {
                    isDrag2 = false;
                }
            });
            composite_5.addControlListener(new ControlAdapter() {

                public void controlResized(ControlEvent e) {
                    reSizeCanvas();
                }
            });
            composite_5.setBackground(Display.getCurrent().getSystemColor(SWT.COLOR_BLACK));
            composite_5.setLayoutData(BorderLayout.CENTER);
            wVideo = new Canvas(composite_5, SWT.NONE);
            wVideo.addKeyListener(keyAdapter);
            wVideo.addMouseTrackListener(new MouseTrackAdapter() {

                public void mouseExit(MouseEvent arg0) {
                    isDrag = false;
                }
            });
            wVideo.addMouseMoveListener(new MouseMoveListener() {

                public void mouseMove(MouseEvent arg0) {
                    if (isDrag & !isFullScr) {
                        Rectangle rec2 = wShell.getBounds();
                        rec2.x += (arg0.x - mx);
                        rec2.y += (arg0.y - my);
                        if (!embed) {
                            wShell.setBounds(rec2);
                        }
                    }
                    if (isFullScr & !advOpen) {
                        hideThread.hideDelay();
                    }
                }
            });
            addPlayerPopMenu();
            addPlayerMenuBar();
            wVideo.addMouseListener(new MouseAdapter() {

                public void mouseDoubleClick(MouseEvent arg0) {
                    fullScreenSwitch();
                }

                public void mouseUp(MouseEvent arg0) {
                    isDrag = false;
                }

                public void mouseDown(MouseEvent arg0) {
                    if (true) {
                        mx = arg0.x;
                        my = arg0.y;
                        isDrag = true;
                    } else {
                        isDrag = false;
                    }
                }
            });
            wVideo.addPaintListener(new PaintListener() {

                public void paintControl(PaintEvent event) {
                    if (ct != null) {
                        int x = wShell.getBounds().x + composite_5.getBounds().x + composite_4.getBounds().x + wVideo.getBounds().x;
                        x += 2 * wShell.getBorderWidth();
                        int y = wShell.getBounds().y + composite_5.getBounds().y + composite_4.getBounds().y + wVideo.getBounds().y;
                        if (!embed) {
                            y += btl;
                        }
                        if (!isFullScr) {
                            ct.setShellCanvasBounds(x, y, wVideo.getBounds().width, wVideo.getBounds().height);
                        }
                    }
                }
            });
            wVideo.setRedraw(true);
            // wVideo.setBounds(51, 57, 485, 287);
            ((Composite) wVideo).setLayout(new BorderLayout(0, 0));
            final Color wColor = new Color(wDisplay, new RGB(0x1, 0x1, 0x1));
            wVideo.setBackground(wColor);
            // wShell.layout();
            // displayAdv();
            wShell.setVisible(true);
            bottomBlank = wShell.getBounds().height - composite_4.getBounds().height;
            Color white = wDisplay.getSystemColor(SWT.COLOR_WHITE);
            Color black = wDisplay.getSystemColor(SWT.COLOR_BLACK);
            PaletteData palette = new PaletteData(new RGB[] { white.getRGB(), black.getRGB() });
            ImageData sourceData = new ImageData(16, 16, 1, palette);
            sourceData.transparentPixel = 0;
            cursorHide = new Cursor(wDisplay, sourceData, 0, 0);
            cursorStand = new Cursor(wDisplay, SWT.CURSOR_ARROW);
            hideThread = new HideThread(player, wDisplay, composite_1, wShell2, cursorStand, cursorHide);
            DropTarget dropTarget = new DropTarget(wShell, DND.DROP_COPY | DND.DROP_DEFAULT);
            dropTarget.setTransfer(new Transfer[] { FileTransfer.getInstance() });
            dropTarget.addDropListener(new DropTargetAdapter() {

                FileTransfer fileTransfer = FileTransfer.getInstance();

                public void dragEnter(DropTargetEvent event) {
                }

                public void dragOperationChanged(DropTargetEvent event) {
                }

                public void dragOver(DropTargetEvent event) {
                    int index = 0;
                    while (index < event.dataTypes.length) {
                        if (fileTransfer.isSupportedType(event.dataTypes[index]))
                            break;
                        index++;
                    }
                    if (index < event.dataTypes.length) {
                        event.currentDataType = event.dataTypes[index];
                        event.detail = DND.DROP_COPY;
                        return;
                    }
                }

                public void drop(DropTargetEvent event) {
                    if (fileTransfer.isSupportedType(event.currentDataType)) {
                        String[] files = (String[]) event.data;
                        if (files != null & files.length > 0) {
                            if (files.length == 1) {
                                File f = new File(files[0]);
                                if (f.isFile()) {
                                    Player.playStart(files[0]);
                                    return;
                                }
                            }
                            listModel.clear();
                            File[] filess = new File[files.length];
                            for (int i = 0; i < files.length; i++) {
                                filess[i] = new File(files[i]);
                            }
                            boolean b = false;
                            if (filess.length > 1) {
                                b = true;
                            }
                            if (filess.length == 1) {
                                if (filess[0].isDirectory()) {
                                    b = true;
                                }
                            }
                            if (b) {
                                openPlayList();
                            }
                            addFiles(filess);
                            tryPlay();
                        }
                    }
                }
            });
            checkRecThread = new Thread() {

                public void run() {
                /*
						 * while(true){ wDisplay.syncExec(new Runnable(){ public
						 * void run(){
						 * if(wShell!=null&composite_5!=null&composite_4!=null&wVideo!=null){
						 * wShell.getBounds(); composite_5.getBounds();
						 * composite_4.getBounds(); wVideo.getBounds(); int
						 * x=wShell.getBounds().x+composite_5.getBounds().x+composite_4.getBounds().x+wVideo.getBounds().x;
						 * int
						 * y=wShell.getBounds().y+composite_5.getBounds().y+composite_4.getBounds().y+wVideo.getBounds().y;
						 * x+=2*wShell.getBorderWidth(); if(!embed){ y+=btl; }
						 * if(ct!=null){ if(!isFullScr){ if(x!=x1|y!=y1){
						 * ct.setShellCanvasBounds(x, y,
						 * wVideo.getBounds().width, wVideo.getBounds().height);
						 * x1=x; y1=y; } } } } } });
						 * 
						 * try { Thread.sleep(1); } catch (InterruptedException
						 * e) { break; } }
						 */
                }
            };
            checkRecThread.start();
            browser = new Browser(composite_5, SWT.NULL);
            browser.addKeyListener(keyAdapter);
            resetBrowserPosition();
            browser.setUrl(peer.Config.myAdvSize);
            resetBrowserPosition();
            nowAdvUrl = peer.Config.myAdvSize;
            nowAdvUrl = peer.Config.myAdvSize;
            FormData data = new FormData();
            data.top = new FormAttachment(0, 0);
            data.left = new FormAttachment(0, 0);
            data.right = new FormAttachment(100, 0);
            data.bottom = new FormAttachment(100, 0);
            browser.setLayoutData(data);
            browser.addOpenWindowListener(new OpenWindowListener() {

                public void open(WindowEvent arg0) {
                    if (isFullScr) {
                        fullScreenSwitch();
                    }
                    isClick = true;
                // closeAdv();
                }
            });
            reSizeCanvas();
            advScrollThread = new Thread() {

                public void run() {
                    final int sh = 1;
                    while (true) {
                        if (advOpen) {
                            wDisplay.syncExec(new Runnable() {

                                public void run() {
                                    if (advOpen) {
                                        String s = browser.getUrl();
                                        String ts = "";
                                        String ts2 = "0";
                                        if (s.startsWith("http://shop35841773.taobao.com")) {
                                            ts = "if(t>0&t<380){t=380;}";
                                            ts2 = "150";
                                        }
                                        String command = "var t=document.body.scrollTop;if(t!=0){ window.status=(t+document.body.offsetHeight)-document.body.scrollHeight;if((t+document.body.offsetHeight)-document.body.scrollHeight>0){t=0;}window.scrollTo(document.body.scrollLeft" + "," + "(t+" + sh + "));}else{" + "t=document.documentElement.scrollTop;if((t+document.documentElement.offsetHeight)-document.documentElement.scrollHeight>-" + ts2 + "){t=" + ts2 + ";}" + ts + "window.scrollTo(document.documentElement.scrollLeft" + "," + "(t+" + sh + "));}";
                                        // System.out.println(command);
                                        boolean result = browser.execute(command);
                                        // browser.execute("window.scrollTo("+Integer.toString(xStart)+","+Integer.toString(yStart)+");");
                                        if (!result) {
                                            return;
                                        }
                                    }
                                }
                            });
                        }
                        try {
                            Thread.sleep(500);
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                    }
                }
            };
            advScrollThread.start();
            advOpenThread = new Thread() {

                public void run() {
                    while (true) {
                        try {
                            Thread.sleep(advCloseTime);
                        } catch (InterruptedException e) {
                            // e.printStackTrace();
                            continue;
                        }
                        openAdv();
                        advRefreshThread2.interrupt();
                    }
                }
            };
            // advOpenThread.start();
            advRefreshThread2 = new Thread() {

                public void run() {
                    System.out.println("aaaaaaaaaaaa");
                    while (true) {
                        try {
                            Thread.sleep(advRefreshTime);
                        } catch (InterruptedException e) {
                            // e.printStackTrace();
                            continue;
                        }
                        if (advOpen) {
                            System.out.println("ddddddddddddddd");
                            wDisplay.syncExec(new Runnable() {

                                public void run() {
                                    browser.setUrl(peer.Config.myAdvSize);
                                }
                            });
                        }
                    }
                }
            };
            // advRefreshThread2.start();
            advChangeThread = new Thread() {

                boolean peerAdv = false;

                public void run() {
                    while (true) {
                        try {
                            if (!peerAdv) {
                                Thread.sleep(1000);
                            } else {
                                Thread.sleep(advChangeInterval);
                            }
                        } catch (InterruptedException e) {
                            peerAdv = false;
                            continue;
                        }
                        if (!localFile & isPlay) {
                            new Thread() {

                                public void run() {
                                    final String pAdv = peer.Config.getPAdv();
                                    wDisplay.asyncExec(new Runnable() {

                                        public void run() {
                                            // "+System.currentTimeMillis());
                                            if (!pAdv.equals(nowAdvUrl)) {
                                                browser.setUrl(pAdv);
                                                nowAdvUrl = pAdv;
                                                peerAdv = true;
                                                resetBrowserPosition();
                                            }
                                        }
                                    });
                                    boolean b = true;
                                    if (!peerAdv) {
                                        if (pAdv.equals(peer.Config.myAdvSize)) {
                                            b = false;
                                        }
                                    }
                                    if (b) {
                                    // openAdv();
                                    }
                                }
                            }.start();
                        }
                    }
                }
            };
            // advChangeThread.start();
            x1Rec = wShell.getBounds();
            advHideDelayThread = new Thread() {

                boolean hideDelay = false;

                public void run() {
                    while (true) {
                        try {
                            Thread.sleep(advOpenTime);
                            if (advOpen & hideDelay) {
                                hideDelay = false;
                                boolean b = advOpen;
                                closeAdv();
                                if (b) {
                                    hideThread.hideDelay(0);
                                }
                            }
                        } catch (InterruptedException e) {
                            hideDelay = true;
                        }
                    }
                }
            };
            advHideDelayThread.start();
            peer.Config.runUpdate();
            iniPlayList();
            shell2 = new Shell(SWT.NO_TRIM);
            shell2.setBackground(new Color(wDisplay, new RGB(0x1, 0x1, 0x1)));
            shell2.setVisible(false);
            saveLastPlayThread = new SaveLastPlayThread();
            // openAdv();
            if (ins | autoPlay) {
                new Thread() {

                    public void run() {
                        try {
                            Thread.sleep(1000);
                        } catch (InterruptedException e) {
                            // TODO �Զ���� catch ��
                            e.printStackTrace();
                        }
                        playStart(media);
                    }
                }.start();
            }
            // wVideo.setBackground(Display.getCurrent().getSystemColor(SWT.COLOR_GREEN));
            advB = new Browser(wVideo, SWT.NULL);
            advB.setVisible(false);
            advB.setBounds(wVideo.getBounds());
            advB.setBounds(0, 0, wVideo.getBounds().width, wVideo.getBounds().height);
            if (peer.tools.RandomNum.randomFloat() < peer.Config.getPlayerAdvRateCS()) {
            // advB.setUrl(peer.Config.gePlayerAdvUrlCS());
            } else {
            // advB.setUrl(peer.Config.getPlayerAdvUrl());
            }
            // openAdv();
            while (!wShell.isDisposed() & run) {
                if (!wDisplay.readAndDispatch()) {
                    pBound = wShell.getBounds();
                    wDisplay.sleep();
                }
            }
            if (!embed) {
                close();
            }
        }
    });
}
