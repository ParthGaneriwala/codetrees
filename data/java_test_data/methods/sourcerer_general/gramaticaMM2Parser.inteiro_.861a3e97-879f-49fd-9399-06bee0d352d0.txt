// $ANTLR start "inteiro_"
public final gramaticaMM2Parser.inteiro__return inteiro_() throws RecognitionException {
    gramaticaMM2Parser.inteiro__return retval = new gramaticaMM2Parser.inteiro__return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token DIGIT_NULL217 = null;
    gramaticaMM2Parser.int_positivo_return int_positivo218 = null;
    CommonTree DIGIT_NULL217_tree = null;
    try {
        // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:188:10: ( ( DIGIT_NULL | int_positivo ) )
        // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:188:12: ( DIGIT_NULL | int_positivo )
        {
            root_0 = (CommonTree) adaptor.nil();
            // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:188:12: ( DIGIT_NULL | int_positivo )
            int alt43 = 2;
            int LA43_0 = input.LA(1);
            if ((LA43_0 == DIGIT_NULL)) {
                alt43 = 1;
            } else if ((LA43_0 == DIGIT)) {
                alt43 = 2;
            } else {
                NoViableAltException nvae = new NoViableAltException("", 43, 0, input);
                throw nvae;
            }
            switch(alt43) {
                case 1:
                    // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:188:13: DIGIT_NULL
                    {
                        DIGIT_NULL217 = (Token) match(input, DIGIT_NULL, FOLLOW_DIGIT_NULL_in_inteiro_2073);
                        DIGIT_NULL217_tree = (CommonTree) adaptor.create(DIGIT_NULL217);
                        adaptor.addChild(root_0, DIGIT_NULL217_tree);
                    }
                    break;
                case 2:
                    // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:188:26: int_positivo
                    {
                        pushFollow(FOLLOW_int_positivo_in_inteiro_2077);
                        int_positivo218 = int_positivo();
                        state._fsp--;
                        adaptor.addChild(root_0, int_positivo218.getTree());
                    }
                    break;
            }
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
