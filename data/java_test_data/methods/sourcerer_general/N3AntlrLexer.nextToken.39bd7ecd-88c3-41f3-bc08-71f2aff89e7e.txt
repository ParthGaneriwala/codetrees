public Token nextToken() throws TokenStreamException {
    Token theRetToken = null;
    tryAgain: for (; ; ) {
        Token _token = null;
        int _ttype = Token.INVALID_TYPE;
        resetText();
        try {
            // for char stream error handling
            try {
                // for lexical error handling
                switch(LA(1)) {
                    case '?':
                        {
                            mUVAR(true);
                            theRetToken = _returnToken;
                            break;
                        }
                    case '"':
                    case '\'':
                        {
                            mSTRING(true);
                            theRetToken = _returnToken;
                            break;
                        }
                    case '.':
                        {
                            mSEP_OR_PATH(true);
                            theRetToken = _returnToken;
                            break;
                        }
                    case '(':
                        {
                            mLPAREN(true);
                            theRetToken = _returnToken;
                            break;
                        }
                    case ')':
                        {
                            mRPAREN(true);
                            theRetToken = _returnToken;
                            break;
                        }
                    case '[':
                        {
                            mLBRACK(true);
                            theRetToken = _returnToken;
                            break;
                        }
                    case ']':
                        {
                            mRBRACK(true);
                            theRetToken = _returnToken;
                            break;
                        }
                    case '{':
                        {
                            mLCURLY(true);
                            theRetToken = _returnToken;
                            break;
                        }
                    case '}':
                        {
                            mRCURLY(true);
                            theRetToken = _returnToken;
                            break;
                        }
                    case ';':
                        {
                            mSEMI(true);
                            theRetToken = _returnToken;
                            break;
                        }
                    case ',':
                        {
                            mCOMMA(true);
                            theRetToken = _returnToken;
                            break;
                        }
                    case '!':
                        {
                            mPATH(true);
                            theRetToken = _returnToken;
                            break;
                        }
                    case '#':
                        {
                            mSL_COMMENT(true);
                            theRetToken = _returnToken;
                            break;
                        }
                    case '\t':
                    case '\n':
                    case '\u000c':
                    case '\r':
                    case ' ':
                        {
                            mWS(true);
                            theRetToken = _returnToken;
                            break;
                        }
                    default:
                        if ((LA(1) == '<') && (_tokenSet_0.member(LA(2)))) {
                            mURI_OR_IMPLIES(true);
                            theRetToken = _returnToken;
                        } else if ((LA(1) == '@') && (_tokenSet_1.member(LA(2)))) {
                            mAT_WORD(true);
                            theRetToken = _returnToken;
                        } else if ((LA(1) == '^') && (LA(2) == '^')) {
                            mDATATYPE(true);
                            theRetToken = _returnToken;
                        } else if ((LA(1) == '=') && (LA(2) == '>')) {
                            mARROW_R(true);
                            theRetToken = _returnToken;
                        } else if ((LA(1) == '>') && (LA(2) == '-')) {
                            mARROW_PATH_L(true);
                            theRetToken = _returnToken;
                        } else if ((LA(1) == '-') && (LA(2) == '>')) {
                            mARROW_PATH_R(true);
                            theRetToken = _returnToken;
                        } else if ((_tokenSet_2.member(LA(1))) && (true)) {
                            mTHING(true);
                            theRetToken = _returnToken;
                        } else if ((LA(1) == '<') && (true)) {
                            mLANGLE(true);
                            theRetToken = _returnToken;
                        } else if ((LA(1) == '>') && (true)) {
                            mRANGLE(true);
                            theRetToken = _returnToken;
                        } else if ((LA(1) == '@') && (true)) {
                            mAT(true);
                            theRetToken = _returnToken;
                        } else if ((LA(1) == '^') && (true)) {
                            mRPATH(true);
                            theRetToken = _returnToken;
                        } else if ((LA(1) == '=') && (true)) {
                            mEQUAL(true);
                            theRetToken = _returnToken;
                        } else {
                            if (LA(1) == EOF_CHAR) {
                                uponEOF();
                                _returnToken = makeToken(Token.EOF_TYPE);
                            } else {
                                throw new NoViableAltForCharException((char) LA(1), getFilename(), getLine(), getColumn());
                            }
                        }
                }
                // found SKIP token
                if (_returnToken == null)
                    continue tryAgain;
                _ttype = _returnToken.getType();
                _ttype = testLiteralsTable(_ttype);
                _returnToken.setType(_ttype);
                return _returnToken;
            } catch (RecognitionException e) {
                throw new TokenStreamRecognitionException(e);
            }
        } catch (CharStreamException cse) {
            if (cse instanceof CharStreamIOException) {
                throw new TokenStreamIOException(((CharStreamIOException) cse).io);
            } else {
                throw new TokenStreamException(cse.getMessage());
            }
        }
    }
}
