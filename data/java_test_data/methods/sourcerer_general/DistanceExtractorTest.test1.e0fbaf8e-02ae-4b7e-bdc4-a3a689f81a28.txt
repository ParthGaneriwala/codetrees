@Test
public void test1() throws Exception {
    tokenBuilder.buildTokens(jCas, "A simple sentence to test the distance of tokens from each other.", "A simple sentence to test the distance of tokens from each other .");
    DistanceExtractor extractor = new DistanceExtractor(null, Token.class);
    Token token1 = JCasUtil.selectByIndex(jCas, Token.class, 0);
    Token token2 = JCasUtil.selectByIndex(jCas, Token.class, 1);
    Token token3 = JCasUtil.selectByIndex(jCas, Token.class, 2);
    Token token4 = JCasUtil.selectByIndex(jCas, Token.class, 3);
    Token token5 = JCasUtil.selectByIndex(jCas, Token.class, 4);
    List<Feature> features = extractor.extract(jCas, token1, token2);
    assertEquals(0, features.get(0).getValue());
    features = extractor.extract(jCas, token1, token3);
    assertEquals(1, features.get(0).getValue());
    features = extractor.extract(jCas, token3, token1);
    assertEquals(1, features.get(0).getValue());
    features = extractor.extract(jCas, token1, token5);
    assertEquals(3, features.get(0).getValue());
    features = extractor.extract(jCas, token5, token1);
    assertEquals(3, features.get(0).getValue());
    features = extractor.extract(jCas, token4, token5);
    assertEquals(0, features.get(0).getValue());
    features = extractor.extract(jCas, token5, token4);
    assertEquals(0, features.get(0).getValue());
    features = extractor.extract(jCas, token5, token5);
    assertEquals(0, features.get(0).getValue());
    features = extractor.extract(jCas, new Annotation(jCas, 0, 3), token1);
    assertEquals(0, features.get(0).getValue());
    features = extractor.extract(jCas, new Annotation(jCas, 0, 3), token2);
    assertEquals(0, features.get(0).getValue());
    features = extractor.extract(jCas, new Annotation(jCas, 0, 3), token3);
    assertEquals(0, features.get(0).getValue());
    features = extractor.extract(jCas, new Annotation(jCas, 0, 3), token4);
    assertEquals(1, features.get(0).getValue());
    features = extractor.extract(jCas, new Annotation(jCas, 0, 3), token5);
    assertEquals(2, features.get(0).getValue());
    Annotation annotation = new Annotation(jCas, 64, 65);
    assertEquals(".", annotation.getCoveredText());
    features = extractor.extract(jCas, annotation, token1);
    assertEquals(11, features.get(0).getValue());
}
