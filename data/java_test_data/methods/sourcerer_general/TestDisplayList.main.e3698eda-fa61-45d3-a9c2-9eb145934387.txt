public static void main(String[] args) {
    // Creation de la fenetre d'affichage
    int width = 800;
    int height = 600;
    int depth = 16;
    try {
        DisplayMode[] modes = Display.getAvailableDisplayModes();
        for (DisplayMode currentMode : modes) {
            if (currentMode.getWidth() == width && currentMode.getHeight() == height && currentMode.getBitsPerPixel() == depth) {
                Display.setDisplayMode(currentMode);
                break;
            }
        }
        Display.setTitle("GameTest");
        Display.setLocation(10, 10);
        Display.create();
        Display.sync(100);
    } catch (Exception e) {
        Sys.alert("Erreur", "Une erreur est survenue lors de la crï¿½ation de l'affichage : " + e);
        System.exit(1);
    }
    float posX = 0;
    float posZ = 0;
    float yAngleRad = 0;
    float yAngleDeg = 0;
    float totalTime = 0;
    float lastTime = 0;
    int iteration = 1;
    int mode = 0;
    int list = creerDisplayList();
    Timer t = new Timer();
    // Boucle tant que la fenetre n'est pas fermee
    while (!Display.isCloseRequested()) {
        yAngleRad = (float) Math.toRadians(yAngleDeg);
        if (Keyboard.isKeyDown(Keyboard.KEY_UP)) {
            posZ += 0.001f * Math.cos(yAngleRad);
            posX -= 0.001f * Math.sin(yAngleRad);
        }
        if (Keyboard.isKeyDown(Keyboard.KEY_DOWN)) {
            posZ -= 0.001f * Math.cos(yAngleRad);
            posX += 0.001f * Math.sin(yAngleRad);
        }
        if (Keyboard.isKeyDown(Keyboard.KEY_LEFT)) {
            yAngleDeg -= 1f;
        }
        if (Keyboard.isKeyDown(Keyboard.KEY_RIGHT)) {
            yAngleDeg += 1f;
        }
        if (Keyboard.isKeyDown(Keyboard.KEY_RIGHT)) {
            yAngleDeg += 1f;
        }
        if (Keyboard.isKeyDown(Keyboard.KEY_UP)) {
            mode++;
            mode = mode % 2;
            totalTime = 0;
            iteration = 0;
        }
        iteration++;
        glClear(GL_COLOR_BUFFER_BIT);
        glLoadIdentity();
        glOrtho(-2, 2, -2, 2, -2, 2);
        glRotatef(yAngleDeg, 0, 1, 0);
        if (mode == 0) {
            dessiner();
            Display.setTitle("SansOptimisation : ");
        } else if (mode == 1) {
            glCallList(list);
            Display.setTitle("DisplayList : ");
        }
        Timer.tick();
        totalTime += (t.getTime() - lastTime) * 1000;
        lastTime = t.getTime();
        Display.setTitle(Display.getTitle() + " - AVG : " + Math.round(totalTime / iteration));
        Display.update();
    }
}
