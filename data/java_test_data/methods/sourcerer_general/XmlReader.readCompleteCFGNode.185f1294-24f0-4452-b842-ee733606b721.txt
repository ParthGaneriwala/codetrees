public ControlFlowGraph readCompleteCFGNode(Element element) {
    Iterator childs = element.elementIterator();
    Vector instList = new Vector();
    while (childs.hasNext()) {
        int id = 0;
        String name = null;
        boolean startNode = false;
        boolean endNode = false;
        Element childNode = (Element) childs.next();
        if ("node".equals(childNode.getQualifiedName())) {
            Iterator instructionInfo = childNode.elementIterator();
            while (instructionInfo.hasNext()) {
                Element instrElement = (Element) instructionInfo.next();
                Iterator useAndDefsIter = instrElement.elementIterator();
                Vector useIntructions = new Vector();
                Vector defInstructions = new Vector();
                List<String> instrctionsInfo = new ArrayList<String>();
                if ("instruction".equals(instrElement.getQualifiedName())) {
                    Iterator attributeIterator = instrElement.attributeIterator();
                    String instruction = null;
                    String type = null;
                    String fname = null;
                    while (attributeIterator.hasNext()) {
                        Attribute instructionAttribute = (Attribute) attributeIterator.next();
                        if ("ins".equals(instructionAttribute.getQualifiedName())) {
                            instruction = instructionAttribute.getValue();
                            instrctionsInfo.add(instruction);
                        // instrctionsInfo.add(XmlToAssemblyInstruction.getAssemblyInstruction(type)instructionAttribute.getValue());
                        } else if ("type".equals(instructionAttribute.getQualifiedName())) {
                            type = instructionAttribute.getValue();
                        // instrctionsInfo.add(XmlToAssemblyInstruction.getAssemblyInstruction(type)instructionAttribute.getValue());
                        } else if ("fname".equals(instructionAttribute.getQualifiedName())) {
                            fname = instructionAttribute.getValue();
                        // instrctionsInfo.add(XmlToAssemblyInstruction.getAssemblyInstruction(type)instructionAttribute.getValue());
                        }
                    }
                    while (useAndDefsIter.hasNext()) {
                        Element useOrDefInstruction = (Element) useAndDefsIter.next();
                        if ("use".equals(useOrDefInstruction.getQualifiedName())) {
                            useIntructions.add(new String(useOrDefInstruction.getTextTrim()));
                        }
                        if ("def".equals(useOrDefInstruction.getQualifiedName())) {
                            defInstructions.add(new String(useOrDefInstruction.getTextTrim()));
                        }
                    }
                    if (instruction != null && type != null) {
                        AssemblyInstruction assemblyInstruction = new XmlToAssemblyInstruction().getInstruction(instrElement, type, useIntructions, defInstructions);
                        // XmlToAssemblyInstruction.getAssemblyInstruction(type, instruction.trim(),fname, useIntructions, defInstructions);
                        instList.add(assemblyInstruction);
                    }
                // instrctionsInfo.add(instrElement.getText());
                }
            }
        }
    }
    System.out.println(instList.size());
    ControlFlowGraph controlFlowGraph = new ControlFlowGraph(instList, false);
    return controlFlowGraph;
}
