private void expressao() throws Exception {
    obtenha_simbolo();
    int numParenteses = 0;
    while (simboloLidoIs(Simbolo.PARENTISADOR_ABRE)) {
        numParenteses++;
        obtenha_simbolo();
    }
    if (simboloLidoIs(Simbolo.ASPAS_STRING)) {
        primario();
        if (!isSimboloDePontuacao()) {
            listErrosSintaticos.add(new ErroSintaticoException("falta pontua��o"));
        }
    } else if (simboloLidoIs(Simbolo.IDENTIFICADOR)) {
        obtenha_simbolo();
        if (isSimboloOperadorLogico()) {
            trata(2 + numParenteses);
            expr_logica();
            obtenha_simbolo();
        } else if (isSimboloOperadorAritmetico()) {
            trata(2 + numParenteses);
            expr_aritmetica();
        } else if (isOperadorRelacional()) {
            trata(2);
            expr_relacional();
        } else if (isSimboloDePontuacao()) {
            trata(1);
            primario();
        } else {
            listErrosSintaticos.add(new ErroSintaticoException(" expr invalida"));
        }
    } else if (simboloLidoIs(Simbolo.TRUE) || simboloLidoIs(Simbolo.FALSE)) {
        trata(numParenteses);
        expr_logica();
        obtenha_simbolo();
    } else if (simboloLidoIs(Simbolo.NUMERO)) {
        obtenha_simbolo();
        if (isSimboloOperadorAritmetico()) {
            trata(numParenteses + 1);
            expr_aritmetica();
        } else if (isOperadorRelacional()) {
            volta();
            expr_relacional();
        } else if (isSimboloDePontuacao()) {
            volta();
            primario();
        } else {
            listErrosSintaticos.add(new ErroSintaticoException("expr invalida"));
        }
        obtenha_simbolo();
        if (isOperadorRelacional()) {
            obtenha_simbolo();
            expr_aritmetica();
            aSemantico.verificaTipoRelacional(pct);
        }
    } else {
        listErrosSintaticos.add(new ErroSintaticoException("expr invalida"));
    }
}
