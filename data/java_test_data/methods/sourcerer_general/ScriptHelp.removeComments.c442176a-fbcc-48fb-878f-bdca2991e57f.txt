public static String removeComments(String content) {
    if ("".equals(content)) {
        return "";
    }
    StringBuilder s = new StringBuilder();
    int sz = content.length();
    for (int i = 0; i < sz; i++) {
        switch(content.charAt(i)) {
            case '/':
                if (stats == model.COMMENCODES) {
                    // 如果当前位普通代码模式则转到斜杠模式
                    stats = model.PRECOMMENTS;
                } else if (stats == model.PRECOMMENTS) {
                    // 如果当前为斜杠模式则转到单行注释模式
                    stats = model.SINGLELINECOMMENTS;
                // s.append("  ");
                } else if (stats == model.MORELINECOMMENTS) {
                // 
                // s.append(" ");
                } else if (stats == model.STARMODEL) {
                    // 如果当前为星号模式则转到普通代码模式
                    stats = model.COMMENCODES;
                    s.append(" ");
                } else if (stats == model.SINGLELINECOMMENTS) {
                // s.append(" ");
                } else if (stats == model.STRINGMODEL) {
                    s.append("/");
                } else if (stats == model.TRANSFERMODEL) {
                    stats = model.STRINGMODEL;
                    s.append("/");
                }
                break;
            case '*':
                if (stats == model.COMMENCODES) {
                    s.append("*");
                } else if (stats == model.PRECOMMENTS) {
                    // 如果为斜杠模式则转到多行注释模式
                    stats = model.MORELINECOMMENTS;
                // s.append("  ");
                } else if (stats == model.MORELINECOMMENTS) {
                    // 如果当前为多行注释模式则转到星号模式
                    stats = model.STARMODEL;
                // s.append(" ");
                } else if (stats == model.STARMODEL) {
                // s.append(" ");
                } else if (stats == model.SINGLELINECOMMENTS) {
                // s.append(" ");
                } else if (stats == model.STRINGMODEL) {
                    s.append("*");
                } else if (stats == model.TRANSFERMODEL) {
                    s.append("*");
                }
                break;
            case '"':
                if (stats == model.COMMENCODES) {
                    // 如果当前为普通代码模式则转到字符串模式
                    stats = model.STRINGMODEL;
                    s.append("\"");
                } else if (stats == model.PRECOMMENTS) {
                    // 如果当前为斜杠模式则转到普通代码模式
                    stats = model.COMMENCODES;
                    s.append("/\"");
                } else if (stats == model.STARMODEL) {
                    // 如果当前为星号模式则转到多行注释模式
                    stats = model.MORELINECOMMENTS;
                // s.append(" ");
                } else if (stats == model.SINGLELINECOMMENTS) {
                // s.append(" ");
                } else if (stats == model.STRINGMODEL) {
                    // 如果当前为字符串模式则转到普通代码模式
                    stats = model.COMMENCODES;
                    s.append("\"");
                } else if (stats == model.TRANSFERMODEL) {
                    // 如果当前为转义模式则转到字符串格式
                    stats = model.STRINGMODEL;
                    s.append("\"");
                }
                break;
            case '\'':
                if (stats == model.COMMENCODES) {
                    stats = model.STRINGMODEL;
                    s.append("'");
                } else if (stats == model.PRECOMMENTS) {
                    stats = model.COMMENCODES;
                    s.append("/'");
                } else if (stats == model.STARMODEL) {
                    stats = model.MORELINECOMMENTS;
                // s.append(" ");
                } else if (stats == model.SINGLELINECOMMENTS) {
                // s.append(" ");
                } else if (stats == model.STRINGMODEL) {
                    stats = model.COMMENCODES;
                    s.append("'");
                } else if (stats == model.TRANSFERMODEL) {
                    stats = model.STRINGMODEL;
                    s.append("'");
                }
                break;
            case '\\':
                if (stats == model.COMMENCODES) {
                    s.append("\\");
                } else if (stats == model.PRECOMMENTS) {
                    // 如果当前为斜杠模式则转到普通代码格式
                    stats = model.COMMENCODES;
                    s.append("/\\");
                } else if (stats == model.MORELINECOMMENTS) {
                // s.append(" ");
                } else if (stats == model.STARMODEL) {
                    // 如果当前为星号模式则转到多行注释模式
                    stats = model.MORELINECOMMENTS;
                // s.append(" ");
                } else if (stats == model.SINGLELINECOMMENTS) {
                // s.append(" ");
                } else if (stats == model.STRINGMODEL) {
                    // 如果当前为字符串模式则转到字符串转移模式
                    stats = model.TRANSFERMODEL;
                    s.append("\\");
                } else if (stats == model.TRANSFERMODEL) {
                    // 如果当前为字符串转义模式则转到字符串模式
                    stats = model.STRINGMODEL;
                    s.append("\\");
                }
                break;
            case '\n':
                if (stats == model.COMMENCODES) {
                    s.append("\n");
                } else if (stats == model.PRECOMMENTS) {
                    // 如果当前为斜杠模式则转到普通代码格式
                    stats = model.COMMENCODES;
                    s.append("/\n");
                } else if (stats == model.MORELINECOMMENTS) {
                    s.append("\n");
                } else if (stats == model.STARMODEL) {
                    // 如果当前为星号模式则转到多行注释模式
                    stats = model.MORELINECOMMENTS;
                    s.append("\n");
                } else if (stats == model.SINGLELINECOMMENTS) {
                    // 如果当前为单行注释模式则转到普通代码格式
                    stats = model.COMMENCODES;
                    s.append("\n");
                } else if (stats == model.STRINGMODEL) {
                    s.append("\n");
                } else if (stats == model.TRANSFERMODEL) {
                    s.append("\\n");
                }
                break;
            default:
                if (stats == model.COMMENCODES) {
                    s.append(content.charAt(i));
                } else if (stats == model.PRECOMMENTS) {
                    // 如果当前为斜杠模式则转到普通代码格式
                    stats = model.COMMENCODES;
                    s.append("/" + content.charAt(i));
                } else if (stats == model.STARMODEL) {
                    // 如果当前为星号模式则转到多行注释模式
                    stats = model.MORELINECOMMENTS;
                // s.append(" ");
                } else if (stats == model.SINGLELINECOMMENTS) {
                // s.append(" ");
                } else if (stats == model.STRINGMODEL) {
                    s.append(content.charAt(i));
                } else if (stats == model.TRANSFERMODEL) {
                    // 如果当前为字符串转义模式则转到字符串模式
                    stats = model.STRINGMODEL;
                    s.append(content.charAt(i));
                }
                break;
        }
    }
    String str = s.toString();
    str = str.replaceAll("\\s{1,}[\n]", "\n");
    str = str.replaceAll("[\n]{2,}", "\n");
    stats = model.COMMENCODES;
    return str;
}
