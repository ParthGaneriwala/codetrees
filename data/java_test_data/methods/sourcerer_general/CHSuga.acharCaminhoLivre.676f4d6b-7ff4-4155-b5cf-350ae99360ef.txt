// /////////////////////////// Funcoes auxiliares////////////////////////////
public double acharCaminhoLivre(Vec2 posicao) {
    int i;
    int j;
    final double ANG_LIM = Math.PI / 6;
    final double ANG_INC = Math.PI / 180;
    double menorCusto;
    double anguloMenorCusto;
    Vec2[] adversarios;
    Vec2[] companheiros;
    Vec2[] obstaculos;
    menorCusto = Double.MAX_VALUE;
    anguloMenorCusto = 0;
    companheiros = abstract_robot.getTeammates(currTime);
    adversarios = abstract_robot.getOpponents(currTime);
    obstaculos = new Vec2[adversarios.length + companheiros.length];
    for (i = 0; i < companheiros.length; i++) {
        obstaculos[i] = companheiros[i];
    }
    for (j = 0; j < adversarios.length; j++) {
        obstaculos[i] = adversarios[j];
        i++;
    }
    for (int r = -(int) (ANG_LIM / ANG_INC); r < (int) (ANG_LIM / ANG_INC); r++) {
        double custo = calculaCusto(posicao, obstaculos, r * ANG_INC);
        if (custo < menorCusto) {
            menorCusto = custo;
            anguloMenorCusto = r * ANG_INC;
        }
    }
    if (menorCusto == 0) {
        anguloMenorCusto = 0;
    }
    return anguloMenorCusto + posicao.t;
}
