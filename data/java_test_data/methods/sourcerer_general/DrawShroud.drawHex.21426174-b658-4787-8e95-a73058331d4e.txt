public void drawHex(Graphics graphics, Vector<ViewCell> mapObjects) {
    // Draws the Shroud (4th layer)
    Graphics2D canvas = (Graphics2D) graphics;
    // determines size of the tile.
    int tileSize = (int) (MAX_TILE_SIZE / zoomFactor);
    int x = tileSize;
    int y = tileSize;
    int columns = GameState.mapDimension;
    int rows = GameState.mapDimension;
    int initX = x;
    int initY = y;
    ViewCell activeTile = null;
    Vector<Dimension> clears = new Vector<Dimension>();
    for (int zx = 0; zx < mapObjects.size(); ++zx) {
        activeTile = mapObjects.get(zx);
        if (activeTile.getTileState() == ViewCell.VISIBLE || activeTile.getTileState() == ViewCell.FOGOFWAR) {
            clears.add(new Dimension(activeTile.getX(), activeTile.getY()));
        }
    }
    int i = 0;
    for (int col = 0; col < columns; ++col) {
        for (int row = 0; row < rows; ++row) {
            if (clears.get(i).width == col && clears.get(i).height == row) {
                if (i != clears.size() - 1)
                    ++i;
            } else {
                // /calculate the coordinate this tile is located at in HEX!
                // /display the shroud for thsi tile
                int[] xPoints = { x, x + tileSize / 4, x + 3 * tileSize / 4, x + tileSize, x + 3 * tileSize / 4, x + tileSize / 4, x };
                int[] yPoints = { y + tileSize / 2, y, y, y + tileSize / 2, y + tileSize, y + tileSize, y + tileSize / 2 };
                canvas.fillPolygon(xPoints, yPoints, xPoints.length);
            }
            y += tileSize;
        }
        x = initX += 3 * tileSize / 4;
        ;
        if (col % 2 == 0)
            y = initY - tileSize / 2;
        else
            y = initY;
    }
}
