public BufferedImage outFile(File f) {
    ImageWriter writer = null;
    BufferedImage imageScan;
    if (typeChosed != "png")
        imageScan = new BufferedImage((int) (msp.mainPanel.image.getWidth(this) * Math.pow((double) 4, ((double) msp.mainPanel.zoom - 50) / 50)), (int) (msp.mainPanel.image.getHeight(this) * Math.pow((double) 4, ((double) msp.mainPanel.zoom - 50) / 50)), BufferedImage.TYPE_INT_RGB);
    else
        imageScan = new BufferedImage((int) (msp.mainPanel.image.getWidth(this) * Math.pow((double) 4, ((double) msp.mainPanel.zoom - 50) / 50)), (int) (msp.mainPanel.image.getHeight(this) * Math.pow((double) 4, ((double) msp.mainPanel.zoom - 50) / 50)), BufferedImage.TYPE_4BYTE_ABGR);
    imageScan.getGraphics().drawImage(msp.mainPanel.image.getScaledInstance(imageScan.getWidth(), imageScan.getHeight(), Image.SCALE_SMOOTH), 0, 0, null);
    if (msp.mainPanel.x + msp.mainPanel.w < imageScan.getWidth() && msp.mainPanel.y + msp.mainPanel.h < imageScan.getHeight()) {
        imageScan = imageScan.getSubimage(msp.mainPanel.x, msp.mainPanel.y, msp.mainPanel.w, msp.mainPanel.h);
    }
    ImageTypeSpecifier type = ImageTypeSpecifier.createFromRenderedImage(imageScan);
    Iterator iter = ImageIO.getImageWriters(type, typeChosed);
    if (typeChosed == "jpeg")
        iter = ImageIO.getImageWriters(type, "jpg");
    if (iter.hasNext()) {
        writer = (ImageWriter) iter.next();
    }
    if (writer == null) {
        return imageScan;
    }
    IIOImage iioImage = new IIOImage(imageScan, null, null);
    ImageWriteParam param = writer.getDefaultWriteParam();
    if (typeChosed == "jpg") {
        param.setCompressionMode(ImageWriteParam.MODE_EXPLICIT);
        param.setCompressionQuality(1.0f);
    }
    if (typeChosed == "jpeg") {
        param.setCompressionMode(ImageWriteParam.MODE_DEFAULT);
    }
    ImageOutputStream outputStream;
    try {
        outputStream = ImageIO.createImageOutputStream(f);
        writer.setOutput(outputStream);
        writer.write(null, iioImage, param);
        outputStream.close();
    } catch (IOException e1) {
        // TODO Auto-generated catch block
        e1.printStackTrace();
    }
    return imageScan;
}
