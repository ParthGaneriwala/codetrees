public void evaluer() {
    int operation = depilerOp();
    int type2 = pileType.pop();
    int type1 = pileType.pop();
    int typeResultat = ControleType.verifOpBinaire(operation, type1, type2);
    empilerType(typeResultat);
    if (typeResultat != ERROR) {
        switch(operation) {
            case ADD:
                machineAPile.evalEntier(ADD);
                break;
            case SOUS:
                machineAPile.evalEntier(SOUS);
                break;
            case MUL:
                machineAPile.evalEntier(MUL);
                break;
            case DIV:
                machineAPile.evalEntier(DIV);
                break;
            case INF:
                machineAPile.evalEntier(INF);
                break;
            case SUP:
                machineAPile.evalEntier(SUP);
                break;
            case INFEG:
                machineAPile.evalEntier(INFEG);
                break;
            case SUPEG:
                machineAPile.evalEntier(SUPEG);
                break;
            case ET:
                machineAPile.evalBool(ET);
                break;
            case OU:
                machineAPile.evalBool(OU);
                break;
            case EGAL:
                machineAPile.evalEgalDiff(EGAL);
                break;
            case DIFF:
                machineAPile.evalEgalDiff(DIFF);
                break;
            default:
                System.out.println("Erreur, l'op�ration demand�e n'existe pas");
        }
    } else {
        if ((type1 != ERROR) && (type2 != ERROR)) {
            String error = "at line : " + SimpleCharStream.getBeginLine() + " column : " + SimpleCharStream.getBeginColumn() + " type incompatible " + tokenImage[type1] + " " + tokenImage[operation] + " " + tokenImage[type2];
            System.out.println(error);
        }
    }
}
