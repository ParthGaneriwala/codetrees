private boolean evalNormalState(ModelEvent e) {
    switch(ModelEventType.valueOf(e.getType())) {
        case TOGGLEMISSION:
            GameObject go = dh.getCurrentSelection();
            if (go.objectType() != GameObjectType.UNIT) {
                MainScreen.writeToConsole("Can only assign missions to unit", Color.RED);
                return true;
            } else {
                MainScreen.writeToConsole("Entering Assign Mission mode", Color.RED);
                um = new UnitMission(dh.getCurrentSelectionID());
                melState = MISSIONSTATE;
            }
            return true;
        case TOGGLEFREEROAM:
            MainScreen.writeToConsole("Entering Free Roam mode", Color.RED);
            melState = FREEROAMSTATE;
            return true;
        case SELECTNEXTUNIT:
            // MainScreen.writeToConsole(" Select Next Unit", Color.RED);
            NextUnit nu = new NextUnit(e.getPlayerID());
            nu.execute(dh);
            return true;
        case SELECTNEXTBASE:
            // MainScreen.writeToConsole(" Select Next Base", Color.RED);
            NextBase nb = new NextBase(e.getPlayerID());
            nb.execute(dh);
            return true;
        case NEXTTURN:
            MainScreen.writeToConsole(" Player " + e.getPlayerID() + " Begin Next Turn", Color.RED);
            NewTurn nt = new NewTurn(e.getPlayerID());
            nt.execute(dh);
            return true;
        case MOVEN:
            // MainScreen.writeToConsole(" Move Unit North", Color.RED);
            Move mn = new Move(MoveDirection.N);
            mn.execute(dh);
            return true;
        case MOVENW:
            // MainScreen.writeToConsole(" Move Unit Northwest", Color.RED);
            Move mnw = new Move(MoveDirection.NW);
            mnw.execute(dh);
            return true;
        case MOVEW:
            // MainScreen.writeToConsole(" Move Unit West", Color.RED);
            Move mw = new Move(MoveDirection.W);
            mw.execute(dh);
            return true;
        case MOVESW:
            // MainScreen.writeToConsole(" Move Unit Southwest", Color.RED);
            Move msw = new Move(MoveDirection.SW);
            msw.execute(dh);
            return true;
        case MOVES:
            // MainScreen.writeToConsole(" Move Unit South", Color.RED);
            Move ms = new Move(MoveDirection.S);
            ms.execute(dh);
            return true;
        case MOVESE:
            // MainScreen.writeToConsole(" Move Unit Southeast", Color.RED);
            Move mse = new Move(MoveDirection.SE);
            mse.execute(dh);
            return true;
        case MOVEE:
            // MainScreen.writeToConsole(" Move Unit East", Color.RED);
            Move me = new Move(MoveDirection.E);
            me.execute(dh);
            return true;
        case MOVENE:
            // MainScreen.writeToConsole(" Move Unit Northeast", Color.RED);
            Move mne = new Move(MoveDirection.NE);
            mne.execute(dh);
            return true;
        case UNITDOESNOTHING:
            // MainScreen.writeToConsole(" Unit Does Nothing", Color.RED);
            return true;
        case PICKUPITEM:
            // MainScreen.writeToConsole("Pickup Item", Color.RED);
            PickupItemAction pu = new PickupItemAction();
            pu.execute(dh);
            return true;
        case DROPITEM:
            // MainScreen.writeToConsole(" Drop Item", Color.RED);
            DropItemAction dr = new DropItemAction();
            dr.execute(dh);
            return true;
        case USEITEM:
            // MainScreen.writeToConsole(" Use Item", Color.RED);
            UseItem ui = new UseItem();
            ui.execute(dh);
            return true;
        case BUILDCOLONIST:
            // MainScreen.writeToConsole(" Build Colonist", Color.RED);
            BuildUnit bc = new BuildUnit(UnitType.COLONIST, e.getPlayerID());
            bc.execute(dh);
            return true;
        case BUILDEXPLORER:
            // MainScreen.writeToConsole(" Build Explorer", Color.RED);
            BuildUnit be = new BuildUnit(UnitType.EXPLORER, e.getPlayerID());
            be.execute(dh);
            return true;
        case BUILDMELEE:
            // MainScreen.writeToConsole(" Build Melee", Color.RED);
            BuildUnit bm = new BuildUnit(UnitType.MELEE, e.getPlayerID());
            bm.execute(dh);
            return true;
        case BUILDRANGED:
            // MainScreen.writeToConsole(" Build Ranged", Color.RED);
            BuildUnit br = new BuildUnit(UnitType.RANGED, e.getPlayerID());
            br.execute(dh);
            return true;
        case BUILDBASE:
            // MainScreen.writeToConsole(" Build Base", Color.RED);
            BuildBase bb = new BuildBase(e.getPlayerID());
            bb.execute(dh);
            return true;
        case HEALUNIT:
            // MainScreen.writeToConsole(" Heal Unit", Color.RED);
            HealUnit hua = new HealUnit();
            hua.execute(dh);
            return true;
        case SNEAK:
            // MainScreen.writeToConsole(" Use Skill: Sneak", Color.RED);
            Sneak s = new Sneak();
            s.execute(dh);
            return true;
        case OBSERVE:
            melState = FREEROAMSTATE;
            MainScreen.writeToConsole("Now move the cursor to target for Observe", Color.RED);
            return true;
        case REMOVETRAP:
            melState = FREEROAMSTATE;
            MainScreen.writeToConsole("Now move the cursor to target for Remove Trap", Color.RED);
            return true;
        case SETTRAP:
            Trap t = new Trap();
            t.execute(dh);
            // MainScreen.writeToConsole(" Set Trap", Color.RED);
            return true;
        case SELECTRESEARCHTECH:
            ChangeCurrentResearch c = new ChangeCurrentResearch(e.getPlayerID());
            c.execute(dh);
            return true;
        case ATTACK:
            melState = FREEROAMSTATE;
            MainScreen.writeToConsole("Now move the cursor to target for Attack", Color.RED);
            return true;
        case MAKEARMY:
            // MainScreen.writeToConsole("Make Army", Color.RED);
            ObjectID[] objids = source.view.ViewData.getSelectedObjectIDS();
            Unit[] units = new Unit[objids.length];
            int unitsind = 0;
            for (ObjectID objid : objids) {
                units[unitsind] = (Unit) (dh.objectQuery(objid));
                unitsind++;
            }
            MakeArmy ma = new MakeArmy(units, e.getPlayerID());
            ma.execute(dh);
            return true;
    }
    return false;
}
