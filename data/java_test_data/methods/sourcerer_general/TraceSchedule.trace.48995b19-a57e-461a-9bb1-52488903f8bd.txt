void trace(List<tree.Stm> l) {
    for (; ; ) {
        tree.LABEL lab = (tree.LABEL) l.head;
        table.remove(lab.label);
        List<tree.Stm> last = getLast(l);
        tree.Stm s = last.tail.head;
        if (s instanceof tree.JUMP) {
            tree.JUMP j = (tree.JUMP) s;
            List<tree.Stm> target = (List<tree.Stm>) table.get(j.targets.head);
            if (j.targets.tail == null && target != null) {
                last.tail = target;
                l = target;
            } else {
                last.tail.tail = getNext();
                return;
            }
        } else if (s instanceof tree.CJUMP) {
            tree.CJUMP j = (tree.CJUMP) s;
            List<tree.Stm> t = (List<tree.Stm>) table.get(j.ifTrue);
            List<tree.Stm> f = (List<tree.Stm>) table.get(j.ifFalse);
            if (f != null) {
                last.tail.tail = f;
                l = f;
            } else if (t != null) {
                last.tail.head = new tree.CJUMP(tree.CJUMP.notRel(j.op), j.left, j.right, j.ifFalse, j.ifTrue);
                last.tail.tail = t;
                l = t;
            } else {
                temp.Label ff = new temp.Label();
                last.tail.head = new tree.CJUMP(j.op, j.left, j.right, j.ifTrue, ff);
                last.tail.tail = new List<tree.Stm>(new tree.LABEL(ff), new List<tree.Stm>(new tree.JUMP(j.ifFalse), getNext()));
                return;
            }
        } else
            throw new Error("Bad basic block in TraceSchedule");
    }
}
