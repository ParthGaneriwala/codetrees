@Override
protected void analyze() throws SQLException {
    // we are going to treat each delay separately, so we we should begin by
    // looping through them
    // we also want to loop through all the possible sessions
    Vector<Integer> delays = new Vector<Integer>();
    delays.add(50);
    // delays.add(100);
    // delays.add(200);
    // delays.add(400);
    // delays.add(800);
    // delays.add(1600);
    // delays.add(3200);
    // delays.add(6400);
    PeckCounter peckCounter;
    peckCounter = new PeckCounter(_resultsDB);
    Statement query = _resultsDB.createStatement();
    String q = "SELECT * FROM TrialResults";
    if (_queryRestriction.length() > 0)
        q = q + " WHERE " + _queryRestriction;
    q = q + " ORDER BY TrialNum ASC";
    query.execute(q);
    // statement
    // .execute("SELECT TrialNum, Response, Item6,
    // IncorrectCorrections as incCorr FROM TrialResults Where
    // ResponseTime < 500 ORDER BY TrialNum ASC");
    // statement
    // .execute("SELECT TrialNum, Response, Item1, Item2, Item6, Item4, Item5, IncorrectCorrections as incCorr "
    // +
    // "FROM TrialResults where Transfer <> 1 ORDER BY TrialNum ASC");
    ResultSet rs = query.getResultSet();
    // fix for Leising's version of the .TR file
    int previousTrialNumber = -1;
    while (rs.next()) {
        CDTrial cdto = new CDTrial(rs);
        int trialNumber = cdto.getTrialNumber();
        int loc1 = cdto.getCorrectLocation();
        int loc2 = cdto.getComparisonLocation();
        // check to make sure this isn't a duplicate trial
        if (cdto.getTrialNumber() == previousTrialNumber) {
        // This is a correction trial, bail
        // System.out.println("duplicate: " + trialNumber);
        } else {
            previousTrialNumber = trialNumber;
            // be pecked was the screen
            if (peckCounter.getPecksAtTrial(trialNumber) > 0 && peckCounter.getLastPeckPosition(trialNumber) > 0 && cdto.getDisplaySize() > 1) {
                lastPeckLocationCounts[peckCounter.getLastPeckPosition(trialNumber) - 1]++;
                locationCounts[loc1 - 1]++;
                locationCounts[loc2 - 1]++;
                // get the number of pecks at each location
                peckLocationTotals[loc1 - 1] += peckCounter.getPeckCountByLocation(trialNumber, loc1);
                peckLocationTotals[loc2 - 1] += peckCounter.getPeckCountByLocation(trialNumber, loc2);
                // match their choice and it was incorrect
                if (!cdto.isCorrectTrial() && (cdto.getResponseLocation() == peckCounter.getLastPeckPosition(trialNumber))) {
                    perseverationIndex[cdto.getResponseLocation() - 1]++;
                }
            }
            if (cdto.isCorrectTrial()) {
                corrLocationPeckCounts[cdto.getCorrectLocation() - 1]++;
            }
            corrLocationCounts[cdto.getCorrectLocation() - 1]++;
            trialPeckIndex.set(peckCounter.getPecksAtTrial(trialNumber), trialPeckIndex.get(peckCounter.getPecksAtTrial(trialNumber)) + 1);
            alternationIndex.set(peckCounter.getNumberOfAlternations(trialNumber), alternationIndex.get(peckCounter.getNumberOfAlternations(trialNumber)) + 1);
            trial_counter++;
            if (cdto.isCorrectTrial()) {
                overall_correct++;
            }
            // did pecks occur pre-choice display
            if (peckCounter.getPecksAtTrial(trialNumber) > 0) {
                int interval = (int) (peckCounter.getLastPeckRT(trialNumber) / 1000);
                if (interval >= 5)
                    interval = 4;
                // and NOT last peck on screen
                if (peckCounter.getLastPeckPosition(trialNumber) > 0) {
                    // Last Peck == PECK_CORRECT
                    if (peckCounter.getLastPeckPosition(trialNumber) == cdto.getCorrectLocation()) {
                        peckCorrect_Counter++;
                        peckCorrect_CounterByRT[interval]++;
                        // low peck count
                        if (peckCounter.getPecksAtTrial(trialNumber) <= 2.0) {
                            peckCount_peckType_Counter[LOW_COUNT_PECK_CORRECT]++;
                        } else // high peck count
                        {
                            peckCount_peckType_Counter[HIGH_COUNT_PECK_CORRECT]++;
                        }
                        // 2,4 alt count (RET_ALT
                        if (peckCounter.getNumberOfAlternations(trialNumber) == 2 || peckCounter.getNumberOfAlternations(trialNumber) == 4) {
                            peckAlt_peckType_Counter[RET_ALT_PECK_CORRECT]++;
                        } else {
                            peckAlt_peckType_Counter[TRUE_ALT_PECK_CORRECT]++;
                        }
                        if (cdto.isCorrectTrial()) {
                            peckCorrect_NumRight++;
                            peckCorrect_NumRightByRT[interval]++;
                            // low peck count
                            if (peckCounter.getPecksAtTrial(trialNumber) <= 2.0) {
                                peckCount_peckType_Correct[LOW_COUNT_PECK_CORRECT]++;
                            } else // high peck count
                            {
                                peckCount_peckType_Correct[HIGH_COUNT_PECK_CORRECT]++;
                            }
                            // 2,4 alt count (RET_ALT
                            if (peckCounter.getNumberOfAlternations(trialNumber) == 2 || peckCounter.getNumberOfAlternations(trialNumber) == 4) {
                                peckAlt_peckType_Correct[RET_ALT_PECK_CORRECT]++;
                            } else {
                                peckAlt_peckType_Correct[TRUE_ALT_PECK_CORRECT]++;
                            }
                        }
                    } else // Last Peck == PECK_INCORRECT
                    {
                        peckIncorrect_Counter++;
                        peckIncorrect_CounterByRT[interval]++;
                        // low peck count
                        if (peckCounter.getPecksAtTrial(trialNumber) <= 2.0) {
                            peckCount_peckType_Counter[LOW_COUNT_PECK_INCORRECT]++;
                        } else // high peck count
                        {
                            peckCount_peckType_Counter[HIGH_COUNT_PECK_INCORRECT]++;
                        }
                        // 2,4 alt count (RET_ALT
                        if (peckCounter.getNumberOfAlternations(trialNumber) == 2 || peckCounter.getNumberOfAlternations(trialNumber) == 4) {
                            peckAlt_peckType_Counter[RET_ALT_PECK_INCORRECT]++;
                        } else {
                            peckAlt_peckType_Counter[TRUE_ALT_PECK_INCORRECT]++;
                        }
                        if (cdto.isCorrectTrial()) {
                            peckIncorrect_NumRight++;
                            peckIncorrect_NumRightByRT[interval]++;
                            // low peck count
                            if (peckCounter.getPecksAtTrial(trialNumber) <= 2.0) {
                                peckCount_peckType_Correct[LOW_COUNT_PECK_INCORRECT]++;
                            } else // high peck count
                            {
                                peckCount_peckType_Correct[HIGH_COUNT_PECK_INCORRECT]++;
                            }
                            // 2,4 alt count (RET_ALT
                            if (peckCounter.getNumberOfAlternations(trialNumber) == 2 || peckCounter.getNumberOfAlternations(trialNumber) == 4) {
                                peckAlt_peckType_Correct[RET_ALT_PECK_INCORRECT]++;
                            } else {
                                peckAlt_peckType_Correct[TRUE_ALT_PECK_INCORRECT]++;
                            }
                        }
                    }
                // end IF PECK INC
                } else // end IF PECK POS > 0
                {
                    peckScreen_Counter++;
                    if (cdto.isCorrectTrial()) {
                        peckScreen_NumRight++;
                        peckCorrect_NumRightByRT[interval]++;
                    }
                    peckCorrect_CounterByRT[interval]++;
                }
            } else // end IF PECK
            {
                noPeck_Counter++;
                if (cdto.isCorrectTrial())
                    noPeck_NumRight++;
            }
        }
    // }// end IF SHAPE_TRIAL
    }
    accumulator[0] += noPeck_Counter;
    accumulator[1] += peckCorrect_Counter;
    accumulator[2] += peckIncorrect_Counter;
    accumulator[3] += peckScreen_Counter;
}
