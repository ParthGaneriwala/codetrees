protected String getStringInternal(int columnIndex, boolean checkDateTypes) throws SQLException {
    if (!this.isBinaryEncoded) {
        checkRowPos();
        checkColumnBounds(columnIndex);
        if (this.fields == null) {
            throw SQLError.createSQLException(Messages.getString(// $NON-NLS-1$
            "ResultSet.Query_generated_no_fields_for_ResultSet_99"), SQLError.SQL_STATE_INVALID_COLUMN_NUMBER, getExceptionInterceptor());
        }
        // JDBC is 1-based, Java is not !?
        int internalColumnIndex = columnIndex - 1;
        if (this.thisRow.isNull(internalColumnIndex)) {
            this.wasNullFlag = true;
            return null;
        }
        this.wasNullFlag = false;
        Field metadata = this.fields[internalColumnIndex];
        String stringVal = null;
        if (metadata.getMysqlType() == MysqlDefs.FIELD_TYPE_BIT) {
            if (metadata.isSingleBit()) {
                byte[] value = this.thisRow.getColumnValue(internalColumnIndex);
                if (value.length == 0) {
                    return String.valueOf(convertToZeroWithEmptyCheck());
                }
                return String.valueOf(value[0]);
            }
            return String.valueOf(getNumericRepresentationOfSQLBitType(columnIndex));
        }
        String encoding = metadata.getCharacterSet();
        stringVal = this.thisRow.getString(internalColumnIndex, encoding, this.connection);
        if (metadata.getMysqlType() == MysqlDefs.FIELD_TYPE_YEAR) {
            if (!this.connection.getYearIsDateType()) {
                return stringVal;
            }
            Date dt = getDateFromString(stringVal, columnIndex, null);
            if (dt == null) {
                this.wasNullFlag = true;
                return null;
            }
            this.wasNullFlag = false;
            return dt.toString();
        }
        if (checkDateTypes && !this.connection.getNoDatetimeStringSync()) {
            switch(metadata.getSQLType()) {
                case Types.TIME:
                    Time tm = getTimeFromString(stringVal, null, columnIndex, this.getDefaultTimeZone(), false);
                    if (tm == null) {
                        this.wasNullFlag = true;
                        return null;
                    }
                    this.wasNullFlag = false;
                    return tm.toString();
                case Types.DATE:
                    Date dt = getDateFromString(stringVal, columnIndex, null);
                    if (dt == null) {
                        this.wasNullFlag = true;
                        return null;
                    }
                    this.wasNullFlag = false;
                    return dt.toString();
                case Types.TIMESTAMP:
                    Timestamp ts = getTimestampFromString(columnIndex, null, stringVal, this.getDefaultTimeZone(), false);
                    if (ts == null) {
                        this.wasNullFlag = true;
                        return null;
                    }
                    this.wasNullFlag = false;
                    return ts.toString();
                default:
                    break;
            }
        }
        return stringVal;
    }
    return getNativeString(columnIndex);
}
