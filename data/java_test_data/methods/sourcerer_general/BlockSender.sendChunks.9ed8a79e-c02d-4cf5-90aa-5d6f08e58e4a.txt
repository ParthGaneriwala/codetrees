private int sendChunks(ByteBuffer pkt, int maxChunks, OutputStream out) throws IOException {
    // Sends multiple chunks in one packet with a single write().
    int len = Math.min((int) (endOffset - offset), bytesPerChecksum * maxChunks);
    if (len == 0) {
        return 0;
    }
    int numChunks = (len + bytesPerChecksum - 1) / bytesPerChecksum;
    int packetLen = len + numChunks * checksumSize + 4;
    pkt.clear();
    // write packet header
    pkt.putInt(packetLen);
    pkt.putLong(offset);
    pkt.putLong(seqno);
    pkt.put((byte) ((offset + len >= endOffset) ? 1 : 0));
    // why no ByteBuf.putBoolean()?
    pkt.putInt(len);
    int checksumOff = pkt.position();
    int checksumLen = numChunks * checksumSize;
    byte[] buf = pkt.array();
    if (checksumSize > 0 && checksumIn != null) {
        try {
            checksumIn.readFully(buf, checksumOff, checksumLen);
        } catch (IOException e) {
            LOG.warn(" Could not read or failed to veirfy checksum for data" + " at offset " + offset + " for block " + block + " got : " + StringUtils.stringifyException(e));
            IOUtils.closeStream(checksumIn);
            checksumIn = null;
            if (corruptChecksumOk) {
                if (checksumOff < checksumLen) {
                    // Just fill the array with zeros.
                    Arrays.fill(buf, checksumOff, checksumLen, (byte) 0);
                }
            } else {
                throw e;
            }
        }
    }
    int dataOff = checksumOff + checksumLen;
    if (blockInPosition < 0) {
        // normal transfer
        IOUtils.readFully(blockIn, buf, dataOff, len);
        if (verifyChecksum) {
            int dOff = dataOff;
            int cOff = checksumOff;
            int dLeft = len;
            for (int i = 0; i < numChunks; i++) {
                checksum.reset();
                int dLen = Math.min(dLeft, bytesPerChecksum);
                checksum.update(buf, dOff, dLen);
                if (!checksum.compare(buf, cOff)) {
                    throw new ChecksumException("Checksum failed at " + (offset + len - dLeft), len);
                }
                dLeft -= dLen;
                dOff += dLen;
                cOff += checksumSize;
            }
        }
    // writing is done below (mainly to handle IOException)
    }
    try {
        if (blockInPosition >= 0) {
            // use transferTo(). Checks on out and blockIn are already done.
            SocketOutputStream sockOut = (SocketOutputStream) out;
            // first write the packet
            sockOut.write(buf, 0, dataOff);
            // no need to flush. since we know out is not a buffered stream.
            sockOut.transferToFully(((FileInputStream) blockIn).getChannel(), blockInPosition, len);
            blockInPosition += len;
        } else {
            // normal transfer
            out.write(buf, 0, dataOff + len);
        }
    } catch (IOException e) {
        /* exception while writing to the client (well, with transferTo(),
       * it could also be while reading from the local file). Many times 
       * this error can be ignored. We will let the callers distinguish this 
       * from other exceptions if this is not a subclass of IOException. 
       */
        if (e.getClass().equals(IOException.class)) {
            // "se" could be a new class in stead of SocketException.
            IOException se = new SocketException("Original Exception : " + e);
            se.initCause(e);
            /* Cange the stacktrace so that original trace is not truncated
         * when printed.*/
            se.setStackTrace(e.getStackTrace());
            throw se;
        }
        throw e;
    }
    if (throttler != null) {
        // rebalancing so throttle
        throttler.throttle(packetLen);
    }
    return len;
}
