public void layoutContainer(Container target) {
    Insets insets = target.getInsets();
    int availwid = target.getWidth() - insets.getHorizontal();
    Metrics metrics = computeMetrics(target, false, availwid);
    int totwidth = sum(metrics.columnWidths) + (metrics.columnWidths.length - 1) * _colgap;
    int totheight = sum(metrics.rowHeights) + (computeRows(target, false) - 1) * _rowgap;
    // account for our horizontal alignment
    int sx = insets.left;
    if (_halign == RIGHT) {
        sx += target.getWidth() - insets.getHorizontal() - totwidth;
    } else if (_halign == CENTER) {
        sx += (target.getWidth() - insets.getHorizontal() - totwidth) / 2;
    }
    // account for our vertical alignment
    int y = insets.bottom + totheight;
    if (_valign == CENTER) {
        y += (target.getHeight() - insets.getVertical() - totheight) / 2;
    } else if (_valign == TOP) {
        y = target.getHeight() - insets.top;
    }
    int row = 0, col = 0, x = sx;
    for (int ii = 0, ll = target.getComponentCount(); ii < ll; ii++) {
        Component child = target.getComponent(ii);
        int width = Math.min(metrics.columnWidths[col], availwid);
        child.setBounds(x, y - metrics.rowHeights[row], width, metrics.rowHeights[row]);
        x += (metrics.columnWidths[col] + _colgap);
        if (++col == metrics.columnWidths.length) {
            y -= (metrics.rowHeights[row] + _rowgap);
            row++;
            col = 0;
            x = sx;
        }
    }
}
