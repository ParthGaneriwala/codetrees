/**
 * these tests represent what would typically happen when the InstanceConsumer is a DataWriter
 *
 * @throws UIMAException
 */
@Test
public void testDataWriter() throws UIMAException {
    UimaContext context = UimaContextFactory.createUimaContext(ChunkLabeler_ImplBase.PARAM_CHUNK_ANNOTATION_CLASS_NAME, Token.class.getName(), Chunker.PARAM_LABELED_ANNOTATION_CLASS_NAME, Subtoken.class.getName());
    DefaultChunkLabeler defaultChunkLabeler = InitializableFactory.create(context, DefaultChunkLabeler.class);
    jCas.setDocumentText(// Albert
    "Technological progress is like an axe in the hands of a pathological criminal.");
    // Einstein
    Sentence sentence = new Sentence(jCas, 0, 78);
    sentence.addToIndexes();
    // Technological
    Subtoken subtoken1 = AnnotationFactory.createAnnotation(jCas, 0, 13, Subtoken.class);
    // progress
    Subtoken subtoken2 = AnnotationFactory.createAnnotation(jCas, 14, 22, Subtoken.class);
    // is
    Subtoken subtoken3 = AnnotationFactory.createAnnotation(jCas, 23, 25, Subtoken.class);
    // like
    Subtoken subtoken4 = AnnotationFactory.createAnnotation(jCas, 26, 30, Subtoken.class);
    // an
    Subtoken subtoken5 = AnnotationFactory.createAnnotation(jCas, 31, 33, Subtoken.class);
    // axe
    Subtoken subtoken6 = AnnotationFactory.createAnnotation(jCas, 34, 37, Subtoken.class);
    // in
    Subtoken subtoken7 = AnnotationFactory.createAnnotation(jCas, 38, 40, Subtoken.class);
    // the
    Subtoken subtoken8 = AnnotationFactory.createAnnotation(jCas, 41, 44, Subtoken.class);
    // hands
    Subtoken subtoken9 = AnnotationFactory.createAnnotation(jCas, 45, 50, Subtoken.class);
    // of
    Subtoken subtoken10 = AnnotationFactory.createAnnotation(jCas, 51, 53, Subtoken.class);
    // a
    Subtoken subtoken11 = AnnotationFactory.createAnnotation(jCas, 54, 55, Subtoken.class);
    // pathological
    Subtoken subtoken12 = AnnotationFactory.createAnnotation(jCas, 56, 68, Subtoken.class);
    // criminal
    Subtoken subtoken13 = AnnotationFactory.createAnnotation(jCas, 69, 77, Subtoken.class);
    // .
    Subtoken subtoken14 = AnnotationFactory.createAnnotation(jCas, 77, 78, Subtoken.class);
    // Technological
    AnnotationFactory.createAnnotation(jCas, 0, 13, Token.class);
    // is
    AnnotationFactory.createAnnotation(jCas, 23, 25, Token.class);
    // like
    AnnotationFactory.createAnnotation(jCas, 26, 30, Token.class);
    // an axe in
    AnnotationFactory.createAnnotation(jCas, 31, 40, Token.class);
    // hands of
    AnnotationFactory.createAnnotation(jCas, 45, 53, Token.class);
    // a
    AnnotationFactory.createAnnotation(jCas, 54, 55, Token.class);
    // pathological
    AnnotationFactory.createAnnotation(jCas, 56, 68, Token.class);
    // .
    AnnotationFactory.createAnnotation(jCas, 77, 78, Token.class);
    defaultChunkLabeler.chunks2Labels(jCas, sentence);
    assertEquals("B-Token", defaultChunkLabeler.getLabel(subtoken1));
    assertEquals(ChunkLabeler_ImplBase.OUTSIDE_LABEL, defaultChunkLabeler.getLabel(subtoken2));
    assertEquals("B-Token", defaultChunkLabeler.getLabel(subtoken3));
    assertEquals("B-Token", defaultChunkLabeler.getLabel(subtoken4));
    assertEquals("B-Token", defaultChunkLabeler.getLabel(subtoken5));
    assertEquals("I-Token", defaultChunkLabeler.getLabel(subtoken6));
    assertEquals("I-Token", defaultChunkLabeler.getLabel(subtoken7));
    assertEquals(ChunkLabeler_ImplBase.OUTSIDE_LABEL, defaultChunkLabeler.getLabel(subtoken8));
    assertEquals("B-Token", defaultChunkLabeler.getLabel(subtoken9));
    assertEquals("I-Token", defaultChunkLabeler.getLabel(subtoken10));
    assertEquals("B-Token", defaultChunkLabeler.getLabel(subtoken11));
    assertEquals("B-Token", defaultChunkLabeler.getLabel(subtoken12));
    assertEquals(ChunkLabeler_ImplBase.OUTSIDE_LABEL, defaultChunkLabeler.getLabel(subtoken13));
    assertEquals("B-Token", defaultChunkLabeler.getLabel(subtoken14));
}
