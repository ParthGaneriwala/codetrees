public static void main(String[] args) {
    long previous = System.currentTimeMillis();
    // TODO Auto-generated method stub
    if (args.length != 3)
        errorMsg("Error: Need 4 arguments!");
    try {
        // handle cluster input
        int numberClusters = Integer.parseInt(args[0]);
        if (numberClusters < 1)
            errorMsg("Error: number of cluster must greater or equal 1");
        // handle file input/output
        String fi = args[1];
        String fo = args[2];
        readFile(fi);
        clusterCoordinate = new double[numberClusters][dimension];
        clusterCenter = new Vector[numberClusters];
        for (int i = 0; i < numberClusters; i++) clusterCenter[i] = new Vector<double[]>();
        // initialize cluster center to be first K data points
        for (int i = 0; i < numberClusters; i++) {
            for (int j = 0; j < dimension; j++) {
                clusterCoordinate[i][j] = coordinate[i][j];
            }
        }
        boolean updateCenter = true;
        int k = 0;
        // Algorithm
        while (updateCenter) {
            // print(clusterCoordinate);
            for (int i = 0; i < coordinate.length; i++) {
                int index = nearest(clusterCoordinate, coordinate[i], dimension);
                // print("Index: " +index);
                // assign point to nearest cluster
                clusterCenter[index].add(coordinate[i]);
            }
            // recalculate means
            updateCenter = false;
            for (int i = 0; i < numberClusters; i++) {
                boolean result = copyPoint(clusterCoordinate[i], mean(clusterCenter[i], dimension));
                if (result == true)
                    updateCenter = true;
            }
            for (int i = 0; i < numberClusters; i++) {
                // print(clusterCenter[i].size()+"");
                clusterCenter[i].setSize(0);
            }
        }
        // print(clusterCoordinate);
        writeFile(fo, clusterCoordinate);
        long current = System.currentTimeMillis();
        print("" + (current - previous));
    } catch (Exception ex) {
        errorMsg("Error: wrong input");
    }
}
