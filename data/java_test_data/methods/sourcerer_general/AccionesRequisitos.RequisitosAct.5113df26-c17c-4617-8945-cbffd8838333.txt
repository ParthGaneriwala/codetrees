public ActionForward RequisitosAct(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
    // Salidas
    final String SALIDA_0 = "requisitos";
    String salida = SALIDA_0;
    Session s = HibernateUtil.getSessionFactory().getCurrentSession();
    Transaction tr = s.beginTransaction();
    try {
        FRequisitos fFRequisitos = (FRequisitos) form;
        Requisitos requisitos = (Requisitos) s.load(Requisitos.class, new Long(fFRequisitos.getIdRequisito()));
        if (fFRequisitos.getAsignatura() == 0)
            requisitos.setAsignatura(null);
        else if ((requisitos.getAsignatura() == null) || (requisitos.getAsignatura().getIdAsignatura() != fFRequisitos.getAsignatura())) {
            Asignatura obj = (Asignatura) s.load(Asignatura.class, fFRequisitos.getAsignatura());
            requisitos.setAsignatura(obj);
        }
        requisitos.setRequisitos(fFRequisitos.getRequisitos());
        // Feed for combo listAsignatura.
        {
            java.util.List<ve.usb.cohesion.runtime.Pair> list = (java.util.List<ve.usb.cohesion.runtime.Pair>) s.createQuery("select new ve.usb.cohesion.runtime.Pair(codigo, idAsignatura) " + "from Asignatura").list();
            list.add(0, new ve.usb.cohesion.runtime.Pair("Ninguna", 0));
            fFRequisitos.setListAsignatura(list);
        }
        // Feed for combo listGrupo.
        {
            java.util.List<ve.usb.cohesion.runtime.Pair> list = (java.util.List<ve.usb.cohesion.runtime.Pair>) s.createQuery("select new ve.usb.cohesion.runtime.Pair(nombre, idGrupo) " + "from Grupo").list();
            list.add(0, new ve.usb.cohesion.runtime.Pair("Ninguna", 0));
            fFRequisitos.setListGrupo(list);
        }
        java.util.List listA = (java.util.List) s.createQuery("from Asignatura").list();
        request.setAttribute("L_Asignatura", listA);
        request.getSession().setAttribute("idGrupo", fFRequisitos.getGrupo());
        request.getSession().setAttribute("idRequisito", requisitos.getIdRequisito());
        tr.commit();
    } catch (Exception ex) {
        tr.rollback();
        throw ex;
    }
    return mapping.findForward(salida);
}
