public static Order readFromOrderXls(File file) throws IOException {
    Order order = new Order();
    ArrayList<OrderDetail> ods = new ArrayList<OrderDetail>();
    SaleType st = new SaleType();
    Person p = new Person();
    Customer c = new Customer();
    Dept d = new Dept();
    p.setDept(d);
    order.setSaleType(st);
    order.setOds(ods);
    order.setP(p);
    order.setC(c);
    FileInputStream fis = null;
    HSSFWorkbook workBook = null;
    HSSFSheet orderSheet = null;
    HSSFSheet orderDetailSheet = null;
    HSSFRow row = null;
    HSSFCell cell = null;
    int rowNum = 0;
    int cellNum = 0;
    String cellValue = null;
    try {
        fis = new FileInputStream(file);
        workBook = new HSSFWorkbook(fis);
        orderSheet = workBook.getSheet(ORDER_SHEET_NAME);
        orderDetailSheet = workBook.getSheet(ORDER_DETAIL_SHEET_NAME);
        // ��ʼ��order��Ϣ
        row = orderSheet.getRow(1);
        cellNum = row.getLastCellNum();
        for (int i = 1; i < cellNum; i++) {
            cellValue = row.getCell(i).getRichStringCellValue().getString();
            switch(i) {
                case 1:
                    order.setCode(cellValue);
                    break;
                case 2:
                    order.setiVtid(Integer.parseInt(cellValue));
                    break;
                case 3:
                    st.setId(cellValue);
                    break;
                case 4:
                    st.setName(cellValue);
                    break;
                case 5:
                    order.setBusinessType(cellValue);
                    break;
                case 6:
                    order.setOrderDate(DateUtil.getDateFormDateString(cellValue));
                    break;
                case 7:
                    c.setId(cellValue);
                    break;
                case 8:
                    c.setName(cellValue);
                    break;
                case 9:
                    d.setId(cellValue);
                    break;
                case 10:
                    d.setName(cellValue);
                    break;
                case 11:
                    p.setId(cellValue);
                    break;
                case 12:
                    p.setName(cellValue);
                    break;
                case 13:
                    order.setRemark(cellValue);
                    break;
            }
        }
        // ��ʼ��orderDetails
        rowNum = orderDetailSheet.getLastRowNum();
        cellNum = orderDetailSheet.getRow(0).getLastCellNum();
        for (int i = 1; i <= rowNum; i++) {
            row = orderDetailSheet.getRow(i);
            OrderDetail od = new OrderDetail();
            Inventory inv = new Inventory();
            od.setInventory(inv);
            for (int j = 0; j < cellNum; j++) {
                cell = row.getCell(j);
                cellValue = cell.getRichStringCellValue().getString();
                switch(j) {
                    case 0:
                        od.setNo(Integer.parseInt(cellValue));
                        break;
                    case 2:
                        inv.setId(cellValue);
                        break;
                    case 3:
                        inv.setName(cellValue);
                        break;
                    case 4:
                        inv.setStandard(cellValue);
                        break;
                    case 5:
                        UserDefine ud = new UserDefine();
                        ud.setcValue(cellValue);
                        od.setPacking(ud);
                        break;
                    case 6:
                        od.setPiece(Integer.parseInt(cellValue));
                        break;
                    case 7:
                        od.setCount(new BigDecimal(cellValue));
                        break;
                    case 8:
                        if (cellValue != null && cellValue.trim().length() > 0) {
                            od.setPrice(new BigDecimal(cellValue));
                        }
                        break;
                    case 9:
                        od.setSum(new BigDecimal(cellValue));
                        break;
                    case 10:
                        od.setSendDate(DateUtil.getDateFormDateString(cellValue));
                }
            }
            ods.add(od);
        }
    } finally {
        if (fis != null) {
            fis.close();
        }
        fis = null;
    }
    return order;
}
