private Point[] calculateTrianglePositions(Point srcPoint, Point destPoint, TriangleParameters triangleParams, Node destNode) {
    Point[] vertices = new Point[3];
    if (srcPoint.x == destPoint.x) {
        // The destination is straight below the source
        double heightOfTriangle = 0.0;
        int vDist = Math.abs(srcPoint.y - destPoint.y);
        if (vDist >= 20)
            heightOfTriangle = maxTriangleHeight;
        else {
            if (vDist <= 10)
                heightOfTriangle = minTriangleHeight;
            else
                heightOfTriangle = vDist * triangleHeightFraction;
        }
        int yVertex = destPoint.y - (int) heightOfTriangle;
        int xLeftVertex = srcPoint.x - (int) (heightOfTriangle / 2);
        int xRightVertex = srcPoint.x + (int) (heightOfTriangle / 2);
        vertices[0] = destPoint;
        vertices[1] = new Point(xLeftVertex, yVertex);
        vertices[2] = new Point(xRightVertex, yVertex);
        return vertices;
    }
    // Calculate the distance between the source and destination points
    double xDist = Math.abs((srcPoint.x - destPoint.x));
    double yDist = Math.abs((srcPoint.y - destPoint.y));
    double distance = Math.sqrt(Math.pow(xDist, 2) + Math.pow(yDist, 2));
    double sideLength = distance * triangleHeightFraction;
    if (distance >= 20)
        sideLength = maxTriangleHeightForAngledLine;
    else
        sideLength = distance * angledTriangleHeightFraction;
    double tangent = yDist / xDist;
    // calculate now
    double incidentAngle = Math.atan(tangent);
    double triangleAngle = 0.0;
    int heightOfBottomVertex;
    int widthOfBottomVertex;
    double maxAngle;
    int heightOfTopVertex;
    int widthOfTopVertex;
    if (triangleParams != null) {
        // The triangle parameters have already
        // been calculated
        triangleAngle = triangleParams.getAngleOfSideWithPerpBisector();
        if (triangleAngle < incidentAngle) {
            sideLength = triangleParams.getSideLength();
            heightOfBottomVertex = (int) (sideLength * Math.sin(incidentAngle - triangleAngle));
            widthOfBottomVertex = (int) (sideLength * Math.cos(incidentAngle - triangleAngle));
            maxAngle = incidentAngle + triangleAngle;
            heightOfTopVertex = (int) (sideLength * Math.sin(maxAngle));
            widthOfTopVertex = (int) (sideLength * Math.cos(maxAngle));
        } else {
            // Make the triangle angle
            triangleAngle = incidentAngle / 2;
            // half of the incident
            // angle
            heightOfBottomVertex = (int) (sideLength * Math.sin(triangleAngle));
            widthOfBottomVertex = (int) (sideLength * Math.cos(triangleAngle));
            maxAngle = 1.5 * incidentAngle;
            heightOfTopVertex = (int) (sideLength * Math.sin(maxAngle));
            widthOfTopVertex = (int) (sideLength * Math.cos(maxAngle));
        }
    } else {
        // Make the triangle angle half
        triangleAngle = incidentAngle / 2;
        // of the incident angle
        TriangleParameters tp = new TriangleParameters();
        tp.setAngleOfSideWithPerpBisector(triangleAngle);
        tp.setSideLength(sideLength);
        nodeVsTriangleParams.put(destNode, tp);
        heightOfBottomVertex = (int) (sideLength * Math.sin(triangleAngle));
        widthOfBottomVertex = (int) (sideLength * Math.cos(triangleAngle));
        maxAngle = 1.5 * incidentAngle;
        heightOfTopVertex = (int) (sideLength * Math.sin(maxAngle));
        widthOfTopVertex = (int) (sideLength * Math.cos(maxAngle));
    }
    // The top and bottom vertices of the triangle (to be determined)
    int xBottomVertex = 0;
    int yBottomVertex = 0;
    int xTopVertex = 0;
    int yTopVertex = 0;
    if (destPoint.x > srcPoint.x) {
        // Bottom vertex
        xBottomVertex = destPoint.x - widthOfBottomVertex;
        yBottomVertex = destPoint.y - heightOfBottomVertex;
        // Top vertex
        xTopVertex = destPoint.x - widthOfTopVertex;
        yTopVertex = destPoint.y - heightOfTopVertex;
    } else {
        // Bottom vertex
        xBottomVertex = destPoint.x + widthOfBottomVertex;
        yBottomVertex = destPoint.y - heightOfBottomVertex;
        // Top vertex
        xTopVertex = destPoint.x + widthOfTopVertex;
        yTopVertex = destPoint.y - heightOfTopVertex;
    }
    vertices[0] = destPoint;
    vertices[1] = new Point(xBottomVertex, yBottomVertex);
    vertices[2] = new Point(xTopVertex, yTopVertex);
    return vertices;
}
