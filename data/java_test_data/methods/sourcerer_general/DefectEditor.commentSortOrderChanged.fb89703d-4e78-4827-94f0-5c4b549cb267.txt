private void commentSortOrderChanged(CommentSortOrder newSortOrder) {
    // newly selected sort order.
    assert (hasTarget());
    Defect targetDefect = (Defect) target;
    SimpleDateFormat dateFormatter = new SimpleDateFormat("MM/dd/yy hh:mm a");
    Comment comment;
    ListIterator<Comment> comments;
    commentsTableModel.setRowCount(0);
    switch(newSortOrder) {
        case CREATION_TIME_DESCENDING:
            comments = targetDefect.getCommentCollection().reverseIteratorByDate();
            break;
        case USER_NAME_ASCENDING:
            comments = targetDefect.getCommentCollection().iteratorByUser();
            break;
        case USER_NAME_DESCENDING:
            comments = targetDefect.getCommentCollection().reverseIteratorByUser();
            break;
        default:
            comments = targetDefect.getCommentCollection().iteratorByDate();
    }
    if (newSortOrder.equals(CommentSortOrder.CREATION_TIME_ASCENDING) || newSortOrder.equals(CommentSortOrder.USER_NAME_ASCENDING)) {
        while (comments.hasNext()) {
            comment = comments.next();
            Object[] row = new Object[2];
            row[0] = comment;
            row[1] = dateFormatter.format(comment.getDateCreated());
            commentsTableModel.addRow(row);
        }
    } else {
        while (comments.hasPrevious()) {
            comment = comments.previous();
            Object[] row = new Object[2];
            row[0] = comment;
            row[1] = dateFormatter.format(comment.getDateCreated());
            commentsTableModel.addRow(row);
        }
    }
    // 2. Call editComment() to clear out the comment text area.
    editComment();
    System.out.println("Comment Sort Order changed: " + newSortOrder);
}
