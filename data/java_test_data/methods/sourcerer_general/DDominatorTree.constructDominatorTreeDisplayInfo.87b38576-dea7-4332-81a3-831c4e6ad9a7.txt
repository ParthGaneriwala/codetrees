public void constructDominatorTreeDisplayInfo() {
    Set<Entry<DominatorTreeNode, Vector<DominatorTreeNode>>> entries = domTreeNodevsChildsNode.entrySet();
    Iterator<Map.Entry<DominatorTreeNode, Vector<DominatorTreeNode>>> iter = entries.iterator();
    while (iter.hasNext()) {
        Map.Entry<DominatorTreeNode, Vector<DominatorTreeNode>> entry = iter.next();
        DomNode domNode = new DomNode(entry.getKey().getName());
        Vector<DominatorTreeNode> childDomNodes = entry.getValue();
        System.out.println("child nodes size for ----" + domNode.getName() + "----" + childDomNodes.size());
        Vector<DOMEdge> children = new Vector<DOMEdge>();
        Vector<DomNode> successors = new Vector<DomNode>();
        if (!hasDomNode(domNode, domNodeCollection)) {
            System.out.println("one parent node created" + domNode.getName());
            domNodeCollection.add(domNode);
            domGraph.addNode(domNode);
        } else {
            System.out.println("is already there-----" + domNode.getName());
            domNode = getDomNodeFromCollection(domNode);
        }
        for (DominatorTreeNode dominatorTreeNode1 : childDomNodes) {
            DomNode childDomNode = new DomNode(dominatorTreeNode1.getName());
            if (!(hasDomNode(childDomNode, domNodeCollection))) {
                domNodeCollection.add(childDomNode);
                childDomNode.setPredecessor(domNode);
                DOMEdge edge = new DOMEdge(domNode, childDomNode);
                domGraph.addDirectedEdge(edge, domNode, childDomNode);
                domGraph.addNode(childDomNode);
                childDomNode.setInComingEdge(edge);
                System.out.println("childs created for " + domNode.getName() + "child is " + childDomNode.getName());
                children.add(edge);
                successors.add(childDomNode);
            } else {
                childDomNode = getDomNodeFromCollection(childDomNode);
                childDomNode.setPredecessor(domNode);
                DOMEdge edge = new DOMEdge(domNode, childDomNode);
                domGraph.addDirectedEdge(edge, domNode, childDomNode);
                // domGraph.addNode(childDomNode);
                childDomNode.setInComingEdge(edge);
                System.out.println("childs created for " + domNode.getName() + "child is " + childDomNode.getName());
                children.add(edge);
                successors.add(childDomNode);
            }
        }
        domNode.setOutgoingEdges(children);
        domNode.setSuccessors(successors);
    }
    setStartNodeToGraph();
}
