private void init() {
    getContentPane().setLayout(new BorderLayout());
    setUndecorated(true);
    mSourceFileListModel = new SourceFileListModel();
    mSourceFileList = new JList(mSourceFileListModel);
    mSourceFileList.setBorder(BorderFactory.createEtchedBorder());
    addEscapeKeyStroke(mSourceFileList);
    KeyStroke enterKeyStroke = KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0, false);
    mSourceFileList.getInputMap().put(enterKeyStroke, enterKeyStroke);
    mSourceFileList.getActionMap().put(enterKeyStroke, new AbstractAction() {

        public void actionPerformed(ActionEvent ae) {
            selectionMade();
        }
    });
    mSourceFileList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    mSourceFileList.addMouseListener(new MouseAdapter() {

        public void mouseClicked(MouseEvent e) {
            if (e.getClickCount() >= 2) {
                selectionMade();
            }
        }
    });
    mSourceFileList.setCellRenderer(new SourceFileListCellRenderer());
    if (mSourceFileFilter == null) {
        mSourceFileFilter = new SourceFileFilter();
    }
    // add teh source file list in a new window
    JScrollPane mScrollPane = new JScrollPane(mSourceFileList);
    mSourceFileListWindow = new JWindow(this);
    mSourceFileListWindow.getContentPane().setLayout(new BorderLayout());
    mSourceFileListWindow.getContentPane().add(mScrollPane);
    mSourceFileListWindow.pack();
    if (SourcePathManager.staticGetQuickAccessSourcePath() == null) {
        createLoaderThread();
    }
    mSourceFileList.addKeyListener(new KeyAdapterProxy(mSourceFileNameField) {

        protected boolean shouldForwardEvent(KeyEvent e) {
            return !isKeyHandledBySourceFileList(e.getKeyCode());
        }
    });
    mSourceFileList.addKeyListener(new SourceFileListKeyAdapter());
    // certain key events (up,down,enter) should be dispatched onto the
    // class list for movement and selecting
    getContentPane().add(createClassNamePanel(), BorderLayout.NORTH);
    mSourceFileNameField.addKeyListener(new KeyAdapterProxy(mSourceFileList) {

        protected boolean shouldForwardEvent(KeyEvent e) {
            return isKeyHandledBySourceFileList(e.getKeyCode());
        }
    });
    pack();
}
