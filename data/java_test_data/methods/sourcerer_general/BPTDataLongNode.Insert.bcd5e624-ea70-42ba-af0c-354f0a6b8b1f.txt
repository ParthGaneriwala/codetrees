// Inserts key/position entry in self
// key - Key to associate with the leaf
// position - position associated with key in external structur
// splitString - if not null then the smallest key in the new split leaf
// splitNode - if not null then the node was split and this is the leaf to the right
public // , out String splitString, out BPTDataLongNode splitNode)
String Insert(// , out String splitString, out BPTDataLongNode splitNode)
String key, // , out String splitString, out BPTDataLongNode splitNode)
long position) throws Exception {
    this.splitString = null;
    this.splitNode = null;
    if (this.isLeaf) {
        // , out splitString, out splitNode);
        return this.InsertLeaf(key, position);
    }
    int insertposition = this.FindAtOrNextPosition(key, false);
    long insertBufferNumber = this.ChildBufferNumbers[insertposition];
    if (insertBufferNumber == BPTDataLong.NULLBUFFERNUMBER) {
        throw new BPTException("key not followed by buffer number in non-leaf");
    }
    // insert in subtree
    BPTDataLongNode InsertChild = this.MaterializeNodeAtIndex(insertposition);
    BPTDataLongNode childSplit;
    String childSplitString;
    // , out childSplitString, out childSplit);
    String childInsert = InsertChild.Insert(key, position);
    childSplit = InsertChild.splitNode;
    childSplitString = InsertChild.splitString;
    InsertChild.splitNode = null;
    InsertChild.splitString = null;
    // if there was a split the node must expand
    if (childSplit != null) {
        // insert the child
        // redundant -- a child will have a change so this node will need to be copied
        this.Soil();
        int newChildPosition = insertposition + 1;
        boolean dosplit = false;
        // if there is no free space we must do a split
        if (this.ChildBufferNumbers[this.Size] != BPTDataLong.NULLBUFFERNUMBER) {
            dosplit = true;
            this.PrepareForSplit();
        }
        // bubble over the current values to make space for new child
        for (int i = this.ChildKeys.length - 2; i >= newChildPosition - 1; i--) {
            int i1 = i + 1;
            int i2 = i1 + 1;
            this.ChildKeys[i1] = this.ChildKeys[i];
            this.ChildBufferNumbers[i2] = this.ChildBufferNumbers[i1];
            BPTDataLongNode childNode = this.MaterializedChildNodes[i2] = this.MaterializedChildNodes[i1];
        }
        // record the new child
        this.ChildKeys[newChildPosition - 1] = childSplitString;
        childSplit.Reparent(this, newChildPosition);
        // split, if needed
        if (dosplit) {
            int splitpoint = this.MaterializedChildNodes.length / 2 - 1;
            this.splitString = this.ChildKeys[splitpoint];
            this.splitNode = new BPTDataLongNode(this.owner, this.parent, -1, this.isLeaf);
            // make copy of expanded node structure
            BPTDataLongNode[] materialized = this.MaterializedChildNodes;
            long[] buffernumbers = this.ChildBufferNumbers;
            String[] keys = this.ChildKeys;
            // repair the expanded node
            this.ChildKeys = new String[this.Size];
            this.MaterializedChildNodes = new BPTDataLongNode[this.Size + 1];
            this.ChildBufferNumbers = new long[this.Size + 1];
            this.Clear();
            for (int i = 0; i < splitpoint + 1; i++) {
                this.MaterializedChildNodes[i] = materialized[i];
                this.ChildBufferNumbers[i] = buffernumbers[i];
            }
            for (int i = 0; i < splitpoint; i++) {
                this.ChildKeys[i] = keys[i];
            }
            // initialize the new node
            // redundant.
            splitNode.Clear();
            int remainingKeys = this.Size - splitpoint;
            for (int i = 0; i < remainingKeys + 1; i++) {
                splitNode.MaterializedChildNodes[i] = materialized[i + splitpoint + 1];
                splitNode.ChildBufferNumbers[i] = buffernumbers[i + splitpoint + 1];
            }
            for (int i = 0; i < remainingKeys; i++) {
                splitNode.ChildKeys[i] = keys[i + splitpoint + 1];
            }
            // fix pointers in materialized children of splitnode
            splitNode.reParentAllChildren();
            // store the new node
            splitNode.DumpToFreshBuffer();
            splitNode.CheckIfTerminal();
            splitNode.Soil();
            this.CheckIfTerminal();
        }
        // fix pointers in children
        this.reParentAllChildren();
    }
    if (insertposition == 0) {
        // the smallest key may have changed
        return childInsert;
    }
    // no change in smallest key
    return null;
}
