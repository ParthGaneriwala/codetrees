public static TopTreebankNode parse(String parse, String text, int textOffset) {
    try {
        TopTreebankNode topNode = new TopTreebankNode();
        parse = prepareString(parse);
        // used to capture the plain text of the sentence.
        StringBuffer consumedText = new StringBuffer();
        if (text != null) {
            textOffset = movePastWhiteSpaceChars(text, textOffset);
            consumedText.append(text.substring(0, textOffset));
        }
        Stack<Integer> parseOffsetStack = new Stack<Integer>();
        Stack<Integer> plainTextOffsetStack = new Stack<Integer>();
        // keeps the nodes that are waiting for their parents to be completed.
        Stack<TreebankNode> parseStack = new Stack<TreebankNode>();
        for (int ci = 0; ci < parse.length(); ci++) {
            char c = parse.charAt(ci);
            if (c == '(') {
                // at the start of each constituent we will push the starting
                // index of it
                // w.r.t. the parse string.
                parseOffsetStack.push(ci);
                // also push the starting index w.r.t. the plain text of the
                // sentence.
                plainTextOffsetStack.push(consumedText.length());
            } else if (c == ')') {
                int begin = parseOffsetStack.pop();
                int end = ci;
                // the portion of the parse string that corresponds to the
                // constituent that
                // we found the left bracket for ')'.
                String subParse = parse.substring(begin, end + 1);
                int textBegin = plainTextOffsetStack.pop();
                TreebankNode node = getLeafNode(subParse);
                if (node != null) {
                    node.setTopNode(topNode);
                    node.setParseBegin(begin);
                    node.setParseEnd(end + 1);
                    String token = node.getText();
                    if (token.length() > 0) {
                        int realBegin = movePastWhiteSpaceChars(text, textBegin);
                        consumedText.append(text.substring(textBegin, realBegin));
                        consumedText.append(token);
                        node.setTextBegin(realBegin);
                        node.setTextEnd(realBegin + token.length());
                    } else {
                        node.setTextBegin(textBegin);
                        node.setTextEnd(textBegin + token.length());
                    }
                    checkText(node, text);
                    parseStack.push(node);
                } else {
                    if (// the last ')' is the top
                    parse.lastIndexOf(')') == ci)
                        // node.
                        // this is the instance that will be
                        node = topNode;
                    else
                        // returned.
                        node = new TreebankNode();
                    node.setTopNode(topNode);
                    node.setParseBegin(begin);
                    node.setParseEnd(end + 1);
                    String type = getType(subParse);
                    node.setType(getTypeFromType(type));
                    node.setTags(getTagsFromType(type));
                    node.setLeaf(false);
                    // later.)
                    while (parseStack.size() > 0 && parseStack.peek().getParseBegin() > node.getParseBegin()) {
                        TreebankNode child = parseStack.pop();
                        node.addChild(child);
                        child.setParent(node);
                    }
                    // we typically add a token followed by a space to
                    // plainText, except when the
                    // token is an empty string as it is when the corresponding
                    // type is -NONE-
                    int realBegin = movePastWhiteSpaceChars(text, textBegin);
                    node.setTextBegin(realBegin);
                    node.setTextEnd(Math.max(realBegin, consumedText.length()));
                    try {
                        node.setText(consumedText.substring(node.getTextBegin(), node.getTextEnd()));
                    } catch (StringIndexOutOfBoundsException sioobe) {
                        node.setText("");
                    }
                    checkText(node, text);
                    parseStack.push(node);
                }
            }
        }
        topNode.setTreebankParse(parse);
        topNode.initTerminalNodes();
        return topNode;
    } catch (RuntimeException e) {
        throw new IllegalArgumentException("exception thrown when parsing the following: " + parse, e);
    }
}
