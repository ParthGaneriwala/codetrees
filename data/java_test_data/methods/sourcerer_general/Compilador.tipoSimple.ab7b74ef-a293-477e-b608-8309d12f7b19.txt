private sintetizados tipoSimple() throws ErrorLexico, ErrorArchivo, ErrorSintactico, ErrorSemantico {
    sintetizados s = new sintetizados();
    sintetizados saux, saux2;
    String lex;
    entrada en;
    if (numeroTokenActual == Token.NUMERO) {
        lex = tokenActual.getLexema();
        match(Token.NUMERO);
        match(Token.PUNTOPUNTO);
        saux = Constante();
        if (saux.getTipoS() instanceof Entero) {
            if (Integer.parseInt(lex) <= saux.getValorS()) {
                s.setTipoS(new Subrango(Integer.parseInt(lex), saux.getValorS(), TS.getNivelActual()));
            } else {
                throw new ErrorSemantico(ErrorSemantico.LIM_SUBRANGO_INV, getNumeroLinea(), getNumeroColumna());
            }
        } else {
            throw new ErrorSemantico(ErrorSemantico.LIM_ENT, getNumeroLinea(), getNumeroColumna());
        }
    } else if (numeroTokenActual == Token.IDENTIFICADOR) {
        lex = tokenActual.getLexema();
        match(Token.IDENTIFICADOR);
        en = TS.getEntrada(lex);
        saux = tipoSimpleFac();
        if (en != null) {
            if (saux.getTipoS() == null) {
                if (en instanceof Entero)
                    s.setTipoS((Entero) en);
                else if (en instanceof Booleano)
                    s.setTipoS((Booleano) en);
                else if (en instanceof Subrango)
                    s.setTipoS((Subrango) en);
                else if (en instanceof Arreglo)
                    s.setTipoS((Arreglo) en);
                else
                    throw new ErrorSemantico(ErrorSemantico.TIPO_NO_DEF, getNumeroLinea(), getNumeroColumna(), lex);
            } else {
                if (((Constante) en).getTipo() instanceof Entero) {
                    if (((Constante) en).getValor() <= saux.getValorS()) {
                        s.setTipoS(new Subrango(((Constante) en).getValor(), saux.getLimiteSupS(), TS.getNivelActual()));
                    } else {
                        throw new ErrorSemantico(ErrorSemantico.LIM_SUBRANGO_INV, getNumeroLinea(), getNumeroColumna());
                    }
                } else {
                    throw new ErrorSemantico(ErrorSemantico.LIM_ENT, getNumeroLinea(), getNumeroColumna());
                }
            }
        } else {
            throw new ErrorSemantico(ErrorSemantico.ID_NO_DEC, getNumeroLinea(), getNumeroColumna());
        }
    } else if (numeroTokenActual == Token.SUMA) {
        match(Token.SUMA);
        saux = ConstanteFac();
        match(Token.PUNTOPUNTO);
        saux2 = Constante();
        if ((saux.getTipoS() instanceof Entero) && (saux2.getTipoS() instanceof Entero)) {
            if (saux.getValorS() <= saux2.getValorS()) {
                s.setTipoS(new Subrango(saux.getValorS(), saux2.getValorS(), TS.getNivelActual()));
            } else
                throw new ErrorSemantico(ErrorSemantico.LIM_SUBRANGO_INV, getNumeroLinea(), getNumeroColumna(), Integer.toString(saux.getValorS()), Integer.toString(saux2.getValorS()));
        } else {
            String t1, t2;
            t1 = ErrorSemantico.construirMsj(saux.getTipoS().toString());
            t2 = ErrorSemantico.construirMsj(saux2.getTipoS().toString());
            throw new ErrorSemantico(ErrorSemantico.TIPO_INCOMP, getNumeroLinea(), getNumeroColumna(), t1, t2);
        }
    } else {
        match(Token.RESTA);
        saux = ConstanteFac();
        match(Token.PUNTOPUNTO);
        saux2 = Constante();
        if ((saux.getTipoS() instanceof Entero) && (saux2.getTipoS() instanceof Entero)) {
            if ((saux.getValorS() * -1) <= saux2.getValorS()) {
                s.setTipoS(new Subrango(saux.getValorS() * -1, saux2.getValorS(), TS.getNivelActual()));
            } else
                throw new ErrorSemantico(ErrorSemantico.LIM_SUBRANGO_INV, getNumeroLinea(), getNumeroColumna(), Integer.toString(saux.getValorS() * -1), Integer.toString(saux2.getValorS()));
        } else {
            String t2;
            t2 = ErrorSemantico.construirMsj(saux.getTipoS().toString());
            throw new ErrorSemantico(ErrorSemantico.TIPO_INCOMP, getNumeroLinea(), getNumeroColumna(), "Entero", t2);
        }
    }
    return s;
}
