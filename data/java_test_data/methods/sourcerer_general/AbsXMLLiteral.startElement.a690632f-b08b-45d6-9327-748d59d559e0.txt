public FrameI startElement(String uri, String localName, String rawName, Attributes atts) {
    checkComposingChar = true;
    Map attrMap = new TreeMap();
    Map childNameSpaces = new TreeMap();
    startLitElement(uri, rawName, childNameSpaces);
    for (int i = atts.getLength() - 1; i >= 0; i--) {
        String ns = atts.getURI(i);
        String qname = atts.getQName(i);
        String prefix = prefix(qname);
        if (!prefix.equals(""))
            useNameSpace(prefix, ns, childNameSpaces);
        attrMap.put(qname, atts.getValue(i));
    }
    // At this stage, childNameSpaces contains the new visibly used
    // namespaces (i.e. those not in this).
    // attrMap contains the attributes
    // Both are sorted correctly, so we just read them off,
    // namespaces first.
    Iterator it = childNameSpaces.entrySet().iterator();
    while (it.hasNext()) {
        Map.Entry pair = (Map.Entry) it.next();
        append(" xmlns");
        String prefix = (String) pair.getKey();
        if (!"".equals(prefix)) {
            append(':');
            append(prefix);
        }
        append("=\"");
        appendAttrValue((String) pair.getValue());
        append('"');
    }
    it = attrMap.entrySet().iterator();
    while (it.hasNext()) {
        Map.Entry pair = (Map.Entry) it.next();
        append(' ');
        append((String) pair.getKey());
        append("=\"");
        appendAttrValue((String) pair.getValue());
        append('"');
    }
    append('>');
    // child can see all of them.
    if (childNameSpaces.isEmpty()) {
        childNameSpaces = namespaces;
    } else {
        it = namespaces.entrySet().iterator();
        while (it.hasNext()) {
            Map.Entry pair = (Map.Entry) it.next();
            String prefix = (String) pair.getKey();
            if (!childNameSpaces.containsKey(prefix))
                childNameSpaces.put(prefix, pair.getValue());
        // else prefix was overwritten with different value
        }
    }
    return new InnerXMLLiteral(this, rawName, childNameSpaces);
}
