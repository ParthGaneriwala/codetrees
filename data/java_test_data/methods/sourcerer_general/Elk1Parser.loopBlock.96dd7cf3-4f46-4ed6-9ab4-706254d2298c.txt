private ParseNode loopBlock() {
    // special for the Block deal with it separately
    BlockNode blockParent;
    BlockStatementNode blockLeftChild;
    ProgramNode blockProg1;
    ProgramNode blockProg2;
    BlockStatementNode blockrightChild;
    Boolean isEndOfBlock = new Boolean(false);
    // special for the Block deal with it separately
    blockParent = new BlockNode(NonterminalGrammarSymbol.BLOCK);
    blockLeftChild = new BlockStatementNode(nowReadingsymbol);
    blockProg1 = new ProgramNode(PROGRAM);
    blockProg2 = new ProgramNode(PROGRAM);
    blockProg1.appendChild(blockProg2);
    blockEnds.push(isEndOfBlock);
    // to make the nowReadingsymbol the first token in the block
    readToken();
    if (nowReadingsymbol.isBlockSymbol(BlockSymbol.END)) {
        // deal with empty block {}
        blockrightChild = new BlockStatementNode(nowReadingsymbol);
        blockParent.appendChild(blockLeftChild);
        blockParent.appendChild(blockProg1);
        blockParent.appendChild(blockrightChild);
        // �������loop�е�block��Ȼû�п�����end of file
        // to make the nowReadingsymbol the first token in the following program
        readToken();
        // remove this block end
        blockEnds.pop();
        // ����ע��˳��Ҫ��pop���Լ����Ǹ�end֮�����жϲ�Ȼ�Ļ�stack�ö����п�����true
        isEndOfCurrentBlock();
        isEndOfCurrentLoop();
        return blockParent;
    } else {
        while (!blockEnds.peek()) {
            if (nowReadingsymbol.isKeyword(Keyword.ROUTINE)) {
                error("routine declaration can not be in a block it can only be Global!");
                // ???????????????????????????????to terminate error loop
                return blockParent;
            }
            // ??????????
            ParseNode eachSingleProg = new ParseNode(PROGRAM);
            if (// normal stmtList
            nowReadingsymbol.isTypeKeyword() || nowReadingsymbol.isOperator(Operator.AT) || nowReadingsymbol.isTerminal(IdentifierToken.class) || nowReadingsymbol.isOperator(Operator.PRINT) || // nowReadingsymbol.isKeyword(Keyword.IF) ||
            nowReadingsymbol.isLoopSymbol(LoopSymbol.LOOPSTART)) {
                eachSingleProg = stmtList();
            } else if (nowReadingsymbol.isBlockSymbol(BlockSymbol.START)) {
                eachSingleProg = loopBlock();
            } else if (nowReadingsymbol.isKeyword(Keyword.IF)) {
                eachSingleProg = loopIf();
            } else if (nowReadingsymbol.isKeyword(Keyword.LEAVE) || nowReadingsymbol.isKeyword(Keyword.STAY) || nowReadingsymbol.isKeyword(Keyword.LOOP)) {
                eachSingleProg = loopCtrlStmt();
            } else {
                error("sytax error in loopBlock");
            }
            blockProg2.appendChild(eachSingleProg);
        }
        // to deal with {{    {print;}    }} this case
        BlockStatementToken blockSymbolEnd = BlockStatementToken.make(null, "}", BlockSymbol.END);
        BlockStatementNode blockSymbolEndNode = new BlockStatementNode(new TokenGrammarSymbol(blockSymbolEnd));
        blockrightChild = new BlockStatementNode(blockSymbolEndNode);
        blockParent.appendChild(blockLeftChild);
        blockParent.appendChild(blockProg1);
        blockParent.appendChild(blockrightChild);
        blockEnds.pop();
        isEndOfCurrentBlock();
        // �����ж�block��Ϊ�ܴ�stmtList�����Ļ��ض��ǽ�����
        isEndOfCurrentLoop();
        return blockParent;
    }
}
