Table SYSTEM_PROCEDURECOLUMNS() throws HsqlException {
    Table t = sysTables[SYSTEM_PROCEDURECOLUMNS];
    if (t == null) {
        return super.SYSTEM_PROCEDURECOLUMNS();
    }
    // calculated column values
    String procedureCatalog;
    String procedureSchema;
    String procedureName;
    String columnName;
    Integer columnType;
    Integer dataType;
    String dataTypeName;
    Integer precision;
    Integer length;
    Integer scale;
    Integer radix;
    Integer nullability;
    String remark;
    String specificName;
    int colSequence;
    int colCount;
    // intermediate holders
    HsqlArrayList aliasList;
    Object[] info;
    Method method;
    Iterator methods;
    Object[] row;
    DITypeInfo ti;
    // Initialization
    // and aliases
    methods = ns.iterateAllAccessibleMethods(session, true);
    ti = new DITypeInfo();
    // no such thing as identity or ignorecase return/parameter
    // procedure columns.  Future: may need to worry about this if
    // result columns are ever reported
    ti.setTypeSub(Types.TYPE_SUB_DEFAULT);
    // Do it.
    while (methods.hasNext()) {
        info = (Object[]) methods.next();
        method = (Method) info[0];
        aliasList = (HsqlArrayList) info[1];
        procedureCatalog = ns.getCatalogName(method);
        procedureSchema = ns.getSchemaName(method);
        pi.setMethod(method);
        specificName = pi.getSpecificName();
        procedureName = pi.getFQN();
        colCount = pi.getColCount();
        for (int i = 0; i < colCount; i++) {
            ti.setTypeCode(pi.getColTypeCode(i));
            columnName = pi.getColName(i);
            columnType = pi.getColUsage(i);
            dataType = pi.getColDataType(i);
            dataTypeName = ti.getTypeName();
            precision = ti.getPrecision();
            length = pi.getColLen(i);
            scale = ti.getDefaultScale();
            radix = ti.getNumPrecRadix();
            nullability = pi.getColNullability(i);
            remark = pi.getColRemark(i);
            colSequence = pi.getColSequence(i);
            addPColRows(t, aliasList, procedureCatalog, procedureSchema, procedureName, columnName, columnType, dataType, dataTypeName, precision, length, scale, radix, nullability, remark, specificName, colSequence);
        }
    }
    t.setDataReadOnly(true);
    return t;
}
