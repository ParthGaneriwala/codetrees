public void mouseDragged(MouseEvent me) {
    if (getParent() == null)
        return;
    if (startPos != null) {
        // Position de la souris
        Point mousePoint = null;
        // Position de la souris dans le repère du père
        Point mousePointParent = null;
        // Position du coin de grille le plus près du curseur
        Point gridPointParent = null;
        // Position du coin le plus près de la souris
        Point mouseNearestCorner = null;
        // Position du coin le plus près de la souris dans le repère du père
        Point mouseNearestCornerParent = null;
        int diffX, diffY;
        int dx = 0;
        int dy = 0;
        mousePoint = me.getPoint();
        if (magnetGridUsed == true) // Gestion avec les grilles
        {
            mouseNearestCorner = getNearestCorner(mousePoint);
            // Récupération de la souris dans les coordonnées du père
            mousePointParent = getParent().getMousePosition();
            if (mousePointParent == null)
                return;
            // Récupération du point de la grille le plus proche
            gridPointParent = magnetGrid.getNearestPoint(mousePointParent);
            // Récupération des coordonnées du point le plus proche dans les coordonnées du père
            mouseNearestCornerParent = new Point((int) (mouseNearestCorner.getX() + getLocation().getX()), (int) (mouseNearestCorner.getY() + getLocation().getY()));
            // Calcul des différences (vecteur de déplacement ou d'agrandissement
            diffX = (int) (gridPointParent.getX() - mouseNearestCornerParent.getX());
            diffY = (int) (gridPointParent.getY() - mouseNearestCornerParent.getY());
            dx = diffX;
            dy = diffY;
        } else {
            mouseNearestCorner = mousePoint;
            dx = (int) mouseNearestCorner.getX() - startPos.x;
            dy = (int) mouseNearestCorner.getY() - startPos.y;
        }
        Rectangle newBounds = new Rectangle();
        switch(cursor) {
            case Cursor.N_RESIZE_CURSOR:
                newBounds = new Rectangle(getX(), getY() + dy, getWidth(), getHeight() - dy);
                tryResize(newBounds);
                didResized();
                break;
            case Cursor.S_RESIZE_CURSOR:
                newBounds = new Rectangle(getX(), getY(), getWidth(), getHeight() + dy);
                tryResize(newBounds);
                startPos = mouseNearestCorner;
                didResized();
                break;
            case Cursor.W_RESIZE_CURSOR:
                newBounds = new Rectangle(getX() + dx, getY(), getWidth() - dx, getHeight());
                tryResize(newBounds);
                didResized();
                break;
            case Cursor.E_RESIZE_CURSOR:
                newBounds = new Rectangle(getX(), getY(), getWidth() + dx, getHeight());
                tryResize(newBounds);
                startPos = mouseNearestCorner;
                didResized();
                break;
            case Cursor.NW_RESIZE_CURSOR:
                newBounds = new Rectangle(getX() + dx, getY() + dy, getWidth() - dx, getHeight() - dy);
                tryResize(newBounds);
                didResized();
                break;
            case Cursor.NE_RESIZE_CURSOR:
                newBounds = new Rectangle(getX(), getY() + dy, getWidth() + dx, getHeight() - dy);
                tryResize(newBounds);
                startPos = new Point((int) mouseNearestCorner.getX(), startPos.y);
                didResized();
                break;
            case Cursor.SW_RESIZE_CURSOR:
                newBounds = new Rectangle(getX() + dx, getY(), getWidth() - dx, getHeight() + dy);
                tryResize(newBounds);
                startPos = new Point(startPos.x, (int) mouseNearestCorner.getY());
                didResized();
                break;
            case Cursor.SE_RESIZE_CURSOR:
                newBounds = new Rectangle(getX(), getY(), getWidth() + dx, getHeight() + dy);
                tryResize(newBounds);
                startPos = mouseNearestCorner;
                didResized();
                break;
            case Cursor.MOVE_CURSOR:
                Rectangle bounds = getBounds();
                bounds.translate(dx, dy);
                setBounds(bounds);
                didResized();
        }
        // cursor shouldn't change while dragging
        setCursor(Cursor.getPredefinedCursor(cursor));
    }
    // On indique que les dimensions ont changées
    onBoundsChanged();
    // On indique qu'on fait un drag et qu'on ne changera pas la selection
    // au relachement
    changeSelection = false;
}
