protected DimenInfo computeDimens(Container parent, boolean horiz, int whint, int hhint) {
    int count = parent.getComponentCount();
    DimenInfo info = new DimenInfo();
    info.dimens = new Dimension[count];
    // height hints straight through because they can theoretically take up the whole size)
    for (int ii = 0; ii < count; ii++) {
        Component child = parent.getComponent(ii);
        if (!child.isVisible()) {
            continue;
        }
        // we need to count all of our visible children first
        info.count++;
        if (!isFixed(child)) {
            continue;
        }
        Dimension csize = computeChildDimens(info, ii, child, whint, hhint);
        info.fixwid += csize.width;
        info.fixhei += csize.height;
        info.numfix++;
        info.dimens[ii] = csize;
    }
    // if we have no fixed components, stop here
    if (info.numfix == info.count) {
        return info;
    }
    // children know what they're getting when we first ask them for their preferred size
    if (_policy == STRETCH) {
        if (horiz) {
            if (whint > 0) {
                whint -= (info.fixwid + _gap * (info.count - 1));
                whint /= (info.count - info.numfix);
            }
        } else {
            if (hhint > 0) {
                hhint -= (info.fixhei + _gap * (info.count - 1));
                hhint /= (info.count - info.numfix);
            }
        }
    }
    for (int ii = 0; ii < count; ii++) {
        Component child = parent.getComponent(ii);
        if (!child.isVisible() || isFixed(child)) {
            continue;
        }
        Dimension csize = computeChildDimens(info, ii, child, whint, hhint);
        info.totweight += getWeight(child);
        if (csize.width > info.maxfreewid) {
            info.maxfreewid = csize.width;
        }
        if (csize.height > info.maxfreehei) {
            info.maxfreehei = csize.height;
        }
        info.dimens[ii] = csize;
    }
    return info;
}
