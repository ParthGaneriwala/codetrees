@Override
public void endElement(String uri, String name, String raw) throws SAXException {
    if (name.equals(REQUEST_TAG) && uri.equals(NS_URI)) {
        try {
            HttpURL url = new HttpURL(m_target);
            if (url.getUser() != null && !"".equals(url.getUser())) {
                m_state.setCredentials(authScope, new UsernamePasswordCredentials(url.getUser(), url.getPassword()));
            }
            m_target = url.getURI();
        } catch (Exception e) {
        // ignore
        }
        // create method
        HttpMethod method = null;
        if (m_method.equalsIgnoreCase(METHOD_GET)) {
            method = new GetMethod(m_target);
        } else if (m_method.equalsIgnoreCase(METHOD_DELETE)) {
            method = new DeleteMethod(m_target);
        } else if (m_method.equalsIgnoreCase(METHOD_POST)) {
            method = new PostMethod(m_target);
        } else if (m_method.equalsIgnoreCase(METHOD_PUT)) {
            method = new PutMethod(m_target);
        }
        try {
            // add request headers
            Iterator headers = m_headers.entrySet().iterator();
            while (headers.hasNext()) {
                Map.Entry header = (Map.Entry) headers.next();
                method.addRequestHeader((String) header.getKey(), (String) header.getValue());
            }
            if (m_method.equalsIgnoreCase(METHOD_POST) || m_method.equalsIgnoreCase(METHOD_PUT)) {
                Properties props = XMLUtils.createPropertiesForXML(false);
                props.put(OutputKeys.ENCODING, "UTF-8");
                String body = XMLUtils.serializeNode(m_requestdocument, props);
                // set request body
                ((EntityEnclosingMethod) method).setRequestEntity(new StringRequestEntity(body, "text/xml", "UTF-8"));
            }
            method.setDoAuthentication(true);
            // execute the request
            executeRequest(method);
        } catch (ProcessingException e) {
            if (getLogger().isErrorEnabled()) {
                getLogger().debug("Couldn't read request from sax stream", e);
            }
            throw new SAXException("Couldn't read request from sax stream", e);
        } catch (UnsupportedEncodingException e) {
            if (getLogger().isErrorEnabled()) {
                getLogger().debug("UTF-8 encoding not present", e);
            }
            throw new SAXException("UTF-8 encoding not present", e);
        } finally {
            method.releaseConnection();
            m_headers = null;
        }
    } else if (name.equals(HEADER_TAG) && uri.equals(NS_URI)) {
    // dont do anything
    } else if (name.equals(BODY_TAG) && uri.equals(NS_URI)) {
        m_requestdocument = super.endRecording();
    } else {
        super.endElement(uri, name, raw);
    }
}
