// $ANTLR start "clausula"
public final gramaticaMM2Parser.clausula_return clausula() throws RecognitionException {
    gramaticaMM2Parser.clausula_return retval = new gramaticaMM2Parser.clausula_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token AND159 = null;
    gramaticaMM2Parser.literal_return literal158 = null;
    gramaticaMM2Parser.literal_return literal160 = null;
    CommonTree AND159_tree = null;
    RewriteRuleTokenStream stream_AND = new RewriteRuleTokenStream(adaptor, "token AND");
    RewriteRuleSubtreeStream stream_literal = new RewriteRuleSubtreeStream(adaptor, "rule literal");
    try {
        // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:141:17: ( literal ( AND literal )* -> ^( CLAUSE ( literal )+ ) )
        // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:141:19: literal ( AND literal )*
        {
            pushFollow(FOLLOW_literal_in_clausula1495);
            literal158 = literal();
            state._fsp--;
            stream_literal.add(literal158.getTree());
            // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:141:27: ( AND literal )*
            loop27: do {
                int alt27 = 2;
                int LA27_0 = input.LA(1);
                if ((LA27_0 == AND)) {
                    alt27 = 1;
                }
                switch(alt27) {
                    case 1:
                        // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:141:28: AND literal
                        {
                            AND159 = (Token) match(input, AND, FOLLOW_AND_in_clausula1498);
                            stream_AND.add(AND159);
                            pushFollow(FOLLOW_literal_in_clausula1500);
                            literal160 = literal();
                            state._fsp--;
                            stream_literal.add(literal160.getTree());
                        }
                        break;
                    default:
                        break loop27;
                }
            } while (true);
            // AST REWRITE
            // elements: literal
            // token labels:
            // rule labels: retval
            // token list labels:
            // rule list labels:
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", retval != null ? retval.tree : null);
            root_0 = (CommonTree) adaptor.nil();
            // 141:42: -> ^( CLAUSE ( literal )+ )
            {
                // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:141:45: ^( CLAUSE ( literal )+ )
                {
                    CommonTree root_1 = (CommonTree) adaptor.nil();
                    root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(CLAUSE, "CLAUSE"), root_1);
                    if (!(stream_literal.hasNext())) {
                        throw new RewriteEarlyExitException();
                    }
                    while (stream_literal.hasNext()) {
                        adaptor.addChild(root_1, stream_literal.nextTree());
                    }
                    stream_literal.reset();
                    adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
