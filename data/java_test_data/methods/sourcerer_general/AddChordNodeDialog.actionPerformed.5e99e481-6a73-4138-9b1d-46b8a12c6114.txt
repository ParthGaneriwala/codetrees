@Override
public void actionPerformed(ActionEvent event) {
    ChordNode node = null;
    Key key = null;
    int value;
    try {
        value = Integer.parseInt(this.keyTextField.getText());
        key = new Key(value);
    } catch (Exception e) {
        this.keyTextField.setText("");
        this.keyTextField.requestFocus();
        JOptionPane.showMessageDialog(this, "Key must be a positive number", "Add Node", JOptionPane.INFORMATION_MESSAGE);
        return;
    }
    try {
        node = ChordFactory.newActiveChordNode(value);
    } catch (ActiveObjectCreationException e) {
        e.printStackTrace();
    } catch (NodeException e) {
        e.printStackTrace();
    }
    String opt = "";
    if (value >= Math.pow(2, Key.NB_BITS)) {
        opt = " (" + value + " = " + key + " mod 2^" + Key.NB_BITS + ")";
    }
    Tracker tracker = ((ChordVisualizer) super.getOwner()).getTracker();
    if (tracker.getNumberOfPeersManaged() > 0 && tracker.getRandomPeer().findSuccessor(node.getKey()).getKey().compareTo(node.getKey()) == 0) {
        this.keyTextField.setText("");
        this.keyTextField.requestFocus();
        JOptionPane.showMessageDialog(this, "A node with key " + node.getKey() + opt + " already exist\nOperation is snubbed", "Add Node", JOptionPane.INFORMATION_MESSAGE);
    } else {
        tracker.addOnNetwork(node);
        super.setVisible(false);
        JOptionPane.showMessageDialog(super.getOwner(), "Node with key " + key + opt + "\nhas joined the network", "Add Node", JOptionPane.INFORMATION_MESSAGE);
    }
}
