protected void processActionClass(Class cls, String[] pkgs) {
    String name = cls.getName();
    String actionPackage = cls.getPackage().getName();
    String actionNamespace = null;
    String actionName = null;
    for (String pkg : pkgs) {
        if (name.startsWith(pkg)) {
            if (LOG.isDebugEnabled()) {
                LOG.debug("ClasspathConfigurationProvider: Processing class " + name);
            }
            name = name.substring(pkg.length() + 1);
            actionNamespace = "";
            actionName = name;
            int pos = name.lastIndexOf('.');
            if (pos > -1) {
                actionNamespace = "/" + name.substring(0, pos).replace('.', '/');
                actionName = name.substring(pos + 1);
            }
            break;
        }
    }
    PackageConfig pkgConfig = loadPackageConfig(actionNamespace, actionPackage, cls);
    // In case the package changed due to namespace annotation processing
    if (!actionPackage.equals(pkgConfig.getName())) {
        actionPackage = pkgConfig.getName();
    }
    Annotation annotation = cls.getAnnotation(ParentPackage.class);
    if (annotation != null) {
        String parent = ((ParentPackage) annotation).value();
        PackageConfig parentPkg = configuration.getPackageConfig(parent);
        if (parentPkg == null) {
            throw new ConfigurationException("ClasspathConfigurationProvider: Unable to locate parent package " + parent, annotation);
        }
        pkgConfig.addParent(parentPkg);
        if (!TextUtils.stringSet(pkgConfig.getNamespace()) && TextUtils.stringSet(parentPkg.getNamespace())) {
            pkgConfig.setNamespace(parentPkg.getNamespace());
        }
    }
    // Truncate Action suffix if found
    if (actionName.endsWith(ACTION)) {
        actionName = actionName.substring(0, actionName.length() - ACTION.length());
    }
    // Force initial letter of action to lowercase, if desired
    if ((forceLowerCase) && (actionName.length() > 1)) {
        int lowerPos = actionName.lastIndexOf('/') + 1;
        StringBuilder sb = new StringBuilder();
        sb.append(actionName.substring(0, lowerPos));
        sb.append(Character.toLowerCase(actionName.charAt(lowerPos)));
        sb.append(actionName.substring(lowerPos + 1));
        actionName = sb.toString();
    }
    ActionConfig actionConfig = new ActionConfig();
    actionConfig.setClassName(cls.getName());
    actionConfig.setPackageName(actionPackage);
    actionConfig.setResults(new ResultMap<String, ResultConfig>(cls, actionName, pkgConfig));
    pkgConfig.addActionConfig(actionName, actionConfig);
}
