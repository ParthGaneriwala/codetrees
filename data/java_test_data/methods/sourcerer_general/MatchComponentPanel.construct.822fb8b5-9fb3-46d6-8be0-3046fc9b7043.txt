public Boolean construct() {
    Vector<MergedComponentType> lComponentsTypes = iParent.getComponentTypes();
    Vector<String> lNewComponentTypes = new Vector<String>();
    for (int i = 0; i < lComponentsTypes.size(); i++) {
        lNewComponentTypes.add(lComponentsTypes.get(i).toString());
    }
    iParent.setNewCompentTypes(lNewComponentTypes);
    Vector<MergedRatioType> lRatioTypes = iParent.getRatioTypes();
    Vector<String> lNewRatioTypes = new Vector<String>();
    for (int i = 0; i < lRatioTypes.size(); i++) {
        lNewRatioTypes.add(lRatioTypes.get(i).toString());
    }
    iParent.setNewRatioTypes(lNewRatioTypes);
    MatchRatioWithComponent lMatch = new MatchRatioWithComponent(true);
    while (lNewRatioTypes.size() > iQuantitativeValidationSingelton.getMatchedRatioTypes().size()) {
        try {
            Thread.sleep(1000);
        } catch (InterruptedException e) {
        // sleep failed
        }
    }
    while (iQuantitativeValidationSingelton.getMatchedRatioTypes().get(iQuantitativeValidationSingelton.getMatchedRatioTypes().size() - 1).getUnregulatedComponentsBySet().size() < iQuantitativeValidationSingelton.getRoverSources().size()) {
        try {
            Thread.sleep(1000);
        } catch (InterruptedException e) {
        // sleep failed
        }
    }
    Vector<RatioGroupCollection> lCollections = iParent.getCollections();
    progressBar1.setMaximum(lCollections.size());
    for (int i = 0; i < lCollections.size(); i++) {
        progressBar1.setValue(i + 1);
        int lIndex = lCollections.get(i).getIndex();
        RatioGroupCollection lCollection = lCollections.get(i);
        // set the new types to the ratiogroupcollection
        lCollection.setRatioTypes(lNewRatioTypes);
        lCollection.setComponentTypes(lNewComponentTypes);
        for (int j = 0; j < lCollection.size(); j++) {
            // set the peptide types
            RatioGroup lRatioGroup = lCollection.get(j);
            // set these on the peptide identifications
            for (int k = 0; k < lRatioGroup.getNumberOfIdentifications(); k++) {
                PeptideIdentification lPeptide = lRatioGroup.getIdentification(k);
                String lType = lPeptide.getType();
                String lResult = getMergedComponentForOriginal(lComponentsTypes, lIndex, lType);
                lPeptide.setType(lResult);
            }
            ArrayList<String> lPeptideTypes = lRatioGroup.getAllPeptideTypes();
            ArrayList<String> lConvertedTypes = new ArrayList<String>();
            for (int k = 0; k < lPeptideTypes.size(); k++) {
                String lResult = getMergedComponentForOriginal(lComponentsTypes, lIndex, lPeptideTypes.get(k));
                lConvertedTypes.add(lResult);
            }
            lRatioGroup.setAllPeptideTypes(lConvertedTypes);
            // set the ratio types
            for (int k = 0; k < lRatioGroup.getNumberOfRatios(); k++) {
                Ratio lRatio = lRatioGroup.getRatio(k);
                String lType = lRatio.getType();
                String lResult = getMergedRatioTypeForOriginal(lRatioTypes, lIndex, lType);
                boolean lMustBeInverted = getInvertedStatusForOriginal(lRatioTypes, lIndex, lType);
                if (lMustBeInverted) {
                    // get the not log2 ratio
                    iQuantitativeValidationSingelton.setMaxQuantScoreType(MaxQuantScoreType.RATIO);
                    double lTempRatio = lRatio.getRatio(false);
                    // inverted it
                    lTempRatio = Math.pow(lTempRatio, -1);
                    // set it as a log 2 value
                    lRatio.setRecalculatedRatio(Math.log(lTempRatio) / Math.log(2));
                    // this inverted ratio resembles the original ratio
                    lRatio.setOriginalRatio(Math.log(lTempRatio) / Math.log(2));
                    // set that the ratio was inverted
                    lRatio.setInverted(true);
                }
                lRatio.setType(lResult);
            }
        }
    }
    iQuantitativeValidationSingelton.setMaxQuantScoreType(MaxQuantScoreType.RATIO);
    return true;
}
