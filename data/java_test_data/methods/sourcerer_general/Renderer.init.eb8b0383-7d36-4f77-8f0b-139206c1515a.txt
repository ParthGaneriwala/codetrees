public void init(Drawable drawable, int width, int height) {
    _drawable = drawable;
    _width = width;
    _height = height;
    // find out how many alpha bit planes are in the frame buffer
    IntBuffer buf = BufferUtils.createIntBuffer(16);
    GL11.glGetInteger(GL11.GL_ALPHA_BITS, buf);
    _alphaBits = buf.get(0);
    // how many stencil bit planes
    GL11.glGetInteger(GL11.GL_STENCIL_BITS, buf);
    _stencilBits = buf.get(0);
    // how many user clip planes
    GL11.glGetInteger(GL11.GL_MAX_CLIP_PLANES, buf);
    _maxClipPlanes = buf.get(0);
    // how many lights
    GL11.glGetInteger(GL11.GL_MAX_LIGHTS, buf);
    _maxLights = buf.get(0);
    // how many fixed-function texture units
    ContextCapabilities caps = GLContext.getCapabilities();
    if (caps.GL_ARB_multitexture) {
        GL11.glGetInteger(ARBMultitexture.GL_MAX_TEXTURE_UNITS_ARB, buf);
        _maxTextureUnits = buf.get(0);
    } else {
        _maxTextureUnits = 1;
    }
    // how many programmable texture units
    if (caps.GL_ARB_fragment_shader) {
        GL11.glGetInteger(ARBFragmentShader.GL_MAX_TEXTURE_IMAGE_UNITS_ARB, buf);
        _maxTextureImageUnits = buf.get(0);
    } else {
        _maxTextureImageUnits = _maxTextureUnits;
    }
    // and how many vertex attributes
    if (caps.GL_ARB_vertex_shader) {
        GL11.glGetInteger(ARBVertexShader.GL_MAX_VERTEX_ATTRIBS_ARB, buf);
        _maxVertexAttribs = buf.get(0);
    } else {
        _maxVertexAttribs = 0;
    }
    // determine the vendor
    String vendor = GL11.glGetString(GL11.GL_VENDOR).toLowerCase();
    _nvidia = vendor.contains("nvidia");
    _ati = vendor.contains("ati");
    _intel = vendor.contains("intel");
    // get the initial draw/read buffers
    GL11.glGetInteger(GL11.GL_DRAW_BUFFER, buf);
    _drawBuffer = buf.get(0);
    GL11.glGetInteger(GL11.GL_READ_BUFFER, buf);
    _readBuffer = buf.get(0);
    // to make things easier for texture loading, we just keep this at one (default is four)
    GL11.glPixelStorei(GL11.GL_PACK_ALIGNMENT, 1);
    GL11.glPixelStorei(GL11.GL_UNPACK_ALIGNMENT, 1);
    // initialize the viewport
    _viewport.set(0, 0, width, height);
    // initialize the clip plane records
    _clipPlanes = new ClipPlaneRecord[_maxClipPlanes];
    for (int ii = 0; ii < _maxClipPlanes; ii++) {
        _clipPlanes[ii] = new ClipPlaneRecord();
    }
    // initialize the scissor box
    _scissor.set(0, 0, width, height);
    // initialize the array records
    _vertexAttribArrays = new ClientArrayRecord[_maxVertexAttribs];
    for (int ii = 0; ii < _maxVertexAttribs; ii++) {
        _vertexAttribArrays[ii] = new ClientArrayRecord();
    }
    _texCoordArrays = new ClientArrayRecord[_maxTextureUnits];
    for (int ii = 0; ii < _maxTextureUnits; ii++) {
        _texCoordArrays[ii] = new ClientArrayRecord();
    }
    // and the light records
    _lights = new LightRecord[_maxLights];
    for (int ii = 0; ii < _maxLights; ii++) {
        _lights[ii] = new LightRecord(ii);
    }
    // and the texture unit records
    _units = new TextureUnitRecord[_maxTextureImageUnits];
    for (int ii = 0; ii < _maxTextureImageUnits; ii++) {
        _units[ii] = new TextureUnitRecord();
    }
}
