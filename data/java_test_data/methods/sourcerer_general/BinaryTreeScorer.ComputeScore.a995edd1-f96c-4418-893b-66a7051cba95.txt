public double ComputeScore(Document xmlTree, double[][] dMatrix) {
    int[][] checked = new int[dMatrix.length][dMatrix.length];
    DMElement[] orderedDist = new DMElement[sum(dMatrix.length)];
    for (int k = 0; k < sum(dMatrix.length); k++) {
        double min_dist = Double.MAX_VALUE;
        int min_i = -1, min_j = -1;
        for (int i = 0; i < dMatrix.length; i++) {
            for (int j = i + 1; j < dMatrix.length; j++) {
                if (min_dist > dMatrix[i][j] && checked[i][j] == 0) {
                    min_dist = dMatrix[i][j];
                    min_i = i;
                    min_j = j;
                }
            }
        }
        orderedDist[k] = new DMElement(min_i, min_j, min_dist);
        checked[min_i][min_j] = 1;
    }
    Arrays.sort(orderedDist);
    int[] treeDist = new int[orderedDist.length];
    qNodes = new QNode[2 * dMatrix.length - 2];
    ArrayList alQuartets = Quartet.generateFullQuartetList(dMatrix);
    QuartetTree qt = constructFromXmlDocument(xmlTree);
    int min = Integer.MAX_VALUE;
    int max = Integer.MIN_VALUE;
    for (int i = 0; i < treeDist.length; i++) {
        DMElement dme = orderedDist[i];
        // ArrayList path = qt.Dijkstra()
        QNode n1 = getNodeByLabel(dme.i);
        QNode n2 = getNodeByLabel(dme.j);
        ArrayList path = qt.Dijkstra(n1, n2, qNodes);
        treeDist[i] = path.size();
        if (max < treeDist[i])
            max = treeDist[i];
        if (min > treeDist[i])
            min = treeDist[i];
    }
    double change_count = 0;
    int old_value = -1;
    old_value = treeDist[0];
    for (int i = 1; i < treeDist.length; i++) {
        int diff = Math.abs(old_value - treeDist[i]);
        change_count += diff * 0.5;
        old_value = treeDist[i];
    }
    return 1 - ((double) change_count - ((double) max / 2 - (double) min / 2)) / (2 * (double) treeDist.length);
// return 1 - (double)change_count/(double)treeDist.length;
}
