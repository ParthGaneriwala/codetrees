/*
    public abstract Board findMove(Board board);

    @Override
    public Action getMove(Board board, int moveNbr) {
        long startTime = System.currentTimeMillis();

        assert board.blackToMove == isBlack;
        Board bestMove = findMove(board);

        int[] myMove;
        if (bestMove != null) {
            myMove = movePathFromBoards(board, bestMove);
            out.print("My move is " + moveNbr + ": " + myMove[0]);
            for (int i = 1; i < myMove.length; i++) {
                out.print(" - " + myMove[i]);
            }
            out.println();
        } else {
            out.println(color + " couldn't find any available moves.");
            myMove = new int[0];
        }

        long endTime = System.currentTimeMillis();
        long thisMove = endTime - startTime;
        spentTime += thisMove;
        float thisMoveTime = thisMove / 1000.0F;
        float totalTime = spentTime / 1000.0F;
        out.printf("This move took: %.2f s.\n", thisMoveTime);
        out.printf("Total spent time: %.2f s.\n", totalTime);

        return new Action(myMove, spentTime);
    }
    */
public static void fromTo(Board currentBoard, Board nextBoard, int[] fromAndTo) {
    int currentMovingColor;
    int currentOtherColor;
    int nextMovingColor;
    int nextOtherColor;
    if (currentBoard.blackToMove) {
        currentMovingColor = currentBoard.black;
        currentOtherColor = currentBoard.white;
        nextMovingColor = nextBoard.black;
        nextOtherColor = nextBoard.white;
    } else {
        currentMovingColor = currentBoard.white;
        currentOtherColor = currentBoard.black;
        nextMovingColor = nextBoard.white;
        nextOtherColor = nextBoard.black;
    }
    int currentEmpty = ~(currentMovingColor | currentOtherColor);
    int nextEmpty = ~(nextMovingColor | nextOtherColor);
    int fromTo = currentMovingColor ^ nextMovingColor;
    int capturedPieces = currentOtherColor ^ nextOtherColor;
    int nbrCapturedPieces = BitUtils.countBits(capturedPieces);
    if (fromTo != 0) {
        int fromBit = fromTo & nextEmpty;
        int toBit = fromTo & currentEmpty;
        int fromIndex = BitUtils.floorLog2(fromBit);
        int toIndex = BitUtils.floorLog2(toBit);
        fromAndTo[0] = fromIndex;
        fromAndTo[1] = toIndex;
    } else {
        loopFromTo(currentMovingColor, capturedPieces, nbrCapturedPieces, fromAndTo);
    }
}
