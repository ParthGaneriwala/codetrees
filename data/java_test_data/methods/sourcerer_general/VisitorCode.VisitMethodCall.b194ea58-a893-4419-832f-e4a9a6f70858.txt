public void VisitMethodCall(String methodName, String className, Vector<String> typeList, ExprList argsList, int objectOffset, Vector<Vector<String>> compatibleArgsList) throws TypeError {
    this.Comment("Appel de la methode : " + methodName);
    // reservation pour la valeur de retour
    this.Emit("PUSHN 1");
    this.Comment("@ de l'objet");
    this.Emit("SWAP");
    this.Comment("Empilation des arguments");
    for (Iterator it = argsList.iterator(); it.hasNext(); ) {
        ((Expr) it.next()).accept(this);
    }
    ClassSymbolTable classSymbolTable = this.GetSymbolTable().GetClass(className);
    String methodLabel = this.GetUtils().GetMethodLabel(methodName, compatibleArgsList.elementAt(0));
    int offset = classSymbolTable.GetMethodOffset(methodLabel);
    this.Emit("PUSHGP");
    this.Comment("@ de l'objet");
    this.Emit("PUSHSP");
    // - nb arg - 1 (pr l'@ de l'objet) - 1 (pr le GP qu'on vient de mettre)
    this.Emit("PUSHI " + (-argsList.GetCount() - 2));
    this.Emit("PADD");
    this.Comment("Descripteur de l'object");
    this.Emit("LOAD 0");
    this.Emit("LOAD 0");
    this.Emit("PUSHI " + offset);
    this.Emit("ADD");
    this.Emit("LOADN");
    this.Emit("CALL");
    this.Emit("POP " + (argsList.GetCount() + 1));
}
