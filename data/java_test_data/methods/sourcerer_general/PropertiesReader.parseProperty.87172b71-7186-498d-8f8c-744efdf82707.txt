private String[] parseProperty(String line) {
    // sorry for this spaghetti code, please replace it as soon as
    // possible with a regexp when the Java 1.3 requirement is dropped
    String[] result = new String[2];
    StringBuffer key = new StringBuffer();
    StringBuffer value = new StringBuffer();
    // state of the automaton:
    // 0: key parsing
    // 1: antislash found while parsing the key
    // 2: separator crossing
    // 3: value parsing
    int state = 0;
    for (int pos = 0; pos < line.length(); pos++) {
        char c = line.charAt(pos);
        switch(state) {
            case 0:
                if (c == '\\') {
                    state = 1;
                } else if (contains(WHITE_SPACE, c)) {
                    // switch to the separator crossing state
                    state = 2;
                } else if (contains(SEPARATORS, c)) {
                    // switch to the value parsing state
                    state = 3;
                } else {
                    key.append(c);
                }
                break;
            case 1:
                if (contains(SEPARATORS, c) || contains(WHITE_SPACE, c)) {
                    // this is an escaped separator or white space
                    key.append(c);
                } else {
                    // another escaped character, the '\' is preserved
                    key.append('\\');
                    key.append(c);
                }
                // return to the key parsing state
                state = 0;
                break;
            case 2:
                if (contains(WHITE_SPACE, c)) {
                    // do nothing, eat all white spaces
                    state = 2;
                } else if (contains(SEPARATORS, c)) {
                    // switch to the value parsing state
                    state = 3;
                } else {
                    // any other character indicates we encoutered the beginning of the value
                    value.append(c);
                    // switch to the value parsing state
                    state = 3;
                }
                break;
            case 3:
                value.append(c);
                break;
        }
    }
    result[0] = key.toString().trim();
    result[1] = value.toString().trim();
    return result;
}
