public static void calendarServices(String user, String password) {
    try {
        // Uses a URL modified with the username, logs in and gathers the information in the form of a list
        // Note, as of yet, this only gathers information from your default calendar
        System.setProperty("https.proxyHost", "proxy4.ucd.ie");
        System.setProperty("https.proxyPort", "8484");
        System.out.println(loginStart);
        myService = new CalendarService("Weeks - Google Calendar");
        myService.setUserCredentials(user, password);
        URL feedUrl = new URL("http://www.google.com/calendar/feeds/" + user + "@gmail.com/private/full");
        System.out.println(loginComplete);
        System.out.println();
        // Gather all calendars
        URL feedUrl2 = new URL("http://www.google.com/calendar/feeds/default/allcalendars/full");
        CalendarFeed resultFeed2 = myService.getFeed(feedUrl2, CalendarFeed.class);
        System.out.println("All of your calendars:");
        System.out.println();
        for (int i = 0; i < resultFeed2.getEntries().size(); i++) {
            CalendarEntry entry = resultFeed2.getEntries().get(i);
            System.out.println(entry.getTitle().getPlainText());
            System.out.println("Summary: " + entry.getSummary());
            System.out.println("Color:" + entry.getColor());
            System.out.println("ID:" + entry.getId());
            calendarCount = i + 1;
            System.out.println();
        }
        System.out.println();
        // Gather events + times from personal calendar
        CalendarEventFeed resultFeed = myService.getFeed(feedUrl, CalendarEventFeed.class);
        for (int i = 0; i < resultFeed.getEntries().size(); i++) {
            eventCount = i + 1;
            entry = resultFeed.getEntries().get(i);
            System.out.println(eventCount + ": " + entry.getTitle().getPlainText());
            // Gather events in the form of a list, 'When' is elemental to the calendar API, apparently
            events = entry.getTimes();
            for (When x : events) {
                System.out.println();
                List<EventWho> PL = entry.getParticipants();
                EventWho[] ew = PL.toArray(new EventWho[PL.size()]);
                System.out.println(ew[0].toString());
                // participantEventSize[i] = entry.getParticipants().size();
                System.out.println("RunJustViz: " + x.getStartTime() + "\n" + "End: " + x.getEndTime());
                System.out.println("Participants: " + entry.getParticipants());
                System.out.println("Number of Participants: " + entry.getParticipants().size());
                System.out.println();
            }
        }
        // Query to retrieve recent events
        Query q = new Query(feedUrl);
        Query today = new Query(feedUrl);
        q.getMaxResults();
        DateTime x = today.getUpdatedMax();
        // put query into a feed
        Feed myResultsFeed = myService.query(q, Feed.class);
        // if there are entries
        if (myResultsFeed.getEntries().size() > 0) {
            Entry firstMatchEntry = myResultsFeed.getEntries().get(0);
            myEntryTitle = firstMatchEntry.getTitle().getPlainText();
            System.out.println(myEntryTitle);
            System.out.println("Calendar Info:\n" + eventCount + " Events\n");
        } else {
            System.out.println("There are no entries in your calendar\n");
        }
    // Exception handling
    } catch (MalformedURLException e) {
        System.out.println("Invalid URL");
    } catch (IOException e) {
        System.out.println("Unable to execute");
    } catch (AuthenticationException e) {
        System.out.println("Authentication Problem");
    } catch (ServiceException e) {
        System.out.println("Service Problem");
    }
}
