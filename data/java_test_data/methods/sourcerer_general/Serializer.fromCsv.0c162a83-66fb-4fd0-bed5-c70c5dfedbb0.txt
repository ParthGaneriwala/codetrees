public void fromCsv(String csv) {
    HashMap<String, Command> actions = new HashMap<String, Command>();
    Preferences prefs = new Preferences();
    String[] rows = csv.split("\n");
    for (String row : rows) {
        String[] cols = splitTsvRow(row);
        if (cols.length < 1)
            continue;
        String type = cols[0];
        if (type.equals("preference")) {
            if (cols.length < 3)
                continue;
            String name = cols[1];
            String value = cols[2];
            if (name.equals("backgroundColor"))
                prefs.setBackgroundColor(value);
            else if (name.equals("backgroundPosition"))
                prefs.setBackgroundPosition(value);
            else if (name.equals("backgroundRepeat"))
                prefs.setBackgroundRepeat(value);
            else if (name.equals("backgroundImage"))
                prefs.setBackgroundImage(value);
            else if (name.equals("iconTextColor"))
                prefs.setIconTextColor(value);
            else if (name.equals("iconBackgroundColor"))
                prefs.setIconBackgroundColor(value);
        } else if (type.equals("window")) {
            if (cols.length < 9)
                continue;
            WindowContents wc = new WindowContents(WindowContents.ContentType.valueOf(cols[3]), cols[4]);
            WindowAddCommand cmd = new WindowAddCommand(cols[1], cols[2], wc, Integer.valueOf(cols[5]), Integer.valueOf(cols[6]), Integer.valueOf(cols[7]), Integer.valueOf(cols[8]));
            CommandEvent.fire(this, cmd);
        } else if (type.equals("action")) {
            if (cols.length < 3)
                continue;
            String name = cols[1];
            String id = cols[2];
            if (name.equals("browserOpen")) {
                if (cols.length < 5)
                    continue;
                BrowserOpenCommand cmd = new BrowserOpenCommand(cols[3], cols[4]);
                actions.put(id, cmd);
            } else if (name.equals("explorerWindowOpenVirtualFolder")) {
                if (cols.length < 4)
                    continue;
                ExplorerWindowOpenVirtualFolderCommand cmd = new ExplorerWindowOpenVirtualFolderCommand(cols[3]);
                actions.put(id, cmd);
            } else if (name.equals("explorerWindowOpenFolder")) {
                if (cols.length < 4)
                    continue;
                ExplorerWindowOpenFolderCommand cmd = new ExplorerWindowOpenFolderCommand(cols[3], true);
                actions.put(id, cmd);
            } else if (name.equals("feedEntryOpen")) {
                if (cols.length < 5)
                    continue;
                FeedEntryOpenCommand cmd = new FeedEntryOpenCommand(cols[3], cols[4]);
                actions.put(id, cmd);
            } else if (name.equals("nativeAlert")) {
                if (cols.length < 4)
                    continue;
                NativeAlertCommand cmd = new NativeAlertCommand(cols[3]);
                actions.put(id, cmd);
            } else if (name.equals("existingDocumentOpen")) {
                if (cols.length < 3)
                    continue;
                ExistingDocumentOpenCommand cmd = new ExistingDocumentOpenCommand();
                actions.put(id, cmd);
            } else if (name.equals("windowRestore")) {
                if (cols.length < 11)
                    continue;
                WindowContents wc = new WindowContents(WindowContents.ContentType.valueOf(cols[5]), cols[6]);
                WindowRestoreCommand cmd = new WindowRestoreCommand(id, cols[3], cols[4], wc, Integer.valueOf(cols[7]), Integer.valueOf(cols[8]), Integer.valueOf(cols[9]), Integer.valueOf(cols[10]));
                actions.put(id, cmd);
            }
        } else if (type.equals("folder")) {
            if (cols.length < 8)
                continue;
            VirtualEntryFolderAddCommand cmd = new VirtualEntryFolderAddCommand(cols[1], cols[2], cols[3], cols[4], Integer.parseInt(cols[5]), Integer.parseInt(cols[6]), Integer.parseInt(cols[7]));
            CommandEvent.fire(this, cmd);
        } else if (type.equals("shortcut")) {
            if (cols.length < 9)
                continue;
            String id = cols[1];
            Command action = new SystemNotImplementedCommand();
            if (actions.containsKey(id))
                action = actions.get(id);
            VirtualEntryAddCommand cmd = new VirtualEntryAddCommand(id, cols[2], cols[3], cols[4], cols[5], Integer.parseInt(cols[6]), Integer.parseInt(cols[7]), Integer.parseInt(cols[8]), action);
            CommandEvent.fire(this, cmd);
        } else if (type.equals("trash")) {
            if (cols.length < 6)
                continue;
            VirtualEntryTrashAddCommand cmd = new VirtualEntryTrashAddCommand(cols[1], cols[2], true, Integer.parseInt(cols[3]), Integer.parseInt(cols[4]), Integer.parseInt(cols[5]));
            CommandEvent.fire(this, cmd);
        }
    }
    DesktopConfigureCommand cmd = new DesktopConfigureCommand(prefs.getBackgroundColor(), prefs.getBackgroundImage(), prefs.getBackgroundPosition(), prefs.getBackgroundRepeat(), prefs.getIconTextColor(), prefs.getIconBackgroundColor());
    CommandEvent.fire(this, cmd);
}
