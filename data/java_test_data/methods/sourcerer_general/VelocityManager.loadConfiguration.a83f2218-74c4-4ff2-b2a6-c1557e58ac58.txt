public Properties loadConfiguration(ServletContext context) {
    if (context == null) {
        String gripe = "Error attempting to create a loadConfiguration from a null ServletContext!";
        log.error(gripe);
        throw new IllegalArgumentException(gripe);
    }
    Properties properties = new Properties();
    // now apply our systemic defaults, then allow user to override
    applyDefaultConfiguration(context, properties);
    String defaultUserDirective = properties.getProperty("userdirective");
    /**
     * if the user has specified an external velocity configuration file, we'll want to search for it in the
     * following order
     *
     * 1. relative to the context path
     * 2. relative to /WEB-INF
     * 3. in the class path
     */
    String configfile;
    if (customConfigFile != null) {
        configfile = customConfigFile;
    } else {
        configfile = "velocity.properties";
    }
    configfile = configfile.trim();
    InputStream in = null;
    String resourceLocation = null;
    try {
        if (context.getRealPath(configfile) != null) {
            // 1. relative to context path, i.e. /velocity.properties
            String filename = context.getRealPath(configfile);
            if (filename != null) {
                File file = new File(filename);
                if (file.isFile()) {
                    resourceLocation = file.getCanonicalPath() + " from file system";
                    in = new FileInputStream(file);
                }
                // 2. if nothing was found relative to the context path, search relative to the WEB-INF directory
                if (in == null) {
                    file = new File(context.getRealPath("/WEB-INF/" + configfile));
                    if (file.isFile()) {
                        resourceLocation = file.getCanonicalPath() + " from file system";
                        in = new FileInputStream(file);
                    }
                }
            }
        }
        // 3. finally, if there's no physical file, how about something in our classpath
        if (in == null) {
            in = VelocityManager.class.getClassLoader().getResourceAsStream(configfile);
            if (in != null) {
                resourceLocation = configfile + " from classloader";
            }
        }
        // if we've got something, load 'er up
        if (in != null) {
            log.info("Initializing velocity using " + resourceLocation);
            properties.load(in);
        }
    } catch (IOException e) {
        log.warn("Unable to load velocity configuration " + resourceLocation, e);
    } finally {
        if (in != null) {
            try {
                in.close();
            } catch (IOException e) {
            }
        }
    }
    // overide with programmatically set properties
    if (this.velocityProperties != null) {
        Iterator keys = this.velocityProperties.keySet().iterator();
        while (keys.hasNext()) {
            String key = (String) keys.next();
            properties.setProperty(key, this.velocityProperties.getProperty(key));
        }
    }
    String userdirective = properties.getProperty("userdirective");
    if ((userdirective == null) || userdirective.trim().equals("")) {
        userdirective = defaultUserDirective;
    } else {
        userdirective = userdirective.trim() + "," + defaultUserDirective;
    }
    properties.setProperty("userdirective", userdirective);
    // for debugging purposes, allows users to dump out the properties that have been configured
    if (log.isDebugEnabled()) {
        log.debug("Initializing Velocity with the following properties ...");
        for (Iterator iter = properties.keySet().iterator(); iter.hasNext(); ) {
            String key = (String) iter.next();
            String value = properties.getProperty(key);
            if (log.isDebugEnabled()) {
                log.debug("    '" + key + "' = '" + value + "'");
            }
        }
    }
    return properties;
}
