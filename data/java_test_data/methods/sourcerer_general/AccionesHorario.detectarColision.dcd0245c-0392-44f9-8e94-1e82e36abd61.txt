// Deteccion de colisiones
private void detectarColision(Session s, Oferta obj, Horario horario) {
    // Se obtienen todas las Modalidades del Plan de Estudio
    String crit = " where plandeestudios = " + obj.getPlanDeEstudios().getIdPlan();
    java.util.List<Modalidad> listaModalidad = (java.util.List<Modalidad>) s.createQuery("from Modalidad" + crit).list();
    java.util.Iterator IterModalidad = listaModalidad.iterator();
    crit = " where idOferta != " + obj.getIdOferta();
    crit += " and plandeestudios = " + obj.getPlanDeEstudios().getIdPlan();
    crit += " and periodo = " + obj.getPeriodo().getIdPeriodo();
    java.util.List<Oferta> listaOferta = (java.util.List<Oferta>) s.createQuery("from Oferta" + crit).list();
    java.util.Iterator IterOferta;
    Oferta ofertaT = null;
    Horario horarioT = null;
    Colision colisionT = null;
    Modalidad modalidadT = null;
    Asociacion asociacionTA = null;
    Asociacion asociacionTB = null;
    /* Acá se verifican las restricciones de tiempo.
             *
             * NOTA
             * Una vez descartadas las ofertas no se tomaran en cuenta para otras modalidades
             * De esta manera se supone que la distancia entre las ofertas para las distintas
             * modalidades se mantendran gracias a los requisitos
             */
    while (IterModalidad.hasNext()) {
        modalidadT = (Modalidad) IterModalidad.next();
        crit = " where modalidad = " + modalidadT.getIdModalidad();
        crit += " and requisito = " + obj.getRequisito().getIdRequisito();
        if (!s.createQuery("from Asociacion" + crit).list().isEmpty()) {
            asociacionTA = (Asociacion) s.createQuery("from Asociacion" + crit).list().get(0);
            IterOferta = listaOferta.iterator();
            while (IterOferta.hasNext()) {
                ofertaT = (Oferta) IterOferta.next();
                crit = " where modalidad = " + modalidadT.getIdModalidad();
                crit += " and requisito = " + ofertaT.getRequisito().getIdRequisito();
                if (!s.createQuery("from Asociacion" + crit).list().isEmpty()) {
                    asociacionTB = (Asociacion) s.createQuery("from Asociacion" + crit).list().get(0);
                    // Se eliminan las ofertas de aquellas asignaturas que esten distanciadas por mas de 3 periodos
                    if (obtenerDiferenciaPeriodoAbs(asociacionTA, asociacionTB) > 3) {
                        IterOferta.remove();
                    }
                }
            }
        }
    }
    /* Acá se verifican las restricciones de requisitos.
             */
    IterOferta = listaOferta.iterator();
    while (IterOferta.hasNext()) {
        ofertaT = (Oferta) IterOferta.next();
        if (verificarCorrequisitos(obj, ofertaT, s))
            IterOferta.remove();
    }
    IterOferta = listaOferta.iterator();
    while (IterOferta.hasNext()) {
        ofertaT = (Oferta) IterOferta.next();
        java.util.Iterator IterHorario = ofertaT.getHorario().iterator();
        while (IterHorario.hasNext()) {
            horarioT = (Horario) IterHorario.next();
            if (horario.getDia() == horarioT.getDia()) {
                if (horario.getHora() == horarioT.getHora()) {
                    colisionT = crearColision(obj, ofertaT);
                    if (colisionT != null)
                        s.save(colisionT);
                }
            }
        }
    }
}
