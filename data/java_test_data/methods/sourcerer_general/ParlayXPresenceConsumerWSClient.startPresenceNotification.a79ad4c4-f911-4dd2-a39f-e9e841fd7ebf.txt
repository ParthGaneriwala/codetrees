public void startPresenceNotification(String uri) throws Exception {
    try {
        // create request envelope
        es.tid.www.wsdl.parlayx.presence.consumer.v1_1.PresenceConsumerServiceStub.StartPresenceNotification startPresence = new es.tid.www.wsdl.parlayx.presence.consumer.v1_1.PresenceConsumerServiceStub.StartPresenceNotification();
        // create simple reference object
        es.tid.www.wsdl.parlayx.presence.consumer.v1_1.PresenceConsumerServiceStub.SimpleReference reference = new PresenceConsumerServiceStub.SimpleReference();
        // add remote interface name to call
        reference.setInterfaceName("PresenceConsumer");
        // add a correlator for the presentity uri. This correlator is used by gateway service to link
        // subsequent requests
        String correlator = LineStateFlags.getInstance().addCorrelatorFor(uri);
        reference.setCorrelator(correlator);
        // read from config properties reverse notification interface and add it to simple reference.
        // That reverse interface will be the endpoint where received the notification messages
        URI localEndPoint = new URI(PresenceConsumerConfigInfo.getInstance().getConfigProperty("parlayx.presence.notification.ws.endpoint"));
        reference.setEndpoint(localEndPoint);
        // add SimpleReference object to request envelope
        startPresence.setReference(reference);
        // read watcher to subscribe from config properties and add it to request envelope
        String watcher = PresenceConsumerConfigInfo.getInstance().getConfigProperty("presence.watcher.identity");
        startPresence.setWatcher(new URI(watcher));
        // create presentity parameter and add it to request envelope.
        URI[] presentities = new URI[1];
        presentities[0] = new URI(uri);
        startPresence.setPresentities(presentities);
        // set checkinmmediate (always true in this call) (see presence OMA specifications)
        startPresence.setCheckImmediate(true);
        // set frequency parameter as 1000 milliseconds (see presence OMA specifications)
        es.tid.www.wsdl.parlayx.presence.consumer.v1_1.PresenceConsumerServiceStub.TimeMetric timeM = new es.tid.www.wsdl.parlayx.presence.consumer.v1_1.PresenceConsumerServiceStub.TimeMetric();
        timeM.setUnits(Integer.parseInt("1000"));
        timeM.setMetric(es.tid.www.wsdl.parlayx.presence.consumer.v1_1.PresenceConsumerServiceStub.TimeMetrics.Millisecond);
        startPresence.setFrequency(timeM);
        // create stub object generated by WSDL2Java tool and fill with request envelope.
        // use endpoint readed from config properties
        es.tid.www.wsdl.parlayx.presence.consumer.v1_1.PresenceConsumerServiceStub.StartPresenceNotification1 request = new es.tid.www.wsdl.parlayx.presence.consumer.v1_1.PresenceConsumerServiceStub.StartPresenceNotification1();
        request.setStartPresenceNotification(startPresence);
        String endpointAsync = PresenceConsumerConfigInfo.getInstance().getConfigProperty("parlayx.presence.consumer.ws.endpoint.async");
        es.tid.www.wsdl.parlayx.presence.consumer.v1_1.PresenceConsumerServiceStub stub = new es.tid.www.wsdl.parlayx.presence.consumer.v1_1.PresenceConsumerServiceStub(endpointAsync);
        // fill an authentication header for soap to include user and password as basic authentication,
        // for security considerations
        ServiceClient sClient = stub._getServiceClient();
        Options opt = sClient.getOptions();
        HttpTransportProperties.Authenticator authenticator = new HttpTransportProperties.Authenticator();
        authenticator.setRealm(HttpTransportProperties.Authenticator.BASIC);
        authenticator.setUsername(PresenceConsumerConfigInfo.getInstance().getConfigProperty("security.user"));
        authenticator.setPassword(PresenceConsumerConfigInfo.getInstance().getConfigProperty("security.password"));
        authenticator.setPreemptiveAuthentication(true);
        opt.setProperty(org.apache.axis2.transport.http.HTTPConstants.AUTHENTICATE, authenticator);
        sClient.setOptions(opt);
        stub._setServiceClient(sClient);
        // call remote webservice
        stub.startPresenceNotification(request);
    // if nothing extrange happens. The method has been successfully finalized.
    // An exception is thrown otherwise
    } catch (Exception e) {
        // If some problem happens during method execution, throw an exception
        throw new Exception("An exception happened while calling startPresenceNotification():" + e.toString());
    }
}
