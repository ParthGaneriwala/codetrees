public String save() throws Exception {
    System.out.println("PurchaseAction -> save() ");
    Double dicountOld = new Double(0);
    if (cancel != null) {
        return CANCEL;
    }
    boolean isNew = false;
    isNew = (purchase.getId() == null);
    if (purchase.getId() != null) {
        Purchase purchaseOld = purchaseManager.get(purchase.getId());
        purchase.setTotalPrice(purchaseOld.getTotalPrice());
        purchase.setRestPrice(purchaseOld.getRestPrice());
        purchase.setDeleted(purchaseOld.getDeleted());
        purchase.setDiscountXfail(purchaseOld.getDiscountXfail());
        dicountOld = purchaseOld.getDiscount();
        if (purchaseOld.getBill() != null) {
            if (withBill) {
                purchase.getBill().setId(purchaseOld.getBill().getId());
                purchase.getBill().setDate(new Date());
            }
        }
    } else {
        purchase.setDeleted(true);
        purchase.setDiscountXfail(0.0D);
    }
    verifySetting();
    updatePurchaseUser();
    Double discountDifference = dicountOld - purchase.getDiscount();
    if (purchase.getRestPrice() + discountDifference >= 0) {
        purchase.setRestPrice(purchase.getRestPrice() + discountDifference);
    } else {
        purchase.setDiscount(dicountOld);
    }
    purchase.setState(true);
    purchase = purchaseManager.save(purchase);
    if (discountDifference < 0) {
        PurchasePayment purchasePayment = new PurchasePayment();
        purchasePayment.setDate(purchase.getDate());
        purchasePayment.setAmount((-1) * discountDifference);
        purchasePayment.setAmountLeft(purchase.getRestPrice());
        purchasePayment.setObservation(getText("purchase.discount.observacion"));
        purchasePayment.setTypePayment(1);
        purchasePayment.setPurchase(purchase);
        purchasePaymentManager.save(purchasePayment);
    } else {
        if (discountDifference > 0) {
            PurchasePayment purchasePayment = new PurchasePayment();
            purchasePayment.setDate(purchase.getDate());
            purchasePayment.setIncrementAmount(discountDifference);
            purchasePayment.setAmountLeft(purchase.getRestPrice());
            purchasePayment.setObservation(getText("purchase.incrementDiscount.observacion"));
            purchasePayment.setTypePayment(3);
            purchasePayment.setPurchase(purchase);
            purchasePaymentManager.save(purchasePayment);
        }
    }
    getSession().setAttribute("purchase", purchase);
    System.out.println("PurchaseAction -> end save() ");
    if (!isNew) {
        saveMessage(getText("purchase.updated"));
        return INPUT;
    } else {
        saveMessage(getText("purchase.added"));
        return SUCCESS;
    }
}
