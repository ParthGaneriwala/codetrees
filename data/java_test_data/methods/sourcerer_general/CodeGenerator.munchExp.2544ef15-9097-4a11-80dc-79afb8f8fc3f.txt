private Temp munchExp(AssemExp exp) {
    Temp ret = new Temp();
    int expType = exp.getExpType();
    if (expType == AssemExp.MEM) {
        AssemMemory memExp = (AssemMemory) exp;
        AssemExp memChild = memExp.getMemExp();
        int memChildType = memChild.getExpType();
        if (memChildType == AssemExp.BIN_OP) {
            AssemBinOpExp binOpExp = (AssemBinOpExp) memChild;
            ret = munchMemBinOpExp(binOpExp);
        } else if (memChildType == AssemExp.CONST) {
            AssemConst constExp = (AssemConst) memChild;
            ret = munchMemConstExp(constExp);
        } else if (memChildType == AssemExp.CALL) {
            AssemCallExp callExp = (AssemCallExp) memChild;
            ret = munchMemCallExp(callExp);
        } else if (memChildType == AssemExp.MEM) {
            AssemMemory mem = (AssemMemory) memChild;
            ret = munchMemMemExp(mem);
        } else if (memChildType == AssemExp.TEMP) {
            AssemTemp tempExp = (AssemTemp) memChild;
            ret = munchMemTempExp(tempExp);
        }
    } else if (expType == AssemExp.BIN_OP) {
        AssemBinOpExp binOpExp = (AssemBinOpExp) exp;
        ret = munchBinOpExp(binOpExp);
    } else if (expType == AssemExp.CONST) {
        AssemConst constExp = (AssemConst) exp;
        ret = munchConstExp(constExp);
    } else if (expType == AssemExp.CALL) {
        AssemCallExp callExp = (AssemCallExp) exp;
        ret = munchCallExp(callExp);
    } else if (expType == AssemExp.TEMP) {
        AssemTemp tempExp = (AssemTemp) exp;
        ret = tempExp.getTemp();
    }
    return ret;
}
