public static JPopupMenu createEditTaskPopup(final RtmTaskListModel taskListModel, final RtmList currentEntry, final int row) {
    final JPopupMenu menu = new JPopupMenu();
    final RtmTask currentTask = taskListModel.getTasks(currentEntry).get(row);
    // prepare the toolbars
    JToolBar nameEditToolbar = new JToolBar();
    JToolBar notesEditToolbar = new JToolBar();
    JToolBar tagsDueDateToolbar = new JToolBar();
    JToolBar updateButtonToolbar = new JToolBar();
    nameEditToolbar.setFloatable(false);
    notesEditToolbar.setFloatable(false);
    tagsDueDateToolbar.setFloatable(false);
    updateButtonToolbar.setFloatable(false);
    // prepare the text fields
    final JTextField nameTextField = new JTextField(currentTask.getName());
    final JTextField dueDateTextField;
    if (currentTask.getDueDate() != null) {
        dueDateTextField = new JTextField(fDateFormatter.format(currentTask.getDueDate()));
    } else {
        dueDateTextField = new JTextField();
    }
    JTextField notesTextField = new JTextField();
    final JTextField tagsTextField = new JTextField(currentTask.getTagsString());
    dueDateTextField.setPreferredSize(new Dimension(80, 20));
    nameTextField.setPreferredSize(new Dimension(250, 20));
    notesTextField.setPreferredSize(new Dimension(100, 20));
    tagsTextField.setPreferredSize(new Dimension(100, 20));
    // TODO: removed the duplicate Tagged Key Adapter use
    nameKeyAdapter = new TaggedKeyAdapter() {

        @Override
        public void keyTyped(KeyEvent e) {
            if (e.getKeyChar() == KeyEvent.VK_ENTER) {
                tag();
                SwingUtilities.invokeLater(new Runnable() {

                    @Override
                    public void run() {
                        if (nameKeyAdapter.isTagged())
                            currentTask.setName(nameTextField.getText());
                        if (dueDateAdapter.isTagged())
                            currentTask.updateDueDate(dueDateTextField.getText());
                        if (tagsKeyAdapter.isTagged())
                            currentTask.updateTags(tagsTextField.getText());
                        menu.setVisible(false);
                    }
                });
            }
        }
    };
    dueDateAdapter = new TaggedKeyAdapter() {

        @Override
        public void keyTyped(KeyEvent e) {
            tag();
            if (e.getKeyChar() == KeyEvent.VK_ENTER) {
                SwingUtilities.invokeLater(new Runnable() {

                    @Override
                    public void run() {
                        if (nameKeyAdapter.isTagged())
                            currentTask.setName(nameTextField.getText());
                        if (dueDateAdapter.isTagged())
                            currentTask.updateDueDate(dueDateTextField.getText());
                        if (tagsKeyAdapter.isTagged())
                            currentTask.updateTags(tagsTextField.getText());
                    }
                });
                menu.setVisible(false);
            }
        }
    };
    tagsKeyAdapter = new TaggedKeyAdapter() {

        @Override
        public void keyTyped(KeyEvent e) {
            tag();
            if (e.getKeyChar() == KeyEvent.VK_ENTER) {
                SwingUtilities.invokeLater(new Runnable() {

                    @Override
                    public void run() {
                        if (nameKeyAdapter.isTagged())
                            currentTask.setName(nameTextField.getText());
                        if (dueDateAdapter.isTagged())
                            currentTask.updateDueDate(dueDateTextField.getText());
                        if (tagsKeyAdapter.isTagged())
                            currentTask.updateTags(tagsTextField.getText());
                    }
                });
                menu.setVisible(false);
            }
        }
    };
    nameTextField.addKeyListener(nameKeyAdapter);
    dueDateTextField.addKeyListener(dueDateAdapter);
    tagsTextField.addKeyListener(tagsKeyAdapter);
    // construct the pop up
    // #1 the task name toolbar
    JLabel jLabel = new JLabel("Task: ");
    jLabel.setPreferredSize(new Dimension(60, 20));
    nameEditToolbar.add(jLabel);
    nameEditToolbar.add(nameTextField);
    menu.add(nameEditToolbar);
    // #2 due date & tags toolbar
    jLabel = new JLabel("Due Date: ");
    jLabel.setPreferredSize(new Dimension(60, 20));
    tagsDueDateToolbar.add(jLabel);
    tagsDueDateToolbar.add(dueDateTextField);
    jLabel = new JLabel(" - Tags: ");
    tagsDueDateToolbar.add(jLabel);
    tagsDueDateToolbar.add(tagsTextField);
    menu.add(nameEditToolbar);
    menu.add(tagsDueDateToolbar);
    // #3 the notes toolbar
    jLabel = new JLabel("Notes: ");
    jLabel.setPreferredSize(new Dimension(60, 20));
    notesEditToolbar.add(jLabel);
    notesEditToolbar.add(notesTextField);
    // menu.add(notesEditToolbar);
    // #4 add the commit button
    menu.add(new JSeparator(SwingConstants.HORIZONTAL));
    JButton commitButton = new JButton(" update ");
    commitButton.addMouseListener(new MouseAdapter() {

        @Override
        public void mouseClicked(MouseEvent e) {
            SwingUtilities.invokeLater(new Runnable() {

                @Override
                public void run() {
                    currentTask.setName(nameTextField.getText());
                    currentTask.updateDueDate(dueDateTextField.getText());
                }
            });
            menu.setVisible(false);
        }
    });
    updateButtonToolbar.add(commitButton);
    menu.add(updateButtonToolbar);
    return menu;
}
