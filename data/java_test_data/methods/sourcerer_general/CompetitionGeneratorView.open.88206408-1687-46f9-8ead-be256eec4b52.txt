public void open() {
    busyIconTimer.start();
    progressBar.setVisible(true);
    // File Chooser Build
    JFileChooser filechooser = new JFileChooser();
    // Open Type
    filechooser.setDialogType(JFileChooser.OPEN_DIALOG);
    // Creating filters for files and adding it to the file chooser
    FileFilter excel_97_2003 = createFileFilter("Excel 97-2003 ", true, "xls");
    FileFilter excel_2007 = createFileFilter("Excel Open Format 2007 ", true, "xslx");
    filechooser.addChoosableFileFilter(excel_97_2003);
    // Comming soon...
    /* filechooser.addChoosableFileFilter(excel_2007); */
    filechooser.setCurrentDirectory(new File("./src/competitiongenerator/resources"));
    File file = null;
    int retval = filechooser.showDialog(this.getComponent(), null);
    if (retval == JFileChooser.APPROVE_OPTION) {
        file = filechooser.getSelectedFile();
        if (logger.isLoggable(Level.INFO)) {
            logger.info("Selected File: " + file.getName());
        }
    } else if (retval == JFileChooser.CANCEL_OPTION) {
        JOptionPane.showMessageDialog(this.getComponent(), "User cancelled operation. No file was chosen.");
    } else if (retval == JFileChooser.ERROR_OPTION) {
        JOptionPane.showMessageDialog(this.getComponent(), "An error occured. No file was chosen.");
    } else {
        JOptionPane.showMessageDialog(this.getComponent(), "Unknown operation occured.");
    }
    if (logger.isLoggable(Level.INFO)) {
        logger.log(Level.INFO, "Progress Bar: " + progressBar.getPercentComplete());
    }
    FileInputStream fis = null;
    try {
        if (null != file) {
            fis = new FileInputStream(file);
            TabbedPane.setTitleAt(0, "Competitors (" + file.getName() + ")");
        }
    } catch (FileNotFoundException ex) {
        CompetitionGeneratorApp.logger.log(Level.SEVERE, null, ex);
    }
    try {
        if (fis != null) {
            POIFSFileSystem fs = new POIFSFileSystem(fis);
            HSSFWorkbook wb = new HSSFWorkbook(fs);
            HSSFSheet sheet = wb.getSheetAt(0);
            HSSFRow row;
            HSSFCell cell;
            // Number of rows
            int rows;
            rows = sheet.getPhysicalNumberOfRows();
            // Number of columns
            int cols = 0;
            int tmp = 0;
            // This trick ensures that we get the data properly even if it doesn't start from first few rows
            for (int i = 0; i < 10 || i < rows; i++) {
                row = sheet.getRow(i);
                if (row != null) {
                    tmp = sheet.getRow(i).getPhysicalNumberOfCells();
                    if (tmp > cols) {
                        cols = tmp;
                    }
                }
            }
            if (CompetitionGeneratorApp.logger.isLoggable(Level.INFO)) {
                final StringBuffer sb = new StringBuffer();
                sb.append("Cols: ");
                sb.append(cols);
                sb.append("\tRows: ");
                sb.append(rows);
                sb.append("\n");
                CompetitionGeneratorApp.logger.log(Level.INFO, sb.toString());
            }
            for (int r = 0; r < rows; r++) {
                row = sheet.getRow(r);
                if (row != null) {
                    for (int c = 0; c < cols; c++) {
                        cell = row.getCell(c);
                        if (cell != null) {
                            // Your code here
                            /* Trying to obtain the cell formula in a cell
                                 * tooltip but doesn't seem to work in that way.
                                 **/
                            // if (cell.getCellFormula().equalsIgnoreCase(null)) {
                            // ExcelTable.setValueAt(cell.getNumericCellValue()+"", r, c);
                            // } else {
                            ExcelTable.setValueAt(cell, r, c);
                        // }
                        }
                    }
                }
            }
        } else {
            if (logger.isLoggable(Level.WARNING)) {
                logger.log(Level.WARNING, "File NOT FOUND!!");
            }
        }
        busyIconTimer.stop();
        progressBar.setVisible(false);
        TabbedPane.setEnabled(true);
        CompetitorsPane.setEnabled(true);
        ExcelTable.setEnabled(true);
        FightsPane.setEnabled(true);
    } catch (Exception ioe) {
        logger.log(Level.SEVERE, ioe.toString());
    }
}
