public void testSeqAdd() {
    Seq seq = m.createSeq();
    assertEquals(0, seq.size());
    assertTrue(m.contains(seq, RDF.type, RDF.Seq));
    // 
    seq.add(tvBoolean);
    assertTrue(seq.contains(tvBoolean));
    assertFalse(seq.contains(!tvBoolean));
    // 
    seq.add(tvByte);
    assertTrue(seq.contains(tvByte));
    assertFalse(seq.contains((byte) 101));
    // 
    seq.add(tvShort);
    assertTrue(seq.contains(tvShort));
    assertFalse(seq.contains((short) 102));
    // 
    seq.add(tvInt);
    assertTrue(seq.contains(tvInt));
    assertFalse(seq.contains((int) -101));
    // 
    seq.add(tvLong);
    assertTrue(seq.contains(tvLong));
    assertFalse(seq.contains((long) -102));
    // 
    seq.add(tvChar);
    assertTrue(seq.contains(tvChar));
    assertFalse(seq.contains('?'));
    // 
    seq.add(123.456f);
    assertTrue(seq.contains(123.456f));
    assertFalse(seq.contains(456.123f));
    // 
    seq.add(-123.456d);
    assertTrue(seq.contains(-123.456d));
    assertFalse(seq.contains(-456.123d));
    // 
    seq.add("a string");
    assertTrue(seq.contains("a string"));
    assertFalse(seq.contains("a necklace"));
    // 
    seq.add(m.createLiteral("another string"));
    assertTrue(seq.contains("another string"));
    assertFalse(seq.contains("another necklace"));
    // 
    seq.add(new LitTestObj(12345));
    assertTrue(seq.contains(new LitTestObj(12345)));
    assertFalse(seq.contains(new LitTestObj(54321)));
    // 
    Resource present = m.createResource(new ResTestObjF());
    Resource absent = m.createResource(new ResTestObjF());
    seq.add(present);
    assertTrue(seq.contains(present));
    assertFalse(seq.contains(absent));
    // 
    assertEquals(12, seq.size());
}
