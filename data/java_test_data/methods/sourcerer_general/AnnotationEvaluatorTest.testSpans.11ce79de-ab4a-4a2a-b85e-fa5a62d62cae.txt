@Test
public void testSpans() throws Exception {
    AnalysisEngineDescription desc = AnnotationEvaluator.getSpanDescription(Token.class, "Gold", "System");
    // necessary because test type system descriptors are not in their own files
    desc.getAnalysisEngineMetaData().setTypeSystem(TypeSystemDescriptionFactory.createTypeSystemDescription("org.cleartk.type.test.TestTypeSystem"));
    AnalysisEngine engine = AnalysisEngineFactory.createPrimitive(desc);
    JCas base = engine.newJCas();
    ViewURIUtil.setURI(base, new File("testSpans").toURI());
    JCas gold = base.createView("Gold");
    JCas system = base.createView("System");
    for (JCas jCas : Arrays.asList(gold, system)) {
        jCas.setDocumentText("She sells seashells by the seashore.");
    }
    addToken(gold, 0, 3);
    addToken(gold, 4, 9);
    addToken(gold, 10, 19);
    addToken(gold, 20, 22);
    addToken(gold, 23, 26);
    addToken(gold, 27, 35);
    addToken(system, 4, 9);
    addToken(system, 10, 19);
    addToken(system, 20, 26);
    addToken(system, 27, 35);
    addToken(system, 35, 36);
    // save old logging levels
    Map<Handler, Level> consoleHandlers = new HashMap<Handler, Level>();
    for (Handler handler : Logger.getLogger("").getHandlers()) {
        if (handler instanceof ConsoleHandler) {
            consoleHandlers.put(handler, handler.getLevel());
        }
    }
    // handlers to collect warning and info messages
    StringHandler warningHandler = new StringHandler();
    warningHandler.setLevel(Level.WARNING);
    StringHandler infoHandler = new StringHandler();
    infoHandler.setLevel(Level.INFO);
    Logger logger = Logger.getLogger(AnnotationEvaluator.class.getName());
    try {
        // turn off other logging and add new handlers
        logger.addHandler(warningHandler);
        logger.addHandler(infoHandler);
        for (Handler consoleHandler : consoleHandlers.keySet()) {
            consoleHandler.setLevel(Level.OFF);
        }
        // process document
        engine.process(base);
        // complete a batch
        engine.batchProcessComplete();
        // check the warnings
        String warnings = warningHandler.logBuilder.toString();
        assertProperty("gold", "6", warnings);
        assertProperty("system", "5", warnings);
        assertProperty("matching", "3", warnings);
        assertProperty("precision", "0.600", warnings);
        assertProperty("recall", "0.500", warnings);
        assertProperty("f1", "0.545", warnings);
        Assert.assertFalse(warnings.matches(".*(WRONG|DROPPED|ADDED).*"));
        // check the info
        String info = infoHandler.logBuilder.toString();
        assertSomeLineMatches(".*testSpans.*", info);
        assertSomeLineMatches("DROPPED.*\\[She\\].*", info);
        assertSomeLineMatches("DROPPED.*\\[by\\].*", info);
        assertSomeLineMatches("DROPPED.*\\[the\\].*", info);
        assertSomeLineMatches("ADDED.*\\[by the\\].*", info);
        assertSomeLineMatches("ADDED.*\\[\\.\\].*", info);
        assertProperty("gold", "6", warnings);
        assertProperty("system", "5", warnings);
        assertProperty("matching", "3", warnings);
        assertProperty("precision", "0.600", warnings);
        assertProperty("recall", "0.500", warnings);
        assertProperty("f1", "0.545", warnings);
        // empty logs
        warningHandler.logBuilder.delete(0, warningHandler.logBuilder.length());
        infoHandler.logBuilder.delete(0, infoHandler.logBuilder.length());
        // process document
        engine.process(base);
        // complete the collection
        engine.collectionProcessComplete();
        // check the warnings
        warnings = warningHandler.logBuilder.toString();
        assertProperty("gold", "12", warnings);
        assertProperty("system", "10", warnings);
        assertProperty("matching", "6", warnings);
        assertProperty("precision", "0.600", warnings);
        assertProperty("recall", "0.500", warnings);
        assertProperty("f1", "0.545", warnings);
        Assert.assertFalse(warnings.matches(".*(WRONG|DROPPED|ADDED).*"));
    } finally {
        // restore original logging configuration
        logger.removeHandler(warningHandler);
        logger.removeHandler(infoHandler);
        for (Handler consoleHandler : consoleHandlers.keySet()) {
            consoleHandler.setLevel(consoleHandlers.get(consoleHandler));
        }
    }
}
