/**
 * Rendering mode selection:
 */
private int showFlagSettingDialog(int type) {
    renderingMode = 0;
    final JDialog exp = new JDialog(this, "dsj - setup", true);
    JPanel rm = new JPanel(new GridLayout(0, 1));
    final String[] fNames = new String[] { " native - DirectDraw", " native - GDI", " java - autodraw", " java - poll", "java - poll rgb", "headless", "embedded VMR", "overlay" };
    final int[] flags = new int[] { DSFiltergraph.RENDER_NATIVE, DSFiltergraph.NATIVE_FORCE_GDI, DSFiltergraph.JAVA_AUTODRAW, DSFiltergraph.JAVA_POLL, DSFiltergraph.JAVA_POLL_RGB, DSFiltergraph.HEADLESS, DSFiltergraph.VMR_EMBED, DSFiltergraph.OVERLAY };
    final ButtonGroup bg = new ButtonGroup();
    final JCheckBox rcd = new JCheckBox(" renderer-controls demo", showRendererCtrls);
    final JCheckBox dvd = new JCheckBox(" (DVD) mouse control");
    for (int i = 0; i < 8; i++) {
        final int id = i;
        final JCheckBox fBox = new JCheckBox(fNames[i], i == 0);
        fBox.setFocusPainted(false);
        fBox.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                renderingMode = renderingMode & 0xFF80;
                if (fBox.isSelected())
                    renderingMode = renderingMode | flags[id];
                rcd.setEnabled(id == 0 || (renderingMode & (DSFiltergraph.JAVA_AUTODRAW | DSFiltergraph.VMR_EMBED)) != 0);
                dvd.setEnabled((renderingMode & (DSFiltergraph.OVERLAY | DSFiltergraph.VMR_EMBED)) != 0);
            }
        });
        rm.add(fBox);
        bg.add(fBox);
    }
    final JCheckBox da = new JCheckBox(" deliver audio");
    da.setFocusPainted(false);
    da.setBackground(Color.lightGray);
    da.addActionListener(new ActionListener() {

        public void actionPerformed(ActionEvent e) {
            if (da.isSelected())
                renderingMode = renderingMode | DSFiltergraph.DELIVER_AUDIO;
            else
                renderingMode = renderingMode & (0xFFFF ^ DSFiltergraph.DELIVER_AUDIO);
        }
    });
    rm.add(da);
    final JCheckBox paused = new JCheckBox(" paused");
    paused.setFocusPainted(false);
    paused.setBackground(Color.lightGray);
    paused.addActionListener(new ActionListener() {

        public void actionPerformed(ActionEvent e) {
            if (paused.isSelected())
                renderingMode = renderingMode | DSFiltergraph.INIT_PAUSED;
            else
                renderingMode = renderingMode & (0xFFFF ^ DSFiltergraph.INIT_PAUSED);
        }
    });
    rm.add(paused);
    if (type == DSFiltergraph.DVD || type == DSFiltergraph.MOVIE) {
        dvd.setEnabled(type == DSFiltergraph.DVD);
        dvd.setFocusPainted(false);
        dvd.setBackground(Color.lightGray);
        dvd.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                if (dvd.isSelected())
                    renderingMode = renderingMode | DSFiltergraph.DVD_MENU_ENABLED;
                else
                    renderingMode = renderingMode & (0xFFFF ^ DSFiltergraph.DVD_MENU_ENABLED);
            }
        });
        rm.add(dvd);
    }
    rcd.setFocusPainted(false);
    rcd.addActionListener(new ActionListener() {

        public void actionPerformed(ActionEvent e) {
            showRendererCtrls = rcd.isSelected();
        }
    });
    rm.add(rcd);
    JButton go = new JButton("go");
    rm.add(go);
    go.addActionListener(new ActionListener() {

        public void actionPerformed(ActionEvent e) {
            exp.setVisible(false);
            exp.dispose();
        }
    });
    exp.getContentPane().add(rm);
    exp.pack();
    exp.setLocation((int) (Toolkit.getDefaultToolkit().getScreenSize().getWidth() / 2 - exp.getWidth() / 2), (int) (Toolkit.getDefaultToolkit().getScreenSize().getHeight() / 2 - exp.getHeight() / 2));
    exp.setVisible(true);
    return renderingMode;
}
