// end readMessage
private void messageTreatment(Message message) {
    switch(message.getType()) {
        // confirm connection
        case Message.CONNECTION_OK:
            connectView.connectionOk(clientNetwork);
            break;
        // diconnection message
        case Message.DISCONNECTION:
            connectView.connectionFailed();
            clientNetwork.disconnect(false);
            break;
        // message
        case Message.PRIVATE_MESSAGE:
            projetChatView.displayPersonnalMessage(message);
            break;
        // public message
        case Message.PUBLIC_MESSAGE:
            projetChatView.displayPublicMessage(message);
            break;
        // add client
        case Message.ADD_CLIENT:
            projetChatView.addClientToList(message.getNickSrc());
            break;
        // delete client
        case Message.DELETE_CLIENT:
            projetChatView.deleteClientFromList(message.getNickSrc());
            if (message.getNickSrc().equals(fileNickSrc)) {
                // if the client disconnected is the file sender then cancel receiving
                IsReceivingFile = false;
                fileNickSrc = null;
                System.out.println(this.getName() + ": Delete new file. ");
                newFile.delete();
                newFile = null;
                fileOut = null;
                projetChatView.userMessage("File transfert failed", "The faile transfert failed beacause the sender is disconnected.");
                projetChatView.setProgressBarInderterminate(false);
                projetChatView.setProgressBarVisible(false);
                projetChatView.setStatus("Connected");
            }
            break;
        // file propose
        case Message.FILE_PROPOSE:
            projetChatView.messagePropose(message);
            break;
        // file accept
        case Message.FILE_ACCEPT:
            if (IsSendingFile) {
                projetChatView.setStatus("Sending file...");
                clientNetwork.sendFile(fileToSend, fileNickDest);
            } else {
                System.out.println(this.getName() + ": Message FILE_ACCEPT received but no FILE_PROPOSE sent -> Nothing to do.");
            }
            break;
        // file deny
        case Message.FILE_DENY:
            if (IsSendingFile) {
                projetChatView.setStatus("Connected.");
                projetChatView.fileToSendDenied(fileNickDest);
                projetChatView.setProgressBarInderterminate(false);
                projetChatView.setProgressBarVisible(false);
                IsSendingFile = false;
                fileToSend = null;
                fileNickDest = null;
            } else {
                System.out.println(this.getName() + ": Message FILE_ACCEPT received but no FILE_PROPOSE sent -> Nothing to do.");
            }
            break;
        // file
        case Message.FILE:
            if (IsReceivingFile) {
                if (fileNickSrc.equals(message.getNickSrc())) {
                    try {
                        fileOut.write(message.getMessageBytes(), 0, message.getLength());
                        System.out.println(this.getName() + ": New piece of file received.");
                    } catch (Exception e) {
                        System.out.println(this.getName() + ": Error while receiving a piece of file (" + e.toString() + ").");
                    }
                } else
                    System.out.println(this.getName() + ": Message FILE received from an other sender -> Nothing to do.");
            } else
                System.out.println(this.getName() + ": Message FILE received but no FILE_PROPOSE received -> Nothing to do.");
            break;
        // file end
        case Message.FILE_END:
            if (IsReceivingFile) {
                if (fileNickSrc.equals(message.getNickSrc())) {
                    System.out.println(this.getName() + ": File successfully received.");
                    projetChatView.userMessage("File received !", "The file transfer is finished. (You can find it in your home directory)");
                    projetChatView.setStatus("Connected");
                    projetChatView.setProgressBarInderterminate(false);
                    projetChatView.setProgressBarVisible(false);
                    IsReceivingFile = false;
                    newFile = null;
                    fileNickSrc = null;
                    fileOut = null;
                } else
                    System.out.println(this.getName() + ": Message FILE_END received from an other sender -> Nothing to do.");
            } else
                System.out.println(this.getName() + ": Message FILE_END received but no FILE_PROPOSE received -> Nothing to do.");
            break;
        // kick message
        case Message.KICK_MESSAGE:
            projetChatView.userMessage("Kicked !", "You have been kicked by " + message.getNickSrc() + " !");
            projetChatView.disconnection();
            clientNetwork.disconnect(false);
            break;
        // not recognized message type
        default:
            System.out.println(this.getName() + ": Not recognized message type(" + message.getType() + ") -> ERROR.");
            break;
    }
}
