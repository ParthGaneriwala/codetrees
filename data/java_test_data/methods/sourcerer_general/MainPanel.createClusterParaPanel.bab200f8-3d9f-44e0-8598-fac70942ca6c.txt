private CollapsiblePanel createClusterParaPanel(JRadioButton component) {
    CollapsiblePanel collapsiblePanel = new CollapsiblePanel(component);
    JPanel panel = new JPanel();
    panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
    // Node Score Threshold
    String nodeScoreThresholdTip = "Sets the acceptable score deviance from\n" + "the seed node's score for expanding a cluster\n" + "(most influental parameter for cluster size).";
    JLabel nodeScoreThresholdLabel = new JLabel("NodeScoreThreshold");
    nodeScoreThreshold = new JFormattedTextField(new DecimalFormat("0.000")) {

        public JToolTip createToolTip() {
            return new MyTipTool();
        }
    };
    nodeScoreThreshold.setColumns(3);
    nodeScoreThreshold.addPropertyChangeListener("value", new MainPanel.FormattedTextFieldAction());
    nodeScoreThreshold.setToolTipText(nodeScoreThresholdTip);
    nodeScoreThreshold.setText((new Double(currentParameters.getNodeScoreCutoff()).toString()));
    JPanel nodeScoreThresholdPanel = new JPanel(new BorderLayout()) {

        public JToolTip createToolTip() {
            return new MyTipTool();
        }
    };
    nodeScoreThresholdPanel.setToolTipText(nodeScoreThresholdTip);
    nodeScoreThresholdPanel.add(nodeScoreThresholdLabel, BorderLayout.WEST);
    nodeScoreThresholdPanel.add(nodeScoreThreshold, BorderLayout.EAST);
    // K-Core input
    JLabel kCoreLabel = new JLabel("K-CoreThreshold");
    kCore = new JFormattedTextField(decimal) {

        public JToolTip createToolTip() {
            return new MyTipTool();
        }
    };
    kCore.setColumns(3);
    kCore.addPropertyChangeListener("value", new MainPanel.FormattedTextFieldAction());
    String kCoreTip = "Filters out clusters lacking a\n" + "maximally inter-connected core\n" + "of at least k edges per node.";
    kCore.setToolTipText(kCoreTip);
    kCore.setText((new Integer(currentParameters.getKCore()).toString()));
    JPanel kCorePanel = new JPanel(new BorderLayout()) {

        public JToolTip createToolTip() {
            return new MyTipTool();
        }
    };
    kCorePanel.setToolTipText(kCoreTip);
    kCorePanel.add(kCoreLabel, BorderLayout.WEST);
    kCorePanel.add(kCore, BorderLayout.EAST);
    // Haircut Input
    String haircutTip = "Remove singly connected\n" + "nodes from clusters.";
    JLabel haircutLabel = new JLabel("Haircut");
    haircut = new JCheckBox() {

        public JToolTip createToolTip() {
            return new MyTipTool();
        }
    };
    haircut.addItemListener(new MainPanel.HaircutCheckBoxAction());
    haircut.setToolTipText(haircutTip);
    haircut.setSelected(currentParameters.isHaircut());
    JPanel haircutPanel = new JPanel(new BorderLayout()) {

        public JToolTip createToolTip() {
            return new MyTipTool();
        }
    };
    haircutPanel.setToolTipText(haircutTip);
    haircutPanel.add(haircutLabel, BorderLayout.WEST);
    haircutPanel.add(haircut, BorderLayout.EAST);
    // Fluffy Input
    JLabel fluffLabel = new JLabel("Fluff");
    fluff = new JCheckBox() {

        public JToolTip createToolTip() {
            return new MyTipTool();
        }
    };
    fluff.addItemListener(new MainPanel.FluffCheckBoxAction());
    String fluffTip = "Expand core cluster by one\n" + "neighbour shell (applied\n" + "after the optional haircut).";
    fluff.setToolTipText(fluffTip);
    fluff.setSelected(currentParameters.isFluff());
    JPanel fluffPanel = new JPanel(new BorderLayout()) {

        public JToolTip createToolTip() {
            return new MyTipTool();
        }
    };
    fluffPanel.setToolTipText(fluffTip);
    fluffPanel.add(fluffLabel, BorderLayout.WEST);
    fluffPanel.add(fluff, BorderLayout.EAST);
    // Fluff node density cutoff input
    JLabel nodeDensityThresholdLabel = new JLabel("threshold");
    nodeDensityThreshold = new JFormattedTextField(new DecimalFormat("0.000")) {

        public JToolTip createToolTip() {
            return new MyTipTool();
        }
    };
    nodeDensityThreshold.setColumns(3);
    nodeDensityThreshold.addPropertyChangeListener("value", new MainPanel.FormattedTextFieldAction());
    String fluffNodeDensityCutoffTip = "Limits fluffing by setting the acceptable\n" + "node density deviance from the core cluster\n" + "density (allows clusters' edges to overlap).";
    nodeDensityThreshold.setToolTipText(fluffNodeDensityCutoffTip);
    nodeDensityThreshold.setText((new Double(currentParameters.getFluffNodeDensityCutoff()).toString()));
    JPanel nodeDensityThresholdPanel = new JPanel(new BorderLayout()) {

        public JToolTip createToolTip() {
            return new MyTipTool();
        }
    };
    nodeDensityThresholdPanel.setToolTipText(fluffNodeDensityCutoffTip);
    nodeDensityThresholdPanel.add(nodeDensityThresholdLabel, BorderLayout.WEST);
    nodeDensityThresholdPanel.add(nodeDensityThreshold, BorderLayout.EAST);
    nodeDensityThresholdPanel.setVisible(currentParameters.isFluff());
    // Max depth input
    JLabel maxDepthLabel = new JLabel("MaxDepth");
    maxDepth = new JFormattedTextField(decimal) {

        public JToolTip createToolTip() {
            return new MyTipTool();
        }
    };
    maxDepth.setColumns(3);
    maxDepth.addPropertyChangeListener("value", new MainPanel.FormattedTextFieldAction());
    String maxDepthTip = "Limits the cluster size by setting the\n" + "maximum search distance from a seed\n" + "node (100 virtually means no limit).";
    maxDepth.setToolTipText(maxDepthTip);
    maxDepth.setText((new Integer(currentParameters.getMaxDepthFromStart()).toString()));
    JPanel maxDepthPanel = new JPanel(new BorderLayout()) {

        public JToolTip createToolTip() {
            return new MyTipTool();
        }
    };
    maxDepthPanel.setToolTipText(maxDepthTip);
    maxDepthPanel.add(maxDepthLabel, BorderLayout.WEST);
    maxDepthPanel.add(maxDepth, BorderLayout.EAST);
    panel.add(haircutPanel);
    panel.add(fluffPanel);
    panel.add(nodeDensityThresholdPanel);
    panel.add(nodeScoreThresholdPanel);
    panel.add(kCorePanel);
    panel.add(maxDepthPanel);
    this.customizeClusteringContent = panel;
    collapsiblePanel.getContentPane().add(panel, BorderLayout.NORTH);
    return collapsiblePanel;
}
