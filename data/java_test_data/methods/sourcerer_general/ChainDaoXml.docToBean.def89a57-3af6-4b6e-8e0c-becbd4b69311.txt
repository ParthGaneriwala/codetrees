private Chain docToBean(Document doc) {
    Chain chain = new Chain();
    Element root = XmlUtil.getRoot(doc);
    // Element chainsElement = XmlUtil.fisrtElement(root, "chains");
    Element chainElement = XmlUtil.fisrtElement(root, "chain");
    chain.setName(XmlUtil.getElementText(chainElement, "name"));
    chain.setCreatedDate(DateUtil.convertStringToDateTime(XmlUtil.getElementText(chainElement, "createdDate")));
    chain.setDescription(XmlUtil.getElementText(chainElement, "description"));
    String tagName = XmlUtil.getElementText(chainElement, "tagName");
    if (StringUtils.isNotEmpty(tagName)) {
        Tag tag = TagManager.getTagByName(tagName);
        chain.setTagName(tagName);
        chain.setTag(tag);
    }
    chain.setEpcName(XmlUtil.getElementText(chainElement, "epcName"));
    Element flowsElement = XmlUtil.fisrtElement(chainElement, "flows");
    NodeList flows = flowsElement.getElementsByTagName("flow");
    Set<ChainFlow> chainFlows = new HashSet<ChainFlow>();
    for (int i = 0; i < flows.getLength(); i++) {
        Element flowElement = (Element) flows.item(i);
        ChainFlow flow = new ChainFlow();
        flow.setFlowCode(XmlUtil.getElementText(flowElement, "flowCode"));
        flow.setFlowName(XmlUtil.getElementText(flowElement, "flowName"));
        flow.setFlowDesc(XmlUtil.getElementText(flowElement, "flowDesc"));
        flow.setFlowType(XmlUtil.getElementText(flowElement, "flowType"));
        flow.setNextFlowCode(XmlUtil.getElementText(flowElement, "nextFlowCode"));
        flow.setPosLeft(Integer.parseInt(XmlUtil.getElementText(flowElement, "posLeft")));
        flow.setPosTop(Integer.parseInt(XmlUtil.getElementText(flowElement, "posTop")));
        flow.setWidth(Integer.parseInt(XmlUtil.getElementText(flowElement, "width")));
        flow.setHeight(Integer.parseInt(XmlUtil.getElementText(flowElement, "height")));
        flow.setSkipYn(XmlUtil.getElementText(flowElement, "skipYn"));
        flow.setRepeattimes(Integer.parseInt(XmlUtil.getElementText(flowElement, "repeattimes")));
        flow.setOnError(Integer.parseInt(XmlUtil.getElementText(flowElement, "onError")));
        flow.setStyle(Integer.parseInt(XmlUtil.getElementText(flowElement, "style")));
        flow.setAttr1(XmlUtil.getElementText(flowElement, "attr1"));
        flow.setAttr2(XmlUtil.getElementText(flowElement, "attr2"));
        flow.setAttr3(XmlUtil.getElementText(flowElement, "attr3"));
        flow.setAttr4(XmlUtil.getElementText(flowElement, "attr4"));
        flow.setAttr5(XmlUtil.getElementText(flowElement, "attr5"));
        flow.setAttr6(XmlUtil.getElementText(flowElement, "attr6"));
        flow.setAttr7(XmlUtil.getElementText(flowElement, "attr7"));
        flow.setAttr8(XmlUtil.getElementText(flowElement, "attr8"));
        flow.setAttr9(XmlUtil.getElementText(flowElement, "attr9"));
        List<String> scripts = new ArrayList<String>();
        Element scriptsElement = XmlUtil.fisrtElement(flowElement, "scripts");
        NodeList scriptsNodeList = scriptsElement.getElementsByTagName("script");
        for (int j = 0; j < scriptsNodeList.getLength(); j++) {
            Element scriptElement = (Element) scriptsNodeList.item(i);
            String script = scriptElement.getTextContent();
            scripts.add(script);
        }
        flow.setScripts(scripts);
        chainFlows.add(flow);
    }
    chain.setChainFlows(chainFlows);
    return chain;
}
