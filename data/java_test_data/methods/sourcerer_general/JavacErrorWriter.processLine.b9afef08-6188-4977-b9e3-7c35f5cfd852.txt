private void processLine(String msg) {
    if (haserror)
        return;
    if (ignoreCount > 0) {
        ignoreCount--;
        return;
    }
    // second/third line of the error
    if (hasfollowup) {
        int colonPoint = 9;
        String label = msg.substring(0, colonPoint);
        String info = msg.substring(colonPoint).trim();
        if (label.equals("found   :")) {
            // incompatible types
            message += " - found " + info;
        } else if (label.equals("required:")) {
            message += " but expected " + info;
            haserror = true;
        } else if (label.equals("symbol  :")) {
            // unresolved symbol
            message += " - " + info;
            haserror = true;
        } else {
            // if not what we were expecting, bail out
            haserror = true;
        }
        return;
    }
    int first_colon = msg.indexOf(':', 0);
    if (first_colon == -1) {
        if (msg.trim().endsWith("warnings") || msg.trim().endsWith("warning")) {
            warning += msg.trim() + newLineSequence;
            hasWarnings = true;
            return;
        }
        // otherwise, cannot read format of error message
        DialogManager.showErrorWithText(null, "compiler-error", msg);
        return;
    }
    // and the filename is everything from there to ".java uses"
    if (msg.startsWith("Note: ")) {
        if (// set from compiler.showunchecked in the PrefMgr
        internal)
            return;
        int uses = msg.indexOf(".java uses");
        if (uses != -1) {
            filename = msg.substring(5, uses) + ".java";
        }
        warning += msg.trim() + newLineSequence;
        hasWarnings = true;
        return;
    }
    filename = msg.substring(0, first_colon);
    // Windows might have a colon after drive name. If so, ignore it
    if (!filename.endsWith(".java")) {
        first_colon = msg.indexOf(':', first_colon + 1);
        if (first_colon == -1) {
            // cannot read format of error message
            DialogManager.showErrorWithText(null, "compiler-error", msg);
            return;
        }
        filename = msg.substring(0, first_colon);
    }
    int second_colon = msg.indexOf(':', first_colon + 1);
    if (second_colon == -1) {
        // cannot read format of error message
        DialogManager.showErrorWithText(null, "compiler-error", msg);
        return;
    }
    lineno = 0;
    try {
        lineno = Integer.parseInt(msg.substring(first_colon + 1, second_colon));
    } catch (NumberFormatException e) {
    // ignore it
    }
    message = msg.substring(second_colon + 1).trim();
    if (message.startsWith("warning:")) {
        // Record the warnings and display them to users.
        // This may end up multi-line, so ensure that the
        // message is broken into (single-spaced) lines
        warning += msg.trim() + newLineSequence;
        ignoreCount = 2;
        // other than a single caret (^) indicating the position in the line.
        if (message.startsWith("warning: [unchecked] unchecked cast")) {
            ignoreCount = 4;
        } else if (message.startsWith("warning: non-varargs call of varargs method with inexact argument type for last parameter")) {
            ignoreCount = 4;
        }
        if (!hasWarnings)
            hasWarnings = true;
        return;
    }
    if (message.equals("cannot resolve symbol") || message.equals("cannot find symbol") || message.equals("incompatible types")) {
        hasfollowup = true;
    } else {
        haserror = true;
    }
}
