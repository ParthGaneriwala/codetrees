void assemble(Vector<AsmExpression> exp) {
    if (exp == null)
        return;
    // program counter
    int pc = 0;
    // program listing strings
    Vector<String> lst = new Vector<String>();
    // current line number
    int cl = -1;
    for (AsmExpression e : exp) {
        if (e.empty())
            continue;
        // label found
        if (e instanceof Label) {
            lst.add("// @" + String.format("%0" + address_width + "x", pc) + " #" + e.line + ": " + e.toString());
            cl = e.line;
        } else // comment found
        if (e instanceof Comment) {
            if (e.line == cl) {
                // in-line comment
                String s = lst.lastElement() + " " + e.toString();
                lst.setElementAt(s, lst.size() - 1);
            } else
                // single line
                lst.add("// #" + e.line + ": " + e.toString());
        } else // command found
        if (e instanceof Command) {
            Command c = (Command) e;
            String s = "";
            cl = c.line;
            // assign new pc
            if (c.name.equalsIgnoreCase("address")) {
                pc = ((Integer) c.list.get(0)).intValue();
                lst.add("@" + String.format("%0" + address_width + "x", pc) + " // #" + c.line + ": " + c.toString());
            } else // possible instruction found, attempt assembly
            if (!c.name.equalsIgnoreCase("constant") && !c.name.equalsIgnoreCase("register") && !c.name.equalsIgnoreCase("namereg")) {
                // Class c = getClass();
                // Class[] ca = new Class[] {java.util.Vector.class};
                // Method m = c.getDeclaredMethod("_" + c.name, ca);
                // Object[] oa = new Object[] {c.list};
                // int o = ((Integer)m.invoke(this, oa)).intValue();
                int o;
                try {
                    o = code(c.name, c.list);
                } catch (IllegalArgumentException x) {
                    throw new IllegalArgumentException(x.getMessage() + " at line " + c.line);
                }
                // assign opcode to program memory
                program[pc] = o;
                // add instruction to listing
                s += String.format("%0" + data_width + "x", o) + " ";
                lst.add(s + "// @" + String.format("%0" + address_width + "x", pc) + " #" + c.line + ": " + c.toString());
                // advance program counter
                ++pc;
            } else
                // non-instruction command
                lst.add(s + "// #" + c.line + ": " + c.toString());
        }
    }
    listing = new String[lst.size()];
    for (int j = 0; j < lst.size(); ++j) listing[j] = lst.get(j);
}
