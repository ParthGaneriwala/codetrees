public Expression parse(String source, ParsePosition pos) {
    if (source == null) {
        throw new IllegalArgumentException("source is null");
    }
    if (pos == null) {
        throw new NullPointerException("pos is null");
    }
    int index = pos.getIndex();
    int errorIndex = -1;
    int parsingIndex = index;
    try {
        Deque<ExpressionComponent> stack = new LinkedList<ExpressionComponent>();
        ExpressionBuilder output = new ExpressionBuilder();
        ParseContext context = new ParseContext();
        skipWhitespace(source, pos);
        parsingIndex = pos.getIndex();
        ExpressionComponent component = parseNextComponent(source, pos);
        while (component != null) {
            component.parse(stack, output, context);
            context.setPreviousType(component.getType());
            skipWhitespace(source, pos);
            parsingIndex = pos.getIndex();
            component = parseNextComponent(source, pos);
        }
        parsingIndex = pos.getIndex();
        component = stack.peek();
        while (component != null && component.getType() == ExpressionComponent.Type.OPERATOR) {
            output.append(stack.pop());
            component = stack.peek();
        }
        if (stack.isEmpty()) {
            Expression expression = output.create();
            index = parsingIndex;
            return expression;
        } else {
            errorIndex = parsingIndex;
            return null;
        }
    } catch (IllegalStateException ignored) {
        errorIndex = parsingIndex;
        return null;
    } finally {
        pos.setIndex(index);
        pos.setErrorIndex(errorIndex);
    }
}
