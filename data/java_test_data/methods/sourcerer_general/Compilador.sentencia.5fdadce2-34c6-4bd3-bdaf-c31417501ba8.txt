private void sentencia() throws ErrorLexico, ErrorArchivo, ErrorSintactico, ErrorSemantico, Exception {
    String idH, labelH, labelH2;
    boolean porValorH;
    sintetizados sint;
    if (numeroTokenActual == Token.IDENTIFICADOR) {
        idH = tokenActual.getLexema();
        match(Token.IDENTIFICADOR);
        sentenciaSimple(idH);
    } else if (numeroTokenActual == Token.BEGIN) {
        match(Token.BEGIN);
        sentencia();
        restoSentencias();
        match(Token.END);
    } else if (numeroTokenActual == Token.IF) {
        match(Token.IF);
        porValorH = true;
        // idPredefH = ""
        sint = expresion(porValorH, "");
        match(Token.THEN);
        if (sint.getTipoS() instanceof Booleano) {
            labelH = generador.genEtiqueta();
            generador.genInst1ArgEtiq("", generador.DSVF, labelH);
        } else {
            String t = ErrorSemantico.construirMsj(sint.getTipoS().toString());
            throw new ErrorSemantico(ErrorSemantico.TIPO_INCOMP, getNumeroLinea(), getNumeroColumna(), "Booleano", t);
        }
        sentencia();
        restoSentenciaIf(labelH);
    } else if (numeroTokenActual == Token.WHILE) {
        match(Token.WHILE);
        labelH = generador.genEtiqueta();
        generador.genInstSinArg(labelH, generador.NADA);
        porValorH = true;
        // idPredefH = ""
        sint = expresion(porValorH, "");
        if (sint.getTipoS() instanceof Booleano) {
            labelH2 = generador.genEtiqueta();
            generador.genInst1ArgEtiq("", generador.DSVF, labelH2);
        } else {
            String t = ErrorSemantico.construirMsj(sint.getTipoS().toString());
            throw new ErrorSemantico(ErrorSemantico.TIPO_INCOMP, getNumeroLinea(), getNumeroColumna(), "Booleano", t);
        }
        match(Token.DO);
        sentencia();
        generador.genInst1ArgEtiq("", generador.DSVS, labelH);
        generador.genInstSinArg(labelH2, generador.NADA);
    }
}
