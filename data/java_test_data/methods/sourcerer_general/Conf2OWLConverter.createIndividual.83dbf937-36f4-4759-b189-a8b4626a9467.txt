protected void createIndividual() {
    // StmtIterator testIter;
    ArrayList<String> topics;
    Progress firstProgress = new Progress("Beginning save.", 0);
    firstProgress.setWindowTitle("Saving new Conference ontology...");
    this.notifyObservers(firstProgress);
    String s;
    topics = this.conf.getConferenceTopicAreas();
    // Set the start date
    s = this.conf.getConferenceStartDate();
    if (s != null && s != "" && s.length() > 0) {
        this.model.add(this.conferenceInd, this.model.getProperty(Conference.CONFERENCE_START_DATE_URI), this.conf.getConferenceStartDate());
    }
    // Set the end date
    s = this.conf.getConferenceEndDate();
    if (s != null && s != "" && s.length() > 0) {
        this.model.add(this.conferenceInd, this.model.getProperty(Conference.CONFERENCE_END_DATE_URI), this.conf.getConferenceEndDate());
    }
    // Set the paper submission deadline
    s = this.conf.getConferencePaperSubmissionDeadline();
    if (s != null && s != "" && s.length() > 0) {
        this.model.add(this.conferenceInd, this.model.getProperty(Conference.CONFERENCE_PAPER_DATE_URI), this.conf.getConferencePaperSubmissionDeadline());
    }
    // Set the abstract submisison deadline
    s = this.conf.getConferenceAbstractSubmissionDeadline();
    if (s != null && s != "" && s.length() > 0) {
        this.model.add(this.conferenceInd, this.model.getProperty(Conference.CONFERENCE_ABSTRACT_DATE_URI), this.conf.getConferenceAbstractSubmissionDeadline());
    }
    this.notifyObservers(new Progress("Writing topic ontologies..", 15));
    for (String topic : topics) {
        // Individual i = this.model.getIndividual(topic);
        Resource i = this.model.getResource(topic);
        if (i != null) {
            this.model.add(this.model.createStatement(this.conferenceInd, ResourceFactory.createProperty(Conference.CONFERENCE_TOPIC_AREA_URI), i));
        }
    }
    this.notifyObservers(new Progress("Writing description and attributes..", 55));
    // Conference Description
    s = this.conf.getConferenceDescription();
    if (s != null && s != "" && s.length() > 0) {
        this.model.add(this.conferenceInd, this.model.getProperty(Conference.CONFERENCE_DESCRIPTION_URI), this.conf.getConferenceDescription());
    }
    // Conference Website
    s = this.conf.getConferenceWebsite();
    if (s != null && s != "" && s.length() > 0) {
        this.model.add(this.conferenceInd, this.model.getProperty(Conference.CONFERENCE_WEBSITE_URI), this.conf.getConferenceWebsite());
    }
    // Conference Street Address.
    s = this.conf.getAddress();
    if (s != null && s != "" && s.length() > 0) {
        this.model.add(this.conferenceInd, this.model.getProperty(Conference.CONFERENCE_ADDRESS_URI), this.conf.getAddress());
    }
    // Conference Title
    s = this.conf.getConferenceName();
    if (s != null && s != "" && s.length() > 0) {
        this.model.add(this.conferenceInd, this.model.getProperty(Conference.CONFERENCE_TITLE_URI), this.conf.getConferenceName());
    }
    this.notifyObservers(new Progress("Writing full announcement text..", 65));
    // Announcement Text
    s = this.conf.getAnnouncementFullText();
    if (s != null && s != "" && s.length() > 0) {
        this.model.add(this.conferenceInd, this.model.getProperty(Conference.ANNOUNCEMENT_FULLTEXT_URI), this.conf.getAnnouncementFullText());
    }
    s = this.conf.getSeriesURI();
    if (s != null && s != "" && s.length() > 0) {
        Resource ind = this.model.createResource(this.conf.getSeriesURI());
        this.model.add(this.conferenceInd, this.model.getProperty(Conference.PART_OF_SERIES_URI), ind);
    }
    this.notifyObservers(new Progress("Writing location..", 73));
    // Locations area little trickier, as objects.
    // createLocations();
    Location loc = this.conf.getLocation();
    s = this.conf.getLocatedInURI();
    if (s != null && !s.equals("") && s.length() > 0) {
        Resource ind = this.model.createResource(s);
        this.model.add(this.conferenceInd, this.model.getProperty(Conference.CONFERENCE_LOCATED_URI), ind);
    } else if (loc != null) {
        Resource location = null;
        if (loc.getLocationURI().charAt(0) == '#') {
            String locURI = loc.getLocationURI().substring(1);
            if (this.conf.baseURI.contains("#")) {
                location = this.model.createResource(this.conf.baseURI + locURI);
            } else {
                location = this.model.createResource(this.conf.baseURI + "#" + locURI);
            }
        } else {
            location = this.model.createResource(loc.getLocationURI());
        }
        this.model.add(location, RDF.type, this.model.getResource(loc.getTypeURI()));
        this.model.add(location, RDFS.label, loc.getDisplayName());
        this.model.add(location, ResourceFactory.createProperty(Conference.IS_IN_URI), this.model.getResource(loc.getParentURI()));
        this.model.add(this.conferenceInd, this.model.getProperty(Conference.CONFERENCE_LOCATED_URI), location);
    }
    this.notifyObservers(new Progress("Finishing up model write..", 95));
    // Finish model creation
    // this.ont.addImport( this.model.createResource(Conf2OWLConverter.CONF_ONTFILE) );
    this.model.add(this.ont, OWL.imports, this.model.createResource(URLConstants.CONFERENCE_ONTOLOGY));
    for (Model mdl : this.topicOntologies) {
        this.model.remove(mdl);
    }
    // This causes Hawk to blow up!
    for (String uri : this.ontURIs) {
        // ont.addImport( this.model.createResource(uri));
        this.model.add(this.ont, OWL.imports, this.model.createResource(uri));
    }
    for (String uri : conf.getLocationOntologyURIs()) {
        // ont.addImport( this.model.createResource(uri));
        this.model.add(this.ont, OWL.imports, this.model.createResource(uri));
    }
    for (String uri : this.importURIs) {
        // ont.addImport( this.model.createResource(uri));
        this.model.add(this.ont, OWL.imports, this.model.createResource(uri));
    }
    if (this.series != null) {
        createSeries();
    }
    // Write out the file
    if (this.outputFileName != null) {
        writeConference(this.outputFileName);
    }
    this.notifyObservers(new Progress("Finished!", 100));
}
