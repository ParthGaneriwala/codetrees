public void parseNewExpression(LocatableToken token) {
    // new XYZ(...)
    gotExprNew(token);
    token = tokenStream.nextToken();
    if (token.getType() != JavaTokenTypes.IDENT && !isPrimitiveType(token)) {
        error("Expected type identifier after \"new\" (in expression)");
        tokenStream.pushBack(token);
        endExprNew(token, false);
        return;
    }
    tokenStream.pushBack(token);
    parseTypeSpec(false);
    token = tokenStream.nextToken();
    if (token.getType() == JavaTokenTypes.LBRACK) {
        while (true) {
            // array dimensions
            if (tokenStream.LA(1).getType() != JavaTokenTypes.RBRACK) {
                parseExpression();
            }
            token = tokenStream.nextToken();
            if (token.getType() != JavaTokenTypes.RBRACK) {
                error("Expecting ']' after array dimension (in new ... expression)");
                tokenStream.pushBack(token);
                endExprNew(token, false);
            }
            if (tokenStream.LA(1).getType() != JavaTokenTypes.LBRACK) {
                break;
            }
            token = tokenStream.nextToken();
        }
        if (tokenStream.LA(1).getType() == JavaTokenTypes.LCURLY) {
            // Array initialiser list
            token = tokenStream.nextToken();
            token = parseArrayInitializerList(token);
            endExprNew(token, token.getType() == JavaTokenTypes.RCURLY);
            return;
        }
        endExprNew(token, true);
        return;
    }
    if (token.getType() != JavaTokenTypes.LPAREN) {
        error("Expected '(' or '[' after type name (in 'new ...' expression)");
        tokenStream.pushBack(token);
        endExprNew(token, false);
        return;
    }
    parseArgumentList(token);
    if (tokenStream.LA(1).getType() == JavaTokenTypes.LCURLY) {
        // a class body (anonymous inner class)
        // LCURLY
        token = tokenStream.nextToken();
        beginAnonClassBody(token);
        parseClassBody();
        token = tokenStream.nextToken();
        if (token.getType() != JavaTokenTypes.RCURLY) {
            error("Expected '}' at end of inner class body");
            tokenStream.pushBack(token);
            tokenStream.pushBack(token);
            endAnonClassBody(token, false);
            endExprNew(token, false);
            return;
        }
        endAnonClassBody(token, true);
    }
    endExprNew(token, true);
}
