public String executeCommandConfirm(ActionContext context) {
    Connection db = null;
    try {
        // Decode the user id
        String codedData = context.getRequest().getParameter("data");
        Key key = (Key) context.getServletContext().getAttribute("TEAM.KEY");
        String data = PrivateString.decrypt(key, codedData);
        // Process it into properties
        int userId = -1;
        int projectId = -1;
        StringTokenizer st = new StringTokenizer(data, ",");
        while (st.hasMoreTokens()) {
            String pair = (st.nextToken());
            StringTokenizer stPair = new StringTokenizer(pair, "=");
            String param = stPair.nextToken();
            String value = stPair.nextToken();
            if ("id".equals(param)) {
                userId = Integer.parseInt(value);
            } else if ("pid".equals(param)) {
                projectId = Integer.parseInt(value);
            }
        }
        db = getConnection(context);
        // Verify the user's info by loading it
        User thisUser = new User(db, getUser(context).getGroupId(), userId);
        context.getRequest().setAttribute("user", thisUser);
        // Get the team member to display the invitee
        TeamMember previousMemberStatus = new TeamMember(db, projectId, userId);
        TeamMember thisMember = new TeamMember(db, projectId, userId);
        context.getRequest().setAttribute("teamMember", thisMember);
        // Update the project to indicate a rejection
        thisMember.setStatus(TeamMember.STATUS_REFUSED);
        // Determine if the project was a profile project
        Project targetProject = ProjectUtils.loadProject((projectId));
        if (targetProject.getOwner() != -1) {
            User ownerOfTargetProject = UserUtils.loadUser(targetProject.getOwner());
            if (ownerOfTargetProject.getProfileProjectId() == targetProject.getId()) {
                // Remove team member if request to become a friend of a user profile is denied
                thisMember.delete(db);
            } else {
                thisMember.updateStatus(db);
            }
        } else {
            thisMember.updateStatus(db);
        }
        // Send an email to the invitee
        processUpdateHook(context, previousMemberStatus, thisMember);
        return ("RejectOK");
    } catch (Exception errorMessage) {
        context.getRequest().setAttribute("Error", errorMessage);
        return ("InvitationError");
    } finally {
        this.freeConnection(context, db);
    }
}
