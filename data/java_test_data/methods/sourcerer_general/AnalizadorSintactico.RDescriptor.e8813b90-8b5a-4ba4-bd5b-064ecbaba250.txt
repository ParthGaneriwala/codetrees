public Tipo RDescriptor(Tipo tipo) throws CompiladorException {
    int linea = tok.getLinea();
    String lex = tok.getCadena();
    if (tok.getCadena().equals("[")) {
        /**
         * RESTRICCIONES
         * El tipo heredado tiene que ser ARRAY
         */
        if (!tipo.getNombre().equals("ARRAY")) {
            throw new CompiladorException(Errores.dameError("NOARRAY", linea, null));
        }
        reconocer("[");
        int conservaNivel = nivelDesc;
        Expresion();
        nivelDesc = conservaNivel;
        /**
         * Se comprueba si el indice  devuelto por ExpresiÃ³n
         * es correcto.
         */
        comprobacionDinamicaIndices(tipo);
        instr.add(new Instruccion("apila", ((Array) tipo).getTipo().getTam()));
        etiqueta++;
        instr.add(new Instruccion("multiplica", null));
        etiqueta++;
        instr.add(new Instruccion("suma", null));
        etiqueta++;
        reconocer("]");
        Tipo tt = RDescriptor(((Array) tipo).getTipo());
        return tt;
    } else if (tok.getCadena().equals("->")) {
        /**
         * RESTRICCIONES
         * El tipo heredado tiene que ser REGISTRO
         */
        if (!tipo.getNombre().equals("REGISTRO")) {
            throw new CompiladorException(Errores.dameError("NOREGISTRO", linea, null));
        }
        reconocer("->");
        /**
         * getOffset devuelve el Offset del lexema indicado.
         * Si el lexema no pertenece al Registro devuelve -1.
         */
        int offset = ((Registro) tipo).getOffset(tok.getCadena());
        if (offset > -1) {
            instr.add(new Instruccion("apila", offset));
            etiqueta++;
        } else {
            throw new CompiladorException(Errores.dameError("CAMPONOVALIDO", linea, null));
        }
        instr.add(new Instruccion("suma", null));
        etiqueta++;
        Tipo tt = ((Registro) tipo).getTipo(tok.getCadena());
        reconocerIden();
        Tipo ttt = RDescriptor(tt);
        return ttt;
    }
    return tipo;
}
