protected String go() throws Exception {
    // System.out.println("===========>"+upload);
    if (upload != null && upload.length() != 0) {
        try {
            if (upload.length() > 500 * 1024) {
                this.message = "上传的图片大小超出了规定的最大大小500K，请重新选择";
                this.nextPage = "productCreateEdit.action?productid=" + product.getId();
                return "message";
            }
            int index = uploadFileName.lastIndexOf(".");
            String name = System.currentTimeMillis() + uploadFileName.substring(index);
            // sysUser.setPhoto(name);
            String indexDir = ServletActionContext.getServletContext().getRealPath("/upload/product/");
            File dir = new File(indexDir);
            if (!dir.exists())
                dir.mkdirs();
            File file = new File(indexDir + System.getProperty("file.separator") + name);
            upload.renameTo(file);
            product.setPic("/upload/product/" + name);
        } catch (Exception e) {
            System.out.println("照片上传失败..." + e);
            product.setPic("/css/images/product4.jpg");
            e.printStackTrace();
        }
    } else {
        product.setPic(oldpic);
    }
    if (exist == 1) {
        product.setCreatetime(new java.sql.Timestamp(System.currentTimeMillis()));
        basicService.update(product);
        this.message = "产品信息修改成功";
    } else {
        product.setCreateuserid(this.getLoginUser().getUserid());
        product.setCreatetime(new java.sql.Timestamp(System.currentTimeMillis()));
        basicService.save(product);
        this.message = "产品信息新增成功";
    }
    com.sxit.service.util.CommonDatas.getAllProducts();
    this.nextPage = "productList.action";
    return SUCCESS;
}
