// $ANTLR start "expression7"
public final Compila_doresParser.expression7_return expression7() throws RecognitionException {
    Compila_doresParser.expression7_return retval = new Compila_doresParser.expression7_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token LPAR157 = null;
    Token RPAR159 = null;
    Compila_doresParser.expression_return expression158 = null;
    Compila_doresParser.expression8_return expression8160 = null;
    CommonTree LPAR157_tree = null;
    CommonTree RPAR159_tree = null;
    RewriteRuleTokenStream stream_RPAR = new RewriteRuleTokenStream(adaptor, "token RPAR");
    RewriteRuleTokenStream stream_LPAR = new RewriteRuleTokenStream(adaptor, "token LPAR");
    RewriteRuleSubtreeStream stream_expression = new RewriteRuleSubtreeStream(adaptor, "rule expression");
    try {
        // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:244:2: ( ( LPAR expression RPAR ) -> expression | expression8 )
        int alt39 = 2;
        int LA39_0 = input.LA(1);
        if ((LA39_0 == LPAR)) {
            alt39 = 1;
        } else if (((LA39_0 >= TRUE && LA39_0 <= FALSE) || (LA39_0 >= ID && LA39_0 <= INTEGER))) {
            alt39 = 2;
        } else {
            NoViableAltException nvae = new NoViableAltException("", 39, 0, input);
            throw nvae;
        }
        switch(alt39) {
            case 1:
                // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:244:4: ( LPAR expression RPAR )
                {
                    // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:244:4: ( LPAR expression RPAR )
                    // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:244:5: LPAR expression RPAR
                    {
                        LPAR157 = (Token) match(input, LPAR, FOLLOW_LPAR_in_expression71665);
                        stream_LPAR.add(LPAR157);
                        pushFollow(FOLLOW_expression_in_expression71667);
                        expression158 = expression();
                        state._fsp--;
                        stream_expression.add(expression158.getTree());
                        RPAR159 = (Token) match(input, RPAR, FOLLOW_RPAR_in_expression71669);
                        stream_RPAR.add(RPAR159);
                    }
                    // AST REWRITE
                    // elements: expression
                    // token labels:
                    // rule labels: retval
                    // token list labels:
                    // rule list labels:
                    // wildcard labels:
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.tree : null);
                    root_0 = (CommonTree) adaptor.nil();
                    // 244:27: -> expression
                    {
                        adaptor.addChild(root_0, stream_expression.nextTree());
                    }
                    retval.tree = root_0;
                }
                break;
            case 2:
                // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:245:4: expression8
                {
                    root_0 = (CommonTree) adaptor.nil();
                    pushFollow(FOLLOW_expression8_in_expression71679);
                    expression8160 = expression8();
                    state._fsp--;
                    adaptor.addChild(root_0, expression8160.getTree());
                }
                break;
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
