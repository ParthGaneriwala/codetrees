public void testClient() throws Exception {
    AbstractBayeux _bayeux = _cometd.getBayeux();
    final Exchanger<Object> exchanger = new Exchanger<Object>();
    BayeuxClient client = new BayeuxClient(_httpClient, "http://localhost:" + _server.getConnectors()[0].getLocalPort() + "/cometd") {

        volatile boolean connected;

        protected void metaConnect(boolean success, Message message) {
            super.metaConnect(success, message);
            if (!connected) {
                connected = true;
                try {
                    ((MessageImpl) message).incRef();
                    exchanger.exchange(message, 1, TimeUnit.SECONDS);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }

        protected void metaHandshake(boolean success, boolean reestablish, Message message) {
            connected = false;
            super.metaHandshake(success, reestablish, message);
            try {
                ((MessageImpl) message).incRef();
                exchanger.exchange(message, 1, TimeUnit.SECONDS);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    };
    client.addListener(new MessageListener() {

        public void deliver(Client fromClient, Client toClient, Message message) {
            if (message.getData() != null || Bayeux.META_SUBSCRIBE.equals(message.getChannel()) || Bayeux.META_DISCONNECT.equals(message.getChannel())) {
                try {
                    ((MessageImpl) message).incRef();
                    exchanger.exchange(message, 1, TimeUnit.SECONDS);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
    });
    client.addLifeCycleListener(new LifeCycle.Listener() {

        public void lifeCycleFailure(LifeCycle event, Throwable cause) {
        }

        public void lifeCycleStarted(LifeCycle event) {
        }

        public void lifeCycleStarting(LifeCycle event) {
        }

        public void lifeCycleStopped(LifeCycle event) {
            try {
                exchanger.exchange(event, 1, TimeUnit.SECONDS);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        public void lifeCycleStopping(LifeCycle event) {
        }
    });
    client.start();
    MessageImpl message = (MessageImpl) exchanger.exchange(null, 1, TimeUnit.SECONDS);
    assertEquals(Bayeux.META_HANDSHAKE, message.getChannel());
    assertTrue(message.isSuccessful());
    String id = client.getId();
    assertTrue(id != null);
    message.decRef();
    message = (MessageImpl) exchanger.exchange(null, 1, TimeUnit.SECONDS);
    assertEquals(Bayeux.META_CONNECT, message.getChannel());
    assertTrue(message.isSuccessful());
    message.decRef();
    client.subscribe("/a/channel");
    message = (MessageImpl) exchanger.exchange(null, 1, TimeUnit.SECONDS);
    assertEquals(Bayeux.META_SUBSCRIBE, message.getChannel());
    assertTrue(message.isSuccessful());
    message.decRef();
    client.publish("/a/channel", "data", "id");
    message = (MessageImpl) exchanger.exchange(null, 1, TimeUnit.SECONDS);
    assertEquals("data", message.getData());
    message.decRef();
    client.disconnect();
    message = (MessageImpl) exchanger.exchange(null, 1, TimeUnit.SECONDS);
    assertEquals(Bayeux.META_DISCONNECT, message.getChannel());
    assertTrue(message.isSuccessful());
    message.decRef();
    Object o = exchanger.exchange(null, 1, TimeUnit.SECONDS);
    assertTrue(client.isStopped());
}
