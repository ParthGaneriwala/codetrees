@Test
public void test() {
    TableNotificationTestFrame frame = new TableNotificationTestFrame("TF");
    FrameFixture frameFix = new FrameFixture(frame);
    try {
        frameFix.show();
        JTableFixture tableFix = frameFix.table("table");
        final RecordingPropertyChangeListener listener = new RecordingPropertyChangeListener("value");
        final RecordingPropertyChangeListener selListener = new RecordingPropertyChangeListener("selectedValue");
        IMultiSelectionListCobean<SimpleBean> cobean = init(frame, listener, selListener);
        List<SimpleBean> value = CobeanTestUtil.createSimpleBeanList("Der Assistent der Zauberer");
        cobean.setValue(value);
        assertEquals(1, listener.getNotificationCount());
        assertEquals(0, selListener.getNotificationCount());
        assertEventContentBean(null, CobeanTestUtil.createSimpleBeanList("Der Assistent der Zauberer"), "value", listener.getEventContents().get(0));
        tableFix.selectCell(tableFix.cell("Zauberer"));
        pause();
        assertEquals(1, listener.getNotificationCount());
        assertEquals(1, selListener.getNotificationCount());
        assertEventContentBean(null, createList(new SimpleBean("Zauberer")), "selectedValue", selListener.getEventContents().get(0));
        tableFix.selectCell(tableFix.cell("der"));
        pause();
        assertEquals(1, listener.getNotificationCount());
        assertEquals(2, selListener.getNotificationCount());
        assertEventContentBean(createList(new SimpleBean("Zauberer")), createList(new SimpleBean("der")), "selectedValue", selListener.getEventContents().get(1));
        tableFix.selectCell(tableFix.cell("der"));
        pause();
        assertEquals(1, listener.getNotificationCount());
        assertEquals(2, selListener.getNotificationCount());
        assertEventContentBean(createList(new SimpleBean("Zauberer")), createList(new SimpleBean("der")), "selectedValue", selListener.getEventContents().get(1));
        cobean.setSelectedValue(createList(new SimpleBean("der")));
        pause();
        assertEquals("der", tableFix.selectionValue());
        assertEquals(1, listener.getNotificationCount());
        assertEquals(2, selListener.getNotificationCount());
        assertEventContentBean(createList(new SimpleBean("Zauberer")), createList(new SimpleBean("der")), "selectedValue", selListener.getEventContents().get(1));
        cobean.setSelectedValue(createList(new SimpleBean("Assistent")));
        pause();
        assertEquals("Assistent", tableFix.selectionValue());
        assertEquals(1, listener.getNotificationCount());
        assertEquals(3, selListener.getNotificationCount());
        assertEventContentBean(createList(new SimpleBean("der")), createList(new SimpleBean("Assistent")), "selectedValue", selListener.getEventContents().get(2));
        cobean.setSelectedValue(null);
        pause();
        assertEquals(null, tableFix.selectionValue());
        assertEquals(1, listener.getNotificationCount());
        assertEquals(4, selListener.getNotificationCount());
        assertEventContentBean(createList(new SimpleBean("Assistent")), null, "selectedValue", selListener.getEventContents().get(3));
    } finally {
        frameFix.cleanUp();
    }
}
