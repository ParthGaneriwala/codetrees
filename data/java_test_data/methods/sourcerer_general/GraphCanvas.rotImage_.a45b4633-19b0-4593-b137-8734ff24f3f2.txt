private void rotImage_(double theta, int[] pixels, int w, int h, int[] result, int image_size) {
    double dxX = Math.cos(theta);
    double dyX = -Math.sin(theta);
    double dxY = -dyX;
    double dyY = dxX;
    double dxIx = dxX / (double) aaDivs_;
    double dyIx = dyX / (double) aaDivs_;
    double dxIy = dxY / (double) aaDivs_;
    double dyIy = dyY / (double) aaDivs_;
    double hdxIx = dxIx / 2.0, hdyIx = dyIx / 2.0;
    double hdxIy = dxIy / 2.0, hdyIy = dyIy / 2.0;
    double xX = image_size / 2.0 - dxX * w / 2.0 - dxY * h / 2.0;
    double yX = image_size / 2.0 - dyX * w / 2.0 - dyY * h / 2.0;
    double xY, yY, Ix, Iy, xIx, yIx, xIy, yIy;
    int x, y;
    for (x = 0; x < w; x++) {
        xY = xX;
        yY = yX;
        for (y = 0; y < h; y++) {
            xIx = xY + hdxIx;
            yIx = yY + hdyIx;
            if ((pixels[y * w + x] & 0xFFFFFF) == 0) {
                for (Ix = 0; Ix < aaDivs_; Ix++) {
                    xIy = xIx + hdxIy;
                    yIy = yIx + hdyIy;
                    for (Iy = 0; Iy < aaDivs_; Iy++) {
                        if (((int) yIy * image_size + (int) xIy > 0) && ((int) yIy * image_size + (int) xIy < image_size * image_size))
                            result[(int) yIy * image_size + (int) xIy]++;
                        xIy += dxIy;
                        yIy += dyIy;
                    }
                    xIx += dxIx;
                    yIx += dyIx;
                }
            }
            xY += dxY;
            yY += dyY;
        }
        xX += dxX;
        yX += dyX;
    }
}
