// ----------------------------------------------------------
public void afterCompose() {
    // Set up the timer
    timer = new Timer(500);
    appendChild(timer);
    timer.setRepeats(true);
    timer.addEventListener(Events.ON_TIMER, new EventListener() {

        public void onEvent(Event event) {
            updateRobotMsg();
        // Timer me = ((Timer)event.getTarget());
        // if (me.getDelay() < 1500)
        // {
        // me.setDelay(me.getDelay() + 200);
        // }
        }
    });
    timer.start();
    // Add better caption
    if (getCaption() == null) {
        Component before = null;
        if (!getChildren().isEmpty()) {
            before = (Component) getChildren().get(0);
        }
        insertBefore(new Caption(), before);
    }
    if (!getCaption().isImageAssigned()) {
        hasImage = true;
        getCaption().setImage("~./zk/img/progress.gif");
    }
    // If we need to create a task, do so
    if (getTask() == null && taskClass != null) {
        try {
            Class<?> tclass = getPage().getZScriptClass(taskClass);
            if (tclass == null) {
                // Force a true CNF exception
                tclass = Thread.currentThread().getContextClassLoader().loadClass(taskClass);
            }
            setTask((WebBotTask) tclass.newInstance());
        } catch (Exception e) {
            student.web.internal.Exceptions.addSimpleExceptionGrid(this, e, "In &lt;robot-viewer&gt; tag, creating robot task using " + "\"taskClass\" attribute", false);
            robotErrMsg = BAD_TASK_CLASS_MSG;
        }
    } else if (getRobot() == null && robotClass != null) {
        // Otherwise, if we need to create a robot, do it
        try {
            Class<?> rclass = getPage().getZScriptClass(robotClass);
            if (rclass == null) {
                // Force a true CNF exception
                rclass = Thread.currentThread().getContextClassLoader().loadClass(robotClass);
            } else if (robotUrl == null) {
                setRobot((WebBot) rclass.newInstance());
            } else {
                setRobot((WebBot) rclass.getConstructor(String.class).newInstance(robotUrl));
            }
        } catch (Exception e) {
            student.web.internal.Exceptions.addSimpleExceptionGrid(this, e, "In &lt;robot-viewer&gt; tag, creating robot using " + "\"robotClass\" attribute", false);
            robotErrMsg = BAD_ROBOT_CLASS_MSG;
        }
    }
    runner = new RobotRunner();
    runner.start();
    try {
        // give a 100-millisecond head start before grabbing first part
        // of results. If the task isn't done by then, the timer
        // will periodically refresh the output.
        Thread.sleep(100);
    } catch (InterruptedException e) {
    // ignore it
    }
    updateRobotMsg();
}
