public static void main(String[] args) {
    /*EmployeeRepositoryImpl rep = new EmployeeRepositoryImpl();
    	HEmployee as = rep.getEmployeeById(2);
    	Set<HTechnology> techs = new HashSet<HTechnology>();
    	techs.add(new HTechnology(1,"JMX"));
    	techs.add(new HTechnology(3,"Hibernate"));
    	as.setTechnologies(techs);
    	//as.setIdentification(3);
    	rep.updateEmployee(as);*/
    Session session = null;
    try {
        session = HibernateUtil.getSessionFactory().getCurrentSession();
        session.beginTransaction();
        HEmployee hahaha = (HEmployee) session.get(HEmployee.class, 1);
        System.out.println(hahaha.getTechnologies().size());
        System.out.println(hahaha.getService().getName());
        System.out.println(hahaha.getCategory().getName());
        // WORKING: Add/delete/update
        /*hahaha.getTechnologies().clear();
            hahaha.getTechnologies().add(new HTechnology(1,"JMX"));
            hahaha.getTechnologies().add(new HTechnology(1,"JMX"));
            //hahaha.getTechnologies().add(new HTechnology(3,"Hibernate"));*/
        // hahaha.getAssignments().clear();
        /*HAssignedProject ppp = null, oldp = null;
            int count = 0;
            for (HAssignedProject ae : hahaha.getAssignments())
    		{
    			System.out.println("PROJECT: " + ae.getProject().getId());
    			ppp = ae;
    			if(count == 1){
    				oldp = ae;
    			}
    			count++;
    		}*/
        // WORKING
        // ///////////ppp.setFeedback("muahahahahahaha");
        // WORKING
        // ///////////hahaha.getAssignments().remove(oldp);
        System.out.println(hahaha.getAssignments().size());
        HProject pr = new HProject();
        pr.setId(1);
        HAssignedProject hap = new HAssignedProject();
        hap.setEmployeeId(hahaha.getId());
        hap.setProject(pr);
        hap.setFeedback("lolzor");
        hap.setRating((byte) 10);
        hahaha.getAssignments().add(hap);
        System.out.println(hahaha.getAssignments().size());
        // TODO: Test update/add/delete met nieuwe equals
        // hahaha.getAssignments().clear();
        // hahaha.getAssignments().clear();
        // session.merge(hahaha);
        // session.delete(hahaha);
        session.getTransaction().commit();
    } catch (Exception e) {
        e.printStackTrace();
    } finally {
        if (session != null && session.isOpen()) {
            session.close();
        }
    }
/*Set<HEmplTech> techs = new HashSet<HEmplTech>();
    	
    	Session session= null;
    	HEmplTech oh= null;
		try {
            session = HibernateUtil.getSessionFactory().getCurrentSession();
            session.beginTransaction();
            techs.add(oh = (HEmplTech) session.get(HEmplTech.class, 1));
        } catch (Exception e) {
            e.printStackTrace();
        } finally{
        	if(session != null && session.isOpen()){
        		session.close();
        	}
        }
        
        HEmployee added = oh.getEmployee();
        HTechnology added1 = oh.getTechnology();
        
        techs.add(new HEmplTech(added, new HTechnology(5,"")));
        techs.add(new HEmplTech(new HEmployee(3, null,null,null,null,null,null,null,null,null,null), new HTechnology(5,"")));
        System.out.println(techs.size());*/
// techs.add(new HEmployeeTech())
/*ProjectRepositoryImpl projRep = new ProjectRepositoryImpl();
    	HProject proj = projRep.loadProjectById(241);
    	proj.setCode("PR50");
    	projRep.updateProject(proj);*/
/*HProject proj = new HProject();
    	/*AppServerRepositoryImpl rep = new AppServerRepositoryImpl();
    	
    	HAppServer as = rep.getAll().get(0);
    	as.setName("qsvhjk");
    	
    	rep.updateApplicationServer(as);*/
/*EmployeeRepositoryImpl rep = new EmployeeRepositoryImpl();
    	
    	HEmployee as = rep.getEmployeeById(1);
    	as.setFirstname("hahah");
    	rep.updateEmployee(as);*/
/*
    	ProjectRepositoryImpl projRep = new ProjectRepositoryImpl();  	
    	HProject proj = new HProject();
    	proj.setId(241);
    	proj.setCode("PR13");
    	proj.setName("TestProject7");
    	proj.setStartDate(new Date());
    	proj.setEndDate(null);
    	projRep.updateProject(proj);*/
/*EmployeeRepositoryImpl test = new EmployeeRepositoryImpl();
    	HEmployee ttt = /*new HEmployee();
    	test.getEmployeeById(1);
    	/*ttt.setId(1);
    	ttt.setIdentification(15863214);
    	ttt.setFirstname("Andrewsdfghjk");
        ttt.setLastname("Bourgeoisqsdfghkl");
        ttt.setService(new HService( 1,""));
        ttt.setCategory(new HCategory( 1,""));
        ttt.setStartedDate(new Date());
        ttt.setAssignments(new HashSet<HAssignment>());*/
// ttt.getEmplTechs().clear();
// ttt.getEmplTechs().add(new HEmplTech(22, new HTechnology(2,""),ttt));
/*ttt.getEmplTechs().add(new HEmplTech(ttt, new HTechnology(2,"")));
    	
    	test.updateEmployee(ttt);
    	
    	
        /*Session session = HibernateUtil.getSessionFactory().getCurrentSession();
        session.beginTransaction();
    	
    	S912Project proj = new S912Project();
    	proj.setCode("PRO7");
    	proj.setProjname("TestProject7");
    	proj.setStartDate(new Date());
    	proj.setEndDate(null);
    	
    	proj.getS912Projappservs().add(new S912Projappserv(proj, new S912Appserver(3,"Tomcat")));
    	
    	session.save(proj);
    	
    	session.getTransaction().commit();*/
/*HProject p = new HProject("PR13", "TestProject13", new Date(), new Date());
    	p.getProjAppServers().add(new HProjAppServ(p, new HAppServer(3,"Tomcat")));
    	
    	ProjectRepositoryImpl projRep = new ProjectRepositoryImpl();
    	projRep.addProject(p);
    	
    	p.getProjAppServers().add(new HProjAppServ(p, new HAppServer(2,"SilverStream")));
    	projRep.updateProject(p);*/
// WORKING UPDATE PROJECT
// DO NOT TOUCH
/*
    	ProjectRepositoryImpl projRep = new ProjectRepositoryImpl();
    	//HProject p = projRep.loadProjectById(201);
    	HProject p = new HProject();
    	p.setAssignments(new HashSet<HAssignment>());
    	p.setCode("PR13");
    	p.setEndDate(new Date());
    	p.setId(221);
    	p.setName("TestProject13");
    	
    	p.setProjAppServers(new HashSet<HProjAppServ>());
    	p.getProjAppServers().add(new HProjAppServ(p, new HAppServer(1,"Tomcat")));
    	p.getProjAppServers().add(new HProjAppServ(p, new HAppServer(3,"Tomcat")));
    	
    	p.setProjTechs(new HashSet<HProjTech>());
    	p.setProjVersionTools(new HashSet<HProjVerTool>());
    	p.setStartDate(new Date());
    	
    	
    	p.getProjAppServers().clear();
    	p.getProjAppServers().add(new HProjAppServ(p, new HAppServer(2,"SilverStream")));
    	p.getProjAppServers().add(new HProjAppServ(p, new HAppServer(4,"SilverStream")));
    	projRep.updateProject(p);
    	*/
/*HEmployee e = new HEmployee();
        e.setIdentification(2552689);
        e.setUserid("X589");
        e.setFirstname("Andrew1");
        e.setLastname("Bourgeois1");
        e.setStartedDate(new Date());
        e.setService(new HService(1,""));
        e.setCategory(new HCategory( 1,""));
        //WORKING//
        Set<HEmplTech> techs = new HashSet<HEmplTech>();
        techs.add(new HEmplTech(e, new HTechnology(1, "JMX")));
        techs.add(new HEmplTech(e, new HTechnology(2, "Spring")));
        //e.setTechnologies(techs);
        e.setEmplTechs(techs);
        EmployeeRepositoryImpl erepo = new EmployeeRepositoryImpl();
        erepo.addEmployee(e);*/
// EmployeeDAO edao = new EmployeeDAO();
// edao.addEmployee(e);
// new AppServerRepositoryImpl().deleteApplicationServer(new HAppServer(18,"Test9"));
/*
    	HEmployee e = new HEmployee();//new EmployeeRepositoryImpl().getEmployeeById(2);
    	e.setEmplTechs(new HashSet<HEmplTech>());
    	System.out.println(e.getEmplTechs().size());
    	System.out.println("---------------------------------------------------------------------");
    	System.out.println(e.getEmplTechs().size());
    	*/
// System.out.println(new AppServerRepositoryImpl().getAll().size());
/*List<Projects> personList = null;
        try {
        Session session = HibernateUtil.getSessionFactory().getCurrentSession();
        Transaction tx = session.beginTransaction();
        Query q = session.createQuery("from Projects");
        personList = (List<Projects>) q.list();

        } catch (Exception e) {
        e.printStackTrace();
        }

        for (Projects person : personList) {
        System.out.println(person.getId() + " " + person.getEndDate());
        }

        try {
        Session session = HibernateUtil.getSessionFactory().getCurrentSession();
        Transaction tx = session.beginTransaction();
        //Projects p = new Projects("X124", "Test 2", new Date(Date.UTC(2009, 2, 16, 15, 30, 4))) ;
        Projects p =  (Projects) session.load(Projects.class, 1);
        Employees em = (Employees)session.load(Employees.class, 2);
        p.getProjectemployeeses().add(new Projectemployees(em,p));
        session.save(p);
        session.getTransaction().commit();
        } catch (Exception e) {
        e.printStackTrace();
        }*/
// ////////////////// PROJECT ADD/REMOVE TEST ///////////////////////////
/*Project p = new Project("X153", "Testen", new Date(), new Date());
        // 1 , 2
        List<AppServer> servers = new ArrayList<AppServer>();
        servers.add(new AppServer((byte)1, "OC4J"));
        servers.add(new AppServer((byte)2, "SilverStream"));
        p.setAppServers(servers);

        List<Technology> techs = new ArrayList<Technology>();
        techs.add(new Technology(1, "JMX"));
        techs.add(new Technology(2, "Spring"));
        p.setTechnologies(techs);

        List<VersionControlTool> tools = new ArrayList<VersionControlTool>();
        tools.add(new VersionControlTool((short)1, "svn"));
        tools.add(new VersionControlTool((short)2, "cvs"));
        p.setVersionTools(tools);

        ProjectDAO pdao = new ProjectDAO();
        pdao.addProject(p);
        p.setId(27);
        //pdao.removeProject(p);*/
// ////////////////// EMPLOYEE ADD/REMOVE TEST ///////////////////////////
/*Employee e = new Employee();
        e.setIdenification(2552689);
        e.setUserId("X589");
        e.setFirstName("Andrew1");
        e.setLastName("Bourgeois1");
        e.setService(new Service((byte) 1));
        e.setCategory(new Category((byte) 1));
        //WORKING//
        List<Technology> techs = new ArrayList<Technology>();
        techs.add(new Technology(1, "JMX"));
        techs.add(new Technology(2, "Spring"));
        e.setTechnologies(techs);

        EmployeeDAO edao = new EmployeeDAO();
        //edao.addEmployee(e);*/
// e.setId(2);
// edao.removeEmployee(e);
// ////////////////// SPECIAL VALUES ADD/REMOVE TEST ///////////////////////////
/*SpecialValueDAO sdao = new SpecialValueDAO();
        //sdao.addTechnology(new Technology("JMX.NET"));
        //sdao.deleteTechnology(new Technology(3,"JMX.NET"));
        for(Technology t:sdao.getTechnologyByProjectId(31)){
        System.out.println(t.getId()+" - "+t.getName());
        }*/
// ////////////////// UPDATE EMPLOYEE TEST - WORKING ///////////////////////////
/*Employee e = new Employee();
        e.setId(3);
        e.setIdenification(333);
        e.setUserId("UID22");
        e.setFirstName("Tim1");
        e.setLastName("Leys1");
        e.setService(new Service((byte) 2));
        e.setCategory(new Category((byte) 1));
        //WORKING//
        List<Technology> techs = new ArrayList<Technology>();
        techs.add(new Technology(2, "Spring"));
        e.setTechnologies(techs);
        EmployeeDAO edao = new EmployeeDAO();
        edao.updateEmployee(e);*/
// ////////////////// SEARCH PROJECT TEST ///////////////////////////
/*ProjectDAO pdao = new ProjectDAO();
        List<AppServer> servers = new ArrayList<AppServer>();
        servers.add(new AppServer((byte)1, "OC4J"));
        servers.add(new AppServer((byte)2, "SilverStream"));

        List<Technology> techs = new ArrayList<Technology>();
        techs.add(new Technology(1, "JMX"));
        techs.add(new Technology(2, "Spring"));

        List<VersionControlTool> tools = new ArrayList<VersionControlTool>();
        tools.add(new VersionControlTool((short)1, "svn"));
        tools.add(new VersionControlTool((short)2, "cvs"));

        //List<Project> projs = pdao.searchProjects(true, techs, tools, servers, "UID22", "Tim1", "31", "Test", null, null, null, null);
        List<Project> projs = pdao.searchProjects(true, null, null, null, "UID22", null, "31", null, null, null, null, null);
        for(Project p: projs){
            System.out.println(p.getId());
        }*/
// ////////////////// SEARCH EMPLOYEE TEST ///////////////////////////
/*EmployeeDAO edao = new EmployeeDAO();
        List<Technology> techs = new ArrayList<Technology>();
        //techs.add(new Technology(1, "JMX"));
        techs.add(new Technology(2, "Spring"));

        List<Employee> projs = edao.searchEmployees(true, techs, null, null, null, 333, "UID22", "Tim1", null, null);
        for(Employee p: projs){
            System.out.println(p.getId());
        }*/
}
