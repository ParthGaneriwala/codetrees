/**
 * Calculates the vertical/horizontal offset and size of a component.
 *
 * @param entry    entry containing component and contraints
 * @param preferredSize    previously calculated preferred width/height of
 * component
 * @param isColumn         if true, this method is being called to calculate
 * the offset/size of a column.  if false,... of a row.
 *
 * @return an array, a, of two integers such that a[0] is the offset and
 * a[1] is the size
 */
protected int[] calculateSizeAndOffset(Entry entry, int preferredSize, boolean isColumn) {
    // Get references to cr properties
    int[] crOffset = isColumn ? this.crOffset[C] : this.crOffset[R];
    int entryAlignment = isColumn ? entry.alignment[C] : entry.alignment[R];
    // Determine cell set size
    int cellSetSize = isColumn ? crOffset[entry.cr2[C] + 1] - crOffset[entry.cr1[C]] : crOffset[entry.cr2[R] + 1] - crOffset[entry.cr1[R]];
    // Determine the size of the component
    int size;
    if ((entryAlignment == FULL) || (cellSetSize < preferredSize))
        size = cellSetSize;
    else
        size = preferredSize;
    // trailing justification as right justification.
    if (isColumn && (entryAlignment == LEADING))
        entryAlignment = LEFT;
    if (isColumn && (entryAlignment == TRAILING))
        entryAlignment = RIGHT;
    // Determine offset
    int offset;
    switch(entryAlignment) {
        case // Align left/top side along left edge of cell
        LEFT:
            offset = crOffset[isColumn ? entry.cr1[C] : entry.cr1[R]];
            break;
        case // Align right/bottom side along right edge of cell
        RIGHT:
            offset = crOffset[(isColumn ? entry.cr2[C] : entry.cr2[R]) + 1] - size;
            break;
        case // Center justify component
        CENTER:
            offset = crOffset[isColumn ? entry.cr1[C] : entry.cr1[R]] + ((cellSetSize - size) >> 1);
            break;
        case // Align left/top side along left/top edge of cell
        FULL:
            offset = crOffset[isColumn ? entry.cr1[C] : entry.cr1[R]];
            break;
        default:
            // This is a never should happen case, but just in case
            offset = 0;
    }
    // Compensate for gaps
    if (isColumn) {
        offset += hGap * entry.cr1[C];
        int cumlativeGap = hGap * (entry.cr2[C] - entry.cr1[C]);
        switch(entryAlignment) {
            case RIGHT:
                offset += cumlativeGap;
                break;
            case CENTER:
                offset += cumlativeGap >> 1;
                break;
            case FULL:
                size += cumlativeGap;
                break;
        }
    } else {
        offset += vGap * entry.cr1[R];
        int cumlativeGap = vGap * (entry.cr2[R] - entry.cr1[R]);
        switch(entryAlignment) {
            case BOTTOM:
                offset += cumlativeGap;
                break;
            case CENTER:
                offset += cumlativeGap >> 1;
                break;
            case FULL:
                size += cumlativeGap;
                break;
        }
    }
    // Package return values
    int[] value = { offset, size };
    return value;
}
