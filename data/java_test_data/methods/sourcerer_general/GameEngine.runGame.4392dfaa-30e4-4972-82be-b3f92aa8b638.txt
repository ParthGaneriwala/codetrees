public static void runGame(Player black, Player white, Board initBoard) {
    blackMoves = new ArrayList<GameState>(60);
    whiteMoves = new ArrayList<GameState>(60);
    lastBlackTime = 0L;
    lastWhiteTime = 0L;
    turnNbr = 1;
    continueGame = true;
    Board board = new Board(initBoard);
    out.println("This is the starting board:");
    printBoard(board);
    debugOutPut(board);
    while (continueGame) {
        // Copy the board so the player can't change it
        Board boardCopy = new Board(board);
        Action action;
        if (board.blackToMove) {
            out.println("Black's turn");
            action = black.getMove(boardCopy, turnNbr);
        } else {
            out.println("White's turn");
            action = white.getMove(boardCopy, turnNbr);
        }
        if (action.type == Actions.QUIT) {
            // End of input stream for a human player
            out.println("Quitting.");
            continueGame = false;
        } else if (action.type == Actions.BACK) {
            if (turnNbr <= 1) {
                out.println("You can't use the back command on the first" + " move.");
            } else {
                ArrayList<GameState> history;
                ArrayList<GameState> otherHistory;
                if (board.blackToMove) {
                    history = blackMoves;
                    otherHistory = whiteMoves;
                } else {
                    history = whiteMoves;
                    otherHistory = blackMoves;
                }
                GameState blackState = blackMoves.get(blackMoves.size() - 1);
                GameState whiteState = whiteMoves.get(whiteMoves.size() - 1);
                black.setSpentTime(blackState.spentTime);
                white.setSpentTime(whiteState.spentTime);
                lastBlackTime = blackState.spentTime;
                lastWhiteTime = whiteState.spentTime;
                GameState oldState = history.get(history.size() - 1);
                Board oldBoard = oldState.board;
                board = new Board(oldBoard);
                turnNbr--;
                blackMoves.remove(blackMoves.size() - 1);
                whiteMoves.remove(whiteMoves.size() - 1);
                out.println();
                out.print("Going back to ");
                out.print(board.blackToMove ? "black's" : "white's");
                out.println(" turn number " + turnNbr);
                float blackTime = lastBlackTime / 1000.0F;
                float whiteTime = lastWhiteTime / 1000.0F;
                out.printf("Black has spent %.2f s before this move.\n", blackTime);
                out.printf("White has spent %.2f s before this move.\n", whiteTime);
                out.println();
                printBoard(board);
            }
        } else if (action.type == Actions.MOVE) {
            handleMove(action, board);
        } else {
            out.println("Unknown action: " + action.type.toString());
        }
    }
}
