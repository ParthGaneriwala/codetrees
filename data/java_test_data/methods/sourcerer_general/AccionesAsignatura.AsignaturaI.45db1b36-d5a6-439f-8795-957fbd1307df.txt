public ActionForward AsignaturaI(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
    // Salidas
    final String SALIDA_0 = "asignatura";
    String salida = SALIDA_0;
    Session s = HibernateUtil.getSessionFactory().getCurrentSession();
    Transaction tr = s.beginTransaction();
    try {
        String id = request.getParameter("idAsignatura");
        Long idAsignatura = (id == null) ? (Long) request.getSession().getAttribute("idAsignatura") : new Long(id);
        HttpSession sess = request.getSession();
        FAsignatura fFAsignatura = (FAsignatura) sess.getAttribute("FAsignatura");
        if (fFAsignatura == null) {
            fFAsignatura = new FAsignatura();
            sess.setAttribute("FAsignatura", fFAsignatura);
        } else {
            fFAsignatura.reset(mapping, request);
        }
        Asignatura asignatura = (Asignatura) s.load(Asignatura.class, idAsignatura);
        fFAsignatura.setIdAsignatura(asignatura.getIdAsignatura());
        fFAsignatura.setDepartamento(asignatura.getDepartamento().getIdDepartamento());
        fFAsignatura.setCodigo(asignatura.getCodigo());
        fFAsignatura.setNombre(asignatura.getNombre());
        fFAsignatura.setHorast(asignatura.getHorast());
        fFAsignatura.setHorasp(asignatura.getHorasp());
        fFAsignatura.setHorasl(asignatura.getHorasl());
        fFAsignatura.setPrograma1(null);
        // Feed for combo listDepartamento.
        {
            java.util.List<ve.usb.cohesion.runtime.Pair> list = (java.util.List<ve.usb.cohesion.runtime.Pair>) s.createQuery("select new ve.usb.cohesion.runtime.Pair(nombre, idDepartamento) " + "from Departamento").list();
            list.add(0, new ve.usb.cohesion.runtime.Pair("Ninguna", 0));
            fFAsignatura.setListDepartamento(list);
        }
        request.getSession().setAttribute("idDepartamento", fFAsignatura.getDepartamento());
        request.getSession().setAttribute("idAsignatura", idAsignatura);
        tr.commit();
    } catch (Exception ex) {
        tr.rollback();
        throw ex;
    }
    return mapping.findForward(salida);
}
