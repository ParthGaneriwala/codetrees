private static byte[] readNextRecord(DataInputStream in, StringBuffer headerBuffer) throws IOException {
    if (in == null) {
        return null;
    }
    if (headerBuffer == null) {
        return null;
    }
    String line = null;
    boolean foundMark = false;
    boolean inHeader = true;
    byte[] retContent = null;
    // first - find our WARC header
    while ((!foundMark) && ((line = readLineFromInputStream(in)) != null)) {
        if (line.startsWith(WARC_VERSION)) {
            foundMark = true;
        }
    }
    // no WARC mark?
    if (!foundMark) {
        return null;
    }
    // then read to the first newline
    // make sure we get the content length here
    int contentLength = -1;
    boolean foundContentLength = false;
    while (!foundContentLength && inHeader && ((line = readLineFromInputStream(in)) != null)) {
        if ((line.trim().length() == 0) && foundContentLength) {
            inHeader = false;
        } else {
            headerBuffer.append(line);
            headerBuffer.append(NEWLINE);
            String[] thisHeaderPieceParts = line.split(":", 2);
            if (thisHeaderPieceParts.length == 2) {
                if (thisHeaderPieceParts[0].toLowerCase().startsWith("content-length")) {
                    foundContentLength = true;
                    try {
                        contentLength = Integer.parseInt(thisHeaderPieceParts[1].trim());
                    } catch (NumberFormatException nfEx) {
                        contentLength = -1;
                    }
                }
            }
        }
    }
    if (contentLength < 0) {
        return null;
    }
    // now read the bytes of the content
    retContent = new byte[contentLength];
    int totalWant = contentLength;
    int totalRead = 0;
    while (totalRead < contentLength) {
        try {
            int numRead = in.read(retContent, totalRead, totalWant);
            if (numRead < 0) {
                return null;
            } else {
                totalRead += numRead;
                totalWant = contentLength - totalRead;
            }
        // end if (numRead < 0) / else
        } catch (EOFException eofEx) {
            // resize to what we have
            if (totalRead > 0) {
                byte[] newReturn = new byte[totalRead];
                System.arraycopy(retContent, 0, newReturn, 0, totalRead);
                return newReturn;
            } else {
                return null;
            }
        }
    // end try/catch (EOFException)
    }
    return retContent;
}
