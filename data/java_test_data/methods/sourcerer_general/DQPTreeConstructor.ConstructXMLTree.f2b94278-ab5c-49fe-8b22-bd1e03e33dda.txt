public String ConstructXMLTree(double[][] dDistanceMatrix) throws Exception {
    qNodes = new QNode[2 * dDistanceMatrix.length - 2];
    ArrayList alBestQuartets = Quartet.generateBestQuartetList(dDistanceMatrix);
    alQuartets = Quartet.generateFullQuartetList(dDistanceMatrix);
    QuartetTree qt = null;
    selected_q = new int[alBestQuartets.size()];
    alEdges = new ArrayList();
    QNode[] best_nodes = null;
    double best_score = Double.MAX_VALUE;
    for (int i = 0; i < 100; i++) {
        alEdges.clear();
        // htPath.clear();
        qt = new QuartetTree();
        Quartet q = null;
        q = getRandomQuartet(alBestQuartets);
        initializeFromQuartet(qt, q);
        int[] nodes_list = generateRandomNodesList(q, dDistanceMatrix.length);
        for (int j = 0; j < nodes_list.length; j++) {
            addNodeInBestPlace(qt, nodes_list[j], dDistanceMatrix);
        }
        last_tree_score = computeTreeScore(qt);
        if (last_tree_score < best_score) {
            best_score = last_tree_score;
            best_nodes = this.cloneQuartetNodes(qNodes, qt);
        }
    }
    qNodes = best_nodes;
    qt.root = this.getRandomInternNode();
    qt.St = (Quartet.worst_cost.doubleValue() - best_score) / (Quartet.worst_cost.doubleValue() - Quartet.best_cost.doubleValue());
    return qt.toString();
}
