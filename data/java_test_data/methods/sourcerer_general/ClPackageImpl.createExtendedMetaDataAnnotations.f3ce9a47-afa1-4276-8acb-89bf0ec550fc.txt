protected void createExtendedMetaDataAnnotations() {
    String source = "http:///org/eclipse/emf/ecore/util/ExtendedMetaData";
    addAnnotation(argEClass, source, new String[] { "name", "arg", "kind", "elementOnly" });
    addAnnotation(getArg_Name(), source, new String[] { "kind", "element", "name", "Name", "namespace", "##targetNamespace" });
    addAnnotation(getArg_Type(), source, new String[] { "kind", "element", "name", "Type", "namespace", "##targetNamespace" });
    addAnnotation(bindingEClass, source, new String[] { "name", "binding", "kind", "elementOnly" });
    addAnnotation(getBinding_Source(), source, new String[] { "kind", "element", "name", "Source", "namespace", "##targetNamespace" });
    addAnnotation(getBinding_Target(), source, new String[] { "kind", "element", "name", "Target", "namespace", "##targetNamespace" });
    addAnnotation(getBinding_UsedService(), source, new String[] { "kind", "element", "name", "UsedService", "namespace", "##targetNamespace" });
    addAnnotation(getBinding_Description(), source, new String[] { "kind", "element", "name", "Description", "namespace", "##targetNamespace" });
    addAnnotation(getBinding_Glue(), source, new String[] { "kind", "attribute", "name", "glue" });
    addAnnotation(getBinding_Name(), source, new String[] { "kind", "attribute", "name", "name" });
    addAnnotation(bindingKindEEnum, source, new String[] { "name", "binding_Kind" });
    addAnnotation(bindingKindObjectEDataType, source, new String[] { "name", "binding_Kind:Object", "baseType", "binding_Kind" });
    addAnnotation(bodyTypeEClass, source, new String[] { "name", "Body_._type", "kind", "simple" });
    addAnnotation(getBodyType_Value(), source, new String[] { "name", ":0", "kind", "simple" });
    addAnnotation(getBodyType_Language(), source, new String[] { "kind", "attribute", "name", "language" });
    addAnnotation(componentInstanceEClass, source, new String[] { "name", "Component_Instance", "kind", "elementOnly" });
    addAnnotation(getComponentInstance_DefinedByDescriptor(), source, new String[] { "kind", "element", "name", "DefinedByDescriptor", "namespace", "##targetNamespace" });
    addAnnotation(getComponentInstance_Name(), source, new String[] { "kind", "attribute", "name", "name" });
    addAnnotation(getComponentInstance_Interface(), source, new String[] { "kind", "element", "name", "Interface", "namespace", "##targetNamespace" });
    addAnnotation(getComponentInstance_ComponentInstance(), source, new String[] { "kind", "element", "name", "Component_Instance", "namespace", "##targetNamespace" });
    addAnnotation(getComponentInstance_Description(), source, new String[] { "kind", "element", "name", "Description", "namespace", "##targetNamespace" });
    addAnnotation(getComponentInstance_Port(), source, new String[] { "kind", "element", "name", "Port", "namespace", "##targetNamespace" });
    addAnnotation(getComponentInstance_Binding(), source, new String[] { "kind", "element", "name", "Binding", "namespace", "##targetNamespace" });
    addAnnotation(getComponentInstance_Kind(), source, new String[] { "kind", "attribute", "name", "kind" });
    addAnnotation(componentKindEEnum, source, new String[] { "name", "componentKind" });
    addAnnotation(componentKindObjectEDataType, source, new String[] { "name", "componentKind:Object", "baseType", "componentKind" });
    addAnnotation(directionEEnum, source, new String[] { "name", "direction" });
    addAnnotation(directionObjectEDataType, source, new String[] { "name", "direction:Object", "baseType", "direction" });
    addAnnotation(documentRootEClass, source, new String[] { "name", "Document_Root", "kind", "mixed" });
    addAnnotation(getDocumentRoot_Mixed(), source, new String[] { "kind", "elementWildcard", "name", ":mixed" });
    addAnnotation(getDocumentRoot_XMLNSPrefixMap(), source, new String[] { "kind", "attribute", "name", "xmlns:prefix" });
    addAnnotation(getDocumentRoot_XSISchemaLocation(), source, new String[] { "kind", "attribute", "name", "xsi:schemaLocation" });
    addAnnotation(getDocumentRoot_ComponentInstance(), source, new String[] { "kind", "element", "name", "Component_Descriptor", "namespace", "##targetNamespace" });
    addAnnotation(interfaceEClass, source, new String[] { "name", "interface", "kind", "elementOnly" });
    addAnnotation(getInterface_Service(), source, new String[] { "kind", "element", "name", "Service", "namespace", "##targetNamespace" });
    addAnnotation(getInterface_Descrition(), source, new String[] { "kind", "element", "name", "Descrition", "namespace", "##targetNamespace" });
    addAnnotation(getInterface_Name(), source, new String[] { "kind", "attribute", "name", "name" });
    addAnnotation(portEClass, source, new String[] { "name", "port", "kind", "elementOnly" });
    addAnnotation(getPort_Direction(), source, new String[] { "kind", "element", "name", "Direction", "namespace", "##targetNamespace" });
    addAnnotation(getPort_Visibility(), source, new String[] { "kind", "element", "name", "Visibility", "namespace", "##targetNamespace" });
    addAnnotation(getPort_DefinedByInterface(), source, new String[] { "kind", "element", "name", "DefinedByInterface", "namespace", "##targetNamespace" });
    addAnnotation(getPort_Description(), source, new String[] { "kind", "element", "name", "Description", "namespace", "##targetNamespace" });
    addAnnotation(getPort_Name(), source, new String[] { "kind", "attribute", "name", "name" });
    addAnnotation(serviceEClass, source, new String[] { "name", "service", "kind", "elementOnly" });
    addAnnotation(getService_Arg(), source, new String[] { "kind", "element", "name", "Arg", "namespace", "##targetNamespace" });
    addAnnotation(getService_Description(), source, new String[] { "kind", "element", "name", "Description", "namespace", "##targetNamespace" });
    addAnnotation(getService_Body(), source, new String[] { "kind", "element", "name", "Body", "namespace", "##targetNamespace" });
    addAnnotation(getService_Kind(), source, new String[] { "kind", "attribute", "name", "kind" });
    addAnnotation(getService_Name(), source, new String[] { "kind", "attribute", "name", "name" });
    addAnnotation(getService_ReturnedType(), source, new String[] { "kind", "attribute", "name", "returnedType" });
    addAnnotation(serviceKindEEnum, source, new String[] { "name", "serviceKind" });
    addAnnotation(serviceKindObjectEDataType, source, new String[] { "name", "serviceKind:Object", "baseType", "serviceKind" });
    addAnnotation(usedServiceEClass, source, new String[] { "name", "usedService", "kind", "elementOnly" });
    addAnnotation(getUsedService_Arg(), source, new String[] { "kind", "element", "name", "Arg", "namespace", "##targetNamespace" });
    addAnnotation(getUsedService_Name(), source, new String[] { "kind", "attribute", "name", "name" });
    addAnnotation(visibilityEEnum, source, new String[] { "name", "visibility" });
    addAnnotation(visibilityObjectEDataType, source, new String[] { "name", "visibility:Object", "baseType", "visibility" });
    addAnnotation(assemblyBindingEClass, source, new String[] { "name", "binding" });
    addAnnotation(getAssemblyBinding_Kind(), source, new String[] { "kind", "attribute", "name", "kind" });
    addAnnotation(a_BindingKindEEnum, source, new String[] { "name", "A_BindingKind" });
    addAnnotation(d_BindingKindEEnum, source, new String[] { "name", "D_BindingKind" });
    addAnnotation(delegationBindingEClass, source, new String[] { "name", "binding" });
    addAnnotation(getDelegationBinding_Kind(), source, new String[] { "kind", "attribute", "name", "kind" });
}
