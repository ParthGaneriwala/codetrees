public static void passTell(Datagram d) {
    Tell t = new Tell(d);
    lastTells.add(t.getHandle() + " tells you: " + t.getMessage(false));
    String command = Library.grabUptoFirstSpace(t.getMessage(true));
    if (Common.followingSimul(t.getHandle())) {
        handler.tell(t.getHandle(), "If you are trying to stop following the simul, tell me \"unfollow\".");
    }
    if (command.equals("join")) {
        Join.join(t.getHandle());
    } else if (command.equals("play")) {
        Join.join(t.getHandle());
    } else if (command.equals("leave")) {
        Leave.leave(t.getHandle());
    } else if (command.equals("remove")) {
        Remove.remove(t);
    } else if (command.equals("status")) {
        Status.status(t.getHandle());
    } else if (command.equals("players")) {
        Players.players(t.getHandle());
    } else if (command.equals("open")) {
        Open.open(t);
    } else if (command.equals("close")) {
        Close.close(t);
    } else if (command.equals("set")) {
        Set.set(t);
    } else if (command.equals("vars")) {
        Vars.vars(t.getHandle());
    } else if (command.equals("help")) {
        Help.help(t);
    } else if (command.equals("forcejoin")) {
        Forcejoin.forcejoin(t);
    } else if (command.equals("tellall")) {
        TellAll.tellAll(t);
    } else if (command.equals("start")) {
        Start.start(t);
    } else if (command.equals("games")) {
        Games.games(t.getHandle());
    } else if (command.equals("results")) {
        Results.results(t.getHandle());
    } else if (command.equals("finish")) {
        Finish.finish(t);
    } else if (command.equals("load")) {
        Load.load(t);
    } else if (command.equals("info")) {
        Info.info(t.getHandle());
    } else if (command.equals("follow")) {
        Follow.follow(t.getHandle());
    } else if (command.equals("test")) {
        Test.test(t);
    } else if (command.equals("feedback")) {
        handleFeedback(t);
    } else if (command.equals("announce")) {
        Announce.announce(t);
    } else if (command.equals("latejoin")) {
        Latejoin.latejoin(t.getHandle());
    } else if (command.equals("followers")) {
        Followers.followers(t.getHandle());
    } else if (command.equals("exec")) {
        Exec.exec(t);
    } else if (command.equals("history")) {
        History.history(t.getHandle());
    } else if (command.equals("access")) {
        Access.access(t);
    } else if (command.equals("exit")) {
        Exit.exit(t);
    } else if (command.equals("unfollow")) {
        Unfollow.unfollow(t.getHandle());
    } else if (command.equals("lasttells")) {
        Lasttells.lasttells(t);
    } else if (command.equals("stored")) {
        Stored.stored(t);
    } else if (command.equals("alarm")) {
        Alarm.alarm(t.getHandle());
    } else if (command.equals("managers")) {
        Managers.managers(t.getHandle());
    } else if (command.equals("save")) {
        Save.save(t);
    } else if (command.equals("assess")) {
        Assess.assess(t.getHandle());
    } else if (command.equals("clear")) {
        Clear.clear(t);
    } else if (command.equals("view")) {
        View.view(t);
    } else if (command.equals("games2")) {
        Games2.games2(t.getHandle());
    } else {
        // the tell isn't us)
        if (!t.getHandle().equals(Settings.username.toLowerCase()) && !t.getHandle().equals("jeeves")) {
            String msg = "I did not understand your message. Please check to make sure you typed everything correctly, or \"tell " + Settings.username + " help\" for a list of commands.";
            handler.tell(t.getHandle(), msg);
        }
    }
}
