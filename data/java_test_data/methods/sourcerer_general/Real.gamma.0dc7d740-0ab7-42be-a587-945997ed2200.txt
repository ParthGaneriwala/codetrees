public void gamma() {
    if (!(this.exponent >= 0))
        return;
    // x<0: gamma(-x) = -pi/(x*gamma(x)*sin(pi*x))
    boolean negative = (this.sign != 0);
    abs();
    {
        tmp1.mantissa = this.mantissa;
        tmp1.exponent = this.exponent;
        tmp1.sign = this.sign;
    }
    ;
    // x<n: gamma(x) = gamma(x+m)/x*(x+1)*(x+2)*...*(x+m-1)
    // n=20
    {
        tmp2.mantissa = ONE.mantissa;
        tmp2.exponent = ONE.exponent;
        tmp2.sign = ONE.sign;
    }
    ;
    boolean divide = false;
    while (this.compare(20) < 0) {
        divide = true;
        tmp2.mul(this);
        add(ONE);
    }
    // x>n: gamma(x) = exp((x-1/2)*ln(x) - x + ln(2*pi)/2 + 1/12x - 1/360x�
    // + 1/1260x**5 - 1/1680x**7+1/1188x**9)
    // x
    {
        tmp3.mantissa = this.mantissa;
        tmp3.exponent = this.exponent;
        tmp3.sign = this.sign;
    }
    // x
    ;
    {
        tmp4.mantissa = this.mantissa;
        tmp4.exponent = this.exponent;
        tmp4.sign = this.sign;
    }
    ;
    // x�
    tmp4.sqr();
    // (x-1/2)*ln(x)-x
    ln();
    {
        tmp5.mantissa = tmp3.mantissa;
        tmp5.exponent = tmp3.exponent;
        tmp5.sign = tmp3.sign;
    }
    ;
    tmp5.sub(HALF);
    mul(tmp5);
    sub(tmp3);
    // + ln(2*pi)/2
    {
        tmp5.sign = (byte) 0;
        tmp5.exponent = 0x3fffffff;
        tmp5.mantissa = 0x759fc72192fad29aL;
    }
    ;
    add(tmp5);
    // + 1/12x
    tmp5.assign(12);
    tmp5.mul(tmp3);
    tmp5.recip();
    add(tmp5);
    tmp3.mul(tmp4);
    // - 1/360x�
    tmp5.assign(360);
    tmp5.mul(tmp3);
    tmp5.recip();
    sub(tmp5);
    tmp3.mul(tmp4);
    // + 1/1260x**5
    tmp5.assign(1260);
    tmp5.mul(tmp3);
    tmp5.recip();
    add(tmp5);
    tmp3.mul(tmp4);
    // - 1/1680x**7
    tmp5.assign(1680);
    tmp5.mul(tmp3);
    tmp5.recip();
    sub(tmp5);
    tmp3.mul(tmp4);
    // + 1/1188x**9
    tmp5.assign(1188);
    tmp5.mul(tmp3);
    tmp5.recip();
    add(tmp5);
    exp();
    if (divide)
        div(tmp2);
    if (negative) {
        // sin() uses tmp1
        {
            tmp5.mantissa = tmp1.mantissa;
            tmp5.exponent = tmp1.exponent;
            tmp5.sign = tmp1.sign;
        }
        // sin() uses tmp1
        ;
        // -pi/(x*gamma(x)*sin(pi*x))
        mul(tmp5);
        // Fixes integer inaccuracy
        tmp5.scalbn(-1);
        // Fixes integer inaccuracy
        tmp5.frac();
        // Fixes integer inaccuracy
        tmp5.mul(PI2);
        tmp5.sin();
        mul(tmp5);
        recip();
        mul(PI);
        neg();
    }
}
