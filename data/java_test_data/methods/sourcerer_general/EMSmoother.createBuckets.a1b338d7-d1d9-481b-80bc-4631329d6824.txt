@SuppressWarnings("unchecked")
private void createBuckets(int bucketSize) {
    Pair<Double, Integer>[] counts = new Pair[maxClusterId];
    int numBuckets = 0;
    for (int clusterid = 0; clusterid < maxClusterId; ++clusterid) {
        long count = clusterCounts[clusterid];
        if (count > 0) {
            counts[numBuckets++] = new Pair<Double, Integer>((double) count, clusterid);
        }
    }
    System.out.println("Number of non-zero clusters: " + numBuckets);
    Comparator<Pair<Double, Integer>> cmp = new Comparator<Pair<Double, Integer>>() {

        @Override
        public int compare(Pair<Double, Integer> arg0, Pair<Double, Integer> arg1) {
            return (int) Math.signum(arg0.getFirst() - arg1.getFirst());
        }
    };
    Arrays.sort(counts, 0, numBuckets, cmp);
    ArrayList<int[]> buckets = new ArrayList<int[]>();
    int pos = 1;
    int accumulatedCounts = 0;
    ArrayList<Integer> currentBucket = new ArrayList<Integer>();
    while (pos < numBuckets) {
        int clusterid = counts[pos++].getSecond();
        currentBucket.add(clusterid);
        accumulatedCounts += clusterCounts[clusterid];
        if (accumulatedCounts > bucketSize || pos == counts.length) {
            int[] clusters = new int[currentBucket.size()];
            int i = 0;
            for (int cluster : currentBucket) {
                clusters[i++] = cluster;
            }
            buckets.add(clusters);
            accumulatedCounts = 0;
            currentBucket.clear();
        }
    }
    int bucketid = 0;
    this.buckets = new int[buckets.size()][];
    for (int[] bucket : buckets) {
        this.buckets[bucketid++] = bucket;
    }
    System.out.printf("%d buckets out of %d clusters\n", this.buckets.length, nrLeaves * 2 - 1);
}
