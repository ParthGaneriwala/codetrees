private static int processOpts(String opts, String nextArg) {
    boolean usedNext = false;
    ARPOptions options = arp.getOptions();
    for (int i = 0; i < opts.length(); i++) {
        char opt = opts.charAt(i);
        if ("beiwD".indexOf(opt) != -1) {
            if (usedNext)
                usage();
            usedNext = true;
        }
        switch(opt) {
            case 'D':
                final int nStatements = Integer.parseInt(nextArg);
                rt.gc();
                rt.gc();
                startMem = (int) (rt.totalMemory() - rt.freeMemory());
                arp.getHandlers().setStatementHandler(new StatementHandler() {

                    int debugC = 0;

                    public void statement(AResource subj, AResource pred, AResource obj) {
                        statement(null, null, (ALiteral) null);
                    }

                    public void statement(AResource subj, AResource pred, ALiteral lit) {
                        if (++debugC % 100 == 0) {
                            System.out.println("T: " + debugC);
                            rt.gc();
                            System.out.println("M1: " + (rt.totalMemory() - rt.freeMemory() - startMem));
                            rt.gc();
                            System.out.println("M2: " + (rt.totalMemory() - rt.freeMemory() - startMem));
                        }
                        if (debugC == 1) {
                            rt.gc();
                            rt.gc();
                            startMem = (int) (rt.totalMemory() - rt.freeMemory());
                        }
                        if (debugC == nStatements) {
                            rt.gc();
                            System.err.println("Kill me now.");
                            try {
                                Thread.sleep(200000);
                            } catch (Exception e) {
                            // ignore
                            }
                        }
                    }
                });
                break;
            case 'x':
                options.setLaxErrorMode();
                break;
            case 's':
                options.setStrictErrorMode();
                break;
            case 't':
                arp.getHandlers().setStatementHandler(getSH(false));
                break;
            case 'r':
                options.setEmbedding(false);
                break;
            case 'R':
                options.setEmbedding(true);
                break;
            case 'n':
                numbers = true;
                break;
            case 'E':
                arp.getHandlers().setErrorHandler(new ErrorHandler() {

                    public void warning(SAXParseException exception) {
                    /* ignore */
                    }

                    public void error(SAXParseException exception) {
                    /* ignore */
                    }

                    public void fatalError(SAXParseException exception) {
                    /* ignore */
                    }
                });
                arp.setBadStatementHandler(new SH(System.err));
                break;
            case 'b':
                xmlBase = nextArg;
                break;
            case 'e':
                setErrorMode(nextArg, EM_ERROR);
                break;
            case 'i':
                setErrorMode(nextArg, EM_IGNORE);
                break;
            case 'w':
                setErrorMode(nextArg, EM_WARNING);
                break;
            case 'f':
                for (int j = 0; j < 400; j++) {
                    if (options.setErrorMode(j, -1) == EM_ERROR)
                        options.setErrorMode(j, EM_FATAL);
                }
                break;
            case 'u':
                options.setErrorMode(WARN_UNQUALIFIED_ATTRIBUTE, EM_IGNORE);
                options.setErrorMode(WARN_UNQUALIFIED_RDF_ATTRIBUTE, EM_IGNORE);
                break;
            default:
                usage();
        }
    }
    return usedNext ? 1 : 0;
}
