@SuppressWarnings("unchecked")
public void run() {
    String tstr = "j56u67yghj";
    peer.ThreadCounter tc;
    if (!peer.Config.ThreadStrTable.containsKey(tstr)) {
        tc = new peer.ThreadCounter();
        peer.Config.ThreadStrTable.put(tstr, tc);
    }
    tc = (ThreadCounter) peer.Config.ThreadStrTable.get(tstr);
    tc.conut++;
    while (run) {
        if (hpg.run) {
            // System.out.println("1111111111111");
            if (vBlockTable.size() != 0) {
                if (!isCheckerLoad) {
                    loadFileCheck();
                } else {
                    synchronized (ptg) {
                        HashMap<Integer, VBlock> vBlockTable2 = (HashMap<Integer, VBlock>) vBlockTable.clone();
                        Iterator<Integer> it = vBlockTable2.keySet().iterator();
                        // ��ʱ�ֿ�ɨ��
                        while (it.hasNext()) {
                            int blockNum = it.next();
                            int pieceSumB = 0;
                            if (fileChecker.getPieceSum() <= 64) {
                                pieceSumB = fileChecker.getPieceSum();
                            } else {
                                if (blockNum != fileChecker.getBlockSum() - 1) {
                                    pieceSumB = 64;
                                } else {
                                    pieceSumB = (int) (fileChecker.getPieceSum() % 64);
                                }
                            }
                            VBlock vBlock = vBlockTable.get(blockNum);
                            if (vBlock != null) {
                                if (vBlock.getPieceSum() == pieceSumB) {
                                    // System.out.println("TRY1111 "+  blockNum);
                                    int blockLength = 0;
                                    // System.out.println("XXXXXXXXXXXXXX  "+blockNum+"  "+pieceSumB+"  "+fileChecker.getBlockSum());
                                    if (fileLength <= 512 * 1024) {
                                        blockLength = (int) fileLength;
                                    } else {
                                        if (blockNum < fileChecker.getBlockSum() - 1) {
                                            blockLength = 512 * 1024;
                                        // System.out.println("AAAAAAAAAAAAAAA  "+blockLength);
                                        } else {
                                            blockLength = (int) (fileChecker.getFileLength() % (512 * 1024));
                                        // System.out.println("BBBBBBBBBBBBBBB  "+blockLength);
                                        }
                                    }
                                    byte[] blockData = new byte[blockLength];
                                    int pieceOffset = blockNum * 64;
                                    boolean ok = true;
                                    int offset = 0;
                                    HashMap<Integer, byte[]> pieceTable = new HashMap<Integer, byte[]>();
                                    for (int i = 0; i < pieceSumB; i++) {
                                        int pieceLength = 0;
                                        if (fileLength <= 8 * 1024) {
                                            pieceLength = (int) fileLength;
                                        } else {
                                            if (pieceOffset != fileChecker.getPieceSum() - 1) {
                                                pieceLength = 8 * 1024;
                                            } else {
                                                pieceLength = (int) (fileChecker.getFileLength() % (8 * 1024));
                                            }
                                        }
                                        byte[] pieceData = null;
                                        try {
                                            pieceData = getPiece(pieceOffset);
                                        } catch (IOException e) {
                                            e.printStackTrace();
                                            System.out.println("��ȡ��ʱ���ݳ���");
                                            break;
                                        }
                                        if (pieceData != null) {
                                            if (pieceData.length == pieceLength) {
                                                // System.out.println("EEEEEEEEEEEEEE  "+pieceData.length+"  "+pieceOffset);
                                                System.arraycopy(pieceData, 0, blockData, offset, pieceData.length);
                                                pieceTable.put(i, pieceData);
                                                offset += pieceData.length;
                                                pieceOffset++;
                                            } else {
                                                // System.out.println("WRONG111 "+  blockNum);
                                                delPiece(pieceOffset);
                                                vBlock.delPiece(pieceOffset);
                                                ok = false;
                                                break;
                                            }
                                        } else {
                                            // System.out.println("WRONG222 "+  blockNum);
                                            vBlock.delPiece(pieceOffset);
                                            ok = false;
                                            break;
                                        }
                                    }
                                    // System.out.println("TRY222 "+  blockNum);
                                    if (ok) {
                                        if (!peer.Config.cacheFileMange.containsBlock(mdb, blockNum)) {
                                            if (fileChecker.checkBlock(blockData, blockNum)) {
                                                try {
                                                    // System.out.println("XXX"+peer.Config.cancheFileMange.blockIndexOffset);
                                                    peer.Config.cacheFileMange.addBlock(mdb, blockNum, blockData);
                                                } catch (IOException e) {
                                                    e.printStackTrace();
                                                }
                                            }
                                        }
                                        // ɾ���Ѿ��������ʱ��Ƭ  pieceDataTable
                                        HashMap hm = vBlock.getPieceTable();
                                        Iterator<Integer> it2 = hm.keySet().iterator();
                                        while (it2.hasNext()) {
                                            int pieceNum = it2.next();
                                            pieceDataTable.remove(pieceNum);
                                        }
                                        vBlockTable.remove(blockNum);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            try {
                Thread.sleep(peer.Config.CheckBlockInterval);
            } catch (InterruptedException e) {
            // e.printStackTrace();
            }
        } else {
            vBlockTable = null;
            pieceDataTable = null;
            break;
        }
    }
    System.out.println("��ֹPieceTempGroup");
    tc.conut--;
}
