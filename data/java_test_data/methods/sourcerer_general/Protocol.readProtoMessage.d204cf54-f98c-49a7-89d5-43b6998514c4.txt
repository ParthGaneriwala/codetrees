public boolean readProtoMessage() {
    if (!open)
        return false;
    piece = null;
    try {
        int mess_type = input.readInt();
        if (MESSAGE_TYPES.PLAYER_INFO.ordinal() == mess_type) {
            lp = readPlayer();
            last = MESSAGE_TYPES.PLAYER_INFO;
            if (client_turn_order != -1)
                return true;
            client_turn_order = logic.addPlayer(lp);
            player = lp;
        } else if (MESSAGE_TYPES.DISCONNECT.ordinal() == mess_type) {
            last = MESSAGE_TYPES.DISCONNECT;
            int id = input.readInt();
            if (isServer)
                dcdId = player.getTurnOrder();
            else
                dcdId = id;
            if (isServer)
                return false;
        } else if (MESSAGE_TYPES.MOVE.ordinal() == mess_type) {
            last = MESSAGE_TYPES.MOVE;
            int x = input.readInt();
            int y = input.readInt();
            piece = new GamePiece(x, y, player.getColor());
            if (GameLogic.checkMove(board, x) && (!isServer || (ServerController.isGameInProgress() && player.getTurnOrder() == logic.getTurnOrder()))) {
                board.makeMove(piece, x);
            } else {
                piece = null;
                sendIllegal();
            }
        } else if (MESSAGE_TYPES.PLAYER_LIST.ordinal() == mess_type) {
            last = MESSAGE_TYPES.PLAYER_LIST;
            sendPlayerList();
        } else if (MESSAGE_TYPES.PLAYER_COUNT.ordinal() == mess_type) {
            last = MESSAGE_TYPES.PLAYER_COUNT;
            output.writeInt(logic.playerList.size());
        } else if (MESSAGE_TYPES.TURN_ROTATE.ordinal() == mess_type) {
            last = MESSAGE_TYPES.TURN_ROTATE;
        } else if (MESSAGE_TYPES.WON.ordinal() == mess_type) {
            last = MESSAGE_TYPES.WON;
            wonId = input.readInt();
        } else if (MESSAGE_TYPES.STALEMATE.ordinal() == mess_type) {
            last = MESSAGE_TYPES.STALEMATE;
        } else if (MESSAGE_TYPES.RESET.ordinal() == mess_type) {
            last = MESSAGE_TYPES.RESET;
            board.reset();
            logic.reset();
        } else if (MESSAGE_TYPES.CHAT.ordinal() == mess_type) {
            last = MESSAGE_TYPES.CHAT;
            chat = input.readUTF();
            if (isServer)
                chat = player.getUserName() + ": " + chat;
            if (!chat.endsWith("\n"))
                chat += "\n";
        } else if (MESSAGE_TYPES.READY.ordinal() == mess_type) {
            last = MESSAGE_TYPES.READY;
        } else if (MESSAGE_TYPES.GRIDSIZE.ordinal() == mess_type) {
            last = MESSAGE_TYPES.GRIDSIZE;
            output.writeInt(board.getXDimension());
            output.writeInt(board.getYDimension());
        } else if (MESSAGE_TYPES.STATUS.ordinal() == mess_type) {
            last = MESSAGE_TYPES.STATUS;
            if (ServerController.isGameInProgress())
                output.writeInt(1);
            else
                output.writeInt(0);
        } else {
            System.err.println("got unknown protocol message of type " + mess_type);
            return false;
        }
    } catch (IOException e) {
        return false;
    }
    return true;
}
