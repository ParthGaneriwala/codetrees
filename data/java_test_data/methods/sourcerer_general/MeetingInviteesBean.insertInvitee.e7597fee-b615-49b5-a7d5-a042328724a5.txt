private boolean insertInvitee(Connection db, ActionRequest request, String invitee, User user) throws SQLException {
    boolean inserted = true;
    // check if the user is present in attendeelist, in case of modify meeting
    for (int i = 0; meetingAttendeeList != null && i < meetingAttendeeList.size(); ) {
        MeetingAttendee meetingAttendee = meetingAttendeeList.get(i);
        if (meetingAttendee.getUserId() == user.getId()) {
            meetingAttendeeList.remove(i);
            // if valid dimdim meeting then send meeting change mail otherwise send invitation mail.
            if (meeting.getIsDimdim() && !StringUtils.hasText(meeting.getDimdimMeetingId())) {
                addToMemberFoundList(user, invitee);
            } else {
                meetingChangeUsers.add(user);
            }
            return false;
        }
        i++;
    }
    // return if the user has already been invited.
    if (isMemberInvited(user)) {
        return false;
    }
    // check if the user is registered
    boolean isNewMember = false;
    if (user.getId() == -1) {
        ApplicationPrefs prefs = PortalUtils.getApplicationPrefs(request);
        isNewMember = true;
        user.setAccountSize(prefs.get("ACCOUNT.SIZE"));
        user.setAccessAddProjects(prefs.get(ApplicationPrefs.USERS_CAN_START_PROJECTS));
        if ("true".equals(prefs.get(ApplicationPrefs.USERS_CAN_INVITE)) || PortalUtils.getUser(request).getAccessInvite() || PortalUtils.getUser(request).getAccessAdmin()) {
            user.setInstanceId(PortalUtils.getInstance(request).getId());
            inserted = user.insert(db, PortalUtils.getServerDomainNameAndPort(request), prefs);
        }
    }
    // check if the user is a member of the team
    if (!isNewMember) {
        TeamMember teamMember = project.getTeam().getTeamMember(user.getId());
        if (teamMember == null) {
            isNewMember = true;
        }
    }
    // Insert user into project as pending
    TeamMember thisMember = new TeamMember();
    if (isNewMember && inserted) {
        thisMember.setProjectId(meeting.getProjectId());
        thisMember.setUserId(user.getId());
        thisMember.setUserLevel(PortalUtils.getUserLevel(TeamMember.PARTICIPANT));
        thisMember.setStatus(TeamMember.STATUS_INVITING);
        thisMember.setEnteredBy(meeting.getModifiedBy());
        thisMember.setModifiedBy(meeting.getModifiedBy());
        String optionalMessage = "";
        thisMember.setCustomInvitationMessage(optionalMessage);
        inserted = thisMember.insert(db);
    }
    // insert to attendee table
    if (inserted) {
        MeetingAttendee thisAttendee = new MeetingAttendee();
        thisAttendee.setMeetingId(meeting.getId());
        thisAttendee.setUserId(user.getId());
        thisAttendee.setDimdimStatus(MeetingAttendee.STATUS_DIMDIM_INVITED);
        thisAttendee.setEnteredBy(meeting.getEnteredBy());
        thisAttendee.setModifiedBy(meeting.getModifiedBy());
        inserted = thisAttendee.insert(db);
        this.meetingAttendee = thisAttendee;
    }
    // add the invitee to found list
    if (inserted) {
        if (isNewMember) {
            PortalUtils.processInsertHook(request, thisMember);
        }
        addToMemberFoundList(user, invitee);
    }
    return inserted;
}
