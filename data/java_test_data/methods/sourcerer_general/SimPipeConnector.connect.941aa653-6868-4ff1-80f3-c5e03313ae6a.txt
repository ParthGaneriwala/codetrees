public ConnectFuture connect(SocketAddress address, SocketAddress localAddress, IoHandler handler, IoServiceConfig config) {
    if (address == null)
        throw new NullPointerException("address");
    if (handler == null)
        throw new NullPointerException("handler");
    if (!(address instanceof SimPipeAddress))
        throw new IllegalArgumentException("address must be SimPipeAddress.");
    if (config == null) {
        config = getDefaultConfig();
    }
    SimPipe entry = SimPipeAcceptor.boundHandlers.get(address);
    if (entry == null) {
        return DefaultConnectFuture.newFailedFuture(new IOException("Endpoint unavailable: " + address));
    }
    localAddress = new SimPipeAddress(nextId++);
    DefaultConnectFuture future = new DefaultConnectFuture();
    SimPipeSessionImpl localSession = new SimPipeSessionImpl(this, config, getListeners(), localAddress, /*new AnonymousSocketAddress()*/
    handler, entry);
    InetSocketAddress x;
    // ---------------------------------------------------------------
    // MINA SIM
    // ---------------------------------------------------------------
    int accAddress = ((SimPipeAddress) address).getPort();
    int connAddress = ((SimPipeAddress) localAddress).getPort();
    Peer minaPeerAcc = new Peer(accAddress, 1, 1);
    Peer minaPeerConn = new Peer(connAddress, 1, 1);
    try {
        if (!Network.getInstance().contains(connAddress))
            Network.getInstance().add(minaPeerConn);
        if (!Network.getInstance().contains(accAddress))
            Network.getInstance().add(minaPeerAcc);
    } catch (Exception e) {
        P.rint("Can't add node");
    }
    // initialize connector session
    try {
        // -------- Sameh: these are turn off for now, may be we will need
        // to use them later
        // IoFilterChain filterChain = localSession.getFilterChain();
        // this.getFilterChainBuilder().buildFilterChain(filterChain);
        // config.getFilterChainBuilder().buildFilterChain(filterChain);
        // -------- Sameh: this one has to remain closed!!
        // config.getThreadModel().buildFilterChain(filterChain);
        // The following sentences don't throw any exceptions.
        localSession.setAttribute(AbstractIoFilterChain.CONNECT_FUTURE, future);
        getListeners().fireSessionCreated(localSession);
    // SimPipeIdleStatusChecker.getInstance().addSession(localSession);
    } catch (Throwable t) {
        future.setException(t);
        return future;
    }
    // initialize acceptor session
    SimPipeSessionImpl remoteSession = localSession.getRemoteSession();
    try {
        // //IoFilterChain filterChain = remoteSession.getFilterChain();
        // //entry.getAcceptor().getFilterChainBuilder().buildFilterChain(
        // //        filterChain);
        // //entry.getConfig().getFilterChainBuilder().buildFilterChain(
        // //        filterChain);
        // //entry.getConfig().getThreadModel().buildFilterChain(filterChain);
        // // The following sentences don't throw any exceptions.
        entry.getListeners().fireSessionCreated(remoteSession);
    // SimPipeIdleStatusChecker.getInstance().addSession(remoteSession);
    } catch (Throwable t) {
        ExceptionMonitor.getInstance().exceptionCaught(t);
        remoteSession.close();
    }
    return future;
}
