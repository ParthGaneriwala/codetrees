public void signOut(String localSipURL) {
    try {
        DebugIM.println();
        DebugIM.println("process REGISTER (SignOut) in progress for " + localSipURL);
        String imProtocol = imUA.getIMProtocol();
        SipStack sipStack = imUA.getSipStack();
        SipProvider sipProvider = imUA.getSipProvider();
        MessageFactory messageFactory = imUA.getMessageFactory();
        HeaderFactory headerFactory = imUA.getHeaderFactory();
        AddressFactory addressFactory = imUA.getAddressFactory();
        // Request-URI:
        SipURI requestURI = addressFactory.createSipURI(null, imUA.getRegistrarAddress());
        requestURI.setPort(imUA.getRegistrarPort());
        // Call-ID:
        callIdCounter++;
        CallIdHeader callIdHeader = headerFactory.createCallIdHeader("nist-sip-im-register-callId" + callIdCounter);
        // CSeq:
        cseq++;
        CSeqHeader cseqHeader = headerFactory.createCSeqHeader(cseq, "REGISTER");
        // To header:
        Address toAddress = addressFactory.createAddress(localSipURL);
        String toTag = Utils.generateTag();
        ToHeader toHeader = headerFactory.createToHeader(toAddress, toTag);
        // From Header:
        Address fromAddress = addressFactory.createAddress(localSipURL);
        String fromTag = Utils.generateTag();
        FromHeader fromHeader = headerFactory.createFromHeader(fromAddress, fromTag);
        // Via header
        String branchId = Utils.generateBranchId();
        ViaHeader viaHeader = headerFactory.createViaHeader(imUA.getIMAddress(), imUA.getIMPort(), imProtocol, branchId);
        Vector viaList = new Vector();
        viaList.addElement(viaHeader);
        // MaxForwards header:
        MaxForwardsHeader maxForwardsHeader = headerFactory.createMaxForwardsHeader(10);
        Request request = messageFactory.createRequest(requestURI, "REGISTER", callIdHeader, cseqHeader, fromHeader, toHeader, viaList, maxForwardsHeader);
        // Contact header:
        SipURI sipURI = addressFactory.createSipURI(null, imUA.getIMAddress());
        sipURI.setPort(imUA.getIMPort());
        sipURI.setTransportParam(imUA.getIMProtocol());
        Address contactAddress = addressFactory.createAddress(sipURI);
        ContactHeader contactHeader = headerFactory.createContactHeader(contactAddress);
        request.setHeader(contactHeader);
        ExpiresHeader expiresHeader = headerFactory.createExpiresHeader(0);
        request.setHeader(expiresHeader);
        // ProxyAuthorization header if not null:
        ProxyAuthorizationHeader proxyAuthHeader = imUA.getProxyAuthorizationHeader();
        if (proxyAuthHeader != null)
            request.setHeader(proxyAuthHeader);
        ClientTransaction clientTransaction = sipProvider.getNewClientTransaction(request);
        clientTransaction.sendRequest();
        DebugIM.println("REGISTER sent:\n" + request);
        DebugIM.println();
    } catch (Exception ex) {
        ex.printStackTrace();
    }
}
