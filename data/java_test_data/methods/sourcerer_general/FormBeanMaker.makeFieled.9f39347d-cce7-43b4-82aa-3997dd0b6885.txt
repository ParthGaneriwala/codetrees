private void makeFieled(Object fbObj, Element fieldEle) throws NoSuchElementException, XmlFormatException, ConfigFileFormatException, Exception {
    // 校验
    String fieldName = fieldEle.getAttributeValue("id");
    logger.info("1.  构造 field " + fieldName);
    logger.debug("2.  获取fieldName & regKey & from  ...");
    String fieldNameFLUC = this.firstLetterUpperCase(fieldName);
    String regKey = fieldEle.getAttributeValue("regkey");
    String fromType = fieldEle.getAttributeValue("from");
    String errMess;
    Element errMessEle = fieldEle.getChild("errMess");
    if (errMessEle != null)
        errMess = errMessEle.getText();
    else
        errMess = "";
    Object regValue = this.ds.getValue(fromType, regKey);
    // 设置值
    this.vr.setValue(regKey, regValue);
    logger.debug("3.  实例化BC");
    BooleanCalculator bc = new BooleanCalculator(fieldEle, regValue, ds, this.utils);
    try {
        if (bc.start()) {
            logger.debug("4.  校验通过");
            if (fieldEle.getChild("castor") != null) {
                // 校验通过
                Method getM = fbObj.getClass().getMethod("get" + fieldNameFLUC, new Class[] {});
                Method setM = fbObj.getClass().getMethod("set" + fieldNameFLUC, new Class[] { getM.getReturnType() });
                logger.debug("4.1  给form bean 的" + fieldName + " 附值 " + regValue);
                // 类型转换器实例化
                AbstractCastor castor = this.getCastor(fieldEle.getChild("castor").getAttributeValue("ref"));
                // 转换器参数值
                List paramValues = null;
                List params = fieldEle.getChild("castor").getChildren("param");
                if (params != null) {
                    paramValues = new Vector(params.size());
                    for (int i = 0; i < params.size(); i++) {
                        Element param = (Element) params.get(i);
                        if (this.utils.get(param.getText()) == null)
                            paramValues.add(param.getText());
                        else
                            paramValues.add(this.utils.get(param.getText()));
                    }
                }
                setM.invoke(fbObj, new Object[] { castor.casting(regValue, paramValues) });
            }
        } else {
            logger.debug("4.  校验不通过 " + errMess);
            // @todo : 校验不通过
            this.vr.setErrMess(regKey, errMess);
        }
    } catch (IllegalAccessException iae) {
        logger.error("构造formbean 异常： 类成员" + fieldName + "对应的get" + fieldNameFLUC + "()、set" + fieldNameFLUC + "() 不允许访问,是否将其设置为 public");
        iae.printStackTrace();
    } catch (InvocationTargetException ivte) {
        logger.error("构造formbean 异常： 类成员" + fieldName + "对应的get" + fieldNameFLUC + "()、set" + fieldNameFLUC + "() 调用失败");
        ivte.printStackTrace();
    } catch (NoSuchMethodException nsme) {
        logger.error("构造formbean 异常： 类成员" + fieldName + "对应的get" + fieldNameFLUC + "()、set" + fieldNameFLUC + "() 不存在");
        nsme.printStackTrace();
    } catch (ClassNotFoundException cbfe) {
        logger.error("类查找失败");
        cbfe.printStackTrace();
    }
}
