Table SYSTEM_PROPERTIES() throws HsqlException {
    Table t = sysTables[SYSTEM_PROPERTIES];
    if (t == null) {
        t = createBlankTable(sysTableHsqlNames[SYSTEM_PROPERTIES]);
        addColumn(t, "PROPERTY_SCOPE", Types.VARCHAR, false);
        addColumn(t, "PROPERTY_NAMESPACE", Types.VARCHAR, false);
        addColumn(t, "PROPERTY_NAME", Types.VARCHAR, false);
        addColumn(t, "PROPERTY_VALUE", Types.VARCHAR);
        addColumn(t, "PROPERTY_CLASS", Types.VARCHAR, false);
        // order PROPERTY_SCOPE, PROPERTY_NAMESPACE, PROPERTY_NAME
        // true PK
        t.createPrimaryKey(null, new int[] { 0, 1, 2 }, true);
        return t;
    }
    // calculated column values
    String scope;
    String nameSpace;
    // intermediate holders
    Object[] row;
    HsqlDatabaseProperties props;
    // column number mappings
    final int iscope = 0;
    final int ins = 1;
    final int iname = 2;
    final int ivalue = 3;
    final int iclass = 4;
    // First, we want the names and values for
    // all JDBC capabilities constants
    scope = "SESSION";
    props = database.getProperties();
    nameSpace = "database.properties";
    // boolean properties
    Iterator it = props.getUserDefinedPropertyData().iterator();
    while (it.hasNext()) {
        Object[] metaData = (Object[]) it.next();
        row = t.getEmptyRowData();
        row[iscope] = scope;
        row[ins] = nameSpace;
        row[iname] = metaData[HsqlDatabaseProperties.indexName];
        row[ivalue] = props.getProperty((String) row[iname]);
        row[iclass] = metaData[HsqlDatabaseProperties.indexClass];
        t.insertSys(row);
    }
    row = t.getEmptyRowData();
    row[iscope] = scope;
    row[ins] = nameSpace;
    row[iname] = "SCRIPTFORMAT";
    try {
        row[ivalue] = ScriptWriterBase.LIST_SCRIPT_FORMATS[database.logger.getScriptType()];
    } catch (Exception e) {
    }
    row[iclass] = "java.lang.String";
    t.insertSys(row);
    // write delay
    row = t.getEmptyRowData();
    row[iscope] = scope;
    row[ins] = nameSpace;
    row[iname] = "WRITE_DELAY";
    row[ivalue] = "" + database.logger.getWriteDelay();
    row[iclass] = "int";
    t.insertSys(row);
    // ignore case
    row = t.getEmptyRowData();
    row[iscope] = scope;
    row[ins] = nameSpace;
    row[iname] = "IGNORECASE";
    row[ivalue] = database.isIgnoreCase() ? "true" : "false";
    row[iclass] = "boolean";
    t.insertSys(row);
    // referential integrity
    row = t.getEmptyRowData();
    row[iscope] = scope;
    row[ins] = nameSpace;
    row[iname] = "REFERENTIAL_INTEGRITY";
    row[ivalue] = database.isReferentialIntegrity() ? "true" : "false";
    row[iclass] = "boolean";
    t.insertSys(row);
    t.setDataReadOnly(true);
    return t;
}
