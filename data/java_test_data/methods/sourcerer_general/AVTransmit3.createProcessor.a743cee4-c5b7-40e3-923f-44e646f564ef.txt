private String createProcessor() throws CannotRealizeException {
    if (locator == null)
        return "Locator is null";
    DataSource ds;
    DataSource clone;
    try {
        ds = javax.media.Manager.createDataSource(locator);
    } catch (Exception e) {
        return "Couldn't create DataSource";
    }
    // Try to create a processor to handle the input media locator
    try {
        // processor = javax.media.Manager.createProcessor(ds);
        processor = Manager.createRealizedProcessor(new ProcessorModel(ds, FORMATS, CONTENT_DESCRIPTOR));
    } catch (NoProcessorException npe) {
        return "Couldn't create processor";
    } catch (IOException ioe) {
        return "IOException creating processor";
    }
    // Wait for it to configure
    boolean result = waitForState(processor, Processor.Configured);
    if (result == false)
        return "Couldn't configure processor";
    // Get the tracks from the processor
    TrackControl[] tracks = processor.getTrackControls();
    // Do we have atleast one track?
    if (tracks == null || tracks.length < 1)
        return "Couldn't find tracks in processor";
    // Set the output content descriptor to RAW_RTP
    // This will limit the supported formats reported from
    // Track.getSupportedFormats to only valid RTP formats.
    processor.setRate((float) 128);
    Format[] supported;
    Format chosen;
    boolean atLeastOneTrack = false;
    // Program the tracks.
    for (int i = 0; i < tracks.length; i++) {
        Format format = tracks[i].getFormat();
        if (tracks[i].isEnabled()) {
            supported = tracks[i].getSupportedFormats();
            if (supported.length > 0) {
                if (supported[0] instanceof VideoFormat) {
                    // For video formats, we should double check the
                    // sizes since not all formats work in all sizes.
                    chosen = checkForVideoSizes(tracks[i].getFormat(), supported[0]);
                } else
                    chosen = supported[0];
                tracks[i].setFormat(chosen);
                System.err.println("Track " + i + " is set to transmit as:");
                System.err.println("  " + chosen);
                atLeastOneTrack = true;
            } else
                tracks[i].setEnabled(false);
        } else
            tracks[i].setEnabled(false);
    }
    if (!atLeastOneTrack)
        return "Couldn't set any of the tracks to a valid RTP format";
    // Realize the processor. This will internally create a flow
    // graph and attempt to create an output datasource for JPEG/RTP
    // audio frames.
    result = waitForState(processor, Controller.Realized);
    if (result == false)
        return "Couldn't realize processor";
    // Set the JPEG quality to .5.
    setJPEGQuality(processor, 0.5f);
    // Get the output data source of the processor
    dataOutput = processor.getDataOutput();
    return null;
}
