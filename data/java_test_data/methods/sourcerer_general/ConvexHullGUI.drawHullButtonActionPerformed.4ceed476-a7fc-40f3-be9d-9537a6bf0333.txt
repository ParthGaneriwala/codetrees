// GEN-LAST:event_clearButtonActionPerformed
private void drawHullButtonActionPerformed(java.awt.event.ActionEvent evt) {
    if (lista.size() < 2) {
        return;
    }
    Graphics g = canvas.getGraphics();
    g.setColor(Color.black);
    // Luo taulukko.
    Point2f[] table = new Point2f[lista.size()];
    table = lista.toArray(table);
    // Valitse peitteen hakualgoritmi.
    int idx = jComboBox1.getSelectedIndex();
    ConvexHullFunction f = null;
    if (idx == 0) {
        System.out.println("Jarvis");
        f = new JarvisMarch();
    } else if (idx == 1) {
        System.out.println("Graham");
        f = new GrahamScan();
    } else {
        throw new AssertionError("Väärä indeksi");
    }
    System.out.println("Input size: " + table.length);
    long start = System.currentTimeMillis();
    Stack<Point2f> pino = f.getConvexHull(table);
    long end = System.currentTimeMillis();
    System.out.println("Operation time (ms): " + (end - start));
    System.out.println("Output size: " + pino.size());
    Converter c = new Converter(canvas.getWidth(), canvas.getHeight(), 10, 10);
    g.setColor(Color.red);
    Point2f prev = c.from(pino.pop());
    Point2f first = prev;
    // Piirretäänkö viivat?
    boolean lines = false;
    Object[] s = jCheckBoxMenuItem1.getSelectedObjects();
    if (s != null) {
        System.out.println("Option on: " + s[0]);
        lines = true;
    }
    // Piirrä pisteet ja mahdollisesti viivat.
    while (!pino.empty()) {
        Point2f next = c.from(pino.pop());
        g.drawOval((int) prev.getX() - 4, (int) prev.getY() - 4, 8, 8);
        if (lines)
            g.drawLine((int) prev.getX(), (int) prev.getY(), (int) next.getX(), (int) next.getY());
        prev = next;
    }
}
