private SvgNode createChiseledFilter() {
    SvgFilter filter = new SvgFilter().setId("chiseled").setX(0).setY(0).setWidth(520).setHeight(75).setFilterUnits(FilterCoordinateSystem.userSpaceOnUse);
    SvgFeMerge merge = filter.addFeMerge().setResult("textureAndGraphic");
    merge.addFeMergeNode();
    merge.addFeMergeNode().setIn(FeInput.SourceGraphic);
    filter.addFeImage().setXlinkHref("").setResult("texture");
    filter.addFeColorMatrix().setType(ColorMatrixType.luminanceToAlpha).setIn(new FeInput("texture")).setResult("textureMap");
    filter.addFeGaussianBlur().setIn(FeInput.SourceAlpha).setStdDeviation(6).setResult("blur");
    SvgFeSpotLight feSpotLight = new SvgFeSpotLight().setX(50).setY(50).setZ(200).setPointsAtX(150).setPointsAtY(150).setPointsAtZ(10).setSpecularExponent(8);
    filter.addFeDiffuseLighting().setIn(new FeInput("textureMap")).setSurfaceScale(2).setLightingColor(HTMLColor.LIGHT_STEEL_BLUE).setDiffuseConstant(1).setResult("backgroundDiff").setLightSource(feSpotLight);
    SvgFeDistantLight feDistantLight = new SvgFeDistantLight().setAzimuth(-135).setElevation(40);
    filter.addFeDiffuseLighting().setIn(new FeInput("blur")).setSurfaceScale(6).setLightingColor(HTMLColor.WHITE).setDiffuseConstant(1.2f).setResult("foregroundDiffAll").setLightSource(feDistantLight);
    SvgFeComponentTransfer componentTransfer = filter.addFeComponentTransfer();
    componentTransfer.addFeFuncR().setType(ComponentTransferType.gamma).setAmplitude(1).setExponent(3).setOffset(0);
    componentTransfer.addFeFuncG().setType(ComponentTransferType.gamma).setAmplitude(1).setExponent(3).setOffset(0);
    componentTransfer.addFeFuncB().setType(ComponentTransferType.gamma).setAmplitude(1).setExponent(3).setOffset(0);
    filter.addFeComposite().setIn2(FeInput.SourceAlpha).setOperator(CompositingOperatorType.in);
    filter.addFeConvolveMatrix().setOrder(3).setKernelMatrix("0.0625 0.0625 0.0625\n" + "0.0625 0.5    0.0625\n" + "0.0625 0.0625 0.0625").setResult("foregroundDiff");
    merge = filter.addFeMerge().setResult("diff");
    merge.addFeMergeNode().setIn(new FeInput("backgroundDiff"));
    merge.addFeMergeNode().setIn(new FeInput("foregroundDiff"));
    filter.addFeColorMatrix().setType(ColorMatrixType.luminanceToAlpha).setIn(new FeInput("diff")).setResult("screenMask");
    componentTransfer = filter.addFeComponentTransfer().setResult("multiplyMask");
    componentTransfer.addFeFuncA().setType(ComponentTransferType.linear).setSlope(-1).setIntercept(1);
    filter.addFeBlend().setMode(ImageBlendingMode.screen).setIn2(new FeInput("textureAndGraphic")).setIn(new FeInput("diff")).setResult("screen");
    filter.addFeBlend().setMode(ImageBlendingMode.multiply).setIn2(new FeInput("textureAndGraphic")).setIn(new FeInput("diff")).setResult("multiply");
    filter.addFeComposite().setOperator(CompositingOperatorType.in).setIn(new FeInput("screen")).setIn2(new FeInput("screenMask")).setResult("maskedScreen");
    filter.addFeComposite().setOperator(CompositingOperatorType.in).setIn(new FeInput("multiply")).setIn2(new FeInput("multiplyMask")).setResult("maskedMultiply");
    filter.addFeComposite().setOperator(CompositingOperatorType.arithmetic).setIn(new FeInput("maskedScreen")).setIn2(new FeInput("maskedMultiply")).setK1(0).setK2(1).setK3(1).setK4(0).setResult("background");
    // Shadow
    filter.addFeMorphology().setOperator(MorphologyOperator.dilate).setIn(FeInput.SourceAlpha).setRadius(4);
    filter.addFeGaussianBlur().setStdDeviation(4).setResult("blur");
    filter.addFeOffset().setDx(12).setDy(12).setResult("offsetBlur");
    filter.addFeComposite().setIn2(FeInput.SourceAlpha).setOperator(CompositingOperatorType.out).setResult("shadow");
    merge = filter.addFeMerge();
    merge.addFeMergeNode().setIn(new FeInput("background"));
    merge.addFeMergeNode().setIn(new FeInput("shadow"));
    return filter;
}
