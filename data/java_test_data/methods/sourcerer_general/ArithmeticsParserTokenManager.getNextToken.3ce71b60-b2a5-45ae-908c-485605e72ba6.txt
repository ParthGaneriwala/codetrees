public static Token getNextToken() {
    Token matchedToken;
    int curPos = 0;
    EOFLoop: for (; ; ) {
        try {
            curChar = SimpleCharStream.BeginToken();
        } catch (java.io.IOException e) {
            jjmatchedKind = 0;
            matchedToken = jjFillToken();
            return matchedToken;
        }
        try {
            SimpleCharStream.backup(0);
            while (curChar <= 13 && (0x2600L & (1L << curChar)) != 0L) curChar = SimpleCharStream.BeginToken();
        } catch (java.io.IOException e1) {
            continue EOFLoop;
        }
        jjmatchedKind = 0x7fffffff;
        jjmatchedPos = 0;
        curPos = jjMoveStringLiteralDfa0_0();
        if (jjmatchedKind != 0x7fffffff) {
            if (jjmatchedPos + 1 < curPos)
                SimpleCharStream.backup(curPos - jjmatchedPos - 1);
            if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
                matchedToken = jjFillToken();
                return matchedToken;
            } else {
                continue EOFLoop;
            }
        }
        int error_line = SimpleCharStream.getEndLine();
        int error_column = SimpleCharStream.getEndColumn();
        String error_after = null;
        boolean EOFSeen = false;
        try {
            SimpleCharStream.readChar();
            SimpleCharStream.backup(1);
        } catch (java.io.IOException e1) {
            EOFSeen = true;
            error_after = curPos <= 1 ? "" : SimpleCharStream.GetImage();
            if (curChar == '\n' || curChar == '\r') {
                error_line++;
                error_column = 0;
            } else
                error_column++;
        }
        if (!EOFSeen) {
            SimpleCharStream.backup(1);
            error_after = curPos <= 1 ? "" : SimpleCharStream.GetImage();
        }
        throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
    }
}
