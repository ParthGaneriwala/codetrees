public boolean process(Request req, ResponseGroup rg) throws ItemPersistenceException, StaleDataException, InvalidOperationException {
    if (!checkRequest(req)) {
        throw new InvalidOperationException("Invalid update operation.");
    }
    UpdateRequest r = (UpdateRequest) req;
    Model m = DaoUtil.getModelDao().getById(r.getModelId(), true);
    if (m == null) {
        throw new InvalidOperationException("Invalid model ID: " + r.getModelId());
    }
    List<Entity2> list1 = new ArrayList<Entity2>();
    for (Entity f : m.getEntities()) {
        Entity2 f2 = new Entity2();
        f.transfer(f2);
        list1.add(f2);
    }
    // Return all binary relationships
    List<BinRelation2> list2 = new ArrayList<BinRelation2>();
    for (Relation rel : m.getRelations()) {
        if (rel instanceof BinRelation) {
            BinRelation2 r2 = new BinRelation2();
            ((BinRelation) rel).transfer(r2);
            list2.add(r2);
        }
    }
    List<EntityType2> list3 = new ArrayList<EntityType2>();
    for (EntityType et : m.getEntityTypes()) {
        EntityType2 et2 = new EntityType2();
        et.transfer(et2);
        list3.add(et2);
    }
    List<BinRelationType2> list4 = new ArrayList<BinRelationType2>();
    for (RelationType rt : m.getRelationTypes()) {
        if (rt instanceof BinRelationType) {
            BinRelationType2 rt2 = new BinRelationType2();
            ((BinRelationType) rt).transfer(rt2);
            list4.add(rt2);
        }
    }
    UpdateResponse response = new UpdateResponse(r);
    response.setEntities(list1);
    response.setBinaries(list2);
    response.setEntypes(list3);
    response.setBintypes(list4);
    response.setName(Resources.RSP_SUCCESS);
    rg.setBack(response);
    return true;
}
