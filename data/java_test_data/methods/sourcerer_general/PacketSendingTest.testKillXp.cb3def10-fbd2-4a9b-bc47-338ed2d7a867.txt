@Test
@DirtiesContext
public void testKillXp() throws Exception {
    configureMinimalGame();
    System.out.println("****** testKillXp ******");
    beginHttpSession();
    beginHttpRequestAndOpenSessionInViewFilter();
    // Create target
    movableService.sendTutorialProgress(TutorialConfig.TYPE.TUTORIAL, "", "", 0, 0);
    Id target = getFirstSynItemId(TEST_START_BUILDER_ITEM_ID);
    sendBuildCommand(target, new Index(500, 100), TEST_FACTORY_ITEM_ID);
    waitForActionServiceDone();
    sendMoveCommand(getFirstSynItemId(TEST_START_BUILDER_ITEM_ID), new Index(100, 1000));
    waitForActionServiceDone();
    endHttpRequestAndOpenSessionInViewFilter();
    endHttpSession();
    beginHttpSession();
    beginHttpRequestAndOpenSessionInViewFilter();
    // Actor
    movableService.sendTutorialProgress(TutorialConfig.TYPE.TUTORIAL, "", "", 0, 0);
    // Connection is created here. Don't call movableService.getGameInfo() again!
    RealityInfo realityInfo = (RealityInfo) movableService.getGameInfo();
    SimpleBase simpleBase = realityInfo.getBase();
    // Attack
    sendBuildCommand(getFirstSynItemId(simpleBase, TEST_START_BUILDER_ITEM_ID), new Index(1000, 100), TEST_FACTORY_ITEM_ID);
    waitForActionServiceDone();
    sendFactoryCommand(getFirstSynItemId(simpleBase, TEST_FACTORY_ITEM_ID), TEST_ATTACK_ITEM_ID);
    waitForActionServiceDone();
    clearPackets();
    sendAttackCommand(getFirstSynItemId(simpleBase, TEST_ATTACK_ITEM_ID), target);
    waitForActionServiceDone();
    XpBalancePacket xpBalancePacket = new XpBalancePacket();
    xpBalancePacket.setXp(1);
    Thread.sleep(3000);
    assertPackagesIgnoreSyncItemInfoAndClear(xpBalancePacket);
    endHttpRequestAndOpenSessionInViewFilter();
    endHttpSession();
}
