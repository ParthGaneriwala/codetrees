@SuppressWarnings("unchecked")
private void initDataGroups() {
    // TODO ��ʼ���ڵ�ͱ�
    Schema nodeSchema = new Schema();
    Schema edgeSchema = new Schema();
    Table nodeTable;
    Table edgeTable;
    int rowNumber = -1;
    // �ڵ���Ϣ Name ISN
    nodeSchema.addColumn(NAME, String.class);
    nodeSchema.addColumn(ISN, int.class);
    // ����Ϣ SourceISN ObjectISN Name
    edgeSchema.addColumn(SRC, int.class);
    edgeSchema.addColumn(OBJ, int.class);
    edgeSchema.addColumn(NAME, String.class);
    nodeSchema.lockSchema();
    edgeSchema.lockSchema();
    nodeTable = nodeSchema.instantiate();
    edgeTable = edgeSchema.instantiate();
    HashMap<Integer, ContactOperations> allContact = DataPool.getInstance().getAllContactISNMap();
    HashMap<Integer, Integer> myISNNodeMap = new HashMap<Integer, Integer>();
    for (ContactOperations c : allContact.values()) {
        if (c.getRelationLabelList().size() > 0) {
            // SRC Node
            rowNumber = nodeTable.addRow();
            nodeTable.set(rowNumber, NAME, c.getContactName());
            nodeTable.set(rowNumber, ISN, c.getISN());
            myISNNodeMap.put(c.getISN(), new Integer(rowNumber));
            for (RelationLabel r : c.getRelationLabelList()) {
                // OBJ Node
                rowNumber = nodeTable.addRow();
                nodeTable.setString(rowNumber, NAME, allContact.get(r.getRelationObjectISN()).getContactName());
                nodeTable.set(rowNumber, ISN, r.getRelationObjectISN());
                myISNNodeMap.put(r.getRelationObjectISN(), new Integer(rowNumber));
                // Edge
                rowNumber = edgeTable.addRow();
                edgeTable.set(rowNumber, SRC, myISNNodeMap.get(c.getISN()));
                edgeTable.set(rowNumber, OBJ, myISNNodeMap.get(r.getRelationObjectISN()));
                edgeTable.setString(rowNumber, NAME, allContact.get(r.getRelationObjectISN()).getContactName());
            }
        }
    }
    Graph g = new Graph(nodeTable, edgeTable, false, SRC, OBJ);
    // g.putClientProperty(ISN, ISN);
    // add visual data groups
    VisualGraph vg = m_vis.addGraph(GRAPH, g);
    m_vis.setInteractive(EDGES, null, false);
    m_vis.setValue(NODES, null, VisualItem.SHAPE, new Integer(Constants.SHAPE_ELLIPSE));
    AggregateTable at = m_vis.addAggregates(AGGR);
    at.addColumn(VisualItem.POLYGON, float[].class);
    at.addColumn(EDGE_TYPE, int.class);
    at.addColumn(NAME, String.class);
    at.addColumn(ISN, int.class);
    Iterator nodes = vg.nodes();
    for (int i = 0; i < 1; ++i) {
        AggregateItem aitem = (AggregateItem) at.addItem();
        for (int j = 0; j < vg.getNodeCount(); ++j) {
            aitem.setInt(EDGE_TYPE, 2);
            aitem.addItem((VisualItem) nodes.next());
        }
    }
}
