public static BeliefFunction combineProportionalBeliefTransfer(BeliefFunction bf1, BeliefFunction bf2) {
    // System.out.println("Proportional Belief Transfer (Anand et al)");
    // System.out.println("In are " + '\n' + bf1 + " and " + '\n' + bf2);
    // Proportional Belief Transfer
    // Anand, Bell & Hughes (1996), Data & Knowl. Eng., vol. 18 pp. 212-213.
    // (1) in ABH is mass(NULL) = 0, which is already ensured by BeliefFunction
    // (2) in ABH is the average of two parts, a mr(Bij) sum and a mc(Cji) sum.
    // translating terms, mf1 is mass function m1(B) in ABH, mf2 is mass function m2(C),
    // mass function m(A) is ret, n is nonZero1, m is nonZero2.  I think all else is the same.
    BeliefFunction ret = new BeliefFunction(singletons);
    double mrBijSum = 0;
    double mcCjiSum = 0;
    String[][] nonZero1 = bf1.getNonZeroMassHypos();
    String[][] nonZero2 = bf2.getNonZeroMassHypos();
    double[] internalSumsFor_mrBij = new double[nonZero1.length];
    double[] internalSumsFor_mcCji = new double[nonZero2.length];
    // the notation of i and k is from the mr(Bij) sum.  For the other sum, substitute k for i and j for k.
    for (int i = 0; i < nonZero1.length; i++) {
        double internalSum = 0;
        for (int k = 0; k < nonZero2.length; k++) {
            String[] intersection = intersect(nonZero1[i], nonZero2[k]);
            if (!((intersection.length == 1) && (intersection[0].equalsIgnoreCase(BeliefFunction.NULL)))) {
                // non-NULL intersection
                internalSumsFor_mrBij[i] = internalSumsFor_mrBij[i] + bf2.getMass(nonZero2[k]);
                internalSumsFor_mcCji[k] = internalSumsFor_mcCji[k] + bf1.getMass(nonZero1[i]);
            }
        }
    }
    // so I won't explicitly calculate the sums here, but add it to ret.
    for (int i = 0; i < nonZero1.length; i++) {
        for (int j = 0; j < nonZero2.length; j++) {
            // for each Bi and Cj, find the intersection, and add to the intersection's mass (if it isn't NULL)
            // 1/2 * (mrBij + mcCji)
            String[] intersection = intersect(nonZero1[i], nonZero2[j]);
            if (!((intersection.length == 1) && (intersection[0].equalsIgnoreCase(BeliefFunction.NULL)))) {
                // non-NULL intersection
                double mrBij = 0;
                if (internalSumsFor_mrBij[i] == 0) {
                    // this should be the case when Bi intersect Ck is NULL for all k
                    mrBij = bf1.getMass(nonZero1[i]);
                } else {
                    mrBij = bf1.getMass(nonZero1[i]) * (bf2.getMass(nonZero2[j]) / internalSumsFor_mrBij[i]);
                }
                double mcCji = 0;
                if (internalSumsFor_mcCji[j] == 0) {
                    // again, this should be the case when Cj intersect Bk is NULL for all k
                    mcCji = bf2.getMass(nonZero2[j]);
                } else {
                    mcCji = bf2.getMass(nonZero2[j]) * (bf1.getMass(nonZero1[i]) / internalSumsFor_mcCji[j]);
                }
                // I've got my mrBij and my mcCji, so now add the appropriate amount to the appropriate mass
                ret.addMass(0.5 * (mrBij + mcCji), intersection);
            }
        // end if (!((intersection.length...
        }
    // end for (int j...
    }
    // whenever internalSumsFor_mrBij[i] == 0, mcCji == 0, and similarly internalSumsFor_mcCji[i] == 0 ==> mrBij == 0
    for (int i = 0; i < internalSumsFor_mrBij.length; i++) {
        if (internalSumsFor_mrBij[i] == 0) {
            ret.addMass(0.5 * bf1.getMass(nonZero1[i]), nonZero1[i]);
        }
    }
    for (int i = 0; i < internalSumsFor_mcCji.length; i++) {
        if (internalSumsFor_mcCji[i] == 0) {
            ret.addMass(0.5 * bf2.getMass(nonZero2[i]), nonZero2[i]);
        }
    }
    ret.hackAroundPrecisionError();
    return ret;
}
