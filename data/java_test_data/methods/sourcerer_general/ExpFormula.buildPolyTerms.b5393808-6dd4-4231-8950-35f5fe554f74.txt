private void buildPolyTerms(ExpTreenode tempnode, String var, ArrayList PolyTerms, final int sign) {
    if (tempnode == null)
        return;
    if (tempnode.op_str.equals("+")) {
        buildPolyTerms(tempnode.left, var, PolyTerms, sign);
        buildPolyTerms(tempnode.right, var, PolyTerms, sign);
    } else if (tempnode.op_str.equals("-")) {
        buildPolyTerms(tempnode.left, var, PolyTerms, sign);
        buildPolyTerms(tempnode.right, var, PolyTerms, -1 * sign);
    } else {
        ComplexNumber coeff = getSingleTermCoefficient(tempnode, var);
        long deg = getSingleTermDegree(tempnode, var);
        if (PolyTerms.size() == 0) {
            ArrayList entry = new ArrayList();
            entry.add(new Long(deg));
            if (sign > 0)
                entry.add(coeff);
            else
                entry.add(coeff.negate());
            PolyTerms.add(entry);
        } else {
            int pos = -1;
            for (int i = 0; i < PolyTerms.size(); i++) if (((Long) ((ArrayList) PolyTerms.get(i)).get(0)).longValue() == deg)
                pos = i;
            if (pos >= 0) {
                ComplexNumber oldval = (ComplexNumber) ((ArrayList) PolyTerms.get(pos)).get(1);
                ArrayList entry = new ArrayList();
                entry.add(new Long(deg));
                if (sign > 0)
                    entry.add(oldval.add(coeff));
                else
                    entry.add(oldval.subtract(coeff));
                PolyTerms.set(pos, entry);
            } else {
                ArrayList entry = new ArrayList();
                entry.add(new Long(deg));
                if (sign > 0)
                    entry.add(coeff);
                else
                    entry.add(coeff.negate());
                PolyTerms.add(entry);
            }
        }
    }
}
