private Object[] getViewChildren(View view, Object parentElement) {
    switch(GclacsVisualIDRegistry.getVisualID(view)) {
        case Document_RootEditPart.VISUAL_ID:
            {
                Collection result = new ArrayList();
                GclacsNavigatorGroup links = new GclacsNavigatorGroup(Messages.NavigatorGroupName_Document_Root_79_links, "icons/linksNavigatorGroup.gif", // $NON-NLS-1$
                parentElement);
                Collection connectedViews = getChildrenByType(Collections.singleton(view), ComponentInstanceEditPart.VISUAL_ID);
                result.addAll(createNavigatorItems(connectedViews, parentElement, false));
                connectedViews = getDiagramLinksByType(Collections.singleton(view), DefineByInterfaceEditPart.VISUAL_ID);
                links.addChildren(createNavigatorItems(connectedViews, links, false));
                connectedViews = getDiagramLinksByType(Collections.singleton(view), BindingEditPart.VISUAL_ID);
                links.addChildren(createNavigatorItems(connectedViews, links, false));
                if (!links.isEmpty()) {
                    result.add(links);
                }
                return result.toArray();
            }
        case ComponentInstanceEditPart.VISUAL_ID:
            {
                Collection result = new ArrayList();
                Collection connectedViews = getChildrenByType(Collections.singleton(view), ComponentInstanceInstanceCompartimentEditPart.VISUAL_ID);
                connectedViews = getChildrenByType(connectedViews, RequiredPortEditPart.VISUAL_ID);
                result.addAll(createNavigatorItems(connectedViews, parentElement, false));
                connectedViews = getChildrenByType(Collections.singleton(view), ComponentInstanceInstanceCompartimentEditPart.VISUAL_ID);
                connectedViews = getChildrenByType(connectedViews, ServicesEditPart.VISUAL_ID);
                result.addAll(createNavigatorItems(connectedViews, parentElement, false));
                connectedViews = getChildrenByType(Collections.singleton(view), ComponentInstanceInstanceCompartimentEditPart.VISUAL_ID);
                connectedViews = getChildrenByType(connectedViews, BodyTypeEditPart.VISUAL_ID);
                result.addAll(createNavigatorItems(connectedViews, parentElement, false));
                connectedViews = getChildrenByType(Collections.singleton(view), ComponentInstanceInstanceCompartimentEditPart.VISUAL_ID);
                connectedViews = getChildrenByType(connectedViews, ComponentInstance2EditPart.VISUAL_ID);
                result.addAll(createNavigatorItems(connectedViews, parentElement, false));
                return result.toArray();
            }
        case RequiredPortEditPart.VISUAL_ID:
            {
                Collection result = new ArrayList();
                GclacsNavigatorGroup incominglinks = new GclacsNavigatorGroup(Messages.NavigatorGroupName_Interface_2001_incominglinks, "icons/incomingLinksNavigatorGroup.gif", // $NON-NLS-1$
                parentElement);
                Collection connectedViews = getChildrenByType(Collections.singleton(view), InterfaceBodyArgsCompartimentsEditPart.VISUAL_ID);
                connectedViews = getChildrenByType(connectedViews, RequiredPort2EditPart.VISUAL_ID);
                result.addAll(createNavigatorItems(connectedViews, parentElement, false));
                connectedViews = getIncomingLinksByType(Collections.singleton(view), DefineByInterfaceEditPart.VISUAL_ID);
                incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
                if (!incominglinks.isEmpty()) {
                    result.add(incominglinks);
                }
                return result.toArray();
            }
        case RequiredPort2EditPart.VISUAL_ID:
            {
                Collection result = new ArrayList();
                Collection connectedViews = getChildrenByType(Collections.singleton(view), ServicesBodyArgsCompartimentsEditPart.VISUAL_ID);
                connectedViews = getChildrenByType(connectedViews, ProvidedPortEditPart.VISUAL_ID);
                result.addAll(createNavigatorItems(connectedViews, parentElement, false));
                connectedViews = getChildrenByType(Collections.singleton(view), ServicesBodyArgsCompartimentsEditPart.VISUAL_ID);
                connectedViews = getChildrenByType(connectedViews, InterfaceEditPart.VISUAL_ID);
                result.addAll(createNavigatorItems(connectedViews, parentElement, false));
                return result.toArray();
            }
        case ServicesEditPart.VISUAL_ID:
            {
                Collection result = new ArrayList();
                Collection connectedViews = getChildrenByType(Collections.singleton(view), ComponentInstanceInstanceCompartiment2EditPart.VISUAL_ID);
                connectedViews = getChildrenByType(connectedViews, RequiredPortEditPart.VISUAL_ID);
                result.addAll(createNavigatorItems(connectedViews, parentElement, false));
                connectedViews = getChildrenByType(Collections.singleton(view), ComponentInstanceInstanceCompartiment2EditPart.VISUAL_ID);
                connectedViews = getChildrenByType(connectedViews, ServicesEditPart.VISUAL_ID);
                result.addAll(createNavigatorItems(connectedViews, parentElement, false));
                connectedViews = getChildrenByType(Collections.singleton(view), ComponentInstanceInstanceCompartiment2EditPart.VISUAL_ID);
                connectedViews = getChildrenByType(connectedViews, BodyTypeEditPart.VISUAL_ID);
                result.addAll(createNavigatorItems(connectedViews, parentElement, false));
                connectedViews = getChildrenByType(Collections.singleton(view), ComponentInstanceInstanceCompartiment2EditPart.VISUAL_ID);
                connectedViews = getChildrenByType(connectedViews, ComponentInstance2EditPart.VISUAL_ID);
                result.addAll(createNavigatorItems(connectedViews, parentElement, false));
                return result.toArray();
            }
        case BodyTypeEditPart.VISUAL_ID:
            {
                Collection result = new ArrayList();
                GclacsNavigatorGroup outgoinglinks = new GclacsNavigatorGroup(Messages.NavigatorGroupName_RequiredPort_2006_outgoinglinks, "icons/outgoingLinksNavigatorGroup.gif", // $NON-NLS-1$
                parentElement);
                GclacsNavigatorGroup incominglinks = new GclacsNavigatorGroup(Messages.NavigatorGroupName_RequiredPort_2006_incominglinks, "icons/incomingLinksNavigatorGroup.gif", // $NON-NLS-1$
                parentElement);
                Collection connectedViews = getOutgoingLinksByType(Collections.singleton(view), DefineByInterfaceEditPart.VISUAL_ID);
                outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
                connectedViews = getIncomingLinksByType(Collections.singleton(view), BindingEditPart.VISUAL_ID);
                incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
                connectedViews = getOutgoingLinksByType(Collections.singleton(view), BindingEditPart.VISUAL_ID);
                outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
                if (!outgoinglinks.isEmpty()) {
                    result.add(outgoinglinks);
                }
                if (!incominglinks.isEmpty()) {
                    result.add(incominglinks);
                }
                return result.toArray();
            }
        case ComponentInstance2EditPart.VISUAL_ID:
            {
                Collection result = new ArrayList();
                GclacsNavigatorGroup outgoinglinks = new GclacsNavigatorGroup(Messages.NavigatorGroupName_ProvidedPort_2007_outgoinglinks, "icons/outgoingLinksNavigatorGroup.gif", // $NON-NLS-1$
                parentElement);
                GclacsNavigatorGroup incominglinks = new GclacsNavigatorGroup(Messages.NavigatorGroupName_ProvidedPort_2007_incominglinks, "icons/incomingLinksNavigatorGroup.gif", // $NON-NLS-1$
                parentElement);
                Collection connectedViews = getOutgoingLinksByType(Collections.singleton(view), DefineByInterfaceEditPart.VISUAL_ID);
                outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
                connectedViews = getIncomingLinksByType(Collections.singleton(view), BindingEditPart.VISUAL_ID);
                incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
                connectedViews = getOutgoingLinksByType(Collections.singleton(view), BindingEditPart.VISUAL_ID);
                outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
                if (!outgoinglinks.isEmpty()) {
                    result.add(outgoinglinks);
                }
                if (!incominglinks.isEmpty()) {
                    result.add(incominglinks);
                }
                return result.toArray();
            }
        case DefineByInterfaceEditPart.VISUAL_ID:
            {
                Collection result = new ArrayList();
                GclacsNavigatorGroup target = new GclacsNavigatorGroup(Messages.NavigatorGroupName_DefineByInterface_3001_target, "icons/linkTargetNavigatorGroup.gif", // $NON-NLS-1$
                parentElement);
                GclacsNavigatorGroup source = new GclacsNavigatorGroup(Messages.NavigatorGroupName_DefineByInterface_3001_source, "icons/linkSourceNavigatorGroup.gif", // $NON-NLS-1$
                parentElement);
                Collection connectedViews = getLinksTargetByType(Collections.singleton(view), RequiredPortEditPart.VISUAL_ID);
                target.addChildren(createNavigatorItems(connectedViews, target, true));
                connectedViews = getLinksSourceByType(Collections.singleton(view), BodyTypeEditPart.VISUAL_ID);
                source.addChildren(createNavigatorItems(connectedViews, source, true));
                connectedViews = getLinksSourceByType(Collections.singleton(view), ComponentInstance2EditPart.VISUAL_ID);
                source.addChildren(createNavigatorItems(connectedViews, source, true));
                if (!target.isEmpty()) {
                    result.add(target);
                }
                if (!source.isEmpty()) {
                    result.add(source);
                }
                return result.toArray();
            }
        case BindingEditPart.VISUAL_ID:
            {
                Collection result = new ArrayList();
                GclacsNavigatorGroup target = new GclacsNavigatorGroup(Messages.NavigatorGroupName_Binding_3002_target, "icons/linkTargetNavigatorGroup.gif", // $NON-NLS-1$
                parentElement);
                GclacsNavigatorGroup source = new GclacsNavigatorGroup(Messages.NavigatorGroupName_Binding_3002_source, "icons/linkSourceNavigatorGroup.gif", // $NON-NLS-1$
                parentElement);
                Collection connectedViews = getLinksTargetByType(Collections.singleton(view), BodyTypeEditPart.VISUAL_ID);
                target.addChildren(createNavigatorItems(connectedViews, target, true));
                connectedViews = getLinksTargetByType(Collections.singleton(view), ComponentInstance2EditPart.VISUAL_ID);
                target.addChildren(createNavigatorItems(connectedViews, target, true));
                connectedViews = getLinksSourceByType(Collections.singleton(view), BodyTypeEditPart.VISUAL_ID);
                source.addChildren(createNavigatorItems(connectedViews, source, true));
                connectedViews = getLinksSourceByType(Collections.singleton(view), ComponentInstance2EditPart.VISUAL_ID);
                source.addChildren(createNavigatorItems(connectedViews, source, true));
                if (!target.isEmpty()) {
                    result.add(target);
                }
                if (!source.isEmpty()) {
                    result.add(source);
                }
                return result.toArray();
            }
    }
    return EMPTY_ARRAY;
}
