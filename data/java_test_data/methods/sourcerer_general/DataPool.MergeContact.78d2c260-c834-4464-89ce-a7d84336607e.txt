public void MergeContact(String srtISN, PersonalContact currentContact) {
    currentContact = new PersonalContact();
    // ����һϵ�е�ISN��������н���
    String[] tempStr = srtISN.split(",");
    int size = tempStr.length - 1;
    int[] ISNList = new int[size];
    for (int i = 0; i < size; i++) {
        ISNList[i] = Integer.parseInt(tempStr[i + 1]);
    }
    String contactName = new String();
    String contactBirthday = new String();
    HashSet<String> telephone = new HashSet<String>();
    HashSet<String> email = new HashSet<String>();
    HashSet<String> address = new HashSet<String>();
    HashSet<String> office = new HashSet<String>();
    HashSet<String> imContact = new HashSet<String>();
    HashSet<String> url = new HashSet<String>();
    HashSet<String> commonLabel = new HashSet<String>();
    HashSet<String> group = new HashSet<String>();
    HashSet<RelationLabel> relationlabel = new HashSet<RelationLabel>();
    // �����ʼ���㣬������
    for (int i = size - 1; i >= 0; i--) {
        PersonalContact tempContact = (PersonalContact) this.getAllContactISNMap().get(ISNList[i]);
        if (!tempContact.getContactName().isEmpty()) {
            contactName = tempContact.getContactName();
        } else if (!tempContact.getContactBirthday().isEmpty()) {
            contactBirthday = tempContact.getContactBirthday();
        } else if (!tempContact.getPhoneNumberList().isEmpty()) {
            telephone.addAll(tempContact.getPhoneNumberList());
        } else if (!tempContact.getEmailAddresseList().isEmpty()) {
            email.addAll(tempContact.getEmailAddresseList());
        } else if (!tempContact.getContactAddressList().isEmpty()) {
            address.addAll(tempContact.getContactAddressList());
        } else if (!tempContact.getWorkingDepartmentList().isEmpty()) {
            office.addAll(tempContact.getWorkingDepartmentList());
        } else if (!tempContact.getImContactInformationList().isEmpty()) {
            imContact.addAll(tempContact.getImContactInformationList());
        } else if (!tempContact.getUrlList().isEmpty()) {
            url.addAll(tempContact.getUrlList());
        } else if (!tempContact.getCommonLabelList().isEmpty()) {
            commonLabel.addAll(tempContact.getCommonLabelList());
        } else if (!tempContact.getGroupList().isEmpty()) {
            group.addAll(tempContact.getGroupList());
        } else if (!tempContact.getRelationLabelList().isEmpty()) {
            relationlabel.addAll(tempContact.getRelationLabelList());
        }
    }
    currentContact.setContactName(contactName);
    currentContact.setContactBirthday(contactBirthday);
    currentContact.getPhoneNumberList().addAll(telephone);
    currentContact.getEmailAddresseList().addAll(email);
    currentContact.getContactAddressList().addAll(address);
    currentContact.getWorkingDepartmentList().addAll(office);
    currentContact.getImContactInformationList().addAll(imContact);
    currentContact.getUrlList().addAll(url);
    currentContact.getCommonLabelList().addAll(commonLabel);
    currentContact.getGroupList().addAll(group);
    currentContact.getRelationLabelList().addAll(relationlabel);
    currentContact.setISN(ISNList[0]);
    for (int i = 0; i < size; i++) {
        this.deleteContact(ISNList[i]);
    }
    this.editContact(currentContact);
// Ӧ�ò���Ҫ�������������˰ɣ���Ӧ�ĺ������Ѿ�������
}
