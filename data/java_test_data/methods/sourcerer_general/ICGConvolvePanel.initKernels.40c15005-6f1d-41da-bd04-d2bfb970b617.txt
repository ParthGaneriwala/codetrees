private void initKernels() {
    kernels = new KernelJAI[kernelLabels.length];
    float[] normalData = { 1.0F };
    float[] blurData = { 0.0F, 1.0F / 8.0F, 0.0F, 1.0F / 8.0F, 4.0F / 8.0F, 1.0F / 8.0F, 0.0F, 1.0F / 8.0F, 0.0F };
    float[] blurMoreData = { 1.0F / 14.0F, 2.0F / 14.0F, 1.0F / 14.0F, 2.0F / 14.0F, 2.0F / 14.0F, 2.0F / 14.0F, 1.0F / 14.0F, 2.0F / 14.0F, 1.0F / 14.0F };
    float[] sharpenData = { 0.0F, -1.0F / 4.0F, 0.0F, -1.0F / 4.0F, 8.0F / 4.0F, -1.0F / 4.0F, 0.0F, -1.0F / 4.0F, 0.0F };
    float[] sharpenMoreData = { -1.0F / 4.0F, -1.0F / 4.0F, -1.0F / 4.0F, -1.0F / 4.0F, 12.0F / 4.0F, -1.0F / 4.0F, -1.0F / 4.0F, -1.0F / 4.0F, -1.0F / 4.0F };
    float[] edgeData = { 0.0F, -1.0F, 0.0F, -1.0F, 4.0F, -1.0F, 0.0F, -1.0F, 0.0F };
    float[] embossData = { -5.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 5.0F };
    kernels[0] = new KernelJAI(1, 1, 0, 0, normalData);
    kernels[1] = new KernelJAI(3, 3, 1, 1, blurData);
    kernels[2] = new KernelJAI(3, 3, 1, 1, blurMoreData);
    kernels[3] = new KernelJAI(3, 3, 1, 1, sharpenData);
    kernels[4] = new KernelJAI(3, 3, 1, 1, sharpenMoreData);
    kernels[5] = new KernelJAI(3, 3, 1, 1, edgeData);
    kernels[6] = new KernelJAI(3, 3, 1, 1, embossData);
    kernels[7] = makeGaussianKernel(1);
    kernels[8] = makeGaussianKernel(2);
    kernels[9] = makeGaussianKernel(3);
    kernels[10] = makeGaussianKernel(4);
    kernels[11] = makeGaussianKernel(5);
    kernels[12] = makeGaussianKernel(10);
    kernels[13] = makeGaussianKernel(15);
    kernels[14] = makeGaussianKernel(20);
    kernels[15] = makeGaussianKernel(25);
    kernels[16] = makeGaussianKernel(30);
    kernels[17] = makeGaussianKernel(35);
    kernel = kernels[0];
}
