protected T doSwitch(int classifierID, EObject theEObject) {
    switch(classifierID) {
        case GenerationDynamicsPackage.BWR_STEAM_SUPPLY:
            {
                BWRSteamSupply bwrSteamSupply = (BWRSteamSupply) theEObject;
                T result = caseBWRSteamSupply(bwrSteamSupply);
                if (result == null)
                    result = caseSteamSupply(bwrSteamSupply);
                if (result == null)
                    result = casePowerSystemResource(bwrSteamSupply);
                if (result == null)
                    result = caseIdentifiedObject(bwrSteamSupply);
                if (result == null)
                    result = defaultCase(theEObject);
                return result;
            }
        case GenerationDynamicsPackage.STEAM_SUPPLY:
            {
                SteamSupply steamSupply = (SteamSupply) theEObject;
                T result = caseSteamSupply(steamSupply);
                if (result == null)
                    result = casePowerSystemResource(steamSupply);
                if (result == null)
                    result = caseIdentifiedObject(steamSupply);
                if (result == null)
                    result = defaultCase(theEObject);
                return result;
            }
        case GenerationDynamicsPackage.CT_TEMP_ACTIVE_POWER_CURVE:
            {
                CTTempActivePowerCurve ctTempActivePowerCurve = (CTTempActivePowerCurve) theEObject;
                T result = caseCTTempActivePowerCurve(ctTempActivePowerCurve);
                if (result == null)
                    result = caseCurve(ctTempActivePowerCurve);
                if (result == null)
                    result = caseIdentifiedObject(ctTempActivePowerCurve);
                if (result == null)
                    result = defaultCase(theEObject);
                return result;
            }
        case GenerationDynamicsPackage.COMBUSTION_TURBINE:
            {
                CombustionTurbine combustionTurbine = (CombustionTurbine) theEObject;
                T result = caseCombustionTurbine(combustionTurbine);
                if (result == null)
                    result = casePrimeMover(combustionTurbine);
                if (result == null)
                    result = casePowerSystemResource(combustionTurbine);
                if (result == null)
                    result = caseIdentifiedObject(combustionTurbine);
                if (result == null)
                    result = defaultCase(theEObject);
                return result;
            }
        case GenerationDynamicsPackage.PRIME_MOVER:
            {
                PrimeMover primeMover = (PrimeMover) theEObject;
                T result = casePrimeMover(primeMover);
                if (result == null)
                    result = casePowerSystemResource(primeMover);
                if (result == null)
                    result = caseIdentifiedObject(primeMover);
                if (result == null)
                    result = defaultCase(theEObject);
                return result;
            }
        case GenerationDynamicsPackage.DRUM_BOILER:
            {
                DrumBoiler drumBoiler = (DrumBoiler) theEObject;
                T result = caseDrumBoiler(drumBoiler);
                if (result == null)
                    result = caseFossilSteamSupply(drumBoiler);
                if (result == null)
                    result = caseSteamSupply(drumBoiler);
                if (result == null)
                    result = casePowerSystemResource(drumBoiler);
                if (result == null)
                    result = caseIdentifiedObject(drumBoiler);
                if (result == null)
                    result = defaultCase(theEObject);
                return result;
            }
        case GenerationDynamicsPackage.FOSSIL_STEAM_SUPPLY:
            {
                FossilSteamSupply fossilSteamSupply = (FossilSteamSupply) theEObject;
                T result = caseFossilSteamSupply(fossilSteamSupply);
                if (result == null)
                    result = caseSteamSupply(fossilSteamSupply);
                if (result == null)
                    result = casePowerSystemResource(fossilSteamSupply);
                if (result == null)
                    result = caseIdentifiedObject(fossilSteamSupply);
                if (result == null)
                    result = defaultCase(theEObject);
                return result;
            }
        case GenerationDynamicsPackage.HEAT_RECOVERY_BOILER:
            {
                HeatRecoveryBoiler heatRecoveryBoiler = (HeatRecoveryBoiler) theEObject;
                T result = caseHeatRecoveryBoiler(heatRecoveryBoiler);
                if (result == null)
                    result = caseFossilSteamSupply(heatRecoveryBoiler);
                if (result == null)
                    result = caseSteamSupply(heatRecoveryBoiler);
                if (result == null)
                    result = casePowerSystemResource(heatRecoveryBoiler);
                if (result == null)
                    result = caseIdentifiedObject(heatRecoveryBoiler);
                if (result == null)
                    result = defaultCase(theEObject);
                return result;
            }
        case GenerationDynamicsPackage.HYDRO_TURBINE:
            {
                HydroTurbine hydroTurbine = (HydroTurbine) theEObject;
                T result = caseHydroTurbine(hydroTurbine);
                if (result == null)
                    result = casePrimeMover(hydroTurbine);
                if (result == null)
                    result = casePowerSystemResource(hydroTurbine);
                if (result == null)
                    result = caseIdentifiedObject(hydroTurbine);
                if (result == null)
                    result = defaultCase(theEObject);
                return result;
            }
        case GenerationDynamicsPackage.PWR_STEAM_SUPPLY:
            {
                PWRSteamSupply pwrSteamSupply = (PWRSteamSupply) theEObject;
                T result = casePWRSteamSupply(pwrSteamSupply);
                if (result == null)
                    result = caseSteamSupply(pwrSteamSupply);
                if (result == null)
                    result = casePowerSystemResource(pwrSteamSupply);
                if (result == null)
                    result = caseIdentifiedObject(pwrSteamSupply);
                if (result == null)
                    result = defaultCase(theEObject);
                return result;
            }
        case GenerationDynamicsPackage.STEAM_TURBINE:
            {
                SteamTurbine steamTurbine = (SteamTurbine) theEObject;
                T result = caseSteamTurbine(steamTurbine);
                if (result == null)
                    result = casePrimeMover(steamTurbine);
                if (result == null)
                    result = casePowerSystemResource(steamTurbine);
                if (result == null)
                    result = caseIdentifiedObject(steamTurbine);
                if (result == null)
                    result = defaultCase(theEObject);
                return result;
            }
        case GenerationDynamicsPackage.SUBCRITICAL:
            {
                Subcritical subcritical = (Subcritical) theEObject;
                T result = caseSubcritical(subcritical);
                if (result == null)
                    result = caseFossilSteamSupply(subcritical);
                if (result == null)
                    result = caseSteamSupply(subcritical);
                if (result == null)
                    result = casePowerSystemResource(subcritical);
                if (result == null)
                    result = caseIdentifiedObject(subcritical);
                if (result == null)
                    result = defaultCase(theEObject);
                return result;
            }
        case GenerationDynamicsPackage.SUPERCRITICAL:
            {
                Supercritical supercritical = (Supercritical) theEObject;
                T result = caseSupercritical(supercritical);
                if (result == null)
                    result = caseFossilSteamSupply(supercritical);
                if (result == null)
                    result = caseSteamSupply(supercritical);
                if (result == null)
                    result = casePowerSystemResource(supercritical);
                if (result == null)
                    result = caseIdentifiedObject(supercritical);
                if (result == null)
                    result = defaultCase(theEObject);
                return result;
            }
        default:
            return defaultCase(theEObject);
    }
}
