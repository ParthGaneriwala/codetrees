// $ANTLR start "param_list"
public final MyGrammarParser.param_list_return param_list() throws RecognitionException {
    MyGrammarParser.param_list_return retval = new MyGrammarParser.param_list_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token PVG23 = null;
    MyGrammarParser.param_return param22 = null;
    MyGrammarParser.param_return param24 = null;
    CommonTree PVG23_tree = null;
    RewriteRuleTokenStream stream_PVG = new RewriteRuleTokenStream(adaptor, "token PVG");
    RewriteRuleSubtreeStream stream_param = new RewriteRuleSubtreeStream(adaptor, "rule param");
    try {
        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:156:11: ( param ( PVG param )* -> ^( PARAM_LIST ( param )+ ) )
        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:156:13: param ( PVG param )*
        {
            pushFollow(FOLLOW_param_in_param_list1028);
            param22 = param();
            state._fsp--;
            stream_param.add(param22.getTree());
            // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:156:19: ( PVG param )*
            loop6: do {
                int alt6 = 2;
                int LA6_0 = input.LA(1);
                if ((LA6_0 == PVG)) {
                    alt6 = 1;
                }
                switch(alt6) {
                    case 1:
                        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:156:20: PVG param
                        {
                            PVG23 = (Token) match(input, PVG, FOLLOW_PVG_in_param_list1031);
                            stream_PVG.add(PVG23);
                            pushFollow(FOLLOW_param_in_param_list1033);
                            param24 = param();
                            state._fsp--;
                            stream_param.add(param24.getTree());
                        }
                        break;
                    default:
                        break loop6;
                }
            } while (true);
            // AST REWRITE
            // elements: param
            // token labels:
            // rule labels: retval
            // token list labels:
            // rule list labels:
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", retval != null ? retval.tree : null);
            root_0 = (CommonTree) adaptor.nil();
            // 156:32: -> ^( PARAM_LIST ( param )+ )
            {
                // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:156:35: ^( PARAM_LIST ( param )+ )
                {
                    CommonTree root_1 = (CommonTree) adaptor.nil();
                    root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(PARAM_LIST, "PARAM_LIST"), root_1);
                    if (!(stream_param.hasNext())) {
                        throw new RewriteEarlyExitException();
                    }
                    while (stream_param.hasNext()) {
                        adaptor.addChild(root_1, stream_param.nextTree());
                    }
                    stream_param.reset();
                    adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
