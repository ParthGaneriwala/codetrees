protected final java.sql.Date getDateFast(int columnIndex, byte[] dateAsBytes, int offset, int length, MySQLConnection conn, ResultSetImpl rs, Calendar targetCalendar) throws SQLException {
    int year = 0;
    int month = 0;
    int day = 0;
    try {
        if (dateAsBytes == null) {
            return null;
        }
        boolean allZeroDate = true;
        boolean onlyTimePresent = false;
        for (int i = 0; i < length; i++) {
            if (dateAsBytes[offset + i] == ':') {
                onlyTimePresent = true;
                break;
            }
        }
        for (int i = 0; i < length; i++) {
            byte b = dateAsBytes[offset + i];
            if (b == ' ' || b == '-' || b == '/') {
                onlyTimePresent = false;
            }
            if (b != '0' && b != ' ' && b != ':' && b != '-' && b != '/' && b != '.') {
                allZeroDate = false;
                break;
            }
        }
        if (!onlyTimePresent && allZeroDate) {
            if (ConnectionPropertiesImpl.ZERO_DATETIME_BEHAVIOR_CONVERT_TO_NULL.equals(conn.getZeroDateTimeBehavior())) {
                return null;
            } else if (ConnectionPropertiesImpl.ZERO_DATETIME_BEHAVIOR_EXCEPTION.equals(conn.getZeroDateTimeBehavior())) {
                throw SQLError.createSQLException("Value '" + new String(dateAsBytes) + "' can not be represented as java.sql.Date", SQLError.SQL_STATE_ILLEGAL_ARGUMENT, this.exceptionInterceptor);
            }
            // represent, which is '0001-01-01'.
            return rs.fastDateCreate(targetCalendar, 1, 1, 1);
        } else if (this.metadata[columnIndex].getMysqlType() == MysqlDefs.FIELD_TYPE_TIMESTAMP) {
            // Convert from TIMESTAMP
            switch(length) {
                case 29:
                case 21:
                case 19:
                    {
                        // java.sql.Timestamp format
                        year = StringUtils.getInt(dateAsBytes, offset + 0, offset + 4);
                        month = StringUtils.getInt(dateAsBytes, offset + 5, offset + 7);
                        day = StringUtils.getInt(dateAsBytes, offset + 8, offset + 10);
                        return rs.fastDateCreate(targetCalendar, year, month, day);
                    }
                case 14:
                case 8:
                    {
                        year = StringUtils.getInt(dateAsBytes, offset + 0, offset + 4);
                        month = StringUtils.getInt(dateAsBytes, offset + 4, offset + 6);
                        day = StringUtils.getInt(dateAsBytes, offset + 6, offset + 8);
                        return rs.fastDateCreate(targetCalendar, year, month, day);
                    }
                case 12:
                case 10:
                case 6:
                    {
                        year = StringUtils.getInt(dateAsBytes, offset + 0, offset + 2);
                        if (year <= 69) {
                            year = year + 100;
                        }
                        month = StringUtils.getInt(dateAsBytes, offset + 2, offset + 4);
                        day = StringUtils.getInt(dateAsBytes, offset + 4, offset + 6);
                        return rs.fastDateCreate(targetCalendar, year + 1900, month, day);
                    }
                case 4:
                    {
                        year = StringUtils.getInt(dateAsBytes, offset + 0, offset + 4);
                        if (year <= 69) {
                            year = year + 100;
                        }
                        month = StringUtils.getInt(dateAsBytes, offset + 2, offset + 4);
                        return rs.fastDateCreate(targetCalendar, year + 1900, month, 1);
                    }
                case 2:
                    {
                        year = StringUtils.getInt(dateAsBytes, offset + 0, offset + 2);
                        if (year <= 69) {
                            year = year + 100;
                        }
                        return rs.fastDateCreate(targetCalendar, year + 1900, 1, 1);
                    }
                default:
                    throw SQLError.createSQLException(Messages.getString("ResultSet.Bad_format_for_Date", new Object[] { new String(dateAsBytes), Constants.integerValueOf(columnIndex + 1) }), SQLError.SQL_STATE_ILLEGAL_ARGUMENT, // $NON-NLS-1$
                    this.exceptionInterceptor);
            }
        /* endswitch */
        } else if (this.metadata[columnIndex].getMysqlType() == MysqlDefs.FIELD_TYPE_YEAR) {
            if (length == 2 || length == 1) {
                year = StringUtils.getInt(dateAsBytes, offset, offset + length);
                if (year <= 69) {
                    year = year + 100;
                }
                year += 1900;
            } else {
                year = StringUtils.getInt(dateAsBytes, offset + 0, offset + 4);
            }
            return rs.fastDateCreate(targetCalendar, year, 1, 1);
        } else if (this.metadata[columnIndex].getMysqlType() == MysqlDefs.FIELD_TYPE_TIME) {
            // Return EPOCH
            return rs.fastDateCreate(targetCalendar, 1970, 1, 1);
        } else {
            if (length < 10) {
                if (length == 8) {
                    // Return
                    return rs.fastDateCreate(targetCalendar, 1970, 1, 1);
                // EPOCH for
                // TIME
                }
                throw SQLError.createSQLException(Messages.getString("ResultSet.Bad_format_for_Date", new Object[] { new String(dateAsBytes), Constants.integerValueOf(columnIndex + 1) }), SQLError.SQL_STATE_ILLEGAL_ARGUMENT, // $NON-NLS-1$
                this.exceptionInterceptor);
            }
            if (length != 18) {
                year = StringUtils.getInt(dateAsBytes, offset + 0, offset + 4);
                month = StringUtils.getInt(dateAsBytes, offset + 5, offset + 7);
                day = StringUtils.getInt(dateAsBytes, offset + 8, offset + 10);
            } else {
                // JDK-1.3 timestamp format, not real easy to parse
                // positionally :p
                StringTokenizer st = new StringTokenizer(new String(dateAsBytes, offset, length, "ISO8859_1"), "- ");
                year = Integer.parseInt(st.nextToken());
                month = Integer.parseInt(st.nextToken());
                day = Integer.parseInt(st.nextToken());
            }
        }
        return rs.fastDateCreate(targetCalendar, year, month, day);
    } catch (SQLException sqlEx) {
        // don't re-wrap
        throw sqlEx;
    } catch (Exception e) {
        SQLException sqlEx = SQLError.createSQLException(Messages.getString("ResultSet.Bad_format_for_Date", new Object[] { new String(dateAsBytes), Constants.integerValueOf(columnIndex + 1) }), SQLError.SQL_STATE_ILLEGAL_ARGUMENT, // $NON-NLS-1$
        this.exceptionInterceptor);
        sqlEx.initCause(e);
        throw sqlEx;
    }
}
