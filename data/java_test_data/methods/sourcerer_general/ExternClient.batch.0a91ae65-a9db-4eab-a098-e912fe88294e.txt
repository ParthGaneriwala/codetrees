public String batch(String cmdline, PrintStream out, PrintStream err) throws Exception {
    StringTokenizer st = new StringTokenizer(cmdline, " ");
    String filePath = "";
    String line = "";
    boolean stopOnError;
    InputStream in = null;
    // Ignore the command name.
    st.nextToken();
    int sleep = Integer.parseInt(st.nextToken());
    if (st.countTokens() == 1) {
        out.println("  [stopOnError = FALSE]");
        stopOnError = false;
    } else if (st.countTokens() == 2) {
        st.nextToken();
        out.println("  [stopOnError = TRUE]");
        stopOnError = true;
    } else {
        err.println("error nombre args");
        return "";
    }
    filePath = st.nextToken();
    // Test de l'existence fichier (+ acces au fichier)
    try {
        in = new FileInputStream(filePath);
        // Lecture des commandes (+ execution)
        InputStreamReader inReader = new InputStreamReader(in);
        BufferedReader br = new BufferedReader(inReader);
        while ((line = br.readLine()) != null) {
            out.println("\n  [BATCH command] -> " + line + "\n");
            try {
                if (line.contains("batch")) {
                    this.batch(line, out, err);
                } else {
                    out.println(this.shell.executeCommand(line));
                // this.wait(3000);
                }
            } catch (Exception ex) {
                if (stopOnError == true) {
                    err.println("Error and stopOnError ON : stop batch execution");
                    err.println(ex);
                    return "";
                } else {
                    err.println("Shell :" + ex);
                }
            }
        }
        br.close();
    } catch (FileNotFoundException e) {
        err.println("File \"" + filePath + "\" not found" + e);
    } catch (IOException e) {
        err.println("Error : " + e);
    }
    return "";
}
