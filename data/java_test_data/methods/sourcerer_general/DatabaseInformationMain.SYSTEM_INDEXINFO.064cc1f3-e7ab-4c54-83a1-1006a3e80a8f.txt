final Table SYSTEM_INDEXINFO() throws HsqlException {
    Table t = sysTables[SYSTEM_INDEXINFO];
    if (t == null) {
        t = createBlankTable(sysTableHsqlNames[SYSTEM_INDEXINFO]);
        // JDBC
        addColumn(t, "TABLE_CAT", Types.VARCHAR);
        addColumn(t, "TABLE_SCHEM", Types.VARCHAR);
        // NOT NULL
        addColumn(t, "TABLE_NAME", Types.VARCHAR, false);
        // NOT NULL
        addColumn(t, "NON_UNIQUE", Types.BOOLEAN, false);
        addColumn(t, "INDEX_QUALIFIER", Types.VARCHAR);
        addColumn(t, "INDEX_NAME", Types.VARCHAR);
        // NOT NULL
        addColumn(t, "TYPE", Types.SMALLINT, false);
        // NOT NULL
        addColumn(t, "ORDINAL_POSITION", Types.SMALLINT, false);
        addColumn(t, "COLUMN_NAME", Types.VARCHAR);
        addColumn(t, "ASC_OR_DESC", Types.VARCHAR, 1, true);
        addColumn(t, "CARDINALITY", Types.INTEGER);
        addColumn(t, "PAGES", Types.INTEGER);
        addColumn(t, "FILTER_CONDITION", Types.VARCHAR);
        // HSQLDB extension
        addColumn(t, "ROW_CARDINALITY", Types.INTEGER);
        // order: NON_UNIQUE, TYPE, INDEX_NAME, and ORDINAL_POSITION.
        // added for unique: INDEX_QUALIFIER, TABLE_NAME
        // false PK, as INDEX_QUALIFIER may be null
        t.createPrimaryKey(null, new int[] { 3, 6, 5, 7, 4, 2 }, false);
        return t;
    }
    // calculated column values
    String tableCatalog;
    String tableSchema;
    String tableName;
    Boolean nonUnique;
    String indexQualifier;
    String indexName;
    Integer indexType;
    // Integer ordinalPosition;
    // String  columnName;
    // String  ascOrDesc;
    Integer cardinality;
    Integer pages;
    String filterCondition;
    Integer rowCardinality;
    // Intermediate holders
    Iterator tables;
    Table table;
    int indexCount;
    int[] cols;
    int col;
    int colCount;
    Object[] row;
    DITableInfo ti;
    HsqlProperties p;
    // column number mappings
    final int itable_cat = 0;
    final int itable_schem = 1;
    final int itable_name = 2;
    final int inon_unique = 3;
    final int iindex_qualifier = 4;
    final int iindex_name = 5;
    final int itype = 6;
    final int iordinal_position = 7;
    final int icolumn_name = 8;
    final int iasc_or_desc = 9;
    final int icardinality = 10;
    final int ipages = 11;
    final int ifilter_condition = 12;
    final int irow_cardinality = 13;
    // Initialization
    ti = new DITableInfo();
    p = database.getProperties();
    tables = p.isPropertyTrue("hsqldb.system_table_indexinfo") ? allTables() : database.schemaManager.allTablesIterator();
    // Do it.
    while (tables.hasNext()) {
        table = (Table) tables.next();
        if (table.isView() || !isAccessibleTable(table)) {
            continue;
        }
        ti.setTable(table);
        tableCatalog = ns.getCatalogName(table);
        tableSchema = table.getSchemaName();
        tableName = ti.getName();
        // not supported yet
        filterCondition = null;
        // different cat for index not supported yet
        indexQualifier = tableCatalog;
        indexCount = table.getIndexCount();
        // process all of the visible indices for this table
        for (int i = 0; i < indexCount; i++) {
            colCount = ti.getIndexVisibleColumns(i);
            if (colCount < 1) {
                continue;
            }
            indexName = ti.getIndexName(i);
            nonUnique = ti.isIndexNonUnique(i);
            cardinality = ti.getIndexCardinality(i);
            pages = ValuePool.getInt(0);
            rowCardinality = ti.getIndexRowCardinality(i);
            cols = ti.getIndexColumns(i);
            indexType = ti.getIndexType(i);
            for (int k = 0; k < colCount; k++) {
                col = cols[k];
                row = t.getEmptyRowData();
                row[itable_cat] = tableCatalog;
                row[itable_schem] = tableSchema;
                row[itable_name] = tableName;
                row[inon_unique] = nonUnique;
                row[iindex_qualifier] = indexQualifier;
                row[iindex_name] = indexName;
                row[itype] = indexType;
                row[iordinal_position] = ValuePool.getInt(k + 1);
                row[icolumn_name] = ti.getColName(col);
                row[iasc_or_desc] = ti.getIndexColDirection(i, col);
                row[icardinality] = cardinality;
                row[ipages] = pages;
                row[irow_cardinality] = rowCardinality;
                row[ifilter_condition] = filterCondition;
                t.insertSys(row);
            }
        }
    }
    t.setDataReadOnly(true);
    return t;
}
