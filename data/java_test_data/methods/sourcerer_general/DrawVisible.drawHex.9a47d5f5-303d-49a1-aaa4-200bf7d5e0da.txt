public void drawHex(Graphics graphics, Vector<ViewCell> mapObjects) {
    // Draws the Army and Bases (2th layer)
    Graphics2D canvas = (Graphics2D) graphics;
    // determines size of the tile.
    int tileSize = (int) (MAX_TILE_SIZE / zoomFactor);
    int x = tileSize;
    int y = tileSize;
    int initX = x;
    // image transforming statements
    AffineTransform normal = AffineTransform.getScaleInstance(1 / zoomFactor, 1 / zoomFactor);
    BufferedImageOp normalBuffer = new AffineTransformOp(normal, AffineTransformOp.TYPE_BILINEAR);
    AffineTransform quarter = AffineTransform.getScaleInstance(0.5 / zoomFactor, 0.5 / zoomFactor);
    BufferedImageOp quarterBuffer = new AffineTransformOp(quarter, AffineTransformOp.TYPE_BILINEAR);
    for (int i = 0; i < mapObjects.size(); ++i) {
        Vector<ViewObject> objects = mapObjects.get(i).getObjects();
        if (objects != null) {
            // must change this for HEX coordinates
            x = 3 * tileSize * (mapObjects.get(i).getX()) / 4 + tileSize;
            if (mapObjects.get(i).getX() % 2 == 1)
                y = (mapObjects.get(i).getY()) * tileSize + tileSize / 2;
            else
                y = (mapObjects.get(i).getY() + 1) * tileSize;
            for (int v = 0; v < objects.size(); ++v) {
                BufferedImage unitPic = null;
                ViewObject viewO = objects.get(v);
                if (viewO.getObjectType() == ViewObjectType.BASE) {
                    ViewBase it = (ViewBase) viewO;
                    if (it.getBaseType() == BaseType.DORM) {
                        unitPic = ImageDatabase.getSprite("DORM");
                        canvas.drawImage(unitPic, null, x, y);
                    } else if (it.getBaseType() == BaseType.APARTMENT) {
                        unitPic = ImageDatabase.getSprite("APARTMENT");
                        canvas.drawImage(unitPic, null, x, y);
                    }
                }
                if (viewO.getObjectType() == ViewObjectType.ARMYEFFECTOR) {
                    ViewArmyEffector it = (ViewArmyEffector) viewO;
                    if (it.getArmyEffectorType() == ArmyEffectorType.HEALEFFECT) {
                        unitPic = ImageDatabase.getSprite("HEAL");
                        canvas.drawImage(unitPic, null, x, y);
                    } else if (it.getArmyEffectorType() == ArmyEffectorType.DAMAGEEFFECT) {
                        unitPic = ImageDatabase.getSprite("DAMAGE");
                        canvas.drawImage(unitPic, null, x, y);
                    } else if (it.getArmyEffectorType() == ArmyEffectorType.INSTANTDEATH) {
                        unitPic = ImageDatabase.getSprite("DEATH");
                        canvas.drawImage(unitPic, null, x, y);
                    }
                }
                if (viewO.getObjectType() == ViewObjectType.OBSTACLE) {
                    ViewObstacle it = (ViewObstacle) viewO;
                    if (it.getObstacleType() == ObstacleType.ROCK) {
                        unitPic = ImageDatabase.getSprite("ROCK");
                        canvas.drawImage(unitPic, null, x, y);
                    }
                }
                if (viewO.getObjectType() == ViewObjectType.ITEM) {
                    ViewItem it = (ViewItem) viewO;
                    if (it.getArmyEffectorType() == ItemType.PIZZA) {
                        unitPic = ImageDatabase.getSprite("PIZZA");
                        canvas.drawImage(unitPic, null, x, y);
                    }
                } else if (viewO.getObjectType() == ViewObjectType.BASEGROUP) {
                // unitPic = (Visual representation for BASE);
                } else if (viewO.getObjectType() == ViewObjectType.ARMY) {
                    ViewArmy armies = (ViewArmy) viewO;
                    Vector<ViewUnit> vu = armies.getUnits();
                    int id = armies.getPlayerID();
                    for (int z = 0; z < vu.size(); ++z) {
                        UnitType ut = vu.get(z).getUnitType();
                        unitPic = getUnitSprite(ut);
                        canvas.setStroke(new BasicStroke(3));
                        Color c = canvas.getColor();
                        canvas.setColor(Color.red);
                        canvas.setFont(new Font("Arial", 1, 14));
                        canvas.drawString("ID: " + id, x + 64 * (v % 2) - 20, y + 64 * (int) (v / 3) - 20);
                        canvas.setColor(c);
                        canvas.setStroke(new BasicStroke(1));
                        if (objects.size() > 2) {
                            canvas.drawImage(unitPic, quarterBuffer, x + 64 * (v % 2), y + 64 * (int) (v / 3));
                        } else {
                            canvas.drawImage(unitPic, normalBuffer, x + 32, y);
                        }
                    }
                }
            }
        }
    }
}
