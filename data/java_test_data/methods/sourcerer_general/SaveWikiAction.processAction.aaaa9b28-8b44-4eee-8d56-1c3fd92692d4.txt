public GenericBean processAction(ActionRequest request, ActionResponse response) throws Exception {
    // Determine the project container to use
    Project project = findProject(request);
    if (project == null) {
        throw new Exception("Project is null");
    }
    // Check the user's permissions
    User user = getUser(request);
    if (!ProjectUtils.hasAccess(project.getId(), user, "project-wiki-add")) {
        throw new PortletException("Unauthorized to add in this project");
    }
    // Update the record
    Connection db = useConnection(request);
    boolean recordInserted = false;
    int resultCount = -1;
    // Populate any info from the request
    Wiki wiki = (Wiki) getFormBean(request, Wiki.class);
    // Parameters
    String section = request.getParameter("section");
    String mode = request.getParameter("mode");
    // Convert the HTML editor to wiki syntax
    if (!"raw".equals(mode)) {
        if (section != null) {
            int sectionId = Integer.parseInt(section);
            Wiki originalWiki = new Wiki(db, wiki.getId());
            // Verify the record matches the specified project
            if (originalWiki.getProjectId() != project.getId()) {
                throw new PortletException("Mismatched projectId comparing " + originalWiki.getProjectId() + " with " + project.getId());
            }
            String sectionMarkup = HTMLToWikiUtils.htmlToWiki(wiki.getContent(), request.getContextPath(), project.getId());
            wiki.setContent(WikiUtils.merge(originalWiki, sectionMarkup, sectionId));
        } else {
            if (wiki.getId() > -1) {
                // If there is a form on the page, then merge the form back in...
                Wiki originalWiki = new Wiki(db, wiki.getId());
                // Verify the record matches the specified project
                if (originalWiki.getProjectId() != project.getId()) {
                    throw new PortletException("Mismatched projectId comparing " + originalWiki.getProjectId() + " with " + project.getId());
                }
                if (originalWiki.getContent().contains("[{form")) {
                    String wikiMarkup = HTMLToWikiUtils.htmlToWiki(wiki.getContent(), request.getContextPath(), project.getId());
                    wiki.setContent(WikiUtils.merge(originalWiki, wikiMarkup));
                } else {
                    wiki.setContent(HTMLToWikiUtils.htmlToWiki(wiki.getContent(), request.getContextPath(), project.getId()));
                }
            } else {
                wiki.setContent(HTMLToWikiUtils.htmlToWiki(wiki.getContent(), request.getContextPath(), project.getId()));
            }
        }
    }
    wiki.setProjectId(project.getId());
    wiki.setModifiedBy(user.getId());
    if (wiki.getId() > 0) {
        // Check existing wiki
        Wiki originalWiki = new Wiki(db, wiki.getId(), project.getId());
        if (originalWiki.getReadOnly() && !ProjectUtils.hasAccess(project.getId(), user, "project-wiki-locked-edit")) {
            throw new Exception("Record is locked from being edited");
        }
        // Update if there's a change
        if (!originalWiki.getContent().equals(wiki.getContent())) {
            resultCount = wiki.update(db, originalWiki);
            if (resultCount <= 0) {
                // The record didn't get updated so alert user to resolve conflict
                // @todo, must convert this to use portlet session
                // request.setAttribute("originalWiki", originalWiki);
                // request.setAttribute("IncludeSection", "wiki_conflict");
                response.setRenderParameter("portlet-action", "modify");
                response.setRenderParameter("portlet-object", "wiki");
                response.setRenderParameter("portlet-value", wiki.getSubjectLink());
                response.setRenderParameter("/mode", "conflict");
                return wiki;
            }
            // Send to workflow
            processUpdateHook(request, originalWiki, wiki);
        }
    } else {
        // Insert new wiki
        wiki.setProjectId(project.getId());
        wiki.setEnteredBy(user.getId());
        recordInserted = wiki.insert(db);
        if (!recordInserted) {
            return wiki;
        }
        // Send to workflow
        processInsertHook(request, wiki);
    }
    // Index this wiki
    indexAddItem(request, wiki);
    // This call will close panels and perform redirects
    String returnURL = request.getParameter("returnURL");
    String ctx = request.getContextPath();
    boolean isPopup = "true".equals(request.getParameter("popup"));
    if (StringUtils.hasText(returnURL)) {
        // Redirect to the suggested location, closing the popup
        if (LOG.isDebugEnabled()) {
            System.out.println("Redirect to: " + ctx + "/closepopup.jsp?return=" + StringUtils.encodeUrl(returnURL.toString()) + (isPopup ? "&popup=true" : ""));
        }
        response.sendRedirect(ctx + "/closepopup.jsp?return=" + StringUtils.encodeUrl(returnURL.toString()) + (isPopup ? "&popup=true" : ""));
        return null;
    }
    return (PortalUtils.performRefresh(request, response, "/show/wiki/" + wiki.getSubjectLink()));
}
