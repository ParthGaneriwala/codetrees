private void drawScopes(Shape a, Graphics g, MoeSyntaxDocument document, ThreeLines lines, int charWidth, List<NodeAndPosition> prevScopeStack, boolean small, boolean onlyMethods, int nodeDepth) throws BadLocationException {
    Rectangle clipBounds = g.getClipBounds();
    if (clipBounds == null) {
        clipBounds = a.getBounds();
    }
    Rectangle lbounds = modelToView(lines.thisLineEl.getStartOffset(), a, Position.Bias.Forward).getBounds();
    int ypos = lbounds.y;
    int ypos2 = ypos + lbounds.height;
    int rightMargin = small ? 0 : 20;
    int fullWidth = a.getBounds().width + a.getBounds().x;
    ListIterator<NodeAndPosition> li = prevScopeStack.listIterator();
    // Color lastLineColor = C3;
    NodeAndPosition parent = null;
    DrawInfo drawInfo = new DrawInfo();
    drawInfo.g = g;
    drawInfo.lines = lines;
    drawInfo.small = small;
    drawInfo.ypos = ypos;
    drawInfo.ypos2 = ypos2;
    while (li.hasNext()) {
        NodeAndPosition nap = li.next();
        int napPos = nap.getPosition();
        int napEnd = napPos + nap.getSize();
        if (napPos >= lines.thisLineEl.getEndOffset()) {
            // The node isn't even on this line, go to the next line
            break;
        }
        if (nodeSkipsEnd(napPos, napEnd, lines.thisLineEl, lines.thisLineSeg)) {
            break;
        }
        if (!drawNode(drawInfo, nap, parent, onlyMethods)) {
            parent = nap;
            continue;
        }
        // Draw the start node
        int xpos = getNodeIndent(a, document, nap, lines.thisLineEl, lines.thisLineSeg);
        boolean starts = nodeSkipsStart(napPos, napEnd, lines.aboveLineEl, lines.aboveLineSeg);
        boolean ends = nodeSkipsEnd(napPos, napEnd, lines.belowLineEl, lines.belowLineSeg);
        int rbound = getNodeRBound(a, napEnd, fullWidth - rightMargin, nodeDepth, lines.thisLineEl, lines.thisLineSeg);
        drawInfo.node = nap.getNode();
        drawInfo.starts = starts;
        drawInfo.ends = ends;
        Color[] colors = colorsForNode(drawInfo.node);
        drawInfo.color1 = colors[0];
        drawInfo.color2 = colors[1];
        if (xpos != -1 && xpos <= a.getBounds().x + a.getBounds().width) {
            drawScopeLeft(drawInfo, xpos, rbound);
            drawScopeRight(drawInfo, rbound);
        }
        nodeDepth++;
    // lastNodePos = nap;
    }
    // Move along.
    li = prevScopeStack.listIterator(prevScopeStack.size());
    // last node
    NodeAndPosition nap = li.previous();
    int napPos = nap.getPosition();
    int napEnd = napPos + nap.getSize();
    // For nodes which end on this line:
    while (napEnd <= lines.thisLineEl.getEndOffset()) {
        // Node ends this line
        li.remove();
        nodeDepth--;
        if (!li.hasPrevious())
            return;
        NodeAndPosition napParent = li.previous();
        li.next();
        NodeAndPosition nextNap = napParent.getNode().findNodeAtOrAfter(napEnd, napParent.getPosition());
        napPos = napParent.getPosition();
        napEnd = napPos + napParent.getSize();
        while (nextNap != null) {
            li.add(nextNap);
            // so remove works
            li.previous();
            // so remove works
            li.next();
            nodeDepth++;
            napPos = nextNap.getPosition();
            napEnd = napPos + nextNap.getSize();
            if (!nodeSkipsStart(napPos, napEnd, lines.thisLineEl, lines.thisLineSeg)) {
                if (drawNode(drawInfo, nextNap, napParent, onlyMethods)) {
                    // Draw it
                    int xpos = getNodeIndent(a, document, nextNap, lines.thisLineEl, lines.thisLineSeg);
                    int rbound = getNodeRBound(a, napEnd, fullWidth - rightMargin, nodeDepth, lines.thisLineEl, lines.thisLineSeg);
                    drawInfo.node = nextNap.getNode();
                    Color[] colors = colorsForNode(drawInfo.node);
                    drawInfo.color1 = colors[0];
                    drawInfo.color2 = colors[1];
                    drawInfo.starts = nodeSkipsStart(napPos, napEnd, lines.aboveLineEl, lines.aboveLineSeg);
                    drawInfo.ends = nodeSkipsEnd(napPos, napEnd, lines.belowLineEl, lines.belowLineSeg);
                    if (xpos != -1 && xpos <= a.getBounds().x + a.getBounds().width) {
                        drawScopeLeft(drawInfo, xpos, rbound);
                        drawScopeRight(drawInfo, rbound);
                    }
                }
            }
            nextNap = nextNap.getNode().findNodeAtOrAfter(napPos, napPos);
        }
    }
}
