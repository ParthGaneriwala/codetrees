public static void setPorts() {
    Vector<String> goodfreq = SQLConn.getData("Rarity", "GoodsTab", "ORDER BY Name");
    // Vector goodmax = SQLConn.getData("MaxStock","GoodsTab",
    // "ORDER BY Name");
    Vector<String> goodname = SQLConn.getData("Name", "GoodsTab", "ORDER BY Name");
    String gfreqstr = SQLConn.sqlStr(goodfreq);
    // String gmaxstr = SQLConn.sqlStr(goodmax);
    String gnamestr = SQLConn.sqlStr(goodname);
    int maxports = SQLConn.getInt("IniPorts FROM InitTab");
    int portlvls = SQLConn.getInt("PortLvls FROM MetaTab");
    int maxsects = SQLConn.getInt("MaxSects FROM MetaTab");
    int solrng = SQLConn.getInt("SolRange FROM MetaTab");
    // int numgoods = goodname.size();
    SQLConn.log("Generating Ports (" + maxports + ") ...");
    SQLConn.execDB("DELETE FROM Ports");
    for (int p = 1; p < maxports; p++) {
        int s = 0;
        do s = MiscUtil.randInt(maxsects - solrng) + solrng; while (SQLConn.count("Ports WHERE Sector=" + s) > 0);
        SQLConn.execDB("INSERT INTO Goods (" + gnamestr + ") VALUES(" + gfreqstr + ")");
        // somewhat slow
        int gid = SQLConn.lastID("Goods");
        newPort(portName(p), s, gid, 100 / portlvls);
    // 100/portlvls = initial % of max
    }
    // NOTE: Only works if port goods are 1-n
    // Thus should probably eventually check goods id
    // Also, Ports could be empty - should use goodfreq
    SQLConn.log("Initializing Port Goods...");
    for (int p = 1; p < maxports; p++) for (int i = 0; i < goodname.size(); i++) {
        String g = (String) goodname.elementAt(i);
        String f = (String) goodfreq.elementAt(i);
        // int r = (int)(Math.random() * 100);
        if ((Math.random() * 100) > Integer.parseInt(f))
            SQLConn.execDB(// "=" +
            "UPDATE Goods SET " + g + " = NULL WHERE id=" + p);
    // + " AND " + r + " > " + f); //"(RAND()*100) > " + f);
    }
    // if all goods=null, make class 0?
    restock(true);
}
