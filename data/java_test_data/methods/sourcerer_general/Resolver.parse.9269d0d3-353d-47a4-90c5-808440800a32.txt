@SuppressWarnings("unchecked")
private /**
 * Grab the Rules associated with an Action and then call Resolve on
 * it.
 *
 * @param action the Action to parse
 * @return whether the Action was successfully completed or had some
 * other return code.
 * @see RuleSet
 */
int parse(Action action) {
    /* In the end, we're going to pass an array of Actions to the
		 * "resolve" function, rather than just one. The reason is that
		 * an Action could have other Actions on which it depends (and that
		 * depend on it). These are stored in a variable called
		 * "dependentActions" in the Action object. Because we want to test
		 * and run all of those Actions at once, we pass Resolve an array
		 * of Actions that all depend on each other.
		 * First, we grab dependentActions from them from the Action object.
		 * We then create a new array, put the original Action first and
		 * all of the dependent Actions afterwards.
		 */
    IncrementedArray<Action> _actions = action.getDependentActions();
    Action[] actions = new Action[_actions.length + 1];
    actions[0] = action;
    if (_actions.length != 0) {
        for (int i = 1; i < actions.length; i++) {
            actions[i] = _actions.get(i - 1);
        }
    }
    Rule[][] applicable = new Rule[actions.length][];
    // "new incrementedArray[actions.length]"
    // Type safety: The expression of Type IncrementedArray[] needs unchecked Conversion
    // to conform to incrementedArray<GameElement>[]
    /* Currently unfixable - Java on OS X Tiger does not allow the
		 * creation of generic arrays. Luckily, the game works just fine
		 * with this bit of ugliness.
		 */
    IncrementedArray<GameElement>[] relevantElements = new IncrementedArray[actions.length];
    GameElement[][] nouns = new GameElement[actions.length][];
    // For each Action, grab all of the relevant rules and GameElements.
    for (int i = 0; i < actions.length; i++) {
        nouns[i] = actions[i].getNouns();
        /* The "needles" of an Action are all of the attributes of that
			 * Action that can have Rules associated with them. Each needle
			 * is an integer associated with either an Action or with a
			 * GameElement. The needles are (in order) :
			 *
			 * ActionID - A unique integer associated with this Action
			 * subjectTypeID - A unique integer associated with the type of
			 * 	GameElement that is the subject of this Action (if a subject
			 * 	exists)
			 * directObjectTypeID - A unique integer associated with the type
			 * 	of GameElement that is the direct object of this Action (if
			 * 	a direct object exists)
			 * indirectObjectTypeID - A unique integer associated with the
			 * 	type of GameElement that is the indirect object of this Action
			 * 	(if an indirect object exists)
			 *
			 * The latter three are stored in the "nouns" array in the Action.
			 */
        int[] needles = new int[Constants.SENTENCE_LENGTH];
        needles[0] = actionFactory.getType(actions[i].getName());
        myLogger.message("Resolver parsing with needles: " + needles[0] + ",", false);
        if (nouns[i] != null) {
            for (int j = nouns[i].length - 1; j >= 0; j--) {
                needles[j + 1] = nouns[i][j].getTypeId();
                myLogger.message(needles[j + 1] + ",", false);
            }
        }
        myLogger.message("\n", false);
        // Get the applicable rules associated with these needles
        applicable[i] = rules.getRules(needles);
        /* Grab all of the relevant elements associated with this Action
			 * by using the "isRelevant" function in GameElement to determine
			 * if any GameElements are relevant to the subject of this Action
			 * (if a subject exists -- if one does not, there can be no
			 * relevant elements).
			 */
        relevantElements[i] = new IncrementedArray<GameElement>(Constants.DEFAULT_RELEVANT_SIZE);
        if (nouns[i] != null) {
            GameElement first = world.getFirstElement();
            GameElement currentElement = first;
            do {
                GameElement subject = nouns[i][0];
                if (currentElement != subject && subject.isRelevant(currentElement))
                    relevantElements[i].add(currentElement);
            } while ((currentElement = currentElement.next) != first);
        }
    }
    /* We now have, in a set of arrays:
		 * 	- An array of all of the Actions we need to resolve together (all
		 * 		of the Actions that are dependent on each other)
		 * 	- An array of all of the rules applicable to each Action
		 * 	- An array of all of the GameElements that are relevant to each
		 * 		Action.
		 *
		 * (NOTE: each element in each array corresponds to the same element
		 * in the other arrays. So, applicable[2] is the set of applicable
		 * rules associated with actions[2], the relevant GameElements of
		 * which is stored in relevantElements[2]).
		 *
		 * We now run resolve on all of these Actions.
		 */
    return resolve(applicable, actions, relevantElements);
}
