public boolean getResults(Vector<Vector<String>> res) {
    if (resStream == null)
        resStream = ctx.getStream();
    if (resStream == null)
        return false;
    int numRows = 0;
    Vector<String> row = new Vector<String>();
    while (numRows < MAX_ROWS) {
        if (resStream == null) {
            if (numRows > 0)
                return true;
            else
                return false;
        }
        String col = null;
        bos.reset();
        Utilities.streamStatus ss = Utilities.streamStatus.NORMAL;
        try {
            ss = Utilities.readColumn(resStream, bos);
            if (bos.getCount() > 0)
                col = new String(bos.getData(), 0, bos.getCount(), "UTF-8");
            else if (ss == Utilities.streamStatus.NORMAL)
                col = Utilities.NSTR;
        } catch (IOException e) {
            console.printError("FAILED: Unexpected IO exception : " + e.getMessage());
            res = null;
            return false;
        }
        if ((ss == Utilities.streamStatus.EOF) || (ss == Utilities.streamStatus.TERMINATED)) {
            if (col != null)
                row.add(col.equals(Utilities.nullStringStorage) ? null : col);
            else if (row.size() != 0)
                row.add(null);
            numRows++;
            res.add(row);
            row = new Vector<String>();
            col = null;
            if (ss == Utilities.streamStatus.EOF)
                resStream = ctx.getStream();
        } else if (ss == Utilities.streamStatus.NORMAL) {
            row.add(col.equals(Utilities.nullStringStorage) ? null : col);
            col = null;
        } else
            assert false;
    }
    return true;
}
