private void calcRelationAttributes(Entity first, Entity second) {
    // Relation-attributes including: Label, Parental, Sibling, RequireOut and ExcludeOut
    this.setLabel(NO_CONSTRAINT);
    this.setParental(NO);
    this.setSibling(UNKNOWN);
    this.setConstraint(null);
    int ro1 = NO, ro2 = NO, eo1 = NO, eo2 = NO;
    List<Long> parentsOfFirst = new ArrayList<Long>();
    List<Long> parentsOfSecond = new ArrayList<Long>();
    for (Relation rel : first.getRels()) {
        if (!(rel instanceof BinRelation)) {
            continue;
        }
        BinRelation r = (BinRelation) rel;
        if (DataItemUtil.isBinRelationBetween(r, first, second)) {
            if (isRequire(r)) {
                if (this.getLabel() == NO_CONSTRAINT) {
                    this.setLabel(REQUIRE);
                    this.setConstraint(rel);
                }
            } else if (isExclude(r)) {
                if (this.getLabel() == NO_CONSTRAINT) {
                    this.setLabel(EXCLUDE);
                    this.setConstraint(rel);
                }
            } else {
                this.setParental(YES);
                this.setSibling(NO);
            }
        } else {
            if (isRequire(r)) {
                ro1 = YES;
            } else if (isExclude(r)) {
                eo1 = YES;
            } else if (r.getTargetId().equals(first.getId())) {
                // If "first" is a child of another feature, record the feature.
                parentsOfFirst.add(r.getSourceId());
            }
        }
    }
    for (Relation rel : second.getRels()) {
        if (!(rel instanceof BinRelation)) {
            continue;
        }
        BinRelation r = (BinRelation) rel;
        if (!DataItemUtil.isBinRelationBetween(r, first, second)) {
            if (isRequire(r)) {
                ro2 = YES;
            } else if (isExclude(r)) {
                eo2 = YES;
            } else if (r.getTargetId().equals(second.getId())) {
                if (this.getSibling() == UNKNOWN && parentsOfFirst.contains(r.getSourceId())) {
                    this.setSibling(YES);
                    this.setParental(NO);
                }
                parentsOfSecond.add(r.getSourceId());
            }
        }
    }
    if (this.getSibling() == UNKNOWN) {
        this.setSibling(NO);
    }
    this.setRequireOut(sumThreeValueVars(ro1, ro2));
    this.setExcludeOut(sumThreeValueVars(eo1, eo2));
    Pair<Integer, Integer> po1 = calcPCO(parentsOfFirst, first, second);
    Pair<Integer, Integer> po2 = calcPCO(parentsOfSecond, first, second);
    this.setParentRequireOut(sumThreeValueVars(po1.first, po2.first));
    this.setParentExcludeOut(sumThreeValueVars(po1.second, po2.second));
}
