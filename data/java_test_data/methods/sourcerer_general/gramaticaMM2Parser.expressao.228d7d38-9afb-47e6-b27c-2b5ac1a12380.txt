// $ANTLR start "expressao"
public final gramaticaMM2Parser.expressao_return expressao() throws RecognitionException {
    gramaticaMM2Parser.expressao_return retval = new gramaticaMM2Parser.expressao_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token OR156 = null;
    gramaticaMM2Parser.clausula_return clausula155 = null;
    gramaticaMM2Parser.clausula_return clausula157 = null;
    CommonTree OR156_tree = null;
    RewriteRuleTokenStream stream_OR = new RewriteRuleTokenStream(adaptor, "token OR");
    RewriteRuleSubtreeStream stream_clausula = new RewriteRuleSubtreeStream(adaptor, "rule clausula");
    try {
        // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:139:12: ( clausula ( OR clausula )* -> ^( EXPRESSION ( clausula )+ ) )
        // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:139:15: clausula ( OR clausula )*
        {
            pushFollow(FOLLOW_clausula_in_expressao1464);
            clausula155 = clausula();
            state._fsp--;
            stream_clausula.add(clausula155.getTree());
            // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:139:24: ( OR clausula )*
            loop26: do {
                int alt26 = 2;
                int LA26_0 = input.LA(1);
                if ((LA26_0 == OR)) {
                    alt26 = 1;
                }
                switch(alt26) {
                    case 1:
                        // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:139:25: OR clausula
                        {
                            OR156 = (Token) match(input, OR, FOLLOW_OR_in_expressao1467);
                            stream_OR.add(OR156);
                            pushFollow(FOLLOW_clausula_in_expressao1469);
                            clausula157 = clausula();
                            state._fsp--;
                            stream_clausula.add(clausula157.getTree());
                        }
                        break;
                    default:
                        break loop26;
                }
            } while (true);
            // AST REWRITE
            // elements: clausula
            // token labels:
            // rule labels: retval
            // token list labels:
            // rule list labels:
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", retval != null ? retval.tree : null);
            root_0 = (CommonTree) adaptor.nil();
            // 139:39: -> ^( EXPRESSION ( clausula )+ )
            {
                // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:139:42: ^( EXPRESSION ( clausula )+ )
                {
                    CommonTree root_1 = (CommonTree) adaptor.nil();
                    root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(EXPRESSION, "EXPRESSION"), root_1);
                    if (!(stream_clausula.hasNext())) {
                        throw new RewriteEarlyExitException();
                    }
                    while (stream_clausula.hasNext()) {
                        adaptor.addChild(root_1, stream_clausula.nextTree());
                    }
                    stream_clausula.reset();
                    adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
