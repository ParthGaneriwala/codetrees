public static AmazonS3Configuration parse(Properties properties) {
    AmazonS3Configuration configuration = null;
    boolean hasError = false;
    // bucket name.
    String bn = VALUE_DEFAULT_BUCKET_NAME;
    log.info("loaded default value for [" + NAME_BUCKET_NAME + "] [" + bn + "]");
    String bnv = PropertyUtil.extractAndLogProperty(NAME_BUCKET_NAME, properties);
    if (bnv != null) {
        bn = bnv;
        log.info("used configured value [" + bn + "]");
    }
    // path separator.
    String ps = VALUE_DEFAULT_PATH_SEPARATOR;
    log.info("loaded default value for [" + NAME_PATH_SEPARATOR + "] [" + ps + "]");
    String psv = PropertyUtil.extractAndLogProperty(NAME_PATH_SEPARATOR, properties);
    if (psv != null) {
        ps = psv;
        log.info("used configured value [" + ps + "]");
    }
    // path name.
    String pn = VALUE_DEFAULT_PATH_NAME;
    log.info("loaded default value for [" + NAME_PATH_NAME + "] [" + pn + "]");
    String pnv = PropertyUtil.extractAndLogProperty(NAME_PATH_NAME, properties);
    if (pnv != null) {
        pn = pnv;
        log.info("used configured value [" + pn + "]");
    } else {
        log.warn("It is strongly recommended to set [" + NAME_PATH_NAME + "]!");
    }
    // AWS credentials.
    AWSCredentials credentials = null;
    // if key file and pass are available then use them firstly.
    String kf = VALUE_DEFAULT_KEY_FILE;
    log.info("loaded default value for [" + NAME_KEY_FILE + "] [" + kf + "]");
    String kfv = PropertyUtil.extractAndLogProperty(NAME_KEY_FILE, properties);
    if (kfv != null) {
        kf = kfv;
        log.info("used configured value [" + kf + "]");
    }
    String kp = VALUE_DEFAULT_KEY_PASS;
    String kpv = PropertyUtil.extractAndLogProperty(NAME_KEY_PASS, properties);
    log.info("loaded default value for [" + NAME_KEY_PASS + "] [" + kp + "]");
    if (kpv != null) {
        kp = kpv;
        log.info("used configured value [" + kp + "]");
    }
    try {
        credentials = AWSCredentials.load(kp, new File(kf));
        log.info("loaded aws credentials from file");
    } catch (S3ServiceException s3se) {
        log.warn("There was a problem loading AWS credentials from encrypted key file", s3se);
    }
    if (credentials == null) {
        // if clear keys are available then use them in case of key file/pass being unavailable.
        String ak = PropertyUtil.extractAndLogProperty(NAME_ACCESS_KEY, properties);
        String sk = PropertyUtil.extractAndLogProperty(NAME_SECRET_KEY, properties);
        if (ak == null || sk == null) {
            log.error("Both [" + NAME_ACCESS_KEY + "] and [" + NAME_SECRET_KEY + "] are needed to load AWS credentials!");
            hasError = true;
        } else {
            credentials = new AWSCredentials(ak, sk);
            log.info("loaded aws credentials using keys");
        }
    }
    if (credentials == null) {
        // if still not available then no recovery plan is available.
        log.error("It is not possible to load AWS credentials!");
        hasError = true;
    }
    // multithreaded or not which will decide the underlying implementation.
    boolean m = VALUE_DEFAULT_MULTITHREADED;
    log.info("loaded default value for [" + NAME_MULTITHREADED + "] [" + m + "]");
    String mv = PropertyUtil.extractAndLogProperty("NAME_MULTITHREADED", properties);
    if (mv != null) {
        m = PropertyUtil.parseBoolean(mv);
        log.info("used configured value [" + m + "]");
    }
    if (!hasError) {
        configuration = new AmazonS3Configuration(bn, pn, ps, credentials, m);
        log.info("created configuration object for S3");
    }
    return configuration;
}
