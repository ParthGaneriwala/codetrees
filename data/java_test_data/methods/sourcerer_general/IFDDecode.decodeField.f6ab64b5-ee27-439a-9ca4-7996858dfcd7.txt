void decodeField(TIFField tf) throws IOException {
    switch(tf.id) {
        // first group Minimum Required Tags for each TIFF Class
        case TIFTags.NEWSUBFILETYPE:
            newsubfiletype = tf.getInt(sis);
            break;
        case TIFTags.IMAGEWIDTH:
            imagewidth = tf.getInt(sis);
            break;
        case TIFTags.IMAGELENGTH:
            imagelength = tf.getInt(sis);
            break;
        case TIFTags.BITSPERSAMPLE:
            bitspersample = tf.getShortArray(sis);
            break;
        case TIFTags.COMPRESSION:
            compression = tf.getInt(sis);
            break;
        case TIFTags.PHOTOMETRICINTERPRETATION:
            photometricinterpretation = tf.getInt(sis);
            break;
        case TIFTags.STRIPOFFSETS:
            stripoffsets = tf.getIntArray(sis);
            break;
        case TIFTags.SAMPLESPERPIXEL:
            samplesperpixel = tf.getInt(sis);
            break;
        case TIFTags.ROWSPERSTRIP:
            rowsperstrip = tf.getInt(sis);
            break;
        case TIFTags.STRIPBYTECOUNTS:
            stripbytecounts = tf.getIntArray(sis);
            break;
        case TIFTags.XRESOLUTION:
            xres = tf.getRational(sis);
            break;
        case TIFTags.YRESOLUTION:
            yres = tf.getRational(sis);
            break;
        case TIFTags.RESOLUTIONUNIT:
            resolutionunit = tf.getInt(sis);
            break;
        // Required Tags for Palette Color Class
        case TIFTags.COLORMAP:
            colormap = tf.getShortArray(sis);
            break;
        // Required Tags for RGB Class
        case TIFTags.PLANARCONFIGURATION:
            planarconfiguration = tf.getInt(sis);
            break;
        case TIFTags.EXTRASAMPLES:
            extrasamples = tf.getInt(sis);
            break;
        // Required Tags for YCbCr
        case TIFTags.YCBCRCOEFFICIENTS:
            ycbcrcoefficients = tf.getRational(sis);
            break;
        case TIFTags.YCBCRSUBSAMPLING:
            ycbcrsubsampling = tf.getIntArray(sis);
            break;
        case TIFTags.YCBCRPOSITIONING:
            ycbcrpositioning = tf.getInt(sis);
            break;
        // Required Tags for Class F
        case TIFTags.BADFAXLINES:
            badfaxlines = tf.getInt(sis);
            break;
        case TIFTags.CLEANFAXDATA:
            cleanfaxdata = tf.getInt(sis);
            break;
        case TIFTags.CONSECUTIVEBADFAXLINES:
            consecutivebadfaxlines = tf.getInt(sis);
            break;
        // Tile format TIFF file
        case TIFTags.TILEWIDTH:
            tilewidth = tf.getInt(sis);
            break;
        case TIFTags.TILELENGTH:
            tilelength = tf.getInt(sis);
            break;
        case TIFTags.TILEOFFSETS:
            tileoffsets = tf.getIntArray(sis);
            break;
        case TIFTags.TILEBYTECOUNTS:
            tilebytecounts = tf.getIntArray(sis);
            break;
        // Control options
        case TIFTags.FILLORDER:
            fillorder = tf.getInt(sis);
            break;
        case TIFTags.ORIENTATION:
            orientation = tf.getInt(sis);
            break;
        case TIFTags.T4OPTIONS:
            t4options = tf.getInt(sis);
            break;
        case TIFTags.T6OPTIONS:
            t6options = tf.getInt(sis);
            break;
        case // for LZW at least.
        TIFTags.PREDICTOR:
            predictor = tf.getInt(sis);
            break;
        default:
            break;
    }
}
