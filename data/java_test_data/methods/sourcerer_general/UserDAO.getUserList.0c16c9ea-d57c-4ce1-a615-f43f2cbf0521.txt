public HashMap getUserList(SearchVO searchVO) throws Exception {
    HashMap map = null;
    try {
        Connection con = DBUtil.getConnection();
        String sql = "select * from USERS ";
        if (searchVO.getSearchCondition() != null) {
            if (searchVO.getSearchCondition().equals("0")) {
                sql += " where USER_ID='" + searchVO.getSearchKeyword() + "'";
            } else if (searchVO.getSearchCondition().equals("1")) {
                sql += " where USER_NAME='" + searchVO.getSearchKeyword() + "'";
            }
        }
        sql += " order by USER_ID";
        PreparedStatement stmt = con.prepareStatement(sql, ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
        ResultSet rs = stmt.executeQuery();
        rs.last();
        int total = rs.getRow();
        map = new HashMap();
        map.put("count", new Integer(total));
        rs.absolute(searchVO.getPage() * searchVO.getPageUnit() - 2);
        ArrayList list = new ArrayList();
        if (total > 0) {
            for (int i = 0; i < searchVO.getPageUnit(); i++) {
                UserVO vo = new UserVO();
                vo.setUserId(rs.getString("USER_ID"));
                vo.setUserName(rs.getString("USER_NAME"));
                vo.setPassword(rs.getString("PASSWORD"));
                vo.setRole(rs.getString("ROLE"));
                vo.setSsn(rs.getString("SSN"));
                vo.setPhone(rs.getString("CELL_PHONE"));
                vo.setAddr(rs.getString("ADDR"));
                vo.setEmail(rs.getString("EMAIL"));
                vo.setRegDate(rs.getDate("REG_DATE"));
                list.add(vo);
                if (!rs.next())
                    break;
            }
        }
        map.put("list", list);
        con.close();
    } catch (Exception e) {
        e.printStackTrace();
        throw e;
    }
    return map;
}
