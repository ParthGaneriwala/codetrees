public double newEvaluateSentence(TreeTrellisNode currentNode, long[] sentence, boolean useConstraints) {
    final FactorTupleDescription desc = Experiment.getInstance().getTupleDescription();
    final long overtFactorsMask = desc.getOvertFactorsMask();
    final long hiddenFactorsMask = desc.getHiddenFactorsMask();
    final int lockNodes = /*forest.getOrder() +*/
    2;
    double prob = 1.0;
    // skip possible <s> in the beginning
    int i = 0;
    while (i < sentence.length && Dictionary.isStart(FactorTuple.getValue(sentence[i], desc.getMainFactorIndex()))) {
        ++i;
    }
    for (; i < sentence.length; ++i) {
        long word = sentence[i] & overtFactorsMask;
        long constraints = sentence[i] & hiddenFactorsMask;
        currentNode = currentNode.appendNodeAndLock(word);
        TreeTrellisNode prevNode = currentNode.getPreviousNode();
        try {
            if (!currentNode.isDecoded()) {
                prevNode.lock(forest.getOrder());
                try {
                    DecodingContext context = new DecodingContext(currentNode, forest);
                    partition(context);
                    if (useConstraints && constraints != 0) {
                        applyConstraint(currentNode, constraints);
                    }
                    currentNode.finishDecoding();
                } finally {
                    prevNode.unlock(forest.getOrder());
                }
            }
            prob = currentNode.getCumulativeLogScale() + Math.log10(currentNode.getTotalProb());
        } finally {
            currentNode.unlock();
        }
    }
    currentNode.releasePath();
    return prob;
}
