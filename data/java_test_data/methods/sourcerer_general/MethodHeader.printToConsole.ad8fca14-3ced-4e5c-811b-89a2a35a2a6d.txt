public void printToConsole() {
    int code_offset = 0, j;
    byte[] b;
    ArrayList<CLInstruction> cl_code;
    CLInstruction inst;
    int size;
    if (isTiny()) {
        System.out.println("Method Header - Type: Tiny");
        System.out.println("\tFlags: " + Flags);
        System.out.println("\tMax Stack: " + MaxStack);
        System.out.println("\tCode Size: " + CodeSize);
    } else if (isFat()) {
        System.out.println("Method Header - Type: Fat");
        System.out.println("\tFlags: " + Flags);
        System.out.println("\tMax Stack: " + MaxStack);
        System.out.println("\tCode Size: " + CodeSize);
        System.out.println("\tLocal Var Signature Token: " + LocalVarSigToken);
    }
    System.out.println("\tCode:");
    cl_code = CLInstructionConversion.toCLInstructions(Code);
    size = cl_code.size();
    for (j = 0; j < size; j++) {
        inst = cl_code.get(j);
        b = inst.toBytes(false);
        System.out.print("\t\t" + code_offset + "\t");
        System.out.print(Tools.toHexString(b));
        System.out.print("\t" + inst.toString() + "\n");
        code_offset += inst.getLength();
    }
    System.out.println();
}
