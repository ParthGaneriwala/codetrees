private void testRestoreCalculationOverGroup(double expectedValue, CalculationResolverFactory factory) {
    resolverProvider.register(factory);
    slotMappingConfigurationPersistence.registerResolverPersistence(new PropertyDependentVisualItemResolverPersistence(factory));
    // 1. create view and configure it - resources, settings...
    Resource r1 = new Resource("test:1");
    r1.putValue(PROPERTY_1, new Double(0));
    r1.putValue(PROPERTY_2, "value2");
    Resource r2 = new Resource("test:2");
    r2.putValue(PROPERTY_1, new Double(4));
    r2.putValue(PROPERTY_2, "value2");
    Resource r3 = new Resource("test:3");
    r3.putValue(PROPERTY_1, new Double(8));
    r3.putValue(PROPERTY_2, "value2");
    originalView.getResourceModel().addUnnamedResources(toResourceSet(r1, r2, r3));
    originalVisualizationModel.setCategorizer(new ResourceByPropertyMultiCategorizer(PROPERTY_2));
    originalVisualizationModel.setResolver(slots[1], factory.create(PROPERTY_1));
    // 2. save first view
    DefaultResourceSetCollector collector = new DefaultResourceSetCollector();
    Memento memento = originalView.save(collector);
    // 3. restore other view - set by uri categorization first
    restoredVisualizationModel.setCategorizer(new ResourceByUriMultiCategorizer());
    restoredView.doRestore(memento, restorationService, collector);
    // 4. check resource items and control settings
    LightweightCollection<VisualItem> visualItems = restoredVisualizationModel.getFullVisualItemContainer().getVisualItems();
    assertEquals(1, visualItems.size());
    assertEquals(expectedValue, visualItems.getFirstElement().getValue(slots[1]));
}
