public void draw(GL10 gl, float curTime, float fadeTime, CCColor4B color) {
    int r = color.r;
    int g = color.g;
    int b = color.b;
    int a = color.a;
    if (begin < 50) {
        // we have to generate alpha for the ribbon each frame.
        if (curTime == 0) {
            // no alpha over time, so just set the color
            gl.glColor4f(r / 255f, g / 255f, b / 255f, a / 255f);
        } else {
            // generate alpha/color for each point
            gl.glEnableClientState(GL10.GL_COLOR_ARRAY);
            int i = begin;
            for (; i < end; ++i) {
                int idx = i * 8;
                colors[idx + 0] = (byte) r;
                colors[idx + 1] = (byte) g;
                colors[idx + 2] = (byte) b;
                colors[idx + 4] = (byte) r;
                colors[idx + 5] = (byte) g;
                colors[idx + 6] = (byte) b;
                float alive = ((curTime - creationTime[i]) / fadeTime);
                if (alive > 1) {
                    begin++;
                    colors[idx + 3] = 0;
                    colors[idx + 7] = 0;
                } else {
                    byte o = (byte) (255.f - (alive * 255.f));
                    colors[idx + 3] = o;
                    colors[idx + 7] = o;
                }
            }
            mColors.put(colors, begin * 4 * 2, (end - begin) * 4 * 2);
            mColors.position(0);
            gl.glColorPointer(4, GL10.GL_UNSIGNED_BYTE, 0, mColors);
        }
        mVertices.put(verts, begin * 3 * 2, (end - begin) * 3 * 2);
        mVertices.position(0);
        gl.glVertexPointer(3, GL10.GL_FLOAT, 0, mVertices);
        mCoordinates.put(coords, begin * 2 * 2, (end - begin) * 2 * 2);
        mCoordinates.position(0);
        gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, mCoordinates);
        gl.glDrawArrays(GL10.GL_TRIANGLE_STRIP, 0, (end - begin) * 2);
    } else
        finished = true;
}
