public void layoutContainer(Container target) {
    synchronized (target.getTreeLock()) {
        Insets inset = target.insets();
        int top = 0 - inset.top;
        int bottom = target.size().height - inset.bottom;
        int left = 0 - inset.left;
        int right = target.size().width - inset.right;
        // VERTICAL
        if ((east != null) && (east.isVisible())) {
            // System.out.println("adding east");
            Dimension d = east.preferredSize();
            // if south isn't active determine size using no references to south
            if (south != null) {
                east.reshape(right - d.width, top, d.width, bottom - south.preferredSize().height);
            } else if (south == null) {
                east.reshape(right - d.width, top, d.width, bottom);
            }
        }
        // HORIZONTAL
        if ((south != null) && (south.isVisible())) {
            // System.out.println("adding south");
            Dimension d = south.preferredSize();
            // if east isn't active determine size using no references to east
            if (east != null) {
                south.reshape(left, bottom - d.height, right - east.preferredSize().width, d.height);
            } else if (east == null) {
                south.reshape(left, bottom - d.height, right, d.height);
            }
        }
        // CORNER COMPONENT
        if ((east != null) && (south != null) && (corner != null) && (corner.isVisible()) && (south.isVisible()) && (east.isVisible())) {
            Dimension d = corner.preferredSize();
            int startX = right - east.size().width;
            int startY = bottom - south.size().height;
            int width = right - south.size().width;
            int height = bottom - east.size().height;
            corner.reshape(startX, startY, width, height);
            // color weirdness so im setting it to gray.
            corner.setBackground(Color.lightGray);
            corner.setForeground(Color.gray);
        }
        // CENTER COMPONENT
        if ((center != null) && (center.isVisible())) {
            Dimension d = center.preferredSize();
            // WITH EAST (checking south for null)
            if (east != null && east.isVisible() && south == null) {
                // CONFIRMED
                // System.out.println("reshaping for vertical bar only "+east.size().width);
                center.reshape(left, top, right - east.size().width, d.height);
            } else // WITH SOUTH (checking east for null)
            if (south != null && south.isVisible() && east == null) {
                // System.out.println("reshaping for horinzontal only "+d.width);
                center.reshape(left, top, d.width, bottom - south.size().height);
            } else // WITH SOUTH AND EAST (showing or not)
            {
                // System.out.println("reshaping for everything");
                center.reshape(left, top, d.width, d.height);
            }
        }
    }
}
