private boolean addPBArgToTBTree(PBArg pbArg, TBTree tree) {
    ArrayList<PBLoc> pbLocs = pbArg.getLocs();
    IntOpenHashSet addIDs = new IntOpenHashSet();
    IntOpenHashSet delIDs = new IntOpenHashSet();
    PBLoc rLoc = null;
    TBNode node, tmp;
    String label;
    if (pbArg.label.matches("rel.*"))
        label = "C-V";
    else
        label = "A" + pbArg.label.substring(3);
    // retrieve all terminal IDs
    for (PBLoc pbLoc : pbLocs) {
        if ((node = tree.getNode(pbLoc)) == null)
            return false;
        tmp = tree.getTerminalNode(pbLoc.terminalId);
        if (pbLoc.isType(PBLib.PROP_OP_SKIP))
            delIDs.addAll(node.getSubTermainlIDs());
        if (node.isPos("WH.*"))
            rLoc = pbLoc;
        else if (node.isEmptyCategoryRec() && tmp.form.startsWith(TBEnLib.EC_PRO) && pbLoc.terminalId > pbArg.predicateId)
            continue;
        else
            addIDs.addAll(node.getSubTermainlIDs());
    }
    if (addIDs.isEmpty())
        return true;
    // add terminal IDs
    /*	int[] ids = addIDs.toArray();
		Arrays.sort(ids);
		
		TBNode pred = tree.getTerminalNode(pbArg.predicateId);
		pred.addPBArg(new SRLArg(label, ids));*/
    // add each argument
    addIDs.removeAll(delIDs);
    int terminalId, height;
    String prefix = "";
    int[] ids;
    while (!addIDs.isEmpty()) {
        height = 0;
        ids = addIDs.toArray();
        Arrays.sort(ids);
        terminalId = ids[0];
        while (true) {
            node = tree.getNode(terminalId, height + 1);
            if (node == null || !JSet.isSubset(addIDs, node.getSubTermainlIDs())) {
                node = tree.getNode(terminalId, height);
                if (node.isEmptyCategoryRec())
                    node.addPBHead(new SRLHead(pbArg.predicateId + 1, label));
                else if (!TBEnLib.isPunctuation(node.pos))
                    node.addPBHead(new SRLHead(pbArg.predicateId + 1, prefix + label));
                addIDs.removeAll(node.getSubTermainlIDs());
                if (!node.isEmptyCategoryRec() && !TBEnLib.isPunctuation(node.pos) && !label.startsWith("AM"))
                    prefix = "C-";
                break;
            }
            height++;
        }
    }
    prefix = "R-";
    if (rLoc != null) {
        node = tree.getNode(rLoc);
        // ids  = node.getSubTermainlIDs().toArray();
        // Arrays.sort(ids);
        // pred.addPBArg(new SRLArg(prefix+label, ids));
        node.addPBHead(new SRLHead(pbArg.predicateId + 1, prefix + label));
    }
    return true;
}
