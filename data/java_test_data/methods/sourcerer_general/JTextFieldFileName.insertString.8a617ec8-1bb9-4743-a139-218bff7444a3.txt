public void insertString(int offset, String str, AttributeSet attr) throws BadLocationException {
    try {
        if (str == null) {
            super.insertString(offset, str, attr);
            return;
        }
        if (acceptedChars.equals(UPPERCASE))
            str = str.toUpperCase();
        else if (acceptedChars.equals(LOWERCASE))
            str = str.toLowerCase();
        // Ensure user input is a valid character, return if not valid
        for (int i = 0; i < str.length(); i++) {
            if (acceptedChars.indexOf(String.valueOf(str.charAt(i))) == -1)
                return;
        }
        // If we get here, then the user input is valid.
        String allText = this.getText(0, this.getLength());
        int indexOfPeriod = allText.indexOf(".");
        if (!allowPeriods && str.equals(".")) {
            // Periods are not allowed
            Toolkit.getDefaultToolkit().beep();
            return;
        }
        // only allow 1 period
        if (!multiplePeriodsAllowed && str.equals(".")) {
            for (int i = 0; i < allText.length(); i++) {
                if (allText.charAt(i) == '.') {
                    // more than 1 period was found, so report error and
                    // return
                    Toolkit.getDefaultToolkit().beep();
                    return;
                }
            }
        }
        if (DEBUG) {
            System.out.println("indexOfPeriod is " + indexOfPeriod);
            System.out.println("string argument is " + str);
            System.out.println("allText = " + allText);
            System.out.println("offset argument is = " + offset);
        }
        // Parse out filename and extension
        String filename = "";
        String extension = "";
        if (indexOfPeriod > 0)
            // it coulb be in the first position
            // -1
            filename = allText.substring(0, indexOfPeriod);
        else if (indexOfPeriod == -1)
            // if no period, then all text is a filename
            filename = allText;
        if (indexOfPeriod != -1 && indexOfPeriod < allText.length())
            // it could be the last position
            // or
            extension = allText.substring(indexOfPeriod + 1, allText.length());
        if (DEBUG) {
            System.out.println("Filename = " + filename);
            System.out.println("Extension = " + extension);
        }
        if (// entering
        maxFileNameLength != -1 && indexOfPeriod == -1 || offset <= indexOfPeriod) // a
        // filename
        {
            if (// will it be too
            filename.length() >= maxFileNameLength) // long?
            {
                if (// allow this to
                indexOfPeriod == -1 && str.equals(".")) // happen, its
                // the only
                // period
                {
                    super.insertString(offset, str, attr);
                    return;
                } else {
                    // We've reached the max filename length,
                    // report an error and don't let the user add this
                    // character
                    Toolkit.getDefaultToolkit().beep();
                    return;
                }
            } else {
                // the entered text (fileName) is valid, so pass on to my
                // super
                super.insertString(offset, str, attr);
                return;
            }
        } else {
            if (indexOfPeriod != -1 && offset >= indexOfPeriod) // entering an extension
            {
                if (allowExtensionChange) {
                    if (extension.length() >= maxExensionLength) {
                        // We've reached the max extension length,
                        // report an error and don't let the user add this
                        // character
                        Toolkit.getDefaultToolkit().beep();
                        return;
                    }
                } else {
                    // We're not allowing the extension to be changed
                    // report an error and don't let the user add this
                    // character
                    Toolkit.getDefaultToolkit().beep();
                    return;
                }
            }
        }
        super.insertString(offset, str, attr);
    } catch (java.lang.StringIndexOutOfBoundsException e) {
        return;
    }
}
