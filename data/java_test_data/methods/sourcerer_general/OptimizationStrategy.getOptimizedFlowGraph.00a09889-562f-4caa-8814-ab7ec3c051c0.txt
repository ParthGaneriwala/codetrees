public ControlFlowGraph getOptimizedFlowGraph(ControlFlowGraph controlFlowGraph) {
    this.controlFlowGraph = controlFlowGraph;
    useDefChain = new HashMap<String, AssemblyInstruction>();
    defUseChain = new HashMap<Temp, HashSet<Temp>>();
    // Initialize the list of transformed quadruples from the original list of quadruples
    transformedQuadruples = new Vector<AssemblyInstruction>();
    Vector<AssemblyInstruction> originalQuadruples = controlFlowGraph.getQuadruples();
    int numQuads = originalQuadruples.size();
    for (int i = 0; i < numQuads; i++) {
        transformedQuadruples.addElement(originalQuadruples.elementAt(i));
    }
    // Create the dominance tree
    DominatorCalculationContext dominatorCalculationContext = new DominatorCalculationContext(controlFlowGraph, controlFlowGraph.getStartNode());
    dominatorCalculationContext.setLengauerTarjan();
    DominatorTree dominatorTree = dominatorCalculationContext.getDominatorTree();
    DominatorTreeNode dominatorTreeNode = dominatorTree.getDominatorTreeRoot();
    System.out.println("DOMINATOR TREE: ");
    dominatorTreeNode.display();
    sortDominatorTree(dominatorTree, dominatorTreeNode);
    System.out.println("SORTED DOMINATOR TREE: ");
    dominatorTreeNode.display();
    // Calculate the dominance frontiers
    // HashMap dominanceFrontiers = getDominanceFrontiers(controlFlowGraph, dominatorTree);
    HashMap dominanceFrontiers = Utilities.getDominanceFrontiers(controlFlowGraph, dominatorTree);
    displayDominanceFrontiers(dominanceFrontiers);
    // Insert the phi functions
    insertPhiFunctions(dominanceFrontiers);
    // Rename the variables
    renameVariables(dominatorTree);
    System.out.println("FINISHED RENAMING; SSA FORM IS READY ...........");
    // Now the control flow graph is in SSA form; perform the optimizations
    performOptimizationsOnSSA();
    return this.controlFlowGraph;
}
