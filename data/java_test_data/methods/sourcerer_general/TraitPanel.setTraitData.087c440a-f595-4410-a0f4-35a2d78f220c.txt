public void setTraitData(TraitData trait, boolean asAsset) {
    isAsset = asAsset;
    data = trait;
    orgTrait = TraitsManager.getTraitNamed(data.getName());
    assert (orgTrait != null);
    StringBuilder sb = new StringBuilder();
    sb.append(data.getName());
    sb.append(" (");
    sb.append((data.isMajor() ? "Major" : "Minor"));
    sb.append(")");
    nameLabel.setText(sb.toString());
    nameLabel.setForeground(isAsset ? COLOR_ASSET : COLOR_COMPLICATION);
    swapButton.setIcon(trait.getType().getIcon());
    switch(orgTrait.getFocusType()) {
        case Trait.FOCUS_ANY:
            focusField.setVisible(true);
            focusField.setText(data.getFocus());
            focusCombo.setVisible(false);
            break;
        case Trait.FOCUS_LIST:
            focusField.setVisible(false);
            focusField.setText("");
            focusCombo.setVisible(true);
            focusCombo.removeAllItems();
            for (String s : orgTrait.getFocusList()) {
                focusCombo.addItem(s);
            }
            if (data.getFocus() != null) {
                focusCombo.setSelectedItem(data.getFocus());
            }
            break;
        case Trait.SKILL_LIST:
            focusField.setVisible(false);
            focusField.setText("");
            focusCombo.setVisible(true);
            focusCombo.removeAllItems();
            for (String s : orgTrait.getSkillsList()) {
                focusCombo.addItem(s);
            }
            if (data.getSkill() != null) {
                focusCombo.setSelectedItem(data.getSkill());
            }
            break;
        case Trait.SKILL_ANY:
            focusField.setVisible(false);
            focusField.setText("");
            focusCombo.setVisible(true);
            focusCombo.removeAllItems();
            for (Skill s : SkillsManager.getSkills()) {
                focusCombo.addItem(s.getName());
            }
            if (data.getSkill() != null) {
                focusCombo.setSelectedItem(data.getSkill());
            }
            break;
        default:
            focusCombo.setVisible(false);
            focusField.setVisible(false);
    }
    revalidate();
}
