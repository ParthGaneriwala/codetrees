// $ANTLR start "until_statement"
public final Compila_doresParser.until_statement_return until_statement() throws RecognitionException {
    Compila_doresParser.until_statement_return retval = new Compila_doresParser.until_statement_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token DO96 = null;
    Token EOL97 = null;
    Token LOOP99 = null;
    Token UNTIL100 = null;
    Compila_doresParser.block_return block98 = null;
    Compila_doresParser.expression_return expression101 = null;
    CommonTree DO96_tree = null;
    CommonTree EOL97_tree = null;
    CommonTree LOOP99_tree = null;
    CommonTree UNTIL100_tree = null;
    RewriteRuleTokenStream stream_DO = new RewriteRuleTokenStream(adaptor, "token DO");
    RewriteRuleTokenStream stream_EOL = new RewriteRuleTokenStream(adaptor, "token EOL");
    RewriteRuleTokenStream stream_UNTIL = new RewriteRuleTokenStream(adaptor, "token UNTIL");
    RewriteRuleTokenStream stream_LOOP = new RewriteRuleTokenStream(adaptor, "token LOOP");
    RewriteRuleSubtreeStream stream_expression = new RewriteRuleSubtreeStream(adaptor, "rule expression");
    RewriteRuleSubtreeStream stream_block = new RewriteRuleSubtreeStream(adaptor, "rule block");
    try {
        // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:173:2: ( ( DO ( EOL )+ ) ( block ) ( LOOP UNTIL expression ) -> ^( LOOP ( block )* ^( TEST expression ) ) )
        // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:173:4: ( DO ( EOL )+ ) ( block ) ( LOOP UNTIL expression )
        {
            // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:173:4: ( DO ( EOL )+ )
            // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:173:5: DO ( EOL )+
            {
                DO96 = (Token) match(input, DO, FOLLOW_DO_in_until_statement1184);
                stream_DO.add(DO96);
                // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:173:8: ( EOL )+
                int cnt26 = 0;
                loop26: do {
                    int alt26 = 2;
                    int LA26_0 = input.LA(1);
                    if ((LA26_0 == EOL)) {
                        alt26 = 1;
                    }
                    switch(alt26) {
                        case 1:
                            // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:173:8: EOL
                            {
                                EOL97 = (Token) match(input, EOL, FOLLOW_EOL_in_until_statement1186);
                                stream_EOL.add(EOL97);
                            }
                            break;
                        default:
                            if (cnt26 >= 1)
                                break loop26;
                            EarlyExitException eee = new EarlyExitException(26, input);
                            throw eee;
                    }
                    cnt26++;
                } while (true);
            }
            // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:173:14: ( block )
            // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:173:15: block
            {
                pushFollow(FOLLOW_block_in_until_statement1191);
                block98 = block();
                state._fsp--;
                stream_block.add(block98.getTree());
            }
            // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:173:22: ( LOOP UNTIL expression )
            // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:173:23: LOOP UNTIL expression
            {
                LOOP99 = (Token) match(input, LOOP, FOLLOW_LOOP_in_until_statement1195);
                stream_LOOP.add(LOOP99);
                UNTIL100 = (Token) match(input, UNTIL, FOLLOW_UNTIL_in_until_statement1197);
                stream_UNTIL.add(UNTIL100);
                pushFollow(FOLLOW_expression_in_until_statement1199);
                expression101 = expression();
                state._fsp--;
                stream_expression.add(expression101.getTree());
            }
            // AST REWRITE
            // elements: LOOP, expression, block
            // token labels:
            // rule labels: retval
            // token list labels:
            // rule list labels:
            // wildcard labels:
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.tree : null);
            root_0 = (CommonTree) adaptor.nil();
            // 173:46: -> ^( LOOP ( block )* ^( TEST expression ) )
            {
                // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:173:49: ^( LOOP ( block )* ^( TEST expression ) )
                {
                    CommonTree root_1 = (CommonTree) adaptor.nil();
                    root_1 = (CommonTree) adaptor.becomeRoot(stream_LOOP.nextNode(), root_1);
                    // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:173:56: ( block )*
                    while (stream_block.hasNext()) {
                        adaptor.addChild(root_1, stream_block.nextTree());
                    }
                    stream_block.reset();
                    // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:173:63: ^( TEST expression )
                    {
                        CommonTree root_2 = (CommonTree) adaptor.nil();
                        root_2 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(TEST, "TEST"), root_2);
                        adaptor.addChild(root_2, stream_expression.nextTree());
                        adaptor.addChild(root_1, root_2);
                    }
                    adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
