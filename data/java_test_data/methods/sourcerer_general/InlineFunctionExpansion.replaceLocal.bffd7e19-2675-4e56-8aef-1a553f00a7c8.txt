private static CLInstruction replaceLocal(CLInstruction inst, int next_local) {
    declared = false;
    byte optcode = inst.getOptcode();
    Integer loc = null;
    boolean ld = false;
    // FIX!!!!!!!!!!!
    if (optcode == CLOptcode.LDLOC0) {
        loc = 0;
        ld = true;
    } else if (optcode == CLOptcode.LDLOC1) {
        loc = 1;
        ld = true;
    } else if (optcode == CLOptcode.LDLOC2) {
        loc = 2;
        ld = true;
    } else if (optcode == CLOptcode.LDLOC3) {
        loc = 3;
        ld = true;
    } else if (optcode == CLOptcode.LDLOCS) {
        loc = ((int) ((Ldlocs) inst).getLocalNumber()) & 0xff;
        ld = true;
    } else if (optcode == CLOptcode.LDLOCAS)
        loc = ((int) ((Ldlocas) inst).getLocalNumber()) & 0xff;
    else if (optcode == CLOptcode.LDLOCA)
        loc = ((int) ((Ldloca) inst).getLocalNumber()) & 0xffff;
    else if (optcode == CLOptcode.LDLOC) {
        loc = ((int) ((Ldloc) inst).getLocalNumber()) & 0xffff;
        ld = true;
    } else if (optcode == CLOptcode.STLOC0)
        loc = 0;
    else if (optcode == CLOptcode.STLOC1)
        loc = 1;
    else if (optcode == CLOptcode.STLOC2)
        loc = 2;
    else if (optcode == CLOptcode.STLOC3)
        loc = 3;
    else if (optcode == CLOptcode.STLOCS)
        loc = ((int) ((Stlocs) inst).getLocalNumber()) & 0xff;
    else if (optcode == CLOptcode.STLOC)
        loc = ((int) ((Stloc) inst).getLocalNumber()) & 0xffff;
    if (// is a load or store local
    loc != null) {
        // get local number
        int val;
        if (// already declared
        loc < new_locals.size() && new_locals.get(loc.intValue()) != null) {
            val = new_locals.get(loc.intValue()).intValue();
        } else // not declared
        {
            declared = true;
            int stop = loc.intValue() + 1;
            while (new_locals.size() != stop) {
                new_locals.add(null);
            }
            new_locals.set(loc.intValue(), next_local);
            val = next_local;
        }
        // load
        if (ld) {
            if (val == 0)
                return new Ldloc0();
            else if (val == 1)
                return new Ldloc1();
            else if (val == 2)
                return new Ldloc2();
            else if (val == 3)
                return new Ldloc3();
            else if (val <= 0xff)
                return new Ldlocs((byte) val);
            else
                return new Ldloc((short) val);
        } else // store
        {
            if (val == 0)
                return new Stloc0();
            else if (val == 1)
                return new Stloc1();
            else if (val == 2)
                return new Stloc2();
            else if (val == 3)
                return new Stloc3();
            else if (val <= 0xff)
                return new Stlocs((byte) val);
            else
                return new Stloc((short) val);
        }
    }
    return null;
}
