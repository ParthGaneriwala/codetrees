public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true) {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
            break;
        }
        switch(field.id) {
            case // KEYSPACE
            1:
                if (field.type == TType.STRING) {
                    this.keyspace = iprot.readString();
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case // COLUMN_FAMILY
            2:
                if (field.type == TType.STRING) {
                    this.column_family = iprot.readString();
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case // START
            3:
                if (field.type == TType.STRING) {
                    this.start = iprot.readString();
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case // FINISH
            4:
                if (field.type == TType.STRING) {
                    this.finish = iprot.readString();
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case // COUNT
            5:
                if (field.type == TType.I32) {
                    this.count = iprot.readI32();
                    setCountIsSet(true);
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case // CONSISTENCY_LEVEL
            6:
                if (field.type == TType.I32) {
                    this.consistency_level = ConsistencyLevel.findByValue(iprot.readI32());
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            default:
                TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    // check for required fields of primitive type, which can't be checked in the validate method
    if (!isSetCount()) {
        throw new TProtocolException("Required field 'count' was not found in serialized data! Struct: " + toString());
    }
    validate();
}
