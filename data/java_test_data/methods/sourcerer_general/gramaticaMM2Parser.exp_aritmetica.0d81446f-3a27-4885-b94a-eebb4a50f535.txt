// $ANTLR start "exp_aritmetica"
public final gramaticaMM2Parser.exp_aritmetica_return exp_aritmetica() throws RecognitionException {
    gramaticaMM2Parser.exp_aritmetica_return retval = new gramaticaMM2Parser.exp_aritmetica_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token MINUS172 = null;
    Token PLUS173 = null;
    gramaticaMM2Parser.termo_return termo171 = null;
    gramaticaMM2Parser.termo_return termo174 = null;
    CommonTree MINUS172_tree = null;
    CommonTree PLUS173_tree = null;
    RewriteRuleTokenStream stream_PLUS = new RewriteRuleTokenStream(adaptor, "token PLUS");
    RewriteRuleTokenStream stream_MINUS = new RewriteRuleTokenStream(adaptor, "token MINUS");
    RewriteRuleSubtreeStream stream_termo = new RewriteRuleSubtreeStream(adaptor, "rule termo");
    try {
        // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:149:17: ( termo ( ( MINUS | PLUS ) termo )* -> ^( ARITMETIC_EXPRESSION ( termo )+ ) )
        // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:149:19: termo ( ( MINUS | PLUS ) termo )*
        {
            pushFollow(FOLLOW_termo_in_exp_aritmetica1622);
            termo171 = termo();
            state._fsp--;
            stream_termo.add(termo171.getTree());
            // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:149:25: ( ( MINUS | PLUS ) termo )*
            loop33: do {
                int alt33 = 2;
                int LA33_0 = input.LA(1);
                if (((LA33_0 >= MINUS && LA33_0 <= PLUS))) {
                    alt33 = 1;
                }
                switch(alt33) {
                    case 1:
                        // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:149:26: ( MINUS | PLUS ) termo
                        {
                            // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:149:26: ( MINUS | PLUS )
                            int alt32 = 2;
                            int LA32_0 = input.LA(1);
                            if ((LA32_0 == MINUS)) {
                                alt32 = 1;
                            } else if ((LA32_0 == PLUS)) {
                                alt32 = 2;
                            } else {
                                NoViableAltException nvae = new NoViableAltException("", 32, 0, input);
                                throw nvae;
                            }
                            switch(alt32) {
                                case 1:
                                    // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:149:27: MINUS
                                    {
                                        MINUS172 = (Token) match(input, MINUS, FOLLOW_MINUS_in_exp_aritmetica1626);
                                        stream_MINUS.add(MINUS172);
                                    }
                                    break;
                                case 2:
                                    // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:149:33: PLUS
                                    {
                                        PLUS173 = (Token) match(input, PLUS, FOLLOW_PLUS_in_exp_aritmetica1628);
                                        stream_PLUS.add(PLUS173);
                                    }
                                    break;
                            }
                            pushFollow(FOLLOW_termo_in_exp_aritmetica1631);
                            termo174 = termo();
                            state._fsp--;
                            stream_termo.add(termo174.getTree());
                        }
                        break;
                    default:
                        break loop33;
                }
            } while (true);
            // AST REWRITE
            // elements: termo
            // token labels:
            // rule labels: retval
            // token list labels:
            // rule list labels:
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", retval != null ? retval.tree : null);
            root_0 = (CommonTree) adaptor.nil();
            // 149:47: -> ^( ARITMETIC_EXPRESSION ( termo )+ )
            {
                // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:149:50: ^( ARITMETIC_EXPRESSION ( termo )+ )
                {
                    CommonTree root_1 = (CommonTree) adaptor.nil();
                    root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(ARITMETIC_EXPRESSION, "ARITMETIC_EXPRESSION"), root_1);
                    if (!(stream_termo.hasNext())) {
                        throw new RewriteEarlyExitException();
                    }
                    while (stream_termo.hasNext()) {
                        adaptor.addChild(root_1, stream_termo.nextTree());
                    }
                    stream_termo.reset();
                    adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
