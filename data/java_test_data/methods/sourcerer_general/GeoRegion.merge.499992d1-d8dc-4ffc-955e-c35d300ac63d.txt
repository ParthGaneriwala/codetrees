private static int merge(final List<SubRectangle> rectangles, int index, SubRectangle newFront) {
    if (rectangles.size() < 2)
        return -1;
    SubRectangle front = (SubRectangle) rectangles.remove(0);
    while (index != rectangles.size()) {
        SubRectangle that = (SubRectangle) rectangles.get(index);
        SubRectangle rect = null;
        if (front.mMinLong == that.mMinLong && front.mMaxLong == that.mMaxLong) {
            if (front.mMaxLat == that.mMinLat) {
                rect = newFront;
                rect.mMinLong = front.mMinLong;
                rect.mMaxLong = front.mMaxLong;
                rect.mMinLat = front.mMinLat;
                rect.mMaxLat = that.mMaxLat;
            } else if (front.mMinLat == that.mMaxLat) {
                rect = newFront;
                rect.mMinLong = front.mMinLong;
                rect.mMaxLong = front.mMaxLong;
                rect.mMinLat = that.mMinLat;
                rect.mMaxLat = front.mMaxLat;
            }
        } else if (front.mMinLat == that.mMinLat && front.mMaxLat == that.mMaxLat) {
            if (front.mMaxLong == that.mMinLong) {
                rect = newFront;
                rect.mMinLat = front.mMinLat;
                rect.mMaxLat = front.mMaxLat;
                rect.mMinLong = front.mMinLong;
                rect.mMaxLong = that.mMaxLong;
            } else if (front.mMinLong == that.mMaxLong) {
                rect = newFront;
                rect.mMinLat = front.mMinLat;
                rect.mMaxLat = front.mMaxLat;
                rect.mMinLong = that.mMinLong;
                rect.mMaxLong = front.mMaxLong;
            }
        }
        if (rect != null) {
            rect.mChild1 = front;
            rect.mChild2 = that;
            rectangles.remove(index);
            rectangles.add(0, rect);
            return index + 1;
        }
        index++;
    }
    rectangles.add(0, front);
    return -1;
}
