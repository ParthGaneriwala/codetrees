public void execute() throws Exception {
    // throws JobExecutionException {
    List<Post> posts = new ArrayList<Post>();
    try {
        Delicious delicious = new Delicious(this.deliciousUserInfo.getUsername(), this.deliciousUserInfo.getPassword());
        posts = (ArrayList) delicious.getAllPosts();
    } catch (Exception e) {
        // Souvent un erreur 503 venant du service
        // On recommencera dans une heure
        e.printStackTrace();
        throw new Exception(e.getMessage());
    }
    Session session = DataStaticService.getHibernateSessionFactory().openSession();
    Transaction tx = session.beginTransaction();
    tx.begin();
    for (Iterator iter = posts.iterator(); iter.hasNext(); ) {
        // Transaction tx = session.beginTransaction();
        // tx.begin();
        del.icio.us.beans.Post postDel = (del.icio.us.beans.Post) iter.next();
        Post post = new Post();
        post.setDescription(postDel.getDescription());
        post.setExtended(postDel.getExtended());
        post.setHash(postDel.getHash());
        post.setHref(postDel.getHref());
        post.setShared(postDel.isShared());
        post.setTime(postDel.getTime());
        List<Tag> tags = new ArrayList<Tag>();
        String[] listeTags = postDel.getTagsAsArray(" ");
        for (int i = 0; i < listeTags.length; i++) {
            Tag tag = new Tag();
            tag.setName(listeTags[i].toString());
            tags.add(tag);
            // session.saveOrUpdate(tag);
            session.merge(tag);
        }
        post.setTags(tags);
        // session.saveOrUpdate(post);
        session.merge(post);
        // tx.commit();
        session.flush();
        session.clear();
    }
    tx.commit();
    // session.flush();
    session.close();
}
