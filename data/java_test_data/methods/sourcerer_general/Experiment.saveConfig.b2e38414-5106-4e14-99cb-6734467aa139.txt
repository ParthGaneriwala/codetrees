public void saveConfig(String configfile) throws IOException {
    try {
        Element rootElement = doc.getDocumentElement();
        if (rootElement == null) {
            rootElement = doc.createElement(XML_ROOT_ELEMENT_NAME);
            doc.appendChild(rootElement);
        }
        Element configElement = getConfigElement();
        if (files != null) {
            configElement.appendChild(files.toXML(doc));
        }
        if (LMs.size() > 0) {
            NodeList nodes = XMLUtils.getChildrenElementsByTagName(configElement, LanguageModel.XML_ELEMENT_NAME);
            for (int i = 0; i < nodes.getLength(); ++i) {
                configElement.removeChild(nodes.item(i));
            }
            for (LanguageModel lm : LMs.values()) {
                configElement.appendChild(lm.createXML(doc));
            }
        }
        if (forests.size() > 0) {
            NodeList nodes = XMLUtils.getChildrenElementsByTagName(configElement, ForestModel.XML_ELEMENT_NAME);
            for (int i = 0; i < nodes.getLength(); ++i) {
                configElement.removeChild(nodes.item(i));
            }
            for (ForestModel forest : forests.values()) {
                configElement.appendChild(forest.createXML(doc));
            }
        }
        if (tupleDescription != null) {
            configElement.replaceChild(tupleDescription.createXML(doc), getTupleDescriptionConfig());
        }
        Element classElement = getClassesConfig();
        {
            Element old = XMLUtils.getFirstElementByTagName(classElement, XML_CONFIG_LM_CLASS_ELEMENT_NAME);
            Element n = doc.createElement(XML_CONFIG_LM_CLASS_ELEMENT_NAME);
            n.setTextContent(LanguageModel.class.getCanonicalName());
            if (old == null) {
                classElement.appendChild(n);
            } else {
                classElement.replaceChild(n, old);
            }
        }
        if (tupleParser != null) {
            NodeList nl = classElement.getElementsByTagName(XML_CONFIG_PARSER_CLASS_ELEMENT_NAME);
            Element e = doc.createElement(XML_CONFIG_PARSER_CLASS_ELEMENT_NAME);
            e.setTextContent(tupleParser.getClass().getCanonicalName());
            if (nl == null || nl.getLength() == 0) {
                classElement.appendChild(e);
            } else {
                classElement.replaceChild(e, nl.item(0));
            }
        }
        if (hft != null) {
            Element e = XMLUtils.getFirstElementByTagName(configElement, HFT.XML_ELEMENT_NAME);
            if (e != null) {
                configElement.replaceChild(hft.createXML(doc), e);
            } else {
                configElement.appendChild(hft.createXML(doc));
            }
        }
        if (wordTree != null) {
            Element e = XMLUtils.getFirstElementByTagName(configElement, WordTree.XML_ELEMENT_NAME);
            if (e != null) {
                configElement.replaceChild(wordTree.createXML(doc), e);
            } else {
                configElement.appendChild(wordTree.createXML(doc));
            }
        }
        DOMImplementationRegistry registry = DOMImplementationRegistry.newInstance();
        DOMImplementationLS impl = (DOMImplementationLS) registry.getDOMImplementation("LS");
        LSSerializer writer = impl.createLSSerializer();
        writer.getDomConfig().setParameter("format-pretty-print", Boolean.TRUE);
        LSOutput output = impl.createLSOutput();
        output.setEncoding("UTF-8");
        FileWriter fWriter = new FileWriter(configfile);
        output.setCharacterStream(fWriter);
        writer.write(doc.getDocumentElement(), output);
        fWriter.close();
    } catch (IllegalAccessException e) {
        e.printStackTrace();
    } catch (ClassNotFoundException e) {
        e.printStackTrace();
    } catch (InstantiationException e) {
        e.printStackTrace();
    }
}
