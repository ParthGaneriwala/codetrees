@Override
protected void download(HttpServletRequest request, HttpServletResponse response) throws Exception {
    try {
        XecureServlet xservlet = new XecureServlet(((XecureHttpServletRequest) request).req, ((XecureHttpServletResponse) response).res);
        XecureFileOutputStream xecureFileOutputStream = new XecureFileOutputStream(xservlet.getXecureSession(), xservlet.request, xservlet.response, response.getOutputStream());
        String fileId = request.getParameter("fileId");
        StringBuilder sb = new StringBuilder();
        FileDTO fileDTO;
        fileDTO = fileManager.selectFileByFileId(fileId);
        logger.debug("fileDTO: {}", fileDTO);
        String repositoryPath = fileDTO.getRepositoryPath();
        String uniqueFileName = fileDTO.getUniqueFileName();
        String realFileName = fileDTO.getRealFileName();
        InputStream inputStream = null;
        if (StringUtil.isNotEmpty(repositoryPath)) {
            // FILE_SYSTEM
            sb.setLength(0);
            sb.append(repositoryPath);
            if (!repositoryPath.endsWith(File.separator)) {
                sb.append(File.separator);
            }
            sb.append(uniqueFileName);
            File file = new File(sb.toString());
            inputStream = new FileInputStream(file);
        } else {
            // DATABASE
            byte[] bytes = new byte[] {};
            if (fileDTO.getFileSize() > 0) {
                bytes = fileDTO.getBytes();
            }
            inputStream = new ByteArrayInputStream(bytes);
        }
        xecureFileOutputStream.writeHeader((int) fileDTO.getFileSize());
        // set response contenttype, header
        String encodedRealFileName = URLEncoder.encode(realFileName, "UTF-8");
        logger.debug("realFileName: {}", realFileName);
        logger.debug("encodedRealFileName: {}", encodedRealFileName);
        response.setContentType(org.codelabor.system.file.FileConstants.CONTENT_TYPE);
        sb.setLength(0);
        if (request.getHeader(HttpRequestHeader.USER_AGENT).indexOf("MSIE5.5") > -1) {
            sb.append("filename=");
        } else {
            sb.append("attachment; filename=");
        }
        sb.append(encodedRealFileName);
        response.setHeader(HttpResponseHeader.CONTENT_DISPOSITION, sb.toString());
        logger.debug("header: {}", sb.toString());
        logger.debug("character encoding: {}", response.getCharacterEncoding());
        logger.debug("content type: {}", response.getContentType());
        logger.debug("bufferSize: {}", response.getBufferSize());
        logger.debug("locale: {}", response.getLocale());
        BufferedInputStream bufferdInputStream = new BufferedInputStream(inputStream);
        int bytesRead;
        byte[] buffer = new byte[2048];
        while ((bytesRead = bufferdInputStream.read(buffer)) != -1) {
            xecureFileOutputStream.write(buffer, 0, bytesRead);
        }
        // flush
        xecureFileOutputStream.flush();
        // close stream
        inputStream.close();
        bufferdInputStream.close();
        xecureFileOutputStream.close();
    } catch (FileNotFoundException e) {
        e.printStackTrace();
        logger.error(e.getMessage());
    } catch (IOException e) {
        e.printStackTrace();
        logger.error(e.getMessage());
    } catch (XecureServletConfigException e) {
        e.printStackTrace();
        logger.error(e.getMessage());
    } catch (XecureServletException e) {
        e.printStackTrace();
        logger.error(e.getMessage());
    }
}
