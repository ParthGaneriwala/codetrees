private void processEvent(final PsiFile psiFile, final List<Integer> lineLengthCache, final AuditEvent event) {
    final char[] text = psiFile.textToCharArray();
    if (checks != null) {
        for (final Check check : checks) {
            if (!check.process(psiFile, event)) {
                return;
            }
        }
    }
    int offset;
    boolean endOfLine = false;
    // start of file
    if (event.getLine() == 0) {
        // start of file errors
        offset = event.getColumn();
    // line offset is cached...
    } else if (event.getLine() <= lineLengthCache.size()) {
        offset = lineLengthCache.get(event.getLine() - 1) + event.getColumn();
    // further search required
    } else {
        // start from end of cached data
        offset = lineLengthCache.get(lineLengthCache.size() - 1);
        int line = lineLengthCache.size();
        int column = 0;
        for (int i = offset; i < text.length; ++i) {
            final char character = text[i];
            // for linefeeds we need to handle CR, LF and CRLF,
            // hence we accept either and only trigger a new
            // line on the LF of CRLF.
            final char nextChar = (i + 1) < text.length ? text[i + 1] : '\0';
            if (character == '\n' || character == '\r' && nextChar != '\n') {
                ++line;
                ++offset;
                lineLengthCache.add(offset);
                column = 0;
            } else {
                ++column;
                ++offset;
            }
            // need to go to end of line though
            if (event.getLine() == line && event.getColumn() == column) {
                if (column == 0 && Character.isWhitespace(nextChar)) {
                    // move line errors to after EOL
                    endOfLine = true;
                }
                break;
            }
        }
    }
    final PsiElement victim;
    victim = psiFile.findElementAt(offset);
    if (victim == null) {
        LOG.warn("Couldn't find victim for error: " + event.getFileName() + "(" + event.getLine() + ":" + event.getColumn() + ") " + event.getMessage());
    } else {
        final String message = event.getLocalizedMessage() != null ? event.getLocalizedMessage().getMessage() : event.getMessage();
        final ProblemHighlightType problemType = ProblemHighlightType.GENERIC_ERROR_OR_WARNING;
        final ProblemDescriptor problem = manager.createProblemDescriptor(victim, message, (LocalQuickFix[]) null, problemType, false, endOfLine);
        if (usingExtendedDescriptors) {
            final ProblemDescriptor delegate = new ExtendedProblemDescriptor(problem, event.getSeverityLevel(), event.getLine(), event.getColumn());
            addProblem(psiFile, delegate);
        } else {
            addProblem(psiFile, problem);
        }
    }
}
