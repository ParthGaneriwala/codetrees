public void encrypt(String inputFile, String outputFile, IKey key) throws FileNotFoundException, IOException {
    SplineKey spKey = (SplineKey) key;
    List<Integer> plainText = TextWork.readText(inputFile);
    List<Integer> encryptedText = new ArrayList<Integer>();
    List<List<Integer>> blocks = TextWork.getBlocks(plainText, BLOCK_SIZE);
    int K = spKey.getRounds();
    for (int j = 0; j < blocks.size(); j++) {
        SplineKey k = spKey.clone();
        List<Integer> wavelet = new ArrayList<Integer>();
        List<Integer> block = blocks.get(j);
        // System.out.println("block: " + j + "\t" + block);
        for (int i = 0; i < K; i++) {
            if (i == K - 1) {
            // System.out.println("aasd");
            }
            int num = k.nextNumber();
            int e = k.removeElem(num);
            Binary c_4 = new Binary(block.get(modul(num - 4, block.size())));
            Binary c_3 = new Binary(block.get(modul(num - 3, block.size())));
            Binary c_2 = new Binary(block.get(modul(num - 2, block.size())));
            Binary c_1 = new Binary(block.get(modul(num, block.size())));
            Binary eBin = new Binary(e);
            Binary A = eBin.sub(new Binary(k.getElem(num)));
            Binary B = eBin.sub(new Binary(k.getElem(num - 1)));
            Binary C = eBin.sub(new Binary(k.getElem(num - 2)));
            Binary D = eBin.sub(new Binary(k.getElem(num - 3)));
            Binary E = eBin.sub(new Binary(k.getElem(num + 1)));
            Binary F = new Binary(k.getElem(num + 2)).sub(new Binary(k.getElem(num - 1)));
            Binary Div_D = getInverse(D, MODULE);
            Binary Div_CD = getInverse(C.mult(D).mod(MODULE), MODULE);
            Binary Div_C = getInverse(C, MODULE);
            Binary Div_F = getInverse(F, MODULE);
            int new_c_3 = A.mult(Div_D).mult(c_4.sub(c_3)).sub(c_3).mod(MODULE).intValue();
            int new_c_2 = A.mult(E).mult(Div_CD).mult(c_4.sub(c_3)).add(E.mult(Div_C).mult(c_3.sub(c_2))).add(c_2).mod(MODULE).intValue();
            block.set(modul(num - 2, block.size()), new_c_2);
            block.set(modul(num - 3, block.size()), new_c_3);
            Binary cRem = new Binary(block.remove(modul(num - 1, block.size())));
            Binary c2Bin = new Binary(new_c_2);
            int b = cRem.sub(c2Bin).add(B.mult(Div_F).mult(c2Bin.sub(c_1))).mod(MODULE).intValue();
            wavelet.add(b);
            // temporary for monitoring
            if (i == K - 1) {
            // System.out.println(cCur + " - " + (xNext-xCur)*div*(cPrev) + " - " + (xCur-e)*div*(cNext));
            // System.out.println("A: " + A + "\tB: " + B + "\tC:" + C
            // + "\tD:" + D + "\tE:" + E + "\tF:" + F + "\tnum:" + num + "\te:" + e
            // + "\tc_1:" + c_1 + "\tc_2:" + c_2 + "\tc_3:" + c_3 + "\tc_4:" + c_4
            // + "\tcRem:" + cRem);
            }
            if (i != K - 1) {
                block = shiftRight(block);
            }
        // System.out.println(" Result of round â„–" + i + ": b: " + block + " w: " + wavelet);
        }
        // System.out.println("block: " + j + "\t" + Calc.modArray(block, 256));
        block.addAll(wavelet);
        encryptedText.addAll(block);
    }
    TextWork.writeText(outputFile, encryptedText);
}
