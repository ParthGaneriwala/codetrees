protected void processCloudletSubmit(SimEvent ev, boolean ack) {
    updateCloudletProcessing();
    try {
        // gets the Cloudlet object
        Cloudlet cl = (Cloudlet) ev.getData();
        // checks whether this Cloudlet has finished or not
        if (cl.isFinished()) {
            String name = CloudSim.getEntityName(cl.getUserId());
            Log.printLine(getName() + ": Warning - Cloudlet #" + cl.getCloudletId() + " owned by " + name + " is already completed/finished.");
            Log.printLine("Therefore, it is not being executed again");
            Log.printLine();
            // for this Cloudlet back.
            if (ack) {
                int[] data = new int[3];
                data[0] = getId();
                data[1] = cl.getCloudletId();
                data[2] = CloudSimTags.FALSE;
                // unique tag = operation tag
                int tag = CloudSimTags.CLOUDLET_SUBMIT_ACK;
                sendNow(cl.getUserId(), tag, data);
            }
            sendNow(cl.getUserId(), CloudSimTags.CLOUDLET_RETURN, cl);
            return;
        }
        // process this Cloudlet to this CloudResource
        cl.setResourceParameter(getId(), getCharacteristics().getCostPerSecond(), getCharacteristics().getCostPerBw());
        int userId = cl.getUserId();
        int vmId = cl.getVmId();
        // time to transfer the files
        double fileTransferTime = predictFileTransferTime(cl.getRequiredFiles());
        Host host = getVmAllocationPolicy().getHost(vmId, userId);
        Vm vm = host.getVm(vmId, userId);
        CloudletScheduler scheduler = vm.getCloudletScheduler();
        double estimatedFinishTime = scheduler.cloudletSubmit(cl, fileTransferTime);
        // if (estimatedFinishTime > 0.0 && estimatedFinishTime < getSchedulingInterval()) { //if this cloudlet is in the exec queue
        if (estimatedFinishTime > 0.0) {
            // if this cloudlet is in the exec queue
            // double estimatedFinishTime = (cl.getCloudletTotalLength()/(capacity*cl.getPesNumber())); //time to process the cloudlet
            // Log.printLine(estimatedFinishTime+"="+gl.getCloudletLength()+"/("+capacity+"*"+gl.getNumPE()+")");
            estimatedFinishTime += fileTransferTime;
            estimatedFinishTime -= CloudSim.clock();
            // Log.printLine(CloudSim.clock()+": Next event set to "+estimatedFinishTime);
            send(getId(), estimatedFinishTime, CloudSimTags.VM_DATACENTER_EVENT);
        }
        if (ack) {
            int[] data = new int[3];
            data[0] = getId();
            data[1] = cl.getCloudletId();
            data[2] = CloudSimTags.TRUE;
            // unique tag = operation tag
            int tag = CloudSimTags.CLOUDLET_SUBMIT_ACK;
            sendNow(cl.getUserId(), tag, data);
        }
    } catch (ClassCastException c) {
        Log.printLine(getName() + ".processCloudletSubmit(): " + "ClassCastException error.");
        c.printStackTrace();
    } catch (Exception e) {
        Log.printLine(getName() + ".processCloudletSubmit(): " + "Exception error.");
        e.printStackTrace();
    }
    checkCloudletCompletion();
}
