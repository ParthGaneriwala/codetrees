public void setMaterialState(Color4f frontAmbient, Color4f frontDiffuse, Color4f frontSpecular, Color4f frontEmission, float frontShininess, Color4f backAmbient, Color4f backDiffuse, Color4f backSpecular, Color4f backEmission, float backShininess, int colorMaterialMode, int colorMaterialFace, boolean twoSide, boolean localViewer, boolean separateSpecular, boolean flatShading) {
    // invalidate any cached reference
    _states[RenderState.MATERIAL_STATE] = null;
    if (!_frontAmbient.equals(frontAmbient)) {
        _frontAmbient.set(frontAmbient).get(_vbuf).rewind();
        GL11.glMaterial(GL11.GL_FRONT, GL11.GL_AMBIENT, _vbuf);
    }
    if (!_frontDiffuse.equals(frontDiffuse)) {
        _frontDiffuse.set(frontDiffuse).get(_vbuf).rewind();
        GL11.glMaterial(GL11.GL_FRONT, GL11.GL_DIFFUSE, _vbuf);
    }
    if (!_frontSpecular.equals(frontSpecular)) {
        _frontSpecular.set(frontSpecular).get(_vbuf).rewind();
        GL11.glMaterial(GL11.GL_FRONT, GL11.GL_SPECULAR, _vbuf);
    }
    if (!_frontEmission.equals(frontEmission)) {
        _frontEmission.set(frontEmission).get(_vbuf).rewind();
        GL11.glMaterial(GL11.GL_FRONT, GL11.GL_EMISSION, _vbuf);
    }
    if (_frontShininess != frontShininess) {
        GL11.glMaterialf(GL11.GL_FRONT, GL11.GL_SHININESS, _frontShininess = frontShininess);
    }
    if (twoSide) {
        if (!_backAmbient.equals(backAmbient)) {
            _backAmbient.set(backAmbient).get(_vbuf).rewind();
            GL11.glMaterial(GL11.GL_BACK, GL11.GL_AMBIENT, _vbuf);
        }
        if (!_backDiffuse.equals(backDiffuse)) {
            _backDiffuse.set(backDiffuse).get(_vbuf).rewind();
            GL11.glMaterial(GL11.GL_BACK, GL11.GL_DIFFUSE, _vbuf);
        }
        if (!_backSpecular.equals(backSpecular)) {
            _backSpecular.set(backSpecular).get(_vbuf).rewind();
            GL11.glMaterial(GL11.GL_BACK, GL11.GL_SPECULAR, _vbuf);
        }
        if (!_backEmission.equals(backEmission)) {
            _backEmission.set(backEmission).get(_vbuf).rewind();
            GL11.glMaterial(GL11.GL_BACK, GL11.GL_EMISSION, _vbuf);
        }
        if (_backShininess != backShininess) {
            GL11.glMaterialf(GL11.GL_BACK, GL11.GL_SHININESS, _backShininess = backShininess);
        }
    }
    boolean colorMaterialEnabled = (colorMaterialMode != -1);
    if (_colorMaterialEnabled != Boolean.valueOf(colorMaterialEnabled)) {
        setCapability(GL11.GL_COLOR_MATERIAL, _colorMaterialEnabled = colorMaterialEnabled);
    }
    if (colorMaterialEnabled && (_colorMaterialFace != colorMaterialFace || _colorMaterialMode != colorMaterialMode)) {
        GL11.glColorMaterial(_colorMaterialFace = colorMaterialFace, _colorMaterialMode = colorMaterialMode);
    }
    if (_twoSide != Boolean.valueOf(twoSide)) {
        GL11.glLightModeli(GL11.GL_LIGHT_MODEL_TWO_SIDE, (_twoSide = twoSide) ? 1 : 0);
    }
    if (_localViewer != Boolean.valueOf(localViewer)) {
        GL11.glLightModeli(GL11.GL_LIGHT_MODEL_LOCAL_VIEWER, (_localViewer = localViewer) ? 1 : 0);
    }
    if (_separateSpecular != Boolean.valueOf(separateSpecular)) {
        GL11.glLightModeli(GL12.GL_LIGHT_MODEL_COLOR_CONTROL, (_separateSpecular = separateSpecular) ? GL12.GL_SEPARATE_SPECULAR_COLOR : GL12.GL_SINGLE_COLOR);
    }
    if (_flatShading != Boolean.valueOf(flatShading)) {
        GL11.glShadeModel((_flatShading = flatShading) ? GL11.GL_FLAT : GL11.GL_SMOOTH);
    }
}
