@Test(timeout = DEFAULT_TEST_TIMEOUT)
public void testChildStillRunning() throws InterruptedException {
    Task parentTask = new Task("parent", "groupName", "sysExecJob", false, true, "ls", defaultTimerSchedule);
    taskManager.save(parentTask);
    Task childTask = new Task("child", "groupName", "sysExecJob", true, true, "sleep 10", "");
    taskManager.save(childTask);
    parentTask.addChildTask(childTask);
    taskManager.save(parentTask);
    schedulerManager.runTaskNow(parentTask);
    waitForTask(parentTask);
    // give task 2 a chance to get going
    Thread.sleep(1000);
    assertTrue(taskRunManager.isRunning(childTask.getId()));
    // now run task 1 again
    schedulerManager.runTaskNow(parentTask);
    waitForTask(parentTask);
    waitForTask(childTask);
    // now run 1 again, should all go fine
    schedulerManager.runTaskNow(parentTask);
    waitForTask(childTask);
    List<TaskRun> parentTaskRuns = taskRunManager.findByTaskId(parentTask.getId());
    assertEquals(3, parentTaskRuns.size());
    assertEquals(Status.SUCCESS, parentTaskRuns.get(0).getStatus());
    assertEquals(Status.SUCCESS, parentTaskRuns.get(1).getStatus());
    assertEquals(Status.SUCCESS, parentTaskRuns.get(2).getStatus());
    List<TaskRun> childTaskRuns = taskRunManager.findByTaskId(childTask.getId());
    assertEquals(3, childTaskRuns.size());
    assertEquals(Status.SUCCESS, childTaskRuns.get(0).getStatus());
    assertEquals(Status.ABORTED, childTaskRuns.get(1).getStatus());
    assertEquals(Status.SUCCESS, childTaskRuns.get(2).getStatus());
}
