public boolean visitLeave(TypeNode node) {
    newVoidCode(node);
    int n = node.nChildren();
    if (node.child(n - 1).getSymbol().isPuctuation() && !node.child(0).getSymbol().isPuctuation()) {
        // int[5] a;
        ASMCodeFragment[] upperBounds = new ASMCodeFragment[100];
        ASMCodeFragment baseAddr = removeAddressCode(node.child(n - 2));
        int nDims = node.child(n - 2).getBinding().getNumberOfDim();
        // store number of dims
        code.append(baseAddr);
        code.add(PushI, nDims);
        // it must be int
        code.add(StoreI);
        for (int i = 0; i < nDims; i++) {
            upperBounds[i] = removeValueCode(node.child(i));
        }
        // store upper bounds
        for (int i = 0; i < nDims; i++) {
            // code.append(baseAddr);
            code.add(PushD, "$-main-scope-space");
            code.add(PushI, node.child(n - 2).getBinding().getMemoryLocation().getOffset());
            code.add(Add);
            code.add(PushI, (i + 1) * 4);
            code.add(Add);
            code.append(upperBounds[i]);
            // it must be int
            code.add(StoreI);
        }
        return true;
    }
    if (node.child(n - 1).getSymbol().isPuctuation() && !node.child(0).getSymbol().isPuctuation()) {
        // call by reference?????????????????????????????????
        return true;
    }
    if (node.nChildren() == 1)
        return true;
    else if (node.nChildren() == 2) {
        ASMCodeFragment lvalue = removeAddressCode(node.child(1));
        ASMCodeFragment rvalue = removeValueCode(node.child(0));
        // ��û���� type�����µ����
        // order is important
        code.append(lvalue);
        code.append(rvalue);
        if (// type-dependent!
        node.child(0).getType() == PrimitiveType.FLOAT)
            code.add(StoreF);
        else if (node.child(0).getType() == PrimitiveType.INTEGER) {
            // type-dependent!
            if (node.getType() == PrimitiveType.FLOAT) {
                code.add(ConvertF);
                // type-dependent!
                code.add(StoreF);
            } else
                code.add(StoreI);
        } else if (// type-dependent!
        node.child(0).getType() == PrimitiveType.BOOLEAN)
            code.add(StoreI);
        else if (// type-dependent!
        node.child(0).getType() == PrimitiveType.STRING)
            code.add(Call, RunTime.STRING_COPY_ROUTINE);
        else
            return false;
        return true;
    } else
        return false;
}
