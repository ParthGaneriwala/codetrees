@Test
public void runDeferredBackground() {
    StartupProgressListener mockListener = createStrictMock(StartupProgressListener.class);
    mockListener.onStart(StartupTestSeq.TEST_BACKGROUND);
    mockListener.onNextTask(DeferredBackgroundTestTaskEnum.TEST_1);
    mockListener.onTaskFinished(eqAbstractStartupTask(DeferredBackgroundTestTaskEnum.TEST_1));
    mockListener.onNextTask(DeferredBackgroundTestTaskEnum.TEST_2_BACKGROUND);
    mockListener.onNextTask(DeferredBackgroundTestTaskEnum.TEST_3);
    mockListener.onTaskFinished(eqAbstractStartupTask(DeferredBackgroundTestTaskEnum.TEST_3));
    mockListener.onNextTask(DeferredBackgroundTestTaskEnum.TEST_4);
    mockListener.onTaskFinished(eqAbstractStartupTask(DeferredBackgroundTestTaskEnum.TEST_4));
    mockListener.onTaskFinished(eqAbstractStartupTask(DeferredBackgroundTestTaskEnum.TEST_2_BACKGROUND));
    mockListener.onStartupFinished(eqStartupTaskInfo(new StartupTaskEnum[] { DeferredBackgroundTestTaskEnum.TEST_1, DeferredBackgroundTestTaskEnum.TEST_3, DeferredBackgroundTestTaskEnum.TEST_4, DeferredBackgroundTestTaskEnum.TEST_2_BACKGROUND }), geq(0L));
    replay(mockListener);
    ClientRunner clientRunner = new ClientRunner();
    clientRunner.addStartupProgressListener(mockListener);
    clientRunner.start(StartupTestSeq.TEST_BACKGROUND);
    DeferredBackgroundTestTaskEnum.TEST_1.getTestDeferredStartupTask().finished();
    DeferredBackgroundTestTaskEnum.TEST_3.getTestDeferredStartupTask().finished();
    DeferredBackgroundTestTaskEnum.TEST_4.getTestDeferredStartupTask().finished();
    DeferredBackgroundTestTaskEnum.TEST_2_BACKGROUND.getTestDeferredStartupTask().finished();
    verify(mockListener);
}
