public void evaluateParams() {
    addParameter("templateDir", getTemplateDir());
    addParameter("theme", getTheme());
    String name = null;
    if (this.key != null) {
        if (this.name == null) {
            this.name = key;
        }
        if (this.label == null) {
            this.label = "%{getText('" + key + "')}";
        }
    }
    if (this.name != null) {
        name = findString(this.name);
        addParameter("name", name);
    }
    if (label != null) {
        addParameter("label", findString(label));
    }
    if (labelPosition != null) {
        addParameter("labelposition", findString(labelPosition));
    }
    if (requiredposition != null) {
        addParameter("requiredposition", findString(requiredposition));
    }
    if (required != null) {
        addParameter("required", findValue(required, Boolean.class));
    }
    if (disabled != null) {
        addParameter("disabled", findValue(disabled, Boolean.class));
    }
    if (tabindex != null) {
        addParameter("tabindex", findString(tabindex));
    }
    if (onclick != null) {
        addParameter("onclick", findString(onclick));
    }
    if (ondblclick != null) {
        addParameter("ondblclick", findString(ondblclick));
    }
    if (onmousedown != null) {
        addParameter("onmousedown", findString(onmousedown));
    }
    if (onmouseup != null) {
        addParameter("onmouseup", findString(onmouseup));
    }
    if (onmouseover != null) {
        addParameter("onmouseover", findString(onmouseover));
    }
    if (onmousemove != null) {
        addParameter("onmousemove", findString(onmousemove));
    }
    if (onmouseout != null) {
        addParameter("onmouseout", findString(onmouseout));
    }
    if (onfocus != null) {
        addParameter("onfocus", findString(onfocus));
    }
    if (onblur != null) {
        addParameter("onblur", findString(onblur));
    }
    if (onkeypress != null) {
        addParameter("onkeypress", findString(onkeypress));
    }
    if (onkeydown != null) {
        addParameter("onkeydown", findString(onkeydown));
    }
    if (onkeyup != null) {
        addParameter("onkeyup", findString(onkeyup));
    }
    if (onselect != null) {
        addParameter("onselect", findString(onselect));
    }
    if (onchange != null) {
        addParameter("onchange", findString(onchange));
    }
    if (accesskey != null) {
        addParameter("accesskey", findString(accesskey));
    }
    if (cssClass != null) {
        addParameter("cssClass", findString(cssClass));
    }
    if (cssStyle != null) {
        addParameter("cssStyle", findString(cssStyle));
    }
    if (title != null) {
        addParameter("title", findString(title));
    }
    // see if the value was specified as a parameter already
    if (parameters.containsKey("value")) {
        parameters.put("nameValue", parameters.get("value"));
    } else {
        if (evaluateNameValue()) {
            final Class valueClazz = getValueClassType();
            if (valueClazz != null) {
                if (value != null) {
                    addParameter("nameValue", findValue(value, valueClazz));
                } else if (name != null) {
                    String expr = name;
                    if (altSyntax()) {
                        expr = "%{" + expr + "}";
                    }
                    addParameter("nameValue", findValue(expr, valueClazz));
                }
            } else {
                if (value != null) {
                    addParameter("nameValue", findValue(value));
                } else if (name != null) {
                    addParameter("nameValue", findValue(name));
                }
            }
        }
    }
    final Form form = (Form) findAncestor(Form.class);
    // create HTML id element
    populateComponentHtmlId(form);
    if (form != null) {
        addParameter("form", form.getParameters());
        if (name != null) {
            // list should have been created by the form component
            List tags = (List) form.getParameters().get("tagNames");
            tags.add(name);
        }
    }
    // tooltip & tooltipConfig
    if (tooltipConfig != null) {
        addParameter("tooltipConfig", findValue(tooltipConfig));
    }
    if (tooltip != null) {
        addParameter("tooltip", findString(tooltip));
        Map tooltipConfigMap = getTooltipConfig(this);
        if (form != null) {
            // inform the containing form that we need tooltip javascript included
            form.addParameter("hasTooltip", Boolean.TRUE);
            // tooltipConfig defined in component itseilf will take precedence
            // over those defined in the containing form
            Map overallTooltipConfigMap = getTooltipConfig(form);
            // override parent form's tooltip config
            overallTooltipConfigMap.putAll(tooltipConfigMap);
            for (Iterator i = overallTooltipConfigMap.entrySet().iterator(); i.hasNext(); ) {
                Map.Entry entry = (Map.Entry) i.next();
                addParameter((String) entry.getKey(), entry.getValue());
            }
        } else {
            LOG.warn("No ancestor Form found, javascript based tooltip will not work, however standard HTML tooltip using alt and title attribute will still work ");
        }
    }
    evaluateExtraParams();
}
