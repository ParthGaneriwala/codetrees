public void poll() {
    boolean isActive = Display.isActive();
    boolean newActive = (!_wasActive && isActive);
    _wasActive = isActive;
    // process mouse events
    while (Mouse.next()) {
        int button = Mouse.getEventButton();
        if (button != -1) {
            boolean pressed = Mouse.getEventButtonState();
            if (pressed) {
                // Don't let the focusing click through, it has the wrong coordinates
                if (newActive) {
                    return;
                }
                mousePressed(_tickStamp, button, Mouse.getEventX(), Mouse.getEventY(), false);
            } else {
                mouseReleased(_tickStamp, button, Mouse.getEventX(), Mouse.getEventY(), false);
            }
            updateButtonModifier(button, pressed);
        }
        int delta = Mouse.getEventDWheel();
        if (delta != 0) {
            mouseWheeled(_tickStamp, Mouse.getEventX(), Mouse.getEventY(), (delta > 0) ? +1 : -1, false);
        }
        if (isActive && button == -1 && delta == 0) {
            mouseMoved(_tickStamp, Mouse.getEventX(), Mouse.getEventY(), false);
        }
    }
    // process keyboard events
    while (Keyboard.next()) {
        int key = Keyboard.getEventKey();
        boolean pressed = Keyboard.getEventKeyState();
        if (pressed) {
            keyPressed(_tickStamp, Keyboard.getEventCharacter(), key, false);
        } else {
            keyReleased(_tickStamp, Keyboard.getEventCharacter(), key, false);
        }
        updateKeyModifier(key, pressed);
    }
    if (isActive) {
        // make sure the pressed keys are really pressed
        if (!_pressedKeys.isEmpty()) {
            for (Iterator<KeyRecord> it = _pressedKeys.values().iterator(); it.hasNext(); ) {
                KeyRecord record = it.next();
                KeyEvent press = record.getPress();
                int key = press.getKeyCode();
                if (!Keyboard.isKeyDown(key)) {
                    dispatchEvent(getFocus(), new KeyEvent(this, _tickStamp, _modifiers, KeyEvent.KEY_RELEASED, press.getKeyChar(), key, false));
                    updateKeyModifier(key, false);
                    it.remove();
                }
            }
        }
    } else {
        // clear all modifiers and release all keys
        if (!_pressedKeys.isEmpty()) {
            for (KeyRecord record : _pressedKeys.values()) {
                KeyEvent press = record.getPress();
                dispatchEvent(getFocus(), new KeyEvent(this, _tickStamp, _modifiers, KeyEvent.KEY_RELEASED, press.getKeyChar(), press.getKeyCode(), false));
            }
            _pressedKeys.clear();
        }
        _modifiers = 0;
    }
    // process controller events
    while (Controllers.next()) {
        Controller controller = Controllers.getEventSource();
        if (Controllers.isEventButton()) {
            int index = Controllers.getEventControlIndex();
            if (controller.isButtonPressed(index)) {
                controllerPressed(controller, _tickStamp, index);
            } else {
                controllerReleased(controller, _tickStamp, index);
            }
        } else if (Controllers.isEventAxis()) {
            int index = Controllers.getEventControlIndex();
            controllerMoved(controller, _tickStamp, index, Controllers.isEventXAxis(), Controllers.isEventYAxis(), controller.getAxisValue(index));
        } else if (Controllers.isEventPovX()) {
            controllerPovXMoved(controller, _tickStamp, controller.getPovX());
        } else if (Controllers.isEventPovY()) {
            controllerPovYMoved(controller, _tickStamp, controller.getPovY());
        }
    }
}
