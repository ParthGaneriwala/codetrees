private void handleGlobalDeclarations() {
    TypeDeclarationStatement tds;
    /*
		//clock
		TypeDeclarationStatement tds = fomFactory.createTypeDeclarationStatement("ESMF_Clock", "clock");
		mp.getSpecificationPart().getDeclarationConstruct().add(tds);
		
		//calendar
		tds = fomFactory.createTypeDeclarationStatement("ESMF_Calendar", "calendar");
		mp.getSpecificationPart().getDeclarationConstruct().add(tds);
		
		//timeStep
		tds = fomFactory.createTypeDeclarationStatement("ESMF_TimeInterval", "timeStep");
		mp.getSpecificationPart().getDeclarationConstruct().add(tds);
		
		//startTime
		tds = fomFactory.createTypeDeclarationStatement("ESMF_Time", "startTime");
		mp.getSpecificationPart().getDeclarationConstruct().add(tds);

		//stopTime
		tds = fomFactory.createTypeDeclarationStatement("ESMF_Time", "stopTime");
		mp.getSpecificationPart().getDeclarationConstruct().add(tds);
		*/
    // global vm
    tds = fomFactory.createTypeDeclarationStatement("ESMF_VM", "vm");
    mp.getSpecificationPart().getDeclarationConstruct().add(tds);
    // global rc
    tds = fomFactory.createTypeDeclarationStatement(IntrinsicType.INTEGER, VAR_LOCAL_RC);
    mp.getSpecificationPart().getDeclarationConstruct().add(tds);
    // create global variables for gridded components
    for (ESMFComponent c : griddedComponents) {
        tds = fomFactory.createTypeDeclarationStatement("ESMF_GridComp", "comp_" + c.getName());
        mp.getSpecificationPart().getDeclarationConstruct().add(tds);
        compToName.put(c, "comp_" + c.getName());
    }
    // create global variables for couplers
    for (ESMFComponent cpl : couplerComponents) {
        tds = fomFactory.createTypeDeclarationStatement("ESMF_CplComp", "cpl_" + cpl.getName());
        mp.getSpecificationPart().getDeclarationConstruct().add(tds);
        compToName.put(cpl, "cpl_" + cpl.getName());
    }
    // create global variables for states
    for (ESMFComponentConnection conn : getComposition().getConnection()) {
        String stateName;
        // handle A to B direction (or bidirectional)
        if (conn.getDirection().isAtoB()) {
            stateName = "state_exp_" + conn.getEndpointA().getName();
            tds = fomFactory.createTypeDeclarationStatement("ESMF_State", stateName);
            mp.getSpecificationPart().getDeclarationConstruct().add(tds);
            stateToName.put(conn.getEndpointA().getExportState(), stateName);
            stateName = "state_imp_" + conn.getEndpointB().getName();
            tds = fomFactory.createTypeDeclarationStatement("ESMF_State", stateName);
            mp.getSpecificationPart().getDeclarationConstruct().add(tds);
            stateToName.put(conn.getEndpointB().getImportState(), stateName);
        }
        // handle B to A direction (or bidirectional)
        if (conn.getDirection().isBtoA()) {
            stateName = "state_imp_" + conn.getEndpointA().getName();
            tds = fomFactory.createTypeDeclarationStatement("ESMF_State", stateName);
            mp.getSpecificationPart().getDeclarationConstruct().add(tds);
            stateToName.put(conn.getEndpointA().getImportState(), stateName);
            stateName = "state_exp_" + conn.getEndpointB().getName();
            tds = fomFactory.createTypeDeclarationStatement("ESMF_State", stateName);
            mp.getSpecificationPart().getDeclarationConstruct().add(tds);
            stateToName.put(conn.getEndpointB().getExportState(), stateName);
        }
    }
}
