/**
 * This retrieves all posts created by Dan after 5-28-2007 which were rated by Erwin.
 *
 * @throws Exception
 */
@Test
public void testGetCreateAfter() throws Exception {
    HttpTester request = new HttpTester();
    HttpTester response = new HttpTester();
    request.setMethod("POST");
    request.setURI("/api/query");
    request.setVersion("HTTP/1.0");
    request.setHeader("Content-Type", "application/x-www-form-urlencoded");
    List<Map> filterList = new ArrayList<Map>();
    Map<String, String> ratedByMap = new HashMap<String, String>();
    // Erwin's id
    ratedByMap.put("author_post_id", "=3");
    ratedByMap.put("type", "='rating'");
    ratedByMap.put("output", "refers_to_id");
    ratedByMap.put("used_as", "id");
    Map<String, Object> createdAfterMap = new HashMap<String, Object>();
    // Dan's id
    createdAfterMap.put("author_post_id", "= 1");
    createdAfterMap.put("created_at", "> {ts '2007-5-28 00:00:00'}");
    createdAfterMap.put("output", "id");
    createdAfterMap.put("used_as", "id");
    createdAfterMap.put("parents", new Map[] { ratedByMap });
    filterList.add(createdAfterMap);
    request.setContent("filters=" + constructJSONString(filterList));
    response.parse(tester.getResponses(request.generate()));
    Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatus());
    Assert.assertNotNull(response.getContent());
    List<HashMap> posts = getJSONAsList(response.getContent());
    Map<Integer, IPost> expectedResult = new HashMap<Integer, IPost>();
    Post post1 = new Post(28, 1, 0, "message", "All I do is drink vodka and play chess", null);
    expectedResult.put(post1.getId(), post1);
    Post post2 = new Post(33, 1, 28, "comment", "I beat you in chess", null);
    expectedResult.put(post2.getId(), post2);
    Assert.assertEquals("Unexpected number of posts returned.", expectedResult.size(), posts.size());
    for (HashMap post : posts) {
        long postId = (Long) post.get("id");
        IPost expectedPost = expectedResult.get((int) postId);
        Assert.assertNotNull("Received unexpected post id = " + post.get("id"), expectedPost.getId());
        Assert.assertEquals("content did not match.", expectedPost.getContent(), post.get("content"));
        Assert.assertEquals("refersToId did not match.", expectedPost.getRefersToId(), post.get("refers_to_id"));
        Assert.assertEquals("type did not match.", expectedPost.getType(), post.get("type"));
        Assert.assertEquals("authorPostId did not match.", expectedPost.getAuthorPostId(), post.get("author_post_id"));
    }
}
