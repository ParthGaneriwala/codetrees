private void createFilter(Connection db, StringBuffer sqlFilter) {
    if (sqlFilter == null) {
        sqlFilter = new StringBuffer();
    }
    if (classifiedId > -1) {
        sqlFilter.append("AND classified_id = ? ");
    }
    /*
    if (projectCategoryId > -1) {
     sqlFilter.append("AND project_category_id = ? ");
    }
    */
    if (projectCategoryId > -1 || instanceId > -1 || groupId > -1 || openProjectsOnly || publicProjects == Constants.TRUE || forParticipant == Constants.TRUE) {
        sqlFilter.append("AND project_id IN (SELECT project_id FROM projects WHERE project_id > 0 ");
        if (projectCategoryId > -1) {
            sqlFilter.append("AND category_id = ? ");
        }
        if (instanceId > -1) {
            sqlFilter.append("AND instance_id = ?  ");
        }
        if (groupId > -1) {
            sqlFilter.append("AND group_id = ?  ");
        }
        if (openProjectsOnly) {
            sqlFilter.append("AND closedate IS NULL ");
        }
        if (publicProjects == Constants.TRUE) {
            sqlFilter.append("AND allow_guests = ? AND approvaldate IS NOT NULL ");
        }
        if (forParticipant == Constants.TRUE) {
            sqlFilter.append("AND (allows_user_observers = ? OR allow_guests = ?) AND approvaldate IS NOT NULL ");
        }
        sqlFilter.append(") ");
    }
    if (forUser > -1) {
        sqlFilter.append("AND (project_id IN (SELECT DISTINCT project_id FROM project_team WHERE user_id = ? " + "AND status IS NULL) OR project_id IN (SELECT project_id FROM projects WHERE allow_guests = ? AND approvaldate IS NOT NULL)) ");
    }
    if (categoryId > -1) {
        sqlFilter.append("AND classified_category_id = ? ");
    }
    if (categoryLowercaseName != null) {
        sqlFilter.append("AND classified_category_id IN (SELECT code FROM classified_category WHERE " + DatabaseUtils.toLowerCase(db, "item_name") + " = ?) ");
    }
    if (projectId > -1) {
        sqlFilter.append("AND project_id = ? ");
    }
    if (enabled != Constants.UNDEFINED) {
        sqlFilter.append("AND (enabled = ?) ");
    }
    if (onlyWithoutProjectCategory) {
        sqlFilter.append("AND project_category_id IS NOT NULL ");
    }
    if (onlyWithoutClassifiedCategory) {
        sqlFilter.append("AND classified_category_id IS NOT NULL ");
    }
    if (draft == Constants.TRUE) {
        sqlFilter.append("AND (publish_date IS NULL) ");
    }
    if (published == Constants.TRUE) {
        sqlFilter.append("AND (publish_date IS NOT NULL) ");
    }
    if (publishedYearMonth != null) {
        sqlFilter.append(" AND ( publish_date >= ? AND publish_date < ? )");
    }
    if (enteredBy > 0) {
        sqlFilter.append(" AND enteredby = ? ");
    }
    if (checkNullCategoryId) {
        sqlFilter.append("AND classified_category_id IS NULL ");
    }
    if (publishedRangeStart != null) {
        sqlFilter.append(" AND (publish_date >= ? ) ");
    }
    if (publishedRangeEnd != null) {
        sqlFilter.append(" AND (publish_date < ?) ");
    }
    if (currentClassifieds == Constants.TRUE) {
        sqlFilter.append("AND publish_date <= CURRENT_TIMESTAMP " + "AND (CURRENT_TIMESTAMP <= expiration_date OR expiration_date IS NULL) ");
    }
    if (archivedClassifieds == Constants.TRUE) {
        sqlFilter.append("AND CURRENT_TIMESTAMP > expiration_date " + "AND expiration_date IS NOT NULL " + "AND publish_date IS NOT NULL ");
    }
}
