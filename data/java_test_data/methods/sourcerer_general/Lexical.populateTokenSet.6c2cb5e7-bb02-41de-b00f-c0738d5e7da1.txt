public void populateTokenSet() throws IOException, InvocationTargetException {
    int line;
    int column;
    int columnBeginning;
    // class that reads the source file line by line
    LineReader lr = new LineReader(source);
    // Sets the initial values of the word marker
    line = 0;
    column = 0;
    columnBeginning = 0;
    // reads the first line
    String tmpLine = lr.readNext();
    // evaluates all the content of this line
    while (tmpLine != null) {
        // boolean variable used to indicate that a word is being read,
        // or in other words, that a valid symbol was read (not ' ' nor '\n').
        boolean busy = false;
        System.out.println(tmpLine);
        // stores the read line as an array to ease the evaluation
        char[] array = tmpLine.toCharArray();
        for (column = 0; column < array.length; column++) {
            // if a space or TAB symbol is detected
            if (array[column] == ' ' || array[column] == '\t') {
                // and another valid symbol/string was read before
                if (busy == true) {
                    // then it evaluates the previous symbol/string
                    evalLastState(line, columnBeginning);
                    // and sets the start of the next word for the next column
                    columnBeginning = column + 1;
                    // and resets the automata
                    this._lexAutomata.reset();
                } else // if no symbol/string was being read
                {
                    // then adds 1 to the position of the next word
                    columnBeginning = column + 1;
                    // and resets the automata
                    this._lexAutomata.reset();
                }
            } else // if a symbol was read
            {
                // sends the symbol for the automata for evaluation
                _lexAutomata.nxtValue(array[column]);
                // and flags the marker
                busy = true;
            }
        }
        // at the end of the line, if a word was being read
        if (busy == true) {
            // then it evaluates the previous symbol/string
            evalLastState(line, columnBeginning);
            // and resets the automata
            this._lexAutomata.reset();
        }
        // then the line counter is incremented
        line = line + 1;
        // and the next line is read
        tmpLine = lr.readNext();
    }
    // at the end of file, sets the EOF token
    Token EOF = new Token(TokenType.EOF, null, String.valueOf(line), String.valueOf(column));
    this._tokenSet.addToken(EOF);
    System.out.println("*****************************");
    System.out.println("Lexical analysis completed!!");
    System.out.println("*****************************");
    System.out.println('\n');
}
