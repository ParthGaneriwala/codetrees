// $ANTLR start "list_parameter"
public final CompiladoresParser.list_parameter_return list_parameter() throws RecognitionException {
    CompiladoresParser.list_parameter_return retval = new CompiladoresParser.list_parameter_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token COMMA42 = null;
    CompiladoresParser.parameter_return parameter41 = null;
    CompiladoresParser.parameter_return parameter43 = null;
    CommonTree COMMA42_tree = null;
    RewriteRuleTokenStream stream_COMMA = new RewriteRuleTokenStream(adaptor, "token COMMA");
    RewriteRuleSubtreeStream stream_parameter = new RewriteRuleSubtreeStream(adaptor, "rule parameter");
    try {
        dbg.enterRule(getGrammarFileName(), "list_parameter");
        if (getRuleLevel() == 0) {
            dbg.commence();
        }
        incRuleLevel();
        dbg.location(100, 1);
        try {
            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:100:16: ( parameter ( COMMA parameter )* -> parameter ( parameter )* )
            dbg.enterAlt(1);
            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:100:18: parameter ( COMMA parameter )*
            {
                dbg.location(100, 18);
                pushFollow(FOLLOW_parameter_in_list_parameter733);
                parameter41 = parameter();
                state._fsp--;
                stream_parameter.add(parameter41.getTree());
                dbg.location(100, 27);
                // /home/CIN/fmm/Desktop/grammar/Compiladores.g:100:27: ( COMMA parameter )*
                try {
                    dbg.enterSubRule(17);
                    loop17: do {
                        int alt17 = 2;
                        try {
                            dbg.enterDecision(17);
                            int LA17_0 = input.LA(1);
                            if ((LA17_0 == COMMA)) {
                                alt17 = 1;
                            }
                        } finally {
                            dbg.exitDecision(17);
                        }
                        switch(alt17) {
                            case 1:
                                dbg.enterAlt(1);
                                // /home/CIN/fmm/Desktop/grammar/Compiladores.g:100:28: COMMA parameter
                                {
                                    dbg.location(100, 28);
                                    COMMA42 = (Token) match(input, COMMA, FOLLOW_COMMA_in_list_parameter735);
                                    stream_COMMA.add(COMMA42);
                                    dbg.location(100, 34);
                                    pushFollow(FOLLOW_parameter_in_list_parameter737);
                                    parameter43 = parameter();
                                    state._fsp--;
                                    stream_parameter.add(parameter43.getTree());
                                }
                                break;
                            default:
                                break loop17;
                        }
                    } while (true);
                } finally {
                    dbg.exitSubRule(17);
                }
                // AST REWRITE
                // elements: parameter, parameter
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                retval.tree = root_0;
                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.tree : null);
                root_0 = (CommonTree) adaptor.nil();
                // 101:4: -> parameter ( parameter )*
                {
                    dbg.location(101, 7);
                    adaptor.addChild(root_0, stream_parameter.nextTree());
                    dbg.location(101, 16);
                    // /home/CIN/fmm/Desktop/grammar/Compiladores.g:101:16: ( parameter )*
                    while (stream_parameter.hasNext()) {
                        dbg.location(101, 17);
                        adaptor.addChild(root_0, stream_parameter.nextTree());
                    }
                    stream_parameter.reset();
                }
                retval.tree = root_0;
            }
            retval.stop = input.LT(-1);
            retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
        }
        dbg.location(102, 4);
    } finally {
        dbg.exitRule(getGrammarFileName(), "list_parameter");
        decRuleLevel();
        if (getRuleLevel() == 0) {
            dbg.terminate();
        }
    }
    return retval;
}
