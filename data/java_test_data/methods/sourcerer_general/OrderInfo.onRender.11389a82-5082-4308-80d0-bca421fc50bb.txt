protected void onRender(Element parent, int index) {
    super.onRender(parent, index);
    System.out.println("----------OrderInfo");
    HorizontalPanel panel = new HorizontalPanel();
    panel.setSpacing(10);
    btnLast.setText("前一个订单");
    btnNext.setText("后一个订单");
    btnPrint.setText("打印订单");
    panel.add(btnLast);
    panel.add(btnNext);
    panel.add(btnPrint);
    add(panel);
    VerticalPanel checkOrder = new VerticalPanel();
    checkOrder.setWidth("800px");
    checkOrder.getElement().getStyle().setProperty("textAlign", "center");
    // checkOrder.setStyleName("is-DockPanel");
    // DockPanel dock = new DockPanel();
    // dock.setStyleName("is-DockPanel");
    // dock.setSpacing(4);
    // dock.setHorizontalAlignment(DockPanel.ALIGN_CENTER);
    // Add text all around
    basicInfoLeftPanel.createPanel(IOrder.SN, "订单号：", new Label());
    basicInfoLeftPanel.createPanel(IOrder.USER, "购货人：", new Label());
    basicInfoLeftPanel.createPanel(IOrder.PAYMENT, "支付方式：", new Label());
    basicInfoLeftPanel.createPanel(IOrder.SHIPPING, "配送方式：", new Label());
    basicInfoLeftPanel.createPanel(IOrder.INVOICENO, "发货单号：", new Label());
    basicInfoRightPanel.createPanel(IOrder.STATUS, "订单状态：", new Label());
    basicInfoRightPanel.createPanel(IOrder.ADDTIME, "下单时间：", new Label());
    basicInfoRightPanel.createPanel(IOrder.PAYTIME, "付款时间：", new Label());
    basicInfoRightPanel.createPanel(IOrder.SHIPPINGTIME, "发货时间：", new Label());
    basicInfoRightPanel.createPanel(IOrder.REFERER, "订单来源：", new Label());
    HorizontalPanel basicInfo = new HorizontalPanel();
    VerticalPanel basicInfotitle = new VerticalPanel();
    basicInfotitle.add(new HTML("基本信息"));
    basicInfo.add(basicInfoLeftPanel);
    basicInfo.add(basicInfoRightPanel);
    basicInfotitle.add(basicInfo);
    // dock.add(new HTML("基本信息"), DockPanel.NORTH);
    // dock.add(basicInfo, DockPanel.NORTH);
    // dock.add(new HTML("其他信息"), DockPanel.NORTH);
    // dock.add(new HTML("收货人信息"), DockPanel.NORTH);
    // dock.add(new HTML("商品信息"), DockPanel.NORTH);
    // dock.add(new HTML("费用信息"), DockPanel.NORTH);
    // dock.add(new HTML("操作信息"), DockPanel.NORTH);
    checkOrder.add(basicInfotitle);
    VerticalPanel otherInfotitle = new VerticalPanel();
    otherInfotitle.add(new HTML("其他信息"));
    otherInfoLeftPanel.createPanel(IOrder.INVOCETYPE, "发票类型：", new Label());
    otherInfoLeftPanel.createPanel(IOrder.INVOICECONTENT, "发票内容：", new Label());
    otherInfoLeftPanel.createPanel(IOrder.POSTSCRIPT, "客户给商家的留言：", new Label());
    otherInfoLeftPanel.createPanel(IOrder.HOWOSS, "缺货处理：", new Label());
    otherInfoLeftPanel.createPanel(IOrder.PACKNAME, "包装：", new Label());
    otherInfoLeftPanel.createPanel(IOrder.CARDNAME, "贺卡：", new Label());
    otherInfoLeftPanel.createPanel(IOrder.CARDMESSAGE, "贺卡祝福语：", new Label());
    otherInfoLeftPanel.createPanel(IOrder.TOBUYER, "商家给客户的留言：", new Label());
    otherInfoRightPanel.createPanel(IOrder.INVOICEPAYEE, "发票抬头：", new Label());
    HorizontalPanel otherInfo = new HorizontalPanel();
    otherInfo.add(otherInfoLeftPanel);
    otherInfo.add(otherInfoRightPanel);
    otherInfotitle.add(otherInfo);
    checkOrder.add(otherInfotitle);
    VerticalPanel consigneeInfotitle = new VerticalPanel();
    consigneeInfotitle.add(new HTML("收货人信息"));
    consigneeInfoLeftPanel.createPanel(IOrder.CONSIGNEE, "收货人：", new Label());
    consigneeInfoLeftPanel.createPanel(IOrder.ADDRESS, "地址：", new Label());
    consigneeInfoLeftPanel.createPanel(IOrder.PHONE, "电话：", new Label());
    consigneeInfoLeftPanel.createPanel(IOrder.SIGNBUILDING, "标志性建筑：", new Label());
    consigneeInfoRightPanel.createPanel(IOrder.EMAIL, "电子邮件：", new Label());
    consigneeInfoRightPanel.createPanel(IOrder.ZIP, "邮编：", new Label());
    consigneeInfoRightPanel.createPanel(IOrder.MOBILE, "手机：", new Label());
    consigneeInfoRightPanel.createPanel(IOrder.BESTTIME, "最佳送货时间：", new Label());
    HorizontalPanel consigneeInfo = new HorizontalPanel();
    consigneeInfo.add(consigneeInfoLeftPanel);
    consigneeInfo.add(consigneeInfoRightPanel);
    consigneeInfotitle.add(consigneeInfo);
    checkOrder.add(consigneeInfotitle);
    // Create a vertical panel to layout the contents
    new WaitService(new WaitService.Job() {

        public boolean isReady() {
            Condition cond = new Condition();
            cond.setField(IOrderGoods.ORDER);
            cond.setOperator(Condition.EQUALS);
            cond.setValue(order.getString("id"));
            Criteria cri = new Criteria();
            cri.addCondition(cond);
            new ListService().listBeans(ModelNames.ORDERGOODS, cri, new ListService.Listener() {

                public synchronized void onSuccess(List<BeanObject> result) {
                    orderGoodsList = result;
                }
            });
            if (orderGoodsList.isEmpty()) {
                return false;
            } else {
                return true;
            }
        }

        public void run() {
            fillGoodsGrid();
        }
    });
    // VerticalPanel costsInfotitle = new VerticalPanel();
    orderGoodsInfo.setTitle("商品信息");
    checkOrder.add(orderGoodsInfo);
    costsInfo.setTitle("费用信息");
    checkOrder.add(costsInfo);
    actionInfo.setTitle("操作信息");
    checkOrder.add(actionInfo);
    add(checkOrder);
    btnLast.addClickListener(new ClickListener() {

        public void onClick(Widget sender) {
        }
    });
    btnNext.addClickListener(new ClickListener() {

        public void onClick(Widget sender) {
        }
    });
    btnPrint.addClickListener(new ClickListener() {

        public void onClick(Widget sender) {
        }
    });
}
