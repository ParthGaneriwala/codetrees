final Table SYSTEM_INDEXINFO(Session session) {
    Table t = sysTables[SYSTEM_INDEXINFO];
    if (t == null) {
        t = createBlankTable(sysTableHsqlNames[SYSTEM_INDEXINFO]);
        // JDBC
        addColumn(t, "TABLE_CAT", SQL_IDENTIFIER);
        addColumn(t, "TABLE_SCHEM", SQL_IDENTIFIER);
        // NOT NULL
        addColumn(t, "TABLE_NAME", SQL_IDENTIFIER);
        // NOT NULL
        addColumn(t, "NON_UNIQUE", Type.SQL_BOOLEAN);
        addColumn(t, "INDEX_QUALIFIER", SQL_IDENTIFIER);
        addColumn(t, "INDEX_NAME", SQL_IDENTIFIER);
        // NOT NULL
        addColumn(t, "TYPE", Type.SQL_SMALLINT);
        // NOT NULL
        addColumn(t, "ORDINAL_POSITION", Type.SQL_SMALLINT);
        addColumn(t, "COLUMN_NAME", SQL_IDENTIFIER);
        addColumn(t, "ASC_OR_DESC", CHARACTER_DATA);
        addColumn(t, "CARDINALITY", Type.SQL_INTEGER);
        addColumn(t, "PAGES", Type.SQL_INTEGER);
        addColumn(t, "FILTER_CONDITION", CHARACTER_DATA);
        // HSQLDB extension
        addColumn(t, "ROW_CARDINALITY", Type.SQL_INTEGER);
        // order: NON_UNIQUE, TYPE, INDEX_NAME, and ORDINAL_POSITION.
        // added for unique: INDEX_QUALIFIER, TABLE_NAME
        // false PK, as INDEX_QUALIFIER may be null
        HsqlName name = HsqlNameManager.newInfoSchemaObjectName(sysTableHsqlNames[SYSTEM_INDEXINFO].name, false, SchemaObject.INDEX);
        t.createPrimaryKeyConstraint(name, new int[] { 0, 1, 2, 3, 4, 5, 7 }, false);
        return t;
    }
    PersistentStore store = session.sessionData.getRowStore(t);
    // calculated column values
    String tableCatalog;
    String tableSchema;
    String tableName;
    Boolean nonUnique;
    String indexQualifier;
    String indexName;
    Integer indexType;
    // Integer ordinalPosition;
    // String  columnName;
    // String  ascOrDesc;
    Integer cardinality;
    Integer pages;
    String filterCondition;
    Integer rowCardinality;
    // Intermediate holders
    Iterator tables;
    Table table;
    int indexCount;
    int[] cols;
    int col;
    int colCount;
    Object[] row;
    // column number mappings
    final int itable_cat = 0;
    final int itable_schem = 1;
    final int itable_name = 2;
    final int inon_unique = 3;
    final int iindex_qualifier = 4;
    final int iindex_name = 5;
    final int itype = 6;
    final int iordinal_position = 7;
    final int icolumn_name = 8;
    final int iasc_or_desc = 9;
    final int icardinality = 10;
    final int ipages = 11;
    final int ifilter_condition = 12;
    final int irow_cardinality = 13;
    // Initialization
    tables = database.schemaManager.databaseObjectIterator(SchemaObject.TABLE);
    // Do it.
    while (tables.hasNext()) {
        table = (Table) tables.next();
        if (table.isView() || !isAccessibleTable(session, table)) {
            continue;
        }
        tableCatalog = table.getCatalogName().name;
        tableSchema = table.getSchemaName().name;
        tableName = table.getName().name;
        // not supported yet
        filterCondition = null;
        // different cat for index not supported yet
        indexQualifier = tableCatalog;
        indexCount = table.getIndexCount();
        // process all of the visible indices for this table
        for (int i = 0; i < indexCount; i++) {
            Index index = table.getIndex(i);
            colCount = table.getIndex(i).getColumnCount();
            if (colCount < 1) {
                continue;
            }
            indexName = index.getName().name;
            nonUnique = index.isUnique() ? Boolean.FALSE : Boolean.TRUE;
            cardinality = null;
            pages = ValuePool.INTEGER_0;
            rowCardinality = null;
            cols = index.getColumns();
            indexType = ValuePool.getInt(3);
            for (int k = 0; k < colCount; k++) {
                col = cols[k];
                row = t.getEmptyRowData();
                row[itable_cat] = tableCatalog;
                row[itable_schem] = tableSchema;
                row[itable_name] = tableName;
                row[inon_unique] = nonUnique;
                row[iindex_qualifier] = indexQualifier;
                row[iindex_name] = indexName;
                row[itype] = indexType;
                row[iordinal_position] = ValuePool.getInt(k + 1);
                row[icolumn_name] = table.getColumn(cols[k]).getName().name;
                row[iasc_or_desc] = "A";
                row[icardinality] = cardinality;
                row[ipages] = pages;
                row[irow_cardinality] = rowCardinality;
                row[ifilter_condition] = filterCondition;
                t.insertSys(store, row);
            }
        }
    }
    return t;
}
