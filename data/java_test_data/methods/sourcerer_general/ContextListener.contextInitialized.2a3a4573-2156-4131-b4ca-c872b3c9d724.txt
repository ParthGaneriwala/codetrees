public void contextInitialized(ServletContextEvent event) {
    ServletContext context = event.getServletContext();
    LOG.info("Initializing");
    // Start the connection pool
    try {
        ConnectionPool cp = new ConnectionPool();
        cp.setDebug(true);
        cp.setTestConnections(false);
        cp.setAllowShrinking(true);
        cp.setMaxConnections(10);
        cp.setMaxIdleTime(60000);
        cp.setMaxDeadTime(300000);
        context.setAttribute(Constants.CONNECTION_POOL, cp);
        LOG.info("Connection pool added");
    } catch (Exception e) {
        LOG.error("Connection pool error", e);
    }
    // Start the cache manager (caches are configured later)
    CacheManager.create();
    LOG.info("CacheManager created");
    // Start the work flow manager
    try {
        // Workflow manager
        WorkflowManager wfManager = new WorkflowManager();
        context.setAttribute(Constants.WORKFLOW_MANAGER, wfManager);
        // Hook manager
        ObjectHookManager hookManager = new ObjectHookManager();
        hookManager.setWorkflowManager(wfManager);
        context.setAttribute(Constants.OBJECT_HOOK_MANAGER, hookManager);
        LOG.info("Workflow manager added");
    } catch (Exception e) {
        LOG.error("Workflow manager error", e);
    }
    // Setup a web tracker
    Tracker tracker = new Tracker();
    context.setAttribute(Constants.USER_SESSION_TRACKER, tracker);
    // Setup Webdav Manager
    WebdavManager webdavManager = new WebdavManager();
    context.setAttribute(Constants.WEBDAV_MANAGER, webdavManager);
    LOG.info("Webdav manager added");
    // Setup scheduler
    try {
        SchedulerFactory schedulerFactory = new org.quartz.impl.StdSchedulerFactory();
        Scheduler scheduler = schedulerFactory.getScheduler();
        context.setAttribute(Constants.SCHEDULER, scheduler);
        LOG.info("Scheduler added");
    } catch (Exception e) {
        LOG.error("Scheduler error", e);
    }
    // Portlet container
    try {
        // Add the Container
        PortletContainerFactory portletFactory = PortletContainerFactory.getInstance();
        ContainerServicesImpl services = new ContainerServicesImpl();
        PortletContainer portletContainer = portletFactory.createContainer("PortletContainer", services, services);
        portletContainer.init(context);
        context.setAttribute(Constants.PORTLET_CONTAINER, portletContainer);
        LOG.info("PortletContainer added");
    } catch (Exception e) {
        LOG.error("PortletContainer error", e);
    }
    // Finished
    LOG.info("Initialized");
}
