private void commitFileAnnotations(String fileName, FileAnnotations fa) {
    ITextEditor textEditor = openInEditor(fileName);
    if (textEditor == null)
        return;
    editorAnnotations.put(textEditor, fa);
    IEditorInput input = textEditor.getEditorInput();
    IDocumentProvider provider = textEditor.getDocumentProvider();
    IDocument doc = provider.getDocument(input);
    IAnnotationModel model = provider.getAnnotationModel(input);
    for (Markup m : fa.markups.values()) {
        if (!m.loops.isEmpty()) {
            // XXX ignoring multiple loops in the same line. Use the loop
            // with the first timestamp;
            Collections.sort(m.loops);
            LoopInfo loop = m.loops.get(0);
            m.setType("org.ocallahan.chronomancer.sourceLoopHead");
            m.setText("Iteration " + loop.getCurrentIteration() + "/" + loop.getTotalIterations());
        }
        Collections.sort(m.tStampAddrs);
        try {
            int startOffset = getOffset(doc, m.start);
            Coordinate end;
            // just mark up to the beginning of the next line.
            if (fa.markups.containsKey(m.end)) {
                end = m.end;
            } else {
                end = new Coordinate(m.start.getLine() + 1, 0);
            }
            int endOffset = getOffset(doc, end);
            m.position = new Position(startOffset, endOffset - startOffset);
            doc.addPosition(m.position);
            model.addAnnotation(m, m.position);
        } catch (BadLocationException ex) {
        }
    }
    getState().setSourceAnnotator(this);
}
