private Collection<Term> getRelations(Term term, char relation) throws EurovocException {
    Map<Long, Term> relatives = new HashMap<Long, Term>();
    List<String> languages = term.getLanguages();
    ResultSet rs = null;
    try {
        StringBuffer sql = new StringBuffer("select " + " distinct (nodes.id), " + " nodes.key, " + " nodes.node_type " + "from nodes, relations " + "where ");
        if (relation == NARRORER_TERM_RELATION) {
            sql.append(" relations.target=? and " + " relations.source = nodes.id and " + " relations.relation=?");
        } else {
            sql.append(" relations.source=? and " + " relations.target = nodes.id and " + " relations.relation=?");
        }
        sql.append(" order by nodes.key");
        // System.out.println("Find relations: " + sql.toString());
        PreparedStatement ps = DBFactory.getPreparedStatement(getConnection(), sql.toString());
        ps.setLong(1, term.getId());
        ps.setString(2, String.valueOf(relation == NARRORER_TERM_RELATION ? BROADER_TERM_RELATION : relation));
        ps.execute();
        rs = ps.getResultSet();
        while (rs.next()) {
            Term t = new Term(rs.getLong("id"), languages);
            t.setKey(rs.getString("key"));
            t.setType(rs.getString("node_type").charAt(0));
            relatives.put(t.getId(), t);
        }
        rs.close();
    } catch (SQLException e) {
        sqlErrorHandler(e, rs);
        e.printStackTrace();
        throw new EurovocException(e.getMessage());
    }
    getTexts(relatives, languages);
    return relatives.values();
}
