public void draw(GL10 gl) {
    if (verticesID <= 0) {
        int[] name = new int[1];
        ((GL11) gl).glGenBuffers(1, name, 0);
        ((GL11) gl).glBindBuffer(GL11.GL_ARRAY_BUFFER, verticesID);
        // TODO: Remove when glPointSizePointerOES is fixed
        // gl.glBufferData(GL_ARRAY_BUFFER, 4*7*totalParticles, vertices, GL_DYNAMIC_DRAW);
        ((GL11) gl).glBindBuffer(GL11.GL_ARRAY_BUFFER, 0);
    }
    gl.glEnable(GL_TEXTURE_2D);
    gl.glBindTexture(GL_TEXTURE_2D, texture.name());
    gl.glEnable(GL11.GL_POINT_SPRITE_OES);
    ((GL11) gl).glTexEnvi(GL11.GL_POINT_SPRITE_OES, GL11.GL_COORD_REPLACE_OES, GL10.GL_TRUE);
    gl.glEnableClientState(GL_VERTEX_ARRAY);
    ((GL11) gl).glBindBuffer(GL11.GL_ARRAY_BUFFER, verticesID);
    for (int i = 0; i < totalParticles; i++) {
        mVertices.put(vertices[i].x);
        mVertices.put(vertices[i].y);
        mPointSizes.put(vertices[i].size);
        mColors.put(vertices[i].colors.r);
        mColors.put(vertices[i].colors.g);
        mColors.put(vertices[i].colors.b);
        mColors.put(vertices[i].colors.a);
    }
    mVertices.position(0);
    mPointSizes.position(0);
    mColors.position(0);
    // TODO: Remove when glPointSizePointerOES is fixed
    // gl.glVertexPointer(2, GL_FLOAT, 7*4, 0);
    gl.glVertexPointer(2, GL_FLOAT, 0, mVertices);
    gl.glEnableClientState(GL11.GL_POINT_SIZE_ARRAY_OES);
    // TODO: Remove when glPointSizePointerOES is fixed
    // gl.glPointSizePointerOES(GL_FLOAT, 7*4, 4*2);
    ((GL11) gl).glPointSizePointerOES(GL_FLOAT, 0, mPointSizes);
    gl.glEnableClientState(GL_COLOR_ARRAY);
    // TODO: Remove when glPointSizePointerOES is fixed
    // gl.glColorPointer(4, GL_FLOAT, 7*4, 4*3);
    gl.glColorPointer(4, GL_FLOAT, 0, mColors);
    if (blendAdditive)
        gl.glBlendFunc(GL_SRC_ALPHA, GL_ONE);
    else
        gl.glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
    // save color mode
    // glGetTexEnviv(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, &colorMode);
    gl.glDrawArrays(GL_POINTS, 0, particleIdx);
    // restore blend state
    gl.glBlendFunc(CC_BLEND_SRC, CC_BLEND_DST);
    // restore color mode
    // glTexEnvi(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, colorMode);
    // unbind VBO buffer
    ((GL11) gl).glBindBuffer(GL11.GL_ARRAY_BUFFER, 0);
    gl.glDisableClientState(GL_VERTEX_ARRAY);
    gl.glDisableClientState(GL11.GL_POINT_SIZE_ARRAY_OES);
    gl.glDisableClientState(GL_COLOR_ARRAY);
    gl.glDisable(GL_TEXTURE_2D);
    gl.glDisable(GL11.GL_POINT_SPRITE_OES);
}
