// documentation inherited
@Override
public void tick(float elapsed) {
    // return immediately if completed
    if (_completed) {
        return;
    }
    // update the world transform
    if (_parentWorldTransform == null) {
        _worldTransform.set(_localTransform);
    } else {
        _parentWorldTransform.compose(_localTransform, _worldTransform);
    }
    // initialize the bounds
    _config.skin.bounds.transform(_worldTransform, _nbounds);
    // start the automatic animations if appropriate
    if (!_started) {
        for (int ii = 0; ii < _animations.length; ii++) {
            if (_config.animationMappings[ii].startAutomatically) {
                _animations[ii].start();
            }
        }
        _started = true;
    }
    // copy the tracks to an array so that callbacks can manipulate the list;
    // note if any tracks have completed
    boolean tracksCompleted = false;
    _playingArray = _playing.toArray(_playingArray);
    for (int ii = 0, nn = _playing.size(); ii < nn; ii++) {
        tracksCompleted |= _playingArray[ii].tick(elapsed);
    }
    // update the local node transforms
    updateTransforms();
    // if any tracks have completed, remove them
    if (tracksCompleted) {
        for (int ii = _playing.size() - 1; ii >= 0; ii--) {
            Animation animation = _playing.get(ii);
            if (animation.hasCompleted()) {
                _playing.remove(ii);
            }
        }
    }
    // update the nodes and expand the bounds
    for (Node node : _nodes) {
        node.update();
    }
    // tick the configured attachments
    _completed = _config.completable && _playing.isEmpty();
    for (Model model : _configAttachments) {
        model.tick(elapsed);
        _nbounds.addLocal(model.getBounds());
        _completed &= model.hasCompleted();
    }
    // and the user attachments
    for (int ii = 0, nn = _userAttachments.size(); ii < nn; ii++) {
        Model model = _userAttachments.get(ii);
        model.tick(elapsed);
        _nbounds.addLocal(model.getBounds());
        _completed &= model.hasCompleted();
    }
    // update the bounds if necessary
    if (!_bounds.equals(_nbounds)) {
        ((Model) _parentScope).boundsWillChange(this);
        _bounds.set(_nbounds);
        ((Model) _parentScope).boundsDidChange(this);
    }
    // notify containing model if completed
    if (_completed) {
        ((Model) _parentScope).completed(this);
    }
}
