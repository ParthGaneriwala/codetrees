private static void depthFirstVisit(INode headNode, NodeMethod lastMethod, NodeLock lastLock, TimeCount time) {
    int headMCount = headNode.getMethodPredecessorCount();
    int headLCount = headNode.getLockPredessorCount();
    System.out.println("Head Node: " + headNode.getName() + " " + headMCount + " " + headLCount);
    boolean headNodeIsMethod = false;
    boolean headNodeIsLock = false;
    if (headNode instanceof NodeMethod) {
        if (((NodeMethod) headNode).isEntry()) {
            // if(true) {
            lastMethod = (NodeMethod) headNode;
            headNodeIsMethod = true;
        }
    } else if (headNode instanceof NodeLock) {
        lastLock = (NodeLock) headNode;
        headNodeIsLock = true;
    }
    ArrayList<INode> adjacentNodeList = getAdjacentNodesForHeadNode(headNode);
    headNode.setColor(INode.Color.GREY);
    // System.out.println("start time " + time.getTime() + " " + headNode.getName());
    time.setTime(time.getTime() + 1);
    headNode.setStartTime(time.getTime());
    for (INode adjNode : adjacentNodeList) {
        if (!adjNode.equals(headNode)) {
            headMCount = headNode.getMethodPredecessorCount();
            headLCount = headNode.getLockPredessorCount();
            int currMCount = adjNode.getMethodPredecessorCount();
            int currLCount = adjNode.getLockPredessorCount();
            // book keeping
            if (adjNode.getColor() == INode.Color.WHITE) {
                if (headNodeIsMethod) {
                    headMCount++;
                } else {
                    headLCount++;
                }
            }
            System.out.println("Adj Node: " + adjNode.getName() + " " + headMCount + " " + headLCount + " " + currMCount + " " + currLCount);
            // down
            if (adjNode.getColor() == INode.Color.WHITE) {
                adjNode.setLockPredessorCount(headLCount);
                adjNode.setMethodPredecessorCount(headMCount);
                adjNode.setLastMethodPredecessor(lastMethod);
                adjNode.setLastLockPredecessor(lastLock);
                adjNode.setPredecessor(headNode);
                if (adjNode instanceof NodeMethod) {
                    if (((NodeMethod) adjNode).isEntry()) {
                        // to do: remove this
                        // inefficient, come up with a better
                        // way to track nodes within a loop
                        sCrossTable.addCross(null, adjNode);
                    }
                }
                depthFirstVisit(adjNode, lastMethod, lastLock, time);
            // back
            } else if (adjNode.getColor() == INode.Color.GREY) {
                sLoopTable.addLoop(headNode, adjNode);
            // cross
            } else {
                sCrossTable.addCross(headNode, adjNode);
            /*
					if(headMCount>currMCount) {
						adjNode.setMethodPredecessorCount(headMCount);
					}
					if(headLCount>currLCount) {
						adjNode.setLockPredessorCount(headLCount);
					}	
					*/
            }
        }
    }
    headNode.setColor(INode.Color.BLACK);
    // System.out.println("end time " + time.getTime() + " " + headNode.getName());
    time.setTime(time.getTime() + 1);
    headNode.setEndTime(time.getTime());
}
