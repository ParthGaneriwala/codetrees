public static void tableScan(Table iTable, Table iOTable, IExecutable iExecutable, int[] inField, int inMemorySize, Comparable[] iComparable) throws IOException, RecordException {
    // Get max memory
    long t1 = System.nanoTime();
    int nLength = iTable.getLengthTotal();
    // times for loads
    int nRecordAmount = (int) Math.floor((double) inMemorySize / nLength);
    TableInputBuffer iBuffer;
    TableOutputBuffer oBuffer = null;
    if (iOTable != null) {
        int nLength2 = iOTable.getLengthTotal();
        int nRecordAmount2;
        Utils.clear(iOTable.getFile());
        if (iExecutable instanceof IndexJoin) {
            int indexBufferSize = ((IndexJoin) iExecutable).getIndexBufferSize();
            // times for loads
            nRecordAmount = (int) Math.ceil((double) ((inMemorySize - indexBufferSize) / 2) / nLength);
            // times for loads
            nRecordAmount2 = (int) Math.floor((double) ((inMemorySize - indexBufferSize) / 2) / nLength2);
            nRecordAmount = (int) Math.floor((double) (inMemorySize - indexBufferSize) / nLength);
            ProjectGUI.getInstance().update("Memory Execution: " + iTable.getName() + " " + iExecutable.getOperation(), 3);
            ProjectGUI.getInstance().update(0, nRecordAmount * nLength, ProjectGUI.getGI(0, 0, 1, nRecordAmount * nLength, iTable));
            ProjectGUI.getInstance().update(1, indexBufferSize, ProjectGUI.getGI(1, 0, 1, indexBufferSize, "Index"));
            ProjectGUI.getInstance().update(2, nRecordAmount2 * nLength2, ProjectGUI.getGO(0, 1, nRecordAmount2 * nLength2, iOTable));
        } else {
            // times for loads
            nRecordAmount = (int) Math.ceil((double) ((inMemorySize) / 2) / nLength);
            // times for loads
            nRecordAmount2 = (int) Math.floor((double) ((inMemorySize) / 2) / nLength2);
            ProjectGUI.getInstance().update("Memory Execution: " + iTable.getName() + " " + iExecutable.getOperation(), 2);
            ProjectGUI.getInstance().update(0, nRecordAmount * nLength, ProjectGUI.getGI(0, 0, 1, nRecordAmount * nLength, iTable));
            ProjectGUI.getInstance().update(1, nRecordAmount2 * nLength2, ProjectGUI.getGO(0, 1, nRecordAmount2 * nLength2, iOTable));
        }
        iBuffer = new TableInputBuffer(iTable, iTable.getFile(), nRecordAmount, 0);
        oBuffer = new TableOutputBuffer(iOTable, iOTable.getFile(), nRecordAmount2, 1);
    } else {
        if (iExecutable instanceof IndexScan) {
            int indexBufferSize = ((IndexScan) iExecutable).getIndexBufferSize();
            nRecordAmount = (int) Math.floor((double) (inMemorySize - indexBufferSize) / nLength);
            ProjectGUI.getInstance().update("Memory Execution: " + iTable.getName() + " " + iExecutable.getOperation(), 2);
            ProjectGUI.getInstance().update(0, nRecordAmount * nLength, ProjectGUI.getGI(0, 0, 1, nRecordAmount * nLength, iTable));
            ProjectGUI.getInstance().update(1, indexBufferSize, ProjectGUI.getGI(1, 0, 1, indexBufferSize, "Index"));
        } else {
            ProjectGUI.getInstance().update("Memory Execution: " + iTable.getName() + " " + iExecutable.getOperation(), 1);
            ProjectGUI.getInstance().update(0, nRecordAmount * nLength, ProjectGUI.getGI(0, 0, 1, nRecordAmount * nLength, iTable));
        }
        iBuffer = new TableInputBuffer(iTable, iTable.getFile(), nRecordAmount, 0);
    }
    try {
        Comparable[][] result;
        while (iBuffer.hasMore()) {
            result = iExecutable.execute(iBuffer.getIndex(), iBuffer.read(), inField, iComparable);
            if (result != null) {
                oBuffer.write(result);
            }
            ProjectGUI.getInstance().hasBreak();
        }
        result = iExecutable.lastExecute(inField, iComparable);
        if (result != null) {
            oBuffer.write(result);
        }
    } catch (FoundException e) {
    }
    if (oBuffer != null) {
        oBuffer.flush();
    }
    long t2 = System.nanoTime();
    if (iOTable != null) {
        iOTable.setExecutionTime((t2 - t1) / Utils.NANO);
    }
}
