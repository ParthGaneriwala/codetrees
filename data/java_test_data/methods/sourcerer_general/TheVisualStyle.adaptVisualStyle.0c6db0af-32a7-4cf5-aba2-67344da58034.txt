/*-------------------METHODS-----------------------*/
public void adaptVisualStyle(VisualStyle style, CyNetwork network) {
    // ---------------------set defaults--------------------------------------//
    style.getDependency().set(VisualPropertyDependency.Definition.NODE_SIZE_LOCKED, true);
    style.getNodeAppearanceCalculator().getDefaultAppearance().set(VisualPropertyType.NODE_SHAPE, NodeShape.ELLIPSE);
    // style.getNodeAppearanceCalculator().getDefaultAppearance().setNodeSizeLocked(true);
    style.getNodeAppearanceCalculator().getDefaultAppearance().set(VisualPropertyType.NODE_FONT_SIZE, 24);
    style.getEdgeAppearanceCalculator().getDefaultAppearance().set(VisualPropertyType.EDGE_TGTARROW_SHAPE, ArrowShape.DELTA);
    style.getEdgeAppearanceCalculator().getDefaultAppearance().set(VisualPropertyType.EDGE_TGTARROW_COLOR, Color.black);
    style.getEdgeAppearanceCalculator().getDefaultAppearance().set(VisualPropertyType.EDGE_SRCARROW_SHAPE, ArrowShape.NONE);
    style.getEdgeAppearanceCalculator().getDefaultAppearance().set(VisualPropertyType.EDGE_LINE_STYLE, LineStyle.SOLID);
    style.getEdgeAppearanceCalculator().getDefaultAppearance().set(VisualPropertyType.EDGE_LINE_WIDTH, 2.0f);
    style.getEdgeAppearanceCalculator().getDefaultAppearance().set(VisualPropertyType.EDGE_COLOR, Color.black);
    style.getGlobalAppearanceCalculator().setDefaultBackgroundColor(Color.white);
    // ------------------------------ Set the label ------------------------------//
    // Display NODE_LABEL as a label
    PassThroughMapping m = new PassThroughMapping(new String(), ObjectMapping.NODE_MAPPING);
    m.setControllingAttributeName(NODE_LABEL, network, false);
    Calculator nlc = new BasicCalculator("Node Description_" + networkName, m, VisualPropertyType.NODE_LABEL);
    style.getNodeAppearanceCalculator().setCalculator(nlc);
    // ---------------------------Continuous node color--------------------------//
    ContinuousMapping colorMapping = new ContinuousMapping(new Color(255, 0, 0), ObjectMapping.NODE_MAPPING);
    colorMapping.setControllingAttributeName(NODE_COLOR, network, false);
    // The following code defines the range of values
    BoundaryRangeValues colbrVal1 = new BoundaryRangeValues();
    Color nada = new Color(255, 255, 255);
    Color colmin = new Color(255, 255, 0);
    double cols = -(Math.log(alpha) / Math.log(10));
    colbrVal1.lesserValue = nada;
    colbrVal1.equalValue = colmin;
    colbrVal1.greaterValue = colmin;
    colorMapping.addPoint(cols, colbrVal1);
    BoundaryRangeValues colbrVal2 = new BoundaryRangeValues();
    Color colmax = new Color(255, 127, 0);
    cols = -(Math.log(alpha) / Math.log(10)) + 5.0;
    colbrVal2.lesserValue = colmax;
    colbrVal2.equalValue = colmax;
    colbrVal2.greaterValue = colmax;
    colorMapping.addPoint(cols, colbrVal2);
    Calculator colorCalculator = new BasicCalculator("Bingo Node Color_" + networkName, colorMapping, VisualPropertyType.NODE_FILL_COLOR);
    style.getNodeAppearanceCalculator().setCalculator(colorCalculator);
    // --------------------------- Size of the nodes ----------------------------//
    ContinuousMapping wMapping = new ContinuousMapping(new Double(50), ObjectMapping.NODE_MAPPING);
    wMapping.setControllingAttributeName(NODE_SIZE, network, false);
    ContinuousMapping hMapping = new ContinuousMapping(new Double(50), ObjectMapping.NODE_MAPPING);
    hMapping.setControllingAttributeName(NODE_SIZE, network, false);
    // The following code defines the range of values
    BoundaryRangeValues brVals;
    int j;
    for (j = 0; j <= 1; j++) {
        brVals = new BoundaryRangeValues();
        Double size = new Double(380 * j + 20);
        double s = 99 * j + 1;
        brVals.lesserValue = size;
        brVals.equalValue = size;
        brVals.greaterValue = size;
        wMapping.addPoint(s, brVals);
        hMapping.addPoint(s, brVals);
    }
    Calculator nodeSizeCalculator = new BasicCalculator("Bingo Node Size_" + networkName, wMapping, VisualPropertyType.NODE_SIZE);
    style.getNodeAppearanceCalculator().setCalculator(nodeSizeCalculator);
}
