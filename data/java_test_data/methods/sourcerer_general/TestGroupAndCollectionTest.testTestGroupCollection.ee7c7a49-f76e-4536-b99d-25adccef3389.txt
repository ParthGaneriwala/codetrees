public void testTestGroupCollection() throws Exception {
    TestGroupCollection parentCollection = new TestGroupCollection();
    TestGroup parentGroup = new TestGroup("parentGroup");
    TestGroup childGroup;
    TestGroup duplicate1 = new TestGroup("childGroup2");
    TestGroup duplicate2 = new TestGroup("childGroup2");
    MyTestCase case1 = new MyTestCase("Case1");
    try {
        childGroup = new TestGroup("");
    } catch (Exception e) {
        childGroup = new TestGroup("childGroup");
    }
    assertFalse("null strings may not be present in a TestGroupCollection!", parentCollection.nameIsPresentInGroup(null));
    User tester = new User("Paul Bodily", "password");
    User tester2 = new User("Nalani Deering", "password");
    Attachment attachment = new Attachment("name", ".txt", "path");
    assertTrue(parentCollection.add(parentGroup));
    assertEquals(parentCollection, parentGroup.getParentCollection());
    assertTrue(parentGroup.addTestGroup(childGroup));
    assertEquals(parentGroup.getTestGroupCollection(), childGroup.getParentCollection());
    assertEquals(parentGroup, childGroup.getParentGroup());
    try {
        parentGroup.addTestGroup(childGroup);
    } catch (Exception e) {
    }
    assertEquals(1, parentGroup.getTestGroupCollection().getTestGroups().size());
    // Test that groups with the same name can't be added to the same
    // collection
    assertTrue(parentGroup.addTestGroup(duplicate1));
    assertTrue(parentGroup.getTestGroupCollection().getTestGroup("childGroup2") != null);
    assertFalse("shouldn't add duplicate", parentGroup.addTestGroup(duplicate2));
    assertEquals(2, parentGroup.getTestGroupCollection().getTestGroups().size());
    assertTrue(childGroup.addTestGroup(duplicate2));
    assertEquals(childGroup.getTestGroupCollection(), duplicate2.getParentCollection());
    assertEquals(childGroup, duplicate2.getParentGroup());
    assertTrue(childGroup.removeTestGroup(duplicate2));
    assertEquals(null, duplicate2.getParentCollection());
    assertEquals(null, duplicate2.getParentGroup());
    // Test that you can't change the name within a group to an already
    // existent name
    assertFalse(duplicate1.setName("childGroup"));
    assertFalse(duplicate1.setName(""));
    assertEquals("childGroup2", duplicate2.getName());
    // Test addition and removal of TestCases
    assertTrue(childGroup.addTestCase(case1));
    assertEquals(1, childGroup.getTestCaseCollection().getTestCases().size());
    assertTrue(childGroup.removeTestCase(case1));
    // Test that tester for child can be set with parent's tester being null
    assertEquals(null, parentGroup.getTester());
    try {
        childGroup.setTester(tester);
    } catch (Exception e) {
    }
    tester.setRole(Roles.TESTER);
    tester2.setRole(Roles.TESTER);
    childGroup.setTester(tester);
    assertEquals(null, parentGroup.getTester());
    assertEquals(null, duplicate1.getTester());
    assertEquals(tester, childGroup.getTester());
    // Test that two childrenGroups can have different testers
    duplicate1.setTester(tester2);
    assertEquals(null, parentGroup.getTester());
    assertEquals(tester2, duplicate1.getTester());
    assertEquals(tester, childGroup.getTester());
    // Test that changing the parentGroup tester will modify the
    // childrenGroup testers
    childGroup.setTester(tester2);
    parentGroup.setTester(tester);
    assertEquals(tester, parentGroup.getTester());
    assertEquals(tester, childGroup.getTester());
    assertEquals(tester, duplicate1.getTester());
    // Test that once the Parent is set, the children can't change
    try {
        childGroup.setTester(tester2);
        fail();
    } catch (Exception e) {
        assertEquals(tester, childGroup.getTester());
    }
    childGroup.setDescription("GoDucks");
    assertEquals("GoDucks", childGroup.getDescription());
    try {
        Attachment notAnAttachment = null;
        childGroup.addAttachment(notAnAttachment);
        fail();
    } catch (AssertionError e) {
    }
    try {
        childGroup.removeAttachment(null);
        fail();
    } catch (AssertionError e) {
    }
    childGroup.addAttachment(attachment);
    AttachmentCollection attachmentCollection = childGroup.getAttachmentCollection();
    assertTrue("With one member, attachmentCollection should not be empty!", !attachmentCollection.isEmpty());
    childGroup.removeAttachment(attachment);
    assertTrue("With no members, attachmentCollection should be empty!", attachmentCollection.isEmpty());
    assertEquals("childGroup", childGroup.toString());
    childGroup.setName("testName");
    assertEquals("TestGroup getters and setters malfunction!", "testName", childGroup.getName());
    parentCollection.setTester(null);
}
