private void open(File file) {
    try {
        props.load(new FileInputStream(file));
        // Save the open directory
        // Load the map image
        loadMapImage();
        // Get the affine parameters
        // It's important to do this first since some
        // things may depend on the location.
        loadAffine();
        // Get all the networks in this file
        // map.nets <tabName 0> <name1 >
        String nets = props.getProperty(MapKeys.NETS);
        // Process each of the networks in turn
        StringTokenizer st = new StringTokenizer(nets);
        while (st.hasMoreTokens()) {
            String realName = st.nextToken();
            // Get all the labels for this network
            // mapn.net.<tabName> <type> <label 0> <label 1> ...
            // <tabName = <one of the names above>
            // <type> = walkway|tour|lois|ref
            String key = MapKeys.NET + realName;
            String value = props.getProperty(key);
            // String[] labels = toArray(value);
            String[] labels = value.split(" +");
            if (labels[0].equals(MapKeys.NET_WALKWAY))
                loadWalkway(realName, labels);
            else if (labels[0].equals(MapKeys.NET_TOUR))
                loadTour(realName, labels);
            else if (labels[0].equals(MapKeys.NET_LOIS))
                loadLois(realName, labels);
            else if (labels[0].equals(MapKeys.NET_REFPTS))
                loadRefs(realName, labels);
            System.out.println("processed: " + key);
        }
        // Load the ROI
        loadRoi();
        // Load the tour packages
        loadPkgs();
        // Now that everything is loaded, connect the extents and
        // tours in a second pass
        connectExtents();
        connectLandmarkTours();
        MapineerFrame.getFrame().setSaveFileName(file.getAbsolutePath());
        MapineerFrame.getFrame().setDirty(false);
    } catch (Exception e) {
        e.printStackTrace();
    }
}
