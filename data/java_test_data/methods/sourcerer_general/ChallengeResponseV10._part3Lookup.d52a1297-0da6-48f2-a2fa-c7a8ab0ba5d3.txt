private static int _part3Lookup(int table, int depth, long seed) {
    // Offset into data table
    int offset = 0;
    // Temp variables
    long a, b, c;
    // Choose table entry (unsigned int)
    long idx = seed;
    // 32 bit *signed*
    int iseed = (int) seed;
    for (int i = 0; i < depth; i++) {
        // -----Table 0 (full of IDENT no-ops) deleted to save space
        if (table == 0)
            return iseed;
        // More sign bit to bit #32
        if (idx < 0)
            idx += 0x100000000L;
        int[] opArr = OPS[table][(int) (idx % 96)];
        if (DB2)
            System.out.println("LOOK1:" + table + " " + depth + " " + iseed + ":" + idx + " " + opArr[OP]);
        switch(opArr[OP]) {
            // return iseed;					// condition at top of loop
            case XOR:
                // Bitwise XOR
                iseed ^= opArr[ARG1];
                break;
            case MULADD:
                // Multiply and add
                iseed = iseed * opArr[ARG1] + opArr[ARG2];
                break;
            case LOOKUP:
                // Arg 1 determines which table in the binary data
                offset = TABLE_OFFSETS[opArr[ARG1]];
                // -----Replace each of the four seed bytes with the byte
                // -----at that offset in the 256 byte table of arg1
                b = _data(offset, (iseed & 0xff)) | _data(offset, (iseed >> 8) & 0xff) << 8 | _data(offset, (iseed >> 16) & 0xff) << 16 | _data(offset, (iseed >> 24) & 0xff) << 24;
                iseed = (int) b;
                break;
            case BITFLD:
                // Arg 1 determines which table in the binary data
                offset = TABLE_OFFSETS[opArr[ARG1]];
                c = 0;
                // -----All 32 bytes in table
                for (int j = 0; j < 32; j++) {
                    // -----Move j'th bit to position data[j];
                    a = ((iseed >> j) & 1) << _data(offset, j);
                    // -----Mask out data[j]'th bit
                    b = ~(1 << _data(offset, j)) & c;
                    // -----Combine
                    c = a | b;
                }
                iseed = (int) c;
                break;
        }
        // -----Last run of the loop?  Don't do final part!
        if (depth - i <= 1)
            return iseed;
        if (DB2)
            System.out.println("LOOK2:" + iseed + ":" + idx);
        // -----Bit more mesing about with the seed and table index before
        // -----we loop again.  Mess about with each byte in copy of seed
        // -----to get new idx, then scale up the seed.
        a = 0;
        c = iseed;
        for (int j = 0; j < 4; j++) {
            a = (a ^ c & 0xff) * 0x9e3779b1;
            c = c >> 8;
        }
        idx = (int) ((((a ^ (a >> 8)) >> 16) ^ a) ^ (a >> 8)) & 0xff;
        iseed = iseed * 0x00010dcd;
        if (DB2)
            System.out.println("LOOK3:" + iseed + ":" + idx);
    }
    // -----Should return inside loop before we reach this point
    return iseed;
}
