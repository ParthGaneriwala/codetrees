Table SYSTEM_ALIASES() throws HsqlException {
    Table t = sysTables[SYSTEM_ALIASES];
    if (t == null) {
        t = createBlankTable(sysTableHsqlNames[SYSTEM_ALIASES]);
        // not null
        addColumn(t, "OBJECT_TYPE", Types.VARCHAR, 32, false);
        addColumn(t, "OBJECT_CAT", Types.VARCHAR);
        addColumn(t, "OBJECT_SCHEM", Types.VARCHAR);
        // not null
        addColumn(t, "OBJECT_NAME", Types.VARCHAR, false);
        addColumn(t, "ALIAS_CAT", Types.VARCHAR);
        addColumn(t, "ALIAS_SCHEM", Types.VARCHAR);
        // not null
        addColumn(t, "ALIAS", Types.VARCHAR, false);
        // order: OBJECT_TYPE, OBJECT_NAME, ALIAS.
        // true PK.
        t.createPrimaryKey(null, new int[] { 0, 3, 6 }, true);
        return t;
    }
    // Holders for calculated column values
    String cat;
    String schem;
    String alias;
    String objName;
    String objType;
    // Intermediate holders
    String className;
    HashMap hAliases;
    Iterator aliases;
    Object[] row;
    int pos;
    // Column number mappings
    final int ialias_object_type = 0;
    final int ialias_object_cat = 1;
    final int ialias_object_schem = 2;
    final int ialias_object_name = 3;
    final int ialias_cat = 4;
    final int ialias_schem = 5;
    final int ialias = 6;
    // Initialization
    hAliases = database.getAliasMap();
    aliases = hAliases.keySet().iterator();
    objType = "ROUTINE";
    // Do it.
    while (aliases.hasNext()) {
        row = t.getEmptyRowData();
        alias = (String) aliases.next();
        objName = (String) hAliases.get(alias);
        // must have class grant to see method call aliases
        pos = objName.lastIndexOf('.');
        if (pos <= 0) {
            // we should eventually try to disallow them.
            continue;
        }
        className = objName.substring(0, pos);
        if (!session.isAccessible(className)) {
            continue;
        }
        cat = ns.getCatalogName(objName);
        schem = ns.getSchemaName(className);
        row[ialias_object_type] = objType;
        row[ialias_object_cat] = cat;
        row[ialias_object_schem] = schem;
        row[ialias_object_name] = objName;
        row[ialias_cat] = cat;
        row[ialias_schem] = schem;
        row[ialias] = alias;
        t.insertSys(row);
    }
    // must have create/alter table rights to see domain aliases
    if (session.isAdmin()) {
        Iterator typeAliases = Types.typeAliases.keySet().iterator();
        objType = "DOMAIN";
        while (typeAliases.hasNext()) {
            row = t.getEmptyRowData();
            alias = (String) typeAliases.next();
            int tn = Types.typeAliases.get(alias, Integer.MIN_VALUE);
            objName = Types.getTypeString(tn);
            if (alias.equals(objName)) {
                continue;
            }
            cat = ns.getCatalogName(objName);
            schem = ns.getSchemaName(objName);
            row[ialias_object_type] = objType;
            row[ialias_object_cat] = cat;
            row[ialias_object_schem] = schem;
            row[ialias_object_name] = objName;
            row[ialias_cat] = cat;
            row[ialias_schem] = schem;
            row[ialias] = alias;
            t.insertSys(row);
        }
    }
    t.setDataReadOnly(true);
    return t;
}
