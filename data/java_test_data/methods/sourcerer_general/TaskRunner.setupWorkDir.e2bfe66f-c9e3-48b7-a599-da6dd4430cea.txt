// Mostly for setting up the symlinks. Note that when we setup the distributed
// cache, we didn't create the symlinks. This is done on a per task basis
public static void setupWorkDir(JobConf conf) throws IOException {
    File workDir = new File(".").getAbsoluteFile();
    FileUtil.fullyDelete(workDir);
    if (DistributedCache.getSymlink(conf)) {
        URI[] archives = DistributedCache.getCacheArchives(conf);
        URI[] files = DistributedCache.getCacheFiles(conf);
        Path[] localArchives = DistributedCache.getLocalCacheArchives(conf);
        Path[] localFiles = DistributedCache.getLocalCacheFiles(conf);
        if (archives != null) {
            for (int i = 0; i < archives.length; i++) {
                String link = archives[i].getFragment();
                if (link != null) {
                    link = workDir.toString() + Path.SEPARATOR + link;
                    File flink = new File(link);
                    if (!flink.exists()) {
                        FileUtil.symLink(localArchives[i].toString(), link);
                    }
                }
            }
        }
        if (files != null) {
            for (int i = 0; i < files.length; i++) {
                String link = files[i].getFragment();
                if (link != null) {
                    link = workDir.toString() + Path.SEPARATOR + link;
                    File flink = new File(link);
                    if (!flink.exists()) {
                        FileUtil.symLink(localFiles[i].toString(), link);
                    }
                }
            }
        }
    }
    File jobCacheDir = null;
    if (conf.getJar() != null) {
        jobCacheDir = new File(new Path(conf.getJar()).getParent().toString());
    }
    // workingdir for streaming
    try {
        DistributedCache.createAllSymlink(conf, jobCacheDir, workDir);
    } catch (IOException ie) {
        // Do not exit even if symlinks have not been created.
        LOG.warn(StringUtils.stringifyException(ie));
    }
    // add java.io.tmpdir given by mapred.child.tmp
    String tmp = conf.get("mapred.child.tmp", "./tmp");
    Path tmpDir = new Path(tmp);
    // prepend it with workDir.
    if (!tmpDir.isAbsolute()) {
        tmpDir = new Path(workDir.toString(), tmp);
        FileSystem localFs = FileSystem.getLocal(conf);
        if (!localFs.mkdirs(tmpDir) && !localFs.getFileStatus(tmpDir).isDir()) {
            throw new IOException("Mkdirs failed to create " + tmpDir.toString());
        }
    }
}
