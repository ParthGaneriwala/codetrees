public void filterRGBAll(int width, int height, int[][] rgbPixels) {
    if (angle == 0) {
        setPixels(width, height, rgbPixels);
        return;
    }
    double shearfac = Math.tan(angle);
    if (shearfac < 0.0)
        shearfac = -shearfac;
    int newWidth = (int) (height * shearfac + width + 0.999999);
    int[][] newPixels = new int[height][newWidth];
    for (int row = 0; row < height; ++row) {
        double new0;
        if (angle > 0.0)
            new0 = row * shearfac;
        else
            new0 = (height - row) * shearfac;
        int intnew0 = (int) new0;
        double fracnew0 = new0 - intnew0;
        double omfracnew0 = 1.0 - fracnew0;
        for (int col = 0; col < newWidth; ++col) newPixels[row][col] = 0x00000000;
        int preva = 0;
        int prevr = (rgbPixels[row][0] >> 16) & 0xff;
        int prevg = (rgbPixels[row][0] >> 8) & 0xff;
        int prevb = rgbPixels[row][0] & 0xff;
        for (int col = 0; col < width; ++col) {
            int rgb = rgbPixels[row][col];
            int a = (rgb >> 24) & 0xff;
            int r = (rgb >> 16) & 0xff;
            int g = (rgb >> 8) & 0xff;
            int b = rgb & 0xff;
            newPixels[row][intnew0 + col] = ((int) (fracnew0 * preva + omfracnew0 * a) << 24) | ((int) (fracnew0 * prevr + omfracnew0 * r) << 16) | ((int) (fracnew0 * prevg + omfracnew0 * g) << 8) | ((int) (fracnew0 * prevb + omfracnew0 * b));
            preva = a;
            prevr = r;
            prevg = g;
            prevb = b;
        }
        newPixels[row][intnew0 + width] = ((int) (fracnew0 * preva) << 24) | (prevr << 16) | (prevg << 8) | prevb;
    }
    setPixels(newWidth, height, newPixels);
}
