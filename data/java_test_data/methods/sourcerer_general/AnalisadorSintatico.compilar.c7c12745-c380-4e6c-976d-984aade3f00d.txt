public void compilar(String fileName) throws IOException, ErroCompilacao {
    AnalisadorLexico lexico = new AnalisadorLexico(fileName);
    AnalisadorSemantico semantico = new AnalisadorSemantico();
    LinkedList<Integer> pilha = new LinkedList<Integer>();
    Token token = lexico.nextToken();
    Token anterior = null;
    pilha.push(Code.DOLLAR);
    pilha.push(Code.PROGRAMA);
    laco: while (true) {
        int topo = pilha.getFirst();
        if (topo == token.getCodigo()) {
            switch(topo) {
                case Code.DOLLAR:
                    break laco;
                case Code.ID:
                    semantico.addId(token.getSimbolo());
                    break;
                case Code.PR_INTEIRO:
                case Code.LIT_INTEIRO:
                    semantico.addInteger();
                    break;
                case Code.PR_REAL:
                case Code.LIT_REAL:
                    semantico.addReal();
                    break;
                case Code.PR_STRING:
                case Code.LIT_STRING:
                    semantico.addString();
                    break;
                case Code.PR_BOOLEAN:
                case Code.PR_TRUE:
                case Code.PR_FALSE:
                    semantico.addBoolean();
                    break;
                case Code.OP_ADICAO:
                case Code.OP_AND:
                case Code.OP_ATRIBUICAO:
                case Code.OP_DIFERENTE:
                case Code.OP_DIVISAO:
                case Code.OP_IGUAL:
                case Code.OP_MAIOR:
                case Code.OP_MAIOR_IGUAL:
                case Code.OP_MENOR:
                case Code.OP_MENOR_IGUAL:
                case Code.OP_MOD:
                case Code.OP_MULTIPLICACAO:
                case Code.OP_NOT:
                case Code.OP_OR:
                case Code.OP_SUBTRACAO:
                    semantico.addOperador(topo);
                    break;
            }
            pilha.pop();
            anterior = token;
            token = lexico.nextToken();
        } else if (Code.isNaoTerminal(topo)) {
            topo = Code.getRowOf(pilha.pop());
            if (token.getCodigo() == Code.ERRO) {
                throw new ErroCompilacao(lexico.getLine(), token);
            }
            int regra = tabelaAnaliseSintatica[topo][token.getCodigo()];
            if (regra == 0) {
                throw new ErroCompilacao(lexico.getLine(), anterior, token);
            }
            for (int i = posicoes[regra]; regras[i] != 0; i++) {
                pilha.push(regras[i]);
            }
        } else if (Code.isAcaoSemantica(topo)) {
            semantico.execute(lexico.getLine(), pilha.pop());
        } else {
            throw new ErroCompilacao(lexico.getLine(), token, anterior, topo);
        }
    }
    System.out.println("\nPrograma aprovado pelos analisadores léxico, sintático e semântico\n");
}
