public void WriteBackChips() {
    String recordChipsString = "New personal bests for:";
    boolean atLeastOneNewRecord = false;
    DataOutputStream dos = null;
    try {
        dos = new DataOutputStream(new BufferedOutputStream(new FileOutputStream("./chipdata.db")));
        for (int i = 0; i < maxID; i++) {
            dos.writeFloat(users[i].actualChips);
        }
    } catch (IOException e) {
        logException(e);
    } finally {
        FileHelper.closeQuietly(dos);
    }
    DataOutputStream dos2 = null;
    try {
        dos2 = new DataOutputStream(new BufferedOutputStream(new FileOutputStream("./futures.db")));
        for (int i = 0; i < maxID; i++) {
            dos2.writeInt(users[i].futures);
        }
    } catch (IOException e) {
        logException(e);
    } finally {
        FileHelper.closeQuietly(dos2);
    }
    DataOutputStream dosr2b = null;
    try {
        dosr2b = new DataOutputStream(new BufferedOutputStream(new FileOutputStream("./orderbook.db")));
        for (int j = 2; j < orderBook[0].size(); j++) {
            dosr2b.writeInt(orderBook[0].elementAt(j));
            dosr2b.writeInt(orderBook[1].elementAt(j));
            dosr2b.writeInt(orderBook[2].elementAt(j));
            dosr2b.writeLong(orderBookTimeStamp.elementAt(j));
        }
        dosr2b.writeInt(99999);
        dosr2b.writeInt(0);
        dosr2b.writeInt(0);
        dosr2b.writeLong(System.currentTimeMillis());
    } catch (IOException e) {
        logException(e);
    } finally {
        FileHelper.closeQuietly(dosr2b);
    }
    DataOutputStream dosuu = null;
    try {
        dosuu = new DataOutputStream(new BufferedOutputStream(new FileOutputStream("./jackpot.db")));
        dosuu.writeFloat(slotJackpot);
    } catch (IOException e) {
        logException(e);
    } finally {
        FileHelper.closeQuietly(dosuu);
    }
    String bTitle = "";
    for (int i = 0; i < maxID; i++) {
        if (users[i].getTotalValue() > users[i].recordChips) {
            if (users[i].getMasterPoints() > 9) {
                if (users[i].getMasterPoints() > 29) {
                    bTitle = "(BGM)";
                } else {
                    bTitle = "(BM)";
                }
            } else {
                bTitle = "";
            }
            for (int j = 1; j < 40; j++) {
                if (users[i].getTotalValue() >= (50000 * j)) {
                    if (users[i].recordChips < j * 50000) {
                        if (users[i].getMasterPoints() == 0) {
                            masterHandleList[masterCounter] = users[i].handle;
                            masterPointsList[masterCounter] = users[i].getMasterPoints() + 1;
                            masterCounter = masterCounter + 1;
                        }
                        users[i].awardMasterPoints(1);
                        tellChannel("" + users[i].handle + bTitle + " broke " + (j * 50000) + " chips and receives one Master point.");
                        sendLine("message " + users[i].handle + " Congratulations on breaking " + (j * 50000) + " chips for the first time. You receive one Master point.");
                        break;
                    }
                } else {
                    break;
                }
            }
            users[i].recordChips = users[i].getTotalValue();
            recordChipsString = recordChipsString.concat(" " + users[i].handle + bTitle + "(" + ((int) (Math.floor(users[i].recordChips))) + ")");
            atLeastOneNewRecord = true;
        }
    }
    if (atLeastOneNewRecord) {
        tellChannel(recordChipsString);
    // sendLine("message Regionchamp "+recordChipsString.substring(9));
    }
    DataOutputStream dosv = null;
    try {
        dosv = new DataOutputStream(new BufferedOutputStream(new FileOutputStream("./playervars.db")));
        for (int i = 0; i < maxID; i++) {
            dosv.writeInt(users[i].numbertourneysbet);
            dosv.writeFloat(users[i].totalturnover);
            dosv.writeBoolean(users[i].messagevar);
            dosv.writeBoolean(users[i].nonoisevar);
            dosv.writeBoolean(users[i].eligible);
            dosv.writeBoolean(users[i].jin);
            dosv.writeBoolean(users[i].simOpen);
            dosv.writeBoolean(users[i].unpaidFT);
            dosv.writeInt(users[i].amountvar);
            dosv.writeInt(users[i].botvar);
            dosv.writeInt(users[i].getMasterPoints());
            dosv.writeFloat(users[i].recordChips);
            dosv.writeInt(users[i].selfBetType);
            dosv.writeInt(users[i].selfBetAmount);
            dosv.writeInt(users[i].slotProfits);
            dosv.writeInt(users[i].slotTurnover);
            dosv.writeInt(users[i].weeklySlotProfits);
            dosv.writeInt(users[i].weeklySlotTurnover);
            dosv.writeInt(users[i].monthlyFuturesTurnover);
            dosv.writeFloat(users[i].doubleintmultiplier);
            int commentLength = users[i].comments.size();
            dosv.writeInt(commentLength);
            if (commentLength > 0) {
                for (int j = 0; j < commentLength; j++) {
                    dosv.writeBytes(users[i].comments.elementAt(j));
                    dosv.writeByte('\n');
                }
            }
        }
    } catch (IOException e) {
        logException(e);
    } finally {
        FileHelper.closeQuietly(dosv);
    }
}
