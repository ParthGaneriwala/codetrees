// ======================== K-mean clustering ========================
public void kmCluster(HashMap<String, ObjectDoubleOpenHashMap<String>> map) {
    ArrayList<ProbCluster> nClusters = getInitClusters(map);
    ArrayList<JIntIntTuple> list = new ArrayList<JIntIntTuple>();
    ProbCluster kCluster, nCluster;
    JIntDoubleTuple max;
    int i, j, k;
    double sim;
    IntOpenHashSet skip = new IntOpenHashSet();
    for (k = 0; k < 3; k++) {
        System.out.println("== Iteration: " + k + " ==");
        list.clear();
        for (i = 0; i < nClusters.size(); i++) {
            if (skip.contains(i))
                continue;
            nCluster = nClusters.get(i);
            max = new JIntDoubleTuple(-1, -1);
            for (j = 0; j < k_clusters.size(); j++) {
                sim = getAvgSimilarity(nCluster, k_clusters.get(j), false);
                if (max.d < sim)
                    max.set(j, sim);
            }
            if (max.d >= d_km_lower)
                list.add(new JIntIntTuple(max.i, i));
        }
        for (JIntIntTuple tup : list) {
            kCluster = k_clusters.get(tup.int1);
            nCluster = nClusters.get(tup.int2);
            kCluster.addAll(nCluster);
            kCluster.set(getJoinedKey(kCluster, nCluster), 1);
            skip.add(tup.int2);
        }
        if (list.isEmpty())
            break;
    }
    printCluster();
}
