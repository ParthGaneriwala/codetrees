private Rectangle2D layoutRow(List<VisualItem> row, double width, Rectangle2D availableRectangle) {
    double sumOfRowAreas = 0;
    Iterator<VisualItem> rowIter = row.iterator();
    while (rowIter.hasNext()) {
        sumOfRowAreas += (rowIter.next()).getDouble(TreeMapLayout.AREA);
    }
    double x = availableRectangle.getX();
    double y = availableRectangle.getY();
    double d = 0;
    // = (width == 0 ? 0 : sumOfRowAreas / width)
    double height;
    if (width == 0) {
        height = 0;
    } else {
        height = sumOfRowAreas / width;
    }
    boolean horizontalLayout = (width == availableRectangle.getWidth());
    // set node positions and dimensions
    rowIter = row.iterator();
    while (rowIter.hasNext()) {
        NodeItem node = (NodeItem) rowIter.next();
        NodeItem parent = (NodeItem) node.getParent();
        if (horizontalLayout) {
            treeMapLayout.setX(node, parent, x + d);
            treeMapLayout.setY(node, parent, y);
        } else {
            treeMapLayout.setX(node, parent, x);
            treeMapLayout.setY(node, parent, y + d);
        }
        double nodeWidth = node.getDouble(TreeMapLayout.AREA) / height;
        if (horizontalLayout) {
            setNodeDimensions(node, nodeWidth, height);
            d += nodeWidth;
        } else {
            setNodeDimensions(node, height, nodeWidth);
            d += nodeWidth;
        }
    }
    // update space available in rectangle r
    if (horizontalLayout) {
        availableRectangle.setRect(x, y + height, availableRectangle.getWidth(), availableRectangle.getHeight() - height);
    } else {
        availableRectangle.setRect(x + height, y, availableRectangle.getWidth() - height, availableRectangle.getHeight());
    }
    return availableRectangle;
}
