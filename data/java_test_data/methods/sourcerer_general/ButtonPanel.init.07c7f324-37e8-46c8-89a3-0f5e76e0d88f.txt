private void init() {
    setLayout(new GridLayout(1, 1));
    importCheckstyleMetricsButton = new JButton("Import Checkstyle metrics");
    importPmdMetricsButton = new JButton("Import PMD metrics");
    jDependMetricsButton = new JButton("JDepend");
    copyImageButton = new JButton("Copy Image");
    saveImageButton = new JButton("Save Image");
    runLayoutButton = new JButton("Run Layout");
    printSourceTupleDetailsButton = new JButton("Source Details");
    printVisualTupleDetailsButton = new JButton("Visual Details");
    printViewPointDetailsButton = new JButton("ViewPoint Details");
    toggleManagedBoundsButton = new JButton("Toggle Managed Bounds");
    clearSourceModelButton = new JButton("Clear model");
    readFromFileSystemButton = new JButton("FS custom");
    readFromDefaultFileSystemButton = new JButton("FS (from Default)");
    serializeToXmlButton = new JButton("To XML");
    deSerializeFromXmlButton = new JButton("From XML");
    readFromDBButton = new JButton("From DB");
    writeToDatabaseButton = new JButton("To DB");
    // TODO coloring the buttons doesn't work
    importCheckstyleMetricsButton.setForeground(new Color(complexitymap.gui.Color.DARK_GREEN));
    jDependMetricsButton.setForeground(new Color(complexitymap.gui.Color.DARK_GREEN));
    saveImageButton.setForeground(new Color(complexitymap.gui.Color.DARK_YELLOW));
    runLayoutButton.setForeground(new Color(complexitymap.gui.Color.DARK_ORANGE));
    printSourceTupleDetailsButton.setForeground(new Color(complexitymap.gui.Color.DARK_RED));
    printVisualTupleDetailsButton.setForeground(new Color(complexitymap.gui.Color.DARK_RED));
    toggleManagedBoundsButton.setForeground(new Color(complexitymap.gui.Color.DARK_RED));
    clearSourceModelButton.setForeground(new Color(complexitymap.gui.Color.DARK_RED));
    readFromDefaultFileSystemButton.setForeground(new Color(complexitymap.gui.Color.DARK_RED));
    readFromDBButton.setForeground(new Color(complexitymap.gui.Color.DARK_RED));
    writeToDatabaseButton.setForeground(new Color(complexitymap.gui.Color.DARK_RED));
    add(importPmdMetricsButton);
    add(importCheckstyleMetricsButton);
    // add(jDependMetricsButton);
    add(copyImageButton);
    add(saveImageButton);
    if (!Config.getInstance().isLimitedMode()) {
        add(runLayoutButton);
        add(printSourceTupleDetailsButton);
        add(printVisualTupleDetailsButton);
        add(printViewPointDetailsButton);
        // add(toggleManagedBoundsButton); // implementation does not work (was meant to make layout flexible)
        add(clearSourceModelButton);
        add(serializeToXmlButton);
        add(readFromFileSystemButton);
        add(readFromDefaultFileSystemButton);
    }
    // add(deSerializeFromXmlButton);
    // add(readFromDBButton);
    // add(writeToDatabaseButton);
    importCheckstyleMetricsButton.addActionListener(new ActionListener() {

        public synchronized void actionPerformed(ActionEvent e) {
            final String LAYER_NAME = "Cyclomatic Complexity";
            SwingUtilities.invokeLater(new Runnable() {

                public void run() {
                    // note: this conditional is not really really clean; problems incase cyc_com is not a configured metric
                    if (!checkstyleImportAlreadyClicked && !Config.getInstance().isLimitedMode()) {
                        // something goes wrong in case the checkstyle metrics are run when the summary view is active
                        ViewPoint selectedViewPoint = viewPointSensitivityPanel.getSelectedViewPoint();
                        if (selectedViewPoint.getLabel().equals(ViewPoint.LABEL_SUMMARY)) {
                            JOptionPane.showMessageDialog(null, "Please don't select summary layer when adding metrics.", "Cannot add layer", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        dataService.importCheckstyleMetrics(complexityMap.getTree(), complexityPanel.getSourceDirectory()[0]);
                        viewPointSensitivityPanel.propagateSensitivityMultiplier();
                        checkstyleImportAlreadyClicked = true;
                    } else {
                        // JOptionPane.showMessageDialog(null, "A layer with name "+LAYER_NAME+
                        // " has already been added, please restart application.", "Cannot add layer",
                        // JOptionPane.WARNING_MESSAGE);
                        JOptionPane.showMessageDialog(null, "Checkstyle metrics not available in Demo-mode.", "Cannot add Checkstyle-metrics", JOptionPane.WARNING_MESSAGE);
                    }
                }
            });
        }
    });
    importPmdMetricsButton.addActionListener(new ActionListener() {

        public synchronized void actionPerformed(ActionEvent e) {
            SwingUtilities.invokeLater(new Runnable() {

                public void run() {
                    // see if layer has already been added, again, not very clean
                    if (!pmdImportAlreadyClicked) {
                        dataService.importPmdMetrics(complexityMap.getTree(), complexityPanel.getSourceDirectory()[0]);
                        pmdImportAlreadyClicked = true;
                    } else {
                        JOptionPane.showMessageDialog(null, "PMD layers have already been added.", "Cannot add layer", JOptionPane.WARNING_MESSAGE);
                    }
                }
            });
        }
    });
    jDependMetricsButton.addActionListener(new ActionListener() {

        public synchronized void actionPerformed(ActionEvent e) {
            SwingUtilities.invokeLater(new Runnable() {

                public void run() {
                    dataService.importJDependMetrics(complexityMap.getTree());
                }
            });
        }
    });
    copyImageButton.addActionListener(new ActionListener() {

        public synchronized void actionPerformed(ActionEvent e) {
            SwingUtilities.invokeLater(new Runnable() {

                public void run() {
                    copyImageToClipboard();
                }
            });
        }
    });
    saveImageButton.addActionListener(new ActionListener() {

        public synchronized void actionPerformed(ActionEvent e) {
            SwingUtilities.invokeLater(new Runnable() {

                public void run() {
                    saveMapImage();
                }
            });
        }
    });
    runLayoutButton.addActionListener(new ActionListener() {

        public synchronized void actionPerformed(ActionEvent e) {
            SwingUtilities.invokeLater(new Runnable() {

                public void run() {
                    // TupleSet nodes = complexityMap.getVisualization().getGroup(Constant.TREE_NODES);
                    // for (Iterator i = nodes.tuples(); i.hasNext();)
                    // {
                    // // VisualItem item = (VisualItem) i.next();
                    // // item.set(VisualItem.SIZE, 1);
                    // // item.set(VisualItem.DOI, 1);
                    // // item.set("_area", 1);
                    // }
                    // TODO Fix for Zoom to fit goes here
                    Rectangle2D newBounds = new Rectangle(1150, 800);
                    DisplayLib.fitViewToBounds(complexityMap, newBounds, 1000);
                    complexityMap.getVisualization().run("layout");
                }
            });
        }
    });
    printSourceTupleDetailsButton.addActionListener(new ActionListener() {

        public synchronized void actionPerformed(ActionEvent e) {
            SwingUtilities.invokeLater(new Runnable() {

                public void run() {
                    complexityMap.printAllSourceTupleDetails();
                }
            });
        }
    });
    printVisualTupleDetailsButton.addActionListener(new ActionListener() {

        public synchronized void actionPerformed(ActionEvent e) {
            SwingUtilities.invokeLater(new Runnable() {

                public void run() {
                    complexityMap.printVisualTupleDetails();
                }
            });
        }
    });
    printViewPointDetailsButton.addActionListener(new ActionListener() {

        public synchronized void actionPerformed(ActionEvent e) {
            SwingUtilities.invokeLater(new Runnable() {

                public void run() {
                    complexityMap.printViewPointDetails();
                }
            });
        }
    });
    toggleManagedBoundsButton.addActionListener(new ActionListener() {

        public synchronized void actionPerformed(ActionEvent e) {
            SwingUtilities.invokeLater(new Runnable() {

                public void run() {
                    if (complexityMap.isManagedBounds()) {
                        complexityMap.unSetManagedBounds();
                        log.info("unSetManagedBounds");
                    } else {
                        complexityMap.setManagedBounds();
                        log.info("setManagedBounds");
                    }
                }
            });
        }
    });
    clearSourceModelButton.addActionListener(new ActionListener() {

        public synchronized void actionPerformed(ActionEvent e) {
            SwingUtilities.invokeLater(new Runnable() {

                public void run() {
                    complexityMap.shutdownAndRemoveCurrentVisualization();
                    ViewPointFactory viewPointFactory = ViewPointFactory.getInstance();
                    complexityMap.setViewPoint(viewPointFactory.getInitialViewPointVector().get(0));
                    Tree newTree = SourceData.createTree();
                    // re-initialize the entire tree
                    complexityMap.addTree(newTree);
                    // complexityMap.setSourceDataTree(newTree);
                    // reset pmdClicked-check
                    pmdImportAlreadyClicked = false;
                }
            });
        }
    });
    readFromFileSystemButton.addActionListener(new ActionListener() {

        public synchronized void actionPerformed(ActionEvent e) {
            SwingUtilities.invokeLater(new Runnable() {

                public void run() {
                    String fileChooserHome = Config.getInstance().getProperty(Constant.FILE_CHOOSER_HOME_KEY);
                    String dialogTitle = "Select root of Java-packages to be visualized";
                    File selectedDirectory = FileUtil.selectDirectoryFrom(fileChooserHome, dialogTitle);
                    complexityPanel.setSourceDirectories(new File[] { selectedDirectory });
                    log.info("loading: " + selectedDirectory);
                    // remove current visualization
                    complexityMap.shutdownAndRemoveCurrentVisualization();
                    treeSource = new SinglePassFileSystemParser(selectedDirectory, new FileExtensionFilter(".java"));
                    Tree tree = treeSource.parse();
                    complexityMap.addTree(tree);
                    try {
                        Thread.sleep(500);
                    } catch (InterruptedException e) {
                        log.fatal(e.fillInStackTrace());
                    }
                    complexityMap.getVisualization().run("layout");
                }
            });
        }
    });
    readFromDefaultFileSystemButton.addActionListener(new ActionListener() {

        public synchronized void actionPerformed(ActionEvent e) {
            SwingUtilities.invokeLater(new Runnable() {

                public void run() {
                    complexityMap.shutdownAndRemoveCurrentVisualization();
                    TreeSource source = new SinglePassFileSystemParser(complexityPanel.getSourceDirectory(), new FileExtensionFilter(".java"));
                    Tree tree = source.parse();
                    complexityMap.addTree(tree);
                    try {
                        Thread.sleep(500);
                    } catch (InterruptedException e) {
                        log.fatal(e.fillInStackTrace());
                    }
                    complexityMap.getVisualization().run("layout");
                }
            });
        }
    });
    serializeToXmlButton.addActionListener(new ActionListener() {

        public synchronized void actionPerformed(ActionEvent e) {
            SwingUtilities.invokeLater(new Runnable() {

                public void run() {
                    TreeMLWriter writer = new TreeMLWriter();
                    try {
                        // @TODO check for null
                        String rootChildName = complexityMap.getTree().getRoot().getFirstChild().getString(SourceData.FULL_NAME);
                        String fileDate = Constant.YEAR_FIRST_FORMAT.format(Calendar.getInstance().getTime());
                        File exportDir = FileUtil.accessSubdirFromUserHome(Constant.DATA_DIR);
                        File dataFile = new File(exportDir.getCanonicalPath() + "/" + rootChildName + "_" + fileDate + ".xml");
                        writer.writeGraph(complexityMap.getTree(), dataFile);
                        log.info("Correctly exported graph to " + dataFile.getCanonicalPath());
                    } catch (Exception e) {
                        log.fatal(e.fillInStackTrace());
                        log.fatal("Could not write tree to XML");
                        System.exit(-1);
                    }
                }
            });
        }
    });
    deSerializeFromXmlButton.addActionListener(new ActionListener() {

        public synchronized void actionPerformed(ActionEvent e) {
            SwingUtilities.invokeLater(new Runnable() {

                public void run() {
                    final JFileChooser fileChooser = new JFileChooser(new File(System.getProperty("user.home") + "/" + Constant.DATA_DIR));
                    int returnVal = fileChooser.showOpenDialog(null);
                    File selectedFile = fileChooser.getSelectedFile();
                    log.info("loading: " + selectedFile);
                    // remove current visualization
                    complexityMap.shutdownAndRemoveCurrentVisualization();
                    // add new tree to visualization
                    TreeSource treeSource = new ExportedTreeLoader(selectedFile.getAbsolutePath());
                    Tree newTree = treeSource.parse();
                    complexityMap.addTree(newTree);
                    complexityMap.getVisualization().run("layout");
                }
            });
        }
    });
    readFromDBButton.addActionListener(new ActionListener() {

        public synchronized void actionPerformed(ActionEvent e) {
            SwingUtilities.invokeLater(new Runnable() {

                public void run() {
                    Tree tree = DatabaseReaderWriter.getInstance().readTreeFromDatabase();
                    complexityMap.addTree(tree);
                    complexityMap.getVisualization().run("layout");
                }
            });
        }
    });
    writeToDatabaseButton.addActionListener(new ActionListener() {

        public synchronized void actionPerformed(ActionEvent e) {
            SwingUtilities.invokeLater(new Runnable() {

                public void run() {
                    Visualization visualization = complexityMap.getVisualization();
                    TupleSet nodesTupleSet = visualization.getSourceData(Constant.TREE_NODES);
                    TupleSet edgesTupleSet = visualization.getSourceData(Constant.TREE_EDGES);
                    Table nodesTable = ((Tuple) nodesTupleSet.tuples().next()).getTable();
                    Table edgesTable = ((Tuple) edgesTupleSet.tuples().next()).getTable();
                    DatabaseReaderWriter.getInstance().writeTreeToDatabase(nodesTable, edgesTable);
                }
            });
        }
    });
    log.trace("Leaving ComplexityPanel.createButtonPanel()");
}
