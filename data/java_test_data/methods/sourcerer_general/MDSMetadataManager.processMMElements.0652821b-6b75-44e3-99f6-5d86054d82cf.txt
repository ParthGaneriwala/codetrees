private void processMMElements(Iterator iterator) throws MDSException {
    ArrayList arraylist = new ArrayList();
    while (iterator.hasNext()) {
        MMElement mmelement = (MMElement) iterator.next();
        String s = (String) mmelement.getProperty(MMConstants.NAME_ATTR);
        String s1 = (String) mmelement.getProperty("http://xmlns.oracle.com/jrad/xsd", MMConstants.NAMESPACE_ATTR);
        if (!s.equals("attributeSet")) {
            if (isComponentExposed(mmelement)) {
                ObjectDef objectdef = createAndInitObjectDef(mmelement);
                createAndInitPropertyDefs(mmelement, objectdef, arraylist);
                for (Enumeration enumeration = (Enumeration) mmelement.getProperty("http://xmlns.oracle.com/jrad/xsd", MMConstants.ELEMENT_SET_ATTR); enumeration.hasMoreElements(); ) {
                    MMElement mmelement1 = (MMElement) enumeration.nextElement();
                    String s2 = (String) mmelement1.getProperty(MMConstants.NAME_ATTR);
                    String s3 = (String) mmelement1.getProperty("http://xmlns.oracle.com/jrad/xsd", MMConstants.NAMESPACE_ATTR);
                    Integer integer = (Integer) mmelement1.getProperty("http://xmlns.oracle.com/jrad/xsd", MMConstants.MAX_OCCURS_ATTR);
                    Integer integer1 = (Integer) mmelement1.getProperty("http://xmlns.oracle.com/jrad/xsd", MMConstants.MIN_OCCURS_ATTR);
                    String s4 = (String) mmelement1.getProperty("http://xmlns.oracle.com/jrad/dt", MMConstants.VISIBLE_ATTR);
                    boolean flag = true;
                    if ("false".equals(s4))
                        flag = false;
                    String s5 = (String) mmelement1.getProperty("http://xmlns.oracle.com/jrad/dt", MMConstants.HIDECHILDREN_ATTR);
                    boolean flag1 = false;
                    if ("true".equals(s5))
                        flag1 = true;
                    String s6 = (String) mmelement1.getProperty("http://xmlns.oracle.com/jrad/xsd", MMConstants.XSD_TYPE_ATTR);
                    String s7 = (String) mmelement1.getProperty("http://xmlns.oracle.com/jrad/xsd", MMConstants.REF_STATE_ATTR);
                    String s8 = (String) mmelement1.getProperty("http://xmlns.oracle.com/jrad/dt", MMConstants.ADDIN_PROP_METADATA_CLASS);
                    if (s8 != null)
                        objectdef.createPropFromMetaClass(s2, s8);
                    ObjectDef objectdef2 = null;
                    if (s7 == null)
                        objectdef2 = createChildObjDef(mmelement1);
                    try {
                        BaseChildInformation basechildinformation = new BaseChildInformation(s2, s3, integer, integer1, flag, flag1, s6, mmelement1);
                        basechildinformation.mObjectDef = objectdef2;
                        objectdef.addChild(s2, basechildinformation);
                    } catch (MDSException mdsexception) {
                        Debug.println("Can not add " + s2 + " to the children list of " + s);
                    }
                }
            }
        } else {
            ObjectDef objectdef1 = createAndInitObjectDef(mmelement, true, false);
            MMAttribute mmattribute = mmelement.getAttributeDef("scope");
            createAndInitPropertyDef(s, objectdef1, mmattribute, arraylist);
        }
    }
    addToPropertyDisplayGroups(arraylist);
}
