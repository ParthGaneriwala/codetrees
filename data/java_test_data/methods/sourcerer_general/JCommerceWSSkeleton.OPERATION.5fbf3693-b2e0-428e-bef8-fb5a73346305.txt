/**
 * Auto generated method signature root points to REQUEST node.
 * note: (com.jcommerce.core.model.Brand[]) objList.toArray() is not correct. (objList type is List<ModelObject>)
 * an class cast error will be generated. ModelObject-->Brand must use objList.toArray(coreBrandList)
 * com.jcommerce.core.model.Brand[] coreBrandList
 *
 * @param rEQUEST
 */
public com.jcommerce.ws.server.RESPONSE OPERATION(com.jcommerce.ws.server.REQUEST request) {
    System.out.println("receive the request....");
    loadDBDriver();
    if (getAllImpl() == false) {
        dbImpl = getDBAccessImpl();
        adapterImpl = getAdapterImpl();
        iniAllImplInContext();
    } else {
        setAllImpl();
    }
    if ((dbImpl == null) || (adapterImpl == null)) {
        System.out.println("dbImpl or adapterImpl is null ....");
    }
    RESPONSE response = new RESPONSE();
    XXXRESP xxxResp = new XXXRESP();
    String commandType = request.getREQUEST().getCommandType().getValue();
    String targetType = request.getREQUEST().getTargetType().getValue();
    int count = 0;
    int start = 0;
    int totalNumber = 0;
    // newObjId value from insert operation.
    String newObjId = "-1";
    try {
        // call getList, multi object returned form db
        System.out.println("...objList...");
        List<ModelObject> objList = new ArrayList<ModelObject>();
        ModelObject[] coreObj = parseModelInRequest(request);
        System.out.println("...coreObj...");
        String id;
        if (coreObj != null) {
            id = dbImpl.getId(coreObj[0]);
        } else {
            if (commandType.equals("read")) {
                id = EMPTY_STR;
                if (request.getREQUEST().getReadCount() != null) {
                    count = request.getREQUEST().getReadCount().getCount();
                    start = request.getREQUEST().getReadCount().getStart();
                } else {
                    count = 0;
                    start = 0;
                }
                if (start == 0) {
                    QueryCriteria criteria = request.getREQUEST().getCriteria();
                    Criteria coreCriteria = null;
                    if (criteria != null) {
                        QueryCondition[] conditions = criteria.getCondition();
                        QueryOrder[] orders = criteria.getOrder();
                        coreCriteria = adapterImpl.getCoreCriteria(conditions, orders);
                        if (coreCriteria != null) {
                            totalNumber = dbImpl.getTotalCount(targetType, coreCriteria);
                        } else {
                            totalNumber = dbImpl.getTotalCount(targetType);
                        }
                    } else {
                        totalNumber = dbImpl.getTotalCount(targetType);
                    }
                    xxxResp.setTotalNumber(totalNumber);
                }
                System.out.println("id is empty, query all! count = " + count + "start = " + start);
            } else {
                throw new java.lang.IllegalArgumentException("objList must not be empty in write operation!");
            }
        }
        System.out.println("id = " + id);
        if (commandType.equals("read")) {
            System.out.println("dbImpl.getListObj(targetType, id,count,start,criteria)");
            QueryCriteria criteria = request.getREQUEST().getCriteria();
            Criteria coreCriteria = null;
            if (criteria != null) {
                QueryCondition[] conditions = criteria.getCondition();
                QueryOrder[] orders = criteria.getOrder();
                coreCriteria = adapterImpl.getCoreCriteria(conditions, orders);
            } else {
                coreCriteria = adapterImpl.createDefaultCriteria();
            }
            objList = dbImpl.getListObj(targetType, id, count, start, coreCriteria);
            if ((objList == null) || (objList.size() == 0)) {
            // TODO
            } else {
                createReadResp(targetType, objList, xxxResp);
            }
        }
        if (commandType.equals("insert")) {
            newObjId = dbImpl.newObject(targetType, coreObj[0]);
            xxxResp.setObjId(Integer.parseInt(newObjId));
        }
        if (commandType.equals("update")) {
            if (id.trim().equals(EMPTY_STR)) {
                throw new java.lang.IllegalArgumentException("id must not be empty in update operation!");
            } else {
                dbImpl.updateObject(targetType, coreObj[0]);
            }
        }
        if (commandType.equals("delete")) {
            if (id.trim().equals(EMPTY_STR)) {
                throw new java.lang.IllegalArgumentException("id must not be empty in delete operation!");
            } else {
                dbImpl.deleteObject(targetType, id);
            }
        }
        if (commandType.equals("upsert")) {
            throw new java.lang.UnsupportedOperationException("upsert operation");
        }
        StatusType status = new StatusType();
        status.setCode(200);
        status.setMessage("OK");
        xxxResp.setStatus(status);
    } catch (Exception e) {
        e.printStackTrace();
        System.out.println(e.getMessage());
        StatusType status = new StatusType();
        status.setCode(400);
        status.setMessage(e.getMessage());
        xxxResp.setStatus(status);
    }
    response.setRESPONSE(xxxResp);
    System.out.println("return the reponse....");
    return response;
}
