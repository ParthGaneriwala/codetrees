private synchronized void initCells(int matSize) {
    ticks = 0;
    SIZE = matSize;
    cells = new HodgeCell[SIZE][SIZE];
    tmp = new int[SIZE][SIZE];
    TurboCells = new int[SIZE][SIZE];
    int[][] initValues = new int[SIZE][SIZE];
    int cellState = 0;
    P2D origin = new P2D(SIZE / 2, SIZE / 2);
    if (init_style == INIT_RAND_CIRC) {
        origin = new P2D(Math.random() * (SIZE - 1), Math.random() * (SIZE - 1));
    }
    double maxDist = 0;
    double[] corners = new double[4];
    corners[0] = origin.distance(new P2D(0, 0));
    corners[1] = origin.distance(new P2D(SIZE, 0));
    corners[2] = origin.distance(new P2D(0, SIZE));
    corners[3] = origin.distance(new P2D(SIZE, SIZE));
    for (int i = 0; i < 4; i++) if (maxDist < corners[i])
        maxDist = corners[i];
    // init cells
    for (int x = 0; x < SIZE; x++) for (int y = 0; y < SIZE; y++) {
        switch(init_style) {
            case INIT_VOID:
                initValues[x][y] = 0;
                break;
            case INIT_CHAOS:
                initValues[x][y] = (int) (Math.random() * N);
                break;
            case INIT_PATTERN:
                if (++cellState > N)
                    cellState = 0;
                initValues[x][y] = cellState;
            case INIT_SPECTRUM:
                if (Math.random() > .5)
                    cellState++;
                else
                    cellState--;
                if (cellState > N)
                    cellState = 0;
                else if (cellState < 0)
                    cellState = N;
                initValues[x][y] = cellState;
                break;
            case INIT_CIRCLE:
            case INIT_INV_CIRC:
            case INIT_RAND_CIRC:
                double d = origin.distance(new P2D(x, y));
                double s = MiscUtil.mapValueToRange(d, 0, maxDist, 0, N);
                if (init_style == INIT_INV_CIRC)
                    s = N - s;
                initValues[x][y] = (int) s;
        }
    }
    for (int x = 0; x < SIZE; x++) for (int y = 0; y < SIZE; y++) {
        cells[x][y] = new HodgeCell(initValues[x][y]);
        TurboCells[x][y] = initValues[x][y];
    }
}
