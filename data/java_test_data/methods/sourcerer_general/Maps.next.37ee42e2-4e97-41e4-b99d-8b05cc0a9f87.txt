private static final Token next(String src, String delimiters, int j, boolean whitespaceAware, boolean parenthesis) {
    final StringBuffer tksb = new StringBuffer(64);
    final int len = src.length();
    j = Strings.skipWhitespaces(src, j);
    for (; j < len; ++j) {
        final char cc = src.charAt(j), endparen;
        if (cc == '\\') {
            tksb.append(escape(src, ++j));
        } else if (delimiters.indexOf(cc) >= 0) {
            if (src.length() > j + 1 && src.charAt(j + 1) == '=') {
                tksb.append(cc);
                tksb.append(cc);
                j += 2;
                continue;
            }
            // note: cc might be a separator which might be a whitespace
            j = Strings.skipWhitespaces(src, j);
            // done
            break;
        } else if (Character.isWhitespace(cc)) {
            final int k = Strings.skipWhitespaces(src, j);
            // done if the following is nothing but whitespace or...
            if (whitespaceAware || k >= len || delimiters.indexOf(src.charAt(k)) >= 0) {
                if (len < k && src.charAt(k + 1) == '=') {
                    j = k;
                    tksb.append(src.charAt(k));
                    tksb.append(src.charAt(k));
                    j += 2;
                    continue;
                }
                j = k;
                // done
                break;
            }
            if (j > k - 1) {
                // more than one whitespaces
                tksb.append(src.substring(j, k));
                // j will increase by one later
                j = k - 1;
            } else {
                tksb.append(cc);
            }
        } else if (parenthesis && (endparen = getEndingParenthesis(cc)) != (char) 0) {
            int k = skipParenthesis(src, j, cc, endparen);
            // endparen not found
            if (k >= len)
                k = len - 1;
            tksb.append(src.substring(j, k + 1));
            j = k;
        } else if (cc == (char) 0) {
            throw newIllegalSyntaxException(MCommon.UNEXPECTED_CHARACTER, (char) 0, src);
        } else {
            tksb.append(cc);
        }
    }
    return new Token(j, j < len ? src.charAt(j) : (char) 0, tksb.toString());
}
