public static double getTransitionProbability(State s1, State s2, int lengthOfIntron, int lengthOfExon) {
    // TODO see if this an appropriate fix
    double intronLength = 0;
    if (lengthOfIntron < 0)
        intronLength = 0.0000001;
    else
        intronLength = (double) lengthOfIntron;
    // System.out.println("Rate of occurence: " + rateOfOccurenceOfCNV );
    Double transitionProb = 0.0;
    if (s1 == null || s2 == null) {
        System.err.println("Invalid states in transition Probabilities");
        System.exit(0);
    }
    if (s1.equals(s2)) {
        if (// self loop in Markov Model
        s1.stateName != NORMAL) {
            double lambda = (double) 1.0 / s1.E_LengthOfState;
            transitionProb = Math.exp(-lambda * intronLength);
        } else if (// normal -> normal
        s1.stateName == NORMAL) {
            // see below part
            // Poisson process with lambda = rate of occurrence of CNV
            double lambda = rateOfOccurenceOfCNV * lengthOfExon;
            transitionProb = lambda * Math.exp(-lambda) / 5;
            lambda = rateOfOccurenceOfCNV;
            transitionProb = 1 - HiddenMarkovModel.States.size() * Math.exp(-lambda * intronLength);
            transitionProb = Math.exp(-lambda * intronLength);
        /*if (transitionProb < 0) // shouldnt happen
					transitionProb = 0.0;
					*/
        }
    } else if (!s1.equals(s2)) {
        if (// abnormal -> normal
        s2.stateName == NORMAL) {
            double lambda = (double) 1.0 / s1.E_LengthOfState;
            transitionProb = (1 - Math.exp(-lambda * intronLength));
        } else if (// normal -> abnormal
        s1.stateName == NORMAL) {
            // Poisson process with lambda = rate of occurrence of CNV
            double lambda = rateOfOccurenceOfCNV * lengthOfExon;
            transitionProb = lambda * Math.exp(-lambda) / 5;
            lambda = rateOfOccurenceOfCNV;
            transitionProb = (1 - Math.exp(-lambda * intronLength)) / (HiddenMarkovModel.States.size() - 1);
        } else
            transitionProb = 0.0;
    } else
        transitionProb = 0.0;
    return transitionProb;
}
