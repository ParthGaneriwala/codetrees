private String toMapleCodeStringRec(ExpTreenode root, String ParentOp, boolean rightside) {
    String leftstr = "";
    String rightstr = "";
    if (root == null)
        return "";
    if (Operator.indexOf(root.op_str) >= 0) {
        leftstr = toMapleCodeStringRec(root.left, root.op_str, false);
        rightstr = toMapleCodeStringRec(root.right, root.op_str, true);
        boolean includeParens = false;
        if (!ParentOp.equals(""))
            if ((Operator.indexOf(root.op_str) >= 0) && (Operator.indexOf(ParentOp) >= 0)) {
                if ((AddOperator.indexOf(root.op_str) >= 0) && (MultOperator.indexOf(ParentOp) >= 0))
                    includeParens = true;
                if ((AddOperator.indexOf(root.op_str) >= 0) && (PowOperator.indexOf(ParentOp) >= 0))
                    includeParens = true;
                if ((MultOperator.indexOf(root.op_str) >= 0) && (PowOperator.indexOf(ParentOp) >= 0))
                    includeParens = true;
                if ((PowOperator.indexOf(root.op_str) >= 0) && (PowOperator.indexOf(ParentOp) >= 0))
                    includeParens = true;
                if ((AddOperator.indexOf(root.op_str) >= 0) && ParentOp.equals("-") && rightside)
                    includeParens = true;
                if (root.op_str.equals("-") && (root.left == null))
                    includeParens = true;
            }
        if (includeParens)
            return "(" + leftstr + root.op_str + rightstr + ")";
        else
            return leftstr + root.op_str + rightstr;
    } else if (Terminal.indexOf(root.op_str) >= 0) {
        return root.op_str;
    } else if (root.op_str.equals("e")) {
        return "exp(1)";
    } else if (root.op_str.equals("pi")) {
        return "Pi";
    } else if (root.op_str.equals("i")) {
        return "I";
    } else if (root.op_str.equals("#")) {
        return "(" + root.num.toMapleCodeString() + ")";
    } else if (!FindFct(root.op_str).equals("")) {
        rightstr = toMapleCodeStringRec(root.right, root.op_str, true);
        String fctStr = root.op_str;
        String MapleFctStr = fctStr;
        if (fctStr.equals("log"))
            MapleFctStr = "log10";
        if (fctStr.equals("asin"))
            MapleFctStr = "arcsin";
        if (fctStr.equals("acos"))
            MapleFctStr = "arccos";
        if (fctStr.equals("atan"))
            MapleFctStr = "arctan";
        if (fctStr.equals("asec"))
            MapleFctStr = "arcsec";
        if (fctStr.equals("acsc"))
            MapleFctStr = "arccsc";
        if (fctStr.equals("acot"))
            MapleFctStr = "arccot";
        if (fctStr.equals("mod"))
            MapleFctStr = "abs";
        if (fctStr.equals("arg"))
            MapleFctStr = "argument";
        if (fctStr.equals("zeron"))
            MapleFctStr = "abs(2,";
        if (fctStr.equals("sign"))
            MapleFctStr = "abs(1,";
        if (fctStr.equals("asinh"))
            MapleFctStr = "arcsinh";
        if (fctStr.equals("acosh"))
            MapleFctStr = "arccosh";
        if (fctStr.equals("atanh"))
            MapleFctStr = "arctanh";
        if (fctStr.equals("asech"))
            MapleFctStr = "arcsech";
        if (fctStr.equals("acsch"))
            MapleFctStr = "arccsch";
        if (fctStr.equals("acoth"))
            MapleFctStr = "arccoth";
        String retstr = MapleFctStr + "(" + rightstr + ")";
        if (fctStr.equals("zeron") || fctStr.equals("sign"))
            retstr += ")";
        return retstr;
    }
    // Should not happen.
    return "";
}
