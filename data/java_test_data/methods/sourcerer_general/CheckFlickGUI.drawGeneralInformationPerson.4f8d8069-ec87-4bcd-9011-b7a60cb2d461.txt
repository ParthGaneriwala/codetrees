protected static void drawGeneralInformationPerson(final PersonEntity person, final int tabIndex) {
    cleanAllComposites();
    Color frontColor = new Color(display, 222, 235, 247);
    entityDetails = new Composite(shell.getShell(), SWT.BORDER);
    entityDetails.setLocation(2, 145);
    entityDetails.setLayout(new FillLayout());
    bar = new ExpandBar(entityDetails, SWT.V_SCROLL);
    bar.setBackground(new Color(display, 177, 200, 231));
    Image image = ImageCache.getImage("paper_content_48.png");
    // general information
    Composite composite = new Composite(bar, SWT.FILL);
    composite.setBackground(frontColor);
    GridLayout layout = new GridLayout(6, false);
    layout.marginLeft = layout.marginTop = layout.marginRight = layout.marginBottom = 5;
    layout.verticalSpacing = 10;
    composite.setLayout(layout);
    Label label = new Label(composite, SWT.NONE);
    label.setText("Person Name:");
    label.setBackground(frontColor);
    final Text nameText = new Text(composite, SWT.FILL | SWT.BORDER);
    nameText.setText(person.getName());
    label = new Label(composite, SWT.NONE);
    label.setText("Year Of Birth: ");
    label.setBackground(frontColor);
    final Text bYearText = new Text(composite, SWT.FILL | SWT.BORDER);
    if (person.getYearOfBirth() != 0)
        bYearText.setText(String.valueOf(person.getYearOfBirth()));
    final String oldBYear = String.valueOf(person.getYearOfBirth());
    label = new Label(composite, SWT.NONE);
    label.setText("Year Of Death: ");
    label.setBackground(frontColor);
    final Text dYearText = new Text(composite, SWT.FILL | SWT.BORDER);
    if (person.getYearOfDeath() != 0)
        dYearText.setText(String.valueOf(person.getYearOfDeath()));
    final String oldDYear = String.valueOf(person.getYearOfDeath());
    label = new Label(composite, SWT.NONE);
    label.setText("Origin City: ");
    label.setBackground(frontColor);
    final Text cityText = new Text(composite, SWT.FILL | SWT.BORDER);
    if (person.getCityOfBirth() != null)
        cityText.setText(person.getCityOfBirth());
    label = new Label(composite, SWT.NONE);
    label.setText("Origin Country: ");
    label.setBackground(frontColor);
    final Combo countryCombo = new Combo(composite, SWT.READ_ONLY);
    if (person.getCountryOfBirth() != 0)
        countryCombo.setText(getName(countriesList, String.valueOf(person.getCountryOfBirth())));
    String[] countryString = new String[countriesList.size()];
    int selected = -1;
    for (int i = 0; i < countriesList.size(); i++) {
        countryString[i] = countriesList.get(i).getName();
        if (person.getCountryOfBirth() == countriesList.get(i).getId())
            selected = i;
    }
    countryCombo.setItems(countryString);
    if (selected != -1)
        countryCombo.select(selected);
    label = new Label(composite, SWT.NONE);
    label.setBackground(frontColor);
    label = new Label(composite, SWT.NONE);
    label.setBackground(frontColor);
    Button save = new Button(composite, SWT.PUSH);
    save.setText("Save");
    save.setBackground(frontColor);
    save.setEnabled(isAdmin);
    // listen to the save button
    save.addSelectionListener(new SelectionListener() {

        public void widgetDefaultSelected(SelectionEvent e) {
        }

        public void widgetSelected(SelectionEvent e) {
            Calendar toDay = Calendar.getInstance();
            final int year = toDay.get(Calendar.YEAR);
            String newName = person.getName();
            int newBYear = person.getYearOfBirth();
            int newDYear = person.getYearOfDeath();
            int newCountry = person.getCountryOfBirth();
            String newCity = person.getCityOfBirth();
            boolean valid = true;
            boolean update = false;
            if (newName.compareTo(nameText.getText()) != 0) {
                if (nameText.getText() != "") {
                    newName = nameText.getText();
                    update = true;
                } else {
                    okMessageBox("You can't leave the name of the person empty.");
                    valid = false;
                }
            }
            if (oldBYear.compareTo(bYearText.getText()) != 0) {
                if (bYearText.getText() != "") {
                    try {
                        newBYear = Integer.parseInt(bYearText.getText());
                        update = true;
                        if ((newBYear < 1800) || (newBYear > year)) {
                            okMessageBox("Birth year must be between 1800 and " + year + ".");
                            valid = false;
                        }
                    } catch (NumberFormatException nfe) {
                        okMessageBox("The birth year must be a number.");
                        valid = false;
                    }
                } else
                    okMessageBox("You can't leave the birth year empty.");
            }
            if (oldDYear.compareTo(dYearText.getText()) != 0) {
                if (dYearText.getText() != "") {
                    try {
                        newBYear = Integer.parseInt(bYearText.getText());
                        update = true;
                        if ((newDYear < newBYear) || (newDYear > year)) {
                            okMessageBox("Death year must be between the birth year and " + year + ".");
                            valid = false;
                        }
                    } catch (NumberFormatException nfe) {
                        okMessageBox("The death year must be a number.");
                        valid = false;
                    }
                }
            }
            if (countryCombo.getText() != "") {
                if (newCountry != Integer.parseInt(getID(countriesList, countryCombo.getText()))) {
                    newCountry = Integer.parseInt(getID(countriesList, countryCombo.getText()));
                    update = true;
                }
            } else {
                okMessageBox("You have to insert an origin country.");
                valid = false;
            }
            if (newCity != null) {
                if (newCity.compareTo(cityText.getText()) != 0) {
                    newCity = cityText.getText();
                    update = true;
                }
            } else {
                if (cityText.getText() != "") {
                    newCity = cityText.getText();
                    update = true;
                }
            }
            if (update && valid) {
                // saving
                person.setCityOfBirth(newCity);
                person.setCountryOfBirth(newCountry);
                person.setName(newName);
                person.setYearOfBirth(newBYear);
                person.setYearOfDeath(newDYear);
                try {
                    pool.execute(DataManager.updatePersonData(PersonDataEnum.PERSON, person));
                } catch (InterruptedException e1) {
                    e1.printStackTrace();
                }
            } else {
                // couldn't save
                if (!update)
                    okMessageBox("You didn't change anything.");
            }
        }
    });
    Button reset = new Button(composite, SWT.PUSH);
    reset.setText("Reset");
    reset.setBackground(frontColor);
    // listen to the reset button
    reset.addSelectionListener(new SelectionListener() {

        public void widgetDefaultSelected(SelectionEvent e) {
        }

        public void widgetSelected(SelectionEvent e) {
            nameText.setText(person.getName());
            if (person.getYearOfBirth() != 0)
                bYearText.setText(String.valueOf(person.getYearOfBirth()));
            else
                bYearText.setText("");
            if (person.getYearOfDeath() != 0)
                dYearText.setText(String.valueOf(person.getYearOfDeath()));
            else
                dYearText.setText("");
            int selected = -1;
            for (int i = 0; i < countriesList.size(); i++) {
                if (person.getCountryOfBirth() == countriesList.get(i).getId())
                    selected = i;
            }
            if (selected != -1)
                countryCombo.select(selected);
            else
                countryCombo.deselectAll();
            if (person.getCityOfBirth() != null)
                cityText.setText(person.getCityOfBirth());
            else
                cityText.setText("");
        }
    });
    label = new Label(composite, SWT.NONE);
    label = new Label(composite, SWT.NONE);
    Button delete = new Button(composite, SWT.PUSH);
    delete.setText("Delete Person");
    delete.setEnabled(isAdmin);
    // listen to the delete button
    delete.addSelectionListener(new SelectionListener() {

        public void widgetDefaultSelected(SelectionEvent arg0) {
        }

        public void widgetSelected(SelectionEvent arg0) {
            switch(yesNoMessageBox("Are you sure you want to delete this person?")) {
                case (SWT.YES):
                    {
                        try {
                            // deleting
                            pool.execute(DataManager.deletePersonEntity(PersonDataEnum.PERSON, person, person.getId()));
                            RibbonTab current = shell.getRibbonTabFolder().getSelectedTab();
                            entityDetails.setVisible(false);
                            shell.getRibbonTabFolder().selectPrevTab();
                            List<RibbonTab> tabList = shell.getRibbonTabFolder().getTabs();
                            tabList.remove(current.getIndex());
                            shell.getRibbonTabFolder().redraw();
                        } catch (InterruptedException ev) {
                            ev.printStackTrace();
                        }
                    }
                case (SWT.NO):
                    {
                    }
            }
        }
    });
    Button close = new Button(composite, SWT.PUSH);
    close.setText("Close Tab");
    ExpandItem item0 = new ExpandItem(bar, SWT.NONE, 0);
    item0.setText("General Information About The Person");
    item0.setHeight(composite.computeSize(SWT.DEFAULT, SWT.DEFAULT).y);
    item0.setControl(composite);
    item0.setImage(image);
    item0.setExpanded(true);
    bar.setSpacing(8);
    entityDetails.setSize(shell.getShell().getSize().x - 5, shell.getShell().getSize().y / 3);
    // listen to the close tab button
    close.addSelectionListener(new SelectionListener() {

        public void widgetDefaultSelected(SelectionEvent e) {
        }

        public void widgetSelected(SelectionEvent e) {
            RibbonTab current = shell.getRibbonTabFolder().getTabs().get(tabIndex);
            entityDetails.setVisible(false);
            if (tabIndex == shell.getRibbonTabFolder().getSelectedTab().getIndex())
                shell.getRibbonTabFolder().selectPrevTab();
            List<RibbonTab> tabList = shell.getRibbonTabFolder().getTabs();
            tabList.remove(current.getIndex());
            shell.getRibbonTabFolder().redraw();
        }
    });
}
