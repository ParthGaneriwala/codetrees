public void run() {
    String StreamingCommand = scmsg.getStreamingCmd();
    if ((scmsg.getFilename().length() < 5)) {
        try {
            boolean isReply = true;
            service.sendStreamingControlMessage(scmsg, isReply);
        } catch (IOException e) {
            e.printStackTrace();
        }
        return;
    }
    if ((StreamingCommand.compareTo("InitFlashPlayer")) == 0) {
        myBroadCastName = "";
        if (flashPlayer != null)
            flashPlayer.recreate();
        streamingComposite.toolStatusBar.showProgressMsg("Synchronizing Streamings...");
    } else if (((StreamingCommand.startsWith("StartFlashPlayer")) && ((scmsg.getFilename().compareTo(myBroadCastName) != 0)))) {
        // the flashPlayer is already playing the same Streaming in the same playback state...
        if ((flashPlayer.filename.compareTo(scmsg.getFilename()) == 0) && (flashPlayer.address.compareTo(scmsg.getAddress()) == 0)) {
            streamingComposite.toolStatusBar.showStreamingInfo(infoStr);
            try {
                boolean isReply = true;
                service.sendStreamingControlMessage(scmsg, isReply);
            } catch (IOException e) {
                e.printStackTrace();
            }
            return;
        } else {
            myBroadCastName = "";
            if (flashPlayer != null)
                flashPlayer.recreate();
            final Runnable runOnPlayBackStarted = new Runnable() {

                public void run() {
                    streamingComposite.toolStatusBar.showStreamingInfo(infoStr);
                    // if the Controller/Server is in the same STATE, or if it's in 'PAUSED' STATE.
                    if (scmsg.getStreamStatus().compareTo("PAUSED") == 0) {
                        flashPlayer.NetStreamStatus = "PAUSED";
                        flashPlayer.CallFunction("PlayPause");
                    } else
                        flashPlayer.NetStreamStatus = "PLAYING";
                    try {
                        boolean isReply = true;
                        service.sendStreamingControlMessage(scmsg, isReply);
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            };
            flashPlayer.runOnceOnFSCommand(runOnPlayBackStarted, fsCmdLstForPlayBackStart);
            // XXX http test...
            if (scmsg.getProtocol().startsWith("http")) {
                flashPlayer.loadRemoteHTTPMovie(SWFPlayerPath, scmsg.getAddress(), scmsg.getFilename(), scmsg.getProtocol(), DEFAULT_BUFFER_TIME);
            } else {
                flashPlayer.loadRemoteRTMPMovie(SWFPlayerPath, scmsg.getAddress(), scmsg.getFilename(), scmsg.getProtocol(), DEFAULT_BUFFER_TIME);
            }
        }
        System.out.println("\n\n *** NetStream STATUS: " + flashPlayer.NetStreamStatus + "  ***\n");
        System.out.flush();
        return;
    } else if ((StreamingCommand.compareTo("PlayPause")) == 0) {
        // NetStreamStatus Update...
        if (flashPlayer.NetStreamStatus.compareTo("PLAYING") == 0)
            flashPlayer.NetStreamStatus = "PAUSED";
        else
            flashPlayer.NetStreamStatus = "PLAYING";
        System.out.println("\n\n *** NetStream STATUS: " + flashPlayer.NetStreamStatus + "  ***\n");
        System.out.flush();
        flashPlayer.CallFunction("PlayPause");
    } else if ((StreamingCommand.compareTo("SeekToPosition")) == 0) {
    /* 
					 * "SeekToPosition" Command is Performed by Red5 Shared Object...
					 */
    } else if ((StreamingCommand.compareTo("NetStream.Play.Stop")) == 0) {
        // NetStreamStatus Update when Controller PlayBack has stopped
        flashPlayer.NetStreamStatus = "PAUSED";
        flashPlayer.CallFunction("PlayPause");
        // flashPlayer.CallFunction("Rewind");
        System.out.println("\n NETSTREAM-STATUS UPDATED: " + flashPlayer.NetStreamStatus);
        System.out.flush();
    } else if ((StreamingCommand.compareTo("SoundOnOff")) == 0) {
        flashPlayer.CallFunction("SoundOnOff");
    } else if ((StreamingCommand.compareTo("FullScreenModeExit")) == 0) {
        flashPlayer.disableFullScreen();
    }
    /* 
				 * In Every Case The Client-Side Tool Replies to the 
				 * Streaming Control Message received from Controller...
				 */
    try {
        boolean isReply = true;
        service.sendStreamingControlMessage(scmsg, isReply);
    } catch (IOException e) {
        e.printStackTrace();
    }
/* **************************************************************** */
}
