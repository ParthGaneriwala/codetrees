public void parse() throws IOException {
    File analysisFile = Main.getAnalysisFile(m_options);
    if (analysisFile != null)
        m_out = new PrintStream(new FileOutputStream(analysisFile));
    m_terminals.put(s_finish.name, s_finish);
    m_terminals.put(s_error.name, s_error);
    m_symbolMap.put(s_finish.value, s_finish.name);
    m_symbolMap.put(s_error.value, s_error.name);
    m_maxTerminal = parseTerminals();
    // add start condition
    Production startProduction = new Production(getNonterminal(START), m_productionIdCounter++);
    m_productions.add(startProduction);
    m_productionMap.put(m_nonTerminals.get(START), new Production[] { startProduction });
    parseProductions();
    // make sure all the non-terminals have its production
    for (int i = 0; i < m_nonTerminalCount; ++i) {
        if (m_productionMap.get(i + m_maxTerminal + 1) == null)
            throw new ParserException(0, "Missing production for non-terminal " + m_symbolMap.get(i + m_maxTerminal + 1));
    }
    ParserDoc parserDoc = m_doc.getParser();
    Integer startNonTerminal = parserDoc.getStart() == null ? (m_productions.size() > 1 ? m_productions.get(1).getSymbol() : null) : m_nonTerminals.get(parserDoc.getStart());
    if (startNonTerminal == null)
        throw new ParserException(0, "Unable to find the start symbol for the parser.");
    startProduction.setProduction(new int[] { startNonTerminal });
    // now we need to add the internal symbols
    // the computed used tokens can be smaller than the symbol map
    // if there are terminals that are declared but not used.
    // 
    // other times, such as in case of Unary minus, a token is used
    // merely to specify the precedence
    m_terminalCount = computeUsedSymbols();
    m_usedSymbolCount = m_usedSymbols.length;
    m_usedTerminalCount = m_usedSymbols.length - m_nonTerminalCount;
    verboseSection("used symbols");
    for (int i = 0; i < m_usedSymbols.length; ++i) verbose(i + "\t:\t" + m_usedSymbols[i] + "\t:\t" + m_symbolMap.get(m_usedSymbols[i]));
    verboseSection("statistics");
    verbose("max terminal = " + m_maxTerminal);
    verbose("non terminal count = " + m_nonTerminalCount);
    verbose("terminal count = " + m_terminalCount);
    verbose("used terminal count = " + m_usedTerminalCount);
    verbose("used symbol count = " + m_usedSymbolCount);
    // verbose ("symbol map = " + m_symbolMap);
    verboseSection("productions");
    for (Production p : m_productions) verbose(toString(p));
    computeFirstSet();
    new LALR(this).build();
    reduce();
    if (m_out != null) {
        m_out.close();
        m_out = null;
    }
}
