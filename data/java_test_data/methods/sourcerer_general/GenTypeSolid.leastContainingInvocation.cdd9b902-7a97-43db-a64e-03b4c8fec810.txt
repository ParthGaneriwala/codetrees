private static GenTypeClass leastContainingInvocation(GenTypeClass a, GenTypeClass b, Stack lubBt, boolean breakRecursion) {
    if (!a.getReflective().getName().equals(b.getReflective().getName()))
        throw new IllegalArgumentException("Class types must be the same.");
    if (a.isRaw() || b.isRaw())
        return (a.isRaw()) ? a : b;
    // Handle arrays - apply against component type
    // number of array dimensions
    int arrCount = 0;
    GenTypeClass origA = a;
    while (a.getArrayComponent() != null) {
        a = a.getArrayComponent().asClass();
        b = b.getArrayComponent().asClass();
        if (a == null) {
            // if a is now null, the array is of primitive type
            return origA;
        }
        arrCount++;
    }
    List lc = new ArrayList();
    Iterator i = a.getTypeParamList().iterator();
    Iterator j = b.getTypeParamList().iterator();
    GenTypeClass oa = a.getOuterType();
    GenTypeClass ob = b.getOuterType();
    GenTypeClass oc = null;
    if (oa != null && ob != null)
        oc = leastContainingInvocation(oa, ob, lubBt, breakRecursion);
    // G<lcta(X1,Y1), ..., lcta(Xn,Yn)>
    while (i.hasNext()) {
        GenTypeParameter atype = (GenTypeParameter) i.next();
        GenTypeParameter btype = (GenTypeParameter) j.next();
        GenTypeParameter rtype;
        if (!breakRecursion)
            rtype = leastContainingTypeArgument(atype, btype, lubBt);
        else
            rtype = new GenTypeUnbounded();
        lc.add(rtype);
    }
    // re-instate array dimensions
    GenTypeClass rval = new GenTypeClass(a.getReflective(), lc, oc);
    while (arrCount-- > 0) {
        rval = new GenTypeArray(rval);
    }
    return rval;
}
