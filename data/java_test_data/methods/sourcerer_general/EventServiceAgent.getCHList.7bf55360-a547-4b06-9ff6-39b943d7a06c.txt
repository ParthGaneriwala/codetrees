public Hashtable<String, Double> getCHList() {
    Hashtable<String, Double> ch_l = new Hashtable<String, Double>();
    if (Config.CLUSTER_POLICY == Config.CLUSTER_HEURISTIC) {
        updCHResourceStatus();
        Enumeration ks = heads.keys();
        double best_idx = 1.0;
        double curr_idx = -1.0;
        String best_ch = Config.CH_ROOT_NAME, curr_ch;
        int att_nodes;
        ClusterHeadInfo chi;
        while (ks.hasMoreElements()) {
            curr_ch = (String) ks.nextElement();
            att_nodes = ((ClusterHeadInfo) heads.get(curr_ch)).getAttached_nodes();
            if ((heads.get(curr_ch) != null) && (((ClusterHeadInfo) heads.get(curr_ch)).getResourceStatus() != null)) {
                chi = (ClusterHeadInfo) heads.get(curr_ch);
                curr_idx = chi.getResourceStatus().getStatusIndex() / (double) chi.getAttached_nodes();
            } else
                curr_idx = -1.0;
            if (att_nodes < Config.MAX_CLUSTER_SIZE && curr_idx > best_idx) {
                best_idx = curr_idx;
                best_ch = curr_ch;
            }
        }
        System.out.println("BestCH:" + best_ch);
        chi = (ClusterHeadInfo) heads.get(best_ch);
        chi.addAttachedNode();
        heads.put(best_ch, chi);
        // Vector<String> res = new Vector<String>();
        ch_l.put(best_ch, new Double(curr_idx));
        return ch_l;
    }
    Enumeration ks = heads.keys();
    String curr_ch;
    while (ks.hasMoreElements()) {
        curr_ch = (String) ks.nextElement();
        ch_l.put(curr_ch, new Double(((ClusterHeadInfo) heads.get(curr_ch)).getResourceStatus().getStatusIndex()));
    }
    // updCHResourceStatus();
    return ch_l;
}
