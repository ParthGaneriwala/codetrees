public void CloseMarket(int botnr) {
    marketopen[botnr] = false;
    gamecounter[botnr] = 0;
    finalpool = getPool(botnr);
    totalpool = totalpool + finalpool + tripool[botnr] - rollover[botnr];
    if (finalpool > highestpool) {
        highestpool = finalpool;
    }
    if (tripool[botnr] > highestrollover) {
        highestrollover = tripool[botnr];
    }
    if (norecordsfile) {
    // nothing
    } else {
        if (finalpool > historichighestpool) {
            printNewRecord();
            tellChannel("The pool of " + finalpool + " in " + BotList[botnr] + " constitutes a NEW BETTINGBOT RECORD, beating the pool of " + historichighestpool + " on " + historichighestpooldate + "!! Cheers!");
            historichighestpool = finalpool;
            setnewpooldate = true;
        }
        if (tripool[botnr] > historichighestrollover) {
            printNewRecord();
            tellChannel("The tricast pool of " + tripool[botnr] + " in " + BotList[botnr] + " constitutes a NEW BETTINGBOT RECORD, beating the tricast pool of " + historichighestrollover + " on " + historichighestrolloverdate + "!! Cheers!");
            historichighestrollover = tripool[botnr];
            setnewrolloverdate = true;
        }
    }
    if (finalpool < smallestpool) {
        smallestpool = finalpool;
    }
    backup(botnr);
    SaveNewRollovers();
    if (((marketopen[0]) && (countplayers[0] > 0)) || ((marketopen[1]) && (countplayers[1] > 0)) || ((marketopen[2]) && (countplayers[2] > 0)) || ((marketopen[3]) && (countplayers[3] > 0)) || ((marketopen[4]) && (countplayers[4] > 0)) || ((marketopen[5]) && (countplayers[5] > 0)) || ((marketopen[6]) && (countplayers[6] > 0)) || ((marketopen[7]) && (countplayers[7] > 0)) || ((marketopen[8]) && (countplayers[8] > 0))) {
    // then do not write back
    // tellProgrammers("did not write back, as condition was not fulfilled");
    } else {
        WriteBackChips();
    // tellProgrammers("wrote back chips!!");
    }
    tellChannel("The betting market for " + BotList[botnr] + " has been closed (pool: " + ((int) (Math.floor(finalpool))) + ", tripool: " + tripool[botnr] + " chips).");
    sendLine("qimpart 282 1 3 1 " + BotList[botnr]);
    finalpool = 0;
    statictotecore[botnr] = false;
    finalizeiterations = 30;
    statictote[botnr] = totecore(botnr);
    finalizeiterations = 0;
    // grabbinginfo=botnr;
    // myPointerToBBMainObject.myAssi.infocheck(BotList[botnr]);
    tourneyStatus[botnr] = 2;
    writeToAutoRecoverFile();
    saveEvents();
}
