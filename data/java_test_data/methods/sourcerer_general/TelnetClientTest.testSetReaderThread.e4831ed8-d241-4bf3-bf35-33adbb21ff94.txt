public void testSetReaderThread() throws Exception {
    boolean negotiation1_ok = false;
    boolean negotiation2_ok = false;
    boolean read_ok = false;
    byte[] buffread1 = new byte[6];
    byte[] send1 = { (byte) TelnetCommand.IAC, (byte) TelnetCommand.DO, (byte) 15, (byte) TelnetCommand.IAC, (byte) TelnetCommand.WILL, (byte) 15 };
    byte[] expected1 = { (byte) TelnetCommand.IAC, (byte) TelnetCommand.WONT, (byte) 15, (byte) TelnetCommand.IAC, (byte) TelnetCommand.DONT, (byte) 15 };
    InputStream is1 = NOREAD.server.getInputStream();
    OutputStream os1 = NOREAD.server.getOutputStream();
    is1.skip(is1.available());
    os1.write(send1);
    os1.flush();
    os1.write("A".getBytes());
    os1.flush();
    Thread.sleep(1000);
    InputStream instr = NOREAD.client.getInputStream();
    byte[] buff = new byte[4];
    int ret_read = 0;
    ret_read = instr.read(buff);
    if ((ret_read == 1) && (buff[0] == 'A')) {
        read_ok = true;
    }
    // if(is1.available() == 6)
    // {
    is1.read(buffread1);
    if (equalBytes(buffread1, expected1))
        negotiation1_ok = true;
    // }
    InputStream is2 = STANDARD.server.getInputStream();
    OutputStream os2 = STANDARD.server.getOutputStream();
    Thread.sleep(1000);
    is2.skip(is2.available());
    os2.write(send1);
    os2.flush();
    Thread.sleep(1000);
    // if(is2.available() == 6)
    // {
    is2.read(buffread1);
    if (equalBytes(buffread1, expected1))
        negotiation2_ok = true;
    // }
    assertTrue(!NOREAD.client.getReaderThread());
    assertTrue(STANDARD.client.getReaderThread());
    assertTrue("Expected read_ok to be true, got " + read_ok, read_ok);
    assertTrue("Expected negotiation1_ok to be true, got " + negotiation1_ok, negotiation1_ok);
    assertTrue("Expected negotiation2_ok to be true, got " + negotiation2_ok, negotiation2_ok);
}
