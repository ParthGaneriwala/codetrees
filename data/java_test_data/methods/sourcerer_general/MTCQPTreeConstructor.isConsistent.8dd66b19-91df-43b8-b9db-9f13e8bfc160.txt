boolean isConsistent(Quartet q) {
    boolean nonDetermination = true;
    boolean consistent = false;
    int k = 0;
    int a = q.nodes[0];
    int b = q.nodes[1];
    int c = q.nodes[2];
    int d = q.nodes[3];
    int[][] pt = partTable;
    int[] sum = new int[4];
    boolean nd1 = false;
    boolean nd2 = false;
    while (nonDetermination) {
        operation_count++;
        sum[0] += pt[a][k];
        sum[1] += pt[b][k];
        sum[2] += pt[c][k];
        sum[3] += pt[d][k];
        // if(pt[a][k]==pt[b][k] && pt[c][k]==pt[d][k] && pt[a][k]!=pt[c][k]){
        if (sum[0] == sum[1] && sum[2] == sum[3] && sum[0] != sum[2]) {
            nonDetermination = false;
            consistent = true;
        } else if (pt[a][k] != pt[b][k] && pt[c][k] != pt[d][k]) {
            // }else if(sum[0]!=sum[1] && sum[2]!=sum[3]){
            nonDetermination = false;
            consistent = false;
        } else if (sum[2] == sum[3] && sum[2] != sum[0] && sum[2] != sum[1]) {
            nonDetermination = false;
            consistent = true;
        } else if (pt[c][k] == pt[d][k] && pt[c][k] != pt[a][k] && pt[c][k] != pt[b][k]) {
            nonDetermination = false;
            consistent = true;
        } else if (sum[0] == sum[1] && sum[0] != sum[2] && sum[0] != sum[3]) {
            nonDetermination = false;
            consistent = true;
        } else if (pt[a][k] == pt[b][k] && pt[a][k] != pt[c][k] && pt[a][k] != pt[d][k]) {
            nonDetermination = false;
            consistent = true;
        } else if ((pt[a][k] == 0 && pt[b][k] == 0) || (pt[c][k] == 0 && pt[d][k] == 0)) {
            nonDetermination = false;
            consistent = true;
        } else {
            if ((pt[a][k] != pt[b][k])) {
                nd1 = true;
                sum[2] = 0;
                sum[3] = 0;
                if (pt[a][k] == pt[c][k]) {
                    sum[0] = 0;
                } else {
                    sum[1] = 0;
                }
            }
            if ((pt[c][k] != pt[d][k])) {
                nd2 = true;
                sum[0] = 0;
                sum[1] = 0;
                if (pt[c][k] == pt[a][k]) {
                    sum[2] = 0;
                } else {
                    sum[3] = 0;
                }
            }
            if (nd1 && nd2) {
                nonDetermination = false;
                consistent = false;
            }
        }
        k++;
    }
    q.consistent = consistent;
    q.K = k;
    return consistent;
}
