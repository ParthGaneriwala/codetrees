public String list() {
    if (idEmployee != null) {
        employee = employeeManager.get(idEmployee);
        getSession().setAttribute("employee", getEmployee());
    } else {
        employee = (Employee) getSession().getAttribute("employee");
    }
    if (employee != null) {
        paymentsSalaries = paymentsSalaryManager.findByEmployee(employee);
        salary = salaryManager.findByEmployeePay(employee);
        if (salary != null) {
            Date currentDate = new Date(System.currentTimeMillis());
            if (salary.getHalfPay()) {
                Date endDate = new Date(salary.getEndDate().getTime());
                aCLSize = asistanceControlManager.sizeByEmployeePeriod(employee, salary.getInitDate(), endDate);
                int lastACLSize = aCLSize;
                int difACLSize = aCLSize;
                while (difACLSize > 0) {
                    endDate.setTime(endDate.getTime() + (86400000 * difACLSize));
                    aCLSize = asistanceControlManager.sizeByEmployeePeriod(employee, salary.getInitDate(), endDate);
                    difACLSize = aCLSize - lastACLSize;
                    lastACLSize = aCLSize;
                }
                if (endDate.before(currentDate)) {
                    canAdd = true;
                }
            } else {
                Date middleDate = new Date(salary.getInitDate().getTime() + 1209600000);
                aCLSize = asistanceControlManager.sizeByEmployeePeriod(employee, salary.getInitDate(), middleDate);
                int difACLSize = aCLSize;
                int lastACLSize = aCLSize;
                while (difACLSize > 0) {
                    middleDate.setTime(middleDate.getTime() + (86400000 * difACLSize));
                    aCLSize = asistanceControlManager.sizeByEmployeePeriod(employee, salary.getInitDate(), middleDate);
                    difACLSize = aCLSize - lastACLSize;
                    lastACLSize = aCLSize;
                }
                if (middleDate.before(currentDate)) {
                    canAdd = true;
                }
            }
            Date endDate = new Date(salary.getEndDate().getTime());
            aCLSize = asistanceControlManager.sizeByEmployeePeriod(employee, salary.getInitDate(), endDate);
            int difACLSize = aCLSize;
            int lastACLSize = aCLSize;
            while (difACLSize > 0) {
                endDate.setTime(endDate.getTime() + (86400000 * difACLSize));
                aCLSize = asistanceControlManager.sizeByEmployeePeriod(employee, salary.getInitDate(), endDate);
                difACLSize = aCLSize - lastACLSize;
                lastACLSize = aCLSize;
            }
        }
        return SUCCESS;
    } else {
        System.out.println("employee is null: idEmployee = " + idEmployee);
        return ERROR;
    }
}
