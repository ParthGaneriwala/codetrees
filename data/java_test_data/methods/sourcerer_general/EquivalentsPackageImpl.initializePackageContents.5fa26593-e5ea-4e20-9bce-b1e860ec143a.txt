public void initializePackageContents() {
    if (isInitialized)
        return;
    isInitialized = true;
    // Initialize package
    setName(eNAME);
    setNsPrefix(eNS_PREFIX);
    setNsURI(eNS_URI);
    // Obtain other dependent packages
    DomainPackage theDomainPackage = (DomainPackage) EPackage.Registry.INSTANCE.getEPackage(DomainPackage.eNS_URI);
    CorePackage theCorePackage = (CorePackage) EPackage.Registry.INSTANCE.getEPackage(CorePackage.eNS_URI);
    // Create type parameters
    // Set bounds for type parameters
    // Add supertypes to classes
    equivalentBranchEClass.getESuperTypes().add(this.getEquivalentEquipment());
    equivalentEquipmentEClass.getESuperTypes().add(theCorePackage.getConductingEquipment());
    equivalentInjectionEClass.getESuperTypes().add(this.getEquivalentEquipment());
    equivalentNetworkEClass.getESuperTypes().add(theCorePackage.getConnectivityNodeContainer());
    equivalentShuntEClass.getESuperTypes().add(this.getEquivalentEquipment());
    // Initialize classes and features; add operations and parameters
    initEClass(equivalentBranchEClass, EquivalentBranch.class, "EquivalentBranch", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getEquivalentBranch_R(), theDomainPackage.getResistance(), null, "r", null, 0, 1, EquivalentBranch.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, !IS_ORDERED);
    initEReference(getEquivalentBranch_X(), theDomainPackage.getReactance(), null, "x", null, 0, 1, EquivalentBranch.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, !IS_ORDERED);
    initEClass(equivalentEquipmentEClass, EquivalentEquipment.class, "EquivalentEquipment", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEClass(equivalentInjectionEClass, EquivalentInjection.class, "EquivalentInjection", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getEquivalentInjection_MaxP(), theDomainPackage.getActivePower(), null, "maxP", null, 0, 1, EquivalentInjection.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, !IS_ORDERED);
    initEReference(getEquivalentInjection_MinP(), theDomainPackage.getActivePower(), null, "minP", null, 0, 1, EquivalentInjection.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, !IS_ORDERED);
    initEReference(getEquivalentInjection_RegulationCapability(), theDomainPackage.getBoolean(), null, "regulationCapability", null, 0, 1, EquivalentInjection.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, !IS_ORDERED);
    initEReference(getEquivalentInjection_RegulationStatus(), theDomainPackage.getBoolean(), null, "regulationStatus", null, 0, 1, EquivalentInjection.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, !IS_ORDERED);
    initEReference(getEquivalentInjection_RegulationTarget(), theDomainPackage.getVoltage(), null, "regulationTarget", null, 0, 1, EquivalentInjection.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, !IS_ORDERED);
    initEClass(equivalentNetworkEClass, EquivalentNetwork.class, "EquivalentNetwork", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEClass(equivalentShuntEClass, EquivalentShunt.class, "EquivalentShunt", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getEquivalentShunt_B(), theDomainPackage.getSusceptance(), null, "b", null, 0, 1, EquivalentShunt.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, !IS_ORDERED);
    initEReference(getEquivalentShunt_G(), theDomainPackage.getConductance(), null, "g", null, 0, 1, EquivalentShunt.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, !IS_ORDERED);
}
