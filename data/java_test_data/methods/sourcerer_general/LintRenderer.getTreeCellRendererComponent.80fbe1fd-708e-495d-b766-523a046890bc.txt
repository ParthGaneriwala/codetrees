@Override
public Component getTreeCellRendererComponent(JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean hasFocus) {
    final Component toReturn;
    DefaultMutableTreeNode valueNode = (DefaultMutableTreeNode) value;
    if (valueNode.isRoot()) {
        URL url = this.getClass().getClassLoader().getResource("lintroll.jpg");
        ImageIcon newIcon = new ImageIcon(url);
        if (valueNode.isLeaf()) {
            this.defaultTreeCellRenderer.setLeafIcon(newIcon);
            toReturn = this.defaultTreeCellRenderer.getTreeCellRendererComponent(tree, value, selected, expanded, leaf, row, hasFocus);
            this.defaultTreeCellRenderer.setLeafIcon(this.defaultTreeCellRenderer.getDefaultLeafIcon());
        } else {
            this.defaultTreeCellRenderer.setOpenIcon(newIcon);
            this.defaultTreeCellRenderer.setClosedIcon(newIcon);
            toReturn = this.defaultTreeCellRenderer.getTreeCellRendererComponent(tree, value, selected, expanded, leaf, row, hasFocus);
            this.defaultTreeCellRenderer.setOpenIcon(this.defaultTreeCellRenderer.getDefaultOpenIcon());
            this.defaultTreeCellRenderer.setClosedIcon(this.defaultTreeCellRenderer.getDefaultClosedIcon());
        }
    } else {
        Object nodeUserObject = valueNode.getUserObject();
        if (nodeUserObject instanceof OWLObject) {
            toReturn = this.owlCellRenderer.getTreeCellRendererComponent(tree, nodeUserObject, selected, expanded, leaf, row, hasFocus);
        } else if (nodeUserObject instanceof LintReport<?>) {
            toReturn = new JPanel(new BorderLayout());
            LintReport<?> report = (LintReport<?>) nodeUserObject;
            final JTextPane textPane = new JTextPane();
            ((JPanel) toReturn).add(textPane, BorderLayout.CENTER);
            report.accept(new LintReportVisitor() {

                public void visitGenericLintReport(LintReport<?> genericLintReport) {
                    Lint<?> lint = genericLintReport.getLint();
                    lint.accept(new LintVisitorAdapter() {

                        @Override
                        public void visitActingLint(ActingLint<?> actingLint) {
                            URL url = this.getClass().getClassLoader().getResource("hammer.jpg");
                            ImageIcon icon = new ImageIcon(url);
                            ((JPanel) toReturn).add(new JLabel(icon), BorderLayout.EAST);
                        }
                    });
                    int objectCount = 0;
                    for (OWLOntology ontology : genericLintReport.getAffectedOntologies()) {
                        objectCount += genericLintReport.getAffectedOWLObjects(ontology).size();
                    }
                    Formatter formatter = new Formatter();
                    formatter.format("%s {Ontologies: %d, OWL Objects: %d}", lint.getName(), genericLintReport.getAffectedOntologies().size(), objectCount);
                    textPane.setText(formatter.toString());
                }

                public void visitErrorLintReport(ErrorLintReport<?> errorLintReport) {
                    URL url = this.getClass().getClassLoader().getResource("error.png");
                    ImageIcon icon = new ImageIcon(url);
                    ((JPanel) toReturn).add(new JLabel(icon), BorderLayout.WEST);
                    Formatter formatter = new Formatter();
                    formatter.format("%s Encountered an error: %s", errorLintReport.getLint().getName(), errorLintReport.getThrowable().getMessage());
                    textPane.setText(formatter.toString());
                }

                public void visitWarningLintReport(WarningLintReport<?> warningLintReport) {
                    URL url = this.getClass().getClassLoader().getResource("warning.png");
                    ImageIcon icon = new ImageIcon(url);
                    ((JPanel) toReturn).add(new JLabel(icon), BorderLayout.WEST);
                    int objectCount = 0;
                    for (OWLOntology ontology : warningLintReport.getAffectedOntologies()) {
                        objectCount += warningLintReport.getAffectedOWLObjects(ontology).size();
                    }
                    Formatter formatter = new Formatter();
                    formatter.format("%s {Ontologies: %d, OWL Objects: %d} warnings: %s", warningLintReport.getLint().getName(), warningLintReport.getAffectedOntologies().size(), objectCount, warningLintReport.getWarnings());
                    textPane.setText(formatter.toString());
                }
            });
            textPane.setOpaque(false);
            this.render(tree, toReturn, selected);
        } else {
            toReturn = this.defaultTreeCellRenderer.getTreeCellRendererComponent(tree, value, selected, expanded, leaf, row, hasFocus);
        }
    }
    return toReturn;
}
