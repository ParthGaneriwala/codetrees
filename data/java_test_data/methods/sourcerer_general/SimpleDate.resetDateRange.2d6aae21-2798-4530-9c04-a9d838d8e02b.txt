public static void resetDateRange(Date bDate, Date eDate, int dateRange, Integer closingDay) {
    if (dateRange != Calendar.DATE && dateRange != Calendar.MONTH && dateRange != Calendar.WEEK_OF_YEAR && dateRange != Calendar.YEAR) {
        throw new IllegalArgumentException("dateRange only accepts: date, month, week_of_year, year");
    }
    if (closingDay == null) {
        closingDay = 31;
    }
    Calendar bgn = Calendar.getInstance();
    bgn.setTime(bDate);
    Calendar end = Calendar.getInstance();
    end.setTime(eDate);
    if (dateRange == Calendar.DATE) {
        end.add(Calendar.DATE, 1);
    } else if (dateRange == Calendar.MONTH) {
        if (closingDay == 31) {
            bgn.set(Calendar.DATE, bgn.getActualMinimum(Calendar.DATE));
            end.set(Calendar.DATE, end.getActualMaximum(Calendar.DATE));
        } else {
            if (bgn.get(Calendar.DATE) > closingDay) {
                bgn.set(Calendar.DATE, closingDay + 1);
            } else {
                bgn.add(Calendar.MONTH, -1);
                bgn.set(Calendar.DATE, closingDay + 1);
            }
            if (end.get(Calendar.DATE) < closingDay) {
                end.set(Calendar.DATE, closingDay + 1);
            } else {
                bgn.add(Calendar.MONTH, 1);
                end.set(Calendar.DATE, closingDay + 1);
            }
        }
    } else if (dateRange == Calendar.WEEK_OF_YEAR) {
        bgn.add(Calendar.DATE, -(bgn.get(Calendar.DAY_OF_WEEK) - bgn.getMinimalDaysInFirstWeek()));
        end.add(Calendar.DATE, 7);
        end.add(Calendar.DATE, -(bgn.get(Calendar.DAY_OF_WEEK) - bgn.getMinimalDaysInFirstWeek()));
    } else if (dateRange == Calendar.YEAR) {
        bgn.set(Calendar.MONTH, 0);
        bgn.set(Calendar.DATE, 1);
        end.set(Calendar.MONTH, 11);
        end.set(Calendar.DATE, 31);
        end.add(Calendar.DATE, 1);
    }
    bDate.setTime(bgn.getTimeInMillis());
    eDate.setTime(end.getTimeInMillis());
}
