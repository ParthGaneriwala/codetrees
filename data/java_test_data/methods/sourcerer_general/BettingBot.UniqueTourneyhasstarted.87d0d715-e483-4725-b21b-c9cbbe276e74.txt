public void UniqueTourneyhasstarted(int startedbot) {
    boolean paybackreminder = false;
    int totalnew = 0;
    Vector<Integer> individualTicket = new Vector<Integer>();
    if (unexpectedStart) {
        tellChannel("Received an unexpected game report. Assuming that featured " + BotList[startedbot] + " tourney has already started. Hurry to make your bets!");
    } else {
        tellChannel("The featured " + BotList[startedbot] + " tournament has started. You can only bet until all games are started or first result comes!");
    }
    sendLine("qimpart 282 1 2 1 " + BotList[startedbot]);
    inProgress[startedbot] = true;
    if (team[startedbot]) {
    /* repay tricast if less than 3 teams here */
    }
    for (int j = 0; j < activecount; j++) {
        paybackreminder = false;
        publicBetCounter[j] = 0;
        for (int i = 0; i < Maprunner[j].size(); i++) {
            boolean maderunner = Maprunner[j].elementAt(i);
            if (maderunner) {
            // nothin here
            } else {
                int madebot = Mapbot[j].elementAt(i);
                if (madebot == startedbot) {
                    int madefirst = Mapfirst[j].elementAt(i);
                    int madesecond = Mapsecond[j].elementAt(i);
                    float madebet = Mapbet[j].elementAt(i);
                    users[recoverID[j]].actualChips = users[recoverID[j]].actualChips + madebet;
                    paybackreminder = true;
                }
            }
        }
        if (Tricastticket[j] == null) {
        // nothing
        } else {
            if (Tricastticket[j].size() == 0) {
            // nothing
            } else {
                for (int i = 0; i < Tricastticket[j].size(); i++) {
                    individualTicket = (Tricastticket[j].elementAt(i));
                    int tribot = individualTicket.elementAt(0);
                    if (tribot == startedbot) {
                        int tristake = individualTicket.elementAt(1);
                        int tritotal = individualTicket.elementAt(2);
                        int trifirst = individualTicket.elementAt(3);
                        int trisecond = individualTicket.elementAt(4);
                        int trithird = individualTicket.elementAt(5);
                        int numberofbets = 0;
                        // tellProgrammers("Found nonempty tricastticket for "+activehandle[j]+", in "+BotList[tribot]+", we have tristake "+tristake+", tritotal "+tritotal+", trifirst "+trifirst+", trisecond "+trisecond+" trithird "+trithird);
                        for (int j1 = 6; j1 < trifirst + 6; j1++) {
                            if (Player[(individualTicket.elementAt(j1))][startedbot].equalsIgnoreCase("-noncontestant-")) {
                            // tellProgrammers("First Entry rejected for noncontestant, "+j1);
                            } else {
                                for (int j2 = trifirst + 6; j2 < trifirst + trisecond + 6; j2++) {
                                    if (Player[(individualTicket.elementAt(j2))][startedbot].equalsIgnoreCase("-noncontestant-") || ((individualTicket.elementAt(j2)) == (individualTicket.elementAt(j1)))) {
                                    } else {
                                        for (int j3 = trifirst + trisecond + 6; j3 < trifirst + trisecond + trithird + 6; j3++) {
                                            if (Player[(individualTicket.elementAt(j3))][startedbot].equalsIgnoreCase("-noncontestant-") || ((individualTicket.elementAt(j3)) == (individualTicket.elementAt(j1))) || ((individualTicket.elementAt(j2)) == (individualTicket.elementAt(j3)))) {
                                            } else {
                                                numberofbets = numberofbets + 1;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        // tellProgrammers("We have totalnew: "+(numberofbets*tristake)+" and old "+tritotal);
                        if ((numberofbets * tristake) < tritotal) {
                            paybackreminder = true;
                            users[recoverID[j]].actualChips = users[recoverID[j]].actualChips + tritotal - (numberofbets * tristake);
                            tripool[startedbot] = tripool[startedbot] - tritotal + (numberofbets * tristake);
                            totalnew = (numberofbets * tristake);
                            individualTicket.setElementAt(totalnew, 2);
                            Tricastticket[j].setElementAt(individualTicket, i);
                        }
                    }
                }
            }
        }
        if (paybackreminder) {
            tell(activehandle[j], "Paying back bet(s) related to non-runners in " + BotList[startedbot] + ", as this tourney just started. You have " + users[recoverID[j]].actualChips + " left to spend.");
        }
    }
    alerted[startedbot] = false;
    started[startedbot] = false;
    uniquetourneycheck = 999;
    quoteFlash(startedbot);
    if (unexpectedStart) {
        gamecounter[startedbot] = ((countplayers[startedbot] + abusercount[startedbot] + discardedPlayerCount[startedbot] - countleaver[startedbot]) / 2) - 1;
    } else {
        gamecounter[startedbot] = ((countplayers[startedbot] + abusercount[startedbot] + discardedPlayerCount[startedbot] - countleaver[startedbot]) / 2);
    }
}
