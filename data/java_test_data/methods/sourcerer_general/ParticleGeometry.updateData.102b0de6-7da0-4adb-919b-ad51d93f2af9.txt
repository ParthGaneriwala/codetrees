// documentation inherited
@Override
protected void updateData() {
    // get everything in local variables
    Particle[] particles = _particles;
    float[] data = _data;
    int stride = _stride;
    Vector3f s = _s, n = _n;
    Quaternion rotation = _rotation, vrot = _vrot;
    boolean normals = (_normalOffset >= 0);
    // figure out the texture coordinate parameters
    int udivs = _config.textureDivisionsS;
    float uscale = 1f / udivs;
    float vscale = 1f / _config.textureDivisionsT;
    Alignment alignment = _config.alignment;
    if (alignment == Alignment.BILLBOARD) {
        // get the inverse of the modelview rotation
        _transformState.getModelview().extractRotation(vrot).invertLocal();
    }
    // update the living particles
    int texCoordIdx = _texCoordOffset;
    int colorIdx = _colorOffset;
    int normalIdx = _normalOffset;
    int vertexIdx = _vertexOffset;
    for (int ii = 0, nn = _living.value; ii < nn; ii++) {
        Particle particle = particles[ii];
        // determine the texture coordinate offsets
        int frame = FloatMath.round(particle.getFrame());
        float uoff = (frame % udivs) * uscale, voff = (frame / udivs) * vscale;
        // extract the color
        Color4f color = particle.getColor();
        float cr = color.r, cg = color.g, cb = color.b, ca = color.a;
        // and the position
        Vector3f position = particle.getPosition();
        float px = position.x, py = position.y, pz = position.z;
        // compute the offset
        if (alignment == Alignment.VELOCITY) {
            Vector3f velocity = particle.getVelocity();
            float length = velocity.length();
            if (length < FloatMath.EPSILON) {
                s.set(Vector3f.ZERO);
            } else {
                velocity.mult(particle.getSize() / length, s);
            }
            if (normals) {
                particle.getOrientation().transformUnitZ(n);
            }
        } else {
            Quaternion rot = (alignment == Alignment.BILLBOARD) ? vrot.mult(particle.getOrientation(), rotation) : particle.getOrientation();
            rot.transformUnitX(s).multLocal(particle.getSize());
            if (normals) {
                rot.transformUnitZ(n);
            }
        }
        float sx = s.x, sy = s.y, sz = s.z;
        if (normals) {
            float nx = n.x, ny = n.y, nz = n.z;
            // write the first vertex
            texCoordIdx = write(data, texCoordIdx, stride, uoff, voff);
            colorIdx = write(data, colorIdx, stride, cr, cg, cb, ca);
            normalIdx = write(data, normalIdx, stride, nx, ny, nz);
            vertexIdx = write(data, vertexIdx, stride, px - sx, py - sy, pz - sz);
            // then the second
            texCoordIdx = write(data, texCoordIdx, stride, uoff + uscale, voff);
            colorIdx = write(data, colorIdx, stride, cr, cg, cb, ca);
            normalIdx = write(data, normalIdx, stride, nx, ny, nz);
            vertexIdx = write(data, vertexIdx, stride, px + sx, py + sy, pz + sz);
        } else {
            // write the first vertex
            texCoordIdx = write(data, texCoordIdx, stride, uoff, voff);
            colorIdx = write(data, colorIdx, stride, cr, cg, cb, ca);
            vertexIdx = write(data, vertexIdx, stride, px - sx, py - sy, pz - sz);
            // then the second
            texCoordIdx = write(data, texCoordIdx, stride, uoff + uscale, voff);
            colorIdx = write(data, colorIdx, stride, cr, cg, cb, ca);
            vertexIdx = write(data, vertexIdx, stride, px + sx, py + sy, pz + sz);
        }
    }
}
