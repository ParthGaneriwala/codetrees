private String projectListViewer(RenderRequest request, Connection db) throws SQLException {
    // Retrieve the preferences
    String maxNumberOfProjectsToShow = request.getPreferences().getValue(PREF_LIMIT, "-1");
    String title = request.getPreferences().getValue(PREF_TITLE, null);
    boolean userProfiles = Boolean.valueOf(request.getPreferences().getValue(PREF_USER_PROFILES, "false"));
    boolean isTheUser = Boolean.valueOf(request.getPreferences().getValue(PREF_IS_THE_USER, "false"));
    // Show all of the user's joined profiles...
    Project project = PortalUtils.findProject(request);
    int userId = project.getOwner();
    // Determine if this portlet can be shown to this user
    if ((isTheUser && (userId != PortalUtils.getUser(request).getId())) || (!isTheUser && (userId == PortalUtils.getUser(request).getId()))) {
        return null;
    }
    // Use paged data for sorting
    PagedListInfo pagedListInfo = new PagedListInfo();
    pagedListInfo.setItemsPerPage(maxNumberOfProjectsToShow);
    request.setAttribute(PAGED_LIST_INFO, pagedListInfo);
    // Fetch JUST the user's team member entry
    TeamMemberList teamMemberList = new TeamMemberList();
    teamMemberList.setUserId(userId);
    teamMemberList.setStatus(TeamMember.STATUS_ADDED);
    teamMemberList.setOpenProjectsOnly(Constants.TRUE);
    teamMemberList.setPagedListInfo(pagedListInfo);
    // Decide if showing non-user profiles or user profiles
    if (userProfiles) {
        teamMemberList.setUserProfiles(Constants.TRUE);
        pagedListInfo.setDefaultSort("p.title", null);
    } else {
        teamMemberList.setUserProfiles(Constants.FALSE);
        pagedListInfo.setDefaultSort("t.email_updates_schedule, p.title", null);
    }
    // For when other users look at this profile...
    if (userId != PortalUtils.getUser(request).getId()) {
        if (!PortalUtils.getUser(request).isLoggedIn()) {
            teamMemberList.setPublicProjectsOnly(Constants.TRUE);
        } else {
            // Show the allowable profiles...
            teamMemberList.setForTeamMateUserId(PortalUtils.getUser(request).getId());
        }
        teamMemberList.setIgnoreOwnerUserId(userId);
        // Sort by title
        pagedListInfo.setDefaultSort("p.title", null);
    }
    teamMemberList.buildList(db);
    // Return the correct view
    if (teamMemberList.size() > 0) {
        // Set request values
        request.setAttribute(TEAM_MEMBER_LIST, teamMemberList);
        request.setAttribute(TITLE, title);
        // Set modification permissions
        if (userId == PortalUtils.getUser(request).getId()) {
            request.setAttribute(MODIFY_NOTIFICATION, "true");
        } else {
            request.setAttribute(MODIFY_NOTIFICATION, "false");
        }
        return VIEW_PAGE;
    } else {
        return null;
    }
}
