public void decrypt(String inputFile, String outputFile, IKey key) throws FileNotFoundException, IOException {
    SplineKey spKey = (SplineKey) key;
    List<Integer> encrText = TextWork.readText(inputFile);
    List<List<Integer>> blocks = TextWork.getBlocks(encrText, BLOCK_SIZE);
    List<Integer> decryptedText = new ArrayList<Integer>();
    int K = spKey.getRounds();
    for (int j = 0; j < blocks.size(); j++) {
        SplineKey k = spKey.clone();
        List<Integer> block = blocks.get(j);
        List<Integer> wavelet = new ArrayList<Integer>();
        List<Integer> numbers = new ArrayList<Integer>();
        List<Integer> striking = new ArrayList<Integer>();
        int B = block.size();
        for (int i = 0; i < K; i++) {
            wavelet.add(block.remove(B - K));
            numbers.add(k.nextNumber());
            striking.add(k.removeElem(numbers.get(numbers.size() - 1)));
        }
        for (int i = 0; i < K; i++) {
            int num = numbers.get(K - i - 1);
            int e = striking.get(K - i - 1);
            int xNext = k.getElem(num + 1);
            int xCur = k.getElem(num);
            int cPrev = block.get(MathUtil.modul((num - 1), block.size()));
            int cCur = block.get(num % block.size());
            int b = wavelet.get(K - i - 1);
            try {
                int div = MathUtil.getInverse((xNext - e), N);
                // System.out.println((xNext-xCur)*div*(cPrev) + " + " + (xCur-e)*div*(cCur) + " + " + b);
                int C = (((xNext - xCur) * div * (cPrev) + (xCur - e) * div * (cCur) + b) % 256);
                int c = MathUtil.modul(C, 256);
                block.add(num % (block.size() + 1), c);
            } catch (IllegalArgumentException ex) {
                System.out.println("Error");
            }
            if (i != K - 1) {
                block = MathUtil.shiftLeft(block);
            }
            k.addElem(num, e);
        }
        decryptedText.addAll(block);
    }
    TextWork.writeText(outputFile, decryptedText);
}
