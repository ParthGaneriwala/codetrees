public boolean[] parseLine(String cur_code, int line_num) {
    boolean[] binary_code = new boolean[32];
    Pattern pword1 = Pattern.compile("\\s");
    Pattern pword2 = Pattern.compile(",");
    Pattern pword3 = Pattern.compile(":");
    String[] ope = pword1.split(cur_code);
    String[] oper = pword2.split(ope[1]);
    if (ope[0].contains(":")) {
        String[] temp = pword3.split(ope[0]);
        ope[0] = temp[1];
        Label newlabel = new Label(temp[0], line_num);
        labels.add(newlabel);
    }
    // ADDI
    if (ope[0].toUpperCase().equals("ADDI")) {
        if (!(oper.length == addiOpeNum)) {
            errors.add(line_num + ":\t" + opeNumError);
        } else {
            for (int i = 0; i < 6; i++) {
                if (i == 2)
                    binary_code[i] = true;
                else
                    binary_code[i] = false;
            }
            for (int i = 0; i < oper.length - 1; i++) {
                String resultr = validateRegister(oper[i]);
                if (!resultr.equals(successReturn))
                    errors.add(line_num + ":\t" + resultr);
                else {
                    if (i == 0) {
                        for (int j = 11; j < 16; j++) {
                            binary_code[j] = change_reg(oper[i])[j - 11];
                        }
                    }
                    if (i == 1) {
                        for (int j = 6; j < 11; j++) {
                            binary_code[j] = change_reg(oper[i])[j - 6];
                        }
                    }
                }
            }
            String resulti = validateImm(oper[2]);
            if (!resulti.equals(successReturn))
                errors.add(line_num + ":\t" + resulti);
            else {
                for (int j = 16; j <= 31; j++) {
                    binary_code[j] = change_imm16(oper[2])[j - 16];
                }
            }
        }
    } else // ADDUI
    if (ope[0].toUpperCase().equals("ADDI")) {
    } else if (true) {
    } else if (true) {
    } else if (true) {
    }
    for (int i = 0; i < 32; i++) {
        if (binary_code[i] == true)
            System.out.print("1");
        else
            System.out.print("0");
    // System.out.print(binary_code[i]+" ");
    }
    return binary_code;
}
