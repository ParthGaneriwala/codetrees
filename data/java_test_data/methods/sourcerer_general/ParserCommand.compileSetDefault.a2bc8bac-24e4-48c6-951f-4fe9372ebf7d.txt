private StatementCommand compileSetDefault() {
    read();
    switch(token.tokenType) {
        case Tokens.INITIAL:
            {
                read();
                readThis(Tokens.SCHEMA);
                HsqlName schema = database.schemaManager.getSchemaHsqlName(token.tokenString);
                read();
                Object[] args = new Object[] { schema };
                return new StatementCommand(StatementTypes.SET_DATABASE_DEFAULT_INITIAL_SCHEMA, args);
            }
        case Tokens.RESULT:
            {
                read();
                readThis(Tokens.MEMORY);
                readThis(Tokens.ROWS);
                Integer size = readIntegerObject();
                Object[] args = new Object[] { size };
                return new StatementCommand(StatementTypes.SET_DATABASE_RESULT_MEMORY_ROWS, args);
            }
        case Tokens.TABLE:
            {
                read();
                readThis(Tokens.TYPE);
                int type = TableBase.MEMORY_TABLE;
                switch(token.tokenType) {
                    case Tokens.MEMORY:
                        break;
                    case Tokens.CACHED:
                        type = TableBase.CACHED_TABLE;
                        break;
                    default:
                        throw unexpectedToken();
                }
                read();
                Object[] args = new Object[] { ValuePool.getInt(type) };
                return new StatementCommand(StatementTypes.SET_DATABASE_DEFAULT_TABLE_TYPE, args);
            }
        case Tokens.ISOLATION:
            {
                read();
                readThis(Tokens.LEVEL);
                int level;
                switch(token.tokenType) {
                    case Tokens.READ:
                        read();
                        readThis(Tokens.COMMITTED);
                        level = SessionInterface.TX_READ_COMMITTED;
                        break;
                    case Tokens.SERIALIZABLE:
                        read();
                        level = SessionInterface.TX_SERIALIZABLE;
                        break;
                    default:
                        throw unexpectedToken();
                }
                read();
                Object[] args = new Object[] { ValuePool.getInt(level) };
                return new StatementCommand(StatementTypes.SET_DATABASE_DEFAULT_ISOLATION_LEVEL, args);
            }
        default:
            throw unexpectedToken();
    }
}
