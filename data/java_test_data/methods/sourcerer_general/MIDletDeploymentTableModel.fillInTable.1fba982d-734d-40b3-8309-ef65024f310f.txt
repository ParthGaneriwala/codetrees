private void fillInTable(List current, SortedProperties props) {
    // Fully qualified name of the MIDlet class.
    String cl;
    // Name of the icon file.
    String icon;
    // Name of the midlet to be displayed in the emulator.
    String name;
    // Whether to exclude the midlet from the deployed suite.
    String excl;
    // ImageIcon object created from the icon file.
    ImageIcon image;
    // List to fill in.
    midlets = new ArrayList();
    exclude = new boolean[current.size()];
    for (int i = 0; i < exclude.length; i++) exclude[i] = false;
    int j = 0;
    for (int i = 1; (cl = props.getProperty("midlet" + i + ".class")) != null; i++) {
        if (current.contains(cl)) {
            // remove cuz after loop we want only new midlets in current
            current.remove(cl);
            name = props.getProperty("midlet" + i + ".name");
            icon = props.getProperty("midlet" + i + ".icon");
            excl = props.getProperty("midlet" + i + ".exclude");
            exclude[j] = excl.equals("true");
            j++;
            image = defaultIcon;
            try {
                image = new ImageIcon(new URL(icon));
            } catch (MalformedURLException mue) {
                Debug.reportError("Could not create ImageIcon from midlet.defs info for midlet " + name + ". The icon String passed to URL constructor was " + icon);
            }
            midlets.add(new MIDletTableEntry(name, image, cl));
        }
    }
    // default values to their names and icons.
    for (int i = 0; i < current.size(); i++) {
        // qualified class name
        cl = (String) current.get(i);
        name = cl;
        // Strip off class name after the last dot if there are package names
        int pos = cl.lastIndexOf(".");
        if (pos > 0)
            name = cl.substring(pos + 1);
        midlets.add(new MIDletTableEntry(name, defaultIcon, cl));
    }
}
