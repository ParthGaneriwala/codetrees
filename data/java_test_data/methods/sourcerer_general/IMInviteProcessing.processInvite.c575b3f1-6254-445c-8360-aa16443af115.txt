public void processInvite(Request request, ServerTransaction serverTransaction) {
    try {
        SipProvider sipProvider = imUA.getSipProvider();
        MessageFactory messageFactory = imUA.getMessageFactory();
        HeaderFactory headerFactory = imUA.getHeaderFactory();
        AddressFactory addressFactory = imUA.getAddressFactory();
        InstantMessagingGUI instantMessagingGUI = imUA.getInstantMessagingGUI();
        ListenerInstantMessaging listenerInstantMessaging = instantMessagingGUI.getListenerInstantMessaging();
        ChatSessionManager chatSessionManager = listenerInstantMessaging.getChatSessionManager();
        ChatSession chatSession = null;
        String fromURL = IMUtilities.getKey(request, "From");
        if (chatSessionManager.hasAlreadyChatSession(fromURL))
            chatSession = chatSessionManager.getChatSession(fromURL);
        DebugIM.println("IMInviteProcessing, processInvite(), ChatSession:" + chatSession);
        DebugIM.println("Processing Invite in progress...");
        // *******************************8
        // ���洦��
        // *********************************
        ChatFrame chatframe = chatSession.getChatFrame();
        chatframe.setChatState(fromURL + "is calling you..");
        // �����������û���������ȷ��
        int chatoption = JOptionPane.showConfirmDialog(chatframe, fromURL + "is calling you..");
        Response response = null;
        // Send an OK
        // RTP����Ķ˿�
        String port = "55500";
        if (chatoption == JOptionPane.OK_OPTION) {
            System.out.println("reponse OK to Invite");
            response = messageFactory.createResponse(Response.OK, request);
            chatframe.setChatState("Calling with " + fromURL + "..");
            chatframe.setVoiceButtiondisable();
            chatframe.setendvoiceButtionenable();
            // ��ʼ��������
            // receive
            String[] sessions = new String[1];
            ContactHeader contacthader = (ContactHeader) request.getHeader(ContactHeader.NAME);
            String toIp = contacthader.getAddress().getURI().toString();
            // ����toip
            toIp = toIp.substring(4);
            int i = 0;
            for (i = 0; i < toIp.length(); i++) if (toIp.charAt(i) == ':')
                break;
            toIp = toIp.substring(0, i);
            System.out.println(toIp);
            Object content = request.getContent();
            String recport = null;
            if (content instanceof String)
                recport = (String) content;
            else if (content instanceof byte[]) {
                recport = new String((byte[]) content);
            } else {
            }
            System.out.println(recport);
            sessions[0] = toIp + "/" + recport + "/0";
            try {
                avReceive = new AVReceive3(sessions);
                avReceive.start();
                /*
					if (!avReceive.initialize()) {
				        System.err.println("Failed to initialize the sessions.");
				        System.exit(-1);
				    }
					
//					 Check to see if AVReceive3 is done.
				    try {
				        while (!avReceive.isDone())
				        Thread.sleep(1000);
				    } catch (Exception e) {}

				    System.err.println("Exiting AVReceive3");
				    */
                // send
                Format fmt = null;
                String address = toIp;
                String sendport = "55500";
                System.out.println("start transfer voice data");
                at2 = new AVTransmit3(address, sendport, fmt);
                String result = null;
                result = at2.start();
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        } else
            response = messageFactory.createResponse(Response.FORBIDDEN, request);
        // Contact header:
        SipURI sipURI = addressFactory.createSipURI(null, imUA.getIMAddress());
        sipURI.setPort(imUA.getIMPort());
        sipURI.setTransportParam(imUA.getIMProtocol());
        Address contactAddress = addressFactory.createAddress(sipURI);
        ContactHeader contactHeader = headerFactory.createContactHeader(contactAddress);
        response.setHeader(contactHeader);
        ToHeader toHeader = (ToHeader) response.getHeader(ToHeader.NAME);
        if (toHeader.getTag() == null) {
            // It is the first message without a TO tag
            toHeader.setTag(new Integer((int) (Math.random() * 10000)).toString());
        }
        ContentTypeHeader contentTypeHeader = headerFactory.createContentTypeHeader("text", "plain");
        contentTypeHeader.setParameter("charset", "gb2312");
        response.setContent(port, contentTypeHeader);
        if (chatSession.isEstablishedSession()) {
            DebugIM.println("The Session already exists");
            serverTransaction.sendResponse(response);
            DebugIM.println("OK replied to the MESSAGE:\n" + response.toString());
        } else {
            DebugIM.println("The Session does not exists yet. ");
            serverTransaction.sendResponse(response);
            DebugIM.println("OK replied to the MESSAGE:\n" + response.toString());
            Dialog dialog = serverTransaction.getDialog();
            if (dialog == null) {
                DebugIM.println("ERROR, IMProcessing, processMessage(), the dialog is null");
                return;
            }
            // We need to store the dialog:
            chatSession.setDialog(dialog);
            chatSession.setEstablishedSession(true);
            DebugIM.println("The DIALOG object has been stored in the ChatSession");
        }
    /*
			Object content = request.getContent();
			String text = null;
			if (content instanceof String)
				text = (String) content;
			else if (content instanceof byte[]) {
				text = new String((byte[]) content);
			} else {
			}
			if (text != null) {
				chatSession.displayRemoteText(text);
			}*/
    } catch (Exception ex) {
        ex.printStackTrace();
    }
}
