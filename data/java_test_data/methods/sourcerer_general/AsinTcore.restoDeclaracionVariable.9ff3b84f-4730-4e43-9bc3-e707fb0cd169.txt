// devuelve primer libre offset
private Hashtable restoDeclaracionVariable(int offset, int cantidad) throws AleXcore.ExcepcionCaracterInvalido, AleXcore.ExcepcionComentarioSinCerrar, AleXcore.ExcepcionIdentificadorInvalido, AleXcore.ExcepcionComentarioCerrado, ExcepcionErrorSintactico, ExcepcionErrorSemantico {
    Hashtable atribSintetizados;
    Hashtable atribSintetizados2 = new Hashtable();
    Tipo T;
    int primerLibreOffset, siguienteoffset, cantMemoria;
    if (ultimoToken.isToken(Token.DOSPUNTOS)) {
        ultimoToken = alex.getToken();
        T = tipo();
        cantMemoria = T.getCantElem() * cantidad;
        primerLibreOffset = offset + cantMemoria;
        siguienteoffset = offset + cantMemoria - T.getCantElem();
        atribSintetizados2.put("CANTMEMORIA", cantMemoria);
        atribSintetizados2.put("TIPO", T);
        atribSintetizados2.put("PRIMERLIBREOFFSET", primerLibreOffset);
        atribSintetizados2.put("SIGUIENTEOFFSET", siguienteoffset);
    } else // IF ASIGNACION
    if (ultimoToken.isToken(Token.COMA)) {
        ultimoToken = alex.getToken();
        String identificador = ultimoToken.getLexema();
        ultimoToken = alex.getToken();
        atribSintetizados = restoDeclaracionVariable(offset, cantidad + 1);
        if (TdS.perteneceNivelActual(identificador)) {
            throw new ExcepcionErrorSemantico("En linea: " + ultimoToken.getLinea() + ". El identificador " + identificador + " se encuentra en uso");
        } else {
            TdS.getTope().registrarVariable(identificador, TdS.getNivelLexico(), (Integer) atribSintetizados.get("SIGUIENTEOFFSET"), (Tipo) atribSintetizados.get("TIPO"));
            primerLibreOffset = (Integer) atribSintetizados.get("PRIMERLIBREOFFSET");
            cantMemoria = (Integer) atribSintetizados.get("CANTMEMORIA");
            siguienteoffset = (Integer) atribSintetizados.get("SIGUIENTEOFFSET") - ((Tipo) atribSintetizados.get("TIPO")).getCantElem();
            T = (Tipo) atribSintetizados.get("TIPO");
            atribSintetizados2.put("CANTMEMORIA", cantMemoria);
            atribSintetizados2.put("TIPO", T);
            atribSintetizados2.put("PRIMERLIBREOFFSET", primerLibreOffset);
            atribSintetizados2.put("SIGUIENTEOFFSET", siguienteoffset);
            MepaH.generarInstruccion("RMEM " + T.getCantElem());
        }
    } else {
        throw new ExcepcionErrorSintactico("Se esperaba ':', en linea: " + ultimoToken.getLinea() + ", se obtuvo " + ultimoToken.getLexema());
    }
    return atribSintetizados2;
}
