private void describe(String tableName, String inFilter) throws SQLException {
    /*
         * Doing case-sensitive filters now, for greater portability.
        String filter = ((inFilter == null) ? null : inFilter.toUpperCase());
         */
    String filter = inFilter;
    List rows = new ArrayList();
    String[] headerArray = { rb.getString(SqltoolRB.DESCRIBE_TABLE_NAME), rb.getString(SqltoolRB.DESCRIBE_TABLE_DATATYPE), rb.getString(SqltoolRB.DESCRIBE_TABLE_WIDTH), rb.getString(SqltoolRB.DESCRIBE_TABLE_NONULLS) };
    String[] fieldArray;
    int[] maxWidth = { 0, 0, 0, 0 };
    boolean[] rightJust = { false, false, true, false };
    // STEP 1: GATHER DATA
    for (int i = 0; i < headerArray.length; i++) {
        if (htmlMode) {
            continue;
        }
        if (headerArray[i].length() > maxWidth[i]) {
            maxWidth[i] = headerArray[i].length();
        }
    }
    Statement statement = curConn.createStatement();
    ResultSet r = null;
    try {
        statement.execute("SELECT * FROM " + tableName + " WHERE 1 = 2");
        r = statement.getResultSet();
        ResultSetMetaData m = r.getMetaData();
        int cols = m.getColumnCount();
        for (int i = 0; i < cols; i++) {
            fieldArray = new String[4];
            fieldArray[0] = m.getColumnName(i + 1);
            if (filter != null && fieldArray[0].indexOf(filter) < 0) {
                continue;
            }
            fieldArray[1] = m.getColumnTypeName(i + 1);
            fieldArray[2] = Integer.toString(m.getColumnDisplaySize(i + 1));
            fieldArray[3] = ((m.isNullable(i + 1) == java.sql.ResultSetMetaData.columnNullable) ? (htmlMode ? "&nbsp;" : "") : "*");
            rows.add(fieldArray);
            for (int j = 0; j < fieldArray.length; j++) {
                if (fieldArray[j].length() > maxWidth[j]) {
                    maxWidth[j] = fieldArray[j].length();
                }
            }
        }
        // STEP 2: DISPLAY DATA
        condlPrint("<TABLE border='1'>" + LS + SqlFile.htmlRow(COL_HEAD) + LS + PRE_TD, true);
        for (int i = 0; i < headerArray.length; i++) {
            condlPrint("<TD>" + headerArray[i] + "</TD>", true);
            condlPrint(((i > 0) ? SqlFile.spaces(2) : "") + SqlFile.pad(headerArray[i], maxWidth[i], rightJust[i], (i < headerArray.length - 1 || rightJust[i])), false);
        }
        condlPrintln(LS + PRE_TR + "</TR>", true);
        condlPrintln("", false);
        if (!htmlMode) {
            for (int i = 0; i < headerArray.length; i++) {
                condlPrint(((i > 0) ? SqlFile.spaces(2) : "") + SqlFile.divider(maxWidth[i]), false);
            }
            condlPrintln("", false);
        }
        for (int i = 0; i < rows.size(); i++) {
            condlPrint(SqlFile.htmlRow(((i % 2) == 0) ? COL_EVEN : COL_ODD) + LS + PRE_TD, true);
            fieldArray = (String[]) rows.get(i);
            for (int j = 0; j < fieldArray.length; j++) {
                condlPrint("<TD>" + fieldArray[j] + "</TD>", true);
                condlPrint(((j > 0) ? SqlFile.spaces(2) : "") + SqlFile.pad(fieldArray[j], maxWidth[j], rightJust[j], (j < fieldArray.length - 1 || rightJust[j])), false);
            }
            condlPrintln(LS + PRE_TR + "</TR>", true);
            condlPrintln("", false);
        }
        condlPrintln(LS + "</TABLE>" + LS + "<HR>", true);
    } finally {
        try {
            if (r != null) {
                r.close();
                r = null;
            }
            statement.close();
        } catch (Exception e) {
        }
    }
}
