static void loginServer() throws SocketException {
    DatagramSocket ds = null;
    Config.printlnCS("��¼...");
    try {
        ds = new DatagramSocket();
        ds.setSoTimeout(3000);
    } catch (SocketException e) {
        e.printStackTrace();
    }
    RegMessage rm = new RegMessage();
    rm.setDstAddress(Config.cIp);
    rm.setDstPort(Config.cPort);
    int tryTimes = 0;
    while (!isLive) {
        tryTimes++;
        Config.printlnCS("���Ե�" + tryTimes + "�ε�¼");
        try {
            ds.send(rm.getDatagramPacket());
        } catch (IOException e) {
            e.printStackTrace();
        }
        byte[] data = new byte[1024];
        DatagramPacket dp = new DatagramPacket(data, data.length);
        try {
            ds.receive(dp);
        } catch (IOException e) {
            Config.printlnCS("��¼��ʱ");
            continue;
        }
        if (peer.tools.MessageCheck.checkVer(dp) == Config.ver) {
            if (peer.tools.MessageCheck.checkSType(dp) == peer.tools.MessageType.sType_RegMessage2) {
                RegMessage2 rm2 = new RegMessage2(dp);
                int sessionId = rm2.getSessionId();
                Config.sessionId = sessionId;
                ds.close();
                peer.Config.isLive = true;
                try {
                    // ��¼�ɹ��������ͻ��˲�ͬ������ʱ��
                    Config.serverClient = new ServerClient();
                    Config.printlnCS("��¼�ɹ�" + " ServerSession:" + Config.sessionId);
                    vTime.synNow();
                    break;
                } catch (SocketException e) {
                    e.printStackTrace();
                    throw e;
                }
            }
        }
    }
}
