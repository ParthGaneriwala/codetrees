public String executeCommandSaveCategoryList(ActionContext context) {
    Connection db = null;
    // Parameters
    String projectId = context.getRequest().getParameter("pid");
    String previousId = context.getRequest().getParameter("previousId");
    try {
        db = getConnection(context);
        // Load the project
        Project thisProject = retrieveAuthorizedProject(Integer.parseInt(projectId), context);
        if (!hasProjectAccess(context, thisProject.getId(), "project-news-add")) {
            return "PermissionError";
        }
        // Parse the request for items
        String[] params = context.getRequest().getParameterValues("selectedList");
        String[] names = new String[params.length];
        int j = 0;
        StringTokenizer st = new StringTokenizer(context.getRequest().getParameter("selectNames"), "^");
        while (st.hasMoreTokens()) {
            names[j] = st.nextToken();
            if (System.getProperty("DEBUG") != null) {
                System.out.println("ProjectManagementNews-> Item: " + names[j]);
            }
            j++;
        }
        // Load the previous category list
        BlogPostCategoryList categoryList = new BlogPostCategoryList();
        categoryList.setProjectId(thisProject.getId());
        categoryList.buildList(db);
        categoryList.updateValues(db, params, names);
        // Reload the updated list for display
        categoryList.clear();
        categoryList.setEnabled(Constants.TRUE);
        categoryList.setIncludeId(previousId);
        categoryList.buildList(db);
        HtmlSelect thisSelect = categoryList.getHtmlSelect();
        thisSelect.addItem(-1, "-- None --", 0);
        context.getRequest().setAttribute("editList", thisSelect);
        return ("EditListPopupCloseOK");
    } catch (Exception errorMessage) {
        context.getRequest().setAttribute("Error", errorMessage);
        return ("SystemError");
    } finally {
        this.freeConnection(context, db);
    }
}
