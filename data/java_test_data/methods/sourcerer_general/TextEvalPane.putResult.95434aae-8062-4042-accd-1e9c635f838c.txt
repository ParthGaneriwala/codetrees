// --- ResultWatcher interface ---
public void putResult(final DebuggerObject result, final String name, final InvokerRecord ir) {
    currentCommand = "";
    frame.getObjectBench().addInteraction(ir);
    // Newly declared variables are now initialized
    if (newlyDeclareds != null) {
        Iterator<CodepadVar> i = newlyDeclareds.iterator();
        while (i.hasNext()) {
            CodepadVar cpv = (CodepadVar) i.next();
            cpv.setInitialized();
        }
        newlyDeclareds = null;
    }
    append(" ");
    boolean giveUninitializedWarning = autoInitializedVars != null && autoInitializedVars.size() != 0;
    if (giveUninitializedWarning && Utility.firstTimeThisRun("TextEvalPane.uninitializedWarning")) {
        // Some variables were automatically initialized - warn the user that
        // this won't happen in "real" code.
        String warning = uninitializedWarning;
        int findex = 0;
        while (findex < warning.length()) {
            int nindex = warning.indexOf('\n', findex);
            if (nindex == -1)
                nindex = warning.length();
            String warnLine = warning.substring(findex, nindex);
            append(warnLine);
            markAs(TextEvalSyntaxView.ERROR, Boolean.TRUE);
            // skip the newline character
            findex = nindex + 1;
        }
        autoInitializedVars.clear();
    }
    if (result != null) {
        // Debug.message("type:"+result.getFieldValueTypeString(0));
        String resultString = result.getFieldValueString(0);
        if (resultString.equals(nullLabel)) {
            output(resultString);
        } else {
            String resultType;
            boolean isObject = result.instanceFieldIsObject(0);
            if (isObject) {
                resultType = result.getFieldObject(0).getStrippedGenClassName();
                objectOutput(resultString + "   (" + resultType + ")", new ObjectInfo(result.getFieldObject(0), ir));
            } else {
                resultType = JavaNames.stripPrefix(result.getFieldValueTypeString(0));
                output(resultString + "   (" + resultType + ")");
            }
        }
        BlueJEvent.raiseEvent(BlueJEvent.METHOD_CALL, resultString);
    } else {
        BlueJEvent.raiseEvent(BlueJEvent.METHOD_CALL, null);
    }
    textParser.confirmCommand();
    // allow next input
    setEditable(true);
    busy = false;
}
