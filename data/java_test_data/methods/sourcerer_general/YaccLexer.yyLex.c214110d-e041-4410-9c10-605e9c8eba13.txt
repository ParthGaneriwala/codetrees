protected int yyLex() throws IOException {
    char[] cc_ecs = cc_lexer.ecs;
    char[][] cc_next = cc_lexer.next;
    char[] cc_accept = cc_lexer.accept;
    byte[] buffer = _yyBuffer;
    while (true) {
        // initiate variables necessary for lookup
        _yyBOL = _yyIsNextBOL;
        _yyIsNextBOL = false;
        int cc_matchedState = _yyBaseState + (_yyBOL ? 1 : 0);
        int matchedLength = 0;
        int internalBufferEnd = _yyBufferEnd;
        int lookahead = _yyMatchStart;
        int cc_backupMatchedState = cc_matchedState;
        int cc_backupMatchedLength = 0;
        // the DFA lookup
        while (true) {
            // check buffer status
            if (lookahead < internalBufferEnd) {
                // now okay to process the character
                int cc_toState;
                cc_toState = cc_next[cc_matchedState][cc_ecs[buffer[lookahead] & 0xff]];
                if (cc_toState == 0) {
                    cc_matchedState = cc_backupMatchedState;
                    matchedLength = cc_backupMatchedLength;
                    break;
                }
                cc_matchedState = cc_toState;
                ++lookahead;
                ++matchedLength;
                if (cc_accept[cc_matchedState] > 0) {
                    cc_backupMatchedState = cc_toState;
                    cc_backupMatchedLength = matchedLength;
                }
            } else {
                int lookPos = lookahead - _yyMatchStart;
                boolean refresh = yyRefreshBuffer();
                buffer = _yyBuffer;
                internalBufferEnd = _yyBufferEnd;
                lookahead = _yyMatchStart + lookPos;
                if (!refresh) {
                    // <<EOF>>
                    int cc_toState;
                    cc_toState = cc_next[cc_matchedState][cc_ecs[256]];
                    if (cc_toState != 0)
                        cc_matchedState = cc_toState;
                    else {
                        cc_matchedState = cc_backupMatchedState;
                        matchedLength = cc_backupMatchedLength;
                    }
                    break;
                }
            }
        }
        _yyTextStart = _yyMatchStart;
        _yyMatchStart += matchedLength;
        _yyLength = matchedLength;
        switch(cc_accept[cc_matchedState]) {
            case // {WS}
            1:
                {
                    m_this.ignoreWhiteSpace();
                }
            case 41:
                break;
            case // '//'.*
            2:
                {
                    m_this.lineComment();
                }
            case 42:
                break;
            case // {NL}
            3:
                {
                    m_this.newLine();
                }
            case 43:
                break;
            case // '/*'
            4:
                {
                    m_this.blockCommentStart();
                }
            case 44:
                break;
            case // '*/'
            30:
                {
                    m_this.blockCommentEnd();
                }
            case 70:
                break;
            case // [^*/\n]+
            31:
                {
                    m_this.blockCommentContent();
                }
            case 71:
                break;
            case // .
            32:
                {
                    m_this.blockCommentContent();
                }
            case 72:
                break;
            case // <<EOF>>
            33:
                {
                    m_this.blockCommentEof();
                }
            case 73:
                break;
            case // '%{'
            5:
                {
                    m_this.codeIncludeStart();
                }
            case 45:
                break;
            case // '%}'
            34:
                {
                    m_this.codeIncludeEnd();
                }
            case 74:
                break;
            case // [^%{\n]+
            35:
                {
                    m_this.codeIncludeContent();
                }
            case 75:
                break;
            case // .
            36:
                {
                    m_this.codeIncludeContent();
                }
            case 76:
                break;
            case // <<EOF>>
            37:
                {
                    m_this.codeIncludeEof();
                }
            case 77:
                break;
            case // '{'
            21:
                {
                    m_this.actionLB();
                }
            case 61:
                break;
            case // '}'
            26:
                {
                    return m_this.actionRB();
                }
            case 66:
                break;
            case // [^'/*{}\n]+
            27:
                {
                    m_this.actionContent();
                }
            case 67:
                break;
            case // .
            28:
                {
                    m_this.actionContent();
                }
            case 68:
                break;
            case // <<EOF>>
            29:
                {
                    m_this.actionEof();
                }
            case 69:
                break;
            case // '%%'
            6:
                {
                    m_this.startSection2();
                    return SEPARATOR;
                }
            case 46:
                break;
            case // ^{OPTWS}%token
            7:
                {
                    _yyValue = m_this.scanTokenDirective();
                    return TOKENTYPE;
                }
            case 47:
                break;
            case // ^{OPTWS}%left
            8:
                {
                    _yyValue = m_this.scanTokenDirective();
                    return TOKENTYPE;
                }
            case 48:
                break;
            case // ^{OPTWS}%right
            9:
                {
                    _yyValue = m_this.scanTokenDirective();
                    return TOKENTYPE;
                }
            case 49:
                break;
            case // ^{OPTWS}%nonassoc
            10:
                {
                    _yyValue = m_this.scanTokenDirective();
                    return TOKENTYPE;
                }
            case 50:
                break;
            case // %start
            11:
                {
                    m_this.scanDirective();
                    return START;
                }
            case 51:
                break;
            case // %type
            12:
                {
                    m_this.scanDirective();
                    return TYPE;
                }
            case 52:
                break;
            case // [<][^>]*[>]
            13:
                {
                    _yyValue = m_this.scanTypeInfo();
                    return TYPEINFO;
                }
            case 53:
                break;
            case // ^{OPTWS}%{NAME}
            14:
                {
                    m_this.unknownDirective();
                }
            case 54:
                break;
            case // <<EOF>>
            15:
                {
                    m_this.earlyEof();
                }
            case 55:
                break;
            case // {NAME}
            16:
                {
                    _yyValue = m_this.parseToken();
                    return TOKEN;
                }
            case 56:
                break;
            case // [']([^\\']|{ESC})[']
            17:
                {
                    _yyValue = m_this.parseToken();
                    return TOKEN;
                }
            case 57:
                break;
            case // %prec
            22:
                {
                    m_this.scanPrec();
                    return PREC;
                }
            case 62:
                break;
            case // [:|;]
            23:
                {
                    return m_this.scanSymbol();
                }
            case 63:
                break;
            case // '%%'
            24:
                {
                    m_this.startSection3();
                }
            case 64:
                break;
            case // <<EOF>>
            25:
                {
                    return m_this.eof();
                }
            case 65:
                break;
            case // (.|\n)*
            38:
                {
                    m_this.dumpSection3Code();
                }
            case 78:
                break;
            case // <<EOF>>
            39:
                {
                    return m_this.endSection3();
                }
            case 79:
                break;
            case // .
            18:
                {
                    m_this.invalidChar();
                }
            case 58:
                break;
            case // .|\n
            19:
                {
                    // default character action
                    echo();
                }
            case 59:
                break;
            case // <<EOF>>
            20:
                {
                    // default EOF action
                    return 0;
                }
            case 60:
                break;
            default:
                throw new IOException("Internal error in YaccLexer lexer.");
        }
        // specifically used _yyBuffer since it could be changed by user
        if (_yyMatchStart > 0 && _yyBuffer[_yyMatchStart - 1] == '\n')
            _yyIsNextBOL = true;
    }
}
