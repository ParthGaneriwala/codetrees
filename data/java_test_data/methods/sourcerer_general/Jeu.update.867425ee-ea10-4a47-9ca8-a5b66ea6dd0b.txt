public void update(GameContainer containerr, StateBasedGame arg1, int delta) throws SlickException {
    ArrayList<Explosion> Explosions_a_suppr = new ArrayList<Explosion>();
    for (Explosion e : liste_explosions) {
        if (!e.update(delta))
            Explosions_a_suppr.add(e);
    }
    liste_explosions.removeAll(Explosions_a_suppr);
    if (mission_terminée && !map_chargée) {
        nouvelleMap(lamap.map_suivante());
        map_chargée = true;
    }
    messages.update(delta);
    // Si l'update des balles retourne vrai, alors notre tank est touché par un tir adverse !
    if (balles.update(delta, monTank.tankCol(), monTank.tankLig())) {
        monTank.explosion();
        nouvelle_explosion(cases.colToPxl(monTank.tankCol()) + 20, cases.ligToPxl(monTank.tankLig()) + 20);
        messages.ajouter("!!!!!!!!! Boummm !!!!", 250, 3);
        messages.ajouter("Vous venez de vous faire exploser !", 300, 4);
        messages.ajouter("Mission échouée", 400, 6);
    }
    // On parcours les ennemis détruits
    ArrayList<TankEnnemi> listeEnnemisDétruits;
    listeEnnemisDétruits = balles.liste_ennemis_détruits();
    for (TankEnnemi t : listeEnnemisDétruits) {
        t.détruire();
        lamap.adversaire_detruit(t.col(), t.lig());
        nouvelle_explosion(t.x() + 20, t.y() + 20);
    }
    // On parcours les mines détruites
    ArrayList<Mine> listeMinesDétruites;
    listeMinesDétruites = balles.liste_mines_détruitees();
    for (Mine m : listeMinesDétruites) {
        m.détruire();
        lamap.adversaire_detruit(m.col(), m.lig());
        nouvelle_explosion(m.x() + 20, m.y() + 20);
    }
    // Action dans laquelle arrive le tank
    Actions actionEnCours = lamap.action_Case(monTank.tankCol(), monTank.tankLig());
    if (monTank.estDansNouvelleCase()) {
        // Le tank est-il tjs sur la map ?
        if (monTank.tankCol() == -1 || monTank.tankLig() == -1)
            actionEnCours = Actions.Out;
        // Le tank est-il a portée de tir ?
        boolean feu = false;
        if ((monTank.tankCol() > 0 && monTank.tankCol() <= 15 && monTank.tankLig() > 0 && monTank.tankLig() <= 15) && !monTank.estInvincible()) {
            int i = 0;
            while (!feu && i < lesTankEnnemis.size()) {
                // Notre tank est dans la ligne de mire d'un ennemi
                if (((TankEnnemi) lesTankEnnemis.get(i)).estDansPortéeDeTir(monTank.tankCol(), monTank.tankLig(), monTank.tankLastCol(), monTank.tankLastLig(), monTank.tankAngle())) {
                    // Le tank ennemi tir !
                    TankEnnemi tankTueur = lesTankEnnemis.get(i);
                    balles.ajouter(tankTueur.col(), tankTueur.lig(), tankTueur.angle(), true);
                    // Si cas compliqué de diag, on fait exploser le tank direct
                    if (monTank.tankAngle() % 90 != 0 && tankTueur.angle() % 90 != 0 && monTank.tankAngle() - tankTueur.angle() % 90 == 0) {
                        monTank.explosion();
                        nouvelle_explosion(cases.colToPxl(monTank.tankCol()) + 20, cases.ligToPxl(monTank.tankLig()) + 20);
                        messages.ajouter("!!!!!!!!! Boummm !!!!", 250, 3);
                        messages.ajouter("Vous venez de vous faire exploser !", 300, 4);
                        messages.ajouter("Mission échouée", 400, 6);
                    }
                    monTank.setEtat(Etat.Repos);
                    feu = true;
                } else
                    i++;
            }
        }
        // Si le tank n'a pas été tuée : nouvelle case = nouvelle action
        if (!feu) {
            switch(actionEnCours) {
                case Bloqué:
                case Ennemi:
                case Mine:
                    monTank.setEtat(Etat.Détruit);
                    messages.ajouter("Boing !!!!", 250, 3);
                    messages.ajouter("Vous venez de heurter un obstacle !", 300, 4);
                    messages.ajouter("Mission échouée", 400, 6);
                    nouvelle_explosion(cases.colToPxl(monTank.tankCol()) + 20, cases.ligToPxl(monTank.tankLig()) + 20);
                    break;
                case Plouf:
                    monTank.setEtat(Etat.Détruit);
                    messages.ajouter("Plouf !!!!", 250, 3);
                    messages.ajouter("Vous venez de tomber à l'eau !", 300, 4);
                    messages.ajouter("Mission échouée", 400, 6);
                    nouvelle_explosion(cases.colToPxl(monTank.tankCol()) + 20, cases.ligToPxl(monTank.tankLig()) + 20);
                    break;
                case Out:
                    monTank.setEtat(Etat.Détruit);
                    messages.ajouter("Héééhoooo !!!!", 250, 3);
                    messages.ajouter("La désertion n'est pas autorisée soldat !", 300, 4);
                    messages.ajouter("Mission échouée", 400, 6);
                    nouvelle_explosion(cases.colToPxl(monTank.tankCol()) + 20, cases.ligToPxl(monTank.tankLig()) + 20);
                    break;
                case Fin:
                    monTank.setEtat(Etat.AttenteOrdre);
                    mission_terminée = true;
                    tempsFin = new Date().getTime();
                    int diffTps = (int) (tempsFin - tempsDebut) / 1000;
                    scoreMap = SCORE_BASE - diffTps * SCORE_COEFF_TEMPS - (nbEssais - 1) * SCORE_COEFF_ESSAIS;
                    debug("Temps = " + diffTps + " & NbEssais = " + nbEssais);
                    scoreTotal += scoreMap;
                    log += "Mission " + lamap.map_fichier() + " (" + num_level + ") - Temps : " + diffTps + " - Essais : " + (nbEssais - 1) + " - Score : " + scoreMap + "<br />";
                    break;
                case DirectionH:
                    monTank.direction(270);
                    break;
                case DirectionG:
                    monTank.direction(180);
                    break;
                case DirectionB:
                    monTank.direction(90);
                    break;
                case DirectionD:
                    monTank.direction(0);
                    break;
                case DirectionDB:
                    monTank.direction(45);
                    break;
                case DirectionBG:
                    monTank.direction(135);
                    break;
                case DirectionGH:
                    monTank.direction(225);
                    break;
                case DirectionHD:
                    monTank.direction(315);
                    break;
                // Tir et Tir 4 : actions spéciales : car on entre dans ce cas à chaque update, non à chaque nouvelle case
                case Tir:
                    // Si le tank n'a pas encore tiré, on cré la balle
                    if (!monTank.tirEnCours()) {
                        monTank.tirer();
                        balles.ajouter(monTank.tankCol(), monTank.tankLig(), monTank.tankAngle());
                    }
                    break;
                case Tir4:
                    // Si le tank n'a pas encore tiré, on cré la balle
                    if (!monTank.tirEnCours()) {
                        monTank.tirer();
                        monTank.nouvelleCase();
                        for (int i = 0; i < 4; i++) balles.ajouter(monTank.tankCol(), monTank.tankLig(), (monTank.tankAngle() + i * 90) % 360);
                    }
                    break;
                case Bouclier:
                    monTank.invincible(3);
                default:
                    monTank.avancer();
                    break;
            }
        }
    } else if (monTank.tirEnCours()) {
        // La balle est en cours de mouvement, on attend qu'elle disparaisse pour refaire partir le tank
        if (!balles.en_mouvement())
            monTank.avancer();
    }
    ms += delta;
}
