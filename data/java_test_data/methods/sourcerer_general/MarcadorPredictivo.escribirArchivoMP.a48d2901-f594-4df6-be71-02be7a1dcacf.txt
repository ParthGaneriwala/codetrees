protected void escribirArchivoMP(ID idEmpresa, Mora mora) throws Exception {
    try {
        Map<String, Integer> mapIdsLlamadas = this.obtenerIdsLlamadas(idEmpresa, mora.getId());
        List<Llamada> llamadasTemp = this.obtenerCobrosMPByMora(mapIdsLlamadas, mora.getId());
        logger.info("Mora = " + mora.getNombre());
        logger.debug("	Total de cobros MP = " + llamadasTemp.size());
        // Separa la lista de llamadas (Crea los grupos vacios y luego distribuye)
        List<List<Llamada>> gruposLlamadas = new ArrayList<List<Llamada>>();
        for (int i = 0; i <= Llamada.PESO_DEFAULT; i++) {
            List<Llamada> llamadas = new ArrayList<Llamada>();
            gruposLlamadas.add(llamadas);
        }
        for (Llamada llamadaTemp : llamadasTemp) {
            gruposLlamadas.get(llamadaTemp.getPeso()).add(llamadaTemp);
        }
        // Abre un archivo
        PrintWriter escribir = new PrintWriter(new BufferedWriter(new FileWriter(rutaArchivo + System.getProperty("file.separator") + "marcador" + mora.getNombre() + ".txt")));
        int indexCobro = llamadasTemp.size();
        for (List<Llamada> llamadas : gruposLlamadas) {
            Collections.sort(llamadas, new ComparatorPeso());
            logger.info("		Total de cobros MP = " + llamadas.size());
            for (Iterator<Llamada> iter = llamadas.iterator(); iter.hasNext(); ) {
                Llamada__c llamada = iter.next().getLlamada__c();
                String linea = new String();
                linea += Util.completarString(llamada.getCobro__c().getID(), 18);
                if (llamada.getCuenta__r() != null) {
                    linea += Util.completarStringDerecha(llamada.getCuenta__r().getTC_Telefono_Celular__c(), 20);
                    linea += Util.completarStringDerecha(llamada.getCuenta__r().getTC_Telefono_Casa__c(), 20);
                    linea += Util.completarStringDerecha(llamada.getCuenta__r().getTC_Telefono_Trabajo__c(), 20);
                    linea += Util.completarStringDerecha(llamada.getCuenta__r().getMP_Telefono_Trabajo__c(), 20);
                    linea += Util.completarStringDerecha(llamada.getCuenta__r().getMP_Telefono_Casa__c(), 20);
                    linea += Util.completarStringDerecha(llamada.getCuenta__r().getMP_Telefono_Celular__c(), 20);
                } else {
                    linea += Util.completarString("", 20);
                    linea += Util.completarString("", 20);
                    linea += Util.completarString("", 20);
                    linea += Util.completarString("", 20);
                    linea += Util.completarString("", 20);
                    linea += Util.completarString("", 20);
                }
                linea += Util.completarString("HN", 10);
                linea += Util.formatearNum(indexCobro--, 6, 0);
                if (llamada.getCobro__r() != null) {
                    linea += Util.formatearNum(llamada.getCobro__r().getTC_Nivel_Mora_Consolidado__c(), 3, 0);
                    linea += Util.formatearNum(llamada.getCobro__r().getTC_Pago_Minimo_Local__c(), 16, 2);
                    linea += Util.formatearNum(llamada.getCobro__r().getTC_Pago_Minimo_USD__c(), 16, 2);
                } else {
                    linea += Util.formatearNum(0, 3, 0);
                    linea += Util.formatearNum(0, 16, 2);
                    linea += Util.formatearNum(0, 16, 2);
                }
                if (llamada.getCuenta__r() != null) {
                    linea += Util.completarStringDerecha(llamada.getCuenta__r().getName(), 60);
                } else {
                    linea += Util.completarString("", 60);
                }
                // Numero de tarjeta
                if (llamada.getTarjeta__r() != null) {
                    linea += Util.completarString(llamada.getTarjeta__r().getNumero_Tarjeta__c(), 20);
                } else {
                    linea += Util.completarString("", 20);
                }
                // Tipo de producto
                if (llamada.getInfo_Cuenta__r() != null) {
                    linea += Util.completarString(llamada.getInfo_Cuenta__r().getTC_Codigo_Producto__c(), 20);
                } else {
                    linea += Util.completarString("", 20);
                }
                if (llamada.getCobro__r() != null) {
                    linea += Util.formatearNum(llamada.getCobro__r().getTC_Nivel_Mora_Local__c(), 8, 0);
                    linea += Util.formatearNum(llamada.getCobro__r().getTC_Nivel_Mora_USD__c(), 8, 0);
                } else {
                    linea += Util.formatearNum(0, 8, 0);
                    linea += Util.formatearNum(0, 8, 0);
                }
                if (llamada.getInfo_Cuenta__r() != null) {
                    linea += Util.formatearNum(llamada.getInfo_Cuenta__r().getTC_Saldo_Actual_Local__c(), 16, 2);
                    linea += Util.formatearNum(llamada.getInfo_Cuenta__r().getTC_Saldo_Actual_USD__c(), 16, 2);
                } else {
                    linea += Util.formatearNum(0, 16, 2);
                    linea += Util.formatearNum(0, 16, 2);
                }
                escribir.println(linea);
            }
        }
        escribir.close();
    } catch (Exception e) {
        logger.error(e);
        throw e;
    }
}
