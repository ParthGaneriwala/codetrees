private void testIfAllRight(long eventSid, long mangaSid, long gradeSid, long categorySid) {
    // primero obtengo todos los participantes del torneo para ese grado y categor�a
    String hql = "from Participants where dog.category.sid=" + categorySid + " and dog.grade.sid=" + gradeSid;
    List<Participants> participants = this.participantsManager.findHQL(hql);
    // compruebo que para cada participante hay unos resultados
    for (int iParts = 0; iParts < participants.size(); iParts++) {
        Participants part = participants.get(iParts);
        hql = "from Roundresults where participants.sid=" + part.getSid();
        List<Roundresults> rrList = this.roundresultsManager.findHQL(hql);
        // si no hay resultados para el participante
        if (rrList.size() <= 0) {
            // primero que nada miro a ver si est�n las rondas del torneo para este participante
            hql = "from Round where grade.sid=" + gradeSid + " and category.sid=" + categorySid + " and (number=1 or number=2)";
            List<Round> roundList = roundManager.findHQL(hql);
            // si no existen las rondas para el torneo, las creo
            if (roundList.size() <= 0) {
                // creo dos rondas para esta categor�a y grado
                for (int roundNumber = 1; roundNumber < 3; roundNumber++) {
                    Round r = new Round();
                    r.setCategory(categoryManager.get(new Long(categorySid)));
                    r.setDescription("");
                    r.setEvent(eventManager.get(new Long(eventSid)));
                    r.setGrade(gradeManager.get(new Long(gradeSid)));
                    r.setNumber(new Long(roundNumber));
                    r.setTrm(0);
                    r.setTrs(0);
                    roundManager.save(r);
                }
                roundList = roundManager.findHQL(hql);
            }
            // tantos resultados como rondas para esta categor�a y grado haya (2 en teor�a)
            for (int iRound = 0; iRound < roundList.size(); iRound++) {
                Round r = roundList.get(iRound);
                Roundresults rr = new Roundresults();
                rr.setFouls(new Long(0));
                rr.setParticipants(part);
                rr.setReuses(new Long(0));
                rr.setRound(r);
                rr.setStartorder(new Long(0));
                rr.setTime(0);
                roundresultsManager.save(rr);
            }
        }
    }
}
