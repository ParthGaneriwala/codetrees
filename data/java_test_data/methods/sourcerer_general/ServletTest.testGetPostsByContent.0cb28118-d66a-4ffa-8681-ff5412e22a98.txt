/**
 * Retreive the message with the specified content.
 *
 * @throws Exception
 */
@Test
public void testGetPostsByContent() throws Exception {
    HttpTester request = new HttpTester();
    HttpTester response = new HttpTester();
    request.setMethod("POST");
    request.setURI("/api/query");
    request.setVersion("HTTP/1.0");
    request.setHeader("Content-Type", "application/x-www-form-urlencoded");
    List<Map> filterList = new ArrayList<Map>();
    Map<String, Object> messageMap = new HashMap<String, Object>();
    messageMap.put("output", "id");
    messageMap.put("used_as", "id");
    messageMap.put("type", "='message'");
    messageMap.put("content", " = 'Toyota makes the best cars'");
    filterList.add(messageMap);
    request.setContent("filters=" + constructJSONString(filterList));
    response.parse(tester.getResponses(request.generate()));
    Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatus());
    Assert.assertNotNull(response.getContent());
    List<HashMap> posts = getJSONAsList(response.getContent());
    Map<Integer, IPost> expectedResult = new HashMap<Integer, IPost>();
    Post post1 = new Post(13, 2, 0, "message", "Toyota makes the best cars", null);
    expectedResult.put(post1.getId(), post1);
    Assert.assertEquals("Unexpected number of posts returned.", expectedResult.size(), posts.size());
    for (HashMap post : posts) {
        long postId = (Long) post.get("id");
        IPost expectedPost = expectedResult.get((int) postId);
        Assert.assertNotNull("Received unexpected post id = " + post.get("id"), expectedPost.getId());
        Assert.assertEquals("content did not match.", expectedPost.getContent(), post.get("content"));
        Assert.assertEquals("refersToId did not match.", expectedPost.getRefersToId(), post.get("refers_to_id"));
        Assert.assertEquals("type did not match.", expectedPost.getType(), post.get("type"));
        Assert.assertEquals("authorPostId did not match.", expectedPost.getAuthorPostId(), post.get("author_post_id"));
    }
}
