public static Report getReport(HttpServletRequest request, String path, String id, byte[] pdfKey, Database db, Attributes attr, Info in) throws ServletException {
    ResultSet rs = null;
    ResultSet rs2 = null;
    ResultSet rs3 = null;
    Report rep;
    String add = request.getParameter("add");
    try {
        if (path.indexOf("jobContacts") != -1) {
            rs = db.dbQuery(JobContacts.getQuery(attr.getJobId()));
            rep = new JobContacts(rs, attr.getJobName(), Integer.toString(attr.getJobId()));
        } else if (path.indexOf("completeSummary") != -1) {
            rs = db.dbQuery(GenCostCodesReport.getQuery(attr.getJobId()));
            rs2 = db.dbQuery(GenCostCodesReport.getQuery2(attr.getJobId()));
            rs3 = db.dbQuery(GenCostCodesReport.getQuery3(attr.getJobId()));
            double contractStartAmount = 0, ownerCo = 0, intCo = 0;
            if (rs3.first())
                contractStartAmount = rs3.getFloat("contract_amount_start");
            if (rs3 != null)
                rs3.getStatement().close();
            rs3 = db.dbQuery(GenCostCodesReport.getQuery4(attr.getJobId()));
            if (rs3.first())
                ownerCo = rs3.getFloat("amount");
            if (rs3 != null)
                rs3.getStatement().close();
            rs3 = db.dbQuery(GenCostCodesReport.getQuery5(attr.getJobId()));
            log.debug(GenCostCodesReport.getQuery5(attr.getJobId()));
            if (rs3.first())
                intCo = rs3.getFloat("amount");
            if (rs3 != null)
                rs3.getStatement().close();
            rep = new GenCostCodesReport(rs, rs2, GenCostCodesReport.getPhases(db), attr.getJobName(), contractStartAmount, ownerCo, intCo, attr.getJobId());
        /*
			 * Subcontracts
			 */
        } else if (path.indexOf("sub") != -1) {
            if (path.indexOf("Warranty") != -1) {
                rs = db.dbQuery(GenWarranty.getQuery(id));
                rs2 = db.dbQuery(GenWarranty.getQuery2(id));
                rs2.first();
                rep = new GenWarranty(rs, rs2.getString(1), attr.getJobName());
            } else if (path.indexOf("Closeout") != -1) {
                rs = db.dbQuery(GenCloseout.getQuery(id));
                rs2 = db.dbQuery(GenCloseout.getQuery2(id));
                rs2.first();
                rep = new GenCloseout(rs, rs2.getString(1));
            } else if (path.indexOf("Checklist") != -1) {
                rs = db.dbQuery(GenContractChecklist.getQuery(id));
                rs.first();
                rs2 = db.dbQuery(GenContractChecklist.getQuery2(id));
                rs2.first();
                rep = new GenContractChecklist(rs.getString(1), attr.getJobName(), add, rs2.getString("contract_title"), rs2.getString("contractee_title"), rs2.getBoolean("site_work"), attr.get("short_name"), rs2.getString("contract_id"));
            } else if (path.indexOf("Submittals") != -1)
                rep = new GenSubSubmittal(id, db, attr);
            else if (path.indexOf("JobSummary") != -1)
                rep = new GenSubJobsiteSummary(id, db, attr.get("short_name"), attr.get("full_name"));
            else if (path.indexOf("Worksheet") != -1)
                rep = new GenSubcontractWorksheet(id, db, attr.get("short_name"));
            else if (path.indexOf("All") != -1)
                rep = new GenSubcontractAllDocs(id, add, db, attr);
            else if (path.indexOf("LienWaiver") != -1)
                rep = new GenLienWaiver(attr, db);
            else
                rep = new GenSubcontract(id, attr.getJobId(), db, attr);
        /*
			 * Submittals
			 */
        } else if (path.indexOf("sbmt") != -1) {
            if (path.indexOf("Architect") != -1)
                rep = new GenSubmittalToArch(id, db, attr);
            else if (path.indexOf("Subcontractor") != -1)
                rep = new GenSubmittalToSub(id, db, attr);
            else {
                if (id != null)
                    id = " costorder(division), costorder(cost_code), phase_code, costorder(submittal_num) desc";
                else
                    id = " costorder(submittal_num) desc";
                rs = db.dbQuery(GenSubmittalSummary.getQuery(attr.getJobId(), id));
                rep = new GenSubmittalSummary(rs, attr.getJobName(), attr.get("short_name"));
            }
        /*
			 * Pay Requests
			 */
        } else if (path.indexOf("pr") != -1) {
            if (path.indexOf("Report") != -1) {
                if (path.indexOf("Retention") != -1) {
                    rep = new GenPRRetReport(id, db);
                } else {
                    rs = db.dbQuery(GenPRReport.getQuery(id));
                    rs2 = db.dbQuery(GenPRReport.getQuery2(id));
                    rep = new GenPRReport(rs, rs2);
                }
            } else if (path.indexOf("Blank") != -1) {
                if (path.indexOf("Month") != -1) {
                    rs = db.dbQuery(GenMonthlyPaymentBlank.getQuery(id));
                    rs2 = db.dbQuery(GenMonthlyPaymentBlank.getQuery2());
                    rs2.first();
                    rep = new GenMonthlyPaymentBlank(rs, rs2.getString(1), attr.get("full_name"));
                } else {
                    rs = db.dbQuery(GenFinalPaymentBlank.getQuery(id));
                    rs2 = db.dbQuery(GenFinalPaymentBlank.getQuery2());
                    rs2.first();
                    rep = new GenFinalPaymentBlank(rs, rs2.getString(1), attr.get("full_name"));
                }
            } else {
                if (path.indexOf("Month") != -1) {
                    rs = db.dbQuery(GenMonthlyPayment.getQuery(id));
                    rs2 = db.dbQuery(GenMonthlyPayment.getQuery2());
                    rs2.first();
                    rep = new GenMonthlyPayment(rs, rs2.getString(1), attr.get("full_name"));
                } else {
                    rs = db.dbQuery(GenFinalPayment.getQuery(id));
                    rs2 = db.dbQuery(GenFinalPayment.getQuery2());
                    rs2.first();
                    rep = new GenFinalPayment(rs, rs2.getString(1), attr.get("full_name"));
                }
            }
        } else if (path.indexOf("rfi") != -1) {
            rs = db.dbQuery(GenRFIDocument.getQuery(id));
            if (!rs.isBeforeFirst()) {
                rs.getStatement().close();
                rs = db.dbQuery(GenRFIDocument.getQuery2(id));
            }
            rep = new GenRFIDocument(rs, attr.getJobName());
        } else if (path.indexOf("Transmittal") != -1) {
            rs = db.dbQuery(GenTransmittal.getQuery(id));
            rep = new GenTransmittal(rs, attr.getJobName());
        /*
			 *  KlickFileReports?
			 */
        } else if (path.indexOf("image") != -1) {
            Security sec = (Security) request.getSession().getAttribute("sec");
            boolean acc = false;
            if (sec != null)
                acc = sec.ok(Name.ACCOUNTING, Permission.READ);
            if (path.indexOf("KFW") != -1) {
                if (path.indexOf("Acc") != -1)
                    rep = new KFWImage(id, acc, request.getSession());
                else
                    rep = new KFWImage(id, request.getSession());
            } else
                rep = new AccImage(id, request.getSession());
            // Stamp with add
            if (rep != null)
                ReportUtils.stamp(rep, pdfKey, true, add);
            else
                throw new ServletException("KFW Image: Not Found! (Check KFWS server logs)");
        } else if (path.indexOf("change") != -1) {
            if (path.indexOf("RequestSummary") != -1)
                rep = new GenChangeRequestSummary(db, attr.getJobId(), id);
            else if (path.indexOf("AuthorizationSummary") != -1) {
                log.debug("ID " + id + " and is null " + (id == null));
                rep = new GenChangeAuthorizationSummary(id, db, attr.getJobId());
            } else if (path.indexOf("CR") != -1)
                rep = new GenCR(db, id, attr.get("short_name"));
            else
                rep = new GenCA(db, id, attr.get("short_name"), attr.getFullName());
        } else
            rep = new ErrorReport();
    } catch (IOException e) {
        throw new ServletException("Report: " + e.getMessage(), e);
    } catch (SQLException e) {
        throw new ServletException("Report: " + e.getMessage(), e);
    } catch (Exception e) {
        throw new ServletException("Report: " + e.getMessage(), e);
    }
    return rep;
}
