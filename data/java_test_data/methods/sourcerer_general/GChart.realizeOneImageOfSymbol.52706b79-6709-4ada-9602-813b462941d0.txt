protected void realizeOneImageOfSymbol(PlotPanel pp, GraphicsRenderingPanel grp, AnnotationRenderingPanel arp, Symbol symbol, Annotation annotation, boolean onY2, boolean clipPlotArea, boolean clipDecoratedChart, double renderPaddingFactor, double xPx, double yPx, double prevXPx, double prevYPx, double nextXPx, double nextYPx, double width, double height) {
    double xMin = pp.getXMin();
    double xMax = pp.getXMax();
    double xMid = symbol.getBaseline();
    // x!=x is a faster isNaN
    if ((xMid != xMid))
        xMid = (xMin + xMax) / 2.;
    double xMinPx = pp.xToPixel(xMin);
    double xMaxPx = pp.xToPixel(xMax);
    double xMidPx = pp.xToPixel(xMid);
    double symWidth = getAdjustedWidth(width, xPx, prevXPx, nextXPx, xMinPx, xMaxPx, xMidPx);
    if ((symWidth != symWidth))
        // x!=x is a faster isNaN
        return;
    double xLeft = getUpperLeftX(width, xPx, prevXPx, nextXPx, xMinPx, xMaxPx, xMidPx, pp.getXMousePlotArea());
    if ((xLeft != xLeft))
        // x!=x is a faster isNaN
        return;
    double xCenter = xLeft + symWidth / 2.;
    // the data and pixel Y coordinates are flipped, hence
    // the (counter-intuitive) min/max interchange below:
    double yMin = onY2 ? pp.getY2Max() : pp.getYMax();
    double yMax = onY2 ? pp.getY2Min() : pp.getYMin();
    double yMid = symbol.getBaseline();
    // x!=x is a faster isNaN
    if ((yMid != yMid))
        yMid = (yMin + yMax) / 2.;
    double yMinPx = pp.yToPixel(yMin, onY2);
    double yMaxPx = pp.yToPixel(yMax, onY2);
    double yMidPx = pp.yToPixel(yMid, onY2);
    double symHeight = getAdjustedHeight(height, yPx, prevYPx, nextYPx, yMinPx, yMaxPx, yMidPx);
    if ((symHeight != symHeight))
        // x!=x is a faster isNaN
        return;
    double yTop = getUpperLeftY(height, yPx, prevYPx, nextYPx, yMinPx, yMaxPx, yMidPx, pp.getYMousePlotArea());
    if ((yTop != yTop))
        // x!=x is a faster isNaN
        return;
    double yCenter = yTop + symHeight / 2.;
    if (clipPlotArea && !paddedIntersects(renderPaddingFactor, xMinPx, yMinPx, xMaxPx, yMaxPx, xLeft, yTop, xLeft + symWidth, yTop + symHeight))
        // image is completely off plot area, so skip it.
        return;
    else if (clipDecoratedChart) {
        int leftOfY = pp.getLeftOfYWidth();
        int titleThickness = pp.chartTitleThickness();
        if (!paddedIntersects(renderPaddingFactor, xMinPx - leftOfY, yMinPx - titleThickness, pp.getXChartSizeDecoratedQuickly() - leftOfY, pp.getYChartSizeDecoratedQuickly() - titleThickness, xLeft, yTop, xLeft + symWidth, yTop + symHeight))
            // image completely off decorated chart, so skip
            return;
    }
    // translate negative width, height to equivalent
    // positive values that image tags can handle
    int signWidth = 1;
    if (symWidth < 0) {
        xLeft = xLeft + symWidth;
        symWidth *= -1;
        signWidth = -1;
    }
    int signHeight = 1;
    if (symHeight < 0) {
        yTop = yTop + symHeight;
        symHeight *= -1;
        signHeight = -1;
    }
    if (symWidth != 0) {
        xLeft -= pixelPadLeft;
        symWidth += pixelPadLeft + pixelPadRight;
    }
    if (symHeight != 0) {
        yTop -= pixelPadTop;
        symHeight += pixelPadTop + pixelPadBottom;
    }
    // else, zero height, keep it that way (no padding added)
    int borderWidth = symbol.getBorderWidth();
    // borderWidth < 0 ==> external border
    if ((symWidth > 0 && symHeight > 0) || borderWidth < 0) {
        grp.renderBorderedImage(symbol.getBackgroundColorCSS(), symbol.getBorderColorCSS(), symbol.getBorderStyle(), borderWidth, symWidth, symHeight, xLeft, yTop, symbol.getImageURL());
    }
    // if the image has an attached label, realize that
    if (annotation != null && (annotation.getText() != null || annotation.getWidget() != null) && annotation.getVisible()) {
        AnnotationLocation loc = annotation.getLocation();
        if (null == loc)
            loc = defaultAnnotationLocation();
        loc = AnnotationLocation.transform(loc, signWidth, signHeight);
        // Note: yShift follows orientation of cartesian y
        // Axis, which is 180 degrees different from pixel y
        // coordinates, hence the extra "-" below.
        // 
        // signWidth, signHeight multipliers assure that shifts are
        // appropriately symetrical for bars above and below or to the
        // left or right of their baselines (only baseline bars use
        // negative symbol widths) For example, a yShift of
        // 10px would shift up for bars above the baseline, and down
        // for bars below the baseline, which is usually what you
        // want (e.g. placing labels above or below the bars).
        arp.renderAnnotation(annotation, loc, xCenter + signWidth * annotation.getXShift(), yCenter - signHeight * annotation.getYShift(), symWidth, symHeight, symbol);
    }
}
