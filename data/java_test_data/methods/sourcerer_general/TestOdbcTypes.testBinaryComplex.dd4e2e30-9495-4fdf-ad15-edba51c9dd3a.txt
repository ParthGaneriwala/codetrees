/*
     * Driver needs to be modified to transfer bits in byte (binary) fashion,
     * the same as is done for VARBINARY/bytea type.
    public void testBitComplex() {
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            ps = netConn.prepareStatement(
                "INSERT INTO alltypes(id, bt) VALUES(?, ?)");
            ps.setInt(1, 3);
            ps.setString(2, "101");
            assertEquals(1, ps.executeUpdate());
            ps.setInt(1, 4);
            assertEquals(1, ps.executeUpdate());
            ps.close();
            netConn.commit();
            ps = netConn.prepareStatement(
                "SELECT * FROM alltypes WHERE bt = ?");
            ps.setString(1, "101");
            rs = ps.executeQuery();
            assertTrue("Got no rows with bt = 101", rs.next());
            assertEquals(String.class, rs.getObject("bt").getClass());
            assertTrue("Got only one row with bt = 101", rs.next());
            assertEquals("101000000", rs.getString("bt"));
            assertFalse("Got too many rows with bt = 101", rs.next());
        } catch (SQLException se) {
            junit.framework.AssertionFailedError ase
                = new junit.framework.AssertionFailedError(se.getMessage());
            ase.initCause(se);
            throw ase;
        } finally {
            try {
                if (rs != null) {
                    rs.close();
                }
                if (ps != null) {
                    ps.close();
                }
            } catch(Exception e) {
            } }
    }

    public void testBitVaryingComplex() {
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            ps = netConn.prepareStatement(
                "INSERT INTO alltypes(id, btv) VALUES(?, ?)");
            ps.setInt(1, 3);
            ps.setString(2, "10101");
            assertEquals(1, ps.executeUpdate());
            ps.setInt(1, 4);
            assertEquals(1, ps.executeUpdate());
            ps.close();
            netConn.commit();
            ps = netConn.prepareStatement(
                "SELECT * FROM alltypes WHERE btv = ?");
            ps.setString(1, "10101");
            rs = ps.executeQuery();
            assertTrue("Got no rows with btv = 10101", rs.next());
            assertEquals(String.class, rs.getObject("btv").getClass());
            assertTrue("Got only one row with btv = 10101", rs.next());
            assertEquals("10101", rs.getString("btv"));
            assertFalse("Got too many rows with btv = 10101", rs.next());
        } catch (SQLException se) {
            junit.framework.AssertionFailedError ase
                = new junit.framework.AssertionFailedError(se.getMessage());
            ase.initCause(se);
            throw ase;
        } finally {
            try {
                if (rs != null) {
                    rs.close();
                }
                if (ps != null) {
                    ps.close();
                }
            } catch(Exception e) {
            }
        }
    }
    */
public void testBinaryComplex() {
    PreparedStatement ps = null;
    ResultSet rs = null;
    byte[] expectedBytes = new byte[] { (byte) 0xaa, (byte) 0x99, (byte) 0, (byte) 0 };
    byte[] ba1, ba2;
    try {
        ps = netConn.prepareStatement("INSERT INTO alltypes(id, bin) VALUES(?, ?)");
        ps.setInt(1, 3);
        ps.setBytes(2, expectedBytes);
        assertEquals(1, ps.executeUpdate());
        ps.setInt(1, 4);
        assertEquals(1, ps.executeUpdate());
        ps.close();
        netConn.commit();
        ps = netConn.prepareStatement("SELECT * FROM alltypes WHERE bin = ?");
        ps.setBytes(1, expectedBytes);
        rs = ps.executeQuery();
        assertTrue("Got no rows with bin = b'AA99'", rs.next());
        ba1 = rs.getBytes("bin");
        assertTrue("Got only one row with bin = b'AA99'", rs.next());
        ba2 = rs.getBytes("bin");
        assertFalse("Got too many rows with bin = b'AA99'", rs.next());
    } catch (SQLException se) {
        junit.framework.AssertionFailedError ase = new junit.framework.AssertionFailedError(se.getMessage());
        ase.initCause(se);
        throw ase;
    } finally {
        try {
            if (rs != null) {
                rs.close();
            }
            if (ps != null) {
                ps.close();
            }
        } catch (Exception e) {
        }
    }
    assertEquals("Retrieved bye array length wrong (1)", expectedBytes.length, ba1.length);
    for (int i = 0; i < ba1.length; i++) {
        assertEquals("Byte " + i + " wrong (1)", expectedBytes[i], ba1[i]);
    }
    assertEquals("Retrieved bye array length wrong (2)", expectedBytes.length, ba2.length);
    for (int i = 0; i < ba2.length; i++) {
        assertEquals("Byte " + i + " wrong (2)", expectedBytes[i], ba2[i]);
    }
}
