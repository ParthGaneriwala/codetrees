public static HashMap getUserRights(Session session, TsysUser user) {
    // String image = user.getImage();
    // if (image == null || image.equals(""))
    // image = "0";
    // int ii = Integer.parseInt(image);
    // session.createSQLQuery("update tsys_user set image='" + (ii + 1) + "' where userid=" + user.getUserid())
    // .executeUpdate();
    // if (user.getIscookie() != null && user.getIscookie().equals("cookie")) {
    // try {
    // if (ii != 0) {
    // if (ii <= 10) {
    // //						Thread.sleep(ii * 1000);
    // } else if (ii <= 100) {
    // //						Thread.sleep((ii ) * 1000);
    // } else if (ii <= 1000) {
    // //						Thread.sleep((ii) * 1000);
    // } else if (ii <= 10000) {
    // //						Thread.sleep((ii ) * 1000);
    // }
    // }
    // } catch (Exception e) {
    // e.printStackTrace();
    // }
    // }
    Set set = user.getTsysFunctionUsers();
    Object[] object = set.toArray();
    int power = 0;
    String functionid = "";
    HashMap hashmap = new HashMap();
    int i = 0;
    int j = 0;
    while (i < object.length) {
        TsysFunctionUser functionuser = (TsysFunctionUser) object[i];
        functionid = functionuser.getComp_id().getTsysFunction().getFunctionid();
        power = functionuser.getPower();
        if (power > 0) {
            hashmap.put(functionid, power);
        }
        i++;
    }
    Set set2 = user.getTsysUserRoles();
    Object[] object2 = set2.toArray();
    i = 0;
    while (i < object2.length) {
        TsysUserRole userrole = (TsysUserRole) object2[i];
        TsysRole role = userrole.getComp_id().getTsysRole();
        Set set3 = role.getTsysFunctionRoles();
        Object[] object3 = set3.toArray();
        j = 0;
        while (j < object3.length) {
            TsysFunctionRole functionrole = (TsysFunctionRole) object3[j];
            functionid = functionrole.getComp_id().getTsysFunction().getFunctionid();
            power = functionrole.getPower();
            if (power > 0) {
                if (hashmap.containsKey(functionid)) {
                    int temppowr = power | ((Integer) hashmap.get(functionid)).intValue();
                    hashmap.remove(functionid);
                    hashmap.put(functionid, temppowr);
                } else {
                    hashmap.put(functionid, power);
                }
            }
            j++;
        }
        i++;
    }
    return hashmap;
}
