public void doView(RenderRequest request, RenderResponse response) throws PortletException, IOException {
    try {
        String defaultView = VIEW_PAGE;
        // Get portal items
        String queryString = (String) request.getAttribute(BASE_QUERY_STRING);
        IIndexerSearch searcher = (IIndexerSearch) request.getAttribute(SEARCHER);
        ProjectCategoryList categories = (ProjectCategoryList) request.getAttribute(PROJECT_CATEGORY_LIST);
        // Get preferences
        String categoriesToInclude = request.getPreferences().getValue(PROJECT_CATEGORIES_TO_INCLUDE, null);
        // If no categories specified, then use them all
        if (categoriesToInclude == null) {
            StringBuffer sb = new StringBuffer();
            for (ProjectCategory thisCategory : categories) {
                if (sb.length() > 0) {
                    sb.append(",");
                }
                sb.append(thisCategory.getDescription());
            }
            categoriesToInclude = sb.toString();
        }
        // Perform the search counts
        Integer total = 0;
        LinkedHashMap<ProjectCategory, Integer> counts = new LinkedHashMap<ProjectCategory, Integer>();
        String[] categoryArray = categoriesToInclude.split(",");
        for (String thisCategory : categoryArray) {
            ProjectCategory category = categories.getFromValue(thisCategory.trim());
            if (category != null && category.getEnabled()) {
                // Customize the string
                String thisQuery = queryString + " AND (type:project) AND (projectCategoryId:" + category.getId() + ")";
                IndexerQueryResultList query = new IndexerQueryResultList(thisQuery);
                query.setQueryIndexType(Constants.INDEXER_FULL);
                query.getPagedListInfo().setItemsPerPage(1);
                searcher.search(query);
                counts.put(category, query.getPagedListInfo().getMaxRecords());
                total += query.getPagedListInfo().getMaxRecords();
            }
        }
        request.setAttribute(COUNTS, counts);
        request.setAttribute(TOTAL, total);
        // This portlet can provide state data to other portlets
        for (String event : PortalUtils.getDashboardPortlet(request).getGenerateDataEvents()) {
            if (event.equals("hideIfEmpty")) {
                PortalUtils.setGeneratedData(request, event, String.valueOf(total == 0));
            }
        }
        // JSP view
        PortletContext context = getPortletContext();
        PortletRequestDispatcher requestDispatcher = context.getRequestDispatcher(defaultView);
        requestDispatcher.include(request, response);
    } catch (Exception e) {
        e.printStackTrace(System.out);
        throw new PortletException(e.getMessage());
    }
}
