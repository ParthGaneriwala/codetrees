public synchronized void moveToInsertRow() throws SQLException {
    checkClosed();
    if (!this.isUpdatable) {
        throw new NotUpdatable(this.notUpdatableReason);
    }
    if (this.inserter == null) {
        if (this.insertSQL == null) {
            generateStatements();
        }
        this.inserter = (PreparedStatement) this.connection.clientPrepareStatement(this.insertSQL);
        if (this.populateInserterWithDefaultValues) {
            extractDefaultValues();
        }
        resetInserter();
    } else {
        resetInserter();
    }
    int numFields = this.fields.length;
    this.onInsertRow = true;
    this.doingUpdates = false;
    this.savedCurrentRow = this.thisRow;
    byte[][] newRowData = new byte[numFields][];
    this.thisRow = new ByteArrayRow(newRowData, getExceptionInterceptor());
    for (int i = 0; i < numFields; i++) {
        if (!this.populateInserterWithDefaultValues) {
            this.inserter.setBytesNoEscapeNoQuotes(i + 1, "DEFAULT".getBytes());
            newRowData = null;
        } else {
            if (this.defaultColumnValue[i] != null) {
                Field f = this.fields[i];
                switch(f.getMysqlType()) {
                    case MysqlDefs.FIELD_TYPE_DATE:
                    case MysqlDefs.FIELD_TYPE_DATETIME:
                    case MysqlDefs.FIELD_TYPE_NEWDATE:
                    case MysqlDefs.FIELD_TYPE_TIME:
                    case MysqlDefs.FIELD_TYPE_TIMESTAMP:
                        if (this.defaultColumnValue[i].length > 7 && this.defaultColumnValue[i][0] == (byte) 'C' && this.defaultColumnValue[i][1] == (byte) 'U' && this.defaultColumnValue[i][2] == (byte) 'R' && this.defaultColumnValue[i][3] == (byte) 'R' && this.defaultColumnValue[i][4] == (byte) 'E' && this.defaultColumnValue[i][5] == (byte) 'N' && this.defaultColumnValue[i][6] == (byte) 'T' && this.defaultColumnValue[i][7] == (byte) '_') {
                            this.inserter.setBytesNoEscapeNoQuotes(i + 1, this.defaultColumnValue[i]);
                            break;
                        }
                    default:
                        this.inserter.setBytes(i + 1, this.defaultColumnValue[i], false, false);
                }
                // This value _could_ be changed from a getBytes(), so we
                // need a copy....
                byte[] defaultValueCopy = new byte[this.defaultColumnValue[i].length];
                System.arraycopy(defaultColumnValue[i], 0, defaultValueCopy, 0, defaultValueCopy.length);
                newRowData[i] = defaultValueCopy;
            } else {
                this.inserter.setNull(i + 1, java.sql.Types.NULL);
                newRowData[i] = null;
            }
        }
    }
}
