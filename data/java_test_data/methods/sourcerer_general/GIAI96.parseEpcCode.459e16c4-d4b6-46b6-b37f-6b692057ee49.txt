public void parseEpcCode(String epcString, boolean isBinaryString) throws Exception {
    String bString = "", tmp = "";
    int iIndex = 0;
    if (!isBinaryString) {
        hexEpcCode = epcString;
        binaryEpcCode = ConvertUtil.hexString2binaryString(epcString);
    } else {
        binaryEpcCode = epcString;
        hexEpcCode = ConvertUtil.binaryString2hexString(epcString);
    }
    bString = binaryEpcCode;
    if (bString == null || bString.length() != epcCode.getLength())
        throw new IllegalArgumentException("Illegal epccode for " + EpcStandard.EPC_GIAI96);
    // -----header------
    tmp = bString.substring(iIndex, iIndex + epcCode.getHeaderLen());
    if (!tmp.equals(epcCode.getHeader()))
        throw new IllegalArgumentException("Illegal header for " + EpcStandard.EPC_GIAI96 + ", the header must be: " + epcCode.getHeader());
    iIndex += epcCode.getHeaderLen();
    // -----filter------
    tmp = bString.substring(iIndex, iIndex + epcCode.getFilterLen());
    epcCode.setFilter(tmp);
    iIndex += epcCode.getFilterLen();
    // -----IndicatorDigit------
    tmp = bString.substring(iIndex, iIndex + epcCode.getIndicatorDigitLen());
    epcCode.setIndicatorDigit(tmp);
    iIndex += epcCode.getIndicatorDigitLen();
    epcCode.setCoPrexLen(EpcStandard.coPrexLength[ConvertUtil.binaryString2Int(epcCode.getIndicatorDigit())]);
    epcCode.setItemRefLen(epcCode.getItemRefLen() - epcCode.getCoPrexLen());
    // -----filter------
    tmp = bString.substring(iIndex, iIndex + epcCode.getCoPrexLen());
    epcCode.setCoPrex(tmp);
    iIndex += epcCode.getCoPrexLen();
    // -----IndicatorDigit------
    tmp = bString.substring(iIndex, iIndex + epcCode.getItemRefLen());
    epcCode.setItemRef(tmp);
    iIndex += epcCode.getItemRefLen();
    // -----serial------
    tmp = bString.substring(iIndex, iIndex + epcCode.getSerialLen());
    epcCode.setSerial(tmp);
}
