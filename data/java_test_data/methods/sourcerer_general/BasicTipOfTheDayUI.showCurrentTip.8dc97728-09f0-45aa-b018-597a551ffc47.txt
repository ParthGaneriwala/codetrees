protected void showCurrentTip() {
    if (currentTipComponent != null) {
        tipArea.remove(currentTipComponent);
    }
    int currentTip = tipPane.getCurrentTip();
    if (currentTip == -1) {
        JLabel label = new JLabel();
        label.setOpaque(true);
        label.setBackground(UIManager.getColor("TextArea.background"));
        currentTipComponent = label;
        tipArea.add("Center", currentTipComponent);
        return;
    }
    // tip does not fall in current tip range
    if (tipPane.getModel().getTipCount() == 0 || (currentTip < 0 && currentTip >= tipPane.getModel().getTipCount())) {
        currentTipComponent = new JLabel();
    } else {
        Tip tip = tipPane.getModel().getTipAt(currentTip);
        Object tipObject = tip.getTip();
        if (tipObject instanceof Component) {
            currentTipComponent = (Component) tipObject;
        } else if (tipObject instanceof Icon) {
            currentTipComponent = new JLabel((Icon) tipObject);
        } else {
            JScrollPane tipScroll = new JScrollPane();
            tipScroll.setBorder(null);
            tipScroll.setOpaque(false);
            tipScroll.getViewport().setOpaque(false);
            tipScroll.setBorder(null);
            String text = tipObject == null ? "" : tipObject.toString();
            if (text.toLowerCase().startsWith("<html>")) {
                JEditorPane editor = new JEditorPane("text/html", text);
                LookAndFeelTweaks.htmlize(editor, tipPane.getFont());
                editor.setEditable(false);
                editor.setBorder(null);
                editor.setMargin(null);
                editor.setOpaque(false);
                tipScroll.getViewport().setView(editor);
            } else {
                JTextArea area = new JTextArea(text);
                area.setFont(tipPane.getFont());
                area.setEditable(false);
                area.setLineWrap(true);
                area.setWrapStyleWord(true);
                area.setBorder(null);
                area.setMargin(null);
                area.setOpaque(false);
                tipScroll.getViewport().setView(area);
            }
            currentTipComponent = tipScroll;
        }
    }
    tipArea.add("Center", currentTipComponent);
    tipArea.revalidate();
    tipArea.repaint();
}
