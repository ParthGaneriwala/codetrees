public void run() {
    frame = new OleFrame(cmpst, SWT.NONE);
    Point frameSize = DEFAULT_SIZE;
    frame.setSize(frameSize);
    flashPlayerControlSite = new OleControlSite(frame, SWT.NONE, "ShockwaveFlash.ShockwaveFlash");
    flashPlayerControlSite.setSize(frame.getSize());
    /**
     * FlashPlayerListener
     *
     * FlashPlayerListener is invoked when the flash player loaded in the
     * ActiveX ShockwaveFlash OleControlSite calls the fscommand("...", ) method.
     */
    class FlashPlayerListener implements Runnable {

        OleEvent evt;

        public FlashPlayerListener(OleEvent evt) {
            this.evt = evt;
        }

        public void run() {
            fsCommand = "";
            if (evt.arguments[0] != null) {
                try {
                    fsCommand = evt.arguments[0].getString();
                    positionOnFsCommand = evt.arguments[1].getString();
                } catch (Exception e) {
                    return;
                }
            } else
                return;
            if ((fsCommand.compareTo("FullScreenMode") == 0)) {
                if (myStreamingController.getMyBroadCastName().compareTo(filename) != 0) {
                    getDisplay().syncExec(new Runnable() {

                        public void run() {
                            flashPlayerControlSite.forceFocus();
                            boolean hasFocus = flashPlayerControlSite.setFocus();
                            if (hasFocus) {
                                hal.keyPress(32);
                                hal.delay(500);
                                hal.keyRelease(32);
                            }
                        }
                    });
                    return;
                } else {
                    // XXX TESTING REQUIRED...
                    PlatformUI.getWorkbench().getDisplay().getActiveShell().setMinimized(true);
                }
            }
            final String[] eventData = new String[] { fsCommand, positionOnFsCommand };
            // Scheduled Runnables dispatching...
            for (Long val = 0L; val < scheduledRunnables.size(); val++) {
                final String[] fsCmdArr = scheduledFSCommands.get(val);
                for (int i = 0; i < fsCmdArr.length; i++) {
                    if (fsCmdArr[i].compareTo(fsCommand) == 0) {
                        scheduledRunnablesEventData.put(val, eventData);
                        final Runnable r = scheduledRunnables.get(val);
                        final String threadID = new String((val.toString() + "_" + "SCHEDULED" + "_" + String.valueOf(System.currentTimeMillis())));
                        final Thread t = new Thread(r, threadID);
                        t.start();
                        break;
                    }
                }
            }
            // Once Time Runnables dispatching...
            for (Long val = 0L; val < onceTimeRunnables.size(); val++) {
                final String[] fsCmdArr = onceTimeFSCommands.get(val);
                for (int i = 0; i < fsCmdArr.length; i++) {
                    if (fsCmdArr[i].compareTo(fsCommand) == 0) {
                        onceTimeRunnablesEventData.put(val, eventData);
                        final Runnable r = onceTimeRunnables.get(val);
                        onceTimeRunnables.put(val, null);
                        onceTimeFSCommands.put(val, new String[] {});
                        final String threadID = new String((val.toString() + "_" + "ONCETIME" + "_" + String.valueOf(System.currentTimeMillis())));
                        final Thread t = new Thread(r, threadID);
                        t.start();
                        break;
                    }
                }
            }
            /* ********  DEBUG CODE ...  ******** */
            System.out.println("\n********** FlashPlayerListener *************\n\n" + " FSCOMMAND: \"" + fsCommand + "\"" + "\n PARAMETERs: ");
            for (int i = 1; i < evt.arguments.length; i++) System.out.println("  \"" + evt.arguments[i].getString() + "\", ");
            System.out.println("********************************************");
            System.out.flush();
        /* ******** End of DEBUG CODE ... ******** */
        }
    }
    ;
    flashPlayerControlSite.addEventListener(FSCOMMAND, new OleListener() {

        public void handleEvent(OleEvent evt) {
            getDisplay().asyncExec(new FlashPlayerListener(evt));
        }
    });
    /* ********************** ********************** ***************** */
    flashPlayerControlSite.doVerb(OLE.OLEIVERB_INPLACEACTIVATE);
    player = new OleAutomation(flashPlayerControlSite);
    // allowFullScreenMode SetProperty... FlashPLayer version 9.0.28 or Later NEEDED!!!
    player.setProperty(ALLOWFULLSCREEN, new Variant("true"));
}
