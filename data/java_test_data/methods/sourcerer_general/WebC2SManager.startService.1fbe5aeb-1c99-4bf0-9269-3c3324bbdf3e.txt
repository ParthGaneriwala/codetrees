private void startService() throws Exception {
    loggerServiceTracker.info("starting http server");
    server = new Server();
    SelectChannelConnector selectChannelConnector = new SelectChannelConnector();
    selectChannelConnector.setPort(getWebclientPort());
    selectChannelConnector.setUseDirectBuffers(false);
    server.addConnector(selectChannelConnector);
    ContextHandlerCollection contexts = new ContextHandlerCollection();
    ServletContextHandler resourceServletContext = new ServletContextHandler(contexts, "/", ServletContextHandler.SESSIONS);
    DefaultServlet ds = new DefaultServlet();
    resourceServletContext.addServlet(new ServletHolder(ds), "/");
    Map<String, String> params = new HashMap<String, String>();
    params.put("org.eclipse.jetty.servlet.Default.resourceBase", getResourceBase());
    resourceServletContext.setInitParams(params);
    FilterHolder fHolder = new FilterHolder(org.eclipse.jetty.servlets.GzipFilter.class);
    fHolder.setName("compress");
    resourceServletContext.addFilter(fHolder, "*.js", FilterMapping.ALL);
    resourceServletContext.addFilter(fHolder, "*.css", FilterMapping.ALL);
    resourceServletContext.addFilter(fHolder, "*.html", FilterMapping.ALL);
    Map<String, ServletContextHandler> servletHandlers = new LinkedHashMap<String, ServletContextHandler>();
    ServletContextHandler root = new ServletContextHandler(contexts, getContextPath(), ServletContextHandler.SESSIONS);
    root.addServlet(new ServletHolder(new XmppServlet()), getPathSpec());
    servletHandlers.put(getContextPath(), root);
    for (ServiceReference ref : httpServletServiceTracker.getServiceReferences()) {
        String contextPath = (String) ref.getProperty("contextPath");
        String pathSpec = (String) ref.getProperty("pathSpec");
        HttpServlet servlet = (HttpServlet) httpServletServiceTracker.getService(ref);
        if (contextPath == null || pathSpec == null) {
            continue;
        }
        ServletContextHandler contextHandler = servletHandlers.get(contextPath);
        if (contextHandler == null) {
            contextHandler = new ServletContextHandler(contexts, contextPath, ServletContextHandler.SESSIONS);
            servletHandlers.put(contextPath, contextHandler);
        }
        contextHandler.addServlet(new ServletHolder(servlet), pathSpec);
    }
    contexts.addHandler(new DefaultHandler());
    server.setHandler(contexts);
    server.start();
    sessionMonitor.setStop(false);
    sessionMonitor.start();
    loggerServiceTracker.info("server start successful");
}
