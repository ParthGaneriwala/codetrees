// $ANTLR start "literal"
public final gramaticaMM2Parser.literal_return literal() throws RecognitionException {
    gramaticaMM2Parser.literal_return retval = new gramaticaMM2Parser.literal_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token GREATER_EQUAL162 = null;
    Token LOWER_EQUAL163 = null;
    Token LOWER164 = null;
    Token GREATER165 = null;
    gramaticaMM2Parser.igual_diferente_return igual_diferente161 = null;
    gramaticaMM2Parser.igual_diferente_return igual_diferente166 = null;
    CommonTree GREATER_EQUAL162_tree = null;
    CommonTree LOWER_EQUAL163_tree = null;
    CommonTree LOWER164_tree = null;
    CommonTree GREATER165_tree = null;
    RewriteRuleTokenStream stream_GREATER = new RewriteRuleTokenStream(adaptor, "token GREATER");
    RewriteRuleTokenStream stream_LOWER = new RewriteRuleTokenStream(adaptor, "token LOWER");
    RewriteRuleTokenStream stream_GREATER_EQUAL = new RewriteRuleTokenStream(adaptor, "token GREATER_EQUAL");
    RewriteRuleTokenStream stream_LOWER_EQUAL = new RewriteRuleTokenStream(adaptor, "token LOWER_EQUAL");
    RewriteRuleSubtreeStream stream_igual_diferente = new RewriteRuleSubtreeStream(adaptor, "rule igual_diferente");
    try {
        // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:143:12: ( igual_diferente ( ( GREATER_EQUAL | LOWER_EQUAL | LOWER | GREATER ) igual_diferente )* -> ^( LITERAL ( igual_diferente )+ ) )
        // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:143:24: igual_diferente ( ( GREATER_EQUAL | LOWER_EQUAL | LOWER | GREATER ) igual_diferente )*
        {
            pushFollow(FOLLOW_igual_diferente_in_literal1536);
            igual_diferente161 = igual_diferente();
            state._fsp--;
            stream_igual_diferente.add(igual_diferente161.getTree());
            // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:143:40: ( ( GREATER_EQUAL | LOWER_EQUAL | LOWER | GREATER ) igual_diferente )*
            loop29: do {
                int alt29 = 2;
                int LA29_0 = input.LA(1);
                if (((LA29_0 >= GREATER && LA29_0 <= LOWER_EQUAL))) {
                    alt29 = 1;
                }
                switch(alt29) {
                    case 1:
                        // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:143:41: ( GREATER_EQUAL | LOWER_EQUAL | LOWER | GREATER ) igual_diferente
                        {
                            // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:143:41: ( GREATER_EQUAL | LOWER_EQUAL | LOWER | GREATER )
                            int alt28 = 4;
                            switch(input.LA(1)) {
                                case GREATER_EQUAL:
                                    {
                                        alt28 = 1;
                                    }
                                    break;
                                case LOWER_EQUAL:
                                    {
                                        alt28 = 2;
                                    }
                                    break;
                                case LOWER:
                                    {
                                        alt28 = 3;
                                    }
                                    break;
                                case GREATER:
                                    {
                                        alt28 = 4;
                                    }
                                    break;
                                default:
                                    NoViableAltException nvae = new NoViableAltException("", 28, 0, input);
                                    throw nvae;
                            }
                            switch(alt28) {
                                case 1:
                                    // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:143:42: GREATER_EQUAL
                                    {
                                        GREATER_EQUAL162 = (Token) match(input, GREATER_EQUAL, FOLLOW_GREATER_EQUAL_in_literal1540);
                                        stream_GREATER_EQUAL.add(GREATER_EQUAL162);
                                    }
                                    break;
                                case 2:
                                    // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:143:56: LOWER_EQUAL
                                    {
                                        LOWER_EQUAL163 = (Token) match(input, LOWER_EQUAL, FOLLOW_LOWER_EQUAL_in_literal1542);
                                        stream_LOWER_EQUAL.add(LOWER_EQUAL163);
                                    }
                                    break;
                                case 3:
                                    // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:143:68: LOWER
                                    {
                                        LOWER164 = (Token) match(input, LOWER, FOLLOW_LOWER_in_literal1544);
                                        stream_LOWER.add(LOWER164);
                                    }
                                    break;
                                case 4:
                                    // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:143:74: GREATER
                                    {
                                        GREATER165 = (Token) match(input, GREATER, FOLLOW_GREATER_in_literal1546);
                                        stream_GREATER.add(GREATER165);
                                    }
                                    break;
                            }
                            pushFollow(FOLLOW_igual_diferente_in_literal1549);
                            igual_diferente166 = igual_diferente();
                            state._fsp--;
                            stream_igual_diferente.add(igual_diferente166.getTree());
                        }
                        break;
                    default:
                        break loop29;
                }
            } while (true);
            // AST REWRITE
            // elements: igual_diferente
            // token labels:
            // rule labels: retval
            // token list labels:
            // rule list labels:
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", retval != null ? retval.tree : null);
            root_0 = (CommonTree) adaptor.nil();
            // 144:2: -> ^( LITERAL ( igual_diferente )+ )
            {
                // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:144:8: ^( LITERAL ( igual_diferente )+ )
                {
                    CommonTree root_1 = (CommonTree) adaptor.nil();
                    root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(LITERAL, "LITERAL"), root_1);
                    if (!(stream_igual_diferente.hasNext())) {
                        throw new RewriteEarlyExitException();
                    }
                    while (stream_igual_diferente.hasNext()) {
                        adaptor.addChild(root_1, stream_igual_diferente.nextTree());
                    }
                    stream_igual_diferente.reset();
                    adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
