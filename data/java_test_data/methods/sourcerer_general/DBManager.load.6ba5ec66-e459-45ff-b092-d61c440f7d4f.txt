public static void load(HojaDeRuta hojaDeRuta) {
    log.info("Cargando la hoja De Ruta: " + hojaDeRuta.getId());
    Connection conn = getConnection();
    PreparedStatement statement = null;
    ResultSet rs = null;
    List<LightweightPedido> pedidos = new ArrayList<LightweightPedido>();
    try {
        String query = "select ph.orden_entrega as orden, p.id as id, c.razon_social as razonsocial, ep.valor as estado " + "from pedido as p inner join pedidoporhojaderuta as ph on p.id = ph.pedido_id " + "inner join cliente as c on p.cliente_id = c.id " + "inner join estadopedido ep on p.estado_id = ep.id " + "where ph.hojaderuta_id = ? order by orden";
        log.info(query);
        statement = conn.prepareStatement(query);
        statement.setInt(1, hojaDeRuta.getId());
        rs = statement.executeQuery();
        while (rs.next()) {
            LightweightPedido pedido = new Pedido();
            pedido.setId(rs.getInt("id"));
            pedido.setRazonSocial(rs.getString("razonsocial"));
            pedido.setEstado(EstadoPedido.valueOf(rs.getString("estado")));
            pedido.setOrdenDeEntrega(rs.getInt("orden"));
            pedidos.add(pedido);
        }
    } catch (SQLException e) {
        e.printStackTrace();
        return;
    } finally {
        try {
            rs.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        try {
            statement.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        try {
            conn.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    hojaDeRuta.setPedidos(pedidos);
    log.info("Hoja de ruta cargada satisfactoriamente");
}
