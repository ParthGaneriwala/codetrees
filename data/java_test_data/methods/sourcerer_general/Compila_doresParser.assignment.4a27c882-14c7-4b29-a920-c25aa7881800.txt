// $ANTLR start "assignment"
public final Compila_doresParser.assignment_return assignment() throws RecognitionException {
    Compila_doresParser.assignment_return retval = new Compila_doresParser.assignment_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token EQUAL103 = null;
    Token EQUAL106 = null;
    Compila_doresParser.id_return id102 = null;
    Compila_doresParser.expression_return expression104 = null;
    Compila_doresParser.index_return index105 = null;
    Compila_doresParser.expression_return expression107 = null;
    CommonTree EQUAL103_tree = null;
    CommonTree EQUAL106_tree = null;
    RewriteRuleTokenStream stream_EQUAL = new RewriteRuleTokenStream(adaptor, "token EQUAL");
    RewriteRuleSubtreeStream stream_id = new RewriteRuleSubtreeStream(adaptor, "rule id");
    RewriteRuleSubtreeStream stream_expression = new RewriteRuleSubtreeStream(adaptor, "rule expression");
    RewriteRuleSubtreeStream stream_index = new RewriteRuleSubtreeStream(adaptor, "rule index");
    try {
        // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:177:2: ( ( id EQUAL expression ) -> ^( ASSIGN id expression ) | ( index EQUAL expression ) -> ^( ASSIGN index expression ) )
        int alt27 = 2;
        int LA27_0 = input.LA(1);
        if ((LA27_0 == ID)) {
            int LA27_1 = input.LA(2);
            if ((LA27_1 == LBR)) {
                alt27 = 2;
            } else if ((LA27_1 == EQUAL)) {
                alt27 = 1;
            } else {
                NoViableAltException nvae = new NoViableAltException("", 27, 1, input);
                throw nvae;
            }
        } else {
            NoViableAltException nvae = new NoViableAltException("", 27, 0, input);
            throw nvae;
        }
        switch(alt27) {
            case 1:
                // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:177:4: ( id EQUAL expression )
                {
                    // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:177:4: ( id EQUAL expression )
                    // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:177:5: id EQUAL expression
                    {
                        pushFollow(FOLLOW_id_in_assignment1227);
                        id102 = id();
                        state._fsp--;
                        stream_id.add(id102.getTree());
                        EQUAL103 = (Token) match(input, EQUAL, FOLLOW_EQUAL_in_assignment1229);
                        stream_EQUAL.add(EQUAL103);
                        pushFollow(FOLLOW_expression_in_assignment1231);
                        expression104 = expression();
                        state._fsp--;
                        stream_expression.add(expression104.getTree());
                    }
                    // AST REWRITE
                    // elements: expression, id
                    // token labels:
                    // rule labels: retval
                    // token list labels:
                    // rule list labels:
                    // wildcard labels:
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.tree : null);
                    root_0 = (CommonTree) adaptor.nil();
                    // 177:26: -> ^( ASSIGN id expression )
                    {
                        // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:177:29: ^( ASSIGN id expression )
                        {
                            CommonTree root_1 = (CommonTree) adaptor.nil();
                            root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(ASSIGN, "ASSIGN"), root_1);
                            adaptor.addChild(root_1, stream_id.nextTree());
                            adaptor.addChild(root_1, stream_expression.nextTree());
                            adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;
                }
                break;
            case 2:
                // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:178:4: ( index EQUAL expression )
                {
                    // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:178:4: ( index EQUAL expression )
                    // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:178:5: index EQUAL expression
                    {
                        pushFollow(FOLLOW_index_in_assignment1248);
                        index105 = index();
                        state._fsp--;
                        stream_index.add(index105.getTree());
                        EQUAL106 = (Token) match(input, EQUAL, FOLLOW_EQUAL_in_assignment1250);
                        stream_EQUAL.add(EQUAL106);
                        pushFollow(FOLLOW_expression_in_assignment1252);
                        expression107 = expression();
                        state._fsp--;
                        stream_expression.add(expression107.getTree());
                    }
                    // AST REWRITE
                    // elements: expression, index
                    // token labels:
                    // rule labels: retval
                    // token list labels:
                    // rule list labels:
                    // wildcard labels:
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.tree : null);
                    root_0 = (CommonTree) adaptor.nil();
                    // 178:29: -> ^( ASSIGN index expression )
                    {
                        // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:178:32: ^( ASSIGN index expression )
                        {
                            CommonTree root_1 = (CommonTree) adaptor.nil();
                            root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(ASSIGN, "ASSIGN"), root_1);
                            adaptor.addChild(root_1, stream_index.nextTree());
                            adaptor.addChild(root_1, stream_expression.nextTree());
                            adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;
                }
                break;
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
