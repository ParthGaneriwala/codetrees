public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response) throws Exception {
    ModelAndView mv = new ModelAndView();
    String eventSid = (String) request.getParameter("sid");
    String roundSid = (String) request.getParameter("roundSid");
    String gradeSid = (String) request.getParameter("gradeSid");
    String categorySid = (String) request.getParameter("categorySid");
    // creo valores por defecto
    if (roundSid == null || roundSid.length() <= 0) {
        roundSid = "1";
    }
    if (gradeSid == null || gradeSid.length() <= 0) {
        List<Grade> gl = gradeManager.getAll();
        if (gl.size() > 0) {
            gradeSid = "" + gl.get(0).getSid();
        } else {
            gradeSid = "0";
        }
    }
    if (categorySid == null || categorySid.length() <= 0) {
        List<Category> cl = categoryManager.getAll();
        if (cl.size() > 0) {
            categorySid = "" + cl.get(0).getSid();
        } else {
            categorySid = "0";
        }
    }
    mv.addObject("eventsid", eventSid);
    mv.addObject("roundSid", roundSid);
    mv.addObject("gradeSid", gradeSid);
    mv.addObject("categorySid", categorySid);
    // primero meto todos los grados
    mv.addObject("listadegrados", gradeManager.getAll("name"));
    // ahora meto todas las categorías
    mv.addObject("listadecategorias", categoryManager.getAll("name"));
    // compruebo que están creadas todas las rondas y resultados, y las que no las creo
    if (roundSid.trim().equals("1") || roundSid.trim().equals("2")) {
        testIfAllRight(Long.valueOf(eventSid).longValue(), Long.valueOf(roundSid).longValue(), Long.valueOf(gradeSid).longValue(), Long.valueOf(categorySid).longValue());
        // ahora muestro los participantes ordenados por resultado obtenido en la prueba
        String hql = "from Roundresults where round.event.sid=" + eventSid + " and round.number=" + roundSid + " and round.grade.sid=" + gradeSid;
        // para dar menos premios! la pasta es la pasta
        if (Double.valueOf(categorySid).doubleValue() >= 0) {
            hql = hql + " and participants.dog.category.sid=" + categorySid;
        }
        List<Roundresults> results = roundresultsManager.findHQL(hql);
        ResultsManager rm = new ResultsManager(settingsManager, this.rangeCalificationManager);
        List<Winner> winners = rm.orderResults(results);
        mv.addObject("resultados", winners);
    } else {
        testIfAllRight(Long.valueOf(eventSid).longValue(), Long.valueOf(1).longValue(), Long.valueOf(gradeSid).longValue(), Long.valueOf(categorySid).longValue());
        testIfAllRight(Long.valueOf(eventSid).longValue(), Long.valueOf(2).longValue(), Long.valueOf(gradeSid).longValue(), Long.valueOf(categorySid).longValue());
        // ahora muestro los participantes ordenados por resultado obtenido en la prueba
        String hql = "from Roundresults where round.event.sid=" + eventSid + " and round.number=1" + " and round.grade.sid=" + gradeSid;
        // para dar menos premios! la pasta es la pasta
        if (Double.valueOf(categorySid).doubleValue() >= 0) {
            hql = hql + " and participants.dog.category.sid=" + categorySid;
        }
        List<Roundresults> results1 = roundresultsManager.findHQL(hql);
        hql = "from Roundresults where round.event.sid=" + eventSid + " and round.number=2" + " and round.grade.sid=" + gradeSid;
        // para dar menos premios! la pasta es la pasta
        if (Double.valueOf(categorySid).doubleValue() >= 0) {
            hql = hql + " and participants.dog.category.sid=" + categorySid;
        }
        List<Roundresults> results2 = roundresultsManager.findHQL(hql);
        ResultsManager rm = new ResultsManager(settingsManager, this.rangeCalificationManager);
        List<Winner> results = rm.orderResults(results1, results2);
        mv.addObject("resultados", results);
    }
    return mv;
}
