public void testSelectProjectWithPaging() throws Exception {
    // Test inserting and retrieving a couple pages worth of data
    int pages = 3;
    int pageSize = 10;
    int insertCount = (pages * pageSize);
    // Unique project characteristics for testing against
    String projectTitle = "ProjectListAPITest Test Project insert " + insertCount + " records and select using paging";
    String keywords = "Tracker:" + System.currentTimeMillis();
    // Insert lots of projects for testing the paging
    {
        // Define the project
        DataRecord record = new DataRecord();
        record.setName("project");
        record.setAction(DataRecord.INSERT);
        record.setShareKey(true);
        record.addField("title", projectTitle);
        record.addField("shortDescription", "API Test Project short description");
        record.addField("keywords", keywords);
        record.addField("requestDate", new Date());
        record.addField("enteredBy", USER_ID);
        record.addField("modifiedBy", USER_ID);
        record.addField("groupId", GROUP_ID);
        // Insert it several times
        for (int insertTracker = 0; insertTracker < insertCount; insertTracker++) {
            api.save(record);
            processTheTransactions(api, packetContext);
            assertFalse("API reported a transaction error: " + api.getLastResponse(), api.hasError());
        }
    }
    int recordCountProcessed = 0;
    int currentOffset = 0;
    for (int pageCount = 0; pageCount < pages; pageCount++) {
        // Start at offset 0 and add the number per page
        currentOffset = (pageCount * pageSize);
        // Retrieve records by paging through the resultset
        {
            // Add Meta Info with fields required
            ArrayList<String> meta = new ArrayList<String>();
            meta.add("id");
            meta.add("title");
            meta.add("keywords");
            api.setTransactionMeta(meta);
            System.out.println("Checking offset: " + currentOffset);
            DataRecord record = new DataRecord();
            record.setName("projectList");
            record.setAction(DataRecord.SELECT);
            record.addField("keywords", keywords);
            // NOTE: Sort takes the actual database fields (instead of bean properties) comma separated
            record.setSort("project_id");
            record.setOffset(currentOffset);
            record.setItems(pageSize);
            api.save(record);
            processTheTransactions(api, packetContext);
            assertFalse("API reported a transaction error: " + api.getLastResponse(), api.hasError());
            assertTrue("Couldn't find inserted projects - " + api.getRecordCount(), api.getRecordCount() == record.getItems());
        }
        // Demonstrate using the raw DataRecord objects when the Project class is unavailable in the classpath
        ArrayList<DataRecord> recordList = api.getRecords();
        assertTrue(recordList.size() == pageSize);
        for (DataRecord thisRecord : recordList) {
            assertTrue("ProjectId is -1", thisRecord.getValueAsInt("id") > -1);
            assertTrue(projectTitle.equals(thisRecord.getValue("title")));
            assertTrue(keywords.equals(thisRecord.getValue("keywords")));
        }
        // Demonstrate converting the recordset to Project objects
        ArrayList<Object> projectObjects = api.getRecords("com.concursive.connect.web.modules.profile.dao.Project");
        assertTrue(projectObjects.size() == pageSize);
        for (Object projectObject : projectObjects) {
            Project partialProject = (Project) projectObject;
            assertNotNull(partialProject);
            assertTrue("ProjectId is -1", partialProject.getId() > -1);
            assertTrue(projectTitle.equals(partialProject.getTitle()));
            ++recordCountProcessed;
        }
    }
    // Cleanup any matching projects
    ProjectList projects = new ProjectList();
    projects.setKeywords(keywords);
    projects.buildList(db);
    assertEquals(insertCount, projects.size());
    for (Project project : projects) {
        project.delete(db, null);
    }
    // Make sure all the records were seen that were inserted
    assertEquals(insertCount, recordCountProcessed);
}
