public static boolean parse(byte[] buffer, Requirement requirement, Connection db) throws SQLException {
    if (System.getProperty("DEBUG") != null) {
        System.out.println("AssignmentOmniOutliner2Importer-> parseOmniOutliner");
    }
    try {
        db.setAutoCommit(false);
        // stream the XML Outline from the uploaded byte array, ignore the DTD
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        DocumentBuilder builder = factory.newDocumentBuilder();
        builder.setEntityResolver(new EntityResolver() {

            public InputSource resolveEntity(String publicId, String systemId) throws SAXException, java.io.IOException {
                return new InputSource(new ByteArrayInputStream("<?xml version='1.0' encoding='UTF-8'?>".getBytes()));
            }
        });
        Document document = builder.parse(new ByteArrayInputStream(buffer));
        // Position
        boolean positionItemComplete = false;
        // Umm... put in an object
        short itemPosition = -1;
        short priorityPosition = -1;
        short assignedToPosition = -1;
        short effortPosition = -1;
        short startPosition = -1;
        short endPosition = -1;
        // Parse the columns
        ArrayList columnList = new ArrayList();
        Element columnElement = XMLUtils.getFirstChild(document, "oo:columns");
        XMLUtils.getAllChildren(columnElement, columnList);
        if (System.getProperty("DEBUG") != null) {
            System.out.println("AssignmentOmniOutliner2Importer-> Columns: " + columnList.size());
        }
        Iterator columnIterator = columnList.iterator();
        short position = -1;
        boolean foundOutline = false;
        while (columnIterator.hasNext()) {
            Element columnNode = (Element) columnIterator.next();
            Element column = XMLUtils.getFirstChild(columnNode, "oo:title");
            String columnName = XMLUtils.getNodeText(column);
            if (System.getProperty("DEBUG") != null) {
                System.out.println("AssignmentOmniOutliner2Importer-> Column name: " + columnName);
            }
            if ("yes".equals((String) columnNode.getAttribute("is-outline-column"))) {
                foundOutline = true;
            }
            if (foundOutline) {
                ++position;
                if ("topic".equalsIgnoreCase(columnName)) {
                    positionItemComplete = true;
                    itemPosition = position;
                }
                if (positionItemComplete) {
                    if ("priority".equalsIgnoreCase(columnName)) {
                        priorityPosition = position;
                    } else if ("lead".equalsIgnoreCase(columnName)) {
                        assignedToPosition = position;
                    } else if ("assigned to".equalsIgnoreCase(columnName)) {
                        assignedToPosition = position;
                    } else if ("effort".equalsIgnoreCase(columnName)) {
                        effortPosition = position;
                    } else if ("start".equalsIgnoreCase(columnName)) {
                        startPosition = position;
                    } else if ("end".equalsIgnoreCase(columnName)) {
                        endPosition = position;
                    }
                }
            }
        }
        // Process the outline
        if (positionItemComplete) {
            ArrayList itemList = new ArrayList();
            Element rootElement = XMLUtils.getFirstChild(document, "oo:root");
            XMLUtils.getAllChildren(rootElement, itemList);
            if (System.getProperty("DEBUG") != null) {
                System.out.println("AssignmentOmniOutliner2Importer-> Items: " + itemList.size());
            }
            // Go through the items, for each item see if it has children, with items, etc.
            Iterator itemIterator = itemList.iterator();
            while (itemIterator.hasNext()) {
                Element itemElement = (Element) itemIterator.next();
                parseItemElement(itemElement, db, 0, requirement.getProjectId(), requirement.getId(), requirement.getEnteredBy(), requirement.getModifiedBy(), itemPosition, priorityPosition, assignedToPosition, effortPosition, startPosition, endPosition);
            }
        }
        db.commit();
    } catch (Exception e) {
        db.rollback();
        e.printStackTrace(System.out);
        return false;
    } finally {
        db.setAutoCommit(true);
    }
    return true;
}
