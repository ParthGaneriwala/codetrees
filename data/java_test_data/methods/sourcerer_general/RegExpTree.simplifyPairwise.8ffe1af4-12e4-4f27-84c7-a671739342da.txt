RegExpTree simplifyPairwise(RegExpTree before, RegExpTree after) {
    if (before instanceof Text && after instanceof Text) {
        return new Text(((Text) before).text + ((Text) after).text).simplify(flags);
    }
    // Fold adjacent repetitions.
    int beforeMin = 1, beforeMax = 1;
    RegExpTree beforeBody = before;
    boolean beforeGreedy = false;
    if (before instanceof Repetition) {
        Repetition r = (Repetition) before;
        beforeMin = r.min;
        beforeMax = r.max;
        beforeBody = r.body;
        beforeGreedy = r.greedy;
    }
    int afterMin = 1, afterMax = 1;
    RegExpTree afterBody = after;
    boolean afterGreedy = false;
    if (after instanceof Repetition) {
        Repetition r = (Repetition) after;
        afterMin = r.min;
        afterMax = r.max;
        afterBody = r.body;
        afterGreedy = r.greedy;
    }
    if (beforeBody.equals(afterBody) && !beforeBody.hasCapturingGroup()) {
        long lmin = ((long) beforeMin) + afterMin;
        long lmax = ((long) beforeMax) + afterMax;
        if (lmin < Integer.MAX_VALUE) {
            int min = (int) lmin;
            int max = lmax >= Integer.MAX_VALUE ? Integer.MAX_VALUE : (int) lmax;
            return new Repetition(beforeBody, min, max, beforeGreedy || afterGreedy || min == max);
        }
    }
    return null;
}
