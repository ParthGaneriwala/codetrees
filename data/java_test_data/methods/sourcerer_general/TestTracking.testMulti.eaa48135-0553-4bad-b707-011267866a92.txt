@Test
@DirtiesContext
public void testMulti() throws Exception {
    configureMinimalGame();
    beginHttpSession();
    beginHttpRequestAndOpenSessionInViewFilter();
    userTrackingService.pageAccess("Page 1");
    userTrackingService.onJavaScriptDetected();
    endHttpRequestAndOpenSessionInViewFilter();
    endHttpSession();
    beginHttpSession();
    beginHttpRequestAndOpenSessionInViewFilter();
    userTrackingService.pageAccess("Page 1");
    userTrackingService.onJavaScriptDetected();
    endHttpRequestAndOpenSessionInViewFilter();
    endHttpSession();
    beginHttpSession();
    beginHttpRequestAndOpenSessionInViewFilter();
    userTrackingService.pageAccess("Page 1");
    endHttpRequestAndOpenSessionInViewFilter();
    endHttpSession();
    // Verify
    beginHttpSession();
    beginHttpRequestAndOpenSessionInViewFilter();
    List<SessionOverviewDto> sessionOverviewDto = userTrackingService.getSessionOverviewDtos(UserTrackingFilter.newDefaultFilter());
    Assert.assertEquals(2, sessionOverviewDto.size());
    UserTrackingFilter userTrackingFilter = UserTrackingFilter.newDefaultFilter();
    userTrackingFilter.setJsEnabled(UserTrackingFilter.DISABLED);
    sessionOverviewDto = userTrackingService.getSessionOverviewDtos(userTrackingFilter);
    Assert.assertEquals(1, sessionOverviewDto.size());
    userTrackingFilter = UserTrackingFilter.newDefaultFilter();
    userTrackingFilter.setJsEnabled(UserTrackingFilter.BOTH);
    sessionOverviewDto = userTrackingService.getSessionOverviewDtos(userTrackingFilter);
    Assert.assertEquals(3, sessionOverviewDto.size());
    endHttpRequestAndOpenSessionInViewFilter();
    endHttpSession();
}
