public boolean analiseNode(Node n, String[] seq, int handicap) {
    String[] newSeq = new String[seq.length + 1];
    for (int s = 0; s < seq.length; ++s) {
        newSeq[s] = seq[s];
    }
    // Sequence of previews symbols plus the actual symbol
    newSeq[seq.length] = n.getSymbol();
    Instruction[] valid;
    if (n.isOper()) {
        valid = iTable.validOptions(newSeq);
        if (// Only sequence
        this.iArrSize(valid) == 1) {
            this.selectedI[this.selectedPoint] = iTable.iSearch(newSeq);
            this.levelSelection[this.selectedPoint] = n.getLevel() - handicap;
            ++this.selectedPoint;
            for (int c = 0; c < n.numberOfChilds(); ++c) {
                analiseNode(n.getChild(c));
            }
            return true;
        } else if (// More sequences
        this.iArrSize(valid) > 1) {
            if (// Both childs are vars
            n.getChild(0).isVar() && n.getChild(1).isVar()) {
                this.selectedI[this.selectedPoint] = this.iTable.iSearch(newSeq);
                this.levelSelection[this.selectedPoint] = n.getLevel() - handicap;
                ++this.selectedPoint;
                return true;
            } else if (// First child is var and second oper
            n.getChild(0).isVar() && n.getChild(1).isOper()) {
                if (analiseNode(n.getChild(1), newSeq, handicap + 1)) {
                    return true;
                } else {
                    this.selectedI[this.selectedPoint] = this.iTable.iSearch(newSeq);
                    this.levelSelection[this.selectedPoint] = n.getLevel() - handicap;
                    ++this.selectedPoint;
                    analiseNode(n.getChild(1));
                    return true;
                }
            } else if (// First child is oper
            n.getChild(0).isOper()) {
                if (// If first child has sequence
                analiseNode(n.getChild(0), newSeq, handicap + 1)) {
                    if (// If second child is an oper
                    n.getChild(1).isOper()) {
                        analiseNode(n.getChild(1));
                    }
                    return true;
                } else if (// If first child don't have a sequence
                n.getChild(1).isOper()) {
                    if (// If second child has a sequence
                    analiseNode(n.getChild(1), newSeq, handicap + 1)) {
                        analiseNode(n.getChild(0));
                        return true;
                    } else {
                        this.selectedI[this.selectedPoint] = this.iTable.iSearch(newSeq);
                        this.levelSelection[this.selectedPoint] = n.getLevel() - handicap;
                        ++this.selectedPoint;
                        analiseNode(n.getChild(0));
                        analiseNode(n.getChild(1));
                        return true;
                    }
                }
            } else {
                return false;
            }
        } else // Not valid
        {
            return false;
        }
    } else if (n.isVar()) {
        return false;
    }
    return false;
}
