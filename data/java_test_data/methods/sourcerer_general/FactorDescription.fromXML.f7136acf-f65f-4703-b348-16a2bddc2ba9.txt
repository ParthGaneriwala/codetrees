@SuppressWarnings("unchecked")
protected void fromXML(Element xmlnode) {
    // attributes are assumed to be processed during the construction
    if (isOvert()) {
        Element e = XMLUtils.getFirstElementByTagName(xmlnode, XML_WORD_TO_OVERT_FACTOR);
        if (e != null) {
            String classname = e.getTextContent();
            try {
                Class<? extends WordToOvertFactorInterface> c = (Class<? extends WordToOvertFactorInterface>) Class.forName(classname);
                try {
                    Constructor<? extends WordToOvertFactorInterface> constructor = c.getConstructor(Element.class);
                    wordToOvertFactor = constructor.newInstance(xmlnode);
                } catch (NoSuchMethodException e1) {
                // it's OK, not every factor must have this
                } catch (IllegalArgumentException e1) {
                    e1.printStackTrace();
                } catch (InvocationTargetException e1) {
                    e1.printStackTrace();
                }
                if (wordToOvertFactor == null) {
                    wordToOvertFactor = c.newInstance();
                }
            } catch (ClassNotFoundException e1) {
                e1.printStackTrace();
            } catch (InstantiationException e1) {
                e1.printStackTrace();
            } catch (IllegalAccessException e1) {
                e1.printStackTrace();
            }
        }
    }
    String bitsStr = xmlnode.getAttribute(XML_ATTR_BITS_NAME);
    if (!bitsStr.isEmpty()) {
        bits = Byte.parseByte(bitsStr);
    }
    NodeList dictList = XMLUtils.getChildrenElementsByTagName(xmlnode, Dictionary.XML_ELEMENT_NAME);
    if (dictList.getLength() == 0) {
        System.err.printf("factor %s: undefined dictionary\n", name);
        setDictionary(new Dictionary(2));
    } else if (parent == null) {
        Dictionary dict = Dictionary.createDictionary((Element) dictList.item(0));
        setDictionary(dict);
        if (bits == 0) {
            // compute the number of bits required to represent the dictionary
            int len = dict.size();
            while ((1 << bits) < len) ++bits;
        }
    } else {
        int longestDictionary = 0;
        int numSubdictionaries = dictList.getLength() + Dictionary.FIRST_NORMAL_VALUE;
        // 0-th element is for NULL
        dictionaries = new Vector<Dictionary>(numSubdictionaries);
        dictionaries.setSize(numSubdictionaries);
        setDictionary(0, new Dictionary(0));
        for (int i = 0; i < dictList.getLength(); ++i) {
            Element node = (Element) dictList.item(i);
            String parentVal = node.getAttributes().getNamedItem(Dictionary.XML_ATTR_PARENT_VAL_NAME).getNodeValue();
            Dictionary dict = Dictionary.createDictionary(node);
            setDictionary(parent.getDictionary().getId(parentVal), dict);
            if (longestDictionary < dict.size()) {
                longestDictionary = dict.size();
            }
        }
        if (bits == 0 && longestDictionary > 0) {
            // compute the number of bits required to represent all the dictionaries
            while ((1 << bits) < longestDictionary) ++bits;
        }
    }
}
