// $ANTLR start "caracter_"
public final gramaticaMM2Parser.caracter__return caracter_() throws RecognitionException {
    gramaticaMM2Parser.caracter__return retval = new gramaticaMM2Parser.caracter__return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token ASPA199 = null;
    Token set200 = null;
    Token ASPA201 = null;
    CommonTree ASPA199_tree = null;
    CommonTree set200_tree = null;
    CommonTree ASPA201_tree = null;
    try {
        // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:172:10: ( ASPA ( DIGIT_NULL | DIGIT | LETTER )? ASPA )
        // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:172:12: ASPA ( DIGIT_NULL | DIGIT | LETTER )? ASPA
        {
            root_0 = (CommonTree) adaptor.nil();
            ASPA199 = (Token) match(input, ASPA, FOLLOW_ASPA_in_caracter_1925);
            ASPA199_tree = (CommonTree) adaptor.create(ASPA199);
            adaptor.addChild(root_0, ASPA199_tree);
            // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:172:17: ( DIGIT_NULL | DIGIT | LETTER )?
            int alt39 = 2;
            int LA39_0 = input.LA(1);
            if ((LA39_0 == DIGIT_NULL || (LA39_0 >= DIGIT && LA39_0 <= LETTER))) {
                alt39 = 1;
            }
            switch(alt39) {
                case 1:
                    // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:
                    {
                        set200 = (Token) input.LT(1);
                        if (input.LA(1) == DIGIT_NULL || (input.LA(1) >= DIGIT && input.LA(1) <= LETTER)) {
                            input.consume();
                            adaptor.addChild(root_0, (CommonTree) adaptor.create(set200));
                            state.errorRecovery = false;
                        } else {
                            MismatchedSetException mse = new MismatchedSetException(null, input);
                            throw mse;
                        }
                    }
                    break;
            }
            ASPA201 = (Token) match(input, ASPA, FOLLOW_ASPA_in_caracter_1937);
            ASPA201_tree = (CommonTree) adaptor.create(ASPA201);
            adaptor.addChild(root_0, ASPA201_tree);
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
