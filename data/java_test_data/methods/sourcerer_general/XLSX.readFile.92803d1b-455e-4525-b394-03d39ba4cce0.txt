public ContactManager readFile(String filename) {
    // ContactManager conM = new ContactManager();
    ArrayList<Contact> contacts = new ArrayList<Contact>();
    try {
        XSSFWorkbook xwb = new XSSFWorkbook(filename);
        XSSFSheet sheet = xwb.getSheetAt(0);
        for (int i = sheet.getFirstRowNum() + 1; i <= sheet.getLastRowNum(); i++) {
            XSSFRow row = sheet.getRow(i);
            XSSFCell cell = null;
            cell = row.getCell(0);
            String name = cell.getStringCellValue();
            cell = row.getCell(1);
            String phoneNum = cell.getStringCellValue().replaceAll(" ", "");
            cell = row.getCell(2);
            String fixedTel = cell.getStringCellValue().replaceAll(" ", "");
            cell = row.getCell(3);
            String email = cell.getStringCellValue();
            cell = row.getCell(4);
            String qq = cell.getStringCellValue().replaceAll(" ", "");
            cell = row.getCell(5);
            String nick = cell.getStringCellValue();
            cell = row.getCell(6);
            String sexStr = cell.getStringCellValue();
            int sex = 0;
            if (sexStr.equalsIgnoreCase("M"))
                sex = 1;
            else if (sexStr.equalsIgnoreCase("F"))
                sex = 2;
            else
                ;
            cell = row.getCell(7);
            BirthDay birth = new BirthDay(cell.getStringCellValue());
            cell = row.getCell(8);
            String icon = cell.getStringCellValue();
            cell = row.getCell(9);
            String addr = cell.getStringCellValue();
            cell = row.getCell(10);
            String workplace = cell.getStringCellValue();
            cell = row.getCell(11);
            String zipCode = cell.getStringCellValue().replaceAll(" ", "");
            cell = row.getCell(12);
            String homePage = cell.getStringCellValue();
            String regex = "([^;]+);*";
            cell = row.getCell(13);
            String others = cell.getStringCellValue();
            ArrayList<String> otherWay = new ArrayList<String>();
            Pattern pattern = Pattern.compile(regex);
            Matcher matcher = pattern.matcher(others);
            while (matcher.find()) {
                String str = matcher.group(1);
                otherWay.add(str);
            }
            cell = row.getCell(14);
            String normals = cell.getStringCellValue();
            ArrayList<NormalTag> normal = new ArrayList<NormalTag>();
            matcher = pattern.matcher(normals);
            while (matcher.find()) {
                String str = matcher.group(1);
                normal.add(NormalTag.createNormalTag(str));
            }
            ArrayList<RelationTag> relation = null;
            Contact contact = Contact.createContact(name, phoneNum, fixedTel, email, qq, nick, sex, birth, icon, addr, workplace, zipCode, homePage, otherWay, normal, null);
            contacts.add(contact);
            cell = row.getCell(15);
            String relations = cell.getStringCellValue();
            regex = "(<([^;]+),([^;]+),([^;]+)>);*";
            pattern = Pattern.compile(regex);
            matcher = pattern.matcher(relations);
            while (matcher.find()) {
                String tag = matcher.group(2);
                String name1 = matcher.group(3);
                String name2 = matcher.group(4);
                RelationTag relationTag = RelationTag.createRelationTag(tag);
                ArrayList<Contact> B = new ArrayList<Contact>();
                for (int j = 0; j < contacts.size(); j++) {
                    if (contacts.get(j).getName().equals(name2))
                        B.add(contacts.get(j));
                }
                if (contact.getName().equals(name1)) {
                    for (int k = 0; k < B.size(); k++) {
                        ContactManager.addTagToContact(new Pair<Contact, Contact>(contact, B.get(k)), relationTag);
                    }
                }
            }
        /*
				 * System.out.print(name + "\t" + phoneNum + "\t" + fixedTel +
				 * "\t" + email + "\t" + qq + "\t" + nick + "\t" + sex + "\t" +
				 * birth + "\t" + icon + "\t" + addr + "\t" + workplace + "\t" +
				 * zipCode + "\t" + homePage + "\t" + otherWay + "\t" + normal +
				 * "\t" + relation + "\n");
				 */
        }
    } catch (Exception e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    }
    return new ContactManager(contacts);
}
