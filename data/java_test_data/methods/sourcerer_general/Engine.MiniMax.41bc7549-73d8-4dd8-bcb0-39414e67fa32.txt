static int MiniMax(int[][] board, int depth, int max_depth, int[] the_move, int turn, int[] counter, int white_best, int black_best) {
    int the_score = 0;
    int[][] new_board = new int[8][8];
    int best_score, chosen_score;
    int[] best_move = new int[4];
    // vector of 4x1 arrays
    Vector moves_list = new Vector();
    Thread.yield();
    // chosen_move is not set here
    if (depth == max_depth) {
        best_score = Evaluation(board);
        counter[0]++;
    } else {
        moves_list = Move.generate_moves(board, turn);
        best_score = which_turn(turn);
        switch(moves_list.size()) {
            case 0:
                counter[0]++;
                return best_score;
            case 1:
                if (depth == 0) {
                    // forced move: immediately return control
                    best_move = (int[]) moves_list.elementAt(0);
                    for (int k = 0; k < 4; k++) the_move[k] = best_move[k];
                    return 0;
                } else {
                    // extend search since there is a forcing move
                    // troquei de 1 para 0, 7 NAO, 3 NAO by Aguena
                    max_depth += 1;
                }
        }
        for (int i = 0; i < moves_list.size(); i++) {
            // board need not be touched
            new_board = copy_board(board);
            // returns new_board
            Move.move_board(new_board, (int[]) moves_list.elementAt(i));
            int[] temp = new int[4];
            the_score = MiniMax(new_board, depth + 1, max_depth, temp, opponent(turn), counter, white_best, black_best);
            if (turn == Checkers.BLACK && the_score > best_score) {
                best_move = (int[]) moves_list.elementAt(i);
                best_score = the_score;
                if (best_score > black_best) {
                    if (best_score >= white_best)
                        break;
                    else
                        /*  alpha_beta cutoff  */
                        // the_score
                        black_best = best_score;
                }
            } else if (turn == Checkers.WHITE && the_score < best_score) {
                best_move = (int[]) moves_list.elementAt(i);
                best_score = the_score;
                if (best_score < white_best) {
                    if (best_score <= black_best)
                        break;
                    else
                        /*  alpha_beta cutoff  */
                        // the_score
                        white_best = best_score;
                }
            }
        }
    // end for
    }
    // end else
    for (int k = 0; k < 4; k++) the_move[k] = best_move[k];
    return best_score;
}
