@Test
public void testSeek_GetCompound() throws ClassNotFoundException, SQLException {
    DatabaseTests.setupTestDatabase();
    DatabaseTests.populateDatabase();
    Connection conn = DatabaseTests.getNewConnection();
    Statement st = conn.createStatement();
    st.executeUpdate("INSERT INTO compounds VALUES(0, 6, NULL, 'smiles6', NULL, NULL, 'notes6');");
    st.executeUpdate("INSERT INTO compound_names VALUES(6, 'comp61')");
    st.executeUpdate("INSERT INTO compound_names VALUES(6, 'comp62')");
    st.close();
    conn.close();
    DBManager dbm = new DBManager();
    dbm.openDatabaseConnection();
    List<ColumnField> cols = dbm.getCompoundTableColumns();
    // Setup search filters
    SearchOption so1 = SearchOption.createSearchContains(cols.get(3), "smiles");
    SearchOption so2 = SearchOption.createSearchRange(cols.get(0), 2, 6);
    List<SearchOption> sos = new ArrayList<SearchOption>();
    sos.add(so1);
    sos.add(so2);
    // Perform search
    QueryReader rdr = dbm.searchCompounds(sos);
    assertTrue(rdr.getCompoundCount() == 5);
    // Check results
    rdr.seek(1);
    Compound comp = rdr.getCompound();
    assertTrue(comp.getGUID() == 2);
    assertTrue(comp.getOwnerID() == 2);
    assertTrue(comp.getNames().size() == 2);
    assertTrue(comp.getNames().get(0).equals("comp21"));
    assertTrue(comp.getNames().get(1).equals("comp22"));
    assertTrue(comp.getProperty("tags").equals("tags2"));
    rdr.seek(2);
    comp = rdr.getCompound();
    assertTrue(comp.getGUID() == 3);
    assertTrue(comp.getOwnerID() == 3);
    assertTrue(comp.getNames().size() == 1);
    assertTrue(comp.getNames().get(0).equals("comp31"));
    assertTrue(comp.getProperty("tags").equals("tags3"));
    rdr.seek(5);
    comp = rdr.getCompound();
    assertTrue(comp.getGUID() == 6);
    assertTrue(comp.getOwnerID() == 6);
    assertTrue(comp.getNames().size() == 2);
    assertTrue(comp.getNames().get(0).equals("comp61"));
    assertTrue(comp.getNames().get(1).equals("comp62"));
    assertTrue(comp.getProperty("tags") == null);
    assertTrue(comp.getProperty("smiles").equals("smiles6"));
    assertTrue(comp.getProperty("links") == null);
    assertTrue(comp.getProperty("notes").equals("notes6"));
    // Test throws IllegalArgument
    try {
        rdr.seek(0);
        fail("Should throw an exception when seeking 0");
    } catch (SQLException exc) {
    }
    dbm.closeDatabaseConnection();
}
