@Override
public void valueDispatched(OutPort source, Object value) {
    sync = BidirectionalHashMap.getInstance();
    if (InPort.class.isAssignableFrom(source.getRequestPort().getClass()) && sync.get(source.getRequestPort()) != null && GConnection.class.isAssignableFrom((sync.get(source.getRequestPort())).getClass())) {
        GHandleConnection g = (GHandleConnection) sync.get(source.getRequestPort());
        Graphical gi = g.getOutput();
        try {
            Thread.sleep(Constants.getHighlighttime());
            g.setHighlighted(true);
            gi.setHighlighted(true);
            gview.giveAttention();
            Thread.sleep(Constants.getHighlighttime());
            g.setHighlighted(false);
            gi.setHighlighted(false);
            gview.giveAttention();
            Thread.sleep(Constants.getHighlighttime());
            g.setHighlighted(true);
            gi.setHighlighted(true);
            gview.giveAttention();
            Thread.sleep(Constants.getHighlighttime());
            g.setHighlighted(false);
            gi.setHighlighted(false);
            gview.giveAttention();
            Thread.sleep(Constants.getHighlighttime());
            g.setHighlighted(true);
            gi.setHighlighted(true);
            gview.giveAttention();
            Thread.sleep(Constants.getHighlighttime());
            g.setHighlighted(false);
            gi.setHighlighted(false);
            gview.giveAttention();
            Thread.sleep(Constants.getPausetime());
        } catch (InterruptedException ex) {
            Logger.getLogger(HighLightTracker.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    debug.append("OutPort " + source + ": " + LabelReader.getInstance().getString("dispatched") + " " + value + "\n");
}
