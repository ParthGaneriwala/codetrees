public static ConstraintNode loadRedifinedConstraintNode(Rule r, String value, int checkType, String contextHandlerName, Hashtable params) {
    // CheckStatus | Compare
    String actionType = (String) params.get("ActionType");
    if (actionType.equals("CheckStatus")) {
        String targetRule = (String) params.get("TargetRule");
        String attributeToCheck = (String) params.get("AttributeToCheck");
        String expectedValue = (String) params.get("ExpectedValue");
        Activity act = r.getActivity();
        Rule target = act.getRuleByName(targetRule);
        int attribute = -1;
        if (attributeToCheck.equals("Valid")) {
            attribute = ActivityStatusHandler.VALID;
        } else if (attributeToCheck.equals("Disposed")) {
            attribute = ActivityStatusHandler.DISPOSED;
        } else if (attributeToCheck.equals("Active")) {
            attribute = ActivityStatusHandler.ACTIVE;
        }
        boolean expected = expectedValue.equalsIgnoreCase("true");
        return new CheckStatusConstraintNode(r, value, checkType, contextHandlerName, target, attribute, expected);
    } else if (actionType.equals("Compare")) {
        String targetRuleA = (String) params.get("TargetRuleA");
        String targetRuleB = (String) params.get("TargetRuleB");
        String attributeToCheck = (String) params.get("AttributeToCheck");
        // as a normal constrain
        String constraint = (String) params.get("Constraint");
        Activity act = r.getActivity();
        Rule targetA = act.getRuleByName(targetRuleA);
        Rule targetB = act.getRuleByName(targetRuleB);
        int attribute = -1;
        if (attributeToCheck.equals("Valid")) {
            attribute = ActivityStatusHandler.VALID;
        } else if (attributeToCheck.equals("Disposed")) {
            attribute = ActivityStatusHandler.DISPOSED;
        } else if (attributeToCheck.equals("Active")) {
            attribute = ActivityStatusHandler.ACTIVE;
        }
        int k = 0;
        if (constraint.equals("Equals")) {
            k = ConstraintNode.EQUALS;
        } else if (constraint.equals("NotEquals")) {
            k = ConstraintNode.NOT_EQUALS;
        } else if (constraint.equals("Greater")) {
            k = ConstraintNode.GREATER;
        } else if (constraint.equals("GreaterEqual")) {
            k = ConstraintNode.GREATER_EQUAL;
        } else if (constraint.equals("Lesser")) {
            k = ConstraintNode.LESSER;
        } else if (constraint.equals("LesserEqual")) {
            k = ConstraintNode.LESSER_EQUAL;
        }
        return new CompareRuleConstraintNode(r, value, checkType, contextHandlerName, targetA, targetB, attribute, k);
    } else {
        return null;
    }
// return new ConstraintNode(r,value,checkType,contextHandlerName);
}
