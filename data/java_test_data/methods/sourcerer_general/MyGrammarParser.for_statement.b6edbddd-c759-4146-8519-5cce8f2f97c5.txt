// $ANTLR start "for_statement"
public final MyGrammarParser.for_statement_return for_statement() throws RecognitionException {
    MyGrammarParser.for_statement_return retval = new MyGrammarParser.for_statement_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token FOR59 = null;
    Token IDENTIFIER60 = null;
    Token ASSIG61 = null;
    Token TO63 = null;
    Token BY65 = null;
    Token DO67 = null;
    Token END69 = null;
    MyGrammarParser.value_number_return value_number62 = null;
    MyGrammarParser.value_number_return value_number64 = null;
    MyGrammarParser.value_number_return value_number66 = null;
    MyGrammarParser.statement_sequence_return statement_sequence68 = null;
    CommonTree FOR59_tree = null;
    CommonTree IDENTIFIER60_tree = null;
    CommonTree ASSIG61_tree = null;
    CommonTree TO63_tree = null;
    CommonTree BY65_tree = null;
    CommonTree DO67_tree = null;
    CommonTree END69_tree = null;
    RewriteRuleTokenStream stream_ASSIG = new RewriteRuleTokenStream(adaptor, "token ASSIG");
    RewriteRuleTokenStream stream_FOR = new RewriteRuleTokenStream(adaptor, "token FOR");
    RewriteRuleTokenStream stream_BY = new RewriteRuleTokenStream(adaptor, "token BY");
    RewriteRuleTokenStream stream_DO = new RewriteRuleTokenStream(adaptor, "token DO");
    RewriteRuleTokenStream stream_TO = new RewriteRuleTokenStream(adaptor, "token TO");
    RewriteRuleTokenStream stream_END = new RewriteRuleTokenStream(adaptor, "token END");
    RewriteRuleTokenStream stream_IDENTIFIER = new RewriteRuleTokenStream(adaptor, "token IDENTIFIER");
    RewriteRuleSubtreeStream stream_value_number = new RewriteRuleSubtreeStream(adaptor, "rule value_number");
    RewriteRuleSubtreeStream stream_statement_sequence = new RewriteRuleSubtreeStream(adaptor, "rule statement_sequence");
    try {
        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:193:2: ( FOR IDENTIFIER ASSIG value_number TO value_number ( BY value_number )? DO statement_sequence END -> ^( FOR_STATEMENT IDENTIFIER value_number value_number ( value_number )? statement_sequence ) )
        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:193:4: FOR IDENTIFIER ASSIG value_number TO value_number ( BY value_number )? DO statement_sequence END
        {
            FOR59 = (Token) match(input, FOR, FOLLOW_FOR_in_for_statement1412);
            stream_FOR.add(FOR59);
            IDENTIFIER60 = (Token) match(input, IDENTIFIER, FOLLOW_IDENTIFIER_in_for_statement1414);
            stream_IDENTIFIER.add(IDENTIFIER60);
            ASSIG61 = (Token) match(input, ASSIG, FOLLOW_ASSIG_in_for_statement1416);
            stream_ASSIG.add(ASSIG61);
            pushFollow(FOLLOW_value_number_in_for_statement1418);
            value_number62 = value_number();
            state._fsp--;
            stream_value_number.add(value_number62.getTree());
            TO63 = (Token) match(input, TO, FOLLOW_TO_in_for_statement1421);
            stream_TO.add(TO63);
            pushFollow(FOLLOW_value_number_in_for_statement1423);
            value_number64 = value_number();
            state._fsp--;
            stream_value_number.add(value_number64.getTree());
            // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:194:2: ( BY value_number )?
            int alt12 = 2;
            int LA12_0 = input.LA(1);
            if ((LA12_0 == BY)) {
                alt12 = 1;
            }
            switch(alt12) {
                case 1:
                    // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:194:3: BY value_number
                    {
                        BY65 = (Token) match(input, BY, FOLLOW_BY_in_for_statement1427);
                        stream_BY.add(BY65);
                        pushFollow(FOLLOW_value_number_in_for_statement1429);
                        value_number66 = value_number();
                        state._fsp--;
                        stream_value_number.add(value_number66.getTree());
                    }
                    break;
            }
            DO67 = (Token) match(input, DO, FOLLOW_DO_in_for_statement1433);
            stream_DO.add(DO67);
            pushFollow(FOLLOW_statement_sequence_in_for_statement1436);
            statement_sequence68 = statement_sequence();
            state._fsp--;
            stream_statement_sequence.add(statement_sequence68.getTree());
            END69 = (Token) match(input, END, FOLLOW_END_in_for_statement1438);
            stream_END.add(END69);
            // AST REWRITE
            // elements: value_number, statement_sequence, IDENTIFIER, value_number, value_number
            // token labels:
            // rule labels: retval
            // token list labels:
            // rule list labels:
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", retval != null ? retval.tree : null);
            root_0 = (CommonTree) adaptor.nil();
            // 195:2: -> ^( FOR_STATEMENT IDENTIFIER value_number value_number ( value_number )? statement_sequence )
            {
                // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:195:5: ^( FOR_STATEMENT IDENTIFIER value_number value_number ( value_number )? statement_sequence )
                {
                    CommonTree root_1 = (CommonTree) adaptor.nil();
                    root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(FOR_STATEMENT, "FOR_STATEMENT"), root_1);
                    adaptor.addChild(root_1, stream_IDENTIFIER.nextNode());
                    adaptor.addChild(root_1, stream_value_number.nextTree());
                    adaptor.addChild(root_1, stream_value_number.nextTree());
                    // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:195:60: ( value_number )?
                    if (stream_value_number.hasNext()) {
                        adaptor.addChild(root_1, stream_value_number.nextTree());
                    }
                    stream_value_number.reset();
                    adaptor.addChild(root_1, stream_statement_sequence.nextTree());
                    adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
