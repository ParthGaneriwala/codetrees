private void save(XMLStreamWriter writer, DataRecord record, String recordId, Object object, PacketContext context) throws Exception {
    // Data record
    writer.writeCharacters("  ");
    writer.writeStartElement("dataRecord");
    writer.writeAttribute("name", record.getName());
    writer.writeAttribute("id", recordId);
    writer.writeCharacters(System.getProperty("line.separator"));
    // Data fields
    for (DataField thisField : record) {
        writer.writeCharacters("    ");
        writer.writeStartElement(thisField.getName());
        if (thisField.getValue() != null) {
            if (StringUtils.countLines(thisField.getValue()) > 1) {
                writer.writeCData(thisField.getValue());
            } else {
                writer.writeCharacters(thisField.getValue());
            }
        } else {
            writer.writeCharacters(DataRecord.NULL);
        }
        writer.writeEndElement();
        writer.writeCharacters(System.getProperty("line.separator"));
    }
    // If this is a file, stream it too
    if (object instanceof FileItem) {
        // Find the file in the filesystem
        File file = new File(context.getBaseFilePath() + DateUtils.getDatePath(record.getValueAsTimestamp("modified")) + record.getValue("filename"));
        if (!file.exists()) {
            LOG.error("File not found: " + file.getAbsolutePath());
        } else {
            // If there is a fileAttachment, then attach it as base64
            writer.writeCharacters("    ");
            writer.writeStartElement("fileAttachment");
            // Convert to base64 and append
            writer.writeCData(new String(Base64.encodeBase64(FileUtils.getBytesFromFile(file), true)));
            // Close the element
            writer.writeEndElement();
            writer.writeCharacters(System.getProperty("line.separator"));
        }
    }
    // Close the record
    writer.writeCharacters("  ");
    writer.writeEndElement();
    writer.writeCharacters(System.getProperty("line.separator"));
}
