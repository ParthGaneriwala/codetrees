@Test
public void testCleartkInitializationException() {
    CleartkInitializationException e;
    e = CleartkInitializationException.fileNotFound(new File("badger"));
    Assert.assertTrue(e.getMessage(), e.getMessage().contains("file"));
    Assert.assertTrue(e.getMessage(), e.getMessage().contains("badger"));
    e = CleartkInitializationException.invalidParameterValueSelectFrom("PARAM", Arrays.asList(42, 1), 0);
    Assert.assertTrue(e.getMessage(), e.getMessage().contains("one of"));
    Assert.assertTrue(e.getMessage(), e.getMessage().contains("42"));
    Assert.assertTrue(e.getMessage(), e.getMessage().contains("1"));
    Assert.assertTrue(e.getMessage(), e.getMessage().contains("0"));
    e = CleartkInitializationException.incompatibleTypeParameters(Arrays.asList(1, 2, 3), "E", int.class, new ArrayList<String>(), "E", String.class);
    Assert.assertTrue(e.getMessage(), e.getMessage().contains("incompatible"));
    Assert.assertTrue(e.getMessage(), e.getMessage().contains("E=" + int.class.getName()));
    Assert.assertTrue(e.getMessage(), e.getMessage().contains(ArrayList.class.getName()));
    Assert.assertTrue(e.getMessage(), e.getMessage().contains("E=" + String.class.getName()));
    e = CleartkInitializationException.incompatibleTypeParameters(Arrays.asList(1, 2, 3), "E", null, new ArrayList<String>(), "E", String.class);
    Assert.assertTrue(e.getMessage(), e.getMessage().contains("incompatible"));
    Assert.assertTrue(e.getMessage(), e.getMessage().contains("E=null"));
    Assert.assertTrue(e.getMessage(), e.getMessage().contains(ArrayList.class.getName()));
    Assert.assertTrue(e.getMessage(), e.getMessage().contains("E=" + String.class.getName()));
    e = CleartkInitializationException.incompatibleTypeParameterAndType(Arrays.asList(true, false), "TYPE", boolean.class, Object.class);
    Assert.assertTrue(e.getMessage(), e.getMessage().contains("incompatible"));
    Assert.assertTrue(e.getMessage(), e.getMessage().contains("TYPE=" + boolean.class.getName()));
    Assert.assertTrue(e.getMessage(), e.getMessage().contains("TYPE=" + Object.class.getName()));
    e = CleartkInitializationException.neitherParameterSet("x", 1, "y", 2);
    Assert.assertTrue(e.getMessage(), e.getMessage().contains("one of"));
    Assert.assertTrue(e.getMessage(), e.getMessage().contains("x=1"));
    Assert.assertTrue(e.getMessage(), e.getMessage().contains("y=2"));
    e = CleartkInitializationException.notExactlyOneParameterSet("x", 1, "y", 2);
    Assert.assertTrue(e.getMessage(), e.getMessage().contains("not both"));
    Assert.assertTrue(e.getMessage(), e.getMessage().contains("x=1"));
    Assert.assertTrue(e.getMessage(), e.getMessage().contains("y=2"));
    e = CleartkInitializationException.notSingleCharacter("Spam", "abc");
    Assert.assertTrue(e.getMessage(), e.getMessage().contains("single"));
    Assert.assertTrue(e.getMessage(), e.getMessage().contains("Spam"));
    Assert.assertTrue(e.getMessage(), e.getMessage().contains("abc"));
    e = CleartkInitializationException.parameterLessThan("badger", 1, 0);
    Assert.assertTrue(e.getMessage(), e.getMessage().contains("badger"));
    Assert.assertTrue(e.getMessage(), e.getMessage().contains("1"));
    Assert.assertTrue(e.getMessage(), e.getMessage().contains("0"));
}
