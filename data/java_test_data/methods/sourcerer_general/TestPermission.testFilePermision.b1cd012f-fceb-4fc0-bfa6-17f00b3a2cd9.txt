public void testFilePermision() throws Exception {
    Configuration conf = new Configuration();
    conf.setBoolean("dfs.permissions", true);
    MiniDFSCluster cluster = new MiniDFSCluster(conf, 3, true, null);
    cluster.waitActive();
    try {
        FileSystem nnfs = FileSystem.get(conf);
        // test permissions on files that do not exist
        assertFalse(nnfs.exists(CHILD_FILE1));
        try {
            nnfs.setOwner(CHILD_FILE1, "foo", "bar");
            assertTrue(false);
        } catch (java.io.FileNotFoundException e) {
            LOG.info("GOOD: got " + e);
        }
        try {
            nnfs.setPermission(CHILD_FILE1, new FsPermission((short) 0777));
            assertTrue(false);
        } catch (java.io.FileNotFoundException e) {
            LOG.info("GOOD: got " + e);
        }
        // following dir/file creations are legal
        nnfs.mkdirs(CHILD_DIR1);
        FSDataOutputStream out = nnfs.create(CHILD_FILE1);
        byte[] data = new byte[FILE_LEN];
        RAN.nextBytes(data);
        out.write(data);
        out.close();
        nnfs.setPermission(CHILD_FILE1, new FsPermission((short) 0700));
        // following read is legal
        byte[] dataIn = new byte[FILE_LEN];
        FSDataInputStream fin = nnfs.open(CHILD_FILE1);
        int bytesRead = fin.read(dataIn);
        assertTrue(bytesRead == FILE_LEN);
        for (int i = 0; i < FILE_LEN; i++) {
            assertEquals(data[i], dataIn[i]);
        }
        // //////////////////////////////////////////////////////////////
        // test illegal file/dir creation
        UnixUserGroupInformation userGroupInfo = new UnixUserGroupInformation(USER_NAME, GROUP_NAMES);
        UnixUserGroupInformation.saveToConf(conf, UnixUserGroupInformation.UGI_PROPERTY_NAME, userGroupInfo);
        FileSystem userfs = FileSystem.get(conf);
        // make sure mkdir of a existing directory that is not owned by
        // this user does not throw an exception.
        userfs.mkdirs(CHILD_DIR1);
        // illegal mkdir
        assertTrue(!canMkdirs(userfs, CHILD_DIR2));
        // illegal file creation
        assertTrue(!canCreate(userfs, CHILD_FILE2));
        // illegal file open
        assertTrue(!canOpen(userfs, CHILD_FILE1));
        nnfs.setPermission(ROOT_PATH, new FsPermission((short) 0755));
        nnfs.setPermission(CHILD_DIR1, new FsPermission((short) 0777));
        nnfs.setPermission(new Path("/"), new FsPermission((short) 0777));
        final Path RENAME_PATH = new Path("/foo/bar");
        userfs.mkdirs(RENAME_PATH);
        assertTrue(canRename(userfs, RENAME_PATH, CHILD_DIR1));
    } finally {
        if (cluster != null)
            cluster.shutdown();
    }
}
