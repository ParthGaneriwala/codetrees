public long recip128(long extra) {
    if ((this.exponent < 0 && this.mantissa != 0))
        return 0;
    if ((this.exponent < 0 && this.mantissa == 0)) {
        makeZero(sign);
        return 0;
    }
    if ((this.exponent == 0 && this.mantissa == 0)) {
        makeInfinity(sign);
        return 0;
    }
    byte s = sign;
    sign = 0;
    // Special case, simple power of 2
    if (mantissa == 0x4000000000000000L && extra == 0) {
        exponent = 0x80000000 - exponent;
        if (// Overflow
        exponent < 0)
            makeInfinity(s);
        return 0;
    }
    // Normalize exponent
    int exp = 0x40000000 - exponent;
    exponent = 0x40000000;
    // Save -A
    {
        recipTmp.mantissa = this.mantissa;
        recipTmp.exponent = this.exponent;
        recipTmp.sign = this.sign;
    }
    ;
    long recipTmpExtra = extra;
    recipTmp.neg();
    // First establish approximate result (actually 63 bit accurate)
    recip();
    // Perform one Newton-Raphson iteration
    // Xn+1 = Xn + Xn*(1-A*Xn)
    {
        recipTmp2.mantissa = this.mantissa;
        recipTmp2.exponent = this.exponent;
        recipTmp2.sign = this.sign;
    }
    ;
    extra = mul128(0, recipTmp, recipTmpExtra);
    extra = add128(extra, ONE, 0);
    extra = mul128(extra, recipTmp2, 0);
    extra = add128(extra, recipTmp2, 0);
    // Fix exponent
    scalbn(exp);
    // Fix sign
    if (!isNan())
        sign = s;
    return extra;
}
