private Vector<?> executeQuery(String query, DataType dataType) {
    Vector<Idea> fetchedIdea = null;
    Vector<Comment> fetchedComment = null;
    Vector<Account> fetchedAccount = null;
    Vector<Vote> fetchedVotes = null;
    Connection connection = null;
    Statement statement = null;
    ResultSet result = null;
    // Create only the dataType container that we will be using
    switch(dataType) {
        case Idea:
            fetchedIdea = new Vector<Idea>();
            break;
        case Comment:
            fetchedComment = new Vector<Comment>();
            break;
        case Account:
            fetchedAccount = new Vector<Account>();
            break;
        case Vote:
            fetchedVotes = new Vector<Vote>();
            break;
    }
    try {
        connection = connect();
        statement = connection.createStatement();
        result = statement.executeQuery(query);
        while (result.next()) {
            // Fill the dataType container with information from the query result
            switch(dataType) {
                case Idea:
                    fetchedIdea.add(new Idea(result.getInt("id"), result.getInt("authorId"), result.getBoolean("implemented"), unsanatize(result.getString("title")), unsanatize(result.getString("text")), result.getDate("date")));
                    break;
                case Comment:
                    fetchedComment.add(new Comment(result.getInt("id"), result.getInt("ideaId"), result.getInt("authorId"), unsanatize(result.getString("text")), result.getDate("date")));
                    break;
                case Account:
                    if (result.getBoolean("admin")) {
                        fetchedAccount.add(new Admin(result.getInt("id"), unsanatize(result.getString("userName")), unsanatize(result.getString("email")), unsanatize(result.getString("firstName")), unsanatize(result.getString("lastName"))));
                    } else {
                        fetchedAccount.add(new User(result.getInt("id"), unsanatize(result.getString("userName")), unsanatize(result.getString("email")), unsanatize(result.getString("firstName")), unsanatize(result.getString("lastName")), result.getInt("rewards")));
                    }
                    break;
                case Vote:
                    fetchedVotes.add(new Vote(result.getInt("ideaId"), result.getInt("userId")));
                    break;
            }
        }
    } catch (Exception ex) {
        Logger.getLogger(Database.class.getName()).log(Level.SEVERE, "Failed to get data type " + dataType.name() + " in executeQuery", ex);
    } finally {
        closeConnections(connection, statement, result);
    }
    // Return the dataType container
    switch(dataType) {
        case Idea:
            return fetchedIdea;
        case Comment:
            return fetchedComment;
        case Account:
            return fetchedAccount;
        case Vote:
            return fetchedVotes;
    }
    return new Vector<Object>();
}
