public static void main(String[] args) throws IOException, EvalError {
    doProcessOptions(GenericAcrfTui.class, args);
    Timing timing = new Timing();
    GenericAcrfData2TokenSequence basePipe;
    if (!numLabelsOption.wasInvoked()) {
        basePipe = new GenericAcrfData2TokenSequence();
    } else {
        basePipe = new GenericAcrfData2TokenSequence(numLabelsOption.value);
    }
    basePipe.setFeaturesIncludeToken(useTokenText.value);
    basePipe.setIncludeTokenText(useTokenText.value);
    Pipe pipe = new SerialPipes(new Pipe[] { basePipe, new TokenSequence2FeatureVectorSequence(true, true) });
    PipeInputIterator trainSource = new LineGroupIterator(new FileReader(trainFile.value), Pattern.compile("^\\s*$"), true);
    PipeInputIterator testSource;
    if (testFile.wasInvoked()) {
        testSource = new LineGroupIterator(new FileReader(testFile.value), Pattern.compile("^\\s*$"), true);
    } else {
        testSource = null;
    }
    InstanceList training = new InstanceList(pipe);
    training.add(trainSource);
    InstanceList testing = new InstanceList(pipe);
    testing.add(testSource);
    ACRF.Template[] tmpls = parseModelFile(templateFile.value);
    ACRFEvaluator eval = createEvaluator(evalOption.value);
    Inferencer inf = createInferencer(inferencerOption.value);
    Inferencer maxInf = createInferencer(maxInferencerOption.value);
    ACRF acrf = new ACRF(pipe, tmpls);
    acrf.setInferencer(inf);
    acrf.setViterbiInferencer(maxInf);
    ACRFTrainer trainer = new ACRFTrainer();
    trainer.train(acrf, training, null, testing, eval, 9999);
    timing.tick("Training");
    // modified
    FileUtils.writeGzippedObject(new File(outputFile.value), acrf);
    timing.tick("Serializing");
    System.out.println("Total time (ms) = " + timing.elapsedTime());
}
