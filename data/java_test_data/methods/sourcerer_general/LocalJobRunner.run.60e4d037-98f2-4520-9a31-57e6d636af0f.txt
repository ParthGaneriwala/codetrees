@Override
public void run() {
    try {
        // split input into minimum number of splits
        InputSplit[] splits;
        splits = job.getInputFormat().getSplits(job, 1);
        JobID jobId = profile.getJobID();
        int numReduceTasks = job.getNumReduceTasks();
        if (numReduceTasks > 1 || numReduceTasks < 0) {
            // we only allow 0 or 1 reducer in local mode
            numReduceTasks = 1;
            job.setNumReduceTasks(1);
        }
        JobContext jContext = new JobContext(conf);
        OutputCommitter outputCommitter = job.getOutputCommitter();
        outputCommitter.setupJob(jContext);
        status.setSetupProgress(1.0f);
        DataOutputBuffer buffer = new DataOutputBuffer();
        for (int i = 0; i < splits.length; i++) {
            TaskAttemptID mapId = new TaskAttemptID(new TaskID(jobId, true, i), 0);
            mapIds.add(mapId);
            buffer.reset();
            splits[i].write(buffer);
            BytesWritable split = new BytesWritable();
            split.set(buffer.getData(), 0, buffer.getLength());
            MapTask map = new MapTask(file.toString(), mapId, i, splits[i].getClass().getName(), split);
            JobConf localConf = new JobConf(job);
            map.setJobFile(localFile.toString());
            map.localizeConfiguration(localConf);
            map.setConf(localConf);
            map_tasks += 1;
            myMetrics.launchMap(mapId);
            map.run(localConf, this);
            myMetrics.completeMap(mapId);
            map_tasks -= 1;
            updateCounters(map);
        }
        TaskAttemptID reduceId = new TaskAttemptID(new TaskID(jobId, false, 0), 0);
        try {
            if (numReduceTasks > 0) {
                // move map output to reduce input
                for (int i = 0; i < mapIds.size(); i++) {
                    TaskAttemptID mapId = mapIds.get(i);
                    Path mapOut = this.mapoutputFile.getOutputFile(mapId);
                    Path reduceIn = this.mapoutputFile.getInputFileForWrite(mapId.getTaskID(), reduceId, localFs.getLength(mapOut));
                    if (!localFs.mkdirs(reduceIn.getParent())) {
                        throw new IOException("Mkdirs failed to create " + reduceIn.getParent().toString());
                    }
                    if (!localFs.rename(mapOut, reduceIn))
                        throw new IOException("Couldn't rename " + mapOut);
                }
                {
                    ReduceTask reduce = new ReduceTask(file.toString(), reduceId, 0, mapIds.size());
                    JobConf localConf = new JobConf(job);
                    reduce.setJobFile(localFile.toString());
                    reduce.localizeConfiguration(localConf);
                    reduce.setConf(localConf);
                    reduce_tasks += 1;
                    myMetrics.launchReduce(reduce.getTaskID());
                    reduce.run(localConf, this);
                    myMetrics.completeReduce(reduce.getTaskID());
                    reduce_tasks -= 1;
                    updateCounters(reduce);
                }
            }
        } finally {
            for (TaskAttemptID mapId : mapIds) {
                this.mapoutputFile.removeAll(mapId);
            }
            if (numReduceTasks == 1) {
                this.mapoutputFile.removeAll(reduceId);
            }
        }
        // delete the temporary directory in output directory
        outputCommitter.cleanupJob(jContext);
        status.setCleanupProgress(1.0f);
        this.status.setRunState(JobStatus.SUCCEEDED);
        JobEndNotifier.localRunnerNotification(job, status);
    } catch (Throwable t) {
        this.status.setRunState(JobStatus.FAILED);
        LOG.warn(id, t);
        JobEndNotifier.localRunnerNotification(job, status);
    } finally {
        try {
            // delete submit dir
            fs.delete(file.getParent(), true);
            // delete local copy
            localFs.delete(localFile, true);
        } catch (IOException e) {
            LOG.warn("Error cleaning up " + id + ": " + e);
        }
    }
}
