public void dealMessages(byte[] data) {
    ReaderManager rm = new ReaderManager();
    log.debug(LOGGER + "job started");
    if (data != null && data.length > 0) {
        String tag = StaticFactory.parseBuffer(data, data.length);
        String header = tag.substring(0, 2);
        if (!header.equals(Hopela2214Driver.HOPELA_RESP_HEADER)) {
            log.debug(LOGGER + "Header err");
            if (si.getReaderID().equals("test"))
                rm.addSysmsg(LOGGER + "Header err");
            else
                rm.addDatamsg(LOGGER + "Header err");
            return;
        }
        if (!Hopela2214Driver.tailCheck(tag)) {
            log.debug(LOGGER + "Check err");
            if (si.getReaderID().equals("test"))
                rm.addSysmsg(LOGGER + "Check err");
            else
                rm.addDatamsg(LOGGER + "Check err");
            return;
        }
        String ant = Hopela2214Driver.parseASCII2Char(tag.substring(2, 6));
        tag = Hopela2214Driver.parseASCII2Char(tag.substring(6, tag.length() - 4));
        String filter = si.getFilter();
        if (filter != null && filter.length() > 0) {
            if (filter.indexOf(",") >= 0) {
                if (!StaticFactory.isValid(filter, tag)) {
                    log.debug(LOGGER + "TAG [" + tag + "] is rejected. " + StaticFactory.getFormatTime(StaticFactory.TIME_FULL));
                    if (si.getReaderID().equals("test"))
                        rm.addSysmsg(LOGGER + "TAG [" + tag + "] is rejected. " + StaticFactory.getFormatTime(StaticFactory.TIME_FULL));
                    else
                        rm.addDatamsg(LOGGER + "TAG [" + tag + "] is rejected. " + StaticFactory.getFormatTime(StaticFactory.TIME_FULL));
                    return;
                }
            } else {
                try {
                    FilterInterface fi = (FilterInterface) Class.forName(filter).newInstance();
                    if (!fi.isValid(tag, 0, tag.length())) {
                        log.debug(LOGGER + "TAG [" + tag + "] is rejected. " + StaticFactory.getFormatTime(StaticFactory.TIME_FULL));
                        if (si.getReaderID().equals("test"))
                            rm.addSysmsg(LOGGER + "TAG [" + tag + "] is rejected. " + StaticFactory.getFormatTime(StaticFactory.TIME_FULL));
                        else
                            rm.addDatamsg(LOGGER + "TAG [" + tag + "] is rejected. " + StaticFactory.getFormatTime(StaticFactory.TIME_FULL));
                        return;
                    }
                } catch (Exception ex) {
                    log.debug(LOGGER + "Can not create filter engine:" + ex.getMessage());
                    if (si.getReaderID().equals("test"))
                        rm.addSysmsg(LOGGER + "Can not create filter engine:" + ex.getMessage());
                    else
                        rm.addDatamsg(LOGGER + "Can not create filter engine:" + ex.getMessage());
                }
            }
        }
        String timeFilter = si.getTimeFilter();
        if (StringUtils.isNotEmpty(timeFilter) && !"0".equals(timeFilter) && StringUtils.isNumeric(timeFilter)) {
            long t1 = Long.parseLong(timeFilter);
            if (TController.size() > 1000) {
                TController.clear();
                TController.put(tag, System.currentTimeMillis());
            } else {
                Long t = TController.get(tag);
                if (t != null && t > 0) {
                    if ((t + t1) >= System.currentTimeMillis()) {
                        return;
                    } else {
                        TController.remove(tag);
                        TController.put(tag, System.currentTimeMillis());
                    }
                } else {
                    TController.put(tag, System.currentTimeMillis());
                }
            }
        }
        log.debug(LOGGER + "TAG[" + tag + "]" + StaticFactory.getFormatTime(StaticFactory.TIME_FULL));
        if (si.getReaderID().equals("test"))
            rm.addSysmsg(LOGGER + "TAG[" + tag + "]" + StaticFactory.getFormatTime(StaticFactory.TIME_FULL));
        else
            rm.addDatamsg(LOGGER + "TAG[" + tag + "]" + StaticFactory.getFormatTime(StaticFactory.TIME_FULL));
        if (si.getChainID() != null && si.getChainID().length() > 0 && (!si.getReaderID().equals("test"))) {
            log.debug(LOGGER + "push chain message");
            rm.addChainMessage(si.getChainID(), ant, si.getReaderID(), tag, "", si.getUserDataType(), si.getChainName());
        }
    }
}
