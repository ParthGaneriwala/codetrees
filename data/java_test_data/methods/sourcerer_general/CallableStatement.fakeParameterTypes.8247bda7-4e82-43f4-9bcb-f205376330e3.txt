private void fakeParameterTypes(boolean isReallyProcedure) throws SQLException {
    Field[] fields = new Field[13];
    fields[0] = new Field("", "PROCEDURE_CAT", Types.CHAR, 0);
    fields[1] = new Field("", "PROCEDURE_SCHEM", Types.CHAR, 0);
    fields[2] = new Field("", "PROCEDURE_NAME", Types.CHAR, 0);
    fields[3] = new Field("", "COLUMN_NAME", Types.CHAR, 0);
    fields[4] = new Field("", "COLUMN_TYPE", Types.CHAR, 0);
    fields[5] = new Field("", "DATA_TYPE", Types.SMALLINT, 0);
    fields[6] = new Field("", "TYPE_NAME", Types.CHAR, 0);
    fields[7] = new Field("", "PRECISION", Types.INTEGER, 0);
    fields[8] = new Field("", "LENGTH", Types.INTEGER, 0);
    fields[9] = new Field("", "SCALE", Types.SMALLINT, 0);
    fields[10] = new Field("", "RADIX", Types.SMALLINT, 0);
    fields[11] = new Field("", "NULLABLE", Types.SMALLINT, 0);
    fields[12] = new Field("", "REMARKS", Types.CHAR, 0);
    String procName = isReallyProcedure ? extractProcedureName() : null;
    byte[] procNameAsBytes = null;
    try {
        procNameAsBytes = procName == null ? null : procName.getBytes("UTF-8");
    } catch (UnsupportedEncodingException ueEx) {
        procNameAsBytes = StringUtils.s2b(procName, this.connection);
    }
    ArrayList resultRows = new ArrayList();
    for (int i = 0; i < this.parameterCount; i++) {
        byte[][] row = new byte[13][];
        // PROCEDURE_CAT
        row[0] = null;
        // PROCEDURE_SCHEM
        row[1] = null;
        // PROCEDURE/NAME
        row[2] = procNameAsBytes;
        // COLUMN_NAME
        row[3] = StringUtils.s2b(String.valueOf(i), this.connection);
        row[4] = StringUtils.s2b(String.valueOf(DatabaseMetaData.procedureColumnIn), this.connection);
        row[5] = StringUtils.s2b(String.valueOf(Types.VARCHAR), // DATA_TYPE
        this.connection);
        // TYPE_NAME
        row[6] = StringUtils.s2b("VARCHAR", this.connection);
        // PRECISION
        row[7] = StringUtils.s2b(Integer.toString(65535), this.connection);
        // LENGTH
        row[8] = StringUtils.s2b(Integer.toString(65535), this.connection);
        // SCALE
        row[9] = StringUtils.s2b(Integer.toString(0), this.connection);
        // RADIX
        row[10] = StringUtils.s2b(Integer.toString(10), this.connection);
        row[11] = StringUtils.s2b(Integer.toString(DatabaseMetaData.procedureNullableUnknown), // nullable
        this.connection);
        row[12] = null;
        resultRows.add(new ByteArrayRow(row, getExceptionInterceptor()));
    }
    java.sql.ResultSet paramTypesRs = DatabaseMetaData.buildResultSet(fields, resultRows, this.connection);
    convertGetProcedureColumnsToInternalDescriptors(paramTypesRs);
}
