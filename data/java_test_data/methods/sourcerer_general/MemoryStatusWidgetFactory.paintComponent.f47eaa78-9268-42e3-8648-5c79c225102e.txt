// }}}
@Override
public void paintComponent(Graphics g) {
    // MemoryStatus.this.getBorder().getBorderInsets(this);
    Insets insets = new Insets(0, 0, 0, 0);
    Runtime runtime = Runtime.getRuntime();
    int freeMemory = (int) (runtime.freeMemory() >> 10);
    int totalMemory = (int) (runtime.totalMemory() >> 10);
    int usedMemory = totalMemory - freeMemory;
    int width = MemoryStatus.this.getWidth() - insets.left - insets.right;
    int height = MemoryStatus.this.getHeight() - insets.top - insets.bottom - 1;
    float fraction = ((float) usedMemory) / totalMemory;
    g.setColor(progressBackground);
    g.fillRect(insets.left, insets.top, (int) (width * fraction), height);
    String str = (usedMemory >> 10) + "/" + (totalMemory >> 10) + "Mb";
    FontRenderContext frc = new FontRenderContext(null, false, false);
    Rectangle2D bounds = g.getFont().getStringBounds(str, frc);
    Graphics g2 = g.create();
    g2.setClip(insets.left, insets.top, (int) (width * fraction), height);
    g2.setColor(progressForeground);
    g2.drawString(str, insets.left + ((int) (width - bounds.getWidth()) >> 1), (int) (insets.top + lm.getAscent()));
    g2.dispose();
    g2 = g.create();
    g2.setClip(insets.left + (int) (width * fraction), insets.top, MemoryStatus.this.getWidth() - insets.left - (int) (width * fraction), height);
    g2.setColor(MemoryStatus.this.getForeground());
    g2.drawString(str, insets.left + ((int) (width - bounds.getWidth()) >> 1), (int) (insets.top + lm.getAscent()));
    g2.dispose();
}
