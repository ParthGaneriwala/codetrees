@Override
protected void parse(String recordEntry, OutputCollector<Text, ChukwaRecord> output, Reporter reporter) {
    String logLevel = null;
    String className = null;
    String body = null;
    log.info("JobLogHistoryProcessor record: [" + recordEntry + "] type[" + chunk.getDataType() + "]");
    matcher.reset(recordEntry);
    if (matcher.matches()) {
        log.info("JobLogHistoryProcessor Matches");
        try {
            Date d = sdf.parse(matcher.group(1).trim());
            ChukwaRecord record = new ChukwaRecord();
            logLevel = matcher.group(2);
            className = matcher.group(3);
            body = matcher.group(4);
            key.set("" + d.getTime());
            record.add(Record.logLevelField, logLevel);
            record.add(Record.classField, className);
            int firstSep = body.indexOf(" ");
            String logEntryType = body.substring(0, firstSep);
            record.add(jobEntryTypeField, logEntryType);
            internalMatcher.reset(body.substring(firstSep));
            String fieldName = null;
            String fieldValue = null;
            while (internalMatcher.matches()) {
                fieldName = internalMatcher.group(1).trim();
                fieldValue = internalMatcher.group(2).trim();
                record.add(fieldName, fieldValue);
                log.info("JobLogHistoryProcessor Add field: [" + fieldName + "][" + fieldValue + "]");
                internalMatcher.reset(internalMatcher.group(3));
            }
            buildGenericRecord(record, body, d.getTime(), JobLogHistoryProcessor.recordType);
            output.collect(key, record);
            log.info("JobLogHistoryProcessor outputing a record ============>>>>>");
        } catch (IOException e) {
            e.printStackTrace();
        } catch (ParseException e) {
            e.printStackTrace();
        }
    }
}
