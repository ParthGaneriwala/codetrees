public void testJpegCreation() throws IOException {
    int minXAxisValue = 90;
    int maxXAxisValue = 1002;
    Track rgTrack = createRandomGenesTrack(minXAxisValue, maxXAxisValue);
    rgTrack.addHighlightRegion((maxXAxisValue - minXAxisValue) / 2, (maxXAxisValue - minXAxisValue) / 2);
    Track snpTrack = createSNPTrack(minXAxisValue, maxXAxisValue);
    snpTrack.addHighlightRegion((maxXAxisValue - minXAxisValue) / 2, (maxXAxisValue - minXAxisValue) / 2);
    String title = "JPEG+Map Example of Tracks";
    HTMLDoc htmlDoc = new HTMLDoc();
    HTML html = new HTML(title);
    htmlDoc.setRootNode(html);
    // html.getHead().addJavascript(CommonJS.generateBrowserDetectionJS());
    html.getHead().addJavascript(new TooltipJS().generateJS());
    // Add the CSS classes needed for popup menus
    html.getHead().addStyleTag(PopupMenuJS.generateCommonCSS());
    // Add the javascript needed for popup menus
    html.getHead().addJavascript(PopupMenuJS.generateCommonJavascript());
    Body body = html.getBody();
    body.br(2);
    Table table = body.addCenter().addTable().setWidth(rgTrack.getImageWidth());
    Th cell = table.addRow().addHeaderCell(title).setAlign(Align.CENTER);
    body.addSubtag(rgTrack.getJavascript());
    body.addSubtag(snpTrack.getJavascript());
    if (rgTrack.hasGenesOnStrand(Strand.FORWARD)) {
        File imageFile = new File(sOutputDir, "rgTrack_f.jpg");
        FileOutputStream fileStream = new FileOutputStream(imageFile);
        rgTrack.writeImageAsJpeg(fileStream, Strand.FORWARD);
        fileStream.close();
        String imageMapName = "rgTrackingMap_f";
        cell.addImage(imageFile.getName()).setUseMap("#" + imageMapName).setBorder(0);
        body.addSubtag(rgTrack.getImageMap(Strand.FORWARD).setName(imageMapName));
    }
    if (snpTrack.hasGenesOnStrand(Strand.FORWARD)) {
        File imageFile = new File(sOutputDir, "snpTrack_f.jpg");
        FileOutputStream fileStream = new FileOutputStream(imageFile);
        snpTrack.writeImageAsJpeg(fileStream, Strand.FORWARD);
        fileStream.close();
        String imageMapName = "snpTrackingMap_f";
        cell.addImage(imageFile.getName()).setUseMap("#" + imageMapName).setBorder(0);
        body.addSubtag(snpTrack.getImageMap(Strand.FORWARD).setName(imageMapName));
    }
    File xAxisImageFile = new File(sOutputDir, "xAxis.jpg");
    FileOutputStream fileStream = new FileOutputStream(xAxisImageFile);
    snpTrack.writeXAxisImageAsJpeg(fileStream);
    fileStream.close();
    cell.addImage(xAxisImageFile.getName()).setBorder(0);
    if (rgTrack.hasGenesOnStrand(Strand.REVERSE)) {
        File imageFile = new File(sOutputDir, "rgTrack_r.jpg");
        fileStream = new FileOutputStream(imageFile);
        rgTrack.writeImageAsJpeg(fileStream, Strand.REVERSE);
        fileStream.close();
        String imageMapName = "rgTrackingMap_r";
        cell.addImage(imageFile.getName()).setUseMap("#" + imageMapName).setBorder(0);
        body.addSubtag(rgTrack.getImageMap(Strand.REVERSE).setName(imageMapName));
    }
    if (snpTrack.hasGenesOnStrand(Strand.REVERSE)) {
        File imageFile = new File(sOutputDir, "snpTrack_r.jpg");
        fileStream = new FileOutputStream(imageFile);
        snpTrack.writeImageAsJpeg(fileStream, Strand.REVERSE);
        fileStream.close();
        String imageMapName = "snpTrackingMap_r";
        cell.addImage(imageFile.getName()).setUseMap("#" + imageMapName).setBorder(0);
        body.addSubtag(snpTrack.getImageMap(Strand.REVERSE).setName(imageMapName));
    }
    File htmlFile = new File(sOutputDir, "TrackTestJpg.html");
    htmlDoc.toHTML(new PrintWriter(new FileOutputStream(htmlFile)));
}
