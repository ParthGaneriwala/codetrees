@Override
protected void processPersonalTell(String name, String titles, String message, ChatType chatType) {
    super.processPersonalTell(name, titles, message, chatType);
    if (titles.equalsIgnoreCase("(C)") || titles.equalsIgnoreCase("(* C)")) {
    // nuthin
    } else {
        if (message.indexOf("manager") != -1) {
            if (name.equalsIgnoreCase("Tomato")) {
                myBB.autofeature(0);
            }
            if (name.equalsIgnoreCase("Flash")) {
                myBB.autofeature(1);
            }
            if (name.equalsIgnoreCase("Slomato")) {
                myBB.autofeature(2);
            }
            if (name.equalsIgnoreCase("Wildone")) {
                myBB.autofeature(3);
            }
            if (name.equalsIgnoreCase("Cooly")) {
                myBB.autofeature(4);
            }
            if (name.equalsIgnoreCase("LittlePer")) {
                myBB.autofeature(5);
            }
            if (name.equalsIgnoreCase("Ketchup")) {
                myBB.autofeature(7);
            }
            if (name.equalsIgnoreCase("Olive")) {
                myBB.autofeature(8);
            }
        }
        if (isAdmin(name)) {
            if (message.startsWith("spoof")) {
                sendLine(message);
            } else if (message.startsWith("file")) {
                String fileName = "";
                boolean idiot = false;
                try {
                    fileName = message.substring(5);
                } catch (StringIndexOutOfBoundsException e) {
                    tell(name, "You must provide a file name!");
                    idiot = true;
                }
                if (idiot) {
                // so stop
                } else {
                    try {
                        botNr = Integer.parseInt(fileName.substring(fileName.indexOf(" ")).trim(), 10);
                    } catch (StringIndexOutOfBoundsException f) {
                        tell(name, "You must provide a bot number!");
                    } catch (NumberFormatException e) {
                        tell(name, "NumberFormatException, got " + fileName + ".");
                    }
                    if ((botNr < 1) || (botNr > 5)) {
                        tell(name, "Invalid bot number: " + botNr + ".");
                    } else {
                        fileName = fileName.substring(0, fileName.indexOf(" "));
                        BufferedReader in = null;
                        try {
                            in = new BufferedReader(new InputStreamReader(new FileInputStream(fileName)));
                            int index = 0;
                            do {
                                playerToJoin[index] = in.readLine().trim();
                                index = index + 1;
                            } while (!(playerToJoin[index - 1].equalsIgnoreCase("breakFileHere")));
                            if (index < 3) {
                                tell(name, "Insufficient number of players!");
                            } else {
                                boolean problem = false;
                                for (int i = 0; i < index - 1; i++) {
                                    if (playerToJoin[i].length() > 15) {
                                        tell(name, "Player name in position " + i + ", " + playerToJoin[i] + " is longer than 15 chars. Terminated.");
                                        problem = true;
                                    }
                                    for (int j = 0; j < i; j++) {
                                        if (playerToJoin[i].equalsIgnoreCase(playerToJoin[j])) {
                                            tell(name, "Identical player name " + playerToJoin[i] + " in positions " + i + " and " + j + ". Terminated.");
                                            problem = true;
                                        }
                                    }
                                }
                                if (problem) {
                                // end
                                } else {
                                    tellChannel("Starting to upload a player list from file on request of " + name + ".");
                                    tell(name, "The following player list was found to be good:");
                                    for (int i = 0; i < index - 1; i++) {
                                        tell(name, "Player " + i + ": " + playerToJoin[i]);
                                    }
                                    tell(name, "Tell me 'nextJoin' to begin with the process.");
                                    joiningProcess = true;
                                    joiningNumber = 0;
                                    joiningStop = index - 1;
                                }
                            }
                        } catch (FileNotFoundException e) {
                            myBB.logException(e);
                            tell(name, "File " + fileName + " not found!");
                        } catch (IOException e) {
                            myBB.logException(e);
                            tell(name, "An IOException has happened while reading in player names!");
                        } finally {
                            FileHelper.closeQuietly(in);
                        }
                    }
                }
            } else if (message.equalsIgnoreCase("nextJoin")) {
                if (joiningProcess) {
                    if (joiningStop == joiningNumber) {
                        tell(name, "Finished! Continue now with {0}. Bye. :)", bettingBotName);
                        joiningProcess = false;
                        joiningNumber = 0;
                        joiningStop = 0;
                        botNr = 0;
                    } else {
                        tellBettingBot("addplayer " + botNr + " " + playerToJoin[joiningNumber]);
                        joiningNumber = joiningNumber + 1;
                    /* if BB doesnt receive this (for example busy) then it will mess up */
                    }
                } else {
                    tell(name, "Not applicable. Need a file first.");
                }
            } else if (message.startsWith("autoremove_start")) {
                if (isProgrammer(name)) {
                    int startWithID = 1;
                    try {
                        startWithID = Integer.parseInt(message.substring(17).trim(), 10);
                    } catch (NumberFormatException e) {
                        myBB.logException(e);
                        tellChannel("NumberFormatException occured.");
                        startWithID = 1;
                    }
                    tellChannel("Starting the automatic removal of obsolete handles. Patience please.");
                    autoRemovingPlayers = true;
                    int currentMaxID = myBB.getCurrentMaxID();
                    tellChannel("Starting with ID " + startWithID + ", checking 500 handles");
                    for (int i = startWithID; i < Math.min(startWithID + 500, currentMaxID); i++) {
                        sendLine("isregname " + myBB.getHandleFromList(i));
                    }
                    tellChannel("Done sending 500 isregname requests and spamming the BettingBot programmers with all the obsolete handles.");
                } else {
                    tell(name, "This command is reserved to programmers only.");
                }
            } else {
                tell(name, "Hi, Mr. Administrator, sir! I am running on version " + BBmaintest.versionNumber + " released " + BBmaintest.versionDate + ".");
            }
        } else {
            if (!name.equalsIgnoreCase(bettingBotName)) {
                tell(name, "Hi, {0}. I am just {1}''s helper. Please talk to {1} and look up \"help BettingBot\". See you.", name, bettingBotName);
            }
        }
    }
}
