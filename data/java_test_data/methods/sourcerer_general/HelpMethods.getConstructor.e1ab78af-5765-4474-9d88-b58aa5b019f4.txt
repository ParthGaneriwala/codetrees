public static Constructor getConstructor(Class cls, Object[] params) {
    Constructor ret = null;
    if (params == null) {
        params = new Object[0];
    }
    List res = new LinkedList();
    Constructor[] cons = cls.getConstructors();
    for (int n = 0; n < cons.length; n++) {
        Constructor con = cons[n];
        Class[] paramTypes = con.getParameterTypes();
        if (params.length == paramTypes.length) {
            // ����������ͬ
            StringBuilder inputParamTypeBuf = new StringBuilder(), methodParamTypeBuf = new StringBuilder();
            // ���첢�Ƚϲ������ͷ����Ƿ���ͬ
            int len = params.length;
            for (int i = 0; i < len; i++) {
                Object inputParamObj = params[i];
                if (inputParamObj != null) {
                    Class inputParamCls = inputParamObj.getClass();
                    boolean inputPrim = false;
                    if (inputParamObj instanceof Number) {
                        inputPrim = true;
                    } else if (inputParamObj instanceof Boolean) {
                        inputPrim = true;
                    }
                    boolean paramPrim = false;
                    if (isSubClass(paramTypes[i], Number.class)) {
                        paramPrim = true;
                    }
                    if (isSubClass(paramTypes[i], Boolean.class)) {
                        paramPrim = true;
                    }
                    boolean isPrimitiveType = inputPrim && (paramPrim || paramTypes[i].isPrimitive());
                    if (!isPrimitiveType) {
                        // ���ǻ�������
                        char chi = '*', chm = '&';
                        if (isSubClass(inputParamCls, paramTypes[i])) {
                            // ���������Ƿ������͵�������ƥ��
                            chm = chi;
                        }
                        inputParamTypeBuf.append(chi).append(' ');
                        methodParamTypeBuf.append(chm).append(' ');
                    } else {
                        // �Ƚϻ�������
                        String typeStr = getPrimitiveTypeStr(inputParamCls);
                        inputParamTypeBuf.append(typeStr).append(' ');
                        typeStr = getPrimitiveTypeStr(paramTypes[i]);
                        methodParamTypeBuf.append(typeStr).append(' ');
                    }
                }
            }
            if (inputParamTypeBuf.toString().equals(methodParamTypeBuf.toString())) {
                res.add(con);
            }
        }
    }
    if (res.size() == 0) {
        int len = params.length;
        StringBuilder inputParamTypeBuf = new StringBuilder();
        for (int i = 0; i < len; i++) {
            Object inputParamObj = params[i];
            if (inputParamObj != null) {
                inputParamTypeBuf.append(inputParamObj.getClass().getName()).append(' ');
            } else {
                inputParamTypeBuf.append("null ");
            }
        }
        throw new RuntimeException("����" + cls.getName() + " ���Ҳ������캯��(" + inputParamTypeBuf + ")");
    } else if (res.size() > 1) {
        throw new RuntimeException("����" + cls.getName() + " ���Ҳ������캯���������壨��ֹ��һ�����캯�����ϵ���ǩ����");
    } else {
        ret = (Constructor) res.get(0);
    }
    // System.out.println(ret.toGenericString());
    return ret;
}
