protected Time getTimeFast(int columnIndex, byte[] timeAsBytes, int offset, int length, Calendar targetCalendar, TimeZone tz, boolean rollForward, MySQLConnection conn, ResultSetImpl rs) throws SQLException {
    int hr = 0;
    int min = 0;
    int sec = 0;
    try {
        if (timeAsBytes == null) {
            return null;
        }
        boolean allZeroTime = true;
        boolean onlyTimePresent = false;
        for (int i = 0; i < length; i++) {
            if (timeAsBytes[offset + i] == ':') {
                onlyTimePresent = true;
                break;
            }
        }
        for (int i = 0; i < length; i++) {
            byte b = timeAsBytes[offset + i];
            if (b == ' ' || b == '-' || b == '/') {
                onlyTimePresent = false;
            }
            if (b != '0' && b != ' ' && b != ':' && b != '-' && b != '/' && b != '.') {
                allZeroTime = false;
                break;
            }
        }
        if (!onlyTimePresent && allZeroTime) {
            if (ConnectionPropertiesImpl.ZERO_DATETIME_BEHAVIOR_CONVERT_TO_NULL.equals(conn.getZeroDateTimeBehavior())) {
                return null;
            } else if (ConnectionPropertiesImpl.ZERO_DATETIME_BEHAVIOR_EXCEPTION.equals(conn.getZeroDateTimeBehavior())) {
                throw SQLError.createSQLException("Value '" + new String(timeAsBytes) + "' can not be represented as java.sql.Time", SQLError.SQL_STATE_ILLEGAL_ARGUMENT, this.exceptionInterceptor);
            }
            // represent, which is '00:00:00'
            return rs.fastTimeCreate(targetCalendar, 0, 0, 0);
        }
        Field timeColField = this.metadata[columnIndex];
        if (timeColField.getMysqlType() == MysqlDefs.FIELD_TYPE_TIMESTAMP) {
            switch(length) {
                case 19:
                    {
                        // YYYY-MM-DD hh:mm:ss
                        hr = StringUtils.getInt(timeAsBytes, offset + length - 8, offset + length - 6);
                        min = StringUtils.getInt(timeAsBytes, offset + length - 5, offset + length - 3);
                        sec = StringUtils.getInt(timeAsBytes, offset + length - 2, offset + length);
                    }
                    break;
                case 14:
                case 12:
                    {
                        hr = StringUtils.getInt(timeAsBytes, offset + length - 6, offset + length - 4);
                        min = StringUtils.getInt(timeAsBytes, offset + length - 4, offset + length - 2);
                        sec = StringUtils.getInt(timeAsBytes, offset + length - 2, offset + length);
                    }
                    break;
                case 10:
                    {
                        hr = StringUtils.getInt(timeAsBytes, offset + 6, offset + 8);
                        min = StringUtils.getInt(timeAsBytes, offset + 8, offset + 10);
                        sec = 0;
                    }
                    break;
                default:
                    throw SQLError.createSQLException(Messages.getString(// $NON-NLS-1$
                    "ResultSet.Timestamp_too_small_to_convert_to_Time_value_in_column__257") + (columnIndex + 1) + "(" + timeColField + ").", SQLError.SQL_STATE_ILLEGAL_ARGUMENT, this.exceptionInterceptor);
            }
            /* endswitch */
            SQLWarning precisionLost = new SQLWarning(Messages.getString(// $NON-NLS-1$
            "ResultSet.Precision_lost_converting_TIMESTAMP_to_Time_with_getTime()_on_column__261") + columnIndex + "(" + timeColField + ").");
        /*
				 * if (this.warningChain == null) { this.warningChain =
				 * precisionLost; } else {
				 * this.warningChain.setNextWarning(precisionLost); }
				 */
        } else if (timeColField.getMysqlType() == MysqlDefs.FIELD_TYPE_DATETIME) {
            hr = StringUtils.getInt(timeAsBytes, offset + 11, offset + 13);
            min = StringUtils.getInt(timeAsBytes, offset + 14, offset + 16);
            sec = StringUtils.getInt(timeAsBytes, offset + 17, offset + 19);
            SQLWarning precisionLost = new SQLWarning(Messages.getString(// $NON-NLS-1$
            "ResultSet.Precision_lost_converting_DATETIME_to_Time_with_getTime()_on_column__264") + (columnIndex + 1) + "(" + timeColField + ").");
        /*
				 * if (this.warningChain == null) { this.warningChain =
				 * precisionLost; } else {
				 * this.warningChain.setNextWarning(precisionLost); }
				 */
        } else if (timeColField.getMysqlType() == MysqlDefs.FIELD_TYPE_DATE) {
            // midnight on the
            return rs.fastTimeCreate(null, 0, 0, 0);
        // given
        // date
        } else {
            // convert a String to a Time
            if ((length != 5) && (length != 8)) {
                throw SQLError.createSQLException(Messages.getString(// $NON-NLS-1$
                "ResultSet.Bad_format_for_Time____267") + new String(timeAsBytes) + Messages.getString("ResultSet.___in_column__268") + (columnIndex + 1), SQLError.SQL_STATE_ILLEGAL_ARGUMENT, this.exceptionInterceptor);
            }
            hr = StringUtils.getInt(timeAsBytes, offset + 0, offset + 2);
            min = StringUtils.getInt(timeAsBytes, offset + 3, offset + 5);
            sec = (length == 5) ? 0 : StringUtils.getInt(timeAsBytes, offset + 6, offset + 8);
        }
        Calendar sessionCalendar = rs.getCalendarInstanceForSessionOrNew();
        if (!rs.useLegacyDatetimeCode) {
            return rs.fastTimeCreate(targetCalendar, hr, min, sec);
        }
        synchronized (sessionCalendar) {
            return TimeUtil.changeTimezone(conn, sessionCalendar, targetCalendar, rs.fastTimeCreate(sessionCalendar, hr, min, sec), conn.getServerTimezoneTZ(), tz, rollForward);
        }
    } catch (Exception ex) {
        SQLException sqlEx = SQLError.createSQLException(ex.toString(), SQLError.SQL_STATE_ILLEGAL_ARGUMENT, this.exceptionInterceptor);
        sqlEx.initCause(ex);
        throw sqlEx;
    }
}
