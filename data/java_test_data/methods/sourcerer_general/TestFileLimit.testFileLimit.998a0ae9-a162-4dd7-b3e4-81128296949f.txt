public void testFileLimit() throws IOException {
    Configuration conf = new Configuration();
    int maxObjects = 5;
    conf.setLong("dfs.max.objects", maxObjects);
    conf.setLong("dfs.blockreport.intervalMsec", 1000L);
    conf.setInt("dfs.heartbeat.interval", 1);
    int currentNodes = 0;
    if (simulatedStorage) {
        conf.setBoolean(SimulatedFSDataset.CONFIG_PROPERTY_SIMULATED, true);
    }
    MiniDFSCluster cluster = new MiniDFSCluster(conf, 1, true, null);
    FileSystem fs = cluster.getFileSystem();
    FSNamesystem namesys = FSNamesystem.fsNamesystemObject;
    NameNode namenode = cluster.getNameNode();
    try {
        // 
        // check that / exists
        // 
        Path path = new Path("/");
        assertTrue("/ should be a directory", fs.getFileStatus(path).isDir() == true);
        // root inode
        currentNodes = 1;
        // 
        for (int i = 0; i < maxObjects / 2; i++) {
            Path file = new Path("/filestatus" + i);
            createFile(fs, file);
            System.out.println("Created file " + file);
            // two more objects for this creation.
            currentNodes += 2;
        }
        // verify that creating another file fails
        boolean hitException = false;
        try {
            Path file = new Path("/filestatus");
            createFile(fs, file);
            System.out.println("Created file " + file);
        } catch (IOException e) {
            hitException = true;
        }
        assertTrue("Was able to exceed file limit", hitException);
        // delete one file
        Path file0 = new Path("/filestatus0");
        fs.delete(file0, true);
        System.out.println("Deleted file " + file0);
        currentNodes -= 2;
        // wait for number of blocks to decrease
        waitForLimit(namesys, currentNodes);
        // now, we shud be able to create a new file
        createFile(fs, file0);
        System.out.println("Created file " + file0 + " again.");
        currentNodes += 2;
        // delete the file again
        file0 = new Path("/filestatus0");
        fs.delete(file0, true);
        System.out.println("Deleted file " + file0 + " again.");
        currentNodes -= 2;
        // wait for number of blocks to decrease
        waitForLimit(namesys, currentNodes);
        // create two directories in place of the file that we deleted
        Path dir = new Path("/dir0/dir1");
        fs.mkdirs(dir);
        System.out.println("Created directories " + dir);
        currentNodes += 2;
        waitForLimit(namesys, currentNodes);
        // verify that creating another directory fails
        hitException = false;
        try {
            fs.mkdirs(new Path("dir.fail"));
            System.out.println("Created directory should not have succeeded.");
        } catch (IOException e) {
            hitException = true;
        }
        assertTrue("Was able to exceed dir limit", hitException);
    } finally {
        fs.close();
        cluster.shutdown();
    }
}
