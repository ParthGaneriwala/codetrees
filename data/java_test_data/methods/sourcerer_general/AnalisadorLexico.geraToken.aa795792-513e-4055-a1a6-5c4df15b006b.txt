public String[] geraToken() throws Exception {
    // vai receber os valores de leChar()
    Character caractere;
    // vai receber o valor de caractere, quando este n�o for nulo
    char chrBuffer = '\0';
    // Consome caracteres at� atingir um que seja relevante
    try {
        caractere = pegaCharUtil();
    } catch (// Fonte inexistente...
    NullPointerException exc) {
        String[] token = { "TO_ER", "1" };
        escreveToken(token);
        return token;
    }
    if (// Se for EOF...
    caractere == null) {
        String[] token = { "TO_EO", "" };
        escreveToken(token);
        return token;
    } else if (// Se for letra
    eLetra(chrBuffer = caractere.charValue())) {
        String[] token = analisaIdentificador(chrBuffer);
        escreveToken(token);
        return token;
    } else if (// Se for d�gito
    eDigito(chrBuffer)) {
        String[] token = analisaNumero(chrBuffer);
        escreveToken(token);
        return token;
    } else if (// Se for operador
    mapOperadores.containsKey(String.valueOf(chrBuffer))) {
        String[] token = { "", "" };
        try {
            token = analisaOperador(chrBuffer);
        } catch (Exception exc) {
            if (exc.getMessage().compareTo("ComNAberto") == 0) {
                token[0] = "TO_ER";
                token[1] = "3";
            } else
                throw exc;
        }
        escreveToken(token);
        return token;
    } else if (// Se for coment�rio
    chrBuffer == '|') {
        try {
            comeComentario();
            return geraToken();
        } catch (Exception exc) {
            String[] token = { "TO_ER", "" };
            if (exc.getMessage().compareTo("ComNAberto") == 0) {
                token[1] = "3";
            } else if (exc.getMessage().compareTo("ComNFechado") == 0) {
                token[1] = "2";
            } else
                throw exc;
            escreveToken(token);
            return token;
        }
    } else // Se for Caractere/Identificador inv�lido
    {
        String[] token = { "TO_ER", "" };
        token[1] = (comePalavra() == 0) ? "4" : "5";
        escreveToken(token);
        return token;
    }
}
