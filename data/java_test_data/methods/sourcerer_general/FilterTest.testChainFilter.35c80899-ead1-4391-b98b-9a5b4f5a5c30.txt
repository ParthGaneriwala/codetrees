@Test
public void testChainFilter() throws Exception {
    JSONWriter writer = new JSONWriter();
    List<HashMap> filterList = new ArrayList<HashMap>();
    HashMap<String, Object> commentedByDanMap = new HashMap<String, Object>();
    commentedByDanMap.put("author_post_id", "=1");
    commentedByDanMap.put("type", "='comment'");
    commentedByDanMap.put("output", "refers_to_id");
    commentedByDanMap.put("used_as", "id");
    HashMap<String, Object> commentedByErwinMap = new HashMap<String, Object>();
    commentedByErwinMap.put("author_post_id", "=3");
    commentedByErwinMap.put("type", "='comment'");
    commentedByErwinMap.put("output", "refers_to_id");
    commentedByErwinMap.put("used_as", "id");
    commentedByErwinMap.put("parents", new Map[] { commentedByDanMap });
    HashMap<String, Object> createdByMap = new HashMap<String, Object>();
    // Dan's id
    createdByMap.put("author_post_id", "= 1");
    createdByMap.put("created_at", "> {ts '2007-5-28 00:00:00'}");
    createdByMap.put("output", "id");
    createdByMap.put("used_as", "id");
    createdByMap.put("parents", new Map[] { commentedByErwinMap });
    filterList.add(createdByMap);
    String jsonString = writer.write(filterList);
    Filter filter = new Filter(jsonString);
    Collection<IPost> posts = repository.getPosts(filter);
    Map<Integer, IPost> expectedResult = new HashMap<Integer, IPost>();
    Post post1 = new Post(7, 1, 0, "message", "UCSD fees are way to high!", null);
    expectedResult.put(post1.getId(), post1);
    Assert.assertEquals("Unexpected number of posts returned.", expectedResult.size(), posts.size());
    for (IPost post : posts) {
        IPost expectedPost = expectedResult.get(post.getId());
        Assert.assertNotNull("Received unexpected post id = " + post.getId(), expectedPost);
        Assert.assertEquals("content did not match.", expectedPost.getContent(), post.getContent());
        Assert.assertEquals("refersToId did not match.", expectedPost.getRefersToId(), post.getRefersToId());
        Assert.assertEquals("type did not match.", expectedPost.getType(), post.getType());
        Assert.assertEquals("authorPostId did not match.", expectedPost.getAuthorPostId(), post.getAuthorPostId());
    }
}
