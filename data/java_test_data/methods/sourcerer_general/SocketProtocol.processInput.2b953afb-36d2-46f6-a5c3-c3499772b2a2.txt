public String processInput(String theInput) {
    // System.out.println("theInput " + theInput);
    SocketCommand socketCmd = null;
    String theOutput = null;
    if (theInput != null) {
        socketCmd = new SocketCommand(theInput);
    } else {
        theOutput = WAITING_STR;
    }
    if (socketCmd == null) {
        return SocketCommand.ACTION_CLOSE;
    }
    theOutput = SocketCommand.toHeader(12) + socketCmd.getAction() + SocketCommand.RETURN_UNKNOWN_ERROR + socketCmd.getCheckCode();
    if (0 == DogStaticValue.hasDog) {
        theOutput = SocketCommand.toHeader(12) + socketCmd.getAction() + SocketCommand.RETURN_KEY_DOG_ERROR + socketCmd.getCheckCode();
        return theOutput;
    }
    if (socketCmd.getAction().toUpperCase().equals(SocketCommand.ACTION_CONNECTION)) {
        theOutput = SocketCommand.toHeader(12) + socketCmd.getAction() + SocketCommand.ACTION_CONNECTION + socketCmd.getCheckCode();
    } else if (socketCmd.getAction().toUpperCase().equals(SocketCommand.ACTION_CLOSE)) {
        theOutput = SocketCommand.ACTION_CLOSE;
    } else if (socketCmd.getAction().toUpperCase().equals(SocketCommand.ACTION_LIST_CHAIN)) {
        List<ChainBean> chainList = new ArrayList<ChainBean>();
        try {
            ChainManager chainManager = (ChainManager) SpringUtil.getBean("chainManager");
            List chains = chainManager.getChains();
            if (chains != null) {
                for (int i = 0; chains.size() > i; i++) {
                    Chain chain = (Chain) chains.get(i);
                    ChainBean map = new ChainBean();
                    map.setChainsID(chain.getChainId().toString());
                    map.setChainsName(chain.getName());
                    chainList.add(map);
                }
            }
        } catch (Exception e) {
            theOutput = SocketCommand.toHeader(12) + socketCmd.getAction() + SocketCommand.RETURN_UNKNOWN_ERROR + socketCmd.getCheckCode();
            return theOutput;
        }
        theOutput = SocketCommand.ACTION_CLOSE;
    } else if (socketCmd.getAction().toUpperCase().equals(SocketCommand.ACTION_RUN_CHAIN)) {
        String para = socketCmd.getContext();
        String[] paras = para.split(";");
        if (paras == null && paras.length != 6) {
            theOutput = SocketCommand.toHeader(12) + socketCmd.getAction() + SocketCommand.RETURN_PARA_ERROR + socketCmd.getCheckCode();
        } else {
            try {
                ChainInvoke invoke = (ChainInvoke) SpringUtil.getBean("socketChainInvoke");
                String ip = getIp();
                String chainName = paras[0];
                String readerid = paras[1];
                String antenaid = paras[2];
                String uniqueid = paras[3];
                String userdata = paras[4];
                String userdataType = paras[5];
                String i = invoke.startChain(ip, chainName, readerid, antenaid, uniqueid, userdata, userdataType);
                if (i == "0") {
                    theOutput = SocketCommand.toHeader(12) + socketCmd.getAction() + SocketCommand.RETURN_SUCESSFUL + socketCmd.getCheckCode();
                } else {
                    theOutput = SocketCommand.toHeader(12) + socketCmd.getAction() + SocketCommand.RETURN_UNKNOWN_ERROR + socketCmd.getCheckCode();
                }
            } catch (Exception e) {
                theOutput = SocketCommand.toHeader(12) + socketCmd.getAction() + SocketCommand.RETURN_UNKNOWN_ERROR + socketCmd.getCheckCode();
            }
        }
    } else {
        theOutput = SocketCommand.ACTION_CLOSE;
    }
    return theOutput;
}
