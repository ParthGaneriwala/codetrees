private void createGUI() {
    selection = new JList(options);
    selection.setName(SELECTION_LIST);
    selection.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    selection.setSelectedIndex(choice);
    // Create listview
    scrollPane = new JScrollPane(selection);
    setLayout(new BorderLayout());
    add(scrollPane, BorderLayout.CENTER);
    // Create OK Cancel Buttons
    JPanel panel = new JPanel(new GridBagLayout());
    select = new JButton(selectAction);
    select.setName(SELECT_BUTTON);
    cancel = new JButton(cancelAction);
    cancel.setName(CANCEL_BUTTON);
    // OK and cancel buttons
    if (cancelAllowed) {
        panel.add(select, new GridBagConstraints(0, 0, 1, 1, 0.5, 0, GridBagConstraints.CENTER, GridBagConstraints.HORIZONTAL, new Insets(0, 2, 0, 2), 0, 0));
        panel.add(cancel, new GridBagConstraints(1, 0, 1, 1, 0.5, 0, GridBagConstraints.CENTER, GridBagConstraints.HORIZONTAL, new Insets(0, 2, 0, 2), 0, 0));
        add(panel, BorderLayout.SOUTH);
    } else {
        panel.add(select, new GridBagConstraints(0, 0, 1, 1, 1.0, 0, GridBagConstraints.CENTER, GridBagConstraints.HORIZONTAL, new Insets(0, 2, 0, 2), 0, 0));
        add(panel, BorderLayout.SOUTH);
    }
    MouseListener mouseListener = new MouseAdapter() {

        @Override
        public void mouseClicked(MouseEvent e) {
            if (e.getClickCount() > 1) {
                int index = selection.locationToIndex(e.getPoint());
                setCurrentChoice(index);
                dialogOk = true;
                dialog.setVisible(false);
            }
        }

        @Override
        public void mouseEntered(MouseEvent e) {
            setToolTipFor(e.getPoint());
        }

        @Override
        public void mouseMoved(MouseEvent arg0) {
            setToolTipFor(arg0.getPoint());
        }

        @Override
        public void mouseExited(MouseEvent e) {
            setToolTipFor(null);
        }
    };
    selection.addMouseMotionListener(new MouseMotionListener() {

        public void mouseDragged(MouseEvent e) {
        // TODO Auto-generated method stub
        }

        public void mouseMoved(MouseEvent e) {
            setToolTipFor(e.getPoint());
        }
    });
    selection.addMouseListener(mouseListener);
    selectAction.setEnabled(false);
    selection.addListSelectionListener(new ListSelectionListener() {

        public void valueChanged(ListSelectionEvent e) {
            selectAction.setEnabled(selection.getSelectedIndex() != -1);
        }
    });
// Set size of dialog
}
