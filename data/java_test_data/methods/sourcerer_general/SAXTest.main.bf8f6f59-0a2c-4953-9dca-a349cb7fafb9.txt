// //////////////////////////////////////////////////////////////////
// Main app.
// //////////////////////////////////////////////////////////////////
public static void main(String[] args) {
    System.out.println("************************************" + "************************************");
    System.out.println("* Testing SAX2");
    System.out.println("************************************" + "************************************");
    System.out.print("\n");
    // 
    // Figure out the XML reader
    // 
    // String driverName =
    // System.getProperty("org.xml.sax.driver",
    // "org.apache.xerces.parsers.SAXParser");
    String driverName = "org.htmlparser.sax.XMLReader";
    System.out.println("SAX driver class: " + driverName + "\n  (you can specify a different one using the " + "org.xml.sax.driver property)");
    System.out.print("\n");
    // 
    // Create the XML reader
    // 
    System.out.println("Now, we'll try to create an instance of the " + "driver, using XMLReaderFactory");
    XMLReader reader = null;
    try {
        reader = XMLReaderFactory.createXMLReader(driverName);
    } catch (SAXException e) {
        System.out.println("Failed to create XMLReader: " + e.getMessage() + "\nMake sure that the class actually " + "exists and is present on your CLASSPATH" + "\nor specify a different class using the " + "org.xml.sax.driver property");
        System.exit(1);
    }
    System.out.println("XMLReader created successfully\n");
    // 
    // Check features.
    // 
    System.out.println("Checking defaults for some well-known features:");
    checkFeature(reader, "http://xml.org/sax/features/namespaces");
    checkFeature(reader, "http://xml.org/sax/features/namespace-prefixes");
    checkFeature(reader, "http://xml.org/sax/features/string-interning");
    checkFeature(reader, "http://xml.org/sax/features/validation");
    checkFeature(reader, "http://xml.org/sax/features/external-general-entities");
    checkFeature(reader, "http://xml.org/sax/features/external-parameter-entities");
    System.out.print("\n");
    // 
    // Assign handlers.
    // 
    System.out.println("Creating and assigning handlers\n");
    SAXTest handler = new SAXTest();
    reader.setContentHandler(handler);
    reader.setErrorHandler(handler);
    // 
    if (args.length > 0) {
        for (int i = 0; i < args.length; i++) {
            String systemId = makeAbsoluteURL(args[i]);
            System.out.println("Trying file " + systemId);
            try {
                reader.parse(systemId);
            } catch (SAXException e1) {
                System.out.println(systemId + " failed with XML error: " + e1.getMessage());
            } catch (IOException e2) {
                System.out.println(systemId + " failed with I/O error: " + e2.getMessage());
            }
            System.out.print("\n");
        }
    } else {
        System.out.println("No documents supplied on command line; " + "parsing skipped.");
    }
    // 
    // Done.
    // 
    System.out.println("SAX2 test finished.");
}
