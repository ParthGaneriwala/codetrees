protected void init() {
    setWriterVisitorFactory(createWriterVisitorFactory());
    registerWriter(PROCESS_CLASS, TAG_PROCESS);
    registerWriter(ACTIVITY_ASSIGN_CLASS, TAG_ASSIGN);
    registerWriter(ACTIVITY_COMPENSATE_CLASS, TAG_COMPENSATE);
    registerWriter(ACTIVITY_COMPENSATE_SCOPE_CLASS, TAG_COMPENSATE);
    registerWriter(ACTIVITY_EMPTY_CLASS, TAG_EMPTY);
    registerWriter(ACTIVITY_FLOW_CLASS, TAG_FLOW);
    registerWriter(ACTIVITY_INVOKE_CLASS, TAG_INVOKE);
    registerWriter(ACTIVITY_PICK_CLASS, TAG_PICK);
    registerWriter(ACTIVITY_RECEIVE_CLASS, TAG_RECEIVE);
    registerWriter(ACTIVITY_REPLY_CLASS, TAG_REPLY);
    registerWriter(ACTIVITY_SCOPE_CLASS, TAG_SCOPE);
    registerWriter(ACTIVITY_SEQUENCE_CLASS, TAG_SEQUENCE);
    registerWriter(ACTIVITY_IF_CLASS, TAG_SWITCH);
    registerWriter(ACTIVITY_TERMINATE_CLASS, TAG_TERMINATE);
    registerWriter(ACTIVITY_THROW_CLASS, TAG_THROW);
    registerWriter(ACTIVITY_WAIT_CLASS, TAG_WAIT);
    registerWriter(ACTIVITY_WHILE_CLASS, TAG_WHILE);
    registerWriter(ACTIVITY_CONTINUE_CLASS, createWriter(IAeBPELConstants.AE_EXTENSION_NAMESPACE_URI_ACTIVITY, TAG_CONTINUE));
    registerWriter(ACTIVITY_BREAK_CLASS, createWriter(IAeBPELConstants.AE_EXTENSION_NAMESPACE_URI_ACTIVITY, TAG_BREAK));
    registerWriter(ACTIVITY_FOREACH_CLASS, createWriter(IAeBPELConstants.AE_EXTENSION_NAMESPACE_URI_ACTIVITY, TAG_FOREACH));
    registerWriter(ACTIVITY_SUSPEND_CLASS, createWriter(IAeBPELConstants.AE_EXTENSION_NAMESPACE_URI_ACTIVITY, TAG_SUSPEND));
    registerWriter(IF_CLASS, TAG_CASE);
    registerWriter(ELSEIF_CLASS, TAG_CASE);
    registerWriter(ELSE_CLASS, TAG_OTHERWISE);
    registerWriter(LINK_CLASS, TAG_LINK);
    registerWriter(TARGET_CLASS, TAG_TARGET);
    registerWriter(SOURCE_CLASS, TAG_SOURCE);
    registerWriter(MESSAGE_EXCHANGES_CLASS, createWriter(IAeBPELConstants.ABX_2_0_NAMESPACE_URI, TAG_MESSAGE_EXCHANGES));
    registerWriter(MESSAGE_EXCHANGE_CLASS, createWriter(IAeBPELConstants.ABX_2_0_NAMESPACE_URI, TAG_MESSAGE_EXCHANGE));
    registerWriter(ACTIVITY_FOREACH_COMPLETION_CONDITION, createWriter(IAeBPELConstants.AE_EXTENSION_NAMESPACE_URI_ACTIVITY, TAG_FOREACH_COMPLETION_CONDITION));
    registerWriter(ACTIVITY_FOREACH_BRANCHES, createWriter(IAeBPELConstants.AE_EXTENSION_NAMESPACE_URI_ACTIVITY, TAG_FOREACH_BRANCHES));
    registerWriter(ACTIVITY_FOREACH_START, createWriter(IAeBPELConstants.AE_EXTENSION_NAMESPACE_URI_ACTIVITY, TAG_FOREACH_STARTCOUNTER));
    registerWriter(ACTIVITY_FOREACH_FINAL, createWriter(IAeBPELConstants.AE_EXTENSION_NAMESPACE_URI_ACTIVITY, TAG_FOREACH_FINALCOUNTER));
    registerWriter(ON_ALARM_CLASS, TAG_ON_ALARM);
    registerWriter(ON_MESSAGE_CLASS, TAG_ON_MESSAGE);
    registerWriter(ON_EVENT_CLASS, TAG_ON_MESSAGE);
    registerWriter(ASSIGN_COPY_CLASS, TAG_COPY);
    registerWriter(CORRELATION_CLASS, TAG_CORRELATION);
    registerWriter(CATCH_CLASS, TAG_CATCH);
    registerWriter(CATCH_ALL_CLASS, TAG_CATCH_ALL);
    registerWriter(ASSIGN_FROM_CLASS, TAG_FROM);
    registerWriter(ASSIGN_TO_CLASS, TAG_TO);
    registerWriter(PARTNER_LINK_CLASS, TAG_PARTNER_LINK);
    registerWriter(PARTNER_CLASS, TAG_PARTNER);
    registerWriter(VARIABLE_CLASS, TAG_VARIABLE);
    registerWriter(EVENT_HANDLERS_CLASS, TAG_EVENT_HANDLERS);
    registerWriter(CORRELATION_SET_CLASS, TAG_CORRELATION_SET);
    registerWriter(CORRELATIONS_CLASS, TAG_CORRELATIONS);
    registerWriter(LINKS_CLASS, TAG_LINKS);
    registerWriter(PARTNERS_CLASS, TAG_PARTNERS);
    registerWriter(VARIABLES_CLASS, TAG_VARIABLES);
    registerWriter(CORRELATION_SETS_CLASS, TAG_CORRELATION_SETS);
    registerWriter(PARNTER_LINKS_CLASS, TAG_PARTNER_LINKS);
    registerWriter(FAULT_HANDLERS_CLASS, TAG_FAULT_HANDLERS);
    registerWriter(COMPENSATION_HANDLER_CLASS, TAG_COMPENSATION_HANDLER);
    registerWriter(EXTENSION_ACTIVITY_CLASS, SKIP_WRITER);
    registerWriter(SOURCES_CLASS, SKIP_WRITER);
    registerWriter(TARGETS_CLASS, SKIP_WRITER);
    registerWriter(JOIN_CONDITION_CLASS, SKIP_WRITER);
    registerWriter(TRANSITION_CONDITION_CLASS, SKIP_WRITER);
    registerWriter(FOR_CLASS, SKIP_WRITER);
    registerWriter(UNTIL_CLASS, SKIP_WRITER);
    registerWriter(CONDITION_CLASS, SKIP_WRITER);
    registerWriter(LITERAL_CLASS, new AeBPWSLiteralWriter());
    registerWriter(AeQueryDef.class, SKIP_WRITER);
    registerWriter(AeExtensionElementDef.class, new AeExtensionElementWriter());
    registerWriter(AeExtensionAttributeDef.class, SKIP_WRITER);
}
