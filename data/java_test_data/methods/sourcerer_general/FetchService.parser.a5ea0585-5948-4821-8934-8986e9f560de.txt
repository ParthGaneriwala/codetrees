private List<Topic> parser(Host host, String content, TopicFieldPattern topicListPattern) {
    if (StringUtils.isNotBlank(topicListPattern.getItemListAreaPattern())) {
        Pattern p = getPattern(topicListPattern.getItemListAreaPattern());
        Matcher m = p.matcher(content);
        if (m.find()) {
            content = m.group();
        }
    }
    Pattern singleItemPattern = getPattern(topicListPattern.getSingleItemPattern());
    Matcher singleItemMatcher = singleItemPattern.matcher(content);
    List<Topic> topics = new ArrayList<Topic>();
    System.out.println(singleItemPattern.toString());
    System.out.println(content);
    while (singleItemMatcher.find()) {
        String itemContent = singleItemMatcher.group();
        Topic t = new Topic();
        // title
        Pattern titlePattern = getPattern(topicListPattern.getTitlePattern());
        Matcher titleMatcher = titlePattern.matcher(itemContent);
        if (titleMatcher.find()) {
            t.setTitle(titleMatcher.group(1));
        } else {
            continue;
        }
        // System.out.println("title:"+t.getTitle());
        // reply count
        Pattern titleReplyCountPattern = getPattern(topicListPattern.getReplyCountPattern());
        Matcher titleReplyCountMatcher = titleReplyCountPattern.matcher(itemContent);
        if (titleReplyCountMatcher.find()) {
            t.setReplyCount(Integer.valueOf(titleReplyCountMatcher.group(1)));
        }
        // System.out.println("replyCount:"+t.getReplyCount());
        PageUrlTemplate topicPageTemplate = pageUrlTemplateRepository.get(host.getTopicPageTemplate().getId());
        Pattern topicUrlPattern = getPattern("(" + topicPageTemplate.getSourceUrlPattern() + ")");
        Matcher topicUrlMatcher = topicUrlPattern.matcher(itemContent);
        if (topicUrlMatcher.find()) {
            t.setUrl(mergeUrl(host.getUrl(), topicUrlMatcher.group(1)));
        }
        topics.add(t);
    }
    return topics;
}
