public ActionForward rechargeableCard(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse resqonse) {
    if (!isLoggedIn(request)) {
        return mapping.findForward(ForwardConstants.INDEX);
    }
    SessionContainer sessionContainer = getSessionContainer(request);
    Customer customer = customerService.findByEmail(sessionContainer.getCustomer().getEmail());
    List<AccountDetail> accountDetails = rechargeableCardService.findByCustomerId(customer.getId());
    request.setAttribute("accountDetails", accountDetails);
    request.setAttribute("account", customer.getAccount());
    HttpSession session = request.getSession();
    ActionMessages errors = new ActionMessages();
    String randomCode = (String) session.getAttribute("randomCode");
    if (null == randomCode) {
        ActionMessage msg = new ActionMessage(MessageUtil.getMessage("register.page.not.input.random"), false);
        errors.add("emptycode", msg);
        saveMessages(request, errors);
        return mapping.getInputForward();
    }
    String reqRandom = request.getParameter("random");
    if (!randomCode.equals(reqRandom)) {
        ActionMessage msg = new ActionMessage(MessageUtil.getMessage("register.page.input.error.random"), false);
        errors.add("errorcode", msg);
        saveMessages(request, errors);
        return mapping.getInputForward();
    } else {
        DynaActionForm data = (DynaActionForm) form;
        Integer cardNo = (Integer) data.get("cardNo");
        String password = (String) data.get("password");
        if (isEmptyCardNoOrPassword(cardNo, password, errors, request)) {
            return mapping.getInputForward();
        }
        RechargeableCard card = rechargeableCardService.findByCardNo(cardNo);
        if (!isCorrectCard(card, password, errors, request)) {
            return mapping.getInputForward();
        }
        try {
            logger.debug("顾客：" + customer.getEmail() + " 开始充值  卡号：" + card.getCardNo());
            accountDetails = rechargeableCardService.saveAccountDetail(card, customer);
            logger.debug("顾客：" + customer.getEmail() + " 充值成功  卡号：" + card.getCardNo());
            // /accountDetails.add(accountDetail);
            request.setAttribute("accountDetails", accountDetails);
            request.setAttribute("account", customer.getAccount());
        } catch (ServiceException e) {
            logger.error("充值卡已过期！", e);
            ActionMessage msg = new ActionMessage("充值卡已过期！", false);
            errors.add("errors", msg);
            saveMessages(request, errors);
        } catch (Exception e) {
            logger.error("顾客：" + customer.getEmail() + " 充值失败  卡号：" + card.getCardNo(), e);
        }
        return mapping.findForward(ForwardConstants.SUCCESS);
    }
}
