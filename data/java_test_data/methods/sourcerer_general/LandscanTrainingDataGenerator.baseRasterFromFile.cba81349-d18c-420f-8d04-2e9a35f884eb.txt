private static float[][] baseRasterFromFile(File inFile) {
    // int rasterSum = 0;
    float[][] raster = new float[1105][1105];
    float[][] smoothed = new float[1105][1105];
    String[][] values;
    try {
        FileReader in = new FileReader(inFile);
        CSVParser csvp = new CSVParser(in);
        values = csvp.getAllValues();
        for (int i = 1; i < values.length; i++) {
            int x = Integer.parseInt(values[i][0]);
            int y = Integer.parseInt(values[i][1]);
            int cases = Integer.parseInt(values[i][3]);
            int rasterMinX = 13 * x;
            int rasterMinY = 13 * y;
            int rasterMaxX = 13 * x + 12;
            int rasterMaxY = 13 * y + 12;
            if (cases == 0) {
                for (int j = rasterMinX; j <= rasterMaxX; j++) {
                    for (int k = rasterMinY; k <= rasterMaxY; k++) {
                        raster[j][k] = 0;
                    }
                }
            } else {
                for (int j = rasterMinX; j <= rasterMaxX; j++) {
                    for (int k = rasterMinY; k <= rasterMaxY; k++) {
                        raster[j][k] = 1;
                    // rasterSum++;
                    }
                }
            }
        }
        // raster is a bit pixellated right now, so smooth it.
        for (int i = 0; i < raster.length; i++) {
            for (int j = 0; j < raster[i].length; j++) {
                int zeros = 0;
                int ones = 0;
                int rasterMinX = Math.max(0, i - 6);
                int rasterMaxX = Math.min(i + 6, raster.length - 1);
                int rasterMinY = Math.max(0, j - 6);
                int rasterMaxY = Math.min(j + 6, raster[i].length - 1);
                for (int k = rasterMinX; k <= rasterMaxX; k++) {
                    for (int l = rasterMinY; l <= rasterMaxY; l++) {
                        if (raster[k][l] == 0) {
                            zeros++;
                        } else {
                            ones++;
                        }
                    }
                }
                if (ones >= zeros) {
                    smoothed[i][j] = 1;
                } else {
                    smoothed[i][j] = 0;
                }
            }
        }
        return smoothed;
    } catch (IOException ioe) {
        System.out.println("what the? " + ioe.getMessage());
        // deliberately returning null instead of smoothed to generate an error instead of chugging along with a raster full of zeros.
        return null;
    }
}
