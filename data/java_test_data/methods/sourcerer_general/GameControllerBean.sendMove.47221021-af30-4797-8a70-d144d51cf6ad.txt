public MoveResult sendMove(Point from, Point to, PieceType promoteTo) {
    myLog.logMessage(Level.ALL, "GameControllerBean::sendMove " + from + " to " + to);
    GameMove m = new GameMove(from, to);
    // XXX very crude refresh
    this.getGame();
    // if the game is over, all moves are illegal.
    if (ChessGame.GameEndStatus.INCOMPLETE != game.getStatus()) {
        return MoveResult.GAME_OVER;
    }
    if (null != promoteTo) {
        GameMove.SpecialInfo promotion;
        switch(promoteTo) {
            case KNIGHT:
                promotion = GameMove.SpecialInfo.PROMOTE_K;
                break;
            case BISHOP:
                promotion = GameMove.SpecialInfo.PROMOTE_B;
                break;
            case QUEEN:
                promotion = GameMove.SpecialInfo.PROMOTE_Q;
                break;
            case ROOK:
                promotion = GameMove.SpecialInfo.PROMOTE_R;
                break;
            default:
                throw new IllegalArgumentException("Cannot promote pawn to " + promoteTo);
        }
        m.setPawnDetail(promotion);
    }
    ChessPlayer p = em.find(ChessPlayer.class, con.getCallerPrincipal().getName());
    PieceColor pColor;
    if (p.equals(game.getPlayerBlack())) {
        pColor = PieceColor.BLACK;
    } else if (p.equals(game.getPlayerWhite())) {
        pColor = PieceColor.WHITE;
    } else {
        myLog.logMessage(Level.WARNING, "GameControllerBean::sendMove Illegal Player");
        // throw new IllegalArgumentException("You're not playing this game!");
        return MoveResult.NOT_PLAYING;
    }
    myLog.logMessage(Level.INFO, "GameControllerBean::sendMove: Move offered by " + pColor);
    if (game.toMove() != pColor) {
        myLog.logMessage(Level.FINE, "Rejecting move from wrong player");
        return MoveResult.MOVE_ILLEGAL;
    }
    if (!game.isValid(m, pColor)) {
        myLog.logMessage(Level.FINE, "Rejecting invalid move");
        return MoveResult.MOVE_INVALID;
    }
    if (!game.getCurrentBoard().checkMove(from, to)) {
        myLog.logMessage(Level.FINE, "Rejecting illegal move");
        return MoveResult.MOVE_ILLEGAL;
    }
    if (game.isPawnPromotion(from, to) && null == promoteTo) {
        myLog.logMessage(Level.FINE, "Move requires pawn promotion information");
        return MoveResult.MOVE_PROMOTES;
    }
    finalCommit(m);
    return MoveResult.MOVE_OK;
}
