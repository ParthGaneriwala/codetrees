public String doView(RenderRequest request, RenderResponse response) throws PortletException, IOException {
    String defaultView = VIEW_PAGE;
    // Get portal items
    String queryString = (String) request.getAttribute(BASE_QUERY_STRING);
    IIndexerSearch searcher = (IIndexerSearch) request.getAttribute(SEARCHER);
    // Get preferences
    int limit = Integer.parseInt(request.getPreferences().getValue(PREFS_LIMIT, "10"));
    request.setAttribute(TITLE, request.getPreferences().getValue(PREFS_TITLE, null));
    request.setAttribute(LIMIT, request.getPreferences().getValue(PREFS_LIMIT, "10"));
    String category = request.getPreferences().getValue(PREFS_CATEGORY_NAME, null);
    if (category != null) {
        ProjectCategoryList categories = (ProjectCategoryList) request.getAttribute(Constants.REQUEST_TAB_CATEGORY_LIST);
        int categoryId = categories.getIdFromValue(category);
        if (categoryId > -1) {
            queryString += " AND (projectCategoryId:" + categoryId + ")";
        }
    }
    // fetch only classifieds in this instanceId
    if (PortalUtils.getInstance(request).getId() != -1) {
        queryString += " AND (instanceId:" + PortalUtils.getInstance(request).getId() + ")";
    }
    Timestamp currentTimestamp = new Timestamp(System.currentTimeMillis());
    SimpleDateFormat formatter = new SimpleDateFormat("yyyyMMdd");
    // Fetch only those that are published. TODO: performance testing as this results in a query explosion
    queryString += " AND (published:[20030101 TO " + String.valueOf(formatter.format(currentTimestamp) + "])");
    // Fetch only those that have not expired
    queryString += " NOT (expired:{20030101 TO " + String.valueOf(formatter.format(currentTimestamp) + "})");
    // Customize the string
    queryString += " AND (type:classifieds) ";
    // Search results will be set in query object...
    IndexerQueryResultList query = new IndexerQueryResultList(queryString);
    query.setQueryIndexType(Constants.INDEXER_FULL);
    query.getPagedListInfo().setItemsPerPage(limit);
    query.getPagedListInfo().setColumnToSortBy("modified");
    query.getPagedListInfo().setSortOrder("desc");
    searcher.search(query);
    // Sort sort = new Sort("type");
    // Hits hits = searcher.search(query, sort);
    request.setAttribute(HITS, query);
    if (query.size() == 0) {
        // JSP view
        defaultView = null;
    }
    return defaultView;
}
