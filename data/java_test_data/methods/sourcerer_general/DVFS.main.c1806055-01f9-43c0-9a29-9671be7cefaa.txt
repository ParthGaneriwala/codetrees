public static void main(String[] args) {
    Log.printLine("Starting DVFS example...");
    try {
        // First step: Initialize the CloudSim package. It should be called
        // before creating any entities. We can't run this example without
        // initializing CloudSim first. We will get run-time exception
        // error.
        // number of cloud users
        int num_user = 1;
        Calendar calendar = Calendar.getInstance();
        // mean trace GridSim events
        boolean trace_flag = false;
        // Initialize the CloudSim library
        CloudSim.init(num_user, calendar, trace_flag);
        // Second step: Create Datacenters
        // Datacenters are the resource providers in CloudSim. We need at
        // list one of them to run a CloudSim simulation
        PowerDatacenter datacenter = createDatacenter("Datacenter_0");
        datacenter.setDisableMigrations(true);
        // Third step: Create Broker
        DatacenterBroker broker = createBroker();
        int brokerId = broker.getId();
        // Fourth step: Create one virtual machine
        vmList = createVms(brokerId);
        // submit vm list to the broker
        broker.submitVmList(vmList);
        // Fifth step: Create one cloudlet
        cloudletList = createCloudletList(brokerId);
        // submit cloudlet list to the broker
        broker.submitCloudletList(cloudletList);
        // Sixth step: Starts the simulation
        double lastClock = CloudSim.startSimulation();
        // Final step: Print results when simulation is over
        List<Cloudlet> newList = broker.getCloudletReceivedList();
        Log.printLine("Received " + newList.size() + " cloudlets");
        CloudSim.stopSimulation();
        printCloudletList(newList);
        int totalTotalRequested = 0;
        int totalTotalAllocated = 0;
        ArrayList<Double> sla = new ArrayList<Double>();
        int numberOfAllocations = 0;
        for (Entry<String, List<List<Double>>> entry : datacenter.getUnderAllocatedMips().entrySet()) {
            List<List<Double>> underAllocatedMips = entry.getValue();
            double totalRequested = 0;
            double totalAllocated = 0;
            for (List<Double> mips : underAllocatedMips) {
                if (mips.get(0) != 0) {
                    numberOfAllocations++;
                    totalRequested += mips.get(0);
                    totalAllocated += mips.get(1);
                    double _sla = (mips.get(0) - mips.get(1)) / mips.get(0) * 100;
                    if (_sla > 0) {
                        sla.add(_sla);
                    }
                }
            }
            totalTotalRequested += totalRequested;
            totalTotalAllocated += totalAllocated;
        }
        double averageSla = 0;
        if (sla.size() > 0) {
            double totalSla = 0;
            for (Double _sla : sla) {
                totalSla += _sla;
            }
            averageSla = totalSla / sla.size();
        }
        Log.printLine();
        Log.printLine(String.format("Total simulation time: %.2f sec", lastClock));
        Log.printLine(String.format("Energy consumption: %.2f kWh", datacenter.getPower() / (3600 * 1000)));
        Log.printLine(String.format("Number of VM migrations: %d", datacenter.getMigrationCount()));
        Log.printLine(String.format("Number of SLA violations: %d", sla.size()));
        Log.printLine(String.format("SLA violation: %.2f%%", 100 * ((double) totalTotalRequested - totalTotalAllocated) / totalTotalRequested));
        Log.printLine(String.format("Average SLA violation: %.2f%%", averageSla));
        Log.printLine();
    } catch (Exception e) {
        e.printStackTrace();
        Log.printLine("Unwanted errors happen");
    }
    Log.printLine("DVFS example finished!");
}
