public <T extends Command> void execute(final T cmd) {
    switch(cmd.getCommandId()) {
        case FileDialogUnstarDocumentCommand.serialUid:
            execute((FileDialogUnstarDocumentCommand) cmd);
            break;
        case FileDialogStarDocumentCommand.serialUid:
            execute((FileDialogStarDocumentCommand) cmd);
            break;
        case FileDialogListDocumentsCommand.serialUid:
            execute((FileDialogListDocumentsCommand) cmd);
            break;
        case FileDialogOpenDocumentCommand.serialUid:
            execute((FileDialogOpenDocumentCommand) cmd);
            break;
        case ExplorerWindowOpenDocumentCommand.serialUid:
            execute((ExplorerWindowOpenDocumentCommand) cmd);
            break;
        case ExplorerWindowOpenVirtualFolderCommand.serialUid:
            execute((ExplorerWindowOpenVirtualFolderCommand) cmd);
            break;
        case ExplorerWindowOpenFolderCommand.serialUid:
            execute((ExplorerWindowOpenFolderCommand) cmd);
            break;
        case SplashDialogListDesktopsCommand.serialUid:
            execute((SplashDialogListDesktopsCommand) cmd);
            break;
        case WindowMinimizeCommand.serialUid:
            execute((WindowMinimizeCommand) cmd);
            break;
        case WindowRestoreCommand.serialUid:
            execute((WindowRestoreCommand) cmd);
            break;
        case WindowOpenCommand.serialUid:
        case WindowAddCommand.serialUid:
            execute((WindowAddCommand) cmd);
            break;
        case WindowMoveCommand.serialUid:
            execute((WindowMoveCommand) cmd);
            break;
        case DialogWindowNewCommand.serialUid:
            execute((DialogWindowNewCommand) cmd);
            break;
        case WindowRemoveCommand.serialUid:
            execute((WindowRemoveCommand) cmd);
            break;
        case DialogIconNewCommand.serialUid:
            execute((DialogIconNewCommand) cmd);
            break;
        case DialogFolderNewCommand.serialUid:
            execute((DialogFolderNewCommand) cmd);
            break;
        case FeedEntryCopyCommand.serialUid:
            execute((FeedEntryCopyCommand) cmd);
            break;
        case FeedEntryOpenCommand.serialUid:
            execute((FeedEntryOpenCommand) cmd);
            break;
        case VirtualEntryTrashAddCommand.serialUid:
            execute((VirtualEntryTrashAddCommand) cmd);
            break;
        case VirtualEntryFolderAddCommand.serialUid:
            execute((VirtualEntryFolderAddCommand) cmd);
            break;
        case VirtualEntryAddCommand.serialUid:
            execute((VirtualEntryAddCommand) cmd);
            break;
        case VirtualEntryCopyCommand.serialUid:
            execute((VirtualEntryCopyCommand) cmd);
            break;
        case VirtualEntryMoveCommand.serialUid:
            execute((VirtualEntryMoveCommand) cmd);
            break;
        case VirtualEntryRecycleCommand.serialUid:
            execute((VirtualEntryRecycleCommand) cmd);
            break;
        case VirtualEntryRemoveCommand.serialUid:
            execute((VirtualEntryRemoveCommand) cmd);
            break;
        case VirtualEntryRenameCommand.serialUid:
            execute((VirtualEntryRenameCommand) cmd);
            break;
        case VirtualEntryFolderRefreshCommand.serialUid:
            execute((VirtualEntryFolderRefreshCommand) cmd);
            break;
        case VirtualEntryFolderEmptyCommand.serialUid:
            execute((VirtualEntryFolderEmptyCommand) cmd);
            break;
        case BrowserOpenCommand.serialUid:
            execute((BrowserOpenCommand) cmd);
            break;
        case NativeAlertCommand.serialUid:
            execute((NativeAlertCommand) cmd);
            break;
        case NewDocumentStartCommand.serialUid:
            execute((NewDocumentStartCommand) cmd);
            break;
        case ExistingDocumentOpenCommand.serialUid:
            execute((ExistingDocumentOpenCommand) cmd);
            break;
        case CurrentDocumentCopyCommand.serialUid:
            execute((CurrentDocumentCopyCommand) cmd);
            break;
        case CurrentDocumentSaveCommand.serialUid:
            execute((CurrentDocumentSaveCommand) cmd);
            break;
        case CurrentDocumentSaveAndCloseCommand.serialUid:
            execute((CurrentDocumentSaveAndCloseCommand) cmd);
            break;
        case CurrentDocumentCloseCommand.serialUid:
            execute((CurrentDocumentCloseCommand) cmd);
            break;
        case CurrentDocumentRenameCommand.serialUid:
            execute((CurrentDocumentRenameCommand) cmd);
            break;
        case CurrentDocumentDeleteCommand.serialUid:
            execute((CurrentDocumentDeleteCommand) cmd);
            break;
        case CurrentDocumentRefreshCommand.serialUid:
            execute((CurrentDocumentRefreshCommand) cmd);
            break;
        case CurrentDocumentReloadCommand.serialUid:
            execute((CurrentDocumentReloadCommand) cmd);
            break;
        case CurrentDocumentMakeHomepageCommand.serialUid:
            execute((CurrentDocumentMakeHomepageCommand) cmd);
            break;
        case NewDocumentLoadCommand.serialUid:
            execute((NewDocumentLoadCommand) cmd);
            break;
        case ExistingDocumentLoadCommand.serialUid:
            execute((ExistingDocumentLoadCommand) cmd);
            break;
        case CurrentDocumentLoadContentsCommand.serialUid:
            execute((CurrentDocumentLoadContentsCommand) cmd);
            break;
        case CurrentDocumentLoadCommonContentsCommand.serialUid:
            execute((CurrentDocumentLoadCommonContentsCommand) cmd);
            break;
        case CurrentDocumentRevisionHistoryCommand.serialUid:
            execute((CurrentDocumentRevisionHistoryCommand) cmd);
            break;
        case DialogAboutCommand.serialUid:
            execute((DialogAboutCommand) cmd);
            break;
        case DialogPreferencesCommand.serialUid:
            execute((DialogPreferencesCommand) cmd);
            break;
        case DialogSplashCommand.serialUid:
            execute((DialogSplashCommand) cmd);
            break;
        case DesktopConfigureCommand.serialUid:
            execute((DesktopConfigureCommand) cmd);
            break;
        case DesktopFullScreenCommand.serialUid:
            execute((DesktopFullScreenCommand) cmd);
            break;
        case SystemSignOutCommand.serialUid:
            execute((SystemSignOutCommand) cmd);
            break;
        case SystemUploadDocumentsCommand.serialUid:
            execute((SystemUploadDocumentsCommand) cmd);
            break;
        case SystemUploadFileCommand.serialUid:
            SystemUploadFileCommand sufCmd = (SystemUploadFileCommand) cmd;
            File file = sufCmd.getFile();
            if (file.getSize() <= 1000000) {
                execute(new VirtualEntryAddCommand(null, file.getName(), IconsHelper.getMimetypeIconIdentifier(file.getType(), false), "Open " + sufCmd.getFile().getName(), null, 0, 0, -1, null));
                final FileUploader fu = FileUploader.getInstance();
                fu.uploadFile("/upload", file, new Runnable() {

                    @Override
                    public void run() {
                        Window.alert("loaded");
                    }
                }, new Runnable() {

                    @Override
                    public void run() {
                        Window.alert("progress: " + fu.getProgress());
                    }
                }, new Runnable() {

                    @Override
                    public void run() {
                        Window.alert("error");
                    }
                });
            } else {
                Window.alert("File size exceeds the maximum allowed size of 1Mb.");
            }
            break;
        default:
            Window.alert("Not implemented");
            break;
    }
}
