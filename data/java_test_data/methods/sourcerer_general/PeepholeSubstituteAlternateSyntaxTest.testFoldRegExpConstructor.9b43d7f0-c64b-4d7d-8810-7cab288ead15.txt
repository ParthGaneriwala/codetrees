public void testFoldRegExpConstructor() {
    enableNormalize();
    // Cannot fold all the way to a literal because there are too few arguments.
    fold("x = new RegExp", "x = RegExp()");
    // Empty regexp should not fold to // since that is a line comment in js
    fold("x = new RegExp(\"\")", "x = RegExp(\"\")");
    fold("x = new RegExp(\"\", \"i\")", "x = RegExp(\"\",\"i\")");
    // Bogus flags should not fold
    fold("x = new RegExp(\"foobar\", \"bogus\")", "x = RegExp(\"foobar\",\"bogus\")", PeepholeSubstituteAlternateSyntax.INVALID_REGULAR_EXPRESSION_FLAGS);
    // Can Fold
    fold("x = new RegExp(\"foobar\")", "x = /foobar/");
    fold("x = RegExp(\"foobar\")", "x = /foobar/");
    fold("x = new RegExp(\"foobar\", \"i\")", "x = /foobar/i");
    // Make sure that escaping works
    fold("x = new RegExp(\"\\\\.\", \"i\")", "x = /\\./i");
    fold("x = new RegExp(\"/\", \"\")", "x = /\\//");
    fold("x = new RegExp(\"[/]\", \"\")", "x = /[/]/");
    fold("x = new RegExp(\"///\", \"\")", "x = /\\/\\/\\//");
    fold("x = new RegExp(\"\\\\\\/\", \"\")", "x = /\\//");
    fold("x = new RegExp(\"\\n\")", "x = /\\n/");
    fold("x = new RegExp('\\\\\\r')", "x = /\\r/");
    // Don't fold really long regexp literals, because Opera 9.2's
    // regexp parser will explode.
    String longRegexp = "";
    for (int i = 0; i < 200; i++) longRegexp += "x";
    foldSame("x = RegExp(\"" + longRegexp + "\")");
    // Shouldn't fold RegExp unnormalized because
    // we can't be sure that RegExp hasn't been redefined
    disableNormalize();
    foldSame("x = new RegExp(\"foobar\")");
}
