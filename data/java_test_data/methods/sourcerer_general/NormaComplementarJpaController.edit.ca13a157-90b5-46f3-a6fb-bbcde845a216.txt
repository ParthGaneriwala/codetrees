public void edit(NormaComplementar normaComplementar) throws NonexistentEntityException, Exception {
    EntityManager em = null;
    try {
        em = getEntityManager();
        em.getTransaction().begin();
        NormaComplementar persistentNormaComplementar = em.find(NormaComplementar.class, normaComplementar.getId());
        Set<Bibliografia> bibliografiaOld = persistentNormaComplementar.getBibliografia();
        Set<Bibliografia> bibliografiaNew = normaComplementar.getBibliografia();
        Set<Ponto> pontoOld = persistentNormaComplementar.getPonto();
        Set<Ponto> pontoNew = normaComplementar.getPonto();
        Set<Sorteio> sorteioOld = persistentNormaComplementar.getSorteio();
        Set<Sorteio> sorteioNew = normaComplementar.getSorteio();
        Set<Bibliografia> attachedBibliografiaNew = new HashSet<Bibliografia>();
        for (Bibliografia bibliografiaNewBibliografiaToAttach : bibliografiaNew) {
            bibliografiaNewBibliografiaToAttach = em.getReference(bibliografiaNewBibliografiaToAttach.getClass(), bibliografiaNewBibliografiaToAttach.getId());
            attachedBibliografiaNew.add(bibliografiaNewBibliografiaToAttach);
        }
        bibliografiaNew = attachedBibliografiaNew;
        normaComplementar.setBibliografia(bibliografiaNew);
        Set<Ponto> attachedPontoNew = new HashSet<Ponto>();
        for (Ponto pontoNewPontoToAttach : pontoNew) {
            pontoNewPontoToAttach = em.getReference(pontoNewPontoToAttach.getClass(), pontoNewPontoToAttach.getId());
            attachedPontoNew.add(pontoNewPontoToAttach);
        }
        pontoNew = attachedPontoNew;
        normaComplementar.setPonto(pontoNew);
        Set<Sorteio> attachedSorteioNew = new HashSet<Sorteio>();
        for (Sorteio sorteioNewSorteioToAttach : sorteioNew) {
            sorteioNewSorteioToAttach = em.getReference(sorteioNewSorteioToAttach.getClass(), sorteioNewSorteioToAttach.getId());
            attachedSorteioNew.add(sorteioNewSorteioToAttach);
        }
        sorteioNew = attachedSorteioNew;
        normaComplementar.setSorteio(sorteioNew);
        normaComplementar = em.merge(normaComplementar);
        for (Bibliografia bibliografiaOldBibliografia : bibliografiaOld) {
            if (!bibliografiaNew.contains(bibliografiaOldBibliografia)) {
                bibliografiaOldBibliografia.setNormaComplementar(null);
                bibliografiaOldBibliografia = em.merge(bibliografiaOldBibliografia);
            }
        }
        for (Bibliografia bibliografiaNewBibliografia : bibliografiaNew) {
            if (!bibliografiaOld.contains(bibliografiaNewBibliografia)) {
                NormaComplementar oldNormaComplementarOfBibliografiaNewBibliografia = bibliografiaNewBibliografia.getNormaComplementar();
                bibliografiaNewBibliografia.setNormaComplementar(normaComplementar);
                bibliografiaNewBibliografia = em.merge(bibliografiaNewBibliografia);
                if (oldNormaComplementarOfBibliografiaNewBibliografia != null && !oldNormaComplementarOfBibliografiaNewBibliografia.equals(normaComplementar)) {
                    oldNormaComplementarOfBibliografiaNewBibliografia.getBibliografia().remove(bibliografiaNewBibliografia);
                    oldNormaComplementarOfBibliografiaNewBibliografia = em.merge(oldNormaComplementarOfBibliografiaNewBibliografia);
                }
            }
        }
        for (Ponto pontoOldPonto : pontoOld) {
            if (!pontoNew.contains(pontoOldPonto)) {
                pontoOldPonto.setNormaComplementar(null);
                pontoOldPonto = em.merge(pontoOldPonto);
            }
        }
        for (Ponto pontoNewPonto : pontoNew) {
            if (!pontoOld.contains(pontoNewPonto)) {
                NormaComplementar oldNormaComplementarOfPontoNewPonto = pontoNewPonto.getNormaComplementar();
                pontoNewPonto.setNormaComplementar(normaComplementar);
                pontoNewPonto = em.merge(pontoNewPonto);
                if (oldNormaComplementarOfPontoNewPonto != null && !oldNormaComplementarOfPontoNewPonto.equals(normaComplementar)) {
                    oldNormaComplementarOfPontoNewPonto.getPonto().remove(pontoNewPonto);
                    oldNormaComplementarOfPontoNewPonto = em.merge(oldNormaComplementarOfPontoNewPonto);
                }
            }
        }
        for (Sorteio sorteioOldSorteio : sorteioOld) {
            if (!sorteioNew.contains(sorteioOldSorteio)) {
                sorteioOldSorteio.setNormaComplementar(null);
                sorteioOldSorteio = em.merge(sorteioOldSorteio);
            }
        }
        for (Sorteio sorteioNewSorteio : sorteioNew) {
            if (!sorteioOld.contains(sorteioNewSorteio)) {
                NormaComplementar oldNormaComplementarOfSorteioNewSorteio = sorteioNewSorteio.getNormaComplementar();
                sorteioNewSorteio.setNormaComplementar(normaComplementar);
                sorteioNewSorteio = em.merge(sorteioNewSorteio);
                if (oldNormaComplementarOfSorteioNewSorteio != null && !oldNormaComplementarOfSorteioNewSorteio.equals(normaComplementar)) {
                    oldNormaComplementarOfSorteioNewSorteio.getSorteio().remove(sorteioNewSorteio);
                    oldNormaComplementarOfSorteioNewSorteio = em.merge(oldNormaComplementarOfSorteioNewSorteio);
                }
            }
        }
        em.getTransaction().commit();
    } catch (Exception ex) {
        String msg = ex.getLocalizedMessage();
        if (msg == null || msg.length() == 0) {
            long id = normaComplementar.getId();
            if (findNormaComplementar(id) == null) {
                throw new NonexistentEntityException("The normaComplementar with id " + id + " no longer exists.");
            }
        }
        throw ex;
    } finally {
        if (em != null) {
            em.close();
        }
    }
}
