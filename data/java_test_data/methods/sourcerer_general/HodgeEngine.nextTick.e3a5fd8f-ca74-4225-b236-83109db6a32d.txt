private int nextTick(int g, int k1, int k2, boolean neumann, boolean wrap) throws ArrayIndexOutOfBoundsException {
    if (!INITIALIZED)
        return -1;
    // HodgeControl.setTick(ticks);
    int minX = 1, minY = 1, maxX = SIZE - 1, maxY = SIZE - 1;
    if (wrap) {
        minX = 0;
        minY = 0;
        maxX = SIZE;
        maxY = SIZE;
    }
    for (int x = minX; x < maxX; x++) for (int y = minY; y < maxY; y++) {
        if (cells[x][y] == 0) {
            int A = 0;
            int B = 0;
            for (int i = x - 1; i <= x + 1; i++) for (int j = y - 1; j <= y + 1; j++) {
                int i2 = i, j2 = j;
                if (i2 < 0)
                    i2 = maxX - 1;
                else if (i2 >= maxX)
                    i2 = minX;
                if (j2 < 0)
                    j2 = maxY - 1;
                else if (j2 >= maxY)
                    j2 = minY;
                if ((i2 != x || j2 != y) && (!neumann || i2 == x || j2 == y)) {
                    if (cells[i2][j2] > 0)
                        A++;
                    else
                        B++;
                }
            }
            int living = 0;
            if (k1 != 0)
                living = (A / k1);
            int dead = 0;
            if (k2 != 0)
                dead = (B / k2);
            tmp[x][y] = living + dead;
            if (tmp[x][y] > N)
                tmp[x][y] = N;
        } else if (cells[x][y] < N) {
            int A = 1;
            int S = cells[x][y];
            for (int i = x - 1; i <= x + 1; i++) for (int j = y - 1; j <= y + 1; j++) {
                int i2 = i, j2 = j;
                if (i2 < 0)
                    i2 = maxX - 1;
                else if (i2 >= maxX)
                    i2 = minX;
                if (j2 < 0)
                    j2 = maxY - 1;
                else if (j2 >= maxY)
                    j2 = minY;
                if ((i2 != x || j2 != y) && (!neumann || i2 == x || j2 == y)) {
                    if (cells[i2][j2] > 0) {
                        A++;
                        S += cells[i2][j2];
                    }
                }
            }
            tmp[x][y] = (S / A) + g;
            if (tmp[x][y] > N)
                tmp[x][y] = N;
        } else
            tmp[x][y] = 0;
    }
    // update cells
    for (int x = 0; x < SIZE; x++) for (int y = 0; y < SIZE; y++) {
        cells[x][y] = tmp[x][y];
    }
    // increment and return ticks
    return ++ticks;
}
