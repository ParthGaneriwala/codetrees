public void edit(Sorteio sorteio) throws NonexistentEntityException, Exception {
    EntityManager em = null;
    try {
        em = getEntityManager();
        em.getTransaction().begin();
        Sorteio persistentSorteio = em.find(Sorteio.class, sorteio.getId());
        NormaComplementar normaComplementarOld = persistentSorteio.getNormaComplementar();
        NormaComplementar normaComplementarNew = sorteio.getNormaComplementar();
        Set<Ordem> ordemOld = persistentSorteio.getOrdem();
        Set<Ordem> ordemNew = sorteio.getOrdem();
        if (normaComplementarNew != null) {
            normaComplementarNew = em.getReference(normaComplementarNew.getClass(), normaComplementarNew.getId());
            sorteio.setNormaComplementar(normaComplementarNew);
        }
        Set<Ordem> attachedOrdemNew = new HashSet<Ordem>();
        for (Ordem ordemNewOrdemToAttach : ordemNew) {
            ordemNewOrdemToAttach = em.getReference(ordemNewOrdemToAttach.getClass(), ordemNewOrdemToAttach.getId());
            attachedOrdemNew.add(ordemNewOrdemToAttach);
        }
        ordemNew = attachedOrdemNew;
        sorteio.setOrdem(ordemNew);
        sorteio = em.merge(sorteio);
        if (normaComplementarOld != null && !normaComplementarOld.equals(normaComplementarNew)) {
            normaComplementarOld.getSorteio().remove(sorteio);
            normaComplementarOld = em.merge(normaComplementarOld);
        }
        if (normaComplementarNew != null && !normaComplementarNew.equals(normaComplementarOld)) {
            normaComplementarNew.getSorteio().add(sorteio);
            normaComplementarNew = em.merge(normaComplementarNew);
        }
        for (Ordem ordemOldOrdem : ordemOld) {
            if (!ordemNew.contains(ordemOldOrdem)) {
                ordemOldOrdem.setSorteio(null);
                ordemOldOrdem = em.merge(ordemOldOrdem);
            }
        }
        for (Ordem ordemNewOrdem : ordemNew) {
            if (!ordemOld.contains(ordemNewOrdem)) {
                Sorteio oldSorteioOfOrdemNewOrdem = ordemNewOrdem.getSorteio();
                ordemNewOrdem.setSorteio(sorteio);
                ordemNewOrdem = em.merge(ordemNewOrdem);
                if (oldSorteioOfOrdemNewOrdem != null && !oldSorteioOfOrdemNewOrdem.equals(sorteio)) {
                    oldSorteioOfOrdemNewOrdem.getOrdem().remove(ordemNewOrdem);
                    oldSorteioOfOrdemNewOrdem = em.merge(oldSorteioOfOrdemNewOrdem);
                }
            }
        }
        em.getTransaction().commit();
    } catch (Exception ex) {
        String msg = ex.getLocalizedMessage();
        if (msg == null || msg.length() == 0) {
            long id = sorteio.getId();
            if (findSorteio(id) == null) {
                throw new NonexistentEntityException("The sorteio with id " + id + " no longer exists.");
            }
        }
        throw ex;
    } finally {
        if (em != null) {
            em.close();
        }
    }
}
