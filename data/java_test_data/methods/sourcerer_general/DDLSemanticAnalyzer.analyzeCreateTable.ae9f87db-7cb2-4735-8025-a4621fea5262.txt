private void analyzeCreateTable(CommonTree ast, boolean isExt) throws SemanticException {
    String tableName = ast.getChild(0).getText();
    CommonTree colList = (CommonTree) ast.getChild(1);
    List<FieldSchema> cols = getColumns(colList);
    List<FieldSchema> partCols = null;
    List<String> bucketCols = null;
    List<Order> sortCols = null;
    int numBuckets = -1;
    String fieldDelim = null;
    String collItemDelim = null;
    String mapKeyDelim = null;
    String lineDelim = null;
    String comment = null;
    boolean isSequenceFile = false;
    String location = null;
    LOG.info("Creating table" + tableName);
    int numCh = ast.getChildCount();
    for (int num = 2; num < numCh; num++) {
        CommonTree child = (CommonTree) ast.getChild(num);
        switch(child.getToken().getType()) {
            case HiveParser.TOK_TABLECOMMENT:
                comment = child.getChild(0).getText();
                break;
            case HiveParser.TOK_TABLEPARTCOLS:
                partCols = getColumns((CommonTree) child.getChild(0));
                break;
            case HiveParser.TOK_TABLEBUCKETS:
                bucketCols = getColumnNames((CommonTree) child.getChild(0));
                if (child.getChildCount() == 2)
                    numBuckets = (Integer.valueOf(child.getChild(1).getText())).intValue();
                else {
                    sortCols = getColumnNamesOrder((CommonTree) child.getChild(1));
                    numBuckets = (Integer.valueOf(child.getChild(2).getText())).intValue();
                }
                break;
            case HiveParser.TOK_TABLEROWFORMAT:
                int numChildRowFormat = child.getChildCount();
                for (int numC = 0; numC < numChildRowFormat; numC++) {
                    CommonTree rowChild = (CommonTree) child.getChild(numC);
                    switch(rowChild.getToken().getType()) {
                        case HiveParser.TOK_TABLEROWFORMATFIELD:
                            fieldDelim = unescapeSQLString(rowChild.getChild(0).getText());
                            break;
                        case HiveParser.TOK_TABLEROWFORMATCOLLITEMS:
                            collItemDelim = unescapeSQLString(rowChild.getChild(0).getText());
                            break;
                        case HiveParser.TOK_TABLEROWFORMATMAPKEYS:
                            mapKeyDelim = unescapeSQLString(rowChild.getChild(0).getText());
                            break;
                        case HiveParser.TOK_TABLEROWFORMATLINES:
                            lineDelim = unescapeSQLString(rowChild.getChild(0).getText());
                            break;
                        default:
                            assert false;
                    }
                }
                break;
            case HiveParser.TOK_TBLSEQUENCEFILE:
                isSequenceFile = true;
                break;
            case HiveParser.TOK_TABLELOCATION:
                location = unescapeSQLString(child.getChild(0).getText());
                break;
            default:
                assert false;
        }
    }
    createTableDesc crtTblDesc = new createTableDesc(tableName, isExt, cols, partCols, bucketCols, sortCols, numBuckets, fieldDelim, collItemDelim, mapKeyDelim, lineDelim, comment, isSequenceFile, location);
    validateCreateTable(crtTblDesc);
    rootTasks.add(TaskFactory.get(new DDLWork(crtTblDesc), conf));
}
