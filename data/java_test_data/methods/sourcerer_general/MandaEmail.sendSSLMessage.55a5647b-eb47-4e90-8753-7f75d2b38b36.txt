// Main para testar o c√≥digo
// public static void main(String args[]) throws Exception {
// 
// Security.addProvider(new com.sun.net.ssl.internal.ssl.Provider());
// 
// new MandaEmail().sendSSLMessage(sendTo, emailSubjectTxt, emailMsgTxt,
// emailFromAddress);
// System.out.println("Sucessfully Sent mail to All Users");
private void sendSSLMessage(String[] recipients, String subject, String message, String from, boolean textAsHtml) throws MessagingException {
    boolean debug = false;
    Properties props = new Properties();
    props.put("mail.smtp.host", SMTP_HOST_NAME);
    props.put("mail.smtp.auth", "true");
    props.put("mail.debug", "true");
    props.put("mail.smtp.port", SMTP_PORT);
    props.put("mail.smtp.socketFactory.port", SMTP_PORT);
    props.put("mail.smtp.socketFactory.class", SSL_FACTORY);
    props.put("mail.smtp.socketFactory.fallback", "false");
    Session session = Session.getDefaultInstance(props, new javax.mail.Authenticator() {

        protected PasswordAuthentication getPasswordAuthentication() {
            return new PasswordAuthentication("BancoComp2", "123BancoComp2");
        }
    });
    session.setDebug(debug);
    Message msg = new MimeMessage(session);
    InternetAddress addressFrom = new InternetAddress(from);
    msg.setFrom(addressFrom);
    InternetAddress[] addressTo = new InternetAddress[recipients.length];
    for (int i = 0; i < recipients.length; i++) {
        addressTo[i] = new InternetAddress(recipients[i]);
    }
    msg.setRecipients(Message.RecipientType.TO, addressTo);
    // Setting the Subject and Content Type
    msg.setSubject(subject);
    msg.setContent(message, (textAsHtml) ? "text/html" : "text/plain");
    Transport.send(msg);
}
