public void doView(RenderRequest request, RenderResponse response) throws PortletException, IOException {
    try {
        String defaultView = null;
        String viewType = request.getParameter(VIEW_TYPE);
        // Set global preferences
        request.setAttribute(TITLE, request.getPreferences().getValue(PREF_TITLE, null));
        // Determine the current profile
        Project project = PortalUtils.getProject(request);
        request.setAttribute(PROJECT, project);
        // Determine the user looking at this profile
        User user = PortalUtils.getUser(request);
        // Determine if the invites can be shown to the current user
        if (project.getProfile() && user.getId() == project.getOwner()) {
            defaultView = VIEW_PAGE1;
            Connection db = PortalUtils.useConnection(request);
            if ("setAccept".equals(viewType)) {
                String projectId = request.getParameter("projectId");
                String accept = request.getParameter("accept");
                Project targetProject = PortalUtils.retrieveAuthorizedProject(Integer.parseInt(projectId), request);
                TeamMember prevMember = new TeamMember(db, targetProject.getId(), project.getOwner());
                if ("true".equals(accept)) {
                    // The user accepted becoming a member of a project
                    ProjectUtils.accept(db, targetProject.getId(), project.getOwner());
                    TeamMember thisMember = new TeamMember(db, targetProject.getId(), project.getOwner());
                    // Let the workflow know
                    PortalUtils.processUpdateHook(request, prevMember, thisMember);
                } else {
                    // The user declined becoming a member of a project
                    ProjectUtils.reject(db, targetProject.getId(), project.getOwner());
                    TeamMember thisMember = new TeamMember(db, targetProject.getId(), project.getOwner());
                    // Let the workflow know
                    PortalUtils.processUpdateHook(request, prevMember, thisMember);
                }
                response.setContentType("text/html");
                PrintWriter out = response.getWriter();
                out.println("");
                out.flush();
                defaultView = null;
            } else {
                // Get a list of projects that owner of the profile has been invited to
                ProjectList invitedProjects = new ProjectList();
                invitedProjects.setProjectsForUser(project.getOwner());
                invitedProjects.setIncludeGuestProjects(false);
                invitedProjects.setInvitationPendingOnly(true);
                invitedProjects.buildList(db);
                if (invitedProjects.size() == 0) {
                    defaultView = null;
                }
                request.setAttribute(INVITATED_PROJECT_LIST, invitedProjects);
                if (user.getId() == project.getOwner()) {
                    request.setAttribute(UPDATE_INVITATIONS, "true");
                } else {
                    request.setAttribute(UPDATE_INVITATIONS, "false");
                }
            }
        }
        // JSP view
        if (defaultView != null) {
            PortletContext context = getPortletContext();
            PortletRequestDispatcher requestDispatcher = context.getRequestDispatcher(defaultView);
            requestDispatcher.include(request, response);
        }
    } catch (Exception e) {
        e.printStackTrace();
        throw new PortletException(e);
    }
}
