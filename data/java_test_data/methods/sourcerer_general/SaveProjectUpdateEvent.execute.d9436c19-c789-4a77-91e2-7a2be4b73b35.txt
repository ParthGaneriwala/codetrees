public boolean execute(ComponentContext context) {
    boolean result = false;
    Connection db = null;
    try {
        db = getConnection(context);
        Project thisProject = (Project) context.getThisObject();
        Project prevProject = (Project) context.getPreviousObject();
        // load the user that updated the project
        User user = UserUtils.loadUser(thisProject.getModifiedBy());
        Project userProfile = ProjectUtils.loadProject(user.getProfileProjectId());
        if (userProfile == null) {
            // NOTE: likely if using the API and using the API user
            return false;
        }
        // user is updating his/her own profile
        if (userProfile.getId() == thisProject.getId()) {
            // Prepare the wiki links
            context.setParameter("user", WikiLink.generateLink(userProfile));
            // Insert the history
            ProjectHistory history = new ProjectHistory();
            history.setEnteredBy(user.getId());
            history.setProjectId(userProfile.getId());
            history.setLinkObject(ProjectHistoryList.PROFILE_OBJECT);
            history.setEventType(ProjectHistoryList.UPDATE_USER_PROFILE_EVENT);
            history.setLinkItemId(userProfile.getId());
            history.setDescription(context.getParameter(HISTORY_UPDATE_USER_PROFILE_TEXT));
            history.insert(db);
        } else {
            // user just became the owner of this project
            if (prevProject.getOwner() != thisProject.getOwner() && thisProject.getOwner() == user.getId()) {
                // load the user who is now the owner of this listing
                User owner = UserUtils.loadUser(thisProject.getOwner());
                Project ownerProfile = ProjectUtils.loadProject(user.getProfileProjectId());
                // Prepare the wiki links
                context.setParameter("user", WikiLink.generateLink(ownerProfile));
                context.setParameter("profile", WikiLink.generateLink(thisProject));
                // Insert the history
                ProjectHistory history = new ProjectHistory();
                history.setEnteredBy(owner.getId());
                history.setProjectId(thisProject.getId());
                history.setLinkObject(ProjectHistoryList.PROFILE_OBJECT);
                history.setEventType(ProjectHistoryList.BECOME_PROFILE_OWNER_EVENT);
                history.setLinkItemId(thisProject.getId());
                // Prepare the wiki links
                Template template = new Template();
                template.addParseElement("user", WikiLink.generateLink(ownerProfile));
                template.addParseElement("profile", WikiLink.generateLink(thisProject));
                history.setDescription(context.getParameter(HISTORY_BECOME_PROFILE_OWNER_TEXT));
                history.insert(db);
            } else {
                // The user updated this listing
                // Prepare the wiki links
                context.setParameter("user", WikiLink.generateLink(userProfile));
                context.setParameter("profile", WikiLink.generateLink(thisProject));
                // Insert the history
                ProjectHistory history = new ProjectHistory();
                history.setEnteredBy(user.getId());
                history.setProjectId(thisProject.getId());
                history.setLinkObject(ProjectHistoryList.PROFILE_OBJECT);
                history.setEventType(ProjectHistoryList.UPDATE_PROFILE_EVENT);
                history.setLinkItemId(thisProject.getId());
                history.setDescription(context.getParameter(HISTORY_UPDATE_PROFILE_TEXT));
                history.insert(db);
            }
        }
        result = true;
    } catch (Exception e) {
        e.printStackTrace(System.out);
    } finally {
        freeConnection(context, db);
    }
    return result;
}
