public void sort(int column) {
    /*BeanTableCell cell;
        for (int i = 0; i < cells.length; i++) {
            cell = cells[i];
            if (!cell.stopCellEditing()) {
                cell.cancelCellEditing();
            }
        }*/
    // TODO fix sorting breaking after columns are re-ordered
    // System.out.println("Sorting column: " + column);
    sorting = true;
    ArrayList list = new ArrayList();
    Object value;
    for (int i = 0; i < model.getRowCount(); i++) {
        // System.out.println("Value: " + table.getValueAt(i, column) + ", " + i);
        value = table.getValueAt(i, column);
        if (value != null) {
            list.add(value);
        } else {
            Class c = getClassAt(column);
            if (c == Calendar.class) {
                value = new GregorianCalendar();
            } else {
                Constructor constructor;
                try {
                    try {
                        constructor = c.getConstructor(new Class[0]);
                        value = constructor.newInstance(new Object[0]);
                    } catch (Exception e1) {
                        try {
                            constructor = c.getConstructor(new Class[] { String.class });
                        } catch (Exception e2) {
                            System.err.println("Cannot sort because of null in class " + c.getName());
                            e2.printStackTrace();
                            sorting = false;
                            return;
                        }
                        value = constructor.newInstance(new Object[] { "0" });
                    }
                } catch (Exception e3) {
                    System.err.println("Cannot sort because of null in class " + c.getName());
                    e3.printStackTrace();
                    sorting = false;
                    return;
                }
            }
            list.add(value);
        }
    }
    ArrayList sorted = new ArrayList(list);
    Collections.sort(sorted);
    if (lastSorted == column) {
        Collections.reverse(sorted);
        lastSorted = -1;
    } else {
        lastSorted = column;
    }
    int[] placement = new int[list.size()];
    for (int i = 0; i < list.size(); i++) {
        placement[i] = -1;
    }
    boolean used;
    for (int i = 0; i < sorted.size(); i++) {
        for (int j = 0; j < sorted.size(); j++) {
            if (list.get(i) == sorted.get(j)) {
                used = false;
                for (int k = 0; k < placement.length; k++) {
                    if (placement[k] == j)
                        used = true;
                }
                if (!used) {
                    placement[i] = j;
                    break;
                }
            }
        }
    }
    Object[] sortedData = new Object[placement.length];
    for (int i = 0; i < placement.length; i++) {
        sortedData[placement[i]] = data.get(i);
        model.removeRow(0);
    }
    data = Collections.synchronizedList(new ArrayList());
    for (int i = 0; i < sortedData.length; i++) {
        add(sortedData[i]);
    }
    sorting = false;
}
