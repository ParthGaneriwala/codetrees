public void testOptionRenegotiation() throws Exception {
    boolean negotiation1_ok = false;
    byte[] buffread = new byte[6];
    byte[] send = { (byte) TelnetCommand.IAC, (byte) TelnetCommand.DO, (byte) TelnetOption.ECHO, (byte) TelnetCommand.IAC, (byte) TelnetCommand.DONT, (byte) TelnetOption.SUPPRESS_GO_AHEAD, (byte) TelnetCommand.IAC, (byte) TelnetCommand.WONT, (byte) TelnetOption.SUPPRESS_GO_AHEAD };
    byte[] expected = { (byte) TelnetCommand.IAC, (byte) TelnetCommand.WONT, (byte) TelnetOption.SUPPRESS_GO_AHEAD, (byte) TelnetCommand.IAC, (byte) TelnetCommand.DONT, (byte) TelnetOption.SUPPRESS_GO_AHEAD };
    byte[] buffread2 = new byte[3];
    byte[] send2 = { (byte) TelnetCommand.IAC, (byte) TelnetCommand.DONT, (byte) TelnetOption.ECHO };
    byte[] expected2 = { (byte) TelnetCommand.IAC, (byte) TelnetCommand.WONT, (byte) TelnetOption.ECHO };
    InputStream is = OPTIONS.server.getInputStream();
    OutputStream os = OPTIONS.server.getOutputStream();
    Thread.sleep(1000);
    is.skip(is.available());
    os.write(send);
    os.flush();
    Thread.sleep(1000);
    if (is.available() == 6) {
        is.read(buffread);
        if (equalBytes(buffread, expected))
            negotiation1_ok = true;
        if (negotiation1_ok) {
            negotiation1_ok = false;
            os.write(send2);
            os.flush();
            Thread.sleep(1000);
            if (is.available() == 3) {
                is.read(buffread2);
                if (equalBytes(buffread2, expected2))
                    negotiation1_ok = true;
            }
        }
    }
    assertTrue(negotiation1_ok);
    assertTrue(!OPTIONS.client.getLocalOptionState(TelnetOption.ECHO));
}
