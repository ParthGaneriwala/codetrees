public void testInsertAndSelectUser() throws Exception {
    String username = "jsmith@concursive.com";
    {
        DataRecord record = new DataRecord();
        record.setName("user");
        record.setAction(DataRecord.INSERT);
        record.setShareKey(true);
        record.addField("firstName", "John");
        record.addField("lastName", "Smith");
        record.addField("username", username);
        record.addField("password", PasswordHash.encrypt("password"));
        record.addField("groupId", GROUP_ID);
        record.addField("departmentId", "1");
        record.addField("enabled", true);
        api.save(record);
    }
    {
        // build user list in the same transaction
        DataRecord record = new DataRecord();
        record.setName("userList");
        record.setAction(DataRecord.SELECT);
        record.addField("userId", "$C{user.id}");
        record.addField("username", username);
        api.save(record);
        // When a SELECT action is used, metadata must be supplied for returned records
        ArrayList<String> meta = new ArrayList<String>();
        meta.add("id");
        meta.add("password");
        api.setTransactionMeta(meta);
    }
    // Process the complete transaction
    processTheTransactions(api, packetContext);
    assertFalse("API reported a transaction error: " + api.getLastResponse(), api.hasError());
    assertTrue("Couldn't find inserted user", api.getRecordCount() == 1);
    User user = null;
    ArrayList<Object> userListObjects = api.getRecords("com.concursive.connect.web.modules.login.dao.User");
    assertTrue(userListObjects.size() == 1);
    int count = 0;
    for (Object userObject : userListObjects) {
        user = (User) userObject;
        User thisUser = new User(db, user.getId());
        assertTrue("Password isn't encrypted", !thisUser.getPassword().equals("password"));
        thisUser.getProfileProject().delete(db, null);
        assertTrue("Password isn't encrypted", thisUser.getPassword().equals(PasswordHash.encrypt("password")));
        assertTrue(thisUser.delete(db) == 1);
        count++;
    }
    assertTrue("Delete inserted user error", count == 1);
}
