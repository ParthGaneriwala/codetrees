@Override
public void endElement(String uri, String localName, String qName) throws org.xml.sax.SAXException {
    path.pop();
    if (qName.equals("regex")) {
        for (String lang : languagesToCheck) {
            String regexElem = values.get(lang);
            if (regexElem != "" && regexElem != null) {
                // String buf = regexElem.trim();
                String expandedRegex = null;
                if (lang.equals("DE")) {
                    expandedRegex = helper_DE.replaceMacros(regexElem, "DE");
                } else if (lang.equals("EN")) {
                    expandedRegex = helper_EN.replaceMacros(regexElem, "EN");
                } else if (lang.equals("IT")) {
                    expandedRegex = helper_IT.replaceMacros(regexElem, "IT");
                }
                Reader reader;
                // any string to match, we don't care for result
                String stringToMatch = "#POSITIVE##SATZENDE#";
                // String result = null;
                Bob_Lexer lexer;
                Bob_Parser parser;
                Bob_TreeParser treeparser;
                MyAST tree = null;
                try {
                    reader = new StringReader(expandedRegex);
                    lexer = new Bob_Lexer(reader);
                    parser = new Bob_Parser(lexer);
                    parser.setASTNodeClass("it.unibz.lib.bob.check.MyAST");
                    treeparser = new Bob_TreeParser();
                    treeparser.setASTNodeClass("it.unibz.lib.bob.check.MyAST");
                    parser.bExpression();
                    tree = (MyAST) parser.getAST();
                    // result = "(" + treeparser.bExpression(tree,
                    // stringToMatch) + ")";
                    treeparser.bExpression(tree, stringToMatch);
                // System.out.println(result);
                // output AST
                /*
             * try { BufferedWriter out = new BufferedWriter( new
             * OutputStreamWriter(new FileOutputStream( "ast.txt"),
             * "UTF8")); out.write(tree.toStringTree());
             * out.close(); } catch (UnsupportedEncodingException
             * ue) { System.err.println("Not supported : "); } catch
             * (IOException e) { System.err.println(e.getMessage());
             * }
             */
                /*
             * ASTFrame frame = new ASTFrame("The tree", tree);
             * frame.setVisible(true);
             */
                // end output AST
                } catch (RecognitionException e) {
                    testResults = testResults + "+++ Error in a regular expression " + "pattern (OUTSIDE of quotation marks (\"\")):\n" + e.toString();
                    testResults = testResults + "(around line number " + (errNum) + " in the Topic Tree xml file)";
                // throw new SAXException("Regex-Fehler");
                // System.exit(1);
                } catch (TokenStreamException e) {
                    testResults = testResults + "+++ Error in a regular expression " + "pattern (INSIDE of quotation marks (\"\")): Invalid " + "character.\n" + e.toString();
                    testResults = testResults + "(around line number " + (errNum) + " in the Topic Tree xml file)";
                } catch (ANTLRException e) {
                    testResults = testResults + "+++ Error in the regular expression " + "pattern. " + e.toString();
                    testResults = testResults + "(around line number " + (errNum) + " in the Topic Tree xml file)";
                } catch (Exception e) {
                    if (e.getMessage().endsWith("Expression is too large.")) {
                        testResults = testResults + "+++ Error in a regular expression " + "pattern (INSIDE of quotation marks (\"\")): Pattern " + "is too large/complex!";
                    } else if (e.getMessage().endsWith("Unmatched parentheses.")) {
                        testResults = testResults + "+++ Error in a regular expression " + "pattern (INSIDE of quotation marks (\"\")): " + "Parentheses don't match:\n" + e.toString();
                    } else {
                        testResults = testResults + "+++ Unknown error in the regular " + "expression pattern (INSIDE of quotation marks (\"\")):\n" + e.toString();
                    }
                    testResults = testResults + "(around line number " + (errNum) + " in the Topic Tree xml file)";
                }
            }
        }
    }
}
