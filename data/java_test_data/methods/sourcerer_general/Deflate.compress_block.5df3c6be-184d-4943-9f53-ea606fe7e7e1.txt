void compress_block(short[] ltree, short[] dtree) {
    // distance of matched string
    int dist;
    // match length or unmatched char (if dist == 0)
    int lc;
    // running index in l_buf
    int lx = 0;
    // the code to send
    int code;
    // number of extra bits to send
    int extra;
    if (last_lit != 0) {
        do {
            dist = ((pending_buf[d_buf + lx * 2] << 8) & 0xff00) | (pending_buf[d_buf + lx * 2 + 1] & 0xff);
            lc = (pending_buf[l_buf + lx]) & 0xff;
            lx++;
            if (dist == 0) {
                // send a literal byte
                send_code(lc, ltree);
            } else {
                // Here, lc is the match length - MIN_MATCH
                code = Tree._length_code[lc];
                // send the length
                send_code(code + LITERALS + 1, ltree);
                // code
                extra = Tree.extra_lbits[code];
                if (extra != 0) {
                    lc -= Tree.base_length[code];
                    // send the extra length bits
                    send_bits(lc, extra);
                }
                // dist is now the match distance - 1
                dist--;
                code = Tree.d_code(dist);
                // send the distance code
                send_code(code, dtree);
                extra = Tree.extra_dbits[code];
                if (extra != 0) {
                    dist -= Tree.base_dist[code];
                    // send the extra distance bits
                    send_bits(dist, extra);
                }
            }
        // literal or match pair ?
        // Check that the overlay between pending_buf and d_buf+l_buf is
        // ok:
        } while (lx < last_lit);
    }
    send_code(END_BLOCK, ltree);
    last_eob_len = ltree[END_BLOCK * 2 + 1];
}
