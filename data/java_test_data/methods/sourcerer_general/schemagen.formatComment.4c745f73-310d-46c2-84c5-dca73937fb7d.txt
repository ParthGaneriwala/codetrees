protected String formatComment(String comment) {
    StringBuffer buf = new StringBuffer();
    buf.append("/** <p>");
    boolean inSpace = false;
    int pos = buf.length();
    boolean singleLine = true;
    // add the prefix to the start of each line
    for (int i = 0; i < comment.length(); i++) {
        char c = comment.charAt(i);
        // compress whitespace
        if (Character.isWhitespace(c)) {
            if (inSpace) {
                // more than one space is ignored
                continue;
            } else {
                // map all whitespace to 0x20
                c = ' ';
                inSpace = true;
            }
        } else {
            inSpace = false;
        }
        // escapes?
        if (c == '\\') {
            c = comment.charAt(++i);
            switch(c) {
                case 'n':
                    buf.append(m_nl);
                    pos = indentTo(1, buf);
                    buf.append(" *  ");
                    pos += 3;
                    singleLine = false;
                    break;
                default:
                    // add other escape sequences above
                    break;
            }
        } else if (c == '<') {
            buf.append("&lt;");
            pos += 4;
        } else if (c == '>') {
            buf.append("&gt;");
            pos += 4;
        } else if (c == '&') {
            buf.append("&amp;");
            pos += 5;
        } else {
            // add the char
            buf.append(c);
            pos++;
        }
        // wrap any very long lines at 120 chars
        if ((pos > COMMENT_LENGTH_LIMIT) && (inSpace)) {
            buf.append(m_nl);
            pos = indentTo(1, buf);
            buf.append(" *  ");
            pos += 3;
            singleLine = false;
        }
    }
    buf.append("</p>");
    buf.append(singleLine ? "" : m_nl);
    indentTo(singleLine ? 0 : 1, buf);
    buf.append(" */");
    return buf.toString();
}
