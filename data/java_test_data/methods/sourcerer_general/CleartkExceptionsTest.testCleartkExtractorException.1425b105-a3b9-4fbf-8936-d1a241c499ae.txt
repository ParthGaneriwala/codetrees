@Test
public void testCleartkExtractorException() {
    CleartkExtractorException e;
    e = CleartkExtractorException.invalidTypePath("foo.bar.baz", null);
    Assert.assertTrue(e.getMessage(), e.getMessage().contains("valid"));
    Assert.assertTrue(e.getMessage(), e.getMessage().contains("foo.bar.baz"));
    Assert.assertTrue(e.getMessage(), e.getMessage().contains("null"));
    e = CleartkExtractorException.moreThanOneName("abc", "def");
    Assert.assertTrue(e.getMessage(), e.getMessage().contains("name"));
    Assert.assertTrue(e.getMessage(), e.getMessage().contains("abc"));
    Assert.assertTrue(e.getMessage(), e.getMessage().contains("def"));
    e = CleartkExtractorException.noAnnotationInWindow(Annotation.class, null);
    Assert.assertTrue(e.getMessage(), e.getMessage().contains("window"));
    Assert.assertTrue(e.getMessage(), e.getMessage().contains(Annotation.class.getName()));
    Assert.assertTrue(e.getMessage(), e.getMessage().contains("null"));
    e = CleartkExtractorException.noAnnotationMatchingWindow(Annotation.class, null);
    Assert.assertTrue(e.getMessage(), e.getMessage().contains("window"));
    Assert.assertTrue(e.getMessage(), e.getMessage().contains(Annotation.class.getName()));
    Assert.assertTrue(e.getMessage(), e.getMessage().contains("null"));
    Feature feature = new Feature() {

        @Override
        public int compareTo(Feature o) {
            return 0;
        }

        @Override
        public boolean isMultipleReferencesAllowed() {
            return false;
        }

        @Override
        public String getShortName() {
            return null;
        }

        @Override
        public Type getRange() {
            return null;
        }

        @Override
        public String getName() {
            return null;
        }

        @Override
        public Type getDomain() {
            return null;
        }
    };
    e = CleartkExtractorException.notPrimitive(feature);
    Assert.assertTrue(e.getMessage(), e.getMessage().contains("primitive"));
    Assert.assertTrue(e.getMessage(), e.getMessage().contains("domain=null"));
    Assert.assertTrue(e.getMessage(), e.getMessage().contains("range=null"));
    e = CleartkExtractorException.notPrimitiveArray(feature);
    Assert.assertTrue(e.getMessage(), e.getMessage().contains("primitive array"));
    Assert.assertTrue(e.getMessage(), e.getMessage().contains("domain=null"));
    Assert.assertTrue(e.getMessage(), e.getMessage().contains("range=null"));
    e = CleartkExtractorException.wrongAnnotationType(Annotation.class, null);
    Assert.assertTrue(e.getMessage(), e.getMessage().contains("type"));
    Assert.assertTrue(e.getMessage(), e.getMessage().contains(Annotation.class.getName()));
    Assert.assertTrue(e.getMessage(), e.getMessage().contains("null"));
}
