private void executeAction() {
    String actualName = findString(name, "name", "Action name is required. Example: updatePerson");
    if (actualName == null) {
        throw new StrutsException("Unable to find value for name " + name);
    }
    // handle "name!method" convention.
    final String actionName;
    final String methodName;
    int exclamation = actualName.lastIndexOf("!");
    if (exclamation != -1) {
        actionName = actualName.substring(0, exclamation);
        methodName = actualName.substring(exclamation + 1);
    } else {
        actionName = actualName;
        methodName = null;
    }
    String namespace;
    if (this.namespace == null) {
        namespace = TagUtils.buildNamespace(actionMapper, getStack(), req);
    } else {
        namespace = findString(this.namespace);
    }
    // get the old value stack from the request
    ValueStack stack = getStack();
    // execute at this point, after params have been set
    try {
        proxy = actionProxyFactory.createActionProxy(namespace, actionName, createExtraContext(), executeResult, true);
        if (null != methodName) {
            proxy.setMethod(methodName);
        }
        // set the new stack into the request for the taglib to use
        req.setAttribute(ServletActionContext.STRUTS_VALUESTACK_KEY, proxy.getInvocation().getStack());
        proxy.execute();
    } catch (Exception e) {
        String message = "Could not execute action: " + namespace + "/" + actualName;
        LOG.error(message, e);
    } finally {
        // set the old stack back on the request
        req.setAttribute(ServletActionContext.STRUTS_VALUESTACK_KEY, stack);
    }
    if ((getId() != null) && (proxy != null)) {
        final Map context = stack.getContext();
        context.put(getId(), proxy.getAction());
    }
}
