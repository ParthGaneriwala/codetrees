public MemED transformar(LinkedList lista) throws CompiladorException {
    this.outPut = new StringBuffer("");
    Instruccion inst;
    boolean fin = false;
    while (!fin) {
        inst = ((Instruccion) (lista.get(Pc)));
        String operacion = inst.getOperacion();
        if (operacion.equals("apila")) {
            this.apila(inst.getDato());
        } else if (operacion.equals("incrementa")) {
            this.incrementaC(inst.getDato());
        } else if (operacion.equals("decrementa")) {
            this.decrementaC(inst.getDato());
        } else if (operacion.equals("apila-h")) {
            this.apilaH();
        } else if (operacion.equals("incrementaH")) {
            this.incrementaH(inst.getDato());
        } else if (operacion.equals("apila-ind")) {
            this.apila_ind();
        } else if (operacion.equals("desapila-ind")) {
            this.desapila_ind();
        } else if (operacion.equals("retorno")) {
            this.retorno((Integer) inst.getDato());
        } else if (operacion.equals("llamar")) {
            this.llamar(inst.getNivel(), inst.getDato());
        } else if (operacion.equals("desapila")) {
            this.desapila();
        } else if (operacion.equals("suma")) {
            this.suma();
        } else if (operacion.equals("resta")) {
            this.resta();
        } else if (operacion.equals("multiplica")) {
            this.producto();
        } else if (operacion.equals("divE")) {
            this.divisionEntera();
        } else if (operacion.equals("div")) {
            this.divisionReal();
        } else if (operacion.equals("mod")) {
            this.modulo();
        } else if (operacion.equals("not")) {
            this.NOTLogico();
        } else if (operacion.equals("mayor")) {
            this.mayor();
        } else if (operacion.equals("menor")) {
            this.menor();
        } else if (operacion.equals("mayorIg")) {
            this.mayorIg();
        } else if (operacion.equals("menorIg")) {
            this.menorIg();
        } else if (operacion.equals("igual")) {
            this.igual();
        } else if (operacion.equals("distinto")) {
            this.distinto();
        } else if (operacion.equals("signo")) {
            this.cambiarSigno();
        } else if (operacion.equals("incremento")) {
            this.incremento();
        } else if (operacion.equals("decremento")) {
            this.decremento();
        } else if (operacion.equals("copia")) {
            this.copia(inst.getDato());
        } else if (operacion.equals("ir-f")) {
            this.ir_f(inst.getDato());
        } else if (operacion.equals("ir-v")) {
            this.ir_v(inst.getDato());
        } else if (operacion.equals("ir-a")) {
            this.ir_a(inst.getDato());
        } else if (operacion.equals("stop")) {
            outPut.append("\nEjecuci√≥n finalizada correctamente");
            fin = true;
        } else {
            outPut.append("\nError: instruccion desconocida");
            fin = true;
        }
    }
    return memoria;
}
