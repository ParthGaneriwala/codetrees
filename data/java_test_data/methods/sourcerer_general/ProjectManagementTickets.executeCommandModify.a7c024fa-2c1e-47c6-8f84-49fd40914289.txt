public String executeCommandModify(ActionContext context) {
    Connection db = null;
    Ticket thisTicket = null;
    try {
        String ticketId = context.getRequest().getParameter("id");
        db = this.getConnection(context);
        // Load the ticket
        thisTicket = (Ticket) context.getFormBean();
        thisTicket.queryRecord(db, Integer.parseInt(ticketId));
        // Load the project
        Project thisProject = retrieveAuthorizedProject(thisTicket.getProjectId(), context);
        // allow access to edit if assigned to this user and ticket is not closed
        if (!hasProjectAccess(context, thisProject.getId(), "project-tickets-edit") && !(hasProjectAccess(context, thisProject.getId(), "project-tickets-view") && thisTicket.getClosed() == null && thisTicket.getAssignedTo() == getUserId(context))) {
            return "PermissionError";
        }
        // Deny if this user is not allowed to view other's tickets
        if (!hasProjectAccess(context, thisProject.getId(), "project-tickets-other") && thisTicket.getEnteredBy() != getUser(context).getId() && thisTicket.getAssignedTo() != getUser(context).getId()) {
            return "PermissionError";
        }
        // The ticket is closed and cannot be modified
        if (thisTicket.getClosed() != null) {
            return "ClosedOK";
        }
        // Load the distribution list and prepare the first array of those on list
        TicketContactList contactList = new TicketContactList();
        contactList.setTicketId(thisTicket.getId());
        contactList.buildList(db);
        StringBuffer vectorUserId = new StringBuffer();
        StringBuffer vectorState = new StringBuffer();
        // Convert the list into an array for javascript
        HtmlSelect distributionList = new HtmlSelect();
        Iterator i = contactList.iterator();
        while (i.hasNext()) {
            TicketContact thisContact = (TicketContact) i.next();
            distributionList.addItem(thisContact.getValue(), thisContact.getContactName());
            vectorUserId.append(thisContact.getValue());
            vectorState.append("1");
            if (i.hasNext()) {
                vectorUserId.append("|");
                vectorState.append("|");
            }
        }
        context.getRequest().setAttribute("distributionList", distributionList);
        context.getRequest().setAttribute("vectorUserId", vectorUserId.toString());
        context.getRequest().setAttribute("vectorState", vectorState.toString());
        // addRecentItem(context, newTic);
        context.getRequest().setAttribute("isEditing", "true");
        return (executeCommandAdd(context));
    } catch (Exception e) {
        context.getRequest().setAttribute("Error", e);
        return ("SystemError");
    } finally {
        this.freeConnection(context, db);
    }
}
