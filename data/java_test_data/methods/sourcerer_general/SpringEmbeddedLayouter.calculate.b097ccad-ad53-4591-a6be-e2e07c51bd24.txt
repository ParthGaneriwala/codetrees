// initializeSpringEmbeddedLayouter()
public void calculate() {
    /*
          // initialize the layouting.
          nodeCount = graphView.getNodeViewCount();
          edgeCount = graphView.getEdgeViewCount();
          */
    // initialize progress
    int currentProgress = 0;
    this.maxValue = nodeCount * (int) averageIterationsPerNode;
    // initialize the index map
    nodeIndexToMatrixIndexMap = new HashMap();
    matrixIndexToNodeIndexMap = new TreeMap();
    Iterator nodes = graphView.getNodeViewsIterator();
    int count = 0;
    while (nodes.hasNext()) {
        NodeView nodeView = (NodeView) nodes.next();
        nodeIndexToMatrixIndexMap.put(new Integer(nodeView.getRootGraphIndex()), new Integer(count));
        matrixIndexToNodeIndexMap.put(new Integer(count), new Integer(nodeView.getRootGraphIndex()));
        count++;
    }
    // Stop if all nodes are closer together than this euclidean distance.
    // TODO: Why is this an appropriate threshold?
    double euclidean_distance_threshold = (0.5 * (nodeCount + edgeCount));
    // Stop if the potential energy doesn't go down anymore.
    double potential_energy_percent_change_threshold = .001;
    int num_iterations = (int) ((nodeCount * averageIterationsPerNode) / numLayoutPasses);
    List partials_list = createPartialsList();
    PotentialEnergy potential_energy = new PotentialEnergy();
    Iterator node_views_iterator;
    NodeView node_view;
    PartialDerivatives partials;
    PartialDerivatives furthest_node_partials = null;
    double current_progress_temp;
    double setup_progress = 0.0;
    try {
        for (layoutPass = 0; layoutPass < numLayoutPasses; layoutPass++) {
            setupForLayoutPass();
            // System.out.println( " DO Layout Pass " );
            // initialize this layout pass
            potential_energy.reset();
            partials_list.clear();
            // Calculate all node distances.  Keep track of the furthest.
            node_views_iterator = graphView.getNodeViewsIterator();
            while (node_views_iterator.hasNext()) {
                node_view = (NodeView) node_views_iterator.next();
                partials = new PartialDerivatives(node_view);
                calculatePartials(partials, null, potential_energy, false);
                partials_list.add(partials);
                if ((furthest_node_partials == null) || (partials.euclideanDistance > furthest_node_partials.euclideanDistance)) {
                    // //System.out.println( "P: "+furthest_node_partials.euclideanDistance+" E: "+partials.euclideanDistance );
                    furthest_node_partials = partials;
                }
            }
            // furthest node towards where it wants to be.
            for (int iterations_i = 0; ((iterations_i < num_iterations) && (furthest_node_partials.euclideanDistance >= euclidean_distance_threshold)); iterations_i++) {
                // TODO: REMOVE
                // System.out.println( "At iteration " + layoutPass + ":" + iterations_i + ", furthest_node_partials is " + furthest_node_partials + "." );
                furthest_node_partials = moveNode(furthest_node_partials, partials_list, potential_energy);
                // Calculate Percentage.  This must be a value between 0..100.
                int percentComplete = (int) (((double) currentProgress / maxValue) * 100);
                // Estimate Time Remaining
                long timeRemaining = maxValue - currentProgress;
                // This automatically updates the UI Component w/ progress bar.
                if (taskMonitor != null) {
                    taskMonitor.setPercentCompleted(percentComplete);
                    taskMonitor.setStatus("Calculating network layout: " + currentProgress + "of " + maxValue);
                    taskMonitor.setEstimatedTimeRemaining(timeRemaining);
                }
                if (interrupted) {
                    throw new InterruptedException();
                }
                currentProgress++;
            }
        // End for each iteration, attempt to minimize the total potential
        // energy by moving the node that is furthest from where it should be.
        }
    // End for each layout pass
    } catch (InterruptedException e) {
        taskMonitor.setException(e, "Layout cancelled");
    }
}
