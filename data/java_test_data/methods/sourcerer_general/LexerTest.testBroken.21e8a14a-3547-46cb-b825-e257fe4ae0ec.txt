public void testBroken() throws Exception {
    // These should have a meaningful return from the lexer
    // These fail with the old lexer
    // "unexpected character"
    TokenStream ts = getLexerFor("\\");
    LocatableToken token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.INVALID, token.getType());
    // right bracket, then an invalid, then new line
    ts = getLexerFor("]\\\n");
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.RBRACK, token.getType());
    assertEquals(1, token.getColumn());
    assertEquals(2, token.getEndColumn());
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.INVALID, token.getType());
    assertEquals(2, token.getColumn());
    assertEquals(3, token.getEndColumn());
    ts = getLexerFor("/* Unterminated comment\n}");
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.INVALID, token.getType());
    assertEquals(1, token.getColumn());
    assertEquals(1, token.getLine());
    assertEquals(2, token.getEndColumn());
    assertEquals(2, token.getEndLine());
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.EOF, token.getType());
    assertEquals(2, token.getColumn());
    assertEquals(2, token.getEndLine());
    // ts = getLexerFor("\\u95 incomplete unicode escape");
    // token = (LocatableToken) ts.nextToken();
    // assertEquals(JavaTokenTypes.INVALID, token.getType());
    // assertEquals(1, token.getColumn());
    // assertEquals(6, token.getEndColumn());
    // token = (LocatableToken) ts.nextToken();
    // assertEquals(JavaTokenTypes.IDENT, token.getType());
    // assertEquals(7, token.getColumn());
    ts = getLexerFor(".. incomplete ellipsis");
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.INVALID, token.getType());
    assertEquals(1, token.getColumn());
    assertEquals(3, token.getEndColumn());
    token = (LocatableToken) ts.nextToken();
    assertEquals(4, token.getColumn());
    // Unterminated character literal
    ts = getLexerFor("  'ab + -\n an_identifier");
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.INVALID, token.getType());
    assertEquals(3, token.getColumn());
    assertEquals(10, token.getEndColumn());
    assertEquals(1, token.getLine());
    assertEquals(1, token.getEndLine());
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.IDENT, token.getType());
    assertEquals(2, token.getColumn());
    assertEquals(2, token.getLine());
    // Unterminated string literal
    ts = getLexerFor("  \"ab + -\n an_identifier");
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.INVALID, token.getType());
    assertEquals(3, token.getColumn());
    assertEquals(10, token.getEndColumn());
    assertEquals(1, token.getLine());
    assertEquals(1, token.getEndLine());
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.IDENT, token.getType());
    assertEquals(2, token.getColumn());
    assertEquals(2, token.getLine());
}
