// $ANTLR start "proc_writebool"
public final MyGrammarParser.proc_writebool_return proc_writebool() throws RecognitionException {
    MyGrammarParser.proc_writebool_return retval = new MyGrammarParser.proc_writebool_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token WRITEBOOL107 = null;
    Token EPAR108 = null;
    Token NOT109 = null;
    Token DPAR111 = null;
    MyGrammarParser.value_call_return value_call110 = null;
    CommonTree WRITEBOOL107_tree = null;
    CommonTree EPAR108_tree = null;
    CommonTree NOT109_tree = null;
    CommonTree DPAR111_tree = null;
    RewriteRuleTokenStream stream_EPAR = new RewriteRuleTokenStream(adaptor, "token EPAR");
    RewriteRuleTokenStream stream_NOT = new RewriteRuleTokenStream(adaptor, "token NOT");
    RewriteRuleTokenStream stream_WRITEBOOL = new RewriteRuleTokenStream(adaptor, "token WRITEBOOL");
    RewriteRuleTokenStream stream_DPAR = new RewriteRuleTokenStream(adaptor, "token DPAR");
    RewriteRuleSubtreeStream stream_value_call = new RewriteRuleSubtreeStream(adaptor, "rule value_call");
    try {
        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:229:16: ( WRITEBOOL EPAR ( NOT )? value_call DPAR -> ^( PROC_WRITEBOOL value_call ) )
        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:229:18: WRITEBOOL EPAR ( NOT )? value_call DPAR
        {
            WRITEBOOL107 = (Token) match(input, WRITEBOOL, FOLLOW_WRITEBOOL_in_proc_writebool1808);
            stream_WRITEBOOL.add(WRITEBOOL107);
            EPAR108 = (Token) match(input, EPAR, FOLLOW_EPAR_in_proc_writebool1810);
            stream_EPAR.add(EPAR108);
            // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:229:33: ( NOT )?
            int alt20 = 2;
            int LA20_0 = input.LA(1);
            if ((LA20_0 == NOT)) {
                alt20 = 1;
            }
            switch(alt20) {
                case 1:
                    // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:229:34: NOT
                    {
                        NOT109 = (Token) match(input, NOT, FOLLOW_NOT_in_proc_writebool1813);
                        stream_NOT.add(NOT109);
                    }
                    break;
            }
            pushFollow(FOLLOW_value_call_in_proc_writebool1817);
            value_call110 = value_call();
            state._fsp--;
            stream_value_call.add(value_call110.getTree());
            DPAR111 = (Token) match(input, DPAR, FOLLOW_DPAR_in_proc_writebool1819);
            stream_DPAR.add(DPAR111);
            // AST REWRITE
            // elements: value_call
            // token labels:
            // rule labels: retval
            // token list labels:
            // rule list labels:
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", retval != null ? retval.tree : null);
            root_0 = (CommonTree) adaptor.nil();
            // 229:56: -> ^( PROC_WRITEBOOL value_call )
            {
                // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:229:59: ^( PROC_WRITEBOOL value_call )
                {
                    CommonTree root_1 = (CommonTree) adaptor.nil();
                    root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(PROC_WRITEBOOL, "PROC_WRITEBOOL"), root_1);
                    adaptor.addChild(root_1, stream_value_call.nextTree());
                    adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
