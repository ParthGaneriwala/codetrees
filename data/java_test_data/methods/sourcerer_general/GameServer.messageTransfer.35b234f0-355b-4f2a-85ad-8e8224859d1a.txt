public void messageTransfer(String message) {
    String clientName, peerName;
    if (message.startsWith("/")) {
        if (message.startsWith("/changename ")) {
            clientName = message.substring(12);
            if (clientName.length() <= 0 || clientName.length() > 20 || clientName.startsWith("/") || clientNameHash.containsValue(clientName) || clientName.startsWith("changename") || clientName.startsWith("list") || clientName.startsWith("[inchess]") || clientName.startsWith("creatgame") || clientName.startsWith("joingame") || clientName.startsWith("yourname") || clientName.startsWith("userlist") || clientName.startsWith("chess") || clientName.startsWith("OK") || clientName.startsWith("reject") || clientName.startsWith("peer") || clientName.startsWith("peername") || clientName.startsWith("giveup") || clientName.startsWith("youwin") || clientName.startsWith("������")) {
                message = "��Ч����";
                Feedback(message);
            } else {
                if (clientNameHash.containsValue(("[inchess]" + (String) clientNameHash.get(clientSocket)))) {
                    synchronized (clientNameHash) {
                        clientNameHash.put((Socket) getHashKey(clientNameHash, ("[inchess]" + clientNameHash.get(clientSocket))), ("[inchess]" + clientName));
                        chessPeerTalk(("[inchess]" + clientName), ("/yourname " + ("[inchess]" + clientName)));
                    }
                } else if (chessPeerHash.containsKey(clientNameHash.get(clientSocket))) {
                    // ��Ϸ�ͻ��˸�����
                    synchronized (clientNameHash) {
                        clientNameHash.put((Socket) getHashKey(clientNameHash, ("[inchess]" + clientNameHash.get(clientSocket))), ("[inchess]" + clientName));
                    }
                    synchronized (chessPeerHash) {
                        // chessPeerHash���������ӳ��
                        chessPeerHash.put(clientName, chessPeerHash.get(clientNameHash.get(clientSocket)));
                        // chessPeerHashɾ����ӳ��
                        chessPeerHash.remove(clientNameHash.get(clientSocket));
                    }
                    // ����Ϸ�ͻ��˷���������
                    chessPeerTalk(("[inchess]" + clientName), ("/yourname " + ("[inchess]" + clientName)));
                    // ��peer��Ϸ�ͻ��˷���
                    chessPeerTalk((String) chessPeerHash.get(clientName), ("/peer " + "[inchess]" + clientName));
                } else if (chessPeerHash.containsValue(clientNameHash.get(clientSocket))) {
                    synchronized (clientNameHash) {
                        // ��Ϸ�ͻ��˸�����
                        clientNameHash.put((Socket) getHashKey(clientNameHash, ("[inchess]" + clientNameHash.get(clientSocket))), ("[inchess]" + clientName));
                    }
                    synchronized (chessPeerHash) {
                        // chessPeerHash����ӳ��
                        chessPeerHash.put((String) getHashKey(chessPeerHash, clientNameHash.get(clientSocket)), clientName);
                        // ����Ϸ�ͻ��˷���������
                        chessPeerTalk(("[inchess]" + clientName), ("/yourname " + ("[inchess]" + clientName)));
                    }
                    // ��peer��Ϸ�ͻ��˷���
                    chessPeerTalk((String) getHashKey(chessPeerHash, clientName), ("/peer " + "[inchess]" + clientName));
                }
                // message=clientNameHash.get(clientSocket)+"����Ϊ:"+clientName;
                message = clientName + " ������Ϸ";
                synchronized (clientNameHash) {
                    clientNameHash.put(clientSocket, clientName);
                }
                publicTalk(message);
                Feedback("/yourname " + (String) clientNameHash.get(clientSocket));
                publicTalk(getUserList());
            }
        } else if (message.equals("/list")) {
            Feedback(getUserList());
        } else if (message.startsWith("/creatgame [inchess]")) {
            String chessServerName = message.substring(20);
            synchronized (clientNameHash) {
                clientNameHash.put(clientSocket, message.substring(11));
            }
            synchronized (chessPeerHash) {
                chessPeerHash.put(chessServerName, "wait");
            }
            Feedback("/yourname " + clientNameHash.get(clientSocket));
            chessPeerTalk(chessServerName, "/OK");
            publicTalk(getUserList());
        } else if (message.startsWith("/joingame ")) {
            StringTokenizer userToken = new StringTokenizer(message, " ");
            String getUserToken, serverName, selfName;
            String[] chessNameOpt = { "0", "0" };
            int getOptNum = 0;
            while (userToken.hasMoreTokens()) {
                getUserToken = (String) userToken.nextToken(" ");
                if (getOptNum >= 1 && getOptNum <= 2) {
                    chessNameOpt[getOptNum - 1] = getUserToken;
                }
                getOptNum++;
            }
            serverName = chessNameOpt[0];
            selfName = chessNameOpt[1];
            if (chessPeerHash.containsKey(serverName) && chessPeerHash.get(serverName).equals("wait")) {
                synchronized (clientNameHash) {
                    clientNameHash.put(clientSocket, ("[inchess]" + selfName));
                }
                synchronized (chessPeerHash) {
                    chessPeerHash.put(serverName, selfName);
                }
                publicTalk(getUserList());
                chessPeerTalk(selfName, ("/peer " + "[inchess]" + serverName));
                chessPeerTalk(serverName, ("/peer " + "[inchess]" + selfName));
            } else {
                chessPeerTalk(selfName, "/reject");
                try {
                    clientClose();
                } catch (Exception ez) {
                }
            }
        } else if (message.startsWith("/[inchess]")) {
            int firstLocation = 0, lastLocation;
            lastLocation = message.indexOf(" ", 0);
            peerName = message.substring((firstLocation + 1), lastLocation);
            message = message.substring((lastLocation + 1));
            if (chessPeerTalk(peerName, message)) {
                Feedback("/error");
            }
        } else if (message.startsWith("/giveup ")) {
            String chessClientName = message.substring(8);
            if (chessPeerHash.containsKey(chessClientName) && !((String) chessPeerHash.get(chessClientName)).equals("wait")) {
                chessPeerTalk((String) chessPeerHash.get(chessClientName), "/youwin");
                synchronized (chessPeerHash) {
                    chessPeerHash.remove(chessClientName);
                }
            }
            if (chessPeerHash.containsValue(chessClientName)) {
                chessPeerTalk((String) getHashKey(chessPeerHash, chessClientName), "/youwin");
                synchronized (chessPeerHash) {
                    chessPeerHash.remove((String) getHashKey(chessPeerHash, chessClientName));
                }
            }
        } else {
            int firstLocation = 0, lastLocation;
            lastLocation = message.indexOf(" ", 0);
            if (lastLocation == -1) {
                Feedback("��Ч����");
                return;
            } else {
                peerName = message.substring((firstLocation + 1), lastLocation);
                message = message.substring((lastLocation + 1));
                message = (String) clientNameHash.get(clientSocket) + ">" + message;
                if (peerTalk(peerName, message)) {
                    Feedback("û������û�:" + peerName + "\n");
                }
            }
        }
    } else {
        message = clientNameHash.get(clientSocket) + ">" + message;
        server.messageBoard.append(message + "\n");
        publicTalk(message);
        server.messageBoard.setCaretPosition(server.messageBoard.getText().length());
    }
}
