private void generateMipsStyleCode() {
    // Only one destination
    Temp destTemp = null;
    if (destList != null) {
        destTemp = (Temp) destList.elementAt(0);
    }
    int numSrcTemps = 0;
    if (srcList != null) {
        numSrcTemps = srcList.size();
    }
    if (operationCode == ADD || operationCode == MINUS || operationCode == MUL || operationCode == DIV) {
        // A mathematical operation; should have one destination and two source
        // variables - either two temporaries or a temporary and an immediate value
        String lhsOperand = ((Temp) srcList.elementAt(0)).toString();
        String rhsOperand = "";
        if (numSrcTemps == 2)
            rhsOperand = ((Temp) srcList.elementAt(1)).toString();
        else
            rhsOperand = "" + immediateValue.intValue();
        if (operationCode == ADD)
            instructionDescription = tab + "add " + destTemp.toString() + ", " + lhsOperand + ", " + rhsOperand + newLine;
        else if (operationCode == MINUS)
            instructionDescription = tab + "sub " + destTemp.toString() + ", " + lhsOperand + ", " + rhsOperand + newLine;
        else if (operationCode == MUL)
            instructionDescription = tab + "mul " + destTemp.toString() + ", " + lhsOperand + ", " + rhsOperand + newLine;
        else if (operationCode == DIV)
            instructionDescription = tab + "div " + destTemp.toString() + ", " + lhsOperand + ", " + rhsOperand + newLine;
    } else if (operationCode == LOAD_IMMEDIATE_VALUE) {
        instructionDescription = tab + "li " + destTemp.toString() + ", " + immediateValue.intValue() + newLine;
    } else if (operationCode == STORE_WORD_INTO_ADDRESS_AT_TEMP) {
        Temp srcTemp = (Temp) srcList.elementAt(0);
        Temp addrTemp = (Temp) srcList.elementAt(1);
        int offSet = immediateValue.intValue();
        String destStr = "";
        if (offSet == 0)
            destStr = "(" + addrTemp.toString() + ")" + newLine;
        else
            destStr = offSet + "(" + addrTemp.toString() + ")" + newLine;
        instructionDescription = tab + "sw " + srcTemp.toString() + ", " + destStr;
    } else if (operationCode == STORE_WORD_INTO_CONST_ADDRESS) {
        Temp srcTemp = (Temp) srcList.elementAt(0);
        // TODO - Check if the following statement is correct instruction
        instructionDescription = tab + "sw " + srcTemp.toString() + ", " + immediateValue.intValue() + newLine;
    } else if (operationCode == MOVE_TEMP_TO_TEMP) {
        Temp srcTemp = (Temp) srcList.elementAt(0);
        // TODO - Check if the following statement is correct instruction
        instructionDescription = tab + "move " + destTemp.toString() + ", " + srcTemp.toString() + newLine;
    } else if (operationCode == LOAD_ADDRESS) {
        if (// Load address from label
        label != null)
            instructionDescription = tab + "la " + destTemp.toString() + ", " + label + newLine;
        else if (// Load address from constant value
        immediateValue != null)
            instructionDescription = tab + "la " + destTemp.toString() + ", " + immediateValue.intValue() + newLine;
        else // Load address from register
        {
            Temp srcTemp = (Temp) srcList.elementAt(0);
            instructionDescription = tab + "la " + destTemp.toString() + ", " + "(" + srcTemp.toString() + ")" + newLine;
        }
    } else if (operationCode == LOAD_FROM_TEMP_OFFSET_EXP_MEM) {
        int offSet = immediateValue.intValue();
        Temp srcTemp = (Temp) srcList.elementAt(0);
        String signStr = "";
        if (offSet < 0) {
            signStr = "-";
            int val = Math.abs(offSet);
            instructionDescription = tab + "lw " + destTemp.toString() + ", " + signStr + val + "(" + srcTemp.toString() + ")" + newLine;
        } else if (offSet > 0) {
            instructionDescription = tab + "lw " + destTemp.toString() + ", " + offSet + "(" + srcTemp.toString() + ")" + newLine;
        } else {
            instructionDescription = tab + "lw " + destTemp.toString() + ", " + "(" + srcTemp.toString() + ")" + newLine;
        }
    }
}
