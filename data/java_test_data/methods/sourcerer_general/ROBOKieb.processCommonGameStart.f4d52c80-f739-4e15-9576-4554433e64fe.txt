private void processCommonGameStart(ICCDatagram dat) {
    String gameNumber = dat.getArgument(0);
    String whiteName = dat.getArgument(1);
    String blackName = dat.getArgument(2);
    String wildType = dat.getArgument(3);
    String rated = dat.getArgument(5);
    String played = dat.getArgument(10);
    // for human ratings try
    String ratingType = dat.getArgument(4);
    String whiteTitle = dat.getArgument(15);
    String blackTitle = dat.getArgument(16);
    // for human ratings try
    String whiteRating = dat.getArgument(12);
    String blackRating = dat.getArgument(13);
    if (simStatus == 2) {
        pendingCheckCounter = pendingCheckCounter + 1;
        if (pendingCheckCounter > pendingCheckInterval) {
            sendLine(";pending " + simGiver[currentSimGiver] + " ;cg64zh");
            checkPending = true;
            pendingCheckCounter = 0;
        }
    }
    if ((whiteName.equalsIgnoreCase(simGiver[currentSimGiver])) || (blackName.equalsIgnoreCase(simGiver[currentSimGiver]))) {
        simInBeetweenGameCounter = 0;
        simGameCounter = simGameCounter + 1;
        simGameNumber.addElement(gameNumber);
        if (whiteName.equalsIgnoreCase(simGiver[currentSimGiver])) {
            simBlackWhite.addElement(new Boolean(false));
            simActualPlayers.addElement(blackName);
        }
    }
    if (((simStatus == 2) || (simStatus == 3)) && (!(whiteName.equalsIgnoreCase(simGiver[currentSimGiver])) && !(blackName.equalsIgnoreCase(simGiver[currentSimGiver]))) && (!simStartConfirmed)) {
        simInBeetweenGameCounter = simInBeetweenGameCounter + 1;
        if (simInBeetweenGameCounter > simInBeetweenGameLimit) {
            simFinalNumber = simGameCounter;
            simStartConfirmed = true;
            simInBeetweenGameCounter = 0;
            if (simFinalNumber < (simParticipant.size() / 2)) {
                // sim must be aborted
                ClearSim();
                simStatus = 0;
            } else {
                boolean foundParticipant = false;
                simStatus = 3;
                for (int i = 0; i < simParticipant.size(); i++) {
                    for (int j = 0; j < simActualPlayers.size(); j++) {
                        if (simParticipant.elementAt(i).toString().equalsIgnoreCase(simActualPlayers.elementAt(j).toString())) {
                            foundParticipant = true;
                            break;
                        }
                    }
                    if (foundParticipant) {
                    // then its ok
                    } else {
                        sendLine("tell " + simParticipant.elementAt(i).toString() + "! Sorry, but it seems you did not get to play " + simGiver[currentSimGiver] + ".");
                        sendLine("qset " + simParticipant.elementAt(i).toString() + " tourney 0");
                        sendLine("qmatch " + simParticipant.elementAt(i).toString());
                    }
                    foundParticipant = false;
                }
                sendLine("tell " + simchannel + " " + simGiver[currentSimGiver] + " is playing " + simFinalNumber + " games. Type 'games " + simGiver[currentSimGiver] + "' to see the list.");
            }
        }
    }
    if (played.equalsIgnoreCase("1")) {
        for (int i = 0; i < firstLoginPipe.size(); i++) {
            if ((((Login) (firstLoginPipe.elementAt(i))).getHandle().equalsIgnoreCase(whiteName)) || (((Login) (firstLoginPipe.elementAt(i))).getHandle().equalsIgnoreCase(blackName))) {
                long gameStartDelay = System.currentTimeMillis() - ((Login) (firstLoginPipe.elementAt(i))).getTime();
                gameStartDelayTotal = gameStartDelayTotal + gameStartDelay;
                gameStartDelayCount = gameStartDelayCount + 1;
                if (ratingType.equalsIgnoreCase("Wild")) {
                    firstGameType[0] = firstGameType[0] + 1;
                    sendLine("tell kiebitz! Wild");
                }
                if (ratingType.equalsIgnoreCase("Loser's")) {
                    firstGameType[1] = firstGameType[1] + 1;
                    sendLine("tell kiebitz! losers");
                }
                if (ratingType.equalsIgnoreCase("Bughouse")) {
                    firstGameType[2] = firstGameType[2] + 1;
                    sendLine("tell kiebitz! bug");
                }
                if (ratingType.equalsIgnoreCase("Crazyhouse")) {
                    firstGameType[3] = firstGameType[3] + 1;
                    sendLine("tell kiebitz! zh");
                }
                if (ratingType.equalsIgnoreCase("Bullet")) {
                    firstGameType[4] = firstGameType[4] + 1;
                    sendLine("tell kiebitz! bullet");
                }
                if (ratingType.equalsIgnoreCase("Blitz")) {
                    firstGameType[5] = firstGameType[5] + 1;
                    sendLine("tell kiebitz! blitz");
                }
                if (ratingType.equalsIgnoreCase("Standard")) {
                    firstGameType[6] = firstGameType[6] + 1;
                    sendLine("tell kiebitz! standard");
                }
                if (ratingType.equalsIgnoreCase("5-minute")) {
                    firstGameType[7] = firstGameType[7] + 1;
                    sendLine("tell kiebitz! 5-min");
                }
                if (ratingType.equalsIgnoreCase("1-minute")) {
                    firstGameType[8] = firstGameType[8] + 1;
                    sendLine("tell kiebitz! 1-min");
                }
                if (ratingType.equalsIgnoreCase("Checkers")) {
                    firstGameType[9] = firstGameType[9] + 1;
                    sendLine("tell kiebitz! Checkers");
                }
                if (gameStartDelay < suspiciousFastStartLimit) {
                // sendLine("tell 0 Note: "+(((Login)(firstLoginPipe.elementAt(i))).getHandle())+" started his first game just "+gameStartDelay+" milliseconds after logging in for the first time.");
                }
                sendLine("tell kiebitz! It took " + (((Login) (firstLoginPipe.elementAt(i))).getHandle()) + " " + gameStartDelay + " milliseconds to start his first game.");
                firstLoginPipe.removeElementAt(i);
                break;
            }
        }
        for (int i = 0; i < toSpam.size(); i++) {
            if (whiteName.equalsIgnoreCase(toSpam.elementAt(i).toString())) {
                // sendLine("tell kiebitz Adding WHITE :"+gameNumber+" of "+whiteName+", size of gamesInProgress before is "+gamesInProgress.size());
                gamesInProgress.addElement(gameNumber);
                blackWhite.addElement(new Boolean(true));
                myPlayers.addElement(whiteName);
                myPlayersStyles.addElement(gratsStyle.elementAt(i));
            }
            if (blackName.equalsIgnoreCase(toSpam.elementAt(i).toString())) {
                // sendLine("tell kiebitz Adding BLACK :"+gameNumber+" of "+blackName+", size of gamesInProgress before is "+gamesInProgress.size());
                gamesInProgress.addElement(gameNumber);
                blackWhite.addElement(new Boolean(false));
                myPlayers.addElement(blackName);
                myPlayersStyles.addElement(gratsStyle.elementAt(i));
            }
        }
        if ((rated.equals("1")) && ((wildType.equals("1")) || (wildType.equals("2")) || (wildType.equals("3")) || (wildType.equals("4")) || (wildType.equals("5")) || (wildType.equals("8")) || (wildType.equals("9")) || (wildType.equals("16")) || (wildType.equals("18")) || (wildType.equals("22")) || (wildType.equals("25")) || (wildType.equals("27")) || (wildType.equals("28")) || (wildType.equals("17")) || (wildType.equals("26")))) {
            short gameNumberShort = Short.parseShort(gameNumber);
            byte wildTypeByte = Byte.parseByte(wildType);
            // sendLine("tell kiebitz Added "+gameNumberShort+" to the wild pipe.");
            wildGamePipe.addElement(new Game(gameNumberShort, wildTypeByte, whiteName, blackName));
        }
        if (wildType.equals("28")) {
            String timeString = dat.getArgument(6);
            String incString = dat.getArgument(7);
            int time = Integer.parseInt(timeString, 10);
            int inc = Integer.parseInt(incString, 10);
            if (time + inc > 3) {
                sendLine("tell 28 A Shatranj game (" + timeString + " " + incString + ") between " + whiteName + " and " + blackName + " has started! 'observe " + gameNumber + "'.");
            }
        }
        // for human ratings try
        if ((rated.equals("1")) && (wildType.equals("0")) && (!(whiteTitle.equals("{C}"))) && (!(blackTitle.equals("{C}"))) && (ratingType.equalsIgnoreCase("Blitz"))) {
            short gameNumberShort = Short.parseShort(gameNumber);
            byte wildTypeByte = Byte.parseByte(wildType);
            // sendLine("tell kiebitz "+whiteName+" and "+blackName+" started a "+ratingType+" game, got whiteTitle: "+whiteTitle+" and blackTitle: "+blackTitle);
            humanGamePipe.addElement(new Game(gameNumberShort, wildTypeByte, whiteName, blackName));
        }
        // for human ratings try
        if ((whiteName.startsWith("guest")) || (blackName.startsWith("guest"))) {
            short gameNumberShort = Short.parseShort(gameNumber);
            short whiteRatingShort = Short.parseShort(whiteRating);
            short blackRatingShort = Short.parseShort(blackRating);
            byte wildTypeByte = Byte.parseByte(wildType);
            guestGamePipe.addElement(new ExtendedGame(gameNumberShort, wildTypeByte, whiteName, blackName, whiteRatingShort, blackRatingShort));
        }
    }
}
