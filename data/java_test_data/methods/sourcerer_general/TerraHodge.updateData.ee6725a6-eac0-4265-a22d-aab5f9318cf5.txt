public void updateData(Geometry data) {
    float[] hodgeCoords = ((QuadArray) data).getCoordRefFloat();
    float[] hodgeColors = ((QuadArray) data).getColorRefFloat();
    int[][] matrix = engine.getMatrix();
    float maxState = (float) engine.getMaxCellState();
    int hodgeDim = engine.getMatrixSize();
    // could pre-calc these, but oh well...
    float plotHalf = PLOT_SIZE / 2f;
    float subPlot = PLOT_SIZE / (float) RESOLUTION;
    float maxDist = (float) Math.sqrt(PLOT_SIZE * 2);
    // float maxDist = PLOT_SIZE * 2;
    int index = 0, colIndex = 0;
    for (int i = 0; i < hodgeDim; i++) for (int j = 0; j < hodgeDim; j++) {
        Point3f[] hodgePts = new Point3f[9];
        int p = 0;
        for (int nx = i - 1; nx <= i + 1; nx++) for (int nz = j - 1; nz <= j + 1; nz++) {
            int nx2 = nx, nz2 = nz;
            if (nx2 < 0)
                nx2 = hodgeDim - 1;
            if (nx2 >= hodgeDim)
                nx2 = 0;
            if (nz2 < 0)
                nz2 = hodgeDim - 1;
            if (nz2 >= hodgeDim)
                nz2 = 0;
            hodgePts[p++] = new Point3f((nx * PLOT_SIZE) + plotHalf, matrix[nx2][nz2], (nz * PLOT_SIZE) + plotHalf);
        }
        float hx = i * PLOT_SIZE;
        float hz = j * PLOT_SIZE;
        Point3f[][] terrainPts = new Point3f[RESOLUTION + 1][RESOLUTION + 1];
        Color3f[][] terrainCols = new Color3f[RESOLUTION + 1][RESOLUTION + 1];
        for (int tx = 0; tx <= RESOLUTION; tx++) for (int ty = 0; ty <= RESOLUTION; ty++) {
            float x = hx + (subPlot * tx);
            float z = hz + (subPlot * ty);
            float w = 0;
            double sum = 0;
            for (int n = 0; n < 9; n++) {
                double d = maxDist - Point.distance(x, z, hodgePts[n].x, hodgePts[n].z);
                if (d > 0) {
                    double weight = d * maxDist;
                    w += weight;
                    sum += (hodgePts[n].y * weight);
                }
            }
            float avgHeight = (float) sum / w;
            terrainPts[tx][ty] = new Point3f(x, (avgHeight / maxState) * HODGE_HEIGHT, z);
            terrainCols[tx][ty] = new Color3f(new Color(ColorMap.getColor((int) avgHeight)));
        }
        for (int sx = 0; sx < RESOLUTION; sx++) for (int sy = 0; sy < RESOLUTION; sy++) {
            hodgeCoords[index++] = terrainPts[sx + 0][sy + 0].x;
            hodgeCoords[index++] = terrainPts[sx + 0][sy + 0].y;
            hodgeCoords[index++] = terrainPts[sx + 0][sy + 0].z;
            hodgeCoords[index++] = terrainPts[sx + 1][sy + 0].x;
            hodgeCoords[index++] = terrainPts[sx + 1][sy + 0].y;
            hodgeCoords[index++] = terrainPts[sx + 1][sy + 0].z;
            hodgeCoords[index++] = terrainPts[sx + 1][sy + 1].x;
            hodgeCoords[index++] = terrainPts[sx + 1][sy + 1].y;
            hodgeCoords[index++] = terrainPts[sx + 1][sy + 1].z;
            hodgeCoords[index++] = terrainPts[sx][sy + 1].x;
            hodgeCoords[index++] = terrainPts[sx][sy + 1].y;
            hodgeCoords[index++] = terrainPts[sx][sy + 1].z;
            hodgeColors[colIndex++] = terrainCols[sx + 0][sy + 0].x;
            hodgeColors[colIndex++] = terrainCols[sx + 0][sy + 0].y;
            hodgeColors[colIndex++] = terrainCols[sx + 0][sy + 0].z;
            hodgeColors[colIndex++] = terrainCols[sx + 1][sy + 0].x;
            hodgeColors[colIndex++] = terrainCols[sx + 1][sy + 0].y;
            hodgeColors[colIndex++] = terrainCols[sx + 1][sy + 0].z;
            hodgeColors[colIndex++] = terrainCols[sx + 1][sy + 1].x;
            hodgeColors[colIndex++] = terrainCols[sx + 1][sy + 1].y;
            hodgeColors[colIndex++] = terrainCols[sx + 1][sy + 1].z;
            hodgeColors[colIndex++] = terrainCols[sx + 0][sy + 1].x;
            hodgeColors[colIndex++] = terrainCols[sx + 0][sy + 1].y;
            hodgeColors[colIndex++] = terrainCols[sx + 0][sy + 1].z;
        }
    }
}
