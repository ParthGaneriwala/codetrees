public static ImageTGA load(InputStream is) throws IOException {
    ImageTGA info;
    int mode, total;
    // allocate memory for the info struct
    info = new ImageTGA();
    BufferedInputStream file;
    try {
        file = new BufferedInputStream(is);
    } catch (Exception e) {
        info.status = TGAError.TGA_ERROR_FILE_OPEN;
        return (info);
    }
    // load the header
    try {
        loadHeader(file, info);
    } catch (Exception e) {
        info.status = TGAError.TGA_ERROR_READING_FILE;
        file.close();
        return info;
    }
    // check if the image is color indexed
    if (info.type == 1) {
        info.status = TGAError.TGA_ERROR_INDEXED_COLOR;
        file.close();
        return info;
    }
    // check for other types (compressed images)
    if ((info.type != 2) && (info.type != 3) && (info.type != 10)) {
        info.status = TGAError.TGA_ERROR_COMPRESSED_FILE;
        file.close();
        return info;
    }
    // mode equals the number of image components
    mode = info.pixelDepth / 8;
    // total is the number of unsigned chars to read
    total = info.height * info.width * mode;
    // allocate memory for image pixels
    info.imageData = new byte[total];
    // finally load the image pixels
    try {
        if (info.type == 10)
            loadRLEImageData(file, info);
        else
            loadImageData(file, info);
    } catch (Exception e) {
        info.status = TGAError.TGA_ERROR_READING_FILE;
        file.close();
        return info;
    }
    file.close();
    info.status = TGAError.TGA_OK;
    if (info.flipped != 0) {
        flipImage(info);
        if (info.flipped != 0)
            info.status = TGAError.TGA_ERROR_MEMORY;
    }
    return info;
}
