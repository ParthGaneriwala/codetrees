public void setLightState(Light[] lights, Color4f globalAmbient) {
    // invalidate any cached reference
    _states[RenderState.LIGHT_STATE] = null;
    boolean lightingEnabled = (lights != null);
    if (_lightingEnabled != Boolean.valueOf(lightingEnabled)) {
        setCapability(GL11.GL_LIGHTING, _lightingEnabled = lightingEnabled);
    }
    if (!lightingEnabled) {
        return;
    }
    // update the union of the requested lights and the ones already set
    int numLights = (lights == null) ? 0 : lights.length;
    boolean cleared = false;
    for (int ii = 0, nn = Math.max(_lightEnd, numLights); ii < nn; ii++) {
        LightRecord lrec = _lights[ii];
        Light light = (ii < numLights) ? lights[ii] : null;
        boolean lightEnabled = (light != null);
        if (lrec.light == light && !(lightEnabled && light.dirty)) {
            continue;
        }
        int lname = GL11.GL_LIGHT0 + ii;
        if (lrec.enabled != Boolean.valueOf(lightEnabled)) {
            setCapability(lname, lrec.enabled = lightEnabled);
        }
        lrec.light = light;
        if (!lightEnabled) {
            continue;
        }
        light.dirty = false;
        if (!lrec.ambient.equals(light.ambient)) {
            lrec.ambient.set(light.ambient).get(_vbuf).rewind();
            GL11.glLight(lname, GL11.GL_AMBIENT, _vbuf);
        }
        if (!lrec.diffuse.equals(light.diffuse)) {
            lrec.diffuse.set(light.diffuse).get(_vbuf).rewind();
            GL11.glLight(lname, GL11.GL_DIFFUSE, _vbuf);
        }
        if (!lrec.specular.equals(light.specular)) {
            lrec.specular.set(light.specular).get(_vbuf).rewind();
            GL11.glLight(lname, GL11.GL_SPECULAR, _vbuf);
        }
        if (!lrec.position.equals(light.position)) {
            // OpenGL multiplies by the modelview matrix, so we have to clear it first
            cleared = maybeClearModelview(cleared);
            lrec.position.set(light.position).get(_vbuf).rewind();
            GL11.glLight(lname, GL11.GL_POSITION, _vbuf);
        }
        if (lrec.spotExponent != light.spotExponent) {
            GL11.glLightf(lname, GL11.GL_SPOT_EXPONENT, lrec.spotExponent = light.spotExponent);
        }
        if (lrec.spotCutoff != light.spotCutoff) {
            GL11.glLightf(lname, GL11.GL_SPOT_CUTOFF, lrec.spotCutoff = light.spotCutoff);
        }
        if (light.spotCutoff != 180f && !lrec.spotDirection.equals(light.spotDirection)) {
            // as with the position, clear the modelview matrix
            cleared = maybeClearModelview(cleared);
            lrec.spotDirection.set(light.spotDirection).get(_vbuf).rewind();
            GL11.glLight(lname, GL11.GL_SPOT_DIRECTION, _vbuf);
        }
        if (light.position.w == 0f) {
            // light is directional; the rest does not apply
            continue;
        }
        if (lrec.constantAttenuation != light.constantAttenuation) {
            GL11.glLightf(lname, GL11.GL_CONSTANT_ATTENUATION, lrec.constantAttenuation = light.constantAttenuation);
        }
        if (lrec.linearAttenuation != light.linearAttenuation) {
            GL11.glLightf(lname, GL11.GL_LINEAR_ATTENUATION, lrec.linearAttenuation = light.linearAttenuation);
        }
        if (lrec.quadraticAttenuation != light.quadraticAttenuation) {
            GL11.glLightf(lname, GL11.GL_QUADRATIC_ATTENUATION, lrec.quadraticAttenuation = light.quadraticAttenuation);
        }
    }
    _lightEnd = numLights;
    maybeRestoreModelview(cleared);
    if (!_globalAmbient.equals(globalAmbient)) {
        _globalAmbient.set(globalAmbient).get(_vbuf).rewind();
        GL11.glLightModel(GL11.GL_LIGHT_MODEL_AMBIENT, _vbuf);
    }
}
