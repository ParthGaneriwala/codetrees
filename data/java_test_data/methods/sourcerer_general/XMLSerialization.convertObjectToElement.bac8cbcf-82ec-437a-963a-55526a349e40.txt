public Element convertObjectToElement(Object o, String name) throws IllegalArgumentException, IllegalAccessException, InvocationTargetException {
    Element e = new Element("object");
    if (name != null) {
        e.setAttribute("name", name);
    }
    if (o == null) {
        return e;
    }
    String className = getClassName(o.getClass());
    e.setAttribute("class", className);
    if (cache.containsKey(o)) {
        Element ref = (Element) cache.get(o);
        if (ref.getAttribute("xmlIdentifier") == null || ref.getAttributeValue("xmlIdentifier").trim().length() == 0) {
            ref.setAttribute("xmlIdentifier", String.valueOf(identifier));
            identifier++;
        }
        e.setAttribute("xmlIdentifier", ((Element) cache.get(o)).getAttributeValue("xmlIdentifier"));
        return e;
    }
    if (isCachable(o))
        cache.put(o, e);
    if (o instanceof String)
        e.setText((String) o);
    else if (o instanceof Enum)
        e.setText(((Enum) o).name());
    else if (o instanceof Boolean)
        e.setText(o.toString());
    else if (o instanceof Character)
        e.setText(o.toString());
    else if (o instanceof Byte)
        e.setText(o.toString());
    else if (o instanceof Integer)
        e.setText(o.toString());
    else if (o instanceof Long)
        e.setText(o.toString());
    else if (o instanceof Float)
        e.setText(o.toString());
    else if (o instanceof Double)
        e.setText(o.toString());
    else if (o instanceof BigDecimal)
        e.setText(o.toString());
    else if (o instanceof java.util.Date)
        e.setText(String.valueOf(((java.util.Date) o).getTime()));
    else if (o instanceof Calendar)
        e.setText(String.valueOf(((Calendar) o).getTimeInMillis()));
    else if (o.getClass().isArray()) {
        for (int i = 0; i < Array.getLength(o); i++) {
            Element child = convertObjectToElement(Array.get(o, i), null);
            e.addContent(child);
        }
    } else if (o instanceof AbstractList) {
        AbstractList list = (AbstractList) o;
        for (int i = 0; i < list.size(); i++) {
            Element child = convertObjectToElement(list.get(i), null);
            e.addContent(child);
        }
    } else if (o instanceof AbstractCollection) {
        AbstractCollection collection = (AbstractCollection) o;
        Element child;
        for (Iterator iterator = collection.iterator(); iterator.hasNext(); e.addContent(child)) child = convertObjectToElement(iterator.next(), null);
    } else if (o instanceof Dictionary) {
        Dictionary map = (Dictionary) o;
        Element child;
        for (Enumeration iterator = map.keys(); iterator.hasMoreElements(); e.addContent(child)) {
            child = new Element("entry");
            Object key = iterator.nextElement();
            Object value = map.get(key);
            Element temp = convertObjectToElement(key, "key");
            child.addContent(temp);
            temp = convertObjectToElement(value, "value");
            child.addContent(temp);
        }
    } else if (o instanceof AbstractMap) {
        AbstractMap map = (AbstractMap) o;
        Element child;
        for (Iterator iterator = map.keySet().iterator(); iterator.hasNext(); e.addContent(child)) {
            child = new Element("entry");
            Object key = iterator.next();
            Object value = map.get(key);
            Element temp = convertObjectToElement(key, "key");
            child.addContent(temp);
            temp = convertObjectToElement(value, "value");
            if (temp != null)
                child.addContent(temp);
        }
    } else if (o instanceof Class) {
        e.setText(((Class) o).getName());
    } else {
        // Introspect Bean
        Field[] fields = ClassUtilities.getFields(o, false, false);
        for (int i = 0; i < fields.length; i++) {
            Element child = null;
            Object value = fields[i].get(o);
            if (value == null) {
                // child = new Element(getClassName(fields[i].getType()));
                child = new Element("object");
                child.setAttribute("name", fields[i].getName());
            } else {
                child = convertObjectToElement(value, fields[i].getName());
            }
            if (child != null) {
                e.addContent(child);
            }
        }
    /*Method methods[] = o.getClass().getMethods();
			for (int i = 0; i < methods.length; i++) {
				if (!methods[i].getName().startsWith("get") && !methods[i].getName().startsWith("has")
								&& !methods[i].getName().startsWith("is") || methods[i].getParameterTypes().length != 0
								|| methods[i].getName().equals("getClass") || methods[i].getName().equals("hashCode"))
					continue;
				if (methods[i].getName().startsWith("is")) name = methods[i].getName().substring(2);
				else name = methods[i].getName().substring(3);
				Object value;
				try {
					value = methods[i].invoke(o, new Object[0]);
				} catch (IllegalAccessException exc) {
					value = null;
				}
				if (value != null) {
					Element child = convertObjectToElement(value, name);
					e.addContent(child);
				} else {
					Element child = new Element(getClassName(methods[i].getReturnType()));
					child.setAttribute("name", name);
					e.addContent(child);
				}
			}*/
    }
    return e;
}
