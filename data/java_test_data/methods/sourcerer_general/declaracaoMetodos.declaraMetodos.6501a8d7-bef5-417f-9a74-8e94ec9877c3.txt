public void declaraMetodos(TabelaSimbolos tabelaSimbolos, int indice) {
    declaracaoStructs verificaDeclaracaoStruct = new declaracaoStructs();
    declaraVariaveis verificaDeclaracaoVariaveis = new declaraVariaveis();
    cmd verificaCmd = new cmd();
    chamadaDeFuncao verificaChamadaDeFuncao = new chamadaDeFuncao(tabelaSimbolos);
    String tipoRetorno = tabelaSimbolos.getLookahead();
    // consome tipo de retorno
    tabelaSimbolos.soConsome();
    if (tabelaSimbolos.getLookahead().equals("*")) {
        // consome o * se ele aparecer
        tabelaSimbolos.soConsome();
    }
    // pergunta se já existe um metodo com esse nome
    if (this.jaContemAqueleMetodo(tabelaSimbolos.getLookahead(), indice)) {
        if (!tabelaSimbolos.verificaDuplicidadeDeMetodo(tabelaSimbolos.getLookahead())) {
            System.out.println("ERRO SEMANTICO - " + tabelaSimbolos.getLookahead() + " na linha " + tabelaSimbolos.getLinha() + " metodo ja declarado");
            ErroSemantico.getInstance().getTabelaErros().add("Erro Semântico na linha " + tabelaSimbolos.getLinha() + ". Descrição: O método já foi declarado");
        }
    }
    // VOu precisar do nome do metodo para passar pro ChamaFuncao.
    String nomeMetodo = tabelaSimbolos.getLookahead();
    // consome nome do metodo
    tabelaSimbolos.soConsome();
    // consome o (
    tabelaSimbolos.soConsome();
    // <parametros> ::= <tipos> [ * ] <nome> { , <tipos> [ * ] <nome>}
    while (!(tabelaSimbolos.getLookahead().equals(")"))) {
        // consome todos os parâmentros, até achar o )
        System.out.println("no metodo " + tabelaSimbolos.getLookahead());
        tabelaSimbolos.soConsome();
        if (tabelaSimbolos.getLookahead().equals("*")) {
            tabelaSimbolos.soConsome();
        }
        System.out.println("no metodo " + tabelaSimbolos.getLookahead());
        if (tabelaSimbolos.verificaSeFoiDeclaradoComoGlobal(tabelaSimbolos.getLookahead())) {
            System.out.println("ERRO SEMANTICO - " + tabelaSimbolos.getLookahead() + " na linha " + tabelaSimbolos.getLinha() + " variavel do parametro ja declarado");
            ErroSemantico.getInstance().getTabelaErros().add("Erro Semântico na linha " + tabelaSimbolos.getLinha() + ". Descrição: A variável já foi declarado");
        }
        tabelaSimbolos.soConsome();
        System.out.println("no metodo " + tabelaSimbolos.getLookahead());
        if (tabelaSimbolos.getLookahead().equals(","))
            tabelaSimbolos.soConsome();
    }
    // consome o parêntese )
    tabelaSimbolos.soConsome();
    // Consome o {
    tabelaSimbolos.soConsome();
    while (tabelaSimbolos.getLookahead().equals("typedef") || tabelaSimbolos.getLookahead().equals("struct") || Tipos.apenasCompara(tabelaSimbolos)) {
        if (tabelaSimbolos.getLookahead().equals("typedef")) {
            if (tabelaSimbolos.superLookahead(1).equals("struct")) {
                // int v = analise.getIndiceStruct();
                // System.out.println("v: " + v);
                verificaDeclaracaoStruct.declaraStructs(tabelaSimbolos);
            } else if (Tipos.apenasCompara(tabelaSimbolos)) {
                verificaDeclaracaoVariaveis.declaraVariaveis(tabelaSimbolos, nomeMetodo);
            } else if (tabelaSimbolos.getLookahead().equals("struct")) {
                // int v1 = analise.getIndiceStruct();
                // System.out.println("v1: " + v1);
                verificaDeclaracaoStruct.declaraStructs(tabelaSimbolos);
            }
        } else if (Tipos.apenasCompara(tabelaSimbolos)) {
            if (tabelaSimbolos.getTipo().equals("identificador")) {
                // Consome identificador
                tabelaSimbolos.soConsome();
                // Consome o =
                tabelaSimbolos.soConsome();
                // Consome o que vem depois do igual
                tabelaSimbolos.soConsome();
                // Consome o ;
                tabelaSimbolos.soConsome();
            } else if (tabelaSimbolos.superTipo(1).equals("identificador")) {
                verificaDeclaracaoVariaveis.declaraVariaveis(tabelaSimbolos, nomeMetodo);
            } else if (tabelaSimbolos.superLookahead(1).equals("*")) {
                verificaDeclaracaoVariaveis.declaraVariaveis(tabelaSimbolos, nomeMetodo);
            }
        }
    }
    while (tabelaSimbolos.getLookahead().equals("*") | tabelaSimbolos.getLookahead().equals("printf") | tabelaSimbolos.getLookahead().equals("scanf") | tabelaSimbolos.getLookahead().equals("do") | tabelaSimbolos.getLookahead().equals("while") | tabelaSimbolos.getLookahead().equals("for") | tabelaSimbolos.getLookahead().equals("if") | tabelaSimbolos.getTipo().equals("identificador")) {
        verificaCmd.sintaxeCmd(tabelaSimbolos, nomeMetodo);
    }
    // consome return
    tabelaSimbolos.soConsome();
    String compara = Utils.tipoValor(tabelaSimbolos.getLookahead());
    if (tabelaSimbolos.getLookahead().equals("true") || tabelaSimbolos.getLookahead().equals("false")) {
        if (!tipoRetorno.equals(compara)) {
            System.out.println("Erro Semântico na linha " + tabelaSimbolos.getLinha() + ". Descrição: " + tabelaSimbolos.getLookahead() + " Tipo de retorno incompativel");
            ErroSemantico.getInstance().getTabelaErros().add("Erro Semântico na linha " + tabelaSimbolos.getLinha() + ". Descrição: " + tabelaSimbolos.getLookahead() + " Tipo de retorno incompativel");
        }
    } else if (tabelaSimbolos.getTipo().equals("numero")) {
        String compara2 = Utils.tipoValor(tabelaSimbolos.getLookahead());
        if (!tipoRetorno.equals(compara2)) {
            System.out.println("Erro Semântico na linha " + tabelaSimbolos.getLinha() + ". Descrição: " + tabelaSimbolos.getLookahead() + " Tipo de retorno incompativel");
            ErroSemantico.getInstance().getTabelaErros().add("Erro Semântico na linha " + tabelaSimbolos.getLinha() + ". Descrição: " + tabelaSimbolos.getLookahead() + " Tipo de retorno incompativel");
            compara2 = "";
        } else
            compara2 = "";
    } else if (tabelaSimbolos.getTipo().equals("identificador")) {
        if (!tabelaSimbolos.verificaSeVariavelFoiDeclarada(tabelaSimbolos.getLookahead())) {
            System.out.println("Erro Semântico na linha " + tabelaSimbolos.getLinha() + ". Descrição: " + tabelaSimbolos.getLookahead() + " variavel nao declarada");
            ErroSemantico.getInstance().getTabelaErros().add("Erro Semântico na linha " + tabelaSimbolos.getLinha() + ". Descrição: " + tabelaSimbolos.getLookahead() + " variavel nao declarada");
        }
        String tipoVariavel = tabelaSimbolos.RetornaTipoDeGlobalDeclarada(tabelaSimbolos.getLookahead());
        if (tipoVariavel.equals("")) {
            tipoVariavel = tabelaSimbolos.RetornaTipoDeLocalDeclarada(tabelaSimbolos.getLookahead(), nomeMetodo);
        }
        if (!tipoVariavel.equals(tipoRetorno)) {
            System.out.println("Erro Semântico na linha " + tabelaSimbolos.getLinha() + ". Descrição: " + tabelaSimbolos.getLookahead() + " Tipo de retorno incompativel");
            ErroSemantico.getInstance().getTabelaErros().add("Erro Semântico na linha " + tabelaSimbolos.getLinha() + ". Descrição: " + tabelaSimbolos.getLookahead() + " Tipo de retorno incompativel");
        }
    }
    compara = "";
    if (tabelaSimbolos.getTipo().equals("numero")) {
        tabelaSimbolos.reconhecer(tabelaSimbolos.getLookahead());
    } else // COnsertar. Aqui tem que retornar verdadeiro se o elemento for um boolean
    if (tabelaSimbolos.getLookahead().equals("true") | tabelaSimbolos.getLookahead().equals("false")) {
        tabelaSimbolos.reconhecer(tabelaSimbolos.getLookahead());
    } else // essa condição ja esta sendo atendida no else if seguinte.
    if (tabelaSimbolos.getTipo().equals("frase")) {
        // Consertar. Tem que retornar verdadeiro se o elemento for um caracter
        tabelaSimbolos.soConsome();
    } else if (tabelaSimbolos.getTipo().equals("identificador") && tabelaSimbolos.superLookahead(1).equals(";")) {
        tabelaSimbolos.reconhecer(tabelaSimbolos.getLookahead());
    } else if (tabelaSimbolos.getTipo().equals("numero") || tabelaSimbolos.getTipo().equals("identificador") || tabelaSimbolos.getLookahead().equals("(")) {
        // falar com quem fez isso. by Igo
        verificaChamadaDeFuncao.chamaFuncao(nomeMetodo);
    }
    // consome ;
    tabelaSimbolos.soConsome();
    // consome }
    tabelaSimbolos.soConsome();
}
