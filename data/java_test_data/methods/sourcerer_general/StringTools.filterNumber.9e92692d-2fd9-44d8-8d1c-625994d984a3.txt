private static String filterNumber(String val, int type) {
    /* null string */
    if (val == null) {
        // null string
        return "";
    }
    /* skip initial whitespace */
    int s = 0;
    while ((s < val.length()) && StringTools.isWhitespace(val.charAt(s))) {
        s++;
    }
    if (s == val.length()) {
        // empty string
        return "";
    }
    // val.trim();
    String v = val;
    int vlen = v.length();
    /* hex number */
    boolean hex = false;
    if ((v.length() >= 2) && (v.charAt(s) == '0') && (Character.toLowerCase(v.charAt(s + 1)) == 'x')) {
        hex = true;
    }
    /* skip initial digits */
    int ps, p;
    if (hex) {
        // skip ofer "0x";
        ps = s + 2;
        p = ps;
        for (; (p < vlen) && (HEX.indexOf(Character.toUpperCase(v.charAt(p))) >= 0); ) {
            p++;
        }
    } else {
        // negative number?
        ps = (v.charAt(s) == '-') ? (s + 1) : s;
        p = ps;
        for (; (p < vlen) && Character.isDigit(v.charAt(p)); ) {
            p++;
        }
    }
    boolean foundDigit = (p > ps);
    /* end of digits? */
    String num = null;
    if (// pointer beyond end of string
    (p >= vlen) || (type == FILTER_TYPE_Long) || (type == FILTER_TYPE_Integer) || (type == FILTER_TYPE_Short) || (type == FILTER_TYPE_Byte)) {
        // end of String or Long/Integer/Short/Byte
        num = foundDigit ? v.substring(s, p) : null;
    } else if (v.charAt(p) != '.') {
        // Double/Float, but doesn't contain decimal point
        num = foundDigit ? v.substring(s, p) : null;
    } else {
        // Double/Float, decimal digits
        // skip '.'
        p++;
        for (ps = p; (p < vlen) && Character.isDigit(v.charAt(p)); ) {
            p++;
        }
        if (p > ps) {
            foundDigit = true;
        }
        num = foundDigit ? v.substring(s, p) : null;
    }
    /* return extracted number */
    return num;
}
