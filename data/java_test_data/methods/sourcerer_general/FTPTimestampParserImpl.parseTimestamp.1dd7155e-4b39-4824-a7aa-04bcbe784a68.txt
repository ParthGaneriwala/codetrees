public Calendar parseTimestamp(String timestampStr, Calendar serverTime) throws ParseException {
    // Copy this, because we may change it
    Calendar now = (Calendar) serverTime.clone();
    now.setTimeZone(this.getServerTimeZone());
    Calendar working = (Calendar) now.clone();
    working.setTimeZone(getServerTimeZone());
    ParsePosition pp = new ParsePosition(0);
    Date parsed = null;
    if (recentDateFormat != null) {
        if (lenientFutureDates) {
            // add a day to "now" so that "slop" doesn't cause a date
            // slightly in the future to roll back a full year.  (Bug 35181)
            now.add(Calendar.DATE, 1);
        }
        parsed = recentDateFormat.parse(timestampStr, pp);
    }
    if (parsed != null && pp.getIndex() == timestampStr.length()) {
        working.setTime(parsed);
        working.set(Calendar.YEAR, now.get(Calendar.YEAR));
        if (working.after(now)) {
            working.add(Calendar.YEAR, -1);
        }
    } else {
        // This is pretty bad hack to work around the deficiencies of the JDK date/time classes.
        if (recentDateFormat != null) {
            pp = new ParsePosition(0);
            int year = now.get(Calendar.YEAR);
            String timeStampStrPlusYear = timestampStr + " " + year;
            SimpleDateFormat hackFormatter = new SimpleDateFormat(recentDateFormat.toPattern() + " yyyy", recentDateFormat.getDateFormatSymbols());
            hackFormatter.setLenient(false);
            hackFormatter.setTimeZone(recentDateFormat.getTimeZone());
            parsed = hackFormatter.parse(timeStampStrPlusYear, pp);
        }
        if (parsed != null && pp.getIndex() == timestampStr.length() + 5) {
            working.setTime(parsed);
        } else {
            pp = new ParsePosition(0);
            parsed = defaultDateFormat.parse(timestampStr, pp);
            // if we don't insist on full length parsing.
            if (parsed != null && pp.getIndex() == timestampStr.length()) {
                working.setTime(parsed);
            } else {
                throw new ParseException("Timestamp could not be parsed with older or recent DateFormat", pp.getIndex());
            }
        }
    }
    return working;
}
