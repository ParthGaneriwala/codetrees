// NOT USED CURRENTLY. May be used if attributes synchronized from XML
// content have to be propagated to Logical document
private void synchronizeLogicalAttrs() throws DfException {
    int j = 0;
    int k = 0;
    // TODO : do not synchronize UID
    IDfList idfSynchronizedAttrNames = null;
    IEpModiLogicalDoc iepLogicalDoc = null;
    String strAttrName = null;
    iepLogicalDoc = this.getLogicalDoc();
    idfSynchronizedAttrNames = this.getSynchronizedAttrNames();
    // Boolean to save only concrete doc if it was changed :
    // prevent from infinite mutual update if 2 way synchro
    // (Logical<->Concrete)
    boolean blnAttributesChanged;
    boolean blnRepeatingAttrDifferent;
    if (iepLogicalDoc != null) {
        blnAttributesChanged = false;
        for (j = 0; j < idfSynchronizedAttrNames.getCount(); j++) {
            strAttrName = idfSynchronizedAttrNames.getString(j);
            if (iepLogicalDoc.isAttrRepeating(strAttrName)) {
                blnRepeatingAttrDifferent = false;
                if (iepLogicalDoc.getValueCount(strAttrName) != this.getValueCount(strAttrName)) {
                    // There is not the same numbers of values
                    blnRepeatingAttrDifferent = true;
                } else {
                    // Check values one by one
                    for (k = 0; k < this.getValueCount(strAttrName); k++) {
                        if ((this.getRepeatingValue(strAttrName, k).toString().length() > 0) && (iepLogicalDoc.getRepeatingValue(strAttrName, k) != this.getRepeatingValue(strAttrName, k))) {
                            // System.out.println(" " + strAttrName);
                            blnRepeatingAttrDifferent = true;
                        }
                    }
                }
                // Repeating attributes are not the same, update them all
                if (blnRepeatingAttrDifferent) {
                    iepLogicalDoc.removeAll(strAttrName);
                    for (k = 0; k < this.getValueCount(strAttrName); k++) {
                        iepLogicalDoc.setRepeatingValue(strAttrName, k, this.getRepeatingValue(strAttrName, k));
                    }
                    blnAttributesChanged = true;
                }
            } else {
                // is not empty
                if ((this.getValue(strAttrName).toString().length() > 0) && (iepLogicalDoc.getValue(strAttrName) != this.getValue(strAttrName))) {
                    iepLogicalDoc.setValue(strAttrName, this.getValue(strAttrName));
                    // System.out.println(" " + strAttrName);
                    blnAttributesChanged = true;
                }
            }
        }
        if (blnAttributesChanged) {
            // System.out.println("*** " + this.getClass().getName() +
            // " Logical document updated");
            iepLogicalDoc.save();
        }
    }
// end if (iepLogicalDoc != null)
// System.out.println("*** " + this.getClass().getName() +
// " END synchronizeLogicalAttrs ***");
}
