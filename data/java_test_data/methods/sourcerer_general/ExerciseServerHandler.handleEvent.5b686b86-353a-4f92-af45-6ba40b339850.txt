@Override
public boolean handleEvent(Object data) {
    if (!(data instanceof Request))
        return false;
    Request request = (Request) data;
    Message.MessageType mType = request.getRequestType();
    if (mType == Message.MessageType.EXERCISE_ANSWER) {
        ExerciseFile exercise = (ExerciseFile) request.getData(Message.EXERCISE_ANSWER);
        User user = request.getUser();
        Response response = new Response(request, Message.EXERCISE_ANSWER, exercise);
        response.setUser(user);
        ExerciseAdmin exAdmin = new ExerciseAdmin();
        Set<Entry<String, String>> answers = exercise.getUpdatedAnswers().entrySet();
        HashMap<String, String> questions = exercise.getQuestions();
        for (Entry<String, String> entry : answers) {
            try {
                exAdmin.updateAnswer(user, entry.getKey(), questions.get(entry.getKey()), entry.getValue(), exercise);
            } catch (DatabaseException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }
        UserAdmin userAdmin = new UserAdmin();
        ArrayList<String> groupMembers = new ArrayList<String>();
        try {
            groupMembers = userAdmin.getGroupMembers(response.getUser().getId());
        } catch (DatabaseException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        SocketChannel channel;
        for (String userName : groupMembers) {
            channel = mAuthHandler.getClientChannel(userName);
            if (channel != null) {
                this.setChannel(channel);
                try {
                    sendMessage(response);
                } catch (IOException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }
            }
        }
    /* moved to server exercisequestionsparser */
    // } else if(rType == RequestType.SUBMIT_EXERCISE_QUESTIONS) {
    // ExerciseFile exercise = (ExerciseFile)request.getData();
    // 
    // ExerciseAdmin exAdmin = new ExerciseAdmin();
    // Set<Entry<String, String>> questions = exercise.getQuestions().entrySet();
    // for(Entry<String, String> entry : questions) {
    // try {
    // exAdmin.addQuestion(entry.getKey(), entry.getValue(), exercise);
    // } catch (DatabaseException e) {
    // // TODO Auto-generated catch block
    // e.printStackTrace();
    // }
    // }
    } else if (mType == Message.MessageType.EXERCISE_ANSWERS_REQUEST) {
        ExerciseAdmin exAdmin = new ExerciseAdmin();
        HashMap<String, String> answers = new HashMap<String, String>();
        try {
            answers = exAdmin.getAnswers(request.getUser());
        } catch (DatabaseException e1) {
            // TODO Auto-generated catch block
            e1.printStackTrace();
        }
        Response response = new Response(request, Message.EXERCISE_ANSWERS, answers);
        response.setUser(request.getUser());
        SocketChannel channel;
        for (String userName : request.getRecipients()) {
            channel = mAuthHandler.getClientChannel(userName);
            if (channel != null) {
                this.setChannel(channel);
                try {
                    sendMessage(response);
                } catch (IOException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }
            }
        }
    } else {
        return false;
    }
    return true;
}
