public static String[] splitTags(String input, String[] tags, boolean recursive, boolean insideTag) throws ParserException, UnsupportedEncodingException {
    ArrayList outputArrayList = new ArrayList();
    int minCapacity = 0;
    String output = new String();
    String inputModified = new String(input);
    String[] outputStr = new String[] {};
    String dummyString = createDummyString(' ', input.length());
    // loop inside the different tags to be trimmed
    for (int i = 0; i < tags.length; i++) {
        // loop inside the tags of the same type
        NodeList links = getLinks(inputModified, tags[i], recursive);
        for (int j = 0; j < links.size(); j++) {
            CompositeTag beginTag = (CompositeTag) links.elementAt(j);
            Tag endTag = beginTag.getEndTag();
            // positions of begin and end tags
            int beginTagBegin = beginTag.getStartPosition();
            int endTagBegin = beginTag.getEndPosition();
            int beginTagEnd = endTag.getStartPosition();
            int endTagEnd = endTag.getEndPosition();
            if (insideTag) {
                dummyString = modifyDummyString(new String(dummyString), beginTagBegin, endTagEnd);
            } else {
                dummyString = modifyDummyString(new String(dummyString), beginTagBegin, endTagBegin);
                dummyString = modifyDummyString(new String(dummyString), beginTagEnd, endTagEnd);
            }
        }
        for (int k = dummyString.indexOf(' '); (k < dummyString.length()) && (k != -1); ) {
            int kNew = dummyString.indexOf('*', k);
            if (kNew != -1) {
                output = inputModified.substring(k, kNew);
                k = dummyString.indexOf(' ', kNew);
                minCapacity++;
                outputArrayList.ensureCapacity(minCapacity);
                if (outputArrayList.add(output))
                    output = new String();
                else
                    minCapacity--;
            } else {
                output = inputModified.substring(k, dummyString.length());
                k = kNew;
                minCapacity++;
                outputArrayList.ensureCapacity(minCapacity);
                if (outputArrayList.add(output))
                    output = new String();
                else
                    minCapacity--;
            }
        }
        StringBuffer outputStringBuffer = new StringBuffer();
        outputArrayList.trimToSize();
        Object[] outputObj = outputArrayList.toArray();
        outputStr = new String[outputArrayList.size()];
        for (int j = 0; j < outputArrayList.size(); j++) {
            outputStr[j] = new String((String) outputObj[j]);
            outputStringBuffer.append(outputStr[j]);
        }
        outputArrayList = new ArrayList();
        inputModified = new String(outputStringBuffer.toString());
        dummyString = createDummyString(' ', inputModified.length());
    }
    return outputStr;
}
