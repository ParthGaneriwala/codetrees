public void run() {
    try {
        if (args.length < 5) {
            System.out.println("Missing arguments.");
            try {
                BufferedReader console = new BufferedReader(new InputStreamReader(System.in));
                System.out.println("Username for Bot (including @gmail.com): ");
                BOTUSERNAME = console.readLine();
                System.out.println("Password for Bot: ");
                BOTPASSWORD = console.readLine();
                System.out.println("Choose an admin password: ");
                ADMINPASS = console.readLine();
                System.out.println("Repeat admin password: ");
                if (!console.readLine().equals(ADMINPASS)) {
                    System.out.println("ERROR: Admin Passwords don't match! \nExiting now.");
                    return;
                }
                System.out.println("Server Address to connect to: (leave blank for default server)");
                String temp_response = console.readLine();
                if (temp_response.length() == 0) {
                    SERVERADDRESS = Main.DEFAULT_SERVERADDRESS;
                    SERVERPORT = Main.DEFAULT_SERVERPORT;
                } else {
                    SERVERADDRESS = temp_response;
                    System.out.println("Server Port to connect to: (leave blank for default port)");
                    temp_response = console.readLine();
                    if (temp_response.length() == 0) {
                        SERVERPORT = Main.DEFAULT_SERVERPORT;
                    } else {
                        SERVERPORT = temp_response;
                    }
                }
                System.out.println("Proxy Server Address: (leave blank for no proxy)");
                temp_response = console.readLine();
                if (temp_response.length() == 0) {
                    PROXY_SERVERADDRESS = "";
                    PROXY_SERVERPORT = "";
                    PROXY_USER = "";
                    PROXY_PASS = "";
                } else {
                    PROXY_SERVERADDRESS = temp_response;
                    System.out.println("Proxy Server Port: ");
                    PROXY_SERVERPORT = console.readLine();
                    System.out.println("Username for Proxy: ");
                    PROXY_USER = console.readLine();
                    System.out.println("Password for Proxy: ");
                    PROXY_PASS = console.readLine();
                }
            } catch (IOException ex) {
                error_log(ex.toString());
                error_log(ex.getStackTrace().toString());
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                return;
            }
        } else {
            BOTUSERNAME = args[0];
            BOTPASSWORD = args[1];
            ADMINPASS = args[2];
            SERVERADDRESS = args[3];
            SERVERPORT = args[4];
            if (args.length >= 9) {
                PROXY_SERVERADDRESS = args[5];
                PROXY_SERVERPORT = args[6];
                PROXY_USER = args[7];
                PROXY_PASS = args[8];
            }
        }
        // Open Log File Writer
        try {
            fstream = new FileWriter(BOTUSERNAME + ".log");
            out = new BufferedWriter(fstream);
            System.out.println("DEBUG ----- LOG FILE READY");
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        initializeConnection();
        login();
        setPresence(Presence.Type.available, DEFAULT_PRESENCE);
        // create new Packet Listener - unused?
        PacketListener echoPacket = new PacketListener() {

            public void processPacket(Packet packet) {
                if (packet instanceof Message) {
                    Message message = (Message) packet;
                    // print message body
                    debug_log("Received Message as Packet: " + message.getBody());
                }
            }
        };
        getRoster();
        Thread.sleep(2000);
        this.messageLog = new ArrayList<String>();
        this.messageLog.ensureCapacity(Main.MAX_MESSAGE_LOG_SIZE / 2);
        this.getSettings();
        debug_log("Main: Printing Roster\n*********************");
        int noEntries = roster.getEntryCount();
        Collection<RosterEntry> entries = roster.getEntries();
        relayTo = new Chat[noEntries];
        available = new boolean[noEntries];
        int x = 0;
        int j = 0;
        for (RosterEntry entry : entries) {
            if (roster.getPresence(entry.getUser()).isAvailable()) {
                available[x++] = true;
            } else {
                available[x++] = false;
            }
            debug_log("#" + entry.getType());
            debug_log(entry + ": " + roster.getPresence(entry.getUser()).toString());
            relayTo[j++] = connection.getChatManager().createChat(entry.getUser(), new EchoMessageListener(this));
        }
        debug_log("*********************");
        // TODO check if needed - connection.addPacketListener(echoPacket, (PacketFilter)(new AndFilter( new PacketTypeFilter(Message.class) ) ) );
        // DEBUG Chat chat = connection.getChatManager().createChat("amanatiit@gmail.com", echoMessage );
        // DEBUG chat.sendMessage("lava heloo!");
        // sendToAll("A Conference Bot is up and running. Send a message to this bot to relay to all. Try it now!");
        PresenceUpdater pUpdater = new PresenceUpdater(connection, this);
        pUpdater.start();
        this.setFileTransferManager();
        anagramThread = new AnagramThread(this);
        anagramThread.start();
        while (!this.quit) {
            Thread.sleep(30 * 1000);
            this.saveSettings();
        // DEBUG if (i%5000==0) chat.sendMessage( i + " message.");
        }
        debug_log("Exiting bot...");
        connection.disconnect();
        pUpdater.join();
        debug_log("Bye! Have a good day.");
        // Close debug log file
        try {
            out.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    // System.exit(0);
    } catch (XMPPException ex) {
        ex.printStackTrace();
    } catch (InterruptedException ex) {
        ex.printStackTrace();
    }
}
