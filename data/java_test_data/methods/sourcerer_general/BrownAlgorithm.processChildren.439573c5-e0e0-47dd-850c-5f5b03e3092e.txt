private void processChildren(AnyaryTree<T> tree) {
    if (tree.getChildren() == null)
        return;
    for (AnyaryTree<T> child : tree.getChildren()) {
        if (!elements.containsKey(child)) {
            processChildren(child);
        }
    }
    // now all children have statistical data
    int[] indices = new int[tree.getChildren().size()];
    int[] allIndices = new int[elements.size()];
    {
        // System.out.printf("Processing children, size=%d\n", indices.length);
        if (indices.length == 1) {
            AnyaryTree<T> child = tree.getChildren().iterator().next();
            Integer index = elements.get(child);
            elements.remove(child);
            elements.put(tree, index);
            elementsByIndex.set(index.intValue(), tree);
            return;
        }
        int i = 0;
        for (AnyaryTree<T> child : tree.getChildren()) {
            // System.out.printf("%s=%s\n", Integer.toString(i), child.getPayload() == null ? "<NULL>" : child.getPayload().toString());
            int value = elements.get(child).intValue();
            allIndices[i] = value;
            indices[i] = value;
            ++i;
        }
        for (Map.Entry<AnyaryTree<T>, Integer> entry : elements.entrySet()) {
            if (!tree.getChildren().contains(entry.getKey())) {
                allIndices[i++] = entry.getValue().intValue();
            }
        }
    // System.out.println();
    }
    // remove all children
    tree.getChildren().clear();
    int totalNumElements = allIndices.length;
    for (int numElements = indices.length; numElements > 1; --numElements) {
        // System.out.println(Arrays.toString(Arrays.copyOf(indices,numElements)));
        // find two closest items
        double minimalLoss = Double.MAX_VALUE;
        int bestIndex1 = 0, bestIndex2 = 0;
        for (int i = 0; i < numElements; ++i) {
            for (int j = i + 1; j < numElements; ++j) {
                double loss = estimateMerging(allIndices, i, j, totalNumElements);
                if (loss < minimalLoss) {
                    minimalLoss = loss;
                    bestIndex1 = i;
                    bestIndex2 = j;
                }
            }
        }
        mergeElements2(allIndices, bestIndex1, bestIndex2, numElements, totalNumElements);
        AnyaryTree<T> elem_i = elementsByIndex.get(indices[bestIndex1]);
        AnyaryTree<T> elem_j = elementsByIndex.get(indices[bestIndex2]);
        if (!(elem_i.getPayload() == elem_j.getPayload())) {
        // both non-nulls
        // System.out.println("Merged "+elem_i.getPayload()+" and "+elem_j.getPayload());
        }
        // at the last iteration, use the existing tree
        AnyaryTree<T> new_elem = numElements > 2 ? new AnyaryTree<T>(null) : tree;
        new_elem.addChild(elem_i);
        new_elem.addChild(elem_j);
        elements.remove(elem_i);
        elements.remove(elem_j);
        elements.put(new_elem, new Integer(indices[bestIndex1]));
        elementsByIndex.set(indices[bestIndex1], new_elem);
        elementsByIndex.set(indices[bestIndex2], elementsByIndex.get(numElements - 1));
        // elementsByIndex.setSize(numElements /* -1 */);
        indices[bestIndex2] = allIndices[bestIndex2] = indices[numElements - 1];
        --totalNumElements;
    // testArrays(indices, numElements-1);
    }
// System.out.printf("processed child %s, index=%d\n", tree.toString(), elements.get(tree).intValue());
}
