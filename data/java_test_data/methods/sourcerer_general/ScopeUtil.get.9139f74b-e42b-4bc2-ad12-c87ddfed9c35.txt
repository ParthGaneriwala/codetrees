public static <T> T get(final Object object, String name, Class<T> clazz) {
    if ("this".equals(name) && clazz.isInstance(object)) {
        return clazz.cast(object);
    }
    Member member = getScoped(object.getClass()).get(name);
    if (member instanceof Field) {
        if (clazz.isAssignableFrom(Variable.class)) {
            final Field field = (Field) member;
            return clazz.cast(new Variable() {

                public boolean getBoolean() {
                    try {
                        return field.getBoolean(object);
                    } catch (Exception e) {
                        logWarning(e);
                        return false;
                    }
                }

                public byte getByte() {
                    try {
                        return field.getByte(object);
                    } catch (Exception e) {
                        logWarning(e);
                        return 0;
                    }
                }

                public char getChar() {
                    try {
                        return field.getChar(object);
                    } catch (Exception e) {
                        logWarning(e);
                        return 0;
                    }
                }

                public double getDouble() {
                    try {
                        return field.getDouble(object);
                    } catch (Exception e) {
                        logWarning(e);
                        return 0.0;
                    }
                }

                public float getFloat() {
                    try {
                        return field.getFloat(object);
                    } catch (Exception e) {
                        logWarning(e);
                        return 0f;
                    }
                }

                public int getInt() {
                    try {
                        return field.getInt(object);
                    } catch (Exception e) {
                        logWarning(e);
                        return 0;
                    }
                }

                public long getLong() {
                    try {
                        return field.getLong(object);
                    } catch (Exception e) {
                        logWarning(e);
                        return 0L;
                    }
                }

                public short getShort() {
                    try {
                        return field.getShort(object);
                    } catch (Exception e) {
                        logWarning(e);
                        return 0;
                    }
                }

                public Object get() {
                    try {
                        return field.get(object);
                    } catch (IllegalAccessException e) {
                        logWarning(e);
                        return null;
                    }
                }

                public void setBoolean(boolean value) {
                    try {
                        field.setBoolean(object, value);
                    } catch (Exception e) {
                        logWarning(e);
                    }
                }

                public void setByte(byte value) {
                    try {
                        field.setByte(object, value);
                    } catch (Exception e) {
                        logWarning(e);
                    }
                }

                public void setChar(char value) {
                    try {
                        field.setChar(object, value);
                    } catch (Exception e) {
                        logWarning(e);
                    }
                }

                public void setDouble(double value) {
                    try {
                        field.setDouble(object, value);
                    } catch (Exception e) {
                        logWarning(e);
                    }
                }

                public void setFloat(float value) {
                    try {
                        field.setFloat(object, value);
                    } catch (Exception e) {
                        logWarning(e);
                    }
                }

                public void setInt(int value) {
                    try {
                        field.setInt(object, value);
                    } catch (Exception e) {
                        logWarning(e);
                    }
                }

                public void setLong(long value) {
                    try {
                        field.setLong(object, value);
                    } catch (Exception e) {
                        logWarning(e);
                    }
                }

                public void setShort(short value) {
                    try {
                        field.setShort(object, value);
                    } catch (Exception e) {
                        logWarning(e);
                    }
                }

                public void set(Object value) {
                    try {
                        field.set(object, value);
                    } catch (Exception e) {
                        logWarning(e);
                    }
                }

                protected void logWarning(Exception e) {
                    log.warning("Error accessing field.", "class", object.getClass(), "field", field, e);
                }
            });
        } else {
            try {
                Object value = ((Field) member).get(object);
                if (clazz.isInstance(value)) {
                    return clazz.cast(value);
                }
            } catch (IllegalAccessException e) {
                log.warning("Error accessing field.", "class", object.getClass(), "field", member, e);
            }
        }
    } else if (member instanceof Method && clazz.isAssignableFrom(Function.class)) {
        final Method method = (Method) member;
        return clazz.cast(new Function() {

            public Object call(Object... args) {
                try {
                    return method.invoke(object, args);
                } catch (Exception e) {
                    log.warning("Error invoking method.", "class", object.getClass(), "method", method, "args", args, e);
                    return null;
                }
            }
        });
    }
    return null;
}
