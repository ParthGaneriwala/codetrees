public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
    response.setContentType("text/html");
    PrintWriter out = response.getWriter();
    System.out.println(" The Search is working ");
    String cmd = request.getParameter("cmd");
    s = request.getSession();
    userName = (String) s.getAttribute("userName");
    if (userName == null || userName == "") {
        HasRights = false;
    } else {
        HasRights = true;
        System.out.println("SESSION USERNAME : " + userName);
    }
    if (cmd.equals("0")) {
        System.out.println("cmd0 : " + cmd);
        String Keywords = request.getParameter("keywords");
        System.out.println("Keywords received : " + Keywords);
        Keywords = Keywords.toLowerCase();
        ComputeResult CRC = new ComputeResult();
        try {
            ArrayList myArrayList = CRC.ComputeSearchResult(Keywords);
            if (myArrayList == null) {
            } else {
                Iterator itr = myArrayList.iterator();
                String key = "";
                float value = 0;
                int cnt = 0;
                while (itr.hasNext()) {
                    cnt++;
                    Map.Entry e = (Map.Entry) itr.next();
                    key = (String) e.getKey();
                    value = ((Float) e.getValue()).floatValue();
                    // call the URL retriever function
                    PostResults_KeywordsOnly(key, out, HasRights);
                }
            }
        } catch (InstantiationException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }
    if (cmd.equals("1")) {
        try {
            System.out.println("cmd1 : " + cmd);
            SearchByCategory SBC = new SearchByCategory(HasRights, userName);
            String Keywords = request.getParameter("keywords");
            if (Keywords.equals("") || Keywords == null) {
                String category = request.getParameter("catList");
                String Result = SBC.SearchWithNoKeywords(category);
                out.println(Result);
                return;
            } else {
                String category = request.getParameter("catList");
                String Result = SBC.SearchWithKeywords(category, Keywords);
                out.println(Result);
                return;
            }
        } catch (InstantiationException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }
    if (cmd.equals("2")) {
        try {
            System.out.println("cmd2 : " + cmd);
            SearchByDate SBD = new SearchByDate(HasRights, userName);
            String Keywords = request.getParameter("keywords");
            if (Keywords.equals("") || Keywords == null) {
                // pass only date and type parameter
                String type = request.getParameter("type");
                if (type.equals("1")) {
                    String date = request.getParameter("date");
                    String Result = SBD.SearchType1(date, null);
                    out.println(Result);
                    return;
                }
                if (type.equals("2")) {
                    String date = request.getParameter("date");
                    String Result = SBD.SearchType2(date, null);
                    out.println(Result);
                    return;
                }
                if (type.equals("3")) {
                    String date1 = request.getParameter("date1");
                    String date2 = request.getParameter("date2");
                    String Result = SBD.SearchType3(date1, date2, null);
                    out.println(Result);
                    return;
                }
            } else {
                // pass both date, keywords and type
                // select * from url,urlpostedby where url.timestamp >= '"+date+"'";
                String type = request.getParameter("type");
                if (type.equals("1")) {
                    String date = request.getParameter("date");
                    String Result = SBD.SearchType1(date, Keywords);
                    out.println(Result);
                    return;
                }
                if (type.equals("2")) {
                    String date = request.getParameter("date");
                    String Result = SBD.SearchType2(date, Keywords);
                    out.println(Result);
                    return;
                }
                if (type.equals("3")) {
                    String date1 = request.getParameter("date1");
                    String date2 = request.getParameter("date2");
                    String Result = SBD.SearchType3(date1, date2, Keywords);
                    out.println(Result);
                    return;
                }
            }
        } catch (InstantiationException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }
    if (cmd.equals("3")) {
        try {
            System.out.println("cmd3 : " + cmd);
            SearchByPopularity SBP = new SearchByPopularity(HasRights, userName);
            String Keywords = request.getParameter("keywords");
            if (Keywords.equals("") || Keywords == null) {
                String category = request.getParameter("catList");
                String Result = SBP.SearchWithNoKeywords(category);
                out.println(Result);
                return;
            } else {
                String category = request.getParameter("catList");
                String Result = SBP.SearchWithKeywords(category, Keywords);
                out.println(Result);
                return;
            }
        } catch (InstantiationException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }
    out.flush();
    out.close();
}
