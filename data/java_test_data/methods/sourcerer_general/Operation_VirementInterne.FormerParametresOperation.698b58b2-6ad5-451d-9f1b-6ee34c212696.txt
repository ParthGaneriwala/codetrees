public Parametres FormerParametresOperation() {
    Parametres parametres;
    if (memeMonnaie()) {
        /*
  Operation_Virementinterne:
    Date Date = date;
    Boolean Verifie = verifie;
    OperationFactoryInfos.TypeOperation Typeoperation = OPERATION_VIREMENTINTERNE;

    List<CategorieInfos> Categories = void;
    List<ProprietaireInfos> Proprietaires = void;
    List<Compte> Comptes = compte debourseur, compte receveur;
    List<String> Libelles = new ArrayList<String>() = void;
    List<Dette> Dettes = new ArrayList<Dette>() = void;
    List<MonnaieInfos> Monnaies = new ArrayList<MonnaieInfos>() = void;
    List<Float> Sommes = new ArrayList<Float>() = somme concernee;
  */
        parametres = new Parametres(getDate(), verifie.isChecked(), OperationFactoryInfos.TypeOperation.OPERATION_VIREMENTINTERNE);
        try {
            parametres.ajouterCompte(comptes_debourseur.donneLeCompteSelectionne());
        } catch (MonException e) {
            message_information.setMessage(Label_MessageInformation.Etat.MAUVAISEENTREE, e.getMessage());
            throw e;
        }
        try {
            parametres.ajouterCompte(comptes_receveur.donneLeCompteSelectionne());
        } catch (MonException e) {
            message_information.setMessage(Label_MessageInformation.Etat.MAUVAISEENTREE, e.getMessage());
            throw e;
        }
        try {
            Float s = Float.valueOf(somme.getText().trim());
            parametres.ajouterSomme(s);
        } catch (NumberFormatException nfe) {
            MessageErreurEntree("La somme n'a pas ete rentree correctement. L'operation n'a pas ete entree.");
            throw new MonException("NumberFormatException: " + nfe.getMessage());
        }
    } else if (!memeMonnaie()) {
        /*
  Operation_Transfertmonnaiepersonnel:
    Date Date = date;
    Boolean Verifie = verifie;
    OperationFactoryInfos.TypeOperation Typeoperation = OPERATION_TRANSFERTMONNAIEPERSONNEL;

    List<CategorieInfos> Categories = void;
    List<ProprietaireInfos> Proprietaires = void;
    List<Compte> Comptes = compte debourseur, compte receveur;
    List<String> Libelles = new ArrayList<String>() = void;
    List<Dette> Dettes = new ArrayList<Dette>() = void;
    List<MonnaieInfos> Monnaies = new ArrayList<MonnaieInfos>() = void;
    List<Float> Sommes = new ArrayList<Float>() = somme deboursee, somme recue;
  */
        parametres = new Parametres(getDate(), false, OperationFactoryInfos.TypeOperation.OPERATION_TRANSFERTMONNAIEPERSONNEL);
        try {
            parametres.ajouterCompte(comptes_debourseur.donneLeCompteSelectionne());
        } catch (MonException e) {
            message_information.setMessage(Label_MessageInformation.Etat.MAUVAISEENTREE, e.getMessage());
            throw e;
        }
        try {
            parametres.ajouterCompte(comptes_receveur.donneLeCompteSelectionne());
        } catch (MonException e) {
            message_information.setMessage(Label_MessageInformation.Etat.MAUVAISEENTREE, e.getMessage());
            throw e;
        }
        try {
            Float s = Float.valueOf(somme.getText().trim());
            parametres.ajouterSomme(s);
        } catch (NumberFormatException nfe) {
            MessageErreurEntree("La somme n'a pas ete rentree correctement. L'operation n'a pas ete entree.");
            throw new MonException("NumberFormatException: " + nfe.getMessage());
        }
        try {
            Float s2 = Float.valueOf(somme_recue.getText().trim());
            parametres.ajouterSomme(s2);
        } catch (NumberFormatException nfe) {
            MessageErreurEntree("La somme recue n'a pas ete rentree correctement. L'operation n'a pas ete entree.");
            throw new MonException("NumberFormatException: " + nfe.getMessage());
        }
    } else
        throw new RuntimeException("La il y a un pb dans ton programme petite Clairette");
    return parametres;
}
