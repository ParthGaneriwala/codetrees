public static List<KitTimesBean> ParityDimNoKitTimes3(String field, String type) {
    List<KitTimesBean> ktbList = new ArrayList<KitTimesBean>();
    Map<Long, String> map = MapResultService.getMsHistoryMap();
    List<Map.Entry<Long, String>> infoIds = new ArrayList<Map.Entry<Long, String>>(map.entrySet());
    // 排序
    Collections.sort(infoIds, new Comparator<Map.Entry<Long, String>>() {

        public int compare(Map.Entry<Long, String> o1, Map.Entry<Long, String> o2) {
            return (int) (o1.getKey() - o2.getKey());
        }
    });
    // 号码上次出现位置
    Map<String, Integer> numSepMap = new HashMap<String, Integer>();
    // 计算相同号码出现间隔
    for (int i = 0; i < infoIds.size(); i++) {
        Map.Entry<Long, String> v = infoIds.get(i);
        String vVal = "";
        if (CodeType.isEven(v.getValue())) {
            if (CodeType.isBig(v.getValue())) {
                vVal = "even_big";
            } else {
                vVal = "even_small";
            }
        } else {
            if (CodeType.isBig(v.getValue())) {
                vVal = "odd_big";
            } else {
                vVal = "odd_small";
            }
        }
        if (numSepMap.containsKey(vVal)) {
            int timesInv = 1;
            int iVal = numSepMap.remove(vVal);
            int iInv = i - iVal;
            if (numSepMap.containsKey(String.valueOf(iInv))) {
                timesInv = numSepMap.remove(String.valueOf(iInv));
                timesInv = timesInv + 1;
            }
            numSepMap.put(String.valueOf(iInv), timesInv);
        }
        numSepMap.put(vVal, i);
    }
    int count = infoIds.size();
    for (int i = 0; i <= 100; i++) {
        if (numSepMap.containsKey(String.valueOf(i))) {
            ktbList.add(new KitTimesBean(i, numSepMap.get(String.valueOf(i)), (double) ((numSepMap.get(String.valueOf(i)) * 100.0) / count)));
        }
    }
    return ktbList;
}
