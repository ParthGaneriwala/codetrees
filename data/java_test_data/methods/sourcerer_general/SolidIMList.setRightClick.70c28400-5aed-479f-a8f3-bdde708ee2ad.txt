private void setRightClick() {
    popup = new JPopupMenu();
    JMenuItem menuItem = new JMenuItem("Remove");
    menuItem.addActionListener(new ActionListener() {

        public void actionPerformed(ActionEvent e) {
            if (personClicked != "" && JOptionPane.showConfirmDialog(null, "Are you sure you want to delete \n" + personClicked) == 0) {
                removeUser(personClicked);
            } else if (personClicked == "") {
                JOptionPane.showMessageDialog(null, "The list is empty!", "Error", 0);
            }
        }
    });
    popup.add(menuItem);
    menuItem = new JMenuItem("Set Name");
    menuItem.addActionListener(new ActionListener() {

        public void actionPerformed(ActionEvent e) {
            String nickName = JOptionPane.showInputDialog("Please enter the nick name for " + personClicked);
            if (nickName != null && !nickName.equals("")) {
                RosterEntry entry = myRoster.getRoster().getEntry(personClicked);
                entry.setName(nickName);
            }
        }
    });
    popup.add(menuItem);
    menuItem = new JMenuItem("Email");
    menuItem.addActionListener(new ActionListener() {

        public void actionPerformed(ActionEvent e) {
            SendEmailWindow emailWindow = new SendEmailWindow(userName, pasw, personClicked);
        }
    });
    popup.add(menuItem);
    menuItem = new JMenuItem("History");
    menuItem.addActionListener(new ActionListener() {

        public void actionPerformed(ActionEvent e) {
            new HistoryMessagesWindow(hdb, personClicked, rostCon);
        }
    });
    popup.add(menuItem);
    // menuItem2 = new JMenu("Group");
    // final JMenuItem addgroup = new JMenuItem("New Group");
    // addgroup.addActionListener(new ActionListener() {
    // public void actionPerformed(ActionEvent e) {
    // String name = (JOptionPane
    // .showInputDialog("Please enter the group name:"));
    // groupC.addGroup(name);
    // DefaultComboBoxModel myDCM = new DefaultComboBoxModel(groupC
    // .getAllGroupName());
    // groupList.setModel(myDCM);
    // JMenuItem tmp = new JMenuItem(name);
    // tmp.addActionListener(new ActionListener() {
    // public void actionPerformed(ActionEvent e) {
    // String name = ((JMenuItem) e.getSource()).getText();
    // groupC.addpersontoGroup(personClicked, groupC
    // .getGroupName(name));
    // }
    // });
    // menuItem2.add(tmp);
    // menuItem2.repaint();
    // }
    // });
    // menuItem2.add(addgroup);
    // menuItem2.addSeparator();
    // popup.add(menuItem2);
    blockItem = new JMenuItem();
    blockItem.addActionListener(new ActionListener() {

        public void actionPerformed(ActionEvent e) {
            if (rostCon.getRosterDB().isRosterBlocked(personClicked)) {
                blockItem.setText("Block");
                rostCon.unblockPerson(personClicked);
                contactList.setListData(myRoster.getRosterString());
                System.out.println("unblocking, inside action");
            } else {
                blockItem.setText("Unblock");
                rostCon.blockPerson(personClicked);
                contactList.setListData(myRoster.getRosterString());
                System.out.println("blocking, inside action");
            }
        }
    });
    popup.add(blockItem);
    popup.addSeparator();
    menuItem = new JMenuItem("Help");
    menuItem.addActionListener(new ActionListener() {

        public void actionPerformed(ActionEvent e) {
            WikiSearch help = new WikiSearch();
            help.setWikiSearchInfo("http://code.google.com/p/cmpt-275-project/wiki/user_manual", "");
            help.LaunchWikiSearch();
        }
    });
    popup.add(menuItem);
    popup.addSeparator();
    menuItem = new JMenuItem("Properties");
    menuItem.addActionListener(new ActionListener() {

        public void actionPerformed(ActionEvent e) {
            settingWin.showFrame();
        }
    });
    popup.add(menuItem);
    class AddDollorActionListner implements MouseMotionListener, MouseListener {

        public AddDollorActionListner() {
        }

        public void mouseClicked(MouseEvent me) {
            JList theContactList = (JList) me.getSource();
            int index = theContactList.locationToIndex(me.getPoint());
            if (me.getClickCount() == 2) {
                if (index >= 0) {
                    Object yrContactList = theContactList.getModel().getElementAt(index);
                    createSolidIMChatWindow(yrContactList.toString());
                }
            }
        }

        public void mouseEntered(MouseEvent e) {
        }

        public void mouseExited(MouseEvent e) {
            contactList.clearSelection();
        }

        public void mousePressed(MouseEvent me) {
            if (me.isPopupTrigger()) {
                popup.show(me.getComponent(), me.getX(), me.getY());
            }
        }

        public void mouseReleased(MouseEvent Me) {
            JList theContactList = (JList) Me.getSource();
            int index = theContactList.locationToIndex(Me.getPoint());
            if (Me.isPopupTrigger()) {
                popup.show(Me.getComponent(), Me.getX(), Me.getY());
                try {
                    Object yrContactList = theContactList.getModel().getElementAt(index);
                    personClicked = yrContactList.toString();
                    if (rostCon.getRosterDB().isRosterBlocked(personClicked)) {
                        blockItem.setText("UnBlock");
                    } else {
                        blockItem.setText("Block");
                        System.out.println("not block " + rostCon.getRosterDB().isRosterBlocked(personClicked));
                    }
                } catch (NullPointerException e) {
                    System.out.println("Empty List");
                } catch (ArrayIndexOutOfBoundsException e) {
                }
            }
        }

        public void mouseMoved(MouseEvent e) {
        // JList theContactList = (JList) e.getSource();
        // int index = theContactList.locationToIndex(e.getPoint());
        // Object yrContactList = theContactList.getModel().getElementAt(
        // index);
        // contactList.setSelectedIndex(index);
        // personClicked = yrContactList.toString();
        }

        public void mouseDragged(MouseEvent e) {
        }
    }
    contactList.addMouseListener(new AddDollorActionListner());
    contactList.addMouseMotionListener(new AddDollorActionListner());
}
