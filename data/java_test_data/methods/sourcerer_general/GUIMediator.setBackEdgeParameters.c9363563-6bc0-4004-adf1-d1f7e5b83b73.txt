private void setBackEdgeParameters(Node srcNode, BackEdge backEdge) {
    HashMap<String, Integer> levelNumberVsMinXPos = new HashMap<String, Integer>();
    HashMap<String, Integer> levelNumberVsMaxXPos = new HashMap<String, Integer>();
    HashMap<String, Node> levelNumberVsLeftMostNodeInSubGraph = new HashMap<String, Node>();
    HashMap<String, Node> levelNumberVsRightMostNodeInSubGraph = new HashMap<String, Node>();
    int srcLevelIndex = backEdge.getSrcLevelIndex();
    BFSLevel destLevel = backEdge.getDestLevel();
    Node destNode = backEdge.getDestNode();
    int levelIndex = getIndexForLevel(destLevel);
    System.out.println("****************************************************");
    DrawingParameters dpDestNode = nodesVsDrawingParameters.get(destNode);
    int xPosDestNode = dpDestNode.getXPosition();
    levelNumberVsMinXPos.put("" + levelIndex, new Integer(xPosDestNode));
    System.out.println("Putting into level number " + levelIndex + " minimum xpos = " + xPosDestNode);
    levelNumberVsLeftMostNodeInSubGraph.put("" + levelIndex, destNode);
    int maxX = xPosDestNode + dpDestNode.getSize().width;
    levelNumberVsMaxXPos.put("" + levelIndex, new Integer(maxX));
    levelNumberVsRightMostNodeInSubGraph.put("" + levelIndex, destNode);
    System.out.println("Putting into level number " + levelIndex + " maximum xpos = " + maxX);
    HashSet<Node> currentSet = new HashSet<Node>();
    currentSet.add(destNode);
    levelIndex++;
    Node frontierNodeLeft = null;
    BFSLevel leftFrontierNodeLevel = null;
    Node frontierNodeRight = null;
    BFSLevel rightFrontierNodeLevel = null;
    outer: while (true) {
        Iterator<Node> iter = currentSet.iterator();
        HashSet<Node> childSet = new HashSet<Node>();
        int minXPosOfSubGraphInLevel = 0;
        int maxXPosOfSubGraphInLevel = 0;
        Node nodeWithMinXPosInSubGraphAtLevel = null;
        Node nodeWithMaxXPosInSubGraphAtLevel = null;
        while (iter.hasNext()) {
            Node node = iter.next();
            Vector<Node> successors = node.getSuccessors();
            for (int i = 0; i < successors.size(); i++) {
                Node childNode = successors.elementAt(i);
                if (childNode == srcNode || (levels.elementAt(levelIndex).containsNode(// && pathExists(childNode,
                childNode) && // srcNode)
                childSet.add(childNode))) {
                    // Found a node in
                    // the subgraph in
                    // this level
                    DrawingParameters dpChildNode = nodesVsDrawingParameters.get(childNode);
                    int xPos = dpChildNode.getXPosition();
                    if (minXPosOfSubGraphInLevel == 0) {
                        minXPosOfSubGraphInLevel = xPos;
                        maxXPosOfSubGraphInLevel = xPos + dpChildNode.getSize().width;
                        nodeWithMinXPosInSubGraphAtLevel = childNode;
                        nodeWithMaxXPosInSubGraphAtLevel = childNode;
                    } else {
                        if (xPos < minXPosOfSubGraphInLevel) {
                            minXPosOfSubGraphInLevel = xPos;
                            nodeWithMinXPosInSubGraphAtLevel = childNode;
                        }
                        if (xPos + dpChildNode.getSize().width > maxXPosOfSubGraphInLevel) {
                            maxXPosOfSubGraphInLevel = xPos + dpChildNode.getSize().width;
                            nodeWithMaxXPosInSubGraphAtLevel = childNode;
                        }
                    }
                }
            }
            if (successors.contains(srcNode))
                break outer;
        }
        // while loop -> all successors processed
        levelNumberVsMinXPos.put("" + levelIndex, new Integer(minXPosOfSubGraphInLevel));
        System.out.println("Putting into level number " + levelIndex + " minimum xpos = " + minXPosOfSubGraphInLevel);
        levelNumberVsLeftMostNodeInSubGraph.put("" + levelIndex, nodeWithMinXPosInSubGraphAtLevel);
        levelNumberVsMaxXPos.put("" + levelIndex, new Integer(maxXPosOfSubGraphInLevel));
        System.out.println("Putting into level number " + levelIndex + " maximum xpos = " + maxXPosOfSubGraphInLevel);
        levelNumberVsRightMostNodeInSubGraph.put("" + levelIndex, nodeWithMaxXPosInSubGraphAtLevel);
        // Populate the frontier node and the level in which it is found
        if (frontierNodeLeft == null) {
            // First instance
            frontierNodeLeft = nodeWithMinXPosInSubGraphAtLevel;
            frontierNodeRight = nodeWithMaxXPosInSubGraphAtLevel;
            leftFrontierNodeLevel = levels.elementAt(levelIndex);
            rightFrontierNodeLevel = levels.elementAt(levelIndex);
        } else {
            DrawingParameters dpFrontierNodeLeft = nodesVsDrawingParameters.get(frontierNodeLeft);
            DrawingParameters dpFrontierNodeRight = nodesVsDrawingParameters.get(frontierNodeRight);
            if (dpFrontierNodeLeft.getXPosition() > minXPosOfSubGraphInLevel)
                frontierNodeLeft = nodeWithMinXPosInSubGraphAtLevel;
            if (dpFrontierNodeRight.getXPosition() + dpFrontierNodeRight.getSize().width < maxXPosOfSubGraphInLevel)
                frontierNodeRight = nodeWithMaxXPosInSubGraphAtLevel;
        }
        // Update the current set
        currentSet = childSet;
        // Update the current index
        levelIndex++;
    }
    EdgeParameters edgeParameters = createBackwardManhattanEdge(levelNumberVsMinXPos, levelNumberVsMaxXPos, levelNumberVsLeftMostNodeInSubGraph, levelNumberVsRightMostNodeInSubGraph, frontierNodeLeft, frontierNodeRight, srcNode, backEdge);
    edgeParametersList.add(edgeParameters);
}
