// / Evaluate the manifold with supplied transforms. This assumes
// / modest motion from the original state. This does not change the
// / point count, impulses, etc. The radii must come from the shapes
public void initialize(final BBManifold manifold, final BBTransform xfA, float radiusA, final BBTransform xfB, float radiusB) {
    if (manifold.m_pointCount == 0) {
        return;
    }
    switch(manifold.m_type) {
        case BBManifold.e_circles:
            {
                BBVec2 pointA = mul(xfA, manifold.m_localPoint);
                BBVec2 pointB = mul(xfB, manifold.m_points[0].m_localPoint);
                BBVec2 normal = new BBVec2(1.0f, 0.0f);
                if (distanceSquared(pointA, pointB) > FLT_EPSILON * FLT_EPSILON) {
                    normal = sub(pointB, pointA);
                    normal.normalize();
                }
                m_normal = normal;
                BBVec2 cA = add(pointA, mul(radiusA, normal));
                BBVec2 cB = sub(pointB, mul(radiusB, normal));
                m_points[0] = mul(0.5f, add(cA, cB));
            }
            break;
        case BBManifold.e_faceA:
            {
                BBVec2 normal = mul(xfA.R, manifold.m_localPlaneNormal);
                BBVec2 planePoint = mul(xfA, manifold.m_localPoint);
                // Ensure normal points from A to B.
                m_normal = normal;
                for (int i = 0; i < manifold.m_pointCount; ++i) {
                    BBVec2 clipPoint = mul(xfB, manifold.m_points[i].m_localPoint);
                    BBVec2 cA = add(clipPoint, mul(radiusA - dot(sub(clipPoint, planePoint), normal), normal));
                    BBVec2 cB = sub(clipPoint, mul(radiusB, normal));
                    m_points[i] = mul(0.5f, add(cA, cB));
                }
            }
            break;
        case BBManifold.e_faceB:
            {
                BBVec2 normal = mul(xfB.R, manifold.m_localPlaneNormal);
                BBVec2 planePoint = mul(xfB, manifold.m_localPoint);
                // Ensure normal points from A to B.
                m_normal = normal.neg();
                for (int i = 0; i < manifold.m_pointCount; ++i) {
                    BBVec2 clipPoint = mul(xfA, manifold.m_points[i].m_localPoint);
                    BBVec2 cA = sub(clipPoint, mul(radiusA, normal));
                    BBVec2 cB = add(clipPoint, mul(radiusB - dot(sub(clipPoint, planePoint), normal), normal));
                    m_points[i] = mul(0.5f, add(cA, cB));
                }
            }
            break;
    }
}
