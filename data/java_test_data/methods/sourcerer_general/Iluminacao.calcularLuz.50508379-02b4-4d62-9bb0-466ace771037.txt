Vetor calcularLuz(Vetor ia, double ka, Vetor il, Vetor kd, Vetor od, double ks, double rugosidade, Ponto pl) {
    Vetor nulo = new Vetor(0, 0, 0);
    // vetor que indica a dire��o da luz
    Vetor luz = pl.sub(this.pReal);
    // componente ambiental
    this.compAmbiental = ia.mult_esc(ka);
    // normalizando o vetor V
    this.v.normalizar();
    // normalizando o vetor N
    this.normal.normalizar();
    // normalizando o vetor V
    luz.normalizar();
    // calculando o produto interno
    double teste = this.v.prod_interno(this.normal);
    if (teste < 0) {
        // fazendo multiplica��o pelo escalar
        this.normal = this.normal.mult_esc(-1);
    }
    // calcula o produto interno entre a luz e a normal do ponto
    double prodInt = this.normal.prod_interno(luz);
    if (prodInt < 0) {
        this.compDifusa = nulo;
        this.compEspecular = nulo;
    } else {
        Vetor r = (this.normal.mult_esc(2 * prodInt)).sub(luz);
        r.normalizar();
        // componente difusa
        this.compDifusa = ((kd.mult_vet(od)).mult_vet(il)).mult_esc(prodInt);
        double temp = this.v.prod_interno(r);
        if (temp < 0) {
            this.compEspecular = nulo;
        } else {
            double temp2 = Math.pow(temp, rugosidade);
            double temp3 = temp2 * ks;
            Vetor temp4 = il.mult_esc(temp3);
            // componente especular
            this.compEspecular = temp4;
        }
    }
    this.somatorio = this.somatorio.soma(this.compDifusa.soma(this.compEspecular));
    return (this.compAmbiental.soma(this.somatorio));
}
