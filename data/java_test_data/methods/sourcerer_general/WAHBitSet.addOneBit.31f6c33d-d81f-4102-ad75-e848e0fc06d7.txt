private void addOneBit(int w) {
    if (RUN_UNTESTED_CODE) {
        int nb1, nb2;
        int cps = (w >>> MAXBITS);
        nset = 0;
        if (active.nbits != 0) {
            // active contains some uncompressed bits
            int w1;
            nb1 = active.nbits;
            nb2 = MAXBITS - active.nbits;
            active.val <<= nb2;
            if (cps != 0) {
                // incoming bits are comporessed
                int b2 = (isOneFill(w) ? 1 : 0);
                if (b2 != 0) {
                    w1 = (1 << nb2) - 1;
                    active.val |= w1;
                }
                appendLiteral();
                nb2 = (w & MAXCNT) - 1;
                if (nb2 > 1) {
                    // append a counter
                    appendCounter(b2, nb2);
                } else if (nb2 == 1) {
                    if (b2 != 0)
                        active.val = ALLONES;
                    appendLiteral();
                }
                active.nbits = nb1;
                active.val = ((1 << nb1) - 1) * b2;
            } else {
                // incoming bits are not compressed
                w1 = (w >>> nb1);
                active.val |= w1;
                appendLiteral();
                w1 = (1 << nb1) - 1;
                active.val = (w & w1);
                active.nbits = nb1;
            }
        } else // end of the case where there are active bits
        if (cps != 0) {
            // no active bit
            int b2 = (isOneFill(w) ? 1 : 0);
            nb2 = (w & MAXCNT);
            if (nb2 > 1)
                appendCounter(b2, nb2);
            else if (nb2 == 1) {
                if (b2 != 0)
                    active.val = ALLONES;
                appendLiteral();
            }
        } else {
            // no active bits
            // new word is a raw bit pattern, simply add the word
            active.val = w;
            appendLiteral();
        }
    } else {
        throw new AssertionError("Untested code detected, would rather die than run this");
    }
}
