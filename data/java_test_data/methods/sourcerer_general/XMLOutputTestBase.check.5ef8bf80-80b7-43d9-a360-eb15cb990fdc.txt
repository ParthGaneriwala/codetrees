protected void check(String filename, String encoding, String regexPresent, String regexAbsent, boolean errorExpected, Change code, String base) throws IOException {
    // TestLogger tl = new TestLogger(BaseXMLWriter.class);
    blockLogger();
    boolean errorsFound;
    Model m = createMemModel();
    InputStream in = new FileInputStream(filename);
    m.read(in, base);
    in.close();
    // m.read(filename);
    Writer sw;
    ByteArrayOutputStream bos = null;
    if (encoding == null)
        sw = new StringWriter();
    else {
        bos = new ByteArrayOutputStream();
        sw = new OutputStreamWriter(bos, encoding);
    }
    Properties p = (Properties) System.getProperties().clone();
    RDFWriter writer = m.getWriter(lang);
    code.modify(m, writer);
    writer.write(m, sw, base);
    sw.close();
    String contents;
    if (encoding == null)
        contents = sw.toString();
    else {
        contents = bos.toString(encoding);
    }
    try {
        Model m2 = createMemModel();
        m2.read(new StringReader(contents), base);
        assertTrue("Data got changed.", m.isIsomorphicWith(m2));
        if (regexPresent != null)
            assertTrue("Should find /" + regexPresent + "/", Pattern.compile(regexPresent, Pattern.DOTALL).matcher(contents).find());
        if (regexAbsent != null)
            assertTrue("Should not find /" + regexAbsent + "/", !Pattern.compile(regexAbsent, Pattern.DOTALL).matcher(contents).find());
        contents = null;
    } finally {
        errorsFound = unblockLogger();
        System.setProperties(p);
        if (contents != null) {
            System.err.println("===================");
            System.err.println("Offending content - " + toString());
            System.err.println("===================");
            System.err.println(contents);
            System.err.println("===================");
        }
    }
    assertEquals("Errors (not) detected.", errorExpected, errorsFound);
}
