private NodeInfo calcNodeInfo(CyNetwork inputNetwork, int nodeIndex) {
    int[] neighborhood;
    String callerID = "Algorithm.calcNodeInfo";
    if (inputNetwork == null) {
        System.err.println("In " + callerID + ": gpInputGraph was null.");
        return null;
    }
    // get neighborhood of this node (including the node)
    int[] neighbors = getNeighborArray(inputNetwork, nodeIndex);
    if (neighbors.length < 2) {
        // if there are no neighbors or just one neighbor
        NodeInfo nodeInfo = new NodeInfo();
        if (neighbors.length == 1) {
            // only one neighbor
            nodeInfo.coreLevel = 1;
            nodeInfo.coreDensity = 1.0;
            nodeInfo.density = 1.0;
        // nodeInfo.numNodeNeighbors=2;//????
        // nodeInfo.nodeNeighbors=????
        }
        // else it is a isolated node
        return (nodeInfo);
    }
    // add original node to extract complete neighborhood
    Arrays.sort(neighbors);
    if (Arrays.binarySearch(neighbors, nodeIndex) < 0) {
        // add itself as its neighbor
        neighborhood = new int[neighbors.length + 1];
        System.arraycopy(neighbors, 0, neighborhood, 1, neighbors.length);
        neighborhood[0] = nodeIndex;
    } else {
        neighborhood = neighbors;
    }
    // extract neighborhood subgraph
    GraphPerspective gpNodeNeighborhood = inputNetwork.createGraphPerspective(neighborhood);
    if (gpNodeNeighborhood == null) {
        // this shouldn't happen
        System.err.println("In " + callerID + ": gpNodeNeighborhood was null.");
        return null;
    }
    // calculate the node information for each node
    NodeInfo nodeInfo = new NodeInfo();
    // density
    if (gpNodeNeighborhood != null) {
        nodeInfo.density = calcDensity(gpNodeNeighborhood, params.isIncludeLoops());
    }
    nodeInfo.numNodeNeighbors = neighborhood.length;
    // calculate the highest k-core
    GraphPerspective gpCore = null;
    Integer k = null;
    Object[] returnArray = getHighestKCore(gpNodeNeighborhood);
    k = (Integer) returnArray[0];
    gpCore = (GraphPerspective) returnArray[1];
    nodeInfo.coreLevel = k.intValue();
    // that of less connected regions
    if (gpCore != null) {
        nodeInfo.coreDensity = calcDensity(gpCore, params.isIncludeLoops());
    }
    // record neighbor array for later use in cluster detection step
    nodeInfo.nodeNeighbors = neighborhood;
    return (nodeInfo);
}
