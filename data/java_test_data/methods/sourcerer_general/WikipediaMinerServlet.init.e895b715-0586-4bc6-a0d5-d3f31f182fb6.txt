public void init(ServletConfig config) throws ServletException {
    super.init(config);
    context = config.getServletContext();
    TextProcessor tp = new CaseFolder();
    try {
        wikipedia = new Wikipedia(context.getInitParameter("mysql_server"), context.getInitParameter("mysql_database"), context.getInitParameter("mysql_user"), context.getInitParameter("mysql_password"));
    } catch (Exception e) {
        throw new ServletException("Could not connect to wikipedia database.");
    }
    // Escaper escaper = new Escaper() ;
    definer = new Definer(this);
    comparer = new Comparer(this);
    masscomparer = new MassCompare(this);
    searcher = new Searcher(this);
    astar = new AStar(this);
    /*
		try {
			wikifier = new Wikifier(this, tp) ;
			
		} catch (Exception e) {
			System.err.println("Could not initialize wikifier") ;			
		}
		*/
    try {
        File dataDirectory = new File(context.getInitParameter("data_directory"));
        if (!dataDirectory.exists() || !dataDirectory.isDirectory()) {
            throw new Exception();
        }
        cachingThread = new CacherThread(dataDirectory, tp);
        cachingThread.start();
    } catch (Exception e) {
        throw new ServletException("Could not locate wikipedia data directory.");
    }
    try {
        TransformerFactory tf = TransformerFactory.newInstance();
        File xsltDirectory = new File(context.getInitParameter("xslt_directory"));
        transformersByName = new HashMap<String, Transformer>();
        transformersByName.put("help", buildTransformer("help", xsltDirectory, tf));
        transformersByName.put("loading", buildTransformer("loading", xsltDirectory, tf));
        transformersByName.put("search", buildTransformer("search", xsltDirectory, tf));
        transformersByName.put("compare", buildTransformer("compare", xsltDirectory, tf));
        transformersByName.put("wikify", buildTransformer("wikify", xsltDirectory, tf));
        // transformersByName.put("astar", buildTransformer("astar", xsltDirectory, tf)) ;
        Transformer serializer = TransformerFactory.newInstance().newTransformer();
        serializer.setOutputProperty(OutputKeys.INDENT, "yes");
        serializer.setOutputProperty(OutputKeys.METHOD, "xml");
        serializer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "3");
        transformersByName.put("serializer", serializer);
    } catch (Exception e) {
        throw new ServletException("Could not load xslt library." + e.toString());
    }
}
