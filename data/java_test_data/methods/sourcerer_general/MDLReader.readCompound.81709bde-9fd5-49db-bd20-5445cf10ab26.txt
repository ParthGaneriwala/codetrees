@Override
public Compound readCompound() throws IOException {
    if (reader == null) {
        throw new IOException("No open file");
    } else if (hasRead) {
        throw new IOException("No more compounds");
    }
    hasRead = true;
    /* Find the counts line*/
    String name = "";
    String line = reader.readLine();
    while (true) {
        if (Common.CTabParser.isCountsLine(line))
            break;
        name = line;
        line = reader.readLine();
    }
    Common.CTabParser parser = new Common.CTabParser(line);
    /* Find the first line of the atom table...*/
    int atomOffset = 0;
    while (true) {
        line = reader.readLine();
        if (Common.CTabParser.isAtomLine(line))
            break;
        if (line.equals("@<TRIPOS>ATOM")) {
            atomOffset = 16;
            break;
        }
    }
    for (int i = 0; i < parser.getAtomCount(); i++) {
        parser.addAtom(reader.readLine().substring(atomOffset));
    }
    /* Find the first line of the bond table...*/
    boolean spaceDelimited = false;
    while (true) {
        line = reader.readLine();
        if (Common.CTabParser.isBondLine(line)) {
            break;
        }
        if (line.equals("@<TRIPOS>BOND")) {
            spaceDelimited = true;
            break;
        }
    }
    for (int i = 0; i < parser.getBondCount(); i++) {
        if (spaceDelimited) {
            String[] s = reader.readLine().trim().split("\\s+");
            s[3] = s[3].equals("ar") ? "4" : s[3];
            parser.addBond(String.format("%3s%3s%3s", s[1], s[2], s[3]));
        } else {
            parser.addBond(reader.readLine());
        }
    }
    Compound c = new Compound((int) UUID.randomUUID().getLeastSignificantBits(), 0);
    c.addName(name);
    c.setProperty("structure", Molecule.serialize(parser.buildMolecule()));
    return c;
}
