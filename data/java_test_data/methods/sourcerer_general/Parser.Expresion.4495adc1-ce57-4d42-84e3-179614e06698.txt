// char Expresion() {
// char c1,c2;
// c2 = Expresion2();
// c1 = Expresion1();
// if (c1=='-') {
// return c2;
// }
// if (c1!= c2) SemErr("Tipos incompatibles en expresion");
// return c1;
// }
tupla_id Expresion() {
    String lugar_expresion;
    String etiqueta_verdad, etiqueta_falso, sigue;
    tupla_Tercetos tupla = new tupla_Tercetos("", "", "");
    Simbolo simba;
    if (la.line == 142) {
        int x;
        x = 233;
    }
    tupla_id c = new tupla_id("", '-');
    if ((!condicional) && (((la.next.kind == 28) && (la.next.next.next.kind == 33)) || (la.next.kind == 33))) {
        tupla_id c1;
        condicional = true;
        c1 = Expresion();
        if (c1.getTipo() != 'b')
            SemError("Se esperaba una expresi√≥n booleana");
        // Se ha leido ? Expresion, por lo tanto ha de emitir el salto condicional
        lugar_expresion = tercetos.darTemporal();
        etiqueta_verdad = tercetos.darEtiqueta();
        sigue = tercetos.darEtiqueta();
        // hacemos el if
        terceto_actual = tercetos.saltoCondicional(c1.getId(), etiqueta_verdad);
        tupla = new tupla_Tercetos(clase_actual, metodo_actual, terceto_actual);
        if (metodo_actual.equals("main"))
            colaMain.add(tupla);
        else
            colaTercetos.add(tupla);
        Esperado(33);
        tupla_id c2;
        c2 = Expresion();
        // Se ha leido la segunda expresion
        Esperado(14);
        tupla_id c3;
        c3 = Expresion();
        if (c3.getTipo() == '-') {
            SemError("Expresion incorrecta");
            condicional = false;
        } else {
            terceto_actual = tercetos.asignacion(lugar_expresion, c3.getId());
            tupla = new tupla_Tercetos(clase_actual, metodo_actual, terceto_actual);
            if (metodo_actual.equals("main"))
                colaMain.add(tupla);
            else
                colaTercetos.add(tupla);
            // saltamos a la siguiente sentencia
            terceto_actual = tercetos.saltoIncondicional(sigue);
            tupla = new tupla_Tercetos(clase_actual, metodo_actual, terceto_actual);
            if (metodo_actual.equals("main"))
                colaMain.add(tupla);
            else
                colaTercetos.add(tupla);
            // creamos la etiqueta
            terceto_actual = tercetos.InsertarEtiqueta(etiqueta_verdad);
            tupla = new tupla_Tercetos(clase_actual, metodo_actual, terceto_actual);
            // metemos el terceto en la cola correspondiente
            if (metodo_actual.equals("main"))
                colaMain.add(tupla);
            else
                colaTercetos.add(tupla);
            terceto_actual = tercetos.asignacion(lugar_expresion, c2.getId());
            tupla = new tupla_Tercetos(clase_actual, metodo_actual, terceto_actual);
            // metemos el terceto en la cola correspondiente
            if (metodo_actual.equals("main"))
                colaMain.add(tupla);
            else
                colaTercetos.add(tupla);
            // creamos la etiqueta "sigue"
            terceto_actual = tercetos.InsertarEtiqueta(sigue);
            tupla = new tupla_Tercetos(clase_actual, metodo_actual, terceto_actual);
            // metemos el terceto en la cola correspondiente
            if (metodo_actual.equals("main"))
                colaMain.add(tupla);
            else
                colaTercetos.add(tupla);
            c.setId(lugar_expresion);
            c.setTipo(c3.getTipo());
            // guardamos el temporal creado en la tabla de simbolos
            simba = new Simbolo(lugar_expresion, c3.getTipo());
            simba.setTamano(1);
            tablasimbolos.InsertarSimbolo(simba, lugar_expresion);
        }
        return c;
    } else if (StartOf(2)) {
        next = la.next;
        c = Expresion1();
        if (c.getTipo() == '-')
            SemError("Expresion incorrecta");
        return c;
    } else if (la.kind == 19) {
        Get();
        c = Expresion();
        Esperado(25);
        // Esperado(31);
        return c;
    } else // else SynErr(44);
    {
        next = la.next;
        c = Expresion1();
        return c;
    }
// return new tupla_id("",'-');
}
