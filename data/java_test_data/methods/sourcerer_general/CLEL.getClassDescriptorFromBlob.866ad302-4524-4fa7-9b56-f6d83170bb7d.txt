private ClassDescriptor getClassDescriptorFromBlob(ArrayList<Byte> blob) {
    byte b = blob.remove(0);
    int decompress;
    int row;
    String name = "\0";
    String namespace = "\0";
    switch(b) {
        // ADD REST OF CASES
        case BlobElementTypes.ELEMENT_TYPE_VOID:
            name = "void\0";
            break;
        case BlobElementTypes.ELEMENT_TYPE_I4:
            name = "int\0";
            break;
        case BlobElementTypes.ELEMENT_TYPE_STRING:
            name = "string\0";
            break;
        case BlobElementTypes.ELEMENT_TYPE_VALUETYPE:
        case BlobElementTypes.ELEMENT_TYPE_CLASS:
            decompress = Blob.decompressBlobInt(blob);
            row = decompress >> 2;
            PoundTildaStream pts = parser.getPoundTildaStream();
            StreamTable st;
            StreamTableRow r;
            if (row > 0) {
                if (// TypeDef
                (decompress & 0x3) == 0) {
                    st = pts.getStreamTable(CLELConstants.TYPEDEF_TABLE);
                    r = st.getRows().get(row - 1);
                    name = getValueStringHeap(r.getTypeDefName());
                    namespace = getValueStringHeap(r.getTypeDefNamespace());
                } else if (// TypeRef
                (decompress & 0x3) == 1) {
                    st = pts.getStreamTable(CLELConstants.TYPEREF_TABLE);
                    r = st.getRows().get(row - 1);
                    name = getValueStringHeap(r.getTypeRefName());
                    namespace = getValueStringHeap(r.getTypeRefNamespace());
                } else if (// TypeSpec
                (decompress & 0x3) == 2) {
                    st = pts.getStreamTable(CLELConstants.TYPESPEC_TABLE);
                    r = st.getRows().get(row - 1);
                // ?????????
                }
            }
            break;
    }
    return new ClassDescriptor(name.substring(0, name.length() - 1), namespace.substring(0, namespace.length() - 1));
}
