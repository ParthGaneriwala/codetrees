@Override
protected Result evaluate(final LogicContext context, final Integer patientId, final Map<String, Object> parameters) {
    Result result = new Result();
    List<String> encounterTypeNames = Arrays.asList(EvaluableNameConstants.ENCOUNTER_TYPE_ADULT_INITIAL, EvaluableNameConstants.ENCOUNTER_TYPE_ADULT_RETURN, EvaluableNameConstants.ENCOUNTER_TYPE_PEDIATRIC_INITIAL, EvaluableNameConstants.ENCOUNTER_TYPE_PEDIATRIC_RETURN, EvaluableNameConstants.ENCOUNTER_TYPE_MOSORIOT_PERINATAL_INITIAL, EvaluableNameConstants.ENCOUNTER_TYPE_MOSORIOT_PRIMARY_CARE);
    EncounterType adultInitialEncounterType = CacheUtils.getEncounterType(EvaluableNameConstants.ENCOUNTER_TYPE_ADULT_INITIAL);
    EncounterType adultReturnEncounterType = CacheUtils.getEncounterType(EvaluableNameConstants.ENCOUNTER_TYPE_ADULT_RETURN);
    EncounterType pediatricInitialEncounterType = CacheUtils.getEncounterType(EvaluableNameConstants.ENCOUNTER_TYPE_PEDIATRIC_INITIAL);
    EncounterType pediatricReturnEncounterType = CacheUtils.getEncounterType(EvaluableNameConstants.ENCOUNTER_TYPE_PEDIATRIC_RETURN);
    EncounterType mosoriotPerinatalEncounterType = CacheUtils.getEncounterType(EvaluableNameConstants.ENCOUNTER_TYPE_MOSORIOT_PERINATAL_INITIAL);
    EncounterType mosoriotPrimaryCareEncounterType = CacheUtils.getEncounterType(EvaluableNameConstants.ENCOUNTER_TYPE_MOSORIOT_PRIMARY_CARE);
    parameters.put(EvaluableConstants.ENCOUNTER_TYPE, encounterTypeNames);
    parameters.put(EvaluableConstants.ENCOUNTER_FETCH_ORDER, FetchOrdering.ORDER_ASCENDING.getValue());
    parameters.put(EvaluableConstants.ENCOUNTER_FETCH_SIZE, 5);
    EncounterWithRestrictionRule encounterWithRestrictionRule = new EncounterWithStringRestrictionRule();
    Result encounterResults = encounterWithRestrictionRule.eval(context, patientId, parameters);
    if (CollectionUtils.isNotEmpty(encounterResults)) {
        for (Result encounterResult : encounterResults) {
            Result perEncounterResult = new Result();
            perEncounterResult.add(encounterResult);
            Encounter encounter = (Encounter) encounterResult.getResultObject();
            EncounterType encounterType = encounter.getEncounterType();
            if (OpenmrsUtil.nullSafeEquals(encounterType, adultInitialEncounterType) || OpenmrsUtil.nullSafeEquals(encounterType, adultReturnEncounterType) || OpenmrsUtil.nullSafeEquals(encounterType, pediatricInitialEncounterType) || OpenmrsUtil.nullSafeEquals(encounterType, pediatricReturnEncounterType)) {
                parameters.put(EvaluableConstants.OBS_ENCOUNTER, Arrays.asList(encounter));
                Result problemResults = new Result();
                EncounterBasedProblemAddedRule problemAddedRule = new EncounterBasedProblemAddedRule();
                Result problemAddedResults = problemAddedRule.eval(context, patientId, parameters);
                if (CollectionUtils.isNotEmpty(problemAddedResults))
                    problemResults.addAll(problemAddedResults);
                perEncounterResult.add(problemResults);
                Result medicationResults = new Result();
                AntiRetroViralRule antiRetroViralRule = new AntiRetroViralRule();
                Result antiRetroViralResults = antiRetroViralRule.eval(context, patientId, parameters);
                if (CollectionUtils.isNotEmpty(antiRetroViralResults))
                    medicationResults.addAll(antiRetroViralResults);
                CryptococcalRule cryptococcalRule = new CryptococcalRule();
                Result cryptococcalResults = cryptococcalRule.eval(context, patientId, parameters);
                if (CollectionUtils.isNotEmpty(cryptococcalResults))
                    medicationResults.addAll(cryptococcalResults);
                PneumocystisCariniiRule pneumocystisCariniiRule = new PneumocystisCariniiRule();
                Result pneumocystisCariniiResults = pneumocystisCariniiRule.eval(context, patientId, parameters);
                if (CollectionUtils.isNotEmpty(pneumocystisCariniiResults))
                    medicationResults.addAll(pneumocystisCariniiResults);
                TuberculosisRule tuberculosisRule = new TuberculosisRule();
                Result tuberculosisResults = tuberculosisRule.eval(context, patientId, parameters);
                if (CollectionUtils.isNotEmpty(tuberculosisResults))
                    medicationResults.addAll(tuberculosisResults);
                TuberculosisTreatmentRule tuberculosisTreatmentRule = new TuberculosisTreatmentRule();
                Result tuberculosisTreatmentResults = tuberculosisTreatmentRule.eval(context, patientId, parameters);
                if (CollectionUtils.isNotEmpty(tuberculosisTreatmentResults))
                    medicationResults.addAll(tuberculosisTreatmentResults);
                perEncounterResult.add(medicationResults);
            }
            if (OpenmrsUtil.nullSafeEquals(encounterType, mosoriotPerinatalEncounterType)) {
                parameters.put(EvaluableConstants.OBS_ENCOUNTER, Arrays.asList(encounter));
                Result problemResults = new Result();
                EncounterBasedProblemAddedRule problemAddedRule = new EncounterBasedProblemAddedRule();
                Result problemAddedResults = problemAddedRule.eval(context, patientId, parameters);
                if (CollectionUtils.isNotEmpty(problemAddedResults))
                    problemResults.addAll(problemAddedResults);
                EncounterBasedProblemReportedRule problemReportedRule = new EncounterBasedProblemReportedRule();
                Result problemReportedResults = problemReportedRule.eval(context, patientId, parameters);
                if (CollectionUtils.isNotEmpty(problemReportedResults))
                    problemResults.addAll(problemReportedResults);
                EncounterBasedPositiveHivRule positiveHivRule = new EncounterBasedPositiveHivRule();
                Result positiveHivResults = positiveHivRule.eval(context, patientId, parameters);
                if (CollectionUtils.isNotEmpty(positiveHivResults))
                    problemResults.addAll(positiveHivResults);
                perEncounterResult.add(problemResults);
                Result medicationResults = new Result();
                EncounterBasedObsCollectionRule obsCollectionRule = new EncounterBasedObsCollectionRule();
                parameters.put(EvaluableConstants.OBS_CONCEPT, Arrays.asList(EvaluableNameConstants.MEDICATION_ADDED));
                Result medicationAddedResults = obsCollectionRule.eval(context, patientId, parameters);
                if (CollectionUtils.isNotEmpty(medicationAddedResults))
                    medicationResults.addAll(medicationAddedResults);
                parameters.put(EvaluableConstants.OBS_CONCEPT, Arrays.asList(EvaluableNameConstants.RECIEVED_ANTENATAL_CARE_SERVICE_THIS_VISIT));
                Result careVisitResults = obsCollectionRule.eval(context, patientId, parameters);
                if (CollectionUtils.isNotEmpty(careVisitResults))
                    medicationResults.addAll(careVisitResults);
                parameters.remove(EvaluableConstants.OBS_CONCEPT);
                EncounterBasedTetanusBoosterRule tetanusBoosterRule = new EncounterBasedTetanusBoosterRule();
                Result tetanusBoosterResults = tetanusBoosterRule.eval(context, patientId, parameters);
                if (CollectionUtils.isNotEmpty(tetanusBoosterResults))
                    medicationResults.addAll(tetanusBoosterResults);
                perEncounterResult.add(medicationResults);
            }
            if (OpenmrsUtil.nullSafeEquals(encounterType, mosoriotPrimaryCareEncounterType)) {
                parameters.put(EvaluableConstants.OBS_ENCOUNTER, Arrays.asList(encounter));
                Result problemResults = new Result();
                EncounterBasedProblemAddedRule problemAddedRule = new EncounterBasedProblemAddedRule();
                Result problemAddedResults = problemAddedRule.eval(context, patientId, parameters);
                if (CollectionUtils.isNotEmpty(problemAddedResults))
                    problemResults.addAll(problemAddedResults);
                EncounterBasedProblemReportedRule problemReportedRule = new EncounterBasedProblemReportedRule();
                Result problemReportedResults = problemReportedRule.eval(context, patientId, parameters);
                if (CollectionUtils.isNotEmpty(problemReportedResults))
                    problemResults.addAll(problemReportedResults);
                EncounterBasedPositiveHivRule positiveHivRule = new EncounterBasedPositiveHivRule();
                Result positiveHivResults = positiveHivRule.eval(context, patientId, parameters);
                if (CollectionUtils.isNotEmpty(positiveHivResults))
                    problemResults.addAll(positiveHivResults);
                perEncounterResult.add(problemResults);
                Result medicationResults = new Result();
                EncounterBasedObsCollectionRule obsCollectionRule = new EncounterBasedObsCollectionRule();
                parameters.put(EvaluableConstants.OBS_CONCEPT, Arrays.asList(EvaluableNameConstants.MEDICATION_ADDED));
                Result medicationAddedResults = obsCollectionRule.eval(context, patientId, parameters);
                if (CollectionUtils.isNotEmpty(medicationAddedResults))
                    medicationResults.addAll(medicationAddedResults);
                parameters.put(EvaluableConstants.OBS_CONCEPT, Arrays.asList(EvaluableNameConstants.RECIEVED_ANTENATAL_CARE_SERVICE_THIS_VISIT));
                Result careVisitResults = obsCollectionRule.eval(context, patientId, parameters);
                if (CollectionUtils.isNotEmpty(careVisitResults))
                    medicationResults.addAll(careVisitResults);
                parameters.remove(EvaluableConstants.OBS_CONCEPT);
                EncounterBasedImmunizationRule immunizationRule = new EncounterBasedImmunizationRule();
                Result immunizationResults = immunizationRule.eval(context, patientId, parameters);
                if (CollectionUtils.isNotEmpty(immunizationResults))
                    medicationResults.addAll(immunizationResults);
                EncounterBasedTetanusBoosterRule tetanusBoosterRule = new EncounterBasedTetanusBoosterRule();
                Result tetanusBoosterResults = tetanusBoosterRule.eval(context, patientId, parameters);
                if (CollectionUtils.isNotEmpty(tetanusBoosterResults))
                    medicationResults.addAll(tetanusBoosterResults);
                EncounterBasedFamilyPlanningRule familyPlanningRule = new EncounterBasedFamilyPlanningRule();
                Result familyPlanningResults = familyPlanningRule.eval(context, patientId, parameters);
                if (CollectionUtils.isNotEmpty(familyPlanningResults))
                    medicationResults.addAll(familyPlanningResults);
                perEncounterResult.add(medicationResults);
            }
            result.add(perEncounterResult);
        }
    }
    return result;
}
