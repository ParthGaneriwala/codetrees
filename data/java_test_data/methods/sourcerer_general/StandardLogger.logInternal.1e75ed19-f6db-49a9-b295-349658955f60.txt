private void logInternal(int level, Object msg, Throwable exception) {
    StringBuffer msgBuf = new StringBuffer();
    msgBuf.append(new Date().toString());
    msgBuf.append(" ");
    switch(level) {
        case FATAL:
            msgBuf.append("FATAL: ");
            break;
        case ERROR:
            msgBuf.append("ERROR: ");
            break;
        case WARN:
            msgBuf.append("WARN: ");
            break;
        case INFO:
            msgBuf.append("INFO: ");
            break;
        case DEBUG:
            msgBuf.append("DEBUG: ");
            break;
        case TRACE:
            msgBuf.append("TRACE: ");
            break;
    }
    if (msg instanceof ProfilerEvent) {
        msgBuf.append(LogUtils.expandProfilerEventIfNecessary(msg));
    } else {
        if (this.logLocationInfo && level != TRACE) {
            Throwable locationException = new Throwable();
            msgBuf.append(LogUtils.findCallingClassAndMethod(locationException));
            msgBuf.append(" ");
        }
        if (msg != null) {
            msgBuf.append(String.valueOf(msg));
        }
    }
    if (exception != null) {
        msgBuf.append("\n");
        msgBuf.append("\n");
        msgBuf.append("EXCEPTION STACK TRACE:");
        msgBuf.append("\n");
        msgBuf.append("\n");
        msgBuf.append(Util.stackTraceToString(exception));
    }
    String messageAsString = msgBuf.toString();
    System.err.println(messageAsString);
    if (bufferedLog != null) {
        bufferedLog.append(messageAsString);
    }
}
