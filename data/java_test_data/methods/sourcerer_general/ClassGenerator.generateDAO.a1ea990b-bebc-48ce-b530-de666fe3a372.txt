public void generateDAO(Class modelClass) {
    String cn = modelClass.getSimpleName();
    StringBuffer sb = new StringBuffer();
    sb.append("/**").append("\n");
    sb.append("* Author: Bob Chen").append("\n");
    sb.append("*/").append("\n");
    sb.append("\n");
    sb.append("package " + daopkg + ";").append("\n");
    sb.append("\n");
    sb.append("import java.util.List;").append("\n");
    sb.append("\n");
    sb.append("import " + modelClass.getName() + ";").append("\n");
    sb.append("\n");
    sb.append("public interface " + cn + "DAO extends DAO {").append("\n");
    sb.append("    public List<" + cn + "> get" + cn + "List();").append("\n");
    sb.append("\n");
    sb.append("    public " + cn + " get" + cn + "(int id);").append("\n");
    sb.append("\n");
    sb.append("    public void save" + cn + "(" + cn + " obj);").append("\n");
    sb.append("\n");
    sb.append("    public void remove" + cn + "(int id);").append("\n");
    sb.append("}").append("\n");
    File path = new File(targetPath, daopkg.replace(".", File.separator));
    if (!path.exists()) {
        path.mkdirs();
    }
    try {
        FileOutputStream fos = new FileOutputStream(new File(path, cn + "DAO.java"));
        fos.write(sb.toString().getBytes());
        fos.close();
    } catch (FileNotFoundException e) {
        e.printStackTrace();
    } catch (IOException e) {
        e.printStackTrace();
    }
}
