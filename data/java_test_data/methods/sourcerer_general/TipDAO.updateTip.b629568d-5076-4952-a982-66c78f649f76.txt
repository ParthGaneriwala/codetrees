public boolean updateTip(PostDTO postDTO, TipDTO tipDTO) {
    Connection con = null;
    PreparedStatement pstm = null;
    try {
        con = DatabaseUtil.getConnection();
        con.setAutoCommit(false);
        pstm = con.prepareStatement(SQL_POST_UPDATE);
        pstm.setString(1, postDTO.getUserProfile().getUsername());
        pstm.setString(2, postDTO.getPostTitle());
        pstm.setString(3, postDTO.getUploadDate());
        pstm.setBoolean(4, postDTO.isFree());
        pstm.setString(5, postDTO.getPostType());
        pstm.setString(6, postDTO.getPostID());
        // Execute command
        if (pstm.executeUpdate() > 0) {
            pstm = con.prepareStatement(SQL_UPDATE);
            pstm.setString(1, tipDTO.getPost().getPostID());
            pstm.setString(2, tipDTO.getContent());
            pstm.setString(3, tipDTO.getTipID());
            // Execute command
            if (pstm.executeUpdate() > 0) {
                // success commit all in database
                con.commit();
                con.setAutoCommit(true);
                return true;
            } else {
                // fail roll back transaction
                con.rollback();
                return false;
            }
        } else {
            // fail roll back transaction
            con.rollback();
            return false;
        }
    } catch (SQLException ex) {
        logger.log(Level.SEVERE, null, ex);
        try {
            // fail roll back transaction
            con.rollback();
            return false;
        } catch (SQLException ex1) {
            Logger.getLogger(TipDAO.class.getName()).log(Level.SEVERE, null, ex1);
            return false;
        }
    } finally {
        try {
            // close Connection
            DatabaseUtil.closeConnection(con);
            pstm.close();
        } catch (SQLException ex) {
            Logger.getLogger(TipDAO.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
