public static int findMatchingBracket(Document doc, int offset) throws BadLocationException {
    if (doc.getLength() == 0) {
        return -1;
    }
    char c = doc.getText(offset, 1).charAt(0);
    // c` - corresponding character
    char cprime;
    // true = back, false = forward
    boolean direction;
    switch(c) {
        case '(':
            cprime = ')';
            direction = false;
            break;
        case ')':
            cprime = '(';
            direction = true;
            break;
        case '[':
            cprime = ']';
            direction = false;
            break;
        case ']':
            cprime = '[';
            direction = true;
            break;
        case '{':
            cprime = '}';
            direction = false;
            break;
        case '}':
            cprime = '{';
            direction = true;
            break;
        default:
            return -1;
    }
    int count = 1;
    int step;
    int texttOffset;
    int len;
    int i;
    if (direction) {
        // search backwards
        step = -1;
        texttOffset = 0;
        len = offset;
        i = len - 1;
    } else {
        // search forwards
        step = 1;
        texttOffset = offset + 1;
        len = doc.getLength() - texttOffset;
        i = 0;
    }
    String textt = doc.getText(texttOffset, len);
    while (len > 0) {
        char x = textt.charAt(i);
        if (x == c) {
            count++;
        } else // --count == 0
        if (x == cprime) {
            if (--count == 0) {
                return i + texttOffset;
            }
        }
        len--;
        i += step;
        if (x == '\"' || x == '\'') {
            char quoteChar = x;
            // further brackets...
            while (len > 0) {
                x = textt.charAt(i);
                if (x == quoteChar) {
                    // Found the matching quote, as long as it is not \-quoted.
                    if (i == 0 || textt.charAt(i - 1) != '\\') {
                        len--;
                        i += step;
                        break;
                    }
                }
                len--;
                i += step;
            }
        }
    }
    // Nothing found
    return -1;
}
