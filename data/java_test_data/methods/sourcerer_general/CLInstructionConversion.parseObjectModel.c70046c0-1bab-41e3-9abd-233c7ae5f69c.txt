private static CLInstruction parseObjectModel(ArrayList<Byte> code, int offset) {
    byte fun = code.get(offset + 1);
    CLInstruction in = null;
    switch(fun) {
        case CLOptcode.ARGLIST:
            in = new Arglist();
            break;
        case CLOptcode.CEQ:
            in = new Ceq();
            break;
        case CLOptcode.CGT:
            in = new Cgt();
            break;
        case CLOptcode.CGTUN:
            in = new Cgtun();
            break;
        case CLOptcode.CLT:
            in = new Clt();
            break;
        case CLOptcode.CLTUN:
            in = new Cltun();
            break;
        case CLOptcode.LDFTN:
            in = new Ldftn(new Token(getInt(offset + 2, code)));
            break;
        case CLOptcode.LDVIRTFTN:
            in = new Ldvirtftn(new Token(getInt(offset + 2, code)));
            break;
        case CLOptcode.LDARG:
            in = new Ldarg(getShort(offset + 2, code));
            break;
        case CLOptcode.LDARGA:
            in = new Ldarga(getShort(offset + 2, code));
            break;
        case CLOptcode.STARG:
            in = new Starg(getShort(offset + 2, code));
            break;
        case CLOptcode.LDLOC:
            in = new Ldloc(getShort(offset + 2, code));
            break;
        case CLOptcode.LDLOCA:
            in = new Ldloca(getShort(offset + 2, code));
            break;
        case CLOptcode.STLOC:
            in = new Stloc(getShort(offset + 2, code));
            break;
        case CLOptcode.LOCALLOC:
            in = new Localloc();
            break;
        case CLOptcode.ENDFILTER:
            in = new Endfilter();
            break;
        case CLOptcode.UNALIGNED:
            in = new Unaligned(code.get(offset + 2));
            break;
        case CLOptcode.VOLATILE:
            in = new Volatile();
            break;
        case CLOptcode.TAIL:
            in = new Tail();
            break;
        case CLOptcode.INITOBJ:
            in = new Initobj(new Token(getInt(offset + 2, code)));
            break;
        case CLOptcode.CONSTRAINED:
            in = new Constrained(new Token(getInt(offset + 2, code)));
            break;
        case CLOptcode.CPBLK:
            in = new Cpblk();
            break;
        case CLOptcode.INITBLK:
            in = new Initblk();
            break;
        case CLOptcode.RETHROW:
            in = new Rethrow();
            break;
        case CLOptcode.SIZEOF:
            in = new Sizeof(new Token(getInt(offset + 2, code)));
            break;
        case CLOptcode.REFANYTYPE:
            in = new Refanytype();
            break;
    }
    return in;
}
