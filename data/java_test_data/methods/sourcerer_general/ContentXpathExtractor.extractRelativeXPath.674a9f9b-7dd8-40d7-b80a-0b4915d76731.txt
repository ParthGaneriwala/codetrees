public String extractRelativeXPath(Document doc, final String text) {
    // holder[0]=row,holder[1]=textNode
    final Node[] holder = new Node[2];
    final boolean[] brk = { false };
    HtmlDomUtil.walk(doc, new NodeHandler() {

        public void handleNode(Node node) {
            if (brk[0]) {
                return;
            }
            if (Node.TEXT_NODE == node.getNodeType()) {
                String c = node.getTextContent().trim();
                if (StringUtils.isBlank(c)) {
                    return;
                }
                // FIXME "&nbsp;上海"问题
                if (c.contains(text)) {
                    // holder[0] = row;
                    holder[1] = node;
                    brk[0] = true;
                    return;
                }
            }
        }

        public void post() {
        }
    });
    if (holder[1] == null) {
        throw new RuntimeException("没找到相关row.");
    }
    // Node row = holder[0];
    Node textField = holder[1];
    Node parent = textField.getParentNode();
    List<Node> nodes = new ArrayList<Node>();
    while (true) {
        if (parent == null || parent.equals(doc)) {
            break;
        }
        nodes.add(parent);
        parent = parent.getParentNode();
    }
    // build xpath
    nodes = inverse(nodes);
    StringBuilder sb = new StringBuilder();
    int i = 0;
    for (Node n : nodes) {
        String nodeName = n.getNodeName();
        sb.append(nodeName);
        sb.append("[");
        sb.append("position()=");
        int position = getPosition(n);
        sb.append(position);
        sb.append("]");
        i++;
        if (i < (nodes.size() - 1)) {
            sb.append("/");
        }
    }
    return sb.toString();
}
