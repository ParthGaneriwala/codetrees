int getNodeIndent(Shape a, MoeSyntaxDocument doc, NodeAndPosition nap) {
    try {
        int indent = Integer.MAX_VALUE;
        int curpos = nap.getPosition();
        int napEnd = curpos + nap.getSize();
        Element map = doc.getDefaultRootElement();
        Stack<NodeAndPosition> scopeStack = new Stack<NodeAndPosition>();
        getScopeStackAt(nap.getNode(), nap.getPosition(), 0, scopeStack);
        while (curpos < napEnd) {
            // First skip over inner nodes
            ListIterator<NodeAndPosition> i = scopeStack.listIterator();
            i.next();
            while (i.hasNext()) {
                NodeAndPosition inner = i.next();
                if (inner.getNode().isInner()) {
                    int skip = inner.getPosition() + inner.getSize();
                    i.remove();
                    while (i.hasNext()) {
                        i.next();
                        i.remove();
                    }
                    curpos = skip;
                    NodeAndPosition parent = i.previous();
                    int pindex = i.nextIndex();
                    getScopeStackAt(parent.getNode(), parent.getPosition(), curpos, scopeStack);
                    // Urgh. Java invalidates all iterators when the list is modified. Must recreate.
                    i = scopeStack.listIterator(pindex);
                }
            }
            // Ok, we've skipped inner nodes
            int line = map.getElementIndex(curpos);
            Element lineEl = map.getElement(line);
            Segment segment = new Segment();
            doc.getText(curpos, lineEl.getEndOffset() - curpos, segment);
            int nws = findNonWhitespace(segment, 0);
            if (nws == 0) {
                // Ok, at this position we have non-white space and are not in an inner
                Rectangle cbounds = modelToView(curpos, a, Position.Bias.Forward).getBounds();
                indent = Math.min(indent, cbounds.x);
                curpos = lineEl.getEndOffset();
            } else if (nws == -1) {
                curpos = lineEl.getEndOffset();
            } else {
                curpos += nws;
            }
        }
        return indent == Integer.MAX_VALUE ? -1 : indent;
    } catch (BadLocationException ble) {
        return -1;
    }
}
