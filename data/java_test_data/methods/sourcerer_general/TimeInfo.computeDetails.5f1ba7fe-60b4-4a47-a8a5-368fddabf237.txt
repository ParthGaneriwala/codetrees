public void computeDetails() {
    if (_detailsComputed) {
        // details already computed - do nothing
        return;
    }
    _detailsComputed = true;
    if (_comments == null) {
        _comments = new ArrayList<String>();
    }
    TimeStamp origNtpTime = _message.getOriginateTimeStamp();
    long origTime = origNtpTime.getTime();
    // Receive Time is time request received by server (t2)
    TimeStamp rcvNtpTime = _message.getReceiveTimeStamp();
    long rcvTime = rcvNtpTime.getTime();
    // Transmit time is time reply sent by server (t3)
    TimeStamp xmitNtpTime = _message.getTransmitTimeStamp();
    long xmitTime = xmitNtpTime.getTime();
    /*
         * Round-trip network delay and local clock offset (or time drift) is calculated
         * according to this standard NTP equation:
         *
         * LocalClockOffset = ((ReceiveTimestamp - OriginateTimestamp) +
         *                     (TransmitTimestamp - DestinationTimestamp)) / 2
         *
         * equations from RFC-1305 (NTPv3)
         *      roundtrip delay = (t4 - t1) - (t3 - t2)
         *      local clock offset = ((t2 - t1) + (t3 - t4)) / 2
         *
         * It takes into account network delays and assumes that they are symmetrical.
         *
         * Note the typo in SNTP RFCs 1769/2030 which state that the delay
         * is (T4 - T1) - (T2 - T3) with the "T2" and "T3" switched.
         */
    if (origNtpTime.ntpValue() == 0) {
        // might be via a broadcast NTP packet...
        if (xmitNtpTime.ntpValue() != 0) {
            _offset = Long.valueOf(xmitTime - _returnTime);
            _comments.add("Error: zero orig time -- cannot compute delay");
        } else
            _comments.add("Error: zero orig time -- cannot compute delay/offset");
    } else if (rcvNtpTime.ntpValue() == 0 || xmitNtpTime.ntpValue() == 0) {
        _comments.add("Warning: zero rcvNtpTime or xmitNtpTime");
        // assert destTime >= origTime since network delay cannot be negative
        if (origTime > _returnTime)
            _comments.add("Error: OrigTime > DestRcvTime");
        else {
            // without receive or xmit time cannot figure out processing time
            // so delay is simply the network travel time
            _delay = Long.valueOf(_returnTime - origTime);
        }
        // If server is in broadcast mode then we never send out a query in first place...
        if (rcvNtpTime.ntpValue() != 0) {
            // xmitTime is 0 just use rcv time
            _offset = Long.valueOf(rcvTime - origTime);
        } else if (xmitNtpTime.ntpValue() != 0) {
            // rcvTime is 0 just use xmitTime time
            _offset = Long.valueOf(xmitTime - _returnTime);
        }
    } else {
        long delayValue = _returnTime - origTime;
        // assert xmitTime >= rcvTime: difference typically < 1ms
        if (xmitTime < rcvTime) {
            // server cannot send out a packet before receiving it...
            // time-travel not allowed
            _comments.add("Error: xmitTime < rcvTime");
        } else {
            // subtract processing time from round-trip network delay
            long delta = xmitTime - rcvTime;
            // the total roundtrip network travel time.
            if (delta <= delayValue) {
                // delay = (t4 - t1) - (t3 - t2)
                delayValue -= delta;
            } else {
                // e.g. delay=3ms, processing=4ms
                if (delta - delayValue == 1) {
                    // delayValue == 0 -> local clock saw no tick change but destination clock did
                    if (delayValue != 0) {
                        _comments.add("Info: processing time > total network time by 1 ms -> assume zero delay");
                        delayValue = 0;
                    }
                } else
                    _comments.add("Warning: processing time > total network time");
            }
        }
        _delay = Long.valueOf(delayValue);
        if (// assert destTime >= origTime
        origTime > _returnTime)
            _comments.add("Error: OrigTime > DestRcvTime");
        _offset = Long.valueOf(((rcvTime - origTime) + (xmitTime - _returnTime)) / 2);
    }
}
