public String apply(String rule, String string) {
    int brackets = 0, close = 0;
    for (int i = 0; i < rule.length(); i++) if (rule.charAt(i) == '<')
        brackets++;
    for (int i = 0; i < rule.length(); i++) if (rule.charAt(i) == '>')
        close++;
    if (brackets != close)
        throw new RuntimeException("open { must match with close >");
    StringBuffer mapping = new StringBuffer();
    String[] subrules = new String[brackets];
    mapping.append("uri:").append(string).append(",");
    if (string.startsWith("GET"))
        mapping.append("httpMethod:GET,");
    if (string.startsWith("PUT"))
        mapping.append("httpMethod:PUT,");
    if (string.startsWith("POST"))
        mapping.append("httpMethod:POST,");
    if (string.startsWith("DELETE"))
        mapping.append("httpMethod:DELETE,");
    if (!rule.matches(".*/<action>.*")) {
        Matcher matcher = Pattern.compile("^.* /([^/]*).*").matcher(string);
        if (matcher.matches()) {
            String action = matcher.group(1).replaceAll("!.*$", "");
            mapping.append("action:").append(action).append(",");
        }
    }
    if (!rule.matches("!.*$")) {
        Matcher matcher = Pattern.compile(".*!(.*)$").matcher(string);
        if (matcher.matches()) {
            String method = matcher.group(1).replaceAll("!.*$", "");
            mapping.append("method:").append(method).append(",");
        }
        rule = rule.replaceAll("!.*$", "");
    }
    for (int i = 0; i < brackets; i++) {
        String subrule = rule;
        for (int j = 0; j < i + 1; j++) subrule = subrule.substring(subrule.indexOf('<') + 1);
        if (subrule.indexOf(">") > 0)
            subrule = subrule.substring(0, subrule.indexOf(">"));
        subrules[i] = subrule;
    }
    String regex = "^" + rule + ".*$";
    for (int i = 0; i < subrules.length; i++) {
        regex = regex.replaceAll("<" + subrules[i] + ">", "([^/]*)");
    }
    Matcher matcher = Pattern.compile(regex).matcher(string);
    for (int i = 0; i < subrules.length; i++) {
        if (!matcher.matches())
            return "";
        mapping.append(subrules[i]).append(":").append(matcher.group(i + 1)).append(",");
    }
    return mapping.toString().replaceAll(",$", "");
}
