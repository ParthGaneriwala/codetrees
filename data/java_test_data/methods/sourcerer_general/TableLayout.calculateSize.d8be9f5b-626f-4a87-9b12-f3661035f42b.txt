// ******************************************************************************
// ** Calculation methods                                                     ***
// ******************************************************************************
/**
 * Calculates the sizes of the rows and columns based on the absolute and
 * relative sizes specified in <code>crSpec[R]</code> and <code>crSpec[C]</code>
 * and the size of the container.  The result is stored in <code>crSize[R]</code>
 * and <code>crSize[C]</code>.
 *
 * @param container    container using this TableLayout
 */
protected void calculateSize(Container container) {
    // Get the container's insets
    Insets inset = container.getInsets();
    // Get the size of the container's available space
    Dimension d = container.getSize();
    int availableWidth = d.width - inset.left - inset.right;
    int availableHeight = d.height - inset.top - inset.bottom;
    // Compensate for horiztonal and vertical gaps
    if (crSpec[C].length > 0)
        availableWidth -= hGap * (crSpec[C].length - 1);
    if (crSpec[R].length > 0)
        availableHeight -= vGap * (crSpec[R].length - 1);
    // Create array to hold actual sizes in pixels
    crSize[C] = new int[crSpec[C].length];
    crSize[R] = new int[crSpec[R].length];
    // Assign absolute sizes (must be done before assignPrefMinSize)
    availableWidth = assignAbsoluteSize(C, availableWidth);
    availableHeight = assignAbsoluteSize(R, availableHeight);
    // Assign preferred and minimum sizes (must be done after assignAbsoluteSize)
    availableWidth = assignPrefMinSize(C, availableWidth, MINIMUM);
    availableWidth = assignPrefMinSize(C, availableWidth, PREFERRED);
    availableHeight = assignPrefMinSize(R, availableHeight, MINIMUM);
    availableHeight = assignPrefMinSize(R, availableHeight, PREFERRED);
    // Assign relative sizes
    availableWidth = assignRelativeSize(C, availableWidth);
    availableHeight = assignRelativeSize(R, availableHeight);
    // Assign fill sizes
    assignFillSize(C, availableWidth);
    assignFillSize(R, availableHeight);
    // Calculate cr offsets for effeciency
    calculateOffset(C, inset);
    calculateOffset(R, inset);
    // Indicate that the size of the cells are known for the container's
    // current size
    dirty = false;
    oldWidth = d.width;
    oldHeight = d.height;
}
