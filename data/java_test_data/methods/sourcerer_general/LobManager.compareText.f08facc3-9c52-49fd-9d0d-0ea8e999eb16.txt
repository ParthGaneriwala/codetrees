synchronized int compareText(long aID, long bID) {
    Object[] data = getLobHeader(aID);
    long aLength = ((Long) data[LOB_IDS.LOB_LENGTH]).longValue();
    data = getLobHeader(bID);
    long bLength = ((Long) data[LOB_IDS.LOB_LENGTH]).longValue();
    int[][] aAddresses = getBlockAddresses(aID, 0, Integer.MAX_VALUE);
    int[][] bAddresses = getBlockAddresses(bID, 0, Integer.MAX_VALUE);
    int aIndex = 0;
    int bIndex = 0;
    int aOffset = 0;
    int bOffset = 0;
    while (true) {
        int aBlockOffset = aAddresses[aIndex][LOBS.BLOCK_ADDR] + aOffset;
        int bBlockOffset = bAddresses[bIndex][LOBS.BLOCK_ADDR] + bOffset;
        byte[] aBytes = getLobStore().getBlockBytes(aBlockOffset, 1);
        byte[] bBytes = getLobStore().getBlockBytes(bBlockOffset, 1);
        long aLimit = aLength - (aAddresses[aIndex][LOBS.BLOCK_OFFSET] + aOffset) * lobBlockSize / 2;
        if (aLimit > lobBlockSize / 2) {
            aLimit = lobBlockSize / 2;
        }
        long bLimit = bLength - (bAddresses[bIndex][LOBS.BLOCK_OFFSET] + bOffset) * lobBlockSize / 2;
        if (bLimit > lobBlockSize / 2) {
            bLimit = lobBlockSize / 2;
        }
        String aString = new String(ArrayUtil.byteArrayToChars(aBytes), 0, (int) aLimit);
        String bString = new String(ArrayUtil.byteArrayToChars(bBytes), 0, (int) bLimit);
        int diff = database.collation.compare(aString, bString);
        if (diff != 0) {
            return diff;
        }
        aOffset++;
        bOffset++;
        if (aOffset == aAddresses[aIndex][LOBS.BLOCK_COUNT]) {
            aOffset = 0;
            aIndex++;
        }
        if (bOffset == bAddresses[bIndex][LOBS.BLOCK_COUNT]) {
            bOffset = 0;
            bIndex++;
        }
        if (aIndex == aAddresses.length) {
            break;
        }
    }
    return 0;
}
