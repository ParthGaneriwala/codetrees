public void doPost(HttpServletRequest req, HttpServletResponse resp) throws IOException {
    UserService userService = UserServiceFactory.getUserService();
    User user = userService.getCurrentUser();
    String content = req.getParameter("content");
    String amount = req.getParameter("amount");
    String reason = req.getParameter("reason");
    String rec_token = req.getParameter("rec_token");
    String validityExpiry = req.getParameter("validityExpiry");
    String period = req.getParameter("period");
    String times = req.getParameter("times");
    // choices=['DAILY', 'WEEKLY', 'SEMI_MONTHLY', 'MONTHLY' , 'EVERY_TWO_MONTHS', 'QUARTERLY', 'YEARLY'])
    Date date = new Date();
    Customer customer = new Customer(user, content, date, amount, reason, rec_token);
    // customer.setCallerReference(NAME + customer.getId());
    customer.setPeriod(period);
    customer.setTimes(times);
    PersistenceManager pm = PMF.get().getPersistenceManager();
    try {
        pm.makePersistent(customer);
    } finally {
        pm.close();
    }
    String requestURL = null;
    String error = null;
    try {
        String accessKeyId = PropertyBundle.getProperty(PropertyKeys.AWS_ACCESS_KEY);
        String secretAccessKey = PropertyBundle.getProperty(PropertyKeys.AWS_SECRET_KEY);
        String CHECKOUT_SERVER = CheckoutPropertyBundle.getProperty(CheckoutPropertyKeys.CHECKOUT_SERVER_NAME);
        // System.out.println("XXX: " + PropertyBundle.getProperty(PropertyKeys.MAX_ERROR_RETRY));
        // String CHECKOUT_SERVER = PropertyBundle.getProperty("CHECKOUT_SERVER");
        // AmazonFPSCBUIUtils obj = new AmazonFPSCBUIUtils(AwsAccessKey, AwsSecretKey);
        AmazonFPSCBUIUtils obj = new AmazonFPSCBUIUtils(accessKeyId, secretAccessKey);
        obj.setMandatoryParams("Recurring", CHECKOUT_SERVER + "/CustomerRecurringToken");
        customer.setCallerReference(NAME + customer.getId());
        pm = PMF.get().getPersistenceManager();
        try {
            pm.makePersistent(customer);
        } finally {
            pm.close();
        }
        obj.setCallerReference(NAME + customer.getId());
        obj.setTransactionAmount(amount);
        // obj.setTransactionAmount("100");
        obj.setPaymentReason(reason);
        String recurringPeriod = null;
        if (validityExpiry == null || "".equals(validityExpiry.trim())) {
            // obj.add("validityExpiry", Long.toString(System.currentTimeMillis()/1000 + (365*24*60*60))); // expire in one year.
            // obj.add("validityExpiry", Long.toString(System.currentTimeMillis()/1000 + (1*24*60*60))); // expire in one day.
            Calendar now = Calendar.getInstance();
            // buffer the end time by a few hours because the cron job only runs once an hour currently.
            now.add(Calendar.HOUR_OF_DAY, +(2));
            if ("MONTHLY".equals(period)) {
                recurringPeriod = "1 Month";
                now.add(Calendar.MONTH, +(Integer.parseInt(times)));
            } else if ("SEMI_MONTHLY".equals(period)) {
                recurringPeriod = "14 Days";
                now.add(Calendar.DAY_OF_MONTH, +(14 * Integer.parseInt(times)));
            } else if ("HOURLY".equals(period)) {
                recurringPeriod = "1 Hour";
                now.add(Calendar.HOUR_OF_DAY, +(Integer.parseInt(times)));
            }
            obj.add("validityExpiry", Long.toString(now.getTimeInMillis() / 1000));
        } else {
            obj.add("validityExpiry", validityExpiry);
        }
        // obj.add("recurringPeriod", "1 Hour");
        obj.add("recurringPeriod", recurringPeriod);
        // obj.add("recipientToken", "M2LD42KZJR5CCGGE33EH3DRD4HFEKBI3NGLK124TAHVLAMA9NQQ7KESGNNTHQRQT");
        obj.add("recipientToken", rec_token);
        requestURL = obj.getURL();
        System.out.println("Request URL is ::  " + requestURL);
    } catch (Exception e) {
        error = e.getMessage();
    }
    if (requestURL != null)
        resp.sendRedirect(requestURL);
    else
        resp.sendRedirect("/message.jsp?msg=" + error);
}
