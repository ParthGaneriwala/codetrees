public static void main(String[] args) throws IOException {
    final File tmpDir = new File("." + FSEP + "tmp");
    final File baselineQueryTop10File = new File(tmpDir.getCanonicalPath() + FSEP + "baselineQueryTop10.txt");
    final File boostedPathBaselineTop10File = new File(tmpDir.getCanonicalPath() + FSEP + "boostedPathBaselineTop10.txt");
    final File boostedPathTop10File = new File(tmpDir.getCanonicalPath() + FSEP + "boostedPathTop10.txt");
    final File pathTop10File = new File(tmpDir.getCanonicalPath() + FSEP + "pathTop10.txt");
    final File ratedTopFile = new File(tmpDir.getCanonicalPath() + FSEP + "topDocsUnionFile.txt");
    Map<Integer, Boolean> ratings = Maps.newHashMap();
    for (String line : FileUtils.readLines(ratedTopFile)) {
        Matcher m = p.matcher(line.trim());
        if (!m.matches())
            continue;
        ratings.put(Integer.parseInt(m.group(1)), line.contains("YES"));
    }
    List<Boolean> baselineQueryTop10Ratings = Lists.newArrayListWithCapacity(10);
    init(baselineQueryTop10Ratings);
    int rank = 0;
    for (String line : FileUtils.readLines(baselineQueryTop10File)) {
        Matcher m = p.matcher(line.trim());
        if (!m.matches())
            continue;
        baselineQueryTop10Ratings.set(rank, ratings.get(Integer.parseInt(m.group(1))));
        rank++;
    }
    List<Boolean> boostedPathBaselineTop10Ratings = Lists.newArrayListWithCapacity(10);
    init(boostedPathBaselineTop10Ratings);
    rank = 0;
    for (String line : FileUtils.readLines(boostedPathBaselineTop10File)) {
        Matcher m = p.matcher(line.trim());
        if (!m.matches())
            continue;
        boostedPathBaselineTop10Ratings.set(rank, ratings.get(Integer.parseInt(m.group(1))));
        rank++;
    }
    List<Boolean> boostedPathTop10Ratings = Lists.newArrayListWithCapacity(10);
    init(boostedPathTop10Ratings);
    rank = 0;
    for (String line : FileUtils.readLines(boostedPathTop10File)) {
        Matcher m = p.matcher(line.trim());
        if (!m.matches())
            continue;
        boostedPathTop10Ratings.set(rank, ratings.get(Integer.parseInt(m.group(1))));
        rank++;
    }
    List<Boolean> pathTop10Ratings = Lists.newArrayListWithCapacity(10);
    init(pathTop10Ratings);
    rank = 0;
    for (String line : FileUtils.readLines(pathTop10File)) {
        Matcher m = p.matcher(line.trim());
        if (!m.matches())
            continue;
        pathTop10Ratings.set(rank, ratings.get(Integer.parseInt(m.group(1))));
        rank++;
    }
    outputYesCounts(baselineQueryTop10Ratings, "Baseline Top");
    outputYesCounts(boostedPathBaselineTop10Ratings, "Boosted Path Baseline Top");
    outputYesCounts(boostedPathTop10Ratings, "Boosted Path Top");
    outputYesCounts(pathTop10Ratings, "Path Top");
}
