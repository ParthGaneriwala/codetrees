// end method setOutputFormat
public boolean transmitMedia() {
    outSource = processor.getDataOutput();
    if (outSource == null) {
        System.out.println("No data source from media!");
        return false;
    }
    // app.rtp stream managers for each track
    rtpManager = new RTPManager[tracks.length];
    // destination and local RTP session addresses
    SessionAddress localAddress, remoteAddress;
    // RTP stream being sent
    SendStream sendStream;
    // IP address
    InetAddress ip;
    // initialize transmission addresses and send out media
    try {
        // transmit every track in media
        for (int i = 0; i < tracks.length; i++) {
            // instantiate a RTPManager
            rtpManager[i] = RTPManager.newInstance();
            // add 2 to specify next control port number;
            // (RTP Session Manager uses 2 ports)
            port += (2 * i);
            // get IP address of host from ipAddress string
            ip = InetAddress.getByName(ipAddress);
            // encapsulate pair of IP addresses for control and
            // data with 2 ports into local session address
            localAddress = new SessionAddress(InetAddress.getLocalHost(), port);
            // get remoteAddress session address
            remoteAddress = new SessionAddress(ip, port);
            // initialize the session
            rtpManager[i].initialize(localAddress);
            // open RTP session for destination
            rtpManager[i].addTarget(remoteAddress);
            System.out.println("\nStarted RTP session: " + ipAddress + " " + port);
            // create send stream in RTP session
            sendStream = rtpManager[i].createSendStream(outSource, i);
            // start sending the stream
            sendStream.start();
            System.out.println("Transmitting Track #" + (i + 1) + " ... ");
        }
        // end for loop
        // start media feed
        processor.start();
    }// unknown local or unresolvable remote address
     catch (InvalidSessionAddressException addressError) {
        addressError.printStackTrace();
        return false;
    }// DataSource connection error
     catch (IOException ioException) {
        ioException.printStackTrace();
        return false;
    }// format not set or invalid format set on stream source
     catch (UnsupportedFormatException formatException) {
        formatException.printStackTrace();
        return false;
    }
    // transmission initialized successfully
    return true;
}
