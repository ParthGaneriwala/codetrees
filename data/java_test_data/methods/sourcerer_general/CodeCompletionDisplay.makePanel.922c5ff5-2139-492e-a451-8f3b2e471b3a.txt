private void makePanel() {
    GridLayout gridL = new GridLayout(1, 2);
    pane = (JComponent) getContentPane();
    JPanel mainPanel = new JPanel();
    mainPanel.setLayout(gridL);
    // create area for method names
    JPanel methodPanel = new JPanel();
    // create function description area
    methodDescription = new JEditorPane();
    methodDescription.setBorder(BorderFactory.createLineBorder(Color.BLACK));
    methodDescription.setEditable(false);
    methodDescription.setEditorKit(new HTMLEditorKit());
    methodDescription.setEditable(false);
    InputMap inputMap = new InputMap() {

        public Object get(KeyStroke keyStroke) {
            // Define no action for up/down, which allows the parent scroll
            // pane to process the keys instead. This means the view will scroll,
            // rather than just moving an invisible cursor.
            Object action = super.get(keyStroke);
            if ("caret-up".equals(action) || "caret-down".equals(action)) {
                return null;
            }
            return action;
        }
    };
    inputMap.setParent(methodDescription.getInputMap(JComponent.WHEN_FOCUSED));
    methodDescription.setInputMap(JComponent.WHEN_FOCUSED, inputMap);
    // yellowish
    methodDescription.setBackground(new Color(255, 255, 205));
    methodList = new JList();
    methodList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    methodList.addListSelectionListener(this);
    methodList.addMouseListener(this);
    methodList.requestFocusInWindow();
    methodList.setCellRenderer(new CodeCompleteCellRenderer(suggestionType));
    // pale yellow
    methodList.setBackground(new Color(255, 255, 235));
    // To allow continued typing of method name prefix, we map keys to equivalent actions
    // within the editor. I.e. typing a key inserts that key character.
    inputMap = new InputMap() {

        @Override
        public Object get(final KeyStroke keyStroke) {
            if (keyStroke.getKeyCode() == KeyEvent.VK_ESCAPE) {
                return null;
            }
            if (keyStroke.getKeyChar() == 8 && keyStroke.getKeyEventType() == KeyEvent.KEY_TYPED) {
                // keyChar 8 = backspace
                return new AbstractAction() {

                    public void actionPerformed(ActionEvent e) {
                        if (prefix.length() > 0) {
                            SourceLocation back = new SourceLocation(prefixEnd.getLine(), prefixEnd.getColumn() - 1);
                            editor.setSelection(back, prefixEnd);
                            editor.insertText("", false);
                            prefix = prefix.substring(0, prefix.length() - 1);
                            prefixEnd = editor.getCaretLocation();
                            updatePrefix();
                        }
                    }
                };
            }
            Object actionName = super.get(keyStroke);
            if (actionName == null && keyStroke.getKeyEventType() == KeyEvent.KEY_TYPED) {
                if (keyStroke.getKeyChar() >= 32) {
                    return new AbstractAction() {

                        public void actionPerformed(ActionEvent e) {
                            editor.insertText("" + keyStroke.getKeyChar(), false);
                            prefix += keyStroke.getKeyChar();
                            prefixEnd = editor.getCaretLocation();
                            updatePrefix();
                        }
                    };
                }
            }
            return actionName;
        }
    };
    inputMap.setParent(methodList.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT));
    methodList.setInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT, inputMap);
    ActionMap actionMap = new ActionMap() {

        @Override
        public Action get(Object key) {
            if (key instanceof Action) {
                return (Action) key;
            }
            return super.get(key);
        }
    };
    actionMap.setParent(methodList.getActionMap());
    methodList.setActionMap(actionMap);
    // Set a standard height/width
    Font mlFont = methodList.getFont();
    FontMetrics metrics = methodList.getFontMetrics(mlFont);
    Dimension size = new Dimension(metrics.charWidth('m') * 30, metrics.getHeight() * 15);
    JScrollPane scrollPane;
    scrollPane = new JScrollPane(methodList);
    scrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
    scrollPane.setPreferredSize(size);
    methodPanel.add(scrollPane);
    scrollPane = new JScrollPane(methodDescription);
    scrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
    scrollPane.setPreferredSize(size);
    mainPanel.add(methodPanel);
    mainPanel.add(scrollPane);
    pane.add(mainPanel);
    inputMap = new InputMap();
    inputMap.setParent(pane.getRootPane().getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT));
    KeyStroke keyStroke = KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0);
    inputMap.put(keyStroke, "escapeAction");
    keyStroke = KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0);
    inputMap.put(keyStroke, "completeAction");
    pane.getRootPane().setInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT, inputMap);
    actionMap = new ActionMap() {

        @Override
        public Action get(Object key) {
            if (key instanceof Action) {
                return (Action) key;
            }
            return super.get(key);
        }
    };
    actionMap.put("escapeAction", new AbstractAction() {

        public void actionPerformed(ActionEvent e) {
            dispose();
        }
    });
    actionMap.put("completeAction", new AbstractAction() {

        public void actionPerformed(ActionEvent e) {
            codeComplete();
        }
    });
    pane.getRootPane().setActionMap(actionMap);
    this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    this.setUndecorated(true);
    pack();
}
