public void encaixaPaginacao(List<Link> lstLinks, Link lnkAnterior, Link lnkProxima, Link atual) {
    Matcher mat = patPag.matcher(template);
    if (mat.find()) {
        String paginas = mat.group(1);
        Matcher matPags = patPags.matcher(paginas);
        if (matPags.find()) {
            String strLink = matPags.group(1);
            String strSeparador = " - ";
            String strA = " - ";
            Pattern patLink = Pattern.compile("<a\\s(.*?)>", Pattern.DOTALL);
            Matcher matLink = patLink.matcher(strLink);
            if (matLink.find()) {
                strA = matLink.group();
            }
            Pattern patSeparador = Pattern.compile("<!-- ini separador -->(.*?)<!-- fim separador -->", Pattern.DOTALL);
            Matcher matSeparador = patSeparador.matcher(strLink);
            if (matSeparador.find()) {
                strSeparador = matSeparador.group(1);
            }
            StringBuilder sb = new StringBuilder();
            if (lstLinks.size() > 0) {
                Link link = lstLinks.get(0);
                if (link.equals(atual)) {
                    sb.append(link.getLabel());
                } else {
                    sb.append(HtmlUtils.substituiAtributoTag(strA, "a", "href", link.getHref()));
                    sb.append(link.getLabel());
                    sb.append("</a>");
                }
                if (lstLinks.size() > 1)
                    sb.append(strSeparador);
                for (int i = 1; i < lstLinks.size(); i++) {
                    link = lstLinks.get(i);
                    if (link.equals(atual)) {
                        sb.append(link.getLabel());
                    } else {
                        sb.append(HtmlUtils.substituiAtributoTag(strA, "a", "href", link.getHref()));
                        sb.append(link.getLabel());
                        sb.append("</a>");
                    }
                    sb.append(strSeparador);
                }
            }
            paginas = matPags.replaceAll(sb.toString());
        }
        // colocar prox e anterior
        Matcher matAntProx = patAnterior.matcher(paginas);
        if (matAntProx.find()) {
            String anterior = matAntProx.group(1);
            if (lnkAnterior != null) {
                paginas = matAntProx.replaceAll(HtmlUtils.substituiAtributoTag(anterior, "a", "href", lnkAnterior.getHref()));
            } else {
                Matcher matAs = patLimpaLink.matcher(anterior);
                if (matAs.find()) {
                    anterior = matAs.replaceAll("");
                }
                paginas = matAntProx.replaceAll(anterior);
            }
        }
        matAntProx = patProxima.matcher(paginas);
        if (matAntProx.find()) {
            String anterior = matAntProx.group(1);
            if (lnkProxima != null) {
                paginas = matAntProx.replaceAll(HtmlUtils.substituiAtributoTag(anterior, "a", "href", lnkProxima.getHref()));
            } else {
                Matcher matAs = patLimpaLink.matcher(anterior);
                if (matAs.find()) {
                    anterior = matAs.replaceAll("");
                }
                paginas = matAntProx.replaceAll(anterior);
            }
        }
        template = mat.replaceAll(paginas);
    }
}
