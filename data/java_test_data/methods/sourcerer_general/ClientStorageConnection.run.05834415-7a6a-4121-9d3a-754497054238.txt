@Override
public void run() {
    long receivedHits = ClientProbTreeStorage.getReceivedHits();
    long requestedHits = ClientProbTreeStorage.getRequestedHits();
    long lostRequests = ClientProbTreeStorage.getLostRequests();
    long timeWaited = ClientProbTreeStorage.getTimeWaited();
    long requests = connection.getMessagesReceived();
    long asyncRequests = ClientProbTreeStorage.getAsyncRequests();
    long syncTime = RequestBundle.getSyncTime();
    long responseDelayTime = RequestBundle.getResponseDelayTime();
    long syncCount = RequestBundle.getSyncCount();
    if (requests != lastRequests) {
        long diff = requests - lastRequests;
        System.err.printf("Client stats (1 min): %s req/s, %s async req/s, recvHits %s%%, reqHits %s%%, sync %sms avg, response delay time %sms avg\n", nf.format((float) diff * 1000 / INTERVAL), nf.format((float) (asyncRequests - lastAsyncRequests) * 1000 / INTERVAL), nf.format((float) (receivedHits - lastReceivedHits) * 100 / diff), nf.format((float) (requestedHits - lastRequestedHits) * 100 / diff), // nf.format((timeWaited - lastTimeWaited) / diff * 1e-6),
        nf.format((syncTime - lastSyncTime) / (syncCount - lastSyncCount) * 1e-6), nf.format((responseDelayTime - lastResponseDelayTime) / diff * 1e-6));
    }
    lastReceivedHits = receivedHits;
    lastRequestedHits = requestedHits;
    lastLostRequests = lostRequests;
    lastTimeWaited = timeWaited;
    lastRequests = requests;
    lastAsyncRequests = asyncRequests;
    lastSyncTime = syncTime;
    lastResponseDelayTime = responseDelayTime;
    lastSyncCount = syncCount;
// System.out.flush();
}
