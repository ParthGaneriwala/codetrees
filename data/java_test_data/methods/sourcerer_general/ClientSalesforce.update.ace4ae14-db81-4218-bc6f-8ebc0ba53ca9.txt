public static List<SObject> update(List<SObject> records, int batchSize) throws UnexpectedErrorFault, InvalidIdFault, LoginFault, RemoteException, IllegalArgumentException, Exception {
    SaveResult[] saveResults;
    boolean errorFound = false;
    String errors = new String();
    SObject[] objs = new SObject[records.size()];
    try {
        for (int i = 0; i < records.size(); i++) objs[i] = records.get(i);
        // less than the permitted records
        if (batchSize <= dmlStatementSize)
            saveResults = binding.update(objs, mySessionHeader, null, null, null, null, null, null);
        else // More than the permitted records
        {
            saveResults = new SaveResult[objs.length];
            SObject[] thisBatch = null;
            int pos = 0;
            while (pos < objs.length) {
                int thisBatchSize = Math.min(batchSize, objs.length - pos);
                if (thisBatch == null || thisBatch.length != thisBatchSize)
                    thisBatch = new SObject[thisBatchSize];
                logger.info("Records " + pos + "-" + (pos + thisBatchSize));
                System.arraycopy(records, pos, thisBatch, 0, thisBatchSize);
                SaveResult[] batchResults = binding.update(thisBatch, mySessionHeader, null, null, null, null, null, null);
                System.arraycopy(batchResults, 0, saveResults, pos, thisBatchSize);
                pos += thisBatchSize;
            }
        }
        logger.log(Level.INFO, "Records to update: " + objs[0].toString());
        saveResults = binding.update(objs, mySessionHeader, null, null, null, null, null, null);
        // Handle the results
        for (int i = 0; i < saveResults.length; i++) {
            // Determine whether create succeeded or had errors
            if (saveResults[i].getSuccess()) {
                // No errors, so we will retrieve the id created for this index
                objs[i].setId(saveResults[i].getId());
                logger.log(Level.INFO, "Item " + i + " id" + saveResults[i].getId());
            } else {
                // Handle the errors
                errorFound = true;
                logger.log(Level.SEVERE, "ClientSalesforce.update/Item " + i + " had an error updating.");
                logger.log(Level.SEVERE, "ClientSalesforce.update/The error reported was: " + saveResults[i].getErrors()[0].getMessage() + "\n");
                errors += saveResults[i].getErrors()[0].getMessage() + "\n";
            }
        }
        if (errorFound)
            throw new Exception("errors found: " + errors);
        logger.log(Level.INFO, "Query executed sucessfull. Returned Values: " + objs.length);
        for (int i = 0; i < objs.length; i++) records.set(i, objs[i]);
    } catch (RemoteException e) {
        logger.log(Level.SEVERE, "ClientSalesforce.update/Error: " + e);
    } catch (InvalidIdFault e) {
        logger.log(Level.SEVERE, "ClientSalesforce.update/Error: " + e);
    } catch (UnexpectedErrorFault e) {
        logger.log(Level.SEVERE, "ClientSalesforce.update/Error: " + e);
    } catch (Exception e) {
        logger.log(Level.SEVERE, "ClientSalesforce.update/Error: " + e);
    }
    return records;
}
