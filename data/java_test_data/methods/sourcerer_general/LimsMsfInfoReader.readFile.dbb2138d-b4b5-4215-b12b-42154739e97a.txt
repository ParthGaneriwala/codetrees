public void readFile() {
    try {
        // create the ratiogroup collection
        iRatioGroupCollection = new RatioGroupCollection(DataType.PROTEOME_DISCOVERER);
        FileReader freader = new FileReader(iInfoFile);
        LineNumberReader lnreader = new LineNumberReader(freader);
        String line = "";
        // boolean that indicates if the header is parsed
        boolean lInSpectrum = false;
        int lCurrentQuantId = 0;
        Vector<Peak> lPeaks = new Vector<Peak>();
        while ((line = lnreader.readLine()) != null) {
            // System.out.println(line);
            if (line.startsWith("FILE=")) {
                String lFile = line.substring(line.indexOf("=") + 1);
                iRatioGroupCollection.putMetaData(QuantitationMetaType.FILENAME, lFile);
            }
            if (line.startsWith("RATIO=")) {
                line = line.substring(line.indexOf("=") + 1);
                String[] lElements = line.split("\t");
                Vector<String> lType = new Vector<String>();
                for (int r = 0; r < lElements.length; r++) {
                    lType.add(lElements[r]);
                }
                iRatioGroupCollection.setRatioTypes(lType);
            } else if (line.startsWith("COMPONENTS=")) {
                line = line.substring(line.indexOf("=") + 1);
                String[] lElements = line.split("\t");
                Vector<String> lComp = new Vector<String>();
                for (int r = 0; r < lElements.length; r++) {
                    lComp.add(lElements[r]);
                }
                iRatioGroupCollection.setComponentTypes(lComp);
            } else if (line.startsWith("BEGIN IONS")) {
                lInSpectrum = true;
            } else if (line.startsWith("END IONS")) {
                lInSpectrum = false;
                iQuanSpectra.add(new QuantSpectrum(lCurrentQuantId, (Vector<Peak>) lPeaks.clone()));
                lPeaks.removeAllElements();
            }
            if (lInSpectrum) {
                if (line.startsWith("QuanResultId=")) {
                    lCurrentQuantId = Integer.valueOf(line.substring(line.indexOf("=") + 1));
                } else if (line.startsWith("BEGIN IONS")) {
                // do nothing
                } else {
                    String[] lElements = line.split("_");
                    double lMass = Double.valueOf(lElements[0]);
                    double lIntensity = Double.valueOf(lElements[1]);
                    String lColor = null;
                    String lLabel = null;
                    if (lElements.length > 2) {
                        lColor = lElements[2];
                    }
                    if (lElements.length > 3) {
                        lLabel = lElements[3];
                    }
                    lPeaks.add(new Peak(lMass, lIntensity, lColor, lLabel));
                }
            }
        }
    } catch (FileNotFoundException e) {
        iFlamable.passHotPotato(new Throwable("Problem reading the msf file info"));
        logger.error(e.getMessage(), e);
    } catch (IOException e) {
        iFlamable.passHotPotato(new Throwable("Problem reading the msf file info"));
        logger.error(e.getMessage(), e);
    } catch (Exception e) {
        iFlamable.passHotPotato(new Throwable("Problem reading the msf file info"));
        logger.error(e.getMessage(), e);
    }
}
