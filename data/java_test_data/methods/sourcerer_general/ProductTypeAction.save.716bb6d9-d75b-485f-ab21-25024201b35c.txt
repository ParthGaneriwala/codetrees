public String save() throws Exception {
    System.out.println("Saving productType...:" + productType);
    if (cancel != null) {
        System.out.println("currentProduct: " + productType);
        getSession().setAttribute("productType", productType);
        return CANCEL;
    }
    if (delete != null) {
        return delete();
    }
    boolean isNew = (productType.getId() == null);
    productType.setProducts(new ArrayList<Product>());
    if (getProductOptionsPicked() != null) {
        for (String s : getProductOptionsPicked()) {
            Product pt = productManager.get(new Long(Integer.parseInt(s)));
            productType.getProducts().add(pt);
        }
    }
    if (file == null) {
        String path = ServletActionContext.getServletContext().getRealPath("/images");
        file = new File(path + "/403.jpg");
    }
    InputStream is = new FileInputStream(file);
    long length = file.length();
    if (length > Integer.MAX_VALUE) {
    // File is too large
    }
    byte[] bytes = new byte[(int) length];
    int offset = 0;
    int numRead = 0;
    while (offset < bytes.length && (numRead = is.read(bytes, offset, bytes.length - offset)) >= 0) {
        offset += numRead;
    }
    if (offset < bytes.length) {
        throw new IOException("Could not completely read file " + file.getName());
    }
    is.close();
    productType.setImageProductType(bytes);
    if (validationPasses()) {
        // productType.setImageProductType(null);
        productType = productTypeManager.save(productType);
    } else {
        edit();
        return ERROR;
    }
    String key = (isNew) ? "productType.added" : "productType.updated";
    saveMessage(getText(key));
    if (!isNew) {
        return INPUT;
    } else {
        return SUCCESS;
    }
}
