protected Object readValue(Element element, Class<?> clazz) throws IOException {
    // see if we can read the value from a string
    String id = element.getAttribute("id");
    String cstr = element.getAttribute("class");
    Class<?> cclazz;
    if (cstr.length() > 0) {
        try {
            cclazz = Class.forName(cstr);
        } catch (ClassNotFoundException e) {
            log.warning("Class not found.", e);
            return null;
        }
    } else {
        cclazz = clazz;
    }
    Stringifier stringifier = Stringifier.getStringifier(cclazz);
    if (stringifier != null) {
        String string = element.getTextContent();
        Object value = null;
        try {
            if ((value = stringifier.fromString(string)) == null) {
                log.warning("Failed to parse string.", "string", string, "class", cclazz);
            }
        } catch (Exception e) {
            log.warning("Failed to parse string.", "string", string, "class", cclazz, e);
        }
        if (id.length() > 0 && value != null) {
            putObject(id, value);
        }
        return value;
    }
    // otherwise, process the element
    Element oelement = _element;
    _element = element;
    try {
        Object value;
        if (cclazz.isArray()) {
            value = Array.newInstance(cclazz.getComponentType(), countEntries());
        } else {
            value = ReflectionUtil.newInstance(cclazz, ReflectionUtil.isInner(cclazz) ? read("outer", null, Object.class) : null);
        }
        if (id.length() > 0) {
            putObject(id, value);
        }
        if (value instanceof Exportable) {
            readFields((Exportable) value);
        } else if (value instanceof Object[]) {
            readEntries((Object[]) value, cclazz.getComponentType());
        } else if (value instanceof Collection) {
            @SuppressWarnings("unchecked") Collection<Object> collection = (Collection<Object>) value;
            readEntries(collection);
        } else if (value instanceof Map) {
            @SuppressWarnings("unchecked") Map<Object, Object> map = (Map<Object, Object>) value;
            readEntries(map);
        }
        return value;
    } finally {
        _element = oelement;
    }
}
