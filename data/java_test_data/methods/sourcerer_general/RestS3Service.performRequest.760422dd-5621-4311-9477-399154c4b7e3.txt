protected void performRequest(HttpMethodBase httpMethod, int expectedResponseCode) throws S3ServiceException {
    try {
        log.debug("Performing " + httpMethod.getName() + " request, expecting response code " + expectedResponseCode);
        // Variables to manage S3 Internal Server 500 errors.
        boolean completedWithoutRecoverableError = true;
        int internalErrorCount = 0;
        int requestTimeoutErrorCount = 0;
        // Perform the request, sleeping and retrying when S3 Internal Errors are encountered.
        int responseCode = -1;
        do {
            // Build the authorization string for the method.
            buildAuthorizationString(httpMethod);
            responseCode = httpClient.executeMethod(hostConfig, httpMethod);
            if (responseCode == 500) {
                // Retry on S3 Internal Server 500 errors.
                completedWithoutRecoverableError = false;
                sleepOnInternalError(++internalErrorCount);
            } else {
                completedWithoutRecoverableError = true;
            }
            String contentType = "";
            if (httpMethod.getResponseHeader("Content-Type") != null) {
                contentType = httpMethod.getResponseHeader("Content-Type").getValue();
            }
            log.debug("Request returned with headers: " + Arrays.asList(httpMethod.getResponseHeaders()));
            log.debug("Request returned with Content-Type: " + contentType);
            // Check we received the expected result code.
            if (responseCode != expectedResponseCode) {
                log.debug("Unexpected response code " + responseCode + ", expected " + expectedResponseCode);
                if (Mimetypes.MIMETYPE_XML.equals(contentType) && httpMethod.getResponseBodyAsStream() != null && httpMethod.getResponseContentLength() != 0) {
                    log.debug("Received error response with XML message");
                    StringBuffer sb = new StringBuffer();
                    BufferedReader reader = null;
                    try {
                        reader = new BufferedReader(new InputStreamReader(new HttpMethodReleaseInputStream(httpMethod)));
                        String line = null;
                        while ((line = reader.readLine()) != null) {
                            sb.append(line + "\n");
                        }
                    } finally {
                        if (reader != null) {
                            reader.close();
                        }
                    }
                    // Throw exception containing the XML message document.
                    S3ServiceException exception = new S3ServiceException("S3 " + httpMethod.getName() + " failed.", sb.toString());
                    if ("RequestTimeout".equals(exception.getS3ErrorCode())) {
                        int retryMaxCount = Jets3tProperties.getInstance(Constants.JETS3T_PROPERTIES_FILENAME).getIntProperty("httpclient.retry-max", 5);
                        if (requestTimeoutErrorCount < retryMaxCount) {
                            requestTimeoutErrorCount++;
                            log.warn("Retrying connection that failed with RequestTimeout error" + ", attempt number " + requestTimeoutErrorCount + " of " + retryMaxCount);
                            completedWithoutRecoverableError = false;
                        } else {
                            log.warn("Exceeded maximum number of retries for RequestTimeout errors: " + retryMaxCount);
                            throw exception;
                        }
                    } else if (responseCode == 500) {
                    // Retrying after InternalError 500, don't throw exception.
                    } else {
                        throw exception;
                    }
                } else {
                    // Consume response content and release connection.
                    String responseText = null;
                    byte[] responseBody = httpMethod.getResponseBody();
                    if (responseBody != null && responseBody.length > 0) {
                        responseText = new String(responseBody);
                    }
                    log.debug("Releasing error response without XML content");
                    httpMethod.releaseConnection();
                    if (responseCode == 500) {
                    // Retrying after InternalError 500, don't throw exception.
                    } else {
                        // Throw exception containing the HTTP error fields.
                        throw new S3ServiceException("S3 " + httpMethod.getName() + " request failed. " + "ResponseCode=" + httpMethod.getStatusCode() + ", ResponseMessage=" + httpMethod.getStatusText() + (responseText != null ? "\n" + responseText : ""));
                    }
                }
            }
        } while (!completedWithoutRecoverableError);
        // Release immediately any connections without response bodies.
        if ((httpMethod.getResponseBodyAsStream() == null || httpMethod.getResponseBodyAsStream().available() == 0) && httpMethod.getResponseContentLength() == 0) {
            log.debug("Releasing response without content");
            byte[] responseBody = httpMethod.getResponseBody();
            if (responseBody != null && responseBody.length > 0)
                throw new S3ServiceException("Oops, too keen to release connection with a non-empty response body");
            httpMethod.releaseConnection();
        }
    } catch (S3ServiceException e) {
        throw e;
    } catch (Throwable t) {
        log.debug("Releasing method after error: " + t.getMessage());
        httpMethod.releaseConnection();
        throw new S3ServiceException("S3 " + httpMethod.getName() + " connection failed", t);
    }
}
