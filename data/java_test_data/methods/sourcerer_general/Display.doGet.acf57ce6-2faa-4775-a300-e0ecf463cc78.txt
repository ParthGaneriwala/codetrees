public void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException, ServletException {
    String blobKeyString = req.getParameter("key");
    if (blobKeyString == null || blobKeyString.equals("")) {
        resp.sendRedirect("/?error=" + URLEncoder.encode("BlobKey not provided", "UTF-8"));
        return;
    }
    BlobKey blobKey = new BlobKey(blobKeyString);
    PersistenceManager pm = PMF.get().getPersistenceManager();
    Query query = pm.newQuery(MediaObject.class, "blob == blobParam");
    query.declareImports("import " + "com.google.appengine.api.blobstore.BlobKey");
    query.declareParameters("BlobKey blobParam");
    List<MediaObject> results = (List<MediaObject>) query.execute(blobKey);
    if (results.isEmpty()) {
        resp.sendRedirect("/?error=" + URLEncoder.encode("BlobKey does not exist", "UTF-8"));
        return;
    }
    UserService userService = UserServiceFactory.getUserService();
    User user = userService.getCurrentUser();
    MediaObject result = results.get(0);
    if (!result.isPublic() && !result.getOwner().equals(user)) {
        resp.sendRedirect("/?error=" + URLEncoder.encode("Not authorized to access", "UTF-8"));
        return;
    }
    String rotation = req.getParameter("rotate");
    String displayURL = result.getURLPath() + "&rotate=" + rotation;
    String authURL = (user != null) ? userService.createLogoutURL("/") : userService.createLoginURL("/");
    req.setAttribute("displayURL", displayURL);
    req.setAttribute("authURL", authURL);
    req.setAttribute("user", user);
    req.setAttribute("rotation", rotation);
    req.setAttribute("item", result);
    req.setAttribute("blobkey", blobKeyString);
    RequestDispatcher dispatcher = req.getRequestDispatcher("WEB-INF/templates/display.jsp");
    dispatcher.forward(req, resp);
}
