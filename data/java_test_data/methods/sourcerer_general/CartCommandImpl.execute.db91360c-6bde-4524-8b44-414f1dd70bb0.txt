public String execute(String cmdline, PrintStream out, PrintStream err) {
    StringBuffer res = new StringBuffer();
    EcomCustomerRemote ecomCustomerBean = (EcomCustomerRemote) _context.getVar("customerBean");
    String currentCurrency = String.valueOf(_context.getVar("currency"));
    Outputs currentOutput = (Outputs) _context.getVar("output");
    StringTokenizer st = new StringTokenizer(cmdline, " ");
    // Ignore cmd
    st.nextToken();
    // without arg : list all products in cart
    if (st.countTokens() == 0) {
        return printCart(ecomCustomerBean, currentCurrency, out, currentOutput);
    } else // With option
    {
        String option = st.nextToken();
        try {
            // adding
            if (option.equals("-add")) {
                // check args numbers
                if (st.countTokens() == 6) {
                    if (".p".equalsIgnoreCase(st.nextToken().trim())) {
                        int productId = Integer.valueOf(st.nextToken().trim());
                        if (".s".equalsIgnoreCase(st.nextToken().trim())) {
                            int storeId = Integer.valueOf(st.nextToken().trim());
                            if (".q".equalsIgnoreCase(st.nextToken().trim())) {
                                int q = Integer.valueOf(st.nextToken().trim());
                                ecomCustomerBean.addProductToCart(productId, storeId, q);
                                res.append(_context.returnCode("Product #" + productId + " added", RESULT_ACTION.SUCCESS));
                            }
                        }
                    }
                } else {
                    err.println(Shell.INCORRECT_ARGS_NUMBER);
                }
            } else if (option.equals("-remove")) {
                // check args numbers
                if (st.countTokens() == 6) {
                    if (".p".equalsIgnoreCase(st.nextToken().trim())) {
                        int productId = Integer.valueOf(st.nextToken().trim());
                        if (".s".equalsIgnoreCase(st.nextToken().trim())) {
                            int storeId = Integer.valueOf(st.nextToken().trim());
                            if (".q".equalsIgnoreCase(st.nextToken().trim())) {
                                int q = Integer.valueOf(st.nextToken().trim());
                                ecomCustomerBean.removeProductInCart(productId, storeId, q);
                                res.append(_context.returnCode("Product #" + productId + " removed", RESULT_ACTION.SUCCESS));
                            }
                        }
                    }
                } else {
                    err.println(Shell.INCORRECT_ARGS_NUMBER);
                }
            } else if (option.equals("-buy")) {
                int accountId = Integer.valueOf(st.nextToken().trim());
                ecomCustomerBean.buyCart(accountId);
                res.append(_context.returnCode("CART BOUGHT", RESULT_ACTION.SUCCESS));
            } else {
                res.append(_context.returnCode(option + " is an unknown attribut !!", RESULT_ACTION.FAILED));
                err.println("\t " + option + " is an unknown attribut !!");
            }
            return printCart(ecomCustomerBean, currentCurrency, out, currentOutput);
        } catch (UnknownIdentifier ex) {
            res.append(_context.returnCode(ex.toString(), RESULT_ACTION.FAILED));
            err.println(ex);
        } catch (CartException ex) {
            res.append(_context.returnCode(ex.toString(), RESULT_ACTION.FAILED));
            err.println("Error with Cart Management : " + ex);
        } catch (Exception ex) {
            res.append(_context.returnCode(ex.toString(), RESULT_ACTION.FAILED));
            err.println(ex);
        }
    }
    return res.toString();
}
