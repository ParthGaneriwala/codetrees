private static ContentValues parseSession(JSONObject session, ContentValues recycle, String summary, String track) {
    recycle.clear();
    recycle.put(TracksColumns.TRACK, session.optString(SessionJsonKeys.TRACK, null));
    try {
        recycle.put(BlocksColumns.TIME_START, dateFormatter.parse(session.optString(SessionJsonKeys.UNIXSTART)).getTime() / 1000);
        recycle.put(BlocksColumns.TIME_END, dateFormatter.parse(session.optString(SessionJsonKeys.UNIXEND)).getTime() / 1000);
    } catch (ParseException e) {
        Log.e(TAG, "Couldnt parse " + session.optString(SessionJsonKeys.UNIXSTART) + " " + session.optString(SessionJsonKeys.UNIXEND));
    }
    String sessiontitle = session.optString(SessionJsonKeys.SESSIONCODE, null);
    if (sessiontitle != null && sessiontitle.startsWith("D10")) {
        sessiontitle = session.optString(SessionJsonKeys.SESSIONTITLE, null);
        if (sessiontitle == null)
            sessiontitle = session.optString("note", null);
    }
    final String sessionspeakers = session.optString(SessionJsonKeys.SESSIONSPEAKERS, null);
    // final String sessionabstract = session.optString(SessionJsonKeys.SESSIONABSTRACT, null);
    recycle.put(SessionsColumns.TITLE, sessiontitle);
    recycle.put(SessionsColumns.SPEAKER_NAMES, sessionspeakers);
    // recycle.put(SessionsColumns.ABSTRACT, sessionabstract);
    recycle.put(SessionsColumns.ROOM, session.optString(SessionJsonKeys.ROOM, null));
    recycle.put(SessionsColumns.TYPE, session.optString(SessionJsonKeys.SESSIONTYPE, null));
    // recycle.put(SessionsColumns.TAGS, tags);
    recycle.put(SessionsColumns.LINK, session.optString(SessionJsonKeys.FULLLINK, null));
    recycle.put(SessionsColumns.LINK_ALT, session.optString(SessionJsonKeys.MODERATORLINK, null));
    recycle.put(SessionJsonKeys.SESSIONABSTRACT, summary);
    recycle.put(SessionJsonKeys.TRACK, track);
    recycle.put(SessionsColumns.STARRED, 0);
    // Build search index string
    sBuilder.setLength(0);
    sBuilder.append(sessiontitle);
    if (sessionspeakers != null) {
        sBuilder.append(" ");
        sBuilder.append(sessionspeakers);
    }
    if (summary != null) {
        sBuilder.append(" ");
        sBuilder.append(summary);
    }
    recycle.put(SearchColumns.INDEX_TEXT, sBuilder.toString());
    return recycle;
}
