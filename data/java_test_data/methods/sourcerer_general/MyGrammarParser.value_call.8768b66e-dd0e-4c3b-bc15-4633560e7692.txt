// $ANTLR start "value_call"
public final MyGrammarParser.value_call_return value_call() throws RecognitionException {
    MyGrammarParser.value_call_return retval = new MyGrammarParser.value_call_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token IDENTIFIER191 = null;
    MyGrammarParser.array_call_return array_call192 = null;
    MyGrammarParser.proc_call_return proc_call193 = null;
    CommonTree IDENTIFIER191_tree = null;
    RewriteRuleTokenStream stream_IDENTIFIER = new RewriteRuleTokenStream(adaptor, "token IDENTIFIER");
    RewriteRuleSubtreeStream stream_proc_call = new RewriteRuleSubtreeStream(adaptor, "rule proc_call");
    RewriteRuleSubtreeStream stream_array_call = new RewriteRuleSubtreeStream(adaptor, "rule array_call");
    try {
        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:291:13: ( ( IDENTIFIER -> ^( VALUE_CALL IDENTIFIER ) | array_call -> ^( VALUE_CALL array_call ) | proc_call -> ^( VALUE_CALL proc_call ) ) )
        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:291:14: ( IDENTIFIER -> ^( VALUE_CALL IDENTIFIER ) | array_call -> ^( VALUE_CALL array_call ) | proc_call -> ^( VALUE_CALL proc_call ) )
        {
            // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:291:14: ( IDENTIFIER -> ^( VALUE_CALL IDENTIFIER ) | array_call -> ^( VALUE_CALL array_call ) | proc_call -> ^( VALUE_CALL proc_call ) )
            int alt37 = 3;
            int LA37_0 = input.LA(1);
            if ((LA37_0 == IDENTIFIER)) {
                switch(input.LA(2)) {
                    case ECONCH:
                        {
                            alt37 = 2;
                        }
                        break;
                    case EPAR:
                        {
                            alt37 = 3;
                        }
                        break;
                    case AND:
                    case OR:
                    case SOMA:
                    case SUB:
                    case MULT:
                    case DIV:
                    case MOD:
                    case IGUAL:
                    case DESIGUAL:
                    case MAIOR_IGUAL_QUE:
                    case MENOR_IGUAL_QUE:
                    case MAIOR_QUE:
                    case MENOR_QUE:
                    case THEN:
                    case DO:
                    case TO:
                    case BY:
                    case DP:
                    case PVG:
                    case VG:
                    case DCONCH:
                    case DPAR:
                    case RET:
                        {
                            alt37 = 1;
                        }
                        break;
                    default:
                        NoViableAltException nvae = new NoViableAltException("", 37, 1, input);
                        throw nvae;
                }
            } else {
                NoViableAltException nvae = new NoViableAltException("", 37, 0, input);
                throw nvae;
            }
            switch(alt37) {
                case 1:
                    // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:291:15: IDENTIFIER
                    {
                        IDENTIFIER191 = (Token) match(input, IDENTIFIER, FOLLOW_IDENTIFIER_in_value_call2570);
                        stream_IDENTIFIER.add(IDENTIFIER191);
                        // AST REWRITE
                        // elements: IDENTIFIER
                        // token labels:
                        // rule labels: retval
                        // token list labels:
                        // rule list labels:
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", retval != null ? retval.tree : null);
                        root_0 = (CommonTree) adaptor.nil();
                        // 291:26: -> ^( VALUE_CALL IDENTIFIER )
                        {
                            // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:291:29: ^( VALUE_CALL IDENTIFIER )
                            {
                                CommonTree root_1 = (CommonTree) adaptor.nil();
                                root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(VALUE_CALL, "VALUE_CALL"), root_1);
                                adaptor.addChild(root_1, stream_IDENTIFIER.nextNode());
                                adaptor.addChild(root_0, root_1);
                            }
                        }
                        retval.tree = root_0;
                    }
                    break;
                case 2:
                    // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:292:9: array_call
                    {
                        pushFollow(FOLLOW_array_call_in_value_call2588);
                        array_call192 = array_call();
                        state._fsp--;
                        stream_array_call.add(array_call192.getTree());
                        // AST REWRITE
                        // elements: array_call
                        // token labels:
                        // rule labels: retval
                        // token list labels:
                        // rule list labels:
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", retval != null ? retval.tree : null);
                        root_0 = (CommonTree) adaptor.nil();
                        // 292:20: -> ^( VALUE_CALL array_call )
                        {
                            // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:292:23: ^( VALUE_CALL array_call )
                            {
                                CommonTree root_1 = (CommonTree) adaptor.nil();
                                root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(VALUE_CALL, "VALUE_CALL"), root_1);
                                adaptor.addChild(root_1, stream_array_call.nextTree());
                                adaptor.addChild(root_0, root_1);
                            }
                        }
                        retval.tree = root_0;
                    }
                    break;
                case 3:
                    // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:293:9: proc_call
                    {
                        pushFollow(FOLLOW_proc_call_in_value_call2606);
                        proc_call193 = proc_call();
                        state._fsp--;
                        stream_proc_call.add(proc_call193.getTree());
                        // AST REWRITE
                        // elements: proc_call
                        // token labels:
                        // rule labels: retval
                        // token list labels:
                        // rule list labels:
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", retval != null ? retval.tree : null);
                        root_0 = (CommonTree) adaptor.nil();
                        // 293:20: -> ^( VALUE_CALL proc_call )
                        {
                            // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:293:23: ^( VALUE_CALL proc_call )
                            {
                                CommonTree root_1 = (CommonTree) adaptor.nil();
                                root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(VALUE_CALL, "VALUE_CALL"), root_1);
                                adaptor.addChild(root_1, stream_proc_call.nextTree());
                                adaptor.addChild(root_0, root_1);
                            }
                        }
                        retval.tree = root_0;
                    }
                    break;
            }
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
