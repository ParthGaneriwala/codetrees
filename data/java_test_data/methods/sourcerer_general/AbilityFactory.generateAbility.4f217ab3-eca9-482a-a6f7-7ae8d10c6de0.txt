// PRECONDITION: IF THE ABILITY REQUIRES A UNIT, YOU BETTER SEND
// A UNIT. IF THE ABILITY REQUIRES A BASE, SEND A BASE. OTHERWISE
public static Ability generateAbility(ActionType at, Entity e, int startLevel) {
    try {
        switch(at) {
            case PICKUPITEM:
                PickUpItem pki = new PickUpItem();
                pki.registerOwner((Unit) e);
                return pki;
            case DROPITEM:
                DropItem di = new DropItem();
                di.registerOwner((Unit) e);
                return di;
            case USEITEM:
                UseItem ui = new UseItem();
                ui.registerOwner((Unit) e);
                return ui;
            case SNEAK:
                Sneak s = new Sneak(startLevel, 2);
                s.registerOwner((Unit) e);
                return s;
            case BUILDDORM:
                BuildDorm bd = new BuildDorm();
                bd.registerOwner((BuilderUnit) e);
                return bd;
            case BUILDAPARTMENT:
                BuildApartment ba = new BuildApartment();
                ba.registerOwner((BuilderUnit) e);
                return ba;
            case UNITDOESNOTHING:
                UnitDoesNothing udn = new UnitDoesNothing();
                udn.registerOwner((Unit) e);
                return udn;
            case BUILDMELEE:
                BuildMelee bm = new BuildMelee();
                bm.registerOwner((Base) e);
                return bm;
            case BUILDRANGED:
                BuildRanged br = new BuildRanged();
                br.registerOwner((Base) e);
                return br;
            case BUILDGOD:
                BuildGod bg = new BuildGod();
                bg.registerOwner((Base) e);
                return bg;
            default:
                return null;
        }
    } catch (Exception ex) {
        System.out.println("AbilityFactory: somebody done f'd up.");
    }
    return null;
}
