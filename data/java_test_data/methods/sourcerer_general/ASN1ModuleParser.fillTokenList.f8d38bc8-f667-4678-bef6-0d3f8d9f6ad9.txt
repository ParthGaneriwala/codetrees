private void fillTokenList() throws IOException {
    if (mReader != null) {
        String line = null;
        while (mTokens.size() < 1000 && (line = mReader.readLine()) != null) {
            line = stripComments(line).trim();
            mLineNum++;
            if (line.length() > 0) {
                String[] pieces = line.split("\\s+");
                for (String piece : pieces) {
                    mTokens.addLast(new Token(piece, mLineNum));
                }
            }
        }
        if (null == line) {
            mReader.close();
            mReader = null;
        }
        // Split out any commas or brackets 'stuck' to other content.
        for (int i = 0; i < mTokens.size(); i++) {
            Token token = mTokens.get(i);
            if (token.endsWith("::=") && token.length() > 3) {
                token.setValue(token.toString().substring(0, token.length() - 3));
                Token newToken = new Token("::=", token.getLineNum());
                mTokens.add(i + 1, newToken);
            }
            if (token.endsWith(",") && token.length() > 1) {
                token.setValue(token.toString().substring(0, token.length() - 1));
                Token newToken = new Token(",", token.getLineNum());
                mTokens.add(i + 1, newToken);
            }
            while (token.startsWith("}") && token.length() > 1) {
                Token newToken = new Token("}", token.getLineNum());
                mTokens.add(i, newToken);
                token.setValue(token.toString().substring(1, token.length()));
            }
            while (token.endsWith("}") && token.length() > 1) {
                token.setValue(token.toString().substring(0, token.length() - 1));
                Token newToken = new Token("}", token.getLineNum());
                mTokens.add(i + 1, newToken);
            }
        }
    }
}
