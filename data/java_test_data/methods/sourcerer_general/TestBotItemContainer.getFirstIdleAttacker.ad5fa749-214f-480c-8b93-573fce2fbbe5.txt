@Test
@DirtiesContext
public void getFirstIdleAttacker() throws Exception {
    configureMinimalGame();
    UserState userState = userService.getUserState(new DbBotConfig());
    Base base = baseService.createBotBase(userState, "Test Bot");
    SyncBaseItem defender1 = createSyncBaseItem(TEST_ATTACK_ITEM_ID, new Index(1000, 1000), new Id(1, Id.NO_ID, 0));
    SyncBaseItem defender2 = createSyncBaseItem(TEST_ATTACK_ITEM_ID, new Index(1000, 1200), new Id(2, Id.NO_ID, 0));
    SyncBaseItem defender3 = createSyncBaseItem(TEST_ATTACK_ITEM_ID, new Index(1000, 1400), new Id(3, Id.NO_ID, 0));
    SyncBaseItem enemy1 = createSyncBaseItem(TEST_ATTACK_ITEM_ID, new Index(1500, 1000), new Id(4, Id.NO_ID, 0));
    BaseService baseService = EasyMock.createStrictMock(BaseService.class);
    EasyMock.expect(baseService.getBase(userState)).andReturn(base).times(3);
    CollisionService mockCollisionService = EasyMock.createNiceMock(CollisionService.class);
    ItemService mockItemService = EasyMock.createStrictMock(ItemService.class);
    EasyMock.expect(mockItemService.getItemType(itemService.getDbBaseItemType(TEST_ATTACK_ITEM_ID))).andReturn(itemService.getItemType(TEST_ATTACK_ITEM_ID));
    EasyMock.expect(mockItemService.createSyncObject(itemService.getItemType(TEST_ATTACK_ITEM_ID), null, null, base.getSimpleBase(), 0)).andReturn(defender1);
    EasyMock.expect(mockItemService.getItemType(itemService.getDbBaseItemType(TEST_ATTACK_ITEM_ID))).andReturn(itemService.getItemType(TEST_ATTACK_ITEM_ID));
    EasyMock.expect(mockItemService.createSyncObject(itemService.getItemType(TEST_ATTACK_ITEM_ID), null, null, base.getSimpleBase(), 0)).andReturn(defender2);
    EasyMock.expect(mockItemService.getItemType(itemService.getDbBaseItemType(TEST_ATTACK_ITEM_ID))).andReturn(itemService.getItemType(TEST_ATTACK_ITEM_ID));
    EasyMock.expect(mockItemService.createSyncObject(itemService.getItemType(TEST_ATTACK_ITEM_ID), null, null, base.getSimpleBase(), 0)).andReturn(defender3);
    Collection<DbBotItemConfig> dbBotItemConfigs = new ArrayList<DbBotItemConfig>();
    DbBotItemConfig attackerConfig = new DbBotItemConfig();
    attackerConfig.setCount(3);
    attackerConfig.setCreateDirectly(true);
    attackerConfig.setBaseItemType(itemService.getDbBaseItemType(TEST_ATTACK_ITEM_ID));
    dbBotItemConfigs.add(attackerConfig);
    BotItemContainer botItemContainer = (BotItemContainer) applicationContext.getBean("botItemContainer");
    botItemContainer.init(dbBotItemConfigs);
    setPrivateField(BotItemContainer.class, botItemContainer, "itemService", mockItemService);
    setPrivateField(BotItemContainer.class, botItemContainer, "collisionService", mockCollisionService);
    setPrivateField(BotItemContainer.class, botItemContainer, "baseService", baseService);
    EasyMock.replay(baseService);
    EasyMock.replay(mockCollisionService);
    EasyMock.replay(mockItemService);
    Assert.assertFalse(botItemContainer.isFulfilled(userState));
    botItemContainer.buildup(base.getSimpleBase(), userState);
    base.addItem(defender1);
    base.addItem(defender2);
    base.addItem(defender3);
    Assert.assertTrue(botItemContainer.isFulfilled(userState));
    BotSyncBaseItem botItem1 = botItemContainer.getFirstIdleAttacker(enemy1);
    Assert.assertEquals(defender1, botItem1.getSyncBaseItem());
    botItem1 = botItemContainer.getFirstIdleAttacker(enemy1);
    Assert.assertEquals(defender1, botItem1.getSyncBaseItem());
    setPrivateField(BotSyncBaseItem.class, botItem1, "idle", false);
    BotSyncBaseItem botItem2 = botItemContainer.getFirstIdleAttacker(enemy1);
    Assert.assertEquals(defender2, botItem2.getSyncBaseItem());
    setPrivateField(BotSyncBaseItem.class, botItem2, "idle", false);
    BotSyncBaseItem botItem3 = botItemContainer.getFirstIdleAttacker(enemy1);
    Assert.assertEquals(defender3, botItem3.getSyncBaseItem());
    setPrivateField(BotSyncBaseItem.class, botItem3, "idle", false);
    Assert.assertNull(botItemContainer.getFirstIdleAttacker(enemy1));
    EasyMock.verify(baseService);
    EasyMock.verify(mockItemService);
}
