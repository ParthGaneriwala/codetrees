private void verifyRealGame1() {
    beginHttpSession();
    beginHttpRequestAndOpenSessionInViewFilter();
    List<SessionOverviewDto> sessionOverviewDtos = userTrackingService.getSessionOverviewDtos(UserTrackingFilter.newDefaultFilter());
    Assert.assertEquals(1, sessionOverviewDtos.size());
    SessionOverviewDto sessionOverviewDto = sessionOverviewDtos.get(0);
    SessionDetailDto sessionDetailDto = userTrackingService.getSessionDetailDto(sessionOverviewDto.getSessionId());
    // Life cycle
    List<LifecycleTrackingInfo> lifecycleTrackingInfos = sessionDetailDto.getLifecycleTrackingInfos();
    Assert.assertEquals(3, lifecycleTrackingInfos.size());
    // Start ups
    List<DbStartupTask> dbStartupTasks = lifecycleTrackingInfos.get(2).getGameStartups();
    Assert.assertEquals(3, dbStartupTasks.size());
    Assert.assertEquals(ColdRealGameStartupTaskEnum.LOAD_JAVA_SCRIPT.getStartupTaskEnumHtmlHelper().getNiceText(), dbStartupTasks.get(0).getTask());
    Assert.assertEquals(ColdRealGameStartupTaskEnum.LOAD_MAP.getStartupTaskEnumHtmlHelper().getNiceText(), dbStartupTasks.get(1).getTask());
    Assert.assertEquals(ColdRealGameStartupTaskEnum.LOAD_UNITS.getStartupTaskEnumHtmlHelper().getNiceText(), dbStartupTasks.get(2).getTask());
    // Real Game
    RealGameTrackingInfo realGameTrackingInfo = userTrackingService.getGameTracking(lifecycleTrackingInfos.get(2));
    List<UserCommandHistoryElement> userCommandHistoryElements = realGameTrackingInfo.getUserCommandHistoryElements();
    System.out.println("----------History----------");
    for (UserCommandHistoryElement userCommandHistoryElement : userCommandHistoryElements) {
        System.out.println(userCommandHistoryElement.getTimeStamp() + "|" + userCommandHistoryElement.getInfo1() + "|" + userCommandHistoryElement.getInfo2());
    }
    System.out.println("----------History----------");
    int offset = 0;
    if (userCommandHistoryElements.size() == 4) {
        offset = 0;
    } else if (userCommandHistoryElements.size() == 5) {
        offset = 1;
    } else {
        Assert.fail("4 or 5 expected. Received " + userCommandHistoryElements.size() + ". Depend if the create base is captured or not 'Item created: TestStartBuilderItem'");
    }
    Assert.assertEquals(4, userCommandHistoryElements.size());
    Assert.assertEquals(BuilderCommand.class.getName(), userCommandHistoryElements.get(offset).getInfo1());
    Assert.assertEquals("Item created: TestFactoryItem", userCommandHistoryElements.get(1 + offset).getInfo1());
    Assert.assertEquals(FactoryCommand.class.getName(), userCommandHistoryElements.get(2 + offset).getInfo1());
    Assert.assertEquals("Item created: TestAttackItem", userCommandHistoryElements.get(3 + offset).getInfo1());
    endHttpRequestAndOpenSessionInViewFilter();
    endHttpSession();
}
