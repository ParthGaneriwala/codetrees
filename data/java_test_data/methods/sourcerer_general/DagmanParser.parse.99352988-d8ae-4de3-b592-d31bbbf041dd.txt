public void parse() {
    FileReader fin;
    Scanner src;
    String key, value;
    try {
        fin = new FileReader(file);
        src = new Scanner(fin);
        while (src.hasNext()) {
            value = src.nextLine();
            if (value.contains("#")) {
            // Ignore comments
            } else if (value.toLowerCase().contains("job")) {
                // Create Node
                String[] tokens = value.split(" ");
                String name, file;
                name = null;
                file = null;
                for (int i = 0; i < tokens.length; i++) {
                    // pull tokens for name and file
                    if (!tokens[i].toLowerCase().equals("job") && !tokens[i].toLowerCase().endsWith(".condor") && !tokens[i].equals("")) {
                        name = tokens[i];
                    // System.out.println("name: " + name);
                    } else if (!tokens[i].toLowerCase().equals("job") && tokens[i].toLowerCase().endsWith(".condor") && !tokens[i].equals("")) {
                        file = tokens[i];
                    // System.out.println("file: " + file);
                    }
                }
                if (name == null || file == null) {
                    // TODO better error notification for parsing error
                    System.out.println("Error Parsing Dagman");
                // Tab at end of dag line breaks this
                // System.out.println(value);
                // System.out.println(name);
                // System.out.println(file);
                } else {
                    nodeList.add(new Node(name, new File(file)));
                }
            } else if (value.toLowerCase().contains("parent")) {
                // Add Children
                String[] tokens = value.split(" ");
                ArrayList<String> children = new ArrayList<String>();
                String name = null;
                Boolean foundParent = false;
                // First hit should be name of node, successive hits are children, PARENT A CHILD B C
                for (int i = 0; i < tokens.length; i++) {
                    // pull tokens for name and file
                    if (!tokens[i].toLowerCase().equals("parent") && !tokens[i].toLowerCase().equals("child") && !tokens[i].equals("")) {
                        if (!foundParent) {
                            name = tokens[i];
                            foundParent = true;
                        } else {
                            children.add(tokens[i]);
                        }
                    }
                }
                // add children to node
                for (Iterator<Node> iter = nodeList.iterator(); iter.hasNext(); ) {
                    Node node = iter.next();
                    if (node.getName().equals(name)) {
                        // can remove finished nodes from list
                        node.addChildren(children);
                        break;
                    }
                }
            }
        }
    } catch (Exception e) {
        e.printStackTrace();
    }
}
