public void add(Node n, Triple t, CompletionFlag complete) throws CannotReifyException {
    ReificationStatementMask same = new ReificationStatementMask();
    ReificationStatementMask diff = new ReificationStatementMask();
    ReificationCache rs = m_reifCache.load(n, t, same, diff);
    if (rs == null) {
        m_reif.storeReifStmt(n, t, my_GID);
    } else {
        /* node already reifies something. is that a subset of triple t? */
        if (diff.hasNada()) {
            boolean didUpdate = false;
            /* add whatever is missing to reify t */
            if (!same.hasSubj()) {
                Triple st = Triple.create(n, RDF.Nodes.subject, t.getSubject());
                m_reif.updateFrag(n, st, new ReificationStatementMask(st), my_GID);
                didUpdate = true;
            }
            if (!same.hasPred()) {
                Triple pt = Triple.create(n, RDF.Nodes.predicate, t.getPredicate());
                m_reif.updateFrag(n, pt, new ReificationStatementMask(pt), my_GID);
                didUpdate = true;
            }
            if (!same.hasObj()) {
                Triple ot = Triple.create(n, RDF.Nodes.object, t.getObject());
                m_reif.updateFrag(n, ot, new ReificationStatementMask(ot), my_GID);
                didUpdate = true;
            }
            if (!rs.mask.hasType()) {
                Triple tt = Triple.create(n, RDF.Nodes.type, RDF.Nodes.Statement);
                m_reif.updateFrag(n, tt, new ReificationStatementMask(tt), my_GID);
                didUpdate = true;
            }
            if (didUpdate)
                fragCompact(n);
            m_reifCache.flushAll();
        } else {
            /* node reifies something that is not a subset of triple t */
            if (rs.mask.isStmt())
                throw new AlreadyReifiedException(n);
            else
                throw new CannotReifyException(n);
        }
    }
    complete.setDone();
}
