public final void updateEvents() {
    mouseover = false;
    if (isVisible && (isMousePressed == _myControlWindow.mouselock)) {
        if (isMousePressed && ControlP5.keyHandler.isAltDown && isMoveable) {
            if (!ControlP5.isMoveable) {
                positionBuffer.x += _myControlWindow.mouseX - _myControlWindow.pmouseX;
                positionBuffer.y += _myControlWindow.mouseY - _myControlWindow.pmouseY;
                if (ControlP5.keyHandler.isShiftDown) {
                    position.x = ((int) (positionBuffer.x) / 10) * 10;
                    position.y = ((int) (positionBuffer.y) / 10) * 10;
                } else {
                    position.set(positionBuffer);
                }
            }
        } else {
            if (!isLock) {
                if (isInside) {
                    mouseover = true;
                    _myControlWindow.setMouseOverController(this);
                }
                if (inside()) {
                    if (!isInside) {
                        setIsInside(true);
                        onEnter();
                        controlP5.getTooltip().activate(this);
                        controlP5.controlbroadcaster().invokeAction(new CallbackEvent(this, ControlP5.ACTION_ENTER));
                    }
                } else {
                    if (isInside && !isMousePressed) {
                        onLeave();
                        controlP5.getTooltip().deactivate(1);
                        setIsInside(false);
                        controlP5.controlbroadcaster().invokeAction(new CallbackEvent(this, ControlP5.ACTION_LEAVE));
                    }
                }
            }
        }
    }
    _myControlWindow._myPicking.update(this);
    // works for int and float.
    if (listen) {
        if (_myControllerPlugList.size() >= 0) {
            ControllerPlug cp = _myControllerPlugList.get(0);
            if (cp.getField() != null) {
                Class<?> c = cp.object().getClass();
                try {
                    Field field = c.getDeclaredField(cp.name());
                    field.setAccessible(true);
                    if (field.getType().isAssignableFrom(Float.TYPE)) {
                        float f = ((Float) (field.get(cp.object()))).floatValue();
                        setValue(f);
                    } else if (field.getType().isAssignableFrom(Integer.TYPE)) {
                        int i = ((Integer) (field.get(cp.object()))).intValue();
                        setValue(i);
                    }
                } catch (Exception e) {
                    ControlP5.logger().warning(e.toString());
                }
            }
        }
    }
}
