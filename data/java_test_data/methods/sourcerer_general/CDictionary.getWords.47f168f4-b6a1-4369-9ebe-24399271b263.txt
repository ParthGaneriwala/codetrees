public static List<String> getWords(String beginString, int nbOfWord) {
    // ====================================================================================
    // récupération des mots du dictionnaire
    // ====================================================================================
    List<CDictionaryWord> dictionaryWordList = new ArrayList<CDictionaryWord>(nbOfWord);
    CDictionaryLevel currentLevel = dictionaryGlobal;
    CDictionaryLevel currentLevelTemp = null;
    boolean rienTrouve = false;
    // on trouve le bon level
    for (int i = 0; i < beginString.length(); ++i) {
        currentLevelTemp = currentLevel.getDictionaryLevel(beginString.charAt(i));
        if (currentLevelTemp == null) {
            rienTrouve = true;
            break;
        }
        currentLevel = currentLevelTemp;
    }
    List<String> shortListDico = new ArrayList<String>();
    // si la requete donne bien quelque chose
    if (!rienTrouve) {
        // je suis au bon niveau, donc je prend les mots du niveau
        // plus ceux des niveaux du dessous
        dictionaryWordList = currentLevel.getDictionaryWordOrededList(nbOfWord);
        // on met en tableau de string
        for (CDictionaryWord dictionaryWord : dictionaryWordList) {
            shortListDico.add(dictionaryWord.getWord());
        }
    } else {
        // si le currentLevel n'est pas null
        if (currentLevel != null) {
            // on cherche dans le currentLevel
            dictionaryWordList = currentLevel.getDictionaryWordOrededList(nbOfWord);
            for (CDictionaryWord dictionaryWord : dictionaryWordList) {
                if (dictionaryWord.getWord().length() >= beginString.length()) {
                    // si les premières lettres sont les mêmes
                    if (dictionaryWord.getWord().substring(0, beginString.length()).equals(beginString)) {
                        // on met en tableau de string
                        shortListDico.add(dictionaryWord.getWord());
                    }
                }
            }
        }
    }
    // ====================================================================================
    // récupération des mots de l'utilisateur
    // ====================================================================================
    dictionaryWordList = new ArrayList<CDictionaryWord>(nbOfWord);
    currentLevel = dictionaryUser;
    rienTrouve = false;
    // on trouve le bon level
    for (int i = 0; i < beginString.length(); ++i) {
        currentLevelTemp = currentLevel.getDictionaryLevel(beginString.charAt(i));
        if (currentLevelTemp == null) {
            rienTrouve = true;
            break;
        }
        currentLevel = currentLevelTemp;
    }
    List<String> shortListUser = new ArrayList<String>();
    // si la requete donne bien quelque chose
    if (!rienTrouve) {
        // je suis au bon niveau, donc je prend les mots du niveau
        // plus ceux des niveaux du dessous
        dictionaryWordList = currentLevel.getDictionaryWordOrededList(nbOfWord);
        // on met en tableau de string
        for (CDictionaryWord dictionaryWord : dictionaryWordList) {
            shortListUser.add(dictionaryWord.getWord());
        }
    }
    // ====================================================================================
    // Fusion des deux listes en mettant ceux de l'utilisateur en premier
    // ====================================================================================
    List<String> finalList = new ArrayList<String>();
    // prefered word est actif
    if (CSettings.getPreferedWords().isActive()) {
        // celle de l'utilisteur en premier
        for (String word : shortListUser) {
            finalList.add(word);
        }
    }
    // Puis celle du dictionnaire
    for (String word : shortListDico) {
        // Si le mot n'y est pas déjà
        if (!finalList.contains(word)) {
            finalList.add(word);
        }
    }
    int index = 0;
    if (nbOfWord > finalList.size()) {
        index = finalList.size();
    } else {
        index = nbOfWord;
    }
    finalList = finalList.subList(0, index);
    return finalList;
}
