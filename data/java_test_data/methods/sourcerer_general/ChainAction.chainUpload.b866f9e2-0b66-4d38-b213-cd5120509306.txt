public ActionForward chainUpload(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
    if (log.isDebugEnabled()) {
        log.debug("Entering 'import' method");
    }
    ActionMessages errors = form.validate(mapping, request);
    ActionMessages messages = new ActionMessages();
    ChainForm chainform = (ChainForm) form;
    FormFile formfile = chainform.getFile();
    String chainname = null;
    File file = null;
    try {
        // 把文件读入
        InputStream stream = formfile.getInputStream();
        String filepath = "c:\\" + formfile.getFileName();
        file = new File(filepath);
        file.createNewFile();
        // 建立一个上传文件的输出流
        OutputStream bos = new FileOutputStream(file);
        int bytesRead = 0;
        byte[] buffer = new byte[8192];
        while ((bytesRead = stream.read(buffer, 0, 8192)) != -1) {
            // 将文件写入服务器
            bos.write(buffer, 0, bytesRead);
        }
        bos.close();
        stream.close();
    } catch (Exception e) {
        log.warn(e.getMessage());
        errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("errors.chain.upload", e.getMessage()));
        saveErrors(request, errors);
        updateFormBean(mapping, request, form);
        return mapping.findForward("list");
    }
    try {
        SAXReader sax = new SAXReader();
        Document doc = sax.read(file);
        Element rootEles = doc.getRootElement();
        Iterator eleIte = rootEles.elementIterator();
        while (eleIte.hasNext()) {
            Element rootEle = (Element) eleIte.next();
            ChainManager mgr = (ChainManager) getBean("chainManager");
            ChainFlowManager flowmgr = (ChainFlowManager) getBean("chainFlowManager");
            TagManager tagmgr = (TagManager) getBean("tagManager");
            Chain chain = new Chain();
            chainname = rootEle.element("name").getText();
            while (true) {
                Chain c = mgr.getChainByName(chainname);
                if (c == null) {
                    break;
                }
                chainname = chainname + "_import";
            }
            chain.setName(chainname);
            chain.setDescription(rootEle.element("description").getText());
            chain.initAudit(this.getLoginUser());
            mgr.saveChain(chain);
            List flows = rootEle.element("flows").elements("flow");
            Iterator flowsIte = flows.iterator();
            while (flowsIte.hasNext()) {
                Element flowEle = (Element) flowsIte.next();
                ChainFlow flow = new ChainFlow();
                flow.setChainId(chain.getChainId());
                flow.setFlowCode(this.fileToObj(flowEle, "flowCode"));
                flow.setFlowName(this.fileToObj(flowEle, "flowName"));
                flow.setFlowDesc(this.fileToObj(flowEle, "flowDesc"));
                flow.setFlowType(this.fileToObj(flowEle, "flowType"));
                flow.setNextFlowCode(this.fileToObj(flowEle, "nextFlowCode"));
                flow.setPosLeft(Integer.parseInt(this.fileToObj(flowEle, "posLeft")));
                flow.setPosTop(Integer.parseInt(this.fileToObj(flowEle, "posTop")));
                flow.setWidth(Integer.parseInt(this.fileToObj(flowEle, "width")));
                flow.setHeight(Integer.parseInt(this.fileToObj(flowEle, "height")));
                flow.setParseEpcYn(this.fileToObj(flowEle, "parseEpcYn"));
                flow.setEpcType(this.fileToObj(flowEle, "epcType"));
                flow.setSkipYn(this.fileToObj(flowEle, "skipYn"));
                flow.setRepeattimes(Integer.parseInt(this.fileToObj(flowEle, "repeattimes")));
                flow.setOnError(Integer.parseInt(this.fileToObj(flowEle, "onError")));
                flow.setStyle(Integer.parseInt(this.fileToObj(flowEle, "style")));
                String tagid = this.fileToObj(flowEle, "tag");
                if (tagid == "") {
                    flow.setTag(null);
                } else {
                    Tag tag = tagmgr.getTag(tagid);
                    flow.setTag(tag);
                }
                flow.setAttr1(this.fileToObj(flowEle, "attr1"));
                flow.setAttr2(this.fileToObj(flowEle, "attr2"));
                flow.setAttr3(this.fileToObj(flowEle, "attr3"));
                flow.setAttr4(this.fileToObj(flowEle, "attr4"));
                flow.setAttr5(this.fileToObj(flowEle, "attr5"));
                flow.setAttr6(this.fileToObj(flowEle, "attr6"));
                flow.setAttr7(this.fileToObj(flowEle, "attr7"));
                flow.setAttr8(this.fileToObj(flowEle, "attr8"));
                flow.setAttr9(this.fileToObj(flowEle, "attr9"));
                List scriptsEle = flowEle.element("scripts").elements();
                if (scriptsEle.size() != 0) {
                    Iterator scriptsIte = scriptsEle.iterator();
                    List<String> scripts = new ArrayList<String>();
                    ;
                    while (scriptsIte.hasNext()) {
                        Element script = (Element) scriptsIte.next();
                        String scripttext = script.getText();
                        scripts.add(scripttext);
                    }
                    flow.setScripts(scripts);
                } else {
                    flow.setScripts(null);
                }
                flow.initAudit(this.getLoginUser());
                flowmgr.saveChainFlow(flow);
            }
            messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("chain.imported", chainname));
        }
    } catch (Exception e) {
        log.warn(e.getMessage());
        errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("errors.chain.import", e.getMessage()));
        saveErrors(request, errors);
        updateFormBean(mapping, request, form);
        return mapping.findForward("list");
    }
    file.delete();
    saveMessages(request.getSession(), messages);
    return mapping.findForward("list");
}
