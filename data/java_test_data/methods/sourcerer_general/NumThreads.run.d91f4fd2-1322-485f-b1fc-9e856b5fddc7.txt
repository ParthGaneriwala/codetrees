public void run() {
    boolean whichOne = false;
    try {
        barrier.await();
        for (int i = 1; i < NumThreads.repeat; i++) {
            Random r1 = new Random();
            Random r2 = new Random();
            Random r3 = new Random();
            Random r4 = new Random();
            Random r5 = new Random();
            Math.abs(r1.nextGaussian());
            Math.abs(r2.nextGaussian());
            Math.abs(r3.nextGaussian());
            Math.abs(r4.nextGaussian());
            Math.abs(r5.nextGaussian());
            Math.abs(r1.nextGaussian());
            Math.asin(r1.nextDouble());
            Math.asin(r2.nextDouble());
            Math.asin(r3.nextDouble());
            Math.asin(r4.nextDouble());
            Math.asin(r5.nextDouble());
            Math.ceil(r1.nextDouble());
            Math.ceil(r2.nextDouble());
            Math.ceil(r3.nextDouble());
            Math.ceil(r4.nextDouble());
            Math.ceil(r5.nextDouble());
            Math.cos(r1.nextGaussian());
            Math.cos(r2.nextGaussian());
            Math.cos(r3.nextGaussian());
            Math.cos(r4.nextGaussian());
            Math.cos(r5.nextGaussian());
        }
        int l = ++cont;
        if (l % NumThreads.multiple == 0 || l + 1 == number) {
            NumThreads.print((new StringBuffer().append(l + 1).append(NumThreads.bundle.getString("success"))).toString());
        }
    } catch (Exception e) {
        e.printStackTrace();
    } catch (OutOfMemoryError oome) {
        oome.printStackTrace();
    }
}
