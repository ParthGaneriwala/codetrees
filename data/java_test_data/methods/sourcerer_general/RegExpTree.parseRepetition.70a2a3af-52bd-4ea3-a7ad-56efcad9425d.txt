private RegExpTree parseRepetition(RegExpTree body) {
    if (pos == limit) {
        return body;
    }
    int min, max;
    switch(pattern.charAt(pos)) {
        case '+':
            ++pos;
            min = 1;
            max = Integer.MAX_VALUE;
            break;
        case '*':
            ++pos;
            min = 0;
            max = Integer.MAX_VALUE;
            break;
        case '?':
            ++pos;
            min = 0;
            max = 1;
            break;
        case '{':
            ++pos;
            int start = pos;
            int end = pattern.indexOf('}', start);
            if (end < 0) {
                pos = start - 1;
                return body;
            }
            String counts = pattern.substring(start, end);
            pos = end + 1;
            int comma = counts.indexOf(',');
            try {
                min = Integer.parseInt(comma >= 0 ? counts.substring(0, comma) : counts);
                max = comma >= 0 ? comma + 1 != counts.length() ? Integer.parseInt(counts.substring(comma + 1)) : Integer.MAX_VALUE : min;
            } catch (NumberFormatException ex) {
                min = max = -1;
            }
            if (min < 0 || min > max) {
                // Treat the open curly bracket literally.
                pos = start - 1;
                return body;
            }
            break;
        default:
            return body;
    }
    boolean greedy = true;
    if (pos < limit && pattern.charAt(pos) == '?') {
        greedy = false;
        ++pos;
    }
    return new Repetition(body, min, max, greedy);
}
