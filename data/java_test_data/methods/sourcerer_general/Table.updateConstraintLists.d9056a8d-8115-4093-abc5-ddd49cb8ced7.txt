void updateConstraintLists() {
    int fkCount = 0;
    int mainCount = 0;
    int checkCount = 0;
    hasReferentialAction = false;
    for (int i = 0; i < constraintList.length; i++) {
        switch(constraintList[i].getConstraintType()) {
            case SchemaObject.ConstraintTypes.FOREIGN_KEY:
                fkCount++;
                break;
            case SchemaObject.ConstraintTypes.MAIN:
                mainCount++;
                break;
            case SchemaObject.ConstraintTypes.CHECK:
                if (constraintList[i].isNotNull()) {
                    break;
                }
                checkCount++;
                break;
        }
    }
    fkConstraints = fkCount == 0 ? Constraint.emptyArray : new Constraint[fkCount];
    fkCount = 0;
    fkMainConstraints = mainCount == 0 ? Constraint.emptyArray : new Constraint[mainCount];
    mainCount = 0;
    checkConstraints = checkCount == 0 ? Constraint.emptyArray : new Constraint[checkCount];
    checkCount = 0;
    colRefFK = new boolean[columnCount];
    colMainFK = new boolean[columnCount];
    for (int i = 0; i < constraintList.length; i++) {
        switch(constraintList[i].getConstraintType()) {
            case SchemaObject.ConstraintTypes.FOREIGN_KEY:
                fkConstraints[fkCount] = constraintList[i];
                ArrayUtil.intIndexesToBooleanArray(constraintList[i].getRefColumns(), colRefFK);
                fkCount++;
                break;
            case SchemaObject.ConstraintTypes.MAIN:
                fkMainConstraints[mainCount] = constraintList[i];
                ArrayUtil.intIndexesToBooleanArray(constraintList[i].getMainColumns(), colMainFK);
                if (constraintList[i].hasTriggeredAction()) {
                    hasReferentialAction = true;
                }
                mainCount++;
                break;
            case SchemaObject.ConstraintTypes.CHECK:
                if (constraintList[i].isNotNull()) {
                    break;
                }
                checkConstraints[checkCount] = constraintList[i];
                checkCount++;
                break;
        }
    }
}
