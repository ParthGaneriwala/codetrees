private void readSectionHeaders() throws IOException {
    short numSections = peHeader.getNumberOfSections();
    sectionHeaders = new ArrayList<SectionHeader>();
    short i;
    int j;
    SectionHeader secHeader;
    ArrayList<Byte> shname = null;
    int virtsize = 0, virtaddr = 0, sizeraw = 0, pointerraw = 0, pointerreloc = 0, pointerline = 0;
    short numberreloc = 0, numberline = 0;
    int charact = 0;
    for (i = 0; i < numSections; i++) {
        try {
            shname = new ArrayList<Byte>();
            for (j = 0; j < CLELConstants.SECTIONHEADERNAME_SIZE; j++) shname.add(new Byte(inFile.readByte()));
            virtsize = Tools.LittleToBigEndian(inFile.readInt());
            virtaddr = Tools.LittleToBigEndian(inFile.readInt());
            sizeraw = Tools.LittleToBigEndian(inFile.readInt());
            pointerraw = Tools.LittleToBigEndian(inFile.readInt());
            pointerreloc = Tools.LittleToBigEndian(inFile.readInt());
            pointerline = Tools.LittleToBigEndian(inFile.readInt());
            numberreloc = Tools.LittleToBigEndian(inFile.readShort());
            numberline = Tools.LittleToBigEndian(inFile.readShort());
            charact = Tools.LittleToBigEndian(inFile.readInt());
        } catch (IOException ioe) {
            System.out.println("Error: error reading section headers");
            throw ioe;
        }
        secHeader = new SectionHeader(shname, virtsize, virtaddr, sizeraw, pointerraw, pointerreloc, pointerline, numberreloc, numberline, charact);
        if (secHeader.getNameAsString().equals(CLELConstants.TEXTSECTION_NAME))
            RVA = secHeader.getVirtualAddress();
        sectionHeaders.add(secHeader);
    }
    Offset += (numSections * CLELConstants.SECTIONHEADER_SIZE);
}
