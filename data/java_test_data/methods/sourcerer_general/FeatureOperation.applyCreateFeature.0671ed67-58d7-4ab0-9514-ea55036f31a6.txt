private List<Operation> applyCreateFeature() throws BeanPersistenceException, InvalidOperationException, StaleDataException {
    if (featureId == null) {
        if (vote.equals(false)) {
            throw new InvalidOperationException("Invalid: vote NO to non-existed feature.");
        }
        // Get the model
        Model model = DaoUtil.getModelDao().getById(modelId, false);
        if (model == null) {
            throw new InvalidOperationException("Invalid model ID: " + modelId);
        }
        // Check if a feature with same name has already existed.
        boolean alreadyExisted = true;
        Feature featureWithSameName = DaoUtil.getFeatureDao().getByName(modelId, value);
        if (featureWithSameName == null) {
            alreadyExisted = false;
            featureWithSameName = new Feature(userid);
        }
        // -1 means no logging at this moment (see Feature.voteOrAdd for more details.)
        if (alreadyExisted) {
            featureWithSameName.voteName(value, vote, userid, modelId);
            featureWithSameName.vote(true, userid, modelId);
        } else {
            featureWithSameName.voteName(value, vote, userid);
            featureWithSameName.vote(true, userid);
            model.addFeature(featureWithSameName);
        }
        featureWithSameName = DaoUtil.getFeatureDao().save(featureWithSameName);
        DaoUtil.getModelDao().save(model);
        featureId = featureWithSameName.getId();
        if (!alreadyExisted) {
            logger.info(LogUtil.logOp(userid, LogUtil.OP_CREATE, LogUtil.featureOrAttrToStr(LogUtil.OBJ_FEATURE, modelId, featureId, "Name '" + value + "'")));
        }
        return null;
    }
    Feature feature = DaoUtil.getFeatureDao().getById(featureId, false);
    if (feature == null) {
        throw new InvalidOperationException("No feature has ID: " + featureId);
    }
    feature.vote(vote, userid, modelId);
    List<Operation> result = ImplicitVoteOperation.makeOperation(this, feature).apply();
    if (feature.getSupporterNum() <= 0) {
        DaoUtil.getFeatureDao().delete(feature);
        logger.info(LogUtil.logOp(userid, LogUtil.OP_REMOVE, LogUtil.featureOrAttrToStr(LogUtil.OBJ_FEATURE, modelId, featureId, "")));
    } else {
        DaoUtil.getFeatureDao().save(feature);
    }
    return result;
}
