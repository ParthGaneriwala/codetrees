public static int packPixels(int depth, byte[] in, byte[] out) {
    int inLen;
    int retVal;
    int mask = (1 << depth) - 1;
    // remainder of bytes in that dont perfectly fit in a byte
    int rem;
    // length of wholes bytes to output to out
    int end;
    int endIdx;
    int val;
    inLen = in.length;
    switch(depth) {
        case // 8 per byte
        1:
            // remainder
            rem = inLen % 8;
            // number of whole bytes to fill output
            end = inLen / 8;
            // number bytes used of out[]
            retVal = end + 1;
            // handle remainder
            endIdx = inLen;
            val = 0;
            switch(rem) {
                case 7:
                    val |= ((in[--endIdx] & mask) << 1);
                // no break;
                case 6:
                    val |= ((in[--endIdx] & mask) << 2);
                // no break;
                case 5:
                    val |= ((in[--endIdx] & mask) << 3);
                // no break;
                case 4:
                    val |= ((in[--endIdx] & mask) << 4);
                // no break;
                case 3:
                    val |= ((in[--endIdx] & mask) << 5);
                // no break;
                case 2:
                    val |= ((in[--endIdx] & mask) << 6);
                // no break;
                case 1:
                    val |= ((in[--endIdx] & mask) << 7);
                    out[end] = (byte) val;
                    break;
                case // ?
                0:
                    // no remainder so one less
                    --retVal;
                    break;
            }
            // handle full bytes to out[] from in[]
            endIdx = inLen - rem;
            for (int outIdx = end; --outIdx >= 0; ) {
                out[outIdx] = (byte) (((in[--endIdx] & mask)) | ((in[--endIdx] & mask) << 1) | ((in[--endIdx] & mask) << 2) | ((in[--endIdx] & mask) << 3) | ((in[--endIdx] & mask) << 4) | ((in[--endIdx] & mask) << 5) | ((in[--endIdx] & mask) << 6) | ((in[--endIdx] & mask) << 7));
            }
            return retVal;
        case // 4 per byte
        2:
            // remainder
            rem = inLen % 4;
            // number of whole bytes to fill output
            end = inLen / 4;
            // number bytes used of out[]
            retVal = end + 1;
            // handle remainder
            endIdx = inLen;
            val = 0;
            switch(rem) {
                case 3:
                    val |= ((in[--endIdx] & mask) << 2);
                // no break;
                case 2:
                    val |= ((in[--endIdx] & mask) << 4);
                // no break;
                case 1:
                    val |= ((in[--endIdx] & mask) << 6);
                    out[end] = (byte) val;
                    break;
                case // ?
                0:
                    // no remainder so one less
                    --retVal;
                    break;
            }
            // handle full bytes to out[] from in[]
            endIdx = inLen - rem;
            for (int outIdx = end; --outIdx >= 0; ) {
                out[outIdx] = (byte) (((in[--endIdx] & mask)) | ((in[--endIdx] & mask) << 2) | ((in[--endIdx] & mask) << 4) | ((in[--endIdx] & mask) << 6));
            }
            return retVal;
        case // 2 per byte
        4:
            // remainder
            rem = inLen % 2;
            // number of whole bytes to fill output
            end = inLen / 2;
            // number bytes used of out[]
            retVal = end + 1;
            // handle remainder
            endIdx = inLen;
            val = 0;
            switch(rem) {
                case 1:
                    val |= ((in[--endIdx] & mask) << 4);
                    out[end] = (byte) val;
                    break;
                case // ?
                0:
                    // no remainder so one less byte
                    --retVal;
                    break;
            }
            // handle full bytes to out[] from in[]
            endIdx = inLen - rem;
            for (int outIdx = end; --outIdx >= 0; ) {
                out[outIdx] = (byte) (((in[--endIdx] & mask)) | ((in[--endIdx] & mask) << 4));
            }
            return retVal;
        case // simple case
        8:
            System.arraycopy(in, 0, out, 0, inLen);
            return inLen;
        default:
            throw new IllegalArgumentException("depth must be 1 2 4 or 8, not " + depth);
    }
}
