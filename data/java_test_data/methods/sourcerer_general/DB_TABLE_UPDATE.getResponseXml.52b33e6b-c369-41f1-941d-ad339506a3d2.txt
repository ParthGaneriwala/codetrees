public String getResponseXml() throws Exception {
    int count = 0;
    try {
        String xml = map.get("XML")[0];
        Document doc = DocumentHelper.parseText(xml);
        Element root = doc.getRootElement();
        String tablename = root.getName();
        List<Node> records = root.selectNodes("RECORD");
        Connection conn = DBUtils.getConnection();
        PreparedStatement ps = conn.prepareStatement(getUpdateQuery(tablename));
        for (int i = 0; i < records.size(); i++) {
            Element record = (Element) records.get(i);
            for (int j = 1; j < columns.length; j++) {
                Element column = (Element) record.selectSingleNode(columns[j]);
                if (type[j - 1].equalsIgnoreCase("DATE")) {
                    if (column == null || column.getTextTrim().equalsIgnoreCase(""))
                        ps.setDate(j, new Date(CSWConstants.minimumDate));
                    else
                        ps.setDate(j, new Date(new SimpleDateFormat(CSWConstants.dateFormat).parse(column.getTextTrim()).getTime()));
                } else if (type[j - 1].equalsIgnoreCase("CHAR"))
                    if (column == null || column.getTextTrim().equalsIgnoreCase("") || column.getTextTrim().equalsIgnoreCase("false"))
                        ps.setString(j, "N");
                    else
                        ps.setString(j, "Y");
                else if (type[j - 1].equalsIgnoreCase("INTEGER")) {
                    if (column == null)
                        ps.setNull(j, Types.INTEGER);
                    else
                        ps.setInt(j, Integer.parseInt(column.getTextTrim()));
                } else if (type[j - 1].equalsIgnoreCase("CLOB")) {
                    if (column == null)
                        ps.setNull(j, Types.CLOB);
                    else
                        ps.setCharacterStream(j, new StringReader(column.getTextTrim()), column.getTextTrim().length());
                } else if (type[j - 1].equalsIgnoreCase("BLOB")) {
                    if (column == null)
                        ps.setNull(j, Types.BLOB);
                    else {
                        byte[] bytes = Base64.decodeBase64(column.getTextTrim());
                        ps.setBinaryStream(j, new ByteArrayInputStream(bytes), bytes.length);
                    }
                } else if (type[j - 1].equalsIgnoreCase("VARCHAR")) {
                    if (column == null)
                        ps.setNull(j, Types.VARCHAR);
                    else
                        ps.setString(j, column.getTextTrim());
                } else if (type[j - 1].equalsIgnoreCase("BIGINT")) {
                    if (column == null)
                        ps.setNull(j, Types.BIGINT);
                    else
                        ps.setLong(j, Long.parseLong(column.getTextTrim()));
                } else if (type[j - 1].equalsIgnoreCase("DECIMAL")) {
                    if (column == null)
                        ps.setNull(j, Types.DECIMAL);
                    else
                        ps.setBigDecimal(j, new BigDecimal(Double.parseDouble(column.getTextTrim())));
                } else if (type[j - 1].equalsIgnoreCase("DOUBLE")) {
                    if (column == null)
                        ps.setNull(j, Types.DOUBLE);
                    else
                        ps.setDouble(j, Double.parseDouble(column.getTextTrim()));
                } else if (type[j - 1].equalsIgnoreCase("REAL")) {
                    if (column == null)
                        ps.setNull(j, Types.REAL);
                    else
                        ps.setFloat(j, Float.parseFloat(column.getTextTrim()));
                } else if (type[j - 1].equalsIgnoreCase("SMALLINT")) {
                    if (column == null)
                        ps.setNull(j, Types.SMALLINT);
                    else
                        ps.setShort(j, Short.parseShort(column.getTextTrim()));
                } else if (type[j - 1].equalsIgnoreCase("TIME")) {
                    if (column == null)
                        ps.setNull(j, Types.TIME);
                    else
                        // To check..
                        ps.setString(j, column.getTextTrim());
                } else if (type[j - 1].equalsIgnoreCase("TIMESTAMP")) {
                    if (column == null)
                        ps.setNull(j, Types.TIMESTAMP);
                    else
                        // To check..
                        ps.setString(j, column.getTextTrim());
                } else {
                    if (column == null)
                        ps.setNull(j, Types.VARCHAR);
                    else
                        ps.setString(j, column.getTextTrim());
                }
            }
            // 
            ps.setInt(columns.length, Integer.parseInt(((Element) record.selectSingleNode(columns[0])).getText()));
            ps.addBatch();
        }
        int[] updates = ps.executeBatch();
        for (int i = 0; i < updates.length; i++) count += updates[i];
        ps.close();
    } catch (Exception e) {
        return "Error: " + e.getLocalizedMessage();
    }
    return "Records updated / saved = " + count;
}
