void setReusableProperties(String backgroundColor, String borderColor, String borderStyle, int borderWidth, double dWidth, double dHeight, double xD, double yD, String url) {
    // Round two edges, and define width to be their difference.
    // (rounding this way assures bars align with gridlines, etc.)
    int newX = (int) Math.round(xD);
    int newW = (int) Math.round(xD + dWidth) - newX;
    int newY = (int) Math.round(yD);
    int newH = (int) Math.round(yD + dHeight) - newY;
    int thickness = (newW < newH) ? newW : newH;
    // Don't allow borders that would exceed specified width or
    // height. So, if smaller of width, height is at least twice the
    // border width, border width is used as is, otherwise,
    // it's replaced with half the smaller of width, height:
    int newCappedBorderWidthX2 = (2 * borderWidth < thickness) ? 2 * borderWidth : thickness;
    /*
         * Note: on a GWT absolute panel, the x,y position of the widget is the
         * upper left corner of the widget's border, so x, y need no adjustment
         * to account for an internal (positive) border. Negative (external)
         * borders expand rectangle equally in all directions, so x,y need to
         * shift back to the new upper left corner. Transparent border emulation
         * sets border width to 0, and adjusts element size and position to
         * mimic border transparency (this rather odd feature is required to
         * workaround the IE6 "transparent border" bug)
         */
    if (TRANSPARENT_BORDER_COLOR == borderColor) {
        // emulation
        if (newCappedBorderWidthX2 > 0) {
            // to emulate an internal transparent border using a 0 width
            // border, we need to shift the upper left corner by the
            // amount of border, and shrink the size by twice the amount
            // of the border.
            // shift upper left
            newX += newCappedBorderWidthX2 / 2;
            // corner
            newY += newCappedBorderWidthX2 / 2;
            // shrink size
            newH -= newCappedBorderWidthX2;
            newW -= newCappedBorderWidthX2;
        }
        // else, external border is just eliminated, no adjustment
        // needed
        newCappedBorderWidthX2 = 0;
        // because DOM won't accept null
        borderColor = "transparent";
        if (backgroundColor == TRANSPARENT_BORDER_COLOR)
            backgroundColor = "transparent";
    } else if (newCappedBorderWidthX2 < 0) {
        // shift upper left corner back
        newX += newCappedBorderWidthX2 / 2;
        // to incorporate external border.
        newY += newCappedBorderWidthX2 / 2;
    } else {
        // shrink size to incorporate
        newH -= newCappedBorderWidthX2;
        // impact of internal border.
        newW -= newCappedBorderWidthX2;
    }
    if (cappedBorderWidthX2 != newCappedBorderWidthX2) {
        if (1 == (newCappedBorderWidthX2 % 2)) {
            // odd pixel 2 x borderWidth needs asymetical borders to
            // fill rect (only positive (internal) borders can have
            // half-pixel widths)
            int floorBW = newCappedBorderWidthX2 / 2;
            int ceilBW = floorBW + 1;
            // (top, right, bottom, left) == (floor, floor, ceil, ceil)
            // assures symbol is odd-pixel border-filled in all cases
            DOM.setStyleAttribute(getElement(), "borderWidth", floorBW + "px " + floorBW + "px " + ceilBW + "px " + ceilBW + "px ");
        } else {
            DOM.setStyleAttribute(getElement(), "borderWidth", Math.abs(newCappedBorderWidthX2 / 2) + "px");
        }
        cappedBorderWidthX2 = newCappedBorderWidthX2;
    }
    if (GChart.NAI == this.x) {
        // At first, use AbsolutePanel's official API (to insulate us
        // from any future AbsolutePanel changes)
        setImagePosition(this, newX, newY);
        this.x = newX;
        this.y = newY;
    } else {
        // (works, but bypasses AbsolutePanel's official API)
        if (this.x != newX) {
            DOM.setStyleAttribute(getElement(), "left", newX + "px");
            this.x = newX;
        }
        if (this.y != newY) {
            DOM.setStyleAttribute(getElement(), "top", newY + "px");
            this.y = newY;
        }
    }
    if (this.width != newW) {
        setWidth(newW + "px");
        this.width = newW;
    }
    if (this.height != newH) {
        setHeight(newH + "px");
        this.height = newH;
    }
    if (this.backgroundColor != backgroundColor) {
        DOM.setStyleAttribute(getElement(), "backgroundColor", backgroundColor);
        this.backgroundColor = backgroundColor;
    }
    if (this.borderColor != borderColor) {
        DOM.setStyleAttribute(getElement(), "borderColor", borderColor);
        this.borderColor = borderColor;
    }
    if (this.borderStyle != borderStyle) {
        DOM.setStyleAttribute(getElement(), "borderStyle", borderStyle);
        this.borderStyle = borderStyle;
    }
    if (this.url != url) {
        /*
           * WARNING: Redundant setUrls cause leaks in FF 2.0.0.16. So, be
           * particularly careful not to accidentally "double set" a URL to the
           * exact same URL (I did this with a slightly less efficient
           * initialization of my images, and this caused a huge memory leak
           * that I hope to memorialize, and lay to rest forever, here.)
           * 
           * Symptoms, in FF 2 only, are those that would occur AS IF the extra
           * setUrl increased the reference count on the (browser cached) image
           * file so that Firefox can't release either it, or any of the img
           * elements that reference it. A very big leak for GChart, since just
           * about everything in a GChart references the exact same blank gif
           * URL.
           * 
           * Such symptoms did not occur in IE7, or in FF 2 if the cache has
           * been disabled via "about:config".
           * 
           */
        setUrl(url);
        this.url = url;
    }
}
