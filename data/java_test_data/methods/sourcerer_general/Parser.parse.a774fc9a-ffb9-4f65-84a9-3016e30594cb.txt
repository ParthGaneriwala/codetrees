protected static List<Token> parse(List<String> lines) {
    LinkedList<Token> tokens = new LinkedList<Token>();
    for (String line : lines) {
        char[] chars = line.toCharArray();
        tokens.add(new Token(TokenCode.INITIAL_LINE, null, null));
        for (int i = 0; i < chars.length; i++) {
            if ("<>=".contains(Character.toString(chars[i]))) {
                if ("<>".contains(Character.toString(chars[i]))) {
                    StringBuffer buffer = new StringBuffer();
                    buffer.append(chars[i]);
                    i++;
                    if (i >= chars.length)
                        break;
                    if (chars[i] == '=')
                        buffer.append(chars[i]);
                    tokens.add(new Token(buffer.toString().charAt(0) == '>' ? TokenCode.MORE_EQUAL : TokenCode.LESS_EQUAL, buffer.toString().charAt(0) == '>' ? 1 : -1, buffer.toString()));
                } else {
                    tokens.add(new Token(TokenCode.EQUAL, 0, "="));
                }
            } else if ("+-".contains(Character.toString(chars[i]))) {
                tokens.add(new Token(TokenCode.SIGNAL, chars[i] == '+' ? 1 : -1, Character.toString(chars[i])));
            } else if (Character.isDigit(chars[i])) {
                StringBuffer buffer = new StringBuffer();
                do {
                    buffer.append(chars[i]);
                    i++;
                    if (i >= chars.length)
                        break;
                } while (Character.isDigit(chars[i]) || (chars[i] == '.') && (i < chars.length));
                if (buffer.toString().charAt(buffer.length() - 1) == '.')
                    buffer.append('0');
                tokens.add(new Token(TokenCode.NUMBER, Double.parseDouble(buffer.toString()), buffer.toString()));
                i--;
            } else if (Character.isLetter(chars[i])) {
                StringBuffer buffer = new StringBuffer();
                do {
                    buffer.append(chars[i]);
                    i++;
                    if (i >= chars.length)
                        break;
                } while (Character.isLetterOrDigit(chars[i]) && (i < chars.length));
                if (buffer.toString().toUpperCase().trim().equals("SUBJECT")) {
                    tokens.add(new Token(TokenCode.VARIABLE, "SUBJECT", "SUBJECT"));
                } else if (buffer.toString().toUpperCase().trim().equals("TO")) {
                    if (tokens.size() > 0) {
                        if ("SUBJECT".equals(tokens.getLast().getTokenString())) {
                            tokens.removeLast();
                            tokens.add(new Token(TokenCode.SUBJECT_TO, null, "SUBJECT TO"));
                        } else {
                            tokens.add(new Token(TokenCode.VARIABLE, "TO", "TO"));
                        }
                    } else {
                        tokens.add(new Token(TokenCode.VARIABLE, "TO", "TO"));
                    }
                } else if (buffer.toString().toUpperCase().trim().equals("MAX")) {
                    tokens.add(new Token(TokenCode.MAX, null, "MAX"));
                } else if (buffer.toString().toUpperCase().trim().equals("MIN")) {
                    tokens.add(new Token(TokenCode.MIN, null, "MIN"));
                } else if (buffer.toString().toUpperCase().trim().equals("END")) {
                    tokens.add(new Token(TokenCode.END, null, "END"));
                } else {
                    tokens.add(new Token(TokenCode.VARIABLE, buffer.toString().toUpperCase().trim(), buffer.toString().toUpperCase().trim()));
                }
            }
        }
    }
    return tokens;
}
