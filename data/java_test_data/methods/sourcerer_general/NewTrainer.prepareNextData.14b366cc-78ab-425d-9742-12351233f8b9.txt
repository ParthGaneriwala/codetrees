private void prepareNextData(TrainingContext ctx, TrainingContext newCtx) throws IOException {
    TrainingDataNodeReader reader = ctx.getDataReader();
    TrainingDataNodeWriter writer = newCtx.getDataWriter();
    // the position is already at 0
    // reader.reset();
    int oldNodeCount = 0;
    int newNodeCount = 0;
    for (ReadableTrainingDataNode nodeData = reader.getNext(); nodeData != null; nodeData = reader.getNext()) {
        ++oldNodeCount;
        BinaryTree<HistoryTreePayload> oldLeaf = ctx.getLeaf(nodeData.getNodeId());
        if (oldLeaf.isLeaf()) {
            // skip the node
            nodeData.skipData();
            continue;
        }
        newNodeCount += 2;
        BinaryTree<HistoryTreePayload> left = getFalseBranch(oldLeaf);
        BinaryTree<HistoryTreePayload> right = getTrueBranch(oldLeaf);
        int leftNodeId = left.getPayload().clusterid;
        int rightNodeId = right.getPayload().clusterid;
        WritableTrainingDataNode leftDataNode = writer.createNode(leftNodeId, nodeData.getNumData());
        WritableTrainingDataNode rightDataNode = writer.createNode(rightNodeId, nodeData.getNumData());
        writer.add(leftDataNode);
        writer.add(rightDataNode);
        for (int i = 0; i < nodeData.getNumData(); ++i) {
            TrainingDataUtil.splitData(nodeData.getData(i), oldLeaf.getPayload().question, rightDataNode.getData(i), leftDataNode.getData(i));
        }
    }
    reader.close();
    writer.close();
    System.err.printf("old node count: %d, new node count: %d\n", oldNodeCount, newNodeCount);
}
