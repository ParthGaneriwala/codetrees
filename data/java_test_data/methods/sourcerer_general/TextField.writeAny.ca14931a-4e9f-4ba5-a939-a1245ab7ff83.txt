private void writeAny(int keyCode) {
    if (goToNextChar || keyCode != lastPressedKey) {
        goToNextChar = true;
        lastPressedKey = keyCode;
        currentKeyStep = 0;
    } else {
        currentKeyStep++;
    }
    switch(type) {
        case TYPE_T9:
            if (currentStringBuffer.length() < maxChar || (currentStringBuffer.length() == maxChar && !goToNextChar && keyCode == lastPressedKey)) {
                chars = T9.getCharacter(keyCode);
                if (chars != null) {
                    if (currentKeyStep >= chars.length) {
                        currentKeyStep -= chars.length;
                    }
                    strAux = String.valueOf(chars[currentKeyStep]);
                    if (capsLook) {
                        strAux = strAux.toUpperCase();
                    }
                    chAux = strAux.charAt(0);
                    if (goToNextChar) {
                        currentStringBuffer.insert(caretIndex, chAux);
                        caretIndex++;
                    } else {
                        currentStringBuffer.setCharAt(caretIndex - 1, chAux);
                    }
                    currentString = currentStringBuffer.toString();
                    updateCaretPosition();
                    lastKeyTimestamp = System.currentTimeMillis();
                    goToNextChar = false;
                }
            }
            break;
        case TYPE_QWERTY:
            if (currentStringBuffer.length() < maxChar) {
                char ch = Qwerty.getCharacter(keyCode);
                if (capsLook) {
                    strAux = String.valueOf(ch);
                    strAux = strAux.toUpperCase();
                    ch = strAux.charAt(0);
                }
                currentStringBuffer.insert(caretIndex, ch);
                caretIndex++;
                currentString = currentStringBuffer.toString();
                updateCaretPosition();
                lastKeyTimestamp = System.currentTimeMillis();
                goToNextChar = false;
            }
            break;
        case TYPE_SURETYPE:
            if (currentStringBuffer.length() < maxChar || (currentStringBuffer.length() == maxChar && !goToNextChar && keyCode == lastPressedKey)) {
                chars = SureType.getCharacter(keyCode);
                if (chars != null) {
                    if (currentKeyStep >= chars.length) {
                        currentKeyStep -= chars.length;
                    }
                    strAux = String.valueOf(chars[currentKeyStep]);
                    if (capsLook) {
                        strAux = strAux.toUpperCase();
                    }
                    chAux = strAux.charAt(0);
                    if (goToNextChar) {
                        currentStringBuffer.insert(caretIndex, chAux);
                        caretIndex++;
                    } else {
                        currentStringBuffer.setCharAt(caretIndex - 1, chAux);
                    }
                    currentString = currentStringBuffer.toString();
                    updateCaretPosition();
                    lastKeyTimestamp = System.currentTimeMillis();
                    goToNextChar = false;
                }
            }
            break;
        default:
            break;
    }
}
