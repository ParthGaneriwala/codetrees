public void update(Observable o, Object arg) {
    Board target = (Board) o;
    EventInfo EI = (EventInfo) arg;
    int i, j;
    switch(EI.getType()) {
        case MOVE:
            matrix.get(EI.getMove().from.x).get(EI.getMove().from.y).setIcon(pieceToIcon(target.getPiece(EI.getMove().from)));
            matrix.get(EI.getMove().to.x).get(EI.getMove().to.y).setIcon(pieceToIcon(target.getPiece(EI.getMove().to)));
            matrix.get(EI.getMove().from.x).get(EI.getMove().from.y).change(pieceToSound(target.getPiece(EI.getMove().from)));
            matrix.get(EI.getMove().to.x).get(EI.getMove().to.y).change(pieceToSound(target.getPiece(EI.getMove().to)));
            dragLayer.deactivate();
            dragLayer.repaint();
            for (i = 0; i < 8; i++) for (j = 0; j < 8; j++) matrix.get(i).get(j).setBackground(i % 2 == j % 2 ? Color.BLACK : Color.WHITE);
            if (indicator != null)
                indicator.change(target.currentPlayer() == Piece.Color.WHITE ? Color.WHITE : Color.BLACK);
            messages.setText("");
            illegalMoves = 0;
            highlight.turnoff();
            break;
        case UNSELECT:
            matrix.get(EI.getPosition().x).get(EI.getPosition().y).setIcon(pieceToIcon(target.getPiece(EI.getPosition())));
            dragLayer.deactivate();
            dragLayer.repaint();
            for (i = 0; i < 8; i++) for (j = 0; j < 8; j++) matrix.get(i).get(j).setBackground(i % 2 == j % 2 ? Color.BLACK : Color.WHITE);
            break;
        case SELECTION:
            Position p = EI.getPosition();
            JButton button = matrix.get(p.x).get(p.y);
            JLabel dragPiece = new JLabel(button.getIcon());
            Rectangle rect = button.getBounds();
            dragPiece.setBounds(rect.x, rect.y, rect.height, rect.width);
            dragLayer.activate(dragPiece);
            dragLayer.repaint();
            button.setIcon(null);
            ArrayList<Move> moves = target.highlightMoves(p);
            for (i = 0; i < moves.size(); i++) {
                matrix.get(moves.get(i).to.x).get(moves.get(i).to.y).setBackground((moves.get(i).to.x % 2) == (moves.get(i).to.y % 2) ? new Color(91, 122, 151) : new Color(184, 207, 229));
            }
            moves = target.legalMoves(p);
            if (moves.size() == 0) {
                audio.playFile("denneBrikKanIkkeFlytte.wav", true, false, true);
            } else {
                audio.playFile(pieceToSound(target.getPiece(p)), true, false, true);
            }
            break;
        case CHECK:
            messages.setText("Skak!");
            audio.playFile("kongenErSkak.wav", true, false, true);
            break;
        case MATE:
            if (EI.getText() == null) {
                messages.setText((EI.getWinner() == Piece.Color.WHITE ? "Hvid" : "Sort") + " vinder!");
            } else {
                messages.setText(EI.getText());
            }
            if (EI.getSound() == null) {
                audio.playFile(EI.getWinner() == Piece.Color.WHITE ? "hvidVandt.wav" : "sortVandt.wav", false, false, true);
            } else {
                audio.playFile(EI.getSound(), true, false, true);
            }
            break;
        case DRAW:
            messages.setText("Uafgjort!");
            audio.playFile("spilletErSlut.wav", true, false, true);
            break;
        case SOUND:
            if (EI.getSoundWait() == true) {
                audio.playFile(EI.getSound(), false, false, true);
            } else {
                audio.playFile(EI.getSound(), true, false, true);
            }
            break;
        case ILLEGAL:
            audio.playFile("ulovligtTraek.wav", true, true, true);
            if (++illegalMoves == 1 && target.getHelpLevel() == 0) {
                highlight.turnon();
            }
            break;
    }
    frame.validate();
    frame.repaint();
}
