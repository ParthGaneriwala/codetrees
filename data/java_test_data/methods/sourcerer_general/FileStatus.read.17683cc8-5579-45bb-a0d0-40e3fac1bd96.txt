public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true) {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
            break;
        }
        switch(field.id) {
            case 1:
                if (field.type == TType.STRING) {
                    this.path = iprot.readString();
                    this.__isset.path = true;
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 2:
                if (field.type == TType.I64) {
                    this.length = iprot.readI64();
                    this.__isset.length = true;
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 3:
                if (field.type == TType.BOOL) {
                    this.isdir = iprot.readBool();
                    this.__isset.isdir = true;
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 4:
                if (field.type == TType.I16) {
                    this.block_replication = iprot.readI16();
                    this.__isset.block_replication = true;
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 5:
                if (field.type == TType.I64) {
                    this.blocksize = iprot.readI64();
                    this.__isset.blocksize = true;
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 6:
                if (field.type == TType.I64) {
                    this.modification_time = iprot.readI64();
                    this.__isset.modification_time = true;
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 7:
                if (field.type == TType.STRING) {
                    this.permission = iprot.readString();
                    this.__isset.permission = true;
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 8:
                if (field.type == TType.STRING) {
                    this.owner = iprot.readString();
                    this.__isset.owner = true;
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 9:
                if (field.type == TType.STRING) {
                    this.group = iprot.readString();
                    this.__isset.group = true;
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            default:
                TProtocolUtil.skip(iprot, field.type);
                break;
        }
        iprot.readFieldEnd();
    }
    iprot.readStructEnd();
}
