public int update(Connection db) throws SQLException {
    if (this.getId() == -1 || this.projectId == -1) {
        throw new SQLException("ID was not specified");
    }
    if (!isValid()) {
        return -1;
    }
    int resultCount = 0;
    Requirement previousState = new Requirement(db, this.getId());
    PreparedStatement pst = db.prepareStatement("UPDATE project_requirements " + "SET submittedby = ?, departmentby = ?, shortdescription = ?, description = ?, wiki_link = ?, " + " datereceived = ?, estimated_loevalue = ?, estimated_loetype = ?, actual_loevalue = ?, actual_loetype = ?, " + " startdate = ?, deadline = ?, approvedby = ?, approvaldate = ?, closedby = ?, closedate = ?, read_only = ?, " + " modifiedby = ?, modified = CURRENT_TIMESTAMP " + "WHERE requirement_id = ? " + "AND project_id = ? " + "AND modified = ? ");
    int i = 0;
    pst.setString(++i, submittedBy);
    pst.setString(++i, departmentBy);
    pst.setString(++i, shortDescription);
    pst.setString(++i, description);
    pst.setString(++i, wikiLink);
    if (dateReceived == null) {
        pst.setNull(++i, java.sql.Types.DATE);
    } else {
        pst.setTimestamp(++i, dateReceived);
    }
    DatabaseUtils.setInt(pst, ++i, estimatedLoe);
    DatabaseUtils.setInt(pst, ++i, estimatedLoeTypeId);
    DatabaseUtils.setInt(pst, ++i, actualLoe);
    DatabaseUtils.setInt(pst, ++i, actualLoeTypeId);
    DatabaseUtils.setTimestamp(pst, ++i, startDate);
    DatabaseUtils.setTimestamp(pst, ++i, deadline);
    if (previousState.getApproved() && approved) {
        DatabaseUtils.setInt(pst, ++i, previousState.getApprovedBy());
        pst.setTimestamp(++i, previousState.getApprovalDate());
    } else if (!previousState.getApproved() && approved) {
        pst.setInt(++i, approvedBy);
        if (approvalDate == null) {
            java.util.Date tmpDate = new java.util.Date();
            approvalDate = new java.sql.Timestamp(tmpDate.getTime());
            approvalDate.setNanos(0);
        }
        pst.setTimestamp(++i, approvalDate);
    } else if (!approved) {
        pst.setNull(++i, java.sql.Types.INTEGER);
        pst.setNull(++i, java.sql.Types.DATE);
    }
    if (previousState.getClosed() && closed) {
        DatabaseUtils.setInt(pst, ++i, previousState.getClosedBy());
        pst.setTimestamp(++i, previousState.getCloseDate());
    } else if (!previousState.getClosed() && closed) {
        pst.setInt(++i, closedBy);
        if (closeDate == null) {
            java.util.Date tmpDate = new java.util.Date();
            closeDate = new java.sql.Timestamp(tmpDate.getTime());
            closeDate.setNanos(0);
        }
        pst.setTimestamp(++i, closeDate);
    } else if (!closed) {
        pst.setNull(++i, java.sql.Types.INTEGER);
        pst.setNull(++i, java.sql.Types.DATE);
    }
    pst.setBoolean(++i, readOnly);
    pst.setInt(++i, this.getModifiedBy());
    pst.setInt(++i, this.getId());
    pst.setInt(++i, projectId);
    pst.setTimestamp(++i, modified);
    resultCount = pst.executeUpdate();
    pst.close();
    return resultCount;
}
