private Schedule ParseXML(String xmlStr, int id) {
    // method works, needs fixing to work with new scheduled item
    // create a DOM parser
    DOMParser parser = new DOMParser();
    Document document = null;
    int index = -1;
    String scheduleId = "";
    NodeList schedules;
    NodeList schedule;
    NodeList semesters;
    NodeList classes;
    Node selectedSchedule;
    Node selectedSemester;
    Node selectedClass;
    Schedule theSchedule = null;
    AcademicYear theAcademicYear = null;
    List<Course> courseList = new ArrayList<Course>();
    // parse the document
    try {
        parser.parse(super.getSourceFile().getName());
        document = parser.getDocument();
    } catch (IOException e) {
        System.err.println(e);
    } catch (SAXException e) {
        e.printStackTrace();
    }
    if (document == null)
        return null;
    schedules = document.getChildNodes().item(0).getChildNodes();
    selectedSchedule = schedules.item(0);
    String profileID = document.getElementsByTagName(TAG_SCHEDULES).item(0).getAttributes().getNamedItem("profile").getNodeValue();
    // Element selectedSemester = document.getElementById(new Integer(id).toString());
    semesters = document.getElementsByTagName(TAG_SCHEDULE);
    for (int i = 0; i < semesters.getLength(); i++) {
        scheduleId = semesters.item(i).getAttributes().getNamedItem("id").getNodeValue();
        if (scheduleId.equals(new Integer(id).toString())) {
            String name = semesters.item(i).getAttributes().getNamedItem("name").getNodeValue();
            // System.out.println("\n***********************************************");
            // System.out.print("\nSchedule ID: " + test);
            // System.out.println("\tName: " + name);
            theSchedule = new Schedule(new Integer(profileID).intValue(), new Integer(scheduleId).intValue(), name);
            index = i;
        }
    }
    if (index == -1) {
        return null;
    }
    semesters = semesters.item(index).getChildNodes();
    // System.out.println("Val: " + children.item(1).getAttributes().getNamedItem("term"));
    selectedSemester = semesters.item(0);
    int startYear = 0;
    int endYear = 0;
    int year = 0;
    String term = "";
    String startTerm = "";
    boolean StartYear = false;
    ScheduledSemester tempSemester = null;
    AcademicYear tempAcademicYear = null;
    while (selectedSemester != null) {
        if (!selectedSemester.getNodeName().equals("#text")) {
            year = new Integer(selectedSemester.getAttributes().getNamedItem("year").getNodeValue()).intValue();
            term = selectedSemester.getAttributes().getNamedItem("term").getNodeValue();
            if (!StartYear) {
                startYear = year;
                StartYear = true;
                startTerm = term;
                tempAcademicYear = new AcademicYear(startYear, startYear + 1);
            }
            tempSemester = new ScheduledSemester(year, term);
            // 
            ArrayList<Course> coursesOfSemester = new ArrayList<Course>();
            // System.out.print("Term: " + term);
            // System.out.println("\tYear: " + year);
            endYear = year;
            classes = selectedSemester.getChildNodes();
            selectedClass = classes.item(0);
            while (selectedClass != null) {
                if (!selectedClass.getNodeName().equals("#text")) {
                    Course tempCourse = new Course();
                    Integer classId = new Integer(selectedClass.getAttributes().getNamedItem("id").getNodeValue());
                    String className = selectedClass.getTextContent();
                    // tempCourse.setSemester(tempSemester);
                    tempCourse.setCourseId(classId.intValue());
                    tempCourse.setDegreeProgram(className.substring(0, 4));
                    tempCourse.setCourseNum(className.substring(4, className.length()));
                    tempCourse.setCredits("0");
                    coursesOfSemester.add(tempCourse);
                // tempCourseWrap = new CourseWrapper(tempCourse);
                // tempCourseWrap.setSemester(year, term, tempCourse);
                // System.out.print("\tClassID: " + classId.intValue());
                // System.out.println("\tClassName: " + className);
                }
                selectedClass = selectedClass.getNextSibling();
            }
            // System.out.println("startYear: " + startYear + " - " + "endYear: " + endYear);
            tempSemester.setSemesterId(new Integer(scheduleId).intValue());
            tempSemester.addCourses(coursesOfSemester);
            tempAcademicYear.addSemester(tempSemester);
            // TODO - FIX
            if (CompareUtil.compareYears(startYear, endYear) == -1 && (CompareUtil.compareTerms(term, startTerm) == -1 && CompareUtil.compareTerms(term, "SPRING") == 1)) {
                theSchedule.addAcademicYear(tempAcademicYear);
                startYear = endYear;
                StartYear = false;
            }
        }
        selectedSemester = selectedSemester.getNextSibling();
    // System.out.println(children.item(i).getAttributes().getNamedItem("year"));
    }
    // theSchedule.printCourses();
    return theSchedule;
}
