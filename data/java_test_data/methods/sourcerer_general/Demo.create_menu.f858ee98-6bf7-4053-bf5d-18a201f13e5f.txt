public static JMenuBar create_menu() {
    // Where the GUI is created:
    JMenuBar menuBar;
    JMenu menu;
    JMenuItem menuItem;
    JCheckBoxMenuItem cbMenuItem;
    // Create the menu bar.
    menuBar = new JMenuBar();
    // Build the first menu.
    menu = new JMenu("Rendering");
    // --------------------------------
    cbMenuItem = new JCheckBoxMenuItem("Draw axes");
    cbMenuItem.addItemListener(new ItemListener() {

        public void itemStateChanged(ItemEvent arg0) {
            frame.handleEvent('a');
        // mainW.repaint();
        }
    });
    menu.add(cbMenuItem);
    // --------------------------------
    cbMenuItem = new JCheckBoxMenuItem("Shade");
    // frame.isShade = cbMenuItem;
    cbMenuItem.addItemListener(new ItemListener() {

        public void itemStateChanged(ItemEvent arg0) {
            if (frame.sC.getShade() == false) {
                if (// if no partial derivative
                frame.dx == null)
                    frame.handleFunctionsDX();
                if (frame.dx == null) {
                    // if still no valid derivative
                    frame.isShade.setSelected(false);
                    return;
                }
                if (// if no partial derivative
                frame.dz == null)
                    frame.handleFunctionsDZ();
                if (frame.dz == null) {
                    // if still no valid derivative
                    frame.isShade.setSelected(false);
                    return;
                }
            }
            frame.sC.setShade(!frame.sC.getShade());
            frame.renderer = DemoFrame.createRenderer(frame.sC, frame.get_width(), frame.get_height(), frame.f, frame.dx, frame.dz);
            frame.repaint();
        }
    });
    menu.add(cbMenuItem);
    // --------------------------------
    cbMenuItem = new JCheckBoxMenuItem("Normalize");
    cbMenuItem.addItemListener(new ItemListener() {

        public void itemStateChanged(ItemEvent arg0) {
            frame.sC.setNorm(!frame.sC.getNorm());
            frame.renderer = DemoFrame.createRenderer(frame.sC, frame.get_width(), frame.get_height(), frame.f, frame.dx, frame.dz);
            frame.repaint();
        }
    });
    // menu.add(cbMenuItem);
    // --------------------------------
    cbMenuItem = new JCheckBoxMenuItem("Orthogonal projection");
    cbMenuItem.addItemListener(new ItemListener() {

        public void itemStateChanged(ItemEvent arg0) {
            frame.sC.isPerspective = !frame.sC.isPerspective;
            frame.renderer = DemoFrame.createRenderer(frame.sC, frame.get_width(), frame.get_height(), frame.f, frame.dx, frame.dz);
            frame.repaint();
        }
    });
    // frame.isPerspective = cbMenuItem;
    menu.add(cbMenuItem);
    cbMenuItem = new JCheckBoxMenuItem("Ridge");
    cbMenuItem.addItemListener(new ItemListener() {

        public void itemStateChanged(ItemEvent arg0) {
            frame.sC.setRidge(!frame.sC.getRidge());
            frame.renderer = DemoFrame.createRenderer(frame.sC, frame.get_width(), frame.get_height(), frame.f, frame.dx, frame.dz);
            frame.repaint();
        }
    });
    // menu.add(cbMenuItem);
    menuBar.add(menu);
    menu = new JMenu("Functions");
    menuItem = new JMenuItem("Get function");
    menuItem.addActionListener(new ActionListener() {

        public void actionPerformed(ActionEvent arg0) {
            frame.handleFunction();
        }
    });
    menu.add(menuItem);
    menuItem = new JMenuItem("Get dx");
    menuItem.addActionListener(new ActionListener() {

        public void actionPerformed(ActionEvent arg0) {
            frame.handleFunctionsDX();
        }
    });
    menu.add(menuItem);
    menuItem = new JMenuItem("Get dy");
    menuItem.addActionListener(new ActionListener() {

        public void actionPerformed(ActionEvent arg0) {
            frame.handleFunctionsDZ();
        }
    });
    menu.add(menuItem);
    menuItem = new JMenuItem("Choose predefined function");
    menuItem.addActionListener(new ActionListener() {

        public void actionPerformed(ActionEvent arg0) {
            frame.handleFunctionsPredef();
        }
    });
    menu.add(menuItem);
    menuBar.add(menu);
    // ========================================
    menu = new JMenu("Help");
    menuItem = new JMenuItem("Keyboard controls");
    menuItem.addActionListener(new ActionListener() {

        public void actionPerformed(ActionEvent arg0) {
            JOptionPane.showMessageDialog(null, "<html>�X� and �x� � used for rotating the scene round the named axis <br>�Y� and �y� � used for rotating the scene round the named axis<br>�E� and �e� � narrowing and widening the positive and negative planes<br>�+� and �-� � controlling the distance of screen from origin<br>�D� and �d� � increasing and decreasing the distance<br>�P� and �p� � increasing and decreasing the distance of viewport from screen<br>�L� and �l� � increasing and decreasing intensiveness of  the light source<br></html>");
        }
    });
    menu.add(menuItem);
    menu.add(menuItem);
    // ========================================
    return (menuBar);
}
