// $ANTLR start "proc_writestring"
public final MyGrammarParser.proc_writestring_return proc_writestring() throws RecognitionException {
    MyGrammarParser.proc_writestring_return retval = new MyGrammarParser.proc_writestring_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token WRITESTRING112 = null;
    Token EPAR113 = null;
    Token STRING114 = null;
    Token DPAR115 = null;
    CommonTree WRITESTRING112_tree = null;
    CommonTree EPAR113_tree = null;
    CommonTree STRING114_tree = null;
    CommonTree DPAR115_tree = null;
    RewriteRuleTokenStream stream_WRITESTRING = new RewriteRuleTokenStream(adaptor, "token WRITESTRING");
    RewriteRuleTokenStream stream_EPAR = new RewriteRuleTokenStream(adaptor, "token EPAR");
    RewriteRuleTokenStream stream_DPAR = new RewriteRuleTokenStream(adaptor, "token DPAR");
    RewriteRuleTokenStream stream_STRING = new RewriteRuleTokenStream(adaptor, "token STRING");
    try {
        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:231:18: ( WRITESTRING EPAR STRING DPAR -> ^( PROC_WRITESTRING STRING ) )
        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:231:20: WRITESTRING EPAR STRING DPAR
        {
            WRITESTRING112 = (Token) match(input, WRITESTRING, FOLLOW_WRITESTRING_in_proc_writestring1836);
            stream_WRITESTRING.add(WRITESTRING112);
            EPAR113 = (Token) match(input, EPAR, FOLLOW_EPAR_in_proc_writestring1838);
            stream_EPAR.add(EPAR113);
            STRING114 = (Token) match(input, STRING, FOLLOW_STRING_in_proc_writestring1840);
            stream_STRING.add(STRING114);
            DPAR115 = (Token) match(input, DPAR, FOLLOW_DPAR_in_proc_writestring1842);
            stream_DPAR.add(DPAR115);
            // AST REWRITE
            // elements: STRING
            // token labels:
            // rule labels: retval
            // token list labels:
            // rule list labels:
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", retval != null ? retval.tree : null);
            root_0 = (CommonTree) adaptor.nil();
            // 231:49: -> ^( PROC_WRITESTRING STRING )
            {
                // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:231:52: ^( PROC_WRITESTRING STRING )
                {
                    CommonTree root_1 = (CommonTree) adaptor.nil();
                    root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(PROC_WRITESTRING, "PROC_WRITESTRING"), root_1);
                    adaptor.addChild(root_1, stream_STRING.nextNode());
                    adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
