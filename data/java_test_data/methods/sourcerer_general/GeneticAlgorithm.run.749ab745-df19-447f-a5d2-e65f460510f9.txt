public static Individual run(GEProblemParams params, GEProblem problem) {
    int populationSize = params.populationSize;
    int generationMax = params.generationMax;
    int displayFreq = params.displayFreq;
    int maxReMates = params.maxReMates;
    // 2D array of all individuals
    Individual[] currentPopulation = problem.getRandomPopulation(populationSize);
    // System.out.println("Generated Initial Random Population.");
    // Get first run of fitness
    findFitness(currentPopulation, problem);
    // System.out.println("Set Fitness for all individuals.");
    // for(Individual one: currentPopulation)
    // System.out.println(one);
    // Internal state variable
    int generationCount = 1;
    while (true) {
        // System.out.println("Starting generation: " + generationCount);
        double average = getFitnessAverage(currentPopulation);
        if (generationMax != -1 && generationCount == generationMax) {
            // Must now return best individual
            Individual maxIndividual = currentPopulation[getMaxIndividual(currentPopulation)];
            System.out.println("--------------------------------------");
            System.out.println("Did not find an ideal individual.");
            System.out.println("Program terminated through reaching max generation.");
            System.out.println("Best individual had a fitness of: " + maxIndividual.getFitness() + "/" + problem.getPerfectFitness() + '.');
            System.out.println("Average of last generation was: " + average + '.');
            return maxIndividual;
        } else if (generationCount % displayFreq == 0 && displayFreq != -1) {
            System.out.println("--------------------------------------");
            System.out.println("Generation Number: " + generationCount);
            System.out.println(currentPopulation[getMaxIndividual(currentPopulation)] + " was the best.");
            System.out.println("Average was " + average + ". Thats was out of a maximum of " + problem.getPerfectFitness() + '.');
            System.out.println("Mutation probabilty was 1/" + (1 + problem.getMutationProb(average)) + '.');
        }
        // Have Sex, thats weighted
        // Weighted Random Init
        CalculatedLookup calcLookup = new CalculatedLookup();
        calcLookup(currentPopulation, calcLookup, problem);
        // Weighted Recount init
        int countMax = Math.min((int) (problem.getPerfectFitness() - average + 1), maxReMates);
        // Might want to be sure that offspring are more fit
        Individual[] nextPopulation = new Individual[currentPopulation.length];
        int mutationProb = problem.getMutationProb(average);
        for (int i = 0; i < currentPopulation.length; ++i) {
            int count = 0;
            double tempFitness = -1;
            Individual tempIndividual = null;
            while (tempFitness < average && count < countMax) {
                tempIndividual = problem.mate(currentPopulation[weightedRandom(calcLookup)], currentPopulation[weightedRandom(calcLookup)]);
                // Mutate from the damn sun
                if ((int) (Math.random() * (mutationProb + 1)) == 0)
                    tempIndividual = problem.mutate(tempIndividual);
                tempIndividual.setFitness(problem.getFitness(tempIndividual));
                tempFitness = tempIndividual.getFitness();
                count++;
            }
            nextPopulation[i] = tempIndividual;
            if (tempIndividual.getFitness() == problem.getPerfectFitness()) {
                System.out.println("--------------------------------------");
                System.out.println("Found perfect individual in generation " + generationCount);
                System.out.println("This individual had a fitness of " + tempIndividual.getFitness() + " / " + problem.getPerfectFitness());
                System.out.println("Thank you and have a good day.");
                return tempIndividual;
            }
        }
        currentPopulation = nextPopulation;
        generationCount++;
    }
}
