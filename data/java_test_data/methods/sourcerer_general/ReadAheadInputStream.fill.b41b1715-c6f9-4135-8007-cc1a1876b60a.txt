private void fill(int readAtLeastTheseManyBytes) throws IOException {
    checkClosed();
    this.currentPosition = 0;
    /* no mark: throw away the buffer */
    this.endOfCurrentData = currentPosition;
    // Read at least as many bytes as the caller wants, but don't
    // block to fill the whole buffer (like java.io.BufferdInputStream
    // does)
    int bytesToRead = Math.min(this.buf.length - currentPosition, readAtLeastTheseManyBytes);
    int bytesAvailable = this.underlyingStream.available();
    if (bytesAvailable > bytesToRead) {
        // Great, there's more available, let's grab those
        // bytes too! (read-ahead)
        bytesToRead = Math.min(this.buf.length - currentPosition, bytesAvailable);
    }
    if (this.doDebug) {
        StringBuffer debugBuf = new StringBuffer();
        debugBuf.append("  ReadAheadInputStream.fill(");
        debugBuf.append(readAtLeastTheseManyBytes);
        debugBuf.append("), buffer_size=");
        debugBuf.append(this.buf.length);
        debugBuf.append(", current_position=");
        debugBuf.append(currentPosition);
        debugBuf.append(", need to read ");
        debugBuf.append(Math.min(this.buf.length - currentPosition, readAtLeastTheseManyBytes));
        debugBuf.append(" bytes to fill request,");
        if (bytesAvailable > 0) {
            debugBuf.append(" underlying InputStream reports ");
            debugBuf.append(bytesAvailable);
            debugBuf.append(" total bytes available,");
        }
        debugBuf.append(" attempting to read ");
        debugBuf.append(bytesToRead);
        debugBuf.append(" bytes.");
        if (this.log != null) {
            this.log.logTrace(debugBuf.toString());
        } else {
            System.err.println(debugBuf.toString());
        }
    }
    int n = this.underlyingStream.read(this.buf, currentPosition, bytesToRead);
    if (n > 0) {
        endOfCurrentData = n + currentPosition;
    }
}
