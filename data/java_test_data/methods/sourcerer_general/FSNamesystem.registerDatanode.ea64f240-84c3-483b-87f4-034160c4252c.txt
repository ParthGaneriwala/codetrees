// ///////////////////////////////////////////////////////
// 
// These methods are called by datanodes
// 
// ///////////////////////////////////////////////////////
public synchronized void registerDatanode(DatanodeRegistration nodeReg) throws IOException {
    String dnAddress = Server.getRemoteAddress();
    if (dnAddress == null) {
        // Mostly called inside an RPC.
        // But if not, use address passed by the data-node.
        dnAddress = nodeReg.getHost();
    }
    // check if the datanode is allowed to be connect to the namenode
    if (!verifyNodeRegistration(nodeReg, dnAddress)) {
        throw new DisallowedDatanodeException(nodeReg);
    }
    String hostName = nodeReg.getHost();
    // update the datanode's name with ip:port
    DatanodeID dnReg = new DatanodeID(dnAddress + ":" + nodeReg.getPort(), nodeReg.getStorageID(), nodeReg.getInfoPort(), nodeReg.getIpcPort());
    nodeReg.updateRegInfo(dnReg);
    NameNode.stateChangeLog.info("BLOCK* NameSystem.registerDatanode: " + "node registration from " + nodeReg.getName() + " storage " + nodeReg.getStorageID());
    DatanodeDescriptor nodeS = datanodeMap.get(nodeReg.getStorageID());
    DatanodeDescriptor nodeN = host2DataNodeMap.getDatanodeByName(nodeReg.getName());
    if (nodeN != null && nodeN != nodeS) {
        NameNode.LOG.info("BLOCK* NameSystem.registerDatanode: " + "node from name: " + nodeN.getName());
        // nodeN previously served a different data storage,
        // which is not served by anybody anymore.
        removeDatanode(nodeN);
        // physically remove node from datanodeMap
        wipeDatanode(nodeN);
        nodeN = null;
    }
    if (nodeS != null) {
        if (nodeN == nodeS) {
            // The same datanode has been just restarted to serve the same data
            // storage. We do not need to remove old data blocks, the delta will
            // be calculated on the next block report from the datanode
            NameNode.stateChangeLog.debug("BLOCK* NameSystem.registerDatanode: " + "node restarted.");
        } else {
            // nodeS is found
            /* The registering datanode is a replacement node for the existing 
          data storage, which from now on will be served by a new node.
          If this message repeats, both nodes might have same storageID 
          by (insanely rare) random chance. User needs to restart one of the
          nodes with its data cleared (or user can just remove the StorageID
          value in "VERSION" file under the data directory of the datanode,
          but this is might not work if VERSION file format has changed 
       */
            NameNode.stateChangeLog.info("BLOCK* NameSystem.registerDatanode: " + "node " + nodeS.getName() + " is replaced by " + nodeReg.getName() + " with the same storageID " + nodeReg.getStorageID());
        }
        // update cluster map
        clusterMap.remove(nodeS);
        nodeS.updateRegInfo(nodeReg);
        nodeS.setHostName(hostName);
        // resolve network location
        resolveNetworkLocation(nodeS);
        clusterMap.add(nodeS);
        // also treat the registration message as a heartbeat
        synchronized (heartbeats) {
            if (!heartbeats.contains(nodeS)) {
                heartbeats.add(nodeS);
                // update its timestamp
                nodeS.updateHeartbeat(0L, 0L, 0L, 0);
                nodeS.isAlive = true;
            }
        }
        return;
    }
    // this is a new datanode serving a new data storage
    if (nodeReg.getStorageID().equals("")) {
        // this data storage has never been registered
        // it is either empty or was created by pre-storageID version of DFS
        nodeReg.storageID = newStorageID();
        NameNode.stateChangeLog.debug("BLOCK* NameSystem.registerDatanode: " + "new storageID " + nodeReg.getStorageID() + " assigned.");
    }
    // register new datanode
    DatanodeDescriptor nodeDescr = new DatanodeDescriptor(nodeReg, NetworkTopology.DEFAULT_RACK, hostName);
    resolveNetworkLocation(nodeDescr);
    unprotectedAddDatanode(nodeDescr);
    clusterMap.add(nodeDescr);
    // also treat the registration message as a heartbeat
    synchronized (heartbeats) {
        heartbeats.add(nodeDescr);
        nodeDescr.isAlive = true;
    // no need to update its timestamp
    // because its is done when the descriptor is created
    }
    return;
}
