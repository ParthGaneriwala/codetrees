// $ANTLR start "igual_diferente"
public final gramaticaMM2Parser.igual_diferente_return igual_diferente() throws RecognitionException {
    gramaticaMM2Parser.igual_diferente_return retval = new gramaticaMM2Parser.igual_diferente_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token EQUAL168 = null;
    Token NEQUAL169 = null;
    gramaticaMM2Parser.exp_aritmetica_return exp_aritmetica167 = null;
    gramaticaMM2Parser.exp_aritmetica_return exp_aritmetica170 = null;
    CommonTree EQUAL168_tree = null;
    CommonTree NEQUAL169_tree = null;
    RewriteRuleTokenStream stream_NEQUAL = new RewriteRuleTokenStream(adaptor, "token NEQUAL");
    RewriteRuleTokenStream stream_EQUAL = new RewriteRuleTokenStream(adaptor, "token EQUAL");
    RewriteRuleSubtreeStream stream_exp_aritmetica = new RewriteRuleSubtreeStream(adaptor, "rule exp_aritmetica");
    try {
        // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:146:19: ( exp_aritmetica ( ( EQUAL | NEQUAL ) exp_aritmetica )* -> ^( EQUAL_NEQUAL ( exp_aritmetica )+ ) )
        // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:146:23: exp_aritmetica ( ( EQUAL | NEQUAL ) exp_aritmetica )*
        {
            pushFollow(FOLLOW_exp_aritmetica_in_igual_diferente1580);
            exp_aritmetica167 = exp_aritmetica();
            state._fsp--;
            stream_exp_aritmetica.add(exp_aritmetica167.getTree());
            // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:146:38: ( ( EQUAL | NEQUAL ) exp_aritmetica )*
            loop31: do {
                int alt31 = 2;
                int LA31_0 = input.LA(1);
                if (((LA31_0 >= EQUAL && LA31_0 <= NEQUAL))) {
                    alt31 = 1;
                }
                switch(alt31) {
                    case 1:
                        // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:146:39: ( EQUAL | NEQUAL ) exp_aritmetica
                        {
                            // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:146:39: ( EQUAL | NEQUAL )
                            int alt30 = 2;
                            int LA30_0 = input.LA(1);
                            if ((LA30_0 == EQUAL)) {
                                alt30 = 1;
                            } else if ((LA30_0 == NEQUAL)) {
                                alt30 = 2;
                            } else {
                                NoViableAltException nvae = new NoViableAltException("", 30, 0, input);
                                throw nvae;
                            }
                            switch(alt30) {
                                case 1:
                                    // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:146:40: EQUAL
                                    {
                                        EQUAL168 = (Token) match(input, EQUAL, FOLLOW_EQUAL_in_igual_diferente1584);
                                        stream_EQUAL.add(EQUAL168);
                                    }
                                    break;
                                case 2:
                                    // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:146:46: NEQUAL
                                    {
                                        NEQUAL169 = (Token) match(input, NEQUAL, FOLLOW_NEQUAL_in_igual_diferente1586);
                                        stream_NEQUAL.add(NEQUAL169);
                                    }
                                    break;
                            }
                            pushFollow(FOLLOW_exp_aritmetica_in_igual_diferente1589);
                            exp_aritmetica170 = exp_aritmetica();
                            state._fsp--;
                            stream_exp_aritmetica.add(exp_aritmetica170.getTree());
                        }
                        break;
                    default:
                        break loop31;
                }
            } while (true);
            // AST REWRITE
            // elements: exp_aritmetica
            // token labels:
            // rule labels: retval
            // token list labels:
            // rule list labels:
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", retval != null ? retval.tree : null);
            root_0 = (CommonTree) adaptor.nil();
            // 147:2: -> ^( EQUAL_NEQUAL ( exp_aritmetica )+ )
            {
                // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:147:8: ^( EQUAL_NEQUAL ( exp_aritmetica )+ )
                {
                    CommonTree root_1 = (CommonTree) adaptor.nil();
                    root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(EQUAL_NEQUAL, "EQUAL_NEQUAL"), root_1);
                    if (!(stream_exp_aritmetica.hasNext())) {
                        throw new RewriteEarlyExitException();
                    }
                    while (stream_exp_aritmetica.hasNext()) {
                        adaptor.addChild(root_1, stream_exp_aritmetica.nextTree());
                    }
                    stream_exp_aritmetica.reset();
                    adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
