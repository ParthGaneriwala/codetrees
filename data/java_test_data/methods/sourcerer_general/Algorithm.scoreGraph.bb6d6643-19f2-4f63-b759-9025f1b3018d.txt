public void scoreGraph(CyNetwork inputNetwork, String resultTitle) {
    params = getParams();
    String callerID = "Algorithm.scorGraph";
    if (inputNetwork == null) {
        System.err.println("In " + callerID + ": inputNetwork was null.");
        return;
    }
    long msTimeBefore = System.currentTimeMillis();
    HashMap nodeInfoHashMap = new HashMap(inputNetwork.getNodeCount());
    TreeMap nodeScoreSortedMap = new TreeMap(new // will store Doubles (score) as the key, Lists as values
    Comparator() {

        public int compare(Object o1, Object o2) {
            double d1 = ((Double) o1).doubleValue();
            double d2 = ((Double) o2).doubleValue();
            if (d1 == d2) {
                return 0;
            } else if (d1 < d2) {
                return 1;
            } else {
                return -1;
            }
        }
    });
    // iterate over all nodes and calculate node score
    NodeInfo nodeInfo = null;
    double nodeScore;
    ArrayList al;
    int i = 0;
    Iterator nodes = inputNetwork.nodesIterator();
    while (nodes.hasNext() && (!cancelled)) {
        Node n = (Node) nodes.next();
        nodeInfo = calcNodeInfo(inputNetwork, n.getRootGraphIndex());
        nodeInfoHashMap.put(new Integer(n.getRootGraphIndex()), nodeInfo);
        // score node TODO: add support for other scoring functions (low priority)
        nodeScore = scoreNode(nodeInfo);
        if (nodeScoreSortedMap.containsKey(new Double(nodeScore))) {
            al = (ArrayList) nodeScoreSortedMap.get(new Double(nodeScore));
            al.add(new Integer(n.getRootGraphIndex()));
        } else {
            al = new ArrayList();
            al.add(new Integer(n.getRootGraphIndex()));
            nodeScoreSortedMap.put(new Double(nodeScore), al);
        }
        if (taskMonitor != null) {
            i++;
            taskMonitor.setPercentCompleted((i * 100) / inputNetwork.getNodeCount());
        }
    }
    nodeScoreResultsMap.put(resultTitle, nodeScoreSortedMap);
    nodeInfoResultsMap.put(resultTitle, nodeInfoHashMap);
    curNodeScores = nodeScoreSortedMap;
    curNodeInfos = nodeInfoHashMap;
    long msTimeAfter = System.currentTimeMillis();
    lastScoreTime = msTimeAfter - msTimeBefore;
}
