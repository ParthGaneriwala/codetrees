@RequestMapping(method = RequestMethod.POST)
public String printSummaries(@RequestParam(required = false, value = "patientIdentifiers") final String patientIdentifiers, @RequestParam(required = false, value = "summaryIdentifier") final String summaryIdentifier, @RequestParam(required = false, value = "locationId") final String locationId, @RequestParam(required = false, value = "summaryLocation") final String summaryLocation, @RequestParam(required = false, value = "endReturnDate") final String endReturn, @RequestParam(required = false, value = "startReturnDate") final String startReturn, final HttpServletResponse response, final HttpSession session) {
    if (StringUtils.isBlank(locationId) && StringUtils.isBlank(patientIdentifiers)) {
        session.setAttribute(WebConstants.OPENMRS_ERROR_ATTR, " clinicalsummary.invalid.parameters");
    } else {
        try {
            File attachmentFile = new File(System.getProperty("java.io.tmpdir"), WebUtils.prepareFilename(null, Evaluator.FILE_TYPE_PDF));
            FileOutputStream outputStream = new FileOutputStream(attachmentFile);
            Document document = new Document();
            PdfCopy copy = new PdfCopy(document, outputStream);
            document.open();
            Cohort cohort = new Cohort();
            Summary summary = null;
            // collect the cohort and then get the template to be printed
            if (StringUtils.isNotBlank(patientIdentifiers)) {
                String[] patientIdentifier = StringUtils.split(patientIdentifiers);
                summary = Context.getService(SummaryService.class).getSummary(NumberUtils.toInt(summaryIdentifier, -1));
                cohort = Context.getPatientSetService().convertPatientIdentifier(Arrays.asList(patientIdentifier));
            } else if (StringUtils.isNotBlank(locationId)) {
                Location location = Context.getLocationService().getLocation(NumberUtils.toInt(locationId, -1));
                summary = Context.getService(SummaryService.class).getSummary(NumberUtils.toInt(summaryLocation, -1));
                Date startReturnDate = WebUtils.parse(startReturn, new Date());
                Date endReturnDate = WebUtils.parse(endReturn, startReturnDate);
                cohort = Context.getService(IndexService.class).getIndexCohort(location, summary, startReturnDate, endReturnDate);
            }
            File outputDirectory = EvaluatorUtils.getOutputDirectory(summary);
            for (Integer patientId : cohort.getMemberIds()) {
                File summaryFile = new File(outputDirectory, StringUtils.join(Arrays.asList(patientId, Evaluator.FILE_TYPE_PDF), "."));
                try {
                    PdfReader reader = new PdfReader(new FileInputStream(summaryFile));
                    int pageCount = reader.getNumberOfPages();
                    for (int i = 1; i <= pageCount; i++) copy.addPage(copy.getImportedPage(reader, i));
                } catch (Exception e) {
                    log.error("Failed adding summary for patient " + patientId + " with " + summaryFile.getName(), e);
                }
            }
            document.close();
            outputStream.close();
            attachAndPurgeFile(response, attachmentFile);
            return null;
        } catch (Exception e) {
            log.error("Failed generating attachment for patients", e);
        }
    }
    return "redirect:printSummaries.form";
}
