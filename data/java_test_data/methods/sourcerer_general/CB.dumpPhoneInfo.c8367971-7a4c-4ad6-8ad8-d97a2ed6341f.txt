public static void dumpPhoneInfo(Context c) {
    if (!DEBUG_LOCAL)
        return;
    // ---phone---					---emulator---
    Logger.log("Build properties:");
    // sapphire						unknown
    Logger.log("Build.BOARD", Build.BOARD);
    // vodafone						generic
    Logger.log("Build.BRAND", Build.BRAND);
    // sapphire						generic
    Logger.log("Build.DEVICE", Build.DEVICE);
    // CRC1							sdk-eng 1.5 CUPCAKE ...
    Logger.log("Build.DISPLAY", Build.DISPLAY);
    // vodafone/vfpoineer/...		generic/sdk/generic/:1.5/CUPCAKE...
    Logger.log("Build.FINGERPRINT", Build.FINGERPRINT);
    // undroid16.mtv.corp...		apa27.mtv.corp.google.com
    Logger.log("Build.HOST", Build.HOST);
    // CRC1							CUPCAKE
    Logger.log("Build.ID", Build.ID);
    // HTC Magic					sdk
    Logger.log("Build.MODEL", Build.MODEL);
    // vfpoineer					sdk
    Logger.log("Build.PRODUCT", Build.PRODUCT);
    // ota-rel-keys, test-keys		test-keys
    Logger.log("Build.TAGS", Build.TAGS);
    // 1246...						1246....
    Logger.log("Build.TIME", Build.TIME);
    // user							eng
    Logger.log("Build.TYPE", Build.TYPE);
    // android-build				android-build
    Logger.log("Build.USER", Build.USER);
    TelephonyManager tm = (TelephonyManager) c.getSystemService(Context.TELEPHONY_SERVICE);
    int callState = tm.getCallState();
    String callStateString = "NA";
    switch(callState) {
        case TelephonyManager.CALL_STATE_IDLE:
            callStateString = "IDLE";
            break;
        case TelephonyManager.CALL_STATE_OFFHOOK:
            callStateString = "OFFHOOK";
            break;
        case TelephonyManager.CALL_STATE_RINGING:
            callStateString = "RINGING";
            break;
    }
    Logger.log("CallState", callStateString);
    Logger.log("DeviceId", tm.getDeviceId());
    Logger.log("DeviceSoftwareVersion", tm.getDeviceSoftwareVersion());
    Logger.log("Line1Number", tm.getLine1Number());
    Logger.log("NetworkCountryIso", tm.getNetworkCountryIso());
    Logger.log("NetworkOperator", tm.getNetworkOperator());
    Logger.log("NetworkOperatorName", tm.getNetworkOperatorName());
    int phoneType = tm.getPhoneType();
    String phoneTypeString = "NA";
    switch(phoneType) {
        case TelephonyManager.PHONE_TYPE_GSM:
            phoneTypeString = "GSM";
            break;
        case TelephonyManager.PHONE_TYPE_NONE:
            phoneTypeString = "NONE";
            break;
    }
    Logger.log("PhoneType", phoneTypeString);
    Logger.log("SimCountryIso", tm.getSimCountryIso());
    Logger.log("SimOperator", tm.getSimOperator());
    Logger.log("SimOperatorName", tm.getSimOperatorName());
    Logger.log("SimSerialNumber", tm.getSimSerialNumber());
    Logger.log("SubscriberId", tm.getSubscriberId());
    int simState = tm.getSimState();
    String simStateString = "NA";
    switch(simState) {
        case TelephonyManager.SIM_STATE_ABSENT:
            simStateString = "ABSENT";
            break;
        case TelephonyManager.SIM_STATE_NETWORK_LOCKED:
            simStateString = "NETWORK_LOCKED";
            break;
        case TelephonyManager.SIM_STATE_PIN_REQUIRED:
            simStateString = "PIN_REQUIRED";
            break;
        case TelephonyManager.SIM_STATE_PUK_REQUIRED:
            simStateString = "PUK_REQUIRED";
            break;
        case TelephonyManager.SIM_STATE_READY:
            simStateString = "STATE_READY";
            break;
        case TelephonyManager.SIM_STATE_UNKNOWN:
            simStateString = "STATE_UNKNOWN";
            break;
    }
    Logger.log("SimState", simStateString);
}
