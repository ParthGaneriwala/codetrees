public void encodeBMP(BMPEncoder encoder, AdaptiveRasterImage ji, LEDataOutputStream out) throws JimiException {
    try {
        int fileType = __BMP_TYPE;
        int scanLineSize = ((ji.getWidth() * 8 + 31) / 32) * 4;
        int headerSize = __BITMAP_FILE_HEADER_SIZE + __BITMAP_INFO_HEADER_SIZE + (256 * 4);
        int fileSize = scanLineSize * ji.getHeight() + headerSize;
        // bitmap file header
        // bmp signature
        out.writeShort(fileType);
        // file size
        out.writeInt(fileSize);
        // reserved1
        out.writeShort(0);
        // reserved2
        out.writeShort(0);
        // bitmapOffset
        out.writeInt(headerSize);
        // bitmap info header
        // size of info header
        out.writeInt(__BITMAP_INFO_HEADER_SIZE);
        // width
        out.writeInt(ji.getWidth());
        // / height
        out.writeInt(ji.getHeight());
        // planes
        out.writeShort(1);
        // bitsPerPixel
        out.writeShort(8);
        // compression = NONE
        out.writeInt(0);
        // sizeOfBitmap
        out.writeInt(scanLineSize * ji.getHeight());
        // horz resolution
        out.writeInt(0);
        // vert resolution
        out.writeInt(0);
        // colorsUsed
        out.writeInt(0);
        // colorsImportant
        out.writeInt(0);
        IndexColorModel model;
        try {
            model = (IndexColorModel) ji.getColorModel();
        } catch (ClassCastException cce) {
            throw new JimiException("BMP8 encoding requires an IndexColorModel.");
        }
        int palette_size = Math.max(256, model.getMapSize());
        byte[] reds = new byte[palette_size];
        byte[] greens = new byte[palette_size];
        byte[] blues = new byte[palette_size];
        model.getReds(reds);
        model.getGreens(greens);
        model.getBlues(blues);
        // write color map
        for (int i = 0; i < 256; i++) {
            if (i < palette_size) {
                out.writeByte(blues[i]);
                out.writeByte(greens[i]);
                out.writeByte(reds[i]);
                out.writeByte(0);
            } else {
                out.writeInt(0);
            }
        }
        int width = ji.getWidth();
        int heightStop = ji.getHeight() - 1;
        byte[] rowBuf = new byte[width];
        int padValue = scanLineSize - width;
        for (// go from bottom up for BMP
        int i = heightStop; // go from bottom up for BMP
        i > -1; // go from bottom up for BMP
        i--) {
            ji.getChannel(0, i, rowBuf, 0);
            out.write(rowBuf);
            for (int pad = 0; pad < padValue; pad++) // pad with zeroes
            out.write(0);
            encoder.setProgress(((heightStop - i) * 100) / heightStop);
        }
    } catch (IOException e) {
        throw new JimiException("BMP8Encoder encodeBMP() IOException encountered");
    }
}
