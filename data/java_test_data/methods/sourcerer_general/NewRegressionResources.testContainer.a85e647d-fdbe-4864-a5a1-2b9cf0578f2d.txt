public void testContainer(Model m, Container cont1, Container cont2) {
    NodeIterator nIter;
    StmtIterator sIter;
    Literal tvLiteral = m.createLiteral("test 12 string 2");
    Resource tvResObj = m.createResource(new ResTestObjF());
    Object tvLitObj = new LitTestObj(1234);
    Bag tvBag = m.createBag();
    Alt tvAlt = m.createAlt();
    Seq tvSeq = m.createSeq();
    String lang = "en";
    Statement stmt;
    // 
    assertEquals(0, cont1.size());
    assertEquals(0, cont2.size());
    // 
    assertTrue(cont1.add(tvBoolean).contains(tvBoolean));
    assertTrue(cont1.add(tvByte).contains(tvByte));
    assertTrue(cont1.add(tvShort).contains(tvShort));
    assertTrue(cont1.add(tvInt).contains(tvInt));
    assertTrue(cont1.add(tvLong).contains(tvLong));
    assertTrue(cont1.add(tvFloat).contains(tvFloat));
    assertTrue(cont1.add(tvDouble).contains(tvDouble));
    assertTrue(cont1.add(tvChar).contains(tvChar));
    assertTrue(cont1.add(tvString).contains(tvString));
    assertFalse(cont1.contains(tvString, lang));
    assertTrue(cont1.add(tvString, lang).contains(tvString, lang));
    assertTrue(cont1.add(tvLiteral).contains(tvLiteral));
    assertTrue(cont1.add(tvResObj).contains(tvResObj));
    assertTrue(cont1.add(tvLitObj).contains(tvLitObj));
    assertEquals(13, cont1.size());
    // 
    int num = 10;
    for (int i = 0; i < num; i += 1) cont2.add(i);
    assertEquals(num, cont2.size());
    checkNumericContent(cont2, num);
    // 
    boolean[] found = new boolean[num];
    boolean[] retain = { true, true, true, false, false, false, false, false, true, true };
    retainOnlySpecified(cont2, num, retain);
    seeWhatsThere(cont2, found);
    for (int i = 0; i < num; i += 1) assertEquals(i + "th element of array", retain[i], found[i]);
}
