void highlightGuide(Integer pos, Color color, int offset) {
    if (pos == null) {
        if (guide[offset] != null) {
            removeFeedback(guide[offset]);
            guide[offset] = null;
        }
        location[offset] = pos;
        return;
    }
    // pos is an integer relative to target's client area.
    // translate pos to absolute, and then make it relative to fig.
    int position = pos.intValue();
    PrecisionPoint loc = new PrecisionPoint(position, position);
    IFigure contentPane = ((GraphicalEditPart) getHost()).getContentPane();
    contentPane.translateToParent(loc);
    contentPane.translateToAbsolute(loc);
    if (location[offset] == null || !location[offset].equals(pos)) {
        location[offset] = pos;
        if (guide[offset] != null) {
            removeFeedback(guide[offset]);
            guide[offset] = null;
        }
        IFigure fig = new FadeIn(color);
        guide[offset] = fig;
        addFeedback(fig);
        fig.translateToRelative(loc);
        position = offset % 2 == 0 ? (int) Math.round(loc.preciseX) : (int) Math.round(loc.preciseY);
        Rectangle figBounds = getFeedbackLayer().getBounds().getCopy();
        if ((offset % 2) == 1) {
            figBounds.height = 1;
            figBounds.y = position;
        } else {
            figBounds.x = position;
            figBounds.width = 1;
        }
        fig.setBounds(figBounds);
    } else {
        // The feedback layer could have grown (if auto-scrolling), so
        // resize the fade-in
        // line.
        IFigure fig = guide[offset];
        Rectangle figBounds = fig.getBounds().getCopy();
        Rectangle feedbackBounds = getFeedbackLayer().getBounds();
        if ((offset % 2) == 1) {
            figBounds.x = feedbackBounds.x;
            figBounds.width = feedbackBounds.width;
        } else {
            figBounds.y = feedbackBounds.y;
            figBounds.height = feedbackBounds.height;
        }
        fig.setBounds(figBounds);
    }
}
