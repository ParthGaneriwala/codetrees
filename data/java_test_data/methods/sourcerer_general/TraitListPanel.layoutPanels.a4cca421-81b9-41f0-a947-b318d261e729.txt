public void layoutPanels() {
    this.removeAll();
    if (traitPanels != null) {
        traitPanels.clear();
    } else {
        traitPanels = new LinkedList<TraitPanel>();
    }
    if (traits.size() == 0) {
        JPanel tmpPanel = new JPanel(new BorderLayout());
        JLabel noTraitsLabel = new JLabel();
        noTraitsLabel.setText(isDisplayedAsAssets() ? NO_ASSETS_MESSAGE : NO_COMPLICATIONS_MESSAGE);
        tmpPanel.add(noTraitsLabel, BorderLayout.CENTER);
        add(tmpPanel);
    }
    setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));
    delButtons = new LinkedList<JButton>();
    for (final TraitData tdata : traits) {
        JPanel tmpPanel = new JPanel(new BorderLayout());
        // panel
        TraitPanel panel = new TraitPanel();
        panel.setName(getPanelName(tdata));
        traitPanels.add(panel);
        panel.setTraitData(tdata, assets);
        tmpPanel.add(panel, BorderLayout.CENTER);
        panel.setSwapAction(traitSwapAction);
        // delete button
        JButton delButton = new JButton(DELETE_ICON);
        delButton.setName(panel.getName() + ".delete");
        delButton.setMargin(new Insets(0, 0, 0, 0));
        delButton.setBackground(this.getBackground());
        delButton.setOpaque(true);
        tmpPanel.add(delButton, BorderLayout.EAST);
        delButton.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                deleteTrait(tdata);
            }
        });
        delButtons.add(delButton);
        add(tmpPanel);
    }
    enableButtons();
    revalidate();
    repaint();
}
