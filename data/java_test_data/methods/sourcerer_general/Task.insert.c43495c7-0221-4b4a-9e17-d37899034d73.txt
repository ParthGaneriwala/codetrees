public boolean insert(Connection db) throws SQLException {
    String sql = null;
    if (!isValid()) {
        return false;
    }
    boolean commit = db.getAutoCommit();
    try {
        if (commit) {
            db.setAutoCommit(false);
        }
        sql = "INSERT INTO task " + "(enteredby, modifiedby, priority, description, notes, sharing, owner, duedate, estimatedloe, " + (estimatedLOEType == -1 ? "" : "estimatedloetype, ") + "complete, completedate, category_id, rating_count, rating_value, rating_avg, " + "functional_area, status, business_value, complexity, target_release, target_sprint, loe_remaining, " + "assigned_priority ";
        if (linkModuleId > -1 && linkItemId > -1) {
            sql += ", link_module_id, link_item_id ";
        }
        sql += ") " + "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, " + (estimatedLOEType == -1 ? "" : "?, ") + "?, ?, ?, ?, ?, ?, " + "?, ?, ?, ?, ? ";
        if (linkModuleId > -1 && linkItemId > -1) {
            sql += ", ?, ? ";
        }
        sql += ") ";
        int i = 0;
        PreparedStatement pst = db.prepareStatement(sql);
        pst.setInt(++i, this.getEnteredBy());
        pst.setInt(++i, this.getModifiedBy());
        pst.setInt(++i, this.getPriority());
        pst.setString(++i, this.getDescription());
        pst.setString(++i, this.getNotes());
        pst.setInt(++i, this.getSharing());
        DatabaseUtils.setInt(pst, ++i, this.getOwner());
        pst.setTimestamp(++i, this.getDueDate());
        pst.setDouble(++i, this.getEstimatedLOE());
        if (this.getEstimatedLOEType() != -1) {
            pst.setInt(++i, this.getEstimatedLOEType());
        }
        pst.setBoolean(++i, this.getComplete());
        if (this.getComplete()) {
            if (completeDate == null) {
                completeDate = new Timestamp(System.currentTimeMillis());
            }
        } else {
            completeDate = null;
        }
        DatabaseUtils.setTimestamp(pst, ++i, completeDate);
        DatabaseUtils.setInt(pst, ++i, categoryId);
        pst.setInt(++i, ratingCount);
        pst.setInt(++i, ratingValue);
        pst.setDouble(++i, ratingAverage);
        DatabaseUtils.setInt(pst, ++i, functionalArea);
        DatabaseUtils.setInt(pst, ++i, status);
        DatabaseUtils.setInt(pst, ++i, businessValue);
        DatabaseUtils.setInt(pst, ++i, complexity);
        DatabaseUtils.setInt(pst, ++i, targetRelease);
        DatabaseUtils.setInt(pst, ++i, targetSprint);
        DatabaseUtils.setInt(pst, ++i, loeRemaining);
        DatabaseUtils.setInt(pst, ++i, assignedPriority);
        if (linkModuleId > -1 && linkItemId > -1) {
            pst.setInt(++i, linkModuleId);
            pst.setInt(++i, linkItemId);
        }
        pst.execute();
        this.id = DatabaseUtils.getCurrVal(db, "task_task_id_seq", -1);
        pst.close();
        if (this.getContactId() != -1) {
        // insertContacts(db, true);
        }
        // Log the task
        TaskLog taskLog = new TaskLog(this);
        taskLog.insert(db);
        // Link it to the appropriate project
        if (projectId > -1) {
            insertProjectLink(db);
        }
        if (commit) {
            db.commit();
        }
    } catch (SQLException e) {
        if (commit) {
            db.rollback();
        }
        throw e;
    } finally {
        if (commit) {
            db.setAutoCommit(true);
        }
    }
    return true;
}
