private SliceLimits getSliceLimits(double tMin, double tMax) {
    final SliceLimits result = new SliceLimits();
    // origin of 0,0 present in every slice
    double xMin = 0;
    // (it's the pie center/slice pivot point)
    double xMax = 0;
    double yMin = 0;
    double yMax = 0;
    double tmp = 0;
    // points where each edge intersects the arc could be
    // extremal points--include them too.
    tmp = Math.cos(tMin);
    xMin = (xMin < tmp) ? xMin : tmp;
    xMax = (xMax > tmp) ? xMax : tmp;
    tmp = Math.sin(tMin);
    yMin = (yMin < tmp) ? yMin : tmp;
    yMax = (yMax > tmp) ? yMax : tmp;
    tmp = Math.cos(tMax);
    xMin = (xMin < tmp) ? xMin : tmp;
    xMax = (xMax > tmp) ? xMax : tmp;
    tmp = Math.sin(tMax);
    yMin = (yMin < tmp) ? yMin : tmp;
    yMax = (yMax > tmp) ? yMax : tmp;
    // finally if slice includes any special extreme points
    // on the arc (namely, points of the arc that are
    // either due north, due south, due east or due west)
    // include those points in determining the min/max x
    // and min/max y included in the slice:
    double halfPi = Math.PI / 2.;
    for (int i = (int) Math.ceil(tMin / halfPi); i * halfPi < tMax; i++) {
        double t = i * halfPi;
        tmp = Math.cos(t);
        xMin = (xMin < tmp) ? xMin : tmp;
        xMax = (xMax > tmp) ? xMax : tmp;
        tmp = Math.sin(t);
        yMin = (yMin < tmp) ? yMin : tmp;
        yMax = (yMax > tmp) ? yMax : tmp;
    }
    result.xMin = xMin;
    result.xMax = xMax;
    result.yMin = yMin;
    result.yMax = yMax;
    return result;
}
