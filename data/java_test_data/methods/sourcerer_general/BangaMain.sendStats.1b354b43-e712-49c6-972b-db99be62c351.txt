public int sendStats() {
    // posted new code here
    // building stats report
    // get clientID
    String clientId = "";
    try {
        BufferedReader idReader = new BufferedReader(new InputStreamReader(openFileInput("clientId.txt")));
        // BufferedReader idReader = new BufferedReader( new FileReader("clientId.txt"));
        clientId = idReader.readLine();
    } catch (FileNotFoundException e) {
        // TODO Auto-generated catch block
        Log.d(TAG, "file not found in read");
        e.printStackTrace();
    } catch (IOException e) {
        // TODO Auto-generated catch block
        Log.d(TAG, "io exception in read");
        e.printStackTrace();
    }
    // see if we got it
    Log.d(TAG, "in sendStats cId: " + clientId);
    String report = "{\"client\":\"" + clientId + "\",\"stats\":[";
    DBHelper db = new DBHelper(this);
    db.open();
    Log.d(TAG, "after new dbhelper");
    List<GameStat> gameStatList = db.getAllGameStats();
    db.close();
    Log.d(TAG, "after getAllGameStats");
    for (GameStat gs : gameStatList) {
        List<CardStat> cardStatList = gs.getCardStatList();
        if (cardStatList.size() > 0) {
            // create an object for each game stat
            report += "{";
            // add the name of the Deck
            {
                String deckName = cardStatList.get(0).getDeckName();
                report += "\"deck name\":\"" + deckName + "\",";
            }
            // add the number of right answers
            {
                report += "\"number right\":" + Integer.toString(gs.getNumCorrect()) + ",";
            // numRightTextView.setText(Integer.toString(gs.getNumCorrect()));
            }
            // add the number of wrong answers
            {
                report += "\"number wrong\":" + Integer.toString(gs.getNumWrong()) + ",";
            // numWrongTextView.setText(Integer.toString(gs.getNumWrong()));
            }
            // fill in the date played
            {
                // report+="\"date played\":\""+DateFormat.format("MM/dd/yy",new Date(gs.getCompletionTimestamp()))+"\"";
                report += "\"date played\":\"" + DateFormat.getDateInstance().format(new Date(gs.getCompletionTimestamp())) + "\"";
            // CharSequence datePlayed=DateFormat.getDateInstance().format(new Date(gs.getCompletionTimestamp()));
            // CharSequence datePlayed = DateFormat.format("MM/dd/yy", new Date(gs.getCompletionTimestamp()));
            }
            // close off object
            report += "},";
        }
    }
    // remove last comma
    report = report.substring(0, report.length() - 1);
    // close off report
    report += "]}";
    Log.d(TAG, "stats: " + report);
    try {
        // URL url = new URL ("http://10.0.2.2:8080/report");
        URL url = new URL("http://bangasite.appspot.com/report");
        // 10.0.2.2 is the local host as seen from Android emulator
        // URL connection channel.
        HttpURLConnection urlConn = (HttpURLConnection) url.openConnection();
        // Let the run-time system (RTS) know that we want input.
        urlConn.setDoInput(true);
        // Let the RTS know that we want to do output.
        urlConn.setDoOutput(true);
        // want POST method
        urlConn.setRequestMethod("POST");
        // Send POST output.
        DataOutputStream printout = new DataOutputStream(urlConn.getOutputStream());
        String data = URLEncoder.encode("report", "UTF-8") + "=";
        printout.writeBytes(data);
        printout.writeBytes(report);
        printout.flush();
        printout.close();
        // getting the response is required to force the request,otherwise it might not even be sent at all
        BufferedReader in = new BufferedReader(new InputStreamReader(urlConn.getInputStream()));
        // setting up the reader is enough; don't have to use it
        myString = "Your Stats Have Been Sent";
    } catch (Exception e) {
        /* On any Error we want to display it. */
        myString = e.getMessage();
    }
    Toast.makeText(this, myString, Toast.LENGTH_LONG).show();
    return counter;
// getting the command string then splitting it
// possible trouble: it may be that the header of the response from GAE
// (which describes the file being downloaded) will get in the way of this
// code working, since it looks as if this code just takes the actual bytes
// in the file and nothing else. If this happens, try commenting out the
// GAE code that sends the header
// last brace
}
