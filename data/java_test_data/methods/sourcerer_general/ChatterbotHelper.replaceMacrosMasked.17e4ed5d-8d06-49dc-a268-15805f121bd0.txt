private static String replaceMacrosMasked(String s, String lang) {
    Map<String, String> macroMap = null;
    lang = lang.toUpperCase();
    if (lang.equals("EN")) {
        macroMap = macroMapEN;
    } else if (lang.equals("DE")) {
        macroMap = macroMapDE;
    } else if (lang.equals("IT")) {
        macroMap = macroMapIT;
    } else {
        log.debug("Error in replaceMacrosMasked(): lang = " + lang);
    }
    if (macroMap == null) {
        log.fatal("Illegal macro map -- language " + lang + " was not initalized!");
        throw new IllegalArgumentException("Language " + lang + " was not initialized!");
    }
    Reader reader;
    macroParser_Lexer lexer;
    String result = "";
    reader = new StringReader(s);
    lexer = new macroParser_Lexer(reader);
    macroParser_Parser parser = new macroParser_Parser(lexer);
    try {
        parser.string();
        AST ast = parser.getAST();
        AST firstchild = ast;
        // move down first.
        if (ast.getType() == STRING_) {
            firstchild = ast.getFirstChild();
        }
        do {
            if (firstchild.getType() == MACRO) {
                String key = firstchild.getFirstChild().toString();
                if (macroMap.get(key.substring(1, key.length() - 1)) != null) {
                    result += macroMap.get(key.substring(1, key.length() - 1));
                } else {
                    result += ("----MacroNotFound-" + key.substring(1, key.length() - 1) + "----");
                    log.warn("MacroNotFound: " + key);
                }
            } else if (firstchild.getType() == NON_MACRO) {
                result += firstchild.getFirstChild().toString();
            }
        } while ((firstchild = firstchild.getNextSibling()) != null);
    } catch (RecognitionException e) {
        log.error(e.toString() + ": " + e.getMessage());
    } catch (TokenStreamException e) {
        log.error(e.toString() + ": " + e.getMessage());
    }
    return result;
}
