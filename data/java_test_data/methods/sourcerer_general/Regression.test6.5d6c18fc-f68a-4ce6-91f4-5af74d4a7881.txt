public void test6(Model m) {
    String test = "Test6";
    int n = 0;
    int num = 5;
    int numStatements;
    // System.out.println("Beginning " + test);
    Resource[] subject = new Resource[num];
    Property[] predicate = new Property[num];
    Statement[] stmts = new Statement[num * num];
    String suri = "http://aldabaran/test6/s";
    String puri = "http://aldabaran/test6/";
    try {
        for (int i = 0; i < num; i++) {
            subject[i] = m.createResource(suri + Integer.toString(i));
            predicate[i] = m.createProperty(puri + Integer.toString(i), "p");
        }
        n = 50;
        if (m.size() != 0)
            error(test, n);
        for (int i = 0; i < num; i++) {
            for (int j = 0; j < num; j++) {
                Statement stmt = m.createStatement(subject[i], predicate[j], m.createTypedLiteral(i * num + j));
                m.add(stmt);
                m.add(stmt);
                stmts[i * num + j] = stmt;
            }
        }
        int numStmts = num * num;
        boolean[] stmtf = new boolean[numStmts];
        boolean[] subjf = new boolean[num];
        boolean[] predf = new boolean[num];
        n = 100;
        n++;
        if (m.size() != numStmts)
            error(test, n);
        for (int i = 0; i < numStmts; i++) {
            stmtf[i] = false;
        }
        for (int i = 0; i < num; i++) {
            subjf[i] = false;
            predf[i] = false;
        }
        boolean found = false;
        ResIterator rIter = m.listSubjects();
        while (rIter.hasNext()) {
            Resource subj = rIter.nextResource();
            found = false;
            for (int i = 0; i < num; i++) {
                if (subj.equals(subject[i])) {
                    found = true;
                    if (subjf[i])
                        error(test, 110);
                    subjf[i] = true;
                }
            }
            if (!found)
                error(test, 120);
        }
        for (int i = 0; i < num; i++) {
            if (!subjf[i])
                error(test, 120 + i);
        }
        // System.err.println( "WARNING: listNameSpace testing wonky for the moment" );
        // NsIterator nIter = m.listNameSpaces();
        // HashSet fromIterator = new HashSet();
        // HashSet fromPredicates = new HashSet();
        // while (nIter.hasNext()) fromIterator.add( nIter.next() );
        // for (int i = 0; i < num; i += 1) fromPredicates.add( predicate[i].getNameSpace() );
        // if (fromIterator.equals( fromPredicates ))
        // {}
        // else
        // {
        // System.err.println( "| oh dear." );
        // System.err.println( "|  predicate namespaces: " + fromPredicates );
        // System.err.println( "|  iterator namespaces: " + fromIterator );
        // }
        NsIterator nIter = m.listNameSpaces();
        while (nIter.hasNext()) {
            String ns = nIter.nextNs();
            found = false;
            for (int i = 0; i < num; i++) {
                if (ns.equals(predicate[i].getNameSpace())) {
                    found = true;
                    if (predf[i])
                        error(test, 130);
                    predf[i] = true;
                }
            }
            if (!found)
                error(test, 140);
        }
        for (int i = 0; i < num; i++) {
            if (!predf[i])
                error(test, 140 + i);
        }
        StmtIterator sIter = m.listStatements();
        while (sIter.hasNext()) {
            Statement stmt = sIter.nextStatement();
            found = false;
            for (int i = 0; i < numStmts; i++) {
                if (stmt.equals(stmts[i])) {
                    found = true;
                    if (stmtf[i])
                        error(test, 150);
                    stmtf[i] = true;
                }
            }
            if (!found)
                error(test, 160);
        }
        for (int i = 0; i < numStmts; i++) {
            if (!stmtf[i])
                error(test, 160 + i);
        }
        // SEE the tests in model.test: TestReifiedStatements and TestStatementResources
        // {
        // System.err.println( "WARNING: reification testing suppressed for the moment" );
        // /* Reification is not working properly
        // 
        // for (int i=0; i<num; i++) {
        // stmtf[i] = false;
        // m.add(stmts[i], predicate[i], i);
        // }
        // sIter = m.listReifiedStatements();
        // while (sIter.hasNext()) {
        // Statement stmt = sIter.next();
        // found = false;
        // for (int i=0; i<num; i++) {
        // if (stmt.equals(stmts[i])) {
        // found = true;
        // if (stmtf[i]) error(test, 200);
        // stmtf[i] = true;
        // }
        // }
        // if (! found) error(test, 210);
        // }
        // for (int i=0; i<num; i++) {
        // if (! stmtf[i]) error(test, 220+i);
        // } */
        // }
        {
            NodeIterator iter;
            boolean[] object = new boolean[num * num];
            n = 300;
            for (int i = 0; i < (num * num); i++) {
                object[i] = false;
            }
            iter = m.listObjectsOfProperty(predicate[0]);
            while (iter.hasNext()) {
                Literal l = (Literal) iter.nextNode();
                int i = l.getInt();
                object[i] = true;
            }
            for (int i = 0; i < (num * num); i++) {
                if ((i % num) == 0) {
                    if (!object[i])
                        error(test, 300 + i);
                } else {
                    if (object[i])
                        error(test, 350 + i);
                }
            }
        }
        {
            NodeIterator iter;
            boolean[] object = new boolean[num];
            n = 400;
            Resource subj = m.createResource();
            for (int i = 0; i < num; i++) {
                m.addLiteral(subj, RDF.value, i);
                object[i] = false;
            }
            iter = m.listObjectsOfProperty(subj, RDF.value);
            while (iter.hasNext()) {
                int i = ((Literal) iter.nextNode()).getInt();
                object[i] = true;
            }
            for (int i = 0; i < (num); i++) {
                if (!object[i])
                    error(test, n + i);
            }
        }
        {
            int count = 0;
            NodeIterator iter;
            n = 500;
            iter = m.listObjects();
            while (iter.hasNext()) {
                iter.nextNode();
                count++;
            }
            if (!(count == 25)) {
                System.err.println(">> count = " + count);
                error(test, n + count);
            }
        }
    } catch (Exception e) {
        logger.error("test " + test + "[" + n + "]", e);
        errors = true;
        throw new RuntimeException(e);
    }
// System.out.println("End of " + test);
}
