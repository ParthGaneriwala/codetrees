private void decodeCompressedRGB() throws JimiException, IOException {
    int i;
    // buffer to read compressed scanline data into
    byte[] packed;
    // buffer to unpack data into.
    byte[] ubuf;
    // there are a total of rows * channels scanlines....
    // each scanline is columns wide....
    ubuf = new byte[psdFH.columns];
    packed = new byte[maxSLLen_];
    int progressRoof = psdFH.rows * 3;
    int rows = psdFH.rows;
    // Actually read/unpack/save the image data
    for (i = 0; i < psdFH.rows; ++i) {
        dIn.readFully(packed, 0, scanlineLengths_[i]);
        Packbits.unpackbits(packed, ubuf);
        // put red buffer.
        ji.setChannel(ChanneledIntRasterImage.CHANNEL_RED, i, ubuf);
        setProgress((i * 100) / progressRoof);
    }
    for (i = 0; i < psdFH.rows; ++i) {
        dIn.readFully(packed, 0, scanlineLengths_[i + psdFH.rows]);
        Packbits.unpackbits(packed, ubuf);
        // put green buffer.
        ji.setChannel(ChanneledIntRasterImage.CHANNEL_GREEN, i, ubuf);
        setProgress(((rows + i) * 100) / progressRoof);
    }
    for (i = 0; i < psdFH.rows; ++i) {
        dIn.readFully(packed, 0, scanlineLengths_[i + (2 * psdFH.rows)]);
        Packbits.unpackbits(packed, ubuf);
        // put blue buffer.
        ji.setChannel(ChanneledIntRasterImage.CHANNEL_BLUE, i, ubuf);
        setProgress(((rows * 2 + i) * 100) / progressRoof);
    }
    // image has alpha channel?
    if (psdFH.channels >= 4) {
        for (i = 0; i < psdFH.rows; ++i) {
            dIn.readFully(packed, 0, scanlineLengths_[i + (3 * psdFH.rows)]);
            Packbits.unpackbits(packed, ubuf);
            ji.setChannel(ChanneledIntRasterImage.CHANNEL_ALPHA, i, ubuf);
            setProgress(((rows * 3 + i) * 100) / progressRoof);
        }
    }
}
