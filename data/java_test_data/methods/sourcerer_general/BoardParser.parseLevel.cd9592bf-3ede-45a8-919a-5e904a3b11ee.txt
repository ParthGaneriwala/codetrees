public static Board parseLevel(int map_id) throws IllegalArgumentException, FileNotFoundException {
    Scanner map_scan;
    Board parsed;
    String path_temp = DIR + "lvl" + map_id + ".board";
    try {
        map_scan = new Scanner(new File(path_temp));
    } catch (FileNotFoundException e) {
        throw new FileNotFoundException("bad level number: " + path_temp);
    }
    int max_time = 0, n = 0, max_chip = 0;
    String next_line;
    /* pull the first few lines of the file to get enough information to
	 * create a new board
	 */
    if (map_scan.hasNextInt()) {
        max_time = map_scan.nextInt();
    } else {
        throw new IllegalArgumentException("bad map file synxtax for max time " + path_temp);
    }
    if (map_scan.hasNextInt()) {
        n = map_scan.nextInt();
    } else {
        throw new IllegalArgumentException("bad map file synxtax for board size " + path_temp);
    }
    if (map_scan.hasNextInt()) {
        max_chip = map_scan.nextInt();
    } else {
        throw new IllegalArgumentException("bad map file synxtax for max chips " + path_temp);
    }
    parsed = new Board(n, max_time, max_chip);
    /*
	 * now that we have a board to actually populate, we finish off the
	 * file.
	 */
    char[] read_temp;
    int col = 0;
    Tile tile_temp = null;
    while (map_scan.hasNextLine()) {
        read_temp = (map_scan.nextLine()).toCharArray();
        for (int row = 0; row < read_temp.length; row++) {
            switch(read_temp[row]) {
                case WALL:
                    tile_temp = new WallTile();
                    break;
                case NORM:
                    tile_temp = null;
                    break;
                /* movable dirt blocks are not implemented yet */
                case DIRT:
                    tile_temp = null;
                    break;
                case H2O:
                    tile_temp = new WaterTile();
                    break;
                case FIRE:
                    tile_temp = new FireTile();
                    break;
                case ICEY:
                    tile_temp = new IceTile();
                    break;
                case MOVE_U:
                    tile_temp = new MoveTile(Types.Direct.UP);
                    break;
                case MOVE_D:
                    tile_temp = new MoveTile(Types.Direct.DOWN);
                    break;
                case MOVE_L:
                    tile_temp = new MoveTile(Types.Direct.LEFT);
                    break;
                case MOVE_R:
                    tile_temp = new MoveTile(Types.Direct.RIGHT);
                    break;
                case DONE:
                    tile_temp = new EndTile();
                    break;
                case PLAYER:
                    parsed.setInitPlayerPos(col, row);
                    continue;
                case R_DOOR:
                    tile_temp = new DoorTile(Types.Item.R_KEY);
                    break;
                case Y_DOOR:
                    tile_temp = new DoorTile(Types.Item.Y_KEY);
                    break;
                case B_DOOR:
                    tile_temp = new DoorTile(Types.Item.B_KEY);
                    break;
                case G_DOOR:
                    tile_temp = new DoorTile(Types.Item.G_KEY);
                    break;
                case R_KEY:
                    tile_temp = new NormalTile(Types.Item.R_KEY);
                    break;
                case Y_KEY:
                    tile_temp = new NormalTile(Types.Item.Y_KEY);
                    break;
                case B_KEY:
                    tile_temp = new NormalTile(Types.Item.B_KEY);
                    break;
                case G_KEY:
                    tile_temp = new NormalTile(Types.Item.G_KEY);
                    break;
                case F_BOOT:
                    tile_temp = new NormalTile(Types.Item.F_BOOT);
                    break;
                case W_BOOT:
                    tile_temp = new NormalTile(Types.Item.W_BOOT);
                    break;
                case M_BOOT:
                    tile_temp = new NormalTile(Types.Item.M_BOOT);
                    break;
                case I_BOOT:
                    tile_temp = new NormalTile(Types.Item.I_BOOT);
                    break;
                case CHIP:
                    tile_temp = new NormalTile(Types.Item.CHIP);
                    break;
                default:
                    throw new IllegalArgumentException("body of map file contains illegal character: " + read_temp[row]);
            }
            parsed.setTile(col, row, tile_temp);
        }
        col++;
    }
    return parsed;
}
