public void process_demand(RdpPacket_Localised data) throws UnsupportedEncodingException, RdesktopException, IOException, CryptoException {
    byte[] null_data = new byte[Secure.SEC_MODULUS_SIZE];
    byte[] server_random = new byte[Secure.SEC_RANDOM_SIZE];
    byte[] host = Options.hostname.getBytes("US-ASCII");
    byte[] user = Options.username.getBytes("US-ASCII");
    /*retrieve the server random */
    data.copyToByteArray(server_random, 0, data.getPosition(), server_random.length);
    data.incrementPosition(server_random.length);
    /* Null client keys are currently used */
    this.generate_keys(null_data, server_random, null_data);
    if (!Options.built_in_licence && Options.load_licence) {
        byte[] licence_data = load_licence();
        if ((licence_data != null) && (licence_data.length > 0)) {
            logger.debug("licence_data.length = " + licence_data.length);
            /* Generate a signature for the HWID buffer */
            byte[] hwid = generate_hwid();
            byte[] signature = secure.sign(this.licence_sign_key, 16, 16, hwid, hwid.length);
            /*now crypt the hwid */
            RC4 rc4_licence = new RC4();
            byte[] crypt_key = new byte[this.licence_key.length];
            byte[] crypt_hwid = new byte[LICENCE_HWID_SIZE];
            System.arraycopy(this.licence_key, 0, crypt_key, 0, this.licence_key.length);
            rc4_licence.engineInitEncrypt(crypt_key);
            rc4_licence.crypt(hwid, 0, LICENCE_HWID_SIZE, crypt_hwid, 0);
            present(null_data, null_data, licence_data, licence_data.length, crypt_hwid, signature);
            logger.debug("Presented stored licence to server!");
            return;
        }
    }
    this.send_request(null_data, null_data, user, host);
}
