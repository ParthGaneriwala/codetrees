protected void parse(Element element) {
    String rootElementName = element.getTagName();
    if (!rootElementName.equals(CONFIGURATION_TAG)) {
        if (rootElementName.equals(OLD_CONFIGURATION_TAG)) {
            LogLog.warn("The <" + OLD_CONFIGURATION_TAG + "> element has been deprecated.");
            LogLog.warn("Use the <" + CONFIGURATION_TAG + "> element instead.");
        } else {
            LogLog.error("DOM element is - not a <" + CONFIGURATION_TAG + "> element.");
            return;
        }
    }
    String debugAttrib = subst(element.getAttribute(INTERNAL_DEBUG_ATTR));
    LogLog.debug("debug attribute= \"" + debugAttrib + "\".");
    // "debug" attribute is returned as the empty string.
    if (!debugAttrib.equals("") && !debugAttrib.equals("null")) {
        LogLog.setInternalDebugging(OptionConverter.toBoolean(debugAttrib, true));
    } else {
        LogLog.debug("Ignoring " + INTERNAL_DEBUG_ATTR + " attribute.");
    }
    String confDebug = subst(element.getAttribute(CONFIG_DEBUG_ATTR));
    if (!confDebug.equals("") && !confDebug.equals("null")) {
        LogLog.warn("The \"" + CONFIG_DEBUG_ATTR + "\" attribute is deprecated.");
        LogLog.warn("Use the \"" + INTERNAL_DEBUG_ATTR + "\" attribute instead.");
        LogLog.setInternalDebugging(OptionConverter.toBoolean(confDebug, true));
    }
    String thresholdStr = subst(element.getAttribute(THRESHOLD_ATTR));
    LogLog.debug("Threshold =\"" + thresholdStr + "\".");
    if (!"".equals(thresholdStr) && !"null".equals(thresholdStr)) {
        repository.setThreshold(thresholdStr);
    }
    // Hashtable appenderBag = new Hashtable(11);
    /* Building Appender objects, placing them in a local namespace
       for future reference */
    // First configure each category factory under the root element.
    // Category factories need to be configured before any of
    // categories they support.
    // 
    String tagName = null;
    Element currentElement = null;
    Node currentNode = null;
    NodeList children = element.getChildNodes();
    final int length = children.getLength();
    for (int loop = 0; loop < length; loop++) {
        currentNode = children.item(loop);
        if (currentNode.getNodeType() == Node.ELEMENT_NODE) {
            currentElement = (Element) currentNode;
            tagName = currentElement.getTagName();
            if (tagName.equals(CATEGORY_FACTORY_TAG)) {
                parseCategoryFactory(currentElement);
            }
        }
    }
    for (int loop = 0; loop < length; loop++) {
        currentNode = children.item(loop);
        if (currentNode.getNodeType() == Node.ELEMENT_NODE) {
            currentElement = (Element) currentNode;
            tagName = currentElement.getTagName();
            if (tagName.equals(CATEGORY) || tagName.equals(LOGGER)) {
                parseCategory(currentElement);
            } else if (tagName.equals(ROOT_TAG)) {
                parseRoot(currentElement);
            } else if (tagName.equals(RENDERER_TAG)) {
                parseRenderer(currentElement);
            }
        }
    }
}
