protected static void addBottomControls(Composite jp) {
    final Composite control_panel = new Composite(jp, SWT.NONE);
    control_panel.setLayout(new GridLayout());
    control_panel.setLayoutData(new GridData(GridData.BEGINNING | GridData.HORIZONTAL_ALIGN_BEGINNING));
    Composite vertex_panel = new Composite(control_panel, SWT.NONE);
    vertex_panel.setLayout(new GridLayout());
    vertex_panel.setLayoutData(new GridData(GridData.BEGINNING | GridData.HORIZONTAL_ALIGN_BEGINNING));
    Composite edge_panel = new Composite(control_panel, SWT.NONE);
    edge_panel.setLayout(new GridLayout());
    edge_panel.setLayoutData(new GridData(GridData.BEGINNING | GridData.HORIZONTAL_ALIGN_BEGINNING));
    Composite both_panel = new Composite(control_panel, SWT.NONE);
    both_panel.setLayout(new GridLayout());
    both_panel.setLayoutData(new GridData(GridData.BEGINNING | GridData.HORIZONTAL_ALIGN_BEGINNING));
    Listener actionListener = new Listener() {

        public void handleEvent(Event e) {
            if (e.type == SWT.Selection) {
                Button source = (Button) (e.widget);
                if (source == v_color) {
                    if (source.getSelection()) {
                        pr.setVertexColorFunction(vcf_degree);
                    } else {
                        pr.setVertexColorFunction(vcf_constant);
                    }
                } else if (source == e_color) {
                    ewcs.setWeighted(source.getSelection());
                } else if (source == v_stroke) {
                    vsh.setHighlight(source.getSelection());
                } else if (source == v_labels) {
                    if (source.getSelection()) {
                        pr.setVertexStringer(vs);
                    } else {
                        pr.setVertexStringer(vs_none);
                    }
                } else if (source == e_labels) {
                    if (source.getSelection()) {
                        pr.setEdgeStringer(es);
                    } else {
                        pr.setEdgeStringer(es_none);
                    }
                } else if (source == e_arrow_pred) {
                    if (source.getSelection()) {
                        pr.setEdgeArrowPredicate(TruePredicate.getInstance());
                    } else {
                        pr.setEdgeArrowPredicate(Graph.DIRECTED_EDGE);
                    }
                } else if (source == font) {
                    ff.setBold(source.getSelection());
                } else if (source == v_shape) {
                    vssa.useFunnyShapes(source.getSelection());
                } else if (source == v_size) {
                    vssa.setScaling(source.getSelection());
                } else if (source == v_aspect) {
                    vssa.setStretching(source.getSelection());
                } else if (source == e_show_d) {
                    show_edge.showDirected(source.getSelection());
                } else if (source == e_show_u) {
                    show_edge.showUndirected(source.getSelection());
                } else if (source == v_small) {
                    show_vertex.filterSmall(source.getSelection());
                }
                gd.getVisualizationViewer().redraw();
            }
        }
    };
    v_color = new Button(vertex_panel, SWT.CHECK);
    // $NON-NLS-1$
    v_color.setText("vertex seed coloring");
    v_color.addListener(SWT.Selection, actionListener);
    v_stroke = new Button(vertex_panel, SWT.CHECK);
    // $NON-NLS-1$
    v_stroke.setText("vertex selection stroke highlighting");
    v_stroke.addListener(SWT.Selection, actionListener);
    v_labels = new Button(vertex_panel, SWT.CHECK);
    // $NON-NLS-1$
    v_labels.setText("show vertex ranks (voltages)");
    v_labels.addListener(SWT.Selection, actionListener);
    v_shape = new Button(vertex_panel, SWT.CHECK);
    // $NON-NLS-1$
    v_shape.setText("vertex degree shapes");
    v_shape.addListener(SWT.Selection, actionListener);
    v_size = new Button(vertex_panel, SWT.CHECK);
    // $NON-NLS-1$
    v_size.setText("vertex voltage size");
    v_size.addListener(SWT.Selection, actionListener);
    v_aspect = new Button(vertex_panel, SWT.CHECK);
    // $NON-NLS-1$
    v_aspect.setText("vertex degree ratio stretch");
    v_aspect.addListener(SWT.Selection, actionListener);
    v_small = new Button(vertex_panel, SWT.CHECK);
    // $NON-NLS-1$
    v_small.setText("filter vertices of degree < " + VertexDisplayPredicate.MIN_DEGREE);
    v_small.addListener(SWT.Selection, actionListener);
    e_color = new Button(edge_panel, SWT.CHECK);
    // $NON-NLS-1$
    e_color.setText("edge weight highlighting");
    e_color.addListener(SWT.Selection, actionListener);
    e_labels = new Button(edge_panel, SWT.CHECK);
    // $NON-NLS-1$
    e_labels.setText("show edge weights");
    e_labels.addListener(SWT.Selection, actionListener);
    e_arrow_pred = new Button(edge_panel, SWT.CHECK);
    // $NON-NLS-1$
    e_arrow_pred.setText("show undirected edge arrows");
    e_arrow_pred.addListener(SWT.Selection, actionListener);
    e_show_d = new Button(edge_panel, SWT.CHECK);
    // $NON-NLS-1$
    e_show_d.setText("show directed edges");
    e_show_d.addListener(SWT.Selection, actionListener);
    e_show_d.setSelection(true);
    e_show_u = new Button(edge_panel, SWT.CHECK);
    // $NON-NLS-1$
    e_show_u.setText("show undirected edges");
    e_show_u.addListener(SWT.Selection, actionListener);
    e_show_u.setSelection(true);
    font = new Button(both_panel, SWT.CHECK);
    // $NON-NLS-1$
    font.setText("bold text");
    font.addListener(SWT.Selection, actionListener);
    restart = new Button(both_panel, SWT.PUSH);
    // $NON-NLS-1$
    restart.setText("Restart Layout");
    restart.addSelectionListener(new SelectionListener() {

        public void widgetSelected(SelectionEvent e) {
            if (!gd.getVisualizationViewer().isVisRunnerRunning()) {
                gd.getVisualizationViewer().restart();
            }
        }

        public void widgetDefaultSelected(SelectionEvent e) {
            widgetSelected(e);
        }
    });
}
