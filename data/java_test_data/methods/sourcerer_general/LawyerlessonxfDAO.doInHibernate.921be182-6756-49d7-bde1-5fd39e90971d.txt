public Object doInHibernate(Session session) {
    String sql = "";
    String condition = "";
    if (title != null && !title.equals(""))
        condition = " and title like '%" + title + "%'";
    if (field != null && !"".equals(field)) {
        sql = "select a.dabiaofen,a.lawyername ,a.lawyerid,b.GROUPID ,0.00 AS xianchang,0.00 AS video,0.00 AS doc,0.00 AS budeng,0.00 AS koufen,0.00 AS zongjifen,a.localfen from lawyers a inner join sys_group b on a.theoffice = b.GROUPID where not exists (select distinct lawyerid from lawyerlessonxf c where a.lawyerid=c.lawyerid " + condition + " and a.lawyertype>=0 and c.theyear=" + year + " and c." + field + "=" + fieldvalue + ") ";
    } else {
        sql = "select a.dabiaofen,a.lawyername ,a.lawyerid,b.GROUPID ,0.00 AS xianchang,0.00 AS video,0.00 AS doc,0.00 AS budeng,0.00 AS koufen,0.00 AS zongjifen,a.localfen from lawyers a inner join sys_group b on a.theoffice = b.GROUPID where not exists (select distinct lawyerid from lawyerlessonxf c where a.lawyerid=c.lawyerid " + condition + " and a.lawyertype>=0 and c.theyear=" + year + ") ";
    }
    // }
    if (officename != null && !"".equals(officename)) {
        sql += " and b.groupname like '" + officename + "%'";
    }
    if (username != null && !"".equals(username)) {
        sql += " and a.lawyername like '" + username + "%'";
    }
    if (lawyerno != null && !"".equals(lawyerno)) {
        sql += " and a.lawyerno like '" + lawyerno + "%'";
    }
    if (field != null && !"".equals(field)) {
        if (field.equals("officeid"))
            sql += " and a.theoffice =" + fieldvalue;
        else if (field.equals("cityid"))
            sql += " and a.directunion =" + fieldvalue;
        else
            sql += " and a.provinceunion =" + fieldvalue;
    }
    String coutnsql = "select count(*) from (" + sql + ") a";
    int totalCount = getCountBySqlQuery(coutnsql);
    sql += " order by b.groupid";
    _LOG.info("未培训数的统计SQL:" + sql);
    // .addEntity(Jifentongji.class);
    Query queryObject = session.createSQLQuery(sql);
    int startIndex = (pageNo - 1) * pageSize;
    List items = queryObject.setFirstResult(startIndex).setMaxResults(pageSize).list();
    List newlist = new ArrayList();
    for (int i = 0; items != null && i < items.size(); i++) {
        Object[] obj = (Object[]) items.get(i);
        newlist.add(getTongjiObject(obj));
    }
    PaginationSupport ps = new PaginationSupport(newlist, totalCount, pageSize, startIndex);
    return ps;
}
