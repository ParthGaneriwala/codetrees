public List<ScoredOutcome<String>> score(List<Feature> features, int maxResults) {
    List<ScoredOutcome<String>> scores = new ArrayList<ScoredOutcome<String>>();
    String position = (String) features.get(0).getValue();
    if (features.size() == 1) {
        scores.add(new ScoredOutcome<String>("A", 1));
        scores.add(new ScoredOutcome<String>("B", 1));
        scores.add(new ScoredOutcome<String>("C", 2));
        return scores;
    }
    String previousLabel = (String) features.get(1).getValue();
    int previousLabelWeight = previousLabelWeights.get(previousLabel);
    if (position.equals("1")) {
        scores.add(new ScoredOutcome<String>("D", 2 + previousLabelWeight));
        scores.add(new ScoredOutcome<String>("E", 3 + previousLabelWeight));
        scores.add(new ScoredOutcome<String>("F", 3 + previousLabelWeight));
        return scores;
    }
    if (position.equals("2")) {
        scores.add(new ScoredOutcome<String>("G", 4 + previousLabelWeight));
        scores.add(new ScoredOutcome<String>("H", 4 + previousLabelWeight));
        scores.add(new ScoredOutcome<String>("I", 5 + previousLabelWeight));
        return scores;
    }
    if (position.equals("3")) {
        scores.add(new ScoredOutcome<String>("J", 5 + previousLabelWeight));
        scores.add(new ScoredOutcome<String>("K", 6 + previousLabelWeight));
        scores.add(new ScoredOutcome<String>("L", 6 + previousLabelWeight));
        return scores;
    }
    if (position.equals("4")) {
        scores.add(new ScoredOutcome<String>("M", 7 + previousLabelWeight));
        scores.add(new ScoredOutcome<String>("N", 7 + previousLabelWeight));
        scores.add(new ScoredOutcome<String>("O", 8 + previousLabelWeight));
        return scores;
    }
    Assert.fail("Invalid position");
    return scores;
}
