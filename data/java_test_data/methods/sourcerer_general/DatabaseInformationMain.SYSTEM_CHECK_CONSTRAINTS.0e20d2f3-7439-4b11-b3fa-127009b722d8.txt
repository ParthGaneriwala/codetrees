final Table SYSTEM_CHECK_CONSTRAINTS() throws HsqlException {
    Table t = sysTables[SYSTEM_CHECK_CONSTRAINTS];
    if (t == null) {
        t = createBlankTable(sysTableHsqlNames[SYSTEM_CHECK_CONSTRAINTS]);
        addColumn(t, "CONSTRAINT_CATALOG", Types.VARCHAR);
        addColumn(t, "CONSTRAINT_SCHEMA", Types.VARCHAR);
        // not null
        addColumn(t, "CONSTRAINT_NAME", Types.VARCHAR, false);
        // not null
        addColumn(t, "CHECK_CLAUSE", Types.VARCHAR, false);
        // false PK, as FKTABLE_CAT, FKTABLE_SCHEM and/or FK_NAME
        // may be null
        t.createPrimaryKey(null, new int[] { 0, 1, 2 }, false);
        return t;
    }
    // calculated column values
    // Intermediate holders
    Iterator tables;
    Table table;
    Constraint[] tableConstraints;
    int constraintCount;
    Constraint constraint;
    HsqlArrayList constraintList;
    Object[] row;
    // column number mappings
    final int icons_cat = 0;
    final int icons_schem = 1;
    final int icons_name = 2;
    final int icons_clause = 3;
    tables = database.schemaManager.allTablesIterator();
    constraintList = new HsqlArrayList();
    while (tables.hasNext()) {
        table = (Table) tables.next();
        if (!isAccessibleTable(table)) {
            continue;
        }
        tableConstraints = table.getConstraints();
        constraintCount = tableConstraints.length;
        for (int i = 0; i < constraintCount; i++) {
            constraint = (Constraint) tableConstraints[i];
            if (constraint.getType() == Constraint.CHECK) {
                constraintList.add(constraint);
            }
        }
    }
    for (int i = 0; i < constraintList.size(); i++) {
        row = t.getEmptyRowData();
        constraint = (Constraint) constraintList.get(i);
        table = constraint.getMain();
        row[icons_cat] = ns.getCatalogName(table);
        row[icons_schem] = table.getSchemaName();
        row[icons_name] = constraint.constName.name;
        try {
            row[icons_clause] = constraint.core.check.getDDL();
        } catch (Exception e) {
        }
        t.insertSys(row);
    }
    t.setDataReadOnly(true);
    return t;
}
