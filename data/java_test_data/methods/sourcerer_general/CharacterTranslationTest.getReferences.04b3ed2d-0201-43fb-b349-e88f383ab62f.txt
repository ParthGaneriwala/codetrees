public CharacterReference[] getReferences() {
    final String class_name = "CharacterEntityReferenceList";
    String paths;
    String path;
    String source;
    PrintWriter out;
    Generate generate;
    SimpleClassLoader loader;
    Class hello;
    Field field;
    CharacterReference[] ret;
    ret = mReferences;
    if (null == ret) {
        paths = System.getProperty("java.class.path");
        path = System.getProperty("user.home");
        if (!path.endsWith(File.separator))
            path += File.separator;
        source = path + class_name + ".java";
        try {
            // create it
            generate = new Generate();
            out = new PrintWriter(new FileWriter(source));
            out.println("import org.htmlparser.util.CharacterReference;");
            out.println();
            out.println("/** Generated by " + this.getClass().getName() + " **/");
            out.println("public class " + class_name);
            out.println("{");
            out.println("    /**");
            out.println("     * Table mapping character to entity reference.");
            out.println("     */");
            out.println("    public static final CharacterReference[] mCharacterReferences =");
            out.println("    {");
            generate.parse(out);
            out.println("    };");
            out.println("}");
            out.close();
            // compile it
            if (0 == com.sun.tools.javac.Main.compile(new String[] { "-classpath", paths, source })) {
                try {
                    // load it
                    loader = new SimpleClassLoader(path);
                    hello = loader.loadClass(class_name);
                    try {
                        // get the references
                        field = hello.getField("mCharacterReferences");
                        ret = (CharacterReference[]) field.get(null);
                        Sort.QuickSort(ret);
                    } catch (IllegalAccessException iae) {
                        fail("references not accessible");
                    } catch (NoSuchFieldException nsfe) {
                        fail("references not found");
                    }
                } catch (ClassNotFoundException cnfe) {
                    fail("couldn't load class");
                } finally {
                    File classfile;
                    classfile = new File(path + class_name + ".class");
                    classfile.delete();
                }
            } else
                fail("couldn't compile class");
            mReferences = ret;
        } catch (IOException ioe) {
            fail("couldn't write class");
        } catch (ParserException ioe) {
            fail("couldn't parse w3.org entities list");
        }
    }
    return (ret);
}
