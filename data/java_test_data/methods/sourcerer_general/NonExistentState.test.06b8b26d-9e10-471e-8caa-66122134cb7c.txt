public void test(TestClass testClass, Statement statement, RunNotifier notifier, InheritableKdcServerSettings settings) {
    LOG.debug("calling test(): {}, mode {}", settings.getDescription().getDisplayName(), settings.getMode());
    ApacheDsServerContext context = (ApacheDsServerContext) getContext();
    switch(settings.getMode()) {
        case CUMULATIVE:
        case RESTART:
            try {
                create(settings);
            } catch (NamingException ne) {
                LOG.error("Failed to create and start new server instance: " + ne);
                testAborted(notifier, settings.getDescription(), ne);
                return;
            }
            try {
                startup(settings);
            } catch (Exception e) {
                LOG.error("Failed to create and start new server instance: " + e);
                testAborted(notifier, settings.getDescription(), e);
                return;
            }
            context.setState(context.getStartedNormalState());
            context.getState().test(testClass, statement, notifier, settings);
            return;
        case PRISTINE:
        case ROLLBACK:
            try {
                create(settings);
            } catch (NamingException ne) {
                LOG.error("Failed to create and start new server instance: " + ne);
                testAborted(notifier, settings.getDescription(), ne);
                return;
            }
            try {
                cleanup(settings);
            } catch (IOException ioe) {
                LOG.error("Failed to create and start new server instance: " + ioe);
                testAborted(notifier, settings.getDescription(), ioe);
                return;
            }
            try {
                startup(settings);
            } catch (Exception e) {
                LOG.error("Failed to create and start new server instance: " + e);
                testAborted(notifier, settings.getDescription(), e);
                return;
            }
            context.setState(context.getStartedPristineState());
            context.getState().test(testClass, statement, notifier, settings);
            return;
        default:
            return;
    }
}
