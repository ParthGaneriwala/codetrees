public void openPackage(Package pkg) {
    if (pkg == null) {
        throw new NullPointerException();
    }
    // open the new one
    if (this.pkg != null) {
        closePackage();
    }
    this.pkg = pkg;
    if (!Config.isGreenfoot()) {
        this.editor = new PackageEditor(pkg, this);
        editor.setFocusable(true);
        editor.setTransferHandler(new FileTransferHandler(this));
        // This mouse listener MUST be before
        editor.addMouseListener(this);
        // the editor's listener itself!
        editor.addFocusListener(this);
        editor.startMouseListening();
        pkg.setEditor(this.editor);
        classScroller.setViewportView(editor);
        // fetch some properties from the package that interest us
        Properties p = pkg.getLastSavedProperties();
        try {
            String width_str = p.getProperty("package.editor.width", Integer.toString(DEFAULT_WIDTH));
            String height_str = p.getProperty("package.editor.height", Integer.toString(DEFAULT_HEIGHT));
            classScroller.setPreferredSize(new Dimension(Integer.parseInt(width_str), Integer.parseInt(height_str)));
            String x_str = p.getProperty("package.editor.x", "30");
            String y_str = p.getProperty("package.editor.y", "30");
            int x = Integer.parseInt(x_str);
            int y = Integer.parseInt(y_str);
            if (x > (Config.screenBounds.width - 80))
                x = Config.screenBounds.width - 80;
            if (y > (Config.screenBounds.height - 80))
                y = Config.screenBounds.height - 80;
            setLocation(x, y);
        } catch (NumberFormatException e) {
            Debug.reportError("Could not read preferred project screen position");
        }
        String uses_str = p.getProperty("package.showUses", "true");
        String extends_str = p.getProperty("package.showExtends", "true");
        showUsesMenuItem.setSelected(uses_str.equals("true"));
        showExtendsMenuItem.setSelected(extends_str.equals("true"));
        updateShowUsesInPackage();
        updateShowExtendsInPackage();
        pack();
        editor.revalidate();
        editor.requestFocus();
        // changes menu items
        enableFunctions(true);
        updateWindowTitle();
        setVisible(true);
        this.menuManager.setAttachedObject(pkg);
        this.menuManager.addExtensionMenu(pkg.getProject());
        teamActions = pkg.getProject().getTeamActions();
        resetTeamActions();
        // In Java-ME packages, we display Java-ME controls in the
        // test panel. We are just using the real estate of the test panel.
        // The rest of the testing tools (menus, etc) are always hidden.
        String javaMEflag = p.getProperty("package.isJavaMEproject", "false");
        if (javaMEflag.equals("true")) {
            getProject().setJavaMEproject(true);
            showJavaMEcontrols(true);
            showTestingTools(false);
        } else {
            getProject().setJavaMEproject(false);
            showTestingTools(wantToSeeTestingTools());
        }
    }
    ;
    extMgr.packageOpened(pkg);
}
