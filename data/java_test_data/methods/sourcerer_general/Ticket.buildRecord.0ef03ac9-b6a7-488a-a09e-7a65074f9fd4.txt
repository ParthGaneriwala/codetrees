protected void buildRecord(ResultSet rs) throws SQLException {
    // ticket table
    this.setId(rs.getInt("ticketid"));
    orgId = DatabaseUtils.getInt(rs, "org_id");
    contactId = DatabaseUtils.getInt(rs, "contact_id");
    problem = rs.getString("problem");
    entered = rs.getTimestamp("entered");
    enteredBy = rs.getInt("enteredby");
    modified = rs.getTimestamp("modified");
    modifiedBy = rs.getInt("modifiedby");
    closed = rs.getTimestamp("closed");
    if (!rs.wasNull()) {
        closeIt = true;
    }
    priorityCode = DatabaseUtils.getInt(rs, "pri_code");
    levelCode = DatabaseUtils.getInt(rs, "level_code");
    departmentCode = DatabaseUtils.getInt(rs, "department_code");
    sourceCode = DatabaseUtils.getInt(rs, "source_code");
    catCode = DatabaseUtils.getInt(rs, "cat_code", 0);
    subCat1 = DatabaseUtils.getInt(rs, "subcat_code1", 0);
    subCat2 = DatabaseUtils.getInt(rs, "subcat_code2", 0);
    subCat3 = DatabaseUtils.getInt(rs, "subcat_code3", 0);
    assignedTo = DatabaseUtils.getInt(rs, "assigned_to");
    solution = rs.getString("solution");
    severityCode = DatabaseUtils.getInt(rs, "scode");
    location = rs.getString("location");
    // assignedDate = rs.getTimestamp("assigned_date");
    estimatedResolutionDate = rs.getTimestamp("est_resolution_date");
    // resolutionDate = rs.getTimestamp("resolution_date");
    cause = rs.getString("cause");
    projectTicketCount = rs.getInt("key_count");
    causeId = DatabaseUtils.getInt(rs, "cause_id");
    resolutionId = DatabaseUtils.getInt(rs, "resolution_id");
    defectId = DatabaseUtils.getInt(rs, "defect_id");
    escalationId = DatabaseUtils.getInt(rs, "escalation_id");
    stateId = DatabaseUtils.getInt(rs, "state_id");
    relatedId = DatabaseUtils.getInt(rs, "related_id");
    readyForClose = rs.getBoolean("ready_for_close");
    readCount = rs.getInt("read_count");
    readDate = rs.getTimestamp("read_date");
    linkProjectId = DatabaseUtils.getInt(rs, "link_project_id");
    linkModuleId = DatabaseUtils.getInt(rs, "link_module_id");
    linkItemId = DatabaseUtils.getInt(rs, "link_item_id");
    /*
     *  /organization table
     *  companyName = rs.getString("orgname");
     *  companyEnabled = rs.getBoolean("orgenabled");
     *  /lookup_department table
     *  departmentName = rs.getString("dept");
     */
    // ticket_priority table
    priorityName = rs.getString("ticpri");
    // ticket_severity table
    severityName = rs.getString("ticsev");
    // ticket_category table
    categoryName = rs.getString("catname");
    subCategoryName1 = rs.getString("subcatname1");
    subCategoryName2 = rs.getString("subcatname2");
    subCategoryName3 = rs.getString("subcatname3");
    // lookup_ticket_source table
    sourceName = rs.getString("sourcename");
    // ticketlink_project
    projectId = DatabaseUtils.getInt(rs, "project_id");
    // Calculations
    if (entered != null) {
        if (closed != null) {
            // float ageCheck = ((closed.getTime() - entered.getTime()) / 86400000);
            // ageDays = java.lang.Math.round(ageCheck);
            float ageCheck = ((closed.getTime() - entered.getTime()) / 3600000);
            int totalHours = java.lang.Math.round(ageCheck);
            ageDays = java.lang.Math.round(totalHours / 24);
            ageHours = java.lang.Math.round(totalHours - (24 * ageDays));
        } else {
            // float ageCheck = ((System.currentTimeMillis() - entered.getTime()) / 86400000);
            // ageDays = java.lang.Math.round(ageCheck);
            float ageCheck = ((System.currentTimeMillis() - entered.getTime()) / 3600000);
            int totalHours = java.lang.Math.round(ageCheck);
            ageDays = java.lang.Math.round(totalHours / 24);
            ageHours = java.lang.Math.round(totalHours - (24 * ageDays));
        }
    }
}
