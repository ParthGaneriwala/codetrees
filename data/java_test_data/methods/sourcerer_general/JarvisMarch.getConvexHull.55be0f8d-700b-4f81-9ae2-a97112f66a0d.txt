public Stack<Point2f> getConvexHull(Point2f[] Q) {
    QuickSort.<Point2f>sort(Q, new XYComparator());
    int lowest = 0;
    int highest = Q.length - 1;
    int n = 0;
    Stack<Integer> collinear = new LinkedStack<Integer>();
    boolean pass = true;
    // Palautettava pino.
    Stack<Point2f> S = new LinkedStack<Point2f>();
    S.push(Q[0]);
    /**
     * Oikea ketju *
     */
    while (n < highest) {
        n++;
        /* Kokeillaan pistettä n seuraavaksi palautettavaksi pisteeksi */
        for (int i = n + 1; i <= Q.length - 1; i++) {
            // löytyi piste, joka oli viivan väärällä puolella
            if (crossProduct(S.peek(), Q[n], Q[i]) < 0) {
                pass = false;
                // lopettaa ristitulojen tarkastamisen, pisteen vaihto
                break;
            }
            // löytyi kollineaarinen piste
            if (crossProduct(S.peek(), Q[n], Q[i]) == 0) {
                collinear.push(i);
            }
        }
        // seuraava piste löydetty
        if (pass) {
            // koska se on kauimmainen
            if (!collinear.empty()) {
                n = collinear.pop();
            }
            S.push(Q[n]);
        }
        // alustetaan tarkistus
        while (!collinear.empty()) {
            collinear.pop();
        }
        pass = true;
    }
    /**
     * Vasen ketju, tässä vaiheessa n==highest *
     */
    while (n > lowest) {
        n--;
        // Kokeillaan pistettä n seuraavaksi palautettavaksi pisteeksi
        for (int i = n - 1; i >= 0; i--) {
            // löytyi piste, joka oli viivan väärällä puolella
            if (crossProduct(Q[n], S.peek(), Q[i]) > 0) {
                pass = false;
                // lopettaa ristitulojen tarkastamisen, pisteen vaihto
                break;
            }
            // löytyi kollineaarinen piste
            if (crossProduct(Q[n], S.peek(), Q[i]) == 0) {
                collinear.push(i);
            }
        }
        // seuraava piste löydetty
        if (pass) {
            // koska se on kauimmainen
            if (!collinear.empty()) {
                n = collinear.pop();
            }
            S.push(Q[n]);
        }
        // alustetaan tarkistus
        while (!collinear.empty()) {
            collinear.pop();
        }
        pass = true;
    }
    return S;
}
