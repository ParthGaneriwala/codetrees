protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
    ActionContext context = new ActionContext(this, null, null, req, resp);
    if (!systemInitialized(context)) {
        if (System.getProperty("DEBUG") != null) {
            System.out.println("WebdavServlet-> Initializing system");
        }
        initializeSystem(context);
    }
    // Authentication Check
    String argHeader = req.getHeader("Authorization");
    if (!allowUser(context, argHeader)) {
        System.out.println("Unauthorized access");
        if (context.getRequest().getHeader("user-agent").toLowerCase().startsWith("microsoft") || context.getRequest().getHeader("user-agent").toLowerCase().indexOf("windows") > -1) {
            // Microsoft Client. Hence use Basic Authentication
            // Basic Authentication
            // System.out.println("Authentication Scheme-> BASIC");
            resp.setHeader("WWW-Authenticate", "BASIC realm=\"" + USER_REALM + "\"");
        } else {
            // Any othe client use Digest Authentication
            // Digest Authentication
            // determine the 'number once' value that is unique for this auth
            // System.out.println("Authentication Scheme-> DIGEST");
            String nonce = generateNonce();
            // determine the 'opaque' value which should be returned as is by the client
            String opaque = generateOpaque();
            resp.setHeader("WWW-Authenticate", "Digest realm=\"" + USER_REALM + "\", " + "nonce=\"" + nonce + "\", " + "opaque=\"" + opaque + "\"");
        }
        resp.sendError(HttpServletResponse.SC_UNAUTHORIZED);
        return;
    }
    // Determine client action
    String method = req.getMethod();
    if (method.equals(METHOD_PROPFIND)) {
        doPropfind(context);
    } else if (method.equals(METHOD_OPTIONS)) {
        doOptions(context);
    } else if (method.equals(METHOD_PROPPATCH)) {
        doProppatch(req, resp);
    } else if (method.equals(METHOD_MKCOL)) {
        doMkcol(req, resp);
    } else if (method.equals(METHOD_COPY)) {
        doCopy(req, resp);
    } else if (method.equals(METHOD_MOVE)) {
        doMove(req, resp);
    } else if (method.equals(METHOD_LOCK)) {
        doLock(req, resp);
    } else if (method.equals(METHOD_UNLOCK)) {
        doUnlock(req, resp);
    } else {
        // DefaultServlet processing
        super.service(req, resp);
    }
}
