public void constante() throws CompiladorException {
    reconocer("CONST");
    /**
     * RESTRICCIONES
     * Existe el id en la TS
     */
    if (this.estaIDEnPila(tok.getCadena()) != null) {
        throw new CompiladorException(Errores.dameError("IDENEXISTE", tok.getLinea(), tok.getCadena()));
    }
    String lex = tok.getCadena();
    String ttok = tok.getTipo();
    reconocerIden();
    reconocer("=");
    Tipo tip = null;
    if (tok.getTipo().equals("RESERVADA")) {
        tip = new TipoBasico("BOOL");
    } else {
        tip = new TipoBasico(tok.getTipo());
    }
    ts.inserta(lex, ttok, "VAR", Dir, nivel, true, tip);
    Dir += tip.getTam();
    instr.add(new Instruccion("apila", ts.getDireccion(lex)));
    instr.add(new Instruccion("apila", ts.getNivel(lex)));
    etiqueta += 2;
    try {
        if (tip.getNombre().equals("BOOL")) {
            if (tok.getCadena().equals("falso")) {
                instr.add(new Instruccion("apila", false));
            } else {
                instr.add(new Instruccion("apila", true));
            }
            tamReservar++;
            etiqueta++;
        } else {
            if (tip.getNombre().equals("ENT")) {
                instr.add(new Instruccion("apila", Integer.parseInt(tok.getCadena())));
            } else {
                instr.add(new Instruccion("apila", Float.parseFloat(tok.getCadena())));
            }
            tamReservar++;
            etiqueta++;
        }
        instr.add(new Instruccion("desapila-ind", null));
        etiqueta++;
        reconocerValor();
    } catch (NumberFormatException e) {
        throw new CompiladorException(Errores.dameError("VALORERRONEO", tok.getLinea(), tok.getCadena()));
    }
}
