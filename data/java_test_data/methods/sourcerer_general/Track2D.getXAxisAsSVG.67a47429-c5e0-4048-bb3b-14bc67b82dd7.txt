/*
   //--------------------------------------------------------------------------
   public SVG writeImageAsSvg(Strand inStrand)
   {
      if (mLabelFont == sDefaultLabelFont)
      {
         setLabelFont(Font.decode("Courier-PLAIN-8"));
      }

      initialize(inStrand);

      int imageHeightInPixels = (inStrand == Strand.FORWARD ? mForwardImageHeightInPixels :
            mReverseImageHeightInPixels);

      SvgGraphics2D g2 = new SvgGraphics2D();
      draw(g2, inStrand);
      SVG svgTag = g2.getRootTag().setWidth(mImageWidthInPixels).setHeight(imageHeightInPixels);
      svgTag.addStyle("shape-rendering:crispEdges"); // Turn off anti-aliasing
      return svgTag;
   }
*/
public SVG getXAxisAsSVG() {
    mXAxisImageHeightInPixels = (int) TextUtil.getStringRect(mXAxisEndValue + "", mLabelFont).getWidth() + 7;
    SVG svg = new SVG();
    svg.setFont(mLabelFont);
    // Turn off anti-aliasing
    svg.addStyle("shape-rendering:crispEdges");
    SvgGroup group = svg.addGroup();
    group.setAttribute("transform", "scale(1)");
    // Paint the background
    SvgRect background = group.addRect(new Rectangle(new Point(0, 0), new Dimension(mImageWidthInPixels, mXAxisImageHeightInPixels)));
    background.setFill(getBackgroundColor());
    // background.setStyle("stroke-width: 0.5; stroke: red;"); // For debugging
    // Draw the x-axis line
    SvgLine axisLine = group.addLine(new Point(mDescriptionWidthInPixels, 1), new Point(mImageWidthInPixels - mRightBufferInPixels, 1));
    // axisLine.setFill(mAxisColor);
    // Add highlights
    SvgGroup highlightGroup = generateHighlightRegions(mXAxisImageHeightInPixels);
    if (highlightGroup != null)
        group.addSubtag(highlightGroup);
    /*
      // Write the Track name
      Rectangle textBoundBox = TextUtil.getStringRect(mName, mLabelFont);
      int xOffset = (int) (mDescriptionWidthInPixels - textBoundBox.getWidth() -  (2 * mLinePaddingInPixels) - mMinimumBufferInPixels);
      int yOffset = (int) (imageHeightInPixels/2 + textBoundBox.getHeight()/2);
      group.addText(mName, mLabelFont, new Point(xOffset, yOffset));
*/
    determineTickSize();
    double lastXTranslation = 0;
    int yOffset = 2;
    for (Integer tickValue : getTickValues()) {
        if (tickValue % mMajorTickStep == 0 || tickValue == mXAxisStartValue || tickValue == mXAxisEndValue) {
            yOffset = 6;
            Rectangle textBoundBox = TextUtil.getStringRect(tickValue + "", mLabelFont);
            double xTranslation = mDescriptionWidthInPixels + ((tickValue - mXAxisStartValue) * getXScalingFactor()) - textBoundBox.getHeight() / 4;
            if (xTranslation - lastXTranslation > 8) {
                SvgText label = group.addText(tickValue + "", mLabelFont, new Point((int) xTranslation, yOffset + 5));
                label.setTransform("rotate(45 " + (int) (xTranslation - 3) + " " + (yOffset + 5) + ")");
                lastXTranslation = xTranslation;
            }
        /*
            if (xTranslation - lastXTranslation > 8
                && (tickValue == mXAxisEndValue || xTranslation < mImageWidthInPixels - mRightBufferInPixels - 10))
            {
               double yTranslation = yOffset + layout.getAdvance() + 1;
               g2.translate(xTranslation, yTranslation);
               g2.rotate(-Math.PI / 2);
               g2.drawString(tickValue + "", 0, 0);
               g2.setTransform(origTransform);
               lastXTranslation = xTranslation;

            }
*/
        } else if (tickValue % mMinorTickStep == 0) {
            yOffset = 2;
        } else {
            continue;
        }
        int xOffset = mDescriptionWidthInPixels + (int) ((tickValue - mXAxisStartValue) * getXScalingFactor());
        SvgLine tickLine = group.addLine(new Point(xOffset, 1), new Point(xOffset, yOffset));
    // tickLine.setFill(mAxisColor);
    }
    return svg;
}
