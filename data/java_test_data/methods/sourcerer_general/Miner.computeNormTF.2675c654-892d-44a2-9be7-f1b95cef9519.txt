public void computeNormTF(String s) {
    // String format of all candidate TFs
    String[] strTF = s.split(" ");
    // ArrayList<Float> intTF = new ArrayList<Float>(); // Integer format of all candidate TFs
    for (int i = 0; i < strTF.length; i++) {
        origTFList.add(Float.parseFloat(strTF[i]));
    }
    normTFList = new ArrayList<Float>(origTFList);
    for (int i = 0; i < this.termNum; i++) {
        // initialization
        maxTF[i] = avgTF[i] = 0;
        minTF[i] = Float.MAX_VALUE;
    }
    for (int j = 0; j < this.termNum; j++) {
        float tempSum = 0;
        for (int k = 0; k < this.docNum; k++) {
            float tempTF = origTFList.get(j + k * this.termNum);
            tempSum = (float) (tempSum + tempTF);
            if (tempTF > maxTF[j])
                maxTF[j] = tempTF;
            if (tempTF < minTF[j])
                minTF[j] = tempTF;
        }
        avgTF[j] = (float) 1.0 * tempSum / this.docNum;
    }
    // print out for test only
    for (int i = 0; i < this.termNum; i++) {
        System.out.print(avgTF[i] + " ");
    }
    System.out.print('\n');
    for (int i = 0; i < this.termNum; i++) {
        System.out.print(minTF[i] + " ");
    }
    System.out.print('\n');
    for (int i = 0; i < this.termNum; i++) {
        System.out.print(maxTF[i] + " ");
    }
    System.out.print('\n');
    for (int j = 0; j < this.termNum; j++) {
        for (int k = 0; k < this.docNum; k++) {
            float tempTF = origTFList.get(j + k * this.termNum);
            if (tempTF > avgTF[j])
                normTFList.set(j + k * this.termNum, maxTF[j]);
            else if (tempTF <= avgTF[j])
                normTFList.set(j + k * this.termNum, minTF[j]);
        }
    }
    System.out.println("Normalized term frequency values are: ");
    for (int i = 0; i < normTFList.size(); i++) {
        System.out.print(normTFList.get(i) + " ");
    }
    System.out.print('\n');
}
