private void munchMoveTempDestStm(Temp temp, AssemExp srcExp) {
    int srcType = srcExp.getExpType();
    Vector destList = new Vector();
    destList.addElement(temp);
    Vector srcList = new Vector();
    if (srcType == AssemExp.MEM) {
        AssemMemory assemMem = (AssemMemory) srcExp;
        munchMoveTempMemDestStm(temp, assemMem);
        return;
    }
    Operation instr = null;
    if (srcType == AssemExp.BIN_OP) {
        AssemBinOpExp assemOp = (AssemBinOpExp) srcExp;
        Temp opTemp = munchBinOpExp(assemOp);
        srcList.addElement(opTemp);
        srcList.addElement(opTemp);
        instr = new Operation(destList, srcList, Operation.MOVE_TEMP_TO_TEMP, null, null);
    } else if (srcType == AssemExp.TEMP) {
        AssemTemp tempExp = (AssemTemp) srcExp;
        srcList.addElement(tempExp.getTemp());
        instr = new Operation(destList, srcList, Operation.MOVE_TEMP_TO_TEMP, null, null);
    } else if (srcType == AssemExp.CALL) {
        AssemCallExp callExp = (AssemCallExp) srcExp;
        Temp callTemp = munchCallExp(callExp);
        srcList.addElement(callTemp);
        instr = new Operation(destList, srcList, Operation.MOVE_TEMP_TO_TEMP, null, null);
    } else if (srcType == AssemExp.CONST) {
        srcList = null;
        AssemConst assemConst = (AssemConst) srcExp;
        instr = new Operation(destList, srcList, Operation.LOAD_IMMEDIATE_VALUE, new Integer(assemConst.getValue()), null);
    } else if (srcType == AssemExp.NAME) {
        srcList = null;
        AssemName assemName = (AssemName) srcExp;
        instr = new Operation(destList, srcList, Operation.LOAD_ADDRESS, null, assemName.getLabel().toString());
    }
    instructionsList.addElement(instr);
}
