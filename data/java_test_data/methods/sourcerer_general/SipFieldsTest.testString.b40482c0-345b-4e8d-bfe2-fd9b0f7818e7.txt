@Test
public void testString() throws Exception {
    _fields.setString("call-id", "foo");
    String callId = _fields.getString(SipHeaders.CALL_ID_BUFFER);
    assertEquals("foo", callId);
    _fields.addString("event", "presence");
    _fields.addString("EVENT", "reg");
    String event = _fields.getString(SipHeaders.EVENT_BUFFER);
    assertEquals("presence", event);
    Iterator<String> it = _fields.getValues(SipHeaders.EVENT_BUFFER);
    assertTrue(it.hasNext());
    assertEquals("presence", it.next());
    assertTrue(it.hasNext());
    assertEquals("reg", it.next());
    assertFalse(it.hasNext());
    _fields.addAddress("from", new NameAddr("sip:foo@bar.com"), true);
    assertEquals("<sip:foo@bar.com>", _fields.getString(SipHeaders.FROM_BUFFER));
    byte[] b = "foo".getBytes();
    _fields.set(SipHeaders.CALL_ID_BUFFER, new String(b));
    assertEquals("foo", _fields.getString("call-id"));
    _fields.addAddress("route", new NameAddr("sip:route2"), true);
    _fields.addAddress("ROUTE", new NameAddr("sip:route1"), true);
    _fields.addAddress("Route", new NameAddr("sip:route3"), false);
    it = _fields.getValues("Route");
    assertTrue(it.hasNext());
    assertEquals("<sip:route1>", it.next());
    assertTrue(it.hasNext());
    assertEquals("<sip:route2>", it.next());
    assertTrue(it.hasNext());
    assertEquals("<sip:route3>", it.next());
    assertFalse(it.hasNext());
    assertEquals("route1", ((SipURI) _fields.getAddress(SipHeaders.ROUTE_BUFFER).getURI()).getHost());
}
