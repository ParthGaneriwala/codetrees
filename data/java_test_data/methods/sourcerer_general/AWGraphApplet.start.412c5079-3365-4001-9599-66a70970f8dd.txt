public synchronized void start() {
    special = getParameter("special");
    if (special == null) {
        special = "";
    }
    Log("Applet " + VERSION + " ($Revision: 1.6 $) init");
    String s = getParameter("b_fontsize");
    if (s != null) {
        b_fontsize = Integer.parseInt(s);
    }
    title = getParameter("title");
    if (title == null) {
        title = "Chart";
    }
    s = getParameter("nbblocks");
    if (s != null) {
        nbblocks = Integer.parseInt(s);
    }
    s = getParameter("nbvalues");
    if (s != null) {
        nbvalues = Integer.parseInt(s);
    }
    s = getParameter("blockspacing");
    if (s != null) {
        blockSpacing = Integer.parseInt(s);
    }
    s = getParameter("valspacing");
    if (s != null) {
        valSpacing = Integer.parseInt(s);
    }
    s = getParameter("valwidth");
    if (s != null) {
        valWidth = Integer.parseInt(s);
    }
    s = getParameter("orientation");
    if (s == null) {
        orientation = VERTICAL;
    } else if (s.equalsIgnoreCase("horizontal")) {
        orientation = HORIZONTAL;
    } else {
        orientation = VERTICAL;
    }
    s = getParameter("barsize");
    if (s != null) {
        barsize = Integer.parseInt(s);
    }
    s = getParameter("background_color");
    if (s != null) {
        background_color = Color.decode("#" + s);
    }
    s = getParameter("border_color");
    if (s != null) {
        border_color = Color.decode("#" + s);
    }
    s = getParameter("special_color");
    if (s != null) {
        special_color = Color.decode("#" + s);
    }
    Log("bblocks " + nbblocks);
    Log("nbvalues " + nbvalues);
    Log("barsize " + barsize);
    font = new Font("Verdana,Arial,Helvetica", 0, b_fontsize);
    fontb = new Font("Verdana,Arial,Helvetica", Font.BOLD, b_fontsize);
    fontmetrics = getFontMetrics(font);
    blabels = new String[nbblocks];
    vlabels = new String[nbvalues];
    styles = new int[nbvalues];
    max = new float[nbvalues];
    colors = new Color[nbvalues];
    values = new float[nbblocks][nbvalues];
    for (int i = 0; i < nbvalues; i++) {
        parseLabel(i);
        parseStyle(i);
        parseColor(i);
        parseMax(i);
    }
    for (int j = 0; j < nbblocks; j++) {
        parsebLabel(j);
        parseValue(j);
    }
    for (int i = 0; i < nbvalues; i++) {
        if (max[i] <= 0.0F) {
            max[i] = 1.0F;
        }
        Log("max[" + i + "]=" + max[i]);
    }
}
