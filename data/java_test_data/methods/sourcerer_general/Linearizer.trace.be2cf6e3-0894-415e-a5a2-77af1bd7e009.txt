private AssemStmList trace(AssemStmList firstListInTrace) {
    AssemStmList list = firstListInTrace;
    while (true) {
        AssemStmList lastStmList = getLast(list);
        AssemStm stm = lastStmList.getStmList().getStm();
        if (stm instanceof AssemJump) {
            AssemJump jmpStm = (AssemJump) stm;
            Label nextLbl = ((AssemName) jmpStm.getLabelExp()).getLabel();
            AssemStmList nextList = (AssemStmList) labelVsBasicBlocks.get(nextLbl);
            if (nextList == null) {
                if (nextLbl.equals(doneLabel)) {
                    lastStmList.getStmList().setStmList(nextList);
                }
                return lastStmList.getStmList();
            }
            lastStmList.setStmList(nextList);
            labelVsBasicBlocks.remove(nextLbl);
            list = nextList;
        }
        if (stm instanceof AssemCJump) {
            AssemCJump cjumpStm = (AssemCJump) stm;
            Label falseLabel = cjumpStm.getIfFalseLabel();
            Label trueLabel = cjumpStm.getIfTrueLabel();
            AssemStmList falseLblNextList = (AssemStmList) labelVsBasicBlocks.get(falseLabel);
            AssemStmList trueLblNextList = (AssemStmList) labelVsBasicBlocks.get(trueLabel);
            if (falseLblNextList != null) {
                // Block starting with false label exists
                labelVsBasicBlocks.remove(falseLabel);
                lastStmList.getStmList().setStmList(falseLblNextList);
                list = falseLblNextList;
            } else if (trueLblNextList != null) {
                // Only the block starting with true label exists
                AssemCJump newCJump = new AssemCJump(AssemCJump.notRel(cjumpStm.relop), cjumpStm.getLeft(), cjumpStm.getRight(), cjumpStm.getIfFalseLabel(), cjumpStm.getIfTrueLabel());
                labelVsBasicBlocks.remove(trueLabel);
                lastStmList.getStmList().setHead(newCJump);
                lastStmList.getStmList().setStmList(trueLblNextList);
                list = trueLblNextList;
            } else {
                // A CJump statement followed by niether its true nor its false label
                Label newFalseLabel = new Label();
                lastStmList.getStmList().setHead(new AssemCJump(cjumpStm.relop, cjumpStm.getLeft(), cjumpStm.getRight(), cjumpStm.getIfTrueLabel(), newFalseLabel));
                AssemJump newJump = new AssemJump(new AssemName(cjumpStm.getIfFalseLabel()));
                AssemStmList newList = new AssemStmList(newJump, null);
                lastStmList.getStmList().setStmList(new AssemStmList(new AssemLabel(newFalseLabel), newList));
                return newList;
            }
        }
    }
}
