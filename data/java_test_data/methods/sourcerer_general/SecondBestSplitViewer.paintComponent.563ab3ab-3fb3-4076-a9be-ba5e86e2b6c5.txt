// </editor-fold>//GEN-END:initComponents
// Variables declaration - do not modify//GEN-BEGIN:variables
@Override
public void paintComponent(Graphics g) {
    Graphics2D g2 = (Graphics2D) g;
    Dimension d = getSize();
    g2.setPaint(Color.WHITE);
    g2.fillRect(0, 0, d.width, d.height);
    g2.setPaint(Color.BLACK);
    FontMetrics fM = g2.getFontMetrics();
    otst = (otst == -1) ? fM.stringWidth("-000:00") + 5 : otst;
    int width = d.width - otst;
    int height = d.height - 2;
    Distance dist = aModel.getDistance();
    AthleteIcon[] athletes = (AthleteIcon[]) (aModel.getSelectedValues());
    int[] splits = aModel.getViewingSplits();
    if (draw) {
        int[] sizes = new int[splits.length];
        int tL = 0;
        int totalLength = 0;
        prom = new int[sizes.length];
        for (int i = 0; i < sizes.length; i++) {
            tL += secondBest[splits[i] - 1].getTimeInSeconds();
            prom[i] = tL;
            totalLength += dist.getLengthOfDist(splits[i]);
        }
        int x = otst;
        xCoord = new int[sizes.length];
        for (int i = 0; i < sizes.length; i++) {
            sizes[i] = (int) (((double) dist.getLengthOfDist(splits[i]) / totalLength) * width);
            g2.drawLine(x + sizes[i], 0, x + sizes[i], height);
            // String s;
            // if(i<=(splits.length-2)){
            // int diff = splits[i+1]-splits[i];
            // if(diff>1)
            // s = splits[i]+"-"+(splits[i+1]-1);
            // else
            // s=splits[i]+"";
            // } else {
            // if(splits[i]==dist.getNumberOfCP())
            // s=java.util.ResourceBundle.getBundle("ru/concretesoft/concretesplitviewer/i18on").getString("Finish");
            // else
            // s = splits[i]+"";
            // }
            // g2.drawString(s,x+sizes[i]-fM.stringWidth(s)/2,height+fM.getHeight()+1);
            x += sizes[i];
            xCoord[i] = x;
        }
        calculateYCoord();
        int h = yMax - yMin;
        int hTime = fM.getHeight();
        double stepTime = 30.0;
        int nT = (int) (h / stepTime);
        while (nT == 0) {
            stepTime = Math.round(stepTime / 2);
            nT = (int) (h / stepTime);
        }
        while ((height / nT) < (hTime + 10)) {
            stepTime *= 2;
            nT = (int) (h / stepTime);
        }
        Time tmp = new Time(0, 2);
        tmp.setTimeInSeconds(Math.abs(yMin));
        String s = tmp.getTimeString();
        int y0 = (int) (((-yMin) / (double) h) * height);
        if (yMin < 0)
            s = "-" + tmp.getTimeString();
        else if (yMin > 0)
            s = "+" + tmp.getTimeString();
        else
            s = tmp.getTimeString();
        g2.setPaint(Color.BLACK);
        g2.drawString(s, otst - fM.stringWidth(s), hTime - 1);
        float[] dash1 = { 10.0f };
        BasicStroke dashed = new BasicStroke(1.0f, java.awt.BasicStroke.CAP_BUTT, java.awt.BasicStroke.JOIN_MITER, 10.0f, dash1, 0.0f);
        g2.setStroke(dashed);
        for (int i = 1; i <= nT; i++) {
            int timeCur = yMin + (Math.abs(yMin) % (int) stepTime) + (int) (stepTime * i);
            tmp.setTimeInSeconds(Math.abs(timeCur));
            if (timeCur < 0) {
                s = "-" + tmp.getTimeString();
            } else if (timeCur > 0) {
                s = "+" + tmp.getTimeString();
            } else
                s = tmp.getTimeString();
            int yH = (int) ((timeCur - yMin) / (double) h * height);
            // yH = (int)((stepTime*i / h)*height);
            g2.setPaint(Color.BLACK);
            g2.drawString(s, otst - fM.stringWidth(s), yH);
            g2.setPaint(Color.LIGHT_GRAY);
            g2.drawLine(otst, yH, otst + width, yH);
        }
        g2.setStroke(new BasicStroke(1.0f));
        g2.setPaint(Color.LIGHT_GRAY);
        g2.drawLine(otst, y0, xCoord[xCoord.length - 1], y0);
        Iterator<int[]> it = yCoord.iterator();
        int k = 0;
        while (it.hasNext()) {
            g2.setPaint(athletes[k].getColor());
            int[] yC = it.next();
            int y = (int) (((yC[0] - yMin) / (double) h) * height);
            g2.drawLine(otst, y0, xCoord[0], y);
            for (int i = 1; i < splits.length; i++) {
                int y2 = (int) (((yC[i] - yMin) / (double) h) * height);
                g2.drawLine(xCoord[i - 1], y, xCoord[i], y2);
                // System.out.println(xCoord[i-1]+"  "+y+"  "+xCoord[i]+"  "+y2);
                y = y2;
            }
            k++;
        }
    } else {
        xCoord = null;
    }
    for (XCoordinatesListener e : listeners) {
        e.xCoordinatesChanged(this);
    }
}
