public void testGetAvailabilityForPerformancesWithNoBookings() throws Exception {
    Calendar cal = Calendar.getInstance();
    cal.add(Calendar.DAY_OF_YEAR, 7);
    Date nextWeek = cal.getTime();
    // populating the database.
    dbHelper.insertShow(1, "show", -1, -1);
    dbHelper.insertPriceStructure(1, "ps");
    dbHelper.insertSeatClass(1, "code", "desription");
    dbHelper.insertPerformance(1, nextWeek, 1, 1);
    dbHelper.insertPerformance(2, nextWeek, 1, 1);
    dbHelper.insertPriceBand(1, new BigDecimal(1.0), 1, 1);
    dbHelper.insertSeat(1, "seat1", -1, -1);
    dbHelper.insertSeat(2, "seat2", 1, -1);
    dbHelper.setRightSeatForSeat(1, 2);
    dbHelper.insertSeat(3, "seat3", 2, -1);
    dbHelper.setRightSeatForSeat(2, 3);
    dbHelper.insertSeatStatus(1, 1, -1, 1);
    dbHelper.insertSeatStatus(1, 2, -1, 1);
    dbHelper.insertSeatStatus(1, 3, -1, 1);
    dbHelper.insertSeatStatus(2, 1, -1, 1);
    dbHelper.insertSeatStatus(2, 2, -1, 1);
    // creating the domain model.
    Show show = new Show("show");
    show.setId(1);
    // executing the tested method.
    PerformanceWithAvailability[] performances = dao.getAvailabilityForPerformances(show);
    // assertions
    // there are no bookings in the system so all seats should be available.
    // which means that performance with id 1 should have 3 seats available, and
    // performance with id 2 should have 2 seats available.
    assertEquals("number of performances", 2, performances.length);
    for (int i = 0; i < performances.length; i++) {
        PerformanceWithAvailability performance = performances[i];
        assertEquals("number of available seats", (performance.getId() == 1) ? 3 : 2, performance.getAvailableSeatCount());
        List priceBands = performance.getPriceBandWithAvailability();
        assertEquals("number of price bands with availability", 1, priceBands.size());
    }
}
