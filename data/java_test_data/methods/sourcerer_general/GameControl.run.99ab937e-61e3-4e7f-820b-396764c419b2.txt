public void run() {
    Graphics g = getGraphics();
    g.setColor(0);
    g.fillRect(0, 0, GameControl.this.getWidth(), GameControl.this.getHeight());
    if (g.getClipWidth() > world.WORLD_VIEW_WIDTH && g.getClipHeight() > world.WORLD_VIEW_HEIGHT) {
        g.translate((g.getClipWidth() - world.WORLD_VIEW_WIDTH) / 2, (g.getClipHeight() - world.WORLD_VIEW_HEIGHT) / 2);
    }
    g.setClip(0, 0, world.WORLD_VIEW_WIDTH, world.WORLD_VIEW_HEIGHT);
    while (true) {
        if (GameControl.this.displayableSizeChanged) {
            g = getGraphics();
            g.setColor(0);
            g.fillRect(0, 0, GameControl.this.getWidth(), GameControl.this.getHeight());
            if (g.getClipWidth() > world.WORLD_VIEW_WIDTH && g.getClipHeight() > world.WORLD_VIEW_HEIGHT) {
                g.translate((g.getClipWidth() - world.WORLD_VIEW_WIDTH) / 2, (g.getClipHeight() - world.WORLD_VIEW_HEIGHT) / 2);
            }
            g.setClip(0, 0, world.WORLD_VIEW_WIDTH, world.WORLD_VIEW_HEIGHT);
            GameControl.this.displayableSizeChanged = false;
        }
        long start = System.currentTimeMillis();
        if (GameControl.this.paused) {
            if (GameControl.this.gameover) {
                GameControl.this.messagePopup.registerMSG("Game Over", 0xFF5522);
                GameControl.this.gameoverSequence();
                GameControl.this.totalScore = GameControl.this.scorePanel.getTotalScore();
                break;
            }
            try {
                Thread.sleep(MAINLOOP_SLEEPTIME);
            } catch (InterruptedException e) {
            }
            continue;
        }
        GameControl.this.world.renderTo(g);
        GameControl.this.scorePanel.renderTo(g);
        GameControl.this.comboMeter.renderTo(g);
        GameControl.this.messagePopup.renderTo(g);
        flushGraphics();
        long tick = System.currentTimeMillis();
        GameControl.this.world.tick(tick);
        GameControl.this.scorePanel.tick(tick);
        GameControl.this.comboMeter.tick(tick);
        int spotY = GameControl.this.world.calculateViewPosition(GameControl.this.world.spot.getYPosition());
        int waterY = GameControl.this.world.calculateViewPosition(GameControl.this.world.water.getHeight());
        if (spotY > world.WORLD_VIEW_HEIGHT + 20 || spotY > waterY + 40) {
            GameControl.this.paused = true;
            GameControl.this.gameover = true;
        }
        while (System.currentTimeMillis() - start < GameControl.MAINLOOP_SLEEPTIME) {
            Thread.yield();
        }
    }
    if (!GameControl.this.menu.scoreScreen.check4newHighScore(GameControl.this.totalScore, GameControl.this.highestTouchedPlatform)) {
        GameControl.this.menu.show(GameControl.this.menu);
    }
}
