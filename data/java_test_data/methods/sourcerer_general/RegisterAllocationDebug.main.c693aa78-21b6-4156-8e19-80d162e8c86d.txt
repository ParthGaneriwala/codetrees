public static void main(String[] args) {
    InstrList list = null;
    Temp a = new Temp();
    Temp b = new Temp();
    Temp c = new Temp();
    Temp d = new Temp();
    Temp e = new Temp();
    Temp f = new Temp();
    /*Label a1 = new Label();
		Label done = new Label();
		Instr i1 = new OPER("a := 0", new TempList(a,null), null ,null);
		Instr l1 = new LABEL("2", a1);
		Instr don = new LABEL("DONE", done);
		Instr i2  = new OPER("b := a + 1", new TempList(b,null), new TempList(a,null) ,null);
		Instr i3 = new OPER("c := c + b", new TempList(c,null), new TempList(c,new TempList(b,null)) ,null);
		Instr i4 = new OPER("a := b*2", new TempList(a,null), new TempList(b,null) ,null);
		Instr i5 = new OPER("a < N", null, new TempList(a,null) ,new LabelList(done, new LabelList(a1,null)));
		Instr i6 = new OPER("return c", null, new TempList(c, null), null);
		list = new InstrList(i6, null);
		list = new InstrList(don, list);
		list = new InstrList(i5, list);
		list = new InstrList(i4, list);
		list = new InstrList(i3, list);
		list = new InstrList(i2, list);
		list = new InstrList(l1, list);
		list = new InstrList(i1, list);*/
    Instr i0 = new OPER("a <- 0", new TempList(a, null), null, null);
    Instr i1 = new OPER("e <- a + b", new TempList(e, null), new TempList(a, new TempList(b, null)), null);
    Instr i2 = new OPER("f <- c + d", new TempList(f, null), new TempList(c, new TempList(d, null)), null);
    Instr i3 = new OPER("return a,b,c,d", null, new TempList(a, new TempList(b, new TempList(c, new TempList(d, null)))), null);
    list = new InstrList(i2, new InstrList(i3, null));
    list = new InstrList(i1, list);
    list = new InstrList(i0, list);
    AssemFlowGraph g = new AssemFlowGraph(list);
    g.show(System.out);
    LivenessAnaliser liveness = new LivenessAnaliser(g);
    liveness.print();
    InterferenceGraph ig = new InterferenceGraph(liveness);
    ig.addEdge(ig.tnode(b), ig.tnode(c));
    ig.print();
    RegisterAlocator r = new RegisterAlocator(ig);
    r.print(r.mapRegisters(3));
    System.exit(1);
}
