private synchronized ArquivoPro baixarCadastrarArquivo(String url, String alt, JobPro job, PaginaPro pagina) throws Exception {
    logger.debug("baixando " + url);
    // verificar se o arquivo e do dominio
    if (!verificarPaginaPertenceSitio(url, job)) {
        logger.info("A url nao casa com o site '" + url + "'");
        return null;
    }
    ArquivoPro arquivo;
    arquivo = arquivoDao.find(url);
    if (arquivo == null) {
        arquivo = new ArquivoPro();
        arquivo.setAlt(alt);
        arquivo.setUrl(url);
        arquivoDao.create(arquivo);
    }
    // caso o arquivo ja tenha dado algum erro
    if (arquivo.getErro() != null)
        return arquivo;
    String extensao = G_File.getExtensao(arquivo.getUrl());
    if (extensao == null || extensao.equals("")) {
        logger.warn("AVISO: Arquivista.baixarCadastrarArquivo():\n\tSem extensao:" + arquivo.toString().replace("\n", "\n\t\t"));
        extensao = "jpg";
    // return arquivo;
    }
    extensao = extensao.toLowerCase();
    String fileName = G_File.getName(arquivo.getUrl());
    String basePath;
    String localRelativo;
    if (extensao.equals("css") || extensao.equals("js")) {
        localRelativo = extensao + "/" + arquivo.getIdArquivo() + "_" + fileName;
        File dir = new File(pastaDeArquivosTemplates + extensao);
        basePath = pastaDeArquivosTemplates;
        if (!dir.exists())
            dir.mkdirs();
    } else {
        if (extensao.equals("br")) {
            throw new Exception("No 'br' allowed!");
        }
        localRelativo = extensao + "/" + arquivo.getIdArquivo() + "_" + fileName;
        File dir = new File(pastaDeArquivosDoSitio + extensao);
        basePath = pastaDeArquivosDoSitio;
        if (!dir.exists())
            dir.mkdirs();
    }
    // normalizar o nome local
    localRelativo = G_StringUtils.urlDecode(localRelativo);
    localRelativo = G_StringUtils.removeAcentos(localRelativo);
    localRelativo = localRelativo.replace("%20", "_");
    localRelativo = localRelativo.replace(" ", "_");
    String localFileName = basePath + localRelativo;
    if (arquivo.getPathLocal() == null || !localFileName.equals(arquivo.getPathLocal())) {
        if (extensao.equals("css") || extensao.equals("js")) {
            arquivo.setPathLocal("templates/" + coordenador.getSitioCms().getNuSitio() + "/" + localRelativo);
        } else {
            arquivo.setPathLocal("arquivos/" + coordenador.getSitioCms().getNuSitio() + "/" + localRelativo);
        }
        arquivoDao.update(arquivo);
    }
    File arqLocal = new File(localFileName);
    if (!arqLocal.exists()) {
        try {
            logger.debug("baixando o arquivo " + arquivo.getUrl() + "\n\tpagina: " + pagina.getUrl());
            download(arquivo.getUrl(), localFileName);
        } catch (UrlNotFoundException e) {
            arquivo.setErro("Erro 404 " + pagina.getUrl());
            arquivoDao.update(arquivo);
        }
    } else {
        logger.debug("Arquivo existente, pulando " + localFileName);
    }
    pagina = paginaDao.find(pagina.getIdPagina());
    if (pagina.getListaArquivo() == null) {
        pagina.setListaArquivo(new ArrayList<ArquivoPro>());
    }
    if (!pagina.getListaArquivo().contains(arquivo)) {
        pagina.getListaArquivo().add(arquivo);
        paginaDao.update(pagina);
    }
    return arquivo;
}
