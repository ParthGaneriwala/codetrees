private Map<String, Object> createHtmlFile(GraphingEngine graphingEngine, File dotFile, String imageFilename) throws IOException {
    // run this command 'dot test.dot -Timap'
    // in the output look for lines like: shape url coords
    Process p;
    String error = null;
    try {
        String[] cmd = new String[] { graphingEngine.getCommand(), dotFile.getAbsolutePath(), "-Timap" };
        boolean reportErrors = false;
        p = Runtime.getRuntime().exec(cmd);
        List<String> lines = null;
        InputStream in = p.getInputStream();
        // Set to true when p is finished
        boolean finished = false;
        while (!finished) {
            try {
                while (in.available() > 0) {
                    // Print the output of our system call.
                    // Character c = new Character((char) in.read());
                    // System.out.print(c);
                    lines = IOUtils.readLines(in);
                }
                // Ask the process for its exitValue. If the process
                // is not finished, an IllegalThreadStateException
                // is thrown. If it is finished, we fall through and
                // the variable finished is set to true.
                p.exitValue();
                finished = true;
            } catch (IllegalThreadStateException e) {
                Thread.currentThread();
                // Sleep a little to save on CPU cycles
                Thread.sleep(500);
            }
        }
        Pattern pattern = Pattern.compile("^(\\S+) (\\S+) (.+)$");
        List<ImageMapArea> areas = new ArrayList<ImageMapArea>();
        for (String line : lines) {
            Matcher m = pattern.matcher(line);
            if (m.matches()) {
                String shape = m.group(1);
                String href = m.group(2);
                String coords = m.group(3).trim();
                ImageMapArea area = new ImageMapArea();
                area.setShape(shape);
                area.setHref(href.replaceAll("\\\\l", "").replaceAll("\\\\", ""));
                area.setCoords(coords);
                areas.add(area);
            }
        }
        Map<String, Object> params = new HashMap<String, Object>();
        params.put("imageName", imageFilename);
        params.put("areaList", areas);
        return params;
    } catch (InterruptedException e) {
        throw new RuntimeException(e);
    }
}
