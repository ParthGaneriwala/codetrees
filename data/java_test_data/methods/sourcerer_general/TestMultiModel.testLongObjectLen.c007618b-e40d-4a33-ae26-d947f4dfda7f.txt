public void testLongObjectLen() {
    long longLen = dbDriver.getLongObjectLength();
    assertTrue(longLen > 0 && longLen < 100000);
    String base = ".";
    StringBuffer buffer = new StringBuffer(1024 + (int) longLen);
    /* long minLongLen = longLen < 1024 ? longLen - (longLen/2) : longLen - 512; */
    /* long maxLongLen = longLen + 1024; */
    /* TODO: find out why this test takes sooooo long (minutes!) with the above bounds */
    long minLongLen = longLen - 32;
    long maxLongLen = longLen + 32;
    assertTrue(minLongLen > 0);
    Resource s = model.createResource("test#subject");
    Property p = model.createProperty("test#predicate");
    Literal l;
    Statement stmt;
    while (buffer.length() < minLongLen) {
        /*( build base string */
        buffer.append(base);
    }
    /* add stmts with long literals */
    long modelSizeBeg = model.size();
    while (buffer.length() < maxLongLen) {
        l = model.createLiteral(buffer.toString());
        stmt = model.createStatement(s, p, l);
        model.add(stmt);
        assertTrue(model.contains(stmt));
        assertTrue(stmt.getObject().equals(l));
        buffer.append(base);
    }
    assertTrue(model.size() == (modelSizeBeg + maxLongLen - minLongLen));
    /* remove stmts with long literals */
    while (buffer.length() > minLongLen) {
        buffer.deleteCharAt(0);
        l = model.createLiteral(buffer.toString());
        stmt = model.createStatement(s, p, l);
        assertTrue(model.contains(stmt));
        model.remove(stmt);
        assertTrue(!model.contains(stmt));
    }
    assertTrue(model.size() == modelSizeBeg);
}
