private long[] readCpu(final Process proc) {
    long[] retn = new long[2];
    try {
        proc.getOutputStream().close();
        InputStreamReader ir = new InputStreamReader(proc.getInputStream());
        LineNumberReader input = new LineNumberReader(ir);
        String line = input.readLine();
        if (line == null || line.length() < FAULTLENGTH) {
            return null;
        }
        int capidx = line.indexOf("Caption");
        int cmdidx = line.indexOf("CommandLine");
        int rocidx = line.indexOf("ReadOperationCount");
        int umtidx = line.indexOf("UserModeTime");
        int kmtidx = line.indexOf("KernelModeTime");
        int wocidx = line.indexOf("WriteOperationCount");
        long idletime = 0;
        long kneltime = 0;
        long usertime = 0;
        while ((line = input.readLine()) != null) {
            if (line.length() < wocidx) {
                continue;
            }
            // 字段出现顺序：Caption,CommandLine,KernelModeTime,ReadOperationCount,
            // ThreadCount,UserModeTime,WriteOperation
            String caption = Bytes.substring(line, capidx, cmdidx - 1).trim();
            String cmd = Bytes.substring(line, cmdidx, kmtidx - 1).trim();
            if (cmd.indexOf("wmic.exe") >= 0) {
                continue;
            }
            // log.info("line="+line);
            if (caption.equals("System Idle Process") || caption.equals("System")) {
                idletime += Long.valueOf(Bytes.substring(line, kmtidx, rocidx - 1).trim()).longValue();
                idletime += Long.valueOf(Bytes.substring(line, umtidx, wocidx - 1).trim()).longValue();
                continue;
            }
            kneltime += Long.valueOf(Bytes.substring(line, kmtidx, rocidx - 1).trim()).longValue();
            usertime += Long.valueOf(Bytes.substring(line, umtidx, wocidx - 1).trim()).longValue();
        }
        retn[0] = idletime;
        retn[1] = kneltime + usertime;
        return retn;
    } catch (Exception ex) {
        ex.printStackTrace();
    } finally {
        try {
            proc.getInputStream().close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    return null;
}
