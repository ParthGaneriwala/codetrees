public boolean initialize() {
    try {
        mgrs = new RTPManager[sessions.length];
        playerWindows = new Vector();
        SessionLabel session;
        // Open the RTP sessions.
        for (int i = 0; i < sessions.length; i++) {
            // Parse the session addresses.
            try {
                session = new SessionLabel(sessions[i]);
            } catch (IllegalArgumentException e) {
                System.err.println("Failed to parse the session address given: " + sessions[i]);
                return false;
            }
            System.err.println("  - Open RTP session for: addr: " + session.addr + " port: " + session.port + " ttl: " + session.ttl);
            mgrs[i] = (RTPManager) RTPManager.newInstance();
            mgrs[i].addSessionListener(this);
            mgrs[i].addReceiveStreamListener(this);
            // Initialize the RTPManager with the RTPSocketAdapter
            RTPSocketAdapter receivesocket = new RTPSocketAdapter(InetAddress.getByName(session.addr), session.port, session.ttl);
            // receivesocket.setReceiveBufferSize(4096);
            mgrs[i].initialize(receivesocket);
            // You can try out some other buffer size to see
            // if you can get better smoothness.
            BufferControl bc = (BufferControl) mgrs[i].getControl("javax.media.control.BufferControl");
            if (bc != null)
                bc.setBufferLength(1024);
        }
    } catch (Exception e) {
        System.err.println("Cannot create the RTP Session: " + e.getMessage());
        return false;
    }
    // Wait for data to arrive before moving on.
    long then = System.currentTimeMillis();
    // wait for a maximum of 30 secs.
    long waitingPeriod = 300000;
    try {
        synchronized (dataSync) {
            while (!dataReceived && System.currentTimeMillis() - then < waitingPeriod) {
                if (!dataReceived)
                    System.err.println("  - Waiting for RTP data to arrive");
                dataSync.wait(1000);
            }
        }
    } catch (Exception e) {
    }
    if (!dataReceived) {
        System.err.println("No RTP data was received.");
        close();
        return false;
    }
    return true;
}
