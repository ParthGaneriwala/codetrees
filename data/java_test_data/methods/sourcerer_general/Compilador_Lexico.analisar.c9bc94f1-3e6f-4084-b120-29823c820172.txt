public List<Token> analisar(String sequencia) {
    line = 0;
    List<Token> returnList = new LinkedList<Token>();
    int estadoAtual = 0;
    StringBuilder sequenciaAtual = null;
    int sequenciaLength = sequencia.length();
    for (int i = 0; i < sequenciaLength; i++) {
        char charAtual = sequencia.charAt(i);
        if (((int) charAtual) == 10) {
            line++;
        }
        switch(estadoAtual) {
            case 0:
                {
                    sequenciaAtual = new StringBuilder();
                    estadoAtual = processaEstadoInicial(charAtual);
                    break;
                }
            case 1:
                {
                    estadoAtual = processaEstado1(charAtual);
                    if (estadoAtual == 0) {
                        if (PalavrasReservadasConstants.PALAVRAS_RESERVADAS.containsKey(sequenciaAtual.toString().toUpperCase())) {
                            returnList.add(new Token(PalavrasReservadasConstants.PALAVRAS_RESERVADAS.get(sequenciaAtual.toString().toUpperCase()).intValue(), sequenciaAtual.toString(), "Palavra-reservada"));
                        } else {
                            if (sequenciaAtual.toString().length() <= 30) {
                                returnList.add(new Token(25, sequenciaAtual.toString(), "IDENT"));
                            } else {
                                returnList.add(new Token(0, sequenciaAtual.toString(), "Um Identificador n�o pode conter mais de 30 caracteres! Linha: " + line));
                            }
                        }
                        i--;
                        decrementLine(charAtual);
                    } else if (estadoAtual < 0) {
                        returnList.add(new Token(0, sequenciaAtual.toString(), "Caractere n�o reconhecido! Linha: " + line));
                        return returnList;
                    }
                    break;
                }
            case 2:
                {
                    estadoAtual = processaEstado2(charAtual);
                    if (estadoAtual < 0) {
                        returnList.add(new Token(0, sequenciaAtual.toString(), "Um identificador deve terminar com letra ou numero! Linha: " + line));
                        return returnList;
                    }
                    break;
                }
            case 3:
                {
                    estadoAtual = processaEstado3(charAtual);
                    break;
                }
            case 4:
                {
                    estadoAtual = processaEstado4(charAtual);
                    if (estadoAtual == 0) {
                        if (sequenciaAtual.toString().length() < 257) {
                            returnList.add(new Token(48, sequenciaAtual.toString(), "LITERAL"));
                        } else {
                            returnList.add(new Token(0, sequenciaAtual.toString(), "ILEGAL, valor fora da escala! Linha:" + line));
                        }
                        i--;
                        decrementLine(charAtual);
                    }
                    break;
                }
            case 5:
                {
                    estadoAtual = processaEstado5(charAtual);
                    if (estadoAtual == 0) {
                        returnList.add(new Token(43, sequenciaAtual.toString(), "Sinal-de-Menor"));
                        i--;
                        decrementLine(charAtual);
                    }
                    break;
                }
            case 6:
                {
                    estadoAtual = processaEstado6(charAtual);
                    if (estadoAtual == 0) {
                        returnList.add(new Token(41, sequenciaAtual.toString(), "Sinal-de-Maior"));
                        i--;
                        decrementLine(charAtual);
                    }
                    break;
                }
            case 7:
                {
                    estadoAtual = processaEstado7(charAtual);
                    if (estadoAtual == 0) {
                        if (sequenciaAtual.toString().equals("-")) {
                            returnList.add(new Token(31, sequenciaAtual.toString(), "Sinal-de-Subtra��o"));
                        } else if (sequenciaAtual.toString().equals("=")) {
                            returnList.add(new Token(40, sequenciaAtual.toString(), "Sinal-de-Igualdade"));
                        } else if (sequenciaAtual.toString().equals("<>")) {
                            returnList.add(new Token(45, sequenciaAtual.toString(), "Sinal-de-Diferente"));
                        } else if (sequenciaAtual.toString().equals(">=")) {
                            returnList.add(new Token(42, sequenciaAtual.toString(), "Sinal-de-Maior-igual"));
                        } else if (sequenciaAtual.toString().equals("<=")) {
                            returnList.add(new Token(44, sequenciaAtual.toString(), "Sinal-de-Menor-igual"));
                        } else if (sequenciaAtual.toString().equals("+")) {
                            returnList.add(new Token(30, sequenciaAtual.toString(), "Sinal-de-Adi��o"));
                        } else if (sequenciaAtual.toString().equals("*")) {
                            returnList.add(new Token(32, sequenciaAtual.toString(), "Sinal-de-Multiplica��o"));
                        } else if (sequenciaAtual.toString().equals(")")) {
                            returnList.add(new Token(37, sequenciaAtual.toString(), "Fechamento-de-par�nteses"));
                        } else if (sequenciaAtual.toString().equals("[")) {
                            returnList.add(new Token(34, sequenciaAtual.toString(), "Abertura-de-colchetes"));
                        } else if (sequenciaAtual.toString().equals("]")) {
                            returnList.add(new Token(35, sequenciaAtual.toString(), "Fechamento-de-colchetes"));
                        } else if (sequenciaAtual.toString().equals(",")) {
                            returnList.add(new Token(46, sequenciaAtual.toString(), "V�rgula"));
                        } else if (sequenciaAtual.toString().equals(";")) {
                            returnList.add(new Token(47, sequenciaAtual.toString(), "Ponto-e-v�rgula"));
                        } else if (sequenciaAtual.toString().equals("..")) {
                            returnList.add(new Token(50, sequenciaAtual.toString(), "Ponto-ponto"));
                        } else if (sequenciaAtual.toString().equals(":=")) {
                            returnList.add(new Token(38, sequenciaAtual.toString(), "Sinal-de-atribui��o"));
                        } else if (sequenciaAtual.toString().equals("$")) {
                            returnList.add(new Token(51, sequenciaAtual.toString(), "Fim-de-Arquivo"));
                            System.err.println("[WARNING] Ignorou Token Inv�lido! Linha:" + line);
                            // JOptionPane.showMessageDialog(null, "Ignorou");
                            i = sequenciaLength;
                            break;
                        }
                        i--;
                        decrementLine(charAtual);
                    }
                    break;
                }
            case 8:
                {
                    estadoAtual = processaEstado8(charAtual);
                    if (estadoAtual == 0) {
                        returnList.add(new Token(49, sequenciaAtual.toString(), "Ponto-final"));
                        i--;
                        decrementLine(charAtual);
                    }
                    break;
                }
            case 9:
                {
                    estadoAtual = processaEstado9(charAtual);
                    if (estadoAtual == 0) {
                        returnList.add(new Token(39, sequenciaAtual.toString(), "Dois-pontos"));
                        i--;
                        decrementLine(charAtual);
                    }
                    break;
                }
            case 10:
                {
                    estadoAtual = processaEstado15(charAtual);
                    if (estadoAtual == 0) {
                        returnList.add(new Token(33, sequenciaAtual.toString(), "Sinal-de-divis�o"));
                        i--;
                        decrementLine(charAtual);
                    }
                    break;
                }
            case 11:
                {
                    estadoAtual = processaEstado11(charAtual);
                    if (estadoAtual < 0) {
                        returnList.add(new Token(0, sequenciaAtual.toString().replaceAll("\n", "/n").replaceAll("\t", "/t"), "Um identificador deve terminar com letra ou numero! Linha: " + line));
                        return returnList;
                    }
                    break;
                }
            case 12:
                {
                    estadoAtual = processaEstado12(charAtual);
                    break;
                }
            case 13:
                {
                    estadoAtual = processaEstado13(charAtual);
                    if (estadoAtual == 0) {
                        i--;
                        decrementLine(charAtual);
                    }
                    break;
                }
            case 14:
                {
                    estadoAtual = processaEstado14(charAtual);
                    if (estadoAtual <= 0) {
                        if (estadoAtual == 0) {
                            i--;
                        }
                        try {
                            int numInteiro = Integer.parseInt(sequenciaAtual.toString());
                            if (numInteiro > 32767 || numInteiro < -32767) {
                                returnList.add(new Token(0, sequenciaAtual.toString(), "ILEGAL, valor fora da escala! Linha: " + line));
                            } else {
                                returnList.add(new Token(26, numInteiro + "", "INTEIRO"));
                            }
                        } catch (Exception e) {
                            returnList.add(new Token(0, sequenciaAtual.toString(), "ILEGAL, n�o aceita ponto decimal nem outros caracteres! Linha: " + line));
                        }
                    }
                    break;
                }
            case 15:
                {
                    estadoAtual = processaEstado10(charAtual);
                    if (estadoAtual == 0) {
                        returnList.add(new Token(36, sequenciaAtual.toString(), "Abertura-de-Parenteses"));
                        i--;
                        decrementLine(charAtual);
                    }
                    break;
                }
            case -1:
                {
                    break;
                }
        }
        if (estadoAtual >= 0) {
            sequenciaAtual.append(charAtual);
        } else {
            returnList.add(new Token(0, "" + charAtual, "[WARNING] Ignorou Token Inv�lido! Linha: " + line));
            estadoAtual = 0;
        }
    }
    return returnList;
}
