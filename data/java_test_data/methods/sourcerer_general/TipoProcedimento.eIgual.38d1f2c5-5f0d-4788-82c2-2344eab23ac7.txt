public boolean eIgual(Tipo tipo) {
    boolean retorno = true;
    if (tipo instanceof TipoProcedimento) {
        TipoProcedimento tipoProc = (TipoProcedimento) tipo;
        if (this.tiposParametrosFormais.isEmpty()) {
            if (!tipoProc.tiposParametrosFormais.isEmpty()) {
                // ERRO --> O m�todo foi declarado sem par�metro e foi chamado com par�metro
                retorno = false;
            }
        } else {
            // invertemos a cole��o pois como vem de Lista ele vem invertido
            Collections.reverse(this.tiposParametrosFormais);
            Collections.reverse(tipoProc.tiposParametrosFormais);
            if (tipoProc.tiposParametrosFormais.isEmpty()) {
                if (this.tiposParametrosFormais.get(this.tiposParametrosFormais.size() - 1) instanceof TipoTupla) {
                    // O m�todo foi declarado com varags e foi chamado sem enviar par�metros
                    retorno = true;
                } else {
                    // ERRO --> o m�todo foi declarado com par�metro, foi chamado sem par�metro e n�o era VARARGS
                    retorno = false;
                }
            } else {
                // O m�todo foi declarado com par�metro e veio com par�metro.
                // verificar se a quantidade de par�metro que veio � no m�nimo igual ao tamanho de argumentos menos um
                int argsFormais = this.tiposParametrosFormais.size();
                int argsReais = tipoProc.tiposParametrosFormais.size();
                // verificando se o �ltimo elemento � um tipo varargs.
                if (this.tiposParametrosFormais.get(argsFormais - 1) instanceof TipoTupla) {
                    if (argsReais < (argsFormais - 1)) {
                        // ERRO --> a fun��o passou a quantidade de argumentos menor que a necess�ria
                        retorno = false;
                    } else {
                        if (argsReais == (argsFormais - 1)) {
                            // checa o tipo dos parametros que n�o s�o varargs se o varags for null
                            for (int i = 0; i < tipoProc.tiposParametrosFormais.size(); i++) {
                                retorno &= this.tiposParametrosFormais.get(i).eIgual(tipoProc.tiposParametrosFormais.get(i));
                            }
                        } else {
                            // TODOS OS TIPOS AT� O VARAGS TEM QUE CASAR COM O TIPO DEFINIDO NA SUA RESPECTIVA DECLARA��O
                            // criar uma sublista com os elementos que v�o at� o varargs
                            List<Tipo> declarados = this.tiposParametrosFormais.subList(0, (argsFormais - 1));
                            List<Tipo> passados = tipoProc.tiposParametrosFormais.subList(0, (argsFormais - 1));
                            for (int i = 0; i < declarados.size(); i++) {
                                retorno &= passados.get(i).eIgual(declarados.get(i));
                            }
                            if (retorno) {
                                List<Tipo> passadosVarargs = tipoProc.tiposParametrosFormais.subList((argsFormais - 1), (argsReais));
                                TipoTupla varargs = (TipoTupla) this.tiposParametrosFormais.get(argsFormais - 1);
                                Tipo tipoVarargs = varargs.getTipoInterno();
                                for (Tipo elementoVarargs : passadosVarargs) {
                                    retorno &= elementoVarargs.eIgual(tipoVarargs);
                                }
                            }
                        }
                    }
                } else {
                    if (argsReais != argsFormais) {
                        // ERRO --> a fun��o passou a quantidade de argumentos diferente da declarada
                        // Caso entre aqui, a fun��o n�o tem varargs, ent�o a quantidade de parametros
                        // deve ser exatamente igual � declarada.
                        retorno = false;
                    } else {
                        for (int i = 0; i < this.tiposParametrosFormais.size(); i++) {
                            retorno &= this.tiposParametrosFormais.get(i).eIgual(tipoProc.tiposParametrosFormais.get(i));
                        }
                    }
                }
            }
            // revertemos a invers�o
            Collections.reverse(this.tiposParametrosFormais);
            Collections.reverse(tipoProc.tiposParametrosFormais);
        }
        return retorno;
    }
    return tipo.eIgual(this);
}
