public EntityEffectStrategy make(String[] desc) {
    String s = getName();
    if (s.equals("KillStrategy"))
        return new KillStrategy();
    if (s.equals("LevelUpStrategy")) {
        String[] g = desc[0].split(getNextSeperator());
        return new LevelUpStrategy(Integer.parseInt(g[1]));
    }
    if (s.equals("StatStrategy")) {
        StatColFactory f = new StatColFactory(getNextSeperator(), A);
        return new StatStrategy(f.make(desc[0]));
    }
    if (s.equals("GiveItemStrategy")) {
        InventoryItem I = new InventoryItemFactory(getNextSeperator(), A).make(desc[0]);
        return new GiveItemStrategy(I);
    }
    if (s.equals("GiveInventoryStrategy")) {
        Inventory I = new InventoryFactory(getNextSeperator(), A).make(desc[0]);
        return new GiveInventoryStrategy(I);
    }
    if (s.equals("TeleportStrategy")) {
        GameArea G = null;
        Coordinate C = null;
        for (String ss : desc) {
            String sss = formatName(ss);
            if (sss.equals("Coordinate")) {
                String[] g = ss.split(getNextSeperator());
                g[1] = g[1].replaceAll("[\\(\\)]", "");
                String[] g2 = g[1].split("[^0-9]");
                C = new Coordinate(Integer.parseInt(g2[0]), Integer.parseInt(g2[1]));
            } else if (sss.equals("GameArea")) {
                String[] g = ss.split(getNextSeperator());
                g[1] = g[1].replaceFirst(".$", "");
                G = A.getGameArea(Integer.parseInt(g[1]));
            } else {
                throw new IllegalArgumentException("Unrecognized Teleport Save String");
            }
        }
        return new TeleportStrategy(C, G);
    }
    if (s.equals("RiverAOEStrategy")) {
        GameArea G = null;
        Vector<Coordinate> C = new Vector<Coordinate>(10);
        for (String ss : desc) {
            String sss = formatName(ss);
            if (sss.equals("Coordinate")) {
                String[] g = ss.split(getNextSeperator());
                g[1] = g[1].replaceAll("[\\(\\)]", "");
                String[] g2 = g[1].split("[^0-9]");
                Coordinate C2 = new Coordinate(Integer.parseInt(g2[0]), Integer.parseInt(g2[1]));
                C.add(C2);
            } else if (sss.equals("GameArea")) {
                String[] g = ss.split(getNextSeperator());
                g[1] = g[1].replaceFirst(".$", "");
                G = A.getGameArea(Integer.parseInt(g[1]));
            } else {
                throw new IllegalArgumentException("Unrecognized Teleport Save String");
            }
        }
        return new RiverAOEStrategy(C, G);
    }
    throw new IllegalArgumentException("Unrecognized Strategy Type " + getName());
}
