public static void main(String[] args) {
    // sets the look and feel so that the program matches the system
    try {
        UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
    } catch (ClassNotFoundException e) {
        e.printStackTrace(System.err);
    } catch (InstantiationException e) {
        e.printStackTrace(System.err);
    } catch (IllegalAccessException e) {
        e.printStackTrace(System.err);
    } catch (UnsupportedLookAndFeelException e) {
        e.printStackTrace(System.err);
    }
    // load the IP from the config file
    Properties ipProp = new Properties();
    InputStream input = null;
    File propFile = new File(propFileName);
    try {
        // create a new file if none exists currently
        if (!propFile.exists()) {
            ipProp.setProperty(IP, "localhost");
            ipProp.storeToXML(new FileOutputStream(propFile), "Mapster Server IP");
        } else {
            input = new FileInputStream(propFile);
            try {
                // load from file
                ipProp.loadFromXML(input);
            // if fail to load because file couldn't read, make new file
            // with default of localhost
            } catch (IOException e) {
                ipProp.setProperty(IP, "localhost");
                ipProp.storeToXML(new FileOutputStream(propFile), "");
            }
        }
    } catch (IOException err) {
    } finally {
        if (input != null) {
            try {
                input.close();
            } catch (IOException err) {
            }
        }
    }
    // Sets the temporary directory to store files
    if (ipProp.getProperty(TMPDIR) != null) {
        MultimediaHandler.setTempDir(ipProp.getProperty(TMPDIR));
    } else {
        MultimediaHandler.setTempDir(new File("tmp").getAbsolutePath() + File.separator);
    }
    // Sets the path to the video player
    String vid = ipProp.getProperty(VIDPLAYER);
    if (vid != null && vid.length() > 0) {
        MediaPlayer.getSingleton().setVideoPlayer(vid);
    }
    // Sets the path to the audio player
    String aud = ipProp.getProperty(AUDPLAYER);
    if (aud != null && aud.length() > 0) {
        MediaPlayer.getSingleton().setAudioPlayer(aud);
    }
    // create connection with server
    ConnectionHandler connection = new ConnectionHandler();
    TestChecker.getInstance().initialize(ipProp);
    // why is this connecting to localhost? we want it to connect to the ip of the server in the config file
    // String err = connection.connect(ipProp.getProperty(IP), "localhost", 4444);
    // String err = connection.connect(ipProp.getProperty(IP), ipProp.getProperty(IP), 4444);
    // 
    // //if there was an error trying to connect
    // if (err != null) {
    // JOptionPane.showMessageDialog(null, err, "Connection Error", JOptionPane.ERROR_MESSAGE);
    // return;
    // }
    // otherwise - go!
    // else {
    // create authHandler and client GUI, then do authentication and set
    // ClientGUI visible on success in LoginDialog
    AuthenticationHandler authHandler = AuthenticationHandler.getInstance();
    ClientGUI clientGUI = new ClientGUI(connection, authHandler);
    new LoginDialog("new", ipProp.getProperty(IP), authHandler, connection, clientGUI);
// }
}
