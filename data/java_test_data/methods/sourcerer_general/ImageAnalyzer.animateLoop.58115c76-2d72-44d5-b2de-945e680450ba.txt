void animateLoop() {
    // Create an off-screen image to draw on, and a GC to draw with.
    // Both are disposed after the animation.
    Image offScreenImage = new Image(display, loader.logicalScreenWidth, loader.logicalScreenHeight);
    GC offScreenImageGC = new GC(offScreenImage);
    try {
        // Use syncExec to get the background color of the imageCanvas.
        display.syncExec(new Runnable() {

            public void run() {
                canvasBackground = imageCanvas.getBackground();
            }
        });
        // Fill the off-screen image with the background color of the
        // canvas.
        offScreenImageGC.setBackground(canvasBackground);
        offScreenImageGC.fillRectangle(0, 0, loader.logicalScreenWidth, loader.logicalScreenHeight);
        // Draw the current image onto the off-screen image.
        offScreenImageGC.drawImage(image, 0, 0, imageData.width, imageData.height, imageData.x, imageData.y, imageData.width, imageData.height);
        int repeatCount = loader.repeatCount;
        while (animate && (loader.repeatCount == 0 || repeatCount > 0)) {
            if (imageData.disposalMethod == SWT.DM_FILL_BACKGROUND) {
                // Fill with the background color before drawing.
                Color bgColor = null;
                int backgroundPixel = loader.backgroundPixel;
                if (showBackground && backgroundPixel != -1) {
                    // Fill with the background color.
                    RGB backgroundRGB = imageData.palette.getRGB(backgroundPixel);
                    bgColor = new Color(null, backgroundRGB);
                }
                try {
                    offScreenImageGC.setBackground(bgColor != null ? bgColor : canvasBackground);
                    offScreenImageGC.fillRectangle(imageData.x, imageData.y, imageData.width, imageData.height);
                } finally {
                    if (bgColor != null)
                        bgColor.dispose();
                }
            } else if (imageData.disposalMethod == SWT.DM_FILL_PREVIOUS) {
                // Restore the previous image before drawing.
                offScreenImageGC.drawImage(image, 0, 0, imageData.width, imageData.height, imageData.x, imageData.y, imageData.width, imageData.height);
            }
            // Get the next image data.
            imageDataIndex = (imageDataIndex + 1) % imageDataArray.length;
            imageData = imageDataArray[imageDataIndex];
            image.dispose();
            image = new Image(display, imageData);
            // Draw the new image data.
            offScreenImageGC.drawImage(image, 0, 0, imageData.width, imageData.height, imageData.x, imageData.y, imageData.width, imageData.height);
            // Draw the off-screen image to the screen.
            imageCanvasGC.drawImage(offScreenImage, 0, 0);
            // Sleep for the specified delay time before drawing again.
            try {
                Thread.sleep(visibleDelay(imageData.delayTime * 10));
            } catch (InterruptedException e) {
            }
            // then decrement the repeat count.
            if (imageDataIndex == imageDataArray.length - 1)
                repeatCount--;
        }
    } finally {
        offScreenImage.dispose();
        offScreenImageGC.dispose();
    }
}
