public void readFields(Importer in) throws IOException {
    in.defaultReadFields();
    sceneId = in.read("sceneId", 0);
    name = in.read("name", "");
    version = in.read("version", 1);
    auxModels = in.read("auxModels", new AuxModel[0], AuxModel[].class);
    // initialize the tile config counts
    for (CoordIntEntry entry : _tiles.coordIntEntrySet()) {
        int idx = getConfigIndex(entry.getIntValue());
        _tileConfigs.get(idx).count++;
    }
    // initialize the reverse mapping for the tile configs
    for (int ii = 0, nn = _tileConfigs.size(); ii < nn; ii++) {
        TileConfigMapping mapping = _tileConfigs.get(ii);
        if (mapping != null) {
            _tileConfigIds.put(mapping.tile, ii);
        }
    }
    // initialize the paint config counts
    for (CoordIntEntry entry : _paint.coordIntEntrySet()) {
        int idx = getConfigIndex(entry.getIntValue());
        _paintConfigs.get(idx).count++;
    }
    // initialize the reverse mapping for the paint configs
    for (int ii = 0, nn = _paintConfigs.size(); ii < nn; ii++) {
        PaintConfigMapping mapping = _paintConfigs.get(ii);
        if (mapping != null) {
            _paintConfigIds.put(mapping.paintable, ii);
        }
    }
    // read the entries, initialize the reference map, find the highest entry id
    for (Entry entry : in.read("entries", new Entry[0], Entry[].class)) {
        _entries.put(entry.getKey(), entry);
        _references.put(entry.getReference(), entry.getReference());
        if (entry instanceof IdEntry) {
            _lastEntryId = Math.max(_lastEntryId, ((IdEntry) entry).getId());
        }
    }
    // read in the layer information
    _layers = Lists.newArrayList(in.read("layers", new String[0], String[].class));
    _layerMap = Maps.newHashMap();
    int[] DEFAULT = new int[0];
    for (int ii = 0, nn = _layers.size(); ii < nn; ii++) {
        Integer layer = (ii + 1);
        for (int key : in.read("layer" + layer, DEFAULT)) {
            _layerMap.put(key, layer);
        }
    }
}
