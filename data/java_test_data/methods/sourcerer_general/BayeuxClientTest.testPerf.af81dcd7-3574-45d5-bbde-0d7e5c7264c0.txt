public void testPerf() throws Exception {
    Runtime.getRuntime().addShutdownHook(new DumpThread());
    AbstractBayeux bayeux = _cometd.getBayeux();
    final int rooms = _stress ? 100 : 50;
    final int publish = _stress ? 4000 : 2000;
    final int batch = _stress ? 10 : 10;
    final int pause = _stress ? 50 : 100;
    BayeuxClient[] clients = new BayeuxClient[_stress ? 500 : 2 * rooms];
    final AtomicInteger connected = new AtomicInteger();
    final AtomicInteger received = new AtomicInteger();
    for (int i = 0; i < clients.length; i++) {
        clients[i] = new BayeuxClient(_httpClient, "http://localhost:" + _server.getConnectors()[0].getLocalPort() + "/cometd") {

            volatile boolean _connected;

            protected void metaConnect(boolean success, Message message) {
                super.metaConnect(success, message);
                if (!_connected) {
                    _connected = true;
                    connected.incrementAndGet();
                }
            }

            protected void metaHandshake(boolean success, boolean reestablish, Message message) {
                if (_connected)
                    connected.decrementAndGet();
                _connected = false;
                super.metaHandshake(success, reestablish, message);
            }
        };
        clients[i].addListener(new MessageListener() {

            public void deliver(Client fromClient, Client toClient, Message message) {
                // System.err.println(message);
                if (message.getData() != null) {
                    received.incrementAndGet();
                }
            }
        });
        clients[i].start();
        clients[i].subscribe("/channel/" + (i % rooms));
    }
    long start = System.currentTimeMillis();
    int d = 0;
    while (connected.get() < clients.length && (System.currentTimeMillis() - start) < 30000) {
        Thread.sleep(1000);
        System.err.println("connected " + connected.get() + "/" + clients.length);
    }
    assertEquals(clients.length, connected.get());
    long start0 = System.currentTimeMillis();
    for (int i = 0; i < publish; i++) {
        final int sender = _random.nextInt(clients.length);
        final String channel = "/channel/" + _random.nextInt(rooms);
        String data = "data from " + sender + " to " + channel;
        // System.err.println(data);
        clients[sender].publish(channel, data, "" + i);
        if (i % batch == (batch - 1)) {
            System.err.print('.');
            Thread.sleep(pause);
        }
        if (i % 1000 == 999)
            System.err.println();
    }
    System.err.println();
    int expected = clients.length * publish / rooms;
    start = System.currentTimeMillis();
    while (received.get() < expected && (System.currentTimeMillis() - start) < 10000) {
        Thread.sleep(1000);
        System.err.println("received " + received.get() + "/" + expected);
    }
    System.err.println((received.get() * 1000) / (System.currentTimeMillis() - start0) + " m/s");
    assertEquals(expected, received.get());
    for (BayeuxClient client : clients) client.disconnect();
    Thread.sleep(clients.length * 20);
    for (BayeuxClient client : clients) client.stop();
}
