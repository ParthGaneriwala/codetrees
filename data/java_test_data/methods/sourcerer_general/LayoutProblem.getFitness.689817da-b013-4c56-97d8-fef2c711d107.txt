public double getFitness(double... variables) {
    double result = 0;
    double x1, x2, y1, y2, w, h, value;
    int posSaida, posEntrada;
    LayoutMachine machine1, machine2;
    // Updating the position of all machines
    for (int i = 0; i < qtyMachines; i++) {
        double x, y, p;
        int pos;
        x = variables[((i * 3) + 0)];
        y = variables[((i * 3) + 1)];
        p = variables[((i * 3) + 2)];
        pos = convertPosition(p);
        machine1 = machines.get(i);
        machine1.updatePosition(x, y, pos);
    }
    for (int i = 0; i < qtyMachines; i++) {
        machine1 = machines.get(i);
        // Verify if the machines can be into the area
        if (machine1.getX1() < leftBounds[((i * 3) + 0)]) {
            value = machine1.getX1() - leftBounds[((i * 3) + 0)];
            result += value * value;
        }
        if (machine1.getY1() < leftBounds[((i * 3) + 1)]) {
            value = machine1.getY1() - leftBounds[((i * 3) + 1)];
            result += value * value;
        }
        if (machine1.getX2() > rightBounds[((i * 3) + 0)]) {
            value = machine1.getX2() - rightBounds[((i * 3) + 0)];
            result += value * value;
        }
        if (machine1.getY2() > rightBounds[((i * 3) + 1)]) {
            value = machine1.getY2() - rightBounds[((i * 3) + 1)];
            result += value * value;
        }
        // Verify if exists a machine under other machine
        for (int j = (i + 1); j < qtyMachines; j++) {
            machine2 = machines.get(j);
            if (!(machine1.getX1() > machine2.getX2() || machine1.getX2() < machine2.getX1() || machine1.getY1() > machine2.getY2() || machine1.getY2() < machine2.getY1())) {
                // Calculating the X difference
                w = machine1.getHalfWidth() + machine2.getHalfWidth();
                value = w - Math.abs(machine1.getCenterX() - machine2.getCenterX());
                value = 2.0 * value;
                result += Math.sqrt(value * value * value * value);
                // Calculating the Y difference
                h = machine1.getHalfHeight() + machine2.getHalfHeight();
                value = h - Math.abs(machine1.getCenterY() - machine2.getCenterY());
                value = 2.0 * value;
                result += Math.sqrt(value * value * value * value);
            }
        }
        // Verify if exists a machine under restriction of map
        for (LayoutMapRestriction mapRestriction : mapRestrictions) {
            if (!(machine1.getX1() > mapRestriction.getX2() || machine1.getX2() < mapRestriction.getX1() || machine1.getY1() > mapRestriction.getY2() || machine1.getY2() < mapRestriction.getY1())) {
                // Calculating the X difference
                w = machine1.getHalfWidth() + mapRestriction.getHalfWidth();
                value = w - Math.abs(machine1.getCenterX() - mapRestriction.getCenterX());
                value = 2.0 * value;
                result += Math.sqrt(value * value);
                // Calculating the Y difference
                h = machine1.getHalfHeight() + mapRestriction.getHalfHeight();
                value = h - Math.abs(machine1.getCenterY() - mapRestriction.getCenterY());
                value = 2.0 * value;
                result += Math.sqrt(value * value);
            }
        }
    }
    for (LayoutLink machineLink : machinesLinks) {
        x1 = 0.0;
        x2 = 0.0;
        y1 = 0.0;
        y2 = 0.0;
        machine1 = machines.get(machineLink.getSourceIndex());
        machine2 = machines.get(machineLink.getDestIndex());
        // Get the current position of the machines
        posSaida = (machine1.getPosition() + machineLink.getSourceSide()) % 4;
        posEntrada = (machine2.getPosition() + machineLink.getDestSide()) % 4;
        switch(posSaida) {
            case LayoutMachine.TOP:
                x1 = machine1.getCenterX();
                y1 = machine1.getY1();
                break;
            case LayoutMachine.BOTTOM:
                x1 = machine1.getCenterX();
                y1 = machine1.getY2();
                break;
            case LayoutMachine.LEFT:
                x1 = machine1.getX1();
                y1 = machine1.getCenterY();
                break;
            case LayoutMachine.RIGHT:
                x1 = machine1.getX2();
                y1 = machine1.getCenterY();
                break;
        }
        switch(posEntrada) {
            case LayoutMachine.TOP:
                x2 = machine2.getCenterX();
                y2 = machine2.getY1();
                break;
            case LayoutMachine.BOTTOM:
                x2 = machine2.getCenterX();
                y2 = machine2.getY2();
                break;
            case LayoutMachine.LEFT:
                x2 = machine2.getX1();
                y2 = machine2.getCenterY();
                break;
            case LayoutMachine.RIGHT:
                x2 = machine2.getX2();
                y2 = machine2.getCenterY();
                break;
        }
        w = Math.abs(x2 - x1);
        h = Math.abs(y2 - y1);
        value = (w * w) + (h * h);
        result += Math.sqrt(value * value);
    }
    return result;
}
