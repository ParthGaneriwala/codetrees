private void handleGetShopcomments(HttpServletRequest req, HttpServletResponse resp) {
    String shopId = req.getParameter("shopid");
    String pageStr = req.getParameter("page");
    String countStr = req.getParameter("count");
    int page = pageStr == null ? 1 : Integer.parseInt(pageStr);
    int count = countStr == null ? 10 : Integer.parseInt(countStr);
    try {
        Cache cache = cacheServiceTracker.getCache("shopcommentsCache");
        String key = shopId + "-" + page + "-" + count;
        ShopComment[] comments = (ShopComment[]) cache.get(key);
        if (comments == null) {
            comments = shopDbhelper.getShopComments(Long.parseLong(shopId), page, count);
            cache.put(key, comments);
            String commentsCacheMarker = shopId + "CommentCache";
            String markerValue = (String) cache.get(commentsCacheMarker);
            if (markerValue == null) {
                markerValue = "";
            }
            StringBuilder sbuilder = new StringBuilder(markerValue);
            sbuilder.append(key + ";");
            cache.put(shopId + "CommentCache", sbuilder.toString());
        }
        JSONArray commentsJson = new JSONArray();
        for (ShopComment comment : comments) {
            JSONObject jsonObj = new JSONObject();
            jsonObj.put("username", comment.getUsername());
            jsonObj.put("score", comment.getScore());
            jsonObj.put("time", comment.getLasModitDate());
            jsonObj.put("content", comment.getContent());
            commentsJson.put(jsonObj);
        }
        resp.getWriter().write(commentsJson.toString());
    } catch (Exception e1) {
        // TODO Auto-generated catch block
        e1.printStackTrace();
    }
}
