protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
    Logger log = Logger.getLogger(FileUpload.class);
    if (ServletFileUpload.isMultipartContent(request)) {
        HttpSession session = request.getSession();
        Database db = new Database();
        Attributes attr = (Attributes) session.getAttribute("attr");
        Info in = (Info) session.getServletContext().getAttribute("in");
        ResultSet rs = null;
        try {
            rs = db.dbQuery("select * from files where file_id = 0", true);
            FileUploadListener listener = new FileUploadListener();
            ServletFileUpload upload = new ServletFileUpload();
            if (in != null)
                upload.setSizeMax(Integer.parseInt(in.upload_limit) * 1000);
            if (log.isDebugEnabled())
                log.debug("Size Max Set: " + upload.getSizeMax());
            upload.setProgressListener(listener);
            FileItemIterator iter = upload.getItemIterator(request);
            rs.moveToInsertRow();
            while (iter.hasNext()) {
                FileItemStream item = iter.next();
                InputStream ins = item.openStream();
                if (item.isFormField()) {
                    if ("upload_id".equals(item.getFieldName())) {
                        String upload_id = Streams.asString(ins);
                        session.setAttribute("ful_" + upload_id, listener);
                        log.debug("Set session listener: ful_" + upload_id);
                    } else
                        rs.updateString(item.getFieldName(), Streams.asString(ins));
                } else {
                    ByteArrayOutputStream baos = new ByteArrayOutputStream();
                    DeflaterOutputStream def = new DeflaterOutputStream(baos);
                    InputStream is = item.openStream();
                    IOUtils.copy(is, def);
                    def.finish();
                    is.close();
                    is = null;
                    rs.updateBytes(item.getFieldName(), baos.toByteArray());
                    def.close();
                    baos.close();
                    baos = null;
                    def = null;
                    String filename = item.getName();
                    if (filename != null) {
                        filename = FilenameUtils.getName(filename);
                        if (filename != null) {
                            filename = filename.replaceAll("#", "");
                            filename = filename.replaceAll("%", "");
                        }
                    }
                    rs.updateString("filename", filename);
                    rs.updateString("content_type", item.getContentType());
                    rs.updateLong("size", listener.getContentLength());
                }
                ins.close();
            }
            if (attr != null)
                rs.updateString("uploaded_by", attr.getFullName());
            else
                rs.updateString("uploaded_by", "Unknown");
            rs.updateTimestamp("uploaded", DateUtils.getTimestamp());
            if (Verify.blank(rs.getString("description")))
                rs.updateString("description", rs.getString("filename"));
            rs.insertRow();
            rs.last();
            if (rs.getBoolean("protected")) {
                rs.updateBoolean("email", false);
                rs.updateRow();
            }
            log.debug("Upload Complete");
        } catch (SizeLimitExceededException e) {
            PrintWriter out = response.getWriter();
            response.setContentType("text/html");
            out.println("<script>window.alert(\"File too large!\\n----------------\\nThe uploaded file size was " + e.getActualSize() / 1000 + "K\\nThe permited size is " + in.upload_limit + "K\");" + "parent.uploading=false;parent.location.replace(parent.location);</script>");
            out.flush();
            out.close();
        } catch (Throwable e) {
            log.error("Throwable caught", e);
            log.error("Cause", e.getCause());
        } finally {
            log.debug("Cleaning up");
            try {
                if (rs != null)
                    rs.getStatement().close();
                if (db != null)
                    db.disconnect();
            } catch (SQLException e) {
            }
        }
    }
}
