public EditPart createEditPart(EditPart context, Object model) {
    EditPart part = null;
    /*
		 * Decide which model we have, and which editpart to create and manage it.
		 */
    if (model instanceof IAnnotation) {
        part = new AnnotationPart();
    } else if (model instanceof IProcessModel) {
        part = new ProcessModelPart();
    } else if (model instanceof Subprocess) {
    // part = new SubprocessPart();
    } else if (model instanceof ITerminalSink) {
        part = new TerminalSinkPart();
    } else if (model instanceof ITerminalSource) {
        part = new TerminalSourcePart();
    } else if (model instanceof Mixer) {
        part = new MixerPart();
    } else if (model instanceof Separator) {
        part = new SeparatorPart();
    } else if (model instanceof SplitJoin) {
    // part = new SplitJoinPart();
    } else if (model instanceof HeatExchangerWithSource) {
        part = new HeatExchangerWithSourcePart();
    } else if (model instanceof HeatExchangerNoSource) {
        part = new HeatExchangerNoSourcePart();
    } else if (model instanceof IProcessUnit) {
        part = new ProcessUnitPart();
    } else if (model instanceof Stream) {
        part = new DirectedStreamPart();
    } else if (model instanceof HeatExchangerStream) {
        part = new DirectedStreamPart();
    } else if (model instanceof Tag) {
        part = new PartTag();
    } else if (model instanceof TagComponentList) {
        part = new PartTagComponentList();
    } else if (model instanceof OverallTagComponent) {
        part = new PartOverallTagComponent();
    } else if (model instanceof OverallUnitsField) {
        part = new PartUnitsField();
    } else if (model instanceof HeatUnitsField) {
        part = new PartHeatUnitsField();
    } else if (model instanceof TagComponent) {
        part = new PartTagComponent();
    } else if (model instanceof ImmutableField) {
        part = new PartImmutableField();
    } else if (model instanceof EquationField) {
        part = new PartEquationField();
    } else if (model instanceof LabelField) {
        part = new PartLabelField();
    } else if (model instanceof HeatCapacityField) {
        part = new PartHeatCapacityField();
    } else if (model instanceof LatentHeatCapacityField) {
        part = new PartLatentHeatCapacityField();
    } else if (model instanceof QuantityField) {
        part = new PartQuantityField();
    } else if (model instanceof AbstractUnitsField) {
        part = new PartUnitsField();
    } else if (model instanceof MaterialField) {
        part = new PartMaterialField();
    } else if (model instanceof OperatorField) {
        part = new PartOperatorField();
    } else if (model instanceof EquationPaletteField) {
        part = new PartEquationPaletteField();
    } else if (model instanceof Equations) {
        part = new PartEquations();
    } else if (model instanceof EquationList) {
        part = new PartEquationList();
    } else if (model instanceof EquationPalette) {
        part = new PartEquationPalette();
    } else if (model instanceof Equation) {
        part = new PartEquation();
    } else if (model instanceof SolvabilityStatus) {
        part = new PartSolvabilityStatus();
    } else if (model instanceof ConsoleView) {
        part = new PartConsoleView();
    } else if (model instanceof TooltipModel) {
        part = new ToolTipPart();
    }
    try {
        /*
			 * Tell the part about it's model. This can be used to create the Figure
			 * based representation at runtime.
			 */
        part.setModel(model);
    } catch (Exception e) {
        e.printStackTrace();
    }
    return part;
}
