/**
 * *********************** Utilities
 * *****************************************
 */
/*
	 * public static String getBuddyParsedPlusSIP(String buddy) { String
	 * result=null; try{ if (buddy.startsWith("sip:") ) { return buddy; } else
	 * return "sip:"+buddy; } catch(Exception e ) { return result; } }
	 * 
	 * public static String getBuddyParsedMinusSIP(String buddy) { String
	 * result=null; try{ if (buddy.startsWith("sip:") ) {
	 * result=buddy.substring(4); return result; } else return buddy; }
	 * catch(Exception e ) { return result; } }
	 */
/**
 * ************************************************************************
 * Methods for initiating, *************** * starting and stopping the User
 * agent (Useful to integrate the User agent in other applications, like a
 * GUI)
 * ************************************************************************
 */
public void start() throws Exception {
    DebugIM.println("Strart the UA in the UA class");
    logger.info("Strart the UA in the UA class");
    sipStack = null;
    sipProvider = null;
    DebugIM.println("set the SipFactory");
    logger.info("set the SipFactory");
    SipFactory sipFactory = SipFactory.getInstance();
    sipFactory.setPathName("gov.nist");
    headerFactory = sipFactory.createHeaderFactory();
    addressFactory = sipFactory.createAddressFactory();
    messageFactory = sipFactory.createMessageFactory();
    // Create SipStack object
    // Create SipStack object
    Properties properties = new Properties();
    if (getIMAddress() != null) {
        properties.setProperty("javax.sip.IP_ADDRESS", getIMAddress());
        DebugIM.println("DebugIM, the stack address is set to: " + getIMAddress());
    } else {
        throw new Exception("ERROR, Specify the stack IP Address.");
    }
    properties.setProperty("gov.nist.javax.sip.ACCESS_LOG_VIA_RMI", "false");
    properties.setProperty("gov.nist.javax.sip.RMI_PORT", "0");
    properties.setProperty("gov.nist.javax.sip.LOG_LIFETIME", "3600");
    properties.setProperty("gov.nist.javax.sip.BAD_MESSAGE_LOG", "./debug/bad_im_message_log.txt");
    properties.setProperty("gov.nist.javax.sip.DEBUG_LOG", "./debug/debug_im_log.txt");
    properties.setProperty("gov.nist.javax.sip.SERVER_LOG", "./debug/server_im_log.txt");
    properties.setProperty("javax.sip.STACK_NAME", "nist-sip-im-client");
    if (getProxyAddress() != null && getProxyPort() != -1 && getIMProtocol() != null) {
        properties.setProperty("javax.sip.OUTBOUND_PROXY", getProxyAddress() + ":" + getProxyPort() + "/" + getIMProtocol());
        DebugIM.println("DebugIM, the outbound proxy is set to: " + getProxyAddress() + ":" + getProxyPort() + "/" + getIMProtocol());
    } else
        DebugIM.println("WARNING, the outbound proxy is not set!");
    // /////////////////////////
    if (getRouterPath() != null)
        properties.setProperty("javax.sip.ROUTER_PATH", getRouterPath());
    else
        DebugIM.println("WARNING, the router class is not set!");
    // tell the stack to create a dialog when message comes in.
    // this is a hack
    DebugIM.println("create the sipstack points!!");
    properties.setProperty("javax.sip.EXTENSION_METHODS", Request.MESSAGE);
    properties.setProperty("javax.sip.USE_ROUTER_FOR_ALL_URIS", "false");
    // ����sipЭ��ջ
    DebugIM.println("hello sipstack");
    sipStack = sipFactory.createSipStack(properties);
    // We create the Listening points:
    if (getIMPort() == -1)
        throw new Exception("ERROR, the stack port is not set");
    if (getIMProtocol() == null)
        throw new Exception("ERROR, the stack transport is not set");
    DebugIM.println("create the listening points!!");
    ListeningPoint lp = null;
    lp = sipStack.createListeningPoint(getIMAddress(), getIMPort(), getIMProtocol());
    DebugIM.println("create the listening points successful!!");
    DebugIM.println("one listening point created: port:" + lp.getPort() + ", " + " transport:" + lp.getTransport());
    // ����sip Provider,��sipЭ��ջ����
    sipProvider = sipStack.createSipProvider(lp);
    sipProvider.addSipListener(this);
    DebugIM.println("DebugIM, Instant Messaging user agent ready to work");
}
