public java.sql.ResultSet executeQuery() throws SQLException {
    checkClosed();
    MySQLConnection locallyScopedConn = this.connection;
    checkForDml(this.originalSql, this.firstCharOfStmt);
    CachedResultSetMetaData cachedMetadata = null;
    // on the same mutex.
    synchronized (locallyScopedConn.getMutex()) {
        clearWarnings();
        boolean doStreaming = createStreamingResultSet();
        this.batchedGeneratedKeys = null;
        if (doStreaming && this.connection.getNetTimeoutForStreamingResults() > 0) {
            java.sql.Statement stmt = null;
            try {
                stmt = this.connection.createStatement();
                ((com.mysql.jdbc.StatementImpl) stmt).executeSimpleNonQuery(this.connection, "SET net_write_timeout=" + this.connection.getNetTimeoutForStreamingResults());
            } finally {
                if (stmt != null) {
                    stmt.close();
                }
            }
        }
        Buffer sendPacket = fillSendPacket();
        if (this.results != null) {
            if (!this.connection.getHoldResultsOpenOverStatementClose()) {
                if (!this.holdResultsOpenOverClose) {
                    this.results.realClose(false);
                }
            }
        }
        String oldCatalog = null;
        if (!locallyScopedConn.getCatalog().equals(this.currentCatalog)) {
            oldCatalog = locallyScopedConn.getCatalog();
            locallyScopedConn.setCatalog(this.currentCatalog);
        }
        // 
        if (locallyScopedConn.getCacheResultSetMetadata()) {
            cachedMetadata = locallyScopedConn.getCachedMetaData(this.originalSql);
        }
        Field[] metadataFromCache = null;
        if (cachedMetadata != null) {
            metadataFromCache = cachedMetadata.fields;
        }
        if (locallyScopedConn.useMaxRows()) {
            // a query, and network traffic).
            if (this.hasLimitClause) {
                this.results = executeInternal(this.maxRows, sendPacket, createStreamingResultSet(), true, metadataFromCache, false);
            } else {
                if (this.maxRows <= 0) {
                    executeSimpleNonQuery(locallyScopedConn, "SET OPTION SQL_SELECT_LIMIT=DEFAULT");
                } else {
                    executeSimpleNonQuery(locallyScopedConn, "SET OPTION SQL_SELECT_LIMIT=" + this.maxRows);
                }
                this.results = executeInternal(-1, sendPacket, doStreaming, true, metadataFromCache, false);
                if (oldCatalog != null) {
                    this.connection.setCatalog(oldCatalog);
                }
            }
        } else {
            this.results = executeInternal(-1, sendPacket, doStreaming, true, metadataFromCache, false);
        }
        if (oldCatalog != null) {
            locallyScopedConn.setCatalog(oldCatalog);
        }
        if (cachedMetadata != null) {
            locallyScopedConn.initializeResultsMetadataFromCache(this.originalSql, cachedMetadata, this.results);
        } else {
            if (locallyScopedConn.getCacheResultSetMetadata()) {
                locallyScopedConn.initializeResultsMetadataFromCache(this.originalSql, null, /* will be created */
                this.results);
            }
        }
    }
    this.lastInsertId = this.results.getUpdateID();
    return this.results;
}
