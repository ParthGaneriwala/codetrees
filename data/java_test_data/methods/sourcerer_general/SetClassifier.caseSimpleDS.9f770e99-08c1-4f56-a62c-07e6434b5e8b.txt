private double[] caseSimpleDS(double[][] klassProbs, String[] classNames) {
    // apply the Dempster-Shafer combination operator successively to each set of probabilities
    // in the klassProbs array.  This could have a problem if we get complete incompatibility.
    BeliefFunction belief = new BeliefFunction(classNames);
    belief.addSingletons(klassProbs[0], classNames);
    for (int i = 1; i < klassProbs.length; i++) {
        try {
            BeliefFunction next = new BeliefFunction(classNames);
            next.addSingletons(klassProbs[i], classNames);
            BeliefFunction combined = ds.combineShafer(belief, next);
            belief = combined;
        } catch (DSTotalConflictException dtce) {
            // System.out.println("INCOMPATIBLE!!!");
            belief = new BeliefFunction(classNames);
            double[] nans = new double[classNames.length];
            Arrays.fill(nans, Double.NaN);
            belief.addSingletons(nans, classNames);
        }
    }
    // I somehow have to get a double[] out of this.  Just get the singletons, since in
    // this case (but NOT the general case) all non-THETA non-zero masses belong to singletons?
    String[][] nonZeroCombined = belief.getNonZeroMassHypos();
    // the + 1 is for unclassified points
    double[] setProbs = new double[klassProbs[0].length + 1];
    for (int i = 0; i < nonZeroCombined.length; i++) {
        int length = nonZeroCombined[i].length;
        if (length != 1) {
            System.out.print("Whoa!  Length is not one");
            for (int j = 0; j < length; j++) {
                System.out.print(", " + nonZeroCombined[i][j]);
            }
            System.out.println();
        } else {
            String klass = nonZeroCombined[i][0];
            int index = DissUtils.findIndex(classNames, klass);
            if (index != -1) {
                // getBelief and getMass should be equivalent for singletons.
                setProbs[index] = belief.getBelief(nonZeroCombined[i]);
            } else if (klass.equalsIgnoreCase(BeliefFunction.THETA)) {
                // need to use getMass b/c getBelief(THETA) = 1
                setProbs[setProbs.length - 1] = belief.getMass(new String[] { BeliefFunction.THETA });
            } else if (klass.equalsIgnoreCase(BeliefFunction.NULL)) {
                System.out.println("I have the feeling this shouldn't happen--NULL should not have a non-zero mass.");
            }
        }
    }
    return setProbs;
}
