public void testProjectCRUD() throws SQLException {
    // Insert project
    Project project = new Project();
    project.setTitle("Project SQL Test");
    project.setShortDescription("Project SQL Test Description");
    project.setRequestDate(new Timestamp(System.currentTimeMillis()));
    project.setEstimatedCloseDate((Timestamp) null);
    project.setRequestedBy("Project SQL Test Requested By");
    project.setRequestedByDept("Project SQL Test Requested By Department");
    project.setBudgetCurrency("USD");
    project.setBudget("10000.75");
    // project.setApprovalDate((Timestamp) null);
    // project.setCloseDate((Timestamp) null);
    project.setGroupId(GROUP_ID);
    project.setEnteredBy(USER_ID);
    project.setModifiedBy(USER_ID);
    assertNotNull(project);
    boolean result = project.insert(db);
    assertTrue("Project was not inserted", result);
    assertTrue("Inserted project did not have an id", project.getId() > -1);
    // Update project
    // Try updating without reloading the project
    assertNull(project.getModified());
    assertTrue("Project to update does not have an id", project.getId() > -1);
    int updateCount = project.update(db);
    assertTrue("The modified field checks for concurrent updates so the modified field must match the load value", updateCount == 0);
    // Reload the project, then update
    assertTrue(project.getId() > -1);
    project = new Project(db, project.getId());
    project.setTitle("Project SQL Test Updated Project");
    updateCount = project.update(db);
    assertTrue("The project was not updated by the database", updateCount == 1);
    // Find the previously set project
    int projectId = project.getId();
    project = null;
    ProjectList projectList = new ProjectList();
    projectList.setProjectId(projectId);
    projectList.buildList(db);
    assertTrue(projectList.size() == 1);
    project = projectList.get(0);
    assertNotNull(project);
    assertTrue("Retrieved project does not match id", project.getId() == projectId);
    // Delete the project
    boolean deleteResult = project.delete(db, (String) null);
    assertTrue("Project wasn't deleted", deleteResult);
    // Try to find the previously deleted project
    projectList = new ProjectList();
    projectList.setProjectId(projectId);
    projectList.buildList(db);
    assertTrue("Project exists when it shouldn't -- id " + projectId, projectList.size() == 0);
}
