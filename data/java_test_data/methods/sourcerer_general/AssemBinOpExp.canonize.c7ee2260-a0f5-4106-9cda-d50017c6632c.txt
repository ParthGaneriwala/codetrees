public AssemSeqExp canonize() {
    AssemSeqExp seLeft = left.canonize();
    AssemSeqExp seRight = right.canonize();
    AssemStm seLeftStm = seLeft.getStm();
    AssemStm seRightStm = seRight.getStm();
    AssemExp seLeftExp = seLeft.getExp();
    AssemExp seRightExp = seRight.getExp();
    AssemSeqExp retSeqExp = null;
    if (commutes(seRightStm, seLeftExp)) {
        // Order does not matter
        AssemStm stm = null;
        if (seLeftStm == null) {
            if (seRightStm != null)
                stm = seRightStm;
        } else {
            if (seRight == null)
                stm = seLeftStm;
            else {
                stm = new AssemSeq(seLeftStm, seRightStm);
            }
        }
        retSeqExp = new AssemSeqExp(stm, new AssemBinOpExp(op, seLeftExp, seRightExp));
    } else {
        // Order matters; the left expression must be evaluated before the right statement
        Temp temp = new Temp();
        AssemTemp assemTemp = new AssemTemp(temp);
        AssemStm stm = null;
        AssemMove moveStm = new AssemMove(assemTemp, seLeftExp);
        if (seLeftStm == null) {
            if (seRightStm != null) {
                stm = new AssemSeq(moveStm, seRightStm);
                retSeqExp = new AssemSeqExp(stm, new AssemBinOpExp(op, assemTemp, seRightExp));
            }
        } else {
            if (seRightStm == null) {
                stm = new AssemSeq(seLeftStm, moveStm);
            } else {
                stm = new AssemSeq(seLeftStm, new AssemSeq(moveStm, seRightStm));
                retSeqExp = new AssemSeqExp(stm, new AssemBinOpExp(op, assemTemp, seRightExp));
            }
        }
    }
    return retSeqExp;
}
