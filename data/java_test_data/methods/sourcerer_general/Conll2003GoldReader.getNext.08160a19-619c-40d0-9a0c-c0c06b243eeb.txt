public void getNext(JCas jCas) throws IOException, CollectionException {
    // read in the data for the next document from the reader
    documentData = new ArrayList<String>();
    String line;
    while ((line = reader.readLine()) != null && !line.startsWith(DOCSTART)) {
        documentData.add(line.trim());
    }
    if (line == null)
        hasNext = false;
    else
        // advance past the blank line that follows
        line = reader.readLine().trim();
    // "-DOCSTART- -X- O O"
    // (we don't want an empty sentence on the front end!)
    documentText = new StringBuffer();
    initSentence();
    tokenPosition = 0;
    chunkStart = 0;
    currentChunkType = "";
    chunkTokens.clear();
    namedEntityStart = 0;
    currentNamedEntityType = "";
    namedEntityTokens.clear();
    for (String dataLine : documentData) {
        if (dataLine.trim().equals("")) {
            createChunk(jCas);
            currentChunkType = "";
            createNamedEntity(jCas);
            currentNamedEntityType = "";
            Sentence sentence = new Sentence(jCas, sentenceStart, documentText.length());
            sentence.addToIndexes();
            initSentence();
        } else {
            String[] dataPieces = dataLine.split(" ");
            String tok = dataPieces[0];
            String pos = dataPieces[1];
            String chunkType = dataPieces[2];
            if (currentChunkType.equals(""))
                initChunk(chunkType);
            String namedEntityType = dataPieces[3];
            if (currentNamedEntityType.equals(""))
                initNamedEntity(namedEntityType);
            Token token = new Token(jCas, documentText.length(), documentText.length() + tok.length());
            token.setPos(pos);
            token.addToIndexes();
            boolean chunkStartsWithB = startsWithB(currentChunkType, chunkType);
            if (!chunkType.equals(currentChunkType) && !chunkStartsWithB) {
                createChunk(jCas);
                initChunk(chunkType);
            }
            boolean namedEntityStartsWithB = startsWithB(currentNamedEntityType, namedEntityType);
            if (!namedEntityType.equals(currentNamedEntityType) && !namedEntityStartsWithB) {
                createNamedEntity(jCas);
                initNamedEntity(namedEntityType);
            }
            sentenceTokens.add(token);
            chunkTokens.add(token);
            namedEntityTokens.add(token);
            documentText.append(tok + " ");
        }
    }
    jCas.setDocumentText(documentText.toString());
    String identifier = String.format("%s#%s", dataFileName, documentIndex);
    ViewURIUtil.setURI(jCas, new File(identifier).toURI());
    ++documentIndex;
}
