@Override
public ActionForward execute(Exception ex, ExceptionConfig ae, ActionMapping mapping, ActionForm formInstance, HttpServletRequest request, HttpServletResponse response) throws ServletException {
    logger.debug("ExceptionHandler executing for exception: {}", ex);
    ActionForward forward;
    ActionMessage error;
    String property;
    // or from the form input
    if (ae.getPath() != null) {
        forward = new ActionForward(ae.getPath());
    } else {
        forward = mapping.getInputForward();
    }
    // Figure out the error
    if (ex instanceof ModuleException) {
        error = ((ModuleException) ex).getActionMessage();
        property = ((ModuleException) ex).getProperty();
    } else {
        if (ex instanceof CommonException) {
            CommonException commonException = (CommonException) ex;
            request.setAttribute(ExceptionConstants.COMMON_EXCEPTION, commonException);
        }
        error = new ActionMessage(ae.getKey(), ex.getMessage());
        property = error.getKey();
    }
    // default log
    this.logException(ex);
    // framework log
    if (logger.isDebugEnabled()) {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append(System.getProperty("line.separator"));
        stringBuilder.append("-------------------------------");
        stringBuilder.append(System.getProperty("line.separator"));
        stringBuilder.append("StackTrace");
        stringBuilder.append(System.getProperty("line.separator"));
        logger.debug(stringBuilder.toString());
        Throwable throwable = ex;
        for (int i = 0; throwable != null; i++) {
            StackTraceElement[] stackTraceList = throwable.getStackTrace();
            int count = stackTraceList.length;
            stringBuilder = new StringBuilder();
            stringBuilder.append(System.getProperty("line.separator"));
            stringBuilder.append(System.getProperty("line.separator"));
            for (int j = count - 1, k = 0; j >= 0; j--, k++) {
                stringBuilder.append("StackTraceElement[");
                stringBuilder.append(j).append("]: ");
                stringBuilder.append(stackTraceList[j].toString());
                stringBuilder.append(System.getProperty("line.separator"));
            }
            logger.debug(stringBuilder.toString());
            throwable = throwable.getCause();
        }
        stringBuilder = new StringBuilder();
        stringBuilder.append("-------------------------------");
        logger.debug(stringBuilder.toString());
    }
    // Store the exception
    request.setAttribute(Globals.EXCEPTION_KEY, ex);
    this.storeException(request, property, error, forward, ae.getScope());
    if (!response.isCommitted()) {
        return forward;
    }
    logger.debug("Response is already committed, so forwarding will not work. Attempt alternate handling.");
    if (!silent(ae)) {
        handleCommittedResponse(ex, ae, mapping, formInstance, request, response, forward);
    } else {
        logger.warn("ExceptionHandler configured with {}s and response is committed.", SILENT_IF_COMMITTED);
    }
    return null;
}
