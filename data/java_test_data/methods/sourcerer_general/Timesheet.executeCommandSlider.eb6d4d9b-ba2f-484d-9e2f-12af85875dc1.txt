public String executeCommandSlider(ActionContext context) {
    if (getUser(context).getId() < 0) {
        return "PermissionError";
    }
    Connection db = null;
    try {
        // Determine the days to show
        String start = context.getRequest().getParameter("start");
        // Determine the dates for display
        Calendar cal = Calendar.getInstance();
        cal.set(Calendar.MILLISECOND, 0);
        cal.set(Calendar.SECOND, 0);
        cal.set(Calendar.MINUTE, 0);
        cal.set(Calendar.HOUR_OF_DAY, 0);
        // Determine the time period
        DailyTimesheetList timesheet = new DailyTimesheetList();
        timesheet.setUserId(getUserId(context));
        if (start != null) {
            long startLong = Long.parseLong(start);
            cal.setTimeInMillis(startLong);
        }
        // Find the most recent Sunday
        while (cal.get(Calendar.DAY_OF_WEEK) != Calendar.SUNDAY) {
            cal.add(Calendar.DAY_OF_WEEK, -1);
        }
        // 4 weeks earlier
        cal.add(Calendar.WEEK_OF_YEAR, -PREVIOUS_WEEKS);
        Timestamp startDate = new Timestamp(cal.getTimeInMillis());
        // 4 + 12 weeks later
        cal.add(Calendar.WEEK_OF_YEAR, (PREVIOUS_WEEKS + NEXT_WEEKS));
        Timestamp endDate = new Timestamp(cal.getTimeInMillis());
        timesheet.setStartDate(startDate);
        timesheet.setEndDate(endDate);
        db = getConnection(context);
        // Load the user's timesheet for the whole period
        timesheet.buildList(db);
        context.getRequest().setAttribute("timesheet", timesheet);
    } catch (Exception e) {
        context.getRequest().setAttribute("Error", e);
        return ("SystemError");
    } finally {
        freeConnection(context, db);
    }
    return "SliderOK";
}
