public static String sendPost(String url, String param) throws IOException {
    String keyf = "d:/jxkj2b2c.pfx";
    // String keyf = "d:/my.jks" ;
    // String keyf = "d:/jxkjb2c.cer" ;
    String pass = "12345678";
    SSLSocketFactory ssf = null;
    PrintWriter out = null;
    BufferedReader in = null;
    String result111 = "";
    try {
        // init context
        SSLContext ctx = SSLContext.getInstance("TLS");
        KeyManagerFactory kmf = KeyManagerFactory.getInstance("SunX509");
        // KeyStore ks=KeyStore.getInstance( "PKCS12" ) ;
        KeyStore ks = KeyStore.getInstance("PKCS12");
        ks.load(new FileInputStream(keyf), pass.toCharArray());
        kmf.init(ks, pass.toCharArray());
        ctx.init(kmf.getKeyManagers(), trustAllCerts, null);
        System.out.println("load keystore success.");
        ssf = ctx.getSocketFactory();
        HttpsURLConnection.setDefaultSSLSocketFactory(ssf);
        HttpsURLConnection.setDefaultHostnameVerifier(hnv);
        URL realUrl = new URL(url);
        // 打开和URL之间的连接
        HttpsURLConnection conn = (HttpsURLConnection) realUrl.openConnection();
        // 设置通用的请求属性
        conn.setRequestProperty("accept", "*/*");
        conn.setRequestProperty("connection", "Keep-Alive");
        conn.setRequestProperty("user-agent", "Mozilla/4.0 ( compatible; MSIE 6.0; Windows NT 5.1; SV1)");
        // 发送POST请求必须设置如下两行
        conn.setDoOutput(true);
        conn.setDoInput(true);
        // 获取URLConnection对象对应的输出流
        out = new PrintWriter(conn.getOutputStream());
        // 发送请求参数
        out.print(param);
        // flush输出流的缓冲
        out.flush();
        // 定义BufferedReader输入流来读取URL的响应
        in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
        String line;
        while ((line = in.readLine()) != null) {
            System.out.println("==>>>" + line + "<<<<====");
            result111 += "\n" + line;
        // System.out.println( "result===========" + result111 ) ;
        }
    } catch (Exception e) {
        System.out.println("发送POST请求出现异常！" + e);
        e.printStackTrace();
    } finally // 使用finally块来关闭输出流、输入流
    {
        try {
            if (out != null) {
                out.close();
            }
            if (in != null) {
                in.close();
            }
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }
    return result111;
}
