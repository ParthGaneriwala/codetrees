@Test
public void testGetStartAnnotation() throws UIMAException {
    // TODO think about what the behavior should be if window annotation
    // boundary does not fall at boundary
    // of featureAnnotation
    WindowExtractor leftEx = new WindowExtractor(Token.class, new SpannedTextExtractor(), WindowFeature.ORIENTATION_LEFT, 0, 3);
    WindowExtractor rightEx = new WindowExtractor(Token.class, new SpannedTextExtractor(), WindowFeature.ORIENTATION_RIGHT, 0, 3);
    WindowExtractor middleEx = new WindowExtractor(Token.class, new SpannedTextExtractor(), WindowFeature.ORIENTATION_MIDDLE, 0, 3);
    WindowExtractor middleRevEx = new WindowExtractor(Token.class, new SpannedTextExtractor(), WindowFeature.ORIENTATION_MIDDLE_REVERSE, 0, 3);
    tokenBuilder.buildTokens(jCas, "because the island was only");
    Annotation focusAnnotation = JCasUtil.selectByIndex(jCas, Token.class, 2);
    assertEquals("island", focusAnnotation.getCoveredText());
    Annotation startAnnotation = leftEx.getStartAnnotation(jCas, focusAnnotation);
    assertEquals("the", startAnnotation.getCoveredText());
    startAnnotation = rightEx.getStartAnnotation(jCas, focusAnnotation);
    assertEquals("was", startAnnotation.getCoveredText());
    startAnnotation = middleEx.getStartAnnotation(jCas, focusAnnotation);
    assertEquals("island", startAnnotation.getCoveredText());
    startAnnotation = middleRevEx.getStartAnnotation(jCas, focusAnnotation);
    assertEquals("island", startAnnotation.getCoveredText());
    jCas.reset();
    tokenBuilder.buildTokens(jCas, "to the top , the sides was so steep and the bushes so thick .");
    focusAnnotation = new Annotation(jCas, 7, 53);
    assertEquals("top , the sides was so steep and the bushes so", focusAnnotation.getCoveredText());
    startAnnotation = leftEx.getStartAnnotation(jCas, focusAnnotation);
    assertEquals("the", startAnnotation.getCoveredText());
    startAnnotation = rightEx.getStartAnnotation(jCas, focusAnnotation);
    assertEquals("thick", startAnnotation.getCoveredText());
    startAnnotation = middleEx.getStartAnnotation(jCas, focusAnnotation);
    assertEquals("top", startAnnotation.getCoveredText());
    startAnnotation = middleRevEx.getStartAnnotation(jCas, focusAnnotation);
    assertEquals("so", startAnnotation.getCoveredText());
    jCas.reset();
    tokenBuilder.buildTokens(jCas, "the side towards Illinois .\n" + "The cavern was as big as two or three rooms bunched together , and Jim could stand up straight in it .\n" + "It was cool in there .");
    focusAnnotation = JCasUtil.selectByIndex(jCas, Sentence.class, 1);
    assertEquals("The cavern was as big as two or three rooms bunched together , and Jim could stand up straight in it .", focusAnnotation.getCoveredText());
    startAnnotation = leftEx.getStartAnnotation(jCas, focusAnnotation);
    assertEquals(".", startAnnotation.getCoveredText());
    startAnnotation = rightEx.getStartAnnotation(jCas, focusAnnotation);
    assertEquals("It", startAnnotation.getCoveredText());
    startAnnotation = middleEx.getStartAnnotation(jCas, focusAnnotation);
    assertEquals("The", startAnnotation.getCoveredText());
    startAnnotation = middleRevEx.getStartAnnotation(jCas, focusAnnotation);
    assertEquals(".", startAnnotation.getCoveredText());
    jCas.reset();
    tokenBuilder.buildTokens(jCas, "text obtained from");
    focusAnnotation = JCasUtil.selectByIndex(jCas, Token.class, 0);
    assertEquals("text", focusAnnotation.getCoveredText());
    startAnnotation = leftEx.getStartAnnotation(jCas, focusAnnotation);
    assertNull(startAnnotation);
    startAnnotation = rightEx.getStartAnnotation(jCas, focusAnnotation);
    assertEquals("obtained", startAnnotation.getCoveredText());
    startAnnotation = middleEx.getStartAnnotation(jCas, focusAnnotation);
    assertEquals("text", startAnnotation.getCoveredText());
    startAnnotation = middleRevEx.getStartAnnotation(jCas, focusAnnotation);
    assertEquals("text", startAnnotation.getCoveredText());
    jCas.reset();
    tokenBuilder.buildTokens(jCas, "and cooked dinner .");
    focusAnnotation = JCasUtil.selectByIndex(jCas, Token.class, -1);
    assertEquals(".", focusAnnotation.getCoveredText());
    startAnnotation = leftEx.getStartAnnotation(jCas, focusAnnotation);
    assertEquals("dinner", startAnnotation.getCoveredText());
    startAnnotation = rightEx.getStartAnnotation(jCas, focusAnnotation);
    assertNull(startAnnotation);
    startAnnotation = middleEx.getStartAnnotation(jCas, focusAnnotation);
    assertEquals(".", startAnnotation.getCoveredText());
    startAnnotation = middleRevEx.getStartAnnotation(jCas, focusAnnotation);
    assertEquals(".", startAnnotation.getCoveredText());
}
