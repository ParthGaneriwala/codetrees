public void createDayList(int userMonth, int userYear) {
    dayList = new java.util.Vector<Integer>();
    if (scheduleData.getDayType() == ScheduleTypes.DayTypes.calendardays) {
        for (String s : scheduleData.getScheduledDay()) dayList.add(Integer.decode(s));
    } else if (scheduleData.getDayType() == ScheduleTypes.DayTypes.specific) {
        GregorianCalendar calTime = new GregorianCalendar(userYear, userMonth, 1);
        int maxDays = calTime.getActualMaximum(Calendar.DAY_OF_MONTH);
        // Loop through every day in the month
        for (int i = 1; i <= maxDays; i++) {
            // Get the weekday of the current day
            int currDayOfWeek = calTime.get(Calendar.DAY_OF_WEEK);
            // Check to see if this day
            for (String s : scheduleData.getScheduledDay()) if (currDayOfWeek == Integer.decode(s))
                dayList.add(i);
            calTime.add(Calendar.DAY_OF_MONTH, 1);
        }
    } else if (scheduleData.getDayType() == ScheduleTypes.DayTypes.annual) {
        GregorianCalendar calTime = new GregorianCalendar(userYear, userMonth, 1);
        int maxDays = calTime.getActualMaximum(Calendar.DAY_OF_MONTH);
        // Convert the string into a date (leave out the hour/min)
        Date startDate = new Date();
        try {
            startDate = new SimpleDateFormat("MM/dd/yyyy").parse(scheduleData.getStartDate());
        } catch (Exception e) {
            System.err.println("Error in ChoreSchedule.createDayList()");
            System.err.println(e);
        }
        // Loop through the array of annual days to add from the start
        String[] addDaysStr = scheduleData.getScheduledDay();
        for (int x = 0; x < addDaysStr.length; x++) {
            // Convert this annual day to an int
            int daysToAdd = Integer.decode(addDaysStr[x]);
            // Loop through all the days of the month
            for (int i = 1; i <= maxDays; i++) {
                GregorianCalendar checkTime = new GregorianCalendar();
                checkTime.setTime(startDate);
                // Keep adding days to the start time to see if it's in this month/year
                while (calTime.after(checkTime)) {
                    checkTime.add(Calendar.DAY_OF_MONTH, daysToAdd);
                    // If it is, add it
                    if (calTime.compareTo(checkTime) == 0)
                        dayList.add(i);
                }
                calTime.add(Calendar.DAY_OF_MONTH, 1);
            }
            // Reset calTime
            calTime = new GregorianCalendar(userYear, userMonth, 1);
        }
    }
}
