public void move(Casa casaOrigem, Casa casaDestino, Tabuleiro tabuleiro) throws PosicaoInvalidaException {
    Vector casasEmAtaqueTemp = this.getCasasEmAtaque(tabuleiro);
    Vector casasVisiveisTemp = this.getCasasVisiveis(tabuleiro);
    // movimento.
    if (casasEmAtaqueTemp.contains(casaDestino) || casasVisiveisTemp.contains(casaDestino)) {
        // como passante.
        if ((casaDestino.getPosicaoY() - casaOrigem.getPosicaoY()) == 2)
            ((CasaGUI) tabuleiro.getCasa(x, y + 1)).setPassante(true);
        // verifica se pode fazer passante.
        if ((casaOrigem.getPosicaoY() == 4) && (casaDestino.getPassante())) {
            // pega a casa em que est� o pe�o que sofrer� passante.
            Casa casaTemp = tabuleiro.getCasa(casaDestino.getPosicaoX(), casaDestino.getPosicaoY() - 1);
            // pega o pe�o que sofre passante.
            Peca pecaTemp = casaTemp.getPeca();
            casaOrigem.removePeca();
            // remove o pe�o que sofreu passante.
            casaTemp.removePeca();
            casaDestino.setPeca(this);
            // atualiza o tabuleiro.
            TabuleiroGUI tabuleiroTemp = (TabuleiroGUI) tabuleiro;
            tabuleiroTemp.removeAllAtaques();
            tabuleiroTemp.atualizaAtaqueBranco();
            tabuleiroTemp.atualizaAtaquePreto();
            // advers�rio.
            if (tabuleiroTemp.isChequeMateBranco()) {
                ((TabuleiroGUI) tabuleiro).mensagemFimJogo("Cheque Mate! Preto Vence!");
            // verifica se o movimento que fiz deixou o meu rei em cheque.
            } else if (tabuleiroTemp.isChequePreto()) {
                // volta ao estado anterior.
                casaTemp.setPeca(pecaTemp);
                casaDestino.removePeca();
                casaOrigem.setPeca(this);
                // atualiza tabuleiro
                tabuleiroTemp.removeAllAtaques();
                tabuleiroTemp.atualizaAtaqueBranco();
                tabuleiroTemp.atualizaAtaquePreto();
                throw new PosicaoInvalidaException("Em xeque possi��o inv�lida");
            }
        // VERIFICA SE VAI SER PROMOVIDO.
        } else if (casaDestino.getPosicaoY() == 7) {
            Peca pecaTemp = casaDestino.getPeca();
            casaOrigem.removePeca();
            casaDestino.removePeca();
            casaDestino.setPeca(this);
            casaDestino.removePeca();
            casaDestino.setPeca(getPromocao());
            TabuleiroGUI tabuleiroTemp = (TabuleiroGUI) tabuleiro;
            tabuleiroTemp.removeAllAtaques();
            tabuleiroTemp.atualizaAtaqueBranco();
            tabuleiroTemp.atualizaAtaquePreto();
            // verifica se as pe�as brancas venceram o jogo
            if (tabuleiroTemp.isChequeMateBranco()) {
                ((TabuleiroGUI) tabuleiro).mensagemFimJogo("Cheque Mate! Preto Vence!");
            // se o movimento que fiz deixou meu rei em xeque.
            } else if (tabuleiroTemp.isChequePreto()) {
                // volta ao estado anterior
                casaOrigem.setPeca(this);
                casaDestino.removePeca();
                casaDestino.setPeca(pecaTemp);
                tabuleiroTemp.removeAllAtaques();
                tabuleiroTemp.atualizaAtaqueBranco();
                tabuleiroTemp.atualizaAtaquePreto();
                throw new PosicaoInvalidaException("Em xeque possi��o inv�lida");
            }
        // MOVE PE�A
        } else {
            Peca pecaTemp = casaDestino.getPeca();
            casaOrigem.removePeca();
            casaDestino.removePeca();
            casaDestino.setPeca(this);
            TabuleiroGUI tabuleiroTemp = (TabuleiroGUI) tabuleiro;
            tabuleiroTemp.removeAllAtaques();
            tabuleiroTemp.atualizaAtaqueBranco();
            tabuleiroTemp.atualizaAtaquePreto();
            if (tabuleiroTemp.isChequeMateBranco()) {
                ((TabuleiroGUI) tabuleiro).mensagemFimJogo("Cheque Mate! Preto Vence!");
            // se o movimento que fiz deixou o meu rei em exque.
            } else if (tabuleiroTemp.isChequePreto()) {
                // volta ao estado anterior
                casaOrigem.setPeca(this);
                casaDestino.removePeca();
                casaDestino.setPeca(pecaTemp);
                tabuleiroTemp.removeAllAtaques();
                tabuleiroTemp.atualizaAtaqueBranco();
                tabuleiroTemp.atualizaAtaquePreto();
                throw new PosicaoInvalidaException("Em xeque possi��o inv�lida");
            }
        }
        movePassante(tabuleiro);
    } else
        throw new PosicaoInvalidaException("Posicao invalida");
}
