@Test
public void testTicket23() throws Throwable {
    // token "place" in "wide. This place was a tolerable long,"
    tokenBuilder.buildTokens(jCas, "a mile wide .\nThis place was a tolerable long ,");
    Token token = JCasUtil.selectByIndex(jCas, Token.class, 5);
    assertEquals("place", token.getCoveredText());
    token.setPos("A");
    Token tokenL0 = JCasUtil.selectByIndex(jCas, Token.class, 4);
    tokenL0.setPos("B");
    Token tokenL1 = JCasUtil.selectByIndex(jCas, Token.class, 3);
    tokenL1.setPos("C");
    Token tokenL2 = JCasUtil.selectByIndex(jCas, Token.class, 2);
    tokenL2.setPos("D");
    Token tokenL3 = JCasUtil.selectByIndex(jCas, Token.class, 1);
    tokenL3.setPos("E");
    Token tokenL4 = JCasUtil.selectByIndex(jCas, Token.class, 0);
    tokenL4.setPos("F");
    WindowExtractor leftPosExtractor = new WindowExtractor(Token.class, new TypePathExtractor(Token.class, "pos"), WindowFeature.ORIENTATION_LEFT, 0, 5);
    List<Feature> features = leftPosExtractor.extract(jCas, token, Sentence.class);
    assertEquals("B", features.get(0).getValue().toString());
    assertEquals(0, ((WindowFeature) features.get(0)).getOutOfBoundsDistance());
    assertEquals("Window_L0_TypePath(Pos)", features.get(0).getName());
    assertEquals(1, ((WindowFeature) features.get(1)).getOutOfBoundsDistance());
    assertEquals("Window_L1OOB1", features.get(1).getName());
    assertEquals(2, ((WindowFeature) features.get(2)).getOutOfBoundsDistance());
    assertEquals("Window_L2OOB2", ((WindowFeature) features.get(2)).getName());
}
