private static LinkedHashMap buildTabMenu(HttpServletRequest request, WikiPageInfo pageInfo) {
    LinkedHashMap links = new LinkedHashMap();
    WikiUserAuth user = ServletUtil.currentUser();
    String pageName = pageInfo.getTopicName();
    String virtualWiki = WikiUtil.getVirtualWikiFromURI(request);
    boolean flag = false;
    Topic obj = null;
    try {
        obj = WikiBase.getDataHandler().lookupTopic(virtualWiki, pageName, false, null);
    } catch (Exception e1) {
        // TODO Auto-generated catch block
        e1.printStackTrace();
    }
    if (null != obj) {
        System.out.println("obj.====:" + obj.getAuditStatus());
    // if()
    }
    try {
        if (pageInfo.getAdmin()) {
            if (user.hasRole(Role.ROLE_SYSADMIN)) {
                links.put("Special:Admin", new WikiMessage("tab.admin.configuration"));
                links.put("Special:Maintenance", new WikiMessage("tab.admin.maintenance"));
                links.put("Special:Roles", new WikiMessage("tab.admin.roles"));
            }
            if (user.hasRole(Role.ROLE_TRANSLATE)) {
                links.put("Special:Translation", new WikiMessage("tab.admin.translations"));
            }
        } else if (pageInfo.getSpecial()) {
            // append query params for pages such as Special:Contributions that need it
            String specialUrl = pageName;
            if (!StringUtils.isBlank(request.getQueryString())) {
                specialUrl = pageName + "?" + request.getQueryString();
            }
        // links.put(specialUrl, new WikiMessage("tab.common.special"));
        } else {
            String article = WikiUtil.extractTopicLink(pageName);
            String comments = WikiUtil.extractCommentsLink(pageName);
            links.put(article + "?show=true", new WikiMessage("tab.common.article"));
            links.put(article + "?show=false", new WikiMessage("tab.common.comments"));
            /*if(ServletUtil.isPublicable(virtualWiki, pageName, user)){
					String commentLink = Utilities.encodeForURL(pageName)+"?topicId="+obj.getTopicId();
					links.put(commentLink, new WikiMessage("tab.common.comments"));
				}*/
            if (ServletUtil.isEditable(virtualWiki, pageName, user)) {
                String editLink = "Special:Edit?topic=" + Utilities.encodeForURL(pageName);
                if (!StringUtils.isBlank(request.getParameter("topicVersionId"))) {
                    editLink += "&topicVersionId=" + request.getParameter("topicVersionId");
                }
                links.put(editLink, new WikiMessage("tab.common.edit"));
            }
            if (article.indexOf("Image") == -1) {
                String historyLink = "Special:History?topic=" + Utilities.encodeForURL(pageName);
                links.put(historyLink, new WikiMessage("tab.common.history"));
            }
            if (ServletUtil.isMoveable(virtualWiki, pageName, user)) {
                String moveLink = "Special:Move?topic=" + Utilities.encodeForURL(pageName);
                links.put(moveLink, new WikiMessage("tab.common.move"));
            }
            // ��ӷ�����ť
            if (ServletUtil.isPublicable(virtualWiki, pageName, user)) {
                String publicLink = request.getContextPath() + "/en/Special:CreateTopic?actionType=public&topicId=" + obj.getTopicId();
                links.put(publicLink, new WikiMessage("tab.common.public"));
            }
            if (user.hasRole(Role.ROLE_USER)) {
                Watchlist watchlist = ServletUtil.currentWatchlist(request, virtualWiki);
                boolean watched = (watchlist.containsTopic(pageName));
                String watchlistLabel = (watched) ? "tab.common.unwatch" : "tab.common.watch";
                String watchlistLink = "Special:Watchlist?topic=" + Utilities.encodeForURL(pageName);
                links.put(watchlistLink, new WikiMessage(watchlistLabel));
            }
            if (pageInfo.isUserPage()) {
                WikiLink wikiLink = LinkUtil.parseWikiLink(pageName);
                String contributionsLink = "Special:Contributions?contributor=" + Utilities.encodeForURL(wikiLink.getArticle());
                links.put(contributionsLink, new WikiMessage("tab.common.contributions"));
            }
            String linkToLink = "Special:LinkTo?topic=" + Utilities.encodeForURL(pageName);
            // links.put(linkToLink, new WikiMessage("tab.common.links"));
            if (user.hasRole(Role.ROLE_ADMIN)) {
                String manageLink = "Special:Manage?topic=" + Utilities.encodeForURL(pageName);
                links.put(manageLink, new WikiMessage("tab.common.manage"));
            }
        // String printLink = "Special:Print?topic=" + Utilities.encodeForURL(pageName);
        // links.put(printLink, new WikiMessage("tab.common.print"));
        }
    } catch (Exception e) {
        logger.severe("Unable to build tabbed menu links", e);
    }
    return links;
}
