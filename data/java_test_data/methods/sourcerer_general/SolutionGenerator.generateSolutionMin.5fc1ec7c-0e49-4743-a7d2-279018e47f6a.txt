static WICOutput generateSolutionMin(WICInput inputData) {
    int[] ySet = inputData.getYSet().clone();
    int n = inputData.getN();
    PriorityQueue<int[]> numbersQueue = arrayProcessor(ySet);
    // in this Vector we store the solutions (intervals + weight --> int[3])
    Vector<int[]> solution = new Vector<int[]>();
    // the first two numbers: interval boundaries, third: weight
    // [a,b] defines the interval, c is the weight
    int a, b, c = 0;
    int[] nextQueueElement = null, queueElement = null;
    while (!numbersQueue.isEmpty()) {
        queueElement = numbersQueue.poll();
        while (ySet[queueElement[0]] < queueElement[1]) {
            if (ySet[queueElement[0]] != 0)
                numbersQueue.add(new int[] { queueElement[0], ySet[queueElement[0]] });
            queueElement = numbersQueue.poll();
            if (// only 0s
            queueElement == null)
                return new WICOutput(solution, solution.size());
        }
        nextQueueElement = (numbersQueue.size() != 0) ? numbersQueue.peek() : null;
        while (nextQueueElement != null && ySet[nextQueueElement[0]] < nextQueueElement[1]) {
            // throw away the element
            numbersQueue.poll();
            if (ySet[nextQueueElement[0]] != 0)
                numbersQueue.add(new int[] { nextQueueElement[0], ySet[nextQueueElement[0]] });
            nextQueueElement = numbersQueue.peek();
        }
        a = queueElement[0];
        b = a + 1;
        c = ySet[queueElement[0]];
        // update the element
        ySet[a] = ySet[a] - c;
        // try to extend it to the left
        while ((a > 0) && (ySet[a - 1] >= c)) {
            a--;
            ySet[a] = ySet[a] - c;
            if (nextQueueElement != null && ySet[a] < nextQueueElement[1])
                if (ySet[a] != 0)
                    numbersQueue.add(new int[] { a, ySet[a] });
        }
        // try to extend it to the right
        while ((b < n) && (ySet[b] >= c)) {
            ySet[b] = ySet[b] - c;
            if (nextQueueElement != null && ySet[b] < nextQueueElement[1])
                if (ySet[b] != 0)
                    numbersQueue.add(new int[] { b, ySet[b] });
            b++;
        }
        // add the triple to the solution set. Adjust the values too
        solution.add(new int[] { a + 1, b + 1, c });
    }
    return new WICOutput(solution, solution.size());
}
