public boolean update(Object object) {
    Class cla = object.getClass();
    Field[] fields = cla.getDeclaredFields();
    StringBuilder sb = new StringBuilder();
    String className = cla.getName().replaceAll("ticketmaster.dataobject.", "");
    sb.append("update `");
    sb.append(className);
    sb.append("` set ");
    for (Field field : fields) {
        if (field.getName().equals(className.toLowerCase() + "ID")) {
            continue;
        }
        // --------------- Added by Wei Liu 04/12
        field.setAccessible(true);
        try {
            Object o = field.get(object);
            if (o == null)
                continue;
        } catch (IllegalArgumentException ex) {
            Logger.getLogger(BaseEntityDAO.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(BaseEntityDAO.class.getName()).log(Level.SEVERE, null, ex);
        }
        field.setAccessible(false);
        // --------------- Added by Wei Liu 04/12
        sb.append(field.getName());
        sb.append(" = ");
        field.setAccessible(true);
        try {
            Object obj = field.get(object);
            field.setAccessible(false);
            String parameter = null;
            if ("int".equals(field.getType().toString())) {
                if (Integer.parseInt(obj.toString()) != 0) {
                    parameter = obj.toString();
                } else {
                    parameter = "0";
                }
            } else if ("float".equals(field.getType().toString()) || "double".equals(field.getType().toString())) {
                if (Double.parseDouble(obj.toString()) != 0) {
                    parameter = obj.toString();
                } else {
                    parameter = "0";
                }
            } else // --------------- Added by Wei Liu 04/12
            if ("boolean".equals(field.getType().toString())) {
                parameter = Converter.BooleanToIntString(obj.toString());
            } else // ---------------
            {
                if (obj != null) {
                    parameter = "\'" + obj.toString() + "\'";
                } else {
                    parameter = "";
                }
            }
            sb.append(parameter);
            sb.append(", ");
        } catch (IllegalArgumentException ex) {
            Logger.getLogger(UserDAO.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(UserDAO.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    sb.replace(sb.lastIndexOf(", "), sb.lastIndexOf(", ") + 1, "");
    sb.append(" where ");
    RowSet crs = null;
    try {
        crs = getPrimaryKeys(className);
    } catch (SQLException ex) {
        Logger.getLogger(BaseEntityDAO.class.getName()).log(Level.SEVERE, null, ex);
    } catch (IOException ex) {
        Logger.getLogger(BaseEntityDAO.class.getName()).log(Level.SEVERE, null, ex);
    } catch (ClassNotFoundException ex) {
        Logger.getLogger(BaseEntityDAO.class.getName()).log(Level.SEVERE, null, ex);
    }
    try {
        while (crs.next()) {
            String fieldName = crs.getObject(4).toString();
            Field field = null;
            try {
                field = cla.getDeclaredField(fieldName);
            } catch (NoSuchFieldException ex) {
                Logger.getLogger(BaseEntityDAO.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SecurityException ex) {
                Logger.getLogger(BaseEntityDAO.class.getName()).log(Level.SEVERE, null, ex);
            }
            sb.append(fieldName);
            sb.append("=");
            field.setAccessible(true);
            try {
                Object obj = field.get(object);
                field.setAccessible(false);
                String parameter = null;
                if ("int".equals(field.getType().toString()) || "float".equals(field.getType().toString()) || "double".equals(field.getType().toString())) {
                    if (Integer.parseInt(obj.toString()) != 0) {
                        parameter = obj.toString();
                    } else {
                        parameter = "0";
                    }
                } else {
                    if (obj != null) {
                        parameter = "\'" + obj.toString() + "\'";
                    } else {
                        parameter = "";
                    }
                }
                sb.append(parameter);
                sb.append(" and ");
            } catch (IllegalArgumentException ex) {
                Logger.getLogger(UserDAO.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IllegalAccessException ex) {
                Logger.getLogger(UserDAO.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    } catch (SQLException ex) {
        Logger.getLogger(BaseEntityDAO.class.getName()).log(Level.SEVERE, null, ex);
    }
    sb.replace(sb.lastIndexOf("and "), sb.lastIndexOf("and ") + 4, "");
    if (execute(sb.toString(), DataOperationType.Update) == 0) {
        return false;
    } else {
        return true;
    }
}
