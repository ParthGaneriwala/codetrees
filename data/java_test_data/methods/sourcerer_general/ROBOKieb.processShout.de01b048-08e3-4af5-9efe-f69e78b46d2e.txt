private void processShout(ICCDatagram dat) {
    String name = dat.getArgument(0);
    String titles = ICCDatagram.getTitle(dat.getArgument(1));
    int type = Integer.parseInt(dat.getArgument(2));
    String shoutText = dat.getText(dat.getArgument(3));
    int userID = getID(name);
    int dayuserID = getDayID(userID);
    int houruserID = getHourID(userID);
    /*
		 * if (shoutText.equalsIgnoreCase("takeback")) { takebackshout=takebackshout+1; if (((double)(takebackshout/20.0)*20.0==takebackshout) &&
		 * (takebackshout>0)) { sendLine("tell 0 So far "+takebackshout+" takeback shouts."); } }
		 */
    if (userID == 0) {
        handle[shoutmaxID] = name;
        userID = shoutmaxID;
        shoutmaxID = shoutmaxID + 1;
        shoutcount[0][userID] = 0;
        shoutcount[1][userID] = 0;
        shoutcount[2][userID] = 0;
    }
    if (houruserID == -1) {
        houruserID = hourmaxID;
        hourIDMap[houruserID] = userID;
        hourmaxID = hourmaxID + 1;
        hourShoutcount[0][houruserID] = 0;
        hourShoutcount[1][houruserID] = 0;
        hourShoutcount[2][houruserID] = 0;
    }
    if (dayuserID == -1) {
        dayuserID = daymaxID;
        dayIDMap[dayuserID] = userID;
        daymaxID = daymaxID + 1;
        dayShoutcount[0][dayuserID] = 0;
        dayShoutcount[1][dayuserID] = 0;
        dayShoutcount[2][dayuserID] = 0;
    }
    if (type < 3) {
        shoutcount[type][userID] = shoutcount[type][userID] + 1;
        hourShoutcount[type][houruserID] = hourShoutcount[type][houruserID] + 1;
        dayShoutcount[type][dayuserID] = dayShoutcount[type][dayuserID] + 1;
    }
    if ((System.currentTimeMillis() - lastGameStartDelayStatsTime) > loginDelayStatsInterval) {
        int avgGameStartDelay = (int) (gameStartDelayTotal / (gameStartDelayCount * 1000));
        // sendLine("tell 0 Breakdown by game type: Wild: "+firstGameType[0]+", Loser's: "+firstGameType[1]+", Bughouse: "+firstGameType[2]+", Crazyhouse: "+firstGameType[3]+", Bullet: "+firstGameType[4]+", Blitz: "+firstGameType[5]+", Standard: "+firstGameType[6]+", 5-Minute: "+firstGameType[7]+", 1-minute: "+firstGameType[8]+".");
        for (int i = 0; i < maxGameTypes; i++) {
            firstGameType[i] = 0;
        }
        gameStartDelayTotal = 0;
        gameStartDelayCount = 0;
        lastGameStartDelayStatsTime = System.currentTimeMillis();
    }
    if ((System.currentTimeMillis() - lastLoginDelayStatsTime) > loginDelayStatsInterval) {
        if (loginDelayCount > 0) {
            int avgLoginDelay = (int) (loginDelayTotal / (loginDelayCount * 1000));
        }
        // sendLine("tell 0 On average, first-time logins took "+avgLoginDelay+" seconds to log in after creating the new account ("+loginDelayCount+" observations).");
        loginDelayTotal = 0;
        loginDelayCount = 0;
        lastLoginDelayStatsTime = System.currentTimeMillis();
    }
    if ((System.currentTimeMillis() - lastAccountsStatsTime) > accountStatsInterval) {
        permAccountCounter = permAccountCounter + accountCreationCounter;
        permLoginCounter = permLoginCounter + firstLoginCounter;
        double actPercentage = ((double) (firstLoginCounter) * 100.0) / ((double) (accountCreationCounter));
        actPercentage = ((int) (actPercentage * 1000)) / 1000.0;
        double permPercentage = ((double) (permLoginCounter) * 100.0) / ((double) (permAccountCounter));
        permPercentage = ((int) (permPercentage * 1000)) / 1000.0;
        Date announceDate = new Date(System.currentTimeMillis() - timeDifference);
        String announceTime = announceDate.getHours() + ":" + announceDate.getMinutes() + ":" + announceDate.getSeconds();
        // sendLine("tell 0 In the 3 hours before "+announceTime+", "+accountCreationCounter+" new accounts were created, and "+firstLoginCounter+" people logged in for the first time.");
        // sendLine("tell 0 "+actPercentage+" % of new accounts actually logged in; the long-run average is "+permPercentage+" %.");
        DataOutputStream dos = null;
        try {
            dos = new DataOutputStream(new BufferedOutputStream(new FileOutputStream("accounts.db")));
        } catch (FileNotFoundException e) {
        }
        try {
            dos.writeInt(permLoginCounter);
            dos.writeInt(permAccountCounter);
        } catch (IOException e) {
        }
        try {
            dos.close();
        } catch (IOException e) {
        }
        accountCreationCounter = 0;
        firstLoginCounter = 0;
        lastAccountsStatsTime = System.currentTimeMillis();
    }
    if ((System.currentTimeMillis() - lastAdvertisingTime) > advertisingInterval) {
        sendLine("shout " + adLine[currentAd]);
        if (currentAd > maxAds - 2) {
            currentAd = 0;
        } else {
            currentAd = currentAd + 1;
        }
        lastAdvertisingTime = System.currentTimeMillis();
    }
    checkOnIdlers();
    checkSim();
    if (System.currentTimeMillis() - lastSaveTimeMillis > saveInterval) {
        writeBackSeqHand();
    } else {
        if (checkedWildNumberRemoval < maxID - 300) {
            wildRemoval(checkedWildNumberRemoval);
            checkedWildNumberRemoval = checkedWildNumberRemoval + 1;
        } else {
            checkedWildNumberRemoval = 0;
        }
    }
}
