private Map<String, FactorDescription> createDescriptions() throws InstantiationException, IllegalAccessException, ClassNotFoundException {
    Map<String, FactorDescription> descriptions = new HashMap<String, FactorDescription>();
    descriptions.put(opts.mainFactor, new FactorDescription(opts.mainFactor, "surface word"));
    String[] factors = opts.overtFactors.split(",");
    for (String factor : factors) {
        if (descriptions.containsKey(factor))
            continue;
        if (factor.matches("^[a-zA-Z]+$")) {
            FactorDescription d = new FactorDescription(factor, factor + " factor");
            d.setDictionary(new Dictionary(1));
            descriptions.put(factor, d);
        } else {
            Matcher matcher = overtFactorRE.matcher(factor);
            if (matcher.matches()) {
                String f = matcher.group(1);
                String classname = matcher.group(2);
                WordToOvertFactorInterface cl = (WordToOvertFactorInterface) Class.forName(classname).newInstance();
                FactorDescription d = new FactorDescription(f, f + " factor");
                d.setDictionary(new Dictionary(1));
                d.setWordToOvertFactor(cl);
                descriptions.put(f, d);
            } else {
                System.err.printf("Failed to recognize overt factor '%s'\n", factor);
            }
        }
    }
    factors = opts.hiddenFactors.split(",");
    for (String factor : factors) {
        if (descriptions.containsKey(factor))
            continue;
        if (factor.matches("^[a-zA-Z]+$")) {
            FactorDescription d = new FactorDescription(factor, factor + " factor");
            d.setOvert(false);
            d.setDictionary(new Dictionary(1));
            descriptions.put(factor, d);
        } else {
            Matcher matcher = hiddenFactorRE.matcher(factor);
            if (matcher.matches()) {
                factor = matcher.group(1);
                String parent = matcher.group(2);
                FactorDescription parentDesc = descriptions.get(parent);
                if (parentDesc == null) {
                    System.err.printf("undefined parent hidden factor: %s\n", parent);
                    continue;
                }
                FactorDescription d = new FactorDescription(factor, factor + " factor", parentDesc);
                Vector<Dictionary> dictionaries = new Vector<Dictionary>(Dictionary.FIRST_NORMAL_VALUE);
                for (int i = 0; i < Dictionary.FIRST_NORMAL_VALUE; ++i) {
                    dictionaries.add(new Dictionary(0));
                }
                d.setDictionaries(dictionaries);
                d.setOvert(false);
                descriptions.put(factor, d);
            }
        }
    }
    return descriptions;
}
