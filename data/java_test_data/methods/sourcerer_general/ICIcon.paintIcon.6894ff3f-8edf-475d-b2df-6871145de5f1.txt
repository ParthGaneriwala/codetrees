public void paintIcon(Component c, Graphics g, int x, int y) {
    Graphics2D g2D = null;
    if (g instanceof Graphics2D) {
        g2D = (Graphics2D) g;
    } else {
        System.err.println("IconJAI: not a Graphics2D.");
        return;
    }
    // Get the clipping rectangle and translate it into image coordinates.
    Rectangle clipBounds = g.getClipBounds();
    int transX = x;
    int transY = y;
    // Determine the extent of the clipping region in tile coordinates.
    int txmin, txmax, tymin, tymax;
    int ti, tj;
    // Constrain drawing to the active image area
    Rectangle imageRect = new Rectangle(minX + transX, minY + transY, width, height);
    if (clipBounds == null) {
        clipBounds = new Rectangle(0, 0, c.getWidth(), c.getHeight());
    // old way - may be calculating the entire image
    // txmin = minTileX;
    // txmax = maxTileX;
    // tymin = minTileY;
    // tymax = maxTileY;
    // g2D.setClip(imageRect);
    }
    // txmin = XtoTileX(clipBounds.x);
    txmin = PlanarImage.XToTileX(clipBounds.x - transX, tileGridXOffset, tileWidth);
    txmin = Math.max(txmin, minTileX);
    txmin = Math.min(txmin, maxTileX);
    // txmax = XtoTileX(clipBounds.x + clipBounds.width - 1);
    txmax = PlanarImage.XToTileX(clipBounds.x + clipBounds.width - 1 - transX, tileGridXOffset, tileWidth);
    txmax = Math.max(txmax, minTileX);
    txmax = Math.min(txmax, maxTileX);
    // tymin = YtoTileY(clipBounds.y);
    tymin = PlanarImage.YToTileY(clipBounds.y - transY, tileGridYOffset, tileHeight);
    tymin = Math.max(tymin, minTileY);
    tymin = Math.min(tymin, maxTileY);
    // tymax = YtoTileY(clipBounds.y + clipBounds.height - 1);
    tymax = PlanarImage.YToTileY(clipBounds.y + clipBounds.height - 1 - transY, tileGridYOffset, tileHeight);
    tymax = Math.max(tymax, minTileY);
    tymax = Math.min(tymax, maxTileY);
    g2D.clip(imageRect);
    if (backgroundColor != null) {
        g2D.setColor(backgroundColor);
    }
    // Loop over tiles within the clipping region
    for (tj = tymin; tj <= tymax; tj++) {
        for (ti = txmin; ti <= txmax; ti++) {
            int tx = PlanarImage.tileXToX(ti, tileGridXOffset, tileWidth);
            int ty = PlanarImage.tileYToY(tj, tileGridYOffset, tileHeight);
            Raster tile = im.getTile(ti, tj);
            DataBuffer dataBuffer = tile.getDataBuffer();
            Point origin = new Point(0, 0);
            WritableRaster wr = tile.createWritableRaster(sampleModel, dataBuffer, origin);
            BufferedImage bi = new BufferedImage(colorModel, wr, false, null);
            AffineTransform transform = AffineTransform.getTranslateInstance(tx + transX, ty + transY);
            if (backgroundColor != null) {
                g2D.fillRect(tx + transX, ty + transY, tileWidth, tileHeight);
            }
            g2D.drawImage(bi, transform, null);
        }
    }
}
