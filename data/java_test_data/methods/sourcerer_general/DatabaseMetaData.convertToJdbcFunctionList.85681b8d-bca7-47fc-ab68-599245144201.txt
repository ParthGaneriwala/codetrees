private void convertToJdbcFunctionList(String catalog, ResultSet proceduresRs, boolean needsClientFiltering, String db, Map procedureRowsOrderedByName, int nameIndex, Field[] fields) throws SQLException {
    while (proceduresRs.next()) {
        boolean shouldAdd = true;
        if (needsClientFiltering) {
            shouldAdd = false;
            String procDb = proceduresRs.getString(1);
            if (db == null && procDb == null) {
                shouldAdd = true;
            } else if (db != null && db.equals(procDb)) {
                shouldAdd = true;
            }
        }
        if (shouldAdd) {
            String functionName = proceduresRs.getString(nameIndex);
            byte[][] rowData = null;
            if (fields != null && fields.length == 9) {
                rowData = new byte[9][];
                // PROCEDURE_CAT
                rowData[0] = catalog == null ? null : s2b(catalog);
                // PROCEDURE_SCHEM
                rowData[1] = null;
                // PROCEDURE_NAME
                rowData[2] = s2b(functionName);
                // reserved1
                rowData[3] = null;
                // reserved2
                rowData[4] = null;
                // reserved3
                rowData[5] = null;
                // REMARKS
                rowData[6] = s2b(proceduresRs.getString("comment"));
                // PROCEDURE_TYPE
                rowData[7] = s2b(Integer.toString(procedureReturnsResult));
                rowData[8] = s2b(functionName);
            } else {
                rowData = new byte[6][];
                // FUNCTION_CAT
                rowData[0] = catalog == null ? null : s2b(catalog);
                // FUNCTION_SCHEM
                rowData[1] = null;
                // FUNCTION_NAME
                rowData[2] = s2b(functionName);
                // REMARKS
                rowData[3] = s2b(proceduresRs.getString("comment"));
                // FUNCTION_TYPE
                rowData[4] = s2b(Integer.toString(getJDBC4FunctionNoTableConstant()));
                // SPECFIC NAME
                rowData[5] = s2b(functionName);
            }
            procedureRowsOrderedByName.put(functionName, new ByteArrayRow(rowData, getExceptionInterceptor()));
        }
    }
}
