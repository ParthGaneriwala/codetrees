public void layoutContainer(final Container parent) {
    int x, y, w, h, s, c;
    int n = nodeToNodePanel.size();
    double parentWidth = parent.getSize().width;
    double parentHeight = parent.getSize().height;
    Insets insets = parent.getInsets();
    int centerX = (int) (parentWidth - (insets.left + insets.right)) / 2;
    int centerY = (int) (parentHeight - (insets.top + insets.bottom)) / 2;
    Component comp = null;
    Component bComp = null;
    Dimension compPS = null;
    if (n == 1) {
        comp = parent.getComponent(0);
        x = centerX;
        y = centerY;
        compPS = comp.getPreferredSize();
        w = compPS.width;
        h = compPS.height;
        comp.setBounds(x, y, w, h);
    } else {
        double r = (Math.min(parentWidth - (insets.left + insets.right), parentHeight - (insets.top + insets.bottom))) / 2;
        // Multiply by .75 to account for extreme right and bottom
        r *= 0.75;
        // Components
        int i = 0;
        for (Node node : this.c.getNodes()) {
            comp = nodeToNodePanel.get(node);
            bComp = nodeToCircularDisplay.get(node);
            // node  = nToC.get(comp);
            // System.out.println(bComp + " " + comp);
            // double new_r = r - 0.5*r*this.c.getWeight(node)/maxweight;
            double new_r = r;
            double ii = i + rotation_offset;
            if (comp != null) {
                compPS = comp.getPreferredSize();
                if (isCircle) {
                    c = (int) (new_r * Math.cos(2 * ii * Math.PI / n));
                    s = (int) (new_r * Math.sin(2 * ii * Math.PI / n));
                } else {
                    c = (int) ((centerX * 0.75) * Math.cos(2 * ii * Math.PI / n));
                    s = (int) ((centerY * 0.75) * Math.sin(2 * ii * Math.PI / n));
                }
                x = c * 2 + centerX;
                y = s + centerY;
                w = compPS.width;
                h = compPS.height;
                comp.setBounds(x, y, w, h);
                if (bComp != null) {
                    bComp.setBounds(x - 300, y - 150, 600, 300);
                }
            }
            i++;
        }
        if (rotation_offset >= n) {
            rotation_offset = 0;
        }
        rotation_offset += 0.01;
    }
}
