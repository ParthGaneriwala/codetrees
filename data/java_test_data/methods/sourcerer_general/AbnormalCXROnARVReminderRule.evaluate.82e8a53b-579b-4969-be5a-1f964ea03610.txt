@Override
protected Result evaluate(final LogicContext context, final Integer patientId, final Map<String, Object> parameters) throws LogicException {
    Result result = new Result();
    ObsWithRestrictionRule obsWithRestrictionRule = new ObsWithStringRestrictionRule();
    parameters.put(EvaluableConstants.OBS_VALUE_CODED, Arrays.asList(EvaluableNameConstants.CXR_PULMONARY_EFFUSION, EvaluableNameConstants.CXR_MILIARY_CHANGES, EvaluableNameConstants.CXR_INFILTRATE, EvaluableNameConstants.CXR_DIFFUSE_NON_MILIARY_CHANGES, EvaluableNameConstants.CXR_CAVITARY_LESION));
    parameters.put(EvaluableConstants.OBS_CONCEPT, Arrays.asList(EvaluableNameConstants.CXR));
    parameters.put(EvaluableConstants.OBS_FETCH_SIZE, 1);
    Result cxrResults = obsWithRestrictionRule.eval(context, patientId, parameters);
    if (CollectionUtils.isNotEmpty(cxrResults)) {
        Result cxrResult = cxrResults.latest();
        parameters.put(EvaluableConstants.ENCOUNTER_FETCH_SIZE, 1);
        parameters.put(EvaluableConstants.ENCOUNTER_TYPE, Arrays.asList(EvaluableNameConstants.ENCOUNTER_TYPE_ADULT_INITIAL, EvaluableNameConstants.ENCOUNTER_TYPE_ADULT_RETURN, EvaluableNameConstants.ENCOUNTER_TYPE_ADULT_NONCLINICALMEDICATION));
        EncounterWithRestrictionRule encounterWithRestrictionRule = new EncounterWithStringRestrictionRule();
        Result encounterResults = encounterWithRestrictionRule.eval(context, patientId, parameters);
        if (CollectionUtils.isNotEmpty(encounterResults)) {
            Result latestResult = encounterResults.latest();
            parameters.put(EvaluableConstants.OBS_ENCOUNTER, Arrays.asList(latestResult.getResultObject()));
            parameters.put(EvaluableConstants.OBS_CONCEPT, Arrays.asList(EvaluableNameConstants.ANTIRETROVIRAL_PLAN));
            parameters.put(EvaluableConstants.OBS_VALUE_CODED, Arrays.asList(EvaluableNameConstants.START_DRUGS));
            Result planResults = obsWithRestrictionRule.eval(context, patientId, parameters);
            if (CollectionUtils.isNotEmpty(planResults)) {
                Result planResult = planResults.latest();
                Boolean displayReminder = Boolean.TRUE;
                parameters.put(EvaluableConstants.OBS_CONCEPT, Arrays.asList(EvaluableNameConstants.TESTS_ORDERED));
                parameters.put(EvaluableConstants.OBS_VALUE_CODED, Arrays.asList(EvaluableNameConstants.CXR));
                Result testOrderedResults = obsWithRestrictionRule.eval(context, patientId, parameters);
                if (CollectionUtils.isNotEmpty(testOrderedResults)) {
                    Result testOrderedResult = testOrderedResults.latest();
                    // check the test ordered date
                    Calendar calendar = Calendar.getInstance();
                    calendar.add(Calendar.MONTH, -6);
                    // test ordered after 6 months ago and comes after the latest cxr result and comes after the plan
                    if (testOrderedResult.getResultDate().after(calendar.getTime()) && testOrderedResult.getResultDate().after(cxrResult.getResultDate()) && testOrderedResult.getResultDate().after(planResult.getResultDate()))
                        displayReminder = Boolean.FALSE;
                }
                if (displayReminder)
                    result.add(new Result(String.valueOf(parameters.get(ReminderParameters.DISPLAYED_REMINDER_TEXT))));
            }
        }
    }
    return result;
}
