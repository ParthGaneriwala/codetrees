public String ConstructXMLTree(String[] filesList, ICompressor comp) throws Exception {
    // get the length of every file
    File f, comp_f = null;
    long[] fileSizes = new long[filesList.length];
    long[] compFileSizes = new long[filesList.length];
    double[] compFactors = new double[filesList.length];
    double[] idealFactors = new double[filesList.length];
    long[] fileSetSizes = new long[filesList.length];
    for (int i = 0; i < filesList.length; i++) {
        f = new File(filesList[i]);
        fileSizes[i] = f.length();
        if (i > 0) {
            fileSetSizes[i] += fileSetSizes[i - 1] + fileSizes[i];
        } else {
            fileSetSizes[i] = fileSizes[i];
        }
    }
    long[] compFileSetSizes = new long[filesList.length];
    f = new File(filesList[0]);
    comp_f = comp.Compress(f);
    compFactors[0] = (double) comp_f.length() / (double) f.length();
    compFileSizes[0] = comp_f.length();
    for (int i = 1; i < filesList.length; i++) {
        long pointer = 0;
        FileOutputStream fos = new FileOutputStream("fileset_" + i + ".tmp");
        for (int j = 0; j <= i; j++) {
            FileInputStream fis = new FileInputStream(filesList[j]);
            byte[] file_data = new byte[(int) fileSizes[j]];
            fis.read(file_data);
            fis.close();
            fos.write(file_data);
        }
        fos.close();
        f = new File("fileset_" + i + ".tmp");
        comp_f = comp.Compress(f);
        compFileSizes[i] = comp_f.length();
        compFactors[i] = ((double) comp_f.length() - compFileSizes[i - 1]) / (double) fileSizes[i];
        idealFactors[i] = IdealCompressionFactor(f);
    }
    // compute f_avg - the avarage compression factor
    double sum = 0, isum = 0;
    for (int i = 1; i < compFactors.length; i++) {
        sum += compFactors[i];
        isum += idealFactors[i];
    }
    double f_avg = sum / (double) (compFactors.length - 1);
    double i_avg = isum / (double) (idealFactors.length - 1);
    Taxon[] sortedFiles = new Taxon[filesList.length];
    for (int i = 0; i < filesList.length; i++) {
        sortedFiles[i] = new Taxon(filesList[i], compFactors[i]);
    }
    Arrays.sort(sortedFiles);
    return null;
}
