protected void populateItem(final Item<DbMarketEntry> item) {
    DbBaseItemType itemType = (DbBaseItemType) item.getModelObject().getItemType();
    // Name
    item.add(new Label("name", itemType.getName()));
    // Function
    DbMarketFunction dbMarketFunction = item.getModelObject().getMarketFunction();
    if (dbMarketFunction != null) {
        item.add(new Label("function", dbMarketFunction.getName()));
    } else {
        item.add(new Label("function", ""));
    }
    // image
    item.add(new Image("image", new ByteArrayResource("", getImage(itemType))));
    // Description
    item.add(new Label("description", itemType.getDescription()));
    // Pro
    item.add(new Label("pro", itemType.getProDescription()));
    // contra
    item.add(new Label("contra", itemType.getContraDescription()));
    // XP
    item.add(new Label("price", Integer.toString(item.getModelObject().getPrice())));
    // Buy
    Button button = new Button("buy") {

        @Override
        public void onSubmit() {
            serverMarketService.buy(item.getModelObject());
        }
    };
    UserItemTypeAccess userItemTypeAccess = serverMarketService.getUserItemTypeAccess();
    boolean alreadyBought = userItemTypeAccess.contains(item.getModelObject());
    if (alreadyBought) {
        if (!userGuidanceService.isBaseItemTypeAllowedInLevel(itemType)) {
            button.setVisible(false);
            item.add(new Label("buyInfo", "Not allowed in your level"));
        } else {
            button.setVisible(false);
            item.add(new Label("buyInfo", "Already bought"));
        }
    } else {
        if (!userGuidanceService.isBaseItemTypeAllowedInLevel(itemType)) {
            button.setVisible(false);
            item.add(new Label("buyInfo", "Not allowed in your level"));
        } else if (item.getModelObject().getPrice() > userItemTypeAccess.getXp()) {
            button.setVisible(false);
            item.add(new Label("buyInfo", "Not enough XP"));
        } else {
            button.setVisible(true);
            Label label = new Label("buyInfo", "");
            label.setVisible(false);
            item.add(label);
        }
    }
    item.add(button);
    // alternating row color
    item.add(new AttributeModifier("class", true, new Model<String>(item.getIndex() % 2 == 0 ? "even" : "odd")));
}
