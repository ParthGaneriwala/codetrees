public void testMeetingAttendeeCRUD() throws SQLException {
    int projectId;
    int meetingId;
    // Insert a project
    Project project = new Project();
    project.setTitle("MeetingAttendeeSQLTest " + System.currentTimeMillis());
    project.setShortDescription("description");
    project.setRequestDate(new Timestamp(System.currentTimeMillis()));
    project.setEnteredBy(USER_ID);
    project.setModifiedBy(USER_ID);
    project.insert(db);
    projectId = project.getId();
    // Insert meeting
    Meeting meeting = new Meeting();
    meeting.setTitle("Meeting SQL Test");
    meeting.setDescription("Meeting SQL Test Description");
    meeting.setEnteredBy(USER_ID);
    meeting.setModifiedBy(USER_ID);
    meeting.setStartDate(new Timestamp(System.currentTimeMillis()));
    meeting.setEndDate(new Timestamp(System.currentTimeMillis() + 3600));
    meeting.setIsTentative(false);
    meeting.setByInvitationOnly(false);
    meeting.setProjectId(projectId);
    meeting.setOwner(USER_ID);
    meeting.insert(db);
    meetingId = meeting.getId();
    // Insert meeting attendee
    MeetingAttendee attendee = new MeetingAttendee();
    attendee.setMeetingId(meeting.getId());
    attendee.setUserId(USER_ID);
    attendee.setEnteredBy(meeting.getEnteredBy());
    attendee.setModifiedBy(meeting.getEnteredBy());
    attendee.setIsTentative(true);
    attendee.insert(db);
    // Find the previously set meeting attendee
    int attendeeId = attendee.getId();
    attendee = null;
    MeetingAttendeeList attendeeList = new MeetingAttendeeList();
    attendeeList.setMeetingId(meeting.getId());
    attendeeList.setUserId(USER_ID);
    attendeeList.buildList(db);
    assertTrue(attendeeList.size() > 0);
    for (MeetingAttendee thisAttendee : attendeeList) {
        if (thisAttendee.getId() == attendeeId) {
            attendee = thisAttendee;
            break;
        }
    }
    assertNotNull(attendee);
    // Delete the attendee
    attendee.delete(db);
    attendee = null;
    // Try to find the previously deleted attendee
    attendeeList = new MeetingAttendeeList();
    attendeeList.setMeetingId(meeting.getId());
    attendeeList.setUserId(USER_ID);
    attendeeList.buildList(db);
    for (MeetingAttendee thisAttendee : attendeeList) {
        if (thisAttendee.getId() == attendeeId) {
            assertNull("Meeting Attendee exists when it shouldn't", thisAttendee);
        }
    }
    // clean up the project and meeting created
    String basePath = null;
    meeting.delete(db);
    assertTrue("Project was not deleted", project.delete(db, basePath));
}
