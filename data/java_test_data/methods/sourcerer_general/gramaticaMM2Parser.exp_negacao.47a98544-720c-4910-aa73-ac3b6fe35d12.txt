// $ANTLR start "exp_negacao"
public final gramaticaMM2Parser.exp_negacao_return exp_negacao() throws RecognitionException {
    gramaticaMM2Parser.exp_negacao_return retval = new gramaticaMM2Parser.exp_negacao_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token NOT180 = null;
    Token MINUS182 = null;
    gramaticaMM2Parser.exp_atomica_return exp_atomica181 = null;
    gramaticaMM2Parser.exp_atomica_return exp_atomica183 = null;
    gramaticaMM2Parser.exp_atomica_return exp_atomica184 = null;
    CommonTree NOT180_tree = null;
    CommonTree MINUS182_tree = null;
    RewriteRuleTokenStream stream_NOT = new RewriteRuleTokenStream(adaptor, "token NOT");
    RewriteRuleTokenStream stream_MINUS = new RewriteRuleTokenStream(adaptor, "token MINUS");
    RewriteRuleSubtreeStream stream_exp_atomica = new RewriteRuleSubtreeStream(adaptor, "rule exp_atomica");
    try {
        // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:154:14: ( NOT exp_atomica -> ^( NOT_EXPRESSION exp_atomica ) | MINUS exp_atomica -> ^( MINUS_EXPRESSION exp_atomica ) | exp_atomica )
        int alt36 = 3;
        switch(input.LA(1)) {
            case NOT:
                {
                    alt36 = 1;
                }
                break;
            case MINUS:
                {
                    alt36 = 2;
                }
                break;
            case LEFT_PAREN:
            case DIGIT_NULL:
            case ASPA:
            case BOOL:
            case DIGIT:
            case LETTER:
                {
                    alt36 = 3;
                }
                break;
            default:
                NoViableAltException nvae = new NoViableAltException("", 36, 0, input);
                throw nvae;
        }
        switch(alt36) {
            case 1:
                // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:154:18: NOT exp_atomica
                {
                    NOT180 = (Token) match(input, NOT, FOLLOW_NOT_in_exp_negacao1700);
                    stream_NOT.add(NOT180);
                    pushFollow(FOLLOW_exp_atomica_in_exp_negacao1702);
                    exp_atomica181 = exp_atomica();
                    state._fsp--;
                    stream_exp_atomica.add(exp_atomica181.getTree());
                    // AST REWRITE
                    // elements: exp_atomica
                    // token labels:
                    // rule labels: retval
                    // token list labels:
                    // rule list labels:
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", retval != null ? retval.tree : null);
                    root_0 = (CommonTree) adaptor.nil();
                    // 154:34: -> ^( NOT_EXPRESSION exp_atomica )
                    {
                        // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:154:37: ^( NOT_EXPRESSION exp_atomica )
                        {
                            CommonTree root_1 = (CommonTree) adaptor.nil();
                            root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(NOT_EXPRESSION, "NOT_EXPRESSION"), root_1);
                            adaptor.addChild(root_1, stream_exp_atomica.nextTree());
                            adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;
                }
                break;
            case 2:
                // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:155:17: MINUS exp_atomica
                {
                    MINUS182 = (Token) match(input, MINUS, FOLLOW_MINUS_in_exp_negacao1728);
                    stream_MINUS.add(MINUS182);
                    pushFollow(FOLLOW_exp_atomica_in_exp_negacao1730);
                    exp_atomica183 = exp_atomica();
                    state._fsp--;
                    stream_exp_atomica.add(exp_atomica183.getTree());
                    // AST REWRITE
                    // elements: exp_atomica
                    // token labels:
                    // rule labels: retval
                    // token list labels:
                    // rule list labels:
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", retval != null ? retval.tree : null);
                    root_0 = (CommonTree) adaptor.nil();
                    // 155:35: -> ^( MINUS_EXPRESSION exp_atomica )
                    {
                        // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:155:38: ^( MINUS_EXPRESSION exp_atomica )
                        {
                            CommonTree root_1 = (CommonTree) adaptor.nil();
                            root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(MINUS_EXPRESSION, "MINUS_EXPRESSION"), root_1);
                            adaptor.addChild(root_1, stream_exp_atomica.nextTree());
                            adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;
                }
                break;
            case 3:
                // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:156:22: exp_atomica
                {
                    root_0 = (CommonTree) adaptor.nil();
                    pushFollow(FOLLOW_exp_atomica_in_exp_negacao1761);
                    exp_atomica184 = exp_atomica();
                    state._fsp--;
                    adaptor.addChild(root_0, exp_atomica184.getTree());
                }
                break;
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
