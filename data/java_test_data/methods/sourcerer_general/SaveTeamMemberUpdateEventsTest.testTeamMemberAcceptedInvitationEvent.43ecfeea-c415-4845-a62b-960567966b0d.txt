public void testTeamMemberAcceptedInvitationEvent() throws Exception {
    // Need a project
    Project project = this.createProject();
    // Need a user
    User memberUser = this.createUser();
    // Need a team member
    TeamMember prevMember = new TeamMember();
    prevMember.setProjectId(project.getId());
    prevMember.setUserId(memberUser.getId());
    prevMember.setUserLevel(PortalUtils.getUserLevel(TeamMember.MEMBER));
    prevMember.setEnteredBy(USER_ID);
    prevMember.setModifiedBy(USER_ID);
    prevMember.setStatus(TeamMember.STATUS_PENDING);
    prevMember.setCustomInvitationMessage("");
    prevMember.insert(db);
    assertTrue("Unable to add a new team member", prevMember.getId() != -1);
    // Update the team member
    TeamMember thisMember = new TeamMember(db, prevMember.getId());
    ProjectUtils.accept(db, thisMember.getProjectId(), thisMember.getUserId());
    thisMember = new TeamMember(db, thisMember.getId());
    Project memberProfile = ProjectUtils.loadProject(memberUser.getProfileProjectId());
    User user = UserUtils.loadUser(thisMember.getModifiedBy());
    Project userProfile = ProjectUtils.loadProject(user.getProfileProjectId());
    BusinessProcess thisProcess = (BusinessProcess) processList.get(PROCESS_NAME);
    assertTrue("Process not found...", thisProcess != null);
    context.setPreviousObject(prevMember);
    context.setThisObject(thisMember);
    context.setProcessName(PROCESS_NAME);
    context.setProcess(thisProcess);
    context.setAttribute("userId", new Integer(USER_ID));
    context.setAttribute("member", WikiLink.generateLink(memberProfile));
    context.setAttribute("user", WikiLink.generateLink(userProfile));
    context.setAttribute("profile", WikiLink.generateLink(project));
    workflowManager.execute(context);
    // Now query the database and test to see if a history item was added for the specified test user Id.
    ProjectHistoryList historyList = new ProjectHistoryList();
    historyList.setProjectId(project.getId());
    historyList.setEnteredBy(thisMember.getUserId());
    historyList.setLinkObject(ProjectHistoryList.INVITES_OBJECT);
    historyList.setEventType(ProjectHistoryList.ACCEPT_INVITATION_EVENT);
    historyList.setLinkItemId(thisMember.getId());
    historyList.buildList(db);
    assertTrue("History event (user was invited to become a team member) was not recorded!", historyList.size() == 1);
    ProjectHistory history = historyList.get(0);
    assertEquals("Recorded event mismatch", "[[|" + memberProfile.getId() + ":profile||" + memberProfile.getTitle() + "]] " + "@[[|" + project.getId() + ":profile||Project SQL Test]] " + "accepted an invitation from [[|" + userProfile.getId() + ":profile||" + userProfile.getTitle() + "]] to join", history.getDescription());
    // Delete the history item because the test is done (and any other needed objects)
    history.delete(db);
    // delete the team member record
    thisMember.delete(db);
    // delete the user record
    memberUser.getProfileProject().delete(db, null);
    memberUser.delete(db);
    // delete the project
    boolean deleteResult = project.delete(db, (String) null);
    assertTrue("Project wasn't deleted", deleteResult);
    // Try to find the previously deleted project
    ProjectList projectList = new ProjectList();
    projectList.setProjectId(project.getId());
    projectList.buildList(db);
    assertTrue("Project exists when it shouldn't -- id " + project.getId(), projectList.size() == 0);
}
