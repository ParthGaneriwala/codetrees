private void extractValue(StringBuffer buffer, String scopePx, String instname, JavaType type, String typeStr) {
    if (type.isPrimitive()) {
        // primitive type. Must pull a wrapped object out, and then
        // unwrap it.
        String castType;
        String extractMethod;
        if (type.typeIs(JavaType.JT_BOOLEAN)) {
            castType = "java.lang.Boolean";
            extractMethod = "booleanValue";
        } else if (type.typeIs(JavaType.JT_CHAR)) {
            castType = "java.lang.Character";
            extractMethod = "charValue";
        } else if (type.typeIs(JavaType.JT_BYTE)) {
            castType = "java.lang.Byte";
            extractMethod = "byteValue";
        } else if (type.typeIs(JavaType.JT_SHORT)) {
            castType = "java.lang.Short";
            extractMethod = "shortValue";
        } else if (type.typeIs(JavaType.JT_INT)) {
            castType = "java.lang.Integer";
            extractMethod = "intValue";
        } else if (type.typeIs(JavaType.JT_LONG)) {
            castType = "java.lang.Long";
            extractMethod = "longValue";
        } else if (type.typeIs(JavaType.JT_FLOAT)) {
            castType = "java.lang.Float";
            extractMethod = "floatValue";
        } else if (type.typeIs(JavaType.JT_DOUBLE)) {
            castType = "java.lang.Double";
            extractMethod = "doubleValue";
        } else {
            throw new UnsupportedOperationException("unhandled primitive type");
        }
        buffer.append("((" + castType + ")__bluej_runtime_scope.get(\"");
        buffer.append(scopePx + instname + "\"))." + extractMethod + "();");
    } else {
        // reference (object) type. Much easier.
        buffer.append("(" + typeStr);
        buffer.append(")__bluej_runtime_scope.get(\"");
        buffer.append(scopePx + instname + "\");" + Config.nl);
    }
}
