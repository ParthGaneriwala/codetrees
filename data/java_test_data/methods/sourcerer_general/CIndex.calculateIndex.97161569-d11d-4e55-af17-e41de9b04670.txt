public float calculateIndex(Dataset clusteredData) {
    EuclideanDistance edist = new EuclideanDistance();
    // number of pairs of elements in same cluster (a)
    int numOfSameClustParis = 0;
    // sum of distance of elements in same cluster
    float gamma = 0;
    int datasetSize = clusteredData.size();
    FeatureVector vectI;
    FeatureVector vectJ;
    float dist;
    // create an array in the size of the number of pairs of elements
    float[] distances = new float[((datasetSize - 1) * datasetSize) / 2];
    int pairnumber = 0;
    // for every pair of points
    for (int i = 0; i < datasetSize - 1; i++) {
        for (int j = i + 1; j < datasetSize; j++) {
            vectI = clusteredData.get(i);
            vectJ = clusteredData.get(j);
            dist = edist.calculate(vectI.getFeatures(), vectJ.getFeatures());
            distances[pairnumber] = dist;
            if (vectI.isSameCluster(vectJ)) {
                numOfSameClustParis++;
                // add distance to total sum of distance of elements in same cluster
                gamma += dist;
            }
            pairnumber++;
        }
    }
    // sort ascending
    Arrays.sort(distances);
    float min = 0, max = 0;
    for (int i = 0; i < numOfSameClustParis; i++) {
        // sum of the a smallest distances
        min += distances[i];
        // sum of the a largest dist
        max += distances[(distances.length - 1) - i];
    }
    float cIndex = (gamma - min) / (max - min);
    return cIndex;
}
