public static byte[] decode(byte[] data, int length) {
    byte[] bytes;
    byte b1;
    byte b2;
    byte b3;
    byte b4;
    data = discardNonBase64Bytes(data);
    if (data[length - 2] == '=') {
        bytes = new byte[(((length / 4) - 1) * 3) + 1];
    } else if (data[length - 1] == '=') {
        bytes = new byte[(((length / 4) - 1) * 3) + 2];
    } else {
        bytes = new byte[((length / 4) * 3)];
    }
    for (int i = 0, j = 0; i < (length - 4); i += 4, j += 3) {
        b1 = decodingTable[data[i]];
        b2 = decodingTable[data[i + 1]];
        b3 = decodingTable[data[i + 2]];
        b4 = decodingTable[data[i + 3]];
        bytes[j] = (byte) ((b1 << 2) | (b2 >> 4));
        bytes[j + 1] = (byte) ((b2 << 4) | (b3 >> 2));
        bytes[j + 2] = (byte) ((b3 << 6) | b4);
    }
    if (data[length - 2] == '=') {
        b1 = decodingTable[data[length - 4]];
        b2 = decodingTable[data[length - 3]];
        bytes[bytes.length - 1] = (byte) ((b1 << 2) | (b2 >> 4));
    } else if (data[length - 1] == '=') {
        b1 = decodingTable[data[length - 4]];
        b2 = decodingTable[data[length - 3]];
        b3 = decodingTable[data[length - 2]];
        bytes[bytes.length - 2] = (byte) ((b1 << 2) | (b2 >> 4));
        bytes[bytes.length - 1] = (byte) ((b2 << 4) | (b3 >> 2));
    } else {
        b1 = decodingTable[data[length - 4]];
        b2 = decodingTable[data[length - 3]];
        b3 = decodingTable[data[length - 2]];
        b4 = decodingTable[data[length - 1]];
        bytes[bytes.length - 3] = (byte) ((b1 << 2) | (b2 >> 4));
        bytes[bytes.length - 2] = (byte) ((b2 << 4) | (b3 >> 2));
        bytes[bytes.length - 1] = (byte) ((b3 << 6) | b4);
    }
    return bytes;
}
