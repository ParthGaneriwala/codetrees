// $ANTLR start "bool"
public final CompiladoresParser.bool_return bool() throws RecognitionException {
    CompiladoresParser.bool_return retval = new CompiladoresParser.bool_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token set149 = null;
    CommonTree set149_tree = null;
    try {
        dbg.enterRule(getGrammarFileName(), "bool");
        if (getRuleLevel() == 0) {
            dbg.commence();
        }
        incRuleLevel();
        dbg.location(192, 1);
        try {
            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:192:8: ( TRUE | FALSE )
            dbg.enterAlt(1);
            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:
            {
                root_0 = (CommonTree) adaptor.nil();
                dbg.location(192, 8);
                set149 = (Token) input.LT(1);
                if ((input.LA(1) >= TRUE && input.LA(1) <= FALSE)) {
                    input.consume();
                    adaptor.addChild(root_0, (CommonTree) adaptor.create(set149));
                    state.errorRecovery = false;
                } else {
                    MismatchedSetException mse = new MismatchedSetException(null, input);
                    dbg.recognitionException(mse);
                    throw mse;
                }
            }
            retval.stop = input.LT(-1);
            retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
        }
        dbg.location(192, 23);
    } finally {
        dbg.exitRule(getGrammarFileName(), "bool");
        decRuleLevel();
        if (getRuleLevel() == 0) {
            dbg.terminate();
        }
    }
    return retval;
}
