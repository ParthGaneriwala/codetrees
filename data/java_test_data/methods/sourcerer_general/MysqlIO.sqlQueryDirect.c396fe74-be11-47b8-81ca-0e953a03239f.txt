final ResultSetInternalMethods sqlQueryDirect(StatementImpl callingStatement, String query, String characterEncoding, Buffer queryPacket, int maxRows, int resultSetType, int resultSetConcurrency, boolean streamResults, String catalog, Field[] cachedMetadata) throws Exception {
    this.statementExecutionDepth++;
    try {
        if (this.statementInterceptors != null) {
            ResultSetInternalMethods interceptedResults = invokeStatementInterceptorsPre(query, callingStatement, false);
            if (interceptedResults != null) {
                return interceptedResults;
            }
        }
        long queryStartTime = 0;
        long queryEndTime = 0;
        if (query != null) {
            // We don't know exactly how many bytes we're going to get
            // from the query. Since we're dealing with Unicode, the
            // max is 2, so pad it (2 * query) + space for headers
            int packLength = HEADER_LENGTH + 1 + (query.length() * 2) + 2;
            String statementComment = this.connection.getStatementComment();
            byte[] commentAsBytes = null;
            if (statementComment != null) {
                commentAsBytes = StringUtils.getBytes(statementComment, null, characterEncoding, this.connection.getServerCharacterEncoding(), this.connection.parserKnowsUnicode(), getExceptionInterceptor());
                packLength += commentAsBytes.length;
                // for /*[space] [space]*/
                packLength += 6;
            }
            if (this.sendPacket == null) {
                this.sendPacket = new Buffer(packLength);
            } else {
                this.sendPacket.clear();
            }
            this.sendPacket.writeByte((byte) MysqlDefs.QUERY);
            if (commentAsBytes != null) {
                this.sendPacket.writeBytesNoNull(Constants.SLASH_STAR_SPACE_AS_BYTES);
                this.sendPacket.writeBytesNoNull(commentAsBytes);
                this.sendPacket.writeBytesNoNull(Constants.SPACE_STAR_SLASH_SPACE_AS_BYTES);
            }
            if (characterEncoding != null) {
                if (this.platformDbCharsetMatches) {
                    this.sendPacket.writeStringNoNull(query, characterEncoding, this.connection.getServerCharacterEncoding(), this.connection.parserKnowsUnicode(), this.connection);
                } else {
                    if (StringUtils.startsWithIgnoreCaseAndWs(query, "LOAD DATA")) {
                        // $NON-NLS-1$
                        this.sendPacket.writeBytesNoNull(query.getBytes());
                    } else {
                        this.sendPacket.writeStringNoNull(query, characterEncoding, this.connection.getServerCharacterEncoding(), this.connection.parserKnowsUnicode(), this.connection);
                    }
                }
            } else {
                this.sendPacket.writeStringNoNull(query);
            }
            queryPacket = this.sendPacket;
        }
        byte[] queryBuf = null;
        int oldPacketPosition = 0;
        if (needToGrabQueryFromPacket) {
            queryBuf = queryPacket.getByteBuffer();
            // save the packet position
            oldPacketPosition = queryPacket.getPosition();
            queryStartTime = getCurrentTimeNanosOrMillis();
        }
        if (this.autoGenerateTestcaseScript) {
            String testcaseQuery = null;
            if (query != null) {
                testcaseQuery = query;
            } else {
                testcaseQuery = new String(queryBuf, 5, (oldPacketPosition - 5));
            }
            StringBuffer debugBuf = new StringBuffer(testcaseQuery.length() + 32);
            this.connection.generateConnectionCommentBlock(debugBuf);
            debugBuf.append(testcaseQuery);
            debugBuf.append(';');
            this.connection.dumpTestcaseQuery(debugBuf.toString());
        }
        // Send query command and sql query string
        Buffer resultPacket = sendCommand(MysqlDefs.QUERY, null, queryPacket, false, null, 0);
        long fetchBeginTime = 0;
        long fetchEndTime = 0;
        String profileQueryToLog = null;
        boolean queryWasSlow = false;
        if (this.profileSql || this.logSlowQueries) {
            queryEndTime = System.currentTimeMillis();
            boolean shouldExtractQuery = false;
            if (this.profileSql) {
                shouldExtractQuery = true;
            } else if (this.logSlowQueries) {
                long queryTime = queryEndTime - queryStartTime;
                boolean logSlow = false;
                if (this.useAutoSlowLog) {
                    logSlow = queryTime > this.connection.getSlowQueryThresholdMillis();
                } else {
                    logSlow = this.connection.isAbonormallyLongQuery(queryTime);
                    this.connection.reportQueryTime(queryTime);
                }
                if (logSlow) {
                    shouldExtractQuery = true;
                    queryWasSlow = true;
                }
            }
            if (shouldExtractQuery) {
                // Extract the actual query from the network packet
                boolean truncated = false;
                int extractPosition = oldPacketPosition;
                if (oldPacketPosition > this.connection.getMaxQuerySizeToLog()) {
                    extractPosition = this.connection.getMaxQuerySizeToLog() + 5;
                    truncated = true;
                }
                profileQueryToLog = new String(queryBuf, 5, (extractPosition - 5));
                if (truncated) {
                    // $NON-NLS-1$
                    profileQueryToLog += Messages.getString("MysqlIO.25");
                }
            }
            fetchBeginTime = queryEndTime;
        }
        ResultSetInternalMethods rs = readAllResults(callingStatement, maxRows, resultSetType, resultSetConcurrency, streamResults, catalog, resultPacket, false, -1L, cachedMetadata);
        if (queryWasSlow && !this.serverQueryWasSlow) /* don't log slow queries twice */
        {
            StringBuffer mesgBuf = new StringBuffer(48 + profileQueryToLog.length());
            mesgBuf.append(Messages.getString("MysqlIO.SlowQuery", new Object[] { new Long(this.slowQueryThreshold), queryTimingUnits, new Long(queryEndTime - queryStartTime) }));
            mesgBuf.append(profileQueryToLog);
            ProfilerEventHandler eventSink = ProfilerEventHandlerFactory.getInstance(this.connection);
            eventSink.consumeEvent(new ProfilerEvent(ProfilerEvent.TYPE_SLOW_QUERY, // $NON-NLS-1$
            "", // $NON-NLS-1$
            catalog, // $NON-NLS-1$
            this.connection.getId(), (callingStatement != null) ? callingStatement.getId() : 999, ((ResultSetImpl) rs).resultId, System.currentTimeMillis(), (int) (queryEndTime - queryStartTime), queryTimingUnits, null, new Throwable(), mesgBuf.toString()));
            if (this.connection.getExplainSlowQueries()) {
                if (oldPacketPosition < MAX_QUERY_SIZE_TO_EXPLAIN) {
                    explainSlowQuery(queryPacket.getBytes(5, (oldPacketPosition - 5)), profileQueryToLog);
                } else {
                    this.connection.getLog().logWarn(Messages.getString(// $NON-NLS-1$
                    "MysqlIO.28") + MAX_QUERY_SIZE_TO_EXPLAIN + // $NON-NLS-1$
                    Messages.getString("MysqlIO.29"));
                }
            }
        }
        if (this.logSlowQueries) {
            ProfilerEventHandler eventSink = ProfilerEventHandlerFactory.getInstance(this.connection);
            if (this.queryBadIndexUsed && this.profileSql) {
                eventSink.consumeEvent(new ProfilerEvent(// $NON-NLS-1$
                ProfilerEvent.TYPE_SLOW_QUERY, // $NON-NLS-1$
                "", // $NON-NLS-1$
                catalog, this.connection.getId(), (callingStatement != null) ? callingStatement.getId() : 999, ((ResultSetImpl) rs).resultId, System.currentTimeMillis(), (queryEndTime - queryStartTime), this.queryTimingUnits, null, new Throwable(), // $NON-NLS-1$
                Messages.getString("MysqlIO.33") + profileQueryToLog));
            }
            if (this.queryNoIndexUsed && this.profileSql) {
                eventSink.consumeEvent(new ProfilerEvent(// $NON-NLS-1$
                ProfilerEvent.TYPE_SLOW_QUERY, // $NON-NLS-1$
                "", // $NON-NLS-1$
                catalog, this.connection.getId(), (callingStatement != null) ? callingStatement.getId() : 999, ((ResultSetImpl) rs).resultId, System.currentTimeMillis(), (queryEndTime - queryStartTime), this.queryTimingUnits, null, new Throwable(), // $NON-NLS-1$
                Messages.getString("MysqlIO.35") + profileQueryToLog));
            }
            if (this.serverQueryWasSlow && this.profileSql) {
                eventSink.consumeEvent(new ProfilerEvent(// $NON-NLS-1$
                ProfilerEvent.TYPE_SLOW_QUERY, // $NON-NLS-1$
                "", // $NON-NLS-1$
                catalog, this.connection.getId(), (callingStatement != null) ? callingStatement.getId() : 999, ((ResultSetImpl) rs).resultId, System.currentTimeMillis(), (queryEndTime - queryStartTime), this.queryTimingUnits, null, new Throwable(), // $NON-NLS-1$
                Messages.getString("MysqlIO.ServerSlowQuery") + profileQueryToLog));
            }
        }
        if (this.profileSql) {
            fetchEndTime = getCurrentTimeNanosOrMillis();
            ProfilerEventHandler eventSink = ProfilerEventHandlerFactory.getInstance(this.connection);
            eventSink.consumeEvent(new ProfilerEvent(ProfilerEvent.TYPE_QUERY, // $NON-NLS-1$
            "", // $NON-NLS-1$
            catalog, // $NON-NLS-1$
            this.connection.getId(), (callingStatement != null) ? callingStatement.getId() : 999, ((ResultSetImpl) rs).resultId, System.currentTimeMillis(), (queryEndTime - queryStartTime), this.queryTimingUnits, null, new Throwable(), profileQueryToLog));
            eventSink.consumeEvent(new ProfilerEvent(ProfilerEvent.TYPE_FETCH, // $NON-NLS-1$
            "", // $NON-NLS-1$
            catalog, // $NON-NLS-1$
            this.connection.getId(), (callingStatement != null) ? callingStatement.getId() : 999, ((ResultSetImpl) rs).resultId, System.currentTimeMillis(), (fetchEndTime - fetchBeginTime), this.queryTimingUnits, null, new Throwable(), null));
        }
        if (this.hadWarnings) {
            scanForAndThrowDataTruncation();
        }
        if (this.statementInterceptors != null) {
            ResultSetInternalMethods interceptedResults = invokeStatementInterceptorsPost(query, callingStatement, rs, false, null);
            if (interceptedResults != null) {
                rs = interceptedResults;
            }
        }
        return rs;
    } catch (SQLException sqlEx) {
        if (this.statementInterceptors != null) {
            invokeStatementInterceptorsPost(query, callingStatement, null, false, // we don't do anything with the result set in this case
            sqlEx);
        }
        if (callingStatement != null) {
            synchronized (callingStatement.cancelTimeoutMutex) {
                if (callingStatement.wasCancelled) {
                    SQLException cause = null;
                    if (callingStatement.wasCancelledByTimeout) {
                        cause = new MySQLTimeoutException();
                    } else {
                        cause = new MySQLStatementCancelledException();
                    }
                    callingStatement.resetCancelledState();
                    throw cause;
                }
            }
        }
        throw sqlEx;
    } finally {
        this.statementExecutionDepth--;
    }
}
