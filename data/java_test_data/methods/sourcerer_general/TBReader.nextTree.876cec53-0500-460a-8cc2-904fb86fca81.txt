public TBTree nextTree() {
    String str;
    do // find the first '('
    {
        str = nextToken();
        if (str == null) {
            f_tree.close();
            return null;
        }
    } while (!str.equals(LRB));
    int numBracket = 1;
    int terminalIndex = 0;
    int tokenIndex = 0;
    TBTree tree = new TBTree();
    // dummy-head
    TBNode head = new TBNode(null, TBEnLib.POS_TOP);
    // pointer to the current node
    TBNode curr = head;
    while (true) {
        if ((str = nextToken()) == null)
            errorMsg("more token needed");
        if (numBracket == 1 && str.equals(TBEnLib.POS_TOP)) {
            // add a child to 'curr'
            TBNode node = new TBNode(curr, str);
            curr.addChild(node);
            // move to child
            curr = node;
        } else if (str.equals(LRB)) {
            numBracket++;
            if (// str = pos-tag
            (str = nextToken()) == null)
                errorMsg("POS-tag is missing");
            // add a child to 'curr'
            TBNode node = new TBNode(curr, str);
            curr.addChild(node);
            // move to child
            curr = node;
        } else if (str.equals(RRB)) {
            numBracket--;
            // move to parent
            curr = curr.getParent();
            if (numBracket == 0)
                break;
        } else {
            // str = word
            curr.setForm(str);
            curr.terminalId = curr.headId = terminalIndex++;
            if (!curr.isEmptyCategory())
                curr.tokenId = tokenIndex++;
            /*	else if (curr.isForm("\\*T\\*|\\*ICH\\*|\\*RNR\\*") && curr.getParent().coIndex != -1)
				{
					curr.form += "-"+curr.getParent().coIndex;
					curr.getParent().coIndex = -1;
				}*/
            // add 'curr' as a leaf
            tree.addTerminalNode(curr);
        }
    }
    TBNode top = head.getChildren().get(0);
    if (top.isPos(TBEnLib.POS_TOP)) {
        top.setParent(null);
        tree.setRootNode(top);
    } else {
        tree.setRootNode(head);
    }
    return tree;
}
