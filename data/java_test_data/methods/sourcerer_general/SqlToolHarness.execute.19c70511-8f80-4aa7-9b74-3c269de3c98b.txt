public boolean execute(File file) throws IOException, InterruptedException {
    Metadata md = new Metadata(file);
    if (Verbose) {
        System.err.println("HARNESS METADATA:\n" + md);
    }
    execHarness.clear();
    String[] args = new String[md.jvmargs.length + 1 + md.toolargs.length + (md.inputAsFile ? 1 : 0)];
    int argIndex = 0;
    for (int i = 0; i < md.jvmargs.length; i++) {
        args[argIndex++] = md.jvmargs[i];
    }
    args[argIndex++] = org.hsqldb.util.SqlTool.class.getName();
    for (int i = 0; i < md.toolargs.length; i++) {
        args[argIndex++] = md.toolargs[i];
    }
    if (md.inputAsFile) {
        args[argIndex++] = file.toString();
    } else {
        execHarness.setInput(file);
    }
    if (Verbose) {
        System.err.println("ALL ARGS: " + ExecHarness.stringArrayToString(args));
    }
    execHarness.setArgs(args);
    execHarness.exec();
    if (Verbose) {
        System.err.println("STDOUT ******************************************");
        System.out.print(execHarness.getStdout());
        System.err.println("ERROUT ******************************************");
        System.err.print(execHarness.getErrout());
        System.err.println("*************************************************");
    }
    if (md.exitValue != null) {
        if (md.exitValue.intValue() != execHarness.getExitValue()) {
            if (Verbose) {
                System.err.println("Failed exit value test");
            }
            return false;
        }
    }
    String stdout = execHarness.getStdout();
    String errout = execHarness.getErrout();
    for (int i = 0; i < md.rejectErroutPatterns.length; i++) {
        if (md.rejectErroutPatterns[i].matcher(errout).find()) {
            if (Verbose) {
                System.err.println("Failed rejectErrOut regex '" + md.rejectErroutPatterns[i].pattern() + "'");
            }
            return false;
        }
    }
    for (int i = 0; i < md.rejectStdoutPatterns.length; i++) {
        if (md.rejectStdoutPatterns[i].matcher(stdout).find()) {
            if (Verbose) {
                System.err.println("Failed rejectStdout regex '" + md.rejectStdoutPatterns[i].pattern() + "'");
            }
            return false;
        }
    }
    for (int i = 0; i < md.requireErroutPatterns.length; i++) {
        if (!md.requireErroutPatterns[i].matcher(errout).find()) {
            if (Verbose) {
                System.err.println("Failed requireErrorOut regex '" + md.requireErroutPatterns[i].pattern() + "'");
            }
            return false;
        }
    }
    for (int i = 0; i < md.requireStdoutPatterns.length; i++) {
        if (!md.requireStdoutPatterns[i].matcher(stdout).find()) {
            if (Verbose) {
                System.err.println("Failed requireStdOut regex '" + md.requireStdoutPatterns[i].pattern() + "'");
            }
            return false;
        }
    }
    return true;
}
