public void readStatus() {
    // This sends a list command and stores the result
    StringReader r = null;
    BufferedReader br = null;
    try {
        String response = processCommand("L");
        r = new StringReader(response);
        br = new BufferedReader(r);
        String line = null;
        Pattern axisPattern = Pattern.compile("([XYZ]) Axis: Location: ([- 0-9]{0,6})  Delay: ([0-9]{0,3})  Steps per Inch: ([0-9]{0,3})  Holding Current: ([01])");
        Pattern drillPattern = Pattern.compile("Drill=([01])");
        Pattern vacPattern = Pattern.compile("Vacuum=([01])");
        Pattern limitPattern = Pattern.compile("Limit Switch: ([XYZ])-axis min=([01]) max=([01])");
        while ((line = br.readLine()) != null) {
            Matcher m = axisPattern.matcher(line);
            if (m.matches()) {
                // Its an AXIS line
                switch(m.group(1).charAt(0)) {
                    case 'X':
                        xLocation = Integer.parseInt(m.group(2).trim());
                        xDelay = Integer.parseInt(m.group(3));
                        xInch = Integer.parseInt(m.group(4));
                        xHold = m.group(5).equals("1");
                        break;
                    case 'Y':
                        yLocation = Integer.parseInt(m.group(2).trim());
                        yDelay = Integer.parseInt(m.group(3));
                        yInch = Integer.parseInt(m.group(4));
                        yHold = m.group(5).equals("1");
                        break;
                    case 'Z':
                        zLocation = Integer.parseInt(m.group(2).trim());
                        zDelay = Integer.parseInt(m.group(3));
                        zInch = Integer.parseInt(m.group(4));
                        zHold = m.group(5).equals("1");
                        break;
                }
            }
            m = drillPattern.matcher(line);
            if (m.matches()) {
                // Its a drill line
                drillRelay = m.group(1).equals("1");
            }
            m = vacPattern.matcher(line);
            if (m.matches()) {
                // Its a drill line
                vacuumRelay = m.group(1).equals("1");
            }
            m = limitPattern.matcher(line);
            if (m.matches()) {
                // Its a Limit line
                switch(m.group(1).charAt(0)) {
                    case 'X':
                        xLimitMin = m.group(2).equals("1");
                        xLimitMax = m.group(3).equals("1");
                        break;
                    case 'Y':
                        yLimitMin = m.group(2).equals("1");
                        yLimitMax = m.group(3).equals("1");
                        break;
                    case 'Z':
                        zLimitMin = m.group(2).equals("1");
                        zLimitMax = m.group(3).equals("1");
                        break;
                }
            }
        }
        MillLocation location = getLocation();
        firePropertyChange("location", location, location);
    } catch (Exception e) {
        log.error("in MillingMachine.readStatus", e);
    } finally {
        try {
            if (br != null) {
                br.close();
            }
        } catch (IOException e) {
            log.error("Error closing r", e);
        }
        try {
            if (r != null) {
                r.close();
            }
        } catch (Exception e) {
            log.error("Error closing r", e);
        }
    }
}
