public static void exportInventoryXls(ArrayList<InventoryClass> invcs, ArrayList<Inventory> ins, ArrayList<UserDefine> packings) throws IOException {
    FileOutputStream fos = null;
    try {
        HSSFWorkbook workBook = new HSSFWorkbook();
        // ��������������
        HSSFSheet inventorySheet = workBook.createSheet(INVENTORY_SHEET_NAME);
        // ��������������ͷ
        HSSFRow orderRow = inventorySheet.createRow(0);
        for (int i = 0; i < inventorySheetHeader.length; i++) {
            HSSFCellUtil.createCell(orderRow, i, inventorySheetHeader[i]);
        }
        // ���������
        for (int i = 0; i < ins.size(); i++) {
            Inventory inv = ins.get(i);
            HSSFRow inventoryDataRow = inventorySheet.createRow(i + 1);
            // no
            // HSSFCellUtil.createCell(inventoryDataRow, 0, String.valueOf(inv.getNo()));
            // �������
            // HSSFCellUtil.createCell(inventoryDataRow, 1, inv.getId());
            HSSFCellUtil.createCell(inventoryDataRow, 0, inv.getId());
            // �������
            // HSSFCellUtil.createCell(inventoryDataRow, 2, inv.getName());
            HSSFCellUtil.createCell(inventoryDataRow, 1, inv.getName());
            // ���
            // HSSFCellUtil.createCell(inventoryDataRow, 3, inv.getStandard());
            HSSFCellUtil.createCell(inventoryDataRow, 2, inv.getStandard());
            // �������װ
            HSSFCellUtil.createCell(inventoryDataRow, 3, String.valueOf(inv.getPacking()));
            CompGroup compGroup = inv.getCompGroup();
            // �����
            HSSFCellUtil.createCell(inventoryDataRow, 4, String.valueOf(compGroup.getiGroupType()));
            // ������λ�����
            HSSFCellUtil.createCell(inventoryDataRow, 5, compGroup.getcGroupCode());
            // ������λ����
            HSSFCellUtil.createCell(inventoryDataRow, 6, inv.getCompUnitCode());
            // ����Ĭ�ϼ�����λ����
            HSSFCellUtil.createCell(inventoryDataRow, 7, inv.getSAComUnitCode());
            // ���������
            HSSFCellUtil.createCell(inventoryDataRow, 8, inv.getcInvCCode());
        }
        // �������װ������
        HSSFSheet packingSheet = workBook.createSheet(PACKING_SHEET_NAME);
        // �������װ�ļ���ͷ
        HSSFRow packingRow = packingSheet.createRow(0);
        for (int i = 0; i < packingSheetHeader.length; i++) {
            HSSFCellUtil.createCell(packingRow, i, packingSheetHeader[i]);
        }
        // ������װ����
        for (int i = 0; i < packings.size(); i++) {
            UserDefine ud = packings.get(i);
            HSSFRow packingDataRow = packingSheet.createRow(i + 1);
            // ���װ�ľ�������
            HSSFCellUtil.createCell(packingDataRow, 0, ud.getcValue());
        }
        // ��ȡ����������
        ArrayList<CompGroup> groups = CompGroupDAO.getAllCompGroup();
        // ���������鹤����
        HSSFSheet compGroupSheet = workBook.createSheet(COMP_GROUP_SHEET_NAME);
        // ������������ļ�ͷ
        HSSFRow compGroupHeaderRow = compGroupSheet.createRow(0);
        for (int i = 0; i < compGroupSheetHeader.length; i++) {
            HSSFCellUtil.createCell(compGroupHeaderRow, i, compGroupSheetHeader[i]);
        }
        // ������������
        for (int i = 0; i < groups.size(); i++) {
            CompGroup compGroup = groups.get(i);
            HSSFRow compGroupDataRow = compGroupSheet.createRow(i + 1);
            // �������鵥Ԫ������
            // set cGroupCode
            HSSFCellUtil.createCell(compGroupDataRow, 0, compGroup.getcGroupCode());
            // set cGroupName
            HSSFCellUtil.createCell(compGroupDataRow, 1, compGroup.getcGroupName());
            // set iGroupType
            HSSFCellUtil.createCell(compGroupDataRow, 2, String.valueOf(compGroup.getiGroupType()));
        }
        // ��ȡ������λ����
        ArrayList<CompUnit> units = CompUnitDAO.getAllCompUnit();
        // ����������λ������
        HSSFSheet compUnitSheet = workBook.createSheet(COMP_UNIT_SHEET_NAME);
        // ���ɼ�����λ��ͷ
        HSSFRow compUnitHeaderRow = compUnitSheet.createRow(0);
        for (int i = 0; i < compUnitSheetHeader.length; i++) {
            HSSFCellUtil.createCell(compUnitHeaderRow, i, compUnitSheetHeader[i]);
        }
        // ��������λ��Ԫ��
        for (int i = 0; i < units.size(); i++) {
            CompUnit unit = units.get(i);
            HSSFRow compUnitDataRow = compUnitSheet.createRow(i + 1);
            // set cComunitCode
            HSSFCellUtil.createCell(compUnitDataRow, 0, unit.getcComunitCode());
            // set cComUnitName
            HSSFCellUtil.createCell(compUnitDataRow, 1, unit.getcComUnitName());
            // set iChangeRate
            HSSFCellUtil.createCell(compUnitDataRow, 2, unit.getiChangRate().toString());
            // set cGroupCode
            HSSFCellUtil.createCell(compUnitDataRow, 3, unit.getCompGroup().getcGroupCode());
        }
        // ��������������
        HSSFSheet inventoryClsSheet = workBook.createSheet(INVENTORY_CLASS_SHEET_NAME);
        // ���ɴ������ͷ
        HSSFRow inventoryHeaderRow = inventoryClsSheet.createRow(0);
        // ����ͷ����
        for (int i = 0; i < inventoryClsSheetHeader.length; i++) {
            HSSFCellUtil.createCell(inventoryHeaderRow, i, inventoryClsSheetHeader[i]);
        }
        // ��������Ԫ������
        for (int i = 0; i < invcs.size(); i++) {
            InventoryClass invc = invcs.get(i);
            HSSFRow inventoryClsRow = inventoryClsSheet.createRow(i + 1);
            // set InvCCode
            HSSFCellUtil.createCell(inventoryClsRow, 0, invc.getcInvCCode());
            // set InvCName
            HSSFCellUtil.createCell(inventoryClsRow, 1, invc.getcInvName());
            // set InvCGrade
            HSSFCellUtil.createCell(inventoryClsRow, 2, String.valueOf(invc.getiInvCGrade()));
            // set InvCEnd
            HSSFCellUtil.createCell(inventoryClsRow, 3, String.valueOf(invc.getbInvCEnd()));
        }
        fos = new FileOutputStream(Config.INVENTORY_DATA_FILE);
        workBook.write(fos);
    } catch (IOException ex) {
        Logger.getLogger(ExcelUtil.class.getName()).log(Level.SEVERE, null, ex);
        throw ex;
    } finally {
        try {
            if (fos != null) {
                fos.close();
            }
            fos = null;
        } catch (IOException ex) {
            Logger.getLogger(ExcelUtil.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
