// $ANTLR start "termo"
public final gramaticaMM2Parser.termo_return termo() throws RecognitionException {
    gramaticaMM2Parser.termo_return retval = new gramaticaMM2Parser.termo_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token MULT176 = null;
    Token DIV177 = null;
    Token MOD178 = null;
    gramaticaMM2Parser.exp_negacao_return exp_negacao175 = null;
    gramaticaMM2Parser.exp_negacao_return exp_negacao179 = null;
    CommonTree MULT176_tree = null;
    CommonTree DIV177_tree = null;
    CommonTree MOD178_tree = null;
    RewriteRuleTokenStream stream_MULT = new RewriteRuleTokenStream(adaptor, "token MULT");
    RewriteRuleTokenStream stream_DIV = new RewriteRuleTokenStream(adaptor, "token DIV");
    RewriteRuleTokenStream stream_MOD = new RewriteRuleTokenStream(adaptor, "token MOD");
    RewriteRuleSubtreeStream stream_exp_negacao = new RewriteRuleSubtreeStream(adaptor, "rule exp_negacao");
    try {
        // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:151:8: ( exp_negacao ( ( MULT | DIV | MOD ) exp_negacao )* -> ^( TERM_EXPRESSION ( exp_negacao )+ ) )
        // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:151:14: exp_negacao ( ( MULT | DIV | MOD ) exp_negacao )*
        {
            pushFollow(FOLLOW_exp_negacao_in_termo1659);
            exp_negacao175 = exp_negacao();
            state._fsp--;
            stream_exp_negacao.add(exp_negacao175.getTree());
            // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:151:26: ( ( MULT | DIV | MOD ) exp_negacao )*
            loop35: do {
                int alt35 = 2;
                int LA35_0 = input.LA(1);
                if (((LA35_0 >= MULT && LA35_0 <= MOD))) {
                    alt35 = 1;
                }
                switch(alt35) {
                    case 1:
                        // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:151:27: ( MULT | DIV | MOD ) exp_negacao
                        {
                            // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:151:27: ( MULT | DIV | MOD )
                            int alt34 = 3;
                            switch(input.LA(1)) {
                                case MULT:
                                    {
                                        alt34 = 1;
                                    }
                                    break;
                                case DIV:
                                    {
                                        alt34 = 2;
                                    }
                                    break;
                                case MOD:
                                    {
                                        alt34 = 3;
                                    }
                                    break;
                                default:
                                    NoViableAltException nvae = new NoViableAltException("", 34, 0, input);
                                    throw nvae;
                            }
                            switch(alt34) {
                                case 1:
                                    // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:151:28: MULT
                                    {
                                        MULT176 = (Token) match(input, MULT, FOLLOW_MULT_in_termo1663);
                                        stream_MULT.add(MULT176);
                                    }
                                    break;
                                case 2:
                                    // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:151:33: DIV
                                    {
                                        DIV177 = (Token) match(input, DIV, FOLLOW_DIV_in_termo1665);
                                        stream_DIV.add(DIV177);
                                    }
                                    break;
                                case 3:
                                    // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:151:37: MOD
                                    {
                                        MOD178 = (Token) match(input, MOD, FOLLOW_MOD_in_termo1667);
                                        stream_MOD.add(MOD178);
                                    }
                                    break;
                            }
                            pushFollow(FOLLOW_exp_negacao_in_termo1670);
                            exp_negacao179 = exp_negacao();
                            state._fsp--;
                            stream_exp_negacao.add(exp_negacao179.getTree());
                        }
                        break;
                    default:
                        break loop35;
                }
            } while (true);
            // AST REWRITE
            // elements: exp_negacao
            // token labels:
            // rule labels: retval
            // token list labels:
            // rule list labels:
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", retval != null ? retval.tree : null);
            root_0 = (CommonTree) adaptor.nil();
            // 151:56: -> ^( TERM_EXPRESSION ( exp_negacao )+ )
            {
                // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:151:59: ^( TERM_EXPRESSION ( exp_negacao )+ )
                {
                    CommonTree root_1 = (CommonTree) adaptor.nil();
                    root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(TERM_EXPRESSION, "TERM_EXPRESSION"), root_1);
                    if (!(stream_exp_negacao.hasNext())) {
                        throw new RewriteEarlyExitException();
                    }
                    while (stream_exp_negacao.hasNext()) {
                        adaptor.addChild(root_1, stream_exp_negacao.nextTree());
                    }
                    stream_exp_negacao.reset();
                    adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
