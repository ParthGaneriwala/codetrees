public synchronized int addBytes(long pos, ByteBuffer inBytes) throws NoGapException {
    int chunkNum = (int) (pos / donkeyChunkSize) + 1;
    int newBytes = 0;
    if ((pos - (donkeyChunkSize * (chunkNum - 1)) + inBytes.capacity()) > (donkeyChunkSize)) {
        long tmp = pos - (donkeyChunkSize * (chunkNum - 1)) + inBytes.capacity() - (donkeyChunkSize);
        inBytes.limit((int) (inBytes.capacity() - tmp));
        ByteBuffer firstPart = ByteBuffer.allocate((int) (inBytes.capacity() - tmp));
        firstPart.put(inBytes);
        firstPart.rewind();
        inBytes.limit(inBytes.capacity());
        ByteBuffer secondPart = ByteBuffer.allocate((int) tmp);
        secondPart.put(inBytes);
        secondPart.rewind();
        inBytes = null;
        // System.out.println("Overlap in partfile. " + pos + "-" + (pos+inBytes.capacity()) + " " + pos + "-" + firstPart + " " + pos + firstPart.capacity() + "-" + secondPart);
        newBytes += addBytes(pos, firstPart);
        newBytes += addBytes(pos + firstPart.capacity(), secondPart);
        firstPart = null;
        secondPart = null;
    } else {
        if (chunkList[chunkNum - 1] == null) {
            createChunk(chunkNum);
        }
        PartFileChunk aktChunk = chunkList[chunkNum - 1];
        if (aktChunk.isDone()) {
        } else {
            pos = pos - ((donkeyChunkSize) * (chunkNum - 1));
            try {
                newBytes += aktChunk.addBytes(pos, inBytes);
            } catch (Exception e) {
            }
        }
    }
    return newBytes;
}
