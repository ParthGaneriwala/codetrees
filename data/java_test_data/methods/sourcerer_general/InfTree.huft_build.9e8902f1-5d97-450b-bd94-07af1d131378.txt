private // code lengths in bits (all assumed <= BMAX)
int huft_build(// code lengths in bits (all assumed <= BMAX)
int[] b, int bindex, // number of codes (assumed <= 288)
int n, // number of simple-valued codes (0..s-1)
int s, // list of base values for non-simple codes
int[] d, // list of extra bits for non-simple codes
int[] e, // result: starting table
int[] t, // maximum lookup bits, returns actual
int[] m, // space for trees
int[] hp, // hufts used in space
int[] hn, // working area: values in order of bit length
int[] v) {
    // Given a list of code lengths and a maximum table size, make a set of
    // tables to decode that set of codes.  Return Z_OK on success, Z_BUF_ERROR
    // if the given code set is incomplete (the tables are still built in this
    // case), Z_DATA_ERROR if the input is invalid (an over-subscribed set of
    // lengths), or Z_MEM_ERROR if not enough memory.
    // counter for codes of length k
    int a;
    // i repeats in table every f entries
    int f;
    // maximum code length
    int g;
    // table level
    int h;
    // counter, current code
    int i;
    // counter
    int j;
    // number of bits in current code
    int k;
    // bits per table (returned in m)
    int l;
    // (1 << w) - 1, to avoid cc -O bug on HP
    int mask;
    // pointer into c[], b[], or v[]
    int p;
    // points to current table
    int q;
    // bits before this table == (l * h)
    int w;
    // pointer into x
    int xp;
    // number of dummy codes added
    int y;
    // number of entries in current table
    int z;
    // Generate counts for each bit length
    p = 0;
    i = n;
    do {
        // assume all entries <= BMAX
        c[b[bindex + p]]++;
        // assume all entries <= BMAX
        p++;
        // assume all entries <= BMAX
        i--;
    } while (i != 0);
    if (c[0] == n) {
        // null input--all zero length codes
        t[0] = -1;
        m[0] = 0;
        return Z_OK;
    }
    // Find minimum and maximum length, bound *m by those
    l = m[0];
    for (j = 1; j <= BMAX; j++) if (c[j] != 0)
        break;
    // minimum code length
    k = j;
    if (l < j) {
        l = j;
    }
    for (i = BMAX; i != 0; i--) {
        if (c[i] != 0)
            break;
    }
    // maximum code length
    g = i;
    if (l > i) {
        l = i;
    }
    m[0] = l;
    // Adjust last length count to fill out codes, if needed
    for (y = 1 << j; j < i; j++, y <<= 1) {
        if ((y -= c[j]) < 0) {
            return Z_DATA_ERROR;
        }
    }
    if ((y -= c[i]) < 0) {
        return Z_DATA_ERROR;
    }
    c[i] += y;
    // Generate starting offsets into the value table for each length
    x[1] = j = 0;
    p = 1;
    xp = 2;
    while (--i != 0) {
        // note that i == g from above
        x[xp] = (j += c[p]);
        xp++;
        p++;
    }
    // Make a table of values in order of bit lengths
    i = 0;
    p = 0;
    do {
        if ((j = b[bindex + p]) != 0) {
            v[x[j]++] = i;
        }
        p++;
    } while (++i < n);
    // set n to length of v
    n = x[g];
    // Generate the Huffman codes and for each, make the table entries
    // first Huffman code is zero
    x[0] = i = 0;
    // grab values in bit order
    p = 0;
    // no tables yet--level -1
    h = -1;
    // bits decoded == (l * h)
    w = -l;
    // just to keep compilers happy
    u[0] = 0;
    // ditto
    q = 0;
    // ditto
    z = 0;
    // go through the bit lengths (k already is bits in shortest code)
    for (; k <= g; k++) {
        a = c[k];
        while (a-- != 0) {
            // make tables up to required level
            while (k > w + l) {
                h++;
                // previous table always l bits
                w += l;
                // compute minimum size table less than or equal to l bits
                z = g - w;
                // table size upper limit
                z = (z > l) ? l : z;
                if ((f = 1 << (j = k - w)) > a + 1) {
                    // try a k-w bit table
                    // too few codes for k-w bit table
                    // deduct codes from patterns left
                    f -= a + 1;
                    xp = k;
                    if (j < z) {
                        while (++j < z) {
                            // try smaller tables up to z bits
                            if ((f <<= 1) <= c[++xp])
                                // enough codes to use up j bits
                                break;
                            // else deduct codes from patterns
                            f -= c[xp];
                        }
                    }
                }
                // table entries for j-bit table
                z = 1 << j;
                // allocate new table
                if (hn[0] + z > MANY) {
                    // overflow of MANY
                    return Z_DATA_ERROR;
                }
                // DEBUG
                u[h] = q = /*hp+*/
                hn[0];
                hn[0] += z;
                // connect to last table, if there is one
                if (h != 0) {
                    // save pattern for backing up
                    x[h] = i;
                    // bits in this table
                    r[0] = (byte) j;
                    // bits to dump before this table
                    r[1] = (byte) l;
                    j = i >>> (w - l);
                    // offset to this table
                    r[2] = (int) (q - u[h - 1] - j);
                    // connect to last table
                    System.arraycopy(r, 0, hp, (u[h - 1] + j) * 3, 3);
                } else {
                    // first table is returned result
                    t[0] = q;
                }
            }
            // set up table entry in r
            r[1] = (byte) (k - w);
            if (p >= n) {
                // out of values--invalid code
                r[0] = 128 + 64;
            } else if (v[p] < s) {
                // 256 is end-of-block
                r[0] = (byte) (v[p] < 256 ? 0 : 32 + 64);
                // simple code is just the value
                r[2] = v[p++];
            } else {
                // non-simple--look up in lists
                r[0] = (byte) (e[v[p] - s] + 16 + 64);
                r[2] = d[v[p++] - s];
            }
            // fill code-like entries with r
            f = 1 << (k - w);
            for (j = i >>> w; j < z; j += f) {
                System.arraycopy(r, 0, hp, (q + j) * 3, 3);
            }
            // backwards increment the k-bit code i
            for (j = 1 << (k - 1); (i & j) != 0; j >>>= 1) {
                i ^= j;
            }
            i ^= j;
            // backup over finished tables
            // needed on HP, cc -O bug
            mask = (1 << w) - 1;
            while ((i & mask) != x[h]) {
                // don't need to update q
                h--;
                w -= l;
                mask = (1 << w) - 1;
            }
        }
    }
    // Return Z_BUF_ERROR if we were given an incomplete table
    return y != 0 && g != 1 ? Z_BUF_ERROR : Z_OK;
}
