// $ANTLR start "expression5"
public final Compila_doresParser.expression5_return expression5() throws RecognitionException {
    Compila_doresParser.expression5_return retval = new Compila_doresParser.expression5_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token set148 = null;
    Compila_doresParser.expression6_return expression6147 = null;
    Compila_doresParser.expression6_return expression6149 = null;
    CommonTree set148_tree = null;
    try {
        // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:234:2: ( expression6 ( ( MULT | DIV | MOD ) expression6 )* )
        // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:234:4: expression6 ( ( MULT | DIV | MOD ) expression6 )*
        {
            root_0 = (CommonTree) adaptor.nil();
            pushFollow(FOLLOW_expression6_in_expression51579);
            expression6147 = expression6();
            state._fsp--;
            adaptor.addChild(root_0, expression6147.getTree());
            // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:234:16: ( ( MULT | DIV | MOD ) expression6 )*
            loop37: do {
                int alt37 = 2;
                int LA37_0 = input.LA(1);
                if (((LA37_0 >= MULT && LA37_0 <= MOD))) {
                    alt37 = 1;
                }
                switch(alt37) {
                    case 1:
                        // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:234:17: ( MULT | DIV | MOD ) expression6
                        {
                            set148 = (Token) input.LT(1);
                            set148 = (Token) input.LT(1);
                            if ((input.LA(1) >= MULT && input.LA(1) <= MOD)) {
                                input.consume();
                                root_0 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(set148), root_0);
                                state.errorRecovery = false;
                            } else {
                                MismatchedSetException mse = new MismatchedSetException(null, input);
                                throw mse;
                            }
                            pushFollow(FOLLOW_expression6_in_expression51595);
                            expression6149 = expression6();
                            state._fsp--;
                            adaptor.addChild(root_0, expression6149.getTree());
                        }
                        break;
                    default:
                        break loop37;
                }
            } while (true);
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
