private static List<InterceptorMapping> constructParameterizedInterceptorReferences(PackageConfig packageConfig, InterceptorStackConfig stackConfig, Map refParams, ObjectFactory objectFactory) {
    List<InterceptorMapping> result;
    Map<String, Map<Object, String>> params = new HashMap<String, Map<Object, String>>();
    for (Iterator iter = refParams.keySet().iterator(); iter.hasNext(); ) {
        String key = (String) iter.next();
        String value = (String) refParams.get(key);
        try {
            String name = key.substring(0, key.indexOf('.'));
            key = key.substring(key.indexOf('.') + 1);
            Map<Object, String> map;
            if (params.containsKey(name)) {
                map = params.get(name);
            } else {
                map = new HashMap<Object, String>();
            }
            map.put(key, value);
            params.put(name, map);
        } catch (Exception e) {
            LOG.warn("No interceptor found for name = " + key);
        }
    }
    result = new ArrayList<InterceptorMapping>(stackConfig.getInterceptors());
    for (String key : params.keySet()) {
        Map<Object, String> map = params.get(key);
        InterceptorConfig cfg = (InterceptorConfig) packageConfig.getAllInterceptorConfigs().get(key);
        Interceptor interceptor = objectFactory.buildInterceptor(cfg, map);
        InterceptorMapping mapping = new InterceptorMapping(key, interceptor);
        if (result != null && result.contains(mapping)) {
            int index = result.indexOf(mapping);
            result.set(index, mapping);
        } else {
            result.add(mapping);
        }
    }
    return result;
}
