static SQLWarning convertShowWarningsToSQLWarnings(Connection connection, int warningCountIfKnown, boolean forTruncationOnly) throws SQLException {
    java.sql.Statement stmt = null;
    java.sql.ResultSet warnRs = null;
    SQLWarning currentWarning = null;
    try {
        if (warningCountIfKnown < 100) {
            stmt = connection.createStatement();
            if (stmt.getMaxRows() != 0) {
                stmt.setMaxRows(0);
            }
        } else {
            // stream large warning counts
            stmt = connection.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY, java.sql.ResultSet.CONCUR_READ_ONLY);
            stmt.setFetchSize(Integer.MIN_VALUE);
        }
        /*
			 * +---------+------+---------------------------------------------+ |
			 * Level | Code | Message |
			 * +---------+------+---------------------------------------------+ |
			 * Warning | 1265 | Data truncated for column 'field1' at row 1 |
			 * +---------+------+---------------------------------------------+
			 */
        // $NON-NLS-1$
        warnRs = stmt.executeQuery("SHOW WARNINGS");
        while (warnRs.next()) {
            // $NON-NLS-1$
            int code = warnRs.getInt("Code");
            if (forTruncationOnly) {
                if (code == 1265 || code == 1264) {
                    DataTruncation newTruncation = new MysqlDataTruncation(warnRs.getString("Message"), 0, false, false, 0, 0, // $NON-NLS-1$
                    code);
                    if (currentWarning == null) {
                        currentWarning = newTruncation;
                    } else {
                        currentWarning.setNextWarning(newTruncation);
                    }
                }
            } else {
                // $NON-NLS-1$
                String level = warnRs.getString("Level");
                // $NON-NLS-1$
                String message = warnRs.getString("Message");
                SQLWarning newWarning = new SQLWarning(message, SQLError.mysqlToSqlState(code, connection.getUseSqlStateCodes()), code);
                if (currentWarning == null) {
                    currentWarning = newWarning;
                } else {
                    currentWarning.setNextWarning(newWarning);
                }
            }
        }
        if (forTruncationOnly && (currentWarning != null)) {
            throw currentWarning;
        }
        return currentWarning;
    } finally {
        SQLException reThrow = null;
        if (warnRs != null) {
            try {
                warnRs.close();
            } catch (SQLException sqlEx) {
                reThrow = sqlEx;
            }
        }
        if (stmt != null) {
            try {
                stmt.close();
            } catch (SQLException sqlEx) {
                // ideally, we'd use chained exceptions here,
                // but we still support JDK-1.2.x with this driver
                // which doesn't have them....
                reThrow = sqlEx;
            }
        }
        if (reThrow != null) {
            throw reThrow;
        }
    }
}
