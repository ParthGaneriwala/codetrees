void fastLineMethod(Point endPoint, Point startPoint, Graphics g) {
    /*
REM Bresenham algorithm for a line in an arbitrary octant in pseudo Basic
dx = xend-xstart
dy = yend-ystart

REM Initialisations
adx = ABS(dx): ady = ABS(dy) ' Absolute values of distances
sdx = SGN(dx): sdy = SGN(dy) ' Signum of distances

IF adx > ady THEN
  ' x is fast direction
  pdx = sdx: pdy = 0   ' pd. is parallel step
  ddx = sdx: ddy = sdy ' dd. is diagonal step
  ef  = ady: es  = adx ' error steps fast, slow
             ELSE
  ' y is fast direction
  pdx = 0  : pdy = sdy ' pd. is parallel step
  ddx = sdx: ddy = sdy ' dd. is diagonal step
  ef  = adx: es  = ady ' error steps fast, slow
  END IF

x = xstart
y = ystart
SETPIXEL x,y
error = es/2 

REM Pixel loop: always a step in fast direction, every now and then also one in slow direction
FOR i=1 TO es          ' es also is the count of pixels to be drawn
   REM update error term
   error = error - ef
   IF error < 0 THEN
      error = error + es ' make error term positive (>=0) again
      REM step in both slow and fast direction
      x = x + ddx: y = y + ddy ' Diagonal step
                ELSE
      REM step in fast direction
      x = x + pdx: y = y + pdy ' Parallel step
      END IF
   SETPIXEL x,y
   NEXT 
 */
    // startPoint is always the center
    g.setColor(Color.RED);
    int dx = (endPoint.x - startPoint.x);
    int dy = (endPoint.y - startPoint.y);
    int xStepsToGo = Math.abs(dx);
    int yStepsToGo = Math.abs(dy);
    int xDirection = (dx > 0 ? 1 : -1);
    int yDirection = (dy > 0 ? 1 : -1);
    int pdx, pdy, ddx, ddy, ef, es;
    ddx = xDirection;
    // dd is a diagonal step
    ddy = yDirection;
    if (xStepsToGo > yStepsToGo) {
        // x is the fast direction
        pdx = xDirection;
        // pd is parallel step
        pdy = 0;
        // fast error step is y, slow is x
        ef = yStepsToGo;
        // fast error step is y, slow is x
        es = xStepsToGo;
    } else {
        // y is the fast direction
        pdx = 0;
        // pd is parallel step
        pdy = yDirection;
        // fast error step is x, slow is y
        ef = xStepsToGo;
        // fast error step is x, slow is y
        es = yStepsToGo;
    }
    int xOffset = 0;
    int yOffset = 0;
    g.drawLine(startPoint.x, startPoint.y, startPoint.x, startPoint.y);
    int error = (byte) (es << 1);
    for (int i = 1; i < es; i++) {
        // step in the fast direction
        // decrease the error term
        error -= ef;
        if (error < 0) {
            // adjust for a slow step
            error += es;
            // diagonal step
            // step x
            xOffset += ddx;
            // step y
            yOffset += ddy;
        } else {
            // step fast (parallel)
            xOffset += pdx;
            yOffset += pdy;
        }
        if (error > 255) {
            g.setColor(Color.BLUE);
        }
        g.drawLine(startPoint.x + xOffset, startPoint.y + yOffset, startPoint.x + xOffset, startPoint.y + yOffset);
    }
}
