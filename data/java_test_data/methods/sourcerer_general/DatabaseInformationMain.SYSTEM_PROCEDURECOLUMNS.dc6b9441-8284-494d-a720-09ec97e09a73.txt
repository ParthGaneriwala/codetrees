Table SYSTEM_PROCEDURECOLUMNS(Session session) {
    Table t = sysTables[SYSTEM_PROCEDURECOLUMNS];
    if (t == null) {
        t = createBlankTable(sysTableHsqlNames[SYSTEM_PROCEDURECOLUMNS]);
        // ----------------------------------------------------------------
        // required
        // ----------------------------------------------------------------
        // 0
        addColumn(t, "PROCEDURE_CAT", SQL_IDENTIFIER);
        // 1
        addColumn(t, "PROCEDURE_SCHEM", SQL_IDENTIFIER);
        // not null
        addColumn(t, "PROCEDURE_NAME", SQL_IDENTIFIER);
        // not null
        addColumn(t, "COLUMN_NAME", SQL_IDENTIFIER);
        // not null
        addColumn(t, "COLUMN_TYPE", Type.SQL_SMALLINT);
        // not null
        addColumn(t, "DATA_TYPE", Type.SQL_SMALLINT);
        // not null
        addColumn(t, "TYPE_NAME", SQL_IDENTIFIER);
        // 7
        addColumn(t, "PRECISION", Type.SQL_INTEGER);
        // 8
        addColumn(t, "LENGTH", Type.SQL_INTEGER);
        // 9
        addColumn(t, "SCALE", Type.SQL_SMALLINT);
        // 10
        addColumn(t, "RADIX", Type.SQL_SMALLINT);
        // not null
        addColumn(t, "NULLABLE", Type.SQL_SMALLINT);
        // 12
        addColumn(t, "REMARKS", CHARACTER_DATA);
        // ----------------------------------------------------------------
        // JDBC 4.0
        // ----------------------------------------------------------------
        // 13
        addColumn(t, "COLUMN_DEF", CHARACTER_DATA);
        // 14
        addColumn(t, "SQL_DATA_TYPE", Type.SQL_INTEGER);
        // 15
        addColumn(t, "SQL_DATETIME_SUB", Type.SQL_INTEGER);
        // 16
        addColumn(t, "CHAR_OCTET_LENGTH", Type.SQL_INTEGER);
        // 17
        addColumn(t, "ORDINAL_POSITION", Type.SQL_INTEGER);
        // 18
        addColumn(t, "IS_NULLABLE", CHARACTER_DATA);
        // 19
        addColumn(t, "SPECIFIC_NAME", SQL_IDENTIFIER);
        // order: PROCEDURE_SCHEM, PROCEDURE_NAME, SPECIFIC_NAME, ORDINAL_POSITION
        // 
        HsqlName name = HsqlNameManager.newInfoSchemaObjectName(sysTableHsqlNames[SYSTEM_PROCEDURECOLUMNS].name, false, SchemaObject.INDEX);
        t.createPrimaryKeyConstraint(name, new int[] { 0, 1, 2, 19, 17 }, false);
        return t;
    }
    PersistentStore store = session.sessionData.getRowStore(t);
    // column number mappings
    final int specific_cat = 0;
    final int specific_schem = 1;
    final int procedure_name = 2;
    final int parameter_name = 3;
    final int parameter_mode = 4;
    final int data_type_sql_id = 5;
    final int data_type = 6;
    final int numeric_precision = 7;
    final int byte_length = 8;
    final int numeric_scale = 9;
    final int numeric_precision_radix = 10;
    final int nullable = 11;
    final int remark = 12;
    final int default_val = 13;
    final int sql_data_type = 14;
    final int sql_datetime_sub = 15;
    final int character_octet_length = 16;
    final int ordinal_position = 17;
    final int is_nullable = 18;
    final int specific_name = 19;
    // intermediate holders
    int columnCount;
    Iterator routines;
    RoutineSchema routineSchema;
    Routine routine;
    Object[] row;
    Type type;
    // Initialization
    boolean translateDTI = database.getProperties().isPropertyTrue(HsqlDatabaseProperties.jdbc_translate_dti_types);
    routines = database.schemaManager.databaseObjectIterator(SchemaObject.ROUTINE);
    while (routines.hasNext()) {
        routineSchema = (RoutineSchema) routines.next();
        if (!session.getGrantee().isAccessible(routineSchema)) {
            continue;
        }
        Routine[] specifics = routineSchema.getSpecificRoutines();
        for (int i = 0; i < specifics.length; i++) {
            routine = specifics[i];
            columnCount = routine.getParameterCount();
            for (int j = 0; j < columnCount; j++) {
                ColumnSchema column = routine.getParameter(j);
                row = t.getEmptyRowData();
                type = column.getDataType();
                if (translateDTI) {
                    if (type.isIntervalType()) {
                        type = CharacterType.getCharacterType(Types.SQL_VARCHAR, type.displaySize());
                    } else if (type.isDateTimeTypeWithZone()) {
                        type = ((DateTimeType) type).getDateTimeTypeWithoutZone();
                    }
                }
                row[specific_cat] = database.getCatalogName().name;
                row[specific_schem] = routine.getSchemaName().name;
                row[specific_name] = routine.getSpecificName().name;
                row[procedure_name] = routine.getName().name;
                row[parameter_name] = column.getName().name;
                row[ordinal_position] = ValuePool.getInt(j + 1);
                row[parameter_mode] = ValuePool.getInt(column.getParameterMode());
                row[data_type] = type.getFullNameString();
                row[data_type_sql_id] = ValuePool.getInt(type.getJDBCTypeCode());
                row[numeric_precision] = ValuePool.INTEGER_0;
                row[character_octet_length] = ValuePool.INTEGER_0;
                if (type.isCharacterType()) {
                    row[numeric_precision] = ValuePool.getInt(type.getJDBCPrecision());
                    // this is length not octet_length, for character columns
                    row[character_octet_length] = ValuePool.getInt(type.getJDBCPrecision());
                }
                if (type.isBinaryType()) {
                    row[numeric_precision] = ValuePool.getInt(type.getJDBCPrecision());
                    row[character_octet_length] = ValuePool.getInt(type.getJDBCPrecision());
                }
                if (type.isNumberType()) {
                    row[numeric_precision] = ValuePool.getInt(((NumberType) type).getNumericPrecisionInRadix());
                    row[numeric_precision_radix] = ValuePool.getLong(type.getPrecisionRadix());
                    if (type.isExactNumberType()) {
                        row[numeric_scale] = ValuePool.getLong(type.scale);
                    }
                }
                if (type.isDateTimeType()) {
                    int size = (int) column.getDataType().displaySize();
                    row[numeric_precision] = ValuePool.getInt(size);
                }
                row[sql_data_type] = ValuePool.getInt(column.getDataType().typeCode);
                row[nullable] = ValuePool.getInt(column.getNullability());
                row[is_nullable] = column.isNullable() ? "YES" : "NO";
                t.insertSys(store, row);
            }
        }
    }
    return t;
}
