public void setArrayState(int firstVertexAttribIndex, ClientArray[] vertexAttribArrays, ClientArray[] texCoordArrays, ClientArray colorArray, ClientArray normalArray, ClientArray vertexArray, BufferObject elementArrayBuffer) {
    // clear any cached reference
    _states[RenderState.ARRAY_STATE] = null;
    // update the union of the requested attributes and the ones currently set
    int numVertexAttribArrays = (vertexAttribArrays == null) ? 0 : vertexAttribArrays.length;
    int lastVertexAttribIndex = firstVertexAttribIndex + numVertexAttribArrays;
    for (int ii = Math.min(_vertexAttribArrayStart, firstVertexAttribIndex), nn = Math.max(_vertexAttribArrayEnd, lastVertexAttribIndex); ii < nn; ii++) {
        ClientArrayRecord arec = _vertexAttribArrays[ii];
        ClientArray vertexAttribArray = (ii >= firstVertexAttribIndex && ii < lastVertexAttribIndex) ? vertexAttribArrays[ii - firstVertexAttribIndex] : null;
        boolean enableVertexAttribArray = (vertexAttribArray != null);
        if (arec.array == vertexAttribArray && !(enableVertexAttribArray && vertexAttribArray.dirty)) {
            continue;
        }
        if (arec.enabled != Boolean.valueOf(enableVertexAttribArray)) {
            if (arec.enabled = enableVertexAttribArray) {
                ARBVertexShader.glEnableVertexAttribArrayARB(ii);
            } else {
                ARBVertexShader.glDisableVertexAttribArrayARB(ii);
            }
        }
        arec.array = vertexAttribArray;
        if (!enableVertexAttribArray) {
            continue;
        }
        vertexAttribArray.dirty = false;
        if (!arec.equals(vertexAttribArray)) {
            setVertexAttribArray(ii, arec.set(vertexAttribArray));
        }
    }
    _vertexAttribArrayStart = firstVertexAttribIndex;
    _vertexAttribArrayEnd = lastVertexAttribIndex;
    // update the union of the requested tex coords and the ones already set
    int numTexCoordArrays = (texCoordArrays == null) ? 0 : texCoordArrays.length;
    for (int ii = 0, nn = Math.max(_texCoordArrayEnd, numTexCoordArrays); ii < nn; ii++) {
        ClientArrayRecord arec = _texCoordArrays[ii];
        ClientArray texCoordArray = (ii < numTexCoordArrays) ? texCoordArrays[ii] : null;
        boolean enableTexCoordArray = (texCoordArray != null);
        if (arec.array == texCoordArray && !(enableTexCoordArray && texCoordArray.dirty)) {
            continue;
        }
        if (arec.enabled != Boolean.valueOf(enableTexCoordArray)) {
            setClientActiveUnit(ii);
            setClientCapability(GL11.GL_TEXTURE_COORD_ARRAY, arec.enabled = enableTexCoordArray);
        }
        arec.array = texCoordArray;
        if (!enableTexCoordArray) {
            continue;
        }
        texCoordArray.dirty = false;
        if (!arec.equals(texCoordArray)) {
            setClientActiveUnit(ii);
            setTexCoordArray(arec.set(texCoordArray));
        }
    }
    _texCoordArrayEnd = numTexCoordArrays;
    boolean enableColorArray = (colorArray != null);
    if (_colorArray.array != colorArray || (enableColorArray && colorArray.dirty)) {
        if (_colorArray.enabled != Boolean.valueOf(enableColorArray)) {
            setClientCapability(GL11.GL_COLOR_ARRAY, _colorArray.enabled = enableColorArray);
        }
        _colorArray.array = colorArray;
        if (enableColorArray) {
            colorArray.dirty = false;
            if (!_colorArray.equals(colorArray)) {
                setColorArray(_colorArray.set(colorArray));
            }
        }
    }
    boolean enableNormalArray = (normalArray != null);
    if (_normalArray.array != normalArray || (enableNormalArray && normalArray.dirty)) {
        if (_normalArray.enabled != Boolean.valueOf(enableNormalArray)) {
            setClientCapability(GL11.GL_NORMAL_ARRAY, _normalArray.enabled = enableNormalArray);
        }
        _normalArray.array = normalArray;
        if (enableNormalArray) {
            normalArray.dirty = false;
            if (!_normalArray.equals(normalArray)) {
                setNormalArray(_normalArray.set(normalArray));
            }
        }
    }
    boolean enableVertexArray = (vertexArray != null);
    if (_vertexArray.array != vertexArray || (enableVertexArray && vertexArray.dirty)) {
        if (_vertexArray.enabled != Boolean.valueOf(enableVertexArray)) {
            setClientCapability(GL11.GL_VERTEX_ARRAY, _vertexArray.enabled = enableVertexArray);
        }
        _vertexArray.array = vertexArray;
        if (enableVertexArray) {
            vertexArray.dirty = false;
            if (!_vertexArray.equals(vertexArray)) {
                setVertexArray(_vertexArray.set(vertexArray));
            }
        }
    }
    if (_elementArrayBuffer != elementArrayBuffer) {
        int id = (elementArrayBuffer == null) ? 0 : elementArrayBuffer.getId();
        ARBBufferObject.glBindBufferARB(ARBVertexBufferObject.GL_ELEMENT_ARRAY_BUFFER_ARB, id);
        _elementArrayBuffer = elementArrayBuffer;
    }
}
