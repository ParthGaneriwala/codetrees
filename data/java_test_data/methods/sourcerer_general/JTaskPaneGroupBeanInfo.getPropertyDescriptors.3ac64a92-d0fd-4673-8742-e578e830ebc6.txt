public PropertyDescriptor[] getPropertyDescriptors() {
    try {
        Vector descriptors = new Vector();
        PropertyDescriptor descriptor = null;
        try {
            descriptor = new PropertyDescriptor("title", com.l2fprod.common.swing.JTaskPaneGroup.class);
        } catch (IntrospectionException e) {
            descriptor = new PropertyDescriptor("title", com.l2fprod.common.swing.JTaskPaneGroup.class, "getTitle", null);
        }
        descriptor.setPreferred(true);
        descriptor.setBound(true);
        descriptors.add(descriptor);
        try {
            descriptor = new PropertyDescriptor("icon", com.l2fprod.common.swing.JTaskPaneGroup.class);
        } catch (IntrospectionException e) {
            descriptor = new PropertyDescriptor("icon", com.l2fprod.common.swing.JTaskPaneGroup.class, "getIcon", null);
        }
        descriptor.setPreferred(true);
        descriptor.setBound(true);
        descriptors.add(descriptor);
        try {
            descriptor = new PropertyDescriptor("special", com.l2fprod.common.swing.JTaskPaneGroup.class);
        } catch (IntrospectionException e) {
            descriptor = new PropertyDescriptor("special", com.l2fprod.common.swing.JTaskPaneGroup.class, "getSpecial", null);
        }
        descriptor.setPreferred(true);
        descriptor.setBound(true);
        descriptors.add(descriptor);
        try {
            descriptor = new PropertyDescriptor("scrollOnExpand", com.l2fprod.common.swing.JTaskPaneGroup.class);
        } catch (IntrospectionException e) {
            descriptor = new PropertyDescriptor("scrollOnExpand", com.l2fprod.common.swing.JTaskPaneGroup.class, "getScrollOnExpand", null);
        }
        descriptor.setPreferred(true);
        descriptor.setBound(true);
        descriptors.add(descriptor);
        try {
            descriptor = new PropertyDescriptor("expanded", com.l2fprod.common.swing.JTaskPaneGroup.class);
        } catch (IntrospectionException e) {
            descriptor = new PropertyDescriptor("expanded", com.l2fprod.common.swing.JTaskPaneGroup.class, "getExpanded", null);
        }
        descriptor.setPreferred(true);
        descriptor.setBound(true);
        descriptors.add(descriptor);
        try {
            descriptor = new PropertyDescriptor("collapsable", com.l2fprod.common.swing.JTaskPaneGroup.class);
        } catch (IntrospectionException e) {
            descriptor = new PropertyDescriptor("collapsable", com.l2fprod.common.swing.JTaskPaneGroup.class, "getCollapsable", null);
        }
        descriptor.setPreferred(true);
        descriptor.setBound(true);
        descriptors.add(descriptor);
        try {
            descriptor = new PropertyDescriptor("animated", com.l2fprod.common.swing.JTaskPaneGroup.class);
        } catch (IntrospectionException e) {
            descriptor = new PropertyDescriptor("animated", com.l2fprod.common.swing.JTaskPaneGroup.class, "getAnimated", null);
        }
        descriptor.setPreferred(true);
        descriptor.setBound(true);
        descriptors.add(descriptor);
        return (PropertyDescriptor[]) descriptors.toArray(new PropertyDescriptor[descriptors.size()]);
    } catch (Exception e) {
        // do not ignore, bomb politely so use has chance to discover what went
        // wrong...
        // I know that this is suboptimal solution, but swallowing silently is
        // even worse... Propose better solution!
        e.printStackTrace();
    }
    return null;
}
