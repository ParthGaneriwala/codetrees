public int doStartTag() throws JspException {
    try {
        // Get the user from cache
        User userObject = (User) CacheUtils.getObjectValue(Constants.SYSTEM_USER_CACHE, userId);
        ApplicationPrefs prefs = (ApplicationPrefs) this.pageContext.getServletContext().getAttribute(Constants.APPLICATION_PREFS);
        String user = "";
        if ("true".equals(prefs.get(ApplicationPrefs.USERS_ARE_ANONYMOUS))) {
            user = userObject.getNameFirstLastInitial();
        } else {
            user = userObject.getNameFirstLast();
        }
        // Find a related profile
        boolean foundProfile = false;
        Project userProject = null;
        if (userObject.getProfileProjectId() > -1) {
            userProject = ProjectUtils.loadProject(userObject.getProfileProjectId());
        }
        if (showProfile) {
            if (userProject != null) {
                // Determine if access to profiles is limited
                if ("true".equals(prefs.get(ApplicationPrefs.INFORMATION_IS_SENSITIVE))) {
                    // Check this user's access
                    User thisUser = null;
                    PortletRequest renderRequest = (PortletRequest) pageContext.getRequest().getAttribute(org.apache.pluto.tags.Constants.PORTLET_REQUEST);
                    // Check the portlet request object
                    if (renderRequest != null) {
                        thisUser = PortalUtils.getUser(renderRequest);
                    }
                    // Check the session object
                    if (thisUser == null) {
                        thisUser = (User) pageContext.getSession().getAttribute(Constants.SESSION_USER);
                    }
                    // Deny if not allowed
                    foundProfile = !(thisUser == null || !thisUser.isLoggedIn());
                } else {
                    // Link to the user
                    foundProfile = true;
                }
            }
        }
        if (userProject != null && showCityState && StringUtils.hasText(userProject.getCityStateString())) {
            user = user + " " + userProject.getCityStateString();
        }
        // Output as requested
        if (foundProfile) {
            if (showLink) {
                this.pageContext.getOut().write("<a " + "href=\"" + RequestUtils.getAbsoluteServerUrl((HttpServletRequest) pageContext.getRequest()) + "/show/" + userProject.getUniqueId() + "\"" + (idTag != null ? " id=\"" + idTag + "\"" : "") + (showLinkTitle ? " title=\"Profile for " + user + "\"" : "") + ">");
            }
        }
        if (jsEscape) {
            this.pageContext.getOut().write(StringUtils.jsEscape(user));
        } else if (jsQuote) {
            this.pageContext.getOut().write(StringUtils.jsQuote(user));
        } else {
            this.pageContext.getOut().write(StringUtils.toHtml(user));
        }
        if (foundProfile) {
            if (showLink) {
                this.pageContext.getOut().write("</a>");
            }
        }
        // display if user is online
        if (showPresence) {
            Tracker thisTracker = (Tracker) pageContext.getServletContext().getAttribute("Tracker");
            if (thisTracker != null) {
                if (thisTracker.hasUserId(userId)) {
                    this.pageContext.getOut().write(" <img border='0' src='" + RequestUtils.getAbsoluteServerUrl((HttpServletRequest) pageContext.getRequest()) + "/images/icons/online.gif' align='absmiddle' />");
                }
            }
        }
    } catch (Exception e) {
        throw new JspException("Username Error: " + e.getMessage());
    }
    return SKIP_BODY;
}
