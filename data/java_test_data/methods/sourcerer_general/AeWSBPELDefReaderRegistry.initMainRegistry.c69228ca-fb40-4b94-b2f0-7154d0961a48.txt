protected void initMainRegistry() {
    super.initMainRegistry();
    unregisterReader(PROCESS_CLASS, TAG_PARTNERS);
    registerReader(PROCESS_CLASS, TAG_IMPORT, createDispatchReader(IMPORT_CLASS));
    registerReader(ACTIVITY_ASSIGN_CLASS, TAG_EXTENSIBLE_ASSIGN, createDispatchReader(ASSIGN_EXTENSIBLE_ASSIGN_CLASS));
    registerReader(VARIABLE_CLASS, TAG_FROM, createDispatchReader(ASSIGN_FROM_CLASS));
    registerReader(PROCESS_CLASS, TAG_EXTENSIONS, createDispatchReader(EXTENSIONS_CLASS));
    registerReader(EXTENSIONS_CLASS, TAG_EXTENSION, createDispatchReader(EXTENSION_CLASS));
    registerReader(ACTIVITY_INVOKE_CLASS, TAG_FROM_PARTS, createDispatchReader(FROM_PARTS_CLASS));
    registerReader(ACTIVITY_RECEIVE_CLASS, TAG_FROM_PARTS, createDispatchReader(FROM_PARTS_CLASS));
    registerReader(ON_MESSAGE_CLASS, TAG_FROM_PARTS, createDispatchReader(FROM_PARTS_CLASS));
    registerReader(ON_EVENT_CLASS, TAG_FROM_PARTS, createDispatchReader(FROM_PARTS_CLASS));
    registerReader(ACTIVITY_INVOKE_CLASS, TAG_TO_PARTS, createDispatchReader(TO_PARTS_CLASS));
    registerReader(ACTIVITY_REPLY_CLASS, TAG_TO_PARTS, createDispatchReader(TO_PARTS_CLASS));
    registerReader(TO_PARTS_CLASS, TAG_TO_PART, createDispatchReader(TO_PART_CLASS));
    registerReader(FROM_PARTS_CLASS, TAG_FROM_PART, createDispatchReader(FROM_PART_CLASS));
    // 'target' and 'source' constructs will be children of the 'targets' and 'sources' constructs, respectively.
    registerReader(TARGETS_CLASS, TAG_TARGET, createDispatchReader(TARGET_CLASS));
    registerReader(SOURCES_CLASS, TAG_SOURCE, createDispatchReader(SOURCE_CLASS));
    registerReader(TARGETS_CLASS, TAG_JOIN_CONDITION, createDispatchReader(JOIN_CONDITION_CLASS));
    registerReader(SOURCE_CLASS, TAG_TRANSITION_CONDITION, createDispatchReader(TRANSITION_CONDITION_CLASS));
    // Get rid of the 1.1 AE messageExchange(s) extension
    unregisterReader(PROCESS_CLASS, new QName(IAeBPELConstants.ABX_2_0_NAMESPACE_URI, TAG_MESSAGE_EXCHANGES));
    unregisterReader(ACTIVITY_SCOPE_CLASS, new QName(IAeBPELConstants.ABX_2_0_NAMESPACE_URI, TAG_MESSAGE_EXCHANGES));
    unregisterReader(MESSAGE_EXCHANGES_CLASS, new QName(IAeBPELConstants.ABX_2_0_NAMESPACE_URI, TAG_MESSAGE_EXCHANGE));
    // And again at the legacy NS
    unregisterReader(PROCESS_CLASS, new QName(IAeBPELConstants.ABX_FUNCTIONS_NAMESPACE_URI, TAG_MESSAGE_EXCHANGES));
    unregisterReader(ACTIVITY_SCOPE_CLASS, new QName(IAeBPELConstants.ABX_FUNCTIONS_NAMESPACE_URI, TAG_MESSAGE_EXCHANGES));
    unregisterReader(MESSAGE_EXCHANGES_CLASS, new QName(IAeBPELConstants.ABX_FUNCTIONS_NAMESPACE_URI, TAG_MESSAGE_EXCHANGE));
    // Add the ws-bpel 2.0 messageExchange mappings
    registerReader(PROCESS_CLASS, TAG_MESSAGE_EXCHANGES, createDispatchReader(MESSAGE_EXCHANGES_CLASS));
    registerReader(ACTIVITY_SCOPE_CLASS, TAG_MESSAGE_EXCHANGES, createDispatchReader(MESSAGE_EXCHANGES_CLASS));
    registerReader(MESSAGE_EXCHANGES_CLASS, TAG_MESSAGE_EXCHANGE, createDispatchReader(MESSAGE_EXCHANGE_CLASS));
    registerReader(ACTIVITY_WAIT_CLASS, TAG_FOR, createDispatchReader(FOR_CLASS));
    registerReader(ACTIVITY_WAIT_CLASS, TAG_UNTIL, createDispatchReader(UNTIL_CLASS));
    registerReader(ON_ALARM_CLASS, TAG_FOR, createDispatchReader(FOR_CLASS));
    registerReader(ON_ALARM_CLASS, TAG_UNTIL, createDispatchReader(UNTIL_CLASS));
    registerReader(ACTIVITY_IF_CLASS, TAG_CONDITION, createDispatchReader(CONDITION_CLASS));
    registerReader(ACTIVITY_IF_CLASS, TAG_ELSEIF, createDispatchReader(ELSEIF_CLASS));
    registerReader(ACTIVITY_IF_CLASS, TAG_ELSE, createDispatchReader(ELSE_CLASS));
    registerReader(ELSEIF_CLASS, TAG_CONDITION, createDispatchReader(CONDITION_CLASS));
    registerReader(ACTIVITY_WHILE_CLASS, TAG_CONDITION, createDispatchReader(CONDITION_CLASS));
    registerReader(ACTIVITY_REPEAT_UNTIL_CLASS, TAG_CONDITION, createDispatchReader(CONDITION_CLASS));
    registerReader(ON_ALARM_CLASS, TAG_REPEAT_EVERY, createDispatchReader(REPEAT_EVERY_CLASS));
    unregisterReader(EVENT_HANDLERS_CLASS, TAG_ON_MESSAGE);
    registerReader(EVENT_HANDLERS_CLASS, TAG_ON_EVENT, createDispatchReader(ON_EVENT_CLASS));
    registerReader(ACTIVITY_SCOPE_CLASS, TAG_TERMINATION_HANDLER, createDispatchReader(TERMINATION_HANDLER_CLASS));
    registerReader(ASSIGN_FROM_CLASS, TAG_LITERAL, createDispatchReader(LITERAL_CLASS));
    // Unregister BPWS entries for foreach elements
    unregisterReader(ACTIVITY_FOREACH_CLASS, new QName(IAeBPELConstants.ABX_2_0_NAMESPACE_URI, TAG_FOREACH_STARTCOUNTER));
    unregisterReader(ACTIVITY_FOREACH_CLASS, new QName(IAeBPELConstants.AE_EXTENSION_NAMESPACE_URI_ACTIVITY, TAG_FOREACH_STARTCOUNTER));
    unregisterReader(ACTIVITY_FOREACH_CLASS, new QName(IAeBPELConstants.ABX_2_0_NAMESPACE_URI, TAG_FOREACH_FINALCOUNTER));
    unregisterReader(ACTIVITY_FOREACH_CLASS, new QName(IAeBPELConstants.AE_EXTENSION_NAMESPACE_URI_ACTIVITY, TAG_FOREACH_FINALCOUNTER));
    unregisterReader(ACTIVITY_FOREACH_CLASS, new QName(IAeBPELConstants.ABX_2_0_NAMESPACE_URI, TAG_FOREACH_COMPLETION_CONDITION));
    unregisterReader(ACTIVITY_FOREACH_CLASS, new QName(IAeBPELConstants.AE_EXTENSION_NAMESPACE_URI_ACTIVITY, TAG_FOREACH_COMPLETION_CONDITION));
    unregisterReader(ACTIVITY_FOREACH_COMPLETION_CONDITION, new QName(IAeBPELConstants.ABX_2_0_NAMESPACE_URI, TAG_FOREACH_BRANCHES));
    unregisterReader(ACTIVITY_FOREACH_COMPLETION_CONDITION, new QName(IAeBPELConstants.AE_EXTENSION_NAMESPACE_URI_ACTIVITY, TAG_FOREACH_BRANCHES));
    // Register BPEL 2.0 entries for foreach elements
    registerReader(ACTIVITY_FOREACH_CLASS, TAG_FOREACH_STARTCOUNTER, createDispatchReader(ACTIVITY_FOREACH_START));
    registerReader(ACTIVITY_FOREACH_CLASS, TAG_FOREACH_FINALCOUNTER, createDispatchReader(ACTIVITY_FOREACH_FINAL));
    registerReader(ACTIVITY_FOREACH_CLASS, TAG_FOREACH_COMPLETION_CONDITION, createDispatchReader(ACTIVITY_FOREACH_COMPLETION_CONDITION));
    registerReader(ACTIVITY_FOREACH_COMPLETION_CONDITION, TAG_FOREACH_BRANCHES, createDispatchReader(ACTIVITY_FOREACH_BRANCHES));
    registerReader(ASSIGN_FROM_CLASS, TAG_QUERY, createDispatchReader(AeQueryDef.class));
    registerReader(ASSIGN_TO_CLASS, TAG_QUERY, createDispatchReader(AeQueryDef.class));
    // Process level compensation handler
    unregisterReader(PROCESS_CLASS, TAG_COMPENSATION_HANDLER);
    // Process level compensation handler and termination handling
    registerReader(PROCESS_CLASS, new QName(IAeBPELConstants.AE_EXTENSION_NAMESPACE_URI_ALLOW_PROCESS_COORDINATION, TAG_COMPENSATION_HANDLER), createDispatchReader(COMPENSATION_HANDLER_CLASS));
    registerReader(PROCESS_CLASS, new QName(IAeBPELConstants.AE_EXTENSION_NAMESPACE_URI_ALLOW_PROCESS_COORDINATION, TAG_TERMINATION_HANDLER), createDispatchReader(TERMINATION_HANDLER_CLASS));
    // opaqueFrom activity for bpel 2.0 abstract processes.
    // (note: this reader is registered in this 'bpel executable process' namespace to allow users to load executable processes that may have opaque activities (from AbxProcess->Save-As)
    registerReader(AeAssignCopyDef.class, new QName(IAeBPELConstants.WSBPEL_2_0_ABSTRACT_NAMESPACE_URI, TAG_OPAQUE_FROM), createDispatchReader(AeFromDef.class));
}
