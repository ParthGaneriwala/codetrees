public void construct() {
    iFiles.removeAllElements();
    fileList.updateUI();
    this.iRoverSource = iParent.getCurrentRoverSource();
    // check if we must get data from ms_lims
    if (iParent.getUseMs_lims()) {
        // we must use ms_lims
        // set the correct panels visible
        ms_limsPanel.setVisible(true);
        filePanel.setVisible(false);
        // check if we have a connection
        iConn = iParent.getMs_limsConnection();
        if (iConn == null) {
            Properties lConnectionProperties = PropertiesManager.getInstance().getProperties(CompomicsTools.MSLIMS, "ms-lims.properties");
            ConnectionDialog cd = new ConnectionDialog(iParent, this, "Establish DB connection for ms_lims", lConnectionProperties);
            cd.setVisible(true);
        }
        if (iConn == null) {
            iParent.getPreviousButton().doClick();
            iQuantitationSingelton.removeLastRoverDataType();
            return;
        } else {
            // check if we are working with a 7.1 ms_lims version or earlier
            try {
                String query = "select * from quantitation_group where quantitation_groupid = 1";
                PreparedStatement ps = iConn.prepareStatement(query);
                ResultSet rs = ps.executeQuery();
                rs.close();
                ps.close();
                iQuantitationSingelton.setMsLimsPre7_2(false);
                try {
                    ps = iConn.prepareStatement("select * from ms_lims_properties");
                    rs = ps.executeQuery();
                    rs.close();
                    ps.close();
                    iQuantitationSingelton.setMsLimsPre7_6(false);
                } catch (SQLException e) {
                    iQuantitationSingelton.setMsLimsPre7_6(true);
                }
            } catch (SQLException e) {
                iQuantitationSingelton.setMsLimsPre7_2(true);
            }
        }
        this.loadProjects();
        this.loadProtocol();
        ms_limsPanel.remove(cmbProjects);
        cmbProjects = new JComboBox(iProjects);
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.gridx = 5;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(5, 5, 5, 0);
        ms_limsPanel.add(cmbProjects, gbc);
        // add listener to the projects combobox
        cmbProjects.addItemListener(new ItemListener() {

            public void itemStateChanged(ItemEvent e) {
                if (e.getStateChange() == ItemEvent.SELECTED) {
                    iProject = (Project) e.getItem();
                    lblCreationdate.setText(iSDF.format(iProject.getCreationdate()));
                    lblUser.setText(iProject.getUsername());
                    for (int i = 0; i < iProtocols.length; i++) {
                        if (iProtocols[i].getProtocolid() == iProject.getL_protocolid()) {
                            lblProtocol.setText(iProtocols[i].getType());
                        }
                    }
                    txtDescription.setText(iProject.getDescription());
                    lblTitle.setText(iProject.getTitle());
                }
            }
        });
        // select the newest project
        iProject = iProjects[0];
        lblCreationdate.setText(iSDF.format(iProject.getCreationdate()));
        lblUser.setText(iProject.getUsername());
        for (int i = 0; i < iProtocols.length; i++) {
            if (iProtocols[i].getProtocolid() == iProject.getL_protocolid()) {
                lblProtocol.setText(iProtocols[i].getType());
            }
        }
        txtDescription.setText(iProject.getDescription());
        lblTitle.setText(iProject.getTitle());
    } else {
        // we will not use ms_lims
        ms_limsPanel.setVisible(false);
        filePanel.setVisible(true);
    }
}
