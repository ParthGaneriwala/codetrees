/**
 * Parses the specified string and returns a <code>Datagram</code> object
 * corresponding to the datagram represented by that string. The string should
 * be the contents of the datagram, without the surrounding delimiters.
 *
 * @throws FormatException if the specified string cannot be parsed as a
 * datagram because it is not in the proper format.
 */
public static Datagram parseDatagram(String dgString) throws FormatException {
    try {
        int index = dgString.indexOf(' ');
        if (// No arguments in the datagram
        index == -1)
            index = dgString.length();
        int id = Integer.parseInt(dgString.substring(0, index));
        // So that each field is suffixed with a space
        dgString += " ";
        List fields = new LinkedList();
        index++;
        int dgLength = dgString.length();
        while (index < dgLength) {
            int startIndex, endIndex;
            char firstChar = dgString.charAt(index);
            if (firstChar == '{') {
                // The delimiters are { and }
                startIndex = index + 1;
                endIndex = dgString.indexOf('}', startIndex);
                // "} "
                index = endIndex + 2;
            } else if (firstChar == SPECIAL_STRING_DELIM_START) {
                // The delimiters are ^Y{ and ^Y}
                startIndex = index + 2;
                endIndex = dgString.indexOf(SPECIAL_STRING_DELIM_START, startIndex);
                // "^Y} "
                index = endIndex + 3;
            } else if (firstChar == ' ') {
                // Skip any extra spaces just in case
                index++;
                continue;
            } else {
                startIndex = index;
                endIndex = dgString.indexOf(' ', startIndex);
                index = endIndex + 1;
            }
            fields.add(dgString.substring(startIndex, endIndex));
        }
        return new Datagram(id, (String[]) fields.toArray(new String[fields.size()]));
    } catch (NumberFormatException e) {
        throw new FormatException(e);
    } catch (StringIndexOutOfBoundsException e) {
        throw new FormatException(e);
    }
}
