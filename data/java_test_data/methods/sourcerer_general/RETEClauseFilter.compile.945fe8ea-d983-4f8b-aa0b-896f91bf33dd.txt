public static RETEClauseFilter compile(TriplePattern clause, int envLength, List varList) {
    byte[] instructions = new byte[300];
    byte[] bindInstructions = new byte[100];
    ArrayList args = new ArrayList();
    int pc = 0;
    int bpc = 0;
    // Pass 0 - prepare env creation statement
    bindInstructions[bpc++] = CREATEToken;
    bindInstructions[bpc++] = (byte) envLength;
    // Pass 1 - check literal values
    Node n = clause.getSubject();
    if (!n.isVariable()) {
        instructions[pc++] = TESTValue;
        instructions[pc++] = ADDRSubject;
        instructions[pc++] = (byte) args.size();
        args.add(n);
    } else {
        bindInstructions[bpc++] = BIND;
        bindInstructions[bpc++] = ADDRSubject;
        bindInstructions[bpc++] = (byte) ((Node_RuleVariable) n).getIndex();
        varList.add(n);
    }
    n = clause.getPredicate();
    if (!n.isVariable()) {
        instructions[pc++] = TESTValue;
        instructions[pc++] = ADDRPredicate;
        instructions[pc++] = (byte) args.size();
        args.add(clause.getPredicate());
    } else {
        bindInstructions[bpc++] = BIND;
        bindInstructions[bpc++] = ADDRPredicate;
        bindInstructions[bpc++] = (byte) ((Node_RuleVariable) n).getIndex();
        varList.add(n);
    }
    n = clause.getObject();
    if (!n.isVariable()) {
        if (Functor.isFunctor(n)) {
            // Pass 2 - check functor
            Functor f = (Functor) n.getLiteralValue();
            instructions[pc++] = TESTFunctorName;
            instructions[pc++] = (byte) args.size();
            args.add(f.getName());
            Node[] fargs = f.getArgs();
            for (int i = 0; i < fargs.length; i++) {
                Node fn = fargs[i];
                byte addr = (byte) (ADDRFunctorNode | (0x0f & i));
                if (!fn.isVariable()) {
                    instructions[pc++] = TESTValue;
                    instructions[pc++] = addr;
                    instructions[pc++] = (byte) args.size();
                    args.add(fn);
                } else {
                    bindInstructions[bpc++] = BIND;
                    bindInstructions[bpc++] = addr;
                    bindInstructions[bpc++] = (byte) ((Node_RuleVariable) fn).getIndex();
                    varList.add(fn);
                }
            }
        } else {
            instructions[pc++] = TESTValue;
            instructions[pc++] = ADDRObject;
            instructions[pc++] = (byte) args.size();
            args.add(n);
        }
    } else {
        bindInstructions[bpc++] = BIND;
        bindInstructions[bpc++] = ADDRObject;
        bindInstructions[bpc++] = (byte) ((Node_RuleVariable) n).getIndex();
        varList.add(n);
    }
    bindInstructions[bpc++] = END;
    // Pass 4 - Pack instructions
    byte[] packed = new byte[pc + bpc];
    System.arraycopy(instructions, 0, packed, 0, pc);
    System.arraycopy(bindInstructions, 0, packed, pc, bpc);
    Object[] packedArgs = args.toArray();
    return new RETEClauseFilter(packed, packedArgs);
}
