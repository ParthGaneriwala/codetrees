protected static void searchByPerson() {
    cleanAllComposites();
    searchByPerson = new Composite(shell.getShell(), SWT.BORDER);
    searchByPerson.setLocation(2, 145);
    searchByPerson.setLayout(new FillLayout());
    Color frontColor = new Color(display, 222, 235, 247);
    if ((bar != null) && !(bar.isDisposed()))
        bar.dispose();
    bar = new ExpandBar(searchByPerson, SWT.V_SCROLL);
    bar.setBackground(new Color(display, 177, 200, 231));
    Image image = ImageCache.getImage("search_48.png");
    // Main item
    Composite composite = new Composite(bar, SWT.FILL);
    composite.setBackground(frontColor);
    GridLayout layout = new GridLayout(7, false);
    layout.marginLeft = layout.marginTop = layout.marginRight = layout.marginBottom = 5;
    layout.verticalSpacing = 10;
    composite.setLayout(layout);
    Label label = new Label(composite, SWT.NONE);
    label.setText("Person Name");
    label.setBackground(frontColor);
    final Button checkWildCard = new Button(composite, SWT.CHECK);
    checkWildCard.setText("Wildcard");
    checkWildCard.setSelection(true);
    checkWildCard.setBackground(frontColor);
    final Text nameText = new Text(composite, SWT.SINGLE | SWT.FILL | SWT.BORDER);
    label = new Label(composite, SWT.NONE);
    label.setText("Age Range	From");
    label.setBackground(frontColor);
    final Spinner ageFrom = new Spinner(composite, SWT.BORDER);
    ageFrom.setMinimum(0);
    ageFrom.setMaximum(100);
    ageFrom.setSelection(0);
    ageFrom.setPageIncrement(1);
    ageFrom.pack();
    label = new Label(composite, SWT.NONE);
    label.setText("To");
    label.setBackground(frontColor);
    final Spinner ageTo = new Spinner(composite, SWT.BORDER);
    ageTo.setMinimum(0);
    ageTo.setMaximum(100);
    ageTo.setSelection(100);
    ageTo.setPageIncrement(1);
    ageTo.pack();
    label = new Label(composite, SWT.NONE);
    label.setText("Production Role");
    label.setBackground(frontColor);
    final Combo rolesCombo = new Combo(composite, SWT.READ_ONLY);
    String[] rolesString = new String[rolesList.size() + 1];
    rolesString[0] = "";
    for (int i = 0; i < rolesList.size(); i++) {
        rolesString[i + 1] = rolesList.get(i).getName();
    }
    rolesCombo.setItems(rolesString);
    label = new Label(composite, SWT.NONE);
    label.setText("Origin Country");
    label.setBackground(frontColor);
    final Combo countryCombo = new Combo(composite, SWT.READ_ONLY);
    String[] countryString = new String[countriesList.size() + 1];
    countryString[0] = "";
    for (int i = 0; i < countriesList.size(); i++) {
        countryString[i + 1] = countriesList.get(i).getName();
    }
    countryCombo.setItems(countryString);
    GridData gridData = new GridData();
    gridData.horizontalAlignment = GridData.FILL;
    gridData.horizontalSpan = 4;
    countryCombo.setLayoutData(gridData);
    Button button = new Button(composite, SWT.PUSH);
    button.setText("Search");
    button.setBackground(frontColor);
    ExpandItem item0 = new ExpandItem(bar, SWT.NONE, 0);
    item0.setText("Search for person");
    item0.setHeight(composite.computeSize(SWT.DEFAULT, SWT.DEFAULT).y);
    item0.setControl(composite);
    item0.setImage(image);
    item0.setExpanded(true);
    bar.setSpacing(8);
    searchByPerson.setSize((shell.getShell().getSize().x) - 5, (shell.getShell().getSize().y) / 3);
    // listen for the search button
    button.addSelectionListener(new SelectionListener() {

        public void widgetDefaultSelected(SelectionEvent e) {
        }

        public void widgetSelected(SelectionEvent e) {
            // creating the filter to search by
            List<AbsFilter> list = new ArrayList<AbsFilter>();
            if (nameText.getText() != "" && nameText.getText().length() > 0) {
                if (checkWildCard.getSelection())
                    list.add(dm.getFilter(SearchEntitiesEnum.PERSON_NAME_WILDCARD, nameText.getText()));
                else
                    list.add(dm.getFilter(SearchEntitiesEnum.PERSON_NAME, nameText.getText()));
            }
            if (rolesCombo.getText() != "") {
                list.add(dm.getFilter(SearchEntitiesEnum.PERSON_PRODUCTION_ROLE, getID(rolesList, rolesCombo.getText())));
            }
            if (countryCombo.getText() != "") {
                list.add(dm.getFilter(SearchEntitiesEnum.PERSON_ORIGIN_COUNTRY, getID(countriesList, countryCombo.getText())));
            }
            // search by age only if the ages parameters were changed
            if ((Integer.parseInt(ageFrom.getText()) != 0) || ((Integer.parseInt(ageTo.getText()) != (100))))
                list.add(dm.getFilter(SearchEntitiesEnum.PERSON_AGE, ageFrom.getText(), ageTo.getText()));
            // Change the tab name to searching
            shell.getRibbonTabFolder().getTabs().get(0).setName("Busy");
            shell.redrawContents();
            // search for persons
            try {
                pool.execute(DataManager.search(SearchEntitiesEnum.PERSONS, list));
            } catch (InterruptedException e1) {
                e1.printStackTrace();
            }
        }
    });
}
