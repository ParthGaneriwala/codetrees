private void expGen(ExpNode node) {
    if (node != null) {
        if (node instanceof NumNode) {
            NumNode temp = (NumNode) node;
            Object value = temp.getValue();
            if (value instanceof Integer) {
                Integer v = (Integer) value;
                this.codeBody.append(Emit.lit(v.intValue()));
                if (trace)
                    this.codeBody.append("\t" + Emit.comment("Entero " + v) + "\n");
                else
                    this.codeBody.append("\n");
            } else if (value instanceof Double) {
                Double v = (Double) value;
                this.codeBody.append(Emit.lit(v.doubleValue()));
                if (trace)
                    this.codeBody.append("\t" + Emit.comment("Decimal " + v) + "\n");
                else
                    this.codeBody.append("\n");
            }
        } else if (node instanceof BoolNode) {
            BoolNode temp = (BoolNode) node;
            this.codeBody.append(Emit.lit(temp.getValue()));
            if (trace)
                this.codeBody.append("\t" + Emit.comment("Booleano") + "\n");
            else
                this.codeBody.append("\n");
        } else if (node instanceof TextNode) {
            TextNode temp = (TextNode) node;
            this.codeBody.append(Emit.lit(temp.getValue()));
            if (trace)
                this.codeBody.append("\t" + Emit.comment("Texto") + "\n");
            else
                this.codeBody.append("\n");
        } else if (node instanceof VarNode) {
            VarNode temp = (VarNode) node;
            this.codeBody.append(Emit.lod(temp.getName()));
            if (trace)
                this.codeBody.append("\t" + Emit.comment("Var '" + temp.getName() + "'") + "\n");
            else
                this.codeBody.append("\n");
        } else if (node instanceof OpNode) {
            OpNode temp = (OpNode) node;
            String name = temp.getName();
            if (!name.equals(TokenType.ASSIGN.toString())) {
                this.codeGen(temp.getChild(OpNode.LEFT));
                this.codeGen(temp.getChild(OpNode.RIGHT));
                this.codeBody.append(Emit.opr(this.opToOprCode(temp.getName())));
                if (trace)
                    this.codeBody.append("\t" + Emit.comment("Operacion '" + temp.getName() + "'") + "\n");
                else
                    this.codeBody.append("\n");
            } else {
                this.codeGen(temp.getChild(OpNode.RIGHT));
                VarNode var = (VarNode) temp.getChild(OpNode.LEFT);
                this.codeBody.append(Emit.sto(var.getName()));
                if (trace)
                    this.codeBody.append("\t" + Emit.comment("Asignacion de '" + var.getName() + "'") + "\n");
                else
                    this.codeBody.append("\n");
            }
        } else if (node instanceof CallNode) {
            CallNode temp = (CallNode) node;
            String name = temp.getName();
            if (name.equals(Lexicon.FUNC_PRINT)) {
                this.codeGen(temp.getChild(CallNode.ARGS));
                this.codeBody.append(Emit.opr(Emit.WRI_OPR));
                if (trace)
                    this.codeBody.append("\t" + Emit.comment("Imprimir en consola") + "\n");
                else
                    this.codeBody.append("\n");
            } else if (name.equals(Lexicon.FUNC_READ)) {
                this.codeGen(temp.getChild(CallNode.ARGS));
                this.codeBody.append(Emit.opr(Emit.RDI_OPR));
                if (trace)
                    this.codeBody.append("\t" + Emit.comment("Leer de consola") + "\n");
                else
                    this.codeBody.append("\n");
            } else {
                String label = this.nextLabel();
                this.codeBody.append(Emit.lod(label) + "\n");
                this.codeGen(temp.getChild(CallNode.ARGS));
                String call = Emit.cal(temp.getName());
                this.codeBody.append(call);
                int i = this.codeBody.indexOf(call);
                this.calls.put(temp.getName(), i + "-" + (i + call.length()));
                if (trace)
                    this.codeBody.append("\t" + Emit.comment("Llamada a funcion '" + temp.getName() + "'") + "\n");
                else
                    this.codeBody.append("\n");
                this.addLabel(label, Emit.emitLoc());
                this.codeBody.append(Emit.lod(temp.getName()) + "\n");
            }
        }
    }
}
