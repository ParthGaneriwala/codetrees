public Token getToken() throws ExcepcionComentarioSinCerrar, ExcepcionIdentificadorInvalido, ExcepcionComentarioCerrado, ExcepcionCaracterInvalido {
    String Lexema = new String();
    int estado = 0;
    char caracter = buf.getChar();
    int numToken;
    int LineaDeInicioDeComentario = 0;
    boolean Errores = false;
    while (!Errores) {
        switch(estado) {
            // Lectura del primer caracter
            case 0:
                if (Character.isLetter(caracter)) {
                    estado = 1;
                    Lexema = Lexema + caracter;
                } else if (caracter == EOF) {
                    return new Token(Token.EOF, "EOF", buf.getNumeroLinea());
                } else if (Character.isDigit(caracter)) {
                    estado = 2;
                    Lexema = Lexema + caracter;
                } else if (caracter == '<') {
                    estado = 3;
                    Lexema = Lexema + caracter;
                } else if (caracter == '>') {
                    estado = 4;
                    Lexema = Lexema + caracter;
                } else if (caracter == '+') {
                    Lexema = Lexema + caracter;
                    return new Token(Token.OPSUMA, Lexema, buf.getNumeroLinea());
                } else if (caracter == '-') {
                    Lexema = Lexema + caracter;
                    // return new Token(Token.OPRESTA, Lexema, buf.getNumeroLinea());
                    return new Token(Token.OPSUMA, Lexema, buf.getNumeroLinea());
                } else if (caracter == '*') {
                    // verifico si es el cierre de un comentario
                    estado = 8;
                    Lexema = Lexema + caracter;
                } else if (caracter == '{') {
                    estado = 11;
                    lineadeApertura = buf.getNumeroLinea();
                    caracter = buf.getChar();
                } else if (caracter == '}') {
                    Errores = true;
                    throw new ExcepcionComentarioCerrado(Integer.toString(buf.getNumeroLinea()));
                } else if (caracter == '[') {
                    Lexema = Lexema + caracter;
                    return new Token(Token.CORABRE, Lexema, buf.getNumeroLinea());
                } else if (caracter == ']') {
                    Lexema = Lexema + caracter;
                    return new Token(Token.CORCIERRA, Lexema, buf.getNumeroLinea());
                } else if (caracter == '(') {
                    // verifico si es la apertura de un comentario
                    estado = 5;
                    Lexema = Lexema + caracter;
                    caracter = buf.getChar();
                    break;
                } else if (caracter == ')') {
                    Lexema = Lexema + caracter;
                    return new Token(Token.PARCIERRA, Lexema, buf.getNumeroLinea());
                } else if (caracter == ',') {
                    Lexema = Lexema + caracter;
                    return new Token(Token.COMA, Lexema, buf.getNumeroLinea());
                } else if (caracter == ':') {
                    estado = 9;
                    Lexema = Lexema + caracter;
                } else if (caracter == '.') {
                    estado = 10;
                    Lexema = Lexema + caracter;
                } else if (caracter == ';') {
                    Lexema = Lexema + caracter;
                    return new Token(Token.PUNTOCOMA, Lexema, buf.getNumeroLinea());
                } else if (caracter == '=') {
                    Lexema = Lexema + caracter;
                    return new Token(Token.OPIGUAL, Lexema, buf.getNumeroLinea());
                } else if (Character.isWhitespace(caracter)) {
                    caracter = buf.getChar();
                    break;
                } else {
                    Errores = true;
                    throw new ExcepcionCaracterInvalido(Integer.toString(buf.getNumeroLinea()));
                }
                caracter = buf.getChar();
                break;
            case 1:
                /* es identificador o palabra reservada*/
                if (Character.isLetterOrDigit(caracter)) {
                    Lexema = Lexema + caracter;
                    caracter = buf.getChar();
                } else {
                    buf.retroceder();
                    numToken = esReservada(Lexema);
                    return new Token(numToken, Lexema, buf.getNumeroLinea());
                }
                break;
            // es un numero
            case 2:
                if (Character.isDigit(caracter)) {
                    Lexema = Lexema + caracter;
                    caracter = buf.getChar();
                } else if (Character.isLetter(caracter)) {
                    Errores = true;
                    throw new ExcepcionIdentificadorInvalido(Integer.toString(buf.getNumeroLinea()));
                } else {
                    buf.retroceder();
                    return new Token(Token.NUMERO, Lexema, buf.getNumeroLinea());
                }
                break;
            // simbolo anterior leido <
            case 3:
                if (caracter == '>') {
                    Lexema = Lexema + caracter;
                    caracter = buf.getChar();
                    numToken = Token.OPDIST;
                } else if (caracter == '=') {
                    Lexema = Lexema + caracter;
                    caracter = buf.getChar();
                    numToken = Token.OPMENORIG;
                } else {
                    numToken = Token.OPMENOR;
                }
                buf.retroceder();
                return new Token(numToken, Lexema, buf.getNumeroLinea());
            // simbolo anterior leido >
            case 4:
                if (caracter == '=') {
                    Lexema = Lexema + caracter;
                    caracter = buf.getChar();
                    numToken = Token.OPMAYORIG;
                } else {
                    numToken = Token.OPMAYOR;
                }
                buf.retroceder();
                return new Token(numToken, Lexema, buf.getNumeroLinea());
            // Apertura de comentario (*
            case 5:
                if (caracter == '*') {
                    lineadeApertura = buf.getNumeroLinea();
                    caracter = buf.getChar();
                    LineaDeInicioDeComentario = buf.getNumeroLinea();
                    estado = 6;
                } else {
                    buf.retroceder();
                    return new Token(Token.PARABRE, Lexema, buf.getNumeroLinea());
                }
            // codigo para saltear comentario;
            case 6:
                if (caracter == '*') {
                    caracter = buf.getChar();
                    estado = 7;
                } else if (caracter == EOF) {
                    estado = 99;
                } else {
                    caracter = buf.getChar();
                    break;
                }
            /*pueder ser cierre de comentario*/
            case 7:
                if (caracter == ')') {
                    caracter = buf.getChar();
                    estado = 0;
                    Lexema = new String();
                } else if (caracter == '*') {
                    caracter = buf.getChar();
                } else if (caracter == EOF) {
                    estado = 99;
                } else {
                    caracter = buf.getChar();
                    estado = 6;
                }
                break;
            // Cierre de comentario *)
            case 8:
                if (caracter == ')') {
                    Errores = true;
                    throw new ExcepcionComentarioCerrado(Integer.toString(buf.getNumeroLinea()));
                } else {
                    buf.retroceder();
                    return new Token(Token.OPMULT, Lexema, buf.getNumeroLinea());
                }
            // Asignacion := (el caracter anterior es un :
            case 9:
                if (caracter == '=') {
                    Lexema = Lexema + caracter;
                    caracter = buf.getChar();
                    numToken = Token.OPASIGN;
                } else {
                    numToken = Token.DOSPUNTOS;
                }
                buf.retroceder();
                return new Token(numToken, Lexema, buf.getNumeroLinea());
            // Subrango .. (el caracter anterior es un .
            case 10:
                if (caracter == '.') {
                    Lexema = Lexema + caracter;
                    caracter = buf.getChar();
                    numToken = Token.PUNTOPUNTO;
                } else {
                    numToken = Token.PUNTO;
                }
                buf.retroceder();
                return new Token(numToken, Lexema, buf.getNumeroLinea());
            // consumo el comentario
            case 11:
                if (caracter == '}') {
                    caracter = buf.getChar();
                    estado = 0;
                    break;
                } else if (caracter == EOF) {
                    Errores = true;
                    throw new ExcepcionComentarioSinCerrar(Integer.toString(lineadeApertura));
                } else {
                    caracter = buf.getChar();
                    break;
                }
            case 99:
                Errores = true;
                throw new ExcepcionComentarioSinCerrar(Integer.toString(lineadeApertura));
        }
    /*end SWITCH*/
    }
    throw new ExcepcionComentarioSinCerrar(Integer.toString(lineadeApertura));
}
