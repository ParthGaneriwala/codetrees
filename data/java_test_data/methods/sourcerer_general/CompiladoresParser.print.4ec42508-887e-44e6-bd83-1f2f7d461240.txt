// $ANTLR start "print"
public final CompiladoresParser.print_return print() throws RecognitionException {
    CompiladoresParser.print_return retval = new CompiladoresParser.print_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token PRINT104 = null;
    CompiladoresParser.list_expression_return list_expression105 = null;
    CommonTree PRINT104_tree = null;
    try {
        dbg.enterRule(getGrammarFileName(), "print");
        if (getRuleLevel() == 0) {
            dbg.commence();
        }
        incRuleLevel();
        dbg.location(152, 1);
        try {
            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:152:8: ( PRINT list_expression )
            dbg.enterAlt(1);
            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:152:10: PRINT list_expression
            {
                root_0 = (CommonTree) adaptor.nil();
                dbg.location(152, 15);
                PRINT104 = (Token) match(input, PRINT, FOLLOW_PRINT_in_print1224);
                PRINT104_tree = (CommonTree) adaptor.create(PRINT104);
                root_0 = (CommonTree) adaptor.becomeRoot(PRINT104_tree, root_0);
                dbg.location(152, 17);
                pushFollow(FOLLOW_list_expression_in_print1227);
                list_expression105 = list_expression();
                state._fsp--;
                adaptor.addChild(root_0, list_expression105.getTree());
            }
            retval.stop = input.LT(-1);
            retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
        }
        dbg.location(152, 32);
    } finally {
        dbg.exitRule(getGrammarFileName(), "print");
        decRuleLevel();
        if (getRuleLevel() == 0) {
            dbg.terminate();
        }
    }
    return retval;
}
