public Token nextToken() throws IOException {
    tokenLine = currentLine;
    tokenColumn = currentColumn;
    if (currentToken != null && currentToken.getTokenType() != COMMENT && currentToken.getTokenType() != WHITE_SPACE) {
        lastNonWhiteSpaceToken = currentToken;
    }
    if (currentToken == null || currentToken.getTokenType() != EOF) {
        if (Character.isWhitespace(lastChar)) {
            buffer.setLength(0);
            do {
                buffer.append(lastChar);
                try {
                    readNextChar();
                } catch (EOFException e) {
                    currentToken = Token.EOF_TOKEN;
                    return new Token(WHITE_SPACE, buffer.toString());
                }
            } while (Character.isWhitespace(lastChar));
            currentToken = new Token(WHITE_SPACE, buffer.toString());
        } else if (lastChar == '/') {
            // It may be the start of a comment
            try {
                readNextChar();
            } catch (EOFException e) {
                currentToken = Token.EOF_TOKEN;
                return new Token(ERROR, "/ unexpected at line " + currentLine + ", column " + currentColumn);
            }
            if (lastChar == '/') {
                // we're in a single-line comment
                buffer.setLength(0);
                buffer.append('/');
                do {
                    buffer.append(lastChar);
                    try {
                        readNextChar();
                    } catch (EOFException e) {
                        currentToken = Token.EOF_TOKEN;
                        return new Token(COMMENT, buffer.toString());
                    }
                } while (lastChar != '\n');
                currentToken = new Token(COMMENT, buffer.toString());
            } else if (lastChar == '*') {
                // We're in a multiline comment.
                buffer.setLength(0);
                buffer.append('/');
                boolean endComment = false;
                do {
                    buffer.append(lastChar);
                    try {
                        readNextChar();
                        if (lastChar == '*') {
                            buffer.append(lastChar);
                        }
                    } catch (EOFException e) {
                        currentToken = Token.EOF_TOKEN;
                        return new Token(COMMENT, buffer.toString());
                    }
                    while (lastChar == '*') {
                        // It may be the end...
                        try {
                            readNextChar();
                            if (lastChar == '*') {
                                buffer.append(lastChar);
                            } else if (lastChar == '/') {
                                // It's the end
                                buffer.append(lastChar);
                                endComment = true;
                            }
                        } catch (EOFException e) {
                            currentToken = Token.EOF_TOKEN;
                            return new Token(ERROR, "Unclosed comments at line" + currentLine + ", column " + currentColumn);
                        }
                    }
                } while (!endComment);
                try {
                    readNextChar();
                } catch (EOFException e) {
                    currentToken = Token.EOF_TOKEN;
                    return new Token(COMMENT, buffer.toString());
                }
                currentToken = new Token(COMMENT, buffer.toString());
            } else {
                // It's not a comment, it's something else
                currentToken = new Token(NONE_ABOVE, "/");
            }
        } else if (lastChar == '{') {
            currentToken = new Token(OPEN_CURLY_BRACKET, "{");
            try {
                readNextChar();
            } catch (EOFException e) {
                currentToken = Token.EOF_TOKEN;
                return new Token(OPEN_CURLY_BRACKET, "{");
            }
        } else if (lastChar == '}') {
            currentToken = new Token(CLOSE_CURLY_BRACKET, "}");
            try {
                readNextChar();
            } catch (EOFException e) {
                currentToken = Token.EOF_TOKEN;
                return new Token(CLOSE_CURLY_BRACKET, "}");
            }
        } else if (lastChar == ';') {
            currentToken = new Token(SEMICOLON, ";");
            try {
                readNextChar();
            } catch (EOFException e) {
                currentToken = Token.EOF_TOKEN;
                return new Token(SEMICOLON, ";");
            }
        } else if (lastChar == ',') {
            currentToken = new Token(COMMA, ",");
            try {
                readNextChar();
            } catch (EOFException e) {
                currentToken = Token.EOF_TOKEN;
                return new Token(COMMA, ",");
            }
        } else if (lastChar == '=') {
            currentToken = new Token(EQUALS, "=");
            try {
                readNextChar();
            } catch (EOFException e) {
                currentToken = Token.EOF_TOKEN;
                return new Token(EQUALS, "=");
            }
        } else if (lastChar == '.') {
            currentToken = new Token(DOT, ".");
            try {
                readNextChar();
            } catch (EOFException e) {
                currentToken = Token.EOF_TOKEN;
                return new Token(DOT, ".");
            }
        } else if (lastChar == '*') {
            currentToken = new Token(ASTERISK, "*");
            try {
                readNextChar();
            } catch (EOFException e) {
                currentToken = Token.EOF_TOKEN;
                return new Token(ASTERISK, "*");
            }
        } else if (Character.isJavaIdentifierStart(lastChar)) {
            buffer.setLength(0);
            do {
                buffer.append(lastChar);
                try {
                    readNextChar();
                } catch (EOFException e) {
                    currentToken = Token.EOF_TOKEN;
                    return idOrReserved(buffer.toString());
                }
            } while (Character.isJavaIdentifierPart(lastChar));
            currentToken = idOrReserved(buffer.toString());
        } else if (lastChar == '\"') {
            // it's a string
            buffer.setLength(0);
            boolean endString = false;
            boolean ignoreNext = false;
            do {
                buffer.append(lastChar);
                try {
                    readNextChar();
                    if (lastChar == '\n') {
                        currentToken = Token.EOF_TOKEN;
                        return new Token(ERROR, "String not terminated at end of line.");
                    }
                    if (!ignoreNext) {
                        if (lastChar == '\\') {
                            ignoreNext = true;
                        } else if (lastChar == '\"') {
                            endString = true;
                        }
                    } else {
                        ignoreNext = false;
                    }
                } catch (EOFException e) {
                    currentToken = Token.EOF_TOKEN;
                    return new Token(ERROR, "String not terminated at end of input");
                }
            } while (!endString);
            buffer.append(lastChar);
            try {
                readNextChar();
            } catch (EOFException e) {
                currentToken = Token.EOF_TOKEN;
                return new Token(STRING, buffer.toString());
            }
            currentToken = new Token(STRING, buffer.toString());
        } else {
            // It's none of the above...
            buffer.setLength(0);
            do {
                buffer.append(lastChar);
                try {
                    readNextChar();
                } catch (EOFException e) {
                    currentToken = Token.EOF_TOKEN;
                    return new Token(NONE_ABOVE, buffer.toString());
                }
            } while (!Character.isWhitespace(lastChar) && !Character.isJavaIdentifierStart(lastChar) && lastChar != '{' && lastChar != '}' && lastChar != '\"' && lastChar != '/' && lastChar != ',' && lastChar != '=' && lastChar != '.' && lastChar != '*' && lastChar != ';');
            currentToken = new Token(NONE_ABOVE, buffer.toString());
        }
    }
    return currentToken;
}
