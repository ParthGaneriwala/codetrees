public void paint(Graphics g, JComponent c) {
    AbstractButton b = (AbstractButton) c;
    ButtonModel model = b.getModel();
    FontMetrics fm = g.getFontMetrics();
    Insets i = c.getInsets();
    viewRect.x = i.left;
    viewRect.y = i.top;
    viewRect.width = b.getWidth() - (i.right + viewRect.x);
    viewRect.height = b.getHeight() - (i.bottom + viewRect.y);
    textRect.x = textRect.y = textRect.width = textRect.height = 0;
    iconRect.x = iconRect.y = iconRect.width = iconRect.height = 0;
    Font f = c.getFont();
    g.setFont(f);
    // layout the text and icon
    String text = SwingUtilities.layoutCompoundLabel(c, fm, b.getText(), b.getIcon(), b.getVerticalAlignment(), b.getHorizontalAlignment(), b.getVerticalTextPosition(), b.getHorizontalTextPosition(), viewRect, iconRect, textRect, b.getText() == null ? 0 : b.getIconTextGap());
    clearTextShiftOffset();
    // perform UI specific press action, e.g. Windows L&F shifts text
    if (model.isArmed() && model.isPressed()) {
        paintButtonPressed(g, b);
    }
    // Paint the Icon
    if (b.getIcon() != null) {
        paintIcon(g, c, iconRect);
    }
    Composite oldComposite = ((Graphics2D) g).getComposite();
    if (model.isRollover()) {
        ((Graphics2D) g).setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.5f));
    }
    if (text != null && !text.equals("")) {
        View v = (View) c.getClientProperty(BasicHTML.propertyKey);
        if (v != null) {
            textRect.x += getTextShiftOffset();
            textRect.y += getTextShiftOffset();
            v.paint(g, textRect);
            textRect.x -= getTextShiftOffset();
            textRect.y -= getTextShiftOffset();
        } else {
            paintText(g, b, textRect, text);
        }
    }
    if (b.isFocusPainted() && b.hasFocus()) {
        // paint UI specific focus
        paintFocus(g, b, viewRect, textRect, iconRect);
    }
    ((Graphics2D) g).setComposite(oldComposite);
}
