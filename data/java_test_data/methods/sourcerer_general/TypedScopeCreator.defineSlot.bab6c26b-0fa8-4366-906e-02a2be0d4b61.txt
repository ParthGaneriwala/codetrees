void defineSlot(Node n, Node parent, String variableName, JSType type, boolean inferred) {
    Preconditions.checkArgument(!variableName.isEmpty());
    boolean isGlobalVar = n.getType() == Token.NAME && scope.isGlobal();
    boolean shouldDeclareOnGlobalThis = isGlobalVar && (parent.getType() == Token.VAR || parent.getType() == Token.FUNCTION);
    // If n is a property, then we should really declare it in the
    // scope where the root object appears. This helps out people
    // who declare "global" names in an anonymous namespace.
    Scope scopeToDeclareIn = scope;
    if (n.getType() == Token.GETPROP && !scope.isGlobal() && isQnameRootedInGlobalScope(n)) {
        Scope globalScope = scope.getGlobalScope();
        // already a symbol there with this name.
        if (!globalScope.isDeclared(variableName, false)) {
            scopeToDeclareIn = scope.getGlobalScope();
        }
    }
    // declared in closest scope?
    if (scopeToDeclareIn.isDeclared(variableName, false)) {
        Var oldVar = scopeToDeclareIn.getVar(variableName);
        validator.expectUndeclaredVariable(sourceName, n, parent, oldVar, variableName, type);
    } else {
        if (!inferred) {
            setDeferredType(n, type);
        }
        CompilerInput input = compiler.getInput(inputId);
        // The input may be null if we are working with a AST snippet.
        boolean isExtern = n.isFromExterns();
        Var newVar = scopeToDeclareIn.declare(variableName, n, type, input, inferred);
        if (type instanceof EnumType) {
            Node initialValue = newVar.getInitialValue();
            boolean isValidValue = initialValue != null && (initialValue.getType() == Token.OBJECTLIT || initialValue.isQualifiedName());
            if (!isValidValue) {
                compiler.report(JSError.make(sourceName, n, ENUM_INITIALIZER));
            }
        }
        // We need to do some additional work for constructors and interfaces.
        FunctionType fnType = JSType.toMaybeFunctionType(type);
        if (fnType != null && // We don't want to look at empty function types.
        !type.isEmptyType()) {
            if ((fnType.isConstructor() || fnType.isInterface()) && !fnType.equals(getNativeType(U2U_CONSTRUCTOR_TYPE))) {
                // Declare var.prototype in the scope chain.
                FunctionType superClassCtor = fnType.getSuperClassConstructor();
                scopeToDeclareIn.declare(variableName + ".prototype", n, fnType.getPrototype(), input, /* declared iff there's an explicit supertype */
                superClassCtor == null || superClassCtor.getInstanceType().equals(getNativeType(OBJECT_TYPE)));
                // it constructs itself.
                if (newVar.getInitialValue() == null && !isExtern && // this.
                variableName.equals(fnType.getInstanceType().getReferenceName())) {
                    compiler.report(JSError.make(sourceName, n, fnType.isConstructor() ? CTOR_INITIALIZER : IFACE_INITIALIZER, variableName));
                }
            }
        }
    }
    if (shouldDeclareOnGlobalThis) {
        ObjectType globalThis = typeRegistry.getNativeObjectType(GLOBAL_THIS);
        if (inferred) {
            globalThis.defineInferredProperty(variableName, type == null ? getNativeType(JSTypeNative.NO_TYPE) : type, n);
        } else {
            globalThis.defineDeclaredProperty(variableName, type, n);
        }
    }
    if (isGlobalVar && "Window".equals(variableName) && type != null && type.isFunctionType() && type.isConstructor()) {
        FunctionType globalThisCtor = typeRegistry.getNativeObjectType(GLOBAL_THIS).getConstructor();
        globalThisCtor.getInstanceType().clearCachedValues();
        globalThisCtor.getPrototype().clearCachedValues();
        globalThisCtor.setPrototypeBasedOn((type.toMaybeFunctionType()).getInstanceType());
    }
}
