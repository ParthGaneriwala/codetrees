// $ANTLR start "input"
public final Compila_doresParser.input_return input() throws RecognitionException {
    Compila_doresParser.input_return retval = new Compila_doresParser.input_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token INPUT110 = null;
    Compila_doresParser.list_id_return list_id111 = null;
    CommonTree INPUT110_tree = null;
    try {
        // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:186:2: ( ( INPUT list_id ) )
        // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:186:4: ( INPUT list_id )
        {
            root_0 = (CommonTree) adaptor.nil();
            // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:186:4: ( INPUT list_id )
            // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:186:5: INPUT list_id
            {
                INPUT110 = (Token) match(input, INPUT, FOLLOW_INPUT_in_input1291);
                INPUT110_tree = (CommonTree) adaptor.create(INPUT110);
                root_0 = (CommonTree) adaptor.becomeRoot(INPUT110_tree, root_0);
                pushFollow(FOLLOW_list_id_in_input1294);
                list_id111 = list_id();
                state._fsp--;
                adaptor.addChild(root_0, list_id111.getTree());
            }
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
