final void printRequest(int cid, Result r) {
    if (isSilent()) {
        return;
    }
    StringBuffer sb = new StringBuffer();
    sb.append(cid);
    sb.append(':');
    switch(r.mode) {
        case ResultConstants.SQLPREPARE:
            {
                sb.append("SQLCLI:SQLPREPARE ");
                sb.append(r.getMainString());
                break;
            }
        case ResultConstants.SQLEXECDIRECT:
            {
                if (r.getSize() < 2) {
                    sb.append(r.getMainString());
                } else {
                    sb.append("SQLCLI:SQLEXECDIRECT:BATCHMODE\n");
                    Iterator it = r.iterator();
                    while (it.hasNext()) {
                        Object[] data = (Object[]) it.next();
                        sb.append(data[0]).append('\n');
                    }
                }
                break;
            }
        case ResultConstants.SQLEXECUTE:
            {
                sb.append("SQLCLI:SQLEXECUTE:");
                if (r.getSize() > 1) {
                    sb.append("BATCHMODE:");
                }
                sb.append(r.getStatementID());
                /*
                if (r.getSize() == 1) {
                    sb.append('\n');
                    StringUtil.appendStringValueOf(r.getParameterData(), sb, true);
                }
*/
                break;
            }
        case ResultConstants.SQLFREESTMT:
            {
                sb.append("SQLCLI:SQLFREESTMT:");
                sb.append(r.getStatementID());
                break;
            }
        case ResultConstants.GETSESSIONATTR:
            {
                sb.append("HSQLCLI:GETSESSIONATTR");
                break;
            }
        case ResultConstants.SETSESSIONATTR:
            {
                sb.append("HSQLCLI:SETSESSIONATTR:");
                sb.append("AUTOCOMMIT ");
                sb.append(r.rRoot.data[Session.INFO_AUTOCOMMIT]);
                sb.append(" CONNECTION_READONLY ");
                sb.append(r.rRoot.data[Session.INFO_CONNECTION_READONLY]);
                break;
            }
        case ResultConstants.SQLENDTRAN:
            {
                sb.append("SQLCLI:SQLENDTRAN:");
                switch(r.getEndTranType()) {
                    case ResultConstants.COMMIT:
                        sb.append("COMMIT");
                        break;
                    case ResultConstants.ROLLBACK:
                        sb.append("ROLLBACK");
                        break;
                    case ResultConstants.SAVEPOINT_NAME_RELEASE:
                        sb.append("SAVEPOINT_NAME_RELEASE ");
                        sb.append(r.getMainString());
                        break;
                    case ResultConstants.SAVEPOINT_NAME_ROLLBACK:
                        sb.append("SAVEPOINT_NAME_ROLLBACK ");
                        sb.append(r.getMainString());
                        break;
                    default:
                        sb.append(r.getEndTranType());
                }
                break;
            }
        case ResultConstants.SQLSTARTTRAN:
            {
                sb.append("SQLCLI:SQLSTARTTRAN");
                break;
            }
        case ResultConstants.SQLDISCONNECT:
            {
                sb.append("SQLCLI:SQLDISCONNECT");
                break;
            }
        case ResultConstants.SQLSETCONNECTATTR:
            {
                sb.append("SQLCLI:SQLSETCONNECTATTR:");
                switch(r.getConnectionAttrType()) {
                    case ResultConstants.SQL_ATTR_SAVEPOINT_NAME:
                        {
                            sb.append("SQL_ATTR_SAVEPOINT_NAME ");
                            sb.append(r.getMainString());
                            break;
                        }
                    default:
                        {
                            sb.append(r.getConnectionAttrType());
                        }
                }
                break;
            }
        default:
            {
                sb.append("SQLCLI:MODE:");
                sb.append(r.mode);
                break;
            }
    }
    print(sb.toString());
}
