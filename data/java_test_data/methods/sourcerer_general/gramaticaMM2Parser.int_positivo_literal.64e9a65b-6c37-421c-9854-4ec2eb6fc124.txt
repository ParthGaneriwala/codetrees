// $ANTLR start "int_positivo_literal"
public final gramaticaMM2Parser.int_positivo_literal_return int_positivo_literal() throws RecognitionException {
    gramaticaMM2Parser.int_positivo_literal_return retval = new gramaticaMM2Parser.int_positivo_literal_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token DIGIT203 = null;
    Token set204 = null;
    CommonTree DIGIT203_tree = null;
    CommonTree set204_tree = null;
    try {
        // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:176:22: ( DIGIT ( DIGIT | DIGIT_NULL )* )
        // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:176:25: DIGIT ( DIGIT | DIGIT_NULL )*
        {
            root_0 = (CommonTree) adaptor.nil();
            DIGIT203 = (Token) match(input, DIGIT, FOLLOW_DIGIT_in_int_positivo_literal1960);
            DIGIT203_tree = (CommonTree) adaptor.create(DIGIT203);
            adaptor.addChild(root_0, DIGIT203_tree);
            // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:176:30: ( DIGIT | DIGIT_NULL )*
            loop40: do {
                int alt40 = 2;
                int LA40_0 = input.LA(1);
                if ((LA40_0 == DIGIT_NULL || LA40_0 == DIGIT)) {
                    alt40 = 1;
                }
                switch(alt40) {
                    case 1:
                        // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:
                        {
                            set204 = (Token) input.LT(1);
                            if (input.LA(1) == DIGIT_NULL || input.LA(1) == DIGIT) {
                                input.consume();
                                adaptor.addChild(root_0, (CommonTree) adaptor.create(set204));
                                state.errorRecovery = false;
                            } else {
                                MismatchedSetException mse = new MismatchedSetException(null, input);
                                throw mse;
                            }
                        }
                        break;
                    default:
                        break loop40;
                }
            } while (true);
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
