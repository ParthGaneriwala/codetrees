public static ArrayList<int[]> getAllowedMoves(ChessBoard b, int x, int y) {
    ArrayList<int[]> list = new ArrayList<int[]>();
    int type = b.getType(x, y);
    int color = b.getColor(x, y);
    int oponentColor = (color == WHITE ? BLACK : WHITE);
    switch(type) {
        case PAWN:
            int step = (color == WHITE) ? -1 : 1;
            int y1 = y + step;
            int y2 = y + 2 * step;
            if (b.getColor(x, y1) == EMPTY) {
                addValid(b, x, y, list, x, y1);
                if (!b.hasMoved(x, y) && b.getColor(x, y2) == EMPTY) {
                    addValid(b, x, y, list, x, y2);
                }
            }
            if (x < 7 && b.getColor(x + 1, y1) == oponentColor) {
                addValid(b, x, y, list, x + 1, y1);
            }
            if (x > 0 && b.getColor(x - 1, y1) == oponentColor) {
                addValid(b, x, y, list, x - 1, y1);
            }
            // En passant
            int enPassantY = (color == WHITE) ? 3 : 4;
            if (y == enPassantY) {
                ChessMove lastMove = b.moveHistory.getLast();
                if (lastMove.fromPiece % 100 == PAWN * 10 + oponentColor && lastMove.toY == enPassantY && Math.abs(lastMove.fromY - lastMove.toY) > 1) {
                    if (lastMove.toX == x - 1) {
                        addValid(b, x, y, list, x - 1, y1);
                    } else if (lastMove.toX == x + 1) {
                        addValid(b, x, y, list, x + 1, y1);
                    }
                }
            }
            break;
        case QUEEN:
            addValidUntilBlocked(b, x, y, list, 0, 1);
            addValidUntilBlocked(b, x, y, list, 0, -1);
            addValidUntilBlocked(b, x, y, list, 1, 0);
            addValidUntilBlocked(b, x, y, list, -1, 0);
            addValidUntilBlocked(b, x, y, list, 1, 1);
            addValidUntilBlocked(b, x, y, list, 1, -1);
            addValidUntilBlocked(b, x, y, list, -1, 1);
            addValidUntilBlocked(b, x, y, list, -1, -1);
            break;
        case ROOK:
            addValidUntilBlocked(b, x, y, list, 0, 1);
            addValidUntilBlocked(b, x, y, list, 0, -1);
            addValidUntilBlocked(b, x, y, list, 1, 0);
            addValidUntilBlocked(b, x, y, list, -1, 0);
            break;
        case KNIGHT:
            for (int[] d : knightMovesDelta) {
                // System.out.println("(" + d[0] + "," + d[1] + ")");
                addValid(b, x, y, list, x + d[0], y + d[1]);
            }
            break;
        case BISHOP:
            // 4 diagonales, cas d'arrêt :
            // pièce adversaire avec case autorisée
            // pièce de ma couleur avec case autorisée
            // sortie de grid
            addValidUntilBlocked(b, x, y, list, 1, 1);
            addValidUntilBlocked(b, x, y, list, 1, -1);
            addValidUntilBlocked(b, x, y, list, -1, 1);
            addValidUntilBlocked(b, x, y, list, -1, -1);
            break;
        case KING:
            addValid(b, x, y, list, x + 1, y);
            addValid(b, x, y, list, x + 1, y + 1);
            addValid(b, x, y, list, x + 1, y - 1);
            addValid(b, x, y, list, x, y + 1);
            addValid(b, x, y, list, x, y - 1);
            addValid(b, x, y, list, x - 1, y + 1);
            addValid(b, x, y, list, x - 1, y - 1);
            addValid(b, x, y, list, x - 1, y);
            // T0,1,2,3,R4,5,6,T7
            if (!b.hasMoved(x, y)) {
                if (b.getPiece(1, y) == EMPTY && b.getPiece(2, y) == EMPTY && b.getPiece(3, y) == EMPTY && b.getPiece(0, y) == ROOK * 10 + color && !isChessAfterMove(b, x, y, x - 1, y)) {
                    // grand roc
                    addValid(b, x, y, list, x - 2, y);
                }
                if (b.getPiece(5, y) == EMPTY && b.getPiece(6, y) == EMPTY && b.getPiece(7, y) == (ROOK * 10 + color) && !isChessAfterMove(b, x, y, x + 1, y)) {
                    // petit roc
                    addValid(b, x, y, list, x + 2, y);
                }
            }
            break;
    }
    return list;
}
