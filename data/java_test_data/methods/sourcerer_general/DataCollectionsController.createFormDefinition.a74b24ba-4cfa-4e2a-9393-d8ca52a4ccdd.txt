@RequestMapping(value = DATA_INFO_BASE, method = RequestMethod.POST)
public String createFormDefinition(@RequestParam("plansJson") String plansJson, @RequestParam("typesJson") String typesJson, @RequestParam("name") String name, @RequestParam("description") String desc, @RequestParam(value = "lat", required = false) String lat, @RequestParam(value = "lon", required = false) String lon, @RequestParam(value = "maxDist", required = false) String maxDist, Model model) {
    try {
        DataCollectionInfo info = new DataCollectionInfo();
        info.setName(name);
        info.setDescription(desc);
        info.setCollectionPlans(new JSONArray(plansJson));
        info.setTypes(new JSONObject(typesJson));
        UserService us = UserServiceFactory.getUserService();
        com.google.appengine.api.users.User currentUser = us.getCurrentUser();
        if (currentUser != null)
            info.setUser(currentUser);
        if (lat != null && lon != null) {
            try {
                double latitude = Double.parseDouble(lat);
                double longitude = Double.parseDouble(lon);
                info.setLocation(latitude, longitude);
            } catch (NumberFormatException nfe) {
                log.info("Unable to parse lat/lon from " + lat + " , " + lon);
            }
        }
        if (maxDist != null) {
            try {
                double max = Double.parseDouble(maxDist);
                info.setMaxDistance(max);
                info.setLocationPolicy(DataCollectionInfo.IN_RANGE);
            } catch (NumberFormatException nfe) {
                log.info("Unable to parse max dist from " + maxDist);
                info.setLocationPolicy(DataCollectionInfo.ANYWHERE);
            }
        }
        info.save();
        model.addAttribute("collectionRoot", info.toJson());
    } catch (Exception e) {
        e.printStackTrace();
        model.addAttribute("collectionRoot", "null");
    }
    return "plainTextView";
}
