/*
    public RegionManager getRegionManager() {
        return regionManager;
    }

    public void setRegionManager(RegionManager regionManager) {
        this.regionManager = regionManager;
    }


    public ClubManager getClubManager() {
        return clubManager;
    }

    public void setClubManager(ClubManager clubManager) {
        this.clubManager = clubManager;
    }
*/
// ====================================== Helper Method (some used for testing) ====================================
private Collection<Turn> buildAllTurns(Date dateForReservation, Club club, Collection reservedTurns) {
    Collection<Turn> turns = new ArrayList();
    Calendar turnCalendar = Calendar.getInstance();
    turnCalendar.setTimeInMillis(club.getOpeningTime().getTime());
    Calendar currentDateCalendar = Calendar.getInstance();
    currentDateCalendar.setTime(dateForReservation);
    currentDateCalendar.set(Calendar.HOUR_OF_DAY, turnCalendar.get(Calendar.HOUR_OF_DAY));
    currentDateCalendar.set(Calendar.MINUTE, turnCalendar.get(Calendar.MINUTE));
    currentDateCalendar.set(Calendar.SECOND, turnCalendar.get(Calendar.SECOND));
    currentDateCalendar.set(Calendar.MILLISECOND, turnCalendar.get(Calendar.MILLISECOND));
    turnCalendar.setTimeInMillis(club.getClosingTime().getTime());
    Calendar closingDateCalendar = Calendar.getInstance();
    closingDateCalendar.setTime(dateForReservation);
    closingDateCalendar.set(Calendar.HOUR_OF_DAY, turnCalendar.get(Calendar.HOUR_OF_DAY));
    closingDateCalendar.set(Calendar.MINUTE, turnCalendar.get(Calendar.MINUTE));
    closingDateCalendar.set(Calendar.SECOND, turnCalendar.get(Calendar.SECOND));
    closingDateCalendar.set(Calendar.MILLISECOND, turnCalendar.get(Calendar.MILLISECOND));
    System.out.println("currentDateCalendar = " + currentDateCalendar.getTime());
    System.out.println("closingDateCalendar = " + closingDateCalendar.getTime());
    while (currentDateCalendar.getTimeInMillis() <= closingDateCalendar.getTimeInMillis()) {
        Turn turnAvailable = new Turn();
        turnAvailable.setStartDate(new Timestamp(currentDateCalendar.getTimeInMillis()));
        currentDateCalendar.add(Calendar.HOUR_OF_DAY, 1);
        turnAvailable.setEndDate(new Timestamp(currentDateCalendar.getTimeInMillis()));
        turnAvailable.setAvailable(Boolean.TRUE);
        System.out.println("turnAvailable getStartDate()=" + turnAvailable.getStartDate() + ", getTime() = " + turnAvailable.getStartDate().getTime());
        for (Iterator<Turn> iterator = reservedTurns.iterator(); iterator.hasNext(); ) {
            Turn turn1 = iterator.next();
            System.out.println("turn1.getStartDate()" + turn1.getStartDate() + ", getStartDate().getTime() = " + turn1.getStartDate().getTime());
            if (turnAvailable.getStartDate().getTime() == turn1.getStartDate().getTime()) {
                System.out.println("iguales ");
                turn1.setAvailable(Boolean.FALSE);
                turnAvailable = turn1;
                break;
            }
        }
        turns.add(turnAvailable);
    }
    for (Iterator<Turn> iterator = turns.iterator(); iterator.hasNext(); ) {
        Turn turn1 = iterator.next();
        System.out.println("turn1.getId()=" + turn1.getId() + ", turn1.getStartDate() = " + turn1.getStartDate() + ", turn1.getEndDate() =" + turn1.getEndDate());
    }
    return turns;
}
