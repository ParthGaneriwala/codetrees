private void updateCompareRuleConstraintNode(CompareRuleConstraintNode node) {
    FuzzyLogicBoolean a = new FuzzyLogicBoolean();
    FuzzyLogicBoolean b = new FuzzyLogicBoolean();
    switch(node.getAttributeToCheck()) {
        case ActivityStatusHandler.ACTIVE:
            {
                if (node.getTargetRuleA().isActive()) {
                    a.setTrue();
                } else {
                    a.setFalse();
                }
                if (node.getTargetRuleB().isActive()) {
                    b.setTrue();
                } else {
                    b.setFalse();
                }
                break;
            }
        case ActivityStatusHandler.DISPOSED:
            {
                if (node.getTargetRuleA().isDisposed()) {
                    a.setTrue();
                } else {
                    a.setFalse();
                }
                if (node.getTargetRuleB().isDisposed()) {
                    b.setTrue();
                } else {
                    b.setFalse();
                }
                break;
            }
        case ActivityStatusHandler.VALID:
            {
                a = node.getTargetRuleA().isActualValue();
                b = node.getTargetRuleB().isActualValue();
                break;
            }
    }
    FuzzyLogicBoolean value = new FuzzyLogicBoolean();
    switch(node.getCheckType()) {
        // EQUALS means that the remote rule value is equals to true
        case ConstraintNode.EQUALS:
            {
                if (a.isNotValid() || b.isNotValid()) {
                    value.isNotValid();
                } else if (a.equals(b)) {
                    value.setTrue();
                } else {
                    value.setFalse();
                }
                break;
            }
        // NOT_EQUALS means that the remote rule value is not equals to true
        case ConstraintNode.NOT_EQUALS:
            {
                if (a.isNotValid() || b.isNotValid()) {
                    value.isNotValid();
                } else if (!a.equals(b)) {
                    value.setTrue();
                } else {
                    value.setFalse();
                }
                break;
            }
        // LESSER means that the other action is not active or disposed or not existent
        case ConstraintNode.LESSER:
        case ConstraintNode.LESSER_EQUAL:
            {
                if (a.isNotValid() || b.isNotValid()) {
                    value.isNotValid();
                } else if (a.isFalse() && b.isTrue()) {
                    value.setTrue();
                } else {
                    value.setFalse();
                }
                break;
            }
        // GREATER means that the other action is active
        case ConstraintNode.GREATER:
        case ConstraintNode.GREATER_EQUAL:
            {
                if (a.isNotValid() || b.isNotValid()) {
                    value.isNotValid();
                } else if (a.isTrue() && b.isFalse()) {
                    value.setTrue();
                } else {
                    value.setFalse();
                }
                break;
            }
    }
    node.setActualValue(value);
}
