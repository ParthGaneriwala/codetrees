public void setJob(int jobId, HttpServletRequest request) throws Exception {
    if (root) {
        log.debug("setJob: is root");
        for (Name name : Name.values()) {
            permissions.put(name, EnumSet.allOf(Permission.class));
        }
        return;
    }
    ResultSet rs = null;
    ResultSet roles = null;
    Attributes attr = (Attributes) request.getSession().getAttribute("attr");
    Database db = new Database();
    rs = db.dbQuery("select * from job_permissions where job_id = " + jobId + " and user_id = " + attr.getUserId());
    permissions.clear();
    StringTokenizer st;
    Name name;
    EnumSet<Permission> per;
    while (rs.next()) {
        per = EnumSet.noneOf(Permission.class);
        name = Enum.valueOf(Name.class, rs.getString("name"));
        st = new StringTokenizer(rs.getString("val"), ",");
        while (st.hasMoreTokens()) {
            per.add(Enum.valueOf(Permission.class, st.nextToken()));
        }
        permissions.put(name, per);
    }
    roles = db.dbQuery("select role_name from roles");
    String roleName;
    while (roles.next()) {
        // Load permissions
        roleName = roles.getString(1);
        if (request.isUserInRole(roleName)) {
            log.debug("setJob: User has role: " + roleName);
            getDefaultPermissions(roleName);
        } else
            log.debug("setJob: User does NOT have role" + roleName);
    }
    // end while (roles.next())
    if (rs != null)
        rs.getStatement().close();
    rs = null;
    if (roles != null)
        roles.getStatement().close();
    roles = null;
    db.disconnect();
}
