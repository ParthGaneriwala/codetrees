public Component getListCellRendererComponent(JList list, // value to display
Object value, // cell index
int index, // is the cell selected
boolean isSelected, // the list and the cell have the focus
boolean cellHasFocus) {
    HistoryInfo info = (HistoryInfo) value;
    String topText = info.getDate() + " " + info.getRevision() + " " + info.getUser();
    String[] files = info.getFiles();
    String filesText = files[0];
    for (int i = 1; i < files.length; i++) {
        filesText += "\n" + files[i];
    }
    filesArea.setText(filesText);
    filesArea.invalidate();
    filesBox.invalidate();
    topLabel.setText(topText);
    String commentText = info.getComment();
    // commentArea.setText("");
    // commentArea.setLineWrap(false);
    // commentArea.setLineWrap(true);
    commentArea.setText(commentText);
    commentBox.invalidate();
    if (isSelected) {
        setBackground(list.getSelectionBackground());
        setForeground(list.getSelectionForeground());
        filesArea.setForeground(list.getSelectionForeground());
        filesArea.setBackground(list.getSelectionBackground());
        setOpaque(true);
    } else {
        setBackground(list.getBackground());
        setForeground(list.getForeground());
        filesArea.setForeground(list.getForeground());
        filesArea.setBackground(list.getBackground());
        setOpaque(false);
    }
    if (cellHasFocus) {
        setBorder(new LineBorder(list.getSelectionForeground(), 1));
    } else {
        setBorder(new EmptyBorder(1, 1, 1, 1));
    }
    setEnabled(list.isEnabled());
    setFont(list.getFont());
    if (container != null) {
        Rectangle bbounds = container.getViewportBorderBounds();
        int listWidth = bbounds.width;
        Insets containerInsets = container.getViewport().getInsets();
        listWidth -= containerInsets.left + containerInsets.right;
        listWidth -= spacerLabel.getPreferredSize().width;
        listWidth -= getInsets().left + getInsets().right;
        commentArea.setWrapWidth(listWidth);
        commentArea.invalidate();
    }
    // We need to validate to ensure that we have the correct preferred
    // size.
    invalidate();
    validate();
    // Inform the model of our desired height. If this has changed, the model
    // fires a "cell changed" event so that the list will detect the change.
    model.setCellHeight(index, this.getPreferredSize().height);
    this.index = index;
    // will then call setBounds to set a size.
    return this;
}
