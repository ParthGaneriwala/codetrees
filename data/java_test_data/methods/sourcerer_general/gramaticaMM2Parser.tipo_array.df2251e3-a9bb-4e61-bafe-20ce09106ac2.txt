// $ANTLR start "tipo_array"
public final gramaticaMM2Parser.tipo_array_return tipo_array() throws RecognitionException {
    gramaticaMM2Parser.tipo_array_return retval = new gramaticaMM2Parser.tipo_array_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token ARRAY45 = null;
    Token LEFT_BRACKET46 = null;
    Token DOT48 = null;
    Token DOT49 = null;
    Token RIGHT_BRACKET51 = null;
    Token OF52 = null;
    gramaticaMM2Parser.int_positivo_return int_positivo47 = null;
    gramaticaMM2Parser.int_positivo_return int_positivo50 = null;
    gramaticaMM2Parser.tipo_return tipo53 = null;
    CommonTree ARRAY45_tree = null;
    CommonTree LEFT_BRACKET46_tree = null;
    CommonTree DOT48_tree = null;
    CommonTree DOT49_tree = null;
    CommonTree RIGHT_BRACKET51_tree = null;
    CommonTree OF52_tree = null;
    RewriteRuleTokenStream stream_DOT = new RewriteRuleTokenStream(adaptor, "token DOT");
    RewriteRuleTokenStream stream_OF = new RewriteRuleTokenStream(adaptor, "token OF");
    RewriteRuleTokenStream stream_ARRAY = new RewriteRuleTokenStream(adaptor, "token ARRAY");
    RewriteRuleTokenStream stream_LEFT_BRACKET = new RewriteRuleTokenStream(adaptor, "token LEFT_BRACKET");
    RewriteRuleTokenStream stream_RIGHT_BRACKET = new RewriteRuleTokenStream(adaptor, "token RIGHT_BRACKET");
    RewriteRuleSubtreeStream stream_int_positivo = new RewriteRuleSubtreeStream(adaptor, "rule int_positivo");
    RewriteRuleSubtreeStream stream_tipo = new RewriteRuleSubtreeStream(adaptor, "rule tipo");
    try {
        // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:103:12: ( ARRAY LEFT_BRACKET int_positivo DOT DOT int_positivo RIGHT_BRACKET OF tipo -> ^( TIPO_ARRAY int_positivo int_positivo tipo ) )
        // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:103:14: ARRAY LEFT_BRACKET int_positivo DOT DOT int_positivo RIGHT_BRACKET OF tipo
        {
            ARRAY45 = (Token) match(input, ARRAY, FOLLOW_ARRAY_in_tipo_array849);
            stream_ARRAY.add(ARRAY45);
            LEFT_BRACKET46 = (Token) match(input, LEFT_BRACKET, FOLLOW_LEFT_BRACKET_in_tipo_array851);
            stream_LEFT_BRACKET.add(LEFT_BRACKET46);
            pushFollow(FOLLOW_int_positivo_in_tipo_array853);
            int_positivo47 = int_positivo();
            state._fsp--;
            stream_int_positivo.add(int_positivo47.getTree());
            DOT48 = (Token) match(input, DOT, FOLLOW_DOT_in_tipo_array855);
            stream_DOT.add(DOT48);
            DOT49 = (Token) match(input, DOT, FOLLOW_DOT_in_tipo_array857);
            stream_DOT.add(DOT49);
            pushFollow(FOLLOW_int_positivo_in_tipo_array859);
            int_positivo50 = int_positivo();
            state._fsp--;
            stream_int_positivo.add(int_positivo50.getTree());
            RIGHT_BRACKET51 = (Token) match(input, RIGHT_BRACKET, FOLLOW_RIGHT_BRACKET_in_tipo_array861);
            stream_RIGHT_BRACKET.add(RIGHT_BRACKET51);
            OF52 = (Token) match(input, OF, FOLLOW_OF_in_tipo_array863);
            stream_OF.add(OF52);
            pushFollow(FOLLOW_tipo_in_tipo_array865);
            tipo53 = tipo();
            state._fsp--;
            stream_tipo.add(tipo53.getTree());
            // AST REWRITE
            // elements: int_positivo, int_positivo, tipo
            // token labels:
            // rule labels: retval
            // token list labels:
            // rule list labels:
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", retval != null ? retval.tree : null);
            root_0 = (CommonTree) adaptor.nil();
            // 103:89: -> ^( TIPO_ARRAY int_positivo int_positivo tipo )
            {
                // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:103:91: ^( TIPO_ARRAY int_positivo int_positivo tipo )
                {
                    CommonTree root_1 = (CommonTree) adaptor.nil();
                    root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(TIPO_ARRAY, "TIPO_ARRAY"), root_1);
                    adaptor.addChild(root_1, stream_int_positivo.nextTree());
                    adaptor.addChild(root_1, stream_int_positivo.nextTree());
                    adaptor.addChild(root_1, stream_tipo.nextTree());
                    adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
