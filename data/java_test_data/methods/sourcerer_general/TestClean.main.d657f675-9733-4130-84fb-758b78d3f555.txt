public static void main(String[] args) {
    // Creation de la fenetre d'affichage
    int width = 800;
    int height = 600;
    int depth = 16;
    try {
        DisplayMode[] modes = Display.getAvailableDisplayModes();
        for (DisplayMode currentMode : modes) {
            if (currentMode.getWidth() == width && currentMode.getHeight() == height && currentMode.getBitsPerPixel() == depth) {
                Display.setDisplayMode(currentMode);
                break;
            }
        }
        Display.setTitle("GameTest");
        Display.setLocation(10, 10);
        Display.create();
        Display.sync(100);
        GLU.gluPerspective(45, 16 / 9, 0, 10);
    } catch (Exception e) {
        Sys.alert("Erreur", "Une erreur est survenue lors de la crï¿½ation de l'affichage : " + e);
        System.exit(1);
    }
    IntBuffer params = IntBuffer.allocate(17);
    System.out.println("BEFORE : " + params.get());
    params = IntBuffer.allocate(17);
    glGetInteger(GL20.GL_MAX_VERTEX_ATTRIBS, params);
    System.out.println("AFTER : " + params.get());
    float posX = 0;
    float posY = 0;
    float posZ = 0;
    float yAngleRad = 0;
    float yAngleDeg = 0;
    int caseMax = 20;
    // Boucle tant que la fenetre n'est pas fermee
    while (!Display.isCloseRequested()) {
        glClear(GL_COLOR_BUFFER_BIT);
        glLoadIdentity();
        GLU.gluPerspective(45, 16 / 9, 0, 100);
        // Affichage d'un triangle (a gauche)
        glBegin(GL_TRIANGLES);
        glVertex3f(-0.39f, 0f, -1f);
        glVertex3f(-0.41f, 0f, -1f);
        glVertex3f(-0.41f, 0.1f, -1f);
        glEnd();
        yAngleRad = (float) Math.toRadians(yAngleDeg);
        if (Keyboard.isKeyDown(Keyboard.KEY_UP)) {
            posZ += 0.001f * Math.cos(yAngleRad);
            posX -= 0.001f * Math.sin(yAngleRad);
        }
        if (Keyboard.isKeyDown(Keyboard.KEY_DOWN)) {
            posZ -= 0.001f * Math.cos(yAngleRad);
            posX += 0.001f * Math.sin(yAngleRad);
        }
        if (Keyboard.isKeyDown(Keyboard.KEY_LEFT)) {
            yAngleDeg -= 1f;
        }
        if (Keyboard.isKeyDown(Keyboard.KEY_RIGHT)) {
            yAngleDeg += 1f;
        }
        if (Keyboard.isKeyDown(Keyboard.KEY_RIGHT)) {
            yAngleDeg += 1f;
        }
        if (Keyboard.isKeyDown(Keyboard.KEY_ADD)) {
            caseMax += 1;
        }
        if (Keyboard.isKeyDown(Keyboard.KEY_DIVIDE)) {
            caseMax -= 1;
        }
        // Rotation puis translation suivant le deplacement
        glRotatef(yAngleDeg, 0, 1, 0);
        glTranslatef(posX, posY, posZ);
        // Affichage du damier
        dessiner();
        Display.update();
        // Affichage du nombre de case
        Display.setTitle("GameSample - NbCases : " + (caseMax * caseMax));
    }
}
