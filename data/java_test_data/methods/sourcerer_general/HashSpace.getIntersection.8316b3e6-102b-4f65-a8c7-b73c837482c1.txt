// documentation inherited
@Override
public SpaceElement getIntersection(Ray2D ray, Vector2f location, Predicate<? super SpaceElement> filter) {
    // check for an intersection with the oversized elements
    SpaceElement closest = getIntersection(_oversizedElements, ray, location, filter);
    // get the point of intersection with the top-level bounds
    if (!_bounds.getIntersection(ray, _pt)) {
        return closest;
    }
    // increment the visit counter
    _visit++;
    // determine the integer directions on each axis
    Vector2f origin = ray.getOrigin();
    Vector2f dir = ray.getDirection();
    int xdir = (int) Math.signum(dir.x);
    int ydir = (int) Math.signum(dir.y);
    // find the starting lines
    float rgran = 1f / _granularity;
    float px = _pt.x * rgran, py = _pt.y * rgran;
    int lx = (xdir < 0) ? FloatMath.iceil(px) : FloatMath.ifloor(px);
    int ly = (ydir < 0) ? FloatMath.iceil(py) : FloatMath.ifloor(py);
    // step through each cell that the ray intersects, returning the first hit or bailing
    // out when we exceed the bounds
    Vector2f result = new Vector2f();
    do {
        _coord.set(lx - (xdir < 0 ? 1 : 0), ly - (ydir < 0 ? 1 : 0));
        Node<SpaceElement> root = _elements.get(_coord);
        if (root != null) {
            SpaceElement element = root.getIntersection(ray, result, filter);
            if (element != null) {
                if (closest == null || origin.distanceSquared(result) < origin.distanceSquared(location)) {
                    closest = element;
                    location.set(result);
                }
                return closest;
            }
        }
        float xt = (xdir == 0) ? Float.MAX_VALUE : ((lx + xdir) * _granularity - origin.x) / dir.x;
        float yt = (ydir == 0) ? Float.MAX_VALUE : ((ly + ydir) * _granularity - origin.y) / dir.y;
        float t = (xt < yt) ? xt : yt;
        if (xt == t) {
            lx += xdir;
        }
        if (yt == t) {
            ly += ydir;
        }
    } while (_coord.x >= _minCoord.x && _coord.x <= _maxCoord.x && _coord.y >= _minCoord.y && _coord.y <= _maxCoord.y);
    // no luck
    return closest;
}
