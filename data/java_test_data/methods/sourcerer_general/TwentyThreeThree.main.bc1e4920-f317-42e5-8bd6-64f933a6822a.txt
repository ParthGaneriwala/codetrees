public static void main(String[] args) {
    String question1 = "Method sleep does not consume processor time while a thread sleeps.";
    String question2 = "Using a Lock guarantees that deadlock can not occur.";
    String question3a = "Once a Lock has been obtained by a thread, the Lock object will not ";
    String question3b = "allow another thread to obtain the lock until the first thread releases it.";
    String question4 = "Swing components are thread safe.";
    String answer1 = "True. A sleepin g thread is not using the processor, allowing other threads to access it.";
    String answer2a = "False. Two or more threads my attempt to grab a lock on an object, and each holding";
    String answer2b = "part of the object and thus having conflicting conditions that can not be released.";
    String answer2c = "This condition can be averted by using locks on higher level objects or timed locks.";
    String answer3 = "True, with the exception that synchronized threads may grab different aspects of an object simultaneously if programmed incorrectly.";
    String answer4 = "False. Swing components can be accessed by only one thread at a time. Generally, this thread is the event-dispatching thread.";
    System.out.println(question1);
    System.out.println(answer1);
    System.out.println();
    System.out.println(question2);
    System.out.println(answer2a);
    System.out.println(answer2b);
    System.out.println(answer2c);
    System.out.println();
    System.out.println(question3a);
    System.out.println(question3b);
    System.out.println(answer3);
    System.out.println();
    System.out.println(question4);
    System.out.println(answer4);
}
