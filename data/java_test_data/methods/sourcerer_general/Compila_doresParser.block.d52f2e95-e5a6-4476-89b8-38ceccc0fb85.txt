// $ANTLR start "block"
public final Compila_doresParser.block_return block() throws RecognitionException {
    Compila_doresParser.block_return retval = new Compila_doresParser.block_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token EOL46 = null;
    Compila_doresParser.statement_return statement45 = null;
    CommonTree EOL46_tree = null;
    RewriteRuleTokenStream stream_EOL = new RewriteRuleTokenStream(adaptor, "token EOL");
    RewriteRuleSubtreeStream stream_statement = new RewriteRuleSubtreeStream(adaptor, "rule statement");
    try {
        // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:111:2: ( ( statement ( EOL )+ )* -> ^( STATEMENT ( statement )* ) )
        // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:111:4: ( statement ( EOL )+ )*
        {
            // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:111:4: ( statement ( EOL )+ )*
            loop17: do {
                int alt17 = 2;
                int LA17_0 = input.LA(1);
                if (((LA17_0 >= PRINT && LA17_0 <= IF) || LA17_0 == FOR || LA17_0 == EXIT || LA17_0 == DO || LA17_0 == ID)) {
                    alt17 = 1;
                }
                switch(alt17) {
                    case 1:
                        // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:111:5: statement ( EOL )+
                        {
                            pushFollow(FOLLOW_statement_in_block806);
                            statement45 = statement();
                            state._fsp--;
                            stream_statement.add(statement45.getTree());
                            // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:111:15: ( EOL )+
                            int cnt16 = 0;
                            loop16: do {
                                int alt16 = 2;
                                int LA16_0 = input.LA(1);
                                if ((LA16_0 == EOL)) {
                                    alt16 = 1;
                                }
                                switch(alt16) {
                                    case 1:
                                        // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:111:15: EOL
                                        {
                                            EOL46 = (Token) match(input, EOL, FOLLOW_EOL_in_block808);
                                            stream_EOL.add(EOL46);
                                        }
                                        break;
                                    default:
                                        if (cnt16 >= 1)
                                            break loop16;
                                        EarlyExitException eee = new EarlyExitException(16, input);
                                        throw eee;
                                }
                                cnt16++;
                            } while (true);
                        }
                        break;
                    default:
                        break loop17;
                }
            } while (true);
            // AST REWRITE
            // elements: statement
            // token labels:
            // rule labels: retval
            // token list labels:
            // rule list labels:
            // wildcard labels:
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.tree : null);
            root_0 = (CommonTree) adaptor.nil();
            // 111:21: -> ^( STATEMENT ( statement )* )
            {
                // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:111:24: ^( STATEMENT ( statement )* )
                {
                    CommonTree root_1 = (CommonTree) adaptor.nil();
                    root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(STATEMENT, "STATEMENT"), root_1);
                    // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:111:36: ( statement )*
                    while (stream_statement.hasNext()) {
                        adaptor.addChild(root_1, stream_statement.nextTree());
                    }
                    stream_statement.reset();
                    adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
