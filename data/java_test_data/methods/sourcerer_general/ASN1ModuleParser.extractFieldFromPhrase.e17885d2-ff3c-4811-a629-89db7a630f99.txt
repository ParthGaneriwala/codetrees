private ASN1Definition extractFieldFromPhrase(List<Token> inPhrase) {
    ASN1Definition field = null;
    ASN1Definition parent = mFieldStack.size() > 0 ? mFieldStack.peek() : mCurrentDefinition;
    if (parent.getTypeName().equals("ENUMERATED") || parent.getTypeName().equals("INTEGER") || (parent.getCollectionFieldTypeName() != null && (parent.getCollectionFieldTypeName().equals("ENUMERATED") || parent.getCollectionFieldTypeName().equals("INTEGER")))) {
        // EX:   unknown (0)
        String name = null;
        Integer intValue = null;
        if (inPhrase.size() == 1 && inPhrase.get(0).endsWith(")")) {
            String value = inPhrase.get(0).toString();
            // They may have been run together.
            int index = value.indexOf("(");
            if (index > 0) {
                name = value.substring(0, index);
                intValue = Integer.parseInt(value.substring(index + 1, value.length() - 1));
                inPhrase.remove(0);
            }
        } else if (inPhrase.size() >= 2 && inPhrase.get(1).endsWith(")")) {
            name = inPhrase.get(0).toString();
            String value = inPhrase.get(1).toString();
            intValue = Integer.parseInt(value.substring(1, value.length() - 1));
            inPhrase.remove(0);
            inPhrase.remove(0);
        }
        if (name != null && intValue != null) {
            parent.addEnumeratedValue(name, intValue);
        }
    } else if (inPhrase.size() >= 2) {
        field = new ASN1Definition(inPhrase.get(0).toString());
        field.setTypeName(inPhrase.get(1).toString());
        int tokensToRemove = 2;
        if (inPhrase.size() >= 4 && (field.getTypeName().equals("SET") || field.getTypeName().equals("SEQUENCE")) && inPhrase.get(2).equals("OF")) {
            String collectionTypeName = inPhrase.get(3).toString();
            tokensToRemove = 4;
            if (inPhrase.size() >= 5 && isUniversalTypeName(collectionTypeName + " " + inPhrase.get(4))) {
                collectionTypeName += inPhrase.get(4);
                tokensToRemove = 5;
            }
            field.setCollectionFieldTypeName(collectionTypeName);
        } else if (inPhrase.size() >= 3 && isUniversalTypeName(field.getTypeName() + " " + inPhrase.get(2))) {
            field.setTypeName(field.getTypeName() + inPhrase.get(2));
            tokensToRemove = 3;
        }
        field.setModuleName(mCurrentModule);
        field.setParentDefinition(parent);
        parent.addField(field);
        while (tokensToRemove > 0) {
            inPhrase.remove(0);
            tokensToRemove--;
        }
        if (inPhrase.size() > 0 && inPhrase.get(0).equals("OPTIONAL")) {
            field.setIsOptional(true);
            inPhrase.remove(0);
        }
        if (inPhrase.size() >= 2 && inPhrase.get(0).equals("DEFAULT")) {
            field.setDefaultValue(StringUtil.unquote(inPhrase.get(1).toString()));
            inPhrase.remove(0);
            inPhrase.remove(0);
        }
    }
    return field;
}
