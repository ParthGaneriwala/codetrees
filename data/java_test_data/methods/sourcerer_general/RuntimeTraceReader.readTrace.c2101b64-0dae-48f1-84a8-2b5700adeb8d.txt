public List<Event> readTrace(String fileName) throws IOException {
    List<Event> eventStream = new ArrayList<Event>();
    FileInputStream inputStream = new FileInputStream(fileName);
    BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));
    String line;
    int eventNum = 0;
    while ((line = reader.readLine()) != null) {
        String[] splitted = line.split(";");
        String qualifiedAdviceName = splitted[0];
        List<Integer> objectNumbers = new ArrayList<Integer>();
        for (int i = 1; i < splitted.length - 1; i++) {
            objectNumbers.add(Integer.parseInt(splitted[i]));
        }
        int shadowId = Integer.parseInt(splitted[splitted.length - 1]);
        String aspectName = qualifiedAdviceName.substring(0, qualifiedAdviceName.lastIndexOf('.'));
        String adviceName = qualifiedAdviceName.substring(qualifiedAdviceName.lastIndexOf('.') + 1, qualifiedAdviceName.length());
        DAInfo daInfo = ((HasDAInfo) Main.v().getAbcExtension()).getDependentAdviceInfo();
        TracePattern theTracePattern = null;
        String theSymbol = null;
        List<String> variableOrder = null;
        outer: for (TracePattern tp : daInfo.getTracePatterns()) {
            if (tp.getContainer().getName().equals(aspectName)) {
                Set<String> symbols = tp.getSymbols();
                for (String symbol : symbols) {
                    SootMethod symbolAdviceMethod = tp.getSymbolAdviceMethod(symbol);
                    if (symbolAdviceMethod.getName().equals(adviceName)) {
                        theSymbol = symbol;
                        theTracePattern = tp;
                        variableOrder = tp.getVariableOrder(symbol);
                        break outer;
                    }
                }
            }
        }
        if (theTracePattern == null) {
            throw new RuntimeException("No matching dependency declaration found.");
        }
        Map<String, Integer> variableBinding = new HashMap<String, Integer>();
        int i = 0;
        for (Integer objectId : objectNumbers) {
            variableBinding.put(variableOrder.get(i), objectId);
            i++;
        }
        Event event = new Event(eventNum, theTracePattern, theSymbol, variableBinding, shadowId);
        eventNum++;
        eventStream.add(event);
    }
    return eventStream;
}
