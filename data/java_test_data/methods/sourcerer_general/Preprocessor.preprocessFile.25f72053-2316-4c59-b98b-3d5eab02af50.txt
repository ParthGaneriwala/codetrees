public static void preprocessFile(File sourceDir, File targetDir, String fileName, String altExt, String encoding, int options, String defines, IResolver resolver) throws PreprocessorException {
    String sourcePath = translatePath(sourceDir, fileName, null);
    String targetPath = translatePath(targetDir, fileName, altExt);
    File targetFile = new File(targetPath);
    File backupFile = new File(targetPath + "~");
    boolean sameDir = sourceDir.equals(targetDir);
    boolean sameExt = (altExt == null);
    boolean verbose = Option.isVerbose(options);
    boolean testOnly = Option.isTestOnly(options);
    boolean backup = Option.isBackup(options);
    Preprocessor preprocessor = new Preprocessor(sourcePath, encoding, options, resolver, defines);
    if (verbose) {
        log("Reading \"" + sourcePath + "\"");
    }
    preprocessor.loadDocument();
    boolean modified = preprocessor.preprocess();
    boolean rewrite = modified || !sameDir || !sameExt;
    if (!rewrite) {
        if (verbose) {
            log(fileName + " ... not modified");
        }
        return;
    } else if (verbose) {
        log(fileName + " ... modified");
    }
    if (testOnly) {
        return;
    }
    try {
        targetFile.getParentFile().mkdirs();
    } catch (Exception e) {
        throw new PreprocessorException("mkdirs failed \"" + targetFile + "\": " + // NOI18N
        e);
    }
    backupFile.delete();
    if (targetFile.exists() && !targetFile.renameTo(backupFile)) {
        throw new PreprocessorException("Rename failed: \"" + targetFile + "\" => \"" + backupFile + // NOI18N
        "\"");
    }
    if (verbose) {
        log("Writing \"" + targetPath + "\"");
    }
    preprocessor.saveDocument(targetPath);
    if (!backup) {
        backupFile.delete();
    }
}
