@Test
public void testSelectDeselectFromGUI() {
    TableNotificationTestFrame frame = new TableNotificationTestFrame("TF");
    FrameFixture frameFix = new FrameFixture(frame);
    try {
        frameFix.show();
        JTableFixture tableFix = frameFix.table("table");
        // Create to property change listeners for recording the events.
        final RecordingPropertyChangeListener valueListener = new RecordingPropertyChangeListener("value");
        final RecordingPropertyChangeListener selListener = new RecordingPropertyChangeListener("selectedValue");
        // Create the cobean
        ISingleSelectionListCobean<SimpleBean> cobean = createCobean(frame);
        // Add the listeners to the cobean
        ((IPropertyChangeListenerAware) cobean).setPropertyChangeListener(valueListener);
        ((IPropertyChangeListenerAware) cobean).setPropertyChangeListener(selListener);
        // Set a list of Simple beans to the cobean
        {
            List<SimpleBean> value = CobeanTestUtil.createSimpleBeanList("Der Assistent der Zauberer");
            cobean.setValue(value);
            // Assert that the value listener was notified exactly ones
            assertEquals(1, valueListener.getNotificationCount());
            assertEquals(0, selListener.getNotificationCount());
            assertEventContentBean(null, CobeanTestUtil.createSimpleBeanList("Der Assistent der Zauberer"), "value", valueListener.getEventContents().get(0));
        }
        // Select one row from the GUI
        {
            tableFix.selectCell(tableFix.cell("Zauberer"));
            pause();
            assertEquals(1, valueListener.getNotificationCount());
            assertEquals(1, selListener.getNotificationCount());
            assertEventContentBean(null, new SimpleBean("Zauberer"), "selectedValue", selListener.getEventContents().get(0));
        }
        // Select another row
        {
            tableFix.selectCell(tableFix.cell("der"));
            pause();
            assertEquals(1, valueListener.getNotificationCount());
            assertEquals(2, selListener.getNotificationCount());
            assertEventContentBean(new SimpleBean("Zauberer"), new SimpleBean("der"), "selectedValue", selListener.getEventContents().get(1));
        }
        // Select the same row and ensure that no events where fired
        {
            tableFix.selectCell(tableFix.cell("der"));
            pause();
            assertEquals(1, valueListener.getNotificationCount());
            assertEquals(2, selListener.getNotificationCount());
        }
        // Select the same row again and ensure that no events where fired
        {
            cobean.setSelectedValue(new SimpleBean("der"));
            pause();
            assertEquals("der", tableFix.selectionValue());
            assertEquals(1, valueListener.getNotificationCount());
            assertEquals(2, selListener.getNotificationCount());
        }
        // Select another row
        {
            cobean.setSelectedValue(new SimpleBean("Assistent"));
            pause();
            assertEquals("Assistent", tableFix.selectionValue());
            assertEquals(1, valueListener.getNotificationCount());
            assertEquals(3, selListener.getNotificationCount());
            assertEventContentBean(new SimpleBean("der"), new SimpleBean("Assistent"), "selectedValue", selListener.getEventContents().get(2));
        }
        // Deselect all rows and ensure that an event is fired
        cobean.setSelectedValue(null);
        pause();
        assertEquals(null, tableFix.selectionValue());
        assertEquals(1, valueListener.getNotificationCount());
        assertEquals(4, selListener.getNotificationCount());
        assertEventContentBean(new SimpleBean("Assistent"), null, "selectedValue", selListener.getEventContents().get(3));
    } finally {
        frameFix.cleanUp();
    }
}
