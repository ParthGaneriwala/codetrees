public static int findMatchingBracket(Document doc, int offset) throws BadLocationException {
    if (doc.getLength() == 0)
        return -1;
    char c = doc.getText(offset, 1).charAt(0);
    // c` - corresponding character
    char cprime;
    // true = back, false = forward
    boolean direction;
    switch(c) {
        case '(':
            cprime = ')';
            direction = false;
            break;
        case ')':
            cprime = '(';
            direction = true;
            break;
        case '[':
            cprime = ']';
            direction = false;
            break;
        case ']':
            cprime = '[';
            direction = true;
            break;
        case '{':
            cprime = '}';
            direction = false;
            break;
        case '}':
            cprime = '{';
            direction = true;
            break;
        default:
            return -1;
    }
    int count;
    // Go back or forward
    if (direction) {
        // Count is 1 initially because we have already
        // `found' one closing bracket
        count = 1;
        // Get text[0,offset-1];
        String text = doc.getText(0, offset);
        // Scan backwards
        for (int i = offset - 1; i >= 0; i--) {
            // If text[i] == c, we have found another
            // closing bracket, therefore we will need
            // two opening brackets to complete the
            // match.
            char x = text.charAt(i);
            if (x == c)
                count++;
            else // --count == 0
            if (x == cprime) {
                if (--count == 0)
                    return i;
            }
        }
    } else {
        // Count is 1 initially because we have already
        // `found' one opening bracket
        count = 1;
        // So we don't have to + 1 in every loop
        offset++;
        // Number of characters to check
        int len = doc.getLength() - offset;
        // Get text[offset+1,len];
        String text = doc.getText(offset, len);
        // Scan forwards
        for (int i = 0; i < len; i++) {
            // If text[i] == c, we have found another
            // opening bracket, therefore we will need
            // two closing brackets to complete the
            // match.
            char x = text.charAt(i);
            if (x == c)
                count++;
            else // --count == 0
            if (x == cprime) {
                if (--count == 0)
                    return i + offset;
            }
        }
    }
    // Nothing found
    return -1;
}
