public void testSimplePojo() throws Exception {
    BeanRegistry.registerType(SimplePojo.class);
    // Create POJO
    SimplePojo original = new SimplePojo();
    Boolean oBoolean = new Boolean(false);
    Byte oByte = new Byte((byte) 11);
    Character oCharacter = new Character('a');
    Date oDate = SDF.parse("2007-06-18");
    Double oDouble = new Double(2.7);
    Float oFloat = new Float(-1.2f);
    Integer oInteger = new Integer(16);
    Long oLong = new Long(18);
    Object o = new Object();
    Short oShort = new Short((short) 20);
    original.setBooleanField(false);
    original.setBooleanWrapperField(oBoolean);
    original.setByteField((byte) 12);
    original.setByteWrapperField(oByte);
    original.setCharField('i');
    original.setCharWrapperField(oCharacter);
    original.setDateField(oDate);
    original.setDoubleField(3.14);
    original.setDoubleWrapperField(oDouble);
    original.setFloatField(1.2f);
    original.setFloatWrapperField(oFloat);
    original.setIntField(15);
    original.setIntWrapperField(oInteger);
    original.setLongField(17);
    original.setLongWrapperField(oLong);
    original.setObjectType(o);
    original.setShortField((short) 19);
    original.setShortWrapperField(oShort);
    original.setStringField("Wonttell");
    // Enhance POJO
    Object enhancedPojo = BeanEnhancer.addPropertyChangeSupport(original);
    // Check class hierarchy
    assertTrue("The enhanced POJO must extend the original POJO", original.getClass().isAssignableFrom(enhancedPojo.getClass()));
    assertTrue("The enhanced POJO must implement " + PropertyChangeListenerSupport.class, PropertyChangeListenerSupport.class.isAssignableFrom(enhancedPojo.getClass()));
    // Cast
    SimplePojo enhanced = (SimplePojo) enhancedPojo;
    PropertyChangeListenerSupport pcls = (PropertyChangeListenerSupport) enhancedPojo;
    // Make sure it contains original values
    assertTrue(false == enhanced.isBooleanField());
    assertTrue(oBoolean == enhanced.getBooleanWrapperField());
    assertTrue((byte) 12 == enhanced.getByteField());
    assertTrue(oByte == enhanced.getByteWrapperField());
    assertTrue('i' == enhanced.getCharField());
    assertTrue(oCharacter == enhanced.getCharWrapperField());
    assertTrue(oDate == enhanced.getDateField());
    assertTrue(3.14 == enhanced.getDoubleField());
    assertTrue(oDouble == enhanced.getDoubleWrapperField());
    assertTrue(1.2f == enhanced.getFloatField());
    assertTrue(oFloat == enhanced.getFloatWrapperField());
    assertTrue(15 == enhanced.getIntField());
    assertTrue(oInteger == enhanced.getIntWrapperField());
    assertTrue(17 == enhanced.getLongField());
    assertTrue(oLong == enhanced.getLongWrapperField());
    assertTrue(o == enhanced.getObjectType());
    assertTrue((short) 19 == enhanced.getShortField());
    assertTrue(oShort == enhanced.getShortWrapperField());
    assertTrue("Wonttell" == enhanced.getStringField());
    // Add listener
    final AtomicInteger caughtPropertyChanges = new AtomicInteger();
    final HashSet<String> caughtPropertyChangeNames = new HashSet<String>();
    PropertyChangeListener propertyChangeListener = new PropertyChangeListener() {

        public void propertyChange(PropertyChangeEvent evt) {
            String prop = evt.getPropertyName();
            if (prop.equals("intField") || prop.equals("booleanField") || prop.equals("stringField")) {
                caughtPropertyChanges.incrementAndGet();
                caughtPropertyChangeNames.add(prop);
            } else {
                fail("Unknown property: " + prop);
            }
        }
    };
    pcls.addPropertyChangeListener(propertyChangeListener);
    final AtomicInteger intFieldCounter = new AtomicInteger();
    pcls.addPropertyChangeListener("intField", new PropertyChangeListener() {

        public void propertyChange(PropertyChangeEvent evt) {
            intFieldCounter.incrementAndGet();
        }
    });
    assertEquals(0, intFieldCounter.get());
    // Run tests with listener
    enhanced.setIntField(25);
    assertEquals("Failed: check that intField listener clicked.", 1, intFieldCounter.get());
    assertEquals("Exactly one property change event should have occurred", 1, caughtPropertyChanges.get());
    assertTrue(caughtPropertyChangeNames.contains("intField"));
    enhanced.setBooleanField(true);
    assertEquals("Exactly two property change event should have occurred", 2, caughtPropertyChanges.get());
    assertTrue(caughtPropertyChangeNames.contains("booleanField"));
    enhanced.setStringField("Willtell");
    assertEquals("Exactly three property change event should have occurred", 3, caughtPropertyChanges.get());
    assertTrue(caughtPropertyChangeNames.contains("stringField"));
    // No change in property, so the
    enhanced.setStringField("Willtell");
    // number shouldn't change
    assertEquals("'exactly' three property change event should have occurred", 3, caughtPropertyChanges.get());
    assertEquals("Failed: check that other fields do not click intField listener.", 1, intFieldCounter.get());
    // Remove listener
    caughtPropertyChanges.set(0);
    caughtPropertyChangeNames.clear();
    pcls.removePropertyChangeListener(propertyChangeListener);
    // Run tests without listener
    enhanced.setIntField(24);
    assertEquals("No property change events should have occurred", 0, caughtPropertyChanges.get());
    enhanced.setBooleanField(false);
    assertEquals("No property change events should have occurred", 0, caughtPropertyChanges.get());
    enhanced.setStringField("Willtell");
    assertEquals("No property change events should have occurred", 0, caughtPropertyChanges.get());
}
