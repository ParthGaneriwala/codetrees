// This method is used by constructors only.
// It determines the incoming and outgoing neurons / synapses for each neuron
private void NeuronsInOut() {
    // and then create neuronsin, neuronsout, synapsesin, synapsesout arrays in the neuron objects
    // in order to determine relationships between neurons
    Neuron[] temp_neuronsin;
    Neuron[] temp_neuronsout;
    Synapse[] temp_synapsesin;
    Synapse[] temp_synapsesout;
    int incounter;
    int outcounter;
    for (int i = 0; i < neurons.length; i++) {
        // first determine the dimension of the arrays
        temp_neuronsin = null;
        temp_neuronsout = null;
        incounter = 0;
        outcounter = 0;
        for (int j = 0; j < synapses.length; j++) {
            if (synapses[j].sourceunit == neurons[i]) {
                outcounter++;
            }
            if (synapses[j].targetunit == neurons[i]) {
                incounter++;
            }
        }
        temp_neuronsin = new Neuron[incounter];
        temp_synapsesin = new Synapse[incounter];
        temp_neuronsout = new Neuron[outcounter];
        temp_synapsesout = new Synapse[outcounter];
        // then fill each array
        incounter = 0;
        outcounter = 0;
        for (int j = 0; j < synapses.length; j++) {
            if (synapses[j].sourceunit == neurons[i]) {
                temp_neuronsout[outcounter] = synapses[j].targetunit;
                temp_synapsesout[outcounter++] = synapses[j];
            }
            if (synapses[j].targetunit == neurons[i]) {
                temp_neuronsin[incounter] = synapses[j].sourceunit;
                temp_synapsesin[incounter++] = synapses[j];
            }
        }
        // set them in the neuron
        neurons[i].InsOuts(temp_neuronsin, temp_neuronsout, temp_synapsesin, temp_synapsesout);
    }
}
