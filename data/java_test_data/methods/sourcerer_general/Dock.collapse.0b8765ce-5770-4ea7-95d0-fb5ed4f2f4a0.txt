public boolean collapse(DockNode parent, DockNode child) {
    DockNode grandparent, grandchild, head = null, tail = null;
    DockNode first = null, last = null, link = null;
    DockSplitter splitter;
    int pindex, index, gpsize, csize;
    boolean rval = false;
    assert (parent.children.get(0) == child);
    assert (parent.splitters.size() == 0);
    grandparent = parent.getParent();
    if (child.type == Dock.DOCK_LEAF) {
        /*
             * In this case, we can either remove the parent from grandparent
             * and add child to grandparent, or we can override the fields in
             * parent so that parent *becomes* child. This is the consume() 
             * operation.
             */
        parent.consume(child);
        rval = true;
    } else if (child.type == Dock.DOCK_INODE) {
        assert (child.children.size() >= 2);
        if (grandparent != null) {
            gpsize = grandparent.children.size();
            pindex = grandparent.children.indexOf(parent);
            /*
                 * Head/tail are two nodes in the grandparent's children list 
                 * right before/after the 'hole' that is created by removing
                 * 'parent' from the grandparent.  We will use these later for
                 * linking with the grandchildren.
                 */
            if (pindex == 0) {
                grandparent.removeSplitter(0);
                tail = (DockNode) grandparent.children.get(1);
            } else if (pindex == gpsize - 1) {
                grandparent.removeSplitter(pindex - 1);
                head = (DockNode) grandparent.children.get(pindex - 1);
            } else {
                grandparent.removeSplitter(pindex);
                grandparent.removeSplitter(pindex - 1);
                head = (DockNode) grandparent.children.get(pindex - 1);
                tail = (DockNode) grandparent.children.get(pindex + 1);
            }
            grandparent.removeChild(parent);
            parent.removeChild(child);
            while (child.splitters.size() > 0) {
                child.removeSplitter(0);
            }
            /*
                 * Mark the first and last nodes of the child so that we can 
                 * link them with the head and tail nodes we marked for the
                 * grandparent's children. Linking is done as follows:
                 * 
                 *   [head]-[first]-..................-[last]-[tail]
                 *   
                 * In between first and last nodes are the grandchildren.
                 */
            csize = child.children.size();
            first = (DockNode) child.children.get(0);
            last = (DockNode) child.children.get(csize - 1);
            if (head != null) {
                splitter = new DockSplitter(this);
                grandparent.addSplitter(head, first, splitter);
            }
            index = 0;
            while (child.children.size() > 0) {
                grandchild = (DockNode) child.children.get(0);
                child.removeChild(grandchild);
                grandparent.addChildAtIndex(grandchild, pindex + index);
                if (link != null) {
                    splitter = new DockSplitter(this);
                    grandparent.addSplitter(link, grandchild, splitter);
                }
                /*
                     * Do some bounds adjustments for the grandchildren
                     */
                if (grandparent.orientation == Dock.DOCK_H) {
                    grandchild.setBounds(grandparent.x, grandchild.y, grandparent.w, grandchild.h);
                } else if (grandparent.orientation == Dock.DOCK_V) {
                    grandchild.setBounds(grandchild.x, grandparent.y, grandchild.w, grandparent.h);
                }
                link = grandchild;
                index++;
            }
            if (tail != null) {
                splitter = new DockSplitter(this);
                grandparent.addSplitter(last, tail, splitter);
            }
        } else {
            /*
                 * Parent is removed and child becomes the root
                 */
            assert (this.tree.root == parent);
            parent.removeChild(child);
            this.tree.root = child;
            child.setBounds(parent.getBounds());
        }
    } else {
        assert (false);
    }
    return rval;
}
