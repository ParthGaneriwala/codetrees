public void testBlockCorruptionPolicy() throws IOException {
    Configuration conf = new Configuration();
    conf.setLong("dfs.blockreport.intervalMsec", 1000L);
    Random random = new Random();
    FileSystem fs = null;
    DFSClient dfsClient = null;
    LocatedBlocks blocks = null;
    int blockCount = 0;
    int rand = random.nextInt(3);
    MiniDFSCluster cluster = new MiniDFSCluster(conf, 3, true, null);
    cluster.waitActive();
    fs = cluster.getFileSystem();
    Path file1 = new Path("/tmp/testBlockVerification/file1");
    DFSTestUtil.createFile(fs, file1, 1024, (short) 3, 0);
    String block = DFSTestUtil.getFirstBlock(fs, file1).getBlockName();
    dfsClient = new DFSClient(new InetSocketAddress("localhost", cluster.getNameNodePort()), conf);
    do {
        blocks = dfsClient.namenode.getBlockLocations(file1.toString(), 0, Long.MAX_VALUE);
        blockCount = blocks.get(0).getLocations().length;
        try {
            LOG.info("Looping until expected blockCount of 3 is received");
            Thread.sleep(1000);
        } catch (InterruptedException ignore) {
        }
    } while (blockCount != 3);
    assertTrue(blocks.get(0).isCorrupt() == false);
    // Corrupt random replica of block
    corruptReplica(block, rand);
    // Restart the datanode hoping the corrupt block to be reported
    cluster.restartDataNode(rand);
    // We have 2 good replicas and block is not corrupt
    do {
        blocks = dfsClient.namenode.getBlockLocations(file1.toString(), 0, Long.MAX_VALUE);
        blockCount = blocks.get(0).getLocations().length;
        try {
            LOG.info("Looping until expected blockCount of 2 is received");
            Thread.sleep(1000);
        } catch (InterruptedException ignore) {
        }
    } while (blockCount != 2);
    assertTrue(blocks.get(0).isCorrupt() == false);
    // Corrupt all replicas. Now, block should be marked as corrupt
    // and we should get all the replicas
    corruptReplica(block, 0);
    corruptReplica(block, 1);
    corruptReplica(block, 2);
    // Read the file to trigger reportBadBlocks by client
    try {
        IOUtils.copyBytes(fs.open(file1), new IOUtils.NullOutputStream(), conf, true);
    } catch (IOException e) {
    // Ignore exception
    }
    // its replicas
    do {
        blocks = dfsClient.namenode.getBlockLocations(file1.toString(), 0, Long.MAX_VALUE);
        blockCount = blocks.get(0).getLocations().length;
        try {
            LOG.info("Looping until expected blockCount of 3 is received");
            Thread.sleep(1000);
        } catch (InterruptedException ignore) {
        }
    } while (blockCount != 3);
    assertTrue(blocks.get(0).isCorrupt() == true);
    cluster.shutdown();
}
