protected String escapeSlow(String s, int index) {
    int slen = s.length();
    // Get a destination buffer and setup some loop variables.
    char[] dest = DEST_TL.get();
    int destSize = dest.length;
    int destIndex = 0;
    int lastEscape = 0;
    // destination buffer, which gets grown as needed as well.
    for (; index < slen; index++) {
        // Get a replacement for the current character.
        char[] r = escape(s.charAt(index));
        // If no replacement is needed, just continue.
        if (r == null)
            continue;
        int rlen = r.length;
        // Characters we skipped over.
        int charsSkipped = index - lastEscape;
        // This is the size needed to add the replacement, not the full
        // size needed by the string.  We only regrow when we absolutely must.
        int sizeNeeded = destIndex + charsSkipped + rlen;
        if (destSize < sizeNeeded) {
            destSize = sizeNeeded + (slen - index) + DEST_PAD;
            dest = growBuffer(dest, destIndex, destSize);
        }
        // If we have skipped any characters, we need to copy them now.
        if (charsSkipped > 0) {
            s.getChars(lastEscape, index, dest, destIndex);
            destIndex += charsSkipped;
        }
        // Copy the replacement string into the dest buffer as needed.
        if (rlen > 0) {
            System.arraycopy(r, 0, dest, destIndex, rlen);
            destIndex += rlen;
        }
        lastEscape = index + 1;
    }
    // Copy leftover characters if there are any.
    int charsLeft = slen - lastEscape;
    if (charsLeft > 0) {
        int sizeNeeded = destIndex + charsLeft;
        if (destSize < sizeNeeded) {
            // Regrow and copy, expensive!  No padding as this is the final copy.
            dest = growBuffer(dest, destIndex, sizeNeeded);
        }
        s.getChars(lastEscape, slen, dest, destIndex);
        destIndex = sizeNeeded;
    }
    return new String(dest, 0, destIndex);
}
