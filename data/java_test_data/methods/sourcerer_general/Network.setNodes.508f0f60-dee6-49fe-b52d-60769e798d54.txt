public void setNodes(int numNodes) {
    this.nodes = new Node[numNodes];
    for (int i = 0; i < numNodes; i++) {
        nodes[i] = new Node();
        nodes[i].setId(i);
        nodes[i].setClStatus(Node.STATUS.CLAIMED);
        nodes[i].setX(0);
        nodes[i].setY(0);
    }
    int X = 100;
    int Y = 100;
    int N;
    int currentN = 0;
    boolean fin = false;
    if ((numNodes % 5) == 0) {
        N = numNodes / 5;
    } else {
        N = numNodes / 5 + 1;
    }
    int m = (int) Math.sqrt((double) N);
    if (m * m < N) {
        m = m + 1;
    }
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < m; j++) {
            if (numNodes - 5 > currentN) {
                nodes[currentN].setX(X);
                nodes[currentN].setY(Y);
                nodes[currentN].setBelong(nodes[currentN]);
                nodes[currentN].setClStatus(Node.STATUS.HEAD);
                nodes[currentN + 1].setX(X - 100);
                nodes[currentN + 1].setY(Y);
                nodes[currentN + 1].setBelong(nodes[currentN]);
                nodes[currentN + 2].setX(X);
                nodes[currentN + 2].setY(Y - 100);
                nodes[currentN + 2].setBelong(nodes[currentN]);
                nodes[currentN + 3].setX(X);
                nodes[currentN + 3].setY(Y + 100);
                nodes[currentN + 3].setBelong(nodes[currentN]);
                nodes[currentN + 4].setX(X + 100);
                nodes[currentN + 4].setY(Y);
                nodes[currentN + 4].setBelong(nodes[currentN]);
            } else {
                if (numNodes - currentN > 1) {
                    nodes[currentN].setX(X);
                    nodes[currentN].setY(Y);
                    nodes[currentN].setBelong(nodes[currentN]);
                    nodes[currentN].setClStatus(Node.STATUS.HEAD);
                    currentN = currentN + 1;
                    nodes[currentN].setX(X);
                    nodes[currentN].setY(Y - 100);
                    nodes[currentN].setBelong(nodes[currentN - 1]);
                    currentN = currentN + 1;
                    if (currentN == numNodes) {
                        fin = true;
                        break;
                    }
                    nodes[currentN].setX(X - 100);
                    nodes[currentN].setY(Y);
                    nodes[currentN].setBelong(nodes[currentN - 2]);
                    currentN = currentN + 1;
                    if (currentN == numNodes) {
                        fin = true;
                        break;
                    }
                    nodes[currentN].setX(X);
                    nodes[currentN].setY(Y + 100);
                    nodes[currentN].setBelong(nodes[currentN - 3]);
                    currentN = currentN + 1;
                    if (currentN == numNodes) {
                        fin = true;
                        break;
                    }
                    nodes[currentN].setX(X + 100);
                    nodes[currentN].setY(Y);
                    nodes[currentN].setBelong(nodes[currentN - 4]);
                    fin = true;
                    break;
                } else {
                    nodes[currentN].setX(X);
                    nodes[currentN].setY(Y - 100);
                    nodes[currentN].setBelong(nodes[currentN]);
                    nodes[currentN].setClStatus(Node.STATUS.HEAD);
                    fin = true;
                    break;
                }
            }
            currentN = currentN + 5;
            if (j == m - 1) {
                Y = Y + 300;
                X = 100;
            } else {
                X = X + 300;
            }
        }
        if (fin == true) {
            break;
        }
    }
}
