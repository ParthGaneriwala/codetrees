public HttpResult doHttp(String url, Map<String, Object> postData, ProgressListener listener, boolean stringifyresp) {
    HttpResult result = new HttpResult();
    HttpResponse response = null;
    try {
        HttpClient client = new DefaultHttpClient();
        if (postData == null) {
            HttpGet request = new HttpGet(url);
            response = client.execute(request);
            result.response = response;
            result.code = response.getStatusLine().getStatusCode();
        } else {
            HttpPost request = new HttpPost(url);
            boolean multipart = false;
            for (String param : postData.keySet()) {
                if (postData.get(param) instanceof File) {
                    multipart = true;
                }
            }
            if (multipart) {
                MultipartEntity entity = new MultipartEntity();
                for (String param : postData.keySet()) {
                    if (postData.get(param) instanceof File) {
                        entity.addPart(param, new FileBody((File) postData.get(param)));
                    } else {
                        entity.addPart(param, new StringBody("" + postData.get(param)));
                    }
                }
                request.setEntity(new CountingMultipartRequestEntity(entity, listener));
            } else {
                List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>();
                for (String param : postData.keySet()) {
                    nameValuePairs.add(new BasicNameValuePair(param, "" + postData.get(param)));
                }
                request.setEntity(new UrlEncodedFormEntity(nameValuePairs));
            }
            response = client.execute(request);
            result.code = response.getStatusLine().getStatusCode();
            result.response = response;
            if (stringifyresp)
                result.content = responseToString(response);
        }
    } catch (Exception e) {
        result.exception = e;
    }
    return result;
}
