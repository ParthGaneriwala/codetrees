// documentation inherited
@Override
public Enqueueable createEnqueueable(GlContext ctx, Scope scope, final Geometry geometry, boolean update, RenderQueue.Group group, List<Dependency.Adder> adders, MutableInteger pidx) {
    final RenderQueue queue = group.getQueue(this.queue);
    List<Updater> updaters = Lists.newArrayList();
    final Batch batch = (passes.length == 1) ? createBatch(ctx, scope, geometry, passes[0], adders, updaters, pidx) : createBatch(ctx, scope, geometry, adders, updaters, pidx);
    TransformState transformState = ScopeUtil.resolve(scope, "transformState", TransformState.IDENTITY, TransformState.class);
    final Transform3D modelview = transformState.getModelview();
    final Vector3f center = geometry.getCenter();
    if (update) {
        if (updaters.isEmpty()) {
            return new Enqueueable() {

                public void enqueue() {
                    geometry.update();
                    batch.depth = modelview.transformPointZ(center);
                    queue.add(batch, priority);
                }
            };
        } else {
            final Updater[] updaterArray = updaters.toArray(new Updater[updaters.size()]);
            return new Enqueueable() {

                public void enqueue() {
                    geometry.update();
                    for (Updater updater : updaterArray) {
                        updater.update();
                    }
                    batch.depth = modelview.transformPointZ(center);
                    queue.add(batch, priority);
                }
            };
        }
    } else {
        if (updaters.isEmpty()) {
            return new Enqueueable() {

                public void enqueue() {
                    batch.depth = modelview.transformPointZ(center);
                    queue.add(batch, priority);
                }
            };
        } else {
            final Updater[] updaterArray = updaters.toArray(new Updater[updaters.size()]);
            return new Enqueueable() {

                public void enqueue() {
                    for (Updater updater : updaterArray) {
                        updater.update();
                    }
                    batch.depth = modelview.transformPointZ(center);
                    queue.add(batch, priority);
                }
            };
        }
    }
}
