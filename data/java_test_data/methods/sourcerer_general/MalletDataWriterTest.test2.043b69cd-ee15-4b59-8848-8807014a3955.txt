@Test
public void test2() throws Exception {
    AnalysisEngine dataWriterAnnotator = AnalysisEngineFactory.createPrimitive(Test1Annotator.class, typeSystemDescription, DirectoryDataWriterFactory.PARAM_OUTPUT_DIRECTORY, outputDirectoryName, CleartkAnnotator.PARAM_DATA_WRITER_FACTORY_CLASS_NAME, DefaultMalletDataWriterFactory.class.getName(), MalletDataWriterFactory_ImplBase.PARAM_COMPRESS, true);
    dataWriterAnnotator.process(jCas);
    dataWriterAnnotator.collectionProcessComplete();
    File trainFile = new MalletClassifierBuilder().getTrainingDataFile(this.outputDirectory);
    String[] lines = FileUtil.loadListOfStrings(trainFile);
    assertEquals("0:1.0 1:3.0 2:1.234 A", lines[0]);
    assertEquals("3:1.0 4:2 B", lines[1]);
    assertEquals("null:0 Z", lines[2]);
    assertEquals("5:1.0 A", lines[3]);
    lines = FileUtil.loadListOfStrings(new File(outputDirectoryName, NameNumberFeaturesEncoder.LOOKUP_FILE_NAME));
    Set<String> lineSet = new HashSet<String>();
    for (int i = 0; i < lines.length; i++) lineSet.add(lines[i]);
    assertEquals("6", lines[0]);
    assertTrue(lineSet.contains("6"));
    assertTrue(lineSet.contains("name_2PO\t3"));
    assertTrue(lineSet.contains("precision\t2"));
    assertTrue(lineSet.contains("distance\t1"));
    assertTrue(lineSet.contains("pos_NN\t0"));
    assertTrue(lineSet.contains("A_B_AB\t5"));
    assertTrue(lineSet.contains("p's\t4"));
    assertEquals(7, lineSet.size());
    HideOutput hider = new HideOutput();
    for (String classifierName : ClassifierTrainerFactory.NAMES) {
        Train.main(outputDirectoryName, classifierName);
    }
    hider.restoreOutput();
}
