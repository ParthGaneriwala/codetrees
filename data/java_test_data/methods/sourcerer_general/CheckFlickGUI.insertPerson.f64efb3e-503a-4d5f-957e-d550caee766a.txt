protected void insertPerson() {
    cleanAllComposites();
    Color frontColor = new Color(display, 222, 235, 247);
    insertPerson = new Composite(shell.getShell(), SWT.BORDER);
    insertPerson.setBackground(shell.getShell().getBackground());
    Calendar toDay = Calendar.getInstance();
    final int year = toDay.get(Calendar.YEAR);
    insertPerson.setLocation(2, 145);
    insertPerson.setLayout(new FillLayout(1));
    if ((bar != null) && !(bar.isDisposed()))
        bar.dispose();
    bar = new ExpandBar(insertPerson, SWT.V_SCROLL);
    bar.setBackground(new Color(display, 177, 200, 231));
    Image image = ImageCache.getImage("add_48.png");
    // Main item
    Composite composite = new Composite(bar, SWT.NONE);
    composite.setBackground(frontColor);
    GridLayout layout = new GridLayout(6, false);
    layout.marginLeft = layout.marginTop = layout.marginRight = layout.marginBottom = 5;
    layout.verticalSpacing = 10;
    composite.setLayout(layout);
    Label label = new Label(composite, SWT.NONE);
    label.setText("Person Name:");
    label.setBackground(frontColor);
    final Text nameText = new Text(composite, SWT.SINGLE | SWT.FILL | SWT.BORDER);
    label = new Label(composite, SWT.NONE);
    label.setText("Year Of Birth:");
    label.setBackground(frontColor);
    final Text birthText = new Text(composite, SWT.SINGLE | SWT.FILL | SWT.BORDER);
    label = new Label(composite, SWT.NONE);
    label.setText("Year Of Death:");
    label.setBackground(frontColor);
    final Text deathText = new Text(composite, SWT.SINGLE | SWT.FILL | SWT.BORDER);
    label = new Label(composite, SWT.NONE);
    label.setText("Origin City:");
    label.setBackground(frontColor);
    final Text cityText = new Text(composite, SWT.SINGLE | SWT.FILL | SWT.BORDER);
    label = new Label(composite, SWT.NONE);
    label.setText("Origin Country:");
    label.setBackground(frontColor);
    final Combo countryCombo = new Combo(composite, SWT.READ_ONLY);
    String[] countryString = new String[countriesList.size() + 1];
    countryString[0] = "";
    for (int i = 0; i < countriesList.size(); i++) {
        countryString[i + 1] = countriesList.get(i).getName();
    }
    countryCombo.setItems(countryString);
    GridData gridData = new GridData();
    gridData.horizontalAlignment = GridData.FILL;
    gridData.horizontalSpan = 3;
    countryCombo.setLayoutData(gridData);
    Button button = new Button(composite, SWT.PUSH);
    button.setText("Insert");
    button.setBackground(frontColor);
    ExpandItem item0 = new ExpandItem(bar, SWT.NONE, 0);
    item0.setText("Insert New Person");
    item0.setHeight(composite.computeSize(SWT.DEFAULT, SWT.DEFAULT).y);
    item0.setControl(composite);
    item0.setImage(image);
    item0.setExpanded(true);
    // listen to the insert button
    button.addSelectionListener(new SelectionListener() {

        public void widgetDefaultSelected(SelectionEvent e) {
        }

        public void widgetSelected(SelectionEvent e) {
            boolean valid = true;
            String city = null;
            int country = 0;
            int bYear = 0;
            int dYear = 0;
            if ((nameText.getText() == "") || (birthText.getText() == "") || (countryCombo.getText() == ""))
                okMessageBox("Please insert person name, year of birth and origin country.");
            else {
                try {
                    bYear = Integer.parseInt(birthText.getText());
                    if ((bYear < 1800) || (bYear > year)) {
                        okMessageBox("Birth year is not valid. Must be between 1800 and " + (year) + ".");
                        valid = false;
                    }
                } catch (NumberFormatException nfe) {
                    okMessageBox("Birth year must be a number.");
                    valid = false;
                }
                if (deathText.getText() != "") {
                    try {
                        dYear = Integer.parseInt(deathText.getText());
                        if ((dYear < bYear) || (dYear > year)) {
                            okMessageBox("Death year is not valid. Must be between the birth year and " + (year) + ".");
                            valid = false;
                        }
                    } catch (NumberFormatException nfe) {
                        okMessageBox("Death year must be a number.");
                        valid = false;
                    }
                }
                if (cityText.getText() != "") {
                    city = cityText.getText();
                }
                String id = getID(countriesList, countryCombo.getText());
                if (id != null)
                    country = Integer.parseInt(id);
                else {
                    okMessageBox("Origin country is not valid.");
                    valid = false;
                }
                if (valid) {
                    // inserting
                    AbsType person = new PersonEntity(0, nameText.getText(), bYear, city, country, dYear);
                    try {
                        pool.execute(DataManager.insertPersonData(PersonDataEnum.PERSON, person, false));
                    } catch (InterruptedException e1) {
                        e1.printStackTrace();
                    }
                }
            }
        }
    });
    bar.setSpacing(8);
    insertPerson.setSize((shell.getShell().getSize().x) - 5, (shell.getShell().getSize().y) / 3);
}
