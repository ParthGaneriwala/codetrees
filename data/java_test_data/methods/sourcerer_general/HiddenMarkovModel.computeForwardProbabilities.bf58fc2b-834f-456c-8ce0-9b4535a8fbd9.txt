private static ArrayList<HashMap<State, Double>> computeForwardProbabilities(ArrayList<Exon> exons, ArrayList<Exon> expectedValues, ArrayList<Exon> stdDeviations, int nSamples, Gamma gamma, double gammaK, double gammaTheta, double gammaSNPsK, double gammaSNPsTheta) {
    ArrayList<HashMap<State, Double>> ForwardProbability = new ArrayList<HashMap<State, Double>>();
    HashMap<State, Double> initialProbabilities = new HashMap<State, Double>();
    for (State s : HiddenMarkovModel.States.values()) if (s.stateName == State.NORMAL)
        initialProbabilities.put(s, 0.0);
    else
        initialProbabilities.put(s, Double.NEGATIVE_INFINITY);
    ForwardProbability.add(initialProbabilities);
    for (int exonIndex = 1; exonIndex < exons.size(); exonIndex++) {
        Exon e = exons.get(exonIndex);
        Exon expected = expectedValues.get(exonIndex);
        Exon stdDev = stdDeviations.get(exonIndex);
        HashMap<State, Double> prob = new HashMap<State, Double>();
        for (State currentState : HiddenMarkovModel.States.values()) {
            int lengthOfIntron = e.posLeft - exons.get(exonIndex - 1).posRight;
            // TODO: hack for normal numbers. need to figure out this case:
            /*
				 * chr16	48820563	48820609	TRF4-2
					chr16	48820563	48826720	PAPD5
				 */
            lengthOfIntron = Math.abs(lengthOfIntron);
            Double sum = null;
            for (State prevState : HiddenMarkovModel.States.values()) {
                /*
					 * log(p + q) = p_prime + log( 1 + exp(q_prime - p_prime) )
					 * p_prime = log p
					 * q_prime = log q
					 * 
					 * p = f*transition prob
					 * p_prime = f_prime + log transition prob
					 */
                double f_prime = ForwardProbability.get(exonIndex - 1).get(prevState);
                double logTransProb = Math.log(State.getTransitionProbability(prevState, currentState, lengthOfIntron, e.length()));
                double p_prime = f_prime + logTransProb;
                if (sum == null)
                    sum = p_prime;
                else
                    sum = Probability.logSum(sum, p_prime);
            /* Debugging statement
					 * System.out.println("Fwd: " + e.posLeft + "\t" + currentState.stateName + "\t" + prevState.stateName 
					 * + "\t" + f_prime + "\t" + logTransProb + "(" 
					 * + State.getTransitionProbability(prevState, currentState, lengthOfIntron, e.length()) 
					 * +")\t" + p_prime + "\t" + sum);  
					 */
            }
            if (sum > 0)
                System.out.println("Fwd: No log(prob) should be > 0 " + e);
            if (sum == 0)
                System.out.println("Fwd: Sum == 0\t " + e.posLeft + "\t" + currentState);
            if (// deals with the case that probability = 0 and hence log probability is undefined
            Double.isNaN(sum + State.getLogEmissionProbability(e, expected, stdDev, currentState, nSamples, gamma, gammaK, gammaTheta, gammaSNPsK, gammaSNPsTheta)))
                prob.put(currentState, Double.NEGATIVE_INFINITY);
            else
                prob.put(currentState, (sum + State.getLogEmissionProbability(e, expected, stdDev, currentState, nSamples, gamma, gammaK, gammaTheta, gammaSNPsK, gammaSNPsTheta)));
        }
        // if all prob are -Inf, then its useless
        boolean allInf = true;
        for (Double p : prob.values()) if (!Double.isInfinite(p)) {
            allInf = false;
            break;
        }
        if (allInf)
            System.out.println(e + "\tAll forward prob are -Inf\t" + expected);
        ForwardProbability.add(prob);
    }
    return (ForwardProbability);
}
