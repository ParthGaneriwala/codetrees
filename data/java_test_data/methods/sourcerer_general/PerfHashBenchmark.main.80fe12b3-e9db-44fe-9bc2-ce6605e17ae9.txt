public static void main(String[] args) throws Exception {
    // Parse args
    try {
        _read_ratio = check(args[0], "read%", 0, 100);
        _thread_min = check(args[1], "thread_min", 1, 100000);
        _thread_max = check(args[2], "thread_max", 1, 100000);
        _thread_incr = check(args[3], "thread_incr", 1, 100000);
        _table_size = check(args[4], "table_size", 1, 100000000);
        _map_impl = check(args[5], "implementation", -1, names.length);
        _gr = (_read_ratio << 20) / 100;
        _pr = (((1 << 20) - _gr) >> 1) + _gr;
        int trips = (_thread_max - _thread_min) / _thread_incr;
        _thread_max = trips * _thread_incr + _thread_min;
    } catch (Exception e) {
        System.out.println("Usage: PerfHashBenchmark" + " read%[0=churn test]" + " thread-min thread-max thread-increment" + " hash_table_size" + " impl[All=0,Hashtable=1,HerlihyHashSet=2,CHM_16=3,CHM_256=4,CHM_4096=5,NonBlockingHashMap=6,LHM=7,CLHM_16=8,CLHM_256=9,CLHM_4096=10]");
        throw e;
    }
    System.out.print(_read_ratio + "% gets, " + ((100 - _read_ratio) >> 1) + "% inserts, " + ((100 - _read_ratio) >> 1) + "% removes, " + "table_size=" + _table_size);
    if (_read_ratio == 0) {
        System.out.print(" -- churn");
    }
    String name = _map_impl == -1 ? "Best" : names[_map_impl];
    System.out.println(" " + name);
    System.out.println("Threads from " + _thread_min + " to " + _thread_max + " by " + _thread_incr);
    // Do some warmup
    int keymax = 1;
    while (keymax < _table_size) {
        keymax <<= 1;
    }
    if (_read_ratio == 0) {
        // The churn test uses a large key set
        keymax = 1024 * 1024;
    }
    KEYS = new String[keymax];
    int[] histo = new int[64];
    for (int i = 0; i < KEYS.length; i++) {
        KEYS[i] = String.valueOf(i) + "abc" + String.valueOf(i * 17 + 123);
        histo[KEYS[i].hashCode() >>> (32 - 6)]++;
    }
    // verify good key spread to help ConcurrentHashMap
    // for( int i=0; i<histo.length; i++ )
    // System.out.print(" "+histo[i]);
    System.out.println("Warmup -variance: ");
    run_till_stable(Math.min(_thread_min, 2), /*extra warmup round for churn*/
    _read_ratio == 0 ? 2 : 1);
    // Now do the real thing
    System.out.print("==== Counter  Threads   Trial: ");
    // Number of Trials
    int num_trials = 7;
    for (int i = 0; i < num_trials; i++) {
        System.out.printf(" %3d       ", i);
    }
    System.out.println("   Avg      Stddev");
    for (int i = _thread_min; i <= _thread_max; i += _thread_incr) {
        run_till_stable(i, num_trials);
    }
}
