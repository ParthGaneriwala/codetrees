static String getTree(IClusterTreeConstructor utc, double[][] dMatrix, String[] filesList) throws Exception {
    String xmlTree = utc.ConstructXMLTree(dMatrix);
    File f = new File("test.tree");
    FileInputStream fis = new FileInputStream(f);
    byte[] data = new byte[(int) f.length()];
    fis.read(data);
    fis.close();
    String phyTree = new String(data);
    ArrayList bl_al = new ArrayList();
    Random rand = new Random();
    double sum = 0;
    for (int i = 0; i < 2 * dMatrix.length - 3; i++) {
        double number = 1 + rand.nextInt(dMatrix.length) + rand.nextDouble();
        sum += number;
        bl_al.add(new Double(number));
    }
    double scale_factor = sum / ((double) (2 * dMatrix.length - 3) * evolution_rate);
    for (int i = 0; i < 2 * dMatrix.length - 3; i++) {
        Double number = (Double) bl_al.get(i);
        number = new Double(number.doubleValue() / scale_factor);
        bl_al.set(i, number);
    }
    for (int i = dMatrix.length - 1; i >= 0; i--) {
        phyTree = phyTree.replaceAll(i + "", getUniqueCode(i));
    }
    for (int i = dMatrix.length - 1; i >= 0; i--) {
        if (bl_al.get(0).toString().length() < 8) {
            phyTree = phyTree.replaceFirst(getUniqueCode(i), getUniqueCode(i) + ":" + bl_al.get(0).toString());
        } else {
            phyTree = phyTree.replaceFirst(getUniqueCode(i), getUniqueCode(i) + ":" + bl_al.get(0).toString().substring(0, 8));
        }
        bl_al.remove(0);
        phyTree = phyTree.replaceAll(getUniqueCode(i), filesList[i].substring(filesList[i].lastIndexOf("\\") + 1));
    }
    String newPhyTree = "";
    for (int i = 0; i < phyTree.length(); i++) {
        char c = phyTree.charAt(i);
        if (c == ')' && i < phyTree.length() - 2) {
            if (bl_al.get(0).toString().length() < 8) {
                newPhyTree += phyTree.charAt(i) + ":" + bl_al.get(0).toString();
            } else {
                newPhyTree += phyTree.charAt(i) + ":" + bl_al.get(0).toString().substring(0, 8);
            }
            bl_al.remove(0);
        } else {
            newPhyTree += phyTree.charAt(i);
        }
    }
    phyTree = newPhyTree;
    System.out.println(phyTree);
    FileOutputStream fos = new FileOutputStream("test.xml");
    fos.write(xmlTree.getBytes());
    fos.close();
    // fos = new FileOutputStream(dMatrix.length + ".tree");
    fos = new FileOutputStream("clustio.tree");
    fos.write(phyTree.getBytes());
    fos.close();
    return phyTree;
}
