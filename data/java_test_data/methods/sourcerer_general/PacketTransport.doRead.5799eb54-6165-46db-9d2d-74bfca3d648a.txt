private void doRead() {
    int len = 0;
    dout(0, "recv");
    ByteBuffer recvHeader = recvPacket.getHeader();
    ByteBuffer recvData = recvPacket.getData();
    if (recvHeader.position() < recvHeader.limit()) {
        try {
            len = sch.read(recvHeader);
        } catch (Exception e) {
            e.printStackTrace();
            len = -1;
        }
        // socket has closed
        if (len < 0) {
            close();
            return;
        }
        if (// header is complete
        recvHeader.position() == recvHeader.limit()) {
            int dl = recvPacket.getDataLength();
            if (dl > MAX_PACKET_SIZE) {
                System.out.println("Protocol error data length too long");
                close();
                return;
            }
            if (dl == 0) {
                recvHeader.flip();
                recvPacket.setData(null);
                recvPacket.post();
                // build an empty receive packet
                recvPacket = new Packet(client, Packet.RECEIVE, null, null);
            } else {
                recvData = ByteBuffer.allocate(dl);
                recvPacket.setData(recvData);
            }
        }
    } else {
        if (recvData.position() < recvData.limit()) {
            try {
                len = sch.read(recvData);
            } catch (Exception e) {
                e.printStackTrace();
                len = -1;
            }
            // socket has closed
            if (len < 0) {
                close();
                return;
            }
            if (recvData.position() == recvData.limit()) {
                recvHeader.flip();
                recvData.flip();
                recvPacket.post();
                // build an empty receive packet
                recvPacket = new Packet(client, Packet.RECEIVE, null, null);
            }
        }
    }
}
