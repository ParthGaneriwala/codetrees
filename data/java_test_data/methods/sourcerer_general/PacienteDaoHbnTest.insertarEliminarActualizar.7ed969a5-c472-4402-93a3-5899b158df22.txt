@Test
public void insertarEliminarActualizar() {
    try {
        pacientes = pacienteDao.getPacientes();
        Assert.assertNotNull(pacientes);
        int cantidadInicial = pacientes.size();
        // Se prueba el metodo insertar()
        paciente = new Paciente();
        paciente.setNombres("Yelina Isabel");
        paciente.setApellidoPaterno("Huaroto");
        paciente.setApellidoMaterno("De La Cruz");
        paciente.setDireccion("Av. Bolivar 337");
        paciente.setEmpresa(empresa);
        paciente.setTelefonoFijo("2790623");
        paciente.setTelefonoCelular("99846835");
        paciente.setFechaNacimiento(new Date(new GregorianCalendar(1981, 1, 20, 0, 0, 0).getTimeInMillis()));
        paciente.setDepProvDist(new DepProvDist(new UbigeoPK("15", "01", "10"), null, null, null));
        paciente.setActivo(Bean.NO_ACTIVO);
        Assert.assertTrue(pacienteDao.insertar(paciente));
        pacientes = null;
        pacientes = pacienteDao.getPacientes();
        Assert.assertNotNull(pacientes);
        int cantidadFinal = pacientes.size();
        Assert.assertEquals(cantidadFinal, cantidadInicial + 1);
        // Se prueba el m�todo actualizar();
        paciente.setActivo(Bean.ACTIVO);
        Assert.assertTrue(pacienteDao.actualizar(paciente));
        Integer personaId = paciente.getPersonaId();
        paciente = null;
        paciente = pacienteDao.getPacientePorId(personaId);
        Assert.assertNotNull(paciente);
        Assert.assertEquals(paciente.getActivo(), Bean.ACTIVO);
        // Se prueba el m�todo eliminar
        Assert.assertTrue(pacienteDao.eliminar(paciente));
        pacientes = null;
        pacientes = pacienteDao.getPacientes();
        Assert.assertNotNull(pacientes);
        cantidadFinal = pacientes.size();
        Assert.assertEquals(cantidadFinal, cantidadInicial);
    } catch (Exception e) {
        e.printStackTrace();
        Assert.assertTrue(false);
    }
}
