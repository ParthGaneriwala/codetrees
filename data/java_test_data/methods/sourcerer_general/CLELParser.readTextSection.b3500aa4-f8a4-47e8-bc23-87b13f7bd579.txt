private void readTextSection() throws IOException {
    // Is there always a .text section header?
    ArrayList<Byte> text = new ArrayList<Byte>();
    int size = getTextSectionHeader().getSizeOfRawData();
    int i;
    for (i = 0; i < size; i++) {
        try {
            // read entire text section
            text.add(new Byte(inFile.readByte()));
        } catch (IOException ioe) {
            System.out.println("Error: Reading Text Section " + Offset);
            ioe.printStackTrace();
            throw ioe;
        }
    }
    Offset += size;
    RVA += size;
    int virt_addr = getTextSectionHeader().getVirtualAddress();
    int entry_point = standardFields.getEntryPointRVA() - virt_addr;
    readEntryPoint(text, entry_point);
    int clr_header_off = dataDirectories.getCLRHeader().getOffset();
    clr_header_off -= virt_addr;
    readCLRHeader(text, clr_header_off);
    int import_table_off = dataDirectories.getImportTable().getOffset();
    import_table_off -= virt_addr;
    readImportTable(text, import_table_off);
    int iat_off = dataDirectories.getIAT().getOffset();
    iat_off -= virt_addr;
    readImportAddressTable(text, iat_off);
    int ilt = importTable.getImportLookupTable();
    ilt -= virt_addr;
    readImportLookupTable(text, ilt);
    int nt = importAddressTable.getNameTableRVA();
    nt -= virt_addr;
    readNameTable(text, nt);
    int debug_off = dataDirectories.getDebug().getOffset();
    if (debug_off != 0) {
        debug_off -= virt_addr;
        readDebugTable(text, debug_off);
    }
    int mdr = clrHeader.getMetaData();
    mdr -= virt_addr;
    readMetaDataRoot(text, mdr);
    readMetaDataStreamHeaders(text, mdr + metaDataRoot.getLengthBytes());
    // heap rows count
    NumTableRows = new ArrayList<Integer>();
    // get all heaps
    MetaDataStreamHeader mdsh = getStringsMetaDataStreamHeader();
    if (mdsh != null) {
        int s_off = MetaDataRootOffset + mdsh.getOffset();
        readStringsHeap(text, s_off, mdsh.getSize());
    } else
        NumTableRows.add(new Integer(0));
    mdsh = getUSMetaDataStreamHeader();
    if (mdsh != null) {
        int u_off = MetaDataRootOffset + mdsh.getOffset();
        readUSHeap(text, u_off, mdsh.getSize());
    } else
        NumTableRows.add(new Integer(0));
    mdsh = getBlobMetaDataStreamHeader();
    if (mdsh != null) {
        int b_off = MetaDataRootOffset + mdsh.getOffset();
        readBlobHeap(text, b_off, mdsh.getSize());
    } else
        NumTableRows.add(new Integer(0));
    mdsh = getGUIDMetaDataStreamHeader();
    if (mdsh != null) {
        int g_off = MetaDataRootOffset + mdsh.getOffset();
        readGUIDHeap(text, g_off, mdsh.getSize());
    } else
        NumTableRows.add(new Integer(0));
    mdsh = getPoundTildaMetaDataStreamHeader();
    if (mdsh != null) {
        int mdsh_off = MetaDataRootOffset + mdsh.getOffset();
        readPoundTildaStream(text, mdsh_off, NumTableRows);
    }
    int[] res = Tools.SplitLong(clrHeader.getResources());
    if (res[1] != 0) {
        res[1] -= virt_addr;
        readCLRResources(text, res[1]);
    }
    // methoddef
    StreamTable st = poundTildaStream.getStreamTable(CLELConstants.METHODDEF_TABLE);
    if (st != null) {
        methodHeaders = new ArrayList<MethodHeader>();
        int method_off;
        ArrayList<StreamTableRow> rows = st.getRows();
        StreamTableRow r;
        for (i = 0; i < rows.size(); i++) {
            r = rows.get(i);
            method_off = r.getMethodDefRVA();
            if (method_off != 0)
                readMethodHeader(text, method_off - virt_addr, method_off);
        }
    }
}
