@RequestMapping("/search.do")
public ModelAndView search(HttpServletRequest request, HttpServletResponse response) {
    String userid = (String) request.getSession().getAttribute("userid");
    String taskid = ServletRequestUtils.getStringParameter(request, "taskid", "0");
    String searchtype = ServletRequestUtils.getStringParameter(request, "searchtype", "search");
    // Query
    String q = ServletRequestUtils.getStringParameter(request, "q", "");
    String gse = ServletRequestUtils.getStringParameter(request, "gse", "");
    String gpl = ServletRequestUtils.getStringParameter(request, "gpl", "");
    String oper = ServletRequestUtils.getStringParameter(request, "oper", "");
    int operType = 0;
    if (oper.equals("AND"))
        operType = GeneDao.SEARCH_OPER_AND;
    else if (oper.equals("OR"))
        operType = GeneDao.SEARCH_OPER_OR;
    System.out.println("q : " + q);
    System.out.println("gse : " + gse);
    System.out.println("gpl : " + gpl);
    Gpl gplObject = geneService.readGplByPk(gpl);
    List<Gse> gseList = null;
    List<String> gpl2gseList = null;
    String[] keywordParts = null;
    if (q != null) {
        q = q.replace("_/", " ");
        keywordParts = q.split(" ");
    }
    try {
        if (taskid.equals("0")) {
            if (gpl != null) {
                gseList = geneService.readGse(keywordParts, GeneDao.ONLY_SUMMARY, operType);
                gpl2gseList = geneService.readGpl2gse(gpl);
            } else if (gse != null) {
                gseList = geneService.readGseById(gse);
            } else {
                gseList = geneService.readGse(keywordParts, GeneDao.ONLY_SUMMARY, operType);
            }
        } else {
            gseList = geneService.readGseByTaskid(userid, taskid);
        }
        if (gseList != null && q != null) {
            for (int count = 0; count < gseList.size(); count++) {
                Gse tmpGse = gseList.get(count);
                if (gpl2gseList != null && gpl2gseList.indexOf(tmpGse.getId()) < 0) {
                    gseList.remove(count);
                    count--;
                } else {
                    // Highlight Keywords
                    if (keywordParts != null) {
                        for (int kwCount = 0; kwCount < keywordParts.length; kwCount++) {
                            tmpGse.setTitle(tmpGse.getTitle().replace(keywordParts[kwCount], "<span style=\"color:red\">" + keywordParts[kwCount] + "</span>"));
                            tmpGse.setSummary(tmpGse.getSummary().replace(keywordParts[kwCount], "<span style=\"color:red\">" + keywordParts[kwCount] + "</span>"));
                        }
                    }
                }
            }
        }
    } catch (Exception e) {
        e.printStackTrace();
    }
    ModelAndView model = new ModelAndView("search");
    if (gseList != null) {
        model.addObject("gseList", gseList);
        model.addObject("totalSize", gseList.size());
        model.addObject("gpl", gpl);
        model.addObject("gplObject", gplObject);
        model.addObject("searchtype", searchtype);
    }
    return model;
}
