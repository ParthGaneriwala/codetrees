public final java_cup.runtime.Symbol CUP$parser$do_action(int CUP$parser$act_num, java_cup.runtime.lr_parser CUP$parser$parser, java.util.Stack CUP$parser$stack, int CUP$parser$top) throws java.lang.Exception {
    /* Symbol object for return from actions */
    java_cup.runtime.Symbol CUP$parser$result;
    /* select the action based on the action number */
    switch(CUP$parser$act_num) {
        /*. . . . . . . . . . . . . . . . . . . .*/
        case // expr ::= LPAREN expr RPAREN
        12:
            {
                Integer RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                Integer e = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                RESULT = e;
                CUP$parser$result = new java_cup.runtime.Symbol(3, /*expr*/
                ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
            }
            return CUP$parser$result;
        /*. . . . . . . . . . . . . . . . . . . .*/
        case // expr ::= MINUS expr
        11:
            {
                Integer RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;
                Integer e = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;
                RESULT = new Integer(0 - e.intValue());
                CUP$parser$result = new java_cup.runtime.Symbol(3, /*expr*/
                ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
            }
            return CUP$parser$result;
        /*. . . . . . . . . . . . . . . . . . . .*/
        case // expr ::= NUMBER
        10:
            {
                Integer RESULT = null;
                int nleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;
                int nright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;
                Integer n = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;
                RESULT = n;
                CUP$parser$result = new java_cup.runtime.Symbol(3, /*expr*/
                ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
            }
            return CUP$parser$result;
        /*. . . . . . . . . . . . . . . . . . . .*/
        case // expr ::= expr MOD expr
        9:
            {
                Integer RESULT = null;
                int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
                int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
                Integer e1 = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;
                int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;
                Integer e2 = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;
                RESULT = new Integer(e1.intValue() % e2.intValue());
                CUP$parser$result = new java_cup.runtime.Symbol(3, /*expr*/
                ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
            }
            return CUP$parser$result;
        /*. . . . . . . . . . . . . . . . . . . .*/
        case // expr ::= expr DIVIDE expr
        8:
            {
                Integer RESULT = null;
                int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
                int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
                Integer e1 = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;
                int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;
                Integer e2 = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;
                RESULT = new Integer(e1.intValue() / e2.intValue());
                CUP$parser$result = new java_cup.runtime.Symbol(3, /*expr*/
                ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
            }
            return CUP$parser$result;
        /*. . . . . . . . . . . . . . . . . . . .*/
        case // expr ::= expr TIMES expr
        7:
            {
                Integer RESULT = null;
                int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
                int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
                Integer e1 = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;
                int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;
                Integer e2 = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;
                RESULT = new Integer(e1.intValue() * e2.intValue());
                CUP$parser$result = new java_cup.runtime.Symbol(3, /*expr*/
                ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
            }
            return CUP$parser$result;
        /*. . . . . . . . . . . . . . . . . . . .*/
        case // expr ::= expr MINUS expr
        6:
            {
                Integer RESULT = null;
                int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
                int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
                Integer e1 = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;
                int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;
                Integer e2 = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;
                RESULT = new Integer(e1.intValue() - e2.intValue());
                CUP$parser$result = new java_cup.runtime.Symbol(3, /*expr*/
                ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
            }
            return CUP$parser$result;
        /*. . . . . . . . . . . . . . . . . . . .*/
        case // expr ::= expr PLUS expr
        5:
            {
                Integer RESULT = null;
                int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
                int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
                Integer e1 = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;
                int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;
                Integer e2 = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;
                RESULT = new Integer(e1.intValue() + e2.intValue());
                CUP$parser$result = new java_cup.runtime.Symbol(3, /*expr*/
                ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
            }
            return CUP$parser$result;
        /*. . . . . . . . . . . . . . . . . . . .*/
        case // expr_part ::= expr NT$0 SEMI
        4:
            {
                Object RESULT = null;
                // propagate RESULT from NT$0
                if (((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value != null)
                    RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
                Integer e = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                CUP$parser$result = new java_cup.runtime.Symbol(2, /*expr_part*/
                ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
            }
            return CUP$parser$result;
        /*. . . . . . . . . . . . . . . . . . . .*/
        case // NT$0 ::=
        3:
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;
                Integer e = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;
                System.out.println("= " + e);
                CUP$parser$result = new java_cup.runtime.Symbol(4, /*NT$0*/
                ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
            }
            return CUP$parser$result;
        /*. . . . . . . . . . . . . . . . . . . .*/
        case // expr_list ::= expr_part
        2:
            {
                Object RESULT = null;
                CUP$parser$result = new java_cup.runtime.Symbol(1, /*expr_list*/
                ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
            }
            return CUP$parser$result;
        /*. . . . . . . . . . . . . . . . . . . .*/
        case // $START ::= expr_list EOF
        1:
            {
                Object RESULT = null;
                int start_valleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int start_valright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                Object start_val = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                RESULT = start_val;
                CUP$parser$result = new java_cup.runtime.Symbol(0, /*$START*/
                ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
            }
            /* ACCEPT */
            CUP$parser$parser.done_parsing();
            return CUP$parser$result;
        /*. . . . . . . . . . . . . . . . . . . .*/
        case // expr_list ::= expr_list expr_part
        0:
            {
                Object RESULT = null;
                CUP$parser$result = new java_cup.runtime.Symbol(1, /*expr_list*/
                ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
            }
            return CUP$parser$result;
        /* . . . . . .*/
        default:
            throw new Exception("Invalid action number found in internal parse table");
    }
}
