public void createPackageContents() {
    if (isCreated)
        return;
    isCreated = true;
    // Create classes and their features
    basePowerEClass = createEClass(BASE_POWER);
    createEReference(basePowerEClass, BASE_POWER__BASE_POWER);
    baseVoltageEClass = createEClass(BASE_VOLTAGE);
    createEReference(baseVoltageEClass, BASE_VOLTAGE__IS_DC);
    createEReference(baseVoltageEClass, BASE_VOLTAGE__NOMINAL_VOLTAGE);
    basicIntervalScheduleEClass = createEClass(BASIC_INTERVAL_SCHEDULE);
    createEReference(basicIntervalScheduleEClass, BASIC_INTERVAL_SCHEDULE__START_TIME);
    createEAttribute(basicIntervalScheduleEClass, BASIC_INTERVAL_SCHEDULE__VALUE1_MULTIPLIER);
    createEAttribute(basicIntervalScheduleEClass, BASIC_INTERVAL_SCHEDULE__VALUE1_UNIT);
    createEAttribute(basicIntervalScheduleEClass, BASIC_INTERVAL_SCHEDULE__VALUE2_MULTIPLIER);
    createEAttribute(basicIntervalScheduleEClass, BASIC_INTERVAL_SCHEDULE__VALUE2_UNIT);
    bayEClass = createEClass(BAY);
    createEReference(bayEClass, BAY__BAY_ENERGY_MEAS_FLAG);
    createEReference(bayEClass, BAY__BAY_POWER_MEAS_FLAG);
    createEAttribute(bayEClass, BAY__BREAKER_CONFIGURATION);
    createEAttribute(bayEClass, BAY__BUS_BAR_CONFIGURATION);
    equipmentContainerEClass = createEClass(EQUIPMENT_CONTAINER);
    connectivityNodeContainerEClass = createEClass(CONNECTIVITY_NODE_CONTAINER);
    powerSystemResourceEClass = createEClass(POWER_SYSTEM_RESOURCE);
    conductingEquipmentEClass = createEClass(CONDUCTING_EQUIPMENT);
    createEAttribute(conductingEquipmentEClass, CONDUCTING_EQUIPMENT__PHASES);
    equipmentEClass = createEClass(EQUIPMENT);
    createEReference(equipmentEClass, EQUIPMENT__NORMALLY_IN_SERVICE);
    curveEClass = createEClass(CURVE);
    createEAttribute(curveEClass, CURVE__CURVE_STYLE);
    createEAttribute(curveEClass, CURVE__XMULTIPLIER);
    createEAttribute(curveEClass, CURVE__XUNIT);
    createEAttribute(curveEClass, CURVE__Y1_MULTIPLIER);
    createEAttribute(curveEClass, CURVE__Y1_UNIT);
    createEAttribute(curveEClass, CURVE__Y2_MULTIPLIER);
    createEAttribute(curveEClass, CURVE__Y2_UNIT);
    createEAttribute(curveEClass, CURVE__Y3_MULTIPLIER);
    createEAttribute(curveEClass, CURVE__Y3_UNIT);
    curveDataEClass = createEClass(CURVE_DATA);
    createEReference(curveDataEClass, CURVE_DATA__XVALUE);
    createEReference(curveDataEClass, CURVE_DATA__Y1VALUE);
    createEReference(curveDataEClass, CURVE_DATA__Y2VALUE);
    createEReference(curveDataEClass, CURVE_DATA__Y3VALUE);
    geographicalRegionEClass = createEClass(GEOGRAPHICAL_REGION);
    irregularIntervalScheduleEClass = createEClass(IRREGULAR_INTERVAL_SCHEDULE);
    irregularTimePointEClass = createEClass(IRREGULAR_TIME_POINT);
    createEReference(irregularTimePointEClass, IRREGULAR_TIME_POINT__TIME);
    createEReference(irregularTimePointEClass, IRREGULAR_TIME_POINT__VALUE1);
    createEReference(irregularTimePointEClass, IRREGULAR_TIME_POINT__VALUE2);
    operatingParticipantEClass = createEClass(OPERATING_PARTICIPANT);
    operatingShareEClass = createEClass(OPERATING_SHARE);
    createEReference(operatingShareEClass, OPERATING_SHARE__PERCENTAGE);
    psrTypeEClass = createEClass(PSR_TYPE);
    psrListEClass = createEClass(PSR_LIST);
    createEReference(psrListEClass, PSR_LIST__TYPE_PSR_LIST);
    regularIntervalScheduleEClass = createEClass(REGULAR_INTERVAL_SCHEDULE);
    createEReference(regularIntervalScheduleEClass, REGULAR_INTERVAL_SCHEDULE__END_TIME);
    createEReference(regularIntervalScheduleEClass, REGULAR_INTERVAL_SCHEDULE__TIME_STEP);
    regularTimePointEClass = createEClass(REGULAR_TIME_POINT);
    createEReference(regularTimePointEClass, REGULAR_TIME_POINT__SEQUENCE_NUMBER);
    createEReference(regularTimePointEClass, REGULAR_TIME_POINT__VALUE1);
    createEReference(regularTimePointEClass, REGULAR_TIME_POINT__VALUE2);
    reportingGroupEClass = createEClass(REPORTING_GROUP);
    reportingSuperGroupEClass = createEClass(REPORTING_SUPER_GROUP);
    subGeographicalRegionEClass = createEClass(SUB_GEOGRAPHICAL_REGION);
    substationEClass = createEClass(SUBSTATION);
    terminalEClass = createEClass(TERMINAL);
    createEReference(terminalEClass, TERMINAL__CONNECTED);
    createEReference(terminalEClass, TERMINAL__SEQUENCE_NUMBER);
    voltageLevelEClass = createEClass(VOLTAGE_LEVEL);
    createEReference(voltageLevelEClass, VOLTAGE_LEVEL__HIGH_VOLTAGE_LIMIT);
    createEReference(voltageLevelEClass, VOLTAGE_LEVEL__LOW_VOLTAGE_LIMIT);
    identifiedObjectEClass = createEClass(IDENTIFIED_OBJECT);
    createEReference(identifiedObjectEClass, IDENTIFIED_OBJECT__ALIAS_NAME);
    createEReference(identifiedObjectEClass, IDENTIFIED_OBJECT__DESCRIPTION);
    createEReference(identifiedObjectEClass, IDENTIFIED_OBJECT__LOCAL_NAME);
    createEReference(identifiedObjectEClass, IDENTIFIED_OBJECT__MRID);
    createEReference(identifiedObjectEClass, IDENTIFIED_OBJECT__NAME);
    createEReference(identifiedObjectEClass, IDENTIFIED_OBJECT__PATH_NAME);
    // Create enums
    breakerConfigurationEEnum = createEEnum(BREAKER_CONFIGURATION);
    busbarConfigurationEEnum = createEEnum(BUSBAR_CONFIGURATION);
    companyTypeEEnum = createEEnum(COMPANY_TYPE);
    phaseCodeEEnum = createEEnum(PHASE_CODE);
    curveStyleEEnum = createEEnum(CURVE_STYLE);
}
