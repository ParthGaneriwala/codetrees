private void parse(String number) throws NumberFormatException {
    int length = number.length();
    digits = new StringBuffer(length);
    int state = INITIAL;
    int mantissaStart = -1;
    boolean foundMantissaDigit = false;
    // sometimes we don't know if a zero will be
    // significant or not when it is encountered.
    // keep track of the number of them so that
    // the all can be made significant if we find
    // out that they are.
    int zeroCount = 0;
    int leadZeroCount = 0;
    for (int i = 0; i < length; i++) {
        char c = number.charAt(i);
        switch(c) {
            case '.':
                {
                    switch(state) {
                        case INITIAL:
                        case LEADZEROS:
                            {
                                state = LEADZEROSDOT;
                            }
                            break;
                        case MIDZEROS:
                            {
                                // are more than just trailing placeholders.
                                for (int j = 0; j < zeroCount; j++) {
                                    digits.append('0');
                                }
                                zeroCount = 0;
                                state = DIGITSDOT;
                            }
                            break;
                        case DIGITS:
                            {
                                state = DIGITSDOT;
                            }
                            break;
                        default:
                            {
                                throw new NumberFormatException("Unexpected character '" + c + "' at position " + i);
                            }
                    }
                }
                break;
            case '+':
                {
                    switch(state) {
                        case INITIAL:
                            {
                                sign = true;
                                state = LEADZEROS;
                            }
                            break;
                        case MANTISSA:
                            {
                                state = MANTISSADIGIT;
                            }
                            break;
                        default:
                            {
                                throw new NumberFormatException("Unexpected character '" + c + "' at position " + i);
                            }
                    }
                }
                break;
            case '-':
                {
                    switch(state) {
                        case INITIAL:
                            {
                                sign = false;
                                state = LEADZEROS;
                            }
                            break;
                        case MANTISSA:
                            {
                                state = MANTISSADIGIT;
                            }
                            break;
                        default:
                            {
                                throw new NumberFormatException("Unexpected character '" + c + "' at position " + i);
                            }
                    }
                }
                break;
            case '0':
                {
                    switch(state) {
                        case INITIAL:
                        case LEADZEROS:
                            {
                                // only significant if number
                                // is all zeros.
                                zeroCount++;
                                leadZeroCount++;
                                state = LEADZEROS;
                            }
                            break;
                        case MIDZEROS:
                        case DIGITS:
                            {
                                // only significant if followed
                                // by a decimal point or nonzero digit.
                                mantissa++;
                                zeroCount++;
                                state = MIDZEROS;
                            }
                            break;
                        case LEADZEROSDOT:
                            {
                                // only significant if number
                                // is all zeros.
                                mantissa--;
                                zeroCount++;
                                state = LEADZEROSDOT;
                            }
                            break;
                        case DIGITSDOT:
                            {
                                // non-leading zeros after
                                // a decimal point are always
                                // significant.
                                digits.append(c);
                            }
                            break;
                        case MANTISSA:
                        case MANTISSADIGIT:
                            {
                                foundMantissaDigit = true;
                                state = MANTISSADIGIT;
                            }
                            break;
                        default:
                            {
                                throw new NumberFormatException("Unexpected character '" + c + "' at position " + i);
                            }
                    }
                }
                break;
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
                {
                    switch(state) {
                        case INITIAL:
                        case LEADZEROS:
                        case DIGITS:
                            {
                                zeroCount = 0;
                                digits.append(c);
                                mantissa++;
                                state = DIGITS;
                            }
                            break;
                        case MIDZEROS:
                            {
                                // are more than just trailing placeholders.
                                for (int j = 0; j < zeroCount; j++) {
                                    digits.append('0');
                                }
                                zeroCount = 0;
                                digits.append(c);
                                mantissa++;
                                state = DIGITS;
                            }
                            break;
                        case LEADZEROSDOT:
                        case DIGITSDOT:
                            {
                                zeroCount = 0;
                                digits.append(c);
                                state = DIGITSDOT;
                            }
                            break;
                        case MANTISSA:
                        case MANTISSADIGIT:
                            {
                                state = MANTISSADIGIT;
                                foundMantissaDigit = true;
                            }
                            break;
                        default:
                            {
                                throw new NumberFormatException("Unexpected character '" + c + "' at position " + i);
                            }
                    }
                }
                break;
            case 'E':
            case 'e':
                {
                    switch(state) {
                        case INITIAL:
                        case LEADZEROS:
                        case DIGITS:
                        case LEADZEROSDOT:
                        case DIGITSDOT:
                            {
                                // record the starting point of the mantissa
                                // so we can do a substring to get it back later
                                mantissaStart = i + 1;
                                state = MANTISSA;
                            }
                            break;
                        default:
                            {
                                throw new NumberFormatException("Unexpected character '" + c + "' at position " + i);
                            }
                    }
                }
                break;
            default:
                {
                    throw new NumberFormatException("Unexpected character '" + c + "' at position " + i);
                }
        }
    }
    if (mantissaStart != -1) {
        // if we had found an 'E'
        if (!foundMantissaDigit) {
            // we didn't actually find a mantissa to go with.
            throw new NumberFormatException("No digits in mantissa.");
        }
        // parse the mantissa.
        mantissa += Integer.parseInt(number.substring(mantissaStart));
    }
    if (digits.length() == 0) {
        if (zeroCount > 0) {
            // if nothing but zeros all zeros are significant.
            for (int j = 0; j < zeroCount; j++) {
                digits.append('0');
            }
            mantissa += leadZeroCount;
            isZero = true;
            sign = true;
        } else {
            // "e2" "+e2" "+." "." "+" etc.
            throw new NumberFormatException("No digits in number.");
        }
    }
}
