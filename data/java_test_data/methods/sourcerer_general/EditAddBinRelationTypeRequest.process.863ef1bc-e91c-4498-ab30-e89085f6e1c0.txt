public boolean process(Request req, ResponseGroup rg) throws ItemPersistenceException, StaleDataException, InvalidOperationException {
    if (!checkRequest(req)) {
        throw new InvalidOperationException("Invalid edit_add_bin_relation_type operation.");
    }
    EditAddBinRelationTypeRequest r = (EditAddBinRelationTypeRequest) req;
    Model m = DaoUtil.getModelDao().getById(r.getModelId(), true);
    if (m == null) {
        throw new InvalidOperationException("Invalid model ID: " + r.getModelId());
    }
    BinRelationType brt = null;
    if (r.getRelId() != null && (brt = (BinRelationType) DaoUtil.getRelationTypeDao().getById(r.getId(), false)) != null) {
        // An editing operation
        brt.setTypeName(r.getTypeName());
        brt.setLastModifier(r.getRequesterId());
        brt = (BinRelationType) DaoUtil.getRelationTypeDao().save(brt);
    } else {
        // An adding operation
        for (RelationType rt : m.getRelationTypes()) {
            if (rt.getTypeName().equals(r.getTypeName())) {
                throw new InvalidOperationException("Relation type has already existed: " + rt.getTypeName());
            }
        }
        ElementType st = DaoUtil.getElementTypeDao().getById(r.getSourceId(), false);
        if (st == null) {
            throw new InvalidOperationException("Invalid source type ID: " + r.getSourceId());
        }
        ElementType tt = DaoUtil.getElementTypeDao().getById(r.getTargetId(), false);
        if (tt == null) {
            throw new InvalidOperationException("Invalid target type ID: " + r.getTargetId());
        }
        brt = new BinRelationType();
        DataItemUtil.setNewDataItemByUserId(brt, r.getRequesterId());
        brt.setDirected(r.isDirected());
        brt.setHierarchical(r.isHierarchical());
        brt.setModel(m);
        brt.setSourceType(st);
        brt.setTargetType(tt);
        brt.setTypeName(r.getTypeName());
        m.addRelationType(brt);
        brt = (BinRelationType) DaoUtil.getRelationTypeDao().save(brt);
        DaoUtil.getModelDao().save(m);
        r.setRelId(brt.getId());
    }
    DefaultResponse rsp = new DefaultResponse(r);
    rsp.setExecTime(DataItemUtil.formatDate(brt.getLastModifyTime()));
    rsp.setName(Resources.RSP_SUCCESS);
    rg.setBack(rsp);
    DefaultResponse rsp2 = new DefaultResponse(r);
    rsp.setExecTime(DataItemUtil.formatDate(brt.getLastModifyTime()));
    rsp2.setName(Resources.RSP_FORWARD);
    rg.setBroadcast(rsp2);
    return true;
}
