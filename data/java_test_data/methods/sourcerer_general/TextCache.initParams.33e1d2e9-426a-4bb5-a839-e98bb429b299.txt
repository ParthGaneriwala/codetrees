protected void initParams(Database database, String baseFileName) throws HsqlException {
    fileName = baseFileName;
    this.database = database;
    fa = FileUtil.getDefaultInstance();
    HsqlProperties tableprops = HsqlProperties.delimitedArgPairsToProps(fileName, "=", ";", null);
    // -- Get file name
    switch(tableprops.errorCodes.length) {
        case 0:
            throw Trace.error(Trace.TEXT_TABLE_SOURCE, Trace.TEXT_TABLE_SOURCE_FILENAME);
        case 1:
            // source file name is the only key without a value
            fileName = tableprops.errorKeys[0].trim();
            break;
        default:
            throw Trace.error(Trace.TEXT_TABLE_SOURCE, Trace.TEXT_TABLE_SOURCE_VALUE_MISSING, tableprops.errorKeys[1]);
    }
    // -- Get separators:
    HsqlDatabaseProperties dbProps = database.getProperties();
    fs = translateSep(tableprops.getProperty("fs", dbProps.getProperty(HsqlDatabaseProperties.textdb_fs, ",")));
    vs = translateSep(tableprops.getProperty("vs", dbProps.getProperty(HsqlDatabaseProperties.textdb_vs, fs)));
    lvs = translateSep(tableprops.getProperty("lvs", dbProps.getProperty(HsqlDatabaseProperties.textdb_lvs, fs)));
    if (fs.length() == 0 || vs.length() == 0 || lvs.length() == 0) {
        throw Trace.error(Trace.TEXT_TABLE_SOURCE, Trace.TEXT_TABLE_SOURCE_SEPARATOR);
    }
    // -- Get booleans
    ignoreFirst = tableprops.isPropertyTrue("ignore_first", dbProps.isPropertyTrue(HsqlDatabaseProperties.textdb_ignore_first, false));
    isQuoted = tableprops.isPropertyTrue("quoted", dbProps.isPropertyTrue(HsqlDatabaseProperties.textdb_quoted, true));
    isAllQuoted = tableprops.isPropertyTrue("all_quoted", dbProps.isPropertyTrue(HsqlDatabaseProperties.textdb_all_quoted, false));
    // -- Get encoding
    stringEncoding = translateSep(tableprops.getProperty("encoding", dbProps.getProperty(HsqlDatabaseProperties.textdb_encoding, "ASCII")));
    // -- Get size and scale
    int cacheScale = tableprops.getIntegerProperty("cache_scale", dbProps.getIntegerProperty(HsqlDatabaseProperties.textdb_cache_scale, 10, 8, 16));
    int cacheSizeScale = tableprops.getIntegerProperty("cache_size_scale", dbProps.getIntegerProperty(HsqlDatabaseProperties.textdb_cache_size_scale, 10, 8, 20));
    int lookupTableLength = 1 << cacheScale;
    int avgRowBytes = 1 << cacheSizeScale;
    maxCacheSize = lookupTableLength * 3;
    maxCacheBytes = maxCacheSize * avgRowBytes;
    maxDataFileSize = Integer.MAX_VALUE;
    cachedRowPadding = 1;
    cacheFileScale = 1;
}
