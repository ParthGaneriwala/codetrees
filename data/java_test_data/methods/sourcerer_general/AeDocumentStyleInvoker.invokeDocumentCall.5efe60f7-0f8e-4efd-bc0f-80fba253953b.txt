protected void invokeDocumentCall(AeInvokeContext aInvokeContext) throws AeException, RemoteException {
    // this document gets used to create element placeholders for the arguments
    // if they're rpc style and not already documents
    Document simpleTypeDoc = null;
    List orderedParts = aInvokeContext.getOperation().getInput().getMessage().getOrderedParts(null);
    ArrayList list = new ArrayList();
    Map messageData = getMessageData(aInvokeContext);
    List outboundAttachments = addAttachments(aInvokeContext);
    AeWebServiceMessageData outputMsg;
    Vector elems;
    try {
        for (Iterator iter = orderedParts.iterator(); iter.hasNext(); ) {
            Part part = (Part) iter.next();
            Object obj = messageData.get(part.getName());
            // don't add the part to the body if it is supposed to be a header
            if (aInvokeContext.isInputHeader(part.getName()) && obj instanceof Document) {
                Document doc = (Document) obj;
                aInvokeContext.getCall().addHeader(new SOAPHeaderElement(doc.getDocumentElement()));
            } else {
                if (obj instanceof Document) {
                    Element root = ((Document) obj).getDocumentElement();
                    list.add(new SOAPBodyElement(root));
                } else {
                    if (simpleTypeDoc == null) {
                        simpleTypeDoc = AeXmlUtil.newDocument();
                    }
                    Element e = simpleTypeDoc.createElement(part.getName());
                    e.appendChild(simpleTypeDoc.createTextNode(obj.toString()));
                    SOAPBodyElement body = new SOAPBodyElement(e);
                    list.add(body);
                }
            }
        }
        // for document style we receive a vector of body elements from return
        elems = (Vector) aInvokeContext.getCall().invoke(list.toArray());
        // outputMsg will be created for request/response only
        outputMsg = createOutputMessageData(aInvokeContext);
    } finally {
        closeAttachmentStreams(outboundAttachments);
    }
    receiveAttachments(aInvokeContext, outputMsg);
    // if we got a return and expect one then process the body elements
    if (!aInvokeContext.getInvoke().isOneWay()) {
        if (elems != null) {
            int i = 0;
            for (Iterator iter = aInvokeContext.getOperation().getOutput().getMessage().getOrderedParts(null).iterator(); iter.hasNext(); ) {
                Part part = (Part) iter.next();
                if (!aInvokeContext.isOutputHeader(part.getName())) {
                    SOAPBodyElement elem = (SOAPBodyElement) elems.get(i++);
                    Document doc;
                    try {
                        doc = elem.getAsDocument();
                    } catch (Exception ex) {
                        // $NON-NLS-1$
                        throw new AeBusinessProcessException(AeMessages.getString("AeInvokeHandler.ERROR_1"), ex);
                    }
                    Element root = doc.getDocumentElement();
                    if (root != null) {
                        if (isSimpleType(root))
                            outputMsg.setData(part.getName(), AeXmlUtil.getText(root));
                        else
                            /**
                             * Since I'm dealing with doc-lit wrapped, there will only be a single part: the wrapper element
                             */
                            outputMsg.setData(part.getName(), doc);
                    } else {
                        outputMsg.setData(part.getName(), null);
                    }
                }
            }
        }
        extractPartsFromHeader(aInvokeContext, outputMsg);
    }
    // Return the message to the awaiting callback
    aInvokeContext.getResponse().setMessageData(outputMsg);
}
