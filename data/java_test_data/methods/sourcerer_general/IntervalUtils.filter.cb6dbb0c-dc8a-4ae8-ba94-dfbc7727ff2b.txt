public static IntervalFilteredHolder filter(final double[][] intervals, final int begin, final int length) {
    int size = length;
    int start = begin + size;
    int endIndex = 0;
    // Look for the first value which is not a novalue
    for (int i = 0; i < size; i++) {
        if (NoValues.isDoubleNoValue(intervals[2][i]) == false) {
            start = i;
            break;
        }
    }
    // Only no values?
    if (start == size) {
        return new IntervalFilteredHolder(new double[3][0], 0, -1);
    }
    int end = 0;
    // Look for the last value which is not a novalue
    for (int i = size - 1; i >= 0; i--) {
        if (NoValues.isDoubleNoValue(intervals[2][i]) == false) {
            end = i;
            break;
        }
    }
    // Only one value?
    if (start == end) {
        endIndex = 0;
        intervals[0][endIndex] = intervals[0][start];
        intervals[1][endIndex] = intervals[1][start];
        intervals[2][endIndex] = intervals[2][start];
        return new IntervalFilteredHolder(intervals, 0, 0);
    }
    endIndex = -1;
    boolean out = false;
    int idx1 = start;
    int idx2 = start + 1;
    while (true) {
        while (idx2 <= end && NoValues.isDoubleNoValue(intervals[2][idx2]) == false && MathUtils.isApproximatelyEqual(intervals[2][idx1], intervals[2][idx2])) {
            idx2++;
        }
        if (idx2 > end) {
            out = true;
        }
        endIndex++;
        intervals[0][endIndex] = intervals[0][idx1];
        intervals[1][endIndex] = intervals[1][idx2 - 1];
        intervals[2][endIndex] = intervals[2][idx1];
        idx1 = idx2;
        // skip novalues
        while (idx1 <= end && NoValues.isDoubleNoValue(intervals[2][idx1]) == true) {
            idx1++;
        }
        idx2 = idx1 + 1;
        if (idx2 > end) {
            if (out == false) {
                // one more time
                endIndex++;
                intervals[0][endIndex] = intervals[0][idx1];
                intervals[1][endIndex] = intervals[1][idx2 - 1];
                intervals[2][endIndex] = intervals[2][idx1];
            }
            break;
        }
    }
    if (endIndex == -1) {
        return new IntervalFilteredHolder(new double[3][0], 0, -1);
    }
    return new IntervalFilteredHolder(intervals, 0, endIndex);
}
