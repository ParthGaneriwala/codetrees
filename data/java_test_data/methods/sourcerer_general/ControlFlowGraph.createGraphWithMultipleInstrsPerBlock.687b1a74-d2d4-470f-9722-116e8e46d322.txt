private void createGraphWithMultipleInstrsPerBlock() {
    int numIns = quadruples.size();
    // Map of label string versus the corresponding cf node
    LinkedHashMap<String, ControlFlowNode> labelStrVsNodes = new LinkedHashMap<String, ControlFlowNode>();
    // Map of
    HashMap nodeVsNextLabel = new HashMap();
    Vector quadruplesInNode = new Vector();
    ControlFlowNode controlFlowNode = new ControlFlowNode();
    String currentLabel = "";
    int nodeCount = 0;
    boolean lastInstrIsJump = false;
    for (int i = 0; i < numIns; i++) {
        // Get the quadruple and add the variables (temporaries) in the quadruple to
        // the list of temporaries
        AssemblyInstruction instr = (AssemblyInstruction) quadruples.elementAt(i);
        addToTempList(instr.getSrcList());
        addToTempList(instr.getDestList());
        Vector jumpsList = instr.getJumps();
        String labelStr = instr.getLabelStr();
        if (jumpsList != null) {
            // This must be either a jump or a cjump
            // Set the list of quadruples created so far into the current flow node
            quadruplesInNode.addElement(instr);
            controlFlowNode.setInstructions(quadruplesInNode);
            // labelStrVsNodes.put(currentLabel, controlFlowNode);
            quadruplesInNode = new Vector();
            lastInstrIsJump = true;
        } else if (labelStr != null) {
            // This is a label
            if (!lastInstrIsJump) {
                if (nodeCount != 0) {
                    // Not the first label
                    nodeVsNextLabel.put(controlFlowNode, labelStr);
                    // End the previous list of quadruples and put them in the current node
                    controlFlowNode.setInstructions(quadruplesInNode);
                // labelStrVsNodes.put(currentLabel, controlFlowNode);
                }
            }
            // Create a new control flow node
            controlFlowNode = new ControlFlowNode();
            controlFlowNode.setName(labelStr);
            quadruplesInNode = new Vector();
            quadruplesInNode.addElement(instr);
            controlFlowNode.setInstructions(quadruplesInNode);
            if (nodeCount == 0)
                startNode = controlFlowNode;
            addNode(controlFlowNode);
            currentLabel = labelStr;
            labelStrVsNodes.put(currentLabel, controlFlowNode);
            // Set the lastInstrIsJump to false
            lastInstrIsJump = false;
            // Increment the node count
            nodeCount++;
        } else {
            // Neither a label nor a jump
            quadruplesInNode.addElement(instr);
            lastInstrIsJump = false;
        }
    }
    // Iterate through the HashMap created above to create the control flow graph
    Set entries = labelStrVsNodes.entrySet();
    Iterator iter = entries.iterator();
    nodeCount = 0;
    while (iter.hasNext()) {
        Map.Entry entry = (Map.Entry) iter.next();
        ControlFlowNode cfNode = (ControlFlowNode) entry.getValue();
        // Get the last last quadruple in the list of quadruples for this node
        Vector quads = cfNode.getInstructions();
        AssemblyInstruction instr = (AssemblyInstruction) quads.lastElement();
        Vector jumpsList = instr.getJumps();
        if (jumpsList != null) {
            // The last quadruple in the current node is a jump statement; create and add edges
            // to the current node for the targets in the jump
            int numJumps = jumpsList.size();
            for (int i = 0; i < numJumps; i++) {
                String jmpStr = (String) jumpsList.elementAt(i);
                ControlFlowNode targetNode = (ControlFlowNode) labelStrVsNodes.get(jmpStr);
                Edge edge = new Edge(cfNode, targetNode);
                addDirectedEdge(edge, cfNode, targetNode);
            }
        } else {
            // The last quadruple in the current node is not a jump statement; the target must be the
            // logical next node in the flow; get it from the map of node against the next label
            String nextLabel = (String) nodeVsNextLabel.get(cfNode);
            ControlFlowNode targetNode = (ControlFlowNode) labelStrVsNodes.get(nextLabel);
            if (targetNode != null) {
                Edge edge = new Edge(cfNode, targetNode);
                addDirectedEdge(edge, cfNode, targetNode);
            }
        }
    }
    for (int a = 0; a < getNumNodes(); a++) {
        ControlFlowNode node = (ControlFlowNode) getNode(a);
        if (node.getNumOutgoingEdges() == 0) {
            endNode = node;
            break;
        }
    }
}
