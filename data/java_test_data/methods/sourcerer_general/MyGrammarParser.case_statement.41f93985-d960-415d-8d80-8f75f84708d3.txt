// $ANTLR start "case_statement"
public final MyGrammarParser.case_statement_return case_statement() throws RecognitionException {
    MyGrammarParser.case_statement_return retval = new MyGrammarParser.case_statement_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token CASE70 = null;
    Token IDENTIFIER71 = null;
    Token OF72 = null;
    Token END74 = null;
    MyGrammarParser.case_list_return case_list73 = null;
    CommonTree CASE70_tree = null;
    CommonTree IDENTIFIER71_tree = null;
    CommonTree OF72_tree = null;
    CommonTree END74_tree = null;
    RewriteRuleTokenStream stream_END = new RewriteRuleTokenStream(adaptor, "token END");
    RewriteRuleTokenStream stream_OF = new RewriteRuleTokenStream(adaptor, "token OF");
    RewriteRuleTokenStream stream_IDENTIFIER = new RewriteRuleTokenStream(adaptor, "token IDENTIFIER");
    RewriteRuleTokenStream stream_CASE = new RewriteRuleTokenStream(adaptor, "token CASE");
    RewriteRuleSubtreeStream stream_case_list = new RewriteRuleSubtreeStream(adaptor, "rule case_list");
    try {
        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:199:2: ( CASE IDENTIFIER OF case_list END -> ^( CASE_STATEMENT IDENTIFIER case_list ) )
        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:199:4: CASE IDENTIFIER OF case_list END
        {
            CASE70 = (Token) match(input, CASE, FOLLOW_CASE_in_case_statement1470);
            stream_CASE.add(CASE70);
            IDENTIFIER71 = (Token) match(input, IDENTIFIER, FOLLOW_IDENTIFIER_in_case_statement1473);
            stream_IDENTIFIER.add(IDENTIFIER71);
            OF72 = (Token) match(input, OF, FOLLOW_OF_in_case_statement1475);
            stream_OF.add(OF72);
            pushFollow(FOLLOW_case_list_in_case_statement1477);
            case_list73 = case_list();
            state._fsp--;
            stream_case_list.add(case_list73.getTree());
            END74 = (Token) match(input, END, FOLLOW_END_in_case_statement1479);
            stream_END.add(END74);
            // AST REWRITE
            // elements: case_list, IDENTIFIER
            // token labels:
            // rule labels: retval
            // token list labels:
            // rule list labels:
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", retval != null ? retval.tree : null);
            root_0 = (CommonTree) adaptor.nil();
            // 199:38: -> ^( CASE_STATEMENT IDENTIFIER case_list )
            {
                // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:199:41: ^( CASE_STATEMENT IDENTIFIER case_list )
                {
                    CommonTree root_1 = (CommonTree) adaptor.nil();
                    root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(CASE_STATEMENT, "CASE_STATEMENT"), root_1);
                    adaptor.addChild(root_1, stream_IDENTIFIER.nextNode());
                    adaptor.addChild(root_1, stream_case_list.nextTree());
                    adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
