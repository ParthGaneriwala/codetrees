public static void main(String[] args) throws Exception {
    FileFinder finder = new FileFinder();
    if (args.length == 1) {
        // parse the XML as a W3C Document
        XPathStringEvaluator xpath = finder.new XPathStringEvaluator(new File(args[0]));
        // Set Log File
        if (xpath.getRoot().getAttribute("logFile") != null) {
            finder.setLogFile(new File(xpath.getRoot().getAttribute("logFile")));
        }
        // Add search directories
        xpath.evaluate("/fileFinder/searchDirectory");
        while (xpath.hasNext()) {
            finder.addSearchDirectory(new File(xpath.next()));
        }
        // Add exclusion directories
        xpath.evaluate("fileFinder/exclusionDirectory");
        while (xpath.hasNext()) {
            finder.addExclusionDirectory(new File(xpath.next()));
        }
        // Set output
        xpath.evaluate("/fileFinder/resultsOutput");
        while (xpath.hasNext()) {
            String output = xpath.next();
            if ("screen".equalsIgnoreCase(output)) {
                finder.setScreenOutput(true);
            } else {
                finder.addOutputDirectory(new File(output));
            }
        }
        // Set Searches
        Iterator it = xpath.evaluateToNodeList("/fileFinder/search").iterator();
        while (it.hasNext()) {
            Node node = (Node) it.next();
            FileSearch search = new FileSearch();
            xpath.evaluate("pattern", node);
            while (xpath.hasNext()) {
                search.addSearchPattern(xpath.next());
            }
            xpath.evaluate("startsWith[@caseSensitive='false']", node);
            while (xpath.hasNext()) {
                search.addSearchStartsWith(xpath.next(), false);
            }
            xpath.evaluate("startsWith[not(@caseSensitive) or @caseSensitive!='false']", node);
            while (xpath.hasNext()) {
                search.addSearchStartsWith(xpath.next(), true);
            }
            xpath.evaluate("endsWith[@caseSensitive='false']", node);
            while (xpath.hasNext()) {
                search.addSearchEndsWith(xpath.next(), false);
            }
            xpath.evaluate("endsWith[not(@caseSensitive) or @caseSensitive!='false']", node);
            while (xpath.hasNext()) {
                search.addSearchEndsWith(xpath.next(), true);
            }
            finder.addSearch(search);
        }
    } else if (args.length == 3) {
        finder.addSearchDirectory(new File(args[0]));
        finder.addOutputDirectory(new File(args[1]));
        FileSearch search = new FileSearch();
        search.addSearchPattern(args[2]);
        finder.addSearch(search);
    } else {
        System.err.println("usage:\n\tjava -jar FileFinder.jar settings.xml\n\tjava -jar FileFinder.jar searchDirectory saveResults searchPattern");
        System.exit(1);
    }
    long[] results = finder.search();
    System.out.println("Search took: " + results[0] + " MS");
    System.out.println("Files Searched: " + results[1]);
    System.out.println("Total Entries Searched: " + results[2]);
    System.out.println("Matches Found: " + results[3]);
    finder.close();
}
