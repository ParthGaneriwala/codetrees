public synchronized void modelChanged(ModelEvent e) {
    // create plane info vector to update or add to table
    Vector<String> plane = new Vector<String>(9);
    plane.add(e.getAirplaneID() + "");
    plane.add(e.getAirline());
    plane.add(e.getCurrentState());
    plane.add(e.getResource());
    plane.add(e.getGate().getResourceId());
    if (e.getTargetArrivalTime() == 0) {
        plane.add("N/A");
    } else {
        long arrivalTime;
        if (e.getEstimatedArrivalTime() > e.getTargetArrivalTime()) {
            arrivalTime = e.getEstimatedArrivalTime();
        } else {
            arrivalTime = e.getTargetArrivalTime();
        }
        plane.add(DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM).format(arrivalTime));
    }
    if (e.getTargetDepartingTime() == 0) {
        plane.add("N/A");
    } else {
        plane.add(DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM).format(e.getTargetDepartingTime()));
    }
    // this is the statusInfo passed as a message
    if (e.getEmergencyStatus()) {
        plane.add("Emergency Status!!!");
    } else {
        plane.add(e.getActionCommand());
    }
    // if plane exists in table data, update
    boolean planeExists = false;
    for (Vector<String> r : rowData) {
        if (r.elementAt(0).equals(plane.elementAt(0))) {
            planeExists = true;
            rowData.setElementAt(plane, rowData.indexOf(r));
        }
    }
    // if plane not in table data, add plane
    if (!planeExists) {
        rowData.add(plane);
    }
    // if plane is done, remove
    if (e.getActionCommand().contentEquals("nullResourceExit")) {
        GlobalLog.info("removing " + plane.elementAt(0));
        rowData.remove(plane);
    }
    // TODO: sort vector by landing/takeoff time?
    // Collections.sort(rowData);
    // fire tableModel changed event to update table?
    ((DefaultTableModel) table.getModel()).fireTableDataChanged();
}
