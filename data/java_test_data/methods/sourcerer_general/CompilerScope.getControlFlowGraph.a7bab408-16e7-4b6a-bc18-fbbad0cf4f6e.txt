private Vector<ControlFlowGraph> getControlFlowGraph() {
    Temp.reset();
    // List
    Vector<ControlFlowGraph> cfgs = new Vector<ControlFlowGraph>();
    // cfgs
    try {
        // Get the text from the code text pane
        String codeText = codeTextPane.getText();
        CharArrayReader strReader = new CharArrayReader(codeText.toCharArray());
        String filename = "VisualizationTest.tig";
        System.out.println("File: " + filename);
        // Generate name of the output file
        File inFile = new File(filename);
        String inFileName = inFile.getName();
        int periodPos = inFileName.indexOf(".");
        String outFileNameInterim = inFileName.substring(0, periodPos) + // for intermediate result
        "_intrm.s";
        // for
        String outFileName = inFileName.substring(0, periodPos) + ".s";
        // final
        // code
        // after
        // register
        // allocation
        File outFile = new File(outFileNameInterim);
        // Lexical analysis and parsing
        TigerParser tp = new TigerParser(new Lexer(strReader));
        Object result = tp.parse().value;
        // Semantic analysis
        System.out.println("Completed generating abstract syntax tree");
        SemanticAnalyzer semantAnalyzer = new SemanticAnalyzer();
        Vector<?> functionLevels = semantAnalyzer.translateAbstractTree((Absyn) result);
        ErrorHandler errorHandler = ErrorHandler.getInstance();
        errorHandler.displayResult();
        // Intermediate code generation
        Debug debug = new Debug();
        if (errorHandler.getNumErrors() != 0)
            return null;
        // No errors in semantic analysis; continue with intermediate code
        // generation
        // for each function
        Vector<Object> intermediateCodeListing = new Vector<Object>();
        Vector<Object> finalCodeListing = new Vector<Object>();
        boolean compiledSuccessfully = true;
        int numFuncs = functionLevels.size();
        HashMap<Object, Object> fNameVsNumRegsUsed = new HashMap<Object, Object>();
        Vector<Object> commonData = new Vector<Object>();
        for (int i = 0; i < numFuncs; i++) {
            Level fLevel = (Level) functionLevels.elementAt(i);
            String functionName = fLevel.getLevelName().toString();
            if (fLevel != null) {
                AssemType body = fLevel.getFunctionBody();
                if (body != null) {
                    System.out.println("FUNCTION:");
                    // debug.printAssem(body);
                    Linearizer linearizer = processWithLinearizer(debug, body, fLevel.getLevelName());
                    // Generate assembly code
                    CodeGenerator codeGenerator = new CodeGenerator();
                    codeGenerator.generateCode(linearizer.getTrace());
                    Vector<Object> instList = codeGenerator.getInstructionsList();
                    intermediateCodeListing.addAll(instList);
                    writeInstructionsToFile(outFile, intermediateCodeListing);
                    // Create a control flow graph from the instructions
                    // created above
                    ControlFlowGraph flowGraph = new ControlFlowGraph(instList, false);
                    cfgs.add(flowGraph);
                // System.out.println("constructinf dominator Tree------------");
                // DominatorTree dominatorTree = new DominatorCalculationContext(flowGraph,flowGraph.getStartNode()).getDominatorTree();
                // DDominatorTree dDomiatorTree = new DDominatorTree(dominatorTree);
                // dDomiatorTree.constructDominatorTreeDisplayInfo();
                // System.out.println("displaying the  dominator Tree-- nodes----------");
                // dDomiatorTree.getDomGraph().display();
                }
            }
        }
    } catch (Exception e) {
        e.printStackTrace();
    }
    // Return the first cfg found
    return cfgs;
}
