private static int getNextLocal(ArrayList<CLInstruction> fun) {
    int last = -1;
    int i;
    int temp;
    CLInstruction inst;
    byte optcode;
    byte function;
    for (i = 0; i < fun.size(); i++) {
        inst = fun.get(i);
        optcode = inst.getOptcode();
        if ((optcode == CLOptcode.LDLOC0 || optcode == CLOptcode.STLOC0) && last < 0)
            last = 0;
        else if ((optcode == CLOptcode.LDLOC1 || optcode == CLOptcode.STLOC1) && last < 1)
            last = 1;
        else if ((optcode == CLOptcode.LDLOC2 || optcode == CLOptcode.STLOC2) && last < 2)
            last = 2;
        else if ((optcode == CLOptcode.LDLOC3 || optcode == CLOptcode.STLOC3) && last < 3)
            last = 3;
        else if (optcode == CLOptcode.LDLOCS) {
            Ldlocs ldlocs = (Ldlocs) inst;
            temp = (int) ldlocs.getLocalNumber();
            if (last < temp)
                last = temp;
        } else if (optcode == CLOptcode.STLOCS) {
            Stlocs stlocs = (Stlocs) inst;
            temp = (int) stlocs.getLocalNumber();
            if (last < temp)
                last = temp;
        } else if (optcode == CLOptcode.LDLOCAS) {
            Ldlocas ldlocas = (Ldlocas) inst;
            temp = ldlocas.getLocalNumber();
            if (last < temp)
                last = temp;
        } else if (optcode == CLOptcode.OBJECTMODEL) {
            ObjectModel om = (ObjectModel) inst;
            function = om.getFunction();
            if (function == CLOptcode.LDLOC) {
                Ldloc ldloc = (Ldloc) om;
                temp = ldloc.getLocalNumber();
                if (last < temp)
                    last = temp;
            } else if (function == CLOptcode.LDLOCA) {
                Ldloca ldloca = (Ldloca) om;
                temp = ldloca.getLocalNumber();
                if (last < temp)
                    last = temp;
            } else if (function == CLOptcode.STLOC) {
                Stloc stloc = (Stloc) om;
                temp = stloc.getLocalNumber();
                if (last < temp)
                    last = temp;
            }
        }
    }
    // give local next number
    return last + 1;
}
