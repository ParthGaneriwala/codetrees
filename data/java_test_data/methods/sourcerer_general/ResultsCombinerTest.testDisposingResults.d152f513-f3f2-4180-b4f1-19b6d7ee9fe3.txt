public void testDisposingResults() {
    Resource.User user = new Resource.User() {
    };
    ResultsCombiner combiner = ResultsCombiner.intersection;
    // create plain results
    EventList<Line> a = new BasicEventList<Line>();
    QueryResponse resultsA = new DefaultQueryResponse(null, a, new Query.Builder().searchTerm("a").build(), null);
    EventList<Line> b = new BasicEventList<Line>(a.getPublisher(), a.getReadWriteLock());
    QueryResponse resultsB = new DefaultQueryResponse(null, b, new Query.Builder().searchTerm("b").build(), null);
    EventList<Line> c = new BasicEventList<Line>(a.getPublisher(), a.getReadWriteLock());
    QueryResponse resultsC = new DefaultQueryResponse(null, c, new Query.Builder().searchTerm("c").build(), null);
    // create structured results
    QueryResponse aAndB = combiner.combine(resultsA, resultsB);
    aAndB.handle().reserve(user);
    QueryResponse bAndC = combiner.combine(resultsB, resultsC);
    bAndC.handle().reserve(user);
    QueryResponse all = combiner.combine(aAndB, bAndC);
    all.handle().reserve(user);
    // things should still work after we release some resources
    aAndB.handle().releaseAndDisposeIfUnused(user);
    bAndC.handle().releaseAndDisposeIfUnused(user);
    a.add(apacheA0);
    b.add(apacheA0);
    c.add(apacheA0);
    assertEquals(1, all.getLines().size());
    // release the last
    all.handle().releaseAndDisposeIfUnused(user);
    // it shouldn't be possible to reserve a after it's no longer used
    try {
        resultsA.handle().reserve(user);
        fail("reserved a fully disposed source");
    } catch (IllegalStateException expected) {
    // expected
    }
}
