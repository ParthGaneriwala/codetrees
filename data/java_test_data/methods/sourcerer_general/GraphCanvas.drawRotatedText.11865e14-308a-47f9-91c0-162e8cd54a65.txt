public void drawRotatedText(String string, double theta, int cx, int cy, Graphics graphics_in, int which_gr) {
    FontMetrics fm = graphics_in.getFontMetrics();
    int label_w = fm.stringWidth(string);
    int label_h = fm.getHeight();
    double cos_theta = Math.cos(theta);
    if (cos_theta < 0.0) {
        theta += Math.PI;
        cos_theta = -cos_theta;
    }
    double sin_theta = Math.sin(theta);
    cx += -sin_theta * label_h / 2.0;
    cy += -cos_theta * label_h / 2.0;
    graphics_in.dispose();
    Image tmp_image = createImage(label_w, label_h);
    Graphics graphics = tmp_image.getGraphics();
    graphics.setFont(font_);
    graphics.setColor(new Color(0));
    graphics.drawString(string, 0, fm.getAscent());
    graphics.dispose();
    if (true)
        return;
    // below not supported.
    int[] pixels = null;
    if (pixels == null)
        return;
    int x, y;
    int image_size = (int) Math.ceil(Math.sqrt((double) (label_w * label_w) + (double) (label_h * label_h))) + 2;
    int[] result = new int[image_size * image_size];
    rotImage_(theta, pixels, label_w, label_h, result, image_size);
    cx -= image_size / 2;
    cy -= image_size / 2;
    if (which_gr == 0)
        graphics_in = getGraphicsInternal_();
    else
        graphics_in = getBackGraphics_();
    for (y = 0; y < image_size; y++) {
        for (x = 0; x < image_size; x++) {
            if (result[y * image_size + x] > 0) {
                graphics_in.setColor(aaShades_[result[y * image_size + x] / 2]);
                graphics_in.drawLine(cx + x, cy + y, cx + x, cy + y);
            }
        }
    }
    graphics_in.dispose();
}
