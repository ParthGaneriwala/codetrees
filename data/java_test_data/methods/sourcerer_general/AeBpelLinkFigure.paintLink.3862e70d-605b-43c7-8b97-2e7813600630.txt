protected void paintLink(Graphics g) {
    Color c = g.getColor();
    Color linkColor = getUiPrefs().getLinkNormalColor();
    Color transColor = getTransistionFigureColor();
    boolean drawDashedLine = false;
    if (isEvaluated()) {
        linkColor = getUiPrefs().getLinkActiveColor();
    } else if (isInactive()) {
        linkColor = getUiPrefs().getLinkInActiveColor();
        transColor = getUiPrefs().getBackgroundColor();
        drawDashedLine = true;
    }
    g.setColor(linkColor);
    int sourceDir = getAnchorDirection(getSourceAnchorBounds(), getTargetAnchorBounds(), true);
    int targetDir = getAnchorDirection(getSourceAnchorBounds(), getTargetAnchorBounds(), false);
    Point sourcePoint = getAnchorPoint(getSourceAnchorBounds(), sourceDir);
    Point targetPoint = getAnchorPoint(getTargetAnchorBounds(), targetDir);
    // container location (offset)
    int x = getLocation().x;
    int y = getLocation().y;
    // link source point
    int x1 = sourcePoint.x - x;
    int y1 = sourcePoint.y - y;
    // link target points
    int x2 = targetPoint.x - x;
    int y2 = targetPoint.y - y;
    // mid point between source and target points
    int mx = (x2 - x1) / 2;
    int my = (y2 - y1) / 2;
    // vector of points containing link start, end and its bendpoints.
    int[] px;
    int[] py;
    // transistion point.
    int tx = 0;
    int ty = 0;
    if (sourceDir == EAST && targetDir == WEST) {
        px = new int[4];
        py = new int[4];
        px[0] = x1 + 2;
        py[0] = y1;
        px[1] = x1 + mx;
        py[1] = y1;
        px[2] = x1 + mx;
        py[2] = y2;
        px[3] = x2 - 4;
        py[3] = y2;
        tx = px[1];
        ty = py[1] + (py[1] - py[2]) / 2;
    } else if (sourceDir == SOUTH && targetDir == WEST) {
        px = new int[5];
        py = new int[5];
        int d = 15;
        px[0] = x1;
        py[0] = y1 + 1;
        px[1] = x1;
        py[1] = y1 + d;
        px[2] = x2 - d;
        py[2] = y1 + d;
        px[3] = x2 - d;
        py[3] = y2;
        px[4] = x2 - 4;
        py[4] = y2;
        if (Math.abs(px[1] - px[2]) > 60) {
            tx = px[1] + 50 * (px[2] > px[1] ? 1 : -1);
        } else {
            tx = px[1] - (px[1] - px[2]) / 2;
        }
        ty = py[1];
    } else {
        px = new int[4];
        py = new int[4];
        px[0] = x1;
        py[0] = y1 + 1;
        px[1] = x1;
        py[1] = y1 + my;
        px[2] = x2;
        py[2] = y1 + my;
        px[3] = x2;
        py[3] = y2 - 4;
        tx = px[1] + (px[2] - px[1]) / 2;
        ty = py[1];
    }
    Stroke stroke = null;
    Graphics2D g2 = (Graphics2D) g;
    if (drawDashedLine) {
        // if the link is in-active, then draw a dashed line
        Stroke dashedStroke = new BasicStroke(1, BasicStroke.CAP_SQUARE, BasicStroke.JOIN_BEVEL, 0, new float[] { 3, 3, 3, 3 }, 0);
        stroke = g2.getStroke();
        g2.setStroke(dashedStroke);
    }
    // drawlink and arrow
    g.drawPolyline(px, py, px.length);
    if (drawDashedLine) {
        // restore to normal stroke.
        g2.setStroke(stroke);
    }
    paintLinkArrow(g, x2, y2, targetDir);
    // draw transistion point
    if (isDrawTransistionCondition()) {
        paintTransition(g, tx, ty, linkColor, transColor);
    }
    if (AeUiPrefs.isDrawDebugAnchorPoints()) {
        // for debugging - source and target anchor points and its bounding boxes.
        g.setColor(getUiPrefs().getDebugSourceAnchorColor());
        Rectangle r = getSourceAnchorBounds();
        g.drawRect(r.x - x, r.y - y, r.width, r.height);
        g.fillOval(px[0] - 5, py[0] - 5, 10, 10);
        g.setColor(getUiPrefs().getDebugTargetAnchorColor());
        r = getTargetAnchorBounds();
        g.drawRect(r.x - x + 2, r.y - y + 2, r.width, r.height);
        g.fillOval(px[px.length - 1] - 5, py[px.length - 1] - 5, 10, 10);
    }
    g.setColor(c);
}
