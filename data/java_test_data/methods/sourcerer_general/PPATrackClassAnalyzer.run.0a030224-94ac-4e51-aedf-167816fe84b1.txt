public void run() {
    for (int k = 2; k < 301; k++) {
        counts = new int[5];
        try {
            File classificationFile = new File("D:/synthLandscan/randomStarts/momentData/" + moment + "/" + knn + moment + "Classifications" + k + ".csv");
            FileReader classificationReader = new FileReader(classificationFile);
            CSVParser classificationParser = new CSVParser(classificationReader);
            String[][] classificationValues = classificationParser.getAllValues();
            // each of the values arrays should be the same size.
            // row 0 is column headers
            classNames = classificationValues[0];
            for (int j = 1; j < classificationValues.length; j++) {
                String[] thisRowStrings = classificationValues[j];
                // -1 because first column is the operator and the last is the real class
                double[] thisRowDoubles = new double[thisRowStrings.length - 2];
                for (int i = 0; i < thisRowDoubles.length; i++) {
                    thisRowDoubles[i] = Double.parseDouble(thisRowStrings[i + 1]);
                }
                // figure out the winner for each row of doubles.
                String[] winners = new String[classificationValues.length];
                int[] topIndexes = new int[6];
                double[] topMasses = new double[6];
                Arrays.fill(topIndexes, -1);
                Arrays.fill(topMasses, -1);
                for (int i = 0; i < thisRowDoubles.length - 1; i++) {
                    // stop early because I don't want THETA to win
                    if (thisRowDoubles[i] > topMasses[0]) {
                        topIndexes[0] = i;
                        topMasses[0] = thisRowDoubles[i];
                    }
                }
                for (int p = 0; p < topIndexes.length; p++) {
                    if (topIndexes[p] == -1) {
                        // this means unclassified, probably NaN's across the board from a simple DS conflict.
                        topIndexes[p] = 5;
                    }
                }
                int actual = -1;
                String corr = thisRowStrings[thisRowStrings.length - 1];
                if ((corr.equalsIgnoreCase(classNames[1]) || (corr.equalsIgnoreCase("inf")))) {
                    actual = 0;
                    counts[0]++;
                } else if (corr.equalsIgnoreCase(classNames[2])) {
                    actual = 1;
                    counts[1]++;
                } else if (corr.equalsIgnoreCase(classNames[3])) {
                    actual = 2;
                    counts[2]++;
                } else if (corr.equalsIgnoreCase(classNames[4])) {
                    actual = 3;
                    counts[3]++;
                } else if (corr.equalsIgnoreCase(classNames[5])) {
                    actual = 4;
                    counts[4]++;
                }
                // Add it to the confusion matrix quadarrays
                myClasses[k - 2][(j - 1) % 7][actual][topIndexes[0]]++;
                // Add the probabilities to the prob quadarrays
                for (int d = 0; d < thisRowDoubles.length; d++) {
                    if (Double.isNaN(thisRowDoubles[d])) {
                    // ???
                    } else {
                        myMasses[k - 2][(j - 1) % 7][actual][d] += thisRowDoubles[d];
                    }
                }
            // end for d
            }
        // end for j
        } catch (FileNotFoundException fnfe) {
            throw new RuntimeException("No file!  " + fnfe.getMessage());
        } catch (IOException ioe) {
            throw new RuntimeException("IO Exception!  " + ioe.getMessage());
        }
        // divide the prob quadarrays by the right count so they're actually probs again.
        for (int v = 0; v < 7; v++) {
            for (int v1 = 0; v1 < 6; v1++) {
                for (int v2 = 0; v2 < 6; v2++) {
                    myMasses[k - 2][v][v1][v2] = myMasses[k - 2][v][v1][v2] / (counts[0] / 7);
                }
            }
        }
        System.out.println("finished collating k = " + k);
    }
    // end for k
    writeGeneralSummaries();
    writeClassSummaries();
    writeConfusionMatrices();
}
