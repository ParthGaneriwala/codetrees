public int drawTabbedPCFText(PFont pcf, Segment s, int x, int y, Graphics g, TabExpander e) {
    if (pcf == null)
        return 0;
    int nextX = x;
    char[] txt = s.array;
    int txtOffset = s.offset;
    int flushLen = 0;
    int flushIndex = s.offset;
    int spaceAddon = 0;
    int spaceAddonLeftoverEnd = -1;
    int startJustifiableContent = 0;
    int endJustifiableContent = 0;
    int startOffset = 0;
    int n = s.offset + s.count;
    for (int i = txtOffset; i < n; i++) {
        if (txt[i] == '\t' || ((spaceAddon != 0 || i <= spaceAddonLeftoverEnd) && (txt[i] == ' ') && startJustifiableContent <= i && i <= endJustifiableContent)) {
            if (flushLen > 0) {
                nextX = pcf.drawString(g, txt, flushIndex, flushLen, x, y);
                // SwingUtilities2.drawChars(component, g, txt,
                // flushIndex, flushLen, x, y);
                flushLen = 0;
            }
            flushIndex = i + 1;
            if (txt[i] == '\t') {
                if (e != null) {
                    nextX = (int) e.nextTabStop((float) nextX, startOffset + i - txtOffset);
                } else {
                    nextX += pcf.charWidth('w');
                }
            } else if (txt[i] == ' ') {
                nextX += pcf.charWidth(' ') + spaceAddon;
                if (i <= spaceAddonLeftoverEnd) {
                    nextX++;
                }
            }
            x = nextX;
        } else if ((txt[i] == '\n') || (txt[i] == '\r')) {
            if (flushLen > 0) {
                nextX = pcf.drawString(g, txt, flushIndex, flushLen, x, y);
                // SwingUtilities2.drawChars(component, g, txt,
                // flushIndex, flushLen, x, y);
                flushLen = 0;
            }
            flushIndex = i + 1;
            x = nextX;
        } else {
            flushLen += 1;
        }
    }
    if (flushLen > 0) {
        nextX = pcf.drawString(g, txt, flushIndex, flushLen, x, y);
    // nextX = SwingUtilities2.drawChars(component, g, txt, flushIndex,
    // flushLen, x, y);
    }
    return nextX;
}
