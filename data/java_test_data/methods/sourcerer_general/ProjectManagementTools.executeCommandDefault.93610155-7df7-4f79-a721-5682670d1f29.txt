public String executeCommandDefault(ActionContext context) {
    // Base Visible Format is: /show/<project unique id>/tools[/xyz]
    String projectId = context.getRequest().getParameter("pid");
    String linkTo = context.getRequest().getParameter("linkTo");
    // Validate and redirect to the tools url
    try {
        // Load the project
        Project thisProject = retrieveAuthorizedProject(Integer.parseInt(projectId), context);
        // Make sure the project has a tools link
        if (!StringUtils.hasText(thisProject.getConcursiveCRMUrl())) {
            if (System.getProperty("DEBUG") != null) {
                System.out.println("ProjectManagementTools-> concursive crm url is empty for project: " + thisProject.getId() + " - " + thisProject.getUniqueId());
            }
            return "PermissionError";
        }
        // Make sure this user is on the team
        TeamMember thisMember = thisProject.getTeam().getTeamMember(getUserId(context));
        if (thisMember == null || !thisMember.getTools()) {
            if (System.getProperty("DEBUG") != null) {
                System.out.println("ProjectManagementTools-> user doesn't have access to tools");
            }
            return "PermissionError";
        }
        // Retrieve owner's email address to create a relationship in tools
        String ownerEmail = null;
        Connection db = null;
        try {
            db = getConnection(context);
            // Get owner's email address in case the user needs to be added
            int ownerId = thisProject.getOwner();
            if (ownerId > -1) {
                User owner = UserUtils.loadUser(ownerId);
                ownerEmail = owner.getEmail();
            }
        } catch (Exception e) {
            e.printStackTrace();
            return "SystemError";
        } finally {
            freeConnection(context, db);
        }
        // Determine the user's current role
        LookupList roleList = CacheUtils.getLookupList("lookup_project_role");
        String role = roleList.getValueFromId(thisMember.getUserLevel());
        // Then generate token and use CRM API to pass token, and then redirect to CRM
        if (System.getProperty("DEBUG") != null) {
            System.out.println("ProjectManagementTools-> generating token");
        }
        String token = generateRandomToken();
        if (sendToken(thisProject, getUser(context), token, ownerEmail, role)) {
            if (System.getProperty("DEBUG") != null) {
                System.out.println("ProjectManagementTools-> sending redirect");
            }
            // if successful, send the redirect...
            String redirect = "MyCFS.do?command=Home";
            if ("campaign".equals(linkTo)) {
                redirect = "CampaignManager.do?command=Default";
            }
            // Link back to this page
            String returnURL = context.getRequest().getParameter("returnURL");
            if (returnURL != null) {
                try {
                    returnURL = RequestUtils.getAbsoluteServerUrl(context.getRequest()) + URLEncoder.encode(returnURL, "UTF-8");
                } catch (Exception e) {
                }
            }
            LOG.debug("Return URL: " + returnURL);
            context.getRequest().setAttribute("redirectTo", thisProject.getConcursiveCRMUrl() + "/" + redirect + "&token=" + token + (returnURL != null ? "&returnURL=" + returnURL : ""));
            return ("Redirect301");
        } else {
            return "ToolsError";
        }
    } catch (SQLException e) {
        e.printStackTrace();
    }
    if (System.getProperty("DEBUG") != null) {
        System.out.println("ProjectManagementTools-> End reached");
    }
    return "SystemError";
}
