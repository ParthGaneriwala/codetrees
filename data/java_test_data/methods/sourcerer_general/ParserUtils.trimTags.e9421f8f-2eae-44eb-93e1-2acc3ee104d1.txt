public static String trimTags(String input, String[] tags, boolean recursive, boolean insideTag) throws ParserException, UnsupportedEncodingException {
    StringBuffer output = new StringBuffer();
    String inputModified = new String(input);
    String dummyString = createDummyString(' ', input.length());
    // loop inside the different tags to be trimmed
    for (int i = 0; i < tags.length; i++) {
        output = new StringBuffer();
        // loop inside the tags of the same type
        NodeList links = getLinks(inputModified, tags[i], recursive);
        for (int j = 0; j < links.size(); j++) {
            CompositeTag beginTag = (CompositeTag) links.elementAt(j);
            Tag endTag = beginTag.getEndTag();
            // positions of begin and end tags
            int beginTagBegin = beginTag.getStartPosition();
            int endTagBegin = beginTag.getEndPosition();
            int beginTagEnd = endTag.getStartPosition();
            int endTagEnd = endTag.getEndPosition();
            if (insideTag) {
                dummyString = modifyDummyString(new String(dummyString), beginTagBegin, endTagEnd);
            } else {
                dummyString = modifyDummyString(new String(dummyString), beginTagBegin, endTagBegin);
                dummyString = modifyDummyString(new String(dummyString), beginTagEnd, endTagEnd);
            }
        }
        for (int k = dummyString.indexOf(' '); (k < dummyString.length()) && (k != -1); ) {
            int kNew = dummyString.indexOf('*', k);
            if (kNew != -1) {
                output = output.append(inputModified.substring(k, kNew));
                k = dummyString.indexOf(' ', kNew);
            } else {
                output = output.append(inputModified.substring(k, dummyString.length()));
                k = kNew;
            }
        }
        inputModified = new String(output);
        dummyString = createDummyString(' ', inputModified.length());
    }
    return output.toString();
}
