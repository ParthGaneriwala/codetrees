public boolean insert(Connection db) throws SQLException {
    if (!isValid()) {
        return false;
    }
    boolean commit = db.getAutoCommit();
    try {
        if (commit) {
            db.setAutoCommit(false);
        }
        StringBuffer sql = new StringBuffer();
        sql.append("INSERT INTO project_calendar_meeting " + "(project_id, title, location, start_date, end_date, is_tentative, ");
        if (entered != null) {
            sql.append("entered, ");
        }
        if (modified != null) {
            sql.append("modified, ");
        }
        if (description != null) {
            sql.append("description, ");
        }
        if (dimdimMeetingId != null) {
            sql.append("dimdim_meetingid, ");
        }
        if (dimdimUrl != null) {
            sql.append("dimdim_url, ");
        }
        if (dimdimUsername != null) {
            sql.append("dimdim_username, ");
        }
        if (dimdimPassword != null) {
            sql.append("dimdim_password, ");
        }
        if (getDimdimMeetingKey() != null) {
            sql.append("dimdim_meeting_key, ");
        }
        sql.append("owner,enteredby, modifiedby, by_invitation_only, is_dimdim, is_webcast)");
        sql.append("VALUES (?, ?, ?, ?, ?, ?, ");
        if (entered != null) {
            sql.append("?, ");
        }
        if (modified != null) {
            sql.append("?, ");
        }
        if (description != null) {
            sql.append("?, ");
        }
        if (dimdimMeetingId != null) {
            sql.append("?, ");
        }
        if (dimdimUrl != null) {
            sql.append("?, ");
        }
        if (dimdimUsername != null) {
            sql.append("?, ");
        }
        if (dimdimPassword != null) {
            sql.append("?, ");
        }
        if (dimdimMeetingKey != null) {
            sql.append("?, ");
        }
        sql.append("?,?,?,?,?,?) ");
        int i = 0;
        // Insert the Meeting
        PreparedStatement pst = db.prepareStatement(sql.toString());
        pst.setInt(++i, projectId);
        pst.setString(++i, title);
        pst.setString(++i, location);
        pst.setTimestamp(++i, startDate);
        pst.setTimestamp(++i, endDate);
        pst.setBoolean(++i, isTentative);
        if (entered != null) {
            pst.setTimestamp(++i, entered);
        }
        if (modified != null) {
            pst.setTimestamp(++i, modified);
        }
        if (description != null) {
            pst.setString(++i, description);
        }
        if (dimdimMeetingId != null) {
            pst.setString(++i, dimdimMeetingId);
        }
        if (dimdimUrl != null) {
            pst.setString(++i, dimdimUrl);
        }
        if (dimdimUsername != null) {
            pst.setString(++i, dimdimUsername);
        }
        if (dimdimPassword != null) {
            pst.setString(++i, DimDimUtils.encryptData(dimdimPassword));
        }
        if (dimdimMeetingKey != null) {
            pst.setString(++i, dimdimMeetingKey);
        }
        pst.setInt(++i, owner);
        pst.setInt(++i, enteredBy);
        pst.setInt(++i, modifiedBy);
        pst.setBoolean(++i, byInvitationOnly);
        pst.setBoolean(++i, isDimdim);
        pst.setBoolean(++i, isWebcast);
        pst.execute();
        pst.close();
        id = DatabaseUtils.getCurrVal(db, "project_calendar_meeting_meeting_id_seq", -1);
        if (commit) {
            db.commit();
        }
    } catch (SQLException e) {
        if (commit) {
            db.rollback();
        }
        throw new SQLException(e.getMessage());
    } finally {
        if (commit) {
            db.setAutoCommit(true);
        }
    }
    return true;
}
