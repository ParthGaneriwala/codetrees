public static void convertImage(File inOrigImg, File inDestImg, float inCompressionQuality) {
    ImageFormat destFormat = ImageFormat.guessFormatFromName(inDestImg.getName());
    long startTime = System.currentTimeMillis();
    try {
        FileSeekableStream stream = null;
        try {
            // PlanarImage image = JAI.create("fileload", inImgFile.getPath());
            stream = new FileSeekableStream(inOrigImg);
            // BufferedImage image = ImageIO.read(fss);
            PlanarImage image = JAI.create("stream", stream);
            long readTime = System.currentTimeMillis();
            // ImageIO.write(thumbImage, inDestFormat.getFileExtension(), inDestFile);
            if (destFormat == ImageFormat.JPEG) {
                Iterator<ImageWriter> writerIter = ImageIO.getImageWritersBySuffix(destFormat.getFileExtension());
                ImageWriteParam param = new JPEGImageWriteParam(Locale.getDefault());
                param.setCompressionMode(ImageWriteParam.MODE_EXPLICIT);
                param.setCompressionQuality(inCompressionQuality);
                ImageWriter writer = writerIter.next();
                IIOMetadata metadata = writer.getDefaultImageMetadata(new ImageTypeSpecifier(image), param);
                ImageOutputStream outputStream = new FileImageOutputStream(inDestImg);
                writer.setOutput(outputStream);
                writer.write(metadata, new IIOImage(image, null, metadata), param);
                writer.dispose();
                outputStream.close();
            } else {
                ImageIO.write(image, destFormat.getFileExtension(), inDestImg);
            }
            long writeTime = System.currentTimeMillis();
        // System.out.println("Scale timing [read,op,write,total] (ms): "
        // + (readTime - startTime) + ", " + (opTime - readTime)
        // + ", " + (writeTime - opTime) + ", " + (System.currentTimeMillis() - startTime));
        } finally {
            if (stream != null)
                stream.close();
        }
    } catch (IOException e) {
        throw new RuntimeException(e);
    }
}
