StatementCommand compileSetFilesProperty() {
    read();
    String name;
    int type = 0;
    Boolean flag = null;
    Integer value = null;
    checkDatabaseUpdateAuthorisation();
    switch(token.tokenType) {
        case Tokens.LOCK:
            {
                read();
                flag = processTrueOrFalseObject();
                type = StatementTypes.SET_DATABASE_FILES_LOCK;
                break;
            }
        case Tokens.CACHE:
            {
                read();
                if (readIfThis(Tokens.SIZE)) {
                    value = readIntegerObject();
                    type = StatementTypes.SET_DATABASE_FILES_CACHE_SIZE;
                } else if (readIfThis(Tokens.ROWS)) {
                    value = readIntegerObject();
                    type = StatementTypes.SET_DATABASE_FILES_CACHE_ROWS;
                }
                break;
            }
        case Tokens.SCALE:
            {
                read();
                value = readIntegerObject();
                type = StatementTypes.SET_DATABASE_FILES_SCALE;
                break;
            }
        case Tokens.LOB:
            {
                read();
                readThis(Tokens.SCALE);
                value = readIntegerObject();
                type = StatementTypes.SET_DATABASE_FILES_LOBS_SCALE;
                break;
            }
        case Tokens.DEFRAG:
            {
                read();
                type = StatementTypes.SET_DATABASE_FILES_DEFRAG;
                value = readIntegerObject();
                break;
            }
        case Tokens.NIO:
            {
                read();
                type = StatementTypes.SET_DATABASE_FILES_NIO;
                flag = processTrueOrFalseObject();
                break;
            }
        case Tokens.BACKUP:
            {
                read();
                type = StatementTypes.SET_DATABASE_FILES_BACKUP_INCREMENT;
                readThis(Tokens.INCREMENT);
                flag = processTrueOrFalseObject();
                break;
            }
        case Tokens.LOG:
            {
                read();
                if (token.tokenType == Tokens.SIZE) {
                    readThis(Tokens.SIZE);
                    type = StatementTypes.SET_DATABASE_FILES_LOG_SIZE;
                    value = readIntegerObject();
                } else {
                    type = StatementTypes.SET_DATABASE_FILES_LOG;
                    flag = processTrueOrFalseObject();
                }
                break;
            }
        case Tokens.TEMP:
            {
                read();
                readThis(Tokens.PATH);
                type = StatementTypes.SET_DATABASE_FILES_TEMP_PATH;
                value = readIntegerObject();
                break;
            }
        case Tokens.WRITE:
            {
                read();
                readThis(Tokens.DELAY);
                type = StatementTypes.SET_DATABASE_FILES_WRITE_DELAY;
                int delay = 0;
                if (token.tokenType == Tokens.TRUE) {
                    delay = database.getProperties().getDefaultWriteDelay();
                    read();
                } else if (token.tokenType == Tokens.FALSE) {
                    delay = 0;
                    read();
                } else {
                    delay = this.readInteger();
                    if (delay < 0) {
                        delay = 0;
                    }
                    if (token.tokenType == Tokens.MILLIS) {
                        read();
                    } else {
                        delay *= 1000;
                    }
                }
                value = new Integer(delay);
                break;
            }
        default:
            throw unexpectedToken();
    }
    Object[] args = new Object[] { flag == null ? (Object) value : (Object) flag };
    return new StatementCommand(type, args, database.getCatalogName(), null);
}
