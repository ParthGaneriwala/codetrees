public void testFileChecksum() throws IOException {
    ((Log4JLogger) HftpFileSystem.LOG).getLogger().setLevel(Level.ALL);
    final long seed = RAN.nextLong();
    System.out.println("seed=" + seed);
    RAN.setSeed(seed);
    final Configuration conf = new Configuration();
    conf.set("slave.host.name", "localhost");
    final MiniDFSCluster cluster = new MiniDFSCluster(conf, 2, true, null);
    final FileSystem hdfs = cluster.getFileSystem();
    final String hftpuri = "hftp://" + conf.get("dfs.http.address");
    System.out.println("hftpuri=" + hftpuri);
    final FileSystem hftp = new Path(hftpuri).getFileSystem(conf);
    final String dir = "/filechecksum";
    final int block_size = 1024;
    final int buffer_size = conf.getInt("io.file.buffer.size", 4096);
    conf.setInt("io.bytes.per.checksum", 512);
    // try different number of blocks
    for (int n = 0; n < 5; n++) {
        // generate random data
        final byte[] data = new byte[RAN.nextInt(block_size / 2 - 1) + n * block_size + 1];
        RAN.nextBytes(data);
        System.out.println("data.length=" + data.length);
        // write data to a file
        final Path foo = new Path(dir, "foo" + n);
        {
            final FSDataOutputStream out = hdfs.create(foo, false, buffer_size, (short) 2, block_size);
            out.write(data);
            out.close();
        }
        // compute checksum
        final FileChecksum hdfsfoocs = hdfs.getFileChecksum(foo);
        System.out.println("hdfsfoocs=" + hdfsfoocs);
        final FileChecksum hftpfoocs = hftp.getFileChecksum(foo);
        System.out.println("hftpfoocs=" + hftpfoocs);
        // write another file
        final Path bar = new Path(dir, "bar" + n);
        {
            final FSDataOutputStream out = hdfs.create(bar, false, buffer_size, (short) 2, block_size);
            out.write(data);
            out.close();
        }
        {
            // verify checksum
            final FileChecksum barcs = hdfs.getFileChecksum(bar);
            final int barhashcode = barcs.hashCode();
            assertEquals(hdfsfoocs.hashCode(), barhashcode);
            assertEquals(hdfsfoocs, barcs);
            assertEquals(hftpfoocs.hashCode(), barhashcode);
            assertEquals(hftpfoocs, barcs);
        }
    }
}
