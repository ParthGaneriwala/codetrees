public Set<FieldStatistics> createStatistics() {
    Set<InstanceFieldId> touchedByMultipleThreads = new HashSet<InstanceFieldId>();
    Set<InstanceFieldId> touchedByAtleastSingleThread = new HashSet<InstanceFieldId>();
    Map<InstanceFieldId, Long> highestSinleThreadedWriteCount = new HashMap<InstanceFieldId, Long>();
    Map<InstanceFieldId, Long> highestSingleThreadedReadCount = new HashMap<InstanceFieldId, Long>();
    Map<InstanceFieldId, Long> writingThreadCount = new HashMap<InstanceFieldId, Long>();
    Map<InstanceFieldId, Long> readingThreadCount = new HashMap<InstanceFieldId, Long>();
    Map<InstanceFieldId, Long> readCount = new HashMap<InstanceFieldId, Long>();
    Map<InstanceFieldId, Long> writeCount = new HashMap<InstanceFieldId, Long>();
    for (Iterator<ThreadRecordings> recordingsIt = registry.getRecordings(InstanceFieldAccessThreadRecordings.ID); recordingsIt.hasNext(); ) {
        InstanceFieldAccessThreadRecordings threadRecordings = (InstanceFieldAccessThreadRecordings) recordingsIt.next();
        for (Iterator<InstanceFieldId> fieldIdIt = threadRecordings.getFieldIds(); fieldIdIt.hasNext(); ) {
            FieldId fieldPointer = fieldIdIt.next();
            if (fieldPointer.getFieldDescription().isStatic()) {
            } else {
                InstanceFieldId instanceFieldId = (InstanceFieldId) fieldPointer;
                long r = threadRecordings.getReadCount(instanceFieldId);
                long w = threadRecordings.getWriteCount(instanceFieldId);
                putIfHigher(highestSingleThreadedReadCount, instanceFieldId, r);
                putIfHigher(highestSinleThreadedWriteCount, instanceFieldId, w);
                incCount(writingThreadCount, instanceFieldId, r == 0 ? 0 : 1);
                incCount(readingThreadCount, instanceFieldId, w == 0 ? 0 : 1);
                incCount(writeCount, instanceFieldId, w);
                incCount(readCount, instanceFieldId, r);
                boolean firstOccurrence = touchedByAtleastSingleThread.add(instanceFieldId);
                if (!firstOccurrence) {
                    touchedByMultipleThreads.add(instanceFieldId);
                }
            }
        }
    }
    Set<FieldStatistics> result = new HashSet<FieldStatistics>();
    for (InstanceFieldId fieldId : touchedByMultipleThreads) {
        FieldStatistics statistics = new FieldStatistics(fieldId, highestSingleThreadedReadCount.get(fieldId), highestSinleThreadedWriteCount.get(fieldId), readCount.get(fieldId), writeCount.get(fieldId), readingThreadCount.get(fieldId), writingThreadCount.get(fieldId));
        result.add(statistics);
    }
    return result;
}
