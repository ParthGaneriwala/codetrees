public void testParseTimestampAcrossTimeZones() {
    Calendar cal = Calendar.getInstance();
    cal.set(Calendar.SECOND, 0);
    cal.set(Calendar.MILLISECOND, 0);
    cal.add(Calendar.HOUR_OF_DAY, 1);
    Date anHourFromNow = cal.getTime();
    cal.add(Calendar.HOUR_OF_DAY, 2);
    Date threeHoursFromNow = cal.getTime();
    cal.add(Calendar.HOUR_OF_DAY, -2);
    FTPTimestampParserImpl parser = new FTPTimestampParserImpl();
    // assume we are FTPing a server in Chicago, two hours ahead of
    // L. A.
    FTPClientConfig config = new FTPClientConfig(FTPClientConfig.SYST_UNIX);
    config.setDefaultDateFormatStr(FTPTimestampParser.DEFAULT_SDF);
    config.setRecentDateFormatStr(FTPTimestampParser.DEFAULT_RECENT_SDF);
    // 2 hours difference
    config.setServerTimeZoneId("America/Chicago");
    parser.configure(config);
    SimpleDateFormat sdf = (SimpleDateFormat) parser.getRecentDateFormat().clone();
    // assume we're in the US Pacific Time Zone
    TimeZone tzla = TimeZone.getTimeZone("America/Los_Angeles");
    sdf.setTimeZone(tzla);
    // get formatted versions of time in L.A.
    String fmtTimePlusOneHour = sdf.format(anHourFromNow);
    String fmtTimePlusThreeHours = sdf.format(threeHoursFromNow);
    try {
        Calendar parsed = parser.parseTimestamp(fmtTimePlusOneHour);
        // the only difference should be the two hours
        // difference, no rolling back a year should occur.
        assertEquals("no.rollback.because.of.time.zones", TWO_HOURS_OF_MILLISECONDS, cal.getTime().getTime() - parsed.getTime().getTime());
    } catch (ParseException e) {
        fail("Unable to parse " + fmtTimePlusOneHour);
    }
    // on this date last year.
    try {
        Calendar parsed = parser.parseTimestamp(fmtTimePlusThreeHours);
        // rollback should occur here.
        assertEquals("rollback.even.with.time.zones", 1, cal.get(Calendar.YEAR) - parsed.get(Calendar.YEAR));
    } catch (ParseException e) {
        fail("Unable to parse" + fmtTimePlusThreeHours);
    }
}
