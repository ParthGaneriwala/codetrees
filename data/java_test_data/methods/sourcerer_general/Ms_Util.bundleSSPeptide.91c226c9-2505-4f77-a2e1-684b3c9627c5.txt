public static List<Protein> bundleSSPeptide(Protein p, List<Protein> fragments) {
    // build the SSList for all SS linked peptides
    if (p == null || !Util.isSet(p.getXLinks()))
        return null;
    /*
    System.out.println("Not concerned about the extended peptides.");
    for (Protein fragA : fragments)
    {
      if (!fragA.getChain(0).getStatus()) continue;
      fragA.getChain(0).setStatus(true);
      for (Protein fragB : fragments)
      {
        if (!fragB.getChain(0).getStatus()) continue;
        String A = fragA.getChain(0).getSequence(), B = fragB.getChain(0).getSequence();
        if (fragB != fragA && B.indexOf(A) == 0)
        {
          // true for trypsin, how about the other enzyme?
          //String delta = B.split(A)[1];
          //fragA.getChain(0).addAddon(Ms_Factory.newModifierSet("$" + delta + "@100", A.length()));
          fragB.getChain(0).setStatus(false);
        }
      }
    }
*/
    System.out.println("Bundling the SS bonded peptides.");
    for (Protein frag : fragments) for (Peptide chain : frag.getChains()) chain.setStatus(true);
    List<Protein> sslist = new ArrayList<Protein>();
    for (Protein frag : fragments) {
        Peptide chainA = frag.getChain(0);
        if (chainA.getUncleaved() == 0 && chainA.getStatus() && (chainA.getSequence().toUpperCase().indexOf("C") >= 0) && frag.getXLinks().size() > 0) {
            // new entry
            Protein ss = new Protein();
            // unconditionally
            addChain(ss, chainA, chainA.getNStart(), chainA.getNStart() + chainA.getSequence().length() - 1, false);
            // internal S-S
            ss.getChain(0).setStatus(frag.getXLinks().size() > 0);
            for (Protein other : fragments) {
                Peptide chainB = other.getChain(0);
                if (chainB != chainA && chainB.getUncleaved() == 0 && chainB.getStatus() && (chainB.getSequence().indexOf("C") >= 0) && addChain(ss, chainB, chainB.getNStart(), chainB.getNStart() + chainB.getSequence().length() - 1, true) != null) {
                    // remove from the list
                    chainA.setStatus(false);
                    // remove from the list
                    chainB.setStatus(false);
                    ss.getChain(0).setStatus(true);
                }
            }
            sslist.add(ss);
        // SSList.end().chains[1].status = true; // testing
        }
    }
    System.out.println("Second Round Bundling");
    boolean _hit = true;
    while (_hit == true) {
        _hit = false;
        for (Protein ssA : sslist) {
            if (ssA.getChain(0).getStatus() == false)
                continue;
            for (Protein ssB : sslist) {
                if (ssA != ssB && Util.isSet(ssB.getChain(0).getStatus()) && merge(ssA, ssB) != null) {
                    ssB.getChain(0).setStatus(false);
                    _hit = true;
                }
            }
        }
        Iterator itr = sslist.iterator();
        while (itr.hasNext()) if (!((Protein) itr.next()).getChain(0).getStatus())
            itr.remove();
    }
    for (Protein frag : fragments) frag.getChain(0).setStatus(true);
    return sslist;
}
