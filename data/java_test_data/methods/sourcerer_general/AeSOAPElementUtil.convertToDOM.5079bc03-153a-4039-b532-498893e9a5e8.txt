public static Element convertToDOM(SOAPElement aSoapElement, Element aParent) {
    Element srcElement = (Element) aSoapElement;
    String namespace = aSoapElement.getElementName().getURI();
    String name = aSoapElement.getElementName().getQualifiedName();
    Node parent = aParent;
    if (aParent == null) {
        // create element in a new document
        Document doc = AeXmlUtil.newDocument();
        parent = doc;
    }
    Element element = AeXmlUtil.addElementNS(parent, namespace, name, null);
    // add any new or conflicting prefixes
    addNewDOMPrefixes(aSoapElement, element);
    // add attributes
    if (srcElement.hasAttributes()) {
        NamedNodeMap attributes = srcElement.getAttributes();
        for (int i = 0; i < attributes.getLength(); i++) {
            Node attr = attributes.item(i);
            // skip namespace decls since we got them already
            if (// $NON-NLS-1$
            attr.getNodeName().startsWith("xmlns")) {
                continue;
            }
            namespace = attr.getNamespaceURI();
            name = attr.getLocalName();
            if (AeUtil.isNullOrEmpty(namespace)) {
                name = attr.getNodeName();
                element.setAttribute(name, attr.getNodeValue());
            } else {
                String prefix = attr.getPrefix();
                if (AeUtil.notNullOrEmpty(prefix)) {
                    // $NON-NLS-1$
                    name = prefix + ":" + name;
                }
                element.setAttributeNS(namespace, name, attr.getNodeValue());
            }
        }
    }
    // add children
    if (srcElement.hasChildNodes()) {
        NodeList nodes = srcElement.getChildNodes();
        for (int i = 0; i < nodes.getLength(); i++) {
            Node child = nodes.item(i);
            if (child.getNodeType() == Node.ELEMENT_NODE) {
                convertToDOM((SOAPElement) child, element);
            } else {
                Node newChild = element.getOwnerDocument().importNode(child, true);
                element.appendChild(newChild);
            }
        }
    }
    return element;
}
