public ActionForward salvar(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
    String forward = FORWARD_TIPOS_INVESTIMENTO;
    ActionMessages errors = new ActionMessages();
    MessageResources msg = Resources.getMessageResources(request);
    PersistenceContext persCtx = factory.createPersistenceContext();
    try {
        persCtx.beginTrans();
        InvestimentosFacade facade = new InvestimentosFacade(persCtx);
        TiposInvestimentoForm tipinvForm = (TiposInvestimentoForm) form;
        TipoInvestimentoDAO tipoInvDAO = new TipoInvestimentoDAO(persCtx);
        TipoInvestimento tipoInvestimento = null;
        if (tipinvForm.getId() > 0) {
            tipoInvestimento = tipoInvDAO.find(Integer.valueOf(tipinvForm.getId()));
        } else {
            tipoInvestimento = new TipoInvestimento();
        }
        facade.reterHistoricoDeSaldo();
        setFields(tipinvForm, tipoInvestimento, tipoInvDAO);
        validateFields(tipinvForm, errors, msg);
        if (errors.isEmpty()) {
            if (tipoInvestimento.getId() > 0) {
                facade.alterarTipoInvestimento(tipoInvestimento);
            } else {
                facade.criarTipoInvestimento(tipoInvestimento);
            }
            loadBasicInfo(request, persCtx);
            persCtx.commit();
            form.reset(mapping, request);
        } else {
            forward = FORWARD_NOVO_TIPOS_INVESTIMENTO;
            request.setAttribute("tipoInvestimento", tipoInvestimento);
            saveErrors(request, errors);
        }
    } finally {
        persCtx.close();
    }
    return mapping.findForward(forward);
}
