@SuppressWarnings({ "unused", "null" })
@Test
public void testTime() throws IOException {
    long startLoad = System.nanoTime();
    // change these three variables to run your experiment
    String termListFileName = null;
    String plainTextFileName = null;
    boolean caseSensitive = false;
    if (termListFileName == null || plainTextFileName == null)
        return;
    TermList termList = TermList.loadSimpleFile("names", new File(termListFileName));
    long stopLoad = System.nanoTime();
    float timeElapsed = (float) (stopLoad - startLoad) / 1000000000;
    System.out.println(String.format("loaded %1$d terms in %2$.3f seconds.", termList.size(), timeElapsed));
    Tokenizer tokenizer = new PennTreebankTokenizer();
    long startInitialize = System.nanoTime();
    TermFinder termFinder = new SimpleTermFinder(caseSensitive, tokenizer);
    termFinder.addTermList(termList);
    long stopInitialize = System.nanoTime();
    timeElapsed = (float) (stopInitialize - startInitialize) / 1000000000;
    System.out.println(String.format("initialized simple term finder in %2$.3f seconds.", timeElapsed));
    long start;
    long stop;
    long finderTime = 0;
    long tokenizerTime = 0;
    long startFinder = System.nanoTime();
    int matchesCount = 0;
    int tokensCount = 0;
    BufferedReader input = new BufferedReader(new FileReader(plainTextFileName));
    String line = null;
    while ((line = input.readLine()) != null) {
        start = System.nanoTime();
        List<Token> tokens = tokenizer.getTokens(line);
        stop = System.nanoTime();
        tokenizerTime += (stop - start);
        tokensCount += tokens.size();
        start = System.nanoTime();
        List<TermMatch> matches = termFinder.getMatches(tokens);
        stop = System.nanoTime();
        finderTime += (stop - start);
        matchesCount += matches.size();
    }
    long stopFinder = System.nanoTime();
    float time = (float) (stopFinder - startFinder) / 1000000000;
    System.out.println(String.format("found %1$s term matches in %2$s tokens in %3$.3f seconds.", matchesCount, tokensCount, time));
    time = (float) tokenizerTime / 1000000000;
    System.out.println(String.format("Time spent tokenizing was %3$.3f seconds.", time));
    time = (float) finderTime / 1000000000;
    System.out.println(String.format("Time spent finding was %3$.3f seconds.", time));
}
