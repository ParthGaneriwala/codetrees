// --------------------------JDBC 2.0-----------------------------
private final String getDateTimePattern(String dt, boolean toTime) throws Exception {
    // 
    // Special case
    // 
    int dtLength = (dt != null) ? dt.length() : 0;
    if ((dtLength >= 8) && (dtLength <= 10)) {
        int dashCount = 0;
        boolean isDateOnly = true;
        for (int i = 0; i < dtLength; i++) {
            char c = dt.charAt(i);
            if (!Character.isDigit(c) && (c != '-')) {
                isDateOnly = false;
                break;
            }
            if (c == '-') {
                dashCount++;
            }
        }
        if (isDateOnly && (dashCount == 2)) {
            // $NON-NLS-1$
            return "yyyy-MM-dd";
        }
    }
    // 
    // Special case - time-only
    // 
    boolean colonsOnly = true;
    for (int i = 0; i < dtLength; i++) {
        char c = dt.charAt(i);
        if (!Character.isDigit(c) && (c != ':')) {
            colonsOnly = false;
            break;
        }
    }
    if (colonsOnly) {
        // $NON-NLS-1$
        return "HH:mm:ss";
    }
    int n;
    int z;
    int count;
    int maxvecs;
    char c;
    char separator;
    // $NON-NLS-1$
    StringReader reader = new StringReader(dt + " ");
    ArrayList vec = new ArrayList();
    ArrayList vecRemovelist = new ArrayList();
    Object[] nv = new Object[3];
    Object[] v;
    nv[0] = Constants.characterValueOf('y');
    nv[1] = new StringBuffer();
    nv[2] = Constants.integerValueOf(0);
    vec.add(nv);
    if (toTime) {
        nv = new Object[3];
        nv[0] = Constants.characterValueOf('h');
        nv[1] = new StringBuffer();
        nv[2] = Constants.integerValueOf(0);
        vec.add(nv);
    }
    while ((z = reader.read()) != -1) {
        separator = (char) z;
        maxvecs = vec.size();
        for (count = 0; count < maxvecs; count++) {
            v = (Object[]) vec.get(count);
            n = ((Integer) v[2]).intValue();
            c = getSuccessor(((Character) v[0]).charValue(), n);
            if (!Character.isLetterOrDigit(separator)) {
                if ((c == ((Character) v[0]).charValue()) && (c != 'S')) {
                    vecRemovelist.add(v);
                } else {
                    ((StringBuffer) v[1]).append(separator);
                    if ((c == 'X') || (c == 'Y')) {
                        v[2] = Constants.integerValueOf(4);
                    }
                }
            } else {
                if (c == 'X') {
                    c = 'y';
                    nv = new Object[3];
                    nv[1] = (new StringBuffer(((StringBuffer) v[1]).toString())).append('M');
                    nv[0] = Constants.characterValueOf('M');
                    nv[2] = Constants.integerValueOf(1);
                    vec.add(nv);
                } else if (c == 'Y') {
                    c = 'M';
                    nv = new Object[3];
                    nv[1] = (new StringBuffer(((StringBuffer) v[1]).toString())).append('d');
                    nv[0] = Constants.characterValueOf('d');
                    nv[2] = Constants.integerValueOf(1);
                    vec.add(nv);
                }
                ((StringBuffer) v[1]).append(c);
                if (c == ((Character) v[0]).charValue()) {
                    v[2] = Constants.integerValueOf(n + 1);
                } else {
                    v[0] = Constants.characterValueOf(c);
                    v[2] = Constants.integerValueOf(1);
                }
            }
        }
        int size = vecRemovelist.size();
        for (int i = 0; i < size; i++) {
            v = (Object[]) vecRemovelist.get(i);
            vec.remove(v);
        }
        vecRemovelist.clear();
    }
    int size = vec.size();
    for (int i = 0; i < size; i++) {
        v = (Object[]) vec.get(i);
        c = ((Character) v[0]).charValue();
        n = ((Integer) v[2]).intValue();
        boolean bk = getSuccessor(c, n) != c;
        boolean atEnd = (((c == 's') || (c == 'm') || ((c == 'h') && toTime)) && bk);
        boolean finishesAtDate = (bk && (c == 'd') && !toTime);
        boolean containsEnd = (((StringBuffer) v[1]).toString().indexOf('W') != -1);
        if ((!atEnd && !finishesAtDate) || (containsEnd)) {
            vecRemovelist.add(v);
        }
    }
    size = vecRemovelist.size();
    for (int i = 0; i < size; i++) {
        vec.remove(vecRemovelist.get(i));
    }
    vecRemovelist.clear();
    // might throw exception
    v = (Object[]) vec.get(0);
    StringBuffer format = (StringBuffer) v[1];
    format.setLength(format.length() - 1);
    return format.toString();
}
