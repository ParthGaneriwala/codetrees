private void buildAllItems() {
    m_blocks.clear();
    Cursor cursor = m_context.getContentResolver().query(m_uri, null, m_selection, m_selectionArgs, m_sortOrder);
    if (cursor != null) {
        if (cursor.moveToFirst()) {
            int id = cursor.getColumnIndexOrThrow(BaseColumns._ID);
            int sti = cursor.getColumnIndexOrThrow(SessionsColumns.TITLE);
            int spni = cursor.getColumnIndexOrThrow(SessionsColumns.SPEAKER_NAMES);
            int ri = cursor.getColumnIndexOrThrow(SessionsColumns.ROOM);
            int tri = cursor.getColumnIndexOrThrow(TracksColumns.TRACK);
            int ctri = cursor.getColumnIndexOrThrow(TracksColumns.COLOR);
            int ati = cursor.getColumnIndexOrThrow(SessionsColumns.STARRED);
            int btsi = cursor.getColumnIndexOrThrow(BlocksColumns.TIME_START);
            int btei = cursor.getColumnIndexOrThrow(BlocksColumns.TIME_END);
            long lastBlockStartTime = -1;
            Block block = null;
            do {
                long startTime = cursor.getLong(btsi);
                long endTime = cursor.getLong(btei);
                if (lastBlockStartTime + FIVE_MINUTES_IN_SECONDS < startTime) {
                    // if (lastBlockStartTime != startTime) {
                    lastBlockStartTime = startTime;
                    block = new Block(m_context, startTime, endTime);
                    m_blocks.add(block);
                }
                if (block.m_endTime < endTime) {
                    block.setEndTime(endTime, m_context);
                }
                block.addSession(new SessionRenderItem(m_context, cursor.getInt(id), startTime, endTime, cursor.getString(sti), cursor.getString(spni), cursor.getString(ri), cursor.getString(tri), cursor.getInt(ctri), cursor.getInt(ati) == 1));
            } while (cursor.moveToNext());
        }
        cursor.close();
    }
}
