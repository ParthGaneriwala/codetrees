private void getCommitFileSets(List<TeamStatusInfo> info, Set<File> filesToCommit, Set<File> filesToAdd, Set<File> filesToRemove, Set<File> mergeConflicts, Set<File> deleteConflicts, Set<File> otherConflicts, Set<File> needsMerge, Set<File> modifiedLayoutFiles) {
    // boolean includeLayout = project.getTeamSettingsController().includeLayout();
    CommitFilter filter = new CommitFilter();
    Map<File, File> modifiedLayoutDirs = new HashMap<File, File>();
    for (Iterator<TeamStatusInfo> it = info.iterator(); it.hasNext(); ) {
        TeamStatusInfo statusInfo = it.next();
        File file = statusInfo.getFile();
        boolean isPkgFile = BlueJPackageFile.isPackageFileName(file.getName());
        int status = statusInfo.getStatus();
        if (filter.accept(statusInfo)) {
            if (!isPkgFile) {
                commitListModel.addElement(statusInfo);
                filesToCommit.add(file);
            } else if (status == TeamStatusInfo.STATUS_NEEDSADD || status == TeamStatusInfo.STATUS_DELETED || status == TeamStatusInfo.STATUS_CONFLICT_LDRM) {
                // Package file which must be committed.
                if (packagesToCommmit.add(statusInfo.getFile().getParentFile())) {
                    commitListModel.addElement(statusInfo);
                    File otherPkgFile = modifiedLayoutDirs.remove(file.getParentFile());
                    if (otherPkgFile != null) {
                        removeChangedLayoutFile(otherPkgFile);
                        filesToCommit.add(otherPkgFile);
                    }
                }
                filesToCommit.add(statusInfo.getFile());
            } else {
                // add file to list of files that may be added to commit
                File parentFile = file.getParentFile();
                if (!packagesToCommmit.contains(parentFile)) {
                    modifiedLayoutFiles.add(file);
                    modifiedLayoutDirs.put(parentFile, file);
                    // keep track of StatusInfo objects representing changed diagrams
                    changedLayoutFiles.add(statusInfo);
                } else {
                    // We must commit the file unconditionally
                    filesToCommit.add(file);
                }
            }
            if (status == TeamStatusInfo.STATUS_NEEDSADD) {
                filesToAdd.add(statusInfo.getFile());
            } else if (status == TeamStatusInfo.STATUS_DELETED || status == TeamStatusInfo.STATUS_CONFLICT_LDRM) {
                filesToRemove.add(statusInfo.getFile());
            }
        } else {
            if (!isPkgFile) {
                if (status == TeamStatusInfo.STATUS_HASCONFLICTS) {
                    mergeConflicts.add(statusInfo.getFile());
                }
                if (status == TeamStatusInfo.STATUS_UNRESOLVED || status == TeamStatusInfo.STATUS_CONFLICT_ADD || status == TeamStatusInfo.STATUS_CONFLICT_LMRD) {
                    deleteConflicts.add(statusInfo.getFile());
                }
                if (status == TeamStatusInfo.STATUS_CONFLICT_LDRM) {
                    otherConflicts.add(statusInfo.getFile());
                }
                if (status == TeamStatusInfo.STATUS_NEEDSMERGE) {
                    needsMerge.add(statusInfo.getFile());
                }
            }
        }
    }
    setLayoutChanged(!changedLayoutFiles.isEmpty());
}
