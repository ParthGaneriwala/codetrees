public void testBlockSynchronization() throws Exception {
    final int ORG_FILE_SIZE = 3000;
    Configuration conf = new Configuration();
    conf.setLong("dfs.block.size", BLOCK_SIZE);
    MiniDFSCluster cluster = null;
    try {
        cluster = new MiniDFSCluster(conf, 5, true, null);
        cluster.waitActive();
        // create a file
        DistributedFileSystem dfs = (DistributedFileSystem) cluster.getFileSystem();
        String filestr = "/foo";
        Path filepath = new Path(filestr);
        DFSTestUtil.createFile(dfs, filepath, ORG_FILE_SIZE, REPLICATION_NUM, 0L);
        assertTrue(dfs.dfs.exists(filestr));
        DFSTestUtil.waitReplication(dfs, filepath, REPLICATION_NUM);
        // get block info for the last block
        LocatedBlock locatedblock = TestInterDatanodeProtocol.getLastLocatedBlock(dfs.dfs.namenode, filestr);
        DatanodeInfo[] datanodeinfos = locatedblock.getLocations();
        assertEquals(REPLICATION_NUM, datanodeinfos.length);
        // connect to data nodes
        InterDatanodeProtocol[] idps = new InterDatanodeProtocol[REPLICATION_NUM];
        DataNode[] datanodes = new DataNode[REPLICATION_NUM];
        for (int i = 0; i < REPLICATION_NUM; i++) {
            idps[i] = DataNode.createInterDataNodeProtocolProxy(datanodeinfos[i], conf);
            datanodes[i] = cluster.getDataNode(datanodeinfos[i].getIpcPort());
            assertTrue(datanodes[i] != null);
        }
        // verify BlockMetaDataInfo
        Block lastblock = locatedblock.getBlock();
        DataNode.LOG.info("newblocks=" + lastblock);
        for (int i = 0; i < REPLICATION_NUM; i++) {
            checkMetaInfo(lastblock, idps[i]);
        }
        // setup random block sizes
        int lastblocksize = ORG_FILE_SIZE % BLOCK_SIZE;
        Integer[] newblocksizes = new Integer[REPLICATION_NUM];
        for (int i = 0; i < REPLICATION_NUM; i++) {
            newblocksizes[i] = AppendTestUtil.nextInt(lastblocksize);
        }
        DataNode.LOG.info("newblocksizes = " + Arrays.asList(newblocksizes));
        // update blocks with random block sizes
        Block[] newblocks = new Block[REPLICATION_NUM];
        for (int i = 0; i < REPLICATION_NUM; i++) {
            newblocks[i] = new Block(lastblock.getBlockId(), newblocksizes[i], lastblock.getGenerationStamp());
            idps[i].updateBlock(lastblock, newblocks[i], false);
            checkMetaInfo(newblocks[i], idps[i]);
        }
        DataNode.LOG.info("dfs.dfs.clientName=" + dfs.dfs.clientName);
        cluster.getNameNode().append(filestr, dfs.dfs.clientName);
        // block synchronization
        final int primarydatanodeindex = AppendTestUtil.nextInt(datanodes.length);
        DataNode.LOG.info("primarydatanodeindex  =" + primarydatanodeindex);
        DataNode primary = datanodes[primarydatanodeindex];
        DataNode.LOG.info("primary.dnRegistration=" + primary.dnRegistration);
        primary.recoverBlocks(new Block[] { lastblock }, new DatanodeInfo[][] { datanodeinfos }).join();
        BlockMetaDataInfo[] updatedmetainfo = new BlockMetaDataInfo[REPLICATION_NUM];
        int minsize = min(newblocksizes);
        long currentGS = cluster.getNameNode().namesystem.getGenerationStamp();
        lastblock.setGenerationStamp(currentGS);
        for (int i = 0; i < REPLICATION_NUM; i++) {
            updatedmetainfo[i] = idps[i].getBlockMetaDataInfo(lastblock);
            assertEquals(lastblock.getBlockId(), updatedmetainfo[i].getBlockId());
            assertEquals(minsize, updatedmetainfo[i].getNumBytes());
            assertEquals(currentGS, updatedmetainfo[i].getGenerationStamp());
        }
    } finally {
        if (cluster != null) {
            cluster.shutdown();
        }
    }
}
