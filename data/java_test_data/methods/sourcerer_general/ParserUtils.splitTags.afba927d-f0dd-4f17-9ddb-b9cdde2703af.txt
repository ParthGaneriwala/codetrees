public static String[] splitTags(String input, NodeFilter filter, boolean recursive, boolean insideTag) throws ParserException, UnsupportedEncodingException {
    ArrayList outputArrayList = new ArrayList();
    int minCapacity = 0;
    String output = new String();
    String dummyString = createDummyString(' ', input.length());
    // loop inside the tags of the same type
    NodeList links = getLinks(input, filter, recursive);
    for (int j = 0; j < links.size(); j++) {
        CompositeTag beginTag = (CompositeTag) links.elementAt(j);
        Tag endTag = beginTag.getEndTag();
        // positions of begin and end tags
        int beginTagBegin = beginTag.getStartPosition();
        int endTagBegin = beginTag.getEndPosition();
        int beginTagEnd = endTag.getStartPosition();
        int endTagEnd = endTag.getEndPosition();
        if (insideTag) {
            dummyString = modifyDummyString(new String(dummyString), beginTagBegin, endTagEnd);
        } else {
            dummyString = modifyDummyString(new String(dummyString), beginTagBegin, endTagBegin);
            dummyString = modifyDummyString(new String(dummyString), beginTagEnd, endTagEnd);
        }
    }
    for (int k = dummyString.indexOf(' '); (k < dummyString.length()) && (k != -1); ) {
        int kNew = dummyString.indexOf('*', k);
        if (kNew != -1) {
            output = input.substring(k, kNew);
            k = dummyString.indexOf(' ', kNew);
            minCapacity++;
            outputArrayList.ensureCapacity(minCapacity);
            if (outputArrayList.add(output))
                output = new String();
            else
                minCapacity--;
        } else {
            output = input.substring(k, dummyString.length());
            k = kNew;
            minCapacity++;
            outputArrayList.ensureCapacity(minCapacity);
            if (outputArrayList.add(output))
                output = new String();
            else
                minCapacity--;
        }
    }
    outputArrayList.trimToSize();
    Object[] outputObj = outputArrayList.toArray();
    String[] outputStr = new String[outputArrayList.size()];
    for (int i = 0; i < outputArrayList.size(); i++) outputStr[i] = new String((String) outputObj[i]);
    return outputStr;
}
