private int parse(Element abstractElement, GeniaParse parse, StringBuffer text, int offset) {
    List<GeniaTag> posTags = new ArrayList<GeniaTag>();
    List<GeniaTag> sentencePosTags = new ArrayList<GeniaTag>();
    List<GeniaTag> wildcardTags = new ArrayList<GeniaTag>();
    Iterator<?> sentences = abstractElement.getChildren("sentence").iterator();
    while (sentences.hasNext()) {
        sentencePosTags.clear();
        wildcardTags.clear();
        Element sentence = (Element) sentences.next();
        int beginSentence = offset;
        Iterator<?> contents = sentence.getContent().iterator();
        while (contents.hasNext()) {
            Object content = contents.next();
            if (content instanceof Text) {
                Text contentText = (Text) content;
                text.append(contentText.getText());
                offset += contentText.getText().length();
            } else if (content instanceof Element) {
                Element wordElement = (Element) content;
                if (!wordElement.getName().equals("w"))
                    throw new RuntimeException("non-word element in sentence: " + wordElement);
                String wordText = wordElement.getText();
                text.append(wordText);
                String pos = wordElement.getAttributeValue("c");
                if (pos.indexOf('|') != -1)
                    pos = pos.substring(0, pos.indexOf('|'));
                GeniaTag posTag = new GeniaTag(pos, new Span(offset, offset + wordText.length()));
                if (pos.equals("*")) {
                    wildcardTags.add(posTag);
                } else {
                    if (wildcardTags.size() > 0) {
                        int start = wildcardTags.get(0).getSpans().get(0).getBegin();
                        posTag = new GeniaTag(pos, new Span(start, offset + wordText.length()));
                        wildcardTags.clear();
                    }
                    posTags.add(posTag);
                    sentencePosTags.add(posTag);
                }
                offset += wordText.length();
            }
        }
        int endSentence = offset;
        Span sentenceSpan = new Span(beginSentence, endSentence);
        GeniaSentence geniaSentence = new GeniaSentence();
        geniaSentence.setSpan(sentenceSpan);
        geniaSentence.addPosTags(sentencePosTags);
        parse.addSentence(geniaSentence);
        text.append("  ");
        offset += 2;
    }
    parse.addPosTags(posTags);
    return offset;
}
