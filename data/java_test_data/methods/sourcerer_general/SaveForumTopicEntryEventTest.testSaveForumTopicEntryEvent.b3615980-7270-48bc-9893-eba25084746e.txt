public void testSaveForumTopicEntryEvent() throws Exception {
    // Insert project
    Project project = new Project();
    project.setTitle("Project SQL Test");
    project.setShortDescription("Project SQL Test Description");
    project.setRequestDate(new Timestamp(System.currentTimeMillis()));
    project.setEstimatedCloseDate((Timestamp) null);
    project.setRequestedBy("Project SQL Test Requested By");
    project.setRequestedByDept("Project SQL Test Requested By Department");
    project.setBudgetCurrency("USD");
    project.setBudget("10000.75");
    project.setGroupId(GROUP_ID);
    project.setEnteredBy(USER_ID);
    project.setModifiedBy(USER_ID);
    assertNotNull(project);
    boolean result = project.insert(db);
    assertTrue("Project was not inserted", result);
    // Insert a issue category
    Forum forum = new Forum();
    forum.setProjectId(project.getId());
    forum.setEnteredBy(USER_ID);
    forum.setModifiedBy(USER_ID);
    forum.setSubject("Dummy Forum Subject");
    forum.insert(db);
    assertTrue("Unable to create a forum", forum.getId() > -1);
    // Insert a forum topic record
    Topic topic = new Topic();
    topic.setProjectId(project.getId());
    topic.setSubject("Dummy Subject");
    topic.setBody("Dummy Body");
    topic.setEnteredBy(USER_ID);
    topic.setModifiedBy(USER_ID);
    topic.setCategoryId(forum.getId());
    topic.insert(db);
    Project userProfile = ProjectUtils.loadProject(workflowUser.getProfileProjectId());
    BusinessProcess thisProcess = (BusinessProcess) processList.get(PROCESS_NAME);
    assertTrue("Process not found...", thisProcess != null);
    context.setPreviousObject(null);
    context.setThisObject(topic);
    context.setProcessName(PROCESS_NAME);
    context.setProcess(thisProcess);
    context.setAttribute("userId", new Integer(USER_ID));
    context.setAttribute("user", WikiLink.generateLink(userProfile));
    context.setAttribute("topic", WikiLink.generateLink(topic));
    workflowManager.execute(context);
    // Now query the database and test to see if a history item was added for the specified test user Id.
    ProjectHistoryList historyList = new ProjectHistoryList();
    historyList.setProjectId(project.getId());
    historyList.setEnteredBy(USER_ID);
    historyList.setLinkObject(ProjectHistoryList.TOPIC_OBJECT);
    historyList.setEventType(ProjectHistoryList.POST_FORUM_TOPIC_EVENT);
    historyList.setLinkItemId(topic.getId());
    historyList.buildList(db);
    assertTrue("History event was not recorded!", historyList.size() == 1);
    ProjectHistory history = historyList.get(0);
    assertEquals("Recorded event mismatch", "[[|" + userProfile.getId() + ":profile||" + userProfile.getTitle() + "]] " + "@[[|" + project.getId() + ":profile||" + project.getTitle() + "]] " + "posted the topic [[|" + project.getId() + ":topic|" + topic.getId() + "|Dummy Subject]]", history.getDescription());
    // Delete the history item because the test is done (and any other needed objects)
    history.delete(db);
    // Delete the topic
    topic.delete(db, (String) null);
    // Delete the forum
    forum.delete(db, (String) null);
    // Delete the project
    boolean deleteResult = project.delete(db, (String) null);
    assertTrue("Project wasn't deleted", deleteResult);
    // Try to find the previously deleted project
    ProjectList projectList = new ProjectList();
    projectList.setProjectId(project.getId());
    projectList.buildList(db);
    assertTrue("Project exists when it shouldn't -- id " + project.getId(), projectList.size() == 0);
}
