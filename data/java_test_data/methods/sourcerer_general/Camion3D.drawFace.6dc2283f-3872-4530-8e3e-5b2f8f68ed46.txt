private void drawFace(GL gl, float r, float g, float b, Point hg, Point bg, Point bd, Point hd) {
    gl.glEnable(GL.GL_BLEND);
    gl.glBlendFunc(GL.GL_SRC_ALPHA, GL.GL_ONE_MINUS_SRC_ALPHA);
    // dessine un rectangle
    if (surface) {
        gl.glColor4f(r, g, b, transparence);
        gl.glBegin(GL.GL_POLYGON);
        gl.glVertex3f((p + hg.x) / taille, (q + hg.y) / taille, (s + hg.z) / taille);
        gl.glVertex3f((p + bg.x) / taille, (q + bg.y) / taille, (s + bg.z) / taille);
        gl.glVertex3f((p + bd.x) / taille, (q + bd.y) / taille, (s + bd.z) / taille);
        gl.glVertex3f((p + hd.x) / taille, (q + hd.y) / taille, (s + hd.z) / taille);
        gl.glEnd();
    }
    // 0=noir,1=blanc
    if (surface) {
        r = 0;
        g = 0;
        b = 0;
    } else {
        r = 1;
        g = 1;
        b = 1;
    }
    gl.glBegin(GL.GL_LINE_LOOP);
    gl.glColor4f(r, g, b, 0.5f);
    gl.glVertex3f((p + hg.x) / taille, (q + hg.y) / taille, (s + hg.z) / taille);
    gl.glVertex3f((p + bg.x) / taille, (q + bg.y) / taille, (s + bg.z) / taille);
    gl.glVertex3f((p + bd.x) / taille, (q + bd.y) / taille, (s + bd.z) / taille);
    gl.glVertex3f((p + hd.x) / taille, (q + hd.y) / taille, (s + hd.z) / taille);
    gl.glEnd();
    gl.glDisable(GL.GL_BLEND);
}
