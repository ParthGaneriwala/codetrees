public void testSearchRules() throws Exception {
    // Index a few projects to compare search results
    Project project = new Project();
    DateFormatSymbols symbols = new DateFormatSymbols(Locale.US);
    for (int i = 0; i < 12; i++) {
        String month = symbols.getMonths()[i];
        String shortMonth = symbols.getShortMonths()[i];
        // Basic project info
        project.setId(i);
        project.setCategoryId(1);
        project.setAllowGuests(true);
        project.setMembershipRequired(false);
        project.setApproved(true);
        project.setClosed(false);
        project.setPortal(false);
        // Unique Title
        project.setTitle(month + " test project");
        project.setShortDescription(month + " description word");
        project.setKeywords(shortMonth);
        // Unique Location
        project.setCity("Virginia Beach");
        project.setState("VA");
        project.setPostalCode("234" + String.valueOf(50 + i));
        // Random Rating for now
        project.setRatingCount(i + 1);
        project.setRatingValue(project.getRatingCount() * StringUtils.rand(1, 5));
        project.setRatingAverage(project.getRatingValue() / project.getRatingCount());
        // Index it
        ProjectIndexer indexer = new ProjectIndexer();
        indexer.add(snowballWriter, project, true);
    }
    QueryParser parser = new QueryParser("contents", snowballAnalyzer);
    {
        // Make sure a single matching term yields a single hit
        SearchBean search = new SearchBean();
        search.setQuery(symbols.getMonths()[0]);
        search.setLocation("Virginia Beach");
        assertNotNull(search.getQuery());
        assertNotNull(search.getLocation());
        search.parseQuery();
        assertTrue(search.isValid());
        String queryString = SearchUtils.generateProjectQueryString(search, UserUtils.createGuestUser().getId(), -1, null);
        assertNotNull(queryString);
        // (approved:1)
        // AND (guests:1)
        // AND (closed:0)
        // AND (website:0)
        // AND ("january"^20 OR january^15 OR january*^4) AND (location:("virginia beach"^30))
        Query query = parser.parse(queryString);
        Hits hits = getSnowballSearcher().search(query);
        assertTrue(hits.length() == 1);
    }
    {
        // Make sure a single matching term stem yields a single hit
        SearchBean search = new SearchBean();
        search.setQuery(symbols.getMonths()[0] + "'s");
        search.setLocation("Virginia Beach");
        assertNotNull(search.getQuery());
        assertNotNull(search.getLocation());
        search.parseQuery();
        assertTrue(search.isValid());
        String queryString = SearchUtils.generateProjectQueryString(search, UserUtils.createGuestUser().getId(), -1, null);
        assertNotNull(queryString);
        // (approved:1)
        // AND (guests:1)
        // AND (closed:0)
        // AND (website:0)
        // AND ("january's"^20 OR january's^15 OR january's*^4) AND (location:("virginia beach"^30))
        Query query = parser.parse(queryString);
        Hits hits = getSnowballSearcher().search(query);
        assertTrue(hits.length() == 1);
    }
    {
        // Make sure multiple matching words yield two hits
        SearchBean search = new SearchBean();
        search.setQuery(symbols.getMonths()[0] + " " + symbols.getMonths()[1]);
        search.setLocation("Virginia Beach");
        search.parseQuery();
        assertTrue(search.isValid());
        String queryString = SearchUtils.generateProjectQueryString(search, UserUtils.createGuestUser().getId(), -1, null);
        assertNotNull(queryString);
        // (approved:1)
        // AND (guests:1)
        // AND (closed:0)
        // AND (website:0)
        // AND ("january february"^20 OR january^15 OR february^14 OR january*^4 OR february*^3) AND (location:("virginia beach"^30))
        Query query = parser.parse(queryString);
        Hits hits = getSnowballSearcher().search(query);
        assertTrue(hits.length() == 2);
    }
    {
        // Make sure wilcards yield multiple hits
        SearchBean search = new SearchBean();
        search.setQuery("j");
        search.setLocation("Virginia Beach");
        search.parseQuery();
        assertTrue(search.isValid());
        // Look for data with a "j" for comparison
        int jCount = 0;
        for (int i = 0; i < symbols.getMonths().length; i++) {
            if (symbols.getMonths()[i].toLowerCase().indexOf("j") > -1 || symbols.getShortMonths()[i].toLowerCase().indexOf("j") > -1) {
                ++jCount;
            }
        }
        assertTrue(jCount > 0);
        String queryString = SearchUtils.generateProjectQueryString(search, UserUtils.createGuestUser().getId(), -1, null);
        assertNotNull(queryString);
        // (approved:1)
        // AND (guests:1)
        // AND (closed:0)
        // AND (website:0)
        // AND ("j"^20 OR j^15 OR j*^4) AND (location:("virginia beach"^30))
        Query query = parser.parse(queryString);
        Hits hits = getSnowballSearcher().search(query);
        assertTrue(hits.length() == jCount);
    }
    {
        // Make sure alternate locations do not yield any hits
        SearchBean search = new SearchBean();
        search.setQuery(symbols.getMonths()[0]);
        search.setLocation("Norfolk");
        search.parseQuery();
        String queryString = SearchUtils.generateProjectQueryString(search, UserUtils.createGuestUser().getId(), -1, null);
        Query query = parser.parse(queryString);
        Hits hits = getSnowballSearcher().search(query);
        assertTrue(hits.length() == 0);
    }
    {
        // Make sure locations as query terms do not yield any hits
        SearchBean search = new SearchBean();
        search.setQuery("Virginia Beach");
        search.setLocation("Virginia Beach");
        search.parseQuery();
        String queryString = SearchUtils.generateProjectQueryString(search, UserUtils.createGuestUser().getId(), -1, null);
        Query query = parser.parse(queryString);
        Hits hits = getSnowballSearcher().search(query);
        assertTrue(hits.length() == 0);
    }
}
