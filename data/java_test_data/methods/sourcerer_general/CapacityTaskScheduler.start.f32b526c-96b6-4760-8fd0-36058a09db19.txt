@Override
public synchronized void start() throws IOException {
    if (started)
        return;
    super.start();
    RECLAIM_CAPACITY_INTERVAL = conf.getLong("mapred.capacity-scheduler.reclaimCapacity.interval", 5);
    RECLAIM_CAPACITY_INTERVAL *= 1000;
    // initialize our queues from the config settings
    if (null == rmConf) {
        rmConf = new CapacitySchedulerConf();
    }
    // read queue info from config file
    QueueManager queueManager = taskTrackerManager.getQueueManager();
    Set<String> queues = queueManager.getQueues();
    Set<String> queuesWithoutConfiguredGC = new HashSet<String>();
    float totalCapacity = 0.0f;
    for (String queueName : queues) {
        float gc = rmConf.getGuaranteedCapacity(queueName);
        if (gc == -1.0) {
            queuesWithoutConfiguredGC.add(queueName);
        } else {
            totalCapacity += gc;
        }
        int ulMin = rmConf.getMinimumUserLimitPercent(queueName);
        long reclaimTimeLimit = rmConf.getReclaimTimeLimit(queueName);
        // reclaimTimeLimit is the time(in millisec) within which we need to
        // reclaim capacity.
        // create queue scheduling objects for Map and Reduce
        mapScheduler.add(new QueueSchedulingInfo(queueName, gc, ulMin, reclaimTimeLimit));
        reduceScheduler.add(new QueueSchedulingInfo(queueName, gc, ulMin, reclaimTimeLimit));
        // create the queues of job objects
        boolean supportsPrio = rmConf.isPrioritySupported(queueName);
        jobQueuesManager.createQueue(queueName, supportsPrio);
        SchedulingInfo schedulingInfo = new SchedulingInfo(mapScheduler.getQueueSchedulingInfo(queueName), reduceScheduler.getQueueSchedulingInfo(queueName), supportsPrio);
        queueManager.setSchedulerInfo(queueName, schedulingInfo);
    }
    float remainingQuantityToAllocate = 100 - totalCapacity;
    float quantityToAllocate = remainingQuantityToAllocate / queuesWithoutConfiguredGC.size();
    for (String queue : queuesWithoutConfiguredGC) {
        QueueSchedulingInfo schedulingInfo = mapScheduler.getQueueSchedulingInfo(queue);
        schedulingInfo.guaranteedCapacityPercent = quantityToAllocate;
        schedulingInfo = reduceScheduler.getQueueSchedulingInfo(queue);
        schedulingInfo.guaranteedCapacityPercent = quantityToAllocate;
        rmConf.setGuaranteedCapacity(queue, quantityToAllocate);
    }
    if (totalCapacity > 100.0) {
        throw new IllegalArgumentException("Sum of queue capacities over 100% at " + totalCapacity);
    }
    // Sanity check: there should be at least one queue.
    if (0 == mapScheduler.getNumQueues()) {
        throw new IllegalStateException("System has no queue configured");
    }
    // check if there's a queue with the default name. If not, we quit.
    if (!mapScheduler.isQueuePresent(DEFAULT_QUEUE_NAME)) {
        throw new IllegalStateException("System has no default queue configured");
    }
    // listen to job changes
    taskTrackerManager.addJobInProgressListener(jobQueuesManager);
    // start thread for redistributing capacity
    this.reclaimCapacityThread = new Thread(new ReclaimCapacity(), "reclaimCapacity");
    this.reclaimCapacityThread.start();
    started = true;
    LOG.info("Capacity scheduler initialized " + queues.size() + " queues");
}
