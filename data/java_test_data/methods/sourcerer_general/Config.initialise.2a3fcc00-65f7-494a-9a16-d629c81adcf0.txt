public static void initialise(File bluejLibDir, Properties tempCommandLineProps, boolean bootingGreenfoot) {
    if (initialised)
        return;
    initialised = true;
    initialCommandLineProps = tempCommandLineProps;
    isGreenfoot = bootingGreenfoot;
    screenBounds = calculateScreenBounds();
    // construct paths for the configuration directories
    Config.bluejLibDir = bluejLibDir;
    Config.greenfootLibDir = new File(bluejLibDir, "greenfoot");
    // setup our heirarchy of property objects if it is not done yet:
    if (systemProps == null) {
        isDebugVm = false;
        // top level is the system properties loaded from bluej.defs
        systemProps = loadDefs("bluej.defs", System.getProperties());
        // and then the user propeties (not loaded yet)
        if (isGreenfoot()) {
            greenfootProps = loadDefs("greenfoot.defs", systemProps);
            userProps = new Properties(greenfootProps);
        } else {
            userProps = new Properties(systemProps);
        }
    }
    // then there is the command line properties
    commandProps = new Properties(userProps);
    // copy in all our command line properties (done first
    // incase the bluej.userHome property is one specified)
    commandProps.putAll(tempCommandLineProps);
    commandProps.setProperty("bluej.libdir", bluejLibDir.getAbsolutePath());
    // get user home directory
    {
        File userHome;
        String homeDir = getPropString("bluej.userHome", "$user.home");
        userHome = new File(homeDir);
        // get user specific bluej property directory (in user home)
        userPrefDir = new File(userHome, getBlueJPrefDirName());
        if (!userPrefDir.isDirectory()) {
            userPrefDir.mkdirs();
        }
    }
    // add user specific definitions (bluej.properties or greenfoot.properties)
    loadProperties(getApplicationName().toLowerCase(), userProps);
    // set a new name for the log file if we are running in greenfoot mode
    if (isGreenfoot) {
        debugLogName = greenfootDebugLogName;
    }
    checkDebug(userPrefDir);
    // find our language (but default to english if none found)
    language = commandProps.getProperty("bluej.language", DEFAULT_LANGUAGE);
    langProps = loadLanguageLabels(language);
    moeSystemProps = loadDefs("moe.defs", System.getProperties());
    moeUserProps = new Properties(moeSystemProps);
    // add user specific editor definitions
    loadProperties("moe", moeUserProps);
    compilertype = Config.getPropString("bluej.compiler.type");
    if (compilertype.equals("internal")) {
        compilertype = "javac";
    }
    // Whether or not to use the screen menu bar on a Mac
    String macOSscreenMenuBar = Config.getPropString("bluej.macos.screenmenubar", "true");
    // The value of the BlueJ property overrides the system setting
    System.setProperty("apple.laf.useScreenMenuBar", macOSscreenMenuBar);
    usingMacOSScreenMenubar = (isMacOS() && macOSscreenMenuBar.equals("true"));
    boolean themed = Config.getPropBoolean("bluej.useTheme");
    if (themed) {
        MetalLookAndFeel.setCurrentTheme(new BlueJTheme());
    }
    String laf = Config.getPropString("bluej.lookAndFeel", "bluejdefault");
    setLookAndFeel(laf);
    // read any debug vm args
    initDebugVMArgs();
    Config.setVMLocale();
    // Create a property containing the BlueJ version string
    // put it in command_props so it won't be saved to a file
    commandProps.setProperty("bluej.version", Boot.BLUEJ_VERSION);
}
