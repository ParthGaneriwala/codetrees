private ParseNode rDecl() {
    KeywordNode routineParent = new KeywordNode(nowReadingsymbol);
    TypeNode returnType;
    IdentifierNode routineId;
    // it is a parent its children are what we need
    ParseNode parameterList = new ProgramNode(PROGRAM);
    BlockNode blockStatement = new BlockNode(BLOCK);
    // to deal with {{    {print;}    }} this case
    BlockStatementToken blockSymbolStart = BlockStatementToken.make(null, "{", BlockSymbol.START);
    BlockStatementNode left = new BlockStatementNode(new TokenGrammarSymbol(blockSymbolStart));
    left.setToRoutine();
    BlockStatementToken blockSymbolEnd = BlockStatementToken.make(null, "}", BlockSymbol.END);
    BlockStatementNode right = new BlockStatementNode(new TokenGrammarSymbol(blockSymbolEnd));
    right.setToRoutine();
    readToken();
    if (nowReadingsymbol.isTypeKeyword()) {
        // colon
        PunctuationToken colon = PunctuationToken.make(null, ":", PunctuationSymbol.COLON);
        PunctuationSymbolNode colonNode = new PunctuationSymbolNode(new TokenGrammarSymbol(colon));
        // result
        IdentifierToken resultT = IdentifierToken.make(null, "result");
        IdentifierNode resultTNode = new IdentifierNode(new TokenGrammarSymbol(resultT));
        returnType = new TypeNode(nowReadingsymbol);
        returnType.appendChild(resultTNode);
        readToken();
        if (!nowReadingsymbol.isTerminal(IdentifierToken.class)) {
            if (nowReadingsymbol.isOperator(Operator.LINDEXING)) {
                error("The array type can not used to be as a return type!");
                return null;
            } else {
                error("There are something wrong in the declaration the routine!");
                return null;
            }
        }
        routineId = new IdentifierNode(nowReadingsymbol);
        readToken();
        if (!nowReadingsymbol.isOperator(Operator.LBRACKET)) {
            error("There are something wrong in the declaration the routine!");
            return null;
        }
        readToken();
        parameterList = paraList();
        if (!nowReadingsymbol.isOperator(Operator.RBRACKET)) {
            error("There are something wrong in the declaration the routine!");
            return null;
        }
        readToken();
        if (!nowReadingsymbol.isBlockSymbol(BlockSymbol.START)) {
            error("There are something wrong in the declaration the routine!");
            return null;
        }
        blockStatement = (BlockNode) routineBlockStmt();
        // do not need to check isEndOfFile since the routineBlockStmt did this job
        // append the return type to ID
        routineId.appendChild(returnType);
        // indicate the separation between return parameter and paramaterList
        routineId.appendChild(colonNode);
        // append the parameters to ID
        if (parameterList == null) {
        // do noghing
        } else {
            for (ParseNode child : parameterList.getChildren()) {
                routineId.appendChild(child);
            }
        }
        routineId.appendChild(colonNode);
        // indicate id is a routine ID
        routineParent.appendChild(left);
        routineParent.appendChild(routineId);
        routineParent.appendChild(blockStatement);
        routineParent.appendChild(right);
        return routineParent;
    } else if (nowReadingsymbol.isTerminal(IdentifierToken.class)) {
        PunctuationToken colon = PunctuationToken.make(null, ":", PunctuationSymbol.COLON);
        PunctuationSymbolNode colonNode = new PunctuationSymbolNode(new TokenGrammarSymbol(colon));
        routineId = new IdentifierNode(nowReadingsymbol);
        routineId.appendChild(colonNode);
        readToken();
        if (!nowReadingsymbol.isOperator(Operator.LBRACKET)) {
            error("There are something wrong in the declaration the routine!");
            return null;
        }
        readToken();
        parameterList = paraList();
        if (!nowReadingsymbol.isOperator(Operator.RBRACKET)) {
            error("There are something wrong in the declaration the routine!");
            return null;
        }
        readToken();
        if (!nowReadingsymbol.isBlockSymbol(BlockSymbol.START)) {
            error("There are something wrong in the declaration the routine!");
            return null;
        }
        blockStatement = (BlockNode) routineBlockStmt();
        // append the parameters to ID
        if (parameterList == null) {
        // do noghing
        } else {
            for (ParseNode child : parameterList.getChildren()) {
                routineId.appendChild(child);
            }
        }
        // indicate id is a routine ID
        routineId.appendChild(colonNode);
        // indicate id is a routine ID
        routineParent.appendChild(left);
        routineParent.appendChild(routineId);
        routineParent.appendChild(blockStatement);
        routineParent.appendChild(right);
        return routineParent;
    } else {
        error("There are something wrong in the declaration the routine!");
    }
    return null;
}
