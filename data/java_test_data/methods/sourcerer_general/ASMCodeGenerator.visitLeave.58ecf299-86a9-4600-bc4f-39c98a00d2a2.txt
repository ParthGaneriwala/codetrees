// leave KeywordNode
// ////////////////////////////////////////////////////////////////////////
public boolean visitLeave(BinaryOperatorNode node) {
    if (node.getOperator() == Operator.AT) {
        newVoidCode(node);
        if (node.nChildren() == 2) {
            ASMCodeFragment lvalue = removeAddressCode(node.child(1));
            ASMCodeFragment rvalue = removeValueCode(node.child(0));
            // ��û���� type�����µ����???????????????????????????????
            code.append(lvalue);
            code.append(rvalue);
            if (// type-dependent!
            node.child(0).getType() == PrimitiveType.FLOAT)
                code.add(StoreF);
            else if (// type-dependent!
            node.child(0).getType() == PrimitiveType.INTEGER)
                // type-dependent!
                code.add(StoreI);
            else if (// type-dependent!
            node.child(0).getType() == PrimitiveType.BOOLEAN)
                code.add(StoreI);
            else if (// type-dependent!
            node.child(0).getType() == PrimitiveType.STRING)
                code.add(Call, RunTime.STRING_COPY_ROUTINE);
            else
                return false;
            return true;
        } else
            return false;
    } else {
        newValueCode(node);
        ASMCodeFragment arg1 = removeValueCode(node.child(0));
        ASMCodeFragment arg2 = removeValueCode(node.child(1));
        code.append(arg1);
        code.append(arg2);
        if (node.getType() != PrimitiveType.STRING) {
            // opcodeForOperator(node.getOperator());
            ASMOpcode opcode = opcodeForOperator(node);
            if (opcode == ASMOpcode.Remainder) {
                /**
                 * ture modulo of -10 % 3 = 2:
                 * a%b= [(a % |b|) + |b|] % |b| where the right % is a c++ modulo
                 * PushI        -10
                 * PushI        3
                 * Exchange
                 * PushI        0
                 * Exchange
                 * StoreI
                 * Duplicate
                 * JumpPos      $escape-negation-1
                 * Negate
                 * Label        $escape-negation-1
                 * Duplicate
                 * Duplicate
                 * PushI        0
                 * LoadI
                 * Exchange
                 * PushI        0
                 * PushI        0
                 * StoreI
                 * Remainder
                 * Add
                 * Exchange
                 * Remainder
                 */
                // at initial the stack is [...a b]
                // [...b a]
                code.add(ASMOpcode.Exchange);
                // [...b a 0]
                code.add(ASMOpcode.PushI, 0);
                // [...b 0 a]
                code.add(ASMOpcode.Exchange);
                // [...b]
                code.add(ASMOpcode.StoreI);
                // [...b b]
                code.add(ASMOpcode.Duplicate);
                // [...b]
                code.add(ASMOpcode.JumpPos, "$escape-negation-" + uniNumberCounter);
                // [|b|]
                code.add(ASMOpcode.Negate);
                code.add(ASMOpcode.Label, "$escape-negation-" + uniNumberCounter);
                code.add(ASMOpcode.Duplicate);
                // [...|b| |b| |b|]
                code.add(ASMOpcode.Duplicate);
                code.add(ASMOpcode.PushI, 0);
                // [...|b| |b| |b| a]
                code.add(ASMOpcode.LoadI);
                // [...|b| |b| a |b|]
                code.add(ASMOpcode.Exchange);
                // recover the first four locations in memory back to zero
                code.add(ASMOpcode.PushI, 0);
                // MEM[0...0+3]<-0
                code.add(ASMOpcode.PushI, 0);
                code.add(ASMOpcode.StoreI);
                code.add(ASMOpcode.Remainder);
                code.add(ASMOpcode.Add);
                code.add(ASMOpcode.Exchange);
                code.add(ASMOpcode.Remainder);
                uniNumberCounter++;
            } else {
                if (opcode == ASMOpcode.Gt) {
                    // convert the top two number to float
                    if (node.child(0).getType() == PrimitiveType.INTEGER) {
                        code.add(Exchange);
                        code.add(ConvertF);
                        code.add(Exchange);
                    }
                    if (node.child(1).getType() == PrimitiveType.INTEGER) {
                        code.add(ConvertF);
                    }
                    code.add(Call, "$-Comparison-gt-routine");
                } else if (opcode == ASMOpcode.Lt) {
                    // convert the top two number to float
                    if (node.child(0).getType() == PrimitiveType.INTEGER) {
                        code.add(Exchange);
                        code.add(ConvertF);
                        code.add(Exchange);
                    }
                    if (node.child(1).getType() == PrimitiveType.INTEGER) {
                        code.add(ConvertF);
                    }
                    code.add(Call, "$-Comparison-lt-routine");
                } else if (opcode == ASMOpcode.GtOrEq) {
                    // convert the top two number to float
                    if (node.child(0).getType() == PrimitiveType.INTEGER) {
                        code.add(Exchange);
                        code.add(ConvertF);
                        code.add(Exchange);
                    }
                    if (node.child(1).getType() == PrimitiveType.INTEGER) {
                        code.add(ConvertF);
                    }
                    code.add(Call, "$-Comparison-gtoreq-routine");
                } else if (opcode == ASMOpcode.LtOrEq) {
                    // convert the top two number to float
                    if (node.child(0).getType() == PrimitiveType.INTEGER) {
                        code.add(Exchange);
                        code.add(ConvertF);
                        code.add(Exchange);
                    }
                    if (node.child(1).getType() == PrimitiveType.INTEGER) {
                        code.add(ConvertF);
                    }
                    code.add(Call, "$-Comparison-ltoreq-routine");
                } else if (opcode == ASMOpcode.Eq) {
                    // convert the top two number to float
                    if (node.child(0).getType() == PrimitiveType.INTEGER) {
                        code.add(Exchange);
                        code.add(ConvertF);
                        code.add(Exchange);
                    }
                    if (node.child(1).getType() == PrimitiveType.INTEGER) {
                        code.add(ConvertF);
                    }
                    code.add(Call, "$-Comparison-eq-routine");
                } else if (opcode == ASMOpcode.NotEq) {
                    // convert the top two number to float
                    if (node.child(0).getType() == PrimitiveType.INTEGER) {
                        code.add(Exchange);
                        code.add(ConvertF);
                        code.add(Exchange);
                    }
                    if (node.child(1).getType() == PrimitiveType.INTEGER) {
                        code.add(ConvertF);
                    }
                    code.add(Call, "$-Comparison-noteq-routine");
                } else {
                    // all the operators other than String.+ % @
                    if (node.child(0).getType() == node.child(1).getType())
                        // type-dependent!
                        code.add(opcode);
                    else {
                        // handle conversion
                        if (opcode == ASMOpcode.FAdd) {
                            if (node.child(0).getType() == PrimitiveType.INTEGER) {
                                code.add(Exchange);
                                code.add(ConvertF);
                                code.add(opcode);
                            } else {
                                code.add(ConvertF);
                                code.add(opcode);
                            }
                        } else if (opcode == ASMOpcode.FSubtract) {
                            if (node.child(0).getType() == PrimitiveType.INTEGER) {
                                code.add(Exchange);
                                code.add(ConvertF);
                                code.add(Exchange);
                                code.add(opcode);
                            } else {
                                code.add(ConvertF);
                                code.add(opcode);
                            }
                        } else if (opcode == ASMOpcode.FMultiply) {
                            if (node.child(0).getType() == PrimitiveType.INTEGER) {
                                code.add(Exchange);
                                code.add(ConvertF);
                                code.add(Exchange);
                                code.add(opcode);
                            } else {
                                code.add(ConvertF);
                                code.add(opcode);
                            }
                        } else {
                            // divide
                            if (node.child(0).getType() == PrimitiveType.INTEGER) {
                                code.add(Exchange);
                                code.add(ConvertF);
                                code.add(Exchange);
                                code.add(opcode);
                            } else {
                                code.add(ConvertF);
                                code.add(opcode);
                            }
                        }
                    }
                }
            }
            return true;
        } else {
            // handle string concat
            code.add(Call, "$-string-concat-routine");
            return true;
        }
    }
}
