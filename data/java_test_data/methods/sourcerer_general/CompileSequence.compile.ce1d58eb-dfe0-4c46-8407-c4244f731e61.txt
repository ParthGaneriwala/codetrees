// throw CompilerFailedException if there are errors
public void compile() throws CompilerFailedException, IllegalArgumentException {
    error_queue = abcExt.getErrorQueue();
    if (error_queue == null)
        error_queue = new StdErrorQueue(System.out, 100, "JastAdd");
    try {
        Collection c = new ArrayList();
        c.addAll(aspect_sources);
        c.add("-classpath");
        c.add(OptionsParser.v().classpath());
        String[] args = new String[c.size()];
        int index = 0;
        for (Iterator iter = c.iterator(); iter.hasNext(); index++) {
            String s = (String) iter.next();
            args[index] = s;
        }
        Program program = new Program();
        program.state().reset();
        program.initBytecodeReader(new BytecodeParser());
        program.initJavaParser(new JavaParser() {

            public CompilationUnit parse(InputStream is, String fileName) throws IOException, beaver.Parser.Exception {
                return new ca.mcgill.sable.clara.parse.JavaParser().parse(is, fileName, error_queue);
            }
        });
        Options options = program.options();
        options.initOptions();
        options.addKeyValueOption("-classpath");
        options.addKeyOption("-verbose");
        options.addOptions(args);
        Collection files = options.files();
        for (Iterator iter = files.iterator(); iter.hasNext(); ) {
            String name = (String) iter.next();
            program.addSourceFile(name);
        }
        for (Iterator iter = jar_classes.iterator(); iter.hasNext(); ) {
            String name = (String) iter.next();
            CompilationUnit u = program.getCompilationUnit(name);
            u.weavableClass = true;
            program.addCompilationUnit(u);
        }
        for (Iterator iter = program.compilationUnitIterator(); iter.hasNext(); ) {
            CompilationUnit unit = (CompilationUnit) iter.next();
            if (unit.fromSource()) {
                // abort if there were syntax or lexical errors
                if (error_queue().errorCount() > 0)
                    throw new CompilerFailedException("There were errors.");
            }
        }
        if (options.verbose())
            System.out.println("Error checking");
        ArrayList errors = new ArrayList();
        ArrayList warnings = new ArrayList();
        program.errorCheck(errors, warnings);
        boolean hasErrors = false;
        if (!errors.isEmpty()) {
            Collections.sort(errors);
            for (Iterator iter2 = errors.iterator(); iter2.hasNext(); ) {
                Problem p = (Problem) iter2.next();
                addError(p);
            }
            hasErrors = true;
        }
        if (!warnings.isEmpty()) {
            Collections.sort(warnings);
            for (Iterator iter2 = warnings.iterator(); iter2.hasNext(); ) {
                Problem p = (Problem) iter2.next();
                addWarning(p);
            }
        }
        if (hasErrors)
            throw new CompilerFailedException("There were errors.");
        program.generateIntertypeDecls();
        program.transformation();
        program.jimplify1();
        program.jimplify2();
        abc.main.Main.v().getAbcExtension().getGlobalAspectInfo().buildAspectHierarchy();
        abc.main.AbcTimer.mark("Aspect inheritance");
        abc.main.Debug.phaseDebug("Aspect inheritance");
    } catch (Error e) {
        throw (IllegalArgumentException) new IllegalArgumentException("Polyglot usage error: " + e.getMessage()).initCause(e);
    }
    // Output the aspect info
    if (abc.main.Debug.v().aspectInfo)
        abc.main.Main.v().getAbcExtension().getGlobalAspectInfo().print(System.err);
    Scene.v().loadDynamicClasses();
    final DAInfo dai = ((HasDAInfo) Main.v().getAbcExtension()).getDependentAdviceInfo();
    // perform "type checks" in the back-end (for dependencies that were added as aspect-info
    if (!dai.consistencyCheckForDependentAdvice())
        throw new CompilerFailedException("There were semantic errors in the definition of dependent advice.");
}
