// void setBeanValue(
// Component comp, Object val, String path, boolean autoConvert)
// {
// Object orgVal = null;
// Object bean = null;
// BindingNode currentNode = _pathTree;
// boolean refChanged = false; //wether this setting change the reference
// String beanid = null;
// final List nodeids = parseExpression(path, ".");
// final List nodes = new ArrayList(nodeids.size());
// final Iterator it = nodeids.iterator();
// if (it != null && it.hasNext()) {
// beanid = (String) it.next();
// currentNode = (BindingNode) currentNode.getKidNode(beanid);
// if (currentNode == null) {
// throw new UiException("Cannot find the specified databind bean expression:" + path);
// }
// nodes.add(currentNode);
// bean = lookupBean(comp, beanid);
// } else {
// throw new UiException("Incorrect format of databind bean expression:" + path);
// }
// 
// if (!it.hasNext()) { //assign back to where bean is stored
// orgVal = bean;
// if(Objects.equals(orgVal, val)) {
// return; //same value, no need to do anything
// }
// if (existsBean(beanid)) {
// setBean(beanid, val);
// } else if (!setZScriptVariable(comp, beanid, val)) {
// comp.setVariable(beanid, val, false);
// }
// refChanged = true;
// } else {
// if (bean == null) {
// return; //no bean to set value, skip
// }
// int sz = nodeids.size() - 2; //minus first and last beanid in path
// for(;bean != null && it.hasNext() && sz > 0; --sz) {
// beanid = (String) it.next();
// currentNode = (BindingNode) currentNode.getKidNode(beanid);
// if (currentNode == null) {
// throw new UiException("Cannot find the specified databind bean expression:" + path);
// }
// nodes.add(currentNode);
// try {
// bean = Fields.get(bean, beanid);
// } catch (NoSuchMethodException ex) {
// //feature#1766905 Binding to Map
// if (bean instanceof Map) {
// bean = ((Map)bean).get(beanid);
// } else {
// throw UiException.Aide.wrap(ex);
// }
// }
// }
// if (bean == null) {
// return; //no bean to set value, skip
// }
// beanid = (String) it.next();
// try {
// orgVal = Fields.get(bean, beanid);
// if(Objects.equals(orgVal, val)) {
// return; //same value, no need to do anything
// }
// Fields.set(bean, beanid, val, autoConvert);
// } catch (NoSuchMethodException ex) {
// //feature#1766905 Binding to Map
// if (bean instanceof Map) {
// ((Map)bean).put(beanid, val);
// } else {
// throw UiException.Aide.wrap(ex);
// }
// } catch (ModificationException ex) {
// throw UiException.Aide.wrap(ex);
// }
// if (!isPrimitive(val) && !isPrimitive(orgVal)) { //val is a bean (null is not primitive)
// currentNode = (BindingNode) currentNode.getKidNode(beanid);
// if (currentNode == null) {
// throw new UiException("Cannot find the specified databind bean expression:" + path);
// }
// nodes.add(currentNode);
// bean = orgVal;
// refChanged = true;
// }
// }
// }
/**
 * Used by BindingListItemRenderer to set an "_var" attribute value
 * that uses a path, rather than just a raw variable name.  The code is
 * taken from the first part of setBeanAndRegisterBeanSameNodes().
 * Added by Stephen Edwards.
 */
void setBeanValue(Component comp, Object val, String path, boolean autoConvert) {
    Object orgVal = null;
    Object bean = null;
    BindingNode currentNode = _pathTree;
    // wether this setting change the reference
    boolean refChanged = false;
    String beanid = null;
    final List nodeids = parseExpression(path, ".");
    final List nodes = new ArrayList(nodeids.size());
    final Iterator it = nodeids.iterator();
    if (it != null && it.hasNext()) {
        beanid = (String) it.next();
        currentNode = (BindingNode) currentNode.getKidNode(beanid);
        if (currentNode == null) {
            throw new UiException("Cannot find the specified databind bean expression:" + path);
        }
        nodes.add(currentNode);
        bean = lookupBean(comp, beanid);
    } else {
        throw new UiException("Incorrect format of databind bean expression:" + path);
    }
    if (!it.hasNext()) {
        // assign back to where bean is stored
        orgVal = bean;
        if (Objects.equals(orgVal, val)) {
            // same value, no need to do anything
            return;
        }
        if (existsBean(beanid)) {
            setBean(beanid, val);
        } else if (!setZScriptVariable(comp, beanid, val)) {
            comp.setVariable(beanid, val, false);
        }
        refChanged = true;
    } else {
        if (bean == null) {
            // no bean to set value, skip
            return;
        }
        // minus first and last beanid in path
        int sz = nodeids.size() - 2;
        for (; bean != null && it.hasNext() && sz > 0; --sz) {
            beanid = (String) it.next();
            currentNode = (BindingNode) currentNode.getKidNode(beanid);
            if (currentNode == null) {
                throw new UiException("Cannot find the specified databind bean expression:" + path);
            }
            nodes.add(currentNode);
            try {
                bean = Fields.get(bean, beanid);
            } catch (NoSuchMethodException ex) {
                // feature#1766905 Binding to Map
                if (bean instanceof Map) {
                    bean = ((Map) bean).get(beanid);
                } else {
                    throw UiException.Aide.wrap(ex);
                }
            }
        }
        if (bean == null) {
            // no bean to set value, skip
            return;
        }
        beanid = (String) it.next();
        try {
            orgVal = Fields.get(bean, beanid);
            if (Objects.equals(orgVal, val)) {
                // same value, no need to do anything
                return;
            }
            Fields.set(bean, beanid, val, autoConvert);
        } catch (NoSuchMethodException ex) {
            // feature#1766905 Binding to Map
            if (bean instanceof Map) {
                ((Map) bean).put(beanid, val);
            } else {
                throw UiException.Aide.wrap(ex);
            }
        } catch (ModificationException ex) {
            throw UiException.Aide.wrap(ex);
        }
        if (!isPrimitive(val) && !isPrimitive(orgVal)) {
            // val is a bean (null is not primitive)
            currentNode = (BindingNode) currentNode.getKidNode(beanid);
            if (currentNode == null) {
                throw new UiException("Cannot find the specified databind bean expression:" + path);
            }
            nodes.add(currentNode);
            bean = orgVal;
            refChanged = true;
        }
    }
}
