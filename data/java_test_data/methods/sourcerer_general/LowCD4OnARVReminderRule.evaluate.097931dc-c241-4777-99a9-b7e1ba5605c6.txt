@Override
protected Result evaluate(final LogicContext context, final Integer patientId, final Map<String, Object> parameters) throws LogicException {
    Result result = new Result();
    ObsWithRestrictionRule obsWithRestrictionRule = new ObsWithStringRestrictionRule();
    parameters.put(EvaluableConstants.OBS_FETCH_SIZE, 1);
    parameters.put(EvaluableConstants.OBS_CONCEPT, Arrays.asList(EvaluableNameConstants.CD4_COUNT));
    Result clusterResults = obsWithRestrictionRule.eval(context, patientId, parameters);
    if (CollectionUtils.isNotEmpty(clusterResults)) {
        Result clusterResult = clusterResults.latest();
        parameters.put(EvaluableConstants.OBS_CONCEPT, Arrays.asList(EvaluableNameConstants.ANTIRETROVIRAL_PLAN));
        parameters.put(EvaluableConstants.OBS_VALUE_CODED, Arrays.asList(EvaluableNameConstants.START_DRUGS, EvaluableNameConstants.DRUG_RESTART));
        Result planResults = obsWithRestrictionRule.eval(context, patientId, parameters);
        if (CollectionUtils.isNotEmpty(planResults)) {
            Result planResult = planResults.latest();
            Boolean displayReminder = Boolean.TRUE;
            // the plan must be within one year from today
            Calendar calendar = Calendar.getInstance();
            calendar.add(Calendar.MONTH, -12);
            Date oneYearAgo = calendar.getTime();
            // plan and result need to be one year apart
            calendar.setTime(clusterResult.getResultDate());
            calendar.add(Calendar.MONTH, -12);
            Date oneYearBeforeResult = calendar.getTime();
            AntiRetroViralRule antiRetroViralRule = new AntiRetroViralRule();
            parameters.put(EvaluableConstants.ENCOUNTER_TYPE, Arrays.asList(EvaluableNameConstants.ENCOUNTER_TYPE_ADULT_INITIAL, EvaluableNameConstants.ENCOUNTER_TYPE_ADULT_RETURN, EvaluableNameConstants.ENCOUNTER_TYPE_ADULT_NONCLINICALMEDICATION));
            Result arvResults = antiRetroViralRule.eval(context, patientId, parameters);
            if (planResult.getResultDate().after(oneYearAgo) || planResult.getResultDate().after(oneYearBeforeResult) || clusterResult.toNumber() > 100 || CollectionUtils.isEmpty(arvResults))
                displayReminder = Boolean.FALSE;
            if (displayReminder)
                result.add(new Result(String.valueOf(parameters.get(ReminderParameters.DISPLAYED_REMINDER_TEXT))));
        }
    }
    return result;
}
