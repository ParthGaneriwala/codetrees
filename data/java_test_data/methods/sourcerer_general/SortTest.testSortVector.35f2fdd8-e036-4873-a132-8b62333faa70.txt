public void testSortVector() {
    // sort a directory by date (oldest first)
    Vector directory = new Vector();
    File dir = new File(".");
    String[] listing = dir.list();
    for (int i = 0; i < listing.length; i++) {
        File f = new SortableFile(dir, listing[i]);
        if (f.isFile())
            directory.addElement(f);
    }
    Sort.QuickSort(directory);
    // pull one out and test it's insertion ordinal
    int index = directory.size() * 2 / 3;
    SortableFile test = (SortableFile) directory.elementAt(index);
    directory.removeElementAt(index);
    int ordinal = Sort.bsearch(directory, test);
    if (index != ordinal) {
        for (int i = 0; i < directory.size(); i++) {
            if (index == i)
                System.out.print('-');
            else if (ordinal == i)
                System.out.print('+');
            else
                System.out.print(' ');
            System.out.println(directory.elementAt(i));
        }
        fail("ordinal not correct value, expected " + index + ", was " + ordinal);
    }
    // test the ordering of the objects
    directory.insertElementAt(test, ordinal);
    Date last = null;
    for (int i = 0; i < directory.size(); i++) {
        File f = (File) directory.elementAt(i);
        String name = f.getName();
        Date date = new Date(f.lastModified());
        if (null != last)
            assertTrue("file " + name + " has a date before", !date.before(last));
        last = date;
    }
}
