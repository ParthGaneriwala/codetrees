@Override
public ActionForward insere(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
    ActionMessages mens = new ActionMessages();
    List<String> parametersMessage = new ArrayList<String>();
    String orderBy = getOrderBy(form);
    try {
        try {
            if (validaCampos(mapping, form, request)) {
                Usuario entity = (Usuario) ((LazyValidatorForm) form).get(Constantes.PROPRIEDADE_ENTITY);
                entity.setId(null);
                this.getUsuarioService().insere(entity);
                parametersMessage.clear();
                parametersMessage.add("gravado");
                mens.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("mensagem.crud.sucesso", parametersMessage.toArray()));
                request.setAttribute(Constantes.MENSAGEM_SUCESSO, mens);
                limparPropriedadesForm((LazyValidatorForm) form);
            }
        } catch (EntityExistsServiceException ex) {
            mens.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("erro.EntityExistsServiceException.InsertOrUpdate"));
            request.setAttribute(Constantes.MENSAGEM_ERRO, mens);
        }
        List<BaseEntity> lista = this.getCrudService().pesquisa(classeEntity(form), orderBy);
        this.atualizaListaAplicacao(request, form, lista);
        ((LazyValidatorForm) form).set(Constantes.PROPRIEDADE_LISTA_ENTITY, lista);
    } catch (ServiceException ex) {
        Logger.getLogger(UsuarioAction.class.getName()).log(Level.SEVERE, null, ex);
        parametersMessage.clear();
        parametersMessage.add(ex.getMessage());
        mens.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("erro.fatal", parametersMessage.toArray()));
        request.setAttribute(Constantes.MENSAGEM_ERRO, mens);
    }
    return mapping.findForward(Constantes.FORWARD_SUCESSO);
}
