private boolean canReplace(int index) {
    byte op = branches.get(index).getOptcode();
    long off = branches.get(index).getTarget();
    byte new_op = (byte) -1;
    if (op == CLOptcode.LEAVE && off >= -128 && off < 128)
        new_op = CLOptcode.LEAVES;
    else if (op == CLOptcode.BR && off >= -128 && off < 128)
        new_op = CLOptcode.BRS;
    else if (op == CLOptcode.BRFALSE && off >= -128 && off < 128)
        new_op = CLOptcode.BRFALSES;
    else if (op == CLOptcode.BRTRUE && off >= -128 && off < 128)
        new_op = CLOptcode.BRTRUES;
    else if (op == CLOptcode.BEQ && off >= -128 && off < 128)
        new_op = CLOptcode.BEQS;
    else if (op == CLOptcode.BGE && off >= -128 && off < 128)
        new_op = CLOptcode.BGES;
    else if (op == CLOptcode.BGT && off >= -128 && off < 128)
        new_op = CLOptcode.BGTS;
    else if (op == CLOptcode.BLE && off >= -128 && off < 128)
        new_op = CLOptcode.BLES;
    else if (op == CLOptcode.BLT && off >= -128 && off < 128)
        new_op = CLOptcode.BLTS;
    else if (op == CLOptcode.BNEUN && off >= 0 && off < 256)
        new_op = CLOptcode.BNEUNS;
    else if (op == CLOptcode.BGEUN && off >= 0 && off < 256)
        new_op = CLOptcode.BGEUNS;
    else if (op == CLOptcode.BGTUN && off >= 0 && off < 256)
        new_op = CLOptcode.BGTUNS;
    else if (op == CLOptcode.BLEUN && off >= 0 && off < 256)
        new_op = CLOptcode.BLEUNS;
    else if (op == CLOptcode.BLTUN && off >= 0 && off < 256)
        new_op = CLOptcode.BLTUNS;
    else if (op == CLOptcode.BRINST && off >= -128 && off < 128)
        new_op = CLOptcode.BRINSTS;
    else if (op == CLOptcode.BRNULL && off >= -128 && off < 128)
        new_op = CLOptcode.BRNULLS;
    else if (op == CLOptcode.BRZERO && off >= -128 && off < 128)
        new_op = CLOptcode.BRZEROS;
    else
        return false;
    branches.get(index).setOptcode(new_op);
    return true;
}
