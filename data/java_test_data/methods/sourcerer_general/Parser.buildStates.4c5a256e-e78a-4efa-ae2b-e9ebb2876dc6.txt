// 
// it only takes care of shifts and no reduces
// 
// depending on _compareLA and the closureFunction,
// the states built are quite different
void buildStates(Closure closureFunctor, Comparator<Item> kernelSorter) {
    // first build the first item,
    // it has $ (FINISH) as its lookahead
    TokenSet startLookahead = createTokenSet();
    startLookahead.addSymbol(FINISH);
    Production startProduction = m_productionMap.get(m_nonTerminals.get(START))[0];
    Item startItem = createItem(startProduction, 0, startLookahead);
    // now build the first kernel ItemSet
    ItemSet startItemSet = new ItemSet(kernelSorter);
    startItemSet.insertKernelItem(startItem);
    // DEBUGMSG ("startItemSet: " << startItemSet);
    // do a closure operation
    closureFunctor.closure(startItemSet);
    // DEBUGMSG ("startItemSet: " << startItemSet);
    // okay, finally built the first DFA state, the start state
    _DFAStates.add(startItemSet);
    _DFASet.put(startItemSet, (short) 0);
    for (int i = 0; i < _DFAStates.size(); ++i) {
        ItemSet srcSet = _DFAStates.get(i);
        DFARow currentDFA = new DFARow(m_usedTerminalCount);
        m_dfa.add(currentDFA);
        short[] currentGoto = new short[m_usedSymbols.length - m_usedTerminalCount];
        m_goto.add(currentGoto);
        for (int j = 0; j < m_usedSymbolCount; ++j) {
            // DEBUGMSG ("move/closure on symbol " << _tokens[j]);
            ItemSet destSet = move(kernelSorter, srcSet, m_usedSymbols[j]);
            if (destSet == null)
                continue;
            // 
            if (m_usedSymbols[j] == FINISH) {
                // the only state that shift on FINISH lookahead is accept
                // so just make it the accept state
                // -1 is for case 1, which is accept
                currentDFA.getStates()[j] = -1;
                continue;
            }
            Short state = _DFASet.get(destSet);
            if (state == null) {
                // ah, a new state
                closureFunctor.closure(destSet);
                if (j < m_usedTerminalCount)
                    currentDFA.getStates()[j] = (short) _DFAStates.size();
                else
                    currentGoto[j - m_usedTerminalCount] = (short) _DFAStates.size();
                _DFAStates.add(destSet);
                _DFASet.put(destSet, (short) (_DFAStates.size() - 1));
            } else {
                // the state existed
                if (j < m_usedTerminalCount)
                    currentDFA.getStates()[j] = state.shortValue();
                else
                    currentGoto[j - m_usedTerminalCount] = state.shortValue();
            }
        }
    }
}
