public void setProbTree(int clusterid, OnDiskCompactProbTree probTree) {
    long totalClusterCount = descriptor.getClusterCount(clusterid);
    int[] tags = probTree.getCompactHiddenFactors();
    float[] probs = probTree.getProbabilities();
    double wordProb = probTree.getScale();
    double expectedTotalCount = wordProb * totalClusterCount;
    long totalCount = 0;
    int maxSize = PackedInteger.MAX_LENGTH * tags.length * 2;
    byte[] buf = new byte[maxSize];
    int position = 0;
    for (int i = 0; i < probTree.getSize(); ++i) {
        long count = (long) Math.round(totalClusterCount * wordProb * probs[i]);
        if (count == 0)
            continue;
        totalCount += count;
        int factorIdx = descriptor.getCompactFactorsIndex(tags[i]);
        int intLen = PackedInteger.getWriteIntLength(factorIdx);
        PackedInteger.writeInt(buf, position, factorIdx);
        position += intLen;
        intLen = PackedInteger.getWriteLongLength(count);
        PackedInteger.writeLong(buf, position, count);
        position += intLen;
    }
    if (!ProbMath.approxEqual(totalCount, expectedTotalCount)) {
        System.out.print("");
    }
    int dataLen = position;
    try {
        synchronized (writingData) {
            writingData.dataOutput.write(buf, 0, position);
            if (buf.length < PackedInteger.MAX_LENGTH * 2) {
                buf = new byte[PackedInteger.MAX_LENGTH * 2];
            }
            position = 0;
            int intLen = PackedInteger.getWriteIntLength(clusterid);
            PackedInteger.writeInt(buf, position, clusterid);
            position += intLen;
            intLen = PackedInteger.getWriteIntLength(dataLen);
            PackedInteger.writeInt(buf, position, dataLen);
            position += intLen;
            writingData.indexOutput.write(buf, 0, position);
        }
    } catch (IOException e) {
        e.printStackTrace();
    }
}
