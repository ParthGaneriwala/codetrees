public int calcSigmaMBM(int[] sigma, int[] omega, int[] syn) {
    int[] sg0 = new int[npar];
    int[] sg1 = new int[npar];
    sg0[1] = 1;
    sg1[0] = 1;
    int jisu0 = 1;
    int jisu1 = 0;
    int m = -1;
    for (int n = 0; n < npar; n++) {
        // 判別式を計算
        int d = syn[n];
        for (int i = 1; i <= jisu1; i++) {
            d ^= galois.mul(sg1[i], syn[n - i]);
        }
        if (d != 0) {
            int logd = galois.toLog(d);
            int[] wk = new int[npar];
            for (int i = 0; i <= n; i++) {
                wk[i] = sg1[i] ^ galois.mulExp(sg0[i], logd);
            }
            int js = n - m;
            if (js > jisu1) {
                m = n - jisu1;
                jisu1 = js;
                if (jisu1 > npar / 2) {
                    // σの次数がnpar / 2を超えたらエラー
                    return -1;
                }
                for (int i = 0; i <= jisu0; i++) {
                    sg0[i] = galois.divExp(sg1[i], logd);
                }
                jisu0 = jisu1;
            }
            sg1 = wk;
        }
        System.arraycopy(sg0, 0, sg0, 1, Math.min(sg0.length - 1, jisu0));
        sg0[0] = 0;
        jisu0++;
    }
    galois.mulPoly(omega, sg1, syn);
    System.arraycopy(sg1, 0, sigma, 0, Math.min(sg1.length, sigma.length));
    return jisu1;
}
