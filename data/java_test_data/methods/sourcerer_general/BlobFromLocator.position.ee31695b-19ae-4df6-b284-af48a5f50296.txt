public long position(byte[] pattern, long start) throws SQLException {
    java.sql.ResultSet blobRs = null;
    java.sql.PreparedStatement pStmt = null;
    // FIXME: Needs to use identifiers for column/table names
    StringBuffer query = new StringBuffer("SELECT LOCATE(");
    query.append("?, ");
    query.append(this.blobColumnName);
    query.append(", ");
    query.append(start);
    query.append(") FROM ");
    query.append(this.tableName);
    query.append(" WHERE ");
    query.append((String) this.primaryKeyColumns.get(0));
    query.append(" = ?");
    for (int i = 1; i < this.numPrimaryKeys; i++) {
        query.append(" AND ");
        query.append((String) this.primaryKeyColumns.get(i));
        query.append(" = ?");
    }
    try {
        // FIXME: Have this passed in instead
        pStmt = this.creatorResultSet.connection.prepareStatement(query.toString());
        pStmt.setBytes(1, pattern);
        for (int i = 0; i < this.numPrimaryKeys; i++) {
            pStmt.setString(i + 2, (String) this.primaryKeyValues.get(i));
        }
        blobRs = pStmt.executeQuery();
        if (blobRs.next()) {
            return blobRs.getLong(1);
        }
        throw SQLError.createSQLException("BLOB data not found! Did primary keys change?", SQLError.SQL_STATE_GENERAL_ERROR, this.exceptionInterceptor);
    } finally {
        if (blobRs != null) {
            try {
                blobRs.close();
            } catch (SQLException sqlEx) {
                // do nothing
                ;
            }
            blobRs = null;
        }
        if (pStmt != null) {
            try {
                pStmt.close();
            } catch (SQLException sqlEx) {
                // do nothing
                ;
            }
            pStmt = null;
        }
    }
}
