public ArrayState[] createArrayStates(GlContext ctx, PassDescriptor[] passes, PassSummary summary, boolean staticVBO, boolean staticIBO, BufferObject arrayBuffer, FloatBuffer floatArray) {
    // create the base arrays
    HashMap<String, ClientArray> vertexAttribArrays = Maps.newHashMap();
    for (String attrib : summary.vertexAttribs) {
        AttributeArrayConfig vertexAttribArray = getVertexAttribArray(attrib);
        if (vertexAttribArray != null) {
            vertexAttribArrays.put(attrib, vertexAttribArray.createClientArray());
        }
    }
    HashIntMap<ClientArray> texCoordArrays = new HashIntMap<ClientArray>();
    for (int set : summary.texCoordSets) {
        ClientArrayConfig texCoordArray = getTexCoordArray(set);
        if (texCoordArray != null) {
            texCoordArrays.put(set, texCoordArray.createClientArray());
        }
    }
    ClientArray colorArray = (summary.colors && this.colorArray != null) ? this.colorArray.createClientArray() : null;
    ClientArray normalArray = (summary.normals && this.normalArray != null) ? this.normalArray.createClientArray() : null;
    ClientArray vertexArray = this.vertexArray.createClientArray();
    // put them in a list and compute the offsets and stride
    ArrayList<ClientArray> arrays = GeometryUtil.createList(vertexAttribArrays, texCoordArrays, colorArray, normalArray, vertexArray);
    GeometryUtil.updateOffsetsAndStride(arrays);
    // if we have been given an array buffer or float array, set them
    if (arrayBuffer != null || floatArray != null) {
        for (ClientArray array : arrays) {
            array.arrayBuffer = arrayBuffer;
            array.floatArray = floatArray;
        }
    // otherwise, if we're to use a static vbo, look it up
    } else if (staticVBO) {
        if (_arrayBuffers == null) {
            _arrayBuffers = new SoftCache<PassSummary, BufferObject>(1);
        }
        arrayBuffer = _arrayBuffers.get(summary);
        if (arrayBuffer == null) {
            _arrayBuffers.put(summary, arrayBuffer = new BufferObject(ctx.getRenderer()));
            floatArray = populateClientArrays(vertexAttribArrays, texCoordArrays, colorArray, normalArray, vertexArray);
            arrayBuffer.setData(floatArray);
        }
        for (ClientArray array : arrays) {
            array.arrayBuffer = arrayBuffer;
            array.floatArray = null;
        }
    // otherwise, create and populate a new buffer
    } else {
        populateClientArrays(vertexAttribArrays, texCoordArrays, colorArray, normalArray, vertexArray);
    }
    // create the states for each pass
    return GeometryUtil.createArrayStates(vertexAttribArrays, texCoordArrays, colorArray, normalArray, vertexArray, staticIBO ? getElementArrayBuffer(ctx) : null, passes);
}
