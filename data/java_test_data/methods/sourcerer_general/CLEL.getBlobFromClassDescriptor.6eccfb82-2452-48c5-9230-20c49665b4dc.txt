private byte[] getBlobFromClassDescriptor(ClassDescriptor cd) {
    byte[] b = null;
    if (cd.getName().equals("void") && cd.getNamespace().equals("")) {
        b = new byte[1];
        b[0] = BlobElementTypes.ELEMENT_TYPE_VOID;
    } else if (cd.getName().equals("int") && cd.getNamespace().equals("")) {
        b = new byte[1];
        b[0] = BlobElementTypes.ELEMENT_TYPE_I4;
    } else if (cd.getName().equals("string") && cd.getNamespace().equals("")) {
        b = new byte[1];
        b[0] = BlobElementTypes.ELEMENT_TYPE_STRING;
    } else // CLASS
    {
        PoundTildaStream pts = parser.getPoundTildaStream();
        StreamTable st;
        StreamTableRow r;
        ArrayList<StreamTableRow> rows;
        int token = 0;
        int i;
        String name, namespace;
        String cd_name = cd.getName() + "\0";
        String cd_namespace = cd.getNamespace() + "\0";
        st = pts.getStreamTable(CLELConstants.TYPEDEF_TABLE);
        rows = st.getRows();
        for (i = 0; i < rows.size(); i++) {
            r = rows.get(i);
            name = getValueStringHeap(r.getTypeDefName());
            namespace = getValueStringHeap(r.getTypeDefNamespace());
            if (name.equals(cd_name) && namespace.equals(cd_namespace)) {
                token |= ((i + 1) << 2);
                break;
            }
        }
        if (token == 0) {
            st = pts.getStreamTable(CLELConstants.TYPEREF_TABLE);
            rows = st.getRows();
            for (i = 0; i < rows.size(); i++) {
                r = rows.get(i);
                name = getValueStringHeap(r.getTypeRefName());
                namespace = getValueStringHeap(r.getTypeRefNamespace());
                if (name.equals(cd_name) && namespace.equals(cd_namespace)) {
                    token = 1;
                    token |= ((i + 1) << 2);
                    break;
                }
            }
        }
        if (token == 0) {
            st = pts.getStreamTable(CLELConstants.TYPESPEC_TABLE);
            rows = st.getRows();
        // ?????????????????????????????????????????
        /*
				for(i = 0;i < rows.size();i++)
				{
					r = rows.get(i);
					name = getValueStringHeap(r.getTypeSpecName());
					namespace = getValueStringHeap(r.getTypeSpecNamespace());
					if(name.equals(cd_name) && namespace.equals(cd_namespace))
					{
						token = 2;
						token |= ((i+1)<<2);
						break;
					}
				}
				*/
        }
        ArrayList<Byte> compress = new ArrayList<Byte>();
        Blob.compressBlobInt(compress, token);
        b = new byte[compress.size() + 1];
        b[0] = BlobElementTypes.ELEMENT_TYPE_CLASS;
        for (i = 0; i < compress.size(); i++) b[i + 1] = compress.get(i);
    }
    return b;
}
