protected void createUI() {
    setTitle(Config.getString("team.commit.title"));
    commitListModel = new DefaultListModel();
    // setIconImage(BlueJTheme.getIconImage());
    setLocation(Config.getLocation("bluej.commitdisplay"));
    // save position when window is moved
    addComponentListener(new ComponentAdapter() {

        public void componentMoved(ComponentEvent event) {
            Config.putLocation("bluej.commitdisplay", getLocation());
        }
    });
    JSplitPane splitPane = new JSplitPane(JSplitPane.VERTICAL_SPLIT);
    splitPane.setBorder(BlueJTheme.generalBorderWithStatusBar);
    splitPane.setResizeWeight(0.5);
    topPanel = new JPanel();
    JScrollPane commitFileScrollPane = new JScrollPane();
    {
        topPanel.setLayout(new BorderLayout());
        JLabel commitFilesLabel = new JLabel(Config.getString("team.commit.files"));
        commitFilesLabel.setBorder(BorderFactory.createEmptyBorder(0, 0, 10, 0));
        topPanel.add(commitFilesLabel, BorderLayout.NORTH);
        commitFiles = new JList(commitListModel);
        commitFiles.setCellRenderer(new FileRenderer(project));
        commitFiles.setEnabled(false);
        commitFileScrollPane.setViewportView(commitFiles);
        topPanel.add(commitFileScrollPane, BorderLayout.CENTER);
    }
    splitPane.setTopComponent(topPanel);
    bottomPanel = new JPanel();
    {
        bottomPanel.setLayout(new BorderLayout());
        JLabel commentLabel = new JLabel(Config.getString("team.commit.comment"));
        commentLabel.setBorder(BorderFactory.createEmptyBorder(10, 0, 10, 0));
        bottomPanel.add(commentLabel, BorderLayout.NORTH);
        commitText = new JTextArea("");
        commitText.setRows(6);
        commitText.setColumns(42);
        Dimension size = commitText.getPreferredSize();
        size.width = commitText.getMinimumSize().width;
        commitText.setMinimumSize(size);
        JScrollPane commitTextScrollPane = new JScrollPane(commitText);
        commitTextScrollPane.setMinimumSize(size);
        bottomPanel.add(commitTextScrollPane, BorderLayout.CENTER);
        commitAction = new CommitAction(this);
        commitButton = BlueJTheme.getOkButton();
        commitButton.setAction(commitAction);
        getRootPane().setDefaultButton(commitButton);
        JButton closeButton = BlueJTheme.getCancelButton();
        closeButton.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                commitWorker.abort();
                commitAction.cancel();
                setVisible(false);
            }
        });
        DBox buttonPanel = new DBox(DBoxLayout.X_AXIS, 0, BlueJTheme.commandButtonSpacing, 0.5f);
        buttonPanel.setBorder(BlueJTheme.generalBorder);
        progressBar = new ActivityIndicator();
        progressBar.setRunning(false);
        DBox checkBoxPanel = new DBox(DBoxLayout.Y_AXIS, 0, BlueJTheme.commandButtonSpacing, 0.5f);
        includeLayout = new JCheckBox(Config.getString("team.commit.includelayout"));
        includeLayout.setEnabled(false);
        includeLayout.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                JCheckBox layoutCheck = (JCheckBox) e.getSource();
                if (layoutCheck.isSelected()) {
                    addModifiedLayouts();
                    if (!commitButton.isEnabled())
                        commitAction.setEnabled(true);
                } else // unselected
                {
                    removeModifiedLayouts();
                    if (isCommitListEmpty())
                        commitAction.setEnabled(false);
                }
            }
        });
        checkBoxPanel.add(includeLayout);
        checkBoxPanel.add(buttonPanel);
        buttonPanel.add(progressBar);
        buttonPanel.add(commitButton);
        buttonPanel.add(closeButton);
        bottomPanel.add(checkBoxPanel, BorderLayout.SOUTH);
    }
    splitPane.setBottomComponent(bottomPanel);
    getContentPane().add(splitPane);
    pack();
}
