/**
 * Return generate SQL for finding reified statements from a triple pattern.
 * @param op the command to generate. should be findReif.
 * @param args a string describing which command to generate.
 * it has the form [N][PS|PP|PO|PT][O[C]] where N means to search
 * for the statement URI; Px means to search for reified subjects, properties,
 * objects or types; O means to search for reified objects; OC means the object
 * value is rdf:Statement.
 */
protected String genSQLStmtFindReif(String op, String args) throws SQLException {
    /* for a reified triple pattern <S,P,O>, there are 8 cases.
		 * 1. <-,-,->	this means retrieve all reified triples. args="".
		 * 2. <S,-,->	retrieve all reified triples for this subject. args="N".
		 * 3. <S,-,O>	retrieve all reified triples for this subject and
		 * 				object value. args="NO" or "NOC".
		 * 4. <-,-,O>	retrieve all reified triples with this object value.
		 * 				args="O" or "OC"
		 * 5. <-,P,->	retrieve all reified triples with this property. args="Px".
		 * 				property must be either rdf:subject, rdf:predicate,
		 * 				rdf:object, rdf:type.
		 * 6. <-,P,O>	retrieve all reified triples with this property and object
		 * 				value. args="PxO" or "PxOC".
		 * 7. <S,P,->	retrieve all reified triples with this subject and property.
		 * 				args="NPx".
		 * 8. <S,P,O>	retrieve all reified triples with this subject, property and
		 * 				object value. args="NPxO" or "NPxOC".
		 */
    String stmtStr = getSQLStatement("selectReified");
    String qual = "";
    IRDBDriver driver = m_connection.getDriver();
    if (args.equals("")) {
    // case 1 <-,-,->  nothing to do.
    } else {
        int ix = 0;
        boolean hasSubj = false;
        boolean hasProp = false;
        boolean hasObj = false;
        boolean objIsStmt = false;
        char reifProp = ' ';
        int argLen = args.length();
        if (args.charAt(ix) == 'N') {
            hasSubj = true;
            ix++;
        }
        hasProp = (ix < argLen) && (args.charAt(ix) == 'P');
        if (hasProp && (ix < argLen)) {
            ix++;
            reifProp = args.charAt(ix++);
        }
        hasObj = (ix < argLen) && (args.charAt(ix) == 'O');
        if (hasObj) {
            ix++;
            objIsStmt = (ix < argLen) && (args.charAt(ix) == 'C');
        }
        if (!hasProp) {
            if (hasSubj) {
                // cases 2 and 3
                qual += driver.genSQLReifQualStmt();
                if (hasObj) {
                    // case 3 above
                    qual += " AND " + driver.genSQLReifQualAnyObj(objIsStmt);
                }
            } else {
                // case 4 above
                qual += driver.genSQLReifQualAnyObj(objIsStmt);
            }
        } else {
            // have a reified property
            if (hasSubj)
                qual += driver.genSQLReifQualStmt() + " AND ";
            qual += driver.genSQLReifQualObj(reifProp, hasObj);
        }
        stmtStr += " AND " + qual;
    }
    return stmtStr;
}
