@Override
public void run() {
    if (pause) {
        return;
    }
    try {
        synchronized (activeItems) {
            synchronized (tmpActiveItems) {
                activeItems.addAll(tmpActiveItems);
                tmpActiveItems.clear();
            }
            Iterator<SyncTickItem> iterator = activeItems.iterator();
            long time = System.currentTimeMillis();
            double factor = calculateFactor(time);
            while (iterator.hasNext()) {
                SyncTickItem activeItem = iterator.next();
                try {
                    if (!activeItem.tick(factor)) {
                        iterator.remove();
                        activeItem.stop();
                        addGuardingBaseItem(activeItem);
                        connectionService.sendSyncInfo(activeItem);
                        if (activeItem instanceof SyncBaseItem && ((SyncBaseItem) activeItem).hasSyncHarvester()) {
                            baseService.sendAccountBaseUpdate((SyncBaseItem) activeItem);
                        }
                        if (activeItem instanceof SyncBaseItem && ((SyncBaseItem) activeItem).isMoneyEarningOrConsuming()) {
                            baseService.sendAccountBaseUpdate((SyncBaseItem) activeItem);
                        }
                    }
                } catch (BaseDoesNotExistException e) {
                    log.info("BaseDoesNotExistException: " + e.getMessage());
                    activeItem.stop();
                    iterator.remove();
                } catch (PositionTakenException ife) {
                    log.info("PositionTakenException: " + ife.getMessage());
                    activeItem.stop();
                    iterator.remove();
                    connectionService.sendSyncInfo(activeItem);
                } catch (Throwable t) {
                    log.error("ActiveItem: " + activeItem, t);
                    activeItem.stop();
                    iterator.remove();
                    connectionService.sendSyncInfo(activeItem);
                }
            }
            lastTickTime = time;
        }
    } catch (Throwable t) {
        log.error("", t);
    }
}
