public void drop(DropTargetDropEvent dtde) {
    System.out.println("DropTarget drop, drop action = ");
    // Check the drop action
    if ((dtde.getDropAction() & DnDConstants.ACTION_COPY_OR_MOVE) != 0) {
        // Accept the drop and get the transfer data
        dtde.acceptDrop(dtde.getDropAction());
        Transferable transferable = dtde.getTransferable();
        System.out.println(transferable.getClass().getName());
        try {
            for (DataFlavor d : transferable.getTransferDataFlavors()) {
                ImageIcon b = (ImageIcon) transferable.getTransferData(d);
                if (b.getDescription().equals("node")) {
                    Node n = new Node();
                    // n = objects.getSimpleNode();
                    n.setUpperLeft(new AbsoluteLocation((int) dtde.getLocation().getX(), (int) dtde.getLocation().getY()));
                    model.addObject(n);
                    System.out.println("new node dragged");
                } else if (b.getDescription().equals("handle")) {
                    TriggerHandle ht = null;
                    for (Graphical g : model.getObjects("node")) {
                        Node n = (Node) g;
                        int k1 = (int) dtde.getLocation().getX();
                        int k2 = (int) dtde.getLocation().getY();
                        if (n.contains(k1, k2)) {
                            ht = new TriggerHandle(n, 5);
                        } else {
                            ht = new TriggerHandle();
                            ht.setLocation(new AbsoluteLocation((int) dtde.getLocation().getX(), (int) dtde.getLocation().getY()));
                        }
                    }
                    model.addObject(ht);
                    System.out.println("new handle dragged");
                } else if (b.getDescription().equals("connect")) {
                    for (Graphical g : model.getObjects("node")) {
                        Node n = (Node) g;
                        int k1 = (int) dtde.getLocation().getX();
                        int k2 = (int) dtde.getLocation().getY();
                        if (n.contains(k1, k2)) {
                            ConnectHandle h = new ConnectHandle(n);
                            model.addObject(h);
                            System.out.println("new connecthandle dragged");
                        }
                        System.out.println("NOT new connecthandle dragged (drag on node to attach)");
                    }
                }
            }
            dtde.dropComplete(true);
        } catch (UnsupportedFlavorException ufe) {
            System.out.println("importData: unsupported data flavor");
            dtde.dropComplete(false);
            dtde.rejectDrop();
        } catch (IOException ioe) {
            System.out.println("importData: I/O exception");
            dtde.dropComplete(false);
            dtde.rejectDrop();
        }
    }
}
