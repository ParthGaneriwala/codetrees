public void applyImpulse() {
    if (bounceSide == BOUNCE_NONE)
        return;
    Matrix2f rot1 = new Matrix2f(body1.getRotation());
    Matrix2f rot2 = new Matrix2f(body2.getRotation());
    Vector2f r1 = MathUtil.mul(rot1, anchor1);
    Vector2f r2 = MathUtil.mul(rot2, anchor2);
    Vector2f relativeVelocity = new Vector2f(body2.getVelocity());
    relativeVelocity.add(MathUtil.cross(r2, body2.getAngularVelocity()));
    relativeVelocity.sub(body1.getVelocity());
    relativeVelocity.sub(MathUtil.cross(r1, body1.getAngularVelocity()));
    /*
		 * Matrix2f tr1 = new Matrix2f(-body1.getRotation()); relativeVelocity =
		 * MathUtil.mul(tr1, relativeVelocity);
		 * relativeVelocity.add(MathUtil.mul(tr1, dp));
		 */
    float rv = MathUtil.cross(dp, relativeVelocity) / dlength2 - body1.getAngularVelocity();
    rv = restituteAngular - rv;
    float p = rv / K;
    float oldImpulse = accumulateImpulse;
    float newImpulse;
    if (bounceSide == BOUNCE_HIGHER) {
        newImpulse = accumulateImpulse + p > 0.0f ? accumulateImpulse + p : 0.0f;
        p = newImpulse - oldImpulse;
    } else {
        newImpulse = accumulateImpulse + p < 0.0f ? accumulateImpulse + p : 0.0f;
        p = newImpulse - oldImpulse;
    }
    accumulateImpulse = newImpulse;
    Vector2f impulse = new Vector2f(n);
    impulse.scale(p);
    if (!body1.isStatic()) {
        Vector2f accum1 = new Vector2f(impulse);
        accum1.scale(body1.getInvMass());
        body1.adjustVelocity(accum1);
        body1.adjustAngularVelocity((body1.getInvI() * MathUtil.cross(R, impulse)));
    }
    if (!body2.isStatic()) {
        Vector2f accum2 = new Vector2f(impulse);
        accum2.scale(-body2.getInvMass());
        body2.adjustVelocity(accum2);
        body2.adjustAngularVelocity(-(body2.getInvI() * MathUtil.cross(r2, impulse)));
    }
}
