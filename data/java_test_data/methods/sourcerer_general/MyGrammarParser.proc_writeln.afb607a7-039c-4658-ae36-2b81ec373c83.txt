// $ANTLR start "proc_writeln"
public final MyGrammarParser.proc_writeln_return proc_writeln() throws RecognitionException {
    MyGrammarParser.proc_writeln_return retval = new MyGrammarParser.proc_writeln_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token WRITELN116 = null;
    CommonTree WRITELN116_tree = null;
    RewriteRuleTokenStream stream_WRITELN = new RewriteRuleTokenStream(adaptor, "token WRITELN");
    try {
        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:233:14: ( WRITELN -> ^( PROC_WRITELN WRITELN ) )
        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:233:16: WRITELN
        {
            WRITELN116 = (Token) match(input, WRITELN, FOLLOW_WRITELN_in_proc_writeln1859);
            stream_WRITELN.add(WRITELN116);
            // AST REWRITE
            // elements: WRITELN
            // token labels:
            // rule labels: retval
            // token list labels:
            // rule list labels:
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", retval != null ? retval.tree : null);
            root_0 = (CommonTree) adaptor.nil();
            // 233:24: -> ^( PROC_WRITELN WRITELN )
            {
                // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:233:27: ^( PROC_WRITELN WRITELN )
                {
                    CommonTree root_1 = (CommonTree) adaptor.nil();
                    root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(PROC_WRITELN, "PROC_WRITELN"), root_1);
                    adaptor.addChild(root_1, stream_WRITELN.nextNode());
                    adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
