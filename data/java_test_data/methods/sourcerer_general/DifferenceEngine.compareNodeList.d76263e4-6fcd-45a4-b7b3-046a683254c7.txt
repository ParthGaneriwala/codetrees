protected void compareNodeList(final List controlChildren, final List testChildren, final int numNodes, final DifferenceListener listener, final ElementQualifier elementQualifier) throws DifferenceFoundException {
    int j = 0;
    final int lastTestNode = testChildren.size() - 1;
    testTracker.preloadChildList(testChildren);
    HashMap /*<Node, Node>*/
    matchingNodes = new HashMap();
    HashMap /*<Node, Integer>*/
    matchingNodeIndexes = new HashMap();
    List /*<Node>*/
    unmatchedTestNodes = new ArrayList(testChildren);
    // first pass to find the matching nodes in control and test docs
    for (int i = 0; i < numNodes; ++i) {
        Node nextControl = (Node) controlChildren.get(i);
        boolean matchOnElement = nextControl instanceof Element;
        short findNodeType = nextControl.getNodeType();
        int startAt = (i > lastTestNode ? lastTestNode : i);
        j = startAt;
        boolean matchFound = false;
        while (!matchFound) {
            Node t = (Node) testChildren.get(j);
            if (findNodeType == t.getNodeType() || comparingTextAndCDATA(findNodeType, t.getNodeType())) {
                matchFound = !matchOnElement || elementQualifier == null || elementQualifier.qualifyForComparison((Element) nextControl, (Element) t);
            }
            if (!matchFound) {
                ++j;
                if (j > lastTestNode) {
                    j = 0;
                }
                if (j == startAt) {
                    // been through all children
                    break;
                }
            }
        }
        if (matchFound) {
            matchingNodes.put(nextControl, testChildren.get(j));
            matchingNodeIndexes.put(nextControl, new Integer(j));
            unmatchedTestNodes.remove(testChildren.get(j));
        }
    }
    // any other control nodes
    for (int i = 0; i < numNodes; ++i) {
        Node nextControl = (Node) controlChildren.get(i);
        Node nextTest = (Node) matchingNodes.get(nextControl);
        Integer testIndex = (Integer) matchingNodeIndexes.get(nextControl);
        if (nextTest == null && !unmatchedTestNodes.isEmpty()) {
            nextTest = (Node) unmatchedTestNodes.get(0);
            testIndex = new Integer(testChildren.indexOf(nextTest));
            unmatchedTestNodes.remove(0);
        }
        if (nextTest != null) {
            compareNode(nextControl, nextTest, listener, elementQualifier);
            compare(new Integer(i), testIndex, nextControl, nextTest, listener, CHILD_NODELIST_SEQUENCE);
        } else {
            missingNode(nextControl, null, listener);
        }
    }
    // now handle remaining unmatched test nodes
    for (Iterator iter = unmatchedTestNodes.iterator(); iter.hasNext(); ) {
        missingNode(null, (Node) iter.next(), listener);
    }
}
