public String executeCommandShowForm(ActionContext context) {
    if (getUser(context).getId() < 0) {
        return "PermissionError";
    }
    Connection db = null;
    try {
        // Process the parameters
        String projectIdValue = context.getRequest().getParameter("pid");
        int projectId = -1;
        int linkModuleId = Integer.parseInt(context.getRequest().getParameter("lmid"));
        int linkItemId = Integer.parseInt(context.getRequest().getParameter("liid"));
        int selectorId = Integer.parseInt(context.getRequest().getParameter("selectorId"));
        String selectorMode = context.getRequest().getParameter("selectorMode");
        db = getConnection(context);
        Project thisProject = null;
        if (projectIdValue != null) {
            projectId = Integer.parseInt(projectIdValue);
            thisProject = retrieveAuthorizedProject(projectId, context);
        }
        // Check module permissions
        switch(linkModuleId) {
            case Constants.PROJECT_IMAGE_FILES:
                if (thisProject != null) {
                    if (!hasProjectAccess(context, thisProject.getId(), "project-profile-images-add")) {
                        return "PermissionError";
                    }
                }
                break;
            case Constants.PROJECT_TICKET_FILES:
                if (!hasProjectAccess(context, thisProject.getId(), "project-tickets-view")) {
                    return "PermissionError";
                }
                break;
            case Constants.DISCUSSION_FILES_TOPIC:
                if (!hasProjectAccess(context, thisProject.getId(), "project-discussion-topics-add")) {
                    return "PermissionError";
                }
                break;
            case Constants.DISCUSSION_FILES_REPLY:
                if (!hasProjectAccess(context, thisProject.getId(), "project-discussion-messages-reply")) {
                    return "PermissionError";
                }
                break;
            case Constants.PROJECT_REQUIREMENT_FILES:
                if (!hasProjectAccess(context, thisProject.getId(), "project-plan-outline-edit")) {
                    return "PermissionError";
                }
                break;
            case Constants.PROJECT_CLASSIFIEDS_FILES:
                if (!hasProjectAccess(context, thisProject.getId(), "project-classifieds-add")) {
                    return "PermissionError";
                }
                break;
            case Constants.BADGE_CATEGORY_FILES:
                if (!getUser(context).getAccessAdmin()) {
                    return "PermissionError";
                }
                break;
            case Constants.AD_CATEGORY_FILES:
                if (!getUser(context).getAccessAdmin()) {
                    return "PermissionError";
                }
                break;
            case Constants.BADGE_FILES:
                if (!getUser(context).getAccessAdmin()) {
                    return "PermissionError";
                }
                break;
            case Constants.PROJECT_CATEGORY_FILES:
                if (!getUser(context).getAccessAdmin()) {
                    return "PermissionError";
                }
                break;
            case Constants.CLASSIFIED_CATEGORY_FILES:
                if (!getUser(context).getAccessAdmin()) {
                    return "PermissionError";
                }
                break;
            case Constants.SITE_LOGO_FILES:
                if (!getUser(context).getAccessAdmin()) {
                    return "PermissionError";
                }
                break;
            default:
                return "PermissionError";
        }
        // FileAttachments uses its own linkModuleId for uploads +
        // a time based linkItemId +
        // the user's enteredBy
        // Find this user's temporary files
        FileItemList temporaryFiles = new FileItemList();
        temporaryFiles.setLinkModuleId(Constants.TEMP_FILES);
        temporaryFiles.setLinkItemId(selectorId);
        temporaryFiles.setOwner(getUserId(context));
        temporaryFiles.buildList(db);
        // Find the rest of this object's files
        FileItemList existingFiles = new FileItemList();
        // existingFiles.setLinkModuleId(linkModuleId);
        // existingFiles.setLinkItemId(linkItemId);
        // existingFiles.buildList(db);
        // Create an HTML Select for displaying and managing the files
        HtmlSelect fileItemList = new HtmlSelect();
        if ("single".equals(selectorMode)) {
            if (temporaryFiles.size() > 0) {
                fileItemList.addItem(temporaryFiles.get(temporaryFiles.size() - 1).getId(), temporaryFiles.get(temporaryFiles.size() - 1).getClientFilename());
            }
        } else {
            fileItemList.addItems(temporaryFiles, "id", "clientFilename");
        }
        fileItemList.addItems(existingFiles, "id", "clientFilename");
        context.getRequest().setAttribute("fileItemList", fileItemList);
        context.getRequest().setAttribute("fileSize", String.valueOf(temporaryFiles.getFileSize() + existingFiles.getFileSize()));
        // Now that the request contains the info to close the form... close the single attachment form
        if ("single".equals(selectorMode) && "true".equals(context.getRequest().getParameter("added"))) {
            return "AttachSingleOK";
        }
    } catch (Exception e) {
        context.getRequest().setAttribute("Error", e);
        return ("SystemError");
    } finally {
        freeConnection(context, db);
    }
    return "FormOK";
}
