public String doView(RenderRequest request, RenderResponse response) throws Exception {
    // The JSP to show upon success
    String defaultView = VIEW_PAGE;
    // Determine the project container to use
    Project project = findProject(request);
    // Check the user's permissions
    User user = getUser(request);
    if (!ProjectUtils.hasAccess(project.getId(), user, "project-calendar-view")) {
        throw new PortletException("Unauthorized to view in this project");
    }
    // Construct a CalendarBean for display
    CalendarBean calendarInfo = new CalendarBean(user.getLocale());
    request.setAttribute(CALENDAR_BEAN_BASE + project.getId(), calendarInfo);
    // Determine the view output
    String source = request.getParameter("source");
    if (source == null) {
        source = "calendar";
    }
    calendarInfo.setSource(source);
    // Adjust view settings based on request
    CalendarBeanUtils.updateValues(calendarInfo, request, user);
    // Set any preferences
    calendarInfo.setShowHolidays(request.getPreferences().getValue(PREF_SHOW_HOLIDAYS, getApplicationPrefs(request).get(ApplicationPrefs.SHOW_HOLIDAYS)));
    // Determine the display date, based on the URL
    String selectedDate = PortalUtils.getPageView(request);
    if (StringUtils.hasText(selectedDate)) {
        String[] dateParts = selectedDate.split("-");
        if (dateParts.length > 0) {
            // Year view (defaults to first month in that year for now)
            int year = Integer.parseInt(dateParts[0]);
            calendarInfo.setPrimaryYear(year);
            calendarInfo.setPrimaryMonth(1);
            calendarInfo.setYearSelected(year);
            calendarInfo.setMonthSelected(1);
            calendarInfo.setCalendarView("month");
            calendarInfo.resetParams("month");
        }
        if (dateParts.length > 1) {
            // Month view (specific month specified)
            int month = Integer.parseInt(dateParts[1]);
            calendarInfo.setPrimaryMonth(month);
            calendarInfo.setMonthSelected(month);
            calendarInfo.setCalendarView("month");
            calendarInfo.resetParams("month");
        }
        if (dateParts.length > 2) {
            // A specific day was specified, with optional views...
            int day = Integer.parseInt(dateParts[2]);
            calendarInfo.setDaySelected(day);
            // Determine the view
            String view = request.getParameter("view");
            if ("week".equals(view)) {
                // Week view
                calendarInfo.setCalendarView("week");
                calendarInfo.resetParams("week");
                calendarInfo.setStartMonthOfWeek(calendarInfo.getMonthSelected());
                calendarInfo.setStartDayOfWeek(day);
            } else if ("today".equals(view)) {
                // Today
                calendarInfo.setCalendarView("day");
                calendarInfo.resetParams("day");
            } else {
                // Day view
                calendarInfo.setCalendarView("day");
                calendarInfo.resetParams("day");
            }
        }
    }
    // Determine if there is a filter
    String filter = null;
    // Determine the database connection to use
    Connection db = useConnection(request);
    // Generate a calendar
    CalendarView calendarView = CalendarViewUtils.generateCalendarView(db, calendarInfo, project, user, filter);
    request.setAttribute(CALENDAR_VIEW, calendarView);
    // JSP view
    return defaultView;
}
