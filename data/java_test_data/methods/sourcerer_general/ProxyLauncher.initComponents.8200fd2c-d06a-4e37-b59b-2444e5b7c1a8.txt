/**
 * ***************************************************************************
 */
/**
 * ***************************************************************************
 */
/**
 * ***************************************************************************
 */
public void initComponents() {
    /**
     * ******************* The main container ***************************
     */
    Container container = this.getContentPane();
    container.setLayout(new BoxLayout(container, BoxLayout.Y_AXIS));
    container.setBackground(containerBackGroundColor);
    // width, size:
    setSize(350, 400);
    setLocation(0, 0);
    addWindowListener(new WindowAdapter() {

        public void windowClosing(WindowEvent e) {
            clean();
        }
    });
    /**
     * ******************* Menu bar *************************************
     */
    menuBar = new JMenuBar();
    setJMenuBar(menuBar);
    // create a menu and add it to the menubar
    menuMenu = new JMenu(" Menu ");
    // menuMenu=new JMenu(" �˵� ");
    menuMenu.setBorder(new BevelBorder(BevelBorder.RAISED));
    menuMenu.setToolTipText("Main menu of the proxy");
    // menuMenu.setToolTipText("������������˵�");
    // create sub-menus belonging to the main menu
    configurationMenuItem = new JMenuItem("Configuration");
    configurationMenuItem.setToolTipText("Configure the stack");
    // configurationMenuItem=new JMenuItem("����");
    // configurationMenuItem.setToolTipText("����ջ");
    configurationMenuItem.addActionListener(new ActionListener() {

        public void actionPerformed(ActionEvent evt) {
            listenerProxy.configurationActionPerformed(evt);
        }
    });
    menuMenu.add(configurationMenuItem);
    // add the menu to the menu bar
    menuBar.add(menuMenu);
    // ...create and add some menus...
    menuBar.add(Box.createHorizontalGlue());
    helpMenu = new JMenu(" Help ");
    helpMenu.setBorder(new BevelBorder(BevelBorder.RAISED));
    helpMenu.setToolTipText("Some useful notes about this tool");
    // helpMenu.setToolTipText("һЩ�Ա��������õ��ĵ�");
    helpMenu.addMouseListener(new MouseAdapter() {

        public void mouseClicked(MouseEvent evt) {
            listenerProxy.helpMenuMouseEvent(evt);
        }
    });
    menuBar.add(helpMenu);
    quit = new JMenu(" Quit ");
    quit.setBorder(new BevelBorder(BevelBorder.RAISED));
    quit.setToolTipText("Quit the application");
    // quit.setToolTipText("�˳�����");
    quit.addMouseListener(new MouseAdapter() {

        public void mouseClicked(MouseEvent evt) {
            clean();
        }
    });
    menuBar.add(quit);
    /**
     * ************************ Main Panel *******************************
     */
    firstPanel = new JPanel();
    // Top, left, bottom, right
    firstPanel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
    // If put to False: we see the container's background
    firstPanel.setOpaque(false);
    firstPanel.setBackground(Color.lightGray);
    // rows, columns, horizontalGap, verticalGap
    firstPanel.setLayout(new BorderLayout());
    container.add(firstPanel);
    JLabel registrationsLabel = new JLabel("Registrations:");
    // JLabel registrationsLabel=new JLabel("ע��:");
    registrationsLabel.setToolTipText("Click on a registration to get the contacts addresses!!");
    // Alignment of the text
    registrationsLabel.setHorizontalAlignment(AbstractButton.CENTER);
    // Color of the text
    registrationsLabel.setForeground(Color.black);
    // Size of the text
    registrationsLabel.setFont(new Font("Dialog", 1, 14));
    // If put to true: we see the label's background
    registrationsLabel.setOpaque(true);
    registrationsLabel.setBackground(labelBackGroundColor);
    registrationsLabel.setBorder(labelBorder);
    firstPanel.add("North", registrationsLabel);
    registrationsList = new RegistrationsList(this);
    registrationsList.setToolTipText("Double click on a registration to get the contacts addresses!!");
    MouseListener mouseListener = new MouseAdapter() {

        public void mouseClicked(MouseEvent e) {
        // listenerProxy.registrationsListMouseClicked(e);
        }
    };
    registrationsList.addMouseListener(mouseListener);
    JScrollPane scrollPane = new JScrollPane(registrationsList, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
    firstPanel.add("Center", scrollPane);
    /**
     * ************************ Secondary Panel *******************************
     */
    secondPanel = new JPanel();
    secondPanel.setOpaque(false);
    secondPanel.setBorder(BorderFactory.createEmptyBorder(5, 20, 10, 20));
    container.add(secondPanel);
    // row, column, gap, gap
    secondPanel.setLayout(new GridLayout(1, 2, 5, 5));
    proxyButton = new JButton("Start the proxy");
    proxyButton.setToolTipText("Please, start/stop the proxy!!!");
    // proxyButton=new JButton("����������");
    // proxyButton.setToolTipText("������/�رշ�����!");
    proxyButton.setFont(new Font("Dialog", 1, 14));
    proxyButton.setFocusPainted(false);
    proxyButton.setBackground(buttonBackGroundColor);
    proxyButton.setBorder(buttonBorder);
    proxyButton.setVerticalAlignment(AbstractButton.CENTER);
    proxyButton.setHorizontalAlignment(AbstractButton.CENTER);
    secondPanel.add(proxyButton);
    proxyButton.addActionListener(new ActionListener() {

        public void actionPerformed(ActionEvent evt) {
            // System.out.println("���������������������");
            listenerProxy.proxyActionPerformed(evt);
        }
    });
    traceViewerButton = new JButton("View the traces");
    traceViewerButton.setToolTipText("The traces are waiting for you!!!");
    // traceViewerButton=new JButton("�鿴����·��");
    // traceViewerButton.setToolTipText("·�����ڵ�����!");
    traceViewerButton.setFont(new Font("Dialog", 1, 14));
    traceViewerButton.setFocusPainted(false);
    traceViewerButton.setBackground(buttonBackGroundColor);
    traceViewerButton.setBorder(buttonBorder);
    traceViewerButton.setVerticalAlignment(AbstractButton.CENTER);
    traceViewerButton.setHorizontalAlignment(AbstractButton.CENTER);
    secondPanel.add(traceViewerButton);
    traceViewerButton.addActionListener(new ActionListener() {

        public void actionPerformed(ActionEvent evt) {
            listenerProxy.traceViewerActionPerformed(evt);
        }
    });
    JPanel imagesPanel = new JPanel();
    imagesPanel.setOpaque(false);
    // top, left, bottom, right
    imagesPanel.setBorder(BorderFactory.createEmptyBorder(10, 0, 0, 0));
    container.add(imagesPanel);
    imagesPanel.setLayout(new FlowLayout(FlowLayout.CENTER, 0, 0));
    ImageIcon icon = new ImageIcon("./gui/images/" + logo);
    JLabel label = new JLabel(icon);
    label.setVisible(true);
    label.setToolTipText("What a spacey NIST logo!!!");
    // label.setToolTipText("ʲô��NIST�ı�־!");
    label.setHorizontalAlignment(AbstractButton.CENTER);
    label.setForeground(Color.black);
    label.setFont(new Font("Dialog", 1, 14));
    label.setOpaque(true);
    label.setBackground(Color.lightGray);
    imagesPanel.add(label);
}
