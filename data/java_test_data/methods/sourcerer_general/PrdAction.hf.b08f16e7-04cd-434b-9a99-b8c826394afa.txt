public String hf() throws Exception {
    currentProject = this.getCurrentProject();
    if (cardData == null || !Constants.TASK_TYPE_HF.equals(cardData.getTask())) {
        addActionError(getText("prd.write.error.noAuthority"));
        hfEdit();
        return SUCCESS;
    }
    try {
        Device device = null;
        String deviceId = this.getRequest().getParameter("device.deviceId");
        if (StringUtils.isNotEmpty(deviceId)) {
            device = this.deviceManager.get(Long.parseLong(deviceId));
        }
        if (device == null) {
            addActionError(getText("prd.write.error.noDevice"));
            hfEdit();
            return SUCCESS;
        }
        RfidDefine rfidDefine = rfidDefineManager.getRfidDefineByProjectAndType(currentProject, Constants.TASK_TYPE_HF);
        if (rfidDefine == null) {
            addActionError(getText("prd.write.error.noDefine"));
            hfEdit();
            return SUCCESS;
        }
        try {
            String rfidData = rfidDefine.getRfidData();
            String writingData = rfidData;
            List<String> fields = rfidDefine.getFields();
            if (fields != null && !fields.isEmpty()) {
                for (String field : fields) {
                    if ("�û���".equals(field)) {
                        writingData = StringUtils.replace(writingData, "{" + field + "}", cardData.getUserName());
                    }
                    if ("֤�����".equals(field)) {
                        writingData = StringUtils.replace(writingData, "{" + field + "}", cardData.getCertificateNo());
                    }
                    if ("֤��������".equals(field)) {
                        writingData = StringUtils.replace(writingData, "{" + field + "}", cardData.getCertificateType());
                    }
                    if ("��Ƭ���".equals(field)) {
                        writingData = StringUtils.replace(writingData, "{" + field + "}", cardData.getCardSn());
                    }
                    if ("�Ա�".equals(field)) {
                        writingData = StringUtils.replace(writingData, "{" + field + "}", cardData.getSex().toString());
                    }
                    Set<CardDataDetail> cardDataDetails = cardData.getCardDataDetails();
                    for (CardDataDetail cardDataDetail : cardDataDetails) {
                        if (field.equals(cardDataDetail.getFieldName())) {
                            writingData = StringUtils.replace(writingData, "{" + field + "}", cardDataDetail.getFieldValue());
                        }
                    }
                }
                HFUtils.write(writingData, cardData.getCardSn(), device);
            }
            System.out.println(writingData);
        } catch (Exception ex) {
            List<String> args = new ArrayList<String>();
            args.add(ex.getMessage());
            addActionError(getText("prd.write.error.saved", args));
            hfEdit();
            return SUCCESS;
        }
        Set<CardDataStatus> cardDataStatuss = cardData.getCardDataStatuses();
        Workflow createCardWorkflow = workflowManager.getWorkflowByProjectAndType(this.getCurrentProject(), Constants.WORKFLOW_CREATE_CARD);
        if (createCardWorkflow != null) {
            WorkflowTask task = createCardWorkflow.getNextTask(cardData.getTask());
            if (task != null) {
                cardData.setTask(task.getTaskType());
                cardData.setStatus(Constants.CARD_STATUS_CREATING);
                cardData.setNextStatus(Constants.CARD_STATUS_CREATING);
            } else {
                cardData.setTask(null);
                cardData.setStatus(Constants.CARD_STATUS_CREATED);
                cardData.setNextStatus(Constants.CARD_STATUS_FINISHED);
            }
        } else {
            cardData.setTask(null);
            cardData.setStatus(Constants.CARD_STATUS_CREATED);
            cardData.setNextStatus(Constants.CARD_STATUS_FINISHED);
        }
        CardDataStatus cardDataStatus = new CardDataStatus();
        cardDataStatus.setCardData(cardData);
        cardDataStatus.setCreatedDate(new Date());
        cardDataStatus.setCreatedUser(this.getUser().getLoginName());
        cardDataStatus.setStatus(Constants.CARD_STATUS_HF);
        cardDataStatuss.add(cardDataStatus);
        cardData.setCardDataStatuses(cardDataStatuss);
        cardData = (CardData) this.cardDataManager.save(cardData);
    } catch (Exception ex) {
        List<String> args = new ArrayList<String>();
        args.add(ex.getMessage());
        addActionError(getText("prd.print.error.saved", args));
        hfEdit();
        return SUCCESS;
    }
    saveMessage(getText("prd.write.added"));
    if ("printer".equals(cardData.getTask())) {
        this.printerEdit();
        return "printer";
    }
    if ("uhf".equals(cardData.getTask())) {
        this.uhfEdit();
        return "uhf";
    }
    hfEdit();
    return SUCCESS;
}
