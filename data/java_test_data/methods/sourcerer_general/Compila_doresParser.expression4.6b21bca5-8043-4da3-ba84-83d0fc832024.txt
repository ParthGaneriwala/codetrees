// $ANTLR start "expression4"
public final Compila_doresParser.expression4_return expression4() throws RecognitionException {
    Compila_doresParser.expression4_return retval = new Compila_doresParser.expression4_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token set145 = null;
    Compila_doresParser.expression5_return expression5144 = null;
    Compila_doresParser.expression5_return expression5146 = null;
    CommonTree set145_tree = null;
    try {
        // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:230:2: ( expression5 ( ( PLUS | MINUS ) expression5 )* )
        // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:230:4: expression5 ( ( PLUS | MINUS ) expression5 )*
        {
            root_0 = (CommonTree) adaptor.nil();
            pushFollow(FOLLOW_expression5_in_expression41553);
            expression5144 = expression5();
            state._fsp--;
            adaptor.addChild(root_0, expression5144.getTree());
            // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:230:16: ( ( PLUS | MINUS ) expression5 )*
            loop36: do {
                int alt36 = 2;
                int LA36_0 = input.LA(1);
                if (((LA36_0 >= PLUS && LA36_0 <= MINUS))) {
                    alt36 = 1;
                }
                switch(alt36) {
                    case 1:
                        // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:230:17: ( PLUS | MINUS ) expression5
                        {
                            set145 = (Token) input.LT(1);
                            set145 = (Token) input.LT(1);
                            if ((input.LA(1) >= PLUS && input.LA(1) <= MINUS)) {
                                input.consume();
                                root_0 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(set145), root_0);
                                state.errorRecovery = false;
                            } else {
                                MismatchedSetException mse = new MismatchedSetException(null, input);
                                throw mse;
                            }
                            pushFollow(FOLLOW_expression5_in_expression41565);
                            expression5146 = expression5();
                            state._fsp--;
                            adaptor.addChild(root_0, expression5146.getTree());
                        }
                        break;
                    default:
                        break loop36;
                }
            } while (true);
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
