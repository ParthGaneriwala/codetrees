public int getPreferredGap(JComponent component1, JComponent component2, int type, int position, Container parent) {
    super.getPreferredGap(component1, component2, type, position, parent);
    int result;
    if (type == 3) {
        if (position == 3 || position == 7) {
            int gap = getButtonChildIndent(component1, position);
            if (gap != 0)
                return gap;
        }
        int sizeStyle = getSizeStyle(component1);
        Insets gap1 = getPreferredGap(component1, type, sizeStyle);
        switch(position) {
            case // '\001'
            1:
                result = gap1.bottom;
                break;
            case // '\005'
            5:
                result = gap1.top;
                break;
            case // '\003'
            3:
                result = gap1.left;
                break;
            // '\002'
            case 2:
            // '\004'
            case 4:
            // '\006'
            case 6:
            // '\007'
            case 7:
            default:
                result = gap1.right;
                break;
        }
        int raw = result;
        Insets visualMargin2 = getVisualMargin(component2);
        switch(position) {
            case // '\001'
            1:
                result -= visualMargin2.bottom;
                break;
            case // '\005'
            5:
                result -= visualMargin2.top;
                break;
            case // '\003'
            3:
                result -= visualMargin2.left;
                break;
            case // '\007'
            7:
                result -= visualMargin2.right;
                break;
        }
    } else {
        int sizeStyle = Math.min(getSizeStyle(component1), getSizeStyle(component2));
        Insets gap1 = getPreferredGap(component1, type, sizeStyle);
        Insets gap2 = getPreferredGap(component2, type, sizeStyle);
        switch(position) {
            case // '\001'
            1:
                result = Math.max(gap1.top, gap2.bottom);
                break;
            case // '\005'
            5:
                result = Math.max(gap1.bottom, gap2.top);
                break;
            case // '\003'
            3:
                result = Math.max(gap1.right, gap2.left);
                break;
            // '\002'
            case 2:
            // '\004'
            case 4:
            // '\006'
            case 6:
            // '\007'
            case 7:
            default:
                result = Math.max(gap1.left, gap2.right);
                break;
        }
        Insets visualMargin1 = getVisualMargin(component1);
        Insets visualMargin2 = getVisualMargin(component2);
        switch(position) {
            case // '\001'
            1:
                result -= visualMargin1.top + visualMargin2.bottom;
                break;
            case // '\005'
            5:
                result -= visualMargin1.bottom + visualMargin2.top;
                break;
            case // '\003'
            3:
                result -= visualMargin1.right + visualMargin2.left;
                break;
            case // '\007'
            7:
                result -= visualMargin1.left + visualMargin2.right;
                break;
        }
    }
    return Math.max(0, result);
}
