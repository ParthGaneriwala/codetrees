public void aplicarConstraints(Object entidade) {
    TraversableResolver tr = new MyTraversableResolver();
    Validator validator = Validation.buildDefaultValidatorFactory().usingContext().traversableResolver(tr).getValidator();
    // aplica a validação na entidade conforme as anotações definidas no mapeamento da entidade.
    final Set<ConstraintViolation<Object>> violacoes = validator.validate(entidade);
    if (!violacoes.isEmpty()) {
        List<MensagemErro> mErros = new ArrayList<MensagemErro>();
        for (ConstraintViolation<?> violation : violacoes) {
            String propriedade = violation.getPropertyPath().toString();
            String mensagem = violation.getMessageTemplate();
            if (mensagem.contains(ValidadorMensagemEnum.NOT_NULL.getChave())) {
                mErros.add(new MensagemErro(ValidadorMensagemEnum.NOT_NULL, ("label_" + propriedade)));
            } else if (mensagem.contains(ValidadorMensagemEnum.NOT_EMPTY.getChave())) {
                mErros.add(new MensagemErro(ValidadorMensagemEnum.NOT_EMPTY, ("label_" + propriedade)));
            } else if (mensagem.contains(ValidadorMensagemEnum.LENGTH.getChave())) {
                Map<String, Object> attributes = violation.getConstraintDescriptor().getAttributes();
                String min = String.valueOf(attributes.get("min"));
                String max = String.valueOf(attributes.get("max"));
                mErros.add(new MensagemErro(ValidadorMensagemEnum.LENGTH, "label_" + propriedade, min, max));
            } else if (mensagem.contains(ValidadorMensagemEnum.EMAIL.getChave())) {
                mErros.add(new MensagemErro(ValidadorMensagemEnum.EMAIL, "label_" + propriedade));
            } else if (mensagem.contains(ValidadorMensagemEnum.MIN.getChave())) {
                Map<String, Object> attributes = violation.getConstraintDescriptor().getAttributes();
                String value = String.valueOf(attributes.get("value"));
                mErros.add(new MensagemErro(ValidadorMensagemEnum.MIN, "label_" + propriedade, value));
            } else if (mensagem.contains(ValidadorMensagemEnum.MAX.getChave())) {
                Map<String, Object> attributes = violation.getConstraintDescriptor().getAttributes();
                String value = String.valueOf(attributes.get("value"));
                mErros.add(new MensagemErro(ValidadorMensagemEnum.MAX, "label_" + propriedade, value));
            } else if (mensagem.contains(ValidadorMensagemEnum.SIZE.getChave())) {
                Map<String, Object> attributes = violation.getConstraintDescriptor().getAttributes();
                String min = String.valueOf(attributes.get("min"));
                String max = String.valueOf(attributes.get("max"));
                mErros.add(new MensagemErro(ValidadorMensagemEnum.LENGTH, "label_" + propriedade, min, max));
            } else if (mensagem.contains(ValidadorMensagemEnum.RANGE.getChave())) {
                Map<String, Object> attributes = violation.getConstraintDescriptor().getAttributes();
                String min = String.valueOf(attributes.get("min"));
                String max = String.valueOf(attributes.get("max"));
                mErros.add(new MensagemErro(ValidadorMensagemEnum.LENGTH, "label_" + propriedade, min, max));
            } else if (mensagem.contains(ValidadorMensagemEnum.DIGITS.getChave())) {
                Map<String, Object> attributes = violation.getConstraintDescriptor().getAttributes();
                String integer = String.valueOf(attributes.get("integer"));
                String fraction = String.valueOf(attributes.get("fraction"));
                mErros.add(new MensagemErro(ValidadorMensagemEnum.LENGTH, "label_" + propriedade, integer, fraction));
            }
        }
        throw new NegocioException(mErros);
    }
}
