public void movePawn(int newX, int newY, Piece piece) {
    // if(piece instanceof Pawn){
    Pawn P = (Pawn) piece;
    // for use in overwriting old place on board
    int x = P.getX();
    // for use in overwriting old place on board
    int y = P.getY();
    // }
    if (P.checkIfLegal(newX, newY)) {
        if (currentPlayer == player1) {
            // wants to move 1 up
            if (P.getY() - 1 == newY && board.getBoard()[newX][newY] == null && P.getX() == newX) {
                // check if a piece is already in the location
                // overwrites old position on board
                board.placePiece(x, y, "", currentPlayer);
                removePiece(newX, newY);
                P.move(newX, newY);
                // new
                switchPlayer();
            // P.setY(newY);
            } else // wants to move 2 up (only availabe if first move)
            if (P.getY() - 2 == newY && P.getY() == 6 && !P.hasMoved() && board.getBoard()[newX][newY] == null && P.getX() == newX) {
                // check if a piece is already in location, and pawn has not moved
                // overwrites old position on board
                board.placePiece(x, y, "", currentPlayer);
                removePiece(newX, newY);
                P.move(newX, newY);
                // new
                switchPlayer();
            // P.setY(newY);
            } else // wants to move right up (only availabe if a piece of the opposite player is there)
            if (checkSamePiece(newX, newY) != true && board.getBoard()[newX][newY] != null && P.getY() - 1 == newY && P.getX() + 1 == newX) {
                // overwrites old position on board
                board.placePiece(x, y, "", currentPlayer);
                removePiece(newX, newY);
                P.move(newX, newY);
                // new
                switchPlayer();
            // P.setY(newY);
            // P.setX(newX);
            } else // wants to move left up (only availabe if a piece of the opposite player is there)
            if (checkSamePiece(newX, newY) != true && board.getBoard()[newX][newY] != null && P.getY() - 1 == newY && P.getX() - 1 == newX) {
                // overwrites old position on board
                board.placePiece(x, y, "", currentPlayer);
                removePiece(newX, newY);
                P.move(newX, newY);
                // new
                switchPlayer();
            }
        }
        if (currentPlayer == player2) {
            // wants to move 1 down
            if (P.getY() + 1 == newY && board.getBoard()[newX][newY] == null && P.getX() == newX) {
                // check if a piece is already in the location
                // new //overwrites old position on board
                board.placePiece(x, y, "", currentPlayer);
                removePiece(newX, newY);
                P.move(newX, newY);
                // new
                switchPlayer();
            } else // wants to move 2 down (only availabe if first move)
            if (P.getY() + 2 == newY && P.getY() == 1 && !P.hasMoved() && board.getBoard()[newX][newY] == null && P.getX() == newX) {
                // check if a piece is already in the location and pawn has not moved
                // new //overwrites old position on board
                board.placePiece(x, y, "", currentPlayer);
                removePiece(newX, newY);
                P.move(newX, newY);
                // new
                switchPlayer();
            } else // wants to move right down (only availabe if a piece of the opposite player is there)
            if (checkSamePiece(newX, newY) != true && board.getBoard()[newX][newY] != null && P.getY() + 1 == newY && P.getX() - 1 == newX) {
                // new //overwrites old position on board
                board.placePiece(x, y, "", currentPlayer);
                removePiece(newX, newY);
                P.move(newX, newY);
                // new
                switchPlayer();
            } else // wants to move left down (only availabe if a piece of the opposite player is there)
            if (checkSamePiece(newX, newY) != true && board.getBoard()[newX][newY] != null && P.getY() + 1 == newY && P.getX() + 1 == newX) {
                // new //overwrites old position on board
                board.placePiece(x, y, "", currentPlayer);
                removePiece(newX, newY);
                P.move(newX, newY);
                // new
                switchPlayer();
            }
        }
    } else {
        // new
        System.out.println("**** Move is invalid, please try again! ****");
    }
// board.placePiece(oldX, oldY, "", currentPlayer); // I moved this up to only evaluate when a move was done.
}
