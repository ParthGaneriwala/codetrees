private List<Llamada__c> asignarRecuperaciones(ID idEmpresa, String metodoPago, List<Cobro> cobros, List<Agente> agentes, Date fechaInicioCiclo, Date fechaFinCiclo, ID idCiclo, List<Mora> moras) throws Exception {
    try {
        List<Llamada__c> newLlamadas = new ArrayList<Llamada__c>();
        // Paso 1. Ordenar la lista de cobros
        if (metodoPago == null) {
            throw new Exception("La empresa no tiene el metodo de pago definido");
        }
        if (metodoPago.equals(Empresa.METODO_PAGO_SALDO_MINIMO)) {
            Collections.sort(cobros, new CobroTarjetaCreditoComparator());
        } else {
            Collections.sort(cobros, new CobroPrestamoComparator());
        }
        // Paso 2. Obtiene los feriados
        List<Date> feriados = this.obtenerFeriados();
        Date fechaRealInicioCiclo = this.obtenerFechaRealInicioCiclo(fechaInicioCiclo, feriados);
        // Paso 3. Inicializa los dias de cobro del agente
        for (Agente agente : agentes) {
            if (agente.getDiasCobro().size() == 0) {
                DiaAgente dia = new DiaAgente(fechaRealInicioCiclo);
                if (agente.getDiasCobro().size() == 0) {
                    agente.getDiasCobro().add(dia);
                }
            }
        }
        // Paso 4. Ordena los agentes de recuperaciones
        this.ordenarAgentesXOrden(agentes, this.obtenerOrdenGestorRecuperaciones(idEmpresa));
        // Paso 4. Asignar cobros a agentes
        int posAgenteActual = 0;
        Integer indexCobro = 0;
        for (Iterator<Cobro> iterCobro = cobros.iterator(); iterCobro.hasNext(); ) {
            Cobro cobro = iterCobro.next();
            logger.info("Asignando cobro " + (indexCobro + 1) + ": " + cobro.getCobro__c().getName() + " (" + cobro.getCobro__c().getId() + ").");
            if (!cobro.isAsignado()) {
                // Cobros del mismo cliente, se marcan en la lista con asignado = true
                List<Cobro> cobrosAdicionales = this.obtenerCobrosMismoCliente(cobros, indexCobro);
                // Se hace una sola lista
                List<Cobro> cobrosAgendar = cobrosAdicionales;
                cobrosAgendar.add(0, cobro);
                // Busca el agente que estaba llevando los cobros
                Agente agente = null;
                boolean esAgenteCiclo = true;
                ID idAgente = this.obtenerAgenteCobro(cobrosAgendar);
                if (idAgente != null) {
                    if (this.esAgenteActivo(idAgente, agentes)) {
                        // Lo busca entre los agentes del ciclo
                        agente = this.obtenerAgente(idAgente, agentes);
                    }
                }
                // Si agente es nulo debe buscar un nuevo agente desde la cola de agentes
                if (agente == null && agentes.size() > 0) {
                    // Ordena por nivel de mora para as�, buscar un agente que vea la mora mas alta
                    if (cobrosAgendar.size() > 1) {
                        Collections.sort(cobrosAgendar, new NivelMoraComparator());
                    }
                    int posAgenteCobro = posAgenteActual;
                    do {
                        Agente agenteTemp = agentes.get(posAgenteActual);
                        if (posAgenteActual + 1 != agentes.size()) {
                            posAgenteActual++;
                        } else {
                            posAgenteActual = 0;
                        }
                        if (agenteTemp.tieneCupoParaCobros(cobrosAgendar.size()) && esValidoProductoMora(cobrosAgendar.get(0), agenteTemp, cobrosAgendar.size()) == Constantes.PRODUCTO_MORA_VALIDOS) {
                            agente = agenteTemp;
                            break;
                        }
                    } while (posAgenteActual != posAgenteCobro);
                }
                if (agente == null) {
                    // Busca el rebalse
                    ID idUser = obtenerRebalseMora(moras, cobrosAgendar.get(0).getCobro__c().getConf_Info_Mora__c());
                    if (idUser == null) {
                        boolean usuarioAnterior = this.esParaAgenteYaAsignado(cobrosAgendar);
                        for (Cobro cobroAgendar : cobrosAgendar) {
                            if (usuarioAnterior) {
                                if (!cobroAgendar.isEsNuevo()) {
                                    idUser = cobroAgendar.getCobro__c().getOwnerId();
                                    break;
                                }
                            } else {
                                if (cobroAgendar.isEsNuevo()) {
                                    idUser = cobroAgendar.getCobro__c().getOwnerId();
                                    break;
                                }
                            }
                        }
                    }
                    // Crea una llamada para el primer dia
                    for (Cobro cobroAgendar : cobrosAgendar) {
                        cobroAgendar.setAsignado(true);
                        cobroAgendar.getCobro__c().setAgente__c(null);
                        cobroAgendar.getCobro__c().setIsMarcadorPredictivo__c(false);
                        if (idUser != null) {
                            cobroAgendar.getCobro__c().setOwnerId(idUser);
                        }
                        if (cobroAgendar.isEsNuevo()) {
                            cobroAgendar.getCobro__c().setTC_Ciclo_Pertenece__c(idCiclo);
                            // Crea la llamada.
                            newLlamadas.add(this.crearLlamada(idEmpresa, cobro.getCobro__c().getOwnerId(), null, cobroAgendar.getCobro__c(), fechaRealInicioCiclo, cobroAgendar.getIdRecordTypeLlamada()));
                        }
                    }
                } else {
                    if (esAgenteCiclo) {
                        agente.distribuirCobrosPorProducto(cobrosAgendar);
                    }
                    for (Cobro cobroAgendar : cobrosAgendar) {
                        cobroAgendar.getCobro__c().setOwnerId(agente.getIdUser());
                        cobroAgendar.getCobro__c().setAgente__c(agente.getId());
                        cobroAgendar.setAsignado(true);
                        cobroAgendar.getCobro__c().setIsMarcadorPredictivo__c(false);
                        if (esAgenteCiclo) {
                            // Obtiene el ultimo dia de cobro de la lista de dias de cobro
                            DiaAgente diaAgente = agente.getDiasCobro().get(agente.getDiasCobro().size() - 1);
                            int cargaDiariaAgente = this.obtenerCargaDiaAgente(agente.getMaximoCobrosDia(), agente.getMinimoCobrosDia(), agente.getDiasCobro().size(), diaAgente.getFecha());
                            if (cobroAgendar.isEsNuevo()) {
                                cobroAgendar.getCobro__c().setTC_Ciclo_Pertenece__c(idCiclo);
                                if (diaAgente.getLlamadas().size() < cargaDiariaAgente) {
                                    // Crea una llamada para ese dia
                                    diaAgente.getLlamadas().add(this.crearLlamada(idEmpresa, agente.getIdUser(), agente.getId(), cobroAgendar.getCobro__c(), diaAgente.getFecha(), cobroAgendar.getIdRecordTypeLlamada()));
                                } else {
                                    // Crea otro d�a para el agente
                                    Date sigDia = Util.obtenerSiguienteDiaHabil(diaAgente.getFecha(), feriados);
                                    DiaAgente newDiaAgente = new DiaAgente(sigDia);
                                    // Crea una nueva llamada
                                    newDiaAgente.getLlamadas().add(this.crearLlamada(idEmpresa, agente.getIdUser(), agente.getId(), cobroAgendar.getCobro__c(), newDiaAgente.getFecha(), cobroAgendar.getIdRecordTypeLlamada()));
                                    agente.getDiasCobro().add(newDiaAgente);
                                }
                            }
                        } else {
                            // Se le crean las llamadas para el primer dia del ciclo
                            if (cobroAgendar.isEsNuevo()) {
                                cobroAgendar.getCobro__c().setTC_Ciclo_Pertenece__c(idCiclo);
                                if (cobroAgendar.isEsNuevo()) {
                                    cobroAgendar.getCobro__c().setTC_Ciclo_Pertenece__c(idCiclo);
                                    // Crea la llamada.
                                    newLlamadas.add(this.crearLlamada(idEmpresa, agente.getIdUser(), agente.getId(), cobroAgendar.getCobro__c(), fechaRealInicioCiclo, cobroAgendar.getIdRecordTypeLlamada()));
                                }
                            }
                        }
                    }
                // for
                }
            }
            // end if
            indexCobro++;
        }
        // End for
        // Devuelve la lista de llamadas nuevas
        logger.info("Num Llamadas sin agente " + newLlamadas.size());
        return newLlamadas;
    } catch (Exception e) {
        logger.error(e);
        throw e;
    }
}
