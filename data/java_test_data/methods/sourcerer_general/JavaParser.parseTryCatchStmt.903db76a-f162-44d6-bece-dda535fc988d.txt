public LocatableToken parseTryCatchStmt(LocatableToken token) {
    beginTryCatchSmt(token);
    token = tokenStream.nextToken();
    if (token.getType() != JavaTokenTypes.LCURLY) {
        error("Expecting '{' after 'try'");
        tokenStream.pushBack(token);
        endTryCatchStmt(token, false);
        return null;
    }
    beginTryBlock(token);
    parseStmtBlock();
    token = tokenStream.nextToken();
    if (token.getType() == JavaTokenTypes.RCURLY) {
        endTryBlock(token, true);
    } else if (token.getType() == JavaTokenTypes.LITERAL_catch || token.getType() == JavaTokenTypes.LITERAL_finally) {
        // Invalid, but we can recover
        tokenStream.pushBack(token);
        error("Missing '}' at end of 'try' block");
        endTryBlock(token, false);
    } else {
        tokenStream.pushBack(token);
        error("Missing '}' at end of 'try' block");
        endTryBlock(token, false);
        endTryCatchStmt(token, false);
        return null;
    }
    int laType = tokenStream.LA(1).getType();
    while (laType == JavaTokenTypes.LITERAL_catch || laType == JavaTokenTypes.LITERAL_finally) {
        token = tokenStream.nextToken();
        if (laType == JavaTokenTypes.LITERAL_catch) {
            token = tokenStream.nextToken();
            if (token.getType() != JavaTokenTypes.LPAREN) {
                error("Expecting '(' after 'catch'");
                tokenStream.pushBack(token);
                endTryCatchStmt(token, false);
                return null;
            }
            parseTypeSpec(true);
            token = tokenStream.nextToken();
            if (token.getType() != JavaTokenTypes.IDENT) {
                error("Expecting identifier after type (in 'catch' expression)");
                tokenStream.pushBack(token);
                endTryCatchStmt(token, false);
                return null;
            }
            token = tokenStream.nextToken();
            if (token.getType() != JavaTokenTypes.RPAREN) {
                error("Expecting ')' after identifier (in 'catch' expression)");
                tokenStream.pushBack(token);
                endTryCatchStmt(token, false);
                return null;
            }
        }
        token = tokenStream.nextToken();
        if (token.getType() != JavaTokenTypes.LCURLY) {
            error("Expecting '{' after 'catch'/'finally'");
            tokenStream.pushBack(token);
            endTryCatchStmt(token, false);
            return null;
        }
        // parse as a statement block
        token = parseStatement(token);
        laType = tokenStream.LA(1).getType();
    }
    if (token != null) {
        endTryCatchStmt(token, true);
    } else {
        endTryCatchStmt(tokenStream.LA(1), false);
    }
    return token;
}
