public void test2pTables() throws Exception {
    String prefix = "public.";
    // Just so deps don't cause problems
    execSQL("DROP VIEW tstview", 0);
    // Select commands
    assertEquals(2, queryRowCount("SELECT i FROM " + prefix + "tsttbl WHERE i IN (1, 2, 3)"));
    execSQL("SELECT * INTO " + prefix + "newtbl FROM tsttbl", 2);
    assertEquals(2, queryRowCount("SELECT admin FROM " + ipref + "system_users"));
    assertEquals("Sub-query", 1, queryRowCount("SELECT vc FROM " + prefix + "tsttbl WHERE i = (\n" + "    SELECT i2 FROM " + prefix + "joinedtbl\n" + ")"));
    assertEquals("Join", 1, queryRowCount("SELECT vc FROM " + prefix + "tsttbl, " + prefix + "joinedtbl\n" + "WHERE tsttbl.i = joinedtbl.i2\n" + "AND joinedtbl.vc2 = 'zwei'"));
    // Selects using Labels/Aliases
    assertEquals(2, queryRowCount("SELECT ali.i FROM " + prefix + "tsttbl ali WHERE ali.i IN (1, 2, 3)"));
    execSQL("SELECT * INTO " + prefix + "newtbl2 FROM tsttbl ali", 2);
    execSQL("SELECT * INTO newtbl3 FROM " + prefix + "tsttbl ali", 2);
    execSQL("SELECT * INTO " + prefix + "newtbl4 FROM " + prefix + "tsttbl ali", 2);
    assertEquals(2, queryRowCount("SELECT ali.admin FROM " + ipref + "system_users ali"));
    assertEquals("Sub-query", 1, queryRowCount("SELECT ali.vc FROM " + prefix + "tsttbl ali WHERE i = (\n" + "    SELECT bali.i2 FROM " + prefix + "joinedtbl bali\n" + ")"));
    assertEquals("Join", 1, queryRowCount("SELECT ali.vc FROM " + prefix + "tsttbl ali, " + prefix + "joinedtbl bali\n" + "WHERE ali.i = bali.i2\n" + "AND bali.vc2 = 'zwei'"));
    /* Mixed aliases not working yet
        assertEquals("Join", 1, queryRowCount(
          "SELECT ali.vc FROM " + prefix + "tsttbl ali, " + prefix
          + "joinedtbl bali\nWHERE tsttbl.i = joinedtbl.i2\n"
            + "AND bali.vc2 = 'zwei'"));
        */
    // Alter Table commands
    execSQL("ALTER TABLE " + prefix + "playtbl RENAME TO " + prefix + "renamedtbl", 0);
    execSQL("ALTER TABLE " + prefix + "renamedtbl RENAME TO " + prefix + "playtbl", 0);
    execSQL("ALTER TABLE " + prefix + "constrainedtbl ADD CONSTRAINT con1 CHECK (i6 > 4)", 0);
    execSQL("ALTER TABLE " + prefix + "tsttbl ADD COLUMN vco1 VARCHAR", 0);
    execSQL("ALTER TABLE " + prefix + "tsttbl DROP COLUMN vco1", 0);
    execSQL("ALTER TABLE " + prefix + "tsttbl ADD COLUMN vco1 VARCHAR", 0);
    execSQL("ALTER TABLE " + prefix + "tsttbl ALTER COLUMN vco1 RENAME TO j1", 0);
    execSQL("ALTER TABLE " + prefix + "constrainedtbl DROP CONSTRAINT con1", 0);
    execSQL("ALTER TABLE " + prefix + "foreigntbl DROP CONSTRAINT tstfk", 0);
    execSQL("ALTER TABLE " + prefix + "foreigntbl ADD CONSTRAINT tstfk FOREIGN KEY " + "(i7) REFERENCES primarytbl (i8)", 0);
    execSQL("ALTER TABLE " + prefix + "playtbl ADD CONSTRAINT ucons9 UNIQUE (i9)", 0);
    // Drop table command
    execSQL("DROP TABLE " + prefix + "playtbl", 0);
    // Set table readonly command
    execSQL("SET TABLE " + prefix + "tsttbl READONLY true", 0);
    execSQL("SET TABLE " + prefix + "tsttbl READONLY false", 0);
    // Create table commands
    execSQL("CREATE TABLE " + prefix + "tsttbly (i INT, vc VARCHAR)", 0);
    execSQL("CREATE CACHED TABLE " + prefix + "tsttblx (i INT, vc VARCHAR)", 0);
    execSQL("CREATE TABLE constrz (i6 INT, vc6 VARCHAR, " + "CONSTRAINT uconsz UNIQUE(i6))", 0);
    execSQL("CREATE TABLE forztbl (i7 INT, vc7 VARCHAR, " + "CONSTRAINT tstfkz FOREIGN KEY (i7) REFERENCES primarytbl (i8))", 0);
    // Update command
    execSQL("UPDATE " + prefix + "tsttbl SET vc = 'eleven' WHERE i = 1", 1);
    // delete
    execSQL("DELETE FROM  " + prefix + "tsttbl WHERE i = 1", 1);
    // grant, revoke
    execSQL("GRANT ALL ON " + prefix + "tsttbl TO tstuser", 0);
    execSQL("REVOKE ALL ON " + prefix + "tsttbl FROM tstuser", 0);
}
