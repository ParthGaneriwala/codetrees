public void displayEnd() {
    System.out.println("END");
    for (int i = 0; i < client.length; i++) {
        if (client[i] == null)
            continue;
        if (!client[i].isSource)
            System.out.println("[Peer " + client[i].port + "] : Not source " + client[i].protocol.committed);
        else
            System.out.println("[Peer " + client[i].port + "] : Source" + client[i].protocol.committed);
        double CI = ((double) client[i].continuityIndex) / ((double) client[i].allIndex);
        System.out.println("continuity index = " + CI);
        System.out.print("My Partners are  : ");
        for (int j = 0; j < client[i].pSize; j++) {
            if (client[i].partners.getPartner(j) != null)
                System.out.print(" - " + (client[i].partners.getPartner(j).port));
        }
        System.out.println("\n");
        System.out.print("My Buffer Map : ");
        for (int j = 0; j < client[i].videoSize; j++) System.out.print(client[i].scheduler.getWholeBits(j));
        System.out.println("\n");
        System.out.println("\n-----------------------------------------------");
    }
    new ViewApp(mCacheOverPeers, pCacheOverPeers, pScoreOverNetwork, pScoreOverPeers, continuityIndex, pAverageOverTime);
    mCacheOverPeers.init();
    mCacheOverPeers.view(0);
    mCacheOverPeers.set("Membership's cache visualization", "Peer ID", "Number of Members");
    pScoreOverPeers.init();
    pScoreOverPeers.view(0);
    pScoreOverPeers.set("Score at Each Peer", "Peer ID", "Score");
    pScoreOverNetwork.init();
    pScoreOverNetwork.view(0);
    pScoreOverNetwork.set("Score Distribution Over Network", "Score", "Peers Number");
    pCacheOverPeers.init();
    pCacheOverPeers.view(0);
    pCacheOverPeers.set("Partner's Cache Visualization", "Peers", "Number of Partners");
    continuityIndex.init();
    continuityIndex.view(0);
    continuityIndex.set("Continuity Index at Each Peer", "Peer ID", "Continuity Index");
    pAverageOverTime.init(average);
    pAverageOverTime.view(0);
    pAverageOverTime.set("Average Score Visualization over time", "Time(Sec)", "Average Score");
    System.err.println("---> " + counts);
}
