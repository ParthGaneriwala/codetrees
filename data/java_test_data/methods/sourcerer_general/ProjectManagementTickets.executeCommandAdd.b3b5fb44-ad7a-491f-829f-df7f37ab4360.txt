/*
  public String executeCommandDetails(ActionContext context) {
    // ProjectManagementTickets.do?command=Details&pid=139&id=3396
    String projectId = context.getRequest().getParameter("pid");
    String id = context.getRequest().getParameter("id");
    int projectTicketId = TicketUtils.queryProjectTicketIdFromTicketId(db, id);
    String redirect = "/show/" + ProjectUtils.loadProject(Integer.parseInt(projectId)).getUniqueId() + "/issue/" + projectTicketId;
    context.getRequest().setAttribute("redirectTo", redirect);
    context.getRequest().removeAttribute("PageLayout");
    return "Redirect301";
  }
  */
public String executeCommandAdd(ActionContext context) {
    Connection db = null;
    String projectId = context.getRequest().getParameter("pid");
    try {
        db = this.getConnection(context);
        // Load the project
        Project thisProject = retrieveAuthorizedProject(Integer.parseInt(projectId), context);
        // NOTE: the Modify method uses the add method too...
        String isEditing = (String) context.getRequest().getAttribute("isEditing");
        if (isEditing == null && !hasProjectAccess(context, thisProject.getId(), "project-tickets-add")) {
            return "PermissionError";
        }
        context.getRequest().setAttribute("project", thisProject);
        context.getRequest().setAttribute("IncludeSection", "tickets_add");
        // Load the team
        PagedListInfo projectTeamInfo = new PagedListInfo();
        projectTeamInfo.setItemsPerPage(0);
        projectTeamInfo.setDefaultSort("last_name", null);
        TeamMemberList team = new TeamMemberList();
        team.setProjectId(thisProject.getId());
        team.setPagedListInfo(projectTeamInfo);
        team.buildList(db);
        context.getRequest().setAttribute("teamMemberList", team);
        // Prepare the form
        Ticket thisTicket = (Ticket) context.getFormBean();
        thisTicket.setOrgId(0);
        thisTicket.setContactId(getUserId(context));
        if (thisTicket.getId() > 0) {
            thisTicket.buildHistory(db);
            thisTicket.queryProjectTicketCount(db);
        }
        buildFormElements(context, db, thisProject, thisTicket);
    } catch (Exception e) {
        context.getRequest().setAttribute("Error", e);
        return ("SystemError");
    } finally {
        this.freeConnection(context, db);
    }
    if ("true".equals(context.getRequest().getParameter("popup"))) {
        return ("ProjectTicketsPopupOK");
    }
    return ("ProjectCenterOK");
}
