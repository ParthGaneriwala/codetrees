public void readPreBuffer() {
    byte[] b = new byte[0];
    /**
     * Number of rows in the first place, and not on the first page of the document
     */
    if (mCurrentLine == 0 && !mBeforeOfDoc) {
        /**
         * Skip to close  before the previous flow, and then skip to deal with
         */
        mReadFile.close();
        /**
         * The new generation of document stream
         */
        try {
            mReadFile = new ReadFile(this.mFileName);
        } catch (FileNotFoundException e) {
            mTextView.setText(Constant.FILENOTFOUND);
        }
        /**
         * Skip to the length of the data
         */
        mSkipLength = mMyLines.get(mCurrentLine).offset - mReadLength;
        /**
         * If the current line of offset and the length equal to the current line on the page in the document
         */
        if (mSkipLength <= 0) {
            mSkipLength = 0;
            mBeforeOfDoc = true;
        }
        /**
         * Skip the beginning of the number of
         */
        try {
            mReadFile.skip((int) mSkipLength);
        } catch (FileNotFoundException e) {
            mTextView.setText(Constant.FILENOTFOUND);
        }
        if (null != mReadFile) {
            // If not, then get the actual length of the
            if (mSkipLength == 0) {
                Log.d("readPreBuffer2", "before data < mReadLength");
                // b = mReadFile.read(mMyLines.get(mCurrentLine).offset-mMyLines.get(mCurrentLine).beforeLineLength);
                b = mReadFile.read(mMyLines.get(mCurrentLine + mLinesOfOneScreen).offset);
            } else {
                /**
                 * Began to read data
                 */
                b = mReadFile.read(mReadLength);
            }
        }
        /**
         * Deal with data from front to end, when found the \n first
         */
        int firstN = 0;
        if (firstN > 0) {
            while (true) {
                if (firstN < 1) {
                    break;
                }
                int v = b[firstN - 1] & 0xff;
                if (v == 10) {
                    // \n
                    break;
                }
                firstN++;
            }
        }
        // The data contain front data and end data, we need end data
        // Delete front data, load the current screen data
        /**
         * From front to end ,first \n, front data's length
         */
        int frontDataLength = firstN;
        /**
         * End data's length
         */
        int endDataLength = b.length - firstN;
        /**
         * Set the mSkipLenght , read previous contains the front data and the end data
         */
        /**
         * But mSkipLength is only when read file when need skip length,when analysis buffer must add the front data,there are the real length
         */
        mSkipLength = mSkipLength + firstN;
        // mEndBuffer = new byte[frontDataLength];
        /**
         * Copy the end's data to the end's data buffer
         */
        // System.arraycopy(b, frontDataLength, mEndBuffer, 0, endDataLength);
        /**
         * Current display buffer length is �� end's buffer length + current screen's data length
         */
        mDisplayBuffer = new byte[endDataLength];
        /**
         * Copy the end's data to the display buffer
         */
        System.arraycopy(b, 0, mDisplayBuffer, frontDataLength, endDataLength);
        b = null;
        frontDataLength = 0;
        System.gc();
    }
}
