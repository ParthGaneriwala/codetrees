public void testAgainst() {
    for (int depth = 1; depth < 6; depth++) {
        // out.println("depth="+ depth);
        IterABMiniMaxDrawFix blackIter = new IterABMiniMaxDrawFix(true, new EvalMaterialOnly(), depth);
        ABMiniMaxDrawFix blackNoIter = new ABMiniMaxDrawFix(true, new EvalMaterialOnly(), depth);
        IterABMiniMaxDrawFix whiteIter = new IterABMiniMaxDrawFix(false, new EvalMaterialOnly(), depth);
        ABMiniMaxDrawFix whiteNoIter = new ABMiniMaxDrawFix(false, new EvalMaterialOnly(), depth);
        for (int i = 0; i < 1000; i++) {
            Board board = RandomBoard.randPieces();
            boolean isEqual = true;
            assertTrue(board.isSane());
            if (board.blackToMove) {
                // out.println("black to move");
                ArrayList<Board> moves = board.generateMoves();
                Board blackIterBoard = blackIter.findMove(board, moves, depth);
                Board blackNoIterBoard = blackNoIter.findMove(board);
                int blackIterValue = blackIter.search(board, depth, MIN, MAX);
                int blackNoIterValue = blackNoIter.search(board, depth, MIN, MAX);
                assertEquals(blackIterValue, blackNoIterValue);
                if (blackIterBoard != null && blackNoIterBoard != null) {
                    isEqual = blackIterBoard.equals(blackNoIterBoard);
                    assertEquals(true, isEqual);
                }
                if (!isEqual || (blackIterValue != blackNoIterValue)) {
                    out.println("Black to move, this board caused conflict:");
                    GameEngine.printBoard(board);
                    out.println("At depth: " + depth);
                    out.println("Iter-choice:");
                    GameEngine.printBoard(blackIterBoard);
                    out.println("Iter-val: " + blackIterValue);
                    out.println("NoIter-choice:");
                    GameEngine.printBoard(blackNoIterBoard);
                    out.println("NoIter-val: " + blackNoIterValue);
                    return;
                }
            } else {
                // out.println("white to move");
                ArrayList<Board> moves = board.generateMoves();
                Board whiteIterBoard = whiteIter.findMove(board, moves, depth);
                Board whiteNoIterBoard = whiteNoIter.findMove(board);
                int whiteIterValue = whiteIter.search(board, depth, MIN, MAX);
                int whiteNoIterValue = whiteNoIter.search(board, depth, MIN, MAX);
                assertEquals(whiteIterValue, whiteNoIterValue);
                if (whiteIterBoard != null && whiteNoIterBoard != null) {
                    isEqual = whiteIterBoard.equals(whiteNoIterBoard);
                    assertEquals(true, isEqual);
                }
                if (!isEqual || (whiteIterValue != whiteNoIterValue)) {
                    out.println("White to move, this board caused conflict:");
                    GameEngine.printBoard(board);
                    out.println("At depth: " + depth);
                    out.println("Iter-choice:");
                    GameEngine.printBoard(whiteIterBoard);
                    out.println("Iter-val: " + whiteIterValue);
                    out.println("NoIter-choice:");
                    GameEngine.printBoard(whiteNoIterBoard);
                    out.println("NoIter-val: " + whiteNoIterValue);
                    return;
                }
            }
        }
    }
}
