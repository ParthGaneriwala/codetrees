public static List<KitTimesBean> HighNoKitTimes(String field, String type) {
    List<KitTimesBean> ktbList = new ArrayList<KitTimesBean>();
    Map<Long, String> map = MapResultService.getMsHistoryMap();
    List<Map.Entry<Long, String>> infoIds = new ArrayList<Map.Entry<Long, String>>(map.entrySet());
    // 排序
    Collections.sort(infoIds, new Comparator<Map.Entry<Long, String>>() {

        public int compare(Map.Entry<Long, String> o1, Map.Entry<Long, String> o2) {
            return (int) (o2.getKey() - o1.getKey());
        }
    });
    // 计算持续未出次数
    Map<String, Integer> nonKitTimesMap = new HashMap<String, Integer>();
    int count = 0;
    for (int i = 0; i < infoIds.size(); i++) {
        Map.Entry<Long, String> v = infoIds.get(i);
        String kVal = CodeType.getHigh(v.getValue());
        if (!nonKitTimesMap.containsKey(kVal)) {
            nonKitTimesMap.put(kVal, count);
        }
        count++;
    }
    // 计算累计已经出次数
    Map<String, Integer> totalKitTimesMap = new HashMap<String, Integer>();
    for (int i = 0; i < infoIds.size(); i++) {
        Map.Entry<Long, String> v = infoIds.get(i);
        String vKey = CodeType.getHigh(v.getValue());
        count = 0;
        if (totalKitTimesMap.containsKey(vKey)) {
            count = totalKitTimesMap.remove(vKey);
        }
        count = count + 1;
        totalKitTimesMap.put(vKey, count);
    }
    for (int i = 0; i <= 4; i++) {
        ktbList.add(new KitTimesBean(i, nonKitTimesMap.get(String.valueOf(i)), Double.parseDouble(totalKitTimesMap.get(String.valueOf(i)).toString())));
    }
    ktbList.add(new KitTimesBean(0, 0, 0.0));
    ktbList.addAll(HighNoKitTimes2(field, type));
    return ktbList;
}
