private void installRoutineDecls() {
    for (ParseNode child : ASTree.getChildren()) {
        if (child.getSymbol().isKeyword(Keyword.ROUTINE)) {
            // because of the structure of id
            ParseNode routineId = child.child(1);
            // it is a routine declaration
            Token token = tokenFor(routineId);
            String rLabel = "routine-";
            rLabel += token.getLexeme();
            rLabel += "-";
            // info needed by RoutineTable-----------------
            int returnType;
            int numberOfPara;
            int[] para = new int[100];
            int[] numOfD = new int[100];
            if (routineId.child(0).getSymbol().isPuctuation(PunctuationSymbol.COLON)) {
                // node.getBinding().setReturnType(0);
                returnType = 0;
            } else {
                // node.getBinding().setReturnType(getTypeNumber(node.child(0)));
                returnType = getTypeNumber(routineId.child(0));
            }
            if (routineId.child(0).getSymbol().isPuctuation(PunctuationSymbol.COLON)) {
                int i = 1;
                for (i = 1; i < routineId.nChildren() - 1; i++) {
                    if (routineId.child(i).nChildren() > 2) {
                        // array parameter
                        // else do nothing since by default it't 0
                        numOfD[i - 1] = routineId.child(i).nChildren() - 2;
                    }
                    para[i - 1] = getTypeNumber(routineId.child(i));
                    rLabel += tokenFor(routineId.child(i)).getLexeme();
                    rLabel += "-";
                // r.addParaName(tokenFor(node.child(i).child(0)).getLexeme());
                }
                numberOfPara = i - 1;
            // node.getBinding().setParameterList(para, i-1);
            } else {
                int i = 2;
                for (i = 2; i < routineId.nChildren() - 1; i++) {
                    if (routineId.child(i).nChildren() > 2) {
                        // array parameter
                        // else do nothing since by default it't 0
                        numOfD[i - 2] = routineId.child(i).nChildren() - 2;
                    }
                    para[i - 2] = getTypeNumber(routineId.child(i));
                    rLabel += tokenFor(routineId.child(i)).getLexeme();
                    rLabel += "-";
                // r.addParaName(tokenFor(node.child(i).child(0)).getLexeme());
                }
                numberOfPara = i - 2;
            // node.getBinding().setParameterList(para, i-2);
            }
            RoutineInfo r = new RoutineInfo(rLabel);
            r.setRoutineParaList(para);
            r.setRoutineParaNumber(numberOfPara);
            r.setRoutineReturnType(returnType);
            for (int i = 0; i < 100; i++) {
                // set dims
                if (numOfD[i] != 0)
                    r.setRoutinenumOfDims(numOfD[i], i);
            }
            if (routineId.child(0).getSymbol().isPuctuation(PunctuationSymbol.COLON)) {
                int i = 1;
                for (i = 1; i < routineId.nChildren() - 1; i++) {
                    r.addParaName(tokenFor(routineId.child(i).child(0)).getLexeme());
                }
            } else {
                int i = 2;
                for (i = 2; i < routineId.nChildren() - 1; i++) {
                    r.addParaName(tokenFor(routineId.child(i).child(0)).getLexeme());
                }
            }
            if (child.isWalrus())
                r.setToWalrus();
            RoutineTable.installANewRoutine(r, tokenFor(routineId).getLexeme());
        // isInRoutineBlock[this.nowNumOfRoutne] = true;
        }
    }
}
