private void stmtGen(StmtNode node) {
    String label1 = "";
    String label2 = "";
    int locL1 = -1;
    int locL2 = -1;
    if (node != null) {
        if (node instanceof IfNode) {
            SymTable previousTable = this.currentTable;
            SymTable newTable = Tables.lookupSymTable(this.currentTable.getName() + ".if", this.tables);
            if (newTable != null) {
                newTable.setActive(true);
                this.currentTable = newTable;
            }
            if (trace)
                this.codeBody.append(Emit.comment("Inicio de If") + "\n");
            IfNode temp = (IfNode) node;
            if (trace)
                this.codeBody.append(Emit.comment("Prueba de If") + "\n");
            this.codeGen(temp.getChild(IfNode.TEST));
            label1 = this.nextLabel();
            this.codeBody.append(Emit.jmc(false, label1) + "\n");
            if (trace)
                this.codeBody.append(Emit.comment("Cuerpo de If") + "\n");
            this.codeGen(temp.getChild(IfNode.BODY));
            if (temp.getChild(IfNode.ELSE) != null) {
                label2 = this.nextLabel();
                this.codeBody.append(Emit.jmp(label2) + "\n");
            }
            locL1 = Emit.emitLoc();
            this.addLabel(label1, locL1);
            if (temp.getChild(IfNode.ELSE) != null) {
                this.codeGen(temp.getChild(IfNode.ELSE));
                locL2 = Emit.emitLoc();
                this.addLabel(label2, locL2);
            }
            if (trace)
                this.codeBody.append(Emit.comment("Fin de If") + "\n");
            if (newTable != null) {
                newTable.setActive(false);
                this.currentTable = previousTable;
            }
        } else if (node instanceof ElseNode) {
            SymTable previousTable = this.currentTable;
            SymTable newTable = Tables.lookupSymTable(this.currentTable.getName() + ".else", this.tables);
            if (newTable != null) {
                newTable.setActive(true);
                this.currentTable = newTable;
            }
            ElseNode temp = (ElseNode) node;
            if (trace)
                this.codeBody.append(Emit.comment("Cuerpo de Else") + "\n");
            this.codeGen(temp.getChild(ElseNode.BODY));
            if (newTable != null) {
                newTable.setActive(false);
                this.currentTable = previousTable;
            }
        } else if (node instanceof WhileNode) {
            SymTable previousTable = this.currentTable;
            SymTable newTable = Tables.lookupSymTable(this.currentTable.getName() + ".while", this.tables);
            if (newTable != null) {
                newTable.setActive(true);
                this.currentTable = newTable;
            }
            if (trace)
                this.codeBody.append(Emit.comment("Inicio de While") + "\n");
            WhileNode temp = (WhileNode) node;
            label1 = this.nextLabel();
            locL1 = Emit.emitLoc();
            this.addLabel(label1, locL1);
            if (trace)
                this.codeBody.append(Emit.comment("Prueba de While") + "\n");
            this.codeGen(temp.getChild(WhileNode.TEST));
            label2 = this.nextLabel();
            this.codeBody.append(Emit.jmc(false, label2) + "\n");
            if (trace)
                this.codeBody.append(Emit.comment("Cuerpo de While") + "\n");
            this.codeGen(temp.getChild(WhileNode.BODY));
            this.codeBody.append(Emit.jmp(label1) + "\n");
            locL2 = Emit.emitLoc();
            this.addLabel(label2, locL2);
            if (trace)
                this.codeBody.append(Emit.comment("Fin de While") + "\n");
            if (newTable != null) {
                newTable.setActive(false);
                this.currentTable = previousTable;
            }
        } else if (node instanceof ReturnNode) {
            ReturnNode temp = (ReturnNode) node;
            this.codeGen(temp.getChild(ReturnNode.BODY));
        }
    }
}
