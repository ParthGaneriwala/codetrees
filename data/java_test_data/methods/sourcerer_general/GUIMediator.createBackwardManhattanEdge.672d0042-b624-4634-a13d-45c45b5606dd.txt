/**
 */
private EdgeParameters createBackwardManhattanEdge(HashMap<String, Integer> levelNumberVsMinXPos, HashMap<String, Integer> levelNumberVsMaxXPos, HashMap<String, Node> levelNumberVsLeftMostNodeInSubGraph, HashMap<String, Node> levelNumberVsRightMostNodeInSubGraph, Node frontierNodeLeft, Node frontierNodeRight, Node srcNode, BackEdge backEdge) {
    EdgeParameters edgeParameters = new EdgeParameters();
    Vector<Line> lines = new Vector<Line>();
    int srcLevelIndex = backEdge.getSrcLevelIndex();
    BFSLevel srcLevel = levels.elementAt(srcLevelIndex);
    Node destNode = backEdge.getDestNode();
    // Check if the destination node is the left or right child of the
    // source node
    // boolean srcNodeIsToRight = true;
    // Flag to determine if the backward line
    boolean flankLeft = false;
    // should be left or to the right
    DrawingParameters dpSrcNode = nodesVsDrawingParameters.get(srcNode);
    // DrawingParameters dpDestNode =
    // nodesVsDrawingParameters.get(destNode);
    DrawingParameters dpFrontierNodeLeft = nodesVsDrawingParameters.get(frontierNodeLeft);
    DrawingParameters dpFrontierNodeRight = nodesVsDrawingParameters.get(frontierNodeRight);
    int srcNodeXPos = dpSrcNode.getXPosition();
    int frontierNodeLeftXPos = dpFrontierNodeLeft.getXPosition();
    int frontierNodeRightXPos = dpFrontierNodeRight.getXPosition();
    if (!(srcNodeXPos > frontierNodeLeftXPos && srcNodeXPos < frontierNodeRightXPos)) {
        // NOT between frontiers nodes
        if (// Source node directly
        srcNodeXPos == frontierNodeLeftXPos)
            // below left frontier
            // node
            flankLeft = true;
        else if (// Source node
        srcNodeXPos == frontierNodeRightXPos)
            // directly below
            // right frontier
            // node
            flankLeft = false;
        else if (// Source node to
        srcNodeXPos < frontierNodeLeftXPos)
            // the left of the
            // left frontier
            // node
            flankLeft = true;
        else if (srcNodeXPos > frontierNodeRightXPos) {
            // Source node to
            // the right of the
            // right frontier
            // node
            flankLeft = false;
        }
    } else {
        // Source node is between the two frontier nodes
        int distFromLeftFrontierNode = srcNodeXPos - frontierNodeLeftXPos;
        int distFromRightFrontierNode = frontierNodeRightXPos - srcNodeXPos;
        if (distFromLeftFrontierNode < distFromRightFrontierNode)
            flankLeft = true;
    }
    int[] startPoint = createOutLinesFromSource(srcLevel, srcLevelIndex, srcNode, flankLeft, frontierNodeLeft, frontierNodeRight, lines);
    int xPosStart = startPoint[0];
    int yStart = startPoint[1];
    // Iterate through the intervening levels to get the minimum and maximum
    // x positions of
    // the sub-graph
    // Start one level above the source node
    int count = srcLevelIndex - 1;
    // level
    while (true) {
        BFSLevel level = levels.elementAt(count);
        Node borderNode = null;
        // Assume no change in x position
        int xPosStartNew = xPosStart;
        if (flankLeft) {
            Node leftMostNode = levelNumberVsLeftMostNodeInSubGraph.get("" + count);
            borderNode = leftMostNode;
            int minXPosAtLevel = levelNumberVsMinXPos.get("" + count).intValue();
            if (minXPosAtLevel <= xPosStart) {
                int leftOffSet = getEdgeOffsetFromNode(leftMostNode, AdjacentEdge.LEFT);
                xPosStartNew = minXPosAtLevel - leftOffSet;
            } else {
                boolean intersectionFound = false;
                Vector<Node> nodesInLevel = level.getNodes();
                for (int i = 0; i < nodesInLevel.size(); i++) {
                    DrawingParameters dpNd = nodesVsDrawingParameters.get(nodesInLevel.elementAt(i));
                    int xPosOfNode = dpNd.getXPosition();
                    if (xPosOfNode < minXPosAtLevel) {
                        int wd = dpNd.getSize().width;
                        if (xPosStart <= xPosOfNode || (xPosStart >= xPosOfNode && xPosStart <= xPosOfNode + wd)) {
                            intersectionFound = true;
                            break;
                        }
                    }
                }
                if (intersectionFound) {
                    // An intersection was found,
                    // draw a horizontal line to the
                    // right
                    // xPosStartNew = minXPosAtLevel - 5;
                    int leftOffSet = getEdgeOffsetFromNode(leftMostNode, AdjacentEdge.LEFT);
                    xPosStartNew = minXPosAtLevel - leftOffSet;
                }
            }
        } else {
            Node rightMostNode = levelNumberVsRightMostNodeInSubGraph.get("" + count);
            borderNode = rightMostNode;
            int maxXPosAtLevel = levelNumberVsMaxXPos.get("" + count).intValue();
            if (maxXPosAtLevel >= xPosStart) {
                // xPosStartNew = maxXPosAtLevel + 5;
                int rightOffSet = getEdgeOffsetFromNode(rightMostNode, AdjacentEdge.RIGHT);
                xPosStartNew = maxXPosAtLevel + rightOffSet;
            } else {
                boolean intersectionFound = false;
                Vector<Node> nodesInLevel = level.getNodes();
                for (int i = 0; i < nodesInLevel.size(); i++) {
                    DrawingParameters dpNd = nodesVsDrawingParameters.get(nodesInLevel.elementAt(i));
                    int xPosOfNode = dpNd.getXPosition();
                    if (xPosOfNode > maxXPosAtLevel) {
                        if (xPosStart >= xPosOfNode) {
                            intersectionFound = true;
                            break;
                        }
                    }
                }
                if (intersectionFound) {
                    // An intersection was found,
                    // draw a horizontal line to the
                    // left
                    // xPosStartNew = maxXPosAtLevel + 5;
                    int rightOffSet = getEdgeOffsetFromNode(rightMostNode, AdjacentEdge.RIGHT);
                    xPosStartNew = maxXPosAtLevel + rightOffSet;
                }
            }
        }
        // Now set the horizontal line if the x position has changed
        if (xPosStart != xPosStartNew) {
            Line horizontalLine = new Line();
            horizontalLine.setStartPoint(new Point(xPosStart, yStart));
            horizontalLine.setEndPoint(new Point(xPosStartNew, yStart));
            lines.add(horizontalLine);
            // Update the new horizontal
            xPosStart = xPosStartNew;
        // position
        }
        // Set the vertical line
        int yVertDist = getVerticalDistanceForLayer(count);
        int verticalOffset = getEdgeOffsetFromNode(borderNode, AdjacentEdge.TOP);
        int yStartNew = yVertDist - verticalOffset;
        Line verticalLine = new Line();
        verticalLine.setStartPoint(new Point(xPosStart, yStart));
        verticalLine.setEndPoint(new Point(xPosStart, yStartNew));
        lines.add(verticalLine);
        // Update the new vertical position
        yStart = yStartNew;
        count--;
        if (level.containsNode(destNode))
            break;
    }
    // Draw the final lines reaching the destination node
    boolean isDestNodeLeftChild = isLeftChild(srcNode, destNode);
    DrawingParameters dpDest = nodesVsDrawingParameters.get(destNode);
    int xEnd = 0;
    int xPosofDestNode = dpDest.getXPosition();
    if (!isDestNodeLeftChild) {
        xEnd = xPosofDestNode + (int) ((0.75) * (dpDest.getSize().width));
    } else {
        xEnd = xPosofDestNode + (int) ((0.25) * (dpDest.getSize().width));
    }
    Line lastHorizontalLine = new Line();
    lastHorizontalLine.setStartPoint(new Point(xPosStart, yStart));
    lastHorizontalLine.setEndPoint(new Point(xEnd, yStart));
    lines.add(lastHorizontalLine);
    int vertOffset = getEdgeOffsetFromNode(destNode, AdjacentEdge.TOP);
    int yEnd = yStart + vertOffset;
    Line lastVerticalLine = new Line();
    lastVerticalLine.setStartPoint(new Point(xEnd, yStart));
    lastVerticalLine.setEndPoint(new Point(xEnd, yEnd));
    lines.add(lastVerticalLine);
    edgeParameters.setLines(lines);
    edgeParameters.setBackEdge(true);
    Vector<Point[]> triangles = new Vector<Point[]>();
    Point[] trianglePos1 = calculateTrianglePositions(new Point(xEnd, yStart), new Point(xEnd, yEnd), null, destNode);
    triangles.add(trianglePos1);
    edgeParameters.setTriangles(triangles);
    return edgeParameters;
}
