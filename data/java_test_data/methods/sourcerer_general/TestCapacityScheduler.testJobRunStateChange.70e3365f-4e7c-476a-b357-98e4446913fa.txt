public void testJobRunStateChange() throws IOException {
    // start the scheduler
    taskTrackerManager.addQueues(new String[] { "default" });
    resConf = new FakeResourceManagerConf();
    ArrayList<FakeQueueInfo> queues = new ArrayList<FakeQueueInfo>();
    queues.add(new FakeQueueInfo("default", 100.0f, 1, true, 1));
    resConf.setFakeQueues(queues);
    scheduler.setResourceManagerConf(resConf);
    scheduler.start();
    // submit the job
    FakeJobInProgress fjob1 = submitJob(JobStatus.PREP, 1, 0, "default", "user");
    FakeJobInProgress fjob2 = submitJob(JobStatus.PREP, 1, 0, "default", "user");
    // check if the job is in the waiting queue
    assertTrue("Waiting queue doesnt contain queued job", scheduler.jobQueuesManager.getWaitingJobQueue("default").contains(fjob1));
    // change the job priority
    taskTrackerManager.setPriority(fjob2, JobPriority.HIGH);
    // Check if the priority changes are reflected
    JobInProgress firstJob = scheduler.getJobs("default").toArray(new JobInProgress[0])[0];
    assertTrue("Priority change didnt not work as expected", firstJob.getJobID().equals(fjob2.getJobID()));
    // Create an event
    JobChangeEvent event = initTasksAndReportEvent(fjob1);
    // inform the scheduler
    scheduler.jobQueuesManager.jobUpdated(event);
    // check if the job is in the running queue
    assertTrue("Running queue doesnt contain running/inited job", scheduler.jobQueuesManager.getRunningJobQueue("default").contains(fjob1));
    // schedule a task
    List<Task> tasks = scheduler.assignTasks(tracker("tt1"));
    // complete the job
    taskTrackerManager.finishTask("tt1", tasks.get(0).getTaskID().toString(), fjob1);
    // mark the job as complete
    taskTrackerManager.finalizeJob(fjob1);
    // check if the job is removed from the scheduler
    assertFalse("Scheduler contains completed job", scheduler.getJobs("default").contains(fjob1));
}
