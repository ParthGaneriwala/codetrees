public boolean getPenetration(Actor actor, Shape shape, Vector2f result) {
    // start with zero penetration
    result.set(Vector2f.ZERO);
    // check against locations
    Rect bounds = shape.getBounds();
    Vector2f min = bounds.getMinimumExtent(), max = bounds.getMaximumExtent();
    int minx = FloatMath.ifloor(min.x);
    int maxx = FloatMath.ifloor(max.x);
    int miny = FloatMath.ifloor(min.y);
    int maxy = FloatMath.ifloor(max.y);
    for (int yy = miny; yy <= maxy; yy++) {
        for (int xx = minx; xx <= maxx; xx++) {
            if (!actor.canCollide(_collisionFlags.get(xx, yy))) {
                continue;
            }
            float lx = xx, ly = yy, ux = lx + 1f, uy = ly + 1f;
            _quad.getVertex(0).set(lx, ly);
            _quad.getVertex(1).set(ux, ly);
            _quad.getVertex(2).set(ux, uy);
            _quad.getVertex(3).set(lx, uy);
            _quad.getBounds().getMinimumExtent().set(lx, ly);
            _quad.getBounds().getMaximumExtent().set(ux, uy);
            if (_quad.intersects(shape)) {
                _quad.getPenetration(shape, _penetration);
                if (_penetration.lengthSquared() > result.lengthSquared()) {
                    result.set(_penetration);
                }
            }
        }
    }
    // find intersecting elements
    _space.getIntersecting(shape, _intersecting);
    for (int ii = 0, nn = _intersecting.size(); ii < nn; ii++) {
        SpaceElement element = _intersecting.get(ii);
        Entry entry = (Entry) element.getUserObject();
        if (actor.canCollide(entry.getCollisionFlags(_cfgmgr))) {
            ((ShapeElement) element).getWorldShape().getPenetration(shape, _penetration);
            if (_penetration.lengthSquared() > result.lengthSquared()) {
                result.set(_penetration);
            }
        }
    }
    _intersecting.clear();
    // if our vector is non-zero, we penetrated
    return !result.equals(Vector2f.ZERO);
}
