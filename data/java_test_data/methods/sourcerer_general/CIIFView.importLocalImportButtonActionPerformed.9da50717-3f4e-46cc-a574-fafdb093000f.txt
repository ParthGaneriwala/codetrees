private void importLocalImportButtonActionPerformed(java.awt.event.ActionEvent evt) {
    // GEN-FIRST:event_importLocalImportButtonActionPerformed
    File tempFolder = new File(prefs.get("TEMPFOLDER", ""));
    if (!tempFolder.isDirectory() || !tempFolder.canWrite()) {
        String msg = "Temp Directory is invalid or unset.  Please set a valid one from the Options -> Settings menu.";
        importLocalMessageTextArea.append("ERROR: " + msg + "\n");
        javax.swing.JOptionPane.showMessageDialog(CIIFApp.getApplication().getMainFrame(), msg, "Error: Invalid Temp Directory", javax.swing.JOptionPane.ERROR_MESSAGE);
        enableAll();
        openConfigurePane();
        return;
    } else {
        File tempCIIF = new File(prefs.get("TEMPFOLDER", "") + File.separator + "CI-IF");
        tempCIIF.mkdir();
    }
    File spiderRoot = new File(importLocalSourceInput.getText());
    if (!spiderRoot.isDirectory() || !spiderRoot.canRead()) {
        String msg = "Source Folder is invalid or unset.  Please provide a valid one.";
        importLocalMessageTextArea.append("ERROR: " + msg + "\n");
        javax.swing.JOptionPane.showMessageDialog(CIIFApp.getApplication().getMainFrame(), msg, "Error: Invalid Source Folder", javax.swing.JOptionPane.ERROR_MESSAGE);
        enableAll();
        return;
    }
    if (!db.checkDB()) {
        if (!db.loadDB(importLocalImportButton, true)) {
            String msg = "Database Directory is invalid or unset.  Please configure a valid one from the Options -> Settings menu.";
            javax.swing.JOptionPane.showMessageDialog(CIIFApp.getApplication().getMainFrame(), msg, "Error: Invalid Database Directory", javax.swing.JOptionPane.ERROR_MESSAGE);
            openConfigurePane();
            return;
        }
        return;
    }
    javax.swing.JProgressBar importLocalProgressBar = new javax.swing.JProgressBar(0, 100);
    importLocalProgressBar.setValue(0);
    importLocalProgressBar.setStringPainted(true);
    importLocalProgressBar.setIndeterminate(true);
    importLocalProgressBar.setString("Indexing...");
    importLocalProgressBar.setVisible(false);
    importLocalProgressBar.setVisible(true);
    configurePane.setVisible(false);
    disableAll();
    importImageFrame.setEnabled(true);
    importImageFrame.setLayout(new BorderLayout());
    importImageFrame.add(importImageDisplay, BorderLayout.SOUTH);
    importImagePreviewNameLabel.setText(importLocalSourceInput.getText());
    importProgressPanel.setLayout(new BorderLayout());
    importProgressPanel.add(importLocalProgressBar, BorderLayout.SOUTH);
    importProgressPanel.revalidate();
    importCancelButton.setEnabled(true);
    importCancelButton.setVisible(true);
    CIIFImportLocalTaskListener listener = new CIIFImportLocalTaskListener();
    importTask = new CIIFImportLocalTask(this, listener, spiderRoot.getAbsolutePath(), importLocalProgressBar, importLocalRecursiveYes.isSelected(), importLocalImportGroupInput.getText(), db);
    listener.setPBar(importLocalProgressBar);
    importTask.addPropertyChangeListener(listener);
    importTask.execute();
}
