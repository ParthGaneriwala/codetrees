public String doView(RenderRequest request, RenderResponse response) throws Exception {
    // The JSP to show upon success
    String defaultView = VIEW_PAGE;
    // Determine the project container to use
    Project project = findProject(request);
    request.setAttribute(PROJECT, project);
    User user = getUser(request);
    // Set global preferences
    request.setAttribute(TITLE, request.getPreferences().getValue(PREF_TITLE, null));
    // Determine if the invites can be shown to the current user
    if (ProjectUtils.hasAccess(project.getId(), user, "project-team-edit")) {
        String approve = request.getParameter("approve");
        // Determine the database connection to use
        Connection db = useConnection(request);
        if (StringUtils.hasText(approve)) {
            String teamMemberId = request.getParameter("teamMemberId");
            TeamMember teamMember = new TeamMember(db, Integer.parseInt(teamMemberId));
            TeamMember prevMember = new TeamMember(db, Integer.parseInt(teamMemberId));
            int requestingUserId = teamMember.getUserId();
            if ("true".equals(approve)) {
                // Change status of team member
                teamMember.setStatus(TeamMember.STATUS_ADDED);
                teamMember.setModifiedBy(user.getId());
                teamMember.update(db);
                PortalUtils.processUpdateHook(request, prevMember, teamMember);
                if (project.getProfile() && user.getId() == project.getOwner()) {
                    // Reciprocate as it is request to become a friend of a user profile
                    Project requestingUserProfile = (UserUtils.loadUser(requestingUserId)).getProfileProject();
                    TeamMember reciprocatingTeamMember = null;
                    // Determine if the reciprocal already exists, then update if necessary
                    if (requestingUserProfile.getTeam().hasUserId(user.getId())) {
                        reciprocatingTeamMember = requestingUserProfile.getTeam().getTeamMember(user.getId());
                        if (reciprocatingTeamMember.getStatus() == TeamMember.STATUS_ADDED) {
                        // DO Nothing
                        } else {
                            reciprocatingTeamMember.setStatus(TeamMember.STATUS_ADDED);
                            reciprocatingTeamMember.setUserLevel(UserUtils.getUserLevel(TeamMember.MEMBER));
                            reciprocatingTeamMember.update(db);
                        }
                    } else {
                        // Reciprocal does not exist, therefore create one
                        reciprocatingTeamMember = new TeamMember();
                        reciprocatingTeamMember.setProjectId(requestingUserProfile.getId());
                        reciprocatingTeamMember.setUserId(user.getId());
                        reciprocatingTeamMember.setStatus(TeamMember.STATUS_ADDED);
                        reciprocatingTeamMember.setUserLevel(UserUtils.getUserLevel(TeamMember.MEMBER));
                        reciprocatingTeamMember.setEnteredBy(requestingUserId);
                        reciprocatingTeamMember.setModifiedBy(requestingUserId);
                        reciprocatingTeamMember.insert(db);
                    }
                }
            } else {
                teamMember.setStatus(TeamMember.STATUS_REFUSED);
                if (project.getProfile() && user.getId() == project.getOwner()) {
                    // Remove team member if request to become a friend of a user profile is denied
                    teamMember.delete(db);
                } else {
                    // Change user status to refused
                    teamMember.update(db);
                }
                PortalUtils.processUpdateHook(request, prevMember, teamMember);
            }
            response.setContentType("text/html");
            PrintWriter out = response.getWriter();
            out.println("");
            out.flush();
            defaultView = null;
        } else {
            // Retrieve the membership requests for the current user
            TeamMemberList teamMemberList = new TeamMemberList();
            teamMemberList.setProjectId(project.getId());
            teamMemberList.setStatus(TeamMember.STATUS_JOINED_NEEDS_APPROVAL);
            teamMemberList.buildList(db);
            if (teamMemberList.size() == 0) {
                defaultView = null;
            }
            request.setAttribute(MEMBER_REQUESTS, teamMemberList);
        }
        // JSP view
        return defaultView;
    }
    return null;
}
