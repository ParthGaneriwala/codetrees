/**
 * Calculates the preferred or minimum size for the method
 * calculateLayoutSize(Container container, double typeOfSize).  This method
 * is passed the preferred/minimum sizes of the components so that the
 * potentially expensive methods getPreferredSize()/getMinimumSize() are not
 * called twice for the same component.
 *
 * @param container      container whose size is being calculated
 * @param z              indicates row or column
 * @param typeOfSize     indicates preferred or minimum
 * @param entryList      list of Entry objects
 * @param prefMinSize    list of preferred or minimum sizes
 *
 * @return a dimension indicating the container's preferred or minimum size
 */
protected int calculateLayoutSize(Container container, int z, double typeOfSize, Entry[] entryList, Dimension[] prefMinSize) {
    // Preferred/minimum size of current component
    Dimension size;
    // Preferred/minimum size of scaled components
    int scaledSize = 0;
    // Temporary variable used to compare sizes
    int temp;
    // Counting variable
    int counter;
    // Get number of crs
    int numCr = crSpec[z].length;
    // Determine percentage of space allocated to fill components.  This is
    // one minus the sum of all scalable components.
    double fillSizeRatio = 1.0;
    int numFillSize = 0;
    for (counter = 0; counter < numCr; counter++) if ((crSpec[z][counter] > 0.0) && (crSpec[z][counter] < 1.0))
        fillSizeRatio -= crSpec[z][counter];
    else if (crSpec[z][counter] == FILL)
        numFillSize++;
    // Adjust fill ratios to reflect number of fill rows/columns
    if (numFillSize > 1)
        fillSizeRatio /= numFillSize;
    // Cap fill ratio bottoms to 0.0
    if (fillSizeRatio < 0.0)
        fillSizeRatio = 0.0;
    // Create array to hold actual sizes in pixels
    crSize[z] = new int[numCr];
    // Assign absolute sizes (must be done before assignPrefMinSize)
    // This is done to calculate absolute cr sizes
    assignAbsoluteSize(z, 0);
    // Assign preferred and minimum sizes (must be done after assignAbsoluteSize)
    // This is done to calculate preferred/minimum cr sizes
    assignPrefMinSize(z, 0, MINIMUM);
    assignPrefMinSize(z, 0, PREFERRED);
    int[] crPrefMin = new int[numCr];
    for (counter = 0; counter < numCr; counter++) if ((crSpec[z][counter] == PREFERRED) || (crSpec[z][counter] == MINIMUM)) {
        crPrefMin[counter] = crSize[z][counter];
    }
    // Find maximum preferred/minimum size of all scaled components
    int numColumn = crSpec[C].length;
    int numRow = crSpec[R].length;
    int numEntry = entryList.length;
    for (int entryCounter = 0; entryCounter < numEntry; entryCounter++) {
        // Get next entry
        Entry entry = entryList[entryCounter];
        // Make sure entry is in valid rows and columns
        if ((entry.cr1[C] < 0) || (entry.cr1[C] >= numColumn) || (entry.cr2[C] >= numColumn) || (entry.cr1[R] < 0) || (entry.cr1[R] >= numRow) || (entry.cr2[R] >= numRow)) {
            // Skip the bad component
            continue;
        }
        // Get preferred/minimum size of current component
        size = prefMinSize[entryCounter];
        // ----------------------------------------------------------------------
        // Calculate portion of component that is not absolutely sized
        int scalableSize = (z == C) ? size.width : size.height;
        for (counter = entry.cr1[z]; counter <= entry.cr2[z]; counter++) if (crSpec[z][counter] >= 1.0)
            scalableSize -= crSpec[z][counter];
        else if ((crSpec[z][counter] == PREFERRED) || (crSpec[z][counter] == MINIMUM)) {
            scalableSize -= crPrefMin[counter];
        }
        // ----------------------------------------------------------------------
        // Determine total percentage of scalable space that the component
        // occupies by adding the relative columns and the fill columns
        double relativeSize = 0.0;
        for (counter = entry.cr1[z]; counter <= entry.cr2[z]; counter++) {
            // Cr is scaled
            if ((crSpec[z][counter] > 0.0) && (crSpec[z][counter] < 1.0))
                // Add scaled size to relativeWidth
                relativeSize += crSpec[z][counter];
            else // Cr is fill
            if ((crSpec[z][counter] == FILL) && (fillSizeRatio != 0.0))
                // Add fill size to relativeWidth
                relativeSize += fillSizeRatio;
        }
        // Determine the total scaled size as estimated by this component
        if (relativeSize == 0)
            temp = 0;
        else
            temp = (int) (scalableSize / relativeSize + 0.5);
        // If the container needs to be bigger, make it so
        if (scaledSize < temp)
            scaledSize = temp;
    }
    // totalSize is the scaledSize plus the sum of all absolute sizes and all
    // preferred sizes
    int totalSize = scaledSize;
    for (counter = 0; counter < numCr; counter++) // Is the current cr an absolute size
    if (crSpec[z][counter] >= 1.0)
        totalSize += (int) (crSpec[z][counter] + 0.5);
    else // Is the current cr a preferred/minimum size
    if ((crSpec[z][counter] == PREFERRED) || (crSpec[z][counter] == MINIMUM)) {
        // Add preferred/minimum width
        totalSize += crPrefMin[counter];
    }
    // Compensate for horizontal and vertical gap
    if (numCr > 0)
        totalSize += ((z == C) ? hGap : vGap) * (numCr - 1);
    return totalSize;
}
