@Override
public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain chain) throws IOException, ServletException {
    HttpServletRequest request = (HttpServletRequest) servletRequest;
    HttpServletResponse response = (HttpServletResponse) servletResponse;
    String authcode = request.getParameter("authcode");
    String sessionKey = request.getParameter("top_session");
    String top_parameters = request.getParameter("top_parameters");
    /**
     * 如果传过来的参数有授权码，则用授权码去换取sessionKey
     */
    if (authcode != null) {
        String url = Config.GET_SESSION_URL + "?authcode=" + authcode;
        response.sendRedirect(url);
        return;
    }
    /**
     * 如果传过来的参数带sessionKey，说明是开放平台回调过来的，
     * 拿到sessionKey，关联用户和该sessionKey，这里使用的是保存在用户cookie中的办法关联。
     */
    if (sessionKey != null) {
        // 关联sessionKey
        Cookie cookie = new Cookie("sessionKey", sessionKey);
        response.addCookie(cookie);
        // 记录最后访问时间
        response.addCookie(new Cookie("lastVisit", String.valueOf(System.currentTimeMillis())));
        request.setAttribute("sessionKey", sessionKey);
        // 授权认证通过，跳转到接下来的页面
        response.sendRedirect("index.html");
        return;
    } else {
        /**
         * 参数中不带sessionKey，那么去查看用户的cookie，看是否已经授权过了
         */
        Cookie[] cookies = request.getCookies();
        // 是否超时
        boolean isOutOfTime = false;
        if (cookies != null) {
            for (int i = 0; i < cookies.length; i++) {
                Cookie cookie = cookies[i];
                if (cookie.getName().equals("sessionKey")) {
                    request.setAttribute("sessionKey", cookie.getValue());
                } else if (cookie.getName().equals("lastVisit")) {
                    // 检查是否sessionKey是否超时
                    if (System.currentTimeMillis() - Long.parseLong(cookie.getValue()) > INSENSITIVE_TIME) {
                        // 设置超时表示
                        isOutOfTime = true;
                        cookie.setMaxAge(0);
                        response.addCookie(cookie);
                    }
                }
            }
        }
        /**
         * 如果传过来的参数带top_parameters，说明是开放平台回调过来的，
         * 拿到top_parameters，关联用户和该top_parameters，这里使用的是保存在用户cookie中的办法关联。
         */
        if (top_parameters != null) {
            String taoNick = TaoUtil.GetNick(top_parameters);
            if (taoNick != null) {
                Cookie cookie = new Cookie("taoNick", taoNick);
                response.addCookie(cookie);
                // 记录最后访问时间
                response.addCookie(new Cookie("lastVisit", String.valueOf(System.currentTimeMillis())));
                request.setAttribute("taoNick", taoNick);
            }
        }
        /**
         * 如果没有授权过，或者sessionKey超时失效，跳转到授权页面
         */
        if (request.getAttribute("sessionKey") == null || isOutOfTime) {
            if (cookies != null) {
                for (int i = 0; i < cookies.length; i++) {
                    Cookie cookie = cookies[i];
                    if (cookie.getName().equals("taoNick")) {
                        cookie.setMaxAge(0);
                        response.addCookie(cookie);
                    }
                }
            }
            request.setAttribute("appKey", Config.appKey);
            RequestDispatcher rd = request.getRequestDispatcher("login.jsp");
            rd.forward(request, response);
            return;
        } else {
            // 不要忘记随时记录最后访问时间，以判断sessionKey是否超时
            response.addCookie(new Cookie("lastVisit", String.valueOf(System.currentTimeMillis())));
        }
    }
    try {
        chain.doFilter(request, response);
    } catch (Exception e) {
        /**
         * 你的错误处理，这边只是打印出来
         */
        e.printStackTrace();
        response.sendRedirect("error.jsp");
    }
}
