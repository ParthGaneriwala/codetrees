static void testMarotest(Connection cConnection, boolean persistent) {
    Statement sStatement = null;
    ResultSet r;
    String s = "";
    long start;
    boolean bDropError = false;
    String name = persistent ? "Persistent" : "Memory";
    print(name + " Marotest");
    try {
        sStatement = cConnection.createStatement();
    } catch (Exception e) {
        e.printStackTrace();
        print("Marotest init error: " + e.getMessage());
    }
    try {
        // test duplicate keys & small transaction rollback
        s = "CREATE TABLE marotest (id int PRIMARY KEY, dat int);" + "INSERT INTO marotest VALUES (1,0);" + "INSERT INTO marotest VALUES (2,0);" + "INSERT INTO marotest VALUES (2,0);";
        try {
            sStatement.execute(s);
            s = "";
        } catch (Exception e) {
        }
        if (s.equals("")) {
            throw new Exception("Duplicate key gave no error on insert");
        }
        try {
            s = "UPDATE marotest SET id=1, dat=-1 WHERE dat=0";
            sStatement.execute(s);
            s = "";
        } catch (Exception e) {
        }
        if (s.equals("")) {
            throw new Exception("Duplicate key gave no error on update");
        }
        int count = 0;
        s = "SELECT *, id as marotest_id FROM marotest";
        r = sStatement.executeQuery(s);
        while (r.next()) {
            r.getFloat(1);
            r.getString("ID");
            r.getInt("DAT");
            r.getInt("MAROTEST_ID");
            if (r.getShort("DAT") != 0) {
                throw new Exception("Bad update worked");
            }
            r.getLong("DAT");
            r.getString(2);
            r.getObject("ID");
            r.clearWarnings();
            try {
                // this must throw an error
                r.getTimestamp("Timestamp?");
                count = 99;
            } catch (Exception e) {
            }
            count++;
        }
        r.close();
        if (count != 2) {
            throw new Exception("Should have 2 but has " + count + " rows");
        }
        // test database meta data
        DatabaseMetaData dbMeta = cConnection.getMetaData();
        r = dbMeta.getColumns(null, "DBO", "MAROTEST", "%");
        while (r.next()) {
            // COLUMN_NAME
            s = r.getString(4).trim();
            // DATA_TYPE
            int i = r.getInt(5);
            s += i + r.getString("TYPE_NAME");
            // COLUMN_SIZE
            i = r.getInt(7);
            // "Decimal_Digits"
            i = r.getInt(9);
            // NULLABLE
            i = r.getInt(11);
            s = s.toUpperCase();
            if (!s.equals("ID4INTEGER") && !s.equals("DAT4INTEGER")) {
                throw new Exception("Wrong database meta data");
            }
        }
        s = "DROP TABLE marotest";
        sStatement.execute(s);
        sStatement.close();
    } catch (Exception e) {
        print("");
        print("Marotest error: " + e);
        print("with SQL command: " + s);
        e.printStackTrace();
    }
}
