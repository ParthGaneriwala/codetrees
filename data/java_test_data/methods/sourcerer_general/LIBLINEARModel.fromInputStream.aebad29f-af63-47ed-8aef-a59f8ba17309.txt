public static LIBLINEARModel fromInputStream(InputStream modelStream) throws IOException {
    LIBLINEARModel model = new LIBLINEARModel();
    BufferedReader in = new BufferedReader(new InputStreamReader(modelStream));
    String buffer;
    String[] fields;
    // solver_type
    buffer = in.readLine();
    // nr_class
    buffer = in.readLine();
    model.numberOfClasses = Integer.valueOf(buffer.split(" ")[1]);
    if (model.numberOfClasses == 2)
        model.numberOfClassifiers = 1;
    else
        model.numberOfClassifiers = model.numberOfClasses;
    model.classifiers = new Classifier[model.numberOfClassifiers];
    for (int i = 0; i < model.numberOfClassifiers; i++) model.classifiers[i] = new Classifier();
    // label
    buffer = in.readLine();
    fields = buffer.split(" ");
    for (int i = 0; i < model.numberOfClassifiers; i++) model.classifiers[i].label = Integer.valueOf(fields[i + 1]);
    if (model.numberOfClasses == 2)
        model.fallbackLabel = Integer.valueOf(fields[2]);
    // nr_feature
    buffer = in.readLine();
    int numberOfFeatures = Integer.valueOf(buffer.split(" ")[1]);
    // bias
    buffer = in.readLine();
    double bias = Double.valueOf(buffer.split(" ")[1]);
    // w
    buffer = in.readLine();
    for (int i = 0; i < numberOfFeatures; i++) {
        buffer = in.readLine();
        fields = buffer.trim().split(" ");
        for (int j = 0; j < model.numberOfClassifiers; j++) {
            try {
                model.classifiers[j].weightVector.set(i + 1, Double.valueOf(fields[j]));
            } catch (InvalidFeatureVectorValueException e) {
                throw new IOException(e);
            }
        }
    }
    if (bias >= 0) {
        buffer = in.readLine();
        fields = buffer.trim().split(" ");
        for (int j = 0; j < model.numberOfClassifiers; j++) model.classifiers[j].bias = Double.valueOf(fields[j]) * bias;
    }
    in.close();
    return model;
}
