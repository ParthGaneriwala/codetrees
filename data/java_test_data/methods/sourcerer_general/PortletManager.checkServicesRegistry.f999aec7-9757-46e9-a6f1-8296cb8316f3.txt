private static synchronized boolean checkServicesRegistry(ServletContext context, ApplicationPrefs prefs) {
    if (!prefs.has("CONCURSIVE_SERVICES.SERVER")) {
        context.setAttribute("isConsumerRegistered", "false");
        return false;
    }
    boolean isConsumerRegistered = StringUtils.isTrue((String) context.getAttribute("isConsumerRegistered"));
    if (!isConsumerRegistered) {
        // load the WSRP producer information
        try {
            String wsrpServer = prefs.get(ApplicationPrefs.CONCURSIVE_SERVICES_SERVER);
            String markupURL = wsrpServer + "/services/WSRPBaseService";
            String serviceDescriptionURL = wsrpServer + "/services/WSRPServiceDescriptionService";
            String registrationURL = wsrpServer + "/services/WSRPRegistrationService";
            String portletManagementURL = wsrpServer + "/services/WSRPPortletManagementService";
            String consumerName = prefs.get(ApplicationPrefs.CONCURSIVE_SERVICES_ID);
            String consumerCode = prefs.get(ApplicationPrefs.CONCURSIVE_SERVICES_KEY);
            String consumerAgent = ApplicationVersion.TITLE + " " + ApplicationVersion.VERSION;
            ProducerImpl producer = new ProducerImpl(PortletManager.CONCURSIVE_WSRP_PRODUCER_ID, markupURL, serviceDescriptionURL);
            // ID and misc info
            producer.setID(PortletManager.CONCURSIVE_WSRP_PRODUCER_ID);
            // WSRP registration interface
            producer.setRegistrationInterfaceEndpoint(registrationURL);
            // WSRP portlet management interface
            producer.setPortletManagementInterfaceEndpoint(portletManagementURL);
            // Registration
            RegistrationData registrationData = new RegistrationData();
            registrationData.setConsumerName(consumerName);
            registrationData.setConsumerAgent(consumerAgent);
            registrationData.setRegistrationProperties(new Property[2]);
            // Send the services key as a registration property; Server will authorize by enforcing a valid key
            Property key = new Property();
            key.setName(ApplicationPrefs.CONCURSIVE_SERVICES_KEY);
            key.setStringValue(consumerCode);
            // Send the services key as a registration property; Server will authorize by enforcing a valid key
            Property sessions = new Property();
            sessions.setName(ApplicationPrefs.CONSUMER_SESSION_SUPPORT);
            sessions.setStringValue("true");
            registrationData.setRegistrationProperties(0, key);
            registrationData.setRegistrationProperties(1, sessions);
            // producer.setRegistrationData(registrationData);
            // Register the consumer with the remote producer
            LOG.info("Registering ConcourseConnect consumer with remote producer <" + wsrpServer + ">: " + producer.getID());
            producer.register(registrationData);
            ProducerRegistry producerRegistry = ProducerRegistryImpl.getInstance();
            producerRegistry.addProducer(producer);
            isConsumerRegistered = true;
            context.setAttribute("isConsumerRegistered", "true");
        } catch (WSRPException e) {
            isConsumerRegistered = false;
            LOG.error("Unable to register the consumer with the remote WSRP producer");
            context.setAttribute("isConsumerRegistered", "false");
        }
    }
    return isConsumerRegistered;
}
