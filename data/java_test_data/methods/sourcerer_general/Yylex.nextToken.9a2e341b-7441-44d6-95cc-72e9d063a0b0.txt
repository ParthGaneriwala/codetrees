public java_cup.runtime.Symbol nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;
    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;
    char[] zzCMapL = ZZ_CMAP;
    int[] zzTransL = ZZ_TRANS;
    int[] zzRowMapL = ZZ_ROWMAP;
    int[] zzAttrL = ZZ_ATTRIBUTE;
    while (true) {
        zzMarkedPosL = zzMarkedPos;
        yychar += zzMarkedPosL - zzStartRead;
        zzAction = -1;
        zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
        zzState = ZZ_LEXSTATE[zzLexicalState];
        zzForAction: {
            while (true) {
                if (zzCurrentPosL < zzEndReadL)
                    zzInput = zzBufferL[zzCurrentPosL++];
                else if (zzAtEOF) {
                    zzInput = YYEOF;
                    break zzForAction;
                } else {
                    // store back cached positions
                    zzCurrentPos = zzCurrentPosL;
                    zzMarkedPos = zzMarkedPosL;
                    boolean eof = zzRefill();
                    // get translated positions and possibly new buffer
                    zzCurrentPosL = zzCurrentPos;
                    zzMarkedPosL = zzMarkedPos;
                    zzBufferL = zzBuffer;
                    zzEndReadL = zzEndRead;
                    if (eof) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        zzInput = zzBufferL[zzCurrentPosL++];
                    }
                }
                int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
                if (zzNext == -1)
                    break zzForAction;
                zzState = zzNext;
                int zzAttributes = zzAttrL[zzState];
                if ((zzAttributes & 1) == 1) {
                    zzAction = zzState;
                    zzMarkedPosL = zzCurrentPosL;
                    if ((zzAttributes & 8) == 8)
                        break zzForAction;
                }
            }
        }
        // store back cached position
        zzMarkedPos = zzMarkedPosL;
        switch(zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
            case 30:
                {
                    err("\\dont match");
                }
            case 63:
                break;
            case 58:
                {
                    return tok(sym.error, null);
                }
            case 64:
                break;
            case 7:
                {
                    return tok(sym.COMMA, null);
                }
            case 65:
                break;
            case 39:
                {
                    return tok(sym.GE, null);
                }
            case 66:
                break;
            case 16:
                {
                    return tok(sym.DOT, null);
                }
            case 67:
                break;
            case 17:
                {
                    return tok(sym.LPAREN, null);
                }
            case 68:
                break;
            case 22:
                {
                    return tok(sym.RBRACE, null);
                }
            case 69:
                break;
            case 9:
                {
                    return tok(sym.COLON, null);
                }
            case 70:
                break;
            case 13:
                {
                    return tok(sym.EQ, null);
                }
            case 71:
                break;
            case 28:
                {
                    yybegin(YYINITIAL);
                    System.out.println(string);
                    return tok(sym.STRING, string.toString());
                }
            case 72:
                break;
            case 23:
                {
                    return tok(sym.PLUS, null);
                }
            case 73:
                break;
            case 4:
                {
                    string.setLength(0);
                    yybegin(STRING);
                }
            case 74:
                break;
            case 42:
                {
                    return tok(sym.LE, null);
                }
            case 75:
                break;
            case 62:
                {
                    return tok(sym.FUNCTION, null);
                }
            case 76:
                break;
            case 45:
                {
                    string.append('\t');
                }
            case 77:
                break;
            case 60:
                {
                    return tok(sym.WHILE, null);
                }
            case 78:
                break;
            case 8:
                {
                    return tok(sym.SEMICOLON, null);
                }
            case 79:
                break;
            case 61:
                {
                    return tok(sym.BREAK, null);
                }
            case 80:
                break;
            case 11:
                {
                    return tok(sym.GT, null);
                }
            case 81:
                break;
            case 15:
                {
                    return tok(sym.MINUS, null);
                }
            case 82:
                break;
            case 57:
                {
                    int tmp = Integer.parseInt(yytext().substring(1, 4));
                    if (tmp > 255)
                        err("exceed \\ddd");
                    else
                        string.append((char) tmp);
                }
            case 83:
                break;
            case 18:
                {
                    return tok(sym.RPAREN, null);
                }
            case 84:
                break;
            case 47:
                {
                    count++;
                }
            case 85:
                break;
            case 46:
                {
                    string.append('\\');
                }
            case 86:
                break;
            case 54:
                {
                    return tok(sym.TYPE, null);
                }
            case 87:
                break;
            case 29:
                {
                    yybegin(STRING1);
                }
            case 88:
                break;
            case 56:
                {
                    return tok(sym.ELSE, null);
                }
            case 89:
                break;
            case 14:
                {
                    return tok(sym.LT, null);
                }
            case 90:
                break;
            case 49:
                {
                    return tok(sym.FOR, null);
                }
            case 91:
                break;
            case 35:
                {
                    return tok(sym.TO, null);
                }
            case 92:
                break;
            case 19:
                {
                    return tok(sym.LBRACK, null);
                }
            case 93:
                break;
            case 2:
                {
                    newline();
                }
            case 94:
                break;
            case 32:
                {
                    count = 1;
                    yybegin(COMMENT);
                }
            case 95:
                break;
            case 12:
                {
                    return tok(sym.OR, null);
                }
            case 96:
                break;
            case 59:
                {
                    return tok(sym.ARRAY, null);
                }
            case 97:
                break;
            case 52:
                {
                    return tok(sym.LET, null);
                }
            case 98:
                break;
            case 1:
                {
                    err("illegal charater<" + yytext() + ">!");
                }
            case 99:
                break;
            case 43:
                {
                    string.append('\"');
                }
            case 100:
                break;
            case 40:
                {
                    return tok(sym.DO, null);
                }
            case 101:
                break;
            case 38:
                {
                    return tok(sym.OF, null);
                }
            case 102:
                break;
            case 20:
                {
                    return tok(sym.RBRACK, null);
                }
            case 103:
                break;
            case 33:
                {
                    err("comment symbol don't match!");
                }
            case 104:
                break;
            case 37:
                {
                    return tok(sym.IN, null);
                }
            case 105:
                break;
            case 51:
                {
                    return tok(sym.END, null);
                }
            case 106:
                break;
            case 41:
                {
                    return tok(sym.NEQ, null);
                }
            case 107:
                break;
            case 31:
                {
                    yybegin(STRING);
                }
            case 108:
                break;
            case 48:
                {
                    count--;
                    if (count == 0) {
                        yybegin(YYINITIAL);
                    }
                }
            case 109:
                break;
            case 53:
                {
                    return tok(sym.VAR, null);
                }
            case 110:
                break;
            case 44:
                {
                    string.append('\n');
                }
            case 111:
                break;
            case 26:
                {
                    string.append(yytext());
                }
            case 112:
                break;
            case 24:
                {
                    return tok(sym.AND, null);
                }
            case 113:
                break;
            case 25:
                {
                    return tok(sym.INT, new Integer(yytext()));
                }
            case 114:
                break;
            case 55:
                {
                    return tok(sym.THEN, null);
                }
            case 115:
                break;
            case 34:
                {
                    return tok(sym.ASSIGN, null);
                }
            case 116:
                break;
            case 5:
                {
                    return tok(sym.DIVIDE, null);
                }
            case 117:
                break;
            case 21:
                {
                    return tok(sym.LBRACE, null);
                }
            case 118:
                break;
            case 36:
                {
                    return tok(sym.IF, null);
                }
            case 119:
                break;
            case 6:
                {
                    return tok(sym.TIMES, null);
                }
            case 120:
                break;
            case 50:
                {
                    return tok(sym.NIL, null);
                }
            case 121:
                break;
            case 10:
                {
                    return tok(sym.ID, yytext());
                }
            case 122:
                break;
            case 27:
                {
                    err("String presentation error!");
                }
            case 123:
                break;
            case 3:
                {
                }
            case 124:
                break;
            default:
                if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                    zzAtEOF = true;
                    {
                        {
                            if (yystate() == COMMENT)
                                err("comment symbol don't match");
                            if (yystate() == STRING)
                                err("String presentation error!");
                            if (yystate() == STRING1)
                                err("String presentation error!");
                            return tok(sym.EOF, null);
                        }
                    }
                } else {
                    zzScanError(ZZ_NO_MATCH);
                }
        }
    }
}
