public boolean analyze() {
    /*
    	 * The most important information that we need to deal with is contained in the Dependent-Advice Info...
    	 */
    DAInfo dai = ((HasDAInfo) Main.v().getAbcExtension()).getDependentAdviceInfo();
    /* a tracepattern is essentially a Dependency State Machine;
		 * it combines a state machine with information about the machine's
		 * alphabet
		 */
    Set<TracePattern> tracePatterns = dai.getTracePatterns();
    for (TracePattern tracePattern : tracePatterns) {
        // returns the aspect that declares the pattern
        tracePattern.getContainer();
        // returns the SootClass that implements this aspect
        tracePattern.getContainerClass();
        // returns all symbols in the alphabet that lead into a final state
        tracePattern.getFinalSymbols();
        // returns all variable names that are declared for this trace pattern
        tracePattern.getFormals();
        // returns all symbols in the alphabet that lead out of an initial state
        tracePattern.getInitialSymbols();
        // returns an informal, unqualified name for this trace pattern; may be compiler-generated; should be unique
        tracePattern.getName();
        // returns the state machine for this trace pattern
        tracePattern.getStateMachine();
        // returns the SootMethod that implements the monitoring advice for symbol "foo"
        tracePattern.getSymbolAdviceMethod("foo");
        // returns all declared symbols of this trace pattern
        tracePattern.getSymbols();
        // returns the ordered list of variable names (see getFormals()) that symbol "foo" references
        tracePattern.getVariableOrder("foo");
    }
    // Let's have a look at all reachable shadows in the program... it's as easy as this!
    EnabledShadowSet reachableActiveShadows = dai.getReachableActiveShadows();
    for (Shadow shadow : reachableActiveShadows) {
        System.err.println(shadow);
        // returns the statement that invokes the appropriate advice at the shadow in the woven code
        shadow.getAdviceBodyInvokeStmt();
        // returns the advice that implements the transition for this shadow's symbol
        shadow.getAdviceDecl();
        // returns the formal-parameter names of the variables that the shadow's advice binds
        shadow.getAdviceFormalNames();
        // returns a mapping from formal-parameter names to Soot Locals that bind these parameters
        shadow.getAdviceFormalToSootLocal();
        // returns the set of all Soot Locals that the shadow's advice takes as parameter
        shadow.getBoundSootLocals();
        // returns the SootMethod that contains the shadow
        shadow.getContainer();
        // returns the unique ID of this shadow
        shadow.getID();
        // returns the source code position at which this shadow resides (if available)
        shadow.getPosition();
        // returns the local for formal parameter "x" (see getAdviceFormalToSootLocal())
        shadow.getSootLocalForAdviceFormalName("x");
        // shadow.conjoinResidueWith(rhsResidue);	//conjoins this shadow's residue with another residue; useful e.g. for dynamic instrumentation
        // shadow.disable();							//disables this shadow, setting its residue to NeverMatch and notifying all registered listeners
        shadow.registerListener(new // registers a new listener that is notified when the shadow is disabled;
        ShadowDisabledListener() {

            public void shadowDisabled(Shadow shadow) {
            // EnabledShadowSet is an example of a class that uses this mechanism
            }
        });
    }
    int sizeBefore = reachableActiveShadows.size();
    // nothing to do
    if (sizeBefore == 0)
        return false;
    // An EnabledShadowsSet is a volatile thing. When we disable a shadow...
    reachableActiveShadows.iterator().next().disable();
    // then this automatically removes the shadow from the set!
    assert reachableActiveShadows.size() == sizeBefore - 1;
    /* This allows analyses to automatically take into account disabled shadows when being
		 * re-iterated. To get a copy of the set that stays as it is, produce a snapshot...
		 */
    Set<Shadow> snapshot = reachableActiveShadows.snapshot();
    sizeBefore = snapshot.size();
    // when we disable a shadow here...
    reachableActiveShadows.iterator().next().disable();
    // then the snapshot remains as is
    assert snapshot.size() == sizeBefore;
    // do not reweave immediately
    return false;
}
