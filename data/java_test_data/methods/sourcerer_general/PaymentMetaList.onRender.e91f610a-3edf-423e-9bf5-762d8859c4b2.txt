protected void onRender(Element parent, int index) {
    super.onRender(parent, index);
    // final IShopServiceAsync service = getService();
    // RpcProxy proxy = new RpcProxy() {
    // public void load(Object loadConfig, AsyncCallback callback) {
    // service.getPaymentMetaList((ListLoadConfig) loadConfig, callback);
    // }
    // };
    loader = new MyPagingListService().getLoader(ModelNames.PAYMENT_META);
    // loader
    // loader = new BaseListLoader(proxy);
    loader.setRemoteSort(true);
    // PagingToolBar toolBar = new PagingToolBar(pageSize);
    // toolBar.bind(loader);
    final ListStore<BeanObject> store = new ListStore<BeanObject>(loader);
    store.addStoreListener(new StoreListener<BeanObject>() {

        public void storeUpdate(StoreEvent<BeanObject> se) {
            List<Record> changed = store.getModifiedRecords();
        }
    });
    List<ColumnConfig> columns = new ArrayList<ColumnConfig>();
    final CheckBoxSelectionModel<BeanObject> smRowSelection = new CheckBoxSelectionModel<BeanObject>();
    columns.add(smRowSelection.getColumn());
    columns.add(new ColumnConfig(PaymentConfigMetaForm.ID, Resources.constants.PaymentMetaList_ID(), 50));
    ColumnConfig col = new ColumnConfig(PaymentConfigMetaForm.NAME, Resources.constants.PaymentMetaList_NAME(), 100);
    col.setEditor(new CellEditor(new TextField()));
    columns.add(col);
    columns.add(new ColumnConfig(PaymentConfigMetaForm.DESC, Resources.constants.PaymentMetaList_DESC(), 200));
    columns.add(new ColumnConfig(PaymentConfigMetaForm.PAYFEE, Resources.constants.PaymentMetaList_PAYFEE(), 50));
    columns.add(new ColumnConfig(PaymentConfigMetaForm.ISCOD, Resources.constants.PaymentMetaList_ISCOD(), 50));
    columns.add(new ColumnConfig(PaymentConfigMetaForm.ORDER, Resources.constants.PaymentMetaList_ORDER(), 50));
    ColumnConfig actcol = new ColumnConfig("Action", Resources.constants.PaymentMetaList_ACTION(), 100);
    columns.add(actcol);
    ColumnModel cm = new ColumnModel(columns);
    Grid<BeanObject> grid = new EditorGrid<BeanObject>(store, cm);
    grid.setLoadMask(true);
    grid.setBorders(true);
    grid.setSelectionModel(smRowSelection);
    ActionCellRenderer render = new ActionCellRenderer(grid);
    actcol.setRenderer(render);
    ContentPanel panel = new ContentPanel();
    panel.setFrame(true);
    panel.setCollapsible(true);
    panel.setAnimCollapse(false);
    panel.setButtonAlign(HorizontalAlignment.CENTER);
    panel.setIconStyle("icon-table");
    // panel.setHeading("Paging Grid");
    panel.setLayout(new FitLayout());
    panel.add(grid);
    panel.setSize(900, 350);
    // panel.setBottomComponent(toolBar);
    add(panel);
}
