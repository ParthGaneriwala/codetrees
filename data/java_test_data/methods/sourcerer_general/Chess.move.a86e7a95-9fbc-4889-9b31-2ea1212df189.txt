@Override
public /**
 * If the proposed current position of the piece is valid, and Process Move
 * returns true, validating the intended position, the piece is then cross
 * checked to ensure it is indeed the player's piece before performing the final
 * move. A boolean is produced based on whether the move was performed or not.
 * @param x1    x co-ordinate of the current position of the piece
 * @param y1    y co-ordinate of the current position of the piece
 * @param x2    x co-ordinate of the intended position of the piece
 * @param y2    y co-ordinate of the intended position of the piece
 *
 * @return true = move was valid and the piece has been moved        false = move was invalid and the piece is not moved
 */
boolean move(int x1, int y1, int x2, int y2) {
    boolean enpassantCheck = false, enpassantPawn = false;
    Pawn p = null;
    if (board.getGrid()[x1][y1].getPiece() instanceof Pawn) {
        p = (Pawn) board.getGrid()[x1][y1].getPiece();
        if (!p.isWait() && this.performEnPassant(x1, y1, x2, y2)) {
            this.swapTurn();
            manageState();
            gs.addState(new Chess(this, gs, NULL_VAL, NULL_VAL));
            gs.resetStateIndex();
            setPawnWait();
            return true;
        }
        enpassantPawn = p.isWait();
        enpassantCheck = true;
        setPawnWait();
        p.setWait(false);
    } else {
        setPawnWait();
    }
    if (castling(x1, y1, x2, y2)) {
        this.swapTurn();
        manageState();
        gs.addState(new Chess(this, gs, NULL_VAL, NULL_VAL));
        gs.resetStateIndex();
        return true;
    }
    if (board.getGrid()[x1][y1].isOccupied()) {
        if (this.processMove(x1, y1, x2, y2)) {
            // if (this.player1 == board.getGrid()[x1][y1].getPiece().player1){
            board.getGrid()[x2][y2].setPiece(board.getGrid()[x1][y1].getPiece());
            board.getGrid()[x1][y1].setOccupied(false);
            board.getGrid()[x2][y2].setOccupied(true);
            // case where you put yourself in check
            if ((check().equals("p1_inCheck") && board.getGrid()[x2][y2].getPiece().player) || (check().equals("p2_inCheck") && !board.getGrid()[x2][y2].getPiece().player)) {
                board.getGrid()[x1][y1].setPiece(board.getGrid()[x2][y2].getPiece());
                board.getGrid()[x1][y1].setOccupied(true);
                board.getGrid()[x2][y2].setOccupied(false);
                if (enpassantCheck) {
                    p.setWait(enpassantPawn);
                }
                return false;
            }
            board.getGrid()[x2][y2].getPiece().setHasMoved();
            if (checkPromotion()) {
                ButtonEvent b = new ButtonEvent(x2, y2);
                notifyAllObservers(new ButtonEventBundle(check_Check(), checkPromotion(), b, hasWon(), hasLost(), null, new ButtonEvent(x1, y1), new ButtonEvent(x2, y2)));
                this.swapTurn();
                manageState();
                gs.addState(new Chess(this, gs, NULL_VAL, NULL_VAL));
                gs.resetStateIndex();
                return true;
            }
            notifyAllObservers(new ButtonEventBundle(check_Check(), false, null, hasWon(), hasLost(), null, new ButtonEvent(x1, y1), new ButtonEvent(x2, y2)));
            this.swapTurn();
            manageState();
            gs.addState(new Chess(this, gs, NULL_VAL, NULL_VAL));
            gs.resetStateIndex();
            return true;
        }
    }
    if (enpassantCheck) {
        p.setWait(enpassantPawn);
    }
    return false;
}
