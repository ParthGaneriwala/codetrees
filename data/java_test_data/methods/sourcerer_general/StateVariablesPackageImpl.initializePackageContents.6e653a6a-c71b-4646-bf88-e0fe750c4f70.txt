public void initializePackageContents() {
    if (isInitialized)
        return;
    isInitialized = true;
    // Initialize package
    setName(eNAME);
    setNsPrefix(eNS_PREFIX);
    setNsURI(eNS_URI);
    // Obtain other dependent packages
    DomainPackage theDomainPackage = (DomainPackage) EPackage.Registry.INSTANCE.getEPackage(DomainPackage.eNS_URI);
    // Create type parameters
    // Set bounds for type parameters
    // Add supertypes to classes
    svInjectionEClass.getESuperTypes().add(this.getStateVariable());
    svPowerFlowEClass.getESuperTypes().add(this.getStateVariable());
    svShortCircuitEClass.getESuperTypes().add(this.getStateVariable());
    svShuntCompensatorSectionsEClass.getESuperTypes().add(this.getStateVariable());
    svStatusEClass.getESuperTypes().add(this.getStateVariable());
    svTapStepEClass.getESuperTypes().add(this.getStateVariable());
    svVoltageEClass.getESuperTypes().add(this.getStateVariable());
    // Initialize classes and features; add operations and parameters
    initEClass(stateVariableEClass, StateVariable.class, "StateVariable", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEClass(svInjectionEClass, SvInjection.class, "SvInjection", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getSvInjection_PNetInjection(), theDomainPackage.getActivePower(), null, "pNetInjection", null, 0, 1, SvInjection.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, !IS_ORDERED);
    initEReference(getSvInjection_QNetInjection(), theDomainPackage.getReactivePower(), null, "qNetInjection", null, 0, 1, SvInjection.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, !IS_ORDERED);
    initEClass(svPowerFlowEClass, SvPowerFlow.class, "SvPowerFlow", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getSvPowerFlow_P(), theDomainPackage.getActivePower(), null, "p", null, 0, 1, SvPowerFlow.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, !IS_ORDERED);
    initEReference(getSvPowerFlow_Q(), theDomainPackage.getReactivePower(), null, "q", null, 0, 1, SvPowerFlow.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, !IS_ORDERED);
    initEClass(svShortCircuitEClass, SvShortCircuit.class, "SvShortCircuit", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getSvShortCircuit_R0PerR(), theDomainPackage.getFloat(), null, "r0PerR", null, 0, 1, SvShortCircuit.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, !IS_ORDERED);
    initEReference(getSvShortCircuit_SShortCircuit(), theDomainPackage.getApparentPower(), null, "sShortCircuit", null, 0, 1, SvShortCircuit.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, !IS_ORDERED);
    initEReference(getSvShortCircuit_X0PerX(), theDomainPackage.getFloat(), null, "x0PerX", null, 0, 1, SvShortCircuit.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, !IS_ORDERED);
    initEReference(getSvShortCircuit_XPerR(), theDomainPackage.getFloat(), null, "xPerR", null, 0, 1, SvShortCircuit.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, !IS_ORDERED);
    initEClass(svShuntCompensatorSectionsEClass, SvShuntCompensatorSections.class, "SvShuntCompensatorSections", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getSvShuntCompensatorSections_ContinuousSections(), theDomainPackage.getFloat(), null, "continuousSections", null, 0, 1, SvShuntCompensatorSections.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, !IS_ORDERED);
    initEReference(getSvShuntCompensatorSections_Sections(), theDomainPackage.getInteger(), null, "sections", null, 0, 1, SvShuntCompensatorSections.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, !IS_ORDERED);
    initEClass(svStatusEClass, SvStatus.class, "SvStatus", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getSvStatus_InService(), theDomainPackage.getBoolean(), null, "inService", null, 0, 1, SvStatus.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, !IS_ORDERED);
    initEClass(svTapStepEClass, SvTapStep.class, "SvTapStep", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getSvTapStep_ContinuousPosition(), theDomainPackage.getFloat(), null, "continuousPosition", null, 0, 1, SvTapStep.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, !IS_ORDERED);
    initEReference(getSvTapStep_Position(), theDomainPackage.getInteger(), null, "position", null, 0, 1, SvTapStep.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, !IS_ORDERED);
    initEClass(svVoltageEClass, SvVoltage.class, "SvVoltage", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getSvVoltage_Angle(), theDomainPackage.getAngleRadians(), null, "angle", null, 0, 1, SvVoltage.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, !IS_ORDERED);
    initEReference(getSvVoltage_V(), theDomainPackage.getVoltage(), null, "v", null, 0, 1, SvVoltage.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, !IS_ORDERED);
}
