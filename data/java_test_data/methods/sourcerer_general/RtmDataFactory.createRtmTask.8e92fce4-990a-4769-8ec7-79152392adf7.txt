public static RtmTask createRtmTask(JsonNode node) {
    RtmTask rtmTask = new RtmTask();
    rtmTask.setTaskSeriesId(node.get("id").getTextValue());
    rtmTask.setName(node.get("name").getTextValue());
    rtmTask.setId(node.get("task").get("id").getTextValue());
    rtmTask.setPriority(node.get("task").get("priority").getTextValue());
    String dateString = node.get("task").get("due").getTextValue();
    if (dateString.equals("")) {
        rtmTask.setDueDate(null);
    } else {
        try {
            rtmTask.setDueDate(parseDate(dateString));
        } catch (ParseException e) {
            System.out.println(dateString);
            e.printStackTrace();
        }
    }
    if (node.get("task").get("completed").getTextValue().equals("")) {
        rtmTask.setCompleted(false);
    } else {
        rtmTask.setCompleted(true);
    }
    JsonNode tagsArray = node.get("tags").get("tag");
    if (tagsArray != null) {
        Vector<String> tagsVector = new Vector<String>();
        for (int i = 0; i < tagsArray.size(); i++) {
            tagsVector.add(tagsArray.get(i).getTextValue());
        }
        rtmTask.setTags(tagsVector);
    }
    JsonNode notesArray = node.get("notes").get("note");
    if (notesArray != null) {
        NotesVector notesVector = new NotesVector();
        if (notesArray.isArray()) {
            for (int i = 0; i < notesArray.size(); i++) {
                notesVector.add(createNote(notesArray.get(i)));
            }
        } else {
            notesVector.add(createNote(notesArray));
        }
        rtmTask.setNotes(notesVector);
    }
    return rtmTask;
}
