private void exp2Internal(long extra) {
    if ((this.exponent < 0 && this.mantissa != 0))
        return;
    if ((this.exponent < 0 && this.mantissa == 0)) {
        if ((this.sign != 0))
            makeZero(0);
        return;
    }
    if ((this.exponent == 0 && this.mantissa == 0)) {
        {
            this.mantissa = ONE.mantissa;
            this.exponent = ONE.exponent;
            this.sign = ONE.sign;
        }
        ;
        return;
    }
    // Extract integer part
    {
        expTmp.mantissa = this.mantissa;
        expTmp.exponent = this.exponent;
        expTmp.sign = this.sign;
    }
    ;
    expTmp.add(HALF);
    expTmp.floor();
    int exp = expTmp.toInteger();
    if (exp > 0x40000000) {
        makeInfinity(sign);
        return;
    }
    if (exp < -0x40000000) {
        makeZero(sign);
        return;
    }
    // Subtract integer part (this is where we need the extra accuracy)
    expTmp.neg();
    add128(extra, expTmp, 0);
    /*
         * Adapted from:
         * Cephes Math Library Release 2.7:  May, 1998
         * Copyright 1984, 1991, 1998 by Stephen L. Moshier
         *
         * exp2l.c
         *
         * long double exp2l(long double x);
         */
    // Now -0.5<X<0.5
    // rational approximation
    // exp2(x) = 1 + 2x P(x�)/(Q(x�) - x P(x�))
    {
        expTmp2.mantissa = this.mantissa;
        expTmp2.exponent = this.exponent;
        expTmp2.sign = this.sign;
    }
    ;
    expTmp2.sqr();
    // P(x�)
    // 60.614853552242266094567
    {
        expTmp.sign = (byte) 0;
        expTmp.exponent = 0x40000005;
        expTmp.mantissa = 0x793ace15b56b7fecL;
    }
    // 60.614853552242266094567
    ;
    expTmp.mul(expTmp2);
    // 30286.971917562792508623
    {
        expTmp3.sign = (byte) 0;
        expTmp3.exponent = 0x4000000e;
        expTmp3.mantissa = 0x764ef8cf96e29a13L;
    }
    // 30286.971917562792508623
    ;
    expTmp.add(expTmp3);
    expTmp.mul(expTmp2);
    // 2080384.3631901852422887
    {
        expTmp3.sign = (byte) 0;
        expTmp3.exponent = 0x40000014;
        expTmp3.mantissa = 0x7efa0173e820bf60L;
    }
    // 2080384.3631901852422887
    ;
    expTmp.add(expTmp3);
    mul(expTmp);
    // Q(x�)
    expTmp.assign(expTmp2);
    // 1749.2876999891839021063
    {
        expTmp3.sign = (byte) 0;
        expTmp3.exponent = 0x4000000a;
        expTmp3.mantissa = 0x6d549a6b4dc9abadL;
    }
    // 1749.2876999891839021063
    ;
    expTmp.add(expTmp3);
    expTmp.mul(expTmp2);
    // 327725.15434906797273099
    {
        expTmp3.sign = (byte) 0;
        expTmp3.exponent = 0x40000012;
        expTmp3.mantissa = 0x5002d27836ba71c6L;
    }
    // 327725.15434906797273099
    ;
    expTmp.add(expTmp3);
    expTmp.mul(expTmp2);
    // 6002720.4078348487957118
    {
        expTmp3.sign = (byte) 0;
        expTmp3.exponent = 0x40000016;
        expTmp3.mantissa = 0x5b98206867dd59bfL;
    }
    // 6002720.4078348487957118
    ;
    expTmp.add(expTmp3);
    expTmp.sub(this);
    div(expTmp);
    scalbn(1);
    add(ONE);
    // Scale by power of 2
    scalbn(exp);
}
