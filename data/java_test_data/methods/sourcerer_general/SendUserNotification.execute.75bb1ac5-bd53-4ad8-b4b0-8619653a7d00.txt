public boolean execute(ComponentContext context) {
    Connection db = null;
    // The recipients to send email to
    ArrayList<Integer> users = new ArrayList<Integer>();
    ArrayList<String> emails = new ArrayList<String>();
    try {
        // Use this database connection sparingly
        db = getConnection(context);
        // Add admins
        boolean addAdmins = "true".equals(context.getParameter(NOTIFY_ADMINS));
        if (addAdmins) {
            UserList userList = new UserList();
            userList.setAdmin(Constants.TRUE);
            userList.setValidUser(Constants.TRUE);
            userList.buildList(db);
            for (User user : userList) {
                if (StringUtils.hasText(user.getEmail())) {
                    if (user.getAccessAdmin()) {
                        users.add(user.getId());
                    } else {
                        LOG.error("A non-admin user was almost added to SendUserNotification");
                    }
                }
            }
            if (LOG.isDebugEnabled() && userList.size() == 0) {
                LOG.warn("No admins found");
            }
        }
        // Add project leads
        Project thisProject = (Project) context.getAttribute("project");
        boolean addProjectLeads = "true".equals(context.getParameter(NOTIFY_PROJECT_LEADS));
        if (addProjectLeads && thisProject != null) {
            TeamMemberList members = new TeamMemberList();
            members.setProjectId(thisProject.getId());
            members.setMinimumRoleLevel(TeamMember.MANAGER);
            members.buildList(db);
            for (TeamMember member : members) {
                if (!users.contains(member.getUserId())) {
                    users.add(member.getUserId());
                }
            }
        }
        // Add forum contacts
        boolean addForumContacts = "true".equals(context.getParameter(NOTIFY_FORUM_CONTACTS));
        if (addForumContacts && thisProject != null) {
            // Go through the users of a project and see if they have access to discussions
            TeamMemberList teamMembers = new TeamMemberList();
            teamMembers.setProjectId(thisProject.getId());
            teamMembers.buildList(db);
            for (TeamMember member : teamMembers) {
                User thisUser = UserUtils.loadUser(member.getUserId());
                if (thisUser.getWatchForums() && ProjectUtils.hasAccess(thisProject.getId(), thisUser, "project-discussion-topics-view")) {
                    users.add(thisUser.getId());
                }
            }
        }
        // Add ticket contact list
        TicketContactList ticketContactList = (TicketContactList) context.getAttribute(LoadTicketDetails.CONTACT_LIST);
        boolean addTicketContactList = "true".equals(context.getParameter(NOTIFY_TICKET_CONTACT_LIST));
        if (addTicketContactList && ticketContactList != null) {
            Iterator i = ticketContactList.iterator();
            while (i.hasNext()) {
                TicketContact contact = (TicketContact) i.next();
                contact.buildEmailAddress(db);
                if (contact.getUserId() > -1) {
                    if (!users.contains(contact.getUserId())) {
                        users.add(contact.getUserId());
                    }
                } else if (StringUtils.hasText(contact.getContactEmail())) {
                    emails.add(contact.getContactEmail());
                }
            }
        }
        // Add user to notify
        int userToNotify = context.getParameterAsInt(USER_TO_NOTIFY);
        if (userToNotify > -1) {
            if (!users.contains(userToNotify)) {
                users.add(userToNotify);
            }
        }
        // Go through users to
        String includeList = context.getParameter(NOTIFICATION_USERS_TO);
        if (includeList != null) {
            StringTokenizer st = new StringTokenizer(includeList, ",");
            while (st.hasMoreTokens()) {
                Integer id = Integer.parseInt(st.nextToken().trim());
                if (!users.contains(id)) {
                    users.add(id);
                }
            }
        }
        // Go through userIds set as attributes
        includeList = (String) context.getAttribute(USERS_TO_IDS);
        if (includeList != null) {
            StringTokenizer st = new StringTokenizer(includeList, ",");
            while (st.hasMoreTokens()) {
                Integer id = Integer.parseInt(st.nextToken().trim());
                if (!users.contains(id)) {
                    users.add(id);
                }
            }
        }
        // Go through email to
        String emailValues = context.getParameter(EMAIL_TO);
        if (emailValues != null) {
            StringTokenizer st = new StringTokenizer(emailValues, ",");
            while (st.hasMoreTokens()) {
                String emailAddress = st.nextToken().trim();
                if (!emails.contains(emailAddress)) {
                    emails.add(emailAddress);
                }
            }
        }
        // Go through exclude list
        String excludeList = context.getParameter(EXCLUDE_LIST);
        if (excludeList != null) {
            StringTokenizer st = new StringTokenizer(excludeList, ",");
            while (st.hasMoreTokens()) {
                String id = st.nextToken().trim();
                users.remove(new Integer(Integer.parseInt(id)));
            }
        }
    } catch (Exception e) {
        LOG.error("build email list", e);
    } finally {
        freeConnection(context, db);
    }
    // NOTE: Now that the database connections are done, send the emails
    try {
        sendEmails(context, users, emails);
        return true;
    } catch (Exception e) {
        LOG.error("send emails", e);
    }
    return false;
}
