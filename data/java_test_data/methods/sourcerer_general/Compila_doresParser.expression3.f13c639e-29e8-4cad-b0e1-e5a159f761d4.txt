// $ANTLR start "expression3"
public final Compila_doresParser.expression3_return expression3() throws RecognitionException {
    Compila_doresParser.expression3_return retval = new Compila_doresParser.expression3_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token set142 = null;
    Compila_doresParser.expression4_return expression4141 = null;
    Compila_doresParser.expression4_return expression4143 = null;
    CommonTree set142_tree = null;
    try {
        // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:227:2: ( expression4 ( ( EQUAL | DIF1 | DIF2 ) expression4 )* )
        // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:227:4: expression4 ( ( EQUAL | DIF1 | DIF2 ) expression4 )*
        {
            root_0 = (CommonTree) adaptor.nil();
            pushFollow(FOLLOW_expression4_in_expression31525);
            expression4141 = expression4();
            state._fsp--;
            adaptor.addChild(root_0, expression4141.getTree());
            // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:227:16: ( ( EQUAL | DIF1 | DIF2 ) expression4 )*
            loop35: do {
                int alt35 = 2;
                int LA35_0 = input.LA(1);
                if (((LA35_0 >= EQUAL && LA35_0 <= DIF2))) {
                    alt35 = 1;
                }
                switch(alt35) {
                    case 1:
                        // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:227:17: ( EQUAL | DIF1 | DIF2 ) expression4
                        {
                            set142 = (Token) input.LT(1);
                            set142 = (Token) input.LT(1);
                            if ((input.LA(1) >= EQUAL && input.LA(1) <= DIF2)) {
                                input.consume();
                                root_0 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(set142), root_0);
                                state.errorRecovery = false;
                            } else {
                                MismatchedSetException mse = new MismatchedSetException(null, input);
                                throw mse;
                            }
                            pushFollow(FOLLOW_expression4_in_expression31541);
                            expression4143 = expression4();
                            state._fsp--;
                            adaptor.addChild(root_0, expression4143.getTree());
                        }
                        break;
                    default:
                        break loop35;
                }
            } while (true);
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
