public boolean startChain() {
    try {
        Properties p = null;
        if (chainInvoke == null) {
            if (p == null)
                p = StaticFactory.getProperties(StaticFactory.getSystemFile());
            String servers = p.getProperty("server-priority");
            String[] server = servers.split(",");
            if (server != null && server.length > 0) {
                String[] app = new String[server.length];
                for (int i = 0; i < server.length; i++) {
                    app[i] = p.getProperty(server[i], "");
                    if (app[i] != null && app[i].length() != 0) {
                        chainInvoke = ChainInvokeFactory.getChainInvoke();
                        break;
                    }
                }
            }
        }
        if (chainInvoke == null) {
            return false;
        } else {
            String tmpChain = chainInvoke.getChains();
            String[] tmpChains = tmpChain.split(",");
            if (tmpChains != null && tmpChains.length > 0) {
                chains.clear();
                for (int i = 0; tmpChains.length > i; i++) {
                    chains.clear();
                    chains.add(new LabelValueBean(tmpChains[i], tmpChains[i]));
                }
            }
        }
        if (chainmsgs == null)
            chainmsgs = new ChainMessages();
        if (chainthread == null) {
            if (p == null)
                p = StaticFactory.getProperties(StaticFactory.getSystemFile());
            chain_group = Integer.parseInt(p.getProperty("chain_group", "3"));
            chain_breath = Integer.parseInt(p.getProperty("chain-breath", "20"));
            chainthread = new ChainThread[chain_group];
            for (int i = 0; i < chain_group; i++) {
                chainthread[i] = new ChainThread(chain_breath);
                // chainthread[i].setAppServer(app);
                // chainthread[i].setPort(socket);
                // chainthread[i].setRetry(Integer.parseInt(p.getProperty("server-retry", "0")));
                Thread thr = new Thread(chainthread[i]);
                thr.start();
            }
        }
        /*
	       else if (!chainthread[0].isRunning())
	       {
	          for(int i=0;i<chain_group;i++)
	          {
	            chainthread[i].startThread();
	            //threadpool.execute(chainthread[i]);
	          }
	        }
	        */
        return true;
    } catch (Exception ex) {
        log.error("start chainthread error:" + ex.getMessage());
        addSysmsg("start chainthread error:" + ex.getMessage());
        // ex.printStackTrace();
        return false;
    }
}
