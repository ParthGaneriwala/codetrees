public void runFtp() {
    try {
        this.ftp = new FTPClient();
        int reply;
        this.applet.setStatusText(I18NMessages.getString("FtpUploader.Connecting"));
        this.ftp.connect(FtpParameters.getHost());
        this.applet.setStatusText(I18NMessages.getString("FtpUploader.Connected_to") + FtpParameters.getHost());
        System.out.print(this.ftp.getReplyString());
        // After connection attempt, you should check the reply code to
        // verify
        // success.
        reply = this.ftp.getReplyCode();
        if (!FTPReply.isPositiveCompletion(reply)) {
            this.ftp.disconnect();
            this.applet.setStatusText(I18NMessages.getString("FtpUploader.Connection_refused"));
        } else {
            if (!this.ftp.login(FtpParameters.getUsername(), FtpParameters.getPassword())) {
                this.applet.setStatusText(I18NMessages.getString("FtpUploader.Server_auth_failed"));
            }
            if (!FTPReply.isPositiveCompletion(this.ftp.cwd(FtpParameters.getUploadFolder()))) {
                throw new IOException();
            }
            // Upload files
            DefaultTreeModel model = (DefaultTreeModel) this.applet.jItemsTree.getModel();
            DefaultMutableTreeNode root = (DefaultMutableTreeNode) model.getRoot();
            Enumeration nodesEnum = root.children();
            getDir(nodesEnum);
            // Disconnect when done
            this.applet.setStatusText(I18NMessages.getString("FtpUploader.Disconnecting..."));
            this.ftp.logout();
            this.applet.setStatusText(I18NMessages.getString("FtpUploader.Disconnected"));
        }
    } catch (IOException e) {
        e.printStackTrace();
    } catch (InterruptedException e) {
        e.printStackTrace();
    } finally {
        this.applet.enableUpload();
        if (this.ftp.isConnected()) {
            try {
                this.ftp.disconnect();
            } catch (IOException ioe) {
                ioe.printStackTrace();
            }
        }
    }
}
