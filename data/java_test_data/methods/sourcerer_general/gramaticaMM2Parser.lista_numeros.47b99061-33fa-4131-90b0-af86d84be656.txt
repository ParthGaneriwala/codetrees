// $ANTLR start "lista_numeros"
public final gramaticaMM2Parser.lista_numeros_return lista_numeros() throws RecognitionException {
    gramaticaMM2Parser.lista_numeros_return retval = new gramaticaMM2Parser.lista_numeros_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token DOT149 = null;
    Token DOT150 = null;
    Token COMMA153 = null;
    gramaticaMM2Parser.inteiro_return inteiro148 = null;
    gramaticaMM2Parser.inteiro_return inteiro151 = null;
    gramaticaMM2Parser.inteiro_return inteiro152 = null;
    gramaticaMM2Parser.inteiro_return inteiro154 = null;
    CommonTree DOT149_tree = null;
    CommonTree DOT150_tree = null;
    CommonTree COMMA153_tree = null;
    RewriteRuleTokenStream stream_DOT = new RewriteRuleTokenStream(adaptor, "token DOT");
    RewriteRuleTokenStream stream_COMMA = new RewriteRuleTokenStream(adaptor, "token COMMA");
    RewriteRuleSubtreeStream stream_inteiro = new RewriteRuleSubtreeStream(adaptor, "rule inteiro");
    try {
        // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:136:15: ( inteiro DOT DOT inteiro -> ^( LIST_NUMBER_RANGE inteiro inteiro ) | inteiro ( COMMA inteiro )* -> ^( LIST_NUMBER ( inteiro )+ ) )
        int alt25 = 2;
        alt25 = dfa25.predict(input);
        switch(alt25) {
            case 1:
                // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:136:17: inteiro DOT DOT inteiro
                {
                    pushFollow(FOLLOW_inteiro_in_lista_numeros1416);
                    inteiro148 = inteiro();
                    state._fsp--;
                    stream_inteiro.add(inteiro148.getTree());
                    DOT149 = (Token) match(input, DOT, FOLLOW_DOT_in_lista_numeros1418);
                    stream_DOT.add(DOT149);
                    DOT150 = (Token) match(input, DOT, FOLLOW_DOT_in_lista_numeros1420);
                    stream_DOT.add(DOT150);
                    pushFollow(FOLLOW_inteiro_in_lista_numeros1422);
                    inteiro151 = inteiro();
                    state._fsp--;
                    stream_inteiro.add(inteiro151.getTree());
                    // AST REWRITE
                    // elements: inteiro, inteiro
                    // token labels:
                    // rule labels: retval
                    // token list labels:
                    // rule list labels:
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", retval != null ? retval.tree : null);
                    root_0 = (CommonTree) adaptor.nil();
                    // 136:41: -> ^( LIST_NUMBER_RANGE inteiro inteiro )
                    {
                        // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:136:44: ^( LIST_NUMBER_RANGE inteiro inteiro )
                        {
                            CommonTree root_1 = (CommonTree) adaptor.nil();
                            root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(LIST_NUMBER_RANGE, "LIST_NUMBER_RANGE"), root_1);
                            adaptor.addChild(root_1, stream_inteiro.nextTree());
                            adaptor.addChild(root_1, stream_inteiro.nextTree());
                            adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;
                }
                break;
            case 2:
                // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:137:5: inteiro ( COMMA inteiro )*
                {
                    pushFollow(FOLLOW_inteiro_in_lista_numeros1438);
                    inteiro152 = inteiro();
                    state._fsp--;
                    stream_inteiro.add(inteiro152.getTree());
                    // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:137:13: ( COMMA inteiro )*
                    loop24: do {
                        int alt24 = 2;
                        int LA24_0 = input.LA(1);
                        if ((LA24_0 == COMMA)) {
                            alt24 = 1;
                        }
                        switch(alt24) {
                            case 1:
                                // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:137:14: COMMA inteiro
                                {
                                    COMMA153 = (Token) match(input, COMMA, FOLLOW_COMMA_in_lista_numeros1441);
                                    stream_COMMA.add(COMMA153);
                                    pushFollow(FOLLOW_inteiro_in_lista_numeros1443);
                                    inteiro154 = inteiro();
                                    state._fsp--;
                                    stream_inteiro.add(inteiro154.getTree());
                                }
                                break;
                            default:
                                break loop24;
                        }
                    } while (true);
                    // AST REWRITE
                    // elements: inteiro
                    // token labels:
                    // rule labels: retval
                    // token list labels:
                    // rule list labels:
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", retval != null ? retval.tree : null);
                    root_0 = (CommonTree) adaptor.nil();
                    // 137:30: -> ^( LIST_NUMBER ( inteiro )+ )
                    {
                        // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:137:33: ^( LIST_NUMBER ( inteiro )+ )
                        {
                            CommonTree root_1 = (CommonTree) adaptor.nil();
                            root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(LIST_NUMBER, "LIST_NUMBER"), root_1);
                            if (!(stream_inteiro.hasNext())) {
                                throw new RewriteEarlyExitException();
                            }
                            while (stream_inteiro.hasNext()) {
                                adaptor.addChild(root_1, stream_inteiro.nextTree());
                            }
                            stream_inteiro.reset();
                            adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;
                }
                break;
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
