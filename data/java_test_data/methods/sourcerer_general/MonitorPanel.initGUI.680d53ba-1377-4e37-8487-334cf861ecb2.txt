private void initGUI() {
    try {
        this.setLayout(null);
        {
            classification = new JTabbedPane();
            this.add(classification);
            classification.setBounds(0, 39, 700, 485);
            {
                tableTabPanel = new JPanel();
                classification.addTab("Table", null, tableTabPanel, null);
                tableTabPanel.setBounds(0, 0, 700, 463);
                tableTabPanel.setLayout(null);
                tableListPane = new JScrollPane();
                tableListPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
                tableListPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
                tableTabPanel.add(tableListPane);
                tableListPane.setBounds(0, 0, 131, 458);
                tableListPanel = new JPanel();
                BoxLayout tableListPanelLayout = new BoxLayout(tableListPanel, javax.swing.BoxLayout.Y_AXIS);
                tableListPanel.setLayout(tableListPanelLayout);
                getTableList(tableListPanel, tableTabPanel);
                tableListPane.setViewportView(tableListPanel);
                tableListPanel.setPreferredSize(new java.awt.Dimension(113, 440));
            }
            {
                repositoryTabPanel = new JPanel();
                classification.addTab("Repository", null, repositoryTabPanel, null);
                repositoryTabPanel.setLayout(null);
                repositoryTabPanel.setPreferredSize(new java.awt.Dimension(700, 409));
                {
                    sizeButton = new JButton();
                    repositoryTabPanel.add(sizeButton);
                    sizeButton.setText("Size");
                    sizeButton.setBounds(12, 12, 80, 23);
                    sizeButton.addActionListener(new GraphListener(monitorMainFrame, repositoryTabPanel, "Size"));
                }
                {
                    memoryButton = new JButton();
                    repositoryTabPanel.add(memoryButton);
                    memoryButton.setText("Memory");
                    memoryButton.setBounds(99, 12, 80, 23);
                    memoryButton.addActionListener(new GraphListener(monitorMainFrame, repositoryTabPanel, "Memory"));
                }
            // Traffic는 지금 확인할 수 없음.
            /*
					 * { trafficButton = new JButton();
					 * repositoryTabPanel.add(trafficButton);
					 * trafficButton.setText("Traffic");
					 * trafficButton.setBounds(188, 12, 80, 23);
					 * trafficButton.addActionListener(new
					 * GraphListener(monitorMainFrame, repositoryTabPanel,
					 * "Traffic")); }
					 */
            }
        }
        {
            logOutButton = new JButton();
            this.add(logOutButton);
            logOutButton.setText("Log Out");
            logOutButton.setBounds(3, 12, 90, 22);
            logOutButton.addActionListener(new ActionListener() {

                public void actionPerformed(ActionEvent evt) {
                    monitorMainFrame.logout();
                    monitorMainFrame.setPanel(new LoginPanel(monitorMainFrame), 270, 300);
                }
            });
        }
        // {
        // refreshButton = new JButton();
        // this.add(refreshButton);
        // refreshButton.setText("Refresh");
        // refreshButton.setBounds(98, 12, 80, 22);
        // refreshButton.setSize(90, 22);
        // }
        {
            loadBalanceButton = new JButton();
            this.add(loadBalanceButton);
            loadBalanceButton.setText("Load Balancing");
            loadBalanceButton.setBounds(193, 12, 130, 22);
            loadBalanceButton.addActionListener(new ActionListener() {

                public void actionPerformed(ActionEvent evt) {
                    monitorMainFrame.loadBalancing();
                }
            });
        }
        {
            exitButton = new JButton();
            this.add(exitButton);
            exitButton.setText("Exit");
            exitButton.setBounds(328, 12, 79, 22);
            exitButton.addActionListener(new ActionListener() {

                public void actionPerformed(ActionEvent evt) {
                    monitorMainFrame.logout();
                    System.exit(0);
                }
            });
        }
    } catch (Exception e) {
        e.printStackTrace();
    }
}
