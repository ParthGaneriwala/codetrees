void initComponents() {
    columnNames = makeHeadersForJTable();
    data = makeDataForJTable(columnNames.length);
    // je sais ca n'a rien a faire en tant que membre de classe
    correctionMap = null;
    mapSmallX = null;
    this.mapSmallN = null;
    this.alphaString = null;
    this.annotationFile = null;
    this.correctionString = null;
    this.overUnderString = null;
    this.clusterVsString = null;
    this.catString = null;
    this.selectedCanonicalNameVector = null;
    this.annotatedGenes = null;
    jPanelDeBase = new javax.swing.JPanel();
    this.setLayout(new java.awt.BorderLayout());
    jPanelDeBase.setLayout(new BorderLayout());
    Toolkit kit = Toolkit.getDefaultToolkit();
    Dimension screenSize = kit.getScreenSize();
    JPanel jPanelButtons = new JPanel();
    // JLabel ontology_Description = new JLabel(annotation.getOntology().getDescription().getType()+" "+annotation.getOntology().getDescription().getCurator());
    // ontology_Description.setBorder(javax.swing.BorderFactory.createLineBorder(Color.black));
    // jPanelButtons.add(ontology_Description);
    JLabel annotation_Description = new JLabel(annotation.getCurator() + "," + annotation.getSpecies() + "," + annotation.getType() + "," + ontology.getCurator() + "," + ontology.getType());
    annotation_Description.setBorder(javax.swing.BorderFactory.createLineBorder(Color.black));
    jPanelButtons.add(annotation_Description);
    JButton jCloseButton = new JButton("close");
    jCloseButton.addActionListener(new CloseResultPanelListener(this));
    jPanelButtons.add(jCloseButton);
    jPanelDeBase.add(jPanelButtons, java.awt.BorderLayout.NORTH);
    jTable1 = new JTable(new ResultTableModel(columnNames, data));
    TableColumnModel tcModel = jTable1.getColumnModel();
    // //      jTable1.addMouseMotionListener(new MouseMotionT1Handler());
    jTable1.setDragEnabled(false);
    // ///////////////////////
    final ResultTableSortFilterModel sorter = new ResultTableSortFilterModel(jTable1.getModel());
    jTable1 = new JTable(sorter);
    jTable1.setCellSelectionEnabled(true);
    jTable1.addMouseListener(new MouseT1Handler(this));
    jTable1.addMouseMotionListener(new MouseMotionT1Handler());
    tcModel = jTable1.getColumnModel();
    for (int i = 0; i < columnNames.length; i++) {
        if (columnNames[i].equals(" "))
            tcModel.getColumn(i).setPreferredWidth(15);
        if (columnNames[i].equals("GO-ID"))
            tcModel.getColumn(i).setPreferredWidth(50);
        if (columnNames[i].equals("Description"))
            tcModel.getColumn(i).setPreferredWidth((screenSize.width - 15 - 50 - 85 - 85 - 70 - 70 - 40) / 2);
        if (columnNames[i].equals("cluster freq"))
            tcModel.getColumn(i).setPreferredWidth(85);
        if (columnNames[i].equals("total freq"))
            tcModel.getColumn(i).setPreferredWidth(85);
        if (columnNames[i].equals("genes"))
            tcModel.getColumn(i).setPreferredWidth((screenSize.width - 15 - 50 - 85 - 85 - 70 - 70 - 40) / 2);
        if (columnNames[i].equals("p-val"))
            tcModel.getColumn(i).setPreferredWidth(70);
        if (columnNames[i].equals("corr p-val"))
            tcModel.getColumn(i).setPreferredWidth(70);
    }
    jTable1.getTableHeader().addMouseListener(new MouseAdapter() {

        public void mouseClicked(MouseEvent e) {
            if (e.getClickCount() < 2)
                return;
            int tableColumn = jTable1.columnAtPoint(e.getPoint());
            int modelColumn = jTable1.convertColumnIndexToModel(tableColumn);
            sorter.sort(modelColumn);
        }
    });
    // ////////////////////////////////////////////////les environs 40 lignes precedentes peut etre a virer
    // jPanelTableau = new javax.swing.JPanel();
    // jPanelTableau.add(jTable1);
    jScrollPane = new javax.swing.JScrollPane(jTable1);
    // couleur
    TableColumn coloredColumn = jTable1.getColumnModel().getColumn(this.DESCRIPTION_COLUMN);
    coloredColumn.setCellRenderer(new ColorRenderer(false, goColor, this));
    // suite des couleurs dans :ouseT1Handler column2;
    jPanelDeBase.add(jScrollPane);
    // ////////a faire : utiliser le meme listener pour tout les tabs
    // displayPieChartListener = new DisplayPieChart2(this, this.goBin.getNetwork_Options());
    JPanel jPanelApplyButtons = new JPanel();
    GridBagLayout blayout = new GridBagLayout();
    GridBagConstraints constr = new GridBagConstraints();
    jPanelApplyButtons.setLayout(blayout);
    constr.weightx = 0;
    JButton selectAllButton = new JButton();
    selectAllButton.setText("Select All");
    selectAllButton.addActionListener(new ActionListener() {

        public void actionPerformed(ActionEvent e) {
            selectAll();
        }
    });
    jPanelApplyButtons.add(selectAllButton, constr);
    constr.weightx = 100;
    constr.anchor = constr.WEST;
    JButton unSelectAllButton = new JButton();
    unSelectAllButton.setText("Unselect All");
    unSelectAllButton.addActionListener(new ActionListener() {

        public void actionPerformed(ActionEvent e) {
            unselectAll();
        }
    });
    jPanelApplyButtons.add(unSelectAllButton, constr);
    /*                jButton1 = new JButton();
                jButton1.setText("Validate");
                jButton1.addActionListener(displayPieChartListener); ////// 1 
                constr.weightx=0;
                jPanelApplyButtons.add(jButton1,constr);*/
    // jButton2 = new JButton();
    // jButton2.setText("Recalculate");
    // jButton2.addActionListener(displayPieChartListener);
    // jPanelApplyButtons.add(jButton2);
    /*                jButton3 = new JButton();
                jButton3.setText("Reset");
                jButton3.addActionListener(displayPieChartListener);
                jPanelApplyButtons.add(jButton3,constr);*/
    constr.weightx = 100;
    constr.anchor = constr.EAST;
    JButton jButton4 = new JButton("Select nodes");
    jButton4.addActionListener(new ZSelectNodes((ResultAndStartPanel) this));
    jPanelApplyButtons.add(jButton4, constr);
    jPanelDeBase.add(jPanelApplyButtons, java.awt.BorderLayout.SOUTH);
    // jPanelApplyButtons.add(new JLabel("WeightGo"),java.awt.BorderLayout.SOUTH);
    // final JTextField jTextWeightGo = new JTextField(5);
    // jPanelApplyButtons.add(jTextWeightGo);
    // jPanelApplyButtons.add(new JLabel("krep"),java.awt.BorderLayout.SOUTH);
    // final JTextField jTextKrep = new JTextField(5);
    // jPanelApplyButtons.add(jTextKrep);
    // jPanelApplyButtons.add(new JLabel("katt"),java.awt.BorderLayout.SOUTH);
    // final JTextField jTextKatt = new JTextField(5);
    // jPanelApplyButtons.add(jTextKatt);
    // jPanelApplyButtons.add(new JLabel("Iterations"));
    // final JTextField jTextK = new JTextField(5);
    // jPanelApplyButtons.add(jTextK);
    // jPanelApplyButtons.add(new JLabel("Temperature"));
    // final JTextField jTextL = new JTextField(5);
    // jPanelApplyButtons.add(jTextL);
    // JButton jButton5 = new JButton("Layout");
    // jButton5.addActionListener(new ActionListener(){
    // public void actionPerformed(ActionEvent e){
    // new Fruchterman(Cytoscape.getCurrentNetworkView(),jTextWeightGo.getText(),jTextKrep.getText(),jTextKatt.getText(),
    // jTextK.getText(),jTextL.getText());
    // }
    // });
    // jPanelApplyButtons.add(jButton5);
    // JButton jButton6 = new JButton("Layout2");
    // jButton6.addActionListener(new ActionListener(){
    // public void actionPerformed(ActionEvent e){
    // new FruchtermanTheEnd(Cytoscape.getCurrentNetworkView(),jTextWeightGo.getText(),jTextKrep.getText(),jTextKatt.getText(),
    // jTextK.getText(),jTextL.getText());
    // }
    // });
    // jPanelApplyButtons.add(jButton6);
    jPanelDeBase.add(jPanelApplyButtons, java.awt.BorderLayout.SOUTH);
    this.add(jPanelDeBase, java.awt.BorderLayout.CENTER);
    goBin.synchroColor(this);
    goBin.synchroSelections(this);
}
