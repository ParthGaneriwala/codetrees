public String save() throws Exception {
    String[] assignProjects = this.getRequest().getParameterValues("assignProject");
    String[] assignRoles = this.getRequest().getParameterValues("assignRole");
    boolean isNew = ("Y".equals(getRequest().getParameter("user.isNew")));
    try {
        if (isNew) {
            UserLogin ul = userManager.getUserLoginByName(userLogin.getLoginName());
            if (ul != null) {
                List<String> args = new ArrayList<String>();
                args.add(userLogin.getUsername());
                addActionError(getText("errors.existing.user", args));
                this.initForm();
                return SUCCESS;
            }
            userLogin.setCurrentPassword(userManager.encodingPassword(userLogin.getConfirmPassword()));
        } else {
            if (!StringUtils.isEmpty(userLogin.getConfirmPassword())) {
                userLogin.setCurrentPassword(userManager.encodingPassword(userLogin.getConfirmPassword()));
            }
        }
        Set<UserProject> userProjects = new HashSet<UserProject>();
        if (assignProjects != null && assignProjects.length > 0) {
            for (String assignProject : assignProjects) {
                Project project = projectManager.get(Long.parseLong(assignProject));
                // project.setProjectId(Long.parseLong(assignProject));
                if (project != null) {
                    UserProject userProject = new UserProject();
                    userProject.setProject(project);
                    userProject.setUserLogin(userLogin);
                    userProjects.add(userProject);
                }
            }
        }
        userLogin.setUserProjects(userProjects);
        Set<UserRole> userRoles = new HashSet<UserRole>();
        if (assignRoles != null && assignRoles.length > 0) {
            for (String assignRole : assignRoles) {
                Role role = this.roleManager.getRole(assignRole);
                if (role != null) {
                    UserRole userRole = new UserRole();
                    userRole.setRole(role);
                    userRole.setUserLogin(userLogin);
                    userRoles.add(userRole);
                }
            }
        }
        userLogin.setUserRoles(userRoles);
        userManager.update(userLogin);
    } catch (Exception e) {
        List<String> args = new ArrayList<String>();
        args.add(userLogin.getUsername());
        args.add(e.getMessage());
        addActionError(getText("error.user.added", args));
        // redisplay the unencrypted passwords
        userLogin.setCurrentPassword(userLogin.getConfirmPassword());
        this.initForm();
        return SUCCESS;
    }
    // add success messages
    List<String> args = new ArrayList<String>();
    args.add(userLogin.getLoginName());
    if (isNew) {
        saveMessage(getText("user.added", args));
    } else {
        saveMessage(getText("user.saved", args));
    }
    this.initForm();
    return SUCCESS;
}
