// }}}
// {{{ isToolsJarAvailable() method
public static boolean isToolsJarAvailable() {
    Log.log(Log.DEBUG, MiscUtilities.class, "Searching for tools.jar...");
    Vector paths = new Vector();
    // {{{ 1. Check whether tools.jar is in the system classpath:
    paths.addElement("System classpath: " + System.getProperty("java.class.path"));
    try {
        // com.sun.tools.javac.Main must be there:
        try {
            Class.forName("sun.tools.javac.Main");
        } catch (ClassNotFoundException e1) {
            Class.forName("com.sun.tools.javac.Main");
        }
        Log.log(Log.DEBUG, MiscUtilities.class, "- is in classpath. Fine.");
        return true;
    } catch (ClassNotFoundException e) {
    // Log.log(Log.DEBUG, MiscUtilities.class,
    // "- is not in system classpath.");
    }
    // }}}
    // {{{ 2. Check whether it is in the jEdit user settings jars folder:
    String settingsDir = jEdit.getSettingsDirectory();
    if (settingsDir != null) {
        String toolsPath = constructPath(settingsDir, "jars", "tools.jar");
        paths.addElement(toolsPath);
        if (new File(toolsPath).exists()) {
            Log.log(Log.DEBUG, MiscUtilities.class, "- is in the user's jars folder. Fine.");
            // jEdit will load it automatically
            return true;
        }
    }
    // }}}
    // {{{ 3. Check whether it is in jEdit's system jars folder:
    String jEditDir = jEdit.getJEditHome();
    if (jEditDir != null) {
        String toolsPath = constructPath(jEditDir, "jars", "tools.jar");
        paths.addElement(toolsPath);
        if (new File(toolsPath).exists()) {
            Log.log(Log.DEBUG, MiscUtilities.class, "- is in jEdit's system jars folder. Fine.");
            // jEdit will load it automatically
            return true;
        }
    }
    // }}}
    // {{{ 4. Check whether it is in <java.home>/lib:
    String toolsPath = System.getProperty("java.home");
    if (toolsPath.toLowerCase().endsWith(File.separator + "jre"))
        toolsPath = toolsPath.substring(0, toolsPath.length() - 4);
    toolsPath = constructPath(toolsPath, "lib", "tools.jar");
    paths.addElement(toolsPath);
    if (!(new File(toolsPath).exists())) {
        Log.log(Log.WARNING, MiscUtilities.class, "Could not find tools.jar.\n" + "I checked the following locations:\n" + paths.toString());
        return false;
    }
    // }}}
    // {{{ Load it, if not yet done:
    PluginJAR jar = jEdit.getPluginJAR(toolsPath);
    if (jar == null) {
        Log.log(Log.DEBUG, MiscUtilities.class, "- adding " + toolsPath + " to jEdit plugins.");
        jEdit.addPluginJAR(toolsPath);
    } else
        Log.log(Log.DEBUG, MiscUtilities.class, "- has been loaded before.");
    return true;
}
