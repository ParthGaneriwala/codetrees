private Statement compilePart(int props) {
    Statement cs;
    compileContext.reset();
    setParsePosition(getPosition());
    if (token.tokenType == Tokens.X_STARTPARSE) {
        read();
    }
    switch(token.tokenType) {
        // DQL
        case Tokens.WITH:
        case Tokens.OPENBRACKET:
        case Tokens.SELECT:
        case Tokens.TABLE:
            {
                cs = compileCursorSpecification(props);
                break;
            }
        case Tokens.VALUES:
            {
                cs = compileShortCursorSpecification(props);
                break;
            }
        // DML
        case Tokens.INSERT:
            {
                cs = compileInsertStatement(RangeVariable.emptyArray);
                break;
            }
        case Tokens.UPDATE:
            {
                cs = compileUpdateStatement(RangeVariable.emptyArray);
                break;
            }
        case Tokens.MERGE:
            {
                cs = compileMergeStatement(RangeVariable.emptyArray);
                break;
            }
        case Tokens.DELETE:
            {
                cs = compileDeleteStatement(RangeVariable.emptyArray);
                break;
            }
        case Tokens.TRUNCATE:
            {
                cs = compileDeleteStatement(RangeVariable.emptyArray);
                break;
            }
        // PROCEDURE
        case Tokens.CALL:
            {
                cs = compileCallStatement(session.sessionContext.sessionVariablesRange, false);
                break;
            }
        // SQL SESSION
        case Tokens.SET:
            cs = compileSet();
            break;
        case Tokens.START:
            cs = compileStartTransaction();
            break;
        case Tokens.COMMIT:
            cs = compileCommit();
            break;
        case Tokens.ROLLBACK:
            cs = compileRollback();
            break;
        case Tokens.SAVEPOINT:
            cs = compileSavepoint();
            break;
        case Tokens.RELEASE:
            cs = compileReleaseSavepoint();
            break;
        // DDL
        case Tokens.CREATE:
            cs = compileCreate();
            break;
        case Tokens.ALTER:
            cs = compileAlter();
            break;
        case Tokens.DROP:
            cs = compileDrop();
            break;
        case Tokens.GRANT:
        case Tokens.REVOKE:
            cs = compileGrantOrRevoke();
            break;
        case Tokens.COMMENT:
            cs = compileComment();
            break;
        // HSQL SESSION
        case Tokens.LOCK:
            cs = compileLock();
            break;
        case Tokens.CONNECT:
            cs = compileConnect();
            break;
        case Tokens.DISCONNECT:
            cs = compileDisconnect();
            break;
        // HSQL COMMAND
        case Tokens.SCRIPT:
            cs = compileScript();
            break;
        case Tokens.SHUTDOWN:
            cs = compileShutdown();
            break;
        case Tokens.BACKUP:
            cs = compileBackup();
            break;
        case Tokens.CHECKPOINT:
            cs = compileCheckpoint();
            break;
        case Tokens.EXPLAIN:
            cs = compileExplainPlan();
            break;
        case Tokens.DECLARE:
            cs = compileDeclare();
            break;
        default:
            throw unexpectedToken();
    }
    if (cs.type != StatementTypes.SET_SESSION_AUTHORIZATION) {
        cs.setSQL(getLastPart());
    }
    if (token.tokenType == Tokens.SEMICOLON) {
        read();
    } else if (token.tokenType == Tokens.X_ENDPARSE) {
    }
    return cs;
}
