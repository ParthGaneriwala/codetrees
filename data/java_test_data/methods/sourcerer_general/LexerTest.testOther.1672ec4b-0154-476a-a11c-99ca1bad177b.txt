public void testOther() throws Exception {
    TokenStream ts = getLexerFor("\"a string\" an_identifier99 '\\n' 1234 1234l 0.34 .56f 5.06d 0x1234");
    LocatableToken token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.STRING_LITERAL, token.getType());
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.IDENT, token.getType());
    assertEquals("an_identifier99", token.getText());
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.CHAR_LITERAL, token.getType());
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.NUM_INT, token.getType());
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.NUM_LONG, token.getType());
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.NUM_DOUBLE, token.getType());
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.NUM_FLOAT, token.getType());
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.NUM_DOUBLE, token.getType());
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.NUM_INT, token.getType());
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.EOF, token.getType());
    ts = getLexerFor("0x5678l 0x01AF02 0x01AF02l 44.3E6 44.3E6f");
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.NUM_LONG, token.getType());
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.NUM_INT, token.getType());
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.NUM_LONG, token.getType());
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.NUM_DOUBLE, token.getType());
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.NUM_FLOAT, token.getType());
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.EOF, token.getType());
    // A case which we've seen fail
    ts = getLexerFor("/120.0f,");
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.DIV, token.getType());
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.NUM_FLOAT, token.getType());
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.COMMA, token.getType());
}
