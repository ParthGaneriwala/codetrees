@Override
protected Chromattic boot(Configuration options) throws BuilderException {
    // 
    Boolean optimizeJCREnabled = options.getOptionValue(JCR_OPTIMIZE_ENABLED);
    // 
    final boolean hasPropertyOptimized;
    if (optimizeJCREnabled != null) {
        hasPropertyOptimized = optimizeJCREnabled;
    } else {
        hasPropertyOptimized = options.getOptionValue(JCR_OPTIMIZE_HAS_PROPERTY_ENABLED);
    }
    // 
    final boolean hasNodeOptimized;
    if (optimizeJCREnabled != null) {
        hasNodeOptimized = optimizeJCREnabled;
    } else {
        hasNodeOptimized = options.getOptionValue(JCR_OPTIMIZE_HAS_NODE_ENABLED);
    }
    // 
    String rootNodePath;
    try {
        rootNodePath = Path.normalizeAbsolutePath(options.getOptionValue(ROOT_NODE_PATH));
    } catch (PathException e) {
        throw new BuilderException("Root node path must be valid");
    }
    // 
    int rootCreateMode;
    if (options.getOptionValue(CREATE_ROOT_NODE)) {
        boolean lazyCreateMode = options.getOptionValue(LAZY_CREATE_ROOT_NODE);
        if (lazyCreateMode) {
            rootCreateMode = Domain.LAZY_CREATE_MODE;
        } else {
            rootCreateMode = Domain.CREATE_MODE;
        }
    } else {
        rootCreateMode = Domain.NO_CREATE_MODE;
    }
    // 
    String rootNodeType = options.getOptionValue(ROOT_NODE_TYPE);
    // 
    boolean propertyCacheEnabled = options.getOptionValue(PROPERTY_CACHE_ENABLED);
    boolean propertyReadAheadEnabled = options.getOptionValue(PROPERTY_READ_AHEAD_ENABLED);
    // 
    Instrumentor instrumentor = create(options.getOptionInstance(INSTRUMENTOR_CLASSNAME), Instrumentor.class);
    ObjectFormatter objectFormatter = create(options.getOptionInstance(OBJECT_FORMATTER_CLASSNAME), ObjectFormatter.class);
    SessionLifeCycle sessionLifeCycle = create(options.getOptionInstance(SESSION_LIFECYCLE_CLASSNAME), SessionLifeCycle.class);
    // Build domain
    Domain domain = new Domain(mappers, instrumentor, objectFormatter, propertyCacheEnabled, propertyReadAheadEnabled, hasPropertyOptimized, hasNodeOptimized, rootNodePath, rootCreateMode, rootNodeType);
    // 
    return new ChromatticImpl(domain, sessionLifeCycle);
}
