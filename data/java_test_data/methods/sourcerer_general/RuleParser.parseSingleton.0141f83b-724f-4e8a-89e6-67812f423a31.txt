private NFA parseSingleton(NFA head) {
    while (true) {
        if (head == null) {
            boolean[] ccl;
            Character ch;
            if (m_lex.ifMatch('.')) {
                ++m_ruleLen;
                head = m_nfaFactory.createNFA(NFA.ISCCL, m_ccl.ANY);
            } else if (m_lex.ifMatch("<<EOF>>")) {
                if (!m_lex.isEmpty())
                    throw new LookaheadException(m_lineNumber, m_ccl, m_ccl.EOF, m_lex.getInput(), m_lex.getPos());
                head = m_nfaFactory.createNFA(m_ccl.EOF, null);
            } else if (m_lex.ifMatchReplaceName()) {
                continue;
            } else if ((ccl = parseFullCCL(true)) != null) {
                ++m_ruleLen;
                head = m_nfaFactory.createNFA(NFA.ISCCL, ccl);
            } else if (m_lex.ifMatch('"')) {
                head = parseString(m_quoteCharSet);
                if (head == null)
                    throw new InvalidRegExException(m_lineNumber, m_lex.getInput());
                m_lex.match('"');
            } else if (m_lex.ifMatch('\'')) {
                head = parseString(m_singleQuoteCharSet);
                if (head == null)
                    throw new InvalidRegExException(m_lineNumber, m_lex.getInput());
                m_lex.match('\'');
            } else if (m_lex.ifMatch('(')) {
                head = parseRegex();
                if (head == null)
                    throw new InvalidRegExException(m_lineNumber, m_lex.getInput());
                m_lex.match(')');
            } else if ((ch = parseChar(m_singletonCharSet)) != null) {
                ++m_ruleLen;
                if (m_nocase) {
                    char c = ch.charValue();
                    ccl = m_ccl.EMPTY.clone();
                    ccl[c] = true;
                    if (c >= 'a' && c <= 'z')
                        ccl[c - 'a' + 'A'] = true;
                    else if (c >= 'A' && c <= 'Z')
                        ccl[c - 'A' + 'a'] = true;
                    head = m_nfaFactory.createNFA(NFA.ISCCL, ccl);
                } else
                    head = m_nfaFactory.createNFA(ch.charValue(), null);
            } else
                return null;
        } else {
            if (m_lex.ifMatch('*')) {
                m_varLen = true;
                head = head.star();
            } else if (m_lex.ifMatch('+')) {
                m_varLen = true;
                head = head.plus();
            } else if (m_lex.ifMatch('?')) {
                m_varLen = true;
                head = head.q();
            }
            if (m_lex.ifMatchReplaceName()) {
                continue;
            } else if (m_lex.ifMatch('{')) {
                Integer number = parseNumber();
                if (number == null || number.intValue() < 0)
                    throw new BadIterationException(m_lineNumber, number);
                if (m_lex.ifMatch('}'))
                    head = head.repeat(number);
                else {
                    int min, max;
                    min = number.intValue();
                    m_lex.match(',');
                    number = parseNumber();
                    if (number == null)
                        max = -1;
                    else
                        max = number.intValue();
                    head = head.repeat(min, max);
                    m_lex.match('}');
                }
            } else
                break;
        }
    }
    return head;
}
