public void testInsertTeamMember() throws Exception {
    {
        ArrayList<String> meta = new ArrayList<String>();
        meta.add("id");
        api.setTransactionMeta(meta);
        // The minimum number of fields for a successful project insert
        DataRecord record = new DataRecord();
        record.setName("project");
        record.setAction(DataRecord.INSERT);
        record.setShareKey(true);
        record.addField("title", "API Test Project");
        record.addField("shortDescription", "API Test Project short description");
        record.addField("requestDate", new Date());
        record.addField("enteredBy", USER_ID);
        record.addField("modifiedBy", USER_ID);
        record.addField("groupId", GROUP_ID);
        api.save(record);
    }
    {
        DataRecord record = new DataRecord();
        record.setName("teamMember");
        record.setAction(DataRecord.INSERT);
        record.addField("projectId", "$C{project.id}");
        record.addField("userId", 1);
        record.addField("userLevel", 1);
        record.addField("enteredBy", 1);
        record.addField("modifiedBy", 1);
        api.save(record);
    }
    // Process the complete transaction
    processTheTransactions(api, packetContext);
    assertFalse("API reported a transaction error: " + api.getLastResponse(), api.hasError());
    int projectId = Integer.parseInt(api.getResponseValue("id"));
    assertTrue(projectId > -1);
    // Look and see if the team member exists...
    {
        // Add Meta Info with fields required
        ArrayList<String> meta = new ArrayList<String>();
        meta.add("id");
        meta.add("projectId");
        meta.add("userId");
        meta.add("lastAccessed");
        api.setTransactionMeta(meta);
        // Ask the API to send the just inserted project back
        DataRecord record = new DataRecord();
        record.setName("teamMemberList");
        record.setAction(DataRecord.SELECT);
        record.addField("projectId", projectId);
        record.addField("userId", "1");
        api.save(record);
    }
    // Process the complete transaction
    processTheTransactions(api, packetContext);
    assertFalse("API reported a transaction error: " + api.getLastResponse(), api.hasError());
    assertNull(api.getResponseValue("lastAccessed"));
    int teamMemberId = Integer.parseInt(api.getResponseValue("id"));
    assertTrue(teamMemberId > -1);
    // Delete this test project by querying the database directly
    // The object will delete referenced data
    int count = 0;
    ProjectList projectList = new ProjectList();
    projectList.setEnteredByUser(USER_ID);
    projectList.buildList(db);
    Iterator i = projectList.iterator();
    while (i.hasNext()) {
        Project thisProject = (Project) i.next();
        if (thisProject.getTitle().equals("API Test Project")) {
            ++count;
            thisProject.delete(db, null);
        }
    }
    assertTrue("Didn't find a project to delete", count > 0);
}
