private ExpTreenode FctPower() {
    ExpTreenode retnode = null;
    if (token.equals("e")) {
        // retnode = new ExpTreenode("e");
        retnode = new ExpTreenode(new ComplexNumber(new NumberValue(Math.E)));
        token = GetToken();
    } else if (token.equals("pi")) {
        // retnode = new ExpTreenode("pi");
        retnode = new ExpTreenode(new ComplexNumber(new NumberValue(Math.PI)));
        token = GetToken();
    } else if (token.equals("i")) {
        // retnode = new ExpTreenode("i");
        retnode = new ExpTreenode(new ComplexNumber(NumberValue.makeOne(), false));
        token = GetToken();
    } else if (token.equals("(")) {
        token = GetToken();
        retnode = FctExpression();
        if (token.equals(")"))
            token = GetToken();
        else
            throw new SyntaxErrorException();
    } else if (!FindFct(token).equals("")) {
        String temptoken = token;
        token = GetToken();
        if (token.equals("(")) {
            token = GetToken();
            retnode = FctExpression();
            if (token.equals(")"))
                token = GetToken();
            else
                throw new SyntaxErrorException();
            retnode = new ExpTreenode(temptoken, null, null, retnode);
        } else
            throw new SyntaxErrorException();
    } else if (Terminal.indexOf(token) >= 0) {
        retnode = new ExpTreenode(token);
        token = GetToken();
    } else if (NumStr.indexOf(token.substring(0, 1)) >= 0) {
        retnode = new ExpTreenode("#", ProcessNumber(token), null, null);
        token = GetToken();
    } else
        throw new SyntaxErrorException();
    return retnode;
}
