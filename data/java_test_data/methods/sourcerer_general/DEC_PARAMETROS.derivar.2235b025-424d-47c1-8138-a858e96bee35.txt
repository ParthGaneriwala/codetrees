@Override
public SimboloGramatical derivar() throws Exception {
    TokenReader tokenReader = TokenReader.getInstance();
    Token token = null;
    token = tokenReader.seeCurrent();
    NaoTerminal naoTerminal = (NaoTerminal) this.simbolo;
    naoTerminal.add(new TIPO().derivar());
    token = tokenReader.seeCurrent();
    if (token.getTokenClass().equals(TokenClass.OPERADOR) && token.getAtributo().equals("[")) {
        tokenReader.consome();
        naoTerminal.add(new Terminal(token));
        token = tokenReader.seeCurrent();
        if (token.getTokenClass().equals(TokenClass.OPERADOR) && token.getAtributo().equals("]")) {
            tokenReader.consome();
            naoTerminal.add(new Terminal(token));
        } else {
            erro(this.getClass().getSimpleName() + " mal formada - ']' não encontrado");
            return simbolo;
        }
    }
    naoTerminal.add(new NOME().derivar());
    token = tokenReader.seeCurrent();
    while ((token.getTokenClass().equals(TokenClass.OPERADOR)) && (token.getAtributo().equals(",")) && tokenReader.hasToken()) {
        if (token.getTokenClass().equals(TokenClass.OPERADOR) && token.getAtributo().equals(",")) {
            tokenReader.consome();
            naoTerminal.add(new Terminal(token));
            token = tokenReader.seeCurrent();
            naoTerminal.add(new TIPO().derivar());
            token = tokenReader.seeCurrent();
            if (token.getTokenClass().equals(TokenClass.OPERADOR) && token.getAtributo().equals("[")) {
                tokenReader.consome();
                naoTerminal.add(new Terminal(token));
                token = tokenReader.seeCurrent();
                if (token.getTokenClass().equals(TokenClass.OPERADOR) && token.getAtributo().equals("]")) {
                    tokenReader.consome();
                    naoTerminal.add(new Terminal(token));
                } else {
                    erro(this.getClass().getSimpleName() + " mal formada - ']' não encontrado");
                    return this.simbolo;
                }
            }
            naoTerminal.add(new NOME().derivar());
        }
    /*token = tokenReader.seeCurrent();
            naoTerminal.add(new NOME().derivar());*/
    }
    return this.simbolo;
}
