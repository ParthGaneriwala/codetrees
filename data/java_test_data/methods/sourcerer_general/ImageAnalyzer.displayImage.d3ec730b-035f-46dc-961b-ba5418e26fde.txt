void displayImage(ImageData newImageData) {
    if (incremental && incrementalThread != null) {
        // Tell the incremental thread to stop drawing.
        synchronized (this) {
            incrementalEvents = null;
        }
        // Wait until the incremental thread is done.
        while (incrementalThread.isAlive()) {
            if (!display.readAndDispatch())
                display.sleep();
        }
    }
    // Dispose of the old image, if there was one.
    if (image != null)
        image.dispose();
    try {
        // Cache the new image and imageData.
        image = new Image(display, newImageData);
        imageData = newImageData;
    } catch (SWTException e) {
        showErrorDialog("Creating_from" + " ", currentName, e);
        image = null;
        return;
    }
    // Update the widgets with the new image info.
    String string = createMsg("Analyzer_on", currentName);
    shell.setText(string);
    if (imageDataArray.length > 1) {
        string = createMsg("Type_index", new Object[] { fileTypeString(imageData.type), new Integer(imageDataIndex + 1), new Integer(imageDataArray.length) });
    } else {
        string = createMsg("Type_string", fileTypeString(imageData.type));
    }
    typeLabel.setText(string);
    string = createMsg("Size_value", new Object[] { new Integer(imageData.width), new Integer(imageData.height) });
    sizeLabel.setText(string);
    string = createMsg("Depth_value", new Integer(imageData.depth));
    depthLabel.setText(string);
    string = createMsg("Transparent_pixel_value", pixelInfo(imageData.transparentPixel));
    transparentPixelLabel.setText(string);
    string = createMsg("Time_to_load_value", new Long(loadTime));
    timeToLoadLabel.setText(string);
    string = createMsg("Animation_size_value", new Object[] { new Integer(loader.logicalScreenWidth), new Integer(loader.logicalScreenHeight) });
    screenSizeLabel.setText(string);
    string = createMsg("Background_pixel_value", pixelInfo(loader.backgroundPixel));
    backgroundPixelLabel.setText(string);
    string = createMsg("Image_location_value", new Object[] { new Integer(imageData.x), new Integer(imageData.y) });
    locationLabel.setText(string);
    string = createMsg("Disposal_value", new Object[] { new Integer(imageData.disposalMethod), disposalString(imageData.disposalMethod) });
    disposalMethodLabel.setText(string);
    int delay = imageData.delayTime * 10;
    int delayUsed = visibleDelay(delay);
    if (delay != delayUsed) {
        string = createMsg("Delay_value", new Object[] { new Integer(delay), new Integer(delayUsed) });
    } else {
        string = createMsg("Delay_used", new Integer(delay));
    }
    delayTimeLabel.setText(string);
    if (loader.repeatCount == 0) {
        string = createMsg("Repeats_forever", new Integer(loader.repeatCount));
    } else {
        string = createMsg("Repeats_value", new Integer(loader.repeatCount));
    }
    repeatCountLabel.setText(string);
    if (imageData.palette.isDirect) {
        string = "Palette_direct";
    } else {
        string = createMsg("Palette_value", new Integer(imageData.palette.getRGBs().length));
    }
    paletteLabel.setText(string);
    string = createMsg("Pixel_data_value", new Object[] { new Integer(imageData.bytesPerLine), new Integer(imageData.scanlinePad), depthInfo(imageData.depth) });
    dataLabel.setText(string);
    String data = dataHexDump(dataText.getLineDelimiter());
    dataText.setText(data);
    // bold the first column all the way down
    int index = 0;
    while ((index = data.indexOf(':', index + 1)) != -1) dataText.setStyleRange(new StyleRange(index - INDEX_DIGITS, INDEX_DIGITS, dataText.getForeground(), dataText.getBackground(), SWT.BOLD));
    statusLabel.setText("");
    // Redraw both canvases.
    paletteCanvas.redraw();
    imageCanvas.redraw();
}
