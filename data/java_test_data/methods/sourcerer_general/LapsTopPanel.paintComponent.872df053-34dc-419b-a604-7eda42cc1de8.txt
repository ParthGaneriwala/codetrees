@Override
public void paintComponent(Graphics g) {
    Graphics2D g2 = (Graphics2D) g;
    Dimension d = getSize();
    double width = d.getWidth();
    double height = d.getHeight();
    g2.setPaint(Color.WHITE);
    g2.fillRect(0, 0, (int) width, (int) height);
    Distance distance = model.getDistance();
    if ((model != null) && (distance != null)) {
        // determin shift from left side (same way that in SplitViewer)
        int otst;
        FontMetrics fM = g2.getFontMetrics();
        otst = fM.stringWidth("-000:00") + 5;
        // Determin scale (pixels/meters)
        int allLength = Tools.calculateTotalLength(distance);
        double scale = (width - otst) / allLength;
        int nOfCp = distance.getNumberOfCP();
        xCoord = new int[nOfCp + 1];
        int[] xCoordFromViewer = splitViewer.getXCoordinatesOfLaps();
        // Creating boolean array of selected laps
        selected = new boolean[nOfCp];
        for (boolean b : selected) {
            b = false;
        }
        int[] viewSplits = model.getViewingSplits();
        for (int i : viewSplits) {
            selected[i - 1] = true;
        }
        int curX = otst;
        xCoord[0] = curX;
        yOtst = (int) (height / 2);
        // numbers of viewing splits and x coordinates are same then draw
        if ((xCoordFromViewer != null) && (xCoordFromViewer.length == viewSplits.length)) {
            // set anti-alialiasing on
            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
            int lastView = 0;
            for (int i = 1; i < nOfCp + 1; i++) {
                // size of lap in pixels
                double w = distance.getLengthOfDist(i) * scale;
                // right side of lap
                curX = curX + (int) w;
                xCoord[i] = curX;
                // Create two GeneralPaths for top(vertical sides) and bottom(connection zone) parts of lap
                GeneralPath pathTop = new GeneralPath();
                GeneralPath pathBottom = new GeneralPath();
                // Top Path
                pathTop.moveTo(xCoord[i - 1], yOtst);
                pathTop.lineTo(xCoord[i - 1], 0);
                pathTop.lineTo(xCoord[i], 0);
                pathTop.lineTo(xCoord[i], yOtst);
                // Fill top path green if selected else red
                if (selected[i - 1])
                    g2.setPaint(Color.GREEN);
                else
                    g2.setPaint(Color.RED);
                g2.fill(pathTop);
                // draw sides of lap
                g2.setStroke(new BasicStroke(1.0f));
                g2.setPaint(Color.BLACK);
                g2.draw(pathTop);
                // Bottom path
                pathBottom.moveTo(xCoord[i], yOtst);
                if (lastView < viewSplits.length) {
                    if (viewSplits[lastView] > i) {
                        int x = (lastView > 0) ? xCoordFromViewer[lastView - 1] : xCoord[0];
                        pathBottom.lineTo(x, (float) height);
                    } else if (viewSplits[lastView] == i) {
                        pathBottom.lineTo(xCoordFromViewer[lastView], (float) height);
                        int x = (lastView > 0) ? xCoordFromViewer[lastView - 1] : xCoord[0];
                        pathBottom.lineTo(x, (float) height);
                        lastView++;
                    } else
                        ;
                } else {
                    pathBottom.lineTo(xCoordFromViewer[xCoordFromViewer.length - 1], (float) height);
                }
                pathBottom.lineTo(xCoord[i - 1], yOtst);
                // Fill bottom path
                GradientPaint greenToWhite = new GradientPaint(xCoord[0], yOtst, Color.GREEN, xCoord[0], (int) height, Color.WHITE);
                if (selected[i - 1])
                    g2.setPaint(greenToWhite);
                else
                    g2.setPaint(Color.RED);
                g2.fill(pathBottom);
                // draw connection lines
                float[] dash1 = { 1.0f };
                BasicStroke dashed = new BasicStroke(0.5f, java.awt.BasicStroke.CAP_BUTT, java.awt.BasicStroke.JOIN_MITER, 10.0f, dash1, 0.0f);
                g2.setStroke(dashed);
                g2.setPaint(Color.BLACK);
                g2.draw(pathBottom);
            }
        } else
            ;
    } else
        ;
}
