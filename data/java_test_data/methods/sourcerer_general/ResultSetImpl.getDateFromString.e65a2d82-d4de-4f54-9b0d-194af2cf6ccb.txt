private final java.sql.Date getDateFromString(String stringVal, int columnIndex, Calendar targetCalendar) throws SQLException {
    int year = 0;
    int month = 0;
    int day = 0;
    try {
        this.wasNullFlag = false;
        if (stringVal == null) {
            this.wasNullFlag = true;
            return null;
        }
        // 
        // JDK-6 doesn't like trailing whitespace
        // 
        // Note this isn't a performance issue, other
        // than the iteration over the string, as String.trim()
        // will return a new string only if whitespace is present
        // 
        stringVal = stringVal.trim();
        if (stringVal.equals("0") || stringVal.equals("0000-00-00") || stringVal.equals("0000-00-00 00:00:00") || stringVal.equals("00000000000000") || stringVal.equals("0")) {
            if (ConnectionPropertiesImpl.ZERO_DATETIME_BEHAVIOR_CONVERT_TO_NULL.equals(this.connection.getZeroDateTimeBehavior())) {
                this.wasNullFlag = true;
                return null;
            } else if (ConnectionPropertiesImpl.ZERO_DATETIME_BEHAVIOR_EXCEPTION.equals(this.connection.getZeroDateTimeBehavior())) {
                throw SQLError.createSQLException("Value '" + stringVal + "' can not be represented as java.sql.Date", SQLError.SQL_STATE_ILLEGAL_ARGUMENT, getExceptionInterceptor());
            }
            // represent, which is '0001-01-01'.
            return fastDateCreate(targetCalendar, 1, 1, 1);
        } else if (this.fields[columnIndex - 1].getMysqlType() == MysqlDefs.FIELD_TYPE_TIMESTAMP) {
            // Convert from TIMESTAMP
            switch(stringVal.length()) {
                case 21:
                case 19:
                    {
                        // java.sql.Timestamp format
                        year = Integer.parseInt(stringVal.substring(0, 4));
                        month = Integer.parseInt(stringVal.substring(5, 7));
                        day = Integer.parseInt(stringVal.substring(8, 10));
                        return fastDateCreate(targetCalendar, year, month, day);
                    }
                case 14:
                case 8:
                    {
                        year = Integer.parseInt(stringVal.substring(0, 4));
                        month = Integer.parseInt(stringVal.substring(4, 6));
                        day = Integer.parseInt(stringVal.substring(6, 8));
                        return fastDateCreate(targetCalendar, year, month, day);
                    }
                case 12:
                case 10:
                case 6:
                    {
                        year = Integer.parseInt(stringVal.substring(0, 2));
                        if (year <= 69) {
                            year = year + 100;
                        }
                        month = Integer.parseInt(stringVal.substring(2, 4));
                        day = Integer.parseInt(stringVal.substring(4, 6));
                        return fastDateCreate(targetCalendar, year + 1900, month, day);
                    }
                case 4:
                    {
                        year = Integer.parseInt(stringVal.substring(0, 4));
                        if (year <= 69) {
                            year = year + 100;
                        }
                        month = Integer.parseInt(stringVal.substring(2, 4));
                        return fastDateCreate(targetCalendar, year + 1900, month, 1);
                    }
                case 2:
                    {
                        year = Integer.parseInt(stringVal.substring(0, 2));
                        if (year <= 69) {
                            year = year + 100;
                        }
                        return fastDateCreate(targetCalendar, year + 1900, 1, 1);
                    }
                default:
                    throw SQLError.createSQLException(Messages.getString("ResultSet.Bad_format_for_Date", new Object[] { stringVal, Constants.integerValueOf(columnIndex) }), SQLError.SQL_STATE_ILLEGAL_ARGUMENT, // $NON-NLS-1$
                    getExceptionInterceptor());
            }
        /* endswitch */
        } else if (this.fields[columnIndex - 1].getMysqlType() == MysqlDefs.FIELD_TYPE_YEAR) {
            if (stringVal.length() == 2 || stringVal.length() == 1) {
                year = Integer.parseInt(stringVal);
                if (year <= 69) {
                    year = year + 100;
                }
                year += 1900;
            } else {
                year = Integer.parseInt(stringVal.substring(0, 4));
            }
            return fastDateCreate(targetCalendar, year, 1, 1);
        } else if (this.fields[columnIndex - 1].getMysqlType() == MysqlDefs.FIELD_TYPE_TIME) {
            // Return EPOCH
            return fastDateCreate(targetCalendar, 1970, 1, 1);
        } else {
            if (stringVal.length() < 10) {
                if (stringVal.length() == 8) {
                    // Return EPOCH for TIME
                    return fastDateCreate(targetCalendar, 1970, 1, 1);
                }
                throw SQLError.createSQLException(Messages.getString("ResultSet.Bad_format_for_Date", new Object[] { stringVal, Constants.integerValueOf(columnIndex) }), SQLError.SQL_STATE_ILLEGAL_ARGUMENT, // $NON-NLS-1$
                getExceptionInterceptor());
            }
            if (stringVal.length() != 18) {
                year = Integer.parseInt(stringVal.substring(0, 4));
                month = Integer.parseInt(stringVal.substring(5, 7));
                day = Integer.parseInt(stringVal.substring(8, 10));
            } else {
                // JDK-1.3 timestamp format, not real easy to parse positionally :p
                StringTokenizer st = new StringTokenizer(stringVal, "- ");
                year = Integer.parseInt(st.nextToken());
                month = Integer.parseInt(st.nextToken());
                day = Integer.parseInt(st.nextToken());
            }
        }
        return fastDateCreate(targetCalendar, year, month, day);
    } catch (SQLException sqlEx) {
        // don't re-wrap
        throw sqlEx;
    } catch (Exception e) {
        SQLException sqlEx = SQLError.createSQLException(Messages.getString("ResultSet.Bad_format_for_Date", new Object[] { stringVal, Constants.integerValueOf(columnIndex) }), SQLError.SQL_STATE_ILLEGAL_ARGUMENT, // $NON-NLS-1$
        getExceptionInterceptor());
        sqlEx.initCause(e);
        throw sqlEx;
    }
}
