protected void mergeComplexes4(Cluster c1, Cluster c2) {
    ArrayList nodes1 = c1.getALNodes();
    ArrayList nodes2 = c2.getALNodes();
    // add the unoverlapped nodes and set the subComplexes of all nodes in C2
    NodeInfo nodeNI;
    ArrayList subComplexes;
    for (Iterator it = nodes2.iterator(); it.hasNext(); ) {
        // for each node in C2
        Integer node = (Integer) it.next();
        nodeNI = (NodeInfo) curNodeInfos.get(node);
        subComplexes = nodeNI.getAlComplex();
        if (!nodes1.contains(node)) {
            // this is not a overlapped node
            int index = subComplexes.indexOf(new Integer(c2.getComplexID()));
            subComplexes.remove(index);
            subComplexes.add(new Integer(c1.getComplexID()));
            nodes1.add(node);
        } else {
            // this node already exists in C1
            int index = subComplexes.indexOf(new Integer(c2.getComplexID()));
            subComplexes.remove(index);
        }
    }
    c1.setModule(true);
    int nodeInDegree, nodeTotalDegree;
    for (Iterator i = nodes1.iterator(); i.hasNext(); ) {
        int nodeIndex = ((Integer) i.next()).intValue();
        int[] adjs = getNeighborArray(currentNetwork, nodeIndex);
        nodeInDegree = 0;
        for (int j = 0; j < adjs.length; j++) if (nodes1.contains(new Integer(adjs[j])))
            nodeInDegree++;
        nodeTotalDegree = currentNetwork.getDegree(nodeIndex);
        float fModule = (float) nodeInDegree / (float) (nodeTotalDegree);
        if (fModule < 0.5) {
            c1.setModule(false);
        }
    }
    // clear the content of nodes2
    nodes2.clear();
}
