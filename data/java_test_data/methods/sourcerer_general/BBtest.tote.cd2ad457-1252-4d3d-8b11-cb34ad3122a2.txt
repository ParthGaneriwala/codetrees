public float tote(int playerID, int tournID) {
    float Pool = 0;
    float AntiPool = 0;
    float[] preev = new float[maxplayerintourney];
    float[] calchelp = new float[maxplayerintourney];
    float[] ohneeig = new float[maxplayerintourney];
    float sumcalchelp = 0;
    float sumitbackings = 0;
    float[] itbackings = new float[maxplayerintourney];
    // int[] postev = new int[maxplayerintourney];
    int iteration;
    int counttocatch = 0;
    for (int i = 0; i < events[tournID].countplayers; i++) {
        if (events[tournID].Backings2[maxplayerintourney - 2][i] > 0) {
            counttocatch = counttocatch + 1;
        }
        Pool = Pool + events[tournID].Backings2[maxplayerintourney - 2][i];
        AntiPool = AntiPool + events[tournID].Backings2[maxplayerintourney - 1][i];
    }
    if ((counttocatch > 1) && (AntiPool > 0)) {
        for (int i = 0; i < events[tournID].countplayers; i++) {
            calchelp[i] = events[tournID].Backings2[maxplayerintourney - 1][i] / (Pool - events[tournID].Backings2[maxplayerintourney - 2][i]);
            sumcalchelp = sumcalchelp + calchelp[i];
            itbackings[i] = events[tournID].Backings2[maxplayerintourney - 2][i];
        }
        for (int j = 0; j < antiiterations + 30; j++) {
            sumitbackings = 0;
            for (int i = 0; i < events[tournID].countplayers; i++) {
                ohneeig[i] = sumcalchelp - calchelp[i];
                itbackings[i] = events[tournID].Backings2[maxplayerintourney - 2][i] + itbackings[i] * ohneeig[i];
                sumitbackings = sumitbackings + itbackings[i];
            }
            sumcalchelp = 0;
            for (int i = 0; i < events[tournID].countplayers; i++) {
                calchelp[i] = events[tournID].Backings2[maxplayerintourney - 1][i] / (sumitbackings - itbackings[i]);
                sumcalchelp = sumcalchelp + calchelp[i];
            }
        }
    } else {
        for (int i = 0; i < events[tournID].countplayers; i++) {
            itbackings[i] = events[tournID].Backings2[maxplayerintourney - 2][i];
            sumitbackings = Pool;
        }
    }
    for (int i = 0; i < events[tournID].countplayers; i++) {
        if (itbackings[playerID] == 0) {
            preev[playerID] = 65000;
        } else {
            preev[playerID] = ((10 * sumitbackings) / (itbackings[playerID]));
        // postev[playerID]=Math.max(11,(int)Math.floor(preev[playerID]));
        }
    }
    return preev[playerID];
}
