private void save(HttpServletRequest request, ModelAndView next, WikiPageInfo pageInfo) throws Exception {
    String topicName = WikiUtil.getTopicFromRequest(request);
    System.out.println("topicName:" + topicName);
    String virtualWiki = WikiUtil.getVirtualWikiFromURI(request);
    Topic topic = loadTopic(virtualWiki, topicName);
    Topic lastTopic = WikiBase.getDataHandler().lookupTopic(virtualWiki, topicName, false, null);
    if (lastTopic != null && !lastTopic.getCurrentVersionId().equals(retrieveLastTopicVersionId(request, topic))) {
        // someone else has edited the topic more recently
        resolve(request, next, pageInfo);
        return;
    }
    System.out.println("dddd:" + topicName);
    String categoryId = request.getParameter("categoryId");
    if (categoryId != null) {
        topic.setCategory_id(Integer.parseInt(categoryId));
    } else {
        topic.setCategory_id(1);
    }
    logger.info("save(HttpServletRequest request, ModelAndView next, WikiPageInfo pageInfo)----categoryId: " + categoryId);
    String contents = request.getParameter("contents");
    String sectionName = "";
    if (!StringUtils.isBlank(request.getParameter("section"))) {
        // load section of topic
        int section = (new Integer(request.getParameter("section"))).intValue();
        ParserOutput parserOutput = new ParserOutput();
        contents = ParserUtil.parseSplice(parserOutput, request.getContextPath(), request.getLocale(), virtualWiki, topicName, section, contents);
        sectionName = parserOutput.getSectionName();
    }
    if (contents == null) {
        logger.warning("The topic " + topicName + " has no content");
        throw new WikiException(new WikiMessage("edit.exception.nocontent", topicName));
    }
    // strip line feeds
    contents = StringUtils.remove(contents, '\r');
    String lastTopicContent = (lastTopic != null) ? StringUtils.remove(lastTopic.getTopicContent(), '\r') : "";
    if (StringUtils.equals(lastTopicContent, contents)) {
        // topic hasn't changed. redirect to prevent user from refreshing and re-submitting
        ServletUtil.redirect(next, virtualWiki, topic.getName());
        return;
    }
    if (handleSpam(request, next, pageInfo, topicName, contents)) {
        return;
    }
    // parse for signatures and other syntax that should not be saved in raw form
    WikiUserAuth user = ServletUtil.currentUser();
    ParserInput parserInput = new ParserInput();
    parserInput.setContext(request.getContextPath());
    parserInput.setLocale(request.getLocale());
    parserInput.setWikiUser(user);
    parserInput.setTopicName(topicName);
    parserInput.setUserIpAddress(ServletUtil.getIpAddress(request));
    parserInput.setVirtualWiki(virtualWiki);
    ParserOutput parserOutput = ParserUtil.parseMetadata(parserInput, contents);
    // parse signatures and other values that need to be updated prior to saving
    contents = ParserUtil.parseMinimal(parserInput, contents);
    topic.setTopicContent(contents);
    if (!StringUtils.isBlank(parserOutput.getRedirect())) {
        // set up a redirect
        topic.setRedirectTo(parserOutput.getRedirect());
        topic.setTopicType(Topic.TYPE_REDIRECT);
    } else if (topic.getTopicType() == Topic.TYPE_REDIRECT) {
        // no longer a redirect
        topic.setRedirectTo(null);
        topic.setTopicType(Topic.TYPE_ARTICLE);
    }
    TopicVersion topicVersion = new TopicVersion(user, ServletUtil.getIpAddress(request), request.getParameter("editComment"), contents);
    // if (request.getParameter("minorEdit") == null) {
    // topicVersion.setEditType(TopicVersion.EDIT_MINOR);
    // }
    System.out.println("notice:" + request.getParameter("noticeTopic"));
    if (request.getParameter("noticeTopic") != null) {
        topic.setTopicType(Topic.TYPE_NOTICE);
    }
    if (request.getParameter("editComment").equals("comment")) {
        // scm
        Comment comment = new Comment();
        String topicId = request.getParameter("topicId");
        comment.setTopicId(Integer.parseInt(topicId));
        comment.setCommentInfo(contents);
        comment.setIpAddress(ServletUtil.getIpAddress(request));
        comment.setUserId(user.getUserId());
        comment.setUserName(user.getUsername());
        WikiBase.getDataHandler().insertComment(comment);
    } else {
        WikiBase.getDataHandler().writeTopic(topic, topicVersion, parserOutput.getCategories(), parserOutput.getLinks(), true, null);
    }
    // update watchlist
    if (user.hasRole(Role.ROLE_USER)) {
        Watchlist watchlist = ServletUtil.currentWatchlist(request, virtualWiki);
        boolean watchTopic = (request.getParameter("watchTopic") != null);
        if (watchlist.containsTopic(topicName) != watchTopic) {
            WikiBase.getDataHandler().writeWatchlistEntry(watchlist, virtualWiki, topicName, user.getUserId(), null);
        }
    }
    // redirect to prevent user from refreshing and re-submitting
    String target = topic.getName();
    if (!StringUtils.isBlank(sectionName)) {
        target += "#" + sectionName;
    }
    ServletUtil.redirect(next, virtualWiki, target);
}
