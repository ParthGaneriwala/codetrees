public void testPendingReplicationRetry() throws IOException {
    MiniDFSCluster cluster = null;
    int numDataNodes = 4;
    String testFile = "/replication-test-file";
    Path testPath = new Path(testFile);
    byte[] buffer = new byte[1024];
    for (int i = 0; i < buffer.length; i++) {
        buffer[i] = '1';
    }
    try {
        Configuration conf = new Configuration();
        conf.set("dfs.replication", Integer.toString(numDataNodes));
        // first time format
        cluster = new MiniDFSCluster(0, conf, numDataNodes, true, true, null, null);
        cluster.waitActive();
        DFSClient dfsClient = new DFSClient(new InetSocketAddress("localhost", cluster.getNameNodePort()), conf);
        OutputStream out = cluster.getFileSystem().create(testPath);
        out.write(buffer);
        out.close();
        waitForBlockReplication(testFile, dfsClient.namenode, numDataNodes, -1);
        // get first block of the file.
        String block = dfsClient.namenode.getBlockLocations(testFile, 0, Long.MAX_VALUE).get(0).getBlock().getBlockName();
        cluster.shutdown();
        cluster = null;
        // Now mess up some of the replicas.
        // Delete the first and corrupt the next two.
        File baseDir = new File(System.getProperty("test.build.data"), "dfs/data");
        for (int i = 0; i < 25; i++) {
            buffer[i] = '0';
        }
        int fileCount = 0;
        for (int i = 0; i < 6; i++) {
            File blockFile = new File(baseDir, "data" + (i + 1) + "/current/" + block);
            LOG.info("Checking for file " + blockFile);
            if (blockFile.exists()) {
                if (fileCount == 0) {
                    LOG.info("Deleting file " + blockFile);
                    assertTrue(blockFile.delete());
                } else {
                    // corrupt it.
                    LOG.info("Corrupting file " + blockFile);
                    long len = blockFile.length();
                    assertTrue(len > 50);
                    RandomAccessFile blockOut = new RandomAccessFile(blockFile, "rw");
                    blockOut.seek(len / 3);
                    blockOut.write(buffer, 0, 25);
                }
                fileCount++;
            }
        }
        assertEquals(3, fileCount);
        /* Start the MiniDFSCluster with more datanodes since once a writeBlock
       * to a datanode node fails, same block can not be written to it
       * immediately. In our case some replication attempts will fail.
       */
        LOG.info("Restarting minicluster after deleting a replica and corrupting 2 crcs");
        conf = new Configuration();
        conf.set("dfs.replication", Integer.toString(numDataNodes));
        conf.set("dfs.replication.pending.timeout.sec", Integer.toString(2));
        conf.set("dfs.datanode.block.write.timeout.sec", Integer.toString(5));
        // only 3 copies exist
        conf.set("dfs.safemode.threshold.pct", "0.75f");
        cluster = new MiniDFSCluster(0, conf, numDataNodes * 2, false, true, null, null);
        cluster.waitActive();
        dfsClient = new DFSClient(new InetSocketAddress("localhost", cluster.getNameNodePort()), conf);
        waitForBlockReplication(testFile, dfsClient.namenode, numDataNodes, -1);
    } finally {
        if (cluster != null) {
            cluster.shutdown();
        }
    }
}
