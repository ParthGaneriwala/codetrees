private void loadParameters(PropDict pdTag) {
    readerType = Integer.parseInt(pdTag.getDef("product", ""));
    if (readerType < 0)
        return;
    readerName = pdTag.getDef("name", "");
    driver = pdTag.getDef("type");
    mode = pdTag.getDef("auto-mode").equals("1");
    interval = pdTag.getDef("interval");
    startType = pdTag.getDef("start-type", "");
    antenna = pdTag.getDef("antenna");
    readerId = pdTag.getDef("readerid");
    chainId = pdTag.getDef("chainid");
    timeFilter = pdTag.getDef("time-filter");
    switch(readerType) {
        case ReaderType.READER_ALIEN_9780:
        case ReaderType.READER_ALIEN_9640:
            if (readerType == ReaderType.READER_ALIEN_9780)
                reader = "Alien-9780";
            else
                // pHandle.setTip1("Alien 9780 is a ultra-hi-frequency 915Mhz RFID product");
                reader = "Alien-9640";
            // pHandle.setTip1("Alien 9640 is a ultra-hi-frequency 915Mhz RFID product");
            if (driver.equals("Serial")) {
                serialPort = pdTag.getDef("serial");
                baudRate = pdTag.getDef("baud");
                dataByte = pdTag.getDef("data-byte");
                parity = pdTag.getDef("parity");
                stopBit = pdTag.getDef("stop-bit");
                tagType = pdTag.getDef("tag-type");
            }
            if (driver.equals("Network")) {
                ip = pdTag.getDef("ip");
                port = pdTag.getDef("port");
                username = pdTag.getDef("username");
                password = pdTag.getDef("password");
                tagType = pdTag.getDef("tag-type");
                listenPort = pdTag.getDef("listener");
                workAction = pdTag.getDef("work");
                stopDelay = pdTag.getDef("delay");
                tagEvent = pdTag.getDef("event");
                persistTime = pdTag.getDef("persist", "0");
            }
            break;
        case ReaderType.READER_TI_S6410:
        case ReaderType.READER_TI_S6420:
        case ReaderType.READER_TI_7960:
        case ReaderType.READER_TI_S251B:
        case ReaderType.READER_MG500:
        case ReaderType.READER_KAB500:
        case ReaderType.READER_HOPELA_2214:
        case ReaderType.READER_FUDAN:
        case ReaderType.READER_DELICACY:
        case ReaderType.READER_HAWKVOR:
        case ReaderType.READER_RW202:
            if (readerType == ReaderType.READER_TI_S6410)
                reader = "Ti-S6410";
            else // pHandle.setTip1("Texas Instrument S6410 is a hi-frequency 13.56Mhz RFID product");
            if (readerType == ReaderType.READER_TI_S6420)
                reader = "Ti-S6420";
            else // pHandle.setTip1("Texas Instrument S6420 is a hi-frequency 13.56Mhz RFID product");
            if (readerType == ReaderType.READER_TI_7960)
                reader = "Ti-7960";
            else // pHandle.setTip1("Texas Instrument S7960 is a hi-frequency 13.56Mhz RFID product");
            if (readerType == ReaderType.READER_TI_S251B)
                reader = "Ti-S251B";
            else if (readerType == ReaderType.READER_MG500)
                reader = "Mg500";
            else // pHandle.setTip1("Texas Instrument S251B is a low-frequency 134Khz RFID product");
            if (readerType == ReaderType.READER_KAB500)
                reader = "Kab500";
            else // pHandle.setTip1("Texas Instrument S251B is a low-frequency 134Khz RFID product");
            if (readerType == ReaderType.READER_HOPELA_2214)
                reader = "Hopela-2214";
            else // pHandle.setTip1("Hopela G2 reader");
            if (readerType == ReaderType.READER_FUDAN)
                reader = "FuDan";
            else if (readerType == ReaderType.READER_DELICACY)
                reader = "Delicacy";
            else if (readerType == ReaderType.READER_HAWKVOR)
                reader = "HawkVor";
            else if (readerType == ReaderType.READER_RW202)
                reader = "RW202";
            // pHandle.setTip1("Texas Instrument S251B is a low-frequency 134Khz RFID product");
            serialPort = pdTag.getDef("serial");
            baudRate = pdTag.getDef("baud");
            dataByte = pdTag.getDef("data-byte");
            parity = pdTag.getDef("parity");
            stopBit = pdTag.getDef("stop-bit");
            tagType = pdTag.getDef("tag-type");
            if (readerType == ReaderType.READER_DELICACY || readerType == ReaderType.READER_HAWKVOR)
                power = pdTag.getDef("power");
            break;
        case ReaderType.READER_QUANRAY:
        case ReaderType.READER_HUASHEN:
            if (readerType == ReaderType.READER_QUANRAY)
                reader = "Quanray";
            else
                reader = "HuaShen";
            if (driver.equals("Serial")) {
                serialPort = pdTag.getDef("serial");
                baudRate = pdTag.getDef("baud");
                dataByte = pdTag.getDef("data-byte");
                parity = pdTag.getDef("parity");
                stopBit = pdTag.getDef("stop-bit");
                tagType = pdTag.getDef("tag-type");
            }
            if (driver.equals("Network")) {
                ip1 = pdTag.getDef("ip");
                port1 = pdTag.getDef("port");
                power = pdTag.getDef("power");
            }
            break;
        case ReaderType.READER_INSIDE_PORTABLE:
            reader = "Inside-Portable";
            // pHandle.setTip1("This is for InSide Portable Reader. 13.56MHz");
            key1 = pdTag.getDef("security-key1");
            key2 = pdTag.getDef("security-key2");
            key3 = pdTag.getDef("security-key3");
            break;
        case ReaderType.READER_SAMPLE:
            // pHandle.setTip1("RFID Server internal Sim reader. This is only for testing.");
            reader = "Sim-Reader";
            hex = pdTag.getDef("hex", "0").equals("1");
            antennaId = pdTag.getDef("antennaid");
            tagId = pdTag.getDef("tagid");
            userData = pdTag.getDef("sample-data");
            break;
    }
}
