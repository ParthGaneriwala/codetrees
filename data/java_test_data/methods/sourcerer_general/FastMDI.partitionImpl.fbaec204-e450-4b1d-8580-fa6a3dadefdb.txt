private void partitionImpl(int[] words, double[] center) {
    final int HALF_SIZE = words.length / 2 + 1;
    // find two points closest to the center
    double firstVal = Double.POSITIVE_INFINITY;
    double secondVal = Double.POSITIVE_INFINITY;
    int firstWord = -1;
    int secondWord = -1;
    GrowingIntArray cluster1 = new GrowingIntArray(HALF_SIZE);
    GrowingIntArray cluster2 = new GrowingIntArray(HALF_SIZE);
    double[] newCenter1 = null;
    double[] newCenter2 = null;
    if (words.length > 2) {
        for (int word : words) {
            double dist = distanceToCenter(word, center);
            if (dist < secondVal) {
                if (dist < firstVal) {
                    secondVal = firstVal;
                    secondWord = firstWord;
                    firstVal = dist;
                    firstWord = word;
                } else {
                    secondVal = dist;
                    secondWord = word;
                }
            }
        }
        if (distance(firstWord, secondWord) <= 0.0) {
            // pick an arbitrary second word
            for (int word : words) {
                if (word == firstWord || word == secondWord)
                    continue;
                if (distance(firstWord, word) > 0.0) {
                    secondWord = word;
                    break;
                }
            }
        // System.out.printf("selected '%s' and '%s'\n", firstWord, secondWord);
        }
        double[] center1 = getCenter(new int[] { firstWord });
        double[] center2 = getCenter(new int[] { secondWord });
        for (int word : words) {
            double dist1 = distanceToCenter(word, center1);
            double dist2 = distanceToCenter(word, center2);
            if (dist1 < dist2) {
                cluster1.add(word);
            } else {
                cluster2.add(word);
            }
        }
        int changed = 1;
        int iteration = 0;
        while (++iteration <= MAX_ITERATIONS && changed > 0) {
            // System.out.printf("Iteration %d/%d\n", iteration, MAX_ITERATIONS);
            changed = 0;
            newCenter1 = getCenter(cluster1.array(), 0, cluster1.size());
            newCenter2 = getCenter(cluster2.array(), 0, cluster2.size());
            GrowingIntArray tmpCluster1 = new GrowingIntArray(HALF_SIZE);
            GrowingIntArray tmpCluster2 = new GrowingIntArray(HALF_SIZE);
            int[] cluster1array = cluster1.array();
            for (int i = 0; i < cluster1.size(); ++i) {
                int word = cluster1array[i];
                double dist1 = distanceToCenter(word, newCenter1);
                double dist2 = distanceToCenter(word, newCenter2);
                if (dist1 <= dist2) {
                    tmpCluster1.add(word);
                } else {
                    tmpCluster2.add(word);
                    changed++;
                // System.out.printf("changing %s : %g > %g\n", word, dist1, dist2);
                }
            }
            int[] cluster2array = cluster2.array();
            for (int i = 0; i < cluster2.size(); ++i) {
                int word = cluster2array[i];
                double dist1 = distanceToCenter(word, newCenter1);
                double dist2 = distanceToCenter(word, newCenter2);
                if (dist2 <= dist1) {
                    tmpCluster2.add(word);
                } else {
                    tmpCluster1.add(word);
                    changed++;
                // System.out.printf("changing %s : %g < %g\n", word, dist1, dist2);
                }
            }
            cluster1 = tmpCluster1;
            cluster2 = tmpCluster2;
            // System.out.printf("changed: %d/%d\n", changed, vocab.size());
            if (cluster1.size() == 0 || cluster2.size() == 0) {
                GrowingIntArray cl = cluster1.size() == 0 ? cluster2 : cluster1;
                // System.out.printf("Cannot split %s, split them randomly\n", cl.toString());
                tmpCluster1 = new GrowingIntArray(HALF_SIZE);
                tmpCluster2 = new GrowingIntArray(HALF_SIZE);
                int[] clusterArray = cl.array();
                boolean b = true;
                for (int i = 0; i < cl.size(); ++i) {
                    int word = clusterArray[i];
                    if (b) {
                        tmpCluster1.add(word);
                    } else {
                        tmpCluster2.add(word);
                    }
                    b = !b;
                }
                cluster1 = tmpCluster1;
                cluster2 = tmpCluster2;
            }
        }
    } else if (words.length == 2) {
        int word1 = words[0];
        int word2 = words[1];
        cluster1.add(word1);
        cluster2.add(word2);
        newCenter1 = getCenter(new int[] { word1 });
        newCenter2 = getCenter(new int[] { word2 });
    } else {
        return;
    }
    cluster1.trim();
    cluster2.trim();
    if (notifyNewCluster(words, cluster1.array(), cluster2.array())) {
        partition(cluster1.array(), newCenter1);
        partition(cluster2.array(), newCenter2);
    }
}
