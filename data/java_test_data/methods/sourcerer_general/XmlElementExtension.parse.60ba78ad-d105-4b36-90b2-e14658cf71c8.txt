public void parse(String lXmlString) {
    // split the xml tag in different lines
    StringTokenizer lTok = new StringTokenizer(lXmlString, "\n");
    int lLineCounter = 0;
    int lLineNumber = lTok.countTokens();
    String lChildrenString = "";
    String lChildrenStopper = "";
    boolean lChildDetected = false;
    while (lTok.hasMoreElements()) {
        // read line by line
        String lLine = (String) lTok.nextElement();
        lLine = lLine.trim();
        if (lLineCounter == 0) {
            // first line, get the title and the attributes
            boolean lTitleSetting = true;
            boolean lInAttributeKey = false;
            boolean lInAttributeValue = false;
            iTitle = "";
            String key = "";
            String value = "";
            for (int i = 1; i < lLine.length(); i++) {
                if (lTitleSetting) {
                    // create the title
                    if (lLine.charAt(i) == ' ' || lLine.charAt(i) == '>') {
                        // end of the title
                        lTitleSetting = false;
                        lInAttributeKey = true;
                    } else {
                        // it's not yet the title end, append the title with one char
                        iTitle = iTitle + lLine.charAt(i);
                    }
                } else {
                    // title is set, look for attributes
                    if (lInAttributeKey && lLine.charAt(i) != ' ') {
                        if (lLine.charAt(i) == '=') {
                        // do nothing
                        } else if (lLine.charAt(i) == '\"') {
                            // end of this attribute
                            lInAttributeKey = false;
                            lInAttributeValue = true;
                        } else {
                            // it's not yet the end of the attribute, append the attribute with one char
                            key = key + lLine.charAt(i);
                        }
                    } else if (lInAttributeValue) {
                        // attribute value is set
                        if (lLine.charAt(i) != '\"') {
                            value = value + lLine.charAt(i);
                        } else {
                            // add it to the attribute HashMap
                            lInAttributeValue = false;
                            lInAttributeKey = true;
                            iAttributes.put(key, value);
                            key = "";
                            value = "";
                        }
                    }
                }
            }
        } else if (lLineCounter + 1 == lLineNumber) {
        // last line closing xml tag
        // do nothing
        } else if (lLine.startsWith("<")) {
            // This is not the first line but we fine a "<" at the start => child detected
            if (lChildDetected) {
                // we have a child of more than one line
                if (lLine.indexOf(lChildrenStopper) > -1) {
                    // stop child
                    iChildren.add(new XmlElementExtension(lChildrenString + "\r\n     " + lLine, iIndexElementExtension, true));
                    lChildDetected = false;
                } else {
                    // end of the child not yet detected , append the lChildrenString
                    lChildrenString = lChildrenString + "\r\n     " + lLine;
                }
            } else {
                if (lLine.endsWith("/>")) {
                    // a child without childs is detected
                    // add it to this XmlElementExtension
                    iChildren.add(new XmlElementExtension(lLine, iIndexElementExtension, true));
                } else {
                    // a child with childs (different lines) is detected
                    lChildDetected = true;
                    lChildrenString = lLine;
                    // find where this lines stops
                    lChildrenStopper = "</";
                    lChildrenStopper = lChildrenStopper + lLine.substring(lLine.indexOf("<") + 1, lLine.indexOf(" ", lLine.indexOf("<")));
                    if (lLine.indexOf(lChildrenStopper) > -1) {
                        // stop child
                        iChildren.add(new XmlElementExtension(lChildrenString, iIndexElementExtension, true));
                        lChildDetected = false;
                    }
                }
            }
        } else {
            // line is the value of this xml tag
            iValue = lLine;
        }
        lLineCounter = lLineCounter + 1;
    }
}
