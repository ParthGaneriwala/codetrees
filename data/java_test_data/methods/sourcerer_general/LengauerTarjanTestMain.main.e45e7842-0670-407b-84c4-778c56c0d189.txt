public static void main(String[] args) {
    LengauerTarjanTestMain lttm = new LengauerTarjanTestMain();
    // Node startNode = new Node("A");
    // Node startNode = new Node("B0");
    Node startNode = new Node("1");
    DiGraph graph = lttm.createGraph(startNode);
    DominatorCalculationContext dominatorCalculationContext = new DominatorCalculationContext(graph, startNode);
    dominatorCalculationContext.setLengauerTarjan();
    DominatorTree dominatorTree = dominatorCalculationContext.getDominatorTree();
    DominatorTreeNode dominatorTreeNode = dominatorTree.getDominatorTreeRoot();
    System.out.println("DOMINATOR TREE: ");
    dominatorTreeNode.display();
    // Calculate the dominance frontiers
    HashMap dominanceFrontiers = new HashMap();
    int numGraphNodes = graph.getNumNodes();
    for (int i = 0; i < numGraphNodes; i++) {
        Node node = (Node) graph.getNode(i);
        Vector predecessors = node.getPredecessors();
        int numPreds = predecessors.size();
        if (numPreds > 1) {
            // This node has more than predecessor
            Node immediateDominator = dominatorTree.getParentInTree(node);
            for (int j = 0; j < numPreds; j++) {
                Node predecessor = (Node) predecessors.elementAt(j);
                Node runner = predecessor;
                while (runner != immediateDominator) {
                    // if(runner == node) break;
                    addToDominanceFrontier(dominanceFrontiers, runner, node);
                    runner = dominatorTree.getParentInTree(runner);
                }
            }
        }
    }
    // Display the dominance frontiers
    System.out.println("DOMINANCE FRONTIERS: ");
    for (int j = 0; j < numGraphNodes; j++) {
        Node node = (Node) graph.getNode(j);
        System.out.print("Node " + node.getName() + ": ");
        HashSet members = (HashSet) dominanceFrontiers.get(node);
        if (members != null) {
            Iterator iter = members.iterator();
            while (iter.hasNext()) {
                Node mem = (Node) iter.next();
                System.out.print(mem.getName() + ", ");
            }
        }
        System.out.println("");
    }
}
