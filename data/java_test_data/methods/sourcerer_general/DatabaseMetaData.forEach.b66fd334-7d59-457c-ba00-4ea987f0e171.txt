void forEach(Object catalogStr) throws SQLException {
    ResultSet fkresults = null;
    try {
        /*
							 * Get foreign key information for table
							 */
        if (conn.versionMeetsMinimum(3, 23, 50)) {
            // we can use 'SHOW CREATE TABLE'
            fkresults = extractForeignKeyFromCreateTable(catalogStr.toString(), table);
        } else {
            StringBuffer queryBuf = new StringBuffer("SHOW TABLE STATUS ");
            queryBuf.append(" FROM ");
            queryBuf.append(quotedId);
            queryBuf.append(catalogStr.toString());
            queryBuf.append(quotedId);
            queryBuf.append(" LIKE '");
            queryBuf.append(table);
            queryBuf.append("'");
            fkresults = stmt.executeQuery(queryBuf.toString());
        }
        while (fkresults.next()) {
            String tableType = fkresults.getString("Type");
            if ((tableType != null) && (tableType.equalsIgnoreCase("innodb") || tableType.equalsIgnoreCase(SUPPORTS_FK))) {
                String comment = fkresults.getString("Comment").trim();
                if (comment != null) {
                    StringTokenizer commentTokens = new StringTokenizer(comment, ";", false);
                    if (commentTokens.hasMoreTokens()) {
                        // Skip
                        commentTokens.nextToken();
                        while (commentTokens.hasMoreTokens()) {
                            String keys = commentTokens.nextToken();
                            getImportKeyResults(catalogStr.toString(), table, keys, rows);
                        }
                    }
                }
            }
        }
    } finally {
        if (fkresults != null) {
            try {
                fkresults.close();
            } catch (SQLException sqlEx) {
                AssertionFailedException.shouldNotHappen(sqlEx);
            }
            fkresults = null;
        }
    }
}
