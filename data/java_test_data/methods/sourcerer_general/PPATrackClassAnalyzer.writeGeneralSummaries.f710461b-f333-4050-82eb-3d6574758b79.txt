private void writeGeneralSummaries() {
    // write out summaries for %correct by k
    // write out summaries for certainty by k
    double[][] corrOpByK = new double[7][300];
    double[][] corrClByK = new double[5][300];
    double[][] certOpByK = new double[7][300];
    double[][] certClByK = new double[5][300];
    File pctCorrectOperatorByK = new File("D:/synthLandscan/randomStarts/momentData/summaries/" + knn + moment + "PctCorrectOperatorByK.csv");
    File pctCorrectClassByK = new File("D:/synthLandscan/randomStarts/momentData/summaries/" + knn + moment + "PctCorrectClassByK.csv");
    File certaintyOperatorByK = new File("D:/synthLandscan/randomStarts/momentData/summaries/" + knn + moment + "CertaintyOperatorByK.csv");
    File certaintyClassByK = new File("D:/synthLandscan/randomStarts/momentData/summaries/" + knn + moment + "CertaintyClassByK.csv");
    try {
        FileWriter pctCorrectOperatorByKWriter = new FileWriter(pctCorrectOperatorByK);
        FileWriter pctCorrectClassByKWriter = new FileWriter(pctCorrectClassByK);
        FileWriter certaintyOperatorByKWriter = new FileWriter(certaintyOperatorByK);
        FileWriter certaintyClassByKWriter = new FileWriter(certaintyClassByK);
        for (int op = 0; op < 7; op++) {
            for (int k2 = 0; k2 < 300; k2++) {
                for (int kl = 0; kl < 5; kl++) {
                    // div by 200 instead of div by 40 because we want the percent across all classes, and this is equivalent to adding up all class-specific percent corrects and dividing by 5.
                    corrOpByK[op][k2] += myClasses[k2][op][kl][kl] / (counts[0] * 5d);
                    // div by 5 again to average over all classes
                    certOpByK[op][k2] += myMasses[k2][op][kl][kl] / 5;
                    // div by 280 instead of by 40 to average over all operators
                    corrClByK[kl][k2] += myClasses[k2][op][kl][kl] / (counts[0] * 7d);
                    // div by 7 to average over all operators.
                    certClByK[kl][k2] += myMasses[k2][op][kl][kl] / 7;
                }
            }
        }
        for (int k2 = 2; k2 < 302; k2++) {
            pctCorrectOperatorByKWriter.write("," + k2);
            pctCorrectClassByKWriter.write("," + k2);
            certaintyOperatorByKWriter.write("," + k2);
            certaintyClassByKWriter.write("," + k2);
        }
        pctCorrectOperatorByKWriter.write('\n');
        pctCorrectClassByKWriter.write('\n');
        certaintyOperatorByKWriter.write('\n');
        certaintyClassByKWriter.write('\n');
        for (int index = 0; index < 5; index++) {
            pctCorrectOperatorByKWriter.write(operators[index] + ",");
            pctCorrectClassByKWriter.write(classNames[index + 1] + ",");
            certaintyOperatorByKWriter.write(operators[index] + ",");
            certaintyClassByKWriter.write(classNames[index + 1] + ",");
            for (int k2 = 0; k2 < 300; k2++) {
                pctCorrectOperatorByKWriter.write(corrOpByK[index][k2] + ",");
                pctCorrectClassByKWriter.write(corrClByK[index][k2] + ",");
                certaintyOperatorByKWriter.write(certOpByK[index][k2] + ",");
                certaintyClassByKWriter.write(certClByK[index][k2] + ",");
            }
            pctCorrectOperatorByKWriter.write('\n');
            pctCorrectClassByKWriter.write('\n');
            certaintyOperatorByKWriter.write('\n');
            certaintyClassByKWriter.write('\n');
            System.out.println("finished writing row " + index);
        }
        for (int blob = 5; blob < 7; blob++) {
            pctCorrectOperatorByKWriter.write(operators[blob] + ",");
            certaintyOperatorByKWriter.write(operators[blob] + ",");
            for (int k2 = 0; k2 < 300; k2++) {
                pctCorrectOperatorByKWriter.write(corrOpByK[blob][k2] + ",");
                certaintyOperatorByKWriter.write(certOpByK[blob][k2] + ",");
            }
            pctCorrectOperatorByKWriter.write('\n');
            certaintyOperatorByKWriter.write('\n');
            System.out.println("finished writing row " + blob);
        }
        pctCorrectOperatorByKWriter.close();
        pctCorrectClassByKWriter.close();
        certaintyOperatorByKWriter.close();
        certaintyClassByKWriter.close();
    } catch (IOException ioe) {
        System.out.println("ioexception: " + ioe.getMessage());
    }
}
