public void start(BundleContext context) throws Exception {
    // ---------streamFeature
    ChristyStreamFeature tlsFeature = new ChristyStreamFeature("starttls", "urn:ietf:params:xml:ns:xmpp-tls", ChristyStreamFeature.SupportedType.afterConnected);
    tlsFeature.setRequired(true);
    tlsFeatureRegistration = context.registerService(ChristyStreamFeature.class.getName(), tlsFeature, null);
    ChristyStreamFeature resourceBindFeature = new ChristyStreamFeature("bind", "urn:ietf:params:xml:ns:xmpp-bind", ChristyStreamFeature.SupportedType.afterAuth);
    resourceBindFeatureRegistration = context.registerService(ChristyStreamFeature.class.getName(), resourceBindFeature, null);
    ChristyStreamFeature sessionFeature = new ChristyStreamFeature("session", "urn:ietf:params:xml:ns:xmpp-session", ChristyStreamFeature.SupportedType.afterAuth);
    sessionFeatureRegistration = context.registerService(ChristyStreamFeature.class.getName(), sessionFeature, null);
    streamFeatureStracker = new ChristyStreamFeatureServiceTracker(context);
    streamFeatureStracker.open();
    // ---------streamFeature
    // sslcontext
    SSLContext sslContext = BogusSSLContextFactory.getInstance(true);
    Hashtable<String, String> prop = new Hashtable<String, String>();
    prop.put("tlsContext", "true");
    sslContextRegistration = context.registerService(SSLContext.class.getName(), sslContext, prop);
    tlsContextServiceTracker = new TlsContextServiceTracker(context);
    tlsContextServiceTracker.open();
    // sslcontext
    String appPath = System.getProperty("appPath");
    XMLConfiguration config = new XMLConfiguration(appPath + "/defaultc2s.xml");
    SubnodeConfiguration subConifg = config.configurationAt("dbconfig");
    // authenticator
    connPool = new ConnectionPool("com.mysql.jdbc.Driver", subConifg.getString("url"), subConifg.getString("user"), subConifg.getString("password"));
    connPool.createPool();
    PlainUserAuthenticatorImpl plainUserAuthenticator = new PlainUserAuthenticatorImpl(connPool);
    plainUserAuthenticatorRegistration = context.registerService(UserAuthenticator.class.getName(), plainUserAuthenticator, null);
    userAuthenticatorTracker = new UserAuthenticatorTracker(context);
    userAuthenticatorTracker.open();
    // authenticator
    routeMessageParserServiceTracker = new RouteMessageParserServiceTracker(context);
    routeMessageParserServiceTracker.open();
    xmppParserServiceTracker = new XmppParserServiceTracker(context);
    xmppParserServiceTracker.open();
    loggerServiceTracker = new LoggerServiceTracker(context);
    loggerServiceTracker.open();
    C2SManagerImpl c2sManager = new C2SManagerImpl(streamFeatureStracker, tlsContextServiceTracker, userAuthenticatorTracker, xmppParserServiceTracker, routeMessageParserServiceTracker, loggerServiceTracker);
    String name = config.getString("name", "c2s_1");
    c2sManager.setName(name);
    String domain = config.getString("domain", "example.com");
    c2sManager.setDomain(domain);
    String routerIp = config.getString("router-ip", "localhost");
    c2sManager.setRouterIp(routerIp);
    String routerPassword = config.getString("router-password", "md5password");
    c2sManager.setRouterPassword(routerPassword);
    int routerPort = config.getInt("router-port", 8787);
    c2sManager.setRouterPort(routerPort);
    int clientLimit = config.getInt("client-limit", 0);
    c2sManager.setClientLimit(clientLimit);
    int xmppClientPort = config.getInt("xmpp-client-port", 5222);
    c2sManager.setXmppClientPort(xmppClientPort);
    c2sManager.start();
    c2sManagerRegistration = context.registerService(C2SManager.class.getName(), c2sManager, null);
    defaultC2sController = new DefaultC2sController(c2sManager);
    defaultC2sController.start();
}
