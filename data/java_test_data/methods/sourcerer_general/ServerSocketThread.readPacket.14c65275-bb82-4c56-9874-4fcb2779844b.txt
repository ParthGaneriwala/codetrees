private byte[] readPacket(ClientSocket client, ClientPacketHandler clientHandler) throws IOException {
    // Read until:
    // - Timeout
    // - IO error
    // - Read 'maxLen' characters
    // - Read 'actualLen' characters
    /* timeouts */
    long idleTimeoutMS = ServerSocketThread.this.getIdleTimeout();
    long pcktTimeoutMS = ServerSocketThread.this.getPacketTimeout();
    long pcktTimeoutAt = (idleTimeoutMS > 0L) ? (DateTime.getCurrentTimeMillis() + idleTimeoutMS) : -1L;
    /* packet/read length */
    int maxLen = ServerSocketThread.this.getMaximumPacketLength();
    int minLen = ServerSocketThread.this.getMinimumPacketLength();
    /* set default socket timeout */
    // client.setSoTimeout(10000);
    /* packet */
    byte[] packet = new byte[maxLen];
    int packetLen = 0;
    boolean isIdle = true;
    try {
        while (true) {
            /* read byte */
            int lastByte = this.readByte(client, pcktTimeoutAt, packetLen);
            /* reset idle timeout */
            if (isIdle) {
                isIdle = false;
                if (pcktTimeoutMS > 0L) {
                    // reset packet timeout
                    pcktTimeoutAt = DateTime.getCurrentTimeMillis() + pcktTimeoutMS;
                }
            }
            // save byte
            packet[packetLen++] = (byte) lastByte;
            /* check lengths */
            if (packetLen >= maxLen) {
                // we've read all the bytes we can
                break;
            }
            if ((clientHandler != null) && (packetLen >= minLen)) {
                if (clientHandler.fullPacket(packet, packetLen)) {
                    // we found end of packet
                    break;
                }
            }
        }
    } catch (SSReadTimeoutException t) {
        // This could mean a protocol error
        if (packetLen > 0) {
            String h = StringTools.toHexString(packet, 0, packetLen);
            Print.logWarn("Timout: " + h);
        }
        if (ServerSocketThread.this.getTerminateOnTimeout()) {
            throw t;
        }
    } catch (SSEndOfStreamException eos) {
        // This could mean a protocol error
        if (packetLen > 0) {
            String h = StringTools.toHexString(packet, 0, packetLen);
            Print.logWarn("EOS: " + h);
        }
        Print.logError(eos.getMessage());
        throw eos;
    } catch (SocketException se) {
        Print.logError("ReadPacket error - " + se);
        throw se;
    } catch (IOException ioe) {
        Print.logError("ReadPacket error - " + ioe);
        throw ioe;
    }
    /* return packet */
    if (packet.length == packetLen) {
        throw new IOException("Packet exceeds max length");
    } else {
        // resize buffer
        byte[] newPacket = new byte[packetLen];
        System.arraycopy(packet, 0, newPacket, 0, packetLen);
        return newPacket;
    }
}
