public void add(Real a) {
    if ((this.exponent < 0 && this.mantissa != 0) || (a.exponent < 0 && a.mantissa != 0)) {
        makeNan();
        return;
    }
    if ((this.exponent < 0 && this.mantissa == 0) || (a.exponent < 0 && a.mantissa == 0)) {
        if ((this.exponent < 0 && this.mantissa == 0) && (a.exponent < 0 && a.mantissa == 0) && sign != a.sign)
            makeNan();
        else
            makeInfinity((this.exponent < 0 && this.mantissa == 0) ? sign : a.sign);
        return;
    }
    if ((this.exponent == 0 && this.mantissa == 0) || (a.exponent == 0 && a.mantissa == 0)) {
        if ((this.exponent == 0 && this.mantissa == 0)) {
            this.mantissa = a.mantissa;
            this.exponent = a.exponent;
            this.sign = a.sign;
        }
        ;
        if ((this.exponent == 0 && this.mantissa == 0))
            sign = 0;
        return;
    }
    byte s;
    int e;
    long m;
    if (exponent > a.exponent || (exponent == a.exponent && mantissa >= a.mantissa)) {
        s = a.sign;
        e = a.exponent;
        m = a.mantissa;
    } else {
        s = sign;
        e = exponent;
        m = mantissa;
        sign = a.sign;
        exponent = a.exponent;
        mantissa = a.mantissa;
    }
    int shift = exponent - e;
    if (shift >= 64)
        return;
    if (sign == s) {
        mantissa += m >>> shift;
        if (mantissa >= 0 && shift > 0 && ((m >>> (shift - 1)) & 1) != 0)
            // We don't need normalization, so round now
            mantissa++;
        if (mantissa < 0) {
            // Simplified normalize()
            mantissa = (mantissa + 1) >>> 1;
            exponent++;
            if (exponent < 0) {
                // Overflow
                makeInfinity(sign);
                return;
            }
        }
    } else {
        if (shift > 0) {
            // Shift mantissa up to increase accuracy
            mantissa <<= 1;
            exponent--;
            shift--;
        }
        m = -m;
        mantissa += m >> shift;
        if (mantissa >= 0 && shift > 0 && ((m >>> (shift - 1)) & 1) != 0)
            // We don't need to shift down, so round now
            mantissa++;
        if (mantissa < 0) {
            // Simplified normalize()
            mantissa = (mantissa + 1) >>> 1;
            // Can't overflow
            exponent++;
        } else if (shift == 0) {
            // standing, the result should most likely be 0...
            if (magicRounding && mantissa > 0 && mantissa <= 7) {
                // If arguments were integers <= 2^63-1, then don't
                // do the magic rounding anyway.
                // This is a bit "post mortem" investigation but it happens
                // so seldom that it's no problem to spend the extra time.
                m = -m;
                if (exponent == 0x4000003c || exponent == 0x4000003d || (exponent == 0x4000003e && mantissa + m > 0)) {
                    long mask = (1 << (0x4000003e - exponent)) - 1;
                    if ((mantissa & mask) != 0 || (m & mask) != 0)
                        mantissa = 0;
                } else
                    mantissa = 0;
            }
            normalize();
        }
    // else... if (shift>=1 && mantissa>=0) it should be a-ok
    }
    if ((this.exponent == 0 && this.mantissa == 0))
        sign = 0;
}
