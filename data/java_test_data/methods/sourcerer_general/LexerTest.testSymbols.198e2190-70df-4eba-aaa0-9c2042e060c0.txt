public void testSymbols() throws Exception {
    TokenStream ts = getLexerFor("+ - = += -= / * /= *= : ! ~ @ % %=");
    LocatableToken token = (LocatableToken) ts.nextToken();
    assertTrue(token.getType() == JavaTokenTypes.PLUS);
    token = (LocatableToken) ts.nextToken();
    assertTrue(token.getType() == JavaTokenTypes.MINUS);
    token = (LocatableToken) ts.nextToken();
    assertTrue(token.getType() == JavaTokenTypes.ASSIGN);
    token = (LocatableToken) ts.nextToken();
    assertTrue(token.getType() == JavaTokenTypes.PLUS_ASSIGN);
    token = (LocatableToken) ts.nextToken();
    assertTrue(token.getType() == JavaTokenTypes.MINUS_ASSIGN);
    token = (LocatableToken) ts.nextToken();
    assertTrue(token.getType() == JavaTokenTypes.DIV);
    token = (LocatableToken) ts.nextToken();
    assertTrue(token.getType() == JavaTokenTypes.STAR);
    token = (LocatableToken) ts.nextToken();
    assertTrue(token.getType() == JavaTokenTypes.DIV_ASSIGN);
    token = (LocatableToken) ts.nextToken();
    assertTrue(token.getType() == JavaTokenTypes.STAR_ASSIGN);
    token = (LocatableToken) ts.nextToken();
    assertTrue(token.getType() == JavaTokenTypes.COLON);
    token = (LocatableToken) ts.nextToken();
    assertTrue(token.getType() == JavaTokenTypes.LNOT);
    token = (LocatableToken) ts.nextToken();
    assertTrue(token.getType() == JavaTokenTypes.BNOT);
    token = (LocatableToken) ts.nextToken();
    assertTrue(token.getType() == JavaTokenTypes.AT);
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.MOD, token.getType());
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.MOD_ASSIGN, token.getType());
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.EOF, token.getType());
    ts = getLexerFor("& | && || &= |= ^ ^= . ...");
    token = (LocatableToken) ts.nextToken();
    assertTrue(token.getType() == JavaTokenTypes.BAND);
    token = (LocatableToken) ts.nextToken();
    assertTrue(token.getType() == JavaTokenTypes.BOR);
    token = (LocatableToken) ts.nextToken();
    assertTrue(token.getType() == JavaTokenTypes.LAND);
    token = (LocatableToken) ts.nextToken();
    assertTrue(token.getType() == JavaTokenTypes.LOR);
    token = (LocatableToken) ts.nextToken();
    assertTrue(token.getType() == JavaTokenTypes.BAND_ASSIGN);
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.BOR_ASSIGN, token.getType());
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.BXOR, token.getType());
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.BXOR_ASSIGN, token.getType());
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.DOT, token.getType());
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.TRIPLE_DOT, token.getType());
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.EOF, token.getType());
    ts = getLexerFor("<< >> <<= >>= >>> >>>=");
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.SL, token.getType());
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.SR, token.getType());
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.SL_ASSIGN, token.getType());
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.SR_ASSIGN, token.getType());
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.BSR, token.getType());
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.BSR_ASSIGN, token.getType());
    ts = getLexerFor("< > <= >= != ==");
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.LT, token.getType());
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.GT, token.getType());
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.LE, token.getType());
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.GE, token.getType());
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.NOT_EQUAL, token.getType());
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.EQUAL, token.getType());
}
