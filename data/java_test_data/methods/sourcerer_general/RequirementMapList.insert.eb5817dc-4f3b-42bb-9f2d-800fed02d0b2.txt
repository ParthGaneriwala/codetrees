public void insert(Connection db) throws SQLException {
    HashMap assignmentMap = new HashMap();
    HashMap folderMap = new HashMap();
    Iterator i = this.iterator();
    int prevIndent = -1;
    int prevMapId = -1;
    while (i.hasNext()) {
        RequirementMapItem thisItem = (RequirementMapItem) i.next();
        if (thisItem.getAssignmentId() > -1) {
            Assignment thisAssignment = new Assignment(db, thisItem.getAssignmentId());
            thisAssignment.setProjectId(projectId);
            thisAssignment.setRequirementId(requirementId);
            thisAssignment.setEnteredBy(enteredBy);
            thisAssignment.setModifiedBy(modifiedBy);
            thisAssignment.setId(-1);
            thisAssignment.setOffset(offset);
            if (resetStatus) {
                thisAssignment.setCompleteDate((Timestamp) null);
                thisAssignment.setStatusId(1);
                thisAssignment.setPercentComplete(-1);
            }
            if (thisAssignment.getFolderId() > -1) {
                if (folderMap.containsKey(new Integer(thisAssignment.getFolderId()))) {
                    int folderId = ((Integer) folderMap.get(new Integer(thisAssignment.getFolderId()))).intValue();
                    thisAssignment.setFolderId(folderId);
                } else {
                    thisAssignment.setFolderId(-1);
                }
            }
            thisAssignment.setPrevIndent(prevIndent);
            thisAssignment.setPrevMapId(prevMapId);
            thisAssignment.setIndent(thisItem.getIndent());
            thisAssignment.insert(db);
            prevIndent = thisAssignment.getPrevIndent();
            prevMapId = thisAssignment.getPrevMapId();
            int newId = thisAssignment.getId();
        } else if (thisItem.getFolderId() > -1) {
            AssignmentFolder thisFolder = new AssignmentFolder(db, thisItem.getFolderId(), thisItem.getProjectId());
            int oldId = thisFolder.getId();
            thisFolder.setProjectId(projectId);
            thisFolder.setRequirementId(requirementId);
            thisFolder.setEnteredBy(enteredBy);
            thisFolder.setModifiedBy(modifiedBy);
            thisFolder.setId(-1);
            if (thisFolder.getParentId() > -1) {
                if (folderMap.containsKey(new Integer(thisFolder.getParentId()))) {
                    int parentId = ((Integer) folderMap.get(new Integer(thisFolder.getParentId()))).intValue();
                    thisFolder.setParentId(parentId);
                } else {
                    thisFolder.setParentId(-1);
                }
            }
            thisFolder.setPrevIndent(prevIndent);
            thisFolder.setPrevMapId(prevMapId);
            thisFolder.setIndent(thisItem.getIndent());
            thisFolder.insert(db);
            prevIndent = thisFolder.getPrevIndent();
            prevMapId = thisFolder.getPrevMapId();
            int newId = thisFolder.getId();
            folderMap.put(new Integer(oldId), new Integer(newId));
        }
    }
}
