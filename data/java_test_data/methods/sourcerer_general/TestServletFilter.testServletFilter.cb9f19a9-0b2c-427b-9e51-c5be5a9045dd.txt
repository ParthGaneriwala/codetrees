public void testServletFilter() throws Exception {
    Configuration conf = new Configuration();
    // start a http server with CountingFilter
    conf.set(HttpServer.FILTER_INITIALIZER_PROPERTY, CountingFilter.Initializer.class.getName());
    HttpServer http = new HttpServer("datanode", "localhost", 0, true, conf);
    http.start();
    final String fsckURL = "/fsck";
    final String stacksURL = "/stacks";
    final String ajspURL = "/a.jsp";
    final String[] urls = { fsckURL, stacksURL, ajspURL };
    final Random ran = new Random();
    final int[] sequence = new int[20];
    final int[] counts = new int[urls.length];
    // generate a random sequence and update counts
    for (int i = 0; i < sequence.length; i++) {
        sequence[i] = ran.nextInt(urls.length);
        counts[sequence[i]]++;
    }
    // access the urls as the sequence
    final String prefix = "http://localhost:" + http.getPort();
    try {
        for (int i = 0; i < sequence.length; i++) {
            access(prefix + urls[sequence[i]]);
        }
    } finally {
        http.stop();
    }
    LOG.info("COUNTS = " + COUNTS);
    // make sure fsck not get filtered
    assertFalse(COUNTS.containsKey(fsckURL));
    // verify other counts
    for (int i = 1; i < urls.length; i++) {
        if (counts[i] == 0) {
            assertFalse(COUNTS.containsKey(urls[i]));
        } else {
            assertEquals(counts[i], COUNTS.remove(urls[i]).intValue());
        }
    }
    assertTrue(COUNTS.isEmpty());
}
