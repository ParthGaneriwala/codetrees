private void munchMoveTempMemDestStm(Temp temp, AssemMemory assemMem) {
    AssemExp memChild = assemMem.getMemExp();
    int memChildType = memChild.getExpType();
    if (memChildType == AssemExp.BIN_OP) {
        AssemBinOpExp binOpExp = (AssemBinOpExp) memChild;
        int opr = binOpExp.getOperator();
        AssemExp leftChild = binOpExp.getLeft();
        AssemExp rightChild = binOpExp.getRight();
        if (opr == AssemBinOpExp.PLUS || opr == AssemBinOpExp.MINUS) {
            // This is a plus or minus operator; check further for a tile
            int leftChildType = leftChild.getExpType();
            int rightChildType = rightChild.getExpType();
            if (leftChildType == AssemExp.TEMP) {
                Temp lcTemp = ((AssemTemp) leftChild).getTemp();
                if (rightChildType == AssemExp.CONST) {
                    // Found a tile -> Move(Temp,(Mem(BinOp(Plus/Minus, Temp, Const)))
                    AssemConst assemConst = (AssemConst) rightChild;
                    int val = assemConst.getValue();
                    String signStr = "";
                    if (opr == AssemBinOpExp.MINUS)
                        signStr = "-";
                    Vector destList = new Vector();
                    destList.addElement(temp);
                    Vector srcList = new Vector();
                    srcList.addElement(lcTemp);
                    Operation instr = new Operation(destList, srcList, Operation.LOAD_FROM_TEMP_OFFSET_EXP_MEM, new Integer(signStr + val), null);
                    instructionsList.addElement(instr);
                } else {
                    Temp rhsTemp = munchExp(rightChild);
                    Vector destList = new Vector();
                    destList.addElement(temp);
                    Vector srcList = new Vector();
                    srcList.addElement(rhsTemp);
                    Operation instr = new Operation(destList, srcList, Operation.MOVE_TEMP_TO_TEMP, null, null);
                    instructionsList.addElement(instr);
                }
            } else if (leftChildType == AssemExp.CONST) {
                AssemConst assemConst = (AssemConst) leftChild;
                int val = assemConst.getValue();
                if (opr == AssemBinOpExp.PLUS && rightChildType == AssemExp.TEMP) {
                    // Found another tile -> Move(Temp,(Mem(BinOp(Plus, Const, Temp)))
                    Temp rightTemp = ((AssemTemp) rightChild).getTemp();
                    Vector destList = new Vector();
                    destList.addElement(temp);
                    Vector srcList = new Vector();
                    srcList.addElement(rightTemp);
                    Operation instr = new Operation(destList, srcList, Operation.LOAD_FROM_TEMP_OFFSET_EXP_MEM, new Integer(val), null);
                    instructionsList.addElement(instr);
                } else {
                    Temp newTemp = new Temp();
                    Vector destList1 = new Vector();
                    destList1.addElement(newTemp);
                    Operation instr = new Operation(destList1, null, Operation.LOAD_IMMEDIATE_VALUE, new Integer(val), null);
                    instructionsList.addElement(instr);
                    Vector destList = new Vector();
                    destList.addElement(temp);
                    Vector srcList = new Vector();
                    srcList.addElement(newTemp);
                    Operation instr1 = new Operation(destList, srcList, Operation.MOVE_TEMP_TO_TEMP, null, null);
                    instructionsList.addElement(instr1);
                }
            } else {
                // The left child is neither temp nor const
                Temp leftTemp = munchExp(leftChild);
                Temp rightTemp = munchExp(rightChild);
                Temp resultTemp = opTemps(opr, leftTemp, rightTemp, null);
                Vector destList = new Vector();
                destList.addElement(temp);
                Vector srcList = new Vector();
                srcList.addElement(resultTemp);
                Operation instr = new Operation(destList, srcList, Operation.MOVE_TEMP_TO_TEMP, null, null);
                instructionsList.addElement(instr);
            }
        } else {
            // The operator is neither plus nor minus
            Temp leftTemp = munchExp(leftChild);
            Temp rightTemp = munchExp(rightChild);
            Temp resultTemp = opTemps(opr, leftTemp, rightTemp, null);
            Vector destList = new Vector();
            destList.addElement(temp);
            Vector srcList = new Vector();
            srcList.addElement(resultTemp);
            Operation instr = new Operation(destList, srcList, Operation.MOVE_TEMP_TO_TEMP, null, null);
            instructionsList.addElement(instr);
        }
    } else {
        // The memory expression is not a binary operation.
        Temp memChildTemp = munchExp(memChild);
        Vector destList = new Vector();
        destList.addElement(temp);
        Vector srcList = new Vector();
        srcList.addElement(memChildTemp);
        Operation instr = new Operation(destList, srcList, Operation.LOAD_FROM_TEMP_OFFSET_EXP_MEM, new Integer(0), null);
        instructionsList.addElement(instr);
    }
}
