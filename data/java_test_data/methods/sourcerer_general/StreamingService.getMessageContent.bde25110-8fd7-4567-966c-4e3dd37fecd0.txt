public LEADSendable getMessageContent(Node n) {
    /* Checks if the current running Product is the 'Replayer' or Session Player in LateComer Mode */
    IProduct product = Platform.getProduct();
    if ((product.getId().compareTo("lead.replayer.replayer") == 0) || (product.getName().compareTo("Replayer") == 0))
        isReplayer = true;
    else
        isSessionReloading = true;
    while (true) {
        try {
            if ((StreamingServerManager.getServerStatus().compareTo("RUNNING")) != 0) {
                Thread.sleep(1500L);
            } else {
                Thread.sleep(3500L);
                break;
            }
        } catch (Exception e) {
        }
    }
    Element e = (Element) n;
    if (e.getNodeName().equals(GroupPresenceMessage.NODE_NAME)) {
        GroupPresenceMessage gpm = GroupPresenceMessage.getMessage(e);
        if (isReplayer)
            return gpm;
        else
            return null;
    }
    if (e.getNodeName().equals("StreamingControlMessage")) {
        // $NON-NLS-1$
        // $NON-NLS-1$
        String username = e.getAttribute("from");
        if ((username.compareTo(ConstantsUtils.TEACHER) != 0) && (isSessionReloading))
            return null;
        // $NON-NLS-1$
        String streamingCmd = e.getAttribute("streamingCmd");
        // $NON-NLS-1$
        String protocol = e.getAttribute("protocol");
        String address = null;
        if (protocol.startsWith("rtmp"))
            // $NON-NLS-1$
            address = "rtmp://" + getServerIPAddress() + "CoffeeStreaming";
        // $NON-NLS-1$
        String filename = e.getAttribute("filename");
        // $NON-NLS-1$
        String streamStatus = e.getAttribute("streamStatus");
        // $NON-NLS-1$
        String position = e.getAttribute("position");
        long timeToWait = 1000L;
        if (isSessionReloading) {
            if ((streamingCmd.compareTo("InitFlashPlayer") == 0) && (!(position.startsWith("0")))) {
                streamingCmd = "none";
                timeToWait = 10L;
            } else if ((streamingCmd.compareTo("StartFlashPlayer") == 0) && (!(position.startsWith("0")))) {
                streamingCmd = "none";
                timeToWait = 10L;
            } else if ((streamingCmd.compareTo("SeekToPosition") == 0) && (position.startsWith("0"))) {
                streamingCmd = "none";
                timeToWait = 10L;
            } else if ((streamingCmd.compareTo("PlayPause") == 0) || (streamingCmd.compareTo("SoundOnOff") == 0)) {
                streamingCmd = "none";
                timeToWait = 10L;
            }
        }
        if ((streamingCmd.compareTo("PlayPause") == 0) && (isReplayer)) {
            streamingCmd = "LocalPlayPause";
        }
        String cmdID = (new Long(lastCmdID.longValue() + 1)).toString();
        StreamingControlMessage scm = new StreamingControlMessage(username, streamingCmd, cmdID, protocol, address, filename, streamStatus, /*streamingController.NetStreamStatus,*/
        position);
        /* .................................................... */
        lastCmdID = new Long(scm.getCmdID());
        PerformedCmdID.put(lastCmdID, new Boolean(false));
        if (isReplayer)
            timeToWait = 10L;
        try {
            Thread.sleep(timeToWait);
        } catch (InterruptedException e1) {
            e1.printStackTrace();
        }
        return scm;
    }
    // $NON-NLS-1$
    throw new IllegalArgumentException("no valid node type: must be a StreamingControlMessage element");
}
