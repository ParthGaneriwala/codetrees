protected void handleOtherTag() {
    addText();
    pos += 1;
    int end = nextNonLiteral('>');
    String s = new String(msg, pos, end - pos).toLowerCase();
    // -----Is this a colour name?  ie.  <red> <blue> ...etc...
    int i1 = MessageElement.whichColourName(s);
    if (i1 >= 0) {
        MessageElement section = new MessageElement(settings, MessageElement.COLOUR_NAME, i1);
        add(section);
        pos = end;
    } else // -----Is this b i u or /b /i /u ?
    if (s.equals("b")) {
        add(new MessageElement(settings, MessageElement.BOLD));
        pos++;
    } else if (s.equals("/b")) {
        remove(MessageElement.BOLD);
        pos += 2;
    } else if (s.equals("i")) {
        add(new MessageElement(settings, MessageElement.ITALIC));
        pos++;
    } else if (s.equals("/i")) {
        remove(MessageElement.ITALIC);
        pos += 2;
    } else if (s.equals("u")) {
        add(new MessageElement(settings, MessageElement.UNDERLINE));
        pos++;
    } else if (s.equals("/u")) {
        remove(MessageElement.UNDERLINE);
        pos += 2;
    } else // -----Is this a /colour name?  ie.  </red> </blue> ...etc...
    if (s.length() > 1 && s.charAt(0) == '/') {
        int i2 = MessageElement.whichColourName(s.substring(1));
        if (i2 >= 0)
            remove(MessageElement.COLOUR_NAME, i2);
        pos = end;
    } else // -----<#rrggbb> ?
    if (s.startsWith("#")) {
        add(new MessageElement(settings, MessageElement.COLOUR_ABS, s.substring(1)));
        pos += 7;
    } else {
        // -----If we fail to identify the tag, put it out as text.  We've
        // -----already swallowed the opening '<', so add that to the start
        // -----of the new out buffer and let the parser pick up from the
        // -----next character.  (Unswallow last character!)
        out.append('<');
        pos--;
    }
}
