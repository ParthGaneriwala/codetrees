public static void firstTimeInit() throws Exception {
    log.debug("GlobalEvents::beforeApplicationStart()");
    File fver = new File(CSWConstants.propDirectory + "version.date");
    // Detect existing version
    int existingVersion = 0;
    if (fver.exists()) {
        FileInputStream fis = new FileInputStream(fver);
        existingVersion = Integer.parseInt(IOUtils.toString(fis).trim());
        fis.close();
        if (!fver.delete()) {
            log.error("Unable to delete version.date");
        }
    } else
        existingVersion = Integer.parseInt("20100501");
    if (new File(CSWConstants.profileDirectory).mkdirs()) {
        log.debug("Profile Directory: " + CSWConstants.profileDirectory + " created.");
    }
    if (new File(CSWConstants.tmpDirectory).mkdirs()) {
        log.debug("Cache/Temp Directory: " + CSWConstants.tmpDirectory + " created.");
    }
    if (new File(CSWConstants.dbDirectory).mkdirs()) {
        log.debug("DB Directory: " + CSWConstants.dbDirectory + " created.");
    }
    if (new File(CSWConstants.backupDirectory).mkdirs()) {
        log.debug("Backup Directory: " + CSWConstants.backupDirectory + " created.");
    }
    if (new File(CSWConstants.bibleDirectory).mkdirs()) {
        log.debug("Bible Directory: " + CSWConstants.bibleDirectory + " created.");
    }
    for (String filename : new File("default-bibles/").list()) {
        try {
            if (!new File(CSWConstants.bibleDirectory + filename).exists() && new File("default-bibles/" + filename).isFile())
                FileUtils.copyFile(new File("default-bibles/" + filename), new File(CSWConstants.bibleDirectory + filename));
        } catch (IOException e) {
            log.error(e, e);
        }
    }
    if (new File(CSWConstants.driverDirectory).mkdirs()) {
        log.debug("Drivers Directory: " + CSWConstants.driverDirectory + " created.");
    }
    for (String filename : new File("default-drivers/").list()) {
        try {
            if (!new File(CSWConstants.driverDirectory + filename).exists() && new File("default-drivers/" + filename).isFile())
                FileUtils.copyFile(new File("default-drivers/" + filename), new File(CSWConstants.driverDirectory + filename));
        } catch (IOException e) {
            log.error(e, e);
        }
    }
    if (new File(CSWConstants.templatesDirectory).mkdirs()) {
        log.debug("Templates Directory: " + CSWConstants.templatesDirectory + " created.");
    }
    for (String filename : new File("default-templates/").list()) {
        try {
            if (!new File(CSWConstants.templatesDirectory + filename).exists() && new File("default-templates/" + filename).isFile())
                FileUtils.copyFile(new File("default-templates/" + filename), new File(CSWConstants.templatesDirectory + filename));
        } catch (IOException e) {
            log.error(e, e);
        }
    }
    if (new File(CSWConstants.logsDirectory).mkdirs()) {
        log.debug("Logs Directory: " + CSWConstants.logsDirectory + " created.");
    }
    if (new File(CSWConstants.propDirectory).mkdirs()) {
        log.debug("Properties Directory: " + CSWConstants.propDirectory + " created.");
    }
    for (String filename : new File("default-props/").list()) {
        try {
            if (!new File(CSWConstants.propDirectory + filename).exists() && new File("default-props/" + filename).isFile())
                FileUtils.copyFile(new File("default-props/" + filename), new File(CSWConstants.propDirectory + filename));
        } catch (IOException e) {
            log.error(e, e);
        }
    }
    // Format: yyyyMMdd
    if (fver.exists()) {
        FileInputStream fis2 = new FileInputStream(fver);
        CSWConstants.VERSION_DATE = Integer.parseInt(IOUtils.toString(fis2).trim());
        fis2.close();
    } else
        CSWConstants.VERSION_DATE = Integer.parseInt("20100501");
    try {
        if (!PatchWorker.ApplyPatch(existingVersion, CSWConstants.VERSION_DATE))
            log.info("No patch applied (or) Patch not required [Installed Version=" + existingVersion + ";\tCurrent Version=" + CSWConstants.VERSION_DATE + "]. ");
        else
            log.info("Patch " + CSWConstants.VERSION_DATE + " successfully applied. Software is upgraded!");
    } catch (Exception e) {
        log.error(e, e);
    }
}
