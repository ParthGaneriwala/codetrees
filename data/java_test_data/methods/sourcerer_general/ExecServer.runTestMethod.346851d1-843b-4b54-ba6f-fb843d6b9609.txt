private static Object[] runTestMethod(String className, String methodName) {
    // Debug.message("[VM] runTestMethod" + className + " " + methodName);
    Class<?> cl = loadAndInitClass(className);
    TestCase testCase = null;
    // method name as a parameter
    try {
        Class<?>[] partypes = new Class[1];
        partypes[0] = String.class;
        Constructor<?> ct = cl.getConstructor(partypes);
        Object[] arglist = new Object[1];
        arglist[0] = methodName;
        testCase = (TestCase) ct.newInstance(arglist);
    } catch (NoSuchMethodException nsme) {
    } catch (InstantiationException ie) {
        throw new IllegalArgumentException("ie");
    } catch (IllegalAccessException iae) {
        throw new IllegalArgumentException("iae");
    } catch (InvocationTargetException ite) {
        throw new IllegalArgumentException("ite");
    }
    // the no-arguement constructor
    if (testCase == null) {
        try {
            testCase = (TestCase) cl.newInstance();
            testCase.setName(methodName);
        } catch (InstantiationException ie) {
        } catch (IllegalAccessException iae) {
        }
    }
    TestSuite suite = new TestSuite("bluej");
    suite.addTest(testCase);
    RemoteTestRunner runner = new RemoteTestRunner();
    TestResult tr = runner.doRun(suite);
    if (tr.errorCount() > 1 || tr.failureCount() > 1)
        throw new IllegalStateException("error or failure count was > 1");
    if (tr.errorCount() == 1) {
        for (Enumeration<?> e = tr.errors(); e.hasMoreElements(); ) {
            Object[] result = new Object[7];
            TestFailure tf = (TestFailure) e.nextElement();
            result[0] = tf.isFailure() ? "failure" : "error";
            result[1] = tf.exceptionMessage() != null ? tf.exceptionMessage() : "no exception message";
            result[2] = tf.trace() != null ? tf.trace() : "no trace";
            StackTraceElement[] ste = tf.thrownException().getStackTrace();
            result[3] = ste[0].getClassName();
            result[4] = ste[0].getFileName();
            result[5] = ste[0].getMethodName();
            result[6] = String.valueOf(ste[0].getLineNumber());
            return result;
        }
        // should not reach here
        throw new IllegalStateException("errorCount was 1 but found no errors");
    }
    if (tr.failureCount() == 1) {
        for (Enumeration<?> e = tr.failures(); e.hasMoreElements(); ) {
            Object[] result = new Object[7];
            TestFailure tf = (TestFailure) e.nextElement();
            result[0] = tf.isFailure() ? "failure" : "error";
            result[1] = tf.exceptionMessage() != null ? tf.exceptionMessage() : "no exception message";
            result[2] = tf.trace() != null ? tf.trace() : "no trace";
            StackTraceElement[] ste = tf.thrownException().getStackTrace();
            // search the stack trace backward until finding a class not
            // part of the junit framework
            int i = 0;
            while (i < ste.length && ste[i].getClassName().startsWith("junit.")) i++;
            result[3] = ste[i].getClassName();
            result[4] = ste[i].getFileName();
            result[5] = ste[i].getMethodName();
            result[6] = String.valueOf(ste[i].getLineNumber());
            return result;
        }
        // should not reach here
        throw new IllegalStateException("failureCount was 1 but found no errors");
    }
    // success
    return null;
}
