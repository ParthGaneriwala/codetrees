public void initializePackageContents() {
    if (isInitialized)
        return;
    isInitialized = true;
    // Initialize package
    setName(eNAME);
    setNsPrefix(eNS_PREFIX);
    setNsURI(eNS_URI);
    // Obtain other dependent packages
    CorePackage theCorePackage = (CorePackage) EPackage.Registry.INSTANCE.getEPackage(CorePackage.eNS_URI);
    DomainPackage theDomainPackage = (DomainPackage) EPackage.Registry.INSTANCE.getEPackage(DomainPackage.eNS_URI);
    // Create type parameters
    // Set bounds for type parameters
    // Add supertypes to classes
    clearanceTagEClass.getESuperTypes().add(theCorePackage.getIdentifiedObject());
    clearanceTagTypeEClass.getESuperTypes().add(theCorePackage.getIdentifiedObject());
    outageScheduleEClass.getESuperTypes().add(theCorePackage.getIrregularIntervalSchedule());
    switchingOperationEClass.getESuperTypes().add(theCorePackage.getIdentifiedObject());
    // Initialize classes and features; add operations and parameters
    initEClass(clearanceTagEClass, ClearanceTag.class, "ClearanceTag", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getClearanceTag_AuthorityName(), theDomainPackage.getString(), null, "authorityName", null, 0, 1, ClearanceTag.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, !IS_ORDERED);
    initEReference(getClearanceTag_DeenergizeReqFlag(), theDomainPackage.getBoolean(), null, "deenergizeReqFlag", null, 0, 1, ClearanceTag.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, !IS_ORDERED);
    initEReference(getClearanceTag_GroundReqFlag(), theDomainPackage.getBoolean(), null, "groundReqFlag", null, 0, 1, ClearanceTag.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, !IS_ORDERED);
    initEReference(getClearanceTag_PhaseCheckReqFlag(), theDomainPackage.getBoolean(), null, "phaseCheckReqFlag", null, 0, 1, ClearanceTag.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, !IS_ORDERED);
    initEReference(getClearanceTag_TagIssueTime(), theDomainPackage.getAbsoluteDateTime(), null, "tagIssueTime", null, 0, 1, ClearanceTag.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, !IS_ORDERED);
    initEReference(getClearanceTag_WorkDescription(), theDomainPackage.getString(), null, "workDescription", null, 0, 1, ClearanceTag.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, !IS_ORDERED);
    initEReference(getClearanceTag_WorkEndTime(), theDomainPackage.getAbsoluteDateTime(), null, "workEndTime", null, 0, 1, ClearanceTag.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, !IS_ORDERED);
    initEReference(getClearanceTag_WorkStartTime(), theDomainPackage.getAbsoluteDateTime(), null, "workStartTime", null, 0, 1, ClearanceTag.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, !IS_ORDERED);
    initEClass(clearanceTagTypeEClass, ClearanceTagType.class, "ClearanceTagType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEClass(outageScheduleEClass, OutageSchedule.class, "OutageSchedule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEClass(switchingOperationEClass, SwitchingOperation.class, "SwitchingOperation", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getSwitchingOperation_NewState(), this.getSwitchState(), "newState", null, 0, 1, SwitchingOperation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, !IS_ORDERED);
    initEReference(getSwitchingOperation_OperationTime(), theDomainPackage.getAbsoluteDateTime(), null, "operationTime", null, 0, 1, SwitchingOperation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, !IS_ORDERED);
    // Initialize enums and add enum literals
    initEEnum(switchStateEEnum, SwitchState.class, "SwitchState");
    addEEnumLiteral(switchStateEEnum, SwitchState.OPEN);
    addEEnumLiteral(switchStateEEnum, SwitchState.CLOSE);
}
