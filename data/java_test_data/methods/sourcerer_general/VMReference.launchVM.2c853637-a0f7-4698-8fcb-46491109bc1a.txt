private Process launchVM(File initDir, String[] params, StringBuffer line, DebuggerTerminal term) throws IOException {
    Process vmProcess = Runtime.getRuntime().exec(params, null, initDir);
    BufferedReader br = new BufferedReader(new InputStreamReader(vmProcess.getInputStream()));
    String listenMessage = br.readLine();
    line.append(listenMessage);
    // grab anything else the VM spits out before we try to connect to it.
    try {
        br = new BufferedReader(new InputStreamReader(vmProcess.getErrorStream()));
        StringBuffer extra = new StringBuffer();
        // Two streams to check: standard output and standard error
        char[] buf = new char[1024];
        for (int i = 0; i < 5; i++) {
            Thread.sleep(200);
            // discontinue if no data available or stream closed
            if (!br.ready())
                break;
            int len = br.read(buf);
            if (len == -1)
                break;
            extra.append(buf, 0, len);
        }
        if (extra.length() != 0) {
            Debug.message("Extra output from debug VM on launch:" + extra);
        }
    } catch (InterruptedException ie) {
    }
    // redirect standard streams from process to Terminal
    // error stream System.err
    Reader errorReader = null;
    // output stream System.out
    Reader outReader = null;
    // input stream System.in
    Writer inputWriter = null;
    if (isDefaultEncoding) {
        errorReader = new InputStreamReader(vmProcess.getErrorStream());
        outReader = new InputStreamReader(vmProcess.getInputStream());
        inputWriter = new OutputStreamWriter(vmProcess.getOutputStream());
    } else // if specified in bluej.defs
    {
        errorReader = new InputStreamReader(vmProcess.getErrorStream(), streamEncoding);
        outReader = new InputStreamReader(vmProcess.getInputStream(), streamEncoding);
        inputWriter = new OutputStreamWriter(vmProcess.getOutputStream(), streamEncoding);
    }
    errorStreamRedirector = redirectIOStream(errorReader, term.getErrorWriter());
    outputStreamRedirector = redirectIOStream(outReader, term.getWriter());
    inputStreamRedirector = redirectIOStream(term.getReader(), inputWriter);
    return vmProcess;
}
