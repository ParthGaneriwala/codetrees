public static void doPagingSearch(BufferedReader in, Searcher searcher, Query query, String userQuery, int hitsPerPage) throws IOException {
    TopDocCollector collector = new TopDocCollector(hitsPerPage);
    searcher.search(query, collector);
    collector = new TopDocCollector(collector.getTotalHits());
    searcher.search(query, collector);
    ScoreDoc[] hits = collector.topDocs().scoreDocs;
    int numTotalHits = collector.getTotalHits();
    int totalPages = numTotalHits / hitsPerPage;
    if (numTotalHits % hitsPerPage > 0)
        totalPages++;
    int start = 0;
    int current = Math.min(numTotalHits, start + hitsPerPage);
    while (true) {
        System.out.println(String.format("Results %d - %d of about %d for query \"%s\"", start + 1, current, numTotalHits, userQuery));
        StringBuilder searchResults = new StringBuilder();
        String titleFormat = "%s) Rel: %.3f -> %s";
        Map<String, Document> resultLookup = Maps.newHashMap();
        for (int i = start; i < current; i++) {
            Document doc = searcher.doc(hits[i].doc);
            String title = doc.get("doctitle");
            float score = hits[i].score;
            searchResults.append(String.format(titleFormat, ALPHABET[(i - start) % 26], score, title));
            resultLookup.put(ALPHABET[(i - start) % 26], doc);
            switch(BaseDocumentUtils.getDocumentType(doc)) {
                case PDF:
                    searchResults.append(" - pg." + doc.get("page"));
                    break;
                case CHM:
                    searchResults.append("::" + doc.get("topictitle"));
                    break;
                case TXT:
                case HTM:
                default:
                    break;
            }
            searchResults.append(EOL);
        }
        System.out.println(searchResults.toString());
        if (numTotalHits >= current) {
            boolean quit = false;
            while (true) {
                int currentPage = (start / hitsPerPage) + 1;
                System.out.print(buildNavigation(currentPage, totalPages, 5));
                System.out.print(">> ");
                String line = in.readLine().trim().toLowerCase();
                System.out.println();
                if (line.length() <= 0) {
                    quit = true;
                    break;
                }
                if (line.charAt(0) == 'p') {
                    start = Math.max(0, start - hitsPerPage);
                    break;
                } else if (line.charAt(0) == 'n') {
                    if (start + hitsPerPage < numTotalHits) {
                        start += hitsPerPage;
                    }
                    break;
                } else if (resultLookup.containsKey(String.valueOf(line.charAt(0)).toUpperCase())) {
                    Document selectedDoc = resultLookup.get(String.valueOf(line.charAt(0)).toUpperCase());
                    try {
                        switch(BaseDocumentUtils.getDocumentType(selectedDoc)) {
                            case PDF:
                                PDFDocumentUtils.view(selectedDoc);
                                break;
                            case CHM:
                                CHMDocumentUtils.view(selectedDoc);
                                break;
                            case TXT:
                                TextDocumentUtils.view(selectedDoc);
                                break;
                            case HTM:
                                HTMLDocumentUtils.view(selectedDoc);
                                break;
                            default:
                                throw new UnsupportedOperationException("Unsupported filetype indexed");
                        }
                    } catch (Exception e) {
                        System.out.println("Unable to open selected file at: " + selectedDoc.get("path"));
                    }
                    break;
                } else {
                    int page = 1;
                    try {
                        page = Integer.parseInt(line);
                    } catch (NumberFormatException e) {
                        System.out.println("Invalid input! Valid input includes:");
                        System.out.println("-> Integer Page Number");
                        System.out.println("-> 'p' or 'P' to view the previous page");
                        System.out.println("-> 'n' or 'N' to view the next page");
                        System.out.println("-> Any letter corresponding to a result");
                        System.out.println("-> [enter] key to return to the search form");
                        System.out.print("Press any key to continue...");
                        in.readLine();
                        System.out.println();
                        break;
                    }
                    boolean redirect = false;
                    if (page <= 0) {
                        page = 1;
                        redirect = true;
                    }
                    while ((page - 1) * hitsPerPage >= numTotalHits) {
                        page--;
                        redirect = true;
                    }
                    if (redirect)
                        System.out.println("Page does not exist, redirecting to page " + page);
                    if ((page - 1) * hitsPerPage < numTotalHits) {
                        start = (page - 1) * hitsPerPage;
                        break;
                    }
                }
            }
            if (quit)
                break;
            current = Math.min(numTotalHits, start + hitsPerPage);
        }
    }
}
