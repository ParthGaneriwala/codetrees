// This can throw a runtime exception, but since the pattern
// Strings are constant, one test run of the program will tell
// if the patterns are good.
private void updateUserSettings() {
    dsvSkipPrefix = SqlFile.convertEscapes(shared.userVars.get("*DSV_SKIP_PREFIX"));
    if (dsvSkipPrefix == null) {
        dsvSkipPrefix = DEFAULT_SKIP_PREFIX;
    }
    dsvSkipCols = shared.userVars.get("*DSV_SKIP_COLS");
    dsvTrimAll = Boolean.parseBoolean(shared.userVars.get("*DSV_TRIM_ALL"));
    dsvColDelim = SqlFile.convertEscapes(shared.userVars.get("*DSV_COL_DELIM"));
    if (dsvColDelim == null) {
        dsvColDelim = SqlFile.convertEscapes(shared.userVars.get("*CSV_COL_DELIM"));
    }
    if (dsvColDelim == null) {
        dsvColDelim = DEFAULT_COL_DELIM;
    }
    dsvColSplitter = shared.userVars.get("*DSV_COL_SPLITTER");
    if (dsvColSplitter == null) {
        dsvColSplitter = DEFAULT_COL_SPLITTER;
    }
    dsvRowDelim = SqlFile.convertEscapes(shared.userVars.get("*DSV_ROW_DELIM"));
    if (dsvRowDelim == null) {
        dsvRowDelim = SqlFile.convertEscapes(shared.userVars.get("*CSV_ROW_DELIM"));
    }
    if (dsvRowDelim == null) {
        dsvRowDelim = DEFAULT_ROW_DELIM;
    }
    dsvRowSplitter = shared.userVars.get("*DSV_ROW_SPLITTER");
    if (dsvRowSplitter == null) {
        dsvRowSplitter = DEFAULT_ROW_SPLITTER;
    }
    dsvTargetFile = shared.userVars.get("*DSV_TARGET_FILE");
    if (dsvTargetFile == null) {
        dsvTargetFile = shared.userVars.get("*CSV_FILEPATH");
    }
    dsvTargetTable = shared.userVars.get("*DSV_TARGET_TABLE");
    if (dsvTargetTable == null) {
        dsvTargetTable = shared.userVars.get("*CSV_TABLENAME");
    // This just for legacy variable name.
    }
    dsvConstCols = shared.userVars.get("*DSV_CONST_COLS");
    dsvRejectFile = shared.userVars.get("*DSV_REJECT_FILE");
    dsvRejectReport = shared.userVars.get("*DSV_REJECT_REPORT");
    if (shared.userVars.get("*DSV_RECORDS_PER_COMMIT") != null)
        try {
            dsvRecordsPerCommit = Integer.parseInt(shared.userVars.get("*DSV_RECORDS_PER_COMMIT"));
        } catch (NumberFormatException nfe) {
            logger.error(SqltoolRB.reject_rpc.getString(shared.userVars.get("*DSV_RECORDS_PER_COMMIT")));
            shared.userVars.remove("*DSV_REJECT_REPORT");
            dsvRecordsPerCommit = 0;
        }
    nullRepToken = shared.userVars.get("*NULL_REP_TOKEN");
    if (nullRepToken == null) {
        nullRepToken = shared.userVars.get("*CSV_NULL_REP");
    }
    if (nullRepToken == null) {
        nullRepToken = DEFAULT_NULL_REP;
    }
}
