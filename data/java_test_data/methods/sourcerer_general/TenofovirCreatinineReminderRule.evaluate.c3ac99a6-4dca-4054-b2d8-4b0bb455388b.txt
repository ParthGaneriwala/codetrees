@Override
protected Result evaluate(final LogicContext context, final Integer patientId, final Map<String, Object> parameters) {
    Result result = new Result();
    ObsWithRestrictionRule obsWithRestrictionRule = new ObsWithStringRestrictionRule();
    parameters.put(EvaluableConstants.OBS_FETCH_SIZE, 1);
    parameters.put(EvaluableConstants.OBS_CONCEPT, Arrays.asList(EvaluableNameConstants.ANTIRETROVIRAL_PLAN));
    parameters.put(EvaluableConstants.OBS_VALUE_CODED, Arrays.asList(EvaluableNameConstants.START_DRUGS, EvaluableNameConstants.CHANGE_FORMULATION, EvaluableNameConstants.DRUG_RESTART, EvaluableNameConstants.DRUG_SUBSTITUTION));
    Result planResults = obsWithRestrictionRule.eval(context, patientId, parameters);
    if (CollectionUtils.isNotEmpty(planResults)) {
        Result planResult = planResults.latest();
        Obs obs = (Obs) planResult.getResultObject();
        parameters.put(EvaluableConstants.OBS_ENCOUNTER, Arrays.asList(obs.getEncounter()));
        AntiRetroViralRule antiRetroViralRule = new AntiRetroViralRule();
        Result antiRetroViralResults = antiRetroViralRule.eval(context, patientId, parameters);
        if (CollectionUtils.isNotEmpty(antiRetroViralResults)) {
            List<Concept> tenofovirConcepts = Context.getConceptService().getConceptsByName(EvaluableNameConstants.TENOFOVIR);
            Integer resultCounter = 0;
            Result tenofovirResult = null;
            while (resultCounter < antiRetroViralResults.size() && tenofovirResult == null) {
                Result antiRetroViralResult = antiRetroViralResults.get(resultCounter++);
                Integer conceptCounter = 0;
                while (conceptCounter < tenofovirConcepts.size() && tenofovirResult == null) {
                    Concept tenofovirConcept = tenofovirConcepts.get(conceptCounter++);
                    if (OpenmrsUtil.nullSafeEquals(antiRetroViralResult.toConcept(), tenofovirConcept))
                        tenofovirResult = antiRetroViralResult;
                }
            }
            if (tenofovirResult != null) {
                Calendar calendar = Calendar.getInstance();
                // one year ago date object
                calendar.add(Calendar.MONTH, -12);
                Date oneYearAgo = calendar.getTime();
                // create six months ago date object
                calendar.add(Calendar.MONTH, 6);
                Date sixMonths = calendar.getTime();
                calendar.setTime(tenofovirResult.getResultDate());
                // one year after tenofovir start date
                calendar.add(Calendar.MONTH, 12);
                Date oneYearAfterTenofovir = calendar.getTime();
                // six months after tenofovir start date
                calendar.add(Calendar.MONTH, -6);
                Date sixMonthsAfterTenofovir = calendar.getTime();
                // search for any creatinine result
                parameters.remove(EvaluableConstants.OBS_FETCH_SIZE);
                parameters.remove(EvaluableConstants.OBS_VALUE_CODED);
                // search for creatinine and test ordered
                parameters.put(EvaluableConstants.OBS_CONCEPT, Arrays.asList(EvaluableNameConstants.SERUM_CREATININE));
                // result of creatinine searching
                Result creatinineResults = obsWithRestrictionRule.eval(context, patientId, parameters);
                // search for tests ordered for creatinine
                parameters.put(EvaluableConstants.OBS_CONCEPT, Arrays.asList(EvaluableNameConstants.TESTS_ORDERED));
                parameters.put(EvaluableConstants.OBS_VALUE_CODED, Arrays.asList(EvaluableNameConstants.SERUM_CREATININE, EvaluableNameConstants.SERUM_ELECTROLYTES, EvaluableNameConstants.CHEMISTRY_LAB_TESTS));
                // result of the tests ordered for creatinine
                Result testResults = obsWithRestrictionRule.eval(context, patientId, parameters);
                Boolean afterSixMonthsExists = Boolean.FALSE;
                Boolean afterOneYearExists = Boolean.FALSE;
                Integer creatinineCounter = 0;
                while (creatinineCounter < creatinineResults.size()) {
                    Result creatinineResult = creatinineResults.get(creatinineCounter++);
                    if (creatinineResult.getResultDate().after(sixMonthsAfterTenofovir))
                        afterSixMonthsExists = Boolean.TRUE;
                    if (creatinineResult.getResultDate().after(oneYearAfterTenofovir))
                        afterOneYearExists = Boolean.TRUE;
                }
                Integer testCounter = 0;
                while (testCounter < testResults.size()) {
                    Result testResult = testResults.get(testCounter++);
                    if (testResult.getResultDate().after(sixMonthsAfterTenofovir))
                        afterSixMonthsExists = Boolean.TRUE;
                    if (testResult.getResultDate().after(oneYearAfterTenofovir))
                        afterOneYearExists = Boolean.TRUE;
                }
                Boolean displayReminder = Boolean.FALSE;
                Date tenofovirDate = tenofovirResult.getResultDate();
                if ((tenofovirDate.before(sixMonths) && tenofovirDate.after(oneYearAgo) && !afterSixMonthsExists) || (tenofovirDate.before(oneYearAgo) && !afterOneYearExists))
                    displayReminder = Boolean.TRUE;
                if (displayReminder)
                    result.add(new Result(String.valueOf(parameters.get(ReminderParameters.DISPLAYED_REMINDER_TEXT))));
            }
        }
    }
    return result;
}
