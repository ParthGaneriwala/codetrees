private void displayResults() {
    LOG.info("Detailed results:");
    LOG.info("----------------------------------\n");
    for (int i = 0; i < testsFromConfigFile.size(); i++) {
        CLITestData td = testsFromConfigFile.get(i);
        boolean testResult = td.getTestResult();
        // Display the details only if there is a failure
        if (!testResult) {
            LOG.info("-------------------------------------------");
            LOG.info("                    Test ID: [" + (i + 1) + "]");
            LOG.info("           Test Description: [" + td.getTestDesc() + "]");
            LOG.info("");
            ArrayList<String> testCommands = td.getTestCommands();
            for (int j = 0; j < testCommands.size(); j++) {
                LOG.info("              Test Commands: [" + expandCommand((String) testCommands.get(j)) + "]");
            }
            LOG.info("");
            ArrayList<String> cleanupCommands = td.getCleanupCommands();
            for (int j = 0; j < cleanupCommands.size(); j++) {
                LOG.info("           Cleanup Commands: [" + expandCommand((String) cleanupCommands.get(j)) + "]");
            }
            LOG.info("");
            ArrayList<ComparatorData> compdata = td.getComparatorData();
            for (int j = 0; j < compdata.size(); j++) {
                boolean resultBoolean = compdata.get(j).getTestResult();
                LOG.info("                 Comparator: [" + compdata.get(j).getComparatorType() + "]");
                LOG.info("         Comparision result:   [" + (resultBoolean ? "pass" : "fail") + "]");
                LOG.info("            Expected output:   [" + compdata.get(j).getExpectedOutput() + "]");
                LOG.info("              Actual output:   [" + compdata.get(j).getActualOutput() + "]");
            }
            LOG.info("");
        }
    }
    LOG.info("Summary results:");
    LOG.info("----------------------------------\n");
    boolean overallResults = true;
    int totalPass = 0;
    int totalFail = 0;
    int totalComparators = 0;
    for (int i = 0; i < testsFromConfigFile.size(); i++) {
        CLITestData td = testsFromConfigFile.get(i);
        totalComparators += testsFromConfigFile.get(i).getComparatorData().size();
        boolean resultBoolean = td.getTestResult();
        if (resultBoolean) {
            totalPass++;
        } else {
            totalFail++;
        }
        overallResults &= resultBoolean;
    }
    LOG.info("               Testing mode: " + testMode);
    LOG.info("");
    LOG.info("             Overall result: " + (overallResults ? "+++ PASS +++" : "--- FAIL ---"));
    LOG.info("               # Tests pass: " + totalPass + " (" + (100 * totalPass / (totalPass + totalFail)) + "%)");
    LOG.info("               # Tests fail: " + totalFail + " (" + (100 * totalFail / (totalPass + totalFail)) + "%)");
    LOG.info("         # Validations done: " + totalComparators + " (each test may do multiple validations)");
    LOG.info("");
    LOG.info("Failing tests:");
    LOG.info("--------------");
    int i = 0;
    boolean foundTests = false;
    for (i = 0; i < testsFromConfigFile.size(); i++) {
        boolean resultBoolean = testsFromConfigFile.get(i).getTestResult();
        if (!resultBoolean) {
            LOG.info((i + 1) + ": " + testsFromConfigFile.get(i).getTestDesc());
            foundTests = true;
        }
    }
    if (!foundTests) {
        LOG.info("NONE");
    }
    foundTests = false;
    LOG.info("");
    LOG.info("Passing tests:");
    LOG.info("--------------");
    for (i = 0; i < testsFromConfigFile.size(); i++) {
        boolean resultBoolean = testsFromConfigFile.get(i).getTestResult();
        if (resultBoolean) {
            LOG.info((i + 1) + ": " + testsFromConfigFile.get(i).getTestDesc());
            foundTests = true;
        }
    }
    if (!foundTests) {
        LOG.info("NONE");
    }
    assertTrue("One of the tests failed. " + "See the Detailed results to identify " + "the command that failed", overallResults);
}
