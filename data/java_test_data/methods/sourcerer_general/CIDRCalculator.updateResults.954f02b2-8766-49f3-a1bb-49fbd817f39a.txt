private boolean updateResults(boolean updateView) {
    TextView msgAddressRange = (TextView) findViewById(R.id.address_range);
    TextView msgMaximumAddresses = (TextView) findViewById(R.id.maximum_addresses);
    TextView msgWildcard = (TextView) findViewById(R.id.wildcard);
    TextView msgIPBinaryNetwork = (TextView) findViewById(R.id.ip_binary_network);
    TextView msgIPBinaryHost = (TextView) findViewById(R.id.ip_binary_host);
    TextView msgIPBinaryNetmask = (TextView) findViewById(R.id.ip_binary_netmask);
    Spinner bitlength_spinner = (Spinner) findViewById(R.id.bitlength);
    String ip = msgIPAddress.getText().toString();
    int ip32bit;
    try {
        ip32bit = stringIPtoInt(ip);
    } catch (Exception e) {
        ClearResults();
        return false;
    }
    int bitlength = Integer.parseInt(bitlength_spinner.getSelectedItem().toString().substring(1));
    if (debug)
        Log.d(TAG, "bitlength=" + bitlength);
    int ip32bitmask = (1 << (32 - bitlength)) - 1;
    int firstip = ip32bit & (0xffffffff ^ ip32bitmask);
    int lastip = firstip | ip32bitmask;
    String ipFirst = IntIPToString(firstip);
    String ipLast = IntIPToString(lastip);
    int maximumAddresses;
    if (ip32bitmask > 0) {
        maximumAddresses = ip32bitmask - 1;
    } else {
        maximumAddresses = 0;
    }
    String wildcard = IntIPToString(ip32bitmask);
    String binary = Converter.convertIPIntDec2StringBinary(ip32bit);
    int netmask = (0xffffffff ^ ip32bitmask);
    String binaryNetmask = Converter.convertIPIntDec2StringBinary(netmask);
    if (updateView) {
        msgAddressRange.setText(ipFirst + " - " + ipLast);
        msgMaximumAddresses.setText(String.format("%d", maximumAddresses));
        msgWildcard.setText(wildcard);
        int networkHostCutoff;
        if (bitlength >= 24) {
            networkHostCutoff = bitlength + 3;
        } else if (bitlength >= 16) {
            networkHostCutoff = bitlength + 2;
        } else if (bitlength >= 8) {
            networkHostCutoff = bitlength + 1;
        } else {
            networkHostCutoff = bitlength;
        }
        String binary_network = binary.substring(0, networkHostCutoff);
        String binary_host = binary.substring(networkHostCutoff);
        msgIPBinaryNetwork.setText(binary_network);
        msgIPBinaryHost.setText(binary_host);
        msgIPBinaryNetmask.setText(binaryNetmask);
    }
    CurrentIP = ip;
    CurrentBits = bitlength;
    if (updateView) {
        msgAddressRange.startAnimation(anim);
        updateHistory(CurrentIP, CurrentBits);
    }
    return true;
}
