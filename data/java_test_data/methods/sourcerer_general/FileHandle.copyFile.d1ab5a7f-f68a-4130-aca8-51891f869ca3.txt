public Map<String, ErrorFile> copyFile(String srcdir, String destdir) {
    java.util.Date today = new java.util.Date();
    String timestamp = dftime.format(today);
    File srcrootdir = new File(srcdir);
    String[] srcchilddirs = srcrootdir.list();
    String todayDestDirName = destdir + SEPARATOR + dfdate.format(today);
    File todayDestDir = new File(todayDestDirName);
    java.util.Date yestarday = main.util.MainStatUtil.getPrevCountDate(1);
    String yestardayDestDirName = destdir + SEPARATOR + dfdate.format(yestarday);
    File yesdir = new File(yestardayDestDirName);
    if (yesdir.exists()) {
        File[] deletefiles = yesdir.listFiles();
        if (deletefiles != null && deletefiles.length > 0) {
            for (File deletefile : deletefiles) deletefile.delete();
        }
        boolean b = yesdir.delete();
        LOG.info(yestardayDestDirName + "爱立信目录删除成功!!!" + b);
    }
    Map<String, ErrorFile> errorfiles = new HashMap<String, ErrorFile>();
    List<File> shoulds = new ArrayList<File>();
    if (!todayDestDir.exists()) {
        boolean b = todayDestDir.mkdirs();
        int k = 0;
        while (!b && (k++) < 10) {
            b = todayDestDir.mkdirs();
            LOG.info("创建存储目录失败,重新来过!" + k);
        }
        if (!b) {
            // System.exit(0);
            throw new RuntimeException("创建存储目录失败,退出系统");
        }
        LOG.info("创建存储目录成功:" + todayDestDirName);
    }
    for (String srchilddir : srcchilddirs) {
        if (srchilddir.indexOf("SGSN") != -1) {
            File file = new File(srcdir + SEPARATOR + srchilddir);
            File[] srcfiles = file.listFiles();
            for (File srcfile : srcfiles) {
                // String srcfilename = srcfile.getName();
                long lastmodified = srcfile.lastModified();
                try {
                    Thread.sleep(100L);
                } catch (Exception e) {
                    LOG.error("休眠异常:", e);
                }
                long nowmodified = srcfile.lastModified();
                if (nowmodified == lastmodified) {
                    // 将这个文件copy移动到另外一个地方
                    String sgsnid = srchilddir;
                    ErrorFile errorfile = this.moveFile(srcfile, todayDestDirName, sgsnid, timestamp);
                    errorfile.setModified(new java.sql.Timestamp(today.getTime()));
                    errorfiles.put(sgsnid + srcfile.getName(), errorfile);
                } else {
                    shoulds.add(srcfile);
                // 存起来,然后再处理,轮询2次吧
                }
            }
        }
    }
    for (File srcfile : shoulds) {
        LOG.warn("这里需要再处理:" + srcfile);
    }
    return errorfiles;
}
