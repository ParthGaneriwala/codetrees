public void widgetSelected(SelectionEvent e) {
    int[] t = table.getSelectionIndices();
    if ((rolesCombo.getText() == "") || (t.length == 0))
        okMessageBox("Please select a person and a production role.");
    else {
        int secondId;
        int actors = Integer.parseInt(getID(rolesList, "Actors"));
        int role = Integer.parseInt(getID(rolesList, rolesCombo.getText()));
        if (role != actors) {
            for (int i = 0; i < t.length; i++) {
                secondId = Integer.parseInt(table.getItem(t[i]).getText(3));
                AbsType relation = new CastingRelation(secondId, id, role);
                try {
                    // inserting a cast that is not an actor
                    pool.execute(DataManager.insertMovieData(MovieDataEnum.MOVIE_CAST, relation, update));
                } catch (InterruptedException e1) {
                    e1.printStackTrace();
                }
            }
            table.deselectAll();
        } else {
            boolean valid = true;
            if ((roleText.getText() == "") || (rankText.getText() == "")) {
                okMessageBox("If you want to insert an actor you need to write his role and rank.");
            } else {
                String part = roleText.getText();
                int rank = 0;
                try {
                    rank = Integer.parseInt(rankText.getText());
                } catch (NumberFormatException nfe) {
                    okMessageBox("The rank must be a number!");
                    valid = false;
                }
                if (valid) {
                    for (int i = 0; i < t.length; i++) {
                        secondId = Integer.parseInt(table.getItem(t[i]).getText(3));
                        AbsType relation = new CastingRelation(secondId, id, role, true, part, rank);
                        try {
                            // inserting actor
                            pool.execute(DataManager.insertMovieData(MovieDataEnum.MOVIE_CAST, relation, false));
                            shell.getShell().setEnabled(true);
                            personResults.close();
                        } catch (InterruptedException e1) {
                            e1.printStackTrace();
                        }
                    }
                    table.deselectAll();
                }
            }
        }
    }
}
