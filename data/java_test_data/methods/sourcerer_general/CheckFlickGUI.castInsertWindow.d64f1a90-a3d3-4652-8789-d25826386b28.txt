protected static void castInsertWindow(final List<DatedEntity> searched, SearchEntitiesEnum search, final int id, final boolean update) {
    shell.getShell().setEnabled(false);
    final Shell personResults = new Shell(SWT.CLOSE);
    Color bgColor = new Color(display, 177, 200, 231);
    personResults.setBackground(bgColor);
    Rectangle monitor_bounds = personResults.getShell().getMonitor().getBounds();
    personResults.setLocation(monitor_bounds.width / 2 - 100, monitor_bounds.height / 2 - 100);
    personResults.setSize(new Point(monitor_bounds.width / 4, monitor_bounds.height / 2));
    personResults.setText("Persons List");
    GridLayout layout = new GridLayout(2, false);
    personResults.setLayout(layout);
    final Table table = new Table(personResults, SWT.MULTI | SWT.BORDER | SWT.FULL_SELECTION);
    table.setLinesVisible(true);
    table.setHeaderVisible(true);
    GridData data = new GridData(SWT.NONE, SWT.NONE, true, true);
    data.heightHint = 200;
    table.setLayoutData(data);
    String[] titles = { " ", "Name", "Age", "" };
    for (int i = 0; i < titles.length; i++) {
        TableColumn column = new TableColumn(table, SWT.NONE);
        column.setText(titles[i]);
    }
    for (int i = 0; i < searched.size(); i++) {
        TableItem item = new TableItem(table, SWT.NONE);
        item.setText(0, String.valueOf(i + 1));
        item.setText(1, searched.get(i).getName());
        item.setText(2, String.valueOf(searched.get(i).getYear()));
        item.setText(3, String.valueOf(searched.get(i).getId()));
    }
    for (int i = 0; i < titles.length; i++) {
        table.getColumn(i).pack();
    }
    table.getColumn(3).setWidth(0);
    table.getColumn(3).setResizable(false);
    final Combo rolesCombo = new Combo(personResults, SWT.FILL | SWT.READ_ONLY);
    String[] rolesString = new String[rolesList.size()];
    for (int i = 0; i < rolesList.size(); i++) {
        rolesString[i] = rolesList.get(i).getName();
    }
    rolesCombo.setItems(rolesString);
    Label label = new Label(personResults, SWT.NONE);
    label.setBackground(bgColor);
    label.setText("Actor's Role:");
    final Text roleText = new Text(personResults, SWT.BORDER);
    label = new Label(personResults, SWT.NONE);
    label.setBackground(bgColor);
    label.setText("Actor's Rank:");
    final Text rankText = new Text(personResults, SWT.BORDER);
    Button add = new Button(personResults, SWT.PUSH);
    add.setText("Add");
    add.setEnabled(isAdmin);
    add.setBackground(bgColor);
    Button close = new Button(personResults, SWT.PUSH);
    close.setText("Close");
    close.setBackground(bgColor);
    // listen to the add button
    add.addSelectionListener(new SelectionListener() {

        public void widgetDefaultSelected(SelectionEvent e) {
        }

        public void widgetSelected(SelectionEvent e) {
            int[] t = table.getSelectionIndices();
            if ((rolesCombo.getText() == "") || (t.length == 0))
                okMessageBox("Please select a person and a production role.");
            else {
                int secondId;
                int actors = Integer.parseInt(getID(rolesList, "Actors"));
                int role = Integer.parseInt(getID(rolesList, rolesCombo.getText()));
                if (role != actors) {
                    for (int i = 0; i < t.length; i++) {
                        secondId = Integer.parseInt(table.getItem(t[i]).getText(3));
                        AbsType relation = new CastingRelation(secondId, id, role);
                        try {
                            // inserting a cast that is not an actor
                            pool.execute(DataManager.insertMovieData(MovieDataEnum.MOVIE_CAST, relation, update));
                        } catch (InterruptedException e1) {
                            e1.printStackTrace();
                        }
                    }
                    table.deselectAll();
                } else {
                    boolean valid = true;
                    if ((roleText.getText() == "") || (rankText.getText() == "")) {
                        okMessageBox("If you want to insert an actor you need to write his role and rank.");
                    } else {
                        String part = roleText.getText();
                        int rank = 0;
                        try {
                            rank = Integer.parseInt(rankText.getText());
                        } catch (NumberFormatException nfe) {
                            okMessageBox("The rank must be a number!");
                            valid = false;
                        }
                        if (valid) {
                            for (int i = 0; i < t.length; i++) {
                                secondId = Integer.parseInt(table.getItem(t[i]).getText(3));
                                AbsType relation = new CastingRelation(secondId, id, role, true, part, rank);
                                try {
                                    // inserting actor
                                    pool.execute(DataManager.insertMovieData(MovieDataEnum.MOVIE_CAST, relation, false));
                                    shell.getShell().setEnabled(true);
                                    personResults.close();
                                } catch (InterruptedException e1) {
                                    e1.printStackTrace();
                                }
                            }
                            table.deselectAll();
                        }
                    }
                }
            }
        }
    });
    // listen to the close button
    close.addSelectionListener(new SelectionListener() {

        public void widgetDefaultSelected(SelectionEvent e) {
        }

        public void widgetSelected(SelectionEvent e) {
            shell.getShell().setEnabled(true);
            personResults.close();
        }
    });
    // listen to the X button
    personResults.addDisposeListener(new DisposeListener() {

        public void widgetDisposed(DisposeEvent e) {
            shell.getShell().setEnabled(true);
        }
    });
    personResults.open();
}
