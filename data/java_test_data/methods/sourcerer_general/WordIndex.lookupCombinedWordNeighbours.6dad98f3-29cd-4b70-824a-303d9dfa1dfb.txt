public LinkedHashMap<String, LinkInformation> lookupCombinedWordNeighbours(String word, Corpus corpusA, int percentageA, Corpus corpusB, int percentageB, LIMIT_TYPE percOrNum, int topNumber) {
    LinkedHashMap<String, LinkInformation> toReturn = new LinkedHashMap<String, LinkInformation>();
    LinkedHashMap<String, LinkInformation> listFromA = new LinkedHashMap<String, LinkInformation>();
    LinkedHashMap<String, LinkInformation> listFromB = new LinkedHashMap<String, LinkInformation>();
    if (corpusA != null) {
        listFromA = corpusA.getNeighbours(word, percOrNum, topNumber);
    }
    if (corpusB != null) {
        listFromB = corpusB.getNeighbours(word, percOrNum, topNumber);
    }
    Double percentageAratio = ((double) percentageA) / 100D;
    Double percentageBratio = ((double) percentageB) / 100D;
    for (Map.Entry<String, LinkInformation> entry : listFromA.entrySet()) {
        String key = entry.getKey();
        LinkInformation valueA = entry.getValue();
        if (!toReturn.containsKey(key)) {
            LinkInformation valueB = listFromB.get(key);
            Double affinityA = valueA.getAffinity();
            Double affinityB = 0D;
            Double tscoreA = valueA.getTscore();
            Double tscoreB = 0D;
            Double frequency1A = valueA.getFrequencyOfWord(word);
            Double frequency2A = valueA.getFrequencyOfWord(key);
            Double frequency1B = 0D;
            Double frequency2B = 0D;
            Double frequencyBothA = valueA.getFrequencyBoth();
            Double frequencyBothB = 0D;
            if (valueB != null) {
                affinityB = valueB.getAffinity();
                tscoreB = valueB.getTscore();
                frequency1B = valueB.getFrequencyOfWord(word);
                frequency2B = valueB.getFrequencyOfWord(key);
                frequencyBothB = valueB.getFrequencyBoth();
            }
            affinityA = (affinityA * percentageAratio);
            affinityB = (affinityB * percentageBratio);
            tscoreA = (tscoreA * percentageAratio);
            tscoreB = (tscoreB * percentageBratio);
            frequency1A = (frequency1A * percentageAratio);
            frequency2A = (frequency2A * percentageAratio);
            frequency1B = (frequency1B * percentageBratio);
            frequency2B = (frequency2B * percentageBratio);
            frequencyBothA = (frequencyBothA * percentageAratio);
            frequencyBothB = (frequencyBothB * percentageBratio);
            double averageAffinity = (affinityA + affinityB);
            double averageTScore = (tscoreA + tscoreB);
            double averageFrequency1 = (frequency1A + frequency1B);
            double averageFrequency2 = (frequency2A + frequency2B);
            double averageFrequencyBoth = (frequencyBothA + frequencyBothB);
            LinkInformation tempInfo = new LinkInformation(word, key, averageAffinity, averageTScore, averageFrequency1, averageFrequency2, averageFrequencyBoth);
            toReturn.put(key, tempInfo);
        }
    }
    for (Map.Entry<String, LinkInformation> entry : listFromB.entrySet()) {
        String key = entry.getKey();
        LinkInformation valueB = entry.getValue();
        if (!toReturn.containsKey(key)) {
            LinkInformation valueA = listFromB.get(key);
            Double affinityA = valueB.getAffinity();
            Double affinityB = 0D;
            Double tscoreA = valueB.getTscore();
            Double tscoreB = 0D;
            Double frequency1A = valueB.getFrequencyOfWord(word);
            Double frequency2A = valueB.getFrequencyOfWord(key);
            Double frequency1B = 0D;
            Double frequency2B = 0D;
            Double frequencyBothA = valueB.getFrequencyBoth();
            Double frequencyBothB = 0D;
            if (valueA != null) {
                affinityA = valueA.getAffinity();
                tscoreA = valueA.getTscore();
                frequency1A = valueA.getFrequencyOfWord(word);
                frequency2A = valueA.getFrequencyOfWord(key);
                frequencyBothA = valueA.getFrequencyBoth();
            }
            affinityA = (affinityA * percentageAratio);
            affinityB = (affinityB * percentageBratio);
            tscoreA = (tscoreA * percentageAratio);
            tscoreB = (tscoreB * percentageBratio);
            frequency1A = (frequency1A * percentageAratio);
            frequency2A = (frequency2A * percentageAratio);
            frequency1B = (frequency1B * percentageBratio);
            frequency2B = (frequency2B * percentageBratio);
            frequencyBothA = (frequencyBothA * percentageAratio);
            frequencyBothB = (frequencyBothB * percentageBratio);
            double averageAffinity = (affinityA + affinityB);
            double averageTScore = (tscoreA + tscoreB);
            double averageFrequency1 = (frequency1A + frequency1B);
            double averageFrequency2 = (frequency2A + frequency2B);
            double averageFrequencyBoth = (frequencyBothA + frequencyBothB);
            LinkInformation tempInfo = new LinkInformation(word, key, averageAffinity, averageTScore, averageFrequency1, averageFrequency2, averageFrequencyBoth);
            toReturn.put(key, tempInfo);
        }
    }
    return toReturn;
}
