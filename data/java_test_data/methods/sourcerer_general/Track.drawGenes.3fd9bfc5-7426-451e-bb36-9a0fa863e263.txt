private void drawGenes(Graphics2D g2, Strand inStrand) {
    TooltipJS tooltip = new TooltipJS();
    int imageHeightInPixels = 0;
    List<Gene2D> genes = null;
    Map<Gene2D, String> lineMap = null;
    ImageMap imageMap = null;
    if (inStrand == Strand.FORWARD) {
        imageHeightInPixels = mForwardImageHeightInPixels;
        genes = mForwardGenes;
        lineMap = mForwardLineMap;
        imageMap = mForwardImageMap;
    } else {
        imageHeightInPixels = mReverseImageHeightInPixels;
        genes = mReverseGenes;
        lineMap = mReverseLineMap;
        imageMap = mReverseImageMap;
    }
    // Move to the bottom left of the genomic display
    g2.translate(mDescriptionWidthInPixels, imageHeightInPixels);
    if (genes != null) {
        // Save inital location.
        AffineTransform origTransform = g2.getTransform();
        for (Gene2D gene : genes) {
            if (gene.inDisplayRegion()) {
                // Move to gene location
                // What line is the gene on? Move to upper left of gene.
                int line = Integer.parseInt(lineMap.get(gene));
                if (inStrand == Strand.REVERSE) {
                    line = mNumReverseLines - line + 1;
                }
                // XXXX           int xOffset = (int) ((gene.getStartLocation() - mXAxisStartValue) * getXScalingFactor());
                int geneLeft = (int) (gene.getLeft() * mXScalingFactor);
                int bound = (int) (mXAxisStartValue * mXScalingFactor);
                int xOffset = geneLeft - bound;
                // Don't back up into the description region.
                if (xOffset < 0)
                    xOffset = 0;
                /*       // Don't go off the right side of the display region.
               if (xOffset > mImageWidthInPixels - mDescriptionWidthInPixels - mMinimumBufferInPixels)
               {
                  xOffset = mImageWidthInPixels - mDescriptionWidthInPixels - mMinimumBufferInPixels;
               }
        */
                // int yOffset = -line * (mLineHeightInPixels + mLinePaddingInPixels);
                int yOffset = getYOffsetForLine(line, inStrand);
                g2.translate(xOffset, yOffset);
                gene.draw(g2);
                // Return to orig. location
                g2.setTransform(origTransform);
                // Set image map data
                Area area = imageMap.addArea();
                setAreaURL(area, gene);
                tooltip.addTooltip(area, gene.getTooltipContent());
                area.setShape(Shape.RECT);
                int x1 = mDescriptionWidthInPixels + xOffset;
                if (x1 < mDescriptionWidthInPixels)
                    x1 = mDescriptionWidthInPixels;
                int x2 = mDescriptionWidthInPixels + xOffset + gene.getScaledWidthInPixels() + (mShowId ? gene.getLabelWidthInPixels() : 0);
                if (x2 > mImageWidthInPixels) {
                    x2 = mImageWidthInPixels;
                }
                area.setCoords(x1 + "," + (imageHeightInPixels + yOffset) + "," + x2 + "," + (imageHeightInPixels + yOffset + gene.getHeightInPixels() - 1));
            }
        }
    }
}
