public void dump(String message, Set<Shadow> inShadows, boolean numberOnly) {
    Set<Shadow> shadows = new HashSet<Shadow>(inShadows);
    // remove all non-symbol shadows and all disabled shadows
    for (Iterator<Shadow> iter = shadows.iterator(); iter.hasNext(); ) {
        Shadow s = iter.next();
        if (!s.isEnabled()) {
            iter.remove();
        }
    }
    // for each TracePattern
    Map<TracePattern, Set<Shadow>> splitSymbolShadows = ShadowsPerTMSplitter.splitSymbolShadows(shadows);
    for (Map.Entry<TracePattern, Set<Shadow>> entry : splitSymbolShadows.entrySet()) {
        TracePattern tp = entry.getKey();
        Set<Shadow> perTMShadows = entry.getValue();
        // compute symbol names
        Map<SootMethod, String> adviceMethodToSymbol = new HashMap<SootMethod, String>();
        for (String sym : tp.getSymbols()) {
            SootMethod adviceMethod = tp.getSymbolAdviceMethod(sym);
            adviceMethodToSymbol.put(adviceMethod, sym);
        }
        Map<Shadow, String> shadowToSymbolName = new HashMap<Shadow, String>();
        for (Shadow shadow : perTMShadows) {
            SootMethod adviceMethod = shadow.getAdviceDecl().getImpl().getSootMethod();
            String symbol = adviceMethodToSymbol.get(adviceMethod);
            assert symbol != null;
            shadowToSymbolName.put(shadow, symbol);
        }
        // remove artificial shadows
        for (Iterator<Shadow> iter = perTMShadows.iterator(); iter.hasNext(); ) {
            Shadow s = iter.next();
            if (shadowToSymbolName.get(s).equals("newDaCapoRun")) {
                iter.remove();
            }
        }
        Set<Shadow> ppfs = filterPotentialPointsOfFailure(perTMShadows);
        Set<Set<Shadow>> groups = new HashSet<Set<Shadow>>();
        for (Shadow ppf : ppfs) {
            Set<Shadow> overlaps = new HashSet<Shadow>(AdviceDependency.getAllEnabledShadowsOverlappingWith(Collections.singleton(ppf)));
            overlaps.add(ppf);
            groups.add(overlaps);
        }
        List<Ranking.PotentialFailureGroup> pfgs = new ArrayList<Ranking.PotentialFailureGroup>();
        Set<SootMethod> methods = new HashSet<SootMethod>();
        for (Set<Shadow> group : groups) {
            Set<Shadow> groupPPFs = filterPotentialPointsOfFailure(group);
            Set<Shadow> contextShadows = new HashSet<Shadow>(group);
            contextShadows.removeAll(groupPPFs);
            EnumSet<Features> groupFeatures = EnumSet.noneOf(Features.class);
            for (Shadow s : group) {
                EnumSet<Features> shadowFeatures = Ranking.PotentialFailureGroup.featuresOf(s);
                groupFeatures.addAll(shadowFeatures);
                methods.add(s.getContainer());
            }
            double rank = 1 - (groupFeatures.size() / (Ranking.pPFFeatures.length + 0.0));
            pfgs.add(new Ranking.PotentialFailureGroup(groupPPFs, rank, groupFeatures, contextShadows, tp));
        }
        Collections.sort(pfgs);
        // print it all
        // build qualified tracematch name
        String tmName = tp.getContainerClass().getShortName();
        tmName += "." + tp.getName();
        String fileName = tmName + ".pfg";
        if (removeIfExists) {
            new File(fileName).delete();
        }
        try {
            PrintWriter out = new PrintWriter(new FileOutputStream(fileName, true));
            out.println("Number of methods with enabled shadows " + message + ": " + methods.size());
            out.println("Number of potential failure groups " + message + ": " + pfgs.size());
            if (!numberOnly) {
                out.println();
                out.println();
                out.println();
                out.println();
                out.println();
                for (Ranking.PotentialFailureGroup potentialFailureGroup : pfgs) {
                    out.println(potentialFailureGroup);
                    out.println();
                    out.println();
                }
                out.println();
                out.println();
                out.println();
                out.println();
            }
            out.close();
            removeIfExists = false;
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
    }
}
