public void displayEnd() {
    System.out.println("END");
    double threshold = 1;
    if (!isAutomated) {
        for (int i = 0; i < client.length; i++) {
            if (client[i] == null)
                continue;
            if (!client[i].isSource)
                logger.info("[Peer " + client[i].port + "] : Not source ");
            else
                logger.info("[Peer " + client[i].port + "] : Source");
            double CI = ((double) client[i].continuityIndex) / ((double) client[i].allIndex);
            if (CI > threshold)
                CI = threshold;
            logger.info("continuity index = " + CI);
            String partners = "My Partners are  : ";
            for (int j = 0; j < client[i].pSize; j++) {
                if (client[i].partners.getPartner(j) != null)
                    partners += "  [ " + (client[i].partners.getPartner(j).getPort()) + " ]";
            }
            logger.info(partners);
            String buffer = "My Buffer Map : ";
            for (int j = 0; j < client[i].videoSize; j++) buffer += client[i].scheduler.getWholeBits(j);
            logger.info(buffer);
            System.out.println("\n-----------------------------------------------");
        }
        visual[0].set("Membership's cache visualization", "Peer ID", "Number of Members");
        visual[1].set("Score at Each Peer", "Peer ID", "Score");
        visual[2].set("Score Distribution Over Network", "Score", "Peers Number");
        visual[3].set("Partner's Cache Visualization", "Peers", "Number of Partners");
        visual[4].set("Continuity Index at Each Peer", "Peer ID", "Continuity Index");
        visual[5].set("Average Score Visualization over time", "Time(Sec)", "Average Score");
        for (int k = 0; k < visual.length; k++) {
            if (!visual[k].isDependent())
                visual[k].init();
            else
                visual[k].init(average);
            visual[k].view(0);
        }
        new ViewApp(visual);
        System.err.println("---> " + counts);
        System.err.println("---> " + EventLoop.Count);
        System.err.println("---> " + slotcount);
        tracker.protocol.acceptor.unbindAll();
        for (int i = 0; i < client.length; i++) {
            client[i].protocol.disconnect();
        }
    } else {
        double sum = 0;
        for (int i = 0; i < ciBuffer.size(); i++) {
            Double ci = ciBuffer.get(i);
            sum += ci.doubleValue();
        }
        double AVG = sum / ciBuffer.size();
        System.err.println(AVG);
        Properties properties = new Properties();
        try {
            properties.load(new FileInputStream(filename));
            properties.setProperty(input, new Double(AVG).toString());
            properties.store(new FileOutputStream(filename), "append");
        } catch (IOException e) {
        }
    }
}
