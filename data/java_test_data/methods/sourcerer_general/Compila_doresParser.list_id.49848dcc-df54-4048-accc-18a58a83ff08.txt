// $ANTLR start "list_id"
public final Compila_doresParser.list_id_return list_id() throws RecognitionException {
    Compila_doresParser.list_id_return retval = new Compila_doresParser.list_id_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token COMMA124 = null;
    Compila_doresParser.id_return id123 = null;
    Compila_doresParser.id_return id125 = null;
    CommonTree COMMA124_tree = null;
    try {
        // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:203:2: ( id ( COMMA id )* )
        // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:203:4: id ( COMMA id )*
        {
            root_0 = (CommonTree) adaptor.nil();
            pushFollow(FOLLOW_id_in_list_id1395);
            id123 = id();
            state._fsp--;
            adaptor.addChild(root_0, id123.getTree());
            // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:203:7: ( COMMA id )*
            loop29: do {
                int alt29 = 2;
                int LA29_0 = input.LA(1);
                if ((LA29_0 == COMMA)) {
                    alt29 = 1;
                }
                switch(alt29) {
                    case 1:
                        // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:203:8: COMMA id
                        {
                            COMMA124 = (Token) match(input, COMMA, FOLLOW_COMMA_in_list_id1398);
                            pushFollow(FOLLOW_id_in_list_id1401);
                            id125 = id();
                            state._fsp--;
                            adaptor.addChild(root_0, id125.getTree());
                        }
                        break;
                    default:
                        break loop29;
                }
            } while (true);
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
