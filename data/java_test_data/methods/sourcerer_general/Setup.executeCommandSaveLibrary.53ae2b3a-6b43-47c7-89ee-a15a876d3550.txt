public String executeCommandSaveLibrary(ActionContext context) {
    if (SetupUtils.isConfigured(getApplicationPrefs(context))) {
        return "AlreadySetupOK";
    }
    String fileLibrary = context.getRequest().getParameter("directory");
    if (fileLibrary == null || "".equals(fileLibrary.trim())) {
        context.getRequest().setAttribute("actionError", "Directory is a required field");
        return "SetupSaveLibraryERROR";
    }
    String fs = System.getProperty("file.separator");
    String confirm = context.getRequest().getParameter("confirm");
    if (!fileLibrary.endsWith(fs)) {
        fileLibrary += fs;
    }
    File path = new File(fileLibrary);
    // See if the directory exists, if not confirm
    if (!"yes".equals(confirm) && !path.exists()) {
        return "SetupSaveLibraryCONFIRM";
    }
    try {
        File propertiesFile = new File(fileLibrary + "build.properties");
        // and ask user if it should be used instead
        if (path.exists() && propertiesFile.exists()) {
            if (!"yes".equals(confirm)) {
                return "SetupSaveLibraryDUPLICATE";
            } else {
                // Save the location of the fileLibrary
                String thisPath = ApplicationPrefs.getRealPath(context.getServletContext());
                if (thisPath == null) {
                    Properties instanceProperties = new Properties();
                    instanceProperties.load(context.getServletContext().getResourceAsStream("/WEB-INF/instance.property"));
                    String potentialPath = instanceProperties.getProperty("path");
                    if (potentialPath != null) {
                        thisPath = potentialPath;
                    }
                }
                boolean saved = ApplicationPrefs.saveFileLibraryLocation(thisPath, fileLibrary);
                if (!saved) {
                    context.getRequest().setAttribute("actionError", "The java preferences could not be stored: " + thisPath + "=" + fileLibrary);
                    return "SetupSaveLibraryERROR";
                }
                // Load the specified prefs...
                getApplicationPrefs(context).initializePrefs(context.getServletContext());
                // ask to reload prefs
                if (SetupUtils.isConfigured(getApplicationPrefs(context))) {
                    return "ReloadOK";
                } else {
                    // Test to see if registration of services is enabled
                    try {
                        Class clientClass = Class.forName("com.concursive.connect.plugins.services.Client");
                        ObjectUtils.constructObject(clientClass);
                        context.getRequest().setAttribute("setupRegistration", "true");
                    } catch (Exception e) {
                        LOG.info("Services will be disabled");
                    }
                    return "SetupSaveLibraryOK";
                }
            }
        }
        // finalize the directory
        if ("yes".equals(confirm)) {
            // create the directory
            if (!path.exists()) {
                path.mkdirs();
            }
            // account for group Id not being set yet
            File templatesPath = new File(fileLibrary + "1" + fs + "email");
            if (!templatesPath.exists()) {
                templatesPath.mkdirs();
            }
            // ready for next step
            getApplicationPrefs(context).add("CONFIGURING", "true");
            getApplicationPrefs(context).add(ApplicationPrefs.FILE_LIBRARY_PATH, fileLibrary);
            // save the temporary prefs so user can return
            boolean isSaved = getApplicationPrefs(context).save(fileLibrary + "build.properties");
            if (!isSaved) {
                context.getRequest().setAttribute("actionError", "The path could not be created or copied to: " + fileLibrary);
                return "SetupSaveLibraryERROR";
            }
            // save the location
            String thisPath = ApplicationPrefs.getRealPath(context.getServletContext());
            if (thisPath == null) {
                Properties instanceProperties = new Properties();
                instanceProperties.load(context.getServletContext().getResourceAsStream("/WEB-INF/instance.property"));
                String potentialPath = instanceProperties.getProperty("path");
                if (potentialPath != null) {
                    thisPath = potentialPath;
                }
            }
            boolean saved = ApplicationPrefs.saveFileLibraryLocation(thisPath, fileLibrary);
            if (!saved) {
                context.getRequest().setAttribute("actionError", "The Java preferences could not be stored: " + thisPath + "=" + fileLibrary);
                return "SetupSaveLibraryERROR";
            }
            // Test to see if registration of services is enabled
            try {
                Class clientClass = Class.forName("com.concursive.connect.plugins.services.Client");
                ObjectUtils.constructObject(clientClass);
                context.getRequest().setAttribute("setupRegistration", "true");
            } catch (Exception e) {
                LOG.info("Services will be disabled");
            }
            return "SetupSaveLibraryOK";
        }
    } catch (Exception e) {
        e.printStackTrace(System.out);
        context.getRequest().setAttribute("actionError", "An error was reported trying to use the specified directory: " + e.getMessage());
    }
    return "SetupSaveLibraryERROR";
}
