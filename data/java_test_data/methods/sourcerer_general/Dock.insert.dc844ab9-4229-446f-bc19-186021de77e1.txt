public void insert(DockNode s, DockNode d, int i, int pos, boolean asym) {
    DockNode p, parent, dis, root;
    DockNode oldSplitterSrc = null, oldSplitterDst = null;
    DockNode first = null, second = null;
    DockSplitter splitter;
    int idx, srcIdx, splitterIdx, size, dx, dy, dw, dh, hoff = 0, woff = 0;
    boolean middle = false;
    root = (DockNode) tree.getRoot();
    assert (s != null);
    assert (s.component != null);
    assert (s.getType() == DOCK_LEAF);
    if (d == null) {
        /*
             * First time insertion into the tree. We will assume that src does
             * not need any fix-up as src's parent is null;
             */
        assert (s.parent == null);
        assert (this.tree.getRoot() == null);
        s.setBoundsLinear(getX(), getY(), getWidth(), getHeight());
        this.tree.setRoot(s);
        root = (DockNode) tree.getRoot();
    } else {
        if (d.getType() == DOCK_INODE) {
            assert (pos == 0 || pos == 1);
            assert (i < d.children.size());
            size = d.children.size();
            srcIdx = i + pos;
            splitterIdx = srcIdx - 1;
            if (splitterIdx >= 0 && splitterIdx < d.splitters.size()) {
                splitter = (DockSplitter) d.splitters.get(splitterIdx);
                oldSplitterSrc = splitter.src;
                oldSplitterDst = splitter.dst;
                d.removeSplitter(splitterIdx);
            }
            dis = (DockNode) d.children.get(i);
            /*
                 * If asymmetric is true then we keep the offset value or the 
                 * negative of the offset value, based on 'pos'.
                 */
            if (asym) {
                woff = (int) (dis.w * (0.5 - 0.4));
                hoff = (int) (dis.h * (0.5 - 0.4));
                woff = (pos == 0 ? -woff : woff);
                hoff = (pos == 0 ? -hoff : hoff);
            }
            if (pos == 0) {
                first = s;
                second = dis;
            } else if (pos == 1) {
                first = dis;
                second = s;
            } else {
                assert (false);
            }
            dx = dis.x;
            dy = dis.y;
            dw = dis.w;
            dh = dis.h;
            if (d.orientation == DOCK_V) {
                first.setBoundsLinear(dx, dy, dw / 2 + woff, dh);
                second.setBoundsLinear(dx + first.w, dy, dw - first.w, dh);
            } else if (d.orientation == DOCK_H) {
                first.setBoundsLinear(dx, dy, dw, dh / 2 + hoff);
                second.setBoundsLinear(dx, dy + first.h, dw, dh - first.h);
            }
            d.addChildAtIndex(s, srcIdx);
            /*
                 * Add new splitters if necessary
                 */
            if (srcIdx == 0) {
                splitter = new DockSplitter(this);
                d.addSplitter(s, dis, splitter);
            } else if (srcIdx == size) {
                splitter = new DockSplitter(this);
                d.addSplitter(dis, s, splitter);
            } else {
                splitter = new DockSplitter(this);
                d.addSplitter(oldSplitterSrc, s, splitter);
                splitter = new DockSplitter(this);
                d.addSplitter(s, oldSplitterDst, splitter);
            }
        } else if (d.getType() == DOCK_LEAF) {
            p = new DockNode(this, null);
            if ((parent = d.getParent()) != null) {
                idx = parent.children.indexOf(d);
                size = parent.children.size();
                /*
                     * Remove splitters
                     */
                if (idx == 0) {
                    parent.removeSplitter(0);
                    first = p;
                    middle = false;
                    second = (DockNode) parent.children.get(1);
                } else if (idx == size - 1) {
                    parent.removeSplitter(idx - 1);
                    first = (DockNode) parent.children.get(size - 2);
                    second = p;
                    middle = false;
                } else {
                    assert (parent.children.size() > 2);
                    parent.removeSplitter(idx);
                    parent.removeSplitter(idx - 1);
                    first = (DockNode) parent.children.get(idx - 1);
                    second = (DockNode) parent.children.get(idx + 1);
                    middle = true;
                }
                /*
                     * Remove dst node and add the newly created node
                     */
                p.orientation = parent.getInverseOrientation();
                if ((idx = parent.removeChild(d)) >= 0) {
                    parent.addChildAtIndex(p, idx);
                }
                /*
                     * Add new splitters
                     */
                if (middle) {
                    splitter = new DockSplitter(this);
                    parent.addSplitter(first, p, splitter);
                    splitter = new DockSplitter(this);
                    parent.addSplitter(p, second, splitter);
                } else {
                    splitter = new DockSplitter(this);
                    parent.addSplitter(first, second, splitter);
                }
            } else {
                p.orientation = DOCK_V;
                /* default orientation */
                this.tree.setRoot(p);
            }
            p.setBoundsLinear(d.x, d.y, d.w, d.h);
            if (asym) {
                woff = (int) (p.w * (0.5 - 0.4));
                hoff = (int) (p.h * (0.5 - 0.4));
                woff = (pos == 0 ? -woff : woff);
                hoff = (pos == 0 ? -hoff : hoff);
            }
            if (pos == 0) {
                first = s;
                second = d;
            } else if (pos == 1) {
                first = d;
                second = s;
            } else {
                assert (false);
            }
            if (p.orientation == DOCK_V) {
                first.setBoundsLinear(p.x, p.y, p.w / 2 + woff, p.h);
                second.setBoundsLinear(p.x + first.w, p.y, p.w - first.w, p.h);
            } else if (p.orientation == DOCK_H) {
                first.setBoundsLinear(p.x, p.y, p.w, p.h / 2 + hoff);
                second.setBoundsLinear(p.x, p.y + first.h, p.w, p.h - first.h);
            }
            /*
                 * Add src and dst nodes and splitter between them under newly
                 * created node
                 */
            p.addChild(first);
            p.addChild(second);
            splitter = new DockSplitter(this);
            p.addSplitter(first, second, splitter);
        } else {
            assert (false);
        }
    }
    this.addComponent(s.component);
    this.leaves.add(s);
    this.sync();
}
