public boolean store(StringBuffer content) {
    Scanner scanner = new Scanner(content.toString());
    String url = scanner.nextLine();
    String allLinks = scanner.nextLine();
    String[] links = allLinks.split(" ");
    StringBuffer page = new StringBuffer();
    while (scanner.hasNextLine()) {
        page.append(scanner.nextLine());
    }
    // add stuff to document index
    URLMetaData meta = new URLMetaData();
    for (int i = 0; i < links.length; i++) {
        meta.linksTo.add(links[i]);
    }
    P2PCache.addURL(url, meta);
    // System.out.println("Total stored URLS: " + P2PCache.urlIndex.size());
    // add stuff to inverted index
    HashMap<String, Integer> wordCounts = new HashMap<String, Integer>();
    String strippedPage = page.toString().replaceAll("<.+?>", " ");
    strippedPage = strippedPage.toString().replaceAll("\\p{Punct}", " ");
    StringTokenizer tokenizer = new StringTokenizer(strippedPage);
    String token;
    int totalNumWords = 0;
    while (tokenizer.hasMoreTokens()) {
        token = tokenizer.nextToken().toLowerCase();
        if (!token.matches("[a-zA-Z0-9_-]+")) {
            continue;
        }
        int num = 0;
        if (wordCounts.containsKey(token)) {
            num = wordCounts.get(token);
        }
        wordCounts.put(token, num + 1);
        totalNumWords += 1;
    }
    HashMap<String, Double> temp;
    for (String w : wordCounts.keySet()) {
        temp = new HashMap<String, Double>();
        temp.put(url, wordCounts.get(w) / ((double) totalNumWords));
        Id keywordId = P2PCache.pastryApp.factory.getIdFromBytes(w.getBytes());
        // System.out.println("got in tf/idf: " + w + ": " + keywordId.toStringFull());
        P2PCache.pastryApp.sendStoreMessage(keywordId, w, temp);
    // System.out.println("Storing [" + w + "]+[" + url + "]");
    }
    return true;
}
