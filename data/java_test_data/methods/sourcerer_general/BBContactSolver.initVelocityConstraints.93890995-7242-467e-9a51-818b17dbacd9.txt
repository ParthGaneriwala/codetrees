public void initVelocityConstraints(final BBTimeStep step) {
    // Warm start.
    for (int i = 0; i < m_constraintCount; ++i) {
        BBContactConstraint c = m_constraints[i];
        BBBody bodyA = c.bodyA;
        BBBody bodyB = c.bodyB;
        float invMassA = bodyA.m_invMass;
        float invIA = bodyA.m_invI;
        float invMassB = bodyB.m_invMass;
        float invIB = bodyB.m_invI;
        BBVec2 normal = c.normal;
        BBVec2 tangent = cross(normal, 1.0f);
        if (step.warmStarting) {
            for (int j = 0; j < c.pointCount; ++j) {
                BBContactConstraintPoint ccp = c.points[j];
                ccp.normalImpulse *= step.dtRatio;
                ccp.tangentImpulse *= step.dtRatio;
                BBVec2 P = add(mul(ccp.normalImpulse, normal), mul(ccp.tangentImpulse, tangent));
                bodyA.m_angularVelocity -= invIA * cross(ccp.rA, P);
                bodyA.m_linearVelocity.sub(mul(invMassA, P));
                bodyB.m_angularVelocity += invIB * cross(ccp.rB, P);
                bodyB.m_linearVelocity.add(mul(invMassB, P));
            }
        } else {
            for (int j = 0; j < c.pointCount; ++j) {
                BBContactConstraintPoint ccp = c.points[j];
                ccp.normalImpulse = 0.0f;
                ccp.tangentImpulse = 0.0f;
            }
        }
    }
}
