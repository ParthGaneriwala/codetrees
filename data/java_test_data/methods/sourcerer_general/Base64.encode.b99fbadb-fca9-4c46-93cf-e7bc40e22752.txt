public static byte[] encode(byte[] abyte0) {
    if (abyte0.length == 0) {
        return abyte0;
    }
    byte[] abyte1 = new byte[((abyte0.length + 2) / 3) * 4];
    int i = 0;
    int j = 0;
    for (int k = abyte0.length; k > 0; k -= 3) {
        if (k == 1) {
            byte byte0 = abyte0[i++];
            int l = 0;
            boolean flag = false;
            abyte1[j++] = (byte) pem_array[byte0 >>> 2 & 0x3f];
            abyte1[j++] = (byte) pem_array[(byte0 << 4 & 0x30) + (l >>> 4 & 0xf)];
            abyte1[j++] = 61;
            abyte1[j++] = 61;
        } else if (k == 2) {
            byte byte1 = abyte0[i++];
            byte byte3 = abyte0[i++];
            int i1 = 0;
            abyte1[j++] = (byte) pem_array[byte1 >>> 2 & 0x3f];
            abyte1[j++] = (byte) pem_array[(byte1 << 4 & 0x30) + (byte3 >>> 4 & 0xf)];
            abyte1[j++] = (byte) pem_array[(byte3 << 2 & 0x3c) + (i1 >>> 6 & 3)];
            abyte1[j++] = 61;
        } else {
            byte byte2 = abyte0[i++];
            byte byte4 = abyte0[i++];
            byte byte5 = abyte0[i++];
            abyte1[j++] = (byte) pem_array[byte2 >>> 2 & 0x3f];
            abyte1[j++] = (byte) pem_array[(byte2 << 4 & 0x30) + (byte4 >>> 4 & 0xf)];
            abyte1[j++] = (byte) pem_array[(byte4 << 2 & 0x3c) + (byte5 >>> 6 & 3)];
            abyte1[j++] = (byte) pem_array[byte5 & 0x3f];
        }
    }
    return abyte1;
}
