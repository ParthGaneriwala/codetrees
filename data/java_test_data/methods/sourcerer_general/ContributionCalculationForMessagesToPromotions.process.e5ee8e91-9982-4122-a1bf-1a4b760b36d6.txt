public void process(Connection db, LookupContribution lookupContribution) throws SQLException {
    lastRun = lookupContribution.getRunDate();
    currentRun = new Timestamp(System.currentTimeMillis());
    userPoints = new HashMap<String, Integer>();
    // Page through the updates just in case there are lots of users do 100 at a time...
    PagedListInfo pagedListInfo = new PagedListInfo();
    pagedListInfo.setItemsPerPage(100);
    pagedListInfo.setDefaultSort("entered", "DESC");
    // Use the paged list to paged through all users
    PrivateMessageList privateMessageList = new PrivateMessageList();
    privateMessageList.setPagedListInfo(pagedListInfo);
    privateMessageList.setLinkModuleId(Constants.PROJECT_AD_FILES);
    privateMessageList.setEnteredRangeStart(lastRun);
    privateMessageList.setEnteredRangeEnd(currentRun);
    privateMessageList.buildList(db);
    ArrayList<Integer> adList = new ArrayList<Integer>();
    while (privateMessageList.size() > 0) {
        for (PrivateMessage privateMessage : privateMessageList) {
            int adId = privateMessage.getLinkItemId();
            // Insure that an ad is counted only once
            if (!adList.contains(adId)) {
                adList.add(adId);
                Ad ad = new Ad(db, adId);
                int userId = ad.getEnteredBy();
                int projectId = ad.getProjectId();
                String userIdAndProjectId = userId + "-" + projectId;
                if (userPoints.containsKey(userIdAndProjectId)) {
                    int currentPoints = userPoints.get(userIdAndProjectId);
                    currentPoints = currentPoints + lookupContribution.getPointsAwarded();
                    userPoints.put(userIdAndProjectId, currentPoints);
                } else {
                    userPoints.put(userIdAndProjectId, lookupContribution.getPointsAwarded());
                }
            }
        }
        // Always reset the list or else the records are included on buildList again
        privateMessageList.clear();
        if (pagedListInfo.getPage() < pagedListInfo.getNumberOfPages()) {
            pagedListInfo.setCurrentPage(pagedListInfo.getPage() + 1);
            privateMessageList.buildList(db);
        }
    }
    updatePoints(db, lookupContribution);
}
