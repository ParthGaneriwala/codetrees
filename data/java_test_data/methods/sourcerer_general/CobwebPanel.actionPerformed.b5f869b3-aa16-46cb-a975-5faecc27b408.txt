public void actionPerformed(ActionEvent arg0) {
    cancelIteration = false;
    if (currentValue == null) {
        currentValue = kCurrentValue = seed;
        nList.add(0);
        xnList.add(seed);
        znList.add(seed);
        fTextField.setEditable(false);
        seedTextField.setEditable(false);
        kCheckBox.setEnabled(false);
        kTextField.setEditable(false);
        resetButton.setEnabled(true);
    }
    iterateButton.setVisible(false);
    resetButton.setEnabled(false);
    final JProgressBar iterationProgress = new JProgressBar(0, iterationSize);
    iterationProgress.setStringPainted(true);
    iterationProgress.setPreferredSize(iterateButton.getSize());
    GridBagConstraints c = new GridBagConstraints();
    c.gridx = 0;
    c.gridy = 4;
    c.gridwidth = 3;
    c.gridheight = 1;
    iterationPanel.add(iterationProgress, c);
    addListenerTo(CobwebPanel.this);
    new Thread() {

        public void run() {
            long startTime = System.currentTimeMillis();
            for (int i = 0; i < iterationSize; ++i) {
                iterate();
                if (i % 20 == 0) {
                    graph.updateGraph();
                    tableModel.fireTableDataChanged();
                }
                iterationProgress.setValue(i);
                Thread.yield();
                if (cancelIteration)
                    break;
            }
            graph.updateGraph();
            tableModel.fireTableDataChanged();
            iterationPanel.remove(iterationProgress);
            iterateButton.setVisible(true);
            resetButton.setEnabled(true);
            long endTime = System.currentTimeMillis();
            long diffTime = endTime - startTime;
            System.out.println("Time for " + iterationSize + " iterations: " + diffTime + " ms.");
            removeListenerFrom(CobwebPanel.this);
        }
    }.start();
}
