// $ANTLR start "proc_reserv"
public final MyGrammarParser.proc_reserv_return proc_reserv() throws RecognitionException {
    MyGrammarParser.proc_reserv_return retval = new MyGrammarParser.proc_reserv_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    MyGrammarParser.proc_writeint_return proc_writeint90 = null;
    MyGrammarParser.proc_writechar_return proc_writechar91 = null;
    MyGrammarParser.proc_writebool_return proc_writebool92 = null;
    MyGrammarParser.proc_writestring_return proc_writestring93 = null;
    MyGrammarParser.proc_writeln_return proc_writeln94 = null;
    RewriteRuleSubtreeStream stream_proc_writechar = new RewriteRuleSubtreeStream(adaptor, "rule proc_writechar");
    RewriteRuleSubtreeStream stream_proc_writeint = new RewriteRuleSubtreeStream(adaptor, "rule proc_writeint");
    RewriteRuleSubtreeStream stream_proc_writeln = new RewriteRuleSubtreeStream(adaptor, "rule proc_writeln");
    RewriteRuleSubtreeStream stream_proc_writebool = new RewriteRuleSubtreeStream(adaptor, "rule proc_writebool");
    RewriteRuleSubtreeStream stream_proc_writestring = new RewriteRuleSubtreeStream(adaptor, "rule proc_writestring");
    try {
        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:217:12: ( ( proc_writeint -> ^( PROC_RESERV proc_writeint ) | proc_writechar -> ^( PROC_RESERV proc_writechar ) | proc_writebool -> ^( PROC_RESERV proc_writebool ) | proc_writestring -> ^( PROC_RESERV proc_writestring ) | proc_writeln -> ^( PROC_RESERV proc_writeln ) ) )
        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:217:15: ( proc_writeint -> ^( PROC_RESERV proc_writeint ) | proc_writechar -> ^( PROC_RESERV proc_writechar ) | proc_writebool -> ^( PROC_RESERV proc_writebool ) | proc_writestring -> ^( PROC_RESERV proc_writestring ) | proc_writeln -> ^( PROC_RESERV proc_writeln ) )
        {
            // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:217:15: ( proc_writeint -> ^( PROC_RESERV proc_writeint ) | proc_writechar -> ^( PROC_RESERV proc_writechar ) | proc_writebool -> ^( PROC_RESERV proc_writebool ) | proc_writestring -> ^( PROC_RESERV proc_writestring ) | proc_writeln -> ^( PROC_RESERV proc_writeln ) )
            int alt18 = 5;
            switch(input.LA(1)) {
                case WRITEINT:
                    {
                        alt18 = 1;
                    }
                    break;
                case WRITECHAR:
                    {
                        alt18 = 2;
                    }
                    break;
                case WRITEBOOL:
                    {
                        alt18 = 3;
                    }
                    break;
                case WRITESTRING:
                    {
                        alt18 = 4;
                    }
                    break;
                case WRITELN:
                    {
                        alt18 = 5;
                    }
                    break;
                default:
                    NoViableAltException nvae = new NoViableAltException("", 18, 0, input);
                    throw nvae;
            }
            switch(alt18) {
                case 1:
                    // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:217:16: proc_writeint
                    {
                        pushFollow(FOLLOW_proc_writeint_in_proc_reserv1642);
                        proc_writeint90 = proc_writeint();
                        state._fsp--;
                        stream_proc_writeint.add(proc_writeint90.getTree());
                        // AST REWRITE
                        // elements: proc_writeint
                        // token labels:
                        // rule labels: retval
                        // token list labels:
                        // rule list labels:
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", retval != null ? retval.tree : null);
                        root_0 = (CommonTree) adaptor.nil();
                        // 217:30: -> ^( PROC_RESERV proc_writeint )
                        {
                            // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:217:33: ^( PROC_RESERV proc_writeint )
                            {
                                CommonTree root_1 = (CommonTree) adaptor.nil();
                                root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(PROC_RESERV, "PROC_RESERV"), root_1);
                                adaptor.addChild(root_1, stream_proc_writeint.nextTree());
                                adaptor.addChild(root_0, root_1);
                            }
                        }
                        retval.tree = root_0;
                    }
                    break;
                case 2:
                    // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:218:9: proc_writechar
                    {
                        pushFollow(FOLLOW_proc_writechar_in_proc_reserv1660);
                        proc_writechar91 = proc_writechar();
                        state._fsp--;
                        stream_proc_writechar.add(proc_writechar91.getTree());
                        // AST REWRITE
                        // elements: proc_writechar
                        // token labels:
                        // rule labels: retval
                        // token list labels:
                        // rule list labels:
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", retval != null ? retval.tree : null);
                        root_0 = (CommonTree) adaptor.nil();
                        // 218:24: -> ^( PROC_RESERV proc_writechar )
                        {
                            // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:218:27: ^( PROC_RESERV proc_writechar )
                            {
                                CommonTree root_1 = (CommonTree) adaptor.nil();
                                root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(PROC_RESERV, "PROC_RESERV"), root_1);
                                adaptor.addChild(root_1, stream_proc_writechar.nextTree());
                                adaptor.addChild(root_0, root_1);
                            }
                        }
                        retval.tree = root_0;
                    }
                    break;
                case 3:
                    // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:219:9: proc_writebool
                    {
                        pushFollow(FOLLOW_proc_writebool_in_proc_reserv1678);
                        proc_writebool92 = proc_writebool();
                        state._fsp--;
                        stream_proc_writebool.add(proc_writebool92.getTree());
                        // AST REWRITE
                        // elements: proc_writebool
                        // token labels:
                        // rule labels: retval
                        // token list labels:
                        // rule list labels:
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", retval != null ? retval.tree : null);
                        root_0 = (CommonTree) adaptor.nil();
                        // 219:24: -> ^( PROC_RESERV proc_writebool )
                        {
                            // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:219:27: ^( PROC_RESERV proc_writebool )
                            {
                                CommonTree root_1 = (CommonTree) adaptor.nil();
                                root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(PROC_RESERV, "PROC_RESERV"), root_1);
                                adaptor.addChild(root_1, stream_proc_writebool.nextTree());
                                adaptor.addChild(root_0, root_1);
                            }
                        }
                        retval.tree = root_0;
                    }
                    break;
                case 4:
                    // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:220:9: proc_writestring
                    {
                        pushFollow(FOLLOW_proc_writestring_in_proc_reserv1696);
                        proc_writestring93 = proc_writestring();
                        state._fsp--;
                        stream_proc_writestring.add(proc_writestring93.getTree());
                        // AST REWRITE
                        // elements: proc_writestring
                        // token labels:
                        // rule labels: retval
                        // token list labels:
                        // rule list labels:
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", retval != null ? retval.tree : null);
                        root_0 = (CommonTree) adaptor.nil();
                        // 220:26: -> ^( PROC_RESERV proc_writestring )
                        {
                            // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:220:29: ^( PROC_RESERV proc_writestring )
                            {
                                CommonTree root_1 = (CommonTree) adaptor.nil();
                                root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(PROC_RESERV, "PROC_RESERV"), root_1);
                                adaptor.addChild(root_1, stream_proc_writestring.nextTree());
                                adaptor.addChild(root_0, root_1);
                            }
                        }
                        retval.tree = root_0;
                    }
                    break;
                case 5:
                    // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:221:9: proc_writeln
                    {
                        pushFollow(FOLLOW_proc_writeln_in_proc_reserv1714);
                        proc_writeln94 = proc_writeln();
                        state._fsp--;
                        stream_proc_writeln.add(proc_writeln94.getTree());
                        // AST REWRITE
                        // elements: proc_writeln
                        // token labels:
                        // rule labels: retval
                        // token list labels:
                        // rule list labels:
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", retval != null ? retval.tree : null);
                        root_0 = (CommonTree) adaptor.nil();
                        // 221:22: -> ^( PROC_RESERV proc_writeln )
                        {
                            // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:221:25: ^( PROC_RESERV proc_writeln )
                            {
                                CommonTree root_1 = (CommonTree) adaptor.nil();
                                root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(PROC_RESERV, "PROC_RESERV"), root_1);
                                adaptor.addChild(root_1, stream_proc_writeln.nextTree());
                                adaptor.addChild(root_0, root_1);
                            }
                        }
                        retval.tree = root_0;
                    }
                    break;
            }
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
