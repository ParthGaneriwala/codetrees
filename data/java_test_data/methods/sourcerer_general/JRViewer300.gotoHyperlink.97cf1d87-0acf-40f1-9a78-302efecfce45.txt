public void gotoHyperlink(JRPrintHyperlink hyperlink) {
    switch(hyperlink.getHyperlinkType()) {
        case JRHyperlink.HYPERLINK_TYPE_REFERENCE:
            {
                if (isOnlyHyperlinkListener()) {
                    System.out.println("Hyperlink reference : " + hyperlink.getHyperlinkReference());
                    System.out.println("Implement your own JRHyperlinkListener to manage this type of event.");
                }
                break;
            }
        case JRHyperlink.HYPERLINK_TYPE_LOCAL_ANCHOR:
            {
                if (hyperlink.getHyperlinkAnchor() != null) {
                    Map anchorIndexes = jasperPrint.getAnchorIndexes();
                    JRPrintAnchorIndex anchorIndex = (JRPrintAnchorIndex) anchorIndexes.get(hyperlink.getHyperlinkAnchor());
                    if (anchorIndex.getPageIndex() != pageIndex) {
                        setPageIndex(anchorIndex.getPageIndex());
                        refreshPage();
                    }
                    Container container = pnlInScroll.getParent();
                    if (container instanceof JViewport) {
                        JViewport viewport = (JViewport) container;
                        int newX = (int) (anchorIndex.getElementAbsoluteX() * realZoom);
                        int newY = (int) (anchorIndex.getElementAbsoluteY() * realZoom);
                        int maxX = pnlInScroll.getWidth() - viewport.getWidth();
                        int maxY = pnlInScroll.getHeight() - viewport.getHeight();
                        if (newX < 0) {
                            newX = 0;
                        }
                        if (newX > maxX) {
                            newX = maxX;
                        }
                        if (newY < 0) {
                            newY = 0;
                        }
                        if (newY > maxY) {
                            newY = maxY;
                        }
                        viewport.setViewPosition(new Point(newX, newY));
                    }
                }
                break;
            }
        case JRHyperlink.HYPERLINK_TYPE_LOCAL_PAGE:
            {
                int page = pageIndex + 1;
                if (hyperlink.getHyperlinkPage() != null) {
                    page = hyperlink.getHyperlinkPage().intValue();
                }
                if (page >= 1 && page <= jasperPrint.getPages().size() && page != pageIndex + 1) {
                    setPageIndex(page - 1);
                    refreshPage();
                    Container container = pnlInScroll.getParent();
                    if (container instanceof JViewport) {
                        JViewport viewport = (JViewport) container;
                        viewport.setViewPosition(new Point(0, 0));
                    }
                }
                break;
            }
        case JRHyperlink.HYPERLINK_TYPE_REMOTE_ANCHOR:
            {
                if (isOnlyHyperlinkListener()) {
                    System.out.println("Hyperlink reference : " + hyperlink.getHyperlinkReference());
                    System.out.println("Hyperlink anchor    : " + hyperlink.getHyperlinkAnchor());
                    System.out.println("Implement your own JRHyperlinkListener to manage this type of event.");
                }
                break;
            }
        case JRHyperlink.HYPERLINK_TYPE_REMOTE_PAGE:
            {
                if (isOnlyHyperlinkListener()) {
                    System.out.println("Hyperlink reference : " + hyperlink.getHyperlinkReference());
                    System.out.println("Hyperlink page      : " + hyperlink.getHyperlinkPage());
                    System.out.println("Implement your own JRHyperlinkListener to manage this type of event.");
                }
                break;
            }
        case JRHyperlink.HYPERLINK_TYPE_CUSTOM:
            {
                if (isOnlyHyperlinkListener()) {
                    System.out.println("Hyperlink of type " + hyperlink.getLinkType());
                    System.out.println("Implement your own JRHyperlinkListener to manage this type of event.");
                }
                break;
            }
        case JRHyperlink.HYPERLINK_TYPE_NONE:
        default:
            {
                break;
            }
    }
}
