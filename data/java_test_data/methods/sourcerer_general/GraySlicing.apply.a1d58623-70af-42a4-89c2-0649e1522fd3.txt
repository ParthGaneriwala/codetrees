public RGBImage apply() {
    RGBImage retval;
    // new RGBImage(source.getWidth(),source.getHeight());
    retval = source;
    m1 = (float) (s1 - s0) / (r1 - r0);
    m2 = (float) (s2 - s1) / (r2 - r1);
    m3 = (float) (s3 - s2) / (r3 - r2);
    b1 = s1 - m1 * r1;
    b2 = s2 - m2 * r2;
    b3 = s3 - m3 * r3;
    int width = ulx + this.w;
    int height = uly + this.h;
    for (int y = uly; y < height; y++) {
        for (int x = ulx; x < width; x++) {
            RGBColor color = source.getRGBColor(x, y);
            int red = color.getRed();
            int green = color.getGreen();
            int blue = color.getBlue();
            if (red <= r1) {
                red = (int) (red * m1 + b1);
            } else if (red > r1 && red <= r2) {
                red = intensity;
            } else if (red > r2 && red <= r3) {
                red = (int) (red * m3 + b3);
            }
            if (green <= r1) {
                green = (int) (green * m1 + b1);
            } else if (green > r1 && green <= r2) {
                green = intensity;
            } else if (green > r2 && green <= r3) {
                green = (int) (green * m3 + b3);
            }
            if (blue <= r1) {
                blue = (int) (blue * m1 + b1);
            } else if (blue > r1 && blue <= r2) {
                blue = intensity;
            } else if (blue > r2 && blue <= r3) {
                blue = (int) (blue * m3 + b3);
            }
            retval.setRGB(x, y, red, green, blue);
        }
    }
    return retval;
}
