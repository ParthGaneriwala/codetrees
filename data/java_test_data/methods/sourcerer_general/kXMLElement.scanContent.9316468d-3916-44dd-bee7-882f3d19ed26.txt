private int scanContent(char[] input, int offset, int end, int[] contentOffset, int[] contentSize, int[] lineNr) throws kXMLParseException {
    if (input[offset] == '/') {
        contentSize[0] = 0;
        if (input[offset + 1] != '>') {
            throw expectedInput("'>'", lineNr[0]);
        }
        return offset + 2;
    }
    if (input[offset] != '>') {
        throw expectedInput("'>'", lineNr[0]);
    }
    if (skipLeadingWhitespace) {
        offset = skipWhitespace(input, offset + 1, end, lineNr);
    } else {
        offset++;
    }
    int begin = offset;
    contentOffset[0] = offset;
    int level = 0;
    char[] tag = tagName.toCharArray();
    end -= (tag.length + 2);
    while ((offset < end) && (level >= 0)) {
        if (input[offset] == '<') {
            boolean ok = true;
            if ((offset < (end - 3)) && (input[offset + 1] == '!') && (input[offset + 2] == '-') && (input[offset + 3] == '-')) {
                offset += 3;
                while ((offset < end) && ((input[offset - 2] != '-') || (input[offset - 1] != '-') || (input[offset - 0] != '>'))) {
                    offset++;
                }
                offset++;
                continue;
            }
            if ((offset < (end - 1)) && (input[offset + 1] == '!') && (input[offset + 2] == '[')) {
                offset++;
                continue;
            }
            for (int i = 0; ok && (i < tag.length); i++) {
                ok &= (input[offset + (i + 1)] == tag[i]);
            }
            ok &= !isIdentifierChar(input[offset + tag.length + 1]);
            if (ok) {
                while ((offset < end) && (input[offset] != '>')) {
                    offset++;
                }
                if (input[offset - 1] != '/') {
                    level++;
                }
                continue;
            } else if (input[offset + 1] == '/') {
                ok = true;
                for (int i = 0; ok && (i < tag.length); i++) {
                    ok &= (input[offset + (i + 2)] == tag[i]);
                }
                if (ok) {
                    contentSize[0] = offset - contentOffset[0];
                    offset += tag.length + 2;
                    try {
                        offset = skipWhitespace(input, offset, end + tag.length + 2, lineNr);
                    } catch (kXMLParseException e) {
                    // ignore
                    }
                    if (input[offset] == '>') {
                        level--;
                        offset++;
                    }
                    continue;
                }
            }
        }
        if (input[offset] == '\r') {
            lineNr[0]++;
            if ((offset != end) && (input[offset + 1] == '\n')) {
                offset++;
            }
        } else if (input[offset] == '\n') {
            lineNr[0]++;
        }
        offset++;
    }
    if (level >= 0) {
        throw unexpectedEndOfData(lineNr[0]);
    }
    if (skipLeadingWhitespace) {
        int i = contentOffset[0] + contentSize[0] - 1;
        while ((contentSize[0] >= 0) && (input[i] <= ' ')) {
            i--;
            contentSize[0]--;
        }
    }
    return offset;
}
