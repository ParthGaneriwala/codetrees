/**
 * TODO:  Find out if there is a way to select based on an expression
 * using a named derived pseudo-column.
 * public void testDerivedComplex() {
 * PreparedStatement ps = null;
 * ResultSet rs = null;
 * try {
 * ps = netConn.prepareStatement(
 * "SELECT id, cv || 'app' appendage FROM alltypes\n"
 * + "WHERE appendage = ?");
 * ps.setString(1, "cvapp");
 * rs = ps.executeQuery();
 * assertTrue("Got no rows appendage = 'cvapp'", rs.next());
 * assertEquals(String.class, rs.getObject("r").getClass());
 * assertTrue("Got only one row with appendage = 'cvapp'", rs.next());
 * assertEquals("cvapp", rs.getString("r"));
 * assertFalse("Got too many rows with appendage = 'cvapp'", rs.next());
 * } catch (SQLException se) {
 * junit.framework.AssertionFailedError ase
 * = new junit.framework.AssertionFailedError(se.getMessage());
 * ase.initCause(se);
 * throw ase;
 * } finally {
 * try {
 * if (rs != null) {
 * rs.close();
 * }
 * if (ps != null) {
 * ps.close();
 * }
 * } catch(Exception e) {
 * }
 * }
 * }
 */
public void testDateComplex() {
    PreparedStatement ps = null;
    ResultSet rs = null;
    java.sql.Date tomorrow = new java.sql.Date(new java.util.Date().getTime() + 1000 * 60 * 60 * 24);
    try {
        ps = netConn.prepareStatement("INSERT INTO alltypes(id, d) VALUES(?, ?)");
        ps.setInt(1, 3);
        ps.setDate(2, tomorrow);
        assertEquals(1, ps.executeUpdate());
        ps.setInt(1, 4);
        assertEquals(1, ps.executeUpdate());
        ps.close();
        netConn.commit();
        ps = netConn.prepareStatement("SELECT * FROM alltypes WHERE d = ?");
        ps.setDate(1, tomorrow);
        rs = ps.executeQuery();
        assertTrue("Got no rows with d = tomorrow", rs.next());
        assertEquals(java.sql.Date.class, rs.getObject("d").getClass());
        assertTrue("Got only one row with d = tomorrow", rs.next());
        assertEquals(tomorrow.toString(), rs.getDate("d").toString());
        // Compare the Strings since "tomorrow" has resolution to
        // millisecond, but getDate() is probably to the day.
        assertFalse("Got too many rows with d = tomorrow", rs.next());
    } catch (SQLException se) {
        junit.framework.AssertionFailedError ase = new junit.framework.AssertionFailedError(se.getMessage());
        ase.initCause(se);
        throw ase;
    } finally {
        try {
            if (rs != null) {
                rs.close();
            }
            if (ps != null) {
                ps.close();
            }
        } catch (Exception e) {
        }
    }
}
