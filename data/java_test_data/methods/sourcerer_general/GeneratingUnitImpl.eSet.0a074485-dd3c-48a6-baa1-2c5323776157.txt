@Override
public void eSet(int featureID, Object newValue) {
    switch(featureID) {
        case ProductionPackage.GENERATING_UNIT__ALLOC_SPIN_RES_P:
            setAllocSpinResP((ActivePower) newValue);
            return;
        case ProductionPackage.GENERATING_UNIT__AUTO_CNTRL_MARGIN_P:
            setAutoCntrlMarginP((ActivePower) newValue);
            return;
        case ProductionPackage.GENERATING_UNIT__BASE_P:
            setBaseP((ActivePower) newValue);
            return;
        case ProductionPackage.GENERATING_UNIT__CONTROL_DEADBAND:
            setControlDeadband((ActivePower) newValue);
            return;
        case ProductionPackage.GENERATING_UNIT__CONTROL_PULSE_HIGH:
            setControlPulseHigh((Seconds) newValue);
            return;
        case ProductionPackage.GENERATING_UNIT__CONTROL_PULSE_LOW:
            setControlPulseLow((Seconds) newValue);
            return;
        case ProductionPackage.GENERATING_UNIT__CONTROL_RESPONSE_RATE:
            setControlResponseRate((ActivePowerChangeRate) newValue);
            return;
        case ProductionPackage.GENERATING_UNIT__DISP_RESERVE_FLAG:
            setDispReserveFlag((EA_Model.IEC61970.Domain.Boolean) newValue);
            return;
        case ProductionPackage.GENERATING_UNIT__EFFICIENCY:
            setEfficiency((PU) newValue);
            return;
        case ProductionPackage.GENERATING_UNIT__ENERGY_MIN_P:
            setEnergyMinP((HeatRate) newValue);
            return;
        case ProductionPackage.GENERATING_UNIT__FAST_START_FLAG:
            setFastStartFlag((EA_Model.IEC61970.Domain.Boolean) newValue);
            return;
        case ProductionPackage.GENERATING_UNIT__FUEL_PRIORITY:
            setFuelPriority((EA_Model.IEC61970.Domain.Integer) newValue);
            return;
        case ProductionPackage.GENERATING_UNIT__GEN_CONTROL_MODE:
            setGenControlMode((GeneratorControlMode) newValue);
            return;
        case ProductionPackage.GENERATING_UNIT__GEN_CONTROL_SOURCE:
            setGenControlSource((GeneratorControlSource) newValue);
            return;
        case ProductionPackage.GENERATING_UNIT__GEN_OPERATING_MODE:
            setGenOperatingMode((GeneratorOperatingMode) newValue);
            return;
        case ProductionPackage.GENERATING_UNIT__GOVERNOR_MPL:
            setGovernorMPL((PU) newValue);
            return;
        case ProductionPackage.GENERATING_UNIT__GOVERNOR_SCD:
            setGovernorSCD((PerCent) newValue);
            return;
        case ProductionPackage.GENERATING_UNIT__HIGH_CONTROL_LIMIT:
            setHighControlLimit((ActivePower) newValue);
            return;
        case ProductionPackage.GENERATING_UNIT__INITIAL_P:
            setInitialP((ActivePower) newValue);
            return;
        case ProductionPackage.GENERATING_UNIT__LONG_PF:
            setLongPF((EA_Model.IEC61970.Domain.Float) newValue);
            return;
        case ProductionPackage.GENERATING_UNIT__LOW_CONTROL_LIMIT:
            setLowControlLimit((ActivePower) newValue);
            return;
        case ProductionPackage.GENERATING_UNIT__LOWER_RAMP_RATE:
            setLowerRampRate((ActivePowerChangeRate) newValue);
            return;
        case ProductionPackage.GENERATING_UNIT__MAX_ECONOMIC_P:
            setMaxEconomicP((ActivePower) newValue);
            return;
        case ProductionPackage.GENERATING_UNIT__MAXIMUM_ALLOWABLE_SPINNING_RESERVE:
            setMaximumAllowableSpinningReserve((ActivePower) newValue);
            return;
        case ProductionPackage.GENERATING_UNIT__MAX_OPERATING_P:
            setMaxOperatingP((ActivePower) newValue);
            return;
        case ProductionPackage.GENERATING_UNIT__MIN_ECONOMIC_P:
            setMinEconomicP((ActivePower) newValue);
            return;
        case ProductionPackage.GENERATING_UNIT__MINIMUM_OFF_TIME:
            setMinimumOffTime((Seconds) newValue);
            return;
        case ProductionPackage.GENERATING_UNIT__MIN_OPERATING_P:
            setMinOperatingP((ActivePower) newValue);
            return;
        case ProductionPackage.GENERATING_UNIT__MODEL_DETAIL:
            setModelDetail((Classification) newValue);
            return;
        case ProductionPackage.GENERATING_UNIT__NOMINAL_P:
            setNominalP((ActivePower) newValue);
            return;
        case ProductionPackage.GENERATING_UNIT__NORMAL_PF:
            setNormalPF((EA_Model.IEC61970.Domain.Float) newValue);
            return;
        case ProductionPackage.GENERATING_UNIT__PENALTY_FACTOR:
            setPenaltyFactor((EA_Model.IEC61970.Domain.Float) newValue);
            return;
        case ProductionPackage.GENERATING_UNIT__RAISE_RAMP_RATE:
            setRaiseRampRate((ActivePowerChangeRate) newValue);
            return;
        case ProductionPackage.GENERATING_UNIT__RATED_GROSS_MAX_P:
            setRatedGrossMaxP((ActivePower) newValue);
            return;
        case ProductionPackage.GENERATING_UNIT__RATED_GROSS_MIN_P:
            setRatedGrossMinP((ActivePower) newValue);
            return;
        case ProductionPackage.GENERATING_UNIT__RATED_NET_MAX_P:
            setRatedNetMaxP((ActivePower) newValue);
            return;
        case ProductionPackage.GENERATING_UNIT__SHORT_PF:
            setShortPF((EA_Model.IEC61970.Domain.Float) newValue);
            return;
        case ProductionPackage.GENERATING_UNIT__SPIN_RESERVE_RAMP:
            setSpinReserveRamp((ActivePowerChangeRate) newValue);
            return;
        case ProductionPackage.GENERATING_UNIT__STARTUP_COST:
            setStartupCost((Money) newValue);
            return;
        case ProductionPackage.GENERATING_UNIT__STARTUP_TIME:
            setStartupTime((Seconds) newValue);
            return;
        case ProductionPackage.GENERATING_UNIT__STEP_CHANGE:
            setStepChange((ActivePower) newValue);
            return;
        case ProductionPackage.GENERATING_UNIT__TIE_LINE_PF:
            setTieLinePF((EA_Model.IEC61970.Domain.Float) newValue);
            return;
        case ProductionPackage.GENERATING_UNIT__VARIABLE_COST:
            setVariableCost((Money) newValue);
            return;
    }
    super.eSet(featureID, newValue);
}
