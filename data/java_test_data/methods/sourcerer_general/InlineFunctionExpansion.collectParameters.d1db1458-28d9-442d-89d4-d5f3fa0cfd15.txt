private static void collectParameters(ArrayList<CLInstruction> caller, ArrayList<ClassDescriptor> caller_locals, int call_index, int start) {
    Stack<Integer> p = new Stack<Integer>();
    int i = start;
    CLInstruction inst;
    byte optcode;
    while (i < call_index) {
        inst = caller.get(i);
        optcode = inst.getOptcode();
        if (pushConstant(optcode)) {
            p.push(new Integer(i));
        } else if (popOne(optcode)) {
            p.pop();
        } else if (pushOne(optcode)) {
            p.push(new Integer(i));
        } else if (operation(optcode)) {
            p.pop();
            p.pop();
            p.push(new Integer(i));
        }
        // ignore branches
        i++;
    }
    params = new ArrayList<Integer>();
    value = new ArrayList<Boolean>();
    Integer top;
    while (!p.empty()) {
        top = p.pop();
        params.add(top);
        if (isCallByValue(caller.get(top), caller_locals))
            value.add(new Boolean(true));
        else
            value.add(new Boolean(false));
    }
    // reverse parameters
    ArrayList<Integer> temp = new ArrayList<Integer>();
    for (i = params.size() - 1; i >= 0; i--) temp.add(params.get(i));
    params.clear();
    for (i = 0; i < temp.size(); i++) params.add(temp.get(i));
    // reverse call by value or reference
    ArrayList<Boolean> v = new ArrayList<Boolean>();
    for (i = value.size() - 1; i >= 0; i--) v.add(value.get(i));
    value.clear();
    for (i = 0; i < v.size(); i++) value.add(v.get(i));
}
