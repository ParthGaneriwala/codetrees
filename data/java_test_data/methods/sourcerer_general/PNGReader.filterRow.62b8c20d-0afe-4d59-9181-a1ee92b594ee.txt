/**
 * this method fills in blocks of color between pixels for a given
 * scan produced when reading an interlace format file
 */
/*
 This is block commented out as converting it to JimiImage use was not
 considered worthwhile because the JimiSource does not support outputting
 multiple frames of an image as it loads yet
 
    private void blockFill(int rowStart)
    {
        int counter;
        int dw = dataWidth;
        int pass = this.pass;
        int w = blockWidth[pass];
        int sCol = startingCol[pass];
        int cInc = colInc[pass];
        int wInc = cInc - w;
        int maxW = rowStart + dw - w;
        int len;

        int h = blockHeight[pass];
        int maxH = rowStart + (dw * h);
        int startPos = rowStart + sCol;

        counter = startPos;

        if (colorType == IT_PALETTE)
        {
            byte bpix[] = bpixels;
            byte pixel;
            len = bpix.length;

            for (; counter <= maxW;)
            {
                int end = counter + w;
                pixel = bpix[counter++];
                for (; counter < end; counter++)
                    bpix[counter] = pixel;
                counter += wInc;
            }
            maxW += w;

            if (counter < maxW)
            {
                for (pixel = bpix[counter++]; counter < maxW; counter++)
                    bpix[counter] = pixel;
            }

            if (len < maxH)
                maxH = len;

            for (counter = startPos + dw; counter < maxH; counter += dw)
                System.arraycopy(bpix, startPos, bpix, counter, dw - sCol);
        }
        else	// everything but palette is integer storage
        {
            int ipix[] = ipixels;
            int pixel;
            len = ipix.length;

            for (; counter <= maxW;)
            {
                int end = counter + w;
                pixel = ipix[counter++];
                for (; counter < end; counter++)
                    ipix[counter] = pixel;
                counter += wInc;
            }

            maxW += w;

            if (counter < maxW)
            {
                for (pixel = ipix[counter++]; counter < maxW; counter++)
                    ipix[counter] = pixel;
            }

            if (len < maxH)
                maxH = len;

            for (counter = startPos + dw; counter < maxH; counter += dw)
                System.arraycopy(ipix, startPos, ipix, counter, dw - sCol);
        }
    }
*/
private boolean filterRow(byte[] inbuf, int[] pix, int[] upix, int rowFilter, int boff) {
    int rowWidth = pix.length;
    switch(rowFilter) {
        case 0:
            {
                for (int x = 0; x < rowWidth; x++) pix[x] = 0xff & inbuf[x];
                break;
            }
        case 1:
            {
                int x = 0;
                for (; x < boff; x++) pix[x] = 0xff & inbuf[x];
                for (; x < rowWidth; x++) pix[x] = 0xff & (inbuf[x] + pix[x - boff]);
                break;
            }
        case 2:
            {
                if (upix != null) {
                    for (int x = 0; x < rowWidth; x++) pix[x] = 0xff & (upix[x] + inbuf[x]);
                } else {
                    for (int x = 0; x < rowWidth; x++) pix[x] = 0xff & inbuf[x];
                }
                break;
            }
        case 3:
            {
                if (upix != null) {
                    int x = 0;
                    for (; x < boff; x++) {
                        int rval = upix[x];
                        pix[x] = 0xff & ((rval >> 1) + inbuf[x]);
                    }
                    for (; x < rowWidth; x++) {
                        int rval = upix[x] + pix[x - boff];
                        pix[x] = 0xff & ((rval >> 1) + inbuf[x]);
                    }
                } else {
                    int x = 0;
                    for (; x < boff; x++) pix[x] = 0xff & inbuf[x];
                    for (; x < rowWidth; x++) {
                        int rval = pix[x - boff];
                        pix[x] = 0xff & ((rval >> 1) + inbuf[x]);
                    }
                }
                break;
            }
        case 4:
            {
                if (upix != null) {
                    int x = 0;
                    for (; x < boff; x++) pix[x] = 0xff & (upix[x] + inbuf[x]);
                    for (; x < rowWidth; x++) {
                        int a, b, c, p, pa, pb, pc, rval;
                        a = pix[x - boff];
                        b = upix[x];
                        c = upix[x - boff];
                        p = a + b - c;
                        pa = p > a ? p - a : a - p;
                        pb = p > b ? p - b : b - p;
                        pc = p > c ? p - c : c - p;
                        if ((pa <= pb) && (pa <= pc))
                            rval = a;
                        else if (pb <= pc)
                            rval = b;
                        else
                            rval = c;
                        pix[x] = 0xff & (rval + inbuf[x]);
                    }
                } else {
                    int x = 0;
                    for (; x < boff; x++) pix[x] = 0xff & inbuf[x];
                    for (; x < rowWidth; x++) {
                        int rval = pix[x - boff];
                        pix[x] = 0xff & (rval + inbuf[x]);
                    }
                }
                break;
            }
        default:
            return false;
    }
    return true;
}
