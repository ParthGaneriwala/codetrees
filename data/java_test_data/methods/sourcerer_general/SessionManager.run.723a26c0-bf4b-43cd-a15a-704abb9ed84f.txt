public void run() {
    _scheduler = Thread.currentThread();
    String name = _scheduler.getName();
    _scheduler.setName("session-scheduler");
    int priority = _scheduler.getPriority();
    try {
        _scheduler.setPriority(priority + _priorityOffset);
        do {
            try {
                CSession csession;
                long timeout;
                synchronized (_queue) {
                    csession = (CSession) _queue.peek();
                    timeout = (csession != null ? csession.nextExecutionTime() - System.currentTimeMillis() : Long.MAX_VALUE);
                    if (timeout > 0) {
                        if (Log.isDebugEnabled())
                            Log.debug("waiting {} ms for call session: {}", timeout, csession);
                        _queue.wait(timeout);
                    } else {
                        _queue.poll();
                    }
                }
                if (timeout <= 0) {
                    if (Log.isDebugEnabled())
                        Log.debug("running timers for call session: {}", csession);
                    runTimers(csession);
                }
            } catch (InterruptedException e) {
                continue;
            } catch (Throwable t) {
                Log.warn(t);
            }
        } while (isRunning());
    } finally {
        _scheduler.setName(name);
        _scheduler.setPriority(priority);
        _scheduler = null;
        String exit = "session-scheduler exited";
        if (isStarted())
            Log.warn(exit);
        else
            Log.debug(exit);
    }
}
