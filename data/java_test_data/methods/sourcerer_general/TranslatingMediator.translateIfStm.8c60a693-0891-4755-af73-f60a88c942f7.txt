public AssemType translateIfStm(AssemType assemTypeTest, AssemType assemTypeIf, AssemType assemTypeElse) {
    AssemExp assemExpTest = (AssemExp) assemTypeTest;
    // Create two labels - one for true for the if case and the other false for the else case
    Label ifLbl = new Label();
    Label elseLbl = new Label();
    // The "join" label
    Label endElseLbl = new Label();
    AssemType assemCond = assemExpTest.translateToCJump(ifLbl, elseLbl);
    AssemLabel assemJoinLabel = null;
    if (assemTypeIf.getType() == AssemType.VOID_TYPE) {
        // The if-then and else clauses are statements (eg - assign exps,while exps, etc.)
        AssemStm assemThenStm = (AssemStm) assemTypeIf;
        AssemStm assemElseStm = (AssemStm) assemTypeElse;
        // The statement to jump to at the end of the else clause
        AssemName assemNameJoinLabel = (AssemName) translateName(endElseLbl);
        AssemJump assemJoinJump = (AssemJump) translateJump(assemNameJoinLabel);
        Stack seqAssemTypes = new Stack();
        // The conditional jump
        seqAssemTypes.push(assemCond);
        // The "if-true" label
        seqAssemTypes.push(translateLabel(ifLbl));
        // The statement to be executed if cond. is true
        seqAssemTypes.push(assemThenStm);
        if (assemElseStm != null) {
            // end of the "else", since there is an else
            seqAssemTypes.push(assemJoinJump);
            // The "else" label
            seqAssemTypes.push(translateLabel(elseLbl));
            // The statement to be executed if cond. is false
            seqAssemTypes.push(assemElseStm);
            assemJoinLabel = (AssemLabel) translateLabel(endElseLbl);
        } else {
            // The else label is the join label
            assemJoinLabel = (AssemLabel) translateLabel(elseLbl);
        }
        seqAssemTypes.push(assemJoinLabel);
        return translateSeqStatement(seqAssemTypes);
    } else {
        // The if-then and else clauses are expressions yielding a value (eg - operator expressions, etc.)
        // Therefore, this should result in a MipsAssemSeqExp expression.
        Temp temp = new Temp();
        AssemTemp assemTemp = (AssemTemp) translateTemp(temp);
        AssemExp assemThenExp = (AssemExp) assemTypeIf;
        AssemExp assemElseExp = (AssemExp) assemTypeElse;
        // The statement to jump to at the end of the else clause
        AssemName assemNameJoinLabel = (AssemName) translateName(endElseLbl);
        AssemJump assemJoinJump = (AssemJump) translateJump(assemNameJoinLabel);
        Stack seqAssemTypes = new Stack();
        // The conditional jump
        seqAssemTypes.push(assemCond);
        // The "if-true" label
        seqAssemTypes.push(translateLabel(ifLbl));
        if (assemThenExp.getDescription().equals("StmSeqAndExp")) {
            // The expression is a SeqExp; push the statement first and get the expression
            seqAssemTypes.push(((AssemSeqExp) assemThenExp).getStm());
            assemThenExp = ((AssemSeqExp) assemThenExp).getExp();
            if (assemElseExp == null)
                assemTemp = (AssemTemp) assemThenExp.translateToIntType();
        }
        if (assemElseExp != null) {
            // Create a new move statement for moving the if value into a temp and push the statement
            AssemMove moveIfExpIntoTemp = new AssemMove(assemTemp, assemThenExp);
            // The statement to be executed if cond. is true
            seqAssemTypes.push(moveIfExpIntoTemp);
            // Do the else part now
            // end of the "else", since there is an else
            seqAssemTypes.push(assemJoinJump);
            // The "else" label
            seqAssemTypes.push(translateLabel(elseLbl));
            if (assemElseExp.getDescription().equals("StmSeqAndExp")) {
                // The expression is a SeqExp; push the statement first and get the expression
                seqAssemTypes.push(((AssemSeqExp) assemElseExp).getStm());
                assemElseExp = ((AssemSeqExp) assemElseExp).getExp();
            }
            // Create a new statement that assigns the expression into the temp
            AssemMove moveElseExpIntoTemp = new AssemMove(assemTemp, assemElseExp);
            seqAssemTypes.push(moveElseExpIntoTemp);
            assemJoinLabel = (AssemLabel) translateLabel(endElseLbl);
        } else {
            // The else label is the join label
            assemJoinLabel = (AssemLabel) translateLabel(elseLbl);
        }
        seqAssemTypes.push(assemJoinLabel);
        seqAssemTypes.push(assemTemp);
        return translateSeqStatement(seqAssemTypes);
    }
}
