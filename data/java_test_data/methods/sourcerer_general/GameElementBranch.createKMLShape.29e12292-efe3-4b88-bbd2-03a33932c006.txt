public BranchGroup createKMLShape(VirtualKML s, Appearance a) {
    BranchGroup bg = new BranchGroup();
    NormalGenerator ng = new NormalGenerator();
    Stripifier st = new Stripifier();
    ArrayList<VirtualKML.KMLGeometryCollection> geoms = s.getGeometryCollections();
    VirtualKML.KMLGeometryCollection g;
    for (int i = 0; i < geoms.size(); i++) {
        g = geoms.get(i);
        GeometryInfo gi = new GeometryInfo(GeometryInfo.POLYGON_ARRAY);
        // set the geometry info
        gi.setCoordinates(g.getPoints());
        // set stripcount
        gi.setStripCounts(g.getStripCounts());
        // generate normals
        ng.generateNormals(gi);
        // convert to strips
        st.stripify(gi);
        Appearance na = new Appearance();
        Material mat = new Material();
        int c = g.getColor();
        // NOTE: color decomposition is backwards for KML!! Don't copy the below line to other places!
        float[] kmlColor = new float[] { (c & 0xff) / 255f, ((c >> 8) & 0xff) / 255f, ((c >> 16) & 0xff) / 255f, ((c >> 24) & 0xff) / 255f };
        mat.setDiffuseColor(kmlColor[R], kmlColor[G], kmlColor[B]);
        mat.setSpecularColor(new Color3f(0.5f, 0.5f, 0.5f));
        na.setMaterial(mat);
        // copy any information we want to propagate
        na.setTransparencyAttributes(a.getTransparencyAttributes());
        // add a new shape
        bg.addChild(new Shape3D(gi.getGeometryArray(), na));
    }
    return bg;
}
