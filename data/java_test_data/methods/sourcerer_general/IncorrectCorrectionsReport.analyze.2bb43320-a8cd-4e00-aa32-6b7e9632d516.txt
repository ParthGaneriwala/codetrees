protected void analyze() {
    File dataDirectory = new File(Paths.BINDING_DB_PATH + "/" + _dir + "/");
    String[] fileNames = dataDirectory.list(new AccessFilesOnly());
    Integer[] totalICs = new Integer[fileNames.length];
    for (int session = _sessionStart; session <= _sessionEnd; session++) {
        totalICs[session - 1] = 0;
        String database = Paths.DB_OPEN_STR + Paths.BINDING_DB_PATH + _dir + "/" + fileNames[session - 1] + Paths.DB_CLOSE_STR;
        Connection con = null;
        try {
            con = DriverManager.getConnection(database, "", "");
            // BindingSessionSummary bss = new BindingSessionSummary(con);
            Double[] ics = new Double[8];
            Double[] proportion_ics = new Double[8];
            for (int i = 0; i < 8; i++) ics[i] = 0.0;
            Statement statement = con.createStatement();
            statement.execute("Select trialType, sum(IncorrectCorrections) as total from TrialResults WHERE CorrectPosition = 1 GROUP BY trialType ORDER BY trialType ASC");
            ResultSet rs = statement.getResultSet();
            while (rs.next()) {
                int ttype = rs.getInt("TrialType");
                ics[ttype - 1] = Double.valueOf(rs.getInt("total"));
            }
            // }
            for (int i = 0; i < ics.length; i++) {
                if (ics[i] != 0)
                    proportion_ics[i] = 100.0 * (ics[i] / totalICs[session - 1]);
            }
            // we want to remap the indices
            int hh = 0, hv = 1, hp = 2, vv = 3, vh = 4, vp = 5, ph = 6, pv = 7;
        // DataPrinter.printWithTabs(true, proportion_ics[hh], proportion_ics[hv], proportion_ics[vh],
        // proportion_ics[vv], proportion_ics[ph], proportion_ics[pv], proportion_ics[hp],
        // proportion_ics[vp]);
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
        // Thread t = new Thread(new ConnectionCloser(con));
        // t.start();
        }
    }
    // summary report
    DataPrinter.printWithTabs(true, "Session", "Total ICs");
    for (int i = 1; i <= totalICs.length; i++) if (totalICs[i - 1] != null)
        DataPrinter.printWithTabsAndLabel(true, String.valueOf(i), totalICs[i - 1]);
}
