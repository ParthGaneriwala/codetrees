private ParseNode factor() {
    if (nowReadingsymbol.isTerminal(FnumberToken.class)) {
        FnumberNode node = new FnumberNode(nowReadingsymbol);
        // !!!!!!!!!!!
        readToken();
        return node;
    } else if (nowReadingsymbol.isTerminal(NumberToken.class)) {
        NumberNode node = new NumberNode(nowReadingsymbol);
        readToken();
        return node;
    } else if (nowReadingsymbol.isTerminal(BooleanToken.class)) {
        BooleanNode node = new BooleanNode(nowReadingsymbol);
        readToken();
        return node;
    } else if (nowReadingsymbol.isTerminal(StringConstantToken.class)) {
        StringConstantNode node = new StringConstantNode(nowReadingsymbol);
        readToken();
        return node;
    } else if (nowReadingsymbol.isTerminal(IdentifierToken.class)) {
        IdentifierNode node = new IdentifierNode(nowReadingsymbol);
        readToken();
        if (nowReadingsymbol.isOperator(Operator.LINDEXING)) {
            // array indexing
            IdentifierNode indexedId = new IdentifierNode(new TokenGrammarSymbol(lastEaten));
            ArrayVarNode parent = new ArrayVarNode(NonterminalGrammarSymbol.ARRAY);
            readToken();
            if (nowReadingsymbol.isOperator(Operator.RINDEXING)) {
                error("The indexed Identifier sytax is wrong!");
            } else {
                // 
                ParseNode expr = expr();
                if (nowReadingsymbol.isOperator(Operator.RINDEXING)) {
                    parent.appendChild(expr);
                    readToken();
                    while (nowReadingsymbol.isOperator(Operator.LINDEXING)) {
                        readToken();
                        if (nowReadingsymbol.isOperator(Operator.RINDEXING)) {
                            error("The indexed Identifier sytax is wrong!");
                        } else {
                            expr = expr();
                            if (nowReadingsymbol.isOperator(Operator.RINDEXING)) {
                                parent.appendChild(expr);
                                readToken();
                            } else {
                                error("The indexed Identifier sytax is wrong!");
                            }
                        }
                    }
                    // add id
                    parent.appendChild(indexedId);
                    if (nowReadingsymbol.isOperator(Operator.INC) || nowReadingsymbol.isOperator(Operator.DEC)) {
                        ParseNode parentUnary = getConcreteTypwNode(new ParseNode(nowReadingsymbol));
                        parentUnary.appendChild(parent);
                        PunctuationToken colon = PunctuationToken.make(null, ":", PunctuationSymbol.COLON);
                        PunctuationSymbolNode colonNode = new PunctuationSymbolNode(new TokenGrammarSymbol(colon));
                        parentUnary.appendChild(colonNode);
                        readToken();
                        return parentUnary;
                    } else {
                        return parent;
                    }
                } else {
                    error("The indexed Identifier sytax is wrong!");
                }
            }
        }
        // I am not sure ??????????????????????????
        if (nowReadingsymbol.isOperator(Operator.INC) || nowReadingsymbol.isOperator(Operator.DEC)) {
            ParseNode parentUnary = getConcreteTypwNode(new ParseNode(nowReadingsymbol));
            parentUnary.appendChild(node);
            PunctuationToken colon = PunctuationToken.make(null, ":", PunctuationSymbol.COLON);
            PunctuationSymbolNode colonNode = new PunctuationSymbolNode(new TokenGrammarSymbol(colon));
            parentUnary.appendChild(colonNode);
            readToken();
            return parentUnary;
        }
        // I am not suer????????????????????????????????????
        if (nowReadingsymbol.isOperator(Operator.LBRACKET)) {
            InvocationNode InvovationParent = new InvocationNode(NonterminalGrammarSymbol.INVOCATION);
            readToken();
            // make nowReadingsymbol the next Token after (
            ParseNode args = argList();
            if (nowReadingsymbol.isOperator(Operator.RBRACKET)) {
                // ���������֮�� nowReadingsymbolӦ���Ǳ��id()֮��ĵ�һ��toke
                readToken();
                if (args == null) {
                // do nothing do not append
                } else {
                    for (ParseNode child : args.getChildren()) {
                        if (!child.getSymbol().isPuctuation(PunctuationSymbol.COLON))
                            node.appendChild(child);
                    }
                }
            } else {
                error("the rIncovation syntax is Wrong!!");
            }
            PunctuationToken colon = PunctuationToken.make(null, ":", PunctuationSymbol.COLON);
            PunctuationSymbolNode colonNode = new PunctuationSymbolNode(new TokenGrammarSymbol(colon));
            node.appendChild(colonNode);
            for (ParseNode child : node.getChildren()) {
                InvovationParent.appendChild(child);
            }
            InvovationParent.appendChild(node);
            return InvovationParent;
        }
        return node;
    } else
        // else if(")")
        error("The expression sytax is wrong!" + " at line " + nowReading.getLocation().getLineNumber());
    return null;
}
