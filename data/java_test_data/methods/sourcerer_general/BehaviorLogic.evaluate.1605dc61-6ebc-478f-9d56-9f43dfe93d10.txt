// documentation inherited
@Override
protected void evaluate() {
    super.evaluate();
    // determine the square of the branch radius
    float br2;
    if (_path == null) {
        br2 = Float.MAX_VALUE;
    } else {
        float radius = ((BehaviorConfig.Patrol) _config).branchRadius;
        if (radius < 0f) {
            // no possibility of branching
            return;
        }
        br2 = radius * radius;
    }
    // resolve the target paths
    _target.resolve(_agent, _targets);
    Vector2f trans = _agent.getTranslation();
    for (int ii = 0, nn = _targets.size(); ii < nn; ii++) {
        Logic target = _targets.get(ii);
        if (target == _currentTarget) {
            continue;
        }
        Vector2f[] path = _targets.get(ii).getPatrolPath();
        if (path == null) {
            continue;
        }
        // find the index of the closest node on the path
        float cdist = Float.MAX_VALUE;
        int cidx = -1;
        for (int jj = 0, mm = path.length; jj < mm; jj++) {
            float dist = path[jj].distanceSquared(trans);
            if (dist < cdist) {
                cidx = jj;
                cdist = dist;
            }
        }
        if (cdist <= br2) {
            _candidates.add(new PathCandidate(target, path, cidx));
        }
    }
    _targets.clear();
    // pick a candidate at random
    if (_candidates.isEmpty()) {
        return;
    }
    if (_path != null) {
        // represents the current path
        _candidates.add(null);
    }
    PathCandidate candidate = RandomUtil.pickRandom(_candidates);
    _candidates.clear();
    // set off on that path
    if (candidate != null) {
        setPath(candidate.getRemainingPath(_agent.getRotation()), candidate.getTarget());
    }
}
