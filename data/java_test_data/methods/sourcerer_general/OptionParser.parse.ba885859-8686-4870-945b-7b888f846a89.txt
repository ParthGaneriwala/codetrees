public Object parse(String[] args, boolean failOnUnrecognized, boolean parrot) {
    if (parrot)
        System.out.println("Calling with " + Arrays.deepToString(args));
    try {
        Set<String> seenOpts = new HashSet<String>();
        passedInOptions = new StringBuilder("{");
        Object options = optionsClass.newInstance();
        for (int i = 0; i < args.length; ++i) {
            if (args[i].equals("-h")) {
                usage();
            }
            Option opt = nameToOption.get(args[i]);
            if (opt == null) {
                if (failOnUnrecognized) {
                    throw new RuntimeException("Did not recognize option " + args[i]);
                }
                System.err.println("WARNING: Did not recognize option " + args[i]);
                continue;
            }
            seenOpts.add(args[i]);
            Field field = nameToField.get(args[i]);
            Class fieldType = field.getType();
            // we set the associate field to true
            if (fieldType == boolean.class) {
                field.setBoolean(options, true);
                passedInOptions.append(String.format(" %s => true", opt.name()));
            } else // Otherwise look at next arg and
            // set field to that value
            // this will automatically
            // convert String to double or
            // whatever
            {
                String value = args[i + 1];
                value = value.trim();
                passedInOptions.append(String.format(" %s => %s", opt.name(), value));
                if (fieldType == int.class) {
                    field.setInt(options, Integer.parseInt(value));
                } else if (fieldType == double.class) {
                    field.setDouble(options, Double.parseDouble(value));
                } else if (fieldType == float.class) {
                    field.setFloat(options, Float.parseFloat(value));
                } else if (fieldType == short.class) {
                    field.setFloat(options, Short.parseShort(value));
                } else if (fieldType == long.class) {
                    field.setLong(options, Long.parseLong(value));
                } else if (fieldType.isEnum()) {
                    Object[] possibleValues = fieldType.getEnumConstants();
                    boolean found = false;
                    for (Object possibleValue : possibleValues) {
                        String enumName = ((Enum) possibleValue).name();
                        if (value.equals(enumName)) {
                            field.set(options, possibleValue);
                            found = true;
                            break;
                        }
                    }
                    if (!found) {
                        if (failOnUnrecognized) {
                            throw new RuntimeException("Unrecognized enumeration option " + value);
                        }
                        System.err.println("WARNING: Did not recognize option Enumeration option " + value);
                    }
                } else if (fieldType == String.class) {
                    field.set(options, value);
                } else {
                    try {
                        Constructor constructor = fieldType.getConstructor(new Class[] { String.class });
                        field.set(options, constructor.newInstance((Object[]) (new String[] { value })));
                    } catch (NoSuchMethodException e) {
                        System.err.println("Cannot construct object of type " + fieldType.getCanonicalName() + " from just a string");
                    }
                }
                ++i;
            }
        }
        passedInOptions.append(" }");
        Set<String> optionsLeft = new HashSet<String>(requiredOptions);
        optionsLeft.removeAll(seenOpts);
        if (!optionsLeft.isEmpty()) {
            System.err.println("Failed to specify: " + optionsLeft);
            usage();
        }
        return options;
    } catch (Exception e) {
        e.printStackTrace();
    }
    return null;
}
