static Complex divideRealComplex(double a, double c, double d) {
    double e;
    double f;
    double denominator;
    if (a == 0.0 || c == 0.0 && d == 0.0 || Double.isInfinite(c) && Double.isInfinite(d)) {
        denominator = Math.abs(c) + Math.abs(d);
        c = Math.copySign(1.0, c);
        d = Math.copySign(1.0, d);
        e = a * c;
        f = -a * d;
    } else {
        double absA = Math.abs(a);
        double absC = Math.abs(c);
        double absD = Math.abs(d);
        if (absD >= absC) {
            denominator = d + c * (c / d);
            double absRD = 1.0 / absD;
            if (absC >= absRD) {
                if (absA >= absC) {
                    e = c * (a / d);
                } else if (absA >= absRD) {
                    e = a * (c / d);
                } else {
                    e = a * c / d;
                }
            } else {
                if (absA >= absRD) {
                    e = a * c / d;
                } else if (absA >= absC) {
                    e = a * (c / d);
                } else {
                    e = c * (a / d);
                }
            }
            f = -a;
        } else {
            denominator = c + d * (d / c);
            double absRC = 1.0 / absC;
            e = a;
            if (absD >= absRC) {
                if (absA >= absD) {
                    f = -d * (a / c);
                } else if (absA >= absRC) {
                    f = -a * (d / c);
                } else {
                    f = -a * d / c;
                }
            } else {
                if (absA >= absRC) {
                    f = -a * d / c;
                } else if (absA >= absD) {
                    f = -a * (d / c);
                } else {
                    f = -d * (a / c);
                }
            }
        }
    }
    return new ComplexNumber(e / denominator, f / denominator);
}
