private static void partitionConcept(CKModel<String, String> _modele) {
    System.out.println(Consts.inputCtoPartition);
    for (int i = 0; i < _modele.getCSize(); i++) {
        System.out.println(_modele.findConceptFromId(i).toString());
    }
    int fatherId = Saisie.saisieValeur();
    while (fatherId < 0 || fatherId > _modele.getCSize()) {
        System.out.println(Consts.errorInput);
        System.out.println(Consts.inputCtoPartition);
        for (int i = 0; i < _modele.getCSize(); i++) {
            System.out.println(_modele.findConceptFromId(i).toString());
        }
        fatherId = Saisie.saisieValeur();
    }
    System.out.println(Consts.inputKtoPartitionC);
    for (int i = 0; i < _modele.getKSize(); i++) {
        _modele.getKSpace().elementAt(i).toString();
    }
    int indexKpartition = Saisie.saisieValeur();
    if (indexKpartition == -1) {
        System.out.println(Consts.inputK);
        String kChaine = Saisie.saisieChaine();
        Knowledge<String> K = new Knowledge<String>(_modele.getKSize(), kChaine);
        _modele.addKnowledge(K);
        indexKpartition = _modele.getKSize() - 1;
    } else {
        while (indexKpartition < -1 || indexKpartition > _modele.getKSize()) {
            System.out.println(Consts.errorInput);
            System.out.println(Consts.inputKtoPartitionC);
            for (int i = 0; i < _modele.getKSpace().size(); i++) {
                _modele.getKSpace().get(i).toString();
            }
            indexKpartition = Saisie.saisieValeur();
        }
    }
    System.out.println(Consts.inputC);
    String chaine = Saisie.saisieChaine();
    Concept<String> child = new Concept<String>(_modele.getCSize(), chaine);
    // Get father concept
    Concept<String> father = _modele.findConceptFromId(fatherId);
    _modele.partition(child, father);
    _modele.addLink(child, _modele.getKSpace().elementAt(indexKpartition));
}
