private void procuraDeclaracao(NaoTerminal nt, NaoTerminal escopo) {
    String tipo;
    String nome;
    Token idToken;
    int linha = AnalisadorSemantico.getNumeroLinha(nt);
    // <DEC_VARIAVEL> ::= <TIPO> [ ‘[‘ ‘]’  ] <NOME> [ <ATRIBUIR_VALOR> | { ‘,’ <NOME> } ] ‘;’
    if (nt.getNome().equals("DEC_VARIAVEL")) {
        // Não Terminal Tipo
        NaoTerminal tipoNTerminal = (NaoTerminal) nt.get(0);
        tipo = AnalisadorSemantico.extraiIdDeTipo(tipoNTerminal);
        NaoTerminal nomeNTerminal = null;
        int indexFilho = 2;
        if (nt.get(1) instanceof Terminal) {
            tipo = tipo + "[]";
            nomeNTerminal = (NaoTerminal) nt.get(3);
            indexFilho = 4;
        } else if (nt.get(1) instanceof NaoTerminal) {
            nomeNTerminal = (NaoTerminal) nt.get(1);
            if (nt.get(2) instanceof Terminal) {
                Terminal t = (Terminal) nt.get(indexFilho);
                if (t.getSimbolo().getAtributo().toString().equals("[")) {
                    tipo = tipo + "[]";
                    indexFilho = 4;
                }
            }
        }
        // insere na tabela de símbolos
        nome = AnalisadorSemantico.extraiIdDeNomeOuTipoPrimitivo(nomeNTerminal);
        insereSimbolo(nome, tipo, escopo, linha);
        // procura outras variáveis qd ocorrer: tipo id1, id2;
        while ((indexFilho + 1) < nt.getFilhos().size() && nt.get(indexFilho) instanceof Terminal) {
            Terminal t = (Terminal) nt.get(indexFilho);
            if (t.getSimbolo().getAtributo().toString().equals(",")) {
                nomeNTerminal = (NaoTerminal) nt.get(indexFilho + 1);
                // insere na tabela de símbolos
                nome = AnalisadorSemantico.extraiIdDeNomeOuTipoPrimitivo(nomeNTerminal);
                insereSimbolo(nome, tipo, escopo, linha);
                indexFilho += 2;
            } else {
                break;
            }
        }
    } else // <DEC_CONSTANTE> ::= const <TIPO_PRIMITIVO> <NOME> <ATRIBUIR_VALOR> â€˜;â€™
    if (nt.getNome().equals("DEC_CONSTANTE")) {
        // NÃ£o Terminal Tipo
        NaoTerminal tipoNaoTerminal = (NaoTerminal) nt.get(1);
        Terminal identificadorTerminal = (Terminal) tipoNaoTerminal.get(0);
        idToken = identificadorTerminal.getSimbolo();
        // id ou palavra reservada char, int
        tipo = idToken.getAtributo().toString();
        NaoTerminal nomeNaoTerminal;
        nomeNaoTerminal = (NaoTerminal) nt.get(2);
        nome = AnalisadorSemantico.extraiIdDeNomeOuTipoPrimitivo(nomeNaoTerminal);
        // insere na tabela de sÃ­mbolos
        insereSimbolo(nome, tipo, escopo, idToken.getLinha());
    } else // <DEC_CLASSE_INTERNA> ::= class <NOME>â€˜{â€˜ { <DEC_ATRIBUTO> } â€˜}â€™
    if (nt.getNome().equals("DEC_CLASSE_INTERNA")) {
        // NÃ£o Terminal Tipo
        Terminal tipoTerminal = (Terminal) nt.get(0);
        // Terminal identificadorTerminal = (Terminal) tipoNaoTerminal.get(0);
        idToken = tipoTerminal.getSimbolo();
        // id ou palavra reservada char, int
        tipo = idToken.getAtributo().toString();
        NaoTerminal nomeNaoTerminal;
        nomeNaoTerminal = (NaoTerminal) nt.get(1);
        nome = AnalisadorSemantico.extraiIdDeNomeOuTipoPrimitivo(nomeNaoTerminal);
        // insere na tabela de sÃ­mbolos
        insereSimbolo(nome, tipo, escopo, idToken.getLinha());
    } else // TIPO_RETORNO
    if (nt.getNome().equals("DEC_METODO")) {
        // NÃ£o Terminal Tipo Retorno
        NaoTerminal tipoRetornoNaoTerminal = (NaoTerminal) nt.get(0);
        String tipoRetorno = "";
        if (tipoRetornoNaoTerminal.get(0) instanceof NaoTerminal) {
            // TIPO
            NaoTerminal tipoNaoTerminal = (NaoTerminal) tipoRetornoNaoTerminal.get(0);
            tipoRetorno = AnalisadorSemantico.extraiIdDeTipo(tipoNaoTerminal);
        } else if (tipoRetornoNaoTerminal.get(0) instanceof Terminal) {
            tipoRetorno = "void";
        }
        tipo = "METODO!" + tipoRetorno;
        NaoTerminal nomeNaoTerminal;
        nomeNaoTerminal = (NaoTerminal) nt.get(1);
        nome = AnalisadorSemantico.extraiIdDeNomeOuTipoPrimitivo(nomeNaoTerminal);
        // insere na tabela de simbolos
        insereSimbolo(nome, tipo, escopo, linha);
    } else // <DEC_PARAMETROS> ::= <TIPO> [ â€˜[â€˜ â€˜]â€™ ] <NOME> { â€˜,â€™ <TIPO> [ â€˜[â€˜ â€˜]â€™ ] <NOME> }
    if (nt.getNome().equals("DEC_PARAMETROS")) {
        int indexFilho = 0;
        NaoTerminal tipoNaoTerminal = null;
        NaoTerminal nomeNaoTerminal = null;
        int indexParam = 0;
        while (indexFilho + 1 < nt.getFilhos().size()) {
            tipoNaoTerminal = (NaoTerminal) nt.get(indexFilho);
            tipo = "PARAM" + indexParam + "!" + AnalisadorSemantico.extraiIdDeTipo(tipoNaoTerminal);
            indexFilho++;
            // tipo []
            if (nt.get(indexFilho) instanceof Terminal) {
                tipo = tipo + "[]";
                indexFilho += 2;
            }
            // recupera o nome
            nomeNaoTerminal = (NaoTerminal) nt.get(indexFilho);
            indexFilho++;
            nome = AnalisadorSemantico.extraiIdDeNomeOuTipoPrimitivo(nomeNaoTerminal);
            insereSimbolo(nome, tipo, escopo, linha);
            indexParam++;
            if (indexFilho < nt.getFilhos().size() && nt.get(indexFilho) instanceof Terminal) {
                Terminal t = (Terminal) nt.get(indexFilho);
                indexFilho++;
                if (t.getSimbolo().getAtributo().toString().equals(",")) {
                }
            // indexFilho;
            } else {
                break;
            }
        }
    }
    return;
}
