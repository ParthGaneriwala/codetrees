void decodeTiles() throws JimiException, IOException {
    // tile buffer
    byte[] tile;
    int bitsPerSample = bitspersample[0];
    byte[] pixelBuf = null;
    // stop compiler complaining about initialise
    int[] pixelBufI = null;
    boolean startPage = true;
    int baseTileXoff = 0;
    int baseTileYoff = 0;
    int tileYoff;
    int clippedWidth;
    if (samplesperpixel != 1) {
        pixelBufI = new int[tilewidth];
        pixelBuf = new byte[tilewidth * samplesperpixel];
    } else // samplesperpixel == 1
    {
        if (bitsPerSample == 1)
            // bit packed
            pixelBuf = new byte[(tilewidth + 7) / 8];
        else
            pixelBuf = new byte[tilewidth];
    }
    // allocate enough space for the largest tile
    int max_tile_size = 0;
    for (int i = 0; i < tilesperimage; i++) if (tilebytecounts[i] > max_tile_size)
        max_tile_size = tilebytecounts[i];
    // + 2 for end of array exception in decopmressor in G3
    tile = new byte[max_tile_size + 2];
    for (int t = 0; t < tilesperimage; ++t) {
        sis.seek(tileoffsets[t]);
        sis.readFully(tile, 0, tilebytecounts[t]);
        Decompressor dcmpr = createDecompressor(tile);
        if (photometricinterpretation == TIFTags.PHOTOMETRIC_WHITEISZERO)
            dcmpr.setInvert(true);
        dcmpr.begOfStrip();
        if (startPage)
            dcmpr.begOfPage();
        startPage = false;
        tileYoff = baseTileYoff;
        for (int i = tilelength; --i >= 0; ) {
            dcmpr.decodeLine(pixelBuf, pixelBuf.length);
            // clip against right border of image
            if ((baseTileXoff + tilewidth) > imagewidth)
                clippedWidth = imagewidth - baseTileXoff;
            else
                clippedWidth = tilewidth;
            // clip against bottom border of image
            if (tileYoff < imagelength) {
                if (samplesperpixel == 1) {
                    if (bitsPerSample == 1) {
                        // LZW predictor is not implemented as it appears that there
                        // is no way to create Black & White LZW compressed images.
                        setPackedChannel_Oriented(baseTileXoff, tileYoff, clippedWidth, pixelBuf);
                    } else {
                        if (compression == TIFTags.COMPRESSION_LZW) {
                            if (predictor == TIFTags.PREDICTOR_HORIZONTAL) {
                                for (int k = 0; k < pixelBuf.length - 1; ++k) pixelBuf[k + 1] += pixelBuf[k];
                            }
                        }
                        setChannel_Oriented(baseTileXoff, tileYoff, clippedWidth, pixelBuf);
                    }
                } else {
                    if (compression == TIFTags.COMPRESSION_LZW) {
                        // different for R/G/B byte data
                        if (predictor == TIFTags.PREDICTOR_HORIZONTAL) {
                            for (int k = 0; k < (pixelBuf.length - 1) / 3; ++k) {
                                pixelBuf[(k + 1) * 3] += pixelBuf[k * 3];
                                pixelBuf[(k + 1) * 3 + 1] += pixelBuf[k * 3 + 1];
                                pixelBuf[(k + 1) * 3 + 2] += pixelBuf[k * 3 + 2];
                            }
                        }
                    }
                    for (int j = 0; j < imagewidth; ++j) {
                        pixelBufI[j] = 0xFF000000 | ((pixelBuf[j * 3] & 0xff) << 16) | ((pixelBuf[j * 3 + 1] & 0xff) << 8) | ((pixelBuf[j * 3 + 2] & 0xff));
                    }
                    setChannel_Oriented(baseTileXoff, tileYoff, clippedWidth, pixelBufI);
                }
                ++tileYoff;
            } else
                // exit loop done with this tile.
                i = 0;
        }
        baseTileXoff += tilewidth;
        if (baseTileXoff > ((tilesacross - 1) * tilewidth)) {
            baseTileXoff = 0;
            baseTileYoff += tilelength;
        }
    }
}
