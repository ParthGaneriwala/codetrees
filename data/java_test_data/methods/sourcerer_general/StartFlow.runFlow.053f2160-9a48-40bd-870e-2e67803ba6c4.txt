/*
	 * (non-Javadoc)
	 * 
	 * @see com.sunbay.as.chain.AbstractFlow#drowFlow(javax.servlet.jsp.JspWriter)
	 */
/**
 * public void drowFlow(JspWriter out) {
 * try {
 * out.print("<style>#flow" + getChainFlow().getFlowId()
 * + "{POSITION: relative;}</style>");
 * out
 * .print("<div id=\"flow"
 * + getChainFlow().getFlowId()
 * + "\" class=\"startstyle\"><div class=\"ArrowStart\"></div>");
 * out.print("<div class=\"flowinfostart\" ><a href=\""
 * + getForward() + "&flowId="+ getChainFlow().getFlowId()
 * + "&chainId=" + getChainFlow().getChain().getChainId()
 * + "\" >"
 * + getChainFlow().getFlowCode() + "</a>");
 * out.print("<a href=\"javascript:FunNext('"
 * + getChainFlow().getFlowId()
 * + "',0)\"><font color=blue>--></font></a>"
 * + StringUtil.toString(getChainFlow().getNextFlowCode()) + "<br>");
 * out.print(getChainFlow().getFlowName() + "<br>");
 * out.print("</div></div>");
 * } catch (Exception e) {
 * log.warn("Draw Start Flow ["+this.getChainFlow().toString() +"] error.", e);
 * }
 * }
 */
public String runFlow(ChainFlow chainFlow, ChainContext chainContext) throws FlowException {
    try {
        String msg = "Start to run the flow " + chainFlow.getFlowCode() + ".";
        if (log.isInfoEnabled()) {
            log.info(msg);
        }
        if (msg != null) {
            chainContext.addSimuList("<font color=black><b>" + msg + "</b></font>");
        }
        SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
        String sDate = formatter.format(Calendar.getInstance().getTime());
        formatter = new SimpleDateFormat("HH:mm:ss");
        String sTime = formatter.format(Calendar.getInstance().getTime());
        // 
        DataMapping dataMapping = new DataMapping();
        dataMapping.setFieldName(Configuration.SEPARATOR_SYSTEM + Configuration.VAR_DATE + Configuration.SEPARATOR_SYSTEM);
        dataMapping.setFieldValue(sDate);
        dataMapping.setFieldMapping(sDate);
        chainContext.addDataMap(dataMapping.getFieldName(), dataMapping);
        // 
        dataMapping = new DataMapping();
        dataMapping.setFieldName(Configuration.SEPARATOR_SYSTEM + Configuration.VAR_TIME + Configuration.SEPARATOR_SYSTEM);
        dataMapping.setFieldValue(sTime);
        dataMapping.setFieldMapping(sTime);
        chainContext.addDataMap(dataMapping.getFieldName(), dataMapping);
        // 
        dataMapping = new DataMapping();
        dataMapping.setFieldName(Configuration.SEPARATOR_SYSTEM + Configuration.VAR_CHAIN_NAME + Configuration.SEPARATOR_SYSTEM);
        dataMapping.setFieldValue(chainContext.getChain().getName());
        dataMapping.setFieldMapping(chainContext.getChain().getName());
        chainContext.addDataMap(dataMapping.getFieldName(), dataMapping);
        // 
        dataMapping = new DataMapping();
        dataMapping.setFieldName(Configuration.SEPARATOR_SYSTEM + Configuration.VAR_IP + Configuration.SEPARATOR_SYSTEM);
        dataMapping.setFieldValue(chainContext.getIp());
        dataMapping.setFieldMapping(chainContext.getIp());
        chainContext.addDataMap(dataMapping.getFieldName(), dataMapping);
        // 
        dataMapping = new DataMapping();
        dataMapping.setFieldName(Configuration.SEPARATOR_SYSTEM + Configuration.VAR_ANTENNAID + Configuration.SEPARATOR_SYSTEM);
        dataMapping.setFieldValue(chainContext.getAntennaid());
        dataMapping.setFieldMapping(chainContext.getAntennaid());
        chainContext.addDataMap(dataMapping.getFieldName(), dataMapping);
        // 
        dataMapping = new DataMapping();
        dataMapping.setFieldName(Configuration.SEPARATOR_SYSTEM + Configuration.VAR_READERID + Configuration.SEPARATOR_SYSTEM);
        dataMapping.setFieldValue(chainContext.getReaderid());
        dataMapping.setFieldMapping(chainContext.getReaderid());
        chainContext.addDataMap(dataMapping.getFieldName(), dataMapping);
        // 
        dataMapping = new DataMapping();
        dataMapping.setFieldName(Configuration.SEPARATOR_SYSTEM + Configuration.VAR_UNIQUEID + Configuration.SEPARATOR_SYSTEM);
        dataMapping.setFieldValue(chainContext.getUniqueid());
        dataMapping.setFieldMapping(chainContext.getUniqueid());
        chainContext.addDataMap(dataMapping.getFieldName(), dataMapping);
        // 
        dataMapping = new DataMapping();
        dataMapping.setFieldName(Configuration.SEPARATOR_SYSTEM + Configuration.VAR_USERDATA + Configuration.SEPARATOR_SYSTEM);
        dataMapping.setFieldValue(chainContext.getUserdata());
        dataMapping.setFieldMapping(chainContext.getUserdata());
        chainContext.addDataMap(dataMapping.getFieldName(), dataMapping);
        // 
        if (chainContext.getUserdata().equals("")) {
            return "0";
        }
        // User data define
        Properties p = new Properties();
        InputStream ferr = null;
        try {
            ferr = ClassLoader.getSystemResourceAsStream("userStructure.properties");
            p.load(ferr);
            ferr.close();
            Iterator<Object> it = p.keySet().iterator();
            while (it.hasNext()) {
                String id = (String) it.next();
                String value = p.getProperty(id);
                id = new String(id.getBytes("ISO-8859-1"), "GBK");
                value = new String(value.getBytes("ISO-8859-1"), "GBK");
                dataMapping = new DataMapping();
                dataMapping.setFieldName(Configuration.SEPARATOR_USER + id + Configuration.SEPARATOR_USER);
                dataMapping.setFieldValue(value);
                dataMapping.setFieldMapping(value);
                chainContext.addDataMap(dataMapping.getFieldName(), dataMapping);
            }
        } catch (Exception e) {
            try {
                if (ferr != null) {
                    ferr.close();
                }
            } catch (IOException e1) {
                log.warn("Parse data editor error.", e);
                chainContext.addSimuList("Parse data editor error.[" + e.getMessage() + "]");
            }
        }
        Tag tag = chainFlow.getChain().getTag();
        if (tag != null && tag.getTagStructures() != null) {
            if (Configuration.USER_DATA_TYPE_BINARY.equals(chainContext.getUserDataType())) {
                chainContext.addSimuList("Parse tag error.[ tag can not support binary ]");
                return "98";
            }
            boolean parseResult = false;
            Iterator<TagStructure> iter = tag.getTagStructures().iterator();
            while (iter.hasNext()) {
                TagStructure tagStructure = (TagStructure) iter.next();
                try {
                    if (chainContext.getUserDataType().equals(Configuration.USER_DATA_TYPE_HEX)) {
                        dataMapping = TagParser.parseHexDataMapping(tagStructure, chainContext.getUserdata());
                    } else if (chainContext.getUserDataType().equals(Configuration.USER_DATA_TYPE_DECIMALIST)) {
                        dataMapping = TagParser.parseDecimalistDataMapping(tagStructure, chainContext.getUserdata());
                    } else {
                        dataMapping = TagParser.parseHexDataMapping(tagStructure, chainContext.getUserdata());
                    }
                } catch (Exception e) {
                    log.warn("Parse tag error.", e);
                    chainContext.addSimuList("Parse tag error.[" + e.getMessage() + "]");
                    break;
                }
                // TODO
                if (dataMapping == null) {
                    log.warn("Parse tag error.");
                    chainContext.addSimuList("Parse tag error.");
                    break;
                }
                chainContext.addDataMap(dataMapping.getFieldName(), dataMapping);
                parseResult = true;
            }
            if (!parseResult) {
                return "98";
            }
        }
        Iterator<Object> iter = chainContext.getDataMapIterator();
        while (iter.hasNext()) {
            dataMapping = (DataMapping) iter.next();
            chainContext.addSimuList(dataMapping.getFieldName() + ": " + dataMapping.getFieldMapping());
        }
        log.info("StartFlowImp::runFlow OK");
        chainContext.addSimuList("StartFlowImp::runFlow OK<br>--------------------------------");
        return "0";
    } catch (Exception e) {
        log.error("StartFlowImp::runFlow" + e.getMessage());
        chainContext.addSimuList("StartFlowImp::runFlow" + e.getMessage());
        return "98";
    }
}
