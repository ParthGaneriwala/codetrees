public void adaptToTerrain(World world) {
    Terrain activeTerrain;
    float xLength = this.getWidth() * (float) (Math.cos(Math.toRadians(rotationY)) + 1) * 0.5f + this.getLength() * (float) (Math.sin(Math.toRadians(rotationY)) + 1) * 0.5f;
    float zLength = this.getLength() * (float) (Math.cos(Math.toRadians(rotationY)) + 1) * 0.5f + this.getWidth() * (float) (Math.sin(Math.toRadians(rotationY)) + 1) * 0.5f;
    float frontX = positionX;
    float frontZ = positionZ - zLength / 2;
    float frontY = 0f;
    activeTerrain = world.getActiveTerrain(frontX, frontZ);
    if (activeTerrain != null) {
        frontY = activeTerrain.getPositionY(frontX, frontZ);
    }
    float backX = positionX;
    float backZ = positionZ + zLength / 2;
    float backY = 0f;
    activeTerrain = world.getActiveTerrain(backX, backZ);
    if (activeTerrain != null) {
        backY = activeTerrain.getPositionY(backX, backZ);
    }
    float leftX = positionX - xLength / 2;
    float leftZ = positionZ;
    float leftY = 0f;
    activeTerrain = world.getActiveTerrain(leftX, leftZ);
    if (activeTerrain != null) {
        leftY = activeTerrain.getPositionY(leftX, leftZ);
    }
    float rightX = positionX + xLength / 2;
    float rightZ = positionZ;
    float rightY = 0f;
    activeTerrain = world.getActiveTerrain(rightX, rightZ);
    if (activeTerrain != null) {
        rightY = activeTerrain.getPositionY(rightX, rightZ);
    }
    float centerX = positionX;
    float centerZ = positionZ;
    float centerY = 0f;
    activeTerrain = world.getActiveTerrain(centerX, centerZ);
    if (activeTerrain != null) {
        centerY = activeTerrain.getPositionY(centerX, centerZ);
    }
    // centerY = Math.max(centerY, (leftY + rightY) / 2);
    rotationX = (rotationX * smoothMoves + (float) Math.toDegrees(Math.atan((frontY - backY) / zLength))) / (smoothMoves + 1f);
    rotationZ = (rotationZ * smoothMoves + (float) Math.toDegrees(Math.atan((rightY - leftY) / xLength))) / (smoothMoves + 1f);
    pitch = rotationX * (float) Math.cos(Math.toRadians(rotationY)) - rotationZ * (float) Math.sin(Math.toRadians(rotationY));
    roll = -rotationZ * (float) Math.cos(Math.toRadians(rotationY)) - rotationX * (float) Math.sin(Math.toRadians(rotationY));
    positionY = centerY;
}
