// $ANTLR start "id1"
public final Compila_doresParser.id1_return id1() throws RecognitionException {
    Compila_doresParser.id1_return retval = new Compila_doresParser.id1_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Compila_doresParser.id_return id74 = null;
    Compila_doresParser.index_return index75 = null;
    try {
        // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:154:2: ( id | index )
        int alt21 = 2;
        int LA21_0 = input.LA(1);
        if ((LA21_0 == ID)) {
            int LA21_1 = input.LA(2);
            if ((LA21_1 == EQUAL)) {
                alt21 = 1;
            } else if ((LA21_1 == LBR)) {
                alt21 = 2;
            } else {
                NoViableAltException nvae = new NoViableAltException("", 21, 1, input);
                throw nvae;
            }
        } else {
            NoViableAltException nvae = new NoViableAltException("", 21, 0, input);
            throw nvae;
        }
        switch(alt21) {
            case 1:
                // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:154:4: id
                {
                    root_0 = (CommonTree) adaptor.nil();
                    pushFollow(FOLLOW_id_in_id11034);
                    id74 = id();
                    state._fsp--;
                    adaptor.addChild(root_0, id74.getTree());
                }
                break;
            case 2:
                // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:155:4: index
                {
                    root_0 = (CommonTree) adaptor.nil();
                    pushFollow(FOLLOW_index_in_id11039);
                    index75 = index();
                    state._fsp--;
                    adaptor.addChild(root_0, index75.getTree());
                }
                break;
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
