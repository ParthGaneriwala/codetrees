public ArrayList<Token> generateTokenStack() throws Exception {
    ArrayList<Token> retorno = new ArrayList<Token>();
    try {
        FileReader fis = new FileReader(path);
        boolean continua = true;
        byte[] bytesLidos = new byte[1];
        byte lidoAtual = 0;
        byte lidoAnterior = 0;
        String stringCompleta = "";
        int linha = 1;
        boolean tokenRecuperado = false;
        lidoAtual = (byte) fis.read();
        bytesLidos[0] = lidoAtual;
        lidoAnterior = lidoAtual;
        while (continua) {
            tokenRecuperado = false;
            while (lidoAtual == 32 || lidoAtual == 10 || lidoAtual == 9) {
                if (lidoAtual == 10)
                    linha++;
                lidoAtual = (byte) fis.read();
                bytesLidos[0] = lidoAtual;
            }
            if (lidoAtual == -1) {
                continua = false;
                return retorno;
            }
            if (lidoAtual == SimboloAuxiliar.BYTE_BARRA) {
                if (lidoAnterior == SimboloAuxiliar.BYTE_BARRA) {
                    lidoAtual = (byte) fis.read();
                    bytesLidos[0] = lidoAtual;
                    if (lidoAtual == 10)
                        linha++;
                    while (lidoAtual != 10 || lidoAtual != -1) {
                        lidoAtual = (byte) fis.read();
                        bytesLidos[0] = lidoAtual;
                        if (lidoAtual == 10)
                            linha++;
                    }
                }
            } else if (lidoAtual == SimboloAuxiliar.BYTE_ASTERISCO) {
                if (lidoAnterior == SimboloAuxiliar.BYTE_BARRA) {
                    boolean procurando = true;
                    while (procurando) {
                        lidoAtual = (byte) fis.read();
                        bytesLidos[0] = lidoAtual;
                        if (lidoAtual == 10)
                            linha++;
                        if (lidoAtual == SimboloAuxiliar.BYTE_ASTERISCO) {
                            lidoAtual = (byte) fis.read();
                            bytesLidos[0] = lidoAtual;
                            if (lidoAtual == 10)
                                linha++;
                            if (lidoAtual == SimboloAuxiliar.BYTE_BARRA) {
                                procurando = false;
                            } else if (lidoAtual == -1) {
                                throw new Exception("Comentario nao terminado na linha " + linha);
                            }
                        } else if (lidoAtual == -1) {
                            throw new Exception("Comentario nao terminado na linha " + linha);
                        }
                    }
                }
            } else if (lidoAtual == SimboloAuxiliar.BYTE_ASPAS) {
                boolean string = true;
                while (string) {
                    lidoAtual = (byte) fis.read();
                    bytesLidos[0] = lidoAtual;
                    if (lidoAtual == 10)
                        linha++;
                    if (lidoAtual == SimboloAuxiliar.BYTE_ASPAS && lidoAnterior != SimboloAuxiliar.BYTE_BARRA_INVERTIDA) {
                        Token t = new Token(Token.STRING, stringCompleta);
                        retorno.add(t);
                        string = false;
                    } else if (!SimboloAuxiliar.eCaracterString(lidoAtual)) {
                        throw new Exception("String mal formada na linha: " + linha);
                    } else {
                        stringCompleta += new String(bytesLidos);
                    }
                    lidoAnterior = lidoAtual;
                }
            } else {
                Token anterior = Token.T_ERRO;
                while (!tokenRecuperado) {
                    if (lidoAtual == -1) {
                        return retorno;
                    }
                    Token token = executaTransicao(lidoAtual);
                    if (token != null)
                        stringCompleta += new String(bytesLidos);
                    if (token == null) {
                        switch(anterior.getToken()) {
                            case Token.FLOAT:
                                Token t1 = new Token(anterior.getToken(), Float.parseFloat(stringCompleta));
                                retorno.add(t1);
                                tokenRecuperado = true;
                                estado = ESTADO_INICIAL;
                                break;
                            case Token.INTEIRO:
                                Token t2 = new Token(anterior.getToken(), Integer.parseInt(stringCompleta));
                                retorno.add(t2);
                                tokenRecuperado = true;
                                estado = ESTADO_INICIAL;
                                break;
                            case Token.IDENTIFICADOR:
                                Token t3 = new Token(anterior.getToken(), (SimboloAuxiliar.getIdentificador(stringCompleta) == 21 ? stringCompleta : SimboloAuxiliar.getIdentificador(stringCompleta)));
                                retorno.add(t3);
                                tokenRecuperado = true;
                                estado = ESTADO_INICIAL;
                                break;
                            case Token.ERRO:
                                throw new Exception("Erro na linha: " + linha);
                            default:
                                Token t4 = new Token(anterior.getToken(), stringCompleta);
                                retorno.add(t4);
                                tokenRecuperado = true;
                                estado = ESTADO_INICIAL;
                                break;
                        }
                    } else {
                        lidoAtual = (byte) fis.read();
                        bytesLidos[0] = lidoAtual;
                        anterior = token;
                    }
                }
            }
            lidoAnterior = lidoAtual;
            stringCompleta = "";
        }
    } catch (Exception e) {
        e.printStackTrace();
        throw e;
    }
    return retorno;
}
