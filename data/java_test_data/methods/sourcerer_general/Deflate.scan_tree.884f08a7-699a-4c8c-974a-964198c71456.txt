// Scan a literal or distance tree to determine the frequencies of the codes
// the tree to be scanned
void scan_tree(// the tree to be scanned
short[] tree, // and its largest code of non zero frequency
int max_code) {
    // iterates over all tree elements
    int n;
    // last emitted length
    int prevlen = -1;
    // length of current code
    int curlen;
    // length of next code
    int nextlen = tree[0 * 2 + 1];
    // repeat count of the current code
    int count = 0;
    // max repeat count
    int max_count = 7;
    // min repeat count
    int min_count = 4;
    if (nextlen == 0) {
        max_count = 138;
        min_count = 3;
    }
    // guard
    tree[(max_code + 1) * 2 + 1] = (short) 0xffff;
    for (n = 0; n <= max_code; n++) {
        curlen = nextlen;
        nextlen = tree[(n + 1) * 2 + 1];
        if (++count < max_count && curlen == nextlen) {
            continue;
        } else if (count < min_count) {
            bl_tree[curlen * 2] += count;
        } else if (curlen != 0) {
            if (curlen != prevlen)
                bl_tree[curlen * 2]++;
            bl_tree[REP_3_6 * 2]++;
        } else if (count <= 10) {
            bl_tree[REPZ_3_10 * 2]++;
        } else {
            bl_tree[REPZ_11_138 * 2]++;
        }
        count = 0;
        prevlen = curlen;
        if (nextlen == 0) {
            max_count = 138;
            min_count = 3;
        } else if (curlen == nextlen) {
            max_count = 6;
            min_count = 3;
        } else {
            max_count = 7;
            min_count = 4;
        }
    }
}
