// --------------------------------------------------------------------------
public HTMLTag toHTMLTag() {
    int numLines = getLeafNodes().size() * 2 - 1;
    List<StringBuilder> lines = new ArrayList<StringBuilder>(numLines);
    // Initialize the lines.
    for (int i = 0; i < numLines; i++) {
        StringBuilder line = new StringBuilder();
        line.append(StringUtil.polyChar(' ', mAsciiWidth + 100));
        lines.add(line);
    }
    int leftPadding = 3;
    // Determine the scale.
    double scalingFactor = mAsciiWidth / getRootedTreeDistance();
    assignLineIndexes();
    for (PhyloNode node : getAllNodesOrderedByDistance()) {
        Edge<PhyloNode> parentEdge = node.getParentEdge();
        float distance = (parentEdge != null && parentEdge.getDistance() != null ? parentEdge.getDistance() : 0.0f);
        int branchStart = leftPadding + (int) ((node.getDistanceFromRoot() - distance) * scalingFactor);
        int branchEnd = leftPadding + (int) (node.getDistanceFromRoot() * scalingFactor);
        int branchLength = branchEnd - branchStart + 1;
        // Branch
        Span branchSpan = new Span("+");
        if (branchLength > 1)
            branchSpan.addContent(StringUtil.polyChar('-', branchLength - 2) + (node.isLeaf() ? "-" : "|"));
        if (distance != 0.0f) {
            branchSpan.setTitle(distance + "");
        }
        StringBuilder line = lines.get(node.getLineIndex());
        for (int i = branchEnd; i >= branchStart; i--) {
            if (line.charAt(i) != ' ' && line.charAt(i) != '|') {
                branchEnd--;
                branchLength--;
                branchSpan.setContent(branchSpan.getContent().substring(0, branchSpan.getContent().length() - 1));
            } else {
                break;
            }
        }
        if (branchLength > 0) {
            line.replace(branchStart, branchEnd + 1, branchSpan.toHTML());
        }
        int tagEnd = branchStart + branchSpan.toHTML().length();
        if (node.isLeaf()) {
            if (StringUtil.isSet(node.getLabel())) {
                Span nodeSpan = new Span(node.getLabel());
                if (node.getColor() != null) {
                    nodeSpan.setStyle(CSS.bgColor(node.getColor()) + CSS.color(HTMLColor.getContrastingColor(node.getColor())));
                }
                line.replace(tagEnd + 2, tagEnd + 2 + node.getLabel().length(), nodeSpan.toHTML());
            }
        } else {
            for (int lineIndex = node.getVericalLineStartIndex() + 1; lineIndex < node.getVericalLineEndIndex(); lineIndex++) {
                if (lineIndex != node.getLineIndex() && lines.get(lineIndex).charAt(branchEnd) == ' ') {
                    lines.get(lineIndex).replace(branchEnd, branchEnd + 1, "|");
                }
            }
        }
    }
    StringBuilder output = new StringBuilder();
    for (StringBuilder line : lines) {
        output.append(line);
        output.append(System.getProperty("line.separator"));
    }
    // TODO: add the scale to the bottom.
    Pre pre = new Pre();
    pre.addContentWithoutEscaping(output.toString());
    return pre;
}
