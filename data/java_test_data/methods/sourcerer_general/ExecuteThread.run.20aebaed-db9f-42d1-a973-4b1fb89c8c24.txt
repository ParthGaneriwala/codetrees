@Override
public void run() {
    try {
        try {
            if (PopupTracker.class.isAssignableFrom(Tracker.getInstance().getClass()) || HighLightTracker.class.isAssignableFrom(Tracker.getInstance().getClass())) {
                gview.notifyObservers(new RunCommand(false));
                Thread.sleep(Constants.getHighlighttime());
                trigger.setHighlighted(true);
                gview.giveAttention();
                Thread.sleep(Constants.getHighlighttime());
                trigger.setHighlighted(false);
                gview.giveAttention();
                Thread.sleep(Constants.getHighlighttime());
                trigger.setHighlighted(true);
                gview.giveAttention();
                Thread.sleep(Constants.getHighlighttime());
                trigger.setHighlighted(false);
                gview.giveAttention();
                Thread.sleep(Constants.getHighlighttime());
                trigger.setHighlighted(true);
                gview.giveAttention();
                Thread.sleep(Constants.getHighlighttime());
                trigger.setHighlighted(false);
                gview.giveAttention();
                Thread.sleep(Constants.getPausetime());
                if (PopupTracker.class.isAssignableFrom(Tracker.getInstance().getClass())) {
                    JOptionPane.showMessageDialog(gview.getParent(), "TriggerPort " + tp + ": " + LabelReader.getInstance().getString("callStarted"));
                }
            }
            tp.call();
        } catch (InterruptedException ex) {
            Logger.getLogger(HighLightTracker.class.getName()).log(Level.SEVERE, null, ex);
        }
    } catch (ConnectException ex) {
        JOptionPane.showMessageDialog(gview.getParent(), "ExecuteThread: " + ex.getMessage(), LabelReader.getInstance().getString("Error"), JOptionPane.ERROR_MESSAGE);
    }
    gview.notifyObservers(new RunCommand(true));
}
