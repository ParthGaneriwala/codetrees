public void testEncodeDecodeRandomNoSemi() {
    Random random;
    CharacterReference[] list;
    StringBuffer stimulus;
    StringBuffer response;
    char character;
    int index;
    CharacterReference ref;
    String kernel;
    ArrayList forbidden;
    String string;
    random = new Random();
    list = getReferences();
    stimulus = new StringBuffer();
    response = new StringBuffer();
    for (int i = 0; i < 1000; i++) {
        for (int j = 0; j < 10; j++) {
            // some random characters
            for (int k = 0; k < 10; k++) {
                character = (char) random.nextInt(127);
                if (character >= ' ') {
                    if ('&' == character) {
                        stimulus.append(character);
                        response.append("&amp;");
                    } else if ('"' == character) {
                        stimulus.append(character);
                        response.append("&quot;");
                    } else if ('<' == character) {
                        stimulus.append(character);
                        response.append("&lt;");
                    } else if ('>' == character) {
                        stimulus.append(character);
                        response.append("&gt;");
                    } else {
                        stimulus.append(character);
                        response.append(character);
                    }
                }
            }
            index = random.nextInt(list.length);
            ref = list[index];
            kernel = ref.getKernel();
            stimulus.append((char) ref.getCharacter());
            response.append("&");
            response.append(kernel);
            // to be fair, we ensure that the next character isn't valid
            // for a different reference, i.e. &sup shouldn't be followed
            // by a 1, 2, 3 or e
            forbidden = new ArrayList();
            for (int k = index + 1; k < list.length; k++) if (list[k].getKernel().regionMatches(0, kernel, 0, kernel.length()))
                forbidden.add(new Character(list[k].getKernel().charAt(kernel.length())));
            else
                break;
            do {
                character = (char) random.nextInt(127);
                if ((' ' <= character) && ('&' != character) && ('"' != character) && ('<' != character) && ('>' != character) && (';' != character) && !(forbidden.contains(new Character(character)))) {
                    stimulus.append(character);
                    response.append(character);
                    character = 0;
                } else
                    character = ' ';
            } while (0 != character);
            // some more random characters
            for (int k = 0; k < 10; k++) {
                character = (char) random.nextInt(127);
                if (character >= ' ') {
                    if ('&' == character) {
                        stimulus.append(character);
                        response.append("&amp;");
                    } else if ('"' == character) {
                        stimulus.append(character);
                        response.append("&quot;");
                    } else if ('<' == character) {
                        stimulus.append(character);
                        response.append("&lt;");
                    } else if ('>' == character) {
                        stimulus.append(character);
                        response.append("&gt;");
                    } else {
                        stimulus.append(character);
                        response.append(character);
                    }
                }
            }
        }
        string = Translate.decode(response.toString());
        if (!string.equals(stimulus.toString()))
            fail("decoding incorrect:\nexpected \"" + stimulus.toString() + "\"\n decoded \"" + string + "\"\n encoded \"" + response.toString() + "\"");
        stimulus.setLength(0);
        response.setLength(0);
    }
}
