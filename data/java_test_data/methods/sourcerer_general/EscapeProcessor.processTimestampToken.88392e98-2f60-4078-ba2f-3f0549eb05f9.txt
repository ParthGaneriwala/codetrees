private static void processTimestampToken(MySQLConnection conn, StringBuffer newSql, String token) throws SQLException {
    int startPos = token.indexOf('\'') + 1;
    // no }
    int endPos = token.lastIndexOf('\'');
    if ((startPos == -1) || (endPos == -1)) {
        // it's just part of the
        newSql.append(token);
    // query, push possible
    // syntax errors onto
    // server's shoulders
    } else {
        String argument = token.substring(startPos, endPos);
        try {
            if (!conn.getUseLegacyDatetimeCode()) {
                Timestamp ts = Timestamp.valueOf(argument);
                SimpleDateFormat tsdf = new SimpleDateFormat("''yyyy-MM-dd HH:mm:ss''", // $NON-NLS-1$
                Locale.US);
                tsdf.setTimeZone(conn.getServerTimezoneTZ());
                newSql.append(tsdf.format(ts));
            } else {
                StringTokenizer st = new StringTokenizer(argument, " .-:");
                try {
                    String year4 = st.nextToken();
                    String month2 = st.nextToken();
                    String day2 = st.nextToken();
                    String hour = st.nextToken();
                    String minute = st.nextToken();
                    String second = st.nextToken();
                    if (!conn.getUseTimezone() && !conn.getUseJDBCCompliantTimezoneShift()) {
                        newSql.append("'").append(year4).append("-").append(month2).append("-").append(day2).append(" ").append(hour).append(":").append(minute).append(":").append(second).append("'");
                    } else {
                        Calendar sessionCalendar;
                        if (conn != null) {
                            sessionCalendar = conn.getCalendarInstanceForSessionOrNew();
                        } else {
                            sessionCalendar = new GregorianCalendar();
                            sessionCalendar.setTimeZone(TimeZone.getTimeZone("GMT"));
                        }
                        try {
                            int year4Int = Integer.parseInt(year4);
                            int month2Int = Integer.parseInt(month2);
                            int day2Int = Integer.parseInt(day2);
                            int hourInt = Integer.parseInt(hour);
                            int minuteInt = Integer.parseInt(minute);
                            int secondInt = Integer.parseInt(second);
                            synchronized (sessionCalendar) {
                                boolean useGmtMillis = conn.getUseGmtMillisForDatetimes();
                                Timestamp toBeAdjusted = TimeUtil.fastTimestampCreate(useGmtMillis, useGmtMillis ? Calendar.getInstance(TimeZone.getTimeZone("GMT")) : null, sessionCalendar, year4Int, month2Int, day2Int, hourInt, minuteInt, secondInt, 0);
                                Timestamp inServerTimezone = TimeUtil.changeTimezone(conn, sessionCalendar, null, toBeAdjusted, sessionCalendar.getTimeZone(), conn.getServerTimezoneTZ(), false);
                                newSql.append("'");
                                String timezoneLiteral = inServerTimezone.toString();
                                int indexOfDot = timezoneLiteral.indexOf(".");
                                if (indexOfDot != -1) {
                                    timezoneLiteral = timezoneLiteral.substring(0, indexOfDot);
                                }
                                newSql.append(timezoneLiteral);
                            }
                            newSql.append("'");
                        } catch (NumberFormatException nfe) {
                            throw SQLError.createSQLException("Syntax error in TIMESTAMP escape sequence '" + token + "'.", SQLError.SQL_STATE_ILLEGAL_ARGUMENT, conn.getExceptionInterceptor());
                        }
                    }
                } catch (java.util.NoSuchElementException e) {
                    throw SQLError.createSQLException("Syntax error for TIMESTAMP escape sequence '" + argument + "'", "42000", conn.getExceptionInterceptor());
                }
            }
        } catch (IllegalArgumentException illegalArgumentException) {
            SQLException sqlEx = SQLError.createSQLException("Syntax error for TIMESTAMP escape sequence '" + argument + "'", "42000", conn.getExceptionInterceptor());
            sqlEx.initCause(illegalArgumentException);
            throw sqlEx;
        }
    }
}
