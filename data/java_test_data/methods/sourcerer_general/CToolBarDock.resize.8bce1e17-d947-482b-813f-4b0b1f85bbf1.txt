public void resize() {
    int cx = 0;
    int lindex;
    int index;
    Vector lane;
    CToolBar toolbar;
    Vector overflow_copy;
    boolean expanding = false;
    int lane_space;
    if (W() > last_width) {
        expanding = true;
    } else {
        /*
             * We are shrinking
             */
        expanding = false;
    }
    /*
         * First do the regular placement
         */
    resize_core();
    /*
         * If we are shrinking, spill over the toolbars that will be clipped
         */
    if (!expanding) {
        for (lindex = 0; lindex < max_lanes; lindex++) {
            lane = lanes[lindex];
            for (index = 0; index < lane.size(); index++) {
                toolbar = (CToolBar) lane.get(index);
                if (toolbar.getX() + toolbar.W() > W()) {
                    if (lane_has_space(lindex, toolbar)) {
                        flatten_lanes();
                    } else {
                        /*
                             * Move the toolbar to another lane.  Since the move
                             * of this toolbar was involuntary, we have to try
                             * to move this toolbar back to its original lane/
                             * location if the dock expands again.
                             * 
                             * NOTE: We have to make sure the toolbar isn't 
                             * already involuntarily displaced
                             */
                        if (toolbar.last_lane < 0 && toolbar.last_x < 0) {
                            toolbar.last_lane = find_lane(toolbar);
                            toolbar.last_x = toolbar.getX();
                            toolbar.setLocation(0, toolbar.getY());
                            move_to_any_lane(toolbar);
                            /*
                                 * Since this toolbar was forcefully moved, or 
                                 * "overflown" as a result of dock squeeze, we
                                 * keep it in an overflown toolbars list
                                 */
                            overflow_toolbars.add(toolbar);
                        }
                    }
                }
            }
        }
    } else {
        /*
             * Make a copy of the overflown vectors 
             */
        overflow_cache.clear();
        for (index = 0; index < overflow_toolbars.size(); index++) {
            overflow_cache.add(overflow_toolbars.get(index));
        }
        /*
             * Loop thru the overflown vectors backwards and try to place each
             * toolbar back were it was.  If a placement fails, then stop.
             */
        for (index = overflow_cache.size() - 1; index >= 0; index--) {
            toolbar = (CToolBar) overflow_toolbars.get(index);
            if (toolbar.last_lane >= 0 && toolbar.last_x >= 0) {
                if (lane_has_space(toolbar.last_lane, toolbar)) {
                    toolbar.setLocation(toolbar.last_x - 5, toolbar.getY());
                    move_to_lane(toolbar.last_lane, toolbar);
                    /*
                         * Reset that state that indicated that this toolbar was
                         * moved involuntarily because we just moved it back.
                         */
                    toolbar.last_lane = -1;
                    toolbar.last_x = -1;
                    overflow_toolbars.remove(toolbar);
                } else {
                    break;
                }
            }
        }
    }
    last_width = W();
    update();
}
