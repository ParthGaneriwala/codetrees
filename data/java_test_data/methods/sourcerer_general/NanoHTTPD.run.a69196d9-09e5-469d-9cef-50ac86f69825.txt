public void run() {
    try {
        InputStream is = mySocket.getInputStream();
        if (is == null)
            return;
        BufferedReader in = new BufferedReader(new InputStreamReader(is));
        // Read the request line
        StringTokenizer st = new StringTokenizer(in.readLine());
        if (!st.hasMoreTokens())
            // $NON-NLS-1$
            sendError(HTTP_BADREQUEST, "BAD REQUEST: Syntax error. Usage: GET /example/file.html");
        String method = st.nextToken();
        if (!st.hasMoreTokens())
            // $NON-NLS-1$
            sendError(HTTP_BADREQUEST, "BAD REQUEST: Missing URI. Usage: GET /example/file.html");
        String uri = st.nextToken();
        // Decode parameters from the URI
        Properties parms = new Properties();
        int qmi = uri.indexOf('?');
        if (qmi >= 0) {
            decodeParms(uri.substring(qmi + 1), parms);
            uri = decodePercent(uri.substring(0, qmi));
        } else
            uri = decodePercent(uri);
        // If there's another token, it's protocol version,
        // followed by HTTP headers. Ignore version but parse headers.
        // NOTE: this now forces header names uppercase since they are
        // case insensitive and vary by client.
        Properties header = new Properties();
        if (st.hasMoreTokens()) {
            String line = in.readLine();
            while (line.trim().length() > 0) {
                int p = line.indexOf(':');
                header.put(line.substring(0, p).trim().toLowerCase(), line.substring(p + 1).trim());
                line = in.readLine();
            }
        }
        // in data section, too, read it:
        if (// $NON-NLS-1$
        method.equalsIgnoreCase("POST")) {
            long size = 0x7FFFFFFFFFFFFFFFl;
            // $NON-NLS-1$
            String contentLength = header.getProperty("content-length");
            if (contentLength != null) {
                try {
                    size = Integer.parseInt(contentLength);
                } catch (NumberFormatException ex) {
                }
            }
            // $NON-NLS-1$
            String postLine = "";
            char[] buf = new char[512];
            int read = in.read(buf);
            while (// $NON-NLS-1$
            read >= 0 && size > 0 && !postLine.endsWith("\r\n")) {
                size -= read;
                postLine += String.valueOf(buf, 0, read);
                if (size > 0)
                    read = in.read(buf);
            }
            postLine = postLine.trim();
            decodeParms(postLine, parms);
        }
        // Ok, now do the serve()
        Response r = serve(uri, method, header, parms);
        if (r == null)
            // $NON-NLS-1$
            sendError(HTTP_INTERNALERROR, "SERVER INTERNAL ERROR: Serve() returned a null response.");
        else
            sendResponse(r.status, r.mimeType, r.header, r.data);
        in.close();
    } catch (IOException ioe) {
        try {
            // $NON-NLS-1$
            sendError(HTTP_INTERNALERROR, "SERVER INTERNAL ERROR: IOException: " + ioe.getMessage());
        } catch (Throwable t) {
        }
    } catch (InterruptedException ie) {
    // Thrown by sendError, ignore and exit the thread.
    }
}
