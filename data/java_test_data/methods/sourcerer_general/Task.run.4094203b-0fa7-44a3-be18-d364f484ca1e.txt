protected void run(boolean scheduled) throws InterruptedException {
    isScheduled = scheduled;
    // TODO add handling for Status checks and throwing errors
    try {
        executionId = Math.round(Math.random() * Long.MAX_VALUE);
        setExecutionStatus(ExecutionStatus.RUNNING);
        setStatusMessage("Running...");
        setStatusProgress(-1.0f);
        setExecutionThread(Thread.currentThread());
        if (currentTrigger != null) {
            currentTrigger.triggeredBegin(this);
        }
    } catch (Throwable exc) {
        LogManager.log(this, LogManager.Type.ERROR, exc);
    }
    long started = System.currentTimeMillis();
    try {
        ExecutionStatus status = execute();
        setExecutionStatus(status);
    } catch (InterruptedException exc) {
        LogManager.log(this, LogManager.Type.ERROR, exc);
        setExecutionStatus(Task.ExecutionStatus.INTERRUPTED);
    } catch (Throwable exc) {
        LogManager.log(this, LogManager.Type.ERROR, exc);
        setExecutionStatus(Task.ExecutionStatus.FAILURE);
        ScheduleManager.get().taskErrored(this, exc);
    } finally {
        setExecutionThread(null);
        setStatusProgress(0.0f);
    }
    long completed = System.currentTimeMillis();
    TaskExecution te = new TaskExecution(this, getExecutionStatus(), started, completed);
    addHistory(te);
    try {
        currentTrigger.triggeredEnd(this);
        currentTrigger = null;
        this.scheduled = -1;
        lastRun = System.currentTimeMillis();
    } catch (Throwable exc) {
        LogManager.log(this, LogManager.Type.ERROR, exc);
    }
}
