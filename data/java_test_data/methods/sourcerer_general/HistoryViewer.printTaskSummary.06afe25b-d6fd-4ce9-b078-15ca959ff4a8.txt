private void printTaskSummary() {
    Map<String, JobHistory.Task> tasks = job.getAllTasks();
    int totalMaps = 0;
    int totalReduces = 0;
    int totalCleanups = 0;
    int totalSetups = 0;
    int numFailedMaps = 0;
    int numKilledMaps = 0;
    int numFailedReduces = 0;
    int numKilledReduces = 0;
    int numFinishedCleanups = 0;
    int numFailedCleanups = 0;
    int numKilledCleanups = 0;
    int numFinishedSetups = 0;
    int numFailedSetups = 0;
    int numKilledSetups = 0;
    long mapStarted = 0;
    long mapFinished = 0;
    long reduceStarted = 0;
    long reduceFinished = 0;
    long cleanupStarted = 0;
    long cleanupFinished = 0;
    long setupStarted = 0;
    long setupFinished = 0;
    Map<String, String> allHosts = new TreeMap<String, String>();
    for (JobHistory.Task task : tasks.values()) {
        Map<String, TaskAttempt> attempts = task.getTaskAttempts();
        allHosts.put(task.get(Keys.HOSTNAME), "");
        for (TaskAttempt attempt : attempts.values()) {
            long startTime = attempt.getLong(Keys.START_TIME);
            long finishTime = attempt.getLong(Keys.FINISH_TIME);
            if (Values.MAP.name().equals(task.get(Keys.TASK_TYPE))) {
                if (mapStarted == 0 || mapStarted > startTime) {
                    mapStarted = startTime;
                }
                if (mapFinished < finishTime) {
                    mapFinished = finishTime;
                }
                totalMaps++;
                if (Values.FAILED.name().equals(attempt.get(Keys.TASK_STATUS))) {
                    numFailedMaps++;
                } else if (Values.KILLED.name().equals(attempt.get(Keys.TASK_STATUS))) {
                    numKilledMaps++;
                }
            } else if (Values.REDUCE.name().equals(task.get(Keys.TASK_TYPE))) {
                if (reduceStarted == 0 || reduceStarted > startTime) {
                    reduceStarted = startTime;
                }
                if (reduceFinished < finishTime) {
                    reduceFinished = finishTime;
                }
                totalReduces++;
                if (Values.FAILED.name().equals(attempt.get(Keys.TASK_STATUS))) {
                    numFailedReduces++;
                } else if (Values.KILLED.name().equals(attempt.get(Keys.TASK_STATUS))) {
                    numKilledReduces++;
                }
            } else if (Values.CLEANUP.name().equals(task.get(Keys.TASK_TYPE))) {
                if (cleanupStarted == 0 || cleanupStarted > startTime) {
                    cleanupStarted = startTime;
                }
                if (cleanupFinished < finishTime) {
                    cleanupFinished = finishTime;
                }
                totalCleanups++;
                if (Values.SUCCESS.name().equals(attempt.get(Keys.TASK_STATUS))) {
                    numFinishedCleanups++;
                } else if (Values.FAILED.name().equals(attempt.get(Keys.TASK_STATUS))) {
                    numFailedCleanups++;
                } else if (Values.KILLED.name().equals(attempt.get(Keys.TASK_STATUS))) {
                    numKilledCleanups++;
                }
            } else if (Values.SETUP.name().equals(task.get(Keys.TASK_TYPE))) {
                if (setupStarted == 0 || setupStarted > startTime) {
                    setupStarted = startTime;
                }
                if (setupFinished < finishTime) {
                    setupFinished = finishTime;
                }
                totalSetups++;
                if (Values.SUCCESS.name().equals(attempt.get(Keys.TASK_STATUS))) {
                    numFinishedSetups++;
                } else if (Values.FAILED.name().equals(attempt.get(Keys.TASK_STATUS))) {
                    numFailedSetups++;
                } else if (Values.KILLED.name().equals(attempt.get(Keys.TASK_STATUS))) {
                    numKilledSetups++;
                }
            }
        }
    }
    StringBuffer taskSummary = new StringBuffer();
    taskSummary.append("\nTask Summary");
    taskSummary.append("\n============================");
    taskSummary.append("\nKind\tTotal\t");
    taskSummary.append("Successful\tFailed\tKilled\tStartTime\tFinishTime");
    taskSummary.append("\n");
    taskSummary.append("\nSetup\t").append(totalSetups);
    taskSummary.append("\t").append(numFinishedSetups);
    taskSummary.append("\t\t").append(numFailedSetups);
    taskSummary.append("\t").append(numKilledSetups);
    taskSummary.append("\t").append(StringUtils.getFormattedTimeWithDiff(dateFormat, setupStarted, 0));
    taskSummary.append("\t").append(StringUtils.getFormattedTimeWithDiff(dateFormat, setupFinished, setupStarted));
    taskSummary.append("\nMap\t").append(totalMaps);
    taskSummary.append("\t").append(job.getInt(Keys.FINISHED_MAPS));
    taskSummary.append("\t\t").append(numFailedMaps);
    taskSummary.append("\t").append(numKilledMaps);
    taskSummary.append("\t").append(StringUtils.getFormattedTimeWithDiff(dateFormat, mapStarted, 0));
    taskSummary.append("\t").append(StringUtils.getFormattedTimeWithDiff(dateFormat, mapFinished, mapStarted));
    taskSummary.append("\nReduce\t").append(totalReduces);
    taskSummary.append("\t").append(job.getInt(Keys.FINISHED_REDUCES));
    taskSummary.append("\t\t").append(numFailedReduces);
    taskSummary.append("\t").append(numKilledReduces);
    taskSummary.append("\t").append(StringUtils.getFormattedTimeWithDiff(dateFormat, reduceStarted, 0));
    taskSummary.append("\t").append(StringUtils.getFormattedTimeWithDiff(dateFormat, reduceFinished, reduceStarted));
    taskSummary.append("\nCleanup\t").append(totalCleanups);
    taskSummary.append("\t").append(numFinishedCleanups);
    taskSummary.append("\t\t").append(numFailedCleanups);
    taskSummary.append("\t").append(numKilledCleanups);
    taskSummary.append("\t").append(StringUtils.getFormattedTimeWithDiff(dateFormat, cleanupStarted, 0));
    taskSummary.append("\t").append(StringUtils.getFormattedTimeWithDiff(dateFormat, cleanupFinished, cleanupStarted));
    taskSummary.append("\n============================\n");
    System.out.println(taskSummary.toString());
}
