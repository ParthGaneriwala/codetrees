@Test
public void testDeprecatedNumericTypeProliferator() {
    FeatureProliferator proliferator = new NumericTypeProliferator("NumericName");
    Feature feature = new Feature("OrigName", "HI");
    List<Feature> numericTypeFeatures = proliferator.proliferate(feature);
    Assert.assertEquals(0, numericTypeFeatures.size());
    feature.setValue("");
    numericTypeFeatures = proliferator.proliferate(feature);
    Assert.assertEquals(0, numericTypeFeatures.size());
    feature.setValue("\t\t");
    numericTypeFeatures = proliferator.proliferate(feature);
    Assert.assertEquals(0, numericTypeFeatures.size());
    feature.setValue("HI2");
    numericTypeFeatures = proliferator.proliferate(feature);
    Assert.assertEquals(1, numericTypeFeatures.size());
    Assert.assertEquals(NumericTypeProliferator.ALPHANUMERIC, numericTypeFeatures.get(0).getValue());
    Assert.assertEquals("NumericName_OrigName", numericTypeFeatures.get(0).getName());
    feature.setValue("222");
    numericTypeFeatures = proliferator.proliferate(feature);
    Assert.assertEquals(NumericTypeProliferator.DIGITS, numericTypeFeatures.get(0).getValue());
    feature.setValue("2222");
    numericTypeFeatures = proliferator.proliferate(feature);
    Assert.assertEquals(NumericTypeProliferator.DIGITS, numericTypeFeatures.get(0).getValue());
    feature.setValue("2122");
    numericTypeFeatures = proliferator.proliferate(feature);
    Assert.assertEquals(NumericTypeProliferator.YEAR_DIGITS, numericTypeFeatures.get(0).getValue());
    feature.setValue("2022");
    numericTypeFeatures = proliferator.proliferate(feature);
    Assert.assertEquals(NumericTypeProliferator.YEAR_DIGITS, numericTypeFeatures.get(0).getValue());
    feature.setValue("1022");
    numericTypeFeatures = proliferator.proliferate(feature);
    Assert.assertEquals(NumericTypeProliferator.YEAR_DIGITS, numericTypeFeatures.get(0).getValue());
    feature.setValue("0022");
    numericTypeFeatures = proliferator.proliferate(feature);
    Assert.assertEquals(NumericTypeProliferator.DIGITS, numericTypeFeatures.get(0).getValue());
    feature.setValue("0");
    numericTypeFeatures = proliferator.proliferate(feature);
    Assert.assertEquals(NumericTypeProliferator.DIGITS, numericTypeFeatures.get(0).getValue());
    feature.setValue("asdfASDF1234");
    numericTypeFeatures = proliferator.proliferate(feature);
    Assert.assertEquals(NumericTypeProliferator.ALPHANUMERIC, numericTypeFeatures.get(0).getValue());
    feature.setValue("1F1234");
    numericTypeFeatures = proliferator.proliferate(feature);
    Assert.assertEquals(NumericTypeProliferator.ALPHANUMERIC, numericTypeFeatures.get(0).getValue());
    feature.setValue("10-1234");
    numericTypeFeatures = proliferator.proliferate(feature);
    Assert.assertEquals(NumericTypeProliferator.SOME_DIGITS, numericTypeFeatures.get(0).getValue());
    feature.setValue("1F1234!");
    numericTypeFeatures = proliferator.proliferate(feature);
    Assert.assertEquals(NumericTypeProliferator.SOME_DIGITS, numericTypeFeatures.get(0).getValue());
    feature.setValue("!!12!");
    numericTypeFeatures = proliferator.proliferate(feature);
    Assert.assertEquals(NumericTypeProliferator.SOME_DIGITS, numericTypeFeatures.get(0).getValue());
    feature.setValue("10,000");
    numericTypeFeatures = proliferator.proliferate(feature);
    Assert.assertEquals(NumericTypeProliferator.SOME_DIGITS, numericTypeFeatures.get(0).getValue());
}
