public void testUnknown() {
    String typeURI = "urn:x-hp-dt:unknown";
    String typeURI2 = "urn:x-hp-dt:unknown2";
    boolean originalFlag = JenaParameters.enableSilentAcceptanceOfUnknownDatatypes;
    JenaParameters.enableSilentAcceptanceOfUnknownDatatypes = true;
    Literal l1 = m.createTypedLiteral("foo", typeURI);
    Literal l3 = m.createTypedLiteral("15", typeURI);
    Literal l5 = m.createTypedLiteral("foo", typeURI2);
    Literal l6 = m.createLiteral("foo", "lang1");
    Literal l7 = m.createLiteral("foo");
    JenaParameters.enableSilentAcceptanceOfUnknownDatatypes = originalFlag;
    // Check for successful creation
    assertNotNull(l1);
    assertNotNull(l3);
    assertNotNull(l5);
    // check equality function
    assertDiffer("datatype sensitive", l1, l5);
    assertDiffer("value sensitive", l1, l3);
    assertDiffer("typed and plain differ", l1, l6);
    // Check typed accessors
    try {
        int i = l3.getInt();
        assertTrue("Allowed int conversion", false);
    } catch (DatatypeFormatException e) {
    }
    assertEquals("Extract value", l1.getValue(), new BaseDatatype.TypedValue("foo", typeURI));
    assertEquals("Extract xml tag", l1.isWellFormedXML(), false);
    JenaParameters.enableSilentAcceptanceOfUnknownDatatypes = false;
    boolean foundException = false;
    try {
        Literal l8 = m.createTypedLiteral("food", typeURI + "3");
    } catch (DatatypeFormatException e2) {
        foundException = true;
    }
    JenaParameters.enableSilentAcceptanceOfUnknownDatatypes = originalFlag;
    assertTrue("Detected unknown datatype", foundException);
    // Check we can create a literal of an unregistered java type without anything blowing up
    Object foo = new java.sql.Date(123456l);
    LiteralLabel ll = new LiteralLabel(foo);
    assertEquals(ll.getLexicalForm(), foo.toString());
}
