@SuppressWarnings("unchecked")
public void addOntology() {
    String uri = txtURI.getText(), name = fileLocalName.getText();
    Model loadedModel = null;
    boolean invalid = false;
    ArrayList<String> errorURLList = new ArrayList<String>(), previousURLs = null;
    lblURI.setForeground(new Color(getCompositePane().getDisplay(), 0, 0, 0));
    if ((uri == null || uri.length() <= 0) && (name == null || name.length() <= 0)) {
        lblURI.setForeground(new Color(getCompositePane().getDisplay(), 225, 0, 0));
        lblURI.setText("Location Ontology URI: (Cannot be null)");
        invalid = true;
    }
    if (!invalid) {
        boolean foundFile = false, ontLoaded = false;
        HashMap<String, String> map;
        dispose();
        if (name != null && name.length() > 0) {
            try {
                FileInputStream fs = new FileInputStream(name);
                loadedModel = ModelFactory.createDefaultModel();
                String baseURI;
                // File exists
                baseURI = OWLUtil.getBaseURIForLocalOntology(fs, loadedModel);
                fs.close();
                if (!baseURI.equals(uri)) {
                    map = SettingsManager.getInstance().getMapping();
                    if (uri != null && uri.length() > 0) {
                        int result;
                        MessageBox mb = new MessageBox(getCompositePane(), SWT.YES | SWT.NO | SWT.ICON_QUESTION);
                        mb.setText("URL and Base URI differ");
                        mb.setMessage("The URL provided and the ontology's base URI differ, would you like to continue" + " using the URL provided?");
                        result = mb.open();
                        if (result == SWT.YES) {
                            map.put(uri, name);
                            _ontologyURL = uri;
                        } else {
                            map.put(baseURI, name);
                            _ontologyURL = baseURI;
                        }
                    } else {
                        uri = baseURI;
                        map.put(baseURI, name);
                        _ontologyURL = baseURI;
                    }
                    // Here too
                    while (true) {
                        errorURLList.clear();
                        loadedModel.add(OWLUtil.getImportedModels(loadedModel, errorURLList));
                        if (errorURLList.size() == 0) {
                            break;
                        } else if (previousURLs != null && errorURLList.containsAll(previousURLs)) {
                            MessageBox mb = new MessageBox(parent.getShell(), SWT.ICON_WARNING);
                            mb.setText("Error Loading Initial Ontologies");
                            mb.setMessage(SettingsManager.ERRLOADINGONTS_MSG);
                            mb.open();
                            break;
                        } else {
                            /* Brings up an intermediary proxy editor, displaying only files the application could not
							 		  * find via the Internet, etc.
							 		  */
                            SettingsManager.getInstance().getMapping();
                            // Dangerous, but necessary, for now.
                            InternalProxyEditorController proxyController = new InternalProxyEditorController(null);
                            InternalProxyEditorWindow dialog = new InternalProxyEditorWindow(proxyController, "Edit URL/Local File Mappings", errorURLList);
                            dialog.open();
                            previousURLs = (ArrayList<String>) errorURLList.clone();
                        }
                    }
                    SettingsManager.getInstance().setMapping(map);
                    _ontologyLocalPath = name;
                } else {
                    map = SettingsManager.getInstance().getMapping();
                    map.put(uri, name);
                    SettingsManager.getInstance().setMapping(map);
                    _ontologyURL = uri;
                    _ontologyLocalPath = name;
                }
                setModel(loadedModel);
                foundFile = true;
                ontLoaded = true;
            } catch (FileNotFoundException fe) {
                MessageBox mb = new MessageBox(getCompositePane(), SWT.ICON_ERROR);
                mb.setText("Error opening file");
                mb.setMessage("Cannot open file: " + fe.getLocalizedMessage());
                mb.open();
                return;
            } catch (IOException ie) {
                MessageBox mb = new MessageBox(getCompositePane(), SWT.ICON_ERROR);
                mb.setText("Error opening file");
                mb.setMessage("Problem reading file: " + ie.getLocalizedMessage());
                mb.open();
                return;
            }
        }
        if (!foundFile) {
            try {
                String localName = "";
                if (!uri.contains(".owl")) {
                    throw new MalformedURLException("File must be a valid OWL file!");
                }
                map = SettingsManager.getInstance().getMapping();
                loadedModel = ModelFactory.createDefaultModel();
                while (true) {
                    errorURLList.clear();
                    localName = OWLUtil.getModelWithProxy(uri, loadedModel, errorURLList);
                    if (errorURLList.size() == 0) {
                        break;
                    } else if (previousURLs != null && errorURLList.containsAll(previousURLs)) {
                        MessageBox mb = new MessageBox(parent.getShell(), SWT.ICON_WARNING);
                        mb.setText("Error Loading Initial Ontologies");
                        mb.setMessage(SettingsManager.ERRLOADINGONTS_MSG);
                        mb.open();
                        break;
                    } else {
                        /* Brings up an intermediary proxy editor, displaying only files the application could not
						 		  * find via the Internet, etc.
						 		  */
                        SettingsManager.getInstance().getMapping();
                        // Dangerous, but necessary, for now.
                        InternalProxyEditorController proxyController = new InternalProxyEditorController(null);
                        InternalProxyEditorWindow dialog = new InternalProxyEditorWindow(proxyController, "Edit URL/Local File Mappings", errorURLList);
                        dialog.open();
                        previousURLs = (ArrayList<String>) errorURLList.clone();
                    }
                }
                _ontologyURL = uri;
                _ontologyLocalPath = localName;
                setModel(loadedModel);
                ontLoaded = true;
                // Spot fix to assure that if the URL *is* found, but not downloaded, we can proceed normally.
                if (_ontologyLocalPath == null) {
                    _ontologyLocalPath = "";
                }
            } catch (MalformedURLException me) {
                MessageBox mb = new MessageBox(getCompositePane(), SWT.ICON_ERROR);
                mb.setText("Error opening URL");
                mb.setMessage("Improperly-formed URL: " + me.getLocalizedMessage());
                mb.open();
                return;
            } catch (IOException ie) {
                MessageBox mb = new MessageBox(getCompositePane(), SWT.ICON_ERROR);
                mb.setText("Error opening URL");
                mb.setMessage("Cannot access URL: " + ie.getLocalizedMessage());
                mb.open();
                return;
            }
        }
        if (ontLoaded) {
            /*if (loadedModel != null) {
						StmtIterator s = loadedModel.listStatements();
						while (s.hasNext()) {
							System.out.println(s.nextStatement().toString());
						}
					}*/
            setOntologyLabel(OWLUtil.getOntologyLabel(uri, getModel()));
        }
    }
}
