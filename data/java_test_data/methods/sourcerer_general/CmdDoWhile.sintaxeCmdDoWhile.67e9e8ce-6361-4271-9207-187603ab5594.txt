public void sintaxeCmdDoWhile(TabelaSimbolos tabelasimbolos) {
    System.out.println("IMPRIME " + tabelasimbolos.getLookahead());
    String escopo = tabelasimbolos.getEscopo();
    // consome o do
    tabelasimbolos.soConsome();
    if (tabelasimbolos.getLookahead().equals("{")) {
        // consome o "{"
        tabelasimbolos.soConsome();
        while (verificaInicio(tabelasimbolos)) {
            cmd.sintaxeCmd(tabelasimbolos, escopo);
        }
        // consome o "}"
        tabelasimbolos.soConsome();
    } else if (verificaInicio(tabelasimbolos)) {
        cmd.sintaxeCmd(tabelasimbolos, escopo);
    }
    // consome while
    tabelasimbolos.soConsome();
    // consome "("
    tabelasimbolos.soConsome();
    if (tabelasimbolos.getLookahead().equals("true") || tabelasimbolos.getLookahead().equals("false")) {
        tabelasimbolos.soConsome();
    } else if (tabelasimbolos.getTipo().equals("identificador") && tabelasimbolos.superLookahead(1).equals(")")) {
        String tipoVariavel3;
        tipoVariavel3 = tabelasimbolos.RetornaTipoDeGlobalDeclarada(tabelasimbolos.getLookahead());
        if (tipoVariavel3.equals("")) {
            tipoVariavel3 = tabelasimbolos.RetornaTipoDeLocalDeclarada(tabelasimbolos.getLookahead(), escopo);
        }
        if (!tabelasimbolos.verificaSeVariavelFoiDeclarada(tabelasimbolos.getLookahead())) {
            System.out.println("ERRO SEMANTICO - " + tabelasimbolos.getLookahead() + " na linha " + tabelasimbolos.getLinha() + " variável não foi declarada");
            ErroSemantico.getInstance().getTabelaErros().add("Erro Semântico na linha " + tabelasimbolos.getLinha() + ". Descrição: Variável não foi declarada");
        }
        if (!tipoVariavel3.equals("boolean")) {
            System.out.println("ERRO SEMANTICO - " + tabelasimbolos.getLookahead() + " na linha " + tabelasimbolos.getLinha() + " tipo incompativel de variavel");
            ErroSemantico.getInstance().getTabelaErros().add("Erro Semântico na linha " + tabelasimbolos.getLinha() + ". Descrição: Tipo imcompativel de variável");
        }
        // consome o identificador;
        tabelasimbolos.soConsome();
    } else
        ExpressaoLogica.expLogica(tabelasimbolos, escopo);
    // consome o )
    tabelasimbolos.soConsome();
    // consome o ";"
    tabelasimbolos.soConsome();
}
