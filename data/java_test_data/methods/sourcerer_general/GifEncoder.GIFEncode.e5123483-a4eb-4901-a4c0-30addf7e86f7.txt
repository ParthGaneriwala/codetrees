void GIFEncode(OutputStream outs, int Width, int Height, boolean Interlace, byte Background, int Transparent, int BitsPerPixel, byte[] Red, byte[] Green, byte[] Blue) throws IOException {
    byte B;
    int LeftOfs, TopOfs;
    int ColorMapSize;
    int InitCodeSize;
    int i;
    this.Width = Width;
    this.Height = Height;
    this.Interlace = Interlace;
    ColorMapSize = 1 << BitsPerPixel;
    LeftOfs = TopOfs = 0;
    // Calculate number of bits we are expecting
    CountDown = Width * Height;
    // Indicate which pass we are on (if interlace)
    Pass = 0;
    // The initial code size
    if (BitsPerPixel <= 1)
        InitCodeSize = 2;
    else
        InitCodeSize = BitsPerPixel;
    // Set up the current x and y position
    curx = 0;
    cury = 0;
    // Write the Magic header
    writeString(outs, "GIF89a");
    // Write out the screen width and height
    Putword(Width, outs);
    Putword(Height, outs);
    // Indicate that there is a global colour map
    // Yes, there is a color map
    B = (byte) 0x80;
    // OR in the resolution
    B |= (byte) ((8 - 1) << 4);
    // Not sorted
    // OR in the Bits per Pixel
    B |= (byte) ((BitsPerPixel - 1));
    // Write it out
    Putbyte(B, outs);
    // Write out the Background colour
    Putbyte(Background, outs);
    // Pixel aspect ratio - 1:1.
    // Putbyte( (byte) 49, outs );
    // Java's GIF reader currently has a bug, if the aspect ratio byte is
    // not zero it throws an ImageFormatException.  It doesn't know that
    // 49 means a 1:1 aspect ratio.  Well, whatever, zero works with all
    // the other decoders I've tried so it probably doesn't hurt.
    Putbyte((byte) 0, outs);
    // Write out the Global Colour Map
    for (i = 0; i < ColorMapSize; ++i) {
        Putbyte(Red[i], outs);
        Putbyte(Green[i], outs);
        Putbyte(Blue[i], outs);
    }
    // Write out extension for transparent colour index, if necessary.
    if (Transparent != -1) {
        Putbyte((byte) '!', outs);
        Putbyte((byte) 0xf9, outs);
        Putbyte((byte) 4, outs);
        Putbyte((byte) 1, outs);
        Putbyte((byte) 0, outs);
        Putbyte((byte) 0, outs);
        Putbyte((byte) Transparent, outs);
        Putbyte((byte) 0, outs);
    }
    // Write an Image separator
    Putbyte((byte) ',', outs);
    // Write the Image header
    Putword(LeftOfs, outs);
    Putword(TopOfs, outs);
    Putword(Width, outs);
    Putword(Height, outs);
    // Write out whether or not the image is interlaced
    if (Interlace)
        Putbyte((byte) 0x40, outs);
    else
        Putbyte((byte) 0x00, outs);
    // Write out the initial code size
    Putbyte((byte) InitCodeSize, outs);
    // Go and actually compress the data
    compress(InitCodeSize + 1, outs);
    // Write out a Zero-length packet (to end the series)
    Putbyte((byte) 0, outs);
    // Write the GIF file terminator
    Putbyte((byte) ';', outs);
}
