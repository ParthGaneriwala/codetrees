public void testClauseMaching() {
    BindingStack env = new BindingStack();
    env.reset(MAX_VARS);
    List rules = new ArrayList();
    BasicForwardRuleInfGraph inf = new BasicForwardRuleInfGraph(new BasicForwardRuleReasoner(rules), rules, null);
    TriplePattern p1 = new TriplePattern(new Node_RuleVariable("?a", 0), n1, new Node_RuleVariable("?b", 1));
    TriplePattern p2 = new TriplePattern(new Node_RuleVariable("?b", 1), new Node_RuleVariable("?c", 2), n2);
    // Should fail with no bindings
    boolean match = FRuleEngine.match(p1, new Triple(n1, n2, n3), env);
    assertTrue(!match);
    assertEquals(null, env.getEnvironment()[0]);
    assertEquals(null, env.getEnvironment()[1]);
    assertEquals(null, env.getEnvironment()[2]);
    // Should succeed with two bindings
    match = FRuleEngine.match(p1, new Triple(n2, n1, n3), env);
    assertTrue(match);
    assertEquals(n2, env.getEnvironment()[0]);
    assertEquals(n3, env.getEnvironment()[1]);
    assertEquals(null, env.getEnvironment()[2]);
    // should fail but leave prior bindings intact
    match = FRuleEngine.match(p2, new Triple(n1, n2, n2), env);
    assertTrue(!match);
    assertEquals(n2, env.getEnvironment()[0]);
    assertEquals(n3, env.getEnvironment()[1]);
    assertEquals(null, env.getEnvironment()[2]);
    // should succeed with full binding set
    match = FRuleEngine.match(p2, new Triple(n3, n1, n2), env);
    assertTrue(match);
    assertEquals(n2, env.getEnvironment()[0]);
    assertEquals(n3, env.getEnvironment()[1]);
    assertEquals(n1, env.getEnvironment()[2]);
}
