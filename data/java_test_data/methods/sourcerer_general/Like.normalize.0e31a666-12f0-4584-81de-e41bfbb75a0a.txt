private void normalize(Session session, String pattern) {
    isNull = pattern == null;
    if (!isNull && isIgnoreCase) {
        pattern = session.database.collation.toUpperCase(pattern);
    }
    iLen = 0;
    iFirstWildCard = -1;
    int l = pattern == null ? 0 : pattern.length();
    cLike = new char[l];
    wildCardType = new int[l];
    boolean bEscaping = false, bPercent = false;
    for (int i = 0; i < l; i++) {
        char c = pattern.charAt(i);
        if (bEscaping == false) {
            if (escapeChar != null && escapeChar.charValue() == c) {
                bEscaping = true;
                continue;
            } else if (c == '_') {
                wildCardType[iLen] = UNDERSCORE_CHAR;
                if (iFirstWildCard == -1) {
                    iFirstWildCard = iLen;
                }
            } else if (c == '%') {
                if (bPercent) {
                    continue;
                }
                bPercent = true;
                wildCardType[iLen] = PERCENT_CHAR;
                if (iFirstWildCard == -1) {
                    iFirstWildCard = iLen;
                }
            } else {
                bPercent = false;
            }
        } else {
            bPercent = false;
            bEscaping = false;
        }
        cLike[iLen++] = c;
    }
    for (int i = 0; i < iLen - 1; i++) {
        if ((wildCardType[i] == PERCENT_CHAR) && (wildCardType[i + 1] == UNDERSCORE_CHAR)) {
            wildCardType[i] = UNDERSCORE_CHAR;
            wildCardType[i + 1] = PERCENT_CHAR;
        }
    }
}
