@Override
public void outputListLinkContext(Context outputListLinkContext, Page page, OutputList outputList, Link link) {
    // only for internal links
    if (link.isInternal()) {
        InternalLink internalLink = (InternalLink) link;
        Page targetPage = internalLink.getPage();
        StringBuilder sb = new StringBuilder();
        int count = 0;
        for (PageParameter targetParameter : targetPage.getParameters()) {
            if (count == 0) {
                sb.append("?");
            } else {
                sb.append("&");
            }
            sb.append(targetParameter.getId() + "=");
            count++;
            // auto fill value if possible
            if (targetParameter.getEntityProperty() != null) {
                boolean found = false;
                // referenced by the outputList
                if (outputList.getEntity().getId().equals(targetParameter.getEntityProperty().getEntity().getId())) {
                    // the output matches the expected parameter
                    sb.append("#{" + outputList.getEntity().getId() + "." + targetParameter.getEntityProperty().getId() + "}");
                    found = true;
                }
                // 1. search all outputs on current page
                if (found) {
                    continue;
                }
                for (Output output : page.getOutputs()) {
                    // see if there is a matching output on this page
                    if (output.getEntity().getId().equals(targetParameter.getEntityProperty().getEntity().getId())) {
                        // the output matches the expected parameter
                        sb.append("#{" + page.getId() + "Controller." + output.getId() + "." + targetParameter.getEntityProperty().getId() + "}");
                        found = true;
                    }
                }
                // 2. if not found, search all parameters on this page
                if (found) {
                    continue;
                }
                for (PageParameter currentParameter : page.getParameters()) {
                    if (currentParameter.getEntityProperty() != null && currentParameter.getEntityProperty().equals(targetParameter.getEntityProperty())) {
                        sb.append("#{" + page.getId() + "Controller." + currentParameter.getId() + "}");
                        found = true;
                    }
                }
                // semantics of update
                if (found) {
                    continue;
                }
                for (Form form : page.getForms()) {
                    // if no entities ignore this form
                    if (form.getEntities().size() == 0) {
                        continue;
                    }
                    // if any action has semantics of "update"
                    List<Action> updateActions = form.getActionsOfType(ActionType.UPDATE);
                    if (updateActions.size() == 0) {
                        continue;
                    }
                    for (Entity formEntity : form.getEntities()) {
                        // page
                        if (formEntity.getId().equals(targetParameter.getEntityProperty().getEntity().getId())) {
                            // the form entity matches the expected
                            // parameter, good!
                            // now find the input which matches the entity
                            // property
                            SingleUserInput matchingInput = form.getInputFor(targetParameter.getEntityProperty());
                            sb.append("#{" + page.getId() + "Controller." + form.getId() + matchingInput.getName() + "}");
                            found = true;
                        }
                    }
                }
            }
        }
        outputListLinkContext.put("queryString", sb.toString());
    }
}
