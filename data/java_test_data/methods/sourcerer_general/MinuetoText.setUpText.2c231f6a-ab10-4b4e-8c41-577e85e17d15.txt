public void setUpText(String strText, MinuetoFont mfoFont, MinuetoColor mcoColor, boolean bAntiAliased) {
    if (strText == null)
        new NullPointerException();
    if (mfoFont == null)
        new NullPointerException();
    if (mcoColor == null)
        new NullPointerException();
    BufferedImage bufImage;
    Graphics2D g2dGraphics;
    FontMetrics ftmMetrics;
    int iWidth;
    /* Width of our image */
    int iHeight;
    /* Height of our image */
    /* To calculate the size of the string, we need to get information
		 * about the screen (since the string size depends on the DPI 
		 * resolution of the monitor). To get this information, we create
		 * a temporary 1x1 accelerated image and get the font metric
		 * information from the graphic 2D image. */
    bufImage = ImageTools.createImage(1, 1);
    g2dGraphics = bufImage.createGraphics();
    /* Before getting the font metric, we need to set the font on the
		 * grpahic 2D object. */
    g2dGraphics.setFont(mfoFont.getFont());
    /* Enable or disable antialiasing. */
    if (bAntiAliased == true) {
        g2dGraphics.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
    } else {
        g2dGraphics.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_OFF);
    }
    /* Ah! now we have the font metrics! */
    ftmMetrics = g2dGraphics.getFontMetrics();
    /* It might seem simple, but figuring out that these 2 functions exist
		 * was insanely hard. The Java font engine can be quite complicated. */
    iHeight = ftmMetrics.getHeight();
    iWidth = ftmMetrics.stringWidth(strText);
    /* Since we should never create an image of width 0. */
    if (iWidth == 0) {
        iWidth = 1;
    }
    /* So now we know the proper size of the image. */
    bufImage = ImageTools.createImage(iWidth, iHeight);
    g2dGraphics = bufImage.createGraphics();
    /* Set the font and the color. */
    g2dGraphics.setFont(mfoFont.getFont());
    g2dGraphics.setColor(mcoColor.getAWTColor());
    /* Enable or disable antialiasing. */
    if (bAntiAliased == true) {
        g2dGraphics.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
    } else {
        g2dGraphics.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_OFF);
    }
    /* Draw the string on the buffer. */
    g2dGraphics.drawString(strText, 0, ftmMetrics.getAscent());
    /* Set up the MinuetoImage */
    super.setUpImage(bufImage);
}
