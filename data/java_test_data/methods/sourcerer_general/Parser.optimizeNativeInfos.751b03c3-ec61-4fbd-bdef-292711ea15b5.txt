private static void optimizeNativeInfos(NativeInfo compInfo) {
    // native and have no child
    for (Iterator it = compInfo.getChildren().iterator(); it.hasNext(); ) {
        final Object o = it.next();
        if (o instanceof NativeInfo) {
            final NativeInfo childInfo = (NativeInfo) o;
            if (!childInfo.getChildren().isEmpty())
                break;
            childInfo.setParentDirectly(null);
        } else if (o instanceof ComponentInfo) {
            break;
        }
        compInfo.addPrologChildDirectly(o);
        // detach it from the children list
        it.remove();
    }
    // Optimize 2: merge to epilog if the last children, are
    // native and have no child
    int sz = compInfo.getChildren().size();
    if (sz >= 0) {
        final ListIterator it = compInfo.getChildren().listIterator(sz);
        while (it.hasPrevious()) {
            final Object o = it.previous();
            if (o instanceof NativeInfo) {
                final NativeInfo childInfo = (NativeInfo) o;
                if (!childInfo.getChildren().isEmpty()) {
                    it.next();
                    break;
                }
                childInfo.setParentDirectly(null);
            } else if (o instanceof ComponentInfo) {
                it.next();
                break;
            }
        }
        while (it.hasNext()) {
            final Object o = it.next();
            compInfo.addEpilogChildDirectly(o);
            it.remove();
        }
    }
    // make all its children (grand-chidren) up one level
    if (compInfo.getChildren().size() == 1 && compInfo.getSplitChild() == null) /*just in case*/
    {
        Iterator it = compInfo.getChildren().iterator();
        final Object o = it.next();
        if (o instanceof NativeInfo) {
            final NativeInfo childInfo = (NativeInfo) o;
            // FUTURE: enhance UiEngineImpl to handle split's forEach
            if (!childInfo.withForEach()) {
                childInfo.setParentDirectly(null);
                compInfo.setSplitChild(childInfo);
                it.remove();
                for (it = childInfo.getChildren().iterator(); it.hasNext(); ) {
                    final Object gc = it.next();
                    it.remove();
                    compInfo.appendChildDirectly(gc);
                    if (gc instanceof ComponentInfo)
                        ((ComponentInfo) gc).setParentDirectly(compInfo);
                }
            }
        }
    }
}
