private Temp munchMemoryExp(AssemMemory memExp) {
    Temp newTemp = new Temp();
    Vector destList = new Vector();
    Vector srcList = new Vector();
    destList.addElement(newTemp);
    AssemExp memChild = memExp.getMemExp();
    int memChildTemp = memChild.getExpType();
    Operation instr;
    if (memChildTemp == AssemExp.MEM) {
        Temp memTemp = munchMemoryExp((AssemMemory) memChild);
        srcList.addElement(memTemp);
        instr = new Operation(destList, srcList, Operation.LOAD_ADDRESS, null, null);
    } else if (memChildTemp == AssemExp.CONST) {
        AssemConst assemConst = (AssemConst) memChild;
        int val = assemConst.getValue();
        instr = new Operation(destList, srcList, Operation.LOAD_ADDRESS, new Integer(val), null);
    } else if (memChildTemp == AssemExp.CALL) {
        Temp callTemp = munchCallExp((AssemCallExp) memChild);
        srcList.addElement(callTemp);
        instr = new Operation(destList, srcList, Operation.LOAD_ADDRESS, null, null);
    } else {
        // Must be temp
        AssemTemp assemTemp = (AssemTemp) memChild;
        srcList.addElement(assemTemp.getTemp());
        instr = new Operation(destList, srcList, Operation.LOAD_ADDRESS, null, null);
    }
    instructionsList.addElement(instr);
    return newTemp;
}
