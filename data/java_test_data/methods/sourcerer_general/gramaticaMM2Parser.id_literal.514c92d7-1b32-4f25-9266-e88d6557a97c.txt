// $ANTLR start "id_literal"
public final gramaticaMM2Parser.id_literal_return id_literal() throws RecognitionException {
    gramaticaMM2Parser.id_literal_return retval = new gramaticaMM2Parser.id_literal_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token LETTER206 = null;
    Token set207 = null;
    CommonTree LETTER206_tree = null;
    CommonTree set207_tree = null;
    try {
        // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:180:12: ( LETTER ( LETTER | DIGIT | DIGIT_NULL )* )
        // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:180:14: LETTER ( LETTER | DIGIT | DIGIT_NULL )*
        {
            root_0 = (CommonTree) adaptor.nil();
            LETTER206 = (Token) match(input, LETTER, FOLLOW_LETTER_in_id_literal1991);
            LETTER206_tree = (CommonTree) adaptor.create(LETTER206);
            adaptor.addChild(root_0, LETTER206_tree);
            // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:180:21: ( LETTER | DIGIT | DIGIT_NULL )*
            loop41: do {
                int alt41 = 2;
                int LA41_0 = input.LA(1);
                if ((LA41_0 == DIGIT_NULL || (LA41_0 >= DIGIT && LA41_0 <= LETTER))) {
                    alt41 = 1;
                }
                switch(alt41) {
                    case 1:
                        // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:
                        {
                            set207 = (Token) input.LT(1);
                            if (input.LA(1) == DIGIT_NULL || (input.LA(1) >= DIGIT && input.LA(1) <= LETTER)) {
                                input.consume();
                                adaptor.addChild(root_0, (CommonTree) adaptor.create(set207));
                                state.errorRecovery = false;
                            } else {
                                MismatchedSetException mse = new MismatchedSetException(null, input);
                                throw mse;
                            }
                        }
                        break;
                    default:
                        break loop41;
                }
            } while (true);
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
