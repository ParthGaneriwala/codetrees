public void playSound(Sound sound, float gain) {
    ClipBuffer buffer = sound.getBuffer();
    if (buffer == null) {
        return;
    }
    String path = buffer.getPath();
    int count = _counts.count(path);
    boolean canStop = false;
    if (sound.isPlaying() || count > 0) {
        for (int ii = _sounds.size() - 1; ii >= 0; ii--) {
            SoundEntry entry = _sounds.get(ii);
            if (sound.isPlaying()) {
                if (entry.sound == sound) {
                    _sounds.remove(ii);
                    _counts.remove(path);
                    count--;
                    log.debug("ClipManager replaying sound", "path", path);
                    break;
                }
            } else if (entry.elapsed < MIN_GAP && entry.sound.getBuffer().getPath().equals(path)) {
                log.debug("ClipManager prevent same sound", "path", path);
                return;
            } else if (!canStop && entry.elapsed > MIN_STOP && entry.sound.getBuffer().getPath().equals(path)) {
                canStop = true;
            }
        }
    }
    if (count + 1 >= GAIN_LEVEL.length) {
        if (!canStop) {
            log.debug("ClipManager prevent sound no popped", "path", path);
            return;
        }
        for (int ii = 0, nn = _sounds.size(); ii < nn; ii++) {
            SoundEntry entry = _sounds.get(ii);
            if (entry.sound.getBuffer().getPath().equals(sound.getBuffer().getPath())) {
                _sounds.remove(ii);
                _counts.remove(entry.sound.getBuffer().getPath());
                log.debug("ClipManager sound popped", "path", path);
                break;
            }
        }
    }
    if (sound.play(true)) {
        _sounds.add(new SoundEntry(sound, gain));
        _counts.add(path);
        count = _counts.count(path);
        sound.setGain(gain * getGainModifier(count));
        log.debug("ClipManager play sound", "count", count, "path", path);
    }
}
