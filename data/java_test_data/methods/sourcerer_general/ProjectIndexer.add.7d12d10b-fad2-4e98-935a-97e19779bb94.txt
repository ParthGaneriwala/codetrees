public void add(IIndexerService writer, Connection db, IndexerContext context) throws Exception {
    long startTime = System.currentTimeMillis();
    int count = 0;
    PreparedStatement pst = db.prepareStatement("SELECT instance_id, project_id, title, shortdescription, description, requestedby, requesteddept, entered, modified, " + "category_id, subcategory1_id, " + "allow_guests, membership_required, allows_user_observers, approvaldate, closedate, portal, " + "city, state, postalcode, keywords, " + "rating_count, rating_value, rating_avg " + "FROM projects " + "WHERE project_id > -1 ");
    ResultSet rs = pst.executeQuery();
    while (rs.next() && context.getEnabled()) {
        ++count;
        // read the record
        Project project = new Project();
        project.setInstanceId(rs.getInt("instance_id"));
        project.setId(rs.getInt("project_id"));
        project.setTitle(rs.getString("title"));
        project.setShortDescription(rs.getString("shortdescription"));
        project.setDescription(rs.getString("description"));
        project.setRequestedBy(rs.getString("requestedby"));
        project.setRequestedByDept(rs.getString("requesteddept"));
        project.setEntered(rs.getTimestamp("entered"));
        project.setModified(rs.getTimestamp("modified"));
        project.setCategoryId(DatabaseUtils.getInt(rs, "category_id"));
        project.setSubCategory1Id(DatabaseUtils.getInt(rs, "subcategory1_id"));
        project.getFeatures().setAllowGuests(rs.getBoolean("allow_guests"));
        project.getFeatures().setMembershipRequired(rs.getBoolean("membership_required"));
        project.getFeatures().setAllowParticipants(rs.getBoolean("allows_user_observers"));
        project.setApprovalDate(rs.getTimestamp("approvaldate"));
        if (project.getApprovalDate() != null) {
            project.setApproved(true);
        }
        project.setCloseDate(rs.getTimestamp("closedate"));
        if (project.getCloseDate() != null) {
            project.setClosed(true);
        }
        project.setPortal(rs.getBoolean("portal"));
        project.setCity(rs.getString("city"));
        project.setState(rs.getString("state"));
        project.setPostalCode(rs.getString("postalcode"));
        project.setKeywords(rs.getString("keywords"));
        project.setRatingCount(rs.getInt("rating_count"));
        project.setRatingValue(rs.getInt("rating_value"));
        project.setRatingAverage((rs.getDouble("rating_avg")));
        // add the document
        if (writer instanceof LuceneIndexer) {
            LuceneIndexer luceneWriter = (LuceneIndexer) writer;
            luceneWriter.indexAddItem(project, false, context.getIndexType());
        } else {
            // Don't know specifically what to do...
            writer.indexAddItem(project, false);
        }
    }
    rs.close();
    pst.close();
    long endTime = System.currentTimeMillis();
    long totalTime = endTime - startTime;
    LOG.info("Finished: " + count + " took " + totalTime + " ms");
}
