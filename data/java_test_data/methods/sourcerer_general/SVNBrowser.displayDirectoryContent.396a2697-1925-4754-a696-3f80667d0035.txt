private void displayDirectoryContent(List directoryContent) {
    List files = new ArrayList();
    // add "dir up"
    if (pathStack.size() > 1) {
        // todo: replace with hyperlink for history support
        Label name = new Label("..");
        content.setWidget(1, nameColumn, name);
        final String entryPath = getPathSection(pathStack.size() - 1);
        name.addClickListener(new ClickListener() {

            public void onClick(Widget widget) {
                ascend(1);
                getContentsForCurrentPath();
                listeners.fireOnDirectorySelected(entryPath);
            }
        });
        name.addStyleName("name");
        name.addStyleName("link");
        content.getRowFormatter().addStyleName(1, "dirEntry");
    }
    String path = getPath();
    // add directory entries and collect files
    for (int i = 0; i < directoryContent.size(); i++) {
        final SVNDirEntryWrapper entry = (SVNDirEntryWrapper) directoryContent.get(i);
        int kind = entry.getKind();
        if (kind == SVNNodeKindWrapper.FILE) {
            files.add(entry);
        } else if (kind == SVNNodeKindWrapper.DIR) {
            // todo: replace with hyperlink for history support
            Label name = new Label(entry.getName() + "/");
            int rowCount = content.getRowCount();
            content.setWidget(rowCount, nameColumn, name);
            final String entryPath = path + (path.length() > 0 ? "/" : "") + entry.getName();
            name.addClickListener(new ClickListener() {

                public void onClick(Widget widget) {
                    descend(entry.getName());
                    getContentsForCurrentPath();
                    listeners.fireOnDirectorySelected(entryPath);
                }
            });
            name.addStyleName("name");
            name.addStyleName("link");
            Label revision = new Label(Long.toString(entry.getRevision()));
            revision.addStyleName("revision");
            content.setWidget(rowCount, revisionColumn, revision);
            Label author = new Label(entry.getAuthor());
            author.addStyleName("author");
            content.setWidget(rowCount, authorColumn, author);
            // remove line breaks for IE7
            String commitMessageText = entry.getCommitMessage().replaceAll("\n", " ");
            if (commitMessageText.length() > commitMessageTruncateLength) {
                commitMessageText = commitMessageText.substring(0, commitMessageTruncateLength - 3) + "...";
            }
            Label commitMessage = new Label(commitMessageText);
            commitMessage.addStyleName("commitMessage");
            content.setWidget(rowCount, commitMessageColumn, commitMessage);
            content.getRowFormatter().addStyleName(rowCount, "dirEntry");
        }
    }
    // add file entries
    for (int i = 0; i < files.size(); i++) {
        final SVNDirEntryWrapper entry = (SVNDirEntryWrapper) files.get(i);
        // todo: replace with hyperlink for history support
        Label name = new Label(entry.getName());
        int rowCount = content.getRowCount();
        final String entryPath = path + (path.length() > 0 ? "/" : "") + entry.getName();
        name.addClickListener(new ClickListener() {

            public void onClick(Widget widget) {
                listeners.fireOnFileSelected(entry, entryPath);
            }
        });
        name.addStyleName("name");
        name.addStyleName("link");
        content.setWidget(rowCount, nameColumn, name);
        Label revision = new Label(Long.toString(entry.getRevision()));
        revision.addStyleName("revision");
        content.setWidget(rowCount, revisionColumn, revision);
        Label author = new Label(entry.getAuthor());
        author.addStyleName("author");
        content.setWidget(rowCount, authorColumn, author);
        // remove line breaks for IE7
        String commitMessageText = entry.getCommitMessage().replaceAll("\n", " ");
        if (commitMessageText.length() > commitMessageTruncateLength) {
            commitMessageText = commitMessageText.substring(0, commitMessageTruncateLength - 3) + "...";
        }
        Label commitMessage = new Label(commitMessageText);
        commitMessage.addStyleName("commitMessage");
        content.setWidget(rowCount, commitMessageColumn, commitMessage);
        content.getRowFormatter().addStyleName(rowCount, "fileEntry");
    }
}
