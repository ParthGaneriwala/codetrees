@Override
public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) {
    Log.d(TAG, "Query for URI: " + uri + " with selection: " + selection + " and args" + selectionArgs);
    SQLiteQueryBuilder qb = new SQLiteQueryBuilder();
    String defaultOrderBy = null;
    switch(URI_MATCHER.match(uri)) {
        case SEARCH_SUGGEST:
            qb.setTables(Products.TABLE_NAME + "," + ProductsNames.TABLE_NAME + "," + ProductsBrands.TABLE_NAME);
            qb.setProjectionMap(PRODUCTS_PROJECTION_MAP);
            qb.appendWhere(Products.TABLE_NAME + "." + Products.NAME_ID + " = " + ProductsNames.TABLE_NAME + "." + ProductsNames._ID);
            qb.appendWhere(" AND " + Products.TABLE_NAME + "." + Products.BRAND_ID + " = " + ProductsBrands.TABLE_NAME + "." + ProductsBrands._ID);
            String query = null;
            if (uri.getPathSegments().size() > 1) {
                query = uri.getLastPathSegment().toLowerCase();
                qb.appendWhere(" AND " + ProductsNames.TABLE_NAME + "." + ProductsNames.NAME + " LIKE  '%" + query + "%'");
            } else {
                return null;
            }
            break;
        case SHORTCUT_REFRESH:
            String shortcutId = null;
            if (uri.getPathSegments().size() > 1) {
                shortcutId = uri.getLastPathSegment();
            }
            return null;
        case PRODUCTS:
            qb.setTables(Products.TABLE_NAME + "," + ProductsNames.TABLE_NAME + "," + ProductsBrands.TABLE_NAME);
            qb.setProjectionMap(PRODUCTS_PROJECTION_MAP);
            qb.appendWhere(Products.TABLE_NAME + "." + Products.NAME_ID + " = " + ProductsNames.TABLE_NAME + "." + ProductsNames._ID);
            qb.appendWhere(" AND " + Products.TABLE_NAME + "." + Products.BRAND_ID + " = " + ProductsBrands.TABLE_NAME + "." + ProductsBrands._ID);
            defaultOrderBy = Products.DEFAULT_SORT_ORDER;
            break;
        case PRODUCTS_ID:
            qb.setTables(Products.TABLE_NAME + "," + ProductsNames.TABLE_NAME + "," + ProductsBrands.TABLE_NAME);
            qb.setProjectionMap(PRODUCTS_PROJECTION_MAP);
            qb.appendWhere(Products.TABLE_NAME + "." + Products.NAME_ID + " = " + ProductsNames.TABLE_NAME + "." + ProductsNames._ID);
            qb.appendWhere(" AND " + Products.TABLE_NAME + "." + Products.BRAND_ID + " = " + ProductsBrands.TABLE_NAME + "." + ProductsBrands._ID);
            qb.appendWhere(" AND " + Products.TABLE_NAME + "." + Products._ID + "=" + uri.getPathSegments().get(1));
            break;
        case LISTS:
            qb.setTables(Lists.TABLE_NAME);
            qb.setProjectionMap(LISTS_PROJECTION_MAP);
            defaultOrderBy = Lists.DEFAULT_SORT_ORDER;
            break;
        case LIST_ID:
            qb.setTables(Lists.TABLE_NAME);
            qb.appendWhere(Lists.TABLE_NAME + "." + Lists._ID + "=" + uri.getPathSegments().get(1));
            break;
        case PLACES:
            qb.setTables(Places.TABLE_NAME);
            qb.setProjectionMap(SHOPS_PROJECTION_MAP);
            defaultOrderBy = Places.DEFAULT_SORT_ORDER;
            break;
        case PLACES_ID:
            qb.setTables(Places.TABLE_NAME);
            qb.appendWhere(Places._ID + "=" + uri.getPathSegments().get(1));
            break;
        case CONTAINS:
            qb.setTables(Contains.TABLE_NAME);
            qb.setProjectionMap(CONTAINS_PROJECTION_MAP);
            defaultOrderBy = Contains.DEFAULT_SORT_ORDER;
            break;
        case CONTAINS_ID:
            qb.setTables(Contains.TABLE_NAME);
            qb.appendWhere(Contains.TABLE_NAME + "." + Contains._ID + "=" + uri.getPathSegments().get(1));
            break;
        case CONTAINS_FULL:
            qb.setTables(Contains.TABLE_NAME + "," + Products.TABLE_NAME + "," + Lists.TABLE_NAME + "," + ProductsNames.TABLE_NAME + "," + ProductsBrands.TABLE_NAME);
            qb.setProjectionMap(CONTAINS_FULL_PROJECTION_MAP);
            qb.appendWhere(Products.TABLE_NAME + "." + Products.NAME_ID + " = " + ProductsNames.TABLE_NAME + "." + ProductsNames._ID);
            qb.appendWhere(" AND " + Products.TABLE_NAME + "." + Products.BRAND_ID + " = " + ProductsBrands.TABLE_NAME + "." + ProductsBrands._ID);
            qb.appendWhere(" AND " + Contains.TABLE_NAME + "." + Contains.PRODUCT_ID + "=" + Products.TABLE_NAME + "." + Products._ID);
            qb.appendWhere(" AND " + Contains.TABLE_NAME + "." + Contains.LIST_ID + "=" + Lists.TABLE_NAME + "." + Lists._ID);
            defaultOrderBy = Contains.DEFAULT_SORT_ORDER;
            break;
        case CONTAINS_FULL_ID:
            qb.setTables(Contains.TABLE_NAME + "," + Products.TABLE_NAME + "," + Lists.TABLE_NAME);
            qb.appendWhere(Contains.TABLE_NAME + "." + Contains.PRODUCT_ID + "=" + Products.TABLE_NAME + "." + Products._ID);
            qb.appendWhere(" AND " + Contains.TABLE_NAME + "." + Contains.LIST_ID + "=" + Lists.TABLE_NAME + "." + Lists._ID);
            qb.appendWhere(" AND " + Contains.TABLE_NAME + "." + Contains._ID + "=" + uri.getPathSegments().get(1));
            break;
        default:
            throw new IllegalArgumentException("Unknow URI " + uri);
    }
    // If no sort order is specified use the default
    String orderBy;
    if (TextUtils.isEmpty(sortOrder)) {
        orderBy = defaultOrderBy;
    } else {
        orderBy = sortOrder;
    }
    // Get the database and run the query
    SQLiteDatabase db = mOpenHelper.getReadableDatabase();
    Cursor cursor = qb.query(db, projection, selection, selectionArgs, null, null, orderBy);
    // Tell the cursor what uri to watch, so it knows when its
    // source data changes
    cursor.setNotificationUri(getContext().getContentResolver(), uri);
    // @TODO Arreglo para devolver los nombre de columnas tal y como lo pide el searchManager, no se hacerlo de otra manera
    /**
     * The columns we'll include in our search suggestions.
     */
    final String[] COLUMNS = { // must include this column
    "_id", SearchManager.SUGGEST_COLUMN_TEXT_1, SearchManager.SUGGEST_COLUMN_TEXT_2, SearchManager.SUGGEST_COLUMN_INTENT_DATA };
    if ((URI_MATCHER.match(uri)) == SEARCH_SUGGEST) {
        final MatrixCursor result = new MatrixCursor(COLUMNS);
        try {
            while (cursor.moveToNext()) {
                result.addRow(new Object[] { cursor.getString(cursor.getColumnIndex(Products._ID)), cursor.getString(cursor.getColumnIndex(ProductsNames.NAME)), cursor.getString(cursor.getColumnIndex(ProductsBrands.BRAND)), // @TODO Mejorar esta parte
                ContentUris.withAppendedId(Products.CONTENT_URI, Integer.parseInt(cursor.getString(cursor.getColumnIndex(Products._ID)))) });
            }
        } finally {
            cursor.close();
        }
        return result;
    }
    return cursor;
}
