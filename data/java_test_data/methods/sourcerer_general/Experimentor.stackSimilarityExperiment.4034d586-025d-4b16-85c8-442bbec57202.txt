private static void stackSimilarityExperiment() {
    IlConcurrentStack<Integer> ilConcurrentStack = new IlConcurrentStack<Integer>(0);
    ConcurrentStack<Integer> concurrentStack = new ConcurrentStack<Integer>();
    long timeCounter = 0;
    for (int i = 0; i < 10; i++) {
        long currentTimeMillis = System.currentTimeMillis();
        for (int m = 0; m < 10; m++) {
            new Thread(new PositiveProducer(ilConcurrentStack, 100000)).start();
        }
        Thread consumer = new Thread(new Consumer(ilConcurrentStack, 999999));
        consumer.start();
        try {
            consumer.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        timeCounter += System.currentTimeMillis() - currentTimeMillis;
    }
    System.out.println("mean (from 10 tries) time for insertion of 1M elements " + "by 10 processes To IlConcurrentStack<Integer>(0) is: " + (timeCounter / 10));
    timeCounter = 0;
    for (int i = 0; i < 10; i++) {
        long currentTimeMillis = System.currentTimeMillis();
        for (int m = 0; m < 10; m++) {
            new Thread(new PositiveProducer(concurrentStack, 100000)).start();
        }
        Thread consumer = new Thread(new Consumer(concurrentStack, 999999));
        consumer.start();
        try {
            consumer.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        timeCounter += System.currentTimeMillis() - currentTimeMillis;
    }
    System.out.println("mean (from 10 tries) time for insertion of 1M elements " + "by 10 processes To IlConcurrentStack<Integer>(0) is: " + (timeCounter / 10));
// stackSimilarityExperiment
// mean (from 10 tries) time for insertion of 1M elements by 10 processes To IlConcurrentStack<Integer>(0) is: 6485
// mean (from 10 tries) time for insertion of 1M elements by 10 processes To IlConcurrentStack<Integer>(0) is: 6106
// 
}
