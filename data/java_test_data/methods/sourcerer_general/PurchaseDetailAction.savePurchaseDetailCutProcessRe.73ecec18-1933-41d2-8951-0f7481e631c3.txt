public String savePurchaseDetailCutProcessRe() {
    System.out.println("PurchaseDetailAction -> savePurchaseDetailCutProcessRe() ");
    if ((purchaseDetailCutProcess.getQuantityFail() == 0 && purchaseDetailCutProcess.getPriceQuantityFail() == 0) || purchaseDetailCutProcess.getQuantityFail() > 0 && purchaseDetailCutProcess.getPriceQuantityFail() != 0) {
        PurchaseDetailCutProcess purchDetCutProcAux = purchaseDetailCutProcessManager.get(purchaseDetailCutProcess.getId());
        Double diffQuantFail = purchaseDetailCutProcess.getQuantityFail() - purchDetCutProcAux.getQuantityFail();
        purchDetCutProcAux.setQuantityFail(purchaseDetailCutProcess.getQuantityFail());
        purchDetCutProcAux.setPriceQuantityFail(purchaseDetailCutProcess.getPriceQuantityFail());
        purchDetCutProcAux.setTotalAmountQuantityFail(purchaseDetailCutProcess.getQuantityFail() * purchaseDetailCutProcess.getPriceQuantityFail());
        purchDetCutProcAux = purchaseDetailCutProcessManager.save(purchDetCutProcAux);
        CutProcess cutProcess = purchDetCutProcAux.getCutProcess();
        cutProcess.setTotalAmountFail(cutProcess.getTotalAmountFail() + (diffQuantFail * purchaseDetailCutProcess.getPriceQuantityFail()));
        cutProcess.setTotalRealAmount(cutProcess.getTotalRealAmount() - (diffQuantFail * purchaseDetailCutProcess.getPriceQuantityFail()));
        cutProcess.setTotalCurrentAmount(cutProcess.getTotalCurrentAmount() - (diffQuantFail * purchaseDetailCutProcess.getPriceQuantityFail()));
        cutProcess = cutProcessManager.save(cutProcess);
        BalanceEmployee balanceEmployee = cutProcess.getBalanceEmployee();
        // balanceEmployee.setAmountWon(balanceEmployee.getAmountWon() - (diffQuantFail * purchaseDetailCutProcess.getPriceQuantityFail()) );
        balanceEmployee.setTypeBalance(1);
        balanceEmployee.setAmountPaid(balanceEmployee.getAmountPaid() + (diffQuantFail * purchaseDetailCutProcess.getPriceQuantityFail()));
        balanceEmployee.setObservation(balanceEmployee.getAmountPaid() + " DESC POR MAL USO DE MATERIAL");
        balanceEmployee.setBalance(balanceEmployee.getBalance() - (diffQuantFail * purchaseDetailCutProcess.getPriceQuantityFail()));
        PeriodPaymentEmployee perPayEmpl = balanceEmployee.getPeriodPaymentEmployee();
        perPayEmpl.setDiscount(perPayEmpl.getDiscount() + (diffQuantFail * purchaseDetailCutProcess.getPriceQuantityFail()));
        perPayEmpl.setCurrentAmount(perPayEmpl.getCurrentAmount() - (diffQuantFail * purchaseDetailCutProcess.getPriceQuantityFail()));
        periodPaymentEmployeeManager.save(perPayEmpl);
        balanceEmployeeManager.save(balanceEmployee);
        saveMessage(getText("purchaseDetailAction.savePurchaseDetailCutProcessRe.success"));
        System.out.println("PurchaseDetailAction -> end savePurchaseDetailCutProcessRe() ");
        return SUCCESS;
    } else {
        errorMessage(getText("purchaseDetailAction.savePurchaseDetailCutProcessRe.error"));
        System.out.println("PurchaseDetailAction -> error end savePurchaseDetailCutProcessRe() ");
        return ERROR;
    }
}
