@Override
public void initialize(UimaContext context) throws ResourceInitializationException {
    try {
        super.initialize(context);
        // load the term lists
        BufferedReader input = new BufferedReader(new FileReader(termListFileNamesFileName));
        String line;
        while ((line = input.readLine()) != null) {
            line = line.trim();
            String[] columns = line.split("\t");
            String termListName = columns[0];
            String fileName = columns[1];
            boolean caseSensitive = Boolean.parseBoolean(columns[2]);
            String separator = columns.length == 4 ? columns[3] : null;
            if (caseSensitive && caseSensitiveTermFinder == null)
                caseSensitiveTermFinder = new SimpleTermFinder(true, new PennTreebankTokenizer());
            if (!caseSensitive && caseInsensitiveTermFinder == null)
                caseInsensitiveTermFinder = new SimpleTermFinder(false, new PennTreebankTokenizer());
            TermList termList = TermList.loadSimpleFile(termListName, new File(fileName), separator);
            if (caseSensitive)
                caseSensitiveTermFinder.addTermList(termList);
            else
                caseInsensitiveTermFinder.addTermList(termList);
        }
        if (windowClassName != null) {
            allTokens = false;
            sentenceClass = InitializableFactory.getClass(windowClassName, Annotation.class);
        }
        tokenClass = InitializableFactory.getClass(tokenClassName, Annotation.class);
        if (termMatchAnnotationCreatorClassName != null && !termMatchAnnotationCreatorClassName.equals("")) {
            annotationCreator = InitializableFactory.create(context, termMatchAnnotationCreatorClassName, TermMatchAnnotationCreator.class);
        } else {
            Class<? extends Annotation> annotationClass = InitializableFactory.getClass(termMatchAnnotationClassName, Annotation.class);
            annotationConstructor = annotationClass.getConstructor(new Class[] { JCas.class, java.lang.Integer.TYPE, java.lang.Integer.TYPE });
        }
    } catch (Exception e) {
        throw new ResourceInitializationException(e);
    }
}
