public void appendSqlTail(Connection db, StringBuffer appendedSqlStatement) {
    StringBuffer sqlStatement = new StringBuffer();
    sqlStatement.append("ORDER BY ");
    // If multiple columns are being sorted, then the sort order applies to all columns
    if (this.randomOrder) {
        if (DatabaseUtils.getType(db) == DatabaseUtils.POSTGRESQL) {
            sqlStatement.append(" RANDOM() ");
        } else if (DatabaseUtils.getType(db) == DatabaseUtils.INTERBASE) {
            // TODO:Need to implement
            sqlStatement.append("  ");
        } else if (DatabaseUtils.getType(db) == DatabaseUtils.ORACLE) {
            // TODO: Needs to be tested
            sqlStatement.append(" dbms_random.value ");
        } else if (DatabaseUtils.getType(db) == DatabaseUtils.DB2) {
            // TODO: Needs to be tested
            sqlStatement.append(" RANDOM_NO  ");
        } else if (DatabaseUtils.getType(db) == DatabaseUtils.MYSQL) {
            // TODO: Needs to be tested
            sqlStatement.append(" RAND() ");
        } else if (DatabaseUtils.getType(db) == DatabaseUtils.MSSQL) {
            // TODO: Needs to be tested
            sqlStatement.append(" NEWID() ");
        }
    } else {
        if (this.getColumnToSortBy().indexOf(",") > -1) {
            StringTokenizer st = new StringTokenizer(this.getColumnToSortBy(), ",");
            while (st.hasMoreTokens()) {
                String column = st.nextToken();
                sqlStatement.append(DatabaseUtils.parseReservedWord(db, column) + " ");
                if (this.hasSortOrderConfigured()) {
                    sqlStatement.append(this.getSortOrder() + " ");
                }
                if (st.hasMoreTokens()) {
                    sqlStatement.append(",");
                }
            }
        } else {
            sqlStatement.append(DatabaseUtils.parseReservedWord(db, this.getColumnToSortBy()) + " ");
            if (this.hasSortOrderConfigured()) {
                sqlStatement.append(this.getSortOrder() + " ");
            }
        }
    }
    // Keep a handle on just the order by clause for use by appendSqlHead
    orderByStatement = sqlStatement.toString();
    // Determine items per page for PostgreSQL
    if (DatabaseUtils.getType(db) == DatabaseUtils.POSTGRESQL) {
        if (this.getItemsPerPage() > 0) {
            sqlStatement.append("LIMIT " + this.getItemsPerPage() + " ");
        }
        sqlStatement.append("OFFSET " + this.getCurrentOffset() + " ");
    } else if (DatabaseUtils.getType(db) == DatabaseUtils.INTERBASE && this.getItemsPerPage() > 0) {
        int startFrom = this.getCurrentOffset() + 1;
        sqlStatement.append(" ROWS " + startFrom + " TO " + (this.getItemsPerPage() + this.getCurrentOffset()));
    } else if (DatabaseUtils.getType(db) == DatabaseUtils.ORACLE) {
        if (this.getItemsPerPage() > 0) {
            // sqlStatement.append(") " +
            // "WHERE ROWNUM BETWEEN " + this.getCurrentOffset() + " AND " +
            // (this.getCurrentOffset() + this.getItemsPerPage()) + " ");
            sqlStatement.append(") " + "WHERE ROWNUM <= " + (this.getCurrentOffset() + this.getItemsPerPage()) + " ");
        }
    } else if (DatabaseUtils.getType(db) == DatabaseUtils.DB2) {
        if (this.getItemsPerPage() > 0) {
            sqlStatement.append("FETCH FIRST " + (this.getItemsPerPage() + this.getCurrentOffset()) + " ROWS ONLY) AS db_row_numbers " + "WHERE db_row > " + this.getCurrentOffset() + " AND db_row <= " + (this.getCurrentOffset() + this.getItemsPerPage()) + " ");
        }
    } else if (DatabaseUtils.getType(db) == DatabaseUtils.MYSQL) {
        if (this.getItemsPerPage() > 0) {
            sqlStatement.append("LIMIT " + this.getCurrentOffset() + "," + this.getItemsPerPage() + " ");
        }
    }
    appendedSqlStatement.append(sqlStatement);
}
