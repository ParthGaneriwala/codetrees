public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;
    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;
    char[] zzCMapL = ZZ_CMAP;
    int[] zzTransL = ZZ_TRANS;
    int[] zzRowMapL = ZZ_ROWMAP;
    int[] zzAttrL = ZZ_ATTRIBUTE;
    while (true) {
        zzMarkedPosL = zzMarkedPos;
        boolean zzR = false;
        for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL; zzCurrentPosL++) {
            switch(zzBufferL[zzCurrentPosL]) {
                case '\u000B':
                case '\u000C':
                case '\u0085':
                case '\u2028':
                case '\u2029':
                    yyline++;
                    yycolumn = 0;
                    zzR = false;
                    break;
                case '\r':
                    yyline++;
                    yycolumn = 0;
                    zzR = true;
                    break;
                case '\n':
                    if (zzR)
                        zzR = false;
                    else {
                        yyline++;
                        yycolumn = 0;
                    }
                    break;
                default:
                    zzR = false;
                    yycolumn++;
            }
        }
        if (zzR) {
            // peek one character ahead if it is \n (if we have counted one line too much)
            boolean zzPeek;
            if (zzMarkedPosL < zzEndReadL)
                zzPeek = zzBufferL[zzMarkedPosL] == '\n';
            else if (zzAtEOF)
                zzPeek = false;
            else {
                boolean eof = zzRefill();
                zzEndReadL = zzEndRead;
                zzMarkedPosL = zzMarkedPos;
                zzBufferL = zzBuffer;
                if (eof)
                    zzPeek = false;
                else
                    zzPeek = zzBufferL[zzMarkedPosL] == '\n';
            }
            if (zzPeek)
                yyline--;
        }
        zzAction = -1;
        zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
        zzState = zzLexicalState;
        zzForAction: {
            while (true) {
                if (zzCurrentPosL < zzEndReadL)
                    zzInput = zzBufferL[zzCurrentPosL++];
                else if (zzAtEOF) {
                    zzInput = YYEOF;
                    break zzForAction;
                } else {
                    // store back cached positions
                    zzCurrentPos = zzCurrentPosL;
                    zzMarkedPos = zzMarkedPosL;
                    boolean eof = zzRefill();
                    // get translated positions and possibly new buffer
                    zzCurrentPosL = zzCurrentPos;
                    zzMarkedPosL = zzMarkedPos;
                    zzBufferL = zzBuffer;
                    zzEndReadL = zzEndRead;
                    if (eof) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        zzInput = zzBufferL[zzCurrentPosL++];
                    }
                }
                int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
                if (zzNext == -1)
                    break zzForAction;
                zzState = zzNext;
                int zzAttributes = zzAttrL[zzState];
                if ((zzAttributes & 1) == 1) {
                    zzAction = zzState;
                    zzMarkedPosL = zzCurrentPosL;
                    if ((zzAttributes & 8) == 8)
                        break zzForAction;
                }
            }
        }
        // store back cached position
        zzMarkedPos = zzMarkedPosL;
        switch(zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
            case 2:
                {
                /* ignore */
                }
            case 42:
                break;
            case 25:
                {
                    return new Symbol(sym.ATRELEASE);
                }
            case 43:
                break;
            case 33:
                {
                    return new Symbol(sym.ATDEADLINE);
                }
            case 44:
                break;
            case 6:
                {
                    return new Symbol(sym.LCHAVE);
                }
            case 45:
                break;
            case 27:
                {
                    return new Symbol(sym.ATVERSION);
                }
            case 46:
                break;
            case 41:
                {
                    return new Symbol(sym.ATDEPRECATED);
                }
            case 47:
                break;
            case 15:
                {
                    return new Symbol(sym.ATLINK);
                }
            case 48:
                break;
            case 40:
                {
                    return new Symbol(sym.ATSCHEDULING);
                }
            case 49:
                break;
            case 30:
                {
                    return new Symbol(sym.ATCACHEHIT);
                }
            case 50:
                break;
            case 21:
                {
                    return new Symbol(sym.ATPHASE);
                }
            case 51:
                break;
            case 32:
                {
                    return new Symbol(sym.ATEXCLUDES);
                }
            case 52:
                break;
            case 39:
                {
                    return new Symbol(sym.ATUSEDMEMORY);
                }
            case 53:
                break;
            case 18:
                {
                    return new Symbol(sym.ATSENDS);
                }
            case 54:
                break;
            case 24:
                {
                    return new Symbol(sym.ATRETURN);
                }
            case 55:
                break;
            case 26:
                {
                    return new Symbol(sym.ATDOCROOT);
                }
            case 56:
                break;
            case 23:
                {
                    return new Symbol(sym.ATPERIOD);
                }
            case 57:
                break;
            case 13:
                {
                    return new Symbol(sym.ATCODE);
                }
            case 58:
                break;
            case 5:
                {
                    return new Symbol(sym.COMMA);
                }
            case 59:
                break;
            case 14:
                {
                    return new Symbol(sym.ATTASK);
                }
            case 60:
                break;
            case 36:
                {
                    return new Symbol(sym.ATPAGEFAULT);
                }
            case 61:
                break;
            case 38:
                {
                    return new Symbol(sym.ATPESACCESS);
                }
            case 62:
                break;
            case 7:
                {
                    return new Symbol(sym.RCHAVE);
                }
            case 63:
                break;
            case 19:
                {
                    return new Symbol(sym.ATPOWER);
                }
            case 64:
                break;
            case 37:
                {
                    return new Symbol(sym.ATPROCESSOR);
                }
            case 65:
                break;
            case 17:
                {
                    return new Symbol(sym.ATSINCE);
                }
            case 66:
                break;
            case 3:
                {
                    return new Symbol(sym.WORD);
                }
            case 67:
                break;
            case 20:
                {
                    return new Symbol(sym.ATPARAM);
                }
            case 68:
                break;
            case 12:
                {
                    return new Symbol(sym.ATSEE);
                }
            case 69:
                break;
            case 16:
                {
                    return new Symbol(sym.ATWCET);
                }
            case 70:
                break;
            case 4:
                {
                    return new Symbol(sym.INTEGER);
                }
            case 71:
                break;
            case 11:
                {
                    return new Symbol(sym.END);
                }
            case 72:
                break;
            case 8:
                {
                    return new Symbol(sym.NPORP);
                }
            case 73:
                break;
            case 10:
                {
                    return new Symbol(sym.BEGIN);
                }
            case 74:
                break;
            case 35:
                {
                    return new Symbol(sym.ATOPTACCESS);
                }
            case 75:
                break;
            case 28:
                {
                    return new Symbol(sym.ATFUNCTION);
                }
            case 76:
                break;
            case 34:
                {
                    return new Symbol(sym.ATCACHEMISS);
                }
            case 77:
                break;
            case 31:
                {
                    return new Symbol(sym.ATPRECEDES);
                }
            case 78:
                break;
            case 9:
                {
                    return new Symbol(sym.REAL);
                }
            case 79:
                break;
            case 29:
                {
                    return new Symbol(sym.ATCODESIZE);
                }
            case 80:
                break;
            case 22:
                {
                    return new Symbol(sym.ATAUTHOR);
                }
            case 81:
                break;
            case 1:
                {
                    System.out.println("Error: unknown character " + yytext() + " found at line " + yyline);
                }
            case 82:
                break;
            default:
                if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                    zzAtEOF = true;
                    zzDoEOF();
                    {
                        return new java_cup.runtime.Symbol(sym.EOF);
                    }
                } else {
                    zzScanError(ZZ_NO_MATCH);
                }
        }
    }
}
