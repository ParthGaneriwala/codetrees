public void render(float sx, float sy, float swidth, float sheight, int tx, int ty, int twidth, int theight, float alpha, Image mask) {
    Renderer renderer = _ctx.getRenderer();
    renderer.setColorState(alpha, alpha, alpha, alpha);
    // prepare the mask image if any
    float mwidth = 1f, mheight = 1f;
    if (mask != null) {
        Texture2D mtex = mask.getTexture(renderer);
        _masked[1].setTexture(mtex);
        mwidth = mask.getWidth() / (float) mtex.getWidth();
        mheight = mask.getHeight() / (float) mtex.getHeight();
    }
    // iterate over all intersecting blocks
    int xmin = FloatMath.ifloor(sx / TEXTURE_SIZE);
    int ymin = FloatMath.ifloor(sy / TEXTURE_SIZE);
    int xmax = FloatMath.ifloor((sx + swidth - 1f) / TEXTURE_SIZE);
    int ymax = FloatMath.ifloor((sy + sheight - 1f) / TEXTURE_SIZE);
    for (int yy = ymin; yy <= ymax; yy++) {
        for (int xx = xmin; xx <= xmax; xx++) {
            Texture2D texture = _textures.get(_coord.set(xx, yy));
            if (texture == null) {
                continue;
            }
            // find the intersection of the block with the rendered section
            float bx1 = xx << TEXTURE_POT, bx2 = (xx + 1) << TEXTURE_POT;
            float by1 = yy << TEXTURE_POT, by2 = (yy + 1) << TEXTURE_POT;
            float ix1 = Math.max(sx, bx1), ix2 = Math.min(sx + swidth, bx2);
            float iy1 = Math.max(sy, by1), iy2 = Math.min(sy + sheight, by2);
            // compute the texture coordinates within the block
            float ls = (ix1 - bx1) / TEXTURE_SIZE;
            float us = (ix2 - bx1) / TEXTURE_SIZE;
            float lt = (iy1 - by1) / TEXTURE_SIZE;
            float ut = (iy2 - by1) / TEXTURE_SIZE;
            // compute the proportional coordinates
            float lx = (ix1 - sx) / swidth;
            float ux = (ix2 - sx) / swidth;
            float ly = (iy1 - sy) / sheight;
            float uy = (iy2 - sy) / sheight;
            // now the mask coordinates
            float mls = lx * mwidth;
            float mus = ux * mwidth;
            float mlt = ly * mheight;
            float mut = uy * mheight;
            // now the onscreen location
            lx = lx * twidth + tx;
            ux = ux * twidth + tx;
            ly = ly * theight + ty;
            uy = uy * theight + ty;
            // prepare the texture units
            TextureUnit[] units = (mask == null) ? _unmasked : _masked;
            units[0].setTexture(texture);
            // render the block
            renderer.setTextureState(units);
            GL11.glBegin(GL11.GL_QUADS);
            if (mask == null) {
                GL11.glTexCoord2f(ls, lt);
                GL11.glVertex2f(lx, ly);
                GL11.glTexCoord2f(us, lt);
                GL11.glVertex2f(ux, ly);
                GL11.glTexCoord2f(us, ut);
                GL11.glVertex2f(ux, uy);
                GL11.glTexCoord2f(ls, ut);
                GL11.glVertex2f(lx, uy);
            } else {
                GL11.glTexCoord2f(ls, lt);
                ARBMultitexture.glMultiTexCoord2fARB(ARBMultitexture.GL_TEXTURE1_ARB, mls, mlt);
                GL11.glVertex2f(lx, ly);
                GL11.glTexCoord2f(us, lt);
                ARBMultitexture.glMultiTexCoord2fARB(ARBMultitexture.GL_TEXTURE1_ARB, mus, mlt);
                GL11.glVertex2f(ux, ly);
                GL11.glTexCoord2f(us, ut);
                ARBMultitexture.glMultiTexCoord2fARB(ARBMultitexture.GL_TEXTURE1_ARB, mus, mut);
                GL11.glVertex2f(ux, uy);
                GL11.glTexCoord2f(ls, ut);
                ARBMultitexture.glMultiTexCoord2fARB(ARBMultitexture.GL_TEXTURE1_ARB, mls, mut);
                GL11.glVertex2f(lx, uy);
            }
            GL11.glEnd();
            // return to modelview matrix mode
            renderer.setMatrixMode(GL11.GL_MODELVIEW);
        }
    }
}
