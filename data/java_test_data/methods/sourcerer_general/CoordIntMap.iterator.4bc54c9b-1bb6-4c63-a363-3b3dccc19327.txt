public Iterator<CoordIntEntry> iterator() {
    return new Iterator<CoordIntEntry>() {

        public boolean hasNext() {
            checkConcurrentModification();
            return _count < _size;
        }

        public CoordIntEntry next() {
            checkConcurrentModification();
            if (_centry == null) {
                _centry = _cit.next();
            }
            while (true) {
                int[] values = _centry.getValue().getValues();
                for (; _idx < values.length; _idx++) {
                    int value = values[_idx];
                    if (value != _empty) {
                        Coord coord = _centry.getKey();
                        _dummy.getKey().set((coord.x << _granularity) | (_idx & _mask), (coord.y << _granularity) | (_idx >> _granularity));
                        _dummy._values = values;
                        _dummy._idx = _idx;
                        _idx++;
                        _count++;
                        return _dummy;
                    }
                }
                _centry = _cit.next();
                _idx = 0;
            }
        }

        public void remove() {
            checkConcurrentModification();
            Cell cell = _centry.getValue();
            cell.remove(_idx);
            if (cell.size() == 0) {
                _cit.remove();
                _centry = null;
                _idx = 0;
            }
            _size--;
            _count--;
            _omodcount = _modcount;
        }

        protected void checkConcurrentModification() {
            if (_modcount != _omodcount) {
                throw new ConcurrentModificationException();
            }
        }

        protected Iterator<Entry<Coord, Cell>> _cit = _cells.entrySet().iterator();

        protected Entry<Coord, Cell> _centry;

        protected int _idx;

        protected int _count;

        protected int _omodcount = _modcount;

        protected CoordIntEntry _dummy = new CoordIntEntry();
    };
}
