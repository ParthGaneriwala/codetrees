private double getRelatednessFromOutLinks(Article article) throws SQLException {
    if (getId() == article.getId())
        return 1;
    int totalArticles = database.getArticleCount();
    int[][] dataA = getLinksOutIdsAndCounts();
    int[][] dataB = article.getLinksOutIdsAndCounts();
    if (dataA.length == 0 || dataB.length == 0)
        return 0;
    int indexA = 0;
    int indexB = 0;
    Vector<Double> vectA = new Vector<Double>();
    Vector<Double> vectB = new Vector<Double>();
    while (indexA < dataA.length || indexB < dataB.length) {
        int idA = -1;
        int idB = -1;
        if (indexA < dataA.length)
            idA = dataA[indexA][0];
        if (indexB < dataB.length)
            idB = dataB[indexB][0];
        if (idA == idB) {
            double probability = Math.log((double) totalArticles / dataA[indexA][1]);
            vectA.add(probability);
            vectB.add(probability);
            indexA++;
            indexB++;
        } else {
            if ((idA < idB && idA > 0) || idB < 0) {
                double probability = Math.log((double) totalArticles / dataA[indexA][1]);
                vectA.add(probability);
                if (idA == article.getId())
                    vectB.add(probability);
                else
                    vectB.add(0.0);
                indexA++;
            } else {
                double probability = Math.log((double) totalArticles / dataB[indexB][1]);
                vectB.add(new Double(probability));
                if (idB == id)
                    vectA.add(probability);
                else
                    vectA.add(0.0);
                indexB++;
            }
        }
    }
    // calculate angle between vectors
    double dotProduct = 0;
    double magnitudeA = 0;
    double magnitudeB = 0;
    for (int x = 0; x < vectA.size(); x++) {
        double valA = ((Double) vectA.elementAt(x)).doubleValue();
        double valB = ((Double) vectB.elementAt(x)).doubleValue();
        dotProduct = dotProduct + (valA * valB);
        magnitudeA = magnitudeA + (valA * valA);
        magnitudeB = magnitudeB + (valB * valB);
    }
    magnitudeA = Math.sqrt(magnitudeA);
    magnitudeB = Math.sqrt(magnitudeB);
    double sr = Math.acos(dotProduct / (magnitudeA * magnitudeB));
    // reverse, so 0=no relation, PI/2= same
    sr = (Math.PI / 2) - sr;
    // normalize, so measure is between 0 and 1 ;
    sr = sr / (Math.PI / 2);
    return sr;
}
