public void paint(Graphics2D g, Dependency dependency, boolean hasFocus) {
    if (!(dependency instanceof UsesDependency)) {
        throw new IllegalArgumentException("Not a UsesDependency");
    }
    Stroke oldStroke = g.getStroke();
    UsesDependency d = (UsesDependency) dependency;
    Stroke dashedStroke, normalStroke;
    boolean isSelected = d.isSelected() && hasFocus;
    if (isSelected) {
        dashedStroke = dashedSelected;
        normalStroke = normalSelected;
    } else {
        dashedStroke = dashedUnselected;
        normalStroke = normalUnselected;
    }
    g.setStroke(normalStroke);
    int src_x = d.getSourceX();
    int src_y = d.getSourceY();
    int dst_x = d.getDestX();
    int dst_y = d.getDestY();
    ;
    g.setColor(normalColour);
    g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
    // Draw the end arrow
    int delta_x = d.isEndLeft() ? -10 : 10;
    g.drawLine(dst_x, dst_y, dst_x + delta_x, dst_y + 4);
    g.drawLine(dst_x, dst_y, dst_x + delta_x, dst_y - 4);
    g.setStroke(dashedStroke);
    // Draw the start
    int corner_y = src_y + (d.isStartTop() ? -15 : 15);
    g.drawLine(src_x, corner_y, src_x, src_y);
    src_y = corner_y;
    // Draw the last line segment
    int corner_x = dst_x + (d.isEndLeft() ? -15 : 15);
    g.drawLine(corner_x, dst_y, dst_x, dst_y);
    dst_x = corner_x;
    // if arrow vertical corner, draw first segment up to corner
    if ((src_y != dst_y) && (d.isStartTop() == (src_y < dst_y))) {
        corner_x = ((src_x + dst_x) / 2) + (d.isEndLeft() ? 15 : -15);
        corner_x = (d.isEndLeft() ? Math.min(dst_x, corner_x) : Math.max(dst_x, corner_x));
        g.drawLine(src_x, src_y, corner_x, src_y);
        src_x = corner_x;
    }
    // if arrow horiz. corner, draw first segment up to corner
    if ((src_x != dst_x) && (d.isEndLeft() == (src_x > dst_x))) {
        corner_y = ((src_y + dst_y) / 2) + (d.isStartTop() ? 15 : -15);
        corner_y = (d.isStartTop() ? Math.min(src_y, corner_y) : Math.max(src_y, corner_y));
        g.drawLine(dst_x, corner_y, dst_x, dst_y);
        dst_y = corner_y;
    }
    // draw the middle bit
    g.drawLine(src_x, src_y, src_x, dst_y);
    g.drawLine(src_x, dst_y, dst_x, dst_y);
    g.setStroke(oldStroke);
}
