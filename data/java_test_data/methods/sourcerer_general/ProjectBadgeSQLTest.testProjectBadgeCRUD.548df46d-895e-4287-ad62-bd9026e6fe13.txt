public void testProjectBadgeCRUD() throws SQLException {
    int badgeId;
    int projectId;
    // Insert a project category
    ProjectCategory projectCategory = new ProjectCategory();
    projectCategory.setDescription("ProjectBadgeSQLTest" + System.currentTimeMillis());
    projectCategory.insert(db);
    // Insert a badge category
    BadgeCategory badgeCategory = new BadgeCategory();
    badgeCategory.setProjectCategoryId(projectCategory.getId());
    badgeCategory.setItemName("ProjectBadgeSQLTest" + System.currentTimeMillis());
    badgeCategory.insert(db);
    // Insert a project
    Project project = new Project();
    project.setCategoryId(projectCategory.getId());
    project.setTitle("ProjectBadgeSQLTest " + System.currentTimeMillis());
    project.setShortDescription("description");
    project.setRequestDate(new java.sql.Timestamp(System.currentTimeMillis()));
    project.setEnteredBy(USER_ID);
    project.setModifiedBy(USER_ID);
    project.insert(db);
    projectId = project.getId();
    // Insert a badge
    Badge badge = new Badge();
    badge.setCategoryId(badgeCategory.getId());
    badge.setTitle("ProjectBadgeSQL Test " + System.currentTimeMillis());
    badge.setDescription("Test Description");
    badge.setEnabled(true);
    badge.setEnteredBy(USER_ID);
    badge.setModifiedBy(USER_ID);
    badge.insert(db);
    badgeId = badge.getId();
    // Insert badge project link
    ProjectBadge projectBadge = new ProjectBadge();
    projectBadge.setBadgeId(badgeId);
    projectBadge.setProjectId(projectId);
    assertNotNull(projectBadge);
    boolean result = projectBadge.insert(db);
    assertTrue("Badge was not inserted", result);
    assertTrue("Inserted badge did not have an id", projectBadge.getId() > -1);
    // Find the previously set badge project link
    int projectBadgeId = projectBadge.getId();
    projectBadge = null;
    ProjectBadgeList badgeList = new ProjectBadgeList();
    badgeList.setProjectId(projectId);
    badgeList.buildList(db);
    assertTrue(badgeList.size() > 0);
    for (ProjectBadge tmpBadge : badgeList) {
        if (tmpBadge.getId() == projectBadgeId) {
            projectBadge = tmpBadge;
            break;
        }
    }
    assertNotNull(projectBadge);
    // Delete the badge project link
    projectBadge.delete(db);
    projectBadgeId = projectBadge.getId();
    projectBadge = null;
    // Try to find the previously deleted badge project link
    badgeList = new ProjectBadgeList();
    badgeList.setProjectId(projectId);
    badgeList.buildList(db);
    for (ProjectBadge tmpBadge : badgeList) {
        if (tmpBadge.getId() == projectBadgeId) {
            assertNull("Badge Project link exists when it shouldn't", tmpBadge);
        }
    }
    // clean up the badge and project created
    String basePath = null;
    assertTrue("Project was not deleted", project.delete(db, basePath));
    assertTrue("Badge was not deleted", badge.delete(db, basePath));
    assertTrue("BadgeCategory was not deleted", badgeCategory.delete(db, basePath));
    assertTrue("ProjectCategory was not deleted", projectCategory.delete(db, basePath));
}
