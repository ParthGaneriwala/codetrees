private boolean MarcaGemasAdyacentes(int x, int y) {
    // No hay gema en la casilla, salimos
    if (_dataTablero[x][y].colorGema == CGemas.NONE)
        return false;
    // Color de la gema que estamos comparando
    int colorGema = _dataTablero[x][y].colorGema;
    // n�mero gemas de igual color en cada direccion
    int cont;
    // variables temporales para recorrer las gemas adyacentes
    int i, j;
    // gemas potenciales que se pueden destruir en cada direcci�n
    CPos[] gemasDestTemp = new CPos[4];
    // Indica si se ha destruido alguna gema
    boolean hayGemasDestruidas = false;
    // //////////////////////////////////////////////////////////////////
    // Horizontal  //////////////////////////////////////////////////////
    cont = 0;
    // Hacia la derecha
    i = x + 1;
    while ((i < ANCHO_TABLERO) && (_dataTablero[i][y].colorGema == colorGema)) {
        // Guardamos la posici�n de la gema
        gemasDestTemp[cont] = new CPos(i, y);
        cont++;
        // Siguiente gema
        ++i;
    }
    // Hacia la izquierda
    i = x - 1;
    while ((i >= 0) && (_dataTablero[i][y].colorGema == colorGema)) {
        // Guardamos la posici�n de la gema
        gemasDestTemp[cont] = new CPos(i, y);
        cont++;
        // Siguiente gema
        --i;
    }
    // que la que tratamos (hacen un total de tres)
    if (cont >= 2) {
        ActualizaDestruidasParciales(x, y, cont, gemasDestTemp);
        hayGemasDestruidas = true;
    }
    // //////////////////////////////////////////////////////////////////
    // Vertical  ////////////////////////////////////////////////////////
    cont = 0;
    // Hacia arriba
    j = y - 1;
    while ((j >= 0) && (_dataTablero[x][j].colorGema == colorGema)) {
        // Guardamos la posici�n de la gema
        gemasDestTemp[cont] = new CPos(x, j);
        cont++;
        // Siguiente gema
        --j;
    }
    // Hacia abajo
    j = y + 1;
    while ((j < ALTO_TABLERO) && (_dataTablero[x][j].colorGema == colorGema)) {
        // Guardamos la posici�n de la gema
        gemasDestTemp[cont] = new CPos(x, j);
        cont++;
        // Siguiente gema
        ++j;
    }
    // que la que tratamos (hacen un total de tres)
    if (cont >= 2) {
        ActualizaDestruidasParciales(x, y, cont, gemasDestTemp);
        hayGemasDestruidas = true;
    }
    // //////////////////////////////////////////////////////////////////
    // Diagonal principal (\) ///////////////////////////////////////////
    cont = 0;
    // izquierda arriba
    i = x - 1;
    j = y - 1;
    while ((i >= 0) && (j >= 0) && (_dataTablero[i][j].colorGema == colorGema)) {
        // Guardamos la posici�n de la gema
        gemasDestTemp[cont] = new CPos(i, j);
        cont++;
        // Siguiente gema
        --i;
        --j;
    }
    // derecha abajo
    i = x + 1;
    j = y + 1;
    while ((i < ANCHO_TABLERO) && (j < ALTO_TABLERO) && (_dataTablero[i][j].colorGema == colorGema)) {
        // Guardamos la posici�n de la gema
        gemasDestTemp[cont] = new CPos(i, j);
        cont++;
        // Siguiente gema
        ++i;
        ++j;
    }
    // Ademas hemos de marcarlas como movidas
    if (cont >= 2) {
        ActualizaDestruidasParciales(x, y, cont, gemasDestTemp);
        hayGemasDestruidas = true;
    }
    // //////////////////////////////////////////////////////////////////
    // Diagonal secundaria (/) //////////////////////////////////////////
    cont = 0;
    // derecha arriba
    i = x + 1;
    j = y - 1;
    while ((i < ANCHO_TABLERO) && (j >= 0) && (_dataTablero[i][j].colorGema == colorGema)) {
        // Guardamos la posici�n de la gema
        gemasDestTemp[cont] = new CPos(i, j);
        cont++;
        // Siguiente gema
        ++i;
        --j;
    }
    // izquierda abajo
    i = x - 1;
    j = y + 1;
    while ((i >= 0) && (j < ALTO_TABLERO) && (_dataTablero[i][j].colorGema == colorGema)) {
        // Guardamos la posici�n de la gema
        gemasDestTemp[cont] = new CPos(i, j);
        cont++;
        // Siguiente gema
        --i;
        ++j;
    }
    // que la que tratamos (hacen un total de tres)
    if (cont >= 2) {
        ActualizaDestruidasParciales(x, y, cont, gemasDestTemp);
        hayGemasDestruidas = true;
    }
    return hayGemasDestruidas;
}
