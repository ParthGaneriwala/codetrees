public String ConstructXMLTree(double[][] dDistanceMatrix) {
    if (K == 0) {
        // K has not been initialized
        // let K be the LOG of length(dDistanceMatrix)
        K = (int) Math.round(Math.log(dDistanceMatrix.length));
    }
    int n = dDistanceMatrix.length;
    int[] centroids = new int[K];
    for (int i = 0; i < K; i++) centroids[i] = -1;
    double[] min_distances = new double[K];
    int[][] clusters = new int[K][n];
    int[] cent_count = new int[K];
    // initial choice of centroids
    double[] initial_sum = new double[dDistanceMatrix.length];
    for (int i = 0; i < dDistanceMatrix.length; i++) {
        for (int j = 0; j < dDistanceMatrix.length; j++) {
            if (i != j) {
                initial_sum[i] += dDistanceMatrix[i][j];
            }
        }
    }
    for (int i = 0; i < K; i++) {
        int min_index = -1;
        double min_value = Double.MAX_VALUE;
        for (int j = 0; j < dDistanceMatrix.length; j++) {
            if (min_value > initial_sum[j]) {
                min_value = initial_sum[j];
                min_index = j;
            }
        }
        centroids[i] = min_index;
        initial_sum[min_index] = Double.MAX_VALUE;
    }
    ArrayList HistoryAL = new ArrayList();
    while (!CentroidsRepeat(centroids, HistoryAL)) {
        HistoryAL.add(centroids.clone());
        for (int i = 0; i < K; i++) {
            cent_count[i] = 0;
        }
        // cluster the elements around the centroids
        for (int i = 0; i < n; i++) {
            // determine to which centroid i will be assigned
            int my_centroid = -1;
            double min_dist = Double.MAX_VALUE;
            for (int j = 0; j < K; j++) {
                if (dDistanceMatrix[i][centroids[j]] < min_dist) {
                    min_dist = dDistanceMatrix[i][centroids[j]];
                    my_centroid = j;
                }
            }
            clusters[my_centroid][cent_count[my_centroid]++] = i;
        }
        // choose the new centroids
        for (int i = 0; i < centroids.length; i++) {
            if (cent_count[i] > 0) {
                centroids[i] = SelectCentroid(centroids[i], clusters[i], dDistanceMatrix, cent_count[i]);
            }
            min_distances[i] = min_tot_dist;
        }
    }
    // generate the XML tree
    String xmlTree = "<node step=\"0\" dist=\"0\">";
    for (int i = 0; i < centroids.length; i++) {
        if (cent_count[i] > 0) {
            xmlTree += "<node step=\"" + (i + 1) + "\" dist=\"" + min_distances[i] + "\">";
            for (int j = 0; j < cent_count[i]; j++) {
                xmlTree += "<node id=\"" + clusters[i][j] + "\"/>";
            }
            xmlTree += "</node>";
        }
    }
    xmlTree += "</node>";
    return xmlTree;
}
