private boolean convertIndexStmt() {
    // can only deal with the simplest one
    ParseNode parentOfNewChildren = new ProgramNode(PROGRAM);
    List<ParseNode> oldChildren = rootProg.getChildren();
    List<ParseNode> oldLoopChildren;
    for (ParseNode child : oldChildren) {
        if (child.getSymbol().isNonterminal(NonterminalGrammarSymbol.LOOP)) {
            // might have index statement
            boolean hasIndexStmt = false;
            oldLoopChildren = child.child(1).child(0).getChildren();
            for (ParseNode loopChild : oldLoopChildren) {
                if (loopChild.getSymbol().isKeyword(Keyword.INDEX)) {
                    hasIndexStmt = true;
                    break;
                }
            }
            if (hasIndexStmt) {
                BlockNode bParent = new BlockNode(BLOCK);
                bParent.setToisFromConverted();
                BlockStatementToken blockSymbolStart = BlockStatementToken.make(null, "{", BlockSymbol.START);
                BlockStatementNode blockSymbolStartNode = new BlockStatementNode(new TokenGrammarSymbol(blockSymbolStart));
                BlockStatementToken blockSymbolEnd = BlockStatementToken.make(null, "}", BlockSymbol.END);
                BlockStatementNode blockSymbolEndNode = new BlockStatementNode(new TokenGrammarSymbol(blockSymbolEnd));
                ParseNode prog1 = new ProgramNode(PROGRAM);
                ParseNode prog2 = new ProgramNode(PROGRAM);
                OperatorToken negativeToken = OperatorToken.make(null, "-", Operator.MINUS);
                ParseNode negative = new UnaryOperatorNode(new TokenGrammarSymbol(negativeToken));
                OperatorToken incToken = OperatorToken.make(null, "++", Operator.INC);
                ParseNode inc = new UnaryOperatorNode(new TokenGrammarSymbol(incToken));
                OperatorToken gtoreqToken = OperatorToken.make(null, ">=", Operator.GTOREQ);
                ParseNode gtoreq = new BinaryOperatorNode(new TokenGrammarSymbol(gtoreqToken));
                NumberToken numToken = NumberToken.make(null, "1");
                ParseNode num = new NumberNode(new TokenGrammarSymbol(numToken));
                TypeToken intToken = TypeToken.make(null, "int", TypeKeyword.INT);
                ParseNode int_ = new TypeNode(new TokenGrammarSymbol(intToken));
                KeywordToken lenToken = KeywordToken.make(null, "length", Keyword.LENGTH);
                ParseNode len = new KeywordNode(new TokenGrammarSymbol(lenToken));
                KeywordToken leaveToken = KeywordToken.make(null, "leave", Keyword.LEAVE);
                ParseNode leave = new KeywordNode(new TokenGrammarSymbol(leaveToken));
                negative.appendChild(num);
                int_.appendChild(negative);
                ParseNode child2 = child;
                child2.child(1).child(0).newChildren();
                for (ParseNode loopChild2 : oldLoopChildren) {
                    if (loopChild2.getSymbol().isKeyword(Keyword.INDEX)) {
                        int_.appendChild(loopChild2.child(0));
                        inc.appendChild(loopChild2.child(0));
                        len.appendChild(loopChild2.child(1));
                        gtoreq.appendChild(inc);
                        gtoreq.appendChild(len);
                        leave.appendChild(gtoreq);
                        child2.child(1).child(0).appendChild(leave);
                    } else {
                        child2.child(1).child(0).appendChild(loopChild2);
                    }
                }
                prog2.appendChild(int_);
                prog2.appendChild(child2);
                prog1.appendChild(prog2);
                bParent.appendChild(blockSymbolStartNode);
                bParent.appendChild(prog1);
                bParent.appendChild(blockSymbolEndNode);
                parentOfNewChildren.appendChild(bParent);
            } else {
                parentOfNewChildren.appendChild(child);
            }
        } else {
            parentOfNewChildren.appendChild(child);
        }
    }
    rootProg.newChildren();
    for (ParseNode child : parentOfNewChildren.getChildren()) {
        rootProg.appendChild(child);
    }
    return true;
}
