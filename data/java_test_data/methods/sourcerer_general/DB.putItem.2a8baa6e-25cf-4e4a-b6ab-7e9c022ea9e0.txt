// ------------------------------------------
// insert or update an item in the **cloud
// and store copy in **local database
public static long putItem(Item item, Context context) {
    Logger.log(TAG + ".putItem()");
    Logger.log("item", item);
    resetError();
    long last_updated = -1;
    try {
        HTTPPost post = new HTTPPost(HTTPPost.Request.PUT_ITEM);
        post.addLong("_id", item._id);
        post.addString("item", item.item);
        post.addString("description", item.description);
        post.addString("link", item.link);
        post.addString("tags", item.tags);
        if (isNewMedia(item.image)) {
            post.addFile("image", Media.getTmpImageFile(), Media.getTmpImageMime());
        }
        if (isNewMedia(item.audio)) {
            post.addFile("audio", Media.getTmpAudioFile(), Media.getTmpAudioMime());
        }
        Logger.log("HTTPost", HTTPPost.Request.PUT_ITEM);
        String xml = post.post();
        Logger.log("XML", xml);
        if (xml == null) {
            setError(ERR_NETWORK);
        } else {
            String[] cols = { "_id" };
            Cursor c = new ArrayCursor(cols, xml);
            if (!errorState()) {
                if (c.moveToFirst()) {
                    last_updated = c.getLong(0);
                    if (last_updated >= 0) {
                        item._id = last_updated;
                        // ------------------------------------
                        // update local database
                        // ------------------------------------
                        putLocalItem(item, context);
                        // ------------------------------------
                        // clear cache...
                        // ------------------------------------
                        // refresh object: media references might have changed.
                        String key = HTTPPost.Request.GET_ITEM + item._id;
                        mCache.remove(key);
                        // clear lists: items and tags might have changed
                        Iterator it = mCache.keySet().iterator();
                        while (it.hasNext()) {
                            String k = (String) (it.next());
                            if (k.startsWith(HTTPPost.Request.GET_ITEM_LIST) || k.startsWith(HTTPPost.Request.GET_TAG_LIST)) {
                                it.remove();
                            }
                        }
                    }
                }
            }
        }
    } catch (Exception e) {
        setError(ERR_UNKNOWN);
        Logger.log(e);
    }
    return last_updated;
}
