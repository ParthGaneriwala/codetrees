private static void processFile(File file) {
    BufferedReader reader = null;
    Map<String, String> props = new HashMap<String, String>();
    try {
        InputStream input = new FileInputStream(file);
        reader = new BufferedReader(new InputStreamReader(input), BUFFER_SIZE);
        String line = reader.readLine();
        int pos = line.indexOf("\\");
        if (pos < 0) {
            return;
        }
        // Ignore the first identifier
        line = line.substring(pos + 1);
        while (line != null) {
            pos = line.indexOf("\\");
            String key = line.substring(0, pos);
            String value = "";
            line = line.substring(pos + 1);
            if (line.startsWith("\\")) {
                line = line.substring(1);
            } else {
                pos = line.indexOf("\\");
                if (pos < 0) {
                    value = line;
                    line = null;
                } else {
                    value = line.substring(0, pos);
                    line = line.substring(pos + 1);
                }
            }
            props.put(key, value);
        }
    } catch (FileNotFoundException err) {
        err.printStackTrace();
    } catch (IOException err) {
        err.printStackTrace();
    } finally {
        if (reader != null) {
            try {
                reader.close();
            } catch (IOException err) {
                err.printStackTrace();
            }
        }
    }
    List<String> keys = new ArrayList<String>();
    keys.addAll(props.keySet());
    Collections.sort(keys, String.CASE_INSENSITIVE_ORDER);
    StringBuilder builder = new StringBuilder();
    for (String key : keys) {
        if (builder.length() > 0) {
            builder.append("\n");
        }
        builder.append(key).append("=").append(props.get(key));
    }
    OutputStream output = null;
    try {
        output = new FileOutputStream(file);
        output.write(builder.toString().getBytes());
    } catch (FileNotFoundException err) {
        err.printStackTrace();
    } catch (IOException err) {
        err.printStackTrace();
    } finally {
        if (output != null) {
            try {
                output.close();
            } catch (IOException err) {
                err.printStackTrace();
            }
        }
    }
}
