@Override
public void onCreate(Bundle icicle) {
    super.onCreate(icicle);
    if (debug)
        Log.d(TAG, "onCreate()");
    anim = AnimationUtils.loadAnimation(this, R.anim.highlight);
    setContentView(R.layout.main);
    SharedPreferences settings = getPreferences(0);
    CurrentIP = settings.getString("CurrentIP", "");
    CurrentBits = settings.getInt("CurrentBits", 24);
    Spinner s1 = (Spinner) findViewById(R.id.bitlength);
    ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.bitlengths, android.R.layout.simple_spinner_item);
    adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
    s1.setAdapter(adapter);
    Spinner s2 = (Spinner) findViewById(R.id.subnetmask);
    ArrayAdapter<CharSequence> subnetmask_adapter = ArrayAdapter.createFromResource(this, R.array.subnets, android.R.layout.simple_spinner_item);
    subnetmask_adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
    s2.setAdapter(subnetmask_adapter);
    s1.setOnItemSelectedListener(mBitlengthSelectedListener);
    s2.setOnItemSelectedListener(mSubnetMaskSelectedListener);
    s1.setSelection(CurrentBits - 1);
    s2.setSelection(CurrentBits - 1);
    /*
        EditText t1 = (EditText) findViewById(R.id.ipaddress);
        InputFilter[] ipfilters = new InputFilter[2];
        ipfilters[0] = new InputFilter.LengthFilter(15);
        ipfilters[1] = new IPFilter();
        t1.setFilters(ipfilters);
*/
    Button calculate = (Button) findViewById(R.id.calculate);
    calculate.setOnClickListener(mCalculateListener);
    Button reset = (Button) findViewById(R.id.reset);
    reset.setOnClickListener(mResetListener);
    msgIPAddress = (TextView) findViewById(R.id.ipaddress);
    if (CurrentIP != "") {
        msgIPAddress.setText(CurrentIP);
    }
    mUri = History.CONTENT_URI;
    adapter2 = new SimpleCursorAdapter(this, android.R.layout.simple_dropdown_item_1line, null, new String[] { History.IP }, new int[] { android.R.id.text1 });
    adapter2.setCursorToStringConverter(new HistoryCursorConverter());
    adapter2.setFilterQueryProvider(new FilterQueryProvider() {

        public Cursor runQuery(CharSequence constraint) {
            StringBuilder buffer = null;
            String[] args = null;
            if (constraint != null) {
                buffer = new StringBuilder();
                buffer.append("UPPER(");
                buffer.append(PROJECTION[1]);
                buffer.append(") GLOB ?");
                String filter = constraint.toString().toUpperCase() + "*";
                args = new String[] { filter };
            }
            return getContentResolver().query(mUri, PROJECTION, buffer == null ? null : buffer.toString(), args, History.DEFAULT_SORT_ORDER);
        }
    });
    AutoCompleteTextView ipField = (AutoCompleteTextView) findViewById(R.id.ipaddress);
    ipField.setAdapter(adapter2);
    ipField.setOnEditorActionListener(new TextView.OnEditorActionListener() {

        public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {
            if (actionId == EditorInfo.IME_ACTION_DONE) {
                doCalculate();
                Button calculate = (Button) findViewById(R.id.calculate);
                calculate.requestFocus();
                // close soft keyboard
                InputMethodManager inputManager = (InputMethodManager) CIDRCalculator.this.getSystemService(Context.INPUT_METHOD_SERVICE);
                inputManager.hideSoftInputFromWindow(calculate.getWindowToken(), InputMethodManager.HIDE_NOT_ALWAYS);
                return true;
            }
            return false;
        }
    });
}
