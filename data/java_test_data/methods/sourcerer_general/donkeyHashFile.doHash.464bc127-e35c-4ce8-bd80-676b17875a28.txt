public static byte[][] doHash(File myFile) {
    try {
        System.out.println("Hashing \"" + myFile.toString() + "\" ...");
        long fileSize = myFile.length();
        long bytesLeft = fileSize;
        long bBytesLeft = blockLength;
        int bytesToRead = 4096;
        int bytesRead = 0;
        int numBlocks = (int) (fileSize / blockLength + 1);
        MD4 md4 = new MD4();
        byte[] buffer = new byte[4096];
        byte[][] hashes = new byte[numBlocks + 1][16];
        BufferedInputStream fileIn = new BufferedInputStream(new FileInputStream(myFile));
        for (int i = 1; i <= numBlocks; i++) {
            md4.engineReset();
            bytesLeft = fileSize - (i - 1) * blockLength;
            while (bBytesLeft > 0 && bytesLeft > 0) {
                if (bBytesLeft < buffer.length)
                    bytesToRead = (int) bBytesLeft;
                bytesRead = fileIn.read(buffer, 0, bytesToRead);
                bBytesLeft -= bytesRead;
                bytesLeft -= bytesRead;
                md4.engineUpdate(buffer, 0, bytesRead);
            }
            bBytesLeft = blockLength;
            bytesToRead = buffer.length;
            hashes[i] = md4.engineDigest();
        }
        if (numBlocks == 1)
            hashes[0] = hashes[1];
        else {
            md4.engineReset();
            for (int i = 1; i <= numBlocks; i++) {
                md4.engineUpdate(hashes[i], 0, 16);
            }
            hashes[0] = md4.engineDigest();
        }
        return (hashes);
    } catch (IOException ie) {
        System.out.println("Error hashing " + myFile.toString() + ":" + ie.toString());
    }
    return (null);
}
