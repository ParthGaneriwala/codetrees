public boolean delete(Connection db, String baseFilePath) throws SQLException {
    if (id == -1) {
        return false;
    }
    // Try to delete the file first
    if (filename != null) {
        String filePath = baseFilePath + getFilename();
        File file = new File(filePath);
        if (file.exists()) {
            file.delete();
        }
    }
    // Try to delete the compiled file
    if (filename != null) {
        String filePath = baseFilePath + getFilename();
        if (filePath.indexOf(".xml") > -1) {
            filePath = filePath.substring(0, filePath.lastIndexOf(".xml"));
        }
        File file = new File(filePath + ".jasper");
        if (file.exists()) {
            file.delete();
        }
    }
    // Delete the record and associated data
    boolean commit = true;
    try {
        commit = db.getAutoCommit();
        if (commit) {
            db.setAutoCommit(false);
        }
        // Delete any report queues?
        ReportQueueList queueList = new ReportQueueList();
        queueList.setReportId(id);
        queueList.buildList(db);
        String fs = System.getProperty("file.separator");
        File queuePath = new File(baseFilePath);
        String queuePathString = queuePath.getParentFile() + fs + "projects" + fs;
        if (System.getProperty("DEBUG") != null) {
            System.out.println("Report-> QueuePath: " + queuePathString);
        }
        queueList.delete(db, queuePathString);
        // Delete the report
        PreparedStatement pst = db.prepareStatement("DELETE FROM report " + "WHERE report_id = ? ");
        pst.setInt(1, id);
        pst.execute();
        pst.close();
        if (commit) {
            db.commit();
        }
    } catch (Exception e) {
        if (commit) {
            db.rollback();
        }
        throw new SQLException(e.getMessage());
    } finally {
        if (commit) {
            db.setAutoCommit(true);
        }
    }
    return true;
}
