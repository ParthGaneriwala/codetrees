protected Literal readLiteral(boolean wellFormed) {
    StringBuffer lit = new StringBuffer(sbLength);
    if (wellFormed) {
        deprecated("Use ^^rdf:XMLLiteral not xml\"literals\", .");
        if (!expect("xml"))
            return null;
    }
    if (!expect("\""))
        return null;
    while (true) {
        char inChar = in.readChar();
        if (badEOF())
            return null;
        if (inChar == '\\') {
            char c = in.readChar();
            if (in.eof()) {
                inErr = true;
                return null;
            }
            if (c == 'n') {
                inChar = '\n';
            } else if (c == 'r') {
                inChar = '\r';
            } else if (c == 't') {
                inChar = '\t';
            } else if (c == '\\' || c == '"') {
                inChar = c;
            } else if (c == 'u') {
                inChar = readUnicode4Escape();
                if (inErr)
                    return null;
            } else {
                syntaxError("illegal escape sequence '" + c + "'");
                return null;
            }
        } else if (inChar == '"') {
            String lang;
            if ('@' == in.nextChar()) {
                expect("@");
                lang = readLang();
            } else if ('-' == in.nextChar()) {
                expect("-");
                deprecated("Language tags should be introduced with @ not -.");
                lang = readLang();
            } else {
                lang = "";
            }
            if (wellFormed) {
                return model.createLiteral(lit.toString(), // "",
                wellFormed);
            } else if ('^' == in.nextChar()) {
                String datatypeURI = null;
                if (!expect("^^<")) {
                    syntaxError("ill-formed datatype");
                    return null;
                }
                datatypeURI = readURI();
                if (datatypeURI == null || !expect(">"))
                    return null;
                if (lang.length() > 0)
                    deprecated("Language tags are not permitted on typed literals.");
                return model.createTypedLiteral(lit.toString(), datatypeURI);
            } else {
                return model.createLiteral(lit.toString(), lang);
            }
        }
        lit = lit.append(inChar);
    }
}
