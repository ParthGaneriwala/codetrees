public static Map cleanRestMetadataMap(Map metadata) {
    log.debug("Cleaning up REST metadata items");
    HashMap cleanMap = new HashMap();
    if (metadata != null) {
        Iterator metadataIter = metadata.entrySet().iterator();
        while (metadataIter.hasNext()) {
            Map.Entry entry = (Map.Entry) metadataIter.next();
            Object key = entry.getKey();
            Object value = entry.getValue();
            // Trim prefixes from keys.
            String keyStr = (key != null ? key.toString() : "");
            if (keyStr.startsWith(Constants.REST_METADATA_PREFIX)) {
                key = keyStr.substring(Constants.REST_METADATA_PREFIX.length(), keyStr.length());
                log.debug("Removed Amazon meatadata header prefix from key: " + keyStr + "=>" + key);
            } else if (keyStr.startsWith(Constants.REST_HEADER_PREFIX)) {
                key = keyStr.substring(Constants.REST_HEADER_PREFIX.length(), keyStr.length());
                log.debug("Removed Amazon header prefix from key: " + keyStr + "=>" + key);
            } else if (RestUtils.HTTP_HEADER_METADATA_NAMES.contains(keyStr.toLowerCase(Locale.getDefault()))) {
                key = keyStr;
                log.debug("Leaving HTTP header item unchanged: " + key + "=" + value);
            } else if ("ETag".equalsIgnoreCase(keyStr) || "Date".equalsIgnoreCase(keyStr) || "Last-Modified".equalsIgnoreCase(keyStr)) {
                key = keyStr;
                log.debug("Leaving header item unchanged: " + key + "=" + value);
            } else {
                log.debug("Ignoring metadata item: " + keyStr + "=" + value);
                continue;
            }
            // appropriate)
            if (value instanceof Collection) {
                if (((Collection) value).size() == 1) {
                    log.debug("Converted metadata single-item Collection " + value.getClass() + " " + value + " for key: " + key);
                    value = ((Collection) value).iterator().next();
                } else {
                    log.warn("Collection " + value + " has too many items to convert to a single string");
                }
            }
            // Parse dates.
            if ("Date".equals(key) || "Last-Modified".equals(key)) {
                try {
                    log.debug("Parsing date string '" + value + "' into Date object for key: " + key);
                    value = parseRfc822Date(value.toString());
                } catch (ParseException pe) {
                    log.warn("Unable to parse S3 date for metadata field " + key, pe);
                    value = null;
                }
            }
            cleanMap.put(key, value);
        }
    }
    return cleanMap;
}
