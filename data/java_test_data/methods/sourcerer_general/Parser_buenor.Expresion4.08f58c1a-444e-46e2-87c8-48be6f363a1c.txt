char Expresion4() {
    char c4 = '-';
    switch(la.kind) {
        // Parentesis izquierda.
        case 19:
            {
                Get();
                c4 = Expresion();
                Esperado(25);
                break;
            }
        case 9:
            {
                c4 = 'o';
                Get();
                Esperado(1);
                Simbolo expr_simbol = new Simbolo();
                expr_simbol = tablasimbolos.Buscar(simbolo.getId());
                if (expr_simbol != null)
                    SemError("Mal uso del constructor");
                if (expr_simbol == null) {
                    TablaSimb tio;
                    tio = tablasimbolos.BuscarTio(simbolo.getId());
                    if (tio == null)
                        SemError("No existe la clase " + simbolo.getId());
                    // Busco el constructor en la clase.
                    expr_simbol = tablasimbolos.BuscarEn(tio, simbolo.getId());
                    if (expr_simbol == null)
                        SemError("El constructor no esta declarado");
                    if (expr_simbol.getTipo() != 'm')
                        SemError("El constructor debe ser un método");
                }
                Esperado(19);
                if (expr_simbol.getColaArgumentos() != null)
                    colaArgumento = expr_simbol.getColaArgumentos();
                numargmetodo = expr_simbol.getNumArgMetodo();
                numargmetodo_aux = numargmetodo;
                aux = 0;
                if (numargmetodo != 0)
                    Argumentos();
                Esperado(25);
                break;
            }
        // ident; || ident() || ident[] || ident.ident() || ident.ident ||
        case 1:
            {
                simbolo.setId(la.val);
                Simbolo expr_simbol = new Simbolo();
                expr_simbol = tablasimbolos.Buscar(simbolo.getId());
                if (expr_simbol == null)
                    SemError("Variable no declarada");
                Get();
                if (expr_simbol != null)
                    c4 = expr_simbol.getTipo();
                if (la.kind == 16 || la.kind == 18 || la.kind == 19) {
                    if (la.kind == 16) {
                        Get();
                        Esperado(1);
                        TablaSimb tio;
                        tio = tablasimbolos.BuscarTio(expr_simbol.getClaseRelacionada());
                        if (tio == null)
                            SemError("No se encontró la clase relacionada");
                        expr_simbol = tablasimbolos.BuscarEn(tio, simbolo.getId());
                        if (expr_simbol == null)
                            SemError("No se encontró el atributo o método en la clase relacionada");
                        // dentro de un objeto -> Parentesis izquierda.
                        if (la.kind == 19) {
                            if (expr_simbol.getTipo() != 'm')
                                SemError("Se esperaba un método");
                            c4 = expr_simbol.getTipoRetorno();
                            Get();
                            if (expr_simbol.getColaArgumentos() != null)
                                colaArgumento = expr_simbol.getColaArgumentos();
                            numargmetodo = expr_simbol.getNumArgMetodo();
                            numargmetodo_aux = numargmetodo;
                            aux = 0;
                            Argumentos();
                            Esperado(25);
                        } else
                            c4 = expr_simbol.getTipo();
                    // parentesis izquierda.
                    } else if (la.kind == 19) {
                        Get();
                        if (expr_simbol.getTipo() != 'm')
                            SemError("Se esperaba un método");
                        if (expr_simbol.getColaArgumentos() != null)
                            colaArgumento = expr_simbol.getColaArgumentos();
                        numargmetodo = expr_simbol.getNumArgMetodo();
                        numargmetodo_aux = numargmetodo;
                        aux = 0;
                        Argumentos();
                        c4 = expr_simbol.getTipoRetorno();
                        Esperado(25);
                    } else {
                        if (expr_simbol.getTipo() != 'v')
                            SemError("Se esperaba un vector");
                        Get();
                        char c_aux;
                        c_aux = Expresion();
                        if (c_aux != 'e')
                            SemError("Se esperaba un entero");
                        c4 = expr_simbol.getTipoEnVector();
                        Esperado(24);
                    }
                }
                break;
            }
        case 2:
            {
                // Aqui se generan temporales para enteros
                c4 = 'e';
                Get();
                break;
            }
        case 3:
            {
                c4 = 's';
                Get();
                break;
            }
        case 12:
            {
                c4 = 'b';
                Get();
                break;
            }
        case 7:
            {
                c4 = 'b';
                Get();
                break;
            }
        default:
            SynErr(51);
            break;
    }
    return c4;
}
