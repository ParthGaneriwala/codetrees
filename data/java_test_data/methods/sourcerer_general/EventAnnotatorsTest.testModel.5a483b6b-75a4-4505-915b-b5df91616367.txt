@Test
public void testModel() throws UIMAException {
    this.tokenBuilder.buildTokens(this.jCas, "He was thinking he would not have eaten yesterday.", "He was thinking he would not have eaten yesterday .", "PRP VBD VBG PRP MD RB VBD VBN RB .", "he was think he would not have eaten yesterday .");
    List<AnalysisEngineDescription> descs = Arrays.asList(EventAnnotator.FACTORY.getAnnotatorDescription(), EventTenseAnnotator.FACTORY.getAnnotatorDescription(), EventAspectAnnotator.FACTORY.getAnnotatorDescription(), EventClassAnnotator.FACTORY.getAnnotatorDescription(), EventPolarityAnnotator.FACTORY.getAnnotatorDescription(), EventModalityAnnotator.FACTORY.getAnnotatorDescription());
    for (AnalysisEngineDescription desc : descs) {
        AnalysisEngine engine = UIMAFramework.produceAnalysisEngine(desc);
        engine.process(this.jCas);
        engine.collectionProcessComplete();
    }
    Collection<Event> events = JCasUtil.select(jCas, Event.class);
    Assert.assertEquals(2, events.size());
    Iterator<Event> eventsIter = events.iterator();
    Event thinking = eventsIter.next();
    Assert.assertEquals("e1", thinking.getId());
    Assert.assertEquals("thinking", thinking.getCoveredText());
    Assert.assertEquals("PAST", thinking.getTense());
    // Currently gets this wrong: Assert.assertEquals("PROGRESSIVE", thinking.getAspect());
    Assert.assertEquals("I_STATE", thinking.getEventClass());
    Assert.assertEquals("POS", thinking.getPolarity());
    Assert.assertEquals("NONE", thinking.getModality());
    Event eaten = eventsIter.next();
    Assert.assertEquals("e2", eaten.getId());
    Assert.assertEquals("eaten", eaten.getCoveredText());
    Assert.assertEquals("PRESENT", eaten.getTense());
    Assert.assertEquals("PERFECTIVE", eaten.getAspect());
    Assert.assertEquals("OCCURRENCE", eaten.getEventClass());
    Assert.assertEquals("NEG", eaten.getPolarity());
    Assert.assertEquals("would", eaten.getModality());
}
