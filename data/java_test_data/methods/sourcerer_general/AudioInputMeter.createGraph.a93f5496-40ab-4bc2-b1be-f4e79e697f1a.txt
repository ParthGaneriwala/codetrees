public void createGraph() {
    javax.swing.JFrame f = new javax.swing.JFrame("dsj AudioInputMonitor");
    f.getContentPane().setLayout(new java.awt.BorderLayout());
    DSFilterInfo[][] dsi = DSCapture.queryDevices();
    graph = new DSCapture(DSFiltergraph.RENDER_NATIVE | DSFiltergraph.INIT_PAUSED, DSFilterInfo.doNotRender(), false, dsi[1][0], this);
    f.add("North", new SwingMovieController(graph));
    int[] audioProps = graph.getAudioProperties();
    System.out.println("Samplerate: " + audioProps[0] + "\n" + "SampleSize: " + audioProps[1] + "\n" + "Channels: " + audioProps[2]);
    DSFilter[] filters = graph.listFilters();
    for (int i = 0; i < filters.length; i++) System.out.println(filters[i]);
    /**
     * Although in a simple audio capture graph as build above, the capture filter
     * will almost certainly be the first filter in the returned array from listFilters(...), a real world
     * application should take better care of finding the right filters to insert
     * the sample access filter in between!
     */
    System.out.println("inserting between: " + filters[0].getName() + " & " + filters[1].getName());
    graph.insertSampleAccessFilter(filters[0], null, filters[1], 0);
    javax.swing.JPanel ctrls = new javax.swing.JPanel();
    ctrls.setLayout(new java.awt.GridLayout(0, 1));
    for (int i = CaptureDeviceControls.MASTER_VOL; i < CaptureDeviceControls.TREBLE; i++) {
        try {
            ctrls.add(((DSCapture) graph).getActiveAudioDevice().getControls().getController(i, 0, true));
        } catch (Exception ex) {
        }
    }
    javax.swing.JButton toFile = new javax.swing.JButton("to file");
    toFile.addActionListener(new java.awt.event.ActionListener() {

        public void actionPerformed(java.awt.event.ActionEvent e) {
            ((DSCapture) graph).setCaptureFile("monitorTest.wav", DSFilterInfo.doNotRender(), DSFilterInfo.doNotRender(), true);
            /**
             * setCaptureFile(..) will remove the filter, so you need to reinsert it, in case you want to keep monitoring.*
             */
            DSFilter[] filters = graph.listFilters();
            graph.insertSampleAccessFilter(filters[2], null, filters[3], 0);
            ((DSCapture) graph).record();
        }
    });
    f.getContentPane().add("Center", ctrls);
    f.getContentPane().add("South", toFile);
    f.pack();
    f.setVisible(true);
    /**
     * Don't do this at home. This demo relies on dsj closing and disposing off filtergraphs when the JVM exits. This is
     * OK for a "open graph, do something & exit" style demo, but real world applications should take care of calling
     * dispose() on filtergraphs they're done with themselves.
     */
    f.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    graph.play();
}
