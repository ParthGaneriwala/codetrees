private String ftoa(NumberFormat format) {
    ftoaBuf.setLength(0);
    if ((this.exponent < 0 && this.mantissa != 0)) {
        ftoaBuf.append("nan");
        return align(ftoaBuf, format);
    }
    if ((this.exponent < 0 && this.mantissa == 0)) {
        ftoaBuf.append((this.sign != 0) ? "-inf" : "inf");
        return align(ftoaBuf, format);
    }
    int digitsPerThousand;
    switch(format.base) {
        case 2:
            digitsPerThousand = 8;
            break;
        case 8:
            // Disable thousands separator
            digitsPerThousand = 1000;
            break;
        case 16:
            digitsPerThousand = 4;
            break;
        case 10:
        default:
            digitsPerThousand = 3;
            break;
    }
    if (format.thousand == 0)
        // Disable thousands separator
        digitsPerThousand = 1000;
    {
        tmp4.mantissa = this.mantissa;
        tmp4.exponent = this.exponent;
        tmp4.sign = this.sign;
    }
    ;
    int accurateDigits = tmp4.getDigits(ftoaDigits, format.base);
    if (format.base == 10 && (exponent > 0x4000003e || !isIntegral()))
        // Only display 16 digits for non-integers
        accurateDigits = 16;
    int precision;
    int pointPos = 0;
    do {
        // subtract 1 for decimal point
        int width = format.maxwidth - 1;
        int prefix = 0;
        if (format.base != 10)
            // want room for at least one "0" or "f/7/1"
            prefix = 1;
        else if ((tmp4.sign != 0))
            // subtract 1 for sign
            width--;
        boolean useExp = false;
        switch(format.fse) {
            case NumberFormat.FSE_SCI:
                precision = format.precision + 1;
                useExp = true;
                break;
            case NumberFormat.FSE_ENG:
                pointPos = floorMod(tmp4.exponent, 3);
                precision = format.precision + 1 + pointPos;
                useExp = true;
                break;
            case NumberFormat.FSE_FIX:
            case NumberFormat.FSE_NONE:
            default:
                precision = 1000;
                if (format.fse == NumberFormat.FSE_FIX)
                    precision = format.precision + 1;
                if (tmp4.exponent + 1 > width - (tmp4.exponent + prefix) / digitsPerThousand - prefix + (format.removePoint ? 1 : 0) || tmp4.exponent + 1 > accurateDigits || -tmp4.exponent >= width || -tmp4.exponent >= precision) {
                    useExp = true;
                } else {
                    pointPos = tmp4.exponent;
                    precision += tmp4.exponent;
                    if (tmp4.exponent > 0)
                        width -= (tmp4.exponent + prefix) / digitsPerThousand;
                    if (format.removePoint && tmp4.exponent == width - prefix) {
                        // Add 1 for the decimal point that will be removed
                        width++;
                    }
                }
                break;
        }
        if (prefix != 0 && pointPos >= 0)
            width -= prefix;
        ftoaExp.setLength(0);
        if (useExp) {
            ftoaExp.append('e');
            ftoaExp.append(tmp4.exponent - pointPos);
            width -= ftoaExp.length();
        }
        if (precision > accurateDigits)
            precision = accurateDigits;
        if (precision > width)
            precision = width;
        if (// In case of negative pointPos
        precision > width + pointPos)
            precision = width + pointPos;
        if (precision <= 0)
            precision = 1;
    } while (tmp4.carryWhenRounded(ftoaDigits, precision, format.base));
    tmp4.round(ftoaDigits, precision, format.base);
    // Start generating the string. First the sign
    if ((tmp4.sign != 0) && format.base == 10)
        ftoaBuf.append('-');
    // Save pointPos for hex/oct/bin prefixing with thousands-sep
    int pointPos2 = pointPos < 0 ? 0 : pointPos;
    // Add leading zeros (or f/7/1)
    char prefixChar = (format.base == 10 || (tmp4.sign == 0)) ? '0' : hexChar.charAt(format.base - 1);
    if (pointPos < 0) {
        ftoaBuf.append(prefixChar);
        ftoaBuf.append(format.point);
        while (pointPos < -1) {
            ftoaBuf.append(prefixChar);
            pointPos++;
        }
    }
    // Add fractional part
    for (int i = 0; i < precision; i++) {
        ftoaBuf.append(hexChar.charAt(ftoaDigits[i]));
        if (pointPos > 0 && pointPos % digitsPerThousand == 0)
            ftoaBuf.append(format.thousand);
        if (pointPos == 0)
            ftoaBuf.append(format.point);
        pointPos--;
    }
    if (format.fse == NumberFormat.FSE_NONE) {
        // Remove trailing zeros
        while (ftoaBuf.charAt(ftoaBuf.length() - 1) == '0') ftoaBuf.setLength(ftoaBuf.length() - 1);
    }
    if (format.removePoint) {
        // Remove trailing point
        if (ftoaBuf.charAt(ftoaBuf.length() - 1) == format.point)
            ftoaBuf.setLength(ftoaBuf.length() - 1);
    }
    // Add exponent
    ftoaBuf.append(ftoaExp);
    // In case hex/oct/bin number, prefix with 0's or f/7/1's
    if (format.base != 10) {
        while (ftoaBuf.length() < format.maxwidth) {
            pointPos2++;
            if (pointPos2 > 0 && pointPos2 % digitsPerThousand == 0)
                ftoaBuf.insert(0, format.thousand);
            if (ftoaBuf.length() < format.maxwidth)
                ftoaBuf.insert(0, prefixChar);
        }
        if (ftoaBuf.charAt(0) == format.thousand)
            ftoaBuf.deleteCharAt(0);
    }
    return align(ftoaBuf, format);
}
