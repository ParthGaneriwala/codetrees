public static Time[] getAnyBest(Collection<Group> all, int any) {
    Time[] best, secondBest;
    int number;
    secondBest = null;
    if (all.size() > 0) {
        Iterator<Group> it = all.iterator();
        // Content - all times of all athlets, who have to be in finding, on each lap
        TreeSet<Time>[] tS = null;
        Distance d = null;
        // Filling of tS
        while (it.hasNext()) {
            Group g = it.next();
            if (d == null)
                d = g.getDistance();
            else if (!d.equals(g.getDistance()))
                return null;
            else
                ;
            if (tS == null) {
                // if Set have not begined filling yet
                number = d.getNumberOfCP();
                tS = new TreeSet[number];
                secondBest = new Time[number];
            } else
                ;
            for (int i = 0; i < tS.length; i++) {
                HashSet<Time> hS = g.getTimesOnLap(i + 1);
                if (tS[i] == null)
                    tS[i] = new TreeSet<Time>();
                tS[i].addAll(hS);
            }
        }
        // If on first lap one or more times then do finding else set return value to null
        if (tS[0].size() >= 1) {
            for (int i = 0; i < tS.length; i++) {
                if (tS[i].size() >= any) {
                    if ((tS[i].first().getTimeInSeconds() != 0) || (tS[i].size() == any))
                        secondBest[i] = (Time) tS[i].toArray()[any - 1];
                    else if (tS[i].size() > any)
                        secondBest[i] = (Time) tS[i].toArray()[any];
                    else
                        secondBest[i] = (Time) tS[i].toArray()[tS[i].size() - 1];
                } else if (tS[0].size() >= 1) {
                    secondBest[i] = tS[i].last();
                } else
                    secondBest[i] = new Time(0, 2);
            }
        } else
            secondBest = null;
    }
    return secondBest;
}
