private void generateYieldPoint(Node node, boolean exprContext) {
    // save stack state
    int top = cfw.getStackTop();
    maxStack = maxStack > top ? maxStack : top;
    if (cfw.getStackTop() != 0) {
        generateGetGeneratorStackState();
        for (int i = 0; i < top; i++) {
            cfw.add(ByteCode.DUP_X1);
            cfw.add(ByteCode.SWAP);
            cfw.addLoadConstant(i);
            cfw.add(ByteCode.SWAP);
            cfw.add(ByteCode.AASTORE);
        }
        // pop the array object
        cfw.add(ByteCode.POP);
    }
    // generate the yield argument
    Node child = node.getFirstChild();
    if (child != null)
        generateExpression(child, node);
    else
        Codegen.pushUndefined(cfw);
    // change the resumption state
    int nextState = getNextGeneratorState(node);
    generateSetGeneratorResumptionPoint(nextState);
    boolean hasLocals = generateSaveLocals(node);
    cfw.add(ByteCode.ARETURN);
    generateCheckForThrowOrClose(getTargetLabel(node), hasLocals, nextState);
    // reconstruct the stack
    if (top != 0) {
        generateGetGeneratorStackState();
        for (int i = 0; i < top; i++) {
            cfw.add(ByteCode.DUP);
            cfw.addLoadConstant(top - i - 1);
            cfw.add(ByteCode.AALOAD);
            cfw.add(ByteCode.SWAP);
        }
        cfw.add(ByteCode.POP);
    }
    // load return value from yield
    if (exprContext) {
        cfw.addALoad(argsLocal);
    }
}
