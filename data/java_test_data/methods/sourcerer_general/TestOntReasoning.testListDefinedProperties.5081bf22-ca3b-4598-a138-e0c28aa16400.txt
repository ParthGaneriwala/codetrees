public void testListDefinedProperties() {
    OntModel m = ModelFactory.createOntologyModel(OntModelSpec.OWL_MEM_RULE_INF, null);
    // a simple class hierarchy  organism -> vertebrate -> mammal -> dog
    OntClass organism = m.createClass(NS + "Organism");
    OntClass vertebrate = m.createClass(NS + "Vertebrate");
    OntClass mammal = m.createClass(NS + "Mammal");
    OntClass dog = m.createClass(NS + "Dog");
    organism.addSubClass(vertebrate);
    vertebrate.addSubClass(mammal);
    mammal.addSubClass(dog);
    // hair as a covering
    OntClass covering = m.createClass(NS + "Covering");
    Individual hair = m.createIndividual(NS + "hair", covering);
    // various properties
    DatatypeProperty limbsCount = m.createDatatypeProperty(NS + "limbsCount");
    DatatypeProperty hasCovering = m.createDatatypeProperty(NS + "hasCovering");
    DatatypeProperty numYoung = m.createDatatypeProperty(NS + "numYoung");
    // vertebrates have limbs, mammals have live young
    limbsCount.addDomain(vertebrate);
    numYoung.addDomain(mammal);
    // mammals have-covering = hair
    Restriction r = m.createRestriction(hasCovering);
    r.convertToHasValueRestriction(hair);
    mammal.addSuperClass(r);
    iteratorTest(organism.listDeclaredProperties(), new Object[] { hasCovering });
    iteratorTest(vertebrate.listDeclaredProperties(), new Object[] { limbsCount, hasCovering });
    iteratorTest(mammal.listDeclaredProperties(), new Object[] { limbsCount, hasCovering, numYoung });
    iteratorTest(dog.listDeclaredProperties(), new Object[] { limbsCount, hasCovering, numYoung });
    iteratorTest(r.listDeclaredProperties(), new Object[] { hasCovering });
    iteratorTest(organism.listDeclaredProperties(true), new Object[] { hasCovering });
    iteratorTest(vertebrate.listDeclaredProperties(true), new Object[] { limbsCount });
    iteratorTest(mammal.listDeclaredProperties(true), new Object[] { numYoung });
    iteratorTest(dog.listDeclaredProperties(true), new Object[] {});
    iteratorTest(r.listDeclaredProperties(true), new Object[] { hasCovering });
    iteratorTest(organism.listDeclaredProperties(false), new Object[] { hasCovering });
    iteratorTest(vertebrate.listDeclaredProperties(false), new Object[] { hasCovering, limbsCount });
    iteratorTest(mammal.listDeclaredProperties(false), new Object[] { hasCovering, numYoung, limbsCount });
    iteratorTest(dog.listDeclaredProperties(false), new Object[] { hasCovering, numYoung, limbsCount });
    iteratorTest(r.listDeclaredProperties(false), new Object[] { hasCovering });
}
