@Override
protected void analyze() throws SQLException {
    Statement statement = _resultsDB.createStatement();
    // WHERE trialNum >= 112
    statement.execute("Select * from TrialResults");
    // ");
    ResultSet rs = statement.getResultSet();
    while (rs.next()) {
        // System.out.println(rs.getString("Item1") + "\t"
        // + rs.getString("ItemP"));
        SDTrial sdt = new SDTrial(rs, sameIsPicture);
        if (transferCount == tBlockSize) {
            transferBlockCorrect[tBlockIndex] /= transferCount / 100.0;
            transferSameBlockCorrect[tBlockIndex] /= tSameCount / 100.0;
            transferDiffBlockCorrect[tBlockIndex] /= tDiffCount / 100.0;
            transferSameBlockRT[tBlockIndex] /= tSameRTCount;
            transferDiffBlockRT[tBlockIndex] /= tDiffRTCount;
            tBlockIndex++;
            // System.out.println(100.0 * tSameCount / tBlockSize);
            transferCount = tSameCount = tDiffCount = tSameRTCount = tDiffRTCount = 0.0;
        }
        if (baselineCount == bBlockSize) {
            // System.out.println(100.0 * sameCount / 4.0);
            baselineBlockCorrect[bBlockIndex] /= baselineCount / 100.0;
            baselineBlockChooseSame[bBlockIndex] /= baselineCount / 100.0;
            baselineSameBlockCorrect[bBlockIndex] /= sameCount / 100.0;
            baselineDiffBlockCorrect[bBlockIndex] /= diffCount / 100.0;
            baselineSameBlockRT[bBlockIndex] /= sameRTCount;
            baselineDiffBlockRT[bBlockIndex] /= diffRTCount;
            baselineCount = sameCount = diffCount = 0.0;
            sameRTCount = diffRTCount = 0.0;
            bBlockIndex++;
        }
        if (sdt.isTransfer()) {
            transferCount++;
            transferBlockCorrect[tBlockIndex] += sdt.trialCorrectAsInt();
            if (sdt.getTrialType() == SDTrial.SAME) {
                tSameCount++;
                transferSameBlockCorrect[tBlockIndex] += sdt.trialCorrectAsInt();
                if (sdt.getResponseTime() < 10000) {
                    tSameRTCount++;
                    transferSameBlockRT[tBlockIndex] += sdt.getResponseTime();
                }
            } else {
                tDiffCount++;
                transferDiffBlockCorrect[tBlockIndex] += sdt.trialCorrectAsInt();
                if (sdt.getResponseTime() < 10000) {
                    tDiffRTCount++;
                    transferDiffBlockRT[tBlockIndex] += sdt.getResponseTime();
                }
            }
        } else {
            if (sdt.getResponse() == SDTrial.SAME) {
                baselineBlockChooseSame[bBlockIndex]++;
            }
            baselineCount++;
            baselineBlockCorrect[bBlockIndex] += sdt.trialCorrectAsInt();
            if (sdt.getTrialType() == SDTrial.SAME) {
                sameCount++;
                baselineSameBlockCorrect[bBlockIndex] += sdt.trialCorrectAsInt();
                if (sdt.getResponseTime() < 10000) {
                    sameRTCount++;
                    baselineSameBlockRT[bBlockIndex] += sdt.getResponseTime();
                }
            } else {
                diffCount++;
                baselineDiffBlockCorrect[bBlockIndex] += sdt.trialCorrectAsInt();
                if (sdt.getResponseTime() < 10000) {
                    diffRTCount++;
                    baselineDiffBlockRT[bBlockIndex] += sdt.getResponseTime();
                }
            }
        }
    }
    // we need to convert the last indices
    baselineBlockCorrect[bBlockIndex] /= baselineCount / 100.0;
    baselineBlockChooseSame[bBlockIndex] /= baselineCount / 100.0;
    baselineSameBlockCorrect[bBlockIndex] /= sameCount / 100.0;
    baselineDiffBlockCorrect[bBlockIndex] /= diffCount / 100.0;
    baselineSameBlockRT[bBlockIndex] /= sameRTCount++;
    baselineDiffBlockRT[bBlockIndex] /= diffRTCount++;
    if (transferCount > 0) {
        transferBlockCorrect[tBlockIndex] /= transferCount / 100.0;
        transferSameBlockCorrect[tBlockIndex] /= tSameCount / 100.0;
        transferDiffBlockCorrect[tBlockIndex] /= tDiffCount / 100.0;
        transferSameBlockRT[tBlockIndex] /= tSameRTCount;
        transferDiffBlockRT[tBlockIndex] /= tDiffRTCount;
    // System.out.println(100.0 * tSameCount / tBlockSize);
    }
}
