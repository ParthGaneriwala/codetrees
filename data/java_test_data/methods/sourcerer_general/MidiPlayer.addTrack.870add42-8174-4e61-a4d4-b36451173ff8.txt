public static void addTrack(Sequence s, int instrument, int tempo, char[] notes) throws InvalidMidiDataException {
    // Begin with a new track
    Track track = s.createTrack();
    // Set the instrument on channel 0
    ShortMessage sm = new ShortMessage();
    sm.setMessage(ShortMessage.PROGRAM_CHANGE, 0, instrument, 0);
    track.add(new MidiEvent(sm, 0));
    // current character in notes[] array
    int n = 0;
    // time in ticks for the composition
    int t = 0;
    // These values persist and apply to all notes 'till changed
    // default to quarter notes
    int notelength = 16;
    // default to middle volume
    int velocity = 64;
    // 60 is middle C. Adjusted up and down by octave
    int basekey = 60;
    // is the sustain pedal depressed?
    boolean sustain = false;
    // How many notes in current chord?
    int numnotes = 0;
    while (n < notes.length) {
        char c = notes[n++];
        if (c == '+')
            // increase octave
            basekey += 12;
        else if (c == '-')
            // decrease octave
            basekey -= 12;
        else if (c == '>')
            // increase volume;
            velocity += 16;
        else if (c == '<')
            // decrease volume;
            velocity -= 16;
        else if (c == '/') {
            char d = notes[n++];
            if (d == '2')
                // half note
                notelength = 32;
            else if (d == '4')
                // quarter note
                notelength = 16;
            else if (d == '8')
                // eighth note
                notelength = 8;
            else if (d == '3' && notes[n++] == '2')
                notelength = 2;
            else if (d == '6' && notes[n++] == '4')
                notelength = 1;
            else if (d == '1') {
                if (n < notes.length && notes[n] == '6')
                    // 1/16th note
                    notelength = 4;
                else
                    // whole note
                    notelength = 64;
            }
        } else if (c == 's') {
            sustain = !sustain;
            // Change the sustain setting for channel 0
            ShortMessage m = new ShortMessage();
            m.setMessage(ShortMessage.CONTROL_CHANGE, 0, DAMPER_PEDAL, sustain ? DAMPER_ON : DAMPER_OFF);
            track.add(new MidiEvent(m, t));
        } else if (c >= 'A' && c <= 'G') {
            int key = basekey + offsets[c - 'A'];
            if (n < notes.length) {
                if (notes[n] == 'b') {
                    // flat
                    key--;
                    n++;
                } else if (notes[n] == '#') {
                    // sharp
                    key++;
                    n++;
                }
            }
            addNote(track, t, notelength, key, velocity);
            numnotes++;
        } else if (c == ' ') {
            // But we ignore them unless they follow a note or notes.
            if (numnotes > 0) {
                t += notelength;
                numnotes = 0;
            }
        } else if (c == '.') {
            // note to be output (since they are never part of chords)
            if (numnotes > 0) {
                t += notelength;
                numnotes = 0;
            }
            // Now add additional rest time
            t += notelength;
        }
    }
}
