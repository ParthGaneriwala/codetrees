private void printAnalysis(JobHistory.Task[] tasks, Comparator<JobHistory.Task> cmp, String taskType, long avg, int showTasks) {
    Arrays.sort(tasks, cmp);
    JobHistory.Task min = tasks[tasks.length - 1];
    StringBuffer details = new StringBuffer();
    details.append("\nTime taken by best performing ");
    details.append(taskType).append(" task ");
    details.append(min.get(Keys.TASKID)).append(": ");
    if ("map".equals(taskType)) {
        details.append(StringUtils.formatTimeDiff(min.getLong(Keys.FINISH_TIME), min.getLong(Keys.START_TIME)));
    } else if ("shuffle".equals(taskType)) {
        details.append(StringUtils.formatTimeDiff(min.getLong(Keys.SHUFFLE_FINISHED), min.getLong(Keys.START_TIME)));
    } else {
        details.append(StringUtils.formatTimeDiff(min.getLong(Keys.FINISH_TIME), min.getLong(Keys.SHUFFLE_FINISHED)));
    }
    details.append("\nAverage time taken by ");
    details.append(taskType).append(" tasks: ");
    details.append(StringUtils.formatTimeDiff(avg, 0));
    details.append("\nWorse performing ");
    details.append(taskType).append(" tasks: ");
    details.append("\nTaskId\t\tTimetaken");
    System.out.println(details.toString());
    for (int i = 0; i < showTasks && i < tasks.length; i++) {
        details.setLength(0);
        details.append(tasks[i].get(Keys.TASKID)).append(" ");
        if ("map".equals(taskType)) {
            details.append(StringUtils.formatTimeDiff(tasks[i].getLong(Keys.FINISH_TIME), tasks[i].getLong(Keys.START_TIME)));
        } else if ("shuffle".equals(taskType)) {
            details.append(StringUtils.formatTimeDiff(tasks[i].getLong(Keys.SHUFFLE_FINISHED), tasks[i].getLong(Keys.START_TIME)));
        } else {
            details.append(StringUtils.formatTimeDiff(tasks[i].getLong(Keys.FINISH_TIME), tasks[i].getLong(Keys.SHUFFLE_FINISHED)));
        }
        System.out.println(details.toString());
    }
}
