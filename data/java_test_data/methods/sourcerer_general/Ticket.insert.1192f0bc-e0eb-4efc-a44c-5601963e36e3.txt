public boolean insert(Connection db) throws SQLException {
    if (!isValid(db)) {
        return false;
    }
    StringBuffer sql = new StringBuffer();
    boolean autoCommit = db.getAutoCommit();
    try {
        if (autoCommit) {
            db.setAutoCommit(false);
        }
        if (projectId > -1 && projectTicketCount == -1) {
            updateProjectTicketCount(db, projectId);
        }
        sql.append("INSERT INTO ticket (contact_id, problem, pri_code, " + "department_code, cat_code, scode, org_id, key_count, link_project_id, link_module_id, link_item_id, ");
        if (entered != null) {
            sql.append("entered, ");
        }
        if (modified != null) {
            sql.append("modified, ");
        }
        sql.append("enteredby, modifiedby ) ");
        sql.append("VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ");
        if (entered != null) {
            sql.append("?, ");
        }
        if (modified != null) {
            sql.append("?, ");
        }
        sql.append("?, ?) ");
        int i = 0;
        PreparedStatement pst = db.prepareStatement(sql.toString());
        DatabaseUtils.setInt(pst, ++i, this.getContactId());
        pst.setString(++i, this.getProblem());
        if (this.getPriorityCode() > 0) {
            pst.setInt(++i, this.getPriorityCode());
        } else {
            pst.setNull(++i, java.sql.Types.INTEGER);
        }
        if (this.getDepartmentCode() > 0) {
            pst.setInt(++i, this.getDepartmentCode());
        } else {
            pst.setNull(++i, java.sql.Types.INTEGER);
        }
        if (this.getCatCode() > 0) {
            pst.setInt(++i, this.getCatCode());
        } else {
            pst.setNull(++i, java.sql.Types.INTEGER);
        }
        if (this.getSeverityCode() > 0) {
            pst.setInt(++i, this.getSeverityCode());
        } else {
            pst.setNull(++i, java.sql.Types.INTEGER);
        }
        DatabaseUtils.setInt(pst, ++i, orgId);
        DatabaseUtils.setInt(pst, ++i, projectTicketCount);
        DatabaseUtils.setInt(pst, ++i, linkProjectId);
        DatabaseUtils.setInt(pst, ++i, linkModuleId);
        DatabaseUtils.setInt(pst, ++i, linkItemId);
        if (entered != null) {
            pst.setTimestamp(++i, entered);
        }
        if (modified != null) {
            pst.setTimestamp(++i, modified);
        }
        pst.setInt(++i, this.getEnteredBy());
        pst.setInt(++i, this.getModifiedBy());
        pst.execute();
        pst.close();
        id = DatabaseUtils.getCurrVal(db, "ticket_ticketid_seq", -1);
        // Update the rest of the fields
        if (this.getEntered() == null) {
            this.update(db);
        } else {
            this.update(db, true);
        }
        if (projectId > -1) {
            insertProjectLink(db, projectId);
        }
        if (autoCommit) {
            db.commit();
        }
    } catch (SQLException e) {
        if (autoCommit) {
            db.rollback();
        }
        throw new SQLException(e.getMessage());
    } finally {
        if (autoCommit) {
            db.setAutoCommit(true);
        }
    }
    return true;
}
