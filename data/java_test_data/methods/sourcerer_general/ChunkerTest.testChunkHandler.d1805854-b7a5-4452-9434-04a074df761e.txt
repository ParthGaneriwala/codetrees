@Test
public void testChunkHandler() throws UIMAException {
    AnalysisEngine engine = AnalysisEngineFactory.createPrimitive(TestChunkerAnnotator.class, typeSystemDescription, Chunker.PARAM_LABELED_ANNOTATION_CLASS_NAME, Token.class.getName(), Chunker.PARAM_SEQUENCE_CLASS_NAME, Sentence.class.getName(), Chunker.PARAM_CHUNK_LABELER_CLASS_NAME, DefaultChunkLabeler.class.getName(), Chunker.PARAM_CHUNKER_FEATURE_EXTRACTOR_CLASS_NAME, TestFeatureExtractor.class.getName(), ChunkLabeler_ImplBase.PARAM_CHUNK_ANNOTATION_CLASS_NAME, Chunk.class.getName(), DefaultChunkLabeler.PARAM_CHUNK_LABEL_FEATURE_NAME, "chunkType", CleartkSequenceAnnotator.PARAM_DATA_WRITER_FACTORY_CLASS_NAME, PublicFieldSequenceDataWriter.StringFactory.class.getName());
    TestChunkerAnnotator copy = new TestChunkerAnnotator();
    copy.initialize(engine.getUimaContext());
    ChunkLabeler chunkLabeler = copy.getChunkLabeler();
    String text = "What if we built a rocket ship made of cheese?" + "We could fly it to the moon for repairs";
    tokenBuilder.buildTokens(jCas, text, "What if we built a rocket ship made of cheese ? We could fly it to the moon for repairs", "A B C D E F G H I J K L M N O P Q R S T U");
    List<Token> tokens = new ArrayList<Token>(JCasUtil.select(jCas, Token.class));
    for (int i = 0; i < tokens.size(); i++) {
        Token token1 = tokens.get(i);
        Token token2 = tokens.get(++i);
        Chunk chunk = new Chunk(jCas, token1.getBegin(), token2.getEnd());
        chunk.setChunkType("chunk" + i);
        chunk.addToIndexes();
    }
    copy.process(jCas);
    Token token = tokens.get(0);
    assertEquals("B-chunk1", chunkLabeler.getLabel(token));
    token = tokens.get(1);
    assertEquals("I-chunk1", chunkLabeler.getLabel(token));
    token = tokens.get(2);
    assertEquals("B-chunk3", chunkLabeler.getLabel(token));
    token = tokens.get(3);
    assertEquals("I-chunk3", chunkLabeler.getLabel(token));
    token = tokens.get(4);
    assertEquals("B-chunk5", chunkLabeler.getLabel(token));
    token = tokens.get(5);
    assertEquals("I-chunk5", chunkLabeler.getLabel(token));
    Collection<Chunk> chunks = JCasUtil.select(jCas, Chunk.class);
    assertEquals(10, chunks.size());
    // create list copy to avoid concurrent modification
    for (Chunk chunk : new ArrayList<Chunk>(chunks)) {
        chunk.removeFromIndexes();
    }
    chunks = JCasUtil.select(jCas, Chunk.class);
    assertEquals(0, chunks.size());
    engine = AnalysisEngineFactory.createPrimitive(TestChunkerAnnotator2.class, typeSystemDescription, Chunker.PARAM_LABELED_ANNOTATION_CLASS_NAME, Token.class.getName(), Chunker.PARAM_SEQUENCE_CLASS_NAME, Sentence.class.getName(), Chunker.PARAM_CHUNK_LABELER_CLASS_NAME, DefaultChunkLabeler.class.getName(), Chunker.PARAM_CHUNKER_FEATURE_EXTRACTOR_CLASS_NAME, TestFeatureExtractor.class.getName(), ChunkLabeler_ImplBase.PARAM_CHUNK_ANNOTATION_CLASS_NAME, Chunk.class.getName(), DefaultChunkLabeler.PARAM_CHUNK_LABEL_FEATURE_NAME, "chunkType", GenericJarClassifierFactory.PARAM_CLASSIFIER_JAR_PATH, "example/pos/model/model.jar");
    InitializableFactory.initialize(chunkLabeler, engine.getUimaContext());
    engine.process(jCas);
    chunks = JCasUtil.select(jCas, Chunk.class);
    assertEquals(6, chunks.size());
    Iterator<Chunk> chunksIter = chunks.iterator();
    Chunk chunk = chunksIter.next();
    assertEquals("What if we", chunk.getCoveredText());
    assertEquals("1", chunk.getChunkType());
    chunk = chunksIter.next();
    assertEquals("rocket ship", chunk.getCoveredText());
    assertEquals("nice", chunk.getChunkType());
    chunk = chunksIter.next();
    assertEquals("made", chunk.getCoveredText());
    assertEquals("nice", chunk.getChunkType());
    chunk = chunksIter.next();
    assertEquals("of", chunk.getCoveredText());
    assertEquals("twice", chunk.getChunkType());
    chunk = chunksIter.next();
    assertEquals("?", chunk.getCoveredText());
    assertEquals("twice", chunk.getChunkType());
    chunk = chunksIter.next();
    assertEquals("We could", chunk.getCoveredText());
    assertEquals("2", chunk.getChunkType());
}
