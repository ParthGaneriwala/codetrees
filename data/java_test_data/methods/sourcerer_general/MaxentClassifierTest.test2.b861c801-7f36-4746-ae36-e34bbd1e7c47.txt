@Test
public void test2() throws Exception {
    AnalysisEngine dataWriterAnnotator = AnalysisEngineFactory.createPrimitive(Test2Annotator.class, typeSystemDescription, DirectoryDataWriterFactory.PARAM_OUTPUT_DIRECTORY, outputDirectoryName, CleartkAnnotator.PARAM_DATA_WRITER_FACTORY_CLASS_NAME, DefaultMaxentDataWriterFactory.class.getName(), MaxentDataWriterFactory_ImplBase.PARAM_COMPRESS, false);
    dataWriterAnnotator.process(jCas);
    dataWriterAnnotator.collectionProcessComplete();
    File trainFile = new MaxentClassifierBuilder().getTrainingDataFile(this.outputDirectory);
    BufferedReader reader = new BufferedReader(new FileReader(trainFile));
    reader.readLine();
    reader.close();
    HideOutput hider = new HideOutput();
    Train.main(outputDirectoryName + "/", "10", "1");
    hider.restoreOutput();
    MaxentClassifierBuilder builder = new MaxentClassifierBuilder();
    MaxentClassifier classifier = builder.loadClassifierFromTrainingDirectory(this.outputDirectory);
    List<Feature> features1 = createInstance("B-GENE", "Word_pol LCWord_pol CapitalType_ALL_LOWERCASE L0_( L0_TypePath_Pos_-LRB- L0_TypePath_Stem_( L1_I L1_TypePath_Pos_PRP L1_TypePath_Stem_I R0_I R0_TypePath_Pos_PRP R0_TypePath_Stem_I R1_) R1_TypePath_Pos_-RRB- R1_TypePath_Stem_) TypePath_Pos_NN TypePath_Stem_pol PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_I-GENE Gazetteer_entrez_genes.txt").getFeatures();
    String classification = classifier.classify(features1);
    assertEquals("B-GENE", classification);
    List<Feature> features2 = createInstance("O", "Word_cells LCWord_cells CapitalType_ALL_LOWERCASE L0_3T6 L0_TypePath_Pos_CD L0_TypePath_Stem_3T6 L1_into L1_TypePath_Pos_IN L1_TypePath_Stem_into R0_. R0_TypePath_Pos_. R0_TypePath_Stem_. R1OOB1 TypePath_Pos_NNS TypePath_Stem_cell PrevNEMTokenLabel_L0_O PrevNEMTokenLabel_L1_O").getFeatures();
    classification = classifier.classify(features2);
    assertEquals("O", classification);
    ScoredOutcome<String> scoredValue = classifier.score(features1, 1).get(0);
    assertEquals("B-GENE", scoredValue.getOutcome());
    assertTrue(scoredValue.getScore() <= 1.0f);
    assertTrue(scoredValue.getScore() >= 0.0f);
    scoredValue = classifier.score(features2, 1).get(0);
    assertEquals("O", scoredValue.getOutcome());
    assertTrue(scoredValue.getScore() <= 1.0f);
    assertTrue(scoredValue.getScore() >= 0.0f);
    List<ScoredOutcome<String>> scoredValues = classifier.score(features1, 4);
    assertEquals(3, scoredValues.size());
    scoredValue = scoredValues.get(0);
    assertEquals("B-GENE", scoredValue.getOutcome());
    assertTrue(scoredValue.getScore() <= 1.0f);
    assertTrue(scoredValue.getScore() >= 0.0f);
    scoredValue = scoredValues.get(1);
    assertEquals("O", scoredValue.getOutcome());
    assertTrue(scoredValue.getScore() <= 1.0f);
    assertTrue(scoredValue.getScore() >= 0.0f);
    scoredValue = scoredValues.get(2);
    assertEquals("I-GENE", scoredValue.getOutcome());
    assertTrue(scoredValue.getScore() <= 1.0f);
    assertTrue(scoredValue.getScore() >= 0.0f);
    scoredValues = classifier.score(features1, 2);
    assertEquals(2, scoredValues.size());
    hider = new HideOutput();
    MaxentEval.main(new String[] { outputDirectoryName + "/training-data.maxent.bin.gz", outputDirectoryName + "/training-data.maxent" });
    hider.restoreOutput();
    AnalysisEngine classifierAnnotator = AnalysisEngineFactory.createPrimitive(Test2Annotator.class, typeSystemDescription, GenericJarClassifierFactory.PARAM_CLASSIFIER_JAR_PATH, outputDirectoryName + "/model.jar");
    jCas.reset();
    classifierAnnotator.process(jCas);
    classifierAnnotator.collectionProcessComplete();
}
