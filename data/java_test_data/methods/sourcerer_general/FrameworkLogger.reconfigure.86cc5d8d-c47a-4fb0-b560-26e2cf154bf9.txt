static void reconfigure() {
    Class log4jLoggerClass = null;
    loggerInstances.clear();
    try {
        log4jLoggerClass = Class.forName("org.apache.log4j.Logger");
    } catch (Exception e) {
        log4jLoggerClass = null;
    }
    if (log4jLoggerClass == null)
        try {
            log4jGetLogger = null;
            log4jLogMethod = null;
            LogManager lm = LogManager.getLogManager();
            if (haveLoadedOurDefault || isDefaultJdkConfig()) {
                haveLoadedOurDefault = true;
                consoleHandler.setFormatter(new BasicTextJdkLogFormatter(false));
                consoleHandler.setLevel(Level.INFO);
                lm.readConfiguration(FrameworkLogger.class.getResourceAsStream("/org/hsqldb/resources/jdklogging-default.properties"));
                Logger cmdlineLogger = Logger.getLogger("org.hsqldb.cmdline");
                cmdlineLogger.addHandler(consoleHandler);
                cmdlineLogger.setUseParentHandlers(false);
            } else {
                // Do not intervene.  Use JDK logging exactly as configured by
                // user.
                lm.readConfiguration();
            // The only bad thing about doing this is that if the app has
            // programmatically changed the logging config after starting
            // the program but before using FrameworkLogger, we will
            // clobber those customizations.
            }
        } catch (Exception e) {
            throw new RuntimeException("<clinit> failure initializing JDK logging system", e);
        }
    else
        try {
            Method log4jToLevel = Class.forName("org.apache.log4j.Level").getMethod("toLevel", new Class[] { String.class });
            jdkToLog4jLevels.put(Level.ALL, log4jToLevel.invoke(null, new Object[] { "ALL" }));
            jdkToLog4jLevels.put(Level.FINER, log4jToLevel.invoke(null, new Object[] { "DEBUG" }));
            jdkToLog4jLevels.put(Level.WARNING, log4jToLevel.invoke(null, new Object[] { "ERROR" }));
            jdkToLog4jLevels.put(Level.SEVERE, log4jToLevel.invoke(null, new Object[] { "FATAL" }));
            jdkToLog4jLevels.put(Level.INFO, log4jToLevel.invoke(null, new Object[] { "INFO" }));
            jdkToLog4jLevels.put(Level.OFF, log4jToLevel.invoke(null, new Object[] { "OFF" }));
            jdkToLog4jLevels.put(Level.FINEST, log4jToLevel.invoke(null, new Object[] { "TRACE" }));
            jdkToLog4jLevels.put(Level.WARNING, log4jToLevel.invoke(null, new Object[] { "WARN" }));
            log4jLogMethod = log4jLoggerClass.getMethod("log", new Class[] { String.class, Class.forName("org.apache.log4j.Priority"), Object.class, Throwable.class });
            log4jGetLogger = log4jLoggerClass.getMethod("getLogger", new Class[] { String.class });
        // This last object is what we toggle on to generate either
        // Log4j or Jdk Logger objects (to wrap).
        } catch (Exception e) {
            throw new RuntimeException("<clinit> failure instantiating present Log4j system", e);
        }
}
