private void mntAnalizarWidgetSelected(SelectionEvent evt) {
    try {
        if (code != null) {
            if (lstErrores.getItems().length > 0)
                lstErrores.removeAll();
            if (lstTokens.getItems().length > 0)
                lstTokens.removeAll();
            if (lstTS.getItems().length > 0)
                lstTS.removeAll();
            if (lstDeclaraciones.getItems().length > 0)
                lstDeclaraciones.removeAll();
            if (lstTercetos.getItems().length > 0)
                lstTercetos.removeAll();
            this.txtAssembler.setText("");
            lblStatusBar.setText("Analizando...");
            progressBar1.setMaximum(4);
            progressBar1.setSelection(1);
            progressBar1.update();
            Thread.sleep(100);
            // AnalizadorLexico AnalLexer = new AnalizadorLexico(code);
            // Token t =  new Token();
            // while ((t = AnalLexer.getNextToken()) != null){
            // lstTokens.add(t.getID()+"  "+t.getValor());
            // }
            // TablaSimbolos TS = AnalLexer.getTablaSimbolos();
            // while(TS.hasMoreElement()){
            // String valor = TS.nextElement();
            // lstTS.add(TS.getId(valor)+"  "+valor);
            // }
            AnalizadorSintactico analizador = new AnalizadorSintactico(code);
            analizador.analizar();
            Iterator<String> it = analizador.getDeclaraciones().iterator();
            while (it.hasNext()) {
                String str = it.next();
                lstDeclaraciones.add(str);
            }
            progressBar1.setSelection(2);
            progressBar1.update();
            Thread.sleep(200);
            Iterator<Error> iterador = analizador.getListErrores().iterator();
            while (iterador.hasNext()) {
                Error e = iterador.next();
                lstErrores.add("Linea: " + e.getLinea() + "  " + e.getMensaje() + " " + e.getValor());
            }
            progressBar1.setSelection(3);
            progressBar1.update();
            Thread.sleep(200);
            TablaSimbolos TS = analizador.getTablaSimbolos();
            while (TS.hasMoreElement()) {
                String valor = TS.nextElement();
                String tipo = TS.getTipo(valor);
                if (tipo != null) {
                    if (TS.getId(valor).equals("Arreglo")) {
                        lstTS.add(TS.getId(valor) + " de tipo " + tipo + ": " + valor + " Limites:[" + TS.getLimiteInferior(valor) + "-" + TS.getLimiteSuperior(valor) + "]");
                    } else
                        lstTS.add(TS.getId(valor) + " de tipo " + tipo + ": " + valor);
                } else {
                    lstTS.add(TS.getId(valor) + ": " + valor);
                }
            }
            progressBar1.setSelection(4);
            progressBar1.update();
            Thread.sleep(100);
            AnalizadorLexico AnalLexer = new AnalizadorLexico(code);
            Token t = new Token();
            while ((t = AnalLexer.getNextToken()) != null) {
                lstTokens.add(t.getID() + "  " + t.getValor());
            }
            Iterator<Terceto> i = analizador.getTercetos().iterator();
            while (i.hasNext()) {
                Terceto terceto = i.next();
                lstTercetos.add("[" + terceto.getID() + "] " + " (" + terceto.getOperacion() + ", " + terceto.getOperador1() + ", " + terceto.getOperador2() + ")");
            }
            AssemblerGenerator AGenerator;
            if (lstErrores.getItems().length > 0)
                this.txtAssembler.append("Errores en el c�digo. No se gener� assembler.");
            else {
                AGenerator = new AssemblerGenerator(TS, analizador.getTercetos());
                displayAssembler(AGenerator.getAssembler());
                this.txtAssembler.setSelection(0, 0);
                Files.saveAssembler(AGenerator.getAssembler());
            }
            lblStatusBar.setText("An�lisis Completo.");
        } else
            lblStatusBar.setText("Cargar el c�digo a analizar.");
    } catch (InterruptedException e1) {
        // TODO Auto-generated catch block
        e1.printStackTrace();
    }
}
