public String executeCommandProjectList(ActionContext context) {
    setMaximized(context);
    if (getUser(context).getId() < 0) {
        return "PermissionError";
    }
    Connection db = null;
    try {
        db = getConnection(context);
        // PagedList Info
        ProjectList projects = new ProjectList();
        PagedListInfo projectListInfo = this.getPagedListInfo(context, "projectListInfo");
        projectListInfo.setLink(context, ctx(context) + "/ProjectManagement.do?command=ProjectList");
        if (projectListInfo.getListView() == null) {
            projectListInfo.setItemsPerPage(0);
            // My open projects
            projectListInfo.setListView("open");
            // Categories
            projectListInfo.addFilter(1, "-1");
        }
        projects.setPagedListInfo(projectListInfo);
        // Project Info
        projects.setGroupId(getUser(context).getGroupId());
        projects.setProjectsForUser(getUserId(context));
        projects.setIncludeGuestProjects(false);
        projects.setPortalState(Constants.FALSE);
        // projects.setUserRange(this.getUserRange(context));
        if (projectListInfo.getListView().equals("open")) {
            projects.setOpenProjectsOnly(true);
        } else if (projectListInfo.getListView().equals("closed")) {
            projects.setClosedProjectsOnly(true);
        } else if (projectListInfo.getListView().equals("recent")) {
            projects.setDaysLastAccessed(7);
        }
        projects.setInvitationAcceptedOnly(true);
        projects.setBuildOverallIssues(true);
        // projects.setBuildPermissions(true);
        projects.setCategoryId(projectListInfo.getFilterValue("listFilter1"));
        projects.buildList(db);
        context.getRequest().setAttribute("projectList", projects);
        // Load the progress
        HashMap<Integer, RequirementList> projectRequirementsMap = new HashMap<Integer, RequirementList>();
        for (Project thisProject : projects) {
            RequirementList requirementList = new RequirementList();
            requirementList.setProjectId(thisProject.getId());
            requirementList.buildList(db);
            requirementList.buildPlanActivityCounts(db);
            projectRequirementsMap.put(thisProject.getId(), requirementList);
        }
        context.getRequest().setAttribute("projectRequirementsMap", projectRequirementsMap);
        // Prepare the list of categories to display, based on categories used
        ProjectCategoryList categoryList = new ProjectCategoryList();
        categoryList.setCategoriesForProjectUser(getUserId(context));
        categoryList.setIncludeId(projectListInfo.getFilterValue("listFilter1"));
        categoryList.setTopLevelOnly(true);
        categoryList.buildList(db);
        HtmlSelect thisSelect = categoryList.getHtmlSelect();
        thisSelect.addItem(-1, "All Categories", 0);
        context.getRequest().setAttribute("projectCategoryList", thisSelect);
    } catch (Exception errorMessage) {
        context.getRequest().setAttribute("Error", errorMessage);
        return ("SystemError");
    } finally {
        this.freeConnection(context, db);
    }
    return ("ProjectListOK");
}
