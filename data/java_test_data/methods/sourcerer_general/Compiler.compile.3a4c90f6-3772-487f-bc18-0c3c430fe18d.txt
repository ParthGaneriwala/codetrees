private static void compile(String filename) {
    try {
        frame = new JouetteFrame();
        in = new File(filename);
        out = null;
        Reader io;
        io = new FileReader(in);
        Parser p = new Parser(io);
        Program prog = p.Program();
        if (error.Error.getInstance().hasErro()) {
            System.out.println("Compilacao abortada!!!");
            error.Error.getInstance().print();
        } else {
            table = new SymbolTableVisitor().buildSymbolTable(prog);
            checkType = new CheckType(table);
            checkType.visit(prog);
            if (error.Error.getInstance().hasErro()) {
                System.out.println("Compilacao abortada!!!");
                error.Error.getInstance().print();
            } else {
                translate = new Translate(table, frame);
                translate.visit(prog);
                FragList frags = translate.getFragList();
                Codegen cg = new Codegen(frame);
                InstrList inst = frame.codegen(Canonlize.generateCode(Canonlize.generateCode(frags)));
                AssemFlowGraph graph = new AssemFlowGraph(inst);
                LivenessAnaliser liveness = new LivenessAnaliser(graph);
                InterferenceGraph inGraph = new InterferenceGraph(liveness);
                RegisterAlocator alocator = new RegisterAlocator(inGraph);
                // maquina com  6 registradores
                map = alocator.mapTempToReg(6);
                out = new File(getFileName(filename) + ".pm");
                emitInstr(out, alocator.g.liveness.g.instrs);
                System.out.println("Compilacao completa com sucesso");
            }
        }
    } catch (FileNotFoundException e) {
        System.out.println("Impossivel abrir o arquivo, entre com o path novamente");
    }
}
