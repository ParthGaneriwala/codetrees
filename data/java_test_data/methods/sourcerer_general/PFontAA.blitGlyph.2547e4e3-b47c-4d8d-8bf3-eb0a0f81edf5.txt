// -------- Methods to process the bitmap
// Copy a glyph into buf, starting at the specified byte offset.
// The width of the buffer is given in span.
void blitGlyph(int num, int[] buf, int bufoffset, int span) {
    if (num == defaultBitmap) {
        return;
    }
    boolean msb_bitorder = msb_bit_order(bitmap_format);
    boolean msb_byteorder = msb_byte_order(bitmap_format);
    int glyphpad = glyph_pad(bitmap_format);
    int scanunit = scan_unit(bitmap_format);
    int bitflip = msb_bit_order(bitmap_format) ? 7 : 0;
    int byteflip = (msb_bit_order(bitmap_format) == msb_byte_order(bitmap_format)) ? 0 : (scan_unit(bitmap_format) - 1);
    int height = origMetrics[num].ascent + origMetrics[num].descent;
    int width = -origMetrics[num].leftSideBearing + origMetrics[num].rightSideBearing;
    if (height < 0 || width < 0) {
        System.out.println("Negative height/width for " + num);
        return;
    }
    int offset = charInfo[num].offset;
    int stride = ((width + 7) >> 3);
    int w2 = divide2(width);
    int h2 = divide2(height);
    int[] tmpbuf = new int[w2 * h2];
    stride = (stride + glyphpad - 1) & ~(glyphpad - 1);
    for (int i = 0; i < height; i++) {
        for (int j = 0; j < width; j++) {
            int bit_pos = (j & 7) ^ bitflip;
            int byte_pos = j >> 3;
            if ((bits[offset + ((byte_pos + i * stride) ^ byteflip)] & (1 << bit_pos)) != 0) {
                tmpbuf[(i / 2) * w2 + j / 2]++;
            }
        }
    }
    for (int i = 0; i < h2; i++) {
        for (int j = 0; j < w2; j++) {
            int pixel = tmpbuf[i * w2 + j];
            if (pixel > 0) {
                buf[bufoffset + i * span + j] = fgFracs[pixel];
            }
        }
    }
}
