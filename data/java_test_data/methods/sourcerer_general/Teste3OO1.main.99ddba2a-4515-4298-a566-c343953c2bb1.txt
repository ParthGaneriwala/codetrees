public static void main(String[] args) {
    Id valor = new Id("valor");
    Id idIncrementa = new Id("incrementa");
    Id idPrint = new Id("print");
    Id idThis = new Id("this");
    Id idValor = new Id("valor");
    Id idVarContador = new Id("cont");
    Id idContador = new Id("Contador");
    Valor int1 = new ValorInteiro(1);
    Valor int2 = new ValorInteiro(2);
    ListaDeclaracaoParametro parVazios = new ListaDeclaracaoParametro();
    ListaExpressao parReaisVazios = new ListaExpressao();
    Tipo tipoInteiro = new TipoPrimitivo(TipoPrimitivo.INTEIRO);
    DecVariavel atributo = new SimplesDecVariavel(tipoInteiro, valor, int1);
    AcessoAtributoId thisValor = new AcessoAtributoId(idThis, idValor);
    Expressao soma = new ExpSoma(thisValor, int1);
    Atribuicao atribuicao = new Atribuicao(thisValor, soma);
    Comando write = new Write(thisValor);
    DecProcedimento incrementa = new DecProcedimentoSimples(idIncrementa, parVazios, atribuicao);
    DecProcedimento print = new DecProcedimentoSimples(idPrint, parVazios, write);
    DecProcedimento procedimentosContador = new DecProcedimentoComposta(incrementa, print);
    DecClasse classeContador = new DecClasseSimples(idContador, atributo, procedimentosContador);
    // comandos para a main
    Tipo tipoContador = new TipoClasse(idContador);
    DecVariavel declaracaoVarContador = new DecVariavelObjeto(tipoContador, idVarContador, idContador);
    ChamadaMetodo chamadaIncrementa = new ChamadaMetodo(idVarContador, idIncrementa, parReaisVazios);
    ChamadaMetodo chamadaPrint = new ChamadaMetodo(idVarContador, idPrint, parReaisVazios);
    Comando comandosMain = new Sequencial(chamadaIncrementa, chamadaPrint);
    Comando main = new ComDeclaracao(declaracaoVarContador, comandosMain);
    Programa prg = new Programa(classeContador, main);
    try {
        if (prg.checaTipo(new ContextoCompilacaoOO1(new ListaValor()))) {
            System.out.println(prg.executar(new ContextoExecucaoOO1(new ListaValor())));
        } else {
            System.out.println("Erro de tipo!");
        }
    } catch (VariavelNaoDeclaradaException e) {
        System.out.println("Alguma variavel nao declarada foi referenciada!" + e.toString());
    } catch (EntradaNaoFornecidaException e) {
        System.out.println("Entrada nao fornecida" + e.toString());
    } catch (VariavelJaDeclaradaException e) {
        System.out.println("Valores de Entrada ja Declarados" + e.toString());
    } catch (ClasseNaoDeclaradaException e) {
        System.out.println("Falta declarar a classe!" + e.toString());
    } catch (ClasseJaDeclaradaException e) {
        System.out.println("Classe ja Declarada" + e.toString());
    } catch (ObjetoJaDeclaradoException e) {
        System.out.println("Objeto de Entrada j� Declarados!" + e.toString());
    } catch (ObjetoNaoDeclaradoException e) {
        System.out.println("Falta fornecer o Objeto de Entrada!" + e.toString());
    } catch (ProcedimentoJaDeclaradoException e) {
        System.out.println("Metodos j� Declarados!" + e.toString());
    } catch (ProcedimentoNaoDeclaradoException e) {
        System.out.println("Falta fornecer algum Metodo!" + e.toString());
    } catch (EntradaInvalidaException e) {
        System.out.println(e.toString());
    }
}
