private static int rec(int i, int j) throws IOException, InterruptedException, ArrayIndexOutOfBoundsException {
    currentTable.add((char) posTable.getChar(i), (char) posTable.getPossibility(i, j));
    if (posTable.getAmount() > i + 1) {
        if (posTable.getLine(i + 1) > 0) {
            for (int k = 0; k < posTable.getLine(i + 1); k++) {
                char ch = (char) posTable.getPossibility(i + 1, k);
                if (currentTable.getLetter1(ch) == -1) {
                    rec(i + 1, k);
                    currentTable.removeLast();
                    if (stopFlag) {
                        return STOPPED;
                    }
                }
            }
        // If PossibilityTable has Empty Lines
        } else {
            System.out.println("Doesn't any variants for encrypt\n" + "(PossibilityTable has empty lines)\n" + "The reason may be failure combination of etalonStatistic and encryptedStatistic");
        }
    // ChangeTable completed - we have one more variant
    } else {
        counter++;
        // Print COMPLETED WORK
        if ((counter * 100 / allWork) > percent) {
            percent = (int) (counter * 100 / allWork);
            System.out.println("Completed work: " + percent + "%");
            if (percent != 0) {
                IModel model = Model.getInstance();
                model.refresh(Model.ATTACK_JDIALOG);
            }
        }
        currentBigram.transpose(EncryptBiFrec, currentTable);
        double biPenalty = BigramFrequency.compare(biStandart, currentBigram);
        if (biPenalty != -1 || trueCounter == 0) {
            // DECRYPT by ChangeTable and ANALYSE resulting text
            MonoCipher.getInstance().decrypt(inFileName, outFileName + counter, currentTable);
            int penalty = Analyzator.analyze(outFileName + counter);
            if (trueCounter == 0) {
                trueKey = currentTable.clone();
                trueCounter = counter;
            // System.out.println(trueKey.toString());
            }
            // Penalty is not very big, perhaps it is TRUE variant
            if ((penalty < minPenalty && penalty != -1)) {
                trueKey = currentTable.clone();
                minPenalty = penalty;
                Analyzator.setMinPenalty(penalty);
                minBiPenalty = biPenalty;
                Analyzator.setMinBiPenalty(biPenalty);
                File f = new File(outFileName + trueCounter);
                f.delete();
                trueCounter = counter;
            } else {
                if (counter != 1) {
                    File f = new File(outFileName + counter);
                    f.delete();
                }
            }
        }
        if (stopFlag) {
            return STOPPED;
        }
        synchronized (AttackJDialog.stopLock) {
            if (pauseFlag) {
                AttackJDialog.stopLock.wait();
            }
        }
    }
    return SUCCESSFUL;
}
