private void evenOut(DomNode node) {
    TreeAlgorithmData data = (TreeAlgorithmData) (node.data);
    DomNode left_most = data.leftChild;
    DomNode neighbor = ((TreeAlgorithmData) left_most.data).leftNeighbor;
    int compare_depth = 1;
    while (left_most != null && neighbor != null) {
        double left_mod_sum = 0.0;
        double right_mod_sum = 0.0;
        DomNode ancestor_leftmost = left_most;
        DomNode ancestor_neighbor = neighbor;
        int i;
        for (i = 0; i < compare_depth; i++) {
            ancestor_leftmost = ((TreeAlgorithmData) ancestor_leftmost.data).parent;
            ancestor_neighbor = ((TreeAlgorithmData) ancestor_neighbor.data).parent;
            right_mod_sum += ((TreeAlgorithmData) ancestor_leftmost.data).modifier;
            left_mod_sum += ((TreeAlgorithmData) ancestor_neighbor.data).modifier;
        }
        double move_distance;
        if (rootOrient_ == 'd' || rootOrient_ == 'u')
            move_distance = ((TreeAlgorithmData) neighbor.data).prelim + left_mod_sum + subtreeSeparation_ + (left_most.getBoundingBox().width + neighbor.getBoundingBox().width) / 2.0 - ((TreeAlgorithmData) left_most.data).prelim - right_mod_sum;
        else
            move_distance = ((TreeAlgorithmData) neighbor.data).prelim + left_mod_sum + subtreeSeparation_ + (left_most.getBoundingBox().height + neighbor.getBoundingBox().height) / 2.0 - ((TreeAlgorithmData) left_most.data).prelim - right_mod_sum;
        if (move_distance > 0.0) {
            DomNode tmpnode;
            int left_sibling;
            for (tmpnode = node, left_sibling = 0; tmpnode != null && tmpnode != ancestor_neighbor; tmpnode = ((TreeAlgorithmData) tmpnode.data).leftSibling) left_sibling++;
            if (tmpnode != null) {
                double slide_value = move_distance / (double) left_sibling;
                for (tmpnode = node; tmpnode != ancestor_neighbor; tmpnode = ((TreeAlgorithmData) tmpnode.data).leftSibling) {
                    ((TreeAlgorithmData) tmpnode.data).prelim += move_distance;
                    ((TreeAlgorithmData) tmpnode.data).modifier += move_distance;
                    move_distance -= slide_value;
                }
            } else
                return;
        }
        compare_depth++;
        if (((TreeAlgorithmData) left_most.data).leftChild == null)
            left_most = leftMost_(node, 0, compare_depth);
        else
            left_most = ((TreeAlgorithmData) left_most.data).leftChild;
        if (left_most != null)
            neighbor = ((TreeAlgorithmData) left_most.data).leftNeighbor;
    }
}
