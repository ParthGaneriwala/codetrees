/**
 * This method will coalesce the two input nodes and creates a new node in the graph by
 * using the set that is the union of the neighbors of each of the nodes (the third parameter).
 *
 * @param node
 */
private void coalesce(Node node, Node moveNeighbor, HashSet unionOfNeighbors, Vector igNodes, HashMap coalescedVsList) {
    // Create a new node in the interference graph; add this to the end of the nodes list
    // of the interference graph
    Temp temp = new Temp();
    Node newNode = interferenceGraph.newInterferenceGraphNode(temp);
    // Populate the map of coalesced nodes with the new node vs. it's children
    Temp[] children = new Temp[2];
    children[0] = interferenceGraph.getTemp(node);
    children[1] = interferenceGraph.getTemp(moveNeighbor);
    System.out.println("Coalescing " + children[0] + " and " + children[1] + " into " + temp);
    coalescedVsList.put(temp, children);
    // Add edges from the new node to each element in the union set
    Iterator iter = unionOfNeighbors.iterator();
    while (iter.hasNext()) {
        Node neighbor = (Node) iter.next();
        interferenceGraph.updateAdjacencyMatrix(newNode, neighbor);
    }
    // Remove the move between the nodes, since they are being coalesed
    removeMoves(node, moveNeighbor);
    // Create moves for the new node if any; the moves will be the union of the moves related
    // to the two nodes
    HashSet union = new HashSet();
    HashSet movesForNode = interferenceGraph.getMoveRelatedNodes(node);
    HashSet movesForMoveNeigh = interferenceGraph.getMoveRelatedNodes(moveNeighbor);
    Iterator iter1 = movesForNode.iterator();
    while (iter1.hasNext()) {
        Node nd = (Node) iter1.next();
        Temp t1 = interferenceGraph.getTemp(nd);
        union.add(nd);
    // if(t1 != null) union.add(nd);
    }
    Iterator iter2 = movesForMoveNeigh.iterator();
    while (iter2.hasNext()) {
        Node nd = (Node) iter2.next();
        Temp t2 = interferenceGraph.getTemp(nd);
        union.add(nd);
    // if(t2 != null) union.add(nd);
    }
    Iterator iter3 = union.iterator();
    while (iter3.hasNext()) {
        interferenceGraph.addToMoveRelatedNodes(newNode, (Node) iter3.next());
    }
    // The spill cost of the new coalesced node will be the maximum of the spill cost of the two nodes
    // that are being coalesced
    int spCostOfNewNode = Integer.parseInt(interferenceGraph.getSpillCost(node));
    int spCostOfMoveNeigh = Integer.parseInt(interferenceGraph.getSpillCost(moveNeighbor));
    if (spCostOfNewNode < spCostOfMoveNeigh)
        spCostOfNewNode = spCostOfMoveNeigh;
    interferenceGraph.setSpillCost(newNode, "" + spCostOfNewNode);
    // Remove the two nodes from the interference graph
    interferenceGraph.removeNode(node);
    interferenceGraph.removeNode(moveNeighbor);
    igNodes.remove(node);
    igNodes.remove(moveNeighbor);
    removeMovesForNode(node);
    removeMovesForNode(moveNeighbor);
}
