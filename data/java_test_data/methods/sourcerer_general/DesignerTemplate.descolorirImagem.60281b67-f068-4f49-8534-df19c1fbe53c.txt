public synchronized void descolorirImagem(ArquivoPro arquivo, Arquivista arquivista) {
    String basePath = Coordenador.PASTA_BASE_ARQUIVOS_CMS;
    String localFileName = basePath + arquivo.getPathLocal();
    try {
        if (!isImagem(arquivo.getPathLocal())) {
            // nao descolorir
            return;
        }
        if (arquivo.getErro() != null && !arquivo.getErro().equals("")) {
            // houve algum erro
            return;
        }
        String extensao = G_File.getExtensao(arquivo.getPathLocal());
        String nome = G_File.getName(arquivo.getPathLocal());
        String nomeDir = localFileName.substring(0, localFileName.lastIndexOf(File.separatorChar));
        String nomePB = nomeDir + File.separatorChar + nome.replace("." + extensao, "_pb." + extensao);
        File filePB = new File(nomePB);
        File fileColorido = new File(localFileName);
        if (filePB.exists()) {
            // jï¿½ foi convertido
            return;
        }
        if (!fileColorido.exists()) {
            logger.info("baixar novamente " + arquivo);
            arquivista.baixarNovamente(arquivo, job);
        }
        File dir = new File(nomeDir);
        if (!dir.exists()) {
            dir.mkdir();
        }
        BufferedImage bi = ImageIO.read(fileColorido);
        if (bi == null) {
            logger.info("baixar novamente " + arquivo);
            arquivista.baixarNovamente(arquivo, job);
        }
        BufferedImage gray = new BufferedImage(bi.getWidth(), bi.getHeight(), BufferedImage.TYPE_BYTE_GRAY);
        ((Graphics2D) gray.getGraphics()).drawImage(bi, new AffineTransform(), null);
        ImageIO.write(gray, extensao.toLowerCase(), filePB);
        logger.debug("convertido " + nomePB);
    } catch (Exception e) {
        logger.info("Arquivo: " + localFileName);
        e.printStackTrace();
    }
}
