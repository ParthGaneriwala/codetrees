@Test
public void testClassifierAnnotator() throws UIMAException {
    UimaContext context = UimaContextFactory.createUimaContext(ChunkLabeler_ImplBase.PARAM_CHUNK_ANNOTATION_CLASS_NAME, Token.class.getName(), Chunker.PARAM_LABELED_ANNOTATION_CLASS_NAME, Subtoken.class.getName());
    DefaultChunkLabeler defaultChunkLabeler = InitializableFactory.create(context, DefaultChunkLabeler.class);
    jCas.setDocumentText(// Albert
    "Technological progress is like an axe in the hands of a pathological criminal.");
    // Einstein
    Sentence sentence = new Sentence(jCas, 0, 78);
    sentence.addToIndexes();
    // Technological
    Subtoken subtoken1 = AnnotationFactory.createAnnotation(jCas, 0, 13, Subtoken.class);
    // progress
    Subtoken subtoken2 = AnnotationFactory.createAnnotation(jCas, 14, 22, Subtoken.class);
    // is
    Subtoken subtoken3 = AnnotationFactory.createAnnotation(jCas, 23, 25, Subtoken.class);
    // like
    Subtoken subtoken4 = AnnotationFactory.createAnnotation(jCas, 26, 30, Subtoken.class);
    // an
    Subtoken subtoken5 = AnnotationFactory.createAnnotation(jCas, 31, 33, Subtoken.class);
    // axe
    Subtoken subtoken6 = AnnotationFactory.createAnnotation(jCas, 34, 37, Subtoken.class);
    // in
    Subtoken subtoken7 = AnnotationFactory.createAnnotation(jCas, 38, 40, Subtoken.class);
    // the
    Subtoken subtoken8 = AnnotationFactory.createAnnotation(jCas, 41, 44, Subtoken.class);
    // hands
    Subtoken subtoken9 = AnnotationFactory.createAnnotation(jCas, 45, 50, Subtoken.class);
    // of
    Subtoken subtoken10 = AnnotationFactory.createAnnotation(jCas, 51, 53, Subtoken.class);
    // a
    Subtoken subtoken11 = AnnotationFactory.createAnnotation(jCas, 54, 55, Subtoken.class);
    // pathological
    Subtoken subtoken12 = AnnotationFactory.createAnnotation(jCas, 56, 68, Subtoken.class);
    // criminal
    Subtoken subtoken13 = AnnotationFactory.createAnnotation(jCas, 69, 77, Subtoken.class);
    // .
    Subtoken subtoken14 = AnnotationFactory.createAnnotation(jCas, 77, 78, Subtoken.class);
    defaultChunkLabeler.chunks2Labels(jCas, sentence);
    assertEquals(ChunkLabeler_ImplBase.OUTSIDE_LABEL, defaultChunkLabeler.getLabel(subtoken1));
    assertEquals(ChunkLabeler_ImplBase.OUTSIDE_LABEL, defaultChunkLabeler.getLabel(subtoken2));
    assertEquals(ChunkLabeler_ImplBase.OUTSIDE_LABEL, defaultChunkLabeler.getLabel(subtoken3));
    assertEquals(ChunkLabeler_ImplBase.OUTSIDE_LABEL, defaultChunkLabeler.getLabel(subtoken4));
    assertEquals(ChunkLabeler_ImplBase.OUTSIDE_LABEL, defaultChunkLabeler.getLabel(subtoken5));
    assertEquals(ChunkLabeler_ImplBase.OUTSIDE_LABEL, defaultChunkLabeler.getLabel(subtoken6));
    assertEquals(ChunkLabeler_ImplBase.OUTSIDE_LABEL, defaultChunkLabeler.getLabel(subtoken7));
    // begin Technological
    defaultChunkLabeler.setLabel(subtoken1, "B-Token");
    defaultChunkLabeler.setLabel(subtoken2, ChunkLabeler_ImplBase.OUTSIDE_LABEL);
    // begin is
    defaultChunkLabeler.setLabel(subtoken3, "I-Token");
    // begin like
    defaultChunkLabeler.setLabel(subtoken4, "B-Token");
    // begin an axe in
    defaultChunkLabeler.setLabel(subtoken5, "B-Token");
    defaultChunkLabeler.setLabel(subtoken6, "I-Token");
    defaultChunkLabeler.setLabel(subtoken7, "I-Token");
    defaultChunkLabeler.setLabel(subtoken8, ChunkLabeler_ImplBase.OUTSIDE_LABEL);
    // begin hands of
    defaultChunkLabeler.setLabel(subtoken9, "I-Token");
    defaultChunkLabeler.setLabel(subtoken10, "I-Token");
    // begin a
    defaultChunkLabeler.setLabel(subtoken11, "B-Token");
    // begin pathological
    defaultChunkLabeler.setLabel(subtoken12, "B-Token");
    defaultChunkLabeler.setLabel(subtoken13, ChunkLabeler_ImplBase.OUTSIDE_LABEL);
    defaultChunkLabeler.setLabel(subtoken14, "I-Token");
    defaultChunkLabeler.labels2Chunks(jCas, sentence);
    Token token = JCasUtil.selectByIndex(jCas, Token.class, 0);
    assertEquals("Technological", token.getCoveredText());
    token = JCasUtil.selectByIndex(jCas, Token.class, 1);
    assertEquals("is", token.getCoveredText());
    token = JCasUtil.selectByIndex(jCas, Token.class, 2);
    assertEquals("like", token.getCoveredText());
    token = JCasUtil.selectByIndex(jCas, Token.class, 3);
    assertEquals("an axe in", token.getCoveredText());
    token = JCasUtil.selectByIndex(jCas, Token.class, 4);
    assertEquals("hands of", token.getCoveredText());
    token = JCasUtil.selectByIndex(jCas, Token.class, 5);
    assertEquals("a", token.getCoveredText());
    token = JCasUtil.selectByIndex(jCas, Token.class, 6);
    assertEquals("pathological", token.getCoveredText());
    token = JCasUtil.selectByIndex(jCas, Token.class, 7);
    assertEquals(".", token.getCoveredText());
}
