@SuppressWarnings("unchecked")
public ArrayList<ArrayList<Token>> parse() {
    String key;
    Scanner src;
    FileReader fin;
    String value;
    String[] result;
    // accounting for multiple queues, the first list has the condor
    // directives, and subsequent lists overwrites the condor directives
    queuedList = new ArrayList<ArrayList<Token>>();
    // initially holds all parsed tokens
    list = new ArrayList<Token>();
    // holds orginial, unprocessed tokens
    orginialList = new ArrayList<Token>();
    String toAdd;
    try {
        fin = new FileReader(file);
        src = new Scanner(fin);
        while (src.hasNext()) {
            key = src.next();
            value = null;
            if (src.hasNext())
                value = src.nextLine();
            if (key.contains("#")) {
            // Ignore comments
            } else {
                // TheGUI.appendToLog("Key is:" + key);
                ArrayList<String> valuesList = new ArrayList<String>();
                if (value != null && value.contains("=")) {
                    result = value.split("=", 2);
                    // Prints out info after the equals sign
                    String afterEquals = result[result.length - 1];
                    /*
						 * Add entire value string if the keyword is rank or requirements, because these need to be kept
						 * together to check if they are true or false.
						 * 
						 * Add entire value if it is image_size, because it will be broken up between the memory value
						 * (eg. 28) and the word "Meg"
						 * 
						 * If it isn't one of those, remove the spaces and add the space-free values to the valuesList
						 * for that Token. Then add the token to the complete list of tokens
						 */
                    if ((key.toLowerCase()).equals("rank")) {
                        // TheGUI.appendToLog("Rank found");
                        toAdd = afterEquals.trim();
                        valuesList.add(toAdd);
                        list.add(new Token(key, valuesList));
                    } else if ((key.toLowerCase()).equals("requirements")) {
                        // TheGUI.appendToLog("Requirements found");
                        // RJM: splitting on && for each requirement
                        String[] splitUp = afterEquals.trim().split("&&");
                        for (int i = 0; i < splitUp.length; i++) {
                            valuesList.add(splitUp[i].trim());
                        }
                        list.add(new Token(key, valuesList));
                    } else if ((key.toLowerCase()).equals("image_size")) {
                        // TheGUI.appendToLog("image size found");
                        toAdd = afterEquals.trim();
                        valuesList.add(toAdd);
                        list.add(new Token(key, valuesList));
                    } else if ((key.toLowerCase()).equals("arguments")) {
                        String[] splitUp = value.split(" ");
                        for (int i = 0; i < splitUp.length; i++) {
                            splitUp[i] = splitUp[i].trim();
                            if (!(splitUp[i].toLowerCase().equals("arguments")) && !(splitUp[i].toLowerCase().equals("=")) && !(splitUp[i].equals("")) && !(splitUp[i].equals(" "))) {
                                valuesList.add(splitUp[i]);
                            }
                        }
                        list.add(new Token(key, valuesList));
                    } else {
                        String[] splitUp = afterEquals.split(" ");
                        for (int i = 0; i < splitUp.length; i++) {
                            // Remove leading and trailing whitespace before
                            // adding it to the values list
                            toAdd = splitUp[i].trim();
                            if (!(toAdd.equals(""))) {
                                // TheGUI.appendToLog("Value is:" + toAdd);
                                valuesList.add(toAdd);
                            }
                        }
                        list.add(new Token(key, valuesList));
                    }
                }
                if (key.trim().toLowerCase().equals("queue") && (value == null || value.trim().equals(""))) {
                    // building the list of directives for multiple queuing
                    // if needed each new iteration has the same values except new values overwrite older ones
                    numOfQueueCmds++;
                    processMultipleQueue();
                } else if (key.trim().toLowerCase().equals("queue") && value != null && !value.isEmpty() && Character.isDigit(value.trim().charAt(0))) {
                    // processes the macro for $(process)
                    // every time the macro appears in the submit file, it corresponds to a replacement with number
                    // the amount of jobs created is based on how many times the argument to queue is specified
                    numOfQueueCmds++;
                    // if there are multiple queues, replace with updated cmds, and process macro
                    if (numOfQueueCmds == 1) {
                        processMacro(value);
                    } else {
                        processMacroMultipleQueueing(value);
                    }
                }
            }
        }
        fin.close();
    } catch (Exception e) {
        // Something went wrong
        e.printStackTrace();
        return null;
    }
    return queuedList;
}
