private void writeGetMethodCode(SlowParser<?> componentParser, MethodScope outerMethodScope, String arrayRef) {
    outerMethodScope.startLine("@Override public ");
    componentParser.appendFinishedValueTypeNameJava(outerMethodScope);
    outerMethodScope.append(" get(int index) {\n");
    {
        MethodScope scope = outerMethodScope.newMethodScope();
        scope.indentRight();
        String resultRef = scope.newMethodScopedName("result");
        scope.startLine("");
        componentParser.appendFinishedValueTypeNameJava(scope);
        scope.append(" " + resultRef + " = cachedValues.get(index);\n");
        scope.startLine("if (" + resultRef + " == null) {\n");
        scope.indentRight();
        boolean wrap = componentParser.javaCodeThrowsException();
        if (wrap) {
            scope.startLine("try {\n");
            scope.indentRight();
        }
        scope.startLine("Object unparsed = " + arrayRef + ".get(index);\n");
        componentParser.writeParseCode(scope, "unparsed", "null", "parsed");
        scope.startLine(resultRef + " = parsed;\n");
        if (wrap) {
            scope.indentLeft();
            scope.startLine("} catch (" + Util.BASE_PACKAGE + ".JsonProtocolParseException e) {\n");
            scope.startLine("  throw new " + Util.BASE_PACKAGE + ".implutil.CommonImpl.ParseRuntimeException(e);\n");
            scope.startLine("}\n");
        }
        scope.startLine("cachedValues.compareAndSet(index, null, " + resultRef + ");\n");
        scope.startLine(resultRef + " = cachedValues.get(index);\n");
        scope.indentLeft();
        scope.startLine("}\n");
        scope.startLine("return " + resultRef + ";\n");
        scope.indentLeft();
    }
    outerMethodScope.startLine("}\n");
}
