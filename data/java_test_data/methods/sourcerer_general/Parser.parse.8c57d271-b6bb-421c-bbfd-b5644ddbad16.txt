public PageDefinition parse(Document doc, String extension) throws Exception {
    // 1. parse the page and import directive if any
    final List pis = new LinkedList(), imports = new LinkedList();
    String lang = null;
    for (Iterator it = doc.getChildren().iterator(); it.hasNext(); ) {
        final Object o = it.next();
        if (!(o instanceof ProcessingInstruction))
            continue;
        final ProcessingInstruction pi = (ProcessingInstruction) o;
        final String target = pi.getTarget();
        if ("page".equals(target)) {
            // we handle only the language attribute here
            final Map params = pi.parseData();
            final String l = (String) params.remove("language");
            if (l != null) {
                noEL("language", l, pi);
                lang = l;
            }
            if (!params.isEmpty())
                // process it later
                pis.add(pi);
        } else if ("import".equals(target)) {
            // import
            final Map params = pi.parseData();
            final String src = (String) params.remove("src");
            final String dirs = (String) params.remove("directives");
            if (!params.isEmpty())
                log.warning("Ignored unknown attributes: " + params.keySet() + ", " + pi.getLocator());
            noELnorEmpty("src", src, pi);
            noEL("directives", dirs, pi);
            imports.add(new String[] { src, dirs });
        } else {
            pis.add(pi);
        }
    }
    // 2. Create PageDefinition
    final LanguageDefinition langdef = extension != null && lang == null ? LanguageDefinition.getByExtension(extension) : LanguageDefinition.lookup(lang);
    final PageDefinition pgdef = new PageDefinition(langdef, getLocator());
    // 3. resolve imports
    if (!imports.isEmpty()) {
        final RequestInfo ri = new RequestInfoImpl(_wapp, null, null, null, getLocator());
        final UiFactory uf = ((WebAppCtrl) _wapp).getUiFactory();
        for (Iterator it = imports.iterator(); it.hasNext(); ) {
            final String[] imprt = (String[]) it.next();
            final String path = imprt[0], dirs = imprt[1];
            try {
                final PageDefinition pd = uf.getPageDefinition(ri, path);
                if (pd == null)
                    throw new UiException("Import page not found: " + path);
                pgdef.imports(pd, parseToArray(dirs));
            } catch (PotentialDeadLockException ex) {
                throw new UiException("Recursive import: " + path, ex);
            }
        }
    }
    // 4. Processing the rest of processing instructions at the top level
    for (Iterator it = pis.iterator(); it.hasNext(); ) parse(pgdef, (ProcessingInstruction) it.next());
    // 5. Processing from the root element
    final Element root = doc.getRootElement();
    if (root != null)
        parse(pgdef, pgdef, root, new AnnotationHelper(), false);
    return pgdef;
}
