private void processCreate() throws HsqlException {
    boolean unique = false;
    int tableType;
    boolean isTempTable = false;
    String token;
    session.checkAdmin();
    session.checkDDLWrite();
    session.setScripting(true);
    if (tokenizer.isGetThis(Token.T_GLOBAL)) {
        tokenizer.getThis(Token.T_TEMPORARY);
        isTempTable = true;
    } else if (tokenizer.isGetThis(Token.T_TEMP)) {
        isTempTable = true;
    } else if (tokenizer.isGetThis(Token.T_TEMPORARY)) {
        isTempTable = true;
    }
    token = tokenizer.getSimpleToken();
    switch(Token.get(token)) {
        // table
        case Token.MEMORY:
            tokenizer.getThis(Token.T_TABLE);
        case Token.TABLE:
            tableType = isTempTable ? Table.TEMP_TABLE : database.getDefaultTableType();
            processCreateTable(tableType);
            return;
        case Token.CACHED:
            if (isTempTable) {
                throw Trace.error(Trace.UNEXPECTED_TOKEN, token);
            }
            tokenizer.getThis(Token.T_TABLE);
            processCreateTable(Table.CACHED_TABLE);
            return;
        case Token.TEXT:
            if (isTempTable) {
                throw Trace.error(Trace.UNEXPECTED_TOKEN, token);
            }
            tokenizer.getThis(Token.T_TABLE);
            processCreateTable(Table.TEXT_TABLE);
            return;
        default:
            if (isTempTable) {
                throw Trace.error(Trace.UNEXPECTED_TOKEN, token);
            }
    }
    switch(Token.get(token)) {
        // other objects
        case Token.ALIAS:
            processCreateAlias();
            break;
        case Token.SEQUENCE:
            processCreateSequence();
            break;
        case Token.SCHEMA:
            session.setScripting(false);
            processCreateSchema();
            break;
        case Token.TRIGGER:
            processCreateTrigger();
            break;
        case Token.USER:
            processCreateUser();
            break;
        case Token.ROLE:
            database.getGranteeManager().addRole(getUserIdentifier());
            break;
        case Token.VIEW:
            processCreateView();
            break;
        // index
        case Token.UNIQUE:
            unique = true;
            tokenizer.getThis(Token.T_INDEX);
        // fall thru
        case Token.INDEX:
            processCreateIndex(unique);
            break;
        default:
            {
                throw Trace.error(Trace.UNEXPECTED_TOKEN, token);
            }
    }
}
