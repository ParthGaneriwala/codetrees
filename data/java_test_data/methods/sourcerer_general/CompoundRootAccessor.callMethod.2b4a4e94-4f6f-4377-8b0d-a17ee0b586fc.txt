public Object callMethod(Map context, Object target, String name, Object[] objects) throws MethodFailedException {
    CompoundRoot root = (CompoundRoot) target;
    if ("describe".equals(name)) {
        Object v;
        if (objects != null && objects.length == 1) {
            v = objects[0];
        } else {
            v = root.get(0);
        }
        if (v instanceof Collection || v instanceof Map || v.getClass().isArray()) {
            return v.toString();
        }
        try {
            Map descriptors = OgnlRuntime.getPropertyDescriptors(v.getClass());
            int maxSize = 0;
            for (Iterator iterator = descriptors.keySet().iterator(); iterator.hasNext(); ) {
                String pdName = (String) iterator.next();
                if (pdName.length() > maxSize) {
                    maxSize = pdName.length();
                }
            }
            SortedSet set = new TreeSet();
            StringBuffer sb = new StringBuffer();
            for (Iterator iterator = descriptors.values().iterator(); iterator.hasNext(); ) {
                PropertyDescriptor pd = (PropertyDescriptor) iterator.next();
                sb.append(pd.getName()).append(": ");
                int padding = maxSize - pd.getName().length();
                for (int i = 0; i < padding; i++) {
                    sb.append(" ");
                }
                sb.append(pd.getPropertyType().getName());
                set.add(sb.toString());
                sb = new StringBuffer();
            }
            sb = new StringBuffer();
            for (Iterator iterator = set.iterator(); iterator.hasNext(); ) {
                String s = (String) iterator.next();
                sb.append(s).append("\n");
            }
            return sb.toString();
        } catch (IntrospectionException e) {
            e.printStackTrace();
        } catch (OgnlException e) {
            e.printStackTrace();
        }
        return null;
    }
    for (Iterator iterator = root.iterator(); iterator.hasNext(); ) {
        Object o = iterator.next();
        if (o == null) {
            continue;
        }
        Class clazz = o.getClass();
        Class[] argTypes = getArgTypes(objects);
        CompoundRootAccessor.MethodCall mc = null;
        if (argTypes != null) {
            mc = new CompoundRootAccessor.MethodCall(clazz, name, argTypes);
        }
        if ((argTypes == null) || !invalidMethods.containsKey(mc)) {
            try {
                Object value = OgnlRuntime.callMethod((OgnlContext) context, o, name, name, objects);
                if (value != null) {
                    return value;
                }
            } catch (OgnlException e) {
                // try the next one
                Throwable reason = e.getReason();
                if ((mc != null) && (reason != null) && (reason.getClass() == NoSuchMethodException.class)) {
                    invalidMethods.put(mc, Boolean.TRUE);
                } else if (reason != null) {
                    throw new MethodFailedException(o, name, e.getReason());
                }
            }
        }
    }
    return null;
}
