// $ANTLR start "call"
public final CompiladoresParser.call_return call() throws RecognitionException {
    CompiladoresParser.call_return retval = new CompiladoresParser.call_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token LPAR109 = null;
    Token RPAR111 = null;
    CompiladoresParser.id_return id108 = null;
    CompiladoresParser.list_expression_return list_expression110 = null;
    CommonTree LPAR109_tree = null;
    CommonTree RPAR111_tree = null;
    RewriteRuleTokenStream stream_RPAR = new RewriteRuleTokenStream(adaptor, "token RPAR");
    RewriteRuleTokenStream stream_LPAR = new RewriteRuleTokenStream(adaptor, "token LPAR");
    RewriteRuleSubtreeStream stream_id = new RewriteRuleSubtreeStream(adaptor, "rule id");
    RewriteRuleSubtreeStream stream_list_expression = new RewriteRuleSubtreeStream(adaptor, "rule list_expression");
    try {
        dbg.enterRule(getGrammarFileName(), "call");
        if (getRuleLevel() == 0) {
            dbg.commence();
        }
        incRuleLevel();
        dbg.location(156, 1);
        try {
            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:156:8: ( id LPAR ( list_expression )? RPAR -> ^( CALL id ^( PARAMETER ( list_expression )* ) ) )
            dbg.enterAlt(1);
            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:156:10: id LPAR ( list_expression )? RPAR
            {
                dbg.location(156, 10);
                pushFollow(FOLLOW_id_in_call1250);
                id108 = id();
                state._fsp--;
                stream_id.add(id108.getTree());
                dbg.location(156, 13);
                LPAR109 = (Token) match(input, LPAR, FOLLOW_LPAR_in_call1252);
                stream_LPAR.add(LPAR109);
                dbg.location(156, 18);
                // /home/CIN/fmm/Desktop/grammar/Compiladores.g:156:18: ( list_expression )?
                int alt25 = 2;
                try {
                    dbg.enterSubRule(25);
                    try {
                        dbg.enterDecision(25);
                        int LA25_0 = input.LA(1);
                        if ((LA25_0 == NOT || (LA25_0 >= TRUE && LA25_0 <= FALSE) || LA25_0 == LPAR || (LA25_0 >= ID && LA25_0 <= INTEGER))) {
                            alt25 = 1;
                        }
                    } finally {
                        dbg.exitDecision(25);
                    }
                    switch(alt25) {
                        case 1:
                            dbg.enterAlt(1);
                            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:156:19: list_expression
                            {
                                dbg.location(156, 19);
                                pushFollow(FOLLOW_list_expression_in_call1255);
                                list_expression110 = list_expression();
                                state._fsp--;
                                stream_list_expression.add(list_expression110.getTree());
                            }
                            break;
                    }
                } finally {
                    dbg.exitSubRule(25);
                }
                dbg.location(156, 37);
                RPAR111 = (Token) match(input, RPAR, FOLLOW_RPAR_in_call1259);
                stream_RPAR.add(RPAR111);
                // AST REWRITE
                // elements: list_expression, id
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                retval.tree = root_0;
                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.tree : null);
                root_0 = (CommonTree) adaptor.nil();
                // 157:5: -> ^( CALL id ^( PARAMETER ( list_expression )* ) )
                {
                    dbg.location(157, 8);
                    // /home/CIN/fmm/Desktop/grammar/Compiladores.g:157:8: ^( CALL id ^( PARAMETER ( list_expression )* ) )
                    {
                        CommonTree root_1 = (CommonTree) adaptor.nil();
                        dbg.location(157, 10);
                        root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(CALL, "CALL"), root_1);
                        dbg.location(157, 15);
                        adaptor.addChild(root_1, stream_id.nextTree());
                        dbg.location(157, 18);
                        // /home/CIN/fmm/Desktop/grammar/Compiladores.g:157:18: ^( PARAMETER ( list_expression )* )
                        {
                            CommonTree root_2 = (CommonTree) adaptor.nil();
                            dbg.location(157, 20);
                            root_2 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(PARAMETER, "PARAMETER"), root_2);
                            dbg.location(157, 30);
                            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:157:30: ( list_expression )*
                            while (stream_list_expression.hasNext()) {
                                dbg.location(157, 30);
                                adaptor.addChild(root_2, stream_list_expression.nextTree());
                            }
                            stream_list_expression.reset();
                            adaptor.addChild(root_1, root_2);
                        }
                        adaptor.addChild(root_0, root_1);
                    }
                }
                retval.tree = root_0;
            }
            retval.stop = input.LT(-1);
            retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
        }
        dbg.location(158, 5);
    } finally {
        dbg.exitRule(getGrammarFileName(), "call");
        decRuleLevel();
        if (getRuleLevel() == 0) {
            dbg.terminate();
        }
    }
    return retval;
}
