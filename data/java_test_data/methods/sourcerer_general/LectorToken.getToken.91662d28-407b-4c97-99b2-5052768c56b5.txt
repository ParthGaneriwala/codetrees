public Token getToken() {
    int estado = 0;
    char c = ' ';
    tokenActual.setID("");
    tokenActual.setValor("");
    actual.replace(0, actual.length(), "");
    if (Lector.HasMoreElements()) {
        boolean fin = false;
        while ((!fin) && (Lector.HasMoreElements())) {
            if (estado != 11) {
                c = Lector.readNext();
                if (// c == '\r'
                c == '\n')
                    nroLinea++;
                int mapeo = this.Mapeo(c);
                if (mapeo != -1) {
                    tokenActual = matrizProcesos[estado][mapeo].ejecutar(c, nroLinea);
                    estado = matrizEstado[estado][mapeo];
                } else {
                    if ((estado != 7) && (estado != 8) && (estado != 9)) {
                        if ((estado == 1) || (estado == 2)) {
                            Error e = new Error(Error.ERRROR_CARACTER_INVALIDO, nroLinea, String.valueOf(c));
                            Errores.add(e);
                            c = Lector.readNext();
                            Proceso3 p3 = new Proceso3(Lector, TS, actual, tokenActual, Errores, nroLinea);
                            tokenActual = p3.ejecutar(c, nroLinea);
                            return tokenActual;
                        } else {
                            Error e = new Error(Error.ERRROR_CARACTER_INVALIDO, nroLinea, String.valueOf(c));
                            Errores.add(e);
                            estado = 0;
                            actual.replace(0, actual.length(), "");
                        }
                    }
                }
            } else {
                estado = 0;
                actual.replace(0, actual.length(), "");
                if (tokenActual.getID().compareTo("") != 0) {
                    fin = true;
                    return tokenActual;
                }
            }
        }
        return tokenActual;
    } else
        return null;
}
