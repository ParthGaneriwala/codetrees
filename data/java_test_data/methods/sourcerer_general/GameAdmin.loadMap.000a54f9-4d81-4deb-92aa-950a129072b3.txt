public void loadMap() throws IOException {
    if (boundsMap != null && transitableMap != null) {
        this.remove(boundsMap);
        this.remove(transitableMap);
    }
    switch(currentScene) {
        case Map.FISHBOWL:
            transitableMap = new Map(Map.FISHBOWL, false, this);
            boundsMap = new Map(Map.FISHBOWL, true, this);
            currentDisplay.setMiniMap(Image.createImage("/Images/Maps/Fishbowl-Minimap.png"));
            break;
        case Map.OUTER_FISHBOWL:
            transitableMap = new Map(Map.OUTER_FISHBOWL, false, this);
            boundsMap = new Map(Map.OUTER_FISHBOWL, true, this);
            currentDisplay.setMiniMap(Image.createImage("/Images/Maps/OuterFishbowl-Minimap.png"));
            break;
        case Map.DISTILLERY:
            transitableMap = new Map(Map.DISTILLERY, false, this);
            boundsMap = new Map(Map.DISTILLERY, true, this);
            currentDisplay.setMiniMap(Image.createImage("/Images/Maps/Distillery-Minimap.png"));
            break;
        case Map.OUTER_DISTILLERY:
            transitableMap = new Map(Map.OUTER_DISTILLERY, false, this);
            boundsMap = new Map(Map.OUTER_DISTILLERY, true, this);
            currentDisplay.setMiniMap(Image.createImage("/Images/Maps/OuterDistillery-Minimap.png"));
            break;
        case Map.CCI_RECEIVER:
            transitableMap = new Map(Map.CCI_RECEIVER, false, this);
            boundsMap = new Map(Map.CCI_RECEIVER, true, this);
            currentDisplay.setMiniMap(Image.createImage("/Images/Maps/CCI-Receiver-Minimap.png"));
            break;
        case Map.CCI_COMPUTERS:
            transitableMap = new Map(Map.CCI_COMPUTERS, false, this);
            boundsMap = new Map(Map.CCI_COMPUTERS, true, this);
            currentDisplay.setMiniMap(Image.createImage("/Images/Maps/CCI-Computers-Minimap.png"));
            break;
        case Map.WOLVES_UPPER_LEFT:
            transitableMap = new Map(Map.WOLVES_UPPER_LEFT, false, this);
            boundsMap = new Map(Map.WOLVES_UPPER_LEFT, true, this);
            currentDisplay.setMiniMap(Image.createImage("/Images/Maps/Wolves-Minimap.png"));
            break;
        case Map.WOLVES_UPPER_RIGHT:
            transitableMap = new Map(Map.WOLVES_UPPER_RIGHT, false, this);
            boundsMap = new Map(Map.WOLVES_UPPER_RIGHT, true, this);
            currentDisplay.setMiniMap(Image.createImage("/Images/Maps/Wolves-Minimap.png"));
            break;
        case Map.WOLVES_LOWER_LEFT:
            transitableMap = new Map(Map.WOLVES_LOWER_LEFT, false, this);
            boundsMap = new Map(Map.WOLVES_LOWER_LEFT, true, this);
            currentDisplay.setMiniMap(Image.createImage("/Images/Maps/Wolves-Minimap.png"));
            break;
        case Map.WOLVES_LOWER_RIGHT:
            transitableMap = new Map(Map.WOLVES_LOWER_RIGHT, false, this);
            boundsMap = new Map(Map.WOLVES_LOWER_RIGHT, true, this);
            currentDisplay.setMiniMap(Image.createImage("/Images/Maps/Wolves-Minimap.png"));
            break;
        case Map.OUTSIDES:
            transitableMap = new Map(Map.OUTSIDES, false, this);
            boundsMap = new Map(Map.OUTSIDES, true, this);
            currentDisplay.setMiniMap(Image.createImage("/Images/Maps/Outsides-Minimap.png"));
            break;
        default:
            System.out.println("Image error.");
    }
    this.append(boundsMap);
    this.append(transitableMap);
}
