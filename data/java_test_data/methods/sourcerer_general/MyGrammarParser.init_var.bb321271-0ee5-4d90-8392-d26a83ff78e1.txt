// $ANTLR start "init_var"
public final MyGrammarParser.init_var_return init_var() throws RecognitionException {
    MyGrammarParser.init_var_return retval = new MyGrammarParser.init_var_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token IDENTIFIER10 = null;
    Token VG11 = null;
    Token IDENTIFIER12 = null;
    Token DP13 = null;
    Token PVG15 = null;
    MyGrammarParser.type_return type14 = null;
    CommonTree IDENTIFIER10_tree = null;
    CommonTree VG11_tree = null;
    CommonTree IDENTIFIER12_tree = null;
    CommonTree DP13_tree = null;
    CommonTree PVG15_tree = null;
    RewriteRuleTokenStream stream_DP = new RewriteRuleTokenStream(adaptor, "token DP");
    RewriteRuleTokenStream stream_IDENTIFIER = new RewriteRuleTokenStream(adaptor, "token IDENTIFIER");
    RewriteRuleTokenStream stream_PVG = new RewriteRuleTokenStream(adaptor, "token PVG");
    RewriteRuleTokenStream stream_VG = new RewriteRuleTokenStream(adaptor, "token VG");
    RewriteRuleSubtreeStream stream_type = new RewriteRuleSubtreeStream(adaptor, "rule type");
    try {
        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:152:9: ( IDENTIFIER ( VG IDENTIFIER )* DP type PVG -> ^( INIT_VAR ( IDENTIFIER )+ type ) )
        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:152:12: IDENTIFIER ( VG IDENTIFIER )* DP type PVG
        {
            IDENTIFIER10 = (Token) match(input, IDENTIFIER, FOLLOW_IDENTIFIER_in_init_var962);
            stream_IDENTIFIER.add(IDENTIFIER10);
            // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:152:23: ( VG IDENTIFIER )*
            loop4: do {
                int alt4 = 2;
                int LA4_0 = input.LA(1);
                if ((LA4_0 == VG)) {
                    alt4 = 1;
                }
                switch(alt4) {
                    case 1:
                        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:152:24: VG IDENTIFIER
                        {
                            VG11 = (Token) match(input, VG, FOLLOW_VG_in_init_var965);
                            stream_VG.add(VG11);
                            IDENTIFIER12 = (Token) match(input, IDENTIFIER, FOLLOW_IDENTIFIER_in_init_var967);
                            stream_IDENTIFIER.add(IDENTIFIER12);
                        }
                        break;
                    default:
                        break loop4;
                }
            } while (true);
            DP13 = (Token) match(input, DP, FOLLOW_DP_in_init_var971);
            stream_DP.add(DP13);
            pushFollow(FOLLOW_type_in_init_var973);
            type14 = type();
            state._fsp--;
            stream_type.add(type14.getTree());
            PVG15 = (Token) match(input, PVG, FOLLOW_PVG_in_init_var975);
            stream_PVG.add(PVG15);
            // AST REWRITE
            // elements: type, IDENTIFIER
            // token labels:
            // rule labels: retval
            // token list labels:
            // rule list labels:
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", retval != null ? retval.tree : null);
            root_0 = (CommonTree) adaptor.nil();
            // 152:52: -> ^( INIT_VAR ( IDENTIFIER )+ type )
            {
                // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:152:55: ^( INIT_VAR ( IDENTIFIER )+ type )
                {
                    CommonTree root_1 = (CommonTree) adaptor.nil();
                    root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(INIT_VAR, "INIT_VAR"), root_1);
                    if (!(stream_IDENTIFIER.hasNext())) {
                        throw new RewriteEarlyExitException();
                    }
                    while (stream_IDENTIFIER.hasNext()) {
                        adaptor.addChild(root_1, stream_IDENTIFIER.nextNode());
                    }
                    stream_IDENTIFIER.reset();
                    adaptor.addChild(root_1, stream_type.nextTree());
                    adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
