private void createNorthPanel() {
    nPan = new JPanel();
    nPan.setBackground(Color.BLACK);
    nPan.setPreferredSize(new Dimension(0, buttonHight + 15));
    nPan.setLayout(new BoxLayout(nPan, BoxLayout.X_AXIS));
    JButton butAdd = new JButton("Add...");
    butAdd.setToolTipText("Adds a compound to the database");
    butAdd.setPreferredSize(buttonDimMenu);
    butAdd.addActionListener(new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent event) {
            if (event.getSource().getClass() == JButton.class) {
                DialogAdd add = new DialogAdd("Add Compound", GUIC.getColumnTitles());
                add.addActionListener(this);
                add.go();
            } else if (event.getSource().getClass() == DialogAdd.class) {
                DialogAdd add = (DialogAdd) event.getSource();
                GUIC.addCompound(add.getArrayProperties(), add.getArrayNames());
                add.dispose();
            }
        }
    });
    JButton butEdit = new JButton("Edit...");
    butEdit.setToolTipText("Edit the selected compound");
    butEdit.setPreferredSize(buttonDimMenu);
    butEdit.addActionListener(new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent event) {
            if (event.getSource().getClass() == JButton.class) {
                int selectedRow = m_table.getSelectedRow();
                if (selectedRow < 0) {
                    JOptionPane.showMessageDialog(null, "Please select a row in the table, then try agains");
                    return;
                }
                int dataLegnth = GUIC.getColumnTitles().length;
                Object[] compound = new Object[dataLegnth];
                for (int i = 0; i < dataLegnth; i++) {
                    compound[i] = m_table.getValueAt(selectedRow, i);
                }
                Long guid;
                try {
                    guid = (long) Long.parseLong(compound[1].toString());
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(null, "Please select a row in the table that is not empty, then try agains");
                    return;
                }
                String[] temp = GUIC.getCompoundNames(guid);
                DialogAdd add = new DialogAdd("Edit Compound", GUIC.getColumnTitles(), compound, temp);
                add.addActionListener(this);
                add.go();
            } else if (event.getSource().getClass() == DialogAdd.class) {
                DialogAdd edit = (DialogAdd) event.getSource();
                Object[] eComp = edit.getArrayProperties();
                GUIC.editCompound(eComp, edit.getArrayNames());
                ((ResultsTableModel) m_table.getModel()).setRow(m_table.getSelectedRow(), eComp);
                edit.dispose();
            }
        }
    });
    JButton butDel = new JButton("Delete");
    butDel.setToolTipText("Deletes a compound from the database");
    butDel.setPreferredSize(buttonDimMenu);
    butDel.addActionListener(new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent event) {
            try {
                List<Integer> indexes = ((ResultsTableModel) m_table.getModel()).getSelectedCompounds();
                String question;
                if (indexes.size() == 0) {
                    JOptionPane.showMessageDialog(null, "Please select a row (or rows) in the table that is not empty, then try agains");
                    return;
                }
                if (indexes.size() == 1) {
                    question = "Are you sure you want to delete " + m_table.getValueAt(indexes.get(0), 3).toString() + "?";
                } else {
                    question = "Are you sure you want to delete these " + indexes.size() + " compounds?";
                }
                int result = JOptionPane.showConfirmDialog(null, question, "Input", JOptionPane.YES_NO_OPTION);
                if (result == 0) {
                    List<Long> guids = new ArrayList<Long>();
                    for (int i = 0; i < indexes.size(); i++) {
                        guids.add(Long.parseLong(m_table.getValueAt(indexes.get(i), 1).toString()));
                    }
                    GUIC.deleteCompound(guids);
                    ((ResultsTableModel) m_table.getModel()).deleteCompound(guids);
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Please select a row (or rows) in the table that is not empty, then try agains");
            }
        }
    });
    JButton butImp = new JButton("Import");
    butImp.setToolTipText("Import compounds from a external source");
    butImp.setPreferredSize(buttonDimMenu);
    butImp.addActionListener(new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent event) {
            m_fileSel.setCurrentDirectory(new File("plugins"));
            int returnVal = m_fileSel.showOpenDialog(thisScreen);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                File file = m_fileSel.getSelectedFile();
                GUIC.importCompounds(file.getAbsolutePath());
            }
        }
    });
    JButton butExp = new JButton("Export");
    butExp.setToolTipText("Export compounds to a external destination");
    butExp.setPreferredSize(buttonDimMenu);
    butExp.addActionListener(new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent event) {
            m_fileSel.setCurrentDirectory(new File("exports"));
            int returnVal = m_fileSel.showSaveDialog(thisScreen);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                File file = m_fileSel.getSelectedFile();
                List<Integer> indexes = ((ResultsTableModel) m_table.getModel()).getSelectedCompounds();
                if (indexes.size() > 0) {
                    List<Long> guids = new ArrayList<Long>();
                    for (int i = 0; i < indexes.size(); i++) {
                        guids.add(Long.parseLong(m_table.getValueAt(indexes.get(i), 1).toString()));
                    }
                    GUIC.exportCompounds(guids, file.getAbsolutePath());
                }
            }
        }
    });
    JButton butEditColumns = new JButton("Column");
    butEditColumns.setToolTipText("Changes the columns of the database");
    butEditColumns.setPreferredSize(buttonDimMenu);
    butEditColumns.addActionListener(new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent event) {
            String[] cols = GUIC.getColumnTitles();
            String[] colsEditable = new String[cols.length - 3];
            for (int i = 3; i < cols.length; i++) {
                colsEditable[i - 3] = cols[i];
            }
            new DialogCol(colsEditable, GUIC, thisScreen);
        }
    });
    final JTextField nField = new JTextField();
    nField.setMaximumSize(new Dimension(Integer.MAX_VALUE, buttonHight));
    class nFieldActionListner implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent arg0) {
            String str = nField.getText();
            if (str.equals("")) {
                String[] columns = GUIC.getColumnTitles();
                String[] columnsNoSel = new String[columns.length - 1];
                for (int i = 1; i < columns.length; i++) {
                    columnsNoSel[i - 1] = columns[i];
                }
                new DialogAdv(columnsNoSel, thisScreen, GUIC);
                if (newSearchResults) {
                    Object[][] tempData = GUIC.getSearchResults(1, GUIC.getSearchResultCount());
                    ((ResultsTableModel) m_table.getModel()).SetData(tempData);
                    thisScreen.setTitle("Results For Advanced Search");
                }
            } else {
                nField.setText("");
                thisScreen.setTitle("Searching For " + str);
                GUIC.quickSearch(str);
                Object[][] tempData = GUIC.getSearchResults(1, GUIC.getSearchResultCount());
                ((ResultsTableModel) m_table.getModel()).SetData(tempData);
                thisScreen.setTitle("Results For " + str);
            }
        }
    }
    nField.addActionListener(new nFieldActionListner());
    JButton butSearch = new JButton("?");
    butSearch.setToolTipText("Search the database");
    butSearch.setPreferredSize(new Dimension(buttonHight, buttonHight));
    butSearch.addActionListener(new nFieldActionListner());
    nPan.add(Box.createHorizontalStrut(5));
    nPan.add(butAdd);
    nPan.add(Box.createHorizontalStrut(5));
    nPan.add(butEdit);
    nPan.add(Box.createHorizontalStrut(5));
    nPan.add(butDel);
    nPan.add(Box.createHorizontalStrut(5));
    nPan.add(butImp);
    nPan.add(Box.createHorizontalStrut(5));
    nPan.add(butExp);
    nPan.add(Box.createHorizontalStrut(5));
    nPan.add(butEditColumns);
    nPan.add(Box.createHorizontalStrut(5));
    nPan.add(nField);
    nPan.add(butSearch);
    nPan.add(Box.createHorizontalStrut(5));
    add(nPan, BorderLayout.NORTH);
}
