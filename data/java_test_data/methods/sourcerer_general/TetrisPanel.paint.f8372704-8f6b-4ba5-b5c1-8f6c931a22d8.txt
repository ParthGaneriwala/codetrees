@Override
public void paint(Graphics g) {
    g.setColor(Color.darkGray);
    g.fillRect(0, 0, this.getWidth(), this.getHeight());
    Color gray = Color.lightGray;
    g.setFont(GlobalSettings.font);
    g.setColor(gray);
    g.drawString(VERSION_STRING, 5, 10);
    if (!Renderables.menu.inGame()) {
        Renderables.menu.render(g);
    } else {
        synchronized (Renderables.background) {
            for (Point location : Renderables.background) g.drawImage(Images.background, location.x, location.y, null);
        }
        g.drawString(VERSION_STRING, 5, 10);
        g.setColor(new Color(gray.getRed(), gray.getGreen(), gray.getBlue(), 0x7F));
        g.drawRect(GlobalSettings.xyOffset, GlobalSettings.xyOffset, Settings.boardWidth * squareWidth(), Settings.boardHeight * squareHeight());
        boolean isGhostPieces = GlobalSettings.levelModes.contains(LevelMode.Ghost);
        int ghostUser = -1;
        if (isGhostPieces) {
            switch(GameSettings.gameMode) {
                case GrandMaster:
                    ghostUser = 0x00;
                    break;
                case Master:
                    ghostUser = 0x10;
                    break;
                case Expert:
                    ghostUser = 0x20;
                    break;
                case Normal:
                    ghostUser = 0x30;
                    break;
            }
        }
        /**
         * Grid
         */
        for (int i = 0; i < Settings.boardHeight; ++i) for (int j = 0; j < Settings.boardWidth; ++j) if (shapeAt(j, Settings.boardHeight - i - 1) == TetrisShape.NoShape || Updatables.linesNoRender[i] == true)
            g.fillRect(getX(j) + squareWidth() / 2 - 1, getY(i) + squareHeight() / 2 - 1, 2, 2);
        /**
         * Dropped pieces
         */
        for (int i = 0; i < Settings.boardHeight; i++) {
            if (Updatables.linesNoRender[i] == true)
                continue;
            for (int j = 0; j < Settings.boardWidth; j++) {
                TetrisShape shape = shapeAt(j, Settings.boardHeight - i - 1);
                if (shape != TetrisShape.NoShape)
                    drawSquare(g, getX(j), getY(i), shape, ghostUser);
            }
        }
        /**
         * Line removals animations
         */
        for (LineToRemove line : Renderables.linesToRemove) {
            line.render(g);
            int opacity;
            int i, j;
            for (i = 0; i < Settings.boardHeight; i++) {
                if (Updatables.linesNoRender[i] == false)
                    continue;
                for (j = 0; j < Settings.boardWidth; j++) {
                    TetrisShape shape = shapeAt(j, Settings.boardHeight - i - 1);
                    if ((opacity = line.getSquareOpacity(j)) != 0)
                        drawSquare(g, getX(j), getY(i), shape, opacity);
                }
            }
        }
        /**
         * Bomb animation :)
         */
        for (BombAnimation anim : Renderables.bombAnimation) {
            int i, j;
            i = anim.x();
            j = anim.y();
            if (anim.DisplayForeTile() && shapeAt(i, j) != TetrisShape.NoShape)
                drawSquare(g, getX(i), getY(Settings.boardHeight - j - 1), shapeAt(i, j), -1);
            anim.render(g);
        }
        /**
         * Current shape
         */
        if (Settings.currPiece.shape() != TetrisShape.NoShape && Renderables.linesToRemove.isEmpty() && !Updatables.isBomb) {
            for (int i = 0; i < Settings.currPiece.maxCoords(); i++) {
                int x = Settings.curX + Settings.currPiece.x(i);
                int y = Settings.curY + Settings.currPiece.y(i);
                int gy = Settings.ghostY + Settings.currPiece.y(i);
                if (GameSettings.gameMode != GameMode.Expert || GlobalSettings.inDevelopment)
                    drawSquare(g, getX(x), getY(Settings.boardHeight - gy - 1), Settings.currPiece.shape(), 0x7F);
                drawSquare(g, getX(x), getY(Settings.boardHeight - y - 1), Settings.currPiece.shape(), ghostUser);
            }
        }
        if (Renderables.ghostOutline.isStarted())
            Renderables.ghostOutline.render(g);
        /**
         * Next level animation
         */
        if (Settings.nextLevel != -1)
            for (int i = 0; i < Settings.boardWidth; i++) {
                drawSquare(g, i, Settings.nextLevel, Color.white, 0x30);
                drawSquare(g, i, Settings.nextLevel - 1, Color.white, 0x20);
                drawSquare(g, i, Settings.nextLevel - 2, Color.white, 0x10);
            }
        /**
         * Text strings
         */
        g.setColor(Color.lightGray);
        g.drawString(String.format("SCORE: %12s", GlobalSettings.formatter.format(GlobalSettings.score.intVal())), getX(Settings.boardWidth + 1), getY(1));
        g.drawString(String.format("COMBO: %12s", "x" + GlobalSettings.combo.intVal()), getX(Settings.boardWidth + 1), getY(2));
        g.drawString(String.format("LEVEL: %12d", GlobalSettings.level), getX(Settings.boardWidth + 1), getY(3));
        g.drawString(String.format("LEVEL: %12s", Settings.numPiecesDropped + "/" + (int) (Math.ceil((float) (Settings.numPiecesDropped > 0 ? Settings.numPiecesDropped : 1) / 25) * PIECES_PER_LEVEL)), getX(Settings.boardWidth + 1), getY(4));
        g.drawString(String.format("TIME: %13s", getTime()), getX(Settings.boardWidth + 1), getY(5));
        /**
         * Next piece
         */
        g.drawString("NEXT PIECE:", getX(Settings.boardWidth + 1), getY(6));
        g.drawRect(getX(Settings.boardWidth + 1), getY(7) - 1, 4 * squareWidth() + 2, 4 * squareHeight() + 2);
        if (Settings.nextPiece.shape() != TetrisShape.NoShape) {
            int dx = getX(Settings.boardWidth + 1) + 1;
            int dy = getY(7);
            int sx = (Settings.nextPiece.shape().ordinal() - 1) * 3 * squareWidth();
            g.drawImage(Images.pieces, dx + squareWidth() / 2, dy, (int) (dx + 3.5 * squareWidth()), dy + 4 * squareHeight(), sx, 0, sx + 3 * squareWidth(), 4 * squareHeight(), null);
        }
        /**
         * Hold piece
         */
        g.setColor(Color.lightGray);
        g.drawString("HOLD PIECE:", getX(Settings.boardWidth + 1), getY(12));
        g.drawRect(getX(Settings.boardWidth + 1), getY(13) - 1, 4 * squareWidth() + 2, 4 * squareHeight() + 2);
        if (Settings.holdPiece.shape() != TetrisShape.NoShape) {
            int dx = getX(Settings.boardWidth + 1) + 1;
            int dy = getY(13);
            int sx = (Settings.holdPiece.shape().ordinal() - 1) * 3 * squareWidth();
            g.drawImage(Images.pieces, dx + squareWidth() / 2, dy, (int) (dx + 3.5 * squareWidth()), dy + 4 * squareHeight(), sx, 0, sx + 3 * squareWidth(), 4 * squareHeight(), null);
        }
        /**
         * Level Modes
         */
        g.setColor(Color.lightGray);
        g.drawString("LEVEL MODES:", getX(Settings.boardWidth + 1), getY(18));
        int i = 0;
        LevelMode mode;
        Iterator<LevelMode> it;
        for (it = GlobalSettings.levelModes.iterator(); it.hasNext(); ) {
            mode = it.next();
            int dx = getX(Settings.boardWidth + 1) + (i++ * 30);
            int dy = getY(19);
            int sx = mode.ordinal() * 24;
            g.drawImage(Images.modes, dx, dy, dx + 24, dy + 24, sx, 0, sx + 24, 24, null);
        }
        /**
         * Score texts
         */
        synchronized (Renderables.scores) {
            for (ScoreText score : Renderables.scores) score.render(g);
        }
        if (GlobalSettings.completeTetris)
            Renderables.cTetris.render(g);
        else if (GlobalSettings.tetris)
            Renderables.tetris.render(g);
        /**
         * Paused screen
         */
        if (Settings.isPaused) {
            Color colour = Color.darkGray;
            colour = new Color(colour.getRed(), colour.getGreen(), colour.getBlue(), 0xBA);
            g.setColor(colour);
            g.fillRect(0, 0, this.getWidth(), this.getHeight());
            g.setColor(Color.lightGray);
            String message = "PRESS SPACE TO RESUME...";
            int width = GlobalSettings.fontMetrics.stringWidth(message);
            int height = GlobalSettings.fontMetrics.getHeight();
            g.drawString(message, getWidth() / 2 - width / 2, getHeight() / 2 - height / 2);
        }
    }
}
