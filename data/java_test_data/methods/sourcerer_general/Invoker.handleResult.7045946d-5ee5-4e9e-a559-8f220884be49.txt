public void handleResult(DebuggerResult result) {
    try {
        // first, check whether we had an unexpected exit
        int status = result.getExitStatus();
        switch(status) {
            case Debugger.NORMAL_EXIT:
                // result will be null here for a void call
                watcher.putResult(result.getResultObject(), instanceName, ir);
                ir.setResultObject(result.getResultObject());
                executionEvent.setResultObject(result.getResultObject());
                executionEvent.setResult(ExecutionEvent.NORMAL_EXIT);
                break;
            case // exit through System.exit()
            Debugger.FORCED_EXIT:
                String excMsg = result.getException().getText();
                if (instanceName != null) {
                    // always report System.exit for non-void calls
                    pkg.reportExit(excMsg);
                    watcher.putException(excMsg);
                } else {
                    // for void calls, only report non-zero exits
                    if (!"0".equals(excMsg))
                        pkg.reportExit(excMsg);
                }
                executionEvent.setResult(ExecutionEvent.FORCED_EXIT);
                break;
            case Debugger.EXCEPTION:
                ExceptionDescription exc = result.getException();
                String msg = exc.getText();
                String text = exc.getClassName();
                if (text != null) {
                    text = JavaNames.stripPrefix(text) + ":\n" + msg;
                    pkg.exceptionMessage(exc.getStack(), text);
                    watcher.putException(text);
                } else {
                    pkg.reportException(msg);
                    watcher.putException(msg);
                }
                executionEvent.setResult(ExecutionEvent.EXCEPTION_EXIT);
                break;
            case // terminated by user
            Debugger.TERMINATED:
                watcher.putVMTerminated();
                executionEvent.setResult(ExecutionEvent.TERMINATED_EXIT);
                break;
        }
        // switch
        BlueJEvent.raiseEvent(BlueJEvent.EXECUTION_RESULT, executionEvent);
    } catch (Throwable e) {
        e.printStackTrace(System.err);
    }
}
