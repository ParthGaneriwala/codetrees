public static Table QueryE(String iComparable, int inMemorySize) throws IOException, RecordException {
    statistics();
    File tmp = new File(Utils.FILEPATH_OUTPUT + "queryE.txt");
    File tmp2 = new File(Utils.FILEPATH_WORKDIR + "join.txt");
    File tmp1 = new File(Utils.FILEPATH_WORKDIR + "count.txt");
    File tmp3 = new File(Utils.FILEPATH_WORKDIR + "count2.txt");
    File tmp4 = new File(Utils.FILEPATH_WORKDIR + "projection.txt");
    File tmp5 = new File(Utils.FILEPATH_WORKDIR + "projection2.txt");
    File tmp6 = new File(Utils.FILEPATH_WORKDIR + "projection3.txt");
    Table customer = new Customer();
    Table orders = new Orders();
    Table oTable;
    Table tmpT;
    double sum = 0;
    StringBuffer qp = new StringBuffer();
    tmpT = orders;
    orders = SQL.projection(orders, tmp4, new int[] { orders.getIndex(Orders.FIELD_O_CUSTKEY), orders.getIndex(Orders.FIELD_O_COMMENT) }, inMemorySize);
    qp.append(getQPEntry(tmpT, null, orders, "projection", new String[] { Orders.FIELD_O_CUSTKEY, Orders.FIELD_O_COMMENT }));
    sum += orders.getExecutionTime();
    tmpT = customer;
    customer = SQL.projection(customer, tmp5, new int[] { customer.getIndex(Customer.FIELD_C_CUSTKEY) }, inMemorySize);
    qp.append(getQPEntry(tmpT, null, customer, "projection", new String[] { Customer.FIELD_C_CUSTKEY }));
    sum += customer.getExecutionTime();
    tmpT = orders;
    oTable = SQL.whereLike(orders, tmp3, orders.getIndex(Orders.FIELD_O_COMMENT), iComparable, false, inMemorySize);
    qp.append(getQPEntry(tmpT, null, oTable, "Where Like", new String[] { Orders.FIELD_O_COMMENT }));
    sum += oTable.getExecutionTime();
    tmpT = oTable;
    oTable = SQL.projection(oTable, tmp6, new int[] { oTable.getIndex(Orders.FIELD_O_CUSTKEY) }, inMemorySize);
    qp.append(getQPEntry(tmpT, null, oTable, "Projection", new String[] { Orders.FIELD_O_CUSTKEY }));
    sum += oTable.getExecutionTime();
    tmpT = oTable;
    oTable = SQL.sortJoin(customer, oTable, tmp2, customer.getIndex(Customer.FIELD_C_CUSTKEY), orders.getIndex(Orders.FIELD_O_CUSTKEY), SQL.JOIN_LEFT_WITHOUT_REMOVE, inMemorySize);
    qp.append(getQPEntry(customer, oTable, oTable, "Sort LEFT Join", new String[] { Customer.FIELD_C_CUSTKEY, Orders.FIELD_O_CUSTKEY }));
    sum += oTable.getExecutionTime();
    tmpT = oTable;
    oTable = SQL.sortCount(oTable, tmp1, oTable.getIndex(Customer.FIELD_C_CUSTKEY), oTable.getIndex(Orders.FIELD_O_CUSTKEY), oTable.getSortingOrder(), inMemorySize);
    qp.append(getQPEntry(tmpT, null, oTable, "Sort Count", new String[] { Customer.FIELD_C_CUSTKEY, Orders.FIELD_O_CUSTKEY }));
    sum += oTable.getExecutionTime();
    tmpT = oTable;
    oTable = SQL.sortCount(oTable, tmp3, 1, TPPMS.DESC, inMemorySize);
    qp.append(getQPEntry(customer, orders, oTable, "Sort Count", new String[] { "1" }));
    sum += oTable.getExecutionTime();
    tmpT = oTable;
    oTable = SQL.orderBy(oTable, tmp, new int[] { 1 }, TPPMS.DESC, inMemorySize);
    qp.append(getQPEntry(customer, orders, oTable, "Order By", new String[] { "1" }));
    sum += oTable.getExecutionTime();
    qp.append("Total: " + sum);
    copyAndAppend(oTable, new File(Utils.FILEPATH_OUTPUT + "e.out"), qp.toString(), inMemorySize);
    ProjectGUI.getInstance().update("Memory Execution: QueryE done", 0);
    System.out.println("Done E");
    return oTable;
}
