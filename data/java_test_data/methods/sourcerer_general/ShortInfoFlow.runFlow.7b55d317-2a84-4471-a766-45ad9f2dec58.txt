/*
	 * (non-Javadoc)
	 * 
	 * @see com.sunbay.as.chain.flow.FlowType#drowFlow(javax.servlet.jsp.JspWriter)
	 */
/**
 * public void drowFlow(JspWriter out) {
 * try {
 * out.print("<style>#flow" + this.getChainFlow().getFlowId()
 * + "{POSITION: relative;}</style>");
 * out.print("<div id=\"flow" + this.getChainFlow().getFlowId()
 * + "\" class=\"sqlstyle" + this.getChainFlow().getStyle()
 * + "\"><div class=\"Arrow" + this.getChainFlow().getStyle()
 * + "\"></div>");
 * out.print("<div class=\"flowinfo" + this.getChainFlow().getStyle()
 * + "\" ><a href=\"" + getForward() + "&flowId="
 * + getChainFlow().getFlowId() + "&chainId="
 * + getChainFlow().getChain().getChainId() + "\" >"
 * + this.getChainFlow().getFlowCode() + "</a>");
 * out.print("<a href=\"javascript:FunNext('"
 * + this.getChainFlow().getFlowId()
 * + "',0)\"><font color=blue>--></font></a>"
 * + this.getChainFlow().getNextFlowCode());
 * out.print(" <div class=\"delCls\"><a href=\"javascript:FunDel('"
 * + this.getChainFlow().getFlowId()
 * + "')\" ><img src=images/del.gif border=0></a></div><br>");
 * out.print(this.getChainFlow().getFlowName() + "<br>");
 * out.print("</div></div>");
 * } catch (Exception e) {
 * log.warn("Draw Print Flow [" + this.getChainFlow().toString()
 * + "] error.", e);
 * }
 * }
 */
/*
	 * private int onError(ChainFlow chainFlow, ChainContext chainContext, int
	 * iMsgCode) throws Exception { int iRet = iMsgCode;
	 * chainContext.addSimuList("ErrorCode: " + String.valueOf(iMsgCode));
	 * switch (chainFlow.getOnError()) { case Constants.ONERROR_END: iRet =
	 * iMsgCode; break; case Constants.ONERROR_SKIP: iRet = 0; break; case
	 * Constants.ONERROR_REPEAT: if (repeattimes==-1) { repeattimes =
	 * chainFlow.getRepeattimes(); } chainContext.addSimuList("repeatTime: " +
	 * String.valueOf(repeattimes)); if (repeattimes-- > 0) iRet =
	 * Integer.parseInt(runFlow(chainFlow, chainContext)); else iRet = iMsgCode;
	 * break; } return iRet; }
	 */
public String runFlow(ChainFlow chainFlow, ChainContext chainContext) throws FlowException {
    try {
        List<String> script = chainFlow.getScripts();
        int ret = 98;
        log.info("Start to run the flow [" + chainFlow.getFlowCode() + "]");
        chainContext.addSimuList("<font color=#fbaf5c><b>Start to run the flow [" + chainFlow.getFlowCode() + "]");
        if ("Y".equals(chainFlow.getSkipYn())) {
            log.info("The flow [" + chainFlow.getFlowCode() + "]: skipFlag=true");
            chainContext.addSimuList("The flow [" + chainFlow.getFlowCode() + "]: skipFlag=true<br>=================");
            return "0";
        }
        if (script.size() < 1) {
            log.info("The flow [" + chainFlow.getFlowCode() + "]: there is no statement");
            chainContext.addSimuList("The flow [" + chainFlow.getFlowCode() + "]: there is no statement<br>=================");
            return "0";
        }
        String COM = chainFlow.getAttr1();
        // String pn = chainFlow.getAttr2();
        String userdata = chainContext.getUserdata();
        String[] s = userdata.split("â€»");
        String sqlstr = null;
        ShortInfo sinfo = new ShortInfo(COM);
        for (int i = 0; i < script.size(); i++) {
            sqlstr = script.get(i).toString();
            Iterator<Object> iter = chainContext.getDataMapIterator();
            while (iter.hasNext()) {
                DataMapping dataMapping = (DataMapping) iter.next();
                sqlstr = StringUtils.replace(sqlstr, dataMapping.getFieldName(), dataMapping.getFieldMapping());
            }
            sqlstr = FormulaFactory.getInstance().run(sqlstr);
            System.out.println(sqlstr);
            chainContext.addSimuList(sqlstr);
            ret = sinfo.SendShortInfo(s[0], sqlstr);
            System.out.println(ret);
        }
        sinfo.Close();
        return Integer.toString(ret);
    } catch (Exception e) {
        return "98";
    }
}
