// $ANTLR start "proc_writechar"
public final MyGrammarParser.proc_writechar_return proc_writechar() throws RecognitionException {
    MyGrammarParser.proc_writechar_return retval = new MyGrammarParser.proc_writechar_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token WRITECHAR99 = null;
    Token EPAR100 = null;
    Token STRING101 = null;
    Token DPAR102 = null;
    Token WRITECHAR103 = null;
    Token EPAR104 = null;
    Token IDENTIFIER105 = null;
    Token DPAR106 = null;
    CommonTree WRITECHAR99_tree = null;
    CommonTree EPAR100_tree = null;
    CommonTree STRING101_tree = null;
    CommonTree DPAR102_tree = null;
    CommonTree WRITECHAR103_tree = null;
    CommonTree EPAR104_tree = null;
    CommonTree IDENTIFIER105_tree = null;
    CommonTree DPAR106_tree = null;
    RewriteRuleTokenStream stream_EPAR = new RewriteRuleTokenStream(adaptor, "token EPAR");
    RewriteRuleTokenStream stream_WRITECHAR = new RewriteRuleTokenStream(adaptor, "token WRITECHAR");
    RewriteRuleTokenStream stream_DPAR = new RewriteRuleTokenStream(adaptor, "token DPAR");
    RewriteRuleTokenStream stream_IDENTIFIER = new RewriteRuleTokenStream(adaptor, "token IDENTIFIER");
    RewriteRuleTokenStream stream_STRING = new RewriteRuleTokenStream(adaptor, "token STRING");
    try {
        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:226:16: ( WRITECHAR EPAR STRING DPAR -> ^( PROC_WRITECHAR STRING ) | WRITECHAR EPAR IDENTIFIER DPAR -> ^( PROC_WRITECHAR IDENTIFIER ) )
        int alt19 = 2;
        int LA19_0 = input.LA(1);
        if ((LA19_0 == WRITECHAR)) {
            int LA19_1 = input.LA(2);
            if ((LA19_1 == EPAR)) {
                int LA19_2 = input.LA(3);
                if ((LA19_2 == STRING)) {
                    alt19 = 1;
                } else if ((LA19_2 == IDENTIFIER)) {
                    alt19 = 2;
                } else {
                    NoViableAltException nvae = new NoViableAltException("", 19, 2, input);
                    throw nvae;
                }
            } else {
                NoViableAltException nvae = new NoViableAltException("", 19, 1, input);
                throw nvae;
            }
        } else {
            NoViableAltException nvae = new NoViableAltException("", 19, 0, input);
            throw nvae;
        }
        switch(alt19) {
            case 1:
                // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:226:19: WRITECHAR EPAR STRING DPAR
                {
                    WRITECHAR99 = (Token) match(input, WRITECHAR, FOLLOW_WRITECHAR_in_proc_writechar1764);
                    stream_WRITECHAR.add(WRITECHAR99);
                    EPAR100 = (Token) match(input, EPAR, FOLLOW_EPAR_in_proc_writechar1766);
                    stream_EPAR.add(EPAR100);
                    STRING101 = (Token) match(input, STRING, FOLLOW_STRING_in_proc_writechar1768);
                    stream_STRING.add(STRING101);
                    DPAR102 = (Token) match(input, DPAR, FOLLOW_DPAR_in_proc_writechar1770);
                    stream_DPAR.add(DPAR102);
                    // AST REWRITE
                    // elements: STRING
                    // token labels:
                    // rule labels: retval
                    // token list labels:
                    // rule list labels:
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", retval != null ? retval.tree : null);
                    root_0 = (CommonTree) adaptor.nil();
                    // 226:46: -> ^( PROC_WRITECHAR STRING )
                    {
                        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:226:49: ^( PROC_WRITECHAR STRING )
                        {
                            CommonTree root_1 = (CommonTree) adaptor.nil();
                            root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(PROC_WRITECHAR, "PROC_WRITECHAR"), root_1);
                            adaptor.addChild(root_1, stream_STRING.nextNode());
                            adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;
                }
                break;
            case 2:
                // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:227:5: WRITECHAR EPAR IDENTIFIER DPAR
                {
                    WRITECHAR103 = (Token) match(input, WRITECHAR, FOLLOW_WRITECHAR_in_proc_writechar1786);
                    stream_WRITECHAR.add(WRITECHAR103);
                    EPAR104 = (Token) match(input, EPAR, FOLLOW_EPAR_in_proc_writechar1788);
                    stream_EPAR.add(EPAR104);
                    IDENTIFIER105 = (Token) match(input, IDENTIFIER, FOLLOW_IDENTIFIER_in_proc_writechar1790);
                    stream_IDENTIFIER.add(IDENTIFIER105);
                    DPAR106 = (Token) match(input, DPAR, FOLLOW_DPAR_in_proc_writechar1792);
                    stream_DPAR.add(DPAR106);
                    // AST REWRITE
                    // elements: IDENTIFIER
                    // token labels:
                    // rule labels: retval
                    // token list labels:
                    // rule list labels:
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", retval != null ? retval.tree : null);
                    root_0 = (CommonTree) adaptor.nil();
                    // 227:36: -> ^( PROC_WRITECHAR IDENTIFIER )
                    {
                        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:227:39: ^( PROC_WRITECHAR IDENTIFIER )
                        {
                            CommonTree root_1 = (CommonTree) adaptor.nil();
                            root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(PROC_WRITECHAR, "PROC_WRITECHAR"), root_1);
                            adaptor.addChild(root_1, stream_IDENTIFIER.nextNode());
                            adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;
                }
                break;
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
