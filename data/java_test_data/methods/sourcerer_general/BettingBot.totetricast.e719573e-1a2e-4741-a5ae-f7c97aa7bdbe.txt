public int totetricast(int bot, int winner, int second, int third) {
    int tricastquote = 0;
    Vector<Integer> individualTicket = new Vector<Integer>();
    boolean hitfirst = false;
    boolean hitsecond = false;
    int ticketEntry = 0;
    int tristake = 0;
    int numberfirst = 0;
    int numbersecond = 0;
    int numberthird = 0;
    int winnerscounter = 0;
    for (int j = 0; j < activecount; j++) {
        if (Tricastticket[j] == null) {
        // uninteresting
        } else {
            if (Tricastticket[j].size() == 0) {
            // uninteresting
            } else {
                for (int i = 0; i < Tricastticket[j].size(); i++) {
                    individualTicket = (Tricastticket[j].elementAt(i));
                    hitfirst = false;
                    hitsecond = false;
                    int tribot = individualTicket.elementAt(0);
                    if (tribot == bot) {
                        tristake = individualTicket.elementAt(1);
                        numberfirst = individualTicket.elementAt(3);
                        numbersecond = individualTicket.elementAt(4);
                        numberthird = individualTicket.elementAt(5);
                        for (int k1 = 6; k1 < 6 + numberfirst; k1++) {
                            ticketEntry = individualTicket.elementAt(k1);
                            if (winner == ticketEntry) {
                                hitfirst = true;
                            }
                        }
                        if (hitfirst) {
                            for (int k2 = 6 + numberfirst; k2 < 6 + numberfirst + numbersecond; k2++) {
                                ticketEntry = individualTicket.elementAt(k2);
                                if (second == ticketEntry) {
                                    hitsecond = true;
                                }
                            }
                            if (hitsecond) {
                                for (int k3 = 6 + numberfirst + numbersecond; k3 < 6 + numberfirst + numbersecond + numberthird; k3++) {
                                    ticketEntry = individualTicket.elementAt(k3);
                                    if (third == ticketEntry) {
                                        winnerscounter = winnerscounter + tristake;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    if (winnerscounter == 0) {
        tricastquote = 0;
    } else {
        tricastquote = Math.max(11, (int) Math.floor((tripool[bot] * (100 - tricastDeduction)) / (10 * winnerscounter)));
    }
    return tricastquote;
}
