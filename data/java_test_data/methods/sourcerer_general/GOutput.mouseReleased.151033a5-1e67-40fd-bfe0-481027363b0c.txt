@Override
public void mouseReleased(MouseEvent e) {
    this.setHighlighted(false);
    GraphicView gv = (GraphicView) this.getParent();
    // check trigger
    if (e.isPopupTrigger()) {
        Point point = e.getPoint();
        point.translate(this.getX(), this.getY());
        gv.getPopup().menuOutput(this, point);
        gv.getPopup().getPopup().show(this, e.getX(), e.getY());
    }
    // end check
    GOutput op = this;
    if (gv.getInputFound() != null) {
        // check if there is not already made a connection to the inputport
        boolean empty = true;
        GNode gnode = (GNode) ((GInputPort) gv.getInputFound().getBase()).getBase();
        ArrayList<GConnection> conns = gnode.getConns();
        int i = 0;
        while (i < conns.size() && empty) {
            if (conns.get(i).getClass().isAssignableFrom(GHandleConnection.class)) {
                GHandleConnection ghc = (GHandleConnection) conns.get(i);
                GInputPort gip = ghc.getInput();
                if (((GInputPort) gv.getInputFound().getBase()).equals(gip)) {
                    empty = false;
                }
            }
            i++;
        }
        if (empty) {
            GInputPort ip = (GInputPort) gv.getInputFound().getBase();
            GOutputPort gop = (GOutputPort) this.getBase();
            if (GTransmitterNode.class.isAssignableFrom(gv.getInputFound().getBase().getClass()) && GTransmitterNode.class.isAssignableFrom(((GOutputPort) op.getBase()).getBase().getClass())) {
                GTransmitterNode t1 = (GTransmitterNode) gv.getInputFound().getBase();
                GTransmitterNode t2 = (GTransmitterNode) ((GOutputPort) op.getBase()).getBase();
                if (t1.getBase() != t2.getBase()) {
                    gv.notifyObservers(new AddConnectionCommand(ip, op, this, gv.getRootPane().getLayeredPane()));
                    gv.notifyObservers(new DeleteCommand(this));
                    gv.notifyObservers(new AddAttachmentCommand(Constants.getOutputString(), gop));
                } else {
                    JOptionPane.showMessageDialog(gv.getParent(), LabelReader.getInstance().getString("InputOutputSameParentnode"), LabelReader.getInstance().getString("Error"), JOptionPane.ERROR_MESSAGE);
                    gv.notifyObservers(new DeleteCommand(this));
                    gv.notifyObservers(new AddAttachmentCommand(Constants.getOutputString(), gop));
                }
            } else if (gv.getInputFound().getBase() != ((GOutputPort) op.getBase()).getBase()) {
                gv.notifyObservers(new AddConnectionCommand(ip, op, this, gv.getRootPane().getLayeredPane()));
                gv.notifyObservers(new DeleteCommand(this));
                gv.notifyObservers(new AddAttachmentCommand(Constants.getOutputString(), gop));
            } else {
                JOptionPane.showMessageDialog(gv.getParent(), LabelReader.getInstance().getString("InputOutputSameParentnode"), LabelReader.getInstance().getString("Error"), JOptionPane.ERROR_MESSAGE);
                gv.notifyObservers(new DeleteCommand(this));
                // gv.notifyObservers(new AddAttachmentCommand(Constants.getOutputString(), ip));
                gv.notifyObservers(new AddAttachmentCommand(Constants.getOutputString(), gop));
            }
        } else {
            JOptionPane.showMessageDialog(gv.getParent(), LabelReader.getInstance().getString("InputOccupied"), LabelReader.getInstance().getString("Error"), JOptionPane.ERROR_MESSAGE);
        }
    }
}
