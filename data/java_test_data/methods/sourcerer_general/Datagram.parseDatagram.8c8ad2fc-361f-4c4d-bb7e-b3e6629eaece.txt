/**
 * Parses the given string and returns a Datagram object corresponding
 * to the datagram represented by the string.
 * Some datagrams contain unparseable data (DG_DIALOG_DATA and DG_SJI_AD for
 * example), since there is no way to know what these datagrams are, this method
 * will be attempt to parse them. If they turn out to be in a really bad format (one which
 * breaks the parser), the only way to obtain the information sent in the datagram
 * will be via the {@link #getContent()} method. Even if parsing succeeds,
 * the get<argumentType>(int) methods will probably return garbage. If parsing
 * does not succeed, all get<argumentType>(int) methods will throw DatagramFormatException.
 *
 * @param datagram The string representing the datagram.
 *
 * @return The Datagram object representing the parsed datagram.
 *
 * @throws DatagramFormatException if the given string is formatted so badly,
 * it doesn't even get recognized as a datagram (if there is no dgNumber for example).
 */
public static Datagram parseDatagram(String datagram) {
    checkFormat(datagram);
    boolean parsed = true;
    byte[] content = null;
    Vector args = new Vector();
    String dg_id = datagram.substring(DG_START_LENGTH, datagram.indexOf(' ', DG_START_LENGTH));
    int dgNumber = Integer.parseInt(dg_id);
    try {
        String arguments = datagram.substring(DG_START_LENGTH + dg_id.length() + 1, datagram.length() - DG_END_LENGTH);
        content = arguments.getBytes();
        arguments = arguments + " ";
        int index = 0;
        StringBuffer argument = new StringBuffer();
        boolean inStringType1 = false;
        boolean inStringType2 = false;
        while (index < arguments.length()) {
            if (arguments.startsWith(" ", index) && (!inStringType1) && (!inStringType2)) {
                args.addElement(argument.toString());
                argument = new StringBuffer();
            } else {
                if (arguments.startsWith(STRING_START_1, index)) {
                    if (!inStringType1)
                        inStringType1 = true;
                } else if (arguments.startsWith(STRING_START_2, index)) {
                    if (!inStringType1)
                        inStringType2 = true;
                } else if (arguments.startsWith(STRING_END_1, index)) {
                    if (inStringType1)
                        inStringType1 = false;
                } else if (arguments.startsWith(STRING_END_2, index)) {
                    if (inStringType2)
                        inStringType2 = false;
                }
                argument.append(arguments.charAt(index));
            }
            index++;
        }
    } catch (Exception e) {
        if (DEBUG)
            e.printStackTrace();
        parsed = false;
    }
    if (content == null)
        throw new DatagramFormatException();
    if (parsed) {
        String[] dgArguments = new String[args.size()];
        args.copyInto(dgArguments);
        return new Datagram(dgNumber, dgArguments, content);
    } else
        return new Datagram(dgNumber, null, content);
}
