@Override
public void mouseClicked(MouseEvent e) {
    int x = e.getX();
    int y = e.getY();
    int row = tree.getRowForLocation(x, y);
    /* for getting absolutefilepath */
    TreePath path = tree.getPathForRow(row);
    try {
        if (path != null) {
            String path_str = path.toString();
            path_str = path_str.replace("[", "");
            path_str = path_str.replace("]", "");
            String[] path_var = path_str.split(",");
            String absult_path = "";
            String absult_path1 = "";
            for (int i = 1; i < path_var.length; i++) {
                if (i == 1) {
                    absult_path = path_var[i].replace("\\", "/");
                    absult_path1 = absult_path;
                } else {
                    absult_path = absult_path + "\\" + path_var[i].trim();
                    absult_path1 = absult_path1 + "\\" + path_var[i].trim();
                }
            }
            dtm = (DefaultTableModel) MainForm.fileTable.getModel();
            dtm.getDataVector().removeAllElements();
            /*file list are generating here*/
            try {
                FileList filelist = new FileList();
                /*filelist are store in a hashmap*/
                HashMap hm = filelist.setRootDir(absult_path1);
                int i = 0;
                Date date;
                String strDate;
                SimpleDateFormat sdf;
                // To get the FileType
                JFileChooser filechooser = new JFileChooser();
                String filetype;
                String size = null;
                long kb = 0, gb = 0, mb = 0;
                long filesize;
                while (!hm.isEmpty()) {
                    String filepath = (String) hm.get(i);
                    File file = new File(filepath);
                    filetype = filechooser.getTypeDescription(file);
                    date = new Date();
                    sdf = new SimpleDateFormat("dd/MM/yy hh:mm:ss");
                    strDate = sdf.format(date);
                    filesize = file.length();
                    hm.remove(i);
                    if (filesize < 1024) {
                        size = String.valueOf(filesize) + "" + "bytes";
                    } else if (filesize >= 1024 || filesize < 1024 * 1024) {
                        kb = filesize / 1024;
                        size = String.valueOf(kb) + " " + "KB";
                    } else if (filesize >= 1024 * 1024 || filesize < 1024 * 1024 * 1024) {
                        mb = filesize / (1024 * 1024);
                        size = String.valueOf(mb) + " " + "MB";
                    } else if (filesize >= 1024 * 1024 * 1024) {
                        gb = filesize / (1024 * 1024 * 1024);
                        size = String.valueOf(gb) + " " + "GB";
                    }
                    /*an object Array to get the File */
                    Object[] obj = { null, file.getName(), hm.get(i), size, filetype, strDate };
                    // adding the filedata in  a fileTable row
                    dtm.addRow(obj);
                    i++;
                }
            } catch (NullPointerException ex) {
            }
        }
    } catch (NullPointerException ex) {
    }
    if (path != null) {
        CheckNode node = (CheckNode) path.getLastPathComponent();
        boolean isSelected = !(node.isSelected());
        node.setSelected(isSelected);
        if (node.getSelectionMode() == CheckNode.DIG_IN_SELECTION) {
            if (node.isSelected) {
                tree.expandPath(path);
            } else {
                tree.collapsePath(path);
            }
        }
        ((DefaultTreeModel) tree.getModel()).nodeChanged(node);
        if (row == 0) {
            // tree.revalidate();
            tree.repaint();
        }
    }
}
