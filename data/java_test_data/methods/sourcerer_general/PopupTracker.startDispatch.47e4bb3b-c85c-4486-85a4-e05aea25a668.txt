@Override
public void startDispatch(DispatcherPort dispatcher, TriggerPort target) {
    sync = BidirectionalHashMap.getInstance();
    if (sync.get(target) != null && GConnection.class.isAssignableFrom((sync.get(target)).getClass())) {
        GTriggerConnection g = (GTriggerConnection) sync.get(target);
        GTrigger gi = g.getTrigger();
        try {
            Thread.sleep(Constants.getHighlighttime());
            g.setHighlighted(true);
            gi.setHighlighted(true);
            gview.giveAttention();
            Thread.sleep(Constants.getHighlighttime());
            g.setHighlighted(false);
            gi.setHighlighted(false);
            gview.giveAttention();
            Thread.sleep(Constants.getHighlighttime());
            g.setHighlighted(true);
            gi.setHighlighted(true);
            gview.giveAttention();
            Thread.sleep(Constants.getHighlighttime());
            g.setHighlighted(false);
            gi.setHighlighted(false);
            gview.giveAttention();
            Thread.sleep(Constants.getHighlighttime());
            g.setHighlighted(true);
            gi.setHighlighted(true);
            gview.giveAttention();
            Thread.sleep(Constants.getHighlighttime());
            g.setHighlighted(false);
            gi.setHighlighted(false);
            gview.giveAttention();
            Thread.sleep(Constants.getPausetime());
            JOptionPane.showMessageDialog(gview.getParent(), "DispatcherPort " + dispatcher + ": " + LabelReader.getInstance().getString("dispatchingStarted"));
        } catch (InterruptedException ex) {
            Logger.getLogger(HighLightTracker.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
