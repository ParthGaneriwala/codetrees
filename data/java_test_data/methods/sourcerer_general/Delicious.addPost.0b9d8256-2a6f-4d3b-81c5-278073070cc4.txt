public boolean addPost(String url, String description, String extended, String tags, Date date, boolean replace, boolean shared) {
    clearResultMetaInformation();
    boolean addPostResult = false;
    StringBuffer result = new StringBuffer();
    PostMethod post = new PostMethod(apiEndpoint + DeliciousConstants.POSTS_ADD);
    post.setDoAuthentication(true);
    if (DeliciousUtils.checkNullOrBlank(url)) {
        return false;
    }
    if (DeliciousUtils.checkNullOrBlank(description)) {
        return false;
    }
    NameValuePair urlParam = new NameValuePair(DeliciousConstants.URL_PARAMETER, url);
    post.addParameter(urlParam);
    NameValuePair descriptionParam = new NameValuePair(DeliciousConstants.DESCRIPTION_PARAMETER, description);
    post.addParameter(descriptionParam);
    if (!DeliciousUtils.checkNullOrBlank(extended)) {
        NameValuePair extendedParam = new NameValuePair(DeliciousConstants.EXTENDED_PARAMETER, extended);
        post.addParameter(extendedParam);
    }
    if (!DeliciousUtils.checkNullOrBlank(tags)) {
        NameValuePair tagsParam = new NameValuePair(DeliciousConstants.TAGS_PARAMETER, tags);
        post.addParameter(tagsParam);
    }
    if (date != null) {
        NameValuePair dtParam = new NameValuePair(DeliciousConstants.DT_PARAMETER, DeliciousUtils.getUTCDate(date));
        post.addParameter(dtParam);
    }
    NameValuePair replaceParam = new NameValuePair();
    replaceParam.setName(DeliciousConstants.REPLACE_PARAMETER);
    replaceParam.setValue(DeliciousConstants.NO);
    if (replace) {
        replaceParam.setValue(DeliciousConstants.YES);
        post.addParameter(replaceParam);
    }
    if (!shared) {
        NameValuePair sharedParam = new NameValuePair();
        sharedParam.setName(DeliciousConstants.SHARED_PARAMETER);
        sharedParam.setValue(DeliciousConstants.NO);
        post.addParameter(sharedParam);
    }
    try {
        post.addRequestHeader("Content-Type", "application/x-www-form-urlencoded; charset=utf-8");
        httpResult = httpClient.executeMethod(post);
        checkNotAuthorized(httpResult);
        logger.debug("Result: " + httpResult);
        if (post.getResponseBodyAsStream() != null) {
            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(post.getResponseBodyAsStream(), DeliciousUtils.UTF_8));
            String input;
            while ((input = bufferedReader.readLine()) != null) {
                result.append(input).append(DeliciousUtils.LINE_SEPARATOR);
            }
            post.releaseConnection();
            if (result.indexOf(DeliciousConstants.CODE_DONE) != -1) {
                addPostResult = true;
            }
        }
    } catch (IOException e) {
        logger.error(e);
    }
    return addPostResult;
}
