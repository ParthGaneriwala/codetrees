public void testEscrituraFichero() {
    // Copia del fichero de pruebas con el nombre pom.xml
    try {
        FileUtils.copyFile(new File(SRC_TEST_CONFIG, "pom_testEscrituraFichero.xml"), new File(SRC_TEST_CONFIG, "pom.xml"));
    } catch (IOException e) {
        fail("No se puede copiar fichero " + e);
    }
    // Cambio de version que se quiere realizar, eun Hashtable.
    Artifact artifactOrigen = new Artifact();
    artifactOrigen.setGroupId("com.chuidiang");
    artifactOrigen.setArtifactId("pom_version");
    artifactOrigen.setVersion("1.1.0");
    Artifact artifactDestino = new Artifact();
    artifactDestino.setGroupId("com.chuidiang");
    artifactDestino.setArtifactId("pom_version");
    artifactDestino.setVersion("1.1.1");
    Hashtable<Artifact, Artifact> cambios = new Hashtable<Artifact, Artifact>();
    cambios.put(artifactOrigen, artifactDestino);
    // Instanciacion de la clase, se supone que hace los cambios.
    new CambiaPom(cambios, new File(SRC_TEST_CONFIG), false, new SystemStreamLog(), null);
    // Comprobacion de que existen ambos ficheros.
    File pom = new File(SRC_TEST_CONFIG, "pom.xml");
    File pom1 = new File(SRC_TEST_CONFIG, "pom1.xml");
    assertTrue(pom.exists());
    assertTrue(pom1.exists());
    // antigua y pom.xml la nueva.
    try {
        BufferedReader brentrada = new BufferedReader(new FileReader(pom));
        BufferedReader bsalida = new BufferedReader(new FileReader(pom1));
        // La escritura del fichero puede cambiar la cabecera xml, por lo
        // que
        // saltamos la cabecera hasta el primert tag groupId.
        String lineaEntrada = avanzaHastaPrimerGroupId(brentrada);
        String lineaEntrada2 = avanzaHastaPrimerGroupId(bsalida);
        // Comparaciï¿½n de ambos ficheros, linea a linea.
        while (null != lineaEntrada) {
            if (lineaEntrada.indexOf("1.1.1") == -1) {
                assertEquals(lineaEntrada, lineaEntrada2);
            } else {
                assertEquals("<version>1.1.1</version>", lineaEntrada.trim());
                assertEquals("<version>1.1.0</version>", lineaEntrada2.trim());
            }
            lineaEntrada = brentrada.readLine();
            lineaEntrada2 = bsalida.readLine();
        }
        // Comprobacion de que ambos ficheros han llegado a fin de fichero
        assertNull(lineaEntrada);
        assertNull(lineaEntrada2);
        brentrada.close();
        bsalida.close();
    } catch (Exception e) {
        fail("no se puede leer fichero " + e);
    }
}
