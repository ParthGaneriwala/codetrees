public void writePcxHeader(LEDataOutputStream aDataOutStream, AdaptiveRasterImage aJimiImage) {
    byte[] padding = new byte[54];
    byte[] palette = new byte[48];
    byte[] zero = new byte[2];
    // x of left upper corner
    int Xstart = 0;
    // y of left upper corner
    int Ystart = 0;
    // x of bottom right corner
    int Xend = 0;
    // y of bottom right corner
    int Yend = 0;
    // first get some required information from JimiImage
    int nWidth = aJimiImage.getWidth();
    int nHeight = aJimiImage.getHeight();
    int nBytesPerLine = nWidth;
    Xend = Xstart + nWidth - 1;
    Yend = Xstart + nHeight - 1;
    try {
        // now write the header for the PCX file
        // PCX id number
        aDataOutStream.write(0x0A);
        // version number
        aDataOutStream.write((byte) (nVersion));
        // encoding format - RLE
        aDataOutStream.write((byte) (1));
        // Bits per pixel
        aDataOutStream.write((byte) (nBitsPerPixel));
        // x of left upper corner
        aDataOutStream.writeShort(0);
        // y of left upper corner
        aDataOutStream.writeShort(0);
        // x of bottom right corner
        aDataOutStream.writeShort(Xend);
        // y of bottom right corner
        aDataOutStream.writeShort(Yend);
        // horisontal res
        aDataOutStream.writeShort(nWidth);
        // vertical res
        aDataOutStream.writeShort(nHeight);
        if (COLOR_MODEL == 0) {
            IndexColorModel icm = (IndexColorModel) aJimiImage.getColorModel();
            // 16 Color EGA Palette
            palette = makePalette(icm, 16);
        }
        // zero's if DirectColorModel
        aDataOutStream.write(palette);
        // reserved - always 0
        aDataOutStream.write(0x00);
        // number of bit planes
        aDataOutStream.write((byte) (nBitPlanes));
        // Bytes per Scan-line
        aDataOutStream.writeShort(nBytesPerLine);
        // palette type
        aDataOutStream.writeShort(nPaletteType);
        /**
         * the next 2 values are the screen rez at which the image was created.  JimiImage cannot currently
         * provide this information, so the current screen size of the host computer is being stored.  *
         */
        Toolkit MyToolkit = Toolkit.getDefaultToolkit();
        aDataOutStream.writeShort(MyToolkit.getScreenSize().width);
        aDataOutStream.writeShort(MyToolkit.getScreenSize().height);
        // that's it for the header - just need to fill out the rest of the 128 byte space (54 bytes) with // 0's.
        aDataOutStream.write(padding);
        aDataOutStream.flush();
    } catch (IOException e) {
        nState = ERROR;
    }
}
