public static double simWord(Word w1, Word w2) {
    // ��ʺ�ʵ�ʵ����ƶ�Ϊ��
    if (w1.isStructruralWord() != w2.isStructruralWord()) {
        return 0;
    }
    // ���
    if (w1.isStructruralWord() && w2.isStructruralWord()) {
        List<String> list1 = w1.getStructruralWords();
        List<String> list2 = w2.getStructruralWords();
        return simList(list1, list2);
    }
    // ʵ��
    if (!w1.isStructruralWord() && !w2.isStructruralWord()) {
        // ʵ�ʵ����ƶȷ�Ϊ4������
        // ������ԭ���ƶ�
        String firstPrimitive1 = w1.getFirstPrimitive();
        String firstPrimitive2 = w2.getFirstPrimitive();
        double sim1 = simPrimitive(firstPrimitive1, firstPrimitive2);
        // ����������ԭ���ƶ�
        List<String> list1 = w1.getOtherPrimitives();
        List<String> list2 = w2.getOtherPrimitives();
        double sim2 = simList(list1, list2);
        // ��ϵ��ԭ���ƶ�
        Map<String, List<String>> map1 = w1.getRelationalPrimitives();
        Map<String, List<String>> map2 = w2.getRelationalPrimitives();
        double sim3 = simMap(map1, map2);
        // ��ϵ�������ƶ�
        map1 = w1.getRelationSimbolPrimitives();
        map2 = w2.getRelationSimbolPrimitives();
        double sim4 = simMap(map1, map2);
        double product = sim1;
        double sum = beta1 * product;
        product *= sim2;
        sum += beta2 * product;
        product *= sim3;
        sum += beta3 * product;
        product *= sim4;
        sum += beta4 * product;
        return sum;
    }
    return 0.0;
}
