public AltaRicaNode compile(AltaRicaParseModel pmodel) {
    AltaRicaNode node = new AltaRicaNode();
    this.anode = node;
    Hashtable<String, Var> states = new Hashtable<String, Var>();
    Hashtable<String, Var> flow = new Hashtable<String, Var>();
    Hashtable<String, Event> events = new Hashtable<String, Event>();
    node.setName(this.name);
    for (Var v : state_list) {
        compileVar(pmodel, node, v);
        if (states.put(v.getId(), v) != null) {
            System.out.println("Duplicate Variable " + v);
        }
    }
    node.setStates(states);
    for (Var v : flow_list) {
        compileVar(pmodel, node, v);
        if ((flow.put(v.getId(), v) != null) || states.contains(v.getId())) {
            System.out.println("Duplicate Variable " + v);
        }
    }
    node.setFlows(flow);
    for (Event e : event_list) {
        events.put(e.getId(), e);
    }
    if (events.contains(Event.getEpsilon().getId()) == false) {
        events.put(Event.getEpsilon().getId(), Event.getEpsilon());
    }
    node.setEvents(events);
    for (String[] str : sub_list) {
        AltaRicaNode sub = null;
        AltaRicaParseNode pnode = pmodel.getParsedNodes().get(str[1]);
        if (pnode.isCompiled() == false) {
            sub = pnode.compile(pmodel);
        } else {
            sub = pmodel.getParsedNodes().get(str[1]).anode;
        }
        node.addSub(str[0], sub);
    }
    for (Sync sync : sync_list) {
        compileSync(pmodel, node, sync);
    }
    compileUpdates(node, init_list, true);
    node.setInit(init_list);
    compileTransitions(node);
    node.setTrans(trans_list);
    for (Expression expr : assert_list) {
        compileExpression(node, expr);
    }
    node.setAsserts(assert_list);
    this.compiled = true;
    return node;
}
