public void doit(HttpServletRequest req, HttpServletResponse resp) throws IOException {
    UserService userService = UserServiceFactory.getUserService();
    User user = userService.getCurrentUser();
    /*
	        InputStream in = req.getInputStream();
	        //initialize DOM
	        DocumentBuilder domBuilder = null;
	        DocumentBuilderFactory domFactory = null;
	        Document doc = null;
	        boolean xmlValid = false;
	        String errMessage = "";
	        
	        try {
		        domFactory = DocumentBuilderFactory.newInstance();
		        domBuilder = domFactory.newDocumentBuilder();
		    }
		    catch(FactoryConfigurationError exp){
		        System.err.println("Error: DOM Configuration");
		    }
		          catch(ParserConfigurationException exp){
		        System.err.println("Error: DOM Parse");
		    }
		          catch(Exception exp) {
		        System.err.println("Error: DOM Validation");
		    }
	    
		      try 
		      {
			       doc = domBuilder.parse(in);
			       xmlValid = true;
		      }
		      catch (SAXException e) {
		        System.err.println("Error: SAX Parse");
		        xmlValid = false;
		        errMessage = e.getMessage();
		      }
		      catch (IOException e) { 
		    	  System.err.println("Error: I/O");
		    	  errMessage = e.getMessage();
		      }
		      */
    /*
		      int contentLength = req.getContentLength();

		      byte[] buffer = new byte[contentLength];
		      int total_read = 0;
		      StringBuffer sb = new StringBuffer(contentLength);
		      //sb.append(contentLength);
		      //System.out.println("QQQ: TOTAL SIZE: " + contentLength);
		      
		      String content = null;
		      while (total_read < contentLength)
		      {
		          total_read += in.read(buffer);
		          //System.out.println("QQQ: total_read: " + total_read);
		          content = new String(buffer);
		          
		          // out of memory very strange???
		          //sb.append(content);
		          //System.out.println("QQQ: content: " + content);
		      }
		      */
    StringBuffer sb = new StringBuffer();
    sb.append("transactionId:");
    sb.append(req.getParameter("transactionId"));
    sb.append(" --- ");
    Enumeration<String> enum1 = req.getParameterNames();
    Map<String, String> map = new HashMap<String, String>();
    while (enum1.hasMoreElements()) {
        String name = enum1.nextElement();
        sb.append(name);
        sb.append("=");
        sb.append(req.getParameter(name));
        sb.append("&");
        map.put(name, req.getParameter(name));
    }
    Notify notify = new Notify();
    notify.setAuthor(user);
    notify.setCreated(new Date());
    notify.setModified(new Date());
    notify.setData(new Text(sb.toString()));
    notify.setCallerReference(req.getParameter("callerReference"));
    notify.setTransactionAmount(req.getParameter("transactionAmount"));
    notify.setTransactionDate(req.getParameter("transactionDate"));
    notify.setRecipientEmail(req.getParameter("recipientEmail"));
    notify.setBuyerName(req.getParameter("buyerName"));
    boolean isValid = false;
    try {
        isValid = IPNValidator.isValidIPNPost(map);
    } catch (SignatureException e) {
    }
    notify.setValid(isValid);
    // notify.setData(content);
    // notify.setData(req.getParameterNames().toString());
    // notify.setData(doc.getTextContent());
    // must http get to move.brooklynmarathon.com to record payment success.
    // if transactionStatus=SUCCESS
    PersistenceManager pm = PMF.get().getPersistenceManager();
    if ("SUCCESS".equals(req.getParameter("transactionStatus"))) {
        String query1 = "select from " + Customer.class.getName() + " where CallerReference == callerReferenceParameter parameters String callerReferenceParameter";
        List<Customer> Customers = (List<Customer>) pm.newQuery(query1).execute(notify.getCallerReference());
        if (Customers.isEmpty()) {
        } else {
            for (Customer c : Customers) {
                // c.getCallerReference()
                try {
                    URL url = new URL(CALLBACK + c.getEvententryid() + "/" + c.getCallerReference() + "/" + URLEncoder.encode(req.getParameter("transactionAmount"), "UTF-8"));
                    HttpURLConnection connection = (HttpURLConnection) url.openConnection();
                    connection.connect();
                    notify.setCallbackStatus(connection.getResponseCode());
                    if (connection.getResponseCode() == HttpURLConnection.HTTP_OK) {
                    } else {
                    }
                } catch (MalformedURLException e) {
                    System.out.println("e2: " + e);
                }
            }
        }
    }
    try {
        pm.makePersistent(notify);
    } finally {
        pm.close();
    }
    resp.setContentType("text/plain");
    resp.getWriter().println("ok");
}
