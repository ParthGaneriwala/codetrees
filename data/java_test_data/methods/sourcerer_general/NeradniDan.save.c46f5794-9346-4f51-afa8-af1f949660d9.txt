public String save() {
    FacesContext context = FacesContext.getCurrentInstance();
    HttpSession session = (HttpSession) context.getExternalContext().getSession(false);
    korisnik = (Korisnik) session.getAttribute("korisnik");
    SimpleDateFormat formatter = new SimpleDateFormat("dd.MM.yyyy.");
    try {
        datum = formatter.parse(datumOdString);
        if (datumDoString == null || "".equals(datumDoString)) {
            datumDoString = datumOdString;
        }
        datumDo = formatter.parse(datumDoString);
    } catch (ParseException ex) {
        context.addMessage(null, new FacesMessage("Gre≈°ka pri obradi datuma"));
        return Korisnik.ACTION_ADMIN;
    }
    Calendar datOd = new GregorianCalendar();
    datOd.setTime(datum);
    Calendar datDo = new GregorianCalendar();
    datDo.setTime(datumDo);
    List<Date> datumi = new ArrayList<Date>();
    while (datOd.before(datDo)) {
        datumi.add(new Date(datOd.getTimeInMillis()));
        datOd.add(Calendar.DAY_OF_MONTH, 1);
    }
    datumi.add(datumDo);
    Connection con = null;
    Statement stmt = null;
    ResultSet rs = null;
    try {
        con = DB.getConnection();
        stmt = con.createStatement();
        StringBuffer query = new StringBuffer("insert into neradni_dani(sid, datum, vreme_evidentiranja, korisnik, razlog) values ");
        Timestamp sada = new Timestamp(System.currentTimeMillis());
        Iterator iter = datumi.iterator();
        while (iter.hasNext()) {
            Date dat = (Date) iter.next();
            if (salaId == -1) {
                List<Sala> tmpSale = new Sala().getSaleSve();
                Iterator iterSale = tmpSale.iterator();
                while (iterSale.hasNext()) {
                    Sala s = (Sala) iterSale.next();
                    query.append("(" + s.getSid() + ", '" + new java.sql.Date(dat.getTime()) + "', '" + sada + "', " + korisnik.getKid() + ", '" + razlog + "')");
                    if (iterSale.hasNext() || iter.hasNext()) {
                        query.append(",");
                    }
                }
            } else {
                query.append("(" + salaId + ", '" + new java.sql.Date(dat.getTime()) + "', '" + sada + "', " + korisnik.getKid() + ", '" + razlog + "')");
                if (iter.hasNext()) {
                    query.append(",");
                }
            }
        }
        query.append(";");
        stmt.executeUpdate(query.toString());
        stmt.close();
        con.close();
    } catch (SQLException sqle) {
        sqle.printStackTrace();
        if (con != null) {
            try {
                con.close();
            } catch (Exception exc) {
            }
        }
    }
    return Korisnik.ACTION_ADMIN;
}
