public static void main(String[] args) {
    for (int k = 2; k < 301; k++) {
        try {
            File DWGAMFile = new File("D:/synthLandscan/randomStarts/momentData/GAM/DWGAMClassifications" + k + ".csv");
            File simpleGAMFile = new File("D:/synthLandscan/randomStarts/momentData/GAM/simpleGAMClassifications" + k + ".csv");
            // File DWFZFile = new File("D:/synthLandscan/momentData/fiveClassPACorrected/FZ/DWFZClassifications" + k + ".csv");
            // File simpleFZFile = new File("D:/synthLandscan/momentData/fiveClassPACorrected/FZ/simpleFZClassifications" + k + ".csv");
            // File DWBaseFile = new File("D:/synthLandscan/momentData/fiveClassPACorrected/base/DWbaseClassifications" + k + ".csv");
            // File simpleBaseFile = new File("D:/synthLandscan/momentData/fiveClassPACorrected/base/simplebaseClassifications" + k + ".csv");
            FileReader DWGAMReader = new FileReader(DWGAMFile);
            FileReader simpleGAMReader = new FileReader(simpleGAMFile);
            // FileReader DWFZReader = new FileReader(DWFZFile);
            // FileReader simpleFZReader = new FileReader(simpleFZFile);
            // FileReader DWBaseReader = new FileReader(DWBaseFile);
            // FileReader simpleBaseReader = new FileReader(simpleBaseFile);
            CSVParser DWGAMParser = new CSVParser(DWGAMReader);
            CSVParser simpleGAMParser = new CSVParser(simpleGAMReader);
            // CSVParser DWFZParser = new CSVParser(DWFZReader);
            // CSVParser simpleFZParser = new CSVParser(simpleFZReader);
            // CSVParser DWBaseParser = new CSVParser(DWBaseReader);
            // CSVParser simpleBaseParser = new CSVParser(simpleBaseReader);
            String[][] DWGAMValues = DWGAMParser.getAllValues();
            String[][] simpleGAMValues = simpleGAMParser.getAllValues();
            // String[][] DWFZValues = DWFZParser.getAllValues();
            // String[][] simpleFZValues = simpleFZParser.getAllValues();
            // String[][] DWBaseValues = DWBaseParser.getAllValues();
            // String[][] simpleBaseValues = simpleBaseParser.getAllValues();
            // each of the values arrays should be the same size.
            // row 0 is column headers
            classNames = DWGAMValues[0];
            for (int j = 1; j < DWGAMValues.length; j++) {
                String[] DWGAMThisRowStrings = DWGAMValues[j];
                // -1 because first column is the operator
                double[] DWGAMThisRowDoubles = new double[DWGAMThisRowStrings.length - 1];
                for (int i = 0; i < DWGAMThisRowDoubles.length; i++) {
                    DWGAMThisRowDoubles[i] = Double.parseDouble(DWGAMThisRowStrings[i + 1]);
                }
                String[] simpleGAMThisRowStrings = simpleGAMValues[j];
                // -1 because first column is the operator
                double[] simpleGAMThisRowDoubles = new double[simpleGAMThisRowStrings.length - 1];
                for (int i = 0; i < simpleGAMThisRowDoubles.length; i++) {
                    simpleGAMThisRowDoubles[i] = Double.parseDouble(simpleGAMThisRowStrings[i + 1]);
                }
                // String[] DWFZThisRowStrings = DWFZValues[j];
                // double[] DWFZThisRowDoubles = new double[DWFZThisRowStrings.length - 1];  //-1 because first column is the operator
                // for (int i = 0; i < DWFZThisRowDoubles.length; i++){
                // DWFZThisRowDoubles[i] = Double.parseDouble(DWFZThisRowStrings[i+1]);
                // }
                // 
                // String[] simpleFZThisRowStrings = simpleFZValues[j];
                // double[] simpleFZThisRowDoubles = new double[simpleFZThisRowStrings.length - 1];  //-1 because first column is the operator
                // for (int i = 0; i < simpleFZThisRowDoubles.length; i++){
                // simpleFZThisRowDoubles[i] = Double.parseDouble(simpleFZThisRowStrings[i+1]);
                // }
                // 
                // String[] DWBaseThisRowStrings = DWBaseValues[j];
                // double[] DWBaseThisRowDoubles = new double[DWBaseThisRowStrings.length - 1];  //-1 because first column is the operator
                // for (int i = 0; i < DWBaseThisRowDoubles.length; i++){
                // DWBaseThisRowDoubles[i] = Double.parseDouble(DWBaseThisRowStrings[i+1]);
                // }
                // 
                // String[] simpleBaseThisRowStrings = simpleBaseValues[j];
                // double[] simpleBaseThisRowDoubles = new double[simpleBaseThisRowStrings.length - 1];  //-1 because first column is the operator
                // for (int i = 0; i < simpleBaseThisRowDoubles.length; i++){
                // simpleBaseThisRowDoubles[i] = Double.parseDouble(simpleBaseThisRowStrings[i+1]);
                // }
                // figure out the winner for each row of doubles.
                String[] DWGAMWinners = new String[DWGAMValues.length];
                String[] simpleGAMWinners = new String[simpleGAMValues.length];
                // String[] DWFZWinners = new String[DWFZValues.length];
                // String[] simpleFZWinners = new String[simpleFZValues.length];
                // String[] DWBaseWinners = new String[DWBaseValues.length];
                // String[] simpleBaseWinners = new String[simpleBaseValues.length];
                int[] topIndexes = new int[6];
                double[] topMasses = new double[6];
                Arrays.fill(topIndexes, -1);
                Arrays.fill(topMasses, -1);
                for (int i = 0; i < DWGAMThisRowDoubles.length - 1; i++) {
                    // stop early because I don't want THETA to win
                    if (DWGAMThisRowDoubles[i] > topMasses[0]) {
                        topIndexes[0] = i;
                        topMasses[0] = DWGAMThisRowDoubles[i];
                    }
                    if (simpleGAMThisRowDoubles[i] > topMasses[1]) {
                        topIndexes[1] = i;
                        topMasses[1] = simpleGAMThisRowDoubles[i];
                    }
                // if (DWFZThisRowDoubles[i] > topMasses[2]){
                // topIndexes[2] = i;
                // topMasses[2] = DWFZThisRowDoubles[i];
                // }
                // if (simpleFZThisRowDoubles[i] > topMasses[3]){
                // topIndexes[3] = i;
                // topMasses[3] = simpleFZThisRowDoubles[i];
                // }
                // if (DWBaseThisRowDoubles[i] > topMasses[4]){
                // topIndexes[4] = i;
                // topMasses[4] = DWBaseThisRowDoubles[i];
                // }
                // if (simpleBaseThisRowDoubles[i] > topMasses[5]){
                // topIndexes[5] = i;
                // topMasses[5] = simpleBaseThisRowDoubles[5];
                // }
                }
                for (int p = 0; p < topIndexes.length; p++) {
                    if (topIndexes[p] == -1) {
                        // this means unclassified, probably NaN's across the board from a simple DS conflict.
                        topIndexes[p] = 5;
                    }
                }
                // note that the first 280 are inf, next 280 are road, next 280 are wind, next 280 are river, and last 280 are airport
                // IS THIS STILL VALID?!?!?!?!  Now it's 1554
                int actual = -1;
                if (j < 1555) {
                    actual = 0;
                } else if (j < 3109) {
                    actual = 2;
                } else if (j < 4663) {
                    actual = 3;
                } else if (j < 6217) {
                    actual = 1;
                } else if (j < 7771) {
                    actual = 4;
                }
                // Add it to the confusion matrix quadarrays
                DWGAMClasses[k - 2][(j - 1) % 7][actual][topIndexes[0]]++;
                simpleGAMClasses[k - 2][(j - 1) % 7][actual][topIndexes[1]]++;
                // Add the probabilities to the prob quadarrays
                for (int d = 0; d < DWGAMThisRowDoubles.length; d++) {
                    if (Double.isNaN(DWGAMThisRowDoubles[d])) {
                    // ???
                    } else {
                        DWGAMMasses[k - 2][(j - 1) % 7][actual][d] += DWGAMThisRowDoubles[d];
                    }
                    if (Double.isNaN(simpleGAMThisRowDoubles[d])) {
                    // ???
                    } else {
                        simpleGAMMasses[k - 2][(j - 1) % 7][actual][d] += simpleGAMThisRowDoubles[d];
                    }
                // if (Double.isNaN(DWFZThisRowDoubles[d])){
                // //???
                // } else {
                // DWFZMasses[k-2][(j-1)%7][actual][d] += DWFZThisRowDoubles[d];
                // }
                // if (Double.isNaN(simpleFZThisRowDoubles[d])){
                // //???
                // } else {
                // simpleFZMasses[k-2][(j-1)%7][actual][d] += simpleFZThisRowDoubles[d];
                // }
                // if (Double.isNaN(DWBaseThisRowDoubles[d])){
                // //???
                // } else {
                // DWBaseMasses[k-2][(j-1)%7][actual][d] += DWBaseThisRowDoubles[d];
                // }
                // if (Double.isNaN(simpleBaseThisRowDoubles[d])){
                // //???
                // } else {
                // simpleBaseMasses[k-2][(j-1)%7][actual][d] += simpleBaseThisRowDoubles[d];
                // }
                }
            // end for d
            }
        // end for j
        } catch (FileNotFoundException fnfe) {
            throw new RuntimeException("No file!  " + fnfe.getMessage());
        } catch (IOException ioe) {
            throw new RuntimeException("IO Exception!  " + ioe.getMessage());
        }
        // divide the prob quadarrays by 40(222) so they're actually probs again.
        for (int v = 0; v < 7; v++) {
            for (int v1 = 0; v1 < 6; v1++) {
                for (int v2 = 0; v2 < 6; v2++) {
                    DWGAMMasses[k - 2][v][v1][v2] = DWGAMMasses[k - 2][v][v1][v2] / 222;
                    simpleGAMMasses[k - 2][v][v1][v2] = simpleGAMMasses[k - 2][v][v1][v2] / 222;
                // DWFZMasses[k-2][v][v1][v2] = DWFZMasses[k-2][v][v1][v2]/40;
                // simpleFZMasses[k-2][v][v1][v2] = simpleFZMasses[k-2][v][v1][v2]/40;
                // DWBaseMasses[k-2][v][v1][v2] = DWBaseMasses[k-2][v][v1][v2]/40;
                // simpleBaseMasses[k-2][v][v1][v2] = simpleBaseMasses[k-2][v][v1][v2]/40;
                }
            }
        }
        System.out.println("finished collating k = " + k);
    }
    // end for k
    writeGeneralSummaries();
    writeClassSummaries();
    writeConfusionMatrices();
}
