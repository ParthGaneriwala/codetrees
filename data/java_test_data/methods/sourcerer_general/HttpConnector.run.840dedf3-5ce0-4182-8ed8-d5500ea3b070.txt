public void run() {
    log.info("HttpConnector started at time:" + System.currentTimeMillis());
    Iterator<String> destinations = null;
    // build a list of our destinations from collectors
    try {
        destinations = DataFactory.getInstance().getCollectors();
    } catch (IOException e) {
        log.error("Failed to retreive list of collectors from conf/collectors file", e);
    }
    ChukwaSender connectorClient = new ChukwaHttpSender();
    if (argDestination != null) {
        ArrayList<String> tmp = new ArrayList<String>();
        tmp.add(argDestination);
        connectorClient.setCollectors(tmp.iterator());
        log.info("using collector specified at agent runtime: " + argDestination);
    } else if (destinations != null && destinations.hasNext()) {
        connectorClient.setCollectors(destinations);
        log.info("using collectors from collectors file");
    } else {
        log.error("No collectors specified, exiting (and taking agent with us).");
        // error is unrecoverable, so stop hard.
        agent.shutdown(true);
        return;
    }
    try {
        long lastPost = System.currentTimeMillis();
        while (!stopMe) {
            List<Chunk> newQueue = new ArrayList<Chunk>();
            try {
                // get all ready chunks from the chunkQueue to be sent
                // FIXME: should really do this by size
                chunkQueue.collect(newQueue, MAX_EVENTS_PER_POST);
            } catch (InterruptedException e) {
                System.out.println("thread interrupted during addChunks(ChunkQueue)");
                Thread.currentThread().interrupt();
                break;
            }
            int toSend = newQueue.size();
            List<ChukwaHttpSender.CommitListEntry> results = connectorClient.send(newQueue);
            log.info("sent " + toSend + " chunks, got back " + results.size() + " acks");
            // checkpoint the chunks which were committed
            for (ChukwaHttpSender.CommitListEntry cle : results) {
                agent.reportCommit(cle.adaptor, cle.uuid);
                chunkCount++;
            }
            long now = System.currentTimeMillis();
            if (now - lastPost < MIN_POST_INTERVAL)
                // wait for stuff to accumulate
                Thread.sleep(now - lastPost);
            lastPost = now;
        }
        // end of try forever loop
        log.info("received stop() command so exiting run() loop to shutdown connector");
    } catch (InterruptedException e) {
    // do nothing, let thread die.
    } catch (java.io.IOException e) {
        log.error("connector failed; shutting down agent");
        agent.shutdown(true);
    }
}
