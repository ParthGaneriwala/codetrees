private static JavaEntity processTypeArgs(EntityResolver resolver, Reflective querySource, JavaEntity base, ListIterator<LocatableToken> i, DepthRef depthRef) {
    int startDepth = depthRef.depth;
    List<TypeArgumentEntity> taList = new LinkedList<TypeArgumentEntity>();
    depthRef.depth++;
    mainLoop: while (i.hasNext() && depthRef.depth > startDepth) {
        LocatableToken token = i.next();
        if (token.getType() == JavaTokenTypes.QUESTION) {
            if (!i.hasNext()) {
                return null;
            }
            token = i.next();
            if (token.getType() == JavaTokenTypes.LITERAL_super) {
                JavaEntity taEnt = getTypeEntity(resolver, querySource, i, depthRef);
                if (taEnt == null) {
                    return null;
                }
                taList.add(new WildcardSuperEntity(taEnt));
            } else if (token.getType() == JavaTokenTypes.LITERAL_extends) {
                JavaEntity taEnt = getTypeEntity(resolver, querySource, i, depthRef);
                if (taEnt == null) {
                    return null;
                }
                taList.add(new WildcardExtendsEntity(taEnt));
            } else {
                taList.add(new UnboundedWildcardEntity());
                i.previous();
            }
        } else {
            i.previous();
            JavaEntity taEnt = getTypeEntity(resolver, querySource, i, depthRef);
            if (taEnt == null) {
                return null;
            }
            taList.add(new SolidTargEntity(taEnt));
        }
        if (!i.hasNext()) {
            return null;
        }
        token = i.next();
        int ttype = token.getType();
        while (ttype == JavaTokenTypes.GT || ttype == JavaTokenTypes.SR || ttype == JavaTokenTypes.BSR) {
            switch(ttype) {
                case JavaTokenTypes.BSR:
                    depthRef.depth--;
                case JavaTokenTypes.SR:
                    depthRef.depth--;
                default:
                    depthRef.depth--;
            }
            if (!i.hasNext()) {
                break mainLoop;
            }
            token = i.next();
            ttype = token.getType();
        }
        if (ttype != JavaTokenTypes.COMMA) {
            i.previous();
            break;
        }
    }
    return base.setTypeArgs(taList);
}
