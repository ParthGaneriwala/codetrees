private static double makeTime(double date, Object[] args, int methodId) {
    int maxargs;
    boolean local = true;
    switch(methodId) {
        case Id_setUTCMilliseconds:
            local = false;
        // fallthrough
        case Id_setMilliseconds:
            maxargs = 1;
            break;
        case Id_setUTCSeconds:
            local = false;
        // fallthrough
        case Id_setSeconds:
            maxargs = 2;
            break;
        case Id_setUTCMinutes:
            local = false;
        // fallthrough
        case Id_setMinutes:
            maxargs = 3;
            break;
        case Id_setUTCHours:
            local = false;
        // fallthrough
        case Id_setHours:
            maxargs = 4;
            break;
        default:
            Kit.codeBug();
            maxargs = 0;
    }
    int i;
    double[] conv = new double[4];
    double hour, min, sec, msec;
    double lorutime;
    /* Local or UTC version of date */
    double time;
    double result;
    /* just return NaN if the date is already NaN */
    if (date != date)
        return date;
    /* Satisfy the ECMA rule that if a function is called with
         * fewer arguments than the specified formal arguments, the
         * remaining arguments are set to undefined.  Seems like all
         * the Date.setWhatever functions in ECMA are only varargs
         * beyond the first argument; this should be set to undefined
         * if it's not given.  This means that "d = new Date();
         * d.setMilliseconds()" returns NaN.  Blech.
         */
    if (args.length == 0)
        args = ScriptRuntime.padArguments(args, 1);
    for (i = 0; i < args.length && i < maxargs; i++) {
        conv[i] = ScriptRuntime.toNumber(args[i]);
        // limit checks that happen in MakeTime in ECMA.
        if (conv[i] != conv[i] || Double.isInfinite(conv[i])) {
            return ScriptRuntime.NaN;
        }
        conv[i] = ScriptRuntime.toInteger(conv[i]);
    }
    if (local)
        lorutime = LocalTime(date);
    else
        lorutime = date;
    i = 0;
    int stop = args.length;
    if (maxargs >= 4 && i < stop)
        hour = conv[i++];
    else
        hour = HourFromTime(lorutime);
    if (maxargs >= 3 && i < stop)
        min = conv[i++];
    else
        min = MinFromTime(lorutime);
    if (maxargs >= 2 && i < stop)
        sec = conv[i++];
    else
        sec = SecFromTime(lorutime);
    if (maxargs >= 1 && i < stop)
        msec = conv[i++];
    else
        msec = msFromTime(lorutime);
    time = MakeTime(hour, min, sec, msec);
    result = MakeDate(Day(lorutime), time);
    if (local)
        result = internalUTC(result);
    date = TimeClip(result);
    return date;
}
