public static ArrayList<String> getChildBoards(String b, int color) {
    ArrayList<String> childs = new ArrayList<String>();
    // Add legal move board
    for (int i = 0; i < 64; i++) {
        int p = b.charAt(i);
        if ((p % 10) == color) {
            switch(p % 100 / 10) {
                case PAWN:
                    int step = (color == WHITE) ? -1 : 1;
                    // Promote
                    if (i / 8 + step == 0 || i / 8 + step == 7) {
                        addCheckedBoard(childs, setPiece(b, i, (char) (QUEEN * 10 + color)), i, 0, step);
                        addCheckedBoard(childs, setPiece(b, i, (char) (BISHOP * 10 + color)), i, 0, step);
                        addCheckedBoard(childs, setPiece(b, i, (char) (KNIGHT * 10 + color)), i, 0, step);
                        addCheckedBoard(childs, setPiece(b, i, (char) (ROOK * 10 + color)), i, 0, step);
                    } else {
                        if (b.charAt(i + step * 8) == EMPTY) {
                            addCheckedBoard(childs, b, i, 0, step);
                            if (p < 100 && b.charAt(i + step * 2 * 8) == EMPTY) {
                                addCheckedBoard(childs, b, i, 0, step * 2);
                            }
                        }
                        if (i % 8 < 7 && b.charAt(i + 1 + step * 8) % 10 == (3 - color)) {
                            addCheckedBoard(childs, b, i, 1, step);
                        }
                        if (i % 8 > 0 && b.charAt(i - 1 + step * 8) % 10 == (3 - color)) {
                            addCheckedBoard(childs, b, i, -1, step);
                        }
                    // En passant
                    /**
                     * <pre>
                     * int enPassantY = (color == WHITE) ? 3 : 4;
                     * if (i / 8 == enPassantY) {
                     * String lastMove = lastMove(b);
                     * if (lastMove.charAt(0) % 100 == PAWN * 10 + (3 - color) &amp;&amp; lastMove.charAt(3) / 8 == enPassantY &amp;&amp; Math.abs(lastMove.charAt(1) / 8 - lastMove.charAt(3) / 8) &gt; 1) {
                     * if (lastMove.charAt(3) % 8 == i % 8 - 1) {
                     * addCheckedBoard(childs, setPiece(b, lastMove.charAt(3), EMPTY), i, -1, step);
                     * } else if (lastMove.charAt(3) % 8 == i % 8 + 1) {
                     * addCheckedBoard(childs, setPiece(b, lastMove.charAt(3), EMPTY), i, 1, step);
                     * }
                     * }
                     * }
                     */
                    }
                    break;
                case QUEEN:
                    addCheckedBoard(childs, b, i, 0, 1, true);
                    addCheckedBoard(childs, b, i, 0, -1, true);
                    addCheckedBoard(childs, b, i, 1, 0, true);
                    addCheckedBoard(childs, b, i, -1, 0, true);
                    addCheckedBoard(childs, b, i, 1, 1, true);
                    addCheckedBoard(childs, b, i, 1, -1, true);
                    addCheckedBoard(childs, b, i, -1, 1, true);
                    addCheckedBoard(childs, b, i, -1, -1, true);
                    break;
                case ROOK:
                    addCheckedBoard(childs, b, i, 0, 1, true);
                    addCheckedBoard(childs, b, i, 0, -1, true);
                    addCheckedBoard(childs, b, i, 1, 0, true);
                    addCheckedBoard(childs, b, i, -1, 0, true);
                    break;
                case KNIGHT:
                    for (int[] d : knightMovesDelta) {
                        addCheckedBoard(childs, b, i, d[0], d[1]);
                    }
                    break;
                case BISHOP:
                    // 4 diagonales, cas d'arrêt :
                    // pièce adversaire avec case autorisée
                    // pièce de ma couleur avec case autorisée
                    // sortie de grid
                    addCheckedBoard(childs, b, i, 1, 1, true);
                    addCheckedBoard(childs, b, i, 1, -1, true);
                    addCheckedBoard(childs, b, i, -1, 1, true);
                    addCheckedBoard(childs, b, i, -1, -1, true);
                    break;
                case KING:
                    addCheckedBoard(childs, b, i, 1, 0);
                    addCheckedBoard(childs, b, i, 1, 1);
                    addCheckedBoard(childs, b, i, 1, -1);
                    addCheckedBoard(childs, b, i, 0, +1);
                    addCheckedBoard(childs, b, i, 0, -1);
                    addCheckedBoard(childs, b, i, -1, +1);
                    addCheckedBoard(childs, b, i, -1, -1);
                    addCheckedBoard(childs, b, i, -1, 0);
                    // T0,1,2,3,R4,5,6,T7
                    if (p < 100) {
                        // O-O-O
                        if (b.charAt(i - 3) == EMPTY && b.charAt(i - 2) == EMPTY && b.charAt(i - 1) == EMPTY && b.charAt(i - 4) == ROOK * 10 + color && !isChess(move(b, i, i - 1), color)) {
                            // grand
                            addCheckedBoard(childs, move(b, i - 4, i - 1), i, -2, 0);
                        // roc
                        }
                        // O-O
                        if (b.charAt(i + 1) == EMPTY && b.charAt(i + 2) == EMPTY && b.charAt(i + 3) == ROOK * 10 + color && !isChess(move(b, i, i + 1), color)) {
                            // petit
                            addCheckedBoard(childs, move(b, i + 3, i + 1), i, +2, 0);
                        // roc
                        }
                    }
                    break;
            }
        }
    }
    return childs;
}
