public ActionForward unspecified(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
    PersistenceContext persCtx = factory.createPersistenceContext();
    IndexForm indexForm = (IndexForm) form;
    try {
        HttpSession session = request.getSession();
        if (session.getAttribute(LoginAction.SESSION_ATTRIBUTE_USER) != null) {
            persCtx.beginTrans();
            ContasFacade traBO = new ContasFacade(persCtx);
            // per�odo
            Date[] datas = Utilities.getDataInicioEFim(indexForm.getMes(), indexForm.getAno());
            // resumo do planejamento
            Map<Agrupamento, BigDecimal> mlpValores = traBO.buscarValoresPorCategoria(datas[0], datas[1]);
            if (!mlpValores.isEmpty()) {
                Map<Agrupamento, BigDecimal> mlpPercentuais = traBO.calcularPercentuaisPorCategoria(mlpValores);
                request.setAttribute("valores", mlpValores);
                request.setAttribute("percentuais", mlpPercentuais);
            }
            // contas cadastradas
            ContaDAO genDAO = new ContaDAO(persCtx);
            List<Conta> contas = genDAO.list();
            request.setAttribute("contas", contas);
            // filtro per�odo
            request.setAttribute("meses", Utilities.getMeses());
            request.setAttribute("anos", Utilities.getAnos());
            Calendar cal = Calendar.getInstance();
            cal.setTime(datas[0]);
            request.setAttribute("ano_param", cal.get(Calendar.YEAR));
            request.setAttribute("mes_param", cal.get(Calendar.MONTH));
        }
    } finally {
        persCtx.close();
    }
    return mapping.findForward(FOWARD_INDEX);
}
