void write(RowOutputBinary out) throws IOException, HsqlException {
    if (mode == ResultConstants.MULTI) {
        writeMulti(out);
        return;
    }
    int startPos = out.size();
    out.writeSize(0);
    out.writeIntData(mode);
    out.writeIntData(databaseID);
    out.writeIntData(sessionID);
    switch(mode) {
        case ResultConstants.GETSESSIONATTR:
        case ResultConstants.SQLDISCONNECT:
        case ResultConstants.SQLSTARTTRAN:
        case ResultConstants.HSQLRESETSESSION:
            break;
        case ResultConstants.SQLPREPARE:
            // Allows the engine side to fast-fail prepare of non-CALL
            // statement against a CallableStatement object and CALL
            // statement against PreparedStatement.
            // 
            // May be useful in the future for other things
            out.writeIntData(getStatementType());
            out.writeString(mainString);
            break;
        case ResultConstants.PREPARE_ACK:
        case ResultConstants.SQLFREESTMT:
            out.writeIntData(statementID);
            break;
        case ResultConstants.SQLEXECDIRECT:
            out.writeIntData(updateCount);
            // currently unused
            out.writeIntData(statementID);
            out.writeString(mainString);
            break;
        case ResultConstants.ERROR:
        case ResultConstants.SQLCONNECT:
            out.writeString(mainString);
            out.writeString(subString);
            out.writeString(subSubString);
            out.writeIntData(statementID);
            break;
        case ResultConstants.UPDATECOUNT:
            out.writeIntData(updateCount);
            break;
        case ResultConstants.SQLENDTRAN:
            {
                int type = getEndTranType();
                // endtran type
                out.writeIntData(type);
                switch(type) {
                    case ResultConstants.SAVEPOINT_NAME_RELEASE:
                    case ResultConstants.SAVEPOINT_NAME_ROLLBACK:
                        // savepoint name
                        out.writeString(mainString);
                }
                break;
            }
        case ResultConstants.BATCHEXECUTE:
        case ResultConstants.BATCHEXECDIRECT:
        case ResultConstants.SQLEXECUTE:
        case ResultConstants.SETSESSIONATTR:
            {
                out.writeIntData(updateCount);
                out.writeIntData(statementID);
                int l = significantColumns;
                out.writeIntData(l);
                for (int i = 0; i < l; i++) {
                    out.writeType(metaData.colTypes[i]);
                }
                out.writeIntData(size);
                Record n = rRoot;
                while (n != null) {
                    out.writeData(l, metaData.colTypes, n.data, null, null);
                    n = n.next;
                }
                break;
            }
        case ResultConstants.DATA:
        case ResultConstants.PARAM_META_DATA:
            {
                metaData.write(out, significantColumns);
                out.writeIntData(size);
                Record n = rRoot;
                while (n != null) {
                    out.writeData(significantColumns, metaData.colTypes, n.data, null, null);
                    n = n.next;
                }
                break;
            }
        case ResultConstants.SQLSETCONNECTATTR:
            {
                int type = getConnectionAttrType();
                // attr type
                out.writeIntData(type);
                switch(type) {
                    case ResultConstants.SQL_ATTR_SAVEPOINT_NAME:
                        // savepoint name
                        out.writeString(mainString);
                }
                break;
            }
        default:
            throw new HsqlException(Trace.getMessage(Trace.Result_Result, true, new Object[] { new Integer(mode) }), null, 0);
    }
    out.writeIntData(out.size(), startPos);
}
