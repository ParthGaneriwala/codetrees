public AssemSeqExp canonize() {
    // Canonize the arguments first
    Vector expStms = new Vector();
    for (AssemExpList tail = args; tail != null; tail = tail.getTail()) {
        AssemSeqExp seqExp = tail.getHead().canonize();
        expStms.addElement(seqExp);
    }
    StmExpList stmExpList = getStmExpList(expStms);
    AssemStm stm = stmExpList.getStm();
    AssemExpList newArgs = stmExpList.getExps();
    // Add the statements for moving the expressions into $a0 - $a3 or onto to the stack
    // if there are more than four arguments
    Stack expArgStack = new Stack();
    int count = 0;
    for (AssemExpList tail = newArgs; tail != null; tail = tail.getTail()) {
        AssemExp exp = tail.getHead();
        if (count < 4) {
            expArgStack.push(translateMove(translateTemp(Temp.getTemp("a" + count)), exp));
        } else {
            int offSetFromSP = (4 - count) * 4;
            Temp tempSP = Temp.getTemp("SP");
            AssemBinOpExp spAndOffSet = (AssemBinOpExp) translateBinOp(AssemBinOpExp.PLUS, translateTemp(tempSP), translateConstant(offSetFromSP));
            expArgStack.push(translateMove(exp, spAndOffSet));
        }
        count++;
    }
    AssemSeq initSeq = translateSeqStatement(expArgStack);
    stm = new AssemSeq(stm, initSeq);
    // Canonize the function itself
    Temp temp = new Temp();
    AssemTemp assemTemp = new AssemTemp(temp);
    // Move this value into the temporary and return the seq-exp
    AssemMove assemMove = new AssemMove(assemTemp, new AssemCallExp(func, newArgs, hasReturnValue));
    // Final canonize
    AssemSeqExp retValue = new AssemSeqExp(new AssemSeq(stm, assemMove), assemTemp);
    return retValue;
}
