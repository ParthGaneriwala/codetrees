// end method
private Method[] findFireMethods(Class clazz) {
    Vector meths = new Vector();
    meths = CoordinationUtils.findMethods(clazz, meths);
    Vector fireMethods = new Vector();
    for (Enumeration e = meths.elements(); e.hasMoreElements(); ) {
        Method m = (Method) e.nextElement();
        String s = m.getName();
        int j = s.indexOf("add");
        if (j == 0) {
            Class[] params = m.getParameterTypes();
            if (params.length > 0) {
                Class paramOne = params[0];
                // if the arg is an interface and matches something in the name of the "add" method,
                if (paramOne.isInterface()) {
                    String paramName = paramOne.getName();
                    String interfaceName = s.substring(3, s.length());
                    if (paramName.indexOf(interfaceName) > 0) {
                        fireMethods.add(m);
                    }
                // end if one in the other
                }
            // end if is interface
            }
        // end if #params > 0
        }
    // end if j
    }
    // next element
    // let's remove methods which accept arguments with are objects
    // implementing certain interfaces (awt and swing, mainly)
    Vector tempMethsPackage = new Vector();
    for (int i = 0; i < fireMethods.size(); i++) {
        Method meth = (Method) fireMethods.elementAt(i);
        String packName = meth.getParameterTypes()[0].getName();
        int periodPlace = packName.lastIndexOf(".");
        String pack = packName.substring(periodPlace + 1);
        pack = packName.substring(0, periodPlace);
        // Package pack = meth.getParameterTypes()[0].getPackage();
        boolean goodPack = true;
        for (int k = 0; k < FiringBean.disallowedPackages.length; k++) {
            if (pack.equals(disallowedPackages[k])) {
                goodPack = false;
            }
        }
        if (goodPack) {
            tempMethsPackage.add(meth);
        }
    }
    fireMethods = tempMethsPackage;
    // let's remove duplicates
    Vector tempMeths = new Vector();
    for (int i = 0; i < fireMethods.size(); i++) {
        Method meth = (Method) fireMethods.elementAt(i);
        String methName = meth.getName();
        Class[] methParams = meth.getParameterTypes();
        Class paramOne = null;
        if (methParams.length > 0) {
            paramOne = methParams[0];
        }
        boolean unique = true;
        for (int j = 0; j < i; j++) {
            Method meth2 = (Method) fireMethods.elementAt(j);
            String methName2 = meth2.getName();
            Class[] methParams2 = meth2.getParameterTypes();
            Class paramOne2 = null;
            if (methParams2.length > 0) {
                paramOne2 = methParams2[0];
            }
            if (methName.equals(methName2)) {
                if (paramOne.equals(paramOne2)) {
                    unique = false;
                    // skip the rest
                    j = fireMethods.size();
                }
            }
        }
        if (unique) {
            tempMeths.add(meth);
        }
    }
    // next i
    fireMethods = tempMeths;
    // let's check for remove methods
    for (int i = 0; i < fireMethods.size(); i++) {
        boolean foundRemove = false;
        Method m = (Method) fireMethods.elementAt(i);
        String methName = (String) m.getName();
        methName = methName.substring(3, methName.length());
        for (int j = 0; j < meths.size(); j++) {
            Method meth = (Method) meths.elementAt(j);
            String compMethName = meth.getName();
            if (compMethName.indexOf(methName) >= 0) {
                foundRemove = true;
            }
        // end if
        }
        if (!foundRemove) {
            fireMethods.remove(i);
        }
    // end if
    }
    // next i
    Method[] fireMeths = new Method[fireMethods.size()];
    for (int i = 0; i < fireMeths.length; i++) {
        fireMeths[i] = (Method) fireMethods.elementAt(i);
    }
    return fireMeths;
}
