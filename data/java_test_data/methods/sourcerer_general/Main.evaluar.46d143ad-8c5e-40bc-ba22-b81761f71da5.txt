// Evalua el fitness de la poblacion
private void evaluar() {
    // Inicializamos los valores de los campos
    int sum, prod;
    double i, k;
    double scaled_sum_error, scaled_prod_error, combined_error;
    // borramos la lista para la siguiente evaluacion
    errores.clear();
    // Recorremos todos los genes de la poblacion
    for (k = 0; k < POB; k++) {
        scaled_sum_error = 0;
        scaled_sum_error = 0;
        combined_error = 0;
        sum = 0;
        prod = 1;
        i = 0;
        for (i = 0; i < GENO; i++) {
            if (i == (GENO - 1)) {
                // Calculamos el error a partir de la idoneidad del gen
                scaled_sum_error = (sum - SUM) / SUM;
                scaled_prod_error = (prod - PROD) / PROD;
                combined_error = Math.abs(scaled_sum_error) + Math.abs(scaled_prod_error);
                lista.set((int) (11 * k + i), combined_error);
                // posicion
                errores.add(k);
                // error del cromosoma
                errores.add(combined_error);
                // Comprobacion para saber si hemos resuelto el problema
                if (combined_error == 0) {
                    lista.set((POB * GENO), 0.0);
                    System.out.println("Esto se va a terminar ya...");
                }
            } else {
                // Si el gen vale 0, lo ponemos en el grupo de la suma y la calculamos
                if (lista.get((int) (11 * k + i)) == 0) {
                    sum += (1 + i);
                } else // Si el gen vale 1, lo ponemos en el grupo del producto y lo calculamos
                {
                    prod *= (1 + i);
                }
            }
        }
    }
/*
      //Muestro por la consola para corroborar
    	for(int o=0;o<errores.size();o++){
    		System.out.println(errores.get(o));
    	}
    	*/
}
