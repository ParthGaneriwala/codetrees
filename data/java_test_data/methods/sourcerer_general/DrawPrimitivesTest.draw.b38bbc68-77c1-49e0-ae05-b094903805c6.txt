// 
// TIP:
// Every CocosNode has a "draw" method.
// In the "draw" method you put all the code that actually draws your node.
// And Test1 is a subclass of TestDemo, which is a subclass of Layer, which is a subclass of CocosNode.
// 
// As you can see the drawing primitives aren't CocosNode objects. They are just helper
// functions that let's you draw basic things like: points, line, polygons and circles.
// 
// 
// TIP:
// Don't draw your stuff outside the "draw" method. Otherwise it won't get transformed.
// 
// 
// TIP:
// If you want to rotate/translate/scale a circle or any other "primtive", you can do it by rotating
// the node. eg:
// this.rotation = 90;
public void draw(GL10 gl) {
    CCSize s = Director.sharedDirector().winSize();
    // draw a simple line
    // The default state is:
    // Line Width: 1
    // color: 255,255,255,255 (white, non-transparent)
    // Anti-Aliased
    gl.glEnable(GL10.GL_LINE_SMOOTH);
    Primitives.drawLine(gl, CCPoint.ccp(0, 0), CCPoint.ccp(s.width, s.height));
    // line: color, width, aliased
    // glLineWidth > 1 and GL_LINE_SMOOTH are not compatible
    // GL_SMOOTH_LINE_WIDTH_RANGE = (1,1) on iPhone
    gl.glDisable(GL10.GL_LINE_SMOOTH);
    gl.glLineWidth(5.0f);
    gl.glColor4f(1.0f, 0.0f, 0.0f, 1.0f);
    Primitives.drawLine(gl, CCPoint.ccp(0, s.height), CCPoint.ccp(s.width, 0));
    // TIP:
    // If you are going to use always the same color or width, you don't
    // need to call it before every draw
    // 
    // Remember: OpenGL is a state-machine.
    // draw big point in the center
    gl.glPointSize(64);
    gl.glColor4f(0.0f, 0.0f, 1.0f, 0.5f);
    Primitives.drawPoint(gl, s.width / 2, s.height / 2);
    // draw 4 small points
    CCPoint[] points = { CCPoint.ccp(60, 60), CCPoint.ccp(70, 70), CCPoint.ccp(60, 70), CCPoint.ccp(70, 60) };
    gl.glPointSize(4);
    gl.glColor4f(0.0f, 1.0f, 1.0f, 1.0f);
    Primitives.drawPoints(gl, points, 4);
    // draw a green circle with 10 segments
    gl.glLineWidth(16);
    gl.glColor4f(0.0f, 1.0f, 0.0f, 1.0f);
    Primitives.drawCircle(gl, s.width / 2, s.height / 2, 100, 0, 10, false);
    // draw a green circle with 50 segments with line to center
    gl.glLineWidth(2);
    gl.glColor4f(0.0f, 1.0f, 1.0f, 1.0f);
    Primitives.drawCircle(gl, s.width / 2, s.height / 2, 50, CCMacros.CC_DEGREES_TO_RADIANS(90), 50, true);
    // open yellow poly
    gl.glColor4f(1.0f, 1.0f, 0.0f, 1.0f);
    gl.glLineWidth(10);
    CCPoint[] vertices = { CCPoint.ccp(0, 0), CCPoint.ccp(50, 50), CCPoint.ccp(100, 50), CCPoint.ccp(100, 100), CCPoint.ccp(50, 100) };
    Primitives.drawPoly(gl, vertices, 5, false);
    // closed purple poly
    gl.glColor4f(1.0f, 0.0f, 1.0f, 1.0f);
    gl.glLineWidth(2);
    CCPoint[] vertices2 = { CCPoint.ccp(30, 130), CCPoint.ccp(30, 230), CCPoint.ccp(50, 200) };
    Primitives.drawPoly(gl, vertices2, 3, true);
    // draw quad bezier path
    Primitives.drawQuadBezier(gl, 0, s.height, s.width / 2, s.height / 2, s.width, s.height, 50);
    // draw cubic bezier path
    Primitives.drawCubicBezier(gl, s.width / 2, s.height / 2, s.width / 2 + 30, s.height / 2 + 50, s.width / 2 + 60, s.height / 2 - 50, s.width, s.height / 2, 100);
    // restore original values
    gl.glLineWidth(1);
    gl.glColor4f(1.0f, 1.0f, 1.0f, 1.0f);
    gl.glPointSize(1);
}
