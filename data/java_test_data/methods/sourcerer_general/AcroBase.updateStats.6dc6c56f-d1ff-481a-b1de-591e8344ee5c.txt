public static void updateStats(AcroGame G, AcroPlayer winner) {
    // if (players[p].acros > 0 &&
    // !players[p].name.startsWith("guest")) {
    int ratingavg = 0, rd = 0;
    AcroPlayer p = null;
    int games, wins, rating, points, acros;
    GameData D = null;
    // calc average rating of board
    for (int x = 0; x < G.numplay; x++) {
        p = G.players[x];
        D = GameBase.getStats(p.name, newPlayer(p.name));
        if (!winner.name.equals(D.getField("Handle")))
            ratingavg += D.getIntField("rating");
    }
    if (G.numplay > 1)
        ratingavg /= (G.numplay - 1);
    // edit stats
    for (int x = 0; x < G.numplay; x++) {
        p = G.players[x];
        D = GameBase.getStats(p.name, newPlayer(p.name));
        games = D.getIntField("games");
        acros = D.getIntField("acros");
        points = D.getIntField("points");
        wins = D.getIntField("wins");
        rating = D.getIntField("rating");
        D.setField("games", games + 1);
        D.setField("acros", acros + p.sumacros());
        D.setField("points", points + p.score);
        rd = (ratingavg - rating);
        if (rd > 180)
            rd = 180;
        else if (rd < -180)
            rd = -180;
        if (p == winner) {
            // winner
            D.setField("wins", wins + 1);
            D.setField("rating", rating + (16 + (rd / 12)));
            AcroBot.Serv.send("shout " + D.getHandle() + " wins his/her " + MiscUtil.getSuffix(wins + 1) + " Acrophobia game!");
        } else {
            // loser
            D.setField("rating", rating - ((16 - (rd / 12)) / // Hopefully > 0!
            (G.numplay - 1)));
        }
        GameBase.editStats(D);
    }
}
