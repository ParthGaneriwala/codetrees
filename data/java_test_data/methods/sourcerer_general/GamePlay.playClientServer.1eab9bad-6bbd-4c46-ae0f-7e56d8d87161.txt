public void playClientServer() {
    statusBarPanel.setStatus(StatusMessages.WAITING_CONNECTION.toString(), getPlayerColor(currentPlayer));
    createConnection();
    statusBarPanel.setStatus(StatusMessages.CONNECTION_ESTABLISHED.toString(), getPlayerColor(currentPlayer));
    char player;
    Direction direction;
    int position = 0;
    if (currentPlayer == GamePlayers.SECOND_PLAYER.getPlayer()) {
        do {
            synchronized (tablePnl) {
                try {
                    tablePnl.wait();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
            direction = tablePnl.acquireDirection();
            position = tablePnl.acqurePosition();
        } while (!(moveMan(currentPlayer, direction, position)));
        fillSquare(connect4.getLastMove(currentPlayer), tablePnl.acquireDirection(), currentPlayer);
        sendData();
    }
    while (!isPlayerWin && !isGameDraw) {
        statusBarPanel.setStatus(StatusMessages.NOT_YOUR_TURN.toString(), getPlayerColor(currentPlayer));
        player = receiveData();
        statusBarPanel.setStatus(StatusMessages.TURN.toString(), getPlayerColor(currentPlayer));
        if (isPlayerWin) {
            tablePnl.displayWinningCombination(protocol.getWinPath(), Color.YELLOW);
            statusBarPanel.setStatus(StatusMessages.WIN.toString(), getPlayerColor(protocol.getPlayer()));
            break;
        } else if (isGameDraw) {
            statusBarPanel.setStatus(StatusMessages.DRAW_GAME.toString(), getPlayerColor(protocol.getPlayer()));
            break;
        }
        do {
            synchronized (tablePnl) {
                try {
                    tablePnl.wait();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
            direction = tablePnl.acquireDirection();
            position = tablePnl.acqurePosition();
        } while (!(moveMan(currentPlayer, direction, position)));
        fillSquare(connect4.getLastMove(currentPlayer), direction, currentPlayer);
        if ((isPlayerWin = connect4.isPlayerWin(currentPlayer))) {
            tablePnl.displayWinningCombination(connect4.getWinPath(), Color.YELLOW);
            statusBarPanel.setStatus(StatusMessages.WIN.toString(), getPlayerColor(currentPlayer));
        } else if (connect4.isGameDraw()) {
            statusBarPanel.setStatus(StatusMessages.DRAW_GAME.toString(), getPlayerColor(currentPlayer));
            isGameDraw = true;
        }
        sendData();
    }
    mp.closeConnection();
}
