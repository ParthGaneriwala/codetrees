protected Object addOrRemove(long longKey, Object objectValue, Object objectValueTwo, boolean remove) {
    int hash = (int) longKey;
    int index = hashIndex.getHashIndex(hash);
    int lookup = hashIndex.hashTable[index];
    int lastLookup = -1;
    Object returnValue = null;
    for (; lookup >= 0; lastLookup = lookup, lookup = hashIndex.getNextLookup(lookup)) {
        if (isIntKey) {
            if (longKey == intKeyTable[lookup]) {
                break;
            }
        } else {
            if (longKey == longKeyTable[lookup]) {
                break;
            }
        }
    }
    if (lookup >= 0) {
        if (remove) {
            if (longKey == 0) {
                hasZeroKey = false;
                zeroKeyIndex = -1;
            }
            if (isIntKey) {
                intKeyTable[lookup] = 0;
            } else {
                longKeyTable[lookup] = 0;
            }
            returnValue = objectValueTable[lookup];
            objectValueTable[lookup] = null;
            hashIndex.unlinkNode(index, lastLookup, lookup);
            if (isTwoObjectValue) {
                objectKeyTable[lookup] = null;
            }
            if (accessTable != null) {
                accessTable[lookup] = 0;
            }
            return returnValue;
        }
        if (isObjectValue) {
            returnValue = objectValueTable[lookup];
            objectValueTable[lookup] = objectValue;
        }
        if (isTwoObjectValue) {
            objectKeyTable[lookup] = objectValueTwo;
        }
        if (accessTable != null) {
            accessTable[lookup] = ++accessCount;
        }
        return returnValue;
    }
    // not found
    if (remove) {
        return returnValue;
    }
    if (hashIndex.elementCount >= threshold) {
        if (reset()) {
            return addOrRemove(longKey, objectValue, objectValueTwo, remove);
        } else {
            return null;
        }
    }
    lookup = hashIndex.linkNode(index, lastLookup);
    if (isIntKey) {
        intKeyTable[lookup] = (int) longKey;
    } else {
        longKeyTable[lookup] = longKey;
    }
    if (longKey == 0) {
        hasZeroKey = true;
        zeroKeyIndex = lookup;
    }
    objectValueTable[lookup] = objectValue;
    if (isTwoObjectValue) {
        objectKeyTable[lookup] = objectValueTwo;
    }
    if (accessTable != null) {
        accessTable[lookup] = ++accessCount;
    }
    return returnValue;
}
