/**
 * This test is identical to test2 except that the feature lookup file is sorted by
 * NameNumberFeaturesEncoder.
 *
 * @throws Exception
 */
@Test
public void test3() throws Exception {
    AnalysisEngine dataWriterAnnotator = AnalysisEngineFactory.createPrimitive(Test1Annotator.class, typeSystemDescription, DirectoryDataWriterFactory.PARAM_OUTPUT_DIRECTORY, outputDirectoryName, CleartkAnnotator.PARAM_DATA_WRITER_FACTORY_CLASS_NAME, DefaultMalletDataWriterFactory.class.getName(), MalletDataWriterFactory_ImplBase.PARAM_COMPRESS, true, MalletDataWriterFactory_ImplBase.PARAM_SORT, true);
    dataWriterAnnotator.process(jCas);
    dataWriterAnnotator.collectionProcessComplete();
    File trainFile = new MalletClassifierBuilder().getTrainingDataFile(this.outputDirectory);
    String[] lines = FileUtil.loadListOfStrings(trainFile);
    assertEquals("0:1.0 1:3.0 2:1.234 A", lines[0]);
    assertEquals("3:1.0 4:2 B", lines[1]);
    assertEquals("null:0 Z", lines[2]);
    assertEquals("5:1.0 A", lines[3]);
    lines = FileUtil.loadListOfStrings(new File(outputDirectoryName, NameNumberFeaturesEncoder.LOOKUP_FILE_NAME));
    int i = 0;
    assertEquals("6", lines[i++]);
    assertEquals("A_B_AB	5", lines[i++]);
    assertEquals("distance	1", lines[i++]);
    assertEquals("name_2PO	3", lines[i++]);
    assertEquals("p's	4", lines[i++]);
    assertEquals("pos_NN	0", lines[i++]);
    assertEquals("precision	2", lines[i++]);
    HideOutput hider = new HideOutput();
    for (String classifierName : ClassifierTrainerFactory.NAMES) {
        Train.main(outputDirectoryName, classifierName);
    }
    hider.restoreOutput();
}
