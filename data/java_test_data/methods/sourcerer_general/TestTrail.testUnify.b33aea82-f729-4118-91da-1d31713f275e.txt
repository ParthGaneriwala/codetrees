public void testUnify() {
    Node_RuleVariable X = new Node_RuleVariable("x", 0);
    Node_RuleVariable Y = new Node_RuleVariable("y", 1);
    Node_RuleVariable Z = new Node_RuleVariable("z", 2);
    Trail trail = new Trail();
    assertTrue(trail.unify(new TriplePattern(X, p, Y), new TriplePattern(a, p, b)));
    assertEquals(X.deref(), a);
    assertEquals(Y.deref(), b);
    assertTrue(Z.isUnbound());
    trail.unwindAndClear();
    assertTrue(X.isUnbound());
    assertTrue(Y.isUnbound());
    assertTrue(trail.unify(new TriplePattern(X, p, X), new TriplePattern(Z, p, a)));
    assertEquals(X.deref(), a);
    assertEquals(Z.deref(), a);
    trail.unwindAndClear();
    TriplePattern gf = new TriplePattern(X, p, Functor.makeFunctorNode("f", new Node[] { X, b }));
    TriplePattern hf1 = new TriplePattern(Y, p, Functor.makeFunctorNode("f", new Node[] { Z, b }));
    TriplePattern hf2 = new TriplePattern(Y, p, Functor.makeFunctorNode("f", new Node[] { a, Y }));
    TriplePattern hf3 = new TriplePattern(Y, p, Functor.makeFunctorNode("f", new Node[] { b, Y }));
    assertTrue(trail.unify(gf, hf1));
    assertEquals(X.deref(), Y.deref());
    assertEquals(X.deref(), Z.deref());
    trail.unwindAndClear();
    assertTrue(!trail.unify(gf, hf2));
    assertTrue(X.isUnbound());
    assertTrue(Y.isUnbound());
    assertTrue(Z.isUnbound());
    trail.unwindAndClear();
    assertTrue(trail.unify(gf, hf3));
    assertEquals(X.deref(), b);
    assertEquals(Y.deref(), b);
    trail.unwindAndClear();
}
