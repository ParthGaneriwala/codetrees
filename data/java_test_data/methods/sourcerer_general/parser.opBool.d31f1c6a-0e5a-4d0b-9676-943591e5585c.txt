private static boolean opBool(LinkedList<LinkedList> list, ArrayList<String> operator) throws Exception {
    char oper;
    String opera;
    Object obj1 = new Object();
    if (list.size() == 0) {
        throw new Exception();
    }
    if (list.size() == 1) {
        try {
            obj1 = list.get(0);
            if (((String) obj1).toLowerCase().equals("false")) {
                return false;
            }
            return true;
        } catch (Exception e) {
            System.out.println("ocurrio en opBool");
            throw e;
        }
    } else {
        try {
            opera = operator.remove(0);
            oper = opera.charAt(0);
            if (operator.size() == 0) {
                complete = true;
            } else {
                complete = false;
            }
            boolean res = false;
            switch(oper) {
                case 'o':
                    for (int a = 0; a < list.size(); a++) {
                        res = (opBool(list.get(a), operator)) || res;
                    }
                    return res;
                case 'a':
                    res = true;
                    for (int a = 0; a < list.size(); a++) {
                        res = (opBool(list.get(a), operator)) && res;
                    }
                    return res;
                case 'n':
                    if (list.size() == 2) {
                        res = !(opBool(list.get(1), operator));
                        return res;
                    } else {
                        throw new Exception();
                    }
                case '=':
                    if (list.size() == 2) {
                        res = (operate(list.get(0), operator) == operate(list.get(1), operator));
                        return res;
                    } else {
                        throw new Exception();
                    }
                case '/':
                    if (list.size() == 2) {
                        res = (operate(list.get(0), operator) != operate(list.get(1), operator));
                        return res;
                    } else {
                        throw new Exception();
                    }
                case '<':
                    if (list.size() == 2) {
                        if (opera.length() == 2) {
                            res = (operate(list.get(0), operator) <= operate(list.get(1), operator));
                            return res;
                        } else {
                            res = (operate(list.get(0), operator) < operate(list.get(1), operator));
                            return res;
                        }
                    } else {
                        throw new Exception();
                    }
                case '>':
                    if (list.size() == 2) {
                        if (opera.length() == 2) {
                            res = (operate(list.get(0), operator) >= operate(list.get(1), operator));
                            return res;
                        } else {
                            res = (operate(list.get(0), operator) > operate(list.get(1), operator));
                            return res;
                        }
                    } else {
                        throw new Exception();
                    }
                default:
                    throw new Exception();
            }
        } catch (Exception e) {
            throw e;
        }
    }
}
