public static void main(String[] args) throws Exception {
    OptionParser optParser = new OptionParser(Options.class);
    final Options opts = (Options) optParser.parse(args, true);
    LMDecodingOptions lmOpts = new LMDecodingOptions();
    lmOpts.config = opts.config;
    lmOpts.jobs = opts.jobs;
    if (opts.forest != null)
        lmOpts.forest = opts.forest;
    if (opts.useJerboa)
        lmOpts.storage = LMDecodingOptions.Storage.JERBOA;
    if (opts.useBDB)
        lmOpts.storage = LMDecodingOptions.Storage.BDB;
    if (opts.useCompact)
        lmOpts.storage = LMDecodingOptions.Storage.COMPACT;
    lmOpts.dontOpenCurrentLMStorage = true;
    LanguageModel.initDecoding(lmOpts);
    Experiment experiment = Experiment.getInstance();
    ForestModel forest = experiment.getForest(opts.forest);
    File tmpDir = opts.datadir == null ? new File("populate-" + forest.getName()) : new File(opts.datadir);
    if (!tmpDir.isDirectory()) {
        tmpDir.mkdirs();
    }
    ForestInterpolation interpolator = new ForestInterpolation(forest);
    if (opts.setConst || opts.setConstInternal) {
        interpolator.setConst(opts.setConstInternal);
    } else {
        interpolator.initialize(tmpDir, opts.skipData, opts.skipWordCounts);
        interpolator.interpolate(opts.reuseWeights, opts.nrRuns);
    }
    forest.saveInterpolationWeights();
}
