private void handleFinalizeSubroutine() {
    // assuming single phase for now
    String finalize = subFinalize.get(0);
    SubroutineSubprogram ss = fomFactory.createSubroutineSubprogram(finalize);
    ss.setSpecificationPart(fomFactory.createSpecificationPart());
    ss.setExecutionPart(fomFactory.createExecutionPart());
    ss.addFormalArgument("ESMF_CplComp", "comp");
    ss.addFormalArgument("ESMF_State", "importState");
    ss.addFormalArgument("ESMF_State", "exportState");
    ss.addFormalArgument("ESMF_Clock", "clock");
    ss.addFormalArgument(IntrinsicType.INTEGER, "rc", IntentSpec.OUT);
    // initialize rc
    AssignmentStatement as = fomFactory.createAssignmentStatementWithNamedConstant("rc", "ESMF_SUCCESS");
    ss.addExecutionPartConstruct(as);
    for (String rh : redistRoutehandlesToRelease) {
        CallStatement cs = fomFactory.createCallStatement("ESMF_ArrayRedistRelease");
        cs.addActualArgumentWithNamedConstant("routehandle", rh);
        cs.addActualArgumentWithNamedConstant("rc", "rc");
        ss.addExecutionPartConstruct(cs);
    }
    for (String rh : arraySMMRoutehandlesToRelease) {
        CallStatement cs = fomFactory.createCallStatement("ESMF_ArraySMMRelease");
        cs.addActualArgumentWithNamedConstant("routehandle", rh);
        cs.addActualArgumentWithNamedConstant("rc", "rc");
        ss.addExecutionPartConstruct(cs);
    }
    m.getModuleSubprogramPart().getModuleSubprogram().add(ss);
}
