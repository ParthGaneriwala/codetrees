public void testTC11() throws Exception {
    final Path p = new Path("/TC11/foo");
    System.out.println("p=" + p);
    // a. Create file and write one block of data. Close file.
    final int len1 = (int) BLOCK_SIZE;
    {
        FSDataOutputStream out = fs.create(p, false, buffersize, REPLICATION, BLOCK_SIZE);
        AppendTestUtil.write(out, 0, len1);
        out.close();
    }
    // b. Reopen file in "append" mode. Append half block of data.
    FSDataOutputStream out = fs.append(p);
    final int len2 = (int) BLOCK_SIZE / 2;
    AppendTestUtil.write(out, len1, len2);
    // c. Rename file to file.new.
    final Path pnew = new Path(p + ".new");
    assertTrue(fs.rename(p, pnew));
    // d. Close file handle that was opened in (b).
    try {
        out.close();
        fail("close() should throw an exception");
    } catch (Exception e) {
        AppendTestUtil.LOG.info("GOOD!", e);
    }
    // wait for the lease recovery
    cluster.setLeasePeriod(1000, 1000);
    AppendTestUtil.sleep(5000);
    // check block sizes
    final long len = fs.getFileStatus(pnew).getLen();
    final LocatedBlocks locatedblocks = fs.dfs.namenode.getBlockLocations(pnew.toString(), 0L, len);
    final int numblock = locatedblocks.locatedBlockCount();
    for (int i = 0; i < numblock; i++) {
        final LocatedBlock lb = locatedblocks.get(i);
        final Block blk = lb.getBlock();
        final long size = lb.getBlockSize();
        if (i < numblock - 1) {
            assertEquals(BLOCK_SIZE, size);
        }
        for (DatanodeInfo datanodeinfo : lb.getLocations()) {
            final DataNode dn = cluster.getDataNode(datanodeinfo.getIpcPort());
            final BlockMetaDataInfo metainfo = dn.getBlockMetaDataInfo(blk);
            assertEquals(size, metainfo.getNumBytes());
        }
    }
}
