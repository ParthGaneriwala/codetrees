private void c2shandleInternal(XmlPullParser parser, IoSession session) {
    String streamId = session.getAttribute("streamId").toString();
    if (streamId != null) {
        String c2sname = parser.getAttributeValue("", "c2sname");
        String password = parser.getAttributeValue("", "password");
        if (!c2sname.startsWith("c2s_")) {
            StreamError error = new StreamError(StreamError.Condition.undefined_condition);
            session.write(error);
            session.write(CloseStream.getCloseStream());
            session.close();
            return;
        }
        if (c2sSessions.containsKey(c2sname)) {
            StreamError error = new StreamError(StreamError.Condition.conflict);
            session.write(error);
            session.write(CloseStream.getCloseStream());
            session.close();
            return;
        }
        if (!registeredC2sModules.containsKey(c2sname)) {
            StreamError error = new StreamError();
            error.addApplicationCondition("unregistered", C2SROUTER_AUTH_NAMESPACE);
            session.write(error);
            session.write(CloseStream.getCloseStream());
            session.close();
            return;
        }
        String registeredPwd = registeredC2sModules.get(c2sname);
        if (password.equals(registeredPwd)) {
            C2sSessionImpl c2sSession = new C2sSessionImpl(session.getAttribute("streamId").toString(), c2sname, session, RouterManagerImpl.this);
            session.setAttachment(c2sSession);
            c2sSession.write("<success xmlns='" + C2SROUTER_AUTH_NAMESPACE + "' />");
            for (SmSessionImpl smSession : smSessions.values()) {
                notifySmAboutC2sSessions(smSession);
            }
            return;
        } else {
            session.write("<failed xmlns='" + C2SROUTER_AUTH_NAMESPACE + "'>" + "<reason>password error</reason>" + "</failed>");
            session.write(CloseStream.getCloseStream());
            session.close();
            return;
        }
    } else // not open stream
    {
        session.close();
        return;
    }
}
