public String saveButton() throws Exception {
    System.out.println("PurhcseDetailAction -> saveButton()");
    if (!validationPasses()) {
        System.out.println("validacion no paso");
        return "reload";
    }
    System.out.println("se hizo la pera la validacion");
    if (cancel != null) {
        return CANCEL;
    }
    if (delete != null) {
        return delete();
    }
    Enumeration<String> en = getRequest().getParameterNames();
    while (en.hasMoreElements()) {
        en.nextElement();
    }
    boolean isNew = false;
    isNew = (entryProductDetail.getId() == null);
    float oldPrice = 0;
    if (!isNew) {
        // update storageProduct if product or entryProductDetail quantity had been changeds
        EntryProductDetail entryProductDetailOld = entryProductDetailManager.get(entryProductDetail.getId());
        StorageProduct storageOld = productManager.get(entryProductDetailOld.getProduct().getId()).getStorageProduct();
        Integer quantityOld = entryProductDetailOld.getQuantity();
        storageOld.decrementStok(quantityOld);
        storageOld = storageProductManager.save(storageOld);
        oldPrice = entryProductDetailOld.getTotalPrice();
    }
    product = productManager.get(product.getId());
    entryProduct = (EntryProduct) getSession().getAttribute("entryProduct");
    entryProductDetail.setProduct(product);
    entryProductDetail.setEntryProduct(entryProduct);
    entryProductDetail.setQuantity(Integer.parseInt(getRequest().getParameter("quantity")));
    entryProductDetail.setUnitPrice(Float.parseFloat(getRequest().getParameter("unitPrice")));
    entryProductDetail.setSellPrice(Float.parseFloat(getRequest().getParameter("sellPrice")));
    entryProductDetail.setDiscountXfail(0.0f);
    entryProductDetail.setCurrentQuantity(entryProductDetail.getQuantity());
    entryProductDetail.setQuantityFail(0.0f);
    entryProductDetail.setDeleted(true);
    entryProductDetail.setTotalPrice(entryProductDetail.getQuantity() * entryProductDetail.getUnitPrice());
    // update entryProduct
    if (isNew) {
        entryProduct.setTotalPrice(entryProduct.getTotalPrice() + entryProductDetail.getTotalPrice());
    } else {
        entryProduct.setTotalPrice(entryProduct.getTotalPrice() - oldPrice + (entryProductDetail.getQuantity() * entryProductDetail.getUnitPrice()));
    }
    entryProduct = entryProductManager.save(entryProduct);
    entryProductDetail = entryProductDetailManager.save(entryProductDetail);
    // update storageProduct
    StorageProduct storageProduct = product.getStorageProduct();
    storageProduct.incrementStok(entryProductDetail.getCurrentQuantity());
    storageProduct = storageProductManager.save(storageProduct);
    // clean
    getSession().setAttribute("entryProductDetail", null);
    getSession().setAttribute("product", null);
    if (isNew) {
        saveMessage(getText("entryProductDetail.added"));
        return SUCCESS;
    } else {
        saveMessage(getText("entryProductDetail.updated"));
        return INPUT;
    }
}
