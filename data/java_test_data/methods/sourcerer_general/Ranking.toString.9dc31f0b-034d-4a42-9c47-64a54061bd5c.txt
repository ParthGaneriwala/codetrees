@Override
public String toString() {
    String tmName = tm.getContainerClass().getShortName();
    tmName += "." + tm.getName();
    String bmName = Scene.v().getMainClass().getName();
    String qualName = bmName + "." + tmName;
    StringBuffer sb = new StringBuffer();
    sb.append(qualName);
    sb.append(": potential match, ");
    sb.append(Math.round(rank * 100));
    sb.append("%, features ");
    sb.append(features.toString());
    sb.append(" - vector[");
    EnumSet<Features> allOf = EnumSet.allOf(Features.class);
    for (Iterator<Features> featIter = allOf.iterator(); featIter.hasNext(); ) {
        Features feature = featIter.next();
        if (features.contains(feature)) {
            sb.append("1");
        } else {
            sb.append("0");
        }
        if (featIter.hasNext()) {
            sb.append(";");
        }
    }
    sb.append("]:\nPotential points of failure:\n");
    List<String> ppfStringList = new ArrayList<String>();
    for (Shadow s : ppfs) ppfStringList.add(shadowToString(s));
    Collections.sort(ppfStringList);
    for (String s : ppfStringList) {
        sb.append(s);
        sb.append("\n");
    }
    if (!overlaps.isEmpty()) {
        List<String> overlapsList = new ArrayList<String>();
        for (Shadow s : overlaps) {
            overlapsList.add(shadowToString(s));
        }
        Collections.sort(overlapsList);
        sb.append("Related program points:\n");
        for (String s : overlapsList) {
            sb.append(s);
            sb.append("\n");
        }
    }
    return sb.toString();
}
