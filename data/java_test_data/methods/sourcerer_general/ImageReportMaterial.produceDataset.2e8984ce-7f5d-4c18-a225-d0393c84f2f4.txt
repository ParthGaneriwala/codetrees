public Object produceDataset(Map params) throws DatasetProduceException {
    log.debug("producing data....");
    reportMaterialRows = new HashMap<Long, ReportMaterialRow>();
    DefaultCategoryDataset dataset = new DefaultCategoryDataset() {

        protected void finalize() throws Throwable {
            super.finalize();
            log.debug(this + " finalized.");
        }
    };
    if (!years) {
        int month = initDate.getMonth();
        int year = initDate.getYear() + 1900;
        System.out.println("month: " + month + ", year: " + year);
        List<Integer> categoriesM = new ArrayList<Integer>();
        categoriesM.add(month * 10000 + year);
        int endMonth = endDate.getMonth();
        int endYear = endDate.getYear() + 1900;
        System.out.println("endmonth: " + endMonth + ", endyear: " + endYear);
        while (month != endMonth || year != endYear) {
            if (++month == 12) {
                month = 0;
                year++;
            }
            System.out.println("month: " + month + ", year: " + year);
            categoriesM.add(month * 10000 + year);
        }
        for (Long id : materialsIds) {
            Material material = materialManager.get(id);
            List<PurchaseDetail> purchasesDetails = purchaseDetailManager.findByMaterialPeriod(id, initDate, endDate);
            for (Integer i : categoriesM) {
                int m = i / 10000;
                int y = i % 10000;
                Double totalPrice = 0D;
                List<PurchaseDetail> purchasesDetailsRemove = new ArrayList<PurchaseDetail>();
                for (PurchaseDetail pD : purchasesDetails) {
                    if (pD.getPurchase().getDate().getMonth() == m) {
                        totalPrice = totalPrice + pD.getTotalPrice();
                        purchasesDetailsRemove.add(pD);
                    } else {
                        break;
                    }
                }
                purchasesDetails.removeAll(purchasesDetailsRemove);
                dataset.addValue(totalPrice, material.getName() + " [" + id + "]", categories[m] + "-" + y);
                ReportMaterialRow mrr = reportMaterialRows.get(id);
                if (mrr == null) {
                    ReportMaterialRow newMrr = new ReportMaterialRow(id, material.getName());
                    newMrr.setCategory(categories[m] + "-" + y);
                    newMrr.setValue(totalPrice);
                    reportMaterialRows.put(id, newMrr);
                } else {
                    mrr.setCategory(categories[m] + "-" + y);
                    mrr.setValue(totalPrice);
                }
            }
        }
    } else {
        int year = initDate.getYear() + 1900;
        List<Integer> categoriesY = new ArrayList<Integer>();
        categoriesY.add(year);
        int endYear = endDate.getYear() + 1900;
        while (year != endYear) {
            categoriesY.add(++year);
        }
        for (Long id : materialsIds) {
            Material material = materialManager.get(id);
            List<PurchaseDetail> purchasesDetails = purchaseDetailManager.findByMaterialPeriod(id, initDate, endDate);
            for (Integer i : categoriesY) {
                Double totalPrice = 0D;
                List<PurchaseDetail> purchasesDetailsRemove = new ArrayList<PurchaseDetail>();
                for (PurchaseDetail pD : purchasesDetails) {
                    if (pD.getPurchase().getDate().getYear() == i - 1900) {
                        totalPrice = totalPrice + pD.getTotalPrice();
                        purchasesDetailsRemove.add(pD);
                    } else {
                        break;
                    }
                }
                purchasesDetails.removeAll(purchasesDetailsRemove);
                dataset.addValue(totalPrice, material.getName() + " [" + id + "]", i);
                ReportMaterialRow mrr = reportMaterialRows.get(id);
                if (mrr == null) {
                    ReportMaterialRow newMrr = new ReportMaterialRow(id, material.getName());
                    newMrr.setCategory(i + "");
                    newMrr.setValue(totalPrice);
                    reportMaterialRows.put(id, newMrr);
                } else {
                    mrr.setCategory(i + "");
                    mrr.setValue(totalPrice);
                }
            }
        }
    }
    return dataset;
}
