public static BigDecimal sqrt(BigDecimal value, MathContext context) {
    /*
        Implements square root by coupled Newton iteration.
         */
    if (value.signum() < 0) {
        throw new ArithmeticException("value is negative");
    }
    if (context.getPrecision() == 0) {
        throw new IllegalArgumentException("context has infinite precision");
    }
    // approximation
    BigInteger unscaled = value.unscaledValue();
    int bitScale;
    int bitLength = unscaled.bitLength();
    long longTemp;
    if (bitLength > 53) {
        bitScale = bitLength - 53;
        longTemp = unscaled.shiftRight(bitScale).longValue();
    } else {
        bitScale = 0;
        longTemp = unscaled.longValue();
    }
    double doubleApproximation = Math.sqrt((double) longTemp);
    double correctionScale = 1.0;
    BigDecimal biScale = new BigDecimal(BigInteger.ONE.shiftLeft(bitScale / 2));
    if (bitScale % 2 != 0) {
        correctionScale *= Math.sqrt(2.0);
    }
    if (value.scale() % 2 != 0) {
        correctionScale *= Math.sqrt(10.0);
    }
    BigDecimal decimalApproximation = BigDecimal.valueOf(doubleApproximation * correctionScale).multiply(biScale).scaleByPowerOfTen(-value.scale() / 2);
    if (decimalApproximation.compareTo(BigDecimal.ZERO) == 0) {
        return BigDecimal.ZERO;
    }
    // precision
    Deque<Integer> precision = new LinkedList<Integer>();
    int tempPrecision = context.getPrecision();
    do {
        precision.push(tempPrecision + 2);
        tempPrecision /= 2;
    } while (tempPrecision > 16);
    MathContext currentContext = new MathContext(precision.peek(), RoundingMode.HALF_EVEN);
    // iteration
    BigDecimal previous;
    BigDecimal current = decimalApproximation;
    BigDecimal reciprocal = BigDecimal.ONE.divide(current.multiply(TWO), currentContext);
    do {
        if (precision.size() > 0) {
            currentContext = new MathContext(precision.pop(), RoundingMode.HALF_EVEN);
        }
        previous = current;
        BigDecimal reciprocalTemp = BigDecimal.ONE.subtract(current.multiply(reciprocal).multiply(TWO), currentContext);
        reciprocal = reciprocal.add(reciprocalTemp.multiply(reciprocal), currentContext);
        BigDecimal currentTemp = value.subtract(current.multiply(current), currentContext);
        current = current.add(currentTemp.multiply(reciprocal), currentContext);
    } while (precision.size() > 0 || current.compareTo(previous) != 0);
    return current.round(context);
}
