public void initVelocityConstraints(final BBTimeStep step) {
    BBBody b1 = m_bodyA;
    BBBody b2 = m_bodyB;
    // Compute the effective mass matrix.
    BBVec2 r1 = mul(b1.getTransform().R, sub(m_localAnchor1, b1.getLocalCenter()));
    BBVec2 r2 = mul(b2.getTransform().R, sub(m_localAnchor2, b2.getLocalCenter()));
    m_u = sub(sub(add(b2.m_sweep.c, r2), b1.m_sweep.c), r1);
    // Handle singularity.
    float length = m_u.length();
    if (length > linearSlop) {
        m_u.mul(1.0f / length);
    } else {
        m_u.set(0.0f, 0.0f);
    }
    float cr1u = cross(r1, m_u);
    float cr2u = cross(r2, m_u);
    float invMass = b1.m_invMass + b1.m_invI * cr1u * cr1u + b2.m_invMass + b2.m_invI * cr2u * cr2u;
    m_mass = invMass != 0.0f ? 1.0f / invMass : 0.0f;
    if (m_frequencyHz > 0.0f) {
        float C = length - m_length;
        // Frequency
        float omega = 2.0f * PI * m_frequencyHz;
        // Damping coefficient
        float d = 2.0f * m_mass * m_dampingRatio * omega;
        // Spring stiffness
        float k = m_mass * omega * omega;
        // magic formulas
        m_gamma = step.dt * (d + step.dt * k);
        m_gamma = m_gamma != 0.0f ? 1.0f / m_gamma : 0.0f;
        m_bias = C * step.dt * k * m_gamma;
        m_mass = invMass + m_gamma;
        m_mass = m_mass != 0.0f ? 1.0f / m_mass : 0.0f;
    }
    if (step.warmStarting) {
        // Scale the impulse to support a variable time step.
        m_impulse *= step.dtRatio;
        BBVec2 P = mul(m_impulse, m_u);
        b1.m_linearVelocity.sub(mul(b1.m_invMass, P));
        b1.m_angularVelocity -= b1.m_invI * cross(r1, P);
        b2.m_linearVelocity.add(mul(b2.m_invMass, P));
        b2.m_angularVelocity += b2.m_invI * cross(r2, P);
    } else {
        m_impulse = 0.0f;
    }
}
