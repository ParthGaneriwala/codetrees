public Hashtable Dijkstra(QNode start, QNode[] qNodes) {
    D.clear();
    Q.clear();
    S.clear();
    for (int i = 0; i < qNodes.length; i++) {
        if (qNodes[i] == start)
            D.put(start, new Integer(0));
        else
            D.put(qNodes[i], new Integer(Integer.MAX_VALUE));
        Q.add(qNodes[i]);
    }
    while (Q.size() > 0) {
        QNode u = ExtractMin(D, Q);
        S.add(u);
        for (int i = 0; i < u.adj.length; i++) {
            if (u.adj[i] != null) {
                if (((Integer) D.get(u.adj[i])).intValue() > ((Integer) D.get(u)).intValue() + 1) {
                    D.put(u.adj[i], new Integer(((Integer) D.get(u)).intValue() + 1));
                }
            }
        }
    }
    Hashtable htNodePath = new Hashtable();
    for (int k = 0; k < qNodes.length; k++) {
        if (qNodes[k].label == start.label || qNodes[k].label == -1)
            continue;
        QNode finish = qNodes[k];
        ArrayList ShortestPath = new ArrayList();
        QNode prev = finish;
        ArrayList S2 = (ArrayList) S.clone();
        while (prev != start) {
            ShortestPath.add(prev);
            S2.remove(prev);
            int min = Integer.MAX_VALUE;
            QNode new_prev = null;
            for (int i = 0; i < S2.size(); i++) {
                QNode s = (QNode) S2.get(i);
                if ((s.adj[0] == prev || s.adj[1] == prev || s.adj[2] == prev) && ((Integer) D.get(s)).intValue() < min) {
                    min = ((Integer) D.get(s)).intValue();
                    new_prev = s;
                }
            }
            prev = new_prev;
        }
        ShortestPath.add(start);
        htNodePath.put(finish, ShortestPath);
    }
    return htNodePath;
}
