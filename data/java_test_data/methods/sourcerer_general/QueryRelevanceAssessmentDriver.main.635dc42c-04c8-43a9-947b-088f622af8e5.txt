public static void main(String[] args) throws CorruptIndexException, IOException, ParseException {
    if (args.length <= 0) {
        System.out.println("Usage: Please specify a test query to assess relevance");
        System.exit(0);
    }
    final String testQuery = Join.join(" ", args);
    final File tmpDir = new File("." + FSEP + "tmp");
    final File baselineQueryTop10 = new File(tmpDir.getCanonicalPath() + FSEP + "baselineQueryTop10.txt");
    final File boostedPathBaselineTop10 = new File(tmpDir.getCanonicalPath() + FSEP + "boostedPathBaselineTop10.txt");
    final File boostedPathTop10 = new File(tmpDir.getCanonicalPath() + FSEP + "boostedPathTop10.txt");
    final File pathTop10 = new File(tmpDir.getCanonicalPath() + FSEP + "pathTop10.txt");
    final File topDocsUnionFile = new File(tmpDir.getCanonicalPath() + FSEP + "topDocsUnionFile.txt");
    if (!tmpDir.exists())
        tmpDir.mkdirs();
    BufferedWriter baselineQueryWriter = new BufferedWriter(new FileWriter(baselineQueryTop10));
    BufferedWriter pathBaselineQueryWriter = new BufferedWriter(new FileWriter(boostedPathBaselineTop10));
    BufferedWriter boostedPathQueryWriter = new BufferedWriter(new FileWriter(boostedPathTop10));
    BufferedWriter pathQueryWriter = new BufferedWriter(new FileWriter(pathTop10));
    BufferedWriter topDocsUnionWriter = new BufferedWriter(new FileWriter(topDocsUnionFile));
    IndexReader reader = IndexReader.open("index");
    Searcher searcher = new IndexSearcher(reader);
    Analyzer analyzer = new SnowballAnalyzer("English", STOP_WORDS.toArray(new String[STOP_WORDS.size()]));
    QueryParser parser = new QueryParser("contents", analyzer);
    Query baselineQuery = parser.parse(QueryUtils.buildBaselineQuery(testQuery));
    Query boostedPathBaselineQuery = parser.parse(QueryUtils.buildBoostedPathBaselineQuery(testQuery));
    Query boostedPathQuery = parser.parse(QueryUtils.buildBoostedPathQuery(testQuery));
    Query pathQuery = parser.parse(QueryUtils.buildPathQuery(testQuery));
    // This set will contain the top 10 documents from each result set for
    // each of the 4 query types
    Map<Integer, String> topDocuments = Maps.newHashMap();
    outputQueryTop10(baselineQuery, searcher, baselineQueryWriter, topDocuments);
    outputQueryTop10(boostedPathBaselineQuery, searcher, pathBaselineQueryWriter, topDocuments);
    outputQueryTop10(boostedPathQuery, searcher, boostedPathQueryWriter, topDocuments);
    outputQueryTop10(pathQuery, searcher, pathQueryWriter, topDocuments);
    StringBuilder results = new StringBuilder();
    for (Map.Entry<Integer, String> entry : topDocuments.entrySet()) {
        String title = entry.getValue();
        results.append(String.format("%d\t%s", entry.getKey(), title) + EOL);
    }
    topDocsUnionWriter.write(results.toString());
    topDocsUnionWriter.flush();
    topDocsUnionWriter.close();
    reader.close();
}
