public void testVarBinaryComplex() {
    PreparedStatement ps = null;
    ResultSet rs = null;
    byte[] expectedBytes = new byte[] { (byte) 0xaa, (byte) 0x99 };
    byte[] ba1, ba2;
    try {
        ps = netConn.prepareStatement("INSERT INTO alltypes(id, vb) VALUES(?, ?)");
        ps.setInt(1, 3);
        ps.setBytes(2, expectedBytes);
        assertEquals(1, ps.executeUpdate());
        ps.setInt(1, 4);
        assertEquals(1, ps.executeUpdate());
        ps.close();
        netConn.commit();
        ps = netConn.prepareStatement("SELECT * FROM alltypes WHERE vb = ?");
        ps.setBytes(1, expectedBytes);
        rs = ps.executeQuery();
        assertTrue("Got no rows with vb = b'AA99'", rs.next());
        ba1 = rs.getBytes("vb");
        assertTrue("Got only one row with vb = b'AA99'", rs.next());
        ba2 = rs.getBytes("vb");
        assertFalse("Got too many rows with vb = b'AA99'", rs.next());
    } catch (SQLException se) {
        junit.framework.AssertionFailedError ase = new junit.framework.AssertionFailedError(se.getMessage());
        ase.initCause(se);
        throw ase;
    } finally {
        try {
            if (rs != null) {
                rs.close();
            }
            if (ps != null) {
                ps.close();
            }
        } catch (Exception e) {
        }
    }
    assertEquals("Retrieved bye array length wrong (1)", expectedBytes.length, ba1.length);
    for (int i = 0; i < ba1.length; i++) {
        assertEquals("Byte " + i + " wrong (1)", expectedBytes[i], ba1[i]);
    }
    assertEquals("Retrieved bye array length wrong (2)", expectedBytes.length, ba2.length);
    for (int i = 0; i < ba2.length; i++) {
        assertEquals("Byte " + i + " wrong (2)", expectedBytes[i], ba2[i]);
    }
}
