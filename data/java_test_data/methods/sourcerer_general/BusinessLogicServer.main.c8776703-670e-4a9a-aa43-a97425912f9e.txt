public static void main(String[] args) {
    try {
        // create and initialize the ORB
        ORB orb = ORB.init(args, null);
        // get reference to rootpoa & activate the POAManager
        POA rootpoa = POAHelper.narrow(orb.resolve_initial_references("RootPOA"));
        rootpoa.the_POAManager().activate();
        BusinessLogicImpl businessLogicImpl = new BusinessLogicImpl();
        businessLogicImpl.setORB(orb);
        // get object reference from the servant
        org.omg.CORBA.Object ref = rootpoa.servant_to_reference(businessLogicImpl);
        BusinessLogic href = BusinessLogicHelper.narrow(ref);
        // get the root naming context
        org.omg.CORBA.Object objRef = orb.resolve_initial_references("NameService");
        // Use NamingContextExt instead of NamingContext. This is
        // part of the Interoperable naming Service.
        NamingContextExt ncRef = NamingContextExtHelper.narrow(objRef);
        NameComponent[] path = ncRef.to_name("BusinessLogic");
        ncRef.rebind(path, href);
        // create servants and register it with the ORB
        routing = RoutingEngineHelper.narrow(ncRef.resolve_str("RoutingEngine"));
        crm = CRMHelper.narrow(ncRef.resolve_str("CRM"));
        tracking = trackingHelper.narrow(ncRef.resolve_str("tracking"));
        // add servants to implementation
        businessLogicImpl.setServants(crm, routing, tracking);
        // start the routing engine in its own thread
        Thread routingThread = new Thread(new RoutingThread());
        routingThread.start();
        // register the delivery listener service with the tracking engine
        tracking.registerListener("http://localhost:8082/trackinglistenerservice");
        System.out.println("Business Logic server ready and waiting ...");
        orb.run();
    } catch (Exception e) {
        System.err.println("ERROR: " + e);
        e.printStackTrace(System.out);
    }
    System.out.println("Business Logic server exiting ...");
}
