public void doReplaceComplications() throws ComponentNotFoundException, MultipleComponentsFoundException {
    TraitList complications = getPerson().getComplications();
    int listSize = complications.getSize();
    JButton selectButton = null;
    JButton cancelButton = null;
    JList traitList = null;
    int points = getPerson().getCurrentStatPoints();
    for (int i = 0; i < getPerson().getComplications().getSize(); i++) {
        TraitData oldComplication = getPerson().getComplications().get(i);
        // Invoke swap!
        String panelName = TraitListPanel.getPanelName(oldComplication);
        JPanel panel = super.findPanelIn(complicationsPanel, panelName);
        JButton swapButton = super.findButtonIn(panel, TraitPanel.SWAP_BUTTON);
        assertNotNull(swapButton);
        assertEnabled(swapButton);
        tester.actionClick(swapButton);
        assertTrue(traitControlPanel.getSelectorDialog().isShowing());
        selectButton = (JButton) finder.find(traitControlPanel.getSelectorDialog(), new NameMatcher(ObjectSelectorDialog.SELECT_BUTTON));
        cancelButton = (JButton) finder.find(traitControlPanel.getSelectorDialog(), new NameMatcher(ObjectSelectorDialog.CANCEL_BUTTON));
        traitList = (JList) finder.find(traitControlPanel.getSelectorDialog(), new NameMatcher(ObjectSelectorDialog.SELECTION_LIST));
        assertNotNull(selectButton);
        assertNotNull(cancelButton);
        assertNotNull(traitList);
        assertNotNull(listTester);
        assertTrue(selectButton.isShowing());
        // Ensure dialog list has no traits that are already on the person.
        for (int j = 0; j < traitList.getModel().getSize(); j++) {
            TraitData tmpData = (TraitData) traitList.getModel().getElementAt(j);
            assertFalse(getPerson().hasComplication(tmpData));
        }
        // Select random trait and select it it
        int idx = random.nextInt(traitList.getModel().getSize());
        TraitData newComplication = (TraitData) traitList.getModel().getElementAt(idx);
        listTester.actionSelectIndex(traitList, idx);
        assertTrue(selectButton.isEnabled());
        assertTrue(cancelButton.isEnabled());
        buttonTester.actionClick(selectButton);
        // List size should be the same
        assertEquals(listSize, complications.size());
        assertTrue(getPerson().hasComplication(newComplication));
        assertFalse(getPerson().hasComplication(oldComplication));
        int newPoints = points - oldComplication.getCost() + newComplication.getCost();
        assertEquals(newPoints, getPerson().getCurrentStatPoints());
        points = newPoints;
    }
}
