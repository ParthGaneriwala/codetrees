public StringBuilder getAsText() {
    StringBuilder sb = new StringBuilder(1024 * 5);
    // Name, profile and level
    String name = (isMale() ? maleName : femaleName);
    sb.append(name);
    sb.append("\n");
    for (int i = 0; i < name.length(); i++) {
        sb.append("=");
    }
    sb.append("\n");
    switch(level) {
        case LEVEL_GREENHORN:
            sb.append("Greenhorn");
            break;
        case LEVEL_VETERAN:
            sb.append("Veteran");
            break;
        case LEVEL_BIG_DAM_HERO:
            sb.append("Big Damn Hero");
            break;
    }
    // personality
    if (!StringUtils.isEmpty(personalityTemplate)) {
        sb.append("Personality : ");
        sb.append(personalityTemplate);
        sb.append("\n");
    }
    // Main stats
    int len = 0;
    for (String s : MainStat.getNames()) {
        len = (s.length() > len ? s.length() : len);
    }
    for (int i = 0; i < MainStat.count(); i++) {
        String key = MainStat.getForIndex(i).getKey();
        String longname = MainStat.getNames().get(i);
        while (longname.length() < len) {
            longname = longname + " ";
        }
        sb.append(longname);
        sb.append(" : ");
        sb.append(mainStats.getStat(key).getDice());
        sb.append("\n");
    }
    // Derived Stats
    sb.append("\n\nInitiative : ");
    sb.append(mainStats.getStat("AGL").getDice());
    sb.append("+");
    sb.append(mainStats.getStat("ALT").getDice());
    sb.append("\nLife Points : ");
    int lifeTotal = mainStats.getStat("VIT").getValue() + mainStats.getStat("WIL").getValue();
    sb.append(lifeTotal);
    // Assets
    sb.append("\n\nAssets\n-----\n");
    for (TraitData tdata : assets) {
        sb.append(tdata.getName());
        sb.append(" (");
        sb.append((tdata.isMajor() ? "Major)\n" : "Minor)\n"));
    }
    // Complications
    sb.append("\nComplications\n-------------\n");
    for (TraitData tdata : complications) {
        sb.append(tdata.getName());
        sb.append(" (");
        sb.append((tdata.isMajor() ? "Major)\n" : "Minor)\n"));
    }
    // Skills
    sb.append("\n\nSkills\n------\n");
    sb.append(skillSheet.getAsText());
    // Armor
    sb.append("\n\nArmor\n-----\n");
    for (Armor arm : armor) {
        sb.append(arm.toString());
        sb.append("\n");
    }
    // Weapons
    sb.append("\n\nWeapons\n-------\n");
    for (MeleeWeapon mw : meleeWeapons) {
        sb.append(mw.toString());
        sb.append("( ");
        sb.append(getToHitFor(mw.getSkill()));
        sb.append(" )");
        sb.append("\n");
    }
    for (RangedWeapon rw : rangedWeapons) {
        sb.append(rw.toString());
        sb.append("( ");
        sb.append(getToHitFor(rw.getSkill()));
        sb.append(" )");
        sb.append("\n");
    }
    for (Explosive ex : explosives) {
        sb.append(ex.toString());
        sb.append("\n");
    }
    // Equipment
    sb.append("\n\nEquipment\n---------\n");
    for (Equipment eq : equipment) {
        sb.append(eq.toString());
        sb.append("\n");
    }
    // Info
    sb.append("\n\nInfo");
    sb.append("\n----\n");
    try {
        sb.append(info.getText(0, info.getLength()));
    } catch (BadLocationException e) {
        e.printStackTrace();
    }
    return sb;
}
