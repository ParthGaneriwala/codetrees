@Override
public String execute() throws Exception {
    HashMap<Long, List<WorkPeriod>> map = new HashMap<Long, List<WorkPeriod>>();
    // Department department = employee.getDepartment();
    if (departmentIds != null) {
        for (Long departmentId : departmentIds) {
            // Long departmentId = department.getId();
            if (departmentId != null) {
                if (from != null && to != null) {
                    Date lastLegalDate = attendanceLastSortedDateDao.getLastLegalDate(departmentId);
                    if (lastLegalDate != null && from.before(lastLegalDate)) {
                        from = lastLegalDate;
                    }
                    Employee e = new Employee();
                    Department d = new Department();
                    d.setId(departmentId);
                    e.setDepartment(d);
                    List<Employee> employees = employeeDao.findEmployee(e);
                    List<Date> dates = DateUtil.getDates(from, to);
                    DataConfigure dataConfigure = dataConfigureDao.getDataConfigure();
                    Random r = new Random();
                    if (dates != null && employees != null) {
                        boolean[] bs = null;
                        int i = 7;
                        Calendar c = Calendar.getInstance();
                        c.setTime(dates.get(0));
                        int dayOfWeek = c.get(Calendar.DAY_OF_WEEK);
                        if (dayOfWeek != Calendar.MONDAY) {
                            bs = new boolean[7];
                            for (int j = 0; j < 7; j++) {
                                bs[j] = false;
                            }
                            if (dayOfWeek == Calendar.THURSDAY) {
                                i = 1;
                            } else if (dayOfWeek == Calendar.WEDNESDAY) {
                                i = 2;
                            } else if (dayOfWeek == Calendar.THURSDAY) {
                                i = 3;
                            } else if (dayOfWeek == Calendar.FRIDAY) {
                                i = 4;
                            } else if (dayOfWeek == Calendar.SATURDAY) {
                                i = 5;
                            } else if (dayOfWeek == Calendar.SUNDAY) {
                                i = 6;
                            }
                        }
                        for (Date date : dates) {
                            if (i == 7) {
                                bs = getBoolean(workdayExtraRatioFrom, workdayExtraRatioTo);
                                i = 0;
                            }
                            boolean workdayExtra = bs[i];
                            i++;
                            boolean saturdayExtra = (r.nextInt(100) < saturdayExtraRatio);
                            boolean sundayExtra = (r.nextInt(100) < sundayExtraRatio);
                            boolean satNightExtra = (r.nextInt(100) < satNightExtraRatio);
                            boolean sunNightExtra = (r.nextInt(100) < sunNightExtraRatio);
                            for (Employee employee : employees) {
                                Long dId = employee.getDepartment().getId();
                                List<WorkPeriod> wps = map.get(dId);
                                if (wps == null) {
                                    wps = workPeriodDao.findWorkPeriod(dId);
                                    map.put(dId, wps);
                                }
                                AttendanceService as = new AttendanceService();
                                if (employee.isOnBoard(date)) {
                                    List<Attendance> attendances = as.redefineAttendance(employee, date, wps, dataConfigure, workdayExtra, saturdayExtra, sundayExtra, satNightExtra, sunNightExtra);
                                    attendanceDao.saveAttendances(attendances);
                                }
                            }
                        }
                    }
                    attendanceLastSortedDateDao.saveLastLegalDate(to, departmentId);
                }
            }
        }
    }
    // }
    return SUCCESS;
}
