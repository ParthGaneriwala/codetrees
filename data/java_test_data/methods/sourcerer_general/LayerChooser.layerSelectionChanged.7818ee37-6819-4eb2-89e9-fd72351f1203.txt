@SuppressWarnings("serial")
public boolean layerSelectionChanged(LayerHandler handler, Collection added, Collection removed) {
    for (Iterator layers = removed.iterator(); layers.hasNext(); ) {
        Layer layer = (Layer) layers.next();
        if (mBaseLayers.contains(layer)) {
            mBaseLayerGroup.remove((JRadioButton) mBaseLayerButtons.get(mBaseLayers.indexOf(layer)));
            mBaseLayerButtons.remove(mBaseLayers.indexOf(layer));
            mBaseLayers.remove(layer);
        }
        if (mOverlays.contains(layer)) {
            mOverlayButtons.remove(mOverlays.indexOf(layer));
            mOverlays.remove(layer);
        }
    }
    int index = 0;
    for (Iterator<Layer> layers = handler.getBaseLayers().iterator(); layers.hasNext(); index++) {
        final Layer layer = layers.next();
        if (added.contains(layer)) {
            mBaseLayers.add(index, layer);
            mBaseLayerButtons.add(index, new JRadioButton(new AbstractAction(layer.toString()) {

                public void actionPerformed(ActionEvent event) {
                    if (((JRadioButton) event.getSource()).isSelected())
                        mLayers.setBaseLayer(layer);
                    else if (layer.equals(mLayers.getBaseLayer()))
                        mLayers.setBaseLayer(null);
                }
            }));
            mBaseLayerGroup.add((JRadioButton) mBaseLayerButtons.get(index));
        } else {
            Collections.swap(mBaseLayerButtons, index, mBaseLayers.indexOf(layer));
            Collections.swap(mBaseLayers, index, mBaseLayers.indexOf(layer));
        }
    }
    index = 0;
    for (Iterator layers = handler.getOverlays().iterator(); layers.hasNext(); index++) {
        final Layer layer = (Layer) layers.next();
        if (added.contains(layer)) {
            mOverlays.add(index, layer);
            mOverlayButtons.add(index, new JCheckBox(new AbstractAction(layer.toString()) {

                public void actionPerformed(ActionEvent event) {
                    if (((JCheckBox) event.getSource()).isSelected())
                        mLayers.enableOverlays(Collections.singleton(layer));
                    else
                        mLayers.disableOverlays(Collections.singleton(layer));
                }
            }));
        } else {
            Collections.swap(mOverlayButtons, index, mOverlays.indexOf(layer));
            Collections.swap(mOverlays, index, mOverlays.indexOf(layer));
        }
    }
    GridBagConstraints settings = new GridBagConstraints();
    settings.gridx = 0;
    settings.anchor = GridBagConstraints.NORTHWEST;
    mBaseLayerPanel.removeAll();
    for (Iterator buttons = mBaseLayerButtons.iterator(); buttons.hasNext(); ) {
        JRadioButton button = (JRadioButton) buttons.next();
        if (!buttons.hasNext())
            settings.weighty = 1;
        mBaseLayerPanel.add(button, settings);
    }
    settings.weighty = 0;
    mOverlayPanel.removeAll();
    for (Iterator buttons = mOverlayButtons.iterator(); buttons.hasNext(); ) {
        JCheckBox button = (JCheckBox) buttons.next();
        if (!buttons.hasNext())
            settings.weighty = 1;
        mOverlayPanel.add(button, settings);
    }
    mBaseLayerScroll.setViewportView(mBaseLayerPanel);
    mOverlayScroll.setViewportView(mOverlayPanel);
    revalidate();
    if (handler.getBaseLayer() == null && !handler.getBaseLayers().isEmpty())
        handler.setBaseLayer((Layer) handler.getBaseLayers().get(0));
    return true;
}
