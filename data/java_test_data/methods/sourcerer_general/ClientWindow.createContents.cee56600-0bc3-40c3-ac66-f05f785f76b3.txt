protected void createContents() {
    // Creating the shell window
    shell = new Shell(SWT.DIALOG_TRIM);
    shell.addShellListener(new ShellAdapter() {

        public void shellClosed(ShellEvent e) {
            if (showQuitBox()) {
                ClientApplication.getController().getGUIMediator().sendQuitMessage();
                // Cleaning resources cached by resource manager
                SWTResourceManager.dispose();
            } else {
                e.doit = false;
            }
        }
    });
    shell.setLayout(new FormLayout());
    shell.setImage(SWTResourceManager.getImage(ClientWindow.class, "/images/connect4Icon.ico"));
    shell.setSize(800, 600);
    shell.setText("Connect4                                                   by ExplicitSoft");
    // Creating the container for the tabs
    tabContainer = new TabFolder(shell, SWT.NONE);
    final FormData tabsFormLayoutData = new FormData();
    tabsFormLayoutData.height = 498;
    tabsFormLayoutData.left = new FormAttachment(0, 1);
    tabContainer.setLayoutData(tabsFormLayoutData);
    // Creating the first tab (game stats)
    final TabItem tabStats = new TabItem(tabContainer, SWT.NONE);
    tabStats.setText("Stats");
    final TabItem tiDebug = new TabItem(tabContainer, SWT.NONE);
    tiDebug.setText("Debug");
    final Composite cmpDebug = new Composite(tabContainer, SWT.NONE);
    cmpDebug.setLayout(new FormLayout());
    tiDebug.setControl(cmpDebug);
    txtDebug = new Text(cmpDebug, SWT.V_SCROLL | SWT.MULTI | SWT.BORDER | SWT.WRAP);
    final FormData formData = new FormData();
    formData.bottom = new FormAttachment(0, 475);
    formData.right = new FormAttachment(100, -8);
    formData.top = new FormAttachment(0, 5);
    formData.left = new FormAttachment(0, 0);
    txtDebug.setLayoutData(formData);
    txtDebug.setEditable(false);
    txtDebug.setBackground(SWTResourceManager.getColor(255, 255, 255));
    lblDebugStatus = new Label(cmpDebug, SWT.NONE);
    final FormData formData_1 = new FormData();
    formData_1.top = new FormAttachment(0, 479);
    formData_1.right = new FormAttachment(0, 792);
    formData_1.left = new FormAttachment(0, 2);
    lblDebugStatus.setLayoutData(formData_1);
    lblDebugStatus.setText("Debug mode...");
    // Creating the composite that will contain the sash forms
    final Composite cmpStats = new Composite(tabContainer, SWT.NONE);
    tabStats.setControl(cmpStats);
    // Creating main sash form
    final SashForm sfMain = new SashForm(cmpStats, SWT.HORIZONTAL);
    sfMain.setBounds(0, 37, 786, 439);
    // Creating the first child sash form to hold the clients' list
    final SashForm sfClients = new SashForm(sfMain, SWT.VERTICAL);
    // Creating the second child sash form to hold the ranking list
    final SashForm sfRankingChat = new SashForm(sfClients, SWT.VERTICAL);
    // Creating the ranking list
    // Creating the "Chat:" label
    // Creating the chat window
    txtChat = new StyledText(sfRankingChat, SWT.BORDER | SWT.MULTI | SWT.WRAP | SWT.V_SCROLL);
    txtChat.setBackground(SWTResourceManager.getColor(255, 255, 255));
    txtChat.setEditable(false);
    // Creating the "Send message" buttton
    // Creating the send message textbox
    txtSendMsg = new StyledText(sfRankingChat, SWT.BORDER | SWT.MULTI | SWT.WRAP | SWT.V_SCROLL);
    txtSendMsg.addKeyListener(new KeyAdapter() {

        public void keyReleased(KeyEvent e) {
            if (e.character == SWT.CR) {
                sendMessageToAll();
            }
        }
    });
    sfRankingChat.setWeights(new int[] { 370, 77 });
    sfClients.setWeights(new int[] { 379 });
    // Creating the clients tree list
    treeClients = new Tree(sfMain, SWT.BORDER);
    // Players' Popup Menu
    playersMenu = new Menu(treeClients);
    treeClients.setMenu(playersMenu);
    pmenuInvite = new MenuItem(playersMenu, SWT.NONE);
    pmenuInvite.setImage(SWTResourceManager.getImage(ClientWindow.class, "/images/newGame.png"));
    pmenuInvite.setText(" Invite...");
    pmenuInvite.addSelectionListener(new SelectionAdapter() {

        public void widgetSelected(SelectionEvent e) {
            if (treeClients.getSelection().length > 0) {
                String playerName = ((Player) treeClients.getSelection()[0].getData()).getLogin();
                // Just simulationg invitation
                InviteOpponentWindow inviteOpponentWindow = new InviteOpponentWindow(shell, playerName);
                ArrayList<String> gameNames = new ArrayList<String>();
                gameNames.add("Connect4");
                gameNames.add("Checkers");
                gameNames.add("ExplicitRacer");
                gameNames.add("Chess");
                inviteOpponentWindow.open(gameNames);
            }
        }
    });
    pmenuInfo = new MenuItem(playersMenu, SWT.NONE);
    pmenuInfo.setImage(SWTResourceManager.getImage(ClientWindow.class, "/images/about.png"));
    pmenuInfo.setText(" Information...");
    pmenuInfo.addSelectionListener(new SelectionAdapter() {

        public void widgetSelected(SelectionEvent e) {
            // Para testes
            ClientApplication.getController().getGUIMediator().sendAccountEditMessage("pureza", "pass", "Admin");
        // TODO: Show information window...
        }
    });
    playersMenu.addMenuListener(new MenuListener() {

        public void menuHidden(MenuEvent e) {
        }

        public void menuShown(MenuEvent e) {
            if (treeClients.getSelection().length > 0) {
                String playerName = ((Player) treeClients.getSelection()[0].getData()).getLogin();
                if (playerName.equals(ClientApplication.getController().getUser().getLogin())) {
                    pmenuInvite.setEnabled(false);
                } else {
                    pmenuInvite.setEnabled(true);
                }
            }
        }
    });
    sfMain.setWeights(new int[] { 641, 142 });
    // Creating the "Clients:" label
    final Label lblClients = new Label(cmpStats, SWT.NONE);
    lblClients.setImage(SWTResourceManager.getImage(ClientWindow.class, "/images/clientsHeader.png"));
    lblClients.setBounds(640, 10, 86, 25);
    // Creating the "Ranking:" label
    final Label lblRanking = new Label(cmpStats, SWT.NONE);
    lblRanking.setImage(SWTResourceManager.getImage(ClientWindow.class, "/images/chatHeader.png"));
    lblRanking.setBounds(1, 8, 86, 25);
    lblStatus = new Label(cmpStats, SWT.NONE);
    lblStatus.setText("Status messages...");
    lblStatus.setBounds(1, 480, 785, 13);
    ToolBar mainToolbar;
    mainToolbar = new ToolBar(shell, SWT.NONE);
    tabsFormLayoutData.right = new FormAttachment(mainToolbar, 0, SWT.RIGHT);
    tabsFormLayoutData.top = new FormAttachment(mainToolbar, 5, SWT.BOTTOM);
    mainToolbar.setBackgroundImage(SWTResourceManager.getImage(ClientWindow.class, "/images/toolbarHeader.png"));
    final FormData toolbarFormLayoutData = new FormData();
    toolbarFormLayoutData.bottom = new FormAttachment(0, 40);
    toolbarFormLayoutData.top = new FormAttachment(0, 0);
    toolbarFormLayoutData.right = new FormAttachment(0, 795);
    toolbarFormLayoutData.left = new FormAttachment(0, -1);
    mainToolbar.setLayoutData(toolbarFormLayoutData);
    final ToolItem tbiExit = new ToolItem(mainToolbar, SWT.PUSH);
    tbiExit.addSelectionListener(new SelectionAdapter() {

        public void widgetSelected(SelectionEvent arg0) {
            if (showQuitBox()) {
                ClientApplication.getController().getGUIMediator().sendQuitMessage();
                // Cleaning resources cached by resource manager
                SWTResourceManager.dispose();
            }
        }
    });
    tbiExit.setImage(SWTResourceManager.getImage(ClientWindow.class, "/images/exit.png"));
    tbiExit.setText("Quit App");
    final ToolItem tbiSettings = new ToolItem(mainToolbar, SWT.PUSH);
    tbiSettings.addSelectionListener(new SelectionAdapter() {

        public void widgetSelected(SelectionEvent arg0) {
            LoginWindow loginWindow = LoginWindow.getInstance();
            loginWindow.open();
        }
    });
    tbiSettings.setImage(SWTResourceManager.getImage(ClientWindow.class, "/images/setts.png"));
    tbiSettings.setText("Settings");
    final ToolItem tbiAbout = new ToolItem(mainToolbar, SWT.PUSH);
    tbiAbout.setImage(SWTResourceManager.getImage(ClientWindow.class, "/images/about.png"));
    tbiAbout.setText("About ");
    final ToolItem tbiHelp = new ToolItem(mainToolbar, SWT.PUSH);
    tbiHelp.setImage(SWTResourceManager.getImage(ClientWindow.class, "/images/help.png"));
    tbiHelp.setText("Help Me!");
// Controller.getInstance().getConnectionController().sendListPlayersMessage();
}
