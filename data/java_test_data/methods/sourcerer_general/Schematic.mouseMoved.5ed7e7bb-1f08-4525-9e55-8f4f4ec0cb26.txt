public void mouseMoved(MouseEvent e) {
    int cxr, cyr, ox, oy, scx, scy, h, v;
    cxr = Schematic.s2cr(e.getX());
    cyr = Schematic.s2cr(e.getY());
    ox = sch.ortho_point.x;
    oy = sch.ortho_point.y;
    scx = Schematic.c2s(sch.crosshair.x);
    scy = Schematic.c2s(sch.crosshair.y);
    if (sch.state == Schematic.STATE_EDGE) {
        /*
             * Track the schematic crosshair with the current mouse point. 
             * Filter the x/y components if crosshair movement is supposed to be 
             * orthogonal
             */
        if (sch.orthogonal) {
            if (sch.started && sch.tedge != null) {
                if (sch.ortho_dir == Schematic.VCANVAS_ORTHO_H)
                    cyr = oy;
                if (sch.ortho_dir == Schematic.VCANVAS_ORTHO_V)
                    cxr = ox;
                if (cxr == ox && cyr != oy) {
                    sch.ortho_dir = Schematic.VCANVAS_ORTHO_V;
                }
                if (cxr != ox && cyr == oy) {
                    sch.ortho_dir = Schematic.VCANVAS_ORTHO_H;
                }
                if (cxr != ox && cyr != oy) {
                    sch.ortho_dir = Schematic.VCANVAS_ORTHO_H;
                }
                if (cxr == ox && cyr == oy) {
                    sch.ortho_dir = Schematic.VCANVAS_ORTHO_N;
                }
            }
        }
        sch.crosshair.x = cxr;
        sch.crosshair.y = cyr;
        sch.suggestEdgePoint(scx, scy);
        if (sch.started && sch.tedge != null) {
            /*
                 * Set the temporary end of the edge being worked on so that we
                 * can see the temporary edge as we move the mouse
                 */
            sch.tedge.temp.x = sch.crosshair.x;
            sch.tedge.temp.y = sch.crosshair.y;
        }
    } else if (sch.state == Schematic.STATE_NODE) {
        sch.tnode.place(cxr, cyr);
    }
    sch.repaint();
}
