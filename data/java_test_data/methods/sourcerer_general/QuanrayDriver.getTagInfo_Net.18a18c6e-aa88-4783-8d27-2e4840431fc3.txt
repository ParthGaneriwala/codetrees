public Enumeration<TagStructure> getTagInfo_Net() throws DriverException {
    try {
        clearBuffer();
        String cmd = QUANRAY_NET_INVENTORY + QUANRAY_POWER + "00020100" + QUANRAY_ANTENNA;
        String crc = getCRC16_Net(cmd);
        String temp = sendCommand(cmd + crc);
        if (temp == null || temp.length() < 12)
            return null;
        if (!temp.substring(8, 10).equals("00"))
            return null;
        System.out.println(temp + "[" + temp.length() + "]");
        int count = Integer.parseInt(temp.substring(10, 12));
        String[] uid = new String[count];
        Collection<TagStructure> cl = new ArrayList<TagStructure>();
        for (int i = 0; i < count; i++) {
            String str = temp.substring(12 + i * 32, 12 + i * 32 + 32);
            uid[i] = str.substring(8, 32).toUpperCase();
            boolean repeatUid = false;
            for (int j = 0; j < i; j++) {
                if (uid[i].equals(uid[j]))
                    repeatUid = true;
            }
            if (!repeatUid) {
                TagStructure ts = new TagStructure();
                ts.setUID(uid[i]);
                ts.setDiscoverTime(StaticFactory.getFormatTime(StaticFactory.TIME_FULL));
                ts.setLastSeenTime("");
                ts.setReadsCount(1);
                ts.setAntenna(str.substring(0, 2));
                cl.add(ts);
                System.out.println("uid:[" + ts.getUID() + "]antenna:[" + ts.getAntenna() + "]");
            } else
                System.out.println("repeat uid:[" + uid[i] + "]antenna:[" + str.substring(0, 2) + "]");
        }
        return Collections.enumeration(cl);
    } catch (Exception e) {
        e.printStackTrace();
        throw new DriverException("getTagInfo_Net error [" + e.getMessage() + "]!");
    }
}
