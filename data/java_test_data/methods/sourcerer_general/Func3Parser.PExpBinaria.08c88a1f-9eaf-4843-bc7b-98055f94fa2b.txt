public static final Expressao PExpBinaria() throws ParseException {
    trace_call("PExpBinaria");
    try {
        Expressao retorno, param2;
        Id id;
        List list = null;
        retorno = PExpUnaria();
        label_6: while (true) {
            switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case AND:
                case OR:
                case LPAREN:
                case GT:
                case LT:
                case EQ:
                case CONCAT:
                case CONS:
                case CONCAT_LISTA:
                case SEQ:
                case PLUS:
                case MINUS:
                case STAR:
                    ;
                    break;
                default:
                    jj_la1[12] = jj_gen;
                    break label_6;
            }
            switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case PLUS:
                    jj_consume_token(PLUS);
                    param2 = PExpUnaria();
                    retorno = new ExpSoma(retorno, param2);
                    break;
                case MINUS:
                    jj_consume_token(MINUS);
                    param2 = PExpUnaria();
                    retorno = new ExpSub(retorno, param2);
                    break;
                case AND:
                    jj_consume_token(AND);
                    param2 = PExpUnaria();
                    retorno = new ExpAnd(retorno, param2);
                    break;
                case OR:
                    jj_consume_token(OR);
                    param2 = PExpUnaria();
                    retorno = new ExpOr(retorno, param2);
                    break;
                case EQ:
                    jj_consume_token(EQ);
                    param2 = PExpUnaria();
                    retorno = new ExpEquals(retorno, param2);
                    break;
                case CONCAT:
                    jj_consume_token(CONCAT);
                    param2 = PExpUnaria();
                    retorno = new ExpConcat(retorno, param2);
                    break;
                case CONS:
                    jj_consume_token(CONS);
                    param2 = PExpressao();
                    retorno = new ExpCons(retorno, param2);
                    break;
                case CONCAT_LISTA:
                    jj_consume_token(CONCAT_LISTA);
                    param2 = PExpressao();
                    retorno = new ExpConcatLista(retorno, param2);
                    break;
                case SEQ:
                    jj_consume_token(SEQ);
                    param2 = PExpressao();
                    retorno = new ExpSequencia(retorno, param2);
                    break;
                case GT:
                    jj_consume_token(GT);
                    param2 = PExpressao();
                    retorno = new ExpMaiorQue(retorno, param2);
                    break;
                case LT:
                    jj_consume_token(LT);
                    param2 = PExpressao();
                    retorno = new ExpMenorQue(retorno, param2);
                    break;
                case STAR:
                    jj_consume_token(STAR);
                    param2 = PExpressao();
                    retorno = new ExpMult(retorno, param2);
                    break;
                case LPAREN:
                    jj_consume_token(LPAREN);
                    switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case NOT:
                        case LENGTH:
                        case TRUE:
                        case FALSE:
                        case LET:
                        case IF:
                        case FN:
                        case HEAD:
                        case TAIL:
                        case INTEGER_LITERAL:
                        case STRING_LITERAL:
                        case IDENTIFIER:
                        case LPAREN:
                        case LBRACKET:
                        case MINUS:
                            list = PListaExpr();
                            break;
                        default:
                            jj_la1[13] = jj_gen;
                            ;
                    }
                    jj_consume_token(RPAREN);
                    retorno = new Aplicacao((Expressao) retorno, list);
                    break;
                default:
                    jj_la1[14] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
        {
            if (true)
                return retorno;
        }
        throw new Error("Missing return statement in function");
    } finally {
        trace_return("PExpBinaria");
    }
}
