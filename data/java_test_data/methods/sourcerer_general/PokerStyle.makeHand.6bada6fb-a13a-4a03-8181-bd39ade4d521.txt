public PokerHand makeHand(PokerPlayer player, Card[] commCards) {
    Card[] cards = combine(player.getHand(), commCards);
    Arrays.sort(cards);
    PokerCard[] hand = new PokerCard[cards.length];
    // organize hand by matches
    for (int c = 0; c < cards.length; c++) {
        int matches = 0, flushes = 0;
        for (int i = 0; i < cards.length; i++) {
            if (cards[c].getRank() == cards[i].getRank())
                matches++;
            if (cards[c].getSuit() == cards[i].getSuit())
                flushes++;
        }
        hand[c] = new PokerCard(cards[c].getRank(), cards[c].getSuit(), matches, flushes, false);
    }
    Arrays.sort(hand);
    // determine full house (hand completely made up of matches) and pairs
    // OK, this is hacky...
    boolean fullHouse = hand[0].getKinds() == 3;
    int pairs = 0, card = 0;
    while (card < hand.length) {
        int matches = hand[card].getKinds();
        if (matches < 2 && card < HAND_LEN)
            fullHouse = false;
        else {
            // remove extranious matches
            if (card >= HAND_LEN) {
                matches = 1;
                hand[card].setKind(matches);
            } else if (matches == 2)
                pairs++;
        }
        card += matches;
    }
    // determine flushes and straights
    // simple enough
    boolean flush = hand[0].getFlush() >= HAND_LEN;
    // this one is less simple...
    boolean straight = false;
    for (int r = LOW_ACE; r < Card.RANKS.length - HAND_LEN; r++) {
        straight = true;
        for (int i = 0; i < 5; i++) {
            PokerCard straightCard = (PokerCard) findRank(hand, r + i);
            if (straightCard == null) {
                straight = false;
                break;
            } else
                straightCard.setStraight(true);
        }
        if (// re-sort for straight
        straight) // re-sort for straight
        {
            Arrays.sort(hand);
            break;
        } else {
            // clear any mistaken straights
            for (int i = 0; i < hand.length; i++) hand[i].setStraight(false);
        }
    }
    if (flush && straight) {
        // unflag straight if flush doesn't include it
        for (int i = 0; i < HAND_LEN; i++) if (!hand[i].isStraight()) {
            straight = false;
            break;
        }
    }
    PokerHand pokerHand = new PokerHand(player, trimHand(hand));
    // TODO: set eval desc!
    if (// can't be 4 of a kind
    flush && straight)
        // can't be 4 of a kind
        pokerHand.setEval(STRAIGHT_FLUSH);
    else if (hand[0].getKinds() == 4)
        pokerHand.setEval(FOUR_KIND);
    else if (fullHouse)
        pokerHand.setEval(FULL_HOUSE);
    else if (flush)
        pokerHand.setEval(FLUSH);
    else if (straight)
        pokerHand.setEval(STRAIGHT);
    else if (hand[0].getKinds() == 3 && pairs == 0)
        pokerHand.setEval(THREE_KIND);
    else if (// er...
    pairs > 1)
        // er...
        pokerHand.setEval(TWO_PAIR);
    else if (pairs == 1)
        pokerHand.setEval(ONE_PAIR);
    else
        pokerHand.setEval(NO_PAIR);
    return pokerHand;
}
