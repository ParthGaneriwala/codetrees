private static int processH1(int[][] tiles) {
    /* basic manhatten implementation */
    int misplaced = 0;
    for (int i = 0; i < 4; i++) {
        // represents the horizontal
        for (int j = 0; j < 4; j++) {
            // represents the vertical
            if (tiles[i][j] == 1) {
                misplaced += Math.abs(i - 0) + Math.abs(j - 0);
            // test for the absolute difference between the
            // actual placement and correct placement of the tile
            }
            if (tiles[i][j] == 2) {
                misplaced += Math.abs(i - 0) + Math.abs(j - 1);
            }
            if (tiles[i][j] == 3) {
                misplaced += Math.abs(i - 0) + Math.abs(j - 2);
            }
            if (tiles[i][j] == 4) {
                misplaced += Math.abs(i - 0) + Math.abs(j - 3);
            }
            if (tiles[i][j] == 5) {
                misplaced += Math.abs(i - 1) + Math.abs(j - 0);
            }
            if (tiles[i][j] == 6) {
                misplaced += Math.abs(i - 1) + Math.abs(j - 1);
            }
            if (tiles[i][j] == 7) {
                misplaced += Math.abs(i - 1) + Math.abs(j - 2);
            }
            if (tiles[i][j] == 8) {
                misplaced += Math.abs(i - 1) + Math.abs(j - 3);
            }
            if (tiles[i][j] == 9) {
                misplaced += Math.abs(i - 2) + Math.abs(j - 0);
            }
            if (tiles[i][j] == 10) {
                misplaced += Math.abs(i - 2) + Math.abs(j - 1);
            }
            if (tiles[i][j] == 11) {
                misplaced += Math.abs(i - 2) + Math.abs(j - 2);
            }
            if (tiles[i][j] == 12) {
                misplaced += Math.abs(i - 2) + Math.abs(j - 3);
            }
            if (tiles[i][j] == 13) {
                misplaced += Math.abs(i - 3) + Math.abs(j - 0);
            }
            if (tiles[i][j] == 14) {
                misplaced += Math.abs(i - 3) + Math.abs(j - 1);
            }
            if (tiles[i][j] == 15) {
                misplaced += Math.abs(i - 3) + Math.abs(j - 2);
            }
        }
    }
    for (int j = 1; j < 4; j++) {
        // represents the vertical columns
        if (tiles[0][j] == 1 && tiles[0][j - 1] == 2)
            misplaced += 2;
        // we have found a problem, so add 2 to the cost of moving that tile
        if (tiles[0][j] == 2 && tiles[0][j - 1] == 3)
            misplaced += 2;
        if (tiles[0][j] == 3 && tiles[0][j - 1] == 4)
            misplaced += 2;
        if (tiles[1][j] == 5 && tiles[0][j - 1] == 6)
            misplaced += 2;
        if (tiles[1][j] == 6 && tiles[0][j - 1] == 7)
            misplaced += 2;
        if (tiles[1][j] == 7 && tiles[0][j - 1] == 8)
            misplaced += 2;
        if (tiles[2][j] == 9 && tiles[0][j - 1] == 10)
            misplaced += 2;
        if (tiles[2][j] == 10 && tiles[0][j - 1] == 11)
            misplaced += 2;
        if (tiles[2][j] == 11 && tiles[0][j - 1] == 12)
            misplaced += 2;
        if (tiles[1][j] == 13 && tiles[0][j - 1] == 14)
            misplaced += 2;
        if (tiles[1][j] == 14 && tiles[0][j - 1] == 15)
            misplaced += 2;
    }
    return misplaced;
}
