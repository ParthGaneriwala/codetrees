@Override
protected void visitInternal(ForNode node) {
    String varName = node.getLocalVarName();
    String nodeId = node.getId();
    // Get the JS expression text for the init/limit/increment values.
    List<ExprRootNode<ExprNode>> rangeArgs = Lists.newArrayList(node.getRangeArgs());
    String incrementJsExprText = (rangeArgs.size() == 3) ? jsExprTranslator.translateToJsExpr(rangeArgs.remove(2), null, localVarTranslations).getText() : "1";
    String initJsExprText = (rangeArgs.size() == 2) ? jsExprTranslator.translateToJsExpr(rangeArgs.remove(0), null, localVarTranslations).getText() : "0";
    String limitJsExprText = jsExprTranslator.translateToJsExpr(rangeArgs.get(0), null, localVarTranslations).getText();
    // If any of the JS expressions for init/limit/increment isn't an integer, precompute its value.
    String initCode;
    if (INTEGER.matcher(initJsExprText).matches()) {
        initCode = initJsExprText;
    } else {
        initCode = varName + "Init" + nodeId;
        jsCodeBuilder.appendLine("var ", initCode, " = ", initJsExprText, ";");
    }
    String limitCode;
    if (INTEGER.matcher(limitJsExprText).matches()) {
        limitCode = limitJsExprText;
    } else {
        limitCode = varName + "Limit" + nodeId;
        jsCodeBuilder.appendLine("var ", limitCode, " = ", limitJsExprText, ";");
    }
    String incrementCode;
    if (INTEGER.matcher(incrementJsExprText).matches()) {
        incrementCode = incrementJsExprText;
    } else {
        incrementCode = varName + "Increment" + nodeId;
        jsCodeBuilder.appendLine("var ", incrementCode, " = ", incrementJsExprText, ";");
    }
    // The start of the JS 'for' loop.
    String incrementStmt = (incrementCode.equals("1")) ? varName + nodeId + "++" : varName + nodeId + " += " + incrementCode;
    jsCodeBuilder.appendLine("for (var ", varName, nodeId, " = ", initCode, "; ", varName, nodeId, " < ", limitCode, "; ", incrementStmt, ") {");
    jsCodeBuilder.increaseIndent();
    // Add a new localVarTranslations frame and populate it with the translations from this node.
    Map<String, JsExpr> newLocalVarTranslationsFrame = Maps.newHashMap();
    newLocalVarTranslationsFrame.put(varName, new JsExpr(varName + nodeId, Integer.MAX_VALUE));
    localVarTranslations.push(newLocalVarTranslationsFrame);
    // Generate the code for the loop body.
    visitChildren(node);
    // Remove the localVarTranslations frame that we added above.
    localVarTranslations.pop();
    // The end of the JS 'for' loop.
    jsCodeBuilder.decreaseIndent();
    jsCodeBuilder.appendLine("}");
}
