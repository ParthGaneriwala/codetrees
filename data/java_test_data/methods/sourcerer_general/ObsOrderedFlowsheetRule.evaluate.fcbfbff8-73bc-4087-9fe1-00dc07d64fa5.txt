@Override
protected Result evaluate(final LogicContext context, final Integer patientId, final Map<String, Object> parameters) throws LogicException {
    Result result = new Result();
    // remove the value coded first
    Object codedValueObjects = parameters.remove(EvaluableConstants.OBS_VALUE_CODED);
    // get the results
    Result resultResults = searchResults(context, patientId, parameters);
    // get the test ordered
    parameters.put(EvaluableConstants.OBS_CONCEPT, Arrays.asList(EvaluableNameConstants.TESTS_ORDERED));
    parameters.put(EvaluableConstants.OBS_VALUE_CODED, codedValueObjects);
    Result testResults = searchResults(context, patientId, parameters);
    Integer testCounter = 0;
    Integer resultCounter = 0;
    while (resultCounter < resultResults.size() && testCounter < testResults.size()) {
        Date testDate = testResults.get(testCounter).getResultDate();
        Date resultDate = resultResults.get(resultCounter).getResultDate();
        // set the data type to null to enable us pulling the text value and use them as the status of the flow sheet element
        // TODO: need to take the value_text "<40" into consideration
        Result flowsheetResult;
        if (testDate.after(resultDate)) {
            Result currentResult = testResults.get(testCounter++);
            // create a copy of the same result as the order result above
            flowsheetResult = duplicateResult(currentResult);
            flowsheetResult.setValueCoded(null);
            // prepare the status of the result
            StringBuilder statusBuilder = new StringBuilder();
            if (StringUtils.isNotEmpty(flowsheetResult.toString()))
                statusBuilder.append(flowsheetResult.toString()).append(" ");
            statusBuilder.append(Status.STATUS_NO_RESULT.getValue());
            // create a copy of the same result as the test result above
            flowsheetResult.setValueText(statusBuilder.toString());
        } else {
            Result currentResult = resultResults.get(resultCounter++);
            // create a copy of the same result as the order result above
            flowsheetResult = duplicateResult(currentResult);
            if (resultDate.after(DateUtils.addDays(testDate, 1))) {
                // status of the order is no-order
                StringBuilder statusBuilder = new StringBuilder();
                if (StringUtils.isNotEmpty(flowsheetResult.toString()))
                    statusBuilder.append(flowsheetResult.toString()).append(" ");
                statusBuilder.append(Status.STATUS_NO_ORDER.getValue());
                flowsheetResult.setValueText(statusBuilder.toString());
            } else
                testCounter++;
        }
        result.add(flowsheetResult);
    }
    while (resultCounter < resultResults.size()) {
        Result currentResult = resultResults.get(resultCounter++);
        Result flowsheetResult = duplicateResult(currentResult);
        // prepare the status of the result
        StringBuilder statusBuilder = new StringBuilder();
        if (StringUtils.isNotEmpty(flowsheetResult.toString()))
            statusBuilder.append(flowsheetResult.toString()).append(" ");
        statusBuilder.append(Status.STATUS_NO_ORDER.getValue());
        flowsheetResult.setValueText(statusBuilder.toString());
        result.add(flowsheetResult);
    }
    while (testCounter < testResults.size()) {
        Result currentResult = testResults.get(testCounter++);
        // create a copy of the same result as the order result above
        Result flowsheetResult = duplicateResult(currentResult);
        flowsheetResult.setValueCoded(null);
        // prepare the status
        StringBuilder statusBuilder = new StringBuilder();
        if (StringUtils.isNotEmpty(flowsheetResult.toString()))
            statusBuilder.append(flowsheetResult.toString()).append(" ");
        statusBuilder.append(Status.STATUS_NO_RESULT.getValue());
        // create a copy of the same result as the test result above
        flowsheetResult.setValueText(statusBuilder.toString());
        result.add(flowsheetResult);
    }
    result = FlowsheetUtils.slice(result);
    Collections.reverse(result);
    return result;
}
