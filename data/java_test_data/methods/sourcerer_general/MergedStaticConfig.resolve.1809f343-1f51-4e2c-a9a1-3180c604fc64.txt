protected Resolved resolve(GlContext ctx) {
    // process the component models, mapping geometry by material
    ConfigManager cfgmgr = ctx.getConfigManager();
    IdentityHashMap<MaterialConfig, List<TransformedGeometry>> glists = Maps.newIdentityHashMap();
    Map<String, MaterialConfig> mmap = Maps.newHashMap();
    List<TransformedCollision> cmeshes = Lists.newArrayList();
    final Box bounds = new Box();
    int influenceFlags = 0;
    for (ComponentModel cmodel : models) {
        ModelConfig config = cfgmgr.getConfig(ModelConfig.class, cmodel.model);
        ModelConfig.Implementation original = (config == null) ? null : config.getOriginal();
        MeshSet mset = null;
        if (original instanceof StaticConfig) {
            mset = ((StaticConfig) original).meshes;
        } else if (original instanceof StaticSetConfig) {
            StaticSetConfig ssconfig = (StaticSetConfig) original;
            if (ssconfig.model != null && ssconfig.meshes != null) {
                mset = ssconfig.meshes.get(ssconfig.model);
            }
        } else if (original != null) {
            log.warning("Merged model not of static type.", "model", cmodel.model, "class", original.getClass());
        }
        if (mset == null) {
            continue;
        }
        bounds.addLocal(mset.bounds.transform(cmodel.transform));
        if (mset.collision != null) {
            cmeshes.add(new TransformedCollision(mset.collision, cmodel.transform));
        }
        ModelConfig.Imported imported = (ModelConfig.Imported) original;
        for (VisibleMesh mesh : mset.visible) {
            MaterialConfig material = Model.getMaterialConfig(ctx, mesh.texture, mesh.tag, imported.materialMappings, mmap);
            List<TransformedGeometry> glist = glists.get(material);
            if (glist == null) {
                glists.put(material, glist = Lists.newArrayList());
            }
            glist.add(new TransformedGeometry(mesh.geometry, cmodel.transform));
        }
        mmap.clear();
        influenceFlags |= imported.influences.getFlags();
    }
    // merge geometry of the same material
    List<GeometryMaterial> gmats = Lists.newArrayList();
    for (Map.Entry<MaterialConfig, List<TransformedGeometry>> entry : glists.entrySet()) {
        MaterialConfig material = entry.getKey();
        List<TransformedGeometry> glist = entry.getValue();
        while (!glist.isEmpty()) {
            GeometryConfig merged = glist.get(0).geometry.merge(glist);
            if (merged != null) {
                gmats.add(new GeometryMaterial(merged, material));
            } else {
                glist.remove(0);
            }
        }
    }
    // create the combined collision mesh
    final TransformedCollision[] tcollisions = cmeshes.toArray(new TransformedCollision[cmeshes.size()]);
    CollisionMesh collision = new CollisionMesh() {

        @Override
        public Box getBounds() {
            return bounds;
        }

        @Override
        public boolean getIntersection(Ray3D ray, Vector3f result) {
            // check the component meshes (transforming the ray into their space and back out
            // again if we detect a hit)
            Vector3f closest = result;
            for (TransformedCollision tcoll : tcollisions) {
                if (tcoll.bounds.intersects(ray) && tcoll.collision.getIntersection(ray.transform(tcoll.invTransform), result)) {
                    tcoll.transform.transformPointLocal(result);
                    result = FloatMath.updateClosest(ray.getOrigin(), result, closest);
                }
            }
            // if we ever changed the result reference, that means we hit something
            return (result != closest);
        }
    };
    return new Resolved(bounds, collision, gmats.toArray(new GeometryMaterial[gmats.size()]), influenceFlags);
}
