protected AeExtendedMessageContext getExtendedContext(MessageContext aContext) throws AeBusinessProcessException {
    ServiceDesc serviceDesc = aContext.getService().getServiceDescription();
    String plinkLoc = ((AePartnerLinkDef) serviceDesc.getProperty(PARTNER_LINK_ENTRY)).getLocationPath();
    // Grab our deserialized addressing headers
    IAeAddressingHeaders wsa = (IAeAddressingHeaders) aContext.getProperty(AeWsaHeaderHandler.AE_WSA_HEADERS_PROPERTY);
    if (wsa == null) {
        // $NON-NLS-1$
        throw new AeBusinessProcessException(AeMessages.getString("AeBpelHandler.0"));
    }
    // Create the extended message context
    AeExtendedMessageContext context = new AeExtendedMessageContext();
    context.setReceiveHandler(getReceiveHandler());
    context.setWsAddressingHeaders(wsa);
    context.setPartnerLink(plinkLoc);
    context.setPrincipal(aContext.getUsername());
    context.setProcessName(getProcessName(serviceDesc));
    context.setTransportUrl((String) aContext.getProperty(MessageContext.TRANS_URL));
    context.setMappedHeaders((Element) aContext.getProperty(AE_CONTEXT_MAPPED_PROPERTIES));
    context.setEncodingStyle(aContext.getEncodingStyle());
    context.setDurableReplyInfo((IAeDurableReplyInfo) aContext.getProperty(DURABLE_REPLY_PROPERTY));
    context.setSubject((Subject) aContext.getProperty(Subject.class.getName()));
    context.setProperty(MessageContext.class.getName(), aContext);
    context.setProperty(Use.class.getName(), getUse());
    HttpServletRequest requestContext = (HttpServletRequest) aContext.getProperty(HTTPConstants.MC_HTTP_SERVLETREQUEST);
    /*
       * XXX This is the first time I used the Intellij Code Fragment Evaluation window to debug and then live-write code
       * Set the invocation URL for the engine 
       */
    StringBuffer requestURL = requestContext.getRequestURL();
    /*
       * Request URL takes the form:
       * {request-URI}/{context-path}/{servlet-path}/{path-info}
       *
       * So, given something like this:
       * http://localhost:9090/active-bpel/services/InternalPurchaseService
       *
       * request-URI: http://localhost:9090
       * context-path: active-bpel
       * servlet-path: services
       * path-info: InternalPurchaseService
       *
       * Since I'm looking for the URL _without_ the process being invoked I need everything except {path-info}
       * {path-info} should come right after the servlet path so I strip it out
       *
       * FIXME I should do something smarter if I don't have path info; for example, there still was an invocation URL...
       */
    int pathIndex = requestURL.indexOf(requestContext.getPathInfo());
    if (pathIndex != 0) {
        // Returns the path without a trailing slash at the end
        String baseURL = requestURL.substring(0, pathIndex);
        context.setProperty(IAagABAxisConstants.AAG_ENGINE_INVOCATION_URL, baseURL);
        // I don't use the AeException info looger because it gives AeException as the classname
        log.info("set invocation base URL to " + baseURL);
    } else {
        AeException.logError(null, "cannot set invocation URL");
    }
    return context;
}
