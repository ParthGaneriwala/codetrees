public static LinkedHashMap<String, String> chunkContent(String content, boolean editMode) {
    // Reduce the content into formatted and unformatted chunks...
    LinkedHashMap<String, String> chunks = new LinkedHashMap<String, String>();
    int preIndex = -1;
    int codeIndex = -1;
    int chunkCount = 0;
    while ((preIndex = content.indexOf("<pre>")) > -1 || (codeIndex = content.indexOf("<code")) > -1) {
        int blockStart = -1;
        int startIndex = -1;
        int endIndex = -1;
        int blockEnd = -1;
        String type = CONTENT_PREFORMATTED;
        if (preIndex > -1 && codeIndex > -1) {
            if (preIndex < codeIndex) {
                blockStart = preIndex;
                startIndex = preIndex + 5;
                endIndex = content.indexOf("</pre>", startIndex);
                blockEnd = endIndex + 6;
                type = CONTENT_PRE;
            } else {
                blockStart = codeIndex;
                startIndex = codeIndex + 6;
                endIndex = content.indexOf("</code>", startIndex);
                blockEnd = endIndex + 7;
                type = CONTENT_CODE;
            }
        } else if (preIndex > -1) {
            blockStart = preIndex;
            startIndex = preIndex + 5;
            endIndex = content.indexOf("</pre>", startIndex);
            blockEnd = endIndex + 6;
            type = CONTENT_PRE;
        } else {
            blockStart = codeIndex;
            startIndex = codeIndex + 6;
            endIndex = content.indexOf("</code>", startIndex);
            blockEnd = endIndex + 7;
            type = CONTENT_CODE;
        }
        // Store non-preformatted chunks in a map for further processing
        if (blockStart > 0) {
            chunks.put(++chunkCount + CONTENT_NEEDS_FORMATTING, content.substring(0, blockStart));
        }
        // Process pre-formatted text here...
        String preText = content.substring(startIndex, endIndex);
        while (preText.startsWith(CRLF)) {
            preText = preText.substring(1);
        }
        while (preText.endsWith(CRLF)) {
            preText = preText.substring(0, preText.length() - 1);
        }
        String text = StringUtils.toHtmlValue(preText, false, false);
        text = processMarkupCharacters(text);
        if (editMode) {
            text = StringUtils.toBasicHtmlChars(text);
        }
        chunks.put(++chunkCount + type, text);
        if (blockEnd < content.length()) {
            content = content.substring(blockEnd);
        } else {
            content = "";
        }
    }
    // Store the rest of the content
    if (content.length() > 0) {
        chunks.put(++chunkCount + CONTENT_NEEDS_FORMATTING, content);
    }
    return chunks;
}
