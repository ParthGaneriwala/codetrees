// $ANTLR start "or_expression"
public final MyGrammarParser.or_expression_return or_expression() throws RecognitionException {
    MyGrammarParser.or_expression_return retval = new MyGrammarParser.or_expression_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token AND167 = null;
    MyGrammarParser.and_expression_return and_expression166 = null;
    MyGrammarParser.and_expression_return and_expression168 = null;
    CommonTree AND167_tree = null;
    RewriteRuleTokenStream stream_AND = new RewriteRuleTokenStream(adaptor, "token AND");
    RewriteRuleSubtreeStream stream_and_expression = new RewriteRuleSubtreeStream(adaptor, "rule and_expression");
    try {
        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:270:14: ( and_expression ( AND and_expression )? -> ^( OR_EXPRESSION and_expression ( and_expression )? ) )
        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:270:16: and_expression ( AND and_expression )?
        {
            pushFollow(FOLLOW_and_expression_in_or_expression2253);
            and_expression166 = and_expression();
            state._fsp--;
            stream_and_expression.add(and_expression166.getTree());
            // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:270:31: ( AND and_expression )?
            int alt29 = 2;
            int LA29_0 = input.LA(1);
            if ((LA29_0 == AND)) {
                alt29 = 1;
            }
            switch(alt29) {
                case 1:
                    // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:270:32: AND and_expression
                    {
                        AND167 = (Token) match(input, AND, FOLLOW_AND_in_or_expression2256);
                        stream_AND.add(AND167);
                        pushFollow(FOLLOW_and_expression_in_or_expression2258);
                        and_expression168 = and_expression();
                        state._fsp--;
                        stream_and_expression.add(and_expression168.getTree());
                    }
                    break;
            }
            // AST REWRITE
            // elements: and_expression, and_expression
            // token labels:
            // rule labels: retval
            // token list labels:
            // rule list labels:
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", retval != null ? retval.tree : null);
            root_0 = (CommonTree) adaptor.nil();
            // 270:53: -> ^( OR_EXPRESSION and_expression ( and_expression )? )
            {
                // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:270:56: ^( OR_EXPRESSION and_expression ( and_expression )? )
                {
                    CommonTree root_1 = (CommonTree) adaptor.nil();
                    root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(OR_EXPRESSION, "OR_EXPRESSION"), root_1);
                    adaptor.addChild(root_1, stream_and_expression.nextTree());
                    // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:270:87: ( and_expression )?
                    if (stream_and_expression.hasNext()) {
                        adaptor.addChild(root_1, stream_and_expression.nextTree());
                    }
                    stream_and_expression.reset();
                    adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
