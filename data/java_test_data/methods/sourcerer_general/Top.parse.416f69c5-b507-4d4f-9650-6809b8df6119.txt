@Override
protected void parse(String recordEntry, OutputCollector<Text, ChukwaRecord> output, Reporter reporter) {
    log.info("Top record: [" + recordEntry + "] type[" + chunk.getDataType() + "]");
    StringBuilder sb = new StringBuilder();
    String logLevel = null;
    String className = null;
    String body = null;
    matcher = p.matcher(recordEntry);
    while (matcher.find()) {
        log.info("Top Processor Matches");
        try {
            Date d = sdf.parse(matcher.group(1).trim());
            logLevel = matcher.group(2);
            className = matcher.group(3);
            // TODO create a more specific key structure
            // part of ChukwaArchiveKey + record index if needed
            key.set("" + d.getTime());
            String[] lines = recordEntry.split("\n");
            int i = 0;
            String summaryString = "";
            while (!lines[i].equals("")) {
                summaryString = summaryString + lines[i] + "\n";
                i++;
            }
            i++;
            String[] headers = lines[i].split("\\s+");
            HashMap<String, String> summary = parseSummary(summaryString);
            DatabaseHelper databaseRecord = new DatabaseHelper("system");
            Iterator<String> ki = summary.keySet().iterator();
            while (ki.hasNext()) {
                String key = ki.next();
                databaseRecord.add(d.getTime(), key, summary.get(key));
            }
            output.collect(key, databaseRecord.buildChukwaRecord());
            while (i < lines.length) {
                databaseRecord = null;
                String[] data = lines[i].split("\\s+", headers.length);
                if (lines[i].indexOf("PID USER") < 0) {
                    databaseRecord = new DatabaseHelper("system");
                }
                if (databaseRecord != null) {
                    int j = 0;
                    log.debug("Data Length: " + data.length);
                    while (j < data.length - 1) {
                        if (headers[0].equals("")) {
                            log.debug("header:" + headers[j + 1] + " data:" + data[j + 1]);
                            databaseRecord.add(d.getTime(), headers[j + 1], data[j + 1]);
                        } else {
                            log.debug("header:" + headers[j + 1] + " data:" + data[j]);
                            databaseRecord.add(d.getTime(), headers[j + 1], data[j]);
                        }
                        j++;
                    }
                    // Output Sar info to database
                    output.collect(key, databaseRecord.buildChukwaRecord());
                }
                i++;
            }
        // End of parsing
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
