public void run() {
    Image image = ImageCache.getImage("book_48.png");
    ;
    String[] titles = new String[3];
    String toGet = "name";
    titles[0] = "";
    titles[2] = "";
    boolean cast = false;
    List<NamedEntity> list = null;
    String message = "";
    String title = "";
    switch(type) {
        case PERSON_AKAS:
            {
                image = ImageCache.getImage("book_48.png");
                title = "AKA Names For The Person";
                titles[1] = "Name";
                toGet = "name";
                break;
            }
        case PERSON_ROLES:
            {
                image = ImageCache.getImage("spanner_48.png");
                title = "The Roles Of This Person";
                titles[2] = "Movie Name";
                titles[1] = "Role";
                toGet = "type";
                list = rolesList;
                message = "No roles for this person. Adding roles is done by choosing movie's cast.";
                cast = true;
                break;
            }
        case PERSON_QUOTES:
            {
                image = ImageCache.getImage("speech_bubble_48.png");
                title = "Famous Quotes Of The Person";
                titles[1] = "Quote";
                toGet = "name";
                break;
            }
    }
    if ((personButtons != null) && !(personButtons.isDisposed())) {
        personButtons.dispose();
    }
    Color frontColor = new Color(display, 222, 235, 247);
    personButtons = new Composite(bar, SWT.FILL);
    personButtons.setBackground(frontColor);
    if (result.size() > 0) {
        if ((otherResults != null) && !(otherResults.isDisposed()))
            otherResults.dispose();
        final Table table = new Table(personButtons, SWT.MULTI | SWT.BORDER | SWT.FULL_SELECTION);
        table.setLinesVisible(true);
        table.setHeaderVisible(true);
        GridData data = new GridData(SWT.FILL, SWT.FILL, true, true);
        data.heightHint = 150;
        table.setLayoutData(data);
        for (int i = 0; i < titles.length; i++) {
            TableColumn column = new TableColumn(table, SWT.NONE);
            column.setText(titles[i]);
        }
        final int count = result.size();
        Map<String, String> map = null;
        for (int i = 0; i < count; i++) {
            if (result.get(i) != null) {
                map = result.get(i).toStringMap();
                TableItem item = new TableItem(table, SWT.NONE);
                item.setText(0, String.valueOf(i + 1));
                if (list != null) {
                    if (getName(list, map.get(toGet)) != null)
                        item.setText(1, getName(list, map.get(toGet)));
                } else
                    item.setText(1, map.get(toGet));
                if (titles[2] != "") {
                    if (map.get("name") != null)
                        item.setText(2, map.get("name"));
                }
            }
        }
        for (int i = 0; i < titles.length; i++) {
            table.getColumn(i).pack();
        }
        if (!cast) {
            table.getColumn(2).setWidth(0);
            table.getColumn(2).setResizable(false);
        }
        GridLayout layout = new GridLayout(2, false);
        layout.marginLeft = layout.marginTop = layout.marginRight = layout.marginBottom = 5;
        layout.verticalSpacing = 10;
        personButtons.setLayout(layout);
        if (!cast) {
            Label label = new Label(personButtons, SWT.NONE);
            Button add = new Button(personButtons, SWT.PUSH);
            add.setText("Add");
            add.setEnabled(isAdmin);
            add.setBackground(frontColor);
            add.addSelectionListener(new SelectionListener() {

                public void widgetDefaultSelected(SelectionEvent e) {
                }

                public void widgetSelected(SelectionEvent e) {
                    openPersonAddWindow(type, personId);
                }
            });
            Button delete = new Button(personButtons, SWT.PUSH);
            delete.setText("Delete");
            delete.setBackground(frontColor);
            delete.setEnabled(isAdmin);
            delete.addSelectionListener(new SelectionListener() {

                public void widgetDefaultSelected(SelectionEvent e) {
                }

                public void widgetSelected(SelectionEvent e) {
                    int[] t = table.getSelectionIndices();
                    if (t.length == 0)
                        okMessageBox("Please select a row to delete.");
                    else {
                        for (int i = 0; i < t.length; i++) {
                            AbsType del = new NamedEntity(personId, table.getItem(t[i]).getText(1));
                            try {
                                pool.execute(DataManager.deletePersonEntity(type, del, personId));
                            } catch (InterruptedException ev) {
                                ev.printStackTrace();
                            }
                        }
                    }
                }
            });
        }
        otherResults = new ExpandItem(bar, SWT.NONE, 1);
        otherResults.setText(title);
        otherResults.setHeight(personButtons.computeSize(SWT.DEFAULT, SWT.DEFAULT).y);
        otherResults.setControl(personButtons);
        otherResults.setImage(image);
        otherResults.setExpanded(true);
        entityDetails.setSize(shell.getShell().getSize().x - 5, shell.getShell().getSize().y - 150);
    } else {
        if (cast)
            okMessageBox(message);
        else {
            GridLayout layout = new GridLayout(1, false);
            layout.marginLeft = layout.marginTop = layout.marginRight = layout.marginBottom = 5;
            layout.verticalSpacing = 10;
            personButtons.setLayout(layout);
            Button add = new Button(personButtons, SWT.PUSH);
            add.setText("Add");
            add.setEnabled(isAdmin);
            add.addSelectionListener(new SelectionListener() {

                public void widgetDefaultSelected(SelectionEvent e) {
                }

                public void widgetSelected(SelectionEvent e) {
                    openPersonAddWindow(type, personId);
                }
            });
            if ((otherResults != null) && !(otherResults.isDisposed()))
                otherResults.dispose();
            otherResults = new ExpandItem(bar, SWT.NONE, 1);
            otherResults.setText(title);
            otherResults.setHeight(personButtons.computeSize(SWT.DEFAULT, SWT.DEFAULT).y);
            otherResults.setControl(personButtons);
            otherResults.setImage(image);
            otherResults.setExpanded(true);
            entityDetails.setSize(shell.getShell().getSize().x - 5, shell.getShell().getSize().y - 150);
        }
    }
}
