public void createImage() {
    double[] xAxis = new double[swarmSize];
    double[] yAxis = new double[swarmSize];
    boolean foundIterationStart = false;
    String line;
    int iterationNumber;
    try {
        // Searches for the beggining of the iteration
        while (!foundIterationStart) {
            line = chartReader.readLine();
            if (line.startsWith("Iteration")) {
                iterationNumber = Integer.parseInt(line.split(" ")[1].trim());
                foundIterationStart = (iterationNumber == iteration);
            }
        }
        // Once the beggining of the iteration was found, reads the particle's position
        line = chartReader.readLine();
        int i = 0;
        while (!line.startsWith("Iteration") && !line.startsWith("\n") && !line.equals("")) {
            xAxis[i] = Double.parseDouble(line.split(" ")[0].trim());
            yAxis[i] = Double.parseDouble(line.split(" ")[1].trim());
            i++;
            line = chartReader.readLine();
        }
    } catch (IOException e) {
        e.printStackTrace();
    }
    double[] dataX = new double[31];
    double[] dataY = new double[31];
    for (int i = 0; i < 31; i++) {
        dataX[i] = i;
        dataY[i] = i;
    }
    SwarmObserverPSO swarmObserver = new SwarmObserverPSO(swarmSize, problem, null);
    swarmObserver.setDataX(xAxis);
    swarmObserver.setDataY(yAxis);
    ChartView chart = new ChartView(null, swarmObserver, dataX, dataY);
    Image image = chart.createChartImage(swarmObserver);
    // Creates a BufferdImage from the Image
    BufferedImage bufferedImage = new BufferedImage(image.getWidth(null), image.getHeight(null), BufferedImage.TYPE_INT_RGB);
    Graphics2D g2 = bufferedImage.createGraphics();
    g2.drawImage(image, null, null);
    g2.dispose();
    // Prints the image to a file
    try {
        ImageIO.write(bufferedImage, "PNG", new File(simulationFilePath, chartFileName + ".png"));
        chartReader.close();
    } catch (IOException e) {
        e.printStackTrace();
    }
}
