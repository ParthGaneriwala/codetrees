protected boolean allocatePesForVm(String vmUid, List<Double> mipsShareRequested) {
    getMipsMapRequested().put(vmUid, mipsShareRequested);
    setPesInUse(getPesInUse() + mipsShareRequested.size());
    double totalRequestedMips = 0;
    double peMips = getPeCapacity();
    for (Double mips : mipsShareRequested) {
        if (mips > peMips) {
            // each virtual PE of a VM must require not more than the capacity of a physical PE
            return false;
        }
        totalRequestedMips += mips;
    }
    if (getVmsMigratingIn().contains(vmUid)) {
        // performance cost incurred by the destination host = 10% MIPS
        totalRequestedMips *= 0.1;
    }
    List<Double> mipsShareAllocated = new ArrayList<Double>();
    for (Double mipsRequested : mipsShareRequested) {
        if (getVmsMigratingOut().contains(vmUid)) {
            // performance degradation due to migration = 10% MIPS
            mipsRequested *= 0.9;
        } else if (getVmsMigratingIn().contains(vmUid)) {
            // performance cost incurred by the destination host = 10% MIPS
            mipsRequested *= 0.1;
        }
        mipsShareAllocated.add(mipsRequested);
    }
    if (getAvailableMips() >= totalRequestedMips) {
        getMipsMap().put(vmUid, mipsShareAllocated);
        setAvailableMips(getAvailableMips() - totalRequestedMips);
    } else {
        int pesSkipped = 0;
        for (List<Double> mipsMap : getMipsMap().values()) {
            for (int i = 0; i < mipsMap.size(); i++) {
                if (mipsMap.get(i) == 0) {
                    pesSkipped++;
                    continue;
                }
            }
        }
        double shortage = (totalRequestedMips - getAvailableMips()) / (getPesInUse() - pesSkipped);
        getMipsMap().put(vmUid, mipsShareAllocated);
        setAvailableMips(0);
        double additionalShortage = 0;
        do {
            additionalShortage = 0;
            for (Entry<String, List<Double>> entry : getMipsMap().entrySet()) {
                if (getVmsMigratingIn().contains(entry.getKey())) {
                    continue;
                }
                List<Double> mipsMap = entry.getValue();
                for (int i = 0; i < mipsMap.size(); i++) {
                    if (mipsMap.get(i) == 0) {
                        continue;
                    }
                    if (mipsMap.get(i) >= shortage) {
                        mipsMap.set(i, mipsMap.get(i) - shortage);
                    } else {
                        additionalShortage += shortage - mipsMap.get(i);
                        mipsMap.set(i, 0.0);
                    }
                    if (mipsMap.get(i) == 0) {
                        pesSkipped++;
                    }
                }
            }
            shortage = additionalShortage / (getPesInUse() - pesSkipped);
        } while (additionalShortage > 0);
    }
    return true;
}
