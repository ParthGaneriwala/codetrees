static void testPerformance(String url, String user, String password, int max, boolean persistent) throws Exception {
    if (persistent) {
        deleteDatabase("test2");
    }
    Statement sStatement = null;
    Connection cConnection = null;
    ResultSet r;
    String s = "";
    long start;
    boolean bDropError = false;
    String name = persistent ? "Persistent" : "Memory";
    print(name + " Performance");
    try {
        cConnection = DriverManager.getConnection(url, user, password);
        sStatement = cConnection.createStatement();
    } catch (Exception e) {
        e.printStackTrace();
        print("TestSelf init error: " + e.getMessage());
    }
    try {
        // cache, index and performance tests
        s = "CREATE CACHED TABLE Addr(ID INT PRIMARY KEY,First CHAR," + "Name CHAR,ZIP INT)";
        sStatement.execute(s);
        s = "CREATE INDEX iName ON Addr(Name)";
        sStatement.execute(s);
        s = "SET WRITE_DELAY TRUE";
        sStatement.execute(s);
        start = System.currentTimeMillis();
        for (int i = 0; i < max; i++) {
            s = "INSERT INTO Addr VALUES(" + i + ",'Marcel" + i + "'," + "'Renggli" + (max - i - (i % 31)) + "'," + (3000 + i % 100) + ")";
            if (sStatement.executeUpdate(s) != 1) {
                throw new Exception("Insert failed");
            }
            if (i % 100 == 0) {
                printStatus("insert   ", i, max, start);
            }
        }
        printStatus("insert   ", max, max, start);
        print("");
        s = "SELECT COUNT(*) FROM Addr";
        r = sStatement.executeQuery(s);
        r.next();
        int c = r.getInt(1);
        if (c != max) {
            throw new Exception("Count should be " + (max) + " but is " + c);
        }
        if (persistent) {
            // close & reopen to test backup
            cConnection.close();
            cConnection = DriverManager.getConnection(url, user, password);
            sStatement = cConnection.createStatement();
        }
        start = System.currentTimeMillis();
        for (int i = 0; i < max; i++) {
            s = "UPDATE Addr SET Name='Robert" + (i + (i % 31)) + "' WHERE ID=" + i;
            if (sStatement.executeUpdate(s) != 1) {
                throw new Exception("Update failed");
            }
            if (i % 100 == 0) {
                printStatus("updated  ", i, max, start);
            // s="SELECT COUNT(*) FROM Addr";
            // r=sStatement.executeQuery(s);
            // r.next();
            // int c=r.getInt(1);
            // if(c!=max) {
            // throw new Exception("Count should be "+max+" but is "+c);
            // }
            }
        }
        printStatus("update   ", max, max, start);
        print("");
        if (persistent) {
            s = "SHUTDOWN IMMEDIATELY";
            sStatement.execute(s);
            // open the database; it must be restored after shutdown
            cConnection.close();
            cConnection = DriverManager.getConnection(url, user, password);
            sStatement = cConnection.createStatement();
        }
        start = System.currentTimeMillis();
        for (int i = 0; i < max; i++) {
            s = "DELETE FROM Addr WHERE ID=" + (max - 1 - i);
            if (sStatement.executeUpdate(s) != 1) {
                throw new Exception("Delete failed");
            }
            if (i % 100 == 0) {
                printStatus("deleting ", i, max, start);
            // s="SELECT COUNT(*) FROM Addr";
            // r=sStatement.executeQuery(s);
            // r.next();
            // int c=r.getInt(1);
            // if(c!=max-i-1) {
            // throw new Exception("Count should be "+(max-i-1)+" but is "+c);
            // }
            }
        }
        printStatus("delete   ", max, max, start);
        print("");
        sStatement.execute("DROP TABLE Addr");
    } catch (Exception e) {
        print("");
        print("TestSelf error: " + e);
        print("with SQL command: " + s);
        e.printStackTrace();
    }
    cConnection.close();
    print("Test finished");
}
