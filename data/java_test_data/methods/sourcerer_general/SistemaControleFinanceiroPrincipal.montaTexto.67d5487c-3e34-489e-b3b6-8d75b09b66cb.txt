private String montaTexto() {
    int tipoLancamento = verificaTipoLancamentoRelGR();
    char tipoData = verificaTipoData();
    ObjectSet os = null;
    GastosReceitas auxGR = new GastosReceitas();
    GastoReceitasDataComparator grDataComp = new GastoReceitasDataComparator(tipoData);
    double debito = 0.0, credito = 0.0;
    switch(tipoLancamento) {
        case 0:
            getTbxRelatorio().setTitle("Relatório de Gastos e Receitas");
            getFrmVisRelGR().setTitle("Relatório de Gastos e Receitas");
            getTbRelGR().setTitle("Tabela de Gastos e Receitas");
            switch(tipoData) {
                case 'E':
                    os = fu.findFilterAndComparator(auxGR, new GastoReceitasFilter(gUsuario, null, ' '), grDataComp);
                    break;
                case 'V':
                    os = fu.findFilterAndComparator(auxGR, new GastoReceitasFilter(gUsuario, null, ' '), grDataComp);
                    break;
                case 'P':
                    os = fu.findFilterAndComparator(auxGR, new GastoReceitasFilter(gUsuario, null, ' '), grDataComp);
                    break;
            }
            break;
        case 1:
            getTbxRelatorio().setTitle("Relatório de Gastos");
            getFrmVisRelGR().setTitle("Relatório de Gastos");
            getTbRelGR().setTitle("Tabela de Gastos");
            switch(tipoData) {
                case 'E':
                    os = fu.findFilterAndComparator(auxGR, new GastoReceitasFilter(gUsuario, "D", 'T'), grDataComp);
                    break;
                case 'V':
                    os = fu.findFilterAndComparator(auxGR, new GastoReceitasFilter(gUsuario, "D", 'T'), grDataComp);
                    break;
                case 'P':
                    os = fu.findFilterAndComparator(auxGR, new GastoReceitasFilter(gUsuario, "D", 'T'), grDataComp);
                    break;
            }
            break;
        case 2:
            getTbxRelatorio().setTitle("Relatório de Receitas");
            getFrmVisRelGR().setTitle("Relatório de Receitas");
            getTbRelGR().setTitle("Tabela de Receitas");
            switch(tipoData) {
                case 'E':
                    os = fu.findFilterAndComparator(auxGR, new GastoReceitasFilter(gUsuario, "C", 'T'), grDataComp);
                    break;
                case 'V':
                    os = fu.findFilterAndComparator(auxGR, new GastoReceitasFilter(gUsuario, "C", 'T'), grDataComp);
                    break;
                case 'P':
                    os = fu.findFilterAndComparator(auxGR, new GastoReceitasFilter(gUsuario, "C", 'T'), grDataComp);
                    break;
            }
            break;
    }
    StringBuffer sb = new StringBuffer();
    sb.setLength(getTbxRelatorio().getMaxSize());
    sb.append("DATA | NOME | VALOR\n");
    tableModel = new SimpleTableModel(os.size() + 2, 3);
    getTableModel().setColumnNames(new String[] { "DATA", "NOME", "VALOR" });
    for (int i = 0; i < os.size(); i++) {
        try {
            auxGR = (GastosReceitas) os.get(i);
        } catch (FloggyException ex) {
            ex.printStackTrace();
        }
        switch(tipoData) {
            case 'E':
                if ((auxGR.getDataEmissao().getTime() >= getDfDeRelGR().getDate().getTime()) && (auxGR.getDataEmissao().getTime() <= getDfAteRelGR().getDate().getTime())) {
                    sb.append(Calendario.retornaDataDDMMAAAA(auxGR.getDataEmissao())).append(" | ").append(auxGR.getNome()).append(" | ");
                    getTableModel().setValue(0, i, Calendario.retornaDataDDMMAAAA(auxGR.getDataEmissao()));
                    getTableModel().setValue(1, i, auxGR.getNome());
                    if (auxGR.getTipoGR().getDebitoCredito() == 'D') {
                        sb.append(String.valueOf(auxGR.getValor() * -1)).append(" \n");
                        getTableModel().setValue(2, i, String.valueOf(auxGR.getValor() * -1));
                        debito += auxGR.getValor();
                    } else {
                        sb.append(String.valueOf(auxGR.getValor())).append(" \n");
                        getTableModel().setValue(2, i, String.valueOf(auxGR.getValor()));
                        credito += auxGR.getValor();
                    }
                    break;
                }
            case 'V':
                if ((auxGR.getDataVencimento().getTime() >= getDfDeRelGR().getDate().getTime()) && (auxGR.getDataVencimento().getTime() <= getDfAteRelGR().getDate().getTime())) {
                    sb.append(Calendario.retornaDataDDMMAAAA(auxGR.getDataVencimento())).append(" | ").append(auxGR.getNome()).append(" | ");
                    getTableModel().setValue(0, i, Calendario.retornaDataDDMMAAAA(auxGR.getDataVencimento()));
                    getTableModel().setValue(1, i, auxGR.getNome());
                    if (auxGR.getTipoGR().getDebitoCredito() == 'D') {
                        sb.append(String.valueOf(auxGR.getValor() * -1)).append(" \n");
                        getTableModel().setValue(2, i, String.valueOf(auxGR.getValor() * -1));
                        debito += auxGR.getValor();
                    } else {
                        sb.append(String.valueOf(auxGR.getValor())).append(" \n");
                        getTableModel().setValue(2, i, String.valueOf(auxGR.getValor()));
                        credito += auxGR.getValor();
                    }
                    break;
                }
            case 'P':
                if ((auxGR.getDataPagamento().getTime() >= getDfDeRelGR().getDate().getTime()) && (auxGR.getDataPagamento().getTime() <= getDfAteRelGR().getDate().getTime())) {
                    sb.append(Calendario.retornaDataDDMMAAAA(auxGR.getDataPagamento())).append(" | ").append(auxGR.getNome()).append(" | ");
                    getTableModel().setValue(0, i, Calendario.retornaDataDDMMAAAA(auxGR.getDataPagamento()));
                    getTableModel().setValue(1, i, auxGR.getNome());
                    if (auxGR.getTipoGR().getDebitoCredito() == 'D') {
                        sb.append(String.valueOf(auxGR.getValor() * -1)).append(" \n");
                        getTableModel().setValue(2, i, String.valueOf(auxGR.getValor() * -1));
                        debito += auxGR.getValor();
                    } else {
                        sb.append(String.valueOf(auxGR.getValor())).append(" \n");
                        getTableModel().setValue(2, i, String.valueOf(auxGR.getValor()));
                        credito += auxGR.getValor();
                    }
                    break;
                }
        }
    }
    sb.append("\n");
    getTableModel().setValue(0, os.size() + 1, "Totais");
    switch(tipoLancamento) {
        case 0:
            sb.append("Débito: ").append(debito).append(" | Crédito: ").append(credito);
            getTableModel().setValue(1, os.size() + 1, "Débito: " + String.valueOf(debito));
            getTableModel().setValue(2, os.size() + 1, "Crédito: " + String.valueOf(credito));
            break;
        case 1:
            sb.append("Débito: ").append(debito);
            getTableModel().setValue(2, os.size() + 1, "Débito: " + String.valueOf(debito));
            break;
        case 2:
            sb.append("Crédito: ").append(credito);
            getTableModel().setValue(2, os.size() + 1, "Crédito: " + String.valueOf(credito));
            break;
    }
    return sb.toString().trim();
}
