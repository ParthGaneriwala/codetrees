/*
	 * (non-Javadoc)
	 * return all nodes which reify the triple as a statement. no
	 * need to do distinct here since we only return nodes for reified statments.
	 */
public ExtendedIterator findReifStmtURIByTriple(Triple t, IDBID my_GID) {
    String stmtStr = null;
    int argc = 1;
    PreparedStatement ps = null;
    ResultSetIterator result = new ResultSetNodeIterator();
    boolean notFound = false;
    stmtStr = "selectReifNode";
    stmtStr += (t == null) ? "T" : "SPOT";
    try {
        ps = m_sql.getPreparedSQLStatement(stmtStr, getTblName());
        ps.clearParameters();
        if (t != null) {
            String argStr;
            argStr = m_driver.nodeToRDBString(t.getSubject(), false);
            if (argStr == null)
                notFound = true;
            else
                ps.setString(argc++, argStr);
            argStr = m_driver.nodeToRDBString(t.getPredicate(), false);
            if (argStr == null)
                notFound = true;
            else
                ps.setString(argc++, argStr);
            argStr = m_driver.nodeToRDBString(t.getObject(), false);
            if (argStr == null)
                notFound = true;
            else
                ps.setString(argc++, argStr);
        }
        ps.setString(argc, my_GID.getID().toString());
    } catch (Exception e) {
        notFound = true;
        logger.warn("Getting prepared statement for " + stmtStr + " Caught exception ", e);
        // Rethrow in case there is a recovery option
        throw new JenaException("Exception during database access", e);
    }
    // find on object field
    if (notFound)
        result.close();
    else {
        try {
            m_sql.executeSQL(ps, stmtStr, result);
        } catch (Exception e) {
            logger.debug("find encountered exception ", e);
            // Rethrow in case there is a recovery option
            throw new JenaException("Exception during database access", e);
        }
    }
    return result.mapWith(new MapResultSetToNode());
}
