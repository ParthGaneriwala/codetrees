public void run() {
    String line = null;
    try {
        // when the socket receives something:
        while (((line = in.readLine()) != null) && !socket.isClosed()) {
            // Remove white space at beginning and end of user entry:
            line = line.trim();
            // wait for next input
            if (line.equals(""))
                continue;
            // If the user issued a keyword command, it is the first word:
            String command = line.split(" ")[0].toUpperCase();
            // check for keyword matches:
            if (line.toUpperCase().equals(command)) {
                // If the user requested the help file:
                if ((command.equals("?")) || (command.equals("HELP"))) {
                    this.sendHelp();
                    continue;
                }
                // If the user has requested the buddy list:
                if ((command.equals("-GET")) || (command.equals("-WHO"))) {
                    updateUsers(cm.getBuddyList());
                    Object[] buddies = cm.getBuddyList();
                    int i = 0;
                    this.sendInfo("Users currently connected:");
                    while (i < buddies.length) {
                        String buddylist = (String) buddies[i] + " ";
                        i++;
                        // only put four users per line:
                        while ((i % 4 != 0) && (i < buddies.length)) {
                            buddylist = buddylist.concat(((String) buddies[i]) + " ");
                            i++;
                        }
                        // send a line of users:
                        this.sendInfo(buddylist);
                    }
                    // // inform server that user requested the buddy list:
                    System.out.println(username + " requested the buddy list.");
                    line = null;
                    continue;
                }
                if (command.equals("-HIST")) {
                    sendHistory();
                    continue;
                }
                // If the user has requested to leave the server:
                if ((command.equals("-EXT") || (command.equals("-QUIT"))) || (command.equals("-EXIT"))) {
                    this.disconnect();
                    line = null;
                    break;
                }
                // If the user is silenced, ignore his single word:
                if (isSilenced == true) {
                    sendInfo("You can't use the main channel when silenced. Use private messages.");
                    continue;
                }
                if (username.equals(AdminClient.ADMIN) && (command.equals("SIMPSONS"))) {
                    cm.broadcastMessage(username, ".              ,---.    ");
                    cm.broadcastMessage(username, ".            ,.'-.   \\   ");
                    cm.broadcastMessage(username, ".           ( ( ,'\"\"\"\"\"-.   ");
                    cm.broadcastMessage(username, ".           `,X          `.   ");
                    cm.broadcastMessage(username, ".           /` `           `._   ");
                    cm.broadcastMessage(username, ".          (            ,   ,_\\   ");
                    cm.broadcastMessage(username, ".          |          ,---.,'o `.   ");
                    cm.broadcastMessage(username, ".          |         / o   \\     )   ");
                    cm.broadcastMessage(username, ".           \\ ,.    (      .____,   ");
                    cm.broadcastMessage(username, ".            \\| \\    \\____,'     \\   ");
                    cm.broadcastMessage(username, ".          '`'\\  \\        _,____,'   ");
                    cm.broadcastMessage(username, ".          \\  ,--      ,-'     \\   ");
                    cm.broadcastMessage(username, ".            ( C     ,'         \\   ");
                    cm.broadcastMessage(username, ".             `--'  .'           |   ");
                    cm.broadcastMessage(username, ".               |   |         .O |   ");
                    cm.broadcastMessage(username, ".             __|    \\        ,-'_   ");
                    cm.broadcastMessage(username, ".            / `L     `._  _,'  ' `.   ");
                    cm.broadcastMessage(username, ".           /    `--.._  `',.   _\\  `   ");
                    cm.broadcastMessage(username, ".           `-.       /\\  | `. ( ,\\  \\   ");
                    cm.broadcastMessage(username, ".          _/  `-._  /  \\ |--'  (     \\   ");
                    cm.broadcastMessage(username, ".         '  `-.   `'    \\/\\`.   `.    )   ");
                    cm.broadcastMessage(username, ".               \\  -hrr-    \\ `.  |    |  ");
                    continue;
                }
                // Check if single-word command is an emote keyword:
                if (checkEmotes(command))
                    continue;
                // keyword, broadcast it:
                if (!line.equals("null")) {
                    cm.broadcastMessage(username, line);
                }
                continue;
            }
            // If command is INF, send info message to client:
            if (command.equals("INF")) {
                sendInfo(line.substring(3));
                line = null;
                continue;
            }
            // If command is ERR, send error message to client:
            if (command.equals("ERR")) {
                sendError(line.substring(3));
                line = null;
                continue;
            }
            // If the command is MSG, this is a private message to a user:
            if (command.equals("PM")) {
                String user = line.split(" ")[1].toLowerCase();
                if (cm.doesNameExist(user)) {
                    // Inform the server that a message was sent
                    // TODO: consider removing for privacy. (Good for testing)
                    System.out.println(username + " sent " + user + " a message.");
                    String msg = line.substring(4 + user.length());
                    sendEcho(user, msg);
                    cm.sendMessage(user, username, msg);
                } else {
                    sendError(user + " is not an existing user.");
                }
                line = null;
                continue;
            }
            // ADMIN commands only
            if (username.equals(AdminClient.ADMIN)) {
                if (command.equals("FORCEKICK")) {
                    String user = line.split(" ")[1].toLowerCase();
                    if (cm.doesNameExist(user)) {
                        // Inform the server that a message was sent
                        // TODO: consider removing for privacy. (Good for testing)
                        cm.bootUser(line.split(" ")[1], username);
                    } else {
                        sendError(user + " is not an existing user.");
                    }
                    continue;
                }
                if (command.equals("SILENCE")) {
                    String user = line.split(" ")[1].toLowerCase();
                    if (cm.doesNameExist(user)) {
                        // Inform the server that a message was sent
                        // TODO: consider removing for privacy. (Good for testing)
                        cm.silenceUser(line.split(" ")[1], username);
                        System.out.println(username + " is now silenced.");
                    } else {
                        sendError(user + " is not an existing user.");
                    }
                    continue;
                }
                if (command.equals("UNSILENCE")) {
                    String user = line.split(" ")[1].toLowerCase();
                    if (cm.doesNameExist(user)) {
                        // Inform the server that a message was sent
                        // TODO: consider removing for privacy. (Good for testing)
                        cm.unsilenceUser(line.split(" ")[1], username);
                        System.out.println(username + " is no longer silenced.");
                    } else {
                        sendError(user + " is not an existing user.");
                    }
                    continue;
                }
            }
            if (isSilenced == true) {
                sendInfo("You can't use the main channel when silenced. Use private messages.");
                continue;
            }
            // If command is SAY or SHOUT, broadcast global message:
            if ((command.equals("SAY")) || (command.equals("SHOUT"))) {
                cm.broadcastMessage(username, line.substring(command.length() + 1));
                continue;
            }
            // If the command is "EMOTE", broadcast globally as an emote:
            if ((command.equals("EMOTE") || (command.equals(":")))) {
                cm.broadcastEmote(username, line.substring(command.length() + 1));
                continue;
            }
            // By default, if the single word does not resolve to a
            // known command, broadcast it as a simple message
            cm.broadcastMessage(username, line);
        }
        if (socket.isClosed()) {
            // System.out.println(username + " has disconnected.");
            cm.logOutUser(username, false);
            in.close();
            out.close();
            this.socket.close();
        }
    } catch (Exception e) {
        try {
            // if error, log the user out and inform server:
            // System.out.println(username + " has disconnected.");
            cm.logOutUser(username, false);
            in.close();
            out.close();
            this.socket.close();
        } catch (IOException e1) {
            e1.printStackTrace();
        }
    }
    // disconnected:
    if (cm.doesNameExist(username)) {
        System.out.println(username + " has disconnected.");
        cm.logOutUser(username, false);
    }
}
