public int print(Graphics g, PageFormat pageFormat, int pageIndex) throws PrinterException {
    // the printing part
    int position;
    // Set the font
    g.setFont(this.font);
    // set color
    g.setColor(Color.black);
    // get co-ordinates for frame
    int xPosition = (int) pageFormat.getImageableX();
    int yPosition = (int) pageFormat.getImageableY();
    int width = (int) pageFormat.getImageableWidth();
    int height = (int) pageFormat.getImageableHeight();
    // Get some style information:
    StyleContext context = new StyleContext();
    final FontMetrics fontMetrics = context.getFontMetrics(font);
    Color[] colors = MoeSyntaxDocument.getColors();
    Color def = Color.black;
    // print a header
    printHeader(g, pageIndex, xPosition, yPosition, width, HEADER_SPACE);
    // print main text area
    int textYPosition = yPosition + HEADER_SPACE;
    int textXPosition = xPosition + PADDING + (lineNumbers ? LINE_NUMBER_WIDTH : 0);
    g.drawRect(xPosition, textYPosition, width, height - (HEADER_SPACE + FOOTER_SPACE));
    int lineNumberXPosition = xPosition + PADDING;
    int lastLineNumber = 0;
    if (lineNumbers) {
        // The vertical line dividing the line numbers from the code:
        g.drawLine(xPosition + LINE_NUMBER_WIDTH, textYPosition, xPosition + LINE_NUMBER_WIDTH, yPosition + height - FOOTER_SPACE);
    }
    // print the text
    for (ListIterator<PrintLine> li = text.listIterator(); li.hasNext(); ) {
        position = textYPosition + (this.font.getSize() + 2) * (li.nextIndex() + 1);
        PrintLine line = li.next();
        if (lineNumbers && line.getLineNumber() != lastLineNumber) {
            g.setColor(Color.black);
            g.setFont(lineNumberFont);
            g.drawString(Integer.toString(line.getLineNumber()), lineNumberXPosition, position);
            lastLineNumber = line.getLineNumber();
            g.setFont(font);
        }
        int x = textXPosition;
        Token tokens = document.getParser().getMarkTokensFor(line.getStartOffset(), Math.min(line.getEndOffset(), document.getLength()) - line.getStartOffset(), 0, document);
        int offset = 0;
        while (tokens.id != Token.END) {
            byte id = tokens.id;
            int length = tokens.length;
            Color color;
            if (id == Token.NULL)
                color = def;
            else {
                // safeguard for updated syntax package
                if (id < colors.length)
                    color = colors[id];
                else
                    color = def;
            }
            if (syntaxHighlighting) {
                g.setColor(color == null ? def : color);
            }
            Segment lineSeg = line.getSegment();
            lineSeg.count = length;
            lineSeg.offset += offset;
            // trying to print empty lines throws exception
            if (lineSeg.count == 0) {
                char[] chars = new char[] { ' ' };
                Segment nonBlank = new Segment(chars, 0, 1);
                x = Utilities.drawTabbedText(nonBlank, x, position, g, null, 0);
            } else {
                TabExpander tab = Utility.makeTabExpander(lineSeg.toString(), tabSize, fontMetrics);
                x = Utilities.drawTabbedText(lineSeg, x, position, g, tab, offset);
            }
            offset += length;
            tokens = tokens.next;
        }
    }
    // print footer
    int footerYPosition = yPosition + height - FOOTER_SPACE;
    printFooter(g, xPosition, footerYPosition, width, FOOTER_SPACE);
    // print the page
    return Printable.PAGE_EXISTS;
}
