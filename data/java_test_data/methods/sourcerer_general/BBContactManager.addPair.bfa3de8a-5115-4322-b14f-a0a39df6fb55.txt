public void addPair(Object proxyUserDataA, Object proxyUserDataB) {
    BBFixture fixtureA = (BBFixture) proxyUserDataA;
    BBFixture fixtureB = (BBFixture) proxyUserDataB;
    BBBody bodyA = fixtureA.getBody();
    BBBody bodyB = fixtureB.getBody();
    // Are the fixtures on the same body?
    if (bodyA == bodyB) {
        return;
    }
    // Are both bodies static?
    if (bodyA.isStatic() & bodyB.isStatic()) {
        return;
    }
    // Does a contact already exist?
    BBContactEdge edge = bodyB.getContactList();
    while (edge != null) {
        if (edge.other == bodyA) {
            BBFixture fA = edge.contact.getFixtureA();
            BBFixture fB = edge.contact.getFixtureB();
            if (fA == fixtureA & fB == fixtureB) {
                // A contact already exists.
                return;
            }
            if (fA == fixtureB & fB == fixtureA) {
                // A contact already exists.
                return;
            }
        }
        edge = edge.next;
    }
    // Does a joint override collision?
    if (bodyB.isConnected(bodyA)) {
        return;
    }
    // Check user filtering.
    if (!m_contactFilter.shouldCollide(fixtureA, fixtureB)) {
        return;
    }
    // Call the factory.
    BBContact c = BBContact.create(fixtureA, fixtureB);
    // Contact creation may swap fixtures.
    fixtureA = c.getFixtureA();
    fixtureB = c.getFixtureB();
    bodyA = fixtureA.getBody();
    bodyB = fixtureB.getBody();
    // Insert into the world.
    c.m_prev = null;
    c.m_next = m_contactList;
    if (m_contactList != null) {
        m_contactList.m_prev = c;
    }
    m_contactList = c;
    // Connect to island graph.
    // Connect to body A
    c.m_nodeA.contact = c;
    c.m_nodeA.other = bodyB;
    c.m_nodeA.prev = null;
    c.m_nodeA.next = bodyA.m_contactList;
    if (bodyA.m_contactList != null) {
        bodyA.m_contactList.prev = c.m_nodeA;
    }
    bodyA.m_contactList = c.m_nodeA;
    // Connect to body B
    c.m_nodeB.contact = c;
    c.m_nodeB.other = bodyA;
    c.m_nodeB.prev = null;
    c.m_nodeB.next = bodyB.m_contactList;
    if (bodyB.m_contactList != null) {
        bodyB.m_contactList.prev = c.m_nodeB;
    }
    bodyB.m_contactList = c.m_nodeB;
    ++m_contactCount;
}
