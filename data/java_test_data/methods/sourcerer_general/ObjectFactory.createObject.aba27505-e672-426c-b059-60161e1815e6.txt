// createObject(String,String):Object
static Object createObject(String factoryId, String propertiesFilename, String fallbackClassName) throws ConfigurationError {
    if (DEBUG)
        debugPrintln("debug is on");
    SecuritySupport ss = SecuritySupport.getInstance();
    ClassLoader cl = findClassLoader();
    // Use the system property first
    try {
        String systemProp = ss.getSystemProperty(factoryId);
        if (systemProp != null) {
            if (DEBUG)
                debugPrintln("found system property, value=" + systemProp);
            return newInstance(systemProp, cl, true);
        }
    } catch (SecurityException se) {
    // Ignore and continue w/ next location
    }
    // Try to read from propertiesFilename, or $java.home/lib/xerces.properties
    String factoryClassName = null;
    // no properties file name specified; use $JAVA_HOME/lib/xerces.properties:
    if (propertiesFilename == null) {
        File propertiesFile = null;
        boolean propertiesFileExists = false;
        try {
            String javah = ss.getSystemProperty("java.home");
            propertiesFilename = javah + File.separator + "lib" + File.separator + DEFAULT_PROPERTIES_FILENAME;
            propertiesFile = new File(propertiesFilename);
            propertiesFileExists = ss.getFileExists(propertiesFile);
        } catch (SecurityException e) {
            // try again...
            fLastModified = -1;
            fXercesProperties = null;
        }
        synchronized (ObjectFactory.class) {
            boolean loadProperties = false;
            try {
                // file existed last time
                if (fLastModified >= 0) {
                    if (propertiesFileExists && (fLastModified < (fLastModified = ss.getLastModified(propertiesFile)))) {
                        loadProperties = true;
                    } else {
                        // file has stopped existing...
                        if (!propertiesFileExists) {
                            fLastModified = -1;
                            fXercesProperties = null;
                        }
                    // else, file wasn't modified!
                    }
                } else {
                    // file has started to exist:
                    if (propertiesFileExists) {
                        loadProperties = true;
                        fLastModified = ss.getLastModified(propertiesFile);
                    }
                // else, nothing's changed
                }
                if (loadProperties) {
                    // must never have attempted to read xerces.properties before (or it's outdeated)
                    fXercesProperties = new Properties();
                    FileInputStream fis = ss.getFileInputStream(propertiesFile);
                    fXercesProperties.load(fis);
                    fis.close();
                }
            } catch (Exception x) {
                fXercesProperties = null;
                fLastModified = -1;
            // assert(x instanceof FileNotFoundException
            // || x instanceof SecurityException)
            // In both cases, ignore and continue w/ next location
            }
        }
        if (fXercesProperties != null) {
            factoryClassName = fXercesProperties.getProperty(factoryId);
        }
    } else {
        try {
            FileInputStream fis = ss.getFileInputStream(new File(propertiesFilename));
            Properties props = new Properties();
            props.load(fis);
            fis.close();
            factoryClassName = props.getProperty(factoryId);
        } catch (Exception x) {
        // assert(x instanceof FileNotFoundException
        // || x instanceof SecurityException)
        // In both cases, ignore and continue w/ next location
        }
    }
    if (factoryClassName != null) {
        if (DEBUG)
            debugPrintln("found in " + propertiesFilename + ", value=" + factoryClassName);
        return newInstance(factoryClassName, cl, true);
    }
    // Try Jar Service Provider Mechanism
    Object provider = findJarServiceProvider(factoryId);
    if (provider != null) {
        return provider;
    }
    if (fallbackClassName == null) {
        throw new ConfigurationError("Provider for " + factoryId + " cannot be found", null);
    }
    if (DEBUG)
        debugPrintln("using fallback, value=" + fallbackClassName);
    return newInstance(fallbackClassName, cl, true);
}
