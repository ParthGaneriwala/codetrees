private void visitOptimizedCall(Node node, OptFunctionNode target, int type, Node child) {
    Node firstArgChild = child.getNext();
    short thisObjLocal = 0;
    if (type == Token.NEW) {
        generateExpression(child, node);
    } else {
        generateFunctionAndThisObj(child, node);
        thisObjLocal = getNewWordLocal();
        cfw.addAStore(thisObjLocal);
    }
    // stack: ... functionObj
    int beyond = cfw.acquireLabel();
    int directTargetIndex = target.getDirectTargetIndex();
    if (isTopLevel) {
        cfw.add(ByteCode.ALOAD_0);
    } else {
        cfw.add(ByteCode.ALOAD_0);
        cfw.add(ByteCode.GETFIELD, codegen.mainClassName, Codegen.DIRECT_CALL_PARENT_FIELD, codegen.mainClassSignature);
    }
    cfw.add(ByteCode.GETFIELD, codegen.mainClassName, Codegen.getDirectTargetFieldName(directTargetIndex), codegen.mainClassSignature);
    cfw.add(ByteCode.DUP2);
    // stack: ... functionObj directFunct functionObj directFunct
    int regularCall = cfw.acquireLabel();
    cfw.add(ByteCode.IF_ACMPNE, regularCall);
    // stack: ... functionObj directFunct
    short stackHeight = cfw.getStackTop();
    cfw.add(ByteCode.SWAP);
    cfw.add(ByteCode.POP);
    // stack: ... directFunct
    if (compilerEnv.isUseDynamicScope()) {
        cfw.addALoad(contextLocal);
        cfw.addALoad(variableObjectLocal);
    } else {
        cfw.add(ByteCode.DUP);
        // stack: ... directFunct directFunct
        cfw.addInvoke(ByteCode.INVOKEINTERFACE, "org/mozilla/javascript/Scriptable", "getParentScope", "()Lorg/mozilla/javascript/Scriptable;");
        // stack: ... directFunct scope
        cfw.addALoad(contextLocal);
        // stack: ... directFunct scope cx
        cfw.add(ByteCode.SWAP);
    }
    if (type == Token.NEW) {
        cfw.add(ByteCode.ACONST_NULL);
    } else {
        cfw.addALoad(thisObjLocal);
    }
    // stack: ... directFunc cx scope thisObj
    /*
Remember that directCall parameters are paired in 1 aReg and 1 dReg
If the argument is an incoming arg, just pass the orginal pair thru.
Else, if the argument is known to be typed 'Number', pass Void.TYPE
in the aReg and the number is the dReg
Else pass the JS object in the aReg and 0.0 in the dReg.
*/
    Node argChild = firstArgChild;
    while (argChild != null) {
        int dcp_register = nodeIsDirectCallParameter(argChild);
        if (dcp_register >= 0) {
            cfw.addALoad(dcp_register);
            cfw.addDLoad(dcp_register + 1);
        } else if (argChild.getIntProp(Node.ISNUMBER_PROP, -1) == Node.BOTH) {
            cfw.add(ByteCode.GETSTATIC, "java/lang/Void", "TYPE", "Ljava/lang/Class;");
            generateExpression(argChild, node);
        } else {
            generateExpression(argChild, node);
            cfw.addPush(0.0);
        }
        argChild = argChild.getNext();
    }
    cfw.add(ByteCode.GETSTATIC, "org/mozilla/javascript/ScriptRuntime", "emptyArgs", "[Ljava/lang/Object;");
    cfw.addInvoke(ByteCode.INVOKESTATIC, codegen.mainClassName, (type == Token.NEW) ? codegen.getDirectCtorName(target.fnode) : codegen.getBodyMethodName(target.fnode), codegen.getBodyMethodSignature(target.fnode));
    cfw.add(ByteCode.GOTO, beyond);
    cfw.markLabel(regularCall, stackHeight);
    // stack: ... functionObj directFunct
    cfw.add(ByteCode.POP);
    cfw.addALoad(contextLocal);
    cfw.addALoad(variableObjectLocal);
    // stack: ... functionObj cx scope
    if (type != Token.NEW) {
        cfw.addALoad(thisObjLocal);
        releaseWordLocal(thisObjLocal);
    // stack: ... functionObj cx scope thisObj
    }
    // XXX: this will generate code for the child array the second time,
    // so expression code generation better not to alter tree structure...
    generateCallArgArray(node, firstArgChild, true);
    if (type == Token.NEW) {
        addScriptRuntimeInvoke("newObject", "(Ljava/lang/Object;" + "Lorg/mozilla/javascript/Context;" + "Lorg/mozilla/javascript/Scriptable;" + "[Ljava/lang/Object;" + ")Lorg/mozilla/javascript/Scriptable;");
    } else {
        cfw.addInvoke(ByteCode.INVOKEINTERFACE, "org/mozilla/javascript/Callable", "call", "(Lorg/mozilla/javascript/Context;" + "Lorg/mozilla/javascript/Scriptable;" + "Lorg/mozilla/javascript/Scriptable;" + "[Ljava/lang/Object;" + ")Ljava/lang/Object;");
    }
    cfw.markLabel(beyond);
}
