private void createNewTransaction(Node txNode) {
    NamedNodeMap attributes = txNode.getAttributes();
    String dateString = attributes.getNamedItem("date").getNodeValue();
    LocalDate date;
    try {
        date = new LocalDate(format.parse(dateString));
    } catch (ParseException e) {
        e.printStackTrace();
        date = new LocalDate();
    }
    String description = attributes.getNamedItem("description").getNodeValue();
    Transaction tx = new Transaction();
    tx.description = description;
    tx.date = date;
    tx.splits = new Split[2];
    boolean foundFirst = false;
    for (Node childNode = txNode.getFirstChild(); childNode != null; childNode = childNode.getNextSibling()) {
        if (childNode.getNodeName().equals("split")) {
            NamedNodeMap attr = childNode.getAttributes();
            boolean reconciled = attr.getNamedItem("reconciled").getNodeValue().equals("true");
            String ownerId = attr.getNamedItem("owner").getNodeValue();
            Account owner = accountMap.get(ownerId);
            String splitId = null;
            try {
                splitId = attr.getNamedItem("id").getNodeValue();
            } catch (Exception e) {
            }
            BigDecimal value = new BigDecimal(attr.getNamedItem("value").getNodeValue());
            Split s = new Split(owner, value, tx);
            if (splitId != null)
                splitMap.put(splitId, s);
            owner.getSplits().add(s);
            s.reconciled = reconciled;
            if (!foundFirst) {
                tx.splits[0] = s;
                foundFirst = true;
            } else {
                tx.splits[1] = s;
                break;
            }
        }
    }
}
