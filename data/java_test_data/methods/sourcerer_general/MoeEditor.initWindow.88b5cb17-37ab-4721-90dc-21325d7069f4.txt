// ======================= WINDOW INITIALISATION =======================
private void initWindow(EntityResolver projectResolver) {
    setIconImage(iconImage);
    // prepare the content pane
    JPanel contentPane = new JPanel(new BorderLayout(6, 6));
    contentPane.setBorder(BorderFactory.createEmptyBorder(6, 6, 6, 6));
    setContentPane(contentPane);
    // create and add info and status areas
    JPanel bottomArea = new JPanel();
    // create panel for info/status
    bottomArea.setLayout(new BorderLayout(6, 1));
    JPanel finderPanel = new JPanel(new DBoxLayout(DBox.Y_AXIS, 0, 0));
    finderPanel.setBorder(BorderFactory.createEmptyBorder(0, BlueJTheme.componentSpacingLarge, 0, 0));
    int smallSpc = BlueJTheme.componentSpacingSmall;
    // area for new find functionality
    finder = new FindPanel(this);
    finder.setVisible(false);
    finder.setBorder(BorderFactory.createEmptyBorder(0, 0, smallSpc, 0));
    finder.setName("FinderPanel");
    finder.setAlignmentX(0.0f);
    finderPanel.add(finder);
    replacer = new ReplacePanel(this, finder);
    replacer.setVisible(false);
    replacer.setBorder(BorderFactory.createEmptyBorder(0, 0, smallSpc, 0));
    replacer.setAlignmentX(0.0f);
    finderPanel.add(replacer);
    bottomArea.add(finderPanel, BorderLayout.NORTH);
    statusArea = new JPanel();
    statusArea.setLayout(new GridLayout(0, 1));
    // one column, many rows
    statusArea.setBackground(infoColor);
    statusArea.setBorder(BorderFactory.createLineBorder(Color.black));
    saveState = new StatusLabel(StatusLabel.SAVED);
    statusArea.add(saveState);
    // bottomArea.add(statusArea, BorderLayout.EAST);
    info = new Info();
    JPanel commentsPanel = new JPanel(new BorderLayout(6, 1));
    commentsPanel.add(info, BorderLayout.CENTER);
    commentsPanel.add(statusArea, BorderLayout.EAST);
    bottomArea.add(commentsPanel, BorderLayout.SOUTH);
    contentPane.add(bottomArea, BorderLayout.SOUTH);
    if (projectResolver != null) {
        sourceDocument = new MoeSyntaxDocument(projectResolver);
    } else {
        // README file
        sourceDocument = new MoeSyntaxDocument();
    }
    sourceDocument.addDocumentListener(this);
    sourceDocument.addUndoableEditListener(undoManager);
    // create the text pane
    EditorKit kit;
    if (projectResolver != null) {
        kit = new MoeSyntaxEditorKit(false, projectResolver);
    } else {
        kit = new ReadmeEditorKit();
    }
    // MoeSyntaxEditorKit kit = new MoeSyntaxEditorKit(false, projectResolver);
    sourcePane = new MoeEditorPane();
    sourcePane.setDocument(sourceDocument);
    sourcePane.setCaretPosition(0);
    sourcePane.setMargin(new Insets(2, 0, 2, 0));
    sourcePane.setOpaque(true);
    sourcePane.setEditorKit(kit);
    moeCaret = new MoeCaret(this);
    sourcePane.setCaret(moeCaret);
    sourcePane.setBackground(MoeSyntaxDocument.getBackgroundColor());
    // sourcePane.setSelectionColor(selectionColour);
    sourcePane.setCaretColor(cursorColor);
    // default showing:
    currentTextPane = sourcePane;
    JPanel editorPane = new JPanel();
    editorPane.setLayout(new BoxLayout(editorPane, BoxLayout.X_AXIS));
    scrollPane = new JScrollPane(currentTextPane);
    scrollPane.getVerticalScrollBar().setUnitIncrement(16);
    naviView = new NaviView(sourceDocument, scrollPane.getVerticalScrollBar());
    naviView.setPreferredSize(new Dimension(NAVIVIEW_WIDTH, 0));
    naviView.setMaximumSize(new Dimension(NAVIVIEW_WIDTH, Integer.MAX_VALUE));
    naviView.setBorder(new BevelBorder(BevelBorder.LOWERED));
    editorPane.add(scrollPane);
    editorPane.add(naviView);
    contentPane.add(editorPane, BorderLayout.CENTER);
    // get table of edit actions
    actions = MoeActions.getActions(sourcePane);
    actions.setUndoEnabled(false);
    actions.setRedoEnabled(false);
    // **** temporary: disable all unimplemented actions ****
    actions.getActionByName("show-manual").setEnabled(false);
    // ****
    // create menubar and menus
    JMenuBar menubar = createMenuBar();
    menubar.setName("menubar");
    setJMenuBar(menubar);
    // create toolbar
    toolbar = createToolbar();
    toolbar.setName("toolbar");
    contentPane.add(toolbar, BorderLayout.NORTH);
    // add event listener to handle the window close requests
    addWindowListener(new WindowAdapter() {

        public void windowClosing(WindowEvent e) {
            closeContentAssist();
            close();
        }

        public void windowActivated(WindowEvent e) {
            checkForChangeOnDisk();
        }
    });
    setFocusTraversalPolicy(new MoeFocusTraversalPolicy());
    setWindowTitle();
    pack();
    // Set the size, respecting the current environment maximums.
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Rectangle maxBounds = ge.getMaximumWindowBounds();
    int myWidth = Math.min(900, (int) maxBounds.getWidth());
    int myHeight = Math.min(700, (int) maxBounds.getHeight());
    setSize(myWidth, myHeight);
}
