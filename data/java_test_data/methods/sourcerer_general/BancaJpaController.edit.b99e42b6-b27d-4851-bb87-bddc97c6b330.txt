public void edit(Banca banca) throws NonexistentEntityException, Exception {
    EntityManager em = null;
    try {
        em = getEntityManager();
        em.getTransaction().begin();
        Banca persistentBanca = em.find(Banca.class, banca.getId());
        Membro presidenteOld = persistentBanca.getPresidente();
        Membro presidenteNew = banca.getPresidente();
        Set<Membro> membroOld = persistentBanca.getMembro();
        Set<Membro> membroNew = banca.getMembro();
        if (presidenteNew != null) {
            presidenteNew = em.getReference(presidenteNew.getClass(), presidenteNew.getId());
            banca.setPresidente(presidenteNew);
        }
        Set<Membro> attachedMembroNew = new HashSet<Membro>();
        for (Membro membroNewMembroToAttach : membroNew) {
            membroNewMembroToAttach = em.getReference(membroNewMembroToAttach.getClass(), membroNewMembroToAttach.getId());
            attachedMembroNew.add(membroNewMembroToAttach);
        }
        membroNew = attachedMembroNew;
        banca.setMembro(membroNew);
        banca = em.merge(banca);
        if (presidenteOld != null && !presidenteOld.equals(presidenteNew)) {
            presidenteOld.setBanca(null);
            presidenteOld = em.merge(presidenteOld);
        }
        if (presidenteNew != null && !presidenteNew.equals(presidenteOld)) {
            Banca oldBancaOfPresidente = presidenteNew.getBanca();
            if (oldBancaOfPresidente != null) {
                oldBancaOfPresidente.setPresidente(null);
                oldBancaOfPresidente = em.merge(oldBancaOfPresidente);
            }
            presidenteNew.setBanca(banca);
            presidenteNew = em.merge(presidenteNew);
        }
        for (Membro membroOldMembro : membroOld) {
            if (!membroNew.contains(membroOldMembro)) {
                membroOldMembro.setBanca(null);
                membroOldMembro = em.merge(membroOldMembro);
            }
        }
        for (Membro membroNewMembro : membroNew) {
            if (!membroOld.contains(membroNewMembro)) {
                Banca oldBancaOfMembroNewMembro = membroNewMembro.getBanca();
                membroNewMembro.setBanca(banca);
                membroNewMembro = em.merge(membroNewMembro);
                if (oldBancaOfMembroNewMembro != null && !oldBancaOfMembroNewMembro.equals(banca)) {
                    oldBancaOfMembroNewMembro.getMembro().remove(membroNewMembro);
                    oldBancaOfMembroNewMembro = em.merge(oldBancaOfMembroNewMembro);
                }
            }
        }
        em.getTransaction().commit();
    } catch (Exception ex) {
        String msg = ex.getLocalizedMessage();
        if (msg == null || msg.length() == 0) {
            long id = banca.getId();
            if (findBanca(id) == null) {
                throw new NonexistentEntityException("The banca with id " + id + " no longer exists.");
            }
        }
        throw ex;
    } finally {
        if (em != null) {
            em.close();
        }
    }
}
