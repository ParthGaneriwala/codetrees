public void processChar(char c) {
    if (// ignore sound (I think)
    (int) c == 7)
        return;
    // System.out.print(""+c);
    if (c == MARK) {
        if (!readingDatagram) {
            readingDatagram = true;
            if (helpString.length() != 0) {
                System.out.println(helpString);
                helpString = "";
            }
        } else
            closingMarkRead = true;
    }
    if (readingDatagram) {
        helpString = helpString + c;
        if (closingMarkRead) {
            if (c == CLOSE2) {
                closingMarkRead = false;
                readingDatagram = false;
                processDatagram(new ICCDatagram(helpString));
                helpString = new String();
            } else if (c != MARK)
                closingMarkRead = false;
        }
    } else {
        if (c != '\n')
            helpString = helpString + c;
        else {
            if (isItAFingerLine(helpString)) {
                processFinger(helpString);
            } else /*
				 * now in processqtell else if (helpString.startsWith("Note to channel 0:")) { if (helpString.indexOf("just created")!=-1) {
				 * accountCreationCounter=accountCreationCounter+1; accountCreationPipe.addElement(new
				 * Login(helpString.substring(helpString.indexOf('"'
				 * )+1,helpString.indexOf('"',helpString.indexOf('"')+1)),System.currentTimeMillis())); } if
				 * (helpString.indexOf("just logged in for the first time")!=-1) { boolean loginIdentified=false; long loginDelay=0;
				 * firstLoginCounter=firstLoginCounter+1; firstLoginPipe.addElement(new
				 * Login(helpString.substring(helpString.indexOf(':')+2,helpString
				 * .indexOf(' ',helpString.indexOf(':')+2)),System.currentTimeMillis())); for (int i=0;i<accountCreationPipe.size();i++) { if
				 * (((Login)(accountCreationPipe.elementAt(i))).getHandle().equalsIgnoreCase(((Login)(firstLoginPipe.lastElement())).getHandle())) {
				 * loginDelay=((Login)(firstLoginPipe.lastElement())).getTime()-((Login)(accountCreationPipe.elementAt(i))).getTime();
				 * loginDelayCount=loginDelayCount+1; loginDelayTotal=loginDelayTotal+loginDelay; loginIdentified=true;
				 * accountCreationPipe.removeElementAt(i); break; } } if (loginIdentified) {
				 * sendLine("tell kiebitz! "+(((Login)(firstLoginPipe.lastElement())).getHandle())+" took "+loginDelay+" milliseconds to log in."); }
				 * else {
				 * sendLine("tell kiebitz! "+(((Login)(firstLoginPipe.lastElement())).getHandle())+" was not found in the accountCreationPipe!"); } }
				 * }
				 */
            if ((checkPending) && (helpString.startsWith("   ")) && (helpString.indexOf(simGiver[currentSimGiver]) != -1) && (helpString.indexOf("(") > 1) && (helpString.indexOf(")") > 1) && (helpString.indexOf("rated") != -1)) {
                parsePendingLine(helpString);
            } else if ((checkPending) && (helpString.indexOf("cg64zh") != -1)) {
                checkPending = false;
                investigateChallenges();
            } else if (helpString.indexOf("*getps") != -1) {
                Vector getpsVector = Parse(helpString);
                if (getpsVector.elementAt(11).toString().equals("1")) {
                    if (getpsInquiry == 1) {
                        String toExpire = getpsVector.elementAt(12).toString();
                        expireFreeloader(toExpire);
                    }
                }
                getpsInquiry = 0;
            } else if (helpString.startsWith("IP Notification:")) {
                if (helpString.indexOf("has departed.") != -1) {
                } else if (helpString.indexOf("has connected from") != -1) {
                    String connectedIP = helpString.substring(helpString.indexOf("has connected from") + 19, helpString.length() - 1);
                    String connectedName = helpString.substring(17);
                    connectedName = connectedName.substring(0, connectedName.indexOf(" "));
                    sendLine("tell kiebitz " + connectedName + " connected from " + connectedIP + ".");
                    int ipNumber = -1;
                    for (int i = 0; i < notedIPs; i++) {
                        if (connectedIP.startsWith(ipAlert[i])) {
                            ipNumber = i;
                            break;
                        }
                    }
                    if (ipNumber < 0) {
                        sendLine("tell kiebitz! This IP is not in my list!");
                    } else {
                        switch(ipAction[ipNumber]) {
                            case 0:
                                // just standard warning
                                break;
                            case 1:
                                guestComputerLogsIn(connectedName);
                                break;
                            case 2:
                                freeloaderLogsIn(connectedName);
                                break;
                            default:
                                sendLine("tell kiebitz! Undefined IP action.");
                        }
                    }
                }
            } else {
                System.out.println(helpString);
                if (isItAGoneFingerLine(helpString)) {
                    // sendLine("tell kiebitz am here");
                    processGoner(helpString);
                }
                if (isItANonexistantFingerLine(helpString)) {
                    processNonexistant(helpString);
                }
                if ((helpString.indexOf("No such player:") != -1) && (helpString.indexOf(checkedForRemoval) != -1)) {
                    if (checkedForRemoval.equalsIgnoreCase(wildHandle[checkedWildNumberRemoval - 1])) {
                        maxID = maxID - 1;
                        for (int i = checkedWildNumberRemoval - 1; i < maxID; i++) {
                            wildHandle[i] = wildHandle[i + 1];
                            for (int j = 0; j < maxWilds; j++) {
                                wildRatings[j][i] = wildRatings[j][i + 1];
                                bestWildRatings[j][i] = bestWildRatings[j][i + 1];
                                wildWon[j][i] = wildWon[j][i + 1];
                                wildLost[j][i] = wildLost[j][i + 1];
                                wildDrawn[j][i] = wildDrawn[j][i + 1];
                                wildLastTime[j][i] = wildLastTime[j][i + 1];
                            }
                        }
                        sendLine("tell kiebitz I removed " + checkedForRemoval + ", nonexistant handle, wildID was " + (checkedWildNumberRemoval - 1) + ".");
                    } else {
                        sendLine("message kiebitz Inconsistency in wild removal!");
                    }
                    checkedForRemoval = "XYXYXY6666666";
                // beachte dass durch das raufzählen der jeweils nächste spieler nicht gecheckt wird, was aber überhaupt keine rolle spielt
                }
            }
            helpString = new String();
        }
        if (readingTextBeforeLogged) {
            loginLine = (loginLine + c).substring(1);
            if (loginLine.equals(loginText)) {
                // read the login line (time to give handle and password, and other stuff)
                helpString = new String();
                readingTextBeforeLogged = false;
                login();
            }
        }
    }
}
