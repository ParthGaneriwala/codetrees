@Override
public Object handleInvocation(MethodInvoker method) {
    int i = 0;
    Method mthd;
    Class[] par;
    Object output;
    Object[] input = null;
    List params = method.getParams();
    if (params != null) {
        par = new Class[params.size()];
        input = new Object[params.size()];
        for (i = 0; i < params.size(); i++) {
            par[i] = params.get(i).getClass();
            input[i] = params.get(i);
        }
    } else
        par = null;
    try {
        mthd = cl.getMethod(method.getMethodName(), par);
        if (method.getHasReturn()) {
            logger.debug("getHasReturn TRUE");
            output = (Object) mthd.invoke(this.imgManager, input);
        } else {
            logger.debug("getHasReturn FALSE");
            mthd.invoke(this.imgManager, input);
            output = null;
        }
        if (output != null) {
            logger.debug("ImageManagerAgent " + method.getMethodName() + "Result: " + output.toString());
            return output;
        }
        logger.debug("Out NULL");
        return output;
    } catch (IllegalAccessException ex) {
        logger.debug(ex.getMessage());
        return false;
    } catch (IllegalArgumentException ex) {
        logger.debug(ex.getMessage());
        return false;
    } catch (InvocationTargetException ex) {
        logger.debug(ex.getMessage());
        return false;
    } catch (NoSuchMethodException ex) {
        logger.debug(ex.getMessage());
        return false;
    } catch (SecurityException ex) {
        logger.debug(ex.getMessage());
        return false;
    }
}
