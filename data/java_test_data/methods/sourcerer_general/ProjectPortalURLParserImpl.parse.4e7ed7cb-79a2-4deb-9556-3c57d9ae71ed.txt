// Public Methods ----------------------------------------------------------
public PortalURL parse(HttpServletRequest request) {
    LOG.debug("Parsing URL: " + request.getRequestURI());
    StringBuffer url = new StringBuffer();
    // Build the URL from various items...
    if (request.getParameterMap() != null) {
        String action = request.getParameter("portlet-action");
        String projectValue = request.getParameter("portlet-pid");
        String object = request.getParameter("portlet-object");
        String value = request.getParameter("portlet-value");
        String params = request.getParameter("portlet-params");
        // Append the portlet action
        // @note TEST TEST TEST
        // url.append("/").append(action);
        url.append("/").append(StringUtils.encodeUrl(action));
        // Append the targeted profile
        Project project = ProjectUtils.loadProject(Integer.parseInt(projectValue));
        url.append("/").append(project.getUniqueId());
        // Append the object in the profile
        // @note TEST TEST TEST
        // url.append("/").append(object);
        url.append("/").append(StringUtils.encodeUrl(object));
        // Append any object value, like object id
        if (StringUtils.hasText(value)) {
            url.append("/").append(StringUtils.encodeUrl(value));
        }
        // Append any parameters
        if (StringUtils.hasText(params)) {
            // @note TEST TEST TEST
            // url.append("/").append(params);
            url.append("/").append(StringUtils.encodeUrl(params));
        }
        LOG.debug("reconstructed url: " + url.toString());
    }
    String servletName = url.toString();
    // Construct portal URL using info retrieved from servlet request.
    String contextPath = request.getContextPath();
    LOG.debug("contextPath: " + contextPath);
    PortalURL portalURL = new RelativePortalURLImpl(contextPath, servletName, getParser());
    // Action window definition: portalURL.setActionWindow().
    String portletAction = request.getParameter("portletAction");
    if (portletAction != null && portletAction.startsWith(PREFIX + ACTION)) {
        LOG.debug("found action");
        portalURL.setActionWindow(decodeControlParameter(portletAction)[0]);
        portalURL.setRenderPath(contextPath + ".");
    }
    // Window state definition: portalURL.setWindowState().
    String portletWindowState = null;
    int windowStateCount = 0;
    while ((portletWindowState = request.getParameter("portletWindowState" + (++windowStateCount))) != null) {
        String[] decoded = decodeControlParameter(portletWindowState);
        portalURL.setWindowState(decoded[0], new WindowState(decoded[1]));
    }
    // Portlet mode definition: portalURL.setPortletMode().
    String portletMode = request.getParameter("portletMode");
    if (portletMode != null) {
        String[] decoded = decodeControlParameter(portletMode);
        portalURL.setPortletMode(decoded[0], new PortletMode(decoded[1]));
    }
    // Portal URL parameter: portalURL.addParameter().
    Enumeration params = request.getParameterNames();
    while (params.hasMoreElements()) {
        String parameter = (String) params.nextElement();
        if (parameter.startsWith(PREFIX + RENDER_PARAM)) {
            String value = request.getParameter(parameter);
            LOG.debug("parameter: " + parameter);
            portalURL.addParameter(decodeParameter(parameter, value));
        }
    }
    // Return the portal URL.
    return portalURL;
}
