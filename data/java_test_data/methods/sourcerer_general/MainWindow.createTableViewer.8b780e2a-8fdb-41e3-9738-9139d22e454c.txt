private void createTableViewer() {
    bsTableViewer = new TableViewer(bsTable);
    bsTableViewer.setUseHashlookup(true);
    bsTableViewer.setColumnProperties(Column.stringValues());
    ColumnViewerEditorActivationStrategy actSupport = new ColumnViewerEditorActivationStrategy(bsTableViewer) {

        protected boolean isEditorActivationEvent(ColumnViewerEditorActivationEvent event) {
            ViewerCell cell = (ViewerCell) event.getSource();
            if (event.eventType == ColumnViewerEditorActivationEvent.MOUSE_DOUBLE_CLICK_SELECTION) {
                MouseEvent e = ((MouseEvent) event.sourceEvent);
                return e.button == 1;
            } else if (event.eventType == ColumnViewerEditorActivationEvent.MOUSE_CLICK_SELECTION) {
                return cell.getColumnIndex() == Column.DETAIL.ordinal();
            } else {
                return event.eventType == ColumnViewerEditorActivationEvent.TRAVERSAL || event.eventType == ColumnViewerEditorActivationEvent.PROGRAMMATIC;
            }
        }
    };
    TableViewerEditor.create(bsTableViewer, actSupport, ColumnViewerEditor.TABBING_HORIZONTAL | // | ColumnViewerEditor.TABBING_MOVE_TO_ROW_NEIGHBOR
    ColumnViewerEditor.TABBING_CYCLE_IN_ROW | ColumnViewerEditor.TABBING_VERTICAL | ColumnViewerEditor.KEYBOARD_ACTIVATION);
    // Create the cell editors
    final CellEditor[] editors = new CellEditor[Column.values().length];
    // editors[0] = new CheckboxCellEditor(table);
    // 日付欄
    CalendarCellEditor dateEditor = new CalendarCellEditor(bsTable, SWT.NULL);
    editors[Column.DATE.ordinal()] = dateEditor;
    // 科目
    this.catCombo = new CategoryComboCellEditor(bsTable);
    catCombo.setItems(catProv.getAll());
    bsTableViewer.setData(CATEGORY_LIST, catProv.getAll());
    catProv.addChangeListener(new IDataAdapter<Category>() {

        public void onAdded(Category item) {
            resetCategoryCombo();
        }

        public void onLoaded(Category item) {
            resetCategoryCombo();
        }

        public void onRemoved(Category item) {
            resetCategoryCombo();
        }

        public void onUpdated(Category item) {
            resetCategoryCombo();
        }
    });
    // e.addListener(new ActivateNextCellEditorListener(tableViewer));
    editors[Column.CATEGORY.ordinal()] = catCombo;
    // 支出
    TextCellEditor debitEditor = new TextCellEditor(bsTable, SWT.RIGHT | SWT.BORDER);
    ((Text) debitEditor.getControl()).setTextLimit(9);
    ((Text) debitEditor.getControl()).addVerifyListener(new NumberVerifyListener());
    editors[Column.DEBIT.ordinal()] = debitEditor;
    // 収入
    TextCellEditor creditEditor = new TextCellEditor(bsTable, SWT.RIGHT | SWT.BORDER);
    ((Text) creditEditor.getControl()).setTextLimit(9);
    ((Text) creditEditor.getControl()).addVerifyListener(new NumberVerifyListener());
    editors[Column.CREDIT.ordinal()] = creditEditor;
    // 詳細
    editors[Column.DETAIL.ordinal()] = new BalanceSheetDetailCellEditor(bsTable);
    // resize the row height using a MeasureItem listener
    bsTable.addListener(SWT.MeasureItem, new Listener() {

        public void handleEvent(Event event) {
            // height cannot be per row so simply set
            event.height = 24;
        }
    });
    bsTable.addSelectionListener(new SelectionAdapter() {

        @Override
        public void widgetSelected(SelectionEvent e) {
            Object obj = ((StructuredSelection) bsTableViewer.getSelection()).getFirstElement();
            // Clean up detail column editor
            CellEditor oldEditor = editors[Column.DETAIL.ordinal()];
            if (oldEditor.isActivated() && oldEditor.getValue() != obj) {
                oldEditor.deactivate();
            }
        }
    });
    // Assign the cell editors to the viewer
    bsTableViewer.setCellEditors(editors);
    // Set the cell modifier for the viewer
    bsTableViewer.setCellModifier(new BalanceSheetCellModifier(bsProv, bsTableViewer, accountListProv));
    // Set the default sorter for the viewer
    // tableViewer.setSorter(new ExampleTaskSorter(
    // ExampleTaskSorter.DESCRIPTION));
    ICellEditorListener propChange = new ICellEditorListener() {

        public void applyEditorValue() {
        }

        public void cancelEditor() {
        }

        public void editorValueChanged(boolean arg0, boolean arg1) {
        }
    };
    for (CellEditor ed : editors) {
        if (ed != null) {
            ed.addListener(propChange);
        }
    }
    bslp = new BalanceSheetLabelProvider(bsTableViewer);
    bslp.setDateFormat(BalanceSheetLabelProvider.DD);
    bsTableViewer.setContentProvider(bsProv);
    bsTableViewer.setLabelProvider(bslp);
    bsTableViewer.setInput(bsProv);
    bsProv.addChangeListener(new BalanceSheetTransactionListener(bsTableViewer, bsProv));
    bsProv.addChangeListener(new BaseDataAdapter<Transaction>() {

        @Override
        public void onRemoved(Transaction item) {
            bsTableViewer.refresh();
            bsAccountTree.viewer.refresh();
            currentBalance.setText(numberFormat.format(bsProv.getBalance()));
        }

        @Override
        public void onUpdated(Transaction item) {
            bsTableViewer.refresh();
            bsAccountTree.viewer.refresh();
            currentBalance.setText(numberFormat.format(bsProv.getBalance()));
        }
    });
}
