protected void serveResource(ActionContext context, HttpServletRequest request, HttpServletResponse response, boolean content) throws IOException, ServletException {
    // TODO: remove this hardcoding
    debug = 2;
    // Identify the requested resource path
    String path = getRelativePath(request);
    if (debug > 0) {
        if (content) {
            log("DefaultServlet.serveResource:  Serving resource '" + path + "' headers and data");
        } else {
            log("DefaultServlet.serveResource:  Serving resource '" + path + "' headers only");
        }
    }
    // Retrieve the Catalina context and Resources implementation
    Connection db = null;
    ModuleContext resources = null;
    ResourceInfo resourceInfo = null;
    boolean status = true;
    try {
        System.out.println("DefaultServlet-> Serving Resource");
        db = this.getConnection(context);
        resources = getCFSResources(db, context);
        resourceInfo = new ResourceInfo(db, path, resources);
    } catch (SQLException e) {
        e.printStackTrace(System.out);
        context.getResponse().sendError(SQLERROR, e.getMessage());
        status = false;
    } catch (Exception e) {
        // TODO: remove silent catch
        e.printStackTrace(System.out);
    } finally {
        this.freeConnection(db, context);
    }
    if (!status) {
        return;
    }
    if (!resourceInfo.exists) {
        response.sendError(HttpServletResponse.SC_NOT_FOUND, request.getRequestURI());
        return;
    }
    // ends with "/" or "\", return NOT FOUND
    if (!resourceInfo.collection) {
        if (path.endsWith("/") || (path.endsWith("\\"))) {
            response.sendError(HttpServletResponse.SC_NOT_FOUND, request.getRequestURI());
            return;
        }
    }
    // satisfied.
    if (!resourceInfo.collection) {
        // Checking If headers
        boolean included = (request.getAttribute(Globals.INCLUDE_CONTEXT_PATH_ATTR) != null);
        if (!included && !checkIfHeaders(request, response, resourceInfo)) {
            return;
        }
    }
    // Find content type
    String contentType = getServletContext().getMimeType(resourceInfo.path);
    Vector ranges = null;
    if (resourceInfo.collection) {
        // suppress them
        if (!listings) {
            response.sendError(HttpServletResponse.SC_NOT_FOUND, request.getRequestURI());
            return;
        }
        contentType = "text/html;charset=UTF-8";
    } else {
        // Parse range specifier
        ranges = parseRange(request, response, resourceInfo);
        // ETag header
        response.setHeader("ETag", getETag(resourceInfo));
        // Last-Modified header
        if (debug > 0) {
            log("DefaultServlet.serveFile:  lastModified='" + (new Timestamp(resourceInfo.date)).toString() + "'");
        }
        response.setHeader("Last-Modified", resourceInfo.httpDate);
    }
    ServletOutputStream ostream = null;
    PrintWriter writer = null;
    if (content) {
        // Trying to retrieve the servlet output stream
        try {
            ostream = response.getOutputStream();
        } catch (IllegalStateException e) {
            // trying to serve a text file
            if ((contentType == null) || (contentType.startsWith("text"))) {
                writer = response.getWriter();
            } else {
                throw e;
            }
        }
    }
    if ((resourceInfo.collection) || (((ranges == null) || (ranges.isEmpty())) && (request.getHeader("Range") == null))) {
        // Set the appropriate output headers
        if (contentType != null) {
            if (debug > 0) {
                log("DefaultServlet.serveFile:  contentType='" + contentType + "'");
            }
            response.setContentType(contentType);
        }
        long contentLength = resourceInfo.length;
        if ((!resourceInfo.collection) && (contentLength >= 0)) {
            if (debug > 0) {
                log("DefaultServlet.serveFile:  contentLength=" + contentLength);
            }
            response.setContentLength((int) contentLength);
        }
        if (resourceInfo.collection) {
            if (content) {
                // Serve the directory browser
                resourceInfo.setStream(render(request.getContextPath(), resourceInfo));
            }
        }
        // Copy the input stream to our output stream (if requested)
        if (content) {
            try {
                response.setBufferSize(output);
            } catch (IllegalStateException e) {
                // Silent catch
                e.printStackTrace(System.out);
            }
            if (ostream != null) {
                copy(resourceInfo, ostream);
            } else {
                copy(resourceInfo, writer);
            }
        }
    } else {
        if ((ranges == null) || (ranges.isEmpty())) {
            return;
        }
        // Partial content response.
        response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT);
        if (ranges.size() == 1) {
            Range range = (Range) ranges.elementAt(0);
            response.addHeader("Content-Range", "bytes " + range.start + "-" + range.end + "/" + range.length);
            response.setContentLength((int) (range.end - range.start + 1));
            if (contentType != null) {
                if (debug > 0) {
                    log("DefaultServlet.serveFile:  contentType='" + contentType + "'");
                }
                response.setContentType(contentType);
            }
            if (content) {
                try {
                    response.setBufferSize(output);
                } catch (IllegalStateException e) {
                // Silent catch
                }
                if (ostream != null) {
                    copy(resourceInfo, ostream, range);
                } else {
                    copy(resourceInfo, writer, range);
                }
            }
        } else {
            response.setContentType("multipart/byteranges; boundary=" + mimeSeparation);
            if (content) {
                try {
                    response.setBufferSize(output);
                } catch (IllegalStateException e) {
                // Silent catch
                }
                if (ostream != null) {
                    copy(resourceInfo, ostream, ranges.elements(), contentType);
                } else {
                    copy(resourceInfo, writer, ranges.elements(), contentType);
                }
            }
        }
    }
}
