// protected abstract String getCommonUnit();
public RuleResult applyTo(IModelElement object) {
    RuleResult result = null;
    RuleResult Oldresult = null;
    if (object instanceof Equation) {
        setEquation((Equation) object);
        interpreter = ModelEnv.getInstanceFor(getEquation()).getInterpreter();
        // .getChildren().iterator();
        Iterator<Field> iterator = getEquation().iterator();
        Iterator<Field> typeCheckiterator = getEquation().iterator();
        Field field = null;
        boolean bTest = false;
        while (// ((null == result) ||
        iterator.hasNext() && ((null == result) || (result instanceof IRule.Success))) {
            bTest = false;
            // this was dded to avoid the crash due to moving of equation
            if (typeCheckiterator.hasNext() && !(typeCheckiterator.next() instanceof Field)) {
                return result;
            }
            field = iterator.next();
            while (field.getText().isEmpty() && iterator.hasNext()) {
                // if field is empty then put old result in result
                result = Oldresult;
                // continue;
                field = iterator.next();
            }
            if (!(field.getText().isEmpty())) {
                result = tokenCheck(field);
                // update Old result with the latest result
                Oldresult = result;
            } else {
                result = Oldresult;
                continue;
            }
            // Reset the failure result it unit is of % type and there are still some elements in the equation
            if (result instanceof IRule.Failure && iterator.hasNext() && !(bTest)) {
                // get current unit
                ModelElementData modelData = interpreter.getModelData(field.getText());
                if (null != modelData) {
                    ITagComponent referencedTagComponent = (ITagComponent) modelData.getModel();
                    String currentUnit = referencedTagComponent.getUnits();
                    String material = referencedTagComponent.getMaterial();
                    ;
                    if (currentUnit.trim().equals("%") || material.equals("Overall")) {
                        bTest = true;
                        result = null;
                    }
                }
            }
        // PA change Ends
        }
    }
    // String commonUnit = getCommonUnit();
    /*if(null != commonUnit)
		{
			if( !(commonUnit.isEmpty()) && commonUnit.equals("%"))
			{
				result = new IRule.Failure(getEquation(), "You can not have equations like % = % + % or % = % * %.\n Please correct your equation by making changes like % * OverAlll.");
			}
		}*/
    setAnnotation(result);
    return result;
}
