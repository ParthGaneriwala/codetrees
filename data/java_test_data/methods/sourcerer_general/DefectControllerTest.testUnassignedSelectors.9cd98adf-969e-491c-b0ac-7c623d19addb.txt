public void testUnassignedSelectors() {
    if (!testedDefectFilter) {
        testDefectFilter();
    }
    UnassignedUserSelector noUser = UnassignedUserSelector.getInstance();
    UnassignedProductSelector noProduct = UnassignedProductSelector.getInstance();
    UnassignedModuleSelector noModule = UnassignedModuleSelector.getInstance();
    UnassignedBuildSelector noBuild = UnassignedBuildSelector.getInstance();
    // toStrings
    assertEquals("Unassigned", noUser.toString());
    assertEquals("Unassigned", noProduct.toString());
    assertEquals("Unassigned", noModule.toString());
    assertEquals("Unassigned", noBuild.toString());
    // getProduct
    assertTrue(noProduct.getProduct().isNull());
    // equals
    assertTrue(noModule.equals(noModule));
    assertTrue(noBuild.equals(noBuild));
    assertFalse(noModule.equals(controller.getDefectFilter().getModuleSelector()));
    assertFalse(noBuild.equals(controller.getDefectFilter().getBuildSelector()));
    // false tests
    assertFalse(noUser.matchesUser(bunk));
    assertFalse(noProduct.matchesProduct(defect));
    assertFalse(noModule.matchesModule(defect));
    assertFalse(noBuild.matchesBuild(defect));
    // true tests
    assertTrue(noUser.matchesUser(new NullUser()));
    Defect emptyDefect = null;
    try {
        emptyDefect = new Defect("bunk", petey);
    } catch (ConstraintViolationException e) {
        fail();
    }
    assertTrue(noProduct.matchesProduct(emptyDefect));
    assertTrue(noModule.matchesModule(emptyDefect));
    assertTrue(noBuild.matchesBuild(emptyDefect));
}
