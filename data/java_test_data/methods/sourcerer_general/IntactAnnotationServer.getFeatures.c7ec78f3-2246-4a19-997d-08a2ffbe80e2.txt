public DasAnnotatedSegment getFeatures(String segmentId) throws BadReferenceObjectException, DataSourceException {
    DasAnnotatedSegment annotatedSegment = null;
    final Interactor interactor = loadInteractor(segmentId);
    int startSegment = 0;
    int endSegment = 0;
    String version = interactor.getAc();
    if (interactor instanceof Polymer) {
        Polymer polymer = (Polymer) interactor;
        final String sequence = polymer.getSequence();
        if (sequence != null && sequence.length() > 0) {
            startSegment = 1;
            endSegment = sequence.length();
            // version = polymer.getCrc64();
            version = DigestUtils.md5Hex(sequence);
        }
    }
    Collection<DasFeature> features = new ArrayList<DasFeature>(5);
    for (Component component : interactor.getActiveInstances()) {
        for (Feature feature : component.getBindingDomains()) {
            // Are we filtering on Binding domains ??
            if (isBindingSite(feature)) {
                for (Range range : feature.getRanges()) {
                    boolean hasDasFeature = false;
                    Collection<String> notes = new ArrayList<String>(2);
                    int start = 0;
                    int end = 0;
                    if (range.getFromIntervalStart() > 0) {
                        // we have a positional feature with specific boundaries
                        hasDasFeature = true;
                        start = range.getFromIntervalStart();
                        end = range.getToIntervalEnd();
                        if (range.getFromIntervalStart() != range.getFromIntervalEnd()) {
                            notes.add("Warning: the start range is in fact " + range.getFromIntervalStart() + "-" + range.getFromIntervalEnd());
                        }
                        if (range.getToIntervalStart() != range.getToIntervalEnd()) {
                            notes.add("Warning: the end range is in fact " + range.getToIntervalStart() + "-" + range.getToIntervalEnd());
                        }
                    } else if (range.getFromCvFuzzyType().isCTerminal() || range.getFromCvFuzzyType().isNTerminal()) {
                        // We have a positional feature at the beginning or the end of the polymer's sequence
                        hasDasFeature = true;
                        // initialize with N-terminal
                        start = 1;
                        end = 1;
                        if (range.getFromCvFuzzyType().isCTerminal()) {
                            start = end = endSegment;
                        }
                    }
                    if (hasDasFeature) {
                        final String note = generatePartnerNote(component, feature);
                        if (note != null) {
                            notes.add(note);
                        }
                        final String featureType = feature.getCvFeatureType().getShortLabel();
                        final URL interactionURL = buildInteractionURL(component.getInteraction());
                        String featureId = "Binding_domain_" + feature.getAc() + "_range_" + range.getAc();
                        features.add(createFeature(component.getInteraction(), featureId, range.toString(), "SO:0001091", "inferred from direct assay (ECO:0000002)", featureType, "IntAct", "IntAct", start, end, notes, interactionURL, (interactionURL == null ? null : interactionURL.toString())));
                    }
                }
            // ranges
            }
        // is the feature a binding site ?
        }
    // features
    }
    // components
    addNonPotisionalFeature(features, interactor);
    annotatedSegment = new DasAnnotatedSegment(segmentId, startSegment, endSegment, version, interactor.getShortLabel(), features);
    return annotatedSegment;
}
