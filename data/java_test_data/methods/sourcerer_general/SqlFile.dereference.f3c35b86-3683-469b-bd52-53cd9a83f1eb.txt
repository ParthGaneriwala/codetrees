private String dereference(String inString, boolean permitAlias) throws SqlToolError {
    /* TODO:  Rewrite using java.util.regex. */
    String varName, varValue;
    StringBuffer expandBuffer = new StringBuffer(inString);
    // begin and end of name.  end really 1 PAST name
    int b, e;
    int iterations;
    if (permitAlias && inString.trim().charAt(0) == '/') {
        int slashIndex = inString.indexOf('/');
        e = SqlFile.pastName(inString.substring(slashIndex + 1), 0);
        // In this case, e is the exact length of the var name.
        if (e < 1) {
            throw new SqlToolError(rb.getString(SqltoolRB.PLALIAS_MALFORMAT));
        }
        varName = inString.substring(slashIndex + 1, slashIndex + 1 + e);
        varValue = (String) userVars.get(varName);
        if (varValue == null) {
            throw new SqlToolError(rb.getString(SqltoolRB.PLVAR_UNDEFINED, varName));
        }
        expandBuffer.replace(slashIndex, slashIndex + 1 + e, (String) userVars.get(varName));
    }
    String s;
    boolean permitUnset;
    // Permit unset with:     ${:varname}
    // Prohibit unset with :  ${varnam}
    iterations = 0;
    while (true) {
        s = expandBuffer.toString();
        b = s.indexOf("${");
        if (b < 0) {
            // No more unexpanded variable uses
            break;
        }
        e = s.indexOf('}', b + 2);
        if (e == b + 2) {
            throw new SqlToolError(rb.getString(SqltoolRB.SYSPROP_EMPTY));
        }
        if (e < 0) {
            throw new SqlToolError(rb.getString(SqltoolRB.SYSPROP_UNTERMINATED));
        }
        permitUnset = (s.charAt(b + 2) == ':');
        varName = s.substring(b + (permitUnset ? 3 : 2), e);
        if (iterations++ > 10000)
            throw new SqlToolError(rb.getString(SqltoolRB.VAR_INFINITE, varName));
        varValue = System.getProperty(varName);
        if (varValue == null) {
            if (permitUnset) {
                varValue = "";
            } else {
                throw new SqlToolError(rb.getString(SqltoolRB.SYSPROP_UNDEFINED, varName));
            }
        }
        expandBuffer.replace(b, e + 1, varValue);
    }
    iterations = 0;
    while (true) {
        s = expandBuffer.toString();
        b = s.indexOf("*{");
        if (b < 0) {
            // No more unexpanded variable uses
            break;
        }
        e = s.indexOf('}', b + 2);
        if (e == b + 2) {
            throw new SqlToolError(rb.getString(SqltoolRB.PLVAR_NAMEEMPTY));
        }
        if (e < 0) {
            throw new SqlToolError(rb.getString(SqltoolRB.PLVAR_UNTERMINATED));
        }
        permitUnset = (s.charAt(b + 2) == ':');
        varName = s.substring(b + (permitUnset ? 3 : 2), e);
        if (iterations++ > 10000)
            throw new SqlToolError(rb.getString(SqltoolRB.VAR_INFINITE, varName));
        // TODO:  Use a smarter algorithm to handle (or prohibit)
        // recursion without this clumsy detection tactic.
        varValue = (String) userVars.get(varName);
        if (varValue == null) {
            if (permitUnset) {
                varValue = "";
            } else {
                throw new SqlToolError(rb.getString(SqltoolRB.PLVAR_UNDEFINED, varName));
            }
        }
        expandBuffer.replace(b, e + 1, varValue);
    }
    return expandBuffer.toString();
}
