public static void main(String[] a) throws Exception {
    // default number of threads to create if none is specified at command line
    int n = 15000;
    multiple = 1;
    if (a.length > 0) {
        n = Integer.parseInt(a[0]);
    }
    if (a.length == 3) {
        repeat = Integer.parseInt(a[1]);
        pause_before = Integer.parseInt(a[2]);
    }
    StringBuffer sb = new StringBuffer(CR);
    sb.append(bundle.getString("msg.01")).append(n).append(CR);
    sb.append(bundle.getString("msg.02")).append(CR).append(CR);
    sb.append(bundle.getString("msg.instruction")).append(CR).append(CR);
    sb.append(bundle.getString("msg.instruction2")).append(CR);
    sb.append(bundle.getString("msg.instruction3")).append(CR);
    sb.append(bundle.getString("msg.instruction4")).append(CR);
    print(sb.toString());
    // factor used to print the number of threads created and processed
    if (n > 99) {
        multiple = n / 10;
    } else {
        multiple = n / 5;
    }
    sb = new StringBuffer(bundle.getString("msg.04"));
    sb.append(CR).append(bundle.getString("msg.05")).append(CR);
    print(sb.toString());
    if (pause_before > 0) {
        Thread.sleep(1000 * pause_before);
    }
    // all threads must start to work when all threads objects is ready to run
    CyclicBarrier barrier = new CyclicBarrier(n);
    Thread[] allthreads = new Thread[n];
    String warm = bundle.getString("warm");
    String alloc = bundle.getString("alloc");
    for (int i = 0; i < n; i++) {
        String name = "CapacityThread__" + i;
        Thread t1 = new Thread(new ThreadTest(name, barrier), name);
        if (i % multiple == 0 || i + 1 == n) {
            print(warm + (i + 1) + alloc);
        }
        allthreads[i] = t1;
    }
    print((new StringBuffer(CR).append(bundle.getString("msg.06")).append(CR).append(bundle.getString("msg.07")).append(CR)).toString());
    int created = 0;
    String threadmessage = bundle.getString("threads_concurrent");
    try {
        for (int i = 0; i < n; i++) {
            Thread t = (Thread) allthreads[i];
            t.start();
            created++;
            // System.out.print(i + " ");
            if (i % multiple == 0 || i + 1 == n) {
                print((i + 1) + threadmessage);
            }
        }
        print((new StringBuffer(CR).append(bundle.getString("msg.08")).append(CR)).toString());
        for (int i = 0; i < n; i++) {
            Thread t = (Thread) allthreads[i];
            t.join();
        }
        print((new StringBuffer(CR).append(bundle.getString("msg.08")).append(CR).append(bundle.getString("msg.09")).append(n).append(bundle.getString("msg.10")).append(CR)).toString());
        ThreadTest.cont = 0;
    } catch (OutOfMemoryError oome) {
        allthreads = null;
        System.gc();
        printStackTrace(oome);
        print((new StringBuffer(CR).append(bundle.getString("err01")).append(CR).append(bundle.getString("err02")).append(created).append(" threads").append(CR)).toString());
    }
}
