// $ANTLR start "expression"
public final Compila_doresParser.expression_return expression() throws RecognitionException {
    Compila_doresParser.expression_return retval = new Compila_doresParser.expression_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token OR133 = null;
    Compila_doresParser.expression1_return expression1132 = null;
    Compila_doresParser.expression1_return expression1134 = null;
    CommonTree OR133_tree = null;
    try {
        // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:216:2: ( expression1 ( OR expression1 )* )
        // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:216:4: expression1 ( OR expression1 )*
        {
            root_0 = (CommonTree) adaptor.nil();
            pushFollow(FOLLOW_expression1_in_expression1454);
            expression1132 = expression1();
            state._fsp--;
            adaptor.addChild(root_0, expression1132.getTree());
            // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:216:16: ( OR expression1 )*
            loop32: do {
                int alt32 = 2;
                int LA32_0 = input.LA(1);
                if ((LA32_0 == OR)) {
                    alt32 = 1;
                }
                switch(alt32) {
                    case 1:
                        // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:216:17: OR expression1
                        {
                            OR133 = (Token) match(input, OR, FOLLOW_OR_in_expression1457);
                            OR133_tree = (CommonTree) adaptor.create(OR133);
                            root_0 = (CommonTree) adaptor.becomeRoot(OR133_tree, root_0);
                            pushFollow(FOLLOW_expression1_in_expression1460);
                            expression1134 = expression1();
                            state._fsp--;
                            adaptor.addChild(root_0, expression1134.getTree());
                        }
                        break;
                    default:
                        break loop32;
                }
            } while (true);
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
