private void genAndWriteImage(String code, HttpServletRequest request, HttpServletResponse response) {
    response.setContentType("image/jpeg");
    response.setHeader("Pragma", "No-cache");
    response.setHeader("Cache-Control", "no-cache");
    response.setDateHeader("Expires", 0);
    int width = 15 * codeLength;
    int height = 20;
    BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
    Graphics g = image.getGraphics();
    Random random = new Random();
    g.setColor(getRandColor(200, 250));
    g.fillRect(0, 0, width, height);
    g.setFont(new Font("Times New Roman", Font.PLAIN, 18));
    g.setColor(getRandColor(160, 200));
    for (int i = 0; i < 155; i++) {
        int x = random.nextInt(width);
        int y = random.nextInt(height);
        int xl = random.nextInt(12);
        int yl = random.nextInt(12);
        g.drawLine(x, y, x + xl, y + yl);
    }
    for (int i = 0; i < this.codeLength; i++) {
        String rand = code.substring(i, i + 1);
        g.setColor(new Color(20 + random.nextInt(60), 20 + random.nextInt(120), 20 + random.nextInt(180)));
        g.drawString(rand, 13 * i + 6, 16);
    }
    g.dispose();
    request.getSession().setAttribute(SESSION_ATT_NAME, code);
    ServletOutputStream outStream;
    try {
        outStream = response.getOutputStream();
        JPEGImageEncoder encoder = JPEGCodec.createJPEGEncoder(outStream);
        encoder.encode(image);
        outStream.close();
    } catch (IOException e) {
        e.printStackTrace();
    }
}
