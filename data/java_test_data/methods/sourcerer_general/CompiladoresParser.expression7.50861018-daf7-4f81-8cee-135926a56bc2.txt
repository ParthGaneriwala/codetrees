// $ANTLR start "expression7"
public final CompiladoresParser.expression7_return expression7() throws RecognitionException {
    CompiladoresParser.expression7_return retval = new CompiladoresParser.expression7_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token LPAR135 = null;
    Token RPAR137 = null;
    CompiladoresParser.expression_return expression136 = null;
    CompiladoresParser.expression8_return expression8138 = null;
    CommonTree LPAR135_tree = null;
    CommonTree RPAR137_tree = null;
    RewriteRuleTokenStream stream_RPAR = new RewriteRuleTokenStream(adaptor, "token RPAR");
    RewriteRuleTokenStream stream_LPAR = new RewriteRuleTokenStream(adaptor, "token LPAR");
    RewriteRuleSubtreeStream stream_expression = new RewriteRuleSubtreeStream(adaptor, "rule expression");
    RewriteRuleSubtreeStream stream_expression8 = new RewriteRuleSubtreeStream(adaptor, "rule expression8");
    try {
        dbg.enterRule(getGrammarFileName(), "expression7");
        if (getRuleLevel() == 0) {
            dbg.commence();
        }
        incRuleLevel();
        dbg.location(178, 1);
        try {
            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:178:15: ( ( LPAR expression RPAR ) -> expression | expression8 -> expression8 )
            int alt34 = 2;
            try {
                dbg.enterDecision(34);
                int LA34_0 = input.LA(1);
                if ((LA34_0 == LPAR)) {
                    alt34 = 1;
                } else if (((LA34_0 >= TRUE && LA34_0 <= FALSE) || (LA34_0 >= ID && LA34_0 <= INTEGER))) {
                    alt34 = 2;
                } else {
                    NoViableAltException nvae = new NoViableAltException("", 34, 0, input);
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
            } finally {
                dbg.exitDecision(34);
            }
            switch(alt34) {
                case 1:
                    dbg.enterAlt(1);
                    // /home/CIN/fmm/Desktop/grammar/Compiladores.g:178:17: ( LPAR expression RPAR )
                    {
                        dbg.location(178, 17);
                        // /home/CIN/fmm/Desktop/grammar/Compiladores.g:178:17: ( LPAR expression RPAR )
                        dbg.enterAlt(1);
                        // /home/CIN/fmm/Desktop/grammar/Compiladores.g:178:18: LPAR expression RPAR
                        {
                            dbg.location(178, 18);
                            LPAR135 = (Token) match(input, LPAR, FOLLOW_LPAR_in_expression71486);
                            stream_LPAR.add(LPAR135);
                            dbg.location(178, 23);
                            pushFollow(FOLLOW_expression_in_expression71488);
                            expression136 = expression();
                            state._fsp--;
                            stream_expression.add(expression136.getTree());
                            dbg.location(178, 34);
                            RPAR137 = (Token) match(input, RPAR, FOLLOW_RPAR_in_expression71490);
                            stream_RPAR.add(RPAR137);
                        }
                        // AST REWRITE
                        // elements: expression
                        // token labels:
                        // rule labels: retval
                        // token list labels:
                        // rule list labels:
                        // wildcard labels:
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.tree : null);
                        root_0 = (CommonTree) adaptor.nil();
                        // 178:40: -> expression
                        {
                            dbg.location(178, 43);
                            adaptor.addChild(root_0, stream_expression.nextTree());
                        }
                        retval.tree = root_0;
                    }
                    break;
                case 2:
                    dbg.enterAlt(2);
                    // /home/CIN/fmm/Desktop/grammar/Compiladores.g:179:7: expression8
                    {
                        dbg.location(179, 7);
                        pushFollow(FOLLOW_expression8_in_expression71503);
                        expression8138 = expression8();
                        state._fsp--;
                        stream_expression8.add(expression8138.getTree());
                        // AST REWRITE
                        // elements: expression8
                        // token labels:
                        // rule labels: retval
                        // token list labels:
                        // rule list labels:
                        // wildcard labels:
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.tree : null);
                        root_0 = (CommonTree) adaptor.nil();
                        // 179:19: -> expression8
                        {
                            dbg.location(179, 22);
                            adaptor.addChild(root_0, stream_expression8.nextTree());
                        }
                        retval.tree = root_0;
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
        }
        dbg.location(180, 4);
    } finally {
        dbg.exitRule(getGrammarFileName(), "expression7");
        decRuleLevel();
        if (getRuleLevel() == 0) {
            dbg.terminate();
        }
    }
    return retval;
}
