public static ArrayList<String> EvaluarOperandos(String prevList) throws ExceptionErrorInStatement {
    ArrayList<String> operandos = new ArrayList<String>(0);
    String temp = "";
    String op = "";
    boolean addable = true;
    boolean prerun = true;
    String preOp;
    for (int a = 0; a < prevList.length(); a++) {
        prerun = true;
        try {
            if (prevList.substring(a, a + 2).equals("- ") || prevList.substring(a, a + 2).equals("-(")) {
                if (!backSearch(temp)) {
                    throw new ExceptionErrorInStatement();
                }
                operandos.add("-");
                addable = false;
            }
            preOp = prevList.substring(a, a + 3);
            if ((preOp.equals("if ")) || (preOp.equals("or ")) || (preOp.equals("if(")) || (preOp.equals("or("))) {
                if (backSearch(temp)) {
                    operandos.add(preOp.substring(0, 2));
                    addable = false;
                    a++;
                }
            }
            preOp = prevList.substring(a, a + 3);
            if ((preOp.equals("<= ")) || (preOp.equals(">= ")) || (preOp.equals("/= ")) || (preOp.equals("<=(")) || (preOp.equals(">=(")) || (preOp.equals("/=("))) {
                if (backSearch(temp)) {
                    operandos.add(preOp.substring(0, 2));
                    addable = false;
                    a++;
                    prerun = false;
                }
            }
            preOp = prevList.substring(a, a + 4);
            if ((preOp.equals("and ")) || (preOp.equals("and("))) {
                if (backSearch(temp)) {
                    operandos.add(preOp.substring(0, 3));
                    addable = false;
                    a++;
                    a++;
                }
            }
            if ((preOp.equals("not ")) || (preOp.equals("not("))) {
                if (backSearch(temp)) {
                    operandos.add(preOp.substring(0, 3));
                    temp = temp + " 0 ";
                    addable = false;
                    a++;
                    a++;
                }
            }
            preOp = prevList.substring(a, a + 5);
            if ((preOp.equals("cond ")) || (preOp.equals("cond("))) {
                if (backSearch(temp)) {
                    operandos.add(preOp.substring(0, 4));
                    addable = false;
                    a++;
                    a++;
                    a++;
                }
            }
        } catch (IndexOutOfBoundsException e) {
        }
        op = prevList.substring(a, a + 1);
        if ((op.equals("+") || op.equals("*") || op.equals("/") || op.equals("%") || op.equals("=") || op.equals("<") || op.equals(">")) && prerun) {
            // <editor-fold defaultstate="collapsed" desc="comment">
            if (!backSearch(temp)) {
                throw new ExceptionErrorInStatement();
            }
            // </editor-fold>
            operandos.add(op);
        } else {
            if (addable) {
                temp = temp + op;
            } else {
                addable = true;
            }
        }
    }
    operandos.add(EvaluarInput(temp));
    return operandos;
}
