private void cluster(boolean state) {
    if (state == true) {
        // put the picked vertices into a new sublayout
        Collection<String> picked = ps.getPicked();
        if (picked.size() > 1) {
            Point2D center = new Point2D.Double();
            double x = 0;
            double y = 0;
            for (String vertex : picked) {
                Point2D p = clusteringLayout.transform(vertex);
                x += p.getX();
                y += p.getY();
            }
            x /= picked.size();
            y /= picked.size();
            center.setLocation(x, y);
            // String firstVertex = picked.iterator().next();
            // Point2D center = clusteringLayout.transform(firstVertex);
            Graph<String, Number> subGraph;
            try {
                subGraph = graph.getClass().newInstance();
                for (String vertex : picked) {
                    subGraph.addVertex(vertex);
                    Collection<Number> incidentEdges = graph.getIncidentEdges(vertex);
                    for (Number edge : incidentEdges) {
                        Pair<String> endpoints = graph.getEndpoints(edge);
                        if (picked.containsAll(endpoints)) {
                            // put this edge into the subgraph
                            subGraph.addEdge(edge, endpoints.getFirst(), endpoints.getSecond());
                        }
                    }
                }
                Layout<String, Number> subLayout = getLayoutFor(subLayoutType, subGraph);
                subLayout.setInitializer(vv.getGraphLayout());
                subLayout.setSize(subLayoutSize);
                clusteringLayout.put(subLayout, center);
                vv.setGraphLayout(clusteringLayout);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    } else {
        // remove all sublayouts
        this.clusteringLayout.removeAll();
        vv.setGraphLayout(clusteringLayout);
    }
}
