private void build() {
    removeAll();
    dataModel.sortChildGroups();
    dataModel.sortChildSkills();
    setLayout(new GridBagLayout());
    int y = 0;
    final Insets insets = new Insets(1, 2, 1, 2);
    for (WeightedChildSkill wcs : dataModel.getChildSkills()) {
        WeightedChildSkillPanel wcsPanel = new WeightedChildSkillPanel(wcs);
        wcsPanel.setBorder(BorderFactory.createLineBorder(Color.black, 1));
        add(wcsPanel, new GridBagConstraints(0, y, 1, 1, 0, 0, GridBagConstraints.NORTH, GridBagConstraints.HORIZONTAL, insets, 0, 0));
        wcsPanel.addDeleteListener(this);
        individualPanels.put(wcs.getSkillName(), wcsPanel);
        y++;
    }
    for (ChildSkillGroup group : dataModel.getChildGroups()) {
        ChildSkillGroupPanel groupPanel = null;
        if (group instanceof WeightedChildSkillGroup) {
            groupPanel = new WeightedChildSkillGroupPanel((WeightedChildSkillGroup) group);
        } else if (group instanceof ExclusiveChildSkillGroup) {
            groupPanel = new ExclusiveChildSkillGroupPanel((ExclusiveChildSkillGroup) group);
        }
        groupPanels.put(group.getName(), groupPanel);
        groupPanel.setBorder(BorderFactory.createLineBorder(Color.black, 1));
        add(groupPanel, new GridBagConstraints(0, y, 1, 1, 0, 0, GridBagConstraints.NORTH, GridBagConstraints.HORIZONTAL, insets, 0, 0));
        groupPanel.addDeleteListener(this);
        y++;
    }
    // padding label, to absorb any left over space
    add(new JLabel(" "), new GridBagConstraints(0, y, 1, 1, 1.0, 1.0, GridBagConstraints.CENTER, GridBagConstraints.BOTH, insets, 0, 0));
}
