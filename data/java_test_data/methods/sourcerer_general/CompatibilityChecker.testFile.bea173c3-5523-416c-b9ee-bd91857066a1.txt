public static String testFile(File file, ArrayList<Node> nodes) throws FileNotFoundException {
    // get extension of file
    String extension = null;
    String nodeString = "";
    int temp = file.getName().lastIndexOf(".");
    if (temp > 0) {
        extension = file.getName().substring(temp);
    }
    // build hashtable
    Hashtable<String, String> tags = new Hashtable<String, String>(10);
    if (extension != null && extension.toLowerCase().equals(".condor")) {
        // Only supporting Grid universe
        tags.put("clockday", "clockday");
        tags.put("vanilla", "vanilla");
        tags.put("standard", "standard");
        // enviroment variables
        tags.put("_condor_scratch_dir", "_condor_scratch_dir");
        tags.put("_condor_slot", "_condor_slot");
        tags.put("x509_user_proxy", "x509_user_proxy");
        tags.put("log", "log");
        // ClassAd tags
        tags.put("diskusage", "diskusage");
        tags.put("kflops", "kflops");
        tags.put("loadavg", "loadavg");
        tags.put("keyboardidle", "keyboardidle");
        tags.put("mytype", "mytype");
        tags.put("targettype", "targettype");
        // Condor-C Grid tags not needed/supported
        tags.put("grid_resource", "grid_resource");
        // Other unsupported tags
        tags.put("notification", "notification");
        // assuming that we specify default behavior, we do not want the user to specify this
        tags.put("when_to_transfer_output", "when_to_transfer_output");
    } else if (extension != null && extension.toLowerCase().equals(".dag")) {
        tags.put("abort-dag-on", "abort-dag-on");
        tags.put("retry", "retry");
        tags.put("vars", "vars");
        tags.put("data", "data");
        tags.put("subdag", "subdag");
        // Scan all nodes
        int i;
        for (i = 0; i < nodes.size(); i++) {
            nodeString += System.getProperty("line.separator") + testFile(new File(GlobalVar.getDagDirectory() + nodes.get(i).getFile(0)), null);
        }
    } else {
    }
    // scan through file
    Scanner sc = new Scanner(file);
    ArrayList<String> report = new ArrayList<String>();
    String str = null;
    try {
        while (sc.hasNext()) {
            str = sc.next();
            if (str.startsWith("#")) {
                sc.nextLine().toLowerCase();
            } else {
                if (str.equals(tags.get(str))) {
                    report.add(str);
                }
            }
        }
    } catch (Exception e) {
        e.printStackTrace();
    }
    String returnStr = "In file " + file.getName() + ":\n";
    for (int i = 0; i < report.size(); i++) {
        returnStr += report.get(i) + "\n";
    }
    return returnStr + nodeString;
}
