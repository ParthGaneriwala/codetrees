private Temp munchExp(Exp e) {
    if (e instanceof MEM) {
        MEM mem1 = (MEM) e;
        if (mem1.exp instanceof BINOP) {
            BINOP binop = (BINOP) mem1.exp;
            if (binop.right instanceof CONST) {
                Temp r = new Temp();
                CONST constant = (CONST) binop.right;
                Temp t1 = munchExp(binop.left);
                emit(new Assem.OPER("LOAD `d0 <- M[`s0 + " + constant.value + "]\n", L(r, null), L(t1, null), null));
                return r;
            } else if (binop.left instanceof CONST) {
                Temp r = new Temp();
                CONST constant = (CONST) binop.left;
                Temp t1 = munchExp(binop.right);
                emit(new Assem.OPER("LOAD `d0 <- M[ `s0 +" + constant.value + "]\n", L(r, null), L(t1, null), null));
                return r;
            }
        // fim if..else
        } else if (mem1.exp instanceof CONST) {
            Temp r = new Temp();
            CONST constant = (CONST) mem1.exp;
            emit(new Assem.OPER("LOAD `d0 <- M[r0 +" + constant.value + "]\n", L(r, null), null, null));
            return r;
        }
    } else if (e instanceof MEM) {
        Temp r = new Temp();
        MEM mem = (MEM) e;
        Temp t1 = munchExp(mem.exp);
        emit(new Assem.OPER("LOAD `d0 <- M[`s0 + r0]\n", L(r, null), L(t1, null), null));
        return r;
    } else if (e instanceof BINOP) {
        BINOP binop = (BINOP) e;
        if (binop.right instanceof CONST) {
            Temp r = new Temp();
            CONST constant = (CONST) binop.right;
            Temp t1 = munchExp(binop.left);
            switch(binop.binop) {
                case BINOP.PLUS:
                    emit(new Assem.OPER("ADDI `d0 <- `s0 + " + constant.value + "\n", L(r, null), L(t1, null), null));
                    break;
                case BINOP.MINUS:
                    emit(new Assem.OPER("SUBI `d0 <- `s0 - " + constant.value + "\n", L(r, null), L(t1, null), null));
                    break;
                case BINOP.MUL:
                    emit(new Assem.OPER("MUL `d0 <- `s0 * " + constant.value + "\n", L(r, null), L(t1, null), null));
                    break;
                case BINOP.DIV:
                    emit(new Assem.OPER("DIV `d0 <- `s0 / " + constant.value + "\n", L(r, null), L(t1, null), null));
                    break;
            }
            return r;
        } else if (binop.left instanceof CONST) {
            Temp r = new Temp();
            CONST constant = (CONST) binop.left;
            Temp t1 = munchExp(binop.right);
            switch(binop.binop) {
                case BINOP.PLUS:
                    emit(new Assem.OPER("ADDI `d0 <- `s0 + " + constant.value + "\n", L(r, null), L(t1, null), null));
                    break;
                case BINOP.MINUS:
                    emit(new Assem.OPER("SUBI `d0 <- `s0 - " + constant.value + "\n", L(r, null), L(t1, null), null));
                    break;
                case BINOP.MUL:
                    emit(new Assem.OPER("MUL `d0 <- `s0 * " + constant.value + "\n", L(r, null), L(t1, null), null));
                    break;
                case BINOP.DIV:
                    emit(new Assem.OPER("DIV `d0 <- `s0 / " + constant.value + "\n", L(r, null), L(t1, null), null));
                    break;
            }
            return r;
        } else {
            Temp r = new Temp();
            Temp t1, t2;
            t1 = munchExp(binop.left);
            t2 = munchExp(binop.right);
            switch(binop.binop) {
                case BINOP.PLUS:
                    emit(new Assem.OPER("ADD `d0 <- `s0  + `s1\n", L(r, null), L(t1, L(t2, null)), null));
                    break;
                case BINOP.MINUS:
                    emit(new Assem.OPER("SUB `d0 <- `s0 - `s1\n", L(r, null), L(t1, L(t2, null)), null));
                    break;
                case BINOP.MUL:
                    emit(new Assem.OPER("MUL `d0 <- `s0 * `s1\n", L(r, null), L(t1, L(t2, null)), null));
                    break;
                case BINOP.DIV:
                    emit(new Assem.OPER("DIV `d0 <- `s0 / `s1\n", L(r, null), L(t1, L(t2, null)), null));
                    break;
            }
            return r;
        }
    } else if (e instanceof CONST) {
        Temp r = new Temp();
        CONST constant = (CONST) e;
        emit(new Assem.OPER("ADDI `d0 <- r0 + " + constant.value + "\n", L(r, null), null, null));
        return r;
    } else if (e instanceof TEMP) {
        TEMP temp = (TEMP) e;
        return temp.temp;
    } else if (e instanceof CALL) {
        CALL c = (CALL) e;
        Temp r = new Temp();
        Temp t1 = munchExp(c.func);
        TempList tempList = null;
        Exp head = c.args.head;
        ExpList tail = (ExpList) c.args.tail;
        while (head != null) {
            tempList = new TempList(munchExp(head), tempList);
            if (tail != null) {
                head = tail.head;
                tail = (ExpList) tail.tail;
            } else
                head = null;
        }
        // revertendo lista
        TempList auxList = null;
        Temp headTemp = tempList.head;
        TempList tailTemp = (TempList) tempList.tail;
        while (headTemp != null) {
            auxList = new TempList(headTemp, auxList);
            if (tailTemp != null) {
                headTemp = tailTemp.head;
                tailTemp = (TempList) tailTemp.tail;
            } else
                headTemp = null;
        }
        tempList = auxList;
        emit(new Assem.OPER("CALL `s0\n", L(frame.RV(), null), L(t1, tempList), null));
        return r;
    }
    return null;
}
