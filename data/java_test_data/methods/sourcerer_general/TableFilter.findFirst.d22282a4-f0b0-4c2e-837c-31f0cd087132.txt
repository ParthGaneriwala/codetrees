boolean findFirst(Session session) throws HsqlException {
    nonJoinIsNull = false;
    isCurrentOuter = false;
    if (filterIndex == null) {
        filterIndex = filterTable.getPrimaryIndex();
    }
    if (isMultiFindFirst) {
        boolean convertible = true;
        int[] types = filterTable.getColumnTypes();
        currentJoinData = filterTable.getEmptyRowData();
        for (int i = 0; i < findFirstExpressions.length; i++) {
            Expression e = findFirstExpressions[i];
            if (e != null) {
                Object value = e.getValue(session);
                if (Column.compareToTypeRange(value, types[i]) != 0) {
                    convertible = false;
                    break;
                }
                value = Column.convertObject(value, types[i]);
                currentJoinData[i] = e.getValue(session, types[i]);
            }
        }
        it = convertible ? filterIndex.findFirstRow(session, currentJoinData) : filterIndex.emptyIterator();
        if (!it.hasNext()) {
            ArrayUtil.clearArray(ArrayUtil.CLASS_CODE_OBJECT, currentJoinData, 0, currentJoinData.length);
        }
    } else if (eStart == null) {
        it = eEnd == null ? filterIndex.firstRow(session) : filterIndex.findFirstRowNotNull(session);
    } else {
        Object value = eStart.getArg2().getValue(session);
        int valuetype = eStart.getArg2().getDataType();
        int targettype = eStart.getArg().getDataType();
        it = getFirstIterator(session, eStart.getType(), value, valuetype, filterIndex, targettype);
    }
    while (true) {
        currentRow = it.next();
        if (currentRow == null) {
            break;
        }
        currentData = currentRow.getData();
        if (!(eEnd == null || eEnd.testCondition(session))) {
            break;
        }
        if (eAnd == null || eAnd.testCondition(session)) {
            return true;
        }
    }
    currentRow = null;
    currentData = emptyData;
    return false;
}
