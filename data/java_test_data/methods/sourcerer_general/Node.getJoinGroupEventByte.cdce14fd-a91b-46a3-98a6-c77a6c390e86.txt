public byte[] getJoinGroupEventByte(int eventoffset) {
    ArrayList<NodeJoinGroupEvent> al1 = new ArrayList<NodeJoinGroupEvent>();
    ArrayList<NodeJoinGroupEvent> al2 = new ArrayList<NodeJoinGroupEvent>();
    int sum = groupEventList.size();
    for (int i = 0; i < sum; i++) {
        NodeJoinGroupEvent ge = groupEventList.get(0);
        if (ge.eventCount <= eventoffset) {
            groupEventList.remove(0);
        } else {
            break;
        }
    }
    for (int i = 0; i < groupEventList.size(); i++) {
        NodeJoinGroupEvent ge = groupEventList.get(i);
        if (ge.isJoin) {
            al1.add(ge);
        } else {
            al2.add(ge);
        }
    }
    groupEventByte = new byte[6 + 16 * (al1.size() + al2.size())];
    int offset = 0;
    peer.tools.ByteIntSwitch.toByteArray(eventCount, groupEventByte, 0);
    offset += 4;
    groupEventByte[offset] = (byte) al1.size();
    offset += 1;
    for (int i = 0; i < al1.size(); i++) {
        NodeJoinGroupEvent ge = al1.get(i);
        ge.toString();
        System.arraycopy(ge.mdb.md, 0, groupEventByte, offset, 16);
        offset += 16;
    // Config.println("����㲥��"+tools.Pmd52f.byteArrayToHexString(ge.mdb.md));
    }
    groupEventByte[offset] = (byte) al2.size();
    offset += 1;
    for (int i = 0; i < al2.size(); i++) {
        NodeJoinGroupEvent ge = al2.get(i);
        System.arraycopy(ge.mdb.md, 0, groupEventByte, offset, 16);
        offset += 16;
    // Config.println("�˳��㲥��"+tools.Pmd52f.byteArrayToHexString(ge.mdb.md));
    }
    haveNewEvent = false;
    return groupEventByte;
}
