private Expression readTrimExpression() throws HsqlException {
    read();
    readThis(Expression.OPEN);
    String type = sToken;
    if (Expression.SQL_TRIM_SPECIFICATION.contains(type)) {
        read();
    } else {
        type = Token.T_BOTH;
    }
    String trimstr;
    if (sToken.length() == 1) {
        trimstr = sToken;
        read();
    } else {
        trimstr = " ";
    }
    readThis(Expression.FROM);
    Expression trim = new Expression(Types.CHAR, trimstr);
    Expression leading;
    Expression trailing;
    if (type.equals(Token.T_LEADING)) {
        leading = new Expression(true);
        trailing = new Expression(false);
    } else if (type.equals(Token.T_TRAILING)) {
        leading = new Expression(false);
        trailing = new Expression(true);
    } else {
        leading = trailing = new Expression(true);
    }
    // name argument is OK for now for CHECK constraints
    Function f = new Function(Token.T_TRIM, "org.hsqldb.Library.trim", false);
    f.setArgument(0, readOr());
    f.setArgument(1, trim);
    f.setArgument(2, leading);
    f.setArgument(3, trailing);
    readThis(Expression.CLOSE);
    return new Expression(f);
}
