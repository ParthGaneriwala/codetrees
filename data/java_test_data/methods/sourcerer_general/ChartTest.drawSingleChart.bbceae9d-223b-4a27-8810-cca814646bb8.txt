/*
	public CategoryDataset createMyDataSet(ArrayList<ArrayList<Float>> wholeList, int docNum, int termNum){
		DefaultCategoryDataset dataset = new DefaultCategoryDataset();
		for (int i = 0; i < docNum; i++){
			Integer docNo = new Integer(i);
			ArrayList<Float> tempList = wholeList.get(i);
			for (int j = 0; j < tempList.size(); j++){
				Integer termNo = new Integer(j);
				dataset.addValue(tempList.get(j), termNo.toString(), docNo.toString());
			}
		}
		return dataset;
	}*/
public void drawSingleChart(ArrayList<Float> ratioList, ArrayList<String> termList, float thold, String restID) {
    DefaultCategoryDataset dataset = new DefaultCategoryDataset();
    for (int i = 0; i < termList.size(); i++) {
        if (ratioList.get(i) >= thold) {
            dataset.addValue(ratioList.get(i), termList.get(i), restID);
        } else {
            dataset.addValue(0, termList.get(i), restID);
        }
    }
    JFreeChart chart = ChartFactory.createBarChart3D("Histogram of " + restID, "Term", "Term Frequency Ratio", dataset, PlotOrientation.VERTICAL, true, false, false);
    Font font = new Font("Arial", Font.HANGING_BASELINE, 20);
    TextTitle title = new TextTitle("Histogram Test");
    LegendTitle legend = chart.getLegend();
    legend.setItemFont(new Font("Arial", Font.BOLD, 16));
    CategoryPlot plot = (CategoryPlot) chart.getPlot();
    CategoryAxis cateaxis = plot.getDomainAxis();
    cateaxis.setLabelFont(new Font("Arial", Font.BOLD, 16));
    cateaxis.setTickLabelFont(new Font("Arial", Font.BOLD, 16));
    NumberAxis numaxis = (NumberAxis) plot.getRangeAxis();
    numaxis.setLabelFont(new Font("Arial", Font.BOLD, 16));
    chart.setTitle(title);
    FileOutputStream fosJpg = null;
    try {
        fosJpg = new FileOutputStream("D:\\test.jpg");
        ChartUtilities.writeChartAsJPEG(fosJpg, 1, chart, 1600, 1200, null);
    // ChartUtilities.writeChartAsJPEG(out, quality, chart, width, height);
    } catch (FileNotFoundException e) {
        e.printStackTrace();
    } catch (IOException e) {
        e.printStackTrace();
    } finally {
        try {
            fosJpg.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    System.out.println("drawing is successful!");
}
