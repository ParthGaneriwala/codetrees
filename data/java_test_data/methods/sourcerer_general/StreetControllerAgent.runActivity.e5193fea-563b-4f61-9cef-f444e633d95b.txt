public void runActivity(Body b) {
    double time = 0.0;
    Service service = new Service(b);
    if (!initialized) {
        service.blockingServeOldest();
    }
    rebuild();
    Destination r = null;
    Event source;
    // first we empty the RequestQueue
    // int id,int position,String name,int firstDelay
    // Car kdvu = new Car(2000,0,"MiCarro",300);
    FileOutputStream out = null;
    try {
        out = new FileOutputStream("c:/temp/log.txt", true);
    } catch (FileNotFoundException ex) {
        ex.printStackTrace();
    }
    /*
                 *String objectID;
            double evTime;
            int segment;
            double evPos;
            int evType;
                 */
    PrintWriter miArchivo = new PrintWriter(out);
    miArchivo.write("objectID,");
    miArchivo.write("evTime,");
    miArchivo.write("segment,");
    miArchivo.write("evPos,");
    miArchivo.write("evType,");
    miArchivo.println();
    miArchivo.close();
    while (b.isActive()) {
        // this.sendMessageToControler("working "+onItinerary);
        while (service.hasRequestToServe()) {
            service.serveOldest();
        }
        if (onItinerary) {
            // sendMessageToControler("Son las: "+rootControl.evTime());
            if (rootControl.derecho != rootControl) {
                try {
                    source = sacarEvento();
                    if (source.evTime() < time) {
                        System.out.println("At> " + time + "Error tipo evento:" + source.getEventType() + "At time> " + source.evTime());
                        throw new UnsupportedOperationException("new event is newer than actual time");
                    }
                    rootControl.setTime(source.evTime());
                    time = source.evTime();
                    if (source instanceof CarArrival) {
                        CarArrival evento = (CarArrival) source;
                        evento.putStreetAgent(this);
                        evento = null;
                        ProActive.turnActive(source);
                    }
                    if (source instanceof CarArrivalLink) {
                        CarArrivalLink evento = (CarArrivalLink) source;
                        evento.putStreetAgent(this);
                        evento = null;
                        ProActive.turnActive(source);
                    }
                    if (source instanceof CarLeaveLink) {
                        CarLeaveLink evento = (CarLeaveLink) source;
                        evento.putStreetAgent(this);
                        evento = null;
                        ProActive.turnActive(source);
                    }
                    if (source instanceof CarStart) {
                        CarStart evento = (CarStart) source;
                        evento.putStreetAgent(this);
                        evento = null;
                        ProActive.turnActive(source);
                    }
                    if (source instanceof CarStop) {
                        CarStop evento = (CarStop) source;
                        evento.putStreetAgent(this);
                        evento = null;
                        ProActive.turnActive(source);
                    }
                    if (source instanceof LightChangeEvent) {
                        LightChangeEvent evento = (LightChangeEvent) source;
                        evento.putStreetAgent(this);
                        evento = null;
                        ProActive.turnActive(source);
                    }
                    onItinerary = false;
                } catch (ActiveObjectCreationException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                } catch (NodeException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }
            }
        /*r = nextHop();
                try {
                    //Non migration to the same node or a null node
                    if ((r != null) &&
                            !NodeFactory.isNodeLocal(NodeFactory.getNode(
                                    r.getDestination()))) {
                        ProActive.migrateTo(r.getDestination());
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }*/
        } else {
        // service.blockingServeOldest();
        }
    }
}
