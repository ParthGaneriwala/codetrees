@Override
protected void frameInit() {
    super.frameInit();
    GridLayout gl = new GridLayout(8, 1);
    JPanel root = new JPanel();
    root.setLayout(gl);
    getContentPane().add(root);
    final Properties prop = PropertiesManager.getProperties("prop.properties", getClass());
    String lastear = prop.getProperty("url.lastear");
    if (lastear == null) {
        lastear = "";
    }
    String lastcls = prop.getProperty("url.lastcls");
    if (lastcls == null) {
        lastcls = "";
    }
    final JSimpleFilePickerPane ear = new JSimpleFilePickerPane(lastear);
    root.add(new JLabel("EAR File to Replace:"));
    root.add(ear);
    final JSimpleFilePickerPane cls = new JSimpleFilePickerPane(lastcls);
    root.add(new JLabel("Class File for Replace:"));
    root.add(cls);
    root.add(new JPanel());
    JButton ok = new JButton("Do Replace");
    root.add(ok);
    final JLabel status = new JLabel(".");
    root.add(status);
    ok.addActionListener(new ActionListener() {

        public void actionPerformed(ActionEvent e) {
            if (ear.getText().length() == 0 || cls.getText().length() == 0) {
                status.setText("Please Choose EAR File or Class File.");
            } else {
                status.setText("Processing...");
                prop.put("url.lastear", ear.getText());
                prop.put("url.lastcls", cls.getText());
                PropertiesManager.storeProperties(prop, getClass());
                InputStream earin = null;
                InputStream clsin = null;
                try {
                    List<String> type = Arrays.asList(".ear,.zip,.jar".split(","));
                    File fear = new File(ear.getText());
                    File fcls = new File(cls.getText());
                    earin = new FileInputStream(fear);
                    clsin = new FileInputStream(fcls);
                    byte[] buff = new byte[clsin.available()];
                    clsin.read(buff);
                    clsin.close();
                    ZipFilterImpl filter = new ZipFilterImpl(type, fcls.getName(), buff);
                    ZipFileReGenerator zfrg = new ZipFileReGenerator();
                    zfrg.addFilter(filter);
                    byte[] data = zfrg.getResultB(earin);
                    FileOutputStream fos = new FileOutputStream(fear);
                    fos.write(data);
                    fos.close();
                    status.setText("Done.   Replaced: " + filter.replaced);
                } catch (Exception e1) {
                    e1.printStackTrace();
                    status.setText(e1.getMessage());
                    try {
                        if (earin != null) {
                            earin.close();
                        }
                        if (clsin != null) {
                            clsin.close();
                        }
                    } catch (IOException e2) {
                        e2.printStackTrace();
                    }
                }
            }
        }
    });
}
