private boolean edgeIntersectsWithAdjacentNode(int srcLevelIndex, int srcNodeIndexInLevel, Point srcPoint, Point destPoint) {
    boolean edgeIntersectsWithNeighborNode = false;
    BFSLevel srcNodeLevel = levels.get(srcLevelIndex);
    Vector<Node> nodesInSrcNodeLevel = srcNodeLevel.getNodes();
    if (srcPoint.x > destPoint.x) {
        Node nodeLeftOfSrcNode = null;
        if (srcNodeIndexInLevel > 0) {
            // Not the first node in this level
            nodeLeftOfSrcNode = nodesInSrcNodeLevel.elementAt(srcNodeIndexInLevel - 1);
            DrawingParameters dpNodeLeftOfSrcNode = nodesVsDrawingParameters.get(nodeLeftOfSrcNode);
            double yDistThreshold = dpNodeLeftOfSrcNode.getYPosition() + dpNodeLeftOfSrcNode.getSize().height - srcPoint.y;
            if (yDistThreshold <= 0)
                return false;
            double xDistThreshold = srcPoint.x - (dpNodeLeftOfSrcNode.getXPosition() + dpNodeLeftOfSrcNode.getSize().width);
            double thresholdAngle = Math.asin(yDistThreshold / xDistThreshold);
            double yDist = destPoint.y - srcPoint.y;
            double xDist = srcPoint.x - destPoint.x;
            double incidentAngle = Math.asin(yDist / xDist);
            if (incidentAngle < thresholdAngle) {
                edgeIntersectsWithNeighborNode = true;
            }
        }
    } else if (srcPoint.x < destPoint.x) {
        Node nodeRightOfSrcNode = null;
        if (srcNodeIndexInLevel < nodesInSrcNodeLevel.size() - 1) {
            // Not
            // the
            // last
            // node
            // in
            // this
            // level
            nodeRightOfSrcNode = nodesInSrcNodeLevel.elementAt(srcNodeIndexInLevel + 1);
            DrawingParameters dpNodeRightOfSrcNode = nodesVsDrawingParameters.get(nodeRightOfSrcNode);
            double xDistThreshold = dpNodeRightOfSrcNode.getXPosition() - srcPoint.x;
            double yDistThreshold = dpNodeRightOfSrcNode.getYPosition() + dpNodeRightOfSrcNode.getSize().height - srcPoint.y;
            if (yDistThreshold <= 0)
                return false;
            double thresholdAngle = Math.asin(yDistThreshold / xDistThreshold);
            double yDist = destPoint.y - srcPoint.y;
            double xDist = destPoint.x - srcPoint.x;
            double incidentAngle = Math.asin(yDist / xDist);
            if (incidentAngle < thresholdAngle) {
                edgeIntersectsWithNeighborNode = true;
            }
        }
    }
    return edgeIntersectsWithNeighborNode;
}
