void goAhead(boolean end) throws Exception {
    String buf = rawdata;
    Matcher matcher;
    int i = 0;
    int n = buf.length();
    while (i < n) {
        if (nomoretags) {
            // handleData(buf.substring(i,n));
            i = n;
            break;
        }
        int j;
        matcher = INTERESTING.matcher(buf);
        if (matcher.find(i)) {
            j = matcher.start();
        } else {
            j = n;
        }
        if (i < j)
            handleData(buf.substring(i, j));
        i = j;
        if (i == n)
            break;
        if (buf.charAt(i) == '<') {
            if (STARTTAGOPEN.matcher(buf.substring(i)).lookingAt()) {
                if (literal) {
                    handleData(buf.substring(i, i + 1));
                    i++;
                    continue;
                }
                int k = parseStartTag(i);
                if (k < 0)
                    break;
                i = k;
                continue;
            }
            if (buf.startsWith("</", i)) {
                int k = parseEndTag(i);
                if (k < 0)
                    break;
                i = k;
                literal = false;
                continue;
            }
            if (literal) {
                if (n > (i + 1)) {
                    handleData("<");
                    i = i + 1;
                } else {
                    // incomplete
                    break;
                }
                continue;
            }
            if (buf.startsWith("<!--", i)) {
                int k = parseComment(i);
                if (k < 0)
                    break;
                i = k;
                continue;
            }
            if (buf.startsWith("<?", i)) {
                int k = parsePi(i);
                if (k < 0)
                    break;
                i += k;
                continue;
            }
            if (buf.startsWith("<!", i)) {
                int k = parseDeclaration(i);
                if (k < 0)
                    break;
                i = k;
                continue;
            }
        } else if (buf.charAt(i) == '&') {
            if (literal) {
                handleData(buf.substring(i, i + 1));
                i = i + 1;
                continue;
            }
            matcher = CHARREF.matcher(buf);
            if (matcher.find(i)) {
                String name = matcher.group(1);
                handleCharRef(name);
                i = matcher.end(0);
                if (buf.charAt(i - 1) != ';')
                    i--;
                continue;
            }
            matcher = ENTITYREF.matcher(buf);
            if (matcher.find(i)) {
                String name = matcher.group(1);
                handleEntityRef(name);
                i = matcher.end(0);
                if (buf.charAt(i - 1) != ';')
                    i--;
                continue;
            }
        } else {
            error("neither < nor & ??");
        }
        matcher = INCOMPLETE.matcher(buf);
        if (!matcher.find(i)) {
            handleData(buf.substring(i, i + 1));
            i++;
            continue;
        }
        j = matcher.end(0);
        if (j == n)
            break;
        handleData(buf.substring(i, j));
        i = j;
    }
    // end while
    if (end && i < n) {
        handleData(buf.substring(i, n));
        i = n;
    }
    rawdata = buf.substring(i);
    // XXX if end: check for empty stack
    handleDocumentEnd();
}
