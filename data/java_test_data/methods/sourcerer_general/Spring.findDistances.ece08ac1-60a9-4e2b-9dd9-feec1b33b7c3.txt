private static void findDistances(DInterferenceGraph g) {
    DNode s;
    DNode u, p;
    DNode v;
    int i, j, vi, pi, si, ui;
    boolean[] done;
    Queue queue;
    queue = new Queue();
    done = new boolean[g.getNodeCount()];
    D = new long[g.getNodeCount()][g.getNodeCount()];
    /* Initialize the distance matrix to 0s */
    for (i = 0; i < g.getNodeCount(); i++) for (j = i; j < g.getNodeCount(); j++) {
        D[i][j] = 0;
        D[j][i] = 0;
    }
    /* For each node, do Dijstra... */
    for (s = g.getStartNode(); s != null; s = g.nextNode(s)) {
        /* Initialize the done array to false */
        for (i = 0; i < g.getNodeCount(); i++) done[i] = false;
        si = enumeration(s.getPositionInGraph());
        done[si] = true;
        for (v = g.getStartNode(); v != null; v = g.nextNode(v)) if (g.hasChild(s, v)) /* fix this using Node's nextChild() */
        {
            queue.push(v.getPositionInGraph());
            queue.push(s.getPositionInGraph());
            vi = enumeration(v.getPositionInGraph());
            done[vi] = true;
        }
        while (!(queue.isEmpty())) {
            v = g.getNode(queue.pop());
            p = g.getNode(queue.pop());
            pi = enumeration(p.getPositionInGraph());
            vi = enumeration(v.getPositionInGraph());
            D[si][vi] = D[pi][si] + 1;
            D[vi][si] = D[si][vi];
            for (u = g.getStartNode(); u != null; u = g.nextNode(u)) if (g.hasChild(v, u)) /* fix this using Node's nextChild() */
            {
                ui = enumeration(u.getPositionInGraph());
                if (!(done[ui])) {
                    queue.push(u.getPositionInGraph());
                    queue.push(v.getPositionInGraph());
                    done[ui] = true;
                }
            }
        }
    }
    /* for s */
    /*
		 * Change the appropriate remaining 0's to infinities and set value of the
		 * boolean variable connected
		 */
    connected = true;
    for (i = 0; i < g.getNodeCount(); i++) for (j = i + 1; j < g.getNodeCount(); j++) if (D[i][j] == 0) {
        connected = false;
        D[i][j] = Long.MAX_VALUE;
        D[j][i] = Long.MAX_VALUE;
    }
}
