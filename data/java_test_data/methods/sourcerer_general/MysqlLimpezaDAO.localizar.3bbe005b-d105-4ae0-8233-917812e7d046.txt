public List localizar(Date inicio, Date fim, int status) throws DAOFactoryException {
    if (conn == null) {
        throw new IllegalStateException("conexao nao esta disponivel");
    }
    List lst = new LinkedList();
    Limpeza limpeza = null;
    Statement stmt = null;
    ResultSet rslt = null;
    StringBuffer condicao = new StringBuffer();
    boolean existeCond = false;
    if (inicio != null && fim != null) {
        condicao.append(existeCond ? " AND " : " ");
        condicao.append(" dtaLimpeza >= '" + UtilDate.parseDateTimeToDB(inicio) + "' AND dtaLimpeza <= '" + UtilDate.parseDateTimeToDB(fim) + "'");
        existeCond = true;
    }
    if (status == Limpeza.STATUS_ATENDIDO || status == Limpeza.STATUS_RECEBIDO) {
        condicao.append(existeCond ? " AND " : " ");
        condicao.append(" statusLimpeza = " + status);
        existeCond = true;
    }
    if (existeCond) {
        condicao.insert(0, " WHERE ");
    }
    try {
        stmt = conn.createStatement();
        rslt = stmt.executeQuery("SELECT idLimpeza, dtaLimpeza, numTermo, numLoteTermo, " + "horaInicioTermo, horaTerminoTermo, cicloTermo, idFuncionario," + "statusLimpeza, idPedido From  limpeza  " + condicao.toString());
        while (rslt.next()) {
            limpeza = toLimpeza(rslt);
            lst.add(limpeza);
            System.out.println(limpeza);
        }
    } catch (Exception e) {
        throw new DAOFactoryException(e);
    } finally {
        if (rslt != null) {
            try {
                rslt.close();
            } catch (Exception e) {
            // log
            }
        }
        if (stmt != null) {
            try {
                stmt.close();
            } catch (Exception e) {
            // log
            }
        }
    }
    return lst;
}
