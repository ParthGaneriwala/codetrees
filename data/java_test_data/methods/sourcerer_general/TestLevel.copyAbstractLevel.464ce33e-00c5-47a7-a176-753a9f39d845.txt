@Test
@DirtiesContext
public void copyAbstractLevel() throws Exception {
    configureMinimalGame();
    beginHttpSession();
    beginHttpRequestAndOpenSessionInViewFilter();
    DbRealGameLevel copy = (DbRealGameLevel) userGuidanceService.copyDbAbstractLevel(TEST_LEVEL_2_REAL_ID);
    userGuidanceService.activateLevels();
    endHttpRequestAndOpenSessionInViewFilter();
    beginHttpRequestAndOpenSessionInViewFilter();
    DbRealGameLevel original = (DbRealGameLevel) userGuidanceService.getDbLevelCrudServiceHelper().readDbChild(TEST_LEVEL_2_REAL_ID);
    copy = (DbRealGameLevel) userGuidanceService.getDbLevelCrudServiceHelper().readDbChild(copy.getId());
    // Assert level attributes
    Assert.assertEquals(original.getDeltaMoney(), copy.getDeltaMoney());
    Assert.assertEquals(original.getDeltaXp(), copy.getDeltaXp());
    Assert.assertEquals(original.getDisplayType(), copy.getDisplayType());
    Assert.assertEquals(original.getHouseSpace(), copy.getHouseSpace());
    Assert.assertEquals(original.getHtml(), copy.getHtml());
    Assert.assertEquals(original.getHouseSpace(), copy.getHouseSpace());
    Assert.assertEquals(original.getInternalDescription(), copy.getInternalDescription());
    Assert.assertEquals(original.getItemSellFactor(), copy.getItemSellFactor(), 0.001);
    Assert.assertEquals(original.getMaxMoney(), copy.getMaxMoney());
    Assert.assertEquals(original.getMaxXp(), copy.getMaxXp());
    Assert.assertFalse(original.getName().equals(copy.getName()));
    Assert.assertEquals(original.getDeltaMoney(), copy.getDeltaMoney());
    Assert.assertEquals(original.getStartItemFreeRange(), copy.getStartItemFreeRange());
    Assert.assertEquals(original.getStartItemType(), copy.getStartItemType());
    Assert.assertEquals(original.getStartTerritory(), copy.getStartTerritory());
    Assert.assertFalse(original.getId().intValue() == copy.getId().intValue());
    Assert.assertTrue(copy.getOrderIndex() == userGuidanceService.getDbLevels().get(userGuidanceService.getDbLevels().size() - 1).getOrderIndex());
    // Assert condition
    DbConditionConfig originalDbConditionConfig = original.getDbConditionConfig();
    DbConditionConfig copyDbConditionConfig = copy.getDbConditionConfig();
    Assert.assertFalse(originalDbConditionConfig.getId().intValue() == copyDbConditionConfig.getId().intValue());
    Assert.assertEquals(originalDbConditionConfig.getConditionTrigger(), copyDbConditionConfig.getConditionTrigger());
    DbAbstractComparisonConfig originalDbAbstractComparisonConfig = originalDbConditionConfig.getDbAbstractComparisonConfig();
    DbAbstractComparisonConfig copyDbAbstractComparisonConfig = copyDbConditionConfig.getDbAbstractComparisonConfig();
    Assert.assertFalse(originalDbAbstractComparisonConfig.getId().intValue() == copyDbAbstractComparisonConfig.getId().intValue());
    Assert.assertEquals(originalDbAbstractComparisonConfig.getExcludedDbTerritory(), copyDbAbstractComparisonConfig.getExcludedDbTerritory());
    Assert.assertEquals(originalDbAbstractComparisonConfig.getClass(), copyDbAbstractComparisonConfig.getClass());
    // TODO check subclasses of DbAbstractComparisonConfig
    // Assert
    Set<DbItemTypeLimitation> originalDbItemTypeLimitations = original.getItemTypeLimitation();
    Collection<DbItemTypeLimitation> copyDbItemTypeLimitations = new ArrayList<DbItemTypeLimitation>(copy.getItemTypeLimitation());
    Assert.assertEquals(originalDbItemTypeLimitations.size(), copyDbItemTypeLimitations.size());
    for (DbItemTypeLimitation originalDbItemTypeLimitation : originalDbItemTypeLimitations) {
        findAndRemoveDbItemTypeLimitation(copyDbItemTypeLimitations, originalDbItemTypeLimitation);
    }
    endHttpRequestAndOpenSessionInViewFilter();
    endHttpSession();
}
