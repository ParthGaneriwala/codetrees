public void mouseDragged(MouseEvent e) {
    int mouseX = e.getX();
    TableColumn resizingColumn = table.getTableHeader().getResizingColumn();
    boolean headerLeftToRight = table.getTableHeader().getComponentOrientation().isLeftToRight();
    if (resizingColumn != null) {
        int oldWidth = resizingColumn.getWidth();
        int newWidth;
        if (headerLeftToRight) {
            newWidth = mouseX - mouseXOffset;
        } else {
            newWidth = mouseXOffset - mouseX;
        }
        resizingColumn.setWidth(newWidth);
        Container container;
        if ((table.getTableHeader().getParent() == null) || ((container = table.getTableHeader().getParent().getParent()) == null) || !(container instanceof JScrollPane)) {
            return;
        }
        if (!container.getComponentOrientation().isLeftToRight() && !headerLeftToRight) {
            if (table != null) {
                JViewport viewport = ((JScrollPane) container).getViewport();
                int viewportWidth = viewport.getWidth();
                int diff = newWidth - oldWidth;
                int newHeaderWidth = table.getWidth() + diff;
                /* Resize a table */
                Dimension tableSize = table.getSize();
                tableSize.width += diff;
                table.setSize(tableSize);
                /*
           * If this table is in AUTO_RESIZE_OFF mode and has a horizontal
           * scrollbar, we need to update a view's position.
           */
                if ((newHeaderWidth >= viewportWidth) && (table.getAutoResizeMode() == JTable.AUTO_RESIZE_OFF)) {
                    Point p = viewport.getViewPosition();
                    p.x = Math.max(0, Math.min(newHeaderWidth - viewportWidth, p.x + diff));
                    viewport.setViewPosition(p);
                    /* Update the original X offset value. */
                    mouseXOffset += diff;
                }
            }
        }
    }
}
