public void testEncapsulatedPOJO() throws Exception {
    BeanRegistry.registerType(SimplePojo.class);
    BeanRegistry.registerType(EncapsulationTestPojo.class);
    // Create POJOs
    EncapsulationTestPojo parentPojo = new EncapsulationTestPojo();
    parentPojo.setA(10);
    parentPojo.setB("aaa");
    SimplePojo childPojo = new SimplePojo();
    childPojo.setIntField(15);
    parentPojo.setChildPojo(childPojo);
    // Enhance POJOs
    Object enhancedParentObject = BeanEnhancer.addPropertyChangeSupport(parentPojo);
    // Check class hierarchy
    assertTrue("The enhanced POJO must extend the original POJO", parentPojo.getClass().isAssignableFrom(enhancedParentObject.getClass()));
    assertTrue("The enhanced POJO must implement " + PropertyChangeListenerSupport.class, PropertyChangeListenerSupport.class.isAssignableFrom(enhancedParentObject.getClass()));
    // Cast
    EncapsulationTestPojo enhancedParentPojo = (EncapsulationTestPojo) enhancedParentObject;
    PropertyChangeListenerSupport pcls = (PropertyChangeListenerSupport) enhancedParentObject;
    SimplePojo enhancedChildPojo = enhancedParentPojo.getChildPojo();
    // Check class hierarchy for the child POJO
    assertTrue("The enhanced POJO must extend the original POJO", childPojo.getClass().isAssignableFrom(enhancedChildPojo.getClass()));
    assertTrue("The enhanced POJO must implement " + PropertyChangeListenerSupport.class, PropertyChangeListenerSupport.class.isAssignableFrom(enhancedChildPojo.getClass()));
    // Cast child
    PropertyChangeListenerSupport childPcls = (PropertyChangeListenerSupport) enhancedChildPojo;
    // Check values
    assertEquals(10, enhancedParentPojo.getA());
    assertEquals("aaa", enhancedParentPojo.getB());
    assertNotNull(enhancedChildPojo);
    assertEquals(15, enhancedChildPojo.getIntField());
    final AtomicInteger aCount = new AtomicInteger();
    final AtomicInteger bCount = new AtomicInteger();
    final AtomicInteger childPojoCount = new AtomicInteger();
    pcls.addPropertyChangeListener(new PropertyChangeListener() {

        public void propertyChange(PropertyChangeEvent evt) {
            String prop = evt.getPropertyName();
            if (prop.equals("a")) {
                aCount.incrementAndGet();
            } else if (prop.equals("b")) {
                bCount.incrementAndGet();
            } else if (prop.equals("childPojo")) {
                childPojoCount.incrementAndGet();
            } else {
                fail("Unexpected property change");
            }
        }
    });
    final AtomicInteger childPojoIntFieldCount = new AtomicInteger();
    final AtomicInteger childPojoStringFieldCount = new AtomicInteger();
    childPcls.addPropertyChangeListener(new PropertyChangeListener() {

        public void propertyChange(PropertyChangeEvent evt) {
            String prop = evt.getPropertyName();
            if (prop.equals("intField")) {
                childPojoIntFieldCount.incrementAndGet();
            } else if (prop.equals("stringField")) {
                childPojoStringFieldCount.incrementAndGet();
            } else {
                fail("Unexpected property change");
            }
        }
    });
    assertEquals(0, aCount.get());
    assertEquals(0, bCount.get());
    assertEquals(0, childPojoCount.get());
    assertEquals(0, childPojoIntFieldCount.get());
    assertEquals(0, childPojoStringFieldCount.get());
    enhancedParentPojo.setA(11);
    enhancedParentPojo.setB("bbb");
    assertEquals(1, aCount.get());
    assertEquals(1, bCount.get());
    assertEquals(0, childPojoCount.get());
    assertEquals(0, childPojoIntFieldCount.get());
    assertEquals(0, childPojoStringFieldCount.get());
    // Since child POJO is registered in the BeanRegistry
    // any change inside it will also be listened to and
    // reflected on the parent POJO, so
    enhancedChildPojo.setIntField(16);
    assertEquals(1, aCount.get());
    assertEquals(1, bCount.get());
    assertEquals(1, childPojoIntFieldCount.get());
    assertEquals(1, childPojoCount.get());
    assertEquals(0, childPojoStringFieldCount.get());
    enhancedChildPojo.setStringField("Weeeee!");
    assertEquals(1, childPojoIntFieldCount.get());
    assertEquals(2, childPojoCount.get());
    assertEquals(1, childPojoStringFieldCount.get());
    // Replace child object with a new one.
    // It should be automatically enhanced
    SimplePojo replacement = new SimplePojo();
    enhancedParentPojo.setChildPojo(replacement);
    assertEquals("The child POJO was replaced which should trigger child change counter", 3, childPojoCount.get());
    enhancedChildPojo.setIntField(55);
    assertEquals("The old child POJO's change listener should have been unwired", 3, childPojoCount.get());
    assertEquals("The previous enhanced POJO should still count its own changes", 2, childPojoIntFieldCount.get());
    assertTrue("Since the value is automatically enhanced is must not be the same as the value passed to the setter", replacement != enhancedParentPojo.getChildPojo());
    SimplePojo enhancedReplacement = enhancedParentPojo.getChildPojo();
    enhancedReplacement.setIntField(18);
    assertEquals("The new replacement should have been automatically wired to the parent POJO", 4, childPojoCount.get());
    assertEquals("The previous enhanced POJO should no longer fire event changes", 2, childPojoIntFieldCount.get());
}
