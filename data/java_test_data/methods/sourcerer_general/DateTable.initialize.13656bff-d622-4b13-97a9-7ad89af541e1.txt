public synchronized void initialize(int userMonth, int userYear) throws IOException, ZipException {
    GregorianCalendar calendar = new GregorianCalendar(userYear, userMonth, 1);
    int firstOfMonth = calendar.get(Calendar.DAY_OF_WEEK) - 1;
    int numDays = calendar.getActualMaximum(Calendar.DAY_OF_MONTH);
    int numRows = (firstOfMonth + numDays <= 35 ? 5 : 6);
    GregorianCalendar today = new GregorianCalendar();
    boolean isCurrYearMonth = false;
    int todaysDayOfMonth = 0;
    if (today.get(Calendar.MONTH) == userMonth && today.get(Calendar.YEAR) == userYear) {
        isCurrYearMonth = true;
        todaysDayOfMonth = today.get(Calendar.DAY_OF_MONTH);
    }
    DatePanel.setCurrentDay(todaysDayOfMonth);
    // Get an array listing all the
    MyReaders mRead = new MyReaders(databaseFile);
    ChoreSchedule[] chores = mRead.getChoreSchedules(userMonth, userYear);
    modelData = new Object[numRows][7];
    DatePanel mdp;
    // Populate our table
    int currDate = 1;
    for (int i = 0; i < numRows * 7; i++) {
        // the quotient = the week
        int week = (int) (i / 7);
        // the remainder = the day
        int day = (int) (i % 7);
        // This panel is for an actual day
        if (i >= firstOfMonth && i < numDays + firstOfMonth) {
            mdp = new DatePanel(currDate, false);
            for (ChoreSchedule cs : chores) {
                // If this Chore happens on this day of the month
                if (cs.hasDayOfMonth(currDate))
                    // Can't add multiple items to the same container, so clone it then add it
                    mdp.addChoreSchedule((ChoreSchedule) cs.clone());
            }
            // This DatePanel falls on todays actual month/day/year
            if (isCurrYearMonth && currDate == todaysDayOfMonth)
                mdp.setToday(true);
            modelData[week][day] = mdp;
            currDate++;
        } else // This panel is a spacer, and not a real day
        {
            mdp = new DatePanel(0, true);
            modelData[week][day] = mdp;
        }
    }
    // Cleanup
    calendar = null;
    today = null;
}
