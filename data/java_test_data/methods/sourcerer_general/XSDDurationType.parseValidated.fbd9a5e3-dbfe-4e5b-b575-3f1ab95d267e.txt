public Object parseValidated(String str) {
    int len = str.length();
    int[] date = new int[TOTAL_SIZE];
    int start = 0;
    char c = str.charAt(start++);
    if (c != 'P' && c != '-') {
        throw new DatatypeFormatException("Internal error: validated duration failed to parse(1)");
    } else {
        date[utc] = (c == '-') ? '-' : 0;
        if (c == '-' && str.charAt(start++) != 'P') {
            throw new DatatypeFormatException("Internal error: validated duration failed to parse(2)");
        }
    }
    int negate = 1;
    // negative duration
    if (date[utc] == '-') {
        negate = -1;
    }
    int endDate = indexOf(str, start, len, 'T');
    if (endDate == -1) {
        endDate = len;
    }
    // find 'Y'
    int end = indexOf(str, start, endDate, 'Y');
    if (end != -1) {
        // scan year
        date[CY] = negate * parseInt(str, start, end);
        start = end + 1;
    }
    end = indexOf(str, start, endDate, 'M');
    if (end != -1) {
        // scan month
        date[M] = negate * parseInt(str, start, end);
        start = end + 1;
    }
    end = indexOf(str, start, endDate, 'D');
    if (end != -1) {
        // scan day
        date[D] = negate * parseInt(str, start, end);
        start = end + 1;
    }
    if (len == endDate && start != len) {
        throw new DatatypeFormatException("Internal error: validated duration failed to parse(3)");
    }
    if (len != endDate) {
        end = indexOf(str, ++start, len, 'H');
        if (end != -1) {
            // scan hours
            date[h] = negate * parseInt(str, start, end);
            start = end + 1;
        }
        end = indexOf(str, start, len, 'M');
        if (end != -1) {
            // scan min
            date[m] = negate * parseInt(str, start, end);
            start = end + 1;
        }
        end = indexOf(str, start, len, 'S');
        if (end != -1) {
            // scan seconds
            int mlsec = indexOf(str, start, end, '.');
            if (mlsec > 0) {
                date[s] = negate * parseInt(str, start, mlsec);
                int msEnd = end;
                while (str.charAt(msEnd - 1) == '0') msEnd--;
                date[ms] = negate * parseInt(str, mlsec + 1, msEnd);
                date[msscale] = msEnd - mlsec - 1;
            } else {
                date[s] = negate * parseInt(str, start, end);
            }
            start = end + 1;
        }
    }
    return new XSDDuration(date);
}
