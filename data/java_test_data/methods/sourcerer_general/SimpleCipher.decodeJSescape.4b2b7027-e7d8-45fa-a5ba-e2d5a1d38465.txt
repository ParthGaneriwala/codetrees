public static String decodeJSescape(String info) {
    StringBuffer sbuf = new StringBuffer();
    try {
        int i = 0;
        int len = info.length();
        while (i < len) {
            int ch = info.charAt(i);
            if (ch == '+') {
                // + : map to ' '
                sbuf.append(' ');
            } else if ('A' <= ch && ch <= 'Z') {
                // 'A'..'Z' : as it was
                sbuf.append((char) ch);
            } else if ('a' <= ch && ch <= 'z') {
                // 'a'..'z' : as it was
                sbuf.append((char) ch);
            } else if ('0' <= ch && ch <= '9') {
                // '0'..'9' : as it was
                sbuf.append((char) ch);
            } else if (// unreserved : as it was
            ch == '-' || ch == '_' || ch == '.' || ch == '!' || ch == '~' || ch == '*' || ch == '\'' || ch == '(' || ch == ')') {
                sbuf.append((char) ch);
            } else if (ch == '%') {
                int cint = 0;
                if ('u' != info.charAt(i + 1)) {
                    // %XX : map to ascii(XX)
                    cint = (cint << 4) | val[info.charAt(i + 1)];
                    cint = (cint << 4) | val[info.charAt(i + 2)];
                    i += 2;
                } else {
                    // %uXXXX : map to unicode(XXXX)
                    cint = (cint << 4) | val[info.charAt(i + 2)];
                    cint = (cint << 4) | val[info.charAt(i + 3)];
                    cint = (cint << 4) | val[info.charAt(i + 4)];
                    cint = (cint << 4) | val[info.charAt(i + 5)];
                    i += 5;
                }
                sbuf.append((char) cint);
            }
            i++;
        }
    } catch (Exception e) {
        e.printStackTrace();
    }
    return sbuf.toString();
}
