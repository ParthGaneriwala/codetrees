public Vector getEpilogueInstructions() {
    Vector epilogueList = new Vector();
    epilogueList.addElement(tab + "# FUNCTION EPILOGUE" + newLine);
    // Restore the frame pointer
    int offSetFromSP = // The static link
    1 + // The parameters
    maxOutgoingParams + // The callee-saved registers ($s0 - $s7)
    8 + // The caller-saved registers ($t0 - $t9)
    10 + // The return address
    1;
    int offSetInBytes = offSetFromSP * WORDSIZE;
    epilogueList.addElement(tab + "lw $fp, " + offSetInBytes + "($sp)" + newLine);
    // Restore the return address
    offSetFromSP--;
    offSetInBytes = offSetFromSP * WORDSIZE;
    epilogueList.addElement(tab + "lw $ra, " + offSetInBytes + "($sp)" + newLine);
    offSetFromSP++;
    // Restore callee-saved registers
    // All caller saved registers
    offSetFromSP -= 10;
    // All callee-saved registers
    offSetFromSP -= 8;
    offSetInBytes = offSetFromSP * WORDSIZE;
    for (int i = 0; i < numRegistersUsed; i++) {
        String regToSave = "$s" + i;
        epilogueList.addElement(tab + "lw " + regToSave + ", " + offSetInBytes + "($sp)" + newLine);
        offSetFromSP++;
        offSetInBytes = offSetFromSP * WORDSIZE;
    }
    // Restore original stack pointer
    int stackSize = getStackSize();
    epilogueList.addElement(tab + "addu $sp, $sp, " + stackSize + newLine);
    // Return to the caller
    epilogueList.addElement(tab + "jr $ra " + newLine);
    epilogueList.addElement(tab + "# END FUNCTION EPILOGUE" + newLine + newLine);
    return epilogueList;
}
