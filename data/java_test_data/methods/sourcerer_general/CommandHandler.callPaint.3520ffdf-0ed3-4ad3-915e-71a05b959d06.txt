protected void callPaint(Graphics g) {
    if (!visible || labels == null || numCommands <= 0) {
        return;
    }
    g.setFont(font);
    g.setColor(colorTextOut);
    if (labelRight != null) {
        if (pressedRight && !isOpen()) {
            g.setColor(colorTextIn);
        } else {
            g.setColor(colorTextOut);
        }
        g.drawString(labelRight, App.width - labelX, App.height - labelY, Graphics.BASELINE | Graphics.RIGHT);
    }
    if (labelLeft != null) {
        if (pressedLeft) {
            g.setColor(colorTextIn);
        } else {
            g.setColor(colorTextOut);
        }
        g.drawString(labelLeft, labelX, App.height - labelY, Graphics.BASELINE | Graphics.LEFT);
    }
    if (open) {
        g.setColor(backgrounColorOut);
        g.fillRect(x, y, itemW, height - commmandBarH);
        g.setColor(borderColor);
        g.drawRect(x, y, itemW - 1, height - commmandBarH - 1);
        int itemY = y + 2;
        g.setFont(fontMenu);
        for (int i = 1; i < numCommands; i++) {
            if (index == i) {
                g.setColor(backgrounColorIn);
                g.fillRect(2, itemY, itemW - 4, itemH);
                g.setColor(colorMenuTextIn);
            } else {
                g.setColor(colorMenuTextOut);
            }
            if (labels[i] != null) {
                String lab = labels[i];
                if (hasSubCommands(i)) {
                    lab += " >>";
                }
                g.drawString(lab, itemW / 2, itemY + (itemH - fontMenuH) / 2, Graphics.TOP | Graphics.HCENTER);
            }
            itemY += itemH;
        }
        if (openSB) {
            // Pega os subcmandos do comando selecionado
            Command[] cmd = (Command[]) subCommands.get(index);
            numSubCommands = cmd.length;
            // Verifica se existem subcomandos, senão sai
            if (cmd == null || numSubCommands <= 0) {
                return;
            }
            // Calcula a largura máxima dos subcomandos
            sbItemW = 0;
            for (int i = 0; i < numSubCommands; i++) {
                if (fontMenu.stringWidth(cmd[i].getLabel()) > sbItemW) {
                    sbItemW = fontMenu.stringWidth(cmd[i].getLabel()) + 10;
                }
            }
            if (sbItemW < 60) {
                sbItemW = 60;
            }
            if (sbItemW > App.halfWidth) {
                sbItemW = App.halfWidth;
            }
            // Define a altura da lista de subcomandos
            sbHeight = (numSubCommands + 1) * itemH + 4;
            // Define o ponto x dos subcomandos
            sbX = x + itemW / 2;
            // Define o ponto y dos subcomandos
            if (numSubCommands < numCommands) {
                sbY = y - itemH / 2;
            } else {
                sbY = App.height - sbHeight;
            }
            // Desenha o plano de fundo dos subcomandos
            g.setColor(backgrounColorOut);
            g.fillRect(sbX, sbY, sbItemW, sbHeight);
            g.setColor(borderColor);
            g.drawRect(sbX, sbY, sbItemW - 1, sbHeight - 1);
            // Desenha os subcomandos
            itemY = sbY + 2;
            String sbLabel;
            for (int i = 0; i <= numSubCommands; i++) {
                if (indexSB == i) {
                    g.setColor(backgrounColorIn);
                    g.fillRect(sbX + 2, itemY, sbItemW - 4, itemH);
                    g.setColor(colorMenuTextIn);
                } else {
                    g.setColor(colorMenuTextOut);
                }
                sbLabel = "";
                if (i < numSubCommands && cmd[i] != null) {
                    sbLabel = cmd[i].getLabel();
                } else if (i == numSubCommands) {
                    sbLabel = "<<";
                }
                g.drawString(sbLabel, sbX + sbItemW / 2, itemY + (itemH - fontMenuH) / 2, Graphics.TOP | Graphics.HCENTER);
                itemY += itemH;
            }
        }
    }
}
