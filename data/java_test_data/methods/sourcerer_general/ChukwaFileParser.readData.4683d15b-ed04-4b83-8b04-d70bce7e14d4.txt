@SuppressWarnings("deprecation")
public static List<Record> readData(String cluster, String dataSource, int maxRows, long t1, long t0, long maxOffset, String filter, String fileName, FileSystem fs) throws MalformedFileFormat {
    // String source = "NameNode." + fileName;
    List<Record> records = new LinkedList<Record>();
    FSDataInputStream dataIS = null;
    int lineCount = 0;
    try {
        if (!fs.exists(new Path(fileName))) {
            System.out.println("fileName not there!");
            return records;
        }
        System.out.println("NameNodeParser Open [" + fileName + "]");
        dataIS = fs.open(new Path(fileName));
        System.out.println("NameNodeParser Open2 [" + fileName + "]");
        long timestamp = 0;
        int listSize = 0;
        String line = null;
        String[] data = null;
        long offset = 0;
        do {
            offset = dataIS.getPos();
            // Need TODO something here
            // if (offset > maxOffset)
            // {
            // break;
            // }
            line = dataIS.readLine();
            lineCount++;
            // System.out.println("NameNodeParser Line [" +line + "]");
            if (line != null) {
                // empty lines
                if (line.length() < 14) {
                    // System.out.println("NameNodeParser Line < 14! [" +line + "]");
                    continue;
                }
                // System.out.println("Line [" +line + "]");
                // Default separator for TextOutputFormat!
                data = line.split("\t");
                try {
                    timestamp = Long.parseLong(data[timestampField]);
                } catch (Exception e) {
                    e.printStackTrace();
                // throw new MalformedFileFormat(e);
                }
                if (timestamp < t0) {
                    // System.out.println("Search for: " + new Date(t0) + " is :" + new Date(timestamp));
                    continue;
                } else if (// JB (epochTS < maxDate)
                (timestamp < t1) && (offset < maxOffset)) {
                    // System.out.println("In Range: " + line);
                    boolean valid = false;
                    if ((filter == null || filter.equals(""))) {
                        valid = true;
                    } else if (line.indexOf(filter) > 0) {
                        valid = true;
                    }
                    if (valid) {
                        // System.out.println("In Range In Filter: " + line);
                        ChukwaRecord record = new ChukwaRecord();
                        record.setTime(timestamp);
                        record.add("offset", "" + offset);
                        record.add(Record.bodyField, data[1]);
                        record.add(Record.sourceField, dataSource);
                        records.add(record);
                        listSize = records.size();
                        if (listSize > maxRows) {
                            records.remove(0);
                        // System.out.println("==========>>>>>REMOVING: " + e);
                        }
                    } else {
                    // System.out.println("In Range ==================>>>>>>>>> OUT Regex: " + line);
                    }
                } else {
                    // System.out.println("Line out of range. Stopping now: " +line);
                    break;
                }
            }
        } while (line != null);
    } catch (Exception e) {
        e.printStackTrace();
    } finally {
        System.out.println("File: " + fileName + " Line count: " + lineCount);
        try {
            dataIS.close();
        } catch (IOException e) {
        }
    }
    return records;
}
