@Test
public void testMarysDog() throws UIMAException, IOException {
    String text = FileUtils.readFileToString(new File("src/test/resources/token/marysdog.txt"));
    jCas.setDocumentText(text);
    new Sentence(jCas, 0, 52).addToIndexes();
    new Sentence(jCas, 54, 68).addToIndexes();
    new Sentence(jCas, 70, 91).addToIndexes();
    SimplePipeline.runPipeline(jCas, tokenizer);
    FSIndex<Annotation> tokenIndex = jCas.getAnnotationIndex(Token.type);
    assertEquals(37, tokenIndex.size());
    int index = 0;
    assertEquals("\"", JCasUtil.selectByIndex(jCas, Token.class, index++).getCoveredText());
    assertEquals("John", JCasUtil.selectByIndex(jCas, Token.class, index++).getCoveredText());
    assertEquals("&", JCasUtil.selectByIndex(jCas, Token.class, index++).getCoveredText());
    assertEquals("Mary", JCasUtil.selectByIndex(jCas, Token.class, index++).getCoveredText());
    assertEquals("'s", JCasUtil.selectByIndex(jCas, Token.class, index++).getCoveredText());
    assertEquals("'", JCasUtil.selectByIndex(jCas, Token.class, index++).getCoveredText());
    assertEquals("dog", JCasUtil.selectByIndex(jCas, Token.class, index++).getCoveredText());
    assertEquals("'", JCasUtil.selectByIndex(jCas, Token.class, index++).getCoveredText());
    assertEquals("...", JCasUtil.selectByIndex(jCas, Token.class, index++).getCoveredText());
    assertEquals("\"", JCasUtil.selectByIndex(jCas, Token.class, index++).getCoveredText());
    assertEquals(",", JCasUtil.selectByIndex(jCas, Token.class, index++).getCoveredText());
    assertEquals("Jane", JCasUtil.selectByIndex(jCas, Token.class, index++).getCoveredText());
    assertEquals("thought", JCasUtil.selectByIndex(jCas, Token.class, index++).getCoveredText());
    assertEquals("(", JCasUtil.selectByIndex(jCas, Token.class, index++).getCoveredText());
    assertEquals("to", JCasUtil.selectByIndex(jCas, Token.class, index++).getCoveredText());
    assertEquals("herself", JCasUtil.selectByIndex(jCas, Token.class, index++).getCoveredText());
    assertEquals(")", JCasUtil.selectByIndex(jCas, Token.class, index++).getCoveredText());
    assertEquals(".", JCasUtil.selectByIndex(jCas, Token.class, index++).getCoveredText());
    assertEquals("\"", JCasUtil.selectByIndex(jCas, Token.class, index++).getCoveredText());
    assertEquals("What", JCasUtil.selectByIndex(jCas, Token.class, index++).getCoveredText());
    assertEquals("a", JCasUtil.selectByIndex(jCas, Token.class, index++).getCoveredText());
    assertEquals("@", JCasUtil.selectByIndex(jCas, Token.class, index++).getCoveredText());
    assertEquals("#", JCasUtil.selectByIndex(jCas, Token.class, index++).getCoveredText());
    assertEquals("$", JCasUtil.selectByIndex(jCas, Token.class, index++).getCoveredText());
    assertEquals("%", JCasUtil.selectByIndex(jCas, Token.class, index++).getCoveredText());
    assertEquals("*", JCasUtil.selectByIndex(jCas, Token.class, index++).getCoveredText());
    assertEquals("!", JCasUtil.selectByIndex(jCas, Token.class, index++).getCoveredText());
    assertEquals("a", JCasUtil.selectByIndex(jCas, Token.class, index++).getCoveredText());
    assertEquals("-", JCasUtil.selectByIndex(jCas, Token.class, index++).getCoveredText());
    assertEquals("``", JCasUtil.selectByIndex(jCas, Token.class, index++).getCoveredText());
    assertEquals("I", JCasUtil.selectByIndex(jCas, Token.class, index++).getCoveredText());
    assertEquals("like", JCasUtil.selectByIndex(jCas, Token.class, index++).getCoveredText());
    assertEquals("'", JCasUtil.selectByIndex(jCas, Token.class, index++).getCoveredText());
    assertEquals("AT&T", JCasUtil.selectByIndex(jCas, Token.class, index++).getCoveredText());
    assertEquals("'", JCasUtil.selectByIndex(jCas, Token.class, index++).getCoveredText());
    assertEquals("''", JCasUtil.selectByIndex(jCas, Token.class, index++).getCoveredText());
    assertEquals(".", JCasUtil.selectByIndex(jCas, Token.class, index++).getCoveredText());
}
