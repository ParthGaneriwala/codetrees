public void quad(int line, AST subj, AST prop, AST obj, String context) {
    if (context != null)
        error("Line " + line + ": N3toRDF: All statement are asserted - no formulae");
    try {
        // Converting N3 to RDF:
        // subject: must be a URIref or a bNode name
        // property: remove sugaring and then must be a URIref
        // object: can be a literal or a URIref or a bNode name
        // context must be zero (no formulae)
        // Lists: The parser creates list elements as sequences of triples:
        // anon  list:first  ....
        // anon  list:rest   resource
        // Where "resource" is nil for the last element of the list (generated first).
        // The properties are in a unique namespace to distinguish them
        // from lists encoded explicitly, not with the () syntax.
        int pType = prop.getType();
        String propStr = prop.getText();
        Property pNode = null;
        switch(pType) {
            case N3Parser.ARROW_R:
                if (!allowPropertySymbols)
                    error("Line " + line + ": N3toRDF: Property symbol '=>' not allowed");
                propStr = LOG_IMPLIES;
                break;
            case N3Parser.ARROW_MEANS:
                if (!allowPropertySymbols)
                    error("Line " + line + ": N3toRDF: Property symbol '<=>' not allowed");
                propStr = LOG_MEANS;
                break;
            case N3Parser.ARROW_L:
                if (!allowPropertySymbols)
                    error("Line " + line + ": N3toRDF: Property symbol '<=' not allowed");
                // Need to reverse subject and object
                propStr = LOG_IMPLIES;
                AST tmp = obj;
                obj = subj;
                subj = tmp;
                break;
            case N3Parser.EQUAL:
                // propStr = damlVocab.equivalentTo().getURI() ;
                if (!allowPropertySymbols)
                    error("Line " + line + ": N3toRDF: Property symbol '=' not allowed");
                pNode = OWL.sameAs;
                break;
            case N3Parser.KW_A:
                if (!allowKeywordA)
                    error("Line " + line + ": N3toRDF: Property symbol 'a' not allowed");
                pNode = RDF.type;
                break;
            case N3Parser.QNAME:
                if (prop.getText().startsWith("_:"))
                    error("Line " + line + ": N3toRDF: Can't have properties with labelled bNodes in RDF");
                String uriref = expandPrefix(model, propStr);
                if (uriref == propStr) {
                    // Failed to expand ...
                    error("Line " + line + ": N3toRDF: Undefined qname namespace: " + propStr);
                    return;
                }
                pNode = model.createProperty(uriref);
                break;
            case N3Parser.URIREF:
                propStr = expandURIRef(propStr, line);
                break;
            case N3Parser.TK_LIST_FIRST:
                pNode = RDF.first;
                break;
            case N3Parser.TK_LIST_REST:
                pNode = RDF.rest;
                break;
            // and tokens that can't be properties.
            case N3Parser.ANON:
                error("Line " + line + ": N3toRDF: Can't have anon. properties in RDF");
                break;
            default:
                error("Line " + line + ": N3toRDF: Shouldn't see " + N3EventPrinter.formatSlot(prop) + " at this point!");
                break;
        }
        // Didn't find an existing one above so make it ...
        if (pNode == null)
            pNode = model.createProperty(propStr);
        else
            propStr = pNode.getURI();
        RDFNode sNode = createNode(line, subj);
        // Must be a resource
        if (sNode instanceof Literal)
            error("Line " + line + ": N3toRDF: Subject can't be a literal: " + subj.getText());
        RDFNode oNode = createNode(line, obj);
        Statement stmt = model.createStatement((Resource) sNode, pNode, oNode);
        model.add(stmt);
    } catch (JenaException rdfEx) {
        error("Line " + line + ": JenaException: " + rdfEx);
    }
}
