public static void main(String[] args) throws Exception {
    RegistryHelper regor = new RegistryHelper();
    Key _key = regor.openKey(HKEY_LOCAL_MACHINE, "SYSTEM\\ControlSet001\\Services");
    // regor.setCaching(true);
    // Key _key = regor.openKey(HKEY_LOCAL_MACHINE, "SOFTWARE\\debis");
    regor.cacheKeys(_key, 2);
    Key __key = regor.openKey(_key, "xmlprov");
    System.out.println("KEY:: " + __key);
    // System.out.println(">> " + regor.readExpand(__key, "ServiceDll"));
    // System.out.println(">>> " + RegistryHelper.parseHexString(regor.readExpand(__key, "ServiceDll"), true));
    System.out.println(">>>> " + regor.readMulti(__key, "DependOnService"));
    System.out.println(">>> " + RegistryHelper.parseHexString(regor.readMulti(__key, "DependOnService"), true));
    System.out.println(">>>> " + regor.readExpand(__key, "ImagePath"));
    System.out.println(">>> " + RegistryHelper.parseHexString(regor.readExpand(__key, "ImagePath"), true));
    regor.closeKey(__key);
    regor.closeKey(_key);
    if (true)
        return;
    if (// testing the new methods
    false) {
        Key key = regor.openKey(HKEY_LOCAL_MACHINE, "Software\\AVS3");
        // regor.saveAnyValue("HKEY_LOCAL_MACHINE\\Software\\AVS3", "MULTI", MULTI_KEY,convertStringToHexComma("Das ist ein langer Test, mal schauen was da nachher rauskommt \n dumdidum!", true));
        // System.out.println(">>> " + RegistryHelper.parseHexString(regor.readMulti(key,"MULTI"), true));
        // System.out.println(">>> " + regor.readMulti(key, "MULTI"));
        // regor.saveDword(key, "DWOR1D", Integer.toHexString(23));
        regor.saveBinary(key, "BIN1", RegistryHelper.convertStringToHexComma("HALLO", false));
        System.out.println(">> " + regor.readBinary(key, "BIN1"));
        System.out.println(">>DW: " + regor.readDword(key, "DWORD"));
        regor.saveExpand(key, "MULTI3", RegistryHelper.convertStringToHexComma("DUMDIDUM", true));
        regor.closeKey(key);
        return;
    }
    // AT FIRST THE OLD WAY IS USED!!
    {
        System.out.println("NOW USING DEPRECATED REGOR!");
        // opening dhe LOCAL_MACHINE entry and software\microsoft - the delimiter is the \\
        int key = regor._openKey(_HKEY_LOCAL_MACHINE, "Software\\Microsoft"), key2 = -1;
        // listing the subkeys
        List l = regor._listKeys(key);
        System.out.println("SOME KEYS....");
        for (// printing out the keys
        int x = 0; // printing out the keys
        l != null && x != l.size(); // printing out the keys
        x++) System.out.println(x + " == " + l.get(x));
        if (// if keys found, use first key to get valueNames
        l.size() > 0)
            key2 = regor._openKey(key, (String) l.get(0));
        // read the valueNames
        l = regor._listValueNames(key2);
        System.out.println("SOME VALUENAMES.....");
        for (// printing it
        int x = 0; // printing it
        l != null && x != l.size(); // printing it
        x++) System.out.println(x + " == " + l.get(x));
        System.out.println("SOME STRING VALUES....");
        for (// getting the String value from the valueNames
        int x = 0; // getting the String value from the valueNames
        l != null && x != l.size(); // getting the String value from the valueNames
        x++) {
            // get the information - if is not a string value, null will be returned
            byte[] buf = regor._readValue(key2, (String) l.get(x));
            // parses the byte buffer to String
            System.out.println(x + ": " + l.get(x) + " == " + RegistryHelper.parseValue(buf));
        }
        // example to access the default valueName - either null or ""
        System.out.println("default entry == " + RegistryHelper.parseValue(regor._readValue(key, null)));
        // accessing a root node
        l = regor._listKeys(_HKEY_LOCAL_MACHINE);
        System.out.println("KEYS FROM LOCAL_MACHINE....");
        for (// printing out the keys
        int x = 0; // printing out the keys
        l != null && x != l.size(); // printing out the keys
        x++) System.out.println(x + " == " + l.get(x));
        regor._closeKey(key2);
        regor._closeKey(key);
    }
    // HERE THE NEW METHOD IS USED
    {
        System.out.println("NOW USING NEW REGOR!");
        Key key = regor.openKey(HKEY_LOCAL_MACHINE, "Software\\Microsoft"), key2 = null;
        // listing the subkeys
        List l = regor.listKeys(key);
        System.out.println("SOME KEYS....");
        for (// printing out the keys
        int x = 0; // printing out the keys
        l != null && x != l.size(); // printing out the keys
        x++) System.out.println(x + " == " + l.get(x));
        if (// if keys found, use first key to get valueNames
        l.size() > 0)
            key2 = regor.openKey(key, (String) l.get(0));
        // read the valueNames
        l = regor.listValueNames(key2);
        System.out.println("SOME VALUENAMES.....");
        for (// printing it
        int x = 0; // printing it
        l != null && x != l.size(); // printing it
        x++) System.out.println(x + " == " + l.get(x));
        System.out.println("SOME STRING VALUES....");
        for (// getting the String value from the valueNames
        int x = 0; // getting the String value from the valueNames
        l != null && x != l.size(); // getting the String value from the valueNames
        x++) {
            // get the information - if is not a string value, null will be returned
            byte[] buf = regor.readValue(key2, (String) l.get(x));
            // parses the byte buffer to String
            System.out.println(x + ": " + l.get(x) + " == " + RegistryHelper.parseValue(buf));
        }
        // example to access the default valueName - either null or ""
        System.out.println("default entry == " + RegistryHelper.parseValue(regor.readValue(key, null)));
        // accessing a root node
        l = regor.listKeys(HKEY_LOCAL_MACHINE);
        System.out.println("KEYS FROM LOCAL_MACHINE....");
        for (// printing out the keys
        int x = 0; // printing out the keys
        l != null && x != l.size(); // printing out the keys
        x++) System.out.println(x + " == " + l.get(x));
        regor.closeKey(key2);
        regor.closeKey(key);
    }
}
