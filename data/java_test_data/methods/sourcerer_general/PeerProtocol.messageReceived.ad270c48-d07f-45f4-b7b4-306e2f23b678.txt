public synchronized void messageReceived(IoSession session, Object message) {
    String msg = (String) message;
    String msgPart2 = msg.substring(1);
    char operation = msg.charAt(0);
    switch(operation) {
        // your deputy is X
        case Constants.DEPUTY_MESSAGE:
            System.out.println("me " + node.port + " got " + msg + " , remainder" + node.deputyHops);
            deputyMessage(msgPart2, session);
            break;
        // I want to connect to you , my id is X and I've jumped M times to get to you
        case Constants.CONNECTION_REQUEST:
            connectMessage(msgPart2, session);
            break;
        // I accept you as a partner of mine and you can have another partners which are [A-B-C-....]
        case Constants.PARTNERSHIP_ACCEPTANCE:
            System.out.println("me " + node.port + " got " + msg + " , remainder" + node.deputyHops);
            node.beginSceduling();
            partnersMessage(msgPart2, session);
            break;
        // I am already in the network but I want you to be my friend
        case Constants.PARTNERSHIP_REQUEST:
            handlePartnershipRequest(session, msgPart2);
            break;
        case Constants.PARTNERSHIP_RESPONSE:
            receivePartnershipResponse(msgPart2, session);
            break;
        // I want from you to send me your bandwidth in order to use it while calculating
        case Constants.BANDWIDTH_REQUEST:
            sendBandwidth(session);
            break;
        // My bandwidth is B
        case Constants.BANDWIDTH_RESPONSE:
            receiveBandwidth(msgPart2, session);
            break;
        // I am leaving now the network
        case Constants.LEAVE_NETWORK:
            terminateConnection(msgPart2, session);
            break;
        // I am gossiping to node P and this message jumped N times
        case Constants.GOSSIPING:
            handleGossipingRequest(msgPart2);
            break;
        // I want from you the buffer map that begins from time T
        case Constants.BUFFERMAP_REQUEST:
            handleBitMapRequest(msgPart2, session);
            break;
        // Here is my buffer map [01111100001......]
        case Constants.BUFFERMAP_RESPONSE:
            getBitMapResponse(msgPart2);
            break;
        // I want from you to send me segment X
        case Constants.SEGMENT_REQUEST:
            handlePingMessage(msgPart2, session);
            break;
        // Here are the segment that you have requested
        case Constants.SEGMENT_RESPONSE:
            handlePongMessage(msgPart2);
            break;
        default:
            System.err.println("MINE-------" + message);
            System.exit(0);
    }
}
