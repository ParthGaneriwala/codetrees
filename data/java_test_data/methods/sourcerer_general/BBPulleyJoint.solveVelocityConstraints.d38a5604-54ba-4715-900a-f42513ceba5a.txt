public void solveVelocityConstraints(final BBTimeStep step) {
    BBBody b1 = m_bodyA;
    BBBody b2 = m_bodyB;
    BBVec2 r1 = mul(b1.getTransform().R, sub(m_localAnchor1, b1.getLocalCenter()));
    BBVec2 r2 = mul(b2.getTransform().R, sub(m_localAnchor2, b2.getLocalCenter()));
    if (m_state == e_atUpperLimit) {
        BBVec2 v1 = add(b1.m_linearVelocity, cross(b1.m_angularVelocity, r1));
        BBVec2 v2 = add(b2.m_linearVelocity, cross(b2.m_angularVelocity, r2));
        float Cdot = -dot(m_u1, v1) - m_ratio * dot(m_u2, v2);
        float impulse = m_pulleyMass * (-Cdot);
        float oldImpulse = m_impulse;
        m_impulse = max(0.0f, m_impulse + impulse);
        impulse = m_impulse - oldImpulse;
        BBVec2 P1 = mul(-impulse, m_u1);
        BBVec2 P2 = mul(-m_ratio * impulse, m_u2);
        b1.m_linearVelocity.add(mul(b1.m_invMass, P1));
        b1.m_angularVelocity += b1.m_invI * cross(r1, P1);
        b2.m_linearVelocity.add(mul(b2.m_invMass, P2));
        b2.m_angularVelocity += b2.m_invI * cross(r2, P2);
    }
    if (m_limitState1 == e_atUpperLimit) {
        BBVec2 v1 = add(b1.m_linearVelocity, cross(b1.m_angularVelocity, r1));
        float Cdot = -dot(m_u1, v1);
        float impulse = -m_limitMass1 * Cdot;
        float oldImpulse = m_limitImpulse1;
        m_limitImpulse1 = max(0.0f, m_limitImpulse1 + impulse);
        impulse = m_limitImpulse1 - oldImpulse;
        BBVec2 P1 = mul(-impulse, m_u1);
        b1.m_linearVelocity.add(mul(b1.m_invMass, P1));
        b1.m_angularVelocity += b1.m_invI * cross(r1, P1);
    }
    if (m_limitState2 == e_atUpperLimit) {
        BBVec2 v2 = add(b2.m_linearVelocity, cross(b2.m_angularVelocity, r2));
        float Cdot = -dot(m_u2, v2);
        float impulse = -m_limitMass2 * Cdot;
        float oldImpulse = m_limitImpulse2;
        m_limitImpulse2 = max(0.0f, m_limitImpulse2 + impulse);
        impulse = m_limitImpulse2 - oldImpulse;
        BBVec2 P2 = mul(-impulse, m_u2);
        b2.m_linearVelocity.add(mul(b2.m_invMass, P2));
        b2.m_angularVelocity += b2.m_invI * cross(r2, P2);
    }
}
