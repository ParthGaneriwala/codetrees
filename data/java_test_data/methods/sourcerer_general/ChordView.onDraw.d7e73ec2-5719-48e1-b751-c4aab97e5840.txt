@Override
protected void onDraw(Canvas canvas) {
    super.onDraw(canvas);
    final int width = getWidth();
    // Figure out where the top of the fretboard is going to be, since
    // it's used to draw stuff
    int fretboardTopY = (HALF_OPEN_STRING_LABEL_SIZE * 2) + OPEN_STRING_LABEL_OFFSET_FROM_FRETBOARD + 3;
    String label = (_chord == null) ? "No Chord" : _chord.getLabelString();
    int[] fingering = (_chord == null) ? new int[NUMBER_OF_STRINGS] : _chord.getFingering();
    if (true) {
        // Draw the label at the top of the screen in the center.
        Rect bounds = new Rect();
        _labelPaint.getTextBounds(label, 0, label.length(), bounds);
        canvas.drawText(label, (width / 2), bounds.height(), _labelPaint);
        fretboardTopY += bounds.height() + OPEN_STRING_LABEL_OFFSET_FROM_FRETBOARD;
    }
    final int stringSpacing = (width - (2 * FRETBOARD_PADDING)) / (NUMBER_OF_STRINGS - 1);
    // Draw the horizontal lines for the fretboard
    for (int i = 1; i < FRETS_TO_DRAW + 1; i++) {
        final int y = fretboardTopY + (i * FRET_SPACING);
        canvas.drawLine(FRETBOARD_PADDING, y, width - FRETBOARD_PADDING, y, _fretboardPaint);
    }
    // Draw the strings over the fretboard
    for (int i = 0; i < NUMBER_OF_STRINGS; i++) {
        final int x = getXForString(i, stringSpacing);
        canvas.drawLine(x, fretboardTopY, x, fretboardTopY + (FRETS_TO_DRAW * FRET_SPACING), _stringPaint);
    }
    // Draw the top of the fretboard
    canvas.drawLine(FRETBOARD_PADDING, fretboardTopY, width - FRETBOARD_PADDING, fretboardTopY, _fretboardTopPaint);
    // Draw the fingering
    final int fingeringSize = (stringSpacing / 2) - 1;
    for (int noteString = 0; noteString < NUMBER_OF_STRINGS; noteString++) {
        int noteFret = fingering[noteString];
        int noteX = getXForString(noteString, stringSpacing);
        if (noteFret == 0 || noteFret == -1) {
            int y = fretboardTopY - (HALF_OPEN_STRING_LABEL_SIZE + OPEN_STRING_LABEL_OFFSET_FROM_FRETBOARD);
            if (noteFret == 0) {
                // Draw an 'O' at the top of the string, it's supposed to be open.
                canvas.drawCircle(noteX, y, HALF_OPEN_STRING_LABEL_SIZE, _openFingeringPaint);
            } else {
                // Draw an X at the top of the string, it is supposed to be muted.
                canvas.drawLine(noteX - HALF_OPEN_STRING_LABEL_SIZE, y - HALF_OPEN_STRING_LABEL_SIZE, noteX + HALF_OPEN_STRING_LABEL_SIZE, y + HALF_OPEN_STRING_LABEL_SIZE, _mutedFingeringPaint);
                canvas.drawLine(noteX - HALF_OPEN_STRING_LABEL_SIZE, y + HALF_OPEN_STRING_LABEL_SIZE, noteX + HALF_OPEN_STRING_LABEL_SIZE, y - HALF_OPEN_STRING_LABEL_SIZE, _mutedFingeringPaint);
            }
        } else {
            // Draw a circle over the indicated fret
            // The y-coordinate is the
            int noteY = fretboardTopY + (FRET_SPACING * noteFret) - (FRET_SPACING / 2);
            canvas.drawCircle(noteX, noteY, // -1 so the edges of circles beside eachother don't touch
            fingeringSize, _fingeringPaint);
        }
    }
}
