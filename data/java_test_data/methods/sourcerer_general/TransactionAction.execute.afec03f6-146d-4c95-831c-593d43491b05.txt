public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest req, HttpServletResponse res) throws Exception {
    // R�cup�ration des valeurs du formulaire
    String resultat = null;
    String nom = ((TransactionForm) form).getNom();
    String prenom = ((TransactionForm) form).getPrenom();
    String email = ((TransactionForm) form).getEmail();
    String ville = ((TransactionForm) form).getVille();
    String cp = ((TransactionForm) form).getCp();
    String adresse = ((TransactionForm) form).getAdresse();
    int annee = ((TransactionForm) form).getAnnee();
    int mois = ((TransactionForm) form).getMois();
    String crypto = ((TransactionForm) form).getCrypto();
    String num_carte = ((TransactionForm) form).getNum_carte();
    String type_carte = ((TransactionForm) form).getType_carte();
    resultat = "succes";
    // on r�cup�_re l'id de l'�tudiant
    HttpSession session = req.getSession(true);
    int idEtudiant = (Integer) session.getAttribute("id");
    // On g�n�re la facture TEMPORAIRE !!!!!!!!!!
    FactureBo factureBo = new FactureBo();
    if (factureBo.getFacture(idEtudiant) == null) {
        factureBo.genererFacture(idEtudiant, "details...", 800);
    }
    // On r�cup�re la facture
    Facture facture = new Facture();
    facture = factureBo.getFacture(idEtudiant);
    req.setAttribute("facture", facture);
    // champs obligatoires
    if (nom.isEmpty() || prenom.isEmpty() || email.isEmpty() || crypto.isEmpty() || num_carte.isEmpty()) {
        resultat = "echec";
    }
    // numero de carte valide
    if (num_carte.length() != 16) {
        resultat = "echec";
    }
    // cryptogramme valide
    if (crypto.length() != 3) {
        resultat = "echec";
    }
    // numero de carte et crypto correctes (v�rification bancaire)
    // (Dans le cadre de ce projet, on simule les relations avec les institutions bancaire, nous n'allons donc pas impl�menter les tests mais nous les envisageons)
    /*if () {
			resultat="echec";
		}*/
    ActionErrors errors = form.validate(mapping, req);
    if (errors.size() == 0) {
        // on met � jour la bdd
        int num_confirm = (int) Math.random() * 100000000;
        factureBo.payerFacture(facture.getIdFacture(), num_confirm);
        resultat = "succes";
    } else
        resultat = "echec";
    return mapping.findForward(resultat);
}
