public ResultSetReifIterator findReifStmt(Node stmtURI, boolean hasType, IDBID graphID, boolean getTriples) {
    String astName = getTblName();
    String gid = graphID.getID().toString();
    ResultSetReifIterator result = new ResultSetReifIterator(this, getTriples, graphID);
    PreparedStatement ps = null;
    boolean objIsBlankOrURI = false;
    int args = 1;
    String stmtStr;
    boolean findAll = (stmtURI == null) || stmtURI.equals(Node.ANY);
    boolean notFound = false;
    if (findAll)
        stmtStr = hasType ? "selectReifiedT" : "selectReified";
    else
        stmtStr = hasType ? "selectReifiedNT" : "selectReifiedN";
    try {
        ps = m_sql.getPreparedSQLStatement(stmtStr, getTblName());
        if (!findAll) {
            String stmt_uri = m_driver.nodeToRDBString(stmtURI, false);
            if (stmt_uri == null)
                notFound = true;
            else
                ps.setString(args++, stmt_uri);
        }
        if (hasType)
            ps.setString(args++, "T");
        ps.setString(args++, gid);
    } catch (Exception e) {
        notFound = true;
        logger.warn("Getting prepared statement for " + stmtStr + " Caught exception ", e);
        // Rethrow in case there is a recovery option
        throw new JenaException("Exception during database access", e);
    }
    if (notFound)
        result.close();
    else {
        try {
            m_sql.executeSQL(ps, stmtStr, result);
        } catch (Exception e) {
            logger.debug("find encountered exception ", e);
            // Rethrow in case there is a recovery option
            throw new JenaException("Exception during database access", e);
        }
    }
    return result;
}
