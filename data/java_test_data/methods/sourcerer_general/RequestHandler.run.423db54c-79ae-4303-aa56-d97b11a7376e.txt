@Override
public void run() {
    ObjectOutputStream out = null;
    BufferedReader in = null;
    String clientHost = clientSock.getInetAddress().getHostName();
    String clientIP = clientSock.getInetAddress().getHostAddress();
    server.printer.print_info("Starting new socket...");
    try {
        out = new ObjectOutputStream(clientSock.getOutputStream());
        // out = new PrintWriter(clientSock.getOutputStream(),true);
        in = new BufferedReader(new InputStreamReader(clientSock.getInputStream()));
        String inputLine = null;
        // VALERIY
        Object response = ClientServerProtocol.WHAT;
        // String response = ClientServerProtocol.WHAT;
        StringBuilder strBuild = new StringBuilder();
        // reads the input line by line and appends in to the string builder
        while ((inputLine = in.readLine()) != null) {
            if (inputLine.equals("")) {
                break;
            }
            if (strBuild.length() > 0) {
                strBuild.append("\n");
            }
            strBuild.append(inputLine);
        }
        String message = strBuild.toString();
        String logMessage = "From Client with host :" + clientHost + " IP: " + clientIP + " Recieved This Message: \n -------------\n" + message + "\n-------------";
        server.printer.print_info(logMessage);
        // get the response
        // VALERIY
        response = respondToMessage(message);
        if (response == null) {
            server.printer.print_error("Can't respond the message");
        } else {
            server.printer.print_info("Send to client: " + response);
            // VALERIY
            // out.writeObject(response);
            out.writeObject(response);
        }
    } catch (IOException ex) {
        server.printer.print_error("Problem reading from Client: " + clientHost + " with IP: " + clientIP + " " + ex.getMessage());
    }
    try {
        if (out != null) {
            out.close();
        }
        if (in != null) {
            in.close();
        }
        if (clientSock != null) {
            clientSock.close();
        }
    } catch (IOException e) {
        server.printer.print_error("Problem closing socket from Client: " + clientHost + " with IP: " + clientIP + " :" + e.getMessage());
    }
}
