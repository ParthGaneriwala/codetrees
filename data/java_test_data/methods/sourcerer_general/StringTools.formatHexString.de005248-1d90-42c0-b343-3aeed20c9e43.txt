public static StringBuffer formatHexString(byte[] b, int bOfs, int bLen, int blockLen, boolean showAscii, StringBuffer sb) {
    int headerLen = 0;
    if (b == null) {
        b = new byte[0];
    }
    if (sb == null) {
        sb = new StringBuffer();
    }
    // byte index
    int bi = (bOfs >= 0) ? bOfs : 0;
    int bMaxNdx = ((bLen >= 0) && ((bi + bLen) <= b.length)) ? (bi + bLen) : b.length;
    /* validate block length */
    if (blockLen <= 0) {
        blockLen = ((bMaxNdx - bi) < 16) ? bLen : 16;
    }
    /* position ruler */
    int rulerLen = (headerLen > blockLen) ? headerLen : blockLen;
    sb.append("    : ** ");
    for (int ri = 1; ri < rulerLen; ) {
        for (int j = ri; (ri < rulerLen) & ((ri - j) < 4); ri++) {
            sb.append("-- ");
        }
        if (ri < rulerLen) {
            sb.append("++ ");
            ri++;
        }
        for (int j = ri; (ri < rulerLen) & ((ri - j) < 4); ri++) {
            sb.append("-- ");
        }
        if (ri < rulerLen) {
            sb.append(format(ri, "00 "));
            ri++;
        }
    }
    sb.append("\n");
    /* byte header */
    if (headerLen > 0) {
        sb.append(format(bi, "0000")).append(": ");
        for (int j = bi; ((j - bi) < headerLen); j++) {
            if (j < bMaxNdx) {
                toHexString(b[j], sb);
            } else {
                sb.append("  ");
            }
            sb.append(" ");
        }
        if (showAscii) {
            sb.append(" ");
            for (int j = bi; ((j - bi) < headerLen); j++) {
                if (j < bMaxNdx) {
                    if ((b[j] >= ' ') && (b[j] <= '~')) {
                        sb.append((char) b[j]);
                    } else {
                        sb.append('.');
                    }
                } else {
                    sb.append(" ");
                }
            }
        }
        sb.append("\n");
        bi += headerLen;
    }
    /* byte data */
    int count = 0;
    for (; bi < bMaxNdx; bi += blockLen) {
        sb.append(format(bi, "0000")).append(": ");
        for (int j = bi; ((j - bi) < blockLen); j++) {
            if (j < bMaxNdx) {
                toHexString(b[j], sb);
                count++;
            } else {
                sb.append("  ");
            }
            sb.append(" ");
        }
        if (showAscii) {
            sb.append(" ");
            for (int j = bi; ((j - bi) < blockLen); j++) {
                if (j < bMaxNdx) {
                    if ((b[j] >= ' ') && (b[j] <= '~')) {
                        sb.append((char) b[j]);
                    } else {
                        sb.append('.');
                    }
                } else {
                    sb.append(" ");
                }
            }
        }
        sb.append("\n");
    }
    sb.append(count).append(" bytes\n");
    return sb;
}
