public void calculate() {
    if (!params.isOntology_default()) {
        String loadOntologyString = setCustomOntology();
        // loaded a correct ontology file?
        if (!loadOntologyString.equals(LOADCORRECT)) {
            status = false;
        // System.out.println("Your ontology file contains errors " + loadOntologyString);
        }
        if (status == true) {
            // check for cycles
            checkOntology(ontology);
            if (status = true) {
                String loadAnnotationString;
                if (!params.isAnnotation_default()) {
                    loadAnnotationString = setCustomAnnotation();
                } else {
                    loadAnnotationString = setDefaultAnnotation();
                }
                // loaded a correct annotation file?
                if (!loadAnnotationString.equals(LOADCORRECT)) {
                    status = false;
                // System.out.println("Your annotation file contains errors " + loadAnnotationString);
                }
                // annotation consistent with ontology ?
                if ((status == true) && (consistency == false)) {
                    status = false;
                    Exception e = new Exception();
                    taskMonitor.setException(e, "None of the labels in your annotation match with the chosen ontology, please check their compatibility.");
                // System.out.println("None of the labels in your annotation match with the chosen ontology, please check their compatibility.");
                }
                if (status == true) {
                    parsedAnnotation = customRemap(annotation, ontology);
                }
            }
        }
    } else {
        String loadAnnotationString;
        String loadFullOntologyString = setFullOntology();
        if (!loadFullOntologyString.equals(LOADCORRECT)) {
            status = false;
        // System.out.println("Your full ontology file contains errors " + loadFullOntologyString);
        }
        if (status == true) {
            // check for cycles
            checkOntology(fullOntology);
            if (status == true) {
                String loadOntologyString = setDefaultOntology(synonymHash);
                if (!loadOntologyString.equals(LOADCORRECT)) {
                    status = false;
                // System.out.println(loadOntologyString);
                }
                if (status == true) {
                    // check for cycles
                    checkOntology(ontology);
                    if (status == true) {
                        if (!params.isAnnotation_default()) {
                            loadAnnotationString = setCustomAnnotation();
                        } else {
                            loadAnnotationString = setDefaultAnnotation();
                        }
                        // loaded a correct annotation file?
                        if (!loadAnnotationString.equals(LOADCORRECT)) {
                            status = false;
                        // System.out.println(loadAnnotationString);
                        }
                        if ((status == true) && (consistency == false)) {
                            status = false;
                            Exception e = new Exception();
                            taskMonitor.setException(e, "None of the labels in your annotation match with the chosen ontology, please check their compatibility.");
                        // System.out.println("None of the labels in your annotation match with the chosen ontology, please check their compatibility.");
                        }
                        if (status == true) {
                            // bug 20/9/2005 changed annotationPanel to ontologyPanel
                            if (params.getOntologyFile().equals(fullGoPath) || params.getOntologyFile().equals(processGoPath) || params.getOntologyFile().equals(functionGoPath) || params.getOntologyFile().equals(componentGoPath)) {
                                parsedAnnotation = customRemap(annotation, ontology);
                            } else // full remap for Slim Ontologies
                            {
                                parsedAnnotation = remap(annotation, ontology);
                            }
                        }
                    }
                }
            }
        }
    }
}
