public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true) {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
            break;
        }
        switch(field.id) {
            case // KEYSPACE
            1:
                if (field.type == TType.STRING) {
                    this.keyspace = iprot.readString();
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case // KEYS
            2:
                if (field.type == TType.LIST) {
                    {
                        TList _list16 = iprot.readListBegin();
                        this.keys = new ArrayList<String>(_list16.size);
                        for (int _i17 = 0; _i17 < _list16.size; ++_i17) {
                            String _elem18;
                            _elem18 = iprot.readString();
                            this.keys.add(_elem18);
                        }
                        iprot.readListEnd();
                    }
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case // COLUMN_PATH
            3:
                if (field.type == TType.STRUCT) {
                    this.column_path = new ColumnPath();
                    this.column_path.read(iprot);
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case // CONSISTENCY_LEVEL
            4:
                if (field.type == TType.I32) {
                    this.consistency_level = ConsistencyLevel.findByValue(iprot.readI32());
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            default:
                TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
}
