static long run_once(int num_threads, ConcurrentMap<String, String> HM, long[] ops, long[] nanos) throws Exception {
    Random R = new Random();
    _start = false;
    _stop = false;
    HM.put("Cliff", "Cliff");
    HM.remove("Cliff");
    int sz = HM.size();
    int xsz = 0;
    while (sz + 1024 < _table_size) {
        int idx = R.nextInt();
        for (int i = 0; i < 1024; i++) {
            String key = KEYS[idx & (KEYS.length - 1)];
            HM.put(key, key);
            idx++;
        }
        sz = HM.size();
    }
    while (sz < ((_table_size >> 1) + (_table_size >> 3))) {
        int trip = 0;
        int idx = R.nextInt();
        while (true) {
            String key = KEYS[idx & (KEYS.length - 1)];
            if (sz < _table_size) {
                if (HM.put(key, key) == null) {
                    sz++;
                    break;
                }
            } else {
                if (HM.remove(key) != null) {
                    sz--;
                    break;
                }
            }
            idx++;
            if ((trip & 15) == 15) {
                idx = R.nextInt();
            }
            if (trip++ > 1024 * 1024) {
                if (trip > 1024 * 1024 + 100) {
                    throw new Exception("barf trip " + sz + " " + HM.size() + " numkeys=" + KEYS.length);
                }
                System.out.println(key);
            }
        }
    }
    if (sz != HM.size()) {
        throw new Error("size does not match table contents sz=" + sz + " size()=" + HM.size());
    }
    // Launch threads
    PerfHashBenchmark[] thrs = new PerfHashBenchmark[num_threads];
    for (int i = 0; i < num_threads; i++) {
        thrs[i] = new PerfHashBenchmark(i, HM, ops, nanos);
    }
    for (int i = 0; i < num_threads; i++) {
        thrs[i].start();
    }
    // Run threads
    long start = System.currentTimeMillis();
    _start = true;
    try {
        Thread.sleep(2000);
    } catch (InterruptedException e) {
    }
    _stop = true;
    long stop = System.currentTimeMillis();
    long millis = stop - start;
    for (int i = 0; i < num_threads; i++) {
        thrs[i].join();
    }
    return millis;
}
