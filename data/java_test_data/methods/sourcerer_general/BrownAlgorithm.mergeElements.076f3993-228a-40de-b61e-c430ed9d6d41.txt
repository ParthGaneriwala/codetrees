@SuppressWarnings("unused")
private void mergeElements(int[] indices, int i, int j, int numElements) {
    int idx_i = indices[i];
    int idx_j = indices[j];
    System.out.println("merging " + Integer.toString(i) + "+" + Integer.toString(j) + " out of " + Integer.toString(numElements));
    // first, update s
    // put the i+j element to i
    // s[idx_i] = s[idx_i] + s[idx_j] - q[idx_i][idx_j] - q[idx_j][idx_i];
    int k = numElements - 1;
    int idx_k = indices[k];
    for (int m = 0; m < numElements; ++m) {
        if (m == i || m == j)
            continue;
        int idx_m = indices[m];
        s[idx_m] -= q[idx_m][idx_i] + q[idx_i][idx_m] + q[idx_m][idx_j] + q[idx_j][idx_m];
        // q(m, i+j)
        double p_m_ij = p[idx_m][idx_i] + p[idx_m][idx_j];
        if (p_m_ij != 0.0) {
            s[idx_m] += p_m_ij * Math.log(p_m_ij / (pl[idx_m] * (pr[idx_i] + pr[idx_j])));
        }
        // q(i+j, m)
        double p_ij_m = p[idx_i][idx_m] + p[idx_j][idx_m];
        if (p_ij_m != 0.0) {
            s[idx_m] += p_ij_m * Math.log(p_ij_m / ((pl[idx_i] + pl[idx_j]) * pr[idx_m]));
        }
    }
    // move the last element to vacant place j
    if (j < k) {
        s[idx_j] = s[idx_k] - q[idx_k][idx_i] - q[idx_i][idx_k] - q[idx_k][idx_j] - q[idx_j][idx_k];
        // q(k, i+j)
        double p_k_ij = p[idx_k][idx_i] + p[idx_k][idx_j];
        if (p_k_ij != 0.0) {
            s[idx_j] += p_k_ij * Math.log(p_k_ij / (pl[idx_k] * (pr[idx_i] + pr[idx_j])));
        }
        // q(i+j, k)
        double p_ij_k = p[idx_i][idx_k] + p[idx_j][idx_k];
        if (p_ij_k != 0.0) {
            s[idx_j] += p_ij_k * Math.log(p_ij_k / ((pl[idx_i] + pl[idx_j]) * pr[idx_k]));
        }
    }
    // update q
    for (int m = 0; m < numElements; ++m) {
        if (m == i || m == j)
            continue;
        int idx_m = indices[m];
        // q(m, i+j)
        double p_m_ij = p[idx_m][idx_i] + p[idx_m][idx_j];
        if (p_m_ij != 0.0) {
            q[idx_m][idx_i] = p_m_ij * Math.log(p_m_ij / (pl[idx_m] * (pr[idx_i] + pr[idx_j])));
        } else {
            q[idx_m][idx_i] = 0.0;
        }
        // q(i+j, m)
        double p_ij_m = p[idx_i][idx_m] + p[idx_j][idx_m];
        if (p_ij_m != 0.0) {
            q[idx_i][idx_m] = p_ij_m * Math.log(p_ij_m / ((pl[idx_i] + pl[idx_j]) * pr[idx_m]));
        } else {
            q[idx_i][idx_m] = 0.0;
        }
    }
    double p_ij_ij = p[idx_i][idx_i] + p[idx_i][idx_j] + p[idx_j][idx_i] + p[idx_j][idx_j];
    if (p_ij_ij != 0.0) {
        q[idx_i][idx_i] = p_ij_ij * Math.log(p_ij_ij / ((pl[idx_i] + pl[idx_j]) * (pr[idx_i] + pr[idx_j])));
    } else {
        q[idx_i][idx_i] = 0.0;
    }
    if (j < k) {
        q[idx_j] = q[idx_k];
        for (int m = 0; m < k; ++m) {
            int idx_m = indices[m];
            q[idx_m][idx_j] = q[idx_m][idx_k];
        }
    }
    // recompute s[i]
    {
        double s_i = 0.0;
        for (int m = 0; m < numElements; ++m) {
            int idx_m = indices[m];
            s_i += q[idx_m][idx_i] + q[idx_i][idx_m];
        }
        s[idx_i] = s_i - q[idx_i][idx_i];
    }
    // now update pl and pr
    pl[idx_i] = pl[idx_i] + pl[idx_j];
    pr[idx_i] = pr[idx_i] + pr[idx_j];
    if (j < k) {
        pl[idx_j] = pl[idx_k];
        pr[idx_j] = pr[idx_k];
    }
    // finally, update p
    p[idx_i][idx_i] = p[idx_i][idx_i] + p[idx_i][idx_j] + p[idx_j][idx_i] + p[idx_j][idx_j];
    for (int m = 0; m < numElements; ++m) {
        if (m == i || m == j)
            continue;
        int idx_m = indices[m];
        p[idx_m][idx_i] = p[idx_m][idx_i] + p[idx_m][idx_j];
        p[idx_i][idx_m] = p[idx_i][idx_m] + p[idx_j][idx_m];
    }
    if (j < k) {
        p[idx_j] = p[idx_k];
        for (int m = 0; m < k; ++m) {
            int idx_m = indices[m];
            p[idx_m][idx_j] = p[idx_m][idx_k];
        }
    }
}
