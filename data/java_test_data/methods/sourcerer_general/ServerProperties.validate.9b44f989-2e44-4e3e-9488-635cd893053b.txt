void validate() {
    Enumeration en = stringProps.propertyNames();
    while (en.hasMoreElements()) {
        String key = (String) en.nextElement();
        Object[] metadata = (Object[]) meta.get(key);
        if (metadata == null) {
            metadata = getPrefixedMetadata(key);
        }
        if (metadata == null) {
            String error = "unsupported property: " + key;
            errorList.add(error);
            continue;
        }
        String error = null;
        if (((Integer) metadata[indexType]).intValue() == SYSTEM_PROPERTY) {
            error = validateSystemProperty(key, metadata);
        } else if (((Integer) metadata[indexType]).intValue() == SERVER_MULTI_PROPERTY) {
            error = validateMultiProperty(key, metadata);
        } else {
            String value = getProperty(key);
            if (value == null) {
                if (metadata[indexDefaultValue] == null) {
                    error = "missing value for property: " + key;
                } else {
                    setProperty(key, metadata[indexDefaultValue].toString());
                }
            } else {
                error = HsqlProperties.validateProperty(key, value, metadata);
            }
        }
        if (error != null) {
            errorList.add(error);
        }
    }
    Iterator it = idToAliasMap.keySet().iterator();
    while (it.hasNext()) {
        int number = it.nextInt();
        if (!idToPathMap.containsKey(number)) {
            errorList.add("no path for database id: " + number);
        }
    }
    it = idToPathMap.keySet().iterator();
    while (it.hasNext()) {
        int number = it.nextInt();
        if (!idToAliasMap.containsKey(number)) {
            errorList.add("no alias for database id: " + number);
        }
    }
    initialised = true;
}
