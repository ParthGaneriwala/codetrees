public ResultSet getTables(String catalog, String schemaPattern, String tableNamePattern, String[] types) throws SQLException {
    if (catalog == null) {
        if (this.conn.getNullCatalogMeansCurrent()) {
            catalog = this.database;
        }
    }
    if (tableNamePattern == null) {
        if (this.conn.getNullNamePatternMatchesAll()) {
            tableNamePattern = "%";
        } else {
            throw SQLError.createSQLException("Table name pattern can not be NULL or empty.", SQLError.SQL_STATE_ILLEGAL_ARGUMENT, getExceptionInterceptor());
        }
    }
    final String tableNamePat;
    List parseList = StringUtils.splitDBdotName(tableNamePattern, "", quotedId, conn.isNoBackslashEscapesSet());
    // There *should* be 2 rows, if any.
    if (parseList.size() == 2) {
        tableNamePat = (String) parseList.get(1);
    } else {
        tableNamePat = tableNamePattern;
    }
    java.sql.PreparedStatement pStmt = null;
    String sql = "SELECT TABLE_SCHEMA AS TABLE_CAT, " + "NULL AS TABLE_SCHEM, TABLE_NAME, " + "CASE WHEN TABLE_TYPE='BASE TABLE' THEN 'TABLE' WHEN TABLE_TYPE='TEMPORARY' THEN 'LOCAL_TEMPORARY' ELSE TABLE_TYPE END AS TABLE_TYPE, " + "TABLE_COMMENT AS REMARKS " + "FROM INFORMATION_SCHEMA.TABLES WHERE " + "TABLE_SCHEMA LIKE ? AND TABLE_NAME LIKE ? AND TABLE_TYPE IN (?,?,?) " + "ORDER BY TABLE_TYPE, TABLE_SCHEMA, TABLE_NAME";
    try {
        pStmt = prepareMetaDataSafeStatement(sql);
        if (catalog != null) {
            pStmt.setString(1, catalog);
        } else {
            pStmt.setString(1, "%");
        }
        pStmt.setString(2, tableNamePat);
        // prepared statement
        if (types == null || types.length == 0) {
            pStmt.setString(3, "BASE TABLE");
            pStmt.setString(4, "VIEW");
            pStmt.setString(5, "TEMPORARY");
        } else {
            pStmt.setNull(3, Types.VARCHAR);
            pStmt.setNull(4, Types.VARCHAR);
            pStmt.setNull(5, Types.VARCHAR);
            for (int i = 0; i < types.length; i++) {
                if ("TABLE".equalsIgnoreCase(types[i])) {
                    pStmt.setString(3, "BASE TABLE");
                }
                if ("VIEW".equalsIgnoreCase(types[i])) {
                    pStmt.setString(4, "VIEW");
                }
                if ("LOCAL TEMPORARY".equalsIgnoreCase(types[i])) {
                    pStmt.setString(5, "TEMPORARY");
                }
            }
        }
        ResultSet rs = executeMetadataQuery(pStmt);
        ((com.mysql.jdbc.ResultSetInternalMethods) rs).redefineFieldsForDBMD(new Field[] { new Field("", "TABLE_CAT", java.sql.Types.VARCHAR, (catalog == null) ? 0 : catalog.length()), new Field("", "TABLE_SCHEM", java.sql.Types.VARCHAR, 0), new Field("", "TABLE_NAME", java.sql.Types.VARCHAR, 255), new Field("", "TABLE_TYPE", java.sql.Types.VARCHAR, 5), new Field("", "REMARKS", java.sql.Types.VARCHAR, 0) });
        return rs;
    } finally {
        if (pStmt != null) {
            pStmt.close();
        }
    }
}
