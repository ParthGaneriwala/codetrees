@Override
protected String go() throws Exception {
    this.start = df.format(new java.util.Date());
    Date enddate = this.getPrevCountDate(7);
    this.end = df.format(enddate);
    UseractionService service = (UseractionService) this.getBean("useractionService");
    Date thedate = null;
    if (date == null || date.equals("")) {
        thedate = new Date();
        date = df.format(thedate);
    } else {
        thedate = com.sxit.stat.util.StatUtil.getDate(date);
    }
    if (orderfield == null || orderfield.equals("")) {
        orderfield = "allvolume";
        ascdesc = "desc";
    }
    if (hour == null || hour.equals("")) {
        Calendar c = Calendar.getInstance();
        int now = c.get(Calendar.HOUR_OF_DAY);
        if (now == 0 || now == 1)
            hour = "01";
        else {
            Date d = new Date();
            long _now = d.getTime();
            d.setTime(_now - 60 * 60 * 1000);
            hour = dfhour.format(d);
        }
    }
    String result = SUCCESS;
    List resultList = null;
    if (firstpage.equals("yes")) {
        if (flag.equals("1")) {
            String stattime = date.replace("-", "");
            float avg = service.getApnDayAverageVolume(apnni, stattime);
            condition = com.sxit.system.util.NumberUtil.toMoney(avg * Float.parseFloat(standard));
            resultList = service.getHightStreamDayCustomerUser(apnni, thedate, condition, getOrderby());
        } else {
            String start = date + " " + hour + ":00:00";
            long _start = com.sxit.stat.util.StatUtil.getDateHourTime(start) / 1000;
            long _end = com.sxit.stat.util.StatUtil.getHourAfterTime((int) _start);
            float avg = service.getApnHourAverageVolume(apnni, _start, _end);
            condition = com.sxit.system.util.NumberUtil.toMoney(avg * Float.parseFloat(standard));
            resultList = service.getHightStreamHourCustomerUser(apnni, thedate, hour, condition, getOrderby());
        }
        set("hightcustomeruser", resultList);
        set("condition", condition);
    } else {
        resultList = (List) get("hightcustomeruser");
        condition = get("condition").toString();
    }
    if (resultType.equals("list")) {
        int totalCount = resultList.size();
        int startIndex = (pageNo - 1) * pageSize;
        List list = new ArrayList();
        for (int i = startIndex; i < totalCount && i < startIndex + pageSize; i++) {
            list.add(resultList.get(i));
        }
        this.page = new PaginationSupport(list, totalCount, pageSize, startIndex);
        top1000users = list;
        result = SUCCESS;
    } else {
        top1000users = resultList;
        result = "excel";
    }
    return result;
}
