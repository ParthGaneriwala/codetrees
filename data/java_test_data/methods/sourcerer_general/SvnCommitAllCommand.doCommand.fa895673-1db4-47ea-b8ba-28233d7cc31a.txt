protected TeamworkCommandResult doCommand() {
    SVNClientInterface client = getClient();
    try {
        // First "svn add" the new files
        Iterator i = newFiles.iterator();
        while (i.hasNext()) {
            File newFile = (File) i.next();
            Status status = client.singleStatus(newFile.getAbsolutePath(), false);
            if (!status.isManaged()) {
                addDir(client, newFile.getParentFile(), files);
                client.add(newFile.getAbsolutePath(), false);
                if (!newFile.isDirectory()) {
                    client.propertySet(newFile.getAbsolutePath(), "svn:eol-style", "native", false);
                }
            }
        }
        // And binary files
        i = binaryNewFiles.iterator();
        while (i.hasNext()) {
            File newFile = (File) i.next();
            Status status = client.singleStatus(newFile.getAbsolutePath(), false);
            if (!status.isManaged()) {
                addDir(client, newFile.getParentFile(), files);
                client.add(newFile.getAbsolutePath(), false);
                if (!newFile.isDirectory()) {
                    client.propertySet(newFile.getAbsolutePath(), "svn:mime-type", "application/octet-stream", false);
                }
            }
        }
        // "svn delete" removed files
        i = deletedFiles.iterator();
        while (i.hasNext()) {
            File newFile = (File) i.next();
            client.remove(new String[] { newFile.getAbsolutePath() }, "", true);
        }
        // now do the commit
        String[] commitFiles = new String[files.size()];
        i = files.iterator();
        for (int j = 0; j < commitFiles.length; j++) {
            File file = (File) i.next();
            commitFiles[j] = file.getAbsolutePath();
        }
        client.commit(commitFiles, commitComment, false);
        if (!isCancelled()) {
            return new TeamworkCommandResult();
        }
    } catch (ClientException ce) {
        if (!isCancelled()) {
            return new TeamworkCommandError(ce.getMessage(), ce.getLocalizedMessage());
        }
    }
    return new TeamworkCommandAborted();
}
