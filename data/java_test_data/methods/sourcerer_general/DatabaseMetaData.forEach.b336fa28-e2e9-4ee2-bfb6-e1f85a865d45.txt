void forEach(Object catalogStr) throws SQLException {
    ResultSet results = null;
    try {
        StringBuffer queryBuf = new StringBuffer("SHOW INDEX FROM ");
        queryBuf.append(quotedId);
        queryBuf.append(table);
        queryBuf.append(quotedId);
        queryBuf.append(" FROM ");
        queryBuf.append(quotedId);
        queryBuf.append(catalogStr.toString());
        queryBuf.append(quotedId);
        try {
            results = stmt.executeQuery(queryBuf.toString());
        } catch (SQLException sqlEx) {
            int errorCode = sqlEx.getErrorCode();
            // it means the table doesn't exist....
            if (!"42S02".equals(sqlEx.getSQLState())) {
                // so use error code instead.
                if (errorCode != MysqlErrorNumbers.ER_NO_SUCH_TABLE) {
                    throw sqlEx;
                }
            }
        }
        while (results != null && results.next()) {
            byte[][] row = new byte[14][];
            row[0] = ((catalogStr.toString() == null) ? new byte[0] : s2b(catalogStr.toString()));
            ;
            row[1] = null;
            row[2] = results.getBytes("Table");
            boolean indexIsUnique = results.getInt("Non_unique") == 0;
            row[3] = (!indexIsUnique ? s2b("true") : s2b("false"));
            row[4] = new byte[0];
            row[5] = results.getBytes("Key_name");
            row[6] = Integer.toString(java.sql.DatabaseMetaData.tableIndexOther).getBytes();
            row[7] = results.getBytes("Seq_in_index");
            row[8] = results.getBytes("Column_name");
            row[9] = results.getBytes("Collation");
            // Cardinality can be much larger than Integer's range,
            // so we clamp it to conform to the API
            long cardinality = results.getLong("Cardinality");
            if (cardinality > Integer.MAX_VALUE) {
                cardinality = Integer.MAX_VALUE;
            }
            row[10] = s2b(String.valueOf(cardinality));
            row[11] = s2b("0");
            row[12] = null;
            if (unique) {
                if (indexIsUnique) {
                    rows.add(new ByteArrayRow(row, getExceptionInterceptor()));
                }
            } else {
                // All rows match
                rows.add(new ByteArrayRow(row, getExceptionInterceptor()));
            }
        }
    } finally {
        if (results != null) {
            try {
                results.close();
            } catch (Exception ex) {
                ;
            }
            results = null;
        }
    }
}
