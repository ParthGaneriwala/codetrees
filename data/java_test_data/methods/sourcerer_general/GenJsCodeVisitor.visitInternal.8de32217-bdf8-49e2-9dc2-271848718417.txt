@Override
protected void visitInternal(TemplateNode node) {
    boolean isCodeStyleStringbuilder = jsSrcOptions.getCodeStyle() == CodeStyle.STRINGBUILDER;
    localVarTranslations = new ArrayDeque<Map<String, JsExpr>>();
    genJsExprsVisitor = genJsExprsVisitorFactory.create(localVarTranslations);
    if (jsSrcOptions.shouldGenerateJsdoc()) {
        jsCodeBuilder.appendLine("/**");
        jsCodeBuilder.appendLine(" * @param {Object.<string, *>=} opt_data");
        if (isCodeStyleStringbuilder) {
            jsCodeBuilder.appendLine(" * @param {soy.StringBuilder=} opt_sb");
            jsCodeBuilder.appendLine(" * @return {string|undefined}");
        } else {
            jsCodeBuilder.appendLine(" * @return {string}");
        }
        jsCodeBuilder.appendLine(" * @notypecheck");
        jsCodeBuilder.appendLine(" */");
    }
    if (isCodeStyleStringbuilder) {
        jsCodeBuilder.appendLine(node.getTemplateName(), " = function(opt_data, opt_sb) {");
    } else {
        jsCodeBuilder.appendLine(node.getTemplateName(), " = function(opt_data) {");
    }
    jsCodeBuilder.increaseIndent();
    localVarTranslations.push(Maps.<String, JsExpr>newHashMap());
    if (!isCodeStyleStringbuilder && isComputableAsJsExprsVisitor.exec(node)) {
        // Case 1: The code style is 'concat' and the whole template body can be represented as JS
        // expressions. We specially handle this case because we don't want to generate the variable
        // 'output' at all. We simply concatenate the JS expressions and return the result.
        List<JsExpr> templateBodyJsExprs = genJsExprsVisitor.exec(node);
        JsExpr templateBodyJsExpr = JsExprUtils.concatJsExprs(templateBodyJsExprs);
        jsCodeBuilder.appendLine("return ", templateBodyJsExpr.getText(), ";");
    } else {
        // Case 2: Normal case.
        jsCodeBuilder.pushOutputVar("output");
        if (isCodeStyleStringbuilder) {
            jsCodeBuilder.appendLine("var output = opt_sb || new soy.StringBuilder();");
            jsCodeBuilder.setOutputVarInited();
        }
        visitChildren(node);
        if (isCodeStyleStringbuilder) {
            jsCodeBuilder.appendLine("if (!opt_sb) return output.toString();");
        } else {
            jsCodeBuilder.appendLine("return output;");
        }
        jsCodeBuilder.popOutputVar();
    }
    localVarTranslations.pop();
    jsCodeBuilder.decreaseIndent();
    jsCodeBuilder.appendLine("};");
}
