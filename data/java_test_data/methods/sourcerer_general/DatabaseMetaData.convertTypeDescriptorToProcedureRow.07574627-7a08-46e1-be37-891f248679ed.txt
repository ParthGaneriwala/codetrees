private ResultSetRow convertTypeDescriptorToProcedureRow(byte[] procNameAsBytes, byte[] procCatAsBytes, String paramName, boolean isOutParam, boolean isInParam, boolean isReturnParam, TypeDescriptor typeDesc, boolean forGetFunctionColumns, int ordinal) throws SQLException {
    byte[][] row = forGetFunctionColumns ? new byte[17][] : new byte[14][];
    // PROCEDURE_CAT
    row[0] = procCatAsBytes;
    // PROCEDURE_SCHEM
    row[1] = null;
    // PROCEDURE/NAME
    row[2] = procNameAsBytes;
    // COLUMN_NAME
    row[3] = s2b(paramName);
    if (isInParam && isOutParam) {
        row[4] = s2b(String.valueOf(procedureColumnInOut));
    } else if (isInParam) {
        row[4] = s2b(String.valueOf(procedureColumnIn));
    } else if (isOutParam) {
        row[4] = s2b(String.valueOf(procedureColumnOut));
    } else if (isReturnParam) {
        row[4] = s2b(String.valueOf(procedureColumnReturn));
    } else {
        row[4] = s2b(String.valueOf(procedureColumnUnknown));
    }
    // DATA_TYPE
    row[5] = s2b(Short.toString(typeDesc.dataType));
    // TYPE_NAME
    row[6] = s2b(typeDesc.typeName);
    // PRECISION
    row[7] = typeDesc.columnSize == null ? null : s2b(typeDesc.columnSize.toString());
    // LENGTH
    row[8] = row[7];
    // SCALE
    row[9] = typeDesc.decimalDigits == null ? null : s2b(typeDesc.decimalDigits.toString());
    // RADIX
    row[10] = s2b(Integer.toString(typeDesc.numPrecRadix));
    // Map 'column****' to 'procedure****'
    switch(typeDesc.nullability) {
        case columnNoNulls:
            // NULLABLE
            row[11] = s2b(String.valueOf(procedureNoNulls));
            break;
        case columnNullable:
            // NULLABLE
            row[11] = s2b(String.valueOf(procedureNullable));
            break;
        case columnNullableUnknown:
            // nullable
            row[11] = s2b(String.valueOf(procedureNullableUnknown));
            break;
        default:
            throw SQLError.createSQLException("Internal error while parsing callable statement metadata (unknown nullability value fount)", SQLError.SQL_STATE_GENERAL_ERROR, getExceptionInterceptor());
    }
    row[12] = null;
    if (forGetFunctionColumns) {
        // CHAR_OCTECT_LENGTH
        row[13] = null;
        // ORDINAL_POSITION
        row[14] = s2b(String.valueOf(ordinal));
        // IS_NULLABLE
        row[15] = Constants.EMPTY_BYTE_ARRAY;
        row[16] = s2b(paramName);
    }
    return new ByteArrayRow(row, getExceptionInterceptor());
}
