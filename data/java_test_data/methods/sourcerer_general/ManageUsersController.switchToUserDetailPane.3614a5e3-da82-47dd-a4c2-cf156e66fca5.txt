@SuppressWarnings("unchecked")
private void switchToUserDetailPane() {
    String username = (String) userList.getSelectedItem().getValue();
    usernameLabel.setValue(username);
    CloudSpaceUser user = UserRegistry.getInstance().getUser(username);
    if (user.isEnabled()) {
        userStatus.setSelectedItem((Radio) userStatus.getFellow("enable"));
    } else {
        userStatus.setSelectedItem((Radio) userStatus.getFellow("disable"));
    }
    if (!user.getAuthenticator().equals(UserRegistry.AUTHENTICATOR_LOCAL)) {
        authType.setSelectedItem(remoteAuth);
        changePasswordButton.setDisabled(true);
    } else {
        authType.setSelectedItem(localAuth);
        changePasswordButton.setDisabled(false);
    }
    memberOfGroupsListbox.getItems().clear();
    List<GrantedAuthority> groups = PermissionsManager.getInstance().getGroupList();
    for (GrantedAuthority group : groups) {
        boolean isMember = PermissionsManager.getInstance().isUserInGroup(username, group);
        Listitem item = new Listitem();
        Listcell checkCell = new Listcell();
        item.appendChild(checkCell);
        Checkbox checkbox = new Checkbox();
        checkbox.setName("membership_" + group.getAuthority());
        checkbox.setChecked(isMember);
        if (group.equals(GroupFactory.ADMIN_GROUP) && isMember && username.equals("admin")) {
            // Don't allow an admin to remove himself from the admin group.
            checkbox.setDisabled(true);
        }
        checkbox.addEventListener("onCheck", groupMembershipEventListener);
        checkCell.appendChild(checkbox);
        Listcell labelCell = new Listcell();
        labelCell.setLabel(group.getAuthority());
        item.appendChild(labelCell);
        memberOfGroupsListbox.getItems().add(item);
    }
    userPermissionsListbox.getItems().clear();
    Map<CSPath, PermissionToken> permissions = PermissionsManager.getInstance().getUserPermissions(username);
    for (CSPath path : permissions.keySet()) {
        PermissionToken permission = permissions.get(path);
        Listitem item = new Listitem();
        item.setValue(permission);
        Listcell pathCell = new Listcell();
        pathCell.setLabel(path.getQualifiedPath());
        pathCell.setValue(path);
        item.appendChild(pathCell);
        Listcell readCell = new Listcell();
        item.appendChild(readCell);
        Checkbox checkbox = new Checkbox();
        checkbox.setName("read_" + path);
        checkbox.setChecked(permission.allowsRead());
        checkbox.addEventListener("onCheck", permissionEventListener);
        readCell.appendChild(checkbox);
        Listcell writeCell = new Listcell();
        item.appendChild(writeCell);
        checkbox = new Checkbox();
        checkbox.setName("write_" + path);
        checkbox.setChecked(permission.allowsWrite());
        checkbox.addEventListener("onCheck", permissionEventListener);
        writeCell.appendChild(checkbox);
        userPermissionsListbox.getItems().add(item);
    }
    userDetailPane.setVisible(true);
    groupDetailPane.setVisible(false);
}
