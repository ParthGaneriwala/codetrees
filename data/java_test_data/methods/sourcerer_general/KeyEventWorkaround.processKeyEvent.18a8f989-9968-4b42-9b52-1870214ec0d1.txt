// }}}
public static KeyEvent processKeyEvent(KeyEvent evt) {
    if (Options.SIMPLIFIED_KEY_HANDLING) {
    } else {
        int keyCode = evt.getKeyCode();
        char ch = evt.getKeyChar();
        switch(evt.getID()) {
            // {{{ KEY_PRESSED...
            case KeyEvent.KEY_PRESSED:
                lastKeyTime = evt.getWhen();
                // get rid of keys we never need to handle
                switch(keyCode) {
                    case '\0':
                        return null;
                    case KeyEvent.VK_ALT:
                        modifiers |= InputEvent.ALT_MASK;
                        break;
                    case KeyEvent.VK_ALT_GRAPH:
                        modifiers |= InputEvent.ALT_GRAPH_MASK;
                        break;
                    case KeyEvent.VK_CONTROL:
                        modifiers |= InputEvent.CTRL_MASK;
                        break;
                    case KeyEvent.VK_SHIFT:
                        modifiers |= InputEvent.SHIFT_MASK;
                        break;
                    case KeyEvent.VK_META:
                        modifiers |= InputEvent.META_MASK;
                        break;
                    default:
                        if (!evt.isMetaDown()) {
                            if (evt.isControlDown() && evt.isAltDown()) {
                                lastKeyTime = 0L;
                            } else if (!evt.isControlDown() && !evt.isAltDown()) {
                                if (isPrintable(keyCode)) {
                                    lastKeyTime = 0L;
                                    return null;
                                }
                            }
                        }
                        if (Debug.ALT_KEY_PRESSED_DISABLED) {
                            /* they're too troublesome */
                            if ((modifiers & InputEvent.ALT_MASK) != 0)
                                return null;
                        }
                        if (isNumericKeypad(keyCode))
                            last = LAST_NUMKEYPAD;
                        else
                            last = LAST_NOTHING;
                        break;
                }
                break;
            // {{{ KEY_TYPED...
            case KeyEvent.KEY_TYPED:
                // in HistoryTextFields
                if (!isMacControl(evt) && (ch < 0x20 || ch == 0x7f || ch == 0xff) && ch != '\b' && ch != '\t' && ch != '\n') {
                    return null;
                }
                if (Debug.DUMP_KEY_EVENTS) {
                    Log.log(Log.DEBUG, "KEWa", "Key event (working around): " + GrabKeyDialog.toString(evt) + ": evt.getWhen()-lastKeyTime=" + (evt.getWhen() - lastKeyTime) + ",modifiers=" + modifiers + ",last=" + last + ".");
                }
                if (evt.getWhen() - lastKeyTime < 750) {
                    if (!Debug.ALTERNATIVE_DISPATCHER) {
                        if (((modifiers & InputEvent.CTRL_MASK) != 0 ^ (modifiers & InputEvent.ALT_MASK) != 0) || (modifiers & InputEvent.META_MASK) != 0) {
                            return null;
                        }
                    }
                    // and NumLock is off, filter it out
                    if (last == LAST_NUMKEYPAD) {
                        last = LAST_NOTHING;
                        if ((ch >= '0' && ch <= '9') || ch == '.' || ch == '/' || ch == '*' || ch == '-' || ch == '+') {
                            return null;
                        }
                    } else // Windows JDK workaround
                    if (last == LAST_ALT) {
                        last = LAST_NOTHING;
                        switch(ch) {
                            case 'B':
                            case 'M':
                            case 'X':
                            case 'c':
                            case '!':
                            case ',':
                            case '?':
                                return null;
                        }
                    }
                } else {
                    if ((modifiers & InputEvent.SHIFT_MASK) != 0) {
                        switch(ch) {
                            case '\n':
                            case '\t':
                                return null;
                        }
                    }
                    modifiers = 0;
                }
                break;
            // {{{ KEY_RELEASED...
            case KeyEvent.KEY_RELEASED:
                switch(keyCode) {
                    case KeyEvent.VK_ALT:
                        modifiers &= ~InputEvent.ALT_MASK;
                        lastKeyTime = evt.getWhen();
                        // we consume this to work around the bug
                        // where A+TAB window switching activates
                        // the menu bar on Windows.
                        evt.consume();
                        break;
                    case KeyEvent.VK_ALT_GRAPH:
                        modifiers &= ~InputEvent.ALT_GRAPH_MASK;
                        break;
                    case KeyEvent.VK_CONTROL:
                        modifiers &= ~InputEvent.CTRL_MASK;
                        break;
                    case KeyEvent.VK_SHIFT:
                        modifiers &= ~InputEvent.SHIFT_MASK;
                        break;
                    case KeyEvent.VK_META:
                        modifiers &= ~InputEvent.META_MASK;
                        break;
                    case KeyEvent.VK_LEFT:
                    case KeyEvent.VK_RIGHT:
                    case KeyEvent.VK_UP:
                    case KeyEvent.VK_DOWN:
                    case KeyEvent.VK_PAGE_UP:
                    case KeyEvent.VK_PAGE_DOWN:
                    case KeyEvent.VK_END:
                    case KeyEvent.VK_HOME:
                        /* workaround for A+keys producing
					 * garbage on Windows */
                        if (modifiers == InputEvent.ALT_MASK)
                            last = LAST_ALT;
                        break;
                }
                break;
        }
    }
    return evt;
}
