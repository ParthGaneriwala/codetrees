static double launch(int numMaps, int numPoints, JobConf jobConf) throws IOException {
    jobConf.setJarByClass(PiEstimator.class);
    jobConf.setJobName("test-mini-mr");
    // turn off speculative execution, because DFS doesn't handle
    // multiple writers to the same file.
    jobConf.setSpeculativeExecution(false);
    jobConf.setInputFormat(SequenceFileInputFormat.class);
    jobConf.setOutputKeyClass(IntWritable.class);
    jobConf.setOutputValueClass(IntWritable.class);
    jobConf.setOutputFormat(SequenceFileOutputFormat.class);
    jobConf.setMapperClass(PiMapper.class);
    jobConf.setReducerClass(PiReducer.class);
    jobConf.setNumReduceTasks(1);
    Path tmpDir = new Path("test-mini-mr");
    Path inDir = new Path(tmpDir, "in");
    Path outDir = new Path(tmpDir, "out");
    FileSystem fileSys = FileSystem.get(jobConf);
    fileSys.delete(tmpDir, true);
    if (!fileSys.mkdirs(inDir)) {
        throw new IOException("Mkdirs failed to create " + inDir.toString());
    }
    FileInputFormat.setInputPaths(jobConf, inDir);
    FileOutputFormat.setOutputPath(jobConf, outDir);
    jobConf.setNumMapTasks(numMaps);
    for (int idx = 0; idx < numMaps; ++idx) {
        Path file = new Path(inDir, "part" + idx);
        SequenceFile.Writer writer = SequenceFile.createWriter(fileSys, jobConf, file, IntWritable.class, IntWritable.class, CompressionType.NONE);
        writer.append(new IntWritable(numPoints), new IntWritable(0));
        writer.close();
    }
    double estimate = 0.0;
    try {
        JobClient.runJob(jobConf);
        Path inFile = new Path(outDir, "reduce-out");
        SequenceFile.Reader reader = new SequenceFile.Reader(FileSystem.get(jobConf), inFile, jobConf);
        IntWritable numInside = new IntWritable();
        IntWritable numOutside = new IntWritable();
        reader.next(numInside, numOutside);
        reader.close();
        estimate = (double) (numInside.get() * 4.0) / (numMaps * numPoints);
    } finally {
        FileSystem.get(jobConf).delete(tmpDir, true);
    }
    return estimate;
}
