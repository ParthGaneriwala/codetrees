// $ANTLR start "call"
public final Compila_doresParser.call_return call() throws RecognitionException {
    Compila_doresParser.call_return retval = new Compila_doresParser.call_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token LPAR113 = null;
    Token RPAR115 = null;
    Compila_doresParser.id_return id112 = null;
    Compila_doresParser.list_expression_return list_expression114 = null;
    CommonTree LPAR113_tree = null;
    CommonTree RPAR115_tree = null;
    RewriteRuleTokenStream stream_RPAR = new RewriteRuleTokenStream(adaptor, "token RPAR");
    RewriteRuleTokenStream stream_LPAR = new RewriteRuleTokenStream(adaptor, "token LPAR");
    RewriteRuleSubtreeStream stream_id = new RewriteRuleSubtreeStream(adaptor, "rule id");
    RewriteRuleSubtreeStream stream_list_expression = new RewriteRuleSubtreeStream(adaptor, "rule list_expression");
    try {
        // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:190:2: ( id LPAR ( list_expression )? RPAR -> ^( CALL id ^( PARAMETER ( list_expression )* ) ) )
        // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:190:4: id LPAR ( list_expression )? RPAR
        {
            pushFollow(FOLLOW_id_in_call1307);
            id112 = id();
            state._fsp--;
            stream_id.add(id112.getTree());
            LPAR113 = (Token) match(input, LPAR, FOLLOW_LPAR_in_call1309);
            stream_LPAR.add(LPAR113);
            // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:190:12: ( list_expression )?
            int alt28 = 2;
            int LA28_0 = input.LA(1);
            if (((LA28_0 >= PLUS && LA28_0 <= MINUS) || LA28_0 == NOT || (LA28_0 >= TRUE && LA28_0 <= FALSE) || LA28_0 == LPAR || (LA28_0 >= ID && LA28_0 <= INTEGER))) {
                alt28 = 1;
            }
            switch(alt28) {
                case 1:
                    // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:190:13: list_expression
                    {
                        pushFollow(FOLLOW_list_expression_in_call1312);
                        list_expression114 = list_expression();
                        state._fsp--;
                        stream_list_expression.add(list_expression114.getTree());
                    }
                    break;
            }
            RPAR115 = (Token) match(input, RPAR, FOLLOW_RPAR_in_call1316);
            stream_RPAR.add(RPAR115);
            // AST REWRITE
            // elements: list_expression, id
            // token labels:
            // rule labels: retval
            // token list labels:
            // rule list labels:
            // wildcard labels:
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.tree : null);
            root_0 = (CommonTree) adaptor.nil();
            // 190:36: -> ^( CALL id ^( PARAMETER ( list_expression )* ) )
            {
                // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:190:39: ^( CALL id ^( PARAMETER ( list_expression )* ) )
                {
                    CommonTree root_1 = (CommonTree) adaptor.nil();
                    root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(CALL, "CALL"), root_1);
                    adaptor.addChild(root_1, stream_id.nextTree());
                    // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:190:49: ^( PARAMETER ( list_expression )* )
                    {
                        CommonTree root_2 = (CommonTree) adaptor.nil();
                        root_2 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(PARAMETER, "PARAMETER"), root_2);
                        // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:190:61: ( list_expression )*
                        while (stream_list_expression.hasNext()) {
                            adaptor.addChild(root_2, stream_list_expression.nextTree());
                        }
                        stream_list_expression.reset();
                        adaptor.addChild(root_1, root_2);
                    }
                    adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
