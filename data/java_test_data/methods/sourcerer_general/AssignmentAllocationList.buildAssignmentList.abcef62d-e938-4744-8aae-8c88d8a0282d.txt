public void buildAssignmentList(Connection db) throws SQLException {
    assignmentList = new ArrayList();
    if (startDate == null || endDate == null || projectsForUser == -1) {
        throw new SQLException("Invalid parameters");
    }
    int i = 0;
    PreparedStatement pst = db.prepareStatement("SELECT * " + "FROM project_assignments a " + "WHERE a.assignment_id > 0 " + "AND (a.project_id in (SELECT DISTINCT project_id FROM project_team WHERE user_id = ? " + "AND status IS NULL )) " + "AND ( " + " (start_date IS NOT NULL AND start_date >= ? AND start_date < ?) OR " + " (est_start_date IS NOT NULL AND est_start_date >= ? AND est_start_date < ?) OR " + " (due_date IS NOT NULL AND due_date > ? AND due_date <= ?) OR " + " (due_date IS NULL AND complete_date IS NOT NULL AND complete_date > ? AND complete_date <= ?) OR " + " (start_date IS NOT NULL AND due_date IS NOT NULL AND start_date <= ? AND due_date >= ?) OR " + " (start_date IS NOT NULL AND due_date IS NULL AND complete_date IS NOT NULL AND start_date <= ? AND complete_date >= ?) OR " + " (est_start_date IS NOT NULL AND due_date IS NOT NULL AND est_start_date <= ? AND due_date >= ?) OR " + " (est_start_date IS NOT NULL AND due_date IS NULL AND complete_date IS NOT NULL AND est_start_date <= ? AND complete_date >= ?) " + ") ");
    pst.setInt(++i, projectsForUser);
    // start
    pst.setTimestamp(++i, startDate);
    pst.setTimestamp(++i, endDate);
    // est start
    pst.setTimestamp(++i, startDate);
    pst.setTimestamp(++i, endDate);
    // due date
    pst.setTimestamp(++i, startDate);
    pst.setTimestamp(++i, endDate);
    // complete date
    pst.setTimestamp(++i, startDate);
    pst.setTimestamp(++i, endDate);
    // start date/due date
    pst.setTimestamp(++i, startDate);
    pst.setTimestamp(++i, endDate);
    // start date/complete date
    pst.setTimestamp(++i, startDate);
    pst.setTimestamp(++i, endDate);
    // est/due date
    pst.setTimestamp(++i, startDate);
    pst.setTimestamp(++i, endDate);
    // est/complete date
    pst.setTimestamp(++i, startDate);
    pst.setTimestamp(++i, endDate);
    ResultSet rs = pst.executeQuery();
    while (rs.next()) {
        Assignment assignment = getAssignment(rs);
        assignmentList.add(assignment);
    }
    rs.close();
    pst.close();
    // build assigned users
    Iterator assignments = assignmentList.iterator();
    while (assignments.hasNext()) {
        Assignment assignment = (Assignment) assignments.next();
        assignment.buildAssignedUserList(db);
    }
}
