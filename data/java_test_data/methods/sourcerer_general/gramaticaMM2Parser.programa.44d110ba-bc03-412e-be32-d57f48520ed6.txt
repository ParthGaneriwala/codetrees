// $ANTLR start "programa"
public final gramaticaMM2Parser.programa_return programa() throws RecognitionException {
    gramaticaMM2Parser.programa_return retval = new gramaticaMM2Parser.programa_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token DOT5 = null;
    Token EOF6 = null;
    gramaticaMM2Parser.cabecalho_return cabecalho1 = null;
    gramaticaMM2Parser.declaracoes_return declaracoes2 = null;
    gramaticaMM2Parser.corpo_return corpo3 = null;
    gramaticaMM2Parser.id_return id4 = null;
    CommonTree DOT5_tree = null;
    CommonTree EOF6_tree = null;
    RewriteRuleTokenStream stream_DOT = new RewriteRuleTokenStream(adaptor, "token DOT");
    RewriteRuleTokenStream stream_EOF = new RewriteRuleTokenStream(adaptor, "token EOF");
    RewriteRuleSubtreeStream stream_id = new RewriteRuleSubtreeStream(adaptor, "rule id");
    RewriteRuleSubtreeStream stream_corpo = new RewriteRuleSubtreeStream(adaptor, "rule corpo");
    RewriteRuleSubtreeStream stream_cabecalho = new RewriteRuleSubtreeStream(adaptor, "rule cabecalho");
    RewriteRuleSubtreeStream stream_declaracoes = new RewriteRuleSubtreeStream(adaptor, "rule declaracoes");
    try {
        // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:78:10: ( cabecalho ( declaracoes )* corpo id DOT EOF -> ^( PROGRAM cabecalho ( declaracoes )* corpo id ) )
        // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:78:12: cabecalho ( declaracoes )* corpo id DOT EOF
        {
            pushFollow(FOLLOW_cabecalho_in_programa578);
            cabecalho1 = cabecalho();
            state._fsp--;
            stream_cabecalho.add(cabecalho1.getTree());
            // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:78:22: ( declaracoes )*
            loop1: do {
                int alt1 = 2;
                int LA1_0 = input.LA(1);
                if ((LA1_0 == VAR || LA1_0 == PROCEDURE)) {
                    alt1 = 1;
                }
                switch(alt1) {
                    case 1:
                        // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:78:22: declaracoes
                        {
                            pushFollow(FOLLOW_declaracoes_in_programa580);
                            declaracoes2 = declaracoes();
                            state._fsp--;
                            stream_declaracoes.add(declaracoes2.getTree());
                        }
                        break;
                    default:
                        break loop1;
                }
            } while (true);
            pushFollow(FOLLOW_corpo_in_programa583);
            corpo3 = corpo();
            state._fsp--;
            stream_corpo.add(corpo3.getTree());
            pushFollow(FOLLOW_id_in_programa585);
            id4 = id();
            state._fsp--;
            stream_id.add(id4.getTree());
            DOT5 = (Token) match(input, DOT, FOLLOW_DOT_in_programa587);
            stream_DOT.add(DOT5);
            EOF6 = (Token) match(input, EOF, FOLLOW_EOF_in_programa589);
            stream_EOF.add(EOF6);
            // AST REWRITE
            // elements: id, cabecalho, declaracoes, corpo
            // token labels:
            // rule labels: retval
            // token list labels:
            // rule list labels:
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", retval != null ? retval.tree : null);
            root_0 = (CommonTree) adaptor.nil();
            // 79:2: -> ^( PROGRAM cabecalho ( declaracoes )* corpo id )
            {
                // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:79:5: ^( PROGRAM cabecalho ( declaracoes )* corpo id )
                {
                    CommonTree root_1 = (CommonTree) adaptor.nil();
                    root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(PROGRAM, "PROGRAM"), root_1);
                    adaptor.addChild(root_1, stream_cabecalho.nextTree());
                    // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:79:25: ( declaracoes )*
                    while (stream_declaracoes.hasNext()) {
                        adaptor.addChild(root_1, stream_declaracoes.nextTree());
                    }
                    stream_declaracoes.reset();
                    adaptor.addChild(root_1, stream_corpo.nextTree());
                    adaptor.addChild(root_1, stream_id.nextTree());
                    adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
