@Override
protected void populateItem(final Item<SyncBaseItem> item) {
    try {
        item.add(new Label("id", item.getModelObject().getId().toString()));
        item.add(new Label("itemType", item.getModelObject().getItemType().getName()));
        item.add(new TextField<String>("health", new IModel<String>() {

            @Override
            public String getObject() {
                return Integer.toString((int) item.getModelObject().getHealth());
            }

            @Override
            public void setObject(String health) {
                item.getModelObject().setHealth(Integer.parseInt(health));
            }

            @Override
            public void detach() {
            }
        }));
        item.add(new TextField<String>("xPos", new IModel<String>() {

            @Override
            public String getObject() {
                Index pos = item.getModelObject().getPosition();
                if (pos != null) {
                    return Integer.toString(pos.getX());
                } else {
                    return NO_POS;
                }
            }

            @Override
            public void setObject(String xPos) {
                if (!NO_POS.equals(xPos)) {
                    if (item.getModelObject().getPosition() != null) {
                        item.getModelObject().setPosition(new Index(Integer.parseInt(xPos), item.getModelObject().getPosition().getY()));
                    } else {
                        item.getModelObject().setPosition(new Index(Integer.parseInt(xPos), 0));
                    }
                }
            }

            @Override
            public void detach() {
            }
        }));
        item.add(new TextField<String>("yPos", new IModel<String>() {

            @Override
            public String getObject() {
                Index pos = item.getModelObject().getPosition();
                if (pos != null) {
                    return Integer.toString(pos.getY());
                } else {
                    return NO_POS;
                }
            }

            @Override
            public void setObject(String yPos) {
                if (!NO_POS.equals(yPos)) {
                    if (item.getModelObject().getPosition() != null) {
                        item.getModelObject().setPosition(new Index(item.getModelObject().getPosition().getX(), Integer.parseInt(yPos)));
                    } else {
                        item.getModelObject().setPosition(new Index(0, Integer.parseInt(yPos)));
                    }
                }
            }

            @Override
            public void detach() {
            }
        }));
        // Kill button
        Button killButton = new Button("kill") {

            @Override
            public void onSubmit() {
                itemService.killSyncItem(item.getModelObject(), null, true, false);
                if (baseService.getBase(simpleBase) == null) {
                    setResponsePage(BasesTable.class);
                }
            }
        };
        item.add(killButton);
        item.add(new CheckBox("select", new IModel<Boolean>() {

            @Override
            public Boolean getObject() {
                return itemsToKill.contains(item.getModelObject().getId());
            }

            @Override
            public void setObject(Boolean allowed) {
                if (allowed) {
                    itemsToKill.add(item.getModelObject().getId());
                } else {
                    itemsToKill.remove(item.getModelObject().getId());
                }
            }

            @Override
            public void detach() {
            // Ignore
            }
        }));
        // alternating row color
        item.add(new AttributeModifier("class", true, new Model<String>(item.getIndex() % 2 == 0 ? "even" : "odd")));
    } catch (RuntimeException e) {
        if (e.getCause() instanceof ItemDoesNotExistException) {
            item.add(new Label("id", ((ItemDoesNotExistException) e.getCause()).getId().toString()));
            item.add(new Label("itemType", "Dead"));
            item.add(createReadonlyTextFiled("health"));
            item.add(createReadonlyTextFiled("xPos"));
            item.add(createReadonlyTextFiled("yPos"));
            Button killButton = new Button("kill") {

                @Override
                public void onSubmit() {
                }
            };
            killButton.setEnabled(false);
            item.add(killButton);
            CheckBox checkBox = new CheckBox("select", new Model<Boolean>(false));
            item.add(checkBox);
            // alternating row color
            item.add(new AttributeModifier("class", true, new Model<String>(item.getIndex() % 2 == 0 ? "even" : "odd")));
        } else {
            throw e;
        }
    }
}
