public void ifIns() throws CompiladorException {
    reconocer("SI");
    Tipo t = Expresion();
    /**
     * RESTRICCIONES
     * El tipo devuelto por expresi√≥n tiene que ser BOOL.
     */
    if (!t.getNombre().toUpperCase().equals("BOOL")) {
        throw new CompiladorException(Errores.dameError("TIPOEXP", tok.getLinea(), null));
    }
    reconocer("ENTONCES");
    int etParcheo = etiqueta;
    instr.add(new Instruccion("ir-f", null));
    etiqueta++;
    String s1 = tok.getCadena().toUpperCase();
    if (s1.equals("{")) {
        pilaTS.push(new TablaSimbolos());
        ts = pilaTS.peek();
        insComp();
        pilaTS.pop();
        ts = pilaTS.peek();
    } else if (s1.equals("SI")) {
        ifIns();
    } else if (s1.equals("MIENTRAS")) {
        whileIns();
    } else if (s1.equals("PARA")) {
        forIns();
    } else {
        throw new CompiladorException(Errores.dameError("IF", tok.getLinea(), null));
    }
    int etParcheo2 = etiqueta;
    instr.add(new Instruccion("ir-a", null));
    etiqueta++;
    parchea(etParcheo, etiqueta);
    restoSi();
    parchea(etParcheo2, etiqueta);
}
