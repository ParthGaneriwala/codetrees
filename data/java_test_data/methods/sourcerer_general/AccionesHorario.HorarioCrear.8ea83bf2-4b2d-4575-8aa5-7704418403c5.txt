public ActionForward HorarioCrear(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
    // Salidas
    final String SALIDA_1 = "horario";
    String salida = SALIDA_1;
    Session s = HibernateUtil.getSessionFactory().getCurrentSession();
    Transaction tr = s.beginTransaction();
    try {
        FHorario fFHorario = (FHorario) form;
        Horario horario = new Horario();
        horario.setDia(fFHorario.getDia());
        horario.setHora(fFHorario.getHora());
        horario.setTipoHora(fFHorario.getTipoHora());
        Oferta obj = (Oferta) s.load(Oferta.class, new Long(fFHorario.getOferta()));
        obj.addToHorario(horario);
        s.flush();
        fFHorario.setIdHorario(horario.getIdHorario());
        // Feed for combo listOferta.
        {
            java.util.List<ve.usb.cohesion.runtime.Pair> list = (java.util.List<ve.usb.cohesion.runtime.Pair>) s.createQuery("select new ve.usb.cohesion.runtime.Pair(periodo.nombre, idOferta) " + "from Oferta").list();
            list.add(0, new ve.usb.cohesion.runtime.Pair("Ninguna", 0));
            fFHorario.setListOferta(list);
        }
        // fFHorario.setOferta(horario.getOferta().getIdOferta());
        request.getSession().setAttribute("idOferta", fFHorario.getOferta());
        request.getSession().setAttribute("idHorario", horario.getIdHorario());
        detectarColision(s, obj, horario);
        tr.commit();
    } catch (Exception ex) {
        tr.rollback();
        throw ex;
    }
    return mapping.findForward(salida);
}
