public ActionForward ModalidadI(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
    // Salidas
    final String SALIDA_0 = "modalidad";
    String salida = SALIDA_0;
    Session s = HibernateUtil.getSessionFactory().getCurrentSession();
    Transaction tr = s.beginTransaction();
    try {
        String id = request.getParameter("idModalidad");
        Long idModalidad = (id == null) ? (Long) request.getSession().getAttribute("idModalidad") : new Long(id);
        HttpSession sess = request.getSession();
        FModalidad fFModalidad = (FModalidad) sess.getAttribute("FModalidad");
        if (fFModalidad == null) {
            fFModalidad = new FModalidad();
            sess.setAttribute("FModalidad", fFModalidad);
        } else {
            fFModalidad.reset(mapping, request);
        }
        Modalidad modalidad = (Modalidad) s.load(Modalidad.class, new Long(idModalidad));
        fFModalidad.setIdModalidad(modalidad.getIdModalidad());
        fFModalidad.setPlanDeEstudios(modalidad.getPlanDeEstudios().getIdPlan());
        fFModalidad.setNombre(modalidad.getNombre());
        for (Asociacion _Asociacion : modalidad.getAsociaciones()) {
            Hibernate.initialize(_Asociacion.getRequisito());
        }
        request.setAttribute("L_Asociacion", modalidad.getAsociaciones());
        for (Asociacion asoc : modalidad.getAsociaciones()) {
            if (asoc.getRequisito() != null)
                asoc.getRequisito().getAsignatura().getCodigo();
        }
        request.getSession().setAttribute("idPlan", fFModalidad.getPlanDeEstudios());
        request.getSession().setAttribute("idModalidad", idModalidad);
        tr.commit();
    } catch (Exception ex) {
        tr.rollback();
        throw ex;
    }
    return mapping.findForward(salida);
}
