@Override
@SuppressWarnings("unchecked")
public void run(final JobConf job, final TaskUmbilicalProtocol umbilical) throws IOException {
    final Reporter reporter = getReporter(umbilical);
    // start thread that will handle communication with parent
    startCommunicationThread(umbilical);
    initialize(job, reporter);
    // check if it is a cleanupJobTask
    if (cleanupJob) {
        runCleanup(umbilical);
        return;
    }
    if (setupJob) {
        runSetupJob(umbilical);
        return;
    }
    int numReduceTasks = conf.getNumReduceTasks();
    LOG.info("numReduceTasks: " + numReduceTasks);
    MapOutputCollector collector = null;
    if (numReduceTasks > 0) {
        collector = new MapOutputBuffer(umbilical, job, reporter);
    } else {
        collector = new DirectMapOutputCollector(umbilical, job, reporter);
    }
    // reinstantiate the split
    try {
        instantiatedSplit = (InputSplit) ReflectionUtils.newInstance(job.getClassByName(splitClass), job);
    } catch (ClassNotFoundException exp) {
        IOException wrap = new IOException("Split class " + splitClass + " not found");
        wrap.initCause(exp);
        throw wrap;
    }
    DataInputBuffer splitBuffer = new DataInputBuffer();
    splitBuffer.reset(split.getBytes(), 0, split.getLength());
    instantiatedSplit.readFields(splitBuffer);
    // if it is a file split, we can give more details
    if (instantiatedSplit instanceof FileSplit) {
        FileSplit fileSplit = (FileSplit) instantiatedSplit;
        job.set("map.input.file", fileSplit.getPath().toString());
        job.setLong("map.input.start", fileSplit.getStart());
        job.setLong("map.input.length", fileSplit.getLength());
    }
    // open input
    RecordReader rawIn = job.getInputFormat().getRecordReader(instantiatedSplit, job, reporter);
    RecordReader in = isSkipping() ? new SkippingRecordReader(rawIn, getCounters(), umbilical) : new TrackedRecordReader(rawIn, getCounters());
    job.setBoolean("mapred.skip.on", isSkipping());
    MapRunnable runner = ReflectionUtils.newInstance(job.getMapRunnerClass(), job);
    try {
        runner.run(in, collector, reporter);
        collector.flush();
    } finally {
        // close
        // close input
        in.close();
        collector.close();
    }
    done(umbilical);
}
