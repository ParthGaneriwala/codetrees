@Test
public void runTest1() throws Exception {
    AnalysisEngine dataWriterAnnotator = AnalysisEngineFactory.createPrimitive(TestAnnotator.class, typeSystemDescription, DirectoryDataWriterFactory.PARAM_OUTPUT_DIRECTORY, outputDirectoryName, CleartkAnnotator.PARAM_DATA_WRITER_FACTORY_CLASS_NAME, DefaultMalletDataWriterFactory.class.getName());
    dataWriterAnnotator.process(jCas);
    dataWriterAnnotator.collectionProcessComplete();
    File trainFile = new MalletClassifierBuilder().getTrainingDataFile(this.outputDirectory);
    BufferedReader reader = new BufferedReader(new FileReader(trainFile));
    reader.readLine();
    reader.close();
    IllegalArgumentException exception = null;
    try {
        Train.main(outputDirectoryName, "asdf");
    } catch (IllegalArgumentException iae) {
        exception = iae;
    }
    assertNotNull(exception);
    exception = null;
    try {
        Train.main(outputDirectoryName, "MaxEnt", "10", "asdf");
    } catch (IllegalArgumentException iae) {
        exception = iae;
    }
    assertNotNull(exception);
    HideOutput hider = new HideOutput();
    Train.main(new String[] { outputDirectoryName, "C45" });
    hider.restoreOutput();
    MalletClassifierBuilder builder = new MalletClassifierBuilder();
    MalletClassifier classifier = builder.loadClassifierFromTrainingDirectory(this.outputDirectory);
    Instance<String> testInstance = new Instance<String>();
    testInstance.add(new Feature("hello", random.nextInt(1000) + 1000));
    String outcome = classifier.classify(testInstance.getFeatures());
    assertEquals("A", outcome);
    testInstance = new Instance<String>();
    testInstance.add(new Feature("hello", 95));
    outcome = classifier.classify(testInstance.getFeatures());
    assertEquals("B", outcome);
    cc.mallet.types.Instance malletInstance = classifier.toInstance(testInstance.getFeatures());
    FeatureVector fv = (FeatureVector) malletInstance.getData();
    assertEquals(95.0, fv.value("hello"), 0.001);
    AnalysisEngine classifierAnnotator = AnalysisEngineFactory.createPrimitive(TestAnnotator.class, typeSystemDescription, GenericJarClassifierFactory.PARAM_CLASSIFIER_JAR_PATH, outputDirectoryName + "/model.jar");
    jCas.reset();
    classifierAnnotator.process(jCas);
    classifierAnnotator.collectionProcessComplete();
}
