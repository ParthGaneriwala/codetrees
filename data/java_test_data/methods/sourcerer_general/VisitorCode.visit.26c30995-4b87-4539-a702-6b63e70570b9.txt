public void visit(FileType n) throws TypeError {
    // Allocation du null
    this.Emit("ALLOC 0");
    // Ajout du descripteur de classe Object
    this.Comment("descripteur de la classe : " + SymbolTable.msDefaultClass);
    int classInhPointer = this.GetUtils().GetClassPointeur(SymbolTable.msDefaultClass);
    this.Emit("PUSHI " + classInhPointer);
    this.GetUtils().IncrSP();
    // Parcours des classes en profondeur de l'arbre d'h�ritage
    Vector<String> inheritedClass = new Vector<String>();
    inheritedClass.add(SymbolTable.msDefaultClass);
    Vector<ClassType> classes = new Vector<ClassType>();
    for (Iterator it = n.classes.iterator(); it.hasNext(); ) {
        classes.add(((ClassType) it.next()));
    }
    // On visite les classes en descendant dans l'arbre d'h�ritage
    // pour avoir les d�clarations des m�thodes et des attributs dans le bon ordre
    // sinon on risque d'en oublier...
    int i = 0;
    boolean oneAcceptDone;
    do {
        oneAcceptDone = false;
        while (i < classes.size()) {
            ClassType classe = classes.elementAt(i);
            if (inheritedClass.contains(classe.class_inh.id_val)) {
                this.VisitClassDescriptor(classe);
                inheritedClass.add(classe.class_id);
                classes.removeElementAt(i);
                oneAcceptDone = true;
                continue;
            }
            i++;
        }
    } while (oneAcceptDone);
    this.Emit("START");
    this.Comment("Allocation de la place pour les variables locales");
    this.Emit("PUSHN " + n.NbVariableDeclare);
    n.main.accept(this);
    this.Emit("POP " + n.NbVariableDeclare);
    this.Emit("STOP");
    for (Iterator it = n.classes.iterator(); it.hasNext(); ) {
        ((ClassType) it.next()).accept(this);
    }
    try {
        this.fileWriter.close();
    } catch (IOException e) {
        e.printStackTrace();
    }
}
