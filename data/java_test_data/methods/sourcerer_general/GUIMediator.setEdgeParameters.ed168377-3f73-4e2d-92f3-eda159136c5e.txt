private void setEdgeParameters(Node srcNode, Node destNode, int srcNodeLevelIndex, int srcNodeIndexInLevel) {
    // Get
    BFSLevel nextLevel = levels.elementAt(srcNodeLevelIndex + 1);
    if (nextLevel.containsNode(destNode)) {
        // The destination node is in the next level of the source node;
        // directed line
        // must be drawn from the bottom center of the source node to the
        // top center of the
        // destination node
        // Get the bottom mid-point of the source node
        DrawingParameters dpSrcNode = nodesVsDrawingParameters.get(srcNode);
        int xcpSrc = dpSrcNode.getXPosition() + (int) ((dpSrcNode.getSize().width) / 2);
        int ycpSrc = dpSrcNode.getYPosition() + dpSrcNode.getSize().height;
        Point srcPoint = new Point(xcpSrc, ycpSrc);
        // Get the top center-point of the destination node
        DrawingParameters dpDestNode = nodesVsDrawingParameters.get(destNode);
        int xcpDest = dpDestNode.getXPosition() + (int) ((dpDestNode.getSize().width) / 2);
        int ycpDest = dpDestNode.getYPosition();
        Point destPoint = new Point(xcpDest, ycpDest);
        // If there is an intersection with the edge with the adjacent node,
        // create a forward Manhattan
        // edge instead of a straight line
        boolean edgeIntersectsWithNeighborNode = edgeIntersectsWithAdjacentNode(srcNodeLevelIndex, srcNodeIndexInLevel, srcPoint, destPoint);
        if (edgeIntersectsWithNeighborNode) {
            createForwardManhattanEdge(srcNode, destNode, srcNodeLevelIndex);
        } else {
            // Calculate the triangle positions of the directed line
            Line line = new Line();
            line.setStartPoint(new Point(srcPoint));
            line.setEndPoint(new Point(destPoint));
            Vector<Line> lines = new Vector<Line>();
            lines.add(line);
            EdgeParameters edgeParameters = new EdgeParameters();
            edgeParameters.setLines(lines);
            // Check if the destination node has some incident edge whose
            // triangle has already
            // been calculated.
            TriangleParameters triangleParams = nodeVsTriangleParams.get(destNode);
            Point[] trianglePositions = calculateTrianglePositions(srcPoint, destPoint, triangleParams, destNode);
            Vector<Point[]> triangles = new Vector<Point[]>();
            triangles.addElement(trianglePositions);
            edgeParameters.setTriangles(triangles);
            edgeParametersList.addElement(edgeParameters);
        }
    } else {
        EdgeParameters eps = createForwardManhattanEdge(srcNode, destNode, srcNodeLevelIndex);
        edgeParametersList.addElement(eps);
    }
}
