/*
	 * public static String _replaceShortcuts(String regex, Map<String, String>
	 * ruleRegexMap) {
	 * 
	 * String result = regex; for (int i = 0; i < regex.length(); i++) { if
	 * (regex.charAt(i) == '#') { String variable = ""; i++; do { variable +=
	 * regex.charAt(i); i++; } while (regex.charAt(i) != '#'); String
	 * replacement = ruleRegexMap.get(variable); if (replacement == null) {
	 * System.err.println("No variable definition entry for " + variable); }
	 * else { result.replaceAll('#' + variable + '#', replacement); } } }
	 * System.out.println(result); return result; }
	 */
HashMap<String, String> getMacroMapFromURL(String urlString) {
    Authenticator.setDefault(new MyAuthenticator());
    URL abkuerzungen = null;
    try {
        abkuerzungen = new URL(urlString);
    // "file:///home/kirschner/workspace/BoB_STELLA/topictree.small.xml"));
    } catch (MalformedURLException e) {
        e.printStackTrace();
    }
    InputStream inputStream = null;
    try {
        inputStream = abkuerzungen.openStream();
    } catch (IOException e) {
        e.printStackTrace();
    }
    BufferedReader in = new BufferedReader(new InputStreamReader(inputStream));
    String line = null;
    StringBuffer buffer = new StringBuffer();
    try {
        inputStream = abkuerzungen.openStream();
        while ((line = in.readLine()) != null) {
            buffer.append(line + "\n");
        }
        // end while
        in.close();
    } catch (IOException e) {
        e.printStackTrace();
    }
    String filecontent = buffer.toString();
    HashMap<String, String> stringMap = new HashMap<String, String>();
    if (filecontent != null) {
        // extract all Shortcuts and RegEx patterns from the Shortcut
        // definition file
        String patternRegex = "^([^=]*)(?: )=(?: )(.*)$";
        Pattern pattern = Pattern.compile(patternRegex, Pattern.MULTILINE);
        Matcher matcher = pattern.matcher(filecontent);
        if (matcher != null) {
            int n_macros = 0;
            while (matcher.find()) {
                n_macros++;
                String value = matcher.group(2).replaceAll("\\$", "&dollar;");
                value = value.replaceAll("\\\\", "&backslash;");
                // System.err.println("adding to MACRO map: " +
                // matcher.group(1) + " -> " + value);
                stringMap.put(matcher.group(1), value);
            // System.err.println("Adding Macro definition for: " +
            // matcher.group(1));
            }
            System.err.println("Number of macro definitions loaded: " + n_macros);
        }
    }
    return stringMap;
}
