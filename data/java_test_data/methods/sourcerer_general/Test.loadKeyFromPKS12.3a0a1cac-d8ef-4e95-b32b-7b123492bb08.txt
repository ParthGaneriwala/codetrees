private void loadKeyFromPKS12() {
    try {
        // Open an input stream on the keystore file
        Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        String pfxFileName = "C:\\tibco/bc/5.2/samples/keys/bcpartner1_key.p12";
        String pfxPassword = "Password1";
        File fPkcs12 = null;
        if (pfxFileName != null) {
            // Open the file
            fPkcs12 = new File(pfxFileName);
        }
        FileInputStream fis = new FileInputStream(fPkcs12);
        // Create a keystore object
        KeyStore keyStore = null;
        try {
            // Need BC provider for PKCS #12, BKS and UBER
            if (Security.getProvider("BC") == null) {
                throw new Exception(" 不能Load入BouncyCastle! ");
            }
            keyStore = KeyStore.getInstance("PKCS12", "BC");
        } catch (KeyStoreException ex) {
            throw new Exception(" 不能正确解释pfx文件! ");
        } catch (NoSuchProviderException ex) {
            throw new Exception(" Security Provider配置有误! ");
        }
        try {
            // Load the file into the keystore
            keyStore.load(fis, pfxPassword.toCharArray());
        } catch (CertificateException ex) {
            throw new Exception(" 证书格式问题! ");
        } catch (NoSuchAlgorithmException ex) {
            throw new Exception(" 算法不支持! ");
        } catch (FileNotFoundException ex) {
            throw new Exception(" pfx文件没找到 ");
        } catch (IOException ex) {
            throw new Exception(ex.getMessage());
        }
        Enumeration enumkey = keyStore.aliases();
        String keyAlias = null;
        if (// we are readin just one certificate.
        enumkey.hasMoreElements()) {
            keyAlias = (String) enumkey.nextElement();
            System.out.println("alias=[" + keyAlias + "]");
        }
        // Now once we know the alias, we could get the keys.
        System.out.println("is key entry=" + keyStore.isKeyEntry(keyAlias));
        PrivateKey prikey = (PrivateKey) keyStore.getKey(keyAlias, pfxPassword.toCharArray());
        Certificate cert = keyStore.getCertificate(keyAlias);
        PublicKey pubkey = cert.getPublicKey();
        System.out.println("cert class = " + cert.getClass().getName());
        System.out.println("cert = " + cert);
        System.out.println("public key = " + pubkey);
        System.out.println("private key = " + prikey);
    // 获取我的证书链的中keyEntry的别名
    // Certificate[] certs  =  keyStore.getCertificateChain( " david.turing " );
    // X509Certificate[] x509Certs  =  X509CertUtil.convertCertificates(certs);
    // 
    // if  (x509Certs  ==   null )
    // {
    // return ;
    // }
    // 
    // x509Certs  =  X509CertUtil.orderX509CertChain(x509Certs);
    // 
    // X509Certificate keyPairCert  =  x509Certs[ 0 ];
    // 
    // int  iKeySize  =  X509CertUtil.getCertificateKeyLength(keyPairCert);
    // System.out.println( " 证书密钥算法= " + keyPairCert.getPublicKey().getAlgorithm());
    // System.out.println( " 证书密钥长度= " + iKeySize);
    } catch (Exception e) {
        e.printStackTrace();
    }
}
