@Transactional(readOnly = true)
public List<Date> verTodosArquivos(Long nuConteudo) {
    List<Date> retorno = new ArrayList<Date>();
    Query q = getEntityManager().createQuery("Select o From " + ItemConteudo.class.getSimpleName() + " o where o.nu_conteudo=:nuConteudo and o.st_situacao='p' order by o.dt_para_publicacao asc");
    q.setMaxResults(1);
    q.setParameter("nuConteudo", nuConteudo);
    SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM");
    // na verdade so vem um para resgatar a data inicial
    List<ItemConteudo> itens = q.getResultList();
    long dataAtual = new Date().getTime();
    if (itens.size() > 0) {
        Date temp = itens.get(0).getDtParaPublicacao();
        String formatado = simpleDateFormat.format(temp);
        String[] anoMes = formatado.split("-");
        int ano, mes;
        ano = Integer.parseInt(anoMes[0]);
        mes = Integer.parseInt(anoMes[1]);
        logger.debug("ano " + ano + " mes " + mes + " inicio");
        while (temp.getTime() < dataAtual) {
            try {
                Date nextDate = somarUmMes(temp);
                long tot = contarItensConteudo(nuConteudo, temp, nextDate);
                if (tot > 0) {
                    retorno.add(temp);
                }
                logger.debug(temp.toString() + " incluido");
                temp = nextDate;
            } catch (Exception e) {
                e.printStackTrace();
                break;
            }
        }
    } else {
        logger.debug("Sem arquivos");
    }
    return retorno;
}
