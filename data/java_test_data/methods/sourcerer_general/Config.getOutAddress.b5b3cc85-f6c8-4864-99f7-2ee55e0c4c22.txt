@SuppressWarnings("unchecked")
static /**
 * ��ȡ�ⲿ��ַ
 */
void getOutAddress() {
    Config.printlnCS("��ȡ�ⲿ��ַ...  " + cPort + " RoutePort " + RoutePort);
    DatagramSocket ds = null;
    try {
        ds = new DatagramSocket(Config.RoutePort);
        ds.setSoTimeout(3000);
    } catch (SocketException e) {
        e.printStackTrace();
    }
    GetOutAddressMessage goam = new GetOutAddressMessage();
    goam.setDstAddress(cIp);
    goam.setDstPort(cPort);
    byte[] data = new byte[1024];
    DatagramPacket dp2 = new DatagramPacket(data, data.length);
    while (true) {
        try {
            ds.send(goam.getDatagramPacket());
            ds.receive(dp2);
        } catch (IOException e) {
            System.out.println("��ȡ�ⲿ��ַ��ʱ");
            continue;
        }
        if (MessageCheck.checkSType(dp2) == peer.tools.MessageType.sType_getOutAddressMessage2) {
            ds.close();
            GetOutAddressMessage2 goam2 = new GetOutAddressMessage2(dp2);
            Config.outIp = goam2.getOutIp();
            Config.outPort = goam2.getOutPort();
            Enumeration enums = null;
            HashMap<InetAddress, ?> hm = new HashMap();
            try {
                enums = NetworkInterface.getNetworkInterfaces();
                while (enums.hasMoreElements()) {
                    NetworkInterface ni = (NetworkInterface) enums.nextElement();
                    Enumeration ips = ni.getInetAddresses();
                    while (ips.hasMoreElements()) {
                        InetAddress ip = (InetAddress) ips.nextElement();
                        hm.put(ip, null);
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
                continue;
            }
            if (checkNodeType) {
                boolean isPubIp = false;
                if (runPubNet) {
                    isPubIp = peer.tools.IpChecker.isPubIp(Config.outIp);
                } else {
                    isPubIp = true;
                }
                if (Config.RoutePort == Config.outPort & hm.containsKey(Config.outIp) & isPubIp) {
                    Config.myNodeType = Config.nodeType_PubNet;
                } else {
                    Config.myNodeType = Config.nodeType_LanNet;
                }
            }
            Config.printlnCS("�ⲿ��ַ " + Config.outIp + ":" + Config.outPort + "  " + Config.myNodeType);
            return;
        }
    }
}
