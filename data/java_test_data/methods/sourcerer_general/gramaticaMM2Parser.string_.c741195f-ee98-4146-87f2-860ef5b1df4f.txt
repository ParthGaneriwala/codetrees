// $ANTLR start "string_"
public final gramaticaMM2Parser.string__return string_() throws RecognitionException {
    gramaticaMM2Parser.string__return retval = new gramaticaMM2Parser.string__return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token ASPA195 = null;
    Token set196 = null;
    Token ASPA197 = null;
    CommonTree ASPA195_tree = null;
    CommonTree set196_tree = null;
    CommonTree ASPA197_tree = null;
    try {
        // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:168:9: ( ASPA ( DIGIT | LETTER )* ASPA )
        // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:168:11: ASPA ( DIGIT | LETTER )* ASPA
        {
            root_0 = (CommonTree) adaptor.nil();
            ASPA195 = (Token) match(input, ASPA, FOLLOW_ASPA_in_string_1893);
            ASPA195_tree = (CommonTree) adaptor.create(ASPA195);
            adaptor.addChild(root_0, ASPA195_tree);
            // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:168:16: ( DIGIT | LETTER )*
            loop38: do {
                int alt38 = 2;
                int LA38_0 = input.LA(1);
                if (((LA38_0 >= DIGIT && LA38_0 <= LETTER))) {
                    alt38 = 1;
                }
                switch(alt38) {
                    case 1:
                        // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:
                        {
                            set196 = (Token) input.LT(1);
                            if ((input.LA(1) >= DIGIT && input.LA(1) <= LETTER)) {
                                input.consume();
                                adaptor.addChild(root_0, (CommonTree) adaptor.create(set196));
                                state.errorRecovery = false;
                            } else {
                                MismatchedSetException mse = new MismatchedSetException(null, input);
                                throw mse;
                            }
                        }
                        break;
                    default:
                        break loop38;
                }
            } while (true);
            ASPA197 = (Token) match(input, ASPA, FOLLOW_ASPA_in_string_1903);
            ASPA197_tree = (CommonTree) adaptor.create(ASPA197);
            adaptor.addChild(root_0, ASPA197_tree);
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
