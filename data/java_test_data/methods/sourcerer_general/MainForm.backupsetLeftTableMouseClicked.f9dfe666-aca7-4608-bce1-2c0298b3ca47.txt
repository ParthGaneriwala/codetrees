// GEN-LAST:event_alertLabelComponentRemoved
private void backupsetLeftTableMouseClicked(java.awt.event.MouseEvent evt) {
    // GEN-FIRST:event_backupsetLeftTableMouseClicked
    DefaultTableModel model = (DefaultTableModel) MainForm.bacupsetViewFileTable.getModel();
    int row = model.getRowCount();
    for (int i = row - 1; i >= 0; i--) {
        model.removeRow(i);
    }
    if (backupsetLeftTable.getSelectedRow() != -1) {
        String filename = System.getProperty("user.home") + "\\" + backupsetLeftTable.getValueAt(backupsetLeftTable.getSelectedRow(), 1);
        boolean status = (Boolean) backupsetLeftTable.getValueAt(backupsetLeftTable.getSelectedRow(), 0);
        if (status) {
            backupSetFilesSize = backupSetFilesSize + getSelectedSizeFromFormatedString(backupsetLeftTable.getValueAt(backupsetLeftTable.getSelectedRow(), 3).toString());
            backupSetSelectedFiles = backupSetSelectedFiles + Integer.parseInt(backupsetLeftTable.getValueAt(backupsetLeftTable.getSelectedRow(), 2).toString());
        } else {
            backupSetFilesSize = backupSetFilesSize - getSelectedSizeFromFormatedString(backupsetLeftTable.getValueAt(backupsetLeftTable.getSelectedRow(), 3).toString());
            backupSetSelectedFiles = backupSetSelectedFiles - Integer.parseInt(backupsetLeftTable.getValueAt(backupsetLeftTable.getSelectedRow(), 2).toString());
        }
        try {
            Thread.sleep(300);
        } catch (Exception ex) {
        }
        File f = new File(filename);
        if (// if f is FILE
        f.isFile()) {
            Date dateModified = new Date(f.lastModified());
            Object[] obj = new Object[] { status, f.getName(), f.getAbsolutePath(), getFormatedFileSize(f.length()), dateModified.getDate() + "/" + (dateModified.getMonth() + 1) + "/" + (dateModified.getYear() + 1900) };
            model.addRow(obj);
        } else // if f is DIRECTORY
        {
            try {
                HashMap files = new HashMap();
                getFileName(f.getAbsolutePath(), files);
                Object[] objArr = files.keySet().toArray();
                int num = objArr.length;
                for (int i = 0; i < num; i++) {
                    Date dateModified = new Date(new File(objArr[i].toString()).lastModified());
                    Object[] obj = new Object[] { status, new File(objArr[i].toString()).getName(), new File(objArr[i].toString()).getAbsolutePath(), getFormatedFileSize(new File(objArr[i].toString()).length()), dateModified.getDate() + "/" + (dateModified.getMonth() + 1) + "/" + (dateModified.getYear() + 1900) };
                    model.addRow(obj);
                }
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
        System.out.println(backupSetFilesSize);
        long quota = (long) setting.getQuota() * 1024 * 1024 * 1024;
        int percentUsed = (int) (backupSetFilesSize * 100 / quota);
        MainForm.ProgressBar.setValue(percentUsed);
        MainForm.UsedDisplayLabel.setText("" + FormatedFileSize.getFormatedFileSize(backupSetFilesSize));
        MainForm.QuotaDisplayLabel.setText("" + setting.getQuota() + " GB");
        MainForm.RemainingDisplayLabel.setText("" + FormatedFileSize.getFormatedFileSize(quota - backupSetFilesSize));
        MainForm.FileDisplayLabel.setText("" + backupSetSelectedFiles);
    }
}
