public static void main(String[] args) throws UnrecoverableKeyException, CertificateException, KeyStoreException, NoSuchAlgorithmException, IOException, KeyManagementException {
    boolean secure = Boolean.parseBoolean(System.getProperty("secure", "true"));
    int server_ssl_port = Integer.parseInt(System.getProperty("server_ssl_port", "7443"));
    int server_hlp_port = Integer.parseInt(System.getProperty("server_hlp_port", "7080"));
    if (secure) {
        String url = "https://localhost:" + server_ssl_port + "/csw/SHUTDOWN";
        String keyStoreFileName = CSWConstants.propDirectory + "csw_client.ks";
        String keyStorePassword = "cs7pass";
        String trustStoreFileName = keyStoreFileName;
        String trustStorePassword = keyStorePassword;
        String alias = "localhost";
        System.setProperty("javax.net.ssl.keyStoreType", "JKS");
        System.setProperty("javax.net.ssl.keyStore", keyStoreFileName);
        System.setProperty("javax.net.ssl.keyStorePassword", keyStorePassword);
        System.setProperty("javax.net.ssl.trustStoreType", "JKS");
        System.setProperty("javax.net.ssl.trustStore", keyStoreFileName);
        System.setProperty("javax.net.ssl.trustStorePassword", keyStorePassword);
        // create key and trust managers
        KeyManager[] keyManagers = createKeyManagers(keyStoreFileName, keyStorePassword, alias);
        TrustManager[] trustManagers = createTrustManagers(trustStoreFileName, trustStorePassword);
        // init context with managers data
        SSLSocketFactory factory = initItAll(keyManagers, trustManagers);
        // get the url and display content
        doitAll(url, factory);
    } else {
        try {
            Socket socket = openSocket("localhost", server_hlp_port);
            String result = writeToReadFromSocket(socket, "GET /csw/SHUTDOWN HTTP/1.1\nHost: localhost\nUser-Agent: csw\n\n");
            System.out.println(result);
            socket.close();
        } catch (Exception e) {
            System.err.println(e);
        }
    }
}
