public static void main(String[] args) {
    OptionParser optParser = new OptionParser(Options.class);
    final Options opts = (Options) optParser.parse(args, true);
    Experiment.initialize(opts.config);
    Experiment experiment = Experiment.getInstance();
    experiment.getTupleDescription();
    JobManager.initialize(6);
    JobManager manager = JobManager.getInstance();
    Thread thread = new Thread(manager, "Job Manager");
    thread.setDaemon(true);
    thread.start();
    EnvironmentConfig envConf = new EnvironmentConfig();
    envConf.setAllowCreate(false);
    // envConf.setSharedCache(true);
    envConf.setTransactional(false);
    try {
        final Environment env = new Environment(new File(opts.db), envConf);
        List<String> dbNames = env.getDatabaseNames();
        JobGroup group = manager.createJobGroup("group");
        for (final String dbName : dbNames) {
            Runnable run = new Runnable() {

                @Override
                public void run() {
                    try {
                        countDb(env, dbName, opts.dump ? dbName + "-dump.txt" : null);
                    } catch (IOException e) {
                        // TODO Auto-generated catch block
                        e.printStackTrace();
                    }
                }
            };
            Job job = new Job(run, dbName);
            manager.addJob(group, job);
        }
        group.join();
        env.close();
    } catch (EnvironmentLockedException e) {
        e.printStackTrace();
    } catch (DatabaseException e) {
        e.printStackTrace();
    }
}
