public static List<KitTimesBean> NoKitTimes(String field, String type) {
    List<KitTimesBean> ktbList = new ArrayList<KitTimesBean>();
    Map<Long, String> map = MapResultService.getMsHistoryMap();
    List<Map.Entry<Long, String>> infoIds = new ArrayList<Map.Entry<Long, String>>(map.entrySet());
    // 排序
    Collections.sort(infoIds, new Comparator<Map.Entry<Long, String>>() {

        public int compare(Map.Entry<Long, String> o1, Map.Entry<Long, String> o2) {
            return (int) (o2.getKey() - o1.getKey());
        }
    });
    // 计算持续未出次数
    Map<String, Integer> nonKitTimesMap = new HashMap<String, Integer>();
    for (int j = 1; j <= 49; j++) {
        int count = 0;
        for (int i = 0; i < infoIds.size(); i++) {
            Map.Entry<Long, String> v = infoIds.get(i);
            if (v.getValue().equals(String.valueOf(j))) {
                break;
            }
            // System.out.println(v.getKey()+"="+v.getValue());
            count = count + 1;
        }
        // System.out.println(String.valueOf(j)+"="+count);
        nonKitTimesMap.put(String.valueOf(j), count);
    }
    // 计算累计已经出次数
    Map<String, Integer> totalKitTimesMap = new HashMap<String, Integer>();
    for (int i = 0; i < infoIds.size(); i++) {
        Map.Entry<Long, String> v = infoIds.get(i);
        Integer iVal = 1;
        if (totalKitTimesMap.containsKey(v.getValue())) {
            iVal = totalKitTimesMap.remove(v.getValue());
            iVal = iVal + 1;
        }
        totalKitTimesMap.put(v.getValue(), iVal);
    }
    for (int j = 1; j <= 49; j++) {
        int nkt = nonKitTimesMap.get(String.valueOf(j));
        Integer tkt = totalKitTimesMap.get(String.valueOf(j));
        ktbList.add(new KitTimesBean(j, nkt, Double.parseDouble(tkt.toString())));
    }
    if (field != null && "nonKitTimes".toLowerCase().equals(field.toLowerCase())) {
        if ("desc".toLowerCase().equals(type.toLowerCase())) {
            Collections.sort(ktbList, new Comparator<KitTimesBean>() {

                public int compare(KitTimesBean o1, KitTimesBean o2) {
                    return (int) (o2.getNonKitTimes() - o1.getNonKitTimes());
                }
            });
        } else {
            Collections.sort(ktbList, new Comparator<KitTimesBean>() {

                public int compare(KitTimesBean o1, KitTimesBean o2) {
                    return (int) (o1.getNonKitTimes() - o2.getNonKitTimes());
                }
            });
        }
    } else if (field != null && "totalKitTimes".toLowerCase().equals(field.toLowerCase())) {
        if ("desc".toLowerCase().equals(type.toLowerCase())) {
            Collections.sort(ktbList, new Comparator<KitTimesBean>() {

                public int compare(KitTimesBean o1, KitTimesBean o2) {
                    return (int) (o2.getTotalKitTimes() - o1.getTotalKitTimes());
                }
            });
        } else {
            Collections.sort(ktbList, new Comparator<KitTimesBean>() {

                public int compare(KitTimesBean o1, KitTimesBean o2) {
                    return (int) (o1.getTotalKitTimes() - o2.getTotalKitTimes());
                }
            });
        }
    }
    return ktbList;
}
