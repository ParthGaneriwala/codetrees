public Tipo AsigOIncr(Tipo tip) throws CompiladorException {
    /**
     * Asignación ++,-- (Incremento/Decremento)
     */
    if ((tok.getCadena()).equals("++") || (tok.getCadena()).equals("--")) {
        /**
         * RESTRICCIONES
         * Si el tipo del token no es entero o real,
         * no se puede aplicar incremento o decremento
         */
        if (!(tip.getNombre().equals("ENT") || tip.getNombre().equals("REAL"))) {
            throw new CompiladorException(Errores.dameError("TIPOSINCOMPATIBLES", tok.getLinea(), null));
        }
        /**
         * copia(2) :: Instrucción que copia los dos valores que están
         * más arriba en la pila.
         */
        instr.add(new Instruccion("copia", 2));
        etiqueta++;
        instr.add(new Instruccion("apila-ind", null));
        etiqueta++;
        insertaCod(tok.getCadena());
        instr.add(new Instruccion("desapila-ind", null));
        etiqueta++;
        reconocer();
        return tip;
    } else if (esOpAsig()) {
        if (tok.getCadena().equals(":=")) {
            /**
             * Asignación :=
             */
            reconocer(":=");
            Tipo s = Expresion();
            instr.add(new Instruccion("desapila-ind", null));
            etiqueta++;
            return s;
        } else {
            /**
             * Asignación +=. -=, *=, /=, %=
             */
            String op = tok.getCadena();
            reconocer();
            /**
             * copia(2) :: Instrucción que copia los dos valores que están
             * más arriba en la pila.
             */
            instr.add(new Instruccion("copia", 2));
            etiqueta++;
            instr.add(new Instruccion("apila-ind", null));
            etiqueta++;
            Tipo s = Expresion();
            insertaCod(op);
            instr.add(new Instruccion("desapila-ind", null));
            etiqueta++;
            return s;
        }
    } else if (tok.getCadena().toUpperCase().equals("=")) {
        /**
         * Asignación punteros, reservando memoria
         */
        reconocer("=");
        /**
         * RESTRICCIONES
         * La variable no es un puntero
         */
        if (!tip.getNombre().equals("PUNTERO")) {
            throw new CompiladorException(Errores.dameError("TIPOSINCOMPATIBLES", tok.getLinea(), null));
        }
        if (tok.getCadena().toUpperCase().equals("NUEVO")) {
            reconocer("NUEVO");
            Tipo t = tipo();
            /**
             * RESTRICCIONES
             * El tipo creado tiene que ser el mismo
             * que el tipo base del puntero
             */
            if (!((Puntero) tip).getTipo().equals(t)) {
                throw new CompiladorException(Errores.dameError("TIPOSINCOMPATIBLES", tok.getLinea(), null));
            }
            instr.add(new Instruccion("apila-h", null));
            etiqueta++;
            instr.add(new Instruccion("desapila-ind", null));
            etiqueta++;
            instr.add(new Instruccion("incrementaH", t.getTam()));
            etiqueta++;
            return t;
        }
        throw new CompiladorException(Errores.dameError("DECINCOMPLETA", tok.getLinea(), null));
    }
    return tip;
}
