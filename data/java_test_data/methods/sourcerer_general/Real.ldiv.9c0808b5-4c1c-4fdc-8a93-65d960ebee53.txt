private static long ldiv(long a, long b) {
    // Calculate (a<<63)/b, where a<2**64, b<2**63, b<=a and a<2*b The
    // result will always be 63 bits, leading to a 3-stage radix-2**21
    // (very high radix) algorithm, as described here:
    // S.F. Oberman and M.J. Flynn, "Division Algorithms and
    // Implementations," IEEE Trans. Computers, vol. 46, no. 8,
    // pp. 833-854, Aug 1997 Section 4: "Very High Radix Algorithms"
    // Approximate 1/b, never more than 24 bits
    int bInv24;
    // High 24 bits of a (sometimes 25 bits)
    int aHi24;
    // The next 21 bits of result, possibly 1 less
    int next21;
    // Resulting quotient: round((a<<63)/b)
    long q;
    // Preparations
    bInv24 = (int) (0x400000000000L / ((b >>> 40) + 1));
    aHi24 = (int) (a >> 32) >>> 8;
    // aHi24 and a overlap by 4 bits
    a <<= 20;
    // Now perform the division
    next21 = (int) (((long) aHi24 * (long) bInv24) >>> 26);
    // Bits above 2**64 will always be cancelled
    a -= next21 * b;
    // No need to remove remainder, this will be cared for in next block
    q = next21;
    aHi24 = (int) (a >> 32) >>> 7;
    a <<= 21;
    // Two more almost identical blocks...
    next21 = (int) (((long) aHi24 * (long) bInv24) >>> 26);
    a -= next21 * b;
    q = (q << 21) + next21;
    aHi24 = (int) (a >> 32) >>> 7;
    a <<= 21;
    next21 = (int) (((long) aHi24 * (long) bInv24) >>> 26);
    a -= next21 * b;
    q = (q << 21) + next21;
    // Remove final remainder
    if (a < 0 || a >= b) {
        q++;
        a -= b;
    }
    a <<= 1;
    // Round correctly
    if (a < 0 || a >= b)
        q++;
    return q;
}
