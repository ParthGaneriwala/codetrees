public Set<Link> getLinks(Set<String> kws) {
    log.info("start to get links from internet with keywords");
    Set<Link> links = new LinkedHashSet<Link>();
    File folder = new File(Thread.currentThread().getContextClassLoader().getResource(SearchEngine_Folder_Name).getFile());
    log.info("links config folder is " + folder.getPath());
    if (folder.exists() && folder.isDirectory()) {
        // load limited site list in config file
        Properties limiteds = new Properties();
        try {
            limiteds.load(Thread.currentThread().getContextClassLoader().getResourceAsStream(Limited_Sites_FileName));
        } catch (IOException e2) {
            // TODO Auto-generated catch block
            e2.printStackTrace();
        }
        if (log.isDebugEnabled()) {
            log.debug("limited sites as following");
            for (Object o : limiteds.values()) {
                log.debug(o.toString());
            }
        }
        Date spiderDate = new Date();
        for (File config : folder.listFiles()) {
            log.info("links config file " + config.getName());
            Properties prop = new Properties();
            try {
                prop.load(Thread.currentThread().getContextClassLoader().getResourceAsStream(SearchEngine_Folder_Name + "/" + config.getName()));
            } catch (IOException e) {
                e.printStackTrace();
            }
            if (!Boolean.valueOf(prop.getProperty(Search_Enabled))) {
                log.info("links config file " + config.getName() + " is disabled");
                continue;
            }
            log.info("begin to search with links config file " + config.getName());
            String _encoding = prop.getProperty(Search_Keyword_Encoding);
            String _other_params = prop.getProperty(Search_Other_Parameters);
            String _charset = prop.getProperty(Search_Target_Charset);
            String regex = prop.getProperty(Search_Result_Regular_Rule);
            Pattern pattern = Pattern.compile(regex);
            for (String kw : kws) {
                StringBuffer url = new StringBuffer(prop.getProperty(Search_Target));
                try {
                    url.append("?").append(prop.getProperty(Search_Keyword_Parameter)).append("=").append(URLEncoder.encode(kw, _encoding));
                } catch (UnsupportedEncodingException e1) {
                    // TODO Auto-generated catch block
                    e1.printStackTrace();
                }
                url.append("&").append(_other_params);
                log.debug("request address for keyword " + kw + " is " + url.toString());
                String response = doGet(url.toString(), _charset);
                if (StringUtils.isEmpty(response)) {
                    continue;
                }
                // StringBuffer regex = new StringBuffer("<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" id=\"\\d+\"><tr><td class=f><a").append(".*")
                // .append("href=\"(http://.*)\"")//link url
                // .append("\\s+").append("target=\"_blank\"").append("\\s+").append("><font size=\"\\d+\">")
                // .append("(.*)")//link title
                // .append("</font></a><br><font size=-1>")
                // .append("(.*)")//link description
                // .append("<br><font color=\"#[A-Za-z0-9]{6}\">");
                Matcher matcher = pattern.matcher(response);
                nextLink: while (matcher.find()) {
                    String linkUrl = matcher.group(1);
                    for (Object o : limiteds.values()) {
                        if (linkUrl.contains(o.toString())) {
                            log.debug("web link " + linkUrl + " is denied!");
                            continue nextLink;
                        }
                    }
                    String linkName = matcher.group(2);
                    log.debug("find web link: " + linkName + " [" + linkUrl + "]");
                    Link link = new Link();
                    link.setLinkUrl(linkUrl);
                    link.setLinkName(linkName.replaceAll("<.*?>", ""));
                    link.setLinkComment(matcher.group(3).replaceAll("<.*?>", ""));
                    link.setVoteNumber(0);
                    link.setBatchTime(spiderDate);
                    link.setLinkTime(new Date());
                    log.debug(link.getLinkComment());
                    links.add(link);
                }
            }
            log.info("end to search with links config file " + config.getName());
        }
    }
    log.info(links.size() + " links are returned");
    return links;
}
