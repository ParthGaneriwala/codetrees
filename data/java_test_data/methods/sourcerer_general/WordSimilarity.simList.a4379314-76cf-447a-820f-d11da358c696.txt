public static double simList(List<String> list1, List<String> list2) {
    if (list1.isEmpty() && list2.isEmpty())
        return 1;
    int m = list1.size();
    int n = list2.size();
    int big = m > n ? m : n;
    int N = (m < n) ? m : n;
    int count = 0;
    // int index1 = 0, index2 = 0;
    double sum = 0;
    double max = 0;
    // ����������
    Map<String, Double> map = new HashMap<String, Double>();
    for (int i = 0; i < list1.size(); i++) {
        for (int j = 0; j < list2.size(); j++) {
            double sim = innerSimWord(list1.get(i), list2.get(j));
            map.put(i + "#" + j, sim);
        }
    }
    while (count < N) {
        max = 0;
        String index = "";
        for (String key : map.keySet()) {
            double sim = map.get(key);
            if (sim >= max) {
                max = sim;
                index = key;
            }
        }
        sum += max;
        // remove the useless value in the temp map.
        map.remove(index);
        int sharp_index = index.indexOf('#');
        // if(sharp_index==-1){
        // System.out.println(list1);
        // System.out.println(list2);
        // }
        String str1 = index.substring(0, sharp_index);
        String str2 = index.substring(sharp_index + 1);
        Set<String> keys = new HashSet<String>(map.keySet());
        for (String key : keys) {
            if (key.startsWith(str1 + '#') || key.endsWith('#' + str2)) {
                map.remove(key);
            }
        }
        count++;
    }
    // }
    return (sum + delta * (big - N)) / big;
}
