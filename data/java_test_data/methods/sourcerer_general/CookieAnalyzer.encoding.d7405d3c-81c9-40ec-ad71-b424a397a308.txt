public String encoding() {
    int type = 0;
    Iterator<String> valuesIterator = values.iterator();
    String value = "";
    while (valuesIterator.hasNext()) {
        value = value + valuesIterator.next().toString();
    }
    // Regex to find ASCII strings
    Pattern p = Pattern.compile("^[\\x00-\\x7F]+$");
    Matcher m = p.matcher(value);
    if (m.find()) {
        type = ASCII;
    }
    // Regex to find base64 strings
    p = Pattern.compile("^[A-Za-z0-9/=]+$");
    m = p.matcher(value);
    if (m.find()) {
        type = BASE64;
    }
    // Regex to find hexadecimal strings
    p = Pattern.compile("^[0-9a-fA-F]+$");
    m = p.matcher(value);
    if (m.find()) {
        type = HEX;
    }
    // Regex to find SHA1 Hash Strings
    p = Pattern.compile("^[0-9a-fA-F]{40}$");
    m = p.matcher(value);
    if (m.find()) {
        type = SHA1;
    }
    // Regex to find MD5 Hash strings
    p = Pattern.compile("^[0-9a-fA-F]{32}$");
    m = p.matcher(value);
    if (m.find()) {
        type = MD5;
    }
    // Regex to find decimal strings
    p = Pattern.compile("^[0-9]+$");
    m = p.matcher(value);
    if (m.find()) {
        type = DECIMAL;
    }
    // Regex to find binary strings
    p = Pattern.compile("^[01]+$");
    m = p.matcher(value);
    if (m.find()) {
        type = BINARY;
    }
    // Returns type based on regex findings
    if (type == HEX) {
        return "Hexadecimal";
    } else if (type == ASCII) {
        return "ASCII";
    } else if (type == DECIMAL) {
        return "Decimal";
    } else if (type == BASE64) {
        return "Base64";
    } else if (type == MD5) {
        return "MD5 Hash";
    } else if (type == BINARY) {
        return "Binary";
    } else if (type == SHA1) {
        return "SHA1 Hash";
    } else {
        return "Unknown Character Set";
    }
}
