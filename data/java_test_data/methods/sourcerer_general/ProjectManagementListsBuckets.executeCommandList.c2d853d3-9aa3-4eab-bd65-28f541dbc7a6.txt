public String executeCommandList(ActionContext context) {
    Connection db = null;
    // Parameters
    String projectId = context.getRequest().getParameter("pid");
    String categoryId = context.getRequest().getParameter("cid");
    if (categoryId == null) {
        categoryId = context.getRequest().getParameter("categoryId");
    }
    String table = context.getRequest().getParameter("table");
    if (table == null || "null".equals(table)) {
        table = "functional_area";
    }
    String value = context.getRequest().getParameter("value");
    try {
        db = getConnection(context);
        // Load the project
        Project thisProject = retrieveAuthorizedProject(Integer.parseInt(projectId), context);
        if (!hasProjectAccess(context, thisProject.getId(), "project-lists-view")) {
            return "PermissionError";
        }
        context.getRequest().setAttribute("project", thisProject);
        context.getRequest().setAttribute("IncludeSection", "lists_buckets");
        // Establish a trailMap per project
        TrailMap trailMap = new TrailMap();
        trailMap.addItems(context.getRequest().getParameter("trail"));
        if (value != null) {
            trailMap.addItems(value);
        }
        context.getRequest().setAttribute("trailMap", trailMap);
        // Load the category
        TaskCategory thisCategory = new TaskCategory(db, Integer.parseInt(categoryId));
        context.getRequest().setAttribute("category", thisCategory);
        // Create an unset column
        ProjectItem unsetItem = new ProjectItem();
        unsetItem.setName("(unset)");
        unsetItem.setId(-1);
        unsetItem.setProjectId(thisProject.getId());
        // Build the values in which the item can be moved between
        ProjectItemList itemList = new ProjectItemList();
        itemList.setProjectId(projectId);
        itemList.setEnabled(Constants.TRUE);
        if ("owner".equals(table)) {
            // Convert the team to ProjectItems to use in bucket list
            TeamMemberList team = new TeamMemberList();
            team.setProjectId(thisProject.getId());
            team.setMinimumRoleLevel(TeamMember.VIP);
            team.buildList(db);
            Iterator i = team.iterator();
            while (i.hasNext()) {
                TeamMember thisMember = (TeamMember) i.next();
                User thisUser = UserUtils.loadUser(thisMember.getUserId());
                ProjectItem item = new ProjectItem();
                item.setId(thisMember.getUserId());
                item.setName(thisUser.getNameFirstLast());
                itemList.add(item);
            }
            itemList.setObjectKeyProperty("owner");
        } else {
            itemList.buildList(db, "lookup_task_" + table);
            itemList.setObjectKeyProperty(TaskList.getPropertyKey("lookup_task_" + table));
        }
        itemList.add(0, unsetItem);
        context.getRequest().setAttribute("itemList", itemList);
        // Build the list items for the selected category
        TaskList outlineList = new TaskList();
        outlineList.setProjectId(thisProject.getId());
        outlineList.setCategoryId(Integer.parseInt(categoryId));
        trailMap.applyFilters(outlineList);
        outlineList.setComplete(Constants.FALSE);
        outlineList.buildList(db);
        HashMap<Integer, String> taskUrlMap = new HashMap<Integer, String>();
        for (Task t : outlineList) {
            String linkItemUrl = TaskUtils.getLinkItemUrl(getUser(context), ctx(context), t);
            if (linkItemUrl != null) {
                taskUrlMap.put(t.getId(), linkItemUrl);
            }
        }
        context.getRequest().setAttribute("taskUrlMap", taskUrlMap);
        context.getRequest().setAttribute("outlineList", outlineList);
        // Build lookup lists
        ProjectItemList functionalAreaList = new ProjectItemList();
        functionalAreaList.setProjectId(thisProject.getId());
        functionalAreaList.buildList(db, ProjectItemList.LIST_FUNCTIONAL_AREA);
        functionalAreaList.add(0, unsetItem);
        context.getRequest().setAttribute("functionalAreaList", functionalAreaList);
        ProjectItemList complexityList = new ProjectItemList();
        complexityList.setProjectId(thisProject.getId());
        complexityList.buildList(db, ProjectItemList.LIST_COMPLEXITY);
        complexityList.add(0, unsetItem);
        context.getRequest().setAttribute("complexityList", complexityList);
        ProjectItemList businessValueList = new ProjectItemList();
        businessValueList.setProjectId(thisProject.getId());
        businessValueList.buildList(db, ProjectItemList.LIST_VALUE);
        businessValueList.add(0, unsetItem);
        context.getRequest().setAttribute("businessValueList", businessValueList);
        ProjectItemList targetSprintList = new ProjectItemList();
        targetSprintList.setProjectId(thisProject.getId());
        targetSprintList.buildList(db, ProjectItemList.LIST_TARGET_SPRINT);
        targetSprintList.add(0, unsetItem);
        context.getRequest().setAttribute("targetSprintList", targetSprintList);
        ProjectItemList targetReleaseList = new ProjectItemList();
        targetReleaseList.setProjectId(thisProject.getId());
        targetReleaseList.buildList(db, ProjectItemList.LIST_TARGET_RELEASE);
        targetReleaseList.add(0, unsetItem);
        context.getRequest().setAttribute("targetReleaseList", targetReleaseList);
        ProjectItemList statusList = new ProjectItemList();
        statusList.setProjectId(thisProject.getId());
        statusList.buildList(db, ProjectItemList.LIST_STATUS);
        statusList.add(0, unsetItem);
        context.getRequest().setAttribute("statusList", statusList);
        ProjectItemList loeRemainingList = new ProjectItemList();
        loeRemainingList.setProjectId(thisProject.getId());
        loeRemainingList.buildList(db, ProjectItemList.LIST_LOE_REMAINING);
        loeRemainingList.add(0, unsetItem);
        context.getRequest().setAttribute("loeRemainingList", loeRemainingList);
        return ("ProjectCenterOK");
    } catch (Exception errorMessage) {
        context.getRequest().setAttribute("Error", errorMessage);
        return ("SystemError");
    } finally {
        this.freeConnection(context, db);
    }
}
