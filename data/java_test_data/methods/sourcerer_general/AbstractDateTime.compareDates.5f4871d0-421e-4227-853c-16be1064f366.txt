// --------------------------------------------------------------------
// This code is adapated from Xerces 2.6.0 AbstractDateTimeDV.
// Copyright (c) 1999-2003 The Apache Software Foundation.  All rights
// reserved.
// --------------------------------------------------------------------
protected short compareDates(int[] date1, int[] date2, boolean strict) {
    if (date1[utc] == date2[utc]) {
        return compareOrder(date1, date2);
    }
    short c1, c2;
    int[] tempDate = new int[TOTAL_SIZE];
    int[] timeZone = new int[2];
    if (date1[utc] == 'Z') {
        // compare date1<=date1<=(date2 with time zone -14)
        // 
        // clones date1 value to global temporary storage: fTempDate
        cloneDate(date2, tempDate);
        timeZone[hh] = 14;
        timeZone[mm] = 0;
        tempDate[utc] = '+';
        normalize(tempDate, timeZone);
        c1 = compareOrder(date1, tempDate);
        if (c1 == LESS_THAN)
            return c1;
        // compare date1>=(date2 with time zone +14)
        // 
        // clones date1 value to global temporary storage: tempDate
        cloneDate(date2, tempDate);
        timeZone[hh] = 14;
        timeZone[mm] = 0;
        tempDate[utc] = '-';
        normalize(tempDate, timeZone);
        c2 = compareOrder(date1, tempDate);
        if (c2 == GREATER_THAN)
            return c2;
        return INDETERMINATE;
    } else if (date2[utc] == 'Z') {
        // compare (date1 with time zone -14)<=date2
        // 
        // clones date1 value to global temporary storage: tempDate
        cloneDate(date1, tempDate);
        timeZone[hh] = 14;
        timeZone[mm] = 0;
        tempDate[utc] = '-';
        normalize(tempDate, timeZone);
        c1 = compareOrder(tempDate, date2);
        if (c1 == LESS_THAN)
            return c1;
        // compare (date1 with time zone +14)<=date2
        // 
        // clones date1 value to global temporary storage: tempDate
        cloneDate(date1, tempDate);
        timeZone[hh] = 14;
        timeZone[mm] = 0;
        tempDate[utc] = '+';
        normalize(tempDate, timeZone);
        c2 = compareOrder(tempDate, date2);
        if (c2 == GREATER_THAN)
            return c2;
        return INDETERMINATE;
    }
    return INDETERMINATE;
}
