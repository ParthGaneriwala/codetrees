public void startITraqRov(int aIndex) {
    final int iIndex = aIndex;
    QuantitativeValidationSingelton iQuantitativeValidationSingelton = QuantitativeValidationSingelton.getInstance();
    iQuantitativeValidationSingelton.setUseOnlyValidRatioForProteinMean(true);
    // 1.check the files
    // update progress bar
    Vector<File> lFiles = iParent.getFiles(iIndex);
    Vector<DatFile> lDatFiles = new Vector<DatFile>();
    progressBar.setMaximum(lFiles.size() + 1);
    progressBar.setValue(0);
    progressBar.setString("");
    progressBar.setStringPainted(true);
    progressBar.setIndeterminate(false);
    // set checking files
    lblCheckFiles.setEnabled(true);
    setIconOnPanel(jpanCheck, "clock.png", 3, 1);
    Vector<File> lMgfFiles = new Vector<File>();
    Vector<File> lRovFiles = new Vector<File>();
    for (int i = 0; i < lFiles.size(); i++) {
        if (lFiles.get(i).getAbsolutePath().endsWith(".mgf")) {
            lMgfFiles.add(lFiles.get(i));
        } else if (lFiles.get(i).getAbsolutePath().endsWith(".rov")) {
            lRovFiles.add(lFiles.get(i));
        }
    }
    progressBar.setMaximum(lMgfFiles.size() + 1);
    progressBar.setValue(0);
    progressBar.setString("");
    progressBar.setStringPainted(true);
    progressBar.setIndeterminate(false);
    // check if you have a .rov file for every mgf file
    for (int i = 0; i < lMgfFiles.size(); i++) {
        // update progress bar
        progressBar.setValue(progressBar.getValue() + 1);
        progressBar.setString("Checking " + lMgfFiles.get(i).getName() + " .");
        boolean lRovFound = false;
        File lRovFile = null;
        String lMgfFileName = lMgfFiles.get(i).getName().substring(0, lMgfFiles.get(i).getName().indexOf("."));
        for (int j = 0; j < lRovFiles.size(); j++) {
            String lRovFileName = lRovFiles.get(j).getName().substring(0, lRovFiles.get(j).getName().indexOf("."));
            if (lRovFileName.indexOf(lMgfFileName) > -1) {
                // we found the corresponding rov file
                lRovFile = lRovFiles.get(j);
                lRovFound = true;
            }
        }
        if (!lRovFound) {
        // no rov file was found for this mgf file
        } else {
            // we need to unzip the rov file
            try {
                File lDatFile = null;
                File lTempfolder = File.createTempFile("temp", "temp").getParentFile();
                File lTempRovFolder = new File(lTempfolder, "rover");
                if (lTempRovFolder.exists() == false) {
                    lTempRovFolder.mkdir();
                }
                File lTempUnzippedRovFileFolder = new File(lTempRovFolder, lRovFile.getName());
                lTempUnzippedRovFileFolder.deleteOnExit();
                if (!lTempUnzippedRovFileFolder.exists()) {
                    // Folder does not exist yet.
                    if (!lTempUnzippedRovFileFolder.mkdir()) {
                        // Making of folder failed, quit!
                        iParent.passHotPotato(new Throwable("Unable to create temporary directory ' " + lTempUnzippedRovFileFolder.getName() + "' for distiller rov project '" + lRovFile.getName() + "'!!"));
                        // If temporary dir could not be created, return null to stop the process.
                        return;
                    }
                    // Unzip the files in the new temp folder
                    BufferedOutputStream out = null;
                    ZipInputStream in = new ZipInputStream(new BufferedInputStream(new FileInputStream(lRovFile)));
                    ZipEntry entry;
                    while ((entry = in.getNextEntry()) != null) {
                        int count;
                        byte[] data = new byte[1000];
                        // write the files to the disk
                        out = new BufferedOutputStream(new FileOutputStream(lTempUnzippedRovFileFolder.getPath() + "/" + entry.getName()), 1000);
                        while ((count = in.read(data, 0, 1000)) != -1) {
                            out.write(data, 0, count);
                        }
                        out.flush();
                        out.close();
                    }
                    in.close();
                }
                // Ok, all files should have been unzipped  in the lTempUnzippedRovFileFolder by now.
                // Try to find the distiller xml file..
                File[] lUnzippedRovFiles = lTempUnzippedRovFileFolder.listFiles();
                for (int j = 0; j < lUnzippedRovFiles.length; j++) {
                    File lUnzippedRovFile = lUnzippedRovFiles[j];
                    if (lUnzippedRovFile.getName().toLowerCase().indexOf("mdro_search_status+1") != -1) {
                        lDatFile = lUnzippedRovFile;
                    }
                }
                if (lDatFile == null) {
                    // If we get here, it means that the mascot result file was not found in the unzipped directory!
                    iParent.passHotPotato(new Throwable("Peptide identification file was not found in the Distiller project file '" + lRovFile.getName() + "'!"));
                    return;
                } else {
                    // we found the dat file and have the mgf file
                    lDatFiles.add(new DatFile(lDatFile, lMgfFiles.get(i), iFlamable));
                }
            } catch (IOException e) {
                logger.error(e.getMessage(), e);
            }
        }
    }
    // update progress bar
    progressBar.setIndeterminate(true);
    // Show in the gui that we found all the rov files
    setIconOnPanel(jpanCheck, "apply.png", 3, 2);
    // set id done
    lblId.setEnabled(true);
    setIconOnPanel(jpanId, "apply.png", 3, 3);
    // set quant done
    lblQuant.setEnabled(true);
    setIconOnPanel(jpanQuant, "apply.png", 3, 4);
    // 3.match ids to quantitations
    // update progress bar
    progressBar.setString("");
    progressBar.setStringPainted(true);
    progressBar.setIndeterminate(false);
    progressBar.setMaximum(lDatFiles.size() + 1);
    progressBar.setValue(0);
    // set match loading
    lblMatch.setEnabled(true);
    setIconOnPanel(jpanMatch, "clock.png", 3, 5);
    Vector<RatioGroupCollection> lRatioGroupCollection = new Vector<RatioGroupCollection>();
    for (int i = 0; i < lDatFiles.size(); i++) {
        // update progress bar
        progressBar.setValue(progressBar.getValue() + 1);
        progressBar.setString("Matching identification with ratios from dat file number " + (i + 1) + " of " + lDatFiles.size() + " mascot result files");
        lRatioGroupCollection.add(lDatFiles.get(i).getITraqRatioGroupCollection(iParent, iParent.getThreshold(iIndex)));
        iCollection.add(lDatFiles.get(i).getITraqRatioGroupCollection(iParent, iParent.getThreshold(iIndex)));
        iCollectionIndexes.add(iIndex);
        // _____Do garbage collection______
        System.gc();
    }
    // update progress bar
    progressBar.setString("");
    progressBar.setStringPainted(false);
    progressBar.setIndeterminate(true);
    // 6. get all the protein accessions from the identifications
    for (int i = 0; i < lRatioGroupCollection.size(); i++) {
        for (int j = 0; j < lRatioGroupCollection.get(i).size(); j++) {
            RatioGroup lRatioGroup = lRatioGroupCollection.get(i).get(j);
            String[] lAccessionsForRatioGroup = lRatioGroup.getProteinAccessions();
            for (int k = 0; k < lAccessionsForRatioGroup.length; k++) {
                // check if it's a new accession
                boolean lNewAccession = true;
                for (int l = 0; l < iProteinAccession.size(); l++) {
                    if (iProteinAccession.get(l).equalsIgnoreCase(lAccessionsForRatioGroup[k])) {
                        lNewAccession = false;
                    }
                }
                if (lNewAccession) {
                    iProteinAccession.add(lAccessionsForRatioGroup[k]);
                }
            }
        }
    }
    if (lRatioGroupCollection.size() == 0) {
        // show gui
        JOptionPane.showMessageDialog(iParent, "No quantitative data could be found!\n The program will close.", "INFO", JOptionPane.INFORMATION_MESSAGE);
        iParent.close();
    }
    // 7.A get the types of the ratios from the first distiller ratio collecion
    Vector<String> lRatioList = lRatioGroupCollection.get(0).getRatioTypes();
    String[] lRatioTypes = new String[lRatioList.size()];
    lRatioList.toArray(lRatioTypes);
    iCollectionRatios.add(lRatioTypes);
    // 7.B get the types of the ratios from the first distiller ratio collecion
    Vector<String> lComponentList = lRatioGroupCollection.get(0).getComponentTypes();
    String[] lComponentTypes = new String[lComponentList.size()];
    lComponentList.toArray(lComponentTypes);
    iCollectionComponents.add(lComponentTypes);
    // set match done
    setIconOnPanel(jpanMatch, "apply.png", 3, 5);
}
