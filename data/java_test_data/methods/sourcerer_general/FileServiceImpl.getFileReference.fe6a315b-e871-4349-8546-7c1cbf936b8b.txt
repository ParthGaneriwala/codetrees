private FileServiceEntry getFileReference(DocumentListEntry entry) {
    FileServiceEntry doc = new FileServiceEntry();
    doc.setType(entry.getType());
    doc.setDocumentId(entry.getDocId());
    doc.setResourceId(entry.getResourceId());
    doc.setTitle(entry.getTitle().getPlainText());
    doc.setIdentifier(doc.getTitle().replaceAll("[^a-zA-Z0-9_\\-\\.]", ""));
    doc.setAuthor(entry.getAuthors().get(0).getEmail());
    doc.setCreated(new Date(entry.getPublished().getValue()));
    doc.setEdited(new Date(entry.getEdited().getValue()));
    doc.setEditor(entry.getLastModifiedBy().getName());
    doc.setEtag(entry.getEtag());
    doc.setStarred(entry.isStarred());
    String prefix = getResourceIdPrefix(entry.getResourceId());
    if (prefix != null && prefix.equalsIgnoreCase("document")) {
        doc.setContentType("text/plain");
        doc.setContentLink(DOCS_SCOPE + "download/documents/Export?exportFormat=txt&docID=" + entry.getResourceId());
    } else if (prefix != null && prefix.equalsIgnoreCase("spreadsheet")) {
        doc.setContentType("text/tab-separated-values");
        doc.setContentLink(SPREADSHEETS_SCOPE + "download/spreadsheets/Export?exportFormat=tsv&key=" + entry.getResourceId());
    } else {
        MediaContent mc = (MediaContent) entry.getContent();
        doc.setContentType(mc.getMimeType().getMediaType());
        doc.setContentLink(mc.getUri());
    }
    List<Link> parents = entry.getParentLinks();
    String[] folders = new String[parents.size()];
    for (int i = 0; i < parents.size(); i++) {
        folders[i] = parents.get(i).getTitle();
    }
    doc.setFolders(folders);
    return doc;
}
