public static ImageIcon disable(ImageIcon ic, Color c) {
    ImageIcon dicon;
    int search;
    search = search(ic);
    if (search < 0 || disabled.get(search) == null) {
        bimage = new BufferedImage(ic.getIconWidth(), ic.getIconHeight(), BufferedImage.TYPE_INT_RGB);
        Graphics g = bimage.getGraphics();
        g.setColor(reserved);
        g.fillRect(0, 0, bimage.getWidth(), bimage.getHeight());
        g.drawImage(ic.getImage(), 0, 0, null);
        float[] rgb = new float[3];
        for (int i = 0; i < bimage.getWidth(); i++) {
            for (int j = 0; j < bimage.getHeight(); j++) {
                int RGB = bimage.getRGB(i, j);
                Color temp = new Color(RGB);
                rgb = temp.getColorComponents(rgb);
                if (bimage.getRGB(i, j) != reserved.getRGB()) {
                    double f = 255 * rgb[0] / 3 + 255 * rgb[1] / 3 + 255 * rgb[2] / 3;
                    if (f > 200)
                        f = 190;
                    if (f < 150)
                        f = 150;
                    int F = (int) f;
                    String h = Integer.toHexString(F);
                    String H = h + h + h;
                    bimage.setRGB(i, j, Integer.parseInt(H, 16));
                } else {
                    bimage.setRGB(i, j, c.getRGB());
                }
            }
        }
        g.dispose();
        dicon = new ImageIcon(bimage);
        if (search < 0) {
            icons.add(ic);
            /*
                 * Keep the sizes of the mapped objects (right now its the
                 * embossed and disabled icons lists) in sync by adding null 
                 * to the ones we are not processing now
                 */
            embossed.add(null);
            disabled.add(dicon);
        } else {
            disabled.set(search, dicon);
        }
        return dicon;
    } else {
        return (ImageIcon) disabled.get(search);
    }
}
