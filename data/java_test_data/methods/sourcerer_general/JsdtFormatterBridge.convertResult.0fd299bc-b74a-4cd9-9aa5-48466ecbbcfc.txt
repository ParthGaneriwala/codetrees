private Result convertResult(String sourceString, TextEdit textEdit) {
    IntBuffer intBuffer = new IntBuffer();
    final Position origPos = new Position(0, 0);
    final Position dstPos = new Position(0, 0);
    TextEdit[] editList = textEdit.getChildren();
    int sourceStringPos = 0;
    int editListPos = 0;
    int nextLineEndPos = sourceString.indexOf(LINE_END_CHAR);
    final StringBuilder builder = new StringBuilder();
    // Iterate over all edits and all untouched line ends.
    while (true) {
        ReplaceEdit replaceEdit;
        int nextEditPos = -1;
        {
            // Find next applicable edit. This is a potential cycle if we skip some changes.
            if (editListPos < editList.length) {
                if (editList[editListPos] instanceof ReplaceEdit == false) {
                    throw new RuntimeException();
                }
                replaceEdit = (ReplaceEdit) editList[editListPos];
                nextEditPos = replaceEdit.getOffset();
            } else {
                replaceEdit = null;
            }
        }
        // Choose what comes first: line end or edit.
        boolean processLineEndNotEdit;
        if (nextEditPos == -1) {
            if (nextLineEndPos == -1) {
                break;
            } else {
                processLineEndNotEdit = true;
            }
        } else {
            if (nextLineEndPos == -1) {
                processLineEndNotEdit = false;
            } else {
                processLineEndNotEdit = nextLineEndPos < nextEditPos;
            }
        }
        if (processLineEndNotEdit) {
            // Process next line end.
            builder.append(sourceString.substring(sourceStringPos, nextLineEndPos + 1));
            origPos.line++;
            origPos.col = 0;
            dstPos.line++;
            dstPos.col = 0;
            sourceStringPos = nextLineEndPos + 1;
            nextLineEndPos = sourceString.indexOf(LINE_END_CHAR, sourceStringPos);
        } else {
            // Process next edit.
            builder.append(sourceString.substring(sourceStringPos, nextEditPos));
            origPos.col += nextEditPos - sourceStringPos;
            dstPos.col += nextEditPos - sourceStringPos;
            origPos.writeToArray(intBuffer);
            dstPos.writeToArray(intBuffer);
            // Count removed line ends.
            if (replaceEdit.getLength() > 0) {
                String removedString = sourceString.substring(replaceEdit.getOffset(), replaceEdit.getOffset() + replaceEdit.getLength());
                origPos.advanceToString(removedString);
            }
            // Count added line ends.
            builder.append(replaceEdit.getText());
            dstPos.advanceToString(replaceEdit.getText());
            origPos.writeToArray(intBuffer);
            dstPos.writeToArray(intBuffer);
            sourceStringPos = nextEditPos + replaceEdit.getLength();
            editListPos++;
            if (nextLineEndPos != -1 && nextLineEndPos < sourceStringPos) {
                nextLineEndPos = sourceString.indexOf(LINE_END_CHAR, sourceStringPos);
            }
        }
    }
    builder.append(sourceString.substring(sourceStringPos));
    origPos.col += sourceString.length() - sourceStringPos;
    dstPos.col += sourceString.length() - sourceStringPos;
    final int[] inputArray = new int[intBuffer.size() / 2];
    final int[] formattedArray = new int[intBuffer.size() / 2];
    for (int i = 0; i < inputArray.length; i += 2) {
        inputArray[i] = intBuffer.get(i * 2 + 0);
        inputArray[i + 1] = intBuffer.get(i * 2 + 1);
        formattedArray[i] = intBuffer.get(i * 2 + 2);
        formattedArray[i + 1] = intBuffer.get(i * 2 + 3);
    }
    final StringMappingData inputTextData = new StringMappingData(inputArray, origPos.line, origPos.col);
    final StringMappingData formattedTextData = new StringMappingData(formattedArray, dstPos.line, dstPos.col);
    return new Result() {

        public String getFormattedText() {
            return builder.toString();
        }

        public StringMappingData getInputTextData() {
            return inputTextData;
        }

        public StringMappingData getFormattedTextData() {
            return formattedTextData;
        }
    };
}
