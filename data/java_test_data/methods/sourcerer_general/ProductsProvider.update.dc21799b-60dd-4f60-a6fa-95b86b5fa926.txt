@Override
public int update(Uri uri, ContentValues initialValues, String selection, String[] selectionArgs) {
    Log.i(TAG, "update called for: " + uri);
    ContentValues values;
    if (initialValues != null) {
        values = new ContentValues(initialValues);
    } else {
        values = new ContentValues();
    }
    SQLiteDatabase db = mOpenHelper.getWritableDatabase();
    int count;
    switch(URI_MATCHER.match(uri)) {
        case PRODUCTS:
            count = db.update(Products.TABLE_NAME, values, selection, selectionArgs);
            break;
        case PRODUCTS_ID:
            String productId = uri.getPathSegments().get(1);
            // If product name is set query or insert it to obtain a name_id
            if (values.containsKey(ProductsNames.NAME)) {
                long nameId = queryOrInsertName(values.getAsString(ProductsNames.NAME));
                values.remove(ProductsNames.NAME);
                values.put(Products.NAME_ID, nameId);
            }
            // If product brand is set query or insert it to obtain a brand_id
            if (values.containsKey(ProductsBrands.BRAND)) {
                long brandId = queryOrInsertBrand(values.getAsString(ProductsBrands.BRAND));
                values.remove(ProductsBrands.BRAND);
                values.put(Products.BRAND_ID, brandId);
            }
            count = db.update(Products.TABLE_NAME, values, Products._ID + "=" + productId + (!TextUtils.isEmpty(selection) ? " AND (" + selection + ')' : ""), selectionArgs);
            break;
        case LISTS:
            count = db.update(Lists.TABLE_NAME, values, selection, selectionArgs);
            break;
        case LIST_ID:
            // contains rowId
            String listId = uri.getPathSegments().get(1);
            count = db.update(Lists.TABLE_NAME, values, Lists._ID + "=" + listId + (!TextUtils.isEmpty(selection) ? " AND (" + selection + ')' : ""), selectionArgs);
            break;
        case PLACES:
            count = db.update(Places.TABLE_NAME, values, selection, selectionArgs);
            break;
        case PLACES_ID:
            String shopId = uri.getPathSegments().get(1);
            count = db.update(Places.TABLE_NAME, values, Places._ID + "=" + shopId + (!TextUtils.isEmpty(selection) ? " AND (" + selection + ')' : ""), selectionArgs);
            break;
        default:
            throw new IllegalArgumentException("Unknown URI " + uri);
    }
    // Notify any watchers of the change
    getContext().getContentResolver().notifyChange(uri, null);
    return count;
}
