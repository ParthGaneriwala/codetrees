protected static BooleanExpression parseExpression(String expression) throws Exception {
    return (BooleanExpression) new ExpressionParser<Object>(new StringReader(expression)) {

        @Override
        protected Object handleNumber(double value) {
            return new FloatExpression.Constant((float) value);
        }

        @Override
        protected Object handleString(String value) {
            return new StringExpression.Constant(value);
        }

        @Override
        protected Object handleOperator(String operator, int arity) throws Exception {
            if (arity == 1) {
                if (operator.equals("!")) {
                    Not not = new Not();
                    not.operand = (BooleanExpression) _output.pop();
                    return not;
                } else {
                    return super.handleOperator(operator, arity);
                }
            } else {
                // arity == 2
                BinaryOperation result;
                if (operator.equals("&") || operator.equals("&&")) {
                    result = new And();
                } else if (operator.equals("|") || operator.equals("||")) {
                    result = new Or();
                } else if (operator.equals("^")) {
                    result = new Xor();
                } else if (operator.equals("<")) {
                    return handleFloatBinaryOperation(new FloatLess());
                } else if (operator.equals(">")) {
                    return handleFloatBinaryOperation(new FloatGreater());
                } else if (operator.equals("=") || operator.equals("==")) {
                    return handleEquals();
                } else if (operator.equals("!=")) {
                    Not not = new Not();
                    not.operand = handleEquals();
                    return not;
                } else if (operator.equals("<=")) {
                    return handleFloatBinaryOperation(new FloatLessEquals());
                } else if (operator.equals(">=")) {
                    return handleFloatBinaryOperation(new FloatGreaterEquals());
                } else {
                    return super.handleOperator(operator, arity);
                }
                result.secondOperand = (BooleanExpression) _output.pop();
                result.firstOperand = (BooleanExpression) _output.pop();
                return result;
            }
        }

        @Override
        protected Object handleFunctionCall(String function, int arity) throws Exception {
            if (function.equals("float")) {
                StringExpression.Constant expr = (StringExpression.Constant) _output.pop();
                return FloatExpression.parseExpression(expr.value);
            } else if (function.equals("string")) {
                StringExpression.Constant expr = (StringExpression.Constant) _output.pop();
                return StringExpression.parseExpression(expr.value);
            } else {
                return super.handleFunctionCall(function, arity);
            }
        }

        @Override
        protected Object handleIdentifier(String name) {
            if (name.equalsIgnoreCase("true")) {
                return new Constant(true);
            } else if (name.equalsIgnoreCase("false")) {
                return new Constant(false);
            }
            Reference ref = new Reference();
            ref.name = name;
            return ref;
        }

        protected Object handleFloatBinaryOperation(FloatBinaryOperation op) throws Exception {
            op.secondOperand = coerceToFloatExpression(_output.pop());
            op.firstOperand = coerceToFloatExpression(_output.pop());
            return op;
        }

        protected BooleanExpression handleEquals() throws Exception {
            Object secondOperand = _output.pop();
            Object firstOperand = _output.pop();
            if (firstOperand instanceof FloatExpression || secondOperand instanceof FloatExpression) {
                FloatEquals result = new FloatEquals();
                result.firstOperand = coerceToFloatExpression(firstOperand);
                result.secondOperand = coerceToFloatExpression(secondOperand);
                return result;
            } else if (firstOperand instanceof StringExpression || secondOperand instanceof StringExpression) {
                StringEquals result = new StringEquals();
                result.firstOperand = coerceToStringExpression(firstOperand);
                result.secondOperand = coerceToStringExpression(secondOperand);
                return result;
            } else {
                BooleanEquals result = new BooleanEquals();
                result.firstOperand = coerceToBooleanExpression(firstOperand);
                result.secondOperand = coerceToBooleanExpression(secondOperand);
                return result;
            }
        }

        protected BooleanExpression coerceToBooleanExpression(Object object) throws Exception {
            if (object instanceof BooleanExpression) {
                return (BooleanExpression) object;
            } else {
                throw new Exception("Cannot coerce to boolean expression " + object);
            }
        }

        protected FloatExpression coerceToFloatExpression(Object object) throws Exception {
            if (object instanceof FloatExpression) {
                return (FloatExpression) object;
            } else if (object instanceof Reference) {
                // convert to a float reference
                Reference ref = (Reference) object;
                FloatExpression.Reference nref = new FloatExpression.Reference();
                nref.name = ref.name;
                return nref;
            } else {
                throw new Exception("Cannot coerce to float expression " + object);
            }
        }

        protected StringExpression coerceToStringExpression(Object object) throws Exception {
            if (object instanceof StringExpression) {
                return (StringExpression) object;
            } else if (object instanceof Reference) {
                // convert to a string reference
                Reference ref = (Reference) object;
                StringExpression.Reference nref = new StringExpression.Reference();
                nref.name = ref.name;
                return nref;
            } else {
                throw new Exception("Cannot coerce to string expression " + object);
            }
        }
    }.parse();
}
