public static void main(String[] args) throws Exception {
    if (args == null || args.length == 0) {
        System.out.println("Server usage: [port] [root path] [web.xml]");
        System.exit(-1);
    }
    // first argument is the port number
    int portNumber = 8080;
    if (args.length > 0) {
        try {
            portNumber = Integer.parseInt(args[0]);
        } catch (NumberFormatException e) {
            System.err.println("Port number was not correctly formatted");
            System.exit(-1);
        }
    }
    // second argument is the file path
    root = "/";
    if (args.length > 1) {
        File file = new File(args[1]);
        if (!(file.isDirectory())) {
            System.err.println("Supplied path name was invalid.");
            System.exit(-1);
        }
        root = file.getCanonicalPath();
    }
    // use a socket to listen on the port
    ServerSocket serverSocket = null;
    try {
        serverSocket = new ServerSocket(portNumber);
    } catch (IOException e) {
        System.err.println("Could not listen on port " + portNumber);
        System.exit(-1);
    }
    HashMap<String, HttpServlet> servlets = null;
    HttpContext context = null;
    if (args.length > 2) {
        Handler handler = parseWebdotxml(args[2]);
        context = createContext(handler);
        servlets = createServlets(handler, context);
    }
    // add threads to the queue
    for (int i = 0; i < maxThreads; ++i) {
        ServerThread t;
        if (servlets != null) {
            t = new ServerThread(servlets, context);
        } else {
            t = new ServerThread();
        }
        (new Thread(t, "Thread # " + i)).start();
        threadQueue.addElement(t);
    }
    // launch the master daemon thread!
    ServerDaemon daemon;
    if (servlets != null) {
        daemon = new ServerDaemon(serverSocket, servlets, context);
    } else {
        daemon = new ServerDaemon(serverSocket);
    }
    (new Thread(daemon, "Daemon thread")).start();
    String keyPressed = null;
    // listen for keyboard input
    boolean listening = true;
    while (listening) {
        keyPressed = tryQuit();
        if (keyPressed != null && keyPressed.equals("q")) {
            Set<String> keys = servlets.keySet();
            Iterator<String> i = keys.iterator();
            HttpServlet servlet;
            String key;
            while (i.hasNext()) {
                key = i.next().toString();
                servlet = servlets.get(key);
                servlet.destroy();
            }
            System.exit(-1);
        }
    }
}
