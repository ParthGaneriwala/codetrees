private int checkParams(ParameterSet curParams, boolean newNet) {
    int analyze = -1;
    if (curParams.getScope().equals(ParameterSet.SELECTION) && curParams.getSelectedNodes().length < 1) {
        analyze = INTERRUPTED;
        interruptedMessage = "At least one nodes should be selected";
    } else {
        String which = curParams.getAlgorithm();
        if (which.length() == 0) {
            // if no algorithm is selected
            analyze = INTERRUPTED;
            interruptedMessage = "An algorithm need to be selected for clustering";
        } else {
            if (!newNet) {
                // get list of copys of the saved parameters for comparison with the current ones
                Collection clParaSets = ParameterSet.getInstance().getAllParamSets().values();
                Iterator it = clParaSets.iterator();
                ParameterSet curParaSet;
                while (it.hasNext()) {
                    curParaSet = (ParameterSet) it.next();
                    if (checkEqual(curParams, curParaSet)) {
                        // exists
                        CytoPanel panel = Cytoscape.getDesktop().getCytoPanel(SwingConstants.EAST);
                        resultIndex = panel.indexOfComponent(curParaSet.getResultTitle());
                        analyze = EXISTS;
                        interruptedMessage = "The result exits";
                        break;
                    }
                }
            }
            if (newNet || analyze != EXISTS) {
                if (which.equals(ParameterSet.MCODE)) {
                    if (!newNet) {
                        ParameterSet savedParamsCopy = ParameterSet.getInstance().getParamsCopy(curParams.getNetworkID());
                        if (savedParamsCopy.getAlgorithm() != ParameterSet.MCODE || curParams.isIncludeLoops() != savedParamsCopy.isIncludeLoops() || curParams.getDegreeThreshold() != savedParamsCopy.getDegreeThreshold())
                            analyze = RESCORE;
                        else
                            analyze = REFIND;
                    } else
                        analyze = RESCORE;
                } else {
                    if (which.equals(ParameterSet.EAGLE))
                        analyze = CLIQUEBASED;
                    else if (curParams.isOverlapped())
                        analyze = FINDCLIQUE;
                    else
                        analyze = FIND;
                }
            }
        }
    }
    return analyze;
}
