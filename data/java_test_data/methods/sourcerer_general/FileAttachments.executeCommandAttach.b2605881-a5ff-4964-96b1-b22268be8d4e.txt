public String executeCommandAttach(ActionContext context) {
    if (getUser(context).getId() < 0) {
        return "PermissionError";
    }
    Connection db = null;
    boolean recordInserted = false;
    try {
        String filePath = this.getPath(context, "projects");
        // Process the form data
        HttpMultiPartParser multiPart = new HttpMultiPartParser();
        multiPart.setUsePathParam(false);
        multiPart.setUseUniqueName(true);
        multiPart.setUseDateForFolder(true);
        multiPart.setExtensionId(getUserId(context));
        HashMap parts = multiPart.parseData(context.getRequest(), filePath);
        int projectId = -1;
        String projectIdValue = (String) parts.get("pid");
        if (StringUtils.hasText(projectIdValue)) {
            projectId = Integer.parseInt(projectIdValue);
        } else {
            projectIdValue = "";
        }
        int linkModuleId = Integer.parseInt((String) parts.get("lmid"));
        int linkItemId = Integer.parseInt((String) parts.get("liid"));
        int selectorId = Integer.parseInt((String) parts.get("selectorId"));
        String selectorMode = (String) parts.get("selectorMode");
        String added = (String) parts.get("added");
        String comment = (String) parts.get("comment");
        db = getConnection(context);
        // Must be a team member or a user with admin privileges
        Project thisProject = null;
        if (projectId > -1) {
            thisProject = retrieveAuthorizedProject(projectId, context);
        }
        // TODO: The conditions under which a file can be attached will change, so this condition check needs to be refactored
        if (thisProject == null && getUser(context).getId() < 0) {
            if (parts.get("id" + projectIdValue) instanceof FileInfo) {
                FileInfo newFileInfo = (FileInfo) parts.get("id" + projectIdValue);
                File thisFile = newFileInfo.getLocalFile();
                if (thisFile.exists()) {
                    thisFile.delete();
                    System.out.println("FileAttachments-> Unallowed file deleted");
                }
            }
            return "PermissionError";
        }
        // Update the database with the resulting file
        if ((Object) parts.get("id" + projectIdValue) instanceof FileInfo) {
            FileInfo newFileInfo = (FileInfo) parts.get("id" + projectIdValue);
            FileItem thisItem = new FileItem();
            thisItem.setLinkModuleId(Constants.TEMP_FILES);
            thisItem.setLinkItemId(selectorId);
            thisItem.setEnteredBy(getUserId(context));
            thisItem.setModifiedBy(getUserId(context));
            thisItem.setSubject(newFileInfo.getClientFileName());
            thisItem.setClientFilename(newFileInfo.getClientFileName());
            thisItem.setFilename(newFileInfo.getRealFilename());
            thisItem.setSize(newFileInfo.getSize());
            thisItem.setComment(comment);
            if (thisItem.isImageFormat() || Constants.PROJECT_IMAGE_FILES == linkModuleId) {
                // Verify that an image was correctly sent
                thisItem.setImageSize(ImageUtils.getImageSize(newFileInfo.getLocalFile()));
                if (thisItem.getImageWidth() == 0 || thisItem.getImageHeight() == 0) {
                    // A bad image was sent
                    return ("ImageUploadERROR");
                }
            }
            // this is a new document
            thisItem.setVersion(1.0);
            recordInserted = thisItem.insert(db);
            thisItem.setDirectory(filePath);
            if (!recordInserted) {
                processErrors(context, thisItem.getErrors());
            } else {
                if (thisItem.isImageFormat() && thisItem.hasValidImageSize()) {
                    // Prepare this image for thumbnail conversion
                    ImageResizerBean bean = new ImageResizerBean();
                    bean.setFileItemId(thisItem.getId());
                    bean.setImagePath(newFileInfo.getLocalFile().getParent());
                    bean.setImageFilename(thisItem.getFilename());
                    bean.setEnteredBy(thisItem.getEnteredBy());
                    int[] dimensions = ThumbnailUtils.getPresetDimensionsForModule(linkModuleId);
                    if (dimensions != null) {
                        bean.setWidth(dimensions[0]);
                        bean.setHeight(dimensions[1]);
                    }
                    // Add this to the ImageResizerJob to multi-thread the thumbnails
                    Scheduler scheduler = (Scheduler) context.getServletContext().getAttribute("Scheduler");
                    ((Vector) scheduler.getContext().get(ImageResizerJob.IMAGE_RESIZER_ARRAY)).add(bean);
                    scheduler.triggerJob("imageResizer", (String) scheduler.getContext().get(ScheduledJobs.CONTEXT_SCHEDULER_GROUP));
                }
                context.getRequest().setAttribute("itemId", String.valueOf(thisItem.getId()));
            }
        }
        if (projectId > -1) {
            context.getRequest().setAttribute("pid", String.valueOf(projectId));
        }
        context.getRequest().setAttribute("lmid", String.valueOf(linkModuleId));
        context.getRequest().setAttribute("liid", String.valueOf(linkItemId));
        context.getRequest().setAttribute("selectorId", String.valueOf(selectorId));
        context.getRequest().setAttribute("selectorMode", selectorMode);
        context.getRequest().setAttribute("added", added);
        if (Constants.PROJECT_IMAGE_FILES == linkModuleId && linkItemId != -1) {
            return "AttachProjectImageFilesOK";
        }
        return "AttachOK";
    } catch (Exception e) {
        context.getRequest().setAttribute("Error", e);
        return ("SystemError");
    } finally {
        freeConnection(context, db);
    }
}
