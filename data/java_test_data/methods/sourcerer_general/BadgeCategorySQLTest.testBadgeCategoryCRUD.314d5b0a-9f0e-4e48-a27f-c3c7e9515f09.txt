public void testBadgeCategoryCRUD() throws SQLException {
    // Insert a required project category
    ProjectCategory projectCategory = new ProjectCategory();
    projectCategory.setDescription("Badge category SQL Test" + System.currentTimeMillis());
    projectCategory.insert(db);
    // Insert badge category
    BadgeCategory badgeCategory = new BadgeCategory();
    badgeCategory.setProjectCategoryId(projectCategory.getId());
    badgeCategory.setItemName("Badge category SQL Test");
    badgeCategory.setLevel("10");
    badgeCategory.setEnabled(true);
    assertNotNull(badgeCategory);
    boolean result = badgeCategory.insert(db);
    assertTrue("Badge category was not inserted", result);
    assertTrue("Inserted badge category did not have an id", badgeCategory.getId() > -1);
    // Update badge category
    // Try updating without reloading the badge category
    assertTrue("Badge category to update does not have an id", badgeCategory.getId() > -1);
    int updateCount = badgeCategory.update(db);
    // Reload the badge category, then update
    assertTrue(badgeCategory.getId() > -1);
    badgeCategory = new BadgeCategory(db, badgeCategory.getId());
    badgeCategory.setItemName("Badge Category SQL Test Updated Badge");
    updateCount = badgeCategory.update(db);
    assertTrue("The badge category was not updated by the database", updateCount == 1);
    // Find the previously set badge
    int badgeCategoryId = badgeCategory.getId();
    badgeCategory = null;
    BadgeCategoryList badgeCategoryList = new BadgeCategoryList();
    badgeCategoryList.setEnabled(Constants.TRUE);
    badgeCategoryList.buildList(db);
    assertTrue(badgeCategoryList.size() > 0);
    Iterator i = badgeCategoryList.iterator();
    while (i.hasNext()) {
        BadgeCategory thisBadgeCategory = (BadgeCategory) i.next();
        if (thisBadgeCategory.getId() == badgeCategoryId) {
            badgeCategory = thisBadgeCategory;
            break;
        }
    }
    assertNotNull(badgeCategory);
    // delete the badge category
    badgeCategory.delete(db, null);
    badgeCategoryId = badgeCategory.getId();
    badgeCategory = null;
    // delete the project category
    projectCategory.delete(db, null);
    // Try to find the previously deleted badge category
    badgeCategoryList = new BadgeCategoryList();
    badgeCategoryList.setCode(badgeCategoryId);
    badgeCategoryList.buildList(db);
    Iterator ij = badgeCategoryList.iterator();
    while (ij.hasNext()) {
        BadgeCategory thisBadgeCategory = (BadgeCategory) ij.next();
        if (thisBadgeCategory.getId() == badgeCategoryId) {
            assertNull("Badge category exists when it shouldn't", thisBadgeCategory);
        }
    }
}
