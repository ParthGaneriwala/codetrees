private static void compare(Map<Integer, List<RauData>> old, Map<Integer, List<RauData>> news) {
    // 判断旧的rac是否在新的里面，如果不在，表示删除了
    Iterator<Integer> oldsgsnid = old.keySet().iterator();
    Iterator<Integer> newsgsnid = news.keySet().iterator();
    WARNINGS.add("===================================================");
    Map<Integer, RauCompare> maps = new LinkedHashMap<Integer, RauCompare>();
    while (oldsgsnid.hasNext()) {
        // 旧的sgsnid
        int sgsnid = oldsgsnid.next();
        RauCompare c = new RauCompare();
        c.setSgsnid(sgsnid);
        c.setAll(news.get(sgsnid) == null ? 0 : news.get(sgsnid).size());
        maps.put(sgsnid, c);
        // 旧的这个sgsnid的路由
        List<RauData> oldraudata = old.get(sgsnid);
        // 新的这个sgsnid的路由
        List<RauData> newraudata = news.get(sgsnid);
        List<String> newrd = new ArrayList<String>();
        List<String> oldrd = new ArrayList<String>();
        for (int i = 0; oldraudata != null && i < oldraudata.size(); i++) {
            oldrd.add(oldraudata.get(i).rau);
        }
        for (int i = 0; newraudata != null && i < newraudata.size(); i++) {
            newrd.add(newraudata.get(i).rau);
        }
        if (newrd == null || newrd.size() == 0) {
            c.setDelete(oldrd.size());
            for (String rd : oldrd) {
                c.addDeleteraus(rd);
            }
            // WARNINGS.add("SGSNCQ0" + sgsnid + "删除全部路由");
            break;
        }
        for (int i = 0; i < oldrd.size(); i++) {
            // 老的每条路由信息
            String rd = oldrd.get(i);
            if (!newrd.contains(rd)) {
                // 如果老的路由不在新的里面，则认为已删除
                // rd已删除
                c.setDelete(c.getDelete() + 1);
                c.addDeleteraus(rd);
            // WARNINGS.add("SGSNCQ0" + sgsnid + "删除路由：" + rd);
            }
        }
    }
    while (newsgsnid.hasNext()) {
        // 新的sgsnid
        int sgsnid = newsgsnid.next();
        // 旧的这个sgsnid的路由
        List<RauData> oldraudata = old.get(sgsnid);
        // 新的这个sgsnid的路由
        List<RauData> newraudata = news.get(sgsnid);
        List<String> newrd = new ArrayList<String>();
        List<String> oldrd = new ArrayList<String>();
        for (int i = 0; oldraudata != null && i < oldraudata.size(); i++) {
            oldrd.add(oldraudata.get(i).rau);
        }
        for (int i = 0; newraudata != null && i < newraudata.size(); i++) {
            newrd.add(newraudata.get(i).rau);
        }
        RauCompare c = maps.get(sgsnid);
        if (c == null) {
            c = new RauCompare();
            c.setSgsnid(sgsnid);
            c.setAll(news.get(sgsnid) == null ? 0 : news.get(sgsnid).size());
        }
        if (oldrd == null || oldrd.size() == 0) {
            // WARNINGS.add("SGSNCQ0" + sgsnid + "新增全部路由");
            c.setAdd(newrd.size());
            for (String rd : newrd) {
                c.addAddraus(rd);
            }
            break;
        }
        for (int i = 0; i < newrd.size(); i++) {
            String rd = newrd.get(i);
            if (!oldrd.contains(rd)) {
                // rd已新增
                c.setAdd(c.getAdd() + 1);
                c.addAddraus(rd);
            // WARNINGS.add("SGSNCQ0" + sgsnid + "新增路由：" + rd);
            }
        }
    }
    // 打印到WARNINGS中
    Iterator<Integer> compars = maps.keySet().iterator();
    while (compars.hasNext()) {
        int sgsnid = compars.next();
        RauCompare rc = maps.get(sgsnid);
        WARNINGS.addAll(rc.printlnContent());
    }
    maps.clear();
}
