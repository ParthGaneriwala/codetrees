protected void copyProperties(Map<String, Object> props, ModelObject obj) {
    System.out.println("props:" + props);
    HashMap<String, Object> _props = new HashMap<String, Object>();
    Field[] fields = obj.getClass().getDeclaredFields();
    for (int i = 0; i < fields.length; i++) {
        if (Modifier.isStatic(fields[i].getModifiers())) {
            continue;
        }
        Field field = fields[i];
        String fn = field.getName();
        Class type = field.getType();
        System.out.println("fn:" + fn + " field.getType():" + field.getType());
        if (!props.containsKey(fn)) {
            continue;
        }
        Object value = props.get(fn);
        if (value == null) {
            _props.put(fn, value);
            continue;
        }
        if (ModelObject.class.isAssignableFrom(type)) {
            String bean = type.getSimpleName();
            if (value instanceof String) {
                // the value is ID
                ModelObject mo = getModelObject(bean, (String) value);
                _props.put(fn, mo);
            } else if (value instanceof Map) {
                Map<String, Object> cprops = (Map<String, Object>) value;
                ModelObject mo = createModelObject(bean);
                copyProperties(cprops, mo);
                _props.put(fn, mo);
            } else {
                throw new RuntimeException("Unknown value type: " + value + "," + value.getClass() + " bean:" + bean);
            }
        } else if (Collection.class.isAssignableFrom(type)) {
            Set set = new HashSet();
            if (value != null) {
                String bean = config.getItemType(obj.getModelName(), fn);
                if (value instanceof String) {
                    // the value is ID1,ID2,...,IDn
                    String[] ids = ((String) value).split(",");
                    for (int j = 0; j < ids.length; j++) {
                        ModelObject mo = getModelObject(bean, ids[j]);
                        set.add(mo);
                    }
                } else if (value instanceof Collection) {
                    Collection c = (Collection) value;
                    for (Iterator it = c.iterator(); it.hasNext(); ) {
                        Map<String, Object> cprops = (Map<String, Object>) it.next();
                        ModelObject mo = createModelObject(bean);
                        copyProperties(cprops, mo);
                        setOwnerTo(mo, obj);
                        set.add(mo);
                    }
                } else {
                    throw new RuntimeException("Unknown value type: " + value + "," + value.getClass() + " bean:" + bean);
                }
            }
            _props.put(fn, set);
        } else {
            _props.put(fn, value);
        }
    }
    System.out.println("_props:" + _props);
    try {
        BeanUtils.populate(obj, _props);
    } catch (IllegalAccessException e) {
        e.printStackTrace();
    } catch (InvocationTargetException e) {
        e.printStackTrace();
    }
}
