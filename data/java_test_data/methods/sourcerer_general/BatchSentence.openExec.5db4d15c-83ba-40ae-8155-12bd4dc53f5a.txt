public DataResultSet openExec(Object params) throws BasicException {
    BufferedReader br = new BufferedReader(getReader());
    String sLine;
    StringBuffer sSentence = new StringBuffer();
    List aExceptions = new ArrayList();
    try {
        while ((sLine = br.readLine()) != null) {
            sLine = sLine.trim();
            if (!sLine.equals("") && !sLine.startsWith("--")) {
                // No es un comentario ni linea vacia
                if (sLine.endsWith(";")) {
                    // ha terminado la sentencia
                    sSentence.append(sLine.substring(0, sLine.length() - 1));
                    // File parameters
                    Pattern pattern = Pattern.compile("\\$(\\w+)\\{([^}]*)\\}");
                    Matcher matcher = pattern.matcher(sSentence.toString());
                    List paramlist = new ArrayList();
                    // Replace all occurrences of pattern in input
                    StringBuffer buf = new StringBuffer();
                    while (matcher.find()) {
                        if ("FILE".equals(matcher.group(1))) {
                            paramlist.add(ImageUtils.getBytesFromResource(matcher.group(2)));
                            matcher.appendReplacement(buf, "?");
                        } else {
                            String replacement = m_parameters.get(matcher.group(1));
                            if (replacement == null) {
                                matcher.appendReplacement(buf, Matcher.quoteReplacement(matcher.group(0)));
                            } else {
                                paramlist.add(replacement);
                                matcher.appendReplacement(buf, "?");
                            }
                        }
                    }
                    matcher.appendTail(buf);
                    // La disparo
                    try {
                        BaseSentence sent;
                        if (paramlist.size() == 0) {
                            sent = new StaticSentence(m_s, buf.toString());
                            sent.exec();
                        } else {
                            sent = new PreparedSentence(m_s, buf.toString(), SerializerWriteBuilder.INSTANCE);
                            sent.exec(new VarParams(paramlist));
                        }
                    } catch (BasicException eD) {
                        aExceptions.add(eD);
                    }
                    sSentence = new StringBuffer();
                } else {
                    // la sentencia continua en la linea siguiente
                    sSentence.append(sLine);
                }
            }
        }
        br.close();
    } catch (IOException eIO) {
        throw new BasicException(LocalRes.getIntString("exception.noreadfile"), eIO);
    }
    if (sSentence.length() > 0) {
        // ha quedado una sentencia inacabada
        aExceptions.add(new BasicException(LocalRes.getIntString("exception.nofinishedfile")));
    }
    return new ExceptionsResultSet(aExceptions);
}
