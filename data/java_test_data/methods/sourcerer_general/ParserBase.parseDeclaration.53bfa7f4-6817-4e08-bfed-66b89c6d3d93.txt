protected int parseDeclaration(int i) throws Exception {
    String buf = rawdata;
    int j = i + 2;
    if (buf.length() < 2 || !buf.substring(i, j).equals("<!"))
        throw new Exception("Unexpected call to parseDeclaration");
    if (buf.length() == 2 || (buf.length() == 3 && rawdata.charAt(j) == '-'))
        return -1;
    int n = buf.length();
    String decltype;
    if (buf.substring(j, j + 2).equals("--")) {
        return parseComment(i);
    } else if (buf.charAt(j) == '[') {
        return parseMarkedSection(i);
    } else {
        NamePos result = scanName(j, i);
        j = result.getPos();
        decltype = result.getName();
    }
    if (j < 0)
        return j;
    if (decltype.equals("doctype"))
        _decl_otherchars = "";
    while (j < n) {
        char c = buf.charAt(j);
        if (c == '>') {
            String data = buf.substring(i + 2, j);
            if (decltype.equals("doctype"))
                handleDecl(data);
            else
                unknownDecl(data);
            return j + 1;
        }
        if ("\"'".indexOf(c) != -1) {
            Matcher matcher = _DECLSTRINGLIT_MATCH.matcher(buf);
            if (!matcher.find(j))
                return -1;
            j = matcher.end();
        } else if ("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".indexOf(c) != -1) {
            NamePos result = scanName(j, i);
            j = result.getPos();
        } else if (_decl_otherchars.indexOf(c) != -1) {
            j++;
        } else if (c == '[') {
            if (decltype == "doctype") {
                j = parseDocTypeSubset(j + 1, i);
            } else if ("attlist".equals(decltype) || "linktype".equals(decltype) || "link".equals(decltype) || "element".equals(decltype)) {
                error("unsupported '[' char in " + decltype + " declaration");
            } else {
                error("unexpected '[' char in declaration");
            }
        } else {
            error("unexpected " + buf.charAt(j) + " char in declaration");
        }
        if (j < 0)
            return j;
    }
    // incomplete
    return -1;
}
