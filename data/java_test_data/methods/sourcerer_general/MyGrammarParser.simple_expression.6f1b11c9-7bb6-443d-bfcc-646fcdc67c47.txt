// $ANTLR start "simple_expression"
public final MyGrammarParser.simple_expression_return simple_expression() throws RecognitionException {
    MyGrammarParser.simple_expression_return retval = new MyGrammarParser.simple_expression_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token SUB172 = null;
    MyGrammarParser.term_return term173 = null;
    MyGrammarParser.term_operator_return term_operator174 = null;
    MyGrammarParser.term_return term175 = null;
    CommonTree SUB172_tree = null;
    RewriteRuleTokenStream stream_SUB = new RewriteRuleTokenStream(adaptor, "token SUB");
    RewriteRuleSubtreeStream stream_term_operator = new RewriteRuleSubtreeStream(adaptor, "rule term_operator");
    RewriteRuleSubtreeStream stream_term = new RewriteRuleSubtreeStream(adaptor, "rule term");
    try {
        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:275:19: ( ( SUB )? term ( term_operator term )* -> ^( SIMPLE_EXPRESSION ( SUB )? term ( term_operator term )* ) )
        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:275:21: ( SUB )? term ( term_operator term )*
        {
            // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:275:21: ( SUB )?
            int alt31 = 2;
            int LA31_0 = input.LA(1);
            if ((LA31_0 == SUB)) {
                alt31 = 1;
            }
            switch(alt31) {
                case 1:
                    // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:275:22: SUB
                    {
                        SUB172 = (Token) match(input, SUB, FOLLOW_SUB_in_simple_expression2331);
                        stream_SUB.add(SUB172);
                    }
                    break;
            }
            pushFollow(FOLLOW_term_in_simple_expression2335);
            term173 = term();
            state._fsp--;
            stream_term.add(term173.getTree());
            // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:275:33: ( term_operator term )*
            loop32: do {
                int alt32 = 2;
                int LA32_0 = input.LA(1);
                if (((LA32_0 >= SOMA && LA32_0 <= SUB))) {
                    alt32 = 1;
                }
                switch(alt32) {
                    case 1:
                        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:275:34: term_operator term
                        {
                            pushFollow(FOLLOW_term_operator_in_simple_expression2338);
                            term_operator174 = term_operator();
                            state._fsp--;
                            stream_term_operator.add(term_operator174.getTree());
                            pushFollow(FOLLOW_term_in_simple_expression2340);
                            term175 = term();
                            state._fsp--;
                            stream_term.add(term175.getTree());
                        }
                        break;
                    default:
                        break loop32;
                }
            } while (true);
            // AST REWRITE
            // elements: term, term_operator, SUB, term
            // token labels:
            // rule labels: retval
            // token list labels:
            // rule list labels:
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", retval != null ? retval.tree : null);
            root_0 = (CommonTree) adaptor.nil();
            // 275:55: -> ^( SIMPLE_EXPRESSION ( SUB )? term ( term_operator term )* )
            {
                // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:275:58: ^( SIMPLE_EXPRESSION ( SUB )? term ( term_operator term )* )
                {
                    CommonTree root_1 = (CommonTree) adaptor.nil();
                    root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(SIMPLE_EXPRESSION, "SIMPLE_EXPRESSION"), root_1);
                    // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:275:78: ( SUB )?
                    if (stream_SUB.hasNext()) {
                        adaptor.addChild(root_1, stream_SUB.nextNode());
                    }
                    stream_SUB.reset();
                    adaptor.addChild(root_1, stream_term.nextTree());
                    // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:275:88: ( term_operator term )*
                    while (stream_term.hasNext() || stream_term_operator.hasNext()) {
                        adaptor.addChild(root_1, stream_term_operator.nextTree());
                        adaptor.addChild(root_1, stream_term.nextTree());
                    }
                    stream_term.reset();
                    stream_term_operator.reset();
                    adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
