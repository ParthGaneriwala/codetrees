double computeTreeScore(QuartetTree qt, TreeEdge te, int d, double[][] dm, int edge_index, int[][] distances) {
    double Ct = 0;
    Quartet[] alQuartets = null;
    boolean full = false;
    if (edgeScoreHistory[eiTable[te.q1.id][te.q2.id]] == 0) {
        if (oldEdge == null) {
            full = true;
        } else {
            for (int i = 0; i < dm.length; i++) {
                scoreHistory[labels[i]][eiTable[te.q1.id][te.q2.id]] += scoreHistory[labels[i]][eiTable[oldEdge.q1.id][oldEdge.q2.id]];
            }
            edgeScoreHistory[eiTable[te.q1.id][te.q2.id]] = edgeScoreHistory[eiTable[oldEdge.q1.id][oldEdge.q2.id]];
        }
    }
    alQuartets = quartetLists[d - 4];
    double historyScore = computeHistoryScore(d, te, dm);
    double esh = 0;
    for (int i = alQuartets.length - 1; i >= 0; i--) {
        Quartet q2 = alQuartets[i];
        q.nodes[0] = labels[q2.nodes[0]];
        q.nodes[1] = labels[q2.nodes[1]];
        q.nodes[2] = labels[q2.nodes[2]];
        q.nodes[3] = labels[q2.nodes[3]];
        if (q2.K <= partK) {
            Ct += dm[q.nodes[0]][q.nodes[1]] + dm[q.nodes[2]][q.nodes[3]];
            int total_dist = distances[q.nodes[0]][q.nodes[1]] + distances[q.nodes[0]][q.nodes[2]] + distances[q.nodes[0]][q.nodes[3]] + distances[q.nodes[2]][q.nodes[3]] + distances[q.nodes[1]][q.nodes[2]] + distances[q.nodes[1]][q.nodes[3]];
            try {
                if (total_dist < dm.length * 2) {
                    esh += dm[q.nodes[q2.pni1]][q.nodes[q2.pni2]];
                    scoreHistory[q.nodes[q2.cni]][eiTable[te.q1.id][te.q2.id]]++;
                }
            } catch (Exception ex) {
            }
            part_q++;
        } else {
            if (!isConsistent(q)) {
                q.nodes[1] = labels[q2.nodes[2]];
                q.nodes[2] = labels[q2.nodes[1]];
                if (!isConsistent(q)) {
                    int aux = q2.nodes[1];
                    q2.nodes[1] = q2.nodes[3];
                    q2.nodes[3] = aux;
                } else {
                    int aux = q2.nodes[1];
                    q2.nodes[1] = q2.nodes[2];
                    q2.nodes[2] = aux;
                }
            }
            if (q2.nodes[0] == d) {
                q2.cni = 1;
                q2.pni1 = 2;
                q2.pni2 = 3;
            } else if (q2.nodes[1] == d) {
                q2.cni = 0;
                q2.pni1 = 2;
                q2.pni2 = 3;
            } else if (q2.nodes[2] == d) {
                q2.cni = 3;
                q2.pni1 = 0;
                q2.pni2 = 1;
            } else if (q2.nodes[3] == d) {
                q2.cni = 2;
                q2.pni1 = 0;
                q2.pni2 = 1;
            } else {
                q2.cni = -1;
                q2.pni1 = -1;
                q2.pni2 = -1;
            }
            q.nodes[0] = labels[q2.nodes[0]];
            q.nodes[1] = labels[q2.nodes[1]];
            q.nodes[2] = labels[q2.nodes[2]];
            q.nodes[3] = labels[q2.nodes[3]];
            Ct += dm[q.nodes[0]][q.nodes[1]] + dm[q.nodes[2]][q.nodes[3]];
            int total_dist = distances[q.nodes[0]][q.nodes[1]] + distances[q.nodes[0]][q.nodes[2]] + distances[q.nodes[0]][q.nodes[3]] + distances[q.nodes[2]][q.nodes[3]] + distances[q.nodes[1]][q.nodes[2]] + distances[q.nodes[1]][q.nodes[3]];
            try {
                if (total_dist < dm.length * 2) {
                    esh += dm[q.nodes[q2.pni1]][q.nodes[q2.pni2]];
                    scoreHistory[q.nodes[q2.cni]][eiTable[te.q1.id][te.q2.id]]++;
                }
            } catch (Exception ex) {
            }
            q2.consistent = q.consistent;
            q2.K = q.K;
            non_part_q++;
        }
        step_count++;
    }
    edgeScoreHistory[eiTable[te.q1.id][te.q2.id]] += esh;
    double Ct2 = 0;
    if (full) {
        Ct2 = Ct + last_tree_score;
    } else {
        // + historyScore;
        Ct2 = Ct + last_tree_score;
    }
    return Ct2;
}
