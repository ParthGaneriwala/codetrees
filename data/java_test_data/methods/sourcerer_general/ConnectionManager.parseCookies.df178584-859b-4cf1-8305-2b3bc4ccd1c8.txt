public void parseCookies(URLConnection connection) {
    String string;
    Vector cookies;
    StringTokenizer tokenizer;
    String token;
    int index;
    String name;
    String key;
    String value;
    Cookie cookie;
    string = connection.getHeaderField("Set-Cookie");
    if (null != string) {
        // set-cookie      =       "Set-Cookie:" cookies
        // cookies         =       1#cookie
        // cookie          =       NAME "=" VALUE *(";" cookie-av)
        // NAME            =       attr
        // VALUE           =       value
        // cookie-av       =       "Comment" "=" value
        // |       "Domain" "=" value
        // |       "Max-Age" "=" value
        // |       "Path" "=" value
        // |       "Secure"
        // |       "Version" "=" 1*DIGIT
        cookies = new Vector();
        tokenizer = new StringTokenizer(string, ";,", true);
        cookie = null;
        while (tokenizer.hasMoreTokens()) {
            token = tokenizer.nextToken().trim();
            if (token.equals(";"))
                continue;
            else if (token.equals(",")) {
                cookie = null;
                continue;
            }
            index = token.indexOf('=');
            if (-1 == index) {
                if (null == cookie) {
                    // an unnamed cookie
                    name = "";
                    value = token;
                    key = name;
                } else {
                    name = token;
                    value = null;
                    key = name.toLowerCase();
                }
            } else {
                name = token.substring(0, index);
                value = token.substring(index + 1);
                key = name.toLowerCase();
            }
            if (null == cookie) {
                try {
                    cookie = new Cookie(name, value);
                    cookies.addElement(cookie);
                } catch (IllegalArgumentException iae) {
                    // for now just bail
                    break;
                }
            } else {
                if (// Wdy, DD-Mon-YY HH:MM:SS GMT
                key.equals("expires")) {
                    String comma = tokenizer.nextToken();
                    String rest = tokenizer.nextToken();
                    try {
                        Date date = mFormat.parse(value + comma + rest);
                        cookie.setExpiryDate(date);
                    } catch (ParseException pe) {
                        // ok now what
                        cookie.setExpiryDate(null);
                    }
                } else if (key.equals("domain"))
                    cookie.setDomain(value);
                else if (key.equals("path"))
                    cookie.setPath(value);
                else if (key.equals("secure"))
                    cookie.setSecure(true);
                else if (key.equals("comment"))
                    cookie.setComment(value);
                else if (key.equals("version"))
                    cookie.setVersion(Integer.parseInt(value));
                else if (key.equals("max-age")) {
                    Date date = new Date();
                    long then = date.getTime() + Integer.parseInt(value) * 1000;
                    date.setTime(then);
                    cookie.setExpiryDate(date);
                } else
                    // not separated by a comma
                    try {
                        cookie = new Cookie(name, value);
                        cookies.addElement(cookie);
                    } catch (IllegalArgumentException iae) {
                        // for now just bail
                        break;
                    }
            }
        }
        if (0 != cookies.size())
            saveCookies(cookies, connection);
    }
}
