public void run() {
    // If this is the last datanode in pipeline, then handle differently
    if (numTargets == 0) {
        lastDataNodeRun();
        return;
    }
    boolean lastPacketInBlock = false;
    while (running && datanode.shouldRun && !lastPacketInBlock) {
        try {
            short op = DataTransferProtocol.OP_STATUS_SUCCESS;
            boolean didRead = false;
            long expected = -2;
            try {
                // read seqno from downstream datanode
                long seqno = mirrorIn.readLong();
                didRead = true;
                if (seqno == -1) {
                    // send keepalive
                    replyOut.writeLong(-1);
                    replyOut.flush();
                    LOG.debug("PacketResponder " + numTargets + " got -1");
                    continue;
                } else if (seqno == -2) {
                    LOG.debug("PacketResponder " + numTargets + " got -2");
                } else {
                    LOG.debug("PacketResponder " + numTargets + " got seqno = " + seqno);
                    Packet pkt = null;
                    synchronized (this) {
                        while (running && datanode.shouldRun && ackQueue.size() == 0) {
                            if (LOG.isDebugEnabled()) {
                                LOG.debug("PacketResponder " + numTargets + " seqno = " + seqno + " for block " + block + " waiting for local datanode to finish write.");
                            }
                            wait();
                        }
                        pkt = ackQueue.removeFirst();
                        expected = pkt.seqno;
                        notifyAll();
                        LOG.debug("PacketResponder " + numTargets + " seqno = " + seqno);
                        if (seqno != expected) {
                            throw new IOException("PacketResponder " + numTargets + " for block " + block + " expected seqno:" + expected + " received:" + seqno);
                        }
                        lastPacketInBlock = pkt.lastPacketInBlock;
                    }
                }
            } catch (Throwable e) {
                if (running) {
                    LOG.info("PacketResponder " + block + " " + numTargets + " Exception " + StringUtils.stringifyException(e));
                    running = false;
                }
            }
            if (Thread.interrupted()) {
                /* The receiver thread cancelled this thread. 
               * We could also check any other status updates from the 
               * receiver thread (e.g. if it is ok to write to replyOut). 
               * It is prudent to not send any more status back to the client
               * because this datanode has a problem. The upstream datanode
               * will detect a timout on heartbeats and will declare that
               * this datanode is bad, and rightly so.
               */
                LOG.info("PacketResponder " + block + " " + numTargets + " : Thread is interrupted.");
                running = false;
                continue;
            }
            if (!didRead) {
                op = DataTransferProtocol.OP_STATUS_ERROR;
            }
            // file and finalize the block before responding success
            if (lastPacketInBlock && !receiver.finalized) {
                receiver.close();
                block.setNumBytes(receiver.offsetInBlock);
                datanode.data.finalizeBlock(block);
                datanode.myMetrics.blocksWritten.inc();
                datanode.notifyNamenodeReceivedBlock(block, DataNode.EMPTY_DEL_HINT);
                if (ClientTraceLog.isInfoEnabled() && receiver.clientName.length() > 0) {
                    ClientTraceLog.info(String.format(DN_CLIENTTRACE_FORMAT, receiver.inAddr, receiver.myAddr, block.getNumBytes(), "HDFS_WRITE", receiver.clientName, datanode.dnRegistration.getStorageID(), block));
                } else {
                    LOG.info("Received block " + block + " of size " + block.getNumBytes() + " from " + receiver.inAddr);
                }
            }
            // send my status back to upstream datanode
            // send seqno upstream
            replyOut.writeLong(expected);
            replyOut.writeShort(DataTransferProtocol.OP_STATUS_SUCCESS);
            LOG.debug("PacketResponder " + numTargets + " for block " + block + " responded my status " + " for seqno " + expected);
            // forward responses from downstream datanodes.
            for (int i = 0; i < numTargets && datanode.shouldRun; i++) {
                try {
                    if (op == DataTransferProtocol.OP_STATUS_SUCCESS) {
                        op = mirrorIn.readShort();
                        if (op != DataTransferProtocol.OP_STATUS_SUCCESS) {
                            LOG.debug("PacketResponder for block " + block + ": error code received from downstream " + " datanode[" + i + "] " + op);
                        }
                    }
                } catch (Throwable e) {
                    op = DataTransferProtocol.OP_STATUS_ERROR;
                }
                replyOut.writeShort(op);
            }
            replyOut.flush();
            LOG.debug("PacketResponder " + block + " " + numTargets + " responded other status " + " for seqno " + expected);
            // If we were unable to read the seqno from downstream, then stop.
            if (expected == -2) {
                running = false;
            }
            // client will drive the recovery mechanism.
            if (op == DataTransferProtocol.OP_STATUS_ERROR && receiver.clientName.length() > 0) {
                running = false;
            }
        } catch (IOException e) {
            if (running) {
                LOG.info("PacketResponder " + block + " " + numTargets + " Exception " + StringUtils.stringifyException(e));
                running = false;
            }
        } catch (RuntimeException e) {
            if (running) {
                LOG.info("PacketResponder " + block + " " + numTargets + " Exception " + StringUtils.stringifyException(e));
                running = false;
            }
        }
    }
    LOG.info("PacketResponder " + numTargets + " for block " + block + " terminating");
}
