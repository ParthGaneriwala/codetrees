public void sendGraphImage(AeGraphImageParameters aParams, AeProcessViewCache aCache) {
    try {
        // if the graphing module is not enabled, simply stream out the 'Image not available' image.
        if (!AeGraphProperties.getInstance().getPropertyBoolean(AeGraphProperties.ENABLE_GRAPHING, true)) {
            sendErrorImageStream();
            return;
        }
        // get the bpel graph
        AeProcessViewBase pv = getProcessView(aParams, aCache);
        AeBpelGraph graph = pv.getBpelGraph();
        // default case is 1 tile enclosing the full graph.
        int row = 1;
        int col = 1;
        int width = graph.getWidth();
        int height = graph.getHeight();
        if (aParams.mGridRow > 0 && aParams.mGridColumn > 0 && aParams.mTileWidth > 0 && aParams.mTileHeight > 0) {
            // override tiling based on request params.
            row = aParams.mGridRow;
            col = aParams.mGridColumn;
            width = aParams.mTileWidth;
            height = aParams.mTileHeight;
        }
        IAeImageEncoder codec = createImageEncoder(aParams);
        setImageEncoder(codec);
        if (codec != null) {
            // send out the image of the process graph.
            sendImageTile(graph, row, col, width, height);
        } else {
            // codec is null.
            sendCodecErrorImageStream();
        }
    } catch (AeResourceAllocationException re) {
        sendResourceErrorImageStream();
        // $NON-NLS-1$
        String info = AeMessages.format("AeGraphImageDriver.error", re.getInfo());
        AeException.logWarning(info);
    } catch (AeException aex) {
        sendErrorImageStream();
        // $NON-NLS-1$
        String info = AeMessages.format("AeGraphImageDriver.error", aex.getInfo());
        AeException.logWarning(info);
    } catch (Throwable t) {
        sendErrorImageStream();
        // $NON-NLS-1$
        String info = AeMessages.format("AeGraphImageDriver.error", t.getLocalizedMessage());
        AeException.logWarning(info);
    }
}
