public int update(Connection db) throws SQLException {
    int i = -1;
    if (!isValid(db)) {
        return -1;
    }
    boolean autoCommit = db.getAutoCommit();
    try {
        if (autoCommit) {
            db.setAutoCommit(false);
        }
        if (entered != null) {
            i = this.update(db, false);
        } else {
            i = this.update(db, true);
        }
        TicketLog thisEntry = new TicketLog();
        thisEntry.setEnteredBy(this.getModifiedBy());
        thisEntry.setDepartmentCode(this.getDepartmentCode());
        thisEntry.setAssignedTo(this.getAssignedTo());
        thisEntry.setEntryText(this.getComment());
        thisEntry.setTicketId(this.getId());
        thisEntry.setPriorityCode(this.getPriorityCode());
        thisEntry.setSeverityCode(this.getSeverityCode());
        if (this.getCloseIt()) {
            thisEntry.setClosed(true);
        }
        history.add(thisEntry);
        Iterator hist = history.iterator();
        while (hist.hasNext()) {
            TicketLog thisLog = (TicketLog) hist.next();
            thisLog.process(db, this.getId(), this.getEnteredBy(), this.getModifiedBy());
        }
        // Check for a change in the distribution list
        if (insertMembers != null || deleteMembers != null) {
            TicketContactList.updateContacts(db, this.getModifiedBy(), id, insertMembers, deleteMembers);
        }
        if (attachmentList != null) {
            FileItemList.convertTempFiles(db, Constants.PROJECT_TICKET_FILES, this.getModifiedBy(), id, attachmentList);
        }
        if (autoCommit) {
            db.commit();
        }
    } catch (SQLException e) {
        if (autoCommit) {
            db.rollback();
        }
        throw new SQLException(e.getMessage());
    } finally {
        if (autoCommit) {
            db.setAutoCommit(true);
        }
    }
    return i;
}
