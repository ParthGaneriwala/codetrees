public static Location getLocation(Object obj, String description) {
    if (obj instanceof Location) {
        return (Location) obj;
    }
    if (obj instanceof Locatable) {
        return ((Locatable) obj).getLocation();
    }
    // Check some well-known locatable exceptions
    if (obj instanceof SAXParseException) {
        SAXParseException spe = (SAXParseException) obj;
        if (spe.getSystemId() != null) {
            return new LocationImpl(description, spe.getSystemId(), spe.getLineNumber(), spe.getColumnNumber());
        } else {
            return Location.UNKNOWN;
        }
    }
    if (obj instanceof TransformerException) {
        TransformerException ex = (TransformerException) obj;
        SourceLocator locator = ex.getLocator();
        if (locator != null && locator.getSystemId() != null) {
            return new LocationImpl(description, locator.getSystemId(), locator.getLineNumber(), locator.getColumnNumber());
        } else {
            return Location.UNKNOWN;
        }
    }
    if (obj instanceof Locator) {
        Locator locator = (Locator) obj;
        if (locator.getSystemId() != null) {
            return new LocationImpl(description, locator.getSystemId(), locator.getLineNumber(), locator.getColumnNumber());
        } else {
            return Location.UNKNOWN;
        }
    }
    if (obj instanceof Element) {
        return LocationAttributes.getLocation((Element) obj);
    }
    // Keep the current list
    List currentFinders = finders;
    int size = currentFinders.size();
    for (int i = 0; i < size; i++) {
        WeakReference ref = (WeakReference) currentFinders.get(i);
        LocationFinder finder = (LocationFinder) ref.get();
        if (finder == null) {
            // This finder was garbage collected: update finders
            synchronized (LocationFinder.class) {
                // Update a clone of the current list to avoid breaking current iterations
                List newFinders = new ArrayList(finders);
                newFinders.remove(ref);
                finders = newFinders;
            }
        }
        Location result = finder.getLocation(obj, description);
        if (result != null) {
            return result;
        }
    }
    if (obj instanceof Throwable) {
        Throwable t = (Throwable) obj;
        StackTraceElement[] stack = t.getStackTrace();
        if (stack != null && stack.length > 0) {
            StackTraceElement trace = stack[0];
            if (trace.getLineNumber() >= 0) {
                String uri = trace.getClassName();
                if (trace.getFileName() != null) {
                    uri = uri.replace('.', '/');
                    uri = uri.substring(0, uri.lastIndexOf('/') + 1);
                    uri = uri + trace.getFileName();
                    URL url = ClassLoaderUtil.getResource(uri, LocationUtils.class);
                    if (url != null) {
                        uri = url.toString();
                    }
                }
                if (description == null) {
                    StringBuilder sb = new StringBuilder();
                    sb.append("Class: ").append(trace.getClassName()).append("\n");
                    sb.append("File: ").append(trace.getFileName()).append("\n");
                    sb.append("Method: ").append(trace.getMethodName()).append("\n");
                    sb.append("Line: ").append(trace.getLineNumber());
                    description = sb.toString();
                }
                return new LocationImpl(description, uri, trace.getLineNumber(), -1);
            }
        }
    }
    return Location.UNKNOWN;
}
