public boolean[] getResult(boolean[] srcValue1, boolean[] srcValue2, int ope) {
    boolean[] result = new boolean[32];
    // ��λ��
    int shift = 0;
    long src1 = 0;
    long src2 = 0;
    switch(ope) {
        case NOP:
            break;
        case SEQ:
            if (toSigned(srcValue1, 0, 31) == toSigned(srcValue2, 0, 31))
                result[31] = true;
            break;
        case SNE:
            if (toSigned(srcValue1, 0, 31) != toSigned(srcValue2, 0, 31))
                result[31] = true;
            break;
        case SGT:
            if (toSigned(srcValue1, 0, 31) > toSigned(srcValue2, 0, 31))
                result[31] = true;
            break;
        case SLE:
            if (toSigned(srcValue1, 0, 31) <= toSigned(srcValue2, 0, 31))
                result[31] = true;
            break;
        case SLT:
            if (toSigned(srcValue1, 0, 31) < toSigned(srcValue2, 0, 31))
                result[31] = true;
            break;
        case ADD:
            result = ADD(srcValue1, srcValue2);
            break;
        case ADDU:
            result = ADD(srcValue1, srcValue2);
            break;
        case SUB:
            result = SUB(srcValue1, srcValue2);
            break;
        case SUBU:
            result = SUB(srcValue1, srcValue2);
            break;
        case MULT:
            src1 = toSigned(srcValue1, 0, 31);
            src2 = toSigned(srcValue2, 0, 31);
            result = long2Boolean(src1 * src2);
            break;
        case MULTU:
            src1 = toUnsigned(srcValue1, 0, 31);
            src2 = toUnsigned(srcValue2, 0, 31);
            result = long2Boolean(src1 * src2);
            break;
        case DIV:
            src1 = toSigned(srcValue1, 0, 31);
            src2 = toSigned(srcValue2, 0, 31);
            result = long2Boolean(src1 / src2);
            break;
        case DIVU:
            src1 = toUnsigned(srcValue1, 0, 31);
            src2 = toUnsigned(srcValue2, 0, 31);
            result = long2Boolean(src1 / src2);
            break;
        case AND:
            for (int i = 0; i < 32; i++) result[i] = srcValue1[i] & srcValue2[i];
            break;
        case OR:
            for (int i = 0; i < 32; i++) result[i] = srcValue1[i] | srcValue2[i];
            break;
        case XOR:
            for (int i = 0; i < 32; i++) {
                result[i] = XOR(srcValue1[i], srcValue2[i]);
            }
            break;
        case SLL:
            shift = (int) toUnsigned(srcValue2, 27, 31);
            for (int i = 0; i < 32 - shift; i++) result[i] = srcValue1[i + shift];
            for (int i = 32 - shift; i < 32; i++) result[i] = false;
            break;
        case SRL:
            shift = (int) toUnsigned(srcValue2, 27, 31);
            for (int i = 0; i < shift; i++) result[i] = false;
            for (int i = shift; i < 32; i++) result[i] = srcValue1[i - shift];
            break;
        case SRA:
            shift = (int) toUnsigned(srcValue2, 27, 31);
            boolean sign = srcValue1[0];
            for (int i = 0; i < shift; i++) result[i] = sign;
            for (int i = shift; i < 32; i++) result[i] = srcValue1[i - shift];
            break;
    }
    return result;
}
