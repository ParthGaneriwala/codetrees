public synchronized String executeCommandInstallDatabase(ActionContext context) {
    ApplicationPrefs prefs = getApplicationPrefs(context);
    if (SetupUtils.isConfigured(prefs)) {
        return "AlreadySetupOK";
    }
    // Make sure a connection element is ready
    initializeConnectionElement(context);
    // Proceed with the database install
    Connection db = null;
    try {
        db = getConnection(context);
        String pathType = null;
        if (!SetupUtils.isDatabaseInstalled(db)) {
            // Determine directory
            switch(DatabaseUtils.getType(db)) {
                case DatabaseUtils.POSTGRESQL:
                    System.out.println("Setup-> Installing PostgreSQL");
                    pathType = "postgresql";
                    break;
                case DatabaseUtils.MSSQL:
                    System.out.println("Setup-> Installing MSSQL");
                    pathType = "mssql";
                    break;
                default:
                    System.out.println("Setup-> * Database could not be determined: " + DatabaseUtils.getType(db));
                    break;
            }
            // Install the schema
            DatabaseUtils.executeSQL(db, context.getServletContext().getResourceAsStream("/WEB-INF/database/" + pathType + "/new_db.sql"));
            DatabaseUtils.executeSQL(db, context.getServletContext().getResourceAsStream("/WEB-INF/database/" + pathType + "/new_project.sql"));
            DatabaseUtils.executeSQL(db, context.getServletContext().getResourceAsStream("/WEB-INF/database/" + pathType + "/new_project_blog.sql"));
            DatabaseUtils.executeSQL(db, context.getServletContext().getResourceAsStream("/WEB-INF/database/" + pathType + "/new_project_wiki.sql"));
            DatabaseUtils.executeSQL(db, context.getServletContext().getResourceAsStream("/WEB-INF/database/" + pathType + "/new_project_ads.sql"));
            DatabaseUtils.executeSQL(db, context.getServletContext().getResourceAsStream("/WEB-INF/database/" + pathType + "/new_project_badges.sql"));
            DatabaseUtils.executeSQL(db, context.getServletContext().getResourceAsStream("/WEB-INF/database/" + pathType + "/new_project_classifieds.sql"));
            DatabaseUtils.executeSQL(db, context.getServletContext().getResourceAsStream("/WEB-INF/database/" + pathType + "/new_project_webcast.sql"));
            DatabaseUtils.executeSQL(db, context.getServletContext().getResourceAsStream("/WEB-INF/database/" + pathType + "/new_task.sql"));
            DatabaseUtils.executeSQL(db, context.getServletContext().getResourceAsStream("/WEB-INF/database/" + pathType + "/new_ticket.sql"));
            DatabaseUtils.executeSQL(db, context.getServletContext().getResourceAsStream("/WEB-INF/database/" + pathType + "/new_order.sql"));
            DatabaseUtils.executeSQL(db, context.getServletContext().getResourceAsStream("/WEB-INF/database/" + pathType + "/new_timesheet.sql"));
            DatabaseUtils.executeSQL(db, context.getServletContext().getResourceAsStream("/WEB-INF/database/" + pathType + "/new_translation.sql"));
            DatabaseUtils.executeSQL(db, context.getServletContext().getResourceAsStream("/WEB-INF/database/" + pathType + "/new_reports.sql"));
            DatabaseUtils.executeSQL(db, context.getServletContext().getResourceAsStream("/WEB-INF/database/" + pathType + "/new_service.sql"));
            DatabaseUtils.executeSQL(db, context.getServletContext().getResourceAsStream("/WEB-INF/database/" + pathType + "/new_dashboard.sql"));
            // Load the objects and services
            SyncTableList syncTableList = loadSyncTableList(context);
            // Add default data
            SetupUtils.insertDefaultData(db, context.getServletContext(), "/WEB-INF/database/");
            // Add the default categories
            SetupUtils.insertDefaultCategories(db, syncTableList, prefs.get(ApplicationPrefs.FILE_LIBRARY_PATH) + "1" + fs + "projects" + fs);
            // One last verify...
            if (!SetupUtils.isDatabaseInstalled(db)) {
                throw new Exception("Database installation error.");
            }
        }
    } catch (Exception e) {
        e.printStackTrace(System.out);
        context.getRequest().setAttribute("actionError", "An error occurred while trying to install the database, the " + "following error was provided: " + e.getMessage());
        return "SetupInstallDatabaseERROR";
    } finally {
        freeConnection(context, db);
    }
    return "SetupInstallDatabaseOK";
}
