public static byte[] decode(byte[] base64Data, IntRef length) {
    int numberQuadruple = base64Data.length / FOURBYTE;
    byte[] decodedData = null;
    byte b1 = 0, b2 = 0, b3 = 0, b4 = 0, marker0 = 0, marker1 = 0;
    // Throw away anything not in base64Data
    // Adjust size
    int encodedIndex = 0;
    int dataIndex = 0;
    decodedData = new byte[numberQuadruple * 3 + 1];
    for (int i = 0; i < numberQuadruple; i++) {
        dataIndex = i * 4;
        marker0 = base64Data[dataIndex + 2];
        marker1 = base64Data[dataIndex + 3];
        if (base64Data[dataIndex] == PAD)
            break;
        if (base64Data[dataIndex + 1] == PAD)
            break;
        b1 = base64Alphabet[base64Data[dataIndex]];
        b2 = base64Alphabet[base64Data[dataIndex + 1]];
        if (marker0 != PAD && marker1 != PAD) {
            // No PAD e.g 3cQl
            b3 = base64Alphabet[marker0];
            b4 = base64Alphabet[marker1];
            decodedData[encodedIndex] = (byte) (b1 << 2 | b2 >> 4);
            decodedData[encodedIndex + 1] = (byte) (((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));
            decodedData[encodedIndex + 2] = (byte) (b3 << 6 | b4);
        } else if (marker0 == PAD) {
            // Two PAD e.g. 3c[Pad][Pad]
            decodedData[encodedIndex] = (byte) (b1 << 2 | b2 >> 4);
            decodedData[encodedIndex + 1] = (byte) ((b2 & 0xf) << 4);
            decodedData[encodedIndex + 2] = (byte) 0;
            encodedIndex += 1;
            break;
        } else if (marker1 == PAD) {
            // One PAD e.g. 3cQ[Pad]
            b3 = base64Alphabet[marker0];
            decodedData[encodedIndex] = (byte) (b1 << 2 | b2 >> 4);
            decodedData[encodedIndex + 1] = (byte) (((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));
            decodedData[encodedIndex + 2] = (byte) (b3 << 6);
            encodedIndex += 2;
            break;
        }
        encodedIndex += 3;
    }
    length.set(encodedIndex);
    return decodedData;
}
