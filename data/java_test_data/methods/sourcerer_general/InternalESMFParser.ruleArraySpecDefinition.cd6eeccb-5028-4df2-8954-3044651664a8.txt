// $ANTLR end entryRuleArraySpecDefinition
// $ANTLR start ruleArraySpecDefinition
public final EObject ruleArraySpecDefinition() throws RecognitionException {
    EObject current = null;
    Token lv_rank_5 = null;
    Enumerator lv_typekind_2 = null;
    EObject temp = null;
    setCurrentLookahead();
    resetLookahead();
    try {
        // ../ESMFDSL/src-gen/org/earthsystemcurator/dsl/parser/antlr/internal/InternalESMF.g:777:6: ( ( 'typekind' ':' (lv_typekind_2= ruleESMFTypeKind ) 'rank' ':' (lv_rank_5= RULE_INT ) ) )
        // ../ESMFDSL/src-gen/org/earthsystemcurator/dsl/parser/antlr/internal/InternalESMF.g:778:1: ( 'typekind' ':' (lv_typekind_2= ruleESMFTypeKind ) 'rank' ':' (lv_rank_5= RULE_INT ) )
        {
            // ../ESMFDSL/src-gen/org/earthsystemcurator/dsl/parser/antlr/internal/InternalESMF.g:778:1: ( 'typekind' ':' (lv_typekind_2= ruleESMFTypeKind ) 'rank' ':' (lv_rank_5= RULE_INT ) )
            // ../ESMFDSL/src-gen/org/earthsystemcurator/dsl/parser/antlr/internal/InternalESMF.g:778:2: 'typekind' ':' (lv_typekind_2= ruleESMFTypeKind ) 'rank' ':' (lv_rank_5= RULE_INT )
            {
                match(input, 28, FOLLOW_28_in_ruleArraySpecDefinition1529);
                createLeafNode(grammarAccess.getArraySpecDefinitionAccess().getTypekindKeyword_0(), null);
                match(input, 18, FOLLOW_18_in_ruleArraySpecDefinition1538);
                createLeafNode(grammarAccess.getArraySpecDefinitionAccess().getColonKeyword_1(), null);
                // ../ESMFDSL/src-gen/org/earthsystemcurator/dsl/parser/antlr/internal/InternalESMF.g:786:1: (lv_typekind_2= ruleESMFTypeKind )
                // ../ESMFDSL/src-gen/org/earthsystemcurator/dsl/parser/antlr/internal/InternalESMF.g:789:6: lv_typekind_2= ruleESMFTypeKind
                {
                    currentNode = createCompositeNode(grammarAccess.getArraySpecDefinitionAccess().getTypekindESMFTypeKindEnumRuleCall_2_0(), currentNode);
                    pushFollow(FOLLOW_ruleESMFTypeKind_in_ruleArraySpecDefinition1572);
                    lv_typekind_2 = ruleESMFTypeKind();
                    _fsp--;
                    if (current == null) {
                        current = factory.create(grammarAccess.getArraySpecDefinitionRule().getType().getClassifier());
                        associateNodeWithAstElement(currentNode.getParent(), current);
                    }
                    try {
                        set(current, "typekind", lv_typekind_2, "ESMFTypeKind", lastConsumedNode);
                    } catch (ValueConverterException vce) {
                        handleValueConverterException(vce);
                    }
                    currentNode = currentNode.getParent();
                }
                match(input, 29, FOLLOW_29_in_ruleArraySpecDefinition1585);
                createLeafNode(grammarAccess.getArraySpecDefinitionAccess().getRankKeyword_3(), null);
                match(input, 18, FOLLOW_18_in_ruleArraySpecDefinition1594);
                createLeafNode(grammarAccess.getArraySpecDefinitionAccess().getColonKeyword_4(), null);
                // ../ESMFDSL/src-gen/org/earthsystemcurator/dsl/parser/antlr/internal/InternalESMF.g:815:1: (lv_rank_5= RULE_INT )
                // ../ESMFDSL/src-gen/org/earthsystemcurator/dsl/parser/antlr/internal/InternalESMF.g:817:6: lv_rank_5= RULE_INT
                {
                    lv_rank_5 = (Token) input.LT(1);
                    match(input, RULE_INT, FOLLOW_RULE_INT_in_ruleArraySpecDefinition1616);
                    createLeafNode(grammarAccess.getArraySpecDefinitionAccess().getRankINTTerminalRuleCall_5_0(), "rank");
                    if (current == null) {
                        current = factory.create(grammarAccess.getArraySpecDefinitionRule().getType().getClassifier());
                        associateNodeWithAstElement(currentNode, current);
                    }
                    try {
                        set(current, "rank", lv_rank_5, "INT", lastConsumedNode);
                    } catch (ValueConverterException vce) {
                        handleValueConverterException(vce);
                    }
                }
            }
        }
        resetLookahead();
        lastConsumedNode = currentNode;
    } catch (RecognitionException re) {
        recover(input, re);
        appendSkippedTokens();
    } finally {
    }
    return current;
}
