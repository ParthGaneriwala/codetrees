public void layoutContainer(Container parent) {
    synchronized (parent.getTreeLock()) {
        Insets insets = parent.getInsets();
        int ncomponents = parent.getComponentCount();
        int nrows = getRows();
        int ncols = getColumns();
        int hgap = getHgap();
        int vgap = getVgap();
        boolean ltr = parent.getComponentOrientation().isLeftToRight();
        if (!ltr)
            throw new IllegalArgumentException("Orientation oher than left-to-right not supported");
        if (ncomponents == 0) {
            return;
        }
        if (nrows > 0) {
            ncols = (ncomponents + nrows - 1) / nrows;
        } else {
            nrows = (ncomponents + ncols - 1) / ncols;
        }
        // compute the width of each column (max width of component in column)
        int[] colWidth = new int[ncols];
        for (int col = 0; col < ncols; col++) {
            int w = 0;
            for (int i = col; i < ncomponents; i += ncols) {
                Component comp = parent.getComponent(i);
                Dimension d = comp.getPreferredSize();
                if (w < d.width) {
                    w = d.width;
                }
            }
            colWidth[col] = w;
        }
        // all columns except last one
        int colSum = 0;
        for (int col = 0; col < ncols - 1; col++) {
            colSum += colWidth[col];
        }
        int[] rowHeight = new int[nrows];
        int rowSum = 0;
        for (int row = 0; row < nrows; row++) {
            int h = 0;
            for (int i = row * ncols; (i < (row + 1) * ncols) && (i < ncomponents); i++) {
                Component comp = parent.getComponent(i);
                Dimension d = comp.getPreferredSize();
                if (h < d.height) {
                    h = d.height;
                }
            }
            rowHeight[row] = h;
        }
        // all columns except last one
        rowSum = 0;
        for (int row = 0; row < nrows - 1; row++) {
            rowSum += rowHeight[row];
        }
        int parentWidth = parent.getWidth() - (insets.left + insets.right);
        int parentHeight = parent.getHeight() - (insets.top + insets.bottom);
        // set width of last column to take all the remaining space
        colWidth[ncols - 1] = (parentWidth - (ncols - 1) * hgap) - colSum;
        if (colWidth[ncols - 1] < 0)
            colWidth[ncols - 1] = 0;
        // set height of last row to take all the remaining space
        rowHeight[nrows - 1] = (parentHeight - (nrows - 1) * vgap) - rowSum;
        if (rowHeight[nrows - 1] < 0)
            rowHeight[nrows - 1] = 0;
        for (int r = 0, y = insets.top; r < nrows; y += rowHeight[r] + vgap, r++) {
            int x = insets.left;
            for (int c = 0; c < ncols; c++) {
                int i = r * ncols + c;
                if (i < ncomponents) {
                    parent.getComponent(i).setBounds(x, y, colWidth[c], rowHeight[r]);
                }
                x += colWidth[c] + hgap;
            }
        }
    }
}
