private int init(String[] args) throws IOException {
    try {
        fs = FileSystem.get(getConf());
    } catch (IOException ioe) {
        System.err.println("Can not initialize the file system: " + ioe.getLocalizedMessage());
        return -1;
    }
    int hostHashCode = hostname.hashCode();
    try {
        for (int i = 0; i < args.length; i++) {
            // parse command line
            if (args[i].equals("-readProbability")) {
                readPr = Double.parseDouble(args[++i]);
                if (readPr < 0 || readPr > 1) {
                    System.err.println("The read probability must be [0, 1]: " + readPr);
                    return -1;
                }
            } else if (args[i].equals("-writeProbability")) {
                writePr = Double.parseDouble(args[++i]);
                if (writePr < 0 || writePr > 1) {
                    System.err.println("The write probability must be [0, 1]: " + writePr);
                    return -1;
                }
            } else if (args[i].equals("-root")) {
                root = new Path(args[++i]);
            } else if (args[i].equals("-maxDelayBetweenOps")) {
                // in milliseconds
                maxDelayBetweenOps = Integer.parseInt(args[++i]);
            } else if (args[i].equals("-numOfThreads")) {
                numOfThreads = Integer.parseInt(args[++i]);
                if (numOfThreads <= 0) {
                    System.err.println("Number of threads must be positive: " + numOfThreads);
                    return -1;
                }
            } else if (args[i].equals("-startTime")) {
                startTime = Long.parseLong(args[++i]);
            } else if (args[i].equals("-elapsedTime")) {
                elapsedTime = Long.parseLong(args[++i]);
            } else if (args[i].equals("-seed")) {
                r = new Random(Long.parseLong(args[++i]) + hostHashCode);
            } else {
                System.err.println(USAGE);
                ToolRunner.printGenericCommandUsage(System.err);
                return -1;
            }
        }
    } catch (NumberFormatException e) {
        System.err.println("Illegal parameter: " + e.getLocalizedMessage());
        System.err.println(USAGE);
        return -1;
    }
    if (readPr + writePr < 0 || readPr + writePr > 1) {
        System.err.println("The sum of read probability and write probability must be [0, 1]: " + readPr + " " + writePr);
        return -1;
    }
    if (r == null) {
        r = new Random(System.currentTimeMillis() + hostHashCode);
    }
    return initFileDirTables();
}
