public static void main(String[] args) {
    File f;
    String[][] values;
    try {
        // DOING HU, NOT SLUZEK!!!
        f = new File("D:/synthLandscan/randomStarts/momentData/GAMtestData.csv");
        FileReader in = new FileReader(f);
        CSVParser csvp = new CSVParser(in);
        values = csvp.getAllValues();
    } catch (FileNotFoundException fnfe) {
        throw new RuntimeException("No file!  " + fnfe.getMessage());
    } catch (IOException ioe) {
        throw new RuntimeException("IO Exception!  " + ioe.getMessage());
    }
    int numInvs = values[1].length - 1;
    // to see if leaving one or two invariants out improves classification (Auroop from ORNL's suggestion)
    boolean[] include = new boolean[numInvs];
    for (int i = 0; i < include.length; i++) {
        include[i] = true;
    }
    int numInvsUsed = 0;
    for (int i = 0; i < include.length; i++) {
        if (include[i]) {
            numInvsUsed++;
        }
    }
    ClassedArray[] matrix = new ClassedArray[values.length - 1];
    for (int i = 1; i < values.length; i++) {
        // was values[i].length - 1
        double[] data = new double[numInvsUsed];
        // because I can't assume it will be data[j]--some values of j might be skipped by the include array
        int index = 0;
        for (int j = 0; j < values[i].length - 1; j++) {
            if (include[j]) {
                data[index] = Double.parseDouble(values[i][j]);
                index++;
            }
        }
        ClassedArray ca = new ClassedArray();
        ca.setArray(data);
        ca.setKlass(values[i][values[i].length - 1]);
        matrix[i - 1] = ca;
    }
    z = new ClassedArray[matrix.length];
    means = new double[matrix[0].getArray().length];
    stdevs = new double[matrix[0].getArray().length];
    logMeans = new double[matrix[0].getArray().length];
    logStdevs = new double[matrix[0].getArray().length];
    // if the mean is within tolerance of 0 and the standard deviation is within tolerance of 1, then assume it's already standardized.
    double tolerance = 0.001;
    // compute means
    double[] sums = new double[means.length];
    double[] logSums = new double[logMeans.length];
    for (int i = 0; i < matrix.length; i++) {
        double[] snuh = matrix[i].getArray();
        for (int j = 0; j < snuh.length; j++) {
            sums[j] = sums[j] + snuh[j];
            logSums[j] = logSums[j] + Math.log(Math.abs(snuh[j]));
        }
    }
    for (int k = 0; k < means.length; k++) {
        means[k] = sums[k] / matrix.length;
        logMeans[k] = logSums[k] / matrix.length;
    }
    // compute stdevs
    Arrays.fill(sums, 0);
    Arrays.fill(logSums, 0);
    for (int i = 0; i < matrix.length; i++) {
        double[] snuh = matrix[i].getArray();
        for (int j = 0; j < snuh.length; j++) {
            sums[j] = sums[j] + ((snuh[j] - means[j]) * (snuh[j] - means[j]));
            logSums[j] = logSums[j] + ((snuh[j] - logMeans[j]) * (snuh[j] - logMeans[j]));
        }
    }
    for (int k = 0; k < stdevs.length; k++) {
        stdevs[k] = Math.sqrt(sums[k] / matrix.length);
        logStdevs[k] = Math.sqrt(logSums[k] / matrix.length);
    }
    // compute standardized values (if needed)
    double[][] zMatrix = new double[matrix.length][means.length];
    for (int i = 0; i < means.length; i++) {
        boolean standardized = (Math.abs(means[i]) < tolerance) && (Math.abs(stdevs[i] - 1) < tolerance);
        for (int j = 0; j < matrix.length; j++) {
            if (standardized) {
                zMatrix[j][i] = matrix[j].getArray()[i];
            } else {
                zMatrix[j][i] = (matrix[j].getArray()[i] - means[i]) / stdevs[i];
            }
        }
    }
    for (int k = 0; k < matrix.length; k++) {
        ClassedArray ca = new ClassedArray();
        ca.setArray(zMatrix[k]);
        ca.setKlass(matrix[k].getKlass());
        z[k] = ca;
    }
    medianDistances = new double[maxK];
    medianDistances = medianDistances(z, maxK);
    // didn't think the initialization would take 100 lines...  But the training data
    // and classifier should now be ready.
    modes = new int[] { SetClassifier.MODE, SetClassifier.AVERAGE, SetClassifier.SIMPLE_DS, SetClassifier.PROP_BEL_TRANS, SetClassifier.COMBINED_AVERAGE, SetClassifier.MODIFIED_AVERAGE, SetClassifier.TREE_PBT };
    modeStrings = new String[] { "mode", "average", "simple DS", "prop bel trans", "comb. ave.", "modified ave.", "tree prop bel trans" };
    classNames = DissUtils.extractClassNames(z);
    System.out.println("done initializing");
    try {
        // DOING THE HU MOMENTS, NOT SLUZEK!!!
        MethodClassifier simpleGAMSluzekInf = new MethodClassifier("GAM", true, "inf");
        MethodClassifier dwGAMSluzekInf = new MethodClassifier("GAM", false, "inf");
        MethodClassifier simpleGAMSluzekRoad = new MethodClassifier("GAM", true, "road");
        MethodClassifier dwGAMSluzekRoad = new MethodClassifier("GAM", false, "road");
        MethodClassifier simpleGAMSluzekRiver = new MethodClassifier("GAM", true, "river");
        MethodClassifier dwGAMSluzekRiver = new MethodClassifier("GAM", false, "river");
        MethodClassifier simpleGAMSluzekWind = new MethodClassifier("GAM", true, "wind");
        MethodClassifier dwGAMSluzekWind = new MethodClassifier("GAM", false, "wind");
        MethodClassifier simpleGAMSluzekAirport = new MethodClassifier("GAM", true, "airport");
        MethodClassifier dwGAMSluzekAirport = new MethodClassifier("GAM", false, "airport");
        Thread simpleGAMSluzekThreadInf = new Thread(simpleGAMSluzekInf);
        Thread dwGAMSluzekThreadInf = new Thread(dwGAMSluzekInf);
        Thread simpleGAMSluzekThreadRoad = new Thread(simpleGAMSluzekRoad);
        Thread dwGAMSluzekThreadRoad = new Thread(dwGAMSluzekRoad);
        Thread simpleGAMSluzekThreadRiver = new Thread(simpleGAMSluzekRiver);
        Thread dwGAMSluzekThreadRiver = new Thread(dwGAMSluzekRiver);
        Thread simpleGAMSluzekThreadWind = new Thread(simpleGAMSluzekWind);
        Thread dwGAMSluzekThreadWind = new Thread(dwGAMSluzekWind);
        Thread simpleGAMSluzekThreadAirport = new Thread(simpleGAMSluzekAirport);
        Thread dwGAMSluzekThreadAirport = new Thread(dwGAMSluzekAirport);
        simpleGAMSluzekThreadInf.start();
        dwGAMSluzekThreadInf.start();
        simpleGAMSluzekThreadRoad.start();
        dwGAMSluzekThreadRoad.start();
        simpleGAMSluzekThreadRiver.start();
        dwGAMSluzekThreadRiver.start();
        simpleGAMSluzekThreadWind.start();
        dwGAMSluzekThreadWind.start();
        simpleGAMSluzekThreadAirport.start();
        dwGAMSluzekThreadAirport.start();
        simpleGAMSluzekThreadInf.join();
        dwGAMSluzekThreadInf.join();
        simpleGAMSluzekThreadRoad.join();
        dwGAMSluzekThreadRoad.join();
        simpleGAMSluzekThreadRiver.join();
        dwGAMSluzekThreadRiver.join();
        simpleGAMSluzekThreadWind.join();
        dwGAMSluzekThreadWind.join();
        simpleGAMSluzekThreadAirport.join();
        dwGAMSluzekThreadAirport.join();
    } catch (InterruptedException ie) {
        System.out.println(ie.getMessage());
        threadMessage("This thread was interrupted");
    }
}
