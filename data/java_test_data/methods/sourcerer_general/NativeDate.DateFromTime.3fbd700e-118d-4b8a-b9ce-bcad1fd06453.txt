private static int DateFromTime(double t) {
    int year = YearFromTime(t);
    int d = (int) (Day(t) - DayFromYear(year));
    d -= 31 + 28;
    if (d < 0) {
        return (d < -28) ? d + 31 + 28 + 1 : d + 28 + 1;
    }
    if (IsLeapYear(year)) {
        if (d == 0)
            // 29 February
            return 29;
        --d;
    }
    // d: date count from 1 March
    int mdays, mstart;
    switch(// approx number of month since March
    d / 30) {
        case 0:
            return d + 1;
        case 1:
            mdays = 31;
            mstart = 31;
            break;
        case 2:
            mdays = 30;
            mstart = 31 + 30;
            break;
        case 3:
            mdays = 31;
            mstart = 31 + 30 + 31;
            break;
        case 4:
            mdays = 30;
            mstart = 31 + 30 + 31 + 30;
            break;
        case 5:
            mdays = 31;
            mstart = 31 + 30 + 31 + 30 + 31;
            break;
        case 6:
            mdays = 31;
            mstart = 31 + 30 + 31 + 30 + 31 + 31;
            break;
        case 7:
            mdays = 30;
            mstart = 31 + 30 + 31 + 30 + 31 + 31 + 30;
            break;
        case 8:
            mdays = 31;
            mstart = 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31;
            break;
        case 9:
            mdays = 30;
            mstart = 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + 30;
            break;
        case 10:
            // Late december
            return d - (31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + 30) + 1;
        default:
            throw Kit.codeBug();
    }
    d -= mstart;
    if (d < 0) {
        // wrong estimate: sfhift to previous month
        d += mdays;
    }
    return d + 1;
}
