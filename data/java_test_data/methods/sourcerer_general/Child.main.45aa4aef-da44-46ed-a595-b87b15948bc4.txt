public static void main(String[] args) throws Throwable {
    LOG.debug("Child starting");
    JobConf defaultConf = new JobConf();
    String host = args[0];
    int port = Integer.parseInt(args[1]);
    InetSocketAddress address = new InetSocketAddress(host, port);
    final TaskAttemptID firstTaskid = TaskAttemptID.forName(args[2]);
    final int SLEEP_LONGER_COUNT = 5;
    taskid = firstTaskid;
    int jvmIdInt = Integer.parseInt(args[3]);
    JVMId jvmId = new JVMId(taskid.getJobID(), taskid.isMap(), jvmIdInt);
    TaskUmbilicalProtocol umbilical = (TaskUmbilicalProtocol) RPC.getProxy(TaskUmbilicalProtocol.class, TaskUmbilicalProtocol.versionID, address, defaultConf);
    // -1 signifies "no limit"
    int numTasksToExecute = -1;
    int numTasksExecuted = 0;
    Thread t = new Thread() {

        public void run() {
            // logs of the currently running task
            while (true) {
                try {
                    Thread.sleep(5000);
                    if (taskid != null) {
                        TaskLog.syncLogs(firstTaskid, taskid);
                    }
                } catch (InterruptedException ie) {
                } catch (IOException iee) {
                    LOG.error("Error in syncLogs: " + iee);
                    System.exit(-1);
                }
            }
        }
    };
    t.setName("Thread for syncLogs");
    t.setDaemon(true);
    t.start();
    // for the memory management, a PID file is written and the PID file
    // is written once per JVM. We simply symlink the file on a per task
    // basis later (see below). Long term, we should change the Memory
    // manager to use JVMId instead of TaskAttemptId
    Path srcPidPath = null;
    Path dstPidPath = null;
    int idleLoopCount = 0;
    try {
        while (true) {
            JvmTask myTask = umbilical.getTask(jvmId);
            if (myTask.shouldDie()) {
                break;
            } else {
                if (myTask.getTask() == null) {
                    taskid = null;
                    if (++idleLoopCount >= SLEEP_LONGER_COUNT) {
                        // we sleep for a bigger interval when we don't receive
                        // tasks for a while
                        Thread.sleep(1500);
                    } else {
                        Thread.sleep(500);
                    }
                    continue;
                }
            }
            idleLoopCount = 0;
            Task task = myTask.getTask();
            taskid = task.getTaskID();
            // create the index file so that the log files
            // are viewable immediately
            TaskLog.syncLogs(firstTaskid, taskid);
            JobConf job = new JobConf(task.getJobFile());
            if (job.getBoolean("task.memory.mgmt.enabled", false)) {
                if (srcPidPath == null) {
                    srcPidPath = TaskMemoryManagerThread.getPidFilePath(firstTaskid, job);
                }
                // to do symlink stuff only for the subsequent tasks
                if (!taskid.equals(firstTaskid)) {
                    dstPidPath = new Path(srcPidPath.getParent(), taskid.toString());
                    FileUtil.symLink(srcPidPath.toUri().getPath(), dstPidPath.toUri().getPath());
                }
            }
            // setupWorkDir actually sets up the symlinks for the distributed
            // cache. After a task exits we wipe the workdir clean, and hence
            // the symlinks have to be rebuilt.
            TaskRunner.setupWorkDir(job);
            numTasksToExecute = job.getNumTasksToExecutePerJvm();
            assert (numTasksToExecute != 0);
            TaskLog.cleanup(job.getInt("mapred.userlog.retain.hours", 24));
            task.setConf(job);
            defaultConf.addResource(new Path(task.getJobFile()));
            // Initiate Java VM metrics
            JvmMetrics.init(task.getPhase().toString(), job.getSessionId());
            // use job-specified working directory
            FileSystem.get(job).setWorkingDirectory(job.getWorkingDirectory());
            try {
                // run the task
                task.run(job, umbilical);
            } finally {
                TaskLog.syncLogs(firstTaskid, taskid);
                if (!taskid.equals(firstTaskid) && job.getBoolean("task.memory.mgmt.enabled", false)) {
                    new File(dstPidPath.toUri().getPath()).delete();
                }
            }
            if (numTasksToExecute > 0 && ++numTasksExecuted == numTasksToExecute) {
                break;
            }
        }
    } catch (FSError e) {
        LOG.fatal("FSError from child", e);
        umbilical.fsError(taskid, e.getMessage());
    } catch (Throwable throwable) {
        LOG.warn("Error running child", throwable);
        // Report back any failures, for diagnostic purposes
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        throwable.printStackTrace(new PrintStream(baos));
        umbilical.reportDiagnosticInfo(taskid, baos.toString());
    } finally {
        RPC.stopProxy(umbilical);
        MetricsContext metricsContext = MetricsUtil.getContext("mapred");
        metricsContext.close();
        // Shutting down log4j of the child-vm...
        // This assumes that on return from Task.run()
        // there is no more logging done.
        LogManager.shutdown();
    }
}
