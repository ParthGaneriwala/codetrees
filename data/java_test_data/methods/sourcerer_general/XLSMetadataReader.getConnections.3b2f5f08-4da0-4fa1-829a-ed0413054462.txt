public List<Connector> getConnections() throws InvalidMetadataFormatException {
    XLSSheets sheet = XLSSheets.findSheet(connectionsSheet.getName());
    if (connectionsSheet == null) {
        handleFormatError("Sheet not found! Check sheets names. ", sheet);
        return null;
    }
    List<Connector> connectors = new ArrayList<Connector>();
    Map<VirtualElement, List<Integer>> inConnectors = new HashMap<VirtualElement, List<Integer>>();
    Map<VirtualElement, List<Integer>> outConnectors = new HashMap<VirtualElement, List<Integer>>();
    Map<VirtualElement, Connector> cablesMap = new HashMap<VirtualElement, Connector>();
    for (int i = HEADER_ROWS_NR; i < connectionsSheet.getRows(); i++) {
        String outElementName = connectionsSheet.getCell(C_OUT_EL_COL_NR, i).getContents().trim();
        String inElementName = connectionsSheet.getCell(C_IN_EL_COL_NR, i).getContents().trim();
        String cableName = connectionsSheet.getCell(C_CABLE_COL_NR, i).getContents().trim();
        if (outElementName.equals("") && inElementName.equals("") && cableName.equals(""))
            continue;
        if (// ||
        cableName.equals("")) {
            handleFormatError("Cable, output or input element identifier is missing!", sheet, "unspecified", i);
            continue;
        }
        VirtualElement outElt = outElementName.equals("") ? null : elementMap.get(outElementName);
        VirtualElement inElt = inElementName.equals("") ? null : elementMap.get(inElementName);
        VirtualElement cable = (VirtualElement) elementMap.get(cableName);
        if (cable == null) {
            handleFormatError("Cable " + cableName + " undefined.", sheet, C_OUT_EL_COL_NR, i);
            continue;
        }
        int firstIndexOut = 0;
        int firstIndexIn = 0;
        int outConnNr = firstIndexOut;
        int inConnNr = firstIndexIn;
        if (outElt != null) {
            firstIndexOut = outElt.getElementType().getFirstIndexOut();
            try {
                outConnNr = Integer.parseInt(connectionsSheet.getCell(C_OUT_CON_COL_NR, i).getContents().trim());
            } catch (NumberFormatException e) {
                handleFormatError("Output connector index " + "should be an long integer value! Count starts with " + firstIndexOut, sheet, C_OUT_CON_COL_NR, i, e);
                continue;
            }
            if (outConnNr >= outElt.getElementType().getOutputConnectorsNr() + firstIndexOut && outConnNr < firstIndexOut) {
                handleFormatError("Output connector index: " + outConnNr + " should be between " + firstIndexOut + " and type's: " + outElt.getElementType() + " Output Connectors Nr: " + outElt.getElementType().getOutputConnectorsNr() + ". Check if both values are correct.", sheet, C_OUT_CON_COL_NR, i);
                continue;
            }
            if (outConnectors.containsKey(outElt)) {
                List<Integer> eltConnectors = outConnectors.get(outElt);
                if (eltConnectors.contains(outConnNr)) {
                    handleFormatError("Duplicate input connector " + outConnNr + " for element " + outElt.getName(), sheet, CN_OUTPUT_INDEX_COL_NR, i);
                } else
                    eltConnectors.add(outConnNr);
            } else {
                List<Integer> eltConnectors = new LinkedList<Integer>();
                eltConnectors.add(outConnNr);
                outConnectors.put(outElt, eltConnectors);
            }
        }
        if (inElt != null) {
            firstIndexIn = inElt.getElementType().getFirstIndexIn();
            try {
                inConnNr = Integer.parseInt(connectionsSheet.getCell(C_IN_CON_COL_NR, i).getContents().trim());
            } catch (NumberFormatException e) {
                handleFormatError("Input connector index " + "should be an long integer value! Count starts with " + firstIndexOut, sheet, C_IN_CON_COL_NR, i, e);
                continue;
            }
            if (inConnNr >= inElt.getElementType().getInputConnectorsNr() + firstIndexOut && inConnNr < firstIndexIn) {
                handleFormatError("Input connector index: " + inConnNr + "\n" + "should be between " + firstIndexIn + " and type's: " + inElt.getElementType() + " Input Connectors Nr: " + inElt.getElementType().getInputConnectorsNr() + "\nCheck if both values are correct.", sheet, C_IN_CON_COL_NR, i);
                continue;
            }
            if (inConnectors.containsKey(inElt)) {
                List<Integer> eltConnectors = inConnectors.get(inElt);
                if (eltConnectors.contains(inConnNr)) {
                    handleFormatError("Duplicate input connector " + inConnNr + " for element " + inElt.getName(), sheet, C_IN_CON_COL_NR, i);
                } else
                    eltConnectors.add(inConnNr);
            } else {
                List<Integer> eltConnectors = new LinkedList<Integer>();
                eltConnectors.add(inConnNr);
                inConnectors.put(inElt, eltConnectors);
            }
        }
        Connector c = new Connector();
        if (cablesMap.containsKey(cable)) {
            Connector cn = cablesMap.get(cable);
            handleFormatError("Cable already used for connection : [" + cn.getElementIn() + " - " + cn.getElementOut() + "]", XLSSheets.CONNECTIONS, C_CABLE_COL_NR, i);
        } else {
            cablesMap.put(cable, c);
            c.setCable(cable);
            c.setElementIn(outElt);
            c.setElementOut(inElt);
            c.setPositionIn(outConnNr);
            c.setPositionOut(inConnNr);
            if (outElt != null)
                outElt.getOutputConnectors().add(c);
            if (inElt != null)
                inElt.getInputConnectors().add(c);
            connectors.add(c);
        }
    }
    return connectors;
}
