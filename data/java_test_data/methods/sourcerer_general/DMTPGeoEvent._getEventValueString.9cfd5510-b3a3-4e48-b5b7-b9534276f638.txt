// ------------------------------------------------------------------------
private String _getEventValueString(String key, Object val) {
    if (key == null) {
        return null;
    } else if (key.startsWith(FLD_statusCode)) {
        if (val instanceof Number) {
            StringBuffer sb = new StringBuffer();
            int n = ((Number) val).intValue();
            String code = StringTools.toHexString(n, 16);
            sb.append("[0x").append(code).append("] ");
            sb.append(StatusCodes.GetCodeDescription(n));
            return sb.toString();
        }
    } else if (key.startsWith(FLD_timestamp)) {
        if (val instanceof Number) {
            StringBuffer sb = new StringBuffer();
            long n = ((Number) val).longValue();
            sb.append("[").append(n).append("] ");
            sb.append((new DateTime(n)).toString());
            return sb.toString();
        }
    } else if (key.startsWith(FLD_speedKPH)) {
        if (val instanceof Number) {
            StringBuffer sb = new StringBuffer();
            double n = ((Number) val).doubleValue();
            sb.append("[");
            sb.append(StringTools.format(n, "#0.0"));
            sb.append(" kph] ");
            sb.append(StringTools.format(n * GeoPoint.MILES_PER_KILOMETER, "#0.0"));
            sb.append(" mph");
            return sb.toString();
        }
    } else if (key.startsWith(FLD_altitude)) {
        if (val instanceof Number) {
            StringBuffer sb = new StringBuffer();
            double n = ((Number) val).doubleValue();
            sb.append("[");
            sb.append(StringTools.format(n, "#0.0"));
            sb.append(" meters] ");
            sb.append(StringTools.format(n * GeoPoint.FEET_PER_METER, "#0.0"));
            sb.append(" feet");
            return sb.toString();
        }
    } else if (key.startsWith(FLD_distanceKM) || key.startsWith(FLD_odometerKM) || key.startsWith(FLD_obcDistanceKM)) {
        if (val instanceof Number) {
            StringBuffer sb = new StringBuffer();
            double n = ((Number) val).doubleValue();
            sb.append("[");
            sb.append(StringTools.format(n, "#0.0"));
            sb.append(" km] ");
            sb.append(StringTools.format(n * GeoPoint.MILES_PER_KILOMETER, "#0.0"));
            sb.append(" miles");
            return sb.toString();
        }
    } else if (key.startsWith(FLD_sensor32LO) || key.startsWith(FLD_sensor32HI)) {
        if (val instanceof Number) {
            StringBuffer sb = new StringBuffer();
            long n = ((Number) val).longValue();
            sb.append("[0x").append(StringTools.toHexString(n, 32)).append("] ");
            sb.append(n);
            return sb.toString();
        }
    } else if (key.startsWith(FLD_tempLO) || key.startsWith(FLD_tempHI) || key.startsWith(FLD_tempAV)) {
        if (val instanceof Number) {
            StringBuffer sb = new StringBuffer();
            double n = ((Number) val).doubleValue();
            sb.append("[");
            sb.append(StringTools.format(n, "#0.0"));
            sb.append(" C] ");
            sb.append(StringTools.format((n * (9.0 / 5.0)) + 32.0, "#0.0"));
            sb.append(" F");
            return sb.toString();
        }
    } else if (key.startsWith(FLD_obcFuelTotal) || key.startsWith(FLD_obcFuelIdle)) {
        StringBuffer sb = new StringBuffer();
        double liters = ((Number) val).doubleValue();
        sb.append("[");
        sb.append(StringTools.format(liters, "#0.0"));
        sb.append(" liters] ");
        sb.append(StringTools.format(liters * GALLONS_PER_LITER, "#0.0"));
        sb.append(" gallons");
        return sb.toString();
    } else if (key.startsWith(FLD_obcJ1708Fault)) {
        // 25: 8 - Fault (FMI)
        if (val instanceof Number) {
            // [0x80016201] MID=128 PID=354[92] FMI=1
            StringBuffer sb = new StringBuffer();
            long n = ((Number) val).longValue();
            int mid = (int) ((n >> 24) & 0xFF);
            int pidSid = (int) ((n >> 8) & 0xFFFF);
            int fmi = (int) ((n >> 0) & 0xFF);
            sb.append("[0x").append(StringTools.toHexString(n, 32)).append("] ");
            if (n != 0L) {
                sb.append("MID=").append(mid).append(" ");
                if ((pidSid & 0x8000) != 0) {
                    sb.append("SID=").append(pidSid & 0x0FFF);
                    sb.append(" ");
                } else {
                    sb.append("PID=").append(pidSid & 0x0FFF);
                    sb.append("[").append(pidSid & 0x00FF).append("]");
                    sb.append(" ");
                }
                sb.append("FMI=").append(fmi);
            }
            return sb.toString();
        }
    }
    return null;
}
