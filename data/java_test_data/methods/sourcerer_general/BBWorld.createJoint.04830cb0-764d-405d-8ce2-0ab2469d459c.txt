// / create a joint to finalrain bodies together. No reference to the definition
// / is retained. This may cause the connected bodies to cease colliding.
public synchronized BBJoint createJoint(final BBJointDef def) {
    assert (!IsLocked());
    if (IsLocked()) {
        return null;
    }
    BBJoint j = BBJoint.create(def);
    // Connect to the world list.
    j.m_prev = null;
    j.m_next = m_jointList;
    if (m_jointList != null) {
        m_jointList.m_prev = j;
    }
    m_jointList = j;
    ++m_jointCount;
    // Connect to the bodies' doubly linked lists.
    j.m_edgeA.joint = j;
    j.m_edgeA.other = j.m_bodyB;
    j.m_edgeA.prev = null;
    j.m_edgeA.next = j.m_bodyA.m_jointList;
    if (j.m_bodyA.m_jointList != null)
        j.m_bodyA.m_jointList.prev = j.m_edgeA;
    j.m_bodyA.m_jointList = j.m_edgeA;
    j.m_edgeB.joint = j;
    j.m_edgeB.other = j.m_bodyA;
    j.m_edgeB.prev = null;
    j.m_edgeB.next = j.m_bodyB.m_jointList;
    if (j.m_bodyB.m_jointList != null)
        j.m_bodyB.m_jointList.prev = j.m_edgeB;
    j.m_bodyB.m_jointList = j.m_edgeB;
    BBBody bodyA = def.body1;
    BBBody bodyB = def.body2;
    boolean staticA = bodyA.isStatic();
    boolean staticB = bodyB.isStatic();
    // If the joint prevents collisions, then flag any contacts for filtering.
    if (!def.collideConnected & (!staticA || !staticB)) {
        // than a static body). Ideally we will have a contact count on both bodies.
        if (staticB) {
            swap(bodyA, bodyB);
        }
        BBContactEdge edge = bodyB.getContactList();
        while (edge != null) {
            if (edge.other == bodyA) {
                // Flag the contact for filtering at the next time step (where either
                // body is awake).
                edge.contact.FlagForFiltering();
            }
            edge = edge.next;
        }
    }
    return j;
}
