private void setup(int beakRelX, int beakRelY, String html, int htmlWidth, int htmlHeight, Direction direction, boolean bottomRelative) {
    if (direction == null) {
        direction = getBeakDirection(beakRelX, beakRelY, htmlWidth, htmlHeight);
    }
    int totalBubbleWidth = getBubbleSize(htmlWidth);
    int totalBubbleHeight = getBubbleSize(htmlHeight);
    if (direction == Direction.LEFT || direction == Direction.RIGHT) {
        totalBubbleWidth += BEAK_LENGTH;
    } else if (direction == Direction.TOP || direction == Direction.BOTTOM) {
        totalBubbleHeight += BEAK_LENGTH;
    }
    int scrrenWidth = TerrainView.getInstance().getViewWidth();
    int scrrenHeight = TerrainView.getInstance().getViewHeight();
    int beakOffset;
    int left;
    int top;
    switch(direction) {
        case BOTTOM:
            left = getBubbleLeft(beakRelX, scrrenWidth, totalBubbleWidth);
            top = beakRelY - totalBubbleHeight;
            beakOffset = beakRelX - left;
            break;
        case LEFT:
            left = beakRelX;
            top = getBubbleTop(beakRelY, scrrenHeight, totalBubbleHeight);
            beakOffset = beakRelY - top;
            break;
        case RIGHT:
            left = beakRelX - totalBubbleWidth;
            top = getBubbleTop(beakRelY, scrrenHeight, totalBubbleHeight);
            beakOffset = beakRelY - top;
            break;
        case TOP:
            left = getBubbleLeft(beakRelX, scrrenWidth, totalBubbleWidth);
            top = beakRelY;
            beakOffset = beakRelX - left;
            break;
        default:
            throw new IllegalArgumentException(this + " unsupported direction: " + direction);
    }
    setPixelSize(totalBubbleWidth, totalBubbleHeight);
    getElement().getStyle().setZIndex(Constants.Z_INDEX_SPEECH_BUBBLE);
    MapWindow.getAbsolutePanel().add(this, left, top);
    if (scrollWithTerrain) {
        MapWindow.getInstance().addToScrollElements(this);
    }
    // HTML content
    VerticalPanel verticalPanel = new VerticalPanel();
    HTML htmlContent = new HTML(html);
    verticalPanel.add(htmlContent);
    verticalPanel.getElement().getStyle().setZIndex(2);
    verticalPanel.setPixelSize(htmlWidth, htmlHeight);
    switch(direction) {
        case BOTTOM:
            add(verticalPanel, HTML_OFFSET, HTML_OFFSET);
            break;
        case LEFT:
            add(verticalPanel, HTML_OFFSET + BEAK_LENGTH, HTML_OFFSET);
            break;
        case RIGHT:
            add(verticalPanel, HTML_OFFSET, HTML_OFFSET);
            break;
        case TOP:
            add(verticalPanel, HTML_OFFSET, HTML_OFFSET + BEAK_LENGTH);
            break;
    }
    buildBubble(LINE_SIZE, LINE_SIZE, totalBubbleWidth - LINE_SIZE, totalBubbleHeight - LINE_SIZE, beakOffset, direction);
    if (bottomRelative) {
        int bottom = Document.get().getScrollHeight() - top - totalBubbleHeight;
        getElement().getStyle().setProperty("top", "");
        getElement().getStyle().setProperty("bottom", bottom + "px");
    }
}
