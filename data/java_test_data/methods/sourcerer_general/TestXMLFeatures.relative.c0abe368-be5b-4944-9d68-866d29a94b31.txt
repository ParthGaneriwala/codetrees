private void relative(String relativeParam, String base, Collection regexesPresent, Collection regexesAbsent) throws IOException {
    Model m = createMemModel();
    m.read("file:testing/abbreviated/relative-uris.rdf");
    ByteArrayOutputStream bos = new ByteArrayOutputStream();
    RDFWriter writer = m.getWriter(lang);
    writer.setProperty("relativeURIs", relativeParam);
    writer.write(m, bos, base);
    bos.close();
    String contents = bos.toString("UTF8");
    try {
        Model m2 = createMemModel();
        m2.read(new StringReader(contents), base);
        assertTrue(m.isIsomorphicWith(m2));
        Iterator it = regexesPresent.iterator();
        while (it.hasNext()) {
            String regexPresent = (String) it.next();
            assertTrue("Looking for /" + regexPresent + "/", Pattern.compile(Util.substituteStandardEntities(regexPresent), Pattern.DOTALL).matcher(contents).find());
        }
        it = regexesAbsent.iterator();
        while (it.hasNext()) {
            String regexAbsent = (String) it.next();
            assertTrue("Looking for (not) /" + regexAbsent + "/", !Pattern.compile("[\"']" + Util.substituteStandardEntities(regexAbsent) + "[\"']", Pattern.DOTALL).matcher(contents).find());
        }
        contents = null;
    } finally {
        if (contents != null) {
            System.err.println("===================");
            System.err.println("Offending content - " + toString());
            System.err.println("===================");
            System.err.println(contents);
            System.err.println("===================");
        }
    }
}
