public void buildList(Connection db) throws SQLException {
    // All the items are in order by position
    PreparedStatement pst = db.prepareStatement("SELECT * " + "FROM project_requirements_map " + "WHERE project_id = ? " + "AND requirement_id = ? " + "ORDER BY position ");
    pst.setInt(1, projectId);
    pst.setInt(2, requirementId);
    ResultSet rs = pst.executeQuery();
    RequirementMapItem previousItem = null;
    HashMap indents = new HashMap();
    while (rs.next()) {
        RequirementMapItem thisItem = new RequirementMapItem(rs);
        this.add(thisItem);
        // Find the parent
        if (previousItem != null) {
            if (thisItem.getIndent() == 0) {
                // Top level
                ((RequirementMapItem) indents.get(new Integer(thisItem.getIndent()))).setFinalNode(false);
            } else {
                if (previousItem.getIndent() < thisItem.getIndent()) {
                    // The parent was the previous item
                    thisItem.setParent(previousItem);
                    previousItem.getChildren().add(thisItem);
                } else if (previousItem.getIndent() >= thisItem.getIndent()) {
                    // The parent is somewhere back...
                    thisItem.setParent((RequirementMapItem) indents.get(new Integer(thisItem.getIndent() - 1)));
                    ((RequirementMapItem) indents.get(new Integer(thisItem.getIndent() - 1))).getChildren().add(thisItem);
                    ((RequirementMapItem) indents.get(new Integer(thisItem.getIndent()))).setFinalNode(false);
                }
            }
        }
        RequirementMapItem previousIndent = (RequirementMapItem) indents.get(new Integer(thisItem.getIndent()));
        if (previousIndent != null) {
            thisItem.setPreviousSameIndent(previousIndent);
            previousIndent.setNextSameIndent(thisItem);
        }
        indents.put(new Integer(thisItem.getIndent()), thisItem);
        previousItem = thisItem;
    }
    rs.close();
    pst.close();
}
