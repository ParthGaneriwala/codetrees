@SuppressWarnings("nls")
private OperatorInfoList genTablePlan(String alias, QB qb) throws SemanticException {
    Table tab = qb.getMetaData().getSrcForAlias(alias);
    RowResolver rwsch = new RowResolver();
    try {
        StructObjectInspector rowObjectInspector = (StructObjectInspector) tab.getDeserializer().getObjectInspector();
        List<? extends StructField> fields = rowObjectInspector.getAllStructFieldRefs();
        for (int i = 0; i < fields.size(); i++) {
            rwsch.put(alias, fields.get(i).getFieldName(), new ColumnInfo(fields.get(i).getFieldName(), TypeInfoUtils.getTypeInfoFromObjectInspector(fields.get(i).getFieldObjectInspector()), false));
        }
    } catch (SerDeException e) {
        throw new RuntimeException(e);
    }
    // Finally add the partitioning columns
    for (FieldSchema part_col : tab.getPartCols()) {
        LOG.trace("Adding partition col: " + part_col);
        // TODO: use the right type by calling part_col.getType() instead of String.class
        rwsch.put(alias, part_col.getName(), new ColumnInfo(part_col.getName(), String.class, true));
    }
    // Create the root of the operator tree
    Operator<? extends Serializable> top = OperatorFactory.get(forwardDesc.class, new RowSchema(rwsch.getColumnInfos()));
    String alias_id = (qb.getId() == null ? alias : qb.getId() + ":" + alias);
    // Add this to the list of top operators - we always start from a table scan
    this.topOps.put(alias_id, top);
    // check if this table is sampled and needs more than input pruning
    Operator<? extends Serializable> tableOp = top;
    TableSample ts = qb.getParseInfo().getTabSample(alias);
    if (ts != null) {
        int num = ts.getNumerator();
        int den = ts.getDenominator();
        ArrayList<String> sampleCols = ts.getCols();
        List<FieldSchema> tabCols = tab.getCols();
        // check if sampleCols are present in the table
        for (String col : sampleCols) {
            boolean found = false;
            for (FieldSchema s : tabCols) {
                if (col.equalsIgnoreCase(s.getName())) {
                    found = true;
                }
            }
            if (!found) {
                throw new SemanticException(ErrorMsg.SAMPLE_COLUMN_NOT_FOUND.getMsg(qb.getParseInfo().getSrcForAlias(alias), "Sampling column " + col + " not found in table " + tab.getName()));
            }
        }
        List<String> tabBucketCols = tab.getBucketCols();
        int numBuckets = tab.getNumBuckets();
        // check if a predicate is needed
        // predicate is needed if either input pruning is not enough
        // or if input pruning is not possible
        // check if the sample columns are the same as the table bucket columns
        // and if they are, create a new array of column names which is in the
        // same order as tabBucketCols
        boolean colsEqual = true;
        if (sampleCols.size() != tabBucketCols.size()) {
            colsEqual = false;
        }
        for (int i = 0; i < sampleCols.size() && colsEqual; i++) {
            boolean colFound = false;
            for (int j = 0; j < tabBucketCols.size() && !colFound; j++) {
                if (sampleCols.get(i).equalsIgnoreCase(tabBucketCols.get(j))) {
                    colFound = true;
                }
            }
            colsEqual = colFound;
        }
        // as tabBucketCols
        if (colsEqual) {
            ts.setCols(new ArrayList<String>(tabBucketCols));
        }
        // check if input pruning is enough
        if ((sampleCols == null || sampleCols.size() == 0 || colsEqual) && (num == den || den <= numBuckets && numBuckets % den == 0)) {
            // input pruning is enough; no need for filter
            LOG.info("No need for sample filter");
        } else {
            // need to add filter
            // create tableOp to be filterDesc and set as child to 'top'
            LOG.info("Need sample filter");
            exprNodeDesc samplePredicate = genSamplePredicate(ts);
            tableOp = OperatorFactory.getAndMakeChild(new filterDesc(samplePredicate), top);
        }
    }
    OperatorInfoList output = new OperatorInfoList();
    output.add(new OperatorInfo(tableOp, rwsch));
    LOG.debug("Created Table Plan for " + alias + " " + tableOp.toString());
    return output;
}
