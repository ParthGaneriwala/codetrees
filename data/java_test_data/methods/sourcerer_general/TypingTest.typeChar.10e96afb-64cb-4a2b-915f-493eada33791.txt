public boolean typeChar(Character c) {
    boolean typedCorrectly = true;
    if (timeStarted == null) {
        timeStarted = new Date();
    }
    if (timeFinished != null) {
        return false;
    }
    int last = writtenLines.size() - 1;
    if (c == ' ' && CoolKey.getUser().getConfig().getLineBreakers().indexOf(c) != -1 && writtenLines.get(last).length() >= textLines.get(last).length()) {
        return breakLine(' ');
    }
    char correctChar;
    char incorrectChar;
    if (writtenLines.get(last).length() < textLines.get(last).length() && textLines.get(last).charAt(writtenLines.get(last).length()) == c) {
        correctChar = c;
        incorrectChar = ' ';
    } else {
        correctChar = ' ';
        if (c != ' ') {
            incorrectChar = c;
        } else {
            incorrectChar = '_';
        }
        typedCorrectly = false;
    }
    if (CoolKey.getUser().getConfig().isContinueAtMistakes()) {
        writtenLines.set(last, writtenLines.get(last) + correctChar);
        mistakes.set(last, mistakes.get(last) + incorrectChar);
        if (writtenLines.get(last).length() > mistakesShadow.get(last).length()) {
            mistakesShadow.get(last).append(incorrectChar);
        } else if (writtenLines.get(last).length() > textLines.get(last).length() || textLines.get(last).charAt(writtenLines.get(last).length() - 1) != c) {
            int cIndex = writtenLines.get(last).length() - 1;
            mistakesShadow.get(last).replace(cIndex, cIndex + 1, c + "");
        }
        isBlockedAtMistake = false;
    } else {
        if (typedCorrectly) {
            writtenLines.set(last, writtenLines.get(last) + correctChar);
            mistakes.set(last, mistakes.get(last) + incorrectChar);
            isBlockedAtMistake = false;
        } else {
            isBlockedAtMistake = true;
        }
        if (writtenLines.get(last).length() > mistakesShadow.get(last).length()) {
            mistakesShadow.get(last).append(incorrectChar);
        } else if (!typedCorrectly) {
            int cIndex = writtenLines.get(last).length();
            mistakesShadow.get(last).replace(cIndex, cIndex + 1, incorrectChar + "");
        }
    }
    addCharToStatistics(c, typedCorrectly);
    return typedCorrectly;
}
