// =======================================================================
// Generalized validation machinery. Assumes rule set has special validation
// rules that can be turned on.
public ValidityReport validate() {
    checkOpen();
    StandardValidityReport report = new StandardValidityReport();
    // Switch on validation
    Triple validateOn = new Triple(Node.createAnon(), ReasonerVocabulary.RB_VALIDATION.asNode(), Functor.makeFunctorNode("on", new Node[] {}));
    // add(validateOn);
    if (!isPrepared) {
        prepare();
    }
    engine.add(validateOn);
    // Look for all reports
    TriplePattern pattern = new TriplePattern(null, ReasonerVocabulary.RB_VALIDATION_REPORT.asNode(), null);
    for (Iterator i = findFull(pattern); i.hasNext(); ) {
        Triple t = (Triple) i.next();
        Node rNode = t.getObject();
        boolean foundReport = false;
        if (rNode.isLiteral()) {
            Object rVal = rNode.getLiteralValue();
            if (rVal instanceof Functor) {
                Functor rFunc = (Functor) rVal;
                foundReport = true;
                StringBuffer description = new StringBuffer();
                String nature = rFunc.getName();
                String type = rFunc.getArgs()[0].toString();
                String text = rFunc.getArgs()[1].toString();
                description.append(text + "\n");
                description.append("Culprit = " + PrintUtil.print(t.getSubject()) + "\n");
                for (int j = 2; j < rFunc.getArgLength(); j++) {
                    description.append("Implicated node: " + PrintUtil.print(rFunc.getArgs()[j]) + "\n");
                }
                Node culpritN = t.getSubject();
                RDFNode culprit = null;
                if (culpritN.isURI()) {
                    culprit = ResourceFactory.createResource(culpritN.getURI());
                }
                report.add(nature.equalsIgnoreCase("error"), type, description.toString(), culprit);
            }
        }
    }
    // // end
    return report;
}
