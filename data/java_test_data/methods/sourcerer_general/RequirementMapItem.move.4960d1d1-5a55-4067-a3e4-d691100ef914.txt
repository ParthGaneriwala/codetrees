private void move(Connection db, int direction, boolean isRoot, RequirementMapList mapList) throws SQLException {
    if (position == -1) {
        buildRecord(db);
    }
    int moveCount = 0;
    // Load the current map once to work on child operations
    if (mapList == null) {
        mapList = new RequirementMapList();
        mapList.setProjectId(projectId);
        mapList.setRequirementId(requirementId);
        mapList.buildList(db);
    }
    RequirementMapItem thisItem = mapList.getItem(position);
    // Move the item right if NOT 1st in node
    if (direction == RIGHT && thisItem.getPosition() > 1) {
        // Ask parent to make sure this position is not the first child
        if ((thisItem.getParent() != null && thisItem.getParent().getChildren().indexOf(thisItem) > 0) || (thisItem.getParent() == null && thisItem.getPosition() > 1) || (!isRoot)) {
            // Good, now move it right and its children
            PreparedStatement pst = db.prepareStatement("UPDATE project_requirements_map " + "SET indent = indent + 1 " + "WHERE project_id = ? AND requirement_id = ? AND position = ? ");
            int i = 0;
            pst.setInt(++i, projectId);
            pst.setInt(++i, requirementId);
            pst.setInt(++i, thisItem.getPosition());
            moveCount = pst.executeUpdate();
            pst.close();
        }
    }
    // Move the item left if it has a parent
    if (direction == LEFT && position > 1 && indent > 0 && thisItem.getParent() != null) {
        PreparedStatement pst = db.prepareStatement("UPDATE project_requirements_map " + "SET indent = indent - 1 " + "WHERE project_id = ? AND requirement_id = ? AND position = ? " + "AND indent > 0 ");
        int i = 0;
        pst.setInt(++i, projectId);
        pst.setInt(++i, requirementId);
        pst.setInt(++i, thisItem.getPosition());
        moveCount = pst.executeUpdate();
        pst.close();
    }
    // Now move the children
    if (moveCount == 1) {
        Iterator i = thisItem.getChildren().iterator();
        while (i.hasNext()) {
            RequirementMapItem child = (RequirementMapItem) i.next();
            child.move(db, direction, false, mapList);
        }
    }
}
