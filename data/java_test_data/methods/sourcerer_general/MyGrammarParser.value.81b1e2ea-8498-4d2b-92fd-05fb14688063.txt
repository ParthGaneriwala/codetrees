// $ANTLR start "value"
public final MyGrammarParser.value_return value() throws RecognitionException {
    MyGrammarParser.value_return retval = new MyGrammarParser.value_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token STRING186 = null;
    Token TRUE187 = null;
    Token FALSE188 = null;
    MyGrammarParser.value_number_return value_number185 = null;
    CommonTree STRING186_tree = null;
    CommonTree TRUE187_tree = null;
    CommonTree FALSE188_tree = null;
    RewriteRuleTokenStream stream_FALSE = new RewriteRuleTokenStream(adaptor, "token FALSE");
    RewriteRuleTokenStream stream_TRUE = new RewriteRuleTokenStream(adaptor, "token TRUE");
    RewriteRuleTokenStream stream_STRING = new RewriteRuleTokenStream(adaptor, "token STRING");
    RewriteRuleSubtreeStream stream_value_number = new RewriteRuleSubtreeStream(adaptor, "rule value_number");
    try {
        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:283:9: ( ( value_number -> ^( VALUE value_number ) | STRING -> ^( VALUE STRING ) | TRUE -> ^( VALUE TRUE ) | FALSE -> ^( VALUE FALSE ) ) )
        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:283:11: ( value_number -> ^( VALUE value_number ) | STRING -> ^( VALUE STRING ) | TRUE -> ^( VALUE TRUE ) | FALSE -> ^( VALUE FALSE ) )
        {
            // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:283:11: ( value_number -> ^( VALUE value_number ) | STRING -> ^( VALUE STRING ) | TRUE -> ^( VALUE TRUE ) | FALSE -> ^( VALUE FALSE ) )
            int alt35 = 4;
            switch(input.LA(1)) {
                case IDENTIFIER:
                case NUMBER:
                    {
                        alt35 = 1;
                    }
                    break;
                case STRING:
                    {
                        alt35 = 2;
                    }
                    break;
                case TRUE:
                    {
                        alt35 = 3;
                    }
                    break;
                case FALSE:
                    {
                        alt35 = 4;
                    }
                    break;
                default:
                    NoViableAltException nvae = new NoViableAltException("", 35, 0, input);
                    throw nvae;
            }
            switch(alt35) {
                case 1:
                    // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:283:12: value_number
                    {
                        pushFollow(FOLLOW_value_number_in_value2464);
                        value_number185 = value_number();
                        state._fsp--;
                        stream_value_number.add(value_number185.getTree());
                        // AST REWRITE
                        // elements: value_number
                        // token labels:
                        // rule labels: retval
                        // token list labels:
                        // rule list labels:
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", retval != null ? retval.tree : null);
                        root_0 = (CommonTree) adaptor.nil();
                        // 283:25: -> ^( VALUE value_number )
                        {
                            // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:283:28: ^( VALUE value_number )
                            {
                                CommonTree root_1 = (CommonTree) adaptor.nil();
                                root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(VALUE, "VALUE"), root_1);
                                adaptor.addChild(root_1, stream_value_number.nextTree());
                                adaptor.addChild(root_0, root_1);
                            }
                        }
                        retval.tree = root_0;
                    }
                    break;
                case 2:
                    // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:284:6: STRING
                    {
                        STRING186 = (Token) match(input, STRING, FOLLOW_STRING_in_value2479);
                        stream_STRING.add(STRING186);
                        // AST REWRITE
                        // elements: STRING
                        // token labels:
                        // rule labels: retval
                        // token list labels:
                        // rule list labels:
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", retval != null ? retval.tree : null);
                        root_0 = (CommonTree) adaptor.nil();
                        // 284:13: -> ^( VALUE STRING )
                        {
                            // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:284:16: ^( VALUE STRING )
                            {
                                CommonTree root_1 = (CommonTree) adaptor.nil();
                                root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(VALUE, "VALUE"), root_1);
                                adaptor.addChild(root_1, stream_STRING.nextNode());
                                adaptor.addChild(root_0, root_1);
                            }
                        }
                        retval.tree = root_0;
                    }
                    break;
                case 3:
                    // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:285:6: TRUE
                    {
                        TRUE187 = (Token) match(input, TRUE, FOLLOW_TRUE_in_value2496);
                        stream_TRUE.add(TRUE187);
                        // AST REWRITE
                        // elements: TRUE
                        // token labels:
                        // rule labels: retval
                        // token list labels:
                        // rule list labels:
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", retval != null ? retval.tree : null);
                        root_0 = (CommonTree) adaptor.nil();
                        // 285:11: -> ^( VALUE TRUE )
                        {
                            // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:285:14: ^( VALUE TRUE )
                            {
                                CommonTree root_1 = (CommonTree) adaptor.nil();
                                root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(VALUE, "VALUE"), root_1);
                                adaptor.addChild(root_1, stream_TRUE.nextNode());
                                adaptor.addChild(root_0, root_1);
                            }
                        }
                        retval.tree = root_0;
                    }
                    break;
                case 4:
                    // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:286:6: FALSE
                    {
                        FALSE188 = (Token) match(input, FALSE, FOLLOW_FALSE_in_value2511);
                        stream_FALSE.add(FALSE188);
                        // AST REWRITE
                        // elements: FALSE
                        // token labels:
                        // rule labels: retval
                        // token list labels:
                        // rule list labels:
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", retval != null ? retval.tree : null);
                        root_0 = (CommonTree) adaptor.nil();
                        // 286:12: -> ^( VALUE FALSE )
                        {
                            // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:286:15: ^( VALUE FALSE )
                            {
                                CommonTree root_1 = (CommonTree) adaptor.nil();
                                root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(VALUE, "VALUE"), root_1);
                                adaptor.addChild(root_1, stream_FALSE.nextNode());
                                adaptor.addChild(root_0, root_1);
                            }
                        }
                        retval.tree = root_0;
                    }
                    break;
            }
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
