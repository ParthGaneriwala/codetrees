public synchronized void getResult(InputStream is, OutputStream os, boolean useFileCache) throws IOException {
    if (is == null || os == null) {
        throw new IllegalArgumentException();
    }
    ZipInputStream zis = new ZipInputStream(is);
    ZipOutputStream zos = new ZipOutputStream(os);
    ZipEntry ze = null;
    File cache = null;
    ByteArrayOutputStream bos = null;
    if (useFileCache) {
        cache = File.createTempFile("zfrg_cache_", null, new File("."));
        cache.deleteOnExit();
    } else {
        bos = new ByteArrayOutputStream();
    }
    int len = 0;
    byte[] buff = new byte[1024];
    while ((ze = zis.getNextEntry()) != null) {
        InputStream tofilter = null;
        if (useFileCache) {
            FileOutputStream fos = new FileOutputStream(cache);
            while ((len = zis.read(buff)) > 0) {
                fos.write(buff, 0, len);
            }
            fos.close();
            tofilter = new FileInputStream(cache);
        } else {
            bos.reset();
            while ((len = zis.read(buff)) > 0) {
                bos.write(buff, 0, len);
            }
            tofilter = new ByteArrayInputStream(bos.toByteArray());
        }
        zis.closeEntry();
        ZipEntry nze = new ZipEntry(ze.getName());
        nze.setSize(ze.getSize());
        for (int i = 0; i < filters.size(); i++) {
            ZipEntryFilter zef = (ZipEntryFilter) filters.get(i);
            tofilter = zef.doFilter(nze, tofilter);
        }
        zos.putNextEntry(nze);
        while ((len = tofilter.read(buff)) > 0) {
            zos.write(buff, 0, len);
        }
        zos.closeEntry();
        if (useFileCache) {
            tofilter.close();
        }
    }
    zis.close();
    zos.close();
    if (useFileCache) {
        cache.delete();
    }
}
