public static void main(String[] args) throws Exception {
    System.setProperty("tangosol.coherence.distributed.localstorage", "false");
    System.setProperty("tangosol.coherence.management", "all");
    // System.setProperty("tangosol.coherence.clusterport", "10001");
    CacheFactory.ensureCluster();
    MBeanServer server = getMBeanServer();
    System.out.println("mbean count: " + server.getMBeanCount());
    // Aggregate Coherence:type=Cache,service=DistributedCache,name=
    // getCacheName(),nodeId= storage enabled nodes,tier=back
    Map cacheSizeMap = new TreeMap();
    // Set cacheNamesSet = server.queryNames(new ObjectName(
    // "Coherence:type=Cache,service=DistributedCache,*"), null);
    Set cacheNamesSet = server.queryNames(new ObjectName("Coherence:type=Cache,*"), null);
    for (Object aCacheNamesSet : cacheNamesSet) {
        ObjectName cacheNameObjName = (ObjectName) aCacheNamesSet;
        String sCacheName = cacheNameObjName.getKeyProperty("name");
        cacheSizeMap.put(sCacheName, new Stats(sCacheName));
    }
    for (Object o : cacheSizeMap.keySet()) {
        String sCacheName = (String) o;
        // Set resultSet = server.queryNames(new ObjectName(
        // "Coherence:type=Cache,service=DistributedCache,name=" +
        // sCacheName + ",*"), null);
        Set resultSet = server.queryNames(new ObjectName("Coherence:type=Cache,name=" + sCacheName + ",*"), null);
        for (Object aResultSet : resultSet) {
            ObjectName objectName = (ObjectName) aResultSet;
            if (objectName.getKeyProperty("tier").equals("back")) {
                int nUnits = (Integer) server.getAttribute(objectName, "Units");
                int nSize = (Integer) server.getAttribute(objectName, "Size");
                Stats stats = (Stats) cacheSizeMap.get(sCacheName);
                stats.appendUnits(nUnits);
                stats.appendSize(nSize);
                cacheSizeMap.put(sCacheName, stats);
            }
        }
    }
    System.out.println("Cache Name\tSize\n");
    long nTotalUnits = 0;
    long nTotalSize = 0;
    for (Object o : cacheSizeMap.keySet()) {
        String sName = (String) o;
        Stats stats = (Stats) cacheSizeMap.get(sName);
        nTotalUnits += stats.getUnits();
        nTotalSize += stats.getSize();
        System.out.println(stats);
    }
    System.out.println("Grand total: " + DECIMAL_FORMAT.format(nTotalUnits / (1024.0 * 1024.0)) + " MB, " + "Number of entries: " + nTotalSize);
}
