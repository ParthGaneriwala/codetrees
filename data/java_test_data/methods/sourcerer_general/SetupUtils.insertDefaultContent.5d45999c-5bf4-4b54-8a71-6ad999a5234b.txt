public static void insertDefaultContent(Connection db, SyncTableList syncTableList, String fileLibraryPath, Project project) throws Exception {
    LOG.debug("insertDefaultContent");
    int SYSTEM_ID = 1;
    // From the Service action method
    PacketContext packetContext = new PacketContext();
    packetContext.setObjectMap(syncTableList.getObjectMapping(SYSTEM_ID));
    packetContext.setBaseFilePath(fileLibraryPath);
    // Retrieve and stream the records to restore
    LOG.debug("Loading the configuration xml...");
    InputStream inputStream = SetupUtils.class.getResourceAsStream("/content_en_US.xml");
    // Restore the state of the objects as-supplied, start by deleting the record and dependents
    ArrayList<String> meta = new ArrayList<String>();
    meta.add("mode=copy");
    ArrayList exclude = new ArrayList();
    HashMap<String, String> replace = new HashMap<String, String>();
    replace.put("enteredBy", String.valueOf(project.getEnteredBy()));
    replace.put("modifiedBy", String.valueOf(project.getEnteredBy()));
    replace.put("projectId", String.valueOf(project.getId()));
    replace.put("linkItemId", String.valueOf(project.getId()));
    replace.put("thumbnailFilename", "null");
    replace.put("logoId", "-1");
    HashMap options = new HashMap();
    options.put("exclude", exclude);
    options.put("replace", replace);
    // Use the APIConnection to do the shared work
    LOG.debug("Parsing the records...");
    APIConnection api = new APIConnection();
    api.setAutoCommit(false);
    api.setTransactionMeta(meta);
    APIRestore.restore(api, inputStream, null, -1, options);
    // Construct the xml
    LOG.debug("Generating XML...");
    XMLUtils xml = new XMLUtils(api.generateXMLPacket());
    // Restore this item
    TransactionUtils.processTransactions(db, xml, packetContext);
    LOG.debug("Finished.");
}
