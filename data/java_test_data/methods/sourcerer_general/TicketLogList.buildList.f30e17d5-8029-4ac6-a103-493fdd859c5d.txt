public void buildList(Connection db) throws SQLException {
    PreparedStatement pst = null;
    ResultSet rs = null;
    int items = -1;
    StringBuffer sqlSelect = new StringBuffer();
    StringBuffer sqlCount = new StringBuffer();
    StringBuffer sqlFilter = new StringBuffer();
    StringBuffer sqlOrder = new StringBuffer();
    // Need to build a base SQL statement for counting records
    sqlCount.append("SELECT COUNT(*) AS recordcount " + "FROM ticketlog t " + "WHERE t.id > 0 ");
    createFilter(sqlFilter);
    if (pagedListInfo != null) {
        // Get the total number of records matching filter
        pst = db.prepareStatement(sqlCount.toString() + sqlFilter.toString());
        items = prepareFilter(pst);
        rs = pst.executeQuery();
        if (rs.next()) {
            int maxRecords = rs.getInt("recordcount");
            pagedListInfo.setMaxRecords(maxRecords);
        }
        rs.close();
        pst.close();
        // Determine the offset, based on the filter, for the first record to show
        if (!pagedListInfo.getCurrentLetter().equals("")) {
            pst = db.prepareStatement(sqlCount.toString() + sqlFilter.toString() + "AND t.comment < ? ");
            items = prepareFilter(pst);
            pst.setString(++items, pagedListInfo.getCurrentLetter().toLowerCase());
            rs = pst.executeQuery();
            if (rs.next()) {
                int offsetCount = rs.getInt("recordcount");
                pagedListInfo.setCurrentOffset(offsetCount);
            }
            rs.close();
            pst.close();
        }
        // Determine column to sort by
        pagedListInfo.setDefaultSort("t.entered", null);
        // NOTE: Do not change the order due to the system message method
        pagedListInfo.appendSqlTail(db, sqlOrder);
    } else {
        // NOTE: Do not change the order due to the system message method
        sqlOrder.append("ORDER BY t.entered ");
    }
    // Need to build a base SQL statement for returning records
    if (pagedListInfo != null) {
        pagedListInfo.appendSqlSelectHead(db, sqlSelect);
    } else {
        sqlSelect.append("SELECT ");
    }
    sqlSelect.append("t.*, " + "tp.description AS priorityname, ts.description AS severityname, " + "ct_eb.last_name AS eb_namelast, ct_eb.first_name AS eb_namefirst, " + "ct_at.last_name AS at_namelast, ct_at.first_name AS at_namefirst " + "FROM ticketlog t " + "LEFT JOIN ticket_category tc ON (t.cat_code = tc.id) " + "LEFT JOIN users ct_eb ON (t.enteredby = ct_eb.user_id) " + "LEFT JOIN users ct_at ON (t.assigned_to = ct_at.user_id) " + "LEFT JOIN ticket_priority tp ON (t.pri_code = tp.code) " + "LEFT JOIN ticket_severity ts ON (t.scode = ts.code) " + "WHERE t.id > 0 ");
    pst = db.prepareStatement(sqlSelect.toString() + sqlFilter.toString() + sqlOrder.toString());
    items = prepareFilter(pst);
    rs = pst.executeQuery();
    if (pagedListInfo != null) {
        pagedListInfo.doManualOffset(db, rs);
    }
    TicketLog prevTicketLog = null;
    int count = 0;
    while (rs.next()) {
        if (pagedListInfo != null && pagedListInfo.getItemsPerPage() > 0 && DatabaseUtils.getType(db) == DatabaseUtils.MSSQL && count >= pagedListInfo.getItemsPerPage()) {
            break;
        }
        ++count;
        TicketLog thisTicketLog = new TicketLog(rs);
        if (doSystemMessages) {
            // Add the system generated messages
            this.setSystemMessages(thisTicketLog, prevTicketLog);
            if (thisTicketLog.getEntryText() != null && !thisTicketLog.getEntryText().equals("")) {
                // Add the comments
                this.add(thisTicketLog);
            }
        } else {
            // Just add the whole thing
            this.add(thisTicketLog);
        }
        prevTicketLog = thisTicketLog;
    }
    rs.close();
    pst.close();
}
