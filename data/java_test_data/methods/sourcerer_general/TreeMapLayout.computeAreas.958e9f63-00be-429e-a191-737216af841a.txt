protected void computeAreas(final NodeItem rootToComputeAreasFrom) {
    int leafCount = 0;
    // ensure area data column exists
    Graph graph = (Graph) m_vis.getGroup(m_group);
    TupleSet nodes = graph.getNodes();
    nodes.addColumns(AREA_SCHEMA);
    // reset all sizes to zero
    Iterator iter = new TreeNodeIterator(rootToComputeAreasFrom);
    while (iter.hasNext()) {
        NodeItem node = (NodeItem) iter.next();
        node.setDouble(AREA, 0);
    }
    // set raw sizes, compute leaf count
    iter = new TreeNodeIterator(rootToComputeAreasFrom);
    while (iter.hasNext()) {
        NodeItem node = (NodeItem) iter.next();
        if (node.getChildCount() == 0) {
            double nodeSize = node.getSize();
            node.setDouble(AREA, nodeSize);
            NodeItem parentNode = (NodeItem) node.getParent();
            while (parentNode != null) {
                parentNode.setDouble(AREA, nodeSize + parentNode.getDouble(AREA));
                parentNode = (NodeItem) parentNode.getParent();
            }
            ++leafCount;
        }
    }
    // scale sizes by display area factor
    Rectangle2D layoutBounds = getLayoutBounds();
    double area = (layoutBounds.getWidth() - 1) * (layoutBounds.getHeight() - 1);
    double scale = area / rootToComputeAreasFrom.getDouble(AREA);
    iter = new TreeNodeIterator(rootToComputeAreasFrom);
    while (iter.hasNext()) {
        NodeItem node = (NodeItem) iter.next();
        node.setDouble(AREA, node.getDouble(AREA) * scale);
    }
}
