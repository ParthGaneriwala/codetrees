void delete(PersistentStore store, NodeAVL x) {
    if (x == null) {
        return;
    }
    NodeAVL n;
    writeLock.lock();
    try {
        if (x.nLeft == null) {
            n = x.nRight;
        } else if (x.nRight == null) {
            n = x.nLeft;
        } else {
            NodeAVL d = x;
            x = x.nLeft;
            while (true) {
                NodeAVL temp = x.nRight;
                if (temp == null) {
                    break;
                }
                x = temp;
            }
            // x will be replaced with n later
            n = x.nLeft;
            // swap d and x
            int b = x.iBalance;
            x.iBalance = d.iBalance;
            d.iBalance = b;
            // set x.parent
            NodeAVL xp = x.nParent;
            NodeAVL dp = d.nParent;
            if (d.isRoot(store)) {
                store.setAccessor(this, x);
            }
            x.nParent = dp;
            if (dp != null) {
                if (dp.nRight == d) {
                    dp.nRight = x;
                } else {
                    dp.nLeft = x;
                }
            }
            // relink d.parent, x.left, x.right
            if (d == xp) {
                d.nParent = x;
                if (d.nLeft == x) {
                    x.nLeft = d;
                    NodeAVL dr = d.nRight;
                    x.nRight = dr;
                } else {
                    x.nRight = d;
                    NodeAVL dl = d.nLeft;
                    x.nLeft = dl;
                }
            } else {
                d.nParent = xp;
                xp.nRight = d;
                NodeAVL dl = d.nLeft;
                NodeAVL dr = d.nRight;
                x.nLeft = dl;
                x.nRight = dr;
            }
            x.nRight.nParent = x;
            x.nLeft.nParent = x;
            // set d.left, d.right
            d.nLeft = n;
            if (n != null) {
                n.nParent = d;
            }
            d.nRight = null;
            x = d;
        }
        boolean isleft = x.isFromLeft(store);
        x.replace(store, this, n);
        n = x.nParent;
        x.delete();
        while (n != null) {
            x = n;
            int sign = isleft ? 1 : -1;
            switch(x.iBalance * sign) {
                case -1:
                    x.iBalance = 0;
                    break;
                case 0:
                    x.iBalance = sign;
                    return;
                case 1:
                    NodeAVL r = x.child(store, !isleft);
                    int b = r.iBalance;
                    if (b * sign >= 0) {
                        x.replace(store, this, r);
                        NodeAVL child = r.child(store, isleft);
                        x.set(store, !isleft, child);
                        r.set(store, isleft, x);
                        if (b == 0) {
                            x.iBalance = sign;
                            r.iBalance = -sign;
                            return;
                        }
                        x.iBalance = 0;
                        r.iBalance = 0;
                        x = r;
                    } else {
                        NodeAVL l = r.child(store, isleft);
                        x.replace(store, this, l);
                        b = l.iBalance;
                        r.set(store, isleft, l.child(store, !isleft));
                        l.set(store, !isleft, r);
                        x.set(store, !isleft, l.child(store, isleft));
                        l.set(store, isleft, x);
                        x.iBalance = (b == sign) ? -sign : 0;
                        r.iBalance = (b == -sign) ? sign : 0;
                        l.iBalance = 0;
                        x = l;
                    }
            }
            isleft = x.isFromLeft(store);
            n = x.nParent;
        }
    } finally {
        writeLock.unlock();
    }
}
