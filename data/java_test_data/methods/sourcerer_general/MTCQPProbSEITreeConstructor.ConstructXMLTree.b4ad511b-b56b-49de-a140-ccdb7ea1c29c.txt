public String ConstructXMLTree(double[][] dDistanceMatrix) throws Exception {
    qNodes = new QNode[2 * dDistanceMatrix.length - 2];
    visited_node = new boolean[2 * dDistanceMatrix.length - 2];
    N = dDistanceMatrix.length;
    avg_contribution = new double[N];
    alEdges = new ArrayList();
    QNode[] best_nodes = null;
    QuartetTree qt = null;
    double best_score = Double.MAX_VALUE;
    populateQuartetLists(dDistanceMatrix);
    double avg_count = 0;
    /*
        avg_dist = 0;
        for(int i=0;i<dDistanceMatrix.length;i++)
        {
        	for(int j=i+1;j<dDistanceMatrix.length;j++)
            {
            	avg_count++;
            	avg_dist += dDistanceMatrix[i][j];
            }
        }
        avg_dist = avg_dist / avg_count;
        */
    Quartet.computeWorstAndBestCosts(dDistanceMatrix);
    int[] best_nodes_list = new int[dDistanceMatrix.length];
    int stop_steps = 0;
    int i = 0;
    int[] nodes_list = new int[dDistanceMatrix.length];
    boolean foundBetterScore = false;
    alIndexes = generateIndexes(dDistanceMatrix.length);
    int runs = 0;
    Date d = new Date();
    System.out.println("Started at: " + d.toString());
    St = 0;
    progressTrees = "";
    allTrees = "";
    while (runs < Math.abs(K)) {
        if (K < 0 && i > Math.abs(K))
            break;
        if (alIndexes.size() == 0) {
            alIndexes = generateIndexes(dDistanceMatrix.length);
            foundBetterScore = false;
            runs++;
        }
        oldEdge = null;
        step_count = 0;
        int count = 0;
        Quartet q;
        if (i == 0) {
            qt = new QuartetTree();
            labels = new int[dDistanceMatrix.length];
            nodes_list = generateRandomNodesList(dDistanceMatrix.length);
        } else {
            nodes_list = mutateNodesList(best_nodes_list);
        }
        q = new Quartet(nodes_list[0], nodes_list[1], nodes_list[2], nodes_list[3], dDistanceMatrix);
        double bs = -1;
        for (int j = 0; j < 4; j++) {
            if (bs < (dDistanceMatrix[nodes_list[j % 4]][(j + 1) % 4] + dDistanceMatrix[nodes_list[(j + 2) % 4]][(j + 3) % 4])) {
                bs = dDistanceMatrix[nodes_list[j % 4]][(j + 1) % 4] + dDistanceMatrix[nodes_list[(j + 2) % 4]][(j + 3) % 4];
                q.nodes[0] = nodes_list[j % 4];
                q.nodes[1] = nodes_list[(j + 1) % 4];
                q.nodes[2] = nodes_list[(j + 2) % 4];
                q.nodes[3] = nodes_list[(j + 3) % 4];
            }
        }
        labels[0] = q.nodes[0];
        labels[1] = q.nodes[1];
        labels[2] = q.nodes[2];
        labels[3] = q.nodes[3];
        initializeFromQuartet(qt, q);
        scoreHistory = new double[dDistanceMatrix.length][1000];
        edgeScoreHistory = new double[1000];
        for (int j = 4; j < nodes_list.length; j++) {
            labels[j] = nodes_list[j];
        }
        for (int j = 4; j < nodes_list.length; j++) {
            cur_node = nodes_list[j];
            addNodeInBestPlace(qt, nodes_list[j], dDistanceMatrix);
        }
        /*
        	last_tree_score = 0;
        	for(int k=4;k<N-1;k++)
    		{
        		last_tree_score += Math.pow(Math.abs(avg_contribution[k+1] - avg_contribution[k]),2);
    		}
        	last_tree_score = 1000 - last_tree_score;
        	*/
        String sTree = qt.toTreeFile();
        allTrees += sTree + "\n";
        if (last_tree_score < best_score) {
            stop_steps = 0;
            foundBetterScore = true;
            best_score = last_tree_score;
            best_nodes = this.cloneQuartetNodes(qNodes, qt);
            for (int j = 0; j < best_nodes_list.length; j++) {
                best_nodes_list[j] = nodes_list[j];
            }
            St = (Quartet.worst_cost.doubleValue() - last_tree_score) / (Quartet.worst_cost.doubleValue() - Quartet.best_cost.doubleValue());
            System.out.println((i + 1) + ".) new best score = " + St + "; count = " + count);
            progressTrees += qt.toTreeFile() + "\n";
        } else {
            stop_steps++;
        }
        if (i % 100 == 0) {
            System.out.println("remaining steps = " + alIndexes.size());
        }
        i++;
        last_tree_score = 0;
    }
    d = new Date();
    System.out.println("Finished at: " + d.toString());
    for (int k = 4; k < N; k++) {
        System.out.println(labels[k] + ": " + avg_contribution[k]);
    // System.out.println(avg_contribution[k]);
    }
    qNodes = best_nodes;
    qt.root = this.getRandomInternNode();
    qt.St = (Quartet.worst_cost.doubleValue() - best_score) / (Quartet.worst_cost.doubleValue() - Quartet.best_cost.doubleValue());
    System.out.println("part_q = " + part_q);
    System.out.println("non_part_q = " + non_part_q);
    System.out.println("avg_partK = " + (avg_partK / (double) count_partK));
    System.out.println("pq/nqp = " + (double) part_q / (double) non_part_q);
    System.out.println("operation_count = " + ((double) operation_count / (double) non_part_q));
    String sTree = qt.toTreeFile();
    File f = new File("test.tree");
    FileOutputStream fos = new FileOutputStream(f);
    fos.write(sTree.getBytes());
    fos.close();
    f = new File("best.score");
    fos = new FileOutputStream(f);
    fos.write(("" + St).getBytes());
    fos.close();
    return sTree;
}
