public void testAddRemoveWithButtons() throws ComponentNotFoundException, MultipleComponentsFoundException {
    // Initial state - empty ?
    MutableList<MeleeWeapon> equipmentList = getPerson().getMeleeWeapons();
    ListModel catalogModel = catalogItemsList.getModel();
    assertEquals(0, equipmentList.size());
    assertEquals(0, selectedItemsList.getModel().getSize());
    assertTrue(catalogModel.getSize() > 0);
    double weightAdded = 0;
    double costAdded = 0;
    // Add the items in
    for (int i = 0; i < NUMBER_OF_ITEMS; i++) {
        int idx = random.nextInt(catalogModel.getSize());
        Equipment selected = (Equipment) catalogModel.getElementAt(idx);
        listTester.actionSelectIndex(catalogItemsList, idx);
        weightAdded = weightAdded + (selected.getWeight());
        costAdded = costAdded + (selected.getCost());
        assertEnabled(addButton);
        buttonTester.actionClick(addButton);
        assertEquals(i + 1, equipmentList.size());
        assertEquals(weightAdded, getPerson().getCarriedWeight());
        assertEquals(costAdded, getPerson().getEquipmentCost());
    }
    // Remove the items in
    for (int i = 0; i < NUMBER_OF_ITEMS; i++) {
        int idx = random.nextInt(equipmentList.getSize());
        Equipment selected = equipmentList.get(idx);
        listTester.actionSelectIndex(selectedItemsList, idx);
        weightAdded = weightAdded - (selected.getWeight());
        costAdded = costAdded - (selected.getCost());
        assertEnabled(removeButton);
        buttonTester.actionClick(removeButton);
        assertEquals(NUMBER_OF_ITEMS - i - 1, equipmentList.size());
        assertEquals(Math.round(weightAdded), Math.round(getPerson().getCarriedWeight()));
        assertEquals(Math.round(costAdded), Math.round(getPerson().getEquipmentCost()));
    }
}
