public String runFlow(ChainFlow chainFlow, ChainContext chainContext) throws FlowException {
    try {
        List script = chainFlow.getScripts();
        String sqlstr = "";
        log.info("Start to run [" + chainFlow.getFlowCode() + "]");
        chainContext.addSimuList("<font color=#ff00ff><b>" + "Start to run [" + chainFlow.getFlowCode() + "]" + "</b></font>.");
        if ("Y".equals(chainFlow.getSkipYn())) {
            log.info("Flow [" + chainFlow.getFlowCode() + "]: skipFlag=true");
            chainContext.addSimuList("Flow [" + chainFlow.getFlowCode() + "]: skipFlag=true<br>=================");
            return "0";
        }
        if (script.size() < 1) {
            log.info("Flow [" + chainFlow.getFlowCode() + "]: there is no statement");
            chainContext.addSimuList("Flow [" + chainFlow.getFlowCode() + "]: there is no statement<br>=================");
            return "0";
        }
        Class cls = Class.forName(chainFlow.getAttr1());
        Class[] partypes = new Class[script.size()];
        Object[] arglist = new Object[script.size()];
        for (int i = 0; i < script.size(); i++) {
            partypes[i] = String.class;
            sqlstr = script.get(i).toString();
            Iterator iter = chainContext.getDataMapIterator();
            while (iter.hasNext()) {
                DataMapping dataMapping = (DataMapping) iter.next();
                sqlstr = StringUtils.replace(sqlstr, dataMapping.getFieldName(), dataMapping.getFieldMapping());
            }
            sqlstr = FormulaFactory.getInstance().run(sqlstr);
            arglist[i] = sqlstr;
        }
        Method meth = cls.getMethod(chainFlow.getAttr2(), partypes);
        Object methobj = cls.newInstance();
        Object retobj = meth.invoke(methobj, arglist);
        String sResult = "";
        if (retobj != null)
            sResult = retobj.toString();
        DataMapping dataMapping = new DataMapping();
        dataMapping.setFieldName(Constants.SEPARATOR_SYSTEM + Constants.VAR_INVOKE_RESULT + Constants.SEPARATOR_SYSTEM);
        dataMapping.setFieldValue(sResult);
        dataMapping.setFieldMapping(sResult);
        chainContext.addDataMap(dataMapping.getFieldName(), dataMapping);
        log.info("Invoke result: " + sResult);
        log.info("InvokeFlowImp::runFlow OK");
        chainContext.addSimuList("Invoke result: " + sResult);
        chainContext.addSimuList("InvokeFlowImp::runFlow OK<br>--------------------------------");
        return "0";
    } catch (Exception e) {
        log.error("InvokeFlowImp::runFlow" + e.getMessage());
        try {
            return Integer.toString(onError(chainFlow, chainContext, 98));
        } catch (Exception ex) {
            // TODO
            return "98";
        }
    }
}
