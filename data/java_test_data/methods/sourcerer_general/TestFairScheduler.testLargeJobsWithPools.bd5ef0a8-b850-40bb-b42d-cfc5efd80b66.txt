public void testLargeJobsWithPools() throws Exception {
    // Set up pools file
    PrintWriter out = new PrintWriter(new FileWriter(ALLOC_FILE));
    out.println("<?xml version=\"1.0\"?>");
    out.println("<allocations>");
    // Give pool A a minimum of 1 map, 2 reduces
    out.println("<pool name=\"poolA\">");
    out.println("<minMaps>1</minMaps>");
    out.println("<minReduces>2</minReduces>");
    out.println("</pool>");
    // Give pool B a minimum of 2 maps, 1 reduce
    out.println("<pool name=\"poolB\">");
    out.println("<minMaps>2</minMaps>");
    out.println("<minReduces>1</minReduces>");
    out.println("</pool>");
    out.println("</allocations>");
    out.close();
    scheduler.getPoolManager().reloadAllocs();
    JobInProgress job1 = submitJob(JobStatus.RUNNING, 10, 10);
    JobInfo info1 = scheduler.infos.get(job1);
    // Check scheduler variables
    assertEquals(0, info1.runningMaps);
    assertEquals(0, info1.runningReduces);
    assertEquals(10, info1.neededMaps);
    assertEquals(10, info1.neededReduces);
    assertEquals(0, info1.mapDeficit);
    assertEquals(0, info1.reduceDeficit);
    assertEquals(4.0, info1.mapFairShare);
    assertEquals(4.0, info1.reduceFairShare);
    // Advance time 200ms and submit jobs 2 and 3
    advanceTime(200);
    assertEquals(800, info1.mapDeficit);
    assertEquals(800, info1.reduceDeficit);
    JobInProgress job2 = submitJob(JobStatus.RUNNING, 10, 10, "poolA");
    JobInfo info2 = scheduler.infos.get(job2);
    JobInProgress job3 = submitJob(JobStatus.RUNNING, 10, 10, "poolB");
    JobInfo info3 = scheduler.infos.get(job3);
    // Check that minimum and fair shares have been allocated
    assertEquals(0, info1.minMaps);
    assertEquals(0, info1.minReduces);
    assertEquals(1.0, info1.mapFairShare);
    assertEquals(1.0, info1.reduceFairShare);
    assertEquals(1, info2.minMaps);
    assertEquals(2, info2.minReduces);
    assertEquals(1.0, info2.mapFairShare);
    assertEquals(2.0, info2.reduceFairShare);
    assertEquals(2, info3.minMaps);
    assertEquals(1, info3.minReduces);
    assertEquals(2.0, info3.mapFairShare);
    assertEquals(1.0, info3.reduceFairShare);
    // Advance time 100ms and check deficits
    advanceTime(100);
    assertEquals(900, info1.mapDeficit);
    assertEquals(900, info1.reduceDeficit);
    assertEquals(100, info2.mapDeficit);
    assertEquals(200, info2.reduceDeficit);
    assertEquals(200, info3.mapDeficit);
    assertEquals(100, info3.reduceDeficit);
    // Assign tasks and check that slots are first given to needy jobs
    checkAssignment("tt1", "attempt_test_0003_m_000001_0 on tt1");
    checkAssignment("tt1", "attempt_test_0003_m_000002_0 on tt1");
    checkAssignment("tt1", "attempt_test_0002_r_000003_0 on tt1");
    checkAssignment("tt1", "attempt_test_0002_r_000004_0 on tt1");
    checkAssignment("tt2", "attempt_test_0002_m_000005_0 on tt2");
    checkAssignment("tt2", "attempt_test_0001_m_000006_0 on tt2");
    checkAssignment("tt2", "attempt_test_0003_r_000007_0 on tt2");
    checkAssignment("tt2", "attempt_test_0001_r_000008_0 on tt2");
}
