@SuppressWarnings("unchecked")
public void mousePressed(MouseEvent e) {
    down = e.getPoint();
    VisualizationViewer<V, E> vv = (VisualizationViewer) e.getSource();
    GraphElementAccessor<V, E> pickSupport = vv.getPickSupport();
    PickedState<V> pickedVertexState = vv.getPickedVertexState();
    PickedState<E> pickedEdgeState = vv.getPickedEdgeState();
    if (pickSupport != null && pickedVertexState != null) {
        Layout<V, E> layout = vv.getGraphLayout();
        if (e.getModifiers() == modifiers) {
            rect.setFrameFromDiagonal(down, down);
            // p is the screen point for the mouse event
            Point2D ip = e.getPoint();
            vertex = pickSupport.getVertex(layout, ip.getX(), ip.getY());
            if (vertex != null) {
                if (pickedVertexState.isPicked(vertex) == false) {
                    pickedVertexState.clear();
                    pickedVertexState.pick(vertex, true);
                    if (vertex instanceof Node) {
                        Collection<Node> nodes = ((Node) vertex).getPartOfNodes(GraphManager.getInstance().getGraph());
                        if (nodes.isEmpty() == false) {
                            for (Node n : nodes) {
                                pickedVertexState.pick((V) n, true);
                            }
                        }
                    }
                }
                // layout.getLocation applies the layout transformer so
                // q is transformed by the layout transformer only
                Point2D q = layout.transform(vertex);
                // transform the mouse point to graph coordinate system
                Point2D gp = vv.getRenderContext().getMultiLayerTransformer().inverseTransform(Layer.LAYOUT, ip);
                offsetx = (float) (gp.getX() - q.getX());
                offsety = (float) (gp.getY() - q.getY());
            } else if ((edge = pickSupport.getEdge(layout, ip.getX(), ip.getY())) != null) {
                pickedEdgeState.clear();
                pickedEdgeState.pick(edge, true);
            } else {
                vv.addPostRenderPaintable(lensPaintable);
                pickedEdgeState.clear();
                pickedVertexState.clear();
            }
        } else if (e.getModifiers() == addToSelectionModifiers) {
            vv.addPostRenderPaintable(lensPaintable);
            rect.setFrameFromDiagonal(down, down);
            Point2D ip = e.getPoint();
            vertex = pickSupport.getVertex(layout, ip.getX(), ip.getY());
            if (vertex != null) {
                boolean wasThere = pickedVertexState.pick(vertex, !pickedVertexState.isPicked(vertex));
                if (wasThere) {
                    vertex = null;
                } else {
                    // layout.getLocation applies the layout transformer so
                    // q is transformed by the layout transformer only
                    Point2D q = layout.transform(vertex);
                    // translate mouse point to graph coord system
                    Point2D gp = vv.getRenderContext().getMultiLayerTransformer().inverseTransform(Layer.LAYOUT, ip);
                    offsetx = (float) (gp.getX() - q.getX());
                    offsety = (float) (gp.getY() - q.getY());
                }
            } else if ((edge = pickSupport.getEdge(layout, ip.getX(), ip.getY())) != null) {
                pickedEdgeState.pick(edge, !pickedEdgeState.isPicked(edge));
            }
        }
    }
    if (vertex != null)
        e.consume();
}
