public HashMap<String, String> parseSummary(String header) {
    HashMap<String, String> keyValues = new HashMap<String, String>();
    String[] headers = header.split("\n");
    int i = 0;
    Pattern p = Pattern.compile("top - (.*?) up (.*?),\\s+(\\d+) users");
    Matcher matcher = p.matcher(headers[0]);
    if (matcher.find()) {
        keyValues.put("uptime", matcher.group(2));
        keyValues.put("users", matcher.group(3));
    }
    p = Pattern.compile("Tasks:\\s+(\\d+) total,\\s+(\\d+) running,\\s+(\\d+) sleeping,\\s+(\\d+) stopped,\\s+(\\d+) zombie");
    matcher = p.matcher(headers[1]);
    if (matcher.find()) {
        keyValues.put("tasks_total", matcher.group(1));
        keyValues.put("tasks_running", matcher.group(2));
        keyValues.put("tasks_sleeping", matcher.group(3));
        keyValues.put("tasks_stopped", matcher.group(4));
        keyValues.put("tasks_zombie", matcher.group(5));
    }
    p = Pattern.compile("Cpu\\(s\\):\\s+(.*?)% us,\\s+(.*?)% sy,\\s+(.*?)% ni,\\s+(.*?)% id,\\s+(.*?)% wa,\\s+(.*?)% hi,\\s+(.*?)% si");
    matcher = p.matcher(headers[2]);
    if (matcher.find()) {
        keyValues.put("cpu_user%", matcher.group(1));
        keyValues.put("cpu_sys%", matcher.group(2));
        keyValues.put("cpu_nice%", matcher.group(3));
        keyValues.put("cpu_wait%", matcher.group(4));
        keyValues.put("cpu_hi%", matcher.group(5));
        keyValues.put("cpu_si%", matcher.group(6));
    }
    p = Pattern.compile("Mem:\\s+(.*?)k total,\\s+(.*?)k used,\\s+(.*?)k free,\\s+(.*?)k buffers");
    matcher = p.matcher(headers[3]);
    if (matcher.find()) {
        keyValues.put("mem_total", matcher.group(1));
        keyValues.put("mem_used", matcher.group(2));
        keyValues.put("mem_free", matcher.group(3));
        keyValues.put("mem_buffers", matcher.group(4));
    }
    p = Pattern.compile("Swap:\\s+(.*?)k total,\\s+(.*?)k used,\\s+(.*?)k free,\\s+(.*?)k cached");
    matcher = p.matcher(headers[4]);
    if (matcher.find()) {
        keyValues.put("swap_total", matcher.group(1));
        keyValues.put("swap_used", matcher.group(2));
        keyValues.put("swap_free", matcher.group(3));
        keyValues.put("swap_cached", matcher.group(4));
    }
    Iterator<String> ki = keyValues.keySet().iterator();
    while (ki.hasNext()) {
        String key = ki.next();
        log.info(key + ":" + keyValues.get(key));
    }
    return keyValues;
}
