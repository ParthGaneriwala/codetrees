@Override
public void process(Node externs, Node root) {
    Preconditions.checkState(compiler.getLifeCycleStage().isNormalized());
    NodeTraversal.traverse(compiler, externs, new ProcessExternedProperties());
    NodeTraversal.traverse(compiler, root, new ProcessProperties());
    // Gather the properties to rename, sorted by count.
    SortedSet<Property> propsByFrequency = new TreeSet<Property>(FREQUENCY_COMPARATOR);
    for (Iterator<Map.Entry<String, Property>> it = properties.entrySet().iterator(); it.hasNext(); ) {
        Property a = it.next().getValue();
        if (a.canRename() && !reservedNames.contains(a.oldName)) {
            propsByFrequency.add(a);
        } else {
            it.remove();
            // If we're not renaming this, make sure we don't name something
            // else to this name.
            reservedNames.add(a.oldName);
        }
    }
    // Try and reuse as many names from the previous compilation as possible.
    if (prevUsedRenameMap != null) {
        reusePrototypeNames(propsByFrequency);
    }
    // Generate new names.
    NameGenerator nameGen = new NameGenerator(reservedNames, "", reservedCharacters);
    StringBuilder debug = new StringBuilder();
    for (Property a : propsByFrequency) {
        if (a.newName == null) {
            a.newName = nameGen.generateNextName();
            reservedNames.add(a.newName);
        }
        debug.append(a.oldName).append(" => ").append(a.newName).append('\n');
    }
    compiler.addToDebugLog("JS property assignments:\n" + debug);
    // Update the string nodes.
    boolean changed = false;
    for (Node n : stringNodes) {
        String oldName = n.getString();
        Property a = properties.get(oldName);
        if (a != null && a.newName != null) {
            n.setString(a.newName);
            changed = changed || !a.newName.equals(oldName);
        }
    }
    if (changed) {
        compiler.reportCodeChange();
    }
    compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED_OBFUSCATED);
}
