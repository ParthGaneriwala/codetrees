public boolean buildRules() {
    boolean blnResult = false;
    /**
     * ***********************
     */
    if (strMappingFile != null) {
        theMappings = new MigrationMappings(strMappingFile);
        blnResult = theMappings.buildMappings();
        if (blnResult) {
            System.out.println("buildMappings : success");
        // theMappings.displayMappings();
        } else {
            System.out.println("buildMappings : error " + strMappingFile);
        }
    }
    /**
     * ***********************
     */
    org.jdom.Document document;
    Element root;
    String strRuleId = "";
    String strObjType = "";
    String strPattern = "";
    String strExample = "";
    String strRepObjType = "";
    String strAttrName = "";
    String strAttrValue = "";
    String strAttrType = "";
    if (this.strInputFilePath == null || this.strInputFilePath.length() == 0) {
        return blnResult;
    }
    // Create JDOM Tree
    SAXBuilder sxb = new SAXBuilder();
    try {
        document = sxb.build(this.strInputFilePath);
        // If there are no well-formedness errors,
        // then no exception is thrown
        // System.out.println(this.strInputFilePath + " is well-formed.");
        root = document.getRootElement();
        // List containing all "rule" nodes of root element
        List listRules = root.getChildren(RULE_ELEM);
        // Iterator on previously created list
        Iterator i = listRules.iterator();
        while (i.hasNext()) {
            Element curElemRule = (Element) i.next();
            strRuleId = curElemRule.getAttribute(RULE_ID).getValue();
            strObjType = curElemRule.getChild(RULE_OBJ_TYPE).getText();
            strPattern = curElemRule.getChild(RULE_PATTERN).getText();
            strExample = curElemRule.getChild(RULE_EXAMPLE).getText();
            strRepObjType = curElemRule.getChild(RULE_REP_TYPE).getText();
            ObjectRule curRule = new ObjectRule(strRuleId, strObjType, strPattern, strExample, strRepObjType);
            /* Read rule attributes */
            List listAttributes = curElemRule.getChildren(RULE_ATTRIBUTE);
            Iterator j = listAttributes.iterator();
            while (j.hasNext()) {
                Element curElemAttr = (Element) j.next();
                strAttrName = curElemAttr.getAttribute(RULE_ATTRIBUTE_NAME).getValue();
                strAttrValue = curElemAttr.getAttribute(RULE_ATTRIBUTE_VALUE).getValue();
                strAttrType = curElemAttr.getAttribute(RULE_ATTRIBUTE_TYPE).getValue();
                RuleAttribute curRuleAttr = new RuleAttribute();
                // default value.
                curRuleAttr.setRepeating(false);
                curRuleAttr.setName(strAttrName);
                curRuleAttr.setType(strAttrType);
                curRuleAttr.addListValue(strAttrValue);
                curRule.addAttribute(curRuleAttr);
            }
            // end while j
            rulesList.add(rulesList.size(), curRule);
        }
        // end while i
        blnResult = true;
    } catch (JDOMException e) {
        blnResult = false;
        // indicates a well-formedness error
        System.out.println(this.strInputFilePath + " is not well-formed.");
        System.out.println(e.getMessage());
    } catch (IOException e) {
        blnResult = false;
        System.out.println("Could not check " + this.strInputFilePath);
        System.out.println(" because " + e.getMessage());
    }
    return blnResult;
}
