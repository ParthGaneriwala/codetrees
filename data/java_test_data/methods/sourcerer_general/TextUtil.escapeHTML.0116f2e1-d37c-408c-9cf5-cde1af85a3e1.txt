public static final String escapeHTML(String s, boolean escapeEmpty) {
    int len = s.length();
    if (len == 0) {
        return s;
    }
    if (!escapeEmpty) {
        String trimmed = s.trim();
        if ((trimmed.length() == 0) || ("\"\"").equals(trimmed)) {
            return s;
        }
    }
    int i = 0;
    // No buffers are copied at this time
    do {
        int index = s.charAt(i);
        if (index >= MAX_LENGTH) {
            if (index != 0x20AC) {
                continue;
            }
            break;
        } else if (_stringChars[index] != null) {
            break;
        }
    } while (++i < len);
    // otherwise we must continue escaping for real
    if (i == len) {
        return s;
    }
    // We found a character to escape and broke out at position i
    // Now copy all characters before that to StringBuffer sb
    // Since a char[] will be used for copying we might as well get
    // a complete copy of it so that we can use array indexing instead of charAt
    StringBuffer sb = new StringBuffer(len + 40);
    char[] chars = new char[len];
    // Copy all chars from the String s to the chars buffer
    s.getChars(0, len, chars, 0);
    // Append the first i characters that we have checked to the resulting StringBuffer
    sb.append(chars, 0, i);
    int last = i;
    char[] subst;
    for (; i < len; i++) {
        char c = chars[i];
        int index = c;
        if (index < MAX_LENGTH) {
            subst = _stringChars[index];
            // It is faster to append a char[] than a String which is why we use this
            if (subst != null) {
                if (i > last) {
                    sb.append(chars, last, i - last);
                }
                sb.append(subst);
                last = i + 1;
            }
        } else // table in case one wants to convert more characters in that area
        if (index == 0x20AC) {
            if (i > last) {
                sb.append(chars, last, i - last);
            }
            sb.append("&euro;");
            last = i + 1;
        }
    }
    if (i > last) {
        sb.append(chars, last, i - last);
    }
    return sb.toString();
}
