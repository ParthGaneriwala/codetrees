@Test
public void test2() throws Exception {
    AnalysisEngine dataWriterAnnotator = AnalysisEngineFactory.createPrimitive(Test1Annotator.class, typeSystemDescription, DirectoryDataWriterFactory.PARAM_OUTPUT_DIRECTORY, outputDirectoryName, CleartkAnnotator.PARAM_DATA_WRITER_FACTORY_CLASS_NAME, DefaultBinaryMaxentDataWriterFactory.class.getName(), MaxentDataWriterFactory_ImplBase.PARAM_COMPRESS, true);
    dataWriterAnnotator.process(jCas);
    dataWriterAnnotator.collectionProcessComplete();
    File trainFile = new BinaryMaxentClassifierBuilder().getTrainingDataFile(this.outputDirectory);
    String[] lines = FileUtil.loadListOfStrings(trainFile);
    assertEquals("true 0 1=3.0 2=1.234", lines[0]);
    assertEquals("false 3 4=2", lines[1]);
    assertEquals("true null=0", lines[2]);
    assertEquals("false 5", lines[3]);
    lines = FileUtil.loadListOfStrings(new File(outputDirectoryName, NameNumberFeaturesEncoder.LOOKUP_FILE_NAME));
    Set<String> lineSet = new HashSet<String>();
    for (int i = 0; i < lines.length; i++) lineSet.add(lines[i]);
    assertEquals("6", lines[0]);
    assertTrue(lineSet.contains("6"));
    assertTrue(lineSet.contains("name_2PO\t3"));
    assertTrue(lineSet.contains("precision\t2"));
    assertTrue(lineSet.contains("distance\t1"));
    assertTrue(lineSet.contains("pos_NN\t0"));
    assertTrue(lineSet.contains("A_B_AB\t5"));
    assertTrue(lineSet.contains("p's\t4"));
    assertEquals(7, lineSet.size());
    HideOutput hider = new HideOutput();
    Train.main(outputDirectoryName, "10", "1");
    hider.restoreOutput();
}
