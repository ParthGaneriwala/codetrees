public void optimizeParameters(Properties cfg) {
    this.cvResult = new SVM.CV();
    List<Model> trainFMs = getFMs(cfg, KEY_TRAIN_FM);
    List<Model> testFMs = getFMs(cfg, KEY_TEST_FM);
    this.dumpTrainingSet(trainFMs, testFMs);
    String[] gammas = cfg.getProperty(KEY_GAMMA).split(";");
    String[] wreqs = cfg.getProperty(KEY_WREQ).split(";");
    String[] wexcs = cfg.getProperty(KEY_WEXC).split(";");
    this.gammaLo = Double.valueOf(gammas[1]);
    this.gammaHi = Double.valueOf(gammas[2]);
    this.gammaStep = Double.valueOf(gammas[3]);
    this.reqLo = Integer.valueOf(wreqs[1]);
    this.reqHi = Integer.valueOf(wreqs[2]);
    this.reqStep = Integer.valueOf(wreqs[3]);
    this.excLo = Integer.valueOf(wexcs[1]);
    this.excHi = Integer.valueOf(wexcs[2]);
    this.excStep = Integer.valueOf(wexcs[3]);
    this.cvFold = Integer.valueOf(cfg.getProperty(KEY_CV));
    int pass = Integer.valueOf(cfg.getProperty(KEY_OPT_PASS));
    GeneticOptimizer o = new GeneticOptimizer();
    o.population = Integer.valueOf(cfg.getProperty(KEY_POPSIZE));
    o.generation = Integer.valueOf(cfg.getProperty(KEY_ITER));
    o.breedProb = Double.valueOf(cfg.getProperty(KEY_CROSS));
    o.elite = Float.valueOf(cfg.getProperty(KEY_TOP));
    Solution best = null;
    for (int i = 0; i < pass; i++) {
        long startTime = System.currentTimeMillis();
        logger.info("[opt] *** Optimizing Parameters (Pass " + (i + 1) + " of " + pass + ')');
        Solution localBest = o.optimize(this);
        if (best == null || best.cost > localBest.cost) {
            best = localBest;
        }
        long elapsedTime = System.currentTimeMillis() - startTime;
        logger.info("[opt] *** Optimizing over, time elapsed: " + (elapsedTime / 1000.0f) + " seconds.");
        logger.debug("[opt] *** Local Optimized Parameter:" + "\n\tgamma = " + localBest.parts[0].value + "\n\tweight of require class = " + localBest.parts[1].value + "\n\tweight of exclude class = " + localBest.parts[2].value + "\nAccuracy = " + (100 - localBest.cost) + "%");
    }
    logger.info("[opt] *** Optimized Parameter:" + "\n\tgamma = " + best.parts[0].value + "\n\tweight of require class = " + best.parts[1].value + "\n\tweight of exclude class = " + best.parts[2].value + "\nAccuracy = " + (100 - best.cost) + "%");
    cfg.setProperty(KEY_GAMMA, best.parts[0].value + ";" + this.gammaLo + ";" + this.gammaHi + ";" + this.gammaStep);
    cfg.setProperty(KEY_WREQ, best.parts[1].value + ";" + this.reqLo + ";" + this.reqHi + ";" + this.reqStep);
    cfg.setProperty(KEY_WEXC, best.parts[2].value + ";" + this.excLo + ";" + this.excHi + ";" + this.excStep);
    try {
        cfg.store(new FileWriter("src/main/config/" + CFG_FILE), "Updated at " + (new Date().toString()) + "\n" + CLASSFIER_PROPERTIES_INTRO);
    } catch (IOException e) {
        logger.warn("Cannot save property file.");
    }
}
