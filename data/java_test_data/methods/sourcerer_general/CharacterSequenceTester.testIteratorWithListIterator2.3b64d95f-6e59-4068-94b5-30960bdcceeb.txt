public void testIteratorWithListIterator2() {
    // --- 升序的测试
    list = new CharacterSequence('b', 'e');
    Iterator it = list.listIterator(1);
    char c = 'c';
    while (it.hasNext()) {
        assertEquals(new Character(c), it.next());
        c++;
    }
    ListIterator ListIt = list.listIterator(1);
    int index = 0;
    while (ListIt.hasNext()) {
        assertEquals(index, ListIt.nextIndex());
        index++;
    }
    c = 'e';
    while (ListIt.hasPrevious()) {
        assertEquals(new Character(c), ListIt.previous());
        c--;
    }
    while (ListIt.hasNext()) {
        ListIt.nextIndex();
    }
    index = 2;
    while (ListIt.hasPrevious()) {
        assertEquals(index, ListIt.previousIndex());
        index--;
    }
    // --- 降序的测试
    list = new CharacterSequence('e', 'b');
    it = list.listIterator(1);
    c = 'd';
    while (it.hasNext()) {
        assertEquals(new Character(c), it.next());
        c--;
    }
    ListIt = list.listIterator(1);
    index = 0;
    while (ListIt.hasNext()) {
        assertEquals(index, ListIt.nextIndex());
        index++;
    }
    c = 'b';
    while (ListIt.hasPrevious()) {
        assertEquals(new Character(c), ListIt.previous());
        c++;
    }
    while (ListIt.hasNext()) {
        ListIt.nextIndex();
    }
    index = 2;
    while (ListIt.hasPrevious()) {
        assertEquals(index, ListIt.previousIndex());
        index--;
    }
}
