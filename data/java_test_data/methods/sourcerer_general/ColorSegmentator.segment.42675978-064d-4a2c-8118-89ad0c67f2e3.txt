public Map<Color, SortedSet<Segment>> segment(BufferedImage image) {
    initVariables(image);
    final int min = 0;
    int numberOfRegion = 0;
    Segment currentSegment = null;
    final java.util.List<Point> mustDo = new LinkedList<Point>();
    final java.util.List<Point> mustSearchSegmenet = new LinkedList<Point>();
    boolean segmentAdded = false;
    mustSearchSegmenet.add(new Point(0, 0));
    analyzed[0] = true;
    while (!mustSearchSegmenet.isEmpty()) {
        Point searchPoint = mustSearchSegmenet.remove(0);
        final int y = searchPoint.y;
        final int x = searchPoint.x;
        // Is this pixel unlabeled?
        if (labels[y * width + x] < 0) {
            numberOfRegion++;
            final Color color = new Color(image.getRGB(x, y));
            currentSegment = new Segment(color, numberOfRegion);
            segmentAdded = false;
            mustDo.add(new Point(x, y));
            // label it as one on a new region
            labels[y * width + x] = numberOfRegion;
        }
        assert currentSegment != null;
        // Check all the pixels on the stack. There may be more than one!
        while (mustDo.size() > 0) {
            Point thisPoint = mustDo.remove(0);
            // Check 8-neighborhood
            for (int th = -1; th <= 1; th++) for (int tw = -1; tw <= 1; tw++) {
                int rx = thisPoint.x + tw;
                int ry = thisPoint.y + th;
                // Skip pixels outside of the image.
                if ((rx >= 0) && (ry >= 0) && (ry < height) && (rx < width)) {
                    if (labels[ry * width + rx] < 0) {
                        final int pixelA = pixels[ry * width + rx];
                        final int pixelB = pixels[thisPoint.y * width + thisPoint.x];
                        final Point point = new Point(rx, ry);
                        if (pixelA == pixelB) {
                            mustDo.add(point);
                            labels[ry * width + rx] = numberOfRegion;
                            currentSegment.addPoint(point);
                        } else {
                            if (!analyzed[ry * width + rx]) {
                                mustSearchSegmenet.add(point);
                                analyzed[ry * width + rx] = true;
                            }
                        }
                    }
                }
            }
        // ended neighbors checking
        }
        if (!segmentAdded && currentSegment.getPoints().size() > min) {
            addSegment(currentSegment.getColor(), currentSegment);
            segments.add(currentSegment);
            segmentsMap.put(numberOfRegion, currentSegment);
            segmentAdded = true;
        }
    }
    return regions;
}
