protected static String unescapeJava(String str, char delimiter) {
    if (str == null) {
        return null;
    }
    int sz = str.length();
    StringBuffer out = new StringBuffer(sz);
    StringBuffer unicode = new StringBuffer(UNICODE_LEN);
    boolean hadSlash = false;
    boolean inUnicode = false;
    for (int i = 0; i < sz; i++) {
        char ch = str.charAt(i);
        if (inUnicode) {
            // if in unicode, then we're reading unicode
            // values in somehow
            unicode.append(ch);
            if (unicode.length() == UNICODE_LEN) {
                // which represents our unicode character
                try {
                    int value = Integer.parseInt(unicode.toString(), HEX_RADIX);
                    out.append((char) value);
                    unicode.setLength(0);
                    inUnicode = false;
                    hadSlash = false;
                } catch (NumberFormatException nfe) {
                    throw new RuntimeException("Unable to parse unicode value: " + unicode, nfe);
                }
            }
            continue;
        }
        if (hadSlash) {
            // handle an escaped value
            hadSlash = false;
            if (ch == '\\') {
                out.append('\\');
            } else if (ch == '\'') {
                out.append('\'');
            } else if (ch == '\"') {
                out.append('"');
            } else if (ch == 'r') {
                out.append('\r');
            } else if (ch == 'f') {
                out.append('\f');
            } else if (ch == 't') {
                out.append('\t');
            } else if (ch == 'n') {
                out.append('\n');
            } else if (ch == 'b') {
                out.append('\b');
            } else if (ch == delimiter) {
                out.append('\\');
                out.append(delimiter);
            } else if (ch == 'u') {
                // uh-oh, we're in unicode country....
                inUnicode = true;
            } else {
                out.append(ch);
            }
            continue;
        } else if (ch == '\\') {
            hadSlash = true;
            continue;
        }
        out.append(ch);
    }
    if (hadSlash) {
        // then we're in the weird case of a \ at the end of the
        // string, let's output it anyway.
        out.append('\\');
    }
    return out.toString();
}
