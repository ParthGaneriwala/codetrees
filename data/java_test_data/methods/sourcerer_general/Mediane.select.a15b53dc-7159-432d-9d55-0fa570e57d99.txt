public static void select(int[] listMedRQSelect, int first, int last, int i) {
    /* n is the number elements to select from */
    int n = last - first + 1;
    if (i > n) {
        System.err.println("element recherch√© en dehors du tableau");
        System.exit(1);
    }
    if (n <= 100) {
        nbComparaison++;
        faireTriInsertion(listMedRQSelect, first, last);
        echange(listMedRQSelect, first + i - 1, first);
    }
    if (n > 100) {
        nbComparaison++;
        int numGroups = (int) Math.floor(n / 5);
        /* integer division, round down */
        for (int group = 0; group < numGroups - 1; ++group) {
            nbComparaison++;
            int shift = group * 5;
            faireTriInsertion(listMedRQSelect, first + shift, first + shift + 4);
            echange(listMedRQSelect, first + shift + 2, first + group);
        }
        int lastMedian = first + numGroups - 1;
        select(listMedRQSelect, first, lastMedian, (int) Math.floor(numGroups / 2));
        int k = PartitionR(listMedRQSelect, first, last, first);
        if (k == first + i - 1) {
            nbComparaison++;
            echange(listMedRQSelect, k, first);
            return;
        } else if (k >= first + i - 1) {
            nbComparaison++;
            select(listMedRQSelect, first, k - 1, i);
        } else {
            int numSmaller = k - first + 1;
            int newi = i - numSmaller;
            select(listMedRQSelect, k + 1, last, newi);
            echange(listMedRQSelect, k + 1, first);
        }
    }
}
