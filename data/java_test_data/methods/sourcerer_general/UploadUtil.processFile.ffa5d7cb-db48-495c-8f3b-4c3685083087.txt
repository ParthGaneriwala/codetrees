public static void processFile(RepositoryType repositoryType, InputStream inputStream, FileDTO fileDTO) throws Exception {
    // prepare io
    OutputStream outputStream = null;
    ReadableByteChannel inputChannel = null;
    WritableByteChannel outputChannel = null;
    int fileSize = 0;
    StringBuilder stringBuilder = new StringBuilder();
    switch(repositoryType) {
        case FILE_SYSTEM:
            // prepare repository
            File repository = new File(fileDTO.getRepositoryPath());
            if (log.isDebugEnabled()) {
                stringBuilder = new StringBuilder();
                stringBuilder.append("repositoryPath: ").append(fileDTO.getRepositoryPath());
                stringBuilder.append(", repositoryType: ").append(repositoryType);
                stringBuilder.append(", repository.exists(): ").append(repository.exists());
                stringBuilder.append(", repository.isDirectory(): ").append(repository.isDirectory());
                log.debug(stringBuilder.toString());
            }
            // prepare stream
            stringBuilder = new StringBuilder();
            stringBuilder.append(fileDTO.getRepositoryPath());
            if (!fileDTO.getRepositoryPath().endsWith(File.separator)) {
                stringBuilder.append(File.separator);
            }
            stringBuilder.append(fileDTO.getUniqueFileName());
            outputStream = new FileOutputStream(stringBuilder.toString());
            // copy channel
            inputChannel = Channels.newChannel(inputStream);
            outputChannel = Channels.newChannel(outputStream);
            fileSize = ChannelUtil.copy(inputChannel, outputChannel);
            break;
        case DATABASE:
            // prepare steam
            outputStream = new ByteArrayOutputStream();
            // copy channel
            inputChannel = Channels.newChannel(inputStream);
            outputChannel = Channels.newChannel(outputStream);
            fileSize = ChannelUtil.copy(inputChannel, outputChannel);
            // set vo
            fileDTO.setBytes(((ByteArrayOutputStream) outputStream).toByteArray());
            fileDTO.setRepositoryPath(null);
            break;
    }
    fileDTO.setFileSize(fileSize);
    // close io
    inputChannel.close();
    outputChannel.close();
    inputStream.close();
    outputStream.close();
}
