public Object handleInvocation(MethodInvoker method) throws CleverException {
    int i = 0;
    Method mthd;
    Class[] par;
    Object output;
    Object[] input = null;
    List params = method.getParams();
    if (params != null) {
        par = new Class[params.size()];
        input = new Object[params.size()];
        for (i = 0; i < params.size(); i++) {
            par[i] = params.get(i).getClass();
            input[i] = params.get(i);
        }
    } else {
        par = null;
    }
    try {
        mthd = getPluginClass().getMethod(method.getMethodName(), par);
        if (method.getHasReturn()) {
            output = (Object) mthd.invoke(getPlugin(), input);
        } else {
            mthd.invoke(getPlugin(), input);
            output = null;
        }
        logger.debug("Method invoked: " + method.getMethodName());
        return (output);
    } catch (IllegalAccessException ex) {
        logger.error("Error: " + ex);
        throw new CleverException("IllegalAccessException: " + ex.getMessage());
    } catch (IllegalArgumentException ex) {
        logger.error("Error: " + ex);
        throw new CleverException("Illegal Argument Exception: " + ex.getMessage());
    } catch (InvocationTargetException ex) {
        logger.error("Error: " + ex);
        throw new CleverException(ex.getTargetException(), "Error on plugin method invocation: " + ex.getTargetException().getMessage());
    } catch (NoSuchMethodException ex) {
        logger.error("Error: " + ex);
        throw new CleverException("plugin method not found: " + ex.getMessage());
    } catch (SecurityException ex) {
        logger.error("Error: " + ex);
        throw new CleverException("Security Exception: " + ex.getMessage());
    }
}
