public void testIsFanTeamMemberEvent() throws Exception {
    // Insert project
    Project project = new Project();
    project.setTitle("Concursive Test");
    project.setShortDescription("Concursive Test");
    project.setRequestDate(new Timestamp(System.currentTimeMillis()));
    project.setEstimatedCloseDate((Timestamp) null);
    project.setRequestedBy("Project SQL Test Requested By");
    project.setRequestedByDept("Project SQL Test Requested By Department");
    project.setBudgetCurrency("USD");
    project.setBudget("10000.75");
    project.setGroupId(GROUP_ID);
    project.setEnteredBy(USER_ID);
    project.setModifiedBy(USER_ID);
    assertNotNull(project);
    boolean result = project.insert(db);
    assertTrue("Project was not inserted", result);
    // add a new user
    User memberUser = new User();
    memberUser.setGroupId(GROUP_ID);
    memberUser.setDepartmentId(1);
    memberUser.setFirstName("Test User");
    memberUser.setLastName("Test User");
    memberUser.setCompany("xxx");
    memberUser.setEmail("test1" + System.currentTimeMillis() + "@concursive.com");
    memberUser.setUsername(memberUser.getEmail());
    memberUser.setPassword("xxx");
    memberUser.setEnteredBy(0);
    memberUser.setModifiedBy(0);
    memberUser.setEnabled(true);
    memberUser.setStartPage(1);
    memberUser.setRegistered(true);
    memberUser.insert(db, "127.0.0.1", mockPrefs);
    assertTrue("Unable to add a user..", memberUser.getId() != -1);
    // add a team member with joined status
    TeamMember thisMember = new TeamMember();
    thisMember.setProjectId(project.getId());
    thisMember.setUserId(memberUser.getId());
    thisMember.setUserLevel(PortalUtils.getUserLevel(TeamMember.MEMBER));
    thisMember.setEnteredBy(USER_ID);
    thisMember.setModifiedBy(USER_ID);
    thisMember.setStatus(TeamMember.STATUS_ADDED);
    thisMember.setCustomInvitationMessage("");
    thisMember.insert(db);
    // load the user that became a member
    User member = UserUtils.loadUser(thisMember.getUserId());
    Project memberProfile = ProjectUtils.loadProject(member.getProfileProjectId());
    BusinessProcess thisProcess = processList.get(PROCESS_NAME);
    assertTrue("Process not found...", thisProcess != null);
    context.setPreviousObject(null);
    context.setThisObject(thisMember);
    context.setProcessName(PROCESS_NAME);
    context.setProcess(thisProcess);
    context.setAttribute("userId", new Integer(USER_ID));
    context.setAttribute("member", WikiLink.generateLink(memberProfile));
    context.setAttribute("profile", WikiLink.generateLink(project));
    workflowManager.execute(context);
    // Now query the database and test to see if a history item was added for the specified test user Id.
    ProjectHistoryList historyList = new ProjectHistoryList();
    historyList.setProjectId(project.getId());
    historyList.setEnteredBy(thisMember.getUserId());
    historyList.setLinkObject(ProjectHistoryList.MEMBER_OBJECT);
    historyList.setEventType(ProjectHistoryList.BECOME_PROFILE_FAN_EVENT);
    historyList.setLinkItemId(thisMember.getId());
    historyList.buildList(db);
    assertTrue("History event (team member became a fan) was not recorded!", historyList.size() == 1);
    ProjectHistory history = historyList.get(0);
    assertEquals("Recorded event mismatch", "[[|" + memberProfile.getId() + ":profile||" + memberProfile.getTitle() + "]] became a member of [[|" + project.getId() + ":profile||Concursive Test]]", history.getDescription());
    // Delete the history item because the test is done (and any other needed objects)
    history.delete(db);
    // delete the team member record
    thisMember.delete(db);
    // delete the user record
    memberUser.getProfileProject().delete(db, null);
    memberUser.delete(db);
    // delete the project
    boolean deleteResult = project.delete(db, (String) null);
    assertTrue("Project wasn't deleted", deleteResult);
    // Try to find the previously deleted project
    ProjectList projectList = new ProjectList();
    projectList.setProjectId(project.getId());
    projectList.buildList(db);
    assertTrue("Project exists when it shouldn't -- id " + project.getId(), projectList.size() == 0);
}
