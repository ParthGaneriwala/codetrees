// $ANTLR start "param"
public final MyGrammarParser.param_return param() throws RecognitionException {
    MyGrammarParser.param_return retval = new MyGrammarParser.param_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token IDENTIFIER25 = null;
    Token VG26 = null;
    Token IDENTIFIER27 = null;
    Token DP28 = null;
    MyGrammarParser.type_return type29 = null;
    CommonTree IDENTIFIER25_tree = null;
    CommonTree VG26_tree = null;
    CommonTree IDENTIFIER27_tree = null;
    CommonTree DP28_tree = null;
    RewriteRuleTokenStream stream_DP = new RewriteRuleTokenStream(adaptor, "token DP");
    RewriteRuleTokenStream stream_IDENTIFIER = new RewriteRuleTokenStream(adaptor, "token IDENTIFIER");
    RewriteRuleTokenStream stream_VG = new RewriteRuleTokenStream(adaptor, "token VG");
    RewriteRuleSubtreeStream stream_type = new RewriteRuleSubtreeStream(adaptor, "rule type");
    try {
        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:158:7: ( IDENTIFIER ( VG IDENTIFIER )* DP type -> ^( PARAM ( IDENTIFIER )+ type ) )
        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:158:9: IDENTIFIER ( VG IDENTIFIER )* DP type
        {
            IDENTIFIER25 = (Token) match(input, IDENTIFIER, FOLLOW_IDENTIFIER_in_param1053);
            stream_IDENTIFIER.add(IDENTIFIER25);
            // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:158:20: ( VG IDENTIFIER )*
            loop7: do {
                int alt7 = 2;
                int LA7_0 = input.LA(1);
                if ((LA7_0 == VG)) {
                    alt7 = 1;
                }
                switch(alt7) {
                    case 1:
                        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:158:21: VG IDENTIFIER
                        {
                            VG26 = (Token) match(input, VG, FOLLOW_VG_in_param1056);
                            stream_VG.add(VG26);
                            IDENTIFIER27 = (Token) match(input, IDENTIFIER, FOLLOW_IDENTIFIER_in_param1058);
                            stream_IDENTIFIER.add(IDENTIFIER27);
                        }
                        break;
                    default:
                        break loop7;
                }
            } while (true);
            DP28 = (Token) match(input, DP, FOLLOW_DP_in_param1062);
            stream_DP.add(DP28);
            pushFollow(FOLLOW_type_in_param1064);
            type29 = type();
            state._fsp--;
            stream_type.add(type29.getTree());
            // AST REWRITE
            // elements: IDENTIFIER, type
            // token labels:
            // rule labels: retval
            // token list labels:
            // rule list labels:
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", retval != null ? retval.tree : null);
            root_0 = (CommonTree) adaptor.nil();
            // 158:45: -> ^( PARAM ( IDENTIFIER )+ type )
            {
                // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:158:48: ^( PARAM ( IDENTIFIER )+ type )
                {
                    CommonTree root_1 = (CommonTree) adaptor.nil();
                    root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(PARAM, "PARAM"), root_1);
                    if (!(stream_IDENTIFIER.hasNext())) {
                        throw new RewriteEarlyExitException();
                    }
                    while (stream_IDENTIFIER.hasNext()) {
                        adaptor.addChild(root_1, stream_IDENTIFIER.nextNode());
                    }
                    stream_IDENTIFIER.reset();
                    adaptor.addChild(root_1, stream_type.nextTree());
                    adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
