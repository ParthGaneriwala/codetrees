public ActionForward save(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
    if (log.isDebugEnabled()) {
        log.debug("Entering 'save' method");
    }
    ChainFlowForm flowForm = (ChainFlowForm) form;
    String[] statements = request.getParameterValues("statements");
    ActionMessages errors = form.validate(mapping, request);
    ActionMessages messages = new ActionMessages();
    if (statements == null) {
        if (flowForm.getFlowType().equals("end") || flowForm.getFlowType().equals("start") || flowForm.getFlowType().equals("print") || flowForm.getFlowType().equals("read") || flowForm.getFlowType().equals("encrypt")) {
        } else {
            errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("errors.flow.saveflow"));
        }
    }
    if (!errors.isEmpty()) {
        saveErrors(request, errors);
        return getFlowForward(flowForm, mapping);
    }
    ChainFlowManager mgr = (ChainFlowManager) getBean("chainFlowManager");
    // Extract attributes and parameters we will need
    ChainFlow flow = new ChainFlow();
    // if a flow's flowId is passed in
    // if (!StringUtils.isEmpty(request.getParameter("flowId"))) {
    // lookup the user using that id
    // flow = mgr.getChainFlow(flowForm.getFlowId());
    // }
    // Exceptions are caught by ActionExceptionHandler
    // all we need to persist is the parent object
    BeanUtils.copyProperties(flow, flowForm);
    if (StringUtils.isNotEmpty(flowForm.getTagId()) && StringUtils.isNotEmpty(flowForm.getEpcName())) {
        messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("errors.flow.start"));
        saveMessages(request.getSession(), messages);
        return getFlowForward(flowForm, mapping);
    }
    if (StringUtils.isNotEmpty(flowForm.getTagId())) {
        TagManager tagMgr = (TagManager) getBean("tagManager");
        Tag tag = tagMgr.getTag(flowForm.getTagId());
        flow.setTag(tag);
    }
    if (StringUtils.isNotEmpty(flowForm.getEpcName())) {
        EPCManager epcMgr = (EPCManager) getBean("epcManager");
        EPC epc = epcMgr.getEpc(flowForm.getEpcName());
        flow.setEpc(epc);
    }
    if (statements != null) {
        List<String> scripts = new ArrayList<String>();
        for (int i = 0; statements.length > i; i++) {
            scripts.add(statements[i]);
        }
        flow.setScripts(scripts);
    }
    ChainUtil.setPos(flow);
    flow.initAudit(this.getLoginUser());
    try {
        mgr.saveChainFlow(flow);
    } catch (Exception e) {
        log.warn(e.getMessage());
        errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("errors.flow.save", e.getMessage()));
        saveErrors(request, errors);
        // BeanUtils.copyProperties(flowForm, convert(flow));
        updateFormBean(mapping, request, flowForm);
        return getFlowForward(flowForm, mapping);
    }
    BeanUtils.copyProperties(flowForm, convert(flow));
    updateFormBean(mapping, request, flowForm);
    ActionForward forward = new ActionForward();
    forward.setPath(mapping.findForward("success").getPath() + "?chainId=" + flowForm.getChainId());
    forward.setRedirect(true);
    return forward;
}
