XML removeNamespace(Namespace ns) {
    XmlCursor cursor = newCursor();
    try {
        if (cursor.isStartdoc())
            cursor.toFirstContentToken();
        if (!cursor.isStart())
            return this;
        String nsPrefix = ns.prefix();
        String nsURI = ns.uri();
        Map prefixToURI = new HashMap();
        int depth = 1;
        while (!(cursor.isEnd() && depth == 0)) {
            if (cursor.isStart()) {
                // Get the namespaces declared in this element.
                // The ones with undefined prefixes are not candidates
                // for removal because they are used.
                prefixToURI.clear();
                NamespaceHelper.getNamespaces(cursor, prefixToURI);
                ObjArray inScopeNSBag = new ObjArray();
                Iterator i = prefixToURI.entrySet().iterator();
                while (i.hasNext()) {
                    Map.Entry entry = (Map.Entry) i.next();
                    ns = new Namespace(lib, (String) entry.getKey(), (String) entry.getValue());
                    inScopeNSBag.add(ns);
                }
                // Add the URI we are looking for to avoid matching
                // non-existing Namespaces.
                ns = new Namespace(lib, nsURI);
                inScopeNSBag.add(ns);
                Object[] inScopeNS = inScopeNSBag.toArray();
                // Check the element name
                Namespace n = NamespaceHelper.getNamespace(lib, cursor, inScopeNS);
                if (nsURI.equals(n.uri()) && (nsPrefix == null || nsPrefix.equals(n.prefix()))) {
                    // This namespace is used
                    return this;
                }
                // Check the attributes
                cursor.push();
                boolean hasNext = cursor.toFirstAttribute();
                while (hasNext) {
                    n = NamespaceHelper.getNamespace(lib, cursor, inScopeNS);
                    if (nsURI.equals(n.uri()) && (nsPrefix == null || nsPrefix.equals(n.prefix()))) {
                        // This namespace is used
                        return this;
                    }
                    hasNext = cursor.toNextAttribute();
                }
                cursor.pop();
                if (nsPrefix == null) {
                    // Remove all namespaces declarations that match nsURI
                    i = prefixToURI.entrySet().iterator();
                    while (i.hasNext()) {
                        Map.Entry entry = (Map.Entry) i.next();
                        if (entry.getValue().equals(nsURI))
                            NamespaceHelper.removeNamespace(cursor, (String) entry.getKey());
                    }
                } else if (nsURI.equals(prefixToURI.get(nsPrefix))) {
                    // Remove the namespace declaration that matches nsPrefix
                    NamespaceHelper.removeNamespace(cursor, String.valueOf(nsPrefix));
                }
            }
            switch(cursor.toNextToken().intValue()) {
                case XmlCursor.TokenType.INT_START:
                    depth++;
                    break;
                case XmlCursor.TokenType.INT_END:
                    depth--;
                    break;
            }
        }
    } finally {
        cursor.dispose();
    }
    return this;
}
