public RuleResult applyTo(IModelElement object) {
    RuleResult result = new IRule.Success((IModelElement) object);
    // IModelElement object;
    if (!(object instanceof ProcessModel)) {
        object = object.getRoot();
    }
    if (object instanceof ProcessModel) {
        ProcessModel pm = (ProcessModel) object;
        if (3 < pm.size()) {
            // result = new IRule.Warning((IModelElement)object, "This is Validate Diagram Rule!!!");
            Iterator<IChild> itr = pm.iterator();
            // skip first element, equation editor
            itr.next();
            // skip second element, Console view
            itr.next();
            // skip third element ToolTip
            itr.next();
            // hm.setText("handle");
            while (// && result instanceof IRule.Success)
            itr.hasNext()) {
                String strLabel = "";
                // Set annotation on the desired model element
                if (null != msgObject) {
                    strLabel = msgObject.getLabel();
                    setAnnotation(result, strLabel);
                }
                ProcessUnit pu = (ProcessUnit) itr.next();
                SetInStreamList(pu);
                SetOutStreamList(pu);
                if (!(myOverallInstreamList.isEmpty() || myOverallOutstreamList.isEmpty()) && !(pu instanceof TerminalSink)) {
                    // Check if the contents and quantities of the Overall list are same.
                    // FuctionCAll
                    int ret_type = OverllAllCheck(myOverallInstreamList, myOverallOutstreamList);
                    if (ret_type == SUCCESS) {
                        result = new IRule.Warning((IModelElement) msgObject, "OverAll Quantities are same!");
                        if (null != myInstreamList && null != myOutstreamList) {
                            if (myInstreamList.isEmpty() && myOutstreamList.isEmpty()) {
                                result = new IRule.Success((IModelElement) msgObject);
                                // break;
                                continue;
                            } else // Input stream is empty but output stream is NOT
                            if ((myInstreamList.isEmpty() && !myOutstreamList.isEmpty())) {
                                String listofNames = GetStreamElementNames(myOutstreamList);
                                result = new IRule.Warning((IModelElement) msgObject, "Outgoing stream(s) contain\n" + listofNames + "\n which are NOT specified in the incoming stream(s). \n  Make sure that every compound that leaves a processing unit also enters that unit. ");
                                break;
                            } else // if incoming stream has elements but outgoing stream is empty
                            if (!myInstreamList.isEmpty() && myOutstreamList.isEmpty()) {
                                String listofNames = GetStreamElementNames(myInstreamList);
                                result = new IRule.Warning((IModelElement) msgObject, "Incoming stream(s) contain\n" + listofNames + "\n which are NOT specified in the outgoing stream(s).  \n Make sure that every compound that enters a processing unit also leaves that unit.");
                                break;
                            }
                            // Check for the elements present in the incoming stream but not present in the outgoing streams.
                            String listofNames = CheckelelementInOutlist(myInstreamList, myOutstreamList);
                            if (null != listofNames && !listofNames.isEmpty()) {
                                result = new IRule.Warning((IModelElement) msgObject, "Incoming stream(s) contain\n" + listofNames + "\n which are NOT specified in the outgoing stream(s).  \n Make sure that every compound that enters a processing unit also leaves that unit.");
                                break;
                            }
                            // Elements present in Out stream but nor present in Incoming stream
                            listofNames = CheckelelementInOutlist(myOutstreamList, myInstreamList);
                            if (null != listofNames && !listofNames.isEmpty()) {
                                result = new IRule.Warning((IModelElement) msgObject, "Outgoing stream(s) contain\n" + listofNames + "\n which are NOT specified in the incoming stream(s). \n  Make sure that every compound that leaves a processing unit also enters that unit. ");
                                break;
                            }
                            // Check if the contents and quantities of the two list are same.
                            int retval = ComponentCheck(myInstreamList, myOutstreamList);
                            switch(retval) {
                                case UNITS_NOT_SAME:
                                    {
                                        result = new IRule.Warning((IModelElement) msgObject, "Overall mass balance is satisfied.\n The units attached to the quantity of one or more of the individual compounds are NOT consistent across the processing unit attached to this stream.  \n  Check to insure that the units match for each indivdual compound.");
                                    }
                                    break;
                                case QTY_NOT_SAME:
                                    {
                                        result = new IRule.Warning((IModelElement) msgObject, "Overall mass balance is satisfied.\n One or more of the individual mass balances across the processing unit attached to this stream is NOT satisfied. \n Check the amount of each compound entering and leaving the process unit.");
                                    }
                                    break;
                                case SUCCESS:
                                    {
                                        result = new IRule.Success((IModelElement) msgObject);
                                    }
                                    break;
                                default:
                                    {
                                    }
                                    break;
                            }
                        }
                    } else {
                        switch(ret_type) {
                            case UNITS_NOT_SAME:
                                {
                                    result = new IRule.Warning((IModelElement) msgObject, "Units of all stream(s) entering or leaving the process unit connected to this stream do not match.\n Make sure that the units of all stream(s) connected to the process unit match.");
                                }
                                break;
                            case QTY_NOT_SAME:
                                {
                                    result = new IRule.Warning((IModelElement) msgObject, "Overall mass balance across the process unit connected to this stream is not satisfied.\n Make sure that the quantities of all incoming and outgoing streams match.");
                                }
                                break;
                            default:
                                {
                                }
                                break;
                        }
                    }
                }
            }
        }
    }
    // object = (IModelElement)msgObject;
    return result;
}
