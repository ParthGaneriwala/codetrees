@Override
protected void processChannelTell(int channel, String name, String titles, String message, ChatType chatType) {
    // /* log the incoming chat message. */
    // super.processChannelTell(channel, teller, titles, message, tellType);
    /* Handle a channel tell here. */
    boolean validbot = false;
    String namePlus = name;
    int userID = -1;
    for (int i = 0; i < maxID; i++) {
        if (name.equalsIgnoreCase(users[i].handle)) {
            userID = i;
            break;
        }
    }
    if (userID >= 0) {
        if (users[userID].getMasterPoints() > 9) {
            if (users[userID].getMasterPoints() > 29) {
                namePlus = name.concat("(BGM)");
            } else {
                namePlus = name.concat("(BM)");
            }
        }
    }
    if ((channel == bettingBotChannelNum) && (message.equalsIgnoreCase("restore")) && (allowRestore)) {
        allowRestore = false;
        if (playerFeature) {
            tellChannel("Cannot restore anymore, need reboot first.");
        } else {
            tellChannel("Attempting to restore closed tourneys on request of " + namePlus + ".");
            for (int i = 0; i < maxbots; i++) {
                if (probableStatus[i] == 0) {
                // ignore bot which was idle
                }
                if (probableStatus[i] == 1) {
                    tellChannel("" + BotList[i] + " was open, cannot be restored and will be paid back.");
                }
                if (probableStatus[i] == 2) {
                    recovery[i] = true;
                    inProgress[i] = true;
                    marketopen[i] = false;
                    team[i] = probablyTeam[i];
                    // tellChannel("i noticed that " + i + " is " + team[i] + ".");
                    tourneyStatus[i] = 2;
                    probableStatus[i] = 0;
                    tourneyNumber[i] = probableNumber[i];
                    feature_exception[i] = true;
                    featurechange();
                    recoverbot(i);
                    tellChannel("Bot " + BotList[i] + " recovered.");
                    sendLine("qimpart 282 1 4 1 " + BotList[i]);
                    /*
						 * ends the tourney with this name for Jin owners. it can theoretically happen that this ends a nonexistant tourney.
						 */
                    sendLine("qimpart 282 1 1 1 " + BotList[i]);
                    sendLine("qimpart 282 1 2 1 " + BotList[i]);
                    sendLine("qimpart 282 1 3 1 " + BotList[i]);
                    recovery[i] = false;
                }
            }
            for (int i = 0; i < maxbots; i++) {
                if (tourneyStatus[i] == 2) {
                    checkFinishedTourney[i] = true;
                }
            }
            for (int i = 0; i < maxbots; i++) {
                if (checkFinishedTourney[i]) {
                    myPointerToBBMainObject.myAssi.botsimplecheck(BotList[i]);
                    break;
                }
            }
            playerFeature = true;
            autoFeature = true;
            tellChannel("The latest futures transactions have been cancelled.");
            sendLine("set busy 0");
        }
    }
    if ((channel == bettingBotChannelNum) && (message.equalsIgnoreCase("recover"))) {
        if (gridcheckattempt[0] | gridcheckattempt[1] | gridcheckattempt[2] | gridcheckattempt[3] | gridcheckattempt[4] | gridcheckattempt[5] | gridcheckattempt[6] | gridcheckattempt[7] | gridcheckattempt[8]) {
            myPointerToBBMainObject.myAssi.botgridrequest(BotList[bottogetgrid]);
            tellChannel("Thanks " + namePlus + "!! Asking " + BotList[bottogetgrid] + " for the grid again.");
        } else {
            tell(name, "Umm...it seems that everything is OK. No need to recover.");
        }
    }
    if ((channel == bettingBotChannelNum) && (message.startsWith("featurereq")) && !(busyfeaturing)) {
        if (playerFeature) {
            for (int i = 0; i < maxbots; i++) {
                if (Parse(message).elementAt(0).equalsIgnoreCase(BotList[i]) && !(Parse(message).elementAt(0).equalsIgnoreCase("pear"))) {
                    validbot = true;
                    if (featured[i]) {
                        tell(name, BotList[i] + " is already a featured tourney.");
                    } else {
                        feature_exception[i] = true;
                        featurechange();
                        checktourn(i);
                        marketmaker[i] = true;
                        tellChannel("Attempting to feature " + BotList[i] + " on request of " + namePlus + ".");
                        busyfeaturing = true;
                    }
                }
            }
            if (validbot) {
                validbot = false;
            } else {
                tell(name, "I did not understand your feature-request. Check spelling of the botname or supply one.");
            }
        } else {
            tell(name, "That function has been temporarily disabled by a BettingBot-administrator. Maybe I need a reboot or there is another good reason.");
        }
    }
    if ((channel == bettingBotChannelNum) && (message.startsWith("help") || message.startsWith("Help")) && !name.equalsIgnoreCase(userName)) {
        qtell(name, "Valid commands are: register, chips [<bettor>], quote <player> <tourneybot>, openint, pool <tourneybot>,");
        qtell(name, "antiquote <player> <tourneybot>, featurereq <tourneybot>, bestchips [<position>], bestweek [<position>],");
        qtell(name, "bestmonth [<position>], weekchips [<bettor>], monthchips [<bettor>], history [<number>], upstats,");
        qtell(name, "records, help [<file>], finger [<bettor>], set <variable> <value>, doubleint <tourneybot>,");
        qtell(name, "antiplacequote <player> <tourneybot>, placequote <player> <tourneybot>, doublequote <player>,");
        qtell(name, "tri <tricast bet>, triint, tripool <tourneybot>, rollover, stats, masterlist, news, publish <text>,");
        qtell(name, "stockquote <symbol>, lookup <company name>, orderbook, fmarket, order <expression>, cancelorder <number>.");
        qtell(name, "Send me an arbitrary tell that contains a handle in a featured(open) tourney and an amount to bet.");
        qtell(name, "Type tell {0} featured to see currently covered tourneys.", bettingBotChannel);
        qtell(name, "Tell me help or help topics for much more. Or type 'help bettingbot'.");
    }
    if ((channel == bettingBotChannelNum) && message.equalsIgnoreCase("featured")) {
        sendFeaturedList(bettingBotChannel);
    }
    if ((channel == stocksChannelNum) && ((message.startsWith("stockquote")) || (message.startsWith("Stockquote")) || (message.startsWith("StockQuote")))) {
        if (message.indexOf(" ") != -1) {
            String stockSymbol = message.substring(message.indexOf(" ") + 1).trim();
            if (stockSymbol.indexOf(" ") != -1) {
                stockSymbol = stockSymbol.substring(0, stockSymbol.indexOf(" ")).trim();
            }
            if (stockLookupsChannel < maxStockLookups) {
                stockLookupsChannel = stockLookupsChannel + 1;
                processQuote(stockSymbol, name, true);
            } else {
                tell(name, "Sorry, spam limit hit. Wait a while before checking the stock market again.");
            }
        } else {
            tell(name, "Usage: 'tell bettingbot stockquote symbol'. If you do not know the symbol, try: 'tell bettingbot lookup company-name' first.");
        }
    }
    if ((channel == stocksChannelNum) && ((message.startsWith("lookup")) || (message.startsWith("Lookup")))) {
        if (message.indexOf(" ") != -1) {
            String stockName = message.substring(message.indexOf(" ") + 1);
            if (stockName.indexOf(" ") != -1) {
                stockName = stockName.substring(0, stockName.indexOf(" ")).trim();
            }
            if (stockLookupsChannel < maxStockLookups) {
                stockLookupsChannel = stockLookupsChannel + 1;
                processLookup(stockName, name);
            } else {
                tell(name, "Sorry, spam limit hit. Wait a while before checking the stock market again.");
            }
        } else {
            tell(name, "Usage: 'tell bettingbot lookup company-name'.");
        }
    }
}
