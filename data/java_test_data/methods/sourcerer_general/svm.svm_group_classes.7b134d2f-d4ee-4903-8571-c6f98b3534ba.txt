// label: label name, start: begin of each class, count: #data of classes, perm: indices to the original data
private static void svm_group_classes(svm_problem prob, int[] nr_class_ret, int[][] label_ret, int[][] start_ret, int[][] count_ret, int[] perm) {
    int l = prob.l;
    int max_nr_class = 16;
    int nr_class = 0;
    int[] label = new int[max_nr_class];
    int[] count = new int[max_nr_class];
    int[] data_label = new int[l];
    int i;
    for (i = 0; i < l; i++) {
        int this_label = (int) (prob.y[i]);
        int j;
        for (j = 0; j < nr_class; j++) {
            if (this_label == label[j]) {
                ++count[j];
                break;
            }
        }
        data_label[i] = j;
        if (j == nr_class) {
            if (nr_class == max_nr_class) {
                max_nr_class *= 2;
                int[] new_data = new int[max_nr_class];
                System.arraycopy(label, 0, new_data, 0, label.length);
                label = new_data;
                new_data = new int[max_nr_class];
                System.arraycopy(count, 0, new_data, 0, count.length);
                count = new_data;
            }
            label[nr_class] = this_label;
            count[nr_class] = 1;
            ++nr_class;
        }
    }
    int[] start = new int[nr_class];
    start[0] = 0;
    for (i = 1; i < nr_class; i++) start[i] = start[i - 1] + count[i - 1];
    for (i = 0; i < l; i++) {
        perm[start[data_label[i]]] = i;
        ++start[data_label[i]];
    }
    start[0] = 0;
    for (i = 1; i < nr_class; i++) start[i] = start[i - 1] + count[i - 1];
    nr_class_ret[0] = nr_class;
    label_ret[0] = label;
    start_ret[0] = start;
    count_ret[0] = count;
}
