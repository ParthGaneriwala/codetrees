public boolean execute(ComponentContext context) {
    TeamMemberEmailBean thisEmailBean = (TeamMemberEmailBean) context.getThisObject();
    User user = UserUtils.loadUser(thisEmailBean.getEnteredBy());
    Project project = ProjectUtils.loadProject(thisEmailBean.getProjectId());
    Connection db = null;
    String url = context.getParameter(URL);
    String emailToSender = context.getParameter(EMAIL_TO_SENDER);
    Map<String, String> prefs = context.getApplicationPrefs();
    try {
        TeamMemberList teamMemberList = project.getTeam();
        db = getConnection(context);
        for (TeamMember teamMember : teamMemberList) {
            if (teamMember.getNotification()) {
                if (teamMember.getUserId() == user.getId() && "false".equals(emailToSender)) {
                // do nothing and skip this team member
                } else {
                    // Set the data model
                    Map subjectMappings = new HashMap();
                    subjectMappings.put("user", new HashMap());
                    ((Map) subjectMappings.get("user")).put("nameFirstLast", user.getNameFirstLast());
                    subjectMappings.put("project", new HashMap());
                    ((Map) subjectMappings.get("project")).put("title", project.getTitle());
                    Map bodyMappings = new HashMap();
                    bodyMappings.put("site", new HashMap());
                    ((Map) bodyMappings.get("site")).put("title", prefs.get("TITLE"));
                    bodyMappings.put("project", new HashMap());
                    ((Map) bodyMappings.get("project")).put("title", project.getTitle());
                    ((Map) bodyMappings.get("project")).put("profileUrl", url + "/show/" + project.getUniqueId());
                    bodyMappings.put("user", new HashMap());
                    ((Map) bodyMappings.get("user")).put("nameFirstLast", user.getNameFirstLast());
                    ((Map) bodyMappings.get("user")).put("profileUrl", url + "/show/" + user.getProfileProject().getUniqueId());
                    bodyMappings.put("member", new HashMap());
                    ((Map) bodyMappings.get("member")).put("nameFirstLast", UserUtils.loadUser(teamMember.getUserId()).getNameFirstLast());
                    ((Map) bodyMappings.get("member")).put("profileUrl", url + "/show/" + UserUtils.loadUser(teamMember.getUserId()).getProfileProject().getUniqueId());
                    bodyMappings.put("emailMessage", thisEmailBean.getBody());
                    Configuration freeMarkerConfiguration = (Configuration) context.getAttribute(ComponentContext.FREEMARKER_CONFIGURATION);
                    if (freeMarkerConfiguration == null) {
                        LOG.error("freeMarkerConfiguration is null");
                    }
                    // Initialize the message template
                    freemarker.template.Template emailSubject = null;
                    freemarker.template.Template emailBody = null;
                    emailSubject = freeMarkerConfiguration.getTemplate("project_members_email_subject-text.ftl");
                    emailBody = freeMarkerConfiguration.getTemplate("project_members_email_body-html.ftl");
                    // Send the message
                    SMTPMessage message = SMTPMessageFactory.createSMTPMessageInstance(prefs);
                    message.setFrom(prefs.get("EMAILADDRESS"));
                    message.addTo(UserUtils.loadUser(teamMember.getUserId()).getEmail());
                    // Set the subject from the template
                    StringWriter inviteSubjectTextWriter = new StringWriter();
                    emailSubject.process(subjectMappings, inviteSubjectTextWriter);
                    message.setSubject(inviteSubjectTextWriter.toString());
                    // Set the body from the template
                    StringWriter inviteBodyTextWriter = new StringWriter();
                    emailBody.process(bodyMappings, inviteBodyTextWriter);
                    message.setBody(inviteBodyTextWriter.toString());
                    // Send the emails
                    message.setType("text/html");
                    int result = message.send();
                    if (result == 0) {
                        LOG.debug("email sent successfully to " + UserUtils.loadUser(teamMember.getUserId()).getNameFirstLast());
                    } else {
                        LOG.debug("email not sent to " + UserUtils.loadUser(teamMember.getUserId()).getNameFirstLast());
                    }
                }
            }
        }
    } catch (Exception e) {
        e.printStackTrace(System.out);
    } finally {
        freeConnection(context, db);
    }
    return true;
}
