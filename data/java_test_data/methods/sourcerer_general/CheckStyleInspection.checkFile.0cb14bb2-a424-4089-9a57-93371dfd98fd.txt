@Nullable
@SuppressWarnings({ "SynchronizationOnLocalVariableOrMethodParameter" })
public ProblemDescriptor[] checkFile(@NotNull final PsiFile psiFile, @NotNull final InspectionManager manager, final boolean isOnTheFly) {
    LOG.debug("Inspection has been invoked.");
    if (!psiFile.isValid() || !psiFile.isPhysical() || !CheckStyleUtilities.isValidFileType(psiFile.getFileType())) {
        LOG.debug("Skipping file as invalid: " + psiFile.getName());
        return null;
    }
    final CheckStylePlugin checkStylePlugin = getPlugin(manager.getProject());
    final Module module = ModuleUtil.findModuleForPsiElement(psiFile);
    final boolean checkTestClasses = checkStylePlugin.getConfiguration().isScanningTestClasses();
    if (!checkTestClasses && module != null) {
        final VirtualFile elementFile = psiFile.getContainingFile().getVirtualFile();
        if (elementFile != null) {
            final ModuleRootManager moduleRootManager = ModuleRootManager.getInstance(module);
            if (moduleRootManager != null && moduleRootManager.getFileIndex() != null && moduleRootManager.getFileIndex().isInTestSourceContent(elementFile)) {
                LOG.debug("Skipping test class " + psiFile.getName());
                return null;
            }
        }
    }
    ScannableFile scannableFile = null;
    try {
        final Checker checker = getChecker(checkStylePlugin, module);
        if (checker == null) {
            return new ProblemDescriptor[0];
        }
        final Configuration config = getConfig(checkStylePlugin, module);
        final List<Check> checks = CheckFactory.getChecks(config);
        final Document fileDocument = PsiDocumentManager.getInstance(manager.getProject()).getDocument(psiFile);
        if (fileDocument == null) {
            LOG.debug("Skipping check - file is binary or has no document: " + psiFile.getName());
            return null;
        }
        scannableFile = new ScannableFile(psiFile);
        final Map<String, PsiFile> filesToScan = Collections.singletonMap(scannableFile.getAbsolutePath(), psiFile);
        final CheckStyleAuditListener listener;
        synchronized (checker) {
            listener = new CheckStyleAuditListener(filesToScan, manager, false, checks);
            checker.addListener(listener);
            checker.process(Arrays.asList(scannableFile.getFile()));
        }
        final List<ProblemDescriptor> problems = listener.getProblems(psiFile);
        return problems.toArray(new ProblemDescriptor[problems.size()]);
    } catch (ProcessCanceledException e) {
        LOG.warn("Process cancelled when scanning: " + psiFile.getName());
        return null;
    } catch (Throwable e) {
        final CheckStylePluginException processed = CheckStylePlugin.processError("The inspection could not be executed.", e);
        LOG.error("The inspection could not be executed.", processed);
        return null;
    } finally {
        if (scannableFile != null) {
            scannableFile.deleteIfRequired();
        }
    }
}
