public void initComponents() {
    /**
     * ************** The main frame **************************************
     */
    // width, height
    this.setSize(550, 400);
    Container container = this.getContentPane();
    container.setLayout(new BorderLayout());
    container.setBackground(InstantMessagingGUI.containerBackGroundColor);
    Point point = imGUI.getLocation();
    this.setLocation(point.x, point.y);
    this.addWindowListener(new WindowAdapter() {

        public void windowClosing(WindowEvent e) {
            clean();
        }
    });
    /**
     * *************** The components *********************************
     */
    firstPanel = new JPanel();
    // Top,,bottom,
    firstPanel.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));
    // If put to False: we see the container's background
    firstPanel.setOpaque(false);
    // rows, columns, horizontalGap, verticalGap
    firstPanel.setLayout(new GridLayout(1, 1, 5, 10));
    remoteUserLabel = new JLabel("Chatting session with " + contact);
    // remoteUserLabel = new JLabel("��" + contact + "����");
    remoteUserLabel.setToolTipText("Your contact!");
    // remoteUserLabel.setToolTipText("�Ѿ�����!");
    // Alignment of the text
    remoteUserLabel.setHorizontalAlignment(AbstractButton.CENTER);
    // Color of the text
    remoteUserLabel.setForeground(Color.black);
    // Size of the text
    remoteUserLabel.setFont(new Font("Dialog", 1, 14));
    // If put to true: we see the label's background
    remoteUserLabel.setOpaque(true);
    remoteUserLabel.setBackground(InstantMessagingGUI.labelBackGroundColor);
    remoteUserLabel.setBorder(InstantMessagingGUI.labelBorder);
    firstPanel.add(remoteUserLabel);
    chatTextArea = new JTextArea(25, 45);
    chatTextArea.setToolTipText("Messages Received");
    chatTextArea.setEditable(false);
    chatTextArea.setBackground(Color.lightGray);
    // create scroll bars for text areas
    JScrollPane incomingScroller = new JScrollPane(chatTextArea);
    incomingScroller.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
    incomingScroller.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
    infoLabel = new JLabel("Info");
    // Alignment of the text
    infoLabel.setHorizontalAlignment(AbstractButton.CENTER);
    // Color of the text
    infoLabel.setForeground(Color.black);
    // Size of the text
    infoLabel.setFont(new Font("Dialog", 1, 10));
    // If put to true: we see the label's background
    infoLabel.setOpaque(false);
    // infoLabel.setBackground(InstantMessagingGUI.labelBackGroundColor);
    // infoLabel.setBorder(InstantMessagingGUI.labelBorder);
    textToSendLabel = new JLabel("Text to send:");
    // textToSendLabel = new JLabel("������Ϣ:");
    // Alignment of the text
    textToSendLabel.setHorizontalAlignment(AbstractButton.CENTER);
    // Color of the text
    textToSendLabel.setForeground(Color.black);
    // Size of the text
    textToSendLabel.setFont(new Font("Dialog", 1, 14));
    // If put to true: we see the label's background
    textToSendLabel.setOpaque(true);
    textToSendLabel.setBackground(InstantMessagingGUI.labelBackGroundColor);
    textToSendLabel.setBorder(InstantMessagingGUI.labelBorder);
    messageTextArea = new JTextArea(3, 2);
    messageTextArea.setEditable(true);
    messageTextArea.setFont(new Font("Helvetica", Font.PLAIN, 14));
    messageTextArea.setSelectedTextColor(Color.blue);
    messageTextArea.setSelectionColor(Color.lightGray);
    // create scroll bars for text areas
    JScrollPane outgoingScroller = new JScrollPane(messageTextArea);
    outgoingScroller.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
    outgoingScroller.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
    secondPanel = new JPanel();
    secondPanel.setOpaque(false);
    // top, left, bottom, right
    secondPanel.setBorder(BorderFactory.createEmptyBorder(2, 2, 2, 2));
    secondPanel.setLayout(new GridLayout(2, 1, 0, 0));
    sendButton = new JButton("  Send  ");
    // sendButton = new JButton("  ����  ");
    sendButton.setToolTipText("Send the message!");
    // sendButton.setToolTipText("������Ϣ!");
    sendButton.setFocusPainted(false);
    sendButton.setFont(new Font("Dialog", 1, 16));
    sendButton.setBackground(InstantMessagingGUI.buttonBackGroundColor);
    sendButton.setBorder(InstantMessagingGUI.buttonBorder);
    sendButton.addActionListener(new ActionListener() {

        public void actionPerformed(ActionEvent evt) {
            chatSession.sendIMActionPerformed(evt);
        }
    });
    firstPanel.add(remoteUserLabel);
    // secondPanel.add(infoLabel);
    // secondPanel.add(textToSendLabel);
    // secondPanel.add(outgoingScroller);
    // secondPanel.add(sendButton);
    JPanel subPanel2 = new JPanel();
    // subPanel2.setBorder(BorderFactory.createEmptyBorder(30,10,0,10));
    // If put to False: we see the container's background
    subPanel2.setOpaque(false);
    subPanel2.setLayout(new GridLayout(2, 1, 0, 0));
    subPanel2.add(infoLabel);
    subPanel2.add(textToSendLabel);
    JPanel subPanel3 = new JPanel();
    // subPanel3.setBorder(BorderFactory.createEmptyBorder(30,10,0,10));
    // If put to False: we see the container's background
    subPanel3.setOpaque(false);
    subPanel3.setLayout(new BorderLayout());
    subPanel3.add("Center", outgoingScroller);
    subPanel3.add("East", sendButton);
    secondPanel.add(subPanel2);
    secondPanel.add(subPanel3);
    // _______________��������ģ��
    JPanel leftvoicePanel = new JPanel();
    leftvoicePanel.setLayout(new BorderLayout());
    chatstate = new JLabel();
    chatstate.setText("chat state");
    voiceButtion = new JButton(" Start Call ");
    voiceButtion.addActionListener(new ActionListener() {

        public void actionPerformed(ActionEvent evt) {
            chatstate.setText("waiting for response.....");
            // ����invite����
            chatSession.sendInviteActionPerformed(evt);
            voiceButtion.setEnabled(false);
            endvoiceButtion.setEnabled(true);
        }
    });
    /**
     * ������������İ�ť
     */
    endvoiceButtion = new JButton(" End Call ");
    endvoiceButtion.setEnabled(false);
    endvoiceButtion.addActionListener(new ActionListener() {

        public void actionPerformed(ActionEvent e) {
            /**
             * ����bye���������Ự
             */
            chatSession.sendVoiceBye();
            chatstate.setText("Call Ended");
            voiceButtion.setEnabled(true);
            endvoiceButtion.setEnabled(false);
        }
    });
    leftvoicePanel.add(chatstate, BorderLayout.CENTER);
    JPanel voiceAndEndJPanel = new JPanel();
    voiceAndEndJPanel.setLayout(new FlowLayout());
    voiceAndEndJPanel.add(voiceButtion);
    voiceAndEndJPanel.add(endvoiceButtion);
    leftvoicePanel.add(voiceAndEndJPanel, BorderLayout.SOUTH);
    container.add("North", firstPanel);
    container.add("Center", incomingScroller);
    container.add("South", secondPanel);
    container.add(leftvoicePanel, BorderLayout.EAST);
}
