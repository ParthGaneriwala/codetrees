private void parsePhylipFormatMatrix(String inMatrix) {
    List<String> keys = new ArrayList<String>();
    String newKey = null;
    int distancesParsed = 0;
    int numEntries = 0;
    int lineCount = 1;
    boolean needMoreValues = false;
    for (String line : inMatrix.split("[\\r\\n]+")) {
        // The first line should be the number of entries.
        if (numEntries == 0 && line.matches("\\s*\\d+\\s*")) {
            numEntries = Integer.parseInt(line.trim());
        } else if (needMoreValues) {
            String[] distances = line.trim().split("\\s+");
            for (int i = 0; i < distances.length && distancesParsed + i < keys.size(); i++) {
                setDistance(newKey, keys.get(distancesParsed + i), Float.parseFloat(distances[i]));
            }
            if (distancesParsed + distances.length < keys.size() - 1) {
                distancesParsed += distances.length;
                needMoreValues = true;
            } else {
                needMoreValues = false;
            }
        } else if (line.matches("\\s*((?:\\s*[\\-\\d\\.]+)*)")) {
        // Continued full-table values we don't need.
        } else {
            Matcher m = sPhylipPattern.matcher(line);
            if (!m.matches()) {
                throw new RuntimeException("Unexpected format of matrix file line " + lineCount + ": '" + line + "'");
            }
            newKey = m.group(1).trim();
            keys.add(newKey);
            mMatrix.put(newKey, null);
            if (m.group(2) != null) {
                String[] distances = m.group(2).split("\\s+");
                int i;
                for (i = 0; i < distances.length && i < keys.size(); i++) {
                    setDistance(newKey, keys.get(i), Float.parseFloat(distances[i]));
                }
                /*
               if (distances.length < keys.size() - 1)
               {
                  distancesParsed = distances.length;
                  needMoreValues = true;
               }
 */
                if (i < keys.size() - 1) {
                    // Line must be wrapped
                    distancesParsed = distances.length;
                    needMoreValues = true;
                }
            }
        }
        lineCount++;
    }
}
