public ActionForward addCoupon(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse resqonse) {
    if (!isLoggedIn(request)) {
        return mapping.findForward(ForwardConstants.INDEX);
    }
    SessionContainer existingContainer = getSessionContainer(request);
    Customer customer = existingContainer.getCustomer();
    DynaActionForm data = (DynaActionForm) form;
    String cardNo = (String) data.get("cardNo");
    String password = (String) data.get("password");
    CouponCard card = null;
    ActionMessages errors = new ActionMessages();
    if ("coochong".equals(cardNo)) {
        // coochong卡促销
        List<Coupon> list = couponService.findByCustomerId(customer.getId());
        for (int i = 0; i < list.size(); i++) {
            Coupon c = list.get(i);
            if (c.getProduct().getId() == 1) {
                if (!isCorrectCard(null, password, errors, request)) {
                    return mapping.getInputForward();
                }
            }
        }
        CouponCard couponCard = new CouponCard();
        couponCard.setCardNo(1001);
        couponCard.setPassword("10001");
        couponCard.setCouponContent("优惠活动价9.9元");
        couponCard.setPrice(new Float(13.0));
        // 白杯
        Product product = productService.findById(1);
        couponCard.setProduct(product);
        couponCard.setQuantity(1);
        Calendar date = Calendar.getInstance();
        date.set(2011, 1, 1);
        couponCard.setExpirationDate(date.getTime());
        try {
            card = couponCardService.saveCouponCard(couponCard);
        } catch (ServiceException e) {
            e.printStackTrace();
        }
    } else {
        if (isEmptyCardNoOrPassword(Integer.parseInt(cardNo), password, errors, request)) {
            return mapping.getInputForward();
        }
        card = couponCardService.findByCardNo(Integer.parseInt(cardNo));
        if (!isCorrectCard(card, password, errors, request)) {
            return mapping.getInputForward();
        }
    }
    Set<Coupon> couponsUsedSet = (Set<Coupon>) request.getSession().getAttribute("coupons");
    Coupon coupon = null;
    try {
        coupon = couponCardService.saveCoupon(card, customer);
        SessionContainer sessionContainer = getSessionContainer(request);
        List<Item> items = sessionContainer.getCart().getItems();
        List<Item> printPhotosItems = sessionContainer.getCart().getPrintPhotosItems();
        for (Item item : items) {
            if (coupon.getProduct().getId().intValue() == item.getProduct().getId().intValue()) {
                couponsUsedSet.add(coupon);
            }
        }
        for (Item item : printPhotosItems) {
            if (coupon.getProduct().getId().intValue() == item.getProduct().getId().intValue()) {
                couponsUsedSet.add(coupon);
                break;
            }
        }
    } catch (ServiceException e) {
        logger.error("优惠券已过期！", e);
        ActionMessage msg = new ActionMessage("优惠券已过期！", false);
        errors.add("errors", msg);
        saveMessages(request, errors);
    }
    return mapping.findForward(ForwardConstants.SUCCESS);
}
