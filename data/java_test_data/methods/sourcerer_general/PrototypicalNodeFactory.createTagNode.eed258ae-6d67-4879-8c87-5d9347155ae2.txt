public Tag createTagNode(Page page, int start, int end, Vector attributes) {
    Attribute attribute;
    String id;
    Tag prototype;
    Tag ret;
    ret = null;
    if (0 != attributes.size()) {
        attribute = (Attribute) attributes.elementAt(0);
        id = attribute.getName();
        if (null != id) {
            try {
                id = id.toUpperCase(Locale.ENGLISH);
                if (!id.startsWith("/")) {
                    if (id.endsWith("/"))
                        id = id.substring(0, id.length() - 1);
                    prototype = (Tag) mBlastocyst.get(id);
                    if (null != prototype) {
                        ret = (Tag) prototype.clone();
                        ret.setPage(page);
                        ret.setStartPosition(start);
                        ret.setEndPosition(end);
                        ret.setAttributesEx(attributes);
                    }
                }
            } catch (CloneNotSupportedException cnse) {
            // default to creating a generic one
            }
        }
    }
    if (null == ret) {
        // generate a generic node
        try {
            ret = (Tag) getTagPrototype().clone();
            ret.setPage(page);
            ret.setStartPosition(start);
            ret.setEndPosition(end);
            ret.setAttributesEx(attributes);
        } catch (CloneNotSupportedException cnse) {
            ret = new TagNode(page, start, end, attributes);
        }
    }
    return (ret);
}
