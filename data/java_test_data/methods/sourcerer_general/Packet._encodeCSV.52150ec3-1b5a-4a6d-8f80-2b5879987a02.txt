private static String _encodeCSV(Packet pkt) {
    StringBuffer sb = new StringBuffer();
    Payload payload = pkt.getPayload(true);
    /* get Payload template field definitions */
    PayloadTemplate plt = pkt.getPayloadTemplate();
    if (plt == null) {
        // unable to encode with CSV
        sb.append(Encoding.ENCODING_BASE64_CHAR);
        sb.append(Base64.encode(payload.getBytes()));
        return sb.toString();
    }
    /* encode to string */
    payload.resetIndex();
    for (int p = 0; payload.isValidReadLength(0); p++) {
        PayloadTemplate.Field pltFld = plt.getField(p);
        if (pltFld == null) {
            break;
        }
        sb.append(Encoding.ENCODING_CSV_CHAR);
        int length = pltFld.getLength();
        switch(pltFld.getPrimitiveType()) {
            case PayloadTemplate.PRIMITIVE_GPS:
                {
                    GeoPoint gp = payload.readGPS(length);
                    if (pltFld.isHiRes()) {
                        sb.append(StringTools.format(gp.getLatitude(), "###0.00000"));
                        sb.append(Encoding.ENCODING_CSV_CHAR);
                        sb.append(StringTools.format(gp.getLongitude(), "###0.00000"));
                    } else {
                        sb.append(StringTools.format(gp.getLatitude(), "###0.0000"));
                        sb.append(Encoding.ENCODING_CSV_CHAR);
                        sb.append(StringTools.format(gp.getLongitude(), "###0.0000"));
                    }
                    break;
                }
            case PayloadTemplate.PRIMITIVE_STRING:
                {
                    sb.append(payload.readString(length));
                    break;
                }
            case PayloadTemplate.PRIMITIVE_BINARY:
                {
                    byte[] b = payload.readBytes(length);
                    sb.append("0x" + StringTools.toHexString(b));
                    break;
                }
            case PayloadTemplate.PRIMITIVE_LONG:
            default:
                {
                    long val = pltFld.isSigned() ? payload.readLong(length) : payload.readULong(length);
                    if (pltFld.isHex()) {
                        sb.append("0x" + StringTools.toHexString(val, length * 8));
                    } else {
                        sb.append(String.valueOf(val));
                    }
                    break;
                }
        }
    }
    return sb.toString();
}
