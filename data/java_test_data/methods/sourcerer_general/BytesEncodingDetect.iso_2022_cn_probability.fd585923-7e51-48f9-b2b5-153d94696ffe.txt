int iso_2022_cn_probability(byte[] rawtext) {
    int i, rawtextlen = 0;
    int dbchars = 1, isochars = 1;
    long isofreq = 0, totalfreq = 1;
    float rangeval = 0, freqval = 0;
    int row, column;
    // Check to see if characters fit into acceptable ranges
    // and have expected frequency of use
    rawtextlen = rawtext.length;
    for (i = 0; i < rawtextlen - 1; i++) {
        if (rawtext[i] == (byte) 0x1B && i + 3 < rawtextlen) {
            // Escape char ESC
            if (rawtext[i + 1] == (byte) 0x24 && rawtext[i + 2] == 0x29 && rawtext[i + 3] == (byte) 0x41) {
                // GB Escape $ ) A
                i += 4;
                while (rawtext[i] != (byte) 0x1B) {
                    dbchars++;
                    if ((0x21 <= rawtext[i] && rawtext[i] <= 0x77) && (0x21 <= rawtext[i + 1] && rawtext[i + 1] <= 0x77)) {
                        isochars++;
                        row = rawtext[i] - 0x21;
                        column = rawtext[i + 1] - 0x21;
                        totalfreq += 500;
                        if (GBFreq[row][column] != 0) {
                            isofreq += GBFreq[row][column];
                        } else if (15 <= row && row < 55) {
                            isofreq += 200;
                        }
                        i++;
                    }
                    i++;
                }
            } else if (i + 3 < rawtextlen && rawtext[i + 1] == (byte) 0x24 && rawtext[i + 2] == (byte) 0x29 && rawtext[i + 3] == (byte) 0x47) {
                // CNS Escape $ ) G
                i += 4;
                while (rawtext[i] != (byte) 0x1B) {
                    dbchars++;
                    if ((byte) 0x21 <= rawtext[i] && rawtext[i] <= (byte) 0x7E && (byte) 0x21 <= rawtext[i + 1] && rawtext[i + 1] <= (byte) 0x7E) {
                        isochars++;
                        totalfreq += 500;
                        row = rawtext[i] - 0x21;
                        column = rawtext[i + 1] - 0x21;
                        if (EUC_TWFreq[row][column] != 0) {
                            isofreq += EUC_TWFreq[row][column];
                        } else if (35 <= row && row <= 92) {
                            isofreq += 150;
                        }
                        i++;
                    }
                    i++;
                }
            }
            if (rawtext[i] == (byte) 0x1B && i + 2 < rawtextlen && rawtext[i + 1] == (byte) 0x28 && rawtext[i + 2] == (byte) 0x42) {
                // ASCII:
                // ESC
                // ( B
                i += 2;
            }
        }
    }
    rangeval = 50 * ((float) isochars / (float) dbchars);
    freqval = 50 * ((float) isofreq / (float) totalfreq);
    // " + rangeval + " " + freqval);
    return (int) (rangeval + freqval);
// return 0;
}
