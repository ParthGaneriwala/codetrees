private boolean closeTicket(TicketInfo ticket, Object ticketext) {
    boolean resultok = false;
    if (m_App.getAppUserView().getUser().hasPermission("sales.Total")) {
        try {
            // reset the payment info
            taxeslogic.calculateTaxes(ticket);
            ticket.resetPayments();
            if (executeEvent(ticket, ticketext, "ticket.total") == null) {
                // Muestro el total
                printTicket("Printer.TicketTotal", ticket, ticketext);
                // Select the Payments information
                JPaymentSelect paymentdialog = ticket.getTicketType() == TicketInfo.RECEIPT_NORMAL ? paymentdialogreceipt : paymentdialogrefund;
                paymentdialog.setPrintSelected("true".equals(m_jbtnconfig.getProperty("printselected", "true")));
                if (paymentdialog.showDialog(ticket.getTotal(), ticket.getCustomer())) {
                    // assign the payments selected and calculate taxes.
                    ticket.setPayments(paymentdialog.getSelectedPayments());
                    // Asigno los valores definitivos del ticket...
                    // El usuario que lo cobra
                    ticket.setUser(m_App.getAppUserView().getUser().getUserInfo());
                    ticket.setActiveCash(m_App.getActiveCashIndex());
                    // Le pongo la fecha de cobro
                    ticket.setDate(new Date());
                    if (executeEvent(ticket, ticketext, "ticket.save") == null) {
                        // Save the receipt and assign a receipt number
                        try {
                            dlSales.saveTicket(ticket, m_App.getInventoryLocation());
                        } catch (BasicException eData) {
                            MessageInf msg = new MessageInf(MessageInf.SGN_NOTICE, AppLocal.getIntString("message.nosaveticket"), eData);
                            msg.show(this);
                        }
                        executeEvent(ticket, ticketext, "ticket.close", new ScriptArg("print", paymentdialog.isPrintSelected()));
                        // Print receipt.
                        printTicket(paymentdialog.isPrintSelected() ? "Printer.Ticket" : "Printer.Ticket2", ticket, ticketext);
                        resultok = true;
                    }
                }
            }
        } catch (TaxesException e) {
            MessageInf msg = new MessageInf(MessageInf.SGN_WARNING, AppLocal.getIntString("message.cannotcalculatetaxes"));
            msg.show(this);
            resultok = false;
        }
        // reset the payment info
        m_oTicket.resetTaxes();
        m_oTicket.resetPayments();
    }
    // or canceled the ticket.close script
    return resultok;
}
