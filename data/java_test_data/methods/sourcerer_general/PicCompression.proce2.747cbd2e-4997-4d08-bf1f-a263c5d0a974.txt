public String proce2(String oldFile, int height, float quality) {
    if (oldFile == null) {
        return null;
    }
    String newName = null;
    try {
        File file = new File(oldFile);
        if (// 文件不存在时
        !file.exists())
            return null;
        /**
         * 对服务器上的临时文件进行处理
         */
        Image srcFile = ImageIO.read(file);
        // 按高度等必缩放
        int h = srcFile.getHeight(null);
        int width = (srcFile.getWidth(null) * h) / height;
        // 为等比缩放计算输出的图片宽度及高度
        double rate1 = ((double) srcFile.getWidth(null)) / (double) width + 0.1;
        double rate2 = ((double) srcFile.getHeight(null)) / (double) height + 0.1;
        double rate = rate1 > rate2 ? rate1 : rate2;
        int new_w = (int) (((double) srcFile.getWidth(null)) / rate);
        int new_h = (int) (((double) srcFile.getHeight(null)) / rate);
        /**
         * 宽,高设定
         */
        BufferedImage tag = new BufferedImage(new_w, new_h, BufferedImage.TYPE_INT_RGB);
        tag.getGraphics().drawImage(srcFile, 0, 0, new_w, new_h, null);
        /**
         * 压缩后的文件名
         */
        String fileName = file.getName();
        String suffix = fileName.substring(fileName.lastIndexOf("."));
        newName = fileName.substring(0, fileName.indexOf(".") - 1) + "-ico" + suffix;
        String newImage = oldFile.replaceAll(fileName, newName);
        // newImage = smallIcon;
        /**
         * 压缩之后临时存放位置
         */
        FileOutputStream out = new FileOutputStream(newImage);
        JPEGImageEncoder encoder = JPEGCodec.createJPEGEncoder(out);
        JPEGEncodeParam jep = JPEGCodec.getDefaultJPEGEncodeParam(tag);
        /**
         * 压缩质量
         */
        jep.setQuality(quality, true);
        encoder.encode(tag, jep);
        out.close();
        srcFile.flush();
    } catch (FileNotFoundException e) {
        e.printStackTrace();
    } catch (IOException e) {
        e.printStackTrace();
    }
    return newName;
}
