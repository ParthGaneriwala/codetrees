@Override
protected synchronized int readChunk(long pos, byte[] buf, int offset, int len, byte[] checksumBuf) throws IOException {
    if (gotEOS) {
        if (startOffset < 0) {
            // This is mainly for debugging. can be removed.
            throw new IOException("BlockRead: already got EOS or an error");
        }
        startOffset = -1;
        return -1;
    }
    // Read one DATA_CHUNK.
    long chunkOffset = lastChunkOffset;
    if (lastChunkLen > 0) {
        chunkOffset += lastChunkLen;
    }
    if ((pos + firstChunkOffset) != chunkOffset) {
        throw new IOException("Mismatch in pos : " + pos + " + " + firstChunkOffset + " != " + chunkOffset);
    }
    // Read next packet if the previous packet has been read completely.
    if (dataLeft <= 0) {
        // Read packet headers.
        int packetLen = in.readInt();
        long offsetInBlock = in.readLong();
        long seqno = in.readLong();
        boolean lastPacketInBlock = in.readBoolean();
        if (LOG.isDebugEnabled()) {
            LOG.debug("DFSClient readChunk got seqno " + seqno + " offsetInBlock " + offsetInBlock + " lastPacketInBlock " + lastPacketInBlock + " packetLen " + packetLen);
        }
        int dataLen = in.readInt();
        // Sanity check the lengths
        if (dataLen < 0 || ((dataLen % bytesPerChecksum) != 0 && !lastPacketInBlock) || (seqno != (lastSeqNo + 1))) {
            throw new IOException("BlockReader: error in packet header" + "(chunkOffset : " + chunkOffset + ", dataLen : " + dataLen + ", seqno : " + seqno + " (last: " + lastSeqNo + "))");
        }
        lastSeqNo = seqno;
        isLastPacket = lastPacketInBlock;
        dataLeft = dataLen;
        adjustChecksumBytes(dataLen);
        if (dataLen > 0) {
            IOUtils.readFully(in, checksumBytes.array(), 0, checksumBytes.limit());
        }
    }
    int chunkLen = Math.min(dataLeft, bytesPerChecksum);
    if (chunkLen > 0) {
        // len should be >= chunkLen
        IOUtils.readFully(in, buf, offset, chunkLen);
        checksumBytes.get(checksumBuf, 0, checksumSize);
    }
    dataLeft -= chunkLen;
    lastChunkOffset = chunkOffset;
    lastChunkLen = chunkLen;
    if ((dataLeft == 0 && isLastPacket) || chunkLen == 0) {
        gotEOS = true;
    }
    if (chunkLen == 0) {
        return -1;
    }
    return chunkLen;
}
