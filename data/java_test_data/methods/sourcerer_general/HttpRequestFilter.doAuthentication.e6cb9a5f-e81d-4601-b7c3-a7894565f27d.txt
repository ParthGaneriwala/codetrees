private void doAuthentication(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
    String user = req.getParameter(USER);
    String test = req.getParameter(PASS);
    if (user == null || test == null) {
        String msg = "Username or password is null.";
        logger.warn(msg);
        req.setAttribute(PARAM_MESSAGE, msg);
        req.getRequestDispatcher(loginPage).forward(req, resp);
        return;
    }
    NamePasswordCredential cred = new NamePasswordCredential();
    cred.setUserName(user);
    cred.setPassword(test.getBytes());
    try {
        Subject subj = atnSvc.authenticate(cred, createContextFromRequest(req));
        logger.debug("Authentication succeeded. Subject=[" + subj.getSubjectName() + "];ResponseContext=[" + subj + "]");
        HttpSession httpSession = req.getSession(true);
        Session session = sessionMgr.getSession(httpSession.getId());
        // Put subject to current session.
        session.setSubject(subj);
        // Set the response context's attributes to request
        Collection<Attribute> attrs = subj.getAllAttributes();
        for (Attribute each : attrs) {
            req.setAttribute(each.getName(), each.isArray() ? each.getArrayValueAsString() : each.getValue());
        }
        String url = (String) httpSession.getAttribute(KEY_ORIGINAL_URL);
        if (url == null) {
            logger.debug("Forward to home page.");
            // we redirect to the root context.
            req.getRequestDispatcher("/").forward(req, resp);
            return;
        }
        logger.debug("Forward to original url : '" + url + "'");
        // Re-direct to the original url before login.
        resp.sendRedirect(url);
    } catch (AuthenticationFailedException e) {
        String msg = "Authenticaton failed: " + e.getMessage();
        logger.debug(msg, e);
        req.setAttribute(PARAM_MESSAGE, msg);
        req.getRequestDispatcher(atnFailPage).forward(req, resp);
    } catch (SessionSizeExceedCapacityException e) {
        String msg = "Session pool full: " + e.getMessage();
        logger.debug(msg, e);
        req.setAttribute(PARAM_MESSAGE, msg);
        req.getRequestDispatcher(errorPage).forward(req, resp);
    }
}
