private boolean downloadBlock(String url, File file) throws IOException {
    long localFileSize = 0;
    long remoteFileSize = 0;
    BufferedInputStream in = null;
    RandomAccessFile out = null;
    HttpMethod request = null;
    try {
        if (file.exists()) {
            localFileSize = file.length();
        }
        HttpClient client = new HttpClient();
        request = new GetMethod(url);
        if (localFileSize > 0) {
            // server must support partial content for resume
            request.addRequestHeader("Range", "bytes=" + localFileSize + "-");
            if (client.executeMethod(request) != HttpStatus.SC_PARTIAL_CONTENT) {
                return false;
            }
        } else if (client.executeMethod(request) != HttpStatus.SC_OK) {
            // response not ok
            return false;
        }
        Header contentLengthHeader = request.getResponseHeader("content-length");
        if (contentLengthHeader == null) {
            return false;
        }
        remoteFileSize = Long.parseLong(contentLengthHeader.getValue());
        System.out.println("Local file size is " + localFileSize + " bytes.");
        System.out.println("Remote file size is " + remoteFileSize + " bytes.");
        System.out.println("Bytes Remaining " + (remoteFileSize - localFileSize) + " bytes.");
        if (localFileSize != remoteFileSize) {
            in = new BufferedInputStream(request.getResponseBodyAsStream());
            out = new RandomAccessFile(file, "rw");
            out.seek(localFileSize);
            int offset = 0;
            int len = 1024 * 10;
            int bytes;
            byte[] block = new byte[len];
            System.out.println("Downloding ... ");
            System.out.println("remoteFileSize = " + remoteFileSize);
            while ((bytes = in.read(block, offset, len)) > -1) {
                out.write(block, 0, bytes);
            // localFileSize = localFileSize + bytes;
            // final double downloadPart = ((double) localFileSize) / ((double) remoteFileSize);
            // System.out.println(downloadPart * 100 + "%");
            }
        }
        return file.length() == remoteFileSize;
    } finally {
        try {
            if (out != null) {
                out.close();
            }
        } catch (IOException ioe) {
        }
        request.releaseConnection();
    }
}
