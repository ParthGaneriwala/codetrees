public void carve() {
    // clear previous maze
    maze = new MazeNode[rows][cols][flrs];
    // build opening. Lower right corner. Initiated with all walls
    maze[0][0][0] = new MazeNode(true, true, true, true, true, true);
    // add it to the list
    list.add(new int[] { 0, 0, 0 });
    // index
    int i;
    // use integer version of Point3D so to avoid a lot of casting
    // point
    int[] n;
    // tocarve
    int[] m;
    while (// while there's something in the list
    !list.isEmpty()) {
        // index in list. We currently get this index randomly
        i = gen.nextInt(list.size());
        n = list.get(i);
        // empty the sublist
        sublist.clear();
        if (// if north is empty, add it to sublist
        n[0] != rows - 1 && maze[n[0] + 1][n[1]][n[2]] == null)
            sublist.add(new int[] { n[0] + 1, n[1], n[2] });
        if (// if south is empty
        n[0] != 0 && maze[n[0] - 1][n[1]][n[2]] == null)
            sublist.add(new int[] { n[0] - 1, n[1], n[2] });
        if (// if west is empty
        n[1] != cols - 1 && maze[n[0]][n[1] + 1][n[2]] == null)
            sublist.add(new int[] { n[0], n[1] + 1, n[2] });
        if (// if east is empty
        n[1] != 0 && maze[n[0]][n[1] - 1][n[2]] == null)
            sublist.add(new int[] { n[0], n[1] - 1, n[2] });
        if (// if down is empty
        n[2] != 0 && maze[n[0]][n[1]][n[2] - 1] == null)
            sublist.add(new int[] { n[0], n[1], n[2] - 1 });
        if (// if up is empty
        n[2] != flrs - 1 && maze[n[0]][n[1]][n[2] + 1] == null)
            sublist.add(new int[] { n[0], n[1], n[2] + 1 });
        // if sublist is empty, remove n from list.
        if (sublist.isEmpty())
            list.remove(i);
        else {
            // pick a random empty cell next to it
            m = sublist.get(gen.nextInt(sublist.size()));
            // carve
            // set new room as a passage
            maze[m[0]][m[1]][m[2]] = new MazeNode(true, true, true, true, true, true);
            // make link between rooms
            if (// if north
            m[0] == n[0] + 1) {
                maze[n[0]][n[1]][n[2]].north = false;
                maze[m[0]][m[1]][m[2]].south = false;
            } else if (// if east
            m[1] == n[1] + 1) {
                maze[n[0]][n[1]][n[2]].east = false;
                maze[m[0]][m[1]][m[2]].west = false;
            } else if (// if south
            m[0] == n[0] - 1) {
                maze[n[0]][n[1]][n[2]].south = false;
                maze[m[0]][m[1]][m[2]].north = false;
            } else if (// if west
            m[1] == n[1] - 1) {
                maze[n[0]][n[1]][n[2]].west = false;
                maze[m[0]][m[1]][m[2]].east = false;
            } else if (// if up
            m[2] == n[2] + 1) {
                maze[n[0]][n[1]][n[2]].up = false;
                maze[m[0]][m[1]][m[2]].down = false;
            } else if (// if down
            m[2] == n[2] - 1) {
                maze[n[0]][n[1]][n[2]].down = false;
                maze[m[0]][m[1]][m[2]].up = false;
            }
            // add new room to list
            list.add(new int[] { m[0], m[1], m[2] });
        }
    }
// maze[0][cols-1][flrs-1].north = false; //maze exit in UPPER corner
}
