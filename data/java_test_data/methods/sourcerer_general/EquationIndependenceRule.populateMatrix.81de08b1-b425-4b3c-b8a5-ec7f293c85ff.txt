private void populateMatrix(Equation eq, int ieqcount) {
    // Integer.valueOf(0);
    Float ilastCoeff = Float.valueOf(0.0f);
    String sLastelement = "";
    String sLastoperator = "";
    int index = 0;
    Iterator<Field> fIterator = eq.iterator();
    String token = "";
    while (fIterator.hasNext()) {
        Field field = fIterator.next();
        token = field.getText().trim();
        if (!token.isEmpty()) {
            if (ParsingUtil.isOperator(token)) {
                if (token.equals("*")) {
                    sLastoperator = token;
                } else // e.g 6x+y = 100. Coeff of y is 1.
                if (!sLastelement.isEmpty()) {
                    // This means that co eff is 1
                    // store the coeeficient of the unknown
                    storeValue(index, 1.0f, ieqcount);
                    // reset the variables
                    sLastelement = "";
                    sLastoperator = "";
                    ilastCoeff = 0.0f;
                }
            } else if (ParsingUtil.isNumber(token) || isTokenknown(token)) {
                float val = 0.0f;
                if (!ParsingUtil.isNumber(token)) {
                    // token is not a number, so get this known element's value
                    val = getvalueOfElement(eq, token);
                } else {
                    // This token is a number
                    val = Float.parseFloat(token);
                }
                // Store the value of possible co efficient
                // Integer.valueOf(val);
                ilastCoeff = Float.valueOf(val);
                // M1 * 6 = M2, store 6 as coefficient of M1
                if (sLastoperator.equals("*") && !sLastelement.isEmpty()) {
                    // store the coeeficient of the unknown
                    storeValue(index, ilastCoeff, ieqcount);
                    // reset the variables
                    sLastelement = "";
                    sLastoperator = "";
                    ilastCoeff = 0.0f;
                }
            } else // this means that token is not a operator, not a number and is not known
            // That is this token is an unknown element
            {
                index = getUnkownIndex(token);
                if (index < iUnknownCount) {
                    // e.g x * y = 100. current token is y and last element is x.
                    if (!sLastelement.isEmpty() && !(isTokenknown(sLastelement))) {
                        int oldIndex = getUnkownIndex(sLastelement);
                        storeValue(oldIndex, 1.0f, ieqcount);
                        // reset the variables
                        sLastelement = "";
                        sLastoperator = "";
                        ilastCoeff = 0.0f;
                    }
                    // PA : Change Ends
                    // store this token, as this is an unknown element
                    sLastelement = token;
                }
                // M1 * M2, where M2 is known,
                if (sLastoperator.equals("*") && ilastCoeff > 0) {
                    // store the coeeficient of the unknown
                    storeValue(index, ilastCoeff, ieqcount);
                    // reset the variables
                    sLastelement = "";
                    sLastoperator = "";
                    ilastCoeff = 0.0f;
                }
            }
        }
    }
    // e.g 100 = x+y. In this case we have to enter the coeff of y.
    if (!sLastelement.isEmpty()) {
        // This means that co eff is 1
        // store the coeeficient of the unknown
        storeValue(index, 1.0f, ieqcount);
        // reset the variables
        sLastelement = "";
        sLastoperator = "";
        ilastCoeff = 0.0f;
    }
}
