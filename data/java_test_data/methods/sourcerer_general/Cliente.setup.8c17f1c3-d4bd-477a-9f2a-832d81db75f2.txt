@Override
protected void setup() {
    super.setup();
    getContentManager().registerLanguage(new SLCodec());
    getContentManager().registerOntology(DocumentoOntology.getInstance());
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    String args = "";
    try {
        System.out.print("ingrese el precio maximo a pagar:");
        args = br.readLine();
    } catch (IOException e) {
    }
    args = "250";
    if (!args.equals("")) {
        this.precionMaximo = Integer.parseInt(((String) args));
        // Búsqueda del servicio de venta de coches en las páginas amarillas.
        ServiceDescription servicio = new ServiceDescription();
        servicio.setType("Autos");
        servicio.setName("Venta de coches");
        DFAgentDescription descripcion = new DFAgentDescription();
        descripcion.addLanguages("Español");
        descripcion.addServices(servicio);
        try {
            DFAgentDescription[] resultados = DFService.search(this, descripcion);
            if (resultados.length <= 0) {
                System.out.println("No existen ventas de coches.");
            } else {
                System.out.println("Busco coche, hay " + resultados.length + " ofertas...");
                // Creamos el mensaje CFP(Call For Proposal) cumplimentando sus parámetros
                ACLMessage mensajeCFP = new ACLMessage(ACLMessage.CFP);
                for (DFAgentDescription agente : resultados) {
                    mensajeCFP.addReceiver(agente.getName());
                }
                // Protocolo que vamos a utilizar
                mensajeCFP.setProtocol(FIPANames.InteractionProtocol.FIPA_CONTRACT_NET);
                // Indico la ontologia a usar en el mensajete
                mensajeCFP.setOntology(DocumentoOntology.getInstance().getName());
                // Indico el lenguaje
                mensajeCFP.setLanguage(new SLCodec().getName());
                // Indicamos el tiempo que esperaremos por las ofertas.
                mensajeCFP.setReplyByDate(new Date(System.currentTimeMillis() + 15000));
                List frutas = new ArrayList();
                frutas.add("Carloten");
                Proveer provee = new Proveer();
                provee.setKeywords(frutas);
                getContentManager().fillContent(mensajeCFP, provee);
                // Se añade el comportamiento que manejará las ofertas.
                this.addBehaviour(new ManejoOpciones(this, mensajeCFP));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    } else {
    // System.out.println("Debe de introducir el precio maximo que esta dispuesto a pagar (pasado como parametro)");
    }
    System.out.println(this.getAID() + " " + this.getName());
}
