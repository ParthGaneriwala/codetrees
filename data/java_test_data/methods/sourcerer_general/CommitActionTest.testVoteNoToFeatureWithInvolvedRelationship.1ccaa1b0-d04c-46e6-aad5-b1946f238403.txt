@Test
public void testVoteNoToFeatureWithInvolvedRelationship() {
    try {
        // Create a Model
        Model m = new Model();
        m.voteName("My First Domain", true, 1L);
        m = DaoUtil.getModelDao().save(m);
        // Create 2 features and 1 binary relationship
        Feature f1 = new Feature();
        Feature f2 = new Feature();
        f1.vote(true, 11111L);
        f2.vote(true, 2222L);
        f1.voteName("OHOHOHiamleft", true, 11111L, m.getId());
        f2.voteName("HOHOHOiamright", true, 2222L, m.getId());
        f1.setModel(m);
        f2.setModel(m);
        f1 = DaoUtil.getFeatureDao().save(f1);
        f2 = DaoUtil.getFeatureDao().save(f2);
        BinaryRelationship r = new BinaryRelationship();
        r.setType(Resources.BIN_REL_EXCLUDES);
        r.vote(true, 43L);
        r.setFeatures(f1, f2);
        r.setModel(m);
        r = (BinaryRelationship) DaoUtil.getRelationshipDao().save(r);
        // Make and handle a request
        FeatureOperation op = new FeatureOperation();
        op.setName(Resources.OP_CREATE_FEATURE);
        op.setUserid(999L);
        op.setVote(false);
        op.setFeatureId(f1.getId());
        op.setModelId(m.getId());
        CommitRequest req = new CommitRequest();
        req.setId(4L);
        req.setName(Resources.REQ_COMMIT);
        req.setRequesterId(op.getUserid());
        req.setModelId(op.getModelId());
        req.setOperation(op);
        ResponseGroup rg = new ResponseGroup();
        action.execute(req, rg);
        logger.info("------------- VOTE NO TO FEATURE (WITH RELATIONSHIP INVOLVED)-------------");
        showResponse(rg.getBack());
        showResponse(rg.getBroadcast());
        // Query and show
        logger.info(DaoUtil.getRelationshipDao().getById(r.getId(), false));
    } catch (Exception e) {
        logger.error("Couldn't execute.", e);
        assertTrue(false);
    }
}
