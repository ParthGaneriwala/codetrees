void classifyVariables(Rule rule) {
    // Build index data structure into var use in each term in the rule
    termVarTable = new List[rule.bodyLength() + 1];
    termVarTable[0] = termVars(rule.getHeadElement(0));
    totalOccurrences += termVarTable[0].size();
    for (int i = 0; i < rule.bodyLength(); i++) {
        termVarTable[i + 1] = termVars(rule.getBodyElement(i));
        totalOccurrences += termVarTable[i + 1].size();
    }
    // Build the inverted data structure
    for (int i = 0; i < rule.bodyLength() + 1; i++) {
        List varEnts = termVarTable[i];
        for (int j = 0; j < varEnts.size(); j++) {
            Node n = (Node) varEnts.get(j);
            if (n.isVariable()) {
                Node_RuleVariable var = (Node_RuleVariable) n;
                List occurrences = (List) varOccurrence.get(var);
                if (occurrences == null) {
                    occurrences = new ArrayList();
                    varOccurrence.put(var, occurrences);
                }
                occurrences.add(new TermIndex(var, i, j));
            }
        }
    }
    // or only used head+first body goal (but not if used in a builtin)
    for (Iterator enti = varOccurrence.values().iterator(); enti.hasNext(); ) {
        List occurrences = (List) enti.next();
        Node_RuleVariable var = null;
        boolean inFirst = false;
        boolean inLaterBody = false;
        boolean inBuiltin = false;
        for (Iterator oi = occurrences.iterator(); oi.hasNext(); ) {
            TermIndex occurence = (TermIndex) oi.next();
            var = occurence.var;
            int termNumber = occurence.termNumber;
            if (termNumber == 0) {
                inFirst = true;
            } else if (termNumber > 1) {
                inLaterBody = true;
            }
            if (termNumber > 0 && rule.getBodyElement(termNumber - 1) instanceof Functor) {
                inBuiltin = true;
            }
        }
        // } else {
        if (!isDummy(var)) {
            if (inLaterBody || !inFirst) {
                permanentVars.add(var);
            } else {
                tempVars.add(var);
            }
        }
    // }
    }
    if (permanentVars.size() > MAX_PERMANENT_VARS) {
        throw new LPRuleSyntaxException("Rule too complex for current implementation\n" + "Rule clauses are limited to " + MAX_PERMANENT_VARS + " permanent variables\n", rule);
    }
    if (tempVars.size() > MAX_TEMPORARY_VARS) {
        throw new LPRuleSyntaxException("Rule too complex for current implementation\n" + "Rule clauses are limited to " + MAX_TEMPORARY_VARS + " temporary variables\n", rule);
    }
// Builtins in the forward system use the var index to modify variable bindings.
// At one time I though the LP system might need to emulate this but (a) it doesn't and
// (b) renumber vars to make that possible wreaks rule equality which wreaks add/remove in
// hybrid rule sets. This code left in but commented out as a reminder to not go down
// that path again.
// Renumber the vars
// for (int i = 0; i < permanentVars.size(); i++ ) {
// Node_RuleVariable var = (Node_RuleVariable)permanentVars.get(i);
// var.setIndex(i);
// }
// for (int i = 0; i < tempVars.size(); i++ ) {
// Node_RuleVariable var = (Node_RuleVariable)tempVars.get(i);
// var.setIndex(i);
// }
}
