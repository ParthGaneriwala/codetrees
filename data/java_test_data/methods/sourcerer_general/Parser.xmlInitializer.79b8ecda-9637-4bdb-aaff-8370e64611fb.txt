private Node xmlInitializer() throws IOException {
    int tt = ts.getFirstXMLToken();
    if (tt != Token.XML && tt != Token.XMLEND) {
        reportError("msg.syntax");
        return null;
    }
    /* Make a NEW node to append to. */
    Node pnXML = nf.createLeaf(Token.NEW);
    String xml = ts.getString();
    boolean fAnonymous = xml.trim().startsWith("<>");
    Node pn = nf.createName(fAnonymous ? "XMLList" : "XML");
    nf.addChildToBack(pnXML, pn);
    pn = null;
    Node expr;
    for (; ; tt = ts.getNextXMLToken()) {
        switch(tt) {
            case Token.XML:
                xml = ts.getString();
                decompiler.addName(xml);
                mustMatchToken(Token.LC, "msg.syntax");
                decompiler.addToken(Token.LC);
                expr = (peekToken() == Token.RC) ? nf.createString("") : expr(false);
                mustMatchToken(Token.RC, "msg.syntax");
                decompiler.addToken(Token.RC);
                if (pn == null) {
                    pn = nf.createString(xml);
                } else {
                    pn = nf.createBinary(Token.ADD, pn, nf.createString(xml));
                }
                if (ts.isXMLAttribute()) {
                    /* Need to put the result in double quotes */
                    expr = nf.createUnary(Token.ESCXMLATTR, expr);
                    Node prepend = nf.createBinary(Token.ADD, nf.createString("\""), expr);
                    expr = nf.createBinary(Token.ADD, prepend, nf.createString("\""));
                } else {
                    expr = nf.createUnary(Token.ESCXMLTEXT, expr);
                }
                pn = nf.createBinary(Token.ADD, pn, expr);
                break;
            case Token.XMLEND:
                xml = ts.getString();
                decompiler.addName(xml);
                if (pn == null) {
                    pn = nf.createString(xml);
                } else {
                    pn = nf.createBinary(Token.ADD, pn, nf.createString(xml));
                }
                nf.addChildToBack(pnXML, pn);
                return pnXML;
            default:
                reportError("msg.syntax");
                return null;
        }
    }
}
