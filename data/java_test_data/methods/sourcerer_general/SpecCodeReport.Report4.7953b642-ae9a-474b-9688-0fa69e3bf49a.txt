public static List<KitTimesBean> Report4(String field, String type) {
    List<KitTimesBean> ktbList = new ArrayList<KitTimesBean>();
    Map<Long, String> map = MapResultService.getMsHistoryMap();
    List<Map.Entry<Long, String>> infoIds = new ArrayList<Map.Entry<Long, String>>(map.entrySet());
    // 排序
    Collections.sort(infoIds, new Comparator<Map.Entry<Long, String>>() {

        public int compare(Map.Entry<Long, String> o1, Map.Entry<Long, String> o2) {
            return (int) (o1.getKey() - o2.getKey());
        }
    });
    Map<String, Integer> KitMap = new HashMap<String, Integer>();
    int dCount = infoIds.size();
    int lastTimes = dCount - 50;
    for (int i = 0; i < lastTimes; i++) {
        int tCount = dCount - lastTimes + i;
        List<Map.Entry<Long, String>> tempInfoIds = infoIds.subList(0, tCount);
        List<String> CodeList = NoKitTimes(tempInfoIds);
        // Map.Entry<Long, String> v2 =
        // tempInfoIds.get(tempInfoIds.size()-1);
        Map.Entry<Long, String> v = infoIds.get(tCount);
        for (int j = 1; j <= 49; j++) {
            List<String> CCodeList = CodeList.subList(0, j);
            if (CCodeList.contains(v.getValue())) {
                int lstInd = 1;
                if (KitMap.containsKey(String.valueOf(j))) {
                    lstInd = KitMap.remove(String.valueOf(j));
                    int rVal = i - lstInd;
                    if (KitMap.containsKey(j + "_MAX")) {
                        int trVal = KitMap.remove(j + "_MAX");
                        if (rVal < trVal) {
                            rVal = trVal;
                        }
                    }
                    int count = 0;
                    if (KitMap.containsKey(j + "_" + rVal)) {
                        count = KitMap.remove(j + "_" + rVal);
                    }
                    count = count + 1;
                    KitMap.put(j + "_" + rVal, count);
                    KitMap.put(j + "_MAX", rVal);
                }
                KitMap.put(String.valueOf(j), i);
            }
        }
    }
    for (int j = 1; j <= 49; j++) {
        if (KitMap.containsKey(j + "_MAX")) {
            int nkt = KitMap.get(j + "_MAX");
            double tkt = ((double) (nkt));
            ktbList.add(new KitTimesBean(j, nkt, tkt));
        }
    }
    if (field != null && "nonKitTimes".toLowerCase().equals(field.toLowerCase())) {
        if ("desc".toLowerCase().equals(type.toLowerCase())) {
            Collections.sort(ktbList, new Comparator<KitTimesBean>() {

                public int compare(KitTimesBean o1, KitTimesBean o2) {
                    return (int) (o2.getNonKitTimes() - o1.getNonKitTimes());
                }
            });
        } else {
            Collections.sort(ktbList, new Comparator<KitTimesBean>() {

                public int compare(KitTimesBean o1, KitTimesBean o2) {
                    return (int) (o1.getNonKitTimes() - o2.getNonKitTimes());
                }
            });
        }
    } else if (field != null && "totalKitTimes".toLowerCase().equals(field.toLowerCase())) {
        if ("desc".toLowerCase().equals(type.toLowerCase())) {
            Collections.sort(ktbList, new Comparator<KitTimesBean>() {

                public int compare(KitTimesBean o1, KitTimesBean o2) {
                    return (int) (o2.getTotalKitTimes() * 1000 - o1.getTotalKitTimes() * 1000);
                }
            });
        } else {
            Collections.sort(ktbList, new Comparator<KitTimesBean>() {

                public int compare(KitTimesBean o1, KitTimesBean o2) {
                    return (int) (o1.getTotalKitTimes() * 1000 - o2.getTotalKitTimes() * 1000);
                }
            });
        }
    }
    return ktbList;
}
