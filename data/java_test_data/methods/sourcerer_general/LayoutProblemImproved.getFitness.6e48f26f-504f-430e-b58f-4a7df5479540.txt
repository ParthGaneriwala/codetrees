public double getFitness(double... variables) {
    double result = 0;
    double x, y, p;
    int pos;
    LayoutMachine machine1, machine2;
    // Updating the position of all machines
    for (int i = 0; i < qtyMachines; i++) {
        x = variables[((i * 3) + 0)];
        y = variables[((i * 3) + 1)];
        p = variables[((i * 3) + 2)];
        pos = convertPosition(p);
        machine1 = machines.get(i);
        machine1.updatePosition(x, y, pos);
    }
    double x1, x2, y1, y2, w, h;
    int posSaida, posEntrada;
    for (LayoutLink machineLink : machinesLinks) {
        x1 = 0.0;
        x2 = 0.0;
        y1 = 0.0;
        y2 = 0.0;
        machine1 = machines.get(machineLink.getSourceIndex());
        machine2 = machines.get(machineLink.getDestIndex());
        // Get the current position of the machines
        posSaida = (machine1.getPosition() + machineLink.getSourceSide()) % 4;
        posEntrada = (machine2.getPosition() + machineLink.getDestSide()) % 4;
        double value;
        switch(posSaida) {
            case LayoutMachine.TOP:
                x1 = ((machine1.getX2() - machine1.getX1()) / 2.0) + machine1.getX1();
                y1 = machine1.getY1();
                break;
            case LayoutMachine.BOTTOM:
                x1 = ((machine1.getX2() - machine1.getX1()) / 2.0) + machine1.getX1();
                y1 = machine1.getY2();
                break;
            case LayoutMachine.LEFT:
                x1 = machine1.getX1();
                y1 = ((machine1.getY2() - machine1.getY1()) / 2.0) + machine1.getY1();
                break;
            case LayoutMachine.RIGHT:
                x1 = machine1.getX2();
                y1 = ((machine1.getY2() - machine1.getY1()) / 2.0) + machine1.getY1();
                break;
        }
        switch(posEntrada) {
            case LayoutMachine.TOP:
                x2 = ((machine2.getX2() - machine2.getX1()) / 2.0) + machine2.getX1();
                y2 = machine2.getY1();
                break;
            case LayoutMachine.BOTTOM:
                x2 = ((machine2.getX2() - machine2.getX1()) / 2.0) + machine2.getX1();
                y2 = machine2.getY2();
                break;
            case LayoutMachine.LEFT:
                x2 = machine2.getX1();
                y2 = ((machine2.getY2() - machine2.getY1()) / 2.0) + machine2.getY1();
                break;
            case LayoutMachine.RIGHT:
                x2 = machine2.getX2();
                y2 = ((machine2.getY2() - machine2.getY1()) / 2.0) + machine2.getY1();
                break;
        }
        w = Math.abs(x2 - x1);
        h = Math.abs(y2 - y1);
        value = (w * w) + (h * h);
        result += (value * value);
    }
    for (int i = 0; i < qtyMachines; i++) {
        machine1 = machines.get(i);
        double x_ = 0;
        double y_ = 0;
        double area;
        if (machine1.getX1() < leftBounds[((i * 3) + 0)]) {
            x_ = Math.abs(machine1.getX1() - leftBounds[((i * 3) + 0)]);
            y_ = Math.abs(machine1.getY2() - machine1.getY1());
        } else if (machine1.getY1() < leftBounds[((i * 3) + 1)]) {
            x_ = Math.abs(machine1.getX2() - machine1.getX1());
            y_ = Math.abs(machine1.getY1() - leftBounds[((i * 3) + 1)]);
        } else if (machine1.getX2() > rightBounds[((i * 3) + 0)]) {
            x_ = Math.abs(machine1.getX2() - rightBounds[((i * 3) + 0)]);
            y_ = Math.abs(machine1.getY2() - machine1.getY1());
        } else if (machine1.getY2() > rightBounds[((i * 3) + 1)]) {
            x_ = Math.abs(machine1.getX2() - machine1.getX1());
            y_ = Math.abs(machine1.getY2() - rightBounds[((i * 3) + 1)]);
        }
        area = x_ * y_;
        result += Math.pow(area, 7);
        for (int j = (i + 1); j < qtyMachines; j++) {
            machine2 = machines.get(j);
            if (!(machine1.getX1() > machine2.getX2() || machine1.getX2() < machine2.getX1() || machine1.getY1() > machine2.getY2() || machine1.getY2() < machine2.getY1())) {
                x_ = Math.abs(machine2.getX2() - machine1.getX1());
                y_ = Math.abs(machine2.getY2() - machine1.getY1());
                area = x_ * y_;
                result += Math.pow(area, 7);
            }
        }
        for (LayoutMapRestriction mapRestriction : mapRestrictions) {
            if (!(machine1.getX1() > mapRestriction.getX2() || machine1.getX2() < mapRestriction.getX1() || machine1.getY1() > mapRestriction.getY2() || machine1.getY2() < mapRestriction.getY1())) {
                x_ = Math.abs(mapRestriction.getX2() - machine1.getX1());
                y_ = Math.abs(mapRestriction.getY2() - machine1.getY1());
                area = x_ * y_;
                result += Math.pow(area, 7);
            }
        }
    }
    return result;
}
