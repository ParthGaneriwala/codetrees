@SuppressWarnings("unchecked")
public void run() {
    while (true) {
        DatagramPacket dp = pp.getBufferPacket();
        if (dp != null) {
            final DS2Ident di = new DS2Ident(dp.getAddress(), dp.getPort());
            int sType = MessageCheck.checkSType(dp);
            // System.out.println("MessageType "+sType);
            if (sType == peer.tools.MessageType.sType_ConnectMessage1) {
                // System.out.println("sType_ConnectMessage1AAA "+dp.getAddress()+" "+dp.getPort());
                if (ds2Table.containsKey(di)) {
                    DatagramSocket2 ds2 = ds2Table.get(di);
                    if (ds2 != null) {
                    // Connection conn=ds2.conn;
                    // conn.close2();
                    }
                }
                if (!ds2Table.containsKey(di)) {
                    Config.connectThreadPool.execute(new Runnable() {

                        public void run() {
                            try {
                                getConnection2(di.dstIp, di.dstPort);
                            } catch (Exception e) {
                            // e.printStackTrace();
                            }
                        }
                    });
                }
            }
            if (sType == peer.tools.MessageType.sType_ConnectMessage3) {
                DatagramSocket2 ds2 = waitConnectMessage3Table.get(di);
                if (ds2 != null) {
                    Connection conn = ds2.conn;
                    if (!conn.isConnected()) {
                        synchronized (ds2) {
                            ds2.notifyAll();
                        }
                    }
                }
            } else if (sType == peer.tools.MessageType.sType_PingMessage) {
                PingMessage pm = new PingMessage(dp);
                PingMessage2 pm2 = new PingMessage2(pm.getPingSessionId());
                pm2.setDstAddress(dp.getAddress());
                pm2.setDstPort(dp.getPort());
                try {
                    ds.send(pm2.getDatagramPacket());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            } else if (sType == peer.tools.MessageType.sType_PingMessage2) {
                PingMessage2 pm2 = new PingMessage2(dp);
                int pingSessionId = pm2.getPingSessionId();
                SourceNode sn = waitPingTable.get(pingSessionId);
                if (sn != null) {
                    synchronized (sn) {
                        sn.notifyAll();
                    }
                }
            } else if (sType == peer.tools.MessageType.sType_ReversePingMessage3) {
                ReversePingMessage3 rpm3 = new ReversePingMessage3(dp);
                // System.out.println("ReversePing3 From "+dp.getAddress()+" "+dp.getPort()+" "+rpm3.getPingSessionId());
                int pingSessionId = rpm3.getPingSessionId();
                SourceNode sn = waitPingTable.get(pingSessionId);
                if (sn != null) {
                    sn.setOutAddress(dp.getAddress(), dp.getPort());
                    if (sn != null) {
                        synchronized (sn) {
                            sn.notifyAll();
                        }
                    }
                }
            } else if (sType == peer.tools.MessageType.sType_ConnectMessage2) {
                DatagramSocket2 ds2 = ds2Table.get(di);
                if (ds2 != null) {
                    synchronized (ds2) {
                        if (!ds2.conn.isConnected()) {
                            ds2.notifyAll();
                        }
                    }
                }
            }
            DatagramSocket2 ds3 = ds2Table.get(di);
            if (ds3 != null) {
                if (ds3.conn.isConnected()) {
                    synchronized (ds3) {
                        ds3.getBuffer().add(dp);
                        if (ds3.getBuffer().size() != 0) {
                            ds3.notifyAll();
                        }
                    }
                }
            }
        }
    }
}
