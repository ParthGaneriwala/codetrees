public static void addUserProfile(Connection db, User user, ApplicationPrefs prefs) throws SQLException {
    boolean autoCommit = db.getAutoCommit();
    try {
        if (autoCommit) {
            db.setAutoCommit(false);
        }
        // Determine the project features
        ProjectFeatures features = new ProjectFeatures();
        ArrayList<String> modules = new ArrayList<String>();
        modules.add("Profile");
        String enabledModules = prefs.get(ApplicationPrefs.DEFAULT_USER_PROFILE_TABS);
        // }
        if (enabledModules == null || enabledModules.contains("Blog")) {
            modules.add("News=My Blog");
        }
        if (enabledModules == null || enabledModules.contains("Wiki")) {
            modules.add("Wiki=About Me");
        }
        if (enabledModules == null || enabledModules.contains("Classifieds")) {
            modules.add("My Classifieds");
        }
        if (enabledModules == null || enabledModules.contains("Documents")) {
            modules.add("Documents=My Documents");
        }
        if (enabledModules == null || enabledModules.contains("Lists")) {
            modules.add("My Lists");
        }
        if (enabledModules == null || enabledModules.contains("Badges")) {
            modules.add("My Badges");
        }
        if (enabledModules == null || enabledModules.contains("Friends")) {
            modules.add("Team=Friends");
        }
        if (enabledModules == null || enabledModules.contains("Messages")) {
            modules.add("Messages");
        }
        int count = 0;
        for (String modulePreference : modules) {
            String moduleName = null;
            String moduleLabel = null;
            if (modulePreference.indexOf("=") != -1) {
                moduleName = modulePreference.split("=")[0];
                moduleLabel = modulePreference.split("=")[1];
            } else {
                moduleName = modulePreference;
                moduleLabel = modulePreference;
            }
            ObjectUtils.setParam(features, "order" + moduleName, count + 1);
            ObjectUtils.setParam(features, "label" + moduleName, moduleLabel);
            ObjectUtils.setParam(features, "show" + moduleName, true);
        }
        // Determine the category id
        ProjectCategoryList projectCategoryList = new ProjectCategoryList();
        projectCategoryList.setCategoryDescription("People");
        projectCategoryList.buildList(db);
        ProjectCategory people = projectCategoryList.getFromValue("People");
        // Create a user project profile
        Project project = new Project();
        project.setInstanceId(user.getInstanceId());
        project.setGroupId(1);
        project.setApproved(user.getEnabled());
        project.setProfile(true);
        project.setCategoryId(people.getId());
        project.setOwner(user.getId());
        project.setEnteredBy(user.getId());
        project.setModifiedBy(user.getId());
        // Determine how to record the user's name in the profile
        if ("true".equals(prefs.get(ApplicationPrefs.USERS_ARE_ANONYMOUS))) {
            project.setTitle(user.getNameFirstLastInitial());
        } else {
            project.setTitle(user.getNameFirstLast());
        }
        project.setKeywords(user.getNameFirstLast());
        project.setShortDescription("My Profile");
        project.setCity(user.getCity());
        project.setState(user.getState());
        project.setCountry(user.getCountry());
        project.setPostalCode(user.getPostalCode());
        project.setFeatures(features);
        // Access rules will allow this profile to be searched and seen
        project.getFeatures().setUpdateAllowGuests(true);
        project.getFeatures().setAllowGuests(true);
        if ("true".equals(prefs.get(ApplicationPrefs.INFORMATION_IS_SENSITIVE))) {
            project.getFeatures().setAllowGuests(false);
        }
        // A join request can be made which requires approval by the profile owner
        project.getFeatures().setUpdateAllowParticipants(true);
        project.getFeatures().setAllowParticipants(true);
        // Anyone can see the profile page
        project.getFeatures().setUpdateMembershipRequired(true);
        project.getFeatures().setMembershipRequired(true);
        project.insert(db);
        project.getFeatures().setId(project.getId());
        project.getFeatures().update(db);
        updateProfileProjectId(db, user, project);
        // Determine which role level the user is for their own profile
        LookupList roleList = CacheUtils.getLookupList("lookup_project_role");
        int defaultUserLevel = roleList.getIdFromLevel(TeamMember.MANAGER);
        if (!user.getAccessAdmin() && prefs.has(ApplicationPrefs.DEFAULT_USER_PROFILE_ROLE)) {
            int userLevelPreference = roleList.getIdFromValue(prefs.get(ApplicationPrefs.DEFAULT_USER_PROFILE_ROLE));
            if (userLevelPreference > -1) {
                defaultUserLevel = userLevelPreference;
            }
        }
        // Add the user as a member of the profile
        TeamMember member = new TeamMember();
        member.setUserId(user.getId());
        member.setProjectId(project.getId());
        member.setUserLevel(defaultUserLevel);
        member.setStatus(TeamMember.STATUS_ADDED);
        member.setNotification(true);
        member.setEnteredBy(user.getId());
        member.setModifiedBy(user.getId());
        member.insert(db);
        if (autoCommit) {
            db.commit();
        }
        // Success, now that the database is committed, invalidate the cache
        CacheUtils.invalidateValue(Constants.SYSTEM_USER_CACHE, user.getId());
        CacheUtils.invalidateValue(Constants.SYSTEM_PROJECT_CACHE, project.getId());
    } catch (Exception e) {
        LOG.error("addUserProfile", e);
        if (autoCommit) {
            db.rollback();
        }
        throw new SQLException(e.getMessage());
    } finally {
        if (autoCommit) {
            db.setAutoCommit(true);
        }
    }
}
