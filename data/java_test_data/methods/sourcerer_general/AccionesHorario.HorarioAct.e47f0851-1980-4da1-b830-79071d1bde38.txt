public ActionForward HorarioAct(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
    // Salidas
    final String SALIDA_0 = "horario";
    String salida = SALIDA_0;
    Session s = HibernateUtil.getSessionFactory().getCurrentSession();
    Transaction tr = s.beginTransaction();
    try {
        FHorario fFHorario = (FHorario) form;
        Horario horario = (Horario) s.load(Horario.class, new Long(fFHorario.getIdHorario()));
        horario.setDia(fFHorario.getDia());
        horario.setHora(fFHorario.getHora());
        horario.setTipoHora(fFHorario.getTipoHora());
        // Feed for combo listOferta.
        {
            java.util.List<ve.usb.cohesion.runtime.Pair> list = (java.util.List<ve.usb.cohesion.runtime.Pair>) s.createQuery("select new ve.usb.cohesion.runtime.Pair(periodo.nombre, idOferta) " + "from Oferta").list();
            list.add(0, new ve.usb.cohesion.runtime.Pair("Ninguna", 0));
            fFHorario.setListOferta(list);
        }
        String crit = " where oferta1 = '" + horario.getOferta().getIdOferta();
        crit += "' or oferta2 = '" + horario.getOferta().getIdOferta() + "'";
        java.util.List<Colision> listaColision = (java.util.List<Colision>) s.createQuery("from Colision" + crit).list();
        java.util.Iterator<Colision> iterColision = listaColision.iterator();
        while (iterColision.hasNext()) {
            s.delete(iterColision.next());
        }
        detectarColision(s, horario.getOferta(), horario);
        request.getSession().setAttribute("idOferta", fFHorario.getOferta());
        request.getSession().setAttribute("idHorario", horario.getIdHorario());
        tr.commit();
    } catch (Exception ex) {
        tr.rollback();
        throw ex;
    }
    return mapping.findForward(salida);
}
