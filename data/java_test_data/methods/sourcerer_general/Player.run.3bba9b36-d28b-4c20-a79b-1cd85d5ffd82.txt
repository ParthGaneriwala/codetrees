public void run() {
    while (true) {
        if (progressBar != null & !progressMove) {
            int dsDrag2 = playOffset;
            if (lockPaint) {
                dsDrag2 = (int) lockPosition;
            }
            if (dsDrag2 != 0) {
                int d0 = dsDrag2 / 3600;
                int d1 = Math.abs(d0 * 60 - dsDrag2 / 60);
                int d2 = dsDrag2 % 60;
                StringBuffer str2 = new StringBuffer();
                str2.append("[");
                if (d0 < 10) {
                    str2.append(0);
                }
                str2.append(d0);
                str2.append(":");
                if (d1 < 10) {
                    str2.append(0);
                }
                str2.append(d1);
                str2.append(":");
                if (d2 < 10) {
                    str2.append(0);
                }
                str2.append(d2);
                str2.append("]");
                label_1.setText(str2.toString());
                int x2 = (int) ((progressBar.getValue() / (double) progressBar.getMaximum()) * (double) progressBar.getSize().width);
                int x = 0;
                java.awt.FontMetrics metrics = label_1.getFontMetrics(label_1.getFont());
                // �ַ�ĸ�, ֻ�������й�
                int textH = metrics.getHeight();
                // �ַ�Ŀ�
                int textW = metrics.stringWidth(label_1.getText());
                if (x2 + textW > progressBar.getWidth()) {
                    x = x2 - textW;
                // label_1.setHorizontalAlignment(SwingConstants.TRAILING);
                } else {
                    x = x2;
                // label_1.setHorizontalAlignment(SwingConstants.LEFT);
                }
                label_1.setBounds(x, 0, textW, textH);
            // seekto(dsDrag);
            }
        }
        try {
            Thread.sleep(10);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}
