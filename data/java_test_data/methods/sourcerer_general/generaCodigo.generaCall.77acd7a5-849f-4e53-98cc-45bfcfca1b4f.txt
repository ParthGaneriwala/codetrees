private void generaCall(String arg1, String arg2, String res) {
    // REgistro de activacion:
    // Estado del puntero bloque anterior (apunta a su zona de datos)enlace de control
    // Enlace de control
    // Contador de Programa
    // Zona de datos <- iy enlace de control
    String ambitoActual = GestorTSimbolos.getInstancia().getAmbitoActual().getNombreAmbito();
    _pw.println(";Secuencias de llamada");
    _pw.println("			PUSH .iy	;Guardamos el enlace de control del llamante");
    // Si no hay cambio de ambito mantenemos el enlace de acceso
    if (ambitoActual.equals(arg1)) {
        _pw.println("			MOVE #-2[.iy],.R1");
        _pw.println("			PUSH .R1");
    } else {
        // cambiamos de ambito y el enlace de control apunta al enlace de acceso del ambito superior
        _pw.println("			MOVE .iy,.R1");
        _pw.println("			DEC .R1");
        _pw.println("			DEC .R1");
        _pw.println("			PUSH .R1");
    }
    _pw.println("			MOVE .sp,.R1	;Guardamos el puntero de pila para poner los argumentos del procedimiento directamente en su zona de datos");
    _pw.println("			INC .R1		;Reservamos esa posicion para el CP");
    // Obtenemos las posiciones de memoria relativas de los parametros del ambito del procedimiento
    GestorTSimbolos.getInstancia().cambiaAmbito(arg1);
    Vector<String> parametros = new Vector<String>();
    parametros = (Vector<String>) GestorTSimbolos.getInstancia().consulta(arg1, GestorTSimbolos.ATRIBUTO.PARAMETROS);
    Vector<Integer> posiciones = new Vector<Integer>();
    // si son por referencia
    Vector<Boolean> porValor = new Vector<Boolean>();
    for (int i = 0; i < parametros.size(); i++) {
        posiciones.add(this.obtenDespl(parametros.get(i)));
        porValor.add((Boolean) GestorTSimbolos.getInstancia().consulta(parametros.get(i), GestorTSimbolos.ATRIBUTO.VALOR));
    }
    GestorTSimbolos.getInstancia().cambiaAmbito(ambitoActual);
    // volvemos a estar en el ambito
    for (int h = 0; h < this.argumentos.size(); h++) {
        if (isInteger(argumentos.get(h))) {
            _pw.println("			MOVE .iy,.R3");
            _pw.println("			MOVE .R1,.iy");
            _pw.println("			MOVE #" + argumentos.get(h) + ",#" + Integer.toString(posiciones.get(h)) + "[.iy]");
        } else {
            this.generaRegBase(argumentos.get(h));
            _pw.println("			MOVE .iy,.R3");
            _pw.println("			MOVE .R1,.iy");
            _pw.println("			MOVE #" + Integer.toString(obtenDespl(argumentos.get(h))) + "[.ix],#" + Integer.toString(posiciones.get(h)) + "[.iy]");
        }
        _pw.println("			MOVE .R3,.iy");
    }
    _pw.println("			MOVE .R1,.iy	;Colocamos el puntero en la zona de datos del procedimiento");
    _pw.println(";Llamamos al procedimiento");
    _pw.println("			CALL /" + arg1);
    _pw.println(";Secuencias de retorno");
    // Recuperamos los parametros que sean por referencia
    _pw.println("			MOVE .iy,.R1   ;Guardamos el puntero de la pila del procedimiento");
    // El enlace de acceso ya no vale
    _pw.println("			POP .iy");
    // Recuperamos el enlace de control
    _pw.println("			POP .iy");
    for (int j = 0; j < this.argumentos.size(); j++) {
        if (!isInteger(argumentos.get(j))) {
            // Recuperamos los valores que pueden ser por referencia
            if (!porValor.get(j)) {
                // Es por referencia
                this.generaRegBase(argumentos.get(j));
                _pw.println("			MOVE .iy,.R3");
                _pw.println("			MOVE .R1,.iy");
                _pw.println("			MOVE #" + Integer.toString(posiciones.get(j)) + "[.iy],.R2");
                _pw.println("			MOVE .R2,#" + Integer.toString(obtenDespl(argumentos.get(j))) + "[.ix]");
                _pw.println("			MOVE .R3,.iy");
            }
        }
    }
    this.argumentos.clear();
}
