public boolean evaluateBetter(String tree, String[] filesList, int[] nodes) throws Exception {
    for (int i = filesList.length - 1; i >= 0; i--) {
        tree = tree.replaceAll(i + "", getUniqueCode(i));
    }
    for (int i = filesList.length - 1; i >= 0; i--) {
        tree = tree.replaceAll(getUniqueCode(i), filesList[i].substring(filesList[i].lastIndexOf("\\") + 1) + ":1");
    }
    String phyTree = tree;
    String newPhyTree = "";
    for (int i = 0; i < phyTree.length(); i++) {
        char c = phyTree.charAt(i);
        if (c == ')' && i < phyTree.length() - 2) {
            newPhyTree += phyTree.charAt(i) + ":1";
        } else {
            newPhyTree += phyTree.charAt(i);
        }
    }
    tree = newPhyTree;
    FileOutputStream fos = new FileOutputStream("intree");
    fos.write(tree.getBytes());
    fos.close();
    String fitchCmd = "iqpnni_b.bat";
    Runtime runtime = Runtime.getRuntime();
    Process proc = runtime.exec(fitchCmd);
    debugProcess(proc);
    double score = selectBestMLTree("outfile");
    // System.out.println("New score = " + score);
    if (score > bestScore) {
        // System.out.println("Better tree found with score = " + score);
        bestScore = score;
        if (bestScore > absoluteBestScore) {
            absoluteBestScore = bestScore;
            absoluteBestTree = tree;
            absoluteBestNodes = new int[nodes.length];
            for (int i = 0; i < nodes.length; i++) {
                absoluteBestNodes[i] = nodes[i];
            }
        }
        return true;
    }
    return false;
}
