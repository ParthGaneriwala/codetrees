@SuppressWarnings("unchecked")
public Vector<Quadruple<String, String, String, String>> rerankAnswers(String question, Vector<Quadruple<String, String, String, String>> vresp, String lang) {
    SortedSet<com.mallardsoft.mytuple.Pair<Double, Quadruple<String, String, String, String>>> rankedAnswerCandidates = new SortedMultiSet();
    // "no pattern matched" topic)
    for (int k = 0; k < vresp.size() - 1; k++) {
        String regex = Tuple.get4(vresp.get(k));
        double regexmatchLen = regex.length();
        log.debug("///// " + k + " regexmatchLen " + regexmatchLen);
        double tfIdfSimilarity = -1.0;
        if (lang.toUpperCase().equals("EN")) {
            log.debug("@@@ Number of DOCS used in TFIDF.proximity: " + tfIdfEN.numDocuments());
            tfIdfSimilarity = tfIdfEN.proximity(question, Tuple.get3(vresp.get(k)));
        } else if (lang.toUpperCase().equals("DE")) {
            log.debug("@@@ Number of DOCS used in TFIDF.proximity: " + tfIdfDE.numDocuments());
            tfIdfSimilarity = tfIdfDE.proximity(question, Tuple.get3(vresp.get(k)));
        } else if (lang.toUpperCase().equals("IT")) {
            log.debug("@@@ Number of DOCS used in TFIDF.proximity: " + tfIdfIT.numDocuments());
            tfIdfSimilarity = tfIdfIT.proximity(question, Tuple.get3(vresp.get(k)));
        }
        log.debug("///// " + k + " tfIdfSimilarity between:\n\t" + question + " && " + Tuple.get3(vresp.get(k)));
        log.debug("///// " + k + " tfIdfSimilarity " + tfIdfSimilarity);
        double treeSearchRank = k;
        log.debug("///// " + k + " treeSearchRank " + treeSearchRank);
        double nAND = countBooleanAND(regex);
        log.debug("///// " + k + " nAND " + nAND);
        double nOR = countBooleanOR(regex);
        log.debug("///// " + k + " nOR " + nOR);
        double nANDoverOR = nAND / (nOR + 1);
        log.debug("///// " + k + " nANDoverOR " + nANDoverOR);
        int topicID = getMainTopicID(Tuple.get1(vresp.get(k)));
        log.debug("///// " + k + " topicID " + topicID);
        double rankOverTopicID = treeSearchRank / (topicID + 1);
        log.debug("///// " + k + " rankOverTopicID " + rankOverTopicID);
        double treeSearchProminence = getTreeSearchProminence(vresp.size(), k + 1);
        log.debug("///// " + k + " treeSearchProminence " + treeSearchProminence);
        double totalscore = calculateAnswerScore(lang, regexmatchLen, tfIdfSimilarity, treeSearchRank, nANDoverOR, treeSearchProminence, nOR, topicID, rankOverTopicID, nAND);
        log.debug("///// " + k + " totalscore " + totalscore);
        Pair<Double, Quadruple<String, String, String, String>> p = new Pair<Double, Quadruple<String, String, String, String>>(totalscore, vresp.get(k));
        rankedAnswerCandidates.add(p);
    }
    Vector<Quadruple<String, String, String, String>> rerankedAnswers = new Vector<Quadruple<String, String, String, String>>();
    Iterator<Pair<Double, Quadruple<String, String, String, String>>> it = rankedAnswerCandidates.iterator();
    log.debug("@@@@@");
    while (it.hasNext()) {
        Pair<Double, Quadruple<String, String, String, String>> pair = it.next();
        Quadruple<String, String, String, String> quad = com.mallardsoft.mytuple.Tuple.get2(pair);
        log.debug("reranked score: " + com.mallardsoft.mytuple.Pair.get1(pair) + "\t" + Tuple.get1(quad) + "\n");
        rerankedAnswers.add(quad);
    }
    return rerankedAnswers;
}
