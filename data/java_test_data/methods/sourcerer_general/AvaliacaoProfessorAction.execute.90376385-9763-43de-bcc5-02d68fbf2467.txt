@Override
public String execute() throws Exception {
    clearErrorsAndMessages();
    if (consultar != null) {
        consultar = null;
        if (idAvaliado == null) {
            addActionMessage("Uma avalia��o deve ser selecionada.");
            avaliacaoProfessor.setAvalTurma(0d);
            return "view";
        }
        AvaliacaoProfessor t = avaliacaoProfessorFacade.consultar(idAvaliado);
        if (t != null) {
            avaliacaoProfessor = t;
            idPostado = t.getPostado().getId();
        }
        ver = "";
    }
    if (ver != null) {
        ver = null;
        if (idPostado == null || idPostado == 0l) {
            addActionMessage("Um trabalho postado deve ser selecionado.");
            return "view";
        }
        Collection<Avalia> avalias = avaliaFacade.consultarPostado(idPostado);
        soma = 0d;
        if (avalias != null) {
            int quant = 0;
            for (Avalia avaliacaoAluno : avalias) {
                soma = soma + avaliacaoAluno.getMedia();
                quant += 1;
            }
            if (soma.compareTo(0d) != 0 && quant != 0)
                avaliacaoProfessor.setAvalTurma(soma / quant);
            else {
                avaliacaoProfessor.setAvalTurma(0d);
                addActionMessage("Os alunos n�o avaliaram esse trabalho.");
            }
        }
        return "view";
    }
    if (adicionar != null) {
        adicionar = null;
        if (avaliacaoProfessor.getAvalProf() == null) {
            addActionMessage("A nota do professor deve ser informada.");
            return "view";
        }
        if (avaliacaoProfessor.getAvalProf() > 10 || avaliacaoProfessor.getAvalTurma() > 10) {
            addActionMessage("A nota deve ser inferior a 10.");
            return "view";
        }
        calculaAvaliacaoFinal();
        Professor professor = recuperarProfessorAtualizado();
        avaliacaoProfessor.setProfessor(professor);
        TrabalhoPostado trabalhoPostado = trabalhoPostadoFacade.consultar(idPostado);
        avaliacaoProfessor.setPostado(trabalhoPostado);
        avaliacaoProfessorFacade.salvar(avaliacaoProfessor);
        avaliados = avaliacaoProfessorFacade.consultarProfessorTarefa(professor.getId(), idTarefa);
        addActionMessage("A avalia��o foi adicionada corretamente.");
        avaliacaoProfessor = null;
        removeAvaliados();
        return "view";
    }
    if (editar != null) {
        editar = null;
        Professor professor = recuperarProfessorAtualizado();
        if (idAvaliado == null || avaliacaoProfessor == null || avaliacaoProfessor.getAvalProf() == null) {
            addActionMessage("Uma avalia��o deve ser selecionada, consultada e alterada.");
            avaliacaoProfessor.setAvalTurma(0d);
            return "view";
        }
        if (avaliacaoProfessor.getAvalProf() > 10 || avaliacaoProfessor.getAvalTurma() > 10) {
            addActionMessage("A nota deve ser inferior a 10.");
            return "view";
        }
        calculaAvaliacaoFinal();
        AvaliacaoProfessor t = avaliacaoProfessorFacade.consultar(idAvaliado);
        t.setAvalTurma(avaliacaoProfessor.getAvalTurma());
        t.setAvalProf(avaliacaoProfessor.getAvalProf());
        t.setAvalFinal(avaliacaoProfessor.getAvalFinal());
        t.setId(avaliacaoProfessor.getId());
        avaliacaoProfessorFacade.alterar(t);
        avaliados = avaliacaoProfessorFacade.consultarProfessorTarefa(professor.getId(), idTarefa);
        addActionMessage("A avalia��o foi alterada corretamente.");
        return "view";
    }
    if (remover != null) {
        remover = null;
        Professor professor = recuperarProfessorAtualizado();
        AvaliacaoProfessor t = avaliacaoProfessorFacade.consultar(idAvaliado);
        if (t != null) {
            avaliacaoProfessorFacade.remover(t);
        }
        avaliados = avaliacaoProfessorFacade.consultarProfessorTarefa(professor.getId(), idTarefa);
        addActionMessage("A avalia��o foi removida corretamente.");
        removeAvaliados();
        return "view";
    }
    if (menu != null) {
        menu = null;
        return "menu";
    }
    return "menu";
}
