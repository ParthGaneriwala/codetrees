@SuppressWarnings("unused")
private void testArrays(int[] indices, int numElements) {
    double[][] test_q = new double[numElements][numElements];
    double[][] test_p = new double[numElements][numElements];
    double[] test_s = new double[numElements];
    double[] test_pl = new double[numElements];
    double[] test_pr = new double[numElements];
    for (int i = 0; i < numElements; ++i) {
        int idx_i = indices[i];
        for (int j = 0; j < numElements; ++j) {
            int idx_j = indices[j];
            test_p[i][j] = p[idx_i][idx_j];
        }
    }
    for (int i = 0; i < numElements; ++i) {
        for (int j = 0; j < numElements; ++j) {
            test_pl[i] += test_p[i][j];
            test_pr[j] += test_p[i][j];
        }
    }
    for (int i = 0; i < numElements; ++i) {
        for (int j = 0; j < numElements; ++j) {
            test_q[i][j] = test_p[i][j] == 0.0 ? 0.0 : test_p[i][j] * Math.log(test_p[i][j] / (test_pl[i] * test_pr[j]));
        }
    }
    for (int i = 0; i < numElements; ++i) {
        for (int j = 0; j < numElements; ++j) {
            test_s[i] += test_q[j][i] + test_q[i][j];
        }
        test_s[i] -= test_q[i][i];
    }
    // test arrays
    for (int i = 0; i < numElements; ++i) {
        int idx_i = indices[i];
        sameValue(test_pl[i], pl[idx_i]);
        sameValue(test_pr[i], pr[idx_i]);
        for (int j = 0; j < numElements; ++j) {
            int idx_j = indices[j];
            sameValue(test_q[i][j], q[idx_i][idx_j]);
        }
    }
    for (int i = 0; i < numElements; ++i) {
        int idx_i = indices[i];
        sameValue(test_s[i], s[idx_i]);
    }
}
