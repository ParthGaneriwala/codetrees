// $ANTLR start "declaracao_variaveis"
public final gramaticaMM2Parser.declaracao_variaveis_return declaracao_variaveis() throws RecognitionException {
    gramaticaMM2Parser.declaracao_variaveis_return retval = new gramaticaMM2Parser.declaracao_variaveis_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token VAR36 = null;
    gramaticaMM2Parser.lista_variaveis_return lista_variaveis37 = null;
    CommonTree VAR36_tree = null;
    RewriteRuleTokenStream stream_VAR = new RewriteRuleTokenStream(adaptor, "token VAR");
    RewriteRuleSubtreeStream stream_lista_variaveis = new RewriteRuleSubtreeStream(adaptor, "rule lista_variaveis");
    try {
        // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:97:22: ( VAR ( lista_variaveis )+ -> ^( DECLAR_VAR ( lista_variaveis )+ ) )
        // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:97:24: VAR ( lista_variaveis )+
        {
            VAR36 = (Token) match(input, VAR, FOLLOW_VAR_in_declaracao_variaveis787);
            stream_VAR.add(VAR36);
            // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:97:28: ( lista_variaveis )+
            int cnt7 = 0;
            loop7: do {
                int alt7 = 2;
                int LA7_0 = input.LA(1);
                if ((LA7_0 == LETTER)) {
                    alt7 = 1;
                }
                switch(alt7) {
                    case 1:
                        // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:97:28: lista_variaveis
                        {
                            pushFollow(FOLLOW_lista_variaveis_in_declaracao_variaveis789);
                            lista_variaveis37 = lista_variaveis();
                            state._fsp--;
                            stream_lista_variaveis.add(lista_variaveis37.getTree());
                        }
                        break;
                    default:
                        if (cnt7 >= 1)
                            break loop7;
                        EarlyExitException eee = new EarlyExitException(7, input);
                        throw eee;
                }
                cnt7++;
            } while (true);
            // AST REWRITE
            // elements: lista_variaveis
            // token labels:
            // rule labels: retval
            // token list labels:
            // rule list labels:
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", retval != null ? retval.tree : null);
            root_0 = (CommonTree) adaptor.nil();
            // 98:2: -> ^( DECLAR_VAR ( lista_variaveis )+ )
            {
                // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:98:5: ^( DECLAR_VAR ( lista_variaveis )+ )
                {
                    CommonTree root_1 = (CommonTree) adaptor.nil();
                    root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(DECLAR_VAR, "DECLAR_VAR"), root_1);
                    if (!(stream_lista_variaveis.hasNext())) {
                        throw new RewriteEarlyExitException();
                    }
                    while (stream_lista_variaveis.hasNext()) {
                        adaptor.addChild(root_1, stream_lista_variaveis.nextTree());
                    }
                    stream_lista_variaveis.reset();
                    adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
