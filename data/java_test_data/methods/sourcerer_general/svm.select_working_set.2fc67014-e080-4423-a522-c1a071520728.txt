int select_working_set(int[] working_set) {
    // return i,j such that y_i = y_j and
    // i: maximizes -y_i * grad(f)_i, i in I_up(\alpha)
    // j: minimizes the decrease of obj value
    // (if quadratic coefficeint <= 0, replace it with tau)
    // -y_j*grad(f)_j < -y_i*grad(f)_i, j in I_low(\alpha)
    double Gmaxp = -INF;
    double Gmaxp2 = -INF;
    int Gmaxp_idx = -1;
    double Gmaxn = -INF;
    double Gmaxn2 = -INF;
    int Gmaxn_idx = -1;
    int Gmin_idx = -1;
    double obj_diff_min = INF;
    for (int t = 0; t < active_size; t++) if (y[t] == +1) {
        if (!is_upper_bound(t))
            if (-G[t] >= Gmaxp) {
                Gmaxp = -G[t];
                Gmaxp_idx = t;
            }
    } else {
        if (!is_lower_bound(t))
            if (G[t] >= Gmaxn) {
                Gmaxn = G[t];
                Gmaxn_idx = t;
            }
    }
    int ip = Gmaxp_idx;
    int in = Gmaxn_idx;
    float[] Q_ip = null;
    float[] Q_in = null;
    if (// null Q_ip not accessed: Gmaxp=-INF if ip=-1
    ip != -1)
        Q_ip = Q.get_Q(ip, active_size);
    if (in != -1)
        Q_in = Q.get_Q(in, active_size);
    for (int j = 0; j < active_size; j++) {
        if (y[j] == +1) {
            if (!is_lower_bound(j)) {
                double grad_diff = Gmaxp + G[j];
                if (G[j] >= Gmaxp2)
                    Gmaxp2 = G[j];
                if (grad_diff > 0) {
                    double obj_diff;
                    double quad_coef = QD[ip] + QD[j] - 2 * Q_ip[j];
                    if (quad_coef > 0)
                        obj_diff = -(grad_diff * grad_diff) / quad_coef;
                    else
                        obj_diff = -(grad_diff * grad_diff) / 1e-12;
                    if (obj_diff <= obj_diff_min) {
                        Gmin_idx = j;
                        obj_diff_min = obj_diff;
                    }
                }
            }
        } else {
            if (!is_upper_bound(j)) {
                double grad_diff = Gmaxn - G[j];
                if (-G[j] >= Gmaxn2)
                    Gmaxn2 = -G[j];
                if (grad_diff > 0) {
                    double obj_diff;
                    double quad_coef = QD[in] + QD[j] - 2 * Q_in[j];
                    if (quad_coef > 0)
                        obj_diff = -(grad_diff * grad_diff) / quad_coef;
                    else
                        obj_diff = -(grad_diff * grad_diff) / 1e-12;
                    if (obj_diff <= obj_diff_min) {
                        Gmin_idx = j;
                        obj_diff_min = obj_diff;
                    }
                }
            }
        }
    }
    if (Math.max(Gmaxp + Gmaxp2, Gmaxn + Gmaxn2) < eps)
        return 1;
    if (y[Gmin_idx] == +1)
        working_set[0] = Gmaxp_idx;
    else
        working_set[0] = Gmaxn_idx;
    working_set[1] = Gmin_idx;
    return 0;
}
