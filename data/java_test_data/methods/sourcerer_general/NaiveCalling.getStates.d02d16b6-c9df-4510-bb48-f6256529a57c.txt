private static void getStates(ArrayList<Exon> exons, ArrayList<Exon> expectedValues, ArrayList<Exon> stdDeviations) {
    for (int i = 0; i < exons.size(); i++) {
        Exon e = exons.get(i);
        Exon mean = expectedValues.get(i);
        Exon stddev = stdDeviations.get(i);
        double normalPrior = 0.8;
        double[] p = new double[5];
        double p_normal = Normal(e.FPKM, mean.FPKM, stddev.FPKM);
        p[0] = p_normal * normalPrior;
        double p_homodel = Normal(e.FPKM, 0, stddev.FPKM);
        p[1] = p_homodel * (1 - normalPrior) / 4;
        double p_hetdel = Normal(e.FPKM, mean.FPKM * 0.5, stddev.FPKM);
        p[2] = p_hetdel * (1 - normalPrior) / 4;
        double p_amp1 = Normal(e.FPKM, mean.FPKM * 1.5, stddev.FPKM);
        p[3] = p_amp1 * (1 - normalPrior) / 4;
        double p_amp2 = Normal(e.FPKM, mean.FPKM * 2, stddev.FPKM);
        p[4] = p_amp2 * (1 - normalPrior) / 4;
        if (e.posLeft == 288236)
            System.out.println("f");
        // String state[] = {"Homo", "Het", "Normal", "Amp1", "Amp2"};
        double maxprob = Double.NEGATIVE_INFINITY;
        int maxstate = -1;
        for (int s = 0; s < 5; s++) {
            // System.out.println(p[s] + "\t" + e.FPKM + " " + mean.FPKM + " " + stddev.FPKM);
            if (p[s] > maxprob) {
                maxstate = s;
                maxprob = p[s];
            }
        }
        if (p[0] >= maxprob) {
            maxstate = 0;
            maxprob = p[0];
        }
        // System.out.println(maxstate);
        e.state = HiddenMarkovModel.getStateFromIndex(maxstate);
    }
    if (outputFileName.equals("")) {
        for (int i = 0; i < Exons.size(); i++) {
            Exon e = exons.get(i);
            Exon mean = expectedValues.get(i);
            Exon stddev = stdDeviations.get(i);
            System.out.println(e + "\t" + mean.FPKM + "\t" + stddev.FPKM);
        }
    } else {
        Writer output;
        try {
            output = new BufferedWriter(new FileWriter(outputFileName));
            for (int i = 0; i < Exons.size(); i++) {
                Exon e = exons.get(i);
                Exon mean = expectedValues.get(i);
                Exon stddev = stdDeviations.get(i);
                output.write(e + "\t" + mean.FPKM + "\t" + stddev.FPKM + "\n");
            }
            output.close();
        } catch (IOException e1) {
            // TODO Auto-generated catch block
            e1.printStackTrace();
        }
    }
}
