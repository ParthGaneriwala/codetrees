public void testInsertProjectService() throws Exception {
    String title = "API Test Project Service";
    {
        // Add a project to add a service to
        ArrayList<String> meta = new ArrayList<String>();
        meta.add("id");
        meta.add("title");
        api.setTransactionMeta(meta);
        DataRecord record = new DataRecord();
        record.setName("project");
        record.setAction(DataRecord.INSERT);
        record.addField("title", title);
        record.addField("shortDescription", title + " short description");
        record.addField("requestDate", new Date());
        record.addField("enteredBy", USER_ID);
        record.addField("modifiedBy", USER_ID);
        record.addField("groupId", GROUP_ID);
        record.addField("requestedBy", "Project Manager");
        record.addField("showCalendar", "true");
        record.addField("showTickets", "false");
        record.addField("showDiscussion", "true");
        record.addField("showPlan", "true");
        record.addField("showLists", "true");
        record.addField("showDocuments", "true");
        api.save(record);
        processTheTransactions(api, packetContext);
        assertFalse("API reported a transaction error: " + api.getLastResponse(), api.hasError());
    }
    // Use the inserted project Id
    int newProjectId = Integer.parseInt(api.getResponseValue("id"));
    assertTrue(newProjectId > 0);
    // Insert a service to map to
    CustomLookupElement service = new CustomLookupElement();
    service.setTableName("lookup_service");
    service.setUniqueField("code");
    service.addField("description", "some service", Types.VARCHAR);
    service.addField("level", "10", Types.INTEGER);
    service.addField("enabled", "true", Types.BOOLEAN);
    service.insert(db);
    {
        // Map a project to a service using the API
        ArrayList<String> meta = new ArrayList<String>();
        meta.add("id");
        meta.add("description");
        api.setTransactionMeta(meta);
        DataRecord record = new DataRecord();
        record.setName("service");
        record.setAction(DataRecord.INSERT);
        record.addField("projectId", newProjectId);
        record.addField("serviceId", service.getId());
        api.save(record);
        processTheTransactions(api, packetContext);
        assertFalse("API reported a transaction error: " + api.getLastResponse(), api.hasError());
    }
    // Use the inserted mapping Id
    int serviceMapId = Integer.parseInt(api.getResponseValue("id"));
    assertTrue(serviceMapId > 0);
    {
        // Verify the existence of the service mapping
        ServiceList serviceList = new ServiceList();
        serviceList.setProjectId(newProjectId);
        serviceList.buildList(db);
        assertTrue(serviceList.size() == 1);
        int mappingId = serviceList.get(0).getId();
        assertTrue(serviceMapId == mappingId);
    }
    {
        // Find the mapping through the API
        ArrayList<String> meta = new ArrayList<String>();
        meta.add("id");
        meta.add("projectId");
        meta.add("serviceId");
        api.setTransactionMeta(meta);
        DataRecord record = new DataRecord();
        record.setName("serviceList");
        record.setAction(DataRecord.SELECT);
        record.addField("projectId", newProjectId);
        record.addField("serviceId", service.getId());
        api.save(record);
        processTheTransactions(api, packetContext);
        assertFalse("API reported a transaction error: " + api.getLastResponse(), api.hasError());
        assertTrue("Retrieved too many permissions, should have been 1", api.getRecordCount() == 1);
    }
    {
        // Delete the mapping through the API
        DataRecord record = new DataRecord();
        record.setName("service");
        record.setAction(DataRecord.DELETE);
        record.addField("id", serviceMapId);
        api.save(record);
        processTheTransactions(api, packetContext);
        assertFalse("API reported a transaction error: " + api.getLastResponse(), api.hasError());
    }
    {
        // Verify the the service mapping was deleted
        ServiceList serviceList = new ServiceList();
        serviceList.setProjectId(newProjectId);
        serviceList.buildList(db);
        assertTrue(serviceList.size() == 0);
    }
    // Cleanup
    Project thisProject = new Project(db, newProjectId);
    assertTrue(thisProject.delete(db, null));
    service.delete(db);
}
