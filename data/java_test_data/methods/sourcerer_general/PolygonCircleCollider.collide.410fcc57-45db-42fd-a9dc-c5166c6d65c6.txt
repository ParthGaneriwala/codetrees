public int collide(Contact[] contacts, Body bodyA, Body bodyB) {
    Polygon polyA = (Polygon) bodyA.getShape();
    Circle circle = (Circle) bodyB.getShape();
    // TODO: this can be optimized using matrix multiplications and moving
    // only the circle
    Vector2f[] vertsA = polyA.getVertices(bodyA.getPosition(), bodyA.getRotation());
    Vector2f centroidA = new Vector2f(polyA.getCentroid());
    centroidA.add(bodyA.getPosition());
    int[][] collPairs = getCollisionCandidates(vertsA, centroidA, circle.getRadius(), bodyB.getPosition());
    int noContacts = 0;
    for (int i = 0; i < collPairs.length; i++) {
        if (noContacts >= contacts.length)
            return contacts.length;
        Vector2f lineStartA = vertsA[collPairs[i][0]];
        Vector2f lineEndA = vertsA[(collPairs[i][0] + 1) % vertsA.length];
        Line line = new Line(lineStartA, lineEndA);
        float dis2 = line.distanceSquared(bodyB.getPosition());
        float r2 = circle.getRadius() * circle.getRadius();
        if (dis2 < r2) {
            Vector2f pt = new Vector2f();
            line.getClosestPoint(bodyB.getPosition(), pt);
            Vector2f normal = new Vector2f(bodyB.getPosition());
            normal.sub(pt);
            float sep = circle.getRadius() - normal.length();
            normal.normalise();
            contacts[noContacts].setSeparation(-sep);
            contacts[noContacts].setPosition(pt);
            contacts[noContacts].setNormal(normal);
            contacts[noContacts].setFeature(new FeaturePair());
            noContacts++;
        }
    }
    return noContacts;
}
