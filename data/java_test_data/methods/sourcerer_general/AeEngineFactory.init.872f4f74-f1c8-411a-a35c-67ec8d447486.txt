public static void init() throws AeException {
    // create the managers
    IAeProcessManager processManager = createProcessManager();
    IAeQueueManager queueManager = createQueueManager();
    IAeLockManager lockManager = createLockManager();
    IAeAttachmentManager attachmentManager = createAttachmentManager();
    // create the engine admin
    sAdmin = createEngineAdmin();
    // Create the remote debug engine implementation instance.
    sRemoteDebugImpl = createRemoteDebugImpl(getEngineConfig().getMapEntry(IAeEngineConfiguration.REMOTE_DEBUG_ENTRY));
    // Use the managers to create the bpel engine.
    // The class name for the bpel engine can be supplied dynamically, but this
    // factory assumes that it's derived from AeBpelEngine
    sEngine = createNewEngine(queueManager, processManager, lockManager, attachmentManager);
    IAeEngineListener engineListener = createEngineListener();
    if (engineListener != null)
        sEngine.addEngineListener(engineListener);
    // create coordination manager
    sCoordinationManager = createCoordinationManager();
    // set the coordination manager before calling the engine's create() (and hence initialization of all managers)
    sEngine.setCoordinationManager(sCoordinationManager);
    // create tranmission/receive id tracker.
    sTransmissionTracker = createTransmissionTracker();
    sEngine.setTransmissionTracker(sTransmissionTracker);
    // create any custom managers that are defined in the config
    createCustomManagers();
    // create engine and init its managers.
    sEngine.create();
    // Create the partner addressing layer
    AePartnerAddressing addressLayer = new AePartnerAddressing();
    IAePartnerAddressingFactory factory = AePartnerAddressingFactory.newInstance();
    sAddressProvider = factory.getProvider();
    addressLayer.setProvider(sAddressProvider);
    sPartnerAddressing = addressLayer;
    // Create the deployment plan manager
    IAeDeploymentProvider provider = (IAeDeploymentProvider) createConfigObject(IAeEngineConfiguration.DEPLOYMENT_PROVIDER);
    sDeploymentProvider = provider;
    sEngine.setPlanManager(sDeploymentProvider);
    processManager.setPlanManager(sDeploymentProvider);
    // Create the process logger
    sProcessLogger = createProcessLogger();
    sProcessLogger.setEngine(getEngine());
    sCatalog = (IAeCatalog) createConfigObject(IAeEngineConfiguration.CATALOG_ENTRY);
    sDeploymentLoggerFactory = (IAeDeploymentLoggerFactory) createConfigObject(IAeEngineConfiguration.DEPLOYMENT_LOG_ENTRY);
    sDeploymentHandlerFactory = (IAeDeploymentHandlerFactory) createConfigObject(IAeEngineConfiguration.DEPLOYMENT_HANDLER_ENTRY);
    // Create the work manager for per-process work requests.
    sProcessWorkManager = createProcessWorkManager();
    // create urn resolver
    IAeURNResolver urnResolver = createURNResolver();
    sEngine.setURNResolver(urnResolver);
    // create SOAP Message factory
    AeSOAPMessageFactory.setSOAPMessageFactory(createSOAPMessageFactory());
    // create the Security provider
    sSecurityProvider = createSecurityProvider();
}
