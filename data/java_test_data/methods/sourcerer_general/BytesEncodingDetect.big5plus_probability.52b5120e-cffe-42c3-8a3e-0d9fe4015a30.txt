int big5plus_probability(byte[] rawtext) {
    int i, rawtextlen = 0;
    int dbchars = 1, bfchars = 1;
    long bffreq = 0, totalfreq = 1;
    float rangeval = 0, freqval = 0;
    int row, column;
    // Stage 1: Check to see if characters fit into acceptable ranges
    rawtextlen = rawtext.length;
    for (i = 0; i < rawtextlen - 1; i++) {
        // System.err.println(rawtext[i]);
        if (rawtext[i] >= 128) {
        // asciichars++;
        } else {
            dbchars++;
            if (// Original Big5 range
            0xA1 <= rawtext[i] && rawtext[i] <= 0xF9 && ((0x40 <= rawtext[i + 1] && rawtext[i + 1] <= 0x7E) || (0xA1 <= rawtext[i + 1] && rawtext[i + 1] <= 0xFE))) {
                bfchars++;
                totalfreq += 500;
                row = rawtext[i] - 0xA1;
                if (0x40 <= rawtext[i + 1] && rawtext[i + 1] <= 0x7E) {
                    column = rawtext[i + 1] - 0x40;
                } else {
                    column = rawtext[i + 1] - 0x61;
                }
                // System.out.println("original row " + row + " column " + column);
                if (Big5Freq[row][column] != 0) {
                    bffreq += Big5Freq[row][column];
                } else if (3 <= row && row < 37) {
                    bffreq += 200;
                }
            } else if (// Extended Big5 range
            0x81 <= rawtext[i] && rawtext[i] <= 0xFE && ((0x40 <= rawtext[i + 1] && rawtext[i + 1] <= 0x7E) || (0x80 <= rawtext[i + 1] && rawtext[i + 1] <= 0xFE))) {
                bfchars++;
                totalfreq += 500;
                row = rawtext[i] - 0x81;
                if (0x40 <= rawtext[i + 1] && rawtext[i + 1] <= 0x7E) {
                    column = rawtext[i + 1] - 0x40;
                } else {
                    column = rawtext[i + 1] - 0x40;
                }
                // System.out.println("extended row " + row + " column " + column + " rawtext[i] " + rawtext[i]);
                if (Big5PFreq[row][column] != 0) {
                    bffreq += Big5PFreq[row][column];
                }
            }
            i++;
        }
    }
    rangeval = 50 * ((float) bfchars / (float) dbchars);
    freqval = 50 * ((float) bffreq / (float) totalfreq);
    // For regular Big5 files, this would give the same score, so I handicap it slightly
    return (int) (rangeval + freqval) - 1;
}
