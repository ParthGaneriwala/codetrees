protected void initBpelActivities() {
    addActivityReader(TAG_ASSIGN, ACTIVITY_ASSIGN_CLASS);
    getActivityReaders().put(makeDefaultQName(TAG_COMPENSATE), new AeCompensateActivityReader());
    addActivityReader(TAG_EMPTY, ACTIVITY_EMPTY_CLASS);
    addActivityReader(TAG_FLOW, ACTIVITY_FLOW_CLASS);
    addActivityReader(TAG_INVOKE, ACTIVITY_INVOKE_CLASS);
    addActivityReader(TAG_PICK, ACTIVITY_PICK_CLASS);
    addActivityReader(TAG_RECEIVE, ACTIVITY_RECEIVE_CLASS);
    addActivityReader(TAG_REPLY, ACTIVITY_REPLY_CLASS);
    addActivityReader(TAG_SCOPE, ACTIVITY_SCOPE_CLASS);
    addActivityReader(TAG_SEQUENCE, ACTIVITY_SEQUENCE_CLASS);
    addActivityReader(TAG_SWITCH, ACTIVITY_IF_CLASS);
    addActivityReader(TAG_TERMINATE, ACTIVITY_TERMINATE_CLASS);
    addActivityReader(TAG_THROW, ACTIVITY_THROW_CLASS);
    addActivityReader(TAG_WAIT, ACTIVITY_WAIT_CLASS);
    addActivityReader(TAG_WHILE, ACTIVITY_WHILE_CLASS);
    // Our custom BPEL extensions
    addActivityReader(new QName(IAeBPELConstants.ABX_2_0_NAMESPACE_URI, TAG_CONTINUE), ACTIVITY_CONTINUE_CLASS);
    addActivityReader(new QName(IAeBPELConstants.AE_EXTENSION_NAMESPACE_URI_ACTIVITY, TAG_CONTINUE), ACTIVITY_CONTINUE_CLASS);
    addActivityReader(new QName(IAeBPELConstants.ABX_2_0_NAMESPACE_URI, TAG_BREAK), ACTIVITY_BREAK_CLASS);
    addActivityReader(new QName(IAeBPELConstants.AE_EXTENSION_NAMESPACE_URI_ACTIVITY, TAG_BREAK), ACTIVITY_BREAK_CLASS);
    addActivityReader(new QName(IAeBPELConstants.ABX_2_0_NAMESPACE_URI, TAG_FOREACH), ACTIVITY_FOREACH_CLASS);
    addActivityReader(new QName(IAeBPELConstants.AE_EXTENSION_NAMESPACE_URI_ACTIVITY, TAG_FOREACH), ACTIVITY_FOREACH_CLASS);
    addActivityReader(new QName(IAeBPELConstants.ABX_2_0_NAMESPACE_URI, TAG_SUSPEND), ACTIVITY_SUSPEND_CLASS);
    addActivityReader(new QName(IAeBPELConstants.AE_EXTENSION_NAMESPACE_URI_ACTIVITY, TAG_SUSPEND), ACTIVITY_SUSPEND_CLASS);
    // legacy registration for the 2.0 beta that went out w/o a version qualifier in the namespace
    addActivityReader(new QName(IAeBPELConstants.ABX_FUNCTIONS_NAMESPACE_URI, TAG_CONTINUE), ACTIVITY_CONTINUE_CLASS);
    addActivityReader(new QName(IAeBPELConstants.ABX_FUNCTIONS_NAMESPACE_URI, TAG_BREAK), ACTIVITY_BREAK_CLASS);
    addActivityReader(new QName(IAeBPELConstants.ABX_FUNCTIONS_NAMESPACE_URI, TAG_FOREACH), ACTIVITY_FOREACH_CLASS);
    addActivityReader(new QName(IAeBPELConstants.ABX_FUNCTIONS_NAMESPACE_URI, TAG_SUSPEND), ACTIVITY_SUSPEND_CLASS);
}
