private void pruneLeaves(final double[] clusterScores) {
    int leavesToCut = nrLeaves - lm.getMaxClusters();
    BinaryTreeIterator<HistoryTreePayload> iterator;
    Comparator<BinaryTree<HistoryTreePayload>> cmp = new Comparator<BinaryTree<HistoryTreePayload>>() {

        private double getScore(BinaryTree<HistoryTreePayload> item) {
            // return Math.min(item.getLeft().getPayload().lambda, item.getRight().getPayload().lambda);
            return clusterScores[item.getPayload().clusterid];
        }

        public int compare(BinaryTree<HistoryTreePayload> item1, BinaryTree<HistoryTreePayload> item2) {
            double score1 = getScore(item1);
            double score2 = getScore(item2);
            return score1 < score2 ? -1 : (score1 > score2 ? 1 : 0);
        }
    };
    final PriorityQueue<BinaryTree<HistoryTreePayload>> leaves = new PriorityQueue<BinaryTree<HistoryTreePayload>>(nrLeaves, cmp);
    iterator = theTree.getLeafIterator();
    while (iterator.hasNext()) {
        BinaryTree<HistoryTreePayload> node = iterator.nextNode();
        if (!node.getPayload().isBackoff) {
            leaves.add(node);
        }
    }
    System.out.printf("Will cut %d nodes, currently have %d leaves\n", leavesToCut, leaves.size());
    while (leavesToCut > 0) {
        // prune a couple of leaves
        BinaryTree<HistoryTreePayload> node = leaves.remove();
        BinaryTree<HistoryTreePayload> parent = node.getParent();
        if (parent == null) {
            // the node may have already been pruned because of its sibling
            continue;
        }
        BinaryTree<HistoryTreePayload> left = parent.getLeft();
        BinaryTree<HistoryTreePayload> right = parent.getRight();
        double leftCount = clusterScores[left.getPayload().clusterid];
        double rightCount = clusterScores[right.getPayload().clusterid];
        double parentCount = clusterScores[parent.getPayload().clusterid];
        System.out.printf("pruning node [%d]: count=%d, left=%d, right=%d\n", parent.getPayload().clusterid, (long) parentCount, (long) leftCount, (long) rightCount);
        parent.setLeft(null);
        parent.setRight(null);
        parent.getPayload().question = null;
        // disconnect the nodes from the tree, so that we do not attempt to remove the sibling later
        left.setParent(null);
        right.setParent(null);
        --leavesToCut;
        leaves.add(parent);
        int parentId = parent.getPayload().clusterid;
        System.out.printf("new preterminal [%d], count = %d  (%d nodes to go, have %d leaves)\n", parentId, (long) clusterScores[parentId], leavesToCut, leaves.size());
    }
    nrLeaves = lm.getMaxClusters();
}
