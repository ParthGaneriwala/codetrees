@SuppressWarnings("unchecked")
@Override
protected ModelAndView processFormSubmission(HttpServletRequest request, HttpServletResponse response, Object command, BindException errors) throws Exception {
    EventSearchForm eventSearchForm = (EventSearchForm) command;
    // reset zoom and map center overrides, they are only used for get strings
    eventSearchForm.setMapCenterOverride(false);
    eventSearchForm.setZoomOverride(false);
    // case we need to remember the tag
    if (null == DisplayTagHelper.getPageParameterId(request, SearchHelper.DISPLAYTAG_TABLE_ID)) {
        eventSearchForm.setUserTag(null);
    }
    eventSearchForm.setKml(false);
    ModelAndView returnModelAndView;
    if (errors.hasErrors()) {
        if (log.isDebugEnabled()) {
            log.debug("Data binding errors: " + errors.getErrorCount());
        }
        // clear out the search results
        eventSearchForm.setSearchResults(null);
        Map model = errors.getModel();
        model.put(SearchHelper.MODEL_TOTAL_RESULTS, 0);
        returnModelAndView = new ModelAndView(getFormView(), model);
    } else {
        log.debug("No errors -> processing submit");
        if ((eventSearchForm.getIsAddEvent() != null) && (eventSearchForm.getIsAddEvent())) {
            // we are creating a new event
            eventSearchForm.setIsAddEvent(false);
            // todo may want to inject the view here
            returnModelAndView = new ModelAndView(new RedirectView(request.getContextPath() + "/edit/event.htm?add"));
        } else if ((null != eventSearchForm.getEditEventId())) {
            // we are editing an event
            long id = eventSearchForm.getEditEventId();
            // reset
            eventSearchForm.setEditEventId(null);
            // todo may want to inject the view here
            returnModelAndView = new ModelAndView(new RedirectView(request.getContextPath() + "/edit/event.htm?id=" + id));
        } else {
            // if this is a GET search, we must first process the query parameters
            if ((!StringUtils.isEmpty(request.getQueryString()) && (null == DisplayTagHelper.getPageParameterId(request, SearchHelper.DISPLAYTAG_TABLE_ID)))) {
                handleGet(request, eventSearchForm);
            }
            // now search
            Map model = doSearch(request, errors, eventSearchForm);
            // fit the map to the search results if they specified a place name
            if (!StringUtils.isEmpty(eventSearchForm.getWhere())) {
                eventSearchForm.setLimitWithinMapBounds(false);
            }
            if (BooleanUtils.isTrue(eventSearchForm.getKml())) {
                // they just want a kml file
                ByteArrayOutputStream kmlOutputStream = new ByteArrayOutputStream();
                OutputStreamWriter outputStreamWriter = new OutputStreamWriter(kmlOutputStream, "UTF-8");
                List<Event> events = (List<Event>) model.get(SearchHelper.MODEL_EVENTS);
                KmlFormat.toKML(events, outputStreamWriter, "Concharto.com search results", "NOTE: all events are time coded, so you may need to adjust the time slider.", UrlFormat.getBasepath(request));
                // throw away the current model, we aren't rendering and just add the kml.
                // TODO - fix this hack
                model = errors.getModel();
                String utf8Kml = new String(kmlOutputStream.toByteArray(), "UTF8");
                model.put(MODEL_KML, utf8Kml);
                returnModelAndView = new ModelAndView(getKmlView(), model);
            } else {
                // we are rendering to a normal page
                // needed so the displaytag paging can work
                displayTagModelElements(model, request);
                // this is because of a wierd problem in our JSTL where ${pageContex.request.requestURI} yields
                // WEB-INF/jsp/search/eventsearch.jsp instead of the expected /search/eventsearch.htm or
                // /list/event.htm.  So here we have to put it in the model for the jsp to use
                model.put(PARM_REAL_URI, request.getRequestURI());
                returnModelAndView = new ModelAndView(getSuccessView(), model);
            }
        }
    }
    // put the data into the session in case we are leaving to edit, and then want to come back
    WebUtils.setSessionAttribute(request, SearchHelper.SESSION_EVENT_SEARCH_FORM, eventSearchForm);
    return returnModelAndView;
}
