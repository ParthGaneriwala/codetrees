/**
 * Decompresses into a byte-array buffer.
 * @param buf The buffer to fill with decoded data.
 * @return The index in the buffer where the last value was written.
 */
// I've tried to use the pseudo-code in the TIFF specification as a rough
public int decompress(byte[] buf) throws IOException {
    // current index in the buffer
    int index = 0;
    // value of code being processed
    int code;
    // flush out leftovers
    int leftover_len = writeLeftOver(buf);
    // incase there are leftovers from writing the previous leftovers
    if (isLeftOver_) {
        return buf.length;
    } else
        index += leftover_len;
    while (index < buf.length) {
        code = getNextCode();
        if (code == END_OF_INPUT) {
            break;
        }
        if (code == CLEAR_CODE) {
            clearTable();
            code = getNextCode();
            if (code == END_OF_INPUT)
                break;
            // store the code in the table at next index
            buf[index++] = (byte) code;
            // remember code for next pass
            oldCode_ = code;
            oldCodeFirstChar_ = (byte) code;
        } else // Not clear-code
        {
            // if the code is already in the table
            if (table_.contains(code)) {
                int len = writeCode(buf, index, code);
                // add the code to the table
                int code_index = table_.addCharString(oldCode_, buf[index]);
                // bit-size of the input
                if (code_index == limit_)
                    incrementCodeSize();
                // remember code for next pass
                oldCode_ = code;
                oldCodeFirstChar_ = buf[index];
                // if the string was too large to fit into the table
                if (len < 0) {
                    return buf.length;
                } else {
                    index += len;
                }
            } else // not in table yet
            {
                int code_index = table_.addCharString(oldCode_, oldCodeFirstChar_);
                int len = writeCode(buf, index, code_index);
                oldCode_ = code;
                oldCodeFirstChar_ = buf[index];
                if (code_index == limit_)
                    incrementCodeSize();
                if (len < 0) {
                    return buf.length;
                } else
                    index += len;
            }
        }
    }
    return index;
}
