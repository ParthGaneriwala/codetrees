private void build(BeanMapping beanMapping) {
    BeanInfo bean = beanMapping.bean;
    // First build the parent mapping if any
    if (bean.getParent() != null) {
        beanMapping.parent = resolve(bean.getParent());
    }
    // 
    Map<String, PropertyMapping<?, ?>> properties = new HashMap<String, PropertyMapping<?, ?>>();
    for (PropertyInfo<?> property : bean.getProperties().values()) {
        // Determine kind
        Collection<? extends Annotation> annotations = property.getAnnotations(Property.class, Properties.class, OneToOne.class, OneToMany.class, ManyToOne.class, Id.class, Path.class, Name.class, WorkspaceName.class);
        // 
        if (annotations.size() > 1) {
            throw new UnsupportedOperationException();
        }
        // Build the correct mapping or fail
        PropertyMapping<?, ?> mapping = null;
        if (annotations.size() == 1) {
            Annotation annotation = annotations.iterator().next();
            ValueInfo value = property.getValue();
            if (property instanceof SingleValuedPropertyInfo<?>) {
                if (value instanceof SimpleValueInfo) {
                    if (annotation instanceof Property) {
                        Property propertyAnnotation = (Property) annotation;
                        mapping = createProperty(propertyAnnotation, (SingleValuedPropertyInfo<SimpleValueInfo>) property);
                    } else if (annotation instanceof Id) {
                        mapping = createAttribute((SingleValuedPropertyInfo<SimpleValueInfo>) property, NodeAttributeType.ID);
                    } else if (annotation instanceof Path) {
                        mapping = createAttribute((SingleValuedPropertyInfo<SimpleValueInfo>) property, NodeAttributeType.PATH);
                    } else if (annotation instanceof Name) {
                        mapping = createAttribute((SingleValuedPropertyInfo<SimpleValueInfo>) property, NodeAttributeType.NAME);
                    } else if (annotation instanceof WorkspaceName) {
                        mapping = createAttribute((SingleValuedPropertyInfo<SimpleValueInfo>) property, NodeAttributeType.WORKSPACE_NAME);
                    } else {
                        throw new InvalidMappingException(bean.getClassType(), "The property " + property + " is not annotated");
                    }
                } else if (value instanceof BeanValueInfo) {
                    if (annotation instanceof OneToOne) {
                        OneToOne oneToOne = (OneToOne) annotation;
                        switch(oneToOne.type()) {
                            case HIERARCHIC:
                                mapping = createHierarchicOneToOne(beanMapping, oneToOne, (SingleValuedPropertyInfo<BeanValueInfo>) property);
                                break;
                            case EMBEDDED:
                                mapping = createEmbeddedOneToOne((SingleValuedPropertyInfo<BeanValueInfo>) property);
                                break;
                            default:
                                throw new UnsupportedOperationException();
                        }
                    } else if (annotation instanceof ManyToOne) {
                        ManyToOne manyToOne = (ManyToOne) annotation;
                        switch(manyToOne.type()) {
                            case HIERARCHIC:
                                mapping = createHierarchicManyToOne(beanMapping, manyToOne, (SingleValuedPropertyInfo<BeanValueInfo>) property);
                                break;
                            case PATH:
                            case REFERENCE:
                                mapping = createReferenceManyToOne(manyToOne, (SingleValuedPropertyInfo<BeanValueInfo>) property);
                                break;
                            default:
                                throw new UnsupportedOperationException();
                        }
                    } else {
                        throw new UnsupportedOperationException();
                    }
                } else {
                    throw new AssertionError();
                }
            } else if (property instanceof MultiValuedPropertyInfo<?>) {
                if (value instanceof SimpleValueInfo) {
                    if (annotation instanceof Property) {
                        Property propertyAnnotation = (Property) annotation;
                        mapping = createProperty(propertyAnnotation, (MultiValuedPropertyInfo<SimpleValueInfo>) property);
                    } else if (annotation instanceof Properties) {
                        mapping = createProperties((MultiValuedPropertyInfo<? extends ValueInfo>) property);
                    } else {
                        throw new InvalidMappingException(bean.getClassType(), "No annotation found on property " + property);
                    }
                } else if (value instanceof BeanValueInfo) {
                    if (annotation instanceof OneToMany) {
                        OneToMany oneToMany = (OneToMany) annotation;
                        switch(oneToMany.type()) {
                            case HIERARCHIC:
                                mapping = createHierarchicOneToMany(beanMapping, oneToMany, (MultiValuedPropertyInfo<BeanValueInfo>) property);
                                break;
                            case PATH:
                            case REFERENCE:
                                mapping = createReferenceOneToMany(oneToMany, (MultiValuedPropertyInfo<BeanValueInfo>) property);
                                break;
                            default:
                                throw new UnsupportedOperationException();
                        }
                    } else if (annotation instanceof Properties) {
                        mapping = createProperties((MultiValuedPropertyInfo<? extends ValueInfo>) property);
                    } else {
                        throw new InvalidMappingException(bean.getClassType(), "The property " + property + " should be annotated with " + OneToMany.class.getName());
                    }
                } else {
                    throw new AssertionError();
                }
            } else {
                throw new AssertionError();
            }
        }
        // 
        if (mapping != null) {
            // Resolve parent property without any check for now
            PropertyInfo parentProperty = property.getParent();
            if (parentProperty != null) {
                BeanInfo ancestor = parentProperty.getOwner();
                BeanMapping ancestorMapping = resolve(ancestor);
                mapping.parent = ancestorMapping.properties.get(parentProperty.getName());
            }
            // 
            properties.put(mapping.property.getName(), mapping);
        }
    }
    // Wire
    beanMapping.properties.putAll(properties);
    for (PropertyMapping<?, ?> propertyMapping : beanMapping.properties.values()) {
        propertyMapping.owner = beanMapping;
    }
    // Take care of methods
    MethodIntrospector introspector = new MethodIntrospector(HierarchyScope.ALL);
    Set<MethodMapping> methodMappings = new HashSet<MethodMapping>();
    // Create
    for (AnnotationTarget<MethodInfo, Create> annotatedMethods : introspector.resolveMethods(bean.getClassType(), Constants.CREATE)) {
        MethodInfo method = annotatedMethods.getTarget();
        if (!method.isStatic()) {
            List<TypeInfo> parameterTypes = method.getParameterTypes();
            if (parameterTypes.size() < 2) {
                if (parameterTypes.size() == 1) {
                    TypeInfo argTI = parameterTypes.get(0);
                    if (argTI instanceof ClassTypeInfo) {
                        ClassTypeInfo argCTI = (ClassTypeInfo) argTI;
                        if (!argCTI.getName().equals(String.class.getName())) {
                            throw new IllegalStateException();
                        }
                    } else {
                        throw new IllegalStateException();
                    }
                }
                ClassTypeInfo returnTypeInfo = bean.resolveToClass(method.getReturnType());
                if (returnTypeInfo != null) {
                    BeanMapping createBeanMapping = resolve(returnTypeInfo);
                    if (createBeanMapping == null) {
                        throw new InvalidMappingException(bean.getClassType(), "Could not resolve the return type " + returnTypeInfo + " to a chromattic bean among beans " + beans + " and mappings " + beanMappings.values());
                    }
                    methodMappings.add(new CreateMapping(method, createBeanMapping));
                } else {
                    throw new InvalidMappingException(bean.getClassType(), "Invalid " + method + " method return type " + returnTypeInfo);
                }
            } else {
                throw new IllegalStateException();
            }
        }
    }
    // Destroy
    for (AnnotationTarget<MethodInfo, Destroy> annotatedMethods : introspector.resolveMethods(bean.getClassType(), Constants.DESTROY)) {
        MethodInfo method = annotatedMethods.getTarget();
        if (!method.isStatic()) {
            List<TypeInfo> parameterTypes = method.getParameterTypes();
            if (parameterTypes.size() != 0) {
                throw new IllegalStateException();
            }
            if (!(method.getReturnType() instanceof VoidTypeInfo)) {
                throw new IllegalStateException();
            }
            methodMappings.add(new DestroyMapping(method));
        }
    }
    // Find by id
    for (AnnotationTarget<MethodInfo, FindById> annotatedMethods : introspector.resolveMethods(bean.getClassType(), Constants.FIND_BY_ID)) {
        MethodInfo method = annotatedMethods.getTarget();
        if (!method.isStatic()) {
            List<TypeInfo> parameterTypes = method.getParameterTypes();
            if (parameterTypes.size() == 1) {
                TypeInfo argTI = parameterTypes.get(0);
                if (argTI instanceof ClassTypeInfo) {
                    ClassTypeInfo argCTI = (ClassTypeInfo) argTI;
                    if (argCTI.getName().equals(String.class.getName())) {
                        ClassTypeInfo cti = (ClassTypeInfo) bean.getClassType().resolve(method.getReturnType());
                        methodMappings.add(new FindByIdMapping(method, cti));
                    } else {
                        throw new IllegalStateException();
                    }
                } else {
                    throw new IllegalStateException();
                }
            }
        }
    }
    // 
    beanMapping.methods.addAll(methodMappings);
}
