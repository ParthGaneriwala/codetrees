private QBJoinTree genJoinTree(CommonTree joinParseTree) throws SemanticException {
    QBJoinTree joinTree = new QBJoinTree();
    joinCond[] condn = new joinCond[1];
    if (joinParseTree.getToken().getType() == HiveParser.TOK_LEFTOUTERJOIN) {
        joinTree.setNoOuterJoin(false);
        condn[0] = new joinCond(0, 1, joinType.LEFTOUTER);
    } else if (joinParseTree.getToken().getType() == HiveParser.TOK_RIGHTOUTERJOIN) {
        joinTree.setNoOuterJoin(false);
        condn[0] = new joinCond(0, 1, joinType.RIGHTOUTER);
    } else if (joinParseTree.getToken().getType() == HiveParser.TOK_FULLOUTERJOIN) {
        joinTree.setNoOuterJoin(false);
        condn[0] = new joinCond(0, 1, joinType.FULLOUTER);
    } else {
        condn[0] = new joinCond(0, 1, joinType.INNER);
        joinTree.setNoOuterJoin(true);
    }
    joinTree.setJoinCond(condn);
    CommonTree left = (CommonTree) joinParseTree.getChild(0);
    CommonTree right = (CommonTree) joinParseTree.getChild(1);
    if ((left.getToken().getType() == HiveParser.TOK_TABREF) || (left.getToken().getType() == HiveParser.TOK_SUBQUERY)) {
        String table_name = left.getChild(0).getText();
        String alias = left.getChildCount() == 1 ? table_name : left.getChild(1).getText();
        joinTree.setLeftAlias(alias);
        String[] leftAliases = new String[1];
        leftAliases[0] = alias;
        joinTree.setLeftAliases(leftAliases);
        String[] children = new String[2];
        children[0] = alias;
        joinTree.setBaseSrc(children);
    } else if (isJoinToken(left)) {
        QBJoinTree leftTree = genJoinTree(left);
        joinTree.setJoinSrc(leftTree);
        String[] leftChildAliases = leftTree.getLeftAliases();
        String[] leftAliases = new String[leftChildAliases.length + 1];
        for (int i = 0; i < leftChildAliases.length; i++) leftAliases[i] = leftChildAliases[i];
        leftAliases[leftChildAliases.length] = leftTree.getRightAliases()[0];
        joinTree.setLeftAliases(leftAliases);
    } else
        assert (false);
    if ((right.getToken().getType() == HiveParser.TOK_TABREF) || (right.getToken().getType() == HiveParser.TOK_SUBQUERY)) {
        String table_name = right.getChild(0).getText();
        String alias = right.getChildCount() == 1 ? table_name : right.getChild(1).getText();
        String[] rightAliases = new String[1];
        rightAliases[0] = alias;
        joinTree.setRightAliases(rightAliases);
        String[] children = joinTree.getBaseSrc();
        if (children == null)
            children = new String[2];
        children[1] = alias;
        joinTree.setBaseSrc(children);
    } else
        assert false;
    Vector<Vector<CommonTree>> expressions = new Vector<Vector<CommonTree>>();
    expressions.add(new Vector<CommonTree>());
    expressions.add(new Vector<CommonTree>());
    joinTree.setExpressions(expressions);
    CommonTree joinCond = (CommonTree) joinParseTree.getChild(2);
    assert joinCond != null;
    Vector<String> leftSrc = new Vector<String>();
    parseJoinCondition(joinParseTree, joinTree, joinCond, leftSrc);
    if (leftSrc.size() == 1)
        joinTree.setLeftAlias(leftSrc.get(0));
    return joinTree;
}
