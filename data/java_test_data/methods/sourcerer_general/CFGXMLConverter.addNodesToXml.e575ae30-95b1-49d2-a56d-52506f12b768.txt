public void addNodesToXml(Element element, NodeInfoBean nodeInfoBean, boolean startNode, boolean endNode) {
    Element xmlNode = element.addElement("node");
    Node node = nodeInfoBean.getNode();
    xmlNode.addAttribute("name", node.getName());
    xmlNode.addAttribute("id", nodeInfoBean.getId() + "");
    if (startNode) {
        xmlNode.addAttribute("startNode", "y");
    } else if (endNode) {
        xmlNode.addAttribute("endNode", "y");
    }
    ControlFlowNode controlFlowNode = (ControlFlowNode) node;
    Vector defenitions = new Vector();
    Vector srcList;
    // BitSet set = controlFlowNode.getUsesBitVector();
    Vector<AssemblyInstruction> instructions = controlFlowNode.getInstructions();
    for (AssemblyInstruction ins : instructions) {
        if (ins.getDestList() != null && ins.getDestList().size() != 0)
            defenitions = ins.getDestList();
        srcList = ins.getSrcList();
        Element instruction = xmlNode.addElement("instruction");
        instruction.setAttributeValue("ins", ins.getAssemCode(true));
        instruction.addAttribute("type", getInstructionType(ins.getType(), ins));
        // instruction.addAttribute("iv",ins. )
        if (ins.getType() == AssemblyInstruction.CALL) {
            Call call = (Call) ins;
            instruction.addAttribute("fname", call.getFunctionName());
        }
        if (ins.getType() == AssemblyInstruction.CJUMP) {
            // instruction.addAttribute("", arg1)
            CJump cjump = (CJump) ins;
            instruction.addAttribute("ifLabel", cjump.getTrueLabel());
            instruction.addAttribute("falseLabel", cjump.getFalseLabel());
            instruction.addAttribute("relop", getRelationalString(cjump.getRelOp()));
            if (cjump.getImmediateValue() != null)
                instruction.addAttribute("im", cjump.getImmediateValue() + "");
        }
        if (ins.getType() == AssemblyInstruction.JUMP) {
            Jump jump = (Jump) ins;
            // System.out.println("creating jump instruction"+jump.getLabel());
            instruction.addAttribute("label", jump.getLabel());
        }
        if (ins.getType() == AssemblyInstruction.LABEL) {
            LabelInstr label = (LabelInstr) ins;
            instruction.addAttribute("label", label.getLabelStr());
        }
        if (ins.getType() == AssemblyInstruction.INSTRUCTION) {
            Operation operation = (Operation) ins;
            operation.getOperationCode();
            if (operation.getImmediateValue() != null)
                instruction.addAttribute("im", operation.getImmediateValue() + "");
        }
        if (srcList != null)
            for (Object variable : srcList) {
                instruction.addElement("use").addText(variable.toString());
            }
        for (Object defenition : defenitions) {
            instruction.addElement("def").addText(defenition.toString());
        }
    }
    if (nodeInfoBean.getLeftChild() != null) {
        xmlNode.addElement("left_child").addText(nodeInfoBean.getLeftChild() + "");
    }
    if (nodeInfoBean.getRightChild() != null) {
        xmlNode.addElement("right_child").addText(nodeInfoBean.getRightChild() + "");
    }
}
