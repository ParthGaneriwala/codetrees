private void processDeletes() {
    // The kernel is the set of start nodes of deleted links
    Set kernel = new HashSet();
    for (Iterator i = deletesPending.iterator(); i.hasNext(); ) {
        Triple t = (Triple) i.next();
        GraphNode start = (GraphNode) nodeMap.get(t.getSubject());
        kernel.add(start);
    }
    // The predecessor set of kernel
    Set pKernel = new HashSet();
    pKernel.addAll(kernel);
    for (Iterator i = nodeMap.values().iterator(); i.hasNext(); ) {
        GraphNode n = (GraphNode) i.next();
        for (Iterator j = kernel.iterator(); j.hasNext(); ) {
            GraphNode target = (GraphNode) j.next();
            if (n.pathTo(target)) {
                pKernel.add(n);
                break;
            }
        }
    }
    // Cut the pKernel away from the finge of nodes that it connects to
    for (Iterator i = pKernel.iterator(); i.hasNext(); ) {
        GraphNode n = (GraphNode) i.next();
        for (Iterator j = n.succ.iterator(); j.hasNext(); ) {
            GraphNode fringe = (GraphNode) j.next();
            if (!pKernel.contains(fringe)) {
                fringe.pred.remove(n);
            }
        }
        n.succ.clear();
        n.succClosed.clear();
        n.pred.clear();
    }
    // Delete the triples
    originalTriples.removeAll(deletesPending);
    deletesPending.clear();
    // Reinsert the remaining links
    for (Iterator i = originalTriples.iterator(); i.hasNext(); ) {
        Triple t = (Triple) i.next();
        GraphNode n = (GraphNode) nodeMap.get(t.getSubject());
        if (pKernel.contains(n)) {
            addRelation(t);
        }
    }
}
