public static boolean launchEmptyJob(String fileSys, String jobTracker, JobConf conf, int numMaps, int numReduces) throws IOException {
    // create an empty input dir
    final Path inDir = new Path("/testing/empty/input");
    final Path outDir = new Path("/testing/empty/output");
    FileSystem fs = FileSystem.getNamed(fileSys, conf);
    fs.delete(outDir, true);
    if (!fs.mkdirs(inDir)) {
        LOG.warn("Can't create " + inDir);
        return false;
    }
    // use WordCount example
    FileSystem.setDefaultUri(conf, fileSys);
    conf.set("mapred.job.tracker", jobTracker);
    conf.setJobName("empty");
    // use an InputFormat which returns no split
    conf.setInputFormat(EmptyInputFormat.class);
    conf.setOutputKeyClass(Text.class);
    conf.setOutputValueClass(IntWritable.class);
    conf.setMapperClass(IdentityMapper.class);
    conf.setReducerClass(IdentityReducer.class);
    FileInputFormat.setInputPaths(conf, inDir);
    FileOutputFormat.setOutputPath(conf, outDir);
    conf.setNumMapTasks(numMaps);
    conf.setNumReduceTasks(numReduces);
    // run job and wait for completion
    JobClient jc = new JobClient(conf);
    RunningJob runningJob = jc.submitJob(conf);
    while (true) {
        try {
            Thread.sleep(1000);
        } catch (InterruptedException e) {
        }
        if (runningJob.isComplete()) {
            break;
        }
    }
    try {
        assertTrue(runningJob.isComplete());
        assertTrue(runningJob.isSuccessful());
    } catch (NullPointerException npe) {
        // This NPE should no more happens
        fail("A NPE should not have happened.");
    }
    // return job result
    LOG.info("job is complete: " + runningJob.isSuccessful());
    return (runningJob.isSuccessful());
}
