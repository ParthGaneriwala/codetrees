public ActionForward export(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
    if (log.isDebugEnabled()) {
        log.debug("Entering 'export' method");
    }
    ChainForm chainForm = (ChainForm) form;
    ChainManager mgr = (ChainManager) getBean("chainManager");
    ChainFlowManager flowmgr = (ChainFlowManager) getBean("chainFlowManager");
    Chain chain = mgr.getChain(chainForm.getChainId());
    Document doc = DocumentHelper.createDocument();
    Element rootEles = doc.addElement("chains");
    Element rootEle = rootEles.addElement("chain");
    rootEle.addElement("name").addText(chain.getName());
    rootEle.addElement("description").addText(chain.getDescription());
    Element flowsEle = rootEle.addElement("flows");
    Set flows = chain.getChainFlows();
    Iterator flowIte = flows.iterator();
    while (flowIte.hasNext()) {
        ChainFlow flow = (ChainFlow) flowIte.next();
        Element flowEle = flowsEle.addElement("flow");
        this.addElement(flowEle, "flowCode", flow.getFlowCode());
        this.addElement(flowEle, "flowName", flow.getFlowName());
        this.addElement(flowEle, "flowDesc", flow.getFlowDesc());
        this.addElement(flowEle, "flowType", flow.getFlowType());
        this.addElement(flowEle, "nextFlowCode", flow.getNextFlowCode());
        this.addElement(flowEle, "posLeft", Integer.toString(flow.getPosLeft()));
        this.addElement(flowEle, "posTop", Integer.toString(flow.getPosTop()));
        this.addElement(flowEle, "width", Integer.toString(flow.getWidth()));
        this.addElement(flowEle, "height", Integer.toString(flow.getHeight()));
        this.addElement(flowEle, "parseEpcYn", flow.getParseEpcYn());
        this.addElement(flowEle, "epcType", flow.getEpcType());
        this.addElement(flowEle, "skipYn", flow.getSkipYn());
        this.addElement(flowEle, "repeattimes", Integer.toString(flow.getRepeattimes()));
        this.addElement(flowEle, "onError", Integer.toString(flow.getOnError()));
        this.addElement(flowEle, "style", Integer.toString(flow.getStyle()));
        Tag tag = flow.getTag();
        if (tag != null) {
            this.addElement(flowEle, "tag", Long.toString(tag.getTagId()));
        } else {
            this.addElement(flowEle, "tag", null);
        }
        this.addElement(flowEle, "attr1", flow.getAttr1());
        this.addElement(flowEle, "attr2", flow.getAttr2());
        this.addElement(flowEle, "attr3", flow.getAttr3());
        this.addElement(flowEle, "attr4", flow.getAttr4());
        this.addElement(flowEle, "attr5", flow.getAttr5());
        this.addElement(flowEle, "attr6", flow.getAttr6());
        this.addElement(flowEle, "attr7", flow.getAttr7());
        this.addElement(flowEle, "attr8", flow.getAttr8());
        this.addElement(flowEle, "attr9", flow.getAttr9());
        List<String> scripts = flowmgr.getScripts(flow.getFlowId());
        if (scripts != null) {
            Element scriptsEle = flowEle.addElement("scripts");
            Iterator scriptsIte = scripts.iterator();
            while (scriptsIte.hasNext()) {
                String script = (String) scriptsIte.next();
                this.addElement(scriptsEle, "script", script);
            }
        }
    }
    String filename = chain.getName() + ".xml";
    File file = writeXML(doc, "c:\\" + filename);
    BufferedInputStream br = new BufferedInputStream(new FileInputStream(file));
    byte[] buf = new byte[1024];
    int len = 0;
    response.reset();
    response.setContentType("application/octet-stream;charset=UTF-8");
    response.setHeader("Content-Disposition", "attachment; filename=" + filename);
    OutputStream out = response.getOutputStream();
    while ((len = br.read(buf)) > 0) {
        out.write(buf, 0, len);
    }
    br.close();
    out.close();
    file.delete();
    return mapping.findForward("export");
}
