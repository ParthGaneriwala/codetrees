private void createModifierControl(Composite parent) {
    final ElementWizardSettings settings = getSetting();
    this.modifiers = new ArrayList<String>();
    Composite modifierComposite = new Composite(parent, SWT.NONE);
    modifierComposite.setLayout(new GridLayout(1, false));
    modifierComposite.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_FILL | GridData.GRAB_HORIZONTAL));
    Label modifiersLabel = new Label(modifierComposite, SWT.LEFT);
    modifiersLabel.setText("Modifiers:");
    Composite modifiersSubcompoiste = new Composite(modifierComposite, SWT.NONE);
    modifiersSubcompoiste.setLayout(new GridLayout(2, false));
    modifiersSubcompoiste.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_FILL | GridData.GRAB_HORIZONTAL | GridData.VERTICAL_ALIGN_FILL));
    Group ACMGroup = new Group(modifiersSubcompoiste, SWT.NONE);
    ACMGroup.setLayout(new GridLayout(1, false));
    ACMGroup.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_FILL | GridData.GRAB_HORIZONTAL));
    final Button defaultACM = new Button(ACMGroup, SWT.RADIO);
    defaultACM.setText("default");
    defaultACM.setSelection(true);
    final Button publicACM = new Button(ACMGroup, SWT.RADIO);
    publicACM.setText("public");
    final Button protectedACM = new Button(ACMGroup, SWT.RADIO);
    protectedACM.setText("protected");
    final Button privateACM = new Button(ACMGroup, SWT.RADIO);
    privateACM.setText("private");
    publicACM.setEnabled(getSetting().isPublicEnabled());
    defaultACM.setEnabled(getSetting().isDefaultEnabled());
    protectedACM.setEnabled(getSetting().isProtectedEnabled());
    privateACM.setEnabled(getSetting().isPrivateEnabled());
    defaultACM.addSelectionListener(new SelectionListener() {

        public void widgetDefaultSelected(SelectionEvent e) {
        }

        public void widgetSelected(SelectionEvent e) {
            if (defaultACM.getSelection()) {
                accessAuthrity = "default";
            }
        }
    });
    publicACM.addSelectionListener(new SelectionListener() {

        public void widgetDefaultSelected(SelectionEvent e) {
        }

        public void widgetSelected(SelectionEvent e) {
            if (publicACM.getSelection()) {
                // modifiers.add("public");
                // modifiers.remove("protected");
                // modifiers.remove("private");
                accessAuthrity = "public";
            }
        }
    });
    protectedACM.addSelectionListener(new SelectionListener() {

        public void widgetDefaultSelected(SelectionEvent e) {
        }

        public void widgetSelected(SelectionEvent e) {
            if (protectedACM.getSelection()) {
                // modifiers.remove("public");
                // modifiers.add("protected");
                // modifiers.remove("private");
                accessAuthrity = "protected";
            }
        }
    });
    privateACM.addSelectionListener(new SelectionListener() {

        public void widgetDefaultSelected(SelectionEvent e) {
        }

        public void widgetSelected(SelectionEvent e) {
            if (privateACM.getSelection()) {
                // modifiers.remove("public");
                // modifiers.remove("protected");
                // modifiers.add("private");
                accessAuthrity = "private";
            }
        }
    });
    Group modifierGroup = new Group(modifiersSubcompoiste, SWT.NONE);
    modifierGroup.setLayout(new GridLayout(1, false));
    modifierGroup.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_FILL | GridData.GRAB_HORIZONTAL));
    final Button abstractButton = new Button(modifierGroup, SWT.CHECK);
    abstractButton.setText("abstract");
    final Button finalButton = new Button(modifierGroup, SWT.CHECK);
    finalButton.setText("final");
    final Button staticButton = new Button(modifierGroup, SWT.CHECK);
    staticButton.setText("static");
    final Button dummyButton = new Button(modifierGroup, SWT.CHECK);
    dummyButton.setVisible(false);
    abstractButton.setEnabled(settings.isAbstractEnabled());
    finalButton.setEnabled(settings.isFinalEnabled());
    staticButton.setEnabled(settings.isStaticEnabled());
    abstractButton.addSelectionListener(new SelectionListener() {

        public void widgetDefaultSelected(SelectionEvent e) {
        }

        public void widgetSelected(SelectionEvent e) {
            if (abstractButton.getSelection())
                modifiers.add("abstract");
            else
                modifiers.remove("abstract");
        }
    });
    finalButton.addSelectionListener(new SelectionListener() {

        public void widgetDefaultSelected(SelectionEvent e) {
        }

        public void widgetSelected(SelectionEvent e) {
            if (finalButton.getSelection())
                modifiers.add("final");
            else
                modifiers.remove("final");
        }
    });
    staticButton.addSelectionListener(new SelectionListener() {

        public void widgetDefaultSelected(SelectionEvent e) {
        }

        public void widgetSelected(SelectionEvent e) {
            if (staticButton.getSelection())
                modifiers.add("static");
            else
                modifiers.remove("static");
        }
    });
}
