public void get_rgb_ycc_rows(CompressInfo cinfo, int rows_to_read, short[][][] image_data) throws JimiException {
    int r, g, b;
    int col;
    int row;
    int rowSource;
    AdaptiveRasterImage ji = cinfo.ji;
    int rowEnd = row_idx_ + rows_to_read;
    int width = cinfo.image_width;
    int val;
    int[] buf = jiIntBuf_;
    int i;
    // local variable copy of reference
    // small gain :)
    int[] rgb_ycc_tabL = rgb_ycc_tab;
    rowSource = row_idx_;
    for (row = 0; row < rows_to_read; ++row) {
        ji.getChannel(rowSource, buf, 0);
        for (col = 0; col < width; col++) {
            val = buf[col];
            r = (val >> 16) & 0xFF;
            g = (val >> 8) & 0xFF;
            b = val & 0xFF;
            // If the inputs are 0..MAXJSAMPLE, the outputs of these equations
            // must be too; we do not need an explicit range-limiting operation.
            // Hence the value being shifted is never negative, and we don't
            // need the general RIGHT_SHIFT macro.
            // Y
            image_data[0][row][col] = (short) ((rgb_ycc_tabL[r + R_Y_OFF] + rgb_ycc_tabL[g + G_Y_OFF] + rgb_ycc_tabL[b + B_Y_OFF]) >> SCALEBITS);
            // Cb
            image_data[1][row][col] = (short) ((rgb_ycc_tabL[r + R_CB_OFF] + rgb_ycc_tabL[g + G_CB_OFF] + rgb_ycc_tabL[b + B_CB_OFF]) >> SCALEBITS);
            // Cr
            image_data[2][row][col] = (short) ((rgb_ycc_tabL[r + R_CR_OFF] + rgb_ycc_tabL[g + G_CR_OFF] + rgb_ycc_tabL[b + B_CR_OFF]) >> SCALEBITS);
        }
        ++rowSource;
    }
    row_idx_ += rows_to_read;
}
