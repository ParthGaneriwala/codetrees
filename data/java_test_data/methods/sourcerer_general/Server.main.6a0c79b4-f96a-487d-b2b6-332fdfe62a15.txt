public static void main(String[] args) {
    // Take user input.
    // Options:
    // -p <port>
    // -verbose
    // -dir <datadir>
    // -eext <elementext>
    // -wext <worldext>
    // -wfiles <worldfile> [worldfile [worldfile [...]]]
    // -efiles <elementfile> [elementfile [elementfile [...]]]
    int port = Constants.DEF_PORT;
    boolean verbose = false;
    File dataDir = new File(Constants.DEFAULT_DATA_DIR);
    String elementExt = Constants.ELEMENT_LIST_EXTENSION;
    String worldExt = Constants.WORLD_EXTENSION;
    File[] worldFiles = null;
    File[] elementFiles = null;
    boolean gui = true;
    for (int i = 0; i < args.length; i++) {
        if (args[i].equalsIgnoreCase("-v")) {
            verbose = true;
        } else if (args[i].equalsIgnoreCase("-dir")) {
            if (args.length == i) {
                System.err.println("Bad usage of -dir option. Syntax: -dir <directory>");
                System.exit(1);
            }
            dataDir = new File(args[++i]);
        } else if (args[i].equalsIgnoreCase("-eext")) {
            if (args.length == i) {
                System.err.println("Bad usage of -eext option. Syntax: -eext <element file ext>");
                System.exit(1);
            }
            elementExt = args[++i];
        } else if (args[i].equalsIgnoreCase("-wext")) {
            if (args.length == i) {
                System.err.println("Bad usage of -wext option. Syntax: -wext <world file ext>");
                System.exit(1);
            }
            worldExt = args[++i];
        } else if (args[i].equalsIgnoreCase("-wfiles")) {
            if (args.length == i) {
                System.err.println("Bad usage of -wfiles option. Syntax: -wfiles <world file> [world file [world file [...]]]");
                System.exit(1);
            }
            File[] tmpFiles = new File[args.length];
            // We assume that there will be at least _one_ file.
            tmpFiles[0] = new File(args[i + 1]);
            int j = 1;
            while (args.length > i + j + 1 && !args[i + j + 1].startsWith("-")) {
                tmpFiles[j] = new File(args[i + j + 1]);
                j++;
            }
            worldFiles = new File[j];
            System.arraycopy(tmpFiles, 0, worldFiles, 0, j);
            i += j;
        } else if (args[i].equalsIgnoreCase("-efiles")) {
            if (args.length == i) {
                System.err.println("Bad usage of -efiles option. Syntax: -efiles <element file> [element file [element file [...]]]");
                System.exit(1);
            }
            File[] tmpFiles = new File[args.length];
            // We assume that there will be at least _one_ file.
            tmpFiles[0] = new File(args[i + 1]);
            int j = 1;
            while (args.length > i + j + 1 && !args[i + j + 1].startsWith("-")) {
                tmpFiles[j] = new File(args[i + j + 1]);
                j++;
            }
            elementFiles = new File[j];
            System.arraycopy(tmpFiles, 0, elementFiles, 0, j);
            i += j;
        } else if (args[i].equalsIgnoreCase("-p")) {
            if (args.length == i) {
                System.err.println("Bad usage of -p option. Syntax: -p <port>");
                System.exit(1);
            }
            try {
                port = Integer.parseInt(args[++i]);
                if (port > Constants.MAX_PORT || port < Constants.MIN_PORT)
                    port = Constants.DEF_PORT;
            } catch (NumberFormatException nfe) {
                port = Constants.DEF_PORT;
            }
        } else if (args[i].equalsIgnoreCase("-t")) {
            gui = false;
        } else if (args[i].equalsIgnoreCase("-help") || args[i].equalsIgnoreCase("-h")) {
            System.out.println("Syntax: java Server [options]");
            System.out.println("Options:");
            System.out.println(" -h\t\tPrint this help screen");
            System.out.println(" -v\t\tRun in verbose mode");
            System.out.println(" -t\t\tRun in text mode");
            System.out.println(" -p <port>\tRun on port # <port>");
            System.out.println(" -dir <dir>\tLook for data files in directory <dir>");
            System.out.println(" -eext <ext>\tLook in data dir for Element List files that have extension <ext>");
            System.out.println(" -wext <ext>\tLook in data dir for World files that have extension <ext>");
            System.out.println(" -efiles <file> [file [file [...]]]\tOnly look for elements in the files specified");
            System.out.println(" -wfiles <file> [file [file [...]]]\tBuild the world only out of the files specified");
            System.exit(0);
        } else {
            System.err.println("Bad argument (ignoring): " + args[i]);
        }
    }
    Logger myLogger = new Logger(verbose);
    ElementFactory ef;
    WorldFactory wf;
    if (elementFiles != null)
        ef = new ElementFactory(elementFiles, myLogger);
    else
        ef = new ElementFactory(dataDir, elementExt, myLogger);
    if (worldFiles != null)
        wf = new WorldFactory(worldFiles, ef, myLogger);
    else
        wf = new WorldFactory(dataDir, worldExt, ef, myLogger);
    /* The GUI is optional so that it is easier to start the server
		 * from a distance (e.g., using SSH).
		 * - Omer.
		 */
    if (gui) {
        // MAKES THIS A CLOSEABLE WINDOW
        JFrame window = new JFrame();
        window.setVisible(true);
        window.setTitle("CC Game - Server");
        window.setSize(1, 1);
        JPanel panel = new JPanel();
        panel.setLayout(new BorderLayout());
        JPanel canvasFrame = new JPanel();
        panel.add(canvasFrame, BorderLayout.CENTER);
        // menu bar
        MenuBar menuBar;
        Menu menu;
        MenuItem menuItem;
        // Create the menu bar.
        menuBar = new MenuBar();
        menu = new Menu("File");
        menuBar.add(menu);
        menuItem = new MenuItem("PLEASE hit the \"X\" to close the server");
        menu.add(menuItem);
        window.setMenuBar(menuBar);
        // CLOSE THE WINDOW WITH THE "X"
        window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        window.add(panel);
        window.pack();
        window.setSize(225, 50);
        window.setResizable(true);
    }
    // Server s = new Server(wf, ef, myLogger , port);// "s" is never read
    new Server(wf, ef, dataDir, myLogger, port);
}
