public static void testParameterDefinitions(Iterator<File> files) throws ClassNotFoundException {
    List<String> badParameters = new ArrayList<String>();
    List<String> missingParameterNameFields = new ArrayList<String>();
    while (files.hasNext()) {
        File file = files.next();
        String className = file.getPath();
        className = className.substring(14);
        className = className.substring(0, className.length() - 5);
        className = className.replace(File.separatorChar, '.');
        Class<?> cls = Class.forName(className);
        Field[] fields = cls.getDeclaredFields();
        for (Field field : fields) {
            if (ConfigurationParameterFactory.isConfigurationParameterField(field)) {
                org.uimafit.descriptor.ConfigurationParameter annotation = field.getAnnotation(org.uimafit.descriptor.ConfigurationParameter.class);
                String parameterName = annotation.name();
                String expectedName = className + "." + field.getName();
                if (parameterName.equals(org.uimafit.descriptor.ConfigurationParameter.USE_FIELD_NAME))
                    expectedName = org.uimafit.descriptor.ConfigurationParameter.USE_FIELD_NAME;
                if (!expectedName.equals(parameterName)) {
                    badParameters.add("'" + parameterName + "' should be '" + expectedName + "'");
                }
                // change it back to the real parameter
                expectedName = className + "." + field.getName();
                // name
                String fieldName = getParameterNameField(expectedName);
                try {
                    Field fld = cls.getDeclaredField(fieldName);
                    if ((fld.getModifiers() & Modifier.PUBLIC) == 0 || (fld.getModifiers() & Modifier.FINAL) == 0 || (fld.getModifiers() & Modifier.PUBLIC) == 0) {
                        missingParameterNameFields.add(expectedName);
                    } else if (!fld.get(null).equals(expectedName)) {
                        missingParameterNameFields.add(expectedName);
                    }
                } catch (Exception e) {
                    missingParameterNameFields.add(expectedName);
                }
            }
        }
    }
    if (badParameters.size() > 0 || missingParameterNameFields.size() > 0) {
        String message = String.format("%d descriptor parameters with bad names and %d descriptor parameters with no name field. ", badParameters.size(), missingParameterNameFields.size());
        System.err.println(message);
        System.err.println("descriptor parameters with bad names: ");
        for (String badParameter : badParameters) {
            System.err.println(badParameter);
        }
        System.err.println("each configuration parameter should have a public static final String that specifies its name.  The missing fields are: ");
        for (String missingParameterNameField : missingParameterNameFields) {
            System.err.println(missingParameterNameField + " should be named by " + missingParameterNameField.substring(0, missingParameterNameField.lastIndexOf('.')) + "." + getParameterNameField(missingParameterNameField));
        }
        Assert.fail(message);
    }
}
