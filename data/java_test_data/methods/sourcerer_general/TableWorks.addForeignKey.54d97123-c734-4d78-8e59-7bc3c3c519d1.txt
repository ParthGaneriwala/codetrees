void addForeignKey(Constraint c) {
    checkModifyTable();
    checkCreateForeignKey(c);
    Constraint uniqueConstraint = c.core.mainTable.getUniqueConstraintForColumns(c.core.mainCols, c.core.refCols);
    Index mainIndex = uniqueConstraint.getMainIndex();
    uniqueConstraint.checkReferencedRows(session, table);
    boolean isForward = false;
    if (c.core.mainTable.getSchemaName() == table.getSchemaName()) {
        int offset = database.schemaManager.getTableIndex(table);
        if (offset != -1 && offset < database.schemaManager.getTableIndex(c.core.mainTable)) {
            isForward = true;
        }
    } else {
        isForward = true;
    }
    HsqlName indexName = database.nameManager.newAutoName("IDX", table.getSchemaName(), table.getName(), SchemaObject.INDEX);
    Index refIndex = table.createIndexStructure(indexName, c.core.refCols, null, null, false, true, isForward);
    HsqlName mainName = database.nameManager.newAutoName("REF", c.getName().name, table.getSchemaName(), table.getName(), SchemaObject.INDEX);
    c.core.uniqueName = uniqueConstraint.getName();
    c.core.mainName = mainName;
    c.core.mainIndex = mainIndex;
    c.core.refTable = table;
    c.core.refName = c.getName();
    c.core.refIndex = refIndex;
    c.isForward = isForward;
    Table tn = table.moveDefinition(session, table.tableType, null, c, refIndex, -1, 0, emptySet, emptySet);
    moveData(table, tn, -1, 0);
    database.schemaManager.addSchemaObject(c);
    setNewTableInSchema(tn);
    Table mainTable = database.schemaManager.getTable(session, c.core.mainTable.getName().name, c.core.mainTable.getSchemaName().name);
    mainTable.addConstraint(new Constraint(mainName, c));
    updateConstraints(tn, emptySet);
    database.schemaManager.recompileDependentObjects(tn);
    table = tn;
}
