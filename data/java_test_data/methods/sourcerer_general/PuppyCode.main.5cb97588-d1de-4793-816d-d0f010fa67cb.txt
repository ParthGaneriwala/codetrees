public static void main(String[] args) {
    if (true) {
        CRC32 crc32 = new CRC32();
    }
    // VI[] vs = new VI[]{
    // new VI('a' , 30),
    // new VI('b' , 20),
    // new VI('c' , 50),
    // new VI('d' , 10),
    // new VI('e' , 60),
    // new VI('f' , 5),
    // new VI('g' , 7),
    // new VI('h' , 23),
    // new VI('i' , 13),
    // new VI('j' , 24),
    // new VI('k' , 26),
    // new VI('l' , 34),
    // new VI('m' , 11),
    // new VI('n' , 22),
    // };
    Random r = new Random();
    List<VI> v = new ArrayList<VI>();
    for (char c = 'a'; c <= 'z'; c++) {
        int p = r.nextInt(100);
        VI vi = new VI(c, p);
        v.add(vi);
    }
    Heap h = new Heap(new Comparator<Node>() {

        public int compare(PuppyCode.Node o1, PuppyCode.Node o2) {
            // TODO Auto-generated method stub
            return o1.data.p - o2.data.p;
        }
    });
    for (int i = 0; i < v.size(); i++) {
        VI vi = v.get(i);
        Node n = new Node();
        n.data = vi;
        h.insert(n);
    }
    while (h.size() > 1) {
        Node n1 = (Node) h.extract();
        Node n2 = (Node) h.extract();
        ;
        // System.out.printf("%s,%s\n" , n1.data, n2.data);
        VI v3 = new VI('Z', n1.data.p + n2.data.p);
        Node n3 = new Node();
        n3.data = v3;
        h.insert(n3);
        n3.left = n1;
        n3.right = n2;
        n1.parent = n3;
        n2.parent = n3;
    }
    Stack s = new Stack();
    Map<Character, String> cm = new LinkedHashMap<Character, String>();
    t((Node) h.extract(), s, cm);
    for (Character c : cm.keySet()) {
        String code = cm.get(c);
        System.out.printf("�ַ� %c ���� %s \n", c, code);
    }
    String[] vs = cm.values().toArray(new String[0]);
    for (int i = 0; i < vs.length - 1; i++) {
        for (int j = i + 1; j < vs.length; j++) {
            if (vs[i].startsWith(vs[j]) || vs[j].startsWith(vs[i])) {
                System.out.printf("%s collide with %s\n", vs[i], vs[j]);
            }
        }
    }
    for (int i = 0; i < 100000; i++) {
        StringBuffer sb = new StringBuffer();
        int diff = 'z' - 'a';
        for (int j = 0; j < 10000; j++) {
            sb.append((char) ('a' + r.nextInt(diff)));
        }
        String as = sb.toString();
        // System.out.println("ԭʼ�ַ���\n" + as);
        String es = encode(as, cm);
        // System.out.println("����Ϊ\n" + es);
        System.out.println(es.length() * 1.0 / (as.length() * 2 * 8));
        String ds = decode(es, cm);
        if (!as.equals(ds)) {
            throw new IllegalStateException(":(");
        }
    }
    System.out.println("ok");
}
