public void testProjectRatingCRUD() throws SQLException {
    // Insert project so that it can be referred to by the the classified
    Project project = new Project();
    project.setTitle("Project SQL Test");
    project.setShortDescription("Project SQL Test Description");
    project.setRequestDate(new Timestamp(System.currentTimeMillis()));
    project.setEstimatedCloseDate((Timestamp) null);
    project.setRequestedBy("Project SQL Test Requested By");
    project.setRequestedByDept("Project SQL Test Requested By Department");
    project.setBudgetCurrency("USD");
    project.setBudget("10000.75");
    project.setGroupId(GROUP_ID);
    project.setEnteredBy(USER_ID);
    project.setModifiedBy(USER_ID);
    assertNotNull(project);
    boolean projectResult = project.insert(db);
    assertTrue("Project was not inserted", projectResult);
    assertTrue("Inserted project did not have an id", project.getId() > -1);
    // Insert project rating
    ProjectRating projectRating = new ProjectRating();
    projectRating.setTitle("Project Rating Title");
    projectRating.setComment("Project Rating Comment");
    projectRating.setProjectId(project.getId());
    projectRating.setRating(3);
    projectRating.setEnteredBy(USER_ID);
    assertNotNull(projectRating);
    boolean result = ProjectRating.save(db, projectRating);
    assertTrue("Project Rating was not inserted", result);
    assertTrue("Inserted badge did not have an id", projectRating.getId() > -1);
    // Reload the badge, then update
    assertTrue(projectRating.getId() > -1);
    projectRating = new ProjectRating(db, projectRating.getId());
    projectRating.setTitle("Project Rating SQL Test Updated Project Rating");
    result = ProjectRating.save(db, projectRating);
    assertTrue("The Project Rating was not updated by the database", result);
    // Find the previously set ProjectRating
    int ratingId = projectRating.getId();
    projectRating = null;
    ProjectRatingList projectRatingList = new ProjectRatingList();
    projectRatingList.buildList(db);
    assertTrue(projectRatingList.size() > 0);
    Iterator<ProjectRating> i = projectRatingList.iterator();
    while (i.hasNext()) {
        ProjectRating thisProjectRating = (ProjectRating) i.next();
        if (thisProjectRating.getId() == ratingId) {
            projectRating = thisProjectRating;
            break;
        }
    }
    assertNotNull(projectRating);
    // Delete the ProjectRating
    assertNotNull(projectRating);
    ProjectRating.delete(db, projectRating);
    ratingId = projectRating.getId();
    projectRating = null;
    // Try to find the previously deleted ProjectRating
    projectRatingList = new ProjectRatingList();
    projectRatingList.setRatingId(ratingId);
    projectRatingList.buildList(db);
    Iterator<ProjectRating> ij = projectRatingList.iterator();
    while (ij.hasNext()) {
        ProjectRating thisProjectRating = (ProjectRating) ij.next();
        if (thisProjectRating.getId() == ratingId) {
            assertNull("ProjectRating exists when it shouldn't", thisProjectRating);
        }
    }
    // Delete test project
    project.delete(db, (String) null);
}
