private static void parseIDAT(byte[] data, int offset, int length) {
    // System.out.println("parsing idat");
    // ZStream inflateStream = new ZStream();
    // inflateStream.next_in = data;
    // inflateStream.next_in_index = 0;
    byte[] buffer = new byte[(tmpWidth + 1) * tmpHeight];
    // inflateStream.next_out = buffer;
    // inflateStream.next_out_index = 0;
    // inflateStream.inflateInit();
    // int code = JZlib.Z_ERRNO;
    // while(true){
    // inflateStream.avail_in = inflateStream.avail_out = buffer.length;
    // code = inflateStream.inflate(JZlib.Z_FINISH);
    // if(code < 0){
    // throw new IllegalArgumentException("Invalid IDAT");
    // }else if (code == JZlib.Z_STREAM_END){
    // break;
    // }
    // }
    // tmpData = new byte[(int)inflateStream.total_out];
    System.arraycopy(buffer, 0, tmpData, 0, tmpData.length);
    buffer = null;
    // Check value 4 bytes
    if (true)
        return;
    int index = 0;
    int CMF = data[index++] & 0xff;
    // bits [0-3]
    int CM = CMF & 0xf;
    // bits[7-4]
    int CINFO = (CMF & 0xf0) >>> 4;
    int lz77WindowSize = CINFO + 8;
    switch(CM) {
        case COMPRESSION_METHOD_DEFLATE:
            System.out.println("deflate compression detected");
            if (lz77WindowSize > 15) {
                throw new IllegalStateException("Invalid LZ77 window size :" + lz77WindowSize);
            }
            System.out.println("LZ77 window size :" + (CINFO + 8));
            break;
        case COMPRESSION_METHOD_RESERVED:
            System.out.println("reserved compression detected");
            break;
        default:
            System.out.println("unrecognized compression detected :" + CM);
            break;
    }
    int FLG = data[index++] & 0xff;
    int CMF_FLG = (CMF << 8 | FLG);
    if (CMF_FLG % 31 != 0) {
        throw new IllegalStateException("Illegal CMF and FLG check value");
    }
    System.out.println("Combination of CMF and FLG :" + CMF_FLG);
    int FCHECK = data[1] & 0x1f;
    int FDICT = (data[1] & 0x20) >>> 5;
    int FLEVEL = (data[1] & 0xc0) >>> 6;
    System.out.println("FLG :" + FLG + " , FCHECK :" + FCHECK + " , FDICT :" + FDICT + " , FLEVEL :" + FLEVEL);
    if (FDICT == 1) {
        System.out.println("DICT is used , skip 4 bytes");
        index += 4;
    }
    if (CM == COMPRESSION_METHOD_DEFLATE) {
        System.out.println("deflate compression level :" + DEFLATE_COMPRESSION_LEVEL_DESCRIPTION[FLEVEL]);
    }
    // now we can begin to decode the DEFLATE format data
    boolean lastBlock = false;
    do {
        System.out.println("current operation byte : " + Integer.toBinaryString(data[index] & 0xff));
        int BFINAL = (data[index] & 0x1);
        if (BFINAL == 1) {
            // last block
            System.out.println("Last block found");
            lastBlock = true;
        }
        int BTYPE = ((data[index] & 0x6) >>> 1);
        switch(BTYPE) {
            case COMPRESSION_NONE:
                System.out.println("No compression block");
                break;
            case COMPRESSION_FIXED_HUFFMAN:
                System.out.println("Compression with fixed huffman");
                // now decode the literal/length value
                break;
            case COMPRESSION_DYNAMIC_HUFFMAN:
                System.out.println("Compression with dynamic huffman");
                break;
            case COMPRESSION_RESERVED:
                throw new IllegalStateException("Reserved compression type detected");
            default:
                throw new IllegalStateException("Unrecognized compression type : " + BTYPE);
        }
    } while (!lastBlock);
}
