/*	public createDonkeyPacket () {
	}
	*/
public static donkeyPacket fileOffer(donkeyShares ds) {
    int totalFiles = ds.numFiles();
    if (totalFiles < 1)
        return null;
    donkeyPacket myDp = new donkeyPacket();
    LinkedList buffers = new LinkedList();
    Vector sharedFiles = ds.getSharedFiles();
    myDp.setCommandId(convert.intToByte(0x15));
    byte[] tmp = new byte[4];
    tmp = convert.intToDWORD(totalFiles);
    buffers.add(tmp);
    for (int i = 0; i < totalFiles; i++) {
        donkeySharedFile actFile = (donkeySharedFile) sharedFiles.get(i);
        long fileSize = actFile.getSize();
        String fileName = actFile.toString();
        if (actFile.isHashed()) {
            byte[] hash = actFile.getHash();
            tmp = new byte[40 + fileName.length()];
            System.arraycopy(hash, 0, tmp, 0, 16);
            int[] iarray = { 0, 0, 0, 0, 0, 0, 0x2, 0, 0, 0, 0x2, 0x1, 0x0, 0x1 };
            System.arraycopy(convert.intArrayToBytes(iarray), 0, tmp, 16, iarray.length);
            System.arraycopy(convert.intToUShort(fileName.length()), 0, tmp, 30, 2);
            System.arraycopy(fileName.getBytes(), 0, tmp, 32, fileName.length());
            int[] iarray2 = { 0x3, 0x1, 0x0, 0x2 };
            System.arraycopy(convert.intArrayToBytes(iarray2), 0, tmp, 32 + fileName.length(), iarray2.length);
            System.arraycopy(convert.intToDWORD((int) fileSize), 0, tmp, 36 + fileName.length(), 4);
            buffers.add(tmp);
        }
    }
    int totalLength = 0;
    for (int i = 0; i < buffers.size(); i++) {
        byte[] tmpbyte = (byte[]) buffers.get(i);
        totalLength += tmpbyte.length;
    }
    byte[] packetBody = new byte[totalLength];
    int pBodyPos = 0;
    for (int i = 0; i < buffers.size(); i++) {
        tmp = (byte[]) buffers.get(i);
        System.arraycopy(tmp, 0, packetBody, pBodyPos, tmp.length);
        pBodyPos += tmp.length;
    }
    myDp.setBody(packetBody);
    return (myDp);
}
