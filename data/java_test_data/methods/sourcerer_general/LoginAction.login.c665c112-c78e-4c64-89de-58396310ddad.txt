public ActionForward login(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
    ActionMessages errors = new ActionMessages();
    PersistenceContext perstCtx = factory.createPersistenceContext();
    MessageResources msg = Resources.getMessageResources(request);
    LoginForm frm = (LoginForm) form;
    try {
        perstCtx.beginTrans();
        // valida o campo usu�rio
        if (frm.getLogin().trim().equals("")) {
            errors.add(ActionErrors.GLOBAL_MESSAGE, new ActionMessage("erro.validacao.obrigatorio", msg.getMessage("txt.login.usuario")));
        }
        // valida o campo senha
        if (frm.getSenha().trim().equals("")) {
            errors.add(ActionErrors.GLOBAL_MESSAGE, new ActionMessage("erro.validacao.obrigatorio", msg.getMessage("txt.login.senha")));
        }
        if (errors.isEmpty()) {
            UsuarioDAO usuarioDAO = new UsuarioDAO(perstCtx);
            // busca o usu�rio
            Usuario usuario = usuarioDAO.buscarPorNomeSenha(frm.getLogin(), Criptografia.criptografar(frm.getSenha()));
            if (usuario != null) {
                // adiciona o usu�rio na sess�o
                HttpSession session = request.getSession(true);
                session.setAttribute(SESSION_ATTRIBUTE_USER, usuario);
                // adiciona o menu
                PaginaBO pagBO = new PaginaBO(perstCtx);
                Map<Pagina, Set<Pagina>> menus = pagBO.buscarMenusPorUsuario(usuario, ((BasicForm) form).getMenuId());
                session.setAttribute(SESSION_ATTRIBUTE_MENU, menus);
                // processamento inicial padr�o
                ContasFacade transBO = new ContasFacade(perstCtx);
                transBO.processarItensPendentes();
                perstCtx.commit();
            } else {
                // invalid user
                errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("erro.usuario.invalido"));
            }
        }
        saveErrors(request, errors);
    } catch (Throwable e) {
        e.printStackTrace();
    } finally {
        perstCtx.close();
    }
    return mapping.findForward(FORWARD_INDEX);
}
