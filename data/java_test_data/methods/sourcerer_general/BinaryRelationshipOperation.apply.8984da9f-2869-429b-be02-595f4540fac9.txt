public List<Operation> apply() throws BeanPersistenceException, InvalidOperationException, StaleDataException {
    if (!valid()) {
        throw new InvalidOperationException("Invalid op fields.");
    }
    List<Operation> result = null;
    if (relationshipId == null) {
        if (vote.equals(false)) {
            throw new InvalidOperationException("Invalid vote: NO to inexisted relationship.");
        }
        // Get the model
        Model model = DaoUtil.getModelDao().getById(modelId, false);
        if (model == null) {
            throw new InvalidOperationException("Invalid model ID: " + modelId);
        }
        // See if the relationship has already existed.
        boolean alreadyExisted = false;
        BinaryRelationship relation = new BinaryRelationship(userid);
        relation.setType(type);
        relation.setLeftFeatureId(leftFeatureId);
        relation.setRightFeatureId(rightFeatureId);
        List sameRelations = DaoUtil.getRelationshipDao().getByExample(modelId, relation);
        if (sameRelations != null) {
            alreadyExisted = true;
            relation = (BinaryRelationship) sameRelations.get(0);
        } else {
            // CREATE A NEW BINARY RELATIONSHIP HERE
            relation.setFeatures(DaoUtil.getFeatureDao().getById(leftFeatureId, false), DaoUtil.getFeatureDao().getById(rightFeatureId, false));
        }
        if (alreadyExisted) {
            relation.vote(true, userid, modelId);
        } else {
            relation.vote(true, userid);
            model.addRelationship(relation);
        }
        relation = (BinaryRelationship) DaoUtil.getRelationshipDao().save(relation);
        DaoUtil.getModelDao().save(model);
        relationshipId = relation.getId();
        if (!alreadyExisted) {
            logger.info(LogUtil.logOp(userid, LogUtil.OP_CREATE, LogUtil.relationToStr(LogUtil.OBJ_RELATION, modelId, relationshipId, relation)));
        }
        result = ImplicitVoteOperation.makeOperation(this, relation).apply();
    } else {
        Relationship relation = DaoUtil.getRelationshipDao().getById(relationshipId, false);
        if (relation == null) {
            throw new InvalidOperationException("No relationship has ID: " + relationshipId);
        }
        relation.vote(vote, userid, modelId);
        result = ImplicitVoteOperation.makeOperation(this, relation).apply();
        if (relation.getSupporterNum() <= 0) {
            DaoUtil.getRelationshipDao().delete(relation);
            logger.info(LogUtil.logOp(userid, LogUtil.OP_REMOVE, LogUtil.relationToStr(LogUtil.OBJ_RELATION, modelId, relationshipId, relation)));
        } else {
            DaoUtil.getRelationshipDao().save(relation);
        }
    }
    if (result == null) {
        result = new ArrayList<Operation>();
    }
    result.add(this.clone());
    return result;
}
