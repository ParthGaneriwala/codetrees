public boolean process(TransactionItem transactionItem, Connection db) throws Exception {
    int projectId = -1;
    int userId = -1;
    int userLevel = -1;
    if (StringUtils.hasText(projectProfileId)) {
        Project project = ProjectUtils.loadProject(projectProfileId);
        if (project != null) {
            projectId = project.getId();
        }
    }
    if (StringUtils.hasText(userProfileId)) {
        Project project = ProjectUtils.loadProject(userProfileId);
        if (project.getProfile()) {
            User user = UserUtils.loadUser(project.getOwner());
            if (user != null) {
                userId = user.getId();
            }
        }
    }
    if (projectId == -1) {
        throw new SQLException("ProjectId was not specified");
    }
    if (userId == -1) {
        throw new SQLException("UserId was not specified");
    }
    if ("Claimed".equals(claimStatus)) {
        // set the userlevel as 'manager' role
        LookupList roleList = CacheUtils.getLookupList("lookup_project_role");
        userLevel = roleList.getIdFromLevel(TeamMember.MANAGER);
        PreparedStatement pst = db.prepareStatement("UPDATE project_team " + "SET " + "tools = ?, status = ?, userlevel = ?, " + "modifiedby = ?, modified = CURRENT_TIMESTAMP " + "WHERE project_id = ? " + "AND user_id = ? ");
        int i = 0;
        pst.setBoolean(++i, true);
        pst.setInt(++i, TeamMember.STATUS_ADDED);
        pst.setInt(++i, userLevel);
        pst.setInt(++i, modifiedBy);
        pst.setInt(++i, projectId);
        pst.setInt(++i, userId);
        pst.executeUpdate();
        pst.close();
        // Remove owner field from the project
        Project project = ProjectUtils.loadProject(projectId);
        project.setOwner(userId);
        project.update(db);
    } else if ("Denied".equals(claimStatus)) {
        // Remove owner field from the project
        Project project = ProjectUtils.loadProject(projectId);
        if (project.getOwner() == userId) {
            project.setOwner(-1);
            project.update(db);
        }
    }
    CacheUtils.invalidateValue(Constants.SYSTEM_PROJECT_CACHE, projectId);
    return true;
}
