public RuleResult applyTo(IModelElement object) {
    setComponent(object);
    RuleResult result = null;
    String strmodel = null;
    boolean bStatus = true;
    AbstractTagComponent component = (AbstractTagComponent) object;
    int nChildrenSize = 0;
    setComponent(component);
    if (!(object instanceof OverallTagComponent)) {
        // get the overall component
        OverallTagComponent tmpParent = (OverallTagComponent) ((IModelElement) component.getParent().getParent().getChildren().get(0));
        component = (AbstractTagComponent) tmpParent;
        nChildrenSize = component.getParent().getChildren().size();
    } else {
        strmodel = component.getLabel();
        nChildrenSize = component.getParent().getChildren().size();
    }
    if (nChildrenSize > 1) {
        // call with overalltag for the first time
        result = ComponentCheck(component);
        Iterator<ITagComponent> iterator = (Iterator<ITagComponent>) (component.getParent().getChildren().iterator());
        // reach to Tag Component List
        iterator.next();
        // reach to first sub component
        TagComponentList subComponent = (TagComponentList) iterator.next();
        // get new iterator for Component List
        Iterator<IGeneralTagComponent> Listiterator = subComponent.getChildren().iterator();
        ITagComponent childComponent = null;
        while (// && (result instanceof IRule.Success))
        Listiterator.hasNext() && null != result) {
            childComponent = (ITagComponent) Listiterator.next();
            if (childComponent.isInitial())
                break;
            setComponent(childComponent);
            result = ComponentCheck(childComponent);
            if (!(result instanceof IRule.Success)) {
                bStatus = false;
            }
            strmodel = childComponent.getLabel();
            // Set proper Annotation for each Child component
            setAnnotation(result, strmodel);
        // result = PostParseRules.tagComponentUnitNotSameAsOverAll.applyTo(childComponent);
        // result =  applyTo(childComponent);
        // setModelError(ruleResult.getSource(), new Annotation(ruleResult.getSource(), ProcessModelConstants.DESC_ERROR, ruleResult.getMessage()));
        }
        // This check should be performed if all the Units are Ok
        if (bStatus) {
            float iTotalChildQty = 0;
            boolean childIsUnknown = false;
            // int iTotalChildQty = 0;
            // reset the iterator
            Listiterator = subComponent.getChildren().iterator();
            childComponent = null;
            while (// && (result instanceof IRule.Success))
            Listiterator.hasNext() && null != result) {
                childComponent = (ITagComponent) Listiterator.next();
                // get Child Quantity
                String childQty = childComponent.getQuantity();
                // This means that next element is not fully specified.
                if ((childQty.equals("?") || childQty.isEmpty()) && !(childComponent.isInitial())) {
                    childIsUnknown = true;
                    continue;
                // break;
                }
                if (!(childQty.isEmpty()) && (!(childQty.equals("?"))))
                    iTotalChildQty += Float.valueOf(childQty);
            }
            // boolean bResult = QtyCheck(iTotalChildQty);
            // Set overall Component as main component
            setComponent(component);
            strmodel = component.getLabel();
            // if child qty is unknown then do not check for Qty.
            /*if(!childIsUnknown)
					{
						if(QtyCheck(iTotalChildQty))
						{
							result = new IRule.Success((IModelElement)component);
						}
						else
						{
							result = new IRule.Warning((IModelElement)component, "The sum of the quantities of all individual compounds is not equal to the quantity of overall stream, or 100%.\nMake sure that  the quantities of all individual compounds add up to the quantity of overall stream, or 100%");
						}
					}
					else
					{
						result = new IRule.Success((IModelElement)component);
					}*/
            int iRetVal = QtyCheck(iTotalChildQty);
            // Irrespective of child is not or unknown, if qty exceeds the overall qty, show the message
            if (iRetVal == QTY_MORE_THAN_OVERALL) {
                result = new IRule.Warning((IModelElement) component, "The sum of the quantities of all individual compounds is not equal to the quantity of overall stream, or 100%.\nMake sure that  the quantities of all individual compounds add up to the quantity of overall stream, or 100%");
            } else {
                if ((childIsUnknown)) {
                    result = new IRule.Success((IModelElement) component);
                } else // Child is not unknown
                if (iRetVal == QTY_LESS_THAN_OVERALL) {
                    result = new IRule.Warning((IModelElement) component, "The sum of the quantities of all individual compounds is not equal to the quantity of overall stream, or 100%.\nMake sure that  the quantities of all individual compounds add up to the quantity of overall stream, or 100%");
                } else {
                    result = new IRule.Success((IModelElement) component);
                }
            }
            // set the object to overall tag component so that meesage appears only with the overAll Tag
            object = (IModelElement) component;
            String strLabel = component.getLabel();
            setAnnotation(result, strLabel);
        }
    // Get interpretor for component with which this funtion is called
    /*interpreter = ModelEnv.getInstanceFor(getComponent()).getInterpreter();
				ModelElementData modelData = interpreter.getModelData(component.getLabel());
				if ( null != modelData)
				{
					if(result instanceof IRule.Success)
					{
						modelData.setErrorAnnotation(null);
					}
					else
					{
						modelData.setErrorAnnotation(new Annotation(object, ProcessModelConstants.DESC_WARNING, result.getMessage()));
					}
				}*/
    }
    return result;
}
