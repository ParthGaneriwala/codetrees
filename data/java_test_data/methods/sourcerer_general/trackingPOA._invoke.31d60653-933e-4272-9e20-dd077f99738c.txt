public org.omg.CORBA.portable.OutputStream _invoke(String $method, org.omg.CORBA.portable.InputStream in, org.omg.CORBA.portable.ResponseHandler $rh) {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer) _methods.get($method);
    if (__method == null)
        throw new org.omg.CORBA.BAD_OPERATION(0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    switch(__method.intValue()) {
        // Establishes a new set of routes (overwrites existing routes)
        case // corba/tracking/tracking/setAllRoutes
        0:
            {
                corba.tracking.Vehicle[] routes = corba.tracking.RoutesHelper.read(in);
                this.setAllRoutes(routes);
                out = $rh.createReply();
                break;
            }
        /*Obtains the current routes.
  			 * Note: The first stop in each route is always the vehicle's next
  			 * stop.
  			 */
        case // corba/tracking/tracking/getAllCurrentRoutes
        1:
            {
                corba.tracking.Vehicle[] $result = null;
                $result = this.getAllCurrentRoutes();
                out = $rh.createReply();
                corba.tracking.RoutesHelper.write(out, $result);
                break;
            }
        // Obtains the status of a given order.
        case // corba/tracking/tracking/trackOrder
        2:
            {
                int orderid = in.read_long();
                corba.tracking.OrderStatus $result = null;
                $result = this.trackOrder(orderid);
                out = $rh.createReply();
                corba.tracking.OrderStatusHelper.write(out, $result);
                break;
            }
        /*Removes a delivered order from the database.
  			 * Returns True if successful, False if the order
  			 * has not been delivered or does not exist.
  			 */
        case // corba/tracking/tracking/clearOrder
        3:
            {
                int orderid = in.read_long();
                boolean $result = false;
                $result = this.clearOrder(orderid);
                out = $rh.createReply();
                out.write_boolean($result);
                break;
            }
        // Simulates the passage of time.
        case // corba/tracking/tracking/simulate
        4:
            {
                this.simulate();
                out = $rh.createReply();
                break;
            }
        // Registers a web service for delivery notifications.
        case // corba/tracking/tracking/registerListener
        5:
            {
                String url = in.read_string();
                this.registerListener(url);
                out = $rh.createReply();
                break;
            }
        // Unregisters a notification listener service.
        case // corba/tracking/tracking/unregisterListener
        6:
            {
                String url = in.read_string();
                this.unregisterListener(url);
                out = $rh.createReply();
                break;
            }
        // Unregisters all registered listeners.
        case // corba/tracking/tracking/unregisterAll
        7:
            {
                this.unregisterAll();
                out = $rh.createReply();
                break;
            }
        default:
            throw new org.omg.CORBA.BAD_OPERATION(0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }
    return out;
}
