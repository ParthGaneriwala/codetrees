private void addSuccessfulAttempt(JobInProgress job, TaskAttemptID attemptId, JobHistory.TaskAttempt attempt) {
    // I. Get the required info
    TaskID taskId = attemptId.getTaskID();
    String type = attempt.get(Keys.TASK_TYPE);
    TaskInProgress tip = job.getTaskInProgress(taskId);
    long attemptFinishTime = attempt.getLong(Keys.FINISH_TIME);
    // Get the task status and the tracker name and make a copy of it
    TaskStatus taskStatus = (TaskStatus) tip.getTaskStatus(attemptId).clone();
    taskStatus.setFinishTime(attemptFinishTime);
    String stateString = attempt.get(Keys.STATE_STRING);
    // Update the basic values
    taskStatus.setStateString(stateString);
    taskStatus.setProgress(1.0f);
    taskStatus.setRunState(TaskStatus.State.SUCCEEDED);
    // Set the shuffle/sort finished times
    if (type.equals(Values.REDUCE.name())) {
        long shuffleTime = Long.parseLong(attempt.get(Keys.SHUFFLE_FINISHED));
        long sortTime = Long.parseLong(attempt.get(Keys.SORT_FINISHED));
        taskStatus.setShuffleFinishTime(shuffleTime);
        taskStatus.setSortFinishTime(sortTime);
    }
    // Add the counters
    String counterString = attempt.get(Keys.COUNTERS);
    Counters counter = null;
    // TODO Check if an exception should be thrown
    try {
        counter = Counters.fromEscapedCompactString(counterString);
    } catch (ParseException pe) {
        // Set it to empty counter
        counter = new Counters();
    }
    taskStatus.setCounters(counter);
    // II. Replay the status
    job.updateTaskStatus(tip, taskStatus, myInstrumentation);
    // III. Prevent the task from expiry
    expireLaunchingTasks.removeTask(attemptId);
}
