public void handleEvent(Event e) {
    if (!isValid()) {
        return;
    }
    char key = e.character;
    // event has a character.
    if (e.type == SWT.Traverse) {
        // See https://bugs.eclipse.org/bugs/show_bug.cgi?id=132101
        if (key != 0) {
            e.doit = false;
            return;
        }
        // Traversal does not contain a character. Set doit true
        // to indicate TRAVERSE_NONE will occur and that no key
        // event will be triggered. We will check for navigation
        // keys below.
        e.detail = SWT.TRAVERSE_NONE;
        e.doit = true;
    } else {
        // Default is to only propagate when configured that way.
        // Some keys will always set doit to false anyway.
        e.doit = propagateKeys;
    }
    if (key == 0) {
        int newSelection = proposalTable.getSelectionIndex();
        int visibleRows = (proposalTable.getSize().y / proposalTable.getItemHeight()) - 1;
        switch(e.keyCode) {
            case SWT.ARROW_UP:
                newSelection -= 1;
                if (newSelection < 0) {
                    newSelection = proposalTable.getItemCount() - 1;
                }
                // therefore it never propagates.  Added for consistency.
                if (e.type == SWT.KeyDown) {
                    // don't propagate to control
                    e.doit = false;
                }
                break;
            case SWT.ARROW_DOWN:
                newSelection += 1;
                if (newSelection > proposalTable.getItemCount() - 1) {
                    newSelection = 0;
                }
                // therefore it never propagates.  Added for consistency.
                if (e.type == SWT.KeyDown) {
                    // don't propagate to control
                    e.doit = false;
                }
                break;
            case SWT.PAGE_DOWN:
                newSelection += visibleRows;
                if (newSelection >= proposalTable.getItemCount()) {
                    newSelection = proposalTable.getItemCount() - 1;
                }
                if (e.type == SWT.KeyDown) {
                    // don't propagate to control
                    e.doit = false;
                }
                break;
            case SWT.PAGE_UP:
                newSelection -= visibleRows;
                if (newSelection < 0) {
                    newSelection = 0;
                }
                if (e.type == SWT.KeyDown) {
                    // don't propagate to control
                    e.doit = false;
                }
                break;
            case SWT.HOME:
                newSelection = 0;
                if (e.type == SWT.KeyDown) {
                    // don't propagate to control
                    e.doit = false;
                }
                break;
            case SWT.END:
                newSelection = proposalTable.getItemCount() - 1;
                if (e.type == SWT.KeyDown) {
                    // don't propagate to control
                    e.doit = false;
                }
                break;
            // position has changed.
            case SWT.ARROW_LEFT:
            case SWT.ARROW_RIGHT:
                if (e.type == SWT.Traverse) {
                    e.doit = false;
                } else {
                    e.doit = true;
                    String contents = getControlContentAdapter().getControlContents(getControl());
                    // text on ARROW_LEFT as we would with BS.
                    if (contents.length() > 0) {
                        asyncRecomputeProposals(filterText);
                    }
                }
                break;
            // they are not complete yet (no character).
            default:
                if (e.keyCode != SWT.CAPS_LOCK && e.keyCode != SWT.MOD1 && e.keyCode != SWT.MOD2 && e.keyCode != SWT.MOD3 && e.keyCode != SWT.MOD4) {
                    close();
                }
                return;
        }
        // then handle that now and return.
        if (newSelection >= 0) {
            selectProposal(newSelection);
        }
        return;
    }
    // filtering the proposals.
    switch(key) {
        case SWT.ESC:
            e.doit = false;
            close();
            break;
        case SWT.LF:
        case SWT.CR:
            e.doit = false;
            Object p = getSelectedProposal();
            if (p != null) {
                acceptCurrentProposal();
            }
            close();
            break;
        case SWT.TAB:
            e.doit = false;
            getShell().setFocus();
            return;
        case SWT.BS:
            // Backspace should back out of any stored filter text
            if (filterStyle != FILTER_NONE) {
                // We have no filter to back out of, so do nothing
                if (filterText.length() == 0) {
                    return;
                }
                // There is filter to back out of
                filterText = filterText.substring(0, filterText.length() - 1);
                asyncRecomputeProposals(filterText);
                return;
            }
            // There is no filtering provided by us, but some
            // clients provide their own filtering based on content.
            // Recompute the proposals if the cursor position
            // will change (is not at 0).
            int pos = getControlContentAdapter().getCursorPosition(getControl());
            // a recompute.
            if (pos > 0) {
                asyncRecomputeProposals(filterText);
            }
            break;
        default:
            // and filter the proposals.
            if (Character.isDefined(key)) {
                if (filterStyle == FILTER_CUMULATIVE) {
                    filterText = filterText + String.valueOf(key);
                } else if (filterStyle == FILTER_CHARACTER) {
                    filterText = String.valueOf(key);
                }
                // Recompute proposals after processing this event.
                asyncRecomputeProposals(filterText);
            }
            break;
    }
}
