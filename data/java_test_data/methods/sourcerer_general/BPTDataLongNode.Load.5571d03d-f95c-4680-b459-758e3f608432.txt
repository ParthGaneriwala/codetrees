public void Load(byte[] buffer) throws Exception {
    // load serialized data
    // indicator | seek position | [ key storage | seek position ]*
    this.Clear();
    if (buffer.length != owner.buffersize) {
        throw new BPTException("bad buffer size " + buffer.length + " should be " + owner.buffersize);
    }
    byte indicator = buffer[0];
    this.isLeaf = false;
    if (indicator == BPTDataLong.LEAF) {
        this.isLeaf = true;
    } else if (indicator != BPTDataLong.NONLEAF) {
        throw new BPTException("bad indicator, not leaf or nonleaf in tree " + indicator);
    }
    int index = 1;
    // get the first seek position
    this.ChildBufferNumbers[0] = BPTPageFile.RetrieveLong(buffer, index);
    index += BPTPageFile.LONGSTORAGE;
    int maxKeyLength = this.owner.KeyLength;
    int maxKeyPayload = maxKeyLength - BPTPageFile.SHORTSTORAGE;
    // get remaining key storages and seek positions
    String lastkey = "";
    for (int KeyIndex = 0; KeyIndex < this.Size; KeyIndex++) {
        // decode and store a key
        short keylength = BPTPageFile.RetrieveShort(buffer, index);
        if (keylength < -1 || keylength > maxKeyPayload) {
            throw new BPTException("invalid keylength decoded");
        }
        index += BPTPageFile.SHORTSTORAGE;
        String key = null;
        if (keylength == 0) {
            key = "";
        }
        if (keylength > 0) {
            key = new String(buffer, index, keylength, "UTF-8");
        }
        this.ChildKeys[KeyIndex] = key;
        index += maxKeyPayload;
        // decode and store a seek position
        long seekPosition = BPTPageFile.RetrieveLong(buffer, index);
        if (!this.isLeaf) {
            if (key == null & seekPosition != BPTDataLong.NULLBUFFERNUMBER) {
                throw new BPTException("key is null but position is not " + KeyIndex);
            } else if (lastkey == null && key != null) {
                throw new BPTException("null key followed by non-null key " + KeyIndex);
            }
        }
        lastkey = key;
        this.ChildBufferNumbers[KeyIndex + 1] = seekPosition;
        index += BPTPageFile.LONGSTORAGE;
    }
}
