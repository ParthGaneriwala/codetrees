protected void onRender(Element parent, int index) {
    super.onRender(parent, index);
    System.out.println("----------GoodsType");
    add(formPanel);
    TextField nameField = GoodsTypeForm.getNameField("商品类型名称：");
    nameField.setFieldLabel("商品类型名称");
    formPanel.add(nameField);
    TextArea agField = GoodsTypeForm.getAttributeGroupField("属性分组：");
    agField.setHeight("180px");
    agField.setWidth("100px");
    agField.setFieldLabel("属性分组");
    formPanel.add(agField);
    // TODO make it english : ?
    // formPanel.setLabelSeparator("：");
    formPanel.setLabelWidth(100);
    Button btnNew = new Button();
    Button btnReset = new Button();
    // HorizontalPanel panel = new HorizontalPanel();
    // panel.setSpacing(10);
    btnNew.setText(Resources.constants.ok());
    btnReset.setText(Resources.constants.reset());
    // panel.add(btnNew);
    // panel.add(btnCancel);
    formPanel.setButtonAlign(HorizontalAlignment.CENTER);
    formPanel.addButton(btnNew);
    formPanel.addButton(btnReset);
    btnNew.addSelectionListener(new SelectionListener<ButtonEvent>() {

        public void componentSelected(ButtonEvent sender) {
            if (!formPanel.isValid()) {
                Window.alert("Please check input before submit!!!");
                return;
            }
            if (!formPanel.isDirty()) {
                // TODO this is optimisitic. should change it to based on a strategy configuration?
                Window.alert("the form is not changed!!!");
                gotoSuccessPanel();
                return;
            }
            List<Field> fields = formPanel.getFields();
            Map<String, Object> props = new HashMap<String, Object>();
            for (Field field : fields) {
                System.out.println("name: " + field.getName() + ", value: (" + field.getValue() + ")");
                props.put(field.getName(), field.getValue());
            }
            BeanObject goodsType = new BeanObject(GoodsTypeForm.MODELNAME, props);
            if (getCurState().getIsEdit()) {
                String id = getCurState().getGoodsTypeID();
                new UpdateService().updateBean(id, goodsType, new UpdateService.Listener() {

                    public synchronized void onSuccess(Boolean success) {
                        gotoSuccessPanel();
                    }
                });
            } else {
                new CreateService().createBean(goodsType, new CreateService.Listener() {

                    public synchronized void onSuccess(String id) {
                        System.out.println("new onSuccess( " + id);
                        getCurState().setGoodsTypeID(id);
                        gotoSuccessPanel();
                    }
                });
            }
        }
    });
    btnReset.addSelectionListener(new SelectionListener<ButtonEvent>() {

        public void componentSelected(ButtonEvent sender) {
        // formPanel.reset();
        }
    });
}
