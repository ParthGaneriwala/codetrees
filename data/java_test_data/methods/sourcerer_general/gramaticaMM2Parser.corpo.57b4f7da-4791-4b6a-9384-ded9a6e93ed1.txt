// $ANTLR start "corpo"
public final gramaticaMM2Parser.corpo_return corpo() throws RecognitionException {
    gramaticaMM2Parser.corpo_return retval = new gramaticaMM2Parser.corpo_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token BEGIN64 = null;
    Token END66 = null;
    gramaticaMM2Parser.lista_comandos_return lista_comandos65 = null;
    CommonTree BEGIN64_tree = null;
    CommonTree END66_tree = null;
    RewriteRuleTokenStream stream_END = new RewriteRuleTokenStream(adaptor, "token END");
    RewriteRuleTokenStream stream_BEGIN = new RewriteRuleTokenStream(adaptor, "token BEGIN");
    RewriteRuleSubtreeStream stream_lista_comandos = new RewriteRuleSubtreeStream(adaptor, "rule lista_comandos");
    try {
        // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:113:7: ( BEGIN ( ( lista_comandos )* ) END -> ^( BODY ( lista_comandos )* ) )
        // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:113:9: BEGIN ( ( lista_comandos )* ) END
        {
            BEGIN64 = (Token) match(input, BEGIN, FOLLOW_BEGIN_in_corpo975);
            stream_BEGIN.add(BEGIN64);
            // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:113:15: ( ( lista_comandos )* )
            // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:113:16: ( lista_comandos )*
            {
                // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:113:16: ( lista_comandos )*
                loop11: do {
                    int alt11 = 2;
                    int LA11_0 = input.LA(1);
                    if ((LA11_0 == IF || (LA11_0 >= CASE && LA11_0 <= WHILE) || (LA11_0 >= WRITEINT && LA11_0 <= WRITELN) || LA11_0 == LETTER)) {
                        alt11 = 1;
                    }
                    switch(alt11) {
                        case 1:
                            // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:113:16: lista_comandos
                            {
                                pushFollow(FOLLOW_lista_comandos_in_corpo978);
                                lista_comandos65 = lista_comandos();
                                state._fsp--;
                                stream_lista_comandos.add(lista_comandos65.getTree());
                            }
                            break;
                        default:
                            break loop11;
                    }
                } while (true);
            }
            END66 = (Token) match(input, END, FOLLOW_END_in_corpo982);
            stream_END.add(END66);
            // AST REWRITE
            // elements: lista_comandos
            // token labels:
            // rule labels: retval
            // token list labels:
            // rule list labels:
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", retval != null ? retval.tree : null);
            root_0 = (CommonTree) adaptor.nil();
            // 113:37: -> ^( BODY ( lista_comandos )* )
            {
                // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:113:40: ^( BODY ( lista_comandos )* )
                {
                    CommonTree root_1 = (CommonTree) adaptor.nil();
                    root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(BODY, "BODY"), root_1);
                    // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:113:47: ( lista_comandos )*
                    while (stream_lista_comandos.hasNext()) {
                        adaptor.addChild(root_1, stream_lista_comandos.nextTree());
                    }
                    stream_lista_comandos.reset();
                    adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
