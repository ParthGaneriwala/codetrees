private static void processValidationAnnotation(Annotation a, String fieldName, List<ValidatorConfig> result) {
    Validations validations = (Validations) a;
    CustomValidator[] cv = validations.customValidators();
    if (cv != null) {
        for (CustomValidator v : cv) {
            ValidatorConfig temp = processCustomValidatorAnnotation(v, fieldName);
            if (temp != null) {
                result.add(temp);
            }
        }
    }
    ExpressionValidator[] ev = validations.expressions();
    if (ev != null) {
        for (ExpressionValidator v : ev) {
            ValidatorConfig temp = processExpressionValidatorAnnotation(v, fieldName);
            if (temp != null) {
                result.add(temp);
            }
        }
    }
    ConversionErrorFieldValidator[] cef = validations.conversionErrorFields();
    if (cef != null) {
        for (ConversionErrorFieldValidator v : cef) {
            ValidatorConfig temp = processConversionErrorFieldValidatorAnnotation(v, fieldName);
            if (temp != null) {
                result.add(temp);
            }
        }
    }
    DateRangeFieldValidator[] drfv = validations.dateRangeFields();
    if (drfv != null) {
        for (DateRangeFieldValidator v : drfv) {
            ValidatorConfig temp = processDateRangeFieldValidatorAnnotation(v, fieldName);
            if (temp != null) {
                result.add(temp);
            }
        }
    }
    EmailValidator[] emv = validations.emails();
    if (emv != null) {
        for (EmailValidator v : emv) {
            ValidatorConfig temp = processEmailValidatorAnnotation(v, fieldName);
            if (temp != null) {
                result.add(temp);
            }
        }
    }
    FieldExpressionValidator[] fev = validations.fieldExpressions();
    if (fev != null) {
        for (FieldExpressionValidator v : fev) {
            ValidatorConfig temp = processFieldExpressionValidatorAnnotation(v, fieldName);
            if (temp != null) {
                result.add(temp);
            }
        }
    }
    IntRangeFieldValidator[] irfv = validations.intRangeFields();
    if (irfv != null) {
        for (IntRangeFieldValidator v : irfv) {
            ValidatorConfig temp = processIntRangeFieldValidatorAnnotation(v, fieldName);
            if (temp != null) {
                result.add(temp);
            }
        }
    }
    RegexFieldValidator[] rfv = validations.regexFields();
    if (rfv != null) {
        for (RegexFieldValidator v : rfv) {
            ValidatorConfig temp = processRegexFieldValidatorAnnotation(v, fieldName);
            if (temp != null) {
                result.add(temp);
            }
        }
    }
    RequiredFieldValidator[] rv = validations.requiredFields();
    if (rv != null) {
        for (RequiredFieldValidator v : rv) {
            ValidatorConfig temp = processRequiredFieldValidatorAnnotation(v, fieldName);
            if (temp != null) {
                result.add(temp);
            }
        }
    }
    RequiredStringValidator[] rsv = validations.requiredStrings();
    if (rsv != null) {
        for (RequiredStringValidator v : rsv) {
            ValidatorConfig temp = processRequiredStringValidatorAnnotation(v, fieldName);
            if (temp != null) {
                result.add(temp);
            }
        }
    }
    StringLengthFieldValidator[] slfv = validations.stringLengthFields();
    if (slfv != null) {
        for (StringLengthFieldValidator v : slfv) {
            ValidatorConfig temp = processStringLengthFieldValidatorAnnotation(v, fieldName);
            if (temp != null) {
                result.add(temp);
            }
        }
    }
    UrlValidator[] uv = validations.urls();
    if (uv != null) {
        for (UrlValidator v : uv) {
            ValidatorConfig temp = processUrlValidatorAnnotation(v, fieldName);
            if (temp != null) {
                result.add(temp);
            }
        }
    }
    VisitorFieldValidator[] vfv = validations.visitorFields();
    if (vfv != null) {
        for (VisitorFieldValidator v : vfv) {
            ValidatorConfig temp = processVisitorFieldValidatorAnnotation(v, fieldName);
            if (temp != null) {
                result.add(temp);
            }
        }
    }
}
