@Override
protected void visitInternal(TemplateNode node) {
    boolean isCodeStyleStringbuilder = javaSrcOptions.getCodeStyle() == CodeStyle.STRINGBUILDER;
    localVarTranslations = new ArrayDeque<Map<String, JavaExpr>>();
    genJavaExprsVisitor = genJavaExprsVisitorFactory.create(localVarTranslations);
    if (isCodeStyleStringbuilder) {
        javaCodeBuilder.appendLine(node.isPrivate() ? "private" : "public", " static String ", node.getTemplateName().replace('.', '$'), "(com.google.template.soy.data.SoyMapData data, StringBuilder sb) {");
    } else {
        javaCodeBuilder.appendLine(node.isPrivate() ? "private" : "public", " static String ", node.getTemplateName().replace('.', '$'), "(com.google.template.soy.data.SoyMapData data) {");
    }
    javaCodeBuilder.increaseIndent();
    localVarTranslations.push(Maps.<String, JavaExpr>newHashMap());
    if (!isCodeStyleStringbuilder && isComputableAsJavaExprsVisitor.exec(node)) {
        // Case 1: The code style is 'concat' and the whole template body can be represented as Java
        // expressions. We specially handle this case because we don't want to generate the variable
        // 'output' at all. We simply concatenate the Java expressions and return the result.
        List<JavaExpr> templateBodyJavaExprs = genJavaExprsVisitor.exec(node);
        JavaExpr templateBodyJavaExpr = JavaExprUtils.concatJavaExprs(templateBodyJavaExprs);
        javaCodeBuilder.appendLine("return ", templateBodyJavaExpr.getText(), ";");
    } else {
        // Case 2: Normal case.
        javaCodeBuilder.pushOutputVar("output");
        if (isCodeStyleStringbuilder) {
            javaCodeBuilder.appendLine("StringBuilder output = (sb != null) ? sb : new StringBuilder();");
            javaCodeBuilder.setOutputVarInited();
        }
        visitChildren(node);
        if (isCodeStyleStringbuilder) {
            javaCodeBuilder.appendLine("return (sb != null) ? null : output.toString();");
        } else {
            javaCodeBuilder.appendLine("return output;");
        }
        javaCodeBuilder.popOutputVar();
    }
    localVarTranslations.pop();
    javaCodeBuilder.decreaseIndent();
    javaCodeBuilder.appendLine("}");
}
