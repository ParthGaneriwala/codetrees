@Transactional
@Override
@Secured(SecurityRoles.ROLE_ADMINISTRATOR)
public void saveTerrain(Collection<TerrainImagePosition> terrainImagePositions, Collection<SurfaceRect> surfaceRects, int terrainId) {
    DbTerrainSetting dbTerrainSetting = dbTerrainSettingCrudServiceHelper.readDbChild(terrainId);
    // Terrain Image Position
    Map<ImagePositionKey, TerrainImagePosition> newImagePosition = new HashMap<ImagePositionKey, TerrainImagePosition>(terrainImagePositions.size());
    for (TerrainImagePosition terrainImagePosition : terrainImagePositions) {
        newImagePosition.put(new ImagePositionKey(terrainImagePosition), terrainImagePosition);
    }
    Collection<DbTerrainImagePosition> dbTerrainImagePositions = dbTerrainSetting.getDbTerrainImagePositionCrudServiceHelper().readDbChildren();
    // Remove Same
    for (Iterator<DbTerrainImagePosition> iterator = dbTerrainImagePositions.iterator(); iterator.hasNext(); ) {
        DbTerrainImagePosition dbTerrainImagePosition = iterator.next();
        ImagePositionKey key = new ImagePositionKey(dbTerrainImagePosition);
        if (newImagePosition.containsKey(key)) {
            newImagePosition.remove(key);
        } else {
            iterator.remove();
        }
    }
    // Add new
    for (TerrainImagePosition terrainImagePosition : newImagePosition.values()) {
        DbTerrainImage dbTerrainImage = getDbTerrainImage(terrainImagePosition.getImageId());
        dbTerrainSetting.getDbTerrainImagePositionCrudServiceHelper().addChild(new DbTerrainImagePosition(terrainImagePosition.getTileIndex(), dbTerrainImage), null);
    }
    // Surface Rects
    Map<SurfaceRectKey, SurfaceRect> newSurfaceRect = new HashMap<SurfaceRectKey, SurfaceRect>(surfaceRects.size());
    for (SurfaceRect surfaceRect : surfaceRects) {
        newSurfaceRect.put(new SurfaceRectKey(surfaceRect), surfaceRect);
    }
    Collection<DbSurfaceRect> dbSurfaceRects = dbTerrainSetting.getDbSurfaceRectCrudServiceHelper().readDbChildren();
    // Remove Same
    for (Iterator<DbSurfaceRect> iterator = dbSurfaceRects.iterator(); iterator.hasNext(); ) {
        DbSurfaceRect dbSurfaceRect = iterator.next();
        SurfaceRectKey key = new SurfaceRectKey(dbSurfaceRect);
        if (newSurfaceRect.containsKey(key)) {
            newSurfaceRect.remove(key);
        } else {
            iterator.remove();
        }
    }
    // Add new
    for (SurfaceRect surfaceRect : newSurfaceRect.values()) {
        DbSurfaceImage dbSurfaceImage = getDbSurfaceImage(surfaceRect.getSurfaceImageId());
        dbTerrainSetting.getDbSurfaceRectCrudServiceHelper().addChild(new DbSurfaceRect(surfaceRect.getTileRectangle(), dbSurfaceImage), null);
    }
    hibernateTemplate.saveOrUpdate(dbTerrainSetting);
}
