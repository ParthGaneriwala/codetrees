@Test
public void testInteger() throws Exception {
    FCollections<Integer> fc = new FCollections<Integer>();
    // ten true positives for '1'
    fc.addTruePositives(1, 9);
    fc.addTruePositive(1);
    // five false positives for '1'
    fc.addFalsePositives(1, 4);
    fc.addFalsePositive(1);
    // fifteen false negatives for '1'
    fc.addFalseNegatives(1, 14);
    fc.addFalseNegative(1);
    // add one of each for '2'
    fc.addTruePositive(2);
    fc.addFalsePositive(2);
    fc.addFalseNegative(2);
    // key = 1
    assertEquals(10, fc.getTruePositivesCount(1));
    assertEquals(5, fc.getFalsePositivesCount(1));
    assertEquals(15, fc.getFalseNegativesCount(1));
    // 10 / (10 + 5)
    assertEquals(0.6666667d, fc.getPrecision(1), 0.0001d);
    // 10 / (10 + 15)
    assertEquals(0.4d, fc.getRecall(1), 0.0001d);
    // (2 * 10) / (2 * 10 + 10 + 15)
    assertEquals(0.5d, fc.getF(1), 0.0001d);
    // key = 2
    assertEquals(1, fc.getTruePositivesCount(2));
    assertEquals(1, fc.getFalsePositivesCount(2));
    assertEquals(1, fc.getFalseNegativesCount(2));
    // 1 / (1 + 1)
    assertEquals(0.5d, fc.getPrecision(2), 0.0001d);
    // 1 / (1 + 1)
    assertEquals(0.5d, fc.getRecall(2), 0.0001d);
    // (2 * 1) / (2 * 1 + 1 + 1)
    assertEquals(0.5d, fc.getF(2), 0.0001d);
    // aggregate
    assertEquals(11, fc.getTruePositivesCount());
    assertEquals(6, fc.getFalsePositivesCount());
    assertEquals(16, fc.getFalseNegativesCount());
    // 11 / (11 + 6)
    assertEquals(0.64706d, fc.getPrecision(), 0.0001d);
    // 11 / (11 + 16)
    assertEquals(0.40741d, fc.getRecall(), 0.0001d);
    // (2 * 11) / (2 * 11 + 6 + 16)
    assertEquals(0.5d, fc.getF(), 0.0001d);
    List<Integer> keys = fc.getSortedObjects();
    assertEquals(2, keys.size());
    assertEquals(Integer.valueOf(1), keys.get(0));
    assertEquals(Integer.valueOf(2), keys.get(1));
    assertEquals(Double.NaN, fc.getF(3), 0.0001d);
}
