public synchronized void append(ByteBuffer byteBuffer, int n) throws IOException {
    byte[] oldBuffer = inBuffer;
    inBuffer = new byte[bBytesLeft + n];
    System.arraycopy(oldBuffer, oldBuffer.length - bBytesLeft, inBuffer, 0, bBytesLeft);
    byteBuffer.flip();
    byteBuffer.get(inBuffer, bBytesLeft, n);
    bBytesLeft = inBuffer.length;
    while (bBytesLeft >= missingBytes) {
        if (!packetStarted) {
            for (int i = inBuffer.length - bBytesLeft; i < inBuffer.length; i++) {
                bBytesLeft--;
                if (convert.byteToInt(inBuffer[i]) == 0xe3) {
                    // packet start found!
                    newPacket();
                    break;
                }
            }
        } else {
            if (!headerDone) {
                System.arraycopy(inBuffer, (inBuffer.length - bBytesLeft), pla, 0, 4);
                bBytesLeft -= 4;
                try {
                    pl = (int) convert.DWORDtoLong(pla) - 1;
                } catch (Exception e) {
                }
                packetBody = new byte[pl];
                myDp.setCommandId(inBuffer[inBuffer.length - bBytesLeft]);
                bBytesLeft--;
                missingBytes = pl;
                headerDone = true;
                if (missingBytes == 0)
                    packetDone = true;
            } else {
                System.arraycopy(inBuffer, inBuffer.length - bBytesLeft, packetBody, 0, missingBytes);
                bBytesLeft -= missingBytes;
                myDp.setBody(packetBody);
                packetDone = true;
                packetStarted = false;
                // add packet to queue
                dc.addInPacket(myDp);
                // flag to begin decoding of next packet
                missingBytes = 6;
                pl = 0;
            }
        }
    }
}
