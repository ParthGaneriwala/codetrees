public final void testQueenGame() throws Exception {
    // test to see if possible to win
    QueenGame gameWin = new QueenGame();
    // test to see if possible to lose
    QueenGame gameLose = new QueenGame();
    Board board = new Board();
    Player p1 = new Player(1);
    Queen q1 = new Queen(0, 6, p1);
    // Test to see if it is possible to add queen1 off the board
    assertFalse(q1.checkIfLegal(-1, -1));
    // Test to see if it is possible to add queen1 to the board
    // by checking in class Queen and in the Game class
    assertTrue(q1.checkIfLegal(0, 6));
    assertTrue(gameWin.legalMove(0, 6));
    // Test to make sure the queen shows up on the board when added
    gameWin.placeQueen(0, 6);
    board.placePiece(0, 6, "Q", p1);
    assertEquals(board.getBoard()[0][6].toString(), "Q");
    // this space should be empty
    assertEquals(board.getBoard()[0][0], null);
    // game has not been won yet
    assertFalse(gameWin.noWin());
    // Test to see if we can add a second queen2 in a position
    // where it could be eaten by queen1
    assertFalse(gameWin.legalMove(2, 4));
    // Test to see if it is possible to add queen2 to the game
    // and if it shows up on the board
    gameWin.placeQueen(1, 4);
    board.placePiece(1, 4, "Q", p1);
    assertEquals(board.getBoard()[1][4].toString(), "Q");
    // game has not been won yet
    assertFalse(gameWin.noWin());
    // Testing to see if it is possible to win the game
    assertTrue(gameWin.legalMove(2, 2));
    gameWin.placeQueen(2, 2);
    assertFalse(gameWin.noWin());
    assertFalse(gameWin.hasWon());
    assertTrue(gameWin.legalMove(3, 0));
    gameWin.placeQueen(3, 0);
    assertFalse(gameWin.noWin());
    assertFalse(gameWin.hasWon());
    assertTrue(gameWin.legalMove(4, 5));
    gameWin.placeQueen(4, 5);
    assertFalse(gameWin.noWin());
    assertFalse(gameWin.hasWon());
    assertTrue(gameWin.legalMove(5, 7));
    gameWin.placeQueen(5, 7);
    assertFalse(gameWin.noWin());
    assertFalse(gameWin.hasWon());
    assertTrue(gameWin.legalMove(6, 1));
    gameWin.placeQueen(6, 1);
    assertFalse(gameWin.noWin());
    assertFalse(gameWin.hasWon());
    assertTrue(gameWin.legalMove(7, 3));
    gameWin.placeQueen(7, 3);
    // game has been won!!!
    assertTrue(gameWin.noWin());
    // game has been won :)
    assertTrue(gameWin.hasWon());
    // Test to see if it is possible to lose the game (when no
    // more possible moves are available.
    assertTrue(gameLose.legalMove(0, 0));
    gameLose.placeQueen(0, 0);
    assertFalse(gameLose.noWin());
    assertFalse(gameLose.hasWon());
    assertTrue(gameLose.legalMove(2, 1));
    gameLose.placeQueen(2, 1);
    assertFalse(gameLose.noWin());
    assertFalse(gameLose.hasWon());
    assertTrue(gameLose.legalMove(4, 2));
    gameLose.placeQueen(4, 2);
    assertFalse(gameLose.noWin());
    assertFalse(gameLose.hasWon());
    assertTrue(gameLose.legalMove(1, 3));
    gameLose.placeQueen(1, 3);
    assertFalse(gameLose.noWin());
    assertFalse(gameLose.hasWon());
    assertTrue(gameLose.legalMove(6, 7));
    gameLose.placeQueen(6, 7);
    assertFalse(gameLose.noWin());
    assertFalse(gameLose.hasWon());
    assertTrue(gameLose.legalMove(7, 4));
    gameLose.placeQueen(7, 4);
    assertFalse(gameLose.noWin());
    assertFalse(gameLose.hasWon());
    assertTrue(gameLose.legalMove(3, 6));
    gameLose.placeQueen(3, 6);
    // user has not won and game is lost :(
    assertTrue(gameLose.noWin());
    assertFalse(gameLose.hasWon());
}
