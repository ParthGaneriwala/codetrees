// returns null
// <row value special case> :== this
Expression XreadSimpleValueExpressionPrimary() {
    Expression e;
    e = XreadUnsignedValueSpecificationOrNull();
    if (e != null) {
        return e;
    }
    switch(token.tokenType) {
        case Tokens.OPENBRACKET:
            int position = getPosition();
            read();
            int subqueryPosition = getPosition();
            readOpenBrackets();
            switch(token.tokenType) {
                case Tokens.TABLE:
                case Tokens.VALUES:
                case Tokens.SELECT:
                    SubQuery sq = null;
                    rewind(subqueryPosition);
                    try {
                        sq = XreadSubqueryBody(false, OpTypes.SCALAR_SUBQUERY);
                        readThis(Tokens.CLOSEBRACKET);
                    } catch (HsqlException ex) {
                        ex.setLevel(compileContext.subqueryDepth);
                        if (lastError == null || lastError.getLevel() < ex.getLevel()) {
                            lastError = ex;
                        }
                        rewind(position);
                        return null;
                    }
                    if (sq.queryExpression.isSingleColumn()) {
                        return new Expression(OpTypes.SCALAR_SUBQUERY, sq);
                    } else {
                        return new Expression(OpTypes.ROW_SUBQUERY, sq);
                    }
                default:
                    rewind(position);
                    return null;
            }
        case Tokens.ASTERISK:
            e = new ExpressionColumn(token.namePrePrefix, token.namePrefix);
            getRecordedToken().setExpression(e);
            read();
            return e;
        case Tokens.LEAST:
            return readLeastExpression();
        case Tokens.GREATEST:
            return readGreatestExpression();
        case Tokens.DECODE:
            return readDecodeExpression();
        case Tokens.CASEWHEN:
            return readCaseWhenExpression();
        case Tokens.CASE:
            return readCaseExpression();
        case Tokens.NULLIF:
            return readNullIfExpression();
        case Tokens.COALESCE:
        case Tokens.IFNULL:
            return readCoalesceExpression();
        case Tokens.CAST:
        case Tokens.CONVERT:
            return readCastExpression();
        case Tokens.DATE:
        case Tokens.TIME:
        case Tokens.TIMESTAMP:
        case Tokens.INTERVAL:
            e = readDateTimeIntervalLiteral();
            if (e != null) {
                return e;
            }
            break;
        case Tokens.ARRAY:
            return readCollection(OpTypes.ARRAY);
        case Tokens.ANY:
        case Tokens.SOME:
        case Tokens.EVERY:
        case Tokens.COUNT:
        case Tokens.MAX:
        case Tokens.MIN:
        case Tokens.SUM:
        case Tokens.AVG:
        case Tokens.STDDEV_POP:
        case Tokens.STDDEV_SAMP:
        case Tokens.VAR_POP:
        case Tokens.VAR_SAMP:
            return readAggregate();
        case Tokens.NEXT:
            return readSequenceExpression();
        case Tokens.LEFT:
        case Tokens.RIGHT:
            // CLI function names
            break;
        case Tokens.TABLE:
            {
                read();
                readThis(Tokens.OPENBRACKET);
                SubQuery sq = XreadTableSubqueryBody(false);
                readThis(Tokens.CLOSEBRACKET);
                return new Expression(OpTypes.TABLE_SUBQUERY, sq);
            }
        default:
            if (isCoreReservedKey()) {
                throw unexpectedToken();
            }
    }
    e = readColumnOrFunctionExpression();
    return e;
}
