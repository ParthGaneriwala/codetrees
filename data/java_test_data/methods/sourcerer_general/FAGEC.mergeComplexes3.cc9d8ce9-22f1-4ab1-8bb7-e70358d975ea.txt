protected void mergeComplexes3(Cluster c1, Cluster c2) {
    ArrayList nodes1 = c1.getALNodes();
    ArrayList nodes2 = c2.getALNodes();
    // add the unoverlapped nodes and set the subComplexes of all nodes in C2
    NodeInfo nodeNI;
    ArrayList subComplexes;
    for (Iterator it = nodes2.iterator(); it.hasNext(); ) {
        // for each node in C2
        Integer node = (Integer) it.next();
        nodeNI = (NodeInfo) curNodeInfos.get(node);
        subComplexes = nodeNI.getAlComplex();
        if (!nodes1.contains(node)) {
            // this is not a overlapped node
            int index = subComplexes.indexOf(new Integer(c2.getComplexID()));
            subComplexes.remove(index);
            subComplexes.add(new Integer(c1.getComplexID()));
            nodes1.add(node);
        } else {
            // this node already exists in C1
            int index = subComplexes.indexOf(new Integer(c2.getComplexID()));
            subComplexes.remove(index);
        }
    }
    // calculate the other informations for C1
    int inDegree = 0;
    int totalDegree = 0;
    for (Iterator it = nodes1.iterator(); it.hasNext(); ) {
        // for each node in merged C1
        int node = ((Integer) it.next()).intValue();
        // can this be useful?
        totalDegree += currentNetwork.getDegree(node);
        int[] neighbors = getNeighborArray(currentNetwork, node);
        for (int i = 0; i < neighbors.length; i++) if (nodes1.contains(new Integer(neighbors[i])))
            inDegree++;
    }
    int outDegree = totalDegree - inDegree;
    inDegree = inDegree / 2;
    c1.setInDegree(inDegree);
    c1.setTotalDegree(totalDegree);
    double fModule = (double) inDegree / (double) outDegree;
    if (fModule > params.getFThreshold())
        c1.setModule(true);
    // clear the content of nodes2
    nodes2.clear();
}
