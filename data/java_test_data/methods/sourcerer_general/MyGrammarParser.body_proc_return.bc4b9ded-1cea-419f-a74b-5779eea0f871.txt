// $ANTLR start "body_proc_return"
public final MyGrammarParser.body_proc_return_return body_proc_return() throws RecognitionException {
    MyGrammarParser.body_proc_return_return retval = new MyGrammarParser.body_proc_return_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token PVG122 = null;
    MyGrammarParser.decl_var_return decl_var120 = null;
    MyGrammarParser.init_bloc_return_return init_bloc_return121 = null;
    CommonTree PVG122_tree = null;
    RewriteRuleTokenStream stream_PVG = new RewriteRuleTokenStream(adaptor, "token PVG");
    RewriteRuleSubtreeStream stream_init_bloc_return = new RewriteRuleSubtreeStream(adaptor, "rule init_bloc_return");
    RewriteRuleSubtreeStream stream_decl_var = new RewriteRuleSubtreeStream(adaptor, "rule decl_var");
    try {
        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:238:17: ( ( decl_var )? init_bloc_return PVG -> ^( BODY_PROC_RETURN ( decl_var )? init_bloc_return ) )
        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:238:20: ( decl_var )? init_bloc_return PVG
        {
            // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:238:20: ( decl_var )?
            int alt22 = 2;
            int LA22_0 = input.LA(1);
            if ((LA22_0 == VAR)) {
                alt22 = 1;
            }
            switch(alt22) {
                case 1:
                    // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:238:21: decl_var
                    {
                        pushFollow(FOLLOW_decl_var_in_body_proc_return1904);
                        decl_var120 = decl_var();
                        state._fsp--;
                        stream_decl_var.add(decl_var120.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_init_bloc_return_in_body_proc_return1908);
            init_bloc_return121 = init_bloc_return();
            state._fsp--;
            stream_init_bloc_return.add(init_bloc_return121.getTree());
            PVG122 = (Token) match(input, PVG, FOLLOW_PVG_in_body_proc_return1911);
            stream_PVG.add(PVG122);
            // AST REWRITE
            // elements: init_bloc_return, decl_var
            // token labels:
            // rule labels: retval
            // token list labels:
            // rule list labels:
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", retval != null ? retval.tree : null);
            root_0 = (CommonTree) adaptor.nil();
            // 238:54: -> ^( BODY_PROC_RETURN ( decl_var )? init_bloc_return )
            {
                // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:238:57: ^( BODY_PROC_RETURN ( decl_var )? init_bloc_return )
                {
                    CommonTree root_1 = (CommonTree) adaptor.nil();
                    root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(BODY_PROC_RETURN, "BODY_PROC_RETURN"), root_1);
                    // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:238:76: ( decl_var )?
                    if (stream_decl_var.hasNext()) {
                        adaptor.addChild(root_1, stream_decl_var.nextTree());
                    }
                    stream_decl_var.reset();
                    adaptor.addChild(root_1, stream_init_bloc_return.nextTree());
                    adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
