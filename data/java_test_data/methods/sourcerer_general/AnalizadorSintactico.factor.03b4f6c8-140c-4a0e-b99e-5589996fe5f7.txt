public Tipo factor() throws CompiladorException {
    if (esValor()) {
        /**
         * Valor
         */
        Tipo a;
        if (tok.getTipo().equals("RESERVADA")) {
            a = new TipoBasico("BOOL");
            if (tok.getCadena().equals("falso")) {
                /**
                 * falso
                 */
                instr.add(new Instruccion("apila", false));
                etiqueta++;
            } else {
                /**
                 * cierto
                 */
                instr.add(new Instruccion("apila", true));
                etiqueta++;
            }
        } else {
            a = new TipoBasico(tok.getTipo());
            if (tok.getTipo().equals("ENT")) {
                /**
                 * entero
                 */
                instr.add(new Instruccion("apila", Integer.parseInt(tok.getCadena())));
                etiqueta++;
            } else {
                /**
                 * real
                 */
                instr.add(new Instruccion("apila", Float.parseFloat(tok.getCadena())));
                etiqueta++;
            }
        }
        reconocerValor();
        return a;
    } else if (esOpUnario()) {
        /**
         * Operador unario !, -
         */
        String ou = tok.getCadena();
        reconocer();
        Tipo f = factor();
        if (ou.equals("!")) {
            /**
             * !
             */
            instr.add(new Instruccion("not", 0));
            etiqueta++;
            if (!f.getNombre().equals("BOOL")) {
                throw new CompiladorException(Errores.dameError("TIPOSINCOMPATIBLES", tok.getLinea(), null));
            }
        } else {
            /**
             * -
             */
            instr.add(new Instruccion("signo", 0));
            etiqueta++;
            if (f.getNombre().equals("BOOL")) {
                throw new CompiladorException(Errores.dameError("TIPOSINCOMPATIBLES", tok.getLinea(), null));
            }
        }
        return f;
    } else if ((tok.getCadena()).equals("(")) {
        /**
         * Expresión entre paréntesis
         */
        reconocer("(");
        Tipo f = Expresion();
        reconocer(")");
        return f;
    } else if (tok.getTipo().equals("IDENTIFICADOR")) {
        /**
         * RESTRICCIONES
         */
        Datos d = this.estaIDEnPila(tok.getCadena());
        if (d == null) {
            throw new CompiladorException(Errores.dameError("IDENNODEC", tok.getLinea(), tok.getCadena()));
        }
        Tipo b = d.getTipo();
        if (d.getClase().equals("FUNC")) {
            /**
             * Identificador Función
             */
            instr.add(new Instruccion("incrementa", ((Funcion) b).getDevuelve().getTam()));
            etiqueta++;
            instr.add(new Instruccion("llamar", d.getDireccion(), d.getNivel()));
            etiqueta++;
            reconocerIden();
            reconocer("(");
            reconocer(")");
            return ((Funcion) b).getDevuelve();
        } else {
            /**
             * Identificador(no función), array o registro
             */
            Tipo f = descriptor();
            instr.add(new Instruccion("apila", nivelDesc));
            etiqueta++;
            instr.add(new Instruccion("apila-ind", null));
            etiqueta++;
            return f;
        }
    } else if ((tok.getCadena()).equals("^")) {
        /**
         * Puntero
         */
        Tipo f = descriptor();
        instr.add(new Instruccion("apila", nivelDesc));
        etiqueta++;
        instr.add(new Instruccion("apila-ind", null));
        etiqueta++;
        return f;
    } else {
        throw new CompiladorException(Errores.dameError("EXPRINCORRECTA", tok.getLinea(), tok.getCadena()));
    }
}
