public void run() {
    Socket socket;
    PrintWriter out = null;
    BufferedReader in = null;
    try {
        socket = new Socket("localhost", 4242);
        Log.println("conectado al servidor, " + socket, Log.CONNECTION);
        out = new PrintWriter(socket.getOutputStream(), true);
        in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
        Log.println("Enviando petición para el fichero " + fpath, Log.CONNECTION);
        out.println(fpath);
        parseAnswer(in.readLine());
        Log.println("Enviando petición para abrir el fichero " + fpath + " en modo " + fmode, Log.CONNECTION);
        out.println(fmode);
        parseAnswer(in.readLine());
        String input;
        int i = 0;
        if (fmode.equals("r")) {
            while (i < numOperations && !Main.acabar) {
                out.println("READ:" + i);
                /* i es el seek */
                parseAnswer(in.readLine());
                i++;
            }
        } else {
            while (i < numOperations && !Main.acabar) {
                String data = "DATA" + i;
                /* datos a escribir */
                out.println("WRITE:" + i + /* i es el seek */
                ":" + data);
                parseAnswer(in.readLine());
                i++;
            }
        }
        Log.println("Enviando petición para cerrar el fichero", Log.CONNECTION);
        out.println("CLOSE");
        parseAnswer(in.readLine());
        out.close();
        in.close();
        socket.close();
        Log.println("socket " + socket + " cerrado", Log.CONNECTION);
        // si el usuario ha indicado el fin de la simulacion
        if (Main.acabar) {
            System.out.println("Cliente terminando ...");
        }
    } catch (UnknownHostException e) {
        Log.println("Exception: " + e);
    } catch (IOException e) {
        Log.println("Exception: " + e);
    } catch (ServerErrorException e) {
        Log.println("Error en el servidor");
    }
}
