private void setPositionsForLevelWithMaxNodes(BFSLevel lowestLevelWithMaxNodes, int yOffSet, int startXOffset, Vector<Node> nodesInLevel, int levelIndex) {
    // Initialize xOffSet
    int xOffSet = startXOffset;
    int numnNodesInLevel = nodesInLevel.size();
    for (int i = 0; i < numnNodesInLevel; i++) {
        ControlFlowNode cfNode = (ControlFlowNode) nodesInLevel.elementAt(i);
        // Set the nodesVsDrawingParameters map
        DrawingParameters drawingParameters = nodesVsDrawingParameters.get(cfNode);
        drawingParameters.setYPosition(yOffSet);
        drawingParameters.setXPosition(xOffSet);
        nodesVsDrawingParameters.put(cfNode, drawingParameters);
        // Update the xOffSet for the next node in this level
        Vector<Node> preds = cfNode.getPredecessors();
        Vector<Node> sucss = cfNode.getSuccessors();
        if (preds.size() == 1) {
            // Get the parent (A node that has a single parent must have the
            // parent in the immediate preceding level)
            ControlFlowNode cfNodeParent = (ControlFlowNode) preds.elementAt(0);
            if (isSingleParentRightDiagonal(cfNodeParent, cfNode, levelIndex)) {
                xOffSet = getXOffSetForNextNode(cfNode, sucss, xOffSet, cfNodeParent, levelIndex);
            } else {
                int tempXOffSet = xOffSet + drawingParameters.getSize().width + // Temporary
                horizontalGap;
                if (i + 1 < numnNodesInLevel - 1) {
                    // The next node is not the last node; try to get the
                    // xOffSet of this node
                    // from it's successor's information
                    ControlFlowNode cfNodeNext = (ControlFlowNode) nodesInLevel.elementAt(i + 1);
                    Vector<Node> succsOfNextNode = cfNodeNext.getSuccessors();
                    int tempXOffSetFromSuccInfo = 0;
                    if (succsOfNextNode.size() == 1) {
                        ControlFlowNode cfChildNodeOfNext = (ControlFlowNode) succsOfNextNode.elementAt(0);
                        DrawingParameters dpCfChildNodeOfNext = nodesVsDrawingParameters.get(cfChildNodeOfNext);
                        if (isSingleSuccessorRightDiagonal(cfNodeNext, cfChildNodeOfNext, levelIndex)) {
                            DrawingParameters dpNodeNext = nodesVsDrawingParameters.get(cfNodeNext);
                            tempXOffSetFromSuccInfo = dpCfChildNodeOfNext.getXPosition() - dpNodeNext.getSize().width;
                        } else if (isSingleSuccessorLeftDiagonal(cfNodeNext, cfChildNodeOfNext, levelIndex + 1)) {
                            tempXOffSetFromSuccInfo = dpCfChildNodeOfNext.getXPosition() + dpCfChildNodeOfNext.getSize().width;
                        }
                        if (tempXOffSetFromSuccInfo > tempXOffSet) {
                            xOffSet = tempXOffSetFromSuccInfo;
                        } else {
                            xOffSet = tempXOffSet;
                        }
                    } else {
                    // TODO - Get info from successor info if the next
                    // node has two children
                    }
                }
            }
        } else if (preds.size() == 2) {
            ControlFlowNode cfNodeRightParent = (ControlFlowNode) preds.elementAt(1);
            BFSLevel precedingLevel = levels.elementAt(levelIndex - 1);
            if (precedingLevel.containsNode(cfNodeRightParent)) {
                // The parent node is to the right on the level immediately
                // preceding the current node
                xOffSet = getXOffSetForNextNode(cfNode, sucss, xOffSet, cfNodeRightParent, levelIndex);
            } else
                xOffSet += horizontalGap;
        }
    }
}
