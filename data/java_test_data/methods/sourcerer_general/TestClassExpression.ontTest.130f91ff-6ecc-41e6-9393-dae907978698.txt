public void ontTest(OntModel m) throws Exception {
    Profile prof = m.getProfile();
    ComplementClass A = m.createComplementClass(NS + "A", null);
    OntClass B = m.createClass(NS + "B");
    OntClass C = m.createClass(NS + "C");
    boolean ex = false;
    try {
        A.addOperand(B);
    } catch (UnsupportedOperationException e) {
        ex = true;
    }
    assertTrue("Should fail to add to a complement", ex);
    ex = false;
    try {
        A.addOperands(NullIterator.instance);
    } catch (UnsupportedOperationException e) {
        ex = true;
    }
    assertTrue("Should fail to add to a complement", ex);
    ex = false;
    try {
        A.setOperands(m.createList(new RDFNode[] { C }));
    } catch (UnsupportedOperationException e) {
        ex = true;
    }
    assertTrue("Should fail to set a list to a complement", ex);
    A.setOperand(B);
    assertEquals("Cardinality should be 1", 1, A.getCardinality(prof.COMPLEMENT_OF()));
    assertEquals("Complement should be B", B, A.getOperand());
    iteratorTest(A.listOperands(), new Object[] { B });
    A.setOperand(C);
    assertEquals("Cardinality should be 1", 1, A.getCardinality(prof.COMPLEMENT_OF()));
    assertTrue("A should have C in the complement", A.hasOperand(C));
    assertTrue("A should not have B in the complement", !A.hasOperand(B));
    A.removeOperand(B);
    assertTrue("Should have C as an operand", A.hasOperand(C));
    A.removeOperand(C);
    assertTrue("Should not have C as an operand", !A.hasOperand(C));
}
