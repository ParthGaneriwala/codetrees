public void testJobShell() throws Exception {
    MiniDFSCluster dfs = null;
    MiniMRCluster mr = null;
    FileSystem fs = null;
    Path testFile = new Path(input, "testfile");
    try {
        Configuration conf = new Configuration();
        // start the mini mr and dfs cluster.
        dfs = new MiniDFSCluster(conf, 2, true, null);
        fs = dfs.getFileSystem();
        FSDataOutputStream stream = fs.create(testFile);
        stream.write("teststring".getBytes());
        stream.close();
        mr = new MiniMRCluster(2, fs.getUri().toString(), 1);
        File thisbuildDir = new File(buildDir, "jobCommand");
        assertTrue("create build dir", thisbuildDir.mkdirs());
        File f = new File(thisbuildDir, "files_tmp");
        FileOutputStream fstream = new FileOutputStream(f);
        fstream.write("somestrings".getBytes());
        fstream.close();
        String[] args = new String[6];
        args[0] = "-files";
        args[1] = f.toString();
        args[2] = "-libjars";
        // the testjob.jar as a temporary jar file
        // rather than creating its own
        args[3] = "build/test/testjar/testjob.jar";
        args[4] = input.toString();
        args[5] = output.toString();
        JobConf jobConf = mr.createJobConf();
        // before running the job, verify that libjar is not in client classpath
        assertTrue("libjar not in client classpath", loadLibJar(jobConf) == null);
        int ret = ToolRunner.run(jobConf, new testshell.ExternalMapReduce(), args);
        // after running the job, verify that libjar is in the client classpath
        assertTrue("libjar added to client classpath", loadLibJar(jobConf) != null);
        assertTrue("not failed ", ret != -1);
        f.delete();
        thisbuildDir.delete();
    } finally {
        if (dfs != null) {
            dfs.shutdown();
        }
        ;
        if (mr != null) {
            mr.shutdown();
        }
        ;
    }
}
