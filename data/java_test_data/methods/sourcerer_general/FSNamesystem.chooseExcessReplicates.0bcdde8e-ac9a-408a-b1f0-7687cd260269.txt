void chooseExcessReplicates(Collection<DatanodeDescriptor> nonExcess, Block b, short replication, DatanodeDescriptor addedNode, DatanodeDescriptor delNodeHint) {
    // first form a rack to datanodes map and
    HashMap<String, ArrayList<DatanodeDescriptor>> rackMap = new HashMap<String, ArrayList<DatanodeDescriptor>>();
    for (Iterator<DatanodeDescriptor> iter = nonExcess.iterator(); iter.hasNext(); ) {
        DatanodeDescriptor node = iter.next();
        String rackName = node.getNetworkLocation();
        ArrayList<DatanodeDescriptor> datanodeList = rackMap.get(rackName);
        if (datanodeList == null) {
            datanodeList = new ArrayList<DatanodeDescriptor>();
        }
        datanodeList.add(node);
        rackMap.put(rackName, datanodeList);
    }
    // split nodes into two sets
    // priSet contains nodes on rack with more than one replica
    // remains contains the remaining nodes
    ArrayList<DatanodeDescriptor> priSet = new ArrayList<DatanodeDescriptor>();
    ArrayList<DatanodeDescriptor> remains = new ArrayList<DatanodeDescriptor>();
    for (Iterator<Entry<String, ArrayList<DatanodeDescriptor>>> iter = rackMap.entrySet().iterator(); iter.hasNext(); ) {
        Entry<String, ArrayList<DatanodeDescriptor>> rackEntry = iter.next();
        ArrayList<DatanodeDescriptor> datanodeList = rackEntry.getValue();
        if (datanodeList.size() == 1) {
            remains.add(datanodeList.get(0));
        } else {
            priSet.addAll(datanodeList);
        }
    }
    // pick one node to delete that favors the delete hint
    // otherwise pick one with least space from priSet if it is not empty
    // otherwise one node with least space from remains
    boolean firstOne = true;
    while (nonExcess.size() - replication > 0) {
        DatanodeInfo cur = null;
        long minSpace = Long.MAX_VALUE;
        // check if we can del delNodeHint
        if (firstOne && delNodeHint != null && nonExcess.contains(delNodeHint) && (priSet.contains(delNodeHint) || (addedNode != null && !priSet.contains(addedNode)))) {
            cur = delNodeHint;
        } else {
            // regular excessive replica removal
            Iterator<DatanodeDescriptor> iter = priSet.isEmpty() ? remains.iterator() : priSet.iterator();
            while (iter.hasNext()) {
                DatanodeDescriptor node = iter.next();
                long free = node.getRemaining();
                if (minSpace > free) {
                    minSpace = free;
                    cur = node;
                }
            }
        }
        firstOne = false;
        // adjust rackmap, priSet, and remains
        String rack = cur.getNetworkLocation();
        ArrayList<DatanodeDescriptor> datanodes = rackMap.get(rack);
        datanodes.remove(cur);
        if (datanodes.isEmpty()) {
            rackMap.remove(rack);
        }
        if (priSet.remove(cur)) {
            if (datanodes.size() == 1) {
                priSet.remove(datanodes.get(0));
                remains.add(datanodes.get(0));
            }
        } else {
            remains.remove(cur);
        }
        nonExcess.remove(cur);
        Collection<Block> excessBlocks = excessReplicateMap.get(cur.getStorageID());
        if (excessBlocks == null) {
            excessBlocks = new TreeSet<Block>();
            excessReplicateMap.put(cur.getStorageID(), excessBlocks);
        }
        excessBlocks.add(b);
        NameNode.stateChangeLog.debug("BLOCK* NameSystem.chooseExcessReplicates: " + "(" + cur.getName() + ", " + b + ") is added to excessReplicateMap");
        // 
        // The 'excessblocks' tracks blocks until we get confirmation
        // that the datanode has deleted them; the only way we remove them
        // is when we get a "removeBlock" message.
        // 
        // The 'invalidate' list is used to inform the datanode the block
        // should be deleted.  Items are removed from the invalidate list
        // upon giving instructions to the namenode.
        // 
        Collection<Block> invalidateSet = recentInvalidateSets.get(cur.getStorageID());
        if (invalidateSet == null) {
            invalidateSet = new ArrayList<Block>();
            recentInvalidateSets.put(cur.getStorageID(), invalidateSet);
        }
        invalidateSet.add(b);
        NameNode.stateChangeLog.debug("BLOCK* NameSystem.chooseExcessReplicates: " + "(" + cur.getName() + ", " + b + ") is added to recentInvalidateSets");
    }
}
