public int search(Board board, int depth, int maxDepth, int alpha, int beta) {
    nbrNodesVisited++;
    int depthLeft = maxDepth - depth;
    // quiescence prep
    boolean canJump = true;
    ArrayList<Board> moves = new ArrayList<Board>();
    board.generateJumps(moves);
    if (moves.size() == 0) {
        board.generateSteps(moves);
        canJump = false;
    }
    nbrMovesCount[moves.size()]++;
    // punish for depth left (embarrassing to lose with much depth left)
    if (moves.isEmpty()) {
        depthCount[depth]++;
        if (board.blackToMove) {
            return BLACK_LOSS + depthLeft;
        } else {
            return WHITE_LOSS - depthLeft;
        }
    }
    for (int i = 0; i < drawBoardsSize; i++) {
        if (board.isSame(drawBoards[i])) {
            depthCount[depth]++;
            if (isBlack) {
                return DRAW;
            } else {
                return -DRAW;
            }
        }
    }
    if (depth >= maxDepth && !canJump) {
        if (depth > deepest) {
            deepest = depth;
        }
        depthCount[depth]++;
        return evaluator.eval(board);
    }
    depth++;
    int nodeCount = 0;
    while ((nodeCount < moves.size()) && (alpha < beta)) {
        Board move = moves.get(nodeCount);
        int value = search(move, depth, maxDepth, alpha, beta);
        if (board.blackToMove) {
            if (value < beta) {
                beta = value;
            }
        } else {
            if (value > alpha) {
                alpha = value;
            }
        }
        nodeCount++;
    }
    int bestValue;
    if (board.blackToMove) {
        bestValue = beta;
    } else {
        bestValue = alpha;
    }
    return bestValue;
}
