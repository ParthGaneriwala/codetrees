private void analyze(ParseNode node) {
    // we can do this for every node only because Elk1 has no inherited attributes.
    analyzeChildren(node);
    GrammarSymbol symbol = node.getSymbol();
    if (symbol.isTerminal(IdentifierToken.class)) {
        // ��֪��index�Ļ᲻������������������
        identifierSynthesize(node);
    } else if (symbol.isTerminal(NumberToken.class)) {
        numberSynthesize(node);
    } else if (symbol.isTerminal(FnumberToken.class)) {
        fnumberSynthesize(node);
    } else if (symbol.isTerminal(BooleanToken.class)) {
        booleanSynthesize(node);
    } else if (symbol.isTerminal(StringConstantToken.class)) {
        stringSynthesize(node);
    } else if (symbol.isOperator(Operator.ASSIGN)) {
        assignSynthesize(node);
    } else if (symbol.isTypeKeyword()) {
        typeSynthesize(node);
    } else // /////////////////////Scope///////////////////////////
    if (symbol.isBlockSymbol(BlockSymbol.START)) {
        Scopes.enterScope();
    } else if (symbol.isBlockSymbol(BlockSymbol.END)) {
        BlockStatementNode hh = new BlockStatementNode(node);
        if (hh.isRoutine()) {
            /*int Rindex = RoutineTable.getTheNumberOfRoutines();
				if(Rindex == 1)
					RoutineTable.setMemSizeOfRoutine_I(Rindex-1, Scopes.getCurrentAllocatedSize());
				else{
					int totalBefore = 0;
					for(int i = 0;i<Rindex-1;i++){
						totalBefore += RoutineTable.lookup(i).getRoutineMemSize();
					} //�����˷��ڴ������ ���һ���֪����һ���Բ��ԣ� Ҫ�ǲ��оͰ�for��ԭ
					RoutineTable.setMemSizeOfRoutine_I(Rindex-1,Scopes.getCurrentAllocatedSize()-totalBefore);
				}*/
            if (this.nowNumOfRoutne == 0)
                RoutineTable.setMemSizeOfRoutine_I(this.nowNumOfRoutne, Scopes.getCurrentAllocatedSize());
            else {
                int totalBefore = 0;
                for (int i = 0; i < this.nowNumOfRoutne; i++) {
                    totalBefore += RoutineTable.lookup(i).getRoutineMemSize();
                }
                // �����˷��ڴ������ ���һ���֪����һ���Բ��ԣ� Ҫ�ǲ��оͰ�for��ԭ
                RoutineTable.setMemSizeOfRoutine_I(this.nowNumOfRoutne, Scopes.getCurrentAllocatedSize() - totalBefore);
            }
        }
        Scopes.leaveScope();
    } else if (symbol.isOperator(Operator.AT)) {
        atSynthesize(node);
    } else if (symbol.isOperator(Operator.PRINT)) {
        printSynthesize(node);
    } else if (symbol.isOperator(Operator.ADD) && node.nChildren() == 2) {
        addSynthesize(node);
    } else if (symbol.isOperator(Operator.ADD) && node.nChildren() == 1) {
        unaryAddSynthesize(node);
    } else if (symbol.isOperator(Operator.MINUS) && node.nChildren() == 1) {
        unarySubSynthesize(node);
    } else if (symbol.isOperator(Operator.MULTIPLY)) {
        multiplySynthesize(node);
    } else if (symbol.isOperator(Operator.MINUS) && node.nChildren() == 2) {
        subSynthesize(node);
    } else if (symbol.isOperator(Operator.DIVIDE)) {
        divideSynthesize(node);
    } else if (symbol.isOperator(Operator.MODULO)) {
        moduloSynthesize(node);
    } else if (symbol.isOperator(Operator.GT) || symbol.isOperator(Operator.LT) || symbol.isOperator(Operator.GTOREQ) || symbol.isOperator(Operator.LTOREQ) || symbol.isOperator(Operator.EQ) || symbol.isOperator(Operator.NOTEQ)) {
        comparisonOperatorSynthesize(node);
    } else if (symbol.isOperator(Operator.OR)) {
        orSynthesize(node);
    } else if (symbol.isOperator(Operator.AND)) {
        andSynthesize(node);
    } else if (symbol.isOperator(Operator.NOT)) {
        notSynthesize(node);
    } else if (symbol.isOperator(Operator.INC)) {
        incSynthesize(node);
    } else if (symbol.isOperator(Operator.DEC)) {
        decSynthesize(node);
    } else // check tofloat and toint
    if (symbol.isKeyword(Keyword.TOFLOAT)) {
        tofloatSynthesize(node);
    } else if (symbol.isKeyword(Keyword.TOINT)) {
        tointSynthesize(node);
    } else if (symbol.isKeyword(Keyword.LENGTH)) {
        lengthSynthesize(node);
    } else // if statement
    if (symbol.isNonterminal(NonterminalGrammarSymbol.IF)) {
        ifStmtSynthesize(node);
    } else if (symbol.isNonterminal(NonterminalGrammarSymbol.THEN)) {
        ifStmtSynthesize(node);
    } else if (symbol.isNonterminal(NonterminalGrammarSymbol.ELSE)) {
        ifStmtSynthesize(node);
    } else if (symbol.isNonterminal(NonterminalGrammarSymbol.INVOCATION)) {
        invovationStmtSynthesize(node);
    } else if (symbol.isNonterminal(NonterminalGrammarSymbol.ARRAY)) {
        arraySynthesize(node);
    } else // loop statement
    if (symbol.isNonterminal(NonterminalGrammarSymbol.LOOP)) {
        loopStmtSynthesize(node);
    } else if (symbol.isLoopSymbol(LoopSymbol.LOOPSTART)) {
        Scopes.enterScope();
    } else if (symbol.isLoopSymbol(LoopSymbol.LOOPEND)) {
        Scopes.leaveScope();
    } else // check tofloat and toint
    if (symbol.isKeyword(Keyword.LEAVE)) {
        loopCtrlSynthesize(node);
    } else if (symbol.isKeyword(Keyword.STAY)) {
        loopCtrlSynthesize(node);
    } else if (symbol.isKeyword(Keyword.LOOP)) {
        loopCtrlSynthesize(node);
    } else // routine: do nothing by now??????????????????????
    if (symbol.isKeyword(Keyword.ROUTINE)) {
        // loopCtrlSynthesize(node);
        this.nowNumOfRoutne++;
    } else if (symbol.isKeyword(Keyword.CALL)) {
    // loopCtrlSynthesize(node);
    } else if (symbol.isKeyword(Keyword.RETURN)) {
        int i = 0;
        if (node.nChildren() == 0) {
            i = 0;
        } else {
            if (node.child(0).getType() == PrimitiveType.INTEGER)
                i = 1;
            else if (node.child(0).getType() == PrimitiveType.FLOAT)
                i = 2;
            else if (node.child(0).getType() == PrimitiveType.BOOLEAN)
                i = 3;
            else if (node.child(0).getType() == PrimitiveType.STRING)
                i = 4;
            else {
            }
            if (!(RoutineTable.lookup(this.nowNumOfRoutne).getRoutineReturnType() == i)) {
                if (i == 1 && RoutineTable.lookup(this.nowNumOfRoutne).getRoutineReturnType() == 2) {
                    KeywordToken tofloatToken = KeywordToken.make(null, "tofloat", Keyword.TOFLOAT);
                    KeywordNode tofloatNode = new KeywordNode(new TokenGrammarSymbol(tofloatToken));
                    tofloatNode.appendChild(node.child(0));
                    tofloatNode.setType(PrimitiveType.FLOAT);
                    node.newChildren();
                    node.appendChild(tofloatNode);
                } else
                    error("the return type is inconsistent with the routine declaration!!");
            }
            if (node.child(0).getSymbol().isTerminal(IdentifierToken.class)) {
                if (node.child(0).getBinding().getNumberOfDim() > 0)
                    error("The array id can not be returned!! only the elements can be returned!!");
            }
        }
    } else if (symbol.isNonterminal(NonterminalGrammarSymbol.PROGRAM)) {
        programSynthesize(node);
    } else if (symbol.isNonterminal(NonterminalGrammarSymbol.BLOCK)) {
        blockSynthesize(node);
    } else if (symbol.isPuctuation(PunctuationSymbol.COLON)) {
    // do nothing
    }
}
