/**
 * @param colors
 * @param cnt
 * @return result
 */
public int[] calc(int[] colors, int cnt) {
    histogram = new Hashtable();
    for (int i = 0; i < colors.length; i++) {
        Integer color = new Integer(colors[i]);
        if (histogram.containsKey(color)) {
            histogram.put(color, new Integer(((Integer) histogram.get(color)).intValue() + 1));
        } else {
            histogram.put(color, new Integer(1));
        }
    }
    HashSet h = new HashSet();
    for (int i = 0; i < colors.length; i++) {
        h.add(new Integer(colors[i]));
    }
    colors = new int[h.size()];
    Iterator iter = h.iterator();
    int cnter = 0;
    while (iter.hasNext()) {
        colors[cnter] = ((Integer) iter.next()).intValue();
        cnter++;
    }
    int ncubes = 0;
    Cube cube = new Cube(colors, 0);
    cube.level = 0;
    shrink(cube);
    cubes = new Cube[cnt];
    cubes[ncubes++] = cube;
    while (ncubes < cnt) {
        int nextCube = -1, colorCnt = 1;
        for (int i = 0; i < ncubes; i++) {
            int length = cubes[i].count;
            if (length > colorCnt) {
                colorCnt = length;
                nextCube = i;
            }
        }
        if (nextCube == -1) {
            break;
        }
        cube = cubes[nextCube];
        int lr = cube.rmax - cube.rmin;
        int lg = cube.gmax - cube.gmin;
        int lb = cube.bmax - cube.bmin;
        if (lr > lg && lr > lb) {
            cube.sort(0);
        } else if (lg > lb) {
            cube.sort(1);
        } else {
            cube.sort(2);
        }
        cubes[ncubes++] = cube.split();
    }
    int[] result = new int[ncubes];
    for (int i = 0; i < ncubes; i++) {
        result[i] = cubes[i].getAverage();
    }
    return result;
}
