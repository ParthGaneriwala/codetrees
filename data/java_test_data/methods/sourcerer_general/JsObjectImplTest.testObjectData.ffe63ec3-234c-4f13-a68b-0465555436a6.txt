@Test
public void testObjectData() throws Exception {
    JsObjectBase<?> jsObject = new JsObjectBase.Impl(callFrame.getInternalContext().getValueLoader(), "test_object", eventMirror);
    assertNotNull(jsObject.asObject());
    assertNull(jsObject.asArray());
    Collection<JsVariableImpl> variables = jsObject.getProperties();
    // "x" and "y"
    assertEquals(2, variables.size());
    Iterator<JsVariableImpl> it = variables.iterator();
    JsVariableImpl firstVar = it.next();
    JsVariableImpl secondVar = it.next();
    Set<String> names = new HashSet<String>();
    // $NON-NLS-1$
    names.add("x");
    // $NON-NLS-1$
    names.add("y");
    names.remove(firstVar.getName());
    names.remove(secondVar.getName());
    assertEquals(0, names.size());
    JsValueBase firstVal = firstVar.getValue();
    JsValueBase secondVal = firstVar.getValue();
    // $NON-NLS-1$
    assertEquals("3", firstVal.getValueString());
    // $NON-NLS-1$
    assertEquals("3", secondVal.getValueString());
    assertNull(firstVal.asObject());
    assertNull(secondVal.asObject());
    JsVariable xProperty = jsObject.getProperty("x");
    // $NON-NLS-1$
    assertEquals("x", xProperty.getName());
    // $NON-NLS-1$
    assertEquals("test_object.x", xProperty.getFullyQualifiedName());
    JsVariable yProperty = jsObject.getProperty("y");
    // $NON-NLS-1$
    assertEquals("y", yProperty.getName());
    // $NON-NLS-1$
    assertEquals("test_object.y", yProperty.getFullyQualifiedName());
}
