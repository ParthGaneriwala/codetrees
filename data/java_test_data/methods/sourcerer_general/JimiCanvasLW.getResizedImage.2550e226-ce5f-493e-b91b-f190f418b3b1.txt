Image getResizedImage(Image which, int width, int height, int resizePolicy, int justificationPolicy) {
    /* We have an issue.  Jdk1.02 doesn't support Image.getScaledImage.  There is a possible
		 * workaround.  The code for getScaledInstance is included.  What we may be able to do, is
		 * package the ReplicatingScaleFilter and the AreaAveragingScaleFilter along with the Jimi
		 * package.  These will both work in a 1.02 environment.  The following image code would have
		 * to be folded into this code.
		 *
		 *****
		 *
		 *  public Image getScaledInstance(int width, int height, int hints) {
		 *		ImageFilter filter;
		 *		if ((hints & (SCALE_SMOOTH | SCALE_AREA_AVERAGING)) != 0) {
		 *	    	filter = new AreaAveragingScaleFilter(width, height);
		 *		} else {
		 *	   	 	filter = new ReplicatingScaleFilter(width, height);
		 *		}
		 *		ImageProducer prod;
		 *		prod = new FilteredImageSource(getSource(), filter);
		 *		return Toolkit.getDefaultToolkit().createImage(prod);
		 *   }
		 *
		 */
    int imageWidth = which.getWidth(this);
    int imageHeight = which.getHeight(this);
    if (resizePolicy == SCROLL) {
        return which;
    } else if (resizePolicy == CROP_AS_NECESSARY) {
        // Use the justification policy to determine the bounding points for
        // the cropping rectangle
        int xStart = 0;
        int yStart = 0;
        int xDiff = imageWidth - width;
        int yDiff = imageHeight - height;
        if (xDiff < 0) {
            xDiff = 0;
        }
        if (yDiff < 0) {
            yDiff = 0;
        }
        if (xDiff == 0 && yDiff == 0) {
            return which;
        }
        int xHalf = xDiff / 2;
        int yHalf = yDiff / 2;
        int doneWidth = width < imageWidth ? width : imageWidth;
        int doneHeight = height < imageHeight ? height : imageHeight;
        switch(justificationPolicy) {
            case CENTER:
                xStart = xHalf;
                yStart = yHalf;
                break;
            case NORTHWEST:
                xStart = 0;
                yStart = 0;
                break;
            case WEST:
                xStart = 0;
                yStart = yHalf;
                break;
            case SOUTHWEST:
                xStart = 0;
                yStart = yDiff;
                break;
            case SOUTH:
                xStart = xHalf;
                yStart = yDiff;
                break;
            case SOUTHEAST:
                xStart = xDiff;
                yStart = yDiff;
                break;
            case EAST:
                xStart = xDiff;
                yStart = yHalf;
                break;
            case NORTHEAST:
                xStart = xDiff;
                yStart = 0;
                break;
            case NORTH:
                xStart = xHalf;
                yStart = 0;
                break;
        }
        // Do the crop
        ImageFilter filter = new CropImageFilter(xStart, yStart, imageWidth, imageHeight);
        ImageProducer prod = new FilteredImageSource(which.getSource(), filter);
        Image result = Toolkit.getDefaultToolkit().createImage(prod);
        which.flush();
        GraphicsUtils.waitForImage(this, result);
        return result;
    } else if (resizePolicy == SCALE) {
        // Stretch the image to fit the width and height
        /* for 1.02 workaround

			return which.getScaledInstance(width, height, Image.SCALE_DEFAULT);

			*/
        ImageFilter filter;
        if (getScalingPolicy() == AREA_AVERAGING) {
            filter = new AreaAveragingScaleFilter(width, height);
        } else {
            filter = new ReplicatingScaleFilter(width, height);
        }
        ImageProducer prod = new FilteredImageSource(which.getSource(), filter);
        return Toolkit.getDefaultToolkit().createImage(prod);
    } else if (resizePolicy == BEST_FIT) {
        // Determine which axis is the largest (ratio of image to axis)
        float xRatio = (float) width / (float) imageWidth;
        float yRatio = (float) height / (float) imageHeight;
        int xDistance;
        int yDistance;
        float correctionValue;
        if (xRatio < yRatio) {
            xDistance = (int) (imageWidth * xRatio);
            yDistance = (int) (imageHeight * xRatio);
        } else {
            xDistance = (int) (imageWidth * yRatio);
            yDistance = (int) (imageHeight * yRatio);
        }
        ImageFilter filter;
        if (getScalingPolicy() == AREA_AVERAGING) {
            filter = new AreaAveragingScaleFilter(xDistance, yDistance);
        } else {
            filter = new ReplicatingScaleFilter(xDistance, yDistance);
        }
        ImageProducer prod = new FilteredImageSource(which.getSource(), filter);
        return Toolkit.getDefaultToolkit().createImage(prod);
    } else {
        // FIT_TO_WIDTH
        if (imageWidth < fitWidth) {
            return which;
        }
        int w = (fitWidth == -1) ? width : fitWidth;
        float ratio = (float) w / (float) imageWidth;
        int ySize = (int) (imageHeight * ratio);
        // check if the cache already has a fit image
        if ((cacheImage != null) && (cacheImage.getWidth(null) == w) && (cacheImage.getHeight(null) == ySize)) {
            return cacheImage;
        }
        ImageFilter filter;
        if (getScalingPolicy() == AREA_AVERAGING) {
            filter = new AreaAveragingScaleFilter(w, ySize);
        } else {
            filter = new ReplicatingScaleFilter(w, ySize);
        }
        ImageProducer prod = new FilteredImageSource(which.getSource(), filter);
        return Toolkit.getDefaultToolkit().createImage(prod);
    }
}
