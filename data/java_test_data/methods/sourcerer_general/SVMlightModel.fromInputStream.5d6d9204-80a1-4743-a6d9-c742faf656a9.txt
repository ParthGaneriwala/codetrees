public static SVMlightModel fromInputStream(InputStream modelStream) throws IOException {
    SVMlightModel model = new SVMlightModel();
    SVMlightReader in = new SVMlightReader(modelStream);
    String buffer;
    // Model File Version
    buffer = in.readLine();
    model.version = buffer;
    // Kernel Type and Parameters
    int ktype = Integer.valueOf(in.readLine());
    // kpar_degree
    int kpar_degree = Integer.valueOf(in.readLine());
    // kpar_gamma
    double kpar_gamma = Double.valueOf(in.readLine());
    // kpar_s
    double kpar_s = Double.valueOf(in.readLine());
    // kpar_c
    double kpar_c = Double.valueOf(in.readLine());
    // kpar_u
    in.readLine();
    switch(ktype) {
        case 0:
            // linear kernel
            model.kernel = new LinearKernel();
            break;
        case 1:
            // polynomial kernel
            model.kernel = new PolynomialKernel(kpar_s, kpar_c, kpar_degree);
            break;
        case 2:
            // rbf kernel
            model.kernel = new RBFKernel(kpar_gamma);
            break;
        case 3:
            // sigmoid kernel
            model.kernel = new SigmoidKernel(kpar_s, kpar_c);
            break;
        default:
            throw new UnsupportedKernelError();
    }
    // Highest Feature Index
    in.readLine();
    // Number of Training Documents
    in.readLine();
    // Number of Support Vectors
    int numberOfSupportVectors = Integer.valueOf(in.readLine()) - 1;
    // Threshold b
    model.bias = Double.valueOf(in.readLine());
    // Support Vectors
    model.supportVectors = new SupportVector[numberOfSupportVectors];
    for (int i = 0; i < numberOfSupportVectors; i++) {
        model.supportVectors[i] = readSV(in);
    }
    try {
        model.compress();
    } catch (InvalidFeatureVectorValueException e) {
        throw new IOException(e);
    }
    return model;
}
