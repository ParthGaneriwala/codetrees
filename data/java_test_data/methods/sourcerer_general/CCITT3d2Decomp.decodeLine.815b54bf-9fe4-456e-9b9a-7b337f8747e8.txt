public void decodeLine(byte[] Dest, int numPixels) throws JimiException {
    if ((LastLine == null) || (LastLine.length != Dest.length)) {
        LastLine = new byte[Dest.length];
        if (invertOut_)
            setArrayFF(LastLine);
    }
    // initialise the output buffer to all Zero's as outputBitRun() only writes 1 bits!!!
    setArrayZero(Dest);
    // Empezamos donde no hay papel
    int A0 = -1;
    byte curColor = (byte) 0;
    // for modeHorizontal
    int runLen;
    if (invertOut_) {
        // inverted output conditions to other branch.
        while (A0 < numPixels) {
            int B1 = findB1(A0, numPixels, curColor);
            if (A0 == -1)
                A0 = 0;
            int dictWord = decode2DWord();
            switch(dictWord) {
                case modePass:
                    curColor = (byte) (curColor ^ 1);
                    B1 = findBitColorChange(numPixels, curColor, ++B1);
                    if (curColor == 1)
                        outputBitRun(Dest, A0, B1 - A0);
                    A0 += B1 - A0;
                    break;
                case modeHorizontal:
                    runLen = getRunLength(curColor);
                    if (curColor == 0)
                        outputBitRun(Dest, A0, runLen);
                    A0 += runLen;
                    curColor = (byte) (curColor ^ 1);
                    runLen = getRunLength(curColor);
                    if (curColor == 0)
                        outputBitRun(Dest, A0, runLen);
                    A0 += runLen;
                    break;
                case modeV0:
                    if (curColor == 0)
                        outputBitRun(Dest, A0, B1 - A0);
                    A0 += (B1 - A0);
                    break;
                case modeVR1:
                    if (curColor == 0)
                        outputBitRun(Dest, A0, 1 + B1 - A0);
                    A0 += (1 + B1 - A0);
                    break;
                case modeVR2:
                    if (curColor == 0)
                        outputBitRun(Dest, A0, 2 + B1 - A0);
                    A0 += (2 + B1 - A0);
                    break;
                case modeVR3:
                    if (curColor == 0)
                        outputBitRun(Dest, A0, 3 + B1 - A0);
                    A0 += (3 + B1 - A0);
                    break;
                case modeVL1:
                    if (curColor == 0)
                        outputBitRun(Dest, A0, B1 - A0 - 1);
                    A0 += (B1 - A0 - 1);
                    break;
                case modeVL2:
                    if (curColor == 0)
                        outputBitRun(Dest, A0, B1 - A0 - 2);
                    A0 += (B1 - A0 - 2);
                    break;
                case modeVL3:
                    if (curColor == 0)
                        outputBitRun(Dest, A0, B1 - A0 - 3);
                    A0 += (B1 - A0 - 3);
                    break;
            }
            curColor = (byte) (curColor ^ 1);
        }
    } else {
        while (A0 < numPixels) {
            /* Busca el primer elemento que cambia de color a la derecha de A0 
				   y de color opuesto que A0 */
            int B1 = findB1(A0, numPixels, curColor);
            // No puedo escribir donde no hay papel
            if (A0 == -1)
                A0 = 0;
            int dictWord = decode2DWord();
            switch(dictWord) {
                case modePass:
                    curColor = (byte) (curColor ^ 1);
                    B1 = findBitColorChange(numPixels, curColor, ++B1);
                    if (// this is same as (curColor ^ 1) == 1
                    curColor == 0)
                        outputBitRun(Dest, A0, B1 - A0);
                    A0 += B1 - A0;
                    break;
                case modeHorizontal:
                    runLen = getRunLength(curColor);
                    if (curColor == 1)
                        outputBitRun(Dest, A0, runLen);
                    A0 += runLen;
                    curColor = (byte) (curColor ^ 1);
                    runLen = getRunLength(curColor);
                    if (curColor == 1)
                        outputBitRun(Dest, A0, runLen);
                    A0 += runLen;
                    break;
                case modeV0:
                    if (curColor == 1)
                        outputBitRun(Dest, A0, B1 - A0);
                    A0 += (B1 - A0);
                    break;
                case modeVR1:
                    if (curColor == 1)
                        outputBitRun(Dest, A0, 1 + B1 - A0);
                    A0 += (1 + B1 - A0);
                    break;
                case modeVR2:
                    if (curColor == 1)
                        outputBitRun(Dest, A0, 2 + B1 - A0);
                    A0 += (2 + B1 - A0);
                    break;
                case modeVR3:
                    if (curColor == 1)
                        outputBitRun(Dest, A0, 3 + B1 - A0);
                    A0 += (3 + B1 - A0);
                    break;
                case modeVL1:
                    if (curColor == 1)
                        outputBitRun(Dest, A0, B1 - A0 - 1);
                    A0 += (B1 - A0 - 1);
                    break;
                case modeVL2:
                    if (curColor == 1)
                        outputBitRun(Dest, A0, B1 - A0 - 2);
                    A0 += (B1 - A0 - 2);
                    break;
                case modeVL3:
                    if (curColor == 1)
                        outputBitRun(Dest, A0, B1 - A0 - 3);
                    A0 += (B1 - A0 - 3);
                    break;
            }
            curColor = (byte) (curColor ^ 1);
        }
    }
    // save current line as previous for next time
    System.arraycopy(Dest, 0, LastLine, 0, Dest.length);
}
