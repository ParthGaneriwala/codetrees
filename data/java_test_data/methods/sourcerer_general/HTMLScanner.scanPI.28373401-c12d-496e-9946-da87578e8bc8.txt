// scanMarkupContent(XMLStringBuffer,char):boolean
protected void scanPI() throws IOException {
    if (DEBUG_BUFFER) {
        System.out.print("(scanPI: ");
        printBuffer();
        System.out.println();
    }
    if (fReportErrors) {
        fErrorReporter.reportWarning("HTML1008", null);
    }
    // scan processing instruction
    String target = scanName();
    if (target != null && !target.equalsIgnoreCase("xml")) {
        while (true) {
            int c = read();
            if (c == '\r' || c == '\n') {
                fCurrentEntity.lineNumber++;
                fCurrentEntity.columnNumber = 1;
                if (c == '\r') {
                    c = read();
                    if (c != '\n') {
                        fCurrentEntity.offset--;
                    }
                }
                continue;
            }
            if (c == -1) {
                break;
            }
            if (c != ' ' && c != '\t') {
                fCurrentEntity.offset--;
                fCurrentEntity.columnNumber--;
                break;
            }
        }
        fStringBuffer.clear();
        while (true) {
            int c = read();
            if (c == '?' || c == '/') {
                char c0 = (char) c;
                c = read();
                if (c == '>') {
                    break;
                } else {
                    fStringBuffer.append(c0);
                    fCurrentEntity.offset--;
                    fCurrentEntity.columnNumber--;
                    continue;
                }
            } else if (c == '\r' || c == '\n') {
                fStringBuffer.append('\n');
                fCurrentEntity.lineNumber++;
                fCurrentEntity.columnNumber = 1;
                if (c == '\r') {
                    c = read();
                    if (c != '\n') {
                        fCurrentEntity.offset--;
                    }
                }
                continue;
            } else if (c == -1) {
                break;
            } else {
                fStringBuffer.append((char) c);
            }
        }
        XMLString data = fStringBuffer;
        if (fDocumentHandler != null) {
            fEndLineNumber = fCurrentEntity.lineNumber;
            fEndColumnNumber = fCurrentEntity.columnNumber;
            fDocumentHandler.processingInstruction(target, data, locationAugs());
        }
    } else // scan xml/text declaration
    {
        int beginLineNumber = fBeginLineNumber;
        int beginColumnNumber = fBeginColumnNumber;
        fAttributes.removeAllAttributes();
        int aindex = 0;
        while (scanPseudoAttribute(fAttributes)) {
            fAttributes.getName(aindex, fQName);
            fQName.rawname = fQName.rawname.toLowerCase();
            fAttributes.setName(aindex, fQName);
            aindex++;
        }
        if (fDocumentHandler != null) {
            String version = fAttributes.getValue("version");
            String encoding = fAttributes.getValue("encoding");
            String standalone = fAttributes.getValue("standalone");
            fBeginLineNumber = beginLineNumber;
            fBeginColumnNumber = beginColumnNumber;
            fEndLineNumber = fCurrentEntity.lineNumber;
            fEndColumnNumber = fCurrentEntity.columnNumber;
            fDocumentHandler.xmlDecl(version, encoding, standalone, locationAugs());
        }
    }
    if (DEBUG_BUFFER) {
        System.out.print(")scanPI: ");
        printBuffer();
        System.out.println();
    }
}
