public void testAllocateSeats() throws Exception {
    // creating the data objects.
    Show show = new Show("show");
    Performance performance = new Performance(show, new Date(), null);
    SeatClass seatClass = new SeatClass("code", "description");
    PriceBand priceBand = new PriceBand(seatClass, new BigDecimal(1.0));
    ReservationRequest request = new ReservationRequest(performance, priceBand, 2, 5);
    request.setBookingFee(new BigDecimal(1.0));
    Seat seat1 = new Seat("seat1");
    Seat seat2 = new Seat("seat2");
    Seat seat3 = new Seat("seat3");
    final Seat[] seats = new Seat[] { seat1, seat2, seat3 };
    // setting the expectations from the dao.
    daoMock.getAvailableSeats(performance, seatClass);
    daoMockControl.setReturnValue(seats);
    final Seat[] seatsToReserve = new Seat[] { seat1, seat2 };
    daoMock.getCostOfSeats(performance, seatsToReserve);
    daoMockControl.setReturnValue(new BigDecimal(2.0));
    final Booking booking = new Booking();
    daoMock.reserveSeats(seatsToReserve, performance, booking);
    // we create a new box office here for a reason. Sometimes objects that are created within a the tested
    // methods are hard to mock. The easiest solution to that is to extract the creation of those object to
    // protected methods within the tested class and then override them to control what object they return.
    boxOffice = new BoxOfficeImpl() {

        protected Seat[] selectSeatsFromAvailableSeats(Seat[] availableSeats, int numberOfSeats) {
            assertSame(seats, availableSeats);
            assertEquals("number of seats to reserve", 2, numberOfSeats);
            return seatsToReserve;
        }

        protected Booking createBooking(int seatCount, BigDecimal price, Date holdUntil) {
            assertEquals("price of booking", 2.0 + 1.0, price.doubleValue(), 0.001);
            assertEquals("seat count", 2, seatCount);
            return booking;
        }
    };
    boxOffice.setBoxOfficeDao(daoMock);
    daoMockControl.replay();
    // exectuing the tested method.
    Reservation reservation = boxOffice.allocateSeats(request);
    // assertions and verifications
    assertSame(booking, reservation.getBooking());
    assertSame(seatsToReserve, reservation.getSeats());
    daoMockControl.verify();
}
