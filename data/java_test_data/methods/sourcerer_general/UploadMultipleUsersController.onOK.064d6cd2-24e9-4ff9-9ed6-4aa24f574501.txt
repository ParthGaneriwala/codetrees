@SuppressWarnings("unchecked")
public void onOK(Event event) {
    if (path == null) {
        uploadUsersWindow.getFellow("messagePanel").setVisible(true);
        Label message = (Label) uploadUsersWindow.getFellow("messageLabel");
        message.setValue("You must specify a workspace location");
        return;
    }
    int usernameCol = -1, passwordCol = -1;
    Listhead head = csvTable.getListhead();
    List<Component> children = head.getChildren();
    for (int i = 1; i < children.size(); i++) {
        Listheader header = (Listheader) children.get(i);
        Listbox listbox = (Listbox) header.getChildren().get(0);
        Listitem selItem = listbox.getSelectedItem();
        if (selItem != null) {
            if (selItem.getLabel().equals("Username")) {
                usernameCol = i - 1;
            } else if (selItem.getLabel().equals("Password")) {
                passwordCol = i - 1;
            }
        }
    }
    int authPol = authPolicy.getSelectedIndex();
    for (Listitem row : (List<Listitem>) csvTable.getItems()) {
        String[] rowData = (String[]) row.getValue();
        String username = (usernameCol != -1) ? rowData[usernameCol] : null;
        if (username == null) {
            continue;
        }
        if (username.contains("@")) {
            username = username.substring(0, username.indexOf('@'));
        }
        // TODO generate random passwords if necessary
        String authenticator;
        boolean needToMailPassword = false;
        if (authPol == AUTH_POLICY_LDAP) {
            authenticator = "ldap";
        } else {
            authenticator = "local";
            if (authPol == AUTH_POLICY_LOCAL_RANDOM_PASSES) {
                needToMailPassword = true;
            }
        }
        String password = (passwordCol != -1) ? rowData[passwordCol] : generateRandomPassword();
        UserRegistry.getInstance().createUser(username, password, path, authenticator);
        if (needToMailPassword) {
        // TODO send e-mail to user
        }
        if (addUsersToGroupCheckbox.isChecked()) {
            String groupName = groupToAddUsers.getValue();
            PermissionsManager.getInstance().addUserToGroup(username, GroupFactory.groupWithName(groupName));
        }
    }
    uploadUsersWindow.detach();
}
