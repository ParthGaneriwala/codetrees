protected final void mSTRING1(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
    int _ttype;
    Token _token = null;
    int _begin = text.length();
    _ttype = STRING1;
    int _saveIndex;
    boolean synPredMatched189 = false;
    if (((LA(1) == '\'') && (LA(2) == '\'') && (LA(3) == '\''))) {
        int _m189 = mark();
        synPredMatched189 = true;
        inputState.guessing++;
        try {
            {
                mQUOTE3S(false);
            }
        } catch (RecognitionException pe) {
            synPredMatched189 = false;
        }
        rewind(_m189);
        inputState.guessing--;
    }
    if (synPredMatched189) {
        _saveIndex = text.length();
        mQUOTE3S(false);
        text.setLength(_saveIndex);
        {
            _loop194: do {
                // nongreedy exit test
                if ((LA(1) == '\'') && (LA(2) == '\'') && (LA(3) == '\''))
                    break _loop194;
                boolean synPredMatched192 = false;
                if (((LA(1) == '\n' || LA(1) == '\r') && ((LA(2) >= '\u0000' && LA(2) <= '\ufffe')) && ((LA(3) >= '\u0000' && LA(3) <= '\ufffe')))) {
                    int _m192 = mark();
                    synPredMatched192 = true;
                    inputState.guessing++;
                    try {
                        {
                            mNL(false);
                        }
                    } catch (RecognitionException pe) {
                        synPredMatched192 = false;
                    }
                    rewind(_m192);
                    inputState.guessing--;
                }
                if (synPredMatched192) {
                    mNL(false);
                } else if ((_tokenSet_8.member(LA(1))) && ((LA(2) >= '\u0000' && LA(2) <= '\ufffe')) && ((LA(3) >= '\u0000' && LA(3) <= '\ufffe'))) {
                    {
                        match(_tokenSet_8);
                    }
                } else if ((LA(1) == '\\')) {
                    mESCAPE(false);
                } else {
                    break _loop194;
                }
            } while (true);
        }
        _saveIndex = text.length();
        mQUOTE3S(false);
        text.setLength(_saveIndex);
    } else if ((LA(1) == '\'') && ((LA(2) >= '\u0000' && LA(2) <= '\ufffe')) && (true)) {
        _saveIndex = text.length();
        match('\'');
        text.setLength(_saveIndex);
        {
            _loop196: do {
                // nongreedy exit test
                if ((LA(1) == '\'') && (true))
                    break _loop196;
                if ((_tokenSet_8.member(LA(1))) && ((LA(2) >= '\u0000' && LA(2) <= '\ufffe'))) {
                    matchNot('\\');
                } else if ((LA(1) == '\\')) {
                    mESCAPE(false);
                } else {
                    break _loop196;
                }
            } while (true);
        }
        _saveIndex = text.length();
        match('\'');
        text.setLength(_saveIndex);
    } else {
        throw new NoViableAltForCharException((char) LA(1), getFilename(), getLine(), getColumn());
    }
    if (_createToken && _token == null && _ttype != Token.SKIP) {
        _token = makeToken(_ttype);
        _token.setText(new String(text.getBuffer(), _begin, text.length() - _begin));
    }
    _returnToken = _token;
}
