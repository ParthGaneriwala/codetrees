Table SYSTEM_CLASSPRIVILEGES() throws HsqlException {
    Table t = sysTables[SYSTEM_CLASSPRIVILEGES];
    if (t == null) {
        t = createBlankTable(sysTableHsqlNames[SYSTEM_CLASSPRIVILEGES]);
        addColumn(t, "CLASS_CAT", Types.VARCHAR);
        addColumn(t, "CLASS_SCHEM", Types.VARCHAR);
        // not null
        addColumn(t, "CLASS_NAME", Types.VARCHAR, false);
        // not null
        addColumn(t, "GRANTOR", Types.VARCHAR, false);
        // not null
        addColumn(t, "GRANTEE", Types.VARCHAR, false);
        // not null
        addColumn(t, "PRIVILEGE", Types.VARCHAR, 7, false);
        // not null
        addColumn(t, "IS_GRANTABLE", Types.VARCHAR, 3, false);
        t.createPrimaryKey(null, new int[] { 2, 4, 5 }, true);
        return t;
    }
    // calculated column values
    String clsCat;
    String clsSchem;
    String clsName;
    String grantorName;
    String granteeName;
    String privilege;
    String isGrantable;
    // intermediate holders
    UserManager um;
    HsqlArrayList users;
    HashSet classNameSet;
    Iterator classNames;
    User granteeUser;
    Object[] row;
    // column number mappings
    final int icls_cat = 0;
    final int icls_schem = 1;
    final int icls_name = 2;
    final int igrantor = 3;
    final int igrantee = 4;
    final int iprivilege = 5;
    final int iis_grntbl = 6;
    // Initialization
    grantorName = GranteeManager.DBA_ADMIN_ROLE_NAME;
    um = database.getUserManager();
    users = um.listVisibleUsers(session, true);
    // Do it.
    for (int i = 0; i < users.size(); i++) {
        granteeUser = (User) users.get(i);
        granteeName = granteeUser.getName();
        isGrantable = granteeUser.isAdmin() ? "YES" : "NO";
        classNameSet = granteeUser.getGrantedClassNames(false);
        if (granteeUser.isPublic()) {
            ns.addBuiltinToSet(classNameSet);
        }
        classNames = classNameSet.iterator();
        // boucherb@users 20030305 - TODO completed.
        // "EXECUTE" is closest to correct (from: SQL 200n ROUTINE_PRIVILEGES)
        // There is nothing even like CLASS_PRIVILEGES table under SQL 200n spec.
        privilege = "EXECUTE";
        while (classNames.hasNext()) {
            clsName = (String) classNames.next();
            clsCat = ns.getCatalogName(clsName);
            clsSchem = ns.getSchemaName(clsName);
            row = t.getEmptyRowData();
            row[icls_cat] = clsCat;
            row[icls_schem] = clsSchem;
            row[icls_name] = clsName;
            row[igrantor] = grantorName;
            row[igrantee] = granteeName;
            row[iprivilege] = privilege;
            row[iis_grntbl] = isGrantable;
            t.insertSys(row);
        }
        classNames = ns.iterateAccessibleTriggerClassNames(granteeUser);
        // boucherb@users 20030305 - TODO completed.
        // "TRIGGER" is closest to correct. (from: SQL 200n TABLE_PRIVILEGES)
        // There is nothing even like CLASS_PRIVILEGES table under SQL 200n spec.
        privilege = "TRIGGER";
        while (classNames.hasNext()) {
            clsName = (String) classNames.next();
            clsCat = ns.getCatalogName(clsName);
            clsSchem = ns.getSchemaName(clsName);
            row = t.getEmptyRowData();
            row[icls_cat] = clsCat;
            row[icls_schem] = clsSchem;
            row[icls_name] = clsName;
            row[igrantor] = grantorName;
            row[igrantee] = granteeName;
            row[iprivilege] = privilege;
            row[iis_grntbl] = isGrantable;
            t.insertSys(row);
        }
    }
    t.setDataReadOnly(true);
    return t;
}
