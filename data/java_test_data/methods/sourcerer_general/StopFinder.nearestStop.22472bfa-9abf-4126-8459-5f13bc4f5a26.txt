public String nearestStop(String routeName, double yourLat, double yourLong) throws ClassNotFoundException, SQLException {
    int i = 0;
    double[] distance = new double[5];
    String[] stopName = new String[5];
    yourLat = Math.toRadians(yourLat);
    yourLong = Math.toRadians(yourLong);
    String username = "root";
    String password = "";
    String tablename = "the_dash";
    // The field returned from the selection
    String fieldname = "stop_name";
    // Find me all stops within a KM
    // String query = "SELECT acos(sin("+yourLat+") * sin(latitude) + cos("+yourLat+") * cos(latitude) * cos(longitude - ("+yourLong+"))) * 3956 as id, " +fieldname+ " from " + tablename + " order by id";
    String query = "SELECT acos(sin(" + yourLat + ") * sin(latitude) + cos(" + yourLat + ") * cos(latitude) * cos(longitude - (" + yourLong + "))) * 3956 as id, latitude, longitude, " + fieldname + " from " + tablename + " order by id";
    // Standard connection
    String url = "jdbc:mysql://localhost/bus_stops";
    Class.forName("com.mysql.jdbc.Driver");
    Connection con = DriverManager.getConnection(url, username, password);
    Statement stmt = con.createStatement();
    ResultSet rs = stmt.executeQuery(query);
    // con.close();
    if (rs.next()) {
        Double dist = rs.getDouble("id");
        int dist1 = (int) dist.longValue();
        Double lat = rs.getDouble("latitude");
        Double lon = rs.getDouble("longitude");
        lat = Math.toDegrees(lat);
        lon = Math.toDegrees(lon);
        dist -= dist1;
        dist *= 100;
        int dist2 = (int) dist.longValue();
        return String.valueOf(lat) + "," + String.valueOf(lon) + "//" + String.valueOf(dist1) + "." + String.valueOf(dist2) + "//" + rs.getString("stop_name");
    } else
        return new String("Not foud!");
// rs.close();
// return "The closest stop for "+routeName+" is: "+stopName[0]+" which is only "+distance[0]+" miles away!";
}
