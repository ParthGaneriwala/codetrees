public XMLNode toSVG() {
    SVG svg = new SVG();
    svg.setFont(mFont);
    SvgGroup treeGroup = svg.addGroup();
    treeGroup.setAttribute("transform", "scale(1)");
    int lineHeight = (int) TextUtil.getStringRect("A", mFont).getHeight();
    // Determine the scale.
    float treeDistance = getRootedTreeDistance();
    double scalingFactor = mImageTreeWidth / treeDistance;
    assignLineIndexes();
    if (mBranchTraversalLimit != null) {
        // Divide by 2 since it the sum of out and back
        int left = mImageLeftPadding + (int) ((getRootedTreeDistance() - (mBranchTraversalLimit / 2)) * scalingFactor);
        int right = mImageLeftPadding + (int) (getRootedTreeDistance() * scalingFactor);
        List<PhyloNode> leafNodes = getLeafNodes();
        SvgRect thresholdArea = treeGroup.addRect(new Rectangle(new Point(left, mImageTopPadding - lineHeight), new Dimension(right - left, (leafNodes.get(leafNodes.size() - 1).getLineIndex() * lineHeight) + lineHeight)));
        if (mBranchTraversalLimitCSSClass != null) {
            // Let the CSS class specify the styling
            thresholdArea.setAttribute(HTML.CLASS, mBranchTraversalLimitCSSClass);
        } else {
            thresholdArea.addStyle("stroke-width: 1");
            if (mBranchTraversalLimitStrokeColor != null) {
                thresholdArea.addStyle(" stroke:" + mBranchTraversalLimitStrokeColor);
            }
            if (mBranchTraversalLimitFillColor != null) {
                thresholdArea.addStyle(" fill:" + mBranchTraversalLimitFillColor);
            }
        }
        thresholdArea.setAttribute(HTML.ID, BRANCH_TRAVERSAL_LIMIT_ID);
        thresholdArea.setAttribute("min_x", mImageLeftPadding);
        thresholdArea.setAttribute("max_x", mImageLeftPadding + mImageTreeWidth);
        thresholdArea.setAttribute("scalingFactor", scalingFactor);
    }
    for (PhyloNode node : getAllNodes()) {
        Edge<PhyloNode> parentEdge = node.getParentEdge();
        float distance = (parentEdge != null && parentEdge.getDistance() != null ? parentEdge.getDistance() : 0.0f);
        int branchStart = mImageLeftPadding + (int) ((node.getDistanceFromRoot() - distance) * scalingFactor);
        int branchEnd = mImageLeftPadding + (int) (node.getDistanceFromRoot() * scalingFactor);
        // Branch
        SvgLine branch = treeGroup.addLine(new Point(branchStart, mImageTopPadding + (node.getLineIndex() * lineHeight) - (lineHeight / 2)), new Point(branchEnd, mImageTopPadding + (node.getLineIndex() * lineHeight) - (lineHeight / 2)));
        if (distance != 0.0f) {
            branch.setTitle(distance + "");
        }
        if (node.isLeaf()) {
            if (StringUtil.isSet(node.getLabel())) {
                if (node.getColor() != null) {
                    // Create a colored rectangle to go behind the text.
                    Rectangle textBoundBox = TextUtil.getStringRect(node.getLabel(), mFont);
                    SvgRect rect = treeGroup.addRect(new Rectangle(new Point(branchEnd + 10 - 2, mImageTopPadding + node.getLineIndex() * lineHeight - (int) textBoundBox.getMaxY()), new Dimension((int) textBoundBox.getMaxX() + 4, (int) textBoundBox.getMaxY() + 4)));
                    rect.setStyle("stroke-width: 0.5; stroke: #000000; fill:#" + ColorUtil.colorToHex(node.getColor()) + ";");
                // rect.setStyle("fill:#" + ColorUtil.colorToHex(node.getColor()) + ";");
                }
                SvgText label = treeGroup.addText(node.getLabel(), mFont, new Point(branchEnd + 10, mImageTopPadding + node.getLineIndex() * lineHeight));
                if (node.getColor() != null) {
                    label.setFill(new HTMLColor(node.getColor()).getContrastingColor());
                }
            }
        } else {
            for (int lineIndex = node.getVericalLineStartIndex() + 1; lineIndex < node.getVericalLineEndIndex(); lineIndex++) {
                // Add the vertical connector line
                treeGroup.addLine(new Point(branchEnd, mImageTopPadding + (node.getVericalLineStartIndex() * lineHeight) - (lineHeight / 2)), new Point(branchEnd, mImageTopPadding + (node.getVericalLineEndIndex() * lineHeight) - (lineHeight / 2)));
            }
        }
    }
    if (mShowScale) {
        // Add the scale to the bottom.
        int scaleYOffset = (int) treeGroup.getMaxXY().getY() + sSvgScalePadding;
        SvgGroup scalegroup = treeGroup.addGroup();
        // Horizontal axis
        scalegroup.addLine(new Point(mImageLeftPadding, scaleYOffset), new Point(mImageLeftPadding + mImageTreeWidth, scaleYOffset));
        // Tick marks
        int numTicks = 4;
        for (int i = 0; i <= numTicks; i++) {
            scalegroup.addLine(new Point(mImageLeftPadding + (i * mImageTreeWidth / numTicks), scaleYOffset), new Point(mImageLeftPadding + (i * mImageTreeWidth / numTicks), scaleYOffset + sSvgTickHeight));
        }
        // Labels
        String formatString = getFormatString(treeDistance);
        for (int i = 0; i <= numTicks; i++) {
            String label = String.format(formatString, treeDistance * i / numTicks);
            int labelWidth = (int) TextUtil.getStringRect(label, mFont).getWidth();
            scalegroup.addText(label, mFont, new Point(mImageLeftPadding + (i * mImageTreeWidth / numTicks) - (labelWidth / 2), scaleYOffset + sSvgTickHeight + lineHeight));
        }
    }
    return svg;
}
