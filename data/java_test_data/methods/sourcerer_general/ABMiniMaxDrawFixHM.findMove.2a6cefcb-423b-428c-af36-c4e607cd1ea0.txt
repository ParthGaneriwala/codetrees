@Override
public Board findMove(Board board) {
    // REFLECT THE OPPONENTS BEST POSSIBLE SCORE
    assert board.blackToMove == isBlack;
    int bestValue = MIN;
    if (isBlack) {
        bestValue = MAX;
    }
    int alpha = MIN;
    int beta = MAX;
    ArrayList<Board> moves = board.generateMoves();
    Board bestMove = null;
    if (moves.size() > 0) {
        bestMove = moves.get(0);
    }
    for (Board move : moves) {
        int value = search(move, searchDepth, alpha, beta);
        if (isBlack) {
            if (value < bestValue) {
                if (value < beta) {
                    beta = value;
                }
                bestValue = value;
                bestMove = move;
            }
        } else {
            if (value > bestValue) {
                if (value > alpha) {
                    alpha = value;
                }
                bestValue = value;
                bestMove = move;
            }
        }
    }
    if (bestMove != null) {
        if (printBestMoveValue) {
            out.println("The best move has value " + bestValue);
        }
        int nOldPieces = BitUtils.countBits(board.black | board.white);
        int nOldKings = BitUtils.countBits(board.kings);
        int nNewPieces = BitUtils.countBits(bestMove.black | bestMove.white);
        int nNewKings = BitUtils.countBits(bestMove.kings);
        boolean piecesTaken = (nOldPieces - nNewPieces != 0);
        boolean wasCrowned = (nOldKings - nNewKings != 0);
        if (piecesTaken || wasCrowned) {
            boardHistory.clear();
            out.println("cleared");
        }
        Integer occurrences = boardHistory.get(bestMove);
        if (occurrences != null) {
            int o = occurrences + 1;
            out.println("Put board in boardHistory with a count of " + o);
            // GameEngine.printBoard(bestMove);
            boardHistory.put(bestMove, o);
        } else {
            out.println("Put a new board in boardHistory with a count of 1");
            boardHistory.put(bestMove, ONE);
        }
    }
    return bestMove;
}
