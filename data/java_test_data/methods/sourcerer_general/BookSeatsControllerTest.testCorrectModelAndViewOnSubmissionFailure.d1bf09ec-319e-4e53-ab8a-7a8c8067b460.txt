public void testCorrectModelAndViewOnSubmissionFailure() throws Exception {
    // creating the objects.
    Performance performance = new Performance();
    SeatClass seatClass = new SeatClass();
    PriceBand priceBand = new PriceBand();
    priceBand.setSeatClass(seatClass);
    ReservationRequest request = new ReservationRequest();
    request.setPerformance(performance);
    request.setPriceBand(priceBand);
    request.holdFor(5);
    request.setBookingFee(new BigDecimal(3.0));
    MockHttpServletRequest httpRequest = new MockHttpServletRequest("POST", "/reserveSeats.html");
    httpRequest.addParameter("numberOfSeatsRequested", "3");
    httpRequest.getSession(true).setAttribute("formSessionAttributeName", request);
    MockHttpServletResponse httpResponse = new MockHttpServletResponse();
    // setting expectations.
    boxOfficeMock.allocateSeats(request);
    boxOfficeMockControl.setThrowable(new NotEnoughSeatsException(1, 2, 3));
    boxOfficeMock.getAvailableSeatsCount(performance, seatClass);
    boxOfficeMockControl.setReturnValue(2);
    boxOfficeMockControl.replay();
    // executing tested method.
    BookSeatsController bookSeatsController = new BookSeatsController() {

        protected String getFormSessionAttributeName(HttpServletRequest request) {
            return "formSessionAttributeName";
        }
    };
    initController(bookSeatsController);
    ModelAndView mav = bookSeatsController.handleRequest(httpRequest, httpResponse);
    // assertions & verifications.
    assertEquals("the form view name", "formView", mav.getViewName());
    assertSame("the 'reservationRequest' command object", request, mav.getModel().get("reservationRequest"));
    assertEquals("the 'maximumSeats' allowed", new Integer(2), mav.getModel().get("maximumSeats"));
    assertEquals("The 'defaultSelected' number of seats", new Integer(2), mav.getModel().get("defaultSelected"));
    // verifying that the appropriate error is in the model.
    BindException bindException = (BindException) mav.getModel().get(BindException.ERROR_KEY_PREFIX + "reservationRequest");
    assertNotNull("bind exception not null", bindException);
    assertEquals("number of errors", 1, bindException.getErrorCount());
    assertEquals("error code", NotEnoughSeatsException.ERROR_CODE, bindException.getGlobalError().getCode());
    boxOfficeMockControl.verify();
}
