public void receive(Message msg) {
    ChordMessage chordMsg = (ChordMessage) msg.getObject();
    Logger.log(LogType.MESSAGE_RECEIVED, chordMsg.intNodeID + " " + chordMsg.msgType);
    switch(chordMsg.msgType) {
        case BOOTSTRAP:
            {
                // If I am successor for chord.intNodeID then send finger table
                // and
                // update own finger table
                int intSuccessor = fingerTable.findSuccessor(chordMsg.intNodeID);
                if (intSuccessor == intID) {
                    sendBootStrapResponse(msg.getSrc());
                    sendKeys(chordMsg.intNodeID, msg.getSrc());
                }
            }
            break;
        case BOOTSTRAP_RESPONSE:
            {
                nodeMap = (NodeAddressMap) chordMsg.object;
                nodeMap.addrNodes[intID] = channel.getAddress();
                fingerTable.updateOwnFingerTable();
                fingerTable.show();
                sendStatusUp();
            }
            break;
        case STATUS_UP:
            {
                nodeMap.addrNodes[chordMsg.intNodeID] = msg.getSrc();
                fingerTable.updateOwnFingerTable();
                fingerTable.show();
            }
            break;
        case KEYS:
            {
                KeysVector keysVector = (KeysVector) chordMsg.object;
                this.keys = keysVector.keys;
                Enumeration<Integer> e = keys.elements();
                while (e.hasMoreElements()) {
                    Logger.log(LogType.RAW, "The elements are: " + e.nextElement());
                }
            }
            break;
        case EXIT_TRANSFER_KEYS:
            {
                KeysVector keysVector = (KeysVector) chordMsg.object;
                keys.addAll(keysVector.keys);
            }
            break;
        case EXIT:
            {
                nodeMap.addrNodes[chordMsg.intNodeID] = null;
                fingerTable.updateOwnFingerTable();
                fingerTable.show();
            }
            break;
        case SEARCH_RESULT:
            {
                // lngSearchResultNanoTime = System.nanoTime();
                SearchMessage msgSearch = (SearchMessage) chordMsg.object;
                msgSearch.stopTimer();
                msgSearch.intHopCount++;
                HandleSearchResult(chordMsg.intNodeID, msgSearch);
            }
            break;
        case SEARCH_QUERY:
            {
                SearchMessage msgSearch = (SearchMessage) chordMsg.object;
                msgSearch.intHopCount++;
                if (keys.contains(new Integer(msgSearch.intKeyToSearch))) {
                    if (msgSearch.addrSrc.equals(channel.getAddress())) {
                        msgSearch.lngNanoTime = System.nanoTime() - msgSearch.lngNanoTime;
                        gui.displaySearchResult(intID, msgSearch);
                    } else {
                        SendSearchResultBackToOriginalNode(msgSearch);
                    }
                } else {
                    SendSearchFailedBackToOriginalNode(msgSearch);
                }
            }
            break;
        case SEARCH_QUERY_FORWARD:
            {
                SearchMessage msgSearch = (SearchMessage) chordMsg.object;
                msgSearch.intHopCount++;
                searchKey(msgSearch, true);
            }
            break;
        case SEARCH_FAILED:
            {
                // lngSearchResultNanoTime = System.nanoTime();
                gui.displaySearchResult(-1);
            }
            break;
        default:
    }
}
