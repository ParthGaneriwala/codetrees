private void processMe() {
    // Interpolates missing rotations and positions
    {
        int maxKeyRot = keyframeRot.length - 1;
        while (maxKeyRot >= 0 && keyframeRot[maxKeyRot] == null) maxKeyRot--;
        int startIndex = 0;
        while (startIndex != maxKeyRot && startIndex < keyframeRot.length && keyframeRot[startIndex] == null) {
            startIndex++;
        }
        for (int i = 0; i < startIndex; i++) {
            keyframeRot[i] = new Quat4f();
        }
        while (startIndex < maxKeyRot) {
            int next;
            for (next = startIndex + 1; next < maxKeyRot; next++) if (keyframeRot[next] != null)
                break;
            for (int k = startIndex + 1; k < next; k++) {
                keyframeRot[k] = new Quat4f();
                keyframeRot[k].interpolate(keyframeRot[startIndex], keyframeRot[next], ((float) k - startIndex - 1) / (next - startIndex));
            }
            startIndex = next;
        }
        for (int i = maxKeyRot + 1; i < keyframeRot.length; i++) {
            if (maxKeyRot >= keyframeRot.length) {
                maxKeyRot = keyframeRot.length - 1;
            }
            if (maxKeyRot >= 0 && maxKeyRot < keyframeRot.length - 1) {
                keyframeRot[i] = new Quat4f(keyframeRot[maxKeyRot]);
            }
        }
    }
    // Now fix positions
    {
        int maxKeyPos = keyframePos.length - 1;
        int startIndex;
        while (maxKeyPos >= 0 && keyframePos[maxKeyPos] == null) maxKeyPos--;
        startIndex = 0;
        while (startIndex != maxKeyPos && startIndex < keyframePos.length && keyframePos[startIndex] == null) {
            startIndex++;
        }
        for (int i = 0; i < startIndex; i++) {
            keyframePos[i] = new Vector3f();
        }
        while (startIndex < maxKeyPos) {
            int next;
            for (next = startIndex + 1; next < maxKeyPos; next++) if (keyframePos[next] != null)
                break;
            for (int k = startIndex + 1; k < next; k++) {
                keyframePos[k] = new Vector3f();
                keyframePos[k].interpolate(keyframePos[startIndex], keyframePos[next], ((float) k - startIndex - 1) / (next - startIndex));
            }
            startIndex = next;
        }
        for (int i = maxKeyPos + 1; i < keyframePos.length; i++) {
            if (i >= 0 && i < keyframePos.length && maxKeyPos >= 0 && maxKeyPos < keyframePos.length)
                keyframePos[i] = new Vector3f(keyframePos[maxKeyPos]);
        }
    }
}
