public void parseArgs(String[] cmdLineArgs) throws Exception {
    // Has to be first call!!
    super.parseArgs(cmdLineArgs);
    Object collectionOption = this.getParsedCmdLineOption("documents");
    Object extensionsOption = this.getParsedCmdLineOption("extensions");
    Object outputDirOption = this.getParsedCmdLineOption("outputDir");
    Object moveUnknownOption = this.getParsedCmdLineOption("moveUnknown");
    Object verboseOption = this.getParsedCmdLineOption("verbose");
    Object waitOption = this.getParsedCmdLineOption("wait");
    Object transformOption = this.getParsedCmdLineOption("transform");
    Object detectorOption = this.getParsedCmdLineOption("detectors");
    Object charsetsOption = this.getParsedCmdLineOption("charsets");
    if (charsetsOption != null) {
        this.printCharsets = ((Boolean) charsetsOption).booleanValue();
    } else {
        if (collectionOption == null) {
            usage();
            throw new MissingResourceException("Parameter for collection root directory is missing.", "String", "-r");
        }
        this.collectionRoot = new File(collectionOption.toString());
        if (outputDirOption == null) {
            usage();
            throw new MissingResourceException("Parameter for output directory is missing.", "String", "-o");
        }
        this.outputDir = new File(outputDirOption.toString());
        if (extensionsOption != null) {
            this.extensionFilter = new FileFilterExtensions(this.parseCSVList(extensionsOption.toString()));
        } else {
            // Anonymous dummy:
            this.extensionFilter = new FileFilter() {

                public boolean accept(File f) {
                    return true;
                }
            };
        }
        if (moveUnknownOption != null) {
            this.moveUnknown = true;
        }
        if (verboseOption != null) {
            if (((Boolean) verboseOption).booleanValue()) {
                this.verbose = true;
            }
        }
        if (waitOption != null) {
            this.wait = ((Integer) waitOption).intValue() * 1000;
        }
        if (transformOption != null) {
            String charset = (String) transformOption;
            try {
                this.targetCodepage = Charset.forName(charset);
            } catch (Exception e) {
                StringBuffer msg = new StringBuffer();
                msg.append("Given charset name: \"");
                msg.append(charset);
                msg.append("\" for option -t is illegal: \n");
                msg.append("  ");
                msg.append(e.getMessage());
                msg.append("\n");
                msg.append("   Legal values are: \n");
                for (int i = 0; i < parseCodepages.length; i++) {
                    msg.append("    ");
                    msg.append(parseCodepages[i].name());
                    msg.append("\n");
                }
                throw new IllegalArgumentException(msg.toString());
            }
        }
        if (detectorOption != null) {
            String[] detectors = this.parseCSVList((String) detectorOption);
            if (detectors.length == 0) {
                StringBuffer msg = new StringBuffer();
                msg.append("You specified the codepage detector argument \"-d\" but ommited any comma-separated fully qualified class-name.");
                throw new IllegalArgumentException(msg.toString());
            }
            // try to instantiate and cast:
            ICodepageDetector cpDetector = null;
            for (int i = 0; i < detectors.length; i++) {
                try {
                    cpDetector = (ICodepageDetector) SingletonLoader.getInstance().newInstance(detectors[i]);
                    if (cpDetector != null) {
                        this.detector.add(cpDetector);
                    }
                } catch (InstantiationException ie) {
                    System.err.println("Could not instantiate custom ICodepageDetector: " + detectors[i] + " (argument \"-c\"): " + ie.getMessage());
                }
            }
        } else // default detector initialization:
        {
            this.detector.add(new ParsingDetector(this.verbose));
            this.detector.add(JChardetFacade.getInstance());
        }
        this.loadCodepages();
    }
}
