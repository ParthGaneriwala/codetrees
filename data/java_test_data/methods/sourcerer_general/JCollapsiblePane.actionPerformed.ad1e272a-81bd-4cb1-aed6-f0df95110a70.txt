public void actionPerformed(ActionEvent e) {
    /*
       * Pre-1) If startHeight == finalHeight, then we're done so stop the timer
       * 1) Calculate whether we're contracting or expanding. 2) Calculate the
       * delta (which is either positive or negative, depending on the results
       * of (1)) 3) Calculate the alpha value 4) Resize the ContentContainer 5)
       * Revalidate/Repaint the content container
       */
    synchronized (ANIMATION_MUTEX) {
        if (startHeight == finalHeight) {
            animateTimer.stop();
            animateAlpha = animationParams.alphaEnd;
            // still receive focus.
            if (finalHeight > 0) {
                wrapper.showContent();
                validate();
                JCollapsiblePane.this.firePropertyChange(ANIMATION_STATE_KEY, null, "expanded");
                return;
            }
        }
        final boolean contracting = startHeight > finalHeight;
        final int delta_y = contracting ? -1 * animationParams.deltaY : animationParams.deltaY;
        int newHeight = wrapper.getHeight() + delta_y;
        if (contracting) {
            if (newHeight < finalHeight) {
                newHeight = finalHeight;
            }
        } else {
            if (newHeight > finalHeight) {
                newHeight = finalHeight;
            }
        }
        animateAlpha = (float) newHeight / (float) wrapper.c.getPreferredSize().height;
        Rectangle bounds = wrapper.getBounds();
        int oldHeight = bounds.height;
        bounds.height = newHeight;
        wrapper.setBounds(bounds);
        bounds = getBounds();
        bounds.height = (bounds.height - oldHeight) + newHeight;
        currentHeight = bounds.height;
        setBounds(bounds);
        startHeight = newHeight;
        // component such as JTextComponents are used in the container.
        if (contracting) {
            // alphaStart > animateAlpha > alphaEnd
            if (animateAlpha < animationParams.alphaEnd) {
                animateAlpha = animationParams.alphaEnd;
            }
            if (animateAlpha > animationParams.alphaStart) {
                animateAlpha = animationParams.alphaStart;
            }
        } else {
            // alphaStart < animateAlpha < alphaEnd
            if (animateAlpha > animationParams.alphaEnd) {
                animateAlpha = animationParams.alphaEnd;
            }
            if (animateAlpha < animationParams.alphaStart) {
                animateAlpha = animationParams.alphaStart;
            }
        }
        wrapper.alpha = animateAlpha;
        validate();
    }
}
