// end of VerticalFilter()
private BufferedImage VerticalFiltering(BufferedImage pbImage, int iOutH) {
    int iW = pbImage.getWidth();
    int iH = pbImage.getHeight();
    int value = 0;
    BufferedImage pbOut = new BufferedImage(iW, iOutH, BufferedImage.TYPE_INT_RGB);
    for (int y = 0; y < iOutH; y++) {
        int startY;
        int start;
        int Y = (int) (((double) y) * ((double) iH) / ((double) iOutH) + 0.5);
        startY = Y - nHalfDots;
        if (startY < 0) {
            startY = 0;
            start = nHalfDots - Y;
        } else {
            start = 0;
        }
        int stop;
        int stopY = Y + nHalfDots;
        if (stopY > (int) (iH - 1)) {
            stopY = iH - 1;
            stop = nHalfDots + (iH - 1 - Y);
        } else {
            stop = nHalfDots * 2;
        }
        if (start > 0 || stop < nDots - 1) {
            CalTempContrib(start, stop);
            for (int x = 0; x < iW; x++) {
                value = VerticalFilter(pbImage, startY, stopY, start, stop, x, tmpContrib);
                pbOut.setRGB(x, y, value);
            }
        } else {
            for (int x = 0; x < iW; x++) {
                value = VerticalFilter(pbImage, startY, stopY, start, stop, x, normContrib);
                pbOut.setRGB(x, y, value);
            }
        }
    }
    return pbOut;
}
