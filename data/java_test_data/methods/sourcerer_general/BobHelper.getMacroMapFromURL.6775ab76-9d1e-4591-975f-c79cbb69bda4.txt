HashMap<String, String> getMacroMapFromURL(String urlString) {
    Authenticator.setDefault(new MyAuthenticator());
    URL abkuerzungen = null;
    try {
        abkuerzungen = new URL(urlString);
    } catch (MalformedURLException e) {
        log.error("Error: " + e.getMessage());
    }
    InputStream inputStream = null;
    try {
        inputStream = abkuerzungen.openStream();
    } catch (IOException e) {
        log.error("Error: " + e.getMessage());
    }
    BufferedReader in = new BufferedReader(new InputStreamReader(inputStream));
    String line = null;
    StringBuffer buffer = new StringBuffer();
    try {
        inputStream = abkuerzungen.openStream();
        while ((line = in.readLine()) != null) {
            buffer.append(line + "\n");
        }
        in.close();
    } catch (IOException e) {
        log.error("Error: " + e.getMessage());
    }
    String filecontent = buffer.toString();
    HashMap<String, String> stringMap = new HashMap<String, String>();
    if (filecontent != null) {
        // extract all Shortcuts and RegEx patterns from the Shortcut
        // definition file
        String patternRegex = "^([^=]*)(?: )=(?: )(.*)$";
        Pattern pattern = Pattern.compile(patternRegex, Pattern.MULTILINE);
        Matcher matcher = pattern.matcher(filecontent);
        if (matcher != null) {
            int n_macros = 0;
            while (matcher.find()) {
                n_macros++;
                String value = matcher.group(2).replaceAll("\\$", "&dollar;");
                value = value.replaceAll("\\\\", "&backslash;");
                stringMap.put(matcher.group(1), value);
            }
            log.info("Number of macro definitions loaded: " + n_macros);
        }
    }
    return stringMap;
}
