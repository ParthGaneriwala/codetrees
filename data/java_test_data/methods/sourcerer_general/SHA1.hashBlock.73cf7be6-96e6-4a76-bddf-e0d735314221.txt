private void hashBlock() {
    int iA, iB, iC, iD, iE, iTemp;
    for (int t = 16; t <= 79; t++) {
        m_w[t] = shaRotl(m_w[t - 3] ^ m_w[t - 8] ^ m_w[t - 14] ^ m_w[t - 16], 1);
    }
    iA = m_h[0];
    iB = m_h[1];
    iC = m_h[2];
    iD = m_h[3];
    iE = m_h[4];
    // -----Round 1
    for (int t = 0; t <= 19; t++) {
        iTemp = shaRotl(iA, 5) + (((iC ^ iD) & iB) ^ iD) + iE + m_w[t] + 0x5a827999;
        iE = iD;
        iD = iC;
        iC = shaRotl(iB, 30);
        iB = iA;
        iA = iTemp;
    }
    // -----Round 2
    for (int t = 20; t <= 39; t++) {
        iTemp = shaRotl(iA, 5) + (iB ^ iC ^ iD) + iE + m_w[t] + 0x6ed9eba1;
        iE = iD;
        iD = iC;
        iC = shaRotl(iB, 30);
        iB = iA;
        iA = iTemp;
    }
    // -----Round 3
    for (int t = 40; t <= 59; t++) {
        iTemp = shaRotl(iA, 5) + ((iB & iC) | (iD & (iB | iC))) + iE + m_w[t] + 0x8f1bbcdc;
        iE = iD;
        iD = iC;
        iC = shaRotl(iB, 30);
        iB = iA;
        iA = iTemp;
    }
    // -----Round 4
    for (int t = 60; t <= 79; t++) {
        iTemp = shaRotl(iA, 5) + (iB ^ iC ^ iD) + iE + m_w[t] + 0xca62c1d6;
        iE = iD;
        iD = iC;
        iC = shaRotl(iB, 30);
        iB = iA;
        iA = iTemp;
    }
    m_h[0] += iA;
    m_h[1] += iB;
    m_h[2] += iC;
    m_h[3] += iD;
    m_h[4] += iE;
}
