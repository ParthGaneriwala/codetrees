// $ANTLR start "body"
public final CompiladoresParser.body_return body() throws RecognitionException {
    CompiladoresParser.body_return retval = new CompiladoresParser.body_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    CompiladoresParser.function_return function10 = null;
    CompiladoresParser.procedure_return procedure11 = null;
    try {
        dbg.enterRule(getGrammarFileName(), "body");
        if (getRuleLevel() == 0) {
            dbg.commence();
        }
        incRuleLevel();
        dbg.location(82, 1);
        try {
            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:82:7: ( function | procedure )
            int alt5 = 2;
            try {
                dbg.enterDecision(5);
                int LA5_0 = input.LA(1);
                if ((LA5_0 == FUNC)) {
                    alt5 = 1;
                } else if ((LA5_0 == PROC)) {
                    alt5 = 2;
                } else {
                    NoViableAltException nvae = new NoViableAltException("", 5, 0, input);
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
            } finally {
                dbg.exitDecision(5);
            }
            switch(alt5) {
                case 1:
                    dbg.enterAlt(1);
                    // /home/CIN/fmm/Desktop/grammar/Compiladores.g:82:9: function
                    {
                        root_0 = (CommonTree) adaptor.nil();
                        dbg.location(82, 9);
                        pushFollow(FOLLOW_function_in_body515);
                        function10 = function();
                        state._fsp--;
                        adaptor.addChild(root_0, function10.getTree());
                    }
                    break;
                case 2:
                    dbg.enterAlt(2);
                    // /home/CIN/fmm/Desktop/grammar/Compiladores.g:82:20: procedure
                    {
                        root_0 = (CommonTree) adaptor.nil();
                        dbg.location(82, 20);
                        pushFollow(FOLLOW_procedure_in_body519);
                        procedure11 = procedure();
                        state._fsp--;
                        adaptor.addChild(root_0, procedure11.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
        }
        dbg.location(82, 29);
    } finally {
        dbg.exitRule(getGrammarFileName(), "body");
        decRuleLevel();
        if (getRuleLevel() == 0) {
            dbg.terminate();
        }
    }
    return retval;
}
