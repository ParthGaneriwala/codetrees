public static final String setUpWorkSpace() {
    // the value to return;
    String[] StrVol;
    // holds the info of the file to analise, file or folder
    FileConnection currentFile;
    FileConnection dirCreate;
    // holds the info of the childerns if a folder is found
    Enumeration currentFolder;
    // counter of the search
    int j = 0;
    // holds the dir is analised
    StringBuffer bodyDir;
    String reverseExt;
    // hold the info to reverse the path file and found the ext
    StringBuffer extention = new StringBuffer();
    // Main Queue, hold the all info of the system folder phone
    queue.removeAllElements();
    // Queue to process files founded
    fileProc.removeAllElements();
    /*Get the root volumes*/
    Enumeration volumes = FileSystemRegistry.listRoots();
    /*add to the queue to init the search*/
    while (volumes.hasMoreElements()) queue.addElement(base + (String) volumes.nextElement());
    /*have any info to start?*/
    if (queue.size() == 0)
        // dev: needs to setup a exception
        return null;
    try {
        /*stop the search until we have analise all queue*/
        j = 0;
        while (queue.size() != j) {
            try {
                /*open the current folder of the queue*/
                currentFile = (FileConnection) Connector.open((String) queue.elementAt(j));
                /*is a dir?*/
                if (currentFile.isDirectory()) {
                    /*YES, let's begin with the write of the folder*/
                    if (currentFile.canWrite()) {
                        /*ok let's try to create the folder*/
                        dirCreate = (FileConnection) Connector.open((String) queue.elementAt(j) + WorkSpace.toString());
                        if (// if the folder exist only add to the find, other, create
                        !dirCreate.exists()) {
                            // close the current file, don't need
                            currentFile.close();
                            System.err.println(dirCreate.getURL());
                            // create the dir, (WorkSpace)
                            dirCreate.mkdir();
                            // close the dirCreate, don't need
                            dirCreate.close();
                            // write a little readme file in the workspace
                            currentFile = (FileConnection) Connector.open(dirCreate.getURL() + "readme.txt");
                            currentFile.create();
                            DataOutputStream fileStream = currentFile.openDataOutputStream();
                            fileStream.writeChars(ReadmeText);
                            // close all and exit
                            fileStream.close();
                            currentFile.close();
                            return dirCreate.getURL();
                        } else {
                            System.err.println("No se pudo escribir archivo:" + dirCreate.canWrite() + ", " + dirCreate.exists() + "," + dirCreate.getURL());
                            currentFile.close();
                            dirCreate.close();
                            currentFile = (FileConnection) Connector.open(dirCreate.getURL() + "readme.txt");
                            if (currentFile.exists())
                                currentFile.delete();
                            currentFile.create();
                            DataOutputStream fileStream = currentFile.openDataOutputStream();
                            fileStream.writeChars(ReadmeText);
                            currentFile.close();
                            fileStream.close();
                            return dirCreate.getURL();
                        }
                    }
                    /*continue the search*/
                    currentFolder = currentFile.list();
                    while (currentFolder.hasMoreElements()) queue.addElement((String) queue.elementAt(j) + currentFolder.nextElement());
                }
            } catch (SecurityException e) {
            }
            j++;
        }
    } catch (IOException e) {
        e.printStackTrace();
    }
    return null;
}
