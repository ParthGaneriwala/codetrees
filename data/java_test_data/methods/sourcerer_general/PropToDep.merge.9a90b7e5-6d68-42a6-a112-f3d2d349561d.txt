public void merge() {
    TBReader reader;
    TBTree tree;
    int treeIndex;
    String mergeFile;
    PrintStream fout;
    DepTree dTree;
    DepNode dNode;
    TBHeadRules headrules = new TBHeadRules(s_headruleFile);
    MorphEnAnalyzer morph = (s_dictFile != null) ? new MorphEnAnalyzer(s_dictFile) : null;
    TBEnConvert convert = new TBEnConvert(headrules, morph, b_funcTag, b_ec, b_reverseVC);
    s_parseDir += File.separator;
    s_srlDir += File.separator;
    ArrayList<PBInstance> list;
    for (String treePath : getTreePaths()) {
        mergeFile = s_srlDir + treePath.substring(treePath.lastIndexOf(File.separator) + 1) + SRL_EXT;
        reader = new TBReader(s_parseDir + treePath + PARSE_EXT);
        fout = IOUtil.createPrintFileStream(mergeFile);
        System.out.println(mergeFile);
        for (treeIndex = 0; (tree = reader.nextTree()) != null; treeIndex++) {
            list = getPBInstances(treePath, treeIndex);
            if (!b_adjPred)
                removeAdjectivalPredicates(tree, list);
            if (list.isEmpty()) {
                dTree = convert.toDepTree(tree);
                for (int i = 1; i < dTree.size(); i++) {
                    dNode = dTree.get(i);
                    dNode.srlInfo = new SRLInfo();
                }
            } else {
                tree.setPBLocs();
                tree.setAntecedents();
                for (PBInstance instance : list) mergeAux(instance, tree);
                dTree = convert.toSRLTree(tree);
            }
            // fout.println(";"+treePath+" "+treeIndex);
            if (dTree.size() > n_length)
                fout.println(dTree + "\n");
        }
        fout.close();
    }
}
