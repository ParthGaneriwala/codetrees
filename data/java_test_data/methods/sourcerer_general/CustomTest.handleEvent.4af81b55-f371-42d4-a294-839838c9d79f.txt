@Override
public void handleEvent(Event e) {
    Random random = new Random();
    int minGenTextLines = spinner.getSelection();
    String filter = "".equals(chars.getText().trim()) ? null : chars.getText();
    if (characters.getSelection()) {
        filter = filter != null ? filter += ' ' : "qwertyuiopasdfghjklzxcvbnm,." + "     ";
        String text = " ";
        for (int i = 0; text.length() < minGenTextLines * CoolKey.MAX_CHARS_IN_LINE - 4; i++) {
            text += filter.charAt(random.nextInt(text.charAt(i) == ' ' ? filter.length() - 1 : filter.length()));
        }
        CoolKey.setCurrentTest(new TypingTest(text, false));
    } else if (words.getSelection()) {
        if (!chars.getText().matches("^\\p{javaLetter}*$")) {
            MessageBox messageBox = new MessageBox(GUI.shell, SWT.ICON_ERROR);
            messageBox.setText("Generator słów");
            messageBox.setMessage("Podane znaki muszą być literami.");
            messageBox.open();
            return;
        }
        List<String> filteredWords = CoolKey.getDictionary().wordsContaining(filter);
        if (filteredWords.size() == 0) {
            MessageBox messageBox = new MessageBox(GUI.shell, SWT.ICON_ERROR);
            messageBox.setText("Generator słów");
            messageBox.setMessage("Nie znaleziono słów spełniających podane kryteria.");
            messageBox.open();
            return;
        }
        String text = "";
        while (text.length() < minGenTextLines * CoolKey.MAX_CHARS_IN_LINE - 20) {
            text += filteredWords.get(random.nextInt(filteredWords.size())) + ' ';
        }
        CoolKey.setCurrentTest(new TypingTest(text, false));
    } else if (sentences.getSelection()) {
        if (!chars.getText().matches("^\\p{javaLetter}*$")) {
            MessageBox messageBox = new MessageBox(GUI.shell, SWT.ICON_ERROR);
            messageBox.setText("Generator zdań");
            messageBox.setMessage("Podane znaki muszą być literami.");
            messageBox.open();
            return;
        }
        List<String> filteredWords = Utils.filter(Utils.words(CoolKey.TEXT_NORM_DIRECTORY), filter);
        int minGenTextLength = (minGenTextLines - 1) * (CoolKey.MAX_CHARS_IN_LINE - 1);
        CoolKey.setCurrentTest(new TypingTest(Markov.generateMarkovChain(filteredWords, minGenTextLength), false));
    }
    GUI.refresh();
    shell.dispose();
}
