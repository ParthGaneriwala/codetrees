public void move(Point from, Point to, int test) {
    if (isPawnJump(from, to)) {
        enPassantable[test] = true;
        if (from.y < to.y)
            enPassantableLoc[test] = new Point(from.x, from.y + 1);
        else
            enPassantableLoc[test] = new Point(from.x, from.y - 1);
    } else
        enPassantable[test] = false;
    // move a rook if the move is a castle
    if (isCastle(from, to)) {
        BoardSquare // the rook being moved in the castle
        rook, // the rook's destination
        dest;
        // choose rook and destination based on direction of move
        if (to.x > from.x) {
            rook = get(7, from.y);
            dest = get(to.x - 1, from.y);
        } else {
            rook = get(0, from.y);
            dest = get(to.x + 1, from.y);
        }
        // move the rook
        rook.getContents().setMoved(true);
        setSelectedSquare(rook);
        dest.moveSelectedPieceHere();
        lastMoveWasCastle[test] = true;
    } else
        lastMoveWasCastle[test] = false;
    // move the piece and save undo info
    BoardSquare f = get(from), t = get(to);
    oldHasMoved[test] = f.getContents().getMoved();
    lastCaptured[test] = t.getContents();
    // a component is manually removed/added.
    if (test == 0 && t.getContents() != null) {
        BoardSquare sq = new BoardSquare(this);
        // Remove the action listener so the user can't click it.
        sq.removeActionListener(sq.getActionListeners()[0]);
        sq.setContents(t.getContents());
        if (sq.getContents().getColor() == PieceColor.WHITE) {
            game.deadPieces1.add(sq, 0);
            game.deadPieces1.validate();
            game.deadPieces1.repaint();
        } else {
            game.deadPieces2.add(sq, 0);
            game.deadPieces2.validate();
            game.deadPieces2.repaint();
        }
    }
    // -- promote moving piece to queen if appropriate
    if (isPromotion(from, to)) {
        ChessPiece queen = new Queen(f.getContents());
        f.setContents(queen);
        lastMoveWasPromotion[test] = true;
    } else
        lastMoveWasPromotion[test] = false;
    // -- remove the captured pawn and change lastCaptured data if move was
    // en passant
    /*
		if (isEnPassant(from, to)) {
			Point tLoc = t.getPosition(),
			capturedLoc;

			if (f.getLocation().y < tLoc.y)
				capturedLoc = new Point(tLoc.x, tLoc.y + 1);
			else
				capturedLoc = new Point(tLoc.x, tLoc.y - 1);

			if(test == 0){
				lastCaptured[test] = get(capturedLoc).getContents();
			}

			get(capturedLoc).setContents(null);

			lastMoveWasEnPassant[test] = true;
		} else*/
    lastMoveWasEnPassant[test] = false;
    // save move state of captured piece
    if (lastCaptured[test] != null)
        capturedHasMoved[test] = lastCaptured[test].getMoved();
    f.getContents().setMoved(true);
    setSelectedSquare(f);
    t.moveSelectedPieceHere();
    lastMoveFrom[test] = from;
    lastMoveTo[test] = to;
    undoable[test] = true;
}
