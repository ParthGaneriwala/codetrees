public static Timestamp parseString12(String fmt) {
    int h, m, s, pos;
    System.out.println("Got string: " + fmt);
    // Get the hour.
    if (fmt.charAt(0) == '(') {
        try {
            h = Integer.parseInt(fmt.substring(1, 3));
        } catch (NumberFormatException nfe) {
            h = Integer.parseInt(fmt.substring(1, 2));
        }
        pos = 3;
    } else {
        try {
            h = Integer.parseInt(fmt.substring(0, 2));
        } catch (NumberFormatException nfe) {
            h = Integer.parseInt(fmt.substring(0, 1));
        }
        pos = 2;
    }
    // Get the minute.
    if (Character.isDigit(fmt.charAt(pos))) {
        try {
            m = Integer.parseInt(fmt.substring(pos, pos + 2));
        } catch (NumberFormatException nfe) {
            m = Integer.parseInt(fmt.substring(pos, pos + 1));
        }
        pos += 2;
    } else {
        try {
            m = Integer.parseInt(fmt.substring(pos + 1, pos + 3));
        } catch (NumberFormatException nfe) {
            m = Integer.parseInt(fmt.substring(pos + 1, pos + 2));
        }
        pos += 3;
    }
    // Get the second.
    if (Character.isDigit(fmt.charAt(pos))) {
        try {
            s = Integer.parseInt(fmt.substring(pos, pos + 2));
        } catch (NumberFormatException nfe) {
            s = Integer.parseInt(fmt.substring(pos, pos + 1));
        }
        pos += 2;
    } else {
        try {
            s = Integer.parseInt(fmt.substring(pos + 1, pos + 3));
        } catch (NumberFormatException nfe) {
            s = Integer.parseInt(fmt.substring(pos + 1, pos + 2));
        }
        pos += 3;
    }
    // Determine AM/PM.
    while (!Character.isLetter(fmt.charAt(pos)) && pos < fmt.length()) pos++;
    if (fmt.substring(pos, pos + 2).equalsIgnoreCase("pm"))
        h += 12;
    System.out.printf("Got (%2d,%2d,%2d)\n", h, m, s);
    return new Timestamp(h, m, s);
}
