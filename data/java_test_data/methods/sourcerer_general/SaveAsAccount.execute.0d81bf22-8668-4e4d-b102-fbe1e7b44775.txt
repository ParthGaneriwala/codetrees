public boolean execute(ComponentContext context) {
    String url = "";
    String domainName = "";
    String code = "";
    String clientId = "";
    // Component properties
    int businessEmailType = -1;
    int businessAddressType = -1;
    int businessPhoneType = -1;
    int advertisementLeadSourceType = -1;
    int webLeadSourceType = -1;
    int businessFaxType = -1;
    int stageUnclaimed = -1;
    int stageSuggested = -1;
    int stageRequested = -1;
    // A reusable connection
    CRMConnection connection = null;
    String cookie;
    // Populate the variables
    if (!StringUtils.hasText(context.getParameter("suite.url"))) {
        url = context.getApplicationPrefs().get("CONCURSIVE_CRM.SERVER");
    } else {
        url = context.getParameter("suite.url");
    }
    if (!StringUtils.hasText(context.getParameter("suite.domainName"))) {
        domainName = context.getApplicationPrefs().get("CONCURSIVE_CRM.ID");
    } else {
        domainName = context.getParameter("suite.domainName");
    }
    if (!StringUtils.hasText(context.getParameter("suite.code"))) {
        code = context.getApplicationPrefs().get("CONCURSIVE_CRM.CODE");
    } else {
        code = context.getParameter("suite.code");
    }
    clientId = context.getApplicationPrefs().get("CONCURSIVE_CRM.CLIENT");
    cookie = (String) context.getGlobalParameter(parameterName);
    // Create the connection
    connection = new CRMConnection();
    connection.setUrl(url);
    connection.setId(domainName);
    connection.setCode(code);
    // connection.setClientId(clientId);
    // NOTE: the CRMConnection invalidates sessions preventing this from working
    /*if (cookie != null) {
      connection.setCookie(cookie);
    }*/
    // Related info is needed for inserting an Account
    // Load a Hashmap to pass these values around...
    HashMap<String, Integer> lookupListValues = new HashMap<String, Integer>();
    // Note: Hacked together as a short term fix to make the components thread-safe.
    businessEmailType = this.getIdFromValue(connection, context, "lookupContactEmailTypesList", "lookup_contactemail_types", "Business", cookie);
    lookupListValues.put("businessEmailType", businessEmailType);
    businessPhoneType = this.getIdFromValue(connection, context, "lookupContactPhoneTypesList", "lookup_contactphone_types", "Business", cookie);
    lookupListValues.put("businessPhoneType", businessPhoneType);
    businessFaxType = this.getIdFromValue(connection, context, "lookupContactPhoneTypesList", "lookup_contactphone_types", "Business Fax", cookie);
    lookupListValues.put("businessFaxType", businessFaxType);
    businessAddressType = this.getIdFromValue(connection, context, "lookupContactAddressTypesList", "lookup_contactaddress_types", "Business", cookie);
    lookupListValues.put("businessAddressType", businessAddressType);
    advertisementLeadSourceType = this.getIdFromValue(connection, context, "lookupContactSourceList", "lookup_contact_source", "Advertisement", cookie);
    lookupListValues.put("advertisementLeadSourceType", advertisementLeadSourceType);
    webLeadSourceType = this.getIdFromValue(connection, context, "lookupContactSourceList", "lookup_contact_source", "Web", cookie);
    lookupListValues.put("webLeadSourceType", webLeadSourceType);
    stageUnclaimed = this.getIdFromValue(connection, context, "lookupAccountStageList", "lookup_account_stage", "Unclaimed", cookie);
    lookupListValues.put("stageUnclaimed", stageUnclaimed);
    stageSuggested = this.getIdFromValue(connection, context, "lookupAccountStageList", "lookup_account_stage", "Suggested", cookie);
    lookupListValues.put("stageSuggested", stageSuggested);
    stageRequested = this.getIdFromValue(connection, context, "lookupAccountStageList", "lookup_account_stage", "Requested", cookie);
    lookupListValues.put("stageRequested", stageRequested);
    // Load the Account Owner's User id
    int ownerId = 1;
    {
        // Reuse the value between calls
        String lastNameToUse = "ConnectSales";
        String globalOwnerIdParam = getUniqueName() + ".contactList.lastName." + lastNameToUse;
        // Check the global workflow store
        Integer globalValue = (Integer) context.getGlobalParameter(globalOwnerIdParam);
        if (globalValue != null) {
            ownerId = globalValue;
        } else {
            // Add Meta Info with fields required
            ArrayList<String> meta = new ArrayList<String>();
            meta.add("userId");
            connection.setTransactionMeta(meta);
            // Find the sales person
            DataRecord record = new DataRecord();
            record.setName("contactList");
            record.setAction(DataRecord.SELECT);
            record.addField("employeesOnly", "1");
            record.addField("lastName", lastNameToUse);
            connection.save(record);
            int foundValue = Integer.parseInt(connection.getResponseValue("userId"));
            context.setGlobalParameterIfAbsent(globalOwnerIdParam, foundValue);
            ownerId = foundValue;
        }
    }
    // Load the AccountType id based on the project category
    int accountTypeId = -1;
    Project project = (Project) context.getThisObject();
    if (project.getSubCategory1Id() > -1) {
        ProjectCategory subCategory = ProjectUtils.loadProjectCategory(project.getSubCategory1Id());
        if (subCategory != null) {
            accountTypeId = this.getIdFromValue(connection, context, "lookupAccountTypesList", "lookup_account_types", subCategory.getDescription(), cookie);
        }
    }
    // Prepare an account insert transaction
    connection.setAutoCommit(false);
    // Account record transaction
    DataRecord account = new DataRecord();
    account.setAction(DataRecord.INSERT);
    account.setShareKey(true);
    account.setName("account");
    account.addField("enteredBy", "$U{default}");
    account.addField("modifiedBy", "$U{default}");
    account.addField("owner", ownerId);
    // Set the uniqueId
    if (StringUtils.hasText(context.getParameter("lead.custom1"))) {
        account.addField("custom1", context.getParameter("lead.custom1"));
    }
    // Set the stage
    if (StringUtils.hasText(context.getParameter("lead.stageName"))) {
        account.addField("stageName", context.getParameter("lead.stageName"));
        if (context.getParameter("lead.stageName").equalsIgnoreCase("Unclaimed")) {
            account.addField("stageId", stageUnclaimed);
        } else {
            if (context.getParameter("lead.stageName").equalsIgnoreCase("Requested")) {
                account.addField("stageId", stageRequested);
            } else {
                if (context.getParameter("lead.stageName").equalsIgnoreCase("Suggested")) {
                    account.addField("stageId", stageSuggested);
                }
            }
        }
    } else {
        account.addField("stageName", "Unclaimed");
        account.addField("stageId", stageUnclaimed);
    }
    if (StringUtils.hasText(context.getParameter("lead.company"))) {
        account.addField("name", context.getParameter("lead.company"));
    }
    if (StringUtils.hasText(context.getParameter("lead.webPage")) && context.getParameter("lead.webPage").indexOf("${") == -1) {
        account.addField("url", context.getParameter("lead.webPage"));
    }
    if (StringUtils.hasText(context.getParameter("lead.notes"))) {
        account.addField("notes", context.getParameter("lead.notes"));
    }
    // Set the account type
    if (accountTypeId > -1) {
        account.addField("typeList", String.valueOf(accountTypeId));
    }
    connection.save(account);
    addOrganizationRecords(connection, context, lookupListValues);
    // Determine if we need to create an account...
    // If teh Lead Name is not set, skip[ the contact...
    boolean hasFirstName = StringUtils.hasText(context.getParameter("lead.firstName"));
    boolean hasLastName = StringUtils.hasText(context.getParameter("lead.lastName"));
    if (hasFirstName && hasLastName) {
        addContactRecords(connection, context, ownerId, lookupListValues);
    }
    // Submit everything...
    boolean success = connection.commit();
    checkCookie(context, connection, cookie);
    if (!success) {
        System.out.println("SaveAsAccount-> Commit message: " + connection.getLastResponse());
        return false;
    }
    return true;
}
