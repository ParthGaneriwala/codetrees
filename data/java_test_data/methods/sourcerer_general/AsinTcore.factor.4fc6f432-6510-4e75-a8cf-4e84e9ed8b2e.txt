private Tipo factor(int Pasaje) throws AleXcore.ExcepcionCaracterInvalido, AleXcore.ExcepcionComentarioSinCerrar, AleXcore.ExcepcionIdentificadorInvalido, AleXcore.ExcepcionComentarioCerrado, ExcepcionErrorSintactico, ExcepcionErrorSemantico {
    Tipo T;
    Tipo tipoResultado = null;
    /* Se pueden tener factores como -1, +1, -a, +a, -f(a), +f(a) */
    if (ultimoToken.isToken(Token.OPSUMA) && !(ultimoToken.getLexema().toUpperCase().equals("OR"))) {
        String operador;
        operador = ultimoToken.getLexema();
        ultimoToken = alex.getToken();
        if (ultimoToken.isToken(Token.OPSUMA)) {
            throw new ExcepcionErrorSintactico("Factor incorrecto en linea: " + ultimoToken.getLinea());
        } else {
            if (!(ultimoToken.getLexema().toUpperCase().equals("OR"))) {
                tipoResultado = factor(Pasaje);
            } else {
                throw new ExcepcionErrorSintactico("Factor incorrecto en linea: " + ultimoToken.getLinea());
            }
        }
        if (TdS.compatibles(tipoResultado, new Entero())) {
            // Si el token leido era un - multiplica el valor del factor por -1
            if (operador.equals("-")) {
                MepaH.generarInstruccion("APCT " + "-1");
                MepaH.generarInstruccion("MULT");
            }
        } else {
            throw new ExcepcionErrorSemantico("Tipos incompatibles en linea: " + ultimoToken.getLinea());
        }
    } else {
        if (ultimoToken.isToken(Token.PARABRE)) {
            if (Pasaje == REFERENCIA) {
                throw new ExcepcionErrorSemantico("En linea: " + ultimoToken.getLinea() + ". Se requiere un parametro pasado por referencia (no se permite un valor constante)");
            }
            ultimoToken = alex.getToken();
            tipoResultado = expresion(Pasaje);
            if (ultimoToken.isToken(Token.PARCIERRA)) {
                // expresion correcta
                ultimoToken = alex.getToken();
            } else {
                throw new ExcepcionErrorSintactico("Se esperaba ')' en la linea " + ultimoToken.getLinea());
            }
        } else if (ultimoToken.isToken(Token.OPNOT)) {
            ultimoToken = alex.getToken();
            if (Pasaje == REFERENCIA) {
                throw new ExcepcionErrorSemantico("En linea: " + ultimoToken.getLinea() + ". Se requiere un parametro pasado por referencia (no se permite un valor constante)");
            }
            T = factor(Pasaje);
            if (T.esArreglo()) {
                throw new ExcepcionErrorSemantico("En linea: " + ultimoToken.getLinea() + ". No se puede operar con arreglos completos");
            }
            MepaH.generarInstruccion("NEGA");
            return T;
        } else if (ultimoToken.isToken(Token.IDENTIFICADOR)) {
            Elemento idObj;
            String lexema;
            if (TdS.pertenece(ultimoToken.getLexema())) {
                idObj = TdS.getEntrada(ultimoToken.getLexema());
                lexema = ultimoToken.getLexema();
                ultimoToken = alex.getToken();
                tipoResultado = restoFactor(idObj, lexema, Pasaje);
            } else {
                throw new ExcepcionErrorSemantico("En linea: " + ultimoToken.getLinea() + ". El identificador " + ultimoToken.getLexema() + " no est√° definido");
            }
        } else if (ultimoToken.isToken(Token.NUMERO)) {
            if (Pasaje == REFERENCIA) {
                throw new ExcepcionErrorSemantico("En linea: " + ultimoToken.getLinea() + ". Se requiere un parametro pasado por referencia (no se permite un valor constante)");
            }
            // Es un factor correcto
            tipoResultado = new Entero();
            MepaH.generarInstruccion("APCT " + ultimoToken.getLexema());
            ultimoToken = alex.getToken();
        } else {
            throw new ExcepcionErrorSintactico("Expresion incorrecta, alrededor de '" + ultimoToken.getLexema() + "..' en linea: " + ultimoToken.getLinea());
        }
    }
    return tipoResultado;
}
