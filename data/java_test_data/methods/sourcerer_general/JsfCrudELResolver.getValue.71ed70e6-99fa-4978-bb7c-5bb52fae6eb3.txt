public Object getValue(ELContext context, Object base, Object property) {
    if (context == null) {
        throw new NullPointerException();
    }
    String propertyName = null;
    if (property != null) {
        propertyName = property.toString();
    }
    if (JSFCRUD_NULL.equals(propertyName) && base == null) {
        context.setPropertyResolved(true);
        return JSFCRUD_NULL;
    }
    if (JSFCRUD_NULL.equals(propertyName) && !(base instanceof JsfCrudMethod) && !(base instanceof JsfCrudParameterizedMethod) && !(base instanceof JsfCrudTransform)) {
        throw new ELException(JSFCRUD_NULL + " expects a base of type JsfCrudMethod, JsfCrudParameterizedMethod, or JsfCrudTransform; received " + base);
    }
    Object result = null;
    if (JSFCRUD_CLASS.equals(propertyName)) {
        if (base != null) {
            throw new ELException(JSFCRUD_CLASS + " expects a null base; received " + base);
        }
        result = new JsfCrudClass();
        context.setPropertyResolved(true);
        return result;
    } else if (JSFCRUD_METHOD.equals(propertyName)) {
        if (base == null) {
            throw new ELException(JSFCRUD_METHOD + " expects a non-null (possibly JsfCrudClass) base; received null");
        }
        result = new JsfCrudMethod(base);
        context.setPropertyResolved(true);
        return result;
    } else if (JSFCRUD_PARAMS.equals(propertyName)) {
        if (!(base instanceof JsfCrudMethod)) {
            throw new ELException(JSFCRUD_PARAMS + " expects a base of type JsfCrudMethod; received " + base);
        }
        result = new JsfCrudParameterizedMethod((JsfCrudMethod) base);
        context.setPropertyResolved(true);
        return result;
    } else if (JSFCRUD_INVOKE.equals(propertyName)) {
        JsfCrudParameterizedMethod parameterizedMethod = getParameterizedMethodToInvoke(base);
        result = parameterizedMethod.invoke();
        context.setPropertyResolved(true);
        return result;
    } else if (JSFCRUD_TRANSFORM.equals(propertyName)) {
        if (base == null) {
            throw new ELException(JSFCRUD_TRANSFORM + " expects a non-null base; received null");
        }
        result = new JsfCrudTransform(base);
        context.setPropertyResolved(true);
        return result;
    } else if (base instanceof JsfCrudClass) {
        ((JsfCrudClass) base).setType(propertyName);
        result = base;
        context.setPropertyResolved(true);
        return result;
    } else if (base instanceof JsfCrudMethod) {
        JsfCrudMethod baseAsMethod = (JsfCrudMethod) base;
        if (baseAsMethod.getMethodName() == null) {
            baseAsMethod.setMethodName(propertyName);
            result = base;
            context.setPropertyResolved(true);
            return result;
        } else {
            // already have a method name. start adding parameters.
            JsfCrudParameterizedMethod pMethod = new JsfCrudParameterizedMethod(baseAsMethod);
            pMethod.addParameter(property);
            result = pMethod;
            context.setPropertyResolved(true);
            return result;
        }
    } else if (base instanceof JsfCrudParameterizedMethod) {
        ((JsfCrudParameterizedMethod) base).addParameter(property);
        result = base;
        context.setPropertyResolved(true);
        return result;
    } else if (base instanceof JsfCrudTransform) {
        if (JSFCRUD_NULL.equals(propertyName)) {
            ((JsfCrudTransform) base).addNullMethod();
            result = base;
            context.setPropertyResolved(true);
            return result;
        } else if (property instanceof JsfCrudMethod) {
            ((JsfCrudTransform) base).addMethod((JsfCrudMethod) property);
            result = base;
            context.setPropertyResolved(true);
            return result;
        } else {
            result = ((JsfCrudTransform) base).getProperty(propertyName);
            context.setPropertyResolved(true);
            return result;
        }
    }
    return null;
}
