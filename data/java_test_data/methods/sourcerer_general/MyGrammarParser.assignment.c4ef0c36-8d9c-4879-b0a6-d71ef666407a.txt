// $ANTLR start "assignment"
public final MyGrammarParser.assignment_return assignment() throws RecognitionException {
    MyGrammarParser.assignment_return retval = new MyGrammarParser.assignment_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token IDENTIFIER157 = null;
    Token ASSIG158 = null;
    Token ASSIG161 = null;
    MyGrammarParser.expression_return expression159 = null;
    MyGrammarParser.array_call_return array_call160 = null;
    MyGrammarParser.expression_return expression162 = null;
    CommonTree IDENTIFIER157_tree = null;
    CommonTree ASSIG158_tree = null;
    CommonTree ASSIG161_tree = null;
    RewriteRuleTokenStream stream_ASSIG = new RewriteRuleTokenStream(adaptor, "token ASSIG");
    RewriteRuleTokenStream stream_IDENTIFIER = new RewriteRuleTokenStream(adaptor, "token IDENTIFIER");
    RewriteRuleSubtreeStream stream_expression = new RewriteRuleSubtreeStream(adaptor, "rule expression");
    RewriteRuleSubtreeStream stream_array_call = new RewriteRuleSubtreeStream(adaptor, "rule array_call");
    try {
        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:264:11: ( IDENTIFIER ASSIG ( expression ) -> ^( ASSIGNMENT IDENTIFIER expression ) | array_call ASSIG ( expression ) -> ^( ASSIGNMENT array_call expression ) )
        int alt27 = 2;
        int LA27_0 = input.LA(1);
        if ((LA27_0 == IDENTIFIER)) {
            int LA27_1 = input.LA(2);
            if ((LA27_1 == ASSIG)) {
                alt27 = 1;
            } else if ((LA27_1 == ECONCH)) {
                alt27 = 2;
            } else {
                NoViableAltException nvae = new NoViableAltException("", 27, 1, input);
                throw nvae;
            }
        } else {
            NoViableAltException nvae = new NoViableAltException("", 27, 0, input);
            throw nvae;
        }
        switch(alt27) {
            case 1:
                // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:264:13: IDENTIFIER ASSIG ( expression )
                {
                    IDENTIFIER157 = (Token) match(input, IDENTIFIER, FOLLOW_IDENTIFIER_in_assignment2176);
                    stream_IDENTIFIER.add(IDENTIFIER157);
                    ASSIG158 = (Token) match(input, ASSIG, FOLLOW_ASSIG_in_assignment2178);
                    stream_ASSIG.add(ASSIG158);
                    // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:264:30: ( expression )
                    // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:264:31: expression
                    {
                        pushFollow(FOLLOW_expression_in_assignment2181);
                        expression159 = expression();
                        state._fsp--;
                        stream_expression.add(expression159.getTree());
                    }
                    // AST REWRITE
                    // elements: IDENTIFIER, expression
                    // token labels:
                    // rule labels: retval
                    // token list labels:
                    // rule list labels:
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", retval != null ? retval.tree : null);
                    root_0 = (CommonTree) adaptor.nil();
                    // 264:43: -> ^( ASSIGNMENT IDENTIFIER expression )
                    {
                        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:264:46: ^( ASSIGNMENT IDENTIFIER expression )
                        {
                            CommonTree root_1 = (CommonTree) adaptor.nil();
                            root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(ASSIGNMENT, "ASSIGNMENT"), root_1);
                            adaptor.addChild(root_1, stream_IDENTIFIER.nextNode());
                            adaptor.addChild(root_1, stream_expression.nextTree());
                            adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;
                }
                break;
            case 2:
                // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:265:7: array_call ASSIG ( expression )
                {
                    pushFollow(FOLLOW_array_call_in_assignment2201);
                    array_call160 = array_call();
                    state._fsp--;
                    stream_array_call.add(array_call160.getTree());
                    ASSIG161 = (Token) match(input, ASSIG, FOLLOW_ASSIG_in_assignment2203);
                    stream_ASSIG.add(ASSIG161);
                    // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:265:24: ( expression )
                    // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:265:25: expression
                    {
                        pushFollow(FOLLOW_expression_in_assignment2206);
                        expression162 = expression();
                        state._fsp--;
                        stream_expression.add(expression162.getTree());
                    }
                    // AST REWRITE
                    // elements: array_call, expression
                    // token labels:
                    // rule labels: retval
                    // token list labels:
                    // rule list labels:
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", retval != null ? retval.tree : null);
                    root_0 = (CommonTree) adaptor.nil();
                    // 265:37: -> ^( ASSIGNMENT array_call expression )
                    {
                        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:265:40: ^( ASSIGNMENT array_call expression )
                        {
                            CommonTree root_1 = (CommonTree) adaptor.nil();
                            root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(ASSIGNMENT, "ASSIGNMENT"), root_1);
                            adaptor.addChild(root_1, stream_array_call.nextTree());
                            adaptor.addChild(root_1, stream_expression.nextTree());
                            adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;
                }
                break;
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
