public boolean getListFiles(File aStartingDir, Element theElem) throws FileNotFoundException {
    validateDirectory(aStartingDir);
    boolean isOk = true;
    File[] filesAndDirs = aStartingDir.listFiles();
    // Update length of task
    lengthOfTask += filesAndDirs.length;
    // Do not generate information for starting folder : this folder should not be created
    // Even it can be empty if startir directory is a drive
    /*
	if (intNbFolders == 0) {

		intNbFolders++;
        intCurrLevel++;

	    Element filesElem = new Element(CstImportXML.FILES_ELEM);
		theElem.addContent(filesElem);

		//System.out.println("intNbFolders1 = " + intNbFolders);
		Element folderElem = buildFolderElem(aStartingDir);
		filesElem.addContent(folderElem);

		isOk = getListFiles(aStartingDir, folderElem);

	} else {
    */
    Element filesElem = new Element(CstImportXML.FILES_ELEM);
    theElem.addContent(filesElem);
    if ((current % 1000) == 0) {
        // System.gc();
        Date dateStart = new Date();
        String strCurrDate = dateFormat.format(dateStart);
        // System.out.println(strCurrDate + " intNbFiles = " + intNbFiles);
        statMessage = statMessage + strCurrDate + " intNbFiles = " + intNbFiles + newline;
    }
    for (File file : filesAndDirs) {
        current++;
        if (!file.isFile()) {
            intNbFolders++;
            intCurrLevel++;
            strIndent = " ";
            for (int i = 0; i < intCurrLevel; i++) {
                strIndent = "  " + strIndent;
            }
            // must be a directory
            // recursive call!
            Element elem = null;
            try {
                if (file.getName().equals("pdf") || file.getName().equals("xml")) {
                // System.out.println("pdf or xml folder");
                // TODO: manage renditions ?
                } else {
                    elem = buildFolderElem(file);
                    filesElem.addContent(elem);
                    isOk = getListFiles(file, elem);
                }
            } catch (Exception e) {
                System.out.println("Exception: " + e);
            }
            intCurrLevel--;
            strIndent = " ";
            for (int i = 0; i < intCurrLevel; i++) {
                strIndent = "  " + strIndent;
            }
            // Do not output empty folder structures
            if (elem != null) {
                Iterator i = elem.getDescendants(filFileFilter);
                if (!i.hasNext()) {
                    System.out.println("Empty folder structure : " + file.getName());
                    filesElem.removeContent(elem);
                }
            }
        // ***********************************************
        } else {
            intNbFiles++;
            try {
                Element elem = buildFileElem(file);
                if (elem != null) {
                    filesElem.addContent(elem);
                }
            } catch (Exception e) {
                g_logger.enterLog("Exception: " + e);
                System.out.println("Exception: " + e);
            }
        }
    }
    return isOk;
}
