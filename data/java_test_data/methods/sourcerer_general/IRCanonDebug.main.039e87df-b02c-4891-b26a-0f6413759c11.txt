public static void main(String[] args) {
    File file = new File("rsc/Factorial.java");
    Reader io;
    try {
        io = new FileReader(file);
        Parser p = new Parser(io);
        Program prog = p.Program();
        SymbolTableVisitor visitor = new SymbolTableVisitor();
        SymbolTable table = visitor.buildSymbolTable(prog);
        CheckType check = new CheckType(table);
        check.visit(prog);
        JouetteFrame frame = new JouetteFrame();
        Translate translate = new Translate(table, frame);
        translate.visit(prog);
        FragList f = translate.getFragList();
        // for(int i = 0; i < f.size(); i++){
        // Frag fg = f.get(i);
        // System.out.println(fg.print());
        // }
        Codegen codegen = new Codegen(frame);
        StmList stmList = Canonlize.generateCode(Canonlize.generateCode(f));
        InstrList instrs = null, aux;
        for (; stmList != null; stmList = (StmList) stmList.tail) {
            aux = codegen.codegen(stmList.head);
            for (; aux != null; aux = (InstrList) aux.tail) {
                instrs = new InstrList(aux.head, instrs);
            }
        }
        aux = null;
        for (; instrs != null; instrs = (InstrList) instrs.tail) {
            aux = new InstrList(instrs.head, aux);
        }
        instrs = aux;
        System.out.println("\nAssem SEM registradores alocados:");
        for (; instrs != null; instrs = (InstrList) instrs.tail) {
            // System.out.print(instrs.head.assem);
            System.out.print(instrs.head.format(new DefaultMap()));
        }
        instrs = aux;
        AssemFlowGraph g = new AssemFlowGraph(instrs);
        // g.show(System.out);
        LivenessAnaliser liveness = new LivenessAnaliser(g);
        System.out.println("\nLiveness:");
        liveness.print();
        InterferenceGraph ig = new InterferenceGraph(liveness);
        System.out.println("\nGrafo de interferencia:");
        ig.print();
        RegisterAlocator r = new RegisterAlocator(ig);
        // HashMap<Temp, String> map = r.mapRegisters(3);
        TempMap map2 = r.mapTempToReg(3);
        System.out.println("\nAssembler COM registradores alocados:");
        for (; instrs != null; instrs = (InstrList) instrs.tail) {
            // System.out.print(instrs.head.assem);
            System.out.print(instrs.head.format(map2));
        }
        System.exit(1);
    } catch (FileNotFoundException e1) {
        e1.printStackTrace();
    }
}
