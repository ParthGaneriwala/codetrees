public AssemType translateToIntType() {
    AssemType retAssemType = null;
    Temp temp = new Temp();
    AssemTemp assemTemp = new AssemTemp(temp);
    AssemConst assemConst0 = new AssemConst(0);
    AssemConst assemConst1 = new AssemConst(1);
    // The left must be an integer type
    left = (AssemExp) left.translateToIntType();
    if (op == EQ || op == NE || op == GT || op == LT || op == LTE || op == GTE) {
        // These are comparison types; create a temporary and load it with either 0 or 1
        // depending on the result
        Label trueLabel = new Label();
        Label falseLabel = new Label();
        Label joinLabel = new Label();
        // Move constant 1 to a temporary
        AssemMove assemMove1 = new AssemMove(assemTemp, assemConst1);
        // Create a new Conditional based on the comparison
        int cjumpOp = getCJumpOperator(op);
        AssemCJump assemCJump = new AssemCJump(cjumpOp, left, right, trueLabel, falseLabel);
        // Create a new false label, needs to be followed by a move statement to move 0 to the temp.
        AssemLabel assemLabel1 = new AssemLabel(falseLabel);
        // Create the "false" path, ie, assigning 0 to the temporary
        AssemMove assemMove2 = new AssemMove(assemTemp, assemConst0);
        // ... and the true label
        AssemLabel assemLabel2 = new AssemLabel(trueLabel);
        // The jump statement for the join label
        AssemLabel assemJoinLabel = new AssemLabel(joinLabel);
        AssemName assemNameJoinLabel = new AssemName(joinLabel);
        AssemJump assemJumpJoin = new AssemJump(assemNameJoinLabel);
        Stack seqStack = new Stack();
        // The conditional first
        seqStack.push(assemCJump);
        // The true label
        seqStack.push(assemLabel2);
        // Move 1 into the temp since the condition is true
        seqStack.push(assemMove1);
        // Jump to the join label
        seqStack.push(assemJumpJoin);
        // The false label
        seqStack.push(assemLabel1);
        // Move 0 into the temp since the condition is false
        seqStack.push(assemMove2);
        // The join label
        seqStack.push(assemJoinLabel);
        AssemStm seqStm = translateSeqStatement(seqStack);
        retAssemType = new AssemSeqExp(seqStm, assemTemp);
    } else {
        // These are binary arithmetic operators; move the result to a temporary
        // and return it; before that, make sure that the left and right side are
        // converted to int types
        // left = (MipsAssemExp)left.translateToIntType(assemTreeBuilder);
        // right = (MipsAssemExp)right.translateToIntType(assemTreeBuilder);
        AssemMove assemMove = new AssemMove(assemTemp, this);
        retAssemType = new AssemSeqExp(assemMove, assemTemp);
    }
    return retAssemType;
}
