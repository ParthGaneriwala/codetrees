private int loadRMLFile(File selected, JobProperties props) throws IOException {
    int xoffset = props.getX();
    int yoffset = props.getY();
    int depth = props.getDepth();
    MillingAction action = null;
    FileReader fr = null;
    BufferedReader br = null;
    int count = 0;
    Tool tool = showToolSelection("Default tool for RML file");
    int diameter = tool.getStepDiameter();
    try {
        fr = new FileReader(selected);
        br = new BufferedReader(fr);
        String line = null;
        Pattern movecsv = Pattern.compile("PU(-?[0-9]+),(-?[0-9]+)");
        Pattern routecsv = Pattern.compile("PD(-?[0-9]+),(-?[0-9]+)");
        int lastx = -9999;
        int lasty = -9999;
        while ((line = br.readLine()) != null) {
            String[] commands = line.split(";");
            for (int i = 0; i < commands.length; i++) {
                String command = commands[i];
                Matcher m = movecsv.matcher(command);
                if (m.matches()) {
                    int xpos = 0;
                    int ypos = 0;
                    xpos = Integer.parseInt(m.group(1));
                    ypos = Integer.parseInt(m.group(2));
                    xpos += xoffset;
                    ypos += yoffset;
                    lastx = xpos;
                    lasty = ypos;
                    continue;
                }
                m = routecsv.matcher(command);
                if (m.matches()) {
                    int xpos = 0;
                    int ypos = 0;
                    xpos = Integer.parseInt(m.group(1));
                    ypos = Integer.parseInt(m.group(2));
                    xpos += xoffset;
                    ypos += yoffset;
                    // skip short segments less than tool radius
                    if (props.isSkipShort() && (Math.abs(lastx - xpos) < diameter / 2) && (Math.abs(lasty - ypos) < diameter / 2)) {
                        log.info("Skipping short segment");
                        continue;
                    }
                    if ((xpos == lastx) && (ypos == lasty)) {
                        log.info("Skipping duplicate route instruction to current position");
                    } else {
                        if (lastx != -9999) {
                            action = new MilledLine(lastx, lasty, xpos, ypos, depth, tool);
                            action.setDisplayOnly(props.isDisplayOnly());
                            actionsList2.add(action);
                            log.info("Loaded a routed line from " + lastx + "," + lasty + " to " + xpos + "," + ypos + " at depth " + depth);
                            count++;
                        }
                        lastx = xpos;
                        lasty = ypos;
                    }
                    continue;
                }
                log.info("bypassing: " + command);
            }
        }
        return count;
    } catch (IOException e) {
        throw e;
    } finally {
        try {
            if (br != null) {
                br.close();
            }
        } catch (IOException e) {
            log.error("Error closing br", e);
        }
        try {
            if (fr != null) {
                fr.close();
            }
        } catch (IOException e) {
            log.error("Error closing fr", e);
        }
    }
}
