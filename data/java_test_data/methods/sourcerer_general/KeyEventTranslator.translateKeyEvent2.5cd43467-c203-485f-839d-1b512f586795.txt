public static Key translateKeyEvent2(KeyEvent evt) {
    if (Options.SIMPLIFIED_KEY_HANDLING) {
        // This is still experimental code.
        /**
         * A summary of Java key handling intricacies:
         * (1) No "key pressed" events are generated for umlaut keys and for "combined characters" (key for diacritic mark + key for base character), only "key typed" and "key released" events are generated for them
         * (2) The "key typed" event for Ctrl+J is indistinguishable from the "key typed" event for Ctrl+Return (in both cases: keycode=0, keychar=0xa) (in Java 1.5 under linux, but not in Java 1.6)
         * (3) If a key is pressed longer, not only additional "key typed" events but also additional "key released", "key pressed" events are generated.
         * (4) There are no proper key events generated for dead key + space (like '^' + ' ' resulting in '^') in Java 1.5 under linux. In Java 1.6, this bug is fixed.
         *
         * For (2), we could simply ignore "key typed" events (as (3) allows us to do so). But then we would loose umlaut keys and combined characters (due to (1)).
         * For (1), we could simply ignore "key pressed" events. But then we would suffer from (2).
         *
         * Thus, we need to distinguish for (2) at the "key pressed" event state, however fire the internal key events only at the "key typed" stage.
         * This makes it necessary to store information about the last "key pressed" event (to be able to distinguish).
         */
        char keyChar = evt.getKeyChar();
        int keyCode = evt.getKeyCode();
        int modifiers = evt.getModifiers();
        boolean usecooked = !evt.isActionKey();
        /*
				Workaround against the bug of jdk1.5, that Ctrl+A has keyChar 0x1 instead of keyChar 0x41:
				
				This bug may be related to http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6320676
			*/
        if ((modifiers & InputEvent.CTRL_MASK) != 0) {
            // Log.log(Log.DEBUG,"KeyEventTranslator","translateKeyEvent(): keyChar="+((int) keyChar)+",keyCode="+keyCode+",modifiers="+modifiers+": 1.");
            if (keyChar < 0x20) {
                // Log.log(Log.DEBUG,"KeyEventTranslator","translateKeyEvent(): keyChar="+((int) keyChar)+",keyCode="+keyCode+",modifiers="+modifiers+": 1.1.");
                if (keyChar != keyCode) {
                    // specifically: if the real Escape, Backspace, Delete, Tab, Enter key was pressed, then this is false
                    // Log.log(Log.DEBUG,"KeyEventTranslator","translateKeyEvent(): keyChar="+((int) keyChar)+",keyCode="+keyCode+",modifiers="+modifiers+": 1.1.1");
                    keyChar += 0x40;
                    if ((keyChar >= 'A') && (keyChar <= 'Z')) {
                        // if they are uppercase letters
                        // make them lowercase letters
                        keyChar += 0x20;
                    }
                // usecooked	= false;
                }
            }
            if (keyChar == '\\') {
                // for compatibility with traditional jEdit installations (Shortcuts are called "C+BACK_SLASH" instead of "C+\")
                // Log.log(Log.DEBUG,"KeyEventTranslator","translateKeyEvent(): keyChar="+((int) keyChar)+",keyCode="+keyCode+",modifiers="+modifiers+": 1.1.1: backslash.");
                keyChar = 0;
                keyCode = KeyEvent.VK_BACK_SLASH;
            }
        // Log.log(Log.DEBUG,"KeyEventTranslator","translateKeyEvent(): 2: keyChar="+((int) keyChar)+",keyCode="+keyCode+",modifiers="+modifiers+", event="+evt+".");
        }
        /**
         * These keys are hidden "control keys". That is, they are used as special function key (instead of representing a character to be input), but
         * Java delivers them with a valid keyChar. We intentionally ignore this keyChar.
         * (However, not ignoring the keyChar would be an easy way to enter "escape" or "delete" characters into the edited text document, but this is not what we want.)
         */
        switch(keyChar) {
            // case KeyEvent.VK_ESCAPE:
            case 0x1b:
            // case KeyEvent.VK_BACK_SPACE:
            case 0x08:
            // case KeyEvent.VK_DELETE:
            case 0x7f:
            // case KeyEvent.VK_TAB:
            case 0x09:
            // case KeyEvent.VK_ENTER:
            case 0x0a:
            case KeyEvent.CHAR_UNDEFINED:
                usecooked = false;
                keyChar = 0;
        }
        boolean accept = false;
        boolean acceptAsPhantom = false;
        if (true) {
            switch(evt.getID()) {
                case KeyEvent.KEY_PRESSED:
                    accept = !usecooked;
                    acceptAsPhantom = !accept;
                    lastKeyPressAccepted = accept;
                    lastKeyPressEvent = evt;
                    break;
                case KeyEvent.KEY_TYPED:
                    if (lastKeyPressAccepted && (lastKeyPressEvent != null) && (lastKeyPressEvent.getKeyChar() == evt.getKeyChar())) {
                    // Do not emit internal key event twice.
                    // This works around the case where "Ctrl+J" and "Ctrl+Return" are indistinguishable in that "Ctrl+Return" is handled at the "key pressed" stage where "Ctrl+J" is handled at the "key typed" stage.
                    } else {
                        accept = usecooked;
                        acceptAsPhantom = !accept;
                    }
                    break;
                default:
            }
        } else {
            /*
					We ignore all the "key typed" events, as key repeat is already synthetically generated by synthetic "key pressed" "key released" events.
					"key typed" events have less information.
					
					This is highly experimental, as this relies on the JVM to generate these synthetic "key released", "key pressed" events.
				*/
            switch(evt.getID()) {
                case KeyEvent.KEY_PRESSED:
                    accept = true;
                    if (usecooked) {
                        // This destroys information, but this is what the rest of jEdit is used to :-(
                        keyCode = 0;
                    }
                    break;
                default:
            }
        }
        Key returnValue = null;
        if (accept || acceptAsPhantom) {
            if (!accept && acceptAsPhantom) {
                if (keyChar != 0) {
                    keyCode = 0;
                }
            }
            returnValue = new Key(modifiersToString(modifiers), keyCode, keyChar);
            if (!accept && acceptAsPhantom) {
                if (keyChar != 0) {
                }
                returnValue.setIsPhantom(true);
            }
        }
        return returnValue;
    } else {
        int modifiers = evt.getModifiers();
        Key returnValue;
        switch(evt.getID()) {
            case KeyEvent.KEY_PRESSED:
                int keyCode = evt.getKeyCode();
                if ((keyCode >= KeyEvent.VK_0 && keyCode <= KeyEvent.VK_9) || (keyCode >= KeyEvent.VK_A && keyCode <= KeyEvent.VK_Z)) {
                    if (Debug.ALTERNATIVE_DISPATCHER)
                        return null;
                    else {
                        returnValue = new Key(modifiersToString(modifiers), '\0', Character.toLowerCase((char) keyCode));
                    }
                } else {
                    if (keyCode == KeyEvent.VK_TAB) {
                        evt.consume();
                        returnValue = new Key(modifiersToString(modifiers), keyCode, '\0');
                    } else if (keyCode == KeyEvent.VK_SPACE) {
                        // do a "<space> to insert ".
                        if ((modifiers & ~InputEvent.SHIFT_MASK) == 0)
                            returnValue = null;
                        else {
                            returnValue = new Key(modifiersToString(modifiers), 0, ' ');
                        }
                    } else {
                        returnValue = new Key(modifiersToString(modifiers), keyCode, '\0');
                    }
                }
                break;
            case KeyEvent.KEY_TYPED:
                char ch = evt.getKeyChar();
                if (KeyEventWorkaround.isMacControl(evt))
                    ch |= 0x60;
                switch(ch) {
                    case '\n':
                    case '\t':
                    case '\b':
                        return null;
                    case ' ':
                        if ((modifiers & ~InputEvent.SHIFT_MASK) != 0)
                            return null;
                }
                int ignoreMods;
                if (Debug.ALT_KEY_PRESSED_DISABLED) {
                    /* on MacOS, A+ can be user input */
                    ignoreMods = InputEvent.SHIFT_MASK | InputEvent.ALT_GRAPH_MASK | InputEvent.ALT_MASK;
                } else {
                    /* on MacOS, A+ can be user input */
                    ignoreMods = InputEvent.SHIFT_MASK | InputEvent.ALT_GRAPH_MASK;
                }
                if ((modifiers & InputEvent.ALT_GRAPH_MASK) == 0 && evt.getWhen() - KeyEventWorkaround.lastKeyTime < 750L && (KeyEventWorkaround.modifiers & ~ignoreMods) != 0) {
                    if (Debug.ALTERNATIVE_DISPATCHER) {
                        returnValue = new Key(modifiersToString(modifiers), 0, ch);
                    } else
                        return null;
                } else {
                    if (ch == ' ') {
                        returnValue = new Key(modifiersToString(modifiers), 0, ch);
                    } else
                        returnValue = new Key(null, 0, ch);
                }
                break;
            default:
                return null;
        }
        /* I guess translated events do not have the 'evt' field set
			so consuming won't work. I don't think this is a problem as
			nothing uses translation anyway */
        Key trans = transMap.get(returnValue);
        if (trans == null)
            return returnValue;
        else
            return trans;
    }
}
