public void paint(Graphics gfx) {
    int count0 = this.textArea0.getVisibleLines();
    int count1 = this.textArea1.getVisibleLines();
    Rectangle size = getBounds();
    gfx.setColor(getBackground());
    gfx.fillRect(0, 0, size.width, size.height);
    Rectangle inner = new Rectangle(4, 0, size.width - 8, size.height);
    int lines = Math.max(count0, count1);
    int pxlPerLine = this.textArea0.getPainter().getFontMetrics().getHeight();
    Rectangle rect0 = new Rectangle(inner.x, inner.y, inner.width / 3, Math.max(1, pxlPerLine * count0));
    Rectangle border0 = new Rectangle(rect0);
    Rectangle rect1 = new Rectangle(inner.x + (inner.width - (inner.width / 3)), inner.y, inner.width / 3, Math.max(1, pxlPerLine * count1));
    Rectangle border1 = new Rectangle(rect1);
    gfx.setColor(Color.white);
    gfx.fillRect(rect0.x, rect0.y, rect0.width, rect0.height);
    gfx.fillRect(rect1.x, rect1.y, rect1.width, rect1.height);
    Color color;
    Diff.change hunk = this.edits;
    for (int i0 = 0; (i0 < count0); i0++) {
        int physicalLine0 = this.textArea0.getPhysicalLineOfScreenLine(i0);
        if (physicalLine0 == -1) {
            continue;
        }
        for (; hunk != null; hunk = hunk.link) {
            if ((hunk.line0 + Math.max(0, hunk.deleted - 1)) < physicalLine0) {
                continue;
            }
            if (hunk.line0 > physicalLine0) {
                break;
            }
            if (hunk.deleted == 0) {
                color = JDiffPlugin.overviewInvalidColor;
                rect0.height = 1;
            } else {
                if (hunk.inserted == 0) {
                    color = JDiffPlugin.overviewDeletedColor;
                } else {
                    color = JDiffPlugin.overviewChangedColor;
                }
                rect0.height = Math.max(1, pxlPerLine);
            }
            rect0.y = inner.y + (i0 * pxlPerLine);
            gfx.setColor(color);
            gfx.fillRect(rect0.x, rect0.y, rect0.width, rect0.height);
            break;
        }
    }
    hunk = this.edits;
    for (int i1 = 0; (i1 < count1); i1++) {
        int physicalLine1 = this.textArea1.getPhysicalLineOfScreenLine(i1);
        if (physicalLine1 == -1) {
            continue;
        }
        for (; hunk != null; hunk = hunk.link) {
            if ((hunk.line1 + Math.max(0, hunk.inserted - 1)) < physicalLine1) {
                continue;
            }
            if (hunk.line1 > physicalLine1) {
                break;
            }
            if (hunk.inserted == 0) {
                color = JDiffPlugin.overviewInvalidColor;
                rect1.height = 1;
            } else {
                if (hunk.deleted == 0) {
                    color = JDiffPlugin.overviewInsertedColor;
                } else {
                    color = JDiffPlugin.overviewChangedColor;
                }
                rect1.height = Math.max(1, pxlPerLine);
            }
            rect1.y = inner.y + (i1 * pxlPerLine);
            gfx.setColor(color);
            gfx.fillRect(rect1.x, rect1.y, rect1.width, rect1.height);
            break;
        }
    }
    hunk = this.edits;
    for (int i0 = 0, i1 = 0; (hunk != null) && (i0 < count0) && (i1 < count1); ) {
        int physicalLine0 = this.textArea0.getPhysicalLineOfScreenLine(i0);
        int physicalLine1 = this.textArea1.getPhysicalLineOfScreenLine(i1);
        if (physicalLine0 == -1) {
            break;
        }
        if (physicalLine1 == -1) {
            break;
        }
        for (; hunk != null; hunk = hunk.link) {
            if (hunk.line0 < physicalLine0) {
                continue;
            }
            if (hunk.line1 < physicalLine1) {
                continue;
            }
            if ((hunk.line0 + hunk.deleted) < physicalLine0) {
                continue;
            }
            if ((hunk.line1 + hunk.inserted) < physicalLine1) {
                continue;
            }
            if (hunk.line0 > physicalLine0) {
                i0++;
                break;
            }
            if (hunk.line1 > physicalLine1) {
                i1++;
                break;
            }
            int y0 = inner.y + (i0 * pxlPerLine);
            int y1 = inner.y + (i1 * pxlPerLine);
            gfx.setColor(Color.black);
            gfx.drawLine(rect0.x + rect0.width + 1, y0, rect1.x - 1, y1);
        }
    }
    gfx.setColor(Color.black);
    gfx.drawRect(border0.x - 1, border0.y, border0.width + 1, border0.height - 1);
    gfx.drawRect(border1.x - 1, border1.y, border1.width + 1, border1.height - 1);
}
