private void buildMaxHeights(Container container) {
    heights = new int[layout.length];
    int maxHeight;
    Component c;
    Dimension d;
    int height;
    int totalHeight = 0;
    int fixedHeight = 0;
    for (int row = 0; row < layout.length; row++) {
        maxHeight = 0;
        for (int col = 0; col < layout[0].length; col++) {
            if (layout[row][col] != -1) {
                c = container.getComponent(layout[row][col]);
                d = c.getPreferredSize();
                height = d.height + defaultTopMargin + defaultBottomMargin;
                if (c instanceof JComponent) {
                    height += ((JComponent) c).getInsets().top;
                    height += ((JComponent) c).getInsets().bottom;
                }
                if (height > maxHeight)
                    maxHeight = height;
            }
        }
        heights[row] = maxHeight;
        totalHeight += maxHeight;
        if (disabledVerticalStretchingRows.contains(new Integer(row))) {
            fixedHeight += maxHeight;
        }
    }
    // Fill available vertical area
    // TODO re-enable this once you can successfully disable some compontents and still
    // maintain correct percentages.
    int targetHeight = container.getSize().height;
    targetHeight -= container.getInsets().top;
    targetHeight -= container.getInsets().bottom;
    float percentage;
    if (targetHeight > 0) {
        if ((defaultFill) || (totalHeight > targetHeight)) {
            for (int i = 0; i < heights.length; i++) {
                if (!disabledVerticalStretchingRows.contains(new Integer(i))) {
                    percentage = (float) heights[i] / (float) (totalHeight - fixedHeight);
                    heights[i] = Math.round((targetHeight - fixedHeight) * percentage);
                }
            }
        }
    }
}
