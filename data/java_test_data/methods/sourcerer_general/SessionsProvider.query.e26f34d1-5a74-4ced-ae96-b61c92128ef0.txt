@Override
public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) {
    SQLiteDatabase db = mOpenHelper.getReadableDatabase();
    SQLiteQueryBuilder qb = new SQLiteQueryBuilder();
    // Log.d(TAG, "query() on " + uri);
    String limit = null;
    Uri notificationUri = uri;
    switch(sUriMatcher.match(uri)) {
        case TRACKS:
            {
                qb.setTables(TABLE_TRACKS);
                qb.setProjectionMap(sTracksProjection);
                sortOrder = TracksColumns.TRACK + " ASC";
                break;
            }
        case TRACKS_VISIBLE:
            {
                qb.setTables(TABLE_TRACKS);
                qb.setProjectionMap(sTracksProjection);
                qb.appendWhere(TracksColumns.VISIBLE + "=1");
                sortOrder = TracksColumns.TRACK + " ASC";
                break;
            }
        case TRACKS_SESSIONS:
            {
                qb.setTables(TABLE_SESSIONS_JOIN_TRACKS_BLOCKS);
                qb.setProjectionMap(sSessionsProjection);
                qb.appendWhere("tracks._id=" + uri.getPathSegments().get(1));
                // sortOrder = TracksColumns.TRACK + " ASC, " + BlocksColumns.TIME_START + " ASC";
                sortOrder = BlocksColumns.TIME_START + " ASC";
                break;
            }
        case BLOCKS:
            {
                qb.setTables(TABLE_BLOCKS);
                qb.setProjectionMap(sBlocksProjection);
                sortOrder = BlocksColumns.TIME_START + " ASC";
                notificationUri = Blocks.CONTENT_URI;
                break;
            }
        case BLOCKS_SESSIONS:
            {
                qb.setTables(TABLE_SESSIONS_JOIN_TRACKS_BLOCKS);
                qb.setProjectionMap(sSessionsProjection);
                qb.appendWhere("blocks._id=" + uri.getPathSegments().get(1));
                sortOrder = BlocksColumns.TIME_START + " ASC, " + TracksColumns.TRACK + " ASC";
                break;
            }
        case SESSIONS:
            {
                qb.setTables(TABLE_SESSIONS_JOIN_TRACKS_BLOCKS);
                qb.setProjectionMap(sSessionsProjection);
                break;
            }
        case SESSIONS_ID:
            {
                long sessionId = ContentUris.parseId(uri);
                qb.setTables(TABLE_SESSIONS_JOIN_TRACKS_BLOCKS);
                qb.appendWhere("sessions._id=" + sessionId);
                break;
            }
        case SESSIONS_SEARCH:
            {
                String query = uri.getPathSegments().get(2);
                qb.setTables(TABLE_SEARCH_JOIN_SESSIONS_TRACKS_BLOCKS);
                qb.setProjectionMap(sSearchProjection);
                qb.appendWhere(SearchColumns.INDEX_TEXT + " MATCH ");
                qb.appendWhereEscapeString(query);
                break;
            }
        case SUGGEST:
            {
                // final String query = selectionArgs[0];
                qb.setTables(TABLE_SUGGEST);
                qb.setProjectionMap(sSuggestProjection);
                qb.appendWhere(SuggestColumns.DISPLAY1 + " LIKE ");
                qb.appendWhereEscapeString(selectionArgs[0] + "%");
                sortOrder = SuggestColumns.DISPLAY1 + " ASC";
                limit = "15";
                selection = null;
                selectionArgs = null;
                break;
            }
        default:
            {
                throw new IllegalArgumentException("Unknown URL " + uri);
            }
    }
    // If no sort order is specified use the default
    if (TextUtils.isEmpty(sortOrder)) {
        sortOrder = BlocksColumns.TIME_START + " ASC, " + TracksColumns.TRACK + " ASC";
    }
    Cursor c = qb.query(db, projection, selection, selectionArgs, null, null, sortOrder, limit);
    c.setNotificationUri(getContext().getContentResolver(), notificationUri);
    return c;
}
