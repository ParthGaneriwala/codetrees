private int populateDataLevel(int level) throws IOException {
    File[] dataFiles = new File[nrDataFiles];
    File[] newDataFiles = new File[nrDataFiles];
    FileChannel[] inputChannels = new FileChannel[nrDataFiles];
    RandomAccessFile[] outFiles = new RandomAccessFile[nrDataFiles];
    final TrainingDataNodeReader[] readers = new TrainingDataNodeReader[nrDataFiles];
    final TrainingDataNodeWriter[] writers = new TrainingDataNodeWriter[nrDataFiles];
    for (byte dataId = 0; dataId < nrDataFiles; ++dataId) {
        dataFiles[dataId] = new File(dataDir, makeDataFilename(level, dataId));
        if (!dataFiles[dataId].isFile()) {
            System.err.printf("Cannot find file %s, ", dataFiles[dataId].getAbsolutePath());
            return 0;
        }
        inputChannels[dataId] = new FileInputStream(dataFiles[dataId]).getChannel();
        readers[dataId] = new EagerTrainingDataNodeReader(new OnDiskTrainingDataNodeReader(inputChannels[dataId]));
        newDataFiles[dataId] = new File(dataDir, makeDataFilename(level + 1, dataId));
        outFiles[dataId] = new RandomAccessFile(newDataFiles[dataId], "rw");
        outFiles[dataId].getChannel().truncate(0);
        writers[dataId] = new OnDiskTrainingDataNodeWriter(outFiles[dataId].getChannel());
        writers[dataId] = new BufferedTrainingDataNodeWriter(writers[dataId]);
    }
    int nrNodes = populateData(readers, writers);
    // delete data files from the previous level
    for (byte dataId = 0; dataId < nrDataFiles; ++dataId) {
        writers[dataId].close();
        dataFiles[dataId].delete();
        inputChannels[dataId].close();
        outFiles[dataId].close();
    }
    return nrNodes;
}
