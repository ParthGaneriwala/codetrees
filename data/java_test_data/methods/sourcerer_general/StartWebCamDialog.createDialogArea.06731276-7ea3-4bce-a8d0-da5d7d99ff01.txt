@Override
protected Control createDialogArea(Composite parent) {
    // $NON-NLS-1$
    CamList = myStreamingController.flashPlayer.CallFunctionWithReturnValue("GetCameraList");
    CameraList = CameraListFromXML(CamList);
    if (CameraList != null)
        isOneWebCamInstalled = true;
    else {
        isOneWebCamInstalled = false;
        CameraList = new String[1];
        // $NON-NLS-1$
        CameraList[0] = new String("No Video Device Found!");
    }
    // DEBUG...
    // System.out.println(CamList.getString());
    // for (int i=0;i<CameraList.length;i++) System.out.println("\n***"+CameraList[i]+"***");
    // System.out.flush();
    mainComposite = new Composite(parent, SWT.NONE);
    mainComposite.setLayout((new GridLayout(2, false)));
    broadcastNameLabel = new Label(mainComposite, SWT.NONE);
    // $NON-NLS-1$
    broadcastNameLabel.setText(Messages.getString("StartWebCamDialog.BroadCastNameLabelText"));
    // $NON-NLS-1$
    broadcastNameLabel.setToolTipText(Messages.getString("StartWebCamDialog.BroadcastNameToolTipText"));
    broadcastNameText = new Text(mainComposite, SWT.BORDER);
    // $NON-NLS-1$ //$NON-NLS-2$
    broadcastNameText.setText(Messages.getString("StartWebCamDialog.MyLiveBroadCastNameText") + "_" + StreamingService.getTimeStamp());
    broadcastNameText.setSelection(0);
    // $NON-NLS-1$
    broadcastNameText.setToolTipText(Messages.getString("StartWebCamDialog.BroadcastNameToolTipText2"));
    webCamListLabel = new Label(mainComposite, SWT.NONE);
    // $NON-NLS-1$
    webCamListLabel.setText(Messages.getString("StartWebCamDialog.WebCamListLabelText"));
    // $NON-NLS-1$
    webCamListLabel.setToolTipText(Messages.getString("StartWebCamDialog.WebCamListLabelToolTipText"));
    webCamListCombo = new Combo(mainComposite, SWT.READ_ONLY);
    webCamListCombo.setItems(CameraList);
    // $NON-NLS-1$
    webCamListCombo.setToolTipText(Messages.getString("StartWebCamDialog.WebCamListLabelToolTipText"));
    webCamListCombo.select(0);
    webCamListCombo.setEnabled(false);
    if (isOneWebCamInstalled) {
        webCamListCombo.setEnabled(true);
        resolutionComboLabel = new Label(mainComposite, SWT.NONE);
        // $NON-NLS-1$
        resolutionComboLabel.setText(Messages.getString("StartWebCamDialog.ResolutionComboLabelVideo"));
        // $NON-NLS-1$
        resolutionComboLabel.setToolTipText(Messages.getString("StartWebCamDialog.ResolutionComboToolTipText"));
        resolutionCombo = new Combo(mainComposite, SWT.READ_ONLY);
        // $NON-NLS-1$
        resolutionCombo.setToolTipText(Messages.getString("StartWebCamDialog.ResolutionComboToolTipText"));
        resolutionCombo.setItems(resolutionComboItems);
        resolutionCombo.select(3);
        qualityLabel = new Label(mainComposite, SWT.NONE);
        qualityVideoValue = 80;
        // $NON-NLS-1$ //$NON-NLS-2$
        qualityLabel.setText((Messages.getString("StartWebCamDialog.VideoQualityText")) + qualityVideoValue + "");
        // $NON-NLS-1$
        qualityLabel.setToolTipText(Messages.getString("StartWebCamDialog.VideoQualityToolTipText"));
        qualitySlider = new Slider(mainComposite, SWT.HORIZONTAL);
        qualitySlider.setValues(80, 1, 101, 1, 1, 10);
        qualitySlider.addSelectionListener(new SelectionListener() {

            public void widgetDefaultSelected(SelectionEvent e) {
            }

            public void widgetSelected(SelectionEvent e) {
                String value = String.valueOf(qualitySlider.getSelection());
                if ((qualitySlider.getSelection() >= 101)) {
                    // $NON-NLS-1$
                    value = "100";
                    qualitySlider.setSelection(100);
                }
                qualitySlider.setToolTipText(value);
                // $NON-NLS-1$ //$NON-NLS-2$
                qualityLabel.setText(Messages.getString("StartWebCamDialog.VideoQualityText") + value + "  ");
                qualityLabel.pack();
                qualityVideoValue = qualitySlider.getSelection();
            }
        });
        fpsLabel = new Label(mainComposite, SWT.NONE);
        // $NON-NLS-1$
        fpsLabel.setText(Messages.getString("StartWebCamDialog.fpsLabelText"));
        // $NON-NLS-1$
        fpsLabel.setToolTipText(Messages.getString("StartWebCamDialog.fpsLabelToolTipTextSets"));
        fpsCombo = new Combo(mainComposite, SWT.READ_ONLY);
        fpsCombo.setItems(fpsValues);
        fpsCombo.select(0);
    }
    micRateLabel = new Label(mainComposite, SWT.NONE);
    // $NON-NLS-1$
    micRateLabel.setText(Messages.getString("StartWebCamDialog.MicRateLabelText"));
    // $NON-NLS-1$
    micRateLabel.setToolTipText(Messages.getString("StartWebCamDialog.MicRateLabelToolTipText"));
    micRateCombo = new Combo(mainComposite, SWT.READ_ONLY);
    micRateCombo.setItems(micRateValuesStr);
    micRateCombo.select(3);
    recordBroadCastLabel = new Label(mainComposite, SWT.NONE);
    // $NON-NLS-1$
    recordBroadCastLabel.setText(Messages.getString("StartWebCamDialog.RecordBroadCastText"));
    // $NON-NLS-1$
    recordBroadCastLabel.setToolTipText(Messages.getString("StartWebCamDialog.RecordBroadCastToolTipText"));
    recordBroadCastBtn = new Button(mainComposite, SWT.CHECK);
    // $NON-NLS-1$
    recordBroadCastBtn.setText(Messages.getString("StartWebCamDialog.RecordButtonText"));
    // $NON-NLS-1$
    recordBroadCastBtn.setToolTipText(Messages.getString("StartWebCamDialog.RecordButtonToolTipText"));
    recordBroadCastBtn.addSelectionListener(new SelectionListener() {

        private void whenChecked() {
            if (// $NON-NLS-1$
            recordBoolean.compareTo("true") == 0)
                // $NON-NLS-1$
                recordBoolean = "false";
            else
                // $NON-NLS-1$
                recordBoolean = "true";
        }

        public void widgetDefaultSelected(SelectionEvent e) {
            whenChecked();
        }

        public void widgetSelected(SelectionEvent e) {
            whenChecked();
        }
    });
    recordBroadCastBtn.setSelection(false);
    recordBroadCastBtn.pack();
    KeyListener OkEscListener = new KeyListener() {

        public void keyPressed(KeyEvent e) {
            if (((int) e.keyCode == SWT.ESC))
                cancelPressed();
            if (((int) e.keyCode == SWT.CR)) {
                okPressed();
            }
        }

        public void keyReleased(KeyEvent e) {
        }
    };
    mainComposite.addKeyListener(OkEscListener);
    broadcastNameText.addKeyListener(OkEscListener);
    mainComposite.pack();
    this.setBlockOnOpen(true);
    return super.createDialogArea(parent);
}
