public Path shortestPath(Node source, Node destination) {
    final int maxi = nodes.length;
    int mini;
    int clusterHeadCheck = 0;
    int shift = 0;
    HashMap<Node, Integer> traveled = new HashMap<Node, Integer>();
    HashMap<Node, Node> previous = new HashMap<Node, Node>();
    Node currentNode;
    ArrayList<Node> todo, temp;
    ArrayList<Node> path = new ArrayList<Node>();
    ArrayList<Node> neighboors = new ArrayList<Node>();
    // Initialization of traveled and previous maps
    for (int i = 0; i < nodes.length; i++) {
        traveled.put(nodes[i], maxi);
        previous.put(nodes[i], null);
    }
    todo = new ArrayList<Node>(traveled.keySet());
    traveled.put(source, 0);
    // Main Loop
    while (todo.size() > 0) {
        currentNode = null;
        neighboors.clear();
        // Get the minimum of traveled
        mini = maxi;
        for (Node nd : todo) {
            if (traveled.get(nd) <= mini) {
                mini = traveled.get(nd);
                currentNode = nd;
            }
        }
        // remove the current node from the todo list
        todo.remove(currentNode);
        // If the current node is a shortest way to go the son, modify this way
        for (Node nd : getNeighboors(currentNode)) {
            if (traveled.get(nd) > (traveled.get(currentNode) + 1)) {
                traveled.put(nd, traveled.get(currentNode) + 1);
                previous.put(nd, currentNode);
            }
        }
    }
    // If there is no path, return null
    if (previous.get(destination) == null) {
        return null;
    }
    // Build the path
    currentNode = destination;
    while (currentNode != source) {
        currentNode = previous.get(currentNode);
        path.add(currentNode);
    }
    path.add(0, destination);
    Collections.reverse(path);
    // Enforce the cluster head transit
    temp = new ArrayList<Node>(path);
    for (int i = 0; i < path.size(); i++) {
        // Check whether the path go through head-clusters
        if (path.get(i).getClStatus() == Node.STATUS.HEAD || clusterHeadCheck == -1) {
            clusterHeadCheck = -1;
        } else {
            clusterHeadCheck++;
        }
        // If we change the cluster without having been to head of this cluster, add it
        if ((i == path.size() - 1) || (path.get(i).getBelong() != path.get(i + 1).getBelong())) {
            if (clusterHeadCheck != -1) {
                // If there is only one node in this cluster, make it go to cluster and go back
                if (clusterHeadCheck == 1) {
                    temp.add(i + shift, path.get(i).getBelong());
                    temp.add(i + shift, path.get(i));
                    shift = shift + 2;
                } else {
                    // Else simply add the cluster head
                    temp.add(i + shift, path.get(i).getBelong());
                    shift++;
                }
            }
            clusterHeadCheck = 0;
        }
    }
    return new Path(temp);
}
