public void setObject(int parameterIndex, Object parameterObj, int targetSqlType, int scale) throws SQLException {
    if (parameterObj == null) {
        setNull(parameterIndex, java.sql.Types.OTHER);
    } else {
        try {
            switch(targetSqlType) {
                case Types.BOOLEAN:
                    if (parameterObj instanceof Boolean) {
                        setBoolean(parameterIndex, ((Boolean) parameterObj).booleanValue());
                        break;
                    } else if (parameterObj instanceof String) {
                        setBoolean(parameterIndex, "true".equalsIgnoreCase((String) parameterObj) || !"0".equalsIgnoreCase((String) parameterObj));
                        break;
                    } else if (parameterObj instanceof Number) {
                        int intValue = ((Number) parameterObj).intValue();
                        setBoolean(parameterIndex, intValue != 0);
                        break;
                    } else {
                        throw SQLError.createSQLException("No conversion from " + parameterObj.getClass().getName() + " to Types.BOOLEAN possible.", SQLError.SQL_STATE_ILLEGAL_ARGUMENT, getExceptionInterceptor());
                    }
                case Types.BIT:
                case Types.TINYINT:
                case Types.SMALLINT:
                case Types.INTEGER:
                case Types.BIGINT:
                case Types.REAL:
                case Types.FLOAT:
                case Types.DOUBLE:
                case Types.DECIMAL:
                case Types.NUMERIC:
                    setNumericObject(parameterIndex, parameterObj, targetSqlType, scale);
                    break;
                case Types.CHAR:
                case Types.VARCHAR:
                case Types.LONGVARCHAR:
                    if (parameterObj instanceof BigDecimal) {
                        setString(parameterIndex, (StringUtils.fixDecimalExponent(StringUtils.consistentToString((BigDecimal) parameterObj))));
                    } else {
                        setString(parameterIndex, parameterObj.toString());
                    }
                    break;
                case Types.CLOB:
                    if (parameterObj instanceof java.sql.Clob) {
                        setClob(parameterIndex, (java.sql.Clob) parameterObj);
                    } else {
                        setString(parameterIndex, parameterObj.toString());
                    }
                    break;
                case Types.BINARY:
                case Types.VARBINARY:
                case Types.LONGVARBINARY:
                case Types.BLOB:
                    if (parameterObj instanceof byte[]) {
                        setBytes(parameterIndex, (byte[]) parameterObj);
                    } else if (parameterObj instanceof java.sql.Blob) {
                        setBlob(parameterIndex, (java.sql.Blob) parameterObj);
                    } else {
                        setBytes(parameterIndex, StringUtils.getBytes(parameterObj.toString(), this.charConverter, this.charEncoding, this.connection.getServerCharacterEncoding(), this.connection.parserKnowsUnicode(), getExceptionInterceptor()));
                    }
                    break;
                case Types.DATE:
                case Types.TIMESTAMP:
                    java.util.Date parameterAsDate;
                    if (parameterObj instanceof String) {
                        ParsePosition pp = new ParsePosition(0);
                        java.text.DateFormat sdf = new java.text.SimpleDateFormat(getDateTimePattern((String) parameterObj, false), Locale.US);
                        parameterAsDate = sdf.parse((String) parameterObj, pp);
                    } else {
                        parameterAsDate = (java.util.Date) parameterObj;
                    }
                    switch(targetSqlType) {
                        case Types.DATE:
                            if (parameterAsDate instanceof java.sql.Date) {
                                setDate(parameterIndex, (java.sql.Date) parameterAsDate);
                            } else {
                                setDate(parameterIndex, new java.sql.Date(parameterAsDate.getTime()));
                            }
                            break;
                        case Types.TIMESTAMP:
                            if (parameterAsDate instanceof java.sql.Timestamp) {
                                setTimestamp(parameterIndex, (java.sql.Timestamp) parameterAsDate);
                            } else {
                                setTimestamp(parameterIndex, new java.sql.Timestamp(parameterAsDate.getTime()));
                            }
                            break;
                    }
                    break;
                case Types.TIME:
                    if (parameterObj instanceof String) {
                        java.text.DateFormat sdf = new java.text.SimpleDateFormat(getDateTimePattern((String) parameterObj, true), Locale.US);
                        setTime(parameterIndex, new java.sql.Time(sdf.parse((String) parameterObj).getTime()));
                    } else if (parameterObj instanceof Timestamp) {
                        Timestamp xT = (Timestamp) parameterObj;
                        setTime(parameterIndex, new java.sql.Time(xT.getTime()));
                    } else {
                        setTime(parameterIndex, (java.sql.Time) parameterObj);
                    }
                    break;
                case Types.OTHER:
                    setSerializableObject(parameterIndex, parameterObj);
                    break;
                default:
                    throw SQLError.createSQLException(Messages.getString(// $NON-NLS-1$
                    "PreparedStatement.16"), SQLError.SQL_STATE_GENERAL_ERROR, getExceptionInterceptor());
            }
        } catch (Exception ex) {
            if (ex instanceof SQLException) {
                throw (SQLException) ex;
            }
            SQLException sqlEx = SQLError.createSQLException(// $NON-NLS-1$
            Messages.getString("PreparedStatement.17") + parameterObj.getClass().toString() + // $NON-NLS-1$
            Messages.getString("PreparedStatement.18") + ex.getClass().getName() + Messages.getString("PreparedStatement.19") + // $NON-NLS-1$
            ex.getMessage(), SQLError.SQL_STATE_GENERAL_ERROR, getExceptionInterceptor());
            sqlEx.initCause(ex);
            throw sqlEx;
        }
    }
}
