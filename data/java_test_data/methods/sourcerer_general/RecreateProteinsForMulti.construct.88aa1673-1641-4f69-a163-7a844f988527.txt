public Boolean construct() {
    Vector<Boolean> lSelected = new Vector<Boolean>();
    for (int i = 0; i < iCheckboxes.size(); i++) {
        if (iCheckboxes.get(i).isSelected()) {
            lSelected.add(true);
            lOneIsSelected[0] = true;
        } else {
            lSelected.add(false);
        }
    }
    iQuantitativeValidationSingelton.setSelectedIndexes(lSelected);
    if (lOneIsSelected[0]) {
        Vector<RatioGroupCollection> lCollections = new Vector<RatioGroupCollection>();
        for (int i = 0; i < lSelected.size(); i++) {
            if (lSelected.get(i)) {
                for (int j = 0; j < iCollections.size(); j++) {
                    if (iCollections.get(j).getIndex() == i) {
                        lCollections.add(iCollections.get(j));
                    }
                }
            } else {
            // this was not selected by the user
            }
        }
        // clear some things from the memory
        iQuantitativeValidationSingelton.restart();
        // use the found collections to recreate the proteins
        // get stuff from the parent
        Vector<String> lProteinAccessions = iQuantitativeValidationSingelton.getProteinAccessions();
        Vector<String> lComponentTypesList = iQuantitativeValidationSingelton.getComponentTypes();
        String[] lComponentTypes = new String[lComponentTypesList.size()];
        lComponentTypesList.toArray(lComponentTypes);
        Vector<String> lRatioTypesList = iQuantitativeValidationSingelton.getRatioTypes();
        String[] lRatioTypes = new String[lRatioTypesList.size()];
        lRatioTypesList.toArray(lRatioTypes);
        Vector<QuantitativeProtein> lQuantProtein = new Vector<QuantitativeProtein>();
        progressBar1.setIndeterminate(true);
        progressBar1.setStringPainted(true);
        progressBar1.setString("Creating proteins and reference set ... ");
        // 1. create all the distiller proteins
        for (int i = 0; i < lProteinAccessions.size(); i++) {
            lQuantProtein.add(new QuantitativeProtein(lProteinAccessions.get(i), lRatioTypes));
        }
        // 9. couple the distiller ratio groups to the distiller proteins
        for (int i = 0; i < lCollections.size(); i++) {
            for (int j = 0; j < lCollections.get(i).size(); j++) {
                // get the ratio group
                RatioGroup lRatioGroup = lCollections.get(i).get(j);
                // get all the protein accession linked to this ratiogroup
                String[] lAccessions = lRatioGroup.getProteinAccessions();
                for (int k = 0; k < lAccessions.length; k++) {
                    for (int l = 0; l < lQuantProtein.size(); l++) {
                        if (lAccessions[k].equalsIgnoreCase(lQuantProtein.get(l).getAccession())) {
                            // add the ratio group to the protein if the accession is the same
                            lQuantProtein.get(l).addRatioGroup(lRatioGroup);
                        }
                    }
                }
            }
        // ToDo delete me
        // i = i + 40;
        // ToDo delete me
        }
        calculateRazorPeptides(lQuantProtein);
        // 10. create a reference set with the "household" proteins with the most ratiogroups
        ReferenceSet lReferenceSet = new ReferenceSet(new ArrayList<QuantitativeProtein>(), lRatioTypes, lComponentTypes);
        // sort by the ratio group numbers
        Collections.sort(lQuantProtein, new QuantitativeProteinSorterByRatioGroupNumbers());
        // get the reference set size from the singelton
        int lReferenceSetSize = iQuantitativeValidationSingelton.getNumberOfProteinsInReferenceSet();
        if (iQuantitativeValidationSingelton.getReferenceSetEnum() == ReferenceSetEnum.ALL) {
            lReferenceSetSize = lQuantProtein.size();
        }
        if (lReferenceSetSize > lQuantProtein.size()) {
            lReferenceSetSize = lQuantProtein.size();
        }
        for (int i = 0; i < lReferenceSetSize; i++) {
            lReferenceSet.addReferenceProtein(lQuantProtein.get(i));
        }
        // set the refernce set
        iQuantitativeValidationSingelton.setReferenceSet(lReferenceSet);
        // sort by the protein accession
        Collections.sort(lQuantProtein, new QuantitativeProteinSorterByAccession());
        Vector<QuantitativeProtein> lFinalProteins = new Vector<QuantitativeProtein>();
        for (int i = 0; i < lQuantProtein.size(); i++) {
            if (lQuantProtein.get(i).getNumberOfPeptideGroups() != 0) {
                lFinalProteins.add(lQuantProtein.get(i));
            }
        }
        progressBar1.setIndeterminate(false);
        downloadProteinSequences(lFinalProteins);
        // _____Do garbage collection______
        System.gc();
        // show gui
        JOptionPane.showMessageDialog(getFrame(), "All the data is loaded, ready to validate!", "INFO", JOptionPane.INFORMATION_MESSAGE);
        QuantitationValidationGUI gui = new QuantitationValidationGUI(lFinalProteins, iConn, iStandAlone);
        gui.setVisible(true);
    }
    return true;
}
