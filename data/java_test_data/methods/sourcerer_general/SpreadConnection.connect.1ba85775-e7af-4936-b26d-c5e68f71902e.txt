// Establishes a connection with the spread daemon.
// /////////////////////////////////////////////////
public synchronized void connect(InetAddress address, int port, String privateName, boolean priority, boolean groupMembership) throws SpreadException {
    // //////////////////////////
    if (connected == true) {
        throw new SpreadException("Already connected.");
    }
    // /////////////////////////////
    try {
        new String("ASCII/ISO8859_1 encoding test").getBytes("ISO8859_1");
    } catch (UnsupportedEncodingException e) {
        throw new SpreadException("ISO8859_1 encoding is not supported.");
    }
    // Store member variables.
    // ////////////////////////
    this.address = address;
    this.port = port;
    this.priority = priority;
    this.groupMembership = groupMembership;
    // ///////////////////////////////////
    if (address == null) {
        // ////////////////////
        try {
            address = InetAddress.getLocalHost();
        } catch (UnknownHostException e) {
            throw new SpreadException("Error getting local host");
        }
    }
    // ////////////////////////////////
    if (port == 0) {
        // Use the default port.
        // //////////////////////
        port = DEFAULT_SPREAD_PORT;
    }
    // ///////////////////////////////////
    if ((port < 0) || (port > (32 * 1024))) {
        throw new SpreadException("Bad port (" + port + ").");
    }
    // ///////////////////
    try {
        socket = new Socket(address, port);
    } catch (IOException e) {
        throw new SpreadException("Socket(): " + e);
    }
    // Set the socket's buffer sizes.
    // ///////////////////////////////
    setBufferSizes();
    // //////////////////////////
    try {
        socketInput = socket.getInputStream();
        socketOutput = socket.getOutputStream();
    } catch (IOException e) {
        throw new SpreadException("getInput/OutputStream(): " + e);
    }
    // Send the connect message.
    // //////////////////////////
    sendConnect(privateName);
    // Recv the authentication method list
    // ////////////////////////////////////
    readAuthMethods();
    // Send auth method choice
    // ////////////////////////
    sendAuthMethod();
    // ////////////////////////////////////////////////////////
    try {
        instantiateAuthMethod();
    } catch (SpreadException e) {
        System.out.println("Failed to create authMethod instance" + e.toString());
        System.exit(1);
    }
    // //////////////////////////
    try {
        authMethodAuthenticate.invoke(authObj, new Object[] {});
    } catch (IllegalAccessException e) {
        System.out.println("error calling authenticate" + e.toString());
        System.exit(1);
    } catch (IllegalArgumentException e) {
        System.out.println("error calling authenticate" + e.toString());
        System.exit(1);
    } catch (java.lang.reflect.InvocationTargetException e) {
        Throwable thr = e.getTargetException();
        if (thr.getClass().equals(SpreadException.class)) {
            throw new SpreadException("Connection Rejected: Authentication failed");
        }
    }
    // Check for acceptance.
    // //////////////////////
    checkAccept();
    // Check the version.
    // ///////////////////
    checkVersion();
    // Get the private group name.
    // ////////////////////////////
    readGroup();
    // Connection complete.
    // /////////////////////
    connected = true;
    // /////////////////////////
    if ((basicListeners.size() != 0) || (advancedListeners.size() != 0)) {
        // Start the listener thread.
        // ///////////////////////////
        startListener();
    }
}
