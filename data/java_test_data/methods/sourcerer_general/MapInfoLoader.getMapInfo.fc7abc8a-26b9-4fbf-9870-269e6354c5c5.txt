public static MapInfo getMapInfo(String levelId) {
    MapInfo mapInfo = new MapInfo();
    mapInfo.setSectorName(levelId);
    // 
    BufferedReader in = null;
    try {
        String path = MainSettings.getResourcesRootPath(levelId) + "/map/level.rawmap";
        InputStream is = MapInfoLoader.class.getResourceAsStream(path);
        in = new BufferedReader(new InputStreamReader(is));
        // 
        String line = in.readLine();
        while (line != null) {
            line = line.trim();
            // 
            List<String> list = new ArrayList<String>();
            String line2 = in.readLine();
            while (line2 != null && !line2.trim().equals("")) {
                line2 = line2.trim();
                // 
                list.add(line2);
                // 
                line2 = in.readLine();
            }
            // 
            if (line.startsWith("MAP")) {
                processMap(mapInfo, line, list);
            } else if (line.startsWith("PROPERTIES")) {
                processProperties(mapInfo, line, list);
            } else if (line.startsWith("TRIGGERS")) {
                processTriggers(mapInfo, line, list);
            } else if (line.startsWith("OBJECTS")) {
                processObjects(mapInfo, line, list);
            } else if (line.startsWith("TEXTURES")) {
                processTextures(mapInfo, line, list);
            } else if (line.startsWith("SOUNDS")) {
                processSounds(mapInfo, line, list);
            } else {
                throw new RuntimeException("Error reading rawmap file. TEXTURES, MAP, TEXTURES, TRIGGERS or OBJECTS expected. Found:" + line);
            }
            // 
            if (line2 != null) {
                line = in.readLine();
            } else {
                line = null;
            }
        }
    } catch (IOException ex) {
        throw new RuntimeException("Error reading sector rawmap:" + levelId, ex);
    } finally {
        if (in != null) {
            try {
                in.close();
            } catch (IOException ex) {
                GlobalState.logger.log(Level.SEVERE, "Error", ex);
            }
        }
    }
    return mapInfo;
}
