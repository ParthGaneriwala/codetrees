void relocatePROs(DepTree tree) {
    DepNode node, head, inte;
    int i, j, size = tree.size();
    ArrayList<DepNode> delList = new ArrayList<DepNode>();
    for (i = 1; i < size; i++) {
        node = tree.get(i);
        if (!node.form.startsWith("*PRO*"))
            continue;
        node.form = node.lemma = (node.antecedent == null) ? "*pro*" : "*PRO*";
        head = tree.get(node.headId);
        if (head.isPosx("VB.*") && head.id == node.id + 1)
            continue;
        if (node.srlInfo != null) {
            for (SRLHead tmp : node.srlInfo.heads) {
                if (node.id < tmp.headId) {
                    head = tree.get(tmp.headId);
                    break;
                }
            }
        }
        if (head.isPos("TO")) {
            for (j = head.id + 1; j < size; j++) {
                inte = tree.get(j);
                if (inte.headId == head.id && inte.isPosx("VB.*")) {
                    head = inte;
                    break;
                }
            }
        }
        if (!head.isPosx("VB.*") || head.id < node.id)
            delList.add(node);
        else {
            node.headId = head.id;
            tree.add(head.id, node);
            tree.remove(i);
            i = head.id;
        }
    }
    tree.removeAll(delList);
    IntIntOpenHashMap map = new IntIntOpenHashMap();
    for (i = 1; i < tree.size(); i++) {
        node = tree.get(i);
        map.put(node.id, i);
    }
    for (i = 1; i < tree.size(); i++) {
        node = tree.get(i);
        node.id = i;
        node.headId = map.get(node.headId);
        if (node.srlInfo != null) {
            for (SRLHead tmp : node.srlInfo.heads) tmp.headId = map.get(tmp.headId);
        }
    }
}
