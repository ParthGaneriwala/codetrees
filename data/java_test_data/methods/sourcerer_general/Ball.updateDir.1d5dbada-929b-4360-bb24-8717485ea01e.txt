public boolean updateDir(Ball[] balls) {
    boolean collision = false;
    if (edge()) {
        setMatrix();
        collision = JSphereApp.WALL_SOUND;
    }
    Vector3d locvec = getLoc();
    Vector3d targloc = new Vector3d();
    Vector3d tmpvec = new Vector3d();
    Vector3d V = new Vector3d(0, 0, 0);
    Point3d locpt = new Point3d(locvec);
    Point3d targpt = new Point3d();
    Vector3d spotvec = new Vector3d();
    for (int i = 0; i < JSphereApp.NUMBALLS; i++) {
        targloc = balls[i].getLoc();
        targpt.set(targloc);
        tmpvec.sub(targloc, locvec);
        if (tmpvec.length() > 0) {
            // is not self
            double dist = locpt.distance(targpt);
            if (dist < (JSphereApp.BALLSIZE * 2)) {
                if (matrix[i] > 0)
                    matrix[i] *= -1;
                collision = true;
            }
            tmpvec.normalize();
            if (JSphereApp.GRAVITY) {
                tmpvec.scale(JSphereApp.BOWLSIZE / dist);
            }
            tmpvec.scale(matrix[i]);
            V.add(tmpvec);
        }
    }
    if (BallLight instanceof SpotLight) {
        // ((SpotLight)BallLight).setDirection(new Vector3f(V));
        SpotLight spotlight = (SpotLight) BallLight;
        switch(JSphereApp.SPOT_STYLE) {
            case JSphereApp.SPOT_DIR:
                // spotvec.scale(-1);
                spotvec.set(V);
                spotlight.setPosition(new Point3f(locpt));
                break;
            case JSphereApp.SPOT_FAV:
                int fav = getFav();
                spotvec.sub(balls[fav].getLoc(), locvec);
                spotlight.setPosition(new Point3f(locpt));
                break;
            case JSphereApp.SPOT_ORIGIN:
                spotlight.setPosition(new Point3f(JSphereApp.origin));
                spotvec.set(locvec);
                break;
        }
        // spotvec.normalize();
        spotlight.setDirection(new Vector3f(spotvec));
    } else {
        ((PointLight) BallLight).setPosition(new Point3f(locpt));
    }
    V.scale(1 / (float) JSphereApp.NUMBALLS);
    V.scale(realSpeed);
    dir.set(V);
    return collision;
}
