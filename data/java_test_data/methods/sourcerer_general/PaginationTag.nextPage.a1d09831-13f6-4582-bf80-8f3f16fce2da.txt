private StringBuffer nextPage(Pagination pagination, String baseUrl, int count, boolean previous) {
    HttpServletRequest request = (HttpServletRequest) this.pageContext.getRequest();
    StringBuffer output = new StringBuffer();
    try {
        Object[] objects = new Object[1];
        objects[0] = new Integer(pagination.getNumResults());
        if (pagination.getOffset() == 0 && previous) {
            // output.append(Utilities.formatMessage("common.pagination.previous", request.getLocale(), objects));
            output.append("��һҳ");
            return output;
        }
        if (count <= WikiUtil.percount && !previous) {
            // output.append(Utilities.formatMessage("common.pagination.next", request.getLocale(), objects));
            output.append("��һҳ");
            return output;
        }
        output.append("<a href=\"");
        String virtualWiki = WikiUtil.getVirtualWikiFromRequest(request);
        WikiLink wikiLink = LinkUtil.parseWikiLink(baseUrl);
        int offset = pagination.getOffset() + pagination.getNumResults();
        if (previous) {
            offset = pagination.getOffset() - pagination.getNumResults();
            if (offset < 0) {
                offset = 0;
            }
        }
        String query = LinkUtil.appendQueryParam(wikiLink.getQuery(), "num", Integer.toString(pagination.getNumResults()));
        query += "&amp;offset=" + offset;
        wikiLink.setQuery(query);
        output.append(LinkUtil.buildInternalLinkUrl(request.getContextPath(), virtualWiki, wikiLink));
        output.append("\">");
        if (previous) {
            output.append("��һҳ");
        } else {
            output.append("��һҳ");
        }
        output.append("</a>");
    } catch (Exception e) {
        logger.warning("Failure while building pagination element", e);
    }
    return output;
}
