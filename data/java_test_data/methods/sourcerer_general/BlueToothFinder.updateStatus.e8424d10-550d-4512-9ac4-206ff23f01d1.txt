public synchronized void updateStatus() {
    int size = this._foundDevices.size();
    String[] address = new String[size];
    String[] friendlyName = new String[size];
    // DeviceClass[] devClass=new DeviceClass[size];
    for (int i = 0; i < size; i++) {
        RemoteDevice device = (RemoteDevice) this._foundDevices.elementAt(i);
        address[i] = device.getBluetoothAddress();
        try {
            friendlyName[i] = device.getFriendlyName(false);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    // frontend update begin
    this._frontend.setTitle("BlueToothFinder: Found " + size + " Devices");
    this._frontend.deleteAll();
    for (int i = 0; i < size; i++) {
        this._frontend.append(friendlyName[i] + " {" + address[i] + "}", (DeviceClass) this._deviceClass.elementAt(i));
    // this._frontend.insert(0,friendlyName[i]+" {"+address[i]+"}",null);
    }
    for (int i = 0; i < this._registeredConstraints.size(); i++) {
        boolean flag = false;
        ConstraintNode node = (ConstraintNode) this._registeredConstraints.elementAt(i);
        for (int j = 0; j < size; j++) {
            if (node.getValue().equals(address[j]) || node.getValue().equals(friendlyName[j])) {
                flag = true;
            }
        }
        // checking node constraints
        if (node.getCheckType() == ConstraintNode.EQUALS) {
        // nothing to be done
        } else if (node.getCheckType() == ConstraintNode.NOT_EQUALS) {
            flag = !flag;
        }
        FuzzyLogicBoolean bool = new FuzzyLogicBoolean();
        if (flag) {
            bool.setTrue();
        } else {
            bool.setFalse();
        }
        node.setActualValue(bool);
    // System.out.println("node: "+node.getValue()+" constraint: "+node.getCheckType()+" flag: "+flag);
    }
    this._inquiring = false;
    this.notifyAll();
}
