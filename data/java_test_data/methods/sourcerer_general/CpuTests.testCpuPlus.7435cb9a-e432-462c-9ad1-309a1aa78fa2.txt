public void testCpuPlus() {
    // enter first digit
    theCpu.acceptDigit(THREE);
    confirmEmptyStacks();
    assertTrue("the display should contain the string '3'", theCpu.getDisplay().getValue().equals(THREE));
    assertTrue("the cpu should still be in accepting digits state.", theCpu.state instanceof AcceptingDigitsState);
    // enter second digit
    theCpu.acceptDigit(TWO);
    confirmEmptyStacks();
    assertTrue("the display should contain the string '32'", theCpu.getDisplay().getValue().equals(THIRTY_TWO));
    assertTrue("the cpu should still be in accepting digits state.", theCpu.state instanceof AcceptingDigitsState);
    // enter first operator.
    theCpu.acceptOperator(new PlusOperator());
    assertTrue("the display should contain the string '32'", theCpu.getDisplay().getValue().equals(THIRTY_TWO));
    assertTrue("the operand stack is no longer empty", !theCpu.getOperandStack().isEmpty());
    assertTrue("the operand stack should contain the value 32", 32d == theCpu.getOperandStack().peek());
    assertTrue("the operator stack should have plus on top", theCpu.getOperatorStack().peek() instanceof PlusOperator);
    assertTrue("the cpu should now be in ready for input state.", theCpu.state instanceof ReadyForInputState);
    // now enter the first digit of rhs
    theCpu.acceptDigit(THREE);
    assertTrue("the display should contain the string '3'", theCpu.getDisplay().getValue().equals(THREE));
    assertTrue("the cpu should still be in accepting digits state.", theCpu.state instanceof AcceptingDigitsState);
    assertTrue("the operand stack still has 32 in it.", theCpu.getOperandStack().peek().equals(32d));
    assertTrue("the operator stack should have plus on top", theCpu.getOperatorStack().peek() instanceof PlusOperator);
    assertTrue("the cpu should still be in accepting digits state.", theCpu.state instanceof AcceptingDigitsState);
    // complete the rhs
    theCpu.acceptDigit(ONE);
    assertTrue("the display should contain the string '31'", theCpu.getDisplay().getValue().equals(THIRTY_ONE));
    assertTrue("the operand stack still has 32 in it.", theCpu.getOperandStack().peek().equals(THIRTY_TWO_DECIMAL));
    assertTrue("the operator stack should have plus on top", theCpu.getOperatorStack().peek() instanceof PlusOperator);
    assertTrue("the cpu should still be in accepting digits state.", theCpu.state instanceof AcceptingDigitsState);
    // now for the '=' operator...
    theCpu.acceptCommand(Cpu.COMMANDS.EQUALS);
    assertTrue("the display should contain the string '63' but contains " + theCpu.getDisplay().getValue(), theCpu.getDisplay().getValue().equals(SIXTY_THREE_POINT_O));
    assertTrue("The operand stack should have 63 on top. but has " + theCpu.getOperandStack().peek(), theCpu.getOperandStack().peek().equals(SIXTY_THREE_DECIMAL));
}
