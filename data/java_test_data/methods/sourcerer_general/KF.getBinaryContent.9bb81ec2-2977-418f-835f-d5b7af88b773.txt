private BinaryDocument getBinaryContent(kf.client.Document doc, String param, String val) throws Exception {
    if (doc == null)
        return null;
    BinaryDocument bd = null;
    HttpClient client = new HttpClient();
    int size = 0;
    client.getState().setCredentials(new AuthScope(AuthScope.ANY_HOST, AuthScope.ANY_PORT), new UsernamePasswordCredentials(username, password));
    GetMethod get = new GetMethod(url + "document-service");
    if (username != null) {
        log.debug("Using username: " + username);
        get.setDoAuthentication(true);
    }
    InputStream is = null;
    try {
        int status;
        get.setQueryString("id=" + doc.getDocumentID() + "&config_id=" + configId + "&company_id=" + companyId + (param != null ? "&" + param + "=" + val : ""));
        if (log.isDebugEnabled())
            log.debug("Getting via HTTP: " + url + ": " + get.getPath() + "?" + get.getQueryString());
        status = client.executeMethod(get);
        if (status == 200) {
            bd = new BinaryDocument();
            bd.baos = new ByteArrayOutputStream();
            is = get.getResponseBodyAsStream();
            size = IOUtils.copy(is, bd.baos);
            Header header = get.getResponseHeader("Content-Type");
            bd.contentType = header.getValue();
        } else
            log.warn("getDocumentPDF: server returned " + status);
    } catch (IOException e) {
        log.error(e.getMessage(), e);
    } finally {
        // release any connection resources used by the method
        try {
            if (is != null)
                is.close();
        } catch (IOException e) {
            log.warn("Unable to close input stream");
        }
        is = null;
        if (get != null)
            get.releaseConnection();
        get = null;
        client = null;
    }
    if (log.isDebugEnabled() && bd != null) {
        log.debug("getBinaryContent: Returning a " + size / 1000 + " KB file");
    }
    return bd;
}
