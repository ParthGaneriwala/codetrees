// $ANTLR start "type"
public final MyGrammarParser.type_return type() throws RecognitionException {
    MyGrammarParser.type_return retval = new MyGrammarParser.type_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    MyGrammarParser.simple_type_return simple_type135 = null;
    MyGrammarParser.array_type_return array_type136 = null;
    RewriteRuleSubtreeStream stream_simple_type = new RewriteRuleSubtreeStream(adaptor, "rule simple_type");
    RewriteRuleSubtreeStream stream_array_type = new RewriteRuleSubtreeStream(adaptor, "rule array_type");
    try {
        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:247:6: ( simple_type -> ^( TYPE simple_type ) | array_type -> ^( TYPE array_type ) )
        int alt24 = 2;
        int LA24_0 = input.LA(1);
        if (((LA24_0 >= BOOLEAN && LA24_0 <= CHAR))) {
            alt24 = 1;
        } else if ((LA24_0 == ARRAY)) {
            alt24 = 2;
        } else {
            NoViableAltException nvae = new NoViableAltException("", 24, 0, input);
            throw nvae;
        }
        switch(alt24) {
            case 1:
                // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:247:8: simple_type
                {
                    pushFollow(FOLLOW_simple_type_in_type2013);
                    simple_type135 = simple_type();
                    state._fsp--;
                    stream_simple_type.add(simple_type135.getTree());
                    // AST REWRITE
                    // elements: simple_type
                    // token labels:
                    // rule labels: retval
                    // token list labels:
                    // rule list labels:
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", retval != null ? retval.tree : null);
                    root_0 = (CommonTree) adaptor.nil();
                    // 247:20: -> ^( TYPE simple_type )
                    {
                        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:247:23: ^( TYPE simple_type )
                        {
                            CommonTree root_1 = (CommonTree) adaptor.nil();
                            root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(TYPE, "TYPE"), root_1);
                            adaptor.addChild(root_1, stream_simple_type.nextTree());
                            adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;
                }
                break;
            case 2:
                // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:247:46: array_type
                {
                    pushFollow(FOLLOW_array_type_in_type2026);
                    array_type136 = array_type();
                    state._fsp--;
                    stream_array_type.add(array_type136.getTree());
                    // AST REWRITE
                    // elements: array_type
                    // token labels:
                    // rule labels: retval
                    // token list labels:
                    // rule list labels:
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", retval != null ? retval.tree : null);
                    root_0 = (CommonTree) adaptor.nil();
                    // 247:57: -> ^( TYPE array_type )
                    {
                        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:247:60: ^( TYPE array_type )
                        {
                            CommonTree root_1 = (CommonTree) adaptor.nil();
                            root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(TYPE, "TYPE"), root_1);
                            adaptor.addChild(root_1, stream_array_type.nextTree());
                            adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;
                }
                break;
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
