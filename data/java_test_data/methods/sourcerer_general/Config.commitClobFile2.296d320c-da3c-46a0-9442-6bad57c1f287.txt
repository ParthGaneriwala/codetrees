public void commitClobFile2(InputStream stream, String fileName, Shell shell) throws SQLException, Exception {
    OracleConnection oc = null;
    OraclePreparedStatement selostmt = null;
    ResultSet rset = null;
    String selQuery = null;
    CLOB clob = null;
    try {
        String fileContent = inputStreamAsString(stream);
        oc = (OracleConnection) this.getOracleConnection(data);
        // switch off commits
        oc.setAutoCommit(false);
        selQuery = "select " + data.getClobColumnName() + " from " + data.getTableName() + " where lower(" + data.getFileNameColumn() + ") = lower(?) for update";
        PluginLogger.logInfo("query: " + selQuery);
        selostmt = (OraclePreparedStatement) oc.prepareStatement(selQuery);
        // set the parameters
        selostmt.setString(1, fileName);
        rset = selostmt.executeQuery();
        if (rset.next()) {
            // get the CLOB locators
            clob = ((OracleResultSet) rset).getCLOB(1);
            if ((clob != null) && (fileContent != null))
                writeTextToCLOB(clob, fileContent);
            PluginLogger.logInfo("one row selected length:" + clob.getLength() + " -- string length: " + fileContent.length());
        }
        // reinstate auto commit
        oc.setAutoCommit(true);
        // commit changes
        oc.commit();
        // close the resultset
        rset.close();
        rset = null;
        // close the statement
        selostmt.close();
        selostmt = null;
        MessageDialog.openInformation(shell, "OracleClobEditor Plug-in", "Save '" + fileName + "' executed sucessful!");
    } catch (SQLException ex) {
        PluginLogger.logError("Error:  ", ex);
        throw ex;
    } finally {
        // reinstate auto commit
        if (!oc.getAutoCommit()) {
            oc.rollback();
            oc.setAutoCommit(true);
        }
        // close the resultset
        if (rset != null)
            rset.close();
        // close the statement
        if (selostmt != null)
            selostmt.close();
    }
}
