@SuppressWarnings("unchecked")
@Before
public void autoSetBean() {
    // �Զ�ע��Spring�����Bean������ÿ�������඼ȥ��ȡ��
    PropertyDescriptor[] propertyDescriptors = PropertyUtils.getPropertyDescriptors(this.getClass());
    for (PropertyDescriptor propertyDescriptor : propertyDescriptors) {
        String propertyName = propertyDescriptor.getName();
        Class propertyType = propertyDescriptor.getPropertyType();
        Method propertySetter = propertyDescriptor.getWriteMethod();
        if (propertySetter == null) {
            continue;
        }
        Object value;
        try {
            value = appContext.getBean(propertyName);
            if (value == null) {
                continue;
            }
            if (!propertyType.isInstance(value)) {
                continue;
            }
        } catch (Exception e) {
            continue;
        }
        try {
            propertySetter.invoke(this, new Object[] { value });
        } catch (Exception e) {
        }
    }
    if (setProtected()) {
        Class clazz = getClass();
        do {
            Field[] fields = clazz.getDeclaredFields();
            if (log.isDebugEnabled()) {
                log.debug("Found " + fields.length + " fields on " + clazz);
            }
            for (int i = 0; i < fields.length; i++) {
                Field field = fields[i];
                field.setAccessible(true);
                if (log.isDebugEnabled()) {
                    log.debug("Candidate field: " + field);
                }
                if (!Modifier.isStatic(field.getModifiers()) && Modifier.isProtected(field.getModifiers())) {
                    Object oldValue = null;
                    ;
                    try {
                        oldValue = field.get(this);
                    } catch (IllegalArgumentException e1) {
                    } catch (IllegalAccessException e1) {
                    }
                    if (oldValue == null) {
                        Object bean = appContext.getBean(field.getName());
                        field.setAccessible(true);
                        try {
                            field.set(this, bean);
                        } catch (IllegalArgumentException e) {
                        } catch (IllegalAccessException e) {
                        }
                        if (log.isDebugEnabled()) {
                            log.debug("Added managed variable '" + field.getName() + "'");
                        }
                    } else {
                        if (log.isDebugEnabled()) {
                            log.debug("Rejected managed variable '" + field.getName() + "'");
                        }
                    }
                }
            }
            clazz = clazz.getSuperclass();
        } while (!clazz.equals(BaseTest.class));
    }
}
