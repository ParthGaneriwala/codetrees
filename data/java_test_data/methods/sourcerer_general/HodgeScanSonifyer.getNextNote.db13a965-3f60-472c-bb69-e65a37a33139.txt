@Override
public MIDINote getNextNote(int v, HodgeEngine hodge) {
    MIDINote newNote;
    // int matrixDim = hodge.getMatrixDim();
    int maxState = hodge.getMaxCellState();
    int oldPitch = getNote(v).getPitch();
    if (oldPitch != MIDINote.REST)
        lastPitch[v] = oldPitch;
    MIDIPattern pattern = getMIDIPattern(v);
    int tempo = pattern.getTempo();
    int vol = pattern.getVolume();
    int cellState = hodge.getCellState(getPitchX(v), getPitchY(v));
    int newPitch = 0;
    if (cellState == 0 || cellState == maxState) {
        // random walk
        int i = DEF_INT;
        if (OPT_RAND_INT.getState()) {
            if ((Math.random() * MIDIBeats) > 1) {
                i = 0;
                double r = Math.random() * INT_WEIGHTS;
                for (int total = 0; r > total; total += intWeights[i++]) ;
            } else
                i = (int) (Math.random() * 12) + 1;
        }
        if (Math.random() < .5)
            i *= -1;
        newPitch = lastPitch[v] + i;
        if (newPitch < PITCH_BASE || newPitch > (PITCH_BASE + PITCH_RANGE)) {
            newPitch = lastPitch[v] - i;
        }
        // not really used yet
        intHistory[v][pattern.getCurrentSubBeat()] = Math.abs(i);
    } else {
        newPitch = (int) MiscUtil.mapValueToRange(cellState, 0, maxState, PITCH_BASE, PITCH_BASE + PITCH_RANGE);
    }
    if (pattern.getCurrentRhythmValue() == RhythmPattern.STACCATO) {
        newNote = new MIDINote(newPitch, tempo, vol);
    } else if (pattern.getCurrentRhythmValue() == RhythmPattern.LEGATO) {
        if (oldPitch != MIDINote.REST) {
            // hold note
            newNote = new MIDINote(oldPitch, -tempo, vol);
        } else
            // treat as staccato
            newNote = new MIDINote(newPitch, tempo, vol);
    } else
        // rest
        newNote = new MIDINote(MIDINote.REST, tempo, vol);
    if (OPT_DEBUG.getState()) {
        System.out.println("Voice " + v + ", " + newNote + ", PosX: " + getPitchX(v) + ", PosY: " + getPitchY(v));
    }
    return newNote;
}
