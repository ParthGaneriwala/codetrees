@Override
public void setup() {
    Object[] argv = this.getArguments();
    // container = (String)argv[0];
    // this.usePublishing = ((Boolean)argv[1]).booleanValue();
    this.seedRand = ((Long) argv[1]).longValue();
    this.pr_gen = new PseudoRandomGenerator(this.seedRand);
    this.resources_model = new ResourcesModel(this.pr_gen);
    super.setup();
    addBehaviour(new ResourcesDynamicUpdaterBehaviour(this));
    addBehaviour(new PublishSubscribeBehaviour(this));
    addBehaviour(new NotifyListenBehaviour(this));
    try {
        if (this.pr_gen.getUniform() < Config.PUBLISHER_PROBABILITY)
            usePublishing = true;
        else
            usePublishing = false;
        // System.out.println("sono publisher? "+usePublishing);
        mn_info = new MobileNodeInfo(this.getName(), null, new ResourceStatus(this.resources_model, this.getContainerName()), this.container);
        setStatus(new ResourceStatus(resources_model, this.getContainerName()));
        addBehaviour(new UpdateResourcesBehaviour(this));
        // addBehaviour(new ResourceListenBehaviour(this));
        SequentialBehaviour join_srv_b = new SequentialBehaviour(this);
        join_srv_b.addSubBehaviour(new GetCHListBehaviour(this));
        join_srv_b.addSubBehaviour(new ClusterJoinReqBehaviour(this));
        addBehaviour(join_srv_b);
        // TODO check if onEnd patch works :D
        SequentialBehaviour new_ch_ntfy_hndl_b = new SequentialBehaviour(this);
        /*
                    {@Override
                             protected Behaviour getCurrent() {
                                if(super.getCurrent()==null)
                                    scheduleFirst();
                                return super.getCurrent();
                            }
                        /*public int onEnd() {
                        this.reset();
                        return 0;}* /
                    }; */
        new_ch_ntfy_hndl_b.addSubBehaviour(new NewCHNotifyListenerBehaviour(this));
        new_ch_ntfy_hndl_b.addSubBehaviour(new ClusterJoinReqBehaviour(this));
        addBehaviour(new_ch_ntfy_hndl_b);
        // addBehaviour(new NewCHNotifyListenerBehaviour(this));
        // addBehaviour(new ClusterShrinkingListenerBehaviour(this));
        SequentialBehaviour cl_shrnk_hndl_b = new SequentialBehaviour(this) {

            @Override
            protected Behaviour getCurrent() {
                if (super.getCurrent() == null)
                    scheduleFirst();
                return super.getCurrent();
            }
        };
        cl_shrnk_hndl_b.addSubBehaviour(new ClusterShrinkingListenerBehaviour(this));
        cl_shrnk_hndl_b.addSubBehaviour(new ClusterJoinReqBehaviour(this));
        addBehaviour(cl_shrnk_hndl_b);
    } catch (Exception e) {
        e.printStackTrace();
    }
// addBehaviour(new ClusterJoinReqBehaviour(this));
}
