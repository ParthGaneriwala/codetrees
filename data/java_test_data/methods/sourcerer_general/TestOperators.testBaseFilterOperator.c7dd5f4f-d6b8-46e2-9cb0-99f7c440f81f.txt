public void testBaseFilterOperator() throws Throwable {
    try {
        System.out.println("Testing Filter Operator");
        exprNodeDesc col0 = new exprNodeColumnDesc(String.class, "col0");
        exprNodeDesc col1 = new exprNodeColumnDesc(String.class, "col1");
        exprNodeDesc col2 = new exprNodeColumnDesc(String.class, "col2");
        exprNodeDesc zero = new exprNodeConstantDesc(Number.class, Long.valueOf(0));
        exprNodeDesc func1 = SemanticAnalyzer.getFuncExprNodeDesc(">", col2, col1);
        exprNodeDesc func2 = SemanticAnalyzer.getFuncExprNodeDesc("==", col0, zero);
        exprNodeDesc func3 = SemanticAnalyzer.getFuncExprNodeDesc("&&", func1, func2);
        assert (func3 != null);
        filterDesc filterCtx = new filterDesc(func3);
        // Configuration
        Operator<filterDesc> op = OperatorFactory.get(filterDesc.class);
        op.setConf(filterCtx);
        // runtime initialization
        op.initialize(null);
        for (InspectableObject oner : r) {
            op.process(oner.o, oner.oi);
        }
        Map<Enum<?>, Long> results = op.getStats();
        System.out.println("filtered = " + results.get(FilterOperator.Counter.FILTERED));
        assertEquals(results.get(FilterOperator.Counter.FILTERED), Long.valueOf(4));
        System.out.println("passed = " + results.get(FilterOperator.Counter.PASSED));
        assertEquals(results.get(FilterOperator.Counter.PASSED), Long.valueOf(1));
        /*
      for(Enum e: results.keySet()) {
        System.out.println(e.toString() + ":" + results.get(e));
      }
      */
        System.out.println("Filter Operator ok");
    } catch (Throwable e) {
        e.printStackTrace();
        throw e;
    }
}
