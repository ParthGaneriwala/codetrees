public void inverfc() {
    if ((this.exponent < 0 && this.mantissa != 0) || (this.sign != 0) || this.greaterThan(TWO)) {
        makeNan();
        return;
    }
    if ((this.exponent == 0 && this.mantissa == 0)) {
        makeInfinity(0);
        return;
    }
    if (this.equalTo(TWO)) {
        makeInfinity(1);
        return;
    }
    int sign = ONE.compare(this);
    if (sign == 0) {
        makeZero();
        return;
    }
    if (sign < 0) {
        neg();
        add(TWO);
    }
    // Using invphi to calculate inverfc, like this
    // inverfc(x) = -invphi(x/2)/(sqrt(2))
    scalbn(-1);
    // Inverse Phi Algorithm (phi(Z)=P, so invphi(P)=Z)
    // ------------------------------------------------
    // Part 1: Numerical Approximation Method for Inverse Phi
    // This accepts input of P and outputs approximate Z as Y
    // Source:Odeh & Evans. 1974. AS 70. Applied Statistics.
    // R = sqrt(Ln(1/(Q�)))
    {
        tmp1.mantissa = this.mantissa;
        tmp1.exponent = this.exponent;
        tmp1.sign = this.sign;
    }
    ;
    tmp1.ln();
    tmp1.mul(-2);
    tmp1.sqrt();
    // Y = -(R+((((P4*R+P3)*R+P2)*R+P1)*R+P0)/((((Q4*R+Q3)*R*Q2)*R+Q1)*R+Q0))
    // P4=-0.0000453642210148
    {
        tmp2.sign = (byte) 1;
        tmp2.exponent = 0x3ffffff1;
        tmp2.mantissa = 0x5f22bb0fb4698674L;
    }
    // P4=-0.0000453642210148
    ;
    tmp2.mul(tmp1);
    // P3=-0.0204231210245
    {
        tmp3.sign = (byte) 1;
        tmp3.exponent = 0x3ffffffa;
        tmp3.mantissa = 0x53a731ce1ea0be15L;
    }
    // P3=-0.0204231210245
    ;
    tmp2.add(tmp3);
    tmp2.mul(tmp1);
    // P2=-0.342242088547
    {
        tmp3.sign = (byte) 1;
        tmp3.exponent = 0x3ffffffe;
        tmp3.mantissa = 0x579d2d719fc517f3L;
    }
    // P2=-0.342242088547
    ;
    tmp2.add(tmp3);
    tmp2.mul(tmp1);
    // P1=-1
    tmp2.add(-1);
    tmp2.mul(tmp1);
    // P0=-0.322232431088
    {
        tmp3.sign = (byte) 1;
        tmp3.exponent = 0x3ffffffe;
        tmp3.mantissa = 0x527dd3193bc8dd4cL;
    }
    // P0=-0.322232431088
    ;
    tmp2.add(tmp3);
    // Q4=0.0038560700634
    {
        tmp3.sign = (byte) 0;
        tmp3.exponent = 0x3ffffff7;
        tmp3.mantissa = 0x7e5b0f681d161e7dL;
    }
    // Q4=0.0038560700634
    ;
    tmp3.mul(tmp1);
    // Q3=0.103537752850
    {
        tmp4.sign = (byte) 0;
        tmp4.exponent = 0x3ffffffc;
        tmp4.mantissa = 0x6a05ccf9917da0a8L;
    }
    // Q3=0.103537752850
    ;
    tmp3.add(tmp4);
    tmp3.mul(tmp1);
    // Q2=0.531103462366
    {
        tmp4.sign = (byte) 0;
        tmp4.exponent = 0x3fffffff;
        tmp4.mantissa = 0x43fb32c0d3c14ec4L;
    }
    // Q2=0.531103462366
    ;
    tmp3.add(tmp4);
    tmp3.mul(tmp1);
    // Q1=0.588581570495
    {
        tmp4.sign = (byte) 0;
        tmp4.exponent = 0x3fffffff;
        tmp4.mantissa = 0x4b56a41226f4ba95L;
    }
    // Q1=0.588581570495
    ;
    tmp3.add(tmp4);
    tmp3.mul(tmp1);
    // Q0=0.0993484626060
    {
        tmp4.sign = (byte) 0;
        tmp4.exponent = 0x3ffffffc;
        tmp4.mantissa = 0x65bb9a7733dd5062L;
    }
    // Q0=0.0993484626060
    ;
    tmp3.add(tmp4);
    tmp2.div(tmp3);
    tmp1.add(tmp2);
    tmp1.neg();
    // sqrtTmp and tmp5 not used by erfc() and exp()
    {
        sqrtTmp.mantissa = tmp1.mantissa;
        sqrtTmp.exponent = tmp1.exponent;
        sqrtTmp.sign = tmp1.sign;
    }
    // sqrtTmp and tmp5 not used by erfc() and exp()
    ;
    // Part 2: Refine to accuracy of erfc Function
    // This accepts inputs Y and P (from above) and outputs Z
    // (Using Halley's third order method for finding roots of equations)
    // Q = erfc(-Y/sqrt(2))/2-P
    {
        tmp5.mantissa = sqrtTmp.mantissa;
        tmp5.exponent = sqrtTmp.exponent;
        tmp5.sign = sqrtTmp.sign;
    }
    ;
    tmp5.mul(SQRT1_2);
    tmp5.neg();
    tmp5.erfc();
    tmp5.scalbn(-1);
    tmp5.sub(this);
    // R = Q*sqrt(2*pi)*e^(Y�/2)
    {
        tmp3.mantissa = sqrtTmp.mantissa;
        tmp3.exponent = sqrtTmp.exponent;
        tmp3.sign = sqrtTmp.sign;
    }
    ;
    tmp3.sqr();
    tmp3.scalbn(-1);
    tmp3.exp();
    tmp5.mul(tmp3);
    // sqrt(2*pi)
    {
        tmp3.sign = (byte) 0;
        tmp3.exponent = 0x40000001;
        tmp3.mantissa = 0x50364c7fd89c1659L;
    }
    // sqrt(2*pi)
    ;
    tmp5.mul(tmp3);
    // Z = Y-R/(1+R*Y/2)
    {
        this.mantissa = sqrtTmp.mantissa;
        this.exponent = sqrtTmp.exponent;
        this.sign = sqrtTmp.sign;
    }
    ;
    mul(tmp5);
    scalbn(-1);
    add(ONE);
    rdiv(tmp5);
    neg();
    add(sqrtTmp);
    // calculate inverfc(x) = -invphi(x/2)/(sqrt(2))
    mul(SQRT1_2);
    if (sign > 0)
        neg();
}
