public void layoutContainer(Container parent) {
    Insets insets = parent.getInsets();
    Dimension d = parent.getSize();
    // calculate the available sizes
    d.width = d.width - insets.left - insets.right;
    d.height = d.height - insets.top - insets.bottom;
    // pre-calculate the size of each components
    Component[] components = parent.getComponents();
    int[] sizes = new int[components.length];
    // calculate the available size
    int totalSize = (HORIZONTAL == orientation ? d.width : d.height) - (components.length - 1) * gap;
    int availableSize = totalSize;
    // have a predefined size
    for (int i = 0, c = components.length; i < c; i++) {
        if (components[i].isVisible()) {
            Constraint constraint = (Constraint) m_ComponentToConstraint.get(components[i]);
            if (constraint == null || constraint == PREFERRED_SIZE) {
                sizes[i] = (HORIZONTAL == orientation ? components[i].getPreferredSize().width : components[i].getPreferredSize().height);
                availableSize -= sizes[i];
            } else if (constraint instanceof NumberConstraint) {
                sizes[i] = ((NumberConstraint) constraint).intValue();
                availableSize -= sizes[i];
            }
        }
    }
    // then work with the components who want a percentage of the remaining
    // space
    int remainingSize = availableSize;
    for (int i = 0, c = components.length; i < c; i++) {
        if (components[i].isVisible()) {
            Constraint constraint = (Constraint) m_ComponentToConstraint.get(components[i]);
            if (constraint instanceof PercentConstraint) {
                sizes[i] = (int) (remainingSize * ((PercentConstraint) constraint).floatValue());
                availableSize -= sizes[i];
            }
        }
    }
    // finally share the remaining space between the other components
    ArrayList remaining = new ArrayList();
    for (int i = 0, c = components.length; i < c; i++) {
        if (components[i].isVisible()) {
            Constraint constraint = (Constraint) m_ComponentToConstraint.get(components[i]);
            if (constraint == REMAINING_SPACE) {
                remaining.add(new Integer(i));
                sizes[i] = 0;
            }
        }
    }
    if (remaining.size() > 0) {
        int rest = availableSize / remaining.size();
        for (Iterator iter = remaining.iterator(); iter.hasNext(); ) {
            sizes[((Integer) iter.next()).intValue()] = rest;
        }
    }
    // all calculations are done, apply the sizes
    int currentOffset = (HORIZONTAL == orientation ? insets.left : insets.top);
    for (int i = 0, c = components.length; i < c; i++) {
        if (components[i].isVisible()) {
            if (HORIZONTAL == orientation) {
                components[i].setBounds(currentOffset, insets.top, sizes[i], d.height);
            } else {
                components[i].setBounds(insets.left, currentOffset, d.width, sizes[i]);
            }
            currentOffset += gap + sizes[i];
        }
    }
}
