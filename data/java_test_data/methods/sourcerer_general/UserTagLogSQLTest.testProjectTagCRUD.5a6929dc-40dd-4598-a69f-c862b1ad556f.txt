public void testProjectTagCRUD() throws SQLException {
    UserTagLogList userTagLogList = new UserTagLogList();
    userTagLogList.buildList(db);
    for (UserTagLog userTagLog : userTagLogList) {
        userTagLog.delete(db);
    }
    // Insert a tag
    UserTagLog userTagLogForProject = new UserTagLog();
    userTagLogForProject.setUserId(USER_ID);
    userTagLogForProject.setLinkModuleId(Constants.PROJECT_REVIEW_FILES);
    userTagLogForProject.setLinkItemId(1);
    userTagLogForProject.setTag("project tag");
    assertNotNull(userTagLogForProject);
    boolean result = userTagLogForProject.insert(db);
    assertTrue("The project tag was not inserted", result);
    // Load the inserted tag from table
    userTagLogList = new UserTagLogList();
    userTagLogList.setUserId(userTagLogForProject.getUserId());
    userTagLogList.setLinkModuleId(userTagLogForProject.getLinkModuleId());
    userTagLogList.setLinkItemId(userTagLogForProject.getLinkItemId());
    userTagLogList.setTag(userTagLogForProject.getTag().toLowerCase());
    userTagLogList.buildList(db);
    assertTrue("The user tag log was not inserted", (userTagLogList.size() == 1));
    if (userTagLogList.size() == 1) {
        assertNotNull("Tag date not default to current timestamp", userTagLogList.get(0).getTagDate());
    }
    // Load the inserted tag from view projects_tag_log
    TagLogList projectTagLogList = new TagLogList();
    projectTagLogList.setUserId(userTagLogForProject.getUserId());
    projectTagLogList.setLinkItemId(userTagLogForProject.getLinkItemId());
    projectTagLogList.setTableName(Project.TABLE);
    projectTagLogList.setUniqueField(Project.PRIMARY_KEY);
    projectTagLogList.setTag(userTagLogForProject.getTag().toLowerCase());
    projectTagLogList.buildList(db);
    assertTrue("The project tag log could not be fetched (" + projectTagLogList.size() + ")", (projectTagLogList.size() == 1));
    // Test record in the view project_tag
    TagList projectTagList = new TagList();
    projectTagList.setLinkItemId(userTagLogForProject.getLinkItemId());
    projectTagList.setTableName(Project.TABLE);
    projectTagList.setUniqueField(Project.PRIMARY_KEY);
    projectTagList.setTag(userTagLogForProject.getTag().toLowerCase());
    projectTagList.buildList(db);
    assertTrue("The project tag could not be fetched", (projectTagList.size() == 1));
    // Delete test tag
    userTagLogForProject.delete(db);
    // Test that it has been deleted from table
    userTagLogList = new UserTagLogList();
    userTagLogList.setUserId(userTagLogForProject.getUserId());
    userTagLogList.setLinkModuleId(userTagLogForProject.getLinkModuleId());
    userTagLogList.setLinkItemId(userTagLogForProject.getLinkItemId());
    userTagLogList.setTag(userTagLogForProject.getTag().toLowerCase());
    userTagLogList.buildList(db);
    assertTrue("The project tag log was not deleted", (userTagLogList.size() == 0));
    // Test that the record does not exist in the view.
    projectTagLogList = new TagLogList();
    projectTagLogList.setUserId(userTagLogForProject.getUserId());
    projectTagLogList.setLinkItemId(userTagLogForProject.getLinkItemId());
    projectTagLogList.setTableName(Project.TABLE);
    projectTagLogList.setUniqueField(Project.PRIMARY_KEY);
    projectTagLogList.setTag(userTagLogForProject.getTag());
    projectTagLogList.buildList(db);
    assertTrue("The project tag log was not deleted", (projectTagLogList.size() == 0));
    projectTagList = new TagList();
    projectTagList.setLinkItemId(userTagLogForProject.getLinkItemId());
    projectTagList.setTableName(Project.TABLE);
    projectTagList.setUniqueField(Project.PRIMARY_KEY);
    projectTagList.setTag(userTagLogForProject.getTag().toLowerCase());
    projectTagList.buildList(db);
    assertTrue("The project tag could was not deleted", (projectTagList.size() == 0));
}
