public InputStream postFileRequest(String methodName, Map<String, CharSequence> params) throws IOException {
    assert (null != _uploadFile);
    try {
        BufferedInputStream bufin = new BufferedInputStream(new FileInputStream(_uploadFile));
        String boundary = Long.toString(System.currentTimeMillis(), 16);
        URLConnection con = SERVER_URL.openConnection();
        con.setDoInput(true);
        con.setDoOutput(true);
        con.setUseCaches(false);
        con.setRequestProperty("Content-Type", "multipart/form-data; boundary=" + boundary);
        con.setRequestProperty("MIME-version", "1.0");
        DataOutputStream out = new DataOutputStream(con.getOutputStream());
        for (Map.Entry<String, CharSequence> entry : params.entrySet()) {
            out.writeBytes(PREF + boundary + CRLF);
            out.writeBytes("Content-disposition: form-data; name=\"" + entry.getKey() + "\"");
            out.writeBytes(CRLF + CRLF);
            out.writeBytes(entry.getValue().toString());
            out.writeBytes(CRLF);
        }
        out.writeBytes(PREF + boundary + CRLF);
        out.writeBytes("Content-disposition: form-data; filename=\"" + _uploadFile.getName() + "\"" + CRLF);
        out.writeBytes("Content-Type: image/jpeg" + CRLF);
        // out.writeBytes("Content-Transfer-Encoding: binary" + CRLF); // not necessary
        // Write the file
        out.writeBytes(CRLF);
        byte[] b = new byte[UPLOAD_BUFFER_SIZE];
        int byteCounter = 0;
        int i;
        while (-1 != (i = bufin.read(b))) {
            byteCounter += i;
            out.write(b, 0, i);
        }
        out.writeBytes(CRLF + PREF + boundary + PREF + CRLF);
        out.flush();
        out.close();
        InputStream is = con.getInputStream();
        return is;
    } catch (Exception e) {
        System.out.println("exception: " + e.getMessage());
        e.printStackTrace();
        return null;
    }
}
