@Override
protected Control createDialogArea(Composite ancestor) {
    getShell().setText(Messages.SourceNameMapperContainerDialog_DIALOG_TITLE);
    setTitle(Messages.SourceNameMapperContainerDialog_DIALOG_SUBTITLE);
    Composite parent = new Composite(ancestor, SWT.NULL);
    {
        GridLayout topLayout = new GridLayout();
        topLayout.numColumns = 1;
        parent.setLayout(topLayout);
        parent.setLayoutData(new GridData(GridData.FILL_BOTH));
    }
    Label explanationOne = new Label(parent, 0);
    explanationOne.setText(Messages.SourceNameMapperContainerDialog_EXPLANATION_1);
    Group prefixGroup = new Group(parent, SWT.NONE);
    prefixGroup.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    prefixGroup.setText(Messages.SourceNameMapperContainerDialog_PREFIX_GROUP);
    prefixGroup.setLayout(new GridLayout(1, false));
    final Text prefixEditor = new Text(prefixGroup, SWT.SINGLE | SWT.BORDER);
    prefixEditor.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    final Label prefixExampleLine1Label = new Label(prefixGroup, 0);
    prefixExampleLine1Label.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    final Label prefixExampleLine2Label = new Label(prefixGroup, 0);
    prefixExampleLine2Label.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    Label explanationTwo = new Label(parent, 0);
    explanationTwo.setText(Messages.SourceNameMapperContainerDialog_EXPLANATION_2);
    Group containerGroup = new Group(parent, SWT.NONE);
    containerGroup.setLayout(new GridLayout(1, false));
    containerGroup.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    containerGroup.setText(Messages.SourceNameMapperContainerDialog_CONTAINER_GROUP);
    Composite typeBlock = new Composite(containerGroup, SWT.NULL);
    typeBlock.setLayout(new GridLayout(3, false));
    typeBlock.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    final List<ISourceContainerType> types = filterTypes(DebugPlugin.getDefault().getLaunchManager().getSourceContainerTypes());
    Collections.sort(types, TYPE_COMPARATOR_BY_NAME);
    String[] typeNameArray = new String[types.size()];
    for (int i = 0; i < typeNameArray.length; i++) {
        typeNameArray[i] = types.get(i).getName();
    }
    Label comboLabel = new Label(typeBlock, 0);
    comboLabel.setText(Messages.SourceNameMapperContainerDialog_TYPE_LABEL);
    Combo typesCombo = new Combo(typeBlock, SWT.READ_ONLY);
    typesCombo.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    typesCombo.setFont(parent.getFont());
    typesCombo.setItems(typeNameArray);
    if (typeNameArray.length > 0) {
        typesCombo.select(0);
    }
    final Button configureButton = new Button(typeBlock, SWT.PUSH);
    configureButton.setText(Messages.SourceNameMapperContainerDialog_CONFIGURE_BUTTON);
    final Composite statusBox = new Composite(containerGroup, SWT.NULL);
    statusBox.setLayout(new GridLayout(3, false));
    statusBox.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    final Label statusLabel = new Label(statusBox, 0);
    final Label containerTypeIconLabel = new Label(statusBox, 0);
    final Label containerNameLabel = new Label(statusBox, 0);
    Dialog.applyDialogFont(parent);
    // Implementing Elements interface
    final ComboWrapper<ISourceContainerType> comboWrapper = new ComboWrapper<ISourceContainerType>(typesCombo) {

        @Override
        public ISourceContainerType getSelected() {
            return types.get(getCombo().getSelectionIndex());
        }

        @Override
        public void setSelected(ISourceContainerType element) {
            int index = types.indexOf(element);
            if (index != -1) {
                getCombo().select(index);
            }
        }
    };
    final ContainerStatusGroup containerStatusGroup = new ContainerStatusGroup() {

        public Label getStatusLabel() {
            return statusLabel;
        }

        public Label getTypeImageLabel() {
            return containerTypeIconLabel;
        }

        public Label getContainerNameLabel() {
            return containerNameLabel;
        }

        public void layout() {
            statusBox.layout();
        }

        public void setEnabled(boolean enabled) {
            statusLabel.setEnabled(enabled);
            containerTypeIconLabel.setEnabled(enabled);
            containerNameLabel.setEnabled(enabled);
        }
    };
    Elements elements = new Elements() {

        public Text getPrefixField() {
            return prefixEditor;
        }

        public Label getPrefixExampleLine1Label() {
            return prefixExampleLine1Label;
        }

        public Label getPrefixExampleLine2Label() {
            return prefixExampleLine2Label;
        }

        public Button getConfigureButton() {
            return configureButton;
        }

        public ComboWrapper<ISourceContainerType> getContainerTypeCombo() {
            return comboWrapper;
        }

        public Shell getShell() {
            return SourceNameMapperContainerDialog.this.getShell();
        }

        public ContainerStatusGroup getContainerStatusGroup() {
            return containerStatusGroup;
        }

        public Button getOkButton() {
            return SourceNameMapperContainerDialog.this.getButton(IDialogConstants.OK_ID);
        }

        public void setMessage(String message, int type) {
            SourceNameMapperContainerDialog.this.setMessage(message, type);
        }
    };
    logic = SourceNameMapperContainerDialogLogic.create(elements, director, initialParams);
    return parent;
}
