// ignorableWhitespace(XMLString,Augmentations)
public void endElement(QName element, Augmentations augs) throws XNIException {
    // is there anything to do?
    if (fSeenRootElementEnd) {
        return;
    }
    // get element information
    HTMLElements.Element elem = getElement(element.rawname);
    // do we ignore outside content?
    if (!fIgnoreOutsideContent && (elem.code == HTMLElements.BODY || elem.code == HTMLElements.HTML)) {
        return;
    }
    // check for end of document
    if (elem.code == HTMLElements.HTML) {
        fSeenRootElementEnd = true;
    }
    // empty element
    int depth = getElementDepth(elem);
    if (depth == -1 && elem.code == HTMLElements.P) {
        startElement(element, emptyAttributes(), synthesizedAugs());
        endElement(element, augs);
        return;
    }
    // find unbalanced inline elements
    if (depth > 1 && elem.isInline()) {
        int size = fElementStack.top;
        fInlineStack.top = 0;
        for (int i = 0; i < depth - 1; i++) {
            Info info = fElementStack.data[size - i - 1];
            HTMLElements.Element pelem = info.element;
            if (pelem.isInline()) {
                // NOTE: I don't have to make a copy of the info because
                // it will just be popped off of the element stack
                // as soon as we close it, anyway.
                fInlineStack.push(info);
            }
        }
    }
    // close children up to appropriate element
    for (int i = 0; i < depth; i++) {
        Info info = fElementStack.pop();
        if (fReportErrors && i < depth - 1) {
            String ename = modifyName(element.rawname, fNamesElems);
            String iname = info.qname.rawname;
            fErrorReporter.reportWarning("HTML2007", new Object[] { ename, iname });
        }
        if (fDocumentHandler != null) {
            // PATCH: Marc-Andrï¿½ Morissette
            callEndElement(info.qname, i < depth - 1 ? synthesizedAugs() : augs);
        }
    }
    // re-open inline elements
    if (depth > 1) {
        int size = fInlineStack.top;
        for (int i = 0; i < size; i++) {
            Info info = (Info) fInlineStack.pop();
            XMLAttributes attributes = info.attributes;
            if (fReportErrors) {
                String iname = info.qname.rawname;
                fErrorReporter.reportWarning("HTML2008", new Object[] { iname });
            }
            startElement(info.qname, attributes, synthesizedAugs());
        }
    }
}
