// / This resets the mass properties to the sum of the mass properties of the fixtures.
// / This normally does not need to be called unless you called setMassData to override
public void resetMass() {
    // Compute mass data from shapes. Each shape has its own density.
    m_mass = 0.0f;
    m_invMass = 0.0f;
    m_I = 0.0f;
    m_invI = 0.0f;
    BBVec2 center = vec2_zero;
    for (BBFixture f = m_fixtureList; f != null; f = f.m_next) {
        final BBMassData massData = f.getMassData();
        m_mass += massData.mass;
        center.add(mul(massData.mass, massData.center));
        m_I += massData.I;
    }
    // Compute center of mass.
    if (m_mass > 0.0f) {
        m_invMass = 1.0f / m_mass;
        center.mul(m_invMass);
    }
    if (m_I > 0.0f & (m_flags & e_fixedRotationFlag) == 0) {
        // Center the inertia about the center of mass.
        m_I -= m_mass * dot(center, center);
        assert (m_I > 0.0f);
        m_invI = 1.0f / m_I;
    } else {
        m_I = 0.0f;
        m_invI = 0.0f;
    }
    // Move center of mass.
    BBVec2 oldCenter = m_sweep.c;
    m_sweep.localCenter = center;
    m_sweep.c0 = m_sweep.c = mul(m_xf, m_sweep.localCenter);
    // Update center of mass velocity.
    m_linearVelocity.add(cross(m_angularVelocity, sub(m_sweep.c, oldCenter)));
    // Determine the new body type.
    int oldType = m_type;
    if (m_invMass == 0.0f & m_invI == 0.0f) {
        m_type = e_staticType;
    } else {
        m_type = e_dynamicType;
    }
    // If the body type changed, we need to flag contacts for filtering.
    if (oldType != m_type) {
        for (BBContactEdge ce = m_contactList; ce != null; ce = ce.next) {
            ce.contact.FlagForFiltering();
        }
    }
}
