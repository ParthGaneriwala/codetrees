public List<Feature> extract(JCas view, Annotation focusAnnotation) throws CleartkExtractorException {
    List<? extends Annotation> annotations;
    List<Feature> ngramFeatures = new ArrayList<Feature>();
    annotations = new ArrayList<Annotation>(JCasUtil.selectCovered(view, annotationClass, focusAnnotation));
    Map<Annotation, List<Feature>> annotationFeatures = new HashMap<Annotation, List<Feature>>();
    for (Annotation annotation : annotations) {
        List<Feature> features = this.subExtractor.extract(view, annotation);
        annotationFeatures.put(annotation, features);
    }
    for (int i = 0; i < annotations.size() - n + 1; i++) {
        List<Annotation> slice = new ArrayList<Annotation>(n);
        for (int j = 0; j < n; j++) {
            slice.add(annotations.get(i + j));
        }
        List<String> values = new ArrayList<String>(n);
        List<String> names = new ArrayList<String>(n + 1);
        for (Annotation annotation : slice) {
            for (Feature feature : annotationFeatures.get(annotation)) {
                values.add(feature.getValue().toString());
                names.add(feature.getName());
            }
        }
        // create name
        StringBuffer nameBuffer = new StringBuffer();
        for (String name : names) {
            if (nameBuffer.toString().length() > 0)
                nameBuffer.append(",");
            nameBuffer.append(name);
        }
        String name = String.format("Ngram(%s,%s)", this.annotationClass.getSimpleName(), nameBuffer.toString());
        // create value
        StringBuffer valueBuffer = new StringBuffer();
        for (String subValue : values) {
            valueBuffer.append(subValue);
            valueBuffer.append(valueSeparator);
        }
        if (valueBuffer.length() > 0)
            valueBuffer.deleteCharAt(valueBuffer.length() - 1);
        String value = valueBuffer.toString();
        // add feature
        ngramFeatures.add(new Feature(name, value));
    }
    return ngramFeatures;
}
