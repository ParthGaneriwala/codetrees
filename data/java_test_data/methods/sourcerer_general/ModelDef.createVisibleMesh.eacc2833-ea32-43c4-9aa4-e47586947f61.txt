public ModelConfig.VisibleMesh createVisibleMesh(ModelConfig.Imported config) {
    // if non-colored, clear out the color information
    if (!colored) {
        for (Vertex vertex : vertices) {
            vertex.color = null;
        }
    }
    // optimize the vertex order
    optimizeVertexOrder(config.generateTangents);
    // create the base arrays
    AttributeArrayConfig[] vertexAttribArrays = createVertexAttribArrays(config);
    ClientArrayConfig[] texCoordArrays = new ClientArrayConfig[vertices.isEmpty() ? 1 : (vertices.get(0).extras.size() + 1)];
    for (int ii = 0; ii < texCoordArrays.length; ii++) {
        texCoordArrays[ii] = new ClientArrayConfig(2);
    }
    ClientArrayConfig colorArray = colored ? new ClientArrayConfig(4) : null;
    ClientArrayConfig normalArray = new ClientArrayConfig(3);
    ClientArrayConfig vertexArray = new ClientArrayConfig(3);
    // put them all in a list
    ArrayList<ClientArrayConfig> arrays = new ArrayList<ClientArrayConfig>();
    if (vertexAttribArrays != null) {
        Collections.addAll(arrays, vertexAttribArrays);
    }
    Collections.addAll(arrays, texCoordArrays);
    if (colorArray != null) {
        arrays.add(colorArray);
    }
    arrays.add(normalArray);
    arrays.add(vertexArray);
    // compute the offsets and stride
    int offset = 0;
    for (ClientArrayConfig array : arrays) {
        array.offset = offset;
        offset += array.getElementBytes();
    }
    // allocate the buffer and update the arrays
    int stride = offset;
    int vsize = stride / 4;
    FloatBuffer vbuf = BufferUtils.createFloatBuffer(vertices.size() * vsize);
    for (ClientArrayConfig array : arrays) {
        array.stride = stride;
        array.floatArray = vbuf;
    }
    // compute the bounds
    Box bounds = new Box(Vector3f.MAX_VALUE, Vector3f.MIN_VALUE);
    for (Vertex vertex : vertices) {
        bounds.addLocal(new Vector3f(vertex.location));
    }
    bounds.expandLocal(config.boundsExpansion, config.boundsExpansion, config.boundsExpansion);
    // create and return the mesh
    return new ModelConfig.VisibleMesh(texture, StringUtil.isBlank(tag) ? getDefaultTag() : tag, createGeometry(bounds, vertexAttribArrays, texCoordArrays, colorArray, normalArray, vertexArray));
}
