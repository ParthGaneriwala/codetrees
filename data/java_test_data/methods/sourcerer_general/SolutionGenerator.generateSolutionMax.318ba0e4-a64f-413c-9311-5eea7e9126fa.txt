static WICOutput generateSolutionMax(WICInput inputData) {
    int[] ySet = inputData.getYSet().clone();
    int n = inputData.getN();
    // in this Vector we store the solutions (intervals + weight --> int[3])
    Vector<int[]> solution = new Vector<int[]>();
    // the first two numbers: interval boundaries, third: weight
    // [a,b] defines the interval, c is the weight
    int a, b, c = 0;
    int indexOfMax = 0;
    int indexOfMaxNeighborLEFT = 0, indexOfMaxNeighborRIGHT = 0;
    while (true) {
        indexOfMax = 0;
        // _Step 1_: find the index of the maximum number
        for (int i = 1; i < n; i++) if (ySet[i] > ySet[indexOfMax])
            indexOfMax = i;
        if (// this means that the algorithm can terminate, all the numbers are 0
        ySet[indexOfMax] == 0)
            break;
        // _Step 2_: find the biggest neighbor and create the interval. We extend the interval
        // if the sorrounding numbers are equal to ySet[indexOfMax]
        a = indexOfMax;
        b = indexOfMax + 1;
        // weight
        c = 0;
        // let's look at the left for equal numbers
        while ((a > 0) && (ySet[a - 1] == ySet[indexOfMax])) a--;
        if (// we reached the limit at the left
        a - 1 < 0)
            indexOfMaxNeighborLEFT = -1;
        else
            indexOfMaxNeighborLEFT = a - 1;
        // let's look at the right for equal numbers
        while ((b < n) && (ySet[b] == ySet[indexOfMax])) b++;
        if (// we reached the limit at the right
        b > n - 1)
            indexOfMaxNeighborRIGHT = -1;
        else
            indexOfMaxNeighborRIGHT = b;
        // the weight of the interval is chosen to "level" the numbers to the max neighbor
        if (// covered the entire sequence
        indexOfMaxNeighborLEFT == -1 && indexOfMaxNeighborRIGHT == -1)
            c = ySet[indexOfMax];
        else if (indexOfMaxNeighborLEFT == -1)
            c = ySet[indexOfMax] - ySet[indexOfMaxNeighborRIGHT];
        else if (indexOfMaxNeighborRIGHT == -1)
            c = ySet[indexOfMax] - ySet[indexOfMaxNeighborLEFT];
        else if (ySet[indexOfMaxNeighborLEFT] >= ySet[indexOfMaxNeighborRIGHT])
            c = ySet[indexOfMax] - ySet[indexOfMaxNeighborLEFT];
        else
            c = ySet[indexOfMax] - ySet[indexOfMaxNeighborRIGHT];
        // update the values covered by the interval
        for (int i = a; i < b; i++) ySet[i] = ySet[i] - c;
        // add the triple to the solution set. Adjust the values too
        solution.add(new int[] { a + 1, b + 1, c });
    }
    return new WICOutput(solution, solution.size());
}
