@Override
public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {
    for (Element element : roundEnv.getElementsAnnotatedWith(UniversalTest.class)) {
        String suffix = SourceUtil.suffixOf(element);
        String sourceBase = String.format("%s/src/test/java/", SourceUtil.sourceBaseDirectory(element));
        String testCompletSourcePath = sourceBase + SourceUtil.getTestPath(element);
        List<String> excludedMethods;
        try {
            excludedMethods = SourceUtil.excludedMethods(element);
        } catch (TestGeneratorException tge) {
            excludedMethods = new ArrayList<String>();
        }
        String testGroovyPath = SourceUtil.groovyPath(testCompletSourcePath).replace(sourceBase, "").replaceAll("\\.groovy", "_" + suffix + ".groovy");
        String testPropertiesGroovyPath = SourceUtil.groovyPath(testCompletSourcePath).replace(sourceBase, "").replaceAll("\\.groovy", "_Property_" + suffix + ".groovy");
        try {
            InputStream testIs = processingEnv.getFiler().getResource(StandardLocation.SOURCE_PATH, "", testCompletSourcePath).openInputStream();
            CompilationUnit testUnit = JavaParser.parse(testIs);
            OutputStream testOs = processingEnv.getFiler().createResource(StandardLocation.SOURCE_OUTPUT, "", testGroovyPath, element).openOutputStream();
            GroovyFromJavaSourceTestBuilder testBuilder = new GroovyFromJavaSourceTestBuilder(testUnit, suffix);
            testBuilder.build(new JavaToGroovySyntaxTransformer(), excludedMethods);
            SourceUtil.writeSource(testBuilder.toString(), testOs);
            // 
            InputStream testPropertiesIs = processingEnv.getFiler().getResource(StandardLocation.SOURCE_PATH, "", testCompletSourcePath).openInputStream();
            CompilationUnit testPropertiesUnit = JavaParser.parse(testPropertiesIs);
            OutputStream testPropertiesOs = processingEnv.getFiler().createResource(StandardLocation.SOURCE_OUTPUT, "", testPropertiesGroovyPath, element).openOutputStream();
            GroovyFromJavaSourceTestBuilder testPropertiesBuilder = new GroovyFromJavaSourceTestBuilder(testPropertiesUnit, "Property_" + suffix);
            testPropertiesBuilder.build(new JavaToGroovyPropertiesSyntaxTransformer(), excludedMethods);
            SourceUtil.writeSource(testPropertiesBuilder.toString(), testPropertiesOs);
            // 
            for (String chromatticSourcePath : SourceUtil.getChromatticPaths(element)) {
                String chromatticCompletSourcePath = sourceBase + chromatticSourcePath;
                String chromatticGroovyPath = SourceUtil.groovyPath(chromatticSourcePath);
                InputStream chromatticIs = processingEnv.getFiler().getResource(StandardLocation.SOURCE_PATH, "", chromatticCompletSourcePath).openInputStream();
                CompilationUnit chromatticUnit = JavaParser.parse(chromatticIs);
                try {
                    OutputStream chromatticOs = processingEnv.getFiler().createResource(StandardLocation.SOURCE_OUTPUT, "", chromatticGroovyPath, element).openOutputStream();
                    GroovyFromJavaSourceChromatticBuilder chromatticBuilder = new GroovyFromJavaSourceChromatticBuilder(chromatticUnit);
                    chromatticBuilder.build();
                    SourceUtil.writeSource(chromatticBuilder.toString(), chromatticOs);
                } catch (FilerException ignore) {
                /* Source is already generated */
                }
            }
        } catch (IOException e) {
            throw new TestGeneratorException(e.getMessage(), e);
        } catch (ParseException e) {
            throw new TestGeneratorException(e.getMessage(), e);
        }
    }
    return true;
}
