void goSocketTagged(boolean socket, boolean inputTagged) throws IOException {
    System.out.println("***** goSocketTagged: " + socket + ", " + inputTagged);
    String expect = createInputs(inputTagged);
    lsr();
    printSampleInput();
    StringBuffer outputBuf = new StringBuffer();
    String sideOutput = null;
    File f = null;
    SideEffectConsumer consumer = null;
    if (socket) {
        consumer = startSideEffectConsumer(outputBuf);
        sideOutput = "socket://localhost:" + SOC_PORT + "/";
    } else {
        String userOut = StreamUtil.getBoundAntProperty("org.fit.hiai.hadoop.test.localoutputfile", null);
        if (userOut != null) {
            f = new File(userOut);
            // don't delete so they can mkfifo
            maybeFifoOutput_ = true;
        } else {
            f = new File("localoutputfile");
            f.delete();
            maybeFifoOutput_ = false;
        }
        String s = new Path(f.getAbsolutePath()).toString();
        if (!s.startsWith("/")) {
            // Windows "file:/C:/"
            s = "/" + s;
        }
        sideOutput = "file:" + s;
    }
    System.out.println("sideOutput=" + sideOutput);
    callStreaming(sideOutput, inputTagged);
    String output;
    if (socket) {
        try {
            consumer.join();
            consumer.close();
        } catch (InterruptedException e) {
            throw (IOException) new IOException().initCause(e);
        }
        output = outputBuf.toString();
    } else {
        if (maybeFifoOutput_) {
            System.out.println("assertEquals will fail.");
            output = "potential FIFO: not retrieving to avoid blocking on open() " + f.getAbsoluteFile();
        } else {
            output = StreamUtil.slurp(f.getAbsoluteFile());
        }
    }
    lsr();
    System.out.println("output=|" + output + "|");
    System.out.println("expect=|" + expect + "|");
    assertEquals(expect, output);
}
