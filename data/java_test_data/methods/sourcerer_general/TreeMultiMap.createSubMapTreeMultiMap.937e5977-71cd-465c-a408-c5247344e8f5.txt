private SortedMultiMap createSubMapTreeMultiMap(final Object mFrom, final SortedMap mMap, final Object mTo) {
    return new AbstractSortedMultiMap() {

        public int numKeys() {
            return mMap.size();
        }

        public boolean isEmpty() {
            return mMap.isEmpty();
        }

        public boolean containsKey(Object key) {
            return mMap.containsKey(key);
        }

        public Set get(Object key) {
            Set values = (Set) mMap.get(key);
            if (values == null)
                values = new HashSet();
            return values;
        }

        public Set addValue(Object key, Object value) {
            Set valueSet = (Set) mMap.get(key);
            if (valueSet == null) {
                valueSet = new HashSet();
                mMap.put(key, valueSet);
            }
            valueSet.add(value);
            return valueSet;
        }

        public Set addValues(Object key, Collection values) {
            Set valueSet = (Set) mMap.get(key);
            if (valueSet == null) {
                valueSet = new HashSet();
                mMap.put(key, valueSet);
            }
            valueSet.addAll(values);
            return valueSet;
        }

        public Set putValue(Object key, Object value) {
            Set valueSet = new HashSet();
            valueSet.add(value);
            return (Set) mMap.put(key, valueSet);
        }

        public Set putValues(Object key, Collection values) {
            return (Set) mMap.put(key, new HashSet(values));
        }

        public Set removeKey(Object key) {
            return (Set) mMap.remove(key);
        }

        public Set removeValue(Object value) {
            Set alteredKeys = new HashSet();
            for (Iterator entries = mMap.entrySet().iterator(); entries.hasNext(); ) {
                Map.Entry entry = (Map.Entry) entries.next();
                if (((Collection) entry.getValue()).remove(value))
                    alteredKeys.add(entry.getKey());
            }
            return alteredKeys;
        }

        public Set removeValues(Collection values) {
            Set alteredKeys = new HashSet();
            for (Iterator entries = mMap.entrySet().iterator(); entries.hasNext(); ) {
                Map.Entry entry = (Map.Entry) entries.next();
                if (((Collection) entry.getValue()).removeAll(values))
                    alteredKeys.add(entry.getKey());
            }
            return alteredKeys;
        }

        public void clear() {
            mMap.clear();
        }

        public Set keySet() {
            return mMap.keySet();
        }

        public Set valueSet() {
            Set values = new HashSet();
            for (Iterator valueSets = mMap.values().iterator(); valueSets.hasNext(); ) values.addAll((Collection) valueSets.next());
            return values;
        }

        public Collection valueSets() {
            return mMap.values();
        }

        public Comparator comparator() {
            return TreeMultiMap.this.comparator();
        }

        public SortedMultiMap subMultiMap(Object from, boolean includeFrom, Object to, boolean includeTo) {
            if (mFrom != null && comparator().compare(mFrom, from) > 0)
                throw new IllegalArgumentException(from + " is out of range");
            if (mTo != null && comparator().compare(mTo, to) <= 0)
                throw new IllegalArgumentException(to + " is out of range");
            return TreeMultiMap.this.subMultiMap(from, includeFrom, to, includeTo);
        }

        public SortedMultiMap headMultiMap(Object to, boolean inclusive) {
            if (mFrom != null && comparator().compare(mFrom, to) > 0)
                throw new IllegalArgumentException(to + " is out of range");
            if (mTo != null && comparator().compare(mTo, to) <= 0)
                throw new IllegalArgumentException(to + " is out of range");
            if (mFrom != null)
                return TreeMultiMap.this.subMultiMap(mFrom, true, to, inclusive);
            else
                return TreeMultiMap.this.headMultiMap(to, inclusive);
        }

        public SortedMultiMap tailMultiMap(Object from, boolean inclusive) {
            if (mFrom != null && comparator().compare(mFrom, from) > 0)
                throw new IllegalArgumentException(from + " is out of range");
            if (mTo != null && comparator().compare(mTo, from) <= 0)
                throw new IllegalArgumentException(from + " is out of range");
            if (mTo != null)
                return TreeMultiMap.this.subMultiMap(from, inclusive, mTo, false);
            else
                return TreeMultiMap.this.tailMultiMap(from, inclusive);
        }

        public Object firstKey() {
            return mMap.firstKey();
        }

        public Object lastKey() {
            return mMap.lastKey();
        }
    };
}
