@Override
protected void gotTypeSpec(List<LocatableToken> tokens) {
    lastTypespecToks = tokens;
    super.gotTypeSpec(tokens);
    // Dependency tracking
    JavaEntity tentity = ParseUtils.getTypeEntity(scopeStack.peek(), currentQuerySource(), tokens);
    if (tentity != null && !gotExtends && !gotImplements) {
        typeReferences.add(tentity);
    }
    if (gotExtends && storeCurrentClassInfo) {
        // The list of tokens gives us the name of the class that we extend
        superclassEntity = ParseUtils.getTypeEntity(scopeStack.get(0), null, tokens);
        // this will be corrected when the type is resolved
        info.setSuperclass("");
        Selection superClassSelection = getSelection(tokens);
        info.setSuperReplaceSelection(superClassSelection);
        info.setImplementsInsertSelection(new Selection(superClassSelection.getEndLine(), superClassSelection.getEndColumn()));
        gotExtends = false;
    } else if (gotImplements && storeCurrentClassInfo) {
        Selection interfaceSel = getSelection(tokens);
        if (lastCommaSelection != null) {
            lastCommaSelection.extendEnd(interfaceSel.getLine(), interfaceSel.getColumn());
            interfaceSelections.add(lastCommaSelection);
            lastCommaSelection = null;
        }
        interfaceSelections.add(interfaceSel);
        JavaEntity interfaceEnt = ParseUtils.getTypeEntity(scopeStack.get(0), null, tokens);
        if (interfaceEnt != null) {
            interfaceEntities.add(interfaceEnt);
        }
        // info.addImplements(getClassName(tokens));
        if (tokenStream.LA(1).getType() == JavaTokenTypes.COMMA) {
            lastCommaSelection = getSelection(tokenStream.LA(1));
        } else {
            gotImplements = false;
            info.setInterfaceSelections(interfaceSelections);
            info.setImplementsInsertSelection(new Selection(interfaceSel.getEndLine(), interfaceSel.getEndColumn()));
        }
    }
}
