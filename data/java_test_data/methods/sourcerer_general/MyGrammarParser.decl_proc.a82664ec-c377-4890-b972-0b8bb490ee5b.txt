// $ANTLR start "decl_proc"
public final MyGrammarParser.decl_proc_return decl_proc() throws RecognitionException {
    MyGrammarParser.decl_proc_return retval = new MyGrammarParser.decl_proc_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token PROCEDURE16 = null;
    Token IDENTIFIER17 = null;
    Token EPAR18 = null;
    Token DPAR20 = null;
    MyGrammarParser.param_list_return param_list19 = null;
    MyGrammarParser.type_proc_return type_proc21 = null;
    CommonTree PROCEDURE16_tree = null;
    CommonTree IDENTIFIER17_tree = null;
    CommonTree EPAR18_tree = null;
    CommonTree DPAR20_tree = null;
    RewriteRuleTokenStream stream_EPAR = new RewriteRuleTokenStream(adaptor, "token EPAR");
    RewriteRuleTokenStream stream_DPAR = new RewriteRuleTokenStream(adaptor, "token DPAR");
    RewriteRuleTokenStream stream_PROCEDURE = new RewriteRuleTokenStream(adaptor, "token PROCEDURE");
    RewriteRuleTokenStream stream_IDENTIFIER = new RewriteRuleTokenStream(adaptor, "token IDENTIFIER");
    RewriteRuleSubtreeStream stream_type_proc = new RewriteRuleSubtreeStream(adaptor, "rule type_proc");
    RewriteRuleSubtreeStream stream_param_list = new RewriteRuleSubtreeStream(adaptor, "rule param_list");
    try {
        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:154:10: ( ( PROCEDURE IDENTIFIER EPAR ( param_list )? DPAR ) type_proc -> ^( DECL_PROC IDENTIFIER ( param_list )? type_proc ) )
        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:154:12: ( PROCEDURE IDENTIFIER EPAR ( param_list )? DPAR ) type_proc
        {
            // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:154:12: ( PROCEDURE IDENTIFIER EPAR ( param_list )? DPAR )
            // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:154:13: PROCEDURE IDENTIFIER EPAR ( param_list )? DPAR
            {
                PROCEDURE16 = (Token) match(input, PROCEDURE, FOLLOW_PROCEDURE_in_decl_proc994);
                stream_PROCEDURE.add(PROCEDURE16);
                IDENTIFIER17 = (Token) match(input, IDENTIFIER, FOLLOW_IDENTIFIER_in_decl_proc996);
                stream_IDENTIFIER.add(IDENTIFIER17);
                EPAR18 = (Token) match(input, EPAR, FOLLOW_EPAR_in_decl_proc998);
                stream_EPAR.add(EPAR18);
                // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:154:39: ( param_list )?
                int alt5 = 2;
                int LA5_0 = input.LA(1);
                if ((LA5_0 == IDENTIFIER)) {
                    alt5 = 1;
                }
                switch(alt5) {
                    case 1:
                        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:154:40: param_list
                        {
                            pushFollow(FOLLOW_param_list_in_decl_proc1001);
                            param_list19 = param_list();
                            state._fsp--;
                            stream_param_list.add(param_list19.getTree());
                        }
                        break;
                }
                DPAR20 = (Token) match(input, DPAR, FOLLOW_DPAR_in_decl_proc1005);
                stream_DPAR.add(DPAR20);
            }
            pushFollow(FOLLOW_type_proc_in_decl_proc1008);
            type_proc21 = type_proc();
            state._fsp--;
            stream_type_proc.add(type_proc21.getTree());
            // AST REWRITE
            // elements: param_list, IDENTIFIER, type_proc
            // token labels:
            // rule labels: retval
            // token list labels:
            // rule list labels:
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", retval != null ? retval.tree : null);
            root_0 = (CommonTree) adaptor.nil();
            // 154:69: -> ^( DECL_PROC IDENTIFIER ( param_list )? type_proc )
            {
                // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:154:72: ^( DECL_PROC IDENTIFIER ( param_list )? type_proc )
                {
                    CommonTree root_1 = (CommonTree) adaptor.nil();
                    root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(DECL_PROC, "DECL_PROC"), root_1);
                    adaptor.addChild(root_1, stream_IDENTIFIER.nextNode());
                    // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:154:95: ( param_list )?
                    if (stream_param_list.hasNext()) {
                        adaptor.addChild(root_1, stream_param_list.nextTree());
                    }
                    stream_param_list.reset();
                    adaptor.addChild(root_1, stream_type_proc.nextTree());
                    adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
