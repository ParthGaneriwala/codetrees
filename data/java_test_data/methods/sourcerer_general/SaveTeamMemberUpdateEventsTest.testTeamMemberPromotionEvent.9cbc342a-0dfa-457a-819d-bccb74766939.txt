public void testTeamMemberPromotionEvent() throws Exception {
    // Need a project
    Project project = this.createProject();
    // Need a user
    User memberUser = this.createUser();
    // Add a team member record for the current user
    TeamMember admin = new TeamMember();
    admin.setProjectId(project.getId());
    admin.setUserId(USER_ID);
    admin.setUserLevel(PortalUtils.getUserLevel(TeamMember.MANAGER));
    admin.setEnteredBy(USER_ID);
    admin.setModifiedBy(USER_ID);
    admin.setStatus(TeamMember.STATUS_ADDED);
    admin.setCustomInvitationMessage("");
    admin.insert(db);
    assertTrue("Unable to add a new admin team member", admin.getId() != -1);
    // Need a team member
    TeamMember prevMember = new TeamMember();
    prevMember.setProjectId(project.getId());
    prevMember.setUserId(memberUser.getId());
    prevMember.setUserLevel(PortalUtils.getUserLevel(TeamMember.MEMBER));
    prevMember.setEnteredBy(USER_ID);
    prevMember.setModifiedBy(USER_ID);
    prevMember.setStatus(TeamMember.STATUS_ADDED);
    prevMember.setCustomInvitationMessage("");
    prevMember.insert(db);
    assertTrue("Unable to add a new team member", prevMember.getId() != -1);
    project.getTeam().add(admin);
    project.getTeam().add(prevMember);
    // Update the team member
    TeamMember thisMember = new TeamMember(db, prevMember.getId());
    TeamMember.changeRole(db, project, USER_ID, prevMember.getUserId(), PortalUtils.getUserLevel(TeamMember.VIP));
    thisMember = new TeamMember(db, thisMember.getId());
    Project memberProfile = ProjectUtils.loadProject(memberUser.getProfileProjectId());
    Project userProfile = ProjectUtils.loadProject(workflowUser.getProfileProjectId());
    LookupList roleList = CacheUtils.getLookupList("lookup_project_role");
    BusinessProcess thisProcess = (BusinessProcess) processList.get(PROCESS_NAME);
    assertTrue("Process not found...", thisProcess != null);
    context.setPreviousObject(prevMember);
    context.setThisObject(thisMember);
    context.setProcessName(PROCESS_NAME);
    context.setProcess(thisProcess);
    context.setAttribute("userId", new Integer(USER_ID));
    context.setAttribute("user", WikiLink.generateLink(userProfile));
    context.setAttribute("member", WikiLink.generateLink(memberProfile));
    context.setAttribute("profile", WikiLink.generateLink(project));
    context.setAttribute("role", roleList.getValueFromId(thisMember.getUserLevel()));
    workflowManager.execute(context);
    // Now query the database and test to see if a history item was added for the specified test user Id.
    ProjectHistoryList historyList = new ProjectHistoryList();
    historyList.setProjectId(project.getId());
    historyList.setEnteredBy(USER_ID);
    historyList.setLinkObject(ProjectHistoryList.ROLE_OBJECT);
    historyList.setEventType(ProjectHistoryList.PROMOTE_MEMBER_EVENT);
    historyList.setLinkItemId(thisMember.getId());
    historyList.buildList(db);
    assertTrue("History event (team member was promoted to VIP status) was not recorded!", historyList.size() == 1);
    ProjectHistory history = historyList.get(0);
    assertEquals("Recorded event mismatch", "[[|" + userProfile.getId() + ":profile||" + userProfile.getTitle() + "]] promoted [[|" + memberProfile.getId() + ":profile||Test User Test User]] to [[|" + project.getId() + ":profile||Project SQL Test]] VIP", history.getDescription());
    // Delete the history item because the test is done (and any other needed objects)
    history.delete(db);
    // delete the team member records
    thisMember.delete(db);
    admin.delete(db);
    // delete the user record
    memberUser.getProfileProject().delete(db, null);
    memberUser.delete(db);
    // delete the project
    boolean deleteResult = project.delete(db, (String) null);
    assertTrue("Project wasn't deleted", deleteResult);
    // Try to find the previously deleted project
    ProjectList projectList = new ProjectList();
    projectList.setProjectId(project.getId());
    projectList.buildList(db);
    assertTrue("Project exists when it shouldn't -- id " + project.getId(), projectList.size() == 0);
}
