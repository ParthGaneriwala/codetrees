public static void main(String[] args) {
    String inputFile = args[0];
    String dicFile = args[1];
    String argKey = args[2];
    // String[] topic = "scotty,doctor".split(",");
    // String[] topic = "scotty,rachel,doctor,warren,father,prevot,president,boy,boxell".split(",");
    // String[] topic = "time".split(",");
    // String[] topic = "time,grip,appetite,reason,chance,appearance,remainder,spot,desire,need,ammo,exercise,fact,number,concussion,attitude,moment,glow".split(",");
    // String[] topic = "figure".split(",");
    String[] topic = "parent".split(",");
    SRLReader reader = new SRLReader(inputFile, true);
    SRLProbE prob = new SRLProbE(dicFile, topic);
    DepTree tree;
    // brown
    double topicThreshold = 0.02;
    double clusterThreshold = 0.15;
    // wsj-brown
    // double topicThreshold   = 0.003;
    // double clusterThreshold = 0.28;
    System.out.println(Arrays.toString(topic) + ": " + argKey + "\n");
    System.out.println("== Related verbs ==\n");
    while ((tree = reader.nextTree()) != null) {
        prob.lemmatize(tree);
        prob.retrieveVerbs(tree, argKey);
    }
    prob.printVerbs();
    reader.close();
    System.out.println("== Related topics ==\n");
    reader.open(inputFile);
    while ((tree = reader.nextTree()) != null) {
        prob.lemmatize(tree);
        prob.retrieveTopics(tree, argKey);
    }
    ArrayList<JObjectDoubleTuple<String>> topics = prob.trimTopics(topicThreshold, argKey);
    prob.printTopics(topics);
    reader.close();
    System.out.println("== More related verbs ==\n");
    reader.open(inputFile);
    prob.clearVerbs();
    while ((tree = reader.nextTree()) != null) {
        prob.lemmatize(tree);
        prob.retrieveVerbs(tree, argKey);
    }
    prob.printVerbs();
    reader.close();
    System.out.println("== Verb clusters ==\n");
    reader.open(inputFile);
    while ((tree = reader.nextTree()) != null) {
        prob.lemmatize(tree);
        prob.retrieveArgs(tree);
    }
    System.out.println("Clustering");
    ObjectDoubleOpenHashMap<String> mWeights = prob.getTopicweights(topics, argKey.substring(1));
    prob.retrieveCluster(clusterThreshold, mWeights);
    reader.close();
}
