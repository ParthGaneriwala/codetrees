@SuppressWarnings({ "unchecked", "null" })
public static UseCaseMap loadUseCaseMap(String xmlFile) throws FileNotFoundException, XMLStreamException {
    UseCaseMap map = new UseCaseMap();
    // First create a new XMLInputFactory
    XMLInputFactory inputFactory = XMLInputFactory.newInstance();
    // Setup a new eventReader
    InputStream in = new FileInputStream(xmlFile);
    XMLEventReader eventReader = inputFactory.createXMLEventReader(in);
    // Read the XML document
    while (eventReader.hasNext()) {
        XMLEvent event = eventReader.nextEvent();
        if (event.isStartElement()) {
            StartElement startElement = event.asStartElement();
            // If we have a node element we create a new node
            if (startElement.getName().getLocalPart() == (NODE)) {
                Node node = null;
                // We read the attributes from this tag and add the date attribute to our object
                Iterator<Attribute> attributes = startElement.getAttributes();
                while (attributes.hasNext()) {
                    Attribute attribute = attributes.next();
                    // however, this is dangerous. Maybe there is a better way to do this?
                    if (attribute.getName().toString().equals(ID)) {
                        int nodeId = Integer.parseInt(attribute.getValue());
                        if (map.containsNode(nodeId)) {
                            node = map.getNode(nodeId);
                        } else {
                            node = new Node();
                            node.setId(nodeId);
                        }
                    }
                    if (attribute.getName().toString().equals(X))
                        node.setX(Integer.parseInt(attribute.getValue()));
                    if (attribute.getName().toString().equals(Y))
                        node.setY(Integer.parseInt(attribute.getValue()));
                    if (attribute.getName().toString().equals(LABEL))
                        node.setLabel(attribute.getValue());
                    if (attribute.getName().toString().equals(NODE_TYPE))
                        node.setNodeType(NodeType.valueOf(attribute.getValue()));
                }
                // add the node to the use case map
                map.addNode(node);
            }
            // if the node is a component, we create a new component
            if (startElement.getName().getLocalPart().equals(COMPONENT)) {
                Component component = new Component();
                Iterator<Attribute> attributes = startElement.getAttributes();
                while (attributes.hasNext()) {
                    Attribute attribute = attributes.next();
                    if (attribute.getName().toString().equals(X))
                        component.setX(Integer.parseInt(attribute.getValue()));
                    if (attribute.getName().toString().equals(Y))
                        component.setY(Integer.parseInt(attribute.getValue()));
                    if (attribute.getName().toString().equals(WIDTH))
                        component.setWidth(Integer.parseInt(attribute.getValue()));
                    if (attribute.getName().toString().equals(HEIGHT))
                        component.setHeight(Integer.parseInt(attribute.getValue()));
                }
                // add the component to the use case map
                map.addComponent(component);
            }
            // if the node is a PathSegment, we create a new PathSegment object
            if (startElement.getName().getLocalPart().equals(PATH_SEGMENT)) {
                PathSegment path = new PathSegment();
                Iterator<Attribute> attributes = startElement.getAttributes();
                while (attributes.hasNext()) {
                    Attribute attribute = attributes.next();
                    if (attribute.getName().toString().equals(FROM)) {
                        int nodeId = Integer.parseInt(attribute.getValue());
                        // and we expect to fill the rest of the information later
                        if (!map.containsNode(nodeId)) {
                            Node node = new Node();
                            node.setId(nodeId);
                            map.addNode(node);
                        }
                        path.setFrom(map.getNode(nodeId));
                    }
                    if (attribute.getName().toString().equals(TO)) {
                        int nodeId = Integer.parseInt(attribute.getValue());
                        // and we expect to fill the rest of the information later
                        if (!map.containsNode(nodeId)) {
                            Node node = new Node();
                            node.setId(nodeId);
                            map.addNode(node);
                        }
                        path.setTo(map.getNode(nodeId));
                    }
                    if (attribute.getName().toString().equals(USE_CASE_ATTRIBUTE)) {
                        int useCaseId = Integer.parseInt(attribute.getValue());
                        // and we expect to fill the rest of the information later
                        if (!map.containsUseCase(useCaseId)) {
                            UseCase useCase = new UseCase();
                            useCase.setId(useCaseId);
                            map.addUseCase(useCase);
                        }
                        path.setUseCase(map.getUseCase(useCaseId));
                    }
                }
                // add the path segment to the use case map
                map.addPathSegment(path);
            }
            // if the node is a UseCase, we create a new UseCase object
            if (startElement.getName().getLocalPart().equals(USE_CASE_NODE)) {
                UseCase useCase = null;
                Iterator<Attribute> attributes = startElement.getAttributes();
                while (attributes.hasNext()) {
                    Attribute attribute = attributes.next();
                    // but this assumption could be dangerous. Maybe there is a better way to do this.
                    if (attribute.getName().toString().equals(ID)) {
                        int useCaseId = Integer.parseInt(attribute.getValue());
                        if (map.containsUseCase(useCaseId)) {
                            useCase = map.getUseCase(useCaseId);
                        } else {
                            useCase = new UseCase();
                            useCase.setId(useCaseId);
                        }
                    }
                    if (attribute.getName().toString().equals(LABEL)) {
                        useCase.setLabel(attribute.getValue());
                    }
                }
            }
        }
    }
    return map;
}
