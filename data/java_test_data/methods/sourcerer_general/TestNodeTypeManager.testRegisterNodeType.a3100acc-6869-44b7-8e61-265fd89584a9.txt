@SuppressWarnings("unchecked")
@Test
public void testRegisterNodeType() throws Exception {
    // Create EP Logical Doc Type
    NodeTypeTemplate nodeTypeTemplateLogicalDoc = epNodeTypeManager.createNodeTypeTemplate();
    nodeTypeTemplateLogicalDoc.setName(EP_LOGICAL_DOC_TYPE_NAME);
    nodeTypeTemplateLogicalDoc.setDeclaredSuperTypeNames(new String[] { JCR_BASE_TYPE_NAME, JCR_HIERARCHY_NODE_TYPE_NAME, JCR_FILE_TYPE_NAME, JCR_REFERENCEABLE_MIXIN_TYPE_NAME });
    // TODO: investigate on constraints
    PropertyDefinitionTemplate propertyDefinitionTemplate = epNodeTypeManager.createPropertyDefinitionTemplate();
    propertyDefinitionTemplate.setName(EP_DOC_UID_PROPERTY_NAME);
    propertyDefinitionTemplate.setRequiredType(PropertyType.STRING);
    nodeTypeTemplateLogicalDoc.getPropertyDefinitionTemplates().add(propertyDefinitionTemplate);
    propertyDefinitionTemplate = epNodeTypeManager.createPropertyDefinitionTemplate();
    propertyDefinitionTemplate.setName(EP_DOC_NAME_PROPERTY_NAME);
    propertyDefinitionTemplate.setRequiredType(PropertyType.STRING);
    nodeTypeTemplateLogicalDoc.getPropertyDefinitionTemplates().add(propertyDefinitionTemplate);
    propertyDefinitionTemplate = epNodeTypeManager.createPropertyDefinitionTemplate();
    propertyDefinitionTemplate.setName(EP_DOC_CLASSIF_PROPERTY_NAME);
    propertyDefinitionTemplate.setRequiredType(PropertyType.STRING);
    nodeTypeTemplateLogicalDoc.getPropertyDefinitionTemplates().add(propertyDefinitionTemplate);
    propertyDefinitionTemplate = epNodeTypeManager.createPropertyDefinitionTemplate();
    propertyDefinitionTemplate.setName(EP_DOC_LEGIS_PROPERTY_NAME);
    propertyDefinitionTemplate.setRequiredType(PropertyType.LONG);
    nodeTypeTemplateLogicalDoc.getPropertyDefinitionTemplates().add(propertyDefinitionTemplate);
    propertyDefinitionTemplate = epNodeTypeManager.createPropertyDefinitionTemplate();
    propertyDefinitionTemplate.setName(EP_DOC_INTERNAL_THEME_PROPERTY_NAME);
    propertyDefinitionTemplate.setRequiredType(PropertyType.STRING);
    nodeTypeTemplateLogicalDoc.getPropertyDefinitionTemplates().add(propertyDefinitionTemplate);
    propertyDefinitionTemplate = epNodeTypeManager.createPropertyDefinitionTemplate();
    propertyDefinitionTemplate.setName(EP_DOC_EU_THEME_PROPERTY_NAME);
    propertyDefinitionTemplate.setRequiredType(PropertyType.STRING);
    nodeTypeTemplateLogicalDoc.getPropertyDefinitionTemplates().add(propertyDefinitionTemplate);
    propertyDefinitionTemplate = epNodeTypeManager.createPropertyDefinitionTemplate();
    propertyDefinitionTemplate.setName(EP_DOC_SECURITY_CLASSIFICATION_PROPERTY_NAME);
    propertyDefinitionTemplate.setRequiredType(PropertyType.STRING);
    nodeTypeTemplateLogicalDoc.getPropertyDefinitionTemplates().add(propertyDefinitionTemplate);
    propertyDefinitionTemplate = epNodeTypeManager.createPropertyDefinitionTemplate();
    propertyDefinitionTemplate.setName(EP_DOC_ORIGIN_ORGANISATION_PROPERTY_NAME);
    propertyDefinitionTemplate.setRequiredType(PropertyType.STRING);
    nodeTypeTemplateLogicalDoc.getPropertyDefinitionTemplates().add(propertyDefinitionTemplate);
    propertyDefinitionTemplate = epNodeTypeManager.createPropertyDefinitionTemplate();
    propertyDefinitionTemplate.setName(EP_DOC_AUTHORITY_PROPERTY_NAME);
    propertyDefinitionTemplate.setRequiredType(PropertyType.STRING);
    nodeTypeTemplateLogicalDoc.getPropertyDefinitionTemplates().add(propertyDefinitionTemplate);
    propertyDefinitionTemplate = epNodeTypeManager.createPropertyDefinitionTemplate();
    propertyDefinitionTemplate.setName(EP_DOC_CATEGORY_PROPERTY_NAME);
    propertyDefinitionTemplate.setRequiredType(PropertyType.STRING);
    nodeTypeTemplateLogicalDoc.getPropertyDefinitionTemplates().add(propertyDefinitionTemplate);
    propertyDefinitionTemplate = epNodeTypeManager.createPropertyDefinitionTemplate();
    propertyDefinitionTemplate.setName(EP_DOC_TITLE_CLASSIFICATION_PROPERTY_NAME);
    propertyDefinitionTemplate.setRequiredType(PropertyType.STRING);
    nodeTypeTemplateLogicalDoc.getPropertyDefinitionTemplates().add(propertyDefinitionTemplate);
    propertyDefinitionTemplate = epNodeTypeManager.createPropertyDefinitionTemplate();
    propertyDefinitionTemplate.setName(EP_DOC_NEEDED_TRANSLATIONS_PROPERTY_NAME);
    propertyDefinitionTemplate.setRequiredType(PropertyType.STRING);
    propertyDefinitionTemplate.setMultiple(true);
    nodeTypeTemplateLogicalDoc.getPropertyDefinitionTemplates().add(propertyDefinitionTemplate);
    propertyDefinitionTemplate = epNodeTypeManager.createPropertyDefinitionTemplate();
    propertyDefinitionTemplate.setName(EP_DOC_OFFICIAL_SIGNEES_PROPERTY_NAME);
    propertyDefinitionTemplate.setRequiredType(PropertyType.STRING);
    nodeTypeTemplateLogicalDoc.getPropertyDefinitionTemplates().add(propertyDefinitionTemplate);
    propertyDefinitionTemplate = epNodeTypeManager.createPropertyDefinitionTemplate();
    propertyDefinitionTemplate.setName(EP_DOC_TRANSLATED_PROPERTY_NAME);
    propertyDefinitionTemplate.setRequiredType(PropertyType.BOOLEAN);
    nodeTypeTemplateLogicalDoc.getPropertyDefinitionTemplates().add(propertyDefinitionTemplate);
    propertyDefinitionTemplate = epNodeTypeManager.createPropertyDefinitionTemplate();
    propertyDefinitionTemplate.setName(EP_DOC_OFFICIAL_DATE_PROPERTY_NAME);
    propertyDefinitionTemplate.setRequiredType(PropertyType.DATE);
    nodeTypeTemplateLogicalDoc.getPropertyDefinitionTemplates().add(propertyDefinitionTemplate);
    propertyDefinitionTemplate = epNodeTypeManager.createPropertyDefinitionTemplate();
    propertyDefinitionTemplate.setName(EP_DOC_EFFECTIVE_PROPERTY_NAME);
    propertyDefinitionTemplate.setRequiredType(PropertyType.BOOLEAN);
    nodeTypeTemplateLogicalDoc.getPropertyDefinitionTemplates().add(propertyDefinitionTemplate);
    // TODO: Maybe the namespace registration should not be included here (should be OK actually).
    NamespaceUtil.registerEpCMNamespace(session);
    epNodeTypeManager.registerNodeType(nodeTypeTemplateLogicalDoc, true);
    logger.info("");
    logger.info("NODE TYPE REGISTERED");
    logger.info("");
    this.printNodeTypeProperties();
}
