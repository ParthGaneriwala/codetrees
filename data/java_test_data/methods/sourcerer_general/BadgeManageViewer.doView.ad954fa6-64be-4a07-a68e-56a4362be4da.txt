public String doView(RenderRequest request, RenderResponse response) throws Exception {
    // The JSP to show upon success
    String defaultView = VIEW_PAGE;
    // Determine the project container to use
    Project project = findProject(request);
    // Check the user's permissions
    User user = getUser(request);
    if (!ProjectUtils.hasAccess(project.getId(), user, "project-badges-admin")) {
        throw new PortletException("Unauthorized to manage in this project");
    }
    // Determine the database connection
    Connection db = useConnection(request);
    // Load this project's badges
    ProjectBadgeList projectBadgeList = new ProjectBadgeList();
    projectBadgeList.setProjectId(project.getId());
    projectBadgeList.buildList(db);
    // Determine which badges this project already has for related info
    Map<Integer, ProjectBadge> projectBadgeMap = BadgeUtils.createBadgeIdToProjectBadgeMap(projectBadgeList);
    request.setAttribute(PROJECT_BADGE_MAP, projectBadgeMap);
    // Load the complete list of badges for this project category
    BadgeList badgeList = new BadgeList();
    badgeList.setEnabled(Constants.TRUE);
    badgeList.setBuildLogos(true);
    badgeList.buildList(db);
    // Group the badges into categories
    BadgeCategoryList badgeCategoryList = new BadgeCategoryList();
    badgeCategoryList.setProjectCategoryId(project.getCategoryId());
    badgeCategoryList.setEnabled(Constants.TRUE);
    badgeCategoryList.buildList(db);
    Map<BadgeCategory, BadgeList> badgeByCategoryMap = BadgeUtils.createBadgeByCategoryMap(badgeList, badgeCategoryList);
    request.setAttribute(BADGE_CATEGORY_MAP, badgeByCategoryMap);
    // Count the number of members for each badge
    Map<Integer, Integer> memberCountMap = badgeList.findBadgeMemberCount(db);
    request.setAttribute(BADGE_MEMBER_COUNT_MAP, memberCountMap);
    // JSP view
    return defaultView;
}
