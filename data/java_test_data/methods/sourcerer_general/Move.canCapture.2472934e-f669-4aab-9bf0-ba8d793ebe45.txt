// examines a board position to see if the piece indicated at (x,y)
// can make a(nother) capture
static boolean canCapture(int[][] position, int i, int j) {
    int x, y;
    // by Aguena
    int aux_x, aux_y;
    boolean result = false;
    // By Aguena
    aux_x = i;
    // By Aguena
    aux_y = j;
    switch(position[i][j]) {
        case Checkers.WHITE:
            if (i + 2 < 8 && j + 2 < 8)
                if ((position[i + 1][j + 1] == Checkers.BLACK || position[i + 1][j + 1] == Checkers.BKING) && (position[i + 2][j + 2] == Checkers.EMPTY))
                    return true;
            if (i - 2 > -1 && j + 2 < 8)
                if ((position[i - 1][j + 1] == Checkers.BLACK || position[i - 1][j + 1] == Checkers.BKING) && position[i - 2][j + 2] == Checkers.EMPTY)
                    return true;
            if (i + 2 < 8 && j - 2 > -1)
                if ((position[i + 1][j - 1] == Checkers.BLACK || position[i + 1][j - 1] == Checkers.BKING) && position[i + 2][j - 2] == Checkers.EMPTY)
                    return true;
            if (i - 2 > -1 && j - 2 > -1)
                if ((position[i - 1][j - 1] == Checkers.BLACK || position[i - 1][j - 1] == Checkers.BKING) && position[i - 2][j - 2] == Checkers.EMPTY)
                    return true;
            break;
        case Checkers.BLACK:
            if (i + 2 < 8 && j - 2 > -1)
                if ((position[i + 1][j - 1] == Checkers.WHITE || position[i + 1][j - 1] == Checkers.WKING) && position[i + 2][j - 2] == Checkers.EMPTY)
                    return true;
            if (i - 2 > -1 && j - 2 > -1)
                if ((position[i - 1][j - 1] == Checkers.WHITE || position[i - 1][j - 1] == Checkers.WKING) && position[i - 2][j - 2] == Checkers.EMPTY)
                    return true;
            if (i + 2 < 8 && j + 2 < 8)
                if ((position[i + 1][j + 1] == Checkers.WHITE || position[i + 1][j + 1] == Checkers.WKING) && (position[i + 2][j + 2] == Checkers.EMPTY))
                    return true;
            if (i - 2 > -1 && j + 2 < 8)
                if ((position[i - 1][j + 1] == Checkers.WHITE || position[i - 1][j + 1] == Checkers.WKING) && position[i - 2][j + 2] == Checkers.EMPTY)
                    return true;
            break;
        // =====================================================================================
        case Checkers.WKING:
            i = aux_x;
            j = aux_y;
            if (i + 2 < 8 && j + 2 < 8) {
                while (i + 2 < 8 && j + 2 < 8) {
                    // System.out.print("(branca" + i + "e" + j + " loop 1 ++)");
                    if ((position[i + 1][j + 1] == Checkers.BLACK || position[i + 1][j + 1] == Checkers.BKING) && position[i + 2][j + 2] == Checkers.EMPTY)
                        return true;
                    else if (position[i + 1][j + 1] == Checkers.EMPTY) {
                        i++;
                        j++;
                    } else {
                        i = 8;
                        j = 8;
                    }
                }
            }
            i = aux_x;
            j = aux_y;
            if (i + 2 < 8 && j - 2 > -1) {
                while (i + 2 < 8 && j - 2 > -1) {
                    // System.out.print("(branca" + i + "e" + j + " loop 2 +-)");
                    if ((position[i + 1][j - 1] == Checkers.BLACK || position[i + 1][j - 1] == Checkers.BKING) && position[i + 2][j - 2] == Checkers.EMPTY)
                        return true;
                    else if (position[i + 1][j - 1] == Checkers.EMPTY) {
                        i++;
                        j--;
                    } else {
                        i = 8;
                        j = -1;
                    }
                }
            }
            i = aux_x;
            j = aux_y;
            if (i - 2 > -1 && j + 2 < 8) {
                while (i - 2 > -1 && j + 2 < 8) {
                    // System.out.print("(branca" + i + "e" + j + " loop 3 -+)");
                    if ((position[i - 1][j + 1] == Checkers.BLACK || position[i - 1][j + 1] == Checkers.BKING) && position[i - 2][j + 2] == Checkers.EMPTY)
                        return true;
                    else if (position[i - 1][j + 1] == Checkers.EMPTY) {
                        i--;
                        j++;
                    } else {
                        i = -1;
                        j = 8;
                    }
                }
            }
            i = aux_x;
            j = aux_y;
            if (i - 2 > -1 && j - 2 > -1) {
                while (i - 2 > -1 && j - 2 > -1) {
                    // System.out.print("(branca" + i + "e" + j + " loop 4 --)");
                    if ((position[i - 1][j - 1] == Checkers.BLACK || position[i - 1][j - 1] == Checkers.BKING) && position[i - 2][j - 2] == Checkers.EMPTY)
                        return true;
                    else if (position[i - 1][j - 1] == Checkers.EMPTY) {
                        i--;
                        j--;
                    } else {
                        i = -1;
                        j = -1;
                    }
                }
            }
            // break; //troquei para return false - by Arita
            return false;
        case // by Arita, modifiquei toda a fun��o - 19/11/02 - 1:21AM
        Checkers.BKING:
            i = aux_x;
            j = aux_y;
            if (i + 2 < 8 && j + 2 < 8) {
                while (i + 2 < 8 && j + 2 < 8) {
                    // System.out.print("(preta" + i + "e" + j + " loop 1 ++)");
                    if ((position[i + 1][j + 1] == Checkers.WHITE || position[i + 1][j + 1] == Checkers.WKING) && position[i + 2][j + 2] == Checkers.EMPTY)
                        return true;
                    else if (position[i + 1][j + 1] == Checkers.EMPTY) {
                        i++;
                        j++;
                    } else // else if ( (position[i+1][j+1] == Checkers.WHITE ||
                    // position[i+1][j+1] == Checkers.WKING ) &&
                    // (position[i+2][j+2] == Checkers.WHITE ||
                    // position[i+2][j+2] == Checkers.WKING ))
                    {
                        i = 8;
                        j = 8;
                    // System.out.print("(Entrou no ELSEIF 2 PE�AS" + i + "e" + j + " loop 1 ++)");
                    }
                }
            }
            i = aux_x;
            j = aux_y;
            if (i + 2 < 8 && j - 2 > -1) {
                while (i + 2 < 8 && j - 2 > -1) {
                    // System.out.print("(preta" + i + "e" + j + " loop 2 +-)");
                    if ((position[i + 1][j - 1] == Checkers.WHITE || position[i + 1][j - 1] == Checkers.WKING) && position[i + 2][j - 2] == Checkers.EMPTY)
                        return true;
                    else if (position[i + 1][j - 1] == Checkers.EMPTY) {
                        i++;
                        j--;
                    } else // if ( (position[i+1][j-1] == Checkers.WHITE ||
                    // position[i+1][j-1] == Checkers.WKING ) &&
                    // (position[i+2][j-2] == Checkers.WHITE ||
                    // position[i+2][j-2] == Checkers.WKING ))
                    {
                        i = 8;
                        j = -1;
                    // System.out.print("(Entrou no ELSEIF 2 PE�AS" + i + "e" + j + " loop 2 +-)");
                    }
                }
            }
            i = aux_x;
            j = aux_y;
            if (i - 2 > -1 && j + 2 < 8) {
                while (i - 2 > -1 && j + 2 < 8) {
                    // System.out.print("(preta" + i + "e" + j + " loop 3 -+)");
                    if ((position[i - 1][j + 1] == Checkers.WHITE || position[i - 1][j + 1] == Checkers.WKING) && position[i - 2][j + 2] == Checkers.EMPTY) {
                        // System.out.print("(Entrou no IF do Loop3)");
                        return true;
                    } else if (position[i - 1][j + 1] == Checkers.EMPTY) {
                        i--;
                        j++;
                    // System.out.print("(Entrou no ELSEIF EMPTY" + i + "e" + j + " loop 3 -+)");
                    } else // if ( (position[i-1][j+1] == Checkers.WHITE ||
                    // position[i-1][j+1] == Checkers.WKING ) &&
                    // (position[i-2][j+2] == Checkers.WHITE ||
                    // position[i-2][j+2] == Checkers.WKING ))
                    {
                        i = -1;
                        j = 8;
                    // System.out.print("(Entrou no ELSEIF 2 PE�AS" + i + "e" + j + " loop 3 -+)");
                    }
                }
            }
            i = aux_x;
            j = aux_y;
            if (i - 2 > -1 && j - 2 > -1) {
                while (i - 2 > -1 && j - 2 > -1) {
                    // System.out.print("(preta" + i + "e" + j + " loop 4 --)");
                    if ((position[i - 1][j - 1] == Checkers.WHITE || position[i - 1][j - 1] == Checkers.WKING) && position[i - 2][j - 2] == Checkers.EMPTY)
                        return true;
                    else if (position[i - 1][j - 1] == Checkers.EMPTY) {
                        i--;
                        j--;
                    } else // if ( (position[i-1][j-1] == Checkers.WHITE ||
                    // position[i-1][j-1] == Checkers.WKING ) &&
                    // (position[i-2][j-2] == Checkers.WHITE ||
                    // position[i-2][j-2] == Checkers.WKING ))
                    {
                        i = -1;
                        j = -1;
                    // System.out.print("(Entrou no ELSEIF 2 PE�AS" + i + "e" + j + " loop 4 --)");
                    }
                }
            }
            // break; //troquei para return false - by Arita
            return false;
    }
    // =====================================================================================
    return false;
}
