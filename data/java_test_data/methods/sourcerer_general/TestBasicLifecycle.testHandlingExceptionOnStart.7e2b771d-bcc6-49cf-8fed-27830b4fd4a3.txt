private void testHandlingExceptionOnStart(final Throwable onStart, final Throwable onStop, final Throwable expected) {
    final Lifecycle mock = EasyMock.createStrictMock(Lifecycle.class);
    final AtomicReference<Throwable> trapActual = new AtomicReference<Throwable>();
    Lifecycle stub = new TestLifecycle(mock) {

        @Override
        protected void safeStart() throws Exception {
            super.safeStart();
            throwException(onStart);
        }

        @Override
        protected void safeStop() throws Exception {
            super.safeStop();
            throwException(onStop);
        }

        @Override
        protected void logErrorOnStop(Throwable e) {
            assertSame(onStop, e);
            Throwable old = trapActual.getAndSet(e);
            assertNull(old);
        }

        @Override
        protected Logger getLogger() {
            // Avoid spamming stderr with log messages during this part of the unit test.
            return NULL_LOGGER;
        }
    };
    mock.start();
    mock.stop();
    EasyMock.replay(mock);
    boolean successfulStart = false;
    try {
        stub.start();
        successfulStart = true;
        assertNull(onStart);
        assertTrue(stub.isRunning());
        stub.stop();
        assertNull(expected);
    } catch (AssertionFailedError actual) {
        // Don't interfere with JUnit.
        throw actual;
    } catch (AssertionError actual) {
        // Don't interfere with Java assertions.
        throw actual;
    } catch (UnavailableException actual) {
        assertSame(UnavailableException.class, actual.getClass());
        assertSame(UnavailableException.class, expected.getClass());
        assertSame(expected.getCause(), actual.getCause());
    } catch (Error actual) {
        assertTrue(onStart instanceof Error || onStop instanceof Error);
        assertSame(expected, actual);
        assertSame(expected.getCause(), actual.getCause());
    }
    if (successfulStart == false) {
        assertNotNull(onStart);
    }
    if (null == trapActual.get()) {
        assertNull(onStop);
    }
    assertFalse(stub.isRunning());
    EasyMock.verify(mock);
}
