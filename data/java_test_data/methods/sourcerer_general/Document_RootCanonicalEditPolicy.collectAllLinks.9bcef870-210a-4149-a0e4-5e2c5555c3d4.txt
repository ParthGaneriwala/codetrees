private Collection collectAllLinks(View view, Map domain2NotationMap) {
    if (!Document_RootEditPart.MODEL_ID.equals(GclacsVisualIDRegistry.getModelID(view))) {
        return Collections.EMPTY_LIST;
    }
    Collection result = new LinkedList();
    switch(GclacsVisualIDRegistry.getVisualID(view)) {
        case Document_RootEditPart.VISUAL_ID:
            {
                if (!domain2NotationMap.containsKey(view.getElement())) {
                    result.addAll(GclacsDiagramUpdater.getDocument_Root_79ContainedLinks(view));
                }
                if (!domain2NotationMap.containsKey(view.getElement()) || view.getEAnnotation("Shortcut") == null) {
                    // $NON-NLS-1$
                    domain2NotationMap.put(view.getElement(), view);
                }
                break;
            }
        case ComponentInstanceEditPart.VISUAL_ID:
            {
                if (!domain2NotationMap.containsKey(view.getElement())) {
                    result.addAll(GclacsDiagramUpdater.getComponentInstance_1001ContainedLinks(view));
                }
                if (!domain2NotationMap.containsKey(view.getElement()) || view.getEAnnotation("Shortcut") == null) {
                    // $NON-NLS-1$
                    domain2NotationMap.put(view.getElement(), view);
                }
                break;
            }
        case RequiredPortEditPart.VISUAL_ID:
            {
                if (!domain2NotationMap.containsKey(view.getElement())) {
                    result.addAll(GclacsDiagramUpdater.getInterface_2001ContainedLinks(view));
                }
                if (!domain2NotationMap.containsKey(view.getElement()) || view.getEAnnotation("Shortcut") == null) {
                    // $NON-NLS-1$
                    domain2NotationMap.put(view.getElement(), view);
                }
                break;
            }
        case RequiredPort2EditPart.VISUAL_ID:
            {
                if (!domain2NotationMap.containsKey(view.getElement())) {
                    result.addAll(GclacsDiagramUpdater.getServices_2002ContainedLinks(view));
                }
                if (!domain2NotationMap.containsKey(view.getElement()) || view.getEAnnotation("Shortcut") == null) {
                    // $NON-NLS-1$
                    domain2NotationMap.put(view.getElement(), view);
                }
                break;
            }
        case ProvidedPortEditPart.VISUAL_ID:
            {
                if (!domain2NotationMap.containsKey(view.getElement())) {
                    result.addAll(GclacsDiagramUpdater.getBodyType_2003ContainedLinks(view));
                }
                if (!domain2NotationMap.containsKey(view.getElement()) || view.getEAnnotation("Shortcut") == null) {
                    // $NON-NLS-1$
                    domain2NotationMap.put(view.getElement(), view);
                }
                break;
            }
        case InterfaceEditPart.VISUAL_ID:
            {
                if (!domain2NotationMap.containsKey(view.getElement())) {
                    result.addAll(GclacsDiagramUpdater.getArg_2004ContainedLinks(view));
                }
                if (!domain2NotationMap.containsKey(view.getElement()) || view.getEAnnotation("Shortcut") == null) {
                    // $NON-NLS-1$
                    domain2NotationMap.put(view.getElement(), view);
                }
                break;
            }
        case ServicesEditPart.VISUAL_ID:
            {
                if (!domain2NotationMap.containsKey(view.getElement())) {
                    result.addAll(GclacsDiagramUpdater.getComponentInstance_2005ContainedLinks(view));
                }
                if (!domain2NotationMap.containsKey(view.getElement()) || view.getEAnnotation("Shortcut") == null) {
                    // $NON-NLS-1$
                    domain2NotationMap.put(view.getElement(), view);
                }
                break;
            }
        case BodyTypeEditPart.VISUAL_ID:
            {
                if (!domain2NotationMap.containsKey(view.getElement())) {
                    result.addAll(GclacsDiagramUpdater.getRequiredPort_2006ContainedLinks(view));
                }
                if (!domain2NotationMap.containsKey(view.getElement()) || view.getEAnnotation("Shortcut") == null) {
                    // $NON-NLS-1$
                    domain2NotationMap.put(view.getElement(), view);
                }
                break;
            }
        case ComponentInstance2EditPart.VISUAL_ID:
            {
                if (!domain2NotationMap.containsKey(view.getElement())) {
                    result.addAll(GclacsDiagramUpdater.getProvidedPort_2007ContainedLinks(view));
                }
                if (!domain2NotationMap.containsKey(view.getElement()) || view.getEAnnotation("Shortcut") == null) {
                    // $NON-NLS-1$
                    domain2NotationMap.put(view.getElement(), view);
                }
                break;
            }
        case DefineByInterfaceEditPart.VISUAL_ID:
            {
                if (!domain2NotationMap.containsKey(view.getElement())) {
                    result.addAll(GclacsDiagramUpdater.getDefineByInterface_3001ContainedLinks(view));
                }
                if (!domain2NotationMap.containsKey(view.getElement()) || view.getEAnnotation("Shortcut") == null) {
                    // $NON-NLS-1$
                    domain2NotationMap.put(view.getElement(), view);
                }
                break;
            }
        case BindingEditPart.VISUAL_ID:
            {
                if (!domain2NotationMap.containsKey(view.getElement())) {
                    result.addAll(GclacsDiagramUpdater.getBinding_3002ContainedLinks(view));
                }
                if (!domain2NotationMap.containsKey(view.getElement()) || view.getEAnnotation("Shortcut") == null) {
                    // $NON-NLS-1$
                    domain2NotationMap.put(view.getElement(), view);
                }
                break;
            }
    }
    for (Iterator children = view.getChildren().iterator(); children.hasNext(); ) {
        result.addAll(collectAllLinks((View) children.next(), domain2NotationMap));
    }
    for (Iterator edges = view.getSourceEdges().iterator(); edges.hasNext(); ) {
        result.addAll(collectAllLinks((View) edges.next(), domain2NotationMap));
    }
    return result;
}
