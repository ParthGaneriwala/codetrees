@Override
public Board findMove(Board board, ArrayList<Board> moves, int depth) {
    // REFLECT THE OPPONENTS BEST POSSIBLE SCORE
    assert board.blackToMove == isBlack;
    int bestValue = MIN;
    if (isBlack) {
        bestValue = MAX;
    }
    int alpha = MIN;
    int beta = MAX;
    // If no moves found, return null as error flag
    if (moves.isEmpty()) {
        return null;
    }
    // If only one possible move found - just return that.
    if (moves.size() == 1) {
        return moves.get(0);
    }
    // Sort the move-list acc. to HH, unless this is the first run
    if (!firstRun) {
        Board thisMove = null;
        for (int i = 1; i < moves.size(); i++) {
            thisMove = moves.get(i);
            fromTo(board, thisMove, fromTo);
            int HHval1 = HH[fromTo[0]][fromTo[1]];
            fromTo(board, moves.get(i - 1), fromTo);
            int HHval2 = HH[fromTo[0]][fromTo[1]];
            for (; i > 0 && HHval2 < HHval1; i--) {
                moves.set(i, moves.get(i - 1));
                fromTo(board, moves.get(i - 1), fromTo);
                HHval2 = HH[fromTo[0]][fromTo[1]];
            }
            moves.set(i, thisMove);
        }
    } else {
        firstRun = false;
    }
    // Search through move-list for the best move
    Board bestMove = moves.get(0);
    for (Board move : moves) {
        int value = search(move, 0, depth, alpha, beta);
        if (isBlack) {
            if (value < bestValue) {
                if (value < beta) {
                    beta = value;
                }
                bestValue = value;
                bestMove = move;
            }
        } else {
            if (value > bestValue) {
                if (value > alpha) {
                    alpha = value;
                }
                bestValue = value;
                bestMove = move;
            }
        }
    }
    if (printBestMoveValue) {
        out.println("The best move has value " + bestValue);
    }
    return bestMove;
}
