@Override
public ActionForward insere(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
    ActionMessages mens = new ActionMessages();
    List<String> parametersMessage = new ArrayList<String>();
    String orderBy = getOrderBy(form);
    ItemMenu itemMenu = new ItemMenu();
    try {
        if (validaCampos(mapping, form, request)) {
            itemMenu = (ItemMenu) ((LazyValidatorForm) form).get(Constantes.PROPRIEDADE_ENTITY);
            itemMenu.setId(null);
            Long idItemMenuPai = !GenericValidator.isBlankOrNull((String) ((LazyValidatorForm) form).get(PROPRIEDADE_ID_ITEM_MENU_PAI)) ? Long.parseLong((String) ((LazyValidatorForm) form).get(PROPRIEDADE_ID_ITEM_MENU_PAI)) : null;
            ItemMenu itemMenuPai = null;
            if (idItemMenuPai != null) {
                ItemMenu itemMenuTemp = new ItemMenu();
                itemMenuTemp.setId(idItemMenuPai);
                itemMenuPai = (ItemMenu) this.getCrudService().pesquisa(itemMenuTemp);
            }
            itemMenu.setItemMenuPai(itemMenuPai);
            this.getCrudService().insere(itemMenu);
            parametersMessage.clear();
            parametersMessage.add("gravado");
            mens.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("mensagem.crud.sucesso", parametersMessage.toArray()));
            request.setAttribute(Constantes.MENSAGEM_SUCESSO, mens);
        }
        limparPropriedadesForm((LazyValidatorForm) form);
        ((LazyValidatorForm) form).set(Constantes.PROPRIEDADE_ENTITY, itemMenu);
        ((LazyValidatorForm) form).set(Constantes.PROPRIEDADE_ID, itemMenu.getId());
        List<ItemMenu> lista = this.getCrudService().pesquisa(classeEntity(form), orderBy);
        this.atualizaListaAplicacao(request, form, lista);
        ((LazyValidatorForm) form).set(Constantes.PROPRIEDADE_LISTA_ENTITY, lista);
    } catch (EntityExistsServiceException ex) {
        mens.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("erro.EntityExistsServiceException.InsertOrUpdate"));
        request.setAttribute(Constantes.MENSAGEM_ERRO, mens);
    } catch (ServiceException ex) {
        Logger.getLogger(ItemMenuAction.class.getName()).log(Level.SEVERE, null, ex);
        parametersMessage.clear();
        parametersMessage.add(ex.getMessage());
        mens.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("erro.fatal", parametersMessage.toArray()));
        request.setAttribute(Constantes.MENSAGEM_ERRO, mens);
    }
    return mapping.findForward(Constantes.FORWARD_SUCESSO);
}
