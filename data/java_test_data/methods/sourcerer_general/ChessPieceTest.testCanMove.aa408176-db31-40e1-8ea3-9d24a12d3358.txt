@Test
public final void testCanMove() {
    // first, on-board checks (using queen for flexibility):
    Object[][] offboard = { { "moving diagonally off", new Point(0, 0), new Point(-1, -1) }, { "moving down off", new Point(0, 0), new Point(-0, -1) }, { "moving over off", new Point(0, 0), new Point(-1, 0) }, { "moving over off", new Point(7, 7), new Point(8, 7) }, { "moving over off", new Point(7, 7), new Point(8, 8) }, { "moving over off, down on", new Point(0, 0), new Point(-1, 1) }, { "moving over on, down off", new Point(0, 0), new Point(1, -1) }, { "moving up off", new Point(7, 7), new Point(7, 8) }, { "off-board nowhere", new Point(8, 8), new Point(8, 8) }, { "negative off nowhere", new Point(-1, -1), new Point(-1, -1) }, { "knights-move offboard", new Point(0, 0), new Point(2, -1) }, { "knights-move mid-left off", new Point(0, 4), new Point(-1, 2) }, { "knights-move mid-top off", new Point(4, 7), new Point(2, 8) }, { "huge diagonal", new Point(0, 0), new Point(8, 8) }, { "double illegal", new Point(-1, 4), new Point(8, 4) }, { "double illegal diag", new Point(-1, 0), new Point(7, 8) }, { "midlength diag off tr", new Point(4, 4), new Point(8, 8) }, { "midlength diag off bl", new Point(4, 4), new Point(-1, -1) }, { "midlength diag off tl", new Point(3, 3), new Point(-1, 7) }, { "midlength diag off l", new Point(0, 4), new Point(-3, 7) } };
    Object[][] nonmoves = { { "moving nowhere", new Point(0, 0), new Point(0, 0) }, { "moving nowhere", new Point(7, 7), new Point(7, 7) }, { "moving nowhere", new Point(7, 0), new Point(7, 0) }, { "moving nowhere", new Point(5, 5), new Point(5, 5) } };
    // TODO: moves to middle of one side (each of next three)
    Object[][] onesquare_rookstyle = { { "moving down on", new Point(7, 7), new Point(7, 6) }, { "moving over on", new Point(7, 7), new Point(6, 7) }, { "moving over", new Point(0, 0), new Point(1, 0) }, { "moving up", new Point(0, 0), new Point(0, 1) }, { "moving over midboard", new Point(3, 3), new Point(4, 3) }, { "moving up midboard", new Point(4, 4), new Point(4, 5) } };
    Object[][] multisquare_rookstyle = { { "moving down right", new Point(7, 7), new Point(7, 0) }, { "moving over top", new Point(7, 7), new Point(0, 7) }, { "moving over bottom", new Point(0, 0), new Point(7, 0) }, { "moving up left", new Point(0, 0), new Point(0, 7) }, { "moving over midboard", new Point(2, 3), new Point(6, 3) }, { "moving up midboard", new Point(4, 5), new Point(4, 7) } };
    Object[][] onesquare_bishopstyle = { { "moving diagonally, tr", new Point(7, 7), new Point(6, 6) }, { "moving diagonally, bl", new Point(0, 0), new Point(1, 1) }, { "moving diagonally, center", new Point(5, 5), new Point(4, 4) }, { "moving diagonally, center", new Point(5, 5), new Point(6, 4) }, { "moving diagonally, center", new Point(5, 5), new Point(4, 6) }, { "moving diagonally, center", new Point(5, 5), new Point(6, 6) } };
    Object[][] multisquare_bishopstyle = { { "moving diagonally, tr-bl", new Point(7, 7), new Point(0, 0) }, { "moving diagonally, tl-br", new Point(7, 0), new Point(0, 7) }, { "moving diagonally, bl", new Point(0, 0), new Point(4, 4) }, { "moving diagonally, center", new Point(5, 5), new Point(2, 2) }, { "moving diagonally, center", new Point(5, 5), new Point(7, 3) }, { "moving diagonally, center", new Point(5, 5), new Point(3, 7) }, { "moving diagonally, center", new Point(4, 4), new Point(6, 6) }, { "moving diagonally, center", new Point(4, 0), new Point(0, 4) } };
    Object[][] knightmoves = { { "over and up", new Point(4, 4), new Point(6, 5) }, { "over and down", new Point(4, 4), new Point(6, 3) }, { "up and over", new Point(4, 4), new Point(5, 6) }, { "up and back", new Point(4, 4), new Point(3, 6) }, { "down and over", new Point(4, 4), new Point(5, 2) }, { "down and back", new Point(4, 4), new Point(3, 2) }, { "back and up", new Point(4, 4), new Point(2, 5) }, { "back and down", new Point(4, 4), new Point(2, 3) }, { "bottom-left up", new Point(0, 0), new Point(1, 2) }, { "bottom-left over", new Point(0, 0), new Point(2, 1) }, { "to upper corner", new Point(5, 6), new Point(7, 7) }, { "to upper corner alt", new Point(6, 5), new Point(7, 7) } };
    Object[][] castling = { { "kingside castle", new Point(4, 0), new Point(6, 0) }, { "queenside castle", new Point(4, 0), new Point(2, 0) } };
    Object[][] blackpawn = { { "black standard move", new Point(6, 6), new Point(6, 5) }, { "black capture right", new Point(4, 4), new Point(5, 3) }, { "black capture left", new Point(4, 4), new Point(3, 3) } };
    Object[][] blackpawn_first = { { "black first move", new Point(5, 6), new Point(5, 4) } };
    Object[][] blackpawn_badcap = { { "capture right off", new Point(7, 4), new Point(8, 3) }, { "capture left off", new Point(0, 4), new Point(-1, 3) } };
    Object[][] whitepawn = { { "standard move", new Point(6, 1), new Point(6, 2) }, { "capture right", new Point(4, 4), new Point(3, 5) }, { "capture left", new Point(4, 4), new Point(5, 5) } };
    Object[][] whitepawn_first = { { "first move", new Point(5, 1), new Point(5, 3) } };
    Object[][] whitepawn_badcap = { { "capture right off", new Point(7, 4), new Point(8, 5) }, { "capture left off", new Point(0, 4), new Point(-1, 5) } };
    // QUEEN
    ChessPiece p = ChessPiece.getPiece(PieceColor.BLACK, PieceType.QUEEN);
    checkIllegals(p, offboard);
    checkIllegals(p, nonmoves);
    checkLegals(p, onesquare_rookstyle);
    checkLegals(p, multisquare_rookstyle);
    checkLegals(p, onesquare_bishopstyle);
    checkLegals(p, multisquare_bishopstyle);
    checkIllegals(p, knightmoves);
    // KING
    p = ChessPiece.getPiece(PieceColor.WHITE, PieceType.KING);
    checkIllegals(p, offboard);
    checkIllegals(p, nonmoves);
    checkLegals(p, onesquare_rookstyle);
    checkIllegals(p, multisquare_rookstyle);
    checkLegals(p, onesquare_bishopstyle);
    checkIllegals(p, multisquare_bishopstyle);
    checkIllegals(p, knightmoves);
    // castling tests:
    checkLegals(p, castling);
    checkIllegals(p, castling, true);
    p.firstmove = false;
    checkIllegals(p, castling, true);
    checkIllegals(p, castling, false);
    // BISHOP
    p = ChessPiece.getPiece(PieceColor.BLACK, PieceType.BISHOP);
    checkIllegals(p, offboard);
    checkIllegals(p, nonmoves);
    checkIllegals(p, onesquare_rookstyle);
    checkIllegals(p, multisquare_rookstyle);
    checkLegals(p, onesquare_bishopstyle);
    checkLegals(p, multisquare_bishopstyle);
    checkIllegals(p, knightmoves);
    // ROOK
    p = ChessPiece.getPiece(PieceColor.WHITE, PieceType.ROOK);
    checkIllegals(p, offboard);
    checkIllegals(p, nonmoves);
    checkIllegals(p, onesquare_bishopstyle);
    checkIllegals(p, multisquare_bishopstyle);
    checkLegals(p, onesquare_rookstyle);
    checkLegals(p, multisquare_rookstyle);
    checkIllegals(p, knightmoves);
    // KNIGHT
    p = ChessPiece.getPiece(PieceColor.BLACK, PieceType.KNIGHT);
    checkLegals(p, knightmoves);
    checkIllegals(p, nonmoves);
    checkIllegals(p, offboard);
    checkIllegals(p, onesquare_bishopstyle);
    checkIllegals(p, onesquare_rookstyle);
    checkIllegals(p, multisquare_rookstyle);
    checkIllegals(p, multisquare_bishopstyle);
    // PAWN
    // black pawn
    p = ChessPiece.getPiece(PieceColor.BLACK, PieceType.PAWN);
    checkIllegals(p, offboard);
    checkIllegals(p, nonmoves);
    checkIllegals(p, knightmoves);
    checkIllegals(p, multisquare_bishopstyle);
    pawncheck(p, blackpawn, blackpawn_first, blackpawn_badcap);
    // white pawn
    p = ChessPiece.getPiece(PieceColor.WHITE, PieceType.PAWN);
    pawncheck(p, whitepawn, whitepawn_first, whitepawn_badcap);
    // this goes at the end, where firstmove is already false
    checkIllegals(p, multisquare_rookstyle);
}
