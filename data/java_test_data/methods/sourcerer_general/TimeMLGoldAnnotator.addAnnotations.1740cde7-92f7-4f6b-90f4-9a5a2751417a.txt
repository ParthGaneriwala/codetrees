private void addAnnotations(JCas jCas, Element element, StringBuffer textBuffer, Map<String, Anchor> anchors, Map<Time, String> anchorTimeIDs, List<Element> makeInstances, Map<TemporalLink, String> tlinkSourceIDs, Map<TemporalLink, String> tlinkTargetIDs) throws AnalysisEngineProcessException {
    int startOffset = textBuffer.length();
    for (Object content : element.getContent()) {
        if (content instanceof org.jdom.Text) {
            textBuffer.append(((org.jdom.Text) content).getText());
        } else if (content instanceof Element) {
            this.addAnnotations(jCas, (Element) content, textBuffer, anchors, anchorTimeIDs, makeInstances, tlinkSourceIDs, tlinkTargetIDs);
        }
    }
    int endOffset = textBuffer.length();
    if (element.getName().equals("TIMEX3")) {
        String funcInDoc = element.getAttributeValue("functionInDocument");
        boolean isCreationTime = funcInDoc != null && funcInDoc.equals("CREATION_TIME");
        Time time = isCreationTime ? new DocumentCreationTime(jCas, startOffset, endOffset) : new Time(jCas, startOffset, endOffset);
        TimeMLUtil.copyAttributes(element, time, jCas);
        String anchorTimeID = element.getAttributeValue("anchorTimeID");
        if (anchorTimeID != null) {
            anchorTimeIDs.put(time, anchorTimeID);
        }
        anchors.put(time.getId(), time);
        time.addToIndexes();
    } else if (element.getName().equals("EVENT")) {
        Event event = new Event(jCas, startOffset, endOffset);
        TimeMLUtil.copyAttributes(element, event, jCas);
        anchors.put(event.getId(), event);
        event.addToIndexes();
    } else if (element.getName().equals("MAKEINSTANCE")) {
        makeInstances.add(element);
    } else if (element.getName().equals("TLINK") && this.loadTlinks) {
        TemporalLink temporalLink = new TemporalLink(jCas, startOffset, endOffset);
        TimeMLUtil.copyAttributes(element, temporalLink, jCas);
        String sourceID = this.getOneOf(element, "eventInstanceID", "eventID", "timeID");
        String targetID = this.getOneOf(element, "relatedToEventInstance", "relatedToEvent", "relatedToTime");
        tlinkSourceIDs.put(temporalLink, sourceID);
        tlinkTargetIDs.put(temporalLink, targetID);
        temporalLink.addToIndexes();
    } else if (element.getName().equals("TEXT")) {
        Text text = new Text(jCas, startOffset, endOffset);
        text.addToIndexes();
    } else if (element.getName().toLowerCase().equals("s")) {
        Sentence sentence = new Sentence(jCas, startOffset, endOffset);
        sentence.addToIndexes();
    }
}
