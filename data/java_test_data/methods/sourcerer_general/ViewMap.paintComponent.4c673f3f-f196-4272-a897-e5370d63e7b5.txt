public void paintComponent(Graphics g) {
    Position selectedTile = viewData.getSelectedTile();
    List<Position> highlightedTiles = viewData.getHighlightedTiles();
    Hashtable<ViewTerrain, Position> terrainGrid = viewData.getTerrainGrid();
    Hashtable<ViewObject, Position> viewObjectGrid = viewData.getViewObjectGrid();
    Graphics2D g2 = (Graphics2D) g.create();
    // Draws the background
    BufferedImage img = ImageLibrary.getDefaultBackground();
    for (int row = 0; row * img.getWidth() <= this.getSize().width + 2 * img.getWidth(); row++) {
        for (int col = 0; col * img.getHeight() <= this.getSize().height + 2 * img.getHeight(); col++) {
            g2.drawImage(img, null, col * img.getWidth(), row * img.getHeight());
        }
    }
    g2.dispose();
    // calculate fog of war visibility
    updateFog();
    // fill in fog of war squares
    g2 = (Graphics2D) g.create();
    g2.transform(gridTx);
    for (int row = 0; row < uncovered.length; row++) {
        for (int col = 0; col < uncovered[row].length; col++) {
            if (!uncovered[row][col]) {
                g2.setColor(new Color(10, 10, 10));
                g2.fillRect(row * TILE_HEIGHT_PIXELS, col * TILE_WIDTH_PIXELS, TILE_WIDTH_PIXELS, TILE_HEIGHT_PIXELS);
            }
        }
    }
    g2.dispose();
    // Draw the grid of the map.
    g2 = (Graphics2D) g.create();
    g2.transform(gridTx);
    g2.setColor(Color.DARK_GRAY);
    for (int i = 0; i <= mapWidthTiles; i++) {
        g2.drawLine(i * TILE_HEIGHT_PIXELS, 0, i * TILE_HEIGHT_PIXELS, TILE_HEIGHT_PIXELS * mapHeightTiles);
        g2.drawLine(0, i * TILE_WIDTH_PIXELS, TILE_WIDTH_PIXELS * mapWidthTiles, i * TILE_WIDTH_PIXELS);
    }
    // Draw any selected or highlighted tiles.
    for (Position p : highlightedTiles) {
        highlightTile(g2, Color.YELLOW, p);
    }
    if (selectedTile != null) {
        highlightTile(g2, Color.BLUE, selectedTile);
    }
    g2.dispose();
    // Draw any terrains.
    Enumeration<ViewTerrain> terrains = terrainGrid.keys();
    while (terrains.hasMoreElements()) {
        g2 = (Graphics2D) g.create();
        ViewTerrain vtObj = terrains.nextElement();
        Position p = terrainGrid.get(vtObj);
        if (uncovered[p.getX()][p.getY()]) {
            Point pt = new Point(p.getX() * TILE_WIDTH_PIXELS, p.getY() * TILE_HEIGHT_PIXELS);
            gridTx.transform(pt, pt);
            g2.translate(pt.x + 10, pt.y - 25);
            vtObj.paint(g2);
        }
        g2.dispose();
    }
    // Draw all the Units in their relatively correct positions
    Enumeration<ViewObject> viewObjects = viewObjectGrid.keys();
    while (viewObjects.hasMoreElements()) {
        g2 = (Graphics2D) g.create();
        ViewObject vobj = viewObjects.nextElement();
        Position p = viewObjectGrid.get(vobj);
        if (uncovered[p.getX()][p.getY()]) {
            Point pt = new Point(p.getX() * TILE_WIDTH_PIXELS, p.getY() * TILE_HEIGHT_PIXELS);
            gridTx.transform(pt, pt);
            g2.translate(pt.x, pt.y);
            vobj.paint(g2);
        }
        g2.dispose();
    }
}
