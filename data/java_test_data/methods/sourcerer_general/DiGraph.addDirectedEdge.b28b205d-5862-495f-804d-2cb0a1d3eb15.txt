public void addDirectedEdge(Edge edge, Node src, Node dest) {
    edges.addElement(edge);
    edge.setDirected(true);
    int edgeNum = edges.size() - 1;
    edge.setPositionInGraph(edgeNum);
    edge.setDestination(dest);
    edge.setSrc(src);
    src.addSuccessesor(dest);
    // Assign a number to the destination node
    if (nodeCount == 0) {
        nodesVsOrderNumber.put(src, new Integer(nodeCount));
    } else {
        nodeCount++;
        nodesVsOrderNumber.put(dest, new Integer(nodeCount));
    }
    // Add the predecessor to the destination at the right index
    Vector<Node> predsOfDest = dest.getPredecessors();
    if (// No predecessor yet
    predsOfDest == null && predsOfDest.size() > 0) {
        dest.addPredecessor(src);
    } else {
        int numPredsOfDest = predsOfDest.size();
        Integer orderIntOfSrc = nodesVsOrderNumber.get(src);
        int numOrderOfSrc = orderIntOfSrc.intValue();
        int indexToInsertPred = 0;
        for (int i = 0; i < numPredsOfDest; i++) {
            Node predOfDest = predsOfDest.elementAt(i);
            Integer orderInt = nodesVsOrderNumber.get(predOfDest);
            if (orderInt != null) {
                int orderNumOfPred = orderInt.intValue();
                if (numOrderOfSrc < orderNumOfPred) {
                    indexToInsertPred = i - 1;
                    break;
                }
            }
        }
        if (indexToInsertPred < 0)
            indexToInsertPred = 0;
        dest.addPredecessorAt(src, indexToInsertPred);
    }
    src.addOutgoingEdge(edge);
    dest.addIncomingEdge(edge);
}
