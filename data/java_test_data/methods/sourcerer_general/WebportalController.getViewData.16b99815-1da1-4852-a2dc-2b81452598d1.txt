@RequestMapping(value = "/viewdata/{id}", method = RequestMethod.GET)
public ModelAndView getViewData(@PathVariable("id") String id) {
    ModelAndView model = new ModelAndView("viewdata");
    Report report = Report.byKey(id);
    if (report == null || report.getReporterId() == null) {
        model.addObject("error", true);
        if (report == null)
            model.addObject("errorMessage", "There was no report found for ID " + id);
        else
            model.addObject("errorMessage", "The found report had no reporter ID");
        model.addObject("reporterId", "");
        return model;
    } else
        model.addObject("error", false);
    // Query the datastore for existing types
    DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();
    Query qString = new Query("StringDataItem");
    qString.addFilter("reportId", Query.FilterOperator.EQUAL, id);
    Query qLocation = new Query("LocationDataItem");
    qLocation.addFilter("reportId", Query.FilterOperator.EQUAL, id);
    // Build the list of string results
    PreparedQuery pqString = datastore.prepare(qString);
    List<ViewDataResult> data = new ArrayList<ViewDataResult>();
    for (Entity result : pqString.asIterable()) {
        ViewDataResult r = new ViewDataResult();
        r.type = "String";
        r.data = result.getProperty("data").toString();
        Key k = result.getKey();
        r.id = KeyFactory.keyToString(k);
        data.add(r);
    }
    // Build the list of location results
    PreparedQuery pqLocation = datastore.prepare(qLocation);
    for (Entity result : pqLocation.asIterable()) {
        ViewDataResult r = new ViewDataResult();
        r.type = "Location";
        r.data = result.getProperty("latitude").toString() + ", " + result.getProperty("longitude").toString();
        Key k = result.getKey();
        r.id = KeyFactory.keyToString(k);
        data.add(r);
    }
    model.addObject("data", data);
    model.addObject("reporterId", report.getReporterId());
    return model;
}
