QueryExpression XreadQueryExpression() {
    if (token.tokenType == Tokens.WITH) {
        read();
        if (token.tokenType == Tokens.RECURSIVE) {
            throw super.unsupportedFeature();
        }
        compileContext.initSubqueryNames();
        while (true) {
            checkIsSimpleName();
            HsqlName[] nameList = null;
            HsqlName queryName = database.nameManager.newHsqlName(token.tokenString, isDelimitedIdentifier(), SchemaObject.SUBQUERY);
            queryName.schema = SqlInvariants.SYSTEM_SUBQUERY_HSQLNAME;
            read();
            if (token.tokenType == Tokens.OPENBRACKET) {
                nameList = readColumnNames(queryName);
            }
            readThis(Tokens.AS);
            readThis(Tokens.OPENBRACKET);
            SubQuery subQuery = XreadTableNamedSubqueryBody(queryName, nameList);
            readThis(Tokens.CLOSEBRACKET);
            compileContext.registerSubquery(queryName.name, subQuery);
            if (token.tokenType == Tokens.COMMA) {
                read();
                continue;
            }
            break;
        }
    }
    QueryExpression queryExpression = XreadQueryExpressionBody();
    SortAndSlice sortAndSlice = XreadOrderByExpression();
    if (queryExpression.sortAndSlice == null) {
        queryExpression.addSortAndSlice(sortAndSlice);
    } else {
        if (queryExpression.sortAndSlice.hasLimit()) {
            if (sortAndSlice.hasLimit()) {
                throw Error.error(ErrorCode.X_42549);
            }
            for (int i = 0; i < sortAndSlice.exprList.size(); i++) {
                Expression e = (Expression) sortAndSlice.exprList.get(i);
                queryExpression.sortAndSlice.addOrderExpression(e);
            }
        } else {
            queryExpression.addSortAndSlice(sortAndSlice);
        }
    }
    return queryExpression;
}
