public void testFsckMove() throws Exception {
    DFSTestUtil util = new DFSTestUtil("TestFsck", 5, 3, 8 * 1024);
    MiniDFSCluster cluster = null;
    FileSystem fs = null;
    try {
        Configuration conf = new Configuration();
        conf.set("dfs.blockreport.intervalMsec", Integer.toString(30));
        cluster = new MiniDFSCluster(conf, 4, true, null);
        String topDir = "/srcdat";
        fs = cluster.getFileSystem();
        cluster.waitActive();
        util.createFiles(fs, topDir);
        util.waitReplication(fs, topDir, (short) 3);
        String outStr = runFsck(conf, 0, true, "/");
        assertTrue(outStr.contains("HEALTHY"));
        // Corrupt a block by deleting it
        String[] fileNames = util.getFileNames(topDir);
        DFSClient dfsClient = new DFSClient(new InetSocketAddress("localhost", cluster.getNameNodePort()), conf);
        String block = dfsClient.namenode.getBlockLocations(fileNames[0], 0, Long.MAX_VALUE).get(0).getBlock().getBlockName();
        File baseDir = new File(System.getProperty("test.build.data"), "dfs/data");
        for (int i = 0; i < 8; i++) {
            File blockFile = new File(baseDir, "data" + (i + 1) + "/current/" + block);
            if (blockFile.exists()) {
                assertTrue(blockFile.delete());
            }
        }
        // We excpect the filesystem to be corrupted
        outStr = runFsck(conf, 1, false, "/");
        while (!outStr.contains("CORRUPT")) {
            try {
                Thread.sleep(100);
            } catch (InterruptedException ignore) {
            }
            outStr = runFsck(conf, 1, false, "/");
        }
        // Fix the filesystem by moving corrupted files to lost+found
        outStr = runFsck(conf, 1, true, "/", "-move");
        assertTrue(outStr.contains("CORRUPT"));
        // Check to make sure we have healthy filesystem
        outStr = runFsck(conf, 0, true, "/");
        assertTrue(outStr.contains("HEALTHY"));
        util.cleanup(fs, topDir);
        if (fs != null) {
            try {
                fs.close();
            } catch (Exception e) {
            }
        }
        cluster.shutdown();
    } finally {
        if (fs != null) {
            try {
                fs.close();
            } catch (Exception e) {
            }
        }
        if (cluster != null) {
            cluster.shutdown();
        }
    }
}
