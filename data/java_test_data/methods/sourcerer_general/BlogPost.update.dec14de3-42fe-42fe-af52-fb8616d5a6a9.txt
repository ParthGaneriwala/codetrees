public int update(Connection db) throws SQLException {
    if (this.getId() == -1) {
        throw new SQLException("ID was not specified");
    }
    if (!isValid()) {
        return -1;
    }
    int resultCount = 0;
    int i = 0;
    StringBuffer sbf = new StringBuffer("");
    if (pageTitle != null) {
        sbf.append(" page_title = ?,");
    }
    if (keywords != null) {
        sbf.append("keywords = ?,");
    }
    if (description != null) {
        sbf.append("description = ?, ");
    }
    if (metaName != null) {
        sbf.append("meta_name = ?,");
    }
    if (metaContent != null) {
        sbf.append("meta_content = ?, ");
    }
    if (portalKey != null) {
        sbf.append("portal_key = ?, ");
    }
    PreparedStatement pst = db.prepareStatement("UPDATE project_news SET " + sbf.toString() + " " + "subject = ?, intro = ?, message = ?, " + "modifiedby = ?, modified = CURRENT_TIMESTAMP, " + "start_date = ?, end_date = ?, allow_replies = ?, allow_rating = ?, " + "priority_id = ?, enabled = ?, status = ?, category_id = ?, " + "classification_id = ?, template_id = ? " + "WHERE news_id = ? " + "AND modified = ? ");
    if (pageTitle != null) {
        pst.setString(++i, pageTitle);
    }
    if (keywords != null) {
        pst.setString(++i, keywords);
    }
    if (description != null) {
        pst.setString(++i, description);
    }
    if (metaName != null) {
        pst.setString(++i, metaName);
    }
    if (metaContent != null) {
        pst.setString(++i, metaContent);
    }
    if (portalKey != null) {
        pst.setString(++i, portalKey);
    }
    pst.setString(++i, subject);
    pst.setString(++i, intro);
    pst.setString(++i, message);
    pst.setInt(++i, this.getModifiedBy());
    DatabaseUtils.setTimestamp(pst, ++i, startDate);
    DatabaseUtils.setTimestamp(pst, ++i, endDate);
    pst.setBoolean(++i, allowReplies);
    pst.setBoolean(++i, allowRatings);
    DatabaseUtils.setInt(pst, ++i, priorityId);
    pst.setBoolean(++i, enabled);
    DatabaseUtils.setInt(pst, ++i, status);
    DatabaseUtils.setInt(pst, ++i, categoryId);
    DatabaseUtils.setInt(pst, ++i, classificationId);
    DatabaseUtils.setInt(pst, ++i, templateId);
    pst.setInt(++i, id);
    pst.setTimestamp(++i, modified);
    resultCount = pst.executeUpdate();
    pst.close();
    if (resultCount == 1) {
        // See if there is a link already
        boolean hasTaskCategoryLink = false;
        boolean sameTaskCategoryLink = false;
        pst = db.prepareStatement("SELECT category_id " + "FROM taskcategorylink_news " + "WHERE news_id = ? ");
        pst.setInt(1, id);
        ResultSet rs = pst.executeQuery();
        if (rs.next()) {
            hasTaskCategoryLink = true;
            if (rs.getInt("category_id") == taskCategoryId) {
                sameTaskCategoryLink = true;
            }
        }
        rs.close();
        pst.close();
        // 
        if (hasTaskCategoryLink && taskCategoryId > -1 && !sameTaskCategoryLink) {
            // Delete the previous link(s)
            deleteTaskCategoryLink(db);
            // Insert the new link
            insertTaskCategoryLink(db);
        }
        // 
        if (hasTaskCategoryLink && taskCategoryId == -1) {
            // Delete the previous link(s)
            deleteTaskCategoryLink(db);
        }
        // 
        if (!hasTaskCategoryLink && taskCategoryId > -1) {
            // Insert the new link
            insertTaskCategoryLink(db);
        }
    }
    return resultCount;
}
