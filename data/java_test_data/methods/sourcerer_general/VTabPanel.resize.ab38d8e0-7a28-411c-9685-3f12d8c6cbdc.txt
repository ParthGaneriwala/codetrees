public void resize() {
    int index;
    int x = 0, dx = tab_pad + 1, y = 0, w = 0, h = 0;
    int dw, dh;
    /* default values for width and height */
    int boundary;
    CTab tab;
    /*
         * For bottom-oriented tabs, we usually compress them to make them all 
         * fit into the width of the tab-bar.
         */
    if (panel.orientation == CTabPanel.TAB_ORIENTATION_BOTTOM) {
        dh = getHeight() - tab_pad - border - 1;
        for (index = 0; index < panel.tabs.size(); index++) {
            tab = (CTab) panel.tabs.get(index);
            if (this.getTabsPreferredWidth() + 3 * tab_pad <= W()) {
                dw = tab.getPreferredWidth();
            } else {
                dw = Math.round((float) ((float) W() - 2 * tab_pad) / (float) panel.tabs.size());
            }
            if (tab.current()) {
                x = dx - 1;
                y = border - 1;
                w = dw + 1;
                h = dh + 1;
            } else {
                x = dx;
                y = border;
                w = dw;
                h = dh;
            }
            tab.setBounds(x, y, w, h);
            dx += dw;
        }
        close.setVisible(false);
    }
    /*
         * For top-oriented tabs, we honor the tabs preferred sizes and whatever
         * doesn't fit into the width of the tab-bar, we take them out and put 
         * them into an overflow buffer for viewing with a menu.
         */
    if (panel.orientation == CTabPanel.TAB_ORIENTATION_TOP) {
        dh = getHeight() - tab_pad - border;
        boundary = W() - 25 - 15;
        init_sweep();
        sweep_calc();
        if (xend <= boundary) {
            /*
                 * This is the normal case where we place the tabs as usual.
                 */
            for (index = 0; index < panel.tabs.size(); index++) {
                tab = (CTab) panel.tabs.get(index);
                dw = tab.getPreferredWidth();
                tab.setVisible(true);
                if (tab.current()) {
                    x = dx - 1;
                    y = tab_pad;
                    w = dw + 1;
                    h = dh + 1;
                } else {
                    x = dx;
                    y = tab_pad;
                    w = dw;
                    h = dh;
                }
                tab.setBounds(x, y, w, h);
                dx += dw;
            }
        } else if (xend > boundary && xcur < boundary) {
            int cidx = 0;
            int sidx;
            /*
                 * In this case, we have to supress some tabs at the end of the
                 * tab list. We choose the first tab to supress from by checking
                 * if that tab's end crosses the boundary
                 */
            for (sidx = 0; sidx < panel.tabs.size(); sidx++) {
                supress[sidx] = false;
                if (end[sidx] > boundary) {
                    cidx = sidx;
                    break;
                }
            }
            /*
                 * Now that we found the first tab to supress from (cidx) we 
                 * loop starting with that tab, and ending in the last tab, and
                 * we supress them.
                 */
            for (sidx = cidx; sidx < panel.tabs.size(); sidx++) {
                supress[sidx] = true;
            }
            /*
                 * Now that the suppressed tabs have been marked, place the tabs 
                 * that aren't suppressed.
                 */
            for (index = 0; index < panel.tabs.size(); index++) {
                tab = (CTab) panel.tabs.get(index);
                dw = tab.getPreferredWidth();
                if (supress[index]) {
                    tab.setVisible(false);
                    continue;
                } else {
                    tab.setVisible(true);
                }
                if (tab.current()) {
                    x = dx - 1;
                    y = tab_pad;
                    w = dw + 1;
                    h = dh + 1;
                } else {
                    x = dx;
                    y = tab_pad;
                    w = dw;
                    h = dh;
                }
                tab.setBounds(x, y, w, h);
                dx += dw;
            }
        } else if (xend > boundary && xcur >= boundary) {
            int cidx;
            int bidx = 0;
            int cw;
            int sidx;
            /*
                 * In this case, we have to supress all tabs that are beyond the
                 * current tab (if any), and all tabs - starting from the one
                 * previous to current and backwards - until we find a fit for
                 * the current tab.
                 */
            cidx = panel.tabs.indexOf(panel.searchTab(panel.current));
            cw = panel.searchTab(panel.current).getPreferredWidth();
            /*
                 * Supress all the tabs after current
                 */
            for (sidx = cidx + 1; sidx < panel.tabs.size(); sidx++) {
                supress[sidx] = true;
            }
            /*
                 * Supress tabs before current until we find a fit for current.
                 */
            for (sidx = 0; sidx < panel.tabs.size(); sidx++) {
                supress[sidx] = false;
                if (end[sidx] + cw > boundary) {
                    bidx = sidx;
                    break;
                }
            }
            /*
                 * Supress tabs from the fit tab all the way to the tab right
                 * before current;
                 */
            for (sidx = bidx; sidx < cidx; sidx++) {
                supress[sidx] = true;
            }
            /*
                 * Now that the suppressed tabs have been marked, place the tabs 
                 * that aren't suppressed.
                 */
            for (index = 0; index < panel.tabs.size(); index++) {
                tab = (CTab) panel.tabs.get(index);
                dw = tab.getPreferredWidth();
                if (supress[index]) {
                    tab.setVisible(false);
                    continue;
                } else {
                    tab.setVisible(true);
                }
                if (tab.current()) {
                    x = dx - 1;
                    y = tab_pad;
                    w = dw + 1;
                    h = dh + 1;
                } else {
                    x = dx;
                    y = tab_pad;
                    w = dw;
                    h = dh;
                }
                tab.setBounds(x, y, w, h);
                dx += dw;
            }
        }
        close.setBounds(getWidth() - 22, 5, 15, 15);
    }
    /*
         * Refresh the overflown tabs list
         */
    update_overflow();
    /*
         * If we have top-oriented tabs, decide whether to 
         */
    if (panel.orientation == CTabPanel.TAB_ORIENTATION_TOP) {
        if (panel.overflow_tabs.size() > 0) {
            overflow.setBounds(dx + 5, 7, 11, 15);
            overflow.setVisible(true);
        } else {
            overflow.setVisible(false);
        }
    }
}
