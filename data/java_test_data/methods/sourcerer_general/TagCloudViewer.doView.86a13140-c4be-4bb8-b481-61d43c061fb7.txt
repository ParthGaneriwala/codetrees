public String doView(RenderRequest request, RenderResponse response) throws PortletException, IOException {
    try {
        String defaultView = VIEW_PAGE1;
        // Set global preferences
        request.setAttribute(TITLE, request.getPreferences().getValue(PREF_TITLE, null));
        request.setAttribute(MESSAGE, request.getPreferences().getValue(PREF_MESSAGE, null));
        String limitString = request.getPreferences().getValue(PREF_LIMIT, null);
        String sortByTagCount = request.getPreferences().getValue(PREF_SORTBY_TAGCOUNT, null);
        String hasMoreURL = request.getPreferences().getValue(PREF_HAS_MORE_URL, null);
        String hasMoreTitle = request.getPreferences().getValue(PREF_HAS_MORE_TITLE, null);
        String projectCategory = request.getPreferences().getValue(PREF_CATEGORY, null);
        request.setAttribute(HAS_MORE_URL, hasMoreURL);
        request.setAttribute(HAS_MORE_TITLE, hasMoreTitle);
        int limit = -1;
        if (StringUtils.hasText(limitString)) {
            limit = Integer.parseInt(limitString);
        }
        Connection db = PortalUtils.useConnection(request);
        // If preference for category is not set, get it from the page view
        if (!StringUtils.hasText(projectCategory)) {
            projectCategory = PortalUtils.getPageView(request);
        }
        if (!StringUtils.hasText(projectCategory)) {
            projectCategory = ProjectCategory.CATEGORY_NAME_ALL;
        }
        request.setAttribute(CATEGORY_NAME, projectCategory);
        // Get id for selected category
        int projectCategoryId = -1;
        if (StringUtils.hasText(projectCategory) && !"all".equals(projectCategory)) {
            ProjectCategoryList categories = (ProjectCategoryList) request.getAttribute(Constants.REQUEST_TAB_CATEGORY_LIST);
            projectCategoryId = categories.getIdFromValue(projectCategory);
            if (projectCategoryId == -1) {
                return null;
            }
        }
        String sortFilter = PortalUtils.getPageParameter(request);
        Project project = PortalUtils.getProject(request);
        if (project == null) {
            // Get this category's tag cloud
            UniqueTagList tagList = new UniqueTagList();
            tagList.setTableName(Project.TABLE);
            tagList.setInstanceId(PortalUtils.getInstance(request).getId());
            if (PortalUtils.canShowSensitiveData(request) && PortalUtils.getUser(request).getId() > 0) {
                tagList.setForParticipant(Constants.TRUE);
            } else {
                // Use the most generic settings since this portlet is cached
                tagList.setForGuest(Constants.TRUE);
            }
            PagedListInfo tagListInfo = new PagedListInfo();
            if ("true".equals(sortByTagCount) || (StringUtils.hasText(sortFilter) && ("popular".equals(sortFilter)))) {
                tagListInfo.setColumnToSortBy("tag_count DESC");
            } else if ((StringUtils.hasText(sortFilter) && "newly-added".equals(sortFilter))) {
                tagListInfo.setColumnToSortBy("tag_date DESC");
            } else {
                tagListInfo.setColumnToSortBy("tag");
            }
            if (StringUtils.hasText(limitString)) {
                tagListInfo.setItemsPerPage(limit);
            } else {
                tagListInfo.setItemsPerPage(-1);
            }
            tagList.setProjectCategoryId(projectCategoryId);
            tagList.setPagedListInfo(tagListInfo);
            tagList.setDetermineTagWeights(true);
            tagList.buildList(db);
            if (tagList.size() == 0) {
                String showWhenEmpty = request.getPreferences().getValue(PREF_SHOW_WHEN_EMPTY, "false");
                if ("false".equals(showWhenEmpty)) {
                    return null;
                }
            }
            request.setAttribute(TAG_LIST, tagList);
        } else {
            // Get this project's tag cloud
            TagList tagList = new TagList();
            tagList.setTableName(Project.TABLE);
            PagedListInfo tagListInfo = new PagedListInfo();
            if ("true".equals(sortByTagCount) || (StringUtils.hasText(sortFilter) && ("popular".equals(sortFilter)))) {
                tagListInfo.setColumnToSortBy("tag_count DESC");
            } else if ((StringUtils.hasText(sortFilter) && "new-added".equals(sortFilter))) {
                tagListInfo.setColumnToSortBy("tag_date DESC");
            } else {
                tagListInfo.setColumnToSortBy("tag");
            }
            if (StringUtils.hasText(limitString)) {
                tagListInfo.setItemsPerPage(limit);
            } else {
                tagListInfo.setItemsPerPage(-1);
            }
            tagList.setLinkItemId(project.getId());
            tagList.setPagedListInfo(tagListInfo);
            tagList.setDetermineTagWeights(true);
            tagList.buildList(db);
            if (tagList.size() == 0) {
                String showWhenEmpty = request.getPreferences().getValue(PREF_SHOW_WHEN_EMPTY, "false");
                if ("false".equals(showWhenEmpty)) {
                    return null;
                }
            }
            request.setAttribute(TAG_LIST, tagList);
        }
        // JSP view
        return defaultView;
    } catch (Exception e) {
        e.printStackTrace();
        throw new PortletException(e);
    }
}
