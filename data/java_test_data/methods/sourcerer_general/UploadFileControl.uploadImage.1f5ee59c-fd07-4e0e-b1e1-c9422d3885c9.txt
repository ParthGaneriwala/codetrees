@RequestMapping(method = RequestMethod.POST, params = "type=image")
public void uploadImage(ModelMap modelMap, HttpServletRequest request, HttpServletResponse response) {
    // 判断提交的请求是否包含文件
    boolean isMultipart = ServletFileUpload.isMultipartContent(request);
    if (!isMultipart) {
        return;
    }
    // 获取目录
    File floder = buildFolder(request);
    if (null == floder) {
        return;
    }
    try {
        response.setContentType("text/html; charset=UTF-8");
        response.setHeader("Cache-Control", "no-cache");
        PrintWriter out = response.getWriter();
        // 上传文件的返回地址
        String fileUrl = "";
        FileItemFactory factory = new DiskFileItemFactory();
        ServletFileUpload servletFileUpload = new ServletFileUpload(factory);
        servletFileUpload.setFileSizeMax(MAX_FILE_SIZE);
        @SuppressWarnings("unchecked") List<FileItem> fileitem = servletFileUpload.parseRequest(request);
        if (null == fileitem || 0 == fileitem.size()) {
            return;
        }
        Iterator<FileItem> fileitemIndex = fileitem.iterator();
        if (fileitemIndex.hasNext()) {
            FileItem file = fileitemIndex.next();
            if (file.isFormField()) {
                logger.error("上传文件非法！isFormField=true");
            }
            String fileClientName = getFileName(file.getName());
            String fileFix = StringUtils.substring(fileClientName, fileClientName.lastIndexOf(".") + 1);
            if (!StringUtils.equalsIgnoreCase(fileFix, "jpg") && !StringUtils.equalsIgnoreCase(fileFix, "jpeg") && !StringUtils.equalsIgnoreCase(fileFix, "bmp") && !StringUtils.equalsIgnoreCase(fileFix, "gif") && !StringUtils.equalsIgnoreCase(fileFix, "png")) {
                logger.error("上传文件的格式错误=" + fileFix);
                return;
            }
            if (logger.isInfoEnabled()) {
                logger.info("开始上传文件:" + file.getName());
            }
            // 为了客户端已经设置好了图片名称在服务器继续能够明确识别，这里不改名称
            File newfile = new File(floder, fileClientName);
            file.write(newfile);
            if (logger.isInfoEnabled()) {
                logger.info("上传文件结束，新名称:" + fileClientName + ".floder:" + newfile.getPath());
            }
            // 组装返回url，以便于ckeditor定位图片
            fileUrl = FOR_FREEMARKER_LOAD_DIR + FILE_UPLOAD_DIR + FILE_UPLOAD_SUB_IMG_DIR + File.separator + floder.getName() + File.separator + newfile.getName();
            // 去掉\freemarker的第一个\，否则ckeditor不识别
            fileUrl = fileUrl.substring(1);
            fileUrl = StringUtils.replace(fileUrl, "\\", "/");
            // 将上传的图片的url返回给ckeditor
            String callback = request.getParameter("CKEditorFuncNum");
            out.println("<script type=\"text/javascript\"><!-- ");
            out.println("window.parent.CKEDITOR.tools.callFunction(" + callback + ",'" + fileUrl + "',''" + ")");
            out.println("// --></script>");
        }
        out.flush();
        out.close();
    } catch (IOException e) {
        logger.error("上传文件发生异常！", e);
    } catch (FileUploadException e) {
        logger.error("上传文件发生异常！", e);
    } catch (Exception e) {
        logger.error("上传文件发生异常！", e);
    }
    return;
}
