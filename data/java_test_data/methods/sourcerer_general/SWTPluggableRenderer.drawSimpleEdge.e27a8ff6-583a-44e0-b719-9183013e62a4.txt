protected void drawSimpleEdge(AwtG2DWrapper g, Edge e, int x1, int y1, int x2, int y2) {
    float control_offset = edgeControlOffsetFunction.getNumber(e).floatValue();
    float xoff = x2 - x1;
    float yoff = y2 - y1;
    double theta = Math.atan2(yoff, xoff) - Math.PI / 2;
    Pair endpoints = e.getEndpoints();
    Shape s2 = vertexShapeFunction.getShape((Vertex) endpoints.getSecond());
    double theta_offset;
    if (control_offset == 0) {
        g.drawLine(x1, y1, x2, y2);
        theta_offset = 0;
    } else {
        float distance = (float) CoordinateUtil.distance(new Coordinates(x1, y1), x2, y2);
        theta_offset = Math.atan2(control_offset, distance / 2);
        GeneralPath edge_path = new GeneralPath();
        edge_path.moveTo(0, 0);
        edge_path.lineTo(control_offset, distance / 2);
        edge_path.lineTo(0, distance);
        AffineTransform at = new AffineTransform();
        at.translate(x1, y1);
        at.rotate(theta);
        g.draw(at.createTransformedShape(edge_path));
    }
    if (edgeArrowPredicate.evaluate(e)) {
        drawArrowhead(g, e, x2, y2, xoff, yoff, s2, theta + theta_offset);
        if (e instanceof UndirectedEdge) {
            Shape s1 = vertexShapeFunction.getShape((Vertex) endpoints.getFirst());
            drawArrowhead(g, e, x1, y1, xoff, yoff, s1, theta + theta_offset + Math.PI);
        }
    }
    String label = edgeStringer.getLabel(e);
    if (label != null)
        labelEdge(g, e, label, x1, x2, y1, y2);
}
