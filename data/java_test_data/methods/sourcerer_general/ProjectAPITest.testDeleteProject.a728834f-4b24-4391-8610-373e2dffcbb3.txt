public void testDeleteProject() throws Exception {
    String projectTitle = "API Test Project to delete";
    // Add Meta Info with fields required
    ArrayList<String> meta = new ArrayList<String>();
    meta.add("id");
    meta.add("title");
    meta.add("owner");
    api.setTransactionMeta(meta);
    // Prepare a batch transaction
    {
        // The minimum number of fields for a successful project insert
        DataRecord record = new DataRecord();
        record.setName("project");
        record.setAction(DataRecord.INSERT);
        record.setShareKey(true);
        record.addField("title", projectTitle);
        record.addField("shortDescription", "API Test Project short description");
        record.addField("requestDate", new Date());
        record.addField("enteredBy", USER_ID);
        record.addField("modifiedBy", USER_ID);
        record.addField("groupId", GROUP_ID);
        record.addField("owner", USER_ID);
        api.save(record);
    }
    {
        // Ask the API to send the just inserted project back
        DataRecord record = new DataRecord();
        record.setName("projectList");
        record.setAction(DataRecord.SELECT);
        record.addField("projectId", "$C{project.id}");
        api.save(record);
    }
    // Process the complete transaction
    processTheTransactions(api, packetContext);
    assertFalse("API reported a transaction error: " + api.getLastResponse(), api.hasError());
    assertTrue("Couldn't find inserted project", api.getRecordCount() == 1);
    // In the meta section, some items were requested
    Project partialProject = null;
    ArrayList<Object> projectObjects = api.getRecords("com.concursive.connect.web.modules.profile.dao.Project");
    assertTrue(projectObjects.size() == 1);
    for (Object projectObject : projectObjects) {
        partialProject = (Project) projectObject;
        assertTrue(partialProject.getId() > -1);
        assertTrue(projectTitle.equals(partialProject.getTitle()));
        assertTrue(partialProject.getOwner() == USER_ID);
    }
    assertNotNull(partialProject);
    // Construct a delete request
    DataRecord record = new DataRecord();
    record.setName("project");
    record.setAction(DataRecord.DELETE);
    record.addField("id", partialProject.getId());
    api.save(record);
    processTheTransactions(api, packetContext);
    assertFalse("API reported a transaction error: " + api.getLastResponse(), api.hasError());
    Project thisProject = new Project(db, partialProject.getId());
    assertTrue("Shouldn't have found the deleted project", thisProject.getId() == -1);
}
