private void createGameRunningSimpleCommands() {
    // ==============================================================
    // COMMANDS AVAILABLE AT STARTUP. ADD TO THIS LIST WHEN NECESSARY
    // ==============================================================
    // Stop Command
    final StopCommand stCmd = new StopCommand(model);
    registerSimpleCommand(CommandEnum.STOP_COMMAND, stCmd);
    // Attack Command
    final AttackCommand atCmd = new AttackCommand(model, gameViewport);
    registerSimpleCommand(CommandEnum.ATTACK_COMMAND, atCmd);
    final GVChangeSubviewCommand subCmd = new GVChangeSubviewCommand(gameViewport);
    registerSimpleCommand(CommandEnum.GV_SWITCH_SUBVIEW, subCmd);
    final GVRotateSlotsCommand rotCmd = new GVRotateSlotsCommand(gameViewport);
    registerSimpleCommand(CommandEnum.GV_ROTATE_SLOTS, rotCmd);
    final GVSwitchToEquipmentCommand equCmd = new GVSwitchToEquipmentCommand(gameViewport);
    registerSimpleCommand(CommandEnum.GV_SWITCH_EQUIPMENT, equCmd);
    final GVSwitchToSkillsCommand skiCmd = new GVSwitchToSkillsCommand(gameViewport);
    registerSimpleCommand(CommandEnum.GV_SWITCH_SKILLS, skiCmd);
    final GVSwitchToInventoryCommand invCmd = new GVSwitchToInventoryCommand(gameViewport);
    registerSimpleCommand(CommandEnum.GV_SWITCH_INVENTORY, invCmd);
    final GVToggleMenuCommand togCmd = new GVToggleMenuCommand(gameViewport);
    registerSimpleCommand(CommandEnum.GV_TOGGLE_MENU_COMMAND, togCmd);
    final ShowChangeBindingsDialog showChangeBindingsDialog = new ShowChangeBindingsDialog(gameViewport, this);
    registerSimpleCommand(CommandEnum.CHANGE_BINDINGS_SHOW, showChangeBindingsDialog);
    final HideDialogCommand hideDialogCommand = new HideDialogCommand(gameViewport);
    registerSimpleCommand(CommandEnum.HIDE_DIALOG, hideDialogCommand);
    final BMNewGameCommand bmnewCmd = new BMNewGameCommand(model);
    registerSimpleCommand(CommandEnum.BM_NEW_GAME_COMMAND, bmnewCmd);
    final BMLoadGameCommand bmldCmd = new BMLoadGameCommand(model, gameViewport, this);
    registerSimpleCommand(CommandEnum.BM_LOAD_COMMAND, bmldCmd);
    final BMSaveGameCommand bmsaveCmd = new BMSaveGameCommand(model, gameViewport, this);
    registerSimpleCommand(CommandEnum.BM_SAVE_COMMAND, bmsaveCmd);
    final BMQuitCommand bmquitCmd = new BMQuitCommand(this);
    registerSimpleCommand(CommandEnum.BM_QUIT_COMMAND, bmquitCmd);
    final BMChangeControlsCommand bmChngCntrlsCmd = new BMChangeControlsCommand(gameViewport, this);
    registerSimpleCommand(CommandEnum.BM_CHANGE_CONTROLS_COMMAND, bmChngCntrlsCmd);
    final TradeDialogCommand tradeDialogCommand = new TradeDialogCommand(gameViewport, model);
    registerSimpleCommand(CommandEnum.SHOW_TRADE_DIALOG_COMMAND, tradeDialogCommand);
    final BMUpgradeSkillCommand bmskupCmd = new BMUpgradeSkillCommand(model, gameViewport);
    registerSimpleCommand(CommandEnum.BM_SKILLS_UPGRADE_COMMAND, bmskupCmd);
    final BMUseOnSelfSkillCommand bmuseonselfCmd = new BMUseOnSelfSkillCommand(model, gameViewport);
    registerSimpleCommand(CommandEnum.BM_SKILLS_USESELF_COMMAND, bmuseonselfCmd);
    final BMUseInDirectionCommand bmuseindirCmd = new BMUseInDirectionCommand(model, gameViewport);
    registerSimpleCommand(CommandEnum.BM_SKILLS_USEOTHER_COMMAND, bmuseindirCmd);
    final BuyCommand buyCmd = new BuyCommand(model, gameViewport);
    registerSimpleCommand(CommandEnum.BUY_COMMAND, buyCmd);
    final SellCommand sellCmd = new SellCommand(model, gameViewport);
    registerSimpleCommand(CommandEnum.SELL_COMMAND, sellCmd);
    final LeaveVehicleCommand lvVehCmd = new LeaveVehicleCommand(model);
    registerSimpleCommand(CommandEnum.LEAVE_VEHICLE_COMMAND, lvVehCmd);
}
