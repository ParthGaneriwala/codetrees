private void sentencia() throws AleXcore.ExcepcionCaracterInvalido, AleXcore.ExcepcionComentarioSinCerrar, AleXcore.ExcepcionIdentificadorInvalido, AleXcore.ExcepcionComentarioCerrado, ExcepcionErrorSintactico, ExcepcionErrorSemantico {
    String identificador = "";
    Elemento idObj;
    if (ultimoToken.isToken(Token.IDENTIFICADOR)) {
        identificador = ultimoToken.getLexema();
        if (identificador.toUpperCase().equals("WRITE")) {
            sentenciaWrite(WRITE);
        } else if (identificador.toUpperCase().equals("WRITELN")) {
            sentenciaWrite(WRITELN);
        } else if (identificador.toUpperCase().equals("READ")) {
            sentenciaRead(READ);
        } else if (identificador.toUpperCase().equals("READLN")) {
            sentenciaRead(READLN);
        } else {
            ultimoToken = alex.getToken();
            if (TdS.pertenece(identificador)) {
                idObj = TdS.getEntrada(identificador);
            } else {
                throw new ExcepcionErrorSemantico("En linea: " + ultimoToken.getLinea() + ". El identificador " + identificador + " no está declarado");
            }
            if (ultimoToken.isToken(Token.PARABRE)) {
                if (idObj != null) {
                    if (idObj.esProcedimiento()) /*|| idObj.esFuncion()*/
                    {
                        // Debe ser una llamada a procedimiento
                        sentenciaProcedimientoFuncion(idObj);
                        if ((ultimoToken.isToken(Token.IDENTIFICADOR)) || (ultimoToken.isToken(Token.NUMERO))) {
                            // suponemos que falta un operador de asignacion entre ambos
                            throw new ExcepcionErrorSintactico("Se esperaba ':=' en linea " + ultimoToken.getLinea());
                        }
                    } else {
                        throw new ExcepcionErrorSemantico("En linea: " + ultimoToken.getLinea() + ". Se esperaba identificador de procedimiento");
                    }
                } else {
                    throw new ExcepcionErrorSemantico("En linea: " + ultimoToken.getLinea() + ". El identificador " + identificador + " no corresponde a un idenficador de procedimiento o funcion");
                }
            } else if (ultimoToken.isToken(Token.OPASIGN)) {
                // Verifico si es una asignacion
                sentenciaAsignacion(identificador);
            } else if (ultimoToken.isToken(Token.CORABRE)) {
                if (idObj.esVariable()) {
                    if (((Variable) idObj).getTipo().esArreglo()) {
                        Arreglo a = ((Arreglo) (((Variable) idObj).getTipo()));
                        sentenciaArreglo(a);
                        // normalizo el indice del arreglo destino
                        MepaH.generarInstruccion("CONT " + ((Arreglo) ((Variable) idObj).getTipo()).getli() + " , " + ((Arreglo) ((Variable) idObj).getTipo()).getls());
                        MepaH.generarInstruccion("APCT " + ((Arreglo) ((Variable) idObj).getTipo()).getli());
                        MepaH.generarInstruccion("SUST");
                        if (ultimoToken.isToken(Token.OPASIGN)) {
                            // Verifico si es una asignacion
                            sentenciaAsignacionElemArreglo(identificador);
                        } else if ((ultimoToken.isToken(Token.IDENTIFICADOR)) || (ultimoToken.isToken(Token.NUMERO))) {
                            // suponemos que falta un operador de asignacion entre ambos
                            throw new ExcepcionErrorSintactico("Se esperaba ':=' en linea " + ultimoToken.getLinea());
                        }
                    } else {
                        throw new ExcepcionErrorSemantico("En linea: " + ultimoToken.getLinea() + ". Se esperaba identificador de tipo arreglo");
                    }
                } else if (idObj.esParametro()) {
                    if (((ParametroFormal) idObj).getTipo().esArreglo()) {
                        Arreglo a = ((Arreglo) (((ParametroFormal) idObj).getTipo()));
                        sentenciaArreglo(a);
                        // normalizo el indice del arreglo destino
                        MepaH.generarInstruccion("CONT " + ((Arreglo) ((ParametroFormal) idObj).getTipo()).getli() + " , " + ((Arreglo) ((ParametroFormal) idObj).getTipo()).getls());
                        MepaH.generarInstruccion("APCT " + ((Arreglo) ((ParametroFormal) idObj).getTipo()).getli());
                        MepaH.generarInstruccion("SUST");
                        if (ultimoToken.isToken(Token.OPASIGN)) {
                            // Verifico si es una asignacion
                            sentenciaAsignacionElemArreglo(identificador);
                        } else if ((ultimoToken.isToken(Token.IDENTIFICADOR)) || (ultimoToken.isToken(Token.NUMERO))) {
                            // suponemos que falta un operador de asignacion entre ambos
                            throw new ExcepcionErrorSintactico("Se esperaba ':=' en linea " + ultimoToken.getLinea());
                        }
                    } else {
                        throw new ExcepcionErrorSemantico("En linea: " + ultimoToken.getLinea() + ". Se esperaba identificador de tipo arreglo");
                    }
                }
            } else if (ultimoToken.isToken(Token.PUNTOCOMA)) {
                if (idObj.esProcedimiento()) {
                    if (((Procedimiento) idObj).getCantidadParametros() == 0) {
                        MepaH.generarInstruccion("LLPR " + "l" + ((Procedimiento) idObj).getEtiqueta());
                    } else {
                        throw new ExcepcionErrorSemantico("En linea: " + ultimoToken.getLinea() + ". Parametros insuficientes");
                    }
                } else {
                    throw new ExcepcionErrorSemantico("En linea: " + ultimoToken.getLinea() + ". Se esperaba identificador de procedimiento");
                }
            } else if ((ultimoToken.isToken(Token.IDENTIFICADOR)) || (ultimoToken.isToken(Token.NUMERO))) {
                // suponemos que falta un operador de asignacion entre ambos
                throw new ExcepcionErrorSintactico("Se esperaba ':=' en linea " + ultimoToken.getLinea());
            }
        }
    } else if (ultimoToken.isToken(Token.WHILE)) {
        // es el bucle de repetición, controlo sintaxis en el método
        BucleRepetir();
    } else if (ultimoToken.isToken(Token.IF)) {
        // es una sentencia condicional
        SentenciaCondicional();
    } else if (ultimoToken.isToken(Token.ELSE)) {
        throw new ExcepcionErrorSintactico("Se esperaba sentencia en linea: " + ultimoToken.getLinea() + ". Se encontro 'else'");
    }
}
