@Override
public double updateVmsProcessing(double currentTime) {
    double smallerTime = super.updateVmsProcessing(currentTime);
    setPreviousUtilizationMips(getUtilizationMips());
    setUtilizationMips(0);
    double hostTotalRequestedMips = 0;
    for (Vm vm : getVmList()) {
        getVmScheduler().deallocatePesForVm(vm);
    }
    for (Vm vm : getVmList()) {
        getVmScheduler().allocatePesForVm(vm, vm.getCurrentRequestedMips());
    }
    for (Vm vm : getVmList()) {
        double totalRequestedMips = vm.getCurrentRequestedTotalMips();
        // if (totalRequestedMips == 0) {
        // Log.printLine("VM #" + vm.getId() + " has completed its execution and destroyed");
        // continue;
        // }
        double totalAllocatedMips = getVmScheduler().getTotalAllocatedMipsForVm(vm);
        if (!Log.isDisabled()) {
            Log.formatLine("%.2f: [Host #" + getId() + "] Total allocated MIPS for VM #" + vm.getId() + " (Host #" + vm.getHost().getId() + ") is %.2f, was requested %.2f out of total %.2f (%.2f%%)", CloudSim.clock(), totalAllocatedMips, totalRequestedMips, vm.getMips(), totalRequestedMips / vm.getMips() * 100);
            List<Pe> pes = getVmScheduler().getPesAllocatedForVM(vm);
            StringBuilder pesString = new StringBuilder();
            for (Pe pe : pes) {
                pesString.append(String.format(" PE #" + pe.getId() + ": %.2f.", pe.getPeProvisioner().getTotalAllocatedMipsForVm(vm)));
            }
            Log.formatLine("%.2f: [Host #" + getId() + "] MIPS for VM #" + vm.getId() + " by PEs (" + getPesNumber() + " * " + getVmScheduler().getPeCapacity() + ")." + pesString, CloudSim.clock());
        }
        if (getVmsMigratingIn().contains(vm)) {
            Log.formatLine("%.2f: [Host #" + getId() + "] VM #" + vm.getId() + " is being migrated to Host #" + getId(), CloudSim.clock());
        } else {
            if (totalAllocatedMips + 0.1 < totalRequestedMips) {
                Log.formatLine("%.2f: [Host #" + getId() + "] Under allocated MIPS for VM #" + vm.getId() + ": %.2f", CloudSim.clock(), totalRequestedMips - totalAllocatedMips);
            }
            vm.addStateHistoryEntry(currentTime, totalAllocatedMips, totalRequestedMips, (vm.isInMigration() && !getVmsMigratingIn().contains(vm)));
            if (vm.isInMigration()) {
                Log.formatLine("%.2f: [Host #" + getId() + "] VM #" + vm.getId() + " is in migration", CloudSim.clock());
                // performance degradation due to migration - 10%
                totalAllocatedMips /= 0.9;
            }
        }
        setUtilizationMips(getUtilizationMips() + totalAllocatedMips);
        hostTotalRequestedMips += totalRequestedMips;
    }
    addStateHistoryEntry(currentTime, getUtilizationMips(), hostTotalRequestedMips, (getUtilizationMips() > 0));
    return smallerTime;
}
