public String exposeAsXml() throws SQLException {
    StringBuffer xmlBuf = new StringBuffer();
    // $NON-NLS-1$
    xmlBuf.append("<ConnectionProperties>");
    int numPropertiesToSet = PROPERTY_LIST.size();
    int numCategories = PROPERTY_CATEGORIES.length;
    Map propertyListByCategory = new HashMap();
    for (int i = 0; i < numCategories; i++) {
        propertyListByCategory.put(PROPERTY_CATEGORIES[i], new Map[] { new TreeMap(), new TreeMap() });
    }
    // 
    // The following properties are not exposed as 'normal' properties, but
    // they are
    // settable nonetheless, so we need to have them documented, make sure
    // that they sort 'first' as #1 and #2 in the category
    // 
    StringConnectionProperty userProp = new StringConnectionProperty(NonRegisteringDriver.USER_PROPERTY_KEY, null, // $NON-NLS-1$ //$NON-NLS-2$
    Messages.getString("ConnectionProperties.Username"), // $NON-NLS-1$ //$NON-NLS-2$
    Messages.getString("ConnectionProperties.allVersions"), // $NON-NLS-1$ //$NON-NLS-2$
    CONNECTION_AND_AUTH_CATEGORY, Integer.MIN_VALUE + 1);
    StringConnectionProperty passwordProp = new StringConnectionProperty(NonRegisteringDriver.PASSWORD_PROPERTY_KEY, null, // $NON-NLS-1$ //$NON-NLS-2$
    Messages.getString("ConnectionProperties.Password"), // $NON-NLS-1$ //$NON-NLS-2$
    Messages.getString("ConnectionProperties.allVersions"), CONNECTION_AND_AUTH_CATEGORY, Integer.MIN_VALUE + 2);
    Map[] connectionSortMaps = (Map[]) propertyListByCategory.get(CONNECTION_AND_AUTH_CATEGORY);
    TreeMap userMap = new TreeMap();
    userMap.put(userProp.getPropertyName(), userProp);
    connectionSortMaps[0].put(new Integer(userProp.getOrder()), userMap);
    TreeMap passwordMap = new TreeMap();
    passwordMap.put(passwordProp.getPropertyName(), passwordProp);
    connectionSortMaps[0].put(new Integer(passwordProp.getOrder()), passwordMap);
    try {
        for (int i = 0; i < numPropertiesToSet; i++) {
            java.lang.reflect.Field propertyField = (java.lang.reflect.Field) PROPERTY_LIST.get(i);
            ConnectionProperty propToGet = (ConnectionProperty) propertyField.get(this);
            Map[] sortMaps = (Map[]) propertyListByCategory.get(propToGet.getCategoryName());
            int orderInCategory = propToGet.getOrder();
            if (orderInCategory == Integer.MIN_VALUE) {
                sortMaps[1].put(propToGet.getPropertyName(), propToGet);
            } else {
                Integer order = new Integer(orderInCategory);
                Map orderMap = (Map) sortMaps[0].get(order);
                if (orderMap == null) {
                    orderMap = new TreeMap();
                    sortMaps[0].put(order, orderMap);
                }
                orderMap.put(propToGet.getPropertyName(), propToGet);
            }
        }
        for (int j = 0; j < numCategories; j++) {
            Map[] sortMaps = (Map[]) propertyListByCategory.get(PROPERTY_CATEGORIES[j]);
            Iterator orderedIter = sortMaps[0].values().iterator();
            Iterator alphaIter = sortMaps[1].values().iterator();
            // $NON-NLS-1$
            xmlBuf.append("\n <PropertyCategory name=\"");
            xmlBuf.append(PROPERTY_CATEGORIES[j]);
            // $NON-NLS-1$
            xmlBuf.append("\">");
            while (orderedIter.hasNext()) {
                Iterator orderedAlphaIter = ((Map) orderedIter.next()).values().iterator();
                while (orderedAlphaIter.hasNext()) {
                    ConnectionProperty propToGet = (ConnectionProperty) orderedAlphaIter.next();
                    // $NON-NLS-1$
                    xmlBuf.append("\n  <Property name=\"");
                    xmlBuf.append(propToGet.getPropertyName());
                    // $NON-NLS-1$
                    xmlBuf.append("\" required=\"");
                    // $NON-NLS-1$ //$NON-NLS-2$
                    xmlBuf.append(propToGet.required ? "Yes" : "No");
                    // $NON-NLS-1$
                    xmlBuf.append("\" default=\"");
                    if (propToGet.getDefaultValue() != null) {
                        xmlBuf.append(propToGet.getDefaultValue());
                    }
                    // $NON-NLS-1$
                    xmlBuf.append("\" sortOrder=\"");
                    xmlBuf.append(propToGet.getOrder());
                    // $NON-NLS-1$
                    xmlBuf.append("\" since=\"");
                    xmlBuf.append(propToGet.sinceVersion);
                    // $NON-NLS-1$
                    xmlBuf.append("\">\n");
                    // $NON-NLS-1$
                    xmlBuf.append("    ");
                    xmlBuf.append(propToGet.description);
                    // $NON-NLS-1$
                    xmlBuf.append("\n  </Property>");
                }
            }
            while (alphaIter.hasNext()) {
                ConnectionProperty propToGet = (ConnectionProperty) alphaIter.next();
                // $NON-NLS-1$
                xmlBuf.append("\n  <Property name=\"");
                xmlBuf.append(propToGet.getPropertyName());
                // $NON-NLS-1$
                xmlBuf.append("\" required=\"");
                // $NON-NLS-1$ //$NON-NLS-2$
                xmlBuf.append(propToGet.required ? "Yes" : "No");
                // $NON-NLS-1$
                xmlBuf.append("\" default=\"");
                if (propToGet.getDefaultValue() != null) {
                    xmlBuf.append(propToGet.getDefaultValue());
                }
                // $NON-NLS-1$
                xmlBuf.append("\" sortOrder=\"alpha\" since=\"");
                xmlBuf.append(propToGet.sinceVersion);
                // $NON-NLS-1$
                xmlBuf.append("\">\n");
                // $NON-NLS-1$
                xmlBuf.append("    ");
                xmlBuf.append(propToGet.description);
                // $NON-NLS-1$
                xmlBuf.append("\n  </Property>");
            }
            // $NON-NLS-1$
            xmlBuf.append("\n </PropertyCategory>");
        }
    } catch (IllegalAccessException iae) {
        throw // $NON-NLS-1$
        SQLError.createSQLException(// $NON-NLS-1$
        "Internal properties failure", SQLError.SQL_STATE_GENERAL_ERROR, getExceptionInterceptor());
    }
    // $NON-NLS-1$
    xmlBuf.append("\n</ConnectionProperties>");
    return xmlBuf.toString();
}
