public final void mURI_OR_IMPLIES(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
    int _ttype;
    Token _token = null;
    int _begin = text.length();
    _ttype = URI_OR_IMPLIES;
    int _saveIndex;
    boolean synPredMatched74 = false;
    if (((LA(1) == '<') && (LA(2) == '=') && (LA(3) == '>'))) {
        int _m74 = mark();
        synPredMatched74 = true;
        inputState.guessing++;
        try {
            {
                mARROW_MEANS(false);
            }
        } catch (RecognitionException pe) {
            synPredMatched74 = false;
        }
        rewind(_m74);
        inputState.guessing--;
    }
    if (synPredMatched74) {
        mARROW_MEANS(false);
        if (inputState.guessing == 0) {
            _ttype = ARROW_MEANS;
        }
    } else {
        boolean synPredMatched72 = false;
        if (((LA(1) == '<') && (LA(2) == '=') && (true))) {
            int _m72 = mark();
            synPredMatched72 = true;
            inputState.guessing++;
            try {
                {
                    mARROW_L(false);
                }
            } catch (RecognitionException pe) {
                synPredMatched72 = false;
            }
            rewind(_m72);
            inputState.guessing--;
        }
        if (synPredMatched72) {
            mARROW_L(false);
            if (inputState.guessing == 0) {
                _ttype = ARROW_L;
            }
        } else if ((LA(1) == '<') && (_tokenSet_0.member(LA(2))) && (true)) {
            mURIREF(false);
            if (inputState.guessing == 0) {
                _ttype = URIREF;
            }
        } else {
            throw new NoViableAltForCharException((char) LA(1), getFilename(), getLine(), getColumn());
        }
    }
    if (_createToken && _token == null && _ttype != Token.SKIP) {
        _token = makeToken(_ttype);
        _token.setText(new String(text.getBuffer(), _begin, text.length() - _begin));
    }
    _returnToken = _token;
}
