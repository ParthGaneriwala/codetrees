protected void injectLdifs(DirectoryService service, InheritableKdcServerSettings settings) throws Exception {
    List<String> ldifs = new ArrayList<String>();
    List<String> ldifFiles = new ArrayList<String>();
    ServerPartitionFactory partitionFactory = settings.getPartitionFactory();
    List<Partition> partitions = partitionFactory.getPartitions();
    getContext().setPartitions(partitions);
    for (Partition partition : partitions) {
        partition.init(service);
        service.addPartition(partition);
    }
    // First inject the LDIF files if any
    ldifFiles = settings.getLdifFiles(ldifFiles);
    if (ldifFiles.size() != 0) {
        for (String ldifFile : ldifFiles) {
            String className = settings.getParent().getDescription().getDisplayName();
            if (className == null) {
                String message = "Cannot inject a LDIF file with a null name";
                LOG.error(message);
                throw new FileNotFoundException(message);
            }
            Class<?> clazz = null;
            try {
                clazz = Class.forName(className);
            } catch (ClassNotFoundException cnfe) {
                String message = "Cannot inject a LDIF file for this class : " + className;
                LOG.error(message);
                throw new FileNotFoundException(message);
            }
            InputStream in = clazz.getResourceAsStream(ldifFile);
            if (in == null) {
                String message = "Cannot inject a LDIF for the file " + ldifFile;
                LOG.error(message);
                throw new FileNotFoundException(message);
            }
            LdifReader ldifReader = new LdifReader(in);
            for (LdifEntry entry : ldifReader) {
                service.getAdminSession().add(new DefaultServerEntry(service.getRegistries(), entry.getEntry()));
                LOG.debug("Successfully injected LDIF enry for test {}: {}", settings.getDescription(), entry);
            }
        }
    }
    ldifs = settings.getLdifs(ldifs);
    if (ldifs.size() != 0) {
        for (String ldif : ldifs) {
            StringReader in = new StringReader(ldif);
            LdifReader ldifReader = new LdifReader(in);
            for (LdifEntry entry : ldifReader) {
                service.getAdminSession().add(new DefaultServerEntry(service.getRegistries(), entry.getEntry()));
                LOG.debug("Successfully injected LDIF enry for test {}: {}", settings.getDescription(), entry);
            }
        }
    }
}
