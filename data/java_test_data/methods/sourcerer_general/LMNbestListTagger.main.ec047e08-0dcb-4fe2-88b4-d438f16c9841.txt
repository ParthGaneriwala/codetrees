public static void main(String[] args) throws DatabaseException, IOException, ClassNotFoundException {
    final MemoryMXBean memoryBean = ManagementFactory.getMemoryMXBean();
    MemoryUsage memuse;
    OptionParser optParser = new OptionParser(Options.class);
    final Options opts = (Options) optParser.parse(args, true);
    LMDecodingOptions lmOpts = new LMDecodingOptions();
    lmOpts.config = opts.config;
    lmOpts.debug = opts.debug;
    if (opts.jobs > 0)
        lmOpts.jobs = opts.jobs;
    if (opts.host != null)
        lmOpts.host = opts.host;
    if (opts.port > 0)
        lmOpts.port = opts.port;
    if (opts.coarse > 0)
        lmOpts.coarseThreshold = opts.coarse;
    if (opts.forest != null)
        lmOpts.forest = opts.forest;
    if (opts.host != null && opts.port > 0)
        lmOpts.storage = LMDecodingOptions.Storage.REMOTE;
    if (opts.meminfo) {
        memuse = memoryBean.getHeapMemoryUsage();
        System.out.printf("MEMUSE: initial: %dM/%dM\n", memuse.getUsed() / 1048576, memuse.getMax() / 1048576);
    }
    LanguageModel.initDecoding(lmOpts);
    Experiment.initialize(opts.config);
    Experiment experiment = Experiment.getInstance();
    if (opts.meminfo) {
        memuse = memoryBean.getHeapMemoryUsage();
        System.out.printf("MEMUSE: after Experiment.initialize(): %dM/%dM\n", memuse.getUsed() / 1048576, memuse.getMax() / 1048576);
    }
    experiment.setDebugDecoder(opts.debug);
    JobManager.initialize(opts.jobs);
    Thread thread = new Thread(JobManager.getInstance(), "Job Manager");
    thread.setDaemon(true);
    thread.start();
    experiment.buildPrefixes();
    experiment.buildWordPrefixes();
    if (opts.meminfo) {
        memuse = memoryBean.getHeapMemoryUsage();
        System.out.printf("MEMUSE: after building prefixes: %dM/%dM\n", memuse.getUsed() / 1048576, memuse.getMax() / 1048576);
    }
    final InputParser parser = new PlainInputParser(experiment.getTupleDescription());
    {
        long[] endTuples = new long[1];
        endTuples[0] = experiment.getTupleDescription().createEndTuple();
        parser.setEndTuples(endTuples);
    }
    final ForestModel forest = experiment.getForest(opts.forest);
    final MutableInteger extraWords = new MutableInteger(0);
    if (parser.getStartTuples() != null) {
        extraWords.set(extraWords.intValue() + parser.getStartTuples().length);
    }
    if (parser.getEndTuples() != null) {
        extraWords.set(extraWords.intValue() + parser.getEndTuples().length);
    }
    final DataSequencer<NbestFormatData> sequencer = new DataSequencer<NbestFormatData>(1);
    final Dictionary tagDictionary = experiment.getTupleDescription().getDictionary("T");
    final Tagger tagger = opts.viterbi ? new ViterbiTagger(forest.getDecoder(), 10000, "T") : new VariationalTagger(forest.getDecoder(), 1000, "T");
    class EvalRunnable implements Runnable {

        Pair<Integer, NbestFormatData> pair;

        public EvalRunnable(int sentNo, NbestFormatData line) {
            pair = new Pair<Integer, NbestFormatData>(sentNo, line);
        }

        public void run() {
            long[] sentence = parser.parseSentence(pair.getSecond().getSentence());
            ArrayList<String> words = parser.parseSentenceToWords(pair.getSecond().getSentence());
            Pair<SortedSet<? extends TaggedPath>, Double> result = tagger.evaluateSentence(sentence);
            SortedSet<? extends TaggedPath> nbestTags = result.getFirst();
            // ArrayList<ViterbiPath> bestTags = new ArrayList<ViterbiPath>(nbestTags);
            int[] tags = nbestTags.last().getOrderedTags();
            StringBuilder sb = new StringBuilder();
            int firstWord = forest.getOrder();
            for (int i = firstWord - 1; i < tags.length - 1; ++i) {
                sb.append(words.get(i - firstWord + 1));
                sb.append('/');
                sb.append(tagDictionary.getWord(tags[i]));
                sb.append(' ');
            }
            pair.getSecond().setSentence(sb.toString());
            sequencer.putItem(pair);
            if (opts.meminfo) {
                MemoryUsage memuse = memoryBean.getHeapMemoryUsage();
                System.out.printf("MEMUSE: after evaluating sentence %s: %dM/%dM\n", pair.getFirst().toString(), memuse.getUsed() / 1048576, memuse.getMax() / 1048576);
            // System.out.println("STATS: " + eval.getStatistics());
            }
        }
    }
    DecoderCompactProbTree emptyTree = DecoderCompactProbTree.constructEmptyTree(Experiment.getInstance().getHFT().getTree());
    DecoderCompactProbTree.setEmptyTree(emptyTree);
    experiment.closeXML();
    Timer timer = null;
    if (opts.meminfo) {
        memuse = memoryBean.getHeapMemoryUsage();
        System.out.printf("MEMUSE: after experiment.closeXML(): %dM/%dM\n", memuse.getUsed() / 1048576, memuse.getMax() / 1048576);
        timer = new Timer(true);
        TimerTask task = new TimerTask() {

            public void run() {
                MemoryUsage memuse = memoryBean.getHeapMemoryUsage();
                DateFormat df = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.LONG);
                System.out.printf("MEMUSE: %s: %dM/%dM\n", df.format(new Date()), memuse.getUsed() / 1048576, memuse.getMax() / 1048576);
            }
        };
        timer.scheduleAtFixedRate(task, 0, 10000);
    }
    try {
        BufferedReader reader = new BufferedReader(new InputStreamReader(opts.input == null ? System.in : new FileInputStream(opts.input), Charset.forName("UTF-8")));
        {
            File outDir = new File(opts.output);
            if (!outDir.exists()) {
                if (!outDir.mkdir()) {
                    System.err.printf("failed to create output directory: %s\n", outDir.getPath());
                    System.exit(1);
                }
            }
        }
        JobManager manager = JobManager.getInstance();
        JobGroup group = manager.createJobGroup("decoding");
        for (String fname = reader.readLine(); fname != null; fname = reader.readLine()) {
            try {
                File file = new File(fname);
                InputStream in = IO.getInputStream(file);
                NbestFile nbest = NbestFile.readFile(in);
                int lineNo = 0;
                for (NbestFormatData data : nbest.getItems()) {
                    Job job = new Job(new EvalRunnable(++lineNo, data), "decoding sentence #" + Integer.toString(lineNo));
                    manager.addJob(group, job);
                }
                in.close();
                group.join();
                File outFile = new File(opts.output, file.getName());
                OutputStream out = IO.getOutputStream(outFile);
                nbest.writeFile(out);
                out.close();
                System.out.printf("done rescoring %s\n", file.getName());
            } catch (Exception e) {
                System.out.printf("Error processing file %s\n", fname);
                e.printStackTrace(System.out);
            }
        }
    } catch (IOException e) {
        e.printStackTrace();
    }
}
