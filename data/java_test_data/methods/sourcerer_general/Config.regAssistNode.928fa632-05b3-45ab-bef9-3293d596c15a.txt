public static void regAssistNode() {
    Config.printlnASS("ע��Э���ڵ�");
    int tryTimes = 0;
    while (true) {
        if (Config.myNodeType == Config.nodeType_PubNet & regSelfAssist) {
            Config.printlnASS("ע�᱾��ΪЭ���ڵ�");
            Config.assistNodeIp = Config.outIp;
            Config.assistNodePort = Config.AssistServerPort;
        } else {
            // ���������ѯЭ���ڵ��ַ
            byte[] b = new byte[100];
            DatagramPacket dp = new DatagramPacket(b, b.length);
            DatagramSocket ds = null;
            try {
                ds = new DatagramSocket();
                ds.setSoTimeout(3000);
            } catch (SocketException e) {
                e.printStackTrace();
            }
            GetSNodeMessage gsm = new GetSNodeMessage();
            gsm.setDstAddress(Config.cIp);
            gsm.setDstPort(Config.cPort);
            while (true) {
                tryTimes++;
                Config.printlnASS("���Ե�" + tryTimes + "�λ�ȡЭ���ڵ��ַ");
                try {
                    ds.send(gsm.getDatagramPacket());
                } catch (IOException e) {
                    e.printStackTrace();
                }
                try {
                    ds.receive(dp);
                } catch (IOException e) {
                    Config.printlnASS("��ȡЭ������ַ��ʱ");
                }
                if (MessageCheck.checkSType(dp) == peer.tools.MessageType.sType_GetSNodeMessage2) {
                    GetOutAddressMessage2 goam2 = new GetOutAddressMessage2(dp);
                    InetAddress in = null;
                    try {
                        in = InetAddress.getByName("0.0.0.0");
                    } catch (UnknownHostException e) {
                        e.printStackTrace();
                    }
                    if (goam2.getOutIp().equals(in)) {
                        try {
                            Thread.sleep(3000);
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                        continue;
                    }
                    Config.assistNodeIp = goam2.getOutIp();
                    Config.assistNodePort = goam2.getOutPort();
                    Config.printlnASS("�ɹ���ȡЭ���ڵ��ַ " + Config.assistNodeIp + ":" + Config.assistNodePort);
                    break;
                }
            }
        }
        // ע���ѯ����Э�����
        byte[] b = new byte[100];
        DatagramPacket dp = new DatagramPacket(b, b.length);
        DatagramSocket ds2 = null;
        try {
            ds2 = new DatagramSocket();
        } catch (SocketException e) {
            e.printStackTrace();
        }
        try {
            ds2.setSoTimeout(3000);
        } catch (SocketException e1) {
            e1.printStackTrace();
        }
        peer.assist.message.RegMessage rm = new peer.assist.message.RegMessage(Config.outIp, Config.outPort, lanIp, RoutePort);
        rm.setDstAddress(Config.assistNodeIp);
        rm.setDstPort(Config.assistNodePort);
        int tryTimes2 = 0;
        while (tryTimes2 < 3) {
            tryTimes2++;
            Config.printlnASS("���Ե�" + tryTimes2 + "��ע��");
            try {
                ds2.send(rm.getDatagramPacket());
            } catch (IOException e) {
                e.printStackTrace();
            }
            try {
                ds2.receive(dp);
            } catch (IOException e) {
                Config.printlnASS("ע��Э����㳬ʱ");
                if (tryTimes2 == 3) {
                    Config.printlnASS("ע��Э�����ʧ��");
                    break;
                } else {
                    continue;
                }
            }
            if (MessageCheck.checkSType(dp) == peer.tools.MessageType.sType_Assist_RegMessage2) {
                peer.assist.message.RegMessage2 rm2 = new peer.assist.message.RegMessage2(dp);
                Config.assistSessionId = rm2.getSessionId();
                Config.lSni = new SourceNodeIdent(Config.assistSessionId, Config.assistNodeIp, Config.assistNodePort);
                ds2.close();
                Config.printlnASS("�ɹ�ע��Э�����" + Config.assistNodeIp + ":" + Config.assistNodePort + " " + Config.assistSessionId);
                isReg = true;
                // ����Э���ͻ���
                assistClient = new AssistClient();
                return;
            } else {
                continue;
            }
        }
    }
}
