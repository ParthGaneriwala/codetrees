void initFromMMAttribute(String s, MMAttribute mmattribute, ObjectDef objectdef) {
    mObjectDef = objectdef;
    String s1 = (String) mmattribute.getProperty("http://xmlns.oracle.com/jrad/dt", MMConstants.ADDIN_DISPLAY_NAME_ATTR);
    if (s1 != null && !s1.equals(""))
        mDisplayName = s1;
    String s2 = (String) mmattribute.getProperty("http://xmlns.oracle.com/jrad/dt", MMConstants.ADDIN_DISPLAY_NAME_KEY_ATTR);
    if (s2 != null && !s2.equals(""))
        mDisplayNameKey = s2;
    String s3 = (String) mmattribute.getProperty("http://xmlns.oracle.com/jrad/dt", MMConstants.ADDIN_CATEGORY_ATTR);
    if (s3 != null && !s3.equals(""))
        mGroupName = s3;
    String s4 = (String) mmattribute.getProperty("http://xmlns.oracle.com/jrad/dt", MMConstants.ADDIN_CATEGORY_KEY_ATTR);
    if (s4 != null && !s4.equals(""))
        mGroupNameKey = s4;
    String s5 = (String) mmattribute.getProperty("http://xmlns.oracle.com/jrad/dt", MMConstants.TRANSLATABLE_ATTR);
    if (s5 != null && s5.equals("true"))
        mTranslatable = true;
    String s6 = (String) mmattribute.getProperty("http://xmlns.oracle.com/jrad/dt", MMConstants.CUSTOMIZATION_SCOPE_ATTR);
    if (s6 != null && !s6.equals(""))
        mCustomizationScope = s6;
    String s7 = (String) mmattribute.getProperty("http://xmlns.oracle.com/jrad/dt", MMConstants.ADDIN_SHORT_DESC_KEY_ATTR);
    String s8 = "";
    if (s7 != null && !s7.equals(""))
        s8 = getDescriptionFromKey(s7);
    if (s8 == null)
        s8 = "";
    if (s8.endsWith("."))
        s8 = s8 + " ";
    if (!s8.endsWith(". ") && !s8.equals(""))
        s8 = s8 + ". ";
    mDescription = formatDescription(s8, s, isTranslatable());
    String s9 = (String) mmattribute.getProperty(MMConstants.REQUIRED_ATTR);
    if (s9 != null && (s9.equalsIgnoreCase("true") || s9.equalsIgnoreCase("yes")))
        mRequired = true;
    String s10 = (String) mmattribute.getProperty("http://xmlns.oracle.com/jrad/dt", MMConstants.ADDIN_VISIBLE_ATTR);
    if (s10 != null && (s10.equalsIgnoreCase("false") || s10.equalsIgnoreCase("no")))
        mVisible = false;
    String s11 = (String) mmattribute.getProperty("http://xmlns.oracle.com/jrad/dt", MMConstants.ADDIN_EDITABLE_ATTR);
    if (s11 != null && (s11.equalsIgnoreCase("false") || s11.equalsIgnoreCase("no")))
        mEditable = false;
    String s12 = (String) mmattribute.getProperty("http://xmlns.oracle.com/jrad/dt", MMConstants.ADDIN_MAXLENGTH_ATTR);
    if (s12 != null && !s12.equals("") && MDSMetadataManager.isValidNumberString(s12)) {
        Integer integer = new Integer(s12);
        mMaxLength = integer.intValue();
    }
    String s13 = (String) mmattribute.getProperty("http://xmlns.oracle.com/jrad/xsd", MMConstants.BASIC_TYPE_ATTR);
    if (s13 != null && !s13.equals(""))
        if (s13.equalsIgnoreCase("boolean")) {
            mPropertyType = 2;
            createBooleanAllowedList();
        } else if (s13.equalsIgnoreCase("decimal") || s13.equalsIgnoreCase("integer")) {
            mPropertyType = 1;
            mAllowEmpty = false;
        } else if (s13.equalsIgnoreCase("string") || s13.equalsIgnoreCase("anyURI") || s13.equalsIgnoreCase("QName"))
            mPropertyType = 0;
    String s14 = (String) mmattribute.getProperty("http://xmlns.oracle.com/jrad/dt", MMConstants.ADDIN_ALLOW_EMPTY_ATTR);
    if (s14 != null && (s14.equalsIgnoreCase("false") || s14.equalsIgnoreCase("no")))
        mAllowEmpty = false;
    String s15 = (String) mmattribute.getProperty("http://xmlns.oracle.com/jrad/xsd", MMConstants.XSD_TYPE_ATTR);
    if (s15 != null && !s15.equals("")) {
        if (s15.equalsIgnoreCase("nonNegativeInteger") || s15.equalsIgnoreCase("unsignedInt"))
            mMinValue = new String("0");
        if (s15.equalsIgnoreCase("negOneOrMoreInt"))
            mMinValue = new String("-1");
    }
    String s16 = (String) mmattribute.getProperty("http://xmlns.oracle.com/jrad/xsd", MMConstants.ENUMERATED_VALUES_ATTR);
    if (s16 != null && !s16.equals("")) {
        mPropertyEditorType = 2;
        ArrayList arraylist = new ArrayList();
        int i = 0;
        do {
            int j = s16.indexOf('|', i);
            String s21 = null;
            if (j >= 0)
                s21 = s16.substring(i, j);
            else
                s21 = s16.substring(i);
            arraylist.add(s21);
            if (j < 0 || j + 1 == s16.length())
                break;
            i = j + 1;
        } while (true);
        String[] as = new String[arraylist.size()];
        for (int k = 0; k < arraylist.size(); k++) as[k] = (String) arraylist.get(k);
        mAllowedValueList = new PropertyValueMap(as);
    }
    String s17 = (String) mmattribute.getProperty("http://xmlns.oracle.com/jrad/dt", MMConstants.DEFAULT_VALUE_ATTR);
    if (s17 != null) {
        mDefaultValue = s17;
    } else {
        String s18 = (String) mmattribute.getProperty("http://xmlns.oracle.com/jrad/xsd", MMConstants.DEFAULT_ATTR);
        if (s18 != null)
            mDefaultValue = s18;
    }
    String s19 = (String) mmattribute.getProperty("http://xmlns.oracle.com/jrad/dt", MMConstants.DEVELOPER_DOC_TAG_ATTR);
    if (s19 != null && !s19.equals(""))
        mDeveloperDocTag = s19;
    String s20 = (String) mmattribute.getProperty("http://xmlns.oracle.com/jrad/dt", MMConstants.ADDIN_MAXVALUE_ATTR);
    if (s20 != null)
        mMaxValue = s20;
    String s22 = (String) mmattribute.getProperty("http://xmlns.oracle.com/jrad/dt", MMConstants.ADDIN_MINVALUE_ATTR);
    if (s22 != null)
        mMinValue = s22;
    String s23 = (String) mmattribute.getProperty("http://xmlns.oracle.com/jrad/xsd", MMConstants.FIXED_ATTR);
    if (s23 != null) {
        setFixedValue(s23);
        setEditable(false);
    }
    String s24 = (String) mmattribute.getProperty("http://xmlns.oracle.com/jrad/dt", MMConstants.ADDIN_DISPLAY_ORDER);
    if (s24 != null && !s24.equals("") && MDSMetadataManager.isValidNumberString(s24)) {
        Integer integer1 = new Integer(s24);
        mDisplayOrder = integer1.intValue();
    }
    String s25 = (String) mmattribute.getProperty("http://xmlns.oracle.com/jrad/dt", MMConstants.ADDIN_EDITOR_TYPE_ATTR);
    if (s25 != null && !s25.equals(""))
        if (s25.equalsIgnoreCase("textField") || s25.equalsIgnoreCase("custom"))
            mPropertyEditorType = 0;
        else if (s25.equalsIgnoreCase("listType"))
            mPropertyEditorType = 2;
        else if (s25.equalsIgnoreCase("comboBox"))
            mPropertyEditorType = 6;
        else if (s25.equalsIgnoreCase("LOV"))
            mPropertyEditorType = 3;
        else if (s25.equalsIgnoreCase("dialog"))
            mPropertyEditorType = 4;
    String s26 = (String) mmattribute.getProperty("http://xmlns.oracle.com/jrad/dt", MMConstants.ADDIN_EDITOR_CLASS_ATTR);
    if (s26 != null && !s26.equals(""))
        mPropertyEditorClassName = s26;
    if ("javaClass".equals(s15) && getPropertyEditorClassName() == null)
        mPropertyEditorClassName = "oracle.adf.mds.dt.ui.ide.pi.ClassLOVEditor";
}
