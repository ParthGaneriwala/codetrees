private Posicao tellMeWhereToGoPosition(boolean aleatorio) {
    double[] inputs;
    double[] outputs;
    Vec2 golAdver = abstract_robot.getOpponentsGoal(currTime);
    Vec2 golMeu = abstract_robot.getOurGoal(currTime);
    trocaSinalX(golAdver);
    trocaSinalX(golMeu);
    // 20 entradas, duas por jogador (x e y)
    Vector<Double> inputsVector = neuralInfoOndeEstaoOsJogadores();
    inputsVector.add(neuralInfoNumJogNoAtaque());
    inputsVector.add(neuralInfoTimeComAPosseDeBola());
    inputsVector.add(neuralInfoDistJogBola());
    inputsVector.add(neuralInfoAngJogBola());
    // converte para double[]
    inputs = convertVectorToArray(inputsVector);
    if (aleatorio && (currTime / TIME_STEP % 13 == 0)) {
        // a cada 13 tentativas toma uma
        // atitude aleat�ria (se aleatorio estiver true)
        // gera sa�da aleat�ria (-0.8 ou +0.8)
        // usada no treinamento
        outputs = new double[NUM_NEURONS_SAIDA_MOVIMENTO];
        for (int i = 0; i < outputs.length; i++) {
            outputs[i] = 0.8;
            if (randomGen.nextBoolean())
                outputs[i] *= -1;
        }
    } else {
        // gera sa�da por meio da rede neural
        outputs = neuralMovim.Output(inputs);
        // para fins de treinamento
        for (int i = 0; i < outputs.length; i++) {
            if (outputs[i] > 0) {
                outputs[i] = 0.8;
            } else {
                outputs[i] = -0.8;
            }
        }
    }
    // indices dos neurons da saida da rede neural
    int indUltimoNeuronOutputX = (int) Math.ceil(Math.log(NUM_BLOCOS_X) / Math.log(2)) - 1;
    int indUltimoNeuronOutputY = indUltimoNeuronOutputX + (int) Math.ceil(Math.log(NUM_BLOCOS_Y) / Math.log(2));
    // pega posicao dos blocos a partir das sa�das da rede
    // se por acaso o �ndice for maior que o m�ximo, pegamos o resto da divis�o pelo m�ximo
    int blocoX = binaryOutputsToNumber(outputs, 0, indUltimoNeuronOutputX) % (int) NUM_BLOCOS_X;
    int blocoY = binaryOutputsToNumber(outputs, indUltimoNeuronOutputX + 1, indUltimoNeuronOutputY) % (int) NUM_BLOCOS_Y;
    // debug
    abstract_robot.setDisplayString("x=" + String.valueOf(blocoX) + ", y=" + String.valueOf(blocoY));
    // tamanho do campo;
    double deltaX = golAdver.x - golMeu.x;
    // aproximado
    double deltaY = TAM_CAMPO_Y;
    // agora vamos traduzir o n�mero do bloco para uma posi��o x e y
    Posicao retVal = new Posicao((double) (blocoX) * (deltaX / NUM_BLOCOS_X) + (deltaX / NUM_BLOCOS_X) / 2, (double) (blocoY) * (deltaY / NUM_BLOCOS_Y) + (deltaY / NUM_BLOCOS_Y) / 2);
    // vamos fazer uma transforma��o, colocando o centro do campo em (0,0)
    retVal.x = -(retVal.x - deltaX / 2);
    retVal.y = -(retVal.y - deltaY / 2);
    // debug
    // abstract_robot.setDisplayString("x=" + String.valueOf(retVal.x) + ", y=" + String.valueOf(retVal.y) );
    // dependendo do nosso lado do campo, invertemos o valor da sa�da x.
    retVal.x = retVal.x * fieldSide;
    // adicionamos entradas, sa�das e tempo atual � fila trainerDataMovim
    trainerDataMovim.add(new EntradaSaidaRede(inputs, outputs, currTime));
    return retVal;
}
