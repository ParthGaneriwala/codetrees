public Token nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;
    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;
    char[] zzCMapL = ZZ_CMAP;
    int[] zzTransL = ZZ_TRANS;
    int[] zzRowMapL = ZZ_ROWMAP;
    int[] zzAttrL = ZZ_ATTRIBUTE;
    while (true) {
        zzMarkedPosL = zzMarkedPos;
        boolean zzR = false;
        for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL; zzCurrentPosL++) {
            switch(zzBufferL[zzCurrentPosL]) {
                case '\u000B':
                case '\u000C':
                case '\u0085':
                case '\u2028':
                case '\u2029':
                    yyline++;
                    zzR = false;
                    break;
                case '\r':
                    yyline++;
                    zzR = true;
                    break;
                case '\n':
                    if (zzR)
                        zzR = false;
                    else {
                        yyline++;
                    }
                    break;
                default:
                    zzR = false;
            }
        }
        if (zzR) {
            // peek one character ahead if it is \n (if we have counted one line too much)
            boolean zzPeek;
            if (zzMarkedPosL < zzEndReadL)
                zzPeek = zzBufferL[zzMarkedPosL] == '\n';
            else if (zzAtEOF)
                zzPeek = false;
            else {
                boolean eof = zzRefill();
                zzEndReadL = zzEndRead;
                zzMarkedPosL = zzMarkedPos;
                zzBufferL = zzBuffer;
                if (eof)
                    zzPeek = false;
                else
                    zzPeek = zzBufferL[zzMarkedPosL] == '\n';
            }
            if (zzPeek)
                yyline--;
        }
        zzAction = -1;
        zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
        zzState = zzLexicalState;
        zzForAction: {
            while (true) {
                if (zzCurrentPosL < zzEndReadL)
                    zzInput = zzBufferL[zzCurrentPosL++];
                else if (zzAtEOF) {
                    zzInput = YYEOF;
                    break zzForAction;
                } else {
                    // store back cached positions
                    zzCurrentPos = zzCurrentPosL;
                    zzMarkedPos = zzMarkedPosL;
                    boolean eof = zzRefill();
                    // get translated positions and possibly new buffer
                    zzCurrentPosL = zzCurrentPos;
                    zzMarkedPosL = zzMarkedPos;
                    zzBufferL = zzBuffer;
                    zzEndReadL = zzEndRead;
                    if (eof) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        zzInput = zzBufferL[zzCurrentPosL++];
                    }
                }
                int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
                if (zzNext == -1)
                    break zzForAction;
                zzState = zzNext;
                int zzAttributes = zzAttrL[zzState];
                if ((zzAttributes & 1) == 1) {
                    zzAction = zzState;
                    zzMarkedPosL = zzCurrentPosL;
                    if ((zzAttributes & 8) == 8)
                        break zzForAction;
                }
            }
        }
        // store back cached position
        zzMarkedPos = zzMarkedPosL;
        switch(zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
            case 70:
                {
                    return new Token(Token.PAL_RES, "WRITE");
                }
            case 85:
                break;
            case 84:
                {
                    return new Token(Token.PAL_RES, "PROCEDURE");
                }
            case 86:
                break;
            case 82:
                {
                    return new Token(Token.PAL_RES, "WRITELN");
                }
            case 87:
                break;
            case 41:
                {
                    return new Token(Token.PAL_RES, "SET");
                }
            case 88:
                break;
            case 46:
                {
                    return new Token(Token.PAL_RES, "FOR");
                }
            case 89:
                break;
            case 57:
                {
                    return new Token(Token.PAL_RES, "TRUE");
                }
            case 90:
                break;
            case 58:
                {
                    return new Token(Token.PAL_RES, "TYPE");
                }
            case 91:
                break;
            case 32:
                {
                    return new Token(Token.OP_ASIG, ":=");
                }
            case 92:
                break;
            case 80:
                {
                    return new Token(Token.PAL_RES, "DISPOSE");
                }
            case 93:
                break;
            case 53:
                {
                    return new Token(Token.PAL_RES, "SUCC");
                }
            case 94:
                break;
            case 39:
                {
                    return new Token(Token.OP_LOG, "NOT");
                }
            case 95:
                break;
            case 7:
                {
                    return new Token(Token.DELIM, "(");
                }
            case 96:
                break;
            case 54:
                {
                    return new Token(Token.PAL_RES, "READ");
                }
            case 97:
                break;
            case 65:
                {
                    return new Token(Token.PAL_RES, "ARRAY");
                }
            case 98:
                break;
            case 9:
                {
                    return new Token(Token.DELIM, ")");
                }
            case 99:
                break;
            case 76:
                {
                    return new Token(Token.PAL_RES, "DOWNTO");
                }
            case 100:
                break;
            case 22:
                {
                    return new Token(Token.CADENA, new String(yytext()));
                }
            case 101:
                break;
            case 35:
                {
                    return new Token(Token.OP_COMP, ">=");
                }
            case 102:
                break;
            case 48:
                {
                    return new Token(Token.PAL_RES, "VAR");
                }
            case 103:
                break;
            case 19:
                {
                    return new Token(Token.DELIM, ",");
                }
            case 104:
                break;
            case 43:
                {
                    return new Token(Token.PAL_RES, "SHL");
                }
            case 105:
                break;
            case 49:
                {
                    return new Token(Token.PAL_RES, "ELSE");
                }
            case 106:
                break;
            case 69:
                {
                    return new Token(Token.PAL_RES, "WHILE");
                }
            case 107:
                break;
            case 38:
                {
                    return new Token(Token.PAL_RES, "NIL");
                }
            case 108:
                break;
            case 4:
                {
                    return new Token(Token.DELIM, ".");
                }
            case 109:
                break;
            case 37:
                {
                    return new Token(Token.PAL_RES, "NEW");
                }
            case 110:
                break;
            case 79:
                {
                    return new Token(Token.PAL_RES, "INTEGER");
                }
            case 111:
                break;
            case 55:
                {
                    return new Token(Token.PAL_RES, "REAL");
                }
            case 112:
                break;
            case 83:
                {
                    return new Token(Token.PAL_RES, "FUNCTION");
                }
            case 113:
                break;
            case 42:
                {
                    return new Token(Token.PAL_RES, "SHR");
                }
            case 114:
                break;
            case 61:
                {
                    return new Token(Token.PAL_RES, "WITH");
                }
            case 115:
                break;
            case 50:
                {
                    return new Token(Token.PAL_RES, "GOTO");
                }
            case 116:
                break;
            case 62:
                {
                    return new Token(Token.PAL_RES, "BEGIN");
                }
            case 117:
                break;
            case 63:
                {
                    return new Token(Token.PAL_RES, "INPUT");
                }
            case 118:
                break;
            case 17:
                {
                    return new Token(Token.DELIM, "[");
                }
            case 119:
                break;
            case 10:
                {
                    ge.setError(1, yyline + 1, "Car�cter no v�lido");
                    break;
                }
            case 120:
                break;
            case 64:
                {
                    return new Token(Token.PAL_RES, "CONST");
                }
            case 121:
                break;
            case 18:
                {
                    return new Token(Token.DELIM, "]");
                }
            case 122:
                break;
            case 44:
                {
                    return new Token(Token.PAL_RES, "ORD");
                }
            case 123:
                break;
            case 23:
                {
                    return new Token(Token.NUMREAL, new Double(yytext()));
                }
            case 124:
                break;
            case 81:
                {
                    return new Token(Token.PAL_RES, "PROGRAM");
                }
            case 125:
                break;
            case 21:
                {
                    return new Token(Token.DELIM, "^");
                }
            case 126:
                break;
            case 33:
                {
                    return new Token(Token.OP_COMP, "<=");
                }
            case 127:
                break;
            case 3:
                {
                    return new Token(Token.NUMENTERO, new Integer(yytext()));
                }
            case 128:
                break;
            case 47:
                {
                    return new Token(Token.OP_MAT, "MOD");
                }
            case 129:
                break;
            case 8:
                {
                    return new Token(Token.OP_MAT, "*");
                }
            case 130:
                break;
            case 28:
                {
                    return new Token(Token.OP_LOG, "OR");
                }
            case 131:
                break;
            case 34:
                {
                    return new Token(Token.OP_COMP, "<>");
                }
            case 132:
                break;
            case 29:
                {
                    return new Token(Token.PAL_RES, "OF");
                }
            case 133:
                break;
            case 11:
                {
                    return new Token(Token.OP_MAT, "+");
                }
            case 134:
                break;
            case 71:
                {
                    return new Token(Token.PAL_RES, "STRING");
                }
            case 135:
                break;
            case 13:
                {
                    return new Token(Token.DELIM, ":");
                }
            case 136:
                break;
            case 20:
                {
                    return new Token(Token.DELIM, ";");
                }
            case 137:
                break;
            case 74:
                {
                    return new Token(Token.PAL_RES, "REPEAT");
                }
            case 138:
                break;
            case 6:
                {
                    return new Token(Token.OP_MAT, "-");
                }
            case 139:
                break;
            case 26:
                {
                    return new Token(Token.OP_MAT, "IN");
                }
            case 140:
                break;
            case 36:
                {
                    return new Token(Token.PAL_RES, "END");
                }
            case 141:
                break;
            case 12:
                {
                    return new Token(Token.OP_MAT, "/");
                }
            case 142:
                break;
            case 68:
                {
                    return new Token(Token.PAL_RES, "UNTIL");
                }
            case 143:
                break;
            case 27:
                {
                    return new Token(Token.PAL_RES, "IF");
                }
            case 144:
                break;
            case 15:
                {
                    return new Token(Token.OP_COMP, "<");
                }
            case 145:
                break;
            case 52:
                {
                    return new Token(Token.PAL_RES, "CHAR");
                }
            case 146:
                break;
            case 14:
                {
                    return new Token(Token.OP_COMP, "=");
                }
            case 147:
                break;
            case 5:
                {
                    if (yytext().toUpperCase().equals("CHR"))
                        return new Token(Token.PAL_RES, "CHR");
                    tIdentificador ident = new tIdentificador(yytext().toUpperCase());
                    return new Token(Token.IDENTIFICADOR, gTS.insertaTS(yytext().toUpperCase(), ident));
                }
            case 148:
                break;
            case 67:
                {
                    return new Token(Token.PAL_RES, "FALSE");
                }
            case 149:
                break;
            case 25:
                {
                    if (yytext().charAt(0) == '#')
                        // return new Token(Token.LETRA, new Character((char)(Integer.parseInt((yytext()).substring(2)) % 256)));
                        return new Token(Token.LETRA, yytext());
                    else
                        return new Token(Token.LETRA, new Character(yytext().charAt(1)));
                }
            case 150:
                break;
            case 16:
                {
                    return new Token(Token.OP_COMP, ">");
                }
            case 151:
                break;
            case 78:
                {
                    return new Token(Token.PAL_RES, "BOOLEAN");
                }
            case 152:
                break;
            case 66:
                {
                    return new Token(Token.PAL_RES, "LABEL");
                }
            case 153:
                break;
            case 60:
                {
                    return new Token(Token.PAL_RES, "PRED");
                }
            case 154:
                break;
            case 2:
                {
                /* ignore */
                }
            case 155:
                break;
            case 40:
                {
                    return new Token(Token.OP_LOG, "AND");
                }
            case 156:
                break;
            case 56:
                {
                    return new Token(Token.PAL_RES, "THEN");
                }
            case 157:
                break;
            case 72:
                {
                    return new Token(Token.PAL_RES, "RECORD");
                }
            case 158:
                break;
            case 59:
                {
                    return new Token(Token.PAL_RES, "FILE");
                }
            case 159:
                break;
            case 45:
                {
                    return new Token(Token.OP_MAT, "DIV");
                }
            case 160:
                break;
            case 1:
                {
                    ge.setError(4, yyline + 1, "Ese car�cter no se reconoce en el lenguaje");
                    break;
                }
            case 161:
                break;
            case 30:
                {
                    return new Token(Token.PAL_RES, "TO");
                }
            case 162:
                break;
            case 73:
                {
                    return new Token(Token.PAL_RES, "READLN");
                }
            case 163:
                break;
            case 31:
                {
                    return new Token(Token.PAL_RES, "DO");
                }
            case 164:
                break;
            case 51:
                {
                    return new Token(Token.PAL_RES, "CASE");
                }
            case 165:
                break;
            case 24:
                {
                    return new Token(Token.OP_MAT, "..");
                }
            case 166:
                break;
            case 77:
                {
                    return new Token(Token.PAL_RES, "PACKED");
                }
            case 167:
                break;
            case 75:
                {
                    return new Token(Token.PAL_RES, "OUTPUT");
                }
            case 168:
                break;
            default:
                if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                    zzAtEOF = true;
                    switch(zzLexicalState) {
                        case YYINITIAL:
                            {
                                return new Token(Token.EOF, null);
                            }
                        case 234:
                            break;
                        default:
                            return null;
                    }
                } else {
                    zzScanError(ZZ_NO_MATCH);
                }
        }
        GestorErrores.getInstancia().setNumLinea(yyline);
    }
}
