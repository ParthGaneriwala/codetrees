public void pitchSpell(int kPre, int kPost) {
    ArrayList<Note> noteArray = new ArrayList<Note>(notes);
    // Make chromagramList.
    ArrayList<Chromagram> chromagramList = new ArrayList<Chromagram>();
    for (int i = 0; i < noteArray.size(); i++) {
        Chromagram chromagram = new Chromagram();
        for (int j = i - kPre; j < i + kPost; j++) {
            if (j >= 0 && j < noteArray.size()) {
                int chroma = noteArray.get(j).getPitch().getChroma();
                chromagram.addOneToChromaFrequency(chroma);
            }
        }
        chromagramList.add(chromagram);
    }
    // Make morphList
    // Actually sets the morph value of the computedPitch field in each Note in noteArray
    int[] morphInt = { 0, 1, 1, 2, 2, 3, 3, 4, 5, 5, 6, 6 };
    int[] initMorph = { 0, 1, 1, 2, 2, 3, 4, 4, 5, 5, 6, 6 };
    int c0 = noteArray.get(0).getPitch().getChroma();
    int m0 = initMorph[c0];
    Integer[] tonicMorphForTonicChroma = { null, null, null, null, null, null, null, null, null, null, null, null };
    for (int ct = 0; ct < 12; ct++) tonicMorphForTonicChroma[ct] = Maths.mod(m0 - morphInt[Maths.mod(c0 - ct, 12)], 7);
    Integer[] morphForTonicChroma = { null, null, null, null, null, null, null, null, null, null, null, null };
    ArrayList<TreeSet<Integer>> tonicChromaSetForMorph = null;
    Integer[] morphStrength = { null, null, null, null, null, null, null };
    for (int j = 0; j < noteArray.size(); j++) {
        for (int ct = 0; ct < 12; ct++) {
            int c = noteArray.get(j).getPitch().getChroma();
            morphForTonicChroma[ct] = Maths.mod(morphInt[Maths.mod(c - ct, 12)] + tonicMorphForTonicChroma[ct], 7);
        }
        tonicChromaSetForMorph = new ArrayList<TreeSet<Integer>>();
        for (int m = 0; m < 7; m++) tonicChromaSetForMorph.add(new TreeSet<Integer>());
        for (int m = 0; m < 7; m++) for (int ct = 0; ct < 12; ct++) if (morphForTonicChroma[ct] == m)
            tonicChromaSetForMorph.get(m).add(ct);
        for (int m = 0; m < 7; m++) {
            int thisMorphStrength = 0;
            for (Integer tonicChroma : tonicChromaSetForMorph.get(m)) thisMorphStrength += chromagramList.get(j).get(tonicChroma);
            morphStrength[m] = thisMorphStrength;
        }
        int maxStrengthMorph = 0;
        int maxMorphStrength = morphStrength[0];
        for (int m = 1; m < 7; m++) if (morphStrength[m] > maxMorphStrength) {
            maxStrengthMorph = m;
            maxMorphStrength = morphStrength[m];
        }
        noteArray.get(j).getComputedPitch().setMorph(maxStrengthMorph);
    }
    // Actually sets morphetic pitch value of computedPitch field in each note in NoteArray
    for (int i = 0; i < noteArray.size(); i++) {
        int chromaticPitch = noteArray.get(i).getPitch().getChromaticPitch();
        int morph = noteArray.get(i).getComputedPitch().getMorph();
        int morphOct1 = Maths.floor(chromaticPitch, 12);
        int morphOct2 = morphOct1 + 1;
        int morphOct3 = morphOct1 - 1;
        float mp1 = morphOct1 + morph / 7.0f;
        float mp2 = morphOct2 + morph / 7.0f;
        float mp3 = morphOct3 + morph / 7.0f;
        int chroma = Maths.mod(chromaticPitch, 12);
        float cp = morphOct1 + chroma / 12.0f;
        float[] diffList = { Math.abs(cp - mp1), Math.abs(cp - mp2), Math.abs(cp - mp3) };
        int[] morphOctList = { morphOct1, morphOct2, morphOct3 };
        int bestMorphOctIndex = 0;
        for (int j = 1; j < 3; j++) if (diffList[j] < diffList[bestMorphOctIndex])
            bestMorphOctIndex = j;
        int bestMorphOct = morphOctList[bestMorphOctIndex];
        int bestMorpheticPitch = morph + 7 * bestMorphOct;
        noteArray.get(i).getComputedPitch().setMorpheticPitch(bestMorpheticPitch);
    }
    // Set chromamorphetic pitch of computed pitch field of every note in note array
    for (int i = 0; i < noteArray.size(); i++) {
        int chromaticPitch = noteArray.get(i).getPitch().getChromaticPitch();
        int morpheticPitch = noteArray.get(i).getComputedPitch().getMorpheticPitch();
        noteArray.get(i).getComputedPitch().setChromamorpheticPitch(chromaticPitch, morpheticPitch);
    }
    // Set pitch name of each note in notes TreeSet
    int i = 0;
    for (Note note : notes) {
        note.getComputedPitch().setPitchName(noteArray.get(i).getComputedPitch().getPitchName());
        i++;
    }
}
