public int print(Graphics g, PageFormat pageFormat, int pageIndex) throws PrinterException {
    // the printing part
    int position;
    // Set the font
    g.setFont(this.font);
    // set color
    g.setColor(Color.black);
    // get co-ordinates for frame
    int xPosition = (int) pageFormat.getImageableX();
    int yPosition = (int) pageFormat.getImageableY();
    int width = (int) pageFormat.getImageableWidth();
    int height = (int) pageFormat.getImageableHeight();
    // Get some style information:
    StyleContext context = new StyleContext();
    final FontMetrics fontMetrics = context.getFontMetrics(font);
    // print main text area
    // + HEADER_SPACE;
    int textYPosition = yPosition;
    // + (lineNumbers ? LINE_NUMBER_WIDTH : 0);
    int textXPosition = xPosition + PADDING;
    g.drawRect(xPosition, textYPosition, width, height);
    // print the text
    for (ListIterator<String> li = pageText.listIterator(); li.hasNext(); ) {
        position = textYPosition + (this.font.getSize() + 2) * (li.nextIndex() + 1);
        String line = li.next();
        int x = textXPosition;
        // trying to print empty lines throws exception
        if (line.length() == 0) {
            char[] nonBlank = new char[] { ' ' };
            Segment lineSeg = new Segment(nonBlank, 0, 1);
            x = Utilities.drawTabbedText(lineSeg, x, position, g, null, 0);
        } else {
            Segment lineSeg = new Segment(line.toCharArray(), 0, line.length());
            TabExpander tab = Utility.makeTabExpander(line, tabSize, fontMetrics);
            x = Utilities.drawTabbedText(lineSeg, x, position, g, tab, 0);
        }
    }
    // print the page
    return Printable.PAGE_EXISTS;
}
