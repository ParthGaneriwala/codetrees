private Fsm insFSM(Node node) {
    // booleani per verificare se sono stati inseriti gli stati, il nome, le transizioni e lo stato corrente
    boolean stati = true;
    boolean name = true;
    boolean trans = true;
    boolean stCor = true;
    int id = 0;
    Vector<Stato> listaS = new Vector<Stato>();
    Vector<Transizione> listaT = new Vector<Transizione>();
    // Estraggo tutti i nodi figli del nodo passato come parametro
    NodeList nl = node.getChildNodes();
    // Prima devo creare gli stati per poter creare poi le transizioni che si riferiscono agli stati
    for (int i = 0, cnt = nl.getLength(); i < cnt; i++) {
        // prendo il nome del nodo (identificatore tag)
        String test = nl.item(i).getNodeName();
        if (test.equalsIgnoreCase("name")) {
            // Se è presente un tag "name" imposto name=false
            name = false;
            // Prendo il valore del tag name
            try {
                id = Integer.parseInt(nl.item(i).getFirstChild().getNodeValue());
                if (id != 0 && id != 1) {
                    System.out.println("-- La fsm deve avere name=0 o name=1");
                    // per uscire dal programma
                    listaFsm.get(-1);
                }
                // Controllo che non ci sia già un'altra fsm con lo stesso id
                for (int j = 0; j < listaFsm.size(); j++) {
                    if (id == listaFsm.get(j).getId()) {
                        System.out.println("-- Due fsm non possono avere lo stesso id!!! -- ");
                        // per uscire dal programma
                        listaFsm.get(-1);
                    }
                }
            } catch (NumberFormatException ne) {
                System.out.println("-- Il name della fsm dev'essere identificato da un numero intero!!! --");
                // per uscire dal programma
                listaFsm.get(-1);
            }
        } else if (test.equalsIgnoreCase("states")) {
            // Se è presente un tag "states" imposto stati=false
            stati = false;
            try {
                // Faccio un parse da String a Int per il numero di stati
                int states = Integer.parseInt(nl.item(i).getFirstChild().getNodeValue());
                // Aggiungo un numero di stati pari a quanto definito in states
                for (int l = 0; l < states; l++) {
                    Stato s = new Stato(l);
                    listaS.add(s);
                }
            } catch (NumberFormatException ne) {
                System.out.println("-- Lo stato dev'essere identificato da un numero intero > 0!!! --");
            }
        }
    }
    // Ora posso creare le transizioni
    for (int i = 0, cnt = nl.getLength(); i < cnt; i++) {
        // prendo il nome del nodo (identificatore tag)
        String test = nl.item(i).getNodeName();
        if (test.equalsIgnoreCase("transition")) {
            // Se è presente un tag "transition" imposto trans=false
            trans = false;
            // Leggo e aggiungo una transizione alla lista delle transizioni
            listaT.add(insTRANS(nl.item(i), listaS, listaT));
        // System.out.println(insTRANS(nl.item(i), listaS, listaT).ToString());
        } else if (test.equalsIgnoreCase("current")) {
            stCor = false;
            try {
                // Faccio un parse da String a Int per il numero dello stato corrente
                int stato = Integer.parseInt(nl.item(i).getFirstChild().getNodeValue());
                // Controllo che il numero dello stato corrente non sia maggiore del numero massimo degli stati
                if (stato >= listaS.size() || stato < 0)
                    System.out.println("-- Il numero dello stato corrente non può essere < 0 o superare il numero totale degli stati!!! --");
                else {
                    // Estraggo dalla lista degli stati l'oggetto Stato identificato dall'id
                    Stato scurrent = getStatoById(stato, listaS);
                    // Aggiungo lo stato corrente di questa fsm al vector degli stati correnti
                    statoCur.add(scurrent);
                }
            } catch (NumberFormatException ne) {
                System.out.println("-- Lo stato dev'essere identificato da un numero intero!!! --");
            }
        }
    }
    // Messaggi di errore se non sono stati dichiarati alcuni tag
    if (name) {
        System.out.println("-- Non è stato definito l'id per una fsm!!! --");
    }
    if (stati) {
        System.out.println("-- Non è stato definito il numero di stati per una fsm!!! --");
    }
    if (trans) {
        System.out.println("-- Non è stata definita alcuna transizione per una fsm!!! --");
    }
    if (stCor) {
        System.out.println("-- Definire lo stato corrente per tutte le fsm!!! --");
    }
    // Creo la fsm
    Fsm f = new Fsm(id, listaS, listaT);
    return f;
}
