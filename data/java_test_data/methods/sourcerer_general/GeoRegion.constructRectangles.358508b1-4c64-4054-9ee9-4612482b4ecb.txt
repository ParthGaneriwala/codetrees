private static void constructRectangles(final List<SubRectangle> input, final List<SubRectangle> output, final State state, final List<SubRectangle> subRects) {
    boolean mergeable = false;
    int index = 0;
    SubRectangle front = output.isEmpty() ? null : (SubRectangle) subRects.remove(0);
    while (index != -1) {
        index = merge(output, index, front);
        if (index == -1)
            break;
        mergeable = true;
        constructRectangles(input, output, state, subRects);
        output.remove(0);
        output.add(0, front.mChild1);
        output.add(index, front.mChild2);
    }
    if (front != null)
        subRects.add(front);
    if (input.isEmpty()) {
        if (!mergeable && output.size() <= state.mSize) {
            double deviation = getDeviation(output, state.mArea);
            if (output.size() < state.mSize || deviation < state.mDeviation) {
                state.mDeviation = deviation;
                state.mSize = output.size();
                if (state.mSolution == null)
                    state.mSolution = SubRectangle.construct(state.mSize);
                for (index = 0; index < state.mSize; index++) ((SubRectangle) state.mSolution.get(index)).copy((SubRectangle) output.get(index));
            }
        }
    } else {
        front = (SubRectangle) input.remove(0);
        output.add(0, front);
        constructRectangles(input, output, state, subRects);
        output.remove(0);
        input.add(0, front);
    }
}
