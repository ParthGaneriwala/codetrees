/**
 * Processes requests for both HTTP <code>GET</code> and <code>POST</code> methods.
 * @param request servlet request
 * @param response servlet response
 * @throws ServletException if a servlet-specific error occurs
 * @throws IOException if an I/O error occurs
 */
protected void processRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
    response.setContentType("text/html;charset=UTF-8");
    PrintWriter out = response.getWriter();
    String c = "All went OK. All data in database deleted and default data are loaded.";
    try {
        // GET the EJBs and set them for further usage
        setDAOs(response);
        patDao.clearDatabase();
        dispDao.createDisplay();
        dispDao.createDisplay();
        dispDao.createDisplay();
        dispDao.createDisplay();
        dispDao.createDisplay();
        dispDao.createDisplay();
        dispDao.createDisplay();
        dispDao.createDisplay();
        dispDao.createDisplay();
        dispDao.createDisplay();
        patDao.createPatient("John", "Sheppard", Date.valueOf("1981-04-18"), "male", "Jokers", 80);
        patDao.createPatient("Teyla", "Emmagen", Date.valueOf("1983-05-01"), "female", "Wraiths", 65);
        patDao.createPatient("Dan", "Andresen", Date.valueOf("1982-04-02"), "male", "Annoying students", 85);
        patDao.addSimulatorTypeToDB("Blood Pressure");
        patDao.addSimulatorTypeToDB("Heart Rate");
        patDao.addSimulatorTypeToDB("Respiration Rate");
        patDao.addSimulatorTypeToDB("Body Temperature");
        patDao.addWidgetToDatabase("Patient Info", "/widgets/patient");
        patDao.addWidgetToDatabase("Blood Pressure", "/widgets/bp");
        patDao.addWidgetToDatabase("Heart Rate", "/widgets/hr");
        patDao.addWidgetToDatabase("Respiration Rate", "/widgets/rr");
        patDao.addWidgetToDatabase("Body Temperature", "/widgets/bt");
        patDao.addWidgetToDatabase("To Do", "/widgets/todo");
    // destroy all topics in the ActiveMQ
    // do someone know how to do it? Tried this code but it loads indefinately
    /*
            BrokerService broker = new BrokerService();
            broker.setBrokerName("deleteBroker");
            broker.addConnector("vm://localhost");
            broker.start();
            ActiveMQDestination[] destinations = broker.getDestinations();
            for (ActiveMQDestination destination : destinations)
            {
                broker.removeDestination(destination);
            }
            broker.stop();
            */
    /**
     * example usage
     *
     * dispDao.createDisplay();
     * dispDao.createDisplay();
     *
     * patDao.createPatient("John", "Sheppard", Date.valueOf("1981-04-18"), "male", "Jokers", 80);
     * patDao.createPatient("Teyla", "Emmagen", Date.valueOf("1983-05-01"), "female", "Wraiths", 65);
     *
     * patDao.addSimulatorTypeToDB("PRESSURE");
     * patDao.addSimulatorTypeToDB("HT");
     *
     * patDao.addWidgetToDatabase("PRESSURE_WID", "PRESSURE_WID_URL");
     * patDao.addWidgetToDatabase("HT_WID", "HT_WID_URL");
     *
     * /*
     * MORE EXAMPLE USAGE
     *
     * System.out.println("Widgets: " + patDao.getAvailableWidgetNames());
     * System.out.println("Simulators: " + patDao.getAvailableSimulatorTypes());
     *
     * patDao.assignDisplayToPatient(3, 1);
     * patDao.assignDisplayToPatient(4, 2);
     *
     * patDao.addSimulatorForPatient(3, "PRESSURE");
     * patDao.addSimulatorForPatient(3, "NONSENSE");
     * patDao.addSimulatorForPatient(4, "PRESSURE");
     * patDao.addSimulatorForPatient(4, "HT");
     *
     * patDao.addDisplayWidget(1, "TLAK_WID");
     * patDao.addDisplayWidget(1, "NONSENSE");
     * patDao.addDisplayWidget(2, "PRESSURE_WID");
     * patDao.addDisplayWidget(2, "HT_WID");
     *
     * patDao.removeDisplayWidget(2, "PRESSURE_WID");
     * //patientSessionBean.removeDisplayWidget(5, "SRACKA");
     *
     * patDao.removeRunningSimulator(4, "PRESSURE");
     * //patientSessionBean.removeRunningSimulator(54, "NEVIM");
     *
     * patDao.addAlertToPatientHistory(3, "PRESSURE", new Timestamp(4444));
     * Map<Timestamp, Integer> map = new HashMap<Timestamp, Integer>();
     * map.put(new Timestamp(33333), 11);
     * map.put(new Timestamp(55443), 55);
     * patDao.addValuesToPatientHistory(3, "PRESSURE", map);
     *
     * for (Timestamp t : patDao.getAlertsFromPatientHistory(6, "PRESSURE")) {
     * System.out.println("Alert: " + t);
     * }
     * for (Timestamp t : patDao.getAlertsFromPatientHistory(3, "PRESSURE")) {
     * System.out.println("Alert: " + t);
     * }
     * for (Integer i : patDao.getVaulesFromPatientHistory(3, "PRESSURE").values()) {
     * System.out.println("Hist Value: " + i);
     * }
     */
    } catch (Exception e) {
        c = e.toString();
    } finally {
        out.println("<html>");
        out.println("<head>");
        out.println("<title>Servlet TestServlet</title>");
        out.println("</head>");
        out.println("<body>");
        out.println("<h4>Report: " + c + "</h4>");
        out.println("</body>");
        out.println("</html>");
        out.close();
    }
}
