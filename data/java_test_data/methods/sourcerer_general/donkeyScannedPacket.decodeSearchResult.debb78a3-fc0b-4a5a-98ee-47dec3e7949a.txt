public static int decodeSearchResult(byte[] packet, int pos, InetSocketAddress origin, DonkeySearchResultEntry entry) throws Exception {
    // hash
    byte[] hash = new byte[16];
    System.arraycopy(packet, pos, hash, 0, 16);
    pos += 16;
    entry.setHash(hash);
    // server info for firewalled results
    entry.setServerIp(origin.getAddress());
    entry.setServerPort(origin.getPort());
    // ip
    byte[] ip = new byte[4];
    System.arraycopy(packet, pos, ip, 0, 4);
    pos += 4;
    if (convert.DWORDtoLong(ip) < 1000000) {
        DonkeyFileSource source = new DonkeyFileSource(convert.DWORDtoLong(ip));
        entry.addSource(source);
    } else {
        // port
        int port = convert.UShortToInt(packet, pos);
        DonkeyFileSource source = new DonkeyFileSource(ip, port);
        entry.addSource(source);
    }
    pos += 2;
    // numFields
    long numFields = convert.DWORDtoLong(packet, pos);
    pos += 4;
    long fieldsLeft = numFields;
    while (fieldsLeft > 0) {
        switch(convert.byteToInt(packet[pos])) {
            case 0x02:
                {
                    pos++;
                    if (convert.BytesToHexString(packet, pos, 2).equals("01:00")) {
                        pos += 2;
                        switch(convert.byteToInt(packet[pos])) {
                            case 0x01:
                                {
                                    pos++;
                                    // fileName
                                    byte[] nameBytes = new byte[convert.UShortToInt(packet, pos)];
                                    pos += 2;
                                    System.arraycopy(packet, pos, nameBytes, 0, nameBytes.length);
                                    pos += nameBytes.length;
                                    entry.addFilename(new String(nameBytes));
                                    fieldsLeft--;
                                    break;
                                }
                            case 0x03:
                                {
                                    pos++;
                                    // fileType
                                    byte[] typeBytes = new byte[convert.UShortToInt(packet, pos)];
                                    pos += 2;
                                    System.arraycopy(packet, pos, typeBytes, 0, typeBytes.length);
                                    pos += typeBytes.length;
                                    entry.addExtendedInfo(new String("FileType"), new String(typeBytes));
                                    fieldsLeft--;
                                    break;
                                }
                            case 0x04:
                                {
                                    // fileextension
                                    pos++;
                                    byte[] extensionBytes = new byte[convert.UShortToInt(packet, pos)];
                                    pos += 2;
                                    System.arraycopy(packet, pos, extensionBytes, 0, extensionBytes.length);
                                    pos += extensionBytes.length;
                                    entry.addExtendedInfo(new String("FileExtension"), new String(extensionBytes));
                                    fieldsLeft--;
                                    break;
                                }
                            default:
                                {
                                }
                        }
                    } else {
                        byte[] fieldNameBytes = new byte[convert.UShortToInt(packet, pos)];
                        pos += 2;
                        System.arraycopy(packet, pos, fieldNameBytes, 0, fieldNameBytes.length);
                        pos += fieldNameBytes.length;
                        byte[] fieldContentBytes = new byte[convert.UShortToInt(packet, pos)];
                        pos += 2;
                        System.arraycopy(packet, pos, fieldContentBytes, 0, fieldContentBytes.length);
                        pos += fieldContentBytes.length;
                        entry.addExtendedInfo(new String(fieldNameBytes), new String(fieldContentBytes));
                        fieldsLeft--;
                    }
                    break;
                }
            case 0x03:
                {
                    pos++;
                    if (convert.BytesToHexString(packet, pos, 2).equals("01:00")) {
                        pos += 2;
                        switch(convert.byteToInt(packet[pos])) {
                            case 0x15:
                                {
                                    pos++;
                                    // numAvail
                                    long numAvail = convert.DWORDtoLong(packet, pos);
                                    pos += 4;
                                    numAvail--;
                                    entry.addNumSources((int) numAvail);
                                    fieldsLeft--;
                                    break;
                                }
                            case 0x02:
                                {
                                    pos++;
                                    // size
                                    long fileSize = convert.DWORDtoLong(packet, pos);
                                    pos += 4;
                                    entry.setFileSize(fileSize);
                                    fieldsLeft--;
                                    break;
                                }
                            default:
                                {
                                }
                        }
                    } else {
                        byte[] fieldNameBytes = new byte[convert.UShortToInt(packet, pos)];
                        pos += 2;
                        System.arraycopy(packet, pos, fieldNameBytes, 0, fieldNameBytes.length);
                        pos += fieldNameBytes.length;
                        long fieldContent = convert.DWORDtoLong(packet, pos);
                        pos += 4;
                        entry.addExtendedInfo(new String(fieldNameBytes), new Long(fieldContent));
                        fieldsLeft--;
                    }
                    break;
                }
            default:
                {
                    pos++;
                    System.out.println("corrupt/unknown packet structure");
                }
        }
    }
    return pos;
}
