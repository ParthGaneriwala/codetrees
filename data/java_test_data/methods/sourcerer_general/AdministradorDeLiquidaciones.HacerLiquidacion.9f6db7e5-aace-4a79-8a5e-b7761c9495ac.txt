public static void HacerLiquidacion() {
    List socios = AdministradorDeSocios.getSocios();
    Iterator s = socios.iterator();
    int mesActual = getMesProximaLiq().intValue();
    int anioActual = getAnioProximaLiq().intValue();
    int nroRecibo = getNumeroUltimoRecibo() + 1;
    Liquidacion liquidacion = new Liquidacion(0, mesActual, anioActual, Calendar.getInstance().getTime());
    while (s.hasNext()) {
        Socio socio = (Socio) s.next();
        if (socio.getCategoria().getIdCategoria() == Categoria.VITALICIO)
            continue;
        if (socio.isAsociado())
            continue;
        // Trae todos los recibos para socio
        List recibos = getRecibos(socio);
        int debe = mesesQueDebe(recibos, mesActual, anioActual);
        if (debe <= 1) {
            // Crea el recibo para el mes actual.
            Recibo rActual = new Recibo(0, socio, liquidacion, mesActual, anioActual, nroRecibo, socio.getCategoria().getCuota(), false, socio.getCategoria().getCuotaStr(), socio.getCategoria());
            nroRecibo++;
            liquidacion.getRecibos().add(rActual);
        }
        if (debe == 1) {
            int anio = anioActual;
            int mes = mesActual - 1;
            if (mes == 0) {
                mes = 12;
                anio--;
            }
            // Crea el recibo para el mes anterior.
            Recibo rAnterior = new Recibo(0, socio, liquidacion, mes, anio, nroRecibo, socio.getCategoria().getCuota(), false, socio.getCategoria().getCuotaStr(), socio.getCategoria());
            nroRecibo++;
            liquidacion.getRecibos().add(rAnterior);
        }
    }
    // Fin while(i)
    // Ahora si, guardar la liquidacion...
    Session session = HibernateUtil.getSession();
    session.beginTransaction();
    session.save(liquidacion);
    session.getTransaction().commit();
}
