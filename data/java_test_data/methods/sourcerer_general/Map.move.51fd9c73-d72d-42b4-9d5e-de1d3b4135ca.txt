/*
	 1	=	SW
	 2	=	S
	 3	=	SE
	 4	=	W
	 5	=	null
	 6	=	E
	 7	=	NW
	 8	=	N
	 9	=	NE
	 */
public boolean move(Unit currentUnit, int direction) {
    // moves the currentUnit in the int direction recovered from the Controller
    if (currentUnit.getRemainingMoves() <= 0) {
        MainScreen.writeToConsole("Map: Selected Unit cannot move anymore this turn", new Color(255, 85, 0));
        return false;
    }
    Tile currentTile = currentUnit.getPosition(), newTile = null;
    int currentX = currentTile.getX(), currentY = currentTile.getY();
    switch(direction) {
        case // SW
        1:
            if (currentX - 1 < 0 || currentY + 1 > height)
                break;
            newTile = square[currentX - 1][currentY + 1];
            break;
        case // S
        2:
            if (currentY + 1 > height)
                break;
            newTile = square[currentX][currentY + 1];
            break;
        case // SE
        3:
            if (currentX + 1 > width || currentY + 1 > height)
                break;
            newTile = square[currentX + 1][currentY + 1];
            break;
        case // W
        4:
            if (currentX - 1 < 0)
                break;
            newTile = square[currentX - 1][currentY];
            break;
        case // E
        6:
            if (currentX + 1 > width)
                break;
            newTile = square[currentX + 1][currentY];
            break;
        case // NW
        7:
            if (currentX - 1 < 0 || currentY - 1 < 0)
                break;
            newTile = square[currentX - 1][currentY - 1];
            break;
        case // N
        8:
            if (currentY - 1 < 0)
                break;
            newTile = square[currentX][currentY - 1];
            break;
        case // NE
        9:
            if (currentX + 1 > width || currentY - 1 < 0)
                break;
            newTile = square[currentX + 1][currentY - 1];
            break;
        default:
            return false;
    }
    int PID = newTile.getUnitPlayerID();
    if (PID == -1 || PID == currentUnit.getPlayer().getID()) {
        Terrain newTileTerrain = newTile.getTerrain();
        if (!newTileTerrain.isPassable()) {
            MainScreen.writeToConsole("Map:  Unit cannot move into impassable terrain", new Color(255, 85, 0));
            return false;
        }
        Item item = newTile.getTheItem();
        if (item != null && item.getIsPassable()) {
            item.takeAction(currentUnit.getPlayer());
            newTile.removeItem();
        }
        if (item != null && !item.getIsPassable()) {
            MainScreen.writeToConsole("Map: Unit cannot move over an obstacle", new Color(255, 85, 0));
            return false;
        }
        AreaEffect ae = newTile.getAreaEffect();
        if (ae != null)
            if (ae.takeAction(currentUnit))
                return false;
        currentTile.removeUnit(currentUnit);
        newTile.addUnit(currentUnit);
        currentUnit.setPosition(newTile);
        currentUnit.getPlayer().modifyExplored(currentUnit);
        currentUnit.decrementMoves(newTileTerrain.getMovementCost());
        MainScreen.writeToConsole("Map: Unit has moved to X: " + newTile.getX() + " : Y: " + newTile.getY(), new Color(255, 85, 0));
        return true;
    }
    return false;
}
