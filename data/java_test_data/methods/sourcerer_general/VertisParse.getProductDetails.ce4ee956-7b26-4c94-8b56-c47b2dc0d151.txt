@Override
public /*
	 * Given a filename that contains the URLs for detail information of products and
	 * categories following Detail_CategoryOutputFormat.xsd.  This method will open 
	 * the url and parse the details.  Returns a file name of an XML document
	 *  containing the information from the details page of each item in the
	 *  file filename.
	 */
String getProductDetails(String filename) {
    Namespace docNamespace = Namespace.getNamespace("tns", constants.XML_Namespaces.Detail_CategoryOutputFormat);
    File file = new File(filename);
    Document doc = null;
    SAXBuilder build = new SAXBuilder();
    XMLOutputter xmlOut = new XMLOutputter();
    Document outDoc = new Document();
    Element root = new Element("ItemDetails");
    Namespace outputNS = Namespace.getNamespace("tns", constants.XML_Namespaces.ItemDetailOutputFormat);
    root.setNamespace(outputNS);
    Namespace xsiNS = Namespace.getNamespace("xsi", "http://www.w3.org/2001/XMLSchema-instance");
    root.setAttribute(new Attribute("schemaLocation", "ItemDetailOutputFormat ../XML_Formats/ItemDetailOutputFormat.xsd", xsiNS));
    root.setAttribute(new Attribute("Date", ""));
    root.setAttribute(new Attribute("pageNum", ""));
    root.setAttribute(new Attribute("StoreName", storeName));
    try {
        doc = build.build(file);
    } catch (JDOMException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    } catch (IOException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    }
    List<Element> childrena = doc.getRootElement().getChildren();
    // String storeName = doc.getRootElement().getAttribute("StoreName").getValue();
    String httpCookie = "GIVE ME COOKIE";
    for (ListIterator<Element> a = childrena.listIterator(); a.hasNext(); ) {
        Element child = (Element) a.next();
        HttpURLConnection.setFollowRedirects(false);
        URL url;
        try {
            // ("detailURL"));//.getValue());
            System.out.println("bjkbhjbjk" + "http://" + storeName + ".inserts2online.com/" + child.getChildText("detailURL", docNamespace));
            System.out.println(child.getTextNormalize());
            url = new URL("http://" + storeName + ".inserts2online.com/" + child.getChildText("detailURL", docNamespace));
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("GET");
            conn.setRequestProperty("Cookie", httpCookie);
            conn.setReadTimeout(5000);
            conn.disconnect();
            conn.connect();
            System.out.println(conn.getResponseCode());
            if (conn.getResponseCode() == HttpURLConnection.HTTP_MOVED_TEMP || httpCookie.equals("GIVE ME COOKIE")) {
                httpCookie = getHTTPCookie(url);
                sendHTTPCookie(httpCookie);
                a.previous();
                System.out.println("PREVIOUS");
                continue;
            }
            if (conn.getResponseCode() == HttpURLConnection.HTTP_OK) {
                System.out.println("");
                // ArrayList<Element> categories = (ArrayList<Element>) child.getChildren("category",docNamespace);
                List<Element> categories = child.getChildren("category", docNamespace);
                // BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
                Element detailData = getElementWithDetailData(conn, categories);
                root.addContent(detailData.setNamespace(outputNS));
                System.out.println(detailData);
            }
            String outputFile = "." + sep + "detailXml.xml";
            FileOutputStream fos = new FileOutputStream(outputFile);
            xmlOut.setFormat(Format.getPrettyFormat());
            outDoc.setRootElement(root);
            xmlOut.output(outDoc, fos);
            return outputFile;
        } catch (MalformedURLException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } finally {
        }
    }
    return null;
}
