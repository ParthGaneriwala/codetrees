/**
 * Parses <code>s</code> and prints a nice error message to
 * <code>out</code>.
 */
private static void printErrorMessage(String s, SList counterexampleContext, /*@ non_null */
RoutineDecl rd, /*@ non_null */
Set directTargets, /*@ non_null */
PrintStream out, boolean assocOnly) throws SExpTypeError {
    try {
        if (counterexampleContext == null) {
            counterexampleContext = SList.make();
        }
        int k = s.indexOf('@');
        // Assert.notFalse(k != -1 || assocOnly);
        int locUse = 0;
        if (k != -1) {
            locUse = getLoc(s, k + 1);
            s = s.substring(0, k);
        }
        boolean hasAssocDecl = false;
        int locDecl = Location.NULL;
        int locAux = Location.NULL;
        k = s.lastIndexOf(':');
        if (k != -1) {
            hasAssocDecl = true;
            locDecl = getLoc(s, k + 1);
            s = s.substring(0, k);
        }
        k = s.lastIndexOf(':');
        if (k != -1) {
            locAux = locDecl;
            locDecl = getLoc(s, k + 1);
            s = s.substring(0, k);
        }
        k = s.indexOf('/');
        // -1 means none
        int auxID = -1;
        if (k != -1) {
            auxID = toNumber(s, k + 1);
            s = s.substring(0, k);
        }
        int tag = TagConstants.checkFromString(s);
        String msg = chkToMsg(tag, hasAssocDecl);
        if (msg == null)
            return;
        if (locUse != Location.NULL)
            ErrorSet.warning(locUse, msg + " (" + TagConstants.toString(tag) + ")");
        else if (tag != TagConstants.CHKADDINFO)
            ErrorSet.warning(msg + " (" + TagConstants.toString(tag) + ")");
        if (!Location.isWholeFileLoc(locUse))
            Main.expectedLineNumber = Location.toLineNumber(locUse);
        if (locDecl != Location.NULL) {
            ErrorSet.getReporter().reportAssociatedInfo2(locDecl, assocDeclClipPolicy);
            if (!Location.isWholeFileLoc(locDecl)) {
            // System.out.println("Associated declaration is "
            // + Location.toString(locDecl) + ":");
            // ErrorSet.displayColumn(locDecl, assocDeclClipPolicy);
            } else {
            // System.out.println("Associated declaration is "
            // + Location.toString(locDecl) );
            }
        }
        if (locAux != Location.NULL) {
            ErrorSet.getReporter().reportAssociatedInfo2(locAux, assocDeclClipPolicy);
            if (!Location.isWholeFileLoc(locAux)) {
            // System.out.println("Associated declaration is "
            // + Location.toString(locAux) + ":");
            // ErrorSet.displayColumn(locAux, assocDeclClipPolicy);
            } else {
            // System.out.println("Associated declaration is "
            // + Location.toString(locAux) );
            }
        }
        switch(tag) {
            case TagConstants.CHKLOOPOBJECTINVARIANT:
            case TagConstants.CHKOBJECTINVARIANT:
                displayInvariantContext(counterexampleContext, out);
        }
        if (Main.options().suggest) {
            Object auxInfo;
            if (auxID == -1) {
                auxInfo = null;
            } else {
                auxInfo = AuxInfo.get(auxID);
            }
            String sug = Suggestion.generate(tag, auxInfo, rd, directTargets, counterexampleContext, locDecl);
            if (sug == null) {
                sug = "none";
            }
            System.out.println("Suggestion [" + Location.toLineNumber(locUse) + "," + Location.toColumn(locUse) + "]: " + sug);
        }
    } catch (javafe.util.AssertionFailureException e) {
        System.out.println("FAILED TO PRINT ERROR MESSAGE FOR " + s);
        throw e;
    }
}
