// $ANTLR start "statement_sequence"
public final MyGrammarParser.statement_sequence_return statement_sequence() throws RecognitionException {
    MyGrammarParser.statement_sequence_return retval = new MyGrammarParser.statement_sequence_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    MyGrammarParser.statement_return statement51 = null;
    RewriteRuleSubtreeStream stream_statement = new RewriteRuleSubtreeStream(adaptor, "rule statement");
    try {
        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:182:2: ( ( statement )+ -> ^( STATEMENT_SEQUENCE ( statement )+ ) )
        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:182:5: ( statement )+
        {
            // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:182:5: ( statement )+
            int cnt11 = 0;
            loop11: do {
                int alt11 = 2;
                int LA11_0 = input.LA(1);
                if (((LA11_0 >= WRITEINT && LA11_0 <= IF) || LA11_0 == WHILE || LA11_0 == FOR || LA11_0 == CASE || LA11_0 == PVG || LA11_0 == IDENTIFIER)) {
                    alt11 = 1;
                }
                switch(alt11) {
                    case 1:
                        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:182:6: statement
                        {
                            pushFollow(FOLLOW_statement_in_statement_sequence1336);
                            statement51 = statement();
                            state._fsp--;
                            stream_statement.add(statement51.getTree());
                        }
                        break;
                    default:
                        if (cnt11 >= 1)
                            break loop11;
                        EarlyExitException eee = new EarlyExitException(11, input);
                        throw eee;
                }
                cnt11++;
            } while (true);
            // AST REWRITE
            // elements: statement
            // token labels:
            // rule labels: retval
            // token list labels:
            // rule list labels:
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", retval != null ? retval.tree : null);
            root_0 = (CommonTree) adaptor.nil();
            // 182:18: -> ^( STATEMENT_SEQUENCE ( statement )+ )
            {
                // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:182:21: ^( STATEMENT_SEQUENCE ( statement )+ )
                {
                    CommonTree root_1 = (CommonTree) adaptor.nil();
                    root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(STATEMENT_SEQUENCE, "STATEMENT_SEQUENCE"), root_1);
                    if (!(stream_statement.hasNext())) {
                        throw new RewriteEarlyExitException();
                    }
                    while (stream_statement.hasNext()) {
                        adaptor.addChild(root_1, stream_statement.nextTree());
                    }
                    stream_statement.reset();
                    adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
