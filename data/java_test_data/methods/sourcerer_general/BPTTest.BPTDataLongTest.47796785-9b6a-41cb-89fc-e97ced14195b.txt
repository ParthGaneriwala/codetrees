public static void BPTDataLongTest() throws Exception {
    System.out.println("TESTING BPTDataLong");
    for (int nodesize = 2; nodesize < 6; nodesize++) {
        allinserts = new Hashtable();
        java.io.RandomAccessFile mstream = makeFile("bpt.dat");
        int keylength = 10 + nodesize;
        BPTDataLong bpt = BPTDataLong.InitializeInStream(mstream, keylength, nodesize);
        bpt = restart(bpt);
        inserttest(bpt, "d", 15);
        deletetest(bpt, "d", 15);
        inserttest(bpt, "d", 15);
        bpt.SerializationCheck();
        inserttest(bpt, "ab", 55);
        inserttest(bpt, "b", -5);
        deletetest(bpt, "b", 0);
        inserttest(bpt, "b", -5);
        inserttest(bpt, "c", 34);
        inserttest(bpt, "a", 8);
        commit(bpt);
        System.out.println("after commit\r\n");
        inserttest(bpt, "a", 800);
        inserttest(bpt, "ca", -999);
        inserttest(bpt, "da", -999);
        inserttest(bpt, "ea", -9991);
        inserttest(bpt, "aa", -9992);
        inserttest(bpt, "ba", -9995);
        commit(bpt);
        inserttest(bpt, "za", -9997);
        inserttest(bpt, " a", -9999);
        commit(bpt);
        deletetest(bpt, "d", 0);
        deletetest(bpt, "da", 0);
        deletetest(bpt, "ca", 0);
        bpt = restart(bpt);
        inserttest(bpt, "aaa", 88);
        System.out.println("Full test for " + nodesize);
        if (full) {
            for (int i = 0; i < 33; i++) {
                for (int k = 0; k < 10; k++) {
                    int m = (i * 5 + k * 23) % 77;
                    String s = "b" + m;
                    inserttest(bpt, s, m);
                    if (i % 2 == 1 || k % 3 == 1) {
                        deletetest(bpt, s, m);
                    }
                }
                int j = i % 3;
                if (j == 0) {
                    abort(bpt);
                } else if (j == 1) {
                    commit(bpt);
                } else {
                    bpt = restart(bpt);
                }
            }
        }
        commit(bpt);
        deletetest(bpt, "za", 0);
        deletetest(bpt, "ea", 0);
        deletetest(bpt, "c", 0);
        deletetest(bpt, "ba", 0);
        deletetest(bpt, "b", 0);
        deletetest(bpt, "ab", 0);
        abort(bpt);
        inserttest(bpt, "dog", 1);
        commit(bpt);
        deletetest(bpt, "dog", 1);
        inserttest(bpt, "pig", 2);
        abort(bpt);
        inserttest(bpt, "cat", 3);
        bpt.Recover(true);
        mstream.close();
        mstream = null;
    }
}
