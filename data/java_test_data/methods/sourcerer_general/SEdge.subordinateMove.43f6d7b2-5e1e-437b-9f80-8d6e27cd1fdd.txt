public void subordinateMove(SObject parent, int dx, int dy) {
    Point p1 = null, p2 = null;
    CLine s1 = null, s2 = null, line = null;
    int pindex_1 = -1, pindex_2 = -1;
    int sindex_1 = -1, sindex_2 = -1;
    int mx, my;
    int cdx = dx, cdy = dy;
    /* Cached delta                    */
    Object thead, ttail;
    /* Temporary head and tail objects */
    SNodeTerminal terminal;
    boolean h = false, v = false;
    Integer orientation;
    if (!multipoint)
        return;
    if (selected)
        return;
    thead = head;
    ttail = tail;
    /*
         * If and end of this edge is to be of type terminal, then we need the
         * node object for that terminal
         */
    if (head instanceof SNodeTerminal) {
        terminal = (SNodeTerminal) head;
        thead = terminal.parent;
    }
    if (tail instanceof SNodeTerminal) {
        terminal = (SNodeTerminal) tail;
        ttail = terminal.parent;
    }
    /*
         * Handle the case where this edge has no body parts.  In this case, we
         * might have to break the edge in the middle to allow orthogonal 
         * movement if the edge is straight.
         */
    if (body.size() < 1) {
        if (thead == ttail)
            return;
        /*
             * Since the edge has no body points, in order to make this move 
             * work we must "break" the edge in the middle.
             */
        line = segment(0);
        mx = (line.x1 + line.x2) / 2;
        my = (line.y1 + line.y2) / 2;
        /*
             * "Break" the edge by adding 2 points in the middle of the body.  
             * Now, when the edge is moved in response to a parent the move will 
             * be orthogonal.
             */
        orientation = (Integer) save_orientation.get(0);
        if (orientation == CLine.HORIZONTAL && dy != 0) {
            body.add(new Point(mx, point(head).y));
            body.add(new Point(mx, point(tail).y));
            saveMoveState(null);
        } else if (orientation == CLine.VERTICAL && dx != 0) {
            body.add(new Point(point(head).x, my));
            body.add(new Point(point(tail).x, my));
            saveMoveState(null);
        }
        /*
             * Handle the corner case where the calculated 'break' point for the
             * edge is coincident on either the head or tail point. In this case
             * we do not break the edge at this time.  We need to wait until the 
             * head and tail are moved furthur apart so that the break point 
             * calculation results in a body that's orthogonal.
             */
        if (body.size() > 0 && (save_orientation.get(0) == CLine.POINT || save_orientation.get(2) == CLine.POINT)) {
            body.clear();
            save_orientation.clear();
            save_orientation.add(orientation);
        }
        return;
    }
    /*
         * In cases where the same edge is attached to 2 different terminals of 
         * the same node, the subordinateMove function will have to do the work
         * of moving *2* body points instead of just one.  In this case, thead
         * and ttail will point to the same node.
         */
    if (thead == parent && ttail != parent) {
        s1 = headSegment();
        pindex_1 = 0;
        sindex_1 = 0;
    } else if (ttail == parent && thead != parent) {
        s1 = tailSegment();
        pindex_1 = body.size() - 1;
        sindex_1 = body.size();
    } else if (thead == parent && ttail == parent) {
        s1 = headSegment();
        s2 = tailSegment();
        pindex_1 = 0;
        sindex_1 = 0;
        pindex_2 = body.size() - 1;
        sindex_2 = body.size();
    }
    /*
         * Calculate and apply the move offsets to the first segment
         */
    if (s1 != null) {
        p1 = (Point) body.get(pindex_1);
        h = save_orientation.get(sindex_1) == CLine.HORIZONTAL;
        v = save_orientation.get(sindex_1) == CLine.VERTICAL;
        if (v)
            dy = 0;
        else if (h)
            dx = 0;
        if (v || h) {
            p1.x += dx;
            p1.y += dy;
        }
    }
    /*
         * Revert the deltas back to the cached values since the above code may
         * have set either dx/dy to null
         */
    dx = cdx;
    dy = cdy;
    /*
         * Calculate and apply the move offsets to the second segment (if any)
         */
    if (s2 != null) {
        p2 = (Point) body.get(pindex_2);
        h = save_orientation.get(sindex_2) == CLine.HORIZONTAL;
        v = save_orientation.get(sindex_2) == CLine.VERTICAL;
        if (v)
            dy = 0;
        else if (h)
            dx = 0;
        if (v || h) {
            p2.x += dx;
            p2.y += dy;
        }
    }
}
