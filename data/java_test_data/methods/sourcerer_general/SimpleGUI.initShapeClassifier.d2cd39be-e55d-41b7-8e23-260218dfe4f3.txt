private void initShapeClassifier() {
    classifier = new ShapeClassifier();
    // DistanceWeightedKNN knn = new DistanceWeightedKNN();
    SimpleKNN knn = new SimpleKNN();
    // 35 is one of the better k values from the leave-one-out validation
    knn.setK(35);
    // somehow get the training data in (read from a file, dummy)
    // read in file
    File f;
    String[][] values;
    try {
        // f = new File("E:/endOfSummer/momentData/logAggVPSNoZ.csv");  //for road-river-soil-urban
        // for infect-road-wind
        f = new File("E:/endOfSummer/synthData/comparison/balanced/GAMMomentsNoZBalMerged.csv");
        FileReader in = new FileReader(f);
        CSVParser csvp = new CSVParser(in);
        values = csvp.getAllValues();
    } catch (FileNotFoundException fnfe) {
        throw new RuntimeException("No file!  " + fnfe.getMessage());
    } catch (IOException ioe) {
        throw new RuntimeException("IO Exception!  " + ioe.getMessage());
    }
    // create classedArray[]
    // to see if leaving one or two invariants out improves classification (Auroop from ORNL's suggestion)
    boolean[] include = new boolean[] { true, true, true, true, true, true, true };
    // this int must be the number of true's in the include array.
    int numInvsUsed = 7;
    ClassedArray[] matrix = new ClassedArray[values.length - 1];
    for (int i = 1; i < values.length; i++) {
        // was values[i].length - 1
        double[] data = new double[numInvsUsed];
        // because I can't assume it will be data[j]--some values of j might be skipped by the include array
        int index = 0;
        for (int j = 0; j < values[i].length - 1; j++) {
            if (include[j]) {
                data[index] = Double.parseDouble(values[i][j]);
                index++;
            }
        }
        ClassedArray ca = new ClassedArray();
        ca.setArray(data);
        ca.setKlass(values[i][values[i].length - 1]);
        matrix[i - 1] = ca;
    }
    matrix = standardizeMatrix(matrix);
    knn.setTrainingData(matrix);
    classifier.setClassifier(knn);
    classifier.setMeans(means);
    classifier.setStDevs(stdevs);
    classifier.setIncludeArray(include);
}
