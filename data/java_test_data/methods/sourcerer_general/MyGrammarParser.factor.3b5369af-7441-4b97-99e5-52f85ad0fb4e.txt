// $ANTLR start "factor"
public final MyGrammarParser.factor_return factor() throws RecognitionException {
    MyGrammarParser.factor_return retval = new MyGrammarParser.factor_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token EPAR179 = null;
    Token DPAR181 = null;
    Token NOT182 = null;
    MyGrammarParser.expression_return expression180 = null;
    MyGrammarParser.factor_return factor183 = null;
    MyGrammarParser.value_return value184 = null;
    CommonTree EPAR179_tree = null;
    CommonTree DPAR181_tree = null;
    CommonTree NOT182_tree = null;
    RewriteRuleTokenStream stream_NOT = new RewriteRuleTokenStream(adaptor, "token NOT");
    RewriteRuleTokenStream stream_EPAR = new RewriteRuleTokenStream(adaptor, "token EPAR");
    RewriteRuleTokenStream stream_DPAR = new RewriteRuleTokenStream(adaptor, "token DPAR");
    RewriteRuleSubtreeStream stream_expression = new RewriteRuleSubtreeStream(adaptor, "rule expression");
    RewriteRuleSubtreeStream stream_value = new RewriteRuleSubtreeStream(adaptor, "rule value");
    RewriteRuleSubtreeStream stream_factor = new RewriteRuleSubtreeStream(adaptor, "rule factor");
    try {
        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:279:9: ( EPAR expression DPAR -> ^( FACTOR expression ) | NOT factor -> ^( FACTOR factor ) | value -> ^( FACTOR value ) )
        int alt34 = 3;
        switch(input.LA(1)) {
            case EPAR:
                {
                    alt34 = 1;
                }
                break;
            case NOT:
                {
                    alt34 = 2;
                }
                break;
            case TRUE:
            case FALSE:
            case IDENTIFIER:
            case NUMBER:
            case STRING:
                {
                    alt34 = 3;
                }
                break;
            default:
                NoViableAltException nvae = new NoViableAltException("", 34, 0, input);
                throw nvae;
        }
        switch(alt34) {
            case 1:
                // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:279:11: EPAR expression DPAR
                {
                    EPAR179 = (Token) match(input, EPAR, FOLLOW_EPAR_in_factor2404);
                    stream_EPAR.add(EPAR179);
                    pushFollow(FOLLOW_expression_in_factor2406);
                    expression180 = expression();
                    state._fsp--;
                    stream_expression.add(expression180.getTree());
                    DPAR181 = (Token) match(input, DPAR, FOLLOW_DPAR_in_factor2408);
                    stream_DPAR.add(DPAR181);
                    // AST REWRITE
                    // elements: expression
                    // token labels:
                    // rule labels: retval
                    // token list labels:
                    // rule list labels:
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", retval != null ? retval.tree : null);
                    root_0 = (CommonTree) adaptor.nil();
                    // 279:32: -> ^( FACTOR expression )
                    {
                        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:279:35: ^( FACTOR expression )
                        {
                            CommonTree root_1 = (CommonTree) adaptor.nil();
                            root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(FACTOR, "FACTOR"), root_1);
                            adaptor.addChild(root_1, stream_expression.nextTree());
                            adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;
                }
                break;
            case 2:
                // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:280:7: NOT factor
                {
                    NOT182 = (Token) match(input, NOT, FOLLOW_NOT_in_factor2425);
                    stream_NOT.add(NOT182);
                    pushFollow(FOLLOW_factor_in_factor2427);
                    factor183 = factor();
                    state._fsp--;
                    stream_factor.add(factor183.getTree());
                    // AST REWRITE
                    // elements: factor
                    // token labels:
                    // rule labels: retval
                    // token list labels:
                    // rule list labels:
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", retval != null ? retval.tree : null);
                    root_0 = (CommonTree) adaptor.nil();
                    // 280:18: -> ^( FACTOR factor )
                    {
                        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:280:21: ^( FACTOR factor )
                        {
                            CommonTree root_1 = (CommonTree) adaptor.nil();
                            root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(FACTOR, "FACTOR"), root_1);
                            adaptor.addChild(root_1, stream_factor.nextTree());
                            adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;
                }
                break;
            case 3:
                // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:281:7: value
                {
                    pushFollow(FOLLOW_value_in_factor2444);
                    value184 = value();
                    state._fsp--;
                    stream_value.add(value184.getTree());
                    // AST REWRITE
                    // elements: value
                    // token labels:
                    // rule labels: retval
                    // token list labels:
                    // rule list labels:
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", retval != null ? retval.tree : null);
                    root_0 = (CommonTree) adaptor.nil();
                    // 281:13: -> ^( FACTOR value )
                    {
                        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:281:16: ^( FACTOR value )
                        {
                            CommonTree root_1 = (CommonTree) adaptor.nil();
                            root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(FACTOR, "FACTOR"), root_1);
                            adaptor.addChild(root_1, stream_value.nextTree());
                            adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;
                }
                break;
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
