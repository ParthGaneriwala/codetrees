/**
 * Predict which side of the line a feature vector resides upon for a particular svm model.
 * @param mFile The model file to predict against.
 * @param featureVector The feature vector to predict for.
 * @return A double that represents which side of the line the feature vector resides (negative below, positive above).
 * @throws CleartkProcessingException
 */
public static double tkSvmLightPredict(File mFile, TreeFeatureVector featureVector) throws CleartkProcessingException {
    double prediction;
    try {
        File cFile = File.createTempFile("tkclassify", ".txt");
        File oFile = File.createTempFile("tkoutput", ".out");
        BufferedWriter out = new BufferedWriter(new FileWriter(cFile));
        out.write("0");
        out.write(TKSVMlightDataWriter.createString(featureVector));
        out.close();
        String executable = "tk_svm_classify";
        String[] command = new String[4];
        command[0] = executable;
        command[1] = cFile.getPath();
        command[2] = mFile.getPath();
        command[3] = oFile.getPath();
        logger.log(Level.INFO, "classifying with tree kernel svmlight using the following command: " + toString(command));
        logger.log(Level.INFO, "if the tree kernel svmlight classifier does not seem to be working correctly, then try running the above command directly to see if e.g. svm_classify gives a useful error message.");
        Process process = Runtime.getRuntime().exec(command);
        output(process.getInputStream(), System.out);
        output(process.getErrorStream(), System.err);
        process.waitFor();
        BufferedReader in = new BufferedReader(new FileReader(oFile));
        prediction = Double.parseDouble(in.readLine());
        in.close();
    } catch (IOException e) {
        throw new CleartkProcessingException(e);
    } catch (InterruptedException e) {
        throw new CleartkProcessingException(e);
    }
    return prediction;
}
