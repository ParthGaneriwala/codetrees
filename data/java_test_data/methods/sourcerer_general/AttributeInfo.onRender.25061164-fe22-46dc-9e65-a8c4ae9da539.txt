protected void onRender(Element parent, int index) {
    super.onRender(parent, index);
    if (this.selectedGoodsTypeId != null && !this.selectedGoodsTypeId.equals("0")) {
        Criteria criteria = new Criteria();
        Condition cond = new Condition();
        cond.setField(IAttribute.GOODSTYPE);
        cond.setOperator(Condition.EQUALS);
        cond.setValue(this.selectedGoodsTypeId);
        criteria.addCondition(cond);
        this.loader = new PagingListService().getLoader(ModelNames.ATTRIBUTE, criteria);
    } else {
        this.loader = new PagingListService().getLoader(ModelNames.ATTRIBUTE);
    }
    this.loader.load(0, 50);
    this.store = new ListStore<BeanObject>(this.loader);
    this.store.addStoreListener(new StoreListener<BeanObject>() {

        public void storeUpdate(StoreEvent<BeanObject> se) {
            List<Record> changed = store.getModifiedRecords();
            for (Record rec : changed) {
                BeanObject bean = (BeanObject) rec.getModel();
                updateAttribute(bean, null);
            }
        }
    });
    toolBar = new PagingToolBar(50);
    toolBar.bind(loader);
    List<ColumnConfig> columns = new ArrayList<ColumnConfig>();
    final CheckBoxSelectionModel<BeanObject> smRowSelection = new CheckBoxSelectionModel<BeanObject>();
    columns.add(smRowSelection.getColumn());
    columns.add(new ColumnConfig(IAttribute.ID, Resources.constants.AttributeList_ID(), 50));
    ColumnConfig col = new ColumnConfig(IAttribute.NAME, Resources.constants.AttributeList_Name(), 140);
    col.setEditor(new CellEditor(new TextField()));
    columns.add(col);
    ColumnConfig goodsType = new ColumnConfig(IAttribute.GOODSTYPE, "商品类型", 120);
    columns.add(goodsType);
    ColumnConfig inputType = new ColumnConfig(IAttribute.INPUTTYPE, Resources.constants.AttributeList_InputType(), 120);
    columns.add(inputType);
    columns.add(new ColumnConfig(IAttribute.VALUES, Resources.constants.AttributeList_Values(), 150));
    columns.add(new ColumnConfig(IAttribute.SORTORDER, Resources.constants.AttributeList_SortOrder(), 50));
    ColumnConfig actcol = new ColumnConfig("Action", Resources.constants.AttributeList_Action(), 100);
    columns.add(actcol);
    ColumnModel cm = new ColumnModel(columns);
    grid = new EditorGrid<BeanObject>(this.store, cm);
    grid.setLoadMask(true);
    grid.setBorders(true);
    grid.setSelectionModel(smRowSelection);
    // grid.setAutoExpandColumn("forum");
    IdToStringRenderer inputTypeCell = new IdToStringRenderer(grid);
    inputTypeCell.addIdInfo(new IdToStringRenderer.IdInfo("0", "手工录入"));
    inputTypeCell.addIdInfo(new IdToStringRenderer.IdInfo("1", "从列表中选择"));
    inputType.setRenderer(inputTypeCell);
    final List<IdToStringRenderer.IdInfo> goodsTypeInfo = new ArrayList<IdToStringRenderer.IdInfo>();
    lstGoodsType.clear();
    lstGoodsType.addItem(Resources.constants.AttributeList_all_GoodsType(), "0");
    new ListService().listBeans(ModelNames.GOODSTYPE, new ListService.Listener() {

        int i = 1;

        public synchronized void onSuccess(List<BeanObject> result) {
            for (Iterator<BeanObject> it = result.iterator(); it.hasNext(); ) {
                BeanObject goodsType = it.next();
                lstGoodsType.addItem(goodsType.getString(IGoodsType.NAME), goodsType.getString(IGoodsType.ID));
                goodsTypeInfo.add(i - 1, new IdToStringRenderer.IdInfo(goodsType.getString(IGoodsType.ID), goodsType.getString(IGoodsType.NAME)));
                if (selectedGoodsTypeId != null && selectedGoodsTypeId.equals(goodsType.getString(IGoodsType.ID))) {
                    lstGoodsType.setSelectedIndex(i);
                }
                i++;
            }
        }
    });
    IdToStringRenderer goodsTypeCell = new IdToStringRenderer(grid);
    goodsTypeCell.setIdToString(goodsTypeInfo);
    goodsType.setRenderer(goodsTypeCell);
    ActionCellRenderer render = new ActionCellRenderer(grid);
    ActionCellRenderer.ActionInfo act = new ActionCellRenderer.ActionInfo();
    act.setImage("icon_edit.gif");
    act.setAction("editAttributeInfo($id)");
    act.setTooltip(Resources.constants.edit());
    render.addAction(act);
    act = new ActionCellRenderer.ActionInfo();
    act.setImage("icon_trash.gif");
    act.setAction("deleteAttributeInfo($id)");
    act.setTooltip(Resources.constants.delete());
    render.addAction(act);
    actcol.setRenderer(render);
    HorizontalPanel header = new HorizontalPanel();
    header.add(Resources.images.icon_search().createImage());
    header.add(new Label("  " + Resources.constants.AttributeList_GoodsType()));
    header.add(lstGoodsType);
    add(header);
    panel = new ContentPanel();
    panel.setFrame(true);
    panel.setCollapsible(true);
    panel.setAnimCollapse(false);
    panel.setButtonAlign(HorizontalAlignment.CENTER);
    panel.setIconStyle("icon-table");
    panel.setLayout(new FitLayout());
    panel.add(grid);
    panel.setSize(800, 350);
    panel.setBottomComponent(toolBar);
    panel.setButtonAlign(HorizontalAlignment.LEFT);
    panel.addButton(new Button(Resources.constants.reset(), new SelectionListener<ButtonEvent>() {

        public void componentSelected(ButtonEvent ce) {
            store.rejectChanges();
            toolBar.refresh();
        }
    }));
    panel.addButton(new Button(Resources.constants.save(), new SelectionListener<ButtonEvent>() {

        public void componentSelected(ButtonEvent ce) {
            store.commitChanges();
            toolBar.refresh();
        }
    }));
    panel.addButton(new Button(Resources.constants.add(), new SelectionListener<ButtonEvent>() {

        public void componentSelected(ButtonEvent ce) {
            iShop.getInstance().displayAttribute(null);
        }
    }));
    add(panel);
    lstGoodsType.addChangeListener(new ChangeListener() {

        public void onChange(Widget sender) {
            setSelectedGoodsTypeId(lstGoodsType.getValue(lstGoodsType.getSelectedIndex()));
            refresh();
        }
    });
}
