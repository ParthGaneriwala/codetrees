public void Dump(byte[] buffer) throws Exception {
    // indicator | seek position | [ key storage | seek position ]*
    if (buffer.length != owner.buffersize) {
        throw new BPTException("bad buffer size " + buffer.length + " should be " + owner.buffersize);
    }
    buffer[0] = BPTDataLong.NONLEAF;
    if (this.isLeaf) {
        buffer[0] = BPTDataLong.LEAF;
    }
    int index = 1;
    // store first seek position
    BPTPageFile.Store(this.ChildBufferNumbers[0], buffer, index);
    index += BPTPageFile.LONGSTORAGE;
    // store remaining keys and seeks
    int maxKeyLength = this.owner.KeyLength;
    int maxKeyPayload = maxKeyLength - BPTPageFile.SHORTSTORAGE;
    String lastkey = "";
    for (int KeyIndex = 0; KeyIndex < this.Size; KeyIndex++) {
        // store a key
        String theKey = this.ChildKeys[KeyIndex];
        short charCount = -1;
        if (theKey != null) {
            byte[] keyBytes = theKey.getBytes("UTF-8");
            charCount = (short) keyBytes.length;
            if (charCount > maxKeyPayload) {
                throw new BPTException("String bytes to large for use as key " + charCount + ">" + maxKeyPayload);
            }
            BPTPageFile.Store(charCount, buffer, index);
            index += BPTPageFile.SHORTSTORAGE;
            for (int i = 0; i < keyBytes.length; i++) {
                buffer[index + i] = keyBytes[i];
            }
        } else {
            // null case (no String to read)
            BPTPageFile.Store(charCount, buffer, index);
            index += BPTPageFile.SHORTSTORAGE;
        }
        index += maxKeyPayload;
        // store a seek
        long seekPosition = this.ChildBufferNumbers[KeyIndex + 1];
        if (theKey == null && seekPosition != BPTDataLong.NULLBUFFERNUMBER && !this.isLeaf) {
            throw new BPTException("null key paired with non-null location " + KeyIndex);
        }
        if (lastkey == null && theKey != null) {
            throw new BPTException("null key followed by non-null key " + KeyIndex);
        }
        lastkey = theKey;
        BPTPageFile.Store(seekPosition, buffer, index);
        index += BPTPageFile.LONGSTORAGE;
    }
}
