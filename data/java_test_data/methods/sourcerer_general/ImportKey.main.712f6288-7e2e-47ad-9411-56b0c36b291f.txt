public static void main(String[] args) {
    // change this if you want another password by default
    String keypass = "importkey";
    // change this if you want another alias by default
    String defaultalias = "importkey";
    // change this if you want another keystorefile by default
    String keystorename = System.getProperty("keystore");
    if (keystorename == null)
        keystorename = System.getProperty("user.home") + System.getProperty("file.separator") + // especially this ;-)
        "keystore.ImportKey";
    // parsing command line input
    String keyfile = "";
    String certfile = "";
    if (args.length < 2 || args.length > 3) {
        System.out.println("Usage: java comu.ImportKey keyfile certfile [alias]");
        System.exit(0);
    } else {
        keyfile = args[0];
        certfile = args[1];
        if (args.length > 2)
            defaultalias = args[2];
    }
    try {
        // initializing and clearing keystore
        KeyStore ks = KeyStore.getInstance("JKS", "SUN");
        ks.load(null, keypass.toCharArray());
        System.out.println("Using keystore-file : " + keystorename);
        ks.store(new FileOutputStream(keystorename), keypass.toCharArray());
        ks.load(new FileInputStream(keystorename), keypass.toCharArray());
        // loading Key
        InputStream fl = fullStream(keyfile);
        byte[] key = new byte[fl.available()];
        KeyFactory kf = KeyFactory.getInstance("RSA");
        fl.read(key, 0, fl.available());
        fl.close();
        PKCS8EncodedKeySpec keysp = new PKCS8EncodedKeySpec(key);
        PrivateKey ff = kf.generatePrivate(keysp);
        // loading CertificateChain
        CertificateFactory cf = CertificateFactory.getInstance("X.509");
        InputStream certstream = fullStream(certfile);
        Collection c = cf.generateCertificates(certstream);
        Certificate[] certs = new Certificate[c.toArray().length];
        if (c.size() == 1) {
            certstream = fullStream(certfile);
            System.out.println("One certificate, no chain.");
            Certificate cert = cf.generateCertificate(certstream);
            certs[0] = cert;
        } else {
            System.out.println("Certificate chain length: " + c.size());
            certs = (Certificate[]) c.toArray();
        }
        // storing keystore
        ks.setKeyEntry(defaultalias, ff, keypass.toCharArray(), certs);
        System.out.println("Key and certificate stored.");
        System.out.println("Alias:" + defaultalias + "  Password:" + keypass);
        ks.store(new FileOutputStream(keystorename), keypass.toCharArray());
    } catch (Exception ex) {
        ex.printStackTrace();
    }
}
