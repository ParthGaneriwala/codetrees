public synchronized void drawObjects_(boolean selected, Graphics graphics, int which_gr) {
    if (ig != null) {
        DNode tmpnode;
        // Draw nodes.
        Vector<DNode> nodelistVector = ig.nodes();
        if (nodelistVector == null)
            return;
        for (int index = 0; index < nodelistVector.size(); index++) {
            tmpnode = nodelistVector.get(index);
            tmpnode.draw(this, graphics, viewTransform_, quality);
        }
        // Draw edges.
        int num = 0;
        DEdge edge;
        while (num < ig.getNumEdges()) {
            edge = ig.getDEdge(num);
            boolean arrow_only = false;
            edge.draw(graphics, viewTransform_, xyPlane_, arrow_only, quality, this, which_gr);
            graphics.dispose();
            if (which_gr == 0)
                graphics = getGraphicsInternal_();
            else
                graphics = getBackGraphics_();
            num++;
        }
    } else if (domGraph != null) {
        DomNode tmpnode;
        // Draw nodes.
        Vector<DomNode> nodelistVector = domGraph.getVertices();
        if (nodelistVector == null)
            return;
        for (int index = 0; index < nodelistVector.size(); index++) {
            tmpnode = nodelistVector.get(index);
            tmpnode.draw(this, graphics, viewTransform_, quality);
        }
        // Draw edges.
        int num = 0;
        DOMEdge edge;
        while (num < domGraph.getNumEdges()) {
            edge = domGraph.getEdge(num);
            boolean arrow_only = false;
            edge.draw(graphics, viewTransform_, xyPlane_, arrow_only, quality, this, which_gr);
            graphics.dispose();
            if (which_gr == 0)
                graphics = getGraphicsInternal_();
            else
                graphics = getBackGraphics_();
            num++;
        }
    }
}
