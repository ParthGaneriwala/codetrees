public static Pair<Double, Double> doExchange(Long2IntMap[] counts, int runs) {
    double initialEntropy = 0;
    double newEntropy = Double.MAX_VALUE;
    {
        Long2IntMap dist1 = new Long2IntMap();
        long totalCount = 0;
        for (Long2IntMap map : counts) {
            for (Long2IntMap.Iterator it = map.iterator(); it.hasNext(); ) {
                Long2IntMap.Entry e = it.next();
                dist1.addAndGet(e.getKey(), e.getValue());
                totalCount += e.getValue();
            }
        }
        double revCount = 1.0 / totalCount;
        for (Long2IntMap.Iterator it = dist1.iterator(); it.hasNext(); ) {
            int count = it.next().getValue();
            double p = count * revCount;
            initialEntropy -= p * ProbMath.log2(p);
        }
    }
    Random rnd = new Random();
    for (; runs > 0; --runs) {
        HashMap<Integer, Long2IntMap> eventsByX = new HashMap<Integer, Long2IntMap>(counts.length);
        HashSet<Integer> randomSplit = new HashSet<Integer>(eventsByX.size() / 2);
        for (int i = 0; i < counts.length; ++i) {
            Long2IntMap map = counts[i];
            if (map != null && map.size() > 0) {
                Integer key = i;
                eventsByX.put(key, map);
                if (rnd.nextDouble() < 0.5) {
                    randomSplit.add(key);
                }
            }
        }
        Pair<HashSet<Integer>, HashSet<Integer>> split = ExchangeAlgo.getExchangeWordSplit(eventsByX.keySet(), eventsByX, randomSplit);
        // compute split entropy
        double dist1Entropy = 0;
        double dist2Entropy = 0;
        long dist1Count = 0;
        long dist2Count = 0;
        {
            Long2IntMap dist1 = new Long2IntMap();
            for (int x : split.getFirst()) {
                Long2IntMap map = counts[x];
                for (Long2IntMap.Iterator it = map.iterator(); it.hasNext(); ) {
                    Long2IntMap.Entry e = it.next();
                    dist1.addAndGet(e.getKey(), e.getValue());
                    dist1Count += e.getValue();
                }
            }
            double revCount = 1.0 / dist1Count;
            for (Long2IntMap.Iterator it = dist1.iterator(); it.hasNext(); ) {
                int count = it.next().getValue();
                double p = count * revCount;
                dist1Entropy -= p * ProbMath.log2(p);
            }
        }
        {
            Long2IntMap dist2 = new Long2IntMap();
            for (int x : split.getSecond()) {
                Long2IntMap map = counts[x];
                for (Long2IntMap.Iterator it = map.iterator(); it.hasNext(); ) {
                    Long2IntMap.Entry e = it.next();
                    dist2.addAndGet(e.getKey(), e.getValue());
                    dist2Count += e.getValue();
                }
            }
            double revCount = 1.0 / dist2Count;
            for (Long2IntMap.Iterator it = dist2.iterator(); it.hasNext(); ) {
                int count = it.next().getValue();
                double p = count * revCount;
                dist2Entropy -= p * ProbMath.log2(p);
            }
        }
        double runEntropy = (dist1Count * dist1Entropy + dist2Count * dist2Entropy) / (dist1Count + dist2Count);
        if (runEntropy < newEntropy) {
            newEntropy = runEntropy;
        }
    }
    return new Pair<Double, Double>(initialEntropy, newEntropy);
}
