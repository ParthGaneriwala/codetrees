public void applyButtonActionPerformed(ActionEvent evt) {
    // We have to build a new Configuration object:
    Configuration configuration = new Configuration();
    // Stack
    String proxyStackName = stackPanel.proxyStackNameTextField.getText();
    if (proxyStackName == null || proxyStackName.trim().equals("")) {
        new AlertFrame("Specify the stack name");
        // new AlertFrame("ָ��ջ������");
        return;
    } else
        configuration.stackName = proxyStackName;
    String proxyIPAddress = stackPanel.proxyIPAddressTextField.getText();
    if (proxyIPAddress == null || proxyIPAddress.trim().equals("")) {
        new AlertFrame("Specify the stack IP address");
        // new AlertFrame("ָ��ջ��IP��ַ");
        return;
    } else
        configuration.stackIPAddress = proxyIPAddress;
    String outboundProxy = stackPanel.outboundProxyTextField.getText();
    if (outboundProxy != null && !outboundProxy.trim().equals(""))
        configuration.outboundProxy = outboundProxy;
    Vector domainList = registrarPanel.domainList.domains;
    if (domainList != null)
        configuration.domainList = domainList;
    String routerPath = stackPanel.routerClassTextField.getText();
    if (routerPath != null && !routerPath.trim().equals(""))
        configuration.routerPath = routerPath;
    configuration.registryPort = "1099";
    configuration.exportRegistry = true;
    // the listening points:
    Hashtable lps = stackPanel.listeningPointsList.lps;
    if (lps == null || lps.isEmpty()) {
        new AlertFrame("Specify at least one listening point");
        // new AlertFrame("ָ������һ������Ŀ��");
        return;
    }
    configuration.listeningPoints = lps;
    // The connections:
    String maxConnections = connectionPanel.getMaxConnections();
    // System.out.println(maxConnections);
    if (maxConnections != null && !maxConnections.trim().equals(""))
        configuration.maxConnections = maxConnections;
    String maxServerTransactions = connectionPanel.getMaxServerTransactions();
    if (maxServerTransactions != null && !maxServerTransactions.trim().equals(""))
        configuration.maxServerTransactions = maxServerTransactions;
    String threadPoolSize = connectionPanel.getThreadPoolSize();
    if (threadPoolSize != null && !threadPoolSize.trim().equals(""))
        configuration.threadPoolSize = threadPoolSize;
    // Logging
    configuration.accessLogViaRMI = false;
    configuration.logRMIPort = "0";
    configuration.logLifetime = "3600";
    // Debug
    boolean b = debugPanel.enableDebugCheckBox.isSelected();
    configuration.enableDebug = b;
    String badMessageLogFile = debugPanel.badMessageLogFileTextField.getText();
    if (badMessageLogFile != null && !badMessageLogFile.trim().equals(""))
        configuration.badMessageLogFile = badMessageLogFile;
    String debugLogFile = debugPanel.debugFileTextField.getText();
    if (debugLogFile != null && !debugLogFile.trim().equals(""))
        configuration.debugLogFile = debugLogFile;
    String serverLogFile = debugPanel.serverLogFileTextField.getText();
    if (serverLogFile != null && !serverLogFile.trim().equals(""))
        configuration.serverLogFile = serverLogFile;
    String outputProxyFile = debugPanel.outputProxyFileTextField.getText();
    if (outputProxyFile != null && !outputProxyFile.trim().equals(""))
        configuration.outputProxy = outputProxyFile;
    // Authentication
    b = authenticationPanel.authenticationCheckBox.isSelected();
    configuration.enableAuthentication = b;
    configuration.method = "digest";
    String className = authenticationPanel.classNameTextField.getText();
    if (className != null && !className.trim().equals(""))
        configuration.classFile = className;
    else {
        new AlertFrame("Specify the method class name");
        // new AlertFrame("ָ����������");
        return;
    }
    String passwordsFile = authenticationPanel.passwordsFileTextField.getText();
    if (passwordsFile != null && !passwordsFile.trim().equals(""))
        configuration.passwordsFile = passwordsFile;
    // Registrations:
    b = registrarPanel.enableRegistrationsCheckBox.isSelected();
    // Presence server
    configuration.enablePresenceServer = registrarPanel.enablePresenceServerCheckBox.isSelected();
    configuration.enableRegistrations = b;
    String registrationsFile = registrarPanel.xmlRegistrationFileTextField.getText();
    if (registrationsFile != null && !registrationsFile.trim().equals(""))
        configuration.registrationsFile = registrationsFile;
    else {
        new AlertFrame("Specify the registrations File");
        // new AlertFrame("ָ��ע���ļ�");
        return;
    }
    String expiresTime = registrarPanel.registrationTimeOutTextField.getText();
    if (expiresTime != null && !expiresTime.trim().equals("")) {
        try {
            configuration.expiresTime = Integer.valueOf(expiresTime.trim()).intValue();
        } catch (Exception e) {
        }
    }
    writeXMLConfiguration(proxyLauncher.getConfigurationFile(), configuration);
    this.setVisible(false);
}
