public void initVelocityConstraints(final BBTimeStep step) {
    BBBody b = m_bodyB;
    float mass = b.getMass();
    // Frequency
    float omega = 2.0f * PI * m_frequencyHz;
    // Damping coefficient
    float d = 2.0f * mass * m_dampingRatio * omega;
    // Spring stiffness
    float k = mass * (omega * omega);
    // beta has units of inverse time.
    assert (d + step.dt * k > FLT_EPSILON);
    m_gamma = step.dt * (d + step.dt * k);
    if (m_gamma != 0.0f) {
        m_gamma = 1.0f / m_gamma;
    }
    m_beta = step.dt * k * m_gamma;
    // Compute the effective mass matrix.
    BBVec2 r = mul(b.getTransform().R, sub(m_localAnchor, b.getLocalCenter()));
    // K    = [(1/m1 + 1/m2) * eye(2) - skew(r1) * invI1 * skew(r1) - skew(r2) * invI2 * skew(r2)]
    // = [1/m1+1/m2     0    ] + invI1 * [r1.y*r1.y -r1.x*r1.y] + invI2 * [r1.y*r1.y -r1.x*r1.y]
    // [    0     1/m1+1/m2]           [-r1.x*r1.y r1.x*r1.x]           [-r1.x*r1.y r1.x*r1.x]
    float invMass = b.m_invMass;
    float invI = b.m_invI;
    BBMat22 K1 = new BBMat22();
    K1.col1.x = invMass;
    K1.col2.x = 0.0f;
    K1.col1.y = 0.0f;
    K1.col2.y = invMass;
    BBMat22 K2 = new BBMat22();
    K2.col1.x = invI * r.y * r.y;
    K2.col2.x = -invI * r.x * r.y;
    K2.col1.y = -invI * r.x * r.y;
    K2.col2.y = invI * r.x * r.x;
    BBMat22 K = add(K1, K2);
    K.col1.x += m_gamma;
    K.col2.y += m_gamma;
    m_mass = K.getInverse();
    m_C = sub(add(b.m_sweep.c, r), m_target);
    // Cheat with some damping
    b.m_angularVelocity *= 0.98f;
    // Warm starting.
    m_impulse.mul(step.dtRatio);
    b.m_linearVelocity.add(mul(invMass, m_impulse));
    b.m_angularVelocity += invI * cross(r, m_impulse);
}
