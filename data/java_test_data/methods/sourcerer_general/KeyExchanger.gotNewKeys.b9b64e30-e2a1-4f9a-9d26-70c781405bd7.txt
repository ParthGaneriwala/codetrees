private void gotNewKeys() {
    final Digest hash = kex.getHash();
    if (sessionID == null)
        // session id is 'H' from the first key exchange and does not change thereafter
        sessionID = Arrays.copyOf(kex.getH(), kex.getH().length);
    final PlainBuffer buf = // 
    new PlainBuffer().putMPInt(// 
    kex.getK()).putRawBytes(// 
    kex.getH()).putByte(// <placeholder>
    (byte) 0).putRawBytes(sessionID);
    // Position of <placeholder>
    final int pos = buf.available() - sessionID.length - 1;
    buf.array()[pos] = 'A';
    hash.update(buf.array(), 0, buf.available());
    final byte[] initialIV_C2S = hash.digest();
    buf.array()[pos] = 'B';
    hash.update(buf.array(), 0, buf.available());
    final byte[] initialIV_S2C = hash.digest();
    buf.array()[pos] = 'C';
    hash.update(buf.array(), 0, buf.available());
    final byte[] encryptionKey_C2S = hash.digest();
    buf.array()[pos] = 'D';
    hash.update(buf.array(), 0, buf.available());
    final byte[] encryptionKey_S2C = hash.digest();
    buf.array()[pos] = 'E';
    hash.update(buf.array(), 0, buf.available());
    final byte[] integrityKey_C2S = hash.digest();
    buf.array()[pos] = 'F';
    hash.update(buf.array(), 0, buf.available());
    final byte[] integrityKey_S2C = hash.digest();
    final Cipher cipher_C2S = Factory.Named.Util.create(transport.getConfig().getCipherFactories(), negotiatedAlgs.getClient2ServerCipherAlgorithm());
    // 
    cipher_C2S.init(// 
    Cipher.Mode.Encrypt, // 
    resizedKey(encryptionKey_C2S, cipher_C2S.getBlockSize(), hash, kex.getK(), kex.getH()), initialIV_C2S);
    final Cipher cipher_S2C = // 
    Factory.Named.Util.create(// 
    transport.getConfig().getCipherFactories(), negotiatedAlgs.getServer2ClientCipherAlgorithm());
    // 
    cipher_S2C.init(// 
    Cipher.Mode.Decrypt, // 
    resizedKey(encryptionKey_S2C, cipher_S2C.getBlockSize(), hash, kex.getK(), kex.getH()), initialIV_S2C);
    final MAC mac_C2S = Factory.Named.Util.create(transport.getConfig().getMACFactories(), negotiatedAlgs.getClient2ServerMACAlgorithm());
    mac_C2S.init(integrityKey_C2S);
    final MAC mac_S2C = // 
    Factory.Named.Util.create(// 
    transport.getConfig().getMACFactories(), negotiatedAlgs.getServer2ClientMACAlgorithm());
    mac_S2C.init(integrityKey_S2C);
    final Compression compression_S2C = Factory.Named.Util.create(transport.getConfig().getCompressionFactories(), negotiatedAlgs.getServer2ClientCompressionAlgorithm());
    final Compression compression_C2S = Factory.Named.Util.create(transport.getConfig().getCompressionFactories(), negotiatedAlgs.getClient2ServerCompressionAlgorithm());
    transport.getEncoder().setAlgorithms(cipher_C2S, mac_C2S, compression_C2S);
    transport.getDecoder().setAlgorithms(cipher_S2C, mac_S2C, compression_S2C);
}
