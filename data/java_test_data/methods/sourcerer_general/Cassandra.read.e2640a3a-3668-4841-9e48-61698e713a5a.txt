public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true) {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
            break;
        }
        switch(field.id) {
            case // KEYSPACE
            1:
                if (field.type == TType.STRING) {
                    this.keyspace = iprot.readString();
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case // KEY
            2:
                if (field.type == TType.STRING) {
                    this.key = iprot.readString();
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case // CFMAP
            3:
                if (field.type == TType.MAP) {
                    {
                        TMap _map46 = iprot.readMapBegin();
                        this.cfmap = new HashMap<String, List<ColumnOrSuperColumn>>(2 * _map46.size);
                        for (int _i47 = 0; _i47 < _map46.size; ++_i47) {
                            String _key48;
                            List<ColumnOrSuperColumn> _val49;
                            _key48 = iprot.readString();
                            {
                                TList _list50 = iprot.readListBegin();
                                _val49 = new ArrayList<ColumnOrSuperColumn>(_list50.size);
                                for (int _i51 = 0; _i51 < _list50.size; ++_i51) {
                                    ColumnOrSuperColumn _elem52;
                                    _elem52 = new ColumnOrSuperColumn();
                                    _elem52.read(iprot);
                                    _val49.add(_elem52);
                                }
                                iprot.readListEnd();
                            }
                            this.cfmap.put(_key48, _val49);
                        }
                        iprot.readMapEnd();
                    }
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case // CONSISTENCY_LEVEL
            4:
                if (field.type == TType.I32) {
                    this.consistency_level = ConsistencyLevel.findByValue(iprot.readI32());
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            default:
                TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
}
