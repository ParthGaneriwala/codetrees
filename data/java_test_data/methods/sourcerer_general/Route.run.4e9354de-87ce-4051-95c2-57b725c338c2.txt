@SuppressWarnings("unchecked")
public void run() {
    while (true) {
        // waitPingTable
        HashMap<Integer, SourceNode> waitPingTable2 = (HashMap<Integer, SourceNode>) waitPingTable.clone();
        Iterator<Integer> it = waitPingTable2.keySet().iterator();
        while (it.hasNext()) {
            int pingSessionId = it.next();
            SourceNode sn = waitPingTable.get(pingSessionId);
            if (System.currentTimeMillis() - sn.pingReceiveTime > Config.pingTimeOut) {
                if (sn != null) {
                    synchronized (sn) {
                        sn.notify();
                    }
                }
            }
        }
        // waitConnectMessage2Table
        HashMap<DS2Ident, DatagramSocket2> hm2 = (HashMap<DS2Ident, DatagramSocket2>) waitConnectMessage2Table.clone();
        Iterator<DS2Ident> it2 = hm2.keySet().iterator();
        while (it2.hasNext()) {
            DS2Ident di = it2.next();
            DatagramSocket2 ds2 = waitConnectMessage2Table.get(di);
            if (ds2 != null) {
                Connection conn = ds2.conn;
                if (System.currentTimeMillis() - conn.receiveCM2StartTime > Config.connectTimeOut) {
                    synchronized (ds2) {
                        ds2.notifyAll();
                    }
                }
            }
        }
        // waitConnectMessage3Table
        HashMap<DS2Ident, DatagramSocket2> hm3 = (HashMap<DS2Ident, DatagramSocket2>) waitConnectMessage3Table.clone();
        Iterator<DS2Ident> it3 = hm3.keySet().iterator();
        while (it3.hasNext()) {
            DS2Ident di = it3.next();
            DatagramSocket2 ds2 = waitConnectMessage3Table.get(di);
            if (ds2 != null) {
                Connection conn = ds2.conn;
                if (System.currentTimeMillis() - conn.receiveCM3StartTime > Config.connectTimeOut) {
                    if (!conn.isConnected()) {
                        synchronized (ds2) {
                            ds2.notifyAll();
                        }
                    }
                }
            }
        }
        // �������������رճ�ʱ����
        HashMap<DS2Ident, DatagramSocket2> DS2Table2 = (HashMap<DS2Ident, DatagramSocket2>) ds2Table.clone();
        Iterator<DS2Ident> it4 = DS2Table2.keySet().iterator();
        connectSum = 0;
        while (it4.hasNext()) {
            DS2Ident di = it4.next();
            DatagramSocket2 ds2 = DS2Table2.get(di);
            if (ds2 != null) {
                Connection conn = ds2.conn;
                if (conn != null) {
                    if (conn.isConnected()) {
                        connectSum++;
                        if (System.currentTimeMillis() - conn.lastSendLiveTime > Config.sendLiveIntervalNomal) {
                            if (conn.sender != null) {
                                conn.sender.sendLiveMessage();
                                conn.lastSendLiveTime = System.currentTimeMillis();
                            }
                        }
                        if (System.currentTimeMillis() - conn.lastLiveTime > Config.sendLiveIntervalNomal + 2) {
                            if (System.currentTimeMillis() - conn.lastSendLiveTime > Config.sendLiveIntervalBusy) {
                                if (conn.sender != null) {
                                    conn.sender.sendLiveMessage();
                                    conn.lastSendLiveTime = System.currentTimeMillis();
                                }
                            }
                        }
                        if (System.currentTimeMillis() - conn.lastLiveTime > Config.liveTimeOut) {
                            conn.close3();
                        }
                        // System.out.println("GGGGGGG "+System.currentTimeMillis()+" "+conn.lastActiveTime+" "+(System.currentTimeMillis()-conn.lastActiveTime));
                        if (System.currentTimeMillis() - conn.lastActiveTime > Config.rdpActiveTimeOut) {
                            System.out.println("RDP�رղ���Ծ����");
                            conn.close();
                        }
                    }
                }
            }
        }
        try {
            Thread.sleep(1000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}
