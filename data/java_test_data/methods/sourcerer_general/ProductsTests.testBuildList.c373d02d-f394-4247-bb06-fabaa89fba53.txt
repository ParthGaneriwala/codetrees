public void testBuildList() {
    buildList = new BuildList();
    assertTrue("New BuildList should accept any Build!", buildList.add(build));
    assertTrue("BuildLists must not accept duplicate Builds!", !buildList.add(build));
    assertTrue("Remove by reference failed!", buildList.remove(build));
    assertTrue("Empty BuildList objects cannot remove anything!", !buildList.remove(build));
    assertTrue("This Build is no longer in the BuildList and should be added successfully!", buildList.add(build));
    assertTrue("Remove by name should not have succeeded with a mismatched name!", !buildList.remove("bunkOfTheFirstDegree"));
    build.addDefect();
    assertTrue("Remove should not work if the Build has a Defect!", !buildList.remove(build));
    build.removeDefect();
    assertEquals(build, buildList.getBuildByObject(build));
    assertEquals(build, buildList.getBuildByObject(build.getName()));
    assertTrue("Remove by name failed!", buildList.remove(build.getName()));
    assertTrue("Remove by name from an emtpy BuildList should have failed!", !buildList.remove(build.getName()));
    assertEquals(0, buildList.size());
    Iterator<Build> it = buildList.getIterator();
    ArrayList<Build> builds = buildList.getArrayList();
    try {
        for (Build current : builds) {
            assertEquals(current, it.next());
        }
    } catch (NoSuchElementException e) {
        fail();
    }
    assertFalse(it.hasNext());
}
