public void testIsValidLiteral() {
    Literal l = m.createTypedLiteral("1000", XSDDatatype.XSDinteger);
    LiteralLabel ll = l.asNode().getLiteral();
    assertTrue(XSDDatatype.XSDlong.isValidLiteral(ll));
    assertTrue(XSDDatatype.XSDint.isValidLiteral(ll));
    assertTrue(XSDDatatype.XSDshort.isValidLiteral(ll));
    assertTrue(XSDDatatype.XSDunsignedInt.isValidLiteral(ll));
    assertTrue(XSDDatatype.XSDunsignedLong.isValidLiteral(ll));
    assertTrue(XSDDatatype.XSDunsignedShort.isValidLiteral(ll));
    assertTrue(XSDDatatype.XSDpositiveInteger.isValidLiteral(ll));
    assertTrue(XSDDatatype.XSDdecimal.isValidLiteral(ll));
    assertTrue(!XSDDatatype.XSDstring.isValidLiteral(ll));
    assertTrue(!XSDDatatype.XSDbyte.isValidLiteral(ll));
    assertTrue(!XSDDatatype.XSDnegativeInteger.isValidLiteral(ll));
    l = m.createTypedLiteral("-2", XSDDatatype.XSDinteger);
    ll = l.asNode().getLiteral();
    assertTrue(XSDDatatype.XSDlong.isValidLiteral(ll));
    assertTrue(XSDDatatype.XSDint.isValidLiteral(ll));
    assertTrue(XSDDatatype.XSDshort.isValidLiteral(ll));
    assertTrue(!XSDDatatype.XSDunsignedInt.isValidLiteral(ll));
    assertTrue(!XSDDatatype.XSDunsignedLong.isValidLiteral(ll));
    assertTrue(!XSDDatatype.XSDunsignedShort.isValidLiteral(ll));
    assertTrue(XSDDatatype.XSDdecimal.isValidLiteral(ll));
    assertTrue(!XSDDatatype.XSDpositiveInteger.isValidLiteral(ll));
    assertTrue(!XSDDatatype.XSDstring.isValidLiteral(ll));
    assertTrue(XSDDatatype.XSDbyte.isValidLiteral(ll));
    assertTrue(XSDDatatype.XSDnegativeInteger.isValidLiteral(ll));
    l = m.createTypedLiteral("4.5", XSDDatatype.XSDfloat);
    ll = l.asNode().getLiteral();
    assertTrue(!XSDDatatype.XSDdouble.isValidLiteral(ll));
    assertTrue(!XSDDatatype.XSDdecimal.isValidLiteral(ll));
    Literal l2 = m.createTypedLiteral("foo", XSDDatatype.XSDstring);
    assertTrue(XSDDatatype.XSDstring.isValidLiteral(l2.asNode().getLiteral()));
    assertTrue(XSDDatatype.XSDnormalizedString.isValidLiteral(l2.asNode().getLiteral()));
    assertTrue(!XSDDatatype.XSDint.isValidLiteral(l2.asNode().getLiteral()));
    l = m.createTypedLiteral("foo bar");
    ll = l.asNode().getLiteral();
    assertTrue(XSDDatatype.XSDstring.isValidLiteral(ll));
    assertTrue(!XSDDatatype.XSDint.isValidLiteral(ll));
    l = m.createTypedLiteral("12");
    ll = l.asNode().getLiteral();
    assertTrue(XSDDatatype.XSDstring.isValidLiteral(ll));
    assertTrue(!XSDDatatype.XSDint.isValidLiteral(ll));
    // Test the isValidValue form which had a problem with numbers
    assertTrue(XSDDatatype.XSDnonNegativeInteger.isValidValue(new Integer(10)));
    assertTrue(XSDDatatype.XSDnonNegativeInteger.isValidValue(new Integer(10)));
    assertTrue(!XSDDatatype.XSDnonNegativeInteger.isValidValue(new Integer(-10)));
    assertTrue(!XSDDatatype.XSDnonNegativeInteger.isValidValue("10"));
    // The correct behaviour on float/double is unclear but will be clarified
    // by the SWBP working group task force on XML schema.
    // For now we leave that float, double and the decimal tree are all distinct
    assertTrue(XSDDatatype.XSDfloat.isValidValue(new Float("2.3")));
    assertTrue(XSDDatatype.XSDdouble.isValidValue(new Double("2.3")));
    assertTrue(!XSDDatatype.XSDfloat.isValidValue(new Integer("2")));
    assertTrue(!XSDDatatype.XSDfloat.isValidValue(new Double("2.3")));
}
