@Test
public void testDataWriters() throws Exception {
    this.tokenBuilder.buildTokens(this.jCas, "She ate dinner.", "She ate dinner .", "PRP VBD NN .", "she ate dinner .");
    Event ate = new Event(this.jCas, 4, 7);
    ate.setTense("PAST");
    ate.setEventClass("OCCURRENCE");
    ate.setPolarity("POS");
    ate.addToIndexes();
    File eventDir = this.folder.newFolder("event");
    File tenseDir = this.folder.newFolder("tense");
    File aspectDir = this.folder.newFolder("aspect");
    File classDir = this.folder.newFolder("class");
    File polarityDir = this.folder.newFolder("polarity");
    File modalityDir = this.folder.newFolder("modality");
    List<AnalysisEngineDescription> descs = Arrays.asList(EventAnnotator.FACTORY.getWriterDescription(eventDir), EventTenseAnnotator.FACTORY.getWriterDescription(tenseDir), EventAspectAnnotator.FACTORY.getWriterDescription(aspectDir), EventClassAnnotator.FACTORY.getWriterDescription(classDir), EventPolarityAnnotator.FACTORY.getWriterDescription(polarityDir), EventModalityAnnotator.FACTORY.getWriterDescription(modalityDir));
    for (AnalysisEngineDescription desc : descs) {
        AnalysisEngine engine = UIMAFramework.produceAnalysisEngine(desc);
        engine.process(this.jCas);
        engine.collectionProcessComplete();
    }
    List<File> paths = Arrays.asList(eventDir, tenseDir, aspectDir, classDir, polarityDir, modalityDir);
    for (File path : paths) {
        boolean hasTrainingData = false;
        for (File file : path.listFiles()) {
            if (file.getName().startsWith("training-data")) {
                hasTrainingData = true;
            }
        }
        Assert.assertTrue("no training data found in " + path, hasTrainingData);
    }
}
