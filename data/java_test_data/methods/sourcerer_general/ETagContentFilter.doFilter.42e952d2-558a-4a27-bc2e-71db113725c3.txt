public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException, ServletException {
    HttpServletRequest servletRequest = (HttpServletRequest) req;
    HttpServletResponse servletResponse = (HttpServletResponse) res;
    String id = servletRequest.getRequestURI();
    String queryString = servletRequest.getQueryString();
    if (queryString != null)
        id += queryString;
    logger.debug(id);
    if (id.indexOf(".css") > 0 || id.indexOf(".gif") > 0 || id.indexOf(".jpg") > 0 || id.indexOf(".js") > 0 || id.indexOf(".png") > 0 || id.indexOf(".bmp") > 0) {
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        ETagResponseWrapper wrappedResponse = new ETagResponseWrapper(servletResponse, baos);
        chain.doFilter(servletRequest, wrappedResponse);
        byte[] bytes = baos.toByteArray();
        String token = '"' + ETagComputeUtils.getMd5Digest(bytes) + '"';
        // always store the ETag in the header
        servletResponse.setHeader("ETag", token);
        String previousToken = servletRequest.getHeader("If-None-Match");
        if (previousToken != null && previousToken.equals(token)) {
            // compare previous token with the current one
            // logger.debug("ETag match: returning 304 Not Modified");
            System.out.println(previousToken + ":ETag match: returning 304 Not Modified");
            servletResponse.sendError(HttpServletResponse.SC_NOT_MODIFIED);
            // re-use original last modified time
            servletResponse.setHeader("Last-Modified", servletRequest.getHeader("If-Modified-Since"));
            servletResponse.setHeader("Expires", new Date().toGMTString());
        } else {
            // first time through - set last modified time to now
            Calendar cal = Calendar.getInstance();
            cal.set(Calendar.MILLISECOND, 0);
            Date lastModified = cal.getTime();
            servletResponse.setDateHeader("Last-Modified", lastModified.getTime());
            servletResponse.setHeader("Cache-Control", "max-age=" + 24 * 60 * 60);
            // logger.debug("Writing body content");
            servletResponse.setContentLength(bytes.length);
            ServletOutputStream sos = servletResponse.getOutputStream();
            sos.write(bytes);
            sos.flush();
            sos.close();
        }
    } else {
        chain.doFilter(servletRequest, servletResponse);
    }
}
