public boolean[] parseCCL(String input) throws CCLException {
    int[] escPos = new int[1];
    int pos = 0;
    boolean[] map = new boolean[MAX_SYMBOL + 1];
    // skip past the [
    pos++;
    boolean negative = input.charAt(pos) == '^';
    if (// check for negative
    negative)
        pos++;
    // mark the start
    int start = pos;
    try {
        char first = '\0';
        char ch;
        while (pos < input.length() && (ch = input.charAt(pos)) != ']') {
            if (// potentially the first side of a range
            ch != '-') {
                escPos[0] = pos;
                // check escape sequence
                first = esc(input, escPos);
                map[first] = true;
                pos = escPos[0];
            } else if (// leading '-'
            pos == start) {
                map['-'] = true;
                ++pos;
            } else // now we have a range
            {
                char last;
                // skip '-'
                ++pos;
                escPos[0] = pos;
                // check escape sequence
                last = esc(input, escPos);
                pos = escPos[0];
                if (last < first) {
                    char tmp = last;
                    last = first;
                    first = tmp;
                }
                for (int i = first; i <= last; ++i) map[i] = true;
            }
        }
    } catch (Exception ex) {
        throw new CCLException(input, ex);
    }
    if (input.charAt(pos) != ']')
        // give error
        throw new CCLException(input);
    if (negative)
        for (// don't count EOF
        int i = 0; // don't count EOF
        i < MAX_SYMBOL; // don't count EOF
        ++i) // invert all bits except EOF
        map[i] = !map[i];
    return map;
}
