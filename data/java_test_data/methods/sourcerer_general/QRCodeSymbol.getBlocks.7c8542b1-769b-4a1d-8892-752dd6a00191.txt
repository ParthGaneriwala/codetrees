public int[] getBlocks() {
    int width = getWidth();
    // System.out.println("SymbolWidth:" + Integer.toString(symbol.getWidth()));
    // System.out.println("SymbolHeight:" + Integer.toString(symbol.getHeight()));
    int height = getHeight();
    int x = width - 1;
    int y = height - 1;
    Vector codeBits = new Vector();
    Vector codeWords = new Vector();
    int tempWord = 0;
    int figure = 7;
    int isNearFinish = 0;
    final boolean READ_UP = true;
    final boolean READ_DOWN = false;
    boolean direction = READ_UP;
    do {
        // canvas.drawPoint(new Point(x * 4 +8 , y * 4 + 47), Color.RED);
        codeBits.addElement(new Boolean(getElement(x, y)));
        // canvas.drawPoint(new Point(offsetX + x * ratio + 3, offsetY + y * ratio + 3), 0xFF0000);
        if (getElement(x, y) == true) {
            tempWord += 1 << figure;
        }
        // System.out.println(new Point(x, y).toString() + " " + symbol.getElement(x, y));
        figure--;
        if (figure == -1) {
            codeWords.addElement(new Integer(tempWord));
            // System.out.print(codeWords.size() + ": ");
            // System.out.println(tempWord);
            figure = 7;
            tempWord = 0;
        }
        // determine module that read next
        do {
            if (direction == READ_UP) {
                if (// if right side of two column
                (x + isNearFinish) % 2 == 0)
                    // to left
                    x--;
                else {
                    if (y > 0) {
                        // be able to move upper side
                        x++;
                        y--;
                    } else {
                        // can't move upper side
                        // change direction
                        x--;
                        if (x == 6) {
                            x--;
                            // after through horizontal Timing Pattern, move pattern is changed
                            isNearFinish = 1;
                        }
                        direction = READ_DOWN;
                    }
                }
            } else {
                if (// if left side of two column
                (x + isNearFinish) % 2 == 0)
                    x--;
                else {
                    if (y < height - 1) {
                        x++;
                        y++;
                    } else {
                        x--;
                        if (x == 6) {
                            x--;
                            isNearFinish = 1;
                        }
                        direction = READ_UP;
                    }
                }
            }
        } while (isInFunctionPattern(x, y));
    } while (x != -1);
    int[] gotWords = new int[codeWords.size()];
    for (int i = 0; i < codeWords.size(); i++) {
        Integer temp = (Integer) codeWords.elementAt(i);
        gotWords[i] = temp.intValue();
    }
    return gotWords;
}
