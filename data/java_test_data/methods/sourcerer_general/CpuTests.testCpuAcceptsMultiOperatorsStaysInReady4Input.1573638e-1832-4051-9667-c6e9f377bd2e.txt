public void testCpuAcceptsMultiOperatorsStaysInReady4Input() {
    // enter first digit
    theCpu.acceptDigit(THREE);
    confirmEmptyStacks();
    assertTrue("the display should contain the string '3'", theCpu.getDisplay().getValue().equals(THREE));
    assertTrue("the cpu should still be in accepting digits state.", theCpu.state instanceof AcceptingDigitsState);
    // enter second digit
    theCpu.acceptDigit(TWO);
    confirmEmptyStacks();
    assertTrue("the display should contain the string '32'", theCpu.getDisplay().getValue().equals(THIRTY_TWO));
    assertTrue("the cpu should still be in accepting digits state.", theCpu.state instanceof AcceptingDigitsState);
    // enter first operator.
    theCpu.acceptOperator(new PlusOperator());
    assertTrue("the display should contain the string '32'", theCpu.getDisplay().getValue().equals(THIRTY_TWO));
    assertTrue("the operand stack is no longer empty", !theCpu.getOperandStack().isEmpty());
    assertTrue("the operand stack should contain the value 32", 32d == theCpu.getOperandStack().peek());
    assertTrue("the operator stack should have plus on top", theCpu.getOperatorStack().peek() instanceof PlusOperator);
    assertTrue("the cpu should be in ready for input state.", theCpu.state instanceof ReadyForInputState);
    // enter another redundant operator...
    theCpu.acceptOperator(new PlusOperator());
    assertTrue("the display should contain the string '32'", theCpu.getDisplay().getValue().equals(THIRTY_TWO));
    assertTrue("the operand stack is no longer empty", !theCpu.getOperandStack().isEmpty());
    assertTrue("the operand stack should contain the value 32", 32d == theCpu.getOperandStack().peek());
    assertTrue("the operator stack should have plus on top", theCpu.getOperatorStack().peek() instanceof PlusOperator);
    assertTrue("the cpu should be in ready for input state.", theCpu.state instanceof ReadyForInputState);
}
