public static void main(String[] args) {
    File file = new File("rsc/Factorial.java");
    Reader io;
    Codegen codegen = new Codegen(new JouetteFrame());
    StmList instrs;
    // instrucoes da ir para serem traduzidas na codegen
    // N = 5;
    Temp n = new Temp();
    Label ldone = new Label("done");
    Stm i0 = new MOVE(new TEMP(n), new CONST(5));
    // a := 0;
    Temp a = new Temp();
    Stm i1 = new MOVE(new TEMP(a), new CONST(0));
    // A:
    Label la = new Label("A");
    Stm il = new LABEL(la);
    // b := a+1;
    Temp b = new Temp();
    Stm i2 = new MOVE(new TEMP(b), new BINOP(BINOP.PLUS, new TEMP(a), new CONST(1)));
    // c := c + b
    Temp c = new Temp();
    Stm i3 = new MOVE(new TEMP(c), new BINOP(BINOP.PLUS, new TEMP(c), new TEMP(b)));
    // a := b*2;
    Stm i4 = new MOVE(new TEMP(a), new BINOP(BINOP.MUL, new TEMP(b), new CONST(2)));
    // if a < N return c
    // else goto A
    Stm i5 = new CJUMP(CJUMP.LT, new TEMP(a), new TEMP(n), ldone, la);
    // done:
    Stm i6 = new LABEL(ldone);
    instrs = new StmList(i0, new StmList(i1, new StmList(il, new StmList(i2, new StmList(i3, new StmList(i4, new StmList(i5, new StmList(i6, null))))))));
    InstrList ins = null;
    StmList aux2 = instrs;
    InstrList aux = null;
    for (; aux2 != null; aux2 = (StmList) aux2.tail) {
        aux = codegen.codegen(aux2.head);
        for (; aux != null; aux = (InstrList) aux.tail) {
            ins = new InstrList(aux.head, ins);
        }
    }
    Instr instr;
    InstrList insList = null;
    for (; ins != null; ins = (InstrList) ins.tail) {
        insList = new InstrList(ins.head, insList);
    }
    ins = insList;
    for (; ins != null; ins = (InstrList) ins.tail) {
        // System.out.print(ins.head.assem);
        System.out.print(ins.head.format(new DefaultMap()));
    }
    AssemFlowGraph g = new AssemFlowGraph(insList);
    // g.show(System.out);
    LivenessAnaliser liveness = new LivenessAnaliser(g);
    // liveness.print();
    InterferenceGraph ig = new InterferenceGraph(liveness);
    ig.print();
    RegisterAlocator r = new RegisterAlocator(ig);
    HashMap<Temp, String> map = r.mapRegisters(3);
    r.print(map);
    ins = insList;
    for (; ins != null; ins = (InstrList) ins.tail) {
        String assem = new String();
        for (TempList t = ins.head.def; t != null; t = (TempList) t.tail) {
            assem = ins.head.assem.replaceAll(t.head.toString(), "r" + map.get(t.head).toString());
        }
        for (TempList t = ins.head.use; t != null; t = (TempList) t.tail) {
            assem = assem.replaceAll(t.head.toString(), "r" + map.get(t.head).toString());
        }
        System.out.print(assem);
    }
    System.exit(1);
}
