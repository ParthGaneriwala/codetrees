private static ArrayList<HashMap<State, Double>> computeBackwardProbabilities(ArrayList<Exon> exons, ArrayList<Exon> expectedValues, ArrayList<Exon> stdDeviations, int nSamples, Gamma gamma, double gammaK, double gammaTheta, double gammaSNPsK, double gammaSNPsTheta) {
    ArrayList<HashMap<State, Double>> BackwardProbability = new ArrayList<HashMap<State, Double>>();
    for (int i = 0; i < exons.size(); i++) BackwardProbability.add(new HashMap<State, Double>());
    // Initialize so that we're always starting out in normal state
    HashMap<State, Double> initialProbabilities = new HashMap<State, Double>();
    for (State s : HiddenMarkovModel.States.values()) if (s.stateName == State.NORMAL)
        initialProbabilities.put(s, 0.0);
    else
        initialProbabilities.put(s, Double.NEGATIVE_INFINITY);
    BackwardProbability.set(exons.size() - 1, initialProbabilities);
    for (int exonIndex = exons.size() - 2; exonIndex >= 0; exonIndex--) {
        Exon e = exons.get(exonIndex);
        Exon expected = expectedValues.get(exonIndex + 1);
        Exon stdDev = stdDeviations.get(exonIndex + 1);
        HashMap<State, Double> prob = new HashMap<State, Double>();
        for (State currentState : HiddenMarkovModel.States.values()) {
            double sum = 0;
            // System.out.println(currentState);
            for (State nextState : HiddenMarkovModel.States.values()) {
                int lengthOfIntron = exons.get(exonIndex + 1).posLeft - e.posRight;
                double b_prime = BackwardProbability.get(exonIndex + 1).get(nextState);
                double logTransProb = Math.log(State.getTransitionProbability(currentState, nextState, lengthOfIntron, e.length()));
                double e_prime = State.getLogEmissionProbability(exons.get(exonIndex + 1), expected, stdDev, nextState, nSamples, gamma, gammaK, gammaTheta, gammaSNPsK, gammaSNPsTheta);
                double p_prime = b_prime + logTransProb + e_prime;
                // System.out.println("!!!!!"+lengthOfIntron + "\t" + currentState.stateName + "\t" + nextState.stateName + "\t" + sum + "\t" + b_prime + "\t" + e_prime + "\t" + logTransProb + "\t" + p_prime);
                if (// && (currentState.stateName==0 || currentState.stateName == 4))
                exons.get(exonIndex).posLeft == 196146)
                    System.out.println("Bwd: " + currentState.stateName + "\t" + nextState.stateName + "\t" + b_prime + "\t" + e_prime + "\t" + logTransProb + "(" + State.getTransitionProbability(currentState, nextState, lengthOfIntron, e.length()) + "~" + lengthOfIntron + "," + State.rateOfOccurenceOfCNV + ")\t" + p_prime);
                if (// initial condition.. otherwise sum is translated as starting out with a probability of 1
                sum == 0)
                    sum = p_prime;
                else
                    sum = Probability.logSum(sum, p_prime);
                // sum = Probability.logSum(sum, p_prime);
                if (sum > 0)
                    System.out.println("--- No log(prob) should be > 0");
            }
            if (// && (currentState.stateName==0 || currentState.snpRatio == 4))
            exons.get(exonIndex).posLeft == 196146)
                System.out.println(currentState.stateName + "\t" + sum);
            if (// deals with the case that probability = 0 and hence log probability is undefined
            Double.isNaN(sum))
                prob.put(currentState, Double.NEGATIVE_INFINITY);
            else
                prob.put(currentState, sum);
            if (sum > 0)
                System.out.println("Bwd: No log(prob) should be > 0");
            if (sum == 0)
                System.out.println("Bwd: Sum == 0");
        }
        // TODO case of 0,0 is not 3 when those are the expected
        // if (exonIndex == 106)
        // System.out.println("Weird exon");
        // if all prob are -Inf, then its useless
        boolean allInf = true;
        for (Double p : prob.values()) if (!Double.isInfinite(p))
            allInf = false;
        if (allInf)
            System.out.println(e + "\tAll backward prob are -Inf");
        BackwardProbability.set(exonIndex, prob);
    }
    return (BackwardProbability);
}
