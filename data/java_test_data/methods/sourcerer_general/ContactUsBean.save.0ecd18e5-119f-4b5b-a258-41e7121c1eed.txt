public boolean save(Connection db, ApplicationPrefs prefs, Configuration configuration, String ipAddress, String browser) throws Exception {
    // store message in database
    PreparedStatement pst = db.prepareStatement("INSERT INTO contact_us (instance_id, first_name, last_name, email, organization, description, copied, ip_address, browser, language, " + "job_title, business_phone, business_phone_ext, addrline1, addrline2, addrline3, " + "city, state, country, postalcode, form_data) " + "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ");
    StringBuffer sbf = new StringBuffer();
    if (formData != null) {
        for (int m = 0; m < formData.length; m++) {
            sbf.append("[" + formData[m] + "]");
        }
    }
    int i = 0;
    DatabaseUtils.setInt(pst, ++i, instanceId);
    pst.setString(++i, nameFirst);
    pst.setString(++i, nameLast);
    pst.setString(++i, email);
    pst.setString(++i, organization);
    pst.setString(++i, description);
    pst.setBoolean(++i, emailCopy);
    pst.setString(++i, ipAddress);
    pst.setString(++i, browser);
    pst.setString(++i, language);
    pst.setString(++i, jobTitle);
    pst.setString(++i, businessPhone);
    pst.setString(++i, businessPhoneExt);
    pst.setString(++i, addressLine1);
    pst.setString(++i, addressLine2);
    pst.setString(++i, addressLine3);
    pst.setString(++i, city);
    pst.setString(++i, state);
    pst.setString(++i, country);
    pst.setString(++i, postalCode);
    pst.setString(++i, sbf.toString());
    pst.execute();
    pst.close();
    id = DatabaseUtils.getCurrVal(db, "contact_us_request_id_seq", -1);
    // send the confirmation message if requested
    if (emailCopy) {
        String form = "Contact Us";
        if (language != null) {
            form = "Language Application";
        }
        // Send an email to the user admins...
        SMTPMessage message = SMTPMessageFactory.createSMTPMessageInstance(prefs.getPrefs());
        message.setType("text/html");
        message.setTo(UserAdmins.getEmailAddresses(db));
        message.addReplyTo(email);
        message.setFrom(prefs.get("EMAILADDRESS"));
        message.setSubject(form + " Form");
        // Populate the message template
        Template template = configuration.getTemplate("contact_us_email_notification-html.ftl");
        Map bodyMappings = new HashMap();
        bodyMappings.put("form", form);
        bodyMappings.put("firstname", nameFirst);
        bodyMappings.put("lastname", nameLast);
        bodyMappings.put("email", email);
        bodyMappings.put("phone", businessPhone);
        bodyMappings.put("phoneExt", businessPhoneExt);
        bodyMappings.put("organization", organization);
        bodyMappings.put("language", language);
        bodyMappings.put("description", description);
        bodyMappings.put("addressLine1", addressLine1);
        bodyMappings.put("addressLine2", addressLine2);
        bodyMappings.put("addressLine3", addressLine3);
        bodyMappings.put("city", city);
        bodyMappings.put("state", state);
        bodyMappings.put("country", country);
        bodyMappings.put("postalCode", postalCode);
        bodyMappings.put("formData", sbf.toString());
        // Parse and send
        StringWriter inviteBodyTextWriter = new StringWriter();
        template.process(bodyMappings, inviteBodyTextWriter);
        message.setBody(inviteBodyTextWriter.toString());
        message.send();
    }
    return true;
}
