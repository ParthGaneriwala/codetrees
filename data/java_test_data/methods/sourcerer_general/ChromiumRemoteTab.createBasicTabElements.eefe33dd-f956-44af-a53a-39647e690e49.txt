protected static TabElements createBasicTabElements(Composite composite, final Runnable modifyListener, PreferenceStore store, Params params) {
    final StringFieldEditor debugHost;
    final IntegerFieldEditor debugPort;
    final BooleanFieldEditor addNetworkConsole;
    {
        Group connectionGroup = new Group(composite, 0);
        connectionGroup.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
        connectionGroup.setText(Messages.ChromiumRemoteTab_CONNECTION_GROUP);
        connectionGroup.setLayout(new GridLayout(1, false));
        IPropertyChangeListener propertyModifyListener = new IPropertyChangeListener() {

            public void propertyChange(PropertyChangeEvent event) {
                modifyListener.run();
            }
        };
        Composite propertiesComp = createInnerComposite(connectionGroup, 2);
        // Host text field
        debugHost = new StringFieldEditor(HOST_FIELD_NAME, Messages.ChromiumRemoteTab_HostLabel, propertiesComp);
        debugHost.setPropertyChangeListener(propertyModifyListener);
        debugHost.setPreferenceStore(store);
        // Port text field
        debugPort = new IntegerFieldEditor(PORT_FIELD_NAME, Messages.ChromiumRemoteTab_PortLabel, propertiesComp);
        debugPort.setPropertyChangeListener(propertyModifyListener);
        debugPort.setPreferenceStore(store);
        addNetworkConsole = new BooleanFieldEditor(ADD_NETWORK_CONSOLE_FIELD_NAME, Messages.ChromiumRemoteTab_ShowDebuggerNetworkCommunication, propertiesComp);
        addNetworkConsole.setPreferenceStore(store);
        addNetworkConsole.setPropertyChangeListener(propertyModifyListener);
    }
    RadioButtonsLogic.Listener radioButtonsListener = new RadioButtonsLogic.Listener() {

        public void selectionChanged() {
            modifyListener.run();
        }
    };
    final RadioButtonsLogic<Integer> breakpointRadioButtons;
    {
        Group breakpointGroup = new Group(composite, 0);
        breakpointGroup.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
        breakpointGroup.setText(Messages.ChromiumRemoteTab_BREAKPOINT_GROUP);
        breakpointGroup.setLayout(new GridLayout(1, false));
        Map<Integer, Button> buttonMap = new LinkedHashMap<Integer, Button>(3);
        for (LaunchParams.BreakpointOption option : LaunchParams.BREAKPOINT_OPTIONS) {
            Button button = new Button(breakpointGroup, SWT.RADIO);
            button.setFont(composite.getFont());
            button.setText(option.getLabel());
            GridData gd = new GridData();
            button.setLayoutData(gd);
            SWTFactory.setButtonDimensionHint(button);
            int index = buttonMap.size();
            buttonMap.put(index, button);
        }
        breakpointRadioButtons = new RadioButtonsLogic<Integer>(buttonMap, radioButtonsListener);
    }
    LookupModeControl lookupModeControl = new LookupModeControl(composite, params.getScriptNameDescription());
    final RadioButtonsLogic<LookupMode> lookupModeLogic = lookupModeControl.createLogic(radioButtonsListener);
    return new TabElements() {

        @Override
        public StringFieldEditor getHost() {
            return debugHost;
        }

        @Override
        public IntegerFieldEditor getPort() {
            return debugPort;
        }

        @Override
        public BooleanFieldEditor getAddNetworkConsole() {
            return addNetworkConsole;
        }

        @Override
        public RadioButtonsLogic<Integer> getBreakpointRadioButtons() {
            return breakpointRadioButtons;
        }

        @Override
        public RadioButtonsLogic<LookupMode> getLookupMode() {
            return lookupModeLogic;
        }
    };
}
