private void getTransitionLine(tempInfoSintatico temp, int firstSubMachineLine, int numberOfSubMachineStates) throws IOException {
    int semanticFunction = -1;
    int subMaquina = -1;
    int nextState = -1;
    int currentState = -1;
    @SuppressWarnings("deprecation") StringTokenizer st = new StringTokenizer(configFile.readLine());
    /* Ordem dos parametros a serem lidos do arquivo para transições:
         *   - Chamada de sub maquina(opcional)
         *   - Estado Atual
         *   - Seta (  -> )
         *   - Estado Destino
         *   - Tipo de Token que provoca a transicao
         *   - Função Semântica a ser executada quando a maquina realizar a
         *     transicao
         * Ordem dos parametros a serem lidos para propriedades do estado:
         *   - Propriedade
         *   - Estado
         */
    String start = st.nextToken();
    if (start.equals("final")) {
        int state = Integer.parseInt(st.nextToken());
        if (state >= numberOfSubMachineStates) {
            throw new Error("State does not exist in this sub machine");
        }
        temp.finalStates[state + firstSubMachineLine] = 1;
        return;
    }
    if (start.startsWith(".")) {
        // sub Machine Call
        subMaquina = getSubMachineNumberByID(start.substring(1));
        if (subMaquina == -1) {
            // Se a sub maquina ainda nao foi lida, aloca uma posicao para ela.
            subMaquina = newSubMachine(start.substring(1));
        }
        start = st.nextToken();
    }
    currentState = Integer.parseInt(start) + firstSubMachineLine;
    if (currentState - firstSubMachineLine >= numberOfSubMachineStates) {
        throw new Error("State does not exist in this sub machine");
    }
    // ->
    st.nextToken();
    nextState = Integer.parseInt(st.nextToken()) + firstSubMachineLine;
    if (nextState - firstSubMachineLine >= numberOfSubMachineStates) {
        throw new Error("State does not exist in this sub machine");
    }
    // -
    st.nextToken();
    String tokenID = st.nextToken();
    int collumn = sint.getTokenTypeCollumn(lexico.getTokenTypeByID(tokenID));
    // -
    st.nextToken();
    // Semantic Function
    String sf = st.nextToken();
    try {
        semanticFunction = Integer.parseInt(sf);
        System.out.println("aeaeae" + semanticFunction);
    } catch (NumberFormatException nfe) {
    // OK
    }
    temp.transitionTable[collumn][currentState] = new TransSintatica(nextState, semanticFunction, subMaquina);
    return;
}
