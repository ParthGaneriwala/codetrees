public static String buildVAppTempateParams(String vAppTemplateStr, String vAppName, Map<String, String> productProps, VirtualHardwareSection vHardware, String networkURL) throws IOException {
    Document document = DocumentHelper.createDocument();
    Element root = document.addElement("InstantiateVAppTemplateParams");
    root.addAttribute("name", vAppName);
    root.addAttribute("xml:lang", "en");
    root.add(VCloudNameSpaces.VCLOUD);
    root.add(VCloudNameSpaces.XSI);
    // Element vAppTemplate =
    root.addElement("VAppTemplate").addAttribute("href", vAppTemplateStr);
    Element instantiationParams = root.addElement("InstantiationParams");
    Element productSection = instantiationParams.addElement("ProductSection");
    productSection.add(VCloudNameSpaces.OVF);
    productSection.add(VCloudNameSpaces.Q1);
    QName ovfKey = new QName("key", VCloudNameSpaces.OVF);
    QName ovfVal = new QName("value", VCloudNameSpaces.OVF);
    for (String key : productProps.keySet()) {
        String val = productProps.get(key);
        productSection.addElement("Property").addAttribute(ovfKey, key).addAttribute(ovfVal, val).add(new Namespace("", "http://schemas.dmtf.org/ovf/envelope/1"));
    }
    createVirtualHardwareSection(instantiationParams, vHardware);
    // Element networkConfigSection =
    instantiationParams.addElement("NetworkConfigSection").addElement("NetworkConfig").addElement("NetworkAssociation").addAttribute("href", networkURL);
    OutputFormat format = OutputFormat.createPrettyPrint();
    format.setExpandEmptyElements(false);
    format.setSuppressDeclaration(true);
    StringWriter sw = new StringWriter();
    XMLWriter writer = new XMLWriter(sw, format);
    writer.write(document);
    return toString(document);
}
