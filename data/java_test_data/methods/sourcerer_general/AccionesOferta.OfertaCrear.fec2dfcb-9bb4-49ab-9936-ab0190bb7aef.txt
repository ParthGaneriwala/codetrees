public ActionForward OfertaCrear(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
    // Salidas
    final String SALIDA_1 = "oferta";
    String salida = SALIDA_1;
    Session s = HibernateUtil.getSessionFactory().getCurrentSession();
    Transaction tr = s.beginTransaction();
    try {
        FOferta fFOferta = (FOferta) form;
        Oferta oferta = new Oferta();
        if (fFOferta.getPeriodo() == 0)
            oferta.setPeriodo(null);
        else if ((oferta.getPeriodo() == null) || (oferta.getPeriodo().getIdPeriodo() != fFOferta.getPeriodo())) {
            Periodo obj = (Periodo) s.load(Periodo.class, fFOferta.getPeriodo());
            oferta.setPeriodo(obj);
        }
        if (fFOferta.getPlanDeEstudios() == 0)
            oferta.setPlanDeEstudios(null);
        else if ((oferta.getPlanDeEstudios() == null) || (oferta.getPlanDeEstudios().getIdPlan() != fFOferta.getPlanDeEstudios())) {
            PlanDeEstudios obj = (PlanDeEstudios) s.load(PlanDeEstudios.class, fFOferta.getPlanDeEstudios());
            oferta.setPlanDeEstudios(obj);
        }
        if (fFOferta.getRequisito() == 0)
            oferta.setRequisito(null);
        else if ((oferta.getRequisito() == null) || (oferta.getRequisito().getIdRequisito() != fFOferta.getRequisito())) {
            Requisitos obj = (Requisitos) s.load(Requisitos.class, fFOferta.getRequisito());
            oferta.setRequisito(obj);
        }
        s.save(oferta);
        s.flush();
        fFOferta.setIdOferta(oferta.getIdOferta());
        // Feed for combo listPeriodo.
        {
            java.util.List<ve.usb.cohesion.runtime.Pair> list = (java.util.List<ve.usb.cohesion.runtime.Pair>) s.createQuery("select new ve.usb.cohesion.runtime.Pair(nombre, idPeriodo) " + "from Periodo").list();
            list.add(0, new ve.usb.cohesion.runtime.Pair("Ninguna", 0));
            fFOferta.setListPeriodo(list);
        }
        if (Integer.parseInt(request.getSession().getAttribute("tipoUsuario").toString()) != 0) {
            // Feed for combo listPlanDeEstudios.
            {
                java.util.List<ve.usb.cohesion.runtime.Pair> list = (java.util.List<ve.usb.cohesion.runtime.Pair>) s.createQuery("select new ve.usb.cohesion.runtime.Pair(carrera, idPlan) " + "from PlanDeEstudios where coordinacion = " + request.getParameter("idCoordinacion")).list();
                list.add(0, new ve.usb.cohesion.runtime.Pair("Ninguna", 0));
                fFOferta.setListPlanDeEstudios(list);
            }
            // Feed for combo listRequisitos.
            {
                java.util.List<ve.usb.cohesion.runtime.Pair> list = (java.util.List<ve.usb.cohesion.runtime.Pair>) s.createQuery("select new ve.usb.cohesion.runtime.Pair(asignatura.codigo, idRequisito) " + "from Requisitos where grupo.planDeEstudios.coordinacion = " + request.getParameter("idCoordinacion")).list();
                list.add(0, new ve.usb.cohesion.runtime.Pair("Ninguna", 0));
                fFOferta.setListRequisitos(list);
            }
        } else {
            // Feed for combo listPlanDeEstudios.
            {
                java.util.List<ve.usb.cohesion.runtime.Pair> list = (java.util.List<ve.usb.cohesion.runtime.Pair>) s.createQuery("select new ve.usb.cohesion.runtime.Pair(carrera, idPlan) " + "from PlanDeEstudios").list();
                list.add(0, new ve.usb.cohesion.runtime.Pair("Ninguna", 0));
                fFOferta.setListPlanDeEstudios(list);
            }
            // Feed for combo listRequisitos.
            {
                java.util.List<ve.usb.cohesion.runtime.Pair> list = (java.util.List<ve.usb.cohesion.runtime.Pair>) s.createQuery("select new ve.usb.cohesion.runtime.Pair(asignatura.codigo, idRequisito) " + "from Requisitos").list();
                list.add(0, new ve.usb.cohesion.runtime.Pair("Ninguna", 0));
                fFOferta.setListRequisitos(list);
            }
        }
        request.getSession().setAttribute("idOferta", oferta.getIdOferta());
        tr.commit();
    } catch (Exception ex) {
        tr.rollback();
        throw ex;
    }
    return mapping.findForward(salida);
}
