public static final Service createSWFService(Page page, String defaultEntityPackage) {
    // set simple values
    String serviceClass = capitalize(page.getId()) + "Service";
    String validatorClass = capitalize(page.getId()) + "Validator";
    Service service = new Service(serviceClass, validatorClass);
    // form level logic
    for (Form form : page.getForms()) {
        if (form.getId() == null || form.getId().trim().length() == 0) {
            logger.error("why is this id empty?");
            continue;
        }
        // Do I generate an entity bean?
        String overriddenEntityClass = null;
        // by default, entity class object matching form fields.
        String entityClass = capitalize(form.getId());
        // field object has variable name e.g. "MyClass myClass" or "Issue issue"
        Field entityAsFieldObject = new Field(entityClass);
        if (overriddenEntityClass != null) {
            // user wants to use custom class to bind to form, such as JPA or BDB bean.
            entityClass = getClassNameFromFullyQualifiedClassName(overriddenEntityClass);
            logger.debug("overriding to use " + overriddenEntityClass + "(" + entityClass + ")");
            service.getImports().add(overriddenEntityClass);
            entityAsFieldObject = new Field(entityClass, form.getId());
        } else {
            service.getImports().add(defaultEntityPackage + "." + entityClass);
        }
        service.getEntities().add(entityClass);
        // handle form level actions.
        for (Action action : form.getActions()) {
            // method to actually perform action.
            service.getServiceMethods().add(new Method(form, "void", action.getId(), entityAsFieldObject));
            // method to actually validate input (entity) to action.
            service.getValidatorMethods().add(new Method(form, "void", "validate" + capitalize(action.getId()), entityAsFieldObject));
            // method to initialize entity in Spring Web Flow.
            service.getFlowMethods().add(new Method(form, entityClass, "start" + entityClass + "Flow"));
        }
        // Gets rendered to JSF SelectItem
        for (SingleUserInput input : form.getInputs()) {
            // String needs to be converted to Enum. (This should be moved somewhere else)
            InputTypeEnum type = InputTypeEnum.valueOf(input.getType().toUpperCase());
            if (type == RADIO || type == DROPDOWN || type == CHECKBOX || type == MULTIPLE) {
                Method dynPopMethod = new Method(form, "List<SelectItem>", "get" + input.getName() + "Options");
                service.getDynamicDataMethods().add(dynPopMethod);
                service.getImports().add("java.util.ArrayList");
                service.getImports().add("java.util.List");
                service.getImports().add("javax.faces.model.SelectItem");
            }
        }
    }
    if (page.isEmailUsed()) {
        service.getImports().add("javax.annotation.Resource");
        service.getImports().add("java.util.Map");
        service.getImports().add("java.util.HashMap");
    }
    return service;
}
