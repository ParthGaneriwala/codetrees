@Override
public void run() {
    String combinedMerchantInfo = merchantID + ":" + merchantKEY;
    byte[] encoded = Base64.encodeBase64(combinedMerchantInfo.getBytes());
    String encodedString = new String(encoded);
    authKey = "Basic " + encodedString;
    String xmlRequest = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + "<notification-history-request xmlns=\"http://checkout.google.com/schema/2\">" + "<start-time>" + startYear + "-" + startMonth + "-" + startDay + "T00:00:00" + timeZoneOffset + "</start-time>" + "<end-time>" + endYear + "-" + endMonth + "-" + endDay + "T" + endTime + timeZoneOffset + "</end-time>" + "<notification-types>" + "<notification-type>new-order</notification-type>" + "</notification-types>" + "</notification-history-request>";
    String xmlRequestNextPage = "";
    String xmlRequest2 = "<order-list-request xmlns=\"http://checkout.google.com/schema/2\" " + "start-date=\"" + startYear + "-" + startMonth + "-" + startDay + "T00:00:00\" " + "end-date=\"" + endYear + "-" + endMonth + "-" + endDay + "T" + endTime + "\">" + "<date-time-zone>" + timeZone + "</date-time-zone>" + "</order-list-request>";
    try {
        url = new URL("https://checkout.google.com/api/checkout/v2/reports/Merchant/" + merchantID);
        try {
            urlConnection = url.openConnection();
        } catch (IOException e) {
            e.printStackTrace();
        }
        urlConnection.setRequestProperty("Authorization", authKey);
        urlConnection.setRequestProperty("Content-Type", "application/xml;charset=UTF-8");
        urlConnection.setRequestProperty("Accept", "application/xml;charset=UTF-8");
        urlConnection.setDoOutput(true);
        OutputStreamWriter wr = null;
        try {
            wr = new OutputStreamWriter(urlConnection.getOutputStream());
        } catch (IOException e) {
            e.printStackTrace();
        }
        try {
            wr.write(xmlRequest);
        } catch (IOException e) {
            e.printStackTrace();
        }
        try {
            wr.flush();
        } catch (IOException e) {
            e.printStackTrace();
        }
        BufferedReader rd = null;
        try {
            rd = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));
        } catch (IOException e) {
            e.printStackTrace();
        }
        String line;
        buf = new StringBuffer();
        if (rd != null) {
            try {
                while ((line = rd.readLine()) != null) {
                    if (line.contains("item-name") || line.contains("google-order-number") || line.contains("next-page-token")) {
                        buf.append(line + "\n");
                    }
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        } else {
            toastText = "Error: No data found.";
        }
        try {
            wr.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
        if (rd != null) {
            try {
                rd.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        orderList = new ArrayList<Order>();
        buildOrderList(buf.toString());
        while (nextPageToken != null) {
            xmlRequestNextPage = "<notification-history-request xmlns=\"http://checkout.google.com/schema/2\">" + "<next-page-token>" + nextPageToken + "</next-page-token>" + "</notification-history-request>";
            url = new URL("https://checkout.google.com/api/checkout/v2/reports/Merchant/" + merchantID);
            try {
                urlConnection = url.openConnection();
            } catch (IOException e) {
                e.printStackTrace();
            }
            urlConnection.setRequestProperty("Authorization", authKey);
            urlConnection.setRequestProperty("Content-Type", "application/xml;charset=UTF-8");
            urlConnection.setRequestProperty("Accept", "application/xml;charset=UTF-8");
            urlConnection.setDoOutput(true);
            wr = null;
            try {
                wr = new OutputStreamWriter(urlConnection.getOutputStream());
            } catch (IOException e) {
                e.printStackTrace();
            }
            try {
                wr.write(xmlRequestNextPage);
            } catch (IOException e) {
                e.printStackTrace();
            }
            try {
                wr.flush();
            } catch (IOException e) {
                e.printStackTrace();
            }
            rd = null;
            try {
                rd = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));
            } catch (IOException e) {
                e.printStackTrace();
            }
            buf = new StringBuffer();
            try {
                while ((line = rd.readLine()) != null) {
                    if (line.contains("item-name") || line.contains("google-order-number") || line.contains("next-page-token")) {
                        buf.append(line + "\n");
                    }
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
            try {
                wr.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
            try {
                rd.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
            buildOrderList(buf.toString());
        }
        // /////////////Request Order Report//////////////////
        orderReport = new ArrayList<String[]>();
        url = new URL("https://checkout.google.com/api/checkout/v2/reports/Merchant/" + merchantID);
        try {
            urlConnection = url.openConnection();
        } catch (IOException e) {
            e.printStackTrace();
        }
        urlConnection.setRequestProperty("Authorization", authKey);
        urlConnection.setRequestProperty("Content-Type", "application/xml;charset=UTF-8");
        urlConnection.setRequestProperty("Accept", "application/xml;charset=UTF-8");
        urlConnection.setDoOutput(true);
        OutputStreamWriter wr2 = null;
        try {
            wr2 = new OutputStreamWriter(urlConnection.getOutputStream());
        } catch (IOException e) {
            e.printStackTrace();
        }
        try {
            wr2.write(xmlRequest2);
        } catch (IOException e) {
            e.printStackTrace();
        }
        try {
            wr2.flush();
        } catch (IOException e) {
            e.printStackTrace();
        }
        try {
            rd = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));
        } catch (IOException e) {
            e.printStackTrace();
        }
        if (rd != null) {
            try {
                while ((line = rd.readLine()) != null) {
                    String[] results = line.split(",");
                    orderReport.add(results);
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        } else {
            toastText = "Error: No data found.";
        }
        try {
            wr2.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
        if (rd != null) {
            try {
                rd.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        FileOutputStream fOut = null;
        try {
            fOut = openFileOutput("output.txt", MODE_WORLD_WRITEABLE);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
        OutputStreamWriter osw = new OutputStreamWriter(fOut);
        try {
            osw.write(buf.toString());
        } catch (IOException e) {
            e.printStackTrace();
        }
        try {
            osw.flush();
        } catch (IOException e) {
            e.printStackTrace();
        }
        try {
            osw.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    } catch (MalformedURLException e) {
        e.printStackTrace();
    }
    handler.sendEmptyMessage(0);
}
