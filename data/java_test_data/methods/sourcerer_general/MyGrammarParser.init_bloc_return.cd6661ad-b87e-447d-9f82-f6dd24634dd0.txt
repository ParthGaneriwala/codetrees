// $ANTLR start "init_bloc_return"
public final MyGrammarParser.init_bloc_return_return init_bloc_return() throws RecognitionException {
    MyGrammarParser.init_bloc_return_return retval = new MyGrammarParser.init_bloc_return_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token BEGIN127 = null;
    Token RETURN129 = null;
    Token IDENTIFIER130 = null;
    Token PVG131 = null;
    Token END132 = null;
    Token IDENTIFIER133 = null;
    MyGrammarParser.body_bloc_return body_bloc128 = null;
    CommonTree BEGIN127_tree = null;
    CommonTree RETURN129_tree = null;
    CommonTree IDENTIFIER130_tree = null;
    CommonTree PVG131_tree = null;
    CommonTree END132_tree = null;
    CommonTree IDENTIFIER133_tree = null;
    RewriteRuleTokenStream stream_END = new RewriteRuleTokenStream(adaptor, "token END");
    RewriteRuleTokenStream stream_IDENTIFIER = new RewriteRuleTokenStream(adaptor, "token IDENTIFIER");
    RewriteRuleTokenStream stream_BEGIN = new RewriteRuleTokenStream(adaptor, "token BEGIN");
    RewriteRuleTokenStream stream_PVG = new RewriteRuleTokenStream(adaptor, "token PVG");
    RewriteRuleTokenStream stream_RETURN = new RewriteRuleTokenStream(adaptor, "token RETURN");
    RewriteRuleSubtreeStream stream_body_bloc = new RewriteRuleSubtreeStream(adaptor, "rule body_bloc");
    try {
        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:242:17: ( BEGIN body_bloc RETURN IDENTIFIER PVG END IDENTIFIER -> ^( INIT_BLOC_RETURN body_bloc IDENTIFIER IDENTIFIER ) )
        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:242:20: BEGIN body_bloc RETURN IDENTIFIER PVG END IDENTIFIER
        {
            BEGIN127 = (Token) match(input, BEGIN, FOLLOW_BEGIN_in_init_bloc_return1957);
            stream_BEGIN.add(BEGIN127);
            pushFollow(FOLLOW_body_bloc_in_init_bloc_return1959);
            body_bloc128 = body_bloc();
            state._fsp--;
            stream_body_bloc.add(body_bloc128.getTree());
            RETURN129 = (Token) match(input, RETURN, FOLLOW_RETURN_in_init_bloc_return1961);
            stream_RETURN.add(RETURN129);
            IDENTIFIER130 = (Token) match(input, IDENTIFIER, FOLLOW_IDENTIFIER_in_init_bloc_return1963);
            stream_IDENTIFIER.add(IDENTIFIER130);
            PVG131 = (Token) match(input, PVG, FOLLOW_PVG_in_init_bloc_return1965);
            stream_PVG.add(PVG131);
            END132 = (Token) match(input, END, FOLLOW_END_in_init_bloc_return1967);
            stream_END.add(END132);
            IDENTIFIER133 = (Token) match(input, IDENTIFIER, FOLLOW_IDENTIFIER_in_init_bloc_return1969);
            stream_IDENTIFIER.add(IDENTIFIER133);
            // AST REWRITE
            // elements: body_bloc, IDENTIFIER, IDENTIFIER
            // token labels:
            // rule labels: retval
            // token list labels:
            // rule list labels:
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", retval != null ? retval.tree : null);
            root_0 = (CommonTree) adaptor.nil();
            // 242:73: -> ^( INIT_BLOC_RETURN body_bloc IDENTIFIER IDENTIFIER )
            {
                // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:242:76: ^( INIT_BLOC_RETURN body_bloc IDENTIFIER IDENTIFIER )
                {
                    CommonTree root_1 = (CommonTree) adaptor.nil();
                    root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(INIT_BLOC_RETURN, "INIT_BLOC_RETURN"), root_1);
                    adaptor.addChild(root_1, stream_body_bloc.nextTree());
                    adaptor.addChild(root_1, stream_IDENTIFIER.nextNode());
                    adaptor.addChild(root_1, stream_IDENTIFIER.nextNode());
                    adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
