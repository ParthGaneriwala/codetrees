protected int[] executeBatchedInserts(int batchTimeout) throws SQLException {
    String valuesClause = getValuesClause();
    MySQLConnection locallyScopedConn = this.connection;
    if (valuesClause == null) {
        return executeBatchSerially(batchTimeout);
    }
    int numBatchedArgs = this.batchedArgs.size();
    if (this.retrieveGeneratedKeys) {
        this.batchedGeneratedKeys = new ArrayList(numBatchedArgs);
    }
    int numValuesPerBatch = computeBatchSize(numBatchedArgs);
    if (numBatchedArgs < numValuesPerBatch) {
        numValuesPerBatch = numBatchedArgs;
    }
    java.sql.PreparedStatement batchedStatement = null;
    int batchedParamIndex = 1;
    int updateCountRunningTotal = 0;
    int numberToExecuteAsMultiValue = 0;
    int batchCounter = 0;
    CancelTask timeoutTask = null;
    SQLException sqlEx = null;
    int[] updateCounts = new int[numBatchedArgs];
    for (int i = 0; i < this.batchedArgs.size(); i++) {
        updateCounts[i] = 1;
    }
    try {
        try {
            batchedStatement = /* FIXME -if we ever care about folks proxying our MySQLConnection */
            prepareBatchedInsertSQL((MySQLConnection) locallyScopedConn, numValuesPerBatch);
            if (locallyScopedConn.getEnableQueryTimeouts() && batchTimeout != 0 && locallyScopedConn.versionMeetsMinimum(5, 0, 0)) {
                timeoutTask = new CancelTask((StatementImpl) batchedStatement);
                locallyScopedConn.getCancelTimer().schedule(timeoutTask, batchTimeout);
            }
            if (numBatchedArgs < numValuesPerBatch) {
                numberToExecuteAsMultiValue = numBatchedArgs;
            } else {
                numberToExecuteAsMultiValue = numBatchedArgs / numValuesPerBatch;
            }
            int numberArgsToExecute = numberToExecuteAsMultiValue * numValuesPerBatch;
            for (int i = 0; i < numberArgsToExecute; i++) {
                if (i != 0 && i % numValuesPerBatch == 0) {
                    try {
                        updateCountRunningTotal += batchedStatement.executeUpdate();
                    } catch (SQLException ex) {
                        sqlEx = handleExceptionForBatch(batchCounter - 1, numValuesPerBatch, updateCounts, ex);
                    }
                    getBatchedGeneratedKeys(batchedStatement);
                    batchedStatement.clearParameters();
                    batchedParamIndex = 1;
                }
                batchedParamIndex = setOneBatchedParameterSet(batchedStatement, batchedParamIndex, this.batchedArgs.get(batchCounter++));
            }
            try {
                updateCountRunningTotal += batchedStatement.executeUpdate();
            } catch (SQLException ex) {
                sqlEx = handleExceptionForBatch(batchCounter - 1, numValuesPerBatch, updateCounts, ex);
            }
            getBatchedGeneratedKeys(batchedStatement);
            numValuesPerBatch = numBatchedArgs - batchCounter;
        } finally {
            if (batchedStatement != null) {
                batchedStatement.close();
            }
        }
        try {
            if (numValuesPerBatch > 0) {
                batchedStatement = prepareBatchedInsertSQL((MySQLConnection) locallyScopedConn, numValuesPerBatch);
                if (timeoutTask != null) {
                    timeoutTask.toCancel = (StatementImpl) batchedStatement;
                }
                batchedParamIndex = 1;
                while (batchCounter < numBatchedArgs) {
                    batchedParamIndex = setOneBatchedParameterSet(batchedStatement, batchedParamIndex, this.batchedArgs.get(batchCounter++));
                }
                try {
                    updateCountRunningTotal += batchedStatement.executeUpdate();
                } catch (SQLException ex) {
                    sqlEx = handleExceptionForBatch(batchCounter - 1, numValuesPerBatch, updateCounts, ex);
                }
                getBatchedGeneratedKeys(batchedStatement);
            }
            if (sqlEx != null) {
                throw new java.sql.BatchUpdateException(sqlEx.getMessage(), sqlEx.getSQLState(), sqlEx.getErrorCode(), updateCounts);
            }
            return updateCounts;
        } finally {
            if (batchedStatement != null) {
                batchedStatement.close();
            }
        }
    } finally {
        if (timeoutTask != null) {
            timeoutTask.cancel();
            locallyScopedConn.getCancelTimer().purge();
        }
        resetCancelledState();
    }
}
