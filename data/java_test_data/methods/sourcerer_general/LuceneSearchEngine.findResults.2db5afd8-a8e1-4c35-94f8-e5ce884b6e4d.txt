public Collection findResults(String virtualWiki, String text) {
    StandardAnalyzer analyzer = new StandardAnalyzer();
    Collection results = new Vector();
    logger.fine("search text: " + text);
    IndexSearcher searcher = null;
    try {
        BooleanQuery query = new BooleanQuery();
        QueryParser qp;
        qp = new QueryParser(ITYPE_TOPIC, analyzer);
        query.add(qp.parse(text), Occur.SHOULD);
        qp = new QueryParser(ITYPE_CONTENT, analyzer);
        query.add(qp.parse(text), Occur.SHOULD);
        searcher = new IndexSearcher(FSDirectory.getDirectory(getSearchIndexPath(virtualWiki)));
        // rewrite the query to expand it - required for wildcards to work with highlighter
        Query rewrittenQuery = searcher.rewrite(query);
        // actually perform the search
        Hits hits = searcher.search(rewrittenQuery);
        Highlighter highlighter = new Highlighter(new SimpleHTMLFormatter("<span class=\"highlight\">", "</span>"), new SimpleHTMLEncoder(), new QueryScorer(rewrittenQuery));
        for (int i = 0; i < hits.length(); i++) {
            String summary = retrieveResultSummary(hits.doc(i), highlighter, analyzer);
            String title = retrieveResultTitle(hits.doc(i), highlighter, analyzer);
            SearchResultEntry result = new SearchResultEntry();
            result.setRanking(hits.score(i));
            result.setTopic(hits.doc(i).get(ITYPE_TOPIC_PLAIN));
            title = title.replaceAll("Image:", "");
            title = title.replaceAll(".doc", "");
            title = title.replaceAll(".vsd", "");
            result.setTitle(title);
            result.setSummary(summary.replaceAll("&nbsp;&nbsp;", " "));
            results.add(result);
        }
    } catch (Exception e) {
        logger.severe("Exception while searching for " + text, e);
    } finally {
        if (searcher != null) {
            try {
                searcher.close();
            } catch (Exception e) {
            }
        }
    }
    return results;
}
