private float[][] GAMRasterFromFile(File inFile) {
    // most of this stuff is from BatchMain
    // run GAM on this file
    InitGAMFile igf = new InitGAMFile();
    try {
        igf.processTextFileWithoutDialog(inFile);
    } catch (FileNotFoundException fnfe) {
        System.out.println("why isn't " + inFile + " found?  " + fnfe.getMessage());
    } catch (IOException ioe) {
        System.out.println("io exception: " + ioe.getMessage());
    }
    SystematicGam gam = new SystematicGam();
    double largeDimension = Math.max(igf.getMaxX() - igf.getMinX(), igf.getMaxY() - igf.getMinY());
    gam.setMaxRadius(0.05 * largeDimension);
    gam.setMinRadius(0.005 * largeDimension);
    gam.setMinPoints(3);
    gam.setMinAccepted(1.5);
    gam.setFitnessFunction(new FitnessRelativePct(igf.getDataSet()));
    gam.setInitializer(igf);
    ImageProcessor ip = new ImageProcessor();
    ip.setInitializer(igf);
    ip.setGam(gam);
    // get the image
    GridCoverage2D coverage = ip.generateCoverageGAMOpt();
    // binarize it
    int floor = (int) Math.floor(ip.getMinHeight());
    int ceiling = (int) Math.ceil(ip.getMaxHeight());
    AbstractProcessor def = DefaultProcessor.getInstance();
    Operations ops = new Operations(new RenderingHints(null));
    Operation binOp = def.getOperation("Binarize");
    ParameterValueGroup pvg = binOp.getParameters();
    GridCoverage2D band0 = (GridCoverage2D) ops.selectSampleDimension(coverage, new int[] { 0 });
    // I have the space, so use it!
    String noExtension = inFile.getPath().substring(0, inFile.getPath().length() - 4);
    String filePath = noExtension + "GAMRaster.csv";
    saveRaster(DissUtils.coverageToMatrix(band0), filePath);
    pvg.parameter("Source").setValue(band0);
    pvg.parameter("Threshold").setValue(new Double(floor + (ceiling - floor) / 4));
    GridCoverage2D binarized = (GridCoverage2D) def.doOperation(pvg);
    return DissUtils.coverageToMatrix(binarized);
}
