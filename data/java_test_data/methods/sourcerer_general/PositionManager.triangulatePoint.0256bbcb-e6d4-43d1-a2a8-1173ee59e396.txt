/*
	 * Triangulation Solution
	 * - Use the magnitudes of vectors from six other points to determine point position in new affine space 
	 */
public double[] triangulatePoint(TempPoint tp) {
    // System.out.println("Triangulating Point");
    TempPoint[] bPoints = getPoints(bFile_, 6);
    if (bPoints == null) {
        return null;
    }
    // System.out.println(bPoints.length);
    double[] magnitudes = new double[6];
    for (int i = 0; i < 6; i++) {
        magnitudes[i] = tp.getMagSquared(bPoints[i].getPosition());
    // magnitudes[i] = bPoints[i].getMagSquared(tp.getPosition());
    }
    TempPoint[] cPoints = getPoints(cFile_, 6);
    if (cPoints == null) {
        return null;
    }
    /*
		 * Preparing to solve Ax = B 
		 */
    double[][] A = new double[6][6];
    double[] B = new double[6];
    for (int i = 0; i < 6; i++) {
        double[] pos = cPoints[i].getPosition();
        B[i] = magnitudes[i] - Math.pow(pos[0], 2) - Math.pow(pos[1], 2) - Math.pow(pos[2], 2);
        A[i][0] = 1;
        A[i][1] = -2 * pos[0];
        A[i][2] = 1;
        A[i][3] = -2 * pos[1];
        A[i][4] = 1;
        A[i][5] = -2 * pos[2];
    }
    Matrix Am = new Matrix(A);
    Matrix Bm = new Matrix(B, 6);
    QRDecomposition QR = new QRDecomposition(Am);
    Matrix xm = QR.solve(Bm);
    double[][] x = xm.getArray();
    /*System.out.println(x[0][0] + " " + Math.sqrt(x[0][0]));
		System.out.println(x[1][0]);
		System.out.println(x[2][0] + " " + Math.sqrt(x[2][0]));
		System.out.println(x[3][0]);
		System.out.println(x[4][0] + " " + Math.sqrt(x[4][0]));
		System.out.println(x[5][0]);*/
    double[] pt = new double[3];
    pt[0] = x[1][0];
    pt[1] = x[3][0];
    pt[2] = x[5][0];
    return pt;
}
