public String doView(RenderRequest request, RenderResponse response) throws Exception {
    String defaultView = VIEW_PAGE;
    // Preferences
    request.setAttribute(TITLE, request.getPreferences().getValue(PREF_TITLE, null));
    String limit = request.getPreferences().getValue(PREF_LIMIT, null);
    // Filter Preferences
    String minimumRatingCount = request.getPreferences().getValue(PREF_PREF_MINIMUM_RATING_COUNT, null);
    String minimumRatingAvg = request.getPreferences().getValue(PREF_PREF_MINIMUM_RATING_AVG, null);
    String filterInappropriate = request.getPreferences().getValue(PREF_FILTER_INAPPROPRIATE, null);
    Connection db = PortalUtils.useConnection(request);
    // Get the project if available
    Project project = PortalUtils.findProject(request);
    TopicList recentTopicList = new TopicList();
    PagedListInfo recentIssueListInfo = PortalUtils.getPagedListInfo(request, "recentIssueListInfo");
    recentIssueListInfo.setColumnToSortBy("entered DESC");
    recentIssueListInfo.setItemsPerPage(limit);
    recentTopicList.setPagedListInfo(recentIssueListInfo);
    // Filters based on ratings
    if (StringUtils.hasText(minimumRatingCount) && StringUtils.isNumber(minimumRatingCount)) {
        recentTopicList.setMinimumRatingCount(minimumRatingCount);
    }
    if (StringUtils.hasText(minimumRatingAvg)) {
        recentTopicList.setMinimumRatingAvg(minimumRatingAvg);
    }
    if ("true".equals(filterInappropriate)) {
        recentTopicList.setFilterInappropriate(Constants.TRUE);
    }
    // if no project is available, look for category in preferences
    User thisUser = PortalUtils.getUser(request);
    if (project == null) {
        recentTopicList.setInstanceId(PortalUtils.getInstance(request).getId());
        boolean privateCategory = false;
        String categoryValue = request.getPreferences().getValue(PREF_CATEGORY, null);
        if (categoryValue != null) {
            ProjectCategoryList categories = new ProjectCategoryList();
            categories.setEnabled(true);
            categories.setTopLevelOnly(true);
            categories.setCategoryDescriptionLowerCase(categoryValue.toLowerCase());
            categories.buildList(db);
            if (categories.size() > 0) {
                ProjectCategory category = categories.get(0);
                if (category.getSensitive()) {
                    privateCategory = true;
                }
                recentTopicList.setProjectCategoryId(category.getId());
            }
        }
        if (PortalUtils.getDashboardPortlet(request).isCached()) {
            if (PortalUtils.canShowSensitiveData(request) || privateCategory) {
                // Use the most generic settings since this portlet is cached
                recentTopicList.setForParticipant(Constants.TRUE);
            } else {
                // Use the most generic settings since this portlet is cached
                recentTopicList.setPublicProjectIssues(Constants.TRUE);
            }
        } else {
            // Use the current user's setting
            if (thisUser.isLoggedIn()) {
                recentTopicList.setForUser(thisUser.getId());
            } else {
                recentTopicList.setPublicProjectIssues(Constants.TRUE);
            }
        }
        request.setAttribute(SHOW_PROJECT_TITLE, "true");
        request.setAttribute(SHOW_DISCUSSION_LINK, "true");
    } else {
        // determine if the user has access to view discussion topics of the project
        if (ProjectUtils.hasAccess(project.getId(), thisUser, "project-discussion-forums-view")) {
            request.setAttribute(SHOW_DISCUSSION_LINK, "true");
        }
        recentTopicList.setProjectId(project.getId());
    }
    recentTopicList.buildList(db);
    if (recentTopicList.size() == 0) {
        return null;
    }
    request.setAttribute(DISCUSSION_LIST, recentTopicList);
    return defaultView;
}
