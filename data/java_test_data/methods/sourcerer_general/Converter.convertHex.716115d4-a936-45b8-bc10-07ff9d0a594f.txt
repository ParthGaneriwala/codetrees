private void convertHex() {
    String hexIP = ipHex.getText().toString().trim();
    if (debug)
        Log.d(TAG, "convertHex: hexIP=" + hexIP);
    if (hexIP.length() < 11) {
        Toast.makeText(Converter.this, R.string.err_bad_ip, Toast.LENGTH_SHORT).show();
        if (debug)
            Log.d(TAG, "convertHex: less than 11");
        return;
    }
    try {
        String octet1b = hexIP.substring(0, 2);
        if (debug)
            Log.d(TAG, "convertHex: octet1b=" + octet1b);
        String octet2b = hexIP.substring(3, 5);
        if (debug)
            Log.d(TAG, "convertHex: octet2b=" + octet2b);
        String octet3b = hexIP.substring(6, 8);
        if (debug)
            Log.d(TAG, "convertHex: octet3b=" + octet3b);
        String octet4b = hexIP.substring(9, 11);
        if (debug)
            Log.d(TAG, "convertHex: octet4b=" + octet4b);
        long octet1i = Integer.parseInt(octet1b, 16);
        long octet2i = Integer.parseInt(octet2b, 16);
        long octet3i = Integer.parseInt(octet3b, 16);
        long octet4i = Integer.parseInt(octet4b, 16);
        currentIP = octet1i + "." + octet2i + "." + octet3i + "." + octet4i;
        ipAddress.setText(currentIP);
        int ip32bit;
        ip32bit = CIDRCalculator.stringIPtoInt(currentIP);
        String binaryIP = convertIPIntDec2StringBinary(ip32bit);
        ipBinary.setText(binaryIP);
    } catch (NumberFormatException e) {
        Toast.makeText(Converter.this, R.string.err_bad_ip, Toast.LENGTH_SHORT).show();
        if (debug)
            Log.d(TAG, "convertHex: numberFormatException");
    } catch (StringIndexOutOfBoundsException e) {
        Toast.makeText(Converter.this, R.string.err_bad_ip, Toast.LENGTH_SHORT).show();
        if (debug)
            Log.d(TAG, "convertHex: StringIndexOutOfBoundsException");
    } catch (Exception e) {
        Toast.makeText(Converter.this, R.string.err_bad_ip, Toast.LENGTH_SHORT).show();
        if (debug)
            Log.d(TAG, "convertHex: Exception");
    }
}
