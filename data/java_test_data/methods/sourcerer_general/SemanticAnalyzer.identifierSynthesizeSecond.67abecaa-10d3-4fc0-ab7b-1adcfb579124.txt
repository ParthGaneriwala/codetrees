private void identifierSynthesizeSecond(ParseNode node) {
    int numberOfChildren = node.nChildren();
    if (numberOfChildren != 0) {
        int numberOfColon = 0;
        for (int i = 0; i < numberOfChildren; i++) {
            if (node.child(i).getSymbol().isPuctuation(PunctuationSymbol.COLON))
                numberOfColon++;
        }
        if (numberOfColon == 2) {
        } else {
            // is is a routine invocation
            int[] ShiCan = new int[100];
            int numOfShiCan = 0;
            String routtineID = tokenFor(node).getLexeme();
            String name = "routine-" + routtineID + "-";
            for (int i = 0; i < numberOfChildren - 1; i++) {
                ShiCan[i] = getTypeNumber(node.child(i));
                if (getTypeNumber(node.child(i)) == 1) {
                    name += "int-";
                } else if (getTypeNumber(node.child(i)) == 2) {
                    name += "float-";
                } else if (getTypeNumber(node.child(i)) == 3) {
                    name += "boolean-";
                } else {
                    name += "string-";
                }
                numOfShiCan++;
            }
            if (RoutineTable.lookupID(routtineID) == -1) {
                error("the routine \"" + routtineID + "\" has not been declared yet!!");
            } else {
                // still need to check para list
                if (RoutineTable.lookup(name) != null) {
                // direct match! do nothing
                // went to the following to set type
                } else {
                    // still might need promotion
                    boolean isError = true;
                    for (String eachR : RoutineTable.lookupAllRoutinesWithTheSameID(tokenFor(node).getLexeme())) {
                        boolean foundAconversion = true;
                        int[] XingCan = RoutineTable.lookup(eachR).getRoutineParaList();
                        int numOfXinCan = RoutineTable.lookup(eachR).getRoutineParaNumber();
                        // index of parameters which need to be
                        int[] indexOfPara = new int[100];
                        // converted to float from int
                        int numOfParaNeedConvert = 0;
                        for (int i = 0; i < numOfXinCan; i++) {
                            if (XingCan[i] == ShiCan[i])
                                continue;
                            else {
                                if (XingCan[i] == 2 && ShiCan[i] == 1) {
                                    indexOfPara[numOfParaNeedConvert++] = i;
                                } else {
                                    foundAconversion = false;
                                    break;
                                }
                            }
                        }
                        if (foundAconversion) {
                            // to deal with {{    {print;}    }} this case
                            KeywordToken tofloatToken = KeywordToken.make(null, "tofloat", Keyword.TOFLOAT);
                            KeywordNode tofloatNode = new KeywordNode(new TokenGrammarSymbol(tofloatToken));
                            List<ParseNode> oldChildren = node.getChildren();
                            node.newChildren();
                            int i = 0;
                            int j = 0;
                            for (ParseNode child : oldChildren) {
                                if (i++ == indexOfPara[j]) {
                                    j++;
                                    KeywordNode k = new KeywordNode(tofloatNode);
                                    k.setType(PrimitiveType.FLOAT);
                                    k.appendChild(child);
                                    node.appendChild(k);
                                } else {
                                    node.appendChild(child);
                                }
                            }
                            isError = false;
                            break;
                        }
                    }
                    if (isError) {
                        error("The parameter List type of routine \"" + routtineID + "\" are not consistent with the declaration! ");
                    }
                }
            }
            // make a new name
            name = "routine-" + routtineID + "-";
            for (int i = 0; i < numberOfChildren - 1; i++) {
                if (getTypeNumber(node.child(i)) == 1) {
                    name += "int-";
                } else if (getTypeNumber(node.child(i)) == 2) {
                    name += "float-";
                } else if (getTypeNumber(node.child(i)) == 3) {
                    name += "boolean-";
                } else {
                    name += "string-";
                }
            }
            if (RoutineTable.lookup(name).getRoutineReturnType() == 0)
                node.setType(PrimitiveType.UNDEFINED);
            else if (RoutineTable.lookup(name).getRoutineReturnType() == 1)
                node.setType(PrimitiveType.INTEGER);
            else if (RoutineTable.lookup(name).getRoutineReturnType() == 2)
                node.setType(PrimitiveType.FLOAT);
            else if (RoutineTable.lookup(name).getRoutineReturnType() == 3)
                node.setType(PrimitiveType.BOOLEAN);
            else if (RoutineTable.lookup(name).getRoutineReturnType() == 4)
                node.setType(PrimitiveType.STRING);
            else {
            // do nothing
            }
        }
    } else {
    }
}
