private Transizione insTRANS(Node node, Vector<Stato> lS, Vector<Transizione> lT) {
    // Estraggo tutti i nodi figli del nodo passato come parametro
    NodeList nl = node.getChildNodes();
    String nome = "";
    Stato s1 = null;
    Stato s2 = null;
    int length = 0;
    // Faccio passare tutti i tag figli della transizione
    for (int i = 0, cnt = nl.getLength(); i < cnt; i++) {
        // prendo il nome del nodo (identificatore tag)
        String test = nl.item(i).getNodeName();
        if (test.equalsIgnoreCase("id")) {
            // Prendo il valore del tag id
            nome = nl.item(i).getFirstChild().getNodeValue();
            // Controllo che non ci siano due transizioni con lo stesso id
            for (int j = 0; j < lT.size(); j++) {
                if (nome.equals(lT.get(j).getNome())) {
                    System.out.println("-- Due transizioni appartenenti alla stessa fsm non possono avere lo stesso id!!! --");
                    // per uscire dal programma
                    lT.get(-1);
                }
            }
        } else if (test.equalsIgnoreCase("s1")) {
            try {
                // Faccio un parse da String a int per il numero dello stato
                int stato = Integer.parseInt(nl.item(i).getFirstChild().getNodeValue());
                // Controllo che il numero dello stato non sia maggiore del numero degli stati della fsm
                if (stato >= lS.size() || stato < 0)
                    System.out.println("-- Il numero dello stato usato in una relazione dev'essere >= 0 e non può superare il numero totale degli stati di quella fsm!!! --");
                else {
                    // Estraggo dalla lista degli stati l'oggetto Stato identificato dall'id
                    // se non è ancora stata inizializzata relazioniTransizioni la inizializzo
                    s1 = getStatoById(stato, lS);
                // if(rel)
                // {
                // inizRel();
                // }
                }
            } catch (NumberFormatException ne) {
                System.out.println("-- Lo stato dev'essere identificato da un numero intero!!! --");
            }
        } else if (test.equalsIgnoreCase("s2")) {
            try {
                // Faccio un parse da String a int per il numero dello stato
                int stato = Integer.parseInt(nl.item(i).getFirstChild().getNodeValue());
                // Controllo che il numero dello stato non sia maggiore del numero degli stati della fsm
                if (stato >= lS.size() || stato < 0)
                    System.out.println("-- Il numero dello stato usato in una relazione dev'essere >= 0 e non può superare il numero totale degli stati di quella fsm!!! --");
                else {
                    // Estraggo dalla lista degli stati l'oggetto Stato identificato dall'id
                    s2 = getStatoById(stato, lS);
                }
            } catch (NumberFormatException ne) {
                System.out.println("-- Lo stato dev'essere identificato da un numero intero!!! --");
            }
        }
    /*
            else if(test.equalsIgnoreCase("length"))
            {
                System.out.println("length: " + nl.item(i).getFirstChild().getNodeValue());
            }*/
    }
    // Creo una istanza di Transizione
    Transizione T = null;
    // Prima di inizializzare T controllo che gli stati s1 e s2 non siano nulli
    if (s1 != null && s2 != null) {
        T = new Transizione(lT.size(), s1, s2);
        // Setto il nome simbolico della transizione
        T.setNome(nome);
    // Aggiungo allo stato sorgente della transizione la transizione stessa come transizione uscente
    // s1.addTransUscente(T);
    }
    return T;
}
