public void run() {
    loadCache();
    byte[] qbuffer = new byte[576];
    long starTime = System.currentTimeMillis();
    while (true) {
        try {
            DatagramPacket dnsq = new DatagramPacket(qbuffer, qbuffer.length);
            srvSocket.receive(dnsq);
            // 连接外部DNS进行解析。
            byte[] data = dnsq.getData();
            int dnsqLength = dnsq.getLength();
            byte[] udpreq = new byte[dnsqLength];
            System.arraycopy(data, 0, udpreq, 0, dnsqLength);
            // 尝试从缓存读取域名解析
            String questDomain = getRequestDomain(udpreq);
            Logger.d(TAG, "解析" + questDomain);
            if (dnsCache.containsKey(questDomain)) {
                sendDns(dnsCache.get(questDomain).getDnsResponse(), dnsq, srvSocket);
                Logger.d(TAG, "命中缓存");
            } else if (orgCache.containsKey(questDomain)) {
                // 如果为自定义域名解析
                byte[] ips = parseIPString(orgCache.get(questDomain));
                byte[] answer = createDNSResponse(udpreq, ips);
                addToCache(questDomain, answer);
                sendDns(answer, dnsq, srvSocket);
                Logger.d(TAG, "自定义解析" + orgCache);
            } else {
                starTime = System.currentTimeMillis();
                byte[] answer = fetchAnswer(udpreq);
                if (answer != null && answer.length != 0) {
                    addToCache(questDomain, answer);
                    sendDns(answer, dnsq, srvSocket);
                    Logger.d(TAG, "正确返回DNS解析，长度：" + answer.length + "  耗时：" + (System.currentTimeMillis() - starTime) / 1000 + "s");
                } else {
                    Logger.e(TAG, "返回DNS包长为0");
                }
            }
        /* For test, validate dnsCache */
        /*
                 * if (dnsCache.size() > 0) { Logger.d(TAG,
                 * "Domains in cache:"); Enumeration<String> enu =
                 * dnsCache.keys(); while (enu.hasMoreElements()) { String
                 * domain = (String) enu.nextElement(); DnsResponse resp =
                 * dnsCache.get(domain); Logger.d(TAG, domain + " : " +
                 * resp.getIPString()); } }
                 */
        } catch (SocketException e) {
            Logger.e(TAG, e.getLocalizedMessage());
            break;
        } catch (IOException e) {
            Logger.e(TAG, e.getLocalizedMessage());
        }
    }
}
