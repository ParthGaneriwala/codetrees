void testStartup(Configuration conf) throws IOException {
    System.out.println("Startup of the name-node in the checkpoint directory.");
    String primaryDirs = conf.get("dfs.name.dir");
    String primaryEditsDirs = conf.get("dfs.name.edits.dir");
    String checkpointDirs = conf.get("fs.checkpoint.dir");
    String checkpointEditsDirs = conf.get("fs.checkpoint.edits.dir");
    NameNode nn = startNameNode(conf, checkpointDirs, checkpointEditsDirs, StartupOption.REGULAR);
    // Starting secondary node in the same directory as the primary
    System.out.println("Startup of secondary in the same dir as the primary.");
    SecondaryNameNode secondary = null;
    try {
        secondary = startSecondaryNameNode(conf);
        assertFalse(secondary.getFSImage().isLockSupported(0));
        secondary.shutdown();
    } catch (IOException e) {
        // expected to fail
        assertTrue(secondary == null);
    }
    nn.stop();
    nn = null;
    // Starting primary node in the same directory as the secondary
    System.out.println("Startup of primary in the same dir as the secondary.");
    // secondary won't start without primary
    nn = startNameNode(conf, primaryDirs, primaryEditsDirs, StartupOption.REGULAR);
    boolean succeed = false;
    do {
        try {
            secondary = startSecondaryNameNode(conf);
            succeed = true;
        } catch (IOException ie) {
            // keep trying
            System.out.println("Try again: " + ie.getLocalizedMessage());
        }
    } while (!succeed);
    nn.stop();
    nn = null;
    try {
        nn = startNameNode(conf, checkpointDirs, checkpointEditsDirs, StartupOption.REGULAR);
        assertFalse(nn.getFSImage().isLockSupported(0));
        nn.stop();
        nn = null;
    } catch (IOException e) {
        // expected to fail
        assertTrue(nn == null);
    }
    // Try another secondary in the same directory
    System.out.println("Startup of two secondaries in the same dir.");
    // secondary won't start without primary
    nn = startNameNode(conf, primaryDirs, primaryEditsDirs, StartupOption.REGULAR);
    SecondaryNameNode secondary2 = null;
    try {
        secondary2 = startSecondaryNameNode(conf);
        assertFalse(secondary2.getFSImage().isLockSupported(0));
        secondary2.shutdown();
    } catch (IOException e) {
        // expected to fail
        assertTrue(secondary2 == null);
    }
    nn.stop();
    nn = null;
    secondary.shutdown();
    // Import a checkpoint with existing primary image.
    System.out.println("Import a checkpoint with existing primary image.");
    try {
        nn = startNameNode(conf, primaryDirs, primaryEditsDirs, StartupOption.IMPORT);
        assertTrue(false);
    } catch (IOException e) {
        // expected to fail
        assertTrue(nn == null);
    }
    // Remove current image and import a checkpoint.
    System.out.println("Import a checkpoint with existing primary image.");
    List<File> nameDirs = (List<File>) FSNamesystem.getNamespaceDirs(conf);
    List<File> nameEditsDirs = (List<File>) FSNamesystem.getNamespaceEditsDirs(conf);
    long fsimageLength = new File(new File(nameDirs.get(0), "current"), NameNodeFile.IMAGE.getName()).length();
    for (File dir : nameDirs) {
        if (dir.exists())
            if (!(FileUtil.fullyDelete(dir)))
                throw new IOException("Cannot remove directory: " + dir);
        if (!dir.mkdirs())
            throw new IOException("Cannot create directory " + dir);
    }
    for (File dir : nameEditsDirs) {
        if (dir.exists())
            if (!(FileUtil.fullyDelete(dir)))
                throw new IOException("Cannot remove directory: " + dir);
        if (!dir.mkdirs())
            throw new IOException("Cannot create directory " + dir);
    }
    nn = startNameNode(conf, primaryDirs, primaryEditsDirs, StartupOption.IMPORT);
    // Verify that image file sizes did not change.
    FSImage image = nn.getFSImage();
    for (Iterator<StorageDirectory> it = image.dirIterator(NameNodeDirType.IMAGE); it.hasNext(); ) {
        assertTrue(FSImage.getImageFile(it.next(), NameNodeFile.IMAGE).length() == fsimageLength);
    }
    nn.stop();
    // recover failed checkpoint
    nn = startNameNode(conf, primaryDirs, primaryEditsDirs, StartupOption.REGULAR);
    Collection<File> secondaryDirs = FSImage.getCheckpointDirs(conf, null);
    for (File dir : secondaryDirs) {
        Storage.rename(new File(dir, "current"), new File(dir, "lastcheckpoint.tmp"));
    }
    secondary = startSecondaryNameNode(conf);
    secondary.shutdown();
    for (File dir : secondaryDirs) {
        assertTrue(new File(dir, "current").exists());
        assertFalse(new File(dir, "lastcheckpoint.tmp").exists());
    }
    // complete failed checkpoint
    for (File dir : secondaryDirs) {
        Storage.rename(new File(dir, "previous.checkpoint"), new File(dir, "lastcheckpoint.tmp"));
    }
    secondary = startSecondaryNameNode(conf);
    secondary.shutdown();
    for (File dir : secondaryDirs) {
        assertTrue(new File(dir, "current").exists());
        assertTrue(new File(dir, "previous.checkpoint").exists());
        assertFalse(new File(dir, "lastcheckpoint.tmp").exists());
    }
    nn.stop();
    nn = null;
    // Check that everything starts ok now.
    MiniDFSCluster cluster = new MiniDFSCluster(conf, numDatanodes, false, null);
    cluster.waitActive();
    cluster.shutdown();
}
