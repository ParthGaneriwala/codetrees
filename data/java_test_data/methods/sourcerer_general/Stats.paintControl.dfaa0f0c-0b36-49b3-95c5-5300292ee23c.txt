public void paintControl(PaintEvent pe) {
    GC gc = pe.gc;
    Point canvasSize = accCanv.getSize();
    gc.setBackground(GUI.display.getSystemColor(SWT.COLOR_WHITE));
    gc.setForeground(GUI.display.getSystemColor(SWT.COLOR_BLACK));
    // tło
    gc.fillRectangle(0, 0, canvasSize.x, canvasSize.y);
    int inc = 20;
    if (CoolKey.getUser().getStatistics().getCharAccuracies().size() != 0)
        inc = canvasSize.x / CoolKey.getUser().getStatistics().getCharAccuracies().size();
    int x = 20;
    int y;
    if (accKeys.getSelection()) {
        Font font = new Font(GUI.display, "Arial", 7, SWT.None);
        gc.setFont(font);
        // oś y
        gc.drawLine(LEFT_MARGIN, 5, LEFT_MARGIN, canvasSize.y - BOTTOM_MARGIN2);
        // oś x
        gc.drawLine(LEFT_MARGIN, canvasSize.y - BOTTOM_MARGIN2, canvasSize.x - 10, canvasSize.y - BOTTOM_MARGIN2);
        gc.drawString("Poprawność", 7, 5);
        Map<Character, Double> charAccuracies = CoolKey.getUser().getStatistics().getCharAccuracies();
        TreeSet<Character> chars = new TreeSet<Character>(charAccuracies.keySet());
        for (Character c : chars) {
            double accuracy = charAccuracies.get(c);
            y = canvasSize.y - (int) accuracy * 3 - BOTTOM_MARGIN2;
            gc.setBackground(GUI.display.getSystemColor(SWT.COLOR_RED));
            Rectangle rec = new Rectangle(x, y, 8, (int) accuracy * 3);
            gc.fillRectangle(rec);
            gc.setBackground(GUI.display.getSystemColor(SWT.COLOR_WHITE));
            GraphicsUtils.drawVerticalText(String.format("%.2f", accuracy) + "%", x - 2, y - 40, gc, SWT.UP);
            if (c == ' ')
                gc.drawString("spac.", x, canvasSize.y - BOTTOM_MARGIN2 + 3, true);
            else if (c == '\r')
                gc.drawString("ent.", x, canvasSize.y - BOTTOM_MARGIN2 + 3, true);
            else
                gc.drawString(c.toString(), x, canvasSize.y - BOTTOM_MARGIN2 + 3, true);
            x += inc;
        }
    } else {
        Font font = new Font(GUI.display, "Arial", 7, SWT.None);
        gc.setFont(font);
        // oś x
        gc.drawLine(5, 5, LEFT_MARGIN, canvasSize.y - BOTTOM_MARGIN2);
        gc.drawString("Prędkość", 7, 5);
        // oś y
        gc.drawLine(LEFT_MARGIN, canvasSize.y - BOTTOM_MARGIN2, canvasSize.x - 10, canvasSize.y - BOTTOM_MARGIN2);
        if (CoolKey.getUser().getStatistics().getCharSpeeds().size() != 0)
            inc = canvasSize.x / CoolKey.getUser().getStatistics().getCharSpeeds().size();
        /*
					 *  Skala
					 */
        gc.setForeground(GUI.display.getSystemColor(SWT.COLOR_GRAY));
        for (int j = canvasSize.y - BOTTOM_MARGIN - 50; j >= 50; j -= 50) {
            gc.drawLine(LEFT_MARGIN, j, canvasSize.x - LEFT_MARGIN, j);
        }
        gc.setForeground(GUI.display.getSystemColor(SWT.COLOR_BLACK));
        int skala = 100;
        for (int j = canvasSize.y - BOTTOM_MARGIN - 100; j >= 50; j -= 100) {
            gc.drawLine(LEFT_MARGIN, j, canvasSize.x - LEFT_MARGIN, j);
            gc.drawString(Integer.toString(skala), x - 13, j - 12, true);
            skala += 100;
        }
        Map<Character, Double> charSpeeds = CoolKey.getUser().getStatistics().getCharSpeeds();
        TreeSet<Character> chars = new TreeSet<Character>(charSpeeds.keySet());
        for (Character c : chars) {
            double speed = charSpeeds.get(c);
            gc.setBackground(GUI.display.getSystemColor(SWT.COLOR_BLUE));
            Rectangle rec = new Rectangle(x, canvasSize.y - (int) speed - BOTTOM_MARGIN2, 8, (int) speed);
            gc.fillRectangle(rec);
            gc.setBackground(GUI.display.getSystemColor(SWT.COLOR_WHITE));
            GraphicsUtils.drawVerticalText(String.format("%.2f", speed), x - 1, canvasSize.y - (int) speed - BOTTOM_MARGIN2 - 30, gc, SWT.UP);
            if (c == ' ')
                gc.drawString("spac.", x, canvasSize.y - BOTTOM_MARGIN2 + 3, true);
            else if (c == '\r')
                gc.drawString("ent.", x, canvasSize.y - BOTTOM_MARGIN2 + 3, true);
            else
                gc.drawString(c.toString(), x, canvasSize.y - BOTTOM_MARGIN2 + 3);
            x += inc;
        }
    }
    gc.dispose();
}
