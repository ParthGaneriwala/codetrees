public Node parseCDATA(boolean quotesmart) throws ParserException {
    int start;
    int state;
    boolean done;
    char quote;
    char ch;
    int end;
    boolean comment;
    start = mCursor.getPosition();
    state = 0;
    done = false;
    quote = 0;
    comment = false;
    while (!done) {
        ch = mPage.getCharacter(mCursor);
        switch(state) {
            case // prior to ETAGO
            0:
                switch(ch) {
                    case Page.EOF:
                        done = true;
                        break;
                    case '\'':
                        if (quotesmart && !comment)
                            if (0 == quote)
                                // enter quoted state
                                quote = '\'';
                            else if ('\'' == quote)
                                // exit quoted state
                                quote = 0;
                        break;
                    case '"':
                        if (quotesmart && !comment)
                            if (0 == quote)
                                // enter quoted state
                                quote = '"';
                            else if ('"' == quote)
                                // exit quoted state
                                quote = 0;
                        break;
                    case '\\':
                        if (quotesmart)
                            if (0 != quote) {
                                // try to consume escaped character
                                ch = mPage.getCharacter(mCursor);
                                if (Page.EOF == ch)
                                    done = true;
                                else if ((ch != '\\') && (ch != quote))
                                    // unconsume char if character was not an escapable char.
                                    mPage.ungetCharacter(mCursor);
                            }
                        break;
                    case '/':
                        if (quotesmart)
                            if (0 == quote) {
                                // handle multiline and double slash comments (with a quote)
                                ch = mPage.getCharacter(mCursor);
                                if (Page.EOF == ch)
                                    done = true;
                                else if ('/' == ch)
                                    comment = true;
                                else if ('*' == ch) {
                                    do {
                                        do ch = mPage.getCharacter(mCursor); while ((Page.EOF != ch) && ('*' != ch));
                                        ch = mPage.getCharacter(mCursor);
                                        if (ch == '*')
                                            mPage.ungetCharacter(mCursor);
                                    } while ((Page.EOF != ch) && ('/' != ch));
                                } else
                                    mPage.ungetCharacter(mCursor);
                            }
                        break;
                    case '\n':
                        comment = false;
                        break;
                    case '<':
                        if (quotesmart) {
                            if (0 == quote)
                                state = 1;
                        } else
                            state = 1;
                        break;
                    default:
                        break;
                }
                break;
            case // <
            1:
                switch(ch) {
                    case Page.EOF:
                        done = true;
                        break;
                    case '/':
                        state = 2;
                        break;
                    case '!':
                        ch = mPage.getCharacter(mCursor);
                        if (Page.EOF == ch)
                            done = true;
                        else if ('-' == ch) {
                            ch = mPage.getCharacter(mCursor);
                            if (Page.EOF == ch)
                                done = true;
                            else if ('-' == ch)
                                state = 3;
                            else
                                state = 0;
                        } else
                            state = 0;
                        break;
                    default:
                        state = 0;
                        break;
                }
                break;
            case // </
            2:
                comment = false;
                if (Page.EOF == ch)
                    done = true;
                else if (Character.isLetter(ch)) {
                    done = true;
                    // back up to the start of ETAGO
                    mPage.ungetCharacter(mCursor);
                    mPage.ungetCharacter(mCursor);
                    mPage.ungetCharacter(mCursor);
                } else
                    state = 0;
                break;
            case // <!
            3:
                comment = false;
                if (Page.EOF == ch)
                    done = true;
                else if ('-' == ch) {
                    ch = mPage.getCharacter(mCursor);
                    if (Page.EOF == ch)
                        done = true;
                    else if ('-' == ch) {
                        ch = mPage.getCharacter(mCursor);
                        if (Page.EOF == ch)
                            done = true;
                        else if ('>' == ch)
                            state = 0;
                        else {
                            mPage.ungetCharacter(mCursor);
                            mPage.ungetCharacter(mCursor);
                        }
                    } else
                        mPage.ungetCharacter(mCursor);
                }
                break;
            default:
                throw new IllegalStateException("how the fuck did we get in state " + state);
        }
    }
    end = mCursor.getPosition();
    return (makeString(start, end));
}
