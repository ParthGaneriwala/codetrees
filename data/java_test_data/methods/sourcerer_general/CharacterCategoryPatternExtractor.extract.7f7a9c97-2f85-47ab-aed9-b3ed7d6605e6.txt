@Override
public List<Feature> extract(JCas view, Annotation focusAnnotation) throws CleartkExtractorException {
    StringBuilder builder = new StringBuilder();
    String text = focusAnnotation.getCoveredText();
    String lastType = null;
    for (int i = 0; i < text.length(); i += 1) {
        String type;
        int typeInt = Character.getType(text.charAt(i));
        switch(typeInt) {
            case Character.CONTROL:
                type = "CC";
                break;
            case Character.FORMAT:
                type = "Cf";
                break;
            case Character.UNASSIGNED:
                type = "Cn";
                break;
            case Character.PRIVATE_USE:
                type = "Co";
                break;
            case Character.SURROGATE:
                type = "Cs";
                break;
            case Character.LOWERCASE_LETTER:
                type = "Ll";
                break;
            case Character.MODIFIER_LETTER:
                type = "Lm";
                break;
            case Character.OTHER_LETTER:
                type = "Lo";
                break;
            case Character.TITLECASE_LETTER:
                type = "Lt";
                break;
            case Character.UPPERCASE_LETTER:
                type = "Lu";
                break;
            case Character.COMBINING_SPACING_MARK:
                type = "Mc";
                break;
            case Character.ENCLOSING_MARK:
                type = "Me";
                break;
            case Character.NON_SPACING_MARK:
                type = "Mn";
                break;
            case Character.DECIMAL_DIGIT_NUMBER:
                type = "Nd";
                break;
            case Character.LETTER_NUMBER:
                type = "Nl";
                break;
            case Character.OTHER_NUMBER:
                type = "No";
                break;
            case Character.CONNECTOR_PUNCTUATION:
                type = "Pc";
                break;
            case Character.DASH_PUNCTUATION:
                type = "Pd";
                break;
            case Character.END_PUNCTUATION:
                type = "Pe";
                break;
            case Character.FINAL_QUOTE_PUNCTUATION:
                type = "Pf";
                break;
            case Character.INITIAL_QUOTE_PUNCTUATION:
                type = "Pi";
                break;
            case Character.OTHER_PUNCTUATION:
                type = "Po";
                break;
            case Character.START_PUNCTUATION:
                type = "Ps";
                break;
            case Character.CURRENCY_SYMBOL:
                type = "Sc";
                break;
            case Character.MODIFIER_SYMBOL:
                type = "Sk";
                break;
            case Character.MATH_SYMBOL:
                type = "Sm";
                break;
            case Character.OTHER_SYMBOL:
                type = "So";
                break;
            case Character.LINE_SEPARATOR:
                type = "Zl";
                break;
            case Character.PARAGRAPH_SEPARATOR:
                type = "Zp";
                break;
            case Character.SPACE_SEPARATOR:
                type = "Zs";
                break;
            default:
                throw new RuntimeException("Unknown character type: " + typeInt);
        }
        switch(this.patternType) {
            case ONE_PER_CHAR:
                builder.append(type);
                break;
            case REPEATS_MERGED:
                if (!type.equals(lastType)) {
                    builder.append(type);
                }
                break;
        }
        lastType = type;
    }
    return Arrays.asList(new Feature(this.name, builder.toString()));
}
