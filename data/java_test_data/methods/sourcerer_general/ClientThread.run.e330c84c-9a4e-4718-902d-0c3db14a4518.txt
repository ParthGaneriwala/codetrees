public void run() {
    try {
        oos = new ObjectOutputStream(clientOut.getOutputStream());
        /* Get the input port by creating a new serversocket with a unique
			 * port bound to it.
			 */
        ServerSocket inputSocketGetter = new ServerSocket(0);
        int inputPort = inputSocketGetter.getLocalPort();
        myLogger.message("Input socket port for client " + id + " is: " + inputPort + "\n", false);
        oos.writeInt(inputPort);
        oos.flush();
        clientIn = inputSocketGetter.accept();
        inputSocketGetter.close();
        oos.writeInt(id);
        oos.flush();
        /*
			int wait = 0;
			while(wait < Constants.TIMEOUT && clientIn == null)
			{
				try	
				{
					myLogger.message("ClientThread " + row + " is trying to connect to: " + clientOut.getInetAddress() + ":" + (clientOut.getLocalPort()+1)+"\n",false);
					clientIn = new Socket(clientOut.getInetAddress(), clientOut.getLocalPort()+1);
				}
				catch(IOException ioe)
				{
					myLogger.message("ClientThread " + row + " could not get input stream from client of id " + id + "... waiting a bit longer\n", false);
					try
					{
						Thread.sleep(1000);
					}
					catch(InterruptedException ie)
					{
						myLogger.message("ClientThread " + row + " interrupted while waiting to get input stream for client of id " + id + "\n", true);
					}
					wait += 1000;
					clientIn = null;
				}
			}
			*/
        ObjectInputStream ois = new ObjectInputStream(clientIn.getInputStream());
        Object objectMessage;
        // first, receive the new player's element
        objectMessage = ois.readObject();
        // then send them the world
        serve.sendWorld(row);
        // then add the element for everyone else
        serve.propagate(objectMessage, row);
        while ((objectMessage = ois.readObject()) != null) {
            serve.propagate(objectMessage, row);
        }
        myLogger.message("connection closed: " + row + "\n", false);
        clientOut.close();
        clientIn.close();
    } catch (IOException ioe) {
        myLogger.message("Connection error on row " + row + ": " + ioe.getMessage() + "\n", true);
    } catch (ClassNotFoundException cnfe) {
        myLogger.message("Sending error on row " + row + " (class not found): " + cnfe + "\n", true);
    } catch (Exception e) {
        myLogger.message("ClientThread: Other error for row " + row + ": " + e.getMessage() + "\n", true);
    }
    serve.removeThread(row, id);
}
