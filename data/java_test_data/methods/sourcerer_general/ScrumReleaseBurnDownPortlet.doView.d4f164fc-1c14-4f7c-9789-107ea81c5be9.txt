// GenericPortlet Impl -----------------------------------------------------
public void doView(RenderRequest request, RenderResponse response) throws PortletException, IOException {
    try {
        PortletContext context = getPortletContext();
        // 
        Locale locale = PortalUtils.getUser(request).getLocale();
        CalendarBean calendarInfo = new CalendarBean(locale);
        calendarInfo.update(PortalUtils.getUser(request));
        CalendarView calendarView = new CalendarView(calendarInfo, locale);
        calendarView.addHolidays();
        // Preferences
        String releaseValue = request.getPreferences().getValue("releaseId", "-1");
        String daysToShow = request.getPreferences().getValue("daysToShow", "45");
        Double estimatedHours = Double.parseDouble(request.getPreferences().getValue("estimatedHours", "0.0"));
        Double workHours = Double.parseDouble(request.getPreferences().getValue("workHours", "7.0"));
        String startDateValue = request.getPreferences().getValue("startDate", "1/23/2008");
        SimpleDateFormat formatter = new SimpleDateFormat("MM/dd/yyyy");
        Date startDate = formatter.parse(startDateValue);
        String chartHeight = request.getPreferences().getValue("chartHeight", "250");
        // Configuration check
        if ("-1".equals(releaseValue)) {
            // Portlet is not configured
            PortletRequestDispatcher requestDispatcher = context.getRequestDispatcher(NOT_CONFIGURED_PAGE);
            requestDispatcher.include(request, response);
        } else {
            // Portlet is configured
            int releaseId = Integer.parseInt(releaseValue);
            Connection db = PortalUtils.useConnection(request);
            Project thisProject = PortalUtils.getProject(request);
            ProjectItem release = new ProjectItem(db, ProjectItemList.LIST_TARGET_RELEASE, releaseId);
            request.setAttribute("release", release);
            HashMap<String, HashMap<Integer, Double>> dateMap = new HashMap<String, HashMap<Integer, Double>>();
            // The task can be updated 0, 1, or more times per day, so get the latest
            PreparedStatement pst = db.prepareStatement("SELECT " + DatabaseUtils.castDateTimeToDate(db, "tl.entered") + " AS status_date, " + "task_id, " + "item_name AS remaining " + "FROM tasklog tl " + "LEFT JOIN lookup_task_loe_remaining tlr ON tl.loe_remaining = tlr.code " + "WHERE target_release = ? " + "ORDER BY tl.entered, task_id ");
            pst.setInt(1, releaseId);
            ResultSet rs = pst.executeQuery();
            while (rs.next()) {
                // Process result set
                java.util.Date statusDate = rs.getDate("status_date");
                int taskId = rs.getInt("task_id");
                String remainingValue = rs.getString("remaining");
                if (remainingValue == null) {
                    remainingValue = "0";
                }
                // Add to dateMap
                HashMap<Integer, Double> tasksOnDate = dateMap.get(formatter.format(statusDate));
                if (tasksOnDate == null) {
                    tasksOnDate = new HashMap<Integer, Double>();
                    dateMap.put(formatter.format(statusDate), tasksOnDate);
                }
                tasksOnDate.put(taskId, Double.parseDouble(remainingValue));
            }
            rs.close();
            pst.close();
            // Today
            Calendar calendarToday = Calendar.getInstance();
            calendarToday.setTime(new Date());
            calendarToday.set(Calendar.MILLISECOND, 0);
            calendarToday.set(Calendar.SECOND, 0);
            calendarToday.set(Calendar.MINUTE, 59);
            calendarToday.set(Calendar.HOUR_OF_DAY, 23);
            // Go through the Calendar days requested and plot the values
            Calendar calendar = Calendar.getInstance();
            calendar.setTime(startDate);
            calendar.set(Calendar.MILLISECOND, 0);
            calendar.set(Calendar.SECOND, 0);
            calendar.set(Calendar.MINUTE, 0);
            calendar.set(Calendar.HOUR_OF_DAY, 0);
            // Go through the calendar days and build the remaining values
            LinkedHashMap<Date, Double> graphMap = new LinkedHashMap<Date, Double>();
            HashMap<Integer, Double> recentMap = new HashMap<Integer, Double>();
            for (int i = 0; i < Integer.parseInt(daysToShow); i++) {
                // Get the tasks (if any), put them in a most recent map
                HashMap<Integer, Double> tasksOnDate = dateMap.get(formatter.format(calendar.getTime()));
                if (tasksOnDate == null) {
                    tasksOnDate = new HashMap<Integer, Double>();
                }
                for (Integer thisTask : tasksOnDate.keySet()) {
                    Double thisRemaining = tasksOnDate.get(thisTask);
                    recentMap.put(thisTask, thisRemaining);
                }
                // Add up the most recent map
                Double graphValue = 0.0;
                for (Double thisValue : recentMap.values()) {
                    graphValue += thisValue;
                }
                if (calendar.before(calendarToday)) {
                    graphMap.put(calendar.getTime(), graphValue);
                } else {
                    graphMap.put(calendar.getTime(), null);
                }
                // Advance the date
                calendar.add(Calendar.DATE, 1);
            }
            request.setAttribute("graphMap", graphMap);
            // Graph map 2 (steady pace)
            calendar.setTime(startDate);
            LinkedHashMap<Date, Double> graphMap2 = new LinkedHashMap<Date, Double>();
            for (int i = 0; i < Integer.parseInt(daysToShow); i++) {
                graphMap2.put(calendar.getTime(), estimatedHours);
                calendar.add(Calendar.DATE, 1);
                if (!calendarView.isHoliday(calendar) && !DateUtils.isWeekend(calendar)) {
                    estimatedHours = estimatedHours - workHours;
                }
            }
            request.setAttribute("graphMap2", graphMap2);
            // Ready to generate the graph markup
            request.setAttribute("chartHeight", chartHeight);
            PortletRequestDispatcher requestDispatcher = context.getRequestDispatcher(VIEW_PAGE);
            requestDispatcher.include(request, response);
        }
    } catch (Exception e) {
        throw new PortletException(e.getMessage());
    }
}
