public BranchGroup createSceneGraph() {
    System.out.print("Loading scene...");
    BranchGroup objRoot = new BranchGroup();
    TransformGroup objScale = new TransformGroup();
    objRoot.addChild(objScale);
    int MX = engine.getMatrixSizeX();
    int MY = engine.getMatrixSizeY();
    int MZ = engine.getMatrixSizeZ();
    cells = MX * MY * MZ;
    // HACK
    HodgeBounds = new BoundingSphere(new Point3d(0.0, 0.0, 0.0), MX);
    AmbientLight AL = new AmbientLight(true, white);
    AL.setInfluencingBounds(HodgeBounds);
    objScale.addChild(AL);
    HodgePoints = new PointArray(cells, GeometryArray.COORDINATES | GeometryArray.NORMALS | GeometryArray.COLOR_3);
    HodgePoints.setCapability(GeometryArray.ALLOW_COLOR_WRITE);
    colors = new Color3f[cells];
    int c = 0;
    for (int x = 0; x < MX; x++) for (int y = 0; y < MY; y++) for (int z = 0; z < MZ; z++) {
        Point3d p = new Point3d(x / HodgeFactor, y / HodgeFactor, z / HodgeFactor);
        HodgePoints.setCoordinate(c, p);
        colors[c] = new Color3f((float) Math.random(), (float) Math.random(), (float) Math.random());
        c++;
        if (SPOTLIGHT)
            HodgePoints.setNormal(0, new Vector3f(0, 0, -1));
        else
            HodgePoints.setNormal(0, new Vector3f(p));
    }
    HodgePoints.setColors(0, colors);
    HodgeShape = new Shape3D(HodgePoints);
    HodgeShape.setCapability(Shape3D.ALLOW_GEOMETRY_READ);
    HodgeShape.setCapability(Shape3D.ALLOW_GEOMETRY_WRITE);
    objScale.addChild(HodgeShape);
    System.out.println(" loaded.");
    return objRoot;
}
