private int getDigits(byte[] digits, int base) {
    if (base == 10) {
        {
            tmp1.mantissa = this.mantissa;
            tmp1.exponent = this.exponent;
            tmp1.sign = this.sign;
        }
        ;
        tmp1.abs();
        {
            tmp2.mantissa = tmp1.mantissa;
            tmp2.exponent = tmp1.exponent;
            tmp2.sign = tmp1.sign;
        }
        ;
        int exp = exponent = tmp1.lowPow10();
        exp -= 18;
        boolean exp_neg = exp <= 0;
        exp = Math.abs(exp);
        if (exp > 300000000) {
            // Kludge to be able to print very large and very small numbers
            // without causing over/underflows
            {
                tmp1.mantissa = TEN.mantissa;
                tmp1.exponent = TEN.exponent;
                tmp1.sign = TEN.sign;
            }
            ;
            // So, divide twice by not-so-extreme numbers
            tmp1.pow(exp / 2);
            if (exp_neg)
                tmp2.mul(tmp1);
            else
                tmp2.div(tmp1);
            {
                tmp1.mantissa = TEN.mantissa;
                tmp1.exponent = TEN.exponent;
                tmp1.sign = TEN.sign;
            }
            ;
            tmp1.pow(exp - (exp / 2));
        } else {
            {
                tmp1.mantissa = TEN.mantissa;
                tmp1.exponent = TEN.exponent;
                tmp1.sign = TEN.sign;
            }
            ;
            tmp1.pow(exp);
        }
        if (exp_neg)
            tmp2.mul(tmp1);
        else
            tmp2.div(tmp1);
        long a;
        if (tmp2.exponent > 0x4000003e) {
            tmp2.exponent--;
            tmp2.round();
            a = tmp2.toLong();
            if (a >= 5000000000000000000L) {
                // Rounding up gave 20 digits
                exponent++;
                a /= 5;
                digits[18] = (byte) (a % 10);
                a /= 10;
            } else {
                digits[18] = (byte) ((a % 5) * 2);
                a /= 5;
            }
        } else {
            tmp2.round();
            a = tmp2.toLong();
            digits[18] = (byte) (a % 10);
            a /= 10;
        }
        for (int i = 17; i >= 0; i--) {
            digits[i] = (byte) (a % 10);
            a /= 10;
        }
        digits[19] = 0;
        return 19;
    }
    int accurateBits = 64;
    int bitsPerDigit = base == 2 ? 1 : base == 8 ? 3 : 4;
    if ((this.exponent == 0 && this.mantissa == 0)) {
        // Two's complement cannot display -0
        sign = 0;
    } else {
        if ((this.sign != 0)) {
            mantissa = -mantissa;
            if (((mantissa >> 62) & 3) == 3) {
                mantissa <<= 1;
                exponent--;
                // ?
                accurateBits--;
            }
        }
        exponent -= 0x40000000 - 1;
        int shift = bitsPerDigit - 1 - floorMod(exponent, bitsPerDigit);
        exponent = floorDiv(exponent, bitsPerDigit);
        if (shift == bitsPerDigit - 1) {
            // More accurate to shift up instead
            mantissa <<= 1;
            exponent--;
            accurateBits--;
        } else if (shift > 0) {
            mantissa = (mantissa + (1L << (shift - 1))) >>> shift;
            if ((this.sign != 0)) {
                // Need to fill in some 1's at the top
                // (">>", not ">>>")
                mantissa |= 0x8000000000000000L >> (shift - 1);
            }
        }
    }
    int accurateDigits = (accurateBits + bitsPerDigit - 1) / bitsPerDigit;
    for (int i = 0; i < accurateDigits; i++) {
        digits[i] = (byte) (mantissa >>> (64 - bitsPerDigit));
        mantissa <<= bitsPerDigit;
    }
    digits[accurateDigits] = 0;
    return accurateDigits;
}
