private void createFilter(StringBuffer sqlFilter, Connection db) {
    if (enteredBy > -1) {
        sqlFilter.append("AND t.enteredby = ? ");
    }
    if (description != null) {
        if (description.indexOf("%") >= 0) {
            if (DatabaseUtils.getType(db) == DatabaseUtils.MSSQL) {
                sqlFilter.append("AND ( LOWER(CONVERT(VARCHAR(2000),t.problem)) LIKE LOWER(?)) ");
            } else {
                sqlFilter.append("AND lower(t.problem) like lower(?) ");
            }
        } else {
            if (DatabaseUtils.getType(db) == DatabaseUtils.MSSQL) {
                sqlFilter.append("AND ( LOWER(CONVERT(VARCHAR(2000),t.problem)) = LOWER(?)) ");
            } else {
                sqlFilter.append("AND lower(t.problem) = lower(?) ");
            }
        }
    }
    if (onlyOpen) {
        sqlFilter.append("AND t.closed IS NULL ");
    }
    if (forReview == Constants.TRUE) {
        sqlFilter.append("AND t.ready_for_close = ? ");
    }
    if (onlyClosed) {
        sqlFilter.append("AND t.closed IS NOT NULL ");
    }
    if (orgId > -1) {
        sqlFilter.append("AND t.org_id = ? ");
    }
    if (department > -1) {
        if (unassignedToo) {
            sqlFilter.append("AND (t.department_code in (?, 0, -1) OR (t.department_code IS NULL)) ");
        } else {
            sqlFilter.append("AND t.department_code = ? ");
        }
    }
    if (assignedTo > -1) {
        sqlFilter.append("AND t.assigned_to = ? ");
    }
    if (excludeAssignedTo > -1) {
        sqlFilter.append("AND (t.assigned_to <> ? OR t.assigned_to IS NULL) ");
    }
    if (onlyAssigned) {
        sqlFilter.append("AND t.assigned_to > 0 AND t.assigned_to IS NOT NULL ");
    }
    if (onlyUnassigned) {
        sqlFilter.append("AND (t.assigned_to IS NULL OR t.assigned_to = 0 OR t.assigned_to = -1) ");
    }
    if (severity > 0) {
        sqlFilter.append("AND t.scode = ? ");
    }
    if (priority > 0) {
        sqlFilter.append("AND t.pri_code = ? ");
    }
    if (accountOwnerIdRange != null) {
        sqlFilter.append("AND t.org_id IN (SELECT org_id FROM organization WHERE owner IN (" + accountOwnerIdRange + ")) ");
    }
    if (projectId > 0) {
        sqlFilter.append("AND t.ticketid IN (SELECT ticket_id FROM ticketlink_project WHERE project_id = ?) ");
    }
    if (linkProjectId > 0) {
        sqlFilter.append("AND t.link_project_id = ? ");
    }
    if (forProjectUser > -1) {
        sqlFilter.append("AND t.ticketid IN (SELECT ticket_id FROM ticketlink_project WHERE project_id in (SELECT DISTINCT project_id FROM project_team WHERE user_id = ? " + "AND status IS NULL " + (onlyIfProjectOpen ? "AND project_id IN (SELECT project_id FROM projects WHERE closedate IS NULL) " : "") + ")) ");
    }
    if (ownTickets != -1) {
        sqlFilter.append("AND (t.enteredby = ? OR t.assigned_to = ?) ");
    }
    if (catCode != -1) {
        sqlFilter.append("AND t.cat_code = ? ");
    }
    if (alertRangeStart != null) {
        sqlFilter.append("AND t.entered >= ? ");
    }
    if (alertRangeEnd != null) {
        sqlFilter.append("AND t.entered < ? ");
    }
    // No sync, but still need to factor in age
    if (minutesOlderThan > 0) {
        sqlFilter.append("AND t.entered <= ? ");
    }
    if (searchText != null && !(searchText.equals(""))) {
        if (DatabaseUtils.getType(db) == DatabaseUtils.MSSQL) {
            sqlFilter.append("AND ( LOWER(CONVERT(VARCHAR(2000),t.problem)) LIKE LOWER(?) OR " + "LOWER(CONVERT(VARCHAR(2000),t.comment)) LIKE LOWER(?) OR " + "LOWER(CONVERT(VARCHAR(2000),t.solution)) LIKE LOWER(?) ) ");
        } else {
            sqlFilter.append("AND ( LOWER(t.problem) LIKE LOWER(?) OR " + "LOWER(t.comment) LIKE LOWER(?) OR " + "LOWER(t.solution) LIKE LOWER(?) ) ");
        }
    }
}
