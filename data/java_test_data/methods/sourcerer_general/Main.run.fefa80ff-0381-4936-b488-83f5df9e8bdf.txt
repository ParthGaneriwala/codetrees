public void run() {
    evaluar();
    // ya tenemos ordenados los errores de la lista que ha mandado el servidor
    ordenarErrores();
    int j = 0;
    /*
			System.out.println("---------------------- inicio errores ----------");
			for(int s = (GENO-1); s < POB*GENO; s=s+GENO){
		        System.out.println(s+"    "+lista.get(s));
			}
			System.out.println("---------------------- fin errores ----------");
			*/
    // numero de copias.
    int limite1 = (int) (POB * PROB_SEL);
    // numero de mutaciones.
    int limite2 = limite1 + (int) (POB * PROB_MUT);
    // corte de 1 punto
    int limite4 = limite2 + (int) (POB * PROB_CORTE);
    for (int i = 1; i <= limite4; i++) {
        // System.out.println("traza1");
        if (i <= limite1) {
            for (int k = 0; k < GENO; k++) {
                double elemento_a_copiar = lista.get(((int) (GENO * errores.get(j))) + k);
                int sitio_donde_copiar = (int) (GENO * errores.get((errores.size() - 2 - j))) + k;
                // System.out.println("voy a copiar el elemento    "+elemento_a_copiar);
                // System.out.println("en la posicion  "+ sitio_donde_copiar);
                lista.set(sitio_donde_copiar, elemento_a_copiar);
            }
        // System.out.println("traza2");
        }
        // MUTACION
        if (i > limite1 && i <= limite2) {
            // System.out.println("traza3");
            // numero de genes que vamos a mutar segun la probabilidad introducida
            int limite3 = (int) (MUT * (GENO - 1));
            for (int k = 0; k <= limite3; k++) {
                // distribucion uniforme entre 0 y el numero de genes para no cambiar siempre los mismos
                int aux = rnd.nextInt(GENO - 2);
                int sitio_donde_copiar = (int) ((GENO) * errores.get((errores.size() - 2 - j))) + aux;
                /*
						for(int g=sitio_donde_copiar-aux;g<sitio_donde_copiar-aux+GENO;g++){
							System.out.println(lista.get(g));
						}
						*/
                if (lista.get(sitio_donde_copiar) == 1.0) {
                    lista.set(sitio_donde_copiar, 0.0);
                } else {
                    lista.set(sitio_donde_copiar, 1.0);
                }
            /*
						for(int g=sitio_donde_copiar-aux;g<sitio_donde_copiar-aux+GENO;g++){
							System.out.println(lista.get(g));
						}
						*/
            }
        }
        // CORTE DE 1 PUNTO
        if (i > limite2 && i <= limite4) {
            // System.out.println("traza4");
            // distribucion uniforme entre 0 y el numero de genes
            int aux2 = rnd.nextInt(GENO - 2);
            int limite5 = GENO;
            for (int k = aux2; k < limite5; k++) {
                // System.out.println("empiezo en "+aux2);
                // int quitar=((int)(GENO*errores.get(j)))+k;
                double elemento_a_copiar = lista.get(((int) (GENO * errores.get(j))) + k);
                int sitio_donde_copiar = (int) (GENO * errores.get((errores.size() - 2 - j))) + k;
                // System.out.println("voy a copiar el elemento    "+elemento_a_copiar+ " de la posicion "+quitar);
                // System.out.println("en la posicion  "+ sitio_donde_copiar);
                lista.set(sitio_donde_copiar, elemento_a_copiar);
            }
        }
        j = j + 2;
    }
    // tras habar aplicado los operadores geneticos, volvemos a evaluar la poblacion para actualizar el fitness
    evaluar();
    ordenarErrores();
    /*
			System.out.println("---------------------- inicio errores copiados----------");
			for(int s = (GENO-1); s < POB*GENO; s=s+GENO){
		        System.out.println(s+"    "+lista.get(s));
			}
			System.out.println("---------------------- fin errores copiados----------");
			*/
    rpc.testRCP(lista, callback);
}
