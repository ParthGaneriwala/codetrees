// ���ϲ���Ҳ���Դ������ļ���ȡ��
public static void main(String[] args) throws Exception {
    socket = new CMPPSocket(host, port);
    // Thread thread = null;
    byte[] resppacket = null;
    int status = -1;
    // ��ʼ��socket����
    while (true) {
        try {
            socket.initialSock();
            // ��socket����ע�ᵽCMPP api��
            cmpp = new CMPP(socket, delayTime);
            // ���������ص�connect����
            status = cmpp.cmppConnect(spid, password);
            log.info("the resoponse of connect to ismg:" + status);
            if (status == 0) {
                log.info("connect successfully!\n");
                break;
            } else {
                log.warn("connect failer,result is:" + status + "��reconnect!\n");
            }
        } catch (Exception e) {
            try {
                socket.closeSock();
                log.error("connect exception!sleep 5 seconds");
                Thread.sleep(5000L);
            } catch (Exception ee) {
                log.error("connect close exception:" + ee.toString());
            }
            log.error(e.toString());
        }
    }
    // ��ʽ�������ط��͹�����
    int count = 0;
    long beginTime = System.currentTimeMillis();
    int commandID = CommandID.CMPP_ACTIVE_TEST;
    while (true) {
        // synchronized (socket) {// ͬ��socket����
        // �����ݾͶ�������û�����ݵĻ����ȴ�50����
        long now = System.currentTimeMillis();
        try {
            int available = socket.getInputStream().available();
            if (available > 0) {
                beginTime = System.currentTimeMillis();
                System.out.println("\n");
                log.info("the" + (++count) + "th message");
                // �õ��������ֽ���ʽ
                resppacket = socket.read();
                if (log.isDebugEnabled()) {
                    log.debug("the response body length is��" + resppacket.length);
                }
                byte[] commandid = new byte[4];
                System.arraycopy(resppacket, 4, commandid, 0, 4);
                commandID = Common.bytes4ToInt(commandid);
                switch(commandID) {
                    case CommandID.CMPP_DELIVER:
                        log.info("deliver message");
                        deliver(resppacket);
                        break;
                    case CommandID.CMPP_ACTIVE_TEST:
                        log.info("cmppactive message");
                        active(resppacket);
                        break;
                    case CommandID.CMPP_ACTIVE_TEST_REP:
                        log.info("cmppactive resp message");
                        break;
                    case CommandID.CMPP_DELIVER_REP:
                        log.info("unresonable message");
                        break;
                    case CommandID.CMPP_SUBMIT_REP:
                        log.info("submitresp");
                        break;
                    default:
                        log.error("wrong commandid:" + commandID);
                        break;
                }
            } else // ���1����֮��û���������������active��
            if (commandID != CommandID.CMPP_ACTIVE_TEST && now - beginTime >= 10 * 1000) {
                beginTime = now;
                log.info("send the active packet!");
                int active = cmpp.cmppActiveTestNoResp();
                log.info("the result of sending active packet" + (active == 0 ? "success" : "failer,active=" + active));
            } else {
                // ����50�룬�ȴ���һ��deliver�ĵ���
                try {
                    Thread.sleep(50);
                } catch (InterruptedException e) {
                    log.error(e.toString());
                }
            }
        }// ����쳣������ԭ�������ӹص��˵ȣ������½���������
         catch (IOException e) {
            log.error(e.toString());
            try {
                // �ر����Ӻ��ڽ�������
                socket.closeSock();
                socket.initialSock();
            } catch (IOException ee) {
                log.error(ee.toString());
            }
        }
    // }
    }
}
