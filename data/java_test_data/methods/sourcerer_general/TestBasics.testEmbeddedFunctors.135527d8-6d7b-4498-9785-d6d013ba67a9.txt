public void testEmbeddedFunctors() {
    String rules = "(?C owl:onProperty ?P), (?C owl:allValuesFrom ?D) -> (?C rb:restriction all(?P, ?D))." + "(?C rb:restriction all(eg:p, eg:D)) -> (?C rb:restriction 'allOK')." + "[ -> (eg:foo eg:prop functor(eg:bar, 1)) ]" + "[ (?x eg:prop functor(eg:bar, ?v)) -> (?x eg:propbar ?v) ]" + "[ (?x eg:prop functor(?v, ?*)) -> (?x eg:propfunc ?v) ]" + "";
    List ruleList = Rule.parseRules(rules);
    Model data = ModelFactory.createDefaultModel();
    Resource R1 = data.createResource(PrintUtil.egNS + "R1");
    Resource D = data.createResource(PrintUtil.egNS + "D");
    Property p = data.createProperty(PrintUtil.egNS, "p");
    Property prop = data.createProperty(PrintUtil.egNS, "prop");
    Property propbar = data.createProperty(PrintUtil.egNS, "propbar");
    Property propfunc = data.createProperty(PrintUtil.egNS, "propfunc");
    Property rbr = data.createProperty(ReasonerVocabulary.RBNamespace, "restriction");
    R1.addProperty(OWL.onProperty, p).addProperty(OWL.allValuesFrom, D);
    Reasoner reasoner = new BasicForwardRuleReasoner(ruleList);
    InfGraph infgraph = reasoner.bind(data.getGraph());
    Model infModel = ModelFactory.createModelForGraph(infgraph);
    Resource foo = infModel.createResource(PrintUtil.egNS + "foo");
    Resource bar = infModel.createResource(PrintUtil.egNS + "bar");
    RDFNode flit = infModel.getResource(R1.getURI()).getRequiredProperty(rbr).getObject();
    assertNotNull(flit);
    assertEquals(flit.toString(), "allOK");
    // assertTrue(flit instanceof Literal);
    // Functor func = (Functor)((Literal)flit).getValue();
    // assertEquals("all", func.getName());
    // assertEquals(p.getNode(), func.getArgs()[0]);
    // assertEquals(D.getNode(), func.getArgs()[1]);
    Literal one = (Literal) foo.getRequiredProperty(propbar).getObject();
    assertEquals(new Integer(1), one.getValue());
}
