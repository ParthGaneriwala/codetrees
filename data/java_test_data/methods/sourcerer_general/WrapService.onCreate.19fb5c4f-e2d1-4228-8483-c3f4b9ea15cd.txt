@Override
public void onCreate() {
    Logger.d(TAG, "创建wrap服务");
    pref = PreferenceManager.getDefaultSharedPreferences(this);
    proxyHost = pref.getString("PROXYHOST", getString(R.string.proxyServer));
    proxyPort = Integer.parseInt(pref.getString("PROXYPORT", getString(R.string.proxyPort)));
    isUltraMode = pref.getBoolean("ULTRAMODE", false);
    dnsEnabled = pref.getBoolean("DNSENABLED", true);
    dnsHttpEnabled = pref.getBoolean("HTTPDNSENABLED", false);
    httpOnly = pref.getBoolean("ONLYHTTP", false);
    DNSServer = pref.getString("DNSADD", Config.DEFAULT_DNS_ADD);
    iptablesManager.setProxyHost(proxyHost);
    iptablesManager.setProxyPort(proxyPort);
    // 初始化通知管理器
    nm = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);
    // 读取初始服务级别
    serverLevel = Config.getServiceLevel(this);
    Logger.d(TAG, "Recovery from server level: " + serverLevel);
    // 如果无初始服务级别，则为启动过程，依据配置确定启动级别
    if (serverLevel == SERVER_LEVEL_STOP) {
        if (isUltraMode) {
            serverLevel = SERVER_LEVEL_FROGROUND_SERVICE;
            if (VERSION.SDK_INT < VERSION_CODES.ECLAIR)
                setForeground(true);
        } else if (httpOnly) {
            serverLevel = SERVER_LEVEL_BASE;
        } else {
            serverLevel = SERVER_LEVEL_APPS;
        }
    }
    // 如果启动此服务时有原始级别，则使用之(可能是被系统蹂躏了)
    if (Utils.isCmwap(this)) {
        startSubDaemon();
        showNotify();
    } else {
        serverLevel = SERVER_LEVEL_PAUSE;
        cleanForward();
    }
}
