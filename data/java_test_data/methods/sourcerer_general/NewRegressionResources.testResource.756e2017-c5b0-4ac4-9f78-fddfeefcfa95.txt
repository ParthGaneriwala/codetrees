public void testResource(Model m, Resource r, int numProps) {
    Literal tvLiteral = m.createLiteral("test 12 string 2");
    Resource tvResource = m.createResource();
    String lang = "fr";
    // 
    assertTrue(r.addLiteral(RDF.value, tvBoolean).hasLiteral(RDF.value, tvBoolean));
    assertTrue(r.addLiteral(RDF.value, tvByte).hasLiteral(RDF.value, tvByte));
    assertTrue(r.addLiteral(RDF.value, tvShort).hasLiteral(RDF.value, tvShort));
    assertTrue(r.addLiteral(RDF.value, tvInt).hasLiteral(RDF.value, tvInt));
    assertTrue(r.addLiteral(RDF.value, tvLong).hasLiteral(RDF.value, tvLong));
    assertTrue(r.addLiteral(RDF.value, tvChar).hasLiteral(RDF.value, tvChar));
    assertTrue(r.addLiteral(RDF.value, tvFloat).hasLiteral(RDF.value, tvFloat));
    assertTrue(r.addLiteral(RDF.value, tvDouble).hasLiteral(RDF.value, tvDouble));
    assertTrue(r.addProperty(RDF.value, tvString).hasProperty(RDF.value, tvString));
    assertTrue(r.addProperty(RDF.value, tvString, lang).hasProperty(RDF.value, tvString, lang));
    assertTrue(r.addLiteral(RDF.value, tvObject).hasLiteral(RDF.value, tvObject));
    assertTrue(r.addProperty(RDF.value, tvLiteral).hasProperty(RDF.value, tvLiteral));
    assertTrue(r.addProperty(RDF.value, tvResource).hasProperty(RDF.value, tvResource));
    assertTrue(r.getRequiredProperty(RDF.value).getSubject().equals(r));
    // 
    Property p = m.createProperty("foo/", "bar");
    try {
        r.getRequiredProperty(p);
        fail("should detect missing property");
    } catch (PropertyNotFoundException e) {
        pass();
    }
    // 
    assertEquals(13, iteratorToSet(r.listProperties(RDF.value)).size());
    assertEquals(setOf(r), iteratorToSet(r.listProperties(RDF.value).mapWith(Statement.Util.getSubject)));
    // 
    assertEquals(0, iteratorToSet(r.listProperties(p)).size());
    assertEquals(new HashSet(), iteratorToSet(r.listProperties(p).mapWith(Statement.Util.getSubject)));
    // 
    assertEquals(13 + numProps, iteratorToSet(r.listProperties()).size());
    assertEquals(setOf(r), iteratorToSet(r.listProperties().mapWith(Statement.Util.getSubject)));
    // 
    r.removeProperties();
    assertEquals(0, m.query(new SimpleSelector(r, null, (RDFNode) null)).size());
}
