void loadFromNode(SourceNode sn) throws Exception {
    File mdf = null;
    if (sn.isConnected()) {
        Tunnel tun = null;
        try {
            tun = sn.conn.creatTunnel(false);
            TunnelOutputStream tos = tun.getTunnelOutputStream();
            GetMdfCOM1 gmc1 = new GetMdfCOM1(mdb);
            tos.writeCommand(gmc1);
            TunnelInputStream tis = tun.getTunnelInputStream();
            byte[] commandByte = tis.readCommand();
            int commandType = peer.rdp.command.Command.checkCommandType(commandByte);
            if (commandType == peer.tools.CommandType.command_GetMdfCOM2) {
                byte[] data = new byte[1024];
                String s = peer.tools.Pmd52f.byteArrayToHexString(mdb.md);
                String pmd = null;
                if (peer.Config.savePmd2) {
                    pmd = ".pmd2";
                } else {
                    pmd = ".pmd";
                }
                String fName = s + pmd;
                File file = new File(Config.mdfDir + fName);
                File parent = file.getParentFile();
                if (!parent.exists()) {
                    parent.mkdir();
                }
                FileOutputStream fos = new FileOutputStream(file);
                while (true) {
                    int length = tis.read(data, 0, data.length);
                    if (length == -1) {
                        break;
                    }
                    fos.write(data, 0, length);
                    fos.flush();
                }
                fos.close();
            } else if (commandType == peer.tools.CommandType.command_GetMdfCOM3) {
                throw new Exception("loadFromNodeError NotExit");
            }
            String mdStr = Pmd52f.byteArrayToHexString(mdb.md);
            String path = Config.mdfDir + mdStr + ".pmd";
            mdf = new File(path);
            fileChecker = new FileChecker(mdb, mdf);
            fileLength = fileChecker.getFileLength();
            isCheckerLoad = true;
        } catch (Exception e) {
            if (tun != null) {
                tun.close();
            }
            e.printStackTrace();
            if (mdf != null) {
                if (mdf.exists()) {
                    mdf.delete();
                }
            }
            throw new Exception("loadFromNodeError111111111111111");
        } finally {
            if (tun != null) {
                try {
                    tun.close();
                } catch (ConnectException e2) {
                    e2.printStackTrace();
                }
            }
        }
    } else {
        throw new Exception("loadFromNodeErro  δ���ӣ�");
    }
}
