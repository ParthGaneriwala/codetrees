private void initMenu() {
    JMenu menuFile = new JMenu(LabelReader.getInstance().getString("File"));
    JMenu menuEdit = new JMenu(LabelReader.getInstance().getString("Edit"));
    JMenu menuPalette = new JMenu(LabelReader.getInstance().getString("Palette"));
    JMenu menuHelp = new JMenu(LabelReader.getInstance().getString("Help"));
    JMenuItem mItemNew = new JMenuItem(new DeleteAction(true, controller.getGview()));
    mItemNew.setText(LabelReader.getInstance().getString("New"));
    JMenuItem mItemOpen = new JMenuItem(LabelReader.getInstance().getString("Open"));
    JMenuItem mItemSaveAs = new JMenuItem(LabelReader.getInstance().getString("SaveAs"));
    JMenuItem mItemJPG = new JMenuItem(LabelReader.getInstance().getString("Export"));
    JMenuItem mItemExit = new JMenuItem(LabelReader.getInstance().getString("Exit"));
    JMenuItem mItemLoad = new JMenuItem(LabelReader.getInstance().getString("ImportNode"));
    JMenuItem mItemBoxLoad = new JMenuItem(LabelReader.getInstance().getString("ImportBoxNode"));
    JMenuItem mItemModifySkin = new JMenuItem(LabelReader.getInstance().getString("ModifySkin"));
    JMenuItem mItemModifyDelay = new JMenuItem(LabelReader.getInstance().getString("ModifyDelay"));
    JMenuItem mItemHelp = new JMenuItem(LabelReader.getInstance().getString("Help"));
    JMenuItem mItemAbout = new JMenuItem(LabelReader.getInstance().getString("About"));
    mItemHelp.addActionListener(new ActionListener() {

        public void actionPerformed(ActionEvent e) {
            JOptionPane.showMessageDialog(MainFrame.this, LabelReader.getInstance().getString("HelpText"), LabelReader.getInstance().getString("Help"), JOptionPane.INFORMATION_MESSAGE);
        }
    });
    mItemAbout.addActionListener(new ActionListener() {

        public void actionPerformed(ActionEvent e) {
            JOptionPane.showMessageDialog(MainFrame.this, LabelReader.getInstance().getString("AboutText"), LabelReader.getInstance().getString("About"), JOptionPane.INFORMATION_MESSAGE);
        }
    });
    mItemExit.addActionListener(new ActionListener() {

        public void actionPerformed(ActionEvent e) {
            System.exit(0);
        }
    });
    mItemModifySkin.addActionListener(new ActionListener() {

        public void actionPerformed(ActionEvent e) {
            SkinChooser skinChooser = new SkinChooser(controller.getGmodel(), scroll);
        }
    });
    mItemModifyDelay.addActionListener(new ActionListener() {

        public void actionPerformed(ActionEvent e) {
            String time = JOptionPane.showInputDialog(LabelReader.getInstance().getString("EnterDelay"));
            try {
                int delay = Integer.parseInt(time);
                StdDraw.getInstance().getTurtle().setDelay(delay);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "MainFrame:" + ex.getMessage(), LabelReader.getInstance().getString("Error"), JOptionPane.ERROR_MESSAGE);
            }
        }
    });
    mItemSaveAs.addActionListener(new ActionListener() {

        public void actionPerformed(ActionEvent e) {
            if (controller.getGmodel().isMainTriggerSet()) {
                filechooser.setFileFilter(new ConnectFileFilter(".ct (Connect)", new String[] { "ct", "connect" }));
                int returnVal = filechooser.showSaveDialog(MainFrame.this);
                if (returnVal == JFileChooser.APPROVE_OPTION) {
                    File file = filechooser.getSelectedFile();
                    if (file.getPath().endsWith(".ct")) {
                        Serializer s = new Serializer(controller.getGmodel(), controller.getCmodel(), file.getPath());
                        s.serialize();
                    } else {
                        Serializer s = new Serializer(controller.getGmodel(), controller.getCmodel(), file.getPath() + ".ct");
                        s.serialize();
                    }
                }
                controller.getGview().repaint();
                controller.getGview().updateUI();
            } else {
                JOptionPane.showMessageDialog(null, LabelReader.getInstance().getString("SetMainTriggerSaveError"), LabelReader.getInstance().getString("Error"), JOptionPane.INFORMATION_MESSAGE);
            }
        }
    });
    mItemOpen.addActionListener(new ActionListener() {

        public void actionPerformed(ActionEvent e) {
            filechooser.setFileFilter(new ConnectFileFilter(".ct (Connect)", new String[] { "ct", "connect" }));
            int returnVal = filechooser.showOpenDialog(MainFrame.this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                File file = filechooser.getSelectedFile();
                Serializer s = new Serializer(controller.getGmodel(), controller.getCmodel(), file.getPath());
                s.deserialize();
            }
            controller.getGview().removeAll();
            controller.getGmodel().getAllNodes().clear();
            controller.getGview().repaint();
            controller.getGview().updateUI();
            for (Graphical g : controller.getGmodel().getObjects()) {
                System.out.println(g.getClass());
                controller.getGview().add(g);
                if (GNode.class.isAssignableFrom(g.getClass())) {
                    controller.getGmodel().getAllNodes().add(g);
                }
                if (GBoxNode.class.isAssignableFrom(g.getClass())) {
                    GBoxNode bn = (GBoxNode) g;
                    for (Graphical gt : bn.getTransmitterObjects()) {
                        controller.getGview().add(gt);
                        if (GTrigger.class.isAssignableFrom(gt.getClass())) {
                            GTrigger trigger = (GTrigger) gt;
                            System.out.println(trigger.getBaseColor());
                            if (trigger.getBackColor().equals(Color.GREEN)) {
                                controller.getGmodel().setMainTrigger(trigger);
                            }
                        }
                    }
                    for (Graphical gi : bn.getInternalObjects()) {
                        controller.getGview().add(gi);
                        if (GTrigger.class.isAssignableFrom(gi.getClass())) {
                            GTrigger trigger = (GTrigger) gi;
                            System.out.println(trigger.getBaseColor());
                            if (trigger.getBackColor().equals(Color.GREEN)) {
                                controller.getGmodel().setMainTrigger(trigger);
                            }
                        }
                    }
                }
                if (GTrigger.class.isAssignableFrom(g.getClass())) {
                    GTrigger trigger = (GTrigger) g;
                    if (trigger.getBackColor().equals(Color.GREEN)) {
                        controller.getGmodel().setMainTrigger(trigger);
                    }
                }
            }
            controller.getGview().notifyObservers(new CustomArgument("tabRight", 1));
        }
    });
    mItemJPG.addActionListener(new ActionListener() {

        public void actionPerformed(ActionEvent e) {
            filechooser.setFileFilter(new ConnectFileFilter(".jpg (" + LabelReader.getInstance().getString("Image") + ")", new String[] { "jpg", "jpeg" }));
            int returnVal = filechooser.showSaveDialog(MainFrame.this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                File file = filechooser.getSelectedFile();
                if (!file.getPath().endsWith(".jpg")) {
                    file = new File(file.getPath() + ".jpg");
                }
                controller.getGview().saveToJPG(file);
            }
        }
    });
    mItemLoad.addActionListener(new ActionListener() {

        public void actionPerformed(ActionEvent e) {
            filechooser.setFileFilter(new ConnectFileFilter(".java (Java file)", new String[] { "java", "Java file" }));
            int returnVal = filechooser.showOpenDialog(MainFrame.this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                File file = filechooser.getSelectedFile();
                Reflect r = new Reflect(controller.getGmodel(), controller.getPalette());
                r.importNode(file);
            }
        }
    });
    mItemBoxLoad.addActionListener(new ActionListener() {

        public void actionPerformed(ActionEvent e) {
            filechooser.setFileFilter(new ConnectFileFilter(".bn (BoxNode)", new String[] { "bn", "boxnode" }));
            int returnVal = filechooser.showOpenDialog(MainFrame.this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                File file = filechooser.getSelectedFile();
                controller.getSelectedGraphicView().notifyObservers(new ImportBoxNodeCommand(file));
            }
        }
    });
    menuFile.add(mItemNew);
    menuFile.add(mItemOpen);
    menuFile.add(mItemSaveAs);
    menuFile.addSeparator();
    menuFile.add(mItemJPG);
    menuFile.addSeparator();
    menuFile.add(mItemExit);
    menuEdit.add(mItemModifySkin);
    menuEdit.add(mItemModifyDelay);
    menuPalette.add(mItemLoad);
    menuPalette.add(mItemBoxLoad);
    menuHelp.add(mItemHelp);
    menuHelp.add(mItemAbout);
    menubar.add(menuFile);
    menubar.add(menuEdit);
    menubar.add(menuPalette);
    menubar.add(menuHelp);
    this.setJMenuBar(menubar);
}
