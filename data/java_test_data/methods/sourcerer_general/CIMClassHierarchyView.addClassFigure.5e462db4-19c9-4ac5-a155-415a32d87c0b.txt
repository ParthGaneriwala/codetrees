private // ScrollPane contents,
UMLCIMClass addClassFigure(Figure contents, XYLayout contentsLayout, Font classFont, ImageDescriptor id, CIMClass cc, Color color, int x, int y) {
    Label classLabel1 = new Label(cc.getName(), id.createImage());
    classLabel1.setFont(classFont);
    Vector<?> vc = cc.getQualifiers();
    StringBuffer buf = new StringBuffer("");
    makeToolTipText(vc, buf);
    if (!cc.getName().equals(this.cc.getName())) {
        buf.append("\n    >> Double-click to display hierarchy <<");
    }
    // classLabel1.setToolTip(new Label(buf.toString()));
    classLabel1.addMouseMotionListener(new PersistentToolTipListener(classLabel1, buf.toString(), parent));
    classLabel1.addMouseListener(new UMLCIMClassMouseListener(cc));
    // classLabel1.setBackgroundColor(new Color(null, 88, 88, 8));
    UMLCIMClass classFigure = new UMLCIMClass(classLabel1, color, cc, parent);
    // XYLayout contentsLayout = new XYLayout();
    id = CIMPlugin.getImageDescriptor("icons/field_private_obj.gif");
    Vector<?> v = cc.getAllProperties();
    if (v != null) {
        for (int i = 0; i < v.size(); i++) {
            CIMProperty cp = (CIMProperty) v.get(i);
            String pn = cp.getName();
            String type = cp.getType().toMOF();
            Label attribute1 = new Label(pn + ": " + type, id.createImage());
            vc = cp.getQualifiers();
            buf = new StringBuffer("");
            makeToolTipText(vc, buf);
            attribute1.addMouseMotionListener(new PersistentToolTipListener(attribute1, buf.toString(), parent));
            classFigure.getAttributesCompartment().add(attribute1);
        }
    }
    id = CIMPlugin.getImageDescriptor("icons/methpub_obj.gif");
    v = cc.getAllMethods();
    if (v != null) {
        for (int i = 0; i < v.size(); i++) {
            CIMMethod cm = (CIMMethod) v.get(i);
            Label method1 = new Label(cm.getName() + ": " + cm.getType().toMOF(), id.createImage());
            vc = cm.getQualifiers();
            buf = new StringBuffer("");
            makeToolTipText(vc, buf);
            method1.addMouseMotionListener(new PersistentToolTipListener(method1, buf.toString(), parent));
            classFigure.getMethodsCompartment().add(method1);
        }
    }
    contentsLayout.setConstraint(classFigure, new Rectangle(x, y, -1, -1));
    contents.add(classFigure);
    return classFigure;
}
