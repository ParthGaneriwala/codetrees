public void newWSDLMethod(String modelName) {
    System.out.println("----------------------------");
    System.out.println("newObject(" + modelName + ")");
    try {
        ModelObject model = (ModelObject) Class.forName("com.jcommerce.core.model." + modelName).newInstance();
        ADBBean wsdlObj = (ADBBean) Class.forName("com.jcommerce.ws.server." + modelName).newInstance();
        String fucName = "public com.jcommerce.ws.server." + modelName + " getWSDL" + modelName + "(com.jcommerce.core.model." + modelName + " input){";
        out.println(fucName);
        String defineStr = "com.jcommerce.ws.server." + modelName + " ret = new com.jcommerce.ws.server." + modelName + "();";
        out.println(defineStr);
        Method[] methods = model.getClass().getDeclaredMethods();
        Method[] wsdlMethods = wsdlObj.getClass().getDeclaredMethods();
        for (int i = 0; i < wsdlMethods.length; i++) {
            boolean setFlag = false;
            Method wsdlMethod = wsdlMethods[i];
            String wsdlMethodName = wsdlMethod.getName();
            if (wsdlMethodName.startsWith("set")) {
                for (int j = 0; j < methods.length; j++) {
                    Method method = methods[j];
                    Class c = method.getReturnType();
                    boolean exist = list.contains(c.getName());
                    System.out.println(c.getName());
                    String methodName = method.getName();
                    if ((c.getName().equalsIgnoreCase("boolean")) && (methodName.startsWith("is")) && (wsdlMethodName.substring(3).equals(methodName.substring(2)))) {
                        out.println("ret." + wsdlMethodName + "(input." + methodName + "());");
                        break;
                    }
                    if ((methodName.startsWith("get")) && (wsdlMethodName.substring(3).equals(methodName.substring(3)))) {
                        Type type = method.getGenericReturnType();
                        String typeStr = "###";
                        if (c.getName().equals("java.util.Set")) {
                            typeStr = type.toString();
                            System.out.println(typeStr);
                            int startIndex = typeStr.lastIndexOf(".");
                            int endIndex = typeStr.lastIndexOf(">");
                            if (typeStr.indexOf("<com.jcommerce.core.model.") > 0) {
                                typeStr = typeStr.substring(startIndex + 1, endIndex);
                                setFlag = true;
                                System.out.println(typeStr);
                            }
                        }
                        if (exist) {
                            if (modelName.equals("Cart") && (methodName.equals("getSession"))) {
                                // in this model, session is int not str, so do specical handle.
                                printSpecStrForCart();
                            } else {
                                out.println("if(input." + methodName + "() != null){");
                                out.println("ret." + wsdlMethodName + "(input." + methodName + "().getId());");
                                out.println("}");
                            }
                        } else if (setFlag) {
                            printWSDLCollectionStr(typeStr, methodName, wsdlMethodName);
                            setFlag = false;
                        } else {
                            out.println("ret." + wsdlMethodName + "(input." + methodName + "());");
                        }
                        break;
                    }
                }
            }
        }
        out.println("return ret;");
        String end = "}";
        out.println(end);
    } catch (SecurityException e) {
        e.printStackTrace();
    } catch (IllegalArgumentException e) {
        e.printStackTrace();
    } catch (InstantiationException e) {
        e.printStackTrace();
    } catch (IllegalAccessException e) {
        e.printStackTrace();
    } catch (ClassNotFoundException e) {
        e.printStackTrace();
    } catch (Exception e) {
        e.printStackTrace();
    }
}
