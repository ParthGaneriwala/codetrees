public static void initVBO() {
    float[] verticesFloat = new float[caseMax * caseMax * 6 * 4 * 3];
    float[] colorsFloat = new float[caseMax * caseMax * 6 * 4 * 3];
    float size = 0.01f;
    for (int i = -caseMax + 1; i < caseMax + 1; i++) {
        for (int j = -caseMax + 1; j < caseMax + 1; j++) {
            verticesFloat[(i + caseMax - 1) * caseMax * 2 * 6 * 3 + (j + caseMax - 1) * 6 * 3 + 0] = 0f + i * size;
            colorsFloat[(i + caseMax - 1) * caseMax * 2 * 6 * 3 + (j + caseMax - 1) * 6 * 3 + 0] = 0;
            verticesFloat[(i + caseMax - 1) * caseMax * 2 * 6 * 3 + (j + caseMax - 1) * 6 * 3 + 1] = -0.005f;
            colorsFloat[(i + caseMax - 1) * caseMax * 2 * 6 * 3 + (j + caseMax - 1) * 6 * 3 + 1] = 0;
            verticesFloat[(i + caseMax - 1) * caseMax * 2 * 6 * 3 + (j + caseMax - 1) * 6 * 3 + 2] = -0.01f + j * size;
            colorsFloat[(i + caseMax - 1) * caseMax * 2 * 6 * 3 + (j + caseMax - 1) * 6 * 3 + 2] = 1;
            verticesFloat[(i + caseMax - 1) * caseMax * 2 * 6 * 3 + (j + caseMax - 1) * 6 * 3 + 3] = (i - 1) * size;
            colorsFloat[(i + caseMax - 1) * caseMax * 2 * 6 * 3 + (j + caseMax - 1) * 6 * 3 + 3] = 0;
            verticesFloat[(i + caseMax - 1) * caseMax * 2 * 6 * 3 + (j + caseMax - 1) * 6 * 3 + 4] = -0.005f;
            colorsFloat[(i + caseMax - 1) * caseMax * 2 * 6 * 3 + (j + caseMax - 1) * 6 * 3 + 4] = 0;
            verticesFloat[(i + caseMax - 1) * caseMax * 2 * 6 * 3 + (j + caseMax - 1) * 6 * 3 + 5] = -0.01f + j * size;
            colorsFloat[(i + caseMax - 1) * caseMax * 2 * 6 * 3 + (j + caseMax - 1) * 6 * 3 + 5] = 1;
            verticesFloat[(i + caseMax - 1) * caseMax * 2 * 6 * 3 + (j + caseMax - 1) * 6 * 3 + 6] = 0f + i * size;
            colorsFloat[(i + caseMax - 1) * caseMax * 2 * 6 * 3 + (j + caseMax - 1) * 6 * 3 + 6] = 0;
            verticesFloat[(i + caseMax - 1) * caseMax * 2 * 6 * 3 + (j + caseMax - 1) * 6 * 3 + 7] = -0.005f;
            colorsFloat[(i + caseMax - 1) * caseMax * 2 * 6 * 3 + (j + caseMax - 1) * 6 * 3 + 7] = 0;
            verticesFloat[(i + caseMax - 1) * caseMax * 2 * 6 * 3 + (j + caseMax - 1) * 6 * 3 + 8] = -0.01f + (j - 1) * size;
            colorsFloat[(i + caseMax - 1) * caseMax * 2 * 6 * 3 + (j + caseMax - 1) * 6 * 3 + 8] = 1;
            verticesFloat[(i + caseMax - 1) * caseMax * 2 * 6 * 3 + (j + caseMax - 1) * 6 * 3 + 9] = 0f + (i - 1) * size;
            colorsFloat[(i + caseMax - 1) * caseMax * 2 * 6 * 3 + (j + caseMax - 1) * 6 * 3 + 9] = 0;
            verticesFloat[(i + caseMax - 1) * caseMax * 2 * 6 * 3 + (j + caseMax - 1) * 6 * 3 + 10] = -0.005f;
            colorsFloat[(i + caseMax - 1) * caseMax * 2 * 6 * 3 + (j + caseMax - 1) * 6 * 3 + 10] = 1;
            verticesFloat[(i + caseMax - 1) * caseMax * 2 * 6 * 3 + (j + caseMax - 1) * 6 * 3 + 11] = -0.01f + (j - 1) * size;
            colorsFloat[(i + caseMax - 1) * caseMax * 2 * 6 * 3 + (j + caseMax - 1) * 6 * 3 + 11] = 0;
            verticesFloat[(i + caseMax - 1) * caseMax * 2 * 6 * 3 + (j + caseMax - 1) * 6 * 3 + 12] = (i - 1) * size;
            colorsFloat[(i + caseMax - 1) * caseMax * 2 * 6 * 3 + (j + caseMax - 1) * 6 * 3 + 12] = 0;
            verticesFloat[(i + caseMax - 1) * caseMax * 2 * 6 * 3 + (j + caseMax - 1) * 6 * 3 + 13] = -0.005f;
            colorsFloat[(i + caseMax - 1) * caseMax * 2 * 6 * 3 + (j + caseMax - 1) * 6 * 3 + 13] = 0;
            verticesFloat[(i + caseMax - 1) * caseMax * 2 * 6 * 3 + (j + caseMax - 1) * 6 * 3 + 14] = -0.01f + j * size;
            colorsFloat[(i + caseMax - 1) * caseMax * 2 * 6 * 3 + (j + caseMax - 1) * 6 * 3 + 14] = 1;
            verticesFloat[(i + caseMax - 1) * caseMax * 2 * 6 * 3 + (j + caseMax - 1) * 6 * 3 + 15] = 0f + i * size;
            colorsFloat[(i + caseMax - 1) * caseMax * 2 * 6 * 3 + (j + caseMax - 1) * 6 * 3 + 15] = 1;
            verticesFloat[(i + caseMax - 1) * caseMax * 2 * 6 * 3 + (j + caseMax - 1) * 6 * 3 + 16] = -0.005f;
            colorsFloat[(i + caseMax - 1) * caseMax * 2 * 6 * 3 + (j + caseMax - 1) * 6 * 3 + 16] = 0;
            verticesFloat[(i + caseMax - 1) * caseMax * 2 * 6 * 3 + (j + caseMax - 1) * 6 * 3 + 17] = -0.01f + (j - 1) * size;
            colorsFloat[(i + caseMax - 1) * caseMax * 2 * 6 * 3 + (j + caseMax - 1) * 6 * 3 + 17] = 0;
        }
    }
    vertices = BufferUtils.createFloatBuffer(caseMax * caseMax * 6 * 3 * 4);
    vertices.put(verticesFloat);
    colors = BufferUtils.createFloatBuffer(caseMax * caseMax * 6 * 3 * 4);
    colors.put(colorsFloat);
    vertices.rewind();
    IntBuffer buffer = BufferUtils.createIntBuffer(1);
    ARBVertexBufferObject.glGenBuffersARB(buffer);
    vertexBufferID = buffer.get(0);
    ARBVertexBufferObject.glBindBufferARB(ARBVertexBufferObject.GL_ARRAY_BUFFER_ARB, vertexBufferID);
    ARBVertexBufferObject.glBufferDataARB(ARBVertexBufferObject.GL_ARRAY_BUFFER_ARB, vertices, ARBVertexBufferObject.GL_STATIC_DRAW_ARB);
    colors.rewind();
    buffer = BufferUtils.createIntBuffer(1);
    ARBVertexBufferObject.glGenBuffersARB(buffer);
    colorBufferID = buffer.get(0);
    ARBVertexBufferObject.glBindBufferARB(ARBVertexBufferObject.GL_ARRAY_BUFFER_ARB, colorBufferID);
    ARBVertexBufferObject.glBufferDataARB(ARBVertexBufferObject.GL_ARRAY_BUFFER_ARB, colors, ARBVertexBufferObject.GL_STATIC_DRAW_ARB);
}
