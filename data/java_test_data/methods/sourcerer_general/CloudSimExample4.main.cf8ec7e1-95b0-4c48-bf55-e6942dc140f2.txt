public static void main(String[] args) {
    Log.printLine("Starting CloudSimExample4...");
    try {
        // First step: Initialize the CloudSim package. It should be called
        // before creating any entities.
        // number of cloud users
        int num_user = 1;
        Calendar calendar = Calendar.getInstance();
        // mean trace events
        boolean trace_flag = false;
        // Initialize the GridSim library
        CloudSim.init(num_user, calendar, trace_flag);
        // Second step: Create Datacenters
        // Datacenters are the resource providers in CloudSim. We need at list one of them to run a CloudSim simulation
        Datacenter datacenter0 = createDatacenter("Datacenter_0");
        Datacenter datacenter1 = createDatacenter("Datacenter_1");
        // Third step: Create Broker
        DatacenterBroker broker = createBroker();
        int brokerId = broker.getId();
        // Fourth step: Create one virtual machine
        vmlist = new ArrayList<Vm>();
        // VM description
        int vmid = 0;
        int mips = 250;
        // image size (MB)
        long size = 10000;
        // vm memory (MB)
        int ram = 512;
        long bw = 1000;
        // number of cpus
        int pesNumber = 1;
        // VMM name
        String vmm = "Xen";
        // create two VMs
        Vm vm1 = new Vm(vmid, brokerId, mips, pesNumber, ram, bw, size, vmm, new CloudletSchedulerTimeShared());
        // the second VM will have twice the priority of VM1 and so will receive twice CPU time
        vmid++;
        Vm vm2 = new Vm(vmid, brokerId, mips, pesNumber, ram, bw, size, vmm, new CloudletSchedulerTimeShared());
        // add the VMs to the vmList
        vmlist.add(vm1);
        vmlist.add(vm2);
        // submit vm list to the broker
        broker.submitVmList(vmlist);
        // Fifth step: Create two Cloudlets
        cloudletList = new ArrayList<Cloudlet>();
        // Cloudlet properties
        int id = 0;
        long length = 40000;
        long fileSize = 300;
        long outputSize = 300;
        UtilizationModel utilizationModel = new UtilizationModelFull();
        Cloudlet cloudlet1 = new Cloudlet(id, length, pesNumber, fileSize, outputSize, utilizationModel, utilizationModel, utilizationModel);
        cloudlet1.setUserId(brokerId);
        id++;
        Cloudlet cloudlet2 = new Cloudlet(id, length, pesNumber, fileSize, outputSize, utilizationModel, utilizationModel, utilizationModel);
        cloudlet2.setUserId(brokerId);
        // add the cloudlets to the list
        cloudletList.add(cloudlet1);
        cloudletList.add(cloudlet2);
        // submit cloudlet list to the broker
        broker.submitCloudletList(cloudletList);
        // bind the cloudlets to the vms. This way, the broker
        // will submit the bound cloudlets only to the specific VM
        broker.bindCloudletToVm(cloudlet1.getCloudletId(), vm1.getId());
        broker.bindCloudletToVm(cloudlet2.getCloudletId(), vm2.getId());
        // Sixth step: Starts the simulation
        CloudSim.startSimulation();
        // Final step: Print results when simulation is over
        List<Cloudlet> newList = broker.getCloudletReceivedList();
        CloudSim.stopSimulation();
        printCloudletList(newList);
        // Print the debt of each user to each datacenter
        datacenter0.printDebts();
        datacenter1.printDebts();
        Log.printLine("CloudSimExample4 finished!");
    } catch (Exception e) {
        e.printStackTrace();
        Log.printLine("Unwanted errors happen");
    }
}
