public void testChooseTarget2() throws Exception {
    List<Node> excludedNodes;
    DatanodeDescriptor[] targets;
    excludedNodes = new ArrayList<Node>();
    excludedNodes.add(dataNodes[1]);
    targets = replicator.chooseTarget(0, dataNodes[0], excludedNodes, BLOCK_SIZE);
    assertEquals(targets.length, 0);
    excludedNodes.clear();
    excludedNodes.add(dataNodes[1]);
    targets = replicator.chooseTarget(1, dataNodes[0], excludedNodes, BLOCK_SIZE);
    assertEquals(targets.length, 1);
    assertEquals(targets[0], dataNodes[0]);
    excludedNodes.clear();
    excludedNodes.add(dataNodes[1]);
    targets = replicator.chooseTarget(2, dataNodes[0], excludedNodes, BLOCK_SIZE);
    assertEquals(targets.length, 2);
    assertEquals(targets[0], dataNodes[0]);
    assertFalse(cluster.isOnSameRack(targets[0], targets[1]));
    excludedNodes.clear();
    excludedNodes.add(dataNodes[1]);
    targets = replicator.chooseTarget(3, dataNodes[0], excludedNodes, BLOCK_SIZE);
    assertEquals(targets.length, 3);
    assertEquals(targets[0], dataNodes[0]);
    assertFalse(cluster.isOnSameRack(targets[0], targets[1]));
    assertTrue(cluster.isOnSameRack(targets[1], targets[2]));
    excludedNodes.clear();
    excludedNodes.add(dataNodes[1]);
    targets = replicator.chooseTarget(4, dataNodes[0], excludedNodes, BLOCK_SIZE);
    assertEquals(targets.length, 4);
    assertEquals(targets[0], dataNodes[0]);
    for (int i = 1; i < 4; i++) {
        assertFalse(cluster.isOnSameRack(targets[0], targets[i]));
    }
    assertTrue(cluster.isOnSameRack(targets[1], targets[2]) || cluster.isOnSameRack(targets[2], targets[3]));
    assertFalse(cluster.isOnSameRack(targets[1], targets[3]));
}
