public StringBuffer getTrainingData(String question, String correctID, Vector<Quadruple<String, String, String, String>> vresp, String lang) {
    StringBuffer result = new StringBuffer();
    result.append("% Q: " + question + "\n");
    // "no pattern matched" topic)
    for (int k = 0; k < vresp.size() - 1; k++) {
        result.append("% A-ID: " + Tuple.get1(vresp.get(k)) + "\n");
        result.append("% A: " + Tuple.get3(vresp.get(k)) + "\n");
        String regex = Tuple.get4(vresp.get(k));
        // calculate feature values for this <Q, A> pair, add them to the
        // CSV
        boolean regexmatch = true;
        double regexmatchLen = regex.length();
        double regexmatchLetterLen = countLetters(regex, lang);
        double regexmatchPipeLen = countPipes(regex, lang);
        double regexmatchLetterOverPipe = regexmatchLetterLen / (regexmatchPipeLen + 1);
        double tfIdfSimilarity = -1.0;
        if (lang.toUpperCase().equals("EN")) {
            tfIdfSimilarity = tfIdfEN.proximity(question, Tuple.get3(vresp.get(k)));
        } else if (lang.toUpperCase().equals("DE")) {
            tfIdfSimilarity = tfIdfDE.proximity(question, Tuple.get3(vresp.get(k)));
        } else if (lang.toUpperCase().equals("IT")) {
            tfIdfSimilarity = tfIdfIT.proximity(question, Tuple.get3(vresp.get(k)));
        }
        double treeSearchRank = k;
        // new features
        double nAND = countBooleanAND(regex);
        double nOR = countBooleanOR(regex);
        double nANDoverOR = nAND / (nOR + 1);
        int topicID = getMainTopicID(Tuple.get1(vresp.get(k)));
        double treeSearchProminence = getTreeSearchProminence(vresp.size(), k + 1);
        double rankOverTopicID = treeSearchRank / (topicID + 1);
        QAFeatures features = new QAFeatures(regexmatch, regexmatchLen, regexmatchLetterLen, regexmatchPipeLen, regexmatchLetterOverPipe, tfIdfSimilarity, treeSearchRank, nAND, nOR, nANDoverOR, topicID, rankOverTopicID, treeSearchProminence);
        boolean answerIsCorrect = correctID.equals(Tuple.get1(vresp.get(k))) || correctID.equals(Tuple.get2(vresp.get(k)));
        result.append(features.getDataCsvString(answerIsCorrect));
    }
    return result;
}
