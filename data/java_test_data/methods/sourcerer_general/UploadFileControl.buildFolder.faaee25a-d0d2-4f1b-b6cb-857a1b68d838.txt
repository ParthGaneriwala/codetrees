private File buildFolder(HttpServletRequest request) {
    // 这里照顾一下CKEDITOR，由于ftl放置位置的原因，这里必须要在freemarker目录下才能被加载到图片，否则虽然可以正常上传和使用，但是
    // 在控件中无法正常操作
    String realPath = request.getSession().getServletContext().getRealPath(FOR_FREEMARKER_LOAD_DIR);
    logger.error(realPath);
    // 一级目录，如果不存在，创建
    File firstFolder = new File(realPath + FILE_UPLOAD_DIR);
    if (!firstFolder.exists()) {
        if (!firstFolder.mkdir()) {
            logger.error("创建文件夹出错！path=" + firstFolder.getAbsolutePath());
            return null;
        }
    }
    // 二级目录，如果不存在，创建
    String folderdir = realPath + FILE_UPLOAD_DIR + FILE_UPLOAD_SUB_IMG_DIR;
    if (logger.isDebugEnabled()) {
        logger.debug("folderdir" + folderdir);
    }
    if (StringUtils.isBlank(folderdir)) {
        logger.error("路径错误:" + folderdir);
        return null;
    }
    File floder = new File(folderdir);
    if (!floder.exists()) {
        if (!floder.mkdir()) {
            logger.error("创建文件夹出错！path=" + folderdir);
            return null;
        }
    }
    // 再往下的文件夹都是以时间字符串来命名的，所以获取最新时间的文件夹即可
    String[] files = floder.list();
    if (null != files && 0 < files.length) {
        // 含有子文件夹，则获取最新的一个
        Date oldDate = null;
        int index = -1;
        for (int i = 0; i < files.length; i++) {
            String fileName = files[i];
            try {
                Date thisDate = DateUtils.parseDate(fileName, new String[] { DEFAULT_SUB_FOLDER_FORMAT_AUTO, DEFAULT_SUB_FOLDER_FORMAT_NO_AUTO });
                if (oldDate == null) {
                    oldDate = thisDate;
                    index = i;
                } else {
                    if (thisDate.after(oldDate)) {
                        // 保存最新的时间和数组中的下标
                        oldDate = thisDate;
                        index = i;
                    }
                }
            } catch (ParseException e) {
            // 这里异常吃掉，不用做什么，如果解析失败，会建立新的文件夹，防止人为的建立文件夹导致的异常。
            }
        }
        // 判断当前最新的文件夹下是否已经存在了最大数目的图片
        if (null != oldDate && -1 != index) {
            File pointfloder = new File(folderdir + File.separator + files[index]);
            if (!pointfloder.exists()) {
                if (!pointfloder.mkdir()) {
                    logger.error("创建文件夹出错！path=" + folderdir);
                    return null;
                }
            }
            // 如果文件夹下的文件超过了最大值，那么也需要新建一个文件夹
            String[] pointfloderFiles = pointfloder.list();
            if (null != pointfloderFiles && MAX_NUM_PER_UPLOAD_SUB_DIR < pointfloderFiles.length) {
                return buildNewFile(folderdir);
            }
            return pointfloder;
        }
        // 查找当前子文件夹失败，新建一个
        return buildNewFile(folderdir);
    } else {
        // 不含有子文件夹，新建一个，通常系统首次上传会有这个情况
        return buildNewFile(folderdir);
    }
}
