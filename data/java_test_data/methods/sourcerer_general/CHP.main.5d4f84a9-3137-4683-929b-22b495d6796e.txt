public static void main(String[] args) {
    CHP chp = new CHP();
    SessionOptions so = chp.processArguments(args);
    if (so == null) {
        printHelp();
        System.exit(1);
    }
    String ifile = so.getProblem();
    String ofile = so.getSolution();
    int[] options = so.getOptions();
    try {
        WICInput problemData = IOHandler.decodeInputFile(ifile);
        WICOutput solutionData = null, solutionData1 = null, solutionData2 = null, solutionData3 = null;
        // let's process the stuff now
        if (options[0] == 0) {
            solutionData = IOHandler.decodeOutputFile(ofile);
            if (SolutionChecker.checkSolution(problemData, solutionData) == 0)
                System.out.println("\n[OK] The solution is valid\n");
            else if (SolutionChecker.checkSolution(problemData, solutionData) == 1)
                System.out.println("\n[NOT OK] The K of the solution (" + solutionData.getK() + ") is greater than the one (" + problemData.getK() + ") required by the problem\n");
            else
                System.out.println("\n[NOT OK] The solution doesn't match the problem\n");
            System.out.println(generateReport(ifile, new String[] { "SOLUTION" }, problemData, new WICOutput[] { solutionData }));
        } else if (options[0] == 1) {
            if (options[2] == 1) {
                solutionData = SolutionGenerator.equalNumbersFirst(problemData);
                System.out.println(generateReport(ifile, new String[] { "SolutionGenerator.equalNumbersFirst()" }, problemData, new WICOutput[] { solutionData }));
                IOHandler.generateOutputFile(ofile, solutionData);
            } else if (options[2] == 2) {
                solutionData = SolutionGenerator.generateSolutionMin(problemData);
                System.out.println(generateReport(ifile, new String[] { "SolutionGenerator.generateSolutionMin()" }, problemData, new WICOutput[] { solutionData }));
                IOHandler.generateOutputFile(ofile, solutionData);
            } else if (options[2] == 3) {
                solutionData = SolutionGenerator.generateSolutionMax(problemData);
                System.out.println(generateReport(ifile, new String[] { "SolutionGenerator.generateSolutionMax()" }, problemData, new WICOutput[] { solutionData }));
                IOHandler.generateOutputFile(ofile, solutionData);
            } else {
                // we want to use all the algorithms...
                solutionData1 = SolutionGenerator.equalNumbersFirst(problemData);
                solutionData2 = SolutionGenerator.generateSolutionMin(problemData);
                solutionData3 = SolutionGenerator.generateSolutionMax(problemData);
                System.out.println(generateReport(ifile, new String[] { "SolutionGenerator.equalNumbersFirst()", "SolutionGenerator.generateSolutionMin()", "SolutionGenerator.generateSolutionMax()" }, problemData, new WICOutput[] { solutionData1, solutionData2, solutionData3 }));
                String[] ofiles = generateOutputFileName(ifile, new String[] { "equalNumbersFirst", "generateSolutionMin", "generateSolutionMax" });
                IOHandler.generateOutputFile(ofiles[0], solutionData1);
                IOHandler.generateOutputFile(ofiles[1], solutionData2);
                IOHandler.generateOutputFile(ofiles[2], solutionData3);
            }
        }
        if (options[1] == 1) {
            // don't provide files
            if (options[0] == 0) {
                // we did --check
                System.out.println(IOHandler.solutionPicture("Solution", problemData, solutionData));
                System.out.println();
            } else {
                // we did --gen
                if (options[2] == 0) {
                    System.out.println(IOHandler.solutionPicture("SolutionGenerator.equalNumbersFirst()", problemData, solutionData1));
                    System.out.println("\n\n");
                    System.out.println(IOHandler.solutionPicture("SolutionGenerator.generateSolutionMin()", problemData, solutionData2));
                    System.out.println("\n\n");
                    System.out.println(IOHandler.solutionPicture("SolutionGenerator.generateSolutionMax()", problemData, solutionData3));
                    System.out.println();
                } else {
                    // we chose an algorithm
                    String alg = null;
                    switch(options[2]) {
                        case 1:
                            alg = "SolutionGenerator.equalNumbersFirst()";
                            break;
                        case 2:
                            alg = "SolutionGenerator.generateSolutionMin()";
                            break;
                        case 3:
                            alg = "SolutionGenerator.generateSolutionMax()";
                            break;
                    }
                    System.out.println(IOHandler.solutionPicture(alg, problemData, solutionData));
                    System.out.println();
                }
            }
        } else if (options[1] == 0) {
            // we provide files
            solutionData = IOHandler.decodeOutputFile(ofile);
            System.out.println(IOHandler.solutionPicture("Solution", problemData, solutionData));
            System.out.println();
        }
    } catch (InputFileException e) {
        System.err.println(e.getErrorMessage());
    } catch (OutputFileException e) {
        System.err.println(e.getErrorMessage());
    }
}
