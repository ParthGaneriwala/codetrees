protected String formatDefinition(String definition, int format, int linkDestination) {
    if (format == FORMAT_PLAIN) {
        definition = MarkupStripper.stripLinks(definition);
        definition = MarkupStripper.stripFormatting(definition);
    }
    if (format == FORMAT_HTML) {
        definition = resolveFormatTags(definition);
        definition = resolveFormatTags(definition);
        // replace links
        Pattern p = Pattern.compile("\\[\\[(.*?)\\]\\]", Pattern.DOTALL);
        Matcher m = p.matcher(definition);
        int lastPos = 0;
        StringBuffer sb = new StringBuffer();
        while (m.find()) {
            sb.append(definition.substring(lastPos, m.start()));
            String link = m.group(1);
            String anchor;
            String dest;
            int pos = link.lastIndexOf("|");
            if (pos > 1) {
                dest = link.substring(0, pos);
                anchor = link.substring(pos + 1);
            } else {
                dest = link;
                anchor = link;
            }
            Article art = wms.wikipedia.getArticleByTitle(dest);
            if (art == null || linkDestination == LINK_NONE) {
                sb.append(anchor);
            } else {
                if (linkDestination == LINK_DIRECT)
                    sb.append("<a href=\"http://www.en.wikipedia.org/wiki/" + art.getTitle() + "\">");
                else
                    sb.append("<a href=\"" + wms.context.getInitParameter("service_name") + "?task=search&id=" + art.getId() + "&term=" + art.getTitle() + "\">");
                sb.append(anchor);
                sb.append("</a>");
            }
            lastPos = m.end();
        }
        sb.append(definition.substring(lastPos));
        definition = sb.toString();
    }
    definition = definition.replaceAll("\\[\\[", "");
    definition = definition.replaceAll("\\]\\]", "");
    return definition;
}
