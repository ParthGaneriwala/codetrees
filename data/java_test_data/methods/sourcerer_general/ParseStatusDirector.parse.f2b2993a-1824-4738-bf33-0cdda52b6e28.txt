public static StatusDirector parse(Map<String, Object> configuration, String input) throws ChiropteraException {
    String language = (String) configuration.get(Constants.Chiroptera.ConfigurationKeys.SERVER_LANGUAGE);
    String country = (String) configuration.get(Constants.Chiroptera.ConfigurationKeys.SERVER_COUNTRY);
    Locale locale = new Locale(language, country);
    DateFormat df = new SimpleDateFormat(Constants.Bacula.DATE_FORMAT, locale);
    StatusDirector sd = new StatusDirector();
    StringBuffer sbTemp = new StringBuffer();
    String temp;
    Parser p = new Parser(input);
    // Banner
    sbTemp.append(p.getToken(Constants.CR)).append(Constants.CR);
    sbTemp.append(p.getToken(Constants.CR)).append(Constants.CR);
    sbTemp.append(p.getToken(Constants.CR));
    sd.setBanner(sbTemp.toString());
    // Blank Line
    p.getToken(Constants.CR);
    temp = p.getToken(Constants.CR).trim();
    // Scheduled jobs
    if (temp.equalsIgnoreCase(Constants.Connection.Tokens.SCHEDULED_JOBS)) {
        // Titles
        p.getToken(Constants.CR);
        // Line
        p.getToken(Constants.CR);
        temp = p.getToken(Constants.CR).trim();
        if (!temp.equalsIgnoreCase(Constants.Connection.Tokens.NO_SCHEDULED_JOBS)) {
            while (!temp.equalsIgnoreCase(Constants.Connection.Tokens.END_JOBS)) {
                sd.getScheduledJobs().add(parseScheduledJob(temp, df));
                temp = p.getToken(Constants.CR).trim();
            }
        }
    }
    // Blank Line
    p.getToken(Constants.CR);
    // Running jobs
    temp = p.getToken(Constants.CR).trim();
    if (temp.equalsIgnoreCase(Constants.Connection.Tokens.RUNNING_JOBS)) {
        // Titles
        p.getToken(Constants.CR);
        // Line
        p.getToken(Constants.CR);
        temp = p.getToken(Constants.CR).trim();
        if (!temp.equalsIgnoreCase(Constants.Connection.Tokens.NO_RUNNING_JOBS)) {
            while (!temp.equalsIgnoreCase(Constants.Connection.Tokens.END_JOBS)) {
                sd.getScheduledJobs().add(parseRunningJob(temp));
                temp = p.getToken(Constants.CR).trim();
            }
        }
    }
    // Blank Line
    p.getToken(Constants.CR);
    // Terminated jobs
    temp = p.getToken(Constants.CR).trim();
    if (temp.equalsIgnoreCase(Constants.Connection.Tokens.TERMINATED_JOBS)) {
        // Titles
        p.getToken(Constants.CR);
        // Line
        p.getToken(Constants.CR);
        temp = p.getToken(Constants.CR).trim();
        if (!temp.equalsIgnoreCase(Constants.Connection.Tokens.NO_TERMINATED_JOBS)) {
            while (!temp.equalsIgnoreCase(Constants.Connection.Tokens.END_JOBS) && temp.trim().length() > 0) {
                sd.getScheduledJobs().add(parseTerminatedJob(temp));
                temp = p.getToken(Constants.CR).trim();
            }
        }
    }
    return sd;
}
