private static InputData buildInputData(Input input) {
    if (input == null) {
        return null;
    }
    List<Long> chunkArray = input.getTextualDiff().getChunks();
    String oldText = input.getOldSource().getText();
    String newText = input.getNewSource().getText();
    int arrayLengthExpected = chunkArray.size() / 3;
    List<ChunkData> oldLineNumbers = new ArrayList<ChunkData>(arrayLengthExpected);
    List<ChunkData> newLineNumbers = new ArrayList<ChunkData>(arrayLengthExpected);
    {
        int oldPos = 0;
        int currentOldLineNumber = 0;
        int newPos = 0;
        int currentNewLineNumber = 0;
        for (int i = 0; i < chunkArray.size(); i += 3) {
            int oldStart = chunkArray.get(i + 0).intValue();
            int newStart = oldStart - oldPos + newPos;
            int oldEnd = chunkArray.get(i + 1).intValue();
            int newEnd = chunkArray.get(i + 2).intValue();
            currentOldLineNumber += countLineEnds(oldText, oldPos, oldStart);
            currentNewLineNumber += countLineEnds(newText, newPos, newStart);
            int oldLineStart = currentOldLineNumber;
            int newLineStart = currentNewLineNumber;
            currentOldLineNumber += countLineEnds(oldText, oldStart, oldEnd);
            currentNewLineNumber += countLineEnds(newText, newStart, newEnd);
            oldLineNumbers.add(new ChunkData(oldLineStart, currentOldLineNumber, oldStart, oldEnd));
            newLineNumbers.add(new ChunkData(newLineStart, currentNewLineNumber, newStart, newEnd));
            oldPos = oldEnd;
            newPos = newEnd;
        }
    }
    return new InputData(new TextChangesMap(oldLineNumbers, newLineNumbers), new TextChangesMap(newLineNumbers, oldLineNumbers));
}
