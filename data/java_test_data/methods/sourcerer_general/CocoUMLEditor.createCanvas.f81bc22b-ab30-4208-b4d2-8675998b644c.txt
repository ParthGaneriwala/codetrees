public BCanvas createCanvas() {
    canvas = new BCanvas();
    canvas.setCanvaName("canvas name");
    BClass testClass = new BClass();
    testClass.setName("newClass");
    testClass.setAbstract(true);
    testClass.setAccessAuthrity("public");
    /* ������Կ�ʼ */
    BAttribute attr1 = new BAttribute();
    attr1.setAttrName("people");
    attr1.setAccessAuthrity(BaseElement.PUBLIC);
    attr1.setType("String");
    attr1.setDisplayName(attr1.getDisplayName());
    BAttribute attr2 = new BAttribute();
    attr2.setAttrName("boy");
    attr2.setAccessAuthrity(BaseElement.PUBLIC);
    attr2.setType("String");
    attr2.setDisplayName(attr2.getDisplayName());
    /* ��������б����*/
    /* ��ӷ�����ʼ*/
    BMethod method1 = new BMethod();
    method1.setMethodName("sayHello");
    method1.setAccessAuthrity(BaseElement.PUBLIC);
    method1.setReturnType("String");
    BMethod method2 = new BMethod();
    method2.setMethodName("sayHello2");
    method2.setAccessAuthrity(BaseElement.PUBLIC);
    method2.setReturnType("String");
    method2.setAbstract(true);
    method2.setParamters("String name,Object who");
    BMethod method3 = new BMethod();
    method3.setMethodName("dd");
    method3.setAccessAuthrity(BaseElement.PRIVATE);
    method3.setReturnType("String");
    /* ��ӷ�������*/
    testClass.addChild(attr1);
    testClass.addChild(attr2);
    testClass.addChild(method1);
    testClass.addChild(method2);
    testClass.addChild(method3);
    canvas.addChild(testClass);
    return canvas;
}
