public void onUpdate(Event event) {
    try {
        int nonDisplay = 0;
        @SuppressWarnings("unchecked") DiagnosticCollector<JavaFileObject> errorDetails = (DiagnosticCollector<JavaFileObject>) event.getData();
        @SuppressWarnings("unchecked") List<File> compiledFiles = (List<File>) Executions.getCurrent().getDesktop().getAttribute("compiledFiles");
        Tabbox editBox = (Tabbox) self.getFellow("editBox");
        Tabs topTabs = editBox.getTabs();
        topTabs.getChildren().clear();
        Tabpanels panels = editBox.getTabpanels();
        panels.getChildren().clear();
        Map<File, List<Diagnostic<? extends JavaFileObject>>> fileToError = new HashMap<File, List<Diagnostic<? extends JavaFileObject>>>();
        for (File compiledFile : compiledFiles) {
            fileToError.put(compiledFile, new ArrayList<Diagnostic<? extends JavaFileObject>>());
        }
        for (Diagnostic<? extends JavaFileObject> diagnostic : errorDetails.getDiagnostics()) {
            for (File key : fileToError.keySet()) {
                if (diagnostic.getKind() != Diagnostic.Kind.ERROR) {
                    nonDisplay++;
                    break;
                }
                if (diagnostic.getSource() != null && key.getName().equals(diagnostic.getSource().getName())) {
                    fileToError.get(key).add(diagnostic);
                    break;
                }
            }
        }
        for (File compiledFile : fileToError.keySet()) {
            if (fileToError.get(compiledFile).size() == 0) {
                continue;
            }
            Tab fileTab = new Tab(compiledFile.getName());
            topTabs.appendChild(fileTab);
            Tabpanel panel = new Tabpanel();
            panel.setStyle("overflow: auto");
            panels.appendChild(panel);
            Grid fileContents = new Grid();
            fileContents.setVflex(true);
            fileContents.setHeight("100%");
            fileContents.setParent(panel);
            Rows content = new Rows();
            content.setId(FILE_CONTENT + compiledFile.getName());
            content.setParent(fileContents);
            Columns columns = new Columns();
            Column numberColumn = new Column("#");
            numberColumn.setWidth("40px");
            Column fileColumn = new Column("File");
            numberColumn.setParent(columns);
            fileColumn.setParent(columns);
            columns.setParent(fileContents);
            Reader fileReader = new FileReader(compiledFile);
            BufferedReader sourceReader = new BufferedReader(fileReader);
            String line = sourceReader.readLine();
            int lineNumber = 1;
            while (line != null) {
                Row numberAndLine = new Row();
                numberAndLine.setParent(content);
                Label lineNumberLabel = new Label("" + lineNumber);
                lineNumber++;
                lineNumberLabel.setParent(numberAndLine);
                Label fileText = new Label();
                fileText.setMultiline(true);
                fileText.setPre(true);
                fileText.setValue(line);
                fileText.setParent(numberAndLine);
                line = sourceReader.readLine();
            }
            Label errorTitle = new Label("Errors:");
            errorTitle.setStyle("font-size: larger");
            errorTitle.setParent(panel);
            Listbox errorBox = new Listbox();
            errorBox.setRows(5);
            for (Diagnostic<? extends JavaFileObject> diagnostic : fileToError.get(compiledFile)) {
                Listitem item = new Listitem();
                item.setValue(diagnostic);
                String[] splitMessage = diagnostic.getMessage(null).split(":");
                item.setLabel(compiledFile.getName() + ":" + splitMessage[1] + ":" + splitMessage[2]);
                item.setParent(errorBox);
            }
            errorBox.setParent(panel);
        }
        Tab compTab = (Tab) self.getPage().getFellow("compTab");
        if (errorDetails.getDiagnostics().size() - nonDisplay != 0) {
            compTab.setSelected(true);
            compTab.setVisible(true);
            compTab.setDisabled(false);
            compTab.setImage("icons/tab-compile-bad.png");
        } else {
            compTab.setVisible(true);
            compTab.setDisabled(true);
            compTab.setImage("icons/tab-compile-good.png");
        }
    } catch (IOException e) {
        e.printStackTrace();
    } finally {
        event.stopPropagation();
    }
}
