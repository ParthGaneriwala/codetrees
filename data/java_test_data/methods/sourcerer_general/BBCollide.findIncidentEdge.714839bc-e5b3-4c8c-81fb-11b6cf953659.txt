public static void findIncidentEdge(BBClipVertex[] c, final BBPolygonShape poly1, final BBTransform xf1, int edge1, final BBPolygonShape poly2, final BBTransform xf2) {
    int count1 = poly1.m_vertexCount;
    final BBVec2[] normals1 = poly1.m_normals;
    int count2 = poly2.m_vertexCount;
    final BBVec2[] vertices2 = poly2.m_vertices;
    final BBVec2[] normals2 = poly2.m_normals;
    assert (0 <= edge1 & edge1 < count1);
    // Get the normal of the reference edge in poly2's frame.
    BBVec2 normal1 = mulT(xf2.R, mul(xf1.R, normals1[edge1]));
    // Find the incident edge on poly2.
    int index = 0;
    float minDot = FLT_MAX;
    for (int i = 0; i < count2; ++i) {
        float dot = dot(normal1, normals2[i]);
        if (dot < minDot) {
            minDot = dot;
            index = i;
        }
    }
    // Build the clip vertices for the incident edge.
    int i1 = index;
    int i2 = i1 + 1 < count2 ? i1 + 1 : 0;
    c[0].v = mul(xf2, vertices2[i1]);
    c[0].id.features.referenceEdge = (byte) edge1;
    c[0].id.features.incidentEdge = (byte) i1;
    c[0].id.features.incidentVertex = 0;
    c[1].v = mul(xf2, vertices2[i2]);
    c[1].id.features.referenceEdge = (byte) edge1;
    c[1].id.features.incidentEdge = (byte) i2;
    c[1].id.features.incidentVertex = 1;
}
