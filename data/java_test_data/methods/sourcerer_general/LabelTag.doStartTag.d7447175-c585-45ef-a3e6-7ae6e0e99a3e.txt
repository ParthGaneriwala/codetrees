public int doStartTag() throws JspException {
    // Look up this key to see if its a field of the current form
    boolean requiredField = false;
    boolean validationError = false;
    TagUtils tagUtils = TagUtils.getInstance();
    ValidatorResources resources = (ValidatorResources) pageContext.getServletContext().getAttribute(ValidatorPlugIn.VALIDATOR_KEY);
    Locale locale = (Locale) pageContext.findAttribute(Globals.LOCALE_KEY);
    if (locale == null) {
        locale = Locale.getDefault();
    }
    FormTag formTag = (FormTag) pageContext.getAttribute(Constants.FORM_KEY, PageContext.REQUEST_SCOPE);
    String formName = null;
    if (formTag != null) {
        formName = formTag.getBeanName();
    }
    String fieldName = key.substring(key.indexOf('.') + 1);
    if (resources != null) {
        Form form = resources.getForm(locale, formName);
        if (form != null) {
            Field field = form.getField(fieldName);
            if (field != null) {
                if (field.isDependency("required") || field.isDependency("validwhen")) {
                    requiredField = true;
                }
            }
        }
    }
    ActionMessages errors = tagUtils.getActionMessages(pageContext, Globals.ERROR_KEY);
    StringBuffer valMessage = new StringBuffer();
    if (errors != null) {
        // check for errors from the validator
        Iterator valIterator = errors.get(fieldName);
        while (valIterator.hasNext()) {
            validationError = true;
            ActionMessage error = (ActionMessage) valIterator.next();
            // Retrieve the message string we are looking for
            valMessage.append(tagUtils.message(pageContext, Globals.MESSAGES_KEY, locale.getDisplayName(), error.getKey(), error.getValues()));
        }
    }
    // Retrieve the message string we are looking for
    String message = tagUtils.message(pageContext, Globals.MESSAGES_KEY, locale.getDisplayName(), key);
    StringBuffer valError = new StringBuffer();
    if (message == null) {
        // try using JSTL's fallback locale
        message = LocaleSupport.getLocalizedMessage(pageContext, key);
    } else if (validationError) {
        valError.append(valMessage);
    }
    String cssClass = null;
    if (styleClass != null) {
        cssClass = styleClass;
    } else if (requiredField) {
        cssClass = "required";
    }
    String cssErrorClass = (errorClass != null) ? errorClass : "error";
    StringBuffer label = new StringBuffer();
    if ((message == null) || "".equals(message.trim())) {
        label.append("");
    } else {
        label.append("<label for=\"").append(fieldName).append("\"");
        if (validationError) {
            label.append(" class=\"").append(cssErrorClass).append("\"");
        } else if (cssClass != null) {
            label.append(" class=\"").append(cssClass).append("\"");
        }
        label.append(">").append(message);
        label.append((requiredField) ? " <span class=\"req\">*</span>" : "");
        label.append((colon) ? ":" : "");
        label.append("</label>");
        if (valError.length() > 0) {
            label.append("<img class=\"validationWarning\" alt=\"");
            label.append(tagUtils.message(pageContext, Globals.MESSAGES_KEY, locale.getDisplayName(), "icon.warning"));
            label.append("\" ");
            String context = ((HttpServletRequest) pageContext.getRequest()).getContextPath();
            label.append("src=\"").append(context);
            label.append(tagUtils.message(pageContext, Globals.MESSAGES_KEY, locale.getDisplayName(), "icon.warning.img"));
            label.append("\" />");
        }
    }
    // Print the retrieved message to our output writer
    tagUtils.write(pageContext, label.toString());
    // Continue processing this page
    return (SKIP_BODY);
}
