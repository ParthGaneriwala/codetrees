// documentation inherited
@Override
public Executor createExecutor(final GlContext ctx, Scope scope) {
    MaterialConfig config = ctx.getConfigManager().getConfig(MaterialConfig.class, material);
    final Map<Dependency, Dependency> dependencies = Maps.newHashMap();
    final RenderQueue.Group group = new RenderQueue.Group(ctx);
    final Surface surface = new Surface(ctx, scope, GeometryConfig.getQuad(divisionsX, divisionsY), config, group);
    return new Executor() {

        public void execute() {
            // save the projection matrix and load the identity matrix
            Renderer renderer = ctx.getRenderer();
            renderer.setMatrixMode(GL11.GL_PROJECTION);
            GL11.glPushMatrix();
            GL11.glLoadIdentity();
            // save and replace the dependency map
            Compositor compositor = ctx.getCompositor();
            Map<Dependency, Dependency> odeps = compositor.getDependencies();
            compositor.setDependencies(dependencies);
            // composite, enqueue, sort, render, clear
            surface.composite();
            compositor.enqueueEnqueueables();
            group.sortQueues();
            group.renderQueues();
            group.clearQueues();
            // clear and restore the dependencies
            compositor.clearDependencies();
            compositor.setDependencies(odeps);
            // restore the projection matrix
            renderer.setMatrixMode(GL11.GL_PROJECTION);
            GL11.glPopMatrix();
        }
    };
}
