public String execute() throws Exception {
    if (txtBusca == null || txtBusca.equals("")) {
        resultados = new ArrayList<ItemBusca>();
    } else {
        resultados = busca.listarAchados(txtBusca);
        // logar a busca para gerar relatorios
        LogBusca logBusca = new LogBusca();
        logBusca.setDataHora(new Date());
        logBusca.setTxtBusca(txtBusca);
        logBuscaDao.create(logBusca);
    }
    // Contar
    List<LogBusca> listLogBusca = logBuscaDao.listarUltimas(300);
    HashMap<String, LogBusca> map = new HashMap<String, LogBusca>();
    for (LogBusca logBusca : listLogBusca) {
        if (map.containsKey(logBusca.getTxtBusca())) {
            LogBusca t = map.get(logBusca.getTxtBusca());
            t.maisMais();
        } else {
            logBusca.maisMais();
            map.put(logBusca.getTxtBusca(), logBusca);
        }
    }
    // gerar lista com unicos
    listLogBusca = new ArrayList<LogBusca>();
    Set<String> chaves = map.keySet();
    for (String key : chaves) {
        listLogBusca.add(map.get(key));
    }
    // ordenar quantidade
    Collections.sort(listLogBusca, new Comparator<LogBusca>() {

        public int compare(LogBusca o1, LogBusca o2) {
            return o2.getContador() - o1.getContador();
        }
    });
    // pegar os X primeiros
    float total = 0;
    List<LogBusca> listLogBuscaXprimeiros = new ArrayList<LogBusca>();
    int xPrimeiros = Math.min(15, listLogBusca.size());
    for (int i = 0; i < xPrimeiros; i++) {
        LogBusca lb = listLogBusca.get(i);
        listLogBuscaXprimeiros.add(lb);
        total += lb.getContador();
    }
    // ordenar nome;
    Collections.sort(listLogBuscaXprimeiros, new Comparator<LogBusca>() {

        public int compare(LogBusca o1, LogBusca o2) {
            return o1.getTxtBusca().compareTo(o2.getTxtBusca());
        }
    });
    // calcular o percentual de cada, e pegar o maior
    float maior = 0f;
    for (LogBusca lb : listLogBuscaXprimeiros) {
        float perc = (float) (lb.getContador() / total) * 100;
        lb.setPercentual(perc);
        if (perc > maior)
            maior = perc;
    }
    // calcular o tamanho da fonte
    for (LogBusca lb : listLogBuscaXprimeiros) {
        lb.setFontSize((int) (300 * lb.getPercentual() / maior) + 80);
    }
    // gerar o html do relatorio
    String relatorio = "";
    for (int i = 0; i < listLogBuscaXprimeiros.size(); i++) {
        LogBusca lb = listLogBuscaXprimeiros.get(i);
        if (i > 0) {
            // Acessibilidade: separar todo link por um caractere imprimivel.
            relatorio += ", ";
        }
        relatorio += "<span style=\"font-size: " + lb.getFontSize() + "%\" title=\"" + lb.getPercentual() + "%\" >" + "<a href=\"buscar.action?txtBusca=" + lb.getTxtBuscaUrlEncoded() + "\">" + lb.getTxtBusca().replace("<", "&lt;") + "</a>" + "</span>";
    }
    RelatorioBusca rb = logBuscaDao.getRelatorioBusca();
    rb.setConteudo(relatorio);
    logBuscaDao.update(rb);
    this.listLogBusca = listLogBuscaXprimeiros;
    return SUCCESS;
}
