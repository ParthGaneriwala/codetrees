public int getUserPresence(String presentity) {
    try {
        // create request envelope to be sent to webservice interface
        es.tid.www.wsdl.parlayx.presence.consumer.v1_1.PresenceConsumerServiceStub.GetUserPresence userPresence = new es.tid.www.wsdl.parlayx.presence.consumer.v1_1.PresenceConsumerServiceStub.GetUserPresence();
        // read watcher identity from config properties set for the application.
        // watcher is needed to be subscribed to presentity state.
        userPresence.setWatcher(new URI(PresenceConsumerConfigInfo.getInstance().getConfigProperty("presence.watcher.identity")));
        // set presentity to query into request envelope
        userPresence.setPresentity(new URI(presentity));
        // set attribute type to PIDF as response format to evaluate
        es.tid.www.wsdl.parlayx.presence.consumer.v1_1.PresenceConsumerServiceStub.PresenceAttributeType[] attri = new es.tid.www.wsdl.parlayx.presence.consumer.v1_1.PresenceConsumerServiceStub.PresenceAttributeType[1];
        attri[0] = es.tid.www.wsdl.parlayx.presence.consumer.v1_1.PresenceConsumerServiceStub.PresenceAttributeType.PIDF;
        userPresence.setAttributes(attri);
        // create request and call webservice
        es.tid.www.wsdl.parlayx.presence.consumer.v1_1.PresenceConsumerServiceStub.GetUserPresence0 request = new es.tid.www.wsdl.parlayx.presence.consumer.v1_1.PresenceConsumerServiceStub.GetUserPresence0();
        request.setGetUserPresence(userPresence);
        // query about a synchronous end point, because this method must return value when webservice returns a value.
        // (opposite to other methods which are called and the ims net response is asked by executing another webservice interface method)
        String endpointSync = PresenceConsumerConfigInfo.getInstance().getConfigProperty("parlayx.presence.consumer.ws.endpoint.sync");
        es.tid.www.wsdl.parlayx.presence.consumer.v1_1.PresenceConsumerServiceStub stub = new es.tid.www.wsdl.parlayx.presence.consumer.v1_1.PresenceConsumerServiceStub(endpointSync);
        // for security reasons, we'll include user and password as basic authentication into soap headers.
        // we'll read those values from config properties for this application
        ServiceClient sClient = stub._getServiceClient();
        Options opt = sClient.getOptions();
        HttpTransportProperties.Authenticator authenticator = new HttpTransportProperties.Authenticator();
        authenticator.setRealm(HttpTransportProperties.Authenticator.BASIC);
        authenticator.setUsername(PresenceConsumerConfigInfo.getInstance().getConfigProperty("security.user"));
        authenticator.setPassword(PresenceConsumerConfigInfo.getInstance().getConfigProperty("security.password"));
        authenticator.setPreemptiveAuthentication(true);
        opt.setProperty(org.apache.axis2.transport.http.HTTPConstants.AUTHENTICATE, authenticator);
        sClient.setOptions(opt);
        stub._setServiceClient(sClient);
        // call webservice through WSDL2Java generated stub and unwrap received response
        es.tid.www.wsdl.parlayx.presence.consumer.v1_1.PresenceConsumerServiceStub.GetUserPresenceResponse5 response = stub.getUserPresence(request);
        es.tid.www.wsdl.parlayx.presence.consumer.v1_1.PresenceConsumerServiceStub.GetUserPresenceResponse resp = response.getGetUserPresenceResponse();
        // obtain the final returned structure. This is an array of PresenceAttribute which we must
        // investigate to determinate real line state as PIDF says
        es.tid.www.wsdl.parlayx.presence.consumer.v1_1.PresenceConsumerServiceStub.PresenceAttribute[] result = resp.getResult();
        // from result, we'll take attribute for PIDF (if exists)
        String pidf = null;
        for (int u = 0; u < result.length; u++) {
            if ((result[u] != null) && (result[u].getTypeAndValue().getUnionElement().getValue().equals(es.tid.www.wsdl.parlayx.presence.consumer.v1_1.PresenceConsumerServiceStub.PresenceAttributeType._PIDF))) {
                pidf = result[u].getTypeAndValue().getPIDF();
            }
        }
        // if a PIDF is received, search line state into it
        if (pidf != null) {
            try {
                // first, we must validate PIDF
                String JAXP_SCHEMA_LANGUAGE = "http://java.sun.com/xml/jaxp/properties/schemaLanguage";
                String W3C_XML_SCHEMA = "http://www.w3.org/2001/XMLSchema";
                String JAXP_SCHEMA_SOURCE = "http://java.sun.com/xml/jaxp/properties/schemaSource";
                // schema location for validating is set in config properties. Read it
                String SCHEMA_SOURCE = PresenceConsumerConfigInfo.getInstance().getConfigProperty("urlPIDFSchema");
                // needed object to parse document
                javax.xml.parsers.DocumentBuilderFactory factory;
                javax.xml.parsers.DocumentBuilder builder;
                // configurate factory
                factory = javax.xml.parsers.DocumentBuilderFactory.newInstance();
                factory.setValidating(true);
                factory.setAttribute(JAXP_SCHEMA_LANGUAGE, W3C_XML_SCHEMA);
                factory.setAttribute(JAXP_SCHEMA_SOURCE, SCHEMA_SOURCE);
                factory.setNamespaceAware(true);
                factory.setIgnoringElementContentWhitespace(true);
                factory.setIgnoringComments(true);
                // create builder
                builder = factory.newDocumentBuilder();
                // create error handler and assign it to builder
                org.xml.sax.ErrorHandler errorHandler = new org.xml.sax.ErrorHandler() {

                    public void warning(org.xml.sax.SAXParseException e) {
                        e.printStackTrace();
                    }

                    public void error(org.xml.sax.SAXParseException e) throws SAXParseException {
                        throw e;
                    }

                    public void fatalError(org.xml.sax.SAXParseException e) throws SAXParseException {
                        throw e;
                    }
                };
                builder.setErrorHandler(errorHandler);
                // parse document
                Document presenceInfoDom = builder.parse(new org.xml.sax.InputSource(new StringReader(pidf)));
                // once we have readed the document, get line state from its informations
                Node raiz = presenceInfoDom.getDocumentElement();
                NodeList nivel1 = raiz.getChildNodes();
                boolean type1 = false;
                boolean type2 = false;
                String statusBasic = "";
                String[] imsSession = null;
                String note = "";
                for (int i = 0; i < nivel1.getLength(); ++i) {
                    // depending on found or not, this will be taken as tuple_type1 or tuple_type2
                    if (nivel1.item(i).getNodeName().contains("tuple")) {
                        NodeList nivel2 = nivel1.item(i).getChildNodes();
                        for (int o = 0; o < nivel2.getLength(); o++) {
                            if (nivel2.item(o).getNodeName().indexOf("contact") > -1) {
                                if (nivel2.item(o).getFirstChild().getNodeValue().equals(presentity.toString())) {
                                    type1 = true;
                                } else {
                                    type2 = true;
                                }
                            }
                        }
                        // depending on the type of tuple, we'll search one information or other
                        if (type1) {
                            // if tuple is type1, it's necessary to get status.basic and status.ims-session
                            for (int o = 0; o < nivel2.getLength(); o++) {
                                if (nivel2.item(o).getNodeName().indexOf("status") > -1) {
                                    NodeList nivel3 = nivel2.item(o).getChildNodes();
                                    for (int y = 0; y < nivel3.getLength(); y++) {
                                        // take basic and ims-session
                                        if (nivel3.item(y).getNodeName().indexOf("basic") > -1) {
                                            statusBasic = nivel3.item(y).getFirstChild().getNodeValue();
                                        } else if (nivel3.item(y).getNodeName().contains("ims-session")) {
                                            NodeList childsIms = nivel3.item(y).getChildNodes();
                                            imsSession = new String[childsIms.getLength()];
                                            for (int m = 0; m < childsIms.getLength(); m++) {
                                                String name = childsIms.item(m).getNodeName();
                                                int ind = name.indexOf(":");
                                                imsSession[m] = name.substring(ind + 1);
                                            }
                                        }
                                    }
                                }
                            }
                        } else if (type2) {
                            // if tuple is type2, take "note" field
                            for (int o = 0; o < nivel2.getLength(); o++) {
                                if (nivel2.item(o).getNodeName().indexOf("note") > -1) {
                                    note = nivel2.item(o).getFirstChild().getNodeValue();
                                }
                            }
                        }
                    }
                }
                // once PIDF is parsed extract conclusions about line state
                if (type1) {
                    // Other result will be busy line
                    if (statusBasic.equals("open")) {
                        if (imsSession != null) {
                            for (int r = 0; r < imsSession.length; r++) {
                                if (imsSession[r].equals("audio")) {
                                    return -1;
                                }
                            }
                        }
                        return 1;
                    } else {
                        return -1;
                    }
                } else if (type2) {
                    // Other result will be busy line
                    if (note.equals("Available")) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else {
                    // be taken as busy line
                    return -1;
                }
            } catch (Exception e) {
                throw new Exception("Exception in getUserPresence: " + e.toString());
            }
        } else {
            // in Presence Server, for example
            return 0;
        }
    } catch (Exception e) {
        // any error occurred during execution will be taken as undefined linestate.
        return 0;
    }
}
