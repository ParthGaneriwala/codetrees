public void determineRole(Class<?> cl) {
    isAbstract = false;
    if (cl != null) {
        isAbstract = Modifier.isAbstract(cl.getModifiers());
        ClassLoader clLoader = cl.getClassLoader();
        Class<?> junitClass = null;
        Class<?> appletClass = null;
        Class<?> midletClass = null;
        if (clLoader != null) {
            try {
                junitClass = clLoader.loadClass("junit.framework.TestCase");
            } catch (ClassNotFoundException cnfe) {
            } catch (LinkageError le) {
            }
            try {
                appletClass = clLoader.loadClass("java.applet.Applet");
            } catch (ClassNotFoundException cnfe) {
            } catch (LinkageError le) {
            }
            try {
                midletClass = clLoader.loadClass("javax.microedition.midlet.MIDlet");
            } catch (ClassNotFoundException cnfe) {
            } catch (LinkageError le) {
            }
        }
        if (junitClass == null) {
            junitClass = junit.framework.TestCase.class;
        }
        if (appletClass == null) {
            appletClass = java.applet.Applet.class;
        }
        // with it.
        if (appletClass.isAssignableFrom(cl)) {
            setRole(new AppletClassRole());
        } else if (junitClass.isAssignableFrom(cl)) {
            setRole(new UnitTestClassRole());
        } else if (Modifier.isInterface(cl.getModifiers())) {
            setRole(new InterfaceClassRole());
        } else if (JavaUtils.getJavaUtils().isEnum(cl)) {
            setRole(new EnumClassRole());
        } else if (isAbstract) {
            setRole(new AbstractClassRole());
        } else if ((midletClass != null) && (midletClass.isAssignableFrom(cl))) {
            setRole(new MIDletClassRole());
        } else {
            setRole(new StdClassRole());
        }
    } else {
        // try the parsed source code
        ClassInfo classInfo = sourceInfo.getInfoIfAvailable();
        if (classInfo != null) {
            if (classInfo.isApplet()) {
                setRole(new AppletClassRole());
            } else if (classInfo.isMIDlet()) {
                setRole(new MIDletClassRole());
            } else if (classInfo.isUnitTest()) {
                setRole(new UnitTestClassRole());
            } else if (classInfo.isInterface()) {
                setRole(new InterfaceClassRole());
            } else if (classInfo.isEnum()) {
                setRole(new EnumClassRole());
            } else if (classInfo.isAbstract()) {
                setRole(new AbstractClassRole());
            } else {
                // or UnitTest, source analysis won't give the correct role
                if (!(role instanceof AppletClassRole) && !(role instanceof UnitTestClassRole)) {
                    setRole(new StdClassRole());
                }
            }
        }
    // If no information gained from parsing the file (classInfo = null),
    // then we don't really know the role: let's leave it as it was
    }
}
