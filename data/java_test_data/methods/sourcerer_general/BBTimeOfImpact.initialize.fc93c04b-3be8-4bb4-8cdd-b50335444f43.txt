// }
public void initialize(final BBSimplexCache cache, final BBDistanceProxy proxyA, final BBTransform transformA, final BBDistanceProxy proxyB, final BBTransform transformB) {
    m_proxyA = proxyA;
    m_proxyB = proxyB;
    int count = cache.count;
    assert (0 < count & count < 3);
    if (count == 1) {
        m_type = e_points;
        BBVec2 localPointA = m_proxyA.GetVertex(cache.indexA[0]);
        BBVec2 localPointB = m_proxyB.GetVertex(cache.indexB[0]);
        BBVec2 pointA = mul(transformA, localPointA);
        BBVec2 pointB = mul(transformB, localPointB);
        m_axis = sub(pointB, pointA);
        m_axis.normalize();
    } else if (cache.indexB[0] == cache.indexB[1]) {
        // Two points on A and one on B
        m_type = e_faceA;
        BBVec2 localPointA1 = m_proxyA.GetVertex(cache.indexA[0]);
        BBVec2 localPointA2 = m_proxyA.GetVertex(cache.indexA[1]);
        BBVec2 localPointB = m_proxyB.GetVertex(cache.indexB[0]);
        m_localPoint = mul(0.5f, add(localPointA1, localPointA2));
        m_axis = cross(sub(localPointA2, localPointA1), 1.0f);
        m_axis.normalize();
        BBVec2 normal = mul(transformA.R, m_axis);
        BBVec2 pointA = mul(transformA, m_localPoint);
        BBVec2 pointB = mul(transformB, localPointB);
        float s = dot(sub(pointB, pointA), normal);
        if (s < 0.0f) {
            m_axis = m_axis.neg();
        }
    } else if (cache.indexA[0] == cache.indexA[1]) {
        // Two points on B and one on A.
        m_type = e_faceB;
        BBVec2 localPointA = proxyA.GetVertex(cache.indexA[0]);
        BBVec2 localPointB1 = proxyB.GetVertex(cache.indexB[0]);
        BBVec2 localPointB2 = proxyB.GetVertex(cache.indexB[1]);
        m_localPoint = mul(0.5f, add(localPointB1, localPointB2));
        m_axis = cross(sub(localPointB2, localPointB1), 1.0f);
        m_axis.normalize();
        BBVec2 normal = mul(transformB.R, m_axis);
        BBVec2 pointB = mul(transformB, m_localPoint);
        BBVec2 pointA = mul(transformA, localPointA);
        float s = dot(sub(pointA, pointB), normal);
        if (s < 0.0f) {
            m_axis = m_axis.neg();
        }
    } else {
        // Two points on B and two points on A.
        // The faces are parallel.
        BBVec2 localPointA1 = m_proxyA.GetVertex(cache.indexA[0]);
        BBVec2 localPointA2 = m_proxyA.GetVertex(cache.indexA[1]);
        BBVec2 localPointB1 = m_proxyB.GetVertex(cache.indexB[0]);
        BBVec2 localPointB2 = m_proxyB.GetVertex(cache.indexB[1]);
        BBVec2 pA = mul(transformA, localPointA1);
        BBVec2 dA = mul(transformA.R, sub(localPointA2, localPointA1));
        BBVec2 pB = mul(transformB, localPointB1);
        BBVec2 dB = mul(transformB.R, sub(localPointB2, localPointB1));
        float a = dot(dA, dA);
        float e = dot(dB, dB);
        BBVec2 r = sub(pA, pB);
        float c = dot(dA, r);
        float f = dot(dB, r);
        float b = dot(dA, dB);
        float denom = a * e - b * b;
        float s = 0.0f;
        if (denom != 0.0f) {
            s = clamp((b * f - c * e) / denom, 0.0f, 1.0f);
        }
        float t = (b * s + f) / e;
        if (t < 0.0f) {
            t = 0.0f;
            s = clamp(-c / a, 0.0f, 1.0f);
        } else if (t > 1.0f) {
            t = 1.0f;
            s = clamp((b - c) / a, 0.0f, 1.0f);
        }
        BBVec2 localPointA = add(localPointA1, mul(s, sub(localPointA2, localPointA1)));
        BBVec2 localPointB = add(localPointB1, mul(t, sub(localPointB2, localPointB1)));
        if (s == 0.0f || s == 1.0f) {
            m_type = e_faceB;
            m_axis = cross(sub(localPointB2, localPointB1), 1.0f);
            m_axis.normalize();
            m_localPoint = localPointB;
            BBVec2 normal = mul(transformB.R, m_axis);
            BBVec2 pointA = mul(transformA, localPointA);
            BBVec2 pointB = mul(transformB, localPointB);
            float sgn = dot(sub(pointA, pointB), normal);
            if (sgn < 0.0f) {
                m_axis = m_axis.neg();
            }
        } else {
            m_type = e_faceA;
            m_axis = cross(sub(localPointA2, localPointA1), 1.0f);
            m_axis.normalize();
            m_localPoint = localPointA;
            BBVec2 normal = mul(transformA.R, m_axis);
            BBVec2 pointA = mul(transformA, localPointA);
            BBVec2 pointB = mul(transformB, localPointB);
            float sgn = dot(sub(pointB, pointA), normal);
            if (sgn < 0.0f) {
                m_axis = m_axis.neg();
            }
        }
    }
}
