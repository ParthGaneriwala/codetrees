@Override
public void run() {
    LOG.info(getName() + ": starting");
    SERVER.set(Server.this);
    // last check for old calls.
    long lastPurgeTime = 0;
    while (running) {
        try {
            // If a channel is being registered, wait.
            waitPending();
            writeSelector.select(PURGE_INTERVAL);
            Iterator<SelectionKey> iter = writeSelector.selectedKeys().iterator();
            while (iter.hasNext()) {
                SelectionKey key = iter.next();
                iter.remove();
                try {
                    if (key.isValid() && key.isWritable()) {
                        doAsyncWrite(key);
                    }
                } catch (IOException e) {
                    LOG.info(getName() + ": doAsyncWrite threw exception " + e);
                }
            }
            long now = System.currentTimeMillis();
            if (now < lastPurgeTime + PURGE_INTERVAL) {
                continue;
            }
            lastPurgeTime = now;
            // 
            // If there were some calls that have not been sent out for a
            // long time, discard them.
            // 
            LOG.debug("Checking for old call responses.");
            synchronized (writeSelector.keys()) {
                iter = writeSelector.keys().iterator();
                while (iter.hasNext()) {
                    SelectionKey key = iter.next();
                    try {
                        doPurge(key, now);
                    } catch (IOException e) {
                        LOG.warn("Error in purging old calls " + e);
                    }
                }
            }
        } catch (OutOfMemoryError e) {
            // 
            // we can run out of memory if we have too many threads
            // log the event and sleep for a minute and give
            // some thread(s) a chance to finish
            // 
            LOG.warn("Out of Memory in server select", e);
            try {
                Thread.sleep(60000);
            } catch (Exception ie) {
            }
        } catch (Exception e) {
            LOG.warn("Exception in Responder " + StringUtils.stringifyException(e));
        }
    }
    LOG.info("Stopping " + this.getName());
}
