public void widgetSelected(SelectionEvent e) {
    Calendar toDay = Calendar.getInstance();
    final int year = toDay.get(Calendar.YEAR);
    String newName = person.getName();
    int newBYear = person.getYearOfBirth();
    int newDYear = person.getYearOfDeath();
    int newCountry = person.getCountryOfBirth();
    String newCity = person.getCityOfBirth();
    boolean valid = true;
    boolean update = false;
    if (newName.compareTo(nameText.getText()) != 0) {
        if (nameText.getText() != "") {
            newName = nameText.getText();
            update = true;
        } else {
            okMessageBox("You can't leave the name of the person empty.");
            valid = false;
        }
    }
    if (oldBYear.compareTo(bYearText.getText()) != 0) {
        if (bYearText.getText() != "") {
            try {
                newBYear = Integer.parseInt(bYearText.getText());
                update = true;
                if ((newBYear < 1800) || (newBYear > year)) {
                    okMessageBox("Birth year must be between 1800 and " + year + ".");
                    valid = false;
                }
            } catch (NumberFormatException nfe) {
                okMessageBox("The birth year must be a number.");
                valid = false;
            }
        } else
            okMessageBox("You can't leave the birth year empty.");
    }
    if (oldDYear.compareTo(dYearText.getText()) != 0) {
        if (dYearText.getText() != "") {
            try {
                newBYear = Integer.parseInt(bYearText.getText());
                update = true;
                if ((newDYear < newBYear) || (newDYear > year)) {
                    okMessageBox("Death year must be between the birth year and " + year + ".");
                    valid = false;
                }
            } catch (NumberFormatException nfe) {
                okMessageBox("The death year must be a number.");
                valid = false;
            }
        }
    }
    if (countryCombo.getText() != "") {
        if (newCountry != Integer.parseInt(getID(countriesList, countryCombo.getText()))) {
            newCountry = Integer.parseInt(getID(countriesList, countryCombo.getText()));
            update = true;
        }
    } else {
        okMessageBox("You have to insert an origin country.");
        valid = false;
    }
    if (newCity != null) {
        if (newCity.compareTo(cityText.getText()) != 0) {
            newCity = cityText.getText();
            update = true;
        }
    } else {
        if (cityText.getText() != "") {
            newCity = cityText.getText();
            update = true;
        }
    }
    if (update && valid) {
        // saving
        person.setCityOfBirth(newCity);
        person.setCountryOfBirth(newCountry);
        person.setName(newName);
        person.setYearOfBirth(newBYear);
        person.setYearOfDeath(newDYear);
        try {
            pool.execute(DataManager.updatePersonData(PersonDataEnum.PERSON, person));
        } catch (InterruptedException e1) {
            e1.printStackTrace();
        }
    } else {
        // couldn't save
        if (!update)
            okMessageBox("You didn't change anything.");
    }
}
