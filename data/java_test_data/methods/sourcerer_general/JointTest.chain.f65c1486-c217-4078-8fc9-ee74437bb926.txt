private void chain(Body body1, Body body2, Vector2f anchor1, Vector2f anchor2, int chains, World world, float initRot) {
    final int N = chains;
    final Vector2f p1 = new Vector2f(body1.getPosition());
    p1.add(MathUtil.mul(new Matrix2f(body1.getRotation()), anchor1));
    Vector2f p2 = null;
    if (body2 != null) {
        p2 = new Vector2f(body2.getPosition());
        p2.add(MathUtil.mul(new Matrix2f(body2.getRotation()), anchor2));
    } else {
        p2 = new Vector2f(p1);
        p2.add(new Vector2f(chains * 20, 0));
    }
    final Vector2f direction = new Vector2f(p2);
    direction.sub(p1);
    direction.normalise();
    direction.scale(20);
    final Body[] bodies = new Body[N];
    final Vector2f pos = new Vector2f(p1);
    for (int i = 0; i < N; i++) {
        final Body body = new Body(new Box(15, 4), 5);
        body.setDamping(0.05f);
        body.setRotation(initRot);
        for (int j = 0; j < i; j++) {
            body.addExcludedBody(bodies[j]);
        }
        pos.add(direction);
        body.setPosition(pos.x, pos.y);
        bodies[i] = body;
        world.add(body);
    }
    for (int i = 1; i < N; i++) {
        final DistanceJoint dj = new DistanceJoint(bodies[i - 1], bodies[i], new Vector2f(7, 0), new Vector2f(-7, 0), 6);
        /*
			 * Vector2f v1,v2; v1 = new
			 * Vector2f(bodies[i-1].getPosition());v1.x+=7; v2 = new
			 * Vector2f(bodies[i].getPosition());v2.x-=7; SpringJoint dj = new
			 * SpringJoint(bodies[i - 1], bodies[i], v1, v2);
			 * dj.setMinSpringSize(4); dj.setSpringSize(1);
			 * dj.setStretchedSpringConst(100);
			 * dj.setCompressedSpringConst(100); dj.setMaxSpringSize(6);
			 */
        world.add(dj);
    }
    {
        final DistanceJoint dj = new DistanceJoint(body1, bodies[0], anchor1, new Vector2f(-7, 0), 10);
        world.add(dj);
    }
    if (body2 != null) {
        final DistanceJoint dj = new DistanceJoint(body2, bodies[N - 1], anchor2, new Vector2f(7, 0), 10);
        world.add(dj);
    }
}
