public Vector<QuantitativePeptideGroup> getPeptideGroups(boolean lOrdered) {
    if (iPeptideGroupsOrdened || !lOrdered) {
        return iPeptideGroups;
    } else {
        if (iSequence != null) {
            // get all the startpositions
            Vector<Integer> lStartPositions = new Vector<Integer>();
            for (int i = 0; i < iPeptideGroups.size(); i++) {
                int lStartPosition = iSequence.indexOf(iPeptideGroups.get(i).getSequence());
                if (lStartPosition == -1) {
                    // if the start position is not found, we will set it to the sequence length
                    lStartPosition = iSequence.length();
                    // add the peptide start and end position
                    iPeptideGroups.get(i).setStartPosition(-1);
                    iPeptideGroups.get(i).setEndPosition(-1);
                } else {
                    // we found a position, add the pre and post sequence to the peptide group
                    if (lStartPosition != 0) {
                        iPeptideGroups.get(i).setPreSequence(String.valueOf(iSequence.charAt(lStartPosition - 1)));
                    } else {
                        iPeptideGroups.get(i).setPreSequence("-");
                    }
                    if (lStartPosition + iPeptideGroups.get(i).getSequence().length() < iSequence.length()) {
                        iPeptideGroups.get(i).setPostSequence(String.valueOf(iSequence.charAt(lStartPosition + iPeptideGroups.get(i).getSequence().length())));
                    } else {
                        iPeptideGroups.get(i).setPostSequence("-");
                    }
                    // add the peptide start and end position
                    iPeptideGroups.get(i).setStartPosition(lStartPosition);
                    iPeptideGroups.get(i).setEndPosition(lStartPosition + iPeptideGroups.get(i).getSequence().length());
                }
                lStartPositions.add(lStartPosition);
            }
            Integer[] lStarts = new Integer[lStartPositions.size()];
            lStartPositions.toArray(lStarts);
            QuantitativePeptideGroup[] lOrderedPeptides = new QuantitativePeptideGroup[iPeptideGroups.size()];
            iPeptideGroups.toArray(lOrderedPeptides);
            // order the peptide groups
            int value;
            int position;
            for (int i = 0; i < lOrderedPeptides.length; i++) {
                value = lStarts[i];
                position = i;
                QuantitativePeptideGroup lGroupToOrder = lOrderedPeptides[i];
                while ((position > 0) && (lStarts[position - 1] > value)) {
                    lOrderedPeptides[position] = lOrderedPeptides[position - 1];
                    lStarts[position] = lStarts[position - 1];
                    position--;
                }
                lOrderedPeptides[position] = lGroupToOrder;
                lStarts[position] = value;
            }
            iPeptideGroups.removeAllElements();
            for (int i = 0; i < lOrderedPeptides.length; i++) {
                iPeptideGroups.add(lOrderedPeptides[i]);
            }
            iPeptideGroupsOrdened = true;
        }
        return iPeptideGroups;
    }
}
