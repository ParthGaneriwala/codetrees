// TODO: add a method for comparing a set of article ids.
public Element getRelatedness(String term1, String term2, boolean details, int linkLimit) throws Exception {
    Element response = wms.doc.createElement("RelatednessResponse");
    if (term1 == null || term2 == null) {
        response.setAttribute("unspecifiedParameters", "true");
        return response;
    }
    TextProcessor tp = new CaseFolder();
    Anchor anchor1 = new Anchor(term1, tp, wms.wikipedia.getDatabase());
    SortedVector<Anchor.Sense> senses1 = anchor1.getSenses();
    if (senses1.size() == 0) {
        response.setAttribute("unknownTerm", term1);
        return response;
    }
    Anchor anchor2 = new Anchor(term2, tp, wms.wikipedia.getDatabase());
    SortedVector<Anchor.Sense> senses2 = anchor2.getSenses();
    if (senses2.size() == 0) {
        response.setAttribute("unknownTerm", term2);
        return response;
    }
    response.setAttribute("term1", term1);
    response.setAttribute("term2", term2);
    double sr = anchor1.getRelatednessTo(anchor2);
    response.setAttribute("relatedness", wms.df.format(sr));
    if (!details)
        return response;
    // now we get the details of how this was calculated
    double minProb = 0.01;
    double benchmark_relatedness = 0;
    double benchmark_distance = 0.40;
    SortedVector<CandidatePair> candidates = new SortedVector<CandidatePair>();
    int sensesA = 0;
    int sensesB = 0;
    for (Anchor.Sense sense1 : anchor1.getSenses()) {
        if (sense1.getProbability() < minProb)
            break;
        sensesA++;
        sensesB = 0;
        for (Anchor.Sense sense2 : anchor2.getSenses()) {
            if (sense2.getProbability() < minProb)
                break;
            sensesB++;
            double relatedness = sense1.getRelatednessTo(sense2);
            double obviousness = (sense1.getProbability() + sense2.getProbability()) / 2;
            if (relatedness > (benchmark_relatedness - benchmark_distance)) {
                // candidate a likely sense
                if (relatedness > benchmark_relatedness + benchmark_distance) {
                    // this has set a new benchmark of what we consider likely
                    // System.out.println(" - - new benchmark") ;
                    benchmark_relatedness = relatedness;
                    candidates.clear();
                }
                candidates.add(new CandidatePair(sense1, sense2, relatedness, obviousness), false);
            }
        }
    }
    CandidatePair bestSenses = candidates.first();
    Article art1 = bestSenses.senseA;
    Element xmlSense1 = wms.doc.createElement("Sense1");
    xmlSense1.setAttribute("title", art1.getTitle());
    xmlSense1.setAttribute("id", String.valueOf(art1.getId()));
    xmlSense1.setAttribute("candidates", String.valueOf(senses1.size()));
    String firstSentence = null;
    try {
        firstSentence = art1.getFirstSentence(null, null);
        firstSentence = wms.definer.formatDefinition(firstSentence, Definer.FORMAT_HTML, Definer.LINK_TOOLKIT);
    } catch (Exception e) {
    }
    ;
    if (firstSentence != null)
        xmlSense1.appendChild(wms.createElement("FirstSentence", firstSentence));
    response.appendChild(xmlSense1);
    Article art2 = bestSenses.senseB;
    Element xmlSense2 = wms.doc.createElement("Sense2");
    xmlSense2.setAttribute("title", art2.getTitle());
    xmlSense2.setAttribute("id", String.valueOf(art2.getId()));
    xmlSense2.setAttribute("candidates", String.valueOf(senses2.size()));
    firstSentence = null;
    try {
        firstSentence = art2.getFirstSentence(null, null);
        firstSentence = wms.definer.formatDefinition(firstSentence, Definer.FORMAT_HTML, Definer.LINK_TOOLKIT);
    } catch (Exception e) {
    }
    ;
    if (firstSentence != null)
        xmlSense2.appendChild(wms.createElement("FirstSentence", firstSentence));
    response.appendChild(xmlSense2);
    // details of links coming in to these articles
    TreeSet<Integer> linksIn1 = new TreeSet<Integer>();
    for (Integer link : art1.getLinksInIds()) linksIn1.add(link);
    TreeSet<Integer> linksIn2 = new TreeSet<Integer>();
    for (Integer link : art2.getLinksInIds()) linksIn2.add(link);
    TreeSet<Integer> linksInShared = new TreeSet<Integer>();
    for (Integer id : linksIn1) {
        if (linksIn2.contains(id))
            linksInShared.add(id);
    }
    for (Integer id : linksInShared) {
        linksIn1.remove(id);
        linksIn2.remove(id);
    }
    Element xmlLinksIn = wms.doc.createElement("LinksIn");
    xmlLinksIn.appendChild(getLinkListElement(linksInShared, "SharedLink", linkLimit));
    xmlLinksIn.appendChild(getLinkListElement(linksIn1, "Link1", linkLimit));
    xmlLinksIn.appendChild(getLinkListElement(linksIn2, "Link2", linkLimit));
    response.appendChild(xmlLinksIn);
    // details of links going out from these articles
    TreeSet<Integer> linksOut1 = new TreeSet<Integer>();
    for (Integer link : art1.getLinksOutIds()) linksOut1.add(link);
    TreeSet<Integer> linksOut2 = new TreeSet<Integer>();
    for (Integer link : art2.getLinksOutIds()) linksOut2.add(link);
    TreeSet<Integer> linksOutShared = new TreeSet<Integer>();
    for (Integer id : linksOut1) {
        if (linksOut2.contains(id))
            linksOutShared.add(id);
    }
    for (Integer id : linksOutShared) {
        linksOut1.remove(id);
        linksOut2.remove(id);
    }
    Element xmlLinksOut = wms.doc.createElement("LinksOut");
    xmlLinksOut.appendChild(getLinkListElement(linksOutShared, "SharedLink", linkLimit));
    xmlLinksOut.appendChild(getLinkListElement(linksOut1, "Link1", linkLimit));
    xmlLinksOut.appendChild(getLinkListElement(linksOut2, "Link2", linkLimit));
    response.appendChild(xmlLinksOut);
    return response;
}
