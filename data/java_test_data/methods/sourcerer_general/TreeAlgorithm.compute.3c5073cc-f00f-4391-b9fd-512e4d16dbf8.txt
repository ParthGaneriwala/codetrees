public String compute(DomGraph graph, GraphUpdate update) {
    DomNode root = graph.getStartNode();
    DomNode tmpnode;
    if (root == null)
        return (String) "You need to select a root node.";
    levelSeparation_ = update.getVSpacing();
    subtreeSeparation_ = siblingSeparation_ = update.getHSpacing();
    graph_ = graph;
    rootPos_ = root.getPosition();
    // Construct the Node data fields.
    for (DomNode tempnode : graph_.getVertices()) tempnode.data = new TreeAlgorithmData();
    // Initialize the data fields.
    depth_ = 0;
    initializeData_(root, 0);
    // Build and initialize array for connecting neighboring non-sibling nodes.
    prevNodeAtLevel_ = new DomNode[depth_ + 1];
    int i;
    for (i = 0; i < depth_ + 1; i++) prevNodeAtLevel_[i] = null;
    setInitialPositions_(root);
    levelHeight_ = new double[depth_ + 1];
    for (i = 0; i < depth_ + 1; i++) levelHeight_[i] = 0.0;
    setLevelHeight_(root);
    levelPosition_ = new double[depth_ + 1];
    levelPosition_[0] = 0;
    for (i = 1; i < depth_ + 1; i++) levelPosition_[i] = levelPosition_[i - 1] + (levelHeight_[i - 1] + levelHeight_[i]) / 2.0;
    setFinalPositions_(root, 0.0);
    // Shift root to original position.
    double xoffs = rootPos_.x - root.getPosition().x;
    double yoffs = rootPos_.y - root.getPosition().y;
    for (tmpnode = graph.getStartNode(); tmpnode != null; tmpnode = graph.nextNode(tmpnode)) if (((TreeAlgorithmData) (tmpnode.data)).level != -1) {
        DPoint pos = tmpnode.getPosition();
        tmpnode.setPosition(pos.x + xoffs, pos.y + yoffs);
    }
    return null;
}
