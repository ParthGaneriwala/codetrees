// Need to decide between one line or many.
// Very hard to do a pretty thing here because the objects may be large or small or a mix.
protected void writeObjectList(Resource subject, Property property) {
    // if ( ! doObjectListsAsLists )
    // {
    // super.writeObjectList(resource, property) ;
    // return ;
    // }
    String propStr = formatProperty(property);
    // Find which objects are simple (i.e. not nested structures)
    StmtIterator sIter = subject.listProperties(property);
    Set simple = new HashSet();
    Set complex = new HashSet();
    for (; sIter.hasNext(); ) {
        Statement stmt = sIter.nextStatement();
        RDFNode obj = stmt.getObject();
        if (isSimpleObject(obj))
            simple.add(obj);
        else
            complex.add(obj);
    }
    sIter.close();
    // DEBUG
    int simpleSize = simple.size();
    int complexSize = complex.size();
    if (simple.size() > 0) {
        String padSp = null;
        // Simple objects - allow property to be long and alignment to be lost
        if ((propStr.length() + minGap) <= widePropertyLen)
            padSp = pad(calcPropertyPadding(propStr));
        if (doObjectListsAsLists) {
            // Write all simple objects as one list.
            out.print(propStr);
            out.incIndent(indentObject);
            if (padSp != null)
                out.print(padSp);
            else
                out.println();
            for (Iterator iter = simple.iterator(); iter.hasNext(); ) {
                RDFNode n = (RDFNode) iter.next();
                writeObject(n);
                // As an object list
                if (iter.hasNext())
                    out.print(objectListSep);
            }
            out.decIndent(indentObject);
        } else {
            for (Iterator iter = simple.iterator(); iter.hasNext(); ) {
                // This is also the same as the complex case
                // except the width the property can go in is different.
                out.print(propStr);
                out.incIndent(indentObject);
                if (padSp != null)
                    out.print(padSp);
                else
                    out.println();
                RDFNode n = (RDFNode) iter.next();
                writeObject(n);
                out.decIndent(indentObject);
                // As an object list
                if (iter.hasNext())
                    out.println(" ;");
            }
        }
    }
    if (complex.size() > 0) {
        // Finish the simple list if there was one
        if (simple.size() > 0)
            out.println(" ;");
        int padding = -1;
        String padSp = null;
        // Can we fit teh start of teh complex object on this line?
        // DEBUG variable.
        int tmp = propStr.length();
        // Complex objects - do not allow property to be long and alignment to be lost
        if ((propStr.length() + minGap) <= propertyCol) {
            padding = calcPropertyPadding(propStr);
            padSp = pad(padding);
        }
        for (Iterator iter = complex.iterator(); iter.hasNext(); ) {
            int thisIndent = indentObject;
            // if ( i )
            out.incIndent(thisIndent);
            out.print(propStr);
            if (padSp != null)
                out.print(padSp);
            else
                out.println();
            RDFNode n = (RDFNode) iter.next();
            writeObject(n);
            out.decIndent(thisIndent);
            if (iter.hasNext())
                out.println(" ;");
        }
    }
    return;
}
