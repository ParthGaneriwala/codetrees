public static void main(String[] args) throws UnknownHostException {
    if (args == null || args.length < 4) {
        System.out.println("Indexer usage: [num nodes] [gateway IP] [gateway port] [db] {ui port} {pagerank port} {crawler port}");
        System.out.println("  Including optional arguments marks this node as a gateway node.");
        System.out.println("  ");
        System.out.println("  Arguments:");
        System.out.println("    [num nodes] number of virtual nodes to start on this machine");
        System.out.println("    [gateway IP] host name or IP address of the pastry gateway node");
        System.out.println("    [gateway port] port to use on the gateway node's machine");
        System.out.println("    [db] path to a folder to use for database files");
        System.out.println("    {ui port} (optional) port to listen on for UI queries");
        System.out.println("    {pagerank port} (optional) port to listen on for pagerank posts and queries");
        System.out.println("    {crawler port} (optional) port to listen on for crawler posts");
        System.exit(-1);
    }
    isGatewayNode = (args.length == 7);
    numVirtualNodes = Integer.parseInt(args[0]);
    gatewayIPAddress = args[1];
    gatewayPort = Integer.parseInt(args[2]);
    db = new DBWrapper(args[3]);
    taskCounter = 0;
    NodeFactory nf = null;
    boolean is_bootstrap = false;
    Environment env = new Environment();
    env.getParameters().setInt("pastry_socket_writer_max_queue_length", 3000);
    // disable the UPnP setting (in case you are testing this on a NATted
    // LAN)
    env.getParameters().setString("nat_search_policy", "never");
    try {
        InetAddress addr = InetAddress.getLocalHost();
        if (gatewayIPAddress.equals("127.0.0.1") || gatewayIPAddress.equals(addr.getHostAddress())) {
            is_bootstrap = true;
            System.out.println(gatewayIPAddress);
            System.out.println(gatewayPort);
            nf = new NodeFactory(env, gatewayPort);
            pastryApp = new PastryApp(nf);
        } else {
            // start pastry thread with bootstrap_ip and simple_app
            nf = new NodeFactory(gatewayPort, new InetSocketAddress(gatewayIPAddress, gatewayPort));
            pastryApp = new PastryApp(nf);
            System.out.println(((PastryNode) pastryApp.node).getRoutingTable().printSelf());
        }
    // start crawler with app
    /*
      String begin = "end";
      while(!begin.toLowerCase().equals("start")){
        System.out.print("Enter 'start' to start the crawler:");
        InputStreamReader in = new InputStreamReader(System.in);
        BufferedReader br = new BufferedReader(in);
        try {
          begin = br.readLine();
        } catch (IOException e) {
          System.err.println("Invalid input.");
        }
      }*/
    } catch (UnknownHostException e) {
        e.printStackTrace();
    }
    if (// gateway node threads and loops
    isGatewayNode) {
        urlIndex = new HashMap<String, URLMetaData>();
        // //////////////////////////////////////////////////
        // //////////////////////////////////////////////////
        // testing stuff
        boolean test = false;
        if (test) {
            String testKeyword = "kitty";
            Id keywordId = pastryApp.factory.getIdFromBytes(testKeyword.getBytes());
            HashMap<String, Double> urls = new HashMap<String, Double>();
            urls.put("http://kitty.com", .5);
            // urls.put("http://niravsanghani.com", .1);
            // urls.put("http://brynnshepherd.com", .05);
            // urls.put("http://schedulemenow.net", .01);
            // urls.put("http://yiyizhou.com", .01);
            // urls.put("http://zoeith.com", .01);
            // urls.put("http://totaldisorder.net", .01);
            // urls.put("http://yahoo.com", .01);
            // urls.put("http://amazon.com", .01);
            // urls.put("http://lmgtfy.com", .01);
            // urls.put("http://subjectoriented.net", .01);
            // urls.put("http://nonodecrashesforever.com", .01);
            pastryApp.sendStoreMessage(keywordId, testKeyword, urls);
            testKeyword = "power";
            keywordId = pastryApp.factory.getIdFromBytes(testKeyword.getBytes());
            urls = new HashMap<String, Double>();
            urls.put("http://kitty.com", .02);
            urls.put("http://niravsanghani.com", .15);
            // urls.put("http://brynnshepherd.com", .23);
            // urls.put("http://google.com", .01);
            // urls.put("http://facebook.com", .01);
            // urls.put("http://myspace.com", .01);
            // urls.put("http://flying-paramecia.net", .01);
            // urls.put("http://iamnirav.com", .01);
            // urls.put("http://caplet.me", .01);
            pastryApp.sendStoreMessage(keywordId, testKeyword, urls);
            ArrayList<String> temp = new ArrayList<String>();
            temp.add("http://niravsanghani.com");
            temp.add("http://brynnshepherd.com");
            urlIndex.put("http://kitty.com", new URLMetaData(temp, .2));
            temp = new ArrayList<String>();
            temp.add("http://brynnshepherd.com");
            temp.add("http://kitty.com");
            urlIndex.put("http://niravsanghani.com", new URLMetaData(temp, 1.25));
            temp = new ArrayList<String>();
            temp.add("http://niravsanghani.com");
            temp.add("http://kitty.com");
            urlIndex.put("http://brynnshepherd.com", new URLMetaData(temp, 2.67));
        }
        // //////////////////////////////////////////////////
        // //////////////////////////////////////////////////
        portUI = Integer.parseInt(args[4]);
        portPageRank = Integer.parseInt(args[5]);
        portCrawler = Integer.parseInt(args[6]);
        DaemonThread daemonUI = new DaemonThread(portUI, 0);
        daemonUI.setDaemon(true);
        daemonUI.start();
        DaemonThread daemonPageRank = new DaemonThread(portPageRank, 1);
        daemonPageRank.setDaemon(true);
        daemonPageRank.start();
        DaemonThread daemonIndexer = new DaemonThread(portCrawler, 2);
        daemonIndexer.setDaemon(true);
        daemonIndexer.start();
        System.out.println("P2PCache gateway node running...");
        while (true) {
            if (!daemonUI.isAlive()) {
                System.out.println("Alert: daemonUI dead. Restarting...");
                daemonUI = new DaemonThread(portUI, 0);
                daemonUI.setDaemon(true);
                daemonUI.start();
            }
            if (!daemonPageRank.isAlive()) {
                System.out.println("Alert: daemonPageRank dead. Restarting...");
                daemonPageRank = new DaemonThread(portPageRank, 1);
                daemonPageRank.setDaemon(true);
                daemonPageRank.start();
            }
            if (!daemonIndexer.isAlive()) {
                System.out.println("Alert: daemonIndexer dead. Restarting...");
                daemonIndexer = new DaemonThread(portCrawler, 2);
                daemonIndexer.setDaemon(true);
                daemonIndexer.start();
            }
        }
    } else {
        System.out.println("P2PCache ring node running...");
        while (true) {
        }
    }
}
