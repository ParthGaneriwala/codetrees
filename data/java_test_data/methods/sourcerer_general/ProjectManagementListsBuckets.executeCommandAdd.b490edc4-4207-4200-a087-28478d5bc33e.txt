public String executeCommandAdd(ActionContext context) {
    Connection db = null;
    // Parameters
    String projectId = context.getRequest().getParameter("pid");
    String categoryId = context.getRequest().getParameter("cid");
    String description = context.getRequest().getParameter("description");
    // String taskValue = context.getRequest().getParameter("id");
    try {
        db = getConnection(context);
        // Load the project
        Project thisProject = retrieveAuthorizedProject(Integer.parseInt(projectId), context);
        if (!hasProjectAccess(context, thisProject.getId(), "project-lists-modify")) {
            return "PermissionError";
        }
        // Establish a trailMap per project
        TrailMap trailMap = new TrailMap();
        trailMap.addItems(context.getRequest().getParameter("trail"));
        // Load the task
        // Task thisTask = new Task(db, Integer.parseInt(taskValue.substring(taskValue.indexOf("_") + 1)));
        Task thisTask = new Task();
        thisTask.setProjectId(thisProject.getId());
        thisTask.setDescription(description);
        thisTask.setCategoryId(categoryId);
        thisTask.setPriority(1);
        thisTask.setEnteredBy(getUserId(context));
        thisTask.setModifiedBy(getUserId(context));
        trailMap.applyFilters(thisTask, "0");
        thisTask.insert(db);
        indexAddItem(context, thisTask);
        context.getRequest().setAttribute("task", thisTask);
        // Set the coded value on the task and save the task
        return "BucketAddOK";
    } catch (Exception errorMessage) {
        context.getRequest().setAttribute("Error", errorMessage);
        return ("SystemError");
    } finally {
        this.freeConnection(context, db);
    }
}
