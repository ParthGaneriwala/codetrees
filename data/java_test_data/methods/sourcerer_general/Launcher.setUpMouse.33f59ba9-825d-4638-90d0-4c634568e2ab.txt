/**
 * Set up the mouse manager for each graph (concept and knowledge).
 */
private static void setUpMouse() {
    // --- CONCEPTS --- //
    // First we get the visualization viewer and the graph.
    VisualizationViewer<Concept, Integer> conceptVisuViewer = getEditorGUI().getConceptPanel().getVisuViewer();
    Graph<Concept, Integer> conceptGraph = getEditorGUI().getConceptPanel().getGraph();
    // Create a graph mouse and add it to the visualization component
    edu.ensmp.ckEditor.mousePlugin.EditingModalGraphMouse<Concept, Integer> conceptGraphMouse = new edu.ensmp.ckEditor.mousePlugin.EditingModalGraphMouse<Concept, Integer>(conceptVisuViewer.getRenderContext(), conceptGraph.conceptFactory, conceptGraph.edgeFactory);
    // Set the mouse to our concept Graph
    conceptVisuViewer.setGraphMouse(conceptGraphMouse);
    // Start off in editing mode
    conceptGraphMouse.setMode(ModalGraphMouse.Mode.EDITING);
    // Key listener module to use 't' and 'p' keys for transform/pick
    // mode...
    conceptVisuViewer.addKeyListener(conceptGraphMouse.getModeKeyListener());
    // --- Right click mouse plugin --- //
    // Create our own mouse plugin
    PopupVertexEdgeMenuMousePlugin<Concept, Integer> conceptPopupMousePlugin = new PopupVertexEdgeMenuMousePlugin<Concept, Integer>();
    // Add some popup menus for the edges and vertices to our mouse plugin.
    final JPopupMenu edgeMenu = new MyMouseMenus.EdgeMenu(getEditorGUI().getEditorFrame());
    final JPopupMenu conceptMenu = new MyMouseMenus.ConceptMenu(getEditorGUI().getEditorFrame());
    conceptPopupMousePlugin.setEdgePopup(edgeMenu);
    conceptPopupMousePlugin.setVertexPopup(conceptMenu);
    // Get the existing mouse controller on concept graph
    // Removes
    conceptGraphMouse.remove(conceptGraphMouse.getPopupEditingPlugin());
    // the
    // existing
    // popup
    // editing
    // plugin
    // Add our own new
    conceptGraphMouse.add(conceptPopupMousePlugin);
    // plugin to the mouse
    // --- KNOWLEDGE --- // --> Is exactly the same as above but for the
    // right panel: Knowledge Panel
    // First we get the visualization viewer and the graph.
    VisualizationViewer<Knowledge, Integer> knowledgeVisuViewer = getEditorGUI().getKnowledgePanel().getVisuViewer();
    Graph<Knowledge, Integer> knowledgeGraph = getEditorGUI().getKnowledgePanel().getGraph();
    // Create a graph mouse and add it to the visualization component
    EditingModalGraphMouse<Knowledge, Integer> knowledgeGraphMouse = new EditingModalGraphMouse<Knowledge, Integer>(knowledgeVisuViewer.getRenderContext(), knowledgeGraph.knowledgeFactory, knowledgeGraph.edgeFactory);
    knowledgeVisuViewer.setGraphMouse(knowledgeGraphMouse);
    // Start off in editing mode
    knowledgeGraphMouse.setMode(ModalGraphMouse.Mode.EDITING);
    // Key listener module to use 't' and 'p' keys for transform/pick
    // mode...
    knowledgeVisuViewer.addKeyListener(knowledgeGraphMouse.getModeKeyListener());
    // --- Right click mouse plugin --- //
    // Create our own mouse plugin
    PopupVertexEdgeMenuMousePlugin<Knowledge, Integer> knowledgeMousePlugin = new PopupVertexEdgeMenuMousePlugin<Knowledge, Integer>();
    // Add knowledge vertex popup menu to our mouse plugin. (Edge menu is
    // the same as above)
    JPopupMenu knowledgeMenu = new MyMouseMenus.KnowledgeMenu(getEditorGUI().getEditorFrame());
    knowledgeMousePlugin.setEdgePopup(edgeMenu);
    knowledgeMousePlugin.setVertexPopup(knowledgeMenu);
    // Removes
    knowledgeGraphMouse.remove(knowledgeGraphMouse.getPopupEditingPlugin());
    // the
    // existing
    // popup
    // editing
    // plugin
    // Add our own new plugin
    knowledgeGraphMouse.add(knowledgeMousePlugin);
// to the mouse
}
