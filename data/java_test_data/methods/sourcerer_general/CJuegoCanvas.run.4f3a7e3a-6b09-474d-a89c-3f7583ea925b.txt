// //////////////////////////////////////////////////////////////////////////
// Iterface Runnable
// //////////////////////////////////////////////////////////////////////////
public void run() {
    // Limitar el juego a 30FPS en todos los dispositivos
    int framecount = 0;
    long totalFrameTime = 0;
    // Inicializamos los tiempos por primera vez
    logicLastTimeCall = frameLastTimeCall = System.currentTimeMillis();
    frameElapsedTime = 0;
    timeDrop = 0;
    // Bucle principal
    while (state != CGameStates.FinJuego) {
        // Actualizamos el tiempo transcurrido entre frames
        frameElapsedTime = System.currentTimeMillis() - frameLastTimeCall;
        frameLastTimeCall = System.currentTimeMillis();
        // de tiempos se mantenga
        if (pausado)
            logicLastTimeCall += frameElapsedTime;
        // Si no estamos en pausa
        if (!pausado) {
            // La l�gica cambia dependiendo del estado
            switch(state) {
                // Ciclo de juego en el que la pieza cae y el jugador la mueve
                case CGameStates.EnJuego:
                    // Comprobamos si cae el bloque
                    if (GestionaCaidaBloqueTiempo(frameElapsedTime))
                        state = CGameStates.BuscandoGemas;
                    // como si este se ha fijado en el tablero s�lo cada cierto num de frames
                    if ((System.currentTimeMillis() - logicLastTimeCall) > LOGIC_TICK) {
                        // si el bloque se ha fijado buscamos gemas a destruir
                        if (GestionaMovimientoBloque())
                            state = CGameStates.BuscandoGemas;
                        // movimientos.ResetMovimientosJugador();
                        // Actualizamos el tiempo para la l�gica
                        logicLastTimeCall = System.currentTimeMillis();
                    }
                    break;
                // Buscando gemas que pueden destruirse
                case CGameStates.BuscandoGemas:
                    // si encontramos gemas que se pueden destruir cambiamos de estado
                    if (tablero.BuscaGemasDestruibles()) {
                        state = CGameStates.DestruyendoGemas;
                        tablero.IniciarAnimacionDestruirGemas();
                    } else // Comprobamos si el juego ha finalizado
                    if (tablero.CompruebaFinPartida()) {
                        state = CGameStates.GameOver;
                    } else // Si todo va bien seguimos jugando
                    {
                        // Reseteamos todos los movimientos
                        movimientos.ResetMovimientos();
                        // Restauramos el multiplicador de dificultad a uno
                        scoreMultiplier = 1;
                        // Eliminamos la info con las gemas movidas
                        tablero.ReiniciarGemasMovidas();
                        // Pasamos al estado de juego
                        state = CGameStates.EnJuego;
                    }
                    break;
                // Destruyendo las gemas
                case CGameStates.DestruyendoGemas:
                    // si acab� la animaci�n de destruir gemas volvemos a comprobar las gemas
                    if (!tablero.hayAnimacion()) {
                        /**
                         * Actualizamos puntuaci�n
                         * El multiplicador de puntuaci�n aumenta al destruir varios grupos de gemas
                         * en una jugada.
                         * Por cada gema destruida por encima de tres se suma un bonus
                         */
                        score += (tablero.getNumGemasDestruidas() * GEM_SCORE_VALUE * scoreMultiplier);
                        score += (tablero.getNumGemasDestruidas() - 3) * dificultad;
                        // Cambiamos de estado
                        state = CGameStates.BuscandoGemas;
                        // Aumentamos el multiplicador, con un m�ximo de 4
                        if (scoreMultiplier < 4) {
                            scoreMultiplier++;
                        }
                        // Eliminamos la info con las gemas destruidas
                        tablero.ReiniciarGemasDestruidas();
                    }
                    break;
                case CGameStates.GameOver:
                    repaint();
                    state = CGameStates.FinJuego;
                    WaitTime(1500);
                    break;
            }
        // fin switch de estados
        }
        // Fin if pausa
        // Repintamos la pantalla
        repaint();
        serviceRepaints();
        // Limitamos a 30 FPS
        if (++framecount > 30) {
            // Saltamos tiempo hasta hacer un segundo
            while (totalFrameTime < 1000) {
                WaitTime(10);
                totalFrameTime += 10;
            }
            // Reinicializamos el contador de frames
            framecount = 0;
        }
    }
    // Fin while bucle
    // Esperamos un segundo antes de salir
    WaitTime(1000);
    // Destruir todos los objetos
    this.Destroy();
    // Al finalizar el bucle notificamos al MIDlet que tiene que inicializar el men�
    parentMIDlet.IniciarMenu(score);
}
