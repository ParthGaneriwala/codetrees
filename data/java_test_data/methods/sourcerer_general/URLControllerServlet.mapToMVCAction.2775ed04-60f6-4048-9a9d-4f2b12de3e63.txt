private void mapToMVCAction(HttpServletRequest request, HttpServletResponse response) throws IOException {
    // Translate the URI into its parts
    // URLControllerServlet-> contextPath: /context
    // URLControllerServlet-> path: /show/something
    String uri = request.getRequestURI();
    String contextPath = request.getContextPath();
    LOG.debug("Using uri: " + uri);
    URLControllerBean bean = new URLControllerBean(uri, contextPath);
    String queryString = request.getQueryString();
    String path = uri.substring(contextPath.length()) + (queryString == null ? "" : "?" + queryString);
    request.setAttribute("requestedURL", path);
    LOG.debug("Requested path: " + path);
    // Map to the MVC Action
    String mappedPath = null;
    try {
        if (bean.getAction().equals(URLControllerBean.EDITOR)) {
            mappedPath = "ProjectPortal.do?command=Builder";
        } else if (bean.getAction().equals(URLControllerBean.REGISTER)) {
            mappedPath = "page/register";
        } else if (bean.getAction().equals(URLControllerBean.LOGIN)) {
            if (bean.getDomainObject() == null) {
                mappedPath = "Login.do?command=Default";
            } else {
                mappedPath = "Login.do?command=Login";
            }
        } else if (bean.getAction().equals(URLControllerBean.LOGOUT)) {
            mappedPath = "Login.do?command=Logout";
        } else if (bean.getAction().equals(URLControllerBean.RSS)) {
            mappedPath = "ProjectManagement.do?command=RSS";
        } else if (bean.getAction().equals(URLControllerBean.RSVP)) {
            mappedPath = "";
        } else if (bean.getAction().equals(URLControllerBean.INVITATIONS)) {
            mappedPath = "ProjectManagement.do?command=RSVP";
        } else if (bean.getAction().equals(URLControllerBean.SETUP)) {
            mappedPath = "Setup.do";
        } else if (bean.getAction().equals(URLControllerBean.ADMIN)) {
            mappedPath = LinkGenerator.getAdminPortalLink(bean);
        } else if (bean.getAction().equals(URLControllerBean.CATALOG)) {
            mappedPath = "Order.do";
        } else if (bean.getAction().equals(URLControllerBean.CONTACT_US)) {
            mappedPath = "ContactUs.do";
        } else if (bean.getAction().equals(URLControllerBean.PAGE)) {
            mappedPath = "Portal.do?command=ShowPortalPage&name=" + URLEncoder.encode(bean.getDomainObject(), "UTF-8") + (StringUtils.hasText(bean.getObjectValue()) ? "&view=" + URLEncoder.encode(bean.getObjectValue(), "UTF-8") : "") + (StringUtils.hasText(bean.getParams()) ? "&params=" + bean.getParams() : "");
        } else if (bean.getAction().equals(URLControllerBean.IMAGE)) {
            mappedPath = "Portal.do?command=Img&url=" + bean.getDomainObject();
        } else if (bean.getAction().equals(URLControllerBean.SETTINGS)) {
            mappedPath = "Profile.do";
        } else if (bean.getAction().equals(URLControllerBean.PROFILE)) {
            mappedPath = "ProjectManagement.do?command=Dashboard";
        } else if (bean.getAction().equals(URLControllerBean.BROWSE)) {
            mappedPath = "ProjectManagement.do?command=ProjectList";
        } else if (bean.getAction().equals(URLControllerBean.SEARCH)) {
            mappedPath = "Search.do?command=Default";
        } else if (bean.getAction().equals(URLControllerBean.SUPPORT)) {
            mappedPath = "ContactUs.do";
        } else if (bean.getAction().equals(URLControllerBean.REPORTS)) {
            mappedPath = "Reports.do?command=List";
        } else if (bean.getAction().equals(URLControllerBean.BADGE)) {
            mappedPath = "Badges.do?command=Details&id=" + bean.getObjectValue();
        } else if (bean.getAction().equals(URLControllerBean.MANAGEMENT_CRM)) {
            mappedPath = LinkGenerator.getCRMLink();
        } else if (bean.getAction().equals(URLControllerBean.SHOW)) {
            if (bean.getDomainObject() == null) {
                mappedPath = LinkGenerator.getProjectPortalLink(bean);
            } else if ("image".equals(bean.getDomainObject())) {
                mappedPath = LinkGenerator.getProfileImageLink(bean.getProjectId(), bean.getObjectValue());
            } else if ("dashboard".equals(bean.getDomainObject())) {
                mappedPath = LinkGenerator.getDashboardLink(bean.getProjectId(), bean.getObjectValue());
            } else if ("blog-image".equals(bean.getDomainObject())) {
                mappedPath = LinkGenerator.getBlogImageLink(bean.getProjectId(), bean.getObjectValue());
            } else if ("wiki-image".equals(bean.getDomainObject())) {
                mappedPath = LinkGenerator.getWikiImageLink(bean.getProjectId(), bean.getObjectValue());
            } else if ("lists".equals(bean.getDomainObject())) {
                mappedPath = LinkGenerator.getListsLink(bean.getProjectId());
            } else if ("list".equals(bean.getDomainObject())) {
                mappedPath = LinkGenerator.getListDetailsLink(bean.getProjectId(), bean.getObjectValueAsInt());
            } else if ("plans".equals(bean.getDomainObject())) {
                mappedPath = LinkGenerator.getPlanLink(bean.getProjectId());
            } else if ("plan".equals(bean.getDomainObject())) {
                mappedPath = LinkGenerator.getPlanLink(bean.getProjectId(), bean.getObjectValueAsInt());
            } else if ("issues".equals(bean.getDomainObject())) {
                mappedPath = LinkGenerator.getTicketsLink(bean.getProjectId());
            } else if ("issue".equals(bean.getDomainObject())) {
                mappedPath = LinkGenerator.getTicketDetailsLink(bean.getProjectId(), bean.getObjectValueAsInt());
            } else if ("details".equals(bean.getDomainObject())) {
                mappedPath = LinkGenerator.getDetailsLink(bean.getProjectId());
            } else if ("setup".equals(bean.getDomainObject())) {
                mappedPath = LinkGenerator.getSetupLink(bean.getProjectId());
            } else if ("customize".equals(bean.getDomainObject())) {
                mappedPath = LinkGenerator.getCustomizeLink(bean.getProjectId());
            } else if ("permissions".equals(bean.getDomainObject())) {
                mappedPath = LinkGenerator.getPermissionsLink(bean.getProjectId());
            } else if ("customize-style".equals(bean.getDomainObject())) {
                mappedPath = LinkGenerator.getCustomizeStyleLink(bean.getProjectId());
            } else if ("style-image".equals(bean.getDomainObject())) {
                mappedPath = LinkGenerator.getStyleImageLink(bean.getProjectId(), bean.getObjectValue());
            } else if ("app".equals(bean.getDomainObject())) {
                mappedPath = LinkGenerator.getPageLink(bean.getProjectId(), bean.getObjectValue());
            } else if ("tools".equals(bean.getDomainObject())) {
                mappedPath = LinkGenerator.getToolsLink(bean.getProjectId(), bean.getObjectValue());
            } else if ("crm-account".equals(bean.getDomainObject())) {
                mappedPath = LinkGenerator.getCRMAccountLink(bean.getProjectId(), bean.getObjectValue());
            } else {
                mappedPath = LinkGenerator.getProjectPortalLink(bean);
            }
        } else if (bean.getAction().equals(URLControllerBean.CREATE)) {
            if (bean.getDomainObject() == null) {
                mappedPath = "ProjectManagement.do?command=ModifyProject&pid=" + bean.getProjectId() + "&return=ProjectCenter";
            } else {
                mappedPath = LinkGenerator.getProjectPortalLink(bean);
            }
        } else if (bean.getAction().equals(URLControllerBean.MODIFY)) {
            if (bean.getDomainObject() == null) {
                mappedPath = "ProjectManagement.do?command=ModifyProject&pid=" + bean.getProjectId() + "&return=ProjectCenter";
            } else {
                mappedPath = LinkGenerator.getProjectPortalLink(bean);
            }
        } else if (bean.getAction().equals(URLControllerBean.REMOVE)) {
            if ("image".equals(bean.getDomainObject())) {
                mappedPath = LinkGenerator.getRemoveProfileImageLink(bean.getProjectId(), bean.getObjectValue());
            }
        } else if (bean.getAction().equals(URLControllerBean.SET)) {
            if ("image".equals(bean.getDomainObject())) {
                mappedPath = LinkGenerator.getSetProfileImageLink(bean.getProjectId(), bean.getObjectValue());
            } else {
                mappedPath = LinkGenerator.getProjectPortalLink(bean);
            }
        } else if (bean.getAction().equals(URLControllerBean.ACCEPT)) {
            mappedPath = "ProjectManagement.do?command=AcceptProject&pid=" + bean.getProjectId();
        } else if (bean.getAction().equals(URLControllerBean.REJECT)) {
            mappedPath = "ProjectManagement.do?command=RejectProject&pid=" + bean.getProjectId();
        } else if (bean.getAction().equals(URLControllerBean.DOWNLOAD) || bean.getAction().equals(URLControllerBean.STREAM)) {
            if ("file".equals(bean.getDomainObject())) {
                mappedPath = "ProjectManagementFiles.do?command=Download" + "&pid=" + bean.getProjectId() + "&fid=" + bean.getObjectValue() + (bean.getParams() != null ? "&ver=" + bean.getParams() : "") + (bean.getAction().equals(URLControllerBean.STREAM) ? "&view=true" : "");
            } else {
                mappedPath = LinkGenerator.getProjectActionLink(bean);
            }
        } else {
            if (bean.getProjectId() > -1) {
                mappedPath = LinkGenerator.getProjectPortalLink(bean);
            }
        }
    } catch (Exception ex) {
        String msg = "URLControllerServletError1";
        LOG.error(msg, ex);
        response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, msg);
    }
    try {
        String forwardPath = null;
        if (mappedPath == null) {
            forwardPath = "/redirect404.jsp";
            LOG.error("A mapped path was not found for action: " + path);
        } else {
            forwardPath = "/" + mappedPath;
            LOG.debug("Forwarding request to: " + forwardPath);
        }
        RequestDispatcher dispatcher = getServletContext().getRequestDispatcher(forwardPath);
        dispatcher.forward(request, response);
    } catch (Exception ex) {
        String msg = "URLControllerServletError2";
        response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, msg);
    }
}
