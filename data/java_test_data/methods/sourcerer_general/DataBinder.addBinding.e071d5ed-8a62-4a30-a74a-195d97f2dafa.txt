/**
 * Binding bean to UI component.
 * @param comp The component to be associated.
 * @param attr The attribute of the component to be associated.
 * @param expr The expression to associate the data bean.
 * @param loadWhenEvents The event list when to load data.
 * @param saveWhenEvents The event list when to save data.
 * @param access In the view of UI component: "load" load only,
 * "both" load/save, "save" save only when doing
 * data binding. null means using the default access natural of the component.
 * e.g. Label.value is "load", but Textbox.value is "both".
 * @param converter The converter class used to convert classes between component
 * and the associated bean. null means using the default class conversion method.
 * @param args generic argument map for each binding.
 * @since 3.5.0
 */
/*	public void addBinding(Component comp, String attr, String expr,
			List loadWhenEvents, List saveWhenEvents, String access, String converter, Map args) {
		addBinding(comp, attr, expr, loadWhenEvents, saveWhenEvents, access, converter, args, null, null);
	}
*/
public void addBinding(Component comp, String attr, String expr, List loadWhenEvents, List saveWhenEvents, String access, String converter, Map args, List loadAfterEvents, List saveAfterEvents) {
    // or <listitem self="@{each='person'}"...>
    if ("each".equals(attr)) {
        attr = "_var";
    }
    if (isDefaultConfig()) {
        // use default binding configuration
        // handle default-bind defined in lang-addon.xml
        Object[] objs = loadPropertyAnnotation(comp, attr, "default-bind");
        if (loadWhenEvents == null && objs[1] != null) {
            loadWhenEvents = (List) objs[1];
        }
        if (saveWhenEvents == null && objs[2] != null) {
            saveWhenEvents = (List) objs[2];
        }
        if (access == null && objs[3] != null) {
            access = (String) objs[3];
        }
        if (converter == null && objs[4] != null) {
            converter = (String) objs[4];
        }
        if (args == null && objs[5] != null) {
            args = (Map) objs[5];
        }
        if (loadAfterEvents == null && objs[6] != null) {
            loadAfterEvents = (List) objs[6];
        }
        if (saveAfterEvents == null && objs[7] != null) {
            saveAfterEvents = (List) objs[7];
        }
    }
    // nullify check
    LinkedHashSet loadEvents = null;
    if (loadWhenEvents != null && loadWhenEvents.size() > 0) {
        loadEvents = new LinkedHashSet(loadWhenEvents.size());
        for (final Iterator it = loadWhenEvents.iterator(); it.hasNext(); ) {
            final String event = (String) it.next();
            if (NULLIFY.equals(event)) {
                loadEvents.clear();
            } else {
                loadEvents.add(event);
            }
        }
        if (loadEvents.isEmpty()) {
            loadEvents = null;
        }
    }
    LinkedHashSet lafterEvents = null;
    if (loadAfterEvents != null && loadAfterEvents.size() > 0) {
        lafterEvents = new LinkedHashSet(loadAfterEvents.size());
        for (final Iterator it = loadAfterEvents.iterator(); it.hasNext(); ) {
            final String event = (String) it.next();
            if (NULLIFY.equals(event)) {
                lafterEvents.clear();
            } else {
                lafterEvents.add(event);
            }
        }
        if (lafterEvents.isEmpty()) {
            lafterEvents = null;
        }
    }
    LinkedHashSet saveEvents = null;
    if (saveWhenEvents != null && saveWhenEvents.size() > 0) {
        saveEvents = new LinkedHashSet(saveWhenEvents.size());
        for (final Iterator it = saveWhenEvents.iterator(); it.hasNext(); ) {
            final String event = (String) it.next();
            if (NULLIFY.equals(event)) {
                saveEvents.clear();
            } else {
                saveEvents.add(event);
            }
        }
        if (saveEvents.isEmpty()) {
            saveEvents = null;
        }
    }
    LinkedHashSet safterEvents = null;
    if (saveAfterEvents != null && saveAfterEvents.size() > 0) {
        safterEvents = new LinkedHashSet(saveAfterEvents.size());
        for (final Iterator it = saveAfterEvents.iterator(); it.hasNext(); ) {
            final String event = (String) it.next();
            if (NULLIFY.equals(event)) {
                safterEvents.clear();
            } else {
                safterEvents.add(event);
            }
        }
        if (safterEvents.isEmpty()) {
            safterEvents = null;
        }
    }
    if (NULLIFY.equals(converter)) {
        converter = null;
    }
    Map attrMap = (Map) _compBindingMap.get(comp);
    if (attrMap == null) {
        attrMap = new LinkedHashMap(3);
        _compBindingMap.put(comp, attrMap);
    }
    if (attrMap.containsKey(attr)) {
        // override
        final Binding binding = (Binding) attrMap.get(attr);
        binding.setExpression(expr);
        binding.setLoadWhenEvents(loadEvents);
        binding.setLoadAfterEvents(lafterEvents);
        binding.setSaveWhenEvents(saveEvents);
        binding.setSaveAfterEvents(safterEvents);
        binding.setAccess(access);
        binding.setConverter(converter);
    } else {
        attrMap.put(attr, new Binding(this, comp, attr, expr, loadEvents, saveEvents, access, converter, args, lafterEvents, safterEvents));
    }
}
