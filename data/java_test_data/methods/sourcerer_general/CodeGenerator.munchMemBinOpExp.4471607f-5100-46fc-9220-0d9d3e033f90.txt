private Temp munchMemBinOpExp(AssemBinOpExp binOpExp) {
    Temp ret = null;
    AssemExp opLeftChild = binOpExp.getLeft();
    AssemExp opRightChild = binOpExp.getRight();
    int op = binOpExp.getOperator();
    int leftChildType = opLeftChild.getExpType();
    int rightChildType = opRightChild.getExpType();
    if (op == AssemBinOpExp.PLUS || op == AssemBinOpExp.MINUS) {
        if (leftChildType == AssemExp.TEMP) {
            AssemTemp assemTemp = (AssemTemp) opLeftChild;
            Temp temp = assemTemp.getTemp();
            if (opRightChild.getExpType() == AssemExp.CONST) {
                // Found a  tile -> Mem(BinOp(Plus/Minus, TEMP, i)), e1)
                AssemConst assemConst = (AssemConst) opRightChild;
                ret = new Temp();
                int val = assemConst.getValue();
                if (op == AssemBinOpExp.MINUS)
                    val *= -1;
                Vector destList = new Vector();
                Vector srcList = new Vector();
                srcList.addElement(temp);
                destList.addElement(ret);
                Operation instr = new Operation(destList, srcList, Operation.LOAD_FROM_TEMP_OFFSET_EXP_MEM, new Integer(val), null);
                instructionsList.addElement(instr);
            } else {
                // The right child is not a const
                Temp rhsTemp = null;
                if (leftChildType == AssemExp.CALL)
                    rhsTemp = munchCallExp((AssemCallExp) opRightChild);
                else if (leftChildType == AssemExp.BIN_OP)
                    rhsTemp = munchBinOpExp((AssemBinOpExp) opRightChild);
                else if (leftChildType == AssemExp.MEM)
                    rhsTemp = munchMemoryExp((AssemMemory) opRightChild);
                else if (leftChildType == AssemExp.TEMP)
                    rhsTemp = munchTempExp((AssemTemp) opRightChild);
                ret = addOrSubtractTemps(op, assemTemp.getTemp(), rhsTemp);
            }
        } else if (leftChildType == AssemExp.CONST) {
            AssemConst assemConst = (AssemConst) opLeftChild;
            int num = assemConst.getValue();
            if (rightChildType == AssemExp.TEMP) {
                AssemTemp assemTemp = (AssemTemp) opRightChild;
                Temp temp = assemTemp.getTemp();
                if (op == AssemBinOpExp.PLUS) {
                    // Found a  tile -> Mem(BinOp(Plus, i, TEMP)), e1)
                    ret = new Temp();
                    Vector destList = new Vector();
                    Vector srcList = new Vector();
                    srcList.addElement(temp);
                    destList.addElement(ret);
                    int val = assemConst.getValue();
                    Operation instr = new Operation(destList, srcList, Operation.LOAD_FROM_TEMP_OFFSET_EXP_MEM, new Integer(val), null);
                    instructionsList.addElement(instr);
                } else {
                    // The Binop is of the form "const - Temp" (Minus does not commute)
                    // Translate to $t0 = const - $t1, ($t0)
                    ret = emitOpConstTemp(op, num, temp);
                }
            } else {
                Temp rhsTemp = munchExp(opRightChild);
                ret = emitOpConstTemp(op, num, rhsTemp);
            }
        } else {
            // The left child is neither a const nor a temp
            Temp lhsTemp = null;
            if (leftChildType == AssemExp.CALL)
                lhsTemp = munchCallExp((AssemCallExp) opLeftChild);
            else if (leftChildType == AssemExp.BIN_OP)
                lhsTemp = munchBinOpExp((AssemBinOpExp) opLeftChild);
            else if (leftChildType == AssemExp.MEM)
                lhsTemp = munchMemoryExp((AssemMemory) opLeftChild);
            Temp rhsTemp = munchExp(opRightChild);
            ret = addOrSubtractTemps(op, lhsTemp, rhsTemp);
        }
    } else {
        // The operator is neither plus nor minus
        Temp lhsTemp = munchExp(opLeftChild);
        Temp rhsTemp = munchExp(opRightChild);
        ret = opTemps(op, lhsTemp, rhsTemp, null);
    }
    return ret;
}
