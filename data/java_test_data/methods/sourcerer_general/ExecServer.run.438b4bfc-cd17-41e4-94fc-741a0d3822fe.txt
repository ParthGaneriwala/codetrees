public void run() {
    try {
        if (oldThread != null)
            oldThread.join();
    } catch (InterruptedException ie) {
    }
    vmStarted();
    // int count = 0;
    // wait in an infinit(ish) loop.. (we want the loop to finish if
    // for some reason vmSuspend() is not working - say the connecting
    // VM has failed and therefore the breakpoint has been removed -
    // in this case we will fall through the loop and exit)
    // while(count++ < 100000 && ! shouldDie) {
    // Wait for a command from the BlueJ VM
    // vmSuspend();
    // Execute the command
    methodReturn = null;
    exception = null;
    try {
        switch(execAction) {
            case EXEC_SHELL:
                {
                    // Execute a shell class.
                    methodReturn = null;
                    executedClass = null;
                    clearInputBuffer();
                    // ShellClassLoader cloader = new ShellClassLoader(currentLoader, classToRun);
                    Class<?> c = currentLoader.loadClass(classToRun);
                    executedClass = c;
                    // Class c = cloader.loadClass(classToRun);
                    Method m = c.getMethod("run", new Class[0]);
                    try {
                        methodReturn = m.invoke(null, new Object[0]);
                    } catch (InvocationTargetException ite) {
                        throw ite.getCause();
                    }
                    break;
                }
            case INSTANTIATE_CLASS:
                {
                    // Instantiate a class using the default
                    // constructor
                    clearInputBuffer();
                    Class<?> c = currentLoader.loadClass(classToRun);
                    Constructor<?> cons = c.getDeclaredConstructor(new Class[0]);
                    cons.setAccessible(true);
                    try {
                        methodReturn = cons.newInstance((Object[]) null);
                    } catch (InvocationTargetException ite) {
                        throw ite.getCause();
                    }
                    break;
                }
            case INSTANTIATE_CLASS_ARGS:
                {
                    // Instantiate a class using specified parameter
                    // types and arguments
                    clearInputBuffer();
                    Class<?> c = currentLoader.loadClass(classToRun);
                    Class<?>[] paramClasses = new Class[parameterTypes.length];
                    for (int i = 0; i < parameterTypes.length; i++) {
                        if (classLoader == null)
                            classLoader = currentLoader;
                        paramClasses[i] = Class.forName(parameterTypes[i], false, currentLoader);
                    }
                    Constructor<?> cons = c.getDeclaredConstructor(paramClasses);
                    cons.setAccessible(true);
                    try {
                        methodReturn = cons.newInstance(arguments);
                    } catch (InvocationTargetException ite) {
                        throw ite.getCause();
                    }
                    break;
                }
            case TEST_SETUP:
                methodReturn = runTestSetUp(classToRun);
                break;
            case TEST_RUN:
                methodReturn = runTestMethod(classToRun, methodToRun);
                break;
            case DISPOSE_WINDOWS:
                disposeWindows();
                break;
            case LOAD_INIT_CLASS:
                try {
                    methodReturn = loadAndInitClass(classToRun);
                } catch (Throwable cnfe) {
                    methodReturn = null;
                }
                break;
            case EXIT_VM:
                System.exit(0);
            default:
        }
    } catch (Throwable t) {
        // record that an exception occurred
        recordException(t);
    } finally {
        // Set execAction to EXIT_VM, so if the main bluej process has died,
        // this vm will exit also.
        execAction = EXIT_VM;
        newThread();
    }
}
