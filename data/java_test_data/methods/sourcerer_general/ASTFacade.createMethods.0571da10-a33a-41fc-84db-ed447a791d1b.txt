private BMethod[] createMethods(MethodDeclaration[] methods) {
    BMethod[] results = new BMethod[methods.length];
    MethodDeclaration method;
    List<Modifier> temp;
    Modifier modifier;
    for (int i = 0; i < methods.length; i++) {
        method = methods[i];
        results[i] = new BMethod();
        temp = method.modifiers();
        // �������η�
        for (int j = 0; j < temp.size(); j++) {
            modifier = temp.get(j);
            String keyword = modifier.getKeyword().toString();
            if (keyword.equals("public") || keyword.equals("protected") || keyword.equals("private")) {
                results[i].setAccessAuthrity(keyword);
            } else if (keyword.equals("final")) {
                results[i].setFinal(true);
            } else if (keyword.equals("static")) {
                results[i].setStatic(true);
            } else if (keyword.equals("abstract")) {
                results[i].setAbstract(true);
            }
        }
        // ���÷�������
        results[i].setReturnType(method.getReturnType2().toString());
        // ���ò���
        List<SingleVariableDeclaration> parameters = method.parameters();
        StringBuilder parametersString = new StringBuilder();
        SingleVariableDeclaration tempParameter;
        for (int j = 0; j < parameters.size(); j++) {
            tempParameter = parameters.get(j);
            parametersString.append(tempParameter.getType().toString()).append(" ").append(tempParameter.getName().toString() + ",");
        }
        String parametersResult = parametersString.toString();
        if (!parametersString.toString().equals("")) {
            parametersResult = parametersResult.substring(0, parametersResult.length() - 1);
        }
        System.out.println("parametersResult == " + parametersResult);
        results[i].setParamters(parametersResult);
        // ��������
        results[i].setMethodName(method.getName().toString());
    }
    System.out.println("results == " + results);
    return results;
}
