public List getTags() {
    clearResultMetaInformation();
    List tags = new ArrayList();
    StringBuffer result = new StringBuffer();
    GetMethod get = new GetMethod(apiEndpoint + DeliciousConstants.TAGS_GET);
    get.setDoAuthentication(true);
    try {
        httpResult = httpClient.executeMethod(get);
        checkNotAuthorized(httpResult);
        logger.debug("Result: " + httpResult);
        if (get.getResponseBodyAsStream() != null) {
            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(get.getResponseBodyAsStream(), DeliciousUtils.UTF_8));
            String input;
            while ((input = bufferedReader.readLine()) != null) {
                result.append(input).append(DeliciousUtils.LINE_SEPARATOR);
            }
            get.releaseConnection();
            Document document = documentBuilder.parse(new InputSource(new StringReader(result.toString())));
            NodeList tagItems = document.getElementsByTagName(DeliciousConstants.TAG_TAG);
            if (tagItems != null && tagItems.getLength() > 0) {
                for (int i = 0; i < tagItems.getLength(); i++) {
                    Node tagItem = tagItems.item(i);
                    Tag tag;
                    String count = tagItem.getAttributes().getNamedItem(DeliciousConstants.COUNT_ATTRIBUTE).getNodeValue();
                    String tagAttribute = tagItem.getAttributes().getNamedItem(DeliciousConstants.TAG_ATTRIBUTE).getNodeValue();
                    tag = new Tag(Integer.parseInt(count), tagAttribute);
                    tags.add(tag);
                }
            }
        }
    } catch (IOException e) {
        logger.error(e);
    } catch (SAXException e) {
        logger.error(e);
        throw new DeliciousException("Response parsing error", e);
    }
    return tags;
}
