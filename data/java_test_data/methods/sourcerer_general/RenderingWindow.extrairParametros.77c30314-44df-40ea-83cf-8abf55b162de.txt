// GEN-LAST:event_btnCarregarActionPerformed
private boolean extrairParametros(Parametros p) {
    p.setArquivoModelo(txtModelo.getText());
    StringTokenizer extras = new StringTokenizer(txtExtras.getText());
    if (extras.countTokens() == 2) {
        extras.nextToken();
        p.setNPontosLuz(Integer.parseInt(extras.nextToken()));
    }
    try {
        p.setKa(Double.parseDouble(txtka.getText()));
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Coeficiente ambiental Ka inválido (deve estar entre 0 e 1).");
        return false;
    }
    try {
        Scanner scanner = new Scanner(txtkd.getText());
        scanner.useDelimiter(SEPARADOR_PADRAO);
        scanner.useLocale(Locale.US);
        p.setKd(scanner.nextDouble(), scanner.nextDouble(), scanner.nextDouble());
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Constante difusa Kd inválida (deve estar no formato R, G, B, entre 0 e 1).");
        e.printStackTrace();
        return false;
    }
    try {
        p.setKs(Double.parseDouble(txtks.getText()));
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Constante especular Ks inválida (deve estar entre 0 e 1).");
        return false;
    }
    try {
        Scanner scanner = new Scanner(txtod.getText());
        scanner.useDelimiter(SEPARADOR_PADRAO);
        scanner.useLocale(Locale.US);
        p.setOd(scanner.nextDouble(), scanner.nextDouble(), scanner.nextDouble());
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Cor do objeto Od inválida (deve estar no formato R, G, B, entre 0 e 1).");
        e.printStackTrace();
        return false;
    }
    try {
        p.setEta(Double.parseDouble(txteta.getText()));
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Constante de rugosidade \u03b7 inválida (deve ser maior que 0).");
        return false;
    }
    try {
        Scanner scanner = new Scanner(txtia.getText());
        scanner.useDelimiter(SEPARADOR_PADRAO);
        scanner.useLocale(Locale.US);
        p.setIa(scanner.nextDouble(), scanner.nextDouble(), scanner.nextDouble());
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Iluminação da cena Ia inválida (deve estar no formato R, G, B, entre 0 e 255).");
        e.printStackTrace();
        return false;
    }
    try {
        Scanner scanner = new Scanner(txtil.getText());
        scanner.useDelimiter(SEPARADOR_PADRAO);
        scanner.useLocale(Locale.US);
        Vetor[] ils = new Vetor[p.getNPontosLuz()];
        for (int i = 0; i < p.getNPontosLuz(); i++) {
            ils[i] = new Vetor(scanner.nextDouble(), scanner.nextDouble(), scanner.nextDouble());
        }
        p.setIl(ils);
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Cor da luz IL inválida (deve estar no formato R, G, B, entre 0 e 255).");
        e.printStackTrace();
        return false;
    }
    try {
        Scanner scanner = new Scanner(txtpl.getText());
        scanner.useDelimiter(SEPARADOR_PADRAO);
        scanner.useLocale(Locale.US);
        Ponto[] pls = new Ponto[p.getNPontosLuz()];
        for (int i = 0; i < p.getNPontosLuz(); i++) {
            pls[i] = new Ponto(scanner.nextDouble(), scanner.nextDouble(), scanner.nextDouble());
        }
        p.setPl(pls);
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Vetor do ponto de luz PL inválido (deve estar no formato x, y, z, entre 0 e 1).");
        e.printStackTrace();
        return false;
    }
    try {
        Scanner scanner = new Scanner(txtc.getText());
        scanner.useDelimiter(SEPARADOR_PADRAO);
        scanner.useLocale(Locale.US);
        p.setC(scanner.nextDouble(), scanner.nextDouble(), scanner.nextDouble());
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Vetor de foco C inválido (deve estar no formato x, y, z).");
        e.printStackTrace();
        return false;
    }
    try {
        Scanner scanner = new Scanner(txtn.getText());
        scanner.useDelimiter(SEPARADOR_PADRAO);
        scanner.useLocale(Locale.US);
        p.setN(scanner.nextDouble(), scanner.nextDouble(), scanner.nextDouble());
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Vetor de mira N inválido (deve estar no formato x, y, z).");
        return false;
    }
    try {
        Scanner scanner = new Scanner(txtv.getText());
        scanner.useDelimiter(SEPARADOR_PADRAO);
        scanner.useLocale(Locale.US);
        p.setV(scanner.nextDouble(), scanner.nextDouble(), scanner.nextDouble());
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Vetor de orientação vertical V inválido (deve estar no formato x, y, z).");
        return false;
    }
    try {
        p.setD(Double.parseDouble(txtd.getText()));
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Distância do foco ao plano d inválida (deve ser maior que 0).");
        return false;
    }
    try {
        Scanner scanner = new Scanner(txth.getText());
        scanner.useDelimiter(SEPARADOR_PADRAO);
        scanner.useLocale(Locale.US);
        p.setHx(scanner.nextDouble());
        p.setHy(scanner.nextDouble());
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Dimensão da tela h inválida (deve estar no formato x, y).");
        return false;
    }
    return true;
}
