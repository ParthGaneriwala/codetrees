protected void parseGGA(String data, int status) {
    // Reset the tokenizer
    tokenizer.set(data);
    // Parse out a lat, lon if possible
    double lat;
    double lon;
    try {
        // Parse the UTC time stamp
        String utc = tokenizer.nextToken();
        if (utc == null)
            return;
        // Parse the latitude:
        // token packed as ddmm.yyyy --> dd mm.yyyy
        String tok = tokenizer.nextToken();
        double degMin = Double.parseDouble(tok);
        double min = degMin % 100;
        double deg = (int) (degMin / 100);
        lat = deg + min / 60.0;
        // Skip 'N' or 'S'
        tokenizer.nextToken();
        // Parse the longitude
        degMin = Double.parseDouble(tokenizer.nextToken());
        min = degMin % 100;
        deg = (int) (degMin / 100);
        lon = deg + min / 60.0;
        // Skip 'W' or 'E'
        tokenizer.nextToken();
    } catch (Exception severe) {
        errorsSevere++;
        return;
    }
    parsedCount++;
    // If we reach this point, we have at least a valid lat, lon
    // which we'll create a new location
    Location location = new Location(lat, lon);
    location.setLatitude(lat);
    location.setLongitude(lon);
    location.setValidity(status);
    // Try to get optional info from GGA
    try {
        int type = Integer.parseInt(tokenizer.nextToken());
        location.setType(type);
        int sats = Integer.parseInt(tokenizer.nextToken());
        location.setSatellites(sats);
        double hdop = Double.parseDouble(tokenizer.nextToken());
        location.setHdop(hdop);
        double alt = Double.parseDouble(tokenizer.nextToken());
        location.setAltitude(alt);
    } catch (Exception ignorable) {
        errorsIgnored++;
    }
    // System.out.println(tagCount[TAG_GGA]+" errs=" + errorsSevere + "/" + errorsIgnored + " " + location);
    device.dispatch(location);
}
