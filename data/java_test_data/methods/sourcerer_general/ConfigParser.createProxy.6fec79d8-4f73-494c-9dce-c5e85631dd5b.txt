private void createProxy(Scanner configScanner) {
    configScanner.next();
    String proxyClass = configScanner.next();
    int lastAccessor = proxyClass.lastIndexOf('.');
    String newClassName = "auto.generated._" + proxyClass.substring(lastAccessor + 1);
    CtClass pClass = proxyPool.makeClass(newClassName);
    try {
        CtClass actualClass = proxyPool.get(proxyClass);
        CtMethod[] methods = actualClass.getMethods();
        CtConstructor[] constructors = actualClass.getConstructors();
        for (CtConstructor constr : constructors) {
            if (Modifier.isPublic(constr.getModifiers())) {
                CtClass[] paramTypes = constr.getParameterTypes();
                String methodSig = "public static " + actualClass.getName() + " _constructor(";
                int argNum = 0;
                for (CtClass param : paramTypes) {
                    methodSig += param.getName();
                    methodSig += " arg" + argNum;
                    methodSig += ",";
                    argNum++;
                }
                if (paramTypes.length != 0)
                    methodSig = methodSig.substring(0, methodSig.length() - 1);
                methodSig += ")";
                CtClass[] execeptionTypes = constr.getExceptionTypes();
                if (execeptionTypes.length != 0) {
                    methodSig += " throws ";
                }
                for (CtClass exception : execeptionTypes) {
                    methodSig += exception.getName() + ",";
                }
                if (execeptionTypes.length != 0)
                    methodSig = methodSig.substring(0, methodSig.length() - 1);
                methodSig += "{return new " + actualClass.getName() + "(";
                for (int i = 0; i < paramTypes.length; i++) {
                    methodSig += "arg" + i;
                    if (i < paramTypes.length - 1)
                        methodSig += ",";
                }
                methodSig += ");}";
                try {
                    CtMethod proxyMethod = CtNewMethod.make(methodSig, pClass);
                    pClass.addMethod(proxyMethod);
                } catch (CannotCompileException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }
            }
        }
        for (CtMethod method : methods) {
            if (Modifier.isPublic(method.getModifiers())) {
                String methodName = method.getName();
                String returnType = method.getReturnType().getName();
                CtClass[] paramTypes = method.getParameterTypes();
                String methodSig = "public static " + returnType + " _" + methodName + "(";
                int argNum = 0;
                if (!Modifier.isStatic(method.getModifiers())) {
                    methodSig += proxyClass + " arg0";
                    if (paramTypes.length != 0) {
                        methodSig += ",";
                    }
                    argNum++;
                }
                for (int i = 0; i < paramTypes.length; i++) {
                    methodSig += paramTypes[i].getName();
                    methodSig += " arg" + argNum;
                    argNum++;
                    if (i + 1 < paramTypes.length) {
                        methodSig += ",";
                    }
                }
                methodSig += ")";
                CtClass[] execeptionTypes = method.getExceptionTypes();
                if (execeptionTypes.length != 0) {
                    methodSig += " throws ";
                }
                for (CtClass exception : execeptionTypes) {
                    methodSig += exception.getName() + ",";
                }
                if (execeptionTypes.length != 0)
                    methodSig = methodSig.substring(0, methodSig.length() - 1);
                methodSig += "{";
                if (!returnType.equals("void"))
                    methodSig += "return ";
                argNum = 0;
                if (Modifier.isStatic(method.getModifiers())) {
                    methodSig += actualClass.getName() + "." + methodName + "(";
                } else {
                    methodSig += "arg" + argNum + "." + methodName + "(";
                    argNum++;
                }
                for (int i = 0; i < paramTypes.length; i++) {
                    methodSig += "arg" + argNum;
                    if (i + 1 < paramTypes.length)
                        methodSig += ",";
                    argNum++;
                }
                methodSig += ");}";
                try {
                    CtMethod proxyMethod = CtNewMethod.make(methodSig, pClass);
                    pClass.addMethod(proxyMethod);
                } catch (CannotCompileException e) {
                    logger.error("Cannot Compile the new method for:  " + method.getName(), e);
                }
            }
        }
    } catch (NotFoundException e) {
        logger.error("Could not find class for proxy", e);
    }
    customClasses.put(proxyClass, pClass);
}
