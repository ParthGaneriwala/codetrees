public boolean link(int end, Object object, Schematic schematic) {
    SNode node;
    SNodeTerminal terminal;
    SJunction junction;
    SEdge edge;
    SEdge newedge;
    Point point;
    int bindex = -1;
    boolean corner = false;
    if (object instanceof SNode || object instanceof SNodeTerminal) {
        /*
             * If we are linking the end with a schematic node, we aren't 
             * *really* linking with the node but instead, one of the node's 
             * terminals. The terminal to link to is the cached 'suggest' 
             * terminal that is stored in the node object.
             */
        if (object instanceof SNode) {
            node = (SNode) object;
            terminal = node.suggest_terminal;
        } else {
            terminal = (SNodeTerminal) object;
        }
        if (end == 0) {
            head = terminal;
            terminal.edges.add(this);
            return true;
        }
        /*
             * Can't link the edge's opposite ends on same node terminal!
             */
        if (end == 1) {
            if (head != terminal) {
                tail = terminal;
                terminal.edges.add(this);
                return true;
            } else {
                return false;
            }
        }
    } else if (object instanceof SJunction) {
        junction = (SJunction) object;
        if (end == 0) {
            head = object;
            junction.edges.add(this);
            return true;
        }
        /*
             * Can't link the edge's opposite ends on same junction!
             */
        if (end == 1) {
            if (head != junction) {
                tail = junction;
                junction.edges.add(this);
                return true;
            } else {
                return false;
            }
        }
    } else if (object instanceof SEdge) {
        edge = (SEdge) object;
        point = edge.suggestion;
        /*
             * If 'this' edge is the same as the one we are linking against or
             * if the suggestion point of the edge we are linking against is 
             * null, then we block this operation.
             * 
             * TODO: also block this operation if it will form a future loop!
             */
        if (edge == this)
            return false;
        if (point == null)
            return false;
        /*
             * Get the body index (corner or segment) of the edge we are linking
             * against.
             */
        if (edge.suggest_corner >= 0) {
            bindex = edge.suggest_corner;
            corner = true;
        } else if (edge.suggest_segment >= 0) {
            bindex = edge.suggest_segment;
        }
        junction = new SJunction(sch, point.x, point.y);
        link(end, junction, null);
        if (edge.tail instanceof SNodeTerminal) {
            terminal = (SNodeTerminal) edge.tail;
            schematic.checkpoint(terminal.parent, 0);
        } else if (edge.tail instanceof SJunction) {
            schematic.checkpoint((SJunction) edge.tail, 0);
        }
        newedge = edge.split(bindex, junction, corner);
        if (newedge != null) {
            schematic.checkpoint(newedge, 1);
            schematic.checkpoint(junction, 1);
            schematic.add_internal(newedge);
            schematic.add_internal(junction);
            return true;
        }
    }
    return false;
}
