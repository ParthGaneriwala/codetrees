public String doView(RenderRequest request, RenderResponse response) throws Exception {
    String defaultView = VIEW_PAGE;
    // Check if the user is logged in
    User user = getUser(request);
    // If this is a sensitive site, and the user isn't logged in, then don't show
    if (PortalUtils.canShowSensitiveData(request) && !user.isLoggedIn()) {
        return null;
    }
    // Read the preferences
    int limit = Integer.parseInt(request.getPreferences().getValue(PREF_LIMIT, "10"));
    String projectCategoryName = request.getPreferences().getValue(PREF_CATEGORY, null);
    int visiblePerPage = Integer.parseInt(request.getPreferences().getValue(PREF_NUMBER_VISIBLE, "1"));
    // Determine the category id
    int projectCategoryId = -1;
    if (StringUtils.hasText(projectCategoryName)) {
        ProjectCategoryList projectCategoryList = (ProjectCategoryList) request.getAttribute(Constants.REQUEST_TAB_CATEGORY_LIST);
        if (projectCategoryList.size() > 0) {
            projectCategoryId = projectCategoryList.getIdFromValue(projectCategoryName);
        }
    }
    // Determine the offset to read photos from
    PagedListInfo pagedListInfo = new PagedListInfo();
    pagedListInfo.setDefaultSort("f.entered", "desc");
    // Sometimes we have to take more data than the default limit
    String extraLimit = request.getParameter("limit");
    if (extraLimit != null && Integer.parseInt(extraLimit) > (visiblePerPage * 2)) {
        pagedListInfo.setItemsPerPage(extraLimit);
    } else {
        pagedListInfo.setItemsPerPage(visiblePerPage * 2);
    }
    String offset = request.getParameter("offset");
    if (offset != null) {
        pagedListInfo.setCurrentOffset(Integer.parseInt(offset));
        defaultView = AJAX_VIEW_PAGE;
    }
    // Load the list of photos to show in this page
    Connection db = PortalUtils.useConnection(request);
    FileItemList fileItemList = new FileItemList();
    fileItemList.setLinkModuleId(Constants.PROJECT_IMAGE_FILES);
    fileItemList.setProjectCategoryId(projectCategoryId);
    // Show the user their photos, unless this portlet is cached
    if (!PortalUtils.getDashboardPortlet(request).isCached() && user.isLoggedIn()) {
        fileItemList.setForProjectUser(user.getId());
    } else {
        fileItemList.setPublicProjectFiles(Constants.TRUE);
    }
    fileItemList.setPagedListInfo(pagedListInfo);
    fileItemList.buildList(db);
    if (LOG.isDebugEnabled()) {
        LOG.debug("current offset = " + pagedListInfo.getCurrentOffset());
        LOG.debug("items found = " + fileItemList.size());
        LOG.debug("max records = " + pagedListInfo.getMaxRecords());
    }
    // Hide the portlet when there are no photos
    if (fileItemList.size() == 0) {
        return null;
    }
    // Provide the objects to the view
    request.setAttribute(TITLE, request.getPreferences().getValue(PREF_TITLE, "Latest Photos"));
    request.setAttribute(NUMBER_VISIBLE, String.valueOf(visiblePerPage));
    request.setAttribute(WIDTH, request.getPreferences().getValue(PREF_WIDTH, "334"));
    request.setAttribute(FILE_ITEM_LIST, fileItemList);
    request.setAttribute(LIMIT, limit);
    // Limit the paging to the preferences
    if (fileItemList.getPagedListInfo().getMaxRecords() > limit) {
        request.setAttribute(MAX_RECORDS, limit);
    } else {
        request.setAttribute(MAX_RECORDS, fileItemList.getPagedListInfo().getMaxRecords());
    }
    // JSP view
    return defaultView;
}
