protected static void openMovieAddWindow(final MovieDataEnum type, final int id) {
    shell.getShell().setEnabled(false);
    final Shell addToMovie = new Shell(SWT.CLOSE);
    Color bgColor = new Color(display, 177, 200, 231);
    addToMovie.setBackground(bgColor);
    Rectangle monitor_bounds = addToMovie.getShell().getMonitor().getBounds();
    addToMovie.setLocation(monitor_bounds.width / 2 - 100, monitor_bounds.height / 2 - 100);
    addToMovie.setSize(new Point(monitor_bounds.width / 5, 100));
    addToMovie.setText("Add To Movie");
    GridLayout layout = new GridLayout(2, false);
    String buttonString = "Add";
    addToMovie.setLayout(layout);
    Label label = new Label(addToMovie, SWT.NONE);
    label.setBackground(bgColor);
    final Text text = new Text(addToMovie, SWT.FILL | SWT.BORDER);
    switch(type) {
        case MOVIE_QUOTES:
            {
                label.setText("Quote:");
                break;
            }
        case MOVIE_CAST:
            {
                label.setText("Cast:");
                buttonString = "Search";
                break;
            }
    }
    Button add = new Button(addToMovie, SWT.PUSH);
    add.setText(buttonString);
    add.setEnabled(isAdmin);
    add.setBackground(bgColor);
    Button close = new Button(addToMovie, SWT.PUSH);
    close.setText("Close");
    close.setBackground(bgColor);
    // listen to add button
    add.addSelectionListener(new SelectionListener() {

        public void widgetDefaultSelected(SelectionEvent e) {
        }

        public void widgetSelected(SelectionEvent e) {
            if (text.getText() != "") {
                if (type.equals(MovieDataEnum.MOVIE_CAST)) {
                    List<AbsFilter> list = new ArrayList<AbsFilter>();
                    list.add(dm.getFilter(SearchEntitiesEnum.PERSON_NAME, text.getText()));
                    try {
                        // adding cast
                        pool.execute(DataManager.search(SearchEntitiesEnum.PERSONS, list, id, true));
                        shell.getShell().setEnabled(true);
                        addToMovie.close();
                    } catch (InterruptedException e1) {
                        e1.printStackTrace();
                    }
                } else {
                    AbsType t = new NamedEntity(id, text.getText());
                    try {
                        // adding others
                        pool.execute(DataManager.insertMovieData(type, t, true));
                        shell.getShell().setEnabled(true);
                        addToMovie.close();
                    } catch (InterruptedException e1) {
                        e1.printStackTrace();
                    }
                }
            } else {
                // nothing was written
                okMessageBox("Please insert information to add.");
            }
        }
    });
    // listen to close
    close.addSelectionListener(new SelectionListener() {

        public void widgetDefaultSelected(SelectionEvent e) {
        }

        public void widgetSelected(SelectionEvent e) {
            shell.getShell().setEnabled(true);
            addToMovie.close();
        }
    });
    // listen to the X button
    addToMovie.addDisposeListener(new DisposeListener() {

        public void widgetDisposed(DisposeEvent e) {
            shell.getShell().setEnabled(true);
        }
    });
    addToMovie.open();
}
