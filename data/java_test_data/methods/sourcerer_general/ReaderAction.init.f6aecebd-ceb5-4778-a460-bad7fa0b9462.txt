private void init(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
    if (log.isDebugEnabled()) {
        log.debug("Entering 'init' method");
    }
    ReaderManager mgr = new ReaderManager();
    ReaderForm pForm = (ReaderForm) form;
    String readerName = request.getParameter("editReader");
    if ((readerName != null) && (readerName.length() != 0)) {
        Reader lReader = mgr.getReader(readerName);
        if (lReader != null) {
            Reader tmpReader = new Reader();
            URL fileUrl = StaticFactory.class.getResource("/reader");
            tmpReader.loadFile(URLDecoder.decode(fileUrl.getPath()) + "/" + lReader.getReaderName() + ".xml");
            BeanUtils.copyProperties(pForm, tmpReader);
        }
    }
    List<LabelValueBean> readers = new ArrayList<LabelValueBean>();
    readers.add(new LabelValueBean("Alien-9780", "Alien-9780"));
    readers.add(new LabelValueBean("Alien-9640", "Alien-9640"));
    readers.add(new LabelValueBean("RW202", "RW202"));
    readers.add(new LabelValueBean("Kab500", "Kab500"));
    readers.add(new LabelValueBean("Mg500", "Mg500"));
    readers.add(new LabelValueBean("Quanray", "Quanray"));
    readers.add(new LabelValueBean("FuDan", "FuDan"));
    readers.add(new LabelValueBean("HuaShen", "HuaShen"));
    readers.add(new LabelValueBean("Delicacy", "Delicacy"));
    readers.add(new LabelValueBean("HawkVor", "HawkVor"));
    readers.add(new LabelValueBean("Ti-7960", "Ti-7960"));
    readers.add(new LabelValueBean("Ti-S6410", "Ti-S6410"));
    readers.add(new LabelValueBean("Ti-S6420", "Ti-S6420"));
    readers.add(new LabelValueBean("Ti-S251B", "Ti-S251B"));
    readers.add(new LabelValueBean("Hopela-2214", "Hopela-2214"));
    readers.add(new LabelValueBean("Inside-Portable", "Inside-Portable"));
    readers.add(new LabelValueBean("Sim-Reader", "Sim-Reader"));
    pForm.setReaders(readers);
    List<LabelValueBean> drivers = new ArrayList<LabelValueBean>();
    String readerType = pForm.getReader();
    if (readerType == null) {
        drivers.add(new LabelValueBean("Serial", "Serial"));
        drivers.add(new LabelValueBean("Network", "Network"));
    } else {
        if (readerType.equals("Alien-9780") || readerType.equals("Alien-9640") || readerType.equals("Quanray") || readerType.equals("HuaShen")) {
            drivers.add(new LabelValueBean("Serial", "Serial"));
            drivers.add(new LabelValueBean("Network", "Network"));
        }
        if (readerType.equals("Ti-7960") || readerType.equals("Ti-S6410") || readerType.equals("Ti-S6420") || readerType.equals("Ti-S251B") || readerType.equals("Hopela-2214") || readerType.equals("Mg500") || readerType.equals("Kab500") || readerType.equals("FuDan") || readerType.equals("Delicacy") || readerType.equals("HawkVor") || readerType.equals("RW202")) {
            drivers.add(new LabelValueBean("Serial", "Serial"));
        }
        if (readerType.equals("Sim-Reader")) {
            drivers.add(new LabelValueBean("Virtual", "Virtual"));
        }
        if (readerType.equals("Inside-Portable")) {
            drivers.add(new LabelValueBean("DeviceCtrl", "DeviceCtrl"));
        }
    }
    pForm.setDrivers(drivers);
    List<LabelValueBean> startTypes = new ArrayList<LabelValueBean>();
    startTypes.add(new LabelValueBean("Stop", "Stop"));
    startTypes.add(new LabelValueBean("Start", "Start"));
    pForm.setStartTypes(startTypes);
    List<LabelValueBean> tagTypes = new ArrayList<LabelValueBean>();
    if ((pForm.getReader() == null) || (pForm.getReader().equals("Alien-9780")) || (pForm.getReader().equals("Alien-9640"))) {
        tagTypes.add(new LabelValueBean("Class1Gen1-64bits", "Class1Gen1-64bits"));
        tagTypes.add(new LabelValueBean("Class1Gen1-96bits", "Class1Gen1-96bits"));
        tagTypes.add(new LabelValueBean("Class1Gen1-All", "Class1Gen1-All"));
        tagTypes.add(new LabelValueBean("Class1Gen2", "Class1Gen2"));
        tagTypes.add(new LabelValueBean("Class0", "Class0"));
    }
    if ((pForm.getReader() != null) && (pForm.getReader().equals("Ti-7960"))) {
        tagTypes.add(new LabelValueBean("15693", "15693"));
        tagTypes.add(new LabelValueBean("14443A", "14443A"));
    }
    if ((pForm.getReader() != null) && (pForm.getReader().equals("Delicacy"))) {
        tagTypes.add(new LabelValueBean("NoPower", "NoPower"));
        tagTypes.add(new LabelValueBean("Power", "Power"));
    }
    pForm.setTagTypes(tagTypes);
    List<LabelValueBean> tagEvents = new ArrayList<LabelValueBean>();
    tagEvents.add(new LabelValueBean("Add", "Add"));
    tagEvents.add(new LabelValueBean("Remove", "Remove"));
    tagEvents.add(new LabelValueBean("Change", "Change"));
    pForm.setTagEvents(tagEvents);
    List<LabelValueBean> workActions = new ArrayList<LabelValueBean>();
    workActions.add(new LabelValueBean("Acquire", "Acquire"));
    workActions.add(new LabelValueBean("Program", "Program"));
    pForm.setWorkActions(workActions);
    List<LabelValueBean> serialPorts = new ArrayList<LabelValueBean>();
    List<CommPortIdentifier> comms = StaticFactory.listComms();
    for (CommPortIdentifier comm : comms) {
        serialPorts.add(new LabelValueBean(comm.getName(), comm.getName()));
    }
    pForm.setSerialPorts(serialPorts);
    List<LabelValueBean> baudRates = new ArrayList<LabelValueBean>();
    baudRates.add(new LabelValueBean("9600", "9600"));
    baudRates.add(new LabelValueBean("19200", "19200"));
    baudRates.add(new LabelValueBean("28800", "28800"));
    baudRates.add(new LabelValueBean("38400", "38400"));
    baudRates.add(new LabelValueBean("57600", "57600"));
    baudRates.add(new LabelValueBean("115200", "115200"));
    pForm.setBaudRates(baudRates);
    List<LabelValueBean> dataBytes = new ArrayList<LabelValueBean>();
    dataBytes.add(new LabelValueBean("5", "5"));
    dataBytes.add(new LabelValueBean("6", "6"));
    dataBytes.add(new LabelValueBean("7", "7"));
    dataBytes.add(new LabelValueBean("8", "8"));
    pForm.setDataBytes(dataBytes);
    pForm.setDataByte("8");
    List<LabelValueBean> paritys = new ArrayList<LabelValueBean>();
    paritys.add(new LabelValueBean("NONE", "NONE"));
    paritys.add(new LabelValueBean("ODD", "ODD"));
    paritys.add(new LabelValueBean("EVEN", "EVEN"));
    pForm.setParitys(paritys);
    List<LabelValueBean> stopBits = new ArrayList<LabelValueBean>();
    stopBits.add(new LabelValueBean("1", "1"));
    stopBits.add(new LabelValueBean("2", "2"));
    stopBits.add(new LabelValueBean("1.5", "1.5"));
    pForm.setStopBits(stopBits);
    List<LabelValueBean> chainIds = mgr.getChains();
    pForm.setChainIds(chainIds);
    updateFormBean(mapping, request, pForm);
}
