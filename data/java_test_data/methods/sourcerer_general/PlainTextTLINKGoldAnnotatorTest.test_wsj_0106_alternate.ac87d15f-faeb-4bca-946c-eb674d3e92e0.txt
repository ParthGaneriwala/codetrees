@Test
public void test_wsj_0106_alternate() throws UIMAException, IOException {
    CollectionReader reader = CollectionReaderFactory.createCollectionReader(FilesCollectionReader.class, typeSystemDescription, FilesCollectionReader.PARAM_VIEW_NAME, TimeMLViewName.TIMEML, FilesCollectionReader.PARAM_ROOT_FILE, "src/test/resources/data/timeml/wsj_0106.tml");
    AnalysisEngine timemlEngine = AnalysisEngineFactory.createPrimitive(TimeMLGoldAnnotator.class, typeSystemDescription, TimeMLGoldAnnotator.PARAM_LOAD_TLINKS, false);
    AnalysisEngine plainTextEngine = AnalysisEngineFactory.createPrimitive(PlainTextTLINKGoldAnnotator.class, typeSystemDescription, PlainTextTLINKGoldAnnotator.PARAM_TLINK_FILE_URL, this.fileUrl);
    JCas jcas = new JCasIterable(reader, timemlEngine, plainTextEngine).next();
    Collection<TemporalLink> tlinks = JCasUtil.select(jcas, TemporalLink.class);
    Assert.assertEquals(2, tlinks.size());
    Map<String, TemporalLink> tlinkMap = new HashMap<String, TemporalLink>();
    for (TemporalLink tlink : tlinks) {
        tlinkMap.put(tlink.getSource().getId(), tlink);
    }
    // wsj_0106 ei128 t26 BEFORE
    TemporalLink tlink = tlinkMap.get("e1");
    Assert.assertEquals(null, tlink.getId());
    Assert.assertEquals("BEFORE", tlink.getRelationType());
    Assert.assertEquals("e1", tlink.getSource().getId());
    Assert.assertEquals("t26", tlink.getTarget().getId());
    Assert.assertEquals("ei128", ((Event) tlink.getSource()).getEventInstanceID());
    // wsj_0106 t26 ei132 AFTER
    tlink = tlinkMap.get("t26");
    Assert.assertEquals(null, tlink.getId());
    Assert.assertEquals("AFTER", tlink.getRelationType());
    Assert.assertEquals("t26", tlink.getSource().getId());
    Assert.assertEquals("e7", tlink.getTarget().getId());
    Assert.assertEquals("ei132", ((Event) tlink.getTarget()).getEventInstanceID());
}
