public static SystemPlatform[] getCheatsByMemberIdNested(int memberId) {
    String[] param = { "memberId", String.valueOf(memberId) };
    ArrayList<String[]> al = new ArrayList<String[]>();
    al.add(param);
    String cheatsString = getDataAsStringFromServer("http://cheat-database.com/android/json/getCheatsByMemberId.php", al);
    SystemPlatform[] systems = null;
    Game[] games = null;
    Cheat[] cheats = null;
    ArrayList<Game> temporaryGameList = new ArrayList<Game>();
    JSONArray jArray = null;
    Map<Integer, String> systemsHashMap = new HashMap<Integer, String>();
    Map<Integer, String> gamesHashMap = new HashMap<Integer, String>();
    try {
        jArray = new JSONArray(cheatsString);
        cheats = new Cheat[jArray.length()];
        for (int i = 0; i < jArray.length(); i++) {
            JSONObject jsonObject = jArray.getJSONObject(i);
            int cheatId = jsonObject.getInt("cheat_id");
            int gameId = jsonObject.getInt("game_id");
            String gameName = jsonObject.getString("gamename");
            String cheatTitle = jsonObject.getString("title");
            String cheatText = jsonObject.getString("cheat");
            int language = jsonObject.getInt("lang");
            int style = jsonObject.getInt("style");
            String created = jsonObject.getString("created");
            String rating = jsonObject.optString("rating", "0");
            String system = jsonObject.getString("system");
            int systemId = jsonObject.getInt("system_id");
            systemsHashMap.put(Integer.valueOf(systemId), system);
            gamesHashMap.put(Integer.valueOf(gameId), gameName);
            // Games in ArrayList speichern, damit man sp�ter die System-ID
            // und System-Name wieder rauskriegt
            Game tmpGameX = new Game(gameId, gameName, systemId, system);
            temporaryGameList.add(tmpGameX);
            Cheat cheat = new Cheat();
            JSONArray screenshotsArray = jsonObject.getJSONArray("screenshots");
            Screenshot[] screens = new Screenshot[screenshotsArray.length()];
            for (int x = 0; x < screenshotsArray.length(); x++) {
                screens[x] = new Screenshot(screenshotsArray.getJSONObject(x).getString("size"), screenshotsArray.getJSONObject(x).getString("url"), cheatId);
                cheat.setHasScreenshots(true);
            }
            cheat.setCheatId(cheatId);
            cheat.setCheatTitle(cheatTitle.replaceAll("\\\\", ""));
            cheat.setCheatText(cheatText.replaceAll("\\\\", ""));
            cheat.setLanguageId(language);
            if (style == 1) {
                cheat.setWalkthroughFormat(false);
            } else {
                cheat.setWalkthroughFormat(true);
            }
            cheat.setCreated(created);
            cheat.setRating(Float.parseFloat(rating));
            cheat.setGameId(gameId);
            cheat.setGameName(gameName);
            cheats[i] = cheat;
        }
        Iterator<Map.Entry<Integer, String>> it1 = systemsHashMap.entrySet().iterator();
        ArrayList<SystemPlatform> temporarySystemList = new ArrayList<SystemPlatform>();
        while (it1.hasNext()) {
            Map.Entry<Integer, String> pairs1 = (Map.Entry<Integer, String>) it1.next();
            int tmpSystemId = Integer.valueOf(pairs1.getKey().toString());
            String tmpSystemName = pairs1.getValue().toString();
            SystemPlatform tempSys = new SystemPlatform(tmpSystemId, tmpSystemName);
            temporarySystemList.add(tempSys);
        }
        systems = new SystemPlatform[temporarySystemList.size()];
        for (int m = 0; m < temporarySystemList.size(); m++) {
            systems[m] = temporarySystemList.get(m);
        }
        Iterator<Map.Entry<Integer, String>> it2 = gamesHashMap.entrySet().iterator();
        ArrayList<Game> temporaryInnerGameList = new ArrayList<Game>();
        while (it2.hasNext()) {
            Map.Entry<Integer, String> pairs2 = (Map.Entry<Integer, String>) it2.next();
            int tmpGameId = Integer.valueOf(pairs2.getKey().toString());
            String tmpGameName = pairs2.getValue().toString();
            Game tmpGame = new Game();
            tmpGame.setGameId(tmpGameId);
            tmpGame.setGameName(tmpGameName);
            /*
				 * Dem Game-Objekt die System-ID und System-Namen erg�nzen
				 */
            for (int k = 0; k < temporaryGameList.size(); k++) {
                Game gg = temporaryGameList.get(k);
                if (gg.getGameId() == tmpGameId) {
                    tmpGame.setSystemId(gg.getSystemId());
                    tmpGame.setSystemName(gg.getSystemName());
                }
            }
            ArrayList<Cheat> matchingCheats = new ArrayList<Cheat>();
            for (int k = 0; k < cheats.length; k++) {
                Cheat cc = cheats[k];
                if (cc.getGameId() == tmpGame.getGameId()) {
                    matchingCheats.add(cc);
                }
            }
            /*
				 * Dem Game-Object die korrekte Anzahl Cheat-Objekten zuweisen
				 */
            tmpGame.createCheatCollection(matchingCheats.size());
            /*
				 * Die passenden Cheats dem Game-Objekt hinzuf�gen
				 */
            for (int i = 0; i < matchingCheats.size(); i++) {
                tmpGame.addCheat(matchingCheats.get(i));
            }
            temporaryInnerGameList.add(tmpGame);
        }
        /*
			 * Die Games zum globalen Game-Array-Objekt hinzuf�gen
			 */
        games = new Game[temporaryInnerGameList.size()];
        for (int n = 0; n < temporaryInnerGameList.size(); n++) {
            games[n] = temporaryInnerGameList.get(n);
        }
        /*
			 * Die passenden Games dem System[]-Objekt hinzuf�gen.
			 */
        for (int j2 = 0; j2 < systems.length; j2++) {
            SystemPlatform ss = systems[j2];
            ArrayList<Game> matchingGames = new ArrayList<Game>();
            for (int k2 = 0; k2 < games.length; k2++) {
                Game ggg = games[k2];
                if (ss.getSystemId() == ggg.getSystemId()) {
                    matchingGames.add(ggg);
                }
            }
            systems[j2].createGameCollection(matchingGames.size());
            /*
				 * Die passenden Game-Objekte dem System-Objekt hinzuf�gen
				 */
            for (int i = 0; i < matchingGames.size(); i++) {
                systems[j2].addGame(matchingGames.get(i));
            }
        }
    } catch (JSONException e) {
        Log.e("getCheatsByMemberIdNested", "JSON Parsing Error: " + e);
    }
    return systems;
}
