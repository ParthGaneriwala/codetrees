public void buildList(Connection db) throws SQLException {
    PreparedStatement pst = null;
    ResultSet rs = null;
    int items = -1;
    StringBuffer sqlSelect = new StringBuffer();
    StringBuffer sqlCount = new StringBuffer();
    StringBuffer sqlFilter = new StringBuffer();
    StringBuffer sqlOrder = new StringBuffer();
    // Need to build a base SQL statement for counting records
    sqlCount.append("SELECT COUNT(*) AS recordcount " + "FROM project_team t " + "WHERE t.project_id > -1 ");
    createFilter(sqlFilter);
    if (pagedListInfo == null) {
        pagedListInfo = new PagedListInfo();
        pagedListInfo.setItemsPerPage(-1);
    }
    // Get the total number of records matching filter
    pst = db.prepareStatement(sqlCount.toString() + sqlFilter.toString());
    items = prepareFilter(pst);
    rs = pst.executeQuery();
    if (rs.next()) {
        int maxRecords = rs.getInt("recordcount");
        pagedListInfo.setMaxRecords(maxRecords);
    }
    rs.close();
    pst.close();
    // Determine the offset, based on the filter, for the first record to show
    if (!pagedListInfo.getCurrentLetter().equals("")) {
        pst = db.prepareStatement(sqlCount.toString() + sqlFilter.toString() + "AND t.project_id < ? ");
        items = prepareFilter(pst);
        pst.setString(++items, pagedListInfo.getCurrentLetter().toLowerCase());
        rs = pst.executeQuery();
        if (rs.next()) {
            int offsetCount = rs.getInt("recordcount");
            pagedListInfo.setCurrentOffset(offsetCount);
        }
        rs.close();
        pst.close();
    }
    // Determine column to sort by
    pagedListInfo.setDefaultSort("p.title, r.level, last_name", null);
    pagedListInfo.appendSqlTail(db, sqlOrder);
    // Need to build a base SQL statement for returning records
    pagedListInfo.appendSqlSelectHead(db, sqlSelect);
    sqlSelect.append("t.team_id, t.project_id, t.user_id, t.userlevel, t.entered, t.enteredby, " + "t.modified, t.modifiedby, t.status, t.last_accessed, " + "t.tools, t.notification, t.email_updates_schedule, " + "r.level, p.title " + "FROM project_team t, lookup_project_role r, users u, projects p " + "WHERE t.userlevel = r.code " + "AND t.user_id = u.user_id " + "AND t.project_id = p.project_id ");
    pst = db.prepareStatement(sqlSelect.toString() + sqlFilter.toString() + sqlOrder.toString());
    items = prepareFilter(pst);
    rs = pst.executeQuery();
    if (pagedListInfo != null) {
        pagedListInfo.doManualOffset(db, rs);
    }
    int count = 0;
    while (rs.next()) {
        if (pagedListInfo != null && pagedListInfo.getItemsPerPage() > 0 && DatabaseUtils.getType(db) == DatabaseUtils.MSSQL && count >= pagedListInfo.getItemsPerPage()) {
            break;
        }
        ++count;
        TeamMember thisTeamMember = new TeamMember(rs);
        this.add(thisTeamMember);
    }
    rs.close();
    pst.close();
}
