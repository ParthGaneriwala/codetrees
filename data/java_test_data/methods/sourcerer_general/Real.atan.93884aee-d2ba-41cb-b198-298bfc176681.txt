public void atan() {
    /*
         * Adapted from:
         * Cephes Math Library Release 2.7:  May, 1998
         * Copyright 1984, 1990, 1998 by Stephen L. Moshier
         *
         * atanl.c
         *
         * long double atanl(long double x);
         */
    if ((this.exponent == 0 && this.mantissa == 0) || (this.exponent < 0 && this.mantissa != 0))
        return;
    if ((this.exponent < 0 && this.mantissa == 0)) {
        byte s = sign;
        {
            this.mantissa = PI_2.mantissa;
            this.exponent = PI_2.exponent;
            this.sign = PI_2.sign;
        }
        ;
        sign = s;
        return;
    }
    byte s = sign;
    sign = 0;
    // range reduction
    boolean addPI_2 = false;
    boolean addPI_4 = false;
    {
        tmp1.mantissa = SQRT2.mantissa;
        tmp1.exponent = SQRT2.exponent;
        tmp1.sign = SQRT2.sign;
    }
    ;
    tmp1.add(ONE);
    if (this.compare(tmp1) > 0) {
        addPI_2 = true;
        recip();
        neg();
    } else {
        tmp1.sub(TWO);
        if (this.compare(tmp1) > 0) {
            addPI_4 = true;
            {
                tmp1.mantissa = this.mantissa;
                tmp1.exponent = this.exponent;
                tmp1.sign = this.sign;
            }
            ;
            tmp1.add(ONE);
            sub(ONE);
            div(tmp1);
        }
    }
    // Now |X|<sqrt(2)-1
    // rational approximation
    // atan(x) = x + x� P(x�)/Q(x�)
    {
        tmp1.mantissa = this.mantissa;
        tmp1.exponent = this.exponent;
        tmp1.sign = this.sign;
    }
    ;
    {
        tmp2.mantissa = this.mantissa;
        tmp2.exponent = this.exponent;
        tmp2.sign = this.sign;
    }
    ;
    tmp2.sqr();
    mul(tmp2);
    // -0.8686381817809218753544
    {
        tmp3.sign = (byte) 1;
        tmp3.exponent = 0x3fffffff;
        tmp3.mantissa = 0x6f2f89336729c767L;
    }
    // -0.8686381817809218753544
    ;
    tmp3.mul(tmp2);
    // -14.683508633175792446076
    {
        tmp4.sign = (byte) 1;
        tmp4.exponent = 0x40000003;
        tmp4.mantissa = 0x7577d35fd03083f3L;
    }
    // -14.683508633175792446076
    ;
    tmp3.add(tmp4);
    tmp3.mul(tmp2);
    // -63.976888655834347413154
    {
        tmp4.sign = (byte) 1;
        tmp4.exponent = 0x40000005;
        tmp4.mantissa = 0x7ff42abff948a9f7L;
    }
    // -63.976888655834347413154
    ;
    tmp3.add(tmp4);
    tmp3.mul(tmp2);
    // -99.988763777265819915721
    {
        tmp4.sign = (byte) 1;
        tmp4.exponent = 0x40000006;
        tmp4.mantissa = 0x63fd1f9f76d37cebL;
    }
    // -99.988763777265819915721
    ;
    tmp3.add(tmp4);
    tmp3.mul(tmp2);
    // -50.894116899623603312185
    {
        tmp4.sign = (byte) 1;
        tmp4.exponent = 0x40000005;
        tmp4.mantissa = 0x65c9c9b0b55e5b62L;
    }
    // -50.894116899623603312185
    ;
    tmp3.add(tmp4);
    mul(tmp3);
    {
        tmp3.mantissa = tmp2.mantissa;
        tmp3.exponent = tmp2.exponent;
        tmp3.sign = tmp2.sign;
    }
    ;
    // 22.981886733594175366172
    {
        tmp4.sign = (byte) 0;
        tmp4.exponent = 0x40000004;
        tmp4.mantissa = 0x5bed73b744a72a6aL;
    }
    // 22.981886733594175366172
    ;
    tmp3.add(tmp4);
    tmp3.mul(tmp2);
    // 143.99096122250781605352
    {
        tmp4.sign = (byte) 0;
        tmp4.exponent = 0x40000007;
        tmp4.mantissa = 0x47fed7d13d233b5cL;
    }
    // 143.99096122250781605352
    ;
    tmp3.add(tmp4);
    tmp3.mul(tmp2);
    // 361.44079386152023162701
    {
        tmp4.sign = (byte) 0;
        tmp4.exponent = 0x40000008;
        tmp4.mantissa = 0x5a5c35f774e071d5L;
    }
    // 361.44079386152023162701
    ;
    tmp3.add(tmp4);
    tmp3.mul(tmp2);
    // 391.57570175111990631099
    {
        tmp4.sign = (byte) 0;
        tmp4.exponent = 0x40000008;
        tmp4.mantissa = 0x61e4d84c2853d5e0L;
    }
    // 391.57570175111990631099
    ;
    tmp3.add(tmp4);
    tmp3.mul(tmp2);
    // 152.68235069887081006606
    {
        tmp4.sign = (byte) 0;
        tmp4.exponent = 0x40000007;
        tmp4.mantissa = 0x4c5757448806c48eL;
    }
    // 152.68235069887081006606
    ;
    tmp3.add(tmp4);
    div(tmp3);
    add(tmp1);
    if (addPI_2)
        add(PI_2);
    if (addPI_4)
        add(PI_4);
    if (s != 0)
        neg();
}
