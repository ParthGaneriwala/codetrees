public void testRenameResource() {
    Model m = ModelFactory.createDefaultModel();
    Resource a = m.createResource(NS + "a");
    Resource b = m.createResource(NS + "b");
    Resource c = m.createResource(NS + "c");
    Resource d = m.createResource(NS + "d");
    Property p = m.createProperty(NS, "p");
    Property q = m.createProperty(NS, "q");
    a.addProperty(p, b);
    a.addProperty(q, c);
    d.addProperty(p, a);
    d.addProperty(p, b);
    // now rename a to e
    Resource e = ResourceUtils.renameResource(a, NS + "e");
    assertTrue("should be no properties of a", !a.listProperties().hasNext());
    assertEquals("uri of a", NS + "a", a.getURI());
    assertEquals("uri of e", NS + "e", e.getURI());
    assertTrue("d should not have p a", !d.hasProperty(p, a));
    assertTrue("d should have p e", d.hasProperty(p, e));
    assertTrue("e should have p b", e.hasProperty(p, b));
    assertTrue("e should have q c", e.hasProperty(q, c));
    assertTrue("d p b should be unchanged", d.hasProperty(p, b));
    // now rename e to anon
    Resource anon = ResourceUtils.renameResource(e, null);
    assertTrue("should be no properties of e", !e.listProperties().hasNext());
    assertEquals("uri of e", NS + "e", e.getURI());
    assertTrue("anon", anon.isAnon());
    assertTrue("d should not have p e", !d.hasProperty(p, e));
    assertTrue("d should have p anon", d.hasProperty(p, anon));
    assertTrue("anon should have p b", anon.hasProperty(p, b));
    assertTrue("anon should have q c", anon.hasProperty(q, c));
    assertTrue("d p b should be unchanged", d.hasProperty(p, b));
    // reflexive case
    Resource f = m.createResource(NS + "f");
    f.addProperty(p, f);
    Resource f1 = ResourceUtils.renameResource(f, NS + "f1");
    assertFalse("Should be no f statements", m.listStatements(f, null, (RDFNode) null).hasNext());
    assertTrue("f1 has p f1", f1.hasProperty(p, f1));
}
