public ActionForward addChongYinToCart(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
    if (!isLoggedIn(request)) {
        return mapping.findForward(ForwardConstants.INDEX);
    }
    calculatePrice(form, request);
    SessionContainer sessionContainer = getSessionContainer(request);
    ShoppingCart cart = sessionContainer.getCart();
    Customer customer = sessionContainer.getCustomer();
    Customer customer1 = customerService.findByEmail(customer.getEmail());
    List<Album> allAlbums = customer1.getAlbums();
    List<Item> printPhotosItems = cart.getPrintPhotosItems();
    Map<Integer, PrintPhotoItemDto[]> printPhotosItemsDto = cart.getPrintPhotosItemsDto();
    if (printPhotosItemsDto.size() == 0) {
        ActionMessages errors = new ActionMessages();
        ActionMessage msg = new ActionMessage(MessageUtil.getMessage("errors.empty.cart"), false);
        errors.add("emptycode", msg);
        saveMessages(request, errors);
        request.setAttribute("type", "1");
        request.setAttribute("allAlbums", allAlbums);
        request.setAttribute("cartContent", MessageUtil.getMessage("errors.empty.cart"));
        return mapping.findForward("chongyinku");
    }
    Set<Map.Entry<Integer, PrintPhotoItemDto[]>> entrys = printPhotosItemsDto.entrySet();
    for (Entry<Integer, PrintPhotoItemDto[]> entry : entrys) {
        PrintPhotoItemDto[] items = entry.getValue();
        for (int i = 0; i < items.length; i++) {
            PrintPhotoItemDto dto = items[i];
            Item item = dto.getItem();
            if (item != null) {
                printPhotosItems.add(item);
            }
        }
    }
    cart.getPrintPhotosItemsDto().clear();
    return mapping.findForward("GWC");
}
