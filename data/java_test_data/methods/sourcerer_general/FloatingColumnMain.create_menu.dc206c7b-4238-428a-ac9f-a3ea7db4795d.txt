public void create_menu() {
    // Where the GUI is created:
    JMenuBar menuBar;
    JMenu menu;
    JMenuItem menuItem;
    JCheckBoxMenuItem cbMenuItem;
    // Create the menu bar.
    menuBar = new JMenuBar();
    // Build the first menu.
    menu = new JMenu("Rendering");
    // --------------------------------
    cbMenuItem = new JCheckBoxMenuItem("Draw axes");
    cbMenuItem.addItemListener(new ItemListener() {

        public void itemStateChanged(ItemEvent arg0) {
            axesFlag = !axesFlag;
            repaint();
        }
    });
    menu.add(cbMenuItem);
    // --------------------------------
    cbMenuItem = new JCheckBoxMenuItem("Shade");
    isShade = cbMenuItem;
    cbMenuItem.addItemListener(new ItemListener() {

        public void itemStateChanged(ItemEvent arg0) {
            if (sC.getShade() == false) {
                if (// if no partial derivative
                dx == null)
                    handleFunctionsDX();
                if (dx == null) {
                    // if still no valid derivative
                    isShade.setSelected(false);
                    return;
                }
                if (// if no partial derivative
                dz == null)
                    handleFunctionsDZ();
                if (dz == null) {
                    // if still no valid derivative
                    isShade.setSelected(false);
                    return;
                }
            }
            sC.setShade(!sC.getShade());
            renderer = createRenderer(sC, _width, _height, f, dx, dz);
            repaint();
        }
    });
    menu.add(cbMenuItem);
    // --------------------------------
    cbMenuItem = new JCheckBoxMenuItem("Normalize");
    cbMenuItem.addItemListener(new ItemListener() {

        public void itemStateChanged(ItemEvent arg0) {
            sC.setNorm(!sC.getNorm());
            renderer = createRenderer(sC, _width, _height, f, dx, dz);
            repaint();
        }
    });
    menu.add(cbMenuItem);
    cbMenuItem = new JCheckBoxMenuItem("Ridge");
    cbMenuItem.addItemListener(new ItemListener() {

        public void itemStateChanged(ItemEvent arg0) {
            sC.setRidge(!sC.getRidge());
            renderer = createRenderer(sC, _width, _height, f, dx, dz);
            repaint();
        }
    });
    menu.add(cbMenuItem);
    menuBar.add(menu);
    menu = new JMenu("Functions");
    menuItem = new JMenuItem("Get function");
    menuItem.addActionListener(new ActionListener() {

        public void actionPerformed(ActionEvent arg0) {
            handleFunction();
        }
    });
    menu.add(menuItem);
    menuItem = new JMenuItem("Get dx");
    menuItem.addActionListener(new ActionListener() {

        public void actionPerformed(ActionEvent arg0) {
            handleFunctionsDX();
        }
    });
    menu.add(menuItem);
    menuItem = new JMenuItem("Get dy");
    menuItem.addActionListener(new ActionListener() {

        public void actionPerformed(ActionEvent arg0) {
            handleFunctionsDZ();
        }
    });
    menu.add(menuItem);
    menuItem = new JMenuItem("Choose predefined function");
    menuItem.addActionListener(new ActionListener() {

        public void actionPerformed(ActionEvent arg0) {
            handleFunctionsPredef();
        }
    });
    menu.add(menuItem);
    menuBar.add(menu);
    // ========================================
    menu = new JMenu("Help");
    menuItem = new JMenuItem("Keyboard controls");
    menuItem.addActionListener(new ActionListener() {

        public void actionPerformed(ActionEvent arg0) {
            JOptionPane.showMessageDialog(null, "<html>�X� and �x� � used for rotating the scene round the named axis <br>�Y� and �y� � used for rotating the scene round the named axis<br>�E� and �e� � narrowing and widening the positive and negative planes<br>�+� and �-� � controlling the distance of screen from origin<br>�D� and �d� � increasing and decreasing the distance<br>�P� and �p� � increasing and decreasing the distance of viewport from screen<br>�L� and �l� � increasing and decreasing intensiveness of  the light source<br></html>");
        }
    });
    menu.add(menuItem);
    menu.add(menuItem);
    menuBar.add(menu);
    // ========================================
    this.setJMenuBar(menuBar);
}
