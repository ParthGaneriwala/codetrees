private WipRelayRunner.Step<JsVariable> createFillDataObjectStep() {
    if (additionalContext.isEmpty()) {
        // Shouldn't happen, but let's double-check.
        return createEvaluateStep(evaluateCommandHandler);
    }
    StringBuilder assigmentBuilder = new StringBuilder();
    StringBuilder parametersBuilder = new StringBuilder();
    boolean isFirst = true;
    String thisObjectId = null;
    final List<String> additionalObjectIds = new ArrayList<String>(0);
    String tempObjectRef = GLOBAL_VARIABLE_NAME + ".data." + dataId + ".";
    for (Map.Entry<String, String> entry : additionalContext.entrySet()) {
        String commandParamName;
        if (isFirst) {
            commandParamName = "this";
            thisObjectId = entry.getValue();
            isFirst = false;
        } else {
            commandParamName = "p" + additionalObjectIds.size();
            additionalObjectIds.add(entry.getValue());
            if (parametersBuilder.length() != 0) {
                parametersBuilder.append(", ");
            }
            parametersBuilder.append(commandParamName);
        }
        assigmentBuilder.append(tempObjectRef + entry.getKey() + " = " + commandParamName + ";\n");
    }
    final String functionText = "function(" + parametersBuilder + ") { " + GLOBAL_VARIABLE_NAME + ".data." + dataId + " = {};\n" + assigmentBuilder + "}";
    final String thisObjectIdFinal = thisObjectId;
    return new WipRelayRunner.SendStepWithResponse<CallFunctionOnData, JsVariable>() {

        @Override
        public WipParamsWithResponse<CallFunctionOnData> getParams() {
            List<String> arguments;
            if (additionalObjectIds.isEmpty()) {
                arguments = null;
            } else {
                arguments = new ArrayList<String>(additionalObjectIds.size());
                for (String objectId : additionalObjectIds) {
                    arguments.add(objectId);
                }
            }
            return new CallFunctionOnParams(thisObjectIdFinal, functionText, arguments);
        }

        @Override
        public Step<JsVariable> processResponse(CallFunctionOnData response) {
            if (response.wasThrown() == Boolean.TRUE) {
                return createHandleErrorStep(response.result());
            }
            return createEvaluateStep(evaluateCommandHandler);
        }

        @Override
        public Exception processFailure(Exception cause) {
            return cause;
        }
    };
}
