// //////////////////////////////////////////////////////////////////////////
// Funciones Callback de Canvas
// //////////////////////////////////////////////////////////////////////////
protected void paint(Graphics g) {
    // Lo que hay que dibujar cambia segun el estado
    switch(state) {
        case CGameStates.EnJuego:
            // Dibujamos la pantalla de juego y la puntuaci�n la primera vez
            if (!pantallaInicialDibujada) {
                backBufferGraphics.drawImage(imgPantallaJuego, 0, 0, Graphics.TOP | Graphics.LEFT);
                // Borramos la puntacion
                backBufferGraphics.drawImage(imgFondoPuntuacion, MARCADOR_X, MARCADOR_Y, Graphics.TOP | Graphics.LEFT);
                // Podria ser m�s eficiente usar stringbuffer�s para esto, pero como solo se hace
                // cuando destruimos gemas el rendimiento no baja mucho
                backBufferGraphics.drawString(new Integer(score).toString(), TEXTO_MARCADOR_X, TEXTO_MARCADOR_Y, Graphics.BASELINE | Graphics.RIGHT);
                // Marcamos la pantalla como dibujada inicialmente
                pantallaInicialDibujada = true;
            }
            // Dibujamos la pieza next
            DibujaBloqueNext(backBufferGraphics);
            // Dibujamos el bloque del jugador
            DibujaBloqueJugador(backBufferGraphics);
            break;
        case CGameStates.BuscandoGemas:
            /**
             * Aqu� actualizamos el marcador. Es un poco chapuza pero es el mejor lugar
             * para hacerlo s�lo cuando sea necesario, en vez de actualizarlo una vez por frame
             */
            // Borramos la puntacion anterior
            backBufferGraphics.drawImage(imgFondoPuntuacion, MARCADOR_X, MARCADOR_Y, Graphics.TOP | Graphics.LEFT);
            // Actualizamos la puntacion
            // Podria ser m�s eficiente usar stringbuffer�s para esto, pero como solo se hace una vez
            // por frame el rendimiento no baja mucho
            backBufferGraphics.drawString(new Integer(score).toString(), TEXTO_MARCADOR_X, TEXTO_MARCADOR_Y, Graphics.BASELINE | Graphics.RIGHT);
            break;
        case CGameStates.DestruyendoGemas:
            // S�lo vamos a modificar el espacio ocupado por el tablero
            backBufferGraphics.setClip(tablero.TABLERO_X, tablero.TABLERO_Y, tablero.ANCHO_TABLERO * tablero.TAMCASILLA, tablero.ALTO_TABLERO * tablero.TAMCASILLA);
            // Si hay animacion la actualizamos
            if (tablero.hayAnimacion()) {
                tablero.DibujarAnimacionDestruirGemas(backBufferGraphics, frameElapsedTime);
            }
            // Restauramos el clip
            backBufferGraphics.setClip(0, 0, screenWidth, screenHeight);
            ;
            break;
        case CGameStates.GameOver:
            DibujaTextoFinJuego(backBufferGraphics);
            break;
        case CGameStates.Cargando:
            // Aqu� no usamos backbuffer dibujamos directamente sobre el canvas
            g.setColor(0x00FFFFFF);
            g.fillRect(0, 0, screenWidth, screenHeight);
            g.setColor(0x00000000);
            g.setFont(Font.getFont(Font.FACE_SYSTEM, Font.STYLE_BOLD, Font.SIZE_MEDIUM));
            g.drawString("CARGANDO", screenWidth / 2, screenHeight / 2, Graphics.HCENTER | Graphics.BASELINE);
            return;
    }
    if (pausado) {
        // Escribimos en la pantalla la confirmacion para salir
        if (confirmaSalir) {
            // Copiamos los contenidos del backbuffer al canvas (doble buffering)
            g.drawImage(backBuffer, 0, 0, Graphics.TOP | Graphics.LEFT);
            // g.setColor(255, 255, 255); //color blanco
            g.drawString("�Desea salir?", screenHeight / 2, screenWidth / 2, Graphics.HCENTER | Graphics.BASELINE);
            g.drawImage(imgMenuConfirmaSalir, 0, screenHeight - imgMenuConfirmaSalir.getHeight(), Graphics.TOP | Graphics.LEFT);
        } else {
            // Copiamos el BackBuffer y en la copia dibujamos el menu y el texto pausa
            DibujaTextoPausa();
            // Dibujamos directamente sobre el canvas la imagen con el texto de pausa
            g.drawImage(imgTempTexto, 0, 0, Graphics.TOP | Graphics.LEFT);
        }
    } else {
        // Copiamos los contenidos del backbuffer al canvas (doble buffering)
        g.drawImage(backBuffer, 0, 0, Graphics.TOP | Graphics.LEFT);
        imagenTextoDibujada = false;
    }
}
