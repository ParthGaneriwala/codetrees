int select_working_set(int[] working_set) {
    // return i,j such that
    // i: maximizes -y_i * grad(f)_i, i in I_up(\alpha)
    // j: mimimizes the decrease of obj value
    // (if quadratic coefficeint <= 0, replace it with tau)
    // -y_j*grad(f)_j < -y_i*grad(f)_i, j in I_low(\alpha)
    double Gmax = -INF;
    double Gmax2 = -INF;
    int Gmax_idx = -1;
    int Gmin_idx = -1;
    double obj_diff_min = INF;
    for (int t = 0; t < active_size; t++) if (y[t] == +1) {
        if (!is_upper_bound(t))
            if (-G[t] >= Gmax) {
                Gmax = -G[t];
                Gmax_idx = t;
            }
    } else {
        if (!is_lower_bound(t))
            if (G[t] >= Gmax) {
                Gmax = G[t];
                Gmax_idx = t;
            }
    }
    int i = Gmax_idx;
    float[] Q_i = null;
    if (// null Q_i not accessed: Gmax=-INF if i=-1
    i != -1)
        Q_i = Q.get_Q(i, active_size);
    for (int j = 0; j < active_size; j++) {
        if (y[j] == +1) {
            if (!is_lower_bound(j)) {
                double grad_diff = Gmax + G[j];
                if (G[j] >= Gmax2)
                    Gmax2 = G[j];
                if (grad_diff > 0) {
                    double obj_diff;
                    double quad_coef = QD[i] + QD[j] - 2.0 * y[i] * Q_i[j];
                    if (quad_coef > 0)
                        obj_diff = -(grad_diff * grad_diff) / quad_coef;
                    else
                        obj_diff = -(grad_diff * grad_diff) / 1e-12;
                    if (obj_diff <= obj_diff_min) {
                        Gmin_idx = j;
                        obj_diff_min = obj_diff;
                    }
                }
            }
        } else {
            if (!is_upper_bound(j)) {
                double grad_diff = Gmax - G[j];
                if (-G[j] >= Gmax2)
                    Gmax2 = -G[j];
                if (grad_diff > 0) {
                    double obj_diff;
                    double quad_coef = QD[i] + QD[j] + 2.0 * y[i] * Q_i[j];
                    if (quad_coef > 0)
                        obj_diff = -(grad_diff * grad_diff) / quad_coef;
                    else
                        obj_diff = -(grad_diff * grad_diff) / 1e-12;
                    if (obj_diff <= obj_diff_min) {
                        Gmin_idx = j;
                        obj_diff_min = obj_diff;
                    }
                }
            }
        }
    }
    if (Gmax + Gmax2 < eps)
        return 1;
    working_set[0] = Gmax_idx;
    working_set[1] = Gmin_idx;
    return 0;
}
