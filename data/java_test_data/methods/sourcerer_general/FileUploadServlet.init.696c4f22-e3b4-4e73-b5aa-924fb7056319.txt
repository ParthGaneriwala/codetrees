@Override
public void init(ServletConfig config) throws ServletException {
    // get init param
    servletConfig = config;
    parameterName = config.getInitParameter("parameterName");
    forwardPathUpload = config.getInitParameter("forwardPathUpload");
    forwardPathDownload = config.getInitParameter("forwardPathDownload");
    forwardPathList = config.getInitParameter("forwardPathList");
    forwardPathRead = config.getInitParameter("forwardPathRead");
    forwardPathDelete = config.getInitParameter("forwardPathDelete");
    // set service
    WebApplicationContext ctx = WebApplicationContextUtils.getRequiredWebApplicationContext(config.getServletContext());
    PropertiesService propertiesService = (PropertiesService) ctx.getBean("propertiesService");
    // overwrite configuration
    characterEncoding = propertiesService.getString("file.default.character.encoding", characterEncoding);
    sizeThreshold = propertiesService.getInt("file.default.file.size.threshold", sizeThreshold);
    fileSizeMax = propertiesService.getLong("file.default.file.size.max", fileSizeMax);
    requestSizeMax = propertiesService.getLong("file.default.request.size.max", requestSizeMax);
    realRepositoryPath = propertiesService.getString("file.default.real.repository.path", realRepositoryPath);
    tempRepositoryPath = propertiesService.getString("file.default.temp.repository.path", tempRepositoryPath);
    repositoryType = RepositoryType.valueOf(propertiesService.getString("file.default.real.repository.type", repositoryType.toString()));
    // mkdirs
    File file = new File(realRepositoryPath);
    if (!file.exists()) {
        boolean mkdirSuccess = file.mkdirs();
        logger.debug("mkdirs: {}, success: {}", realRepositoryPath, mkdirSuccess);
    }
    file = new File(tempRepositoryPath);
    if (!file.exists()) {
        boolean mkdirSuccess = file.mkdirs();
        logger.debug("mkdirs: {}, success: {}", realRepositoryPath, mkdirSuccess);
    }
}
