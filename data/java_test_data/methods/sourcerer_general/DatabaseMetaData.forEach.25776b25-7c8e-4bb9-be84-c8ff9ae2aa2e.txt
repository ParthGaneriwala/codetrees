void forEach(Object catalogStr) throws SQLException {
    ArrayList tableNameList = new ArrayList();
    if (tableNamePattern == null) {
        // Select from all tables
        java.sql.ResultSet tables = null;
        try {
            tables = getTables((String) catalogStr, schemaPattern, "%", new String[0]);
            while (tables.next()) {
                String tableNameFromList = tables.getString("TABLE_NAME");
                tableNameList.add(tableNameFromList);
            }
        } finally {
            if (tables != null) {
                try {
                    tables.close();
                } catch (Exception sqlEx) {
                    AssertionFailedException.shouldNotHappen(sqlEx);
                }
                tables = null;
            }
        }
    } else {
        java.sql.ResultSet tables = null;
        try {
            tables = getTables((String) catalogStr, schemaPattern, tableNamePattern, new String[0]);
            while (tables.next()) {
                String tableNameFromList = tables.getString("TABLE_NAME");
                tableNameList.add(tableNameFromList);
            }
        } finally {
            if (tables != null) {
                try {
                    tables.close();
                } catch (SQLException sqlEx) {
                    AssertionFailedException.shouldNotHappen(sqlEx);
                }
                tables = null;
            }
        }
    }
    java.util.Iterator tableNames = tableNameList.iterator();
    while (tableNames.hasNext()) {
        String tableName = (String) tableNames.next();
        ResultSet results = null;
        try {
            StringBuffer queryBuf = new StringBuffer("SHOW ");
            if (conn.versionMeetsMinimum(4, 1, 0)) {
                queryBuf.append("FULL ");
            }
            queryBuf.append("COLUMNS FROM ");
            queryBuf.append(quotedId);
            queryBuf.append(tableName);
            queryBuf.append(quotedId);
            queryBuf.append(" FROM ");
            queryBuf.append(quotedId);
            queryBuf.append((String) catalogStr);
            queryBuf.append(quotedId);
            queryBuf.append(" LIKE '");
            queryBuf.append(colPattern);
            queryBuf.append("'");
            // Return correct ordinals if column name pattern is
            // not '%'
            // Currently, MySQL doesn't show enough data to do
            // this, so we do it the 'hard' way...Once _SYSTEM
            // tables are in, this should be much easier
            boolean fixUpOrdinalsRequired = false;
            Map ordinalFixUpMap = null;
            if (!colPattern.equals("%")) {
                fixUpOrdinalsRequired = true;
                StringBuffer fullColumnQueryBuf = new StringBuffer("SHOW ");
                if (conn.versionMeetsMinimum(4, 1, 0)) {
                    fullColumnQueryBuf.append("FULL ");
                }
                fullColumnQueryBuf.append("COLUMNS FROM ");
                fullColumnQueryBuf.append(quotedId);
                fullColumnQueryBuf.append(tableName);
                fullColumnQueryBuf.append(quotedId);
                fullColumnQueryBuf.append(" FROM ");
                fullColumnQueryBuf.append(quotedId);
                fullColumnQueryBuf.append((String) catalogStr);
                fullColumnQueryBuf.append(quotedId);
                results = stmt.executeQuery(fullColumnQueryBuf.toString());
                ordinalFixUpMap = new HashMap();
                int fullOrdinalPos = 1;
                while (results.next()) {
                    String fullOrdColName = results.getString("Field");
                    ordinalFixUpMap.put(fullOrdColName, Constants.integerValueOf(fullOrdinalPos++));
                }
            }
            results = stmt.executeQuery(queryBuf.toString());
            int ordPos = 1;
            while (results.next()) {
                byte[][] rowVal = new byte[23][];
                // TABLE_CAT
                rowVal[0] = s2b((String) catalogStr);
                // TABLE_SCHEM (No schemas
                rowVal[1] = null;
                // in MySQL)
                // TABLE_NAME
                rowVal[2] = s2b(tableName);
                rowVal[3] = results.getBytes("Field");
                TypeDescriptor typeDesc = new TypeDescriptor(results.getString("Type"), results.getString("Null"));
                rowVal[4] = Short.toString(typeDesc.dataType).getBytes();
                // DATA_TYPE (jdbc)
                // TYPE_NAME
                rowVal[5] = s2b(typeDesc.typeName);
                // (native)
                rowVal[6] = typeDesc.columnSize == null ? null : s2b(typeDesc.columnSize.toString());
                rowVal[7] = s2b(Integer.toString(typeDesc.bufferLength));
                rowVal[8] = typeDesc.decimalDigits == null ? null : s2b(typeDesc.decimalDigits.toString());
                rowVal[9] = s2b(Integer.toString(typeDesc.numPrecRadix));
                rowVal[10] = s2b(Integer.toString(typeDesc.nullability));
                // 
                try {
                    if (conn.versionMeetsMinimum(4, 1, 0)) {
                        rowVal[11] = results.getBytes("Comment");
                    } else {
                        rowVal[11] = results.getBytes("Extra");
                    }
                } catch (Exception E) {
                    rowVal[11] = new byte[0];
                }
                // COLUMN_DEF
                rowVal[12] = results.getBytes("Default");
                // SQL_DATA_TYPE
                rowVal[13] = new byte[] { (byte) '0' };
                // SQL_DATE_TIME_SUB
                rowVal[14] = new byte[] { (byte) '0' };
                if (StringUtils.indexOfIgnoreCase(typeDesc.typeName, "CHAR") != -1 || StringUtils.indexOfIgnoreCase(typeDesc.typeName, "BLOB") != -1 || StringUtils.indexOfIgnoreCase(typeDesc.typeName, "TEXT") != -1 || StringUtils.indexOfIgnoreCase(typeDesc.typeName, "BINARY") != -1) {
                    // CHAR_OCTET_LENGTH
                    rowVal[15] = rowVal[6];
                } else {
                    rowVal[15] = null;
                }
                // ORDINAL_POSITION
                if (!fixUpOrdinalsRequired) {
                    rowVal[16] = Integer.toString(ordPos++).getBytes();
                } else {
                    String origColName = results.getString("Field");
                    Integer realOrdinal = (Integer) ordinalFixUpMap.get(origColName);
                    if (realOrdinal != null) {
                        rowVal[16] = realOrdinal.toString().getBytes();
                    } else {
                        throw SQLError.createSQLException("Can not find column in full column list to determine true ordinal position.", SQLError.SQL_STATE_GENERAL_ERROR, getExceptionInterceptor());
                    }
                }
                rowVal[17] = s2b(typeDesc.isNullable);
                // We don't support REF or DISTINCT types
                rowVal[18] = null;
                rowVal[19] = null;
                rowVal[20] = null;
                rowVal[21] = null;
                rowVal[22] = s2b("");
                String extra = results.getString("Extra");
                if (extra != null) {
                    rowVal[22] = s2b(StringUtils.indexOfIgnoreCase(extra, "auto_increment") != -1 ? "YES" : "NO");
                }
                rows.add(new ByteArrayRow(rowVal, getExceptionInterceptor()));
            }
        } finally {
            if (results != null) {
                try {
                    results.close();
                } catch (Exception ex) {
                    ;
                }
                results = null;
            }
        }
    }
}
