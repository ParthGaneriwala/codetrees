private String[] categoryUtility(Category root, Set<Category> subCategory, String[] column, String[][] data, int observation) {
    String[] bestUtility = new String[2];
    double utilityValue = 0d;
    // For incorporate on root
    Category rootIncorporate = this.createCategory(column, data);
    this.updateCategory(rootIncorporate, column, this.getSubMartrix(data, observation));
    utilityValue += (1d / root.totalObservation()) * (rootIncorporate.getSquareSome() - root.getSquareSome());
    for (Category c : subCategory) {
        utilityValue += ((double) c.totalObservation() / root.totalObservation()) * (c.getSquareSome() - root.getSquareSome());
    }
    bestUtility[0] = "new";
    bestUtility[1] = root.getId();
    utilityValue = utilityValue / (subCategory.size() + 1);
    // For incorporate on sub category
    for (Category c : subCategory) {
        double auxUtilityValue = 0d;
        Category auxCategory = this.createCategory(column, data);
        for (Integer o : c.getObservation()) {
            auxCategory.setObservation(new Integer(o.intValue()));
        }
        auxCategory.setObservation(new Integer(observation));
        this.updateCategory(auxCategory, column, this.getSubMartrix(data, auxCategory.getObservation()));
        auxUtilityValue += ((double) auxCategory.totalObservation() / root.totalObservation()) * (auxCategory.getSquareSome() - root.getSquareSome());
        // For others nodes
        for (Category co : subCategory) {
            if (!co.equals(c)) {
                auxUtilityValue += ((double) co.totalObservation() / root.totalObservation()) * (co.getSquareSome() - root.getSquareSome());
            }
        }
        auxUtilityValue = auxUtilityValue / subCategory.size();
        if (auxUtilityValue > utilityValue) {
            bestUtility[0] = "add";
            bestUtility[1] = c.getId();
            utilityValue = auxUtilityValue;
        }
    }
    // For split categority
    for (Category c : subCategory) {
        if (c.hasSubCategory()) {
            double auxUtilityValue = 0d;
            // Sub Partition
            for (Category cat : c.getSubCategory()) {
                auxUtilityValue += (cat.totalObservation() / (root.totalObservation())) * (cat.getSquareSome() - root.getSquareSome());
            }
            // Partition
            for (Category cat : subCategory) {
                if (!cat.equals(c)) {
                    auxUtilityValue += (1d / root.totalObservation()) * (cat.getSquareSome() - root.getSquareSome());
                }
            }
            auxUtilityValue = auxUtilityValue / (c.getSubCategory().size() + root.getSubCategory().size() - 1);
            if (auxUtilityValue > utilityValue) {
                bestUtility[0] = "split";
                bestUtility[1] = c.getId();
                utilityValue = auxUtilityValue;
            }
        }
    }
    return bestUtility;
}
