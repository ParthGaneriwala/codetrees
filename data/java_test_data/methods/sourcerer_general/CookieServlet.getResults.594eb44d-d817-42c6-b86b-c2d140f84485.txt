private Result[] getResults(String keyword, XMLParser parser) {
    ArrayList<Result> results = new ArrayList<Result>();
    Result[] resultArray = null;
    String indexRequest = "http://" + indexIP + ":" + indexPort + "/?keyword=" + keyword;
    Document doc = null;
    try {
        doc = parser.parseXML(indexRequest);
    } catch (Exception e) {
        e.printStackTrace();
    }
    if (doc != null) {
        NodeList resultNodes = doc.getDocumentElement().getElementsByTagName("result");
        for (int i = 0; i < resultNodes.getLength(); i++) {
            NodeList data = resultNodes.item(i).getChildNodes();
            String url = null;
            double tfIdf = 0;
            double pageRank = 0;
            for (int j = 0; j < data.getLength(); j++) {
                if (data.item(j).getNodeName().startsWith("url")) {
                    url = data.item(j).getTextContent();
                } else if (data.item(j).getNodeName().startsWith("tf-idf")) {
                    tfIdf = Double.parseDouble(data.item(j).getTextContent());
                } else if (data.item(j).getNodeName().startsWith("pagerank")) {
                    pageRank = Double.parseDouble(data.item(j).getTextContent());
                }
            }
            int numVotes = 0;
            if (votecache.get(keyword.trim()) != null) {
                ArrayList<VoteResult> voteResultList = votecache.get(keyword.trim());
                for (int k = 0; k < voteResultList.size(); k++) {
                    try {
                        String cachedURL = URLDecoder.decode(voteResultList.get(k).getURL().trim(), "UTF-8");
                        if (cachedURL.equals(url.trim())) {
                            numVotes = voteResultList.get(k).getNumVotes();
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }
            results.add(new Result(url.trim(), tfIdf, pageRank, numVotes));
        }
    }
    resultArray = results.toArray(new Result[results.size()]);
    Arrays.sort(resultArray);
    return resultArray;
}
