public static void main(String[] args) {
    OptionParser optParser = new OptionParser(Options.class);
    final Options opts = (Options) optParser.parse(args, true);
    Experiment.initialize(opts.config);
    Experiment experiment = Experiment.getInstance();
    FactorTupleDescription desc = experiment.getTupleDescription();
    byte tagIdx = desc.getFactorIndex(opts.tagFactor);
    byte wordIdx = desc.getMainFactorIndex();
    int totalWords = 0;
    int totalCorrect = 0;
    int unkWords = 0;
    int unkCorrect = 0;
    try {
        BufferedReader goldReader = new BufferedReader(new InputStreamReader(new FileInputStream(opts.gold), Charset.forName("UTF-8")));
        BufferedReader testReader = new BufferedReader(new InputStreamReader(opts.test == null ? System.in : new FileInputStream(opts.test), Charset.forName("UTF-8")));
        String goldLine;
        String testLine;
        while (true) {
            testLine = testReader.readLine();
            if (testLine == null)
                break;
            testLine = testLine.trim();
            goldLine = goldReader.readLine();
            if (goldLine == null)
                break;
            goldLine = goldLine.trim();
            ArrayList<FactorTuple> testTags = parseTaggedLine(testLine, tagIdx);
            ArrayList<FactorTuple> goldTags = parseTaggedLine(goldLine, tagIdx);
            assert (testTags.size() == goldTags.size());
            for (int i = 0; i < goldTags.size(); ++i) {
                FactorTuple gold = goldTags.get(i);
                FactorTuple test = testTags.get(i);
                boolean isCorrect = gold.getValue(tagIdx) == test.getValue(tagIdx);
                boolean isUnk = Dictionary.isUnk(gold.getValue(wordIdx));
                ++totalWords;
                if (isCorrect) {
                    ++totalCorrect;
                }
                if (isUnk) {
                    ++unkWords;
                    if (isCorrect) {
                        ++unkCorrect;
                    }
                }
            }
        }
        NumberFormat nf = new DecimalFormat("0.##");
        System.out.printf("Total Tags: %d (%s%% unknown), correct %s%% (%d)\n", totalWords, nf.format(100.0 * unkWords / totalWords), nf.format(100.0 * totalCorrect / totalWords), totalCorrect);
        System.out.printf("Known %d, %s%% correct, Unknown %d, %s%% correct\n", (totalWords - unkWords), nf.format(100.0 * (totalCorrect - unkCorrect) / (totalWords - unkWords)), unkWords, nf.format(100.0 * unkCorrect / unkWords));
    } catch (IOException e) {
    }
}
