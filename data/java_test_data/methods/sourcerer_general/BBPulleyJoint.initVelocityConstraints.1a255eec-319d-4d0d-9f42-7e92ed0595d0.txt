public void initVelocityConstraints(final BBTimeStep step) {
    BBBody b1 = m_bodyA;
    BBBody b2 = m_bodyB;
    BBVec2 r1 = mul(b1.getTransform().R, sub(m_localAnchor1, b1.getLocalCenter()));
    BBVec2 r2 = mul(b2.getTransform().R, sub(m_localAnchor2, b2.getLocalCenter()));
    BBVec2 p1 = add(b1.m_sweep.c, r1);
    BBVec2 p2 = add(b2.m_sweep.c, r2);
    BBVec2 s1 = m_groundAnchor1;
    BBVec2 s2 = m_groundAnchor2;
    // Get the pulley axes.
    m_u1 = sub(p1, s1);
    m_u2 = sub(p2, s2);
    float length1 = m_u1.length();
    float length2 = m_u2.length();
    if (length1 > linearSlop) {
        m_u1.mul(1.0f / length1);
    } else {
        m_u1.setZero();
    }
    if (length2 > linearSlop) {
        m_u2.mul(1.0f / length2);
    } else {
        m_u2.setZero();
    }
    float C = m_finalant - length1 - m_ratio * length2;
    if (C > 0.0f) {
        m_state = e_inactiveLimit;
        m_impulse = 0.0f;
    } else {
        m_state = e_atUpperLimit;
    }
    if (length1 < m_maxLength1) {
        m_limitState1 = e_inactiveLimit;
        m_limitImpulse1 = 0.0f;
    } else {
        m_limitState1 = e_atUpperLimit;
    }
    if (length2 < m_maxLength2) {
        m_limitState2 = e_inactiveLimit;
        m_limitImpulse2 = 0.0f;
    } else {
        m_limitState2 = e_atUpperLimit;
    }
    // Compute effective mass.
    float cr1u1 = cross(r1, m_u1);
    float cr2u2 = cross(r2, m_u2);
    m_limitMass1 = b1.m_invMass + b1.m_invI * cr1u1 * cr1u1;
    m_limitMass2 = b2.m_invMass + b2.m_invI * cr2u2 * cr2u2;
    m_pulleyMass = m_limitMass1 + m_ratio * m_ratio * m_limitMass2;
    assert (m_limitMass1 > FLT_EPSILON);
    assert (m_limitMass2 > FLT_EPSILON);
    assert (m_pulleyMass > FLT_EPSILON);
    m_limitMass1 = 1.0f / m_limitMass1;
    m_limitMass2 = 1.0f / m_limitMass2;
    m_pulleyMass = 1.0f / m_pulleyMass;
    if (step.warmStarting) {
        // Scale impulses to support variable time steps.
        m_impulse *= step.dtRatio;
        m_limitImpulse1 *= step.dtRatio;
        m_limitImpulse2 *= step.dtRatio;
        // Warm starting.
        BBVec2 P1 = mul(-(m_impulse + m_limitImpulse1), m_u1);
        BBVec2 P2 = mul((-m_ratio * m_impulse - m_limitImpulse2), m_u2);
        b1.m_linearVelocity.add(mul(b1.m_invMass, P1));
        b1.m_angularVelocity += b1.m_invI * cross(r1, P1);
        b2.m_linearVelocity.add(mul(b2.m_invMass, P2));
        b2.m_angularVelocity += b2.m_invI * cross(r2, P2);
    } else {
        m_impulse = 0.0f;
        m_limitImpulse1 = 0.0f;
        m_limitImpulse2 = 0.0f;
    }
}
