@SuppressWarnings("all")
public static void main(String[] args) throws Exception {
    // Make a reasonable large test object. Note that this doesn't
    // do anything useful -- it is simply intended to be large, have
    // several levels of references, and be somewhat random. We start
    // with a hashtable and add vectors to it, where each element in
    // the vector is a Date object (initialized to the current time),
    // a semi-random string, and a (circular) reference back to the
    // object itself. In this case the resulting object produces
    // a serialized representation that is approximate 700K.
    HashMap obj = new HashMap();
    for (int i = 0; i < 100; i++) {
        Vector v = new Vector();
        for (int j = 0; j < 100; j++) {
            v.addElement(new Object[] { new Date(), "A random number: " + Math.random(), obj });
        }
        obj.put(new Integer(i), v);
    }
    int iterations = 1000;
    // Make copies of the object using the unoptimized version
    // of the deep copy utility.
    long unoptimizedTime = 0L;
    for (int i = 0; i < iterations; i++) {
        long start = System.nanoTime();
        Object copy = deepCloneSerialization(obj);
        unoptimizedTime += (System.nanoTime() - start);
        // Avoid having GC run while we are timing...
        copy = null;
        System.gc();
    }
    System.out.println("Unoptimized time: " + TimeUnit.MILLISECONDS.convert(unoptimizedTime, TimeUnit.NANOSECONDS));
    // Repeat with the optimized version
    long optimizedTime = 0L;
    for (int i = 0; i < iterations; i++) {
        long start = System.nanoTime();
        Object copy = deepCloneFastSerialization(obj);
        optimizedTime += (System.nanoTime() - start);
        // Avoid having GC run while we are timing...
        copy = null;
        System.gc();
    }
    System.out.println("  Optimized time: " + TimeUnit.MILLISECONDS.convert(optimizedTime, TimeUnit.NANOSECONDS));
    // Repeat with the XML Serialization version
    long optimizedTime2 = 0L;
    for (int i = 0; i < iterations; i++) {
        long start = System.nanoTime();
        Object copy = deepCloneReflection(obj);
        optimizedTime2 += (System.nanoTime() - start);
        // Avoid having GC run while we are timing...
        copy = null;
        System.gc();
    }
    System.out.println(" Optimized time2: " + TimeUnit.MILLISECONDS.convert(optimizedTime2, TimeUnit.NANOSECONDS));
}
