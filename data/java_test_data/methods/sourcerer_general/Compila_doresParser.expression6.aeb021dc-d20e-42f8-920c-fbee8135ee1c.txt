// $ANTLR start "expression6"
public final Compila_doresParser.expression6_return expression6() throws RecognitionException {
    Compila_doresParser.expression6_return retval = new Compila_doresParser.expression6_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token NOT151 = null;
    Token PLUS153 = null;
    Token MINUS155 = null;
    Compila_doresParser.expression7_return expression7150 = null;
    Compila_doresParser.expression7_return expression7152 = null;
    Compila_doresParser.expression7_return expression7154 = null;
    Compila_doresParser.expression7_return expression7156 = null;
    CommonTree NOT151_tree = null;
    CommonTree PLUS153_tree = null;
    CommonTree MINUS155_tree = null;
    RewriteRuleTokenStream stream_PLUS = new RewriteRuleTokenStream(adaptor, "token PLUS");
    RewriteRuleTokenStream stream_NOT = new RewriteRuleTokenStream(adaptor, "token NOT");
    RewriteRuleTokenStream stream_MINUS = new RewriteRuleTokenStream(adaptor, "token MINUS");
    RewriteRuleSubtreeStream stream_expression7 = new RewriteRuleSubtreeStream(adaptor, "rule expression7");
    try {
        // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:237:2: ( expression7 | NOT expression7 -> ^( NOT expression7 ) | PLUS expression7 -> expression7 | MINUS expression7 -> ^( NEG expression7 ) )
        int alt38 = 4;
        switch(input.LA(1)) {
            case TRUE:
            case FALSE:
            case LPAR:
            case ID:
            case STRING:
            case INTEGER:
                {
                    alt38 = 1;
                }
                break;
            case NOT:
                {
                    alt38 = 2;
                }
                break;
            case PLUS:
                {
                    alt38 = 3;
                }
                break;
            case MINUS:
                {
                    alt38 = 4;
                }
                break;
            default:
                NoViableAltException nvae = new NoViableAltException("", 38, 0, input);
                throw nvae;
        }
        switch(alt38) {
            case 1:
                // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:237:4: expression7
                {
                    root_0 = (CommonTree) adaptor.nil();
                    pushFollow(FOLLOW_expression7_in_expression61610);
                    expression7150 = expression7();
                    state._fsp--;
                    adaptor.addChild(root_0, expression7150.getTree());
                }
                break;
            case 2:
                // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:238:4: NOT expression7
                {
                    NOT151 = (Token) match(input, NOT, FOLLOW_NOT_in_expression61615);
                    stream_NOT.add(NOT151);
                    pushFollow(FOLLOW_expression7_in_expression61617);
                    expression7152 = expression7();
                    state._fsp--;
                    stream_expression7.add(expression7152.getTree());
                    // AST REWRITE
                    // elements: expression7, NOT
                    // token labels:
                    // rule labels: retval
                    // token list labels:
                    // rule list labels:
                    // wildcard labels:
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.tree : null);
                    root_0 = (CommonTree) adaptor.nil();
                    // 238:20: -> ^( NOT expression7 )
                    {
                        // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:238:23: ^( NOT expression7 )
                        {
                            CommonTree root_1 = (CommonTree) adaptor.nil();
                            root_1 = (CommonTree) adaptor.becomeRoot(stream_NOT.nextNode(), root_1);
                            adaptor.addChild(root_1, stream_expression7.nextTree());
                            adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;
                }
                break;
            case 3:
                // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:239:4: PLUS expression7
                {
                    PLUS153 = (Token) match(input, PLUS, FOLLOW_PLUS_in_expression61630);
                    stream_PLUS.add(PLUS153);
                    pushFollow(FOLLOW_expression7_in_expression61632);
                    expression7154 = expression7();
                    state._fsp--;
                    stream_expression7.add(expression7154.getTree());
                    // AST REWRITE
                    // elements: expression7
                    // token labels:
                    // rule labels: retval
                    // token list labels:
                    // rule list labels:
                    // wildcard labels:
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.tree : null);
                    root_0 = (CommonTree) adaptor.nil();
                    // 239:21: -> expression7
                    {
                        adaptor.addChild(root_0, stream_expression7.nextTree());
                    }
                    retval.tree = root_0;
                }
                break;
            case 4:
                // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:240:4: MINUS expression7
                {
                    MINUS155 = (Token) match(input, MINUS, FOLLOW_MINUS_in_expression61641);
                    stream_MINUS.add(MINUS155);
                    pushFollow(FOLLOW_expression7_in_expression61643);
                    expression7156 = expression7();
                    state._fsp--;
                    stream_expression7.add(expression7156.getTree());
                    // AST REWRITE
                    // elements: expression7
                    // token labels:
                    // rule labels: retval
                    // token list labels:
                    // rule list labels:
                    // wildcard labels:
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.tree : null);
                    root_0 = (CommonTree) adaptor.nil();
                    // 240:22: -> ^( NEG expression7 )
                    {
                        // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:240:25: ^( NEG expression7 )
                        {
                            CommonTree root_1 = (CommonTree) adaptor.nil();
                            root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(NEG, "NEG"), root_1);
                            adaptor.addChild(root_1, stream_expression7.nextTree());
                            adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;
                }
                break;
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
