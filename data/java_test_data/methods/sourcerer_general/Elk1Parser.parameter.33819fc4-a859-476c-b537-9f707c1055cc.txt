private ParseNode parameter() {
    if (nowReadingsymbol.isTypeKeyword()) {
        TypeNode typeParent = new TypeNode(nowReadingsymbol);
        readToken();
        if (nowReadingsymbol.isTerminal(IdentifierToken.class)) {
            IdentifierNode idChild = new IdentifierNode(nowReadingsymbol);
            typeParent.appendChild(idChild);
            readToken();
            return typeParent;
        } else if (nowReadingsymbol.isOperator(Operator.LINDEXING)) {
            readToken();
            if (nowReadingsymbol.isOperator(Operator.RINDEXING)) {
                // Parameter list
                // number of colons == number of dims  except the last colon
                PunctuationToken colon = PunctuationToken.make(null, ":", PunctuationSymbol.COLON);
                PunctuationSymbolNode colonNode = new PunctuationSymbolNode(new TokenGrammarSymbol(colon));
                // at least one now
                IdentifierNode indexedId;
                typeParent.appendChild(colonNode);
                readToken();
                while (!nowReadingsymbol.isTerminal(IdentifierToken.class)) {
                    // if not Id then must be [
                    if (nowReadingsymbol.isOperator(Operator.LINDEXING)) {
                        // get the next token after [
                        readToken();
                        if (nowReadingsymbol.isOperator(Operator.RINDEXING)) {
                            typeParent.appendChild(colonNode);
                            readToken();
                        } else {
                            error("The array declaration sytax is wrong!" + " at line " + nowReading.getLocation().getLineNumber());
                            return null;
                        }
                    } else {
                        error("The array declaration sytax is wrong!" + " at line " + nowReading.getLocation().getLineNumber());
                        return null;
                    }
                }
                // now nowReadingsymbol must be id
                indexedId = new IdentifierNode(nowReadingsymbol);
                typeParent.appendChild(indexedId);
                typeParent.appendChild(colonNode);
                readToken();
                // int [2][2] id;\
                return typeParent;
            }
        } else {
            error("the parameter format in the routine declaration should be: type id or type [] id");
            return null;
        }
    } else {
        error("the parameter format in the routine declaration should be: type id or type [] id");
        return null;
    }
    return null;
}
