public double[] getWeight(AbstractKernel kernel, int currLabel) {
    double[] pWeight = new double[kernel.D];
    Arrays.fill(pWeight, d_mu);
    double[] nWeight = new double[kernel.D];
    Arrays.fill(nWeight, d_mu);
    double[] alpha = new double[kernel.N];
    double[] bWeight = new double[kernel.D];
    double bestAcc = -1;
    int bestK = 0;
    double p, min1, min2, min, delta, delta_y_i, currAcc;
    byte[] aY = new byte[kernel.N];
    byte y_i;
    int i, k;
    int[] x_i;
    for (i = 0; i < kernel.N; i++) aY[i] = (kernel.a_ys.get(i) == currLabel) ? (byte) 1 : (byte) -1;
    for (k = 1; k <= i_K; k++) {
        for (i = 0; i < kernel.N; i++) {
            // retreive x_i, y_i
            x_i = kernel.a_xs.get(i);
            y_i = aY[i];
            // calculate p
            if (kernel.b_binary)
                p = getScore(pWeight, nWeight, x_i) * y_i;
            else
                p = getScore(pWeight, nWeight, x_i, kernel.a_vs.get(i)) * y_i;
            // calculate delta
            min1 = 2 * d_c - alpha[i];
            min2 = d_eta * ((d_c - alpha[i]) / d_c - p);
            min = Math.min(min1, min2);
            delta = Math.max(min, -alpha[i]);
            delta_y_i = delta * y_i;
            // update weights
            pWeight[0] *= Math.exp(delta_y_i);
            nWeight[0] *= Math.exp(-delta_y_i);
            for (int idx : x_i) {
                pWeight[idx] *= Math.exp(delta_y_i);
                nWeight[idx] *= Math.exp(-delta_y_i);
            }
            // update alpha (boosting factor)
            alpha[i] += delta;
        }
        currAcc = getF1Score(kernel, aY, pWeight, nWeight);
        if (bestAcc < currAcc) {
            setWeight(kernel.D, bWeight, pWeight, nWeight);
            bestAcc = currAcc;
            bestK = k;
        }
        if (currAcc == 1)
            break;
    }
    AbstractKernel.normalize(bWeight);
    StringBuilder build = new StringBuilder();
    build.append("- label = ");
    build.append(currLabel);
    build.append(": k = ");
    build.append(bestK);
    build.append(", acc = ");
    build.append(bestAcc);
    System.out.println(build.toString());
    return (bWeight);
}
