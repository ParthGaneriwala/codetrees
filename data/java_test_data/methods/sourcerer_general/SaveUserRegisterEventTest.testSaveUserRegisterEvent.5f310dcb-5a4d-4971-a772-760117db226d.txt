public void testSaveUserRegisterEvent() throws Exception {
    RegisterBean registerBean = new RegisterBean();
    registerBean.setPassword(String.valueOf(StringUtils.rand(100000, 999999)));
    registerBean.setEncryptedPassword(PasswordHash.encrypt(registerBean.getPassword()));
    // add a new user
    User user = new User();
    user.setGroupId(GROUP_ID);
    user.setDepartmentId(1);
    user.setFirstName("Test User");
    user.setLastName("Test User");
    user.setCompany("xxx");
    user.setEmail("jd-test" + System.currentTimeMillis() + "@concursive.com");
    user.setUsername(user.getEmail());
    user.setPassword(registerBean.getEncryptedPassword());
    user.setEnteredBy(0);
    user.setModifiedBy(0);
    user.setEnabled(true);
    user.setStartPage(1);
    user.setRegistered(true);
    user.insert(db, "127.0.0.1", mockPrefs);
    assertTrue("Unable to add a user..", user.getId() != -1);
    registerBean.setUser(user);
    Project userProfile = ProjectUtils.loadProject(user.getProfileProjectId());
    BusinessProcess thisProcess = (BusinessProcess) processList.get(PROCESS_NAME);
    assertTrue("Process not found...", thisProcess != null);
    context.setPreviousObject(null);
    context.setThisObject(registerBean);
    context.setProcessName(PROCESS_NAME);
    context.setProcess(thisProcess);
    context.setAttribute("user", WikiLink.generateLink(userProfile));
    context.setAttribute("prefs.title", mockPrefs.get("TITLE"));
    workflowManager.execute(context);
    // Now query the database and test to see if a history item was added for the specified test user Id.
    ProjectHistoryList historyList = new ProjectHistoryList();
    historyList.setProjectId(user.getProfileProjectId());
    historyList.setEnteredBy(user.getId());
    historyList.setLinkObject(ProjectHistoryList.SITE_OBJECT);
    historyList.setEventType(ProjectHistoryList.USER_REGISTRATION_EVENT);
    historyList.setLinkItemId(user.getId());
    historyList.buildList(db);
    assertTrue("History event was not recorded!", historyList.size() == 1);
    ProjectHistory history = historyList.get(0);
    assertEquals("Recorded event mismatch", "[[|" + userProfile.getId() + ":profile||Test User Test User]] joined the site", history.getDescription());
    // Delete the history item because the test is done (and any other needed objects)
    history.delete(db);
    // Delete the user record
    user.getProfileProject().delete(db, null);
    int deleteResult = user.delete(db);
    assertTrue("Project wasn't deleted", deleteResult != 0);
    // Try to find the previously deleted user
    UserList userList = new UserList();
    userList.setId(user.getId());
    userList.buildList(db);
    assertTrue("User exists when it shouldn't -- id " + user.getId(), userList.size() == 0);
}
