public void testGetAvailableSeatsCountWithExpiredBooking() throws Exception {
    Calendar cal = Calendar.getInstance();
    cal.add(Calendar.MINUTE, -5);
    Date fiveMinutesEarlier = cal.getTime();
    cal.add(Calendar.MINUTE, -5);
    Date tenMinutesEarlier = cal.getTime();
    cal.add(Calendar.DAY_OF_YEAR, 7);
    Date nextWeek = cal.getTime();
    // populating the database.
    dbHelper.insertShow(1, "show", -1, -1);
    dbHelper.insertPriceStructure(1, "ps");
    dbHelper.insertSeatClass(1, "code", "desription");
    dbHelper.insertPerformance(1, nextWeek, 1, 1);
    dbHelper.insertPriceBand(1, new BigDecimal(1.0), 1, 1);
    // a new booking in the system.
    dbHelper.insertBooking(1, 1, tenMinutesEarlier, fiveMinutesEarlier, new BigDecimal(1.0), -1);
    dbHelper.insertSeat(1, "seat1", -1, -1);
    dbHelper.insertSeat(2, "seat2", 1, -1);
    dbHelper.setRightSeatForSeat(1, 2);
    dbHelper.insertSeat(3, "seat3", 2, -1);
    dbHelper.setRightSeatForSeat(2, 3);
    // now this seat status indicates that the seat is booked with
    // the new booking in the system. the reserved time of the booking has expired
    // thus the seat should be available.
    dbHelper.insertSeatStatus(1, 1, 1, 1);
    dbHelper.insertSeatStatus(1, 2, -1, 1);
    dbHelper.insertSeatStatus(1, 3, -1, 1);
    // creating the domain model.
    Show show = new Show("show");
    show.setId(1);
    PriceStructure priceStructure = new PriceStructure("ps");
    priceStructure.setId(1);
    Performance performance = new Performance(1, show, nextWeek, priceStructure);
    SeatClass seatClass = new SeatClass("code", "description");
    seatClass.setId(1);
    // executing the tested method.
    int count = dao.getAvailableSeatsCount(performance, seatClass);
    // assertions.
    assertEquals("number of available seats", 3, count);
}
