private void saveMIDISequence(Sequence hodgeSequence) {
    if (hodgeSequence == null) {
        updateStatusTxt("No currently recorded MIDI sequence!");
        return;
    }
    OutputStream out = null;
    File midiFile = new File("H" + System.currentTimeMillis() + ".mid");
    updateStatusTxt("Saving " + midiFile.getName() + "...");
    if (IS_APPLET) {
        try {
            Socket sock = new Socket(getCodeBase().getHost(), MIDI_SERV_PORT);
            out = sock.getOutputStream();
            PrintWriter outWriter = new PrintWriter(out, true);
            outWriter.println(MIDIServ.INCOMING_MIDI_STREAM);
            outWriter.println(midiFile.getName());
        } catch (SecurityException e) {
            updateStatusTxt("Augh: " + e);
            return;
        } catch (UnknownHostException e) {
            updateStatusTxt("Augh: " + e);
            return;
        } catch (IOException e) {
            updateStatusTxt("Augh: " + e);
            return;
        }
        if (out == null) {
            updateStatusTxt("Bug?!");
            return;
        }
    // shouldn't occur
    }
    int[] types = MidiSystem.getMidiFileTypes(hodgeSequence);
    if (types.length == 0) {
        updateStatusTxt("Augh, unsupported MIDI type.");
        return;
    }
    int midiType = types[0];
    if (!IS_APPLET) {
        FileDialog FD = new FileDialog(getMainFrame(), "Save Hodge MIDI Sequence", FileDialog.SAVE);
        FD.setVisible(true);
        String filename = FD.getFile();
        if (filename != null) {
            midiFile = new File(FD.getDirectory() + FS + filename + ".mid");
        }
    }
    if (midiFile != null) {
        try {
            if (IS_APPLET) {
                MidiSystem.write(hodgeSequence, midiType, out);
                out.close();
            } else
                MidiSystem.write(hodgeSequence, midiType, midiFile);
            updateStatusTxt("Saved: " + midiFile.getName());
        } catch (IOException augh) {
            updateStatusTxt("Oops: " + augh);
        }
    }
}
