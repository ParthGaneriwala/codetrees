public static List<KitTimesBean> Report4(String field, String type) {
    List<KitTimesBean> ktbList = new ArrayList<KitTimesBean>();
    Map<Long, MsHistory> map = MapResultService.getFullMsHistoryMap();
    List<Map.Entry<Long, MsHistory>> infoIds = new ArrayList<Map.Entry<Long, MsHistory>>(map.entrySet());
    // 排序
    Collections.sort(infoIds, new Comparator<Map.Entry<Long, MsHistory>>() {

        public int compare(Map.Entry<Long, MsHistory> o1, Map.Entry<Long, MsHistory> o2) {
            return (int) (o1.getKey() - o2.getKey());
        }
    });
    Map<String, Integer> KitMap = new HashMap<String, Integer>();
    int dCount = infoIds.size();
    for (int i = 1000; i < dCount; i++) {
        Map.Entry<Long, MsHistory> v = infoIds.get(i);
        Map.Entry<Long, MsHistory> o = infoIds.get(i - 1);
        List<String> vList = v.getValue().getKits();
        List<String> oList = o.getValue().getKits();
        boolean isKit = false;
        for (String vCode : vList) {
            if (oList.contains(vCode)) {
                isKit = true;
                break;
            }
        }
        if (isKit) {
            int kitCount = 1;
            if (KitMap.containsKey(String.valueOf(1))) {
                kitCount = KitMap.remove(String.valueOf(1)) + 1;
            }
            KitMap.put(String.valueOf(1), kitCount);
        }
    }
    int nkt = KitMap.get(String.valueOf(1));
    double tkt = (double) (nkt) / dCount;
    ktbList.add(new KitTimesBean(1, nkt, tkt));
    if (field != null && "nonKitTimes".toLowerCase().equals(field.toLowerCase())) {
        if ("desc".toLowerCase().equals(type.toLowerCase())) {
            Collections.sort(ktbList, new Comparator<KitTimesBean>() {

                public int compare(KitTimesBean o1, KitTimesBean o2) {
                    return (int) (o2.getNonKitTimes() - o1.getNonKitTimes());
                }
            });
        } else {
            Collections.sort(ktbList, new Comparator<KitTimesBean>() {

                public int compare(KitTimesBean o1, KitTimesBean o2) {
                    return (int) (o1.getNonKitTimes() - o2.getNonKitTimes());
                }
            });
        }
    } else if (field != null && "totalKitTimes".toLowerCase().equals(field.toLowerCase())) {
        if ("desc".toLowerCase().equals(type.toLowerCase())) {
            Collections.sort(ktbList, new Comparator<KitTimesBean>() {

                public int compare(KitTimesBean o1, KitTimesBean o2) {
                    return (int) (o2.getTotalKitTimes() * 1000 - o1.getTotalKitTimes() * 1000);
                }
            });
        } else {
            Collections.sort(ktbList, new Comparator<KitTimesBean>() {

                public int compare(KitTimesBean o1, KitTimesBean o2) {
                    return (int) (o1.getTotalKitTimes() * 1000 - o2.getTotalKitTimes() * 1000);
                }
            });
        }
    }
    return ktbList;
}
