public BigNumber add(BigNumber bn) {
    boolean negative = false;
    if (this.negative == bn.negative) {
        negative = this.negative;
    } else {
        BigNumber b1 = this.negative ? bn : this;
        BigNumber b2 = this.negative ? this : bn;
        return b1.sub(abs(b2));
    }
    BigNumber b1 = abs(this);
    BigNumber b2 = abs(bn);
    Stack<Digit> stack = new Stack<Digit>();
    int i = b1.getNumberOfDigits() - 1, j = b2.getNumberOfDigits() - 1;
    int carry = 0;
    for (; i >= 0 && j >= 0; i--, j--) {
        Digit id = b1.digits.get(i);
        Digit jd = b2.digits.get(j);
        int sum = id.getCurrent() + jd.getCurrent() + carry;
        if (sum >= radix) {
            carry = 1;
        } else {
            carry = 0;
        }
        sum = sum % radix;
        Digit cd = new Digit(new Range(radix - 1));
        cd.setValue(sum);
        stack.push(cd);
    }
    if (i >= 0) {
        while (i >= 0) {
            Digit d = b1.digits.get(i);
            int sum = d.getCurrent() + carry;
            if (sum >= radix) {
                carry = 1;
            } else {
                carry = 0;
            }
            sum = sum % radix;
            Digit cd = new Digit(new Range(radix - 1));
            cd.setValue(sum);
            stack.push(cd);
            i--;
        }
    }
    if (j >= 0) {
        while (j >= 0) {
            Digit d = b2.digits.get(j);
            int sum = d.getCurrent() + carry;
            if (sum >= radix) {
                carry = 1;
            } else {
                carry = 0;
            }
            sum = sum % radix;
            Digit cd = new Digit(new Range(radix - 1));
            cd.setValue(sum);
            stack.push(cd);
            j--;
        }
    }
    if (carry != 0) {
        Digit d = new Digit(new Range(radix - 1));
        d.setValue(carry);
        stack.push(d);
    }
    BigNumber result = new BigNumber();
    while (!stack.isEmpty()) {
        result.digits.add(stack.pop());
    }
    result.negative = negative;
    BigNumber zero = new BigNumber("0");
    if (abs(result).eq(zero)) {
        result.negative = false;
    }
    return result;
}
