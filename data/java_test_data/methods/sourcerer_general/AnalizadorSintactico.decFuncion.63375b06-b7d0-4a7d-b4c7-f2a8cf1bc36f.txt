public void decFuncion() throws CompiladorException {
    reconocer("FUNCION");
    String lex = tok.getCadena();
    String ttok = tok.getTipo();
    /**
     * RESTRICCIONES
     * Ya existe ese id en la TS.
     */
    if (this.estaIDEnPila(lex) != null) {
        throw new CompiladorException(Errores.dameError("IDENEXISTE", tok.getLinea(), tok.getCadena()));
    }
    reconocerIden();
    reconocer("(");
    reconocer(")");
    if (tok.getCadena().toUpperCase().equals("DEVUELVE")) {
        reconocer("DEVUELVE");
        Tipo t = tipo();
        if (t.getNombre().equals("ARRAY") || t.getNombre().equals("PUNTERO") || t.getNombre().equals("REGISTRO")) {
            throw new CompiladorException(Errores.dameError("TIPODEV", tok.getLinea(), null));
        }
        Funcion f = new Funcion(t);
        nivel++;
        ts.inserta(lex, ttok, "FUNC", etiqueta + 1, nivel, false, f);
        pilaTS.push(new TablaSimbolos());
        ts = pilaTS.peek();
        ts.inserta(lex, ttok, "VAR", -t.getTam(), nivel, false, t);
        int etParcheo = etiqueta;
        instr.add(new Instruccion("ir-a", null));
        etiqueta++;
        instr.add(new Instruccion("incrementa", 2));
        etiqueta++;
        int dirVuelta = Dir;
        Dir = 2;
        insComp();
        if (nivel > nivelMaximo) {
            nivelMaximo = nivel;
        }
        nivel--;
        Dir = dirVuelta;
        pilaTS.pop();
        ts = pilaTS.peek();
        instr.add(new Instruccion("retorno", ts.getNivel(lex)));
        etiqueta++;
        parchea(etParcheo, etiqueta);
    } else {
        throw new CompiladorException(Errores.dameError("DECINCOMPLETA", tok.getLinea(), null));
    }
}
