public static List<KitTimesBean> Report3(int lastTimes, int multiple, String field, String type) {
    List<KitTimesBean> ktbList = new ArrayList<KitTimesBean>();
    Map<Long, MsHistory> map = MapResultService.getFullMsHistoryMap();
    List<Map.Entry<Long, MsHistory>> infoIds = new ArrayList<Map.Entry<Long, MsHistory>>(map.entrySet());
    // 排序
    Collections.sort(infoIds, new Comparator<Map.Entry<Long, MsHistory>>() {

        public int compare(Map.Entry<Long, MsHistory> o1, Map.Entry<Long, MsHistory> o2) {
            return (int) (o1.getKey() - o2.getKey());
        }
    });
    Map<String, Integer> KitMap = new HashMap<String, Integer>();
    int dCount = infoIds.size();
    for (int i = 0; i < lastTimes; i++) {
        int tCount = dCount - lastTimes + i;
        List<Map.Entry<Long, MsHistory>> tempInfoIds = infoIds.subList(0, tCount);
        List<String> CodeList = NoKitTimes(tempInfoIds);
        // Map.Entry<Long, String> v2 =
        // tempInfoIds.get(tempInfoIds.size()-1);
        Map.Entry<Long, MsHistory> v = infoIds.get(tCount);
        for (int j = 1; j <= 49; j++) {
            List<String> CCodeList = CodeList.subList(0, j);
            // List<String> vList = v.getValue().getKits();
            boolean isKit = false;
            /**
             * for(String vCode :vList) { if (CCodeList.contains(vCode)) {
             * isKit =true; break; } }
             */
            if (CCodeList.contains(v.getValue().getS1())) {
                isKit = true;
            }
            if (isKit) {
                int kitCount = 1;
                if (KitMap.containsKey(String.valueOf(j))) {
                    kitCount = KitMap.remove(String.valueOf(j)) + 1;
                }
                KitMap.put(String.valueOf(j), kitCount);
            }
        }
    }
    for (int j = 1; j <= 49; j++) {
        if (KitMap.containsKey(String.valueOf(j))) {
            int nkt = KitMap.get(String.valueOf(j));
            double tkt = ((double) (nkt * multiple - lastTimes * j)) / (lastTimes * j);
            ktbList.add(new KitTimesBean(j, nkt, tkt));
        }
    }
    if (field != null && "nonKitTimes".toLowerCase().equals(field.toLowerCase())) {
        if ("desc".toLowerCase().equals(type.toLowerCase())) {
            Collections.sort(ktbList, new Comparator<KitTimesBean>() {

                public int compare(KitTimesBean o1, KitTimesBean o2) {
                    return (int) (o2.getNonKitTimes() - o1.getNonKitTimes());
                }
            });
        } else {
            Collections.sort(ktbList, new Comparator<KitTimesBean>() {

                public int compare(KitTimesBean o1, KitTimesBean o2) {
                    return (int) (o1.getNonKitTimes() - o2.getNonKitTimes());
                }
            });
        }
    } else if (field != null && "totalKitTimes".toLowerCase().equals(field.toLowerCase())) {
        if ("desc".toLowerCase().equals(type.toLowerCase())) {
            Collections.sort(ktbList, new Comparator<KitTimesBean>() {

                public int compare(KitTimesBean o1, KitTimesBean o2) {
                    return (int) (o2.getTotalKitTimes() * 1000 - o1.getTotalKitTimes() * 1000);
                }
            });
        } else {
            Collections.sort(ktbList, new Comparator<KitTimesBean>() {

                public int compare(KitTimesBean o1, KitTimesBean o2) {
                    return (int) (o1.getTotalKitTimes() * 1000 - o2.getTotalKitTimes() * 1000);
                }
            });
        }
    }
    return ktbList;
}
