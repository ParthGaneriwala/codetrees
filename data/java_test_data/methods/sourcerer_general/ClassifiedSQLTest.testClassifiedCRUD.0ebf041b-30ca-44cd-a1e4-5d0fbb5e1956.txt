public void testClassifiedCRUD() throws SQLException {
    // Insert project so that it can be referred to by the the classified
    Project project = new Project();
    project.setTitle("Project SQL Test");
    project.setShortDescription("Project SQL Test ClassifiedSQLTest");
    project.setRequestDate(new Timestamp(System.currentTimeMillis()));
    project.setEstimatedCloseDate((Timestamp) null);
    project.setRequestedBy("Project SQL Test Requested By");
    project.setRequestedByDept("Project SQL Test Requested By Department");
    project.setBudgetCurrency("USD");
    project.setBudget("10000.75");
    project.setGroupId(GROUP_ID);
    project.setEnteredBy(USER_ID);
    project.setModifiedBy(USER_ID);
    assertNotNull(project);
    boolean projectResult = project.insert(db);
    assertTrue("Project was not inserted", projectResult);
    assertTrue("Inserted project did not have an id", project.getId() > -1);
    // Insert classified
    Classified classified = new Classified();
    classified.setTitle("Classified SQL Test");
    classified.setDescription("Classified SQL Test Description");
    classified.setProjectId(project.getId());
    classified.setEnabled(true);
    classified.setEnteredBy(USER_ID);
    classified.setModifiedBy(USER_ID);
    assertNotNull(classified);
    boolean result = classified.insert(db);
    assertTrue("Classified was not inserted", result);
    assertTrue("Inserted classified did not have an id", classified.getId() > -1);
    // Update classified
    // Try updating without reloading the classified
    assertNull(classified.getModified());
    assertTrue("Classified to update does not have an id", classified.getId() > -1);
    int updateCount = classified.update(db);
    assertTrue("The modified field checks for concurrent updates so the modified field must match the load value", updateCount == 0);
    // Reload the classified, then update
    assertTrue(classified.getId() > -1);
    classified = new Classified(db, classified.getId());
    classified.setTitle("Classified SQL Test Updated Classified");
    updateCount = classified.update(db);
    assertTrue("The classified was not updated by the database", updateCount == 1);
    // Find the previously set classified
    int classifiedId = classified.getId();
    classified = null;
    ClassifiedList classifiedList = new ClassifiedList();
    classifiedList.setEnabled(Constants.TRUE);
    classifiedList.buildList(db);
    assertTrue(classifiedList.size() > 0);
    Iterator i = classifiedList.iterator();
    while (i.hasNext()) {
        Classified thisClassified = (Classified) i.next();
        if (thisClassified.getId() == classifiedId) {
            classified = thisClassified;
            break;
        }
    }
    assertNotNull(classified);
    // Delete the classified
    assertNotNull(classified);
    classified.delete(db, (String) null);
    classifiedId = classified.getId();
    classified = null;
    // Try to find the previously deleted classified
    classifiedList = new ClassifiedList();
    classifiedList.setClassifiedId(classifiedId);
    classifiedList.buildList(db);
    Iterator ij = classifiedList.iterator();
    while (ij.hasNext()) {
        Classified thisClassified = (Classified) ij.next();
        if (thisClassified.getId() == classifiedId) {
            assertNull("Classified exists when it shouldn't", thisClassified);
        }
    }
    // Delete test project
    project.delete(db, (String) null);
}
