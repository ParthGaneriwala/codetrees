@Test
public void testRectangleContainsBigger() {
    Rectangle outer = new Rectangle(2, 2, 5, 5);
    // 4 Corners
    Rectangle inner = new Rectangle(2, 2, 2, 2);
    Assert.assertTrue(inner.adjoins(outer));
    Assert.assertTrue(inner.adjoinsEclusive(outer));
    inner = new Rectangle(2, 5, 2, 2);
    Assert.assertTrue(inner.adjoins(outer));
    Assert.assertTrue(inner.adjoinsEclusive(outer));
    inner = new Rectangle(5, 5, 2, 2);
    Assert.assertTrue(inner.adjoins(outer));
    Assert.assertTrue(inner.adjoinsEclusive(outer));
    inner = new Rectangle(5, 2, 2, 2);
    Assert.assertTrue(inner.adjoins(outer));
    Assert.assertTrue(inner.adjoinsEclusive(outer));
    // 4 Edges
    inner = new Rectangle(2, 4, 2, 2);
    Assert.assertTrue(inner.adjoins(outer));
    Assert.assertTrue(inner.adjoinsEclusive(outer));
    inner = new Rectangle(4, 5, 2, 2);
    Assert.assertTrue(inner.adjoins(outer));
    Assert.assertTrue(inner.adjoinsEclusive(outer));
    inner = new Rectangle(5, 4, 2, 2);
    Assert.assertTrue(inner.adjoins(outer));
    Assert.assertTrue(inner.adjoinsEclusive(outer));
    inner = new Rectangle(4, 2, 2, 2);
    Assert.assertTrue(inner.adjoins(outer));
    Assert.assertTrue(inner.adjoinsEclusive(outer));
    // Middle
    inner = new Rectangle(3, 3, 2, 2);
    Assert.assertTrue(outer.adjoins(inner));
    Assert.assertTrue(outer.adjoinsEclusive(inner));
}
