int insertColor(int color, int leaf_level) {
    int leafCount = 0;
    int nextLev = this.level + 1;
    ++count;
    sumR += (color & 0xFF0000) >> 16;
    sumG += (color & 0x00FF00) >> 8;
    sumB += (color & 0x0000FF);
    // if not at a leaf, and less than leaf level recurse.
    if (// && (level < leaf_level))
    !leaf) {
        // extract colour bit to decide which color branch for this color
        int rb = (color & redMask);
        int gb = (color & greenMask);
        int bb = (color & blueMask);
        if (rb == 0) {
            if (gb == 0) {
                if (bb == 0) {
                    if (r0g0b0 == null) {
                        r0g0b0 = oc.getONode(oc, nextLev);
                        if (nextLev >= leaf_level) {
                            r0g0b0.leaf = true;
                            ++leafCount;
                        }
                        ++childCount;
                    }
                    leafCount += r0g0b0.insertColor(color, leaf_level);
                } else // blue bit 1
                {
                    if (r0g0b1 == null) {
                        r0g0b1 = oc.getONode(oc, nextLev);
                        if (nextLev >= leaf_level) {
                            r0g0b1.leaf = true;
                            ++leafCount;
                        }
                        ++childCount;
                    }
                    leafCount += r0g0b1.insertColor(color, leaf_level);
                }
            } else // green bit 1
            {
                if (bb == 0) {
                    if (r0g1b0 == null) {
                        r0g1b0 = oc.getONode(oc, nextLev);
                        if (nextLev >= leaf_level) {
                            r0g1b0.leaf = true;
                            ++leafCount;
                        }
                        ++childCount;
                    }
                    leafCount += r0g1b0.insertColor(color, leaf_level);
                } else // blue bit 1
                {
                    if (r0g1b1 == null) {
                        r0g1b1 = oc.getONode(oc, nextLev);
                        if (nextLev >= leaf_level) {
                            r0g1b1.leaf = true;
                            ++leafCount;
                        }
                        ++childCount;
                    }
                    leafCount += r0g1b1.insertColor(color, leaf_level);
                }
            }
        } else // red bit 1
        {
            if (gb == 0) {
                if (bb == 0) {
                    if (r1g0b0 == null) {
                        r1g0b0 = oc.getONode(oc, nextLev);
                        if (nextLev >= leaf_level) {
                            r1g0b0.leaf = true;
                            ++leafCount;
                        }
                        ++childCount;
                    }
                    leafCount += r1g0b0.insertColor(color, leaf_level);
                } else // blue bit 1
                {
                    if (r1g0b1 == null) {
                        r1g0b1 = oc.getONode(oc, nextLev);
                        if (nextLev >= leaf_level) {
                            r1g0b1.leaf = true;
                            ++leafCount;
                        }
                        ++childCount;
                    }
                    leafCount += r1g0b1.insertColor(color, leaf_level);
                }
            } else // green bit 1
            {
                if (bb == 0) {
                    if (r1g1b0 == null) {
                        r1g1b0 = oc.getONode(oc, nextLev);
                        if (nextLev >= leaf_level) {
                            r1g1b0.leaf = true;
                            ++leafCount;
                        }
                        ++childCount;
                    }
                    leafCount += r1g1b0.insertColor(color, leaf_level);
                } else // blue bit 1
                {
                    if (r1g1b1 == null) {
                        r1g1b1 = oc.getONode(oc, nextLev);
                        if (nextLev >= leaf_level) {
                            r1g1b1.leaf = true;
                            ++leafCount;
                        }
                        ++childCount;
                    }
                    leafCount += r1g1b1.insertColor(color, leaf_level);
                }
            }
        }
        if (childCount > 1 && !marked)
            // mark this node as reducible
            oc.markReducible(this);
    }
    return leafCount;
}
