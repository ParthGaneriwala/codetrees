// GEN-LAST:event_btnCustomerActionPerformed
private void btnPayActionPerformed(java.awt.event.ActionEvent evt) {
    // GEN-FIRST:event_btnPayActionPerformed
    paymentdialog.setPrintSelected(true);
    if (paymentdialog.showDialog(customerext.getCurdebt(), null)) {
        // Save the ticket
        TicketInfo ticket = new TicketInfo();
        ticket.setTicketType(TicketInfo.RECEIPT_PAYMENT);
        List<PaymentInfo> payments = paymentdialog.getSelectedPayments();
        double total = 0.0;
        for (PaymentInfo p : payments) {
            total += p.getTotal();
        }
        payments.add(new PaymentInfoTicket(-total, "debtpaid"));
        ticket.setPayments(payments);
        ticket.setUser(app.getAppUserView().getUser().getUserInfo());
        ticket.setActiveCash(app.getActiveCashIndex());
        ticket.setDate(new Date());
        ticket.setCustomer(customerext);
        try {
            dlsales.saveTicket(ticket, app.getInventoryLocation());
        } catch (BasicException eData) {
            MessageInf msg = new MessageInf(MessageInf.SGN_NOTICE, AppLocal.getIntString("message.nosaveticket"), eData);
            msg.show(this);
        }
        // reload customer
        CustomerInfoExt c;
        try {
            c = dlsales.loadCustomerExt(customerext.getId());
            if (c == null) {
                MessageInf msg = new MessageInf(MessageInf.SGN_WARNING, AppLocal.getIntString("message.cannotfindcustomer"));
                msg.show(this);
            } else {
                editCustomer(c);
            }
        } catch (BasicException ex) {
            c = null;
            MessageInf msg = new MessageInf(MessageInf.SGN_WARNING, AppLocal.getIntString("message.cannotfindcustomer"), ex);
            msg.show(this);
        }
        printTicket(paymentdialog.isPrintSelected() ? "Printer.CustomerPaid" : "Printer.CustomerPaid2", ticket, c);
        editorcard.reset();
        editorcard.activate();
    }
}
