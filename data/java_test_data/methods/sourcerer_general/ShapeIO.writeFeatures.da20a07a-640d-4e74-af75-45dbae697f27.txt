public void writeFeatures(Collection<Feature> features, String featureTypeString, URL url) throws IOException {
    SimpleFeatureType featureType;
    try {
        featureType = DataUtilities.createType("feature", featureTypeString);
    } catch (SchemaException e) {
        LOG.error("could not create feature type: " + e, e);
        return;
    }
    DataStoreFactorySpi dataStoreFactory = new ShapefileDataStoreFactory();
    Map<String, Serializable> params = new HashMap<String, Serializable>();
    params.put("url", url);
    // params.put("create spatial index", Boolean.TRUE);
    ShapefileDataStore newDataStore = (ShapefileDataStore) dataStoreFactory.createNewDataStore(params);
    newDataStore.createSchema(featureType);
    // newDataStore.forceSchemaCRS(DefaultGeographicCRS.WGS84);
    Transaction transaction = new DefaultTransaction("create");
    String typeName = newDataStore.getTypeNames()[0];
    FeatureStore<SimpleFeatureType, SimpleFeature> featureStore = (FeatureStore<SimpleFeatureType, SimpleFeature>) newDataStore.getFeatureSource(typeName);
    featureStore.setTransaction(transaction);
    try {
        FeatureCollection collection = FeatureCollections.newCollection();
        for (Feature feature : features) {
            SimpleFeature simpleFeature = feature.getAsSimpleFeature();
            collection.add(simpleFeature);
        }
        featureStore.addFeatures(collection);
        transaction.commit();
        LOG.info("written features to " + url);
    } catch (Exception e) {
        LOG.error(e, e);
        transaction.rollback();
    } finally {
        transaction.close();
    }
}
