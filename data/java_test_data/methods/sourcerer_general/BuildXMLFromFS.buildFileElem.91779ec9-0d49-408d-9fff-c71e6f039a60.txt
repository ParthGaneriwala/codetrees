private Element buildFileElem(File file) {
    Element fileElem = null;
    boolean blnAddFile = true;
    String strFileName = file.getName();
    Date dateModif = new Date(file.lastModified());
    String strDateModif = dateFormat.format(dateModif);
    g_logger.enterLog(strIndent + " File " + strFileName);
    if (datFilterModifDate != null) {
        try {
            Date d2 = dateFormat.parse(strDateModif);
            if ((d2.equals(datFilterModifDate)) || (d2.after(datFilterModifDate))) {
                blnAddFile = true;
            } else {
                blnAddFile = false;
                g_logger.enterLog(strIndent + "  older than filter date : do not treat");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    if (blnAddFile) {
        fileElem = new Element(CstImportXML.FILE_ELEM);
        Attribute fileNameAttr = new Attribute(CstImportXML.ELEM_ATTR_NAME, strFileName);
        fileElem.setAttribute(fileNameAttr);
        // File full path
        Element fileElemFullPath = new Element(CstImportXML.FILE_ELEM_FULLPATH);
        fileElemFullPath.setText(file.getPath());
        fileElem.addContent(fileElemFullPath);
        // File type
        Element fileElemType = new Element(CstImportXML.FILE_ELEM_TYPE);
        int dotPos = strFileName.lastIndexOf(".");
        String extension = "";
        if (dotPos > 0)
            extension = strFileName.substring(dotPos + 1);
        fileElemType.setText(extension);
        fileElem.addContent(fileElemType);
        // File modification date
        Element mDateElem = new Element(CstImportXML.MODIFY_DATE_ELEM);
        mDateElem.setText(strDateModif);
        fileElem.addContent(mDateElem);
        // File migration date
        Element migrDateElem = new Element(CstImportXML.MIGRATION_DATE_ELEM);
        migrDateElem.setText(strDateTemplate);
        fileElem.addContent(migrDateElem);
        // File migration status
        Element migrStatusElem = new Element(CstImportXML.MIGRATION_STATUS_ELEM);
        migrStatusElem.setText(CstImportXML.MIGRATION_STATUS_VALUE_FAILED);
        fileElem.addContent(migrStatusElem);
        // File modification date
        /*
            Element migrDateElem = new Element(CstImportXML.MIGRATION_DATE_ELEM);
            migrDateElem.setText("");
            fileElem.addContent(migrDateElem);
            */
        /**
         * ************************************************
         */
        /* Add logic here to set document metadata          */
        /*													*/
        /*													*/
        /*													*/
        /**
         * ************************************************
         */
        ArrayList tmpAttributes = new ArrayList();
        // Object to pass as reference to get object type of matching rule
        Object[] objStrRepObjType = new Object[1];
        // Check if some rule match the file name
        boolean blnRulesMatch = false;
        if (theRules != null) {
            blnRulesMatch = theRules.applyRules(strFileName, objStrRepObjType, tmpAttributes);
            if (blnRulesMatch) {
                g_logger.enterLog(strIndent + "  rule successfully applied");
            } else {
                g_logger.enterLog(strIndent + "  no rule match");
            }
        }
        // ***************
        // Create the repository type object
        // ***************
        Element typeElem = new Element(CstImportXML.DM_TYPE_ELEM);
        // default type
        String strRepType = strDefaultRepObjectType;
        if ((theRules != null) && blnRulesMatch) {
            if ((objStrRepObjType[0] != null) && (objStrRepObjType[0].toString().length() > 0)) {
                strRepType = objStrRepObjType[0].toString();
            }
        }
        typeElem.setText(strRepType);
        fileElem.addContent(typeElem);
        // ***************
        // Add a default value for object name : will be overloaded if necessary by further rule
        // ***************
        Element dmFileAttrElem = new Element(CstImportXML.DM_FILE_ATTR_ELEM);
        // Attribute dmFileAttrNameElem    = new Attribute(CstImportXML.ELEM_ATTR_NAME, "object_name");
        Attribute dmFileAttrNameElem = new Attribute(CstImportXML.ELEM_ATTR_NAME, "name");
        Attribute dmFileAttrValueElem = new Attribute(CstImportXML.ELEM_ATTR_VALUE, strFileName);
        Attribute dmFileAttrTypeElem = new Attribute(CstImportXML.ELEM_ATTR_TYPE, "string");
        dmFileAttrElem.setAttribute(dmFileAttrNameElem);
        dmFileAttrElem.setAttribute(dmFileAttrValueElem);
        dmFileAttrElem.setAttribute(dmFileAttrTypeElem);
        fileElem.addContent(dmFileAttrElem);
        // ***************
        if ((theRules != null) && blnRulesMatch) {
            if (tmpAttributes != null) {
                g_logger.enterLog(strIndent + "   adding attributes");
                // TODO : - manage repeating attributes
                for (Iterator it = tmpAttributes.iterator(); it.hasNext(); ) {
                    ObjectAttribute curObjectAttribute = (ObjectAttribute) it.next();
                    // System.out.println( "  attribute : " + curObjectAttribute.getStrName() + " " + curObjectAttribute.getStrType() + " " + curObjectAttribute.isRepeating());
                    ArrayList listValue = curObjectAttribute.getListValue();
                    if (listValue != null) {
                        // System.out.println( "   value(s) :");
                        for (Iterator itTmp = listValue.iterator(); itTmp.hasNext(); ) {
                            Element dmFileAttrElem2;
                            if (curObjectAttribute.isRepeating()) {
                                dmFileAttrElem2 = new Element(CstImportXML.DM_REPEAT_ATTR_ELEM);
                            } else {
                                dmFileAttrElem2 = new Element(CstImportXML.DM_FILE_ATTR_ELEM);
                            }
                            String strAttrName = curObjectAttribute.getStrName();
                            String strAttrType = curObjectAttribute.getStrType();
                            // Enable line below if data mapping done here and not in rules
                            // String strAttrMappedValue = theMappings.getMapping(strRepType, strAttrName, itTmp.next().toString());
                            String strAttrMappedValue = itTmp.next().toString();
                            Attribute dmFileAttrNameElem2 = new Attribute(CstImportXML.ELEM_ATTR_NAME, strAttrName);
                            Attribute dmFileAttrTypeElem2 = new Attribute(CstImportXML.ELEM_ATTR_TYPE, strAttrType);
                            Attribute dmFileAttrValueElem2 = new Attribute(CstImportXML.ELEM_ATTR_VALUE, strAttrMappedValue);
                            dmFileAttrElem2.setAttribute(dmFileAttrNameElem2);
                            dmFileAttrElem2.setAttribute(dmFileAttrValueElem2);
                            dmFileAttrElem2.setAttribute(dmFileAttrTypeElem2);
                            fileElem.addContent(dmFileAttrElem2);
                        }
                    }
                }
            }
        } else {
        // System.out.println(" NO rule is matching for " + strFileName);
        }
    }
    return fileElem;
}
