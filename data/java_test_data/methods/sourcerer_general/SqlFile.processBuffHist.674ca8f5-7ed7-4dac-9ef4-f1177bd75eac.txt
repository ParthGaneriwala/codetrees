private void processBuffHist(Token token) throws BadSpecial, SQLException, SqlToolError {
    if (token.val.length() < 1) {
        throw new BadSpecial(SqltoolRB.bufhist_unspecified.getString());
    }
    // First handle the simple cases where user may not specify a
    // command number.
    char commandChar = token.val.charAt(0);
    String other = token.val.substring(1);
    if (other.trim().length() == 0) {
        other = null;
    }
    switch(commandChar) {
        case 'l':
        case 'b':
            enforce1charBH(other, 'l');
            if (buffer == null) {
                stdprintln(nobufferYetString);
            } else {
                stdprintln(SqltoolRB.editbuffer_contents.getString(buffer.reconstitute()));
            }
            return;
        case 'h':
            enforce1charBH(other, 'h');
            showHistory();
            return;
        case '?':
            stdprintln(SqltoolRB.buffer_help.getString());
            return;
    }
    Integer histNum = null;
    Matcher hm = slashHistoryPattern.matcher(token.val);
    if (hm.matches()) {
        histNum = historySearch(hm.group(1));
        if (histNum == null) {
            stdprintln(SqltoolRB.substitution_nomatch.getString());
            return;
        }
    } else {
        hm = historyPattern.matcher(token.val);
        if (!hm.matches()) {
            throw new BadSpecial(SqltoolRB.edit_malformat.getString());
        // Empirically, I find that this pattern always captures two
        // groups.  Unfortunately, there's no way to guarantee that :( .
        }
        histNum = ((hm.group(1) == null || hm.group(1).length() < 1) ? null : Integer.valueOf(hm.group(1)));
    }
    if (hm.groupCount() != 2) {
        throw new BadSpecial(SqltoolRB.edit_malformat.getString());
    // Empirically, I find that this pattern always captures two
    // groups.  Unfortunately, there's no way to guarantee that :( .
    }
    commandChar = ((hm.group(2) == null || hm.group(2).length() < 1) ? '\0' : hm.group(2).charAt(0));
    other = ((commandChar == '\0') ? null : hm.group(2).substring(1));
    if (other != null && other.length() < 1)
        other = null;
    Token targetCommand = ((histNum == null) ? null : commandFromHistory(histNum.intValue()));
    switch(commandChar) {
        case // Special token set above.  Just history recall.
        '\0':
            setBuf(targetCommand);
            stdprintln(SqltoolRB.buffer_restored.getString(buffer.reconstitute()));
            return;
        case ';':
            enforce1charBH(other, ';');
            if (targetCommand != null)
                setBuf(targetCommand);
            if (buffer == null)
                throw new BadSpecial(SqltoolRB.nobuffer_yet.getString());
            stdprintln(SqltoolRB.buffer_executing.getString(buffer.reconstitute()));
            preempt = true;
            return;
        case 'a':
            if (targetCommand == null)
                targetCommand = buffer;
            if (targetCommand == null)
                throw new BadSpecial(SqltoolRB.nobuffer_yet.getString());
            boolean doExec = false;
            if (other != null) {
                if (other.trim().charAt(other.trim().length() - 1) == ';') {
                    other = other.substring(0, other.lastIndexOf(';'));
                    if (other.trim().length() < 1)
                        throw new BadSpecial(SqltoolRB.append_empty.getString());
                    doExec = true;
                }
            }
            Token newToken = new Token(targetCommand.type, targetCommand.val, targetCommand.line);
            if (other != null)
                newToken.val += other;
            setBuf(newToken);
            if (doExec) {
                stdprintln(SqltoolRB.buffer_executing.getString(buffer.reconstitute()));
                preempt = true;
                return;
            }
            if (interactive)
                scanner.setMagicPrefix(newToken.reconstitute());
            switch(newToken.type) {
                case Token.SQL_TYPE:
                    scanner.setRequestedState(SqlFileScanner.SQL);
                    break;
                case Token.SPECIAL_TYPE:
                    scanner.setRequestedState(SqlFileScanner.SPECIAL);
                    break;
                case Token.PL_TYPE:
                    scanner.setRequestedState(SqlFileScanner.PL);
                    break;
                default:
                    throw new RuntimeException("Internal assertion failed.  " + "Appending to unexpected type: " + newToken.getTypeString());
            }
            scanner.setCommandBuffer(newToken.val);
            return;
        case 'w':
            if (targetCommand == null)
                targetCommand = buffer;
            if (targetCommand == null)
                throw new BadSpecial(SqltoolRB.nobuffer_yet.getString());
            if (other == null) {
                throw new BadSpecial(SqltoolRB.destfile_demand.getString());
            }
            String targetFile = dereference(other.trim(), false);
            // Dereference and trim the target file name
            // This is the only case where we dereference a : command.
            PrintWriter pw = null;
            try {
                pw = new PrintWriter(new OutputStreamWriter(new FileOutputStream(targetFile, true), (shared.encoding == null) ? DEFAULT_FILE_ENCODING : shared.encoding));
                pw.println(targetCommand.reconstitute(true));
                pw.flush();
            } catch (Exception e) {
                throw new BadSpecial(SqltoolRB.file_appendfail.getString(targetFile), e);
            } finally {
                if (pw != null) {
                    try {
                        pw.close();
                    } finally {
                        // Encourage GC of buffers
                        pw = null;
                    }
                }
            }
            return;
        case 's':
            boolean modeExecute = false;
            boolean modeGlobal = false;
            if (targetCommand == null)
                targetCommand = buffer;
            if (targetCommand == null)
                throw new BadSpecial(SqltoolRB.nobuffer_yet.getString());
            try {
                if (other == null || other.length() < 3) {
                    throw new BadSubst(SqltoolRB.substitution_malformat.getString());
                }
                Matcher m = substitutionPattern.matcher(other);
                if (!m.matches()) {
                    throw new BadSubst(SqltoolRB.substitution_malformat.getString());
                }
                // Note that this pattern does not include the leading :.
                if (m.groupCount() < 3 || m.groupCount() > 4) {
                    throw new RuntimeException("Internal assertion failed.  " + "Matched substitution " + "pattern, but captured " + m.groupCount() + " groups");
                }
                String optionGroup = ((m.groupCount() > 3 && m.group(4) != null) ? (new String(m.group(4))) : null);
                if (optionGroup != null) {
                    if (optionGroup.indexOf(';') > -1) {
                        modeExecute = true;
                        optionGroup = optionGroup.replaceFirst(";", "");
                    }
                    if (optionGroup.indexOf('g') > -1) {
                        modeGlobal = true;
                        optionGroup = optionGroup.replaceFirst("g", "");
                    }
                }
                Matcher bufferMatcher = Pattern.compile("(?s" + ((optionGroup == null) ? "" : optionGroup) + ')' + m.group(2)).matcher(targetCommand.val);
                Token newBuffer = new Token(targetCommand.type, (modeGlobal ? bufferMatcher.replaceAll(m.group(3)) : bufferMatcher.replaceFirst(m.group(3))), targetCommand.line);
                if (newBuffer.val.equals(targetCommand.val)) {
                    stdprintln(SqltoolRB.substitution_nomatch.getString());
                    return;
                }
                setBuf(newBuffer);
                stdprintln(modeExecute ? SqltoolRB.buffer_executing.getString(buffer.reconstitute()) : SqltoolRB.editbuffer_contents.getString(buffer.reconstitute()));
            } catch (PatternSyntaxException pse) {
                throw new BadSpecial(SqltoolRB.substitution_syntax.getString(), pse);
            } catch (BadSubst badswitch) {
                throw new BadSpecial(SqltoolRB.substitution_syntax.getString());
            }
            if (modeExecute)
                preempt = true;
            return;
    }
    throw new BadSpecial(SqltoolRB.buffer_unknown.getString(Character.toString(commandChar)));
}
