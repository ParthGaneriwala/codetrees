@Test
public void testInferir() {
    TipoPolimorfico tq;
    tq = new TipoPolimorfico();
    assertEquals(tq, tq.inferir());
    assertEquals(tq.toString(), "?");
    tq = new TipoPolimorfico();
    TipoPolimorfico tq2 = new TipoPolimorfico();
    tq.eIgual(tq2);
    assertTrue(tq.eIgual(tq2.inferir()));
    tq = new TipoPolimorfico();
    tq.eIgual(TipoPrimitivo.BOOLEANO);
    assertEquals(TipoPrimitivo.BOOLEANO, tq.inferir());
    tq = new TipoPolimorfico();
    tq.eIgual(TipoPrimitivo.INTEIRO);
    assertEquals(TipoPrimitivo.INTEIRO, tq.inferir());
    tq = new TipoPolimorfico();
    tq.eIgual(TipoPrimitivo.STRING);
    assertEquals(TipoPrimitivo.STRING, tq.inferir());
    // Ap�s inferir como curinga ("?") pode ser iqual a qualquer tipo
    // primitivo (por aplica��o).
    tq = new TipoPolimorfico();
    tq.inferir();
    tq.eIgual(TipoPrimitivo.BOOLEANO);
    assertTrue(TipoPrimitivo.BOOLEANO.eIgual(tq));
    tq = new TipoPolimorfico();
    tq.inferir();
    tq.eIgual(TipoPrimitivo.INTEIRO);
    assertTrue(TipoPrimitivo.INTEIRO.eIgual(tq));
    tq = new TipoPolimorfico();
    tq.inferir();
    tq.eIgual(TipoPrimitivo.STRING);
    assertTrue(TipoPrimitivo.STRING.eIgual(tq));
}
