private void processTemplates() throws IOException {
    if (opts.templates == null)
        return;
    String[] templates = opts.templates.split(",");
    File[] templateFiles = new File[templates.length];
    for (int i = 0; i < templates.length; ++i) {
        File file = new File(templates[i]);
        if (!file.isFile()) {
            throw new Error("Can't open template file " + templates[i]);
        }
        templateFiles[i] = file;
    }
    HashMap<String, String> variables = new HashMap<String, String>();
    variables.put("CONFIGFILE", opts.config);
    variables.put("JOBS", Integer.toString(opts.jobs));
    Experiment exp = Experiment.getInstance();
    int lmNum = exp.getNumLMs();
    for (int lmid = 0; lmid < lmNum; ++lmid) {
        LanguageModel lm = exp.getLmByNumId(lmid);
        if (lm == null)
            continue;
        variables.put("MODEL", lm.getId());
        for (int i = 0; i < templates.length; ++i) {
            String templateName = templateFiles[i].getName();
            if (templateName.contains("FOREST")) {
                // don't touch forest templates
                continue;
            }
            String filename = templateName.replace("MODEL", lm.getId());
            File output = new File(filename);
            processTemplate(templateFiles[i], output, variables);
            output.setExecutable(true);
        }
    }
    for (ForestModel forest : exp.getForests().values()) {
        variables.remove("MODEL");
        variables.put("FOREST", forest.getName());
        for (int i = 0; i < templates.length; ++i) {
            String templateName = templateFiles[i].getName();
            if (templateName.contains("FOREST")) {
                // do only the forest templates
                String filename = templateName.replace("FOREST", forest.getName());
                File output = new File(filename);
                processTemplate(templateFiles[i], output, variables);
                output.setExecutable(true);
            }
        }
    }
}
