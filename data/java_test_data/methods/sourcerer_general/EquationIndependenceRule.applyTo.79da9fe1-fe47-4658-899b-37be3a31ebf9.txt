public RuleResult applyTo(IModelElement object) {
    Resetvaraibles();
    ProcessModel pm = null;
    Equations eqObject = null;
    boolean bParser = false;
    if (!(object instanceof ProcessModel)) {
        pm = (ProcessModel) object.getRoot();
    } else {
        pm = (ProcessModel) object;
    }
    getUnknownCount(pm);
    Iterator<IChild> eqitr = null;
    // if(!(object instanceof Equation))
    // {
    Iterator<IChild> itr = pm.iterator();
    // first element is the equation
    eqObject = (Equations) itr.next();
    eqitr = eqObject.iterator();
    // skip the first element in the list. it is equation palette
    eqitr.next();
    // }
    EquationList eqlist = (EquationList) eqitr.next();
    SolvabilityStatus statusItem = (SolvabilityStatus) eqitr.next();
    RuleResult result = new IRule.Success((IModelElement) statusItem);
    if (eqObject instanceof Equations) {
        // EquationList eqlist  =  (EquationList) eqObject.getParent();
        Iterator<IRow> Eqlistitr = eqlist.getChildren().iterator();
        int eqCount = 0;
        while (Eqlistitr.hasNext()) {
            // Reset the variable
            bQuadratic = false;
            Equation eq = (Equation) Eqlistitr.next();
            if (// Also check for, if the equation is correct/complete
            !eq.isInitial()) {
                // Keeps track of total number of equations
                eqCount++;
                // / Work done to add updater
                interpreter = ModelEnv.getInstanceFor(eq).getInterpreter();
                Iterator<Field> iterator = eq.iterator();
                Field field = null;
                field = iterator.next();
                while (!(field.getText().isEmpty()) && iterator.hasNext()) {
                    result = tokenCheck(field);
                    field = iterator.next();
                }
                // / Work done to add updater ends
                RuleResult resulttemp = isEquationComplete(eq);
                if (resulttemp instanceof IRule.Success) {
                    if (getParseResult(eq)) {
                        bParser = true;
                        // Get the equation type, Only if equation is parsed correctly and passes all the rule checks
                        getEquationType(eq);
                        if (bQuadratic) {
                            iQudratic++;
                        } else {
                            iLinear++;
                        }
                    }
                }
            /*else
					{
						statusItem.setMessage("You do NOT have enough valid equations to solve for all the unknowns." );
						statusItem.setColor("red");
						result = new IRule.Failure((IModelElement)statusItem, "You do NOT have enough equations to solve for all the unknowns.");
					}*/
            // PA: Commented this
            // Because whenever it got first incomplete equation, it was returning the error
            // without going through all the equations in the system.
            // if equation is not complete
            // else
            // {
            // statusItem.setMessage("You do NOT have enough valid equations to solve for all the unknowns.\n You have " + iEquationCount + " valid equation(s) and " + iUnknownCount + " unknown(s).\n  The number of independent equations and the number of unknowns should be the same.");
            // statusItem.setColor("red");
            // return result;
            // }
            }
        }
        // If there are 0 equations in the system, do nothing
        if (eqCount == 0) {
            return result;
        }
    }
    // If user has created an equation but there are no unknowns in the system
    if (iUnknownCount < 1) {
        statusItem.setMessage("There are no unknowns in this model.");
        statusItem.setColor("green");
        return result;
    }
    // Working starts from here
    statusItem.setMessage("working");
    statusItem.setColor("red");
    if (0 < iQudratic) {
        statusItem.setMessage("You have specified Qudratic equation(s).\n Quadratic equation are not yet supported by the system.\n Please modify the equation to make it linear.");
        statusItem.setColor("red");
        result = new IRule.Failure((IModelElement) statusItem, "You have specified Qudratic equation(s).\n Quadratic equation are not yet supported by the system.\n Please modify the equation to make it linear.");
    } else // iEquationCount - Total equations having atleast one of the unknown element
    if (iUnknownCount < iLinear) {
        statusItem.setMessage("You have overspecified the model.\n You have" + iUnknownCount + " unknown(s) and " + iLinear + " equation(s). \n  The number of independent equations and the number of unknowns should be the same.");
        statusItem.setColor("red");
        result = new IRule.Failure((IModelElement) statusItem, "You have overspecified the model.\n You have" + iUnknownCount + " unknown(s) and " + iLinear + " equation(s). \n  The number of independent equations and the number of unknowns should be the same.");
    } else // if(!EquationIndependenceCheck(iUnknownCount, iLinear, iQudratic))
    if (// iEquationCount))
    !EquationIndependenceCheck(iUnknownCount, iLinear)) {
        statusItem.setMessage("You do NOT have enough equations to solve for all the unknowns.\n You have " + iEquationCount + " valid equation(s) and " + iUnknownCount + " unknown(s).\n  The number of independent equations and the number of unknowns should be the same.");
        statusItem.setColor("red");
        // you have x equations and y unknowns
        result = new IRule.Failure((IModelElement) statusItem, "You do NOT have enough equations to solve for all the unknowns.\n You have " + iEquationCount + " valid equation(s) and " + iUnknownCount + " unknown(s).\n  The number of independent equations and the number of unknowns should be the same.");
    } else // then check if each unknown component is represented in the equations.
    if (bParser && !allUnknownsPresentinTheEquations(eqlist)) {
        // result = new IRule.Failure((IModelElement)eqObject, "The following unknowns are not present in the equation: " + iUnknownCount);// list the unknowns not present.
        String strList = "";
        for (int i = 0; i < iUnknownItemCount; i++) {
            strList += anArray[i];
            strList += ",";
        }
        statusItem.setMessage("The following unknowns are not present in the equation:\n" + strList);
        statusItem.setColor("red");
        result = new IRule.Failure((IModelElement) statusItem, "The following unknowns are not present in the equation:\n" + strList);
    } else {
        if (!isEquationSolvable(eqlist)) {
            // if Equation is not solvable, modify the message
            statusItem.setMessage("The set of equations that you have created is NOT solvable.\nThe equations that you have written are not independent of each other.");
            statusItem.setColor("red");
            result = new IRule.Failure((IModelElement) statusItem, "The set of equations that you have created is NOT solvable.\nThe equations that you have written are not independent of each other.");
        // 
        } else {
            // result = new IRule.Warning((IModelElement)eqObject, "Congratulations! The set of equations that you have created is solvable.");
            statusItem.setMessage("Congratulations! The set of equations that you have created is solvable.");
            statusItem.setColor("green");
            result = new IRule.Success((IModelElement) statusItem);
        }
    }
    return result;
}
