private void getSettings() {
    try {
        // Read from disk using FileInputStream.
        FileInputStream f_in = new FileInputStream("dndUsers-" + this.BOTUSERNAME + ".data");
        // Read object using ObjectInputStream.
        ObjectInputStream obj_in = new ObjectInputStream(f_in);
        // Read an object.
        Object obj = obj_in.readObject();
        // of the Vector class?
        if (obj instanceof Hashtable) {
            // Cast object to a Hashtable
            this.dndList = (Hashtable) obj;
            debug_log("Restored DND List \n" + this.dndList.toString());
        }
    } catch (Exception ex) {
        // ex.printStackTrace();
        error_log(ex.toString());
        error_log(ex.getStackTrace().toString());
    }
    try {
        FileInputStream f_in = new FileInputStream("bannedUsers-" + this.BOTUSERNAME + ".data");
        ObjectInputStream obj_in = new ObjectInputStream(f_in);
        Object obj = obj_in.readObject();
        if (obj instanceof Hashtable) {
            this.banList = (Hashtable) obj;
            debug_log("Restored BAN List \n" + this.banList.toString());
        }
    } catch (Exception ex) {
        error_log(ex.toString());
        error_log(ex.getStackTrace().toString());
    }
    try {
        FileInputStream f_in = new FileInputStream("scores-" + this.BOTUSERNAME + ".data");
        ObjectInputStream obj_in = new ObjectInputStream(f_in);
        Object obj = obj_in.readObject();
        if (obj instanceof Hashtable) {
            this.scores = (Hashtable) obj;
            debug_log("Restored SCORE List \n" + this.scores.toString());
        }
    } catch (Exception ex) {
        error_log(ex.toString());
        error_log(ex.getStackTrace().toString());
    }
}
