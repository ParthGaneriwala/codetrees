public long mul128(long extra, Real a, long aExtra) {
    if ((this.exponent < 0 && this.mantissa != 0) || (a.exponent < 0 && a.mantissa != 0)) {
        makeNan();
        return 0;
    }
    sign ^= a.sign;
    if ((this.exponent == 0 && this.mantissa == 0) || (a.exponent == 0 && a.mantissa == 0)) {
        if ((this.exponent < 0 && this.mantissa == 0) || (a.exponent < 0 && a.mantissa == 0))
            makeNan();
        else
            makeZero(sign);
        return 0;
    }
    if ((this.exponent < 0 && this.mantissa == 0) || (a.exponent < 0 && a.mantissa == 0)) {
        makeInfinity(sign);
        return 0;
    }
    int aExp = a.exponent;
    exponent += aExp - 0x40000000;
    if (exponent < 0) {
        if (aExp < 0x40000000)
            // Underflow
            makeZero(sign);
        else
            // Overflow
            makeInfinity(sign);
        return 0;
    }
    long ffffffffL = 0xffffffffL;
    long a0 = extra & ffffffffL;
    long a1 = extra >>> 32;
    long a2 = mantissa & ffffffffL;
    long a3 = mantissa >>> 32;
    long b0 = aExtra & ffffffffL;
    long b1 = aExtra >>> 32;
    long b2 = a.mantissa & ffffffffL;
    long b3 = a.mantissa >>> 32;
    a0 = ((a3 * b0 >>> 2) + (a2 * b1 >>> 2) + (a1 * b2 >>> 2) + (a0 * b3 >>> 2) + 0x60000000) >>> 28;
    // (a2*b0>>>34)+(a1*b1>>>34)+(a0*b2>>>34)+0x08000000)>>>28;
    a1 *= b3;
    b0 = a2 * b2;
    b1 *= a3;
    a0 += ((a1 << 2) & ffffffffL) + ((b0 << 2) & ffffffffL) + ((b1 << 2) & ffffffffL);
    a1 = (a0 >>> 32) + (a1 >>> 30) + (b0 >>> 30) + (b1 >>> 30);
    a0 &= ffffffffL;
    a2 *= b3;
    b2 *= a3;
    a1 += ((a2 << 2) & ffffffffL) + ((b2 << 2) & ffffffffL);
    extra = (a1 << 32) + a0;
    mantissa = ((a3 * b3) << 2) + (a1 >>> 32) + (a2 >>> 30) + (b2 >>> 30);
    extra = normalize128(extra);
    return extra;
}
