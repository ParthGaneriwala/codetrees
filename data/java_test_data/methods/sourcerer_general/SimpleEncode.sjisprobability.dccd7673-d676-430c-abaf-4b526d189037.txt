private static int sjisprobability(byte[] content) {
    int i, rawtextlen = 0;
    int dbchars = 1, jpchars = 1;
    long jpformat = 0, totalformat = 1;
    float rangeval = 0, formatval = 0;
    int row, column, adjust;
    rawtextlen = content.length;
    for (i = 0; i < rawtextlen - 1; i++) {
        if (content[i] >= 0) {
        } else {
            dbchars++;
            if (i + 1 < content.length && (((byte) 0x81 <= content[i] && content[i] <= (byte) 0x9F) || ((byte) 0xE0 <= content[i] && content[i] <= (byte) 0xEF)) && (((byte) 0x40 <= content[i + 1] && content[i + 1] <= (byte) 0x7E) || ((byte) 0x80 <= content[i + 1] && content[i + 1] <= (byte) 0xFC))) {
                jpchars++;
                totalformat += 500;
                row = content[i] + 256;
                column = content[i + 1] + 256;
                if (column < 0x9f) {
                    adjust = 1;
                    if (column > 0x7f) {
                        column -= 0x20;
                    } else {
                        column -= 0x19;
                    }
                } else {
                    adjust = 0;
                    column -= 0x7e;
                }
                if (row < 0xa0) {
                    row = ((row - 0x70) << 1) - adjust;
                } else {
                    row = ((row - 0xb0) << 1) - adjust;
                }
                row -= 0x20;
                column = 0x20;
                if (row < JPformat.length && column < JPformat[row].length && JPformat[row][column] != 0) {
                    jpformat += JPformat[row][column];
                }
                i++;
            } else if ((byte) 0xA1 <= content[i] && content[i] <= (byte) 0xDF) {
            }
        }
    }
    rangeval = 50 * ((float) jpchars / (float) dbchars);
    formatval = 50 * ((float) jpformat / (float) totalformat);
    return (int) (rangeval + formatval) - 1;
}
