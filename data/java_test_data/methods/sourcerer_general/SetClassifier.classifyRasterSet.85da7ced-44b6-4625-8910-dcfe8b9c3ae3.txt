public double[] classifyRasterSet(float[][][] f) {
    rasters = f;
    klasses = new String[f.length];
    klassProbs = new double[f.length][];
    int index = 0;
    for (int i = 0; i < f.length; i++) {
        if (containsCluster(rasters[i])) {
            classifier.setRaster(rasters[i]);
            klassProbs[index] = classifier.classifyProb();
            klasses[index] = classifier.classify();
            index++;
        } else {
            // do nothing
            ;
        }
    }
    String[] trimKlasses = new String[index];
    double[][] trimKlassProbs = new double[index][];
    for (int i = 0; i < index; i++) {
        trimKlasses[i] = klasses[i];
        trimKlassProbs[i] = klassProbs[i];
    }
    klasses = trimKlasses;
    klassProbs = trimKlassProbs;
    // the + 1 is for unclassified points
    double[] setProbs = new double[klassProbs[0].length + 1];
    String[] classNames = classifier.getClassNames();
    // do something with the klasses and/or klassProbs!
    switch(mode) {
        case MODE:
            setProbs = caseMode(klasses, classNames);
            break;
        case AVERAGE:
            setProbs = caseAverage(klassProbs, classNames);
            break;
        case SIMPLE_DS:
            setProbs = caseSimpleDS(klassProbs, classNames);
            break;
        case PROP_BEL_TRANS:
            setProbs = casePropBelTrans(klassProbs, classNames);
            break;
        case COMBINED_AVERAGE:
            setProbs = caseCombinedAverage(klassProbs, classNames);
            break;
        case MODIFIED_AVERAGE:
            setProbs = caseModifiedAverage(klassProbs, classNames);
            break;
        case TREE_PBT:
            setProbs = caseTreePBT(klassProbs, classNames);
            break;
        default:
            System.out.println("I shouldn't be here: mode is " + mode);
    }
    return setProbs;
}
