@RequestMapping(params = "action=findEntity")
public void findEntity(HttpServletRequest request, HttpServletResponse response) throws Exception {
    // 组装实体类名;
    String className = request.getParameter("entity");
    String columns = request.getParameter("columns");
    String filter = request.getParameter("filter");
    // if(!className.contains(".")){
    // className = "com.kogc.common.po.meta." + entity;
    // }
    List<Criterion> rs = new ArrayList<Criterion>();
    Class<?> clazz = Class.forName(className);
    // 组装关系集
    String[] filters = filter.split(";");
    for (String f : filters) {
        if (f.contains(":") && f.lastIndexOf(":") != f.length()) {
            String[] ss = f.split(":");
            rs.add(Restrictions.eq(ss[0], ss[1]));
        } else if (f.contains(">") && f.lastIndexOf(">") != f.length()) {
            String[] ss = f.split(">");
            rs.add(Restrictions.gt(ss[0], ss[1]));
        } else if (f.contains("<") && f.lastIndexOf("<") != f.length()) {
            String[] ss = f.split("<");
            rs.add(Restrictions.lt(ss[0], ss[1]));
        } else if (f.contains("!") && f.lastIndexOf("!") != f.length()) {
            String[] ss = f.split("!");
            rs.add(Restrictions.not(Restrictions.eq(ss[0], ss[1])));
        }
    }
    // 查询结果;
    List<?> list = service.findEntity(clazz, rs);
    // 对展现数据包装;
    final List<String> colList = new ArrayList<String>();
    // 替换名称集;
    Map<String, String> alias = new HashMap<String, String>();
    if (!StringUtils.isEmpty(columns)) {
        for (String s : columns.split(";")) {
            if (s.contains(":")) {
                String[] ss = s.split(":");
                colList.add(ss[0]);
                alias.put(ss[0], ss[1]);
            } else {
                colList.add(s);
            }
        }
    }
    // 过滤请求的展现字段;如果未指定,则全部展现;
    JsonConfig config = new JsonConfig();
    config.setJsonPropertyFilter(new PropertyFilter() {

        public boolean apply(Object source, String name, Object value) {
            return !(colList.size() == 0 || colList.contains(name));
        }
    });
    // 生成Json字符集;
    String result = JSONArray.fromObject(list, config).toString();
    // 对名称进行替换;
    Set<String> ks = alias.keySet();
    for (String k : ks) {
        // newName;
        String nn = alias.get(k);
        result = result.replace("\"" + k + "\"", "\"" + nn + "\"");
    }
    throw new Exception("sdafd");
// WebUtils.WriteJson(response, result);
}
