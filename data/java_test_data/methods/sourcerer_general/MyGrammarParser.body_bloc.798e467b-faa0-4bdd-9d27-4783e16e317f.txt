// $ANTLR start "body_bloc"
public final MyGrammarParser.body_bloc_return body_bloc() throws RecognitionException {
    MyGrammarParser.body_bloc_return retval = new MyGrammarParser.body_bloc_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    MyGrammarParser.statement_return statement134 = null;
    RewriteRuleSubtreeStream stream_statement = new RewriteRuleSubtreeStream(adaptor, "rule statement");
    try {
        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:244:11: ( ( statement )+ -> ^( BODY_BLOC ( statement )+ ) )
        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:244:13: ( statement )+
        {
            // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:244:13: ( statement )+
            int cnt23 = 0;
            loop23: do {
                int alt23 = 2;
                int LA23_0 = input.LA(1);
                if (((LA23_0 >= WRITEINT && LA23_0 <= IF) || LA23_0 == WHILE || LA23_0 == FOR || LA23_0 == CASE || LA23_0 == PVG || LA23_0 == IDENTIFIER)) {
                    alt23 = 1;
                }
                switch(alt23) {
                    case 1:
                        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:244:14: statement
                        {
                            pushFollow(FOLLOW_statement_in_body_bloc1992);
                            statement134 = statement();
                            state._fsp--;
                            stream_statement.add(statement134.getTree());
                        }
                        break;
                    default:
                        if (cnt23 >= 1)
                            break loop23;
                        EarlyExitException eee = new EarlyExitException(23, input);
                        throw eee;
                }
                cnt23++;
            } while (true);
            // AST REWRITE
            // elements: statement
            // token labels:
            // rule labels: retval
            // token list labels:
            // rule list labels:
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", retval != null ? retval.tree : null);
            root_0 = (CommonTree) adaptor.nil();
            // 244:27: -> ^( BODY_BLOC ( statement )+ )
            {
                // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:244:30: ^( BODY_BLOC ( statement )+ )
                {
                    CommonTree root_1 = (CommonTree) adaptor.nil();
                    root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(BODY_BLOC, "BODY_BLOC"), root_1);
                    if (!(stream_statement.hasNext())) {
                        throw new RewriteEarlyExitException();
                    }
                    while (stream_statement.hasNext()) {
                        adaptor.addChild(root_1, stream_statement.nextTree());
                    }
                    stream_statement.reset();
                    adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
