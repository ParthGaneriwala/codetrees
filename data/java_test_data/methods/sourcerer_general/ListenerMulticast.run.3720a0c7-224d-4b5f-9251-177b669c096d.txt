public void run() {
    InetAddress grupo = null;
    MulticastSocket s = null;
    try {
        grupo = InetAddress.getByName("224.0.0.1");
        s = new MulticastSocket(2000);
        System.out.println("Listener join the group.");
        s.joinGroup(grupo);
        System.out.println("+ All set.");
        while (true) {
            byte[] buf = new byte[1000];
            DatagramPacket DGReceive = new DatagramPacket(buf, buf.length);
            System.out.print("==> * Aguardando mensagem ");
            s.receive(DGReceive);
            byte[] dest = new byte[DGReceive.getLength()];
            System.arraycopy(DGReceive.getData(), 0, dest, 0, dest.length);
            String arrived = new String(dest);
            StringTokenizer token = new StringTokenizer(arrived, ";");
            String st = token.nextToken();
            String nome = token.nextToken();
            String ip = token.nextToken();
            System.out.println("STATUS = " + st + " / NOME = " + nome + " / IP = " + ip);
            int status = 0;
            try {
                status = Integer.parseInt(st);
            } catch (Exception e) {
                System.err.println("Erro ao converter o valor de st [ " + status + " ].");
                e.printStackTrace();
            }
            System.out.println("Evento ocorrido --> [ " + nome + " ] ficou [ " + ((status == 0) ? "OFFLINE" : "ONLINE") + " ].");
            for (int i = 0; i < this.UserTable.getRowCount(); i++) {
                String nameAtIndex = (String) this.UserTable.getValueAt(i, 1);
                if (nameAtIndex.equals(nome)) {
                    System.out.println("Entao /" + nome + "/ esta na tabela. Row = " + i);
                    if (status == 0) {
                        this.UserTable.setValueAt(new ImageIcon("img/redball.gif"), i, 0);
                        if (this.rUsersList.get(i).getNome().equals(nome)) {
                            this.rUsersList.get(i).setStatus(false);
                            this.rUsersList.get(i).setIP(null);
                        } else {
                            this.rUsersList.get(i + 1).setStatus(false);
                            this.rUsersList.get(i + 1).setIP(null);
                        }
                        break;
                    } else {
                        this.UserTable.setValueAt(new ImageIcon("img/greenball.gif"), i, 0);
                        if (this.rUsersList.get(i).getNome().equals(nome)) {
                            this.rUsersList.get(i).setStatus(true);
                            this.rUsersList.get(i).setIP(ip);
                        } else {
                            this.rUsersList.get(i + 1).setStatus(true);
                            this.rUsersList.get(i + 1).setIP(ip);
                        }
                        break;
                    }
                }
            }
        }
    } catch (UnknownHostException e) {
        System.err.println("Excessao causada pelo InetAddress.");
        e.printStackTrace();
    } catch (IOException e) {
        System.err.println("Excessao causada pelo Multicast.");
        e.printStackTrace();
    } catch (Exception e) {
        System.err.println("Excessao geral desconhecida.");
        e.printStackTrace();
    } finally {
        System.out.println("Saindo do grupo ...");
        try {
            s.leaveGroup(grupo);
        } catch (IOException e) {
            System.err.println("Imagine erro ao fechar o grupo.");
            e.printStackTrace();
        }
        System.out.println("Ok.");
    }
/*try {			
			System.out.println("Entrando no grupo ...");
			this.getS().joinGroup(this.getGrupo());
			private InetAddress grupo=null;
			private MulticastSocket s=null;

			for(;;) {
				byte[] buf=new byte[1000];
				DatagramPacket recv=new DatagramPacket(buf, buf.length);
				System.out.print("Esperando algu�m logar!...");
				this.getS().receive(recv);
				System.out.println("Algu�m logou!");
				byte[] dest=new byte[recv.getLength()];
				System.arraycopy(recv.getData(), 0, dest, 0, dest.length);
				String temp = new String(dest);
				String name = temp.substring(1);
				System.out.println(temp.substring(0, 1));		
					
				System.out.println("Mensagen recebida: "+temp.substring(0, 1)+" => "+name);
				for(int i=0; i<this.UserTable.getRowCount(); i++){
					String nameAtIndex = (String)this.UserTable.getValueAt(i, 1);
					System.out.println(i+" "+nameAtIndex);
					if(nameAtIndex.equals(name)){
						System.out.println("ACHOU O NOME DE QUEM LOGOU + " + name);
						if(temp.substring(0, 1).equals("0")){
							this.UserTable.setValueAt(new ImageIcon("img/redball.gif"), i, 0);
							if(this.rUsersList.get(i).getNome().equals(name)){
								this.rUsersList.get(i).setStatus(false);
								break;
							}
							else{
								this.rUsersList.get(i+1).setStatus(false);
								break;
							}
						}
						else{
							System.out.println("NOME DE QUEM DESLOGOU + " + name);
							this.UserTable.setValueAt(new ImageIcon("img/greenball.gif"), i, 0);
							if(this.rUsersList.get(i).getNome().equals(name)){
								this.rUsersList.get(i).setStatus(true);
								break;
							}
							else{
								this.rUsersList.get(i+1).setStatus(true);
								break;
							}
						}
					}
				}
			}

		} catch(Exception exc) {
			exc.printStackTrace();
		}*/
}
