public static void expandPixels(int bitSize, byte[] in, byte[] out, int outLen) {
    if (bitSize == 1) {
        expandOneBitPixels(in, out, outLen);
        return;
    }
    // input index
    int i;
    // output index
    int o;
    int t;
    byte v;
    // number of pixels in a byte
    int count = 0;
    // num bits to shift mask for next use
    int maskshift = 1;
    // num bits to shift pixel to bottom of byte
    int pixelshift = 0;
    int tpixelshift = 0;
    int pixelshiftdelta = 0;
    int mask = 0;
    // temp mask for processing
    int tmask;
    switch(bitSize) {
        case 1:
            mask = 0x80;
            maskshift = 1;
            count = 8;
            pixelshift = 7;
            pixelshiftdelta = 1;
            break;
        case 2:
            mask = 0xC0;
            maskshift = 2;
            count = 4;
            pixelshift = 6;
            pixelshiftdelta = 2;
            break;
        case 4:
            mask = 0xF0;
            maskshift = 4;
            count = 2;
            pixelshift = 4;
            pixelshiftdelta = 4;
            break;
        default:
            throw new RuntimeException("support only expand for 1, 2, 4");
    }
    // for all outputs required
    i = 0;
    for (o = 0; o < out.length; ) {
        tmask = mask;
        tpixelshift = pixelshift;
        v = in[i];
        for (t = 0; t < count && o < out.length; ++t, ++o) {
            // this only works for 1 bit
            out[o] = (byte) (((v & tmask) >>> tpixelshift) & 0xFF);
            tmask = (byte) ((tmask & 0xFF) >>> maskshift);
            tpixelshift -= pixelshiftdelta;
        }
        ++i;
    }
}
