public void run() {
    File file = Helper.chooseFile("Optimal triangles", "tri");
    if (file == null) {
        return;
    }
    if (file.exists()) {
        int n = JOptionPane.showConfirmDialog(parent, file.getName() + " exists. Overwrite?", "Confirm", JOptionPane.YES_NO_OPTION);
        if (n == 1) {
            return;
        }
    }
    try {
        boolean append = false;
        // if(MainFrame.getFrame().appendExport())
        append = true;
        PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(file, append)));
        Date now = new Date(System.currentTimeMillis());
        SimpleDateFormat format = new SimpleDateFormat("EEE, d MMM HH:mm:ss z");
        FieldPosition pos = new FieldPosition(0);
        StringBuffer empty = new StringBuffer();
        StringBuffer s = format.format(now, empty, pos);
        try {
            InetAddress host = InetAddress.getLocalHost();
            s.append(" on " + host.getHostName());
        } catch (UnknownHostException ex) {
        }
        out.println("# Saved by " + System.getProperty("user.name") + " at " + s);
        String type = "x-y";
        // if(MainFrame.getFrame().estimateLonLat())
        // type = "lon-lat";
        out.println("map.tri.refs " + nets);
        out.println("map.tri.size " + tris.size());
        int n = 0;
        for (Triangle tri : tris) {
            String[] per = tri.getPermutation();
            out.println("map.tri." + type + "." + n + " " + per[0] + " " + per[1] + " " + per[2]);
            n++;
        }
        out.flush();
        out.close();
    } catch (IOException ex) {
        JOptionPane.showMessageDialog(parent, "Error writing to " + file.getPath(), MainFrame.TITLE, JOptionPane.ERROR_MESSAGE);
    }
}
