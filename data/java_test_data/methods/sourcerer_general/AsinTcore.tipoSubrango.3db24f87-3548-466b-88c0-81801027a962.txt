private Subrango tipoSubrango() throws AleXcore.ExcepcionCaracterInvalido, AleXcore.ExcepcionComentarioSinCerrar, AleXcore.ExcepcionIdentificadorInvalido, AleXcore.ExcepcionComentarioCerrado, ExcepcionErrorSintactico, ExcepcionErrorSemantico {
    int limiteInf = 0;
    int limiteSup = 0;
    Subrango subR = null;
    int signo = 1;
    int signo2 = 1;
    if (ultimoToken.isToken(Token.OPSUMA)) {
        if ((ultimoToken.getLexema().equals("-")) || (ultimoToken.getLexema().equals("+"))) {
            if (ultimoToken.getLexema().equals("-")) {
                signo = -1;
            }
            ultimoToken = alex.getToken();
        } else {
            throw new ExcepcionErrorSintactico("Se esperaba una constante numerica en linea: " + ultimoToken.getLinea() + ", se obtuvo " + ultimoToken.getLexema());
        }
    }
    if (ultimoToken.isToken(Token.NUMERO) || ultimoToken.isToken(Token.IDENTIFICADOR)) {
        if (ultimoToken.isToken(Token.IDENTIFICADOR)) {
            String identificador = ultimoToken.getLexema();
            Elemento entradaDeTabla = null;
            if (TdS.pertenece(identificador)) {
                entradaDeTabla = TdS.getEntrada(identificador);
            } else {
                throw new ExcepcionErrorSemantico("En linea: " + ultimoToken.getLinea() + ". El identificador: " + identificador + " no esta definido");
            }
            if (entradaDeTabla.esConstante()) {
                Constante Ct = (Constante) entradaDeTabla;
                if (Ct.getTipo().esEntero()) {
                    limiteInf = Ct.getValor() * signo;
                } else {
                    throw new ExcepcionErrorSemantico("En linea: " + ultimoToken.getLinea() + ". El identificador: " + identificador + " no es una constante numérica");
                }
            } else {
                throw new ExcepcionErrorSemantico("En linea: " + ultimoToken.getLinea() + ". El identificador: " + identificador + " no es una constante");
            }
        } else {
            limiteInf = Integer.valueOf(ultimoToken.getLexema()) * signo;
        }
        ultimoToken = alex.getToken();
        if (ultimoToken.isToken(Token.PUNTOPUNTO)) {
            ultimoToken = alex.getToken();
            if ((ultimoToken.getLexema().equals("-")) || (ultimoToken.getLexema().equals("+"))) {
                if (ultimoToken.getLexema().equals("-")) {
                    signo2 = -1;
                }
                ultimoToken = alex.getToken();
            }
            if (ultimoToken.isToken(Token.NUMERO) || ultimoToken.isToken(Token.IDENTIFICADOR)) {
                if (ultimoToken.isToken(Token.IDENTIFICADOR)) {
                    String identificador = ultimoToken.getLexema();
                    Elemento entradaDeTabla = null;
                    if (TdS.pertenece(identificador)) {
                        entradaDeTabla = TdS.getEntrada(identificador);
                    } else {
                        throw new ExcepcionErrorSemantico("En linea: " + ultimoToken.getLinea() + ". El identificador: " + identificador + " no esta definido");
                    }
                    if (entradaDeTabla.esConstante()) {
                        Constante Ct = (Constante) entradaDeTabla;
                        if (Ct.getTipo().esEntero()) {
                            limiteSup = Ct.getValor() * signo2;
                        } else {
                            throw new ExcepcionErrorSemantico("En linea: " + ultimoToken.getLinea() + ". El identificador: " + identificador + " no es una constante numérica");
                        }
                    } else {
                        throw new ExcepcionErrorSemantico("En linea: " + ultimoToken.getLinea() + ". El identificador: " + identificador + " no es una constante");
                    }
                } else {
                    limiteSup = Integer.valueOf(ultimoToken.getLexema()) * signo2;
                }
            } else {
                throw new ExcepcionErrorSintactico("Se esperaba una CONSTANTE, en linea: " + ultimoToken.getLinea());
            }
        } else {
            throw new ExcepcionErrorSintactico("Se esperaba '..', en linea: " + ultimoToken.getLinea());
        }
    }
    if (limiteInf <= limiteSup) {
        subR = new Subrango(limiteInf, limiteSup);
    } else {
        throw new ExcepcionErrorSemantico("En linea: " + ultimoToken.getLinea() + ". El limite inferior es mayor al limite superior del subrango");
    }
    return subR;
}
