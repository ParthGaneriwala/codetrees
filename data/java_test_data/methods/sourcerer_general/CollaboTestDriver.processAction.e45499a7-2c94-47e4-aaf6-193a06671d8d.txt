public void processAction(ACTION action) throws IOException {
    switch(action) {
        case SINGLE_SHARE_LOC:
            ArrayList<String> names = new ArrayList<String>();
            names.add(getUserNames().get(0));
            mShareLocHandler.submitLocation(SHARE_LOC_TYPE.SHARE_WITH_LIST, names);
            break;
        case GROUP_SHARE_LOC:
            mShareLocHandler.submitLocation(SHARE_LOC_TYPE.SHARE_WITH_GROUP, new ArrayList<String>());
            break;
        case LIST_SHARE_LOC:
            mShareLocHandler.submitLocation(SHARE_LOC_TYPE.SHARE_WITH_LIST, getUserNames());
            break;
        case TEACHER_SHARE_LOC:
            mShareLocHandler.submitLocation(SHARE_LOC_TYPE.SHARE_WITH_TEACHER, new ArrayList<String>());
            break;
        case SINGLE_SYNC:
            ArrayList<String> names2 = new ArrayList<String>();
            names2.add(getUserNames().get(0));
            mSyncHandler.submitSyncRequest(SYNC_TYPE.SYNC_WITH_LIST, names2);
            break;
        case LIST_SYNC:
            mSyncHandler.submitSyncRequest(SYNC_TYPE.SYNC_WITH_LIST, userNames);
            break;
        case GROUP_SYNC:
            mSyncHandler.submitSyncRequest(SYNC_TYPE.SYNC_WITH_GROUP, new ArrayList<String>());
            break;
        case TEACHER_SYNC:
            mSyncHandler.submitSyncRequest(SYNC_TYPE.SYNC_WITH_TEACHER, new ArrayList<String>());
            break;
        case CHAT:
            mChatHandler.sendText("This is testing the chat.");
            break;
        case ANSWER_EXERCISE:
            ExerciseFile exercise = mExerciseHandler.getExercise();
            HashMap<String, String> questions = exercise.getQuestions();
            Iterator<String> iterator = questions.keySet().iterator();
            mExerciseHandler.submitAnswer(iterator.next(), "The answer is " + System.currentTimeMillis());
            break;
        case GPS_POLL:
            // call the handler
            if (mAuthHandler.checkTeacherAuthentication())
                mGpsHandler.startStudentPositionPolling();
            break;
        case GPS_WAYPOINT:
            // call the handler
            ArrayList<GeoPoint> posList = new ArrayList<GeoPoint>();
            for (int ndx = 0; ndx < 10; ndx++) {
                posList.add(new GeoPoint(120.0, 30.0));
            }
            mGpsHandler.sendWaypoints(posList, mAuthHandler.getUser().getUserName());
            break;
        case GPS_MEETING_POINT:
            // call the handler
            GeoPoint pos = new GeoPoint(120.0, 30.0);
            mGpsHandler.sendMeetingPoint(pos, mAuthHandler.getUser().getUserName());
            break;
        case GPS_SEND_POSITION:
            GeoPoint pos2 = new GeoPoint(120.0, 30.0);
            mGpsHandler.sendPosition(pos2);
            break;
        case QA_QUESTION:
            mQAHandler.submitQuestion("What is going on?");
            break;
        case QA_ANSWER:
            // choose a user to send the answer to; we'll just send it back
            // to us
            mQAHandler.setToUser(mAuthHandler.getUser());
            mQAHandler.submitAnswer(mAuthHandler.getUser().getUserName(), "Read the directions.");
            break;
    }
}
