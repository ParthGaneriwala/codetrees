private Void processFile(File file) {
    BufferedImage img;
    String fileHash = md5(file.getPath());
    File tempFolder = new File(prefs.get("TEMPFOLDER", "") + File.separator + "CI-IF" + File.separator + fileHash.substring(0, 3));
    String thumbFileName = tempFolder.getPath() + File.separator + fileHash + ".png";
    File thumbFile = new File(thumbFileName);
    Boolean valid = false;
    if (file.length() < 2000) {
        return null;
    }
    if (!thumbFile.exists()) {
        // main.updateImportLocalMessages("Importing: " + file.getPath());
        try {
            img = ImageIO.read(file);
            valid = true;
        } catch (Exception e) {
            System.out.println(e.toString() + file.getName());
            return null;
        } finally {
            if (!valid) {
                main.updateImportLocalMessages("Invalid image: " + file.getPath());
                return null;
            }
        }
        ImageInputStream iis = null;
        try {
            FileInputStream imageStream = new FileInputStream(file);
            iis = ImageIO.createImageInputStream(imageStream);
        } catch (Exception e) {
            System.out.println(e.toString());
            return null;
        }
        Iterator readers = ImageIO.getImageReaders(iis);
        if (readers.hasNext()) {
            // valid image
            int width = img.getWidth();
            int height = img.getHeight();
            double nWidth;
            double nHeight;
            if (height > width) {
                double ratio = (double) width / (double) height;
                nHeight = (double) 200 / height;
                nWidth = (200 * ratio) / width;
            } else {
                double ratio = (double) height / (double) width;
                nWidth = (double) 200 / width;
                nHeight = (200 * ratio) / height;
            }
            // BufferedImage thumbImage = new BufferedImage(nWidth, nHeight, BufferedImage.TYPE_INT_RGB);
            // Graphics2D g = thumbImage.createGraphics();
            AffineTransform tx = new AffineTransform();
            tx.scale(nWidth, nHeight);
            AffineTransformOp op = new AffineTransformOp(tx, AffineTransformOp.TYPE_BILINEAR);
            BufferedImage thumbImage = op.filter(img, null);
            if (!tempFolder.isDirectory()) {
                tempFolder.mkdir();
            }
            try {
                ImageIO.write(thumbImage, "png", thumbFile);
            } catch (IOException e) {
                return null;
            }
            if (!db.recordExists(fileHash)) {
                db.doInsert(fileHash, file.getPath(), thumbFile.getPath(), 0, importGroup);
                main.updateImportImageDisplay(thumbImage, thumbFile.getName(), true);
            } else {
                main.updateImportImageDisplay(thumbImage, thumbFile.getName(), false);
            }
        }
    } else {
        // main.updateImportLocalMessages("Cache Import: " + file.getPath());
        BufferedImage thumbImage;
        try {
            thumbImage = ImageIO.read(thumbFile);
        } catch (IllegalArgumentException e) {
            e.printStackTrace();
            return null;
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
        if (!db.recordExists(fileHash)) {
            db.doInsert(fileHash, file.getPath(), thumbFile.getPath(), 0, importGroup);
            main.updateImportImageDisplay(thumbImage, thumbFile.getName(), true);
        } else {
            main.updateImportImageDisplay(thumbImage, thumbFile.getName(), false);
        }
    }
    return null;
}
