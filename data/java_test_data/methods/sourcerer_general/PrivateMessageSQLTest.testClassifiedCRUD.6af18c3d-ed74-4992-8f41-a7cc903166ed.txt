public void testClassifiedCRUD() throws SQLException {
    // Insert project so that it can be referred to by the private message
    Project project = new Project();
    project.setTitle("Project Private Message SQL Test");
    project.setShortDescription("Project SQL Test Description");
    project.setRequestDate(new Timestamp(System.currentTimeMillis()));
    project.setEstimatedCloseDate((Timestamp) null);
    project.setRequestedBy("Project SQL Test Requested By");
    project.setRequestedByDept("Project SQL Test Requested By Department");
    project.setBudgetCurrency("USD");
    project.setBudget("10000.75");
    project.setGroupId(GROUP_ID);
    project.setEnteredBy(USER_ID);
    project.setModifiedBy(USER_ID);
    assertNotNull(project);
    boolean projectResult = project.insert(db);
    assertTrue("Project was not inserted", projectResult);
    assertTrue("Inserted project did not have an id", project.getId() > -1);
    // Insert private message
    PrivateMessage privateMessage = new PrivateMessage();
    privateMessage.setBody("PrivateMessage SQL Test");
    privateMessage.setProjectId(project.getId());
    privateMessage.setLinkModuleId(1);
    privateMessage.setLinkItemId(1);
    privateMessage.setEnteredBy(USER_ID);
    assertNotNull(privateMessage);
    boolean result = privateMessage.insert(db);
    assertTrue("PrivateMessage was not inserted", result);
    assertTrue("Inserted PrivateMessage did not have an id", privateMessage.getId() > -1);
    // Reload the private message, then update
    int updateCount = -1;
    assertTrue(privateMessage.getId() > -1);
    privateMessage = new PrivateMessage(db, privateMessage.getId());
    privateMessage.setDeletedByUserId(true);
    updateCount = privateMessage.update(db);
    assertTrue("The private message was not updated by the database", updateCount == 1);
    // Find the previously set private message
    int messageId = privateMessage.getId();
    privateMessage = null;
    PrivateMessageList privateMessageList = new PrivateMessageList();
    privateMessageList.setProjectId(project.getId());
    privateMessageList.buildList(db);
    assertTrue(privateMessageList.size() > 0);
    Iterator<PrivateMessage> i = privateMessageList.iterator();
    while (i.hasNext()) {
        PrivateMessage thisPrivateMessage = i.next();
        if (thisPrivateMessage.getId() == messageId) {
            privateMessage = thisPrivateMessage;
            break;
        }
    }
    assertNotNull(privateMessage);
    // Delete the private message
    assertNotNull(privateMessage);
    privateMessage.delete(db);
    messageId = privateMessage.getId();
    privateMessage = null;
    // Try to find the previously deleted private message
    privateMessageList = new PrivateMessageList();
    privateMessageList.setId(messageId);
    privateMessageList.buildList(db);
    Iterator<PrivateMessage> ij = privateMessageList.iterator();
    while (ij.hasNext()) {
        PrivateMessage thisPrivateMessage = ij.next();
        if (thisPrivateMessage.getId() == messageId) {
            assertNull("Private message exists when it shouldn't", thisPrivateMessage);
        }
    }
    // Delete test project
    project.delete(db, (String) null);
}
