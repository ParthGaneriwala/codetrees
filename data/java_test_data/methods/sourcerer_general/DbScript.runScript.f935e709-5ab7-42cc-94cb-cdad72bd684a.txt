public static void runScript(Connection conn, String sql_filename, String log_file) {
    try {
        if (conn.isClosed())
            conn = DBUtils.getConnection();
        File f = new File(sql_filename);
        FileReader fr = new FileReader(f);
        BufferedReader d = new BufferedReader(fr);
        String thisLine, sqlQuery;
        StringBuffer logstr = new StringBuffer();
        sqlQuery = "";
        int count = 0;
        long total_bytes = f.length();
        long bytes_read = 0;
        while ((thisLine = d.readLine()) != null) {
            // Including CR LF
            bytes_read += thisLine.length() + 2;
            thisLine = thisLine.trim();
            // Skip comments and empty lines
            if (thisLine.length() > 0 && thisLine.charAt(0) == '-' || thisLine.length() == 0)
                continue;
            if (thisLine.charAt(0) == '\uFEFF')
                thisLine = thisLine.substring(1);
            sqlQuery = sqlQuery + " " + thisLine;
            // If one command complete
            if (sqlQuery.charAt(sqlQuery.length() - 1) == ';') {
                // Remove the ; since
                sqlQuery = sqlQuery.replace(';', ' ');
                // jdbc complains
                try {
                    Statement stmt = conn.createStatement();
                    if (sqlQuery.trim().toLowerCase().startsWith("select")) {
                        ResultSet rs = stmt.executeQuery(sqlQuery);
                        ResultSetMetaData rsmd = rs.getMetaData();
                        for (int i = 0; i < rsmd.getColumnCount(); i++) logstr.append(doPadding(rsmd.getColumnName(i + 1), 10) + " | ");
                        logstr.append("\n");
                        while (rs.next()) {
                            for (int i = 0; i < rsmd.getColumnCount(); i++) logstr.append(doPadding(rs.getString(i + 1), 10) + " | ");
                            logstr.append("\n");
                        }
                    } else {
                        int ct = stmt.executeUpdate(sqlQuery);
                        logstr.append("[" + sqlQuery + "]\n" + ct + "rows updated.\n");
                    }
                    stmt.close();
                    count++;
                    OnStartInitialize.bibleLoadingStatus = count + " queries executed successfully.. (" + ((bytes_read * 100) / total_bytes) + " %)";
                // 
                } catch (SQLException e) {
                    log.error(e, e);
                    logstr.append("SQL = [" + sqlQuery + "], ERR = " + e.getLocalizedMessage());
                    logstr.append("\n");
                    OnStartInitialize.bibleLoadingStatus = "SQL: " + sqlQuery + "\nERR = " + e.getLocalizedMessage();
                }
                sqlQuery = "";
            }
        }
        FileWriter fw = new FileWriter(log_file);
        fw.write(logstr.toString());
        fw.close();
    } catch (Exception e) {
        log.error(e, e);
        OnStartInitialize.bibleLoadingStatus = "Error: " + e.getLocalizedMessage();
        try {
            Thread.sleep(5000);
        } catch (InterruptedException e1) {
        }
        return;
    }
}
