// $ANTLR start "init_bloc_void"
public final MyGrammarParser.init_bloc_void_return init_bloc_void() throws RecognitionException {
    MyGrammarParser.init_bloc_void_return retval = new MyGrammarParser.init_bloc_void_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token BEGIN123 = null;
    Token END125 = null;
    Token IDENTIFIER126 = null;
    MyGrammarParser.body_bloc_return body_bloc124 = null;
    CommonTree BEGIN123_tree = null;
    CommonTree END125_tree = null;
    CommonTree IDENTIFIER126_tree = null;
    RewriteRuleTokenStream stream_END = new RewriteRuleTokenStream(adaptor, "token END");
    RewriteRuleTokenStream stream_IDENTIFIER = new RewriteRuleTokenStream(adaptor, "token IDENTIFIER");
    RewriteRuleTokenStream stream_BEGIN = new RewriteRuleTokenStream(adaptor, "token BEGIN");
    RewriteRuleSubtreeStream stream_body_bloc = new RewriteRuleSubtreeStream(adaptor, "rule body_bloc");
    try {
        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:240:15: ( BEGIN body_bloc END IDENTIFIER -> ^( INIT_BLOC_VOID body_bloc IDENTIFIER ) )
        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:240:17: BEGIN body_bloc END IDENTIFIER
        {
            BEGIN123 = (Token) match(input, BEGIN, FOLLOW_BEGIN_in_init_bloc_void1931);
            stream_BEGIN.add(BEGIN123);
            pushFollow(FOLLOW_body_bloc_in_init_bloc_void1933);
            body_bloc124 = body_bloc();
            state._fsp--;
            stream_body_bloc.add(body_bloc124.getTree());
            END125 = (Token) match(input, END, FOLLOW_END_in_init_bloc_void1935);
            stream_END.add(END125);
            IDENTIFIER126 = (Token) match(input, IDENTIFIER, FOLLOW_IDENTIFIER_in_init_bloc_void1937);
            stream_IDENTIFIER.add(IDENTIFIER126);
            // AST REWRITE
            // elements: IDENTIFIER, body_bloc
            // token labels:
            // rule labels: retval
            // token list labels:
            // rule list labels:
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", retval != null ? retval.tree : null);
            root_0 = (CommonTree) adaptor.nil();
            // 240:48: -> ^( INIT_BLOC_VOID body_bloc IDENTIFIER )
            {
                // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:240:51: ^( INIT_BLOC_VOID body_bloc IDENTIFIER )
                {
                    CommonTree root_1 = (CommonTree) adaptor.nil();
                    root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(INIT_BLOC_VOID, "INIT_BLOC_VOID"), root_1);
                    adaptor.addChild(root_1, stream_body_bloc.nextTree());
                    adaptor.addChild(root_1, stream_IDENTIFIER.nextNode());
                    adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
