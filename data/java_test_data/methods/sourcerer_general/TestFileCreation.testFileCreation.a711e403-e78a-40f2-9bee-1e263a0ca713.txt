public void testFileCreation() throws IOException {
    Configuration conf = new Configuration();
    if (simulatedStorage) {
        conf.setBoolean(SimulatedFSDataset.CONFIG_PROPERTY_SIMULATED, true);
    }
    MiniDFSCluster cluster = new MiniDFSCluster(conf, 1, true, null);
    FileSystem fs = cluster.getFileSystem();
    try {
        // 
        // check that / exists
        // 
        Path path = new Path("/");
        System.out.println("Path : \"" + path.toString() + "\"");
        System.out.println(fs.getFileStatus(path).isDir());
        assertTrue("/ should be a directory", fs.getFileStatus(path).isDir() == true);
        // create a new file in home directory. Do not close it.
        // 
        Path file1 = new Path("filestatus.dat");
        FSDataOutputStream stm = createFile(fs, file1, 1);
        // verify that file exists in FS namespace
        assertTrue(file1 + " should be a file", fs.getFileStatus(file1).isDir() == false);
        System.out.println("Path : \"" + file1 + "\"");
        // write to file
        writeFile(stm);
        // Make sure a client can read it before it is closed.
        checkFile(fs, file1, 1);
        // verify that file size has changed
        long len = fs.getFileStatus(file1).getLen();
        assertTrue(file1 + " should be of size " + (numBlocks * blockSize) + " but found to be of size " + len, len == numBlocks * blockSize);
        stm.close();
        // verify that file size has changed to the full size
        len = fs.getFileStatus(file1).getLen();
        assertTrue(file1 + " should be of size " + fileSize + " but found to be of size " + len, len == fileSize);
        // can't check capacities for real storage since the OS file system may be changing under us.
        if (simulatedStorage) {
            DataNode dn = cluster.getDataNodes().get(0);
            assertEquals(fileSize, dn.getFSDataset().getDfsUsed());
            assertEquals(SimulatedFSDataset.DEFAULT_CAPACITY - fileSize, dn.getFSDataset().getRemaining());
        }
    } finally {
        cluster.shutdown();
    }
}
