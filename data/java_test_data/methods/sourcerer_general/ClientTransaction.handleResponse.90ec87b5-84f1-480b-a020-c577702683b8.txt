public void handleResponse(SipResponse response) {
    int status = response.getStatus();
    if (response.isInvite()) {
        switch(_state) {
            case STATE_CALLING:
                cancelTimer(TIMER_A);
                cancelTimer(TIMER_B);
                if (status < 200) {
                    setState(STATE_PROCEEDING);
                    if (_pendingCancel != null)
                        doCancel(_pendingCancel);
                } else if (200 <= status && status < 300) {
                    setState(STATE_ACCEPTED);
                    startTimer(TIMER_M, 64L * __T1);
                } else {
                    setState(STATE_COMPLETED);
                    ack(response);
                    if (isTransportReliable())
                        terminate();
                    else
                        startTimer(TIMER_D, __TD);
                }
                _listener.handleResponse(response);
                break;
            case STATE_PROCEEDING:
                if (200 <= status && status < 300) {
                    setState(STATE_ACCEPTED);
                    startTimer(TIMER_M, 64L * __T1);
                } else if (status >= 300) {
                    setState(STATE_COMPLETED);
                    ack(response);
                    if (isTransportReliable())
                        terminate();
                    else
                        startTimer(TIMER_D, __TD);
                }
                _listener.handleResponse(response);
                break;
            case STATE_COMPLETED:
                ack(response);
                response.setHandled(true);
                break;
            case STATE_ACCEPTED:
                if (!(200 <= status && status < 300)) {
                    Log.debug("non 2xx response {} in Accepted state", response);
                    response.setHandled(true);
                } else {
                    _listener.handleResponse(response);
                }
                break;
            default:
                Log.debug("handleResponse (invite) && state ==" + _state);
                response.setHandled(true);
        }
    } else {
        switch(_state) {
            case STATE_TRYING:
                if (status < 200) {
                    setState(STATE_PROCEEDING);
                } else {
                    cancelTimer(TIMER_E);
                    cancelTimer(TIMER_F);
                    setState(STATE_COMPLETED);
                    if (isTransportReliable())
                        // TIMER_K == 0
                        terminate();
                    else
                        startTimer(TIMER_K, __T4);
                }
                if (!_cancel)
                    _listener.handleResponse(response);
                break;
            case STATE_PROCEEDING:
                if (status >= 200) {
                    cancelTimer(TIMER_E);
                    cancelTimer(TIMER_F);
                    setState(STATE_COMPLETED);
                    if (isTransportReliable())
                        terminate();
                    else
                        startTimer(TIMER_K, __T4);
                    if (!_cancel)
                        _listener.handleResponse(response);
                }
                break;
            case STATE_COMPLETED:
                response.setHandled(true);
                break;
            default:
                Log.warn("handleResponse (non-invite) && state ==" + _state);
                response.setHandled(true);
        }
    }
}
