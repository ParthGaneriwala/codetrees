public void mul(int a) {
    if ((this.exponent < 0 && this.mantissa != 0))
        return;
    if (a < 0) {
        sign ^= 1;
        a = -a;
    }
    if ((this.exponent == 0 && this.mantissa == 0) || a == 0) {
        if ((this.exponent < 0 && this.mantissa == 0))
            makeNan();
        else
            makeZero(sign);
        return;
    }
    if ((this.exponent < 0 && this.mantissa == 0))
        return;
    // Normalize int
    int t = a;
    t |= t >> 1;
    t |= t >> 2;
    t |= t >> 4;
    t |= t >> 8;
    t |= t >> 16;
    t = clz_tab[(t * clz_magic) >>> 27];
    exponent += 0x1F - t;
    a <<= t;
    if (exponent < 0) {
        // Overflow
        makeInfinity(sign);
        return;
    }
    long a0 = mantissa & 0x7fffffff;
    long a1 = mantissa >>> 31;
    long b0 = a & 0xffffffffL;
    mantissa = a1 * b0;
    // If we're going to need normalization, we don't want to round twice
    int round = (mantissa < 0) ? 0 : 0x40000000;
    mantissa += ((a0 * b0 + round) >>> 31);
    // Simplified normalize()
    if (mantissa < 0) {
        mantissa = (mantissa + 1) >>> 1;
        exponent++;
        if (// Overflow
        exponent < 0)
            makeInfinity(sign);
    }
}
