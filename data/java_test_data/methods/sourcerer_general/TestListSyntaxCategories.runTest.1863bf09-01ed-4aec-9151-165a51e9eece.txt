public void runTest() {
    Log logger = LogFactory.getLog(getClass());
    OntModel m = ModelFactory.createOntologyModel(m_spec, null);
    m.getDocumentManager().setMetadataSearchPath("file:etc/ont-policy-test.rdf", true);
    if (m_fileName != null) {
        m.read(m_fileName);
    }
    boolean exOccurred = false;
    Iterator i = null;
    try {
        i = doList(m);
    } catch (OntologyException e) {
        exOccurred = true;
    }
    assertEquals("Ontology exception" + (m_exExpected ? " was " : " was not ") + "expected", m_exExpected, exOccurred);
    if (!exOccurred) {
        List expected = expected(m);
        List actual = new ArrayList();
        int extraneous = 0;
        // now we walk the iterator
        while (i.hasNext()) {
            Resource res = (Resource) i.next();
            assertTrue("Should not fail node test on " + res, test(res));
            actual.add(res);
            if (expected != null) {
                if (expected.contains(res)) {
                    expected.remove(res);
                } else {
                    if (!res.isAnon()) {
                        // since we can't list expected anon resources, we ignore them in this check
                        extraneous++;
                        logger.debug("found extraneous result: " + res);
                    }
                }
            }
        }
        // debugging
        if (m_count != actual.size()) {
            logger.debug(getName() + " - expected " + m_count + " results, actual = " + actual.size());
            for (Iterator j = actual.iterator(); j.hasNext(); ) {
                logger.debug(getName() + " - saw actual: " + j.next());
            }
        }
        if (expected != null && !expected.isEmpty()) {
            for (Iterator j = expected.iterator(); j.hasNext(); ) {
                logger.debug(getName() + " - expected but did not find: " + j.next());
            }
        }
        assertEquals(getName() + ": wrong number of results returned", m_count, actual.size());
        if (expected != null) {
            assertTrue("Did not find all expected resources in iterator", expected.isEmpty());
            assertEquals("Found extraneous results, not in expected list", 0, extraneous);
        }
    }
}
