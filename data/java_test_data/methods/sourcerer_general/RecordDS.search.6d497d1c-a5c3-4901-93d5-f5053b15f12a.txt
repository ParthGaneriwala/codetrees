public SearchResult search(SearchResult result, String cluster, String dataSource, long t0, long t1, String filter) throws DataSourceException {
    String filePath = rootFolder + "/" + cluster + "/" + dataSource;
    System.out.println("filePath [" + filePath + "]");
    Calendar calendar = Calendar.getInstance();
    calendar.setTimeInMillis(t1);
    TreeMap<Long, List<Record>> records = result.getRecords();
    int maxCount = 200;
    do {
        System.out.println("start Date [" + calendar.getTime() + "]");
        String fileName = new java.text.SimpleDateFormat("_yyyy_MM_dd_HH").format(calendar.getTime());
        int minutes = calendar.get(Calendar.MINUTE);
        int dec = minutes / 10;
        fileName += "_" + dec;
        int m = minutes - (dec * 10);
        if (m < 5) {
            fileName += "0.evt";
        } else {
            fileName += "5.evt";
        }
        fileName = filePath + "/" + dataSource + fileName;
        try {
            System.out.println("BEFORE fileName  [" + fileName + "]");
            // List<Record> evts = ChukwaFileParser.readData(cluster,dataSource,maxCount, t1, t0, Long.MAX_VALUE, filter, fileName, fs);
            List<Record> evts = ChukwaSequenceFileParser.readData(cluster, dataSource, maxCount, t1, t0, Long.MAX_VALUE, filter, fileName, fs, conf);
            maxCount = maxCount - evts.size();
            System.out.println("AFTER fileName  [" + fileName + "] count=" + evts.size() + " maxCount=" + maxCount);
            for (Record evt : evts) {
                System.out.println("AFTER Loop  [" + evt.toString() + "]");
                long timestamp = evt.getTime();
                if (records.containsKey(timestamp)) {
                    records.get(timestamp).add(evt);
                } else {
                    List<Record> list = new LinkedList<Record>();
                    list.add(evt);
                    records.put(timestamp, list);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        if (maxCount <= 0) {
            System.out.println("BREAKING LOOP AFTER [" + fileName + "] maxCount=" + maxCount);
            break;
        }
        calendar.add(Calendar.MINUTE, -5);
        System.out.println("calendar  [" + calendar.getTimeInMillis() + "] ");
        System.out.println("end       [" + (t0 - 1000 * 60 * 5) + "] ");
    } while (// <= need some code here
    calendar.getTimeInMillis() > (t0 - 1000 * 60 * 5));
    return result;
}
