public String getCommandString() {
    // if we are at TABLE depth, set tablePath and table for use later
    if (treePath.getPathCount() == DEPTH_TABLE) {
        tablePath = treePath;
        table = treePath.getPathComponent(DEPTH_TABLE - 1).toString();
    }
    // table for use later
    if (treePath.getPathCount() == DEPTH_COLUMN) {
        tablePath = treePath.getParentPath();
        table = treePath.getPathComponent(DEPTH_TABLE - 1).toString();
        columnPath = treePath;
        column = treePath.getPathComponent(DEPTH_COLUMN - 1).toString();
    }
    // handle command "SELECT".  Use table and column if set.
    if (command.toUpperCase().equals("SELECT")) {
        String result = "SELECT * FROM " + quoteTableName(table);
        if (column != null) {
            DefaultMutableTreeNode childNode = (DefaultMutableTreeNode) treePath.getLastPathComponent();
            String childName = null;
            boolean isChar;
            if (childNode.getChildCount() > 0) {
                childName = childNode.getFirstChild().toString();
                isChar = childName.indexOf("CHAR") >= 0;
                result += " WHERE " + quoteObjectName(column);
                if (isChar) {
                    result += " LIKE \'%%\'";
                } else {
                    result += " = ";
                }
            }
        }
        return result;
    } else // handle command "UPDATE".  Use table and column if set.
    if (command.toUpperCase().equals("UPDATE")) {
        String result = "UPDATE " + quoteTableName(table) + " SET ";
        if (column != null) {
            result += quoteObjectName(column) + " = ";
        }
        return result;
    } else // handle command "DELETE".  Use table and column if set.
    if (command.toUpperCase().equals("DELETE")) {
        String result = "DELETE FROM " + quoteTableName(table);
        if (column != null) {
            DefaultMutableTreeNode childNode = (DefaultMutableTreeNode) treePath.getLastPathComponent();
            String childName = null;
            boolean isChar;
            if (childNode.getChildCount() > 0) {
                childName = childNode.getFirstChild().toString();
                isChar = childName.indexOf("CHAR") >= 0;
                result += " WHERE " + quoteObjectName(column);
                if (isChar) {
                    result += " LIKE \'%%\'";
                } else {
                    result += " = ";
                }
            }
        }
        return result;
    } else // handle command "INSERT".  Use table and column if set.
    if (command.toUpperCase().equals("INSERT")) {
        TreeNode tableNode;
        Enumeration enumer;
        String columns = "";
        String values = " ";
        String comma = "";
        String quote = "";
        // inserting values into.
        if (tablePath == null) {
            return null;
        }
        tableNode = (TreeNode) tablePath.getLastPathComponent();
        enumer = tableNode.children();
        while (enumer.hasMoreElements()) {
            Object o = enumer.nextElement();
            if (o.toString().equals("Indices")) {
                continue;
            }
            DefaultMutableTreeNode childNode = (DefaultMutableTreeNode) o;
            String childName = null;
            if (childNode.getChildCount() == 0) {
                continue;
            } else {
                childName = childNode.getFirstChild().toString();
            }
            // they need to use a string
            if (childName.indexOf("CHAR") >= 0) {
                quote = "\'\'";
            } else {
                quote = "";
            }
            columns += comma + quoteObjectName(o.toString());
            values += comma + quote;
            comma = ", ";
        }
        return "INSERT INTO " + quoteTableName(table) + "\n( " + columns + " )\nVALUES (" + values + ")";
    } else {
        return "Got here in error " + command + ".  Should never happen";
    }
}
