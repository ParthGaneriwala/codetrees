public String setSimSettings(Vector v) {
    int simGiverID = -1;
    String replyString = "";
    String enteredVar = "";
    short shortVarValue = -1;
    if (v.size() < 3) {
        replyString = "Missing argument(s). simset requires a variable and a value, like in 'tell ROBOKieb simset time 30'.";
    } else {
        for (int i = 0; i < regSimGivers; i++) {
            if (v.elementAt(v.size() - 1).toString().equalsIgnoreCase(simGiver[i])) {
                simGiverID = i;
                break;
            }
        }
        if (simGiverID < 0) {
            replyString = "Sorry, but " + v.elementAt(v.size() - 1).toString() + " does not have a sim-giver account. Speak to Kiebitz.";
        } else {
            if ((simGiverID == currentSimGiver) && ((simStatus == 2) || (simStatus == 3) || (simStatus == 4))) {
                replyString = "Sorry, but I cannot change the variables of a sim open for joining or in progress.";
            } else {
                enteredVar = v.elementAt(v.size() - 2).toString();
                if (enteredVar.equalsIgnoreCase("time")) {
                    try {
                        shortVarValue = Short.parseShort(v.elementAt(v.size() - 3).toString());
                    } catch (NumberFormatException e) {
                    }
                    if ((shortVarValue < 0) || (shortVarValue > 600)) {
                        replyString = "Invalid time specification, must be between 0 and 600!";
                    } else {
                        simTime[simGiverID] = shortVarValue;
                        simChange = true;
                        replyString = "Ok, I set the sim time specification to " + shortVarValue + ".";
                    }
                } else if (enteredVar.equalsIgnoreCase("inc")) {
                    try {
                        shortVarValue = Short.parseShort(v.elementAt(v.size() - 3).toString());
                    } catch (NumberFormatException e) {
                    }
                    if ((shortVarValue < 0) || (shortVarValue > 300)) {
                        replyString = "Invalid inc specification, must be between 0 and 300!";
                    } else {
                        simInc[simGiverID] = shortVarValue;
                        simChange = true;
                        replyString = "Ok, I set the sim inc specification to " + shortVarValue + ".";
                    }
                } else if (enteredVar.equalsIgnoreCase("wild")) {
                    try {
                        shortVarValue = Short.parseShort(v.elementAt(v.size() - 3).toString());
                    } catch (NumberFormatException e) {
                    }
                    if ((shortVarValue > -1) && ((shortVarValue < 6) || ((shortVarValue > 6) && (shortVarValue < 20)) || (shortVarValue == 22) || (shortVarValue == 23) || ((shortVarValue > 24) && (shortVarValue < 31)))) {
                        if ((shortVarValue == 7) || ((shortVarValue > 9) && (shortVarValue < 16)) || (shortVarValue == 19)) {
                            if (simRated[simGiverID]) {
                                replyString = "Ok, I set the wild specification to wild " + shortVarValue + ", but because this wild cannot be played rated, I changed the rated specification to unrated, too.";
                                simRated[simGiverID] = false;
                            } else {
                                replyString = "Ok, I set the wild specification to wild " + shortVarValue + ".";
                            }
                            simWild[simGiverID] = (byte) (shortVarValue);
                            simChange = true;
                        } else {
                            simWild[simGiverID] = (byte) (shortVarValue);
                            simChange = true;
                            replyString = "Ok, I set the wild specification to wild " + shortVarValue + ".";
                        }
                    } else {
                        replyString = "Invalid wild specification. Possible values are: 0,1,2,3,4,5,7,8,9,10,11,12,13,14,15,16,17,18,19,22,23,25,26,27,28,29 and 30.";
                    }
                } else if (enteredVar.equalsIgnoreCase("color")) {
                    if (v.elementAt(v.size() - 3).toString().equalsIgnoreCase("auto")) {
                        simColor[simGiverID] = 0;
                        simChange = true;
                        replyString = "Ok, I set the sim color specification to auto.";
                    } else if (v.elementAt(v.size() - 3).toString().equalsIgnoreCase("white")) {
                        simColor[simGiverID] = 1;
                        simChange = true;
                        replyString = "Ok, I set the sim color specification to white.";
                    } else if (v.elementAt(v.size() - 3).toString().equalsIgnoreCase("black")) {
                        simColor[simGiverID] = 2;
                        simChange = true;
                        replyString = "Ok, I set the sim color specification to black.";
                    } else {
                        replyString = "Invalid color specification. Possible values are 'auto', 'white' and 'black'.";
                    }
                } else if (enteredVar.equalsIgnoreCase("rated")) {
                    if ((v.elementAt(v.size() - 3).toString().equalsIgnoreCase("true")) || (v.elementAt(v.size() - 3).toString().equalsIgnoreCase("on")) || (v.elementAt(v.size() - 3).toString().equalsIgnoreCase("1"))) {
                        simRated[simGiverID] = true;
                        simAllowUnreg[simGiverID] = false;
                        simChange = true;
                        replyString = "Ok, I set the sim rated specification to 'true'. Note however, that ICC discourages rated sims.";
                    } else if ((v.elementAt(v.size() - 3).toString().equalsIgnoreCase("false")) || (v.elementAt(v.size() - 3).toString().equalsIgnoreCase("off")) || (v.elementAt(v.size() - 3).toString().equalsIgnoreCase("0"))) {
                        simRated[simGiverID] = false;
                        simChange = true;
                        replyString = "Ok, I set the sim rated specification to 'false'.";
                    } else {
                        replyString = "Invalid rated specification. Possible values are 'true' and 'false'.";
                    }
                } else if (enteredVar.equalsIgnoreCase("maxplayer")) {
                    try {
                        shortVarValue = Short.parseShort(v.elementAt(v.size() - 3).toString());
                    } catch (NumberFormatException e) {
                    }
                    if ((shortVarValue > 0) && (shortVarValue < maxSimParticipants) && (shortVarValue > simMinPlayer[simGiverID])) {
                        simMaxPlayer[simGiverID] = shortVarValue;
                        simChange = true;
                        replyString = "Ok, I set the maxplayer specification to " + shortVarValue + ". Your sim will start automatically when you reach that many.";
                    } else {
                        replyString = "Invalid maxplayer specification, must be between 1 and " + maxSimParticipants + " and higher than the minplayer value.";
                    }
                } else if (enteredVar.equalsIgnoreCase("minplayer")) {
                    try {
                        shortVarValue = Short.parseShort(v.elementAt(v.size() - 3).toString());
                    } catch (NumberFormatException e) {
                    }
                    if ((shortVarValue > 0) && (shortVarValue < maxSimParticipants) && (shortVarValue < simMaxPlayer[simGiverID])) {
                        simMinPlayer[simGiverID] = shortVarValue;
                        simChange = true;
                        replyString = "Ok, I set the minplayer specification to " + shortVarValue + ". Your sim will be aborted automatically if you fail to reach that many after your wait time.";
                    } else {
                        replyString = "Invalid minplayer specification, must be between 1 and " + maxSimParticipants + " and lower than the maxplayer value.";
                    }
                } else if (enteredVar.equalsIgnoreCase("wait")) {
                    try {
                        shortVarValue = Short.parseShort(v.elementAt(v.size() - 3).toString());
                    } catch (NumberFormatException e) {
                    }
                    if ((shortVarValue > 4) && (shortVarValue < 180)) {
                        simWait[simGiverID] = shortVarValue;
                        simChange = true;
                        replyString = "Ok, I set the wait specification to " + shortVarValue + " minutes.";
                    } else {
                        replyString = "Invalid wait specification, must be between 5 and 179 minutes.";
                    }
                } else if (enteredVar.equalsIgnoreCase("minrating")) {
                    try {
                        shortVarValue = Short.parseShort(v.elementAt(v.size() - 3).toString());
                    } catch (NumberFormatException e) {
                    }
                    if ((shortVarValue > -1) && (shortVarValue < 10000) && (shortVarValue < simMaxRating[simGiverID])) {
                        simMinRating[simGiverID] = shortVarValue;
                        simChange = true;
                        replyString = "Ok, I set the minimum rating specification to " + shortVarValue + ". The players must be rated higher than this (does not apply if you allow guests).";
                    } else {
                        replyString = "Invalid minimum rating specification, must be between 0 and 9999 and lower than the minimum rating.";
                    }
                } else if (enteredVar.equalsIgnoreCase("maxrating")) {
                    try {
                        shortVarValue = Short.parseShort(v.elementAt(v.size() - 3).toString());
                    } catch (NumberFormatException e) {
                    }
                    if ((shortVarValue > -1) && (shortVarValue < 10000) && (shortVarValue > simMinRating[simGiverID])) {
                        simMaxRating[simGiverID] = shortVarValue;
                        simChange = true;
                        replyString = "Ok, I set the maximum rating specification to " + shortVarValue + ". The players must be rated lower than this (does not apply if you allow guests).";
                    } else {
                        replyString = "Invalid maximum rating specification, must be between 0 and 9999 and higher than the minimum rating.";
                    }
                } else if (enteredVar.equalsIgnoreCase("announcelevel")) {
                    replyString = "Not implemented yet.";
                } else if (enteredVar.equalsIgnoreCase("othergames")) {
                    if ((v.elementAt(v.size() - 3).toString().equalsIgnoreCase("true")) || (v.elementAt(v.size() - 3).toString().equalsIgnoreCase("on")) || (v.elementAt(v.size() - 3).toString().equalsIgnoreCase("1"))) {
                        simOtherGames[simGiverID] = true;
                        simChange = true;
                        replyString = "Ok, I set the OtherGames specification to 'true'. The participants will not be blocked from starting other games.";
                    } else if ((v.elementAt(v.size() - 3).toString().equalsIgnoreCase("false")) || (v.elementAt(v.size() - 3).toString().equalsIgnoreCase("off")) || (v.elementAt(v.size() - 3).toString().equalsIgnoreCase("0"))) {
                        simOtherGames[simGiverID] = false;
                        simChange = true;
                        replyString = "Ok, I set the OtherGames specification to 'false'. The participants will be blocked from starting other games.";
                    } else {
                        replyString = "Invalid OtherGames specification. Possible values are 'true' and 'false'.";
                    }
                } else if (enteredVar.equalsIgnoreCase("allowunreg")) {
                    if ((v.elementAt(v.size() - 3).toString().equalsIgnoreCase("true")) || (v.elementAt(v.size() - 3).toString().equalsIgnoreCase("on")) || (v.elementAt(v.size() - 3).toString().equalsIgnoreCase("1"))) {
                        simAllowUnreg[simGiverID] = true;
                        simRated[simGiverID] = false;
                        simChange = true;
                        replyString = "Ok, I set the AllowUnreg specification to 'true'. Guests will be allowed to play (and the sim will be unrated).";
                    } else if ((v.elementAt(v.size() - 3).toString().equalsIgnoreCase("false")) || (v.elementAt(v.size() - 3).toString().equalsIgnoreCase("off")) || (v.elementAt(v.size() - 3).toString().equalsIgnoreCase("0"))) {
                        simAllowUnreg[simGiverID] = false;
                        simChange = true;
                        replyString = "Ok, I set the AllowUnreg specification to 'false'. Guests will not be allowed to play.";
                    } else {
                        replyString = "Invalid AllowUnreg specification. Possible values are 'true' and 'false'.";
                    }
                } else if (enteredVar.equalsIgnoreCase("simAnnounceText")) {
                    replyString = "Not implemented yet.";
                } else {
                    replyString = "Unknown variable! Possible choices are: time, inc, wild, color, rated, maxplayer, minplayer, wait, maxrating, minrating, announcelevel, OtherGames, allowUnreg, simAnnounceText.";
                }
            }
        }
    }
    return replyString;
}
