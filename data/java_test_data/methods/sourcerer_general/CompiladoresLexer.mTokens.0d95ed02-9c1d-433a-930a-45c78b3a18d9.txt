// $ANTLR end "UNICODE_ESC"
public void mTokens() throws RecognitionException {
    // /home/CIN/fmm/Desktop/grammar/Compiladores.g:1:8: ( INT | STR | BOOL | PLUS | MINUS | MULT | DIV | NOT | AND | OR | EQUAL | DIF1 | DIF2 | GTE | LTE | GT | LT | FUNC | AS | END | PROC | PRINT | INPUT | IF | THEN | ELSE | FOR | TO | STEP | EXIT | NEXT | DO | WHILE | LOOP | UNTIL | PROGR | TRUE | FALSE | COMMA | LPAR | RPAR | EOL | ID | INTEGER | COMMENT | WS | STRING )
    int alt10 = 47;
    alt10 = dfa10.predict(input);
    switch(alt10) {
        case 1:
            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:1:10: INT
            {
                mINT();
            }
            break;
        case 2:
            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:1:14: STR
            {
                mSTR();
            }
            break;
        case 3:
            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:1:18: BOOL
            {
                mBOOL();
            }
            break;
        case 4:
            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:1:23: PLUS
            {
                mPLUS();
            }
            break;
        case 5:
            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:1:28: MINUS
            {
                mMINUS();
            }
            break;
        case 6:
            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:1:34: MULT
            {
                mMULT();
            }
            break;
        case 7:
            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:1:39: DIV
            {
                mDIV();
            }
            break;
        case 8:
            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:1:43: NOT
            {
                mNOT();
            }
            break;
        case 9:
            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:1:47: AND
            {
                mAND();
            }
            break;
        case 10:
            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:1:51: OR
            {
                mOR();
            }
            break;
        case 11:
            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:1:54: EQUAL
            {
                mEQUAL();
            }
            break;
        case 12:
            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:1:60: DIF1
            {
                mDIF1();
            }
            break;
        case 13:
            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:1:65: DIF2
            {
                mDIF2();
            }
            break;
        case 14:
            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:1:70: GTE
            {
                mGTE();
            }
            break;
        case 15:
            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:1:74: LTE
            {
                mLTE();
            }
            break;
        case 16:
            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:1:78: GT
            {
                mGT();
            }
            break;
        case 17:
            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:1:81: LT
            {
                mLT();
            }
            break;
        case 18:
            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:1:84: FUNC
            {
                mFUNC();
            }
            break;
        case 19:
            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:1:89: AS
            {
                mAS();
            }
            break;
        case 20:
            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:1:92: END
            {
                mEND();
            }
            break;
        case 21:
            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:1:96: PROC
            {
                mPROC();
            }
            break;
        case 22:
            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:1:101: PRINT
            {
                mPRINT();
            }
            break;
        case 23:
            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:1:107: INPUT
            {
                mINPUT();
            }
            break;
        case 24:
            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:1:113: IF
            {
                mIF();
            }
            break;
        case 25:
            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:1:116: THEN
            {
                mTHEN();
            }
            break;
        case 26:
            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:1:121: ELSE
            {
                mELSE();
            }
            break;
        case 27:
            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:1:126: FOR
            {
                mFOR();
            }
            break;
        case 28:
            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:1:130: TO
            {
                mTO();
            }
            break;
        case 29:
            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:1:133: STEP
            {
                mSTEP();
            }
            break;
        case 30:
            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:1:138: EXIT
            {
                mEXIT();
            }
            break;
        case 31:
            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:1:143: NEXT
            {
                mNEXT();
            }
            break;
        case 32:
            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:1:148: DO
            {
                mDO();
            }
            break;
        case 33:
            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:1:151: WHILE
            {
                mWHILE();
            }
            break;
        case 34:
            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:1:157: LOOP
            {
                mLOOP();
            }
            break;
        case 35:
            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:1:162: UNTIL
            {
                mUNTIL();
            }
            break;
        case 36:
            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:1:168: PROGR
            {
                mPROGR();
            }
            break;
        case 37:
            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:1:174: TRUE
            {
                mTRUE();
            }
            break;
        case 38:
            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:1:179: FALSE
            {
                mFALSE();
            }
            break;
        case 39:
            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:1:185: COMMA
            {
                mCOMMA();
            }
            break;
        case 40:
            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:1:191: LPAR
            {
                mLPAR();
            }
            break;
        case 41:
            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:1:196: RPAR
            {
                mRPAR();
            }
            break;
        case 42:
            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:1:201: EOL
            {
                mEOL();
            }
            break;
        case 43:
            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:1:205: ID
            {
                mID();
            }
            break;
        case 44:
            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:1:208: INTEGER
            {
                mINTEGER();
            }
            break;
        case 45:
            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:1:216: COMMENT
            {
                mCOMMENT();
            }
            break;
        case 46:
            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:1:224: WS
            {
                mWS();
            }
            break;
        case 47:
            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:1:227: STRING
            {
                mSTRING();
            }
            break;
    }
}
