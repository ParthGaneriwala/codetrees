private void init(FactorDescription[] descriptions) {
    assert (descriptions.length <= Byte.MAX_VALUE);
    this.descriptions = descriptions;
    factorid2idx = new HashMap<String, Byte>(descriptions.length);
    ArrayList<Byte> hiddens = new ArrayList<Byte>(0);
    ArrayList<Byte> overts = new ArrayList<Byte>(0);
    factorBitStart = new byte[this.descriptions.length];
    factorBitLength = new byte[this.descriptions.length];
    byte bitOffset = 0;
    for (byte i = 0; i < this.descriptions.length; ++i) {
        FactorDescription desc = this.descriptions[i];
        Byte idx = new Byte(i);
        if (desc.getBits() == 0) {
            desc.setBits(desc.computeBitSize());
        }
        long mask = (1L << desc.getBits()) - 1;
        mask <<= bitOffset;
        if (desc.isOvert()) {
            overts.add(idx);
            overtFactorsMask |= mask;
            compactOvertFactorsSize += desc.getBits();
        } else {
            hiddens.add(idx);
            hiddenFactorsMask |= mask;
            compactHiddenFactorsSize += desc.getBits();
        }
        factorid2idx.put(desc.getId(), idx);
        factorBitStart[i] = bitOffset;
        factorBitLength[i] = desc.getBits();
        bitOffset += desc.getBits();
        assert (bitOffset <= Long.SIZE);
    }
    assert (overts.size() > 0);
    mainFactorIndex = factorid2idx.get(mainFactor);
    hiddenFactors = new byte[hiddens.size()];
    for (byte i = 0; i < hiddens.size(); ++i) {
        hiddenFactors[i] = hiddens.get(i).byteValue();
    }
    overtFactors = new byte[overts.size()];
    for (byte i = 0; i < overts.size(); ++i) {
        overtFactors[i] = overts.get(i).byteValue();
    }
    parentIndex = new byte[this.descriptions.length];
    for (int i = 0; i < parentIndex.length; ++i) {
        if (this.descriptions[i].getParent() == null) {
            parentIndex[i] = -1;
        } else {
            for (byte j = 0; j < parentIndex.length; ++j) {
                if (this.descriptions[j] == this.descriptions[i].getParent()) {
                    parentIndex[i] = j;
                    break;
                }
            }
        }
    }
    FactorTuple.overtMask = overtFactorsMask;
    FactorTuple.hiddenMask = hiddenFactorsMask;
}
