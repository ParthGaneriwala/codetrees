private void traverseDownwards() {
    for (int i = indexOfLowestLevelWithMaxNodes + 1; i < levels.size(); i++) {
        BFSLevel level = levels.elementAt(i);
        // y offset for this
        int yOffSet = getVerticalDistanceForLayer(i);
        // level
        Vector<Node> nodesInLevel = level.getNodes();
        int numNodesInLevel = nodesInLevel.size();
        // Horizontal offset of the end of the previous
        int xAdvance = 0;
        // node (to avoid collisions)
        for (int j = 0; j < numNodesInLevel; j++) {
            Node currNode = nodesInLevel.elementAt(j);
            DrawingParameters dpNode = nodesVsDrawingParameters.get(currNode);
            int nodeSize = dpNode.getSize().width;
            Vector preds = currNode.getPredecessors();
            int numPreds = preds.size();
            // To be determined
            int xOffset = 0;
            if (numPreds == 1) {
                Node predNode = (Node) preds.elementAt(0);
                DrawingParameters dpParent = nodesVsDrawingParameters.get(predNode);
                int xOffsetParent = dpParent.getXPosition();
                int parentNodeSize = dpParent.getSize().width;
                if (isSingleParentRightDiagonal(predNode, currNode, i)) {
                    xOffset = xOffsetParent - nodeSize;
                } else if (isSingleParentLeftDiagonal(predNode, currNode, i)) {
                    xOffset = xOffsetParent + parentNodeSize;
                } else {
                    // The node is directly below the parent; center it
                    // against the parent
                    xOffset = positionNodeBelowParent(dpNode, dpParent);
                }
            } else if (numPreds == 2) {
                Node leftParent = (Node) preds.elementAt(0);
                Node rightParent = (Node) preds.elementAt(1);
                BFSLevel prevLevel = levels.elementAt(i - 1);
                if (prevLevel.containsNode(leftParent) && prevLevel.containsNode(rightParent)) {
                    int indexOfLeftParent = prevLevel.getIndexOfNode(leftParent);
                    int indexOfRightParent = prevLevel.getIndexOfNode(rightParent);
                    if (indexOfRightParent == indexOfLeftParent + 1) {
                        // The two parents are adjacent to each other;
                        // center the node between the two
                        xOffset = positionSuccBtnParents(dpNode, leftParent, rightParent);
                    } else {
                        // A sub-graph exists between the two parents;
                        // position the node directly
                        // below the left parent
                        xOffset = positionNodeBelowParent(dpNode, nodesVsDrawingParameters.get(leftParent));
                    }
                } else {
                    if (prevLevel.containsNode(leftParent)) {
                        DrawingParameters dpParent = nodesVsDrawingParameters.get(leftParent);
                        int xOffsetLeftParent = dpParent.getXPosition();
                        int widthOfLeftParent = dpParent.getSize().width;
                        xOffset = xOffsetLeftParent + widthOfLeftParent;
                    } else if (prevLevel.containsNode(rightParent)) {
                        if (nodeInLevelOrPrecedingLevels(leftParent, i) == null) {
                            // Left
                            // parent
                            // must
                            // be a
                            // cycle
                            // start
                            xOffset = positionNodeBelowParent(dpNode, nodesVsDrawingParameters.get(rightParent));
                        } else {
                            DrawingParameters dpParent = nodesVsDrawingParameters.get(rightParent);
                            int xOffsetLeftParent = dpParent.getXPosition();
                            int widthOfNode = dpNode.getSize().width;
                            xOffset = xOffsetLeftParent - widthOfNode;
                        }
                    }
                }
            }
            // Assign the xOffset to the drawing parameter now
            if (xOffset < xAdvance + horizontalGap)
                xOffset = xAdvance + horizontalGap;
            dpNode.setXPosition(xOffset);
            dpNode.setYPosition(yOffSet);
            // Update xAdvance
            xAdvance = xOffset + dpNode.getSize().width;
        }
    }
}
