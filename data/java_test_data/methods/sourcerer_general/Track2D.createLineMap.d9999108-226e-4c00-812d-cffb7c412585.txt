private void createLineMap(Strand inStrand) {
    Map<Gene2D, String> lineMap = null;
    List<List<Gene2D>> levelLists = new ArrayList<List<Gene2D>>();
    List<Gene2D> genes = (inStrand == Strand.FORWARD ? mForwardGenes : mReverseGenes);
    if (genes != null) {
        Collections.sort(genes);
        lineMap = new HashMap<Gene2D, String>();
        for (Gene2D gene : genes) {
            if (gene.inDisplayRegion()) {
                int level = 1;
                boolean assigningLevel = true;
                while (assigningLevel) {
                    Gene2D lastGene = getLastGeneForLevel(level, levelLists);
                    if (lastGene != null && genesAreTooCloseTogether(lastGene, gene)) {
                        level++;
                    } else {
                        addGeneToLevel(gene, level, levelLists);
                        lineMap.put(gene, level + "");
                        assigningLevel = false;
                    }
                }
            }
        }
    }
    if (inStrand == Strand.FORWARD) {
        mForwardLineMap = lineMap;
        mNumForwardLines = levelLists.size();
        mForwardLineHeights = determineLineHeights(levelLists);
        // mForwardImageHeightInPixels = mNumForwardLines * (mLineHeightInPixels + mLinePaddingInPixels);
        mForwardImageHeightInPixels = sum(mForwardLineHeights) + mForwardLineHeights.size() * mLinePaddingInPixels;
    } else {
        mReverseLineMap = lineMap;
        mNumReverseLines = levelLists.size();
        mReverseLineHeights = determineLineHeights(levelLists);
        // mReverseImageHeightInPixels = mNumReverseLines * (mLineHeightInPixels + mLinePaddingInPixels);
        mReverseImageHeightInPixels = sum(mReverseLineHeights) + mReverseLineHeights.size() * mLinePaddingInPixels;
    }
}
