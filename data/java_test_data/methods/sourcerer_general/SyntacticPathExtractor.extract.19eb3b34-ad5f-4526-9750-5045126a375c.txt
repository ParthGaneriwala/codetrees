public List<Feature> extract(JCas view, Annotation leftAnnotation, Annotation rightAnnotation) throws CleartkExtractorException {
    TreebankNode leftConstituent;
    TreebankNode rightConstituent;
    Annotation currentAnnotation = leftAnnotation;
    try {
        leftConstituent = (TreebankNode) leftAnnotation;
        currentAnnotation = rightAnnotation;
        rightConstituent = (TreebankNode) rightAnnotation;
    } catch (ClassCastException e) {
        throw CleartkExtractorException.wrongAnnotationType(TreebankNode.class, currentAnnotation);
    }
    List<TreebankNode> fromStart = TreebankNodeUtil.getPathToRoot(leftConstituent);
    List<TreebankNode> fromEnd = TreebankNodeUtil.getPathToRoot(rightConstituent);
    String pathFeatureName = null;
    String lengthFeatureName = null;
    fromEnd.remove(fromEnd.size() - 1);
    while (fromStart.size() > 1 && fromEnd.size() > 0 && fromStart.get(fromStart.size() - 2) == fromEnd.get(fromEnd.size() - 1)) {
        fromStart.remove(fromStart.size() - 1);
        fromEnd.remove(fromEnd.size() - 1);
    }
    int length = fromStart.size();
    if (!isPartial)
        length += fromEnd.size();
    try {
        ListIterator<TreebankNode> it = fromStart.listIterator();
        StringBuffer pathBuffer = new StringBuffer();
        boolean first = true;
        while (it.hasNext()) {
            Feature feature = this.pathMemberExtractor.extract(view, it.next()).get(0);
            if (first) {
                String s = feature.getName();
                if (isPartial) {
                    pathFeatureName = Feature.createName(name, "PartialSyntacticPath(" + s + ")");
                    lengthFeatureName = Feature.createName(name, "PartialSyntacticPath", "Length");
                } else {
                    pathFeatureName = Feature.createName(name, "SyntacticPath(" + s + ")");
                    lengthFeatureName = Feature.createName(name, "SyntacticPath", "Length");
                }
                first = false;
            } else {
                pathBuffer.append(this.UP_SEPARATOR);
            }
            pathBuffer.append(feature.getValue().toString());
        }
        if (!isPartial) {
            it = fromEnd.listIterator(fromEnd.size());
            while (it.hasPrevious()) {
                Feature feature = this.pathMemberExtractor.extract(view, it.previous()).get(0);
                pathBuffer.append(this.DOWN_SEPARATOR);
                pathBuffer.append(feature.getValue().toString());
            }
        }
        List<Feature> features = new ArrayList<Feature>(2);
        features.add(new Feature(pathFeatureName, pathBuffer.toString()));
        features.add(new Feature(lengthFeatureName, (long) length));
        return features;
    } catch (IndexOutOfBoundsException e) {
        return new ArrayList<Feature>(0);
    }
}
