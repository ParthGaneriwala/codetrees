public static void writeValidationIndice(String path, String title, Map<String, String> params, Dataset dataset) {
    path = path.concat(".indice");
    File file = new File(path);
    Map<Integer, Cluster> clustermap = dataset.getClustermap();
    String unclassified = (clustermap.get(FeatureVector.UNCLASSIFIED) == null) ? "none" : String.valueOf(clustermap.get(FeatureVector.UNCLASSIFIED).size());
    // Create file if it does not exist
    try {
        file.createNewFile();
        PrintWriter pw = new PrintWriter(file);
        pw.println();
        pw.println("*******************" + title + "************************");
        pw.println("Number of Feature Vectors: " + dataset.size());
        pw.println("Feature Vector Dimension: " + dataset.get(0).getDimension());
        for (String name : params.keySet()) {
            pw.println(name + ": " + params.get(name));
        }
        pw.println("Number Of Clusters calculated: " + clustermap.size());
        pw.println("Unclassified FeatureVectors: " + unclassified);
        pw.println("-----------------------------------------------------");
        CIndex ci = new CIndex();
        float cindex = ci.calculateIndex(dataset);
        pw.println("CIndex: " + cindex);
        DBIndex dbindex = new DBIndex();
        float db = dbindex.calculateIndex(dataset);
        pw.println("DBIndex: " + db);
        DunnIndex di = new DunnIndex();
        float dunnIndex = di.calculateIndex(dataset);
        pw.println("DunnIndex: " + dunnIndex);
        FowlkesMallowsIndex fmiIndex = new FowlkesMallowsIndex();
        float fowlkesMallows = fmiIndex.calculateIndex(dataset);
        pw.println("FowlkesMallowsIndex: " + fowlkesMallows);
        JaccardIndex jaccardIndex = new JaccardIndex();
        float ji = jaccardIndex.calculateIndex(dataset);
        pw.println("JaccardIndex: " + ji);
        RandIndex randIndex = new RandIndex();
        float ri = randIndex.calculateIndex(dataset);
        pw.println("RandIndex: " + ri);
        SilhouetteIndex siIndex = new SilhouetteIndex();
        float si = siIndex.calculateIndex(dataset);
        pw.println("Silhouette-Index: " + si);
        BPIndex bpIndex = new BPIndex();
        float bipartiteIndex = bpIndex.calculateIndex(dataset);
        pw.println("Bipartite-Index: " + bipartiteIndex);
        pw.flush();
        pw.close();
    } catch (IOException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    }
}
