public List<ModelObject> getListObj(String modelName, String id, int count, int begin, Criteria criteria) {
    Manager manager = getManager(modelName);
    List<ModelObject> list = new ArrayList<ModelObject>();
    if (id.trim().equals("")) {
        System.out.println("getList(" + modelName + ")");
        String methodName = config.getListMethod(modelName);
        try {
            Class[] params = new Class[1];
            params[0] = criteria.getClass();
            Method method = manager.getClass().getMethod(methodName, params);
            if (method == null) {
                System.out.println("Method not found: " + methodName);
            }
            Object[] objs = new Object[1];
            objs[0] = criteria;
            System.out.println("invoke manager begin");
            List ret = (List) method.invoke(manager, objs);
            System.out.println("invoke manager end " + ret.size());
            int counter = count;
            int pointer = 0;
            for (Iterator it = ret.iterator(); it.hasNext(); ) {
                pointer = pointer + 1;
                ModelObject model = (ModelObject) it.next();
                if (count == 0) {
                    list.add(model);
                } else {
                    if (pointer >= begin) {
                        list.add(model);
                        counter--;
                    }
                    if (counter == 0) {
                        break;
                    }
                }
            }
        } catch (SecurityException e) {
            e.printStackTrace();
        } catch (IllegalArgumentException e) {
            e.printStackTrace();
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        }
    } else {
        System.out.println("getBean(" + modelName + ")");
        String methodName = config.getGetMethod(modelName);
        try {
            Method method = manager.getClass().getMethod(methodName, new Class[] { String.class });
            if (method == null) {
                System.out.println("Method not found: " + methodName);
            }
            ModelObject model = (ModelObject) method.invoke(manager, id);
            list.add(model);
        } catch (SecurityException e) {
            e.printStackTrace();
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        }
    }
    return list;
}
