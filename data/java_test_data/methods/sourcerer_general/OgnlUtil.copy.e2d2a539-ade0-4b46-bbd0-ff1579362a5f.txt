public static void copy(Object from, Object to, Map context, Collection exclusions, Collection inclusions) {
    if (from == null || to == null) {
        log.warn("Attempting to copy from or to a null source. This is illegal and is bein skipped. This may be due to an error in an OGNL expression, action chaining, or some other event.");
        return;
    }
    Map contextFrom = Ognl.createDefaultContext(from);
    Ognl.setTypeConverter(contextFrom, XWorkConverter.getInstance());
    Map contextTo = Ognl.createDefaultContext(to);
    Ognl.setTypeConverter(contextTo, XWorkConverter.getInstance());
    PropertyDescriptor[] fromPds;
    PropertyDescriptor[] toPds;
    try {
        fromPds = getPropertyDescriptors(from);
        toPds = getPropertyDescriptors(to);
    } catch (IntrospectionException e) {
        log.error("An error occured", e);
        return;
    }
    Map toPdHash = new HashMap();
    for (int i = 0; i < toPds.length; i++) {
        PropertyDescriptor toPd = toPds[i];
        toPdHash.put(toPd.getName(), toPd);
    }
    for (int i = 0; i < fromPds.length; i++) {
        PropertyDescriptor fromPd = fromPds[i];
        if (fromPd.getReadMethod() != null) {
            boolean copy = true;
            if (exclusions != null && exclusions.contains(fromPd.getName())) {
                copy = false;
            } else if (inclusions != null && !inclusions.contains(fromPd.getName())) {
                copy = false;
            }
            if (copy == true) {
                PropertyDescriptor toPd = (PropertyDescriptor) toPdHash.get(fromPd.getName());
                if ((toPd != null) && (toPd.getWriteMethod() != null)) {
                    try {
                        Object expr = OgnlUtil.compile(fromPd.getName());
                        Object value = Ognl.getValue(expr, contextFrom, from);
                        Ognl.setValue(expr, contextTo, to, value);
                    } catch (OgnlException e) {
                    // ignore, this is OK
                    }
                }
            }
        }
    }
}
