public static Table QueryCIndex(Comparable iComparable1, Comparable iComparable2, int inMemorySize) throws Exception {
    statistics();
    Query.indexTables(inMemorySize);
    File tmp = new File(Utils.FILEPATH_OUTPUT + "queryC.txt");
    File tmp2 = new File(Utils.FILEPATH_WORKDIR + "join.txt");
    File tmp3 = new File(Utils.FILEPATH_WORKDIR + "projection.txt");
    File tmp4 = new File(Utils.FILEPATH_WORKDIR + "projection2.txt");
    File tmp5 = new File(Utils.FILEPATH_WORKDIR + "projection3.txt");
    File tmp6 = new File(Utils.FILEPATH_WORKDIR + "projection4.txt");
    StringBuffer qp = new StringBuffer();
    Table lineitem = m_lineitem.clone();
    Table part = new Part();
    Table oTable;
    Table tmpT;
    double sum = 0;
    tmpT = part;
    part = SQL.projection(part, tmp3, new int[] { part.getIndex(Part.FIELD_P_PARTKEY), part.getIndex(Part.FIELD_P_BRAND), part.getIndex(Part.FIELD_P_CONTAINER) }, inMemorySize);
    qp.append(getQPEntry(tmpT, null, part, "Projection", new String[] { Part.FIELD_P_PARTKEY, Part.FIELD_P_BRAND, Part.FIELD_P_CONTAINER }));
    sum += part.getExecutionTime();
    tmpT = part;
    oTable = SQL.whereEqual(part, tmp, new int[] { part.getIndex(Part.FIELD_P_BRAND), part.getIndex(Part.FIELD_P_CONTAINER) }, new Comparable[] { iComparable1, iComparable2 }, inMemorySize);
    qp.append(getQPEntry(tmpT, null, oTable, "Where Equal", new String[] { Part.FIELD_P_BRAND, Part.FIELD_P_CONTAINER }));
    sum += oTable.getExecutionTime();
    tmpT = oTable;
    oTable = SQL.projection(oTable, tmp6, new int[] { part.getIndex(Part.FIELD_P_PARTKEY) }, inMemorySize);
    qp.append(getQPEntry(tmpT, null, oTable, "Projection", new String[] { Part.FIELD_P_PARTKEY }));
    sum += oTable.getExecutionTime();
    tmpT = lineitem;
    lineitem = SQL.projection(lineitem, tmp4, new int[] { lineitem.getIndex(Lineitem.FIELD_L_PARTKEY), lineitem.getIndex(Lineitem.FIELD_L_EXTENDEDPRICE) }, inMemorySize);
    qp.append(getQPEntry(tmpT, null, lineitem, "Projection", new String[] { Lineitem.FIELD_L_PARTKEY, Lineitem.FIELD_L_EXTENDEDPRICE }));
    sum += lineitem.getExecutionTime();
    tmpT = oTable;
    oTable = SQL.indexJoin(oTable, lineitem, tmp2, part.getIndex(Part.FIELD_P_PARTKEY), lineitem.getIndex(Lineitem.FIELD_L_PARTKEY), SQL.JOIN_NATURAL, inMemorySize);
    qp.append(getQPEntry(tmpT, lineitem, oTable, "Index Join", new String[] { Part.FIELD_P_PARTKEY, Lineitem.FIELD_L_PARTKEY }));
    sum += oTable.getExecutionTime();
    tmpT = oTable;
    oTable = SQL.projection(oTable, tmp5, new int[] { oTable.getIndex(Lineitem.FIELD_L_EXTENDEDPRICE) }, inMemorySize);
    qp.append(getQPEntry(tmpT, null, oTable, "Projection", new String[] { Lineitem.FIELD_L_EXTENDEDPRICE }));
    sum += oTable.getExecutionTime();
    tmpT = oTable;
    oTable = SQL.sum(oTable, tmp, oTable.getIndex(Lineitem.FIELD_L_EXTENDEDPRICE), inMemorySize);
    qp.append(getQPEntry(tmpT, null, oTable, "Sum", new String[] { Lineitem.FIELD_L_EXTENDEDPRICE }));
    sum += oTable.getExecutionTime();
    qp.append("Total: " + sum);
    copyAndAppend(oTable, new File(Utils.FILEPATH_OUTPUT + "cIndex.out"), qp.toString(), inMemorySize);
    ProjectGUI.getInstance().update("Memory Execution: QueryC done", 0);
    System.out.println("Done C");
    return oTable;
}
