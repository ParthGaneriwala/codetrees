public boolean undoMove(int test) {
    if (// do nothing if there's no move to undo
    !undoable[test])
        return false;
    // move the rook back if the move was a castle
    if (lastMoveWasCastle[test]) {
        BoardSquare // the rook that was moved in the castle
        rook, // the rook's home square
        src;
        // select rook and rook's home square based on direction of move
        if (lastMoveTo[test].x > lastMoveFrom[test].x) {
            src = get(7, lastMoveFrom[test].y);
            rook = get(lastMoveTo[test].x - 1, lastMoveFrom[test].y);
        } else {
            src = get(0, lastMoveFrom[test].y);
            rook = get(lastMoveTo[test].x + 1, lastMoveFrom[test].y);
        }
        // move the rook back to its home
        setSelectedSquare(rook);
        src.moveSelectedPieceHere();
        // Note: If the move was a castle, the associated rook definitely wasn't
        // moved prior to that.
        // unflag rook as having been moved
        src.getContents().setMoved(false);
    }
    // move the piece at "to" back to "from"
    BoardSquare f = get(lastMoveFrom[test]);
    BoardSquare t = get(lastMoveTo[test]);
    setSelectedSquare(t);
    f.moveSelectedPieceHere();
    // restore previous hasMoved status
    f.getContents().setMoved(oldHasMoved[test]);
    // demote piece to pawn if the undone move involved a promotion
    if (lastMoveWasPromotion[test])
        f.setContents(new Pawn(f.getContents()));
    // put the captured piece (if any) back in its square
    if (lastMoveWasEnPassant[test]) {
        Point tLoc = t.getLocation();
        if (f.getLocation().y < tLoc.y)
            t.setLocation(tLoc.x, tLoc.y + 1);
        else
            t.setLocation(tLoc.x, tLoc.y - 1);
    }
    t.setContents(lastCaptured[test]);
    if (lastCaptured[test] != null) {
        t.setIcon(lastCaptured[test].getIcon());
        lastCaptured[test].move(lastMoveTo[test], t);
        lastCaptured[test].setMoved(capturedHasMoved[test]);
        // a component is manually removed/added.
        if (test == 0) {
            if (lastCaptured[0].getColor() == PieceColor.WHITE && game.deadPieces1.getComponentCount() > 0) {
                game.deadPieces1.remove(0);
                game.deadPieces1.validate();
                game.deadPieces1.repaint();
            } else if (lastCaptured[0].getColor() == PieceColor.BLACK && game.deadPieces2.getComponentCount() > 0) {
                game.deadPieces2.remove(0);
                game.deadPieces2.validate();
                game.deadPieces2.repaint();
            }
        }
    }
    // can't undo again until a move has taken place
    undoable[test] = false;
    return true;
}
