protected void preProcessCzCoord(DepTree tree) {
    int coordId, nextId, prevId, size = tree.size(), gap = 10, count, total;
    DepNode coord, prev, next;
    DepFeat prevFeats, nextFeats;
    String nextPos, tmp;
    double score, bestScore;
    JObjectObjectTuple<DepNode, DepNode> bestPair = new JObjectObjectTuple<DepNode, DepNode>(null, null);
    final String SubPOS = DepLib.CZ_FEAT[9];
    for (coordId = 1; coordId < size; coordId++) {
        coord = tree.get(coordId);
        if (!coord.getFeat(SubPOS).equals("^") && !coord.lemma.matches(",|:|&|\\+"))
            continue;
        bestScore = 0;
        for (nextId = coordId + 1; nextId <= coordId + gap && nextId < size; nextId++) {
            next = tree.get(nextId);
            nextFeats = next.feats;
            nextPos = nextFeats.get(SubPOS);
            total = nextFeats.size();
            for (prevId = coordId - 1; prevId >= coordId - gap && prevId > 0; prevId--) {
                prev = tree.get(prevId);
                prevFeats = prev.feats;
                if (!nextPos.equals(prevFeats.get(SubPOS)))
                    continue;
                count = 0;
                for (String nextKey : nextFeats.keySet()) {
                    if (nextKey.equals(SubPOS))
                        continue;
                    tmp = prevFeats.get(nextKey);
                    if (tmp != null && tmp.equals(nextFeats.get(nextKey)))
                        count++;
                }
                score = (double) count / total;
                if (score > bestScore) {
                    bestScore = score;
                    bestPair.set(prev, next);
                }
                if (score >= 0.8)
                    break;
            }
        }
        if (bestScore > 0) {
            coord.leftMostDep = bestPair.o1;
            coord.rightMostDep = bestPair.o2;
            bestPair.o1.coordHead = coord;
            bestPair.o2.coordHead = coord;
        }
    }
}
