public void run() {
    try {
        DataInputStream inStream = new DataInputStream(socket.getInputStream());
        int count;
        String request;
        String name = null;
        int method = REQUEST_TYPE_BAD;
        int len = -1;
        // read line, ignoring any leading blank lines
        do {
            count = InOutUtil.readLine(inStream, rowOut);
            if (count == 0) {
                throw new Exception();
            }
        } while (count < 2);
        byte[] byteArray = rowOut.getBuffer();
        int offset = rowOut.size() - count;
        if (ArrayUtil.containsAt(byteArray, offset, BYTES_POST)) {
            method = REQUEST_TYPE_POST;
            offset += BYTES_POST.length;
        } else if (ArrayUtil.containsAt(byteArray, offset, BYTES_GET)) {
            method = REQUEST_TYPE_GET;
            offset += BYTES_GET.length;
        } else if (ArrayUtil.containsAt(byteArray, offset, BYTES_HEAD)) {
            method = REQUEST_TYPE_HEAD;
            offset += BYTES_HEAD.length;
        } else {
            throw new Exception();
        }
        count = ArrayUtil.countStartElementsAt(byteArray, offset, BYTES_WHITESPACE);
        if (count == 0) {
            throw new Exception();
        }
        offset += count;
        count = ArrayUtil.countNonStartElementsAt(byteArray, offset, BYTES_WHITESPACE);
        name = new String(byteArray, offset, count, ENCODING);
        switch(method) {
            case REQUEST_TYPE_BAD:
                processError(REQUEST_TYPE_BAD);
                break;
            case REQUEST_TYPE_GET:
                processGet(name, true);
                break;
            case REQUEST_TYPE_HEAD:
                processGet(name, false);
                break;
            case REQUEST_TYPE_POST:
                processPost(inStream, name);
                break;
        }
        inStream.close();
        socket.close();
    } catch (Exception e) {
        server.printStackTrace(e);
    }
}
