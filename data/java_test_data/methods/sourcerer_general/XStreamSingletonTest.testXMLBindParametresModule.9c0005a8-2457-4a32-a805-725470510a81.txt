public void testXMLBindParametresModule() {
    FileWriter fw1 = null;
    FileWriter fw2 = null;
    FileReader fr2 = null;
    try {
        ParametresModules pModules = new ParametresModules();
        // Parametre 1
        Parametre parametre1 = new Parametre();
        parametre1.setNomParametre("PARAMETRE_1");
        ReponsesDonneeDynamique reponse11 = new ReponsesDonneeDynamique();
        reponse11.addValeur("VALEUR_11");
        reponse11.addValeur("VALEUR_12");
        parametre1.setReponses(reponse11);
        pModules.addParametre(parametre1);
        // Parametre 2
        Parametre parametre2 = new Parametre();
        parametre2.setNomParametre("PARAMETRE_2");
        ReponsesDonneeDynamique reponse21 = new ReponsesDonneeDynamique();
        reponse21.addValeur("VALEUR_21");
        reponse21.addValeur("VALEUR_22");
        parametre2.setReponses(reponse21);
        pModules.addParametre(parametre2);
        // Parametre 3
        Parametre parametre3 = new Parametre();
        parametre3.setNomParametre("PARAMETRE_3");
        ReponsesDonneeDynamique reponse31 = new ReponsesDonneeDynamique();
        reponse31.addValeur(null);
        reponse31.addValeur(null);
        parametre3.setReponses(reponse31);
        pModules.addParametre(parametre3);
        // Test de l'�criture dans un fichier
        XStreamSingleton xStream = XStreamSingleton.getInstance();
        fw1 = new FileWriter(temp + "parametreModule.xml", false);
        xStream.toXML(pModules, fw1);
        // test de r�cup�ration dans un fichier
        fr2 = new FileReader(temp + "parametreModule.xml");
        ParametresModules rResult = (ParametresModules) xStream.fromXML(fr2);
        // on ecrit le r�sultat de la r�cup�ration pour v�rifier que les
        // deux fichiers sur le disques sont les m�mes
        fw2 = new FileWriter(temp + "parametreModule2.xml", false);
        xStream.toXML(rResult, fw2);
        // On v�rifie que les deux chaines XML sont les m�mes
        assertEquals(xStream.toXML(pModules), xStream.toXML(rResult));
        // on r�cup�re la hashtable des parametres et on v�rifie qu'elle
        // contient bien toutes les donn�es
        Hashtable<String, List<String>> hashParams = rResult.getHashParametres();
        assertNotNull(hashParams);
        List listeValeurParam1 = hashParams.get("PARAMETRE_1");
        List listeValeurParam2 = hashParams.get("PARAMETRE_2");
        List listeValeurParam3 = hashParams.get("PARAMETRE_3");
        // on verifie que les listes de valeurs de chaque param est non
        // null
        assertNotNull(listeValeurParam1);
        assertNotNull(listeValeurParam2);
        assertNotNull(listeValeurParam3);
        // on v�rifie que les listes de valeurs de chaque param contient
        // bien deux valeurs
        assertTrue(listeValeurParam1.size() == 2);
        assertTrue(listeValeurParam2.size() == 2);
        assertTrue(listeValeurParam3.size() == 2);
        assertEquals(listeValeurParam1.get(0), "VALEUR_11");
        assertEquals(listeValeurParam1.get(1), "VALEUR_12");
        assertEquals(listeValeurParam2.get(0), "VALEUR_21");
        assertEquals(listeValeurParam2.get(1), "VALEUR_22");
        assertEquals(listeValeurParam3.get(0), null);
        assertEquals(listeValeurParam3.get(1), null);
    } catch (Exception e) {
        e.printStackTrace();
    } finally {
        if (fw1 != null) {
            try {
                fw1.flush();
                fw1.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        if (fw2 != null) {
            try {
                fw2.flush();
                fw2.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        if (fr2 != null) {
            try {
                fr2.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
}
