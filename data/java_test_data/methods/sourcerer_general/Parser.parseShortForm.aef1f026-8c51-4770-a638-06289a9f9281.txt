private int parseShortForm(String[] args, int index) {
    Character paramFlag = null;
    int equalsIndex = args[index].indexOf('=');
    int parseTo = args[index].length();
    if (equalsIndex != -1) {
        parseTo = equalsIndex;
    }
    // of the argument
    for (int charPos = 1; charPos < parseTo; ++charPos) {
        // paramFlag is the single short character used as a flag.
        // multiple flags might exist here,
        // which is why we're looping through them.
        paramFlag = new Character(args[index].charAt(charPos));
        // we'll need to reference the appropriate parameter both as a
        // Flagged and as
        // an Parameter down below.
        Flagged option = config.getByShortFlag(paramFlag);
        Parameter param = (Parameter) option;
        // unknown flag
        if (option == null) {
            result.addException(null, new UnknownFlagException(paramFlag));
        } else {
            // then process it.
            if (option instanceof Switch) {
                if (charPos == (equalsIndex - 1)) {
                    result.addException(param.getID(), new SyntaxException("Switch \"" + paramFlag + "\" does not take any parameters."));
                } else {
                    // // KPB-start
                    // // Qualified switches have a format like "-o:value"
                    // if (parseTo >= "-o:".length() && args[index].charAt(charPos+1) == ':') {
                    // // we have a QualifiedSwitch
                    // processParameter(param, args[index].substring(charPos+1));
                    // break; // args[index] completely parsed, so get out of loop
                    // }
                    // else {
                    processParameter(param, null);
                // }
                // //>>>>>KPB
                }
            // flag is not a switch, so we first check to make sure there IS
            // a value specified.
            } else if (option instanceof QualifiedSwitch) {
                // flag is a QualifiedSwitch.
                if ((args[index].length() > (charPos + 1)) && args[index].charAt(charPos + 1) == ':') {
                    // the QualifiedSwitch is, in fact, qualified
                    // ':' must be part of the argument
                    processParameter(param, args[index].substring(charPos + 2));
                    // args[index] completely parsed, so get out of loop
                    break;
                } else {
                    processParameter(param, null);
                }
            } else {
                // it's an option
                String paramEquals = null;
                // on the right
                if (equalsIndex != -1) {
                    paramEquals = args[index].substring(equalsIndex + 1);
                    processParameter(param, paramEquals);
                } else {
                    if (charPos < parseTo - 1) {
                        // the value is just after the short option (no space)
                        paramEquals = args[index].substring(charPos + 1, parseTo);
                        processParameter(param, paramEquals);
                        break;
                    } else {
                        // otherwise, it's the next argument.
                        ++index;
                        // || args[index].startsWith("-")) {
                        if (index >= args.length) {
                            result.addException(param.getID(), new SyntaxException("No value specified for option \"" + paramFlag + "\"."));
                        } else {
                            paramEquals = args[index];
                            processParameter(param, paramEquals);
                        }
                    }
                }
            }
        }
    }
    ++index;
    return (index);
}
