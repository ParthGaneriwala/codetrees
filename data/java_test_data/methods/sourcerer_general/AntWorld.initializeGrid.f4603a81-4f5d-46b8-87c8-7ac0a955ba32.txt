private void initializeGrid() {
    cells = new Vector<Vector<Cell>>();
    // Empty empty = new Empty();
    for (int i = 0; i < HEIGHT; i++) {
        cells.add(i, new Vector<Cell>(WIDTH));
        for (int j = 0; j < WIDTH; j++) {
            cells.get(i).add(j, new Cell());
        }
    }
    Wall wall = new Wall();
    Random r = new Random();
    for (int i = 0; i < NB_WALL; i++) {
        int ra = r.nextInt(HEIGHT);
        int rb = r.nextInt(WIDTH);
        while (!cells.get(ra).get(rb).getAccessible()) {
            ra = r.nextInt(HEIGHT);
            rb = r.nextInt(WIDTH);
        }
        cells.get(ra).get(rb).addCellContent(wall);
    }
    Corridor corridor = new Corridor(MAX_SIZE_INDIV_CORRIDOR);
    for (int i = 0; i < NB_CORRIDOR; i++) {
        int ra = r.nextInt(HEIGHT);
        int rb = r.nextInt(WIDTH);
        while (!cells.get(ra).get(rb).getAccessible()) {
            ra = r.nextInt(HEIGHT);
            rb = r.nextInt(WIDTH);
        }
        cells.get(ra).get(rb).addCellContent(corridor);
    }
    NormalSource normalSource = new NormalSource(FOOD_ON_SOURCE);
    for (int i = 0; i < NB_NORMAL_SOURCE; i++) {
        int ra = r.nextInt(HEIGHT);
        int rb = r.nextInt(WIDTH);
        while (!cells.get(ra).get(rb).getAccessible()) {
            ra = r.nextInt(HEIGHT);
            rb = r.nextInt(WIDTH);
        }
        cells.get(ra).get(rb).addCellContent(normalSource);
    }
    InfiniteSource infiniteSource = new InfiniteSource();
    for (int i = 0; i < NB_INFINITE_SOURCE; i++) {
        int ra = r.nextInt(HEIGHT);
        int rb = r.nextInt(WIDTH);
        while (!cells.get(ra).get(rb).getAccessible()) {
            ra = r.nextInt(HEIGHT);
            rb = r.nextInt(WIDTH);
        }
        cells.get(ra).get(rb).addCellContent(infiniteSource);
    }
}
