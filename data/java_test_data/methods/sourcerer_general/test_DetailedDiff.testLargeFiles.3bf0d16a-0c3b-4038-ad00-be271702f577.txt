public void testLargeFiles() throws Exception {
    int i = 0;
    String expr = null;
    File test, control;
    control = new File(test_Constants.BASEDIR + "/tests/etc/controlDetail.xml");
    test = new File(test_Constants.BASEDIR + "/tests/etc/testDetail.xml");
    DetailedDiff differencesWithWhitespace = new DetailedDiff(new Diff(new InputSource(new FileReader(control)), new InputSource(new FileReader(test))));
    List l = differencesWithWhitespace.getAllDifferences();
    int unmatchedNodes = 0;
    for (Iterator iter = l.iterator(); iter.hasNext(); ) {
        Difference d = (Difference) iter.next();
        if (d.getId() == DifferenceConstants.CHILD_NODE_NOT_FOUND_ID) {
            unmatchedNodes++;
        }
    }
    assertEquals(1402 + unmatchedNodes, differencesWithWhitespace.getAllDifferences().size());
    try {
        XMLUnit.setIgnoreWhitespace(true);
        Diff prototype = new Diff(new FileReader(control), new FileReader(test));
        DetailedDiff detailedDiff = new DetailedDiff(prototype);
        List differences = detailedDiff.getAllDifferences();
        unmatchedNodes = 0;
        for (Iterator iter = differences.iterator(); iter.hasNext(); ) {
            Difference d = (Difference) iter.next();
            if (d.getId() == DifferenceConstants.CHILD_NODE_NOT_FOUND_ID) {
                unmatchedNodes++;
            }
        }
        assertEquals(40 + unmatchedNodes, differences.size());
        SimpleXpathEngine xpathEngine = new SimpleXpathEngine();
        Document controlDoc = XMLUnit.buildControlDocument(new InputSource(new FileReader(control)));
        Document testDoc = XMLUnit.buildTestDocument(new InputSource(new FileReader(test)));
        Difference aDifference;
        String value;
        for (Iterator iter = differences.iterator(); iter.hasNext(); ) {
            aDifference = (Difference) iter.next();
            if (aDifference.equals(DifferenceConstants.ATTR_VALUE) || aDifference.equals(DifferenceConstants.CDATA_VALUE) || aDifference.equals(DifferenceConstants.COMMENT_VALUE) || aDifference.equals(DifferenceConstants.ELEMENT_TAG_NAME) || aDifference.equals(DifferenceConstants.TEXT_VALUE)) {
                expr = aDifference.getControlNodeDetail().getXpathLocation();
                if (expr == null || expr.length() == 0) {
                    System.out.println(aDifference);
                } else {
                    value = xpathEngine.evaluate(expr, controlDoc);
                    assertEquals(i + " control " + aDifference.toString(), value, aDifference.getControlNodeDetail().getValue());
                }
                expr = aDifference.getTestNodeDetail().getXpathLocation();
                if (expr == null || expr.length() == 0) {
                    System.out.println(aDifference);
                } else {
                    value = xpathEngine.evaluate(expr, testDoc);
                    assertEquals(i + " test " + aDifference.toString(), value, aDifference.getTestNodeDetail().getValue());
                }
            }
            ++i;
        }
    } catch (Exception e) {
        System.out.println("eek@" + i + ":" + expr);
        throw e;
    } finally {
        XMLUnit.setIgnoreWhitespace(false);
    }
}
