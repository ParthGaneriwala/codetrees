public String handleImage(File f) throws IOException {
    if (f.exists()) {
        try {
            long time = System.currentTimeMillis();
            String line = "";
            String category;
            BufferedReader b = new BufferedReader(new InputStreamReader(new DataInputStream(new FileInputStream("SwordServer.conf"))));
            // String bundleFile = "./oldbundle/bundle/bundle.out";
            // String addbundleFile = "./bundle.added.out";
            // String dataFile = "./newData.dat";
            String pathtobundler = "";
            String listfile = "";
            String datafile = "";
            String outfile = "";
            while ((line = b.readLine()) != null) {
                category = line.substring(0, line.indexOf(" "));
                if (category.equalsIgnoreCase("pathtobundler")) {
                    pathtobundler = line.substring(line.indexOf(" ") + 1);
                    System.out.println("pathtobundler: " + pathtobundler);
                } else if (category.equalsIgnoreCase("listfile")) {
                    listfile = line.substring(line.indexOf(" ") + 1);
                    System.out.println("listfile: " + listfile);
                } else if (category.equalsIgnoreCase("datafile")) {
                    datafile = line.substring(line.indexOf(" ") + 1);
                    System.out.println("datafile: " + datafile);
                } else if (category.equalsIgnoreCase("outfile")) {
                    outfile = line.substring(line.indexOf(" ") + 1);
                    System.out.println("outfile: " + outfile);
                }
            }
            b.close();
            File local = new File("./");
            // System.out.println("File path: " + f.getCanonicalPath());
            // System.out.println("Local path: " + local.getCanonicalPath());
            String filename = f.getCanonicalPath();
            String fn = filename.substring(0, filename.lastIndexOf(".") + 1);
            // System.out.println(fn);
            Process p = Runtime.getRuntime().exec("./ImageAdder.sh " + fn + " " + listfile + " " + outfile + " " + local.getCanonicalPath() + " " + pathtobundler);
            BufferedReader waiter = new BufferedReader(new InputStreamReader(p.getInputStream()));
            BufferedReader err = new BufferedReader(new InputStreamReader(p.getErrorStream()));
            String w = "";
            while ((w = waiter.readLine()) != null) {
                System.out.println(w);
            }
            while ((w = err.readLine()) != null) {
                System.out.println(w);
            }
            System.out.println("Image Adding Completed");
            String o = "";
            BufferedImage img = ImageIO.read(f);
            System.out.println("Image Dimensions: " + img.getWidth() + "," + img.getHeight());
            PointTranslator pt = new PointTranslator(outfile, "./bundle.added.out", datafile, img.getWidth(), img.getHeight());
            if (pt.isValid()) {
                pt.processPointsFile();
                BufferedReader pointsReader = new BufferedReader(new InputStreamReader(new DataInputStream(new FileInputStream("./transformed_points.dat"))));
                line = pointsReader.readLine();
                int numPts = Integer.valueOf(line);
                String index, pos, data;
                for (int i = 0; i < numPts; i++) {
                    index = pointsReader.readLine().trim();
                    pos = pointsReader.readLine().trim();
                    data = pointsReader.readLine().trim();
                    o = o + pos + " " + index + " " + data + "\n";
                }
            }
            float end = (System.currentTimeMillis() - time) / 1000f;
            System.out.println("Elapsed time: " + end + " seconds");
            return o;
        } catch (IOException e) {
            e.printStackTrace();
        }
    } else {
        System.out.println("No file found");
    }
    return "";
}
