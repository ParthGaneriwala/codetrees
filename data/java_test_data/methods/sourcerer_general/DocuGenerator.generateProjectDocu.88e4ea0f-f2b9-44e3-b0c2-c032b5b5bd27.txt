public String generateProjectDocu() {
    // test whether the documentation directory is accessible.
    String docDirStatus = testDocDir();
    if (docDirStatus != "") {
        return docDirStatus;
    }
    File startPage = new File(docDir, "index.html");
    File logFile = new File(docDir, "logfile.txt");
    if (documentationExists(logFile)) {
        int result = DialogManager.askQuestion(null, "show-or-generate");
        if (result == 0) {
            // show only
            Utility.openWebBrowser(startPage.getPath());
            return "";
        }
        if (result == 2) {
            // cancel
            return "";
        }
    }
    // tool-specific infos for javadoc
    // get the parameter that enables javadoc to link the generated
    // documentation to the API documentation
    String linkParam = getLinkParam();
    ArrayList call = new ArrayList();
    call.add(docCommand);
    call.add("-sourcepath");
    call.add(projectDirPath);
    call.add("-classpath");
    call.add(project.getClassLoader().getClassPathAsString());
    call.add("-d");
    call.add(docDirPath);
    String majorVersion = System.getProperty("java.specification.version");
    call.add("-source");
    call.add(majorVersion);
    call.add("-doctitle");
    call.add(project.getProjectName());
    call.add("-windowtitle");
    call.add(project.getProjectName());
    addParams(call, linkParam);
    addParams(call, fixedJavadocParams);
    // add the names of all the targets for the documentation tool.
    // first: get the names of all packages that contain java sources.
    List packageNames = project.getPackageNames();
    for (Iterator names = packageNames.iterator(); names.hasNext(); ) {
        String packageName = (String) names.next();
        // as javadoc doesn't like packages with no java-files, we have to
        // pass only names of packages that really contain java files.
        Package pack = project.getPackage(packageName);
        if (FileUtility.containsFile(pack.getPath(), ".java")) {
            if (packageName.length() > 0) {
                call.add(packageName);
            }
        }
    }
    // second: get class names of classes in unnamed package, if any
    List classNames = project.getPackage("").getAllClassnamesWithSource();
    String dirName = project.getProjectDir().getAbsolutePath();
    for (Iterator names = classNames.iterator(); names.hasNext(); ) {
        call.add(dirName + "/" + names.next() + ".java");
    }
    String[] javadocCall = (String[]) call.toArray(new String[0]);
    generateDoc(javadocCall, startPage, logFile, projectLogHeader, true);
    return "";
}
