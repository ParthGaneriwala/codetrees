private void processInPacket(DatagramPacket inPacket) {
    byte[] packetBytes = inPacket.getData();
    if (convert.byteToInt(packetBytes[0]) == 0xE0) {
        try {
            System.out.println("Received unknown UDP packet. Contents:\n" + convert.BytesToHexString(packetBytes));
        } catch (Exception e) {
            System.out.println("Error in UDP_Listener: " + e.getMessage());
        }
        return;
    }
    switch(convert.byteToInt(packetBytes[1])) {
        case 0x99:
            {
                try {
                    System.out.println("Received search result.");
                    DonkeySearchResultEntry entry = new DonkeySearchResultEntry();
                    donkeyScannedPacket.decodeSearchResult(packetBytes, 2, new InetSocketAddress(inPacket.getAddress(), inPacket.getPort()), entry);
                    dInfo.getServer().addSearchResult(entry);
                } catch (Exception e) {
                }
                break;
            }
        case 0x9B:
            {
                System.out.println("Received donkey download sources.");
                byte[] hash = new byte[16];
                System.arraycopy(packetBytes, 2, hash, 0, 16);
                Download dl = dInfo.getDDMT().getDownload(hash);
                if (dl == null) {
                    System.out.println("Sources are for unknown download.");
                    break;
                }
                int numSources = convert.byteToInt(packetBytes[18]);
                int newSources = 0;
                for (int i = 1; i <= numSources; i++) {
                    byte[] ipBytes = new byte[4];
                    int pos = 19 + ((i - 1) * 6);
                    System.arraycopy(packetBytes, pos, ipBytes, 0, 4);
                    InetAddress ip;
                    int port;
                    try {
                        ip = InetAddress.getByAddress(ipBytes);
                        port = convert.UShortToInt(packetBytes, pos + 4);
                        DonkeyDownloadSource source = new DonkeyDownloadSource(new InetSocketAddress(ip, port), dl, dInfo);
                        if (dl.addSource(source))
                            newSources++;
                    } catch (UnknownHostException e) {
                    } catch (Exception e) {
                    }
                }
                System.out.println("Received " + newSources + " new sources.");
                break;
            }
        default:
            {
                try {
                    System.out.println("Received unknown UDP packet. Contents:\n" + convert.BytesToHexString(packetBytes));
                } catch (Exception e) {
                }
            }
    }
}
