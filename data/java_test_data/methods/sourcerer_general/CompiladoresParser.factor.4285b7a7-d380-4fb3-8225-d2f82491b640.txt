// $ANTLR start "factor"
public final CompiladoresParser.factor_return factor() throws RecognitionException {
    CompiladoresParser.factor_return retval = new CompiladoresParser.factor_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    CompiladoresParser.number_return number140 = null;
    CompiladoresParser.str_return str141 = null;
    CompiladoresParser.bool_return bool142 = null;
    CompiladoresParser.id_return id143 = null;
    CompiladoresParser.call_return call144 = null;
    try {
        dbg.enterRule(getGrammarFileName(), "factor");
        if (getRuleLevel() == 0) {
            dbg.commence();
        }
        incRuleLevel();
        dbg.location(184, 1);
        try {
            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:184:9: ( number | str | bool | id | call )
            int alt35 = 5;
            try {
                dbg.enterDecision(35);
                switch(input.LA(1)) {
                    case INTEGER:
                        {
                            alt35 = 1;
                        }
                        break;
                    case STRING:
                        {
                            alt35 = 2;
                        }
                        break;
                    case TRUE:
                    case FALSE:
                        {
                            alt35 = 3;
                        }
                        break;
                    case ID:
                        {
                            int LA35_4 = input.LA(2);
                            if ((LA35_4 == LPAR)) {
                                alt35 = 5;
                            } else if (((LA35_4 >= PLUS && LA35_4 <= DIV) || (LA35_4 >= AND && LA35_4 <= LT) || LA35_4 == THEN || (LA35_4 >= TO && LA35_4 <= STEP) || LA35_4 == COMMA || (LA35_4 >= RPAR && LA35_4 <= EOL))) {
                                alt35 = 4;
                            } else {
                                NoViableAltException nvae = new NoViableAltException("", 35, 4, input);
                                dbg.recognitionException(nvae);
                                throw nvae;
                            }
                        }
                        break;
                    default:
                        NoViableAltException nvae = new NoViableAltException("", 35, 0, input);
                        dbg.recognitionException(nvae);
                        throw nvae;
                }
            } finally {
                dbg.exitDecision(35);
            }
            switch(alt35) {
                case 1:
                    dbg.enterAlt(1);
                    // /home/CIN/fmm/Desktop/grammar/Compiladores.g:184:11: number
                    {
                        root_0 = (CommonTree) adaptor.nil();
                        dbg.location(184, 11);
                        pushFollow(FOLLOW_number_in_factor1530);
                        number140 = number();
                        state._fsp--;
                        adaptor.addChild(root_0, number140.getTree());
                    }
                    break;
                case 2:
                    dbg.enterAlt(2);
                    // /home/CIN/fmm/Desktop/grammar/Compiladores.g:184:20: str
                    {
                        root_0 = (CommonTree) adaptor.nil();
                        dbg.location(184, 20);
                        pushFollow(FOLLOW_str_in_factor1534);
                        str141 = str();
                        state._fsp--;
                        adaptor.addChild(root_0, str141.getTree());
                    }
                    break;
                case 3:
                    dbg.enterAlt(3);
                    // /home/CIN/fmm/Desktop/grammar/Compiladores.g:184:26: bool
                    {
                        root_0 = (CommonTree) adaptor.nil();
                        dbg.location(184, 26);
                        pushFollow(FOLLOW_bool_in_factor1538);
                        bool142 = bool();
                        state._fsp--;
                        adaptor.addChild(root_0, bool142.getTree());
                    }
                    break;
                case 4:
                    dbg.enterAlt(4);
                    // /home/CIN/fmm/Desktop/grammar/Compiladores.g:184:33: id
                    {
                        root_0 = (CommonTree) adaptor.nil();
                        dbg.location(184, 33);
                        pushFollow(FOLLOW_id_in_factor1542);
                        id143 = id();
                        state._fsp--;
                        adaptor.addChild(root_0, id143.getTree());
                    }
                    break;
                case 5:
                    dbg.enterAlt(5);
                    // /home/CIN/fmm/Desktop/grammar/Compiladores.g:184:38: call
                    {
                        root_0 = (CommonTree) adaptor.nil();
                        dbg.location(184, 38);
                        pushFollow(FOLLOW_call_in_factor1546);
                        call144 = call();
                        state._fsp--;
                        adaptor.addChild(root_0, call144.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
        }
        dbg.location(184, 42);
    } finally {
        dbg.exitRule(getGrammarFileName(), "factor");
        decRuleLevel();
        if (getRuleLevel() == 0) {
            dbg.terminate();
        }
    }
    return retval;
}
