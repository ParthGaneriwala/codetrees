public int takeStep() {
    // BERNARDO - aten��o, unifiquei o nome da vari�vel do tempo, agora chama 'currTime'
    currTime = abstract_robot.getTime();
    // Bernardo - Primeira coisa a fazer � verificar se
    // foi marcado gol, e em caso positivo, treinar
    // �ltimas entradas da rede neural (positivamente ou
    // negativamente).
    trainAfterJustScored(abstract_robot.getJustScored(currTime));
    // caso ocorra um deadlock...
    if (deadlock()) {
        abstract_robot.setDisplayString("DEADLOCK");
        abstract_robot.setSteerHeading(currTime, Math.random() * 2 * Math.PI);
        abstract_robot.setSpeed(currTime, 1.0);
        instDeadlockDetectado = currTime;
        historico.clear();
    }
    if (currTime - this.instDeadlockDetectado < 2000) {
        abstract_robot.setSpeed(currTime, 1.0);
        return 0;
    }
    if (souGoleiro()) {
        defenderGol();
        return 0;
    } else // nao sou goleiro
    {
        if (this.souUmDosTresMaisDistantes()) {
            if (this.outroTimeAtacando()) {
                if (this.souMaisProximoDosTresMaisDistantes()) {
                    abstract_robot.setDisplayString("MEIO");
                    this.irParaPosicao(0, this.fieldSide * 0.05);
                    return 0;
                } else // NAO sou Mais Proximo Dos Tres Mais Distantes
                {
                    abstract_robot.setDisplayString("DEFESA");
                    // ir para defesa!!!
                    this.irParaDefesa();
                    return 0;
                }
            }
            if (this.meuTimeAtacando()) {
                // a cada 100 time steps
                if (currTime / TIME_STEP % 50 == 0) {
                    estouIndoPara = tellMeWhereToGoPosition(true);
                }
                // vai para onde tinha calculadado
                irParaPosicao(estouIndoPara.x, estouIndoPara.y);
                // termina time step
                return 0;
            }
        }
        if (this.souMaisProximoDaBola()) {
            this.conduzirBola();
            // se a posicao � boa para chute... chutar
            if (abstract_robot.canKick(currTime) && isTimeToKick(true)) {
                abstract_robot.kick(currTime);
            }
            return 0;
        }
    }
    abstract_robot.setSpeed(currTime, 0);
    abstract_robot.setSteerHeading(currTime, abstract_robot.getBall(currTime).t);
    // dai ele passa a se movimentar aleatoriamente, na esperan�a de sair do deadlock
    if (this.historico.size() < 30) {
        historico.add(abstract_robot.getSteerHeading(currTime));
    } else {
        historico.remove(this.historico.size() - 1);
        historico.add(0, abstract_robot.getSteerHeading(currTime));
    }
    // Luiz....ALGORITMO COMPLETO....
    // }
    // Bernardo - aqui coloquei a rede neural para
    // //decidir se chuta ou n�o
    // if (abstract_robot.canKick(currTime) && abstract_robot.getBall(currTime).x > 0) {
    // 
    // if (isTimeToKick(true))
    // abstract_robot.kick(currTime);
    // }
    // 
    // }
    // else {
    // if (currTime/TIME_STEP % 20 == 0) {
    // Movimento mov = tellMeWhereToGo(true);
    // abstract_robot.setSteerHeading(currTime, mov.direcao);
    // abstract_robot.setSpeed(currTime, mov.velocidade);
    // //abstract_robot.setSteerHeading(currTime, abstract_robot.getBall(currTime).t);
    // //abstract_robot.setSpeed(currTime, 0.1);
    // }
    // }
    // 
    /*
            else // o jogador nao � um goleiro
            {
                if(souUmDosTresMaisDistantes() )
                {
                    if( outroTimeAtacando() )
                    {
                        if( souMaisProximoDosTresMaisDistantes() )
                        {
                            correrParaBola();
                        }
                        else
                        {
                            irParaDefesa();
                        }
                    }
             
                    if( meuTimeAtacando() )
                    {
                        //rede neural retorna a dire�ao e velocidade
                        //e o jogador vai para a posicao retornada
                        double x = 0;// = redeNeuralX();
                        double y = 0;//= redeNeuralY();
                        irParaPosicao(x, y);
             
                    }
             
             
             
                }
            }
            ballTurnoAnterior = new Vec2(abstract_robot.getBall(currTime));
            ballTurnoAnterior.add(abstract_robot.getPosition(currTime));
             */
    // coment�rio abaixo serve para ajudar nos testes.
    /*
        Vector<Double> distancias = neuralInfoOndeEstaoOsJogadores();
        StringBuffer sb = new StringBuffer();
        
       for (Double elem : distancias) {
             elem = (double)Math.round(elem*100);
             sb.append(elem + ", ");
       }
        
        
       abstract_robot.setDisplayString( String.valueOf(sb) );
        */
    // guardando velocidade e posi��o da bola
    // if (abstract_robot.getPlayerNumber(currTime) == 1) {
    // Vec2 ball;
    // Vec2 velBall;
    // ball = abstract_robot.getBall(currTime);
    // ball.add(abstract_robot.getPosition(currTime));
    // 
    // if (ballTurnoAnterior != null) {
    // ball.sub(ballTurnoAnterior);
    // velBall = new Vec2(ball);
    // if (velBallTurnoAnterior != null)
    // velBall.sub(velBallTurnoAnterior);
    // taxaDesacelAparente= velBall.r;
    // velBallTurnoAnterior = ball;
    // //System.out.println("speed: " + 1000*velBallTurnoAnterior.r);
    // }
    // ballTurnoAnterior = abstract_robot.getBall(currTime);
    // ballTurnoAnterior.add(abstract_robot.getPosition(currTime));
    // if (ninguemPertoDaBola())
    // atualizaTaxaDesacel();
    // 
    // if (taxaDesacel != 0) {
    // atualizaTimeStep();
    // }
    // }
    atualizarVetoresAnt();
    return 0;
}
