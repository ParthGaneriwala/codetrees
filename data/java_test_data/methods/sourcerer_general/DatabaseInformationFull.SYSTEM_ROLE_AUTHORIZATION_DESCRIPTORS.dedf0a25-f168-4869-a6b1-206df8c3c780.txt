/**
 * SYSTEM_ENABLED_ROLES<p>
 *
 * <b>Function</b><p>
 *
 * Identify the enabled roles for the current SQL-session.<p>
 *
 * Definition<p>
 *
 * <pre class="SqlCodeExample">
 * CREATE RECURSIVE VIEW ENABLED_ROLES ( ROLE_NAME ) AS
 * VALUES ( CURRENT_ROLE )
 * UNION
 * SELECT RAD.ROLE_NAME
 * FROM DEFINITION_SCHEMA.ROLE_AUTHORIZATION_DESCRIPTORS RAD
 * JOIN ENABLED_ROLES R
 * ON RAD.GRANTEE = R.ROLE_NAME;
 *
 * GRANT SELECT ON TABLE ENABLED_ROLES
 * TO PUBLIC WITH GRANT OPTION;
 * </pre>
 */
/**
 * SYSTEM_APPLICABLE_ROLES<p>
 *
 * <b>Function</b><p>
 *
 * Identifies the applicable roles for the current user.<p>
 *
 * <b>Definition</b><p>
 *
 * <pre class="SqlCodeExample">
 * CREATE RECURSIVE VIEW APPLICABLE_ROLES ( GRANTEE, ROLE_NAME, IS_GRANTABLE ) AS
 * ( ( SELECT GRANTEE, ROLE_NAME, IS_GRANTABLE
 * FROM DEFINITION_SCHEMA.ROLE_AUTHORIZATION_DESCRIPTORS
 * WHERE ( GRANTEE IN ( CURRENT_USER, 'PUBLIC' )
 * OR GRANTEE IN ( SELECT ROLE_NAME
 * FROM ENABLED_ROLES ) ) )
 * UNION
 * ( SELECT RAD.GRANTEE, RAD.ROLE_NAME, RAD.IS_GRANTABLE
 * FROM DEFINITION_SCHEMA.ROLE_AUTHORIZATION_DESCRIPTORS RAD
 * JOIN APPLICABLE_ROLES R
 * ON RAD.GRANTEE = R.ROLE_NAME ) );
 *
 * GRANT SELECT ON TABLE APPLICABLE_ROLES
 * TO PUBLIC WITH GRANT OPTION;
 * </pre>
 */
Table SYSTEM_ROLE_AUTHORIZATION_DESCRIPTORS() throws HsqlException {
    Table t = sysTables[SYSTEM_ROLE_AUTHORIZATION_DESCRIPTORS];
    if (t == null) {
        t = createBlankTable(sysTableHsqlNames[SYSTEM_ROLE_AUTHORIZATION_DESCRIPTORS]);
        // not null
        addColumn(t, "ROLE_NAME", Types.VARCHAR, true);
        // not null
        addColumn(t, "GRANTEE", Types.VARCHAR, true);
        // not null
        addColumn(t, "GRANTOR", Types.VARCHAR, true);
        // not null
        addColumn(t, "IS_GRANTABLE", Types.VARCHAR, true);
        // true PK
        t.createPrimaryKey(null, new int[] { 0, 1 }, true);
        return t;
    }
    // Intermediate holders
    String grantorName = GranteeManager.SYSTEM_AUTHORIZATION_NAME;
    Iterator grantees;
    Grantee grantee;
    String granteeName;
    Iterator roles;
    String roleName;
    String isGrantable;
    Object[] row;
    final int irole = 0;
    final int igrantee = 1;
    final int igrantor = 2;
    final int igrantable = 3;
    // Initialization
    grantees = database.getGranteeManager().getGrantees().iterator();
    // Do it.
    while (grantees.hasNext()) {
        grantee = (Grantee) grantees.next();
        granteeName = grantee.getName();
        roles = grantee.getDirectRoles().iterator();
        while (roles.hasNext()) {
            row = t.getEmptyRowData();
            roleName = (String) roles.next();
            isGrantable = grantee.hasRole(GranteeManager.DBA_ADMIN_ROLE_NAME) ? "YES" : "NO";
            row[irole] = roleName;
            row[igrantee] = granteeName;
            row[igrantor] = grantorName;
            row[igrantable] = isGrantable;
            t.insertSys(row);
        }
    }
    t.setDataReadOnly(true);
    return t;
}
