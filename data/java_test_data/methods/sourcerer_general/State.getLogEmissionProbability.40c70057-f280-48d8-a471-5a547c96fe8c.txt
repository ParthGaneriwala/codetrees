public static double getLogEmissionProbability(Exon exon, Exon expected, Exon stdDev, State s, int nSamples, Gamma gamma, double gammaK, double gammaTheta, double gammaSNPsK, double gammaSNPsTheta) {
    // Emission probability is the probability of observing that value given the distribution parameters
    // the expected values are computed assuming poisson. Hence for other states, we multiple the mean
    // by the ratios for that state.
    double observedSNPs = exon.SNPs;
    double expectedSNPs = expected.SNPs;
    double observedFPKM = exon.FPKM;
    double expectedFPKM = expected.FPKM;
    // using gamma distribution as a conjugate prior.
    // we start off with a gamma prior with arbitrary parameters k, theta
    // the posterior has parameters k+\sum{x_i} / (\theta/(n \theta + 1))
    // the expected value of the lambda posterior is (n * y_mean + a)/(n+b)
    // from Bayesian modeling using WinBUGS By Ioannis Ntzoufras
    // arbitrary numbers. Only there for worst case. Usually won't matter
    double a = .05, b = 0;
    double lambdaSNPs = (s.snpRatio * nSamples * expectedSNPs + a * exon.length()) / (nSamples + b);
    double logProbSNPs = logPoisson(observedSNPs, lambdaSNPs);
    a = 100;
    b = 2;
    double lambdaFPKM = (s.rpkmRatio * nSamples * expectedFPKM + a * exon.length()) / (nSamples + b);
    double logProbFPKM = logPoisson(observedFPKM, lambdaFPKM);
    // handling case where all the baselines are equal, since log(0) = Inf
    if (lambdaFPKM == 0.0)
        if (observedFPKM == 0.0)
            // log 1 = 0; expected = observed = 0 so it fits with the expectation
            logProbFPKM = 0;
        else
            logProbFPKM = Double.NEGATIVE_INFINITY;
    if (lambdaSNPs == 0.0)
        if (observedSNPs == 0.0)
            logProbSNPs = 0;
        else
            logProbSNPs = Double.NEGATIVE_INFINITY;
    /*
		 * Instead of gamma, using a negative binomial as the poisson parameter prior
		 * The mean/std dev of the neg. bin is inferred from the genomewide average
		 * parameters of poisson: p ~ genomewide average: average coverage/number of sites * length of exon
		 * r calculated from p : k_dash * ((1-p)/p)
		 * Using gamma as a prior distribution based on the genome wide coverage
		 * Using the sample values to update the gamma (based on the conjugate prior formualtion)
		 * This results in a new gamma distribution with different parameters
		 */
    double newGammaK = updateGammaK(s.rpkmRatio, nSamples, gammaK, expectedFPKM);
    double newGammaTheta = updateGammaTheta(nSamples, gammaTheta);
    gamma = new Gamma(newGammaK, newGammaTheta, null);
    // over 10 quantiles:
    logProbFPKM = Double.NEGATIVE_INFINITY;
    jsc.distributions.Gamma gammaDist = new jsc.distributions.Gamma(newGammaK, newGammaTheta);
    double prevx = 0;
    for (double p = 0.1; p <= 0.9; p += 0.1) {
        // inverse cdf of gamma with p^{th} percentile;
        double x = gammaDist.inverseCdf(p);
        if (prevx == 0)
            prevx = x;
        x = (x + prevx) / 2;
        logProbFPKM = Probability.logSum(logProbFPKM, logPoisson(observedFPKM, x) + logGamma(x, newGammaK, newGammaTheta));
        prevx = x;
    }
    if (observedFPKM == 0.0)
        if (s.rpkmRatio * expectedFPKM == 0)
            // log 1 = 0; expected = observed = 0 so it fits with the expectation
            logProbFPKM = 0;
    return (logProbFPKM + logProbSNPs);
}
