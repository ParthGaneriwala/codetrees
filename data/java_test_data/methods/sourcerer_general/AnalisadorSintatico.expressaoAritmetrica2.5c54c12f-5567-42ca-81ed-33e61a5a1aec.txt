protected boolean expressaoAritmetrica2(List<Integer> syncSymbols) {
    // <expressao2> ::= "+" <termo> <expressao2> | "-" <termo> <expressao2> | &;
    // adiciona na lista dos primeiros
    List<Integer> firstsExpressao2 = PrimeirosSimbolos.getExpressaoPrimeira();
    firstsExpressao2.addAll(PrimeirosSimbolos.getFirstsOperadorRelacional());
    firstsExpressao2.add(getCodigo(PalavraReservada.FECHA_PARENTHESIS));
    firstsExpressao2.add(getCodigo(PalavraReservada.PONTOEVIRGULA));
    // verifica se existe ma formacao de simbolo
    test(firstsExpressao2, syncSymbols, "Erro na Expressao Aritmetica: Expressao malformada com simbolo '" + currentToken.getSimbolo() + "'. Linha: " + previousToken.getLinha());
    if (verificaEsteToken(PalavraReservada.SOMA)) {
        // salva a expressao
        expressionCG = expressionCG + currentToken;
        cg.setaOperadorDeExpr(currentToken.toString());
        proximoToken();
        // adiciona simbolos na lista do seguidor
        List<Integer> followTermo = new LinkedList<Integer>(firstsExpressao2);
        followTermo.addAll(PrimeirosSimbolos.getTermoPrimeiro());
        syncSymbols.addAll(followTermo);
        int numErrors = erros.size();
        // verifica as regras da gramatica de um termo
        // <termo> ::= <fator><termo2>;
        termo(syncSymbols);
        // remove a intersecao dos conjuntos
        CollectionsUtil.removeAll(syncSymbols, followTermo);
        // verifica se os erros nao aumentaram
        if (erros.size() == numErrors || PrimeirosSimbolos.getExpressaoPrimeira().contains(currentToken.getCodigo())) {
            // <expressao2> ::= "+" <termo> <expressao2> | "-" <termo> <expressao2> | &;
            expressaoAritmetrica2(syncSymbols);
            semantico.verificaExpressao(currentToken.getLinha());
        }
    } else if (verificaEsteToken(PalavraReservada.SUBTRACAO)) {
        expressionCG = expressionCG + currentToken;
        cg.setaOperadorDeExpr(currentToken.toString());
        proximoToken();
        // seguidores
        List<Integer> followTermo = firstsExpressao2;
        syncSymbols.addAll(followTermo);
        // verifica as regras da gramatica de um termo
        // <termo> ::= <fator><termo2>;
        termo(syncSymbols);
        CollectionsUtil.removeAll(syncSymbols, followTermo);
        if (followTermo.contains(currentToken.getCodigo())) {
            // <expressao2> ::= "+" <termo> <expressao2> | "-" <termo> <expressao2> | &;
            expressaoAritmetrica2(syncSymbols);
            semantico.verificaExpressao(currentToken.getLinha());
        } else {
            return false;
        }
    }
    return true;
}
