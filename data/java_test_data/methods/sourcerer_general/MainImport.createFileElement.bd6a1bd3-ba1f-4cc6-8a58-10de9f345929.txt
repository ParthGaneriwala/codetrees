/**
 * method creates the file element and appends it to
 * the proper previous node.
 */
private void createFileElement() {
    // Add some tests here to check if document has to be created
    // CREATE OBJECT IN REPOSITORY IF:
    // - migration status = "F" (false)       : OK
    // - file was modified since last import  : OK
    String strObjectId = null;
    lngTreatedObjects++;
    if ((lngTreatedObjects % 100) == 0) {
        System.out.print(".");
    }
    boolean blnImportObject = false;
    // Import document if not yet imported
    if (g_strMigrationStatus.equals(CstImportXML.MIGRATION_STATUS_VALUE_FAILED)) {
        blnImportObject = true;
    } else {
        if (g_strMigrationDate != null) {
            // Check if file was modified since last import
            File f = new File(g_currObj.getStrFullPath());
            Date dateModif = new Date(f.lastModified());
            String strDateModif = dateFormat.format(dateModif);
            try {
                Date datMigrationDate = dateFormat.parse(g_strMigrationDate);
                // System.out.print(strDateModif + " >= " + g_strMigrationDate + " ? ");
                Date d2 = dateFormat.parse(strDateModif);
                if ((d2.equals(datMigrationDate)) || (d2.after(datMigrationDate))) {
                    blnImportObject = true;
                } else {
                    blnImportObject = false;
                }
            } catch (Exception e) {
                g_logger.enterLog("    " + e.getMessage());
                e.printStackTrace();
            }
        }
    }
    if (blnImportObject) {
        System.out.println("Importing " + g_currObj.getStrFullPath());
        try {
            // EPNode nodeObj = bridge.getObjectByPath(ticket, g_currObj.getStrRepFullPath());
            strObjectId = bridge.getObjectByPath(ticket, g_currObj.getStrRepFullPath());
            if (strObjectId != null) {
                g_logger.enterLog("   File already exists : " + g_currObj.getStrRepFullPath());
                // Add Linguistic version if not already Exist
                if (g_currObj.getLanguageCode().length() > 0) {
                    g_logger.enterLog("    adding linguistic version " + g_currObj.getStrRepFullPath());
                    // EPLogical logicalDoc = bridge.getDocumentById(ticket, strObjectId);
                    strObjectId = bridge.addLinguisticVersion(ticket, strObjectId, g_currObj.getStrName(), g_currObj.getStrRepPath(), g_currObj.getStrFullPath(), g_currObj.getLanguageCode());
                }
            } else {
                // import the document into the repository
                // EPDocument document = (EPDocument) bridge.createNode(g_currObj.getStrObjType(), g_currObj.getStrName(), g_currObj.getStrRepPath(), g_currObj.getStrFullPath());
                strObjectId = bridge.createDocument(ticket, g_currObj.getStrObjType(), g_currObj.getStrName(), g_currObj.getStrRepPath(), g_currObj.getStrFullPath(), g_currObj.getLanguageCode());
                // get the concrete object id to set its properties
                EPLogical logicalDoc = bridge.getDocumentById(ticket, strObjectId);
                if (logicalDoc != null) {
                    EPConcrete concreteDoc = logicalDoc.getLinguisticVersion(g_currObj.getLanguageCode().toLowerCase());
                    if (concreteDoc != null) {
                        strObjectId = concreteDoc.getNodeId();
                    } else {
                    }
                }
            }
            if (strObjectId != null) {
                // Loop on attributes
                // TODO : manage attribute types + repeating
                ArrayList attrList = g_currObj.getAttributeList();
                if (attrList != null) {
                    EPNode nodeObj = bridge.getDocumentById(ticket, strObjectId);
                    updateAttributes(nodeObj, attrList);
                    nodeObj.save();
                }
                updateMigrationStatus(g_currObj.getStrFullPath(), CstImportXML.MIGRATION_STATUS_VALUE_SUCCESS);
                g_logger.enterLog("   File creation success : " + g_currObj.getStrFullPath());
            } else {
                updateMigrationStatus(g_currObj.getStrFullPath(), CstImportXML.MIGRATION_STATUS_VALUE_FAILED);
                g_logger.enterLog("   File creation failed : " + g_currObj.getStrFullPath());
            }
        } catch (Exception e) {
            g_logger.enterLog("   File creation failed : " + g_currObj.getStrFullPath());
            g_logger.enterLog("    " + e.getMessage());
            e.printStackTrace();
        }
    } else {
        g_logger.enterLog("   " + g_currObj.getStrRepFullPath() + " does not need to be imported", 3);
    }
    // Cleaning
    g_objAttr = null;
    g_currObj = null;
}
