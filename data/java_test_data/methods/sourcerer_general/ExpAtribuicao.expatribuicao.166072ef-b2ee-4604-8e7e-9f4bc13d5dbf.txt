// 
public void expatribuicao(TabelaSimbolos tabelaSimbolos, String escopo) {
    String tipoDaAtribuicao = "";
    // verifica se é ponteiro
    if (tabelaSimbolos.getLookahead().equals("*")) {
        // consome o *
        tabelaSimbolos.soConsome();
    }
    // verifica se o nome existe
    if (!tabelaSimbolos.validaNome(escopo, tabelaSimbolos.getLookahead())) {
        System.out.println(" ERRO SEMANTICO - Variável " + tabelaSimbolos.getLookahead() + " não declarada +");
        ErroSemantico.getInstance().getTabelaErros().add("Erro Semântico na linha " + tabelaSimbolos.getLinha() + ". Descrição: Variável  " + tabelaSimbolos.getLookahead() + "  não foi declarada ");
    } else {
        // define o tipo da variável
        if (tabelaSimbolos.RetornaTipoDeGlobalDeclarada(tabelaSimbolos.getLookahead()).equals(""))
            // existe tipo
            tipoDaAtribuicao = tabelaSimbolos.RetornaTipoDeLocalDeclarada(tabelaSimbolos.getLookahead(), escopo);
        else
            tipoDaAtribuicao = tabelaSimbolos.RetornaTipoDeGlobalDeclarada(tabelaSimbolos.getLookahead());
    }
    // 
    // reconhece o <nome>
    tabelaSimbolos.soConsome();
    // verifica se é atribuição
    if (tabelaSimbolos.getLookahead().equals("=")) {
        // consome o igual
        tabelaSimbolos.soConsome();
        // chama depois da atribuição = ...
        depoisDoIgual(tabelaSimbolos, escopo, tipoDaAtribuicao);
    // verifica se é um incremento/decremento
    } else if (tabelaSimbolos.getLookahead().equals("++") || tabelaSimbolos.getLookahead().equals("--")) {
        // consome o ++ | --
        tabelaSimbolos.soConsome();
        // consome o ;
        tabelaSimbolos.soConsome();
    // verifica se é struct
    } else if (tabelaSimbolos.getLookahead().equals("->") || tabelaSimbolos.getLookahead().equals(".")) {
        // -> ou .
        tabelaSimbolos.soConsome();
        // Chama acesso struct
        // acessoStruct acessostruct = new acessoStruct();
        // acessostruct.acessoStruct(tabelaSimbolos, String escopo, tipoDaAtribuicao);
        // 
        // chama depois da atribuição = ...
        depoisDoIgual(tabelaSimbolos, escopo, tipoDaAtribuicao);
    // verifica se é vetor
    } else if (tabelaSimbolos.getLookahead().equals("[")) {
        // enquanto for vetor verifique se o que ta dentro é inteiro ou se a variável ta declarada
        while (tabelaSimbolos.getLookahead().equals("[")) {
            if (tabelaSimbolos.reconhecer("[")) {
                // 
                if (!tabelaSimbolos.validaNome(escopo, tabelaSimbolos.getLookahead())) {
                    System.out.println(" ERRO SEMANTICO - Variável " + tabelaSimbolos.getLookahead() + " não declarada");
                    ErroSemantico.getInstance().getTabelaErros().add("Erro Semântico na linha " + tabelaSimbolos.getLinha() + ". Descrição: Variável  " + tabelaSimbolos.getLookahead() + "  não foi declarada ");
                } else {
                    // define o tipo da variável é inteiro ou numero
                    if (tabelaSimbolos.RetornaTipoDeGlobalDeclarada(tabelaSimbolos.getLookahead()).equals("int") || tabelaSimbolos.RetornaTipoDeGlobalDeclarada(tabelaSimbolos.getLookahead()).equals("int") || tabelaSimbolos.getTipo().equals("numero")) {
                        if (tabelaSimbolos.getTipo().equals("numero"))
                            if (!InformaTipo(tabelaSimbolos.getLookahead()).equals("int")) {
                                System.out.println(" ERRO SEMANTICO - Variável " + tabelaSimbolos.getLookahead() + " não é inteiro a variável dentro do vetor");
                                ErroSemantico.getInstance().getTabelaErros().add("Erro Semântico na linha " + tabelaSimbolos.getLinha() + ". Descrição: Não é inteiro a variável dentro do vetor : " + tabelaSimbolos.getLookahead());
                            }
                    // 
                    } else {
                        System.out.println(" ERRO SEMANTICO - Variável " + tabelaSimbolos.getLookahead() + " não declarada");
                        ErroSemantico.getInstance().getTabelaErros().add("Erro Semântico na linha " + tabelaSimbolos.getLinha() + ". Descrição: Variável  " + tabelaSimbolos.getLookahead() + "  não foi declarada ");
                    }
                }
                // so consome
                // consome o valor dentro do [ ]
                tabelaSimbolos.soConsome();
                // consome o ]
                tabelaSimbolos.soConsome();
            }
        // 
        }
        // 
        // chama depois da atribuição = ...
        depoisDoIgual(tabelaSimbolos, escopo, tipoDaAtribuicao);
    }
}
