public long createEntries(String outputFile) throws IOException {
    // CODIFICA A PARTE POSITIVA
    definePosFiles();
    long initialTime = System.currentTimeMillis();
    // inicializa a matriz de frequencias com zeros
    createFreqBigram();
    Utilitario util = new Utilitario();
    String so = util.getSO();
    try // cria arquivo de escrita
    {
        if (so.equalsIgnoreCase("windows"))
            setWritingFile(new BufferedWriter(new FileWriter(getOutputDir().getPath() + "\\" + outputFile)));
        else
            setWritingFile(new BufferedWriter(new FileWriter(getOutputDir().getPath() + "/" + outputFile)));
    } catch (IOException e1) {
        e1.printStackTrace();
    }
    // processa todos os arquivos com saida positiva para a rede
    for (int i = 0; i < getFiles().length; i++) {
        setReadingFile(new BufferedReader(new FileReader(getFile(i))));
        String textoArq = readFile();
        codificarSeqLin(textoArq);
        recordFile(1);
        getReadingFile().close();
    }
    // CODIFICA A PARTE NEGATIVA
    if (defineNegFiles()) {
        // processa todos os arquivos com saida negativa para a rede
        for (int i = 0; i < getFiles().length; i++) {
            setReadingFile(new BufferedReader(new FileReader(getFile(i))));
            String textoArq = readFile();
            codificarSeqLin(textoArq);
            recordFile(0);
            getReadingFile().close();
        }
    } else {
        System.out.println("Processando apenas os arquivos de freqüência positivos!");
    }
    getWritingFile().close();
    return initialTime;
}
