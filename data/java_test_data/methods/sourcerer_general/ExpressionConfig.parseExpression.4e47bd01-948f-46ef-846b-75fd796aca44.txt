protected static ExpressionConfig parseExpression(String expression) throws Exception {
    return new ExpressionParser<ExpressionConfig>(new StringReader(expression)) {

        @Override
        protected ExpressionConfig handleNumber(double value) {
            return new Constant(String.valueOf(value));
        }

        @Override
        protected ExpressionConfig handleString(String value) {
            return new Constant(value);
        }

        @Override
        protected ExpressionConfig handleOperator(String operator, int arity) throws Exception {
            if (arity == 1) {
                UnaryOperation result;
                if (operator.equals("++")) {
                    result = new Increment();
                } else if (operator.equals("--")) {
                    result = new Decrement();
                } else if (operator.equals("+")) {
                    return _output.pop();
                } else if (operator.equals("-")) {
                    result = new Negate();
                } else if (operator.equals("!")) {
                    result = new Not();
                } else {
                    return super.handleOperator(operator, arity);
                }
                result.operand = _output.pop();
                return result;
            } else {
                // arity == 2
                BinaryOperation result;
                if (operator.equals("+")) {
                    result = new Add();
                } else if (operator.equals("-")) {
                    result = new Subtract();
                } else if (operator.equals("*")) {
                    result = new Multiply();
                } else if (operator.equals("/")) {
                    result = new Divide();
                } else if (operator.equals("%")) {
                    result = new Remainder();
                } else if (operator.equals("&") || operator.equals("&&")) {
                    result = new And();
                } else if (operator.equals("|") || operator.equals("||")) {
                    result = new Or();
                } else if (operator.equals("^")) {
                    result = new Xor();
                } else if (operator.equals("<")) {
                    result = new Less();
                } else if (operator.equals(">")) {
                    result = new Greater();
                } else if (operator.equals("=") || operator.equals("==")) {
                    result = new Equals();
                } else if (operator.equals("<=")) {
                    result = new LessEquals();
                } else if (operator.equals(">=")) {
                    result = new GreaterEquals();
                } else {
                    return super.handleOperator(operator, arity);
                }
                result.secondOperand = _output.pop();
                result.firstOperand = _output.pop();
                return result;
            }
        }

        @Override
        protected ExpressionConfig handleIdentifier(String name) {
            if (name.equalsIgnoreCase("null") || name.equalsIgnoreCase("true") || name.equalsIgnoreCase("false")) {
                return new Constant(name);
            } else if (name.equalsIgnoreCase("previous")) {
                return new Previous();
            }
            Reference ref = new Reference();
            ref.name = name;
            return ref;
        }
    }.parse();
}
