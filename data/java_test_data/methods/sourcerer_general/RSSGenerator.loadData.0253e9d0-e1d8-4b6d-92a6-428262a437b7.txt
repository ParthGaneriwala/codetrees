private void loadData(String usr) {
    String QueryStringFriendsList = "SELECT friendID from friends" + " where userID='" + usr + "'";
    // friendslist query
    DataAccessObject RetrieveFriends = new DataAccessObject(QueryStringFriendsList, false);
    ResultSet friendList = null;
    int friendsCounter = 0;
    try {
        friendList = RetrieveFriends.QueryResult();
        while (friendList.next()) {
            FriendsVector.add(friendsCounter, friendList.getString(1));
            friendsCounter++;
        }
    } catch (IOException ioe) {
        ioe.printStackTrace();
    } catch (SQLException se) {
        se.printStackTrace();
    }
    try {
        RetrieveFriends.closeAll();
    } catch (IOException ioe) {
        ioe.printStackTrace();
    }
    // close Query handles
    try {
        friendList.close();
    } catch (SQLException e) {
        e.printStackTrace();
    }
    for (int i = 0; i < friendsCounter; i++) {
        if (friendsCounter != 0) {
            String QueryStringURLs = "SELECT URL.link, p.userID, URL.description FROM url URL," + "urlpostedby p where p.userID='" + FriendsVector.get(i).toString() + "' " + "AND p.urlID = URL.urlID ORDER BY p.urlID DESC LIMIT 0,1";
            String QueryStringVotes = "SELECT URL.link, v.postedBy, v.votes FROM url URL, " + "hasvotes v where v.postedBy='" + FriendsVector.get(i).toString() + "' " + "AND v.urlID = URL.urlID ORDER BY v.urlID DESC LIMIT 0,1";
            String QueryStringComments = "SELECT URL.link, c1.commentText, c.postedBy FROM url URL,commentthreads c," + "comments c1  where c.postedBy='" + FriendsVector.get(i).toString() + "' " + "AND c.urlID = URL.urlID AND c.commentID = c1.commentID ORDER BY c.urlID DESC LIMIT 0,1";
            // url query
            DataAccessObject URL = new DataAccessObject(QueryStringURLs, false);
            // votes query
            DataAccessObject vURL = new DataAccessObject(QueryStringVotes, false);
            // comments query
            DataAccessObject cURL = new DataAccessObject(QueryStringComments, false);
            // Url results
            ResultSet rsU = null;
            // Votes results
            ResultSet rsV = null;
            // Comments results
            ResultSet rsC = null;
            String mostRecentPostedUrl = "";
            String mostRecentVotedUrl = "";
            String mostRecentCommentedOnUrl = "";
            String mostRecentComment = "";
            String whoPosted = "";
            String whoCommented = "";
            String whoVoted = "";
            String UrlDescription = "";
            int numVotes = 0;
            try {
                rsU = URL.QueryResult();
                while (rsU.next()) {
                    mostRecentPostedUrl = rsU.getString(1);
                    whoPosted = rsU.getString(2);
                    UrlDescription = rsU.getString(3);
                }
                rsV = vURL.QueryResult();
                while (rsV.next()) {
                    mostRecentVotedUrl = rsV.getString(1);
                    whoVoted = rsV.getString(2);
                    numVotes = rsV.getInt(3);
                }
                rsC = cURL.QueryResult();
                while (rsC.next()) {
                    mostRecentCommentedOnUrl = rsC.getString(1);
                    mostRecentComment = rsC.getString(2);
                    whoCommented = rsC.getString(3);
                }
            } catch (IOException ioe) {
                ioe.printStackTrace();
            } catch (SQLException se) {
                se.printStackTrace();
            }
            try {
                URL.closeAll();
                vURL.closeAll();
                cURL.closeAll();
            } catch (IOException ioe) {
                ioe.printStackTrace();
            }
            try {
                rsU.close();
                rsV.close();
                rsC.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
            // close all Result handles
            // create an events update object
            myData.add(new LatestEventForAFriend(mostRecentPostedUrl, mostRecentVotedUrl, mostRecentCommentedOnUrl, mostRecentComment, whoVoted, whoCommented, whoPosted, UrlDescription, numVotes));
        } else {
            UserHasNofriends();
        }
    }
// end of for loop
}
