@Test
public void testTempEval2010GoldAnnotatorViews() throws Exception {
    CollectionReader reader = TempEval2010CollectionReader.getCollectionReader(this.outputDirectory.getPath());
    AnalysisEngine engine = AnalysisEngineFactory.createPrimitive(TempEval2010GoldAnnotator.getDescription(), TempEval2010GoldAnnotator.PARAM_TEXT_VIEWS, new String[] { "DCT", "TE", "TA", "EE", "EA", "E2DCT", "E2SST", "E2SE", "ME2ME" }, TempEval2010GoldAnnotator.PARAM_DOCUMENT_CREATION_TIME_VIEWS, new String[] { "DCT", "E2DCT" }, TempEval2010GoldAnnotator.PARAM_TIME_EXTENT_VIEWS, new String[] { "TE", "TA", "E2SST" }, TempEval2010GoldAnnotator.PARAM_TIME_ATTRIBUTE_VIEWS, new String[] { "TA" }, TempEval2010GoldAnnotator.PARAM_EVENT_EXTENT_VIEWS, new String[] { "EE", "EA", "E2DCT", "E2SST", "E2SE", "ME2ME" }, TempEval2010GoldAnnotator.PARAM_EVENT_ATTRIBUTE_VIEWS, new String[] { "EA" }, TempEval2010GoldAnnotator.PARAM_TEMPORAL_LINK_EVENT_TO_DOCUMENT_CREATION_TIME_VIEWS, new String[] { "E2DCT" }, TempEval2010GoldAnnotator.PARAM_TEMPORAL_LINK_EVENT_TO_SAME_SENTENCE_TIME_VIEWS, new String[] { "E2SST" }, TempEval2010GoldAnnotator.PARAM_TEMPORAL_LINK_EVENT_TO_SUBORDINATED_EVENT_VIEWS, new String[] { "E2SE" }, TempEval2010GoldAnnotator.PARAM_TEMPORAL_LINK_MAIN_EVENT_TO_NEXT_SENTENCE_MAIN_EVENT_VIEWS, new String[] { "ME2ME" });
    reader.getNext(this.jCas.getCas());
    engine.process(this.jCas);
    for (String viewName : new String[] { "DCT", "TE", "EA", "E2SE", "ME2ME" }) {
        JCas view = JCasUtil.getView(this.jCas, viewName, false);
        Collection<Sentence> sentences = JCasUtil.select(view, Sentence.class);
        Assert.assertEquals(viewName, 4, sentences.size());
        Collection<Token> tokens = JCasUtil.select(view, Token.class);
        Assert.assertEquals(viewName, 91, tokens.size());
    }
    for (String viewName : new String[] { "TE", "TA", "E2SST" }) {
        JCas view = JCasUtil.getView(this.jCas, viewName, false);
        Collection<Time> times = JCasUtil.select(view, Time.class);
        Assert.assertEquals(viewName, 4, times.size());
        Time t18 = itemAtIndex(times, 1);
        Assert.assertEquals(viewName, "t18", t18.getId());
        Assert.assertEquals(viewName, "the end of November", t18.getCoveredText());
        if (!viewName.equals("TA")) {
            for (Time time : times) {
                Assert.assertNull(time.getTimeType());
                Assert.assertNull(time.getValue());
            }
        } else {
            Assert.assertEquals(viewName, "1989-11", t18.getValue());
            Assert.assertEquals(viewName, "TIME", t18.getTimeType());
        }
    }
    for (String viewName : new String[] { "EE", "EA", "E2DCT", "E2SST", "E2SE", "ME2ME" }) {
        JCas view = JCasUtil.getView(this.jCas, viewName, false);
        Collection<Event> events = JCasUtil.select(view, Event.class);
        Assert.assertEquals(11, events.size());
        Event e10 = itemAtIndex(events, 9);
        Assert.assertEquals("e10", e10.getId());
        Assert.assertEquals("announced", e10.getCoveredText());
        if (viewName.equals("EA")) {
            Assert.assertEquals(viewName, "POS", e10.getPolarity());
            Assert.assertEquals(viewName, "NONE", e10.getModality());
            Assert.assertEquals(viewName, "ADJECTIVE", e10.getPos());
            Assert.assertEquals(viewName, "NONE", e10.getTense());
            Assert.assertEquals(viewName, "NONE", e10.getAspect());
            Assert.assertEquals(viewName, "REPORTING", e10.getEventClass());
        } else {
            Assert.assertNull(viewName, e10.getPolarity());
            Assert.assertNull(viewName, e10.getModality());
            Assert.assertNull(viewName, e10.getPos());
            Assert.assertNull(viewName, e10.getTense());
            Assert.assertNull(viewName, e10.getAspect());
            Assert.assertNull(viewName, e10.getEventClass());
        }
    }
    for (String viewName : new String[] { "DCT", "E2DCT" }) {
        JCas view = JCasUtil.getView(this.jCas, viewName, false);
        Collection<DocumentCreationTime> dcts = JCasUtil.select(view, DocumentCreationTime.class);
        Assert.assertEquals(1, dcts.size());
        Collection<Time> times = JCasUtil.select(view, Time.class);
        Assert.assertEquals(itemAtIndex(times, 0), itemAtIndex(dcts, 0));
        Time dct = itemAtIndex(dcts, 0);
        Assert.assertEquals("t0", dct.getId());
        Assert.assertEquals("1989-11-02", dct.getValue());
        Assert.assertEquals("CREATION_TIME", dct.getFunctionInDocument());
    }
    Collection<TemporalLink> tlinks;
    tlinks = JCasUtil.select(JCasUtil.getView(this.jCas, "E2DCT", false), TemporalLink.class);
    Assert.assertEquals(5, tlinks.size());
    TemporalLink e1t0 = itemAtIndex(tlinks, 0);
    Assert.assertEquals("BEFORE", e1t0.getRelationType());
    Assert.assertEquals("began", e1t0.getSource().getCoveredText());
    Assert.assertTrue(e1t0.getTarget() instanceof DocumentCreationTime);
    tlinks = JCasUtil.select(JCasUtil.getView(this.jCas, "E2SST", false), TemporalLink.class);
    Assert.assertEquals(3, tlinks.size());
    TemporalLink e8t21 = itemAtIndex(tlinks, 1);
    Assert.assertEquals("AFTER", e8t21.getRelationType());
    Assert.assertEquals("offer", e8t21.getSource().getCoveredText());
    Assert.assertEquals("previously", e8t21.getTarget().getCoveredText());
    tlinks = JCasUtil.select(JCasUtil.getView(this.jCas, "E2SE", false), TemporalLink.class);
    Assert.assertEquals(4, tlinks.size());
    TemporalLink e9e8 = itemAtIndex(tlinks, 2);
    Assert.assertEquals("BEFORE-OR-OVERLAP", e9e8.getRelationType());
    Assert.assertEquals("launched", e9e8.getSource().getCoveredText());
    Assert.assertEquals("offer", e9e8.getTarget().getCoveredText());
    tlinks = JCasUtil.select(JCasUtil.getView(this.jCas, "ME2ME", false), TemporalLink.class);
    Assert.assertEquals(3, tlinks.size());
    TemporalLink e5e7 = itemAtIndex(tlinks, 1);
    Assert.assertEquals("OVERLAP", e5e7.getRelationType());
    Assert.assertEquals("scheduled", e5e7.getSource().getCoveredText());
    Assert.assertEquals("owns", e5e7.getTarget().getCoveredText());
}
