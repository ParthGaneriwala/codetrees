public List<ErrorApnsCdr> parseFile(ErrorFile file) {
    long now = System.currentTimeMillis();
    java.io.BufferedReader br = null;
    int handledLines = file.getHandleLines();
    LOG.info(file.getDestfile() + "已经处理过" + handledLines + "行数据");
    List<ErrorApnsCdr> cdrs = new ArrayList<ErrorApnsCdr>();
    // 实际处理的个数
    int lastCount = 0;
    try {
        br = new BufferedReader(new java.io.InputStreamReader(new FileInputStream(file.getDestfile())));
        String line = null;
        ErrorApnsCdr cdr = null;
        int i = 0;
        while ((line = br.readLine()) != null) {
            try {
                if (line.equals(BASE_STR)) {
                    if (i >= handledLines) {
                        // if(cdr!=null)
                        lastCount++;
                        cdr = new ErrorApnsCdr();
                        cdr.setSgsnid(file.getSgsnid());
                        cdrs.add(cdr);
                    }
                    i++;
                }
                int idx = line.indexOf(":");
                if (idx == -1)
                    continue;
                if (cdr != null) {
                    if (line.startsWith("Time")) {
                        String time = line.substring(idx + 2).trim();
                        cdr.setOpentime((int) (df.parse(time).getTime() / 1000));
                    } else if (line.startsWith("Node")) {
                    } else if (line.startsWith("IMSI")) {
                        cdr.setImsi(line.substring(idx + 2).trim());
                    } else if (line.startsWith("MSISDN")) {
                        cdr.setMsisdn(line.substring(idx + 2).trim());
                    } else if (line.startsWith("SM Cause")) {
                        int idx1 = line.indexOf("(");
                        int idx2 = line.indexOf(")");
                        String errorcode = line.substring(idx1 + 2, idx2).trim();
                        cdr.setErrorcode(errorcode);
                    } else if (line.startsWith("Details")) {
                    } else if (line.startsWith("PDP Addr")) {
                        cdr.setPdpaddr(line.substring(idx + 2).trim());
                    } else if (line.startsWith("APN Used")) {
                        cdr.setUsedapn(line.substring(idx + 2).trim());
                    } else if (line.startsWith("NSEI")) {
                        cdr.setNsei(line.substring(idx + 2).trim());
                    } else if (line.startsWith("GGSN Addr")) {
                        cdr.setGgsnaddr(line.substring(idx + 2).trim());
                    } else if (line.startsWith("APN Req")) {
                        cdr.setReqapnni(line.substring(idx + 2).trim());
                    } else if (line.startsWith("APN Req")) {
                        cdr.setReqapnni(line.substring(idx + 2).trim());
                    } else if (line.startsWith("APN Sub")) {
                        if (line.length() < idx + 2)
                            cdr.setSubapnni("");
                        else
                            cdr.setSubapnni(line.substring(idx + 2).trim());
                    } else if (line.startsWith("APN") && !line.startsWith("APN Req") && !line.startsWith("APN Sub")) {
                        if (line.length() < idx + 2)
                            cdr.setSubapnni("");
                        else
                            cdr.setReqapnni(line.substring(idx + 2).trim());
                    }
                }
            } catch (Exception e) {
                LOG.error(file.getDestfile() + ":第" + i + "个区块解析有误", e);
            }
        }
        file.setHandleLines(handledLines + lastCount);
        LOG.info(file.getDestfile() + "解析时间为:" + (System.currentTimeMillis() - now) + "总共:" + i + "区块,实际处理" + lastCount + "块," + cdrs.size());
    } catch (Exception e) {
        LOG.error("解析文件有误", e);
    } finally {
        if (br != null)
            try {
                br.close();
            } catch (Exception ee) {
                LOG.error(file + "关闭异常", ee);
            }
    }
    return cdrs;
}
