public static void main(String[] args) throws Exception {
    DecimalFormat df = new DecimalFormat("0.00");
    Wikipedia wikipedia = Wikipedia.getInstanceFromArguments(args);
    BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
    TextProcessor tp = new CaseFolder();
    File dataDirectory = new File("/research/wikipediaminer/data/en/20090306");
    ProgressNotifier pn = new ProgressNotifier(2);
    TIntHashSet ids = wikipedia.getDatabase().getValidPageIds(dataDirectory, 3, pn);
    wikipedia.getDatabase().cacheAnchors(dataDirectory, tp, ids, 3, pn);
    while (true) {
        System.out.println("Enter a term (or press ENTER to quit): ");
        String termA = in.readLine();
        if (termA == null || termA.equals(""))
            break;
        System.out.println("Enter second term (or ENTER to just lookup \"" + termA + "\")");
        String termB = in.readLine();
        Anchor anA = new Anchor(termA, tp, wikipedia.getDatabase());
        System.out.println("\"" + anA.getText() + "\"");
        System.out.println(" - occurs in " + anA.getLinkCount() + " documents as links");
        if (wikipedia.getDatabase().areAnchorOccurancesSummarized())
            System.out.println(" - occurs in " + anA.getOccurranceCount() + " documents over all");
        System.out.println(" - possible destinations:");
        for (Sense sense : anA.getSenses()) {
            System.out.println("    - " + sense + " - (type = " + sense.getType() + ") " + sense.getOccurances() + " (" + df.format(sense.getProbability() * 100) + "%)");
        }
        System.out.println();
        if (termB != null && !termB.equals("")) {
            Anchor anB = new Anchor(termB, tp, wikipedia.getDatabase());
            System.out.println("\"" + anB.getText() + "\"");
            System.out.println(" - occurs in " + anB.getLinkCount() + " documents as links");
            if (wikipedia.getDatabase().areAnchorOccurancesSummarized())
                System.out.println(" - occurs in " + anA.getOccurranceCount() + " documents over all");
            System.out.println(" - possible destinations:");
            for (Sense sense : anB.getSenses()) System.out.println("    - " + sense + " - " + sense.getOccurances() + " (" + df.format(sense.getProbability() * 100) + "%)");
            System.out.println();
            System.out.println("\nRelatedness of \"" + termA + "\" to \"" + termB + "\": " + df.format(anA.getRelatednessTo(anB) * 100) + "%");
        }
    }
}
