public void draw(Graphics graphics, TerrainType[][] t) {
    // Draws the Terrain (1th layer)
    Graphics2D canvas = (Graphics2D) graphics;
    // determines size of the tile.
    int tileSize = (int) (MAX_TILE_SIZE / zoomFactor);
    int x = 0;
    int y = 0;
    int columns = t.length;
    int rows = t[0].length;
    int initX = x;
    // image transforming statements
    AffineTransform normal = AffineTransform.getScaleInstance(1 / zoomFactor, 1 / zoomFactor);
    BufferedImageOp normalBuffer = new AffineTransformOp(normal, AffineTransformOp.TYPE_BILINEAR);
    for (int col = 0; col < columns; ++col) {
        for (int row = 0; row < rows; ++row) {
            TerrainType activeTile = t[col][row];
            canvas.drawImage(ImageDatabase.getSprite(activeTile.toString()), normalBuffer, x, y);
            if (ViewBuffer.getCursor() != null) {
                if (ViewBuffer.getCursor().getX() == row && ViewBuffer.getCursor().getY() == col) {
                    Composite original = canvas.getComposite();
                    float alpha = 0.4f;
                    int type = AlphaComposite.SRC_OVER;
                    AlphaComposite composite = AlphaComposite.getInstance(type, alpha);
                    canvas.setComposite(composite);
                    Color c = canvas.getColor();
                    canvas.setColor(new Color(0, 0, 255));
                    canvas.fillOval(x, y, tileSize, tileSize);
                    canvas.setComposite(original);
                    canvas.setColor(c);
                }
            }
            // temp only for location tiles
            // temp only for location tiles
            Color c = canvas.getColor();
            canvas.setColor(new Color(255, 128, 0));
            String l = "(" + row + "," + col + ")";
            canvas.drawString(l, x, y);
            canvas.setColor(c);
            x += tileSize;
        }
        y += tileSize;
        x = initX;
    }
}
