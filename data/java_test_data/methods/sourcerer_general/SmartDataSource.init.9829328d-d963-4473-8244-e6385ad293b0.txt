public static void init(Class driverCls, Properties properties) throws NumberFormatException, SQLException {
    if (dataSource == null) {
        dataSource = new MyDataSource(driverCls);
        Object value = properties.get("defaultAutoCommit");
        if (value != null) {
            if (value.toString().equals("true")) {
                dataSource.setDefaultAutoCommit(true);
            } else {
                dataSource.setDefaultAutoCommit(false);
            }
        }
        value = properties.get("defaultReadOnly");
        if (value != null) {
            if (value.toString().equals("true")) {
                dataSource.setDefaultReadOnly(true);
            } else {
                dataSource.setDefaultReadOnly(false);
            }
        }
        value = properties.get("defaultTransactionIsolation");
        if (value != null) {
            dataSource.setDefaultTransactionIsolation(Integer.valueOf(value.toString()));
        }
        value = properties.get("defaultCatalog");
        if (value != null) {
            dataSource.setDefaultCatalog(value.toString());
        }
        // value=properties.get("driverClassName");
        // if(value!=null){
        // dataSource.setDriverClassName(value);
        // }
        // value=properties.get("driverClassLoader");
        // if(value!=null){
        // dataSource.setDriverClassLoader(value);
        // }
        value = properties.get("maxActive");
        if (value != null) {
            dataSource.setMaxActive(Integer.valueOf(value.toString()));
        }
        value = properties.get("maxIdle");
        if (value != null) {
            dataSource.setMaxIdle(Integer.valueOf(value.toString()));
        }
        value = properties.get("minIdle");
        if (value != null) {
            dataSource.setMinIdle(Integer.valueOf(value.toString()));
        }
        value = properties.get("initialSize");
        if (value != null) {
            dataSource.setInitialSize(Integer.valueOf(value.toString()));
        }
        value = properties.get("maxWait");
        if (value != null) {
            dataSource.setMaxWait(Integer.valueOf(value.toString()));
        }
        value = properties.get("poolPreparedStatements");
        if (value != null) {
            if (value.toString().equals("true")) {
                dataSource.setPoolPreparedStatements(true);
            } else {
                dataSource.setPoolPreparedStatements(false);
            }
        }
        value = properties.get("maxOpenPreparedStatements");
        if (value != null) {
            dataSource.setMaxOpenPreparedStatements(Integer.valueOf(value.toString()));
        }
        value = properties.get("testOnBorrow");
        if (value != null) {
            if (value.toString().equals("true")) {
                dataSource.setTestOnBorrow(true);
            } else {
                dataSource.setTestOnBorrow(false);
            }
        }
        value = properties.get("testOnReturn");
        if (value != null) {
            if (value.toString().equals("true")) {
                dataSource.setTestOnReturn(true);
            } else {
                dataSource.setTestOnReturn(false);
            }
        }
        value = properties.get("timeBetweenEvictionRunsMillis");
        if (value != null) {
            dataSource.setTimeBetweenEvictionRunsMillis(Long.valueOf(value.toString()));
        }
        value = properties.get("numTestsPerEvictionRun");
        if (value != null) {
            dataSource.setNumTestsPerEvictionRun(Integer.valueOf(value.toString()));
        }
        value = properties.get("minEvictableIdleTimeMillis");
        if (value != null) {
            dataSource.setMinEvictableIdleTimeMillis(Long.valueOf(value.toString()));
        }
        value = properties.get("testWhileIdle");
        if (value != null) {
            if (value.toString().equals("true")) {
                dataSource.setTestWhileIdle(true);
            } else {
                dataSource.setTestWhileIdle(false);
            }
        }
        value = properties.get("password");
        if (value != null) {
            dataSource.setPassword(value.toString());
        }
        value = properties.get("url");
        if (value != null) {
            dataSource.setUrl(value.toString());
        }
        value = properties.get("username");
        if (value != null) {
            dataSource.setUsername(value.toString());
        }
        value = properties.get("validationQuery");
        if (value != null) {
            dataSource.setValidationQuery(value.toString());
        }
        value = properties.get("validationQueryTimeout");
        if (value != null) {
            dataSource.setValidationQueryTimeout(Integer.valueOf(value.toString()));
        }
        // value=properties.get("connectionInitSqls");
        // if(value!=null){
        // dataSource.setConnectionInitSqls(value);
        // }
        value = properties.get("accessToUnderlyingConnectionAllowed");
        if (value != null) {
            if (value.toString().equals("true")) {
                dataSource.setAccessToUnderlyingConnectionAllowed(true);
            } else {
                dataSource.setAccessToUnderlyingConnectionAllowed(false);
            }
        }
        value = properties.get("loginTimeout");
        if (value != null) {
            dataSource.setLoginTimeout(Integer.valueOf(value.toString()));
        }
        value = properties.get("logWriter");
        if (value != null) {
            if (value instanceof PrintWriter) {
                dataSource.setLogWriter((PrintWriter) value);
            }
        }
        value = properties.get("removeAbandoned");
        if (value != null) {
            if (value.toString().equals("true")) {
                dataSource.setRemoveAbandoned(true);
            } else {
                dataSource.setRemoveAbandoned(false);
            }
        }
        value = properties.get("removeAbandonedTimeout");
        if (value != null) {
            dataSource.setRemoveAbandonedTimeout(Integer.valueOf(value.toString()));
        }
        value = properties.get("logAbandoned");
        if (value != null) {
            if (value.toString().equals("true")) {
                dataSource.setLogAbandoned(true);
            } else {
                dataSource.setLogAbandoned(false);
            }
        }
        value = properties.get("connectionProperties");
        if (value != null) {
            dataSource.setConnectionProperties(value.toString());
        }
    }
}
