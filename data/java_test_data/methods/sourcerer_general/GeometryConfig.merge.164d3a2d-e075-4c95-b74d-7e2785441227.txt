// documentation inherited
@Override
public GeometryConfig merge(List<TransformedGeometry> glist) {
    List<TransformedGeometry> merge = Lists.newArrayList();
    Class<? extends Stored> clazz = getClass();
    int vcount = 0;
    for (int ii = glist.size() - 1; ii >= 0; ii--) {
        TransformedGeometry tgeom = glist.get(ii);
        if (tgeom.geometry.getClass() != clazz) {
            continue;
        }
        Stored stored = (Stored) tgeom.geometry;
        if (canMerge(stored)) {
            glist.remove(ii);
            merge.add(tgeom);
            vcount += stored.getCount();
        }
    }
    if (merge.isEmpty()) {
        return null;
    }
    Stored merged = createMerged(merge);
    merged.bounds = new Box();
    merged.mode = mode;
    int stride = vertexArray.stride / 4;
    FloatBuffer vbuf = BufferUtils.createFloatBuffer(stride * vcount);
    if (vertexAttribArrays != null) {
        merged.vertexAttribArrays = new AttributeArrayConfig[vertexAttribArrays.length];
        for (int ii = 0; ii < vertexAttribArrays.length; ii++) {
            AttributeArrayConfig attrArray = vertexAttribArrays[ii];
            merged.vertexAttribArrays[ii] = new AttributeArrayConfig(attrArray.size, attrArray.stride, attrArray.offset, vbuf, attrArray.name);
        }
    }
    if (texCoordArrays != null) {
        merged.texCoordArrays = new ClientArrayConfig[texCoordArrays.length];
        for (int ii = 0; ii < texCoordArrays.length; ii++) {
            ClientArrayConfig texCoordArray = texCoordArrays[ii];
            merged.texCoordArrays[ii] = new ClientArrayConfig(texCoordArray.size, texCoordArray.stride, texCoordArray.offset, vbuf);
        }
    }
    if (colorArray != null) {
        merged.colorArray = new ClientArrayConfig(colorArray.size, colorArray.stride, colorArray.offset, vbuf);
    }
    if (normalArray != null) {
        merged.normalArray = new ClientArrayConfig(normalArray.size, normalArray.stride, normalArray.offset, vbuf);
    }
    merged.vertexArray = new ClientArrayConfig(vertexArray.size, vertexArray.stride, vertexArray.offset, vbuf);
    int vpos = 0;
    for (int ii = merge.size() - 1; ii >= 0; ii--) {
        TransformedGeometry tgeom = merge.get(ii);
        Stored stored = (Stored) tgeom.geometry;
        merged.bounds.addLocal(stored.bounds.transform(tgeom.transform));
        // perform a bulk transfer of the array data
        FloatBuffer obuf = stored.vertexArray.floatArray;
        int olimit = obuf.limit(), opos = obuf.position();
        int npos = opos + stored.getFirst() * stride;
        int count = stored.getCount();
        obuf.limit(npos + count * stride).position(npos);
        vbuf.put(stored.vertexArray.floatArray);
        obuf.limit(olimit).position(opos);
        // then transform the vertices and normals in-place
        tgeom.transform.update(Transform3D.AFFINE);
        Matrix4f mat = tgeom.transform.getMatrix();
        int voff = vertexArray.offset / 4;
        if (normalArray == null) {
            for (int jj = 0; jj < count; jj++) {
                int pos = vpos + voff;
                float vx = vbuf.get(pos), vy = vbuf.get(pos + 1), vz = vbuf.get(pos + 2);
                vbuf.put(pos, mat.m00 * vx + mat.m10 * vy + mat.m20 * vz + mat.m30);
                vbuf.put(pos + 1, mat.m01 * vx + mat.m11 * vy + mat.m21 * vz + mat.m31);
                vbuf.put(pos + 2, mat.m02 * vx + mat.m12 * vy + mat.m22 * vz + mat.m32);
                vpos += stride;
            }
        } else {
            int noff = normalArray.offset / 4;
            for (int jj = 0; jj < count; jj++) {
                int pos = vpos + voff;
                float vx = vbuf.get(pos), vy = vbuf.get(pos + 1), vz = vbuf.get(pos + 2);
                vbuf.put(pos, mat.m00 * vx + mat.m10 * vy + mat.m20 * vz + mat.m30);
                vbuf.put(pos + 1, mat.m01 * vx + mat.m11 * vy + mat.m21 * vz + mat.m31);
                vbuf.put(pos + 2, mat.m02 * vx + mat.m12 * vy + mat.m22 * vz + mat.m32);
                pos = vpos + noff;
                float nx = vbuf.get(pos), ny = vbuf.get(pos + 1), nz = vbuf.get(pos + 2);
                vbuf.put(pos, mat.m00 * nx + mat.m10 * ny + mat.m20 * nz);
                vbuf.put(pos + 1, mat.m01 * nx + mat.m11 * ny + mat.m21 * nz);
                vbuf.put(pos + 2, mat.m02 * nx + mat.m12 * ny + mat.m22 * nz);
                vpos += stride;
            }
        }
    }
    vbuf.rewind();
    return merged;
}
