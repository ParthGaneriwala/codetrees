public Dimension updateDrawParameters(DiGraph graph, Node startNode, Graphics grps) {
    // Set the graphics first
    // graphics = grps;
    graphics2D = (Graphics2D) getGraphics();
    // font = graphics.getFont();
    // Calculate the drawing parameters
    controlFlowGraph = (ControlFlowGraph) graph;
    nodeVsBackEdge = new HashMap<Node, BackEdge>();
    // First pass, establishes the
    setLevelsAndSizes(graph, startNode);
    for (int i = 0; i < levels.size(); i++) {
        BFSLevel level = levels.elementAt(i);
        System.out.println("Level Number " + (i + 1) + ": ");
        Vector<Node> nds = level.getNodes();
        for (int j = 0; j < nds.size(); j++) {
            Node nd = nds.elementAt(j);
            System.out.print(nd.getName() + ", ");
        }
        System.out.println("");
    }
    // First part of the second pass; traverses upwards,
    traverseUpwards();
    // determing positions
    // Second part of the second pass; traverses
    traverseDownwards();
    // upwards, determing positions
    updateXOffSetsOfNodes();
    edgeParametersList = new Vector<EdgeParameters>();
    nodeVsTriangleParams = new HashMap<Node, TriangleParameters>();
    nodesVsAdjacentEdges = new HashMap<Node, Vector<AdjacentEdge>>();
    maxTriangleHeight = verticalGap * triangleHeightFraction;
    maxTriangleHeightForAngledLine = verticalGap * angledTriangleHeightFraction;
    setEdgePositions();
    // Return the size of the graph to be drawn
    int graphHeight = topMargin;
    int numLevels = levels.size();
    for (int i = 0; i < numLevels; i++) {
        BFSLevel level = levels.elementAt(i);
        Integer heightInt = levelsVsHeights.get(level);
        graphHeight += heightInt.intValue() + verticalGap;
    }
    int graphWidth = 0;
    for (int i = 0; i < numLevels; i++) {
        BFSLevel level = levels.elementAt(i);
        Vector nodes = level.getNodes();
        int numNodesInLevel = nodes.size();
        Node lastNodeInLevel = (Node) nodes.elementAt(numNodesInLevel - 1);
        DrawingParameters dpLastNodeInLevel = nodesVsDrawingParameters.get(lastNodeInLevel);
        int xPosOfLastNode = dpLastNodeInLevel.getXPosition();
        Dimension sizeOfLastNode = dpLastNodeInLevel.getSize();
        int endXPosOfLevel = xPosOfLastNode + sizeOfLastNode.width;
        if (endXPosOfLevel > graphWidth) {
            graphWidth = endXPosOfLevel;
        }
    }
    return new Dimension(graphWidth + 10, graphHeight);
}
