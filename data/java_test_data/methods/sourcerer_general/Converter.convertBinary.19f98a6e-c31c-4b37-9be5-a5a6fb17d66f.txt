private void convertBinary() {
    currentBinary = ipBinary.getText().toString().trim();
    if (debug)
        Log.d(TAG, "convertBinary: currentBinary=" + currentBinary);
    if (currentBinary.length() < 32) {
        Toast.makeText(Converter.this, R.string.err_bad_ip, Toast.LENGTH_SHORT).show();
        if (debug)
            Log.d(TAG, "convertToBinary: less than 32");
        return;
    }
    try {
        String octet1b = currentBinary.substring(0, 8);
        if (debug)
            Log.d(TAG, "convertToBinary: octet1b=" + octet1b);
        String octet2b = currentBinary.substring(9, 17);
        if (debug)
            Log.d(TAG, "convertToBinary: octet2b=" + octet2b);
        String octet3b = currentBinary.substring(18, 26);
        if (debug)
            Log.d(TAG, "convertToBinary: octet3b=" + octet3b);
        String octet4b = currentBinary.substring(27, 35);
        if (debug)
            Log.d(TAG, "convertToBinary: octet4b=" + octet4b);
        long octet1i = Integer.parseInt(octet1b, 2);
        long octet2i = Integer.parseInt(octet2b, 2);
        long octet3i = Integer.parseInt(octet3b, 2);
        long octet4i = Integer.parseInt(octet4b, 2);
        currentIP = octet1i + "." + octet2i + "." + octet3i + "." + octet4i;
        ipAddress.setText(currentIP);
        int ip32bit;
        ip32bit = CIDRCalculator.stringIPtoInt(currentIP);
        String hexIP = convertIPIntDec2StringHex(ip32bit);
        ipHex.setText(hexIP);
    } catch (NumberFormatException e) {
        Toast.makeText(Converter.this, R.string.err_bad_ip, Toast.LENGTH_SHORT).show();
        if (debug)
            Log.d(TAG, "convertToBinary: numberFormatException");
    } catch (StringIndexOutOfBoundsException e) {
        Toast.makeText(Converter.this, R.string.err_bad_ip, Toast.LENGTH_SHORT).show();
        if (debug)
            Log.d(TAG, "convertToBinary: StringIndexOutOfBoundsException");
    } catch (Exception e) {
        Toast.makeText(Converter.this, R.string.err_bad_ip, Toast.LENGTH_SHORT).show();
        if (debug)
            Log.d(TAG, "convertToBinary: Exception");
    }
}
