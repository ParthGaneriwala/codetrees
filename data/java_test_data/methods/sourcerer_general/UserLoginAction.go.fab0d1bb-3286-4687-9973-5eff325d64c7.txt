@Override
protected String go() throws Exception {
    this.nextPage = "index.pl";
    ActionContext ctx = ActionContext.getContext();
    String contextid = ctx.getApplication().get("CONTEXTID").toString();
    // HttpServletRequest request = (HttpServletRequest) ctx.get(ServletActionContext.HTTP_REQUEST);
    HttpServletResponse response = (HttpServletResponse) ctx.get(ServletActionContext.HTTP_RESPONSE);
    String _remoteAddr = super.getIpAddr();
    Object obj = get(Constants.VALIDATE_CODE);
    LOG.debug("===================验证码:::" + obj);
    // if (!_remoteAddr.startsWith("127.0.0")) {
    // // 验证码为空
    // if (obj == null) {
    // message = "验证码已经过期,请返回重新输入";
    // return Constants.ACTION_MESSAGE;
    // }
    // // 输入的验证码不符合要求
    // if (!((String) obj).equals(randnum)) {
    // message = "您输入的验证码错误,请返回重新输入";
    // return Constants.ACTION_MESSAGE;
    // }
    // }
    // 根据loginname得到用户个人信息
    // SysUserDAO dao=new SysUserDAO();
    LawyersService lawyersService = (LawyersService) getBean("lawyersService");
    int loginResult = lawyersService.userLogin(this.loginname.trim(), this.password.trim());
    LOG.debug("登录验证结果:::" + loginResult);
    if (loginResult == -1) {
        message = "您输入的帐号在系统中不存在,请确认";
        return Constants.ACTION_MESSAGE;
    }
    if (loginResult == -2) {
        message = "您的帐号已被禁用,请联系管理员";
        return Constants.ACTION_MESSAGE;
    }
    if (loginResult == -3) {
        message = "您输入的密码错误,请返回重新输入";
        return Constants.ACTION_MESSAGE;
    }
    Lawyers lawyers = lawyersService.getLawyers();
    if (CommonDatas.ONLINE_USERS.containsKey(lawyers.getLawyerid())) {
        LawyerLoginlog log = CommonDatas.ONLINE_USERS.get(lawyers.getLawyerid());
        // message="您当前已经登录,登录时间："+log.getLoginTime()+",登录IP："+log.getLoginip()+".请先退出或联系管理员";
        // return Constants.ACTION_MESSAGE;
        System.out.println("您当前已经登录,登录时间：" + log.getLoginTime() + ",登录IP：" + log.getLoginip() + ".请先退出或联系管理员");
    }
    LawyerLoginLogService loginService = (LawyerLoginLogService) getBean("lawyerLoginLogService");
    lawyers.setLoginCount(loginService.getLoginCountByUserId(lawyers.getLawyerid()));
    lawyers.setLastLoginTime(loginService.getLastLoginTime(lawyers.getLawyerid()));
    // return Constants.ACTION_MESSAGE;
    LOG.debug("系统每次启动后的标志ID:" + contextid);
    if (savecookie) {
        Cookie cookie = new Cookie(Constants.COOKIE_LOGINNAME, this.loginname);
        cookie.setMaxAge(Integer.MAX_VALUE);
        Cookie passwd = new Cookie(Constants.COOKIE_PASSWORD, this.password);
        passwd.setMaxAge(Integer.MAX_VALUE);
        response.addCookie(cookie);
        response.addCookie(passwd);
    }
    if (pasivelogin != null && pasivelogin.equals("true")) {
        LOG.debug("系统被动登录成功.............");
        int loginid = loginService.insertLoginLog(_remoteAddr, lawyers, contextid, "会话退出重新登录");
        // 绑定本次登录的登录id
        lawyers.setLoginId(loginid);
        this.set(Constants.LOGIN_USER, lawyers);
        return "pasiveloginsuccess";
    } else {
        int loginid = loginService.insertLoginLog(_remoteAddr, lawyers, contextid, "正常登录");
        // 绑定本次登录的登录id
        lawyers.setLoginId(loginid);
        LOG.debug("系统正常登录成功.............");
        this.set(Constants.LOGIN_USER, lawyers);
        return SUCCESS;
    }
}
