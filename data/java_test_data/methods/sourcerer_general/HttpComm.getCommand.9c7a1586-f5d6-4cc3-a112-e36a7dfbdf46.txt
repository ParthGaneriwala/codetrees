public static List<Command> getCommand(int deviceid) {
    List<Command> commandList = new ArrayList<Command>();
    try {
        Map<String, String> params = new HashMap<String, String>();
        params.put("optype", "getcommand");
        params.put("userid", Integer.toString(CurSession.userid));
        params.put("deviceid", Integer.toString(deviceid));
        executeOpen(serverUrl, getreqstr(params));
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        byte[] tmpb = new byte[1024];
        int len;
        while ((len = is.read(tmpb)) != -1) {
            baos.write(tmpb, 0, len);
        }
        String res = baos.toString();
        Document doc = DocumentHelper.parseText(res);
        List<Element> list = doc.getRootElement().elements();
        for (Element element : list) {
            Command command = new Command();
            command.setId(Integer.parseInt(element.elementText("commandid")));
            command.setCommandname(element.elementText("commandname"));
            command.setCommandtype(Integer.parseInt(element.elementText("commandtype")));
            command.setDeviceid(deviceid);
            commandList.add(command);
        }
    } catch (Exception e) {
        e.printStackTrace();
    }
    return commandList;
}
