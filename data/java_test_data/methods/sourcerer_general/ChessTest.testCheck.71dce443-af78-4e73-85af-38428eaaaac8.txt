@Test
public void testCheck() {
    int length = chess.getBoard().getGrid().length;
    // disables up player 1 pawns
    for (int i = 0; i < length; i++) {
        chess.getBoard().getGrid()[i][1].setOccupied(false);
    }
    chess.getBoard().getGrid()[4][1].setPiece(new Bishop());
    chess.getBoard().getGrid()[4][1].getPiece().setPlayer(true);
    chess.getBoard().getGrid()[4][1].setOccupied(true);
    chess.getBoard().getGrid()[4][4].setPiece(new Queen());
    chess.getBoard().getGrid()[4][4].getPiece().setPlayer(false);
    chess.getBoard().getGrid()[4][4].setOccupied(true);
    chess.setPlayer1(true);
    chess.setPlayer2(false);
    String s = chess.check();
    assertEquals(s, "Nobody_inCheck");
    // Moves bishop of player1 to expose its king to a check by player2's queen
    chess.move(4, 1, 3, 2);
    assertTrue(chess.getBoard().getGrid()[4][1].isOccupied());
    assertFalse(chess.getBoard().getGrid()[3][2].isOccupied());
    // Scenario2: player2 gives a check to player1
    chess.setBoard(chess.setupBoard());
    chess.setupPieces();
    // disables up player 1 pawns
    for (int i = 0; i < length; i++) {
        chess.getBoard().getGrid()[i][1].setOccupied(false);
    }
    chess.getBoard().getGrid()[5][4].setPiece(new Queen());
    chess.getBoard().getGrid()[5][4].getPiece().setPlayer(false);
    chess.getBoard().getGrid()[5][4].setOccupied(true);
    chess.setPlayer1(false);
    chess.setPlayer2(true);
    s = chess.check();
    assertEquals("Nobody_inCheck", s);
    // Moves queen of player2 to check king of player1
    chess.move(5, 4, 4, 4);
    s = chess.check();
    assertEquals(s, "p1_inCheck");
    // Scenario3: player2 moves and puts himself in a check position
    chess.setBoard(chess.setupBoard());
    chess.setupPieces();
    // disables up player 2 pawns
    for (int i = 0; i < length; i++) {
        chess.getBoard().getGrid()[i][6].setOccupied(false);
    }
    chess.getBoard().getGrid()[4][6].setPiece(new Bishop());
    chess.getBoard().getGrid()[4][6].getPiece().setPlayer(false);
    chess.getBoard().getGrid()[4][6].setOccupied(true);
    chess.getBoard().getGrid()[4][3].setPiece(new Queen());
    chess.getBoard().getGrid()[4][3].getPiece().setPlayer(true);
    chess.getBoard().getGrid()[4][3].setOccupied(true);
    chess.setPlayer1(false);
    chess.setPlayer2(true);
    s = chess.check();
    assertEquals(s, "Nobody_inCheck");
    // Moves bishop of player2 to expose its king to a check by player1's queen
    chess.move(4, 6, 3, 5);
    assertTrue(chess.getBoard().getGrid()[4][6].isOccupied());
    assertFalse(chess.getBoard().getGrid()[3][5].isOccupied());
    // Scenario4: player1 gives a check to player2
    chess.setBoard(chess.setupBoard());
    chess.setupPieces();
    // disables up player 2 pawns
    for (int i = 0; i < length; i++) {
        chess.getBoard().getGrid()[i][6].setOccupied(false);
    }
    chess.getBoard().getGrid()[5][4].setPiece(new Queen());
    chess.getBoard().getGrid()[5][4].getPiece().setPlayer(true);
    chess.getBoard().getGrid()[5][4].setOccupied(true);
    chess.setPlayer1(true);
    chess.setPlayer2(false);
    s = chess.check();
    assertEquals("Nobody_inCheck", s);
    // Moves queen of player2 to check king of player1
    chess.move(5, 4, 4, 4);
    s = chess.check();
    assertEquals("p2_inCheck", s);
}
