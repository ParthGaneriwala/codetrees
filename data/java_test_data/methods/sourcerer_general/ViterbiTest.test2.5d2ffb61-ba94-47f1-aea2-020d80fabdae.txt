@Test
public void test2() throws Throwable {
    List<List<Feature>> features = new ArrayList<List<Feature>>();
    features.add(createFeatures("1"));
    features.add(createFeatures("2"));
    features.add(createFeatures("3"));
    features.add(createFeatures("4"));
    features.add(createFeatures("5"));
    features.add(createFeatures("6"));
    UimaContext uimaContext = UimaContextFactory.createUimaContext(DefaultOutcomeFeatureExtractor.PARAM_MOST_RECENT_OUTCOME, 1, DefaultOutcomeFeatureExtractor.PARAM_LEAST_RECENT_OUTCOME, 1, DefaultOutcomeFeatureExtractor.PARAM_USE_BIGRAM, false, DefaultOutcomeFeatureExtractor.PARAM_USE_TRIGRAM, false, DefaultOutcomeFeatureExtractor.PARAM_USE4GRAM, false);
    DefaultOutcomeFeatureExtractor dofe = new DefaultOutcomeFeatureExtractor();
    dofe.initialize(uimaContext);
    TestViterbiClassifier tvc = new TestViterbiClassifier();
    tvc.setOutcomeFeatureExctractors(new OutcomeFeatureExtractor[] { dofe });
    tvc.setStackSize(2);
    tvc.setAddScores(true);
    tvc.setDelegatedClassifier(new Test2Classifier());
    List<String> bestSequence = tvc.viterbi(features);
    assertEquals("2", bestSequence.get(0));
    assertEquals("1", bestSequence.get(1));
    assertEquals("2", bestSequence.get(2));
    assertEquals("1", bestSequence.get(3));
    assertEquals("1", bestSequence.get(4));
    assertEquals("2", bestSequence.get(5));
}
