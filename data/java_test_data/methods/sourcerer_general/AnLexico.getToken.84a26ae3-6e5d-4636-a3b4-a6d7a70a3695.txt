public Token getToken() {
    char[] tokenID = new char[MAX_TOKEN_SIZE];
    Token token = new Token();
    if (rejectedToken != null) {
        Token t = rejectedToken;
        rejectedToken = null;
        return t;
    }
    try {
        int position = 0;
        state = initialState;
        /**
         * Main loop of the state machine
         *
         * Get the next input for the state machine
         *
         * Find the transition collumn. The state is the line.
         *
         * if there is a possible transition
         * does the transition
         * else if the state is a final state
         * returns the token
         * else
         * returns an error
         */
        while (!eof) {
            int input = getChar();
            int i = findTransitionCollumn(input);
            if (transitions[i][state] == -1) {
                // End of Token/Error
                if (finalState[state] > 0) {
                    // End
                    tokenID[position] = '\0';
                    /**
                     * Mantain the last character read(the one that was not used)
                     */
                    lastChar = (char) input;
                    /**
                     * Define Type of Token
                     */
                    token.setTokenType(finalState[state]);
                    token.setID(tokenID);
                    int reserved = getReservedWordTokenType(token.getID());
                    if (reserved > -1) {
                        token.setTokenType(reserved);
                    }
                    return token;
                } else {
                    // Error
                    throw new Error("Invalid Token.");
                }
            } else {
                tokenID[position] = (char) input;
                state = transitions[i][state];
                if (tokenID[position] != ' ') {
                    position++;
                } else {
                    tokenID[position] = '\0';
                }
                if (position >= MAX_TOKEN_SIZE) {
                    throw new Error("Token muito grande.");
                }
            }
        }
    } catch (IOException ex) {
        Logger.getLogger(AnLexico.class.getName()).log(Level.SEVERE, null, ex);
    }
    if (eof) {
        token.setID(tokenID);
        token.setTokenType(Token.Type_EOF);
    }
    return token;
}
