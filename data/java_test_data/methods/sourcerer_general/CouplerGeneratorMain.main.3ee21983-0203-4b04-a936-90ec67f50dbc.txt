public static void main(String[] args) {
    String modelLocation = System.getProperty("model.location");
    if (modelLocation == null) {
        System.out.println("model.location system property is null - using default model: " + DEFAULT_MODEL);
        modelLocation = DEFAULT_MODEL;
    }
    // load up the XMI instance file
    ResourceSet resourceSet = new ResourceSetImpl();
    resourceSet.getResourceFactoryRegistry().getExtensionToFactoryMap().put(Resource.Factory.Registry.DEFAULT_EXTENSION, new XMIResourceFactoryImpl());
    @SuppressWarnings("unused") CM3Package cm3package = CM3Package.eINSTANCE;
    @SuppressWarnings("unused") ESMFPackage esmfPackage = ESMFPackage.eINSTANCE;
    URI fileURI = URI.createFileURI(new File(modelLocation).getAbsolutePath());
    Resource resource = resourceSet.getResource(fileURI, true);
    ESMFWorkspace ws = (ESMFWorkspaceImpl) resource.getEObject("/");
    // just take first composition, schedule, and deployment for now
    ESMFComposition comp = ws.getComposition().get(0);
    ESMFSchedule sched = ws.getSchedule().get(0);
    ESMFDeployment dep = ws.getDeployment().get(0);
    // testing some OCL stuff
    /*
		OCL ocl = OCL.newInstance();
		Helper helper = ocl.createOCLHelper();
		helper.setContext(ESMFPackage.Literals.ESMF_COMPOSITION);
		try {
			Constraint inv = helper.createInvariant("not self.connection->notEmpty()");
			boolean check = ocl.check(comp, inv);
			System.out.println("\n\nResult: " + check);		
		} catch (ParserException e) {			
			e.printStackTrace();
		}
		*/
    ESMFDriverGenerator dg;
    dg = new ESMFDriverGenerator(comp, sched, dep);
    ESMFCouplerGenerator cg;
    cg = new ESMFCouplerGenerator(comp.getConnection().get(0));
    String code1 = dg.generateDriver();
    String code2 = cg.generateCoupler();
    System.out.println(code1);
    System.out.println("\n\n===============================\n\n");
    System.out.println(code2);
}
