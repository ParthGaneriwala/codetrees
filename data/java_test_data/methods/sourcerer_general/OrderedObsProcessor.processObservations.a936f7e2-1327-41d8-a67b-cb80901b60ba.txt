public void processObservations() {
    // location is clustered, clusters are separated by comma
    String clusterNames = Context.getAdministrationService().getGlobalProperty(TaskParameters.LOCATION_GROUP_LIST);
    if (clusterNames != null) {
        String[] clusterName = StringUtils.split(clusterNames, TaskParameters.CLUSTER_SEPARATOR);
        GlobalProperty globalProperty = Context.getAdministrationService().getGlobalPropertyObject(TaskParameters.PROCESSOR_COUNTER);
        // start with the first cluster (offset = 0) when the counter is not a number
        Integer clusterOffset = NumberUtils.toInt(globalProperty.getPropertyValue(), 0);
        if (clusterOffset >= 0 && clusterOffset < ArrayUtils.getLength(clusterName)) {
            GlobalProperty initProperty = Context.getAdministrationService().getGlobalPropertyObject(TaskParameters.PROCESSOR_INITIALIZED);
            String currentCluster = clusterName[clusterOffset];
            // check whether all cluster have been initialized or not
            Boolean initialized = Boolean.getBoolean(initProperty.getPropertyValue());
            Cohort cohort;
            String[] locationIds = StringUtils.split(currentCluster);
            for (int i = 0; i < ArrayUtils.getLength(locationIds); i++) {
                log.info("Processing location with id: " + locationIds[i]);
                // default return to -1 because no such location with id -1
                Location location = Context.getLocationService().getLocation(NumberUtils.toInt(locationIds[i], -1));
                if (!initialized) {
                    cohort = Context.getService(CoreService.class).getCohort(location, null, null);
                } else {
                    // regenerate when there's new obs
                    Calendar calendar = Calendar.getInstance();
                    calendar.add(Calendar.DATE, -(clusterName.length + 1));
                    Date date = calendar.getTime();
                    cohort = Context.getService(CoreService.class).getCohort(location, date, new Date());
                }
                // this processing is similar with the flow-sheet processing but we also include the duplicate processing here
                CoreService coreService = Context.getService(CoreService.class);
                for (Map<String, List<String>> parameter : parameters) {
                    // process each parameter
                    List<String> conceptNames = parameter.get(EvaluableConstants.OBS_CONCEPT);
                    List<String> valueCodedNames = parameter.get(EvaluableConstants.OBS_VALUE_CODED);
                    if (CollectionUtils.isNotEmpty(conceptNames) && CollectionUtils.isNotEmpty(valueCodedNames)) {
                        // prepare the concept restriction
                        Collection<OpenmrsObject> concepts = new ArrayList<OpenmrsObject>();
                        for (String conceptName : conceptNames) {
                            Concept concept = CacheUtils.getConcept(conceptName);
                            if (concept != null)
                                concepts.add(concept);
                        }
                        // test ordered concept
                        Concept testOrderedConcept = CacheUtils.getConcept(TaskParameters.TESTS_ORDERED);
                        Collection<OpenmrsObject> testedConcepts = new ArrayList<OpenmrsObject>();
                        testedConcepts.add(testOrderedConcept);
                        // prepare the value coded restriction
                        Collection<OpenmrsObject> valueCodeds = new ArrayList<OpenmrsObject>();
                        for (String valueCodedName : valueCodedNames) {
                            Concept concept = CacheUtils.getConcept(valueCodedName);
                            if (concept != null)
                                valueCodeds.add(concept);
                        }
                        Map<String, Collection<OpenmrsObject>> restrictions = new HashMap<String, Collection<OpenmrsObject>>();
                        for (Integer patientId : cohort.getMemberIds()) {
                            // search for the results
                            restrictions.put(EvaluableConstants.OBS_CONCEPT, concepts);
                            List<Obs> testResultObservations = coreService.getPatientObservations(patientId, restrictions, new FetchRestriction());
                            // remove and then save the duplicates
                            testResultObservations = stripDuplicate(testResultObservations);
                            // search for the tests
                            restrictions.put(EvaluableConstants.OBS_CONCEPT, testedConcepts);
                            restrictions.put(EvaluableConstants.OBS_VALUE_CODED, valueCodeds);
                            List<Obs> testOrderedObservations = coreService.getPatientObservations(patientId, restrictions, new FetchRestriction());
                            // remove and then save the duplicates
                            testOrderedObservations = stripDuplicate(testOrderedObservations);
                            // try to pair the obs and then save the un-pair-able obs
                            pair(testOrderedObservations, testResultObservations);
                        }
                    }
                }
            }
        }
    }
}
