@Test
@DirtiesContext
public void testCircleFormationNoBlockingObject() throws Exception {
    configureMinimalGame();
    SyncBaseItem target = createSyncBaseItem(TEST_ATTACK_ITEM_ID, new Index(500, 500), new Id(1, -100, -100));
    SyncBaseItem syncBaseItem = createSyncBaseItem(TEST_ATTACK_ITEM_ID, new Index(400, 400), new Id(1, -100, -100));
    List<CircleFormation.CircleFormationItem> items = new ArrayList<CircleFormation.CircleFormationItem>();
    items.add(new CircleFormation.CircleFormationItem(syncBaseItem, 400));
    items.add(new CircleFormation.CircleFormationItem(syncBaseItem, 400));
    items.add(new CircleFormation.CircleFormationItem(syncBaseItem, 400));
    items.add(new CircleFormation.CircleFormationItem(syncBaseItem, 400));
    items.add(new CircleFormation.CircleFormationItem(syncBaseItem, 400));
    items.add(new CircleFormation.CircleFormationItem(syncBaseItem, 400));
    items.add(new CircleFormation.CircleFormationItem(syncBaseItem, 400));
    items.add(new CircleFormation.CircleFormationItem(syncBaseItem, 400));
    items.add(new CircleFormation.CircleFormationItem(syncBaseItem, 400));
    items.add(new CircleFormation.CircleFormationItem(syncBaseItem, 400));
    items.add(new CircleFormation.CircleFormationItem(syncBaseItem, 400));
    items.add(new CircleFormation.CircleFormationItem(syncBaseItem, 400));
    items.add(new CircleFormation.CircleFormationItem(syncBaseItem, 400));
    items.add(new CircleFormation.CircleFormationItem(syncBaseItem, 400));
    items.add(new CircleFormation.CircleFormationItem(syncBaseItem, 400));
    items.add(new CircleFormation.CircleFormationItem(syncBaseItem, 400));
    items.add(new CircleFormation.CircleFormationItem(syncBaseItem, 400));
    items.add(new CircleFormation.CircleFormationItem(syncBaseItem, 400));
    items.add(new CircleFormation.CircleFormationItem(syncBaseItem, 400));
    items.add(new CircleFormation.CircleFormationItem(syncBaseItem, 400));
    items.add(new CircleFormation.CircleFormationItem(syncBaseItem, 400));
    items.add(new CircleFormation.CircleFormationItem(syncBaseItem, 400));
    CircleFormation circleFormation = new CircleFormation(target.getRectangle(), MathHelper.EAST - 0.1, items);
    List<Rectangle> expected = new ArrayList<Rectangle>();
    expected.add(new Rectangle(848, 490, 100, 100));
    expected.add(new Rectangle(825, 590, 100, 100));
    expected.add(new Rectangle(845, 390, 100, 100));
    expected.add(new Rectangle(770, 690, 100, 100));
    expected.add(new Rectangle(817, 290, 100, 100));
    expected.add(new Rectangle(670, 784, 100, 100));
    expected.add(new Rectangle(754, 190, 100, 100));
    expected.add(new Rectangle(570, 832, 100, 100));
    expected.add(new Rectangle(654, 106, 100, 100));
    expected.add(new Rectangle(470, 849, 100, 100));
    expected.add(new Rectangle(554, 64, 100, 100));
    expected.add(new Rectangle(370, 842, 100, 100));
    expected.add(new Rectangle(454, 50, 100, 100));
    expected.add(new Rectangle(270, 807, 100, 100));
    expected.add(new Rectangle(354, 62, 100, 100));
    expected.add(new Rectangle(170, 736, 100, 100));
    expected.add(new Rectangle(254, 101, 100, 100));
    expected.add(new Rectangle(96, 636, 100, 100));
    expected.add(new Rectangle(154, 181, 100, 100));
    expected.add(new Rectangle(59, 536, 100, 100));
    expected.add(new Rectangle(87, 281, 100, 100));
    expected.add(new Rectangle(50, 436, 100, 100));
    List<Rectangle> rectangles = new ArrayList<Rectangle>();
    while (circleFormation.hasNext()) {
        CircleFormation.CircleFormationItem circleFormationItem = circleFormation.calculateNextEntry();
        Assert.assertTrue(circleFormationItem.isInRange());
        rectangles.add(circleFormationItem.getRectangle());
        // ***************************************************************************************************
        /*System.out.println("expected.add(new Rectangle(" + circleFormationItem.getRectangle().getX()
                    + " ," + circleFormationItem.getRectangle().getY()
                    + " ," + circleFormationItem.getRectangle().getWidth()
                    + " ," + circleFormationItem.getRectangle().getHeight() + "));");  */
        // ***************************************************************************************************
        circleFormation.lastAccepted();
    }
    for (int i = 0, rectanglesSize = rectangles.size(); i < rectanglesSize; i++) {
        Assert.assertEquals(expected.get(i), rectangles.get(i));
    }
    Assert.assertFalse(Rectangle.adjoinsExclusive(rectangles));
}
