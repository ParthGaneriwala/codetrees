public static String makeCanonicalString(String method, String resource, Map headersMap, String expires) {
    StringBuffer buf = new StringBuffer();
    buf.append(method + "\n");
    // Add all interesting headers to a list, then sort them.  "Interesting"
    // is defined as Content-MD5, Content-Type, Date, and x-amz-
    SortedMap interestingHeaders = new TreeMap();
    if (headersMap != null && headersMap.size() > 0) {
        Iterator headerIter = headersMap.entrySet().iterator();
        while (headerIter.hasNext()) {
            Map.Entry entry = (Map.Entry) headerIter.next();
            Object key = entry.getKey();
            Object value = entry.getValue();
            if (key == null)
                continue;
            String lk = key.toString().toLowerCase(Locale.getDefault());
            // Ignore any headers that are not particularly interesting.
            if (lk.equals("content-type") || lk.equals("content-md5") || lk.equals("date") || lk.startsWith(Constants.REST_HEADER_PREFIX)) {
                interestingHeaders.put(lk, value);
            }
        }
    }
    // Remove default date timestamp if "x-amz-date" is set.
    if (interestingHeaders.containsKey(Constants.REST_METADATA_ALTERNATE_DATE)) {
        interestingHeaders.put("date", "");
    }
    // "date" timestamp, and the "x-amz-date" header.
    if (expires != null) {
        interestingHeaders.put("date", expires);
    }
    // even if they don't exist.
    if (!interestingHeaders.containsKey("content-type")) {
        interestingHeaders.put("content-type", "");
    }
    if (!interestingHeaders.containsKey("content-md5")) {
        interestingHeaders.put("content-md5", "");
    }
    // Finally, add all the interesting headers (i.e.: all that startwith x-amz- ;-))
    for (Iterator i = interestingHeaders.entrySet().iterator(); i.hasNext(); ) {
        Map.Entry entry = (Map.Entry) i.next();
        String key = (String) entry.getKey();
        Object value = entry.getValue();
        if (key.startsWith(Constants.REST_HEADER_PREFIX)) {
            buf.append(key).append(':').append(value);
        } else {
            buf.append(value);
        }
        buf.append("\n");
    }
    // don't include the query parameters...
    int queryIndex = resource.indexOf('?');
    if (queryIndex == -1) {
        buf.append(resource);
    } else {
        buf.append(resource.substring(0, queryIndex));
    }
    // ...unless there is an acl, torrent or logging parameter
    if (resource.matches(".*[&?]acl($|=|&).*")) {
        buf.append("?acl");
    } else if (resource.matches(".*[&?]torrent($|=|&).*")) {
        buf.append("?torrent");
    } else if (resource.matches(".*[&?]logging($|=|&).*")) {
        buf.append("?logging");
    }
    return buf.toString();
}
