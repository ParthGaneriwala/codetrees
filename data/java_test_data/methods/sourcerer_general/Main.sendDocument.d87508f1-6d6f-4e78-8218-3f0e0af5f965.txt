public static void sendDocument(String uri) throws PushAPIException {
    System.out.println("clear everything (documents and checkpoints)");
    papi.deleteDocumentCollection("all()");
    DocumentStatus ds = null;
    ds = papi.getDocumentStatus(uri);
    System.out.println("status : " + ((ds.status == Status.EXISTS) ? "exists" : "missing") + " , uri = " + ds.uri);
    MetaContainer metaList = new MetaContainer();
    // //////////////////
    // SPECIAL METAS
    // //////////////////
    metaList.addMeta(new Meta("title", "title"));
    // /////////////////
    // CUSTOM METAS
    // /////////////////
    metaList.addMeta(new Meta("dirname", "DP DN"));
    // lien sur le titre
    metaList.addMeta(new Meta("url", "http://monserver.com/mondoc.txt"));
    // /////////////////
    // Parts
    // /////////////////
    PartContainer partList = new PartContainer();
    try {
        partList.addPart(new Part("master", new byte[1], null, null));
    } catch (MultiplePartException e) {
        System.out.println("you should not read me");
    }
    // ////////////////
    // create a fake document
    // ///////////////
    Document doc = new Document(uri, null, partList, metaList);
    System.out.println("send doc...");
    papi.addDocument(doc);
    ds = papi.getDocumentStatus(uri);
    System.out.println("status : " + ((ds.status == Status.EXISTS) ? "exists" : "missing") + " , uri = " + ds.uri);
    for (int i = 0; i < 1000; i++) {
        String oldUri = doc.uri;
        doc.uri = doc.uri + "/" + i;
        papi.addDocument(doc);
        doc.uri = oldUri;
    }
    int taskId = papi.createPartialFlushTask();
    TaskStatus status;
    do {
        status = papi.getTaskStatus(taskId);
        try {
            Thread.sleep(1000);
        } catch (Exception e) {
        }
    } while (status.status == TaskStatus.RUNNING);
    System.out.println("partial flush status: " + status);
    for (int i = 0; i < 1000; i++) {
        String oldUri = doc.uri;
        doc.uri = doc.uri + "/" + i;
        papi.addDocument(doc);
        doc.uri = oldUri;
    }
    taskId = papi.createPartialFlushTask();
    do {
        status = papi.getTaskStatus(taskId);
        try {
            Thread.sleep(1000);
        } catch (Exception e) {
        }
    } while (status.status == TaskStatus.RUNNING);
    System.out.println("partial flush status: " + status);
/*    System.out.println("check the status of a missing doc");
    DocumentStatus ds = papi.getDocumentStatus("myuri1");
    assertEquals("myuri1", ds.uri);
    assertEquals(Status.MISSING, ds.status);

    System.out.println("add a document with many index:category meta");
    ArrayList metaList1 = new ArrayList();
    byte[] bytes = new byte[0];
    metaList1.add(new Meta("author", "foovalue"));
    metaList1.add(new Meta("index:category", "Attributes/kind/MP3"));
    metaList1.add(new Meta("index:category", "Attributes/FOO"));
    metaList1.add(new Meta("papi:test:nb_meta:index:category", "2"));
    papi.addDocument(new Document("myuri1", "mystamp", bytes, metaList1));

    System.out.println("add a documentList, one update and another new one. Also check & in the stamp for [de]serialization escaping.");
    ArrayList metaList2 = new ArrayList();
    metaList2.add(new Meta("title", "foovalue"));

    Document[] docList = new Document[2];
    docList[0] = new Document("myuri1", "mystamp1 & foo", bytes, metaList1);
    docList[1] = new Document("myuri2", "mystamp2", bytes, metaList2);
    papi.addDocumentList(docList);

    System.out.println("get the status of an existing document");
    ds = papi.getDocumentStatus("myuri1");
    assertEquals("myuri1", ds.uri);
    assertEquals(Status.EXISTS, ds.status);
    assertEquals("mystamp1 & foo", ds.stamp);

    System.out.println("get the status of a list of uri");
    String[] uriList = new String[2];
    uriList[0] = "myuri1";
    uriList[1] = "myuri54";
                         
    DocumentStatus[] dsList;
    dsList = papi.getDocumentStatusList(uriList);

    assertEquals(uriList.length, dsList.length);

    System.out.println("test the default values for getCheckpoint");
    assertNull(papi.getCheckpoint());
    assertNull(papi.getCheckpoint("foo"));

    System.out.println("test the setCheckpoint methods");
    papi.setCheckpoint("coco");
    papi.setCheckpoint("hello", "foo");

    System.out.println("test iterator with all()");
    DocumentStatusCollectionIterator iterator = papi.openDocumentStatusCollectionIterator("all()");
    ds = null;
    do
    {
      ds = iterator.next();
    }
    while (ds != null);
    iterator.close();


    System.out.println("test iterator nextBatch with rootPath(\"/\")");
    iterator = papi.openDocumentStatusCollectionIterator("rootPath(\"/\")");
    dsList = new DocumentStatus[0];
    do
    {
      dsList = iterator.nextBatch(2);
    }
    while (dsList.length != 0);
    iterator.close();

    System.out.println("test deleteDocument");
    papi.deleteDocument("myuri1");
    System.out.println("test deleteDocumentList");
    papi.deleteDocumentList(uriList);

    System.out.println("test deleteDocumentCollection");
    papi.deleteDocumentCollection("all()");

    System.out.println("test the getCheckpoint methods");
    assertEquals("coco", papi.getCheckpoint());
    assertEquals("hello", papi.getCheckpoint("foo"));*/
}
