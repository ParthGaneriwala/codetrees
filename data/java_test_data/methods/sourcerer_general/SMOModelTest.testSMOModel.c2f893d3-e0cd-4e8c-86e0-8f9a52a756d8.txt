@Test
public void testSMOModel() throws Exception {
    SMOModel test = new SMOModel();
    int[] typAttrib = { Weka.NUMERIC, Weka.NUMERIC, Weka.NUMERIC };
    String[] classAttrib = { "A_", "B_", "C_" };
    double[][] x = { { 10, 10, 10 }, { 10, -10, -10 }, { -10, -10, -10 }, { 11, 11, 11 }, { 11, -11, -11 }, { -11, -11, -11 } };
    Double[][] xD = new Double[x.length][x[0].length];
    for (int i = 0; i < xD.length; i++) for (int j = 0; j < xD[i].length; j++) xD[i][j] = new Double(x[i][j]);
    String[] y = { "A_", "B_", "C_", "A_", "B_", "C_" };
    String[] attrib = { "X1", "X2", "X3" };
    test.setData(attrib, typAttrib, classAttrib, y, xD);
    test.build();
    Double[][] newx = { { new Double(99), new Double(89), new Double(79) }, { new Double(19), new Double(29), new Double(39) } };
    test.setParameters(newx);
    test.probabilities();
    Object[][] result = test.getProbabilities();
    Assert.assertNotNull(test.attributeNames());
    Assert.assertNotNull(test.bias());
    Assert.assertNotNull(test.classAttributeNames());
    Assert.assertNotNull(test.sparseIndices());
    Assert.assertNotNull(test.sparseWeights());
    Assert.assertNotNull(result);
    Assert.assertEquals(false, test.getBuildLogisticModels());
    Assert.assertEquals(1.0, test.getC(), 0.001);
    Assert.assertEquals(250007, test.getCacheSize());
    Assert.assertEquals(1.0E-12, test.getEpsilon(), 0.001);
    Assert.assertEquals(1.0, test.getExponent(), 0.01);
    Assert.assertEquals(false, test.getFeatureSpaceNormalization());
    Assert.assertEquals(0.01, test.getGamma(), 0.001);
    Assert.assertEquals(false, test.getLowerOrderTerms());
    Assert.assertEquals(-1, test.getNumFolds());
    Assert.assertEquals(1, test.getRandomSeed());
    Assert.assertEquals(0.0010, test.getToleranceParameter(), 0.001);
    Assert.assertEquals(false, test.getUserRBF());
    Assert.assertEquals(3, test.numClassAttributeValues());
}
