private void erfc1Internal() {
    // 3       5        7        9
    // 2    /        x       x        x        x                  // erfc(x) = 1 - ------ | x  -  ---  +  ----  -  ----  +  ----  - ... |
    // sqrt(pi)\        3      2!*5     3!*7     4!*9        /
    // 
    long extra = 0, tmp1Extra, tmp2Extra, tmp3Extra, tmp4Extra;
    {
        tmp1.mantissa = this.mantissa;
        tmp1.exponent = this.exponent;
        tmp1.sign = this.sign;
    }
    ;
    tmp1Extra = 0;
    {
        tmp2.mantissa = this.mantissa;
        tmp2.exponent = this.exponent;
        tmp2.sign = this.sign;
    }
    ;
    tmp2Extra = tmp2.mul128(0, tmp2, 0);
    tmp2.neg();
    {
        tmp3.mantissa = ONE.mantissa;
        tmp3.exponent = ONE.exponent;
        tmp3.sign = ONE.sign;
    }
    ;
    tmp3Extra = 0;
    int i = 1;
    do {
        tmp1Extra = tmp1.mul128(tmp1Extra, tmp2, tmp2Extra);
        tmp4.assign(i);
        tmp3Extra = tmp3.mul128(tmp3Extra, tmp4, 0);
        tmp4.assign(2 * i + 1);
        tmp4Extra = tmp4.mul128(0, tmp3, tmp3Extra);
        tmp4Extra = tmp4.recip128(tmp4Extra);
        tmp4Extra = tmp4.mul128(tmp4Extra, tmp1, tmp1Extra);
        extra = add128(extra, tmp4, tmp4Extra);
        i++;
    } while (exponent - tmp4.exponent < 128);
    // -2/sqrt(pi)
    {
        tmp1.sign = (byte) 1;
        tmp1.exponent = 0x40000000;
        tmp1.mantissa = 0x48375d410a6db446L;
    }
    // -2/sqrt(pi)
    ;
    extra = mul128(extra, tmp1, 0xb8ea453fb5ff61a2L);
    extra = add128(extra, ONE, 0);
    roundFrom128(extra);
}
