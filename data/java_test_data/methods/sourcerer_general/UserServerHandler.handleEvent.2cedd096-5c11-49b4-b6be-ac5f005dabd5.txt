@Override
public boolean handleEvent(Object data) {
    if (!(data instanceof Request))
        return false;
    Request request = (Request) data;
    UserAdmin userAdmin = new UserAdmin();
    ArrayList dbResponse;
    if (request.getRequestType() == Message.MessageType.CREATE_USER_REQUEST) {
        dbResponse = new ArrayList<String>();
        try {
            userAdmin.addUser((User) request.getData(Message.USER));
        } catch (DatabaseException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return true;
    }
    if (request.getRequestType() == Message.MessageType.GROUPS_LIST_REQUEST) {
        dbResponse = new ArrayList<Group>();
        try {
            dbResponse = userAdmin.getGroups(((Class) request.getData(Message.CLASS)).getId());
        } catch (DatabaseException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        Response response = new Response(request, Message.GROUPS, dbResponse);
        SocketChannel channel;
        for (String userName : request.getRecipients()) {
            channel = mAuthHandler.getClientChannel(userName);
            this.setChannel(channel);
            try {
                sendMessage(response);
            } catch (IOException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }
        return true;
    }
    if (request.getRequestType() == Message.MessageType.GROUP_MEMBERS_REQUEST) {
        dbResponse = new ArrayList<User>();
        try {
            dbResponse = userAdmin.getGroupMembers(request.getUser().getId());
        } catch (DatabaseException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        Response response = new Response(request, Message.USERS, dbResponse);
        SocketChannel channel;
        for (String userName : request.getRecipients()) {
            channel = mAuthHandler.getClientChannel(userName);
            this.setChannel(channel);
            try {
                sendMessage(response);
            } catch (IOException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }
        return true;
    }
    if (request.getRequestType() == Message.MessageType.CLASSES_LIST_REQUEST) {
        dbResponse = new ArrayList<Class>();
        try {
            dbResponse = userAdmin.getClasses(request.getUser().getId());
        } catch (DatabaseException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        Response response = new Response(request, Message.CLASSES, dbResponse);
        SocketChannel channel;
        for (String userName : request.getRecipients()) {
            channel = mAuthHandler.getClientChannel(userName);
            this.setChannel(channel);
            try {
                sendMessage(response);
            } catch (IOException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }
        return true;
    }
    if (request.getRequestType() == Message.MessageType.USER_LIST_REQUEST) {
        dbResponse = new ArrayList<Class>();
        try {
            dbResponse = userAdmin.getUsers();
        } catch (DatabaseException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        Response response = new Response(request, Message.USERS, dbResponse);
        SocketChannel channel;
        for (String userName : request.getRecipients()) {
            channel = mAuthHandler.getClientChannel(userName);
            this.setChannel(channel);
            try {
                sendMessage(response);
            } catch (IOException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }
        return true;
    }
    if (request.getRequestType() == Message.MessageType.VIEW_CLASS) {
        Class aClass = null;
        try {
            aClass = userAdmin.getClass(((Class) (request.getData(Message.CLASS))).getId());
        } catch (DatabaseException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        Response response = new Response(request, Message.CLASS, aClass);
        SocketChannel channel;
        for (String userName : request.getRecipients()) {
            channel = mAuthHandler.getClientChannel(userName);
            this.setChannel(channel);
            try {
                sendMessage(response);
            } catch (IOException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }
        return true;
    }
    if (request.getRequestType() == Message.MessageType.VIEW_GROUP) {
        Group group = null;
        try {
            group = userAdmin.getGroup(((Group) (request.getData(Message.GROUP))).getId());
        } catch (DatabaseException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        Response response = new Response(request, Message.GROUP, group);
        SocketChannel channel;
        for (String userName : request.getRecipients()) {
            channel = mAuthHandler.getClientChannel(userName);
            this.setChannel(channel);
            try {
                sendMessage(response);
            } catch (IOException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }
        return true;
    }
    if (request.getRequestType() == Message.MessageType.DELETE_CLASS) {
        try {
            userAdmin.removeClass((Class) request.getData(Message.CLASS));
        } catch (DatabaseException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return true;
    }
    if (request.getRequestType() == Message.MessageType.DELETE_USER) {
        try {
            userAdmin.removeUser((User) request.getData(Message.USER));
        } catch (DatabaseException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        Response response = new Response(request, Message.USER, "");
        SocketChannel channel;
        for (String userName : request.getRecipients()) {
            channel = mAuthHandler.getClientChannel(userName);
            this.setChannel(channel);
            try {
                sendMessage(response);
            } catch (IOException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }
        return true;
    }
    if (request.getRequestType() == Message.MessageType.DELETE_GROUP) {
        try {
            userAdmin.removeGroup((Group) request.getData(Message.GROUP));
        } catch (DatabaseException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return true;
    }
    if (request.getRequestType() == Message.MessageType.STUDENT_LIST_REQUEST) {
        dbResponse = new ArrayList<User>();
        try {
            dbResponse = userAdmin.getStudents();
        } catch (DatabaseException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        Response response = new Response(request, Message.STUDENTS, dbResponse);
        SocketChannel channel;
        for (String userName : request.getRecipients()) {
            channel = mAuthHandler.getClientChannel(userName);
            this.setChannel(channel);
            try {
                sendMessage(response);
            } catch (IOException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }
        return true;
    }
    if (request.getRequestType() == Message.MessageType.ADD_STUDENTS_TO_CLASS) {
        try {
            userAdmin.addStudentsToClass((ArrayList<User>) request.getData(Message.STUDENTS), (Class) request.getData(Message.CLASS));
        } catch (DatabaseException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return true;
    }
    if (request.getRequestType() == Message.MessageType.ADD_STUDENTS_TO_GROUP) {
        try {
            userAdmin.addStudentsToGroup((ArrayList<User>) request.getData(Message.STUDENTS), (Group) request.getData(Message.GROUP));
        } catch (DatabaseException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return true;
    }
    if (request.getRequestType() == Message.MessageType.CREATE_CLASS) {
        try {
            userAdmin.addClass((Class) request.getData(Message.CLASS));
        } catch (DatabaseException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return true;
    }
    if (request.getRequestType() == Message.MessageType.CREATE_GROUP) {
        try {
            userAdmin.addGroup((Group) request.getData(Message.GROUP));
        } catch (DatabaseException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return true;
    }
    /* request not handled by this handler */
    return false;
}
