public void emit(C context, FnExpr fn, GeneratorAdapter gen) {
    Label startTry = gen.newLabel();
    Label endTry = gen.newLabel();
    Label endTryCatch = gen.newLabel();
    Label end = gen.newLabel();
    Label ret = gen.newLabel();
    Label finallyLabel = gen.newLabel();
    for (int i = 0; i < catchExprs.count(); i++) {
        CatchClause clause = (CatchClause) catchExprs.nth(i);
        clause.label = gen.newLabel();
        clause.endLabel = gen.newLabel();
    }
    gen.mark(startTry);
    tryExpr.emit(context, fn, gen);
    if (context != C.STATEMENT)
        gen.visitVarInsn(OBJECT_TYPE.getOpcode(Opcodes.ISTORE), retLocal);
    gen.mark(endTry);
    if (finallyExpr != null)
        finallyExpr.emit(C.STATEMENT, fn, gen);
    gen.goTo(ret);
    for (int i = 0; i < catchExprs.count(); i++) {
        CatchClause clause = (CatchClause) catchExprs.nth(i);
        gen.mark(clause.label);
        // exception should be on stack
        // put in clause local
        gen.visitVarInsn(OBJECT_TYPE.getOpcode(Opcodes.ISTORE), clause.lb.idx);
        clause.handler.emit(context, fn, gen);
        if (context != C.STATEMENT)
            gen.visitVarInsn(OBJECT_TYPE.getOpcode(Opcodes.ISTORE), retLocal);
        gen.mark(clause.endLabel);
        if (finallyExpr != null)
            finallyExpr.emit(C.STATEMENT, fn, gen);
        gen.goTo(ret);
    }
    gen.mark(endTryCatch);
    if (finallyExpr != null) {
        gen.mark(finallyLabel);
        // exception should be on stack
        gen.visitVarInsn(OBJECT_TYPE.getOpcode(Opcodes.ISTORE), finallyLocal);
        finallyExpr.emit(C.STATEMENT, fn, gen);
        gen.visitVarInsn(OBJECT_TYPE.getOpcode(Opcodes.ILOAD), finallyLocal);
        gen.throwException();
    }
    gen.mark(ret);
    if (context != C.STATEMENT)
        gen.visitVarInsn(OBJECT_TYPE.getOpcode(Opcodes.ILOAD), retLocal);
    gen.mark(end);
    for (int i = 0; i < catchExprs.count(); i++) {
        CatchClause clause = (CatchClause) catchExprs.nth(i);
        gen.visitTryCatchBlock(startTry, endTry, clause.label, clause.c.getName().replace('.', '/'));
    }
    if (finallyExpr != null)
        gen.visitTryCatchBlock(startTry, endTryCatch, finallyLabel, null);
    for (int i = 0; i < catchExprs.count(); i++) {
        CatchClause clause = (CatchClause) catchExprs.nth(i);
        gen.visitLocalVariable(clause.lb.name, "Ljava/lang/Object;", null, clause.label, clause.endLabel, clause.lb.idx);
    }
}
