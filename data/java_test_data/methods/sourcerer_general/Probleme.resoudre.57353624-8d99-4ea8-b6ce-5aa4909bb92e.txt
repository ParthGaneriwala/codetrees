public void resoudre(int nbRetour, int nbSousCoupe) throws Exception {
    // n'utiliser que 90% du proc pour pas bloquer le pc (diminue la rapiditée du programme de 30%)
    CPU.libererChargeCPU();
    Probleme p1, p2;
    // On filtre les Boite invalide (qui ne peuvent pas rentré ou qui sont indisponible) et met les boite dans une position optimale par raport a l'axe getAxe()
    filtrerBoiteInvalide(getAxe(2));
    // si il n'y a plus de Boite pour remplire les espace vide on a fini
    if (listeBoite.size() == 0)
        return;
    // Si la premiere boite corespond exactement au volume du container ou qu'il n'y a pas plus d'une seul boite de possible a métre,
    if ((container.equalsVolume(listeBoite.get(0))) || (listeBoite.size() == 1)) {
        // On place la Boite
        placerBoite(listeBoite.get(0));
        return;
    }
    /* OPTIMISATION : PARTIE EN COUR D'IMPLEMENTATION...		*/
    // Cherche dans l'historique une solution pour ce probleme
    SauveGarde sg = Historique.chercherSolution(this);
    if (sg != null) {
        utiliserSolution(sg);
        return;
    }
    /* FIN OPTIMISATION */
    // Si on a plus le droit de faire de coupe,
    remplirContainer(getAxe(2));
    if (nbSousCoupe == 0) {
        /* OPTIMISATION : PARTIE EN COUR D'IMPLEMENTATION...		*/
        sauverSolutionSiMeilleur(this);
        Historique.add(new ElementHistorique(bestSolution, this));
        /* FIN OPTIMISATION */
        return;
    } else {
        // On sauve le resultat que l'on obient avec le sac a dos
        sauverSolutionSiMeilleur(this);
        defaireSolution();
    }
    // On essaye "nbRetour" coupe differante pour resoudre le probleme
    for (int i = 0; i < nbRetour && i < listeBoite.size(); i++) {
        // / On coupe un morceau du probleme suivant "i"
        p2 = new Probleme(this);
        p1 = p2.coupe(i);
        // On résoud la partie coupé. (nombre de sous coupe est décrémenté car on vien d'éffectuer une coupe)
        p1.resoudre(nbRetour, nbSousCoupe - 1);
        // On fait appelle récursivement a la meme méthode avec les meme argument pour le probleme qui reste a traiter
        p2.resoudre(nbRetour, nbSousCoupe);
        // On fusionne les deux partie du probleme
        p2.fusioner(p1);
        // On sauve garde le probleme si c'est le meilleur qu'on est trouvé
        sauverSolutionSiMeilleur(p2);
        // On défait la solution (en liberant la disponibilité des boite)
        p2.defaireSolution();
        // Si on ne peu pas faire mieux que ce que l'on a deja fait, on arrette de chercher
        if (bestVal == max)
            break;
    }
    // On utilise la Meilleur solution trouvé
    utiliserMeilleurSolution();
    /* OPTIMISATION : PARTIE EN COUR D'IMPLEMENTATION...	*/
    // On sauve la meilleur solution trouvé
    Historique.add(new ElementHistorique(bestSolution, this));
    return;
}
