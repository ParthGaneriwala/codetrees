// $ANTLR start "lista_variaveis"
public final gramaticaMM2Parser.lista_variaveis_return lista_variaveis() throws RecognitionException {
    gramaticaMM2Parser.lista_variaveis_return retval = new gramaticaMM2Parser.lista_variaveis_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token COMMA57 = null;
    Token COLON59 = null;
    Token SEMICOLON61 = null;
    Token SEMICOLON63 = null;
    gramaticaMM2Parser.id_return id56 = null;
    gramaticaMM2Parser.id_return id58 = null;
    gramaticaMM2Parser.tipo_return tipo60 = null;
    gramaticaMM2Parser.tipo_array_return tipo_array62 = null;
    CommonTree COMMA57_tree = null;
    CommonTree COLON59_tree = null;
    CommonTree SEMICOLON61_tree = null;
    CommonTree SEMICOLON63_tree = null;
    RewriteRuleTokenStream stream_COLON = new RewriteRuleTokenStream(adaptor, "token COLON");
    RewriteRuleTokenStream stream_SEMICOLON = new RewriteRuleTokenStream(adaptor, "token SEMICOLON");
    RewriteRuleTokenStream stream_COMMA = new RewriteRuleTokenStream(adaptor, "token COMMA");
    RewriteRuleSubtreeStream stream_id = new RewriteRuleSubtreeStream(adaptor, "rule id");
    RewriteRuleSubtreeStream stream_tipo_array = new RewriteRuleSubtreeStream(adaptor, "rule tipo_array");
    RewriteRuleSubtreeStream stream_tipo = new RewriteRuleSubtreeStream(adaptor, "rule tipo");
    try {
        // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:110:18: ( id ( COMMA id )* COLON ( tipo SEMICOLON -> ^( LIST_VAR_ID ( id )+ tipo ) | tipo_array SEMICOLON -> ^( LIST_VAR_ARRAY ( id )+ tipo_array ) ) )
        // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:110:20: id ( COMMA id )* COLON ( tipo SEMICOLON -> ^( LIST_VAR_ID ( id )+ tipo ) | tipo_array SEMICOLON -> ^( LIST_VAR_ARRAY ( id )+ tipo_array ) )
        {
            pushFollow(FOLLOW_id_in_lista_variaveis919);
            id56 = id();
            state._fsp--;
            stream_id.add(id56.getTree());
            // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:110:23: ( COMMA id )*
            loop9: do {
                int alt9 = 2;
                int LA9_0 = input.LA(1);
                if ((LA9_0 == COMMA)) {
                    alt9 = 1;
                }
                switch(alt9) {
                    case 1:
                        // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:110:24: COMMA id
                        {
                            COMMA57 = (Token) match(input, COMMA, FOLLOW_COMMA_in_lista_variaveis922);
                            stream_COMMA.add(COMMA57);
                            pushFollow(FOLLOW_id_in_lista_variaveis924);
                            id58 = id();
                            state._fsp--;
                            stream_id.add(id58.getTree());
                        }
                        break;
                    default:
                        break loop9;
                }
            } while (true);
            COLON59 = (Token) match(input, COLON, FOLLOW_COLON_in_lista_variaveis928);
            stream_COLON.add(COLON59);
            // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:110:41: ( tipo SEMICOLON -> ^( LIST_VAR_ID ( id )+ tipo ) | tipo_array SEMICOLON -> ^( LIST_VAR_ARRAY ( id )+ tipo_array ) )
            int alt10 = 2;
            int LA10_0 = input.LA(1);
            if (((LA10_0 >= INTEGER && LA10_0 <= CHAR))) {
                alt10 = 1;
            } else if ((LA10_0 == ARRAY)) {
                alt10 = 2;
            } else {
                NoViableAltException nvae = new NoViableAltException("", 10, 0, input);
                throw nvae;
            }
            switch(alt10) {
                case 1:
                    // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:110:42: tipo SEMICOLON
                    {
                        pushFollow(FOLLOW_tipo_in_lista_variaveis931);
                        tipo60 = tipo();
                        state._fsp--;
                        stream_tipo.add(tipo60.getTree());
                        SEMICOLON61 = (Token) match(input, SEMICOLON, FOLLOW_SEMICOLON_in_lista_variaveis933);
                        stream_SEMICOLON.add(SEMICOLON61);
                        // AST REWRITE
                        // elements: id, tipo
                        // token labels:
                        // rule labels: retval
                        // token list labels:
                        // rule list labels:
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", retval != null ? retval.tree : null);
                        root_0 = (CommonTree) adaptor.nil();
                        // 110:57: -> ^( LIST_VAR_ID ( id )+ tipo )
                        {
                            // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:110:60: ^( LIST_VAR_ID ( id )+ tipo )
                            {
                                CommonTree root_1 = (CommonTree) adaptor.nil();
                                root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(LIST_VAR_ID, "LIST_VAR_ID"), root_1);
                                if (!(stream_id.hasNext())) {
                                    throw new RewriteEarlyExitException();
                                }
                                while (stream_id.hasNext()) {
                                    adaptor.addChild(root_1, stream_id.nextTree());
                                }
                                stream_id.reset();
                                adaptor.addChild(root_1, stream_tipo.nextTree());
                                adaptor.addChild(root_0, root_1);
                            }
                        }
                        retval.tree = root_0;
                    }
                    break;
                case 2:
                    // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:111:3: tipo_array SEMICOLON
                    {
                        pushFollow(FOLLOW_tipo_array_in_lista_variaveis948);
                        tipo_array62 = tipo_array();
                        state._fsp--;
                        stream_tipo_array.add(tipo_array62.getTree());
                        SEMICOLON63 = (Token) match(input, SEMICOLON, FOLLOW_SEMICOLON_in_lista_variaveis950);
                        stream_SEMICOLON.add(SEMICOLON63);
                        // AST REWRITE
                        // elements: tipo_array, id
                        // token labels:
                        // rule labels: retval
                        // token list labels:
                        // rule list labels:
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", retval != null ? retval.tree : null);
                        root_0 = (CommonTree) adaptor.nil();
                        // 111:24: -> ^( LIST_VAR_ARRAY ( id )+ tipo_array )
                        {
                            // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:111:27: ^( LIST_VAR_ARRAY ( id )+ tipo_array )
                            {
                                CommonTree root_1 = (CommonTree) adaptor.nil();
                                root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(LIST_VAR_ARRAY, "LIST_VAR_ARRAY"), root_1);
                                if (!(stream_id.hasNext())) {
                                    throw new RewriteEarlyExitException();
                                }
                                while (stream_id.hasNext()) {
                                    adaptor.addChild(root_1, stream_id.nextTree());
                                }
                                stream_id.reset();
                                adaptor.addChild(root_1, stream_tipo_array.nextTree());
                                adaptor.addChild(root_0, root_1);
                            }
                        }
                        retval.tree = root_0;
                    }
                    break;
            }
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
