private sintetizados factorFac(String identificadorH, boolean porValorH, String idPredH) throws ErrorLexico, ErrorArchivo, ErrorSintactico, ErrorSemantico, Exception {
    sintetizados sint = new sintetizados(), sintE, sintP;
    entrada entrada;
    Arreglo Arreglo;
    int nivel, li, ls, offSet, longitud;
    String e1, e2;
    if (numeroTokenActual == Token.CORCHETEABRE) {
        match(Token.CORCHETEABRE);
        sintE = expresion(true, "");
        match(Token.CORCHETECIERRA);
        entrada = TS.getEntrada(identificadorH);
        if ((entrada instanceof Variable) || (entrada instanceof Parametro)) {
            if ((((Variable) entrada).getTipo()) instanceof Arreglo) {
                Arreglo = (Arreglo) ((Variable) entrada).getTipo();
                if (compatibles(Arreglo.getTipoIndice(), sintE.getTipoS())) {
                    generador.genInst2ArgCte("", generador.CONT, Arreglo.getLimiteInf(), Arreglo.getLimiteSup());
                    generador.genInst1ArgCte("", generador.APCT, Arreglo.getLimiteInf());
                    generador.genInstSinArg("", generador.SUST);
                    // generador.genInst1ArgCte("",generador.APCT,Arreglo.getTipoElem().getSize());
                    // generador.genInstSinArg("",generador.MULT);
                    // generador.genInstSinArg("",generador.SUMA);
                    // con mucho cuidado, porque tal vez no funca
                    sint = new sintetizados();
                    sint.setTipoS(Arreglo.getTipoElem());
                    nivel = entrada.getNivelLexico();
                    offSet = ((Variable) entrada).getOffSet();
                    longitud = sint.getTipoS().getSize();
                    if (porValorH) {
                        // Parametro recibido por referencia
                        if ((entrada instanceof Parametro) && !((Parametro) entrada).getPorValor()) {
                            if (esProcLectura(idPredH)) {
                                // si se debe leer la inst. es la inversa
                                generarProcLectura(idPredH, sint.getTipoS());
                                generador.genInst3ArgCte("", generador.POAI, nivel, offSet, longitud);
                            } else {
                                // aca antes teniamos PUAI... no se pq...
                                generador.genInst2ArgCte("", generador.APAI, nivel, offSet);
                            }
                        } else {
                            // Parametro recibido por valor
                            if (TS.esProcLectura(idPredH)) {
                                // si se debe leer la inst. es la inversa
                                generarProcLectura(idPredH, sint.getTipoS());
                                // generador.genInst3ArgCte("",generador.POAR, nivel, offSet, longitud);
                                generador.genInst2ArgCte("", generador.ALAR, nivel, offSet);
                            } else {
                                // generador.genInst3ArgCte("",generador.PUAR, nivel, offSet, longitud);
                                generador.genInst2ArgCte("", generador.APAR, nivel, offSet);
                            }
                        }
                    } else {
                        // Parametro recibido por referencia
                        if ((entrada instanceof Parametro) && !((Parametro) entrada).getPorValor()) {
                            if (esProcLectura(idPredH)) {
                                // si se debe leer la inst. es la inversa
                                generarProcLectura(idPredH, sint.getTipoS());
                                generador.genInst3ArgCte("", generador.POAI, nivel, offSet, longitud);
                            } else {
                                generador.genInst2ArgCte("", generador.APVL, nivel, offSet);
                            // generador.genInstSinArg("",generador.SUMA);
                            }
                        } else {
                            // Parametro recibido por valor
                            if (esProcLectura(idPredH)) {
                                // si se debe leer la inst. es la inversa
                                generarProcLectura(idPredH, sint.getTipoS());
                                generador.genInst3ArgCte("", generador.POAR, nivel, offSet, longitud);
                            } else {
                                generador.genInst2ArgCte("", generador.APDC, nivel, offSet);
                            }
                        }
                    }
                } else {
                    e1 = ErrorSemantico.construirMsj(Arreglo.getTipoIndice().toString());
                    e2 = ErrorSemantico.construirMsj(sintE.getTipoS().toString());
                    throw new ErrorSemantico(ErrorSemantico.TIPO_IND_INCOMP, getNumeroLinea(), getNumeroColumna(), e1, e2);
                }
            } else {
                e1 = ErrorSemantico.construirMsj(((Variable) entrada).getTipo().toString());
                throw new ErrorSemantico(ErrorSemantico.TIPO_ARRAY, getNumeroLinea(), getNumeroColumna(), e1);
            }
        } else {
            throw new ErrorSemantico(ErrorSemantico.ID_VAR_PARAM, getNumeroLinea(), getNumeroColumna(), identificadorH);
        }
    } else if (numeroTokenActual == Token.PARENTESISABRE) {
        entrada = TS.getEntrada(identificadorH);
        if (entrada instanceof Funcion) {
            if ((((Funcion) entrada).getListaParametrosFormales() == null) || (((Funcion) entrada).getListaParametrosFormales() != null && ((Funcion) entrada).getListaParametrosFormales().size() > 0)) {
                if (!esFuncPredef(identificadorH)) {
                    generador.genInst1ArgCte("", generador.RMEM, ((Funcion) entrada).getRetorno().getSize());
                }
                match(Token.PARENTESISABRE);
                sintP = ParametrosActuales(identificadorH, esFuncPredef(identificadorH), ((Funcion) entrada).getListaParametrosFormales());
                match(Token.PARENTESISCIERRA);
                if (!esFuncPredef(identificadorH)) {
                    // si no es func predefinida genera inst de llamada y sintetiza el tipo de retorno
                    generador.genInst1ArgEtiq("", generador.LLPR, ((Funcion) entrada).getEtiq());
                    sint.setTipoS(((Funcion) entrada).getRetorno());
                } else {
                    // sintetiza el tipo de retorno que es el tipo del Parametro
                    sint.setTipoS(sintP.getRetornoS());
                }
            } else {
                throw new ErrorSemantico(ErrorSemantico.DEMAS_PARAM, getNumeroLinea(), getNumeroColumna());
            }
        } else {
            throw new ErrorSemantico(ErrorSemantico.FUNC, getNumeroLinea(), getNumeroColumna(), identificadorH);
        }
    } else {
        entrada = TS.getEntrada(identificadorH);
        nivel = entrada.getNivelLexico();
        if ((entrada instanceof Variable) || (entrada instanceof Parametro) || (entrada instanceof Constante)) {
            if (entrada instanceof Constante) {
                if (porValorH) {
                    // CAMBIADO
                    if (((Constante) entrada).getTipo() instanceof TipoSimple) {
                        generador.genInst1ArgCte("", generador.APCT, ((Constante) entrada).getValor());
                        sint.setTipoS(((Constante) entrada).getTipo());
                    } else {
                        throw new ErrorSemantico(ErrorSemantico.CTE_SIMPLE, getNumeroLinea(), getNumeroColumna(), identificadorH);
                    }
                } else {
                    throw new ErrorSemantico(ErrorSemantico.CTE_REF, getNumeroLinea(), getNumeroColumna(), identificadorH);
                }
            } else // es Variable o Parametro
            if (((Variable) entrada).getTipo() instanceof TipoSimple) {
                offSet = ((Variable) entrada).getOffSet();
                if (porValorH) {
                    // pasado por valor
                    if ((entrada instanceof Parametro) && (!((Parametro) entrada).getPorValor())) {
                        // Parametro recibido por referencia
                        if (esProcLectura(idPredH)) {
                            // si se debe leer la inst. es la inversa
                            generarProcLectura(idPredH, (((Variable) entrada).getTipo()));
                            generador.genInst2ArgCte("", generador.ALVI, nivel, offSet);
                        } else {
                            generador.genInst2ArgCte("", generador.APVI, nivel, offSet);
                        }
                    } else {
                        // Parametro recibido por valor o es una Variable
                        if (esProcLectura(idPredH)) {
                            // si se debe leer la inst. es la inversa
                            generarProcLectura(idPredH, (((Variable) entrada).getTipo()));
                            generador.genInst2ArgCte("", generador.ALVL, nivel, offSet);
                        } else {
                            generador.genInst2ArgCte("", generador.APVL, nivel, offSet);
                        }
                    }
                } else {
                    // pasado por referencia
                    if ((entrada instanceof Parametro) && (!((Parametro) entrada).getPorValor())) {
                        // Parametro recibido por referencia
                        if (TS.esProcLectura(idPredH)) {
                            // si se debe leer la inst. es la inversa
                            generarProcLectura(idPredH, (((Variable) entrada).getTipo()));
                            generador.genInst2ArgCte("", generador.ALVL, nivel, offSet);
                        } else {
                            generador.genInst2ArgCte("", generador.APVL, nivel, offSet);
                        }
                    } else {
                        // Parametro recibido por valor o Variable
                        if (esProcLectura(idPredH)) {
                            // si se debe leer la inst. es la inversa
                            generarProcLectura(idPredH, (((Variable) entrada).getTipo()));
                            generador.genInst2ArgCte("", generador.ALVL, nivel, offSet);
                        } else {
                            generador.genInst2ArgCte("", generador.APDR, nivel, offSet);
                        }
                    }
                }
                // sintetiza el tipo de la var o param
                sint.setTipoS(((Variable) entrada).getTipo());
            } else if ((((Variable) entrada).getTipo()) instanceof Arreglo) {
                li = ((Arreglo) ((Variable) entrada).getTipo()).getLimiteInf();
                ls = ((Arreglo) ((Variable) entrada).getTipo()).getLimiteSup();
                offSet = ((Variable) entrada).getOffSet();
                longitud = ((Arreglo) ((Variable) entrada).getTipo()).getSize();
                if (porValorH) {
                    // pasado por valor
                    if ((entrada instanceof Parametro) && (!((Parametro) entrada).getPorValor())) {
                        // Parametro recibido por referencia o es una Variable
                        generador.genInst3ArgCte("", generador.PUAI, nivel, offSet, longitud);
                    } else {
                        // Parametro recibido por valor
                        generador.genInst3ArgCte("", generador.PUAR, nivel, offSet, longitud);
                    }
                } else {
                    // pasado por referencia
                    if ((entrada instanceof Parametro) && (!((Parametro) entrada).getPorValor())) {
                        // Parametro recibido por referencia
                        generador.genInst2ArgCte("", generador.APVL, nivel, offSet);
                    // este es el de la TABLA!!!!!!!!!!!!
                    // para que anda chiche....hay que sacarlo!
                    // generador.genInstSinArg("",generador.SUMA);
                    } else {
                        // Parametro recibido por valor o Variable
                        // generador.genInst2ArgCte("",generador.APDC, nivel, offSet);
                        // generador.genInst3ArgCte("",generador.PUAI,nivel,offSet,longitud);
                        generador.genInst2ArgCte("", generador.APDR, nivel, offSet);
                    }
                }
                // sintetiza el tipo elemento del Arreglo
                sint.setTipoS(((Variable) entrada).getTipo());
            } else {
                e1 = ErrorSemantico.construirMsj(((Variable) entrada).getTipo().toString());
                throw new ErrorSemantico(ErrorSemantico.TIPO_SIMPLE_ARRAY, getNumeroLinea(), getNumeroColumna(), e1);
            }
        } else if (entrada instanceof Funcion) {
            // se ley� el token PARABRE entonces la fc debe tener Parametros
            if (((Funcion) entrada).getListaParametrosFormales().size() == 0) {
                if (porValorH) {
                    // una fc solo puede pasarse por valor
                    generador.genInst1ArgCte("", generador.RMEM, ((Funcion) entrada).getRetorno().getSize());
                    generador.genInst1ArgEtiq("", generador.LLPR, ((Funcion) entrada).getEtiq());
                    offSet = ((Funcion) entrada).getOffset();
                    // sintetiza el tipo de retorno
                    sint.setTipoS(((Funcion) entrada).getRetorno());
                } else {
                    throw new ErrorSemantico(ErrorSemantico.CTE_REF, getNumeroLinea(), getNumeroColumna(), identificadorH);
                }
            } else {
                throw new ErrorSemantico(ErrorSemantico.FALTAN_PARAM, getNumeroLinea(), getNumeroColumna());
            }
        } else {
            throw new ErrorSemantico(ErrorSemantico.VAR_CTE_FUNC, getNumeroLinea(), getNumeroColumna(), identificadorH);
        }
    }
    return sint;
}
