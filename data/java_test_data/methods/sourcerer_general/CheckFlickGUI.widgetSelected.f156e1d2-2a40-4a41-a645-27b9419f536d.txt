public void widgetSelected(SelectionEvent e) {
    boolean valid = true;
    String city = null;
    int country = 0;
    int bYear = 0;
    int dYear = 0;
    if ((nameText.getText() == "") || (birthText.getText() == "") || (countryCombo.getText() == ""))
        okMessageBox("Please insert person name, year of birth and origin country.");
    else {
        try {
            bYear = Integer.parseInt(birthText.getText());
            if ((bYear < 1800) || (bYear > year)) {
                okMessageBox("Birth year is not valid. Must be between 1800 and " + (year) + ".");
                valid = false;
            }
        } catch (NumberFormatException nfe) {
            okMessageBox("Birth year must be a number.");
            valid = false;
        }
        if (deathText.getText() != "") {
            try {
                dYear = Integer.parseInt(deathText.getText());
                if ((dYear < bYear) || (dYear > year)) {
                    okMessageBox("Death year is not valid. Must be between the birth year and " + (year) + ".");
                    valid = false;
                }
            } catch (NumberFormatException nfe) {
                okMessageBox("Death year must be a number.");
                valid = false;
            }
        }
        if (cityText.getText() != "") {
            city = cityText.getText();
        }
        String id = getID(countriesList, countryCombo.getText());
        if (id != null)
            country = Integer.parseInt(id);
        else {
            okMessageBox("Origin country is not valid.");
            valid = false;
        }
        if (valid) {
            // inserting
            AbsType person = new PersonEntity(0, nameText.getText(), bYear, city, country, dYear);
            try {
                pool.execute(DataManager.insertPersonData(PersonDataEnum.PERSON, person, false));
            } catch (InterruptedException e1) {
                e1.printStackTrace();
            }
        }
    }
}
