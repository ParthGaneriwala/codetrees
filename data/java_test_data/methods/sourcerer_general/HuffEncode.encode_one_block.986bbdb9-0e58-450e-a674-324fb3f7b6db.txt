// Encode a single block's worth of coefficients
// Note that the DC coefficient has already been converted to a difference
void encode_one_block(CompressInfo cinfo, int[] block, HuffTbl dctbl, HuffTbl actbl) {
    int temp, temp2;
    int nbits;
    int k, r, i;
    // Encode the DC coefficient difference per section F.1.2.1
    temp = temp2 = block[0];
    if (temp < 0) {
        // temp is abs value of input
        temp = -temp;
        temp2--;
    }
    // Find the number of bits needed for the magnitude of the coefficient
    nbits = 0;
    while (temp != 0) {
        nbits++;
        temp >>= 1;
    }
    // write the Huffman-coded symbol for the number of bits
    write_bits(cinfo, dctbl.ehufco[nbits], dctbl.ehufsi[nbits]);
    // or the complement of its magnitude, if negative.
    if (// write_bits rejects calls with size 0
    nbits != 0)
        write_bits(cinfo, (short) temp2, nbits);
    // Encode the AC coefficients per section F.1.2.2
    // r = run length of zeros
    r = 0;
    for (k = 1; k < DCTSIZE * DCTSIZE; k++) {
        if ((temp = block[k]) == 0) {
            r++;
        } else {
            // if run length > 15, must write special run-length-16 codes (0xF0)
            while (r > 15) {
                write_bits(cinfo, actbl.ehufco[0xF0], actbl.ehufsi[0xF0]);
                r -= 16;
            }
            temp2 = temp;
            if (temp < 0) {
                // temp is abs value of input
                temp = -temp;
                // This code assumes we are on a two's complement machine
                temp2--;
            }
            // Find the number of bits needed for the magnitude of the coefficient
            // there must be at least one 1 bit
            nbits = 1;
            while ((temp >>= 1) != 0) nbits++;
            // write Huffman symbol for run length / number of bits
            i = (r << 4) + nbits;
            write_bits(cinfo, actbl.ehufco[i], actbl.ehufsi[i]);
            // write that number of bits of the value, if positive,
            // or the complement of its magnitude, if negative.
            write_bits(cinfo, (short) temp2, nbits);
            r = 0;
        }
    }
    // If the last coef(s) were zero, write an end-of-block code
    if (r > 0)
        write_bits(cinfo, actbl.ehufco[0], actbl.ehufsi[0]);
}
