@Test
public void test1DataWriter() throws Exception {
    AnalysisEngine dataWriterAnnotator = AnalysisEngineFactory.createPrimitive(Test1Annotator.class, typeSystemDescription, DirectoryDataWriterFactory.PARAM_OUTPUT_DIRECTORY, outputDirectoryName, CleartkSequenceAnnotator.PARAM_DATA_WRITER_FACTORY_CLASS_NAME, DefaultGrmmDataWriterFactory.class.getName());
    dataWriterAnnotator.process(jCas);
    dataWriterAnnotator.collectionProcessComplete();
    File trainFile = new GrmmClassifierBuilder().getTrainingDataFile(this.outputDirectory);
    String[] lines = FileUtil.loadListOfStrings(trainFile);
    assertEquals("A X ---- pos_NN:1.0 distance:3.0 precision:1.234", lines[0]);
    assertEquals("B Y ---- name_2PO:1.0 ps:2", lines[1]);
    assertEquals("C Z ---- name_2PO:1.0 ps:2", lines[2]);
    assertEquals("A Z ---- A_B_AB:1.0", lines[3]);
    // twice:
    assertEquals("A Z ---- A_B_AB:1.0", lines[4]);
    assertEquals("B Y ---- name_2PO:1.0 ps:3", lines[5]);
    assertEquals("C Z ---- name_2PO:1.0 ps:2", lines[6]);
    assertEquals("A Z ---- A_B_AB:1.0", lines[7]);
    File template = new File(outputDirectoryName, "template.txt");
    FileWriter fileWriter = new FileWriter(template);
    fileWriter.write("new ACRF.BigramTemplate (0)\nnew ACRF.BigramTemplate (1)\nnew ACRF.PairwiseFactorTemplate (0,1)\n");
    fileWriter.close();
    HideOutput hider = new HideOutput();
    Train.main(outputDirectoryName, "template.txt");
    hider.restoreOutput();
}
