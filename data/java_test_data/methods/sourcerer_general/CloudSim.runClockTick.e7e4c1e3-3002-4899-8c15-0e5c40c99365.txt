public static boolean runClockTick() {
    SimEntity ent;
    boolean queue_empty;
    int entities_size = entities.size();
    for (int i = 0; i < entities_size; i++) {
        ent = entities.get(i);
        if (ent.getState() == SimEntity.RUNNABLE) {
            ent.run();
        }
    }
    // If there are more future events then deal with them
    if (future.size() > 0) {
        List<SimEvent> toRemove = new ArrayList<SimEvent>();
        Iterator<SimEvent> it = future.iterator();
        queue_empty = false;
        SimEvent first = it.next();
        processEvent(first);
        future.remove(first);
        it = future.iterator();
        // Check if next events are at same time...
        boolean trymore = it.hasNext();
        while (trymore) {
            SimEvent next = it.next();
            if (next.eventTime() == first.eventTime()) {
                processEvent(next);
                toRemove.add(next);
                trymore = it.hasNext();
            } else {
                trymore = false;
            }
        }
        future.removeAll(toRemove);
    } else {
        queue_empty = true;
        running = false;
        printMessage("Simulation: No more future events");
    }
    return queue_empty;
}
