void pushNumberAsObject(ClassFileWriter cfw, double num) {
    if (num == 0.0) {
        if (1 / num > 0) {
            // +0.0
            cfw.add(ByteCode.GETSTATIC, "org/mozilla/javascript/optimizer/OptRuntime", "zeroObj", "Ljava/lang/Double;");
        } else {
            cfw.addPush(num);
            addDoubleWrap(cfw);
        }
    } else if (num == 1.0) {
        cfw.add(ByteCode.GETSTATIC, "org/mozilla/javascript/optimizer/OptRuntime", "oneObj", "Ljava/lang/Double;");
        return;
    } else if (num == -1.0) {
        cfw.add(ByteCode.GETSTATIC, "org/mozilla/javascript/optimizer/OptRuntime", "minusOneObj", "Ljava/lang/Double;");
    } else if (num != num) {
        cfw.add(ByteCode.GETSTATIC, "org/mozilla/javascript/ScriptRuntime", "NaNobj", "Ljava/lang/Double;");
    } else if (itsConstantListSize >= 2000) {
        // There appears to be a limit in the JVM on either the number
        // of static fields in a class or the size of the class
        // initializer. Either way, we can't have any more than 2000
        // statically init'd constants.
        cfw.addPush(num);
        addDoubleWrap(cfw);
    } else {
        int N = itsConstantListSize;
        int index = 0;
        if (N == 0) {
            itsConstantList = new double[64];
        } else {
            double[] array = itsConstantList;
            while (index != N && array[index] != num) {
                ++index;
            }
            if (N == array.length) {
                array = new double[N * 2];
                System.arraycopy(itsConstantList, 0, array, 0, N);
                itsConstantList = array;
            }
        }
        if (index == N) {
            itsConstantList[N] = num;
            itsConstantListSize = N + 1;
        }
        String constantName = "_k" + index;
        String constantType = getStaticConstantWrapperType(num);
        cfw.add(ByteCode.GETSTATIC, mainClassName, constantName, constantType);
    }
}
