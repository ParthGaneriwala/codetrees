// $ANTLR start "case_label_list"
public final MyGrammarParser.case_label_list_return case_label_list() throws RecognitionException {
    MyGrammarParser.case_label_list_return retval = new MyGrammarParser.case_label_list_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token VG83 = null;
    MyGrammarParser.case_label_return case_label82 = null;
    MyGrammarParser.case_label_return case_label84 = null;
    CommonTree VG83_tree = null;
    RewriteRuleTokenStream stream_VG = new RewriteRuleTokenStream(adaptor, "token VG");
    RewriteRuleSubtreeStream stream_case_label = new RewriteRuleSubtreeStream(adaptor, "rule case_label");
    try {
        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:208:2: ( case_label ( VG case_label )* -> ^( CASE_LABEL_LIST ( case_label )+ ) )
        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:208:5: case_label ( VG case_label )*
        {
            pushFollow(FOLLOW_case_label_in_case_label_list1569);
            case_label82 = case_label();
            state._fsp--;
            stream_case_label.add(case_label82.getTree());
            // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:208:16: ( VG case_label )*
            loop16: do {
                int alt16 = 2;
                int LA16_0 = input.LA(1);
                if ((LA16_0 == VG)) {
                    alt16 = 1;
                }
                switch(alt16) {
                    case 1:
                        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:208:17: VG case_label
                        {
                            VG83 = (Token) match(input, VG, FOLLOW_VG_in_case_label_list1572);
                            stream_VG.add(VG83);
                            pushFollow(FOLLOW_case_label_in_case_label_list1574);
                            case_label84 = case_label();
                            state._fsp--;
                            stream_case_label.add(case_label84.getTree());
                        }
                        break;
                    default:
                        break loop16;
                }
            } while (true);
            // AST REWRITE
            // elements: case_label
            // token labels:
            // rule labels: retval
            // token list labels:
            // rule list labels:
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", retval != null ? retval.tree : null);
            root_0 = (CommonTree) adaptor.nil();
            // 208:33: -> ^( CASE_LABEL_LIST ( case_label )+ )
            {
                // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:208:36: ^( CASE_LABEL_LIST ( case_label )+ )
                {
                    CommonTree root_1 = (CommonTree) adaptor.nil();
                    root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(CASE_LABEL_LIST, "CASE_LABEL_LIST"), root_1);
                    if (!(stream_case_label.hasNext())) {
                        throw new RewriteEarlyExitException();
                    }
                    while (stream_case_label.hasNext()) {
                        adaptor.addChild(root_1, stream_case_label.nextTree());
                    }
                    stream_case_label.reset();
                    adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
