public int update(Connection db) throws SQLException {
    if (this.getId() == -1) {
        throw new SQLException("ID was not specified");
    }
    if (!isValid()) {
        return -1;
    }
    int resultCount = 0;
    boolean commit = db.getAutoCommit();
    try {
        if (commit) {
            db.setAutoCommit(false);
        }
        int i = 0;
        // NOTE: Do not update the "modified" field because it is used for file paths
        PreparedStatement pst = db.prepareStatement("UPDATE project_files " + "SET subject = ?, client_filename = ?, default_file = ?, comment = ?, featured_file = ? " + "WHERE item_id = ? ");
        pst.setString(++i, subject);
        pst.setString(++i, clientFilename);
        pst.setBoolean(++i, defaultFile);
        pst.setString(++i, comment);
        pst.setBoolean(++i, featuredFile);
        pst.setInt(++i, this.getId());
        resultCount = pst.executeUpdate();
        pst.close();
        // Set default
        if (defaultFile) {
            updateDefaultRecord(db, linkModuleId, linkItemId, id);
        }
        // Retrieve any versions
        this.buildVersionList(db);
        // Update version info for the corresponding file item version
        for (FileItemVersion latestVersion : versionList) {
            if (Double.toString(this.version).equals(Double.toString(latestVersion.getVersion()))) {
                latestVersion.setClientFilename(this.getClientFilename());
                latestVersion.setSubject(this.getSubject());
                latestVersion.setComment(this.getComment());
                latestVersion.update(db);
                break;
            }
        }
    } catch (Exception e) {
        if (commit) {
            db.rollback();
        }
        throw new SQLException(e.getMessage());
    } finally {
        if (commit) {
            db.setAutoCommit(true);
        }
    }
    return resultCount;
}
