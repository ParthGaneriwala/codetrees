public static List<KitTimesBean> ParityDimNoKitTimes(String field, String type) {
    List<KitTimesBean> ktbList = new ArrayList<KitTimesBean>();
    Map<Long, String> map = MapResultService.getMsHistoryMap();
    List<Map.Entry<Long, String>> infoIds = new ArrayList<Map.Entry<Long, String>>(map.entrySet());
    // 排序
    Collections.sort(infoIds, new Comparator<Map.Entry<Long, String>>() {

        public int compare(Map.Entry<Long, String> o1, Map.Entry<Long, String> o2) {
            return (int) (o2.getKey() - o1.getKey());
        }
    });
    // 计算持续未出次数
    Map<String, Integer> nonKitTimesMap = new HashMap<String, Integer>();
    int count = 0;
    for (int i = 0; i < infoIds.size(); i++) {
        Map.Entry<Long, String> v = infoIds.get(i);
        if (CodeType.isEven(v.getValue())) {
            if (CodeType.isBig(v.getValue())) {
                if (!nonKitTimesMap.containsKey("even_big")) {
                    nonKitTimesMap.put("even_big", count);
                }
            } else {
                if (!nonKitTimesMap.containsKey("even_small")) {
                    nonKitTimesMap.put("even_small", count);
                }
            }
        } else {
            if (CodeType.isBig(v.getValue())) {
                if (!nonKitTimesMap.containsKey("odd_big")) {
                    nonKitTimesMap.put("odd_big", count);
                }
            } else {
                if (!nonKitTimesMap.containsKey("odd_small")) {
                    nonKitTimesMap.put("odd_small", count);
                }
            }
        }
        count++;
    }
    // 计算累计已经出次数
    Map<String, Integer> totalKitTimesMap = new HashMap<String, Integer>();
    for (int i = 0; i < infoIds.size(); i++) {
        Map.Entry<Long, String> v = infoIds.get(i);
        String vKey = "";
        if (CodeType.isEven(v.getValue())) {
            if (CodeType.isBig(v.getValue())) {
                vKey = "even_big";
            } else {
                vKey = "even_small";
            }
        } else {
            if (CodeType.isBig(v.getValue())) {
                vKey = "odd_big";
            } else {
                vKey = "odd_small";
            }
        }
        count = 0;
        if (totalKitTimesMap.containsKey(vKey)) {
            count = totalKitTimesMap.remove(vKey);
        }
        count = count + 1;
        totalKitTimesMap.put(vKey, count);
    }
    ktbList.add(new KitTimesBean(1, nonKitTimesMap.get("even_big"), Double.parseDouble(totalKitTimesMap.get("even_big").toString())));
    ktbList.add(new KitTimesBean(2, nonKitTimesMap.get("even_small"), Double.parseDouble(totalKitTimesMap.get("even_small").toString())));
    ktbList.add(new KitTimesBean(3, nonKitTimesMap.get("odd_big"), Double.parseDouble(totalKitTimesMap.get("odd_big").toString())));
    ktbList.add(new KitTimesBean(4, nonKitTimesMap.get("even_small"), Double.parseDouble(totalKitTimesMap.get("odd_small").toString())));
    ktbList.add(new KitTimesBean(0, 0, 0.0));
    ktbList.addAll(ParityDimNoKitTimes2(field, type));
    return ktbList;
}
