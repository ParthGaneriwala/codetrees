public String updateParameters() {
    String status = "OK";
    params.setOverOrUnder(settingsPanel.getOverUnderPanel().getCheckedButton());
    params.setVisualization(settingsPanel.getVizPanel().getCheckedButton());
    params.setCluster_name(settingsPanel.getNameField().getText().trim());
    // checking cluster name.
    if (params.getCluster_name().equals("")) {
        JOptionPane.showMessageDialog(settingsPanel, "Please choose a cluster name ");
        status = "FALSE";
    } else {
        Set networkSet = Cytoscape.getNetworkSet();
        Iterator it = networkSet.iterator();
        while (it.hasNext()) {
            CyNetwork c = (CyNetwork) it.next();
            if (params.getCluster_name().equals(c.getTitle())) {
                JOptionPane.showMessageDialog(settingsPanel, "A network with this name already exists in Cytoscape. Please choose another cluster name ");
                status = "FALSE";
            }
        }
    }
    params.setTextOrGraph(settingsPanel.getTextOrGraphPanel().graphButtonChecked());
    if (status.equals("OK")) {
        // checking whether, if we select nodes from the network, the network and the selected nodes exist
        if (params.isTextOrGraph()) {
            // get the network object from the window.
            // CyNetworkView graphView = Cytoscape.getCurrentNetworkView();
            CyNetwork network = Cytoscape.getCurrentNetwork();
            // 200905 changed : accept input from (large) network without view loaded
            if (network == null) {
                JOptionPane.showMessageDialog(settingsPanel, "Please load a network.");
                status = "FALSE";
            } else // put up a dialog if there are no selected nodes
            if (network.getSelectedNodes().size() == 0) {
                JOptionPane.showMessageDialog(settingsPanel, "Please select one or more nodes.");
                status = "FALSE";
            }
        } else // testing whether, if nodes are selected from text area, there is something valid in the text area
        if (!params.isTextOrGraph()) {
            // set the text from the window to the variable
            params.setTextInput(settingsPanel.getTextOrGraphPanel().getInputText());
            if (params.getTextInput() == null) {
                JOptionPane.showMessageDialog(settingsPanel, "Please paste one or more genes in the text field.");
                status = "FALSE";
            }
        }
    }
    // significance cut-off
    params.setCorrection((String) settingsPanel.getCorrectionBox().getSelectedItem());
    params.setTest((String) settingsPanel.getTestBox().getSelectedItem());
    params.setSignificance(new BigDecimal(settingsPanel.getAlphaField().getText()));
    if (status.equals("OK")) {
        // distribution selected?
        if (params.getTest().equals(NONE)) {
            settingsPanel.getAlphaField().setText("1.00");
            params.setSignificance(new BigDecimal("1.00"));
            if (!params.getCorrection().equals(NONE)) {
                JOptionPane.showMessageDialog(settingsPanel, "Multiple testing correction not possible without test selection...");
                status = "FALSE";
            }
        } else {
            // checking of alpha is a decimal between 0 and 1.
            boolean alphaIncorrect = false;
            try {
                if (params.getSignificance().compareTo(new BigDecimal("1")) >= 0 || params.getSignificance().compareTo(new BigDecimal("0")) <= 0)
                    alphaIncorrect = true;
            } catch (Exception ex) {
                alphaIncorrect = true;
            }
            if (alphaIncorrect) {
                JOptionPane.showMessageDialog(settingsPanel, "Please input a valid significance level (i.e. a decimal number between 0 and 1).");
                status = "FALSE";
            }
        }
    }
    // categories
    params.setCategory((String) settingsPanel.getCategoriesBox().getSelectedItem());
    params.setReferenceSet((String) settingsPanel.getClusterVsBox().getSelectedItem());
    if (status.equals("OK")) {
        // category-option selected?
        if (params.getCategory().equals(NONE)) {
            JOptionPane.showMessageDialog(settingsPanel, "Please select what categories should be visualized.");
            status = "FALSE";
        } else // checking number of categories option
        if (params.getCategory().equals(CATEGORY_CORRECTION) && params.getCorrection().equals(NONE)) {
            JOptionPane.showMessageDialog(settingsPanel, "The option 'Overrepresented categories after correction'" + "\n" + "at the category box requires the selection of a" + "\n" + "correction in the correction box.");
            status = "FALSE";
        } else if (params.getCategory().equals(CATEGORY_BEFORE_CORRECTION) && params.getTest().equals(NONE)) {
            JOptionPane.showMessageDialog(settingsPanel, "The option 'Overrepresented categories before correction'" + "\n" + "at the category box requires at least the selection of a" + "\n" + "test in the test box.");
            status = "FALSE";
        } else // testing versus-option selected?
        if (params.getReferenceSet().equals(NONE)) {
            JOptionPane.showMessageDialog(settingsPanel, "Please select against what reference the cluster must be tested.");
            status = "FALSE";
        } else // testing consistency of text area node selection mode with versus-option
        if (params.getReferenceSet().equals(GRAPH) && !params.isTextOrGraph()) {
            // CyNetworkView graphView = Cytoscape.getCurrentNetworkView();
            CyNetwork network = Cytoscape.getCurrentNetwork();
            // 200905 changed : accept input from (large) network without view loaded
            if (network == null) {
                JOptionPane.showMessageDialog(settingsPanel, "Please load a network.");
                status = "FALSE";
            }
        }
    }
    // annotation and ontology files
    // if (! this.bdsAnnot.isMemoryChoiceEnabled() ) {
    params.setSpecies(settingsPanel.getAnnotationPanel().getSelection());
    // Get the specified species and the find out what is its corresponding file name
    String specified_species = settingsPanel.getAnnotationPanel().getSpecifiedSpecies();
    if (specified_species.equals(BingoAlgorithm.CUSTOM)) {
        params.setAnnotationFile(settingsPanel.getAnnotationPanel().getSelection());
    } else {
        // get the file name for this species.
        String annot_filename = params.getSpeciesFilename(specified_species);
        params.setAnnotationFile(openResourceFile(annot_filename));
    }
    if (settingsPanel.getOntologyPanel().getSpecifiedOntology().equals(BingoAlgorithm.CUSTOM)) {
        params.setOntologyFile(settingsPanel.getOntologyPanel().getSelection());
    } else {
        params.setOntologyFile(openResourceFile(settingsPanel.getOntologyPanel().getSelection()));
    }
    params.setAnnotation_default(settingsPanel.getAnnotationPanel().getDefault());
    params.setOntology_default(settingsPanel.getOntologyPanel().getDefault());
    HashSet deleteCodes = new HashSet();
    String tmp = settingsPanel.getEcField().getText().trim();
    String[] codes = tmp.split("\\s+");
    for (int i = 0; i < codes.length; i++) {
        if (codes[i].length() != 0) {
            if (ecCodes.contains(codes[i].toUpperCase())) {
                deleteCodes.add(codes[i].toUpperCase());
            } else {
                JOptionPane.showMessageDialog(settingsPanel, "Evidence code " + codes[i].toUpperCase() + " does not exist");
                status = "FALSE";
            }
        }
    }
    params.setDeleteCodes(deleteCodes);
    // params.setIdentifier(settingsPanel.getTypeOfIdentifierPanel().getCheckedButton());
    if (status.equals("OK")) {
        // annotation file selected?
        if (params.getAnnotationFile() == null) {
            JOptionPane.showMessageDialog(settingsPanel, "Please select an annotation file.");
            status = "FALSE";
        } else // ontology file selected?
        if (params.getOntologyFile() == null) {
            JOptionPane.showMessageDialog(settingsPanel, "Please select an ontology file.");
            status = "FALSE";
        } else {
            AnnotationParser annParser = params.initializeAnnotationParser();
            boolean success = TaskManager.executeTask(annParser, config);
            if (annParser.getStatus()) {
                params.setAnnotation(annParser.getAnnotation());
                params.setOntology(annParser.getOntology());
                params.setAlias(annParser.getAlias());
                if (annParser.getOrphans()) {
                    JOptionPane.showMessageDialog(settingsPanel, "WARNING : Some category labels in the annotation file" + "\n" + "are not defined in the ontology. Please check the compatibility of" + "\n" + "these files. For now, these labels will be ignored and calculations" + "\n" + "will proceed.");
                }
            } else {
                status = "FALSE";
            }
        }
    }
    /*      }
        //if using annotation/ontology from Cytoscape
        else{
               params.setAnnotation(bdsAnnot.getAnnotation());
               params.setAnnotation_default(false);
               params.setAnnotationFile(null);
               params.setOntology(bdsAnnot.getOntology());
               params.setOntology_default(false);
               params.setOntologyFile(null);
               AnnotationParser annParser = params.initializeAnnotationParser();
               boolean success = TaskManager.executeTask(annParser, config);
                 if (annParser.getStatus()) {
                    params.setAnnotation(annParser.getAnnotation());
                    params.setOntology(annParser.getOntology());
                 }
                 if (params.getAnnParser().getOrphans()) {
                    JOptionPane.showMessageDialog(settingsPanel,
                            "WARNING : Some category labels in the annotation" + "\n" +
                                    "are not defined in the ontology. Please check the compatibility of" + "\n" +
                                    "the ontology and annotation files loaded into Cytoscape." + "\n" +
                                    "For now, these labels will be ignored and calculations" + "\n" +
                                    "will proceed.");
                 }
        }
  */
    // Data panel
    params.setFileoutput(settingsPanel.getDataPanel().checked());
    if (status.equals("OK")) {
        // datafile save option selected ?
        if (params.isFileoutput()) {
            // does file exist already ?
            params.setFileoutput_dir(settingsPanel.getDataPanel().getFileDir());
            File sel = new File(settingsPanel.getDataPanel().getFileDir(), params.getCluster_name() + ".bgo");
            if (sel.exists()) {
                // .getValue() ;
                int choice = JOptionPane.showConfirmDialog(settingsPanel, "File " + params.getCluster_name() + ".bgo already exists. Overwrite (y/n)?\nIf not, choose a different cluster name.", "confirm", JOptionPane.YES_NO_OPTION);
                if (choice != JOptionPane.YES_OPTION) {
                    settingsPanel.getDataPanel().reset();
                    status = "FALSE";
                }
            }
            // is file name for data file correct?
            String saveDataFileString = settingsPanel.getDataPanel().isFileNameLegal(params.getCluster_name() + ".bgo");
            if (!saveDataFileString.equals("LOADCORRECT")) {
                JOptionPane.showMessageDialog(settingsPanel, "Data File: " + saveDataFileString);
                status = "FALSE";
            }
        }
    }
    // return if all parameters were set.
    return status;
}
