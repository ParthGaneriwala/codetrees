private void typeSynthesize(ParseNode node) {
    int n = node.nChildren();
    if (node.child(n - 1).getSymbol().isPuctuation()) {
        // array decl deal with it separately
        ParseNode identifierNode = node.child(n - 2);
        if (!(n - 2 > 0)) {
            error("The array type id must have at least on dimemtion!!");
        }
        if (node.child(0).getSymbol().isPuctuation()) {
            // paraList int[] a: deal with it separately
            if (identifierNode.getType() == PrimitiveType.UNDEFINED) {
                // new variable
                if (node.getType() == PrimitiveType.FLOAT) {
                    addArrayFloatBinding(identifierNode, 8);
                } else // address is int type occupy 4 bytes and the offset 4 bytes
                if (node.getType() == PrimitiveType.BOOLEAN) {
                    addArrayBooleanBinding(identifierNode, 8);
                } else if (node.getType() == PrimitiveType.STRING) {
                    addArrayStringBinding(identifierNode, 8);
                } else {
                    addArrayIntegerBinding(identifierNode, 8);
                }
            } else {
                if (identifierNode.getBinding().getMemoryLocation().getScopingLevel() == Scopes.getStaticScopingLevel()) {
                    Logger log = Logger.getLogger("compiler.semanticAnalyzer");
                    log.severe("variable can not redeclared!!!");
                    Error.reportError();
                } else {
                    // add binding
                    if (node.getType() == PrimitiveType.FLOAT) {
                        addArrayFloatBinding(identifierNode, 8);
                    } else if (node.getType() == PrimitiveType.BOOLEAN) {
                        addArrayBooleanBinding(identifierNode, 8);
                    } else if (node.getType() == PrimitiveType.STRING) {
                        addArrayStringBinding(identifierNode, 8);
                    } else {
                        addArrayIntegerBinding(identifierNode, 8);
                    }
                }
            }
            // set it in the binding !!!
            identifierNode.getBinding().setNumberOfDim(n - 2);
            identifierNode.getBinding().setToReference();
            // because of this return we can deal with it separately!!!!
            return;
        }
        // 
        if (identifierNode.getType() == PrimitiveType.UNDEFINED) {
            // new variable
            if (node.getType() == PrimitiveType.FLOAT) {
                int numOfElements = 1;
                int numOfDims = n - 2;
                for (int i = 0; i < numOfDims; i++) {
                    numOfElements *= ((NumberNode) node.child(i)).getValue();
                }
                int size = // store number of dimesions
                4 + // store upper bounds
                4 * numOfDims + // store elements
                8 * numOfElements;
                addArrayFloatBinding(identifierNode, size);
            } else if (node.getType() == PrimitiveType.BOOLEAN) {
                int numOfElements = 1;
                int numOfDims = n - 2;
                for (int i = 0; i < numOfDims; i++) {
                    numOfElements *= ((NumberNode) node.child(i)).getValue();
                }
                int size = // store number of dimesions
                4 + // store upper bounds
                4 * numOfDims + // store elements
                4 * numOfElements;
                addArrayBooleanBinding(identifierNode, size);
            } else if (node.getType() == PrimitiveType.STRING) {
                int numOfElements = 1;
                int numOfDims = n - 2;
                for (int i = 0; i < numOfDims; i++) {
                    numOfElements *= ((NumberNode) node.child(i)).getValue();
                }
                int size = // store number of dimesions
                4 + // store upper bounds
                4 * numOfDims + // store elements
                256 * numOfElements;
                addArrayStringBinding(identifierNode, size);
            } else {
                int numOfElements = 1;
                int numOfDims = n - 2;
                for (int i = 0; i < numOfDims; i++) {
                    numOfElements *= ((NumberNode) node.child(i)).getValue();
                }
                int size = // store number of dimensions
                4 + // store upper bounds
                4 * numOfDims + // store elements
                4 * numOfElements;
                addArrayIntegerBinding(identifierNode, size);
            }
        } else {
            if (identifierNode.getBinding().getMemoryLocation().getScopingLevel() == Scopes.getStaticScopingLevel()) {
                Logger log = Logger.getLogger("compiler.semanticAnalyzer");
                log.severe("variable can not redeclared!!!");
                Error.reportError();
            } else {
                // add binding
                if (node.getType() == PrimitiveType.FLOAT) {
                    int numOfElements = 1;
                    int numOfDims = n - 2;
                    for (int i = 0; i < numOfDims; i++) {
                        numOfElements *= ((NumberNode) node.child(i)).getValue();
                    }
                    int size = // store number of dimesions
                    4 + // store upper bounds
                    4 * numOfDims + // store elements
                    8 * numOfElements;
                    addArrayFloatBinding(identifierNode, size);
                } else if (node.getType() == PrimitiveType.BOOLEAN) {
                    int numOfElements = 1;
                    int numOfDims = n - 2;
                    for (int i = 0; i < numOfDims; i++) {
                        numOfElements *= ((NumberNode) node.child(i)).getValue();
                    }
                    int size = // store number of dimesions
                    4 + // store upper bounds
                    4 * numOfDims + // store elements
                    4 * numOfElements;
                    addArrayBooleanBinding(identifierNode, size);
                } else if (node.getType() == PrimitiveType.STRING) {
                    int numOfElements = 1;
                    int numOfDims = n - 2;
                    for (int i = 0; i < numOfDims; i++) {
                        numOfElements *= ((NumberNode) node.child(i)).getValue();
                    }
                    int size = // store number of dimesions
                    4 + // store upper bounds
                    4 * numOfDims + // store elements
                    256 * numOfElements;
                    addArrayStringBinding(identifierNode, size);
                } else {
                    int numOfElements = 1;
                    int numOfDims = n - 2;
                    for (int i = 0; i < numOfDims; i++) {
                        numOfElements *= ((NumberNode) node.child(i)).getValue();
                    }
                    int size = // store number of dimesions
                    4 + // store upper bounds
                    4 * numOfDims + // store elements
                    4 * numOfElements;
                    addArrayIntegerBinding(identifierNode, size);
                }
            }
        }
        // set it in the binding !!!
        identifierNode.getBinding().setNumberOfDim(n - 2);
        // because of this return we can deal with it separately!!!!
        return;
    }
    if (node.nChildren() == 2) {
        ParseNode identifierNode = node.child(1);
        ParseNode expressionNode = node.child(0);
        if (this.nowNumOfRoutne < this.numOfRoutineDecl) {
            if (!isInRoutineBlock[this.nowNumOfRoutne]) {
            } else {
                // still in routine need check parameter name with local identifer name
                if (RoutineTable.lookup(this.nowNumOfRoutne).isSameWithOneOfParaNames(tokenFor(identifierNode).getLexeme())) {
                    error("Parameter names may not be redifined whithin the scope of the routine!!");
                }
                if ((tokenFor(identifierNode).getLexeme()).equals("result"))
                    error("The \"result\" is a reserved word which is not allowed redeclared in a routine!!");
            }
        }
        if (expressionNode.getType() == PrimitiveType.UNDEFINED) {
            // can't assign a void to anything.
            // This case happens if you write "id id =" when id is undefined.
            useBeforeAssignError(identifierNode);
        }
        if (!typesMatch(node.getType(), expressionNode.getType())) {
            if (expressionNode.getType() == PrimitiveType.INTEGER && node.getType() == PrimitiveType.FLOAT) {
                if (identifierNode.getType() == PrimitiveType.UNDEFINED) {
                    addFloatBinding(identifierNode);
                } else // still have some bugs when remove the comment above
                {
                    if (identifierNode.getBinding().getMemoryLocation().getScopingLevel() == Scopes.getStaticScopingLevel()) {
                        Logger log = Logger.getLogger("compiler.semanticAnalyzer");
                        log.severe("variable can not be redeclared!!!");
                        Error.reportError();
                    } else {
                        addFloatBinding(identifierNode);
                    }
                }
            } else {
                typeConvertionError(node, expressionNode);
            }
        } else {
            // id undefined
            if (identifierNode.getType() == PrimitiveType.UNDEFINED) {
                // new variable
                if (node.getType() == PrimitiveType.FLOAT)
                    addFloatBinding(identifierNode);
                else if (node.getType() == PrimitiveType.BOOLEAN)
                    addBooleanBinding(identifierNode);
                else if (node.getType() == PrimitiveType.STRING)
                    addStringBinding(identifierNode);
                else
                    addIntegerBinding(identifierNode);
            } else {
                if (identifierNode.getBinding().getMemoryLocation().getScopingLevel() == Scopes.getStaticScopingLevel()) {
                    Logger log = Logger.getLogger("compiler.semanticAnalyzer");
                    log.severe("variable can not be redeclared!!!");
                    Error.reportError();
                } else {
                    if (expressionNode.getType() == PrimitiveType.FLOAT)
                        addFloatBinding(identifierNode);
                    else if (expressionNode.getType() == PrimitiveType.BOOLEAN)
                        addBooleanBinding(identifierNode);
                    else if (expressionNode.getType() == PrimitiveType.STRING)
                        addStringBinding(identifierNode);
                    else
                        addIntegerBinding(identifierNode);
                }
            }
        }
    } else if (node.nChildren() == 1) {
        ParseNode identifierNode = node.child(0);
        if (this.nowNumOfRoutne < this.numOfRoutineDecl) {
            if (!isInRoutineBlock[this.nowNumOfRoutne]) {
            } else {
                // still in routine need check parameter name wiht local identifer name
                if (RoutineTable.lookup(this.nowNumOfRoutne).isSameWithOneOfParaNames(tokenFor(identifierNode).getLexeme())) {
                    error("Parameter names may not be redifined whithin the scope of the routine!!");
                }
                if ((tokenFor(identifierNode).getLexeme()).equals("result"))
                    error("The \"result\" is a reserved word which is not allowed redeclared in a routine!!");
            }
        }
        if (identifierNode.getType() == PrimitiveType.UNDEFINED) {
            // new variable
            if (node.getType() == PrimitiveType.FLOAT)
                addFloatBinding(identifierNode);
            else if (node.getType() == PrimitiveType.BOOLEAN)
                addBooleanBinding(identifierNode);
            else if (node.getType() == PrimitiveType.STRING)
                addStringBinding(identifierNode);
            else
                addIntegerBinding(identifierNode);
        } else {
            if (identifierNode.getBinding().getMemoryLocation().getScopingLevel() == Scopes.getStaticScopingLevel()) {
                Logger log = Logger.getLogger("compiler.semanticAnalyzer");
                log.severe("variable can not redeclared!!!");
                Error.reportError();
            } else {
                // add binding
                if (node.getType() == PrimitiveType.FLOAT)
                    addFloatBinding(identifierNode);
                else if (node.getType() == PrimitiveType.BOOLEAN)
                    addBooleanBinding(identifierNode);
                else if (node.getType() == PrimitiveType.STRING)
                    addStringBinding(identifierNode);
                else
                    addIntegerBinding(identifierNode);
            }
        }
    } else {
        Logger log = Logger.getLogger("compiler.semanticAnalyzer");
        log.severe("variable type decleration syntax error!!");
        Error.reportError();
    }
}
