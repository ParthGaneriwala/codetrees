public void createPackageContents() {
    if (isCreated)
        return;
    isCreated = true;
    // Create classes and their features
    argEClass = createEClass(ARG);
    createEAttribute(argEClass, ARG__NAME);
    createEAttribute(argEClass, ARG__TYPE);
    bindingEClass = createEClass(BINDING);
    createEAttribute(bindingEClass, BINDING__SOURCE);
    createEAttribute(bindingEClass, BINDING__TARGET);
    createEReference(bindingEClass, BINDING__USED_SERVICE);
    createEAttribute(bindingEClass, BINDING__DESCRIPTION);
    createEAttribute(bindingEClass, BINDING__GLUE);
    createEAttribute(bindingEClass, BINDING__KIND);
    createEAttribute(bindingEClass, BINDING__NAME);
    bodyTypeEClass = createEClass(BODY_TYPE);
    createEAttribute(bodyTypeEClass, BODY_TYPE__VALUE);
    createEAttribute(bodyTypeEClass, BODY_TYPE__LANGUAGE);
    componentInstanceEClass = createEClass(COMPONENT_INSTANCE);
    createEAttribute(componentInstanceEClass, COMPONENT_INSTANCE__DEFINED_BY_DESCRIPTOR);
    createEAttribute(componentInstanceEClass, COMPONENT_INSTANCE__NAME);
    createEReference(componentInstanceEClass, COMPONENT_INSTANCE__INTERFACE);
    createEReference(componentInstanceEClass, COMPONENT_INSTANCE__COMPONENT_INSTANCE);
    createEAttribute(componentInstanceEClass, COMPONENT_INSTANCE__DESCRIPTION);
    createEReference(componentInstanceEClass, COMPONENT_INSTANCE__PORT);
    createEReference(componentInstanceEClass, COMPONENT_INSTANCE__BINDING);
    createEAttribute(componentInstanceEClass, COMPONENT_INSTANCE__KIND);
    documentRootEClass = createEClass(DOCUMENT_ROOT);
    createEAttribute(documentRootEClass, DOCUMENT_ROOT__MIXED);
    createEReference(documentRootEClass, DOCUMENT_ROOT__XMLNS_PREFIX_MAP);
    createEReference(documentRootEClass, DOCUMENT_ROOT__XSI_SCHEMA_LOCATION);
    createEReference(documentRootEClass, DOCUMENT_ROOT__COMPONENT_INSTANCE);
    interfaceEClass = createEClass(INTERFACE);
    createEReference(interfaceEClass, INTERFACE__SERVICE);
    createEAttribute(interfaceEClass, INTERFACE__DESCRITION);
    createEAttribute(interfaceEClass, INTERFACE__NAME);
    portEClass = createEClass(PORT);
    createEAttribute(portEClass, PORT__DIRECTION);
    createEAttribute(portEClass, PORT__VISIBILITY);
    createEAttribute(portEClass, PORT__DEFINED_BY_INTERFACE);
    createEAttribute(portEClass, PORT__DESCRIPTION);
    createEAttribute(portEClass, PORT__NAME);
    serviceEClass = createEClass(SERVICE);
    createEReference(serviceEClass, SERVICE__ARG);
    createEAttribute(serviceEClass, SERVICE__DESCRIPTION);
    createEReference(serviceEClass, SERVICE__BODY);
    createEAttribute(serviceEClass, SERVICE__KIND);
    createEAttribute(serviceEClass, SERVICE__NAME);
    createEAttribute(serviceEClass, SERVICE__RETURNED_TYPE);
    usedServiceEClass = createEClass(USED_SERVICE);
    createEAttribute(usedServiceEClass, USED_SERVICE__ARG);
    createEAttribute(usedServiceEClass, USED_SERVICE__NAME);
    assemblyBindingEClass = createEClass(ASSEMBLY_BINDING);
    createEAttribute(assemblyBindingEClass, ASSEMBLY_BINDING__KIND);
    delegationBindingEClass = createEClass(DELEGATION_BINDING);
    createEAttribute(delegationBindingEClass, DELEGATION_BINDING__KIND);
    // Create enums
    bindingKindEEnum = createEEnum(BINDING_KIND);
    componentKindEEnum = createEEnum(COMPONENT_KIND);
    directionEEnum = createEEnum(DIRECTION);
    serviceKindEEnum = createEEnum(SERVICE_KIND);
    visibilityEEnum = createEEnum(VISIBILITY);
    a_BindingKindEEnum = createEEnum(ABINDING_KIND);
    d_BindingKindEEnum = createEEnum(DBINDING_KIND);
    // Create data types
    bindingKindObjectEDataType = createEDataType(BINDING_KIND_OBJECT);
    componentKindObjectEDataType = createEDataType(COMPONENT_KIND_OBJECT);
    directionObjectEDataType = createEDataType(DIRECTION_OBJECT);
    serviceKindObjectEDataType = createEDataType(SERVICE_KIND_OBJECT);
    visibilityObjectEDataType = createEDataType(VISIBILITY_OBJECT);
}
