// $ANTLR start "assignment"
public final CompiladoresParser.assignment_return assignment() throws RecognitionException {
    CompiladoresParser.assignment_return retval = new CompiladoresParser.assignment_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token EQUAL61 = null;
    CompiladoresParser.id_return id60 = null;
    CompiladoresParser.expression_return expression62 = null;
    CommonTree EQUAL61_tree = null;
    RewriteRuleTokenStream stream_EQUAL = new RewriteRuleTokenStream(adaptor, "token EQUAL");
    RewriteRuleSubtreeStream stream_id = new RewriteRuleSubtreeStream(adaptor, "rule id");
    RewriteRuleSubtreeStream stream_expression = new RewriteRuleSubtreeStream(adaptor, "rule expression");
    try {
        dbg.enterRule(getGrammarFileName(), "assignment");
        if (getRuleLevel() == 0) {
            dbg.commence();
        }
        incRuleLevel();
        dbg.location(123, 1);
        try {
            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:123:14: ( id EQUAL expression -> ^( ASSIGN id expression ) )
            dbg.enterAlt(1);
            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:123:16: id EQUAL expression
            {
                dbg.location(123, 16);
                pushFollow(FOLLOW_id_in_assignment925);
                id60 = id();
                state._fsp--;
                stream_id.add(id60.getTree());
                dbg.location(123, 19);
                EQUAL61 = (Token) match(input, EQUAL, FOLLOW_EQUAL_in_assignment927);
                stream_EQUAL.add(EQUAL61);
                dbg.location(123, 25);
                pushFollow(FOLLOW_expression_in_assignment929);
                expression62 = expression();
                state._fsp--;
                stream_expression.add(expression62.getTree());
                // AST REWRITE
                // elements: expression, id
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                retval.tree = root_0;
                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.tree : null);
                root_0 = (CommonTree) adaptor.nil();
                // 124:4: -> ^( ASSIGN id expression )
                {
                    dbg.location(124, 7);
                    // /home/CIN/fmm/Desktop/grammar/Compiladores.g:124:7: ^( ASSIGN id expression )
                    {
                        CommonTree root_1 = (CommonTree) adaptor.nil();
                        dbg.location(124, 9);
                        root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(ASSIGN, "ASSIGN"), root_1);
                        dbg.location(124, 16);
                        adaptor.addChild(root_1, stream_id.nextTree());
                        dbg.location(124, 19);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_0, root_1);
                    }
                }
                retval.tree = root_0;
            }
            retval.stop = input.LT(-1);
            retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
        }
        dbg.location(124, 30);
    } finally {
        dbg.exitRule(getGrammarFileName(), "assignment");
        decRuleLevel();
        if (getRuleLevel() == 0) {
            dbg.terminate();
        }
    }
    return retval;
}
