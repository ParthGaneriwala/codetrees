private Document execute(String methodName, Map<String, String[]> params) throws SunlightException {
    StringBuffer buffer = new StringBuffer();
    buffer.append("http://services.sunlightlabs.com/api/");
    buffer.append(methodName);
    buffer.append(".xml?apikey=");
    buffer.append(licenseKey);
    if (!params.isEmpty()) {
        buffer.append('&');
        for (Map.Entry<String, String[]> param : params.entrySet()) {
            for (String value : param.getValue()) {
                try {
                    buffer.append(encodeURLParameter(param.getKey()));
                } catch (UnsupportedEncodingException e) {
                    throw new SunlightException("Unable to encode parameter: " + param.getKey(), e);
                }
                buffer.append('=');
                try {
                    buffer.append(encodeURLParameter(value));
                } catch (UnsupportedEncodingException e) {
                    throw new SunlightException("Unable to encode parameter: " + param.getValue(), e);
                }
                buffer.append('&');
            }
        }
    }
    String url = StringUtils.removeEnd(buffer.toString(), "&");
    SimpleHttpConnectionManager connMgr = new SimpleHttpConnectionManager();
    connMgr.getParams().setConnectionTimeout(timeout);
    connMgr.getParams().setSoTimeout(timeout);
    connMgr.getParams().setParameter(HttpMethodParams.USER_AGENT, "Sunlight Java/Eclipse plug-in (http://abso.freehostia.com)");
    HttpMethodBase httpMethod = new GetMethod(url.toString());
    HttpClient httpClient = new HttpClient(connMgr);
    InputStream inStream = null;
    try {
        int responseCode = httpClient.executeMethod(httpMethod);
        if (responseCode != HttpStatus.SC_OK) {
            StringBuffer errorMsg = new StringBuffer();
            errorMsg.append(httpMethod.getStatusCode());
            errorMsg.append(" - ");
            errorMsg.append(HttpStatus.getStatusText(httpMethod.getStatusCode()));
            errorMsg.append(" - ");
            errorMsg.append(StringUtils.defaultString(httpMethod.getResponseBodyAsString()));
            throw new SunlightException(errorMsg.toString());
        }
        SAXReader reader = new SAXReader();
        inStream = httpMethod.getResponseBodyAsStream();
        InputSource source = new InputSource(inStream);
        source.setEncoding("UTF-8");
        Document doc = reader.read(source);
        return doc;
    } catch (HttpException e) {
        throw new SunlightException("Unable to perform request: " + e.getMessage(), e);
    } catch (IOException e) {
        throw new SunlightException("Unable to perform request: " + e.getMessage(), e);
    } catch (DocumentException e) {
        throw new SunlightException("Unable to parse response of request: " + e.getMessage(), e);
    } finally {
        httpMethod.releaseConnection();
        IOUtils.closeQuietly(inStream);
    }
}
