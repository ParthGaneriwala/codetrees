public void run() {
    ReaderManager rm = new ReaderManager();
    // pHandle.pushConsole(">" + LOGGER + ">job started", FrameMain.CONSOLE_NORMAL);
    FileReader fr = null;
    BufferedReader br = null;
    try {
        // pHandle.pushConsole(">" + LOGGER + ">searching", FrameMain.CONSOLE_NORMAL);
        String folder = StaticFactory.getHsicDir();
        String[] dir = new java.io.File(folder).list(new JarFilter());
        if (dir == null || dir.length == 0) {
            log.debug(LOGGER + "no file(s)");
            return;
        }
        for (int i = 0; i < dir.length; i++) {
            String file = dir[i];
            fr = new FileReader(folder + file);
            br = new BufferedReader(fr);
            String line = br.readLine();
            if (line == null) {
                log.debug(LOGGER + "invalid file");
                continue;
            }
            String[] info = line.split(",");
            if (info == null) {
                log.debug(LOGGER + "invalid file header");
                continue;
            }
            if (!StaticFactory.isDigital(info[info.length - 1])) {
                log.debug(LOGGER + "record count error");
                continue;
            }
            int record = Integer.parseInt(info[info.length - 1]);
            if (record <= 0) {
                log.debug(LOGGER + ">no data");
                continue;
            }
            int j = 0;
            Vector v = new Vector(record);
            String other = line;
            while ((line = br.readLine()) != null) {
                v.addElement(line);
                j++;
            }
            if (j != record) {
                log.debug(LOGGER + "record count error");
                continue;
            }
            br.close();
            fr.close();
            log.debug(LOGGER + "batch[" + info[0] + "]>co[" + info[1] + "]>st[" + info[2] + "]>pos[" + info[3] + "]>dt[" + info[4] + "]");
            for (j = 0; j < record; j++) {
                if (si.getChainID() != null && si.getChainID().length() > 0 && (!si.getReaderID().equals("test"))) {
                    rm.addChainMessage(si.getChainID(), info[3], "HSIC", other, v.elementAt(j).toString(), Integer.parseInt(info[4]), si.getChainName());
                }
            }
            String[] para = si.getExtra();
            if (para != null) {
                boolean bsave = (para[0].equals("1"));
                if (bsave) {
                    if (StaticFactory.isFolderExist(para[1])) {
                        StaticFactory.moveFile(folder + file, para[1] + file);
                    } else {
                        File f = new File(folder + file);
                        if (f.exists()) {
                            f.delete();
                        }
                    }
                }
            }
            log.debug(LOGGER + ">completed");
        }
    } catch (Exception ex) {
        log.debug(LOGGER + "unknown error:" + ex.getMessage());
    } finally {
        try {
            if (br != null) {
                br.close();
            }
            if (fr != null) {
                fr.close();
            }
        } catch (IOException ex) {
        }
    }
}
