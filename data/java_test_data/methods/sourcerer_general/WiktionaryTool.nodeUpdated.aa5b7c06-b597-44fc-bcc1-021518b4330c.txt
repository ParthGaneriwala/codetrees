public void nodeUpdated(EntryModel model, Node node, String oldValue) {
    if (inWiktionaryTool) {
        return;
    }
    try {
        inWiktionaryTool = true;
        if (node.getNodeType() == Node.ATTRIBUTE_NODE) {
            Attr attr = (Attr) node;
            Element owner = getElement(attr);
            String name = attr.getName();
            String value = attr.getValue();
            if (A_LANG_CODE.equals(name) && E_LANG.equals(owner.getTagName()) && owner.getElementsByTagName(E_PRONUNCIATION).getLength() <= 0 && VIETNAMESE_CODE.equals(node.getNodeValue())) {
                StringBuilder ipaCode = new StringBuilder("* [[Wiktionary:IPA|IPA]]: {{IPA|/");
                JSStringArray words = StringUtil.split(model.getTitle(), "\\s+");
                for (int i = 0; i < words.length(); i++) {
                    String word = words.get(i);
                    ipaCode.append("{{VieIPA");
                    for (int j = 0; j < word.length(); j++) {
                        ipaCode.append("|").append(word.charAt(j));
                    }
                    if (i < words.length() - 1)
                        ipaCode.append(" ");
                }
                ipaCode.append("/}}");
                Element pron = model.getDocument().createElement(Constants.E_PRONUNCIATION);
                pron.appendChild(model.getDocument().createTextNode(ipaCode.toString()));
                model.appendChild(owner, pron);
            } else if (A_POS_CODE.equals(name) && E_POS.equals(owner.getTagName())) {
                String langCode = ((Element) owner.getParentNode()).getAttribute(A_LANG_CODE);
                removeCategory(model, langCode, oldValue);
                addCategory(model, langCode, value);
                // set spelling
                if (!owner.hasAttribute(A_POS_SPELL) || owner.getAttribute(A_POS_SPELL).trim().length() <= 0) {
                    if (ENGLISH_CODE.equals(langCode) && NOUN_CODE.equals(value)) {
                        model.setAttribute(owner, A_POS_SPELL, getEngNounTemplate(model.getTitle()));
                    } else if (ENGLISH_CODE.equals(langCode) && ADJACTIVE_CODE.equals(value)) {
                        model.setAttribute(owner, A_POS_SPELL, "{{eng-adj}}");
                    } else if (ENGLISH_CODE.equals(langCode) && VERB_CODES.equals(value)) {
                        model.setAttribute(owner, A_POS_SPELL, "{{eng-verb}}");
                    } else {
                        model.setAttribute(owner, A_POS_SPELL, BOLD + model.getTitle() + BOLD);
                    }
                }
            } else if (A_EXAMPLE_CONTENT.equals(name)) {
                value = value.trim().replaceAll("'", "");
                value = ITALIC + value + ITALIC;
                value = value.replaceAll(model.getTitle(), BOLD + model.getTitle() + BOLD);
                model.setValue(attr, value);
            }
        }
    } finally {
        inWiktionaryTool = false;
    }
}
