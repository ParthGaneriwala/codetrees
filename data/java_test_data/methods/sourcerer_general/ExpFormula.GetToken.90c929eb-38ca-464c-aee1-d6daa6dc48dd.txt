private String GetToken() {
    boolean tokenFound = false;
    String testchar = "";
    String ReturnString = "";
    while (expstr.substring(tokenpos, tokenpos + 1).equals(" ")) tokenpos++;
    testchar = expstr.substring(tokenpos, tokenpos + 1).toLowerCase();
    if (NumStr.indexOf(testchar) >= 0) {
        int startpos = tokenpos;
        boolean inStr = true;
        boolean onE = false;
        boolean onePastE = false;
        boolean pastE = false;
        while (inStr) {
            inStr = false;
            String curChar = expstr.substring(tokenpos, tokenpos + 1).toLowerCase();
            if (onePastE)
                pastE = true;
            if (onE)
                onePastE = true;
            if ((NumStr.indexOf(curChar) >= 0) && !(onE || pastE || onePastE))
                inStr = true;
            if (curChar.equals("e") && !onE) {
                inStr = true;
                onE = true;
            }
            if (((NumStrND.indexOf(curChar) >= 0) || (curChar.equals("-"))) && onePastE && !pastE)
                inStr = true;
            if ((NumStrND.indexOf(curChar) >= 0) && pastE)
                inStr = true;
            if (inStr)
                tokenpos++;
        }
        ReturnString = expstr.substring(startpos, tokenpos);
        tokenFound = true;
    }
    if ((FctAlpha.indexOf(testchar) >= 0) && (!tokenFound)) {
        boolean FunctionFound = false;
        for (int j = 6; j >= 1; j--) {
            String str = expstr.substring(tokenpos, tokenpos + j).toLowerCase();
            if (!FunctionFound && !FindFct(str).equals("")) {
                FunctionFound = true;
                ReturnString = str;
                tokenpos += str.length();
                tokenFound = true;
            }
        }
    }
    if ((Terminal.indexOf(testchar) >= 0) && (!tokenFound)) {
        tokenpos++;
        ReturnString = testchar;
        tokenFound = true;
    }
    if ((Operator.indexOf(testchar) >= 0) && (!tokenFound)) {
        tokenpos++;
        ReturnString = testchar;
        tokenFound = true;
    }
    if ((Paren.indexOf(testchar) >= 0) && (!tokenFound)) {
        tokenpos++;
        ReturnString = testchar;
        tokenFound = true;
    }
    if ((testchar.equals("~")) && (!tokenFound)) {
        tokenpos++;
        ReturnString = testchar;
        tokenFound = true;
    }
    if (tokenFound)
        return ReturnString.trim().toLowerCase();
    else
        throw new SyntaxErrorException();
}
