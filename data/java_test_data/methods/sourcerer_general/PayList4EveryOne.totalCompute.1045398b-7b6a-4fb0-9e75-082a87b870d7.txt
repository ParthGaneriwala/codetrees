private void totalCompute(List items, List<Pay> models) {
    items.add(new Item4__());
    items.add(new Item4__());
    double basePay = 0;
    double baseBakshish = 0;
    double foodBakshish = 0;
    double absenceFromDuty = 0;
    double parkFee = 0;
    double fiveItemInsurances = 0;
    double personTax = 0;
    double shouldPay = 0;
    double realPay = 0;
    for (Pay pay : models) {
        basePay = Math4Double.add(basePay, pay.getBasePay());
        baseBakshish = Math4Double.add(baseBakshish, pay.getBaseBakshish());
        foodBakshish = Math4Double.add(foodBakshish, pay.getFoodBakshish());
        absenceFromDuty = Math4Double.add(absenceFromDuty, pay.getAbsenceFromDuty());
        parkFee = Math4Double.add(parkFee, pay.getParkFee());
        fiveItemInsurances = Math4Double.add(fiveItemInsurances, pay.getFiveItemInsurances());
        personTax = Math4Double.add(personTax, pay.getPersonTax());
    }
    shouldPay = Math4Double.add(shouldPay, basePay);
    shouldPay = Math4Double.add(shouldPay, baseBakshish);
    shouldPay = Math4Double.add(shouldPay, foodBakshish);
    realPay = Math4Double.add(shouldPay, realPay);
    realPay = Math4Double.sub(realPay, absenceFromDuty);
    realPay = Math4Double.sub(realPay, parkFee);
    realPay = Math4Double.sub(realPay, fiveItemInsurances);
    realPay = Math4Double.sub(realPay, personTax);
    DecimalFormat df = new DecimalFormat("0.00");
    items.add(new SmartItem(df.format(basePay)));
    items.add(new SmartItem(df.format(baseBakshish)));
    items.add(new SmartItem(df.format(foodBakshish)));
    items.add(new SmartItem(df.format(shouldPay)));
    items.add(new SmartItem(df.format(absenceFromDuty)));
    items.add(new SmartItem(df.format(parkFee)));
    items.add(new SmartItem(df.format(fiveItemInsurances)));
    items.add(new SmartItem(df.format(personTax)));
    items.add(new SmartItem(df.format(realPay)));
}
