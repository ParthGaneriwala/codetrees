void rayCast(BBRayCastOutput output, final BBRayCastInput input) {
    float tmin = -FLT_MAX;
    float tmax = FLT_MAX;
    output.hit = false;
    BBVec2 p = input.p1;
    BBVec2 d = sub(input.p2, input.p1);
    BBVec2 absD = abs(d);
    BBVec2 normal = new BBVec2();
    for (int i = 0; i < 2; ++i) {
        if (absD.idx(i) < FLT_EPSILON) {
            // Parallel.
            if (p.idx(i) < lowerBound.idx(i) || upperBound.idx(i) < p.idx(i)) {
                return;
            }
        } else {
            float inv_d = 1.0f / d.idx(i);
            float t1 = (lowerBound.idx(i) - p.idx(i)) * inv_d;
            float t2 = (upperBound.idx(i) - p.idx(i)) * inv_d;
            // Sign of the normal vector.
            float s = -1.0f;
            if (t1 > t2) {
                swap(t1, t2);
                s = 1.0f;
            }
            // Push the min up
            if (t1 > tmin) {
                normal.setZero();
                normal.idx(i, s);
                tmin = t1;
            }
            // Pull the max down
            tmax = min(tmax, t2);
            if (tmin > tmax) {
                return;
            }
        }
    }
    // Does the ray intersect beyond the max fraction?
    if (tmin < 0.0f || input.maxFraction < tmin) {
        return;
    }
    // Intersection.
    output.fraction = tmin;
    output.normal = normal;
    output.hit = true;
}
