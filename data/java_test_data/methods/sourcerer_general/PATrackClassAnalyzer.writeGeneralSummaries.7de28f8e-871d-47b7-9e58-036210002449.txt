private static void writeGeneralSummaries() {
    // write out summaries for %correct by k
    // write out summaries for certainty by k
    double[][] DWGAMCorrOpByK = new double[7][300];
    double[][] DWGAMCorrClByK = new double[5][300];
    double[][] DWGAMCertOpByK = new double[7][300];
    double[][] DWGAMCertClByK = new double[5][300];
    double[][] simpleGAMCorrOpByK = new double[7][300];
    double[][] simpleGAMCorrClByK = new double[5][300];
    double[][] simpleGAMCertOpByK = new double[7][300];
    double[][] simpleGAMCertClByK = new double[5][300];
    // double[][] DWFZCorrOpByK = new double[7][300];
    // double[][] DWFZCorrClByK = new double[5][300];
    // double[][] DWFZCertOpByK = new double[7][300];
    // double[][] DWFZCertClByK = new double[5][300];
    // 
    // double[][] simpleFZCorrOpByK = new double[7][300];
    // double[][] simpleFZCorrClByK = new double[5][300];
    // double[][] simpleFZCertOpByK = new double[7][300];
    // double[][] simpleFZCertClByK = new double[5][300];
    // 
    // double[][] DWBaseCorrOpByK = new double[7][300];
    // double[][] DWBaseCorrClByK = new double[5][300];
    // double[][] DWBaseCertOpByK = new double[7][300];
    // double[][] DWBaseCertClByK = new double[5][300];
    // 
    // double[][] simpleBaseCorrOpByK = new double[7][300];
    // double[][] simpleBaseCorrClByK = new double[6][300];
    // double[][] simpleBaseCertOpByK = new double[7][300];
    // double[][] simpleBaseCertClByK = new double[6][300];
    File DWGAMpctCorrectOperatorByK = new File("D:/synthLandscan/randomStarts/momentData/summaries/DWGAMPctCorrectOperatorByK.csv");
    File DWGAMpctCorrectClassByK = new File("D:/synthLandscan/randomStarts/momentData/summaries/DWGAMpctCorrectClassByK.csv");
    File DWGAMcertaintyOperatorByK = new File("D:/synthLandscan/randomStarts/momentData/summaries/DWGAMcertaintyOperatorByK.csv");
    File DWGAMcertaintyClassByK = new File("D:/synthLandscan/randomStarts/momentData/summaries/DWGAMcertaintyClassByK.csv");
    File simpleGAMpctCorrectOperatorByK = new File("D:/synthLandscan/randomStarts/momentData/summaries/simpleGAMpctCorrectOperatorByK.csv");
    File simpleGAMpctCorrectClassByK = new File("D:/synthLandscan/randomStarts/momentData/summaries/simpleGAMpctCorrectClassByK.csv");
    File simpleGAMcertaintyOperatorByK = new File("D:/synthLandscan/randomStarts/momentData/summaries/simpleGAMcertaintyOperatorByK.csv");
    File simpleGAMcertaintyClassByK = new File("D:/synthLandscan/randomStarts/momentData/summaries/simpleGAMcertaintyClassByK.csv");
    // File simpleBasecertaintyClassByK = new File("D:/synthLandscan/momentData/fiveClassPACorrected/summaries/simpleBasecertaintyClassByK.csv");
    try {
        FileWriter DWGAMPctCorrectOperatorByKWriter = new FileWriter(DWGAMpctCorrectOperatorByK);
        FileWriter DWGAMPctCorrectClassByKWriter = new FileWriter(DWGAMpctCorrectClassByK);
        FileWriter DWGAMCertaintyOperatorByKWriter = new FileWriter(DWGAMcertaintyOperatorByK);
        FileWriter DWGAMCertaintyClassByKWriter = new FileWriter(DWGAMcertaintyClassByK);
        FileWriter simpleGAMPctCorrectOperatorByKWriter = new FileWriter(simpleGAMpctCorrectOperatorByK);
        FileWriter simpleGAMPctCorrectClassByKWriter = new FileWriter(simpleGAMpctCorrectClassByK);
        FileWriter simpleGAMCertaintyOperatorByKWriter = new FileWriter(simpleGAMcertaintyOperatorByK);
        FileWriter simpleGAMCertaintyClassByKWriter = new FileWriter(simpleGAMcertaintyClassByK);
        for (int op = 0; op < 7; op++) {
            for (int k2 = 0; k2 < 300; k2++) {
                for (int kl = 0; kl < 5; kl++) {
                    // div by 200 instead of div by 40 because we want the percent across all classes, and this is equivalent to adding up all class-specific percent corrects and dividing by 5.
                    DWGAMCorrOpByK[op][k2] += DWGAMClasses[k2][op][kl][kl] / 1110d;
                    // div by 5 again to average over all classes
                    DWGAMCertOpByK[op][k2] += DWGAMMasses[k2][op][kl][kl] / 5;
                    // div by 280 instead of by 40 to average over all operators
                    DWGAMCorrClByK[kl][k2] += DWGAMClasses[k2][op][kl][kl] / 1554d;
                    // div by 7 to average over all operators.
                    DWGAMCertClByK[kl][k2] += DWGAMMasses[k2][op][kl][kl] / 7;
                    // div by 200 instead of div by 40 because we want the percent across all classes, and this is equivalent to adding up all class-specific percent corrects and dividing by 5.
                    simpleGAMCorrOpByK[op][k2] += simpleGAMClasses[k2][op][kl][kl] / 1110d;
                    // div by 5 again to average over all classes
                    simpleGAMCertOpByK[op][k2] += simpleGAMMasses[k2][op][kl][kl] / 5;
                    // div by 280 instead of by 40 to average over all operators
                    simpleGAMCorrClByK[kl][k2] += simpleGAMClasses[k2][op][kl][kl] / 1554d;
                    simpleGAMCertClByK[kl][k2] += simpleGAMMasses[k2][op][kl][kl] / 7;
                // DWFZCorrOpByK[op][k2] += DWFZClasses[k2][op][kl][kl]/200d;  //div by 200 instead of div by 40 because we want the percent across all classes, and this is equivalent to adding up all class-specific percent corrects and dividing by 5.
                // DWFZCertOpByK[op][k2] += DWFZMasses[k2][op][kl][kl]/5;     //div by 5 again to average over all classes
                // DWFZCorrClByK[kl][k2] += DWFZClasses[k2][op][kl][kl]/280d;  //div by 280 instead of by 40 to average over all operators
                // DWFZCertClByK[kl][k2] += DWFZMasses[k2][op][kl][kl]/7;
                // 
                // simpleFZCorrOpByK[op][k2] += simpleFZClasses[k2][op][kl][kl]/200d;  //div by 200 instead of div by 40 because we want the percent across all classes, and this is equivalent to adding up all class-specific percent corrects and dividing by 5.
                // simpleFZCertOpByK[op][k2] += simpleFZMasses[k2][op][kl][kl]/5;     //div by 5 again to average over all classes
                // simpleFZCorrClByK[kl][k2] += simpleFZClasses[k2][op][kl][kl]/280d;  //div by 280 instead of by 40 to average over all operators
                // simpleFZCertClByK[kl][k2] += simpleFZMasses[k2][op][kl][kl]/7;
                // 
                // DWBaseCorrOpByK[op][k2] += DWBaseClasses[k2][op][kl][kl]/200d;  //div by 200 instead of div by 40 because we want the percent across all classes, and this is equivalent to adding up all class-specific percent corrects and dividing by 5.
                // DWBaseCertOpByK[op][k2] += DWBaseMasses[k2][op][kl][kl]/5;     //div by 5 again to average over all classes
                // DWBaseCorrClByK[kl][k2] += DWBaseClasses[k2][op][kl][kl]/280d;  //div by 280 instead of by 40 to average over all operators
                // DWBaseCertClByK[kl][k2] += DWBaseMasses[k2][op][kl][kl]/7;
                // 
                // simpleBaseCorrOpByK[op][k2] += simpleBaseClasses[k2][op][kl][kl]/200d;  //div by 200 instead of div by 40 because we want the percent across all classes, and this is equivalent to adding up all class-specific percent corrects and dividing by 5.
                // simpleBaseCertOpByK[op][k2] += simpleBaseMasses[k2][op][kl][kl]/5;     //div by 5 again to average over all classes
                // simpleBaseCorrClByK[kl][k2] += simpleBaseClasses[k2][op][kl][kl]/280d;  //div by 280 instead of by 40 to average over all operators
                // simpleBaseCertClByK[kl][k2] += simpleBaseMasses[k2][op][kl][kl]/7;
                }
            }
        }
        for (int k2 = 2; k2 < 302; k2++) {
            DWGAMPctCorrectOperatorByKWriter.write("," + k2);
            DWGAMPctCorrectClassByKWriter.write("," + k2);
            DWGAMCertaintyOperatorByKWriter.write("," + k2);
            DWGAMCertaintyClassByKWriter.write("," + k2);
            simpleGAMPctCorrectOperatorByKWriter.write("," + k2);
            simpleGAMPctCorrectClassByKWriter.write("," + k2);
            simpleGAMCertaintyOperatorByKWriter.write("," + k2);
            simpleGAMCertaintyClassByKWriter.write("," + k2);
        // DWFZPctCorrectOperatorByKWriter.write("," + k2);
        // DWFZPctCorrectClassByKWriter.write("," + k2);
        // DWFZCertaintyOperatorByKWriter.write("," + k2);
        // DWFZCertaintyClassByKWriter.write("," + k2);
        // 
        // simpleFZPctCorrectOperatorByKWriter.write("," + k2);
        // simpleFZPctCorrectClassByKWriter.write("," + k2);
        // simpleFZCertaintyOperatorByKWriter.write("," + k2);
        // simpleFZCertaintyClassByKWriter.write("," + k2);
        // 
        // DWBasePctCorrectOperatorByKWriter.write("," + k2);
        // DWBasePctCorrectClassByKWriter.write("," + k2);
        // DWBaseCertaintyOperatorByKWriter.write("," + k2);
        // DWBaseCertaintyClassByKWriter.write("," + k2);
        // 
        // simpleBasePctCorrectOperatorByKWriter.write("," + k2);
        // simpleBasePctCorrectClassByKWriter.write("," + k2);
        // simpleBaseCertaintyOperatorByKWriter.write("," + k2);
        // simpleBaseCertaintyClassByKWriter.write("," + k2);
        }
        DWGAMPctCorrectOperatorByKWriter.write('\n');
        DWGAMPctCorrectClassByKWriter.write('\n');
        DWGAMCertaintyOperatorByKWriter.write('\n');
        DWGAMCertaintyClassByKWriter.write('\n');
        simpleGAMPctCorrectOperatorByKWriter.write('\n');
        simpleGAMPctCorrectClassByKWriter.write('\n');
        simpleGAMCertaintyOperatorByKWriter.write('\n');
        simpleGAMCertaintyClassByKWriter.write('\n');
        for (int index = 0; index < 5; index++) {
            DWGAMPctCorrectOperatorByKWriter.write(operators[index] + ",");
            DWGAMPctCorrectClassByKWriter.write(classNames[index + 1] + ",");
            DWGAMCertaintyOperatorByKWriter.write(operators[index] + ",");
            DWGAMCertaintyClassByKWriter.write(classNames[index + 1] + ",");
            simpleGAMPctCorrectOperatorByKWriter.write(operators[index] + ",");
            simpleGAMPctCorrectClassByKWriter.write(classNames[index + 1] + ",");
            simpleGAMCertaintyOperatorByKWriter.write(operators[index] + ",");
            simpleGAMCertaintyClassByKWriter.write(classNames[index + 1] + ",");
            for (int k2 = 0; k2 < 300; k2++) {
                DWGAMPctCorrectOperatorByKWriter.write(DWGAMCorrOpByK[index][k2] + ",");
                DWGAMPctCorrectClassByKWriter.write(DWGAMCorrClByK[index][k2] + ",");
                DWGAMCertaintyOperatorByKWriter.write(DWGAMCertOpByK[index][k2] + ",");
                DWGAMCertaintyClassByKWriter.write(DWGAMCertClByK[index][k2] + ",");
                simpleGAMPctCorrectOperatorByKWriter.write(simpleGAMCorrOpByK[index][k2] + ",");
                simpleGAMPctCorrectClassByKWriter.write(simpleGAMCorrClByK[index][k2] + ",");
                simpleGAMCertaintyOperatorByKWriter.write(simpleGAMCertOpByK[index][k2] + ",");
                simpleGAMCertaintyClassByKWriter.write(simpleGAMCertClByK[index][k2] + ",");
            // DWFZPctCorrectOperatorByKWriter.write(DWFZCorrOpByK[index][k2] + ",");
            // DWFZPctCorrectClassByKWriter.write(DWFZCorrClByK[index][k2] + ",");
            // DWFZCertaintyOperatorByKWriter.write(DWFZCertOpByK[index][k2] + ",");
            // DWFZCertaintyClassByKWriter.write(DWFZCertClByK[index][k2] + ",");
            // 
            // simpleFZPctCorrectOperatorByKWriter.write(simpleFZCorrOpByK[index][k2] + ",");
            // simpleFZPctCorrectClassByKWriter.write(simpleFZCorrClByK[index][k2] + ",");
            // simpleFZCertaintyOperatorByKWriter.write(simpleFZCertOpByK[index][k2] + ",");
            // simpleFZCertaintyClassByKWriter.write(simpleFZCertClByK[index][k2] + ",");
            // 
            // DWBasePctCorrectOperatorByKWriter.write(DWBaseCorrOpByK[index][k2] + ",");
            // DWBasePctCorrectClassByKWriter.write(DWBaseCorrClByK[index][k2] + ",");
            // DWBaseCertaintyOperatorByKWriter.write(DWBaseCertOpByK[index][k2] + ",");
            // DWBaseCertaintyClassByKWriter.write(DWBaseCertClByK[index][k2] + ",");
            // 
            // simpleBasePctCorrectOperatorByKWriter.write(simpleBaseCorrOpByK[index][k2] + ",");
            // simpleBasePctCorrectClassByKWriter.write(simpleBaseCorrClByK[index][k2] + ",");
            // simpleBaseCertaintyOperatorByKWriter.write(simpleBaseCertOpByK[index][k2] + ",");
            // simpleBaseCertaintyClassByKWriter.write(simpleBaseCertClByK[index][k2] + ",");
            }
            DWGAMPctCorrectOperatorByKWriter.write('\n');
            DWGAMPctCorrectClassByKWriter.write('\n');
            DWGAMCertaintyOperatorByKWriter.write('\n');
            DWGAMCertaintyClassByKWriter.write('\n');
            simpleGAMPctCorrectOperatorByKWriter.write('\n');
            simpleGAMPctCorrectClassByKWriter.write('\n');
            simpleGAMCertaintyOperatorByKWriter.write('\n');
            simpleGAMCertaintyClassByKWriter.write('\n');
            // DWFZPctCorrectOperatorByKWriter.write('\n');
            // DWFZPctCorrectClassByKWriter.write('\n');
            // DWFZCertaintyOperatorByKWriter.write('\n');
            // DWFZCertaintyClassByKWriter.write('\n');
            // 
            // simpleFZPctCorrectOperatorByKWriter.write('\n');
            // simpleFZPctCorrectClassByKWriter.write('\n');
            // simpleFZCertaintyOperatorByKWriter.write('\n');
            // simpleFZCertaintyClassByKWriter.write('\n');
            // 
            // DWBasePctCorrectOperatorByKWriter.write('\n');
            // DWBasePctCorrectClassByKWriter.write('\n');
            // DWBaseCertaintyOperatorByKWriter.write('\n');
            // DWBaseCertaintyClassByKWriter.write('\n');
            // 
            // simpleBasePctCorrectOperatorByKWriter.write('\n');
            // simpleBasePctCorrectClassByKWriter.write('\n');
            // simpleBaseCertaintyOperatorByKWriter.write('\n');
            // simpleBaseCertaintyClassByKWriter.write('\n');
            System.out.println("finished writing row " + index);
        }
        for (int blob = 5; blob < 7; blob++) {
            DWGAMPctCorrectOperatorByKWriter.write(operators[blob] + ",");
            DWGAMCertaintyOperatorByKWriter.write(operators[blob] + ",");
            simpleGAMPctCorrectOperatorByKWriter.write(operators[blob] + ",");
            simpleGAMCertaintyOperatorByKWriter.write(operators[blob] + ",");
            for (int k2 = 0; k2 < 300; k2++) {
                DWGAMPctCorrectOperatorByKWriter.write(DWGAMCorrOpByK[blob][k2] + ",");
                DWGAMCertaintyOperatorByKWriter.write(DWGAMCertOpByK[blob][k2] + ",");
                simpleGAMPctCorrectOperatorByKWriter.write(simpleGAMCorrOpByK[blob][k2] + ",");
                simpleGAMCertaintyOperatorByKWriter.write(simpleGAMCertOpByK[blob][k2] + ",");
            // DWFZPctCorrectOperatorByKWriter.write(DWFZCorrOpByK[blob][k2] + ",");
            // DWFZCertaintyOperatorByKWriter.write(DWFZCertOpByK[blob][k2] + ",");
            // 
            // simpleFZPctCorrectOperatorByKWriter.write(simpleFZCorrOpByK[blob][k2] + ",");
            // simpleFZCertaintyOperatorByKWriter.write(simpleFZCertOpByK[blob][k2] + ",");
            // 
            // DWBasePctCorrectOperatorByKWriter.write(DWBaseCorrOpByK[blob][k2] + ",");
            // DWBaseCertaintyOperatorByKWriter.write(DWBaseCertOpByK[blob][k2] + ",");
            // 
            // simpleBasePctCorrectOperatorByKWriter.write(simpleBaseCorrOpByK[blob][k2] + ",");
            // simpleBaseCertaintyOperatorByKWriter.write(simpleBaseCertOpByK[blob][k2] + ",");
            }
            DWGAMPctCorrectOperatorByKWriter.write('\n');
            DWGAMCertaintyOperatorByKWriter.write('\n');
            simpleGAMPctCorrectOperatorByKWriter.write('\n');
            simpleGAMCertaintyOperatorByKWriter.write('\n');
            // DWFZPctCorrectOperatorByKWriter.write('\n');
            // DWFZCertaintyOperatorByKWriter.write('\n');
            // 
            // simpleFZPctCorrectOperatorByKWriter.write('\n');
            // simpleFZCertaintyOperatorByKWriter.write('\n');
            // 
            // DWBasePctCorrectOperatorByKWriter.write('\n');
            // DWBaseCertaintyOperatorByKWriter.write('\n');
            // 
            // simpleBasePctCorrectOperatorByKWriter.write('\n');
            // simpleBaseCertaintyOperatorByKWriter.write('\n');
            System.out.println("finished writing row " + blob);
        }
        DWGAMPctCorrectOperatorByKWriter.close();
        DWGAMPctCorrectClassByKWriter.close();
        DWGAMCertaintyOperatorByKWriter.close();
        DWGAMCertaintyClassByKWriter.close();
        simpleGAMPctCorrectOperatorByKWriter.close();
        simpleGAMPctCorrectClassByKWriter.close();
        simpleGAMCertaintyOperatorByKWriter.close();
        simpleGAMCertaintyClassByKWriter.close();
    // DWFZPctCorrectOperatorByKWriter.close();
    // DWFZPctCorrectClassByKWriter.close();
    // DWFZCertaintyOperatorByKWriter.close();
    // DWFZCertaintyClassByKWriter.close();
    // 
    // simpleFZPctCorrectOperatorByKWriter.close();
    // simpleFZPctCorrectClassByKWriter.close();
    // simpleFZCertaintyOperatorByKWriter.close();
    // simpleFZCertaintyClassByKWriter.close();
    // 
    // DWBasePctCorrectOperatorByKWriter.close();
    // DWBasePctCorrectClassByKWriter.close();
    // DWBaseCertaintyOperatorByKWriter.close();
    // DWBaseCertaintyClassByKWriter.close();
    // 
    // simpleBasePctCorrectOperatorByKWriter.close();
    // simpleBasePctCorrectClassByKWriter.close();
    // simpleBaseCertaintyOperatorByKWriter.close();
    // simpleBaseCertaintyClassByKWriter.close();
    } catch (IOException ioe) {
        System.out.println("ioexception: " + ioe.getMessage());
    }
}
