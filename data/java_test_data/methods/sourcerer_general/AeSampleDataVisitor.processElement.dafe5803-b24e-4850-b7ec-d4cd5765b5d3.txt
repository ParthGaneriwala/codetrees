private void processElement(AeBaseElement aElement) {
    if (aElement.getMinOccurs() == 0 && (!getPreferences().isCreateOptionalElements() || !getPreferences().isCreateOptionalElement(aElement.getName())))
        return;
    pushElement(aElement);
    try {
        if (aElement.isNillable() && !getPreferences().isGenerateNillableContent()) {
            handleNillable(mCurrent);
        } else {
            if (aElement instanceof AeComplexElement) {
                AeComplexElement complexElement = (AeComplexElement) aElement;
                // add the xsi:type attribute if required
                if (complexElement.getXsiType() != null) {
                    String value = getEncodedQName(complexElement.getXsiType());
                    // $NON-NLS-1$
                    addAttribute(new QName(IAeConstants.W3C_XML_SCHEMA_INSTANCE, "type"), value);
                }
                // visit attributes (regular and wildcard) defined by this element.
                for (Iterator itr = complexElement.getAttributes().iterator(); itr.hasNext(); ) {
                    AeBaseAttribute attrib = (AeBaseAttribute) itr.next();
                    attrib.accept(this);
                }
                if (complexElement.isMixed()) {
                    Text text = getDocument().createTextNode(getPreferences().getMixedContent(aElement.getName()));
                    mCurrent.appendChild(text);
                } else if (complexElement.isSimpleContentType()) {
                    String sampleData = getPreferences().getElementData(complexElement.getName(), complexElement.getDataType());
                    Text text = getDocument().createTextNode(sampleData);
                    mCurrent.appendChild(text);
                }
            } else if (aElement instanceof AeSimpleElement) {
                AeSimpleElement simpleElem = (AeSimpleElement) aElement;
                String sampleData = null;
                if (!getPreferences().isGenerateElementData()) {
                    // $NON-NLS-1$
                    sampleData = "";
                } else {
                    if (simpleElem.getDefaultValue() != null)
                        sampleData = simpleElem.getDefaultValue();
                    else if (simpleElem.getFixedValue() != null)
                        sampleData = simpleElem.getFixedValue();
                    else if (!simpleElem.getEnumRestrictions().isEmpty())
                        sampleData = getPreferences().selectElementValue(simpleElem.getName(), simpleElem.getEnumRestrictions());
                    else
                        sampleData = getPreferences().getElementData(simpleElem.getName(), simpleElem.getDataType());
                    Text text = getDocument().createTextNode(sampleData);
                    mCurrent.appendChild(text);
                }
            } else if (aElement instanceof AeAnyTypeElement) {
                AeAnyTypeElement anyTypeElem = (AeAnyTypeElement) aElement;
                String sampleData = null;
                if (!getPreferences().isGenerateElementData()) {
                    // $NON-NLS-1$
                    sampleData = "";
                } else {
                    // $NON-NLS-1$
                    sampleData = getPreferences().getElementData(anyTypeElem.getName(), new QName(IAeConstants.W3C_XML_SCHEMA, "anyType"));
                }
                Text text = getDocument().createTextNode(sampleData);
                mCurrent.appendChild(text);
            }
            // visit the children of this element.
            for (Iterator it = aElement.getChildren().iterator(); it.hasNext(); ) {
                AeStructure struct = (AeStructure) it.next();
                struct.accept(this);
            }
        }
    } finally {
        pop();
    }
}
