void init(Result r, HsqlProperties props) throws SQLException {
    jdbcColumnMetaData cmd;
    int type;
    Result.ResultMetaData rmd;
    if (r == null) {
        throw Util.sqlException(Trace.GENERAL_ERROR, Trace.JDBC_NO_RESULT_SET, null);
    }
    if (!r.isData()) {
        // implied: columnCount = 0;
        return;
    }
    columnCount = r.getColumnCount();
    // fredt -  props is null for internal connections, so always use the default behaviour in this case
    useColumnName = props == null ? true : props.isPropertyTrue("get_column_name");
    columnMetaData = new jdbcColumnMetaData[columnCount];
    rmd = r.metaData;
    for (int i = 0; i < columnCount; i++) {
        cmd = new jdbcColumnMetaData();
        columnMetaData[i] = cmd;
        // Typically, these null checks are not needed, but as
        // above, it is not _guaranteed_ that these values
        // will be non-null.   So, it is better to do the work
        // here than have to perform checks and conversions later.
        cmd.catalogName = rmd.catalogNames[i] == null ? "" : rmd.catalogNames[i];
        cmd.schemaName = rmd.schemaNames[i] == null ? "" : rmd.schemaNames[i];
        cmd.tableName = rmd.tableNames[i] == null ? "" : rmd.tableNames[i];
        cmd.columnName = rmd.colNames[i] == null ? "" : rmd.colNames[i];
        cmd.columnLabel = rmd.colLabels[i] == null ? "" : rmd.colLabels[i];
        cmd.columnType = rmd.colTypes[i];
        cmd.columnTypeName = Types.getTypeString(cmd.columnType);
        cmd.isWritable = rmd.isWritable[i];
        cmd.isReadOnly = !cmd.isWritable;
        // default: cmd.isDefinitelyWritable = false;
        cmd.isAutoIncrement = rmd.isIdentity[i];
        cmd.isNullable = rmd.colNullable[i];
        type = cmd.columnType;
        cmd.columnClassName = rmd.classNames[i];
        if (cmd.columnClassName == null || cmd.columnClassName.length() == 0) {
            cmd.columnClassName = Types.getColStClsName(type);
        }
        // the majority of cases.
        if (Types.acceptsPrecisionCreateParam(type)) {
            if (rmd.colSizes[i] == 0) {
                cmd.columnDisplaySize = Types.getMaxDisplaySize(type);
            } else {
                cmd.columnDisplaySize = rmd.colSizes[i];
                if (Types.acceptsScaleCreateParam(type)) {
                    if (rmd.colScales[i] != 0) {
                        cmd.columnDisplaySize += (1 + rmd.colScales[i]);
                    }
                }
            }
        } else {
            cmd.columnDisplaySize = Types.getMaxDisplaySize(type);
        }
        if (Types.isNumberType(type) && Types.acceptsPrecisionCreateParam(type)) {
            cmd.precision = rmd.colSizes[i];
            if (cmd.precision == 0) {
                cmd.precision = Types.getPrecision(type);
            }
        } else {
            cmd.precision = Types.getPrecision(type);
        }
        // embedded instance at design time, not via a network connection.
        if (Types.acceptsScaleCreateParam(type)) {
            cmd.scale = rmd.colScales[i];
        }
        Boolean iua = Types.isUnsignedAttribute(type);
        cmd.isSigned = iua != null && !iua.booleanValue();
        Boolean ics = Types.isCaseSensitive(type);
        cmd.isCaseSensitive = ics != null && ics.booleanValue();
        cmd.isSearchable = Types.isSearchable(type);
    }
}
