@Override
public void doClustering(Dataset dataset) {
    if (this.limit == null) {
        this.limit = 2;
    }
    List<Cluster[]> clusterpairs;
    for (int i = 0; i < dataset.size(); i++) {
        dataset.get(i).setCalculatedClusternumber(i);
    }
    // we merge clusters until there is only one left
    for (int i = 0; i < dataset.size() && ((dataset.size() - i) > this.limit); i++) {
        LinkedHashMap<Integer, Cluster> clustermap;
        clustermap = new LinkedHashMap<Integer, Cluster>();
        clustermap.putAll(dataset.getClustermap());
        ArrayList<Integer> clusterKeys = new ArrayList<Integer>(clustermap.keySet());
        TreeMap<Float, List<Cluster[]>> clusterDist = new TreeMap<Float, List<Cluster[]>>();
        for (int j = 0; j < clusterKeys.size(); j++) {
            Cluster cluster1 = clustermap.get(clusterKeys.get(j));
            for (int k = j + 1; k < clusterKeys.size(); k++) {
                Cluster cluster2 = clustermap.get(clusterKeys.get(k));
                Cluster[] clusterpair = new Cluster[2];
                clusterpair[0] = cluster1;
                clusterpair[1] = cluster2;
                // calculate distance between 2 clusters
                float dist = this.linkage.calculateClusterdistance(cluster1, cluster2);
                clusterpairs = clusterDist.get(dist);
                // add this pair to the list of clusterdistances
                if (clusterpairs == null) {
                    clusterpairs = new LinkedList<Cluster[]>();
                    clusterpairs.add(clusterpair);
                    // add the
                    clusterDist.put(dist, clusterpairs);
                // clusterpair
                }
            }
        }
        if (clustermap.size() > 1) {
            // there is only one left do nothing  else merge
            // the two clusters with the smallest distance
            List<Cluster[]> closestClusters = clusterDist.firstEntry().getValue();
            // randomly pick the first pair with the min dist
            Cluster[] clustersToMerge = closestClusters.get(0);
            // merge clusters
            // TODO special action when distance is equal for more than one pair?
            mergeClusters(clustersToMerge[0], clustersToMerge[1]);
        }
        if (output == true) {
            Map<String, String> params = new HashMap<String, String>();
            ValidationWriter.writeToCSV("Hierarchical.csv", Algorithms.Hierarchical, dataset, params);
        }
    }
}
