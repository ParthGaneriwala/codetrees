public void enterEntry(HiScoreData entry, int maxEntries) {
    int waittime = 1;
    while (EDITING && waittime < 16) {
        try {
            Thread.sleep(waittime * 1000);
        } catch (InterruptedException ignore) {
        }
        waittime *= 2;
    }
    if (EDITING) {
        IOError(new IOException("Couldn't edit gamefile: file busy."));
        return;
    }
    EDITING = true;
    if (VERBOSE)
        log.println("Editing " + entry.getHandle());
    BufferedReader in = null;
    PrintWriter out = null;
    try {
        out = new PrintWriter(new BufferedWriter(new FileWriter(TEMPFILE)));
        in = new BufferedReader(new FileReader(DATAFILE));
        int found = 0;
        int numLines = FileHelper.countLines(DATAFILE);
        String line = null;
        for (int i = 0; i < numLines; i++) {
            line = in.readLine();
            HiScoreData D = new HiScoreData(new StringTokenizer(line));
            if (D.getHandle().equalsIgnoreCase(entry.getHandle()) && found++ >= maxEntries) {
                out.println(entry);
            } else
                out.println(line);
        }
        if (found < maxEntries)
            // add new entry
            out.println(entry);
        in.close();
        out.close();
        File TempFile = new File(TEMPFILE), DataFile = new File(DATAFILE);
        if (!DataFile.delete() || !TempFile.renameTo(DataFile)) {
            IOError(new IOException("Augh, error renaming file: " + DATAFILE));
        } else {
            if (VERBOSE)
                log.println("Renamed: " + DATAFILE);
        }
    } catch (IOException e) {
        IOError(e);
    }
    EDITING = false;
}
