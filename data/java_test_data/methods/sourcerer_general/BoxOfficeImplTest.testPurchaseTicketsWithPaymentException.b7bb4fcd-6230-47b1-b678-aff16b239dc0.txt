public void testPurchaseTicketsWithPaymentException() throws Exception {
    // creating the data objects
    Seat[] seats = new Seat[0];
    Booking booking = new Booking();
    Reservation reservation = new Reservation(seats, booking);
    Address address = new Address("country", "city", "street", "123");
    CreditCardDetails cardDetails = new CreditCardDetails("visa", "john", "1234-1234-1234-1234", new Date());
    PurchaseRequest request = new PurchaseRequest();
    request.setReservation(reservation);
    request.setEmail("email");
    request.setDeliveryAddress(address);
    request.setBillingAddress(address);
    request.setCollect(true);
    request.setCreditCardDetails(cardDetails);
    // setting the expectations
    paymentProcessorMock.validate(request);
    paymentProcessorMock.process(request);
    paymentProcessorMockControl.setThrowable(new PaymentException("badCredit"));
    daoMock.checkAvailabilityForBooking(booking);
    daoMockControl.setReturnValue(true);
    daoMock.savePurchaseForBooking(booking);
    paymentProcessorMockControl.replay();
    daoMockControl.replay();
    // executing the tested method
    try {
        boxOffice.purchaseTickets(request);
        fail("A PaymentException should be thrown by the payment processor");
    } catch (PaymentException pe) {
    // expected behavior.
    }
    paymentProcessorMockControl.verify();
    daoMockControl.verify();
}
