private static void processAtoFConstraint(JavaType a, GenTypeSolid f, Map tlbConstraints, Map teqConstraints) {
    a = boxType(a);
    if (a.isPrimitive())
        // no constraint
        return;
    if (f instanceof GenTypeTpar) {
        // The constraint T :> A is implied
        GenTypeTpar t = (GenTypeTpar) f;
        Set constraintsSet = (Set) tlbConstraints.get(t.getTparName());
        if (constraintsSet == null) {
            constraintsSet = new HashSet();
            tlbConstraints.put(t.getTparName(), constraintsSet);
        }
        constraintsSet.add(a);
    } else // If F is an array of the form U[], and a is an array of the form V[]...
    if (f.getArrayComponent() != null) {
        if (a.getArrayComponent() != null) {
            if (f.getArrayComponent() instanceof GenTypeSolid) {
                a = a.getArrayComponent();
                f = (GenTypeSolid) f.getArrayComponent();
                processAtoFConstraint(a, f, tlbConstraints, teqConstraints);
            }
        }
    } else // If F is of the form G<...> and A is convertible to the same form...
    {
        GenTypeClass cf = (GenTypeClass) f;
        Map fMap = cf.getMap();
        if (fMap != null && a instanceof GenTypeSolid) {
            GenTypeClass[] asts = ((GenTypeSolid) a).getReferenceSupertypes();
            for (int i = 0; i < asts.length; i++) {
                try {
                    GenTypeClass aMapped = asts[i].mapToSuper(cf.classloaderName());
                    // Superclass relationship is by capture conversion
                    if (!asts[i].classloaderName().equals(cf.classloaderName()))
                        aMapped = (GenTypeClass) captureConversion(aMapped);
                    Map aMap = aMapped.getMap();
                    if (aMap != null) {
                        Iterator j = fMap.keySet().iterator();
                        while (j.hasNext()) {
                            String tpName = (String) j.next();
                            GenTypeParameter fPar = (GenTypeParameter) fMap.get(tpName);
                            GenTypeParameter aPar = (GenTypeParameter) aMap.get(tpName);
                            processAtoFtpar(aPar, fPar, tlbConstraints, teqConstraints);
                        }
                    }
                } catch (BadInheritanceChainException bice) {
                }
            }
        }
    }
    return;
}
