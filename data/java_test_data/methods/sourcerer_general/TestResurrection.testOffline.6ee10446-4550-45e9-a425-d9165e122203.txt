@Test
@DirtiesContext
public void testOffline() throws Exception {
    configureMinimalGame();
    System.out.println("***** testOffline *****");
    beginHttpSession();
    beginHttpRequestAndOpenSessionInViewFilter();
    // Target
    userService.createUser("U1", "test", "test", "");
    userService.login("U1", "test");
    movableService.sendTutorialProgress(TutorialConfig.TYPE.TUTORIAL, "", "", 0, 0);
    SimpleBase targetBase = ((RealityInfo) movableService.getGameInfo()).getBase();
    String targetName = baseService.getBaseName(targetBase);
    Id target = getFirstSynItemId(targetBase, TEST_START_BUILDER_ITEM_ID);
    clearPackets();
    assertWholeItemCount(1);
    endHttpRequestAndOpenSessionInViewFilter();
    endHttpSession();
    beginHttpSession();
    beginHttpRequestAndOpenSessionInViewFilter();
    // Actor
    movableService.sendTutorialProgress(TutorialConfig.TYPE.TUTORIAL, "", "", 0, 0);
    Assert.assertEquals(2, baseService.getBases().size());
    SimpleBase actorBase = ((RealityInfo) movableService.getGameInfo()).getBase();
    Id actorBuilder = getFirstSynItemId(actorBase, TEST_START_BUILDER_ITEM_ID);
    sendBuildCommand(actorBuilder, new Index(100, 100), TEST_FACTORY_ITEM_ID);
    waitForActionServiceDone();
    Id actorFactory = getFirstSynItemId(actorBase, TEST_FACTORY_ITEM_ID);
    sendFactoryCommand(actorFactory, TEST_ATTACK_ITEM_ID);
    waitForActionServiceDone();
    Id actorAttacker = getFirstSynItemId(actorBase, TEST_ATTACK_ITEM_ID);
    clearPackets();
    assertWholeItemCount(4);
    sendAttackCommand(actorAttacker, target);
    waitForActionServiceDone();
    Assert.assertEquals(1, baseService.getBases().size());
    assertWholeItemCount(3);
    Message message = new Message();
    message.setMessage("You defeated U1");
    BaseChangedPacket baseChangedPacket = new BaseChangedPacket();
    baseChangedPacket.setType(BaseChangedPacket.Type.REMOVED);
    baseChangedPacket.setBaseAttributes(new BaseAttributes(targetBase, targetName, false));
    XpBalancePacket xpBalancePacket = new XpBalancePacket();
    xpBalancePacket.setXp(1);
    Thread.sleep(3000);
    assertPackagesIgnoreSyncItemInfoAndClear(message, baseChangedPacket, xpBalancePacket);
    endHttpRequestAndOpenSessionInViewFilter();
    endHttpSession();
    beginHttpSession();
    beginHttpRequestAndOpenSessionInViewFilter();
    userService.login("U1", "test");
    SimpleBase targetBaseNew = ((RealityInfo) movableService.getGameInfo()).getBase();
    Assert.assertFalse(targetBaseNew.equals(targetBase));
    Assert.assertEquals(2, baseService.getBases().size());
    Message message2 = new Message();
    message2.setMessage("You lost your base. A new base was created.");
    assertPackagesIgnoreSyncItemInfoAndClear(message2);
    assertWholeItemCount(4);
    endHttpRequestAndOpenSessionInViewFilter();
    endHttpSession();
}
