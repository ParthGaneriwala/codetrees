public void testRemoveVarChild() {
    Compiler compiler = new Compiler();
    // Test removing the first child.
    Node actual = parse("var foo, goo, hoo");
    Node varNode = actual.getFirstChild();
    Node nameNode = varNode.getFirstChild();
    NodeUtil.removeChild(varNode, nameNode);
    String expected = "var goo, hoo";
    String difference = parse(expected).checkTreeEquals(actual);
    if (difference != null) {
        assertTrue("Nodes do not match:\n" + difference, false);
    }
    // Test removing the second child.
    actual = parse("var foo, goo, hoo");
    varNode = actual.getFirstChild();
    nameNode = varNode.getFirstChild().getNext();
    NodeUtil.removeChild(varNode, nameNode);
    expected = "var foo, hoo";
    difference = parse(expected).checkTreeEquals(actual);
    if (difference != null) {
        assertTrue("Nodes do not match:\n" + difference, false);
    }
    // Test removing the last child of several children.
    actual = parse("var foo, hoo");
    varNode = actual.getFirstChild();
    nameNode = varNode.getFirstChild().getNext();
    NodeUtil.removeChild(varNode, nameNode);
    expected = "var foo";
    difference = parse(expected).checkTreeEquals(actual);
    if (difference != null) {
        assertTrue("Nodes do not match:\n" + difference, false);
    }
    // Test removing the last.
    actual = parse("var hoo");
    varNode = actual.getFirstChild();
    nameNode = varNode.getFirstChild();
    NodeUtil.removeChild(varNode, nameNode);
    expected = "";
    difference = parse(expected).checkTreeEquals(actual);
    if (difference != null) {
        assertTrue("Nodes do not match:\n" + difference, false);
    }
}
