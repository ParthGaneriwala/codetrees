public void testClose() {
    pool.setWaitingTimeout(10000000);
    pool.setMaxConnection(1);
    final Vector ok = new Vector();
    final Vector started = new Vector<Object>();
    final Vector finish = new Vector();
    try {
        Object obj = pool.borrowConnection();
        for (int i = 0; i < 200; i++) {
            new Thread() {

                public void run() {
                    try {
                        started.add(Thread.currentThread());
                        pool.borrowConnection();
                    } catch (WaitingTimeoutException e) {
                        ok.add(Thread.currentThread());
                    } catch (FailedToConnectException e) {
                        // TODO Auto-generated catch block
                        e.printStackTrace();
                    } catch (PoolErrorException e) {
                        // TODO Auto-generated catch block
                        e.printStackTrace();
                    }
                    finish.add(Thread.currentThread());
                }
            }.start();
        }
        while (started.size() != 200) {
            Thread.sleep(100);
        }
        pool.close();
        while (finish.size() != 200) {
            Thread.sleep(100);
        }
        assertEquals(200, ok.size());
        try {
            pool.borrowConnection();
            fail("PoolErrorException should be shown.");
        } catch (PoolErrorException e) {
            assertTrue(e.getCause() instanceof IllegalStateException);
        }
        pool.returnConnection(obj);
        MyConnectionStub conn = ((MyConnectionStub) obj);
        assertTrue(conn.isDestroyed());
        try {
            pool.borrowConnection();
            fail("PoolErrorException should be shown.");
        } catch (PoolErrorException e) {
            assertTrue(e.getCause() instanceof IllegalStateException);
        }
    } catch (Exception e) {
        e.printStackTrace();
        assertNull(e);
    }
}
