public static void writeXmlFile(String path, HashMap FileList) {
    try {
        try {
            File fileObj1 = new File(path.substring(0, path.lastIndexOf("/")));
            if (fileObj1.exists() == false) {
                fileObj1.mkdir();
            }
        // File fileObj2 = new File(path);
        // if(fileObj2.exists())
        // {
        // HashMap temp = new HashMap();
        // temp=ReadXmlFile(path);
        // Object [] objArr= temp.keySet().toArray();
        // if(objArr!=null)
        // {
        // int len = objArr.length;
        // for(int i=0;i<len;i++)
        // FileList.put(objArr[i].toString(),temp.get(objArr[i].toString()));
        // }
        // }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
        Document document = documentBuilder.newDocument();
        Element rootElement = document.createElement("property");
        document.appendChild(rootElement);
        int HashLength = FileList.size();
        Object[] Files = FileList.keySet().toArray();
        for (int i = 0; i < HashLength; i++) {
            Element data = document.createElement("data");
            Element filepath = document.createElement("file-path");
            filepath.appendChild(document.createTextNode(Files[i].toString()));
            Element filestatus = document.createElement("file-status");
            String nodeStatus = FileList.get(Files[i].toString()).toString();
            if (nodeStatus.equals("false")) {
                filestatus.appendChild(document.createTextNode("UnStored"));
            } else {
                filestatus.appendChild(document.createTextNode("Stored"));
            }
            data.appendChild(filepath);
            data.appendChild(filestatus);
            rootElement.appendChild(data);
        }
        TransformerFactory transformerFactory = TransformerFactory.newInstance();
        Transformer transformer = transformerFactory.newTransformer();
        DOMSource source = new DOMSource(document);
        FileOutputStream fout = new FileOutputStream(path);
        StreamResult result = new StreamResult(fout);
        transformer.transform(source, result);
        fout.close();
    } catch (Exception ex) {
        ex.printStackTrace();
    }
}
