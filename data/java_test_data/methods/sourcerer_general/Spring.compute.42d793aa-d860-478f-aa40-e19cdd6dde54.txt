public String compute(DInterferenceGraph G, GraphUpdate update) {
    double tempValue, maxValue, maxDel;
    int maxTimes = 0;
    int mvi, i;
    DNode v;
    Node u;
    rect = update.windowRect();
    Initialize(G);
    // exit here
    for (i = 0; i < G.getNodeCount(); i++) if (connected == false) {
        // on a non-connected graph!");
        return "Error:  This algorithm should not be run on a non-connected graph!";
    }
    while ((Boolean.TRUE).booleanValue()) {
        // if any pair of vertices share the same position, move them away
        CheckPositions(G);
        // determine the next vertex to move according to TempFunction
        maxDel = 0;
        for (v = G.getStartNode(); v != null; v = G.nextNode(v)) {
            delta[enumeration(v.getPositionInGraph())] = Math.sqrt(findDelta2(G, v));
            if (delta[enumeration(v.getPositionInGraph())] > maxDel)
                maxDel = delta[enumeration(v.getPositionInGraph())];
            if (NUM_TIMES_MOVED[enumeration(v.getPositionInGraph())] > maxTimes)
                maxTimes = NUM_TIMES_MOVED[enumeration(v.getPositionInGraph())];
        }
        mv = G.getStartNode();
        mvi = enumeration(mv.getPositionInGraph());
        maxValue = 0;
        for (v = mv; v != null; v = G.nextNode(v)) {
            if (maxTimes != 0)
                tempValue = TempFunction(delta[enumeration(v.getPositionInGraph())] / maxDel, 1 - NUM_TIMES_MOVED[enumeration(v.getPositionInGraph())] / maxTimes);
            else
                // the first time, base the decision only upon the delta
                tempValue = delta[enumeration(v.getPositionInGraph())] / maxDel;
            if (tempValue > maxValue) {
                mv = v;
                mvi = enumeration(mv.getPositionInGraph());
                maxValue = tempValue;
            }
        }
        if (delta[mvi] < epsilon) {
            // System.out.println("Quitting because of epsilon");
            break;
        }
        if (COUNTER > HY_SIZE)
            if (E_HY[COUNTER % HY_SIZE] * HY_PERCENTAGE / 100.0 > (E = findE(G))) {
                // System.out.println("Quitting because of history");
                break;
            }
        // can't quit yet, so put the E in the history array and get ready
        // to
        // find a new position for vertex 'mv'
        E_HY[COUNTER % HY_SIZE] = E;
        numTimesRepositioned = 0;
        while ((delta[mvi] > epsilon) && (numTimesRepositioned < MAX_TIMES_REPOSITIONED)) {
            // MoveToNewPosition(G); // this function simulates elastic
            // collision
            // instead of hitting & sticking
            // MoveToNewPosition1(G); // this function "hits and sticks"
            // this function doesn't care
            MoveToNewPosition2(G);
            delta[mvi] = Math.sqrt(findDelta2(G, mv));
            numTimesRepositioned++;
        }
        // end "inner" while
        NUM_TIMES_MOVED[mvi]++;
    // if redraw is on ???
    // update.update_forInterferenceGraph(false);
    // if the cool stop button (that isn't implemented) has been pressed
    // redraw
    // break;
    }
    // end "outer" while
    return null;
}
