@Test
public void testMarshallingSymmetry() throws Exception {
    MockMagnum magnum = new MockMagnum("");
    TestInterface obj = magnum.connect(TestInterface.class);
    CallbackAndErrorHandler<String> cb = new CallbackAndErrorHandler<String>() {

        @Override
        public void exec(String data) {
        // TODO Auto-generated method stub
        }

        @Override
        public void error(String data, Exception e) {
        // TODO Auto-generated method stub
        }
    };
    obj.foo("asdf", Boolean.TRUE, cb);
    assertEquals(1, magnum.getCommandSets().size());
    CommandSet cs = magnum.getCommandSets().get(0);
    assertEquals(1, cs.size());
    Command c = cs.get(0);
    assertEquals(true, c instanceof InvocationCommand);
    ClientCommandPreprocessors preproc = new ClientCommandPreprocessors();
    InvocationHandler ch = new InvocationHandler();
    MagRequest r = new MagRequest();
    ClientContext ctx = new ClientContext(r);
    preproc.exec(ctx, cs);
    r.setCommandSet(cs);
    String json = (String) r.getData().get(MagRequest.COMMANDSET);
    assertEquals(true, json != null);
    cs = CommandSet.fromJson(json);
    assertEquals(true, cs != null);
    assertEquals(1, cs.size());
    c = cs.get(0);
    MockServerContext sctx = new MockServerContext();
    assertEquals(c.getCode(), InvocationCommand.CODE);
    InvocationHandler sh = new InvocationHandler();
    Class type = sh.getObjectClass(sctx, c);
    assertEquals(TestInterface.class, type);
    Class[] uparamtypes = sh.getTypes(sctx, c, InvocationCommand.PARAM_UNMARSHALLING_TYPES);
    assertEquals(String.class, uparamtypes[0]);
    assertEquals(Boolean.class, uparamtypes[1]);
    assertEquals(2, uparamtypes.length);
    Mockery context = new Mockery();
    TestInterface mock = context.mock(TestInterface.class);
    sctx.setContextObject(mock);
    Object[] params = InvocationCommand.extractArgs(c, uparamtypes, sctx.getInMapper());
    assertEquals(2, params.length);
    assertEquals("asdf", params[0]);
    assertEquals(Boolean.TRUE, params[1]);
    Method m = sh.getMethod(sctx, type, c);
    assertEquals(TestInterface.class.getMethod("foo", new Class[] { String.class, Object.class, CallbackAndErrorHandler.class }), m);
}
