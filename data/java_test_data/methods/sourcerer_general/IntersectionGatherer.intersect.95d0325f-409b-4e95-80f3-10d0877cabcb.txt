public void intersect(int a, int b) {
    if (noIntersections >= MAX_INTERSECTIONS)
        return;
    Vector2f startA = vertsA[a];
    Vector2f endA = vertsA[(a + 1) % vertsA.length];
    Vector2f startB = vertsB[b];
    Vector2f endB = vertsB[(b + 1) % vertsB.length];
    // TODO: reuse mathutil.intersect
    float d = (endB.y - startB.y) * (endA.x - startA.x) - (endB.x - startB.x) * (endA.y - startA.y);
    if (// parallel lines
    d == 0)
        return;
    float uA = (endB.x - startB.x) * (startA.y - startB.y) - (endB.y - startB.y) * (startA.x - startB.x);
    uA /= d;
    float uB = (endA.x - startA.x) * (startA.y - startB.y) - (endA.y - startA.y) * (startA.x - startB.x);
    uB /= d;
    if (uA < 0 || uA > 1 || uB < 0 || uB > 1)
        // intersection point isn't between the start and endpoints
        return;
    Vector2f position = new Vector2f(startA.x + uA * (endA.x - startA.x), startA.y + uA * (endA.y - startA.y));
    Vector2f dist = new Vector2f(position);
    dist.sub(startA);
    float distFromVertA = dist.lengthSquared();
    dist = new Vector2f(position);
    dist.sub(startB);
    float distFromVertB = dist.lengthSquared();
    // z axis of 3d cross product
    float sA = (startA.x - startB.x) * (endB.y - startB.y) - (endB.x - startB.x) * (startA.y - startB.y);
    if (sA > 0) {
        intersections[noIntersections] = new SortableIntersection(a, b, position, true, distFromVertA, distFromVertB);
    } else {
        intersections[noIntersections] = new SortableIntersection(a, b, position, false, distFromVertA, distFromVertB);
    }
    noIntersections++;
}
