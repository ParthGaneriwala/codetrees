public static void main(String[] args) throws IOException {
    socket = null;
    System.out.println("\t*** Welcome to Andreas Baum's Simple IM Client! ***");
    int userOK = 0;
    String username = null;
    String host = null;
    int hostOK = 0;
    while (hostOK == 0) {
        host = "andreas-baum.local";
        hostOK = 1;
        if (hostOK == 0) {
            host = promptHost();
            hostOK = 1;
        }
        System.out.println("Attempting to connect to " + host + "...");
        try {
            // send connection request:
            socket = new Socket(host, SERVER_PORT);
            // establish in and out streams
            out = new PrintWriter(socket.getOutputStream(), true);
            in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
        } catch (UnknownHostException e) {
            // If host can't be found:
            System.err.println("ERROR: Don't know about host: " + host + ".");
            hostOK = 0;
        } catch (IOException e) {
            // If host doesn't accept connections:
            System.err.println("ERROR: Couldn't get I/O for " + "the connection to: " + host + ".");
            hostOK = 0;
        }
    }
    // Confirm connection:
    System.out.println("Connected to " + host + " on port " + SERVER_PORT + ".");
    while (userOK == 0) {
        if (userOK == 0) {
            username = promptUserName();
            userOK = 1;
        }
        System.out.println("Authenticating username...");
        // send username to the server
        out.println("USR " + username);
        // Receive handshake from server (either accepted username
        // or invalid username)
        String response = in.readLine();
        // username is ok
        if (response.toUpperCase().startsWith("PRINT"))
            System.out.println(response.substring(6));
        else // username is already used
        {
            System.out.println(response.substring(4));
            userOK = 0;
        }
    }
    // connection is established, hand it over to a client thread.
    @SuppressWarnings("unused") ClientThread clientThread = new ClientThread(socket);
    out.close();
    in.close();
}
