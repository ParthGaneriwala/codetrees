@Override
public void mouseClicked(MouseEvent e) {
    final GraphicView gv = (GraphicView) this.getParent();
    if (!e.isControlDown() && notclickedAddon) {
        gv.notifyObservers(new ClearSelectionCommand());
        gv.notifyObservers(new SetSelectedCommand(this, true));
        gv.notifyObservers(new CustomArgument("tabRight", 0));
    } else {
        if (!this.isSelected() && notclickedAddon) {
            gv.notifyObservers(new SetSelectedCommand(this, true));
            gv.notifyObservers(new CustomArgument("tabRight", 0));
        }
    }
    if (e.getClickCount() == 1) {
        if (GBoxNode.class.isAssignableFrom(this.getClass())) {
            if (((GBoxNode) this).getZoomAddon().inAddon(e.getX() + this.getGraphLocation().getX(), e.getY() + this.getGraphLocation().getY())) {
                gv.notifyObservers(new ZoomBoxNodeCommand(gv, (GBoxNode) this));
            }
        }
        if (this.getRemoveAddon().inAddon(e.getX() + this.getGraphLocation().getX(), e.getY() + this.getGraphLocation().getY())) {
            gv.notifyObservers(new DeleteCommand(this));
            gv.notifyObservers(new CustomArgument("tabRight", 1));
        }
        if (this.getShrinkAddon().inAddon(e.getX() + this.getGraphLocation().getX(), e.getY() + this.getGraphLocation().getY())) {
            gv.notifyObservers(new ShrinkCommand(this));
        }
    } else if (e.getClickCount() == 2 && notclickedAddon) {
        final JLayeredPane jp = getRootPane().getLayeredPane();
        final JPanel p = new JPanel();
        p.setLayout(new BorderLayout());
        p.setSize(this.getWidth() - 6, 16);
        Component tab = ((JTabbedPane) this.getParent().getParent().getParent().getParent()).getSelectedComponent();
        Point delta = ((JViewport) this.getParent().getParent()).getViewPosition();
        if (this.getClickLocation(e.getY() + this.getY()) == 1) {
            p.setLocation((int) (gv.getRootPane().getLocation().getX() + tab.getLocation().getX() + this.getNameLocation().getX() - (this.getWidth() - 6) / 2 - delta.getX()), (int) (gv.getRootPane().getLocation().getY() + tab.getLocation().getY() + this.getNameLocation().getY() + p.getHeight() + 10 - delta.getY()));
            final EditableTextField et = new EditableTextField(this.getName());
            final RectangleGraphical n = this;
            et.setHorizontalAlignment(JTextField.CENTER);
            et.addActionListener(new ActionListener() {

                public void actionPerformed(ActionEvent e) {
                    gv.notifyObservers(new EditNodeCommand(Constants.getNameString(), n, ((JTextField) e.getSource()).getText()));
                    ((JTextField) e.getSource()).setVisible(false);
                    et.setVisible(false);
                    jp.remove(p);
                    gv.notifyObservers(new SetSelectedCommand(n, true));
                    gv.notifyObservers(new CustomArgument("tabRight", 0));
                    gv.repaint();
                }
            });
            et.addFocusListener(new FocusListener() {

                public void focusGained(FocusEvent e) {
                // 
                }

                public void focusLost(FocusEvent e) {
                    jp.remove(p);
                }
            });
            p.add(et, BorderLayout.CENTER);
            jp.setLayer(p, 10);
            jp.add(p);
            et.requestFocus();
        } else if (this.getClickLocation(e.getY() + this.getY()) == 2) {
            if (GNode.class.isAssignableFrom(this.getClass())) {
                final GNode gn = (GNode) this;
                BidirectionalHashMap sync = BidirectionalHashMap.getInstance();
                Node no = (Node) sync.get(gn);
                if (gn.getValue() != null) {
                    if (CollectionEditor.isCollection(((Store) no).getValue())) {
                        CollectionEditor ce = new CollectionEditor(((Store) no).getValue(), gn);
                        ce.setVisible(true);
                    } else {
                        p.setLocation((int) (this.getRootPane().getLocation().getX() + tab.getLocation().getX() + gn.getValueLocation().getX() - (gn.getWidth() - 6) / 2 - delta.getX()), (int) (this.getRootPane().getLocation().getY() + tab.getLocation().getY() + gn.getValueLocation().getY() + p.getHeight() + 10 - delta.getY()));
                        final EditableTextField et = new EditableTextField(gn.getValue());
                        et.setHorizontalAlignment(JTextField.CENTER);
                        et.addActionListener(new ActionListener() {

                            public void actionPerformed(ActionEvent e) {
                                gv.notifyObservers(new EditNodeCommand(Constants.getValueString(), gn, ((JTextField) e.getSource()).getText()));
                                ((JTextField) e.getSource()).setVisible(false);
                                et.setVisible(false);
                                jp.remove(p);
                                gv.notifyObservers(new SetSelectedCommand(gn, true));
                                gv.notifyObservers(new CustomArgument("tabRight", 0));
                                gv.repaint();
                            }
                        });
                        et.addFocusListener(new FocusListener() {

                            public void focusGained(FocusEvent e) {
                            // 
                            }

                            public void focusLost(FocusEvent e) {
                                jp.remove(p);
                            }
                        });
                        p.add(et, BorderLayout.CENTER);
                        jp.setLayer(p, 10);
                        jp.add(p);
                        et.requestFocus();
                    }
                }
            }
        }
    }
    gv.repaint();
}
