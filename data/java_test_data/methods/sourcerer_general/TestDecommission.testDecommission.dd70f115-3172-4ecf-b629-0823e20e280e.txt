public void testDecommission() throws IOException {
    Configuration conf = new Configuration();
    conf.setBoolean("dfs.replication.considerLoad", false);
    // Set up the hosts/exclude files.
    FileSystem localFileSys = FileSystem.getLocal(conf);
    Path workingDir = localFileSys.getWorkingDirectory();
    Path dir = new Path(workingDir, "build/test/data/work-dir/decommission");
    assertTrue(localFileSys.mkdirs(dir));
    hostsFile = new Path(dir, "hosts");
    excludeFile = new Path(dir, "exclude");
    conf.set("dfs.hosts.exclude", excludeFile.toUri().getPath());
    conf.setInt("heartbeat.recheck.interval", 2000);
    conf.setInt("dfs.heartbeat.interval", 1);
    conf.setInt("dfs.replication.pending.timeout.sec", 4);
    writeConfigFile(localFileSys, excludeFile, null);
    MiniDFSCluster cluster = new MiniDFSCluster(conf, numDatanodes, true, null);
    cluster.waitActive();
    InetSocketAddress addr = new InetSocketAddress("localhost", cluster.getNameNodePort());
    DFSClient client = new DFSClient(addr, conf);
    DatanodeInfo[] info = client.datanodeReport(DatanodeReportType.LIVE);
    assertEquals("Number of Datanodes ", numDatanodes, info.length);
    FileSystem fileSys = cluster.getFileSystem();
    DistributedFileSystem dfs = (DistributedFileSystem) fileSys;
    try {
        for (int iteration = 0; iteration < numDatanodes - 1; iteration++) {
            int replicas = numDatanodes - iteration - 1;
            // 
            // Decommission one node. Verify that node is decommissioned.
            // 
            Path file1 = new Path("decommission.dat");
            writeFile(fileSys, file1, replicas);
            System.out.println("Created file decommission.dat with " + replicas + " replicas.");
            checkFile(fileSys, file1, replicas);
            printFileLocations(fileSys, file1);
            String downnode = decommissionNode(cluster.getNameNode(), conf, client, fileSys, localFileSys);
            decommissionedNodes.add(downnode);
            waitNodeState(fileSys, downnode, NodeState.DECOMMISSIONED);
            checkFile(fileSys, file1, replicas, downnode);
            cleanupFile(fileSys, file1);
            cleanupFile(localFileSys, dir);
        }
    } catch (IOException e) {
        info = client.datanodeReport(DatanodeReportType.ALL);
        printDatanodeReport(info);
        throw e;
    } finally {
        fileSys.close();
        cluster.shutdown();
    }
}
