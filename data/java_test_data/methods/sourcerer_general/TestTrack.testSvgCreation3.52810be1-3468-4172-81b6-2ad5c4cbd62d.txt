/*
   //--------------------------------------------------------------------------
   public void testSvgCreation()
   throws IOException
   {
      int minXAxisValue = 90;
      int maxXAxisValue = 1002;

      Track rgTrack = createRandomGenesTrack(minXAxisValue, maxXAxisValue);
      rgTrack.addHighlightRegion((maxXAxisValue - minXAxisValue)/2,
                                 (maxXAxisValue - minXAxisValue)/2);

      Track snpTrack = createSNPTrack(minXAxisValue, maxXAxisValue);
      snpTrack.addHighlightRegion((maxXAxisValue - minXAxisValue)/2,
                                  (maxXAxisValue - minXAxisValue)/2);



      String title = "bp. " + minXAxisValue + " - " + maxXAxisValue;

      HTMLDoc htmlDoc = new HTMLDoc();
      HTML html = new HTML(title);
      htmlDoc.setRootNode(html);
      html.getHead().addJavascript(new TooltipJS().generateJS());

      // Add the CSS classes needed for popup menus
      html.getHead().addStyle(PopupMenuJS.generateCommonCSS());
      // Add the javascript needed for popup menus
      html.getHead().addJavascript(PopupMenuJS.generateCommonJavascript());


      Body body = html.getBody();
      body.br(2);

      Table table = body.addCenter().addTable().setWidth(rgTrack.getImageWidth());
      Th cell = table.addRow().addHeaderCell(title).setAlign(Align.CENTER);

      body.addSubtag(rgTrack.getJavascript());
      body.addSubtag(snpTrack.getJavascript());

      if (rgTrack.hasGenesOnStrand(Strand.FORWARD))
      {
         File imageFile = new File(sOutputDir, "rgTrack_f.xml");
         FileOutputStream fileStream = new FileOutputStream(imageFile);
         rgTrack.writeImageAsSvg(fileStream, Strand.FORWARD);
         fileStream.close();

         String imageMapName = "rgTrackingMap_f";
         ObjectTag object = new ObjectTag().setData(imageFile.getName())
                                           .setType("image/svg+xml")
                                           .setUseMap("#" + imageMapName)
                                           .setWidth((int)rgTrack.getWidth())
                                           .setHeight((int)rgTrack.getHeight())
                                           .setBorder(0);
         cell.addSubtag(object);
         body.addSubtag(rgTrack.getImageMap(Strand.FORWARD).setName(imageMapName));
      }


      if (snpTrack.hasGenesOnStrand(Strand.FORWARD))
      {
         File imageFile = new File(sOutputDir, "snpTrack_f.xml");
         FileOutputStream fileStream = new FileOutputStream(imageFile);
         snpTrack.writeImageAsSvg(fileStream, Strand.FORWARD);
         fileStream.close();

         String imageMapName = "snpTrackingMap_f";
         ObjectTag object = new ObjectTag().setData(imageFile.getName())
                                           .setType("image/svg+xml")
                                           .setUseMap("#" + imageMapName)
                                           .setWidth((int)snpTrack.getWidth())
                                           .setHeight((int)snpTrack.getHeight())
                                           .setBorder(0);
         cell.addSubtag(object);
         body.addSubtag(snpTrack.getImageMap(Strand.FORWARD).setName(imageMapName));
      }

      File xAxisImageFile = new File(sOutputDir, "xAxis.xml");
      FileOutputStream fileStream = new FileOutputStream(xAxisImageFile);
      snpTrack.writeXAxisImageAsJpeg(fileStream);  // TODO
      fileStream.close();

      cell.addImage(xAxisImageFile.getName()).setBorder(0);


      if (rgTrack.hasGenesOnStrand(Strand.REVERSE))
      {
         File imageFile = new File(sOutputDir, "rgTrack_r.xml");
         fileStream = new FileOutputStream(imageFile);
         rgTrack.writeImageAsSvg(fileStream, Strand.REVERSE);
         fileStream.close();

         String imageMapName = "rgTrackingMap_r";
         ObjectTag object = new ObjectTag().setData(imageFile.getName())
                                           .setType("image/svg+xml")
                                           .setUseMap("#" + imageMapName)
                                           .setWidth((int)rgTrack.getWidth())
                                           .setHeight((int)rgTrack.getHeight())
                                           .setBorder(0);
         cell.addSubtag(object);
         body.addSubtag(rgTrack.getImageMap(Strand.REVERSE).setName(imageMapName));
      }


      if (snpTrack.hasGenesOnStrand(Strand.REVERSE))
      {
         File imageFile = new File(sOutputDir, "snpTrack_r.svg");
         fileStream = new FileOutputStream(imageFile);
         snpTrack.writeImageAsSvg(fileStream, Strand.REVERSE);
         fileStream.close();

         String imageMapName = "snpTrackingMap_r";
         ObjectTag object = new ObjectTag().setData(imageFile.getName())
                                           .setType("image/svg+xml")
                                           .setUseMap("#" + imageMapName)
                                           .setWidth((int)snpTrack.getWidth())
                                           .setHeight((int)snpTrack.getHeight())
                                           .setBorder(0);
         cell.addSubtag(object);
         body.addSubtag(snpTrack.getImageMap(Strand.REVERSE).setName(imageMapName));
      }

      File htmlFile = new File(sOutputDir, "TrackTestSvg1.html");
      htmlDoc.toHTML(new PrintWriter(new FileOutputStream(htmlFile)));
  }
*/
// --------------------------------------------------------------------------
public void testSvgCreation3() throws IOException {
    int minXAxisValue = 90;
    int maxXAxisValue = 1002;
    Track rgTrack = createRandomGenesTrack(minXAxisValue, maxXAxisValue);
    rgTrack.addHighlightRegion((maxXAxisValue - minXAxisValue) / 2, (maxXAxisValue - minXAxisValue) / 2);
    Track snpTrack = createSNPTrack(minXAxisValue, maxXAxisValue);
    snpTrack.addHighlightRegion((maxXAxisValue - minXAxisValue) / 2, (maxXAxisValue - minXAxisValue) / 2);
    List<Track> tracks = new ArrayList<Track>();
    tracks.add(rgTrack);
    tracks.add(snpTrack);
    String title = "Track Examples";
    HTMLDoc htmlDoc = new HTMLDoc(Doctype.XHTML_1_0_TRANSITIONAL);
    HTML html = new HTML(title);
    html.setAttribute("xmlns", XMLNamespace.XHTML.getURI());
    html.setAttribute("xmlns:" + XMLNamespace.SVG.getPrefix(), XMLNamespace.SVG.getURI());
    html.setAttribute("xmlns:" + XMLNamespace.XLINK.getPrefix(), XMLNamespace.XLINK.getURI());
    htmlDoc.setRootNode(html);
    html.getHead().addJavascript(new TooltipJS().generateJS());
    // Add the CSS classes needed for popup menus
    html.getHead().addStyleTag(PopupMenuJS.generateCommonCSS());
    // Add the javascript needed for popup menus
    html.getHead().addJavascript(PopupMenuJS.generateCommonJavascript());
    for (Track track : tracks) {
        html.getHead().addSubtag(track.getJavascript());
    }
    Body body = html.getBody();
    body.br(2);
    Center center = body.addCenter();
    center.addSubtag(createJpgTracks(tracks));
    title = "Inline SVG Example of Tracks";
    center.br(2);
    Table table = center.addTable().setWidth(rgTrack.getImageWidth());
    Th cell = table.addRow().addHeaderCell(title).setAlign(Align.CENTER);
    if (rgTrack.hasGenesOnStrand(Strand.FORWARD)) {
        cell.addSubtag(rgTrack.writeImageAsSvg(Strand.FORWARD));
    // TODO usemap ?
    // String imageMapName = "rgTrackingMap_f";
    // body.addSubtag(rgTrack.getImageMap(Strand.FORWARD).setName(imageMapName));
    }
    if (snpTrack.hasGenesOnStrand(Strand.FORWARD)) {
        cell.addSubtag(snpTrack.writeImageAsSvg(Strand.FORWARD));
    // String imageMapName = "snpTrackingMap_f";
    // body.addSubtag(snpTrack.getImageMap(Strand.FORWARD).setName(imageMapName));
    }
    File xAxisImageFile = new File(sOutputDir, "xAxis.jpg");
    FileOutputStream fileStream = new FileOutputStream(xAxisImageFile);
    // TODO
    snpTrack.writeXAxisImageAsJpeg(fileStream);
    fileStream.close();
    cell.addImage(xAxisImageFile.getName()).setBorder(0);
    if (rgTrack.hasGenesOnStrand(Strand.REVERSE)) {
        cell.addSubtag(rgTrack.writeImageAsSvg(Strand.REVERSE));
    // String imageMapName = "rgTrackingMap_r";
    // body.addSubtag(rgTrack.getImageMap(Strand.REVERSE).setName(imageMapName));
    }
    if (snpTrack.hasGenesOnStrand(Strand.REVERSE)) {
        cell.addSubtag(snpTrack.writeImageAsSvg(Strand.REVERSE));
    // String imageMapName = "snpTrackingMap_r";
    // body.addSubtag(snpTrack.getImageMap(Strand.REVERSE).setName(imageMapName));
    }
    File htmlFile = new File(sOutputDir, "TrackTest.xhtml");
    htmlDoc.toIndentedHTML(new PrintWriter(new FileOutputStream(htmlFile)), 3, 3);
// htmlDoc.toHTML(new PrintWriter(new FileOutputStream(htmlFile)));
}
