public JFreeChart getChart(ReferenceSet aReferenceSet, String aType, boolean showHuberDistribution, boolean showRealDistribution) {
    // get the reference set
    XYDataset lReferenceDataSet;
    lReferenceDataSet = aReferenceSet.getChartDataSet(aType, 100, iQuantitativeValidationSingelton.getLeftGraphBorder(), iQuantitativeValidationSingelton.getRightGraphBorder(), showHuberDistribution, showRealDistribution);
    // create the chart...
    JFreeChart chart = ChartFactory.createXYLineChart(// chart title
    "", // x axis label
    "Distribution for " + aType, // y axis label
    "#", // data
    lReferenceDataSet, PlotOrientation.VERTICAL, // include legend
    false, // tooltips
    true, // urls
    true);
    // NOW DO SOME OPTIONAL CUSTOMISATION OF THE CHART...
    chart.setBackgroundPaint(Color.white);
    // get a reference to the plot for further customisation...
    XYPlot plot = (XYPlot) chart.getPlot();
    plot.setBackgroundPaint(Color.white);
    plot.setAxisOffset(new RectangleInsets(5.0, 5.0, 5.0, 5.0));
    plot.setDomainGridlinePaint(Color.white);
    plot.setRangeGridlinePaint(Color.white);
    if (showRealDistribution) {
        // paint interval
        Marker area = new IntervalMarker(aReferenceSet.getPercentileReal(aType, 2.5), aReferenceSet.getPercentileReal(aType, 97.5));
        area.setPaint(Color.RED);
        area.setAlpha(0.08f);
        area.setLabel("95% of the data");
        area.setLabelAnchor(RectangleAnchor.BOTTOM);
        plot.addDomainMarker(area, org.jfree.ui.Layer.BACKGROUND);
    }
    if (showHuberDistribution) {
        Marker area2 = new IntervalMarker(aReferenceSet.getPercentileHuber(aType, -1.96), aReferenceSet.getPercentileHuber(aType, 1.96));
        area2.setPaint(Color.BLUE);
        area2.setAlpha(0.08f);
        area2.setLabel("[-1,96;1,96]");
        area2.setLabelFont(new Font("SansSerif", Font.ITALIC, 11));
        area2.setLabelAnchor(RectangleAnchor.BOTTOM);
        plot.addDomainMarker(area2, org.jfree.ui.Layer.BACKGROUND);
    }
    // paint protein ratios
    Marker proteinMean = new ValueMarker(getProteinRatio(aType));
    proteinMean.setPaint(Color.GREEN);
    proteinMean.setLabel("Protein ratio mean");
    proteinMean.setLabelAnchor(RectangleAnchor.TOP_LEFT);
    proteinMean.setLabelTextAnchor(TextAnchor.TOP_RIGHT);
    plot.addDomainMarker(proteinMean);
    Marker proteinGroupedMean = new ValueMarker(getGroupedProteinRatio(aType));
    proteinGroupedMean.setPaint(Color.GREEN);
    proteinGroupedMean.setLabel("Peptide grouped protein ratio mean");
    proteinGroupedMean.setLabelAnchor(RectangleAnchor.CENTER);
    proteinGroupedMean.setLabelTextAnchor(TextAnchor.TOP_RIGHT);
    plot.addDomainMarker(proteinGroupedMean);
    for (int i = 0; i < iPeptideGroups.size(); i++) {
        // paint them if they are used in the calculation
        if (iPeptideGroups.get(i).isUsedInCalculations()) {
            // get the ratiogroups
            Vector<RatioGroup> lRatioGroups = iPeptideGroups.get(i).getRatioGroups();
            for (int j = 0; j < lRatioGroups.size(); j++) {
                // get the ratio for the specific ratio type
                Ratio lRatio = lRatioGroups.get(j).getRatioByType(aType);
                if (lRatio != null) {
                    // paint it
                    Marker lRatioMarker = new ValueMarker(lRatio.getRatio(iQuantitativeValidationSingelton.isLog2()));
                    if (lRatio.getParentRatioGroup().getProteinAccessions().length == 1) {
                        lRatioMarker.setPaint(Color.BLUE);
                    } else if (lRatio.getParentRatioGroup().getRazorProteinAccession().equalsIgnoreCase(iAccession)) {
                        lRatioMarker.setPaint(Color.RED);
                    } else {
                        lRatioMarker.setPaint(Color.ORANGE);
                    }
                    if (iQuantitativeValidationSingelton.isUseOnlyValidRatioForProteinMean()) {
                        if (lRatio.getValid()) {
                            if (iQuantitativeValidationSingelton.isUseOnlyUniqueRatioForProteinMean() && lRatioGroups.get(j).getProteinAccessions().length != 1) {
                            // don't add it, it must be unique but it is not
                            } else {
                                // add it, it doesn't have to be unique
                                // it could also be that in must be unique and it is
                                plot.addDomainMarker(lRatioMarker);
                            }
                        }
                    } else {
                        if (iQuantitativeValidationSingelton.isUseOnlyUniqueRatioForProteinMean() && lRatioGroups.get(j).getProteinAccessions().length != 1) {
                        // don't add it, it must be unique but it is not
                        } else {
                            // add it, it doesn't have to be unique
                            // it could also be that in must be unique and it is
                            plot.addDomainMarker(lRatioMarker);
                        }
                    }
                }
            }
        }
    }
    XYLineAndShapeRenderer renderer = (XYLineAndShapeRenderer) plot.getRenderer();
    renderer.setShapesVisible(false);
    renderer.setShapesFilled(false);
    // change the auto tick unit selection to integer units only...
    NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
    rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
    return chart;
}
