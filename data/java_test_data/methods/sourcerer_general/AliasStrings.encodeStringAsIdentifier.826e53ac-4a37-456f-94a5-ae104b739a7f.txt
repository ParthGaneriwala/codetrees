String encodeStringAsIdentifier(String prefix, String s) {
    // Limit to avoid generating very long identifiers
    final int MAX_LIMIT = 20;
    final int length = s.length();
    final int limit = Math.min(length, MAX_LIMIT);
    StringBuilder sb = new StringBuilder();
    sb.append(prefix);
    boolean protectHex = false;
    for (int i = 0; i < limit; i++) {
        char ch = s.charAt(i);
        if (protectHex) {
            if ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'f')) {
                // toHexString generate lowercase
                sb.append('_');
            }
            protectHex = false;
        }
        if ((ch >= '0' && ch <= '9') || (ch >= 'A' && ch <= 'Z') || (ch >= 'a' && ch <= 'z')) {
            sb.append(ch);
        } else {
            sb.append('$');
            sb.append(Integer.toHexString(ch));
            protectHex = true;
        }
    }
    if (length == limit) {
        return sb.toString();
    }
    // The identifier is not unique because we omitted part, so add a
    // checksum as a hashcode.
    CRC32 crc32 = new CRC32();
    crc32.update(s.getBytes());
    long hash = crc32.getValue() & unitTestHashReductionMask;
    sb.append('_');
    sb.append(Long.toHexString(hash));
    String encoded = sb.toString();
    if (!usedHashedAliases.add(encoded)) {
        // A collision has been detected (which is very rare). Use the sequence
        // id to break the tie. This means that the name is no longer invariant
        // across source code changes and recompilations.
        encoded += "_" + id;
    }
    return encoded;
}
