// documentation inherited
@Override
protected void updateData() {
    // get everything in local variables
    Particle[] particles = _particles;
    float[] data = _data;
    int stride = _stride;
    int segments = _segments;
    Vector3f position = _position, last = _last, next = _next;
    Vector3f s = _s, t = _t, n = _n;
    boolean normals = (_normalOffset >= 0);
    // figure out the texture coordinate parameters
    int udivs = _config.textureDivisionsS;
    float uscale = 1f / udivs;
    float vscale = 1f / _config.textureDivisionsT;
    // find the view vector in local coordinates
    Vector3f view = _transformState.getModelview().invert(_xform).transformVector(Vector3f.UNIT_Z, _view);
    // update the living particles
    float tscale = 1f / segments;
    int texCoordIdx = _texCoordOffset;
    int colorIdx = _colorOffset;
    int normalIdx = _normalOffset;
    int vertexIdx = _vertexOffset;
    for (int ii = 0, nn = _living.value; ii < nn; ii++) {
        Particle particle = particles[ii];
        // extract the color and size
        Color4f color = particle.getColor();
        float cr = color.r, cg = color.g, cb = color.b, ca = color.a;
        float size = particle.getSize();
        // compute the position
        particle.getPosition(0f, position);
        float px = position.x, py = position.y, pz = position.z;
        // compute the next position and use it to find the offset
        particle.getPosition(tscale, next);
        computeOffset(view, next.subtract(position, s), size, t);
        float tx = t.x, ty = t.y, tz = t.z;
        // determine the texture coordinate offsets
        int frame = FloatMath.round(particle.getFrame());
        float uoff = (frame % udivs) * uscale, voff = (frame / udivs) * vscale;
        // write the first two vertices
        float vtop = voff + vscale;
        if (normals) {
            computeOffset(s, t, 1f, n);
            float nx = n.x, ny = n.y, nz = n.z;
            texCoordIdx = write(data, texCoordIdx, stride, uoff, vtop);
            colorIdx = write(data, colorIdx, stride, cr, cg, cb, ca);
            normalIdx = write(data, normalIdx, stride, nx, ny, nz);
            vertexIdx = write(data, vertexIdx, stride, px + tx, py + ty, pz + tz);
            texCoordIdx = write(data, texCoordIdx, stride, uoff, voff);
            colorIdx = write(data, colorIdx, stride, cr, cg, cb, ca);
            normalIdx = write(data, normalIdx, stride, nx, ny, nz);
            vertexIdx = write(data, vertexIdx, stride, px - tx, py - ty, pz - tz);
        } else {
            texCoordIdx = write(data, texCoordIdx, stride, uoff, vtop);
            colorIdx = write(data, colorIdx, stride, cr, cg, cb, ca);
            vertexIdx = write(data, vertexIdx, stride, px + tx, py + ty, pz + tz);
            texCoordIdx = write(data, texCoordIdx, stride, uoff, voff);
            colorIdx = write(data, colorIdx, stride, cr, cg, cb, ca);
            vertexIdx = write(data, vertexIdx, stride, px - tx, py - ty, pz - tz);
        }
        for (int jj = 1; jj < segments; jj++) {
            // update the last, current, and next positions
            _last.set(px, py, pz);
            px = next.x;
            py = next.y;
            pz = next.z;
            float frac = jj * tscale;
            particle.getPosition(frac + tscale, next);
            // compute the offset using last and next positions
            computeOffset(view, next.subtract(last, s), size, t);
            tx = t.x;
            ty = t.y;
            tz = t.z;
            float u = uoff + frac * uscale;
            if (normals) {
                computeOffset(s, t, 1f, n);
                float nx = n.x, ny = n.y, nz = n.z;
                texCoordIdx = write(data, texCoordIdx, stride, u, vtop);
                colorIdx = write(data, colorIdx, stride, cr, cg, cb, ca);
                normalIdx = write(data, normalIdx, stride, nx, ny, nz);
                vertexIdx = write(data, vertexIdx, stride, px + tx, py + ty, pz + tz);
                texCoordIdx = write(data, texCoordIdx, stride, u, voff);
                colorIdx = write(data, colorIdx, stride, cr, cg, cb, ca);
                normalIdx = write(data, normalIdx, stride, nx, ny, nz);
                vertexIdx = write(data, vertexIdx, stride, px - tx, py - ty, pz - tz);
            } else {
                texCoordIdx = write(data, texCoordIdx, stride, u, vtop);
                colorIdx = write(data, colorIdx, stride, cr, cg, cb, ca);
                vertexIdx = write(data, vertexIdx, stride, px + tx, py + ty, pz + tz);
                texCoordIdx = write(data, texCoordIdx, stride, u, voff);
                colorIdx = write(data, colorIdx, stride, cr, cg, cb, ca);
                vertexIdx = write(data, vertexIdx, stride, px - tx, py - ty, pz - tz);
            }
        }
        // update the last and current positions
        last.set(px, py, pz);
        position.set(px = next.x, py = next.y, pz = next.z);
        // compute the offset
        computeOffset(view, position.subtract(last, s), size, t);
        tx = t.x;
        ty = t.y;
        tz = t.z;
        // write the final two vertices
        float uright = uoff + uscale;
        if (normals) {
            computeOffset(s, t, 1f, n);
            float nx = n.x, ny = n.y, nz = n.z;
            texCoordIdx = write(data, texCoordIdx, stride, uright, vtop);
            colorIdx = write(data, colorIdx, stride, cr, cg, cb, ca);
            normalIdx = write(data, normalIdx, stride, nx, ny, nz);
            vertexIdx = write(data, vertexIdx, stride, px + tx, py + ty, pz + tz);
            texCoordIdx = write(data, texCoordIdx, stride, uright, voff);
            colorIdx = write(data, colorIdx, stride, cr, cg, cb, ca);
            normalIdx = write(data, normalIdx, stride, nx, ny, nz);
            vertexIdx = write(data, vertexIdx, stride, px - tx, py - ty, pz - tz);
        } else {
            texCoordIdx = write(data, texCoordIdx, stride, uright, vtop);
            colorIdx = write(data, colorIdx, stride, cr, cg, cb, ca);
            vertexIdx = write(data, vertexIdx, stride, px + tx, py + ty, pz + tz);
            texCoordIdx = write(data, texCoordIdx, stride, uright, voff);
            colorIdx = write(data, colorIdx, stride, cr, cg, cb, ca);
            vertexIdx = write(data, vertexIdx, stride, px - tx, py - ty, pz - tz);
        }
    }
}
