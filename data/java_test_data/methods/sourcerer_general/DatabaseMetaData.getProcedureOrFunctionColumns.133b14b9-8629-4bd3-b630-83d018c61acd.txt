protected java.sql.ResultSet getProcedureOrFunctionColumns(Field[] fields, String catalog, String schemaPattern, String procedureOrFunctionNamePattern, String columnNamePattern, boolean returnProcedures, boolean returnFunctions) throws SQLException {
    List proceduresToExtractList = new ArrayList();
    // Main container to be passed to getProceduresAndOrFunctions
    ResultSet procedureNameRs = null;
    if (supportsStoredProcedures()) {
        try {
            // getProceduresAndOrFunctions does NOT expect procedureOrFunctionNamePattern
            // in form of DB_NAME.SP_NAME thus we need to remove it
            String tmpProcedureOrFunctionNamePattern = null;
            // Check if NOT a pattern first, then "sanitize"
            if ((procedureOrFunctionNamePattern != null) && (procedureOrFunctionNamePattern != "%")) {
                tmpProcedureOrFunctionNamePattern = StringUtils.sanitizeProcOrFuncName(procedureOrFunctionNamePattern);
            }
            // Sanity check, if NamePattern is still NULL, we have a wildcard and not the name
            if (tmpProcedureOrFunctionNamePattern == null) {
                tmpProcedureOrFunctionNamePattern = procedureOrFunctionNamePattern;
            } else {
                // So we have a name to check meaning more actual processing
                // Keep the Catalog parsed, maybe we'll need it at some point
                // in the future...
                String tmpCatalog = catalog;
                List parseList = StringUtils.splitDBdotName(tmpProcedureOrFunctionNamePattern, tmpCatalog, this.quotedId, this.conn.isNoBackslashEscapesSet());
                // There *should* be 2 rows, if any.
                if (parseList.size() == 2) {
                    tmpCatalog = (String) parseList.get(0);
                    tmpProcedureOrFunctionNamePattern = (String) parseList.get(1);
                } else {
                // keep values as they are
                }
            }
            procedureNameRs = getProceduresAndOrFunctions(createFieldMetadataForGetProcedures(), catalog, schemaPattern, tmpProcedureOrFunctionNamePattern, returnProcedures, returnFunctions);
            // Demand: PARAM_CAT for SP.
            // Goal: proceduresToExtractList has to have db.sp entries.
            // Due to https://intranet.mysql.com/secure/paste/displaypaste.php?codeid=10704
            // introducing new variables, ignoring ANSI mode
            String tmpstrPNameRs = null;
            String tmpstrCatNameRs = null;
            boolean hasResults = false;
            while (procedureNameRs.next()) {
                tmpstrCatNameRs = procedureNameRs.getString(1);
                tmpstrPNameRs = procedureNameRs.getString(3);
                if (!((tmpstrCatNameRs.startsWith(this.quotedId) && tmpstrCatNameRs.endsWith(this.quotedId)) || (tmpstrCatNameRs.startsWith("\"") && tmpstrCatNameRs.endsWith("\"")))) {
                    tmpstrCatNameRs = this.quotedId + tmpstrCatNameRs + this.quotedId;
                }
                if (!((tmpstrPNameRs.startsWith(this.quotedId) && tmpstrPNameRs.endsWith(this.quotedId)) || (tmpstrPNameRs.startsWith("\"") && tmpstrPNameRs.endsWith("\"")))) {
                    tmpstrPNameRs = this.quotedId + tmpstrPNameRs + this.quotedId;
                }
                if (proceduresToExtractList.indexOf(tmpstrCatNameRs + "." + tmpstrPNameRs) < 0) {
                    proceduresToExtractList.add(tmpstrCatNameRs + "." + tmpstrPNameRs);
                }
                hasResults = true;
            }
            // FIX for Bug#56305, allowing the code to proceed with empty fields causing NPE later
            if (!hasResults) {
            // throw SQLError.createSQLException(
            // "User does not have access to metadata required to determine " +
            // "stored procedure parameter types. If rights can not be granted, configure connection with \"noAccessToProcedureBodies=true\" " +
            // "to have driver generate parameters that represent INOUT strings irregardless of actual parameter types.",
            // SQLError.SQL_STATE_GENERAL_ERROR, getExceptionInterceptor());
            } else {
                Collections.sort(proceduresToExtractList);
            }
        // Required to be sorted in name-order by JDBC spec,
        // in 'normal' case getProcedures takes care of this for us,
        // but if system tables are inaccessible, we need to sort...
        // so just do this to be safe...
        // Collections.sort(proceduresToExtractList);
        } finally {
            SQLException rethrowSqlEx = null;
            if (procedureNameRs != null) {
                try {
                    procedureNameRs.close();
                } catch (SQLException sqlEx) {
                    rethrowSqlEx = sqlEx;
                }
            }
            if (rethrowSqlEx != null) {
                throw rethrowSqlEx;
            }
        }
    }
    ArrayList resultRows = new ArrayList();
    int idx = 0;
    String procNameToCall = "";
    for (Iterator iter = proceduresToExtractList.iterator(); iter.hasNext(); ) {
        String procName = (String) iter.next();
        // Continuing from above (database_name.sp_name)
        if (!" ".equals(this.quotedId)) {
            idx = StringUtils.indexOfIgnoreCaseRespectQuotes(0, procName, ".", this.quotedId.charAt(0), !this.conn.isNoBackslashEscapesSet());
        } else {
            idx = procName.indexOf(".");
        }
        if (idx > 0) {
            catalog = procName.substring(0, idx);
            if (quotedId != " " && catalog.startsWith(quotedId) && catalog.endsWith(quotedId)) {
                catalog = procName.substring(1, catalog.length() - 1);
            }
            // Leave as CAT.PROC, needed later
            procNameToCall = procName;
        } else {
            // No catalog. Not sure how to handle right now...
            procNameToCall = procName;
        }
        getCallStmtParameterTypes(catalog, procNameToCall, columnNamePattern, resultRows, fields.length == 17);
    }
    return buildResultSet(fields, resultRows);
}
