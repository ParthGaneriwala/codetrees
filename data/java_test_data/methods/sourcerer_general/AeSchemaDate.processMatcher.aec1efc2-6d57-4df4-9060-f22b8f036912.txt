protected void processMatcher(Matcher aMatcher) {
    // $NON-NLS-1$
    boolean isDateNegative = "-".equals(aMatcher.group(1));
    String yearStr = aMatcher.group(2);
    String monthStr = aMatcher.group(3);
    String dayStr = aMatcher.group(4);
    String tzStr = aMatcher.group(5);
    // $NON-NLS-1$
    boolean isUTC = (AeUtil.isNullOrEmpty(tzStr)) || ("Z".equals(tzStr));
    String tzHr = null;
    String tzMin = null;
    char tzDir = '+';
    if (!isUTC) {
        tzDir = aMatcher.group(7).charAt(0);
        tzHr = aMatcher.group(8);
        tzMin = aMatcher.group(9);
    }
    int era = GregorianCalendar.AD;
    if (isDateNegative)
        era = GregorianCalendar.BC;
    TimeZone tz = createTimeZone(tzHr, tzMin, tzDir);
    setTimeZone(tz);
    setCalendar(new GregorianCalendar());
    getCalendar().setTimeZone(tz);
    getCalendar().set(Calendar.ERA, era);
    getCalendar().set(Calendar.YEAR, new Integer(yearStr).intValue());
    // month is 0 based
    getCalendar().set(Calendar.MONTH, new Integer(monthStr).intValue() - 1);
    getCalendar().set(Calendar.DAY_OF_MONTH, new Integer(dayStr).intValue());
    getCalendar().set(Calendar.HOUR_OF_DAY, 0);
    getCalendar().set(Calendar.MINUTE, 0);
    getCalendar().set(Calendar.SECOND, 0);
    getCalendar().set(Calendar.MILLISECOND, 0);
    // Need to update the internal Calendar data structures by asking for the time in millis
    // because they are not updated until some internal data is queried.
    long millis = getCalendar().getTimeInMillis();
    // Now set the time zone to UTC - the next time someone asks for any calendar field, the
    // internal data structures will be updated.
    getCalendar().setTimeZone(sUTCTimeZone);
    setTimeZone(sUTCTimeZone);
    // Work around a GNU Classpath bug: the GNU Calendar implementation
    // doesn't recalcuate its fields after setting the time zone, so always
    // set the time after the time zone.
    getCalendar().setTimeInMillis(millis);
}
