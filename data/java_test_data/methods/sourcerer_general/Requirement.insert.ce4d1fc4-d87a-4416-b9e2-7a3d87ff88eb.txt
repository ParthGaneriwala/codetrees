public boolean insert(Connection db) throws SQLException {
    if (!isValid()) {
        return false;
    }
    boolean commit = db.getAutoCommit();
    try {
        if (commit) {
            db.setAutoCommit(false);
        }
        StringBuffer sql = new StringBuffer();
        sql.append("INSERT INTO project_requirements " + "(project_id, submittedby, departmentby, shortdescription, description, wiki_link, " + "datereceived, estimated_loevalue, estimated_loetype, actual_loevalue, actual_loetype, " + "startdate, deadline, approvedby, approvaldate, closedby, closedate, read_only, ");
        if (entered != null) {
            sql.append("entered, ");
        }
        if (modified != null) {
            sql.append("modified, ");
        }
        sql.append("enteredBy, modifiedBy) ");
        sql.append("VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ");
        if (entered != null) {
            sql.append("?, ");
        }
        if (modified != null) {
            sql.append("?, ");
        }
        sql.append("?, ?) ");
        int i = 0;
        PreparedStatement pst = db.prepareStatement(sql.toString());
        pst.setInt(++i, projectId);
        pst.setString(++i, submittedBy);
        pst.setString(++i, departmentBy);
        pst.setString(++i, shortDescription);
        pst.setString(++i, description);
        pst.setString(++i, wikiLink);
        if (dateReceived == null) {
            pst.setNull(++i, java.sql.Types.DATE);
        } else {
            pst.setTimestamp(++i, dateReceived);
        }
        DatabaseUtils.setInt(pst, ++i, estimatedLoe);
        DatabaseUtils.setInt(pst, ++i, estimatedLoeTypeId);
        DatabaseUtils.setInt(pst, ++i, actualLoe);
        DatabaseUtils.setInt(pst, ++i, actualLoeTypeId);
        if (offset != 0) {
            if (startDate != null) {
                startDate = new Timestamp(startDate.getTime() + offset);
            }
            if (deadline != null) {
                deadline = new Timestamp(deadline.getTime() + offset);
            }
        }
        DatabaseUtils.setTimestamp(pst, ++i, startDate);
        DatabaseUtils.setTimestamp(pst, ++i, deadline);
        if (approved) {
            if (approvalDate == null) {
                java.util.Date tmpDate = new java.util.Date();
                approvalDate = new java.sql.Timestamp(tmpDate.getTime());
            }
        } else {
            approvalDate = null;
        }
        if (approvalDate == null) {
            pst.setNull(++i, java.sql.Types.INTEGER);
            pst.setNull(++i, java.sql.Types.DATE);
        } else {
            if (approvedBy > -1) {
                pst.setInt(++i, approvedBy);
            } else {
                pst.setNull(++i, java.sql.Types.INTEGER);
            }
            approvalDate.setNanos(0);
            pst.setTimestamp(++i, approvalDate);
        }
        if (closed) {
            if (closeDate == null) {
                java.util.Date tmpDate = new java.util.Date();
                closeDate = new java.sql.Timestamp(tmpDate.getTime());
            }
        } else {
            closeDate = null;
        }
        if (closeDate == null) {
            pst.setNull(++i, java.sql.Types.INTEGER);
            pst.setNull(++i, java.sql.Types.DATE);
        } else {
            if (closedBy > -1) {
                pst.setInt(++i, closedBy);
            } else {
                pst.setNull(++i, java.sql.Types.INTEGER);
            }
            closeDate.setNanos(0);
            pst.setTimestamp(++i, closeDate);
        }
        pst.setBoolean(++i, readOnly);
        if (entered != null) {
            pst.setTimestamp(++i, entered);
        }
        if (modified != null) {
            pst.setTimestamp(++i, modified);
        }
        pst.setInt(++i, enteredBy);
        pst.setInt(++i, enteredBy);
        pst.execute();
        pst.close();
        id = DatabaseUtils.getCurrVal(db, "project_requi_requirement_i_seq", -1);
        if (attachmentList != null) {
            FileItemList.convertTempFiles(db, Constants.PROJECT_REQUIREMENT_FILES, this.getModifiedBy(), id, attachmentList);
        }
        if (commit) {
            db.commit();
        }
    } catch (SQLException e) {
        if (commit) {
            db.rollback();
        }
        throw e;
    } finally {
        if (commit) {
            db.setAutoCommit(true);
        }
    }
    return true;
}
