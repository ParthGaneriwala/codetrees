/**
 * This method takes into account the TIF Field "orientation" and
 * places the image data into the JimiImage in the correct orientation.
 */
void setChannel_Oriented(int x, int y, int w, byte[] pixels) throws JimiException {
    byte[] buf;
    int offset;
    int i;
    int row;
    int idx;
    int jiWidth;
    int jiHeight;
    switch(orientation) {
        case // 1
        TIFTags.ORIENTATION_TOPLEFT:
            ji.setChannel(0, x, y, w, 1, pixels, 0, 0);
            break;
        case // 2	// flip horizontally
        TIFTags.ORIENTATION_TOPRIGHT:
            jiWidth = ji.getWidth();
            offset = 0;
            buf = new byte[w];
            // only the pixels that need to be flipped horizontally
            for (i = w; --i >= 0; ) buf[i] = pixels[offset++];
            // now place the flipped pixel data into flipped position
            x = jiWidth - x - w;
            ji.setChannel(0, x, y, w, 1, buf, 0, 0);
            break;
        case // 3	// flip horizontally and vertically
        TIFTags.ORIENTATION_BOTRIGHT:
            // input y is distance relative to bottom row 0
            jiHeight = ji.getHeight();
            y = jiHeight - y - 1;
            jiWidth = ji.getWidth();
            buf = new byte[w];
            // to end of all data
            offset = w;
            // only the pixels that need to be flipped horizontally
            for (i = 0; i < w; ++i) buf[i] = pixels[--offset];
            // now place the flipped pixel data into flipped position
            x = jiWidth - x - w;
            ji.setChannel(0, x, y, w, 1, buf, 0, 0);
            break;
        case // 4	// flip vertically
        TIFTags.ORIENTATION_BOTLEFT:
            // input y is distance relative to bottom row 0
            jiHeight = ji.getHeight();
            y = jiHeight - y - 1;
            ji.setChannel(0, x, y, w, 1, pixels, 0, 0);
            break;
        case // 5
        TIFTags.ORIENTATION_LEFTTOP:
            // using getWidth() for height because image dimensions are
            // swapped for output JimiIMage due to orientation.
            jiHeight = ji.getWidth();
            y = jiHeight - y - 1;
            setChannel_RotateCW90(x, y, w, pixels);
            break;
        case // 6
        TIFTags.ORIENTATION_RIGHTTOP:
            setChannel_RotateCW90(x, y, w, pixels);
            break;
        case // 7
        TIFTags.ORIENTATION_RIGHTBOT:
            // using getHeight for width because image dimensions are
            // swapped for output JimiIMage due to orientation.
            jiWidth = ji.getHeight();
            offset = 0;
            buf = new byte[w];
            // only the pixels that need to be flipped horizontally
            for (i = w; --i >= 0; ) buf[i] = pixels[offset++];
            // now place the flipped pixel data into flipped position
            x = jiWidth - x - w;
            setChannel_RotateCW90(x, y, w, buf);
            break;
        case // 8
        TIFTags.ORIENTATION_LEFTBOT:
            // input y is distance relative to bottom row 0
            // using getWidth for height because image dimensions are
            // swapped for output JimiIMage due to orientation.
            jiHeight = ji.getWidth();
            y = jiHeight - y - 1;
            // using getHeight for width because image dimensions are
            // swapped for output JimiIMage due to orientation.
            jiWidth = ji.getHeight();
            buf = new byte[w];
            // to end of all data
            offset = w;
            // only the pixels that need to be flipped horizontally
            for (i = 0; i < w; ++i) buf[i] = pixels[--offset];
            // now place the flipped pixel data into flipped position
            x = jiWidth - x - w;
            setChannel_RotateCW90(x, y, w, buf);
            break;
    }
}
