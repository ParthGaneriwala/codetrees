@SuppressWarnings("unchecked")
@Override
public List<Cost> getSummedCosts(String jobNum) throws Exception {
    SQLTemplate sql = new SQLTemplate(Jcdetailsum.class, "select jobnum, catnum, phasenum, type, sum(cost) as cost, sum(hours) as " + "hours from jcdetail where jobnum = '" + jobNum + "' and catnum " + "is not null and phasenum is not null and type < 17 " + "group by jobnum, catnum, phasenum, type order by catnum, " + "phasenum, type");
    List<Cost> costs = new ArrayList<Cost>();
    Cost cost;
    Code code;
    Jcdetailsum jc;
    Jcjob jcjob = getJob(jobNum);
    Map<String, Cost> map = new HashMap<String, Cost>();
    if (jcjob != null) {
        Overhead oh = new Overhead(getJob(jobNum));
        String key;
        if (oh != null) {
            for (Iterator i = context.performQuery(sql).iterator(); i.hasNext(); ) {
                jc = (Jcdetailsum) i.next();
                code = new Code();
                code.setJobNum(jobNum);
                code.setCostCode(jc.getCatnum());
                code.setDivision(jc.getPhasenum());
                code.setPhaseCode(map(jc.getType()));
                key = code.getDivision() + code.getCostCode() + code.getPhaseCode();
                cost = map.get(key);
                if (cost == null) {
                    cost = new Cost();
                    cost.setCode(code);
                    cost.setCost(jc.getCost() * (oh.get(jc.getType()) + 1));
                    cost.setHours(jc.getHours());
                    map.put(key, cost);
                } else {
                    cost.setCost((jc.getCost() * (oh.get(jc.getType()) + 1)) + cost.getCost());
                    cost.setHours(jc.getHours() + cost.getHours());
                    map.put(key, cost);
                }
            }
        }
    }
    for (Iterator<Cost> i = map.values().iterator(); i.hasNext(); ) costs.add(i.next());
    map.clear();
    return costs;
}
