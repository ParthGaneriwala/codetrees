public boolean runTest(Resource test, boolean log, boolean stats) throws IOException {
    // Find the specification for the named test
    RDFNode testType = test.getRequiredProperty(RDF.type).getObject();
    if (!(testType.equals(NegativeEntailmentTest) || testType.equals(PositiveEntailmentTest))) {
        throw new JenaException("Can't find test: " + test);
    }
    String description = test.getRequiredProperty(descriptionP).getObject().toString();
    String status = test.getRequiredProperty(statusP).getObject().toString();
    logger.debug("WG test " + test.getURI() + " - " + status);
    // Load up the premise documents
    Model premises = ModelFactory.createNonreifyingModel();
    for (StmtIterator premisesI = test.listProperties(premiseDocumentP); premisesI.hasNext(); ) {
        premises.add(loadFile(premisesI.nextStatement().getObject().toString() + ".rdf"));
    }
    // Load up the conclusions document
    Resource conclusionsRes = (Resource) test.getRequiredProperty(conclusionDocumentP).getObject();
    Model conclusions = loadFile(conclusionsRes.toString() + ".rdf");
    // Optional logging
    if (log) {
        if (configuration == null) {
            Model m = ModelFactory.createDefaultModel();
            configuration = m.createResource();
        }
        configuration.addProperty(ReasonerVocabulary.PROPtraceOn, "true").addProperty(ReasonerVocabulary.PROPderivationLogging, "true");
    }
    Reasoner reasoner = reasonerF.create(configuration);
    long t1 = System.currentTimeMillis();
    InfGraph graph = reasoner.bind(premises.getGraph());
    Model result = ModelFactory.createModelForGraph(graph);
    if (stats && graph instanceof FBRuleInfGraph) {
    // ((FBRuleInfGraph)graph).resetLPProfile(true);
    }
    // Check the results against the official conclusions
    boolean correct = true;
    if (testType.equals(PositiveEntailmentTest)) {
        correct = testConclusions(conclusions.getGraph(), result.getGraph());
    } else {
        // A negative entailment check
        correct = !testConclusions(conclusions.getGraph(), result.getGraph());
    }
    long t2 = System.currentTimeMillis();
    timeCost += (t2 - t1);
    numTests++;
    if (stats) {
        logger.info("Time=" + (t2 - t1) + "ms for " + test.getURI());
        printStats();
        if (graph instanceof FBRuleInfGraph) {
            ((FBRuleInfGraph) graph).printLPProfile();
        }
    }
    if (!correct) {
    // List all the forward deductions for debugging
    // if (graph instanceof FBRuleInfGraph) {
    // System.out.println("Error: deductions graph was ...");
    // FBRuleInfGraph fbGraph = (FBRuleInfGraph)graph;
    // Graph deductions = fbGraph.getDeductionsGraph();
    // com.hp.hpl.jena.util.PrintUtil.printOut(deductions.find(null,null,null));
    // }
    }
    // Signal the results
    if (testcase != null) {
        TestCase.assertTrue("Test: " + test + "\n" + reasonerF.getURI() + "\n" + description, correct);
    }
    return correct;
}
