public void parseTypeDef() {
    // possibly, modifiers: [public|private|protected] [static]
    parseModifiers();
    LocatableToken token = tokenStream.nextToken();
    boolean isAnnotation = token.getType() == JavaTokenTypes.AT;
    if (isAnnotation) {
        token = tokenStream.nextToken();
    }
    // [class|interface|enum]
    if (isTypeDeclarator(token)) {
        int tdType = -1;
        String typeDesc;
        if (token.getType() == JavaTokenTypes.LITERAL_class) {
            typeDesc = "class";
            tdType = TYPEDEF_CLASS;
        } else if (token.getType() == JavaTokenTypes.LITERAL_interface) {
            typeDesc = "interface";
            tdType = TYPEDEF_INTERFACE;
            // check for annotation type
            if (isAnnotation) {
                tdType = TYPEDEF_ANNOTATION;
            }
        } else {
            typeDesc = "enum";
            tdType = TYPEDEF_ENUM;
        }
        gotTypeDef(tdType);
        modifiersConsumed();
        // Class name
        token = tokenStream.nextToken();
        if (token.getType() != JavaTokenTypes.IDENT) {
            error("Expected identifier (in " + typeDesc + " definition)");
            tokenStream.pushBack(token);
            return;
        }
        gotTypeDefName(token);
        // template arguments
        token = tokenStream.nextToken();
        if (token.getType() == JavaTokenTypes.LT) {
            parseTypeParams();
            token = tokenStream.nextToken();
        }
        // extends...
        if (token.getType() == JavaTokenTypes.LITERAL_extends) {
            gotTypeDefExtends(token);
            parseTypeSpec(true);
            token = tokenStream.nextToken();
        }
        // implements...
        if (token.getType() == JavaTokenTypes.LITERAL_implements) {
            gotTypeDefImplements(token);
            parseTypeSpec(true);
            token = tokenStream.nextToken();
            while (token.getType() == JavaTokenTypes.COMMA) {
                parseTypeSpec(true);
                token = tokenStream.nextToken();
            }
        }
        // Body!
        if (token.getType() != JavaTokenTypes.LCURLY) {
            error("Expected '{' (in class definition)");
            tokenStream.pushBack(token);
            gotTypeDefEnd(token, false);
            return;
        }
        beginTypeBody(token);
        if (tdType == TYPEDEF_ENUM) {
            parseEnumConstants();
        }
        if (tdType == TYPEDEF_ANNOTATION) {
            parseAnnotationBody();
        } else {
            parseClassBody();
        }
        token = tokenStream.nextToken();
        if (token.getType() != JavaTokenTypes.RCURLY) {
            error("Expected '}' (in class definition)");
            endTypeBody(token, false);
            gotTypeDefEnd(token, false);
            return;
        }
        endTypeBody(token, true);
        gotTypeDefEnd(token, true);
    } else {
        error("Expected type declarator: 'class', 'interface', or 'enum'");
    }
}
