public String ConstructXMLTree(double[][] dDistanceMatrix) throws Exception {
    qNodes = new QNode[2 * dDistanceMatrix.length - 2];
    visited_node = new boolean[2 * dDistanceMatrix.length - 2];
    N = dDistanceMatrix.length;
    // ArrayList alBestQuartets = Quartet.generateBestQuartetList(dDistanceMatrix);
    // selected_q = new int[alBestQuartets.size()];
    alEdges = new ArrayList();
    QNode[] best_nodes = null;
    QuartetTree qt = null;
    double best_score = Double.MAX_VALUE;
    populateQuartetLists(dDistanceMatrix);
    // ArrayList alFullQuartets = Quartet.generateFullQuartetList(dDistanceMatrix);
    Quartet.computeWorstAndBestCosts(dDistanceMatrix);
    // Random rand = new Random();
    int[] best_nodes_list = new int[dDistanceMatrix.length];
    int stop_steps = 0;
    int i = 0;
    int[] nodes_list = new int[dDistanceMatrix.length];
    // while(stop_steps < K){
    ArrayList goodMutations = new ArrayList();
    ArrayList badMutations = new ArrayList();
    boolean foundBetterScore = false;
    alIndexes = generateIndexes(dDistanceMatrix.length);
    int runs = 0;
    while (((!mutationCountExceeded || foundBetterScore) && runs < Math.abs(K))) {
        if (K < 0 && i > Math.abs(K))
            break;
        if (mutationCountExceeded && foundBetterScore) {
            alIndexes = generateIndexes(dDistanceMatrix.length);
            foundBetterScore = false;
            runs++;
        }
        oldEdge = null;
        step_count = 0;
        qt = new QuartetTree();
        labels = new int[dDistanceMatrix.length];
        int count = 0;
        Quartet q;
        if (i == 0) {
            nodes_list = generateRandomNodesList(dDistanceMatrix.length);
        } else {
            nodes_list = mutateNodesList(best_nodes_list);
        }
        q = new Quartet(nodes_list[0], nodes_list[1], nodes_list[2], nodes_list[3], dDistanceMatrix);
        double bs = -1;
        for (int j = 0; j < 4; j++) {
            if (bs < (dDistanceMatrix[nodes_list[j % 4]][(j + 1) % 4] + dDistanceMatrix[nodes_list[(j + 2) % 4]][(j + 3) % 4])) {
                bs = dDistanceMatrix[nodes_list[j % 4]][(j + 1) % 4] + dDistanceMatrix[nodes_list[(j + 2) % 4]][(j + 3) % 4];
                q.nodes[0] = nodes_list[j % 4];
                q.nodes[1] = nodes_list[(j + 1) % 4];
                q.nodes[2] = nodes_list[(j + 2) % 4];
                q.nodes[3] = nodes_list[(j + 3) % 4];
            }
        }
        labels[0] = q.nodes[0];
        labels[1] = q.nodes[1];
        labels[2] = q.nodes[2];
        labels[3] = q.nodes[3];
        scoreHistory = new double[dDistanceMatrix.length][1000];
        edgeScoreHistory = new double[1000];
        initializeFromQuartet(qt, q);
        for (int j = 4; j < nodes_list.length; j++) {
            labels[j] = nodes_list[j];
        }
        for (int j = 4; j < nodes_list.length; j++) {
            cur_node = nodes_list[j];
            addNodeInBestPlace(qt, nodes_list[j], dDistanceMatrix);
        }
        double St = (Quartet.worst_cost.doubleValue() - last_tree_score) / (Quartet.worst_cost.doubleValue() - Quartet.best_cost.doubleValue());
        // }
        if (last_tree_score <= best_score) {
            stop_steps = 0;
            if (last_tree_score < best_score) {
                // alIndexes = generateIndexes(dDistanceMatrix.length);
                if (i > 0)
                    goodMutations.add(last_mutation);
                foundBetterScore = true;
                Debug.append((i + 1) + ".) new best score = " + St + "; count = " + count);
                System.out.println((i + 1) + ".) new best score = " + St + "; count = " + count);
            }
            best_score = last_tree_score;
            best_nodes = this.cloneQuartetNodes(qNodes, qt);
            for (int j = 0; j < best_nodes_list.length; j++) {
                best_nodes_list[j] = nodes_list[j];
            }
        } else {
            stop_steps++;
            if (i > 0) {
                boolean add_mutation = true;
                for (int h = 0; h < goodMutations.size(); h++) {
                    IndexPair ip = (IndexPair) goodMutations.get(h);
                    if ((ip.i == last_mutation.i && ip.j == last_mutation.j) || (ip.i == last_mutation.j && ip.j == last_mutation.i)) {
                        add_mutation = false;
                        break;
                    }
                }
                if (add_mutation)
                    badMutations.add(last_mutation);
            }
        }
        if (i % 100 == 0) {
            Debug.append((i + 1) + ".) score = " + St);
            System.out.println((i + 1) + ".) score = " + St);
            Debug.append("remaining mutations = " + alIndexes.size());
            System.out.println("remaining mutations = " + alIndexes.size());
            Debug.append("pq/nqp = " + (double) part_q / (double) non_part_q + "; avg. index1 = " + (double) total_index / (double) mutation_count + "; avg. index2 = " + (double) total_index2 / (double) mutation_count);
            Debug.append(qt.toTreeFile());
        }
        i++;
        last_tree_score = 0;
    // Debug.append("step_count = " + step_count);
    }
    qNodes = best_nodes;
    qt.root = this.getRandomInternNode();
    qt.St = (Quartet.worst_cost.doubleValue() - best_score) / (Quartet.worst_cost.doubleValue() - Quartet.best_cost.doubleValue());
    Debug.append("part_q = " + part_q);
    Debug.append("non_part_q = " + non_part_q);
    Debug.append("pq/nqp = " + (double) part_q / (double) non_part_q);
    Debug.append("operation_count = " + ((double) operation_count / (double) non_part_q));
    String good_mutations = "";
    for (int h = 0; h < goodMutations.size(); h++) {
        IndexPair ip = (IndexPair) goodMutations.get(h);
        int bads = 0;
        for (int g = 0; g < badMutations.size(); g++) {
            IndexPair bip = (IndexPair) badMutations.get(g);
            if ((ip.i == bip.i && ip.j == bip.j) || (ip.i == bip.j && ip.j == bip.i)) {
                bads++;
            }
        }
        good_mutations += "bads: " + bads + "; " + ip.i + "," + ip.j + " | ";
    }
    Debug.append(good_mutations);
    File f = new File("test.tree");
    FileOutputStream fos = new FileOutputStream(f);
    fos.write(qt.toTreeFile().getBytes());
    fos.close();
    Debug.append(qt.toTreeFile());
    return qt.toString();
}
