public void mousePressed(java.awt.event.MouseEvent e) {
    dragStart = e.getPoint().x;
    if (true) {
        double sel = ((double) e.getX() / ((double) progressBar.getWidth()) * (double) progressBar.getMaximum());
        progressBar.setValue((int) sel);
        // progressBar.repaint();
        // label_1.setVisible(false);
        int ds = (int) ((sel / (double) progressBar.getMaximum()) * (double) length);
        if (ds != 0) {
            int d0 = ds / 3600;
            int d1 = Math.abs(d0 * 60 - ds / 60);
            int d2 = ds % 60;
            StringBuffer str2 = new StringBuffer();
            str2.append("[");
            if (d0 != 0) {
                str2.append(d0);
                str2.append("Сʱ");
            }
            if (d1 != 0) {
                str2.append(d1);
                if (d0 == 0 & d2 == 0) {
                    str2.append("����");
                } else {
                    str2.append("��");
                }
            }
            if (d2 != 0) {
                str2.append(d2);
                str2.append("��");
            }
            str2.append("]");
            label_1.setText(str2.toString());
            int x;
            java.awt.FontMetrics metrics = label_1.getFontMetrics(label_1.getFont());
            // �ַ�ĸ�,
            int textH = metrics.getHeight();
            // ֻ�������й�
            int textW = metrics.stringWidth(label_1.getText());
            if (e.getX() + textW > progressBar.getWidth()) {
                x = e.getX() - textW;
            // label_1.setHorizontalAlignment(SwingConstants.TRAILING);
            } else {
                x = e.getX();
            // label_1.setHorizontalAlignment(SwingConstants.LEFT);
            }
            label_1.setBounds(x, 0, textW, textH);
            seekto(ds);
            lockProgress(ds);
        }
        isPause = false;
        imSeek = false;
    // setVolume(slider_1.getValue());
    }
    progressDrag = false;
    progressDragId = new peer.tools.RandomNum().randomInt();
}
