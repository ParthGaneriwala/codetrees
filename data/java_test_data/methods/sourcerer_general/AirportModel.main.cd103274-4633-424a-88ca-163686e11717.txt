public static void main(String[] args) {
    // high level entities
    AirportModel airportModel = new AirportModel();
    ControlTower controlTower = new ControlTower();
    // creates the view and listeners
    AirportController airportController = new AirportController(controlTower);
    controlTower.setAirportModel(airportModel);
    if (args.length >= 1) {
        String configfile = args[0];
        if (args[0].length() > 0) {
            GlobalLog.info("calling file config " + configfile);
            airportController.readConfig(configfile);
        }
        airportModel.buildAllTaxiways();
    } else {
        // resources will be created by loading the simulation file
        // commenting out all inline test data
        Airspace airspace = new Airspace(500, "Airspace 01");
        HoldingPattern holdingPattern = new HoldingPattern(10, "HoldingPattern 01");
        Runway runway1 = new Runway(1, "Runway 01");
        Runway runway2 = new Runway(1, "Runway 02");
        Gate genericGate = new Gate(1, "Gate 01", "American Airlines");
        Gate southWestGate = new Gate(1, "Gate 02", "Southwest Airlines");
        Gate unitedGate = new Gate(1, "Gate 03", "United Airlines");
        Gate southWestGate2 = new Gate(1, "Gate 04", "Southwest Airlines");
        Gate aeroMexicoGate = new Gate(1, "Gate 05", "Aero Mexico");
        Hangar someHangar = new Hangar(200, "Hangar 01");
        // tie things together
        airportModel.addResource(holdingPattern);
        airportModel.addResource(genericGate);
        airportModel.addResource(southWestGate);
        airportModel.addResource(unitedGate);
        airportModel.addResource(southWestGate2);
        airportModel.addResource(aeroMexicoGate);
        airportModel.addResource(airspace);
        airportModel.addResource(runway1);
        airportModel.addResource(runway2);
        airportModel.addResource(someHangar);
        runway1.setOtherRunway(runway2);
        runway2.setOtherRunway(runway1);
        airportModel.buildAllTaxiways();
        ArrayList<Airplane> airplanes = new ArrayList<Airplane>();
        for (int i = 0; i < 4; i++) {
            Airplane a = new Airplane(airplanes.size(), "American Airlines", "incoming", airspace, genericGate, System.currentTimeMillis() + 60000 * (i + 1), 0, 200, 80);
            a.setDelayStartUntil(System.currentTimeMillis() + 5000 * i);
            a.setControlTower(controlTower);
            airplanes.add(a);
            new Thread(a).start();
        }
        for (int i = 0; i < 4; i++) {
            Airplane a = new Airplane(airplanes.size(), "Southwest Airlines", "incoming", airspace, southWestGate, System.currentTimeMillis() + 30000 + (i * 60000), 0, 200, 80);
            a.setDelayStartUntil(System.currentTimeMillis() + 18000 * i);
            a.setControlTower(controlTower);
            airplanes.add(a);
            new Thread(a).start();
        }
        for (int i = 0; i < 4; i++) {
            Airplane a = new Airplane(airplanes.size(), "United Airlines", "incoming", airspace, unitedGate, System.currentTimeMillis() + 60000 + (i * 40000), 0, 200, 80);
            a.setDelayStartUntil(System.currentTimeMillis() + 10000 * i);
            a.setControlTower(controlTower);
            airplanes.add(a);
            new Thread(a).start();
        }
        // let's try a plane taking off...
        Airplane a = new Airplane(airplanes.size(), "Southwest Airlines", "outgoing", someHangar, southWestGate, 0, System.currentTimeMillis() + 60000, 200, 200);
        // a.setDelayStartUntil(System.currentTimeMillis() + 20000);
        a.setControlTower(controlTower);
        airplanes.add(a);
        new Thread(a).start();
        // let's try a plane that has an emergency
        Airplane b = new Airplane(airplanes.size(), "Aero Mexico", "incoming", airspace, aeroMexicoGate, System.currentTimeMillis() + 200000, 0, 200, 40);
        b.setControlTower(controlTower);
        airplanes.add(b);
        new Thread(b).start();
    }
}
