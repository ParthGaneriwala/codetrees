// / <summary>
// / Determines if a point is inside the triangle using the barycentric technique.
// / See http://www.blackpawn.com/texts/pointinpoly/default.html
// / </summary>
// / <param name="q">Query point</param>
// / <param name="labelPtMap">Map from vertex label to point</param>
public Boolean Inside(WayPt q, Hashtable<?, ?> labelPtMap) {
    // Compute vectors
    WayPt a = (WayPt) labelPtMap.get(m_Vertices.get(0));
    WayPt b = (WayPt) labelPtMap.get(m_Vertices.get(1));
    WayPt c = (WayPt) labelPtMap.get(m_Vertices.get(2));
    double[] v0 = new double[2];
    v0[0] = c.getLon() - a.getLon();
    v0[1] = c.getLat() - a.getLat();
    double[] v1 = new double[2];
    v1[0] = b.getLon() - a.getLon();
    v1[1] = b.getLat() - a.getLat();
    double[] v2 = new double[2];
    v2[0] = q.getLon() - a.getLon();
    v2[1] = q.getLat() - a.getLat();
    double dot00 = VectorOps.DotProduct(v0, v0);
    double dot01 = VectorOps.DotProduct(v0, v1);
    double dot02 = VectorOps.DotProduct(v0, v2);
    double dot11 = VectorOps.DotProduct(v1, v1);
    double dot12 = VectorOps.DotProduct(v1, v2);
    // Compute barycentric coordinates
    double invDenom = 1 / (dot00 * dot11 - dot01 * dot01);
    double u = (dot11 * dot02 - dot01 * dot12) * invDenom;
    double v = (dot00 * dot12 - dot01 * dot02) * invDenom;
    // Check if point is inside triangle
    Boolean tf = (u > 0) && (v > 0) && (u + v < 1);
    return tf;
}
