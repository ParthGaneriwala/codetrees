@Test
public void testRebinding() {
    BoundPropBinding binding = new BoundPropBinding();
    binding.setCompProperty("value");
    binding.setModelPath("strVal");
    SimpleBean m1 = new SimpleBean("start");
    InvisibleCobean cobean = new InvisibleCobean();
    log.debug("---------- before m1 = binding.bind(m1, cobean); -----------------------");
    m1 = binding.bind(m1, cobean);
    log.debug("---------- after m1 = binding.bind(m1, cobean); -----------------------");
    pause();
    Assert.assertEquals("start", cobean.getValue());
    m1.setStrVal("hallo");
    TestUtil.assertChangeListenerCount(1, m1);
    TestUtil.assertCobeanHasOneListener(cobean);
    Assert.assertEquals("hallo", cobean.getValue());
    SimpleBean m2 = new SimpleBean("stop");
    Assert.assertEquals("stop", m2.getStrVal());
    log.debug("------- before binding.bind(m2, cobean --------------");
    m2 = binding.bind(m2, cobean);
    log.debug("------- after binding.bind(m2, cobean --------------");
    pause();
    Assert.assertEquals("stop", m2.getStrVal());
    Assert.assertEquals("stop", cobean.getValue());
    TestUtil.assertChangeListenerCount(1, m2);
    TestUtil.assertChangeListenerCount(0, m1);
    pause();
    TestUtil.assertCobeanHasOneListener(cobean);
    Assert.assertEquals("stop", m2.getStrVal());
    m2.setStrVal("A");
    pause();
    Assert.assertEquals("A", cobean.getValue());
    cobean.setValue("B");
    pause();
    Assert.assertEquals("B", m2.getStrVal());
    Assert.assertEquals("hallo", m1.getStrVal());
}
