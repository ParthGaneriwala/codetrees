public void testAgainstMinimax() {
    for (int depth = 1; depth < 6; depth++) {
        // out.println("depth=" + depth);
        MiniMax blackMini = new MiniMax(true, new EvalMaterialOnly(), depth);
        NegaMax blackNeg = new NegaMax(true, new EvalMaterialOnlyNeg(), depth);
        MiniMax whiteMini = new MiniMax(false, new EvalMaterialOnly(), depth);
        NegaMax whiteNeg = new NegaMax(false, new EvalMaterialOnlyNeg(), depth);
        int i;
        for (i = 0; i < 1000; i++) {
            Board board = RandomBoard.randPieces();
            boolean isEqual = true;
            assertTrue(board.isSane());
            if (board.blackToMove) {
                // out.println("black to move");
                Board blackMiniBoard = blackMini.findMove(board);
                Board blackNegBoard = blackNeg.findMove(board);
                int blackMiniValue = blackMini.search(board, depth);
                int blackNegValue = -blackNeg.search(board, depth);
                if (blackMiniBoard != null && blackNegBoard != null) {
                    isEqual = blackMiniBoard.equals(blackNegBoard);
                // assertEquals(true, isEqual);
                }
                if (!isEqual || (blackMiniValue != blackNegValue)) {
                    out.println("Black to move, this board caused conflict:");
                    GameEngine.printBoard(board);
                    out.println("At depth: " + depth);
                    out.println("Mini-choice:");
                    GameEngine.printBoard(blackMiniBoard);
                    out.println("Mini-val: " + blackMiniValue);
                    out.println("Neg-choice:");
                    GameEngine.printBoard(blackNegBoard);
                    out.println("Neg-val: " + blackNegValue);
                    return;
                }
            } else {
                // out.println("white to move");
                Board whiteMiniBoard = whiteMini.findMove(board);
                Board whiteNegBoard = whiteNeg.findMove(board);
                int whiteMiniValue = whiteMini.search(board, depth);
                int whiteNegValue = whiteNeg.search(board, depth);
                if (whiteMiniBoard != null && whiteNegBoard != null) {
                    isEqual = whiteMiniBoard.equals(whiteNegBoard);
                // assertEquals(true, isEqual);
                }
                if (!isEqual || (whiteMiniValue != whiteNegValue)) {
                    out.println("White to move, this board caused conflict:");
                    GameEngine.printBoard(board);
                    out.println("At depth: " + depth);
                    out.println("Mini-choice:");
                    GameEngine.printBoard(whiteMiniBoard);
                    out.println("Mini-val: " + whiteMiniValue);
                    out.println("Neg-choice:");
                    GameEngine.printBoard(whiteNegBoard);
                    out.println("Neg-val: " + whiteNegValue);
                    return;
                }
            }
        }
    }
}
