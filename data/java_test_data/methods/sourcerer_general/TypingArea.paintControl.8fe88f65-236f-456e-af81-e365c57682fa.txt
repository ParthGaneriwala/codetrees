public void paintControl(PaintEvent pe) {
    GC gc = pe.gc;
    Point canvasSize = canvas.getSize();
    gc.setBackground(GUI.display.getSystemColor(SWT.COLOR_WHITE));
    gc.setForeground(GUI.display.getSystemColor(SWT.COLOR_BLACK));
    gc.setFont(new Font(GUI.display, "Courier New", 10, SWT.NORMAL));
    // tło
    gc.fillRectangle(0, 0, canvasSize.x, canvasSize.y);
    // zakres linii do wyświetlenia
    int startLine = CoolKey.getCurrentTest().getWrittenLines().size() - MAX_TYPING_LINES;
    if (startLine < 0) {
        startLine = 0;
    }
    int endLine = startLine + MAX_TYPING_LINES - 1;
    if (endLine > CoolKey.getCurrentTest().getWrittenLines().size() - 1) {
        endLine = CoolKey.getCurrentTest().getWrittenLines().size() - 1;
    }
    // narysuj tekst do przepisania
    int x = LEFT_MARGIN;
    int y = TOP_MARGIN_TEXT;
    for (int i = startLine; i <= endLine; i++) {
        String line = CoolKey.getCurrentTest().getTextLines().get(i);
        gc.drawString(line, x, y);
        y += LINE_HEIGHT;
    }
    for (int i = endLine + 1; i < CoolKey.getCurrentTest().getTextLines().size() && i < endLine + 1 + MAX_LINES - 2 * (1 + endLine - startLine); i++) {
        String line = CoolKey.getCurrentTest().getTextLines().get(i);
        gc.drawString(line, x, y);
        y += LINE_HEIGHT / 2;
    }
    // narysuj przepisany tekst
    gc.setForeground(GUI.display.getSystemColor(SWT.COLOR_BLUE));
    y = TOP_MARGIN_WRITTEN;
    for (int i = startLine; i <= endLine; i++) {
        String line = CoolKey.getCurrentTest().getWrittenLines().get(i);
        gc.drawString(line, x, y);
        y += LINE_HEIGHT;
    }
    // narysuj kursor
    String lastLine = CoolKey.getCurrentTest().getWrittenLines().get(CoolKey.getCurrentTest().getWrittenLines().size() - 1);
    String cursor = "";
    for (int i = 0; i < lastLine.length(); i++) {
        cursor += ' ';
    }
    cursor += '_';
    if (CoolKey.getCurrentTest().isMistakeMade()) {
        gc.setForeground(GUI.display.getSystemColor(SWT.COLOR_RED));
    }
    y -= LINE_HEIGHT;
    gc.drawString(cursor, x, y, true);
    // zaznacz znaki które zostały poprawione
    gc.setForeground(COLOR_CORRECTION);
    y = TOP_MARGIN_WRITTEN;
    for (int i = startLine; i <= endLine; i++) {
        String line = CoolKey.getCurrentTest().getCorrections().get(i);
        gc.drawString(line, x, y, true);
        y += LINE_HEIGHT;
    }
    // zaznacz pomyłki na czerwono
    gc.setForeground(GUI.display.getSystemColor(SWT.COLOR_RED));
    y = TOP_MARGIN_WRITTEN;
    for (int i = startLine; i <= endLine; i++) {
        String line = CoolKey.getCurrentTest().getMistakes().get(i);
        gc.drawString(line, x, y, true);
        y += LINE_HEIGHT;
    }
}
