// scanPseudoAttribute(XMLAttributesImpl):boolean
protected boolean scanAttribute(XMLAttributesImpl attributes, boolean[] empty, char endc) throws IOException {
    boolean skippedSpaces = skipSpaces();
    fBeginLineNumber = fCurrentEntity.lineNumber;
    fBeginColumnNumber = fCurrentEntity.columnNumber;
    int c = read();
    if (c == -1) {
        if (fReportErrors) {
            fErrorReporter.reportError("HTML1007", null);
        }
        throw new EOFException();
    }
    if (c == '>') {
        return false;
    }
    fCurrentEntity.offset--;
    fCurrentEntity.columnNumber--;
    String aname = scanName();
    if (aname == null) {
        if (fReportErrors) {
            fErrorReporter.reportError("HTML1011", null);
        }
        empty[0] = skipMarkup(false);
        return false;
    }
    if (!skippedSpaces && fReportErrors) {
        fErrorReporter.reportError("HTML1013", new Object[] { aname });
    }
    aname = modifyName(aname, fNamesAttrs);
    skipSpaces();
    c = read();
    if (c == -1) {
        if (fReportErrors) {
            fErrorReporter.reportError("HTML1007", null);
        }
        throw new EOFException();
    }
    if (c == '/' || c == '>') {
        fQName.setValues(null, aname, aname, null);
        attributes.addAttribute(fQName, "CDATA", "");
        attributes.setSpecified(attributes.getLength() - 1, true);
        if (fAugmentations) {
            addLocationItem(attributes, attributes.getLength() - 1);
        }
        if (c == '/') {
            fCurrentEntity.offset--;
            fCurrentEntity.columnNumber--;
            empty[0] = skipMarkup(false);
        }
        return false;
    }
    /**
     * // REVISIT: [Q] Why is this still here? -Ac
     * if (c == '/' || c == '>') {
     * if (c == '/') {
     * fCurrentEntity.offset--;
     * fCurrentEntity.columnNumber--;
     * empty[0] = skipMarkup(false);
     * }
     * fQName.setValues(null, aname, aname, null);
     * attributes.addAttribute(fQName, "CDATA", "");
     * attributes.setSpecified(attributes.getLength()-1, true);
     * if (fAugmentations) {
     * addLocationItem(attributes, attributes.getLength() - 1);
     * }
     * return false;
     * }
     * /**
     */
    if (c == '=') {
        skipSpaces();
        c = read();
        if (c == -1) {
            if (fReportErrors) {
                fErrorReporter.reportError("HTML1007", null);
            }
            throw new EOFException();
        }
        // Xiaowei/Ac: Fix for <a href=/cgi-bin/myscript>...</a>
        if (c == '>') {
            fQName.setValues(null, aname, aname, null);
            attributes.addAttribute(fQName, "CDATA", "");
            attributes.setSpecified(attributes.getLength() - 1, true);
            if (fAugmentations) {
                addLocationItem(attributes, attributes.getLength() - 1);
            }
            return false;
        }
        fStringBuffer.clear();
        fNonNormAttr.clear();
        if (c != '\'' && c != '"') {
            fCurrentEntity.offset--;
            fCurrentEntity.columnNumber--;
            while (true) {
                c = read();
                // Xiaowei/Ac: Fix for <a href=/broken/>...</a>
                if (Character.isSpace((char) c) || c == '>') {
                    // fCharOffset--;
                    fCurrentEntity.offset--;
                    fCurrentEntity.columnNumber--;
                    break;
                }
                if (c == -1) {
                    if (fReportErrors) {
                        fErrorReporter.reportError("HTML1007", null);
                    }
                    throw new EOFException();
                }
                if (c == '&') {
                    int ce = scanEntityRef(fStringBuffer2, false);
                    if (ce != -1) {
                        fStringBuffer.append((char) ce);
                    } else {
                        fStringBuffer.append(fStringBuffer2);
                    }
                    fNonNormAttr.append(fStringBuffer2);
                } else {
                    fStringBuffer.append((char) c);
                    fNonNormAttr.append((char) c);
                }
            }
            fQName.setValues(null, aname, aname, null);
            String avalue = fStringBuffer.toString();
            attributes.addAttribute(fQName, "CDATA", avalue);
            int lastattr = attributes.getLength() - 1;
            attributes.setSpecified(lastattr, true);
            attributes.setNonNormalizedValue(lastattr, fNonNormAttr.toString());
            if (fAugmentations) {
                addLocationItem(attributes, attributes.getLength() - 1);
            }
            return true;
        }
        char quote = (char) c;
        do {
            c = read();
            if (c == -1) {
                if (fReportErrors) {
                    fErrorReporter.reportError("HTML1007", null);
                }
                throw new EOFException();
            }
            if (c == '&') {
                int ce = scanEntityRef(fStringBuffer2, false);
                if (ce != -1) {
                    fStringBuffer.append((char) ce);
                } else {
                    fStringBuffer.append(fStringBuffer2);
                }
                fNonNormAttr.append(fStringBuffer2);
            } else if (c == '\t') {
                fStringBuffer.append(' ');
                fNonNormAttr.append('\t');
            } else if (c == '\r' || c == '\n') {
                fCurrentEntity.lineNumber++;
                fCurrentEntity.columnNumber = 0;
                if (c == '\r') {
                    int c2 = read();
                    if (c2 != '\n') {
                        fCurrentEntity.offset--;
                        fCurrentEntity.columnNumber--;
                    } else {
                        fNonNormAttr.append('\r');
                        c = c2;
                    }
                }
                fStringBuffer.append(' ');
                fNonNormAttr.append((char) c);
            } else if (c != quote) {
                fStringBuffer.append((char) c);
                fNonNormAttr.append((char) c);
            }
        } while (c != quote);
        fQName.setValues(null, aname, aname, null);
        String avalue = fStringBuffer.toString();
        attributes.addAttribute(fQName, "CDATA", avalue);
        int lastattr = attributes.getLength() - 1;
        attributes.setSpecified(lastattr, true);
        attributes.setNonNormalizedValue(lastattr, fNonNormAttr.toString());
        if (fAugmentations) {
            addLocationItem(attributes, attributes.getLength() - 1);
        }
    } else {
        fQName.setValues(null, aname, aname, null);
        attributes.addAttribute(fQName, "CDATA", "");
        attributes.setSpecified(attributes.getLength() - 1, true);
        fCurrentEntity.offset--;
        fCurrentEntity.columnNumber--;
        if (fAugmentations) {
            addLocationItem(attributes, attributes.getLength() - 1);
        }
    }
    return true;
}
