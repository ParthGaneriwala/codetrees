public void makeMove(int fromPos, int toPos) {
    final int fromIndex = fromPos - 1;
    final int toIndex = toPos - 1;
    // Pick out the piece on the fromPos square
    int blackBit = (black >>> fromIndex) & 1;
    int whiteBit = (white >>> fromIndex) & 1;
    int kingBit = (kings >>> fromIndex) & 1;
    // Move the piece to the toPos square
    int blackDest = blackBit << toIndex;
    int whiteDest = whiteBit << toIndex;
    int kingDest = kingBit << toIndex;
    // Crown if not king and either black on last or white on first row
    kingDest |= (blackDest & BOTTOM_ROW) | (whiteDest & TOP_ROW);
    // Move the piece to the toPos square
    black |= blackDest;
    white |= whiteDest;
    kings |= kingDest;
    // Remove the piece from the fromPos square
    int removeMask = ~(1 << fromIndex);
    black &= removeMask;
    white &= removeMask;
    kings &= removeMask;
    // Find squares containing captured pieces
    int distance = toPos - fromPos;
    // 0 for even rows, 1 for odd rows
    int rowModifier = (fromIndex >>> 2) & 1;
    int capturedSquare = -1;
    switch(distance) {
        case -9:
            // Capturing north west
            capturedSquare = fromPos - 4;
            break;
        case -7:
            // Capturing north east
            capturedSquare = fromPos - 3;
            break;
        case 7:
            // Capturing south west
            capturedSquare = fromPos + 4;
            break;
        case 9:
            // Capturing south east
            capturedSquare = fromPos + 5;
            break;
    }
    capturedSquare -= rowModifier;
    // Remove captured pieces
    if (capturedSquare > -1) {
        black &= ~(1 << (capturedSquare - 1));
        white &= ~(1 << (capturedSquare - 1));
        kings &= ~(1 << (capturedSquare - 1));
    }
}
