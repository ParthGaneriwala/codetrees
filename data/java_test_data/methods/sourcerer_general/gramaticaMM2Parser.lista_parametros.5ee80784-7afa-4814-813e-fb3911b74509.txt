// $ANTLR start "lista_parametros"
public final gramaticaMM2Parser.lista_parametros_return lista_parametros() throws RecognitionException {
    gramaticaMM2Parser.lista_parametros_return retval = new gramaticaMM2Parser.lista_parametros_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token COLON39 = null;
    Token COMMA41 = null;
    Token COLON43 = null;
    gramaticaMM2Parser.id_return id38 = null;
    gramaticaMM2Parser.tipo_return tipo40 = null;
    gramaticaMM2Parser.id_return id42 = null;
    gramaticaMM2Parser.tipo_return tipo44 = null;
    CommonTree COLON39_tree = null;
    CommonTree COMMA41_tree = null;
    CommonTree COLON43_tree = null;
    RewriteRuleTokenStream stream_COLON = new RewriteRuleTokenStream(adaptor, "token COLON");
    RewriteRuleTokenStream stream_COMMA = new RewriteRuleTokenStream(adaptor, "token COMMA");
    RewriteRuleSubtreeStream stream_id = new RewriteRuleSubtreeStream(adaptor, "rule id");
    RewriteRuleSubtreeStream stream_tipo = new RewriteRuleSubtreeStream(adaptor, "rule tipo");
    try {
        // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:100:18: ( id COLON tipo ( COMMA id COLON tipo )* -> ^( LIST_PARAM ( id tipo )+ ) )
        // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:100:20: id COLON tipo ( COMMA id COLON tipo )*
        {
            pushFollow(FOLLOW_id_in_lista_parametros809);
            id38 = id();
            state._fsp--;
            stream_id.add(id38.getTree());
            COLON39 = (Token) match(input, COLON, FOLLOW_COLON_in_lista_parametros811);
            stream_COLON.add(COLON39);
            pushFollow(FOLLOW_tipo_in_lista_parametros813);
            tipo40 = tipo();
            state._fsp--;
            stream_tipo.add(tipo40.getTree());
            // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:100:34: ( COMMA id COLON tipo )*
            loop8: do {
                int alt8 = 2;
                int LA8_0 = input.LA(1);
                if ((LA8_0 == COMMA)) {
                    alt8 = 1;
                }
                switch(alt8) {
                    case 1:
                        // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:100:35: COMMA id COLON tipo
                        {
                            COMMA41 = (Token) match(input, COMMA, FOLLOW_COMMA_in_lista_parametros816);
                            stream_COMMA.add(COMMA41);
                            pushFollow(FOLLOW_id_in_lista_parametros818);
                            id42 = id();
                            state._fsp--;
                            stream_id.add(id42.getTree());
                            COLON43 = (Token) match(input, COLON, FOLLOW_COLON_in_lista_parametros820);
                            stream_COLON.add(COLON43);
                            pushFollow(FOLLOW_tipo_in_lista_parametros822);
                            tipo44 = tipo();
                            state._fsp--;
                            stream_tipo.add(tipo44.getTree());
                        }
                        break;
                    default:
                        break loop8;
                }
            } while (true);
            // AST REWRITE
            // elements: tipo, id
            // token labels:
            // rule labels: retval
            // token list labels:
            // rule list labels:
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", retval != null ? retval.tree : null);
            root_0 = (CommonTree) adaptor.nil();
            // 100:57: -> ^( LIST_PARAM ( id tipo )+ )
            {
                // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:100:60: ^( LIST_PARAM ( id tipo )+ )
                {
                    CommonTree root_1 = (CommonTree) adaptor.nil();
                    root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(LIST_PARAM, "LIST_PARAM"), root_1);
                    if (!(stream_tipo.hasNext() || stream_id.hasNext())) {
                        throw new RewriteEarlyExitException();
                    }
                    while (stream_tipo.hasNext() || stream_id.hasNext()) {
                        adaptor.addChild(root_1, stream_id.nextTree());
                        adaptor.addChild(root_1, stream_tipo.nextTree());
                    }
                    stream_tipo.reset();
                    stream_id.reset();
                    adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
