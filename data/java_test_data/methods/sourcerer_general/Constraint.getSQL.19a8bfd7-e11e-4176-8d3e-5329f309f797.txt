public String getSQL() {
    StringBuffer sb = new StringBuffer();
    switch(getConstraintType()) {
        case SchemaObject.ConstraintTypes.PRIMARY_KEY:
            if (getMainColumns().length > 1 || (getMainColumns().length == 1 && !getName().isReservedName())) {
                if (!getName().isReservedName()) {
                    sb.append(Tokens.T_CONSTRAINT).append(' ');
                    sb.append(getName().statementName).append(' ');
                }
                sb.append(Tokens.T_PRIMARY).append(' ').append(Tokens.T_KEY);
                sb.append(getMain().getColumnListSQL(getMainColumns(), getMainColumns().length));
            }
            break;
        case SchemaObject.ConstraintTypes.UNIQUE:
            if (!getName().isReservedName()) {
                sb.append(Tokens.T_CONSTRAINT).append(' ');
                sb.append(getName().statementName);
                sb.append(' ');
            }
            sb.append(Tokens.T_UNIQUE);
            int[] col = getMainColumns();
            sb.append(getMain().getColumnListSQL(col, col.length));
            break;
        case SchemaObject.ConstraintTypes.FOREIGN_KEY:
            if (isForward) {
                sb.append(Tokens.T_ALTER).append(' ').append(Tokens.T_TABLE).append(' ');
                sb.append(getRef().getName().getSchemaQualifiedStatementName());
                sb.append(' ').append(Tokens.T_ADD).append(' ');
                getFKStatement(sb);
            } else {
                getFKStatement(sb);
            }
            break;
        case SchemaObject.ConstraintTypes.CHECK:
            if (isNotNull()) {
                break;
            }
            if (!getName().isReservedName()) {
                sb.append(Tokens.T_CONSTRAINT).append(' ');
                sb.append(getName().statementName).append(' ');
            }
            sb.append(Tokens.T_CHECK).append('(');
            sb.append(check.getSQL());
            sb.append(')');
            // should not throw as it is already tested OK
            break;
    }
    return sb.toString();
}
