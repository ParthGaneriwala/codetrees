public void testLargeJobs() throws IOException {
    JobInProgress job1 = submitJob(JobStatus.RUNNING, 10, 10);
    JobInfo info1 = scheduler.infos.get(job1);
    // Check scheduler variables
    assertEquals(0, info1.runningMaps);
    assertEquals(0, info1.runningReduces);
    assertEquals(10, info1.neededMaps);
    assertEquals(10, info1.neededReduces);
    assertEquals(0, info1.mapDeficit);
    assertEquals(0, info1.reduceDeficit);
    assertEquals(4.0, info1.mapFairShare);
    assertEquals(4.0, info1.reduceFairShare);
    // Advance time before submitting another job j2, to make j1 run before j2
    // deterministically.
    advanceTime(100);
    JobInProgress job2 = submitJob(JobStatus.RUNNING, 10, 10);
    JobInfo info2 = scheduler.infos.get(job2);
    // Check scheduler variables; the fair shares should now have been allocated
    // equally between j1 and j2, but j1 should have (4 slots)*(100 ms) deficit
    assertEquals(0, info1.runningMaps);
    assertEquals(0, info1.runningReduces);
    assertEquals(10, info1.neededMaps);
    assertEquals(10, info1.neededReduces);
    assertEquals(400, info1.mapDeficit);
    assertEquals(400, info1.reduceDeficit);
    assertEquals(2.0, info1.mapFairShare);
    assertEquals(2.0, info1.reduceFairShare);
    assertEquals(0, info2.runningMaps);
    assertEquals(0, info2.runningReduces);
    assertEquals(10, info2.neededMaps);
    assertEquals(10, info2.neededReduces);
    assertEquals(0, info2.mapDeficit);
    assertEquals(0, info2.reduceDeficit);
    assertEquals(2.0, info2.mapFairShare);
    assertEquals(2.0, info2.reduceFairShare);
    // Assign tasks and check that all slots are initially filled with job 1
    checkAssignment("tt1", "attempt_test_0001_m_000001_0 on tt1");
    checkAssignment("tt1", "attempt_test_0001_m_000002_0 on tt1");
    checkAssignment("tt1", "attempt_test_0001_r_000003_0 on tt1");
    checkAssignment("tt1", "attempt_test_0001_r_000004_0 on tt1");
    checkAssignment("tt2", "attempt_test_0001_m_000005_0 on tt2");
    checkAssignment("tt2", "attempt_test_0001_m_000006_0 on tt2");
    checkAssignment("tt2", "attempt_test_0001_r_000007_0 on tt2");
    checkAssignment("tt2", "attempt_test_0001_r_000008_0 on tt2");
    // Check that the scheduler has started counting the tasks as running
    // as soon as it launched them.
    assertEquals(4, info1.runningMaps);
    assertEquals(4, info1.runningReduces);
    assertEquals(6, info1.neededMaps);
    assertEquals(6, info1.neededReduces);
    assertEquals(0, info2.runningMaps);
    assertEquals(0, info2.runningReduces);
    assertEquals(10, info2.neededMaps);
    assertEquals(10, info2.neededReduces);
    // Finish up the tasks and advance time again. Note that we must finish
    // the task since FakeJobInProgress does not properly maintain running
    // tasks, so the scheduler will always get an empty task list from
    // the JobInProgress's getMapTasks/getReduceTasks and think they finished.
    taskTrackerManager.finishTask("tt1", "attempt_test_0001_m_000001_0");
    taskTrackerManager.finishTask("tt1", "attempt_test_0001_m_000002_0");
    taskTrackerManager.finishTask("tt1", "attempt_test_0001_r_000003_0");
    taskTrackerManager.finishTask("tt1", "attempt_test_0001_r_000004_0");
    taskTrackerManager.finishTask("tt2", "attempt_test_0001_m_000005_0");
    taskTrackerManager.finishTask("tt2", "attempt_test_0001_m_000006_0");
    taskTrackerManager.finishTask("tt2", "attempt_test_0001_r_000007_0");
    taskTrackerManager.finishTask("tt2", "attempt_test_0001_r_000008_0");
    advanceTime(200);
    assertEquals(0, info1.runningMaps);
    assertEquals(0, info1.runningReduces);
    assertEquals(0, info1.mapDeficit);
    assertEquals(0, info1.reduceDeficit);
    assertEquals(0, info2.runningMaps);
    assertEquals(0, info2.runningReduces);
    assertEquals(400, info2.mapDeficit);
    assertEquals(400, info2.reduceDeficit);
    // Assign tasks and check that all slots are now filled with job 2
    checkAssignment("tt1", "attempt_test_0002_m_000009_0 on tt1");
    checkAssignment("tt1", "attempt_test_0002_m_000010_0 on tt1");
    checkAssignment("tt1", "attempt_test_0002_r_000011_0 on tt1");
    checkAssignment("tt1", "attempt_test_0002_r_000012_0 on tt1");
    checkAssignment("tt2", "attempt_test_0002_m_000013_0 on tt2");
    checkAssignment("tt2", "attempt_test_0002_m_000014_0 on tt2");
    checkAssignment("tt2", "attempt_test_0002_r_000015_0 on tt2");
    checkAssignment("tt2", "attempt_test_0002_r_000016_0 on tt2");
    // Finish up the tasks and advance time again, but give job 2 only 50ms.
    taskTrackerManager.finishTask("tt1", "attempt_test_0002_m_000009_0");
    taskTrackerManager.finishTask("tt1", "attempt_test_0002_m_000010_0");
    taskTrackerManager.finishTask("tt1", "attempt_test_0002_r_000011_0");
    taskTrackerManager.finishTask("tt1", "attempt_test_0002_r_000012_0");
    taskTrackerManager.finishTask("tt2", "attempt_test_0002_m_000013_0");
    taskTrackerManager.finishTask("tt2", "attempt_test_0002_m_000014_0");
    taskTrackerManager.finishTask("tt2", "attempt_test_0002_r_000015_0");
    taskTrackerManager.finishTask("tt2", "attempt_test_0002_r_000016_0");
    advanceTime(50);
    assertEquals(0, info1.runningMaps);
    assertEquals(0, info1.runningReduces);
    assertEquals(100, info1.mapDeficit);
    assertEquals(100, info1.reduceDeficit);
    assertEquals(0, info2.runningMaps);
    assertEquals(0, info2.runningReduces);
    assertEquals(300, info2.mapDeficit);
    assertEquals(300, info2.reduceDeficit);
    // Assign tasks and check that all slots are now still with job 2
    checkAssignment("tt1", "attempt_test_0002_m_000017_0 on tt1");
    checkAssignment("tt1", "attempt_test_0002_m_000018_0 on tt1");
    checkAssignment("tt1", "attempt_test_0002_r_000019_0 on tt1");
    checkAssignment("tt1", "attempt_test_0002_r_000020_0 on tt1");
    checkAssignment("tt2", "attempt_test_0002_m_000021_0 on tt2");
    checkAssignment("tt2", "attempt_test_0002_m_000022_0 on tt2");
    checkAssignment("tt2", "attempt_test_0002_r_000023_0 on tt2");
    checkAssignment("tt2", "attempt_test_0002_r_000024_0 on tt2");
}
