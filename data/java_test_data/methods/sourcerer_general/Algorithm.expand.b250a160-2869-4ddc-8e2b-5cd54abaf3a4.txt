protected void expand(HashMap cliques, Vector curr, Vector cand, Vector not) {
    if (cand.isEmpty() && not.isEmpty()) {
        // the expanding process has come to an end
        int num = cliques.size();
        // the node in cur can form a new maximal clique
        Clique pc = new Clique(num);
        ArrayList alNodes = new ArrayList();
        Iterator it = curr.iterator();
        while (it.hasNext()) {
            Integer node = (Integer) it.next();
            alNodes.add(node);
        }
        pc.setCliqueNodes(alNodes);
        // add to the maximal clique list
        cliques.put(new Integer(pc.getCliuqueID()), pc);
    } else {
        int p, i;
        Integer q;
        Vector candq;
        Vector notq;
        Vector cutcand = new Vector((Vector) cand.clone());
        // get the index of the pivot node
        p = getPivot(cand, not);
        ArrayList cuts = getNeighbors(p);
        for (// get the trimmed candidates
        Iterator it = cuts.iterator(); // get the trimmed candidates
        it.hasNext(); ) cutcand.remove((Integer) it.next());
        for (// for each non-adjacent node
        i = 0; // for each non-adjacent node
        i < cutcand.size(); // for each non-adjacent node
        ++i) {
            q = (Integer) cutcand.get(i);
            // remove from candidate list
            cand.remove(q);
            // add the expanded node
            curr.add(q);
            // 1.2 get the adjacent
            ArrayList adjs = getNeighbors(q.intValue());
            // 2.1 get insertion
            candq = getIntersect(cand, adjs);
            notq = getIntersect(not, adjs);
            // 2.3 recursive process
            expand(cliques, curr, candq, notq);
            // pop the top element a new cursive process
            curr.remove(curr.lastElement());
            if (cancelled) {
                break;
            }
        }
    // TODO: here we need to set the monitor progress
    /*
            if (taskMonitor != null) {
                i++;
                taskMonitor.setPercentCompleted((i * 100) / inputNetwork.getNodeCount());
            }*/
    }
}
