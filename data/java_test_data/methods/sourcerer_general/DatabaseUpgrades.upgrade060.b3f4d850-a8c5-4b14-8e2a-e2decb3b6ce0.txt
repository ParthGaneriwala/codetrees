public static Vector upgrade060(Vector messages) throws Exception {
    TransactionStatus status = DatabaseConnection.startTransaction(getTransactionDefinition());
    try {
        Connection conn = DatabaseConnection.getConnection();
        // create jam_group table
        DatabaseConnection.executeUpdate(AnsiQueryHandler.STATEMENT_CREATE_GROUP_TABLE, conn);
        messages.add("Added jam_group table");
        // create jam_role table
        DatabaseConnection.executeUpdate(AnsiQueryHandler.STATEMENT_CREATE_ROLE_TABLE, conn);
        messages.add("Added jam_role table");
        // create jam_role_map table
        DatabaseConnection.executeUpdate(AnsiQueryHandler.STATEMENT_CREATE_ROLE_MAP_TABLE, conn);
        messages.add("Added jam_role_map table");
        // setup basic roles
        WikiDatabase.setupRoles(conn);
        messages.add("Added basic wiki roles.");
        // setup basic groups
        WikiDatabase.setupGroups(conn);
        messages.add("Added basic wiki groups.");
        // convert old-style admins to new
        String sql = null;
        // assign admins all permissions during upgrades just to be safe.  for
        // new installs it is sufficient just to give them the basics
        Role[] adminRoles = { Role.ROLE_ADMIN, Role.ROLE_EDIT_EXISTING, Role.ROLE_EDIT_NEW, Role.ROLE_MOVE, Role.ROLE_SYSADMIN, Role.ROLE_TRANSLATE, Role.ROLE_UPLOAD, Role.ROLE_VIEW };
        for (int i = 0; i < adminRoles.length; i++) {
            Role adminRole = adminRoles[i];
            sql = "insert into jam_role_map ( " + "  role_name, wiki_user_id " + ") " + "select '" + adminRole.getAuthority() + "', wiki_user_id " + "from jam_wiki_user where is_admin = 1 ";
            DatabaseConnection.executeUpdate(sql, conn);
        }
        if (Environment.getBooleanValue(Environment.PROP_TOPIC_FORCE_USERNAME)) {
            sql = "delete from jam_role_map " + "where role_name = ? " + "and group_id = (select group_id from jam_group where group_name = ?) ";
            WikiPreparedStatement stmt = new WikiPreparedStatement(sql);
            stmt.setString(1, Role.ROLE_EDIT_EXISTING.getAuthority());
            stmt.setString(2, WikiGroup.GROUP_ANONYMOUS);
            stmt.executeUpdate(conn);
            stmt = new WikiPreparedStatement(sql);
            stmt.setString(1, Role.ROLE_EDIT_NEW.getAuthority());
            stmt.setString(2, WikiGroup.GROUP_ANONYMOUS);
            stmt.executeUpdate(conn);
        }
        if (!Environment.getBooleanValue(Environment.PROP_TOPIC_NON_ADMIN_TOPIC_MOVE)) {
            sql = "delete from jam_role_map " + "where role_name = ? " + "and group_id = (select group_id from jam_group where group_name = ?) ";
            WikiPreparedStatement stmt = new WikiPreparedStatement(sql);
            stmt.setString(1, Role.ROLE_MOVE.getAuthority());
            stmt.setString(2, WikiGroup.GROUP_REGISTERED_USER);
            stmt.executeUpdate(conn);
        }
        sql = "alter table jam_wiki_user drop column is_admin ";
        DatabaseConnection.executeUpdate(sql, conn);
        messages.add("Converted admin users to new role structure.");
    } catch (Exception e) {
        DatabaseConnection.rollbackOnException(status, e);
        try {
            DatabaseConnection.executeUpdate(AnsiQueryHandler.STATEMENT_DROP_ROLE_MAP_TABLE);
        } catch (Exception ex) {
        }
        try {
            DatabaseConnection.executeUpdate(AnsiQueryHandler.STATEMENT_DROP_ROLE_TABLE);
        } catch (Exception ex) {
        }
        try {
            DatabaseConnection.executeUpdate(AnsiQueryHandler.STATEMENT_DROP_GROUP_TABLE);
        } catch (Exception ex) {
        }
        throw e;
    } catch (Error err) {
        DatabaseConnection.rollbackOnException(status, err);
        throw err;
    }
    DatabaseConnection.commit(status);
    return messages;
}
