public TIntHashSet getValidPageIds(File dir, int minLinkCount, ProgressNotifier pn) throws IOException {
    File linkCountFile = new File(dir.getPath() + File.separatorChar + "linkcount.csv");
    File pageFile = new File(dir.getPath() + File.separatorChar + "page.csv");
    TIntHashSet pageIds = new TIntHashSet();
    BufferedReader input = new BufferedReader(new InputStreamReader(new FileInputStream(linkCountFile), "UTF-8"));
    if (pn == null)
        pn = new ProgressNotifier(1);
    pn.startTask(linkCountFile.length() + pageFile.length(), "gathering valid page ids");
    long bytesRead = 0;
    String line;
    while ((line = input.readLine()) != null) {
        bytesRead = bytesRead + line.length();
        String[] vals = line.split(",");
        int id = new Integer(vals[0]);
        int lc_in = new Integer(vals[1]);
        int lc_out = new Integer(vals[2]);
        if (lc_in >= minLinkCount && lc_out >= minLinkCount)
            pageIds.add(id);
        pn.update(bytesRead);
    }
    input.close();
    input = new BufferedReader(new InputStreamReader(new FileInputStream(pageFile), "UTF-8"));
    Pattern p = Pattern.compile("(\\d*),.*?,(\\d*)");
    while ((line = input.readLine()) != null) {
        bytesRead = bytesRead + line.length();
        Matcher m = p.matcher(line);
        if (m.matches()) {
            int id = Integer.parseInt(m.group(1));
            int type = Integer.parseInt(m.group(2));
            if (type == Page.CATEGORY)
                pageIds.add(id);
        }
        pn.update(bytesRead);
    }
    input.close();
    return pageIds;
}
