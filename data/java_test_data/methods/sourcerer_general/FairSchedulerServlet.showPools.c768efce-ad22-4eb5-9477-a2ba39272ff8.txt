private void showPools(PrintWriter out, boolean advancedView) {
    PoolManager poolManager = scheduler.getPoolManager();
    synchronized (poolManager) {
        out.print("<h2>Pools</h2>\n");
        out.print("<table border=\"2\" cellpadding=\"5\" cellspacing=\"2\">\n");
        out.print("<tr><th>Pool</th><th>Running Jobs</th>" + "<th>Min Maps</th><th>Min Reduces</th>" + "<th>Running Maps</th><th>Running Reduces</th></tr>\n");
        List<Pool> pools = new ArrayList<Pool>(poolManager.getPools());
        Collections.sort(pools, new Comparator<Pool>() {

            public int compare(Pool p1, Pool p2) {
                if (p1.isDefaultPool())
                    return 1;
                else if (p2.isDefaultPool())
                    return -1;
                else
                    return p1.getName().compareTo(p2.getName());
            }
        });
        for (Pool pool : pools) {
            int runningMaps = 0;
            int runningReduces = 0;
            for (JobInProgress job : pool.getJobs()) {
                JobInfo info = scheduler.infos.get(job);
                if (info != null) {
                    runningMaps += info.runningMaps;
                    runningReduces += info.runningReduces;
                }
            }
            out.print("<tr>\n");
            out.printf("<td>%s</td>\n", pool.getName());
            out.printf("<td>%s</td>\n", pool.getJobs().size());
            out.printf("<td>%s</td>\n", poolManager.getAllocation(pool.getName(), TaskType.MAP));
            out.printf("<td>%s</td>\n", poolManager.getAllocation(pool.getName(), TaskType.REDUCE));
            out.printf("<td>%s</td>\n", runningMaps);
            out.printf("<td>%s</td>\n", runningReduces);
            out.print("</tr>\n");
        }
        out.print("</table>\n");
    }
}
