private void copy(FileStatus srcstat, Path relativedst, OutputCollector<WritableComparable<?>, Text> outc, Reporter reporter) throws IOException {
    Path absdst = new Path(destPath, relativedst);
    int totfiles = job.getInt(SRC_COUNT_LABEL, -1);
    assert totfiles >= 0 : "Invalid file count " + totfiles;
    // if a directory, ensure created even if empty
    if (srcstat.isDir()) {
        if (destFileSys.exists(absdst)) {
            if (!destFileSys.getFileStatus(absdst).isDir()) {
                throw new IOException("Failed to mkdirs: " + absdst + " is a file.");
            }
        } else if (!destFileSys.mkdirs(absdst)) {
            throw new IOException("Failed to mkdirs " + absdst);
        }
        // if this changes, all directory work might as well be done in reduce
        return;
    }
    if (destFileSys.exists(absdst) && !overwrite && !needsUpdate(srcstat, destFileSys, absdst)) {
        outc.collect(null, new Text("SKIP: " + srcstat.getPath()));
        ++skipcount;
        reporter.incrCounter(Counter.SKIP, 1);
        updateStatus(reporter);
        return;
    }
    Path tmpfile = new Path(job.get(TMP_DIR_LABEL), relativedst);
    long cbcopied = 0L;
    FSDataInputStream in = null;
    FSDataOutputStream out = null;
    try {
        // open src file
        in = srcstat.getPath().getFileSystem(job).open(srcstat.getPath());
        reporter.incrCounter(Counter.BYTESEXPECTED, srcstat.getLen());
        // open tmp file
        out = create(tmpfile, reporter, srcstat);
        // copy file
        for (int cbread; (cbread = in.read(buffer)) >= 0; ) {
            out.write(buffer, 0, cbread);
            cbcopied += cbread;
            reporter.setStatus(String.format("%.2f ", cbcopied * 100.0 / srcstat.getLen()) + absdst + " [ " + StringUtils.humanReadableInt(cbcopied) + " / " + StringUtils.humanReadableInt(srcstat.getLen()) + " ]");
        }
    } finally {
        checkAndClose(in);
        checkAndClose(out);
    }
    if (cbcopied != srcstat.getLen()) {
        throw new IOException("File size not matched: copied " + bytesString(cbcopied) + " to tmpfile (=" + tmpfile + ") but expected " + bytesString(srcstat.getLen()) + " from " + srcstat.getPath());
    } else {
        if (totfiles == 1) {
            // Copying a single file; use dst path provided by user as destination
            // rather than destination directory, if a file
            Path dstparent = absdst.getParent();
            if (!(destFileSys.exists(dstparent) && destFileSys.getFileStatus(dstparent).isDir())) {
                absdst = dstparent;
            }
        }
        if (destFileSys.exists(absdst) && destFileSys.getFileStatus(absdst).isDir()) {
            throw new IOException(absdst + " is a directory");
        }
        if (!destFileSys.mkdirs(absdst.getParent())) {
            throw new IOException("Failed to craete parent dir: " + absdst.getParent());
        }
        rename(tmpfile, absdst);
        FileStatus dststat = destFileSys.getFileStatus(absdst);
        if (dststat.getLen() != srcstat.getLen()) {
            destFileSys.delete(absdst, false);
            throw new IOException("File size not matched: copied " + bytesString(dststat.getLen()) + " to dst (=" + absdst + ") but expected " + bytesString(srcstat.getLen()) + " from " + srcstat.getPath());
        }
        updatePermissions(srcstat, dststat);
    }
    // report at least once for each file
    ++copycount;
    reporter.incrCounter(Counter.BYTESCOPIED, cbcopied);
    reporter.incrCounter(Counter.COPY, 1);
    updateStatus(reporter);
}
