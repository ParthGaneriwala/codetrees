public static void addCaches(CacheContext context) {
    LOG.info("adding caches");
    CacheManager manager = CacheManager.getInstance();
    // NOTE: The default createInMemoryCache requires that objects are invalidated by the system
    // otherwise the objects will not expire
    // url = Instance
    CacheUtils.createInMemoryCache(Constants.SYSTEM_INSTANCE_CACHE, new InstanceCacheEntryFactory(context), 5);
    // 1 = Key
    CacheUtils.createInMemoryCache(Constants.SYSTEM_KEY_CACHE, new PrivateKeyCacheEntryFactory(context), 1);
    // userId = User
    CacheUtils.createInMemoryCache(Constants.SYSTEM_USER_CACHE, new UserCacheEntryFactory(context), 100000);
    // tableName = LookupList
    CacheUtils.createInMemoryCache(Constants.SYSTEM_LOOKUP_LIST_CACHE, new LookupListCacheEntryFactory(context), 100);
    // projectId = project title
    CacheUtils.createInMemoryCache(Constants.SYSTEM_PROJECT_NAME_CACHE, new ProjectNameCacheEntryFactory(context), 100000);
    // projectUniqueId = projectId
    CacheUtils.createInMemoryCache(Constants.SYSTEM_PROJECT_UNIQUE_ID_CACHE, new ProjectUniqueIdCacheEntryFactory(context), 100000);
    // projectId = project w/features w/permissions w/team members
    CacheUtils.createInMemoryCache(Constants.SYSTEM_PROJECT_CACHE, new ProjectCacheEntryFactory(context), 2000);
    // feed =
    {
        // Create a cache with 20 objects max and which expire after 60 seconds
        String cacheName = Constants.SYSTEM_RSS_FEED_CACHE;
        Ehcache cache = CacheUtils.getCache(cacheName);
        if (cache == null) {
            cache = new Cache(cacheName, 20, CacheUtils.memoryStoreEvictionPolicy, CacheUtils.overflowToDisk, CacheUtils.diskStorePath, false, 60, CacheUtils.timeToIdle, CacheUtils.diskPersistent, CacheUtils.diskExpiryThreadIntervalSeconds, null);
            SelfPopulatingCache selfPopulatingCache = new SelfPopulatingCache(cache, new FeedCacheEntryFactory(context));
            manager.addCache(selfPopulatingCache);
            LOG.info("cache created: " + cache.getName());
        }
    }
    // newsId = news article
    // TODO: Make use of this cache...
    // CacheUtils.createInMemoryCache(Constants.SYSTEM_NEWS_ARTICLE_CACHE, new NewsArticleCacheEntryFactory(context), 10000);
    // wikiId = wiki
    // TODO: Make use of this cache...
    // CacheUtils.createInMemoryCache(Constants.SYSTEM_WIKI_CACHE, new WikiCacheEntryFactory(context), 10000);
    // zipCode = locationBean
    CacheUtils.createInMemoryCache(Constants.SYSTEM_ZIP_CODE_CACHE, new LocationCacheEntryFactory(context), 44000);
    // badgeId = Badge
    CacheUtils.createInMemoryCache(Constants.SYSTEM_BADGE_LIST_CACHE, new BadgeCacheEntryFactory(context), 200);
    // categoryId = ProjectCategory
    CacheUtils.createInMemoryCache(Constants.SYSTEM_PROJECT_CATEGORY_LIST_CACHE, new ProjectCategoryCacheEntryFactory(context), 200);
    // (String) project id - project ticket id = (Integer) ticket id
    CacheUtils.createInMemoryCache(Constants.SYSTEM_PROJECT_TICKET_ID_CACHE, new ProjectTicketIdCacheEntryFactory(context), 200);
    // (String) portal type | page name | [file name] = (DashboardPage) dashboardPage
    CacheUtils.createInMemoryCache(Constants.SYSTEM_DASHBOARD_PAGE_CACHE, new DashboardPageCacheEntryFactory(context), 300);
    // (String) dashboard page | portlet window id = (String) portlet content
    CacheUtils.createInMemoryBlockingCache(Constants.SYSTEM_DASHBOARD_PORTLET_CACHE, 300);
    // Session authentication for Token Session Validation when the application is running...
    if (context.getApplicationPrefs() != null) {
        if ("Token".equals(context.getApplicationPrefs().get("LOGIN.MODE"))) {
            String cacheName = Constants.SESSION_AUTHENTICATION_TOKEN_CACHE;
            Ehcache cache = CacheUtils.getCache(cacheName);
            if (cache == null) {
                // Create a short-lived cache because the tokens are for a single use
                cache = new Cache(cacheName, 10000, CacheUtils.memoryStoreEvictionPolicy, CacheUtils.overflowToDisk, CacheUtils.diskStorePath, false, 30, CacheUtils.timeToIdle, CacheUtils.diskPersistent, CacheUtils.diskExpiryThreadIntervalSeconds, null);
                SelfPopulatingCache selfPopulatingCache = new SelfPopulatingCache(cache, new ValidationTokenEntryFactory(context));
                manager.addCache(selfPopulatingCache);
                LOG.info("cache created: " + cache.getName());
            }
        }
    }
}
