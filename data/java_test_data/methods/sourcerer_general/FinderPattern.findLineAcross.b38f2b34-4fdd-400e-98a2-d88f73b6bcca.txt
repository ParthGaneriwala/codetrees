static Line[] findLineAcross(boolean[][] image) {
    final int READ_HORIZONTAL = 0;
    final int READ_VERTICAL = 1;
    int imageWidth = image.length;
    int imageHeight = image[0].length;
    // int currentX = 0, currentY = 0;
    Point current = new Point();
    Vector lineAcross = new Vector();
    // buffer contains recent length of modules which has same brightness
    int[] lengthBuffer = new int[5];
    int bufferPointer = 0;
    // start to read horizontally
    int direction = READ_HORIZONTAL;
    boolean lastElement = QRCodeImageReader.POINT_LIGHT;
    while (true) {
        // check points in image
        boolean currentElement = image[current.getX()][current.getY()];
        if (currentElement == lastElement) {
            // target point has same brightness with last point
            lengthBuffer[bufferPointer]++;
        } else {
            // target point has different brightness with last point
            if (currentElement == QRCodeImageReader.POINT_LIGHT) {
                if (checkPattern(lengthBuffer, bufferPointer)) {
                    // detected pattern
                    int x1, y1, x2, y2;
                    if (direction == READ_HORIZONTAL) {
                        // obtain X coordinates of both side of the detected horizontal pattern
                        x1 = current.getX();
                        for (int j = 0; j < 5; j++) {
                            x1 -= lengthBuffer[j];
                        }
                        // right side is last X coordinate
                        x2 = current.getX() - 1;
                        y1 = y2 = current.getY();
                    } else {
                        x1 = x2 = current.getX();
                        // obtain Y coordinates of both side of the detected vertical pattern
                        // upper side is sum of length of buffer
                        y1 = current.getY();
                        for (int j = 0; j < 5; j++) {
                            y1 -= lengthBuffer[j];
                        }
                        // bottom side is last Y coordinate
                        y2 = current.getY() - 1;
                    }
                    lineAcross.addElement(new Line(x1, y1, x2, y2));
                }
            }
            bufferPointer = (bufferPointer + 1) % 5;
            lengthBuffer[bufferPointer] = 1;
            lastElement = !lastElement;
        }
        // determine if read next, change read direction or terminate this loop
        if (direction == READ_HORIZONTAL) {
            if (current.getX() < imageWidth - 1) {
                current.translate(1, 0);
            } else if (current.getY() < imageHeight - 1) {
                current.set(0, current.getY() + 1);
                lengthBuffer = new int[5];
            } else {
                // reset target point
                current.set(0, 0);
                lengthBuffer = new int[5];
                // start to read vertically
                direction = READ_VERTICAL;
            }
        } else {
            // reading vertically
            if (current.getY() < imageHeight - 1)
                current.translate(0, 1);
            else if (current.getX() < imageWidth - 1) {
                current.set(current.getX() + 1, 0);
                lengthBuffer = new int[5];
            } else {
                break;
            }
        }
    }
    Line[] foundLines = new Line[lineAcross.size()];
    for (int i = 0; i < foundLines.length; i++) foundLines[i] = (Line) lineAcross.elementAt(i);
    canvas.drawLines(foundLines, Color.LIGHTGREEN);
    return foundLines;
}
