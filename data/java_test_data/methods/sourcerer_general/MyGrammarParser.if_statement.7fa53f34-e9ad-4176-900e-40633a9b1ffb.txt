// $ANTLR start "if_statement"
public final MyGrammarParser.if_statement_return if_statement() throws RecognitionException {
    MyGrammarParser.if_statement_return retval = new MyGrammarParser.if_statement_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token END46 = null;
    MyGrammarParser.guarded_statements_return guarded_statements44 = null;
    MyGrammarParser.if_else_part_return if_else_part45 = null;
    CommonTree END46_tree = null;
    RewriteRuleTokenStream stream_END = new RewriteRuleTokenStream(adaptor, "token END");
    RewriteRuleSubtreeStream stream_guarded_statements = new RewriteRuleSubtreeStream(adaptor, "rule guarded_statements");
    RewriteRuleSubtreeStream stream_if_else_part = new RewriteRuleSubtreeStream(adaptor, "rule if_else_part");
    try {
        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:176:2: ( guarded_statements ( if_else_part )? END -> ^( IF_STATEMENT guarded_statements ( if_else_part )? ) )
        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:176:4: guarded_statements ( if_else_part )? END
        {
            pushFollow(FOLLOW_guarded_statements_in_if_statement1276);
            guarded_statements44 = guarded_statements();
            state._fsp--;
            stream_guarded_statements.add(guarded_statements44.getTree());
            // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:176:23: ( if_else_part )?
            int alt10 = 2;
            int LA10_0 = input.LA(1);
            if ((LA10_0 == ELSE)) {
                alt10 = 1;
            }
            switch(alt10) {
                case 1:
                    // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:176:24: if_else_part
                    {
                        pushFollow(FOLLOW_if_else_part_in_if_statement1279);
                        if_else_part45 = if_else_part();
                        state._fsp--;
                        stream_if_else_part.add(if_else_part45.getTree());
                    }
                    break;
            }
            END46 = (Token) match(input, END, FOLLOW_END_in_if_statement1283);
            stream_END.add(END46);
            // AST REWRITE
            // elements: guarded_statements, if_else_part
            // token labels:
            // rule labels: retval
            // token list labels:
            // rule list labels:
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", retval != null ? retval.tree : null);
            root_0 = (CommonTree) adaptor.nil();
            // 176:43: -> ^( IF_STATEMENT guarded_statements ( if_else_part )? )
            {
                // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:176:46: ^( IF_STATEMENT guarded_statements ( if_else_part )? )
                {
                    CommonTree root_1 = (CommonTree) adaptor.nil();
                    root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(IF_STATEMENT, "IF_STATEMENT"), root_1);
                    adaptor.addChild(root_1, stream_guarded_statements.nextTree());
                    // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:176:81: ( if_else_part )?
                    if (stream_if_else_part.hasNext()) {
                        adaptor.addChild(root_1, stream_if_else_part.nextTree());
                    }
                    stream_if_else_part.reset();
                    adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
