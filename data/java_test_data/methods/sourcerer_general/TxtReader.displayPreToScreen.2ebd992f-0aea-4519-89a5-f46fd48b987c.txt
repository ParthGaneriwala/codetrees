public void displayPreToScreen(int n) {
    /**
     * Set the to up page
     */
    isToUp = true;
    /**
     * Set the current line
     */
    mCurrentLine = mCurrentLine - n;
    if (mCurrentLine < 0) {
        Log.d("displayPreToScreen", "set the mCurrentLine is 0.........");
        mCurrentLine = 0;
    }
    /**
     * If current line is 0, load new buffer from up
     */
    if (mCurrentLine == 0 && !mBeforeOfDoc) {
        mCurrentLine = 0;
        Log.d("displayPreToScreen", "read pre data.........");
        readPreBuffer();
        analysisDisplayBuffer();
        int lastLine = mMyLines.size();
        /**
         * Length before the last line
         */
        int lastLineLength = mMyLines.get(lastLine - 1).beforeLineLength;
        /**
         * Deal with the file data length less than a screen data
         */
        if (lastLine <= mLinesOfOneScreen) {
            mCurrentLine = 0;
        } else {
            mCurrentLine = lastLine - mLinesOfOneScreen;
        }
        int currentLineLength = mMyLines.get(mCurrentLine).beforeLineLength;
        /**
         * Calculate the screen data length when display to screen
         */
        int len = 0;
        if (lastLine <= mLinesOfOneScreen) {
            len = lastLineLength;
        } else {
            len = lastLineLength - currentLineLength;
        }
        mScreenData = new byte[len];
        System.arraycopy(mDisplayBuffer, currentLineLength, mScreenData, 0, len);
        try {
            mTextView.setText(new String(mScreenData, this.encoding));
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        System.gc();
        /**
         * computer the percent
         */
        double start = (mMyLines.get(mCurrentLine).offset + mScreenData.length);
        double total = mFileLength;
        mPercent = ((int) ((start / total) * 100));
        return;
    }
    /**
     * If the current are not less than 0, have data before, move the line number
     */
    if (mCurrentLine >= 0) {
        Log.d("displayPreToScreen", "display data to screen .........");
        int lastLine = 0;
        if (mMyLines.size() <= mLinesOfOneScreen) {
            lastLine = mMyLines.size();
        } else {
            lastLine = mCurrentLine + mLinesOfOneScreen;
        }
        int currentLineLength = mMyLines.get(mCurrentLine).beforeLineLength;
        int lastLineLength = mMyLines.get(lastLine - 1).beforeLineLength;
        int len = 0;
        if (mCurrentLine == 0) {
            len = lastLineLength;
            mScreenData = new byte[len];
            System.arraycopy(mDisplayBuffer, 0, mScreenData, 0, len);
        } else {
            len = lastLineLength - currentLineLength;
            mScreenData = new byte[len];
            System.arraycopy(mDisplayBuffer, currentLineLength, mScreenData, 0, len);
        }
        try {
            mTextView.setText(new String(mScreenData, this.encoding));
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        /**
         * computer the percent
         */
        double start = (mMyLines.get(mCurrentLine).offset + mScreenData.length);
        double total = mFileLength;
        mPercent = ((int) ((start / total) * 100));
        return;
    }
}
