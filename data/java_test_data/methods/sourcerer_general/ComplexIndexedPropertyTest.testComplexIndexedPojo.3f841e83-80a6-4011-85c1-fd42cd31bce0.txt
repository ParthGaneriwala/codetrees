public void testComplexIndexedPojo() {
    BeanRegistry.registerType(ComplexIndexedPojo.class);
    BeanRegistry.registerType(SimplePojo.class);
    // Setup POJOs
    SimplePojo a = new SimplePojo();
    a.setCharField('a');
    final SimplePojo b = new SimplePojo();
    b.setIntField(15);
    ComplexIndexedPojo pojo = new ComplexIndexedPojo();
    pojo.setComplexArray(new SimplePojo[] { a, b, null });
    // Enhance
    ComplexIndexedPojo epojo = BeanEnhancer.addPropertyChangeSupport(pojo);
    assertTrue(epojo instanceof PropertyChangeListenerSupport);
    assertNotNull(epojo.getComplexArray());
    assertEquals(3, epojo.getComplexArray().length);
    SimplePojo ea = epojo.getComplexArray()[0];
    assertEquals('a', ea.getCharField());
    final SimplePojo eb = epojo.getComplexArray(1);
    assertEquals(15, eb.getIntField());
    assertTrue(ea instanceof PropertyChangeListenerSupport);
    ea = epojo.getComplexArray(0);
    assertTrue(ea instanceof PropertyChangeListenerSupport);
    PropertyChangeListenerSupport pcls = (PropertyChangeListenerSupport) epojo;
    PropertyChangeListener pcl = new PropertyChangeListener() {

        public void propertyChange(PropertyChangeEvent evt) {
            assertTrue(evt instanceof IndexedPropertyChangeEvent);
            IndexedPropertyChangeEvent ievt = (IndexedPropertyChangeEvent) evt;
            assertEquals(1, ievt.getIndex());
            assertEquals("complexArray", ievt.getPropertyName());
            assertEquals('\u0000', ievt.getOldValue());
            assertEquals('g', ievt.getNewValue());
        }
    };
    pcls.addPropertyChangeListener("complexArray", pcl);
    PropertyChangeListenerSupport pcls1 = (PropertyChangeListenerSupport) eb;
    PropertyChangeListener pcl1 = new PropertyChangeListener() {

        public void propertyChange(PropertyChangeEvent evt) {
            assertTrue(evt instanceof PropertyChangeEvent);
            assertEquals("charField", evt.getPropertyName());
            assertEquals('\u0000', evt.getOldValue());
            assertEquals('g', evt.getNewValue());
        }
    };
    pcls1.addPropertyChangeListener("charField", pcl1);
    eb.setCharField('g');
    pcls.removePropertyChangeListener("complexArray", pcl);
    pcls1.removePropertyChangeListener("charField", pcl1);
    final SimplePojo b1 = new SimplePojo();
    b1.setIntField(22);
    pcl = new PropertyChangeListener() {

        public void propertyChange(PropertyChangeEvent evt) {
            assertTrue(evt instanceof IndexedPropertyChangeEvent);
            IndexedPropertyChangeEvent ievt = (IndexedPropertyChangeEvent) evt;
            assertEquals(1, ievt.getIndex());
            assertEquals("complexArray", ievt.getPropertyName());
            assertEquals(eb, evt.getOldValue());
            assertEquals(b1, evt.getNewValue());
        }
    };
    pcls.addPropertyChangeListener("complexArray", pcl);
    epojo.setComplexArray(1, b1);
    SimplePojo eb1 = epojo.getComplexArray(1);
    assertTrue(eb1 instanceof PropertyChangeListenerSupport);
    assertTrue(eb1 != b1);
    assertEquals(22, eb1.getIntField());
    // Make sure we no longer listen to eb changes
    eb.setCharField('h');
}
