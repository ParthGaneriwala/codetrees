public static String toHtmlFormField(CustomFormField field, WikiToHTMLContext context) {
    // Set a default value
    if (field.getValue() == null) {
        field.setValue(field.getDefaultValue());
    }
    // Protect against any arbitrary input
    String fieldName = StringUtils.toHtmlValue(field.getName());
    // Return output based on type
    switch(field.getType()) {
        case CustomFormField.TEXTAREA:
            String textAreaValue = StringUtils.replace(field.getValue(), "^", CRLF);
            return ("<textarea cols=\"" + field.getColumns() + "\" rows=\"" + field.getRows() + "\" name=\"" + fieldName + "\">" + StringUtils.toString(textAreaValue) + "</textarea>");
        case CustomFormField.SELECT:
            LookupList lookupList = field.getLookupList();
            int selectedItemId = -1;
            for (LookupElement thisElement : lookupList) {
                if (field.getValue().equals(thisElement.getDescription())) {
                    selectedItemId = thisElement.getCode();
                }
            }
            return lookupList.getHtmlSelect(fieldName, selectedItemId);
        case CustomFormField.CHECKBOX:
            return ("<input type=\"checkbox\" name=\"" + fieldName + "\" value=\"ON\" " + ("true".equals(field.getValue()) ? "checked" : "") + ">");
        case CustomFormField.CALENDAR:
            String calendarValue = field.getValue();
            if (StringUtils.hasText(calendarValue)) {
                try {
                    String convertedDate = DateUtils.getUserToServerDateTimeString(null, DateFormat.SHORT, DateFormat.LONG, field.getValue());
                    Timestamp timestamp = DatabaseUtils.parseTimestamp(convertedDate);
                    Locale locale = Locale.getDefault();
                    int dateFormat = DateFormat.SHORT;
                    SimpleDateFormat dateFormatter = (SimpleDateFormat) SimpleDateFormat.getDateInstance(dateFormat, locale);
                    calendarValue = dateFormatter.format(timestamp);
                } catch (Exception e) {
                    LOG.error(e);
                }
            }
            // Output with a calendar control
            String language = System.getProperty("LANGUAGE");
            String country = System.getProperty("COUNTRY");
            return ("<input type=\"text\" name=\"" + fieldName + "\" id=\"" + fieldName + "\" size=\"10\" value=\"" + StringUtils.toHtmlValue(calendarValue) + "\" > " + "<a href=\"javascript:popCalendar('inputForm', '" + fieldName + "','" + language + "','" + country + "');\">" + "<img src=\"" + context.getServerUrl() + "/images/icons/stock_form-date-field-16.gif\" " + "border=\"0\" align=\"absmiddle\" height=\"16\" width=\"16\"/></a>");
        case CustomFormField.PERCENT:
            return ("<input type=\"text\" name=\"" + fieldName + "\" size=\"5\" value=\"" + StringUtils.toHtmlValue(field.getValue()) + "\"> " + "%");
        case CustomFormField.INTEGER:
            // Determine the value to display in the field
            String integerValue = StringUtils.toHtmlValue(field.getValue());
            if (StringUtils.hasText(integerValue)) {
                try {
                    NumberFormat formatter = NumberFormat.getInstance();
                    integerValue = formatter.format(StringUtils.getIntegerNumber(field.getValue()));
                } catch (Exception e) {
                    LOG.warn("Could not format integer: " + field.getValue());
                }
            }
            return ("<input type=\"text\" name=\"" + fieldName + "\" size=\"8\" value=\"" + integerValue + "\"> ");
        case CustomFormField.FLOAT:
            // Determine the value to display in the field
            String decimalValue = StringUtils.toHtmlValue(field.getValue());
            if (StringUtils.hasText(decimalValue)) {
                try {
                    NumberFormat formatter = NumberFormat.getInstance();
                    decimalValue = formatter.format(StringUtils.getDoubleNumber(field.getValue()));
                } catch (Exception e) {
                    LOG.warn("Could not decimal format: " + field.getValue());
                }
            }
            return ("<input type=\"text\" name=\"" + fieldName + "\" size=\"8\" value=\"" + decimalValue + "\"> ");
        case CustomFormField.CURRENCY:
            // Use a currencyCode for formatting
            String currencyCode = field.getValueCurrency();
            if (currencyCode == null) {
                currencyCode = field.getCurrency();
            }
            if (!StringUtils.hasText(currencyCode)) {
                currencyCode = "USD";
            }
            HtmlSelect currencyCodeList = HtmlSelectCurrencyCode.getSelect(fieldName + "Currency", currencyCode);
            // Determine the valut to display in the field
            String currencyValue = StringUtils.toHtmlValue(field.getValue());
            if (StringUtils.hasText(currencyValue)) {
                try {
                    NumberFormat formatter = NumberFormat.getNumberInstance();
                    formatter.setMaximumFractionDigits(2);
                    currencyValue = formatter.format(StringUtils.getDoubleNumber(field.getValue()));
                } catch (Exception e) {
                    LOG.warn("Could not currencyCode format: " + field.getValue());
                }
            }
            return (currencyCodeList.getHtml() + "<input type=\"text\" name=\"" + fieldName + "\" size=\"8\" value=\"" + currencyValue + "\"> ");
        case CustomFormField.EMAIL:
            return ("<input type=\"text\" " + "name=\"" + fieldName + "\" maxlength=\"255\" size=\"40\" value=\"" + StringUtils.toHtmlValue(field.getValue()) + "\" />");
        case CustomFormField.PHONE:
            return ("<input type=\"text\" " + "name=\"" + fieldName + "\" maxlength=\"60\" size=\"20\" value=\"" + StringUtils.toHtmlValue(field.getValue()) + "\" />");
        case CustomFormField.URL:
            String value = StringUtils.toHtmlValue(field.getValue());
            if (StringUtils.hasText(value)) {
                if (!value.contains("://")) {
                    value = "http://" + field.getValue();
                }
            }
            return ("<input type=\"text\" " + "name=\"" + fieldName + "\" maxlength=\"255\" size=\"40\" value=\"" + StringUtils.toHtmlValue(value) + "\" />");
        default:
            int maxlength = field.getMaxLength();
            int size = -1;
            if (maxlength > -1) {
                if (maxlength > 40) {
                    size = 40;
                } else {
                    size = maxlength;
                }
            }
            return ("<input type=\"text\" " + "name=\"" + fieldName + "\" " + (maxlength == -1 ? "" : "maxlength=\"" + maxlength + "\" ") + (size == -1 ? "" : "size=\"" + size + "\" ") + "value=\"" + StringUtils.toHtmlValue(field.getValue()) + "\" />");
    }
}
