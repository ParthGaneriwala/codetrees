protected void writePixels(LEDataOutputStream destination, int bitCount, AdaptiveRasterImage anImage) throws JimiException, IOException {
    anImage.setRGBDefault(false);
    int height = anImage.getHeight();
    int scansize = anImage.getWidth();
    int[] buff = new int[scansize];
    // write AND's
    if (bitCount == 2) {
        for (int i = height - 1; i > -1; i--) {
            anImage.getChannel(i, buff, 0);
            for (int j = 0; j < scansize; j++) {
                // HIDDEN LOOP INCREMENTS BY 4
                byte t = (byte) (buff[j] << 6);
                t |= (byte) (buff[++j] << 4);
                t |= (byte) (buff[++j] << 2);
                t |= (byte) (buff[++j]);
            }
        }
        // write XOR's
        // if alpha channel is trivial rock on with 0's
        byte[] pad = new byte[scansize / 4];
        for (int i = 0; i < height; i++) {
            destination.write(pad);
        }
    } else if (bitCount == 4) {
        for (int i = height - 1; i > -1; i--) {
            anImage.getChannel(i, buff, 0);
            for (int j = 0; j < scansize; j++) {
                // HIDDEN LOOP INCREMENTS BY 2!!!!
                byte t = (byte) (buff[j] << 4);
                t |= (byte) buff[++j];
                destination.writeByte(t);
            }
        }
        byte[] pad = new byte[scansize / 2];
        for (int i = 0; i < height; i++) {
            destination.write(pad);
        }
    } else if (bitCount == 8) {
        for (int i = height - 1; i > -1; i--) {
            anImage.getChannel(i, buff, 0);
            for (int j = 0; j < scansize; j++) {
                destination.writeByte((byte) buff[j]);
            }
        }
        // write XOR's
        // if alpha channel is trivial rock on with 0's
        byte[] pad = new byte[scansize];
        for (int i = 0; i < height; i++) {
            destination.write(pad);
        }
    } else {
    // ERROR!
    }
}
