private void validateCreateTable(createTableDesc crtTblDesc) throws SemanticException {
    // no duplicate column names
    // currently, it is a simple n*n algorithm - this can be optimized later if need be
    // but it should not be a major bottleneck as the number of columns are anyway not so big
    Iterator<FieldSchema> iterCols = crtTblDesc.getCols().iterator();
    List<String> colNames = new ArrayList<String>();
    while (iterCols.hasNext()) {
        String colName = iterCols.next().getName();
        Iterator<String> iter = colNames.iterator();
        while (iter.hasNext()) {
            String oldColName = iter.next();
            if (colName.equalsIgnoreCase(oldColName))
                throw new SemanticException(ErrorMsg.DUPLICATE_COLUMN_NAMES.getMsg());
        }
        colNames.add(colName);
    }
    if (crtTblDesc.getBucketCols() != null) {
        // all columns in cluster and sort are valid columns
        Iterator<String> bucketCols = crtTblDesc.getBucketCols().iterator();
        while (bucketCols.hasNext()) {
            String bucketCol = bucketCols.next();
            boolean found = false;
            Iterator<String> colNamesIter = colNames.iterator();
            while (colNamesIter.hasNext()) {
                String colName = colNamesIter.next();
                if (bucketCol.equalsIgnoreCase(colName)) {
                    found = true;
                    break;
                }
            }
            if (!found)
                throw new SemanticException(ErrorMsg.INVALID_COLUMN.getMsg());
        }
    }
    if (crtTblDesc.getSortCols() != null) {
        // all columns in cluster and sort are valid columns
        Iterator<Order> sortCols = crtTblDesc.getSortCols().iterator();
        while (sortCols.hasNext()) {
            String sortCol = sortCols.next().getCol();
            boolean found = false;
            Iterator<String> colNamesIter = colNames.iterator();
            while (colNamesIter.hasNext()) {
                String colName = colNamesIter.next();
                if (sortCol.equalsIgnoreCase(colName)) {
                    found = true;
                    break;
                }
            }
            if (!found)
                throw new SemanticException(ErrorMsg.INVALID_COLUMN.getMsg());
        }
    }
    if (crtTblDesc.getPartCols() != null) {
        // there is no overlap between columns and partitioning columns
        Iterator<FieldSchema> partColsIter = crtTblDesc.getPartCols().iterator();
        while (partColsIter.hasNext()) {
            String partCol = partColsIter.next().getName();
            Iterator<String> colNamesIter = colNames.iterator();
            while (colNamesIter.hasNext()) {
                String colName = colNamesIter.next();
                if (partCol.equalsIgnoreCase(colName))
                    throw new SemanticException(ErrorMsg.COLUMN_REPAEATED_IN_PARTITIONING_COLS.getMsg());
            }
        }
    }
}
