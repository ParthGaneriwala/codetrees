protected void loadTarget() {
    // TODO - implement this method
    // Load values from target object into editor components
    super.loadTarget();
    Defect targetDefect = (Defect) target;
    assert (targetDefect != null);
    Product targetProduct = targetDefect.getProduct();
    SimpleDateFormat dateFormatter = new SimpleDateFormat("MM/dd/yy hh:mm a");
    String timeStr = dateFormatter.format(targetDefect.getDateCreated());
    idField.setText("ID-" + targetDefect.getID());
    creationLabel.setText(targetDefect.getCreator() + "   [" + timeStr + "]");
    titleField.setText(targetDefect.getTitle());
    productBox.removeAllItems();
    productBox.addItem("Unassigned");
    ArrayList<String> products = ControllerFacade.getInstance().getProductList();
    for (String product : products) {
        productBox.addItem(product);
    }
    if (targetProduct != null) {
        productBox.setSelectedItem(targetProduct.toString());
    } else {
        productBox.setSelectedIndex(0);
    }
    statusBox.removeAllItems();
    statusBox.addItem("NEW");
    statusBox.addItem("OPEN");
    statusBox.addItem("CANNOT_REPRODUCE");
    statusBox.addItem("WORKS_AS_DESIGNED");
    statusBox.addItem("RESOLVED");
    statusBox.addItem("CLOSED");
    statusBox.setSelectedItem(targetDefect.getDefectStatus().toString());
    moduleBox.removeAllItems();
    moduleBox.addItem("Unassigned");
    if (targetProduct != null) {
        ArrayList<String> modules = ControllerFacade.getInstance().getModuleList(targetProduct.getName());
        for (String module : modules) {
            moduleBox.addItem(module);
        }
        if (targetDefect.getModule() != null) {
            moduleBox.setSelectedItem(targetDefect.getModule().toString());
        } else {
            moduleBox.setSelectedIndex(0);
        }
    }
    buildBox.removeAllItems();
    buildBox.addItem("Unassigned");
    if (targetProduct != null) {
        ArrayList<String> builds = ControllerFacade.getInstance().getBuildList(targetProduct.getName());
        for (String build : builds) {
            buildBox.addItem(build);
        }
        if (targetDefect.getBuild() != null) {
            buildBox.setSelectedItem(targetDefect.getBuild().toString());
        } else {
            buildBox.setSelectedIndex(0);
        }
    }
    severityBox.removeAllItems();
    severityBox.addItem("Unassigned");
    severityBox.addItem("IRRITATING");
    severityBox.addItem("WORK_AROUND");
    severityBox.addItem("NO_WORK_AROUND");
    severityBox.addItem("DESTRUCTIVE");
    severityBox.setSelectedItem(targetDefect.getSeverity().toString());
    priorityBox.removeAllItems();
    priorityBox.addItem("Unassigned");
    priorityBox.addItem("LOW");
    priorityBox.addItem("MEDIUM");
    priorityBox.addItem("HIGH");
    priorityBox.setSelectedItem(targetDefect.getPriority().toString());
    testerBox.removeAllItems();
    testerBox.addItem("Unassigned");
    Collection<User> users = ControllerFacade.getInstance().getUsers();
    for (User user : users) {
        if (user.hasRole(Roles.TESTER)) {
            testerBox.addItem(user);
        }
    }
    testerBox.setSelectedItem(targetDefect.getTester());
    developerBox.removeAllItems();
    developerBox.addItem("Unassigned");
    for (User user : users) {
        if (user.hasRole(Roles.DEVELOPER)) {
            developerBox.addItem(user);
        }
    }
    developerBox.setSelectedItem(targetDefect.getDeveloper());
    descriptionArea.setText(targetDefect.getDescription());
    int selectedRow = commentsTable.getSelectedRow();
    commentsTableModel.setRowCount(0);
    Iterator<Comment> comments = targetDefect.getCommentCollection().iteratorByDate();
    Comment comment;
    while (comments.hasNext()) {
        comment = comments.next();
        Object[] row = new Object[2];
        row[0] = comment;
        row[1] = dateFormatter.format(comment.getDateCreated());
        commentsTableModel.addRow(row);
    }
    if (selectedRow != -1 && (selectedRow < commentsTableModel.getRowCount())) {
        commentsTable.setRowSelectionInterval(selectedRow, selectedRow);
    }
    editComment();
    System.out.println("target loaded");
}
