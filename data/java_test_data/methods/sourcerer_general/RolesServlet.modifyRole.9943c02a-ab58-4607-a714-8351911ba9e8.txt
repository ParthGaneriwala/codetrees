private void modifyRole(HttpServletRequest request, ModelAndView next, WikiPageInfo pageInfo) throws Exception {
    String updateRole = request.getParameter("updateRole");
    Role role = null;
    if (!StringUtils.isBlank(request.getParameter("Submit"))) {
        try {
            // once created a role name cannot be modified, so the text field
            // will be disabled in the form.
            boolean update = StringUtils.isBlank(request.getParameter("roleName"));
            String roleName = (update) ? updateRole : request.getParameter("roleName");
            role = new Role(roleName);
            role.setDescription(request.getParameter("roleDescription"));
            WikiUtil.validateRole(role);
            WikiBase.getDataHandler().writeRole(role, null, update);
            if (!StringUtils.isBlank(updateRole) && updateRole.equals(role.getAuthority())) {
                next.addObject("message", new WikiMessage("roles.message.roleupdated", role.getAuthority()));
            } else {
                next.addObject("message", new WikiMessage("roles.message.roleadded", role.getAuthority()));
            }
        } catch (WikiException e) {
            next.addObject("message", e.getWikiMessage());
        } catch (Exception e) {
            logger.severe("Failure while adding role", e);
            next.addObject("message", new WikiMessage("roles.message.rolefail", e.getMessage()));
        }
    } else if (!StringUtils.isBlank(updateRole)) {
        // FIXME - use a cached list of roles instead of iterating
        // load details for the selected role
        Collection roles = WikiBase.getDataHandler().getAllRoles();
        Iterator roleIterator = roles.iterator();
        while (roleIterator.hasNext()) {
            Role tempRole = (Role) roleIterator.next();
            if (tempRole.getAuthority().equals(updateRole)) {
                role = tempRole;
            }
        }
    }
    if (role != null) {
        next.addObject("roleName", role.getAuthority());
        next.addObject("roleDescription", role.getDescription());
    }
    this.view(request, next, pageInfo);
}
