public String save() throws Exception {
    System.out.println("saving PaymentsPant...");
    availableAmount = getAvailableAmount();
    if (paymentsPant.getAmount() <= 0 || paymentsPant.getAmount() > availableAmount || paymentsPant.getCode() == null || paymentsPant.getCode().equals("")) {
        errorMessage(getText("paymentsPant.amount") + " " + getText("errors.dynamicdoublerange") + " " + availableAmount + ".");
        return INPUT;
    }
    boolean isNew = (paymentsPant.getId() == null);
    employee = (Employee) getSession().getAttribute("employee");
    employee = employeeManager.get(employee.getId());
    periodPaymentEmployee = periodPaymentEmployeeManager.getCurrentPeriodByIdEmployeeAndRole(employee.getId(), employee.getRoleByName("ROLE_EMPLOYEE_DRESSMAKER").getIdRole());
    paymentsPant.setPeriodPaymentEmployee(periodPaymentEmployee);
    if (isNew) {
        paymentsPant = paymentsPantManager.save(paymentsPant);
        List<ProcessDressmaker> processDressmakerList = processDressmakerManager.findByEmployeePay(employee);
        Double cont = paymentsPant.getAmount();
        for (ProcessDressmaker cP : processDressmakerList) {
            AsignationPantPay a = new AsignationPantPay();
            a.setProcessDressmaker(cP);
            a.setPaymentsPant(paymentsPant);
            if (cP.getTotalCurrentAmount() < cont) {
                a.setAmountPayed(cP.getTotalCurrentAmount());
                asignationPantPayManager.save(a);
                cont = cont - cP.getTotalCurrentAmount();
                cP.setTotalCurrentAmount(0D);
                processDressmakerManager.save(cP);
            } else {
                a.setAmountPayed(cont);
                asignationPantPayManager.save(a);
                cP.setTotalCurrentAmount(cP.getTotalCurrentAmount() - cont);
                processDressmakerManager.save(cP);
                break;
            }
        }
        BalanceEmployee bE = new BalanceEmployee();
        bE.setPeriodPaymentEmployee(periodPaymentEmployee);
        bE.setPaymentsPant(paymentsPant);
        bE.setAmountPaid(paymentsPant.getAmount());
        bE.setDateBalance(paymentsPant.getDatePay());
        bE.setObservation(observation);
        // for payment normal
        bE.setTypeBalance(3);
        bE.setBalance(periodPaymentEmployee.getCurrentAmount() - paymentsPant.getAmount());
        balanceEmployeeManager.save(bE);
        periodPaymentEmployee.setAmountPayment(periodPaymentEmployee.getAmountPayment() + paymentsPant.getAmount());
        periodPaymentEmployee.setCurrentAmount(periodPaymentEmployee.getCurrentAmount() - paymentsPant.getAmount());
        periodPaymentEmployeeManager.save(periodPaymentEmployee);
    }
    String key = (isNew) ? "paymentsPant.added" : "paymentsPant.updated";
    saveMessage(getText(key));
    return SUCCESS;
}
