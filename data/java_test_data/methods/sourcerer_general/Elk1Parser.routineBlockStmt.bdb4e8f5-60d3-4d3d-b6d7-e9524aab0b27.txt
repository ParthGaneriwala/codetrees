private ParseNode routineBlockStmt() {
    // special for the Block deal with it separately
    BlockNode blockParent;
    BlockStatementNode blockLeftChild;
    ProgramNode blockProg1;
    ProgramNode blockProg2;
    BlockStatementNode blockrightChild;
    Boolean isEndOfBlock = new Boolean(false);
    // special for the Block deal with it separately
    blockParent = new BlockNode(NonterminalGrammarSymbol.BLOCK);
    blockLeftChild = new BlockStatementNode(nowReadingsymbol);
    blockProg1 = new ProgramNode(PROGRAM);
    blockProg2 = new ProgramNode(PROGRAM);
    blockProg1.appendChild(blockProg2);
    blockEnds.push(isEndOfBlock);
    // to make the nowReadingsymbol the first token in the block
    readToken();
    if (nowReadingsymbol.isBlockSymbol(BlockSymbol.END)) {
        // deal with empty block {}
        blockrightChild = new BlockStatementNode(nowReadingsymbol);
        blockParent.appendChild(blockLeftChild);
        blockParent.appendChild(blockProg1);
        blockParent.appendChild(blockrightChild);
        // remove this block end
        blockEnds.pop();
        if (!isEndOfFile()) {
            isEndOfCurrentBlock();
            isEndOfCurrentLoop();
        }
        return blockParent;
    } else {
        while (!blockEnds.peek()) {
            if (nowReadingsymbol.isKeyword(Keyword.ROUTINE)) {
                error("routine declaration can not be in a block it can only be Global!");
                // ???????????????????????????????to terminate error loop
                return blockParent;
            }
            // ??????????
            ParseNode eachSingleProg = new ParseNode(PROGRAM);
            if (// normal stmtList
            nowReadingsymbol.isTypeKeyword() || nowReadingsymbol.isOperator(Operator.AT) || nowReadingsymbol.isTerminal(IdentifierToken.class) || nowReadingsymbol.isOperator(Operator.PRINT) || // nowReadingsymbol.isKeyword(Keyword.IF) ||
            nowReadingsymbol.isLoopSymbol(LoopSymbol.LOOPSTART) || nowReadingsymbol.isKeyword(Keyword.CALL) || nowReadingsymbol.isOperator(Operator.INC) || nowReadingsymbol.isOperator(Operator.DEC)) {
                eachSingleProg = stmtList();
            } else if (nowReadingsymbol.isBlockSymbol(BlockSymbol.START)) {
                eachSingleProg = routineBlockStmt();
            } else if (nowReadingsymbol.isKeyword(Keyword.IF)) {
                // /eachSingleProg = routineBlockStmt();
                eachSingleProg = routineIf();
            } else if (nowReadingsymbol.isKeyword(Keyword.RETURN)) {
                // eachSingleProg = loopCtrlStmt();
                KeywordNode returnParent = new KeywordNode(nowReadingsymbol);
                readToken();
                if (nowReadingsymbol.isPuctuation(PunctuationSymbol.SEMICOLON)) {
                    readToken();
                    isEndOfCurrentBlock();
                    eachSingleProg = returnParent;
                } else {
                    returnParent.appendChild(expr());
                    if (nowReadingsymbol.isPuctuation(PunctuationSymbol.SEMICOLON)) {
                        readToken();
                        isEndOfCurrentBlock();
                        eachSingleProg = returnParent;
                    } else {
                        error("the return statement syntax is wrong!!");
                    }
                }
            } else {
                error("sytax error in routineBlockStmt");
            }
            blockProg2.appendChild(eachSingleProg);
        }
        // to deal with {{    {print;}    }} this case
        BlockStatementToken blockSymbolEnd = BlockStatementToken.make(null, "}", BlockSymbol.END);
        BlockStatementNode blockSymbolEndNode = new BlockStatementNode(new TokenGrammarSymbol(blockSymbolEnd));
        blockrightChild = new BlockStatementNode(blockSymbolEndNode);
        blockParent.appendChild(blockLeftChild);
        blockParent.appendChild(blockProg1);
        blockParent.appendChild(blockrightChild);
        if (nowReading instanceof NullToken) {
            accept();
        }
        // �ر��ж�
        blockEnds.pop();
        // might be bug??????????????????????????
        if (!isAccepted) {
            isEndOfCurrentBlock();
            isEndOfCurrentLoop();
        }
        return blockParent;
    }
}
