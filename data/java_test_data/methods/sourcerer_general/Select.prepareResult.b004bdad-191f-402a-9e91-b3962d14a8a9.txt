void prepareResult(Session session) throws HsqlException {
    resolveAll(session, true);
    if (iGroupLen > 0) {
        // has been set in Parser
        isGrouped = true;
        groupColumnNames = new HashSet();
        for (int i = iResultLen; i < iResultLen + iGroupLen; i++) {
            // MarcH: this is wrong for a CASE WHEN statement in a SELECT CASE WHEN ...,<something aggregate> statement
            // collectColumnName collects no columns if exprColumns[i]'s expressiontype is Expression.CASEWHEN
            // collectAllColumnNames collects all columns used in the CASE WHEN statement
            // exprColumns[i].collectColumnName(groupColumnNames);
            exprColumns[i].collectAllColumnNames(groupColumnNames);
        }
    }
    int len = exprColumns.length;
    resultMetaData = new Result.ResultMetaData(len);
    Result.ResultMetaData rmd = resultMetaData;
    // tony_lai@users having
    int groupByStart = iResultLen;
    int groupByEnd = groupByStart + iGroupLen;
    int orderByStart = groupByEnd + iHavingLen;
    int orderByEnd = orderByStart + iOrderLen;
    for (int i = 0; i < len; i++) {
        Expression e = exprColumns[i];
        rmd.colTypes[i] = e.getDataType();
        rmd.colSizes[i] = e.getColumnSize();
        rmd.colScales[i] = e.getColumnScale();
        if (e.isAggregate()) {
            isAggregated = true;
        }
        if (i >= groupByStart && i < groupByEnd && !exprColumns[i].canBeInGroupBy()) {
            Trace.error(Trace.INVALID_GROUP_BY, exprColumns[i]);
        }
        if (i >= groupByEnd && i < groupByEnd + iHavingLen && !exprColumns[i].isConditional()) {
            Trace.error(Trace.INVALID_HAVING, exprColumns[i]);
        }
        if (i >= orderByStart && i < orderByEnd && !exprColumns[i].canBeInOrderBy()) {
            Trace.error(Trace.INVALID_ORDER_BY, exprColumns[i]);
        }
        if (i < iResultLen) {
            rmd.colLabels[i] = e.getAlias();
            rmd.isLabelQuoted[i] = e.isAliasQuoted();
            rmd.schemaNames[i] = e.getTableSchemaName();
            rmd.tableNames[i] = e.getTableName();
            rmd.colNames[i] = e.getColumnName();
            if (rmd.isTableColumn(i)) {
                rmd.colNullable[i] = e.nullability;
                rmd.isIdentity[i] = e.isIdentity;
                rmd.isWritable[i] = e.isWritable;
            }
            rmd.classNames[i] = e.getValueClassName();
        }
    }
    // selected columns
    checkAggregateOrGroupByColumns(0, iResultLen);
    // having columns
    checkAggregateOrGroupByColumns(groupByEnd, orderByStart);
    // order by columns
    checkAggregateOrGroupByOrderColumns(orderByStart, orderByEnd);
    prepareSort();
    simpleLimit = (isDistinctSelect == false && isGrouped == false && unionSelect == null && iOrderLen == 0);
}
