public MobileApnState queryUserState(String sgsnid, String msisdn, String random) {
    MobileApnState apnstate = new MobileApnState();
    apnstate.setMobile(msisdn);
    apnstate.setSgsnid(sgsnid);
    List<String> list = new ArrayList<String>();
    SHQueryService.QUERY_RESULT.put(msisdn + "," + random, list);
    Sgsn sgsn = com.sxit.netquality.service.BasicSetService.ALL_SGSNS.get(sgsnid);
    String params = sgsn.getSgsnip() + " " + sgsn.getLoginname() + " " + sgsn.getLoginpwd() + " " + msisdn;
    String cmd = ERICSSON_CMD + " " + params;
    if (sgsnid.indexOf("2") != -1)
        cmd = ERICSSON_CMD_2 + " " + params;
    try {
        _LOG.debug("准备启动........");
        Runtime runtime = Runtime.getRuntime();
        Process p = runtime.exec(cmd);
        _LOG.debug("开始执行命令::::" + cmd);
        BufferedReader br = new BufferedReader(new InputStreamReader(p.getInputStream()));
        String line = null;
        int i = 0;
        int subdataline = 0;
        List<Integer> subapnlines = new ArrayList<Integer>();
        int activeapnline = 0;
        while ((line = br.readLine()) != null) {
            i++;
            list.add(line);
            consoleResultLines += LINE_SEP_PRE + line + LINE_SEP;
            System.out.println(line);
            if (line.indexOf("Subscriber Data") != -1) {
                subdataline = i;
            }
            if (line.indexOf("Subscribed PDP") != -1) {
                subapnlines.add(i);
            }
            if (line.indexOf("Active PDP") != -1) {
                activeapnline = i;
            }
        }
        list.add("isover");
        br.close();
        System.out.println(subdataline + "==>" + subapnlines + "==>" + activeapnline);
        // 分析数据
        this.parseLines(apnstate, msisdn, sgsnid, list, subdataline, subapnlines, activeapnline);
    } catch (Exception e) {
        _LOG.error("爱立信的数据查询有误", e);
        java.io.Writer sw = new java.io.StringWriter();
        apnstate.setHasexception(true);
        try {
            java.io.PrintWriter pw = new java.io.PrintWriter(sw, true);
            e.printStackTrace(pw);
            pw.flush();
            pw.close();
            sw.flush();
            sw.close();
            String s = sw.toString();
            if (s.length() > 2000)
                apnstate.setException(s.substring(0, 2000));
            else
                apnstate.setException(sw.toString());
        } catch (Exception ee) {
            _LOG.error("关闭StringWriter有误", ee);
        }
    }
    apnstate.toWebString();
    return apnstate;
}
