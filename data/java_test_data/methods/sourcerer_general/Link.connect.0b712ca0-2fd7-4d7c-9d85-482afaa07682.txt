protected List<Point2D> connect(GeomObject startObject, Integer startBorder, GeomObject endObject, Integer endBorder) {
    List<Point2D> vertices = new ArrayList<Point2D>();
    List<Integer> startBorders = new ArrayList<Integer>();
    startBorders.add(startBorder);
    List<Integer> endBorders = new ArrayList<Integer>();
    endBorders.add(endBorder);
    List<Port> startPorts = startObject.getFreePorts(startBorders);
    List<Port> endPorts = endObject.getFreePorts(endBorders);
    if (startPorts.isEmpty() || endPorts.isEmpty())
        // object can't be connected due to absent the free
        return vertices;
    // ports
    Port startPort = startPorts.get(startPorts.size() / 2);
    Port endPort = endPorts.get(endPorts.size() / 2);
    Vector2D vectorNormalStart = startPort.getNormalVector();
    Vector2D vectorNormalEnd = endPort.getNormalVector();
    // calculate bounding box
    Rectangle2D boundRect = getBoundRect(startObject, endObject);
    // calculate angle between normal vectors
    Double ang = vectorNormalStart.ang(vectorNormalEnd);
    // calculate length of a step
    Double step = (1.1 + 0.3 * Math.random()) * Math.max(boundRect.getWidth(), boundRect.getHeight());
    // calculate distance
    Double distance = startPort.getPoint().distance(endPort.getPoint());
    // Calculate intersection point of two lines
    Line2D endLine = endPort.getNormalLine(2.5 * step);
    step /= 3;
    // step = 0.5 * calculateStep(startPort.getObject(),
    // endPort.getObject());
    Line2D startLine = startPort.getNormalLine(step);
    Point2D intersectPoint = Util.calculateIntersection(startLine, endLine);
    startPort.setState(Port.State.allocated);
    vertices.add(startPort.getPoint());
    while ((ang != Math.PI / 2 || ang != -Math.PI / 2) && intersectPoint == null) {
        // check the intersection with the end object
        boolean endObjectIntersect = endObject.getShape().intersectsLine(startLine);
        if (endObjectIntersect) {
            // create the specific port for this intersection
            Port newPort = endObject.createNewPortForAttachedLine(startLine);
            if (newPort != null) {
                newPort.setState(State.allocated);
                vertices.add(newPort.getPoint());
                return vertices;
            }
        }
        // new start point is a simple old end point of start line
        Port newStartPort = new Port(startLine.getP2(), startPort.getObject(), startLine);
        // to calculate new end port
        Vector2D newNormalVector1 = newStartPort.getNormalVector();
        Vector2D newNormalVector2 = newNormalVector1.mult(-1.0);
        Vector2D newVector3 = vectorNormalStart;
        Line2D newStartLine1 = newNormalVector1.getLine(newStartPort.getPoint(), step);
        Line2D newStartLine2 = newNormalVector2.getLine(newStartPort.getPoint(), step);
        Line2D newStartLine3 = newVector3.getLine(newStartPort.getPoint(), step);
        // Choose the direction
        // 1) calculate distance to the end port
        Double distance1 = newStartLine1.getP2().distance(endPort.getPoint());
        Double distance2 = newStartLine2.getP2().distance(endPort.getPoint());
        Double distance3 = newStartLine3.getP2().distance(endPort.getPoint());
        // 2) select the smallest distance which is the correct direction
        if (distance1 < distance2) {
            if (distance1 < distance3) {
                vectorNormalStart = newNormalVector1;
                startLine = newStartLine1;
            } else {
                vectorNormalStart = newVector3;
                startLine = newStartLine3;
            }
        } else {
            if (distance2 < distance3) {
                vectorNormalStart = newNormalVector2;
                startLine = newStartLine2;
            } else {
                vectorNormalStart = newVector3;
                startLine = newStartLine3;
            }
        }
        vertices.add(newStartPort.getPoint());
        ang = vectorNormalStart.ang(vectorNormalEnd);
        intersectPoint = Util.calculateIntersection(startLine, endLine);
    }
    vertices.add(intersectPoint);
    vertices.add(endPort.getPoint());
    endPort.setState(Port.State.allocated);
    return vertices;
}
