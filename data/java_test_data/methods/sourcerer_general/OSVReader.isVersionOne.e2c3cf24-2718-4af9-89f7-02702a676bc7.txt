private boolean isVersionOne(File file, String[] groups) throws NotRightFormatException {
    if (groups.length <= 0) {
        System.err.println("Please check are there records in file. May be it is empty.");
        return false;
    }
    String[] headerLines = groups[0].split("\n");
    if (headerLines.length <= 0) {
        System.out.println("It is not 'Version 1' OSV-file. No header lines.");
        return false;
    }
    Pattern p = Pattern.compile(".*Version[ \\t]+(1)\\s*");
    Matcher m = p.matcher(headerLines[0]);
    if (!m.matches()) {
        System.out.println("It is not 'Version 1' OSV-file. First line not contain 'Version 1'.");
        return false;
    }
    System.out.println("It seems 'Version 1' OSV-file.");
    if (headerLines.length < 5) {
        System.err.println("Bad 'Version 1' file format: header contains less than 5 lines.");
        return false;
    }
    /*
         * Parse header lines and find interesting descriptors
         */
    int nameStart = 0, nameEnd = 0, resultStart = 0, resultEnd = 0, splitStart = 0;
    boolean namePresented = false, resultPresented = false, splitPresented = false;
    Pattern pName = Pattern.compile(".*@NAME(.+),(.+)\\s*");
    Pattern pResult = Pattern.compile(".*@RESULT(.+),(.+)\\s*");
    Pattern pSplits = Pattern.compile(".*@SPLITS[ \\t]+(\\d+)\\s*");
    for (int i = 1; i < headerLines.length; i++) {
        Matcher mName = pName.matcher(headerLines[i]);
        if (mName.matches()) {
            nameStart = Integer.parseInt(mName.group(1).trim());
            nameEnd = Integer.parseInt(mName.group(2).trim());
            nameEnd = nameEnd + nameStart - 1;
            namePresented = true;
            continue;
        }
        Matcher mResult = pResult.matcher(headerLines[i]);
        if (mResult.matches()) {
            resultStart = Integer.parseInt(mResult.group(1).trim());
            resultEnd = Integer.parseInt(mResult.group(2).trim());
            resultEnd = resultEnd + resultStart - 1;
            resultPresented = true;
            continue;
        }
        Matcher mSplits = pSplits.matcher(headerLines[i]);
        if (mSplits.matches()) {
            splitStart = Integer.parseInt(mSplits.group(1));
            splitPresented = true;
            continue;
        }
    // Here is line that doesn't match NAME, nor RESULT, nor SPLITS.
    // May be it is event description.
    // So it should be used as Title for main window.
    }
    // Check if all interesting descriptors presented
    if (!namePresented) {
        System.err.println("Bad 'Version 1' file format: @NAME is not presented.");
        return false;
    }
    if (!resultPresented) {
        System.err.println("Bad 'Version 1' file format: @RESULT is not presented.");
        return false;
    }
    if (!splitPresented) {
        System.err.println("Bad 'Version 1' file format: @SPLITS is not presented.");
        return false;
    }
    eventDescription = headerLines[4].trim();
    // All interesting descriptors presented.
    // Parse.
    groupsNames = new ArrayList<String>();
    LinkedList<Group> allGroupsTemp = new LinkedList<Group>();
    try {
        for (int i = 1; i < groups.length; i++) {
            allGroupsTemp.add(new Group());
            // Split all group lines
            String[] groupLines = groups[i].split("\\n");
            // Parse first line in group: find name, number of points and distance
            String groupName = "";
            int groupPoints = 0;
            int groupDistance = 0;
            Pattern pGroup = Pattern.compile("[ \\t]*([^\\s]+)[ \\t]*,[ \\t]*(\\d+).*,[ \\t]*(\\d+)\\.(\\d+).*\\s*");
            Matcher mGroup = pGroup.matcher(groupLines[0]);
            if (!mGroup.matches()) {
                System.err.println("Bad 'Version 1' file format. Bad group description line: '" + groupLines[0] + "'");
                return false;
            } else {
            }
            groupName = mGroup.group(1);
            groupPoints = Integer.parseInt(mGroup.group(2));
            groupDistance = 1000 * Integer.parseInt(mGroup.group(3)) + Integer.parseInt(mGroup.group(4));
            Distance d = new Distance(groupName, groupDistance, groupPoints + 1);
            // Find equal distance in other groups and store this fact
            Iterator<Group> it = allGroupsTemp.iterator();
            while (it.hasNext()) {
                Distance dTmp = it.next().getDistance();
                if (dTmp == null)
                    break;
                if (dTmp.equals(d)) {
                    dTmp.setName(dTmp.getName() + " " + d.getName());
                    d = dTmp;
                    break;
                }
            }
            groupsNames.add(groupName);
            allGroupsTemp.getLast().setDistance(d);
            allGroupsTemp.getLast().setName(groupName);
            if (DEBUG)
                System.out.println(groupName);
            // Parse each line in the group
            for (int j = 1; j < groupLines.length; j++) {
                String athleteName = "";
                String athleteResult = "";
                Time[] athleteSplits = new Time[groupPoints + 1];
                if (groupLines[j].length() < nameEnd) {
                    System.err.println("Bad 'Version 1' file format. Length of line: '" + groupLines[j] + "' is not enough for @NAME.");
                    return false;
                } else {
                    athleteName = groupLines[j].substring(nameStart - 1, nameEnd);
                }
                if (groupLines[j].length() < resultEnd) {
                    System.err.println("Bad 'Version 1' file format. Length of line: '" + groupLines[j] + "' is not enough for @RESULT.");
                    return false;
                } else {
                    athleteResult = groupLines[j].substring(resultStart - 1, resultEnd);
                }
                if (groupLines[j].length() < splitStart) {
                    System.err.println("Bad 'Version 1' file format. Length of line: '" + groupLines[j] + "' is not enough for @SPLITS.");
                    return false;
                } else {
                    if (DEBUG)
                        System.out.println(groupLines[j]);
                    String[] theSplits = groupLines[j].substring(splitStart - 1).trim().split("\\s+");
                    for (int k = 0; k < groupPoints + 1; k++) {
                        try {
                            athleteSplits[k] = new Time(theSplits[k], 2);
                        } catch (java.lang.NumberFormatException e) {
                            athleteSplits[k] = new Time(0, 2);
                        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
                            athleteSplits[k] = new Time(0, 2);
                        }
                    }
                }
                String[] athleteNames = athleteName.split("[ \\t]+");
                Athlete a = new Athlete((athleteNames.length > 0 ? (athleteNames[0].trim()) : ""), (athleteNames.length > 1 ? (athleteNames[1].trim()) : ""), athleteSplits, allGroupsTemp.getLast(), 1900, athleteResult);
            }
        }
    } catch (ArrayIndexOutOfBoundsException e) {
        return false;
    } catch (NumberFormatException nfe) {
        throw new NotRightFormatException(file, "OSV version 1", "bad number format: " + nfe.getMessage());
    }
    Iterator<Group> it = allGroupsTemp.iterator();
    while (it.hasNext()) {
        Distance d = it.next().getDistance();
        if (d.getLengthOfDist(1) < 0) {
            d.setLengthsOfDists(Tools.calculatLengthsOfLaps(d.getGroups()));
        }
    }
    allGroups = new ArrayList<Group>(allGroupsTemp);
    return true;
}
