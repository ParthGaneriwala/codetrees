// ------------------------------------------------------------------------------------------------------------------------------
public double evaluate() {
    double semiFinalF = 0.0;
    double totalAcc = 0;
    double FinalF = 0.0;
    BuildConfusionMatrix();
    Iterator<String> matrixIterator = confusionMatrix.keySet().iterator();
    String classkey;
    long totalSize = 0;
    KF kf;
    double acctmp;
    System.out.println();
    System.out.println("======================================EVALUATION=============================");
    while (matrixIterator.hasNext()) {
        classkey = matrixIterator.next();
        kf = getMaxKF((ArrayList<KF>) confusionMatrix.get(classkey));
        System.out.println();
        System.out.println("P [ " + classkey + " ] = " + kf.p + "     R [ " + classkey + " ] = " + kf.r + "     F [ " + classkey + " ] = " + kf.f + "    size ( " + classkey + " ) = " + dataSet.get(classkey).size());
        acctmp = (double) clusteredDataSet.get(kf.k).size() / (double) (dataSet.get(classkey).size());
        System.out.println("Acc [ " + classkey + " ]= " + acctmp);
        System.out.println();
        semiFinalF += ((dataSet.get(classkey).size())) * kf.getF();
        System.out.println("class acc " + getClassClusterIntersection(classkey, kf.k));
        totalAcc += getClassClusterIntersection(classkey, kf.k) + getTN(classkey, kf.k);
    }
    totalSize = getTotalSizeOfPatterns();
    System.out.println("total # of patterns = " + totalSize);
    System.out.println();
    FinalF = (semiFinalF / ((double) totalSize));
    totalAcc = totalAcc / ((double) totalSize * dataSet.size());
    System.out.println("Total Accurcy = " + totalAcc * 100 + " %");
    System.out.println();
    return FinalF;
}
