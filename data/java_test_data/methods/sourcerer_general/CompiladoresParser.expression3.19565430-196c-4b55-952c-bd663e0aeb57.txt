// $ANTLR start "expression3"
public final CompiladoresParser.expression3_return expression3() throws RecognitionException {
    CompiladoresParser.expression3_return retval = new CompiladoresParser.expression3_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token set125 = null;
    CompiladoresParser.expression4_return expression4124 = null;
    CompiladoresParser.expression4_return expression4126 = null;
    CommonTree set125_tree = null;
    try {
        dbg.enterRule(getGrammarFileName(), "expression3");
        if (getRuleLevel() == 0) {
            dbg.commence();
        }
        incRuleLevel();
        dbg.location(170, 1);
        try {
            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:170:15: ( expression4 ( ( EQUAL | DIF1 | DIF2 ) expression4 )* )
            dbg.enterAlt(1);
            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:170:17: expression4 ( ( EQUAL | DIF1 | DIF2 ) expression4 )*
            {
                root_0 = (CommonTree) adaptor.nil();
                dbg.location(170, 17);
                pushFollow(FOLLOW_expression4_in_expression31393);
                expression4124 = expression4();
                state._fsp--;
                adaptor.addChild(root_0, expression4124.getTree());
                dbg.location(170, 29);
                // /home/CIN/fmm/Desktop/grammar/Compiladores.g:170:29: ( ( EQUAL | DIF1 | DIF2 ) expression4 )*
                try {
                    dbg.enterSubRule(30);
                    loop30: do {
                        int alt30 = 2;
                        try {
                            dbg.enterDecision(30);
                            int LA30_0 = input.LA(1);
                            if (((LA30_0 >= EQUAL && LA30_0 <= DIF2))) {
                                alt30 = 1;
                            }
                        } finally {
                            dbg.exitDecision(30);
                        }
                        switch(alt30) {
                            case 1:
                                dbg.enterAlt(1);
                                // /home/CIN/fmm/Desktop/grammar/Compiladores.g:170:30: ( EQUAL | DIF1 | DIF2 ) expression4
                                {
                                    dbg.location(170, 30);
                                    set125 = (Token) input.LT(1);
                                    set125 = (Token) input.LT(1);
                                    if ((input.LA(1) >= EQUAL && input.LA(1) <= DIF2)) {
                                        input.consume();
                                        root_0 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(set125), root_0);
                                        state.errorRecovery = false;
                                    } else {
                                        MismatchedSetException mse = new MismatchedSetException(null, input);
                                        dbg.recognitionException(mse);
                                        throw mse;
                                    }
                                    dbg.location(170, 53);
                                    pushFollow(FOLLOW_expression4_in_expression31409);
                                    expression4126 = expression4();
                                    state._fsp--;
                                    adaptor.addChild(root_0, expression4126.getTree());
                                }
                                break;
                            default:
                                break loop30;
                        }
                    } while (true);
                } finally {
                    dbg.exitSubRule(30);
                }
            }
            retval.stop = input.LT(-1);
            retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
        }
        dbg.location(170, 66);
    } finally {
        dbg.exitRule(getGrammarFileName(), "expression3");
        decRuleLevel();
        if (getRuleLevel() == 0) {
            dbg.terminate();
        }
    }
    return retval;
}
