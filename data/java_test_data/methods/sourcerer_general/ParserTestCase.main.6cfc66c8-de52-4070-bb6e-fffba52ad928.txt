public static void main(String[] args) {
    String runner;
    int i;
    String[] arguments;
    Properties properties;
    Enumeration enumeration;
    String name;
    Class cls;
    runner = null;
    for (i = 0; (i < args.length) && (null == runner); i++) {
        if (args[i].equalsIgnoreCase("-text"))
            runner = "junit.textui.TestRunner";
        else if (args[i].equalsIgnoreCase("-awt"))
            runner = "junit.awtui.TestRunner";
        else if (args[i].equalsIgnoreCase("-swing"))
            runner = "junit.swingui.TestRunner";
    }
    if (null != runner) {
        // remove it from the arguments
        arguments = new String[args.length - 1];
        System.arraycopy(args, 0, arguments, 0, i - 1);
        System.arraycopy(args, i, arguments, i - 1, args.length - i);
        args = arguments;
    } else
        runner = "junit.swingui.TestRunner";
    // find the test class that has registered in the system properties
    // default of no class name, works in GUI mode
    arguments = args;
    properties = System.getProperties();
    enumeration = properties.propertyNames();
    while (enumeration.hasMoreElements()) {
        name = (String) enumeration.nextElement();
        if (name.startsWith("org.htmlparser.tests.")) {
            // command line option -noloading before the name of the Testsuite.
            if (true) {
                // append the test class
                arguments = new String[args.length + 2];
                System.arraycopy(args, 0, arguments, 0, args.length);
                arguments[arguments.length - 2] = "-noloading";
                arguments[arguments.length - 1] = name;
            } else {
                // append the test class
                arguments = new String[args.length + 1];
                System.arraycopy(args, 0, arguments, 0, args.length);
                arguments[args.length] = name;
            }
            // JUnit only handles one class on the command line
            break;
        }
    }
    // invoke main() of the test runner
    try {
        cls = Class.forName(runner);
        java.lang.reflect.Method method = cls.getDeclaredMethod("main", new Class[] { String[].class });
        method.invoke(null, new Object[] { arguments });
    } catch (Throwable t) {
        System.err.println("cannot run unit test (" + t.getMessage() + ")");
    }
}
