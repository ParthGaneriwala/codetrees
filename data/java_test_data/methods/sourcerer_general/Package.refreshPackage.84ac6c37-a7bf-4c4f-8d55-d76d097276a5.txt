public void refreshPackage() {
    // read in all the targets contained in this package
    // into this temporary map
    Map<String, Target> propTargets = new HashMap<String, Target>();
    int numTargets = 0, numDependencies = 0;
    try {
        numTargets = Integer.parseInt(lastSavedProps.getProperty("package.numTargets", "0"));
        numDependencies = Integer.parseInt(lastSavedProps.getProperty("package.numDependencies", "0"));
    } catch (Exception e) {
        Debug.reportError("Error loading from package file " + packageFile + ": " + e);
        e.printStackTrace();
        return;
    }
    for (int i = 0; i < numTargets; i++) {
        Target target;
        String type = lastSavedProps.getProperty("target" + (i + 1) + ".type");
        String identifierName = lastSavedProps.getProperty("target" + (i + 1) + ".name");
        if ("PackageTarget".equals(type))
            target = new PackageTarget(this, identifierName);
        else {
            target = new ClassTarget(this, identifierName);
        }
        target.load(lastSavedProps, "target" + (i + 1));
        propTargets.put(identifierName, target);
    }
    addImmovableTargets();
    // make our Package targets reflect what is actually on disk
    // note that we consider this on-disk version the master
    // version so if we have a class target called Foo but we
    // discover a directory call Foo, a PackageTarget will be
    // inserted to replace the ClassTarget
    File[] subDirs = getPath().listFiles(new SubPackageFilter());
    for (int i = 0; i < subDirs.length; i++) {
        // first check if the directory name would be a valid package name
        if (!JavaNames.isIdentifier(subDirs[i].getName()))
            continue;
        Target target = propTargets.get(subDirs[i].getName());
        if (target == null || !(target instanceof PackageTarget)) {
            target = new PackageTarget(this, subDirs[i].getName());
            findSpaceForVertex(target);
        }
        addTarget(target);
    }
    // now look for Java source files that may have been
    // added to the directory
    Set<String> interestingSet = findTargets(getPath());
    // also we migrate targets from propTargets across
    // to our real list of targets in this loop.
    Iterator<String> it = interestingSet.iterator();
    while (it.hasNext()) {
        String targetName = it.next();
        Target target = propTargets.get(targetName);
        if (target == null || !(target instanceof ClassTarget)) {
            target = new ClassTarget(this, targetName);
            findSpaceForVertex(target);
        }
        addTarget(target);
    }
    // Start with all classes in the normal (compiled) state.
    Iterator<Target> targetIt = targets.iterator();
    for (; targetIt.hasNext(); ) {
        Target target = targetIt.next();
        if (target instanceof ClassTarget) {
            ClassTarget ct = (ClassTarget) target;
            ct.setState(ClassTarget.S_NORMAL);
        }
    }
    // Fix up dependency information
    for (int i = 0; i < numDependencies; i++) {
        Dependency dep = null;
        String type = lastSavedProps.getProperty("dependency" + (i + 1) + ".type");
        if ("UsesDependency".equals(type))
            dep = new UsesDependency(this);
        if (dep != null) {
            dep.load(lastSavedProps, "dependency" + (i + 1));
            addDependency(dep, false);
        }
    }
    recalcArrows();
    // Update class roles, and their state
    targetIt = targets.iterator();
    for (; targetIt.hasNext(); ) {
        Target target = targetIt.next();
        if (target instanceof ClassTarget) {
            ClassTarget ct = (ClassTarget) target;
            if (ct.isCompiled() && ct.upToDate()) {
                Class<?> cl = loadClass(ct.getQualifiedName());
                ct.determineRole(cl);
                ct.analyseDependencies(cl);
                if (cl == null) {
                    ct.setState(ClassTarget.S_INVALID);
                }
            } else {
                ct.setState(ClassTarget.S_INVALID);
                ct.analyseSource();
                try {
                    ct.enforcePackage(getQualifiedName());
                } catch (IOException ioe) {
                    Debug.message("Error enforcing class package: " + ioe.getLocalizedMessage());
                }
            }
        }
    }
    // them until all classes/packages have been loaded
    for (int i = 0; i < numTargets; i++) {
        String assoc = lastSavedProps.getProperty("target" + (i + 1) + ".association");
        String identifierName = lastSavedProps.getProperty("target" + (i + 1) + ".name");
        if (assoc != null) {
            Target t1 = getTarget(identifierName), t2 = getTarget(assoc);
            if (t1 != null && t2 != null && t1 instanceof DependentTarget) {
                DependentTarget dt = (DependentTarget) t1;
                dt.setAssociation((DependentTarget) t2);
            }
        }
    }
}
