protected void pintarScan() {
    // nao deixar pintar triangulos q estao fora da tela
    if ((this.p1.x < -1 && this.p2.x < -1 && this.p3.x < -1) || (this.p1.x > 1 && this.p2.x > 1 && this.p3.x > 1) || (this.p1.y < -1 && this.p2.y < -1 && this.p3.y < -1) || (this.p1.y > 1 && this.p2.y > 1 && this.p3.y > 1)) {
        return;
    }
    int x1 = (int) (this.p1.x * parametros.getLargura() / 2);
    int y1 = (int) (this.p1.y * parametros.getAltura() / 2);
    int x2 = (int) (this.p2.x * parametros.getLargura() / 2);
    int y2 = (int) (this.p2.y * parametros.getAltura() / 2);
    int x3 = (int) (this.p3.x * parametros.getLargura() / 2);
    int y3 = (int) (this.p3.y * parametros.getAltura() / 2);
    int yscan;
    int ymax;
    int xscan;
    double xmin;
    double xmax;
    double amin;
    double amax;
    int[] novaOrdem = this.deixarEmOrdem(x1, y1, x2, y2, x3, y3);
    x1 = novaOrdem[0];
    y1 = novaOrdem[1];
    x2 = novaOrdem[2];
    y2 = novaOrdem[3];
    x3 = novaOrdem[4];
    y3 = novaOrdem[5];
    if (y1 != y2) {
        // Triangulo com base inferior nao reta
        yscan = y1;
        ymax = y2;
        xscan = x1;
        xmin = x1;
        xmax = x1;
        if ((((double) (x2 - x1)) / (y2 - y1)) < (((double) (x3 - x1)) / (y3 - y1))) {
            amin = (((double) (x2 - x1)) / (y2 - y1));
            amax = (((double) (x3 - x1)) / (y3 - y1));
        } else {
            amin = (((double) (x3 - x1)) / (y3 - y1));
            amax = (((double) (x2 - x1)) / (y2 - y1));
        }
        for (yscan = y1; yscan <= ymax; yscan++) {
            for (xscan = (int) xmin; xscan <= xmax; xscan++) {
                Vetor coordBaric = combinacaoBaricentrica(new Ponto(2 * xscan / parametros.getLargura(), 2 * yscan / parametros.getAltura()));
                if (this.consultarBuffer(xscan, yscan, coordBaric)) {
                    parametros.getGrafico().setColor(calcularCorPixel(coordBaric));
                    parametros.getGrafico().drawRect((int) (xscan + parametros.getLargura() / 2), (int) (parametros.getAltura() - (yscan + parametros.getAltura() / 2)), 1, 1);
                }
            }
            xmin += amin;
            xmax += amax;
        }
        xmin -= amin;
        xmax -= amax;
        ymax = y3;
        yscan--;
        if ((((double) (x2 - x1)) / (y2 - y1)) < (((double) (x3 - x1)) / (y3 - y1))) {
            amin = (((double) (x3 - x2)) / (y3 - y2));
            amax = (((double) (x3 - x1)) / (y3 - y1));
        } else {
            amin = (((double) (x3 - x1)) / (y3 - y1));
            amax = (((double) (x3 - x2)) / (y3 - y2));
        }
    } else {
        xscan = x1;
        xmax = x2;
        xmin = x1;
        yscan = y1;
        ymax = y3;
        amin = (((double) (x3 - x1)) / (y3 - y1));
        amax = (((double) (x3 - x2)) / (y3 - y2));
    }
    if (y2 != y3) {
        for (; yscan <= ymax; yscan++) {
            for (xscan = (int) xmin; xscan <= xmax; xscan++) {
                Vetor coordBaric = combinacaoBaricentrica(new Ponto(2 * xscan / parametros.getLargura(), 2 * yscan / parametros.getAltura()));
                if (this.consultarBuffer(xscan, yscan, coordBaric)) {
                    parametros.getGrafico().setColor(calcularCorPixel(coordBaric));
                    parametros.getGrafico().drawRect((int) (xscan + parametros.getLargura() / 2), (int) (parametros.getAltura() - (yscan + parametros.getAltura() / 2)), 1, 1);
                }
            }
            xmin += amin;
            xmax += amax;
        }
    }
    if ((y1 == y2) && (y2 == y3)) {
        yscan = y1;
        for (xscan = x1; xscan <= x3; xscan++) {
            Vetor coordBaric = combinacaoBaricentrica(new Ponto(2 * xscan / parametros.getLargura(), 2 * yscan / parametros.getAltura()));
            if (this.consultarBuffer(xscan, yscan, coordBaric)) {
                parametros.getGrafico().setColor(calcularCorPixel(coordBaric));
                parametros.getGrafico().drawRect((int) (xscan + parametros.getLargura() / 2), (int) (parametros.getAltura() - (yscan + parametros.getAltura() / 2)), 1, 1);
            }
        }
    }
}
