public int getTabbedPCFTextWidth(Segment s, int x, TabExpander e) {
    int nextX = x;
    char[] txt = s.array;
    int txtOffset = s.offset;
    int n = s.offset + s.count;
    int charCount = 0;
    int spaceAddon = 0;
    int spaceAddonLeftoverEnd = -1;
    int startJustifiableContent = 0;
    int endJustifiableContent = 0;
    int startOffset = 0;
    for (int i = txtOffset; i < n; i++) {
        if (txt[i] == '\t' || ((spaceAddon != 0 || i <= spaceAddonLeftoverEnd) && (txt[i] == ' ') && startJustifiableContent <= i && i <= endJustifiableContent)) {
            nextX += pcfCharsWidth(txt, i - charCount, charCount);
            charCount = 0;
            if (txt[i] == '\t') {
                if (e != null) {
                    nextX = (int) e.nextTabStop((float) nextX, startOffset + i - txtOffset);
                } else {
                    nextX += textArea.pcffont.charWidth(' ');
                }
            } else if (txt[i] == ' ') {
                nextX += textArea.pcffont.charWidth(' ') + spaceAddon;
                if (i <= spaceAddonLeftoverEnd) {
                    nextX++;
                }
            }
        } else if (txt[i] == '\n') {
            // Ignore newlines, they take up space and we shouldn't be
            // counting them.
            nextX += pcfCharsWidth(txt, i - charCount, charCount);
            charCount = 0;
        } else {
            charCount++;
        }
    }
    nextX += pcfCharsWidth(txt, n - charCount, charCount);
    return nextX - x;
}
