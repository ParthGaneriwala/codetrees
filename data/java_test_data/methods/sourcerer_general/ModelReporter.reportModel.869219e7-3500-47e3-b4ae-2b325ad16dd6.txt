@SuppressWarnings("unchecked")
protected void reportModel(Model m) throws BeanPersistenceException, StaleDataException {
    String rslt = TEMPLATE_INTRO.replaceFirst("\\$id", m.getId().toString());
    // Model name
    Set<ModelName> names = (Set<ModelName>) m.getNames();
    StringBuilder strNames = new StringBuilder();
    for (ModelName name : names) {
        strNames.append(TEMPLATE_MODEL_NAME.replaceFirst("\\$value", name.getName()).replaceFirst("\\$yes", String.valueOf(name.getSupporterNum())).replaceFirst("\\$no", String.valueOf(name.getOpponentNum())) + "  ");
    }
    rslt = rslt.replaceFirst("\\$name", strNames.toString());
    // User Stats
    Map<Long, UserStats> userStatsMap = new HashMap<Long, UserStats>();
    // Elements Overview
    IntCounter fYes = new IntCounter(), fNo = new IntCounter();
    IntCounter rYes = new IntCounter(), rNo = new IntCounter();
    List<Feature> features = DaoUtil.getFeatureDao().getAll(m.getId());
    rslt = rslt.replaceFirst("\\$nf", StatsUtil.nullSafeSize(features));
    List<Relationship> relations = DaoUtil.getRelationshipDao().getAll(m.getId());
    rslt = rslt.replaceFirst("\\$nrt", StatsUtil.nullSafeSize(relations));
    List<BinaryRelationship> refines = null, requires = null, excludes = null;
    if (relations != null) {
        refines = new ArrayList<BinaryRelationship>();
        requires = new ArrayList<BinaryRelationship>();
        excludes = new ArrayList<BinaryRelationship>();
        for (Relationship r : relations) {
            addUserStats(userStatsMap, r);
            rYes.count(r.getSupporterNum());
            rNo.count(r.getOpponentNum());
            if (Resources.BIN_REL_REFINES.equals(r.getType())) {
                refines.add((BinaryRelationship) r);
            } else if (Resources.BIN_REL_REQUIRES.equals(r.getType())) {
                requires.add((BinaryRelationship) r);
            } else if (Resources.BIN_REL_EXCLUDES.equals(r.getType())) {
                excludes.add((BinaryRelationship) r);
            }
        }
    }
    rslt = rslt.replaceFirst("\\$nrf", StatsUtil.nullSafeSize(refines)).replaceFirst("\\$nrq", StatsUtil.nullSafeSize(requires)).replaceFirst("\\$nre", StatsUtil.nullSafeSize(excludes));
    IntCounter fnameCounter = new IntCounter(), fdCounter = new IntCounter();
    if (features != null) {
        for (Feature f : features) {
            addUserStats(userStatsMap, f);
            fYes.count(f.getSupporterNum());
            fNo.count(f.getOpponentNum());
            fnameCounter.count(f.getNames().size());
            fdCounter.count(f.getDescriptions().size());
        }
    }
    rslt = rslt.replaceFirst("\\$fnt", String.valueOf(fnameCounter.sum)).replaceFirst("\\$fna", fnameCounter.toAvg(StatsUtil.nullSafeIntSize(features))).replaceFirst("\\$fnlo", String.valueOf(fnameCounter.min)).replaceFirst("\\$fnhi", String.valueOf(fnameCounter.max)).replaceFirst("\\$fdt", String.valueOf(fdCounter.sum)).replaceFirst("\\$fda", fdCounter.toAvg(StatsUtil.nullSafeIntSize(features))).replaceFirst("\\$fdlo", String.valueOf(fdCounter.min)).replaceFirst("\\$fdhi", String.valueOf(fdCounter.max));
    // Contributions Overview
    List<User> users = DaoUtil.getUserDao().getAll(m.getId());
    rslt = rslt.replaceFirst("\\$nc", StatsUtil.nullSafeSize(users));
    // - feature names, descriptions, and optionality
    if (features != null) {
        for (Feature f : features) {
            for (Votable v : f.getNames()) {
                FeatureName fn = (FeatureName) v;
                addUserStats(userStatsMap, fn);
            }
            for (Votable v : f.getDescriptions()) {
                FeatureDescription fd = (FeatureDescription) v;
                addUserStats(userStatsMap, fd);
            }
            OptionalityAdapter oa = new OptionalityAdapter(f.getOptionality());
            addUserStats(userStatsMap, oa);
        }
    }
    IntCounter cc = new IntCounter(), yesc = new IntCounter(), noc = new IntCounter();
    for (Map.Entry<Long, UserStats> entry : userStatsMap.entrySet()) {
        cc.count(entry.getValue().creation);
        yesc.count(entry.getValue().yes);
        noc.count(entry.getValue().no);
    }
    int uNum = StatsUtil.nullSafeIntSize(users);
    rslt = rslt.replaceFirst("\\$ct", String.valueOf(cc.sum)).replaceFirst("\\$ca", cc.toAvg(uNum)).replaceFirst("\\$clo", String.valueOf(cc.min)).replaceFirst("\\$chi", String.valueOf(cc.max)).replaceFirst("\\$yt", String.valueOf(yesc.sum)).replaceFirst("\\$ya", yesc.toAvg(uNum)).replaceFirst("\\$ylo", String.valueOf(yesc.min)).replaceFirst("\\$yhi", String.valueOf(yesc.max)).replaceFirst("\\$nvt", String.valueOf(noc.sum)).replaceFirst("\\$nva", noc.toAvg(uNum)).replaceFirst("\\$nvlo", String.valueOf(noc.min)).replaceFirst("\\$nvhi", String.valueOf(noc.max));
    // Support/Oppose Overview
    rslt = rslt.replaceFirst("\\$sfa", fYes.toAvg(StatsUtil.nullSafeIntSize(features))).replaceFirst("\\$sflo", String.valueOf(fYes.min)).replaceFirst("\\$sfhi", String.valueOf(fYes.max)).replaceFirst("\\$ofa", fNo.toAvg(StatsUtil.nullSafeIntSize(features))).replaceFirst("\\$oflo", String.valueOf(fNo.min)).replaceFirst("\\$ofhi", String.valueOf(fNo.max)).replaceFirst("\\$sra", rYes.toAvg(StatsUtil.nullSafeIntSize(relations))).replaceFirst("\\$srlo", String.valueOf(rYes.min)).replaceFirst("\\$srhi", String.valueOf(rYes.max)).replaceFirst("\\$ora", rNo.toAvg(StatsUtil.nullSafeIntSize(relations))).replaceFirst("\\$orlo", String.valueOf(rNo.min)).replaceFirst("\\$orhi", String.valueOf(rNo.max));
    logger.info(rslt);
    Map<Long, String> us = new HashMap<Long, String>();
    for (User u : users) {
        us.put(u.getId(), u.getName());
    }
    reportUserStats(userStatsMap, us);
    reportFeatureDetails(features);
    reportRelationDetails(relations);
}
