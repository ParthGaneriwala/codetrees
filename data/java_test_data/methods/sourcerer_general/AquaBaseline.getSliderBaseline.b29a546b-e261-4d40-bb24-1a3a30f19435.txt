private int getSliderBaseline(JSlider slider, int height) {
    if (slider.getPaintLabels()) {
        FontMetrics metrics = slider.getFontMetrics(slider.getFont());
        Insets insets = slider.getInsets();
        Insets focusInsets = (Insets) UIManager.get("Slider.focusInsets");
        if (slider.getOrientation() == 0) {
            int tickLength = 8;
            int contentHeight = height - insets.top - insets.bottom - focusInsets.top - focusInsets.bottom;
            int thumbHeight = 20;
            int centerSpacing = thumbHeight;
            if (slider.getPaintTicks())
                centerSpacing += tickLength;
            centerSpacing += metrics.getAscent() + metrics.getDescent();
            int trackY = insets.top + focusInsets.top + (contentHeight - centerSpacing - 1) / 2;
            int trackHeight = thumbHeight;
            int tickY = trackY + trackHeight;
            int tickHeight = tickLength;
            if (!slider.getPaintTicks())
                tickHeight = 0;
            int labelY = tickY + tickHeight;
            return labelY + metrics.getAscent();
        }
        boolean inverted = slider.getInverted();
        Integer value = inverted ? getMinSliderValue(slider) : getMaxSliderValue(slider);
        if (value != null) {
            int thumbHeight = 11;
            int trackBuffer = Math.max(metrics.getHeight() / 2, thumbHeight / 2);
            int contentY = focusInsets.top + insets.top;
            int trackY = contentY + trackBuffer;
            int trackHeight = height - focusInsets.top - focusInsets.bottom - insets.top - insets.bottom - trackBuffer - trackBuffer;
            int maxValue = getMaxSliderValue(slider).intValue();
            int min = slider.getMinimum();
            int max = slider.getMaximum();
            double valueRange = (double) max - (double) min;
            double pixelsPerValue = (double) trackHeight / valueRange;
            int trackBottom = trackY + (trackHeight - 1);
            int yPosition;
            if (!inverted) {
                yPosition = trackY;
                yPosition = (int) ((long) yPosition + Math.round(pixelsPerValue * ((double) max - (double) value.intValue())));
            } else {
                yPosition = trackY;
                yPosition = (int) ((long) yPosition + Math.round(pixelsPerValue * ((double) value.intValue() - (double) min)));
            }
            yPosition = Math.max(trackY, yPosition);
            yPosition = Math.min(trackBottom, yPosition);
            return (yPosition - metrics.getHeight() / 2) + metrics.getAscent();
        }
    }
    return -1;
}
