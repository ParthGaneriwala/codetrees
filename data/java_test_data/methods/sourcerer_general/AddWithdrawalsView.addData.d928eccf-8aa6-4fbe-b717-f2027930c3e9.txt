private void addData() {
    int amt = -9999;
    boolean err = true;
    int numberLength = number.getText().length();
    if (numberLength != 0) {
        if (numberLength > 20) {
            err = false;
            JOptionPane.showMessageDialog(null, "Check number is too long.", "Error", JOptionPane.WARNING_MESSAGE);
        } else if (!WithdrawalsController.isNumeric(number.getText())) {
            err = false;
            JOptionPane.showMessageDialog(null, "Check number should only consists of digits.", "Error", JOptionPane.WARNING_MESSAGE);
        }
    }
    int amtLength = amount.getText().length();
    if (amount.getText().length() != 0) {
        if (amtLength > 15) {
            err = false;
            JOptionPane.showMessageDialog(null, "Amount is too long.", "Error", JOptionPane.WARNING_MESSAGE);
        } else if (!WithdrawalsController.isNumeric(amount.getText())) {
            err = false;
            JOptionPane.showMessageDialog(null, "The amount should only consists of digits.", "Error", JOptionPane.WARNING_MESSAGE);
        } else {
            amt = Integer.parseInt(amount.getText());
            if (amt == 0) {
                err = false;
                JOptionPane.showMessageDialog(null, "The amount should not be equal to zero.", "Error", JOptionPane.WARNING_MESSAGE);
            }
        }
    }
    if (err) {
        String part = particular.getText();
        java.sql.Date date = DateController.getDate();
        // java.util.Date date = new java.util.Date();
        int id = WithdrawalsController.validateDataToBeAdded(number.getText(), amt, part);
        switch(id) {
            case 1:
                JOptionPane.showMessageDialog(null, "No check number entered.", "Error", JOptionPane.WARNING_MESSAGE);
                break;
            case 2:
                JOptionPane.showMessageDialog(null, "No check number and amount entered.", "Error", JOptionPane.WARNING_MESSAGE);
                break;
            case 3:
                JOptionPane.showMessageDialog(null, "No check number, amount, and particular entered.", "Error", JOptionPane.WARNING_MESSAGE);
                break;
            case 4:
                JOptionPane.showMessageDialog(null, "No check number and particular entered.", "Error", JOptionPane.WARNING_MESSAGE);
                break;
            case 5:
                JOptionPane.showMessageDialog(null, "No amount and particular entered.", "Error", JOptionPane.WARNING_MESSAGE);
                break;
            case 6:
                JOptionPane.showMessageDialog(null, "No amount entered.", "Error", JOptionPane.WARNING_MESSAGE);
                break;
            case 7:
                JOptionPane.showMessageDialog(null, "No particular entered.", "Error", JOptionPane.WARNING_MESSAGE);
                break;
            case 8:
                int y = DateController.getYear();
                int m = DateController.getMonth();
                int d = DateController.getDay();
                System.out.printf("%d %d %d", y, m, d);
                calendar = Calendar.getInstance();
                calendar.set(y, m - 1, d);
                String weekId = calendar.get(Calendar.YEAR) + "" + calendar.get(Calendar.WEEK_OF_YEAR);
                id = Integer.parseInt(weekId);
                try {
                    if (WithdrawalsController.addWithdrawals(number.getText(), date, amt, part, id))
                        if (ActivitiesController.addActivity(DateController.getToday(), "Data added in deposit check table.")) {
                            JOptionPane.showMessageDialog(null, "Data Added", "Successful", JOptionPane.DEFAULT_OPTION);
                        } else
                            JOptionPane.showMessageDialog(null, "An error happened.", "Error", JOptionPane.DEFAULT_OPTION);
                    else
                        JOptionPane.showMessageDialog(null, "Duplicate check number entry", "Error", JOptionPane.DEFAULT_OPTION);
                    number.setText(null);
                    amount.setText(null);
                    particular.setText(null);
                    this.withdrawalsView.populateTable();
                    closeframe();
                } catch (Exception a) {
                    a.printStackTrace();
                }
                break;
        }
    }
}
