public void fillWorld(World w) {
    try {
        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
        DocumentBuilder db = dbf.newDocumentBuilder();
        Document doc;
        Element element, attributesElement, newAttribute;
        NodeList elements, positionNodes, facingNodes, scaleNodes, attributesNodes;
        Node tmpNode;
        GameElement newElement;
        float[] position;
        float[] facing;
        float[] scale;
        int i;
        for (File file : files) {
            if (!file.exists()) {
                myLogger.message("WorldFactory cannot find file: " + file + "\n", true);
                continue;
            }
            doc = db.parse(file);
            elements = doc.getElementsByTagName("element");
            for (i = elements.getLength() - 1; i >= 0; i--) {
                element = (Element) elements.item(i);
                newElement = ef.getGameElement(element.getAttribute("type"));
                /* For an explanation of ELEMENT_ID_PADDING and id strategies
					 * in general, please see the long comment in Constants.java
					 * where ELMENT_ID_PADDING is declared.
					 */
                newElement.id((i + 1) * 10 * Constants.ELEMENT_ID_PADDING + Constants.ELEMENT_ID_PADDING);
                positionNodes = element.getElementsByTagName("position");
                position = new float[positionNodes.getLength()];
                for (int p = position.length - 1; p >= 0; p--) {
                    position[p] = Float.parseFloat(positionNodes.item(p).getTextContent());
                }
                newElement.setPosition(position);
                facingNodes = element.getElementsByTagName("facing");
                if (facingNodes.getLength() == 3) {
                    float[] facingEuler = new float[3];
                    for (int f = facingEuler.length - 1; f >= 0; f--) {
                        facingEuler[f] = Float.parseFloat(facingNodes.item(f).getTextContent());
                        // change to Radians. We like radians.
                        facingEuler[f] = (float) Math.toRadians(facingEuler[f]);
                    }
                    // set the rotation to be in Quaternions
                    facing = Quaternions.getQuatFromEuler(facingEuler);
                } else
                    // if we didn't have a 3D rotation specified
                    // set to the default unit
                    facing = Constants.DEFAULT_FACING;
                newElement.setFacing(facing);
                scaleNodes = element.getElementsByTagName("scale");
                if (scaleNodes.getLength() != 0) {
                    scale = new float[scaleNodes.getLength()];
                    for (int s = scale.length - 1; s >= 0; s--) {
                        scale[s] = Float.parseFloat(scaleNodes.item(s).getTextContent());
                    }
                    newElement.setScale(scale);
                    newElement.scaleBoundingBox(scale);
                }
                attributesElement = (Element) element.getElementsByTagName("attributes").item(0);
                if (attributesElement != null) {
                    // grab all of the children of attributesElement
                    attributesNodes = attributesElement.getChildNodes();
                    for (int a = attributesNodes.getLength() - 1; a >= 0; a--) {
                        tmpNode = attributesNodes.item(a);
                        if (tmpNode.getNodeType() != Node.ELEMENT_NODE)
                            continue;
                        newAttribute = (Element) tmpNode;
                        newElement.attribute(newAttribute.getTagName(), Constants.parseXMLwithType(newAttribute));
                    }
                }
                // add element to World
                w.addElement(newElement);
            }
        }
    } catch (// better error reporting!
    Exception e) {
        myLogger.message("Failed to read input files! : " + e.getMessage() + " :\n", true);
        e.printStackTrace();
    }
}
