public ResultSetReifIterator findFrag(Node stmtURI, Triple frag, ReificationStatementMask fragMask, IDBID my_GID) {
    String stmtStr = null;
    Node val = null;
    int argc = 1;
    ResultSetReifIterator result = new ResultSetReifIterator(this, true, my_GID);
    boolean notFound = false;
    String argStr;
    Node_Literal litNode = null;
    LiteralLabel ll = null;
    String lval = null;
    boolean litIsPlain = false;
    boolean objIsURI = false;
    if (!fragMask.hasOneBit())
        throw new JenaException("Reification can only find one column");
    PreparedStatement ps = null;
    val = frag.getObject();
    if (fragMask.hasSubj()) {
        stmtStr = "selectReifiedNS";
    } else if (fragMask.hasPred()) {
        stmtStr = "selectReifiedNP";
    } else if (fragMask.hasObj()) {
        stmtStr = "selectReifiedNO";
    } else if (fragMask.hasType()) {
        stmtStr = "selectReifiedNT";
    }
    try {
        ps = m_sql.getPreparedSQLStatement(stmtStr, getTblName());
        ps.clearParameters();
        argStr = m_driver.nodeToRDBString(stmtURI, false);
        if (argStr == null)
            notFound = true;
        else
            ps.setString(argc++, argStr);
        if (fragMask.hasSubj() || fragMask.hasPred() || fragMask.hasObj()) {
            argStr = m_driver.nodeToRDBString(val, false);
            if (argStr == null)
                notFound = true;
            else
                ps.setString(argc++, argStr);
        } else {
            // find on hasType field
            ps.setString(argc++, "T");
        }
        ps.setString(argc, my_GID.getID().toString());
    } catch (Exception e) {
        logger.warn("Getting prepared statement for " + stmtStr + " Caught exception ", e);
        // Rethrow in case there is a recovery option
        throw new JenaException("Exception during database access", e);
    }
    if (notFound)
        result.close();
    else
        try {
            m_sql.executeSQL(ps, stmtStr, result);
        } catch (Exception e) {
            logger.debug("find encountered exception ", e);
            // Rethrow in case there is a recovery option
            throw new JenaException("Exception during database access", e);
        }
    return result;
}
