@Test
@DirtiesContext
public void testItemTypes() throws Exception {
    configureMinimalGame();
    // Setup CMS content
    beginHttpSession();
    beginHttpRequestAndOpenSessionInViewFilter();
    CrudRootServiceHelper<DbPage> pageCrud = cmsService.getPageCrudRootServiceHelper();
    DbPage dbPage = pageCrud.createDbChild();
    dbPage.setPredefinedType(CmsUtil.CmsPredefinedPage.HOME);
    dbPage.setName("Home");
    DbContentList dbContentList = new DbContentList();
    dbContentList.setRowsPerPage(5);
    dbContentList.init(userService);
    dbPage.setContentAndAccessWrites(dbContentList);
    dbContentList.setSpringBeanName("itemService");
    dbContentList.setContentProviderGetter("dbItemTypeCrud");
    CrudListChildServiceHelper<DbContent> columnCrud = dbContentList.getColumnsCrud();
    DbExpressionProperty column = (DbExpressionProperty) columnCrud.createDbChild(DbExpressionProperty.class);
    column.setExpression("name");
    DbContentDetailLink detailLink = (DbContentDetailLink) columnCrud.createDbChild(DbContentDetailLink.class);
    detailLink.setName("Details");
    CrudChildServiceHelper<DbContentBook> contentBookCrud = dbContentList.getContentBookCrud();
    DbContentBook dbContentBook = contentBookCrud.createDbChild();
    dbContentBook.setClassName("com.btxtech.game.services.item.itemType.DbBaseItemType");
    CrudListChildServiceHelper<DbContentRow> rowCrud = dbContentBook.getRowCrud();
    DbContentRow dbContentRow = rowCrud.createDbChild();
    dbContentRow.setName("Name");
    DbExpressionProperty expProperty = new DbExpressionProperty();
    expProperty.setExpression("name");
    expProperty.setParent(dbContentRow);
    dbContentRow.setDbContent(expProperty);
    dbContentRow = rowCrud.createDbChild();
    dbContentRow.setName("Progress");
    expProperty = new DbExpressionProperty();
    expProperty.setParent(dbContentRow);
    expProperty.setExpression("dbFactoryType.progress");
    dbContentRow.setDbContent(expProperty);
    dbContentRow = rowCrud.createDbChild();
    dbContentRow.setName("Able to build");
    DbContentList ableToBuild = new DbContentList();
    ableToBuild.init(userService);
    ableToBuild.setContentProviderGetter("dbFactoryType.ableToBuildCrud");
    ableToBuild.setParent(dbContentRow);
    dbContentRow.setDbContent(ableToBuild);
    CrudListChildServiceHelper<DbContent> ableToBuildColumnCrud = ableToBuild.getColumnsCrud();
    DbExpressionProperty ableToBuildName = (DbExpressionProperty) ableToBuildColumnCrud.createDbChild(DbExpressionProperty.class);
    ableToBuildName.setExpression("name");
    pageCrud.updateDbChild(dbPage);
    endHttpRequestAndOpenSessionInViewFilter();
    endHttpSession();
    // Activate
    beginHttpSession();
    beginHttpRequestAndOpenSessionInViewFilter();
    cmsService.activateCms();
    endHttpRequestAndOpenSessionInViewFilter();
    endHttpSession();
    // Verify
    beginHttpSession();
    beginHttpRequestAndOpenSessionInViewFilter();
    tester.startPage(CmsPage.class);
    tester.assertRenderedPage(CmsPage.class);
    tester.assertLabel("form:content:table:rows:5:cells:1:cell", "TestFactoryItem");
    tester.assertLabel("form:content:table:rows:5:cells:2:cell:link:label", "Details");
    // Click link
    tester.clickLink("form:content:table:rows:5:cells:2:cell:link");
    tester.assertLabel("form:content:table:rows:1:cells:2:cell", "TestFactoryItem");
    tester.assertLabel("form:content:table:rows:2:cells:2:cell", "1000.0");
    tester.assertLabel("form:content:table:rows:3:cells:2:cell:table:rows:1:cells:1:cell", "TEST_HARVESTER_ITEM");
    tester.assertLabel("form:content:table:rows:3:cells:2:cell:table:rows:2:cells:1:cell", "TestAttackItem");
    tester.assertLabel("form:content:table:rows:3:cells:2:cell:table:rows:3:cells:1:cell", "TestContainerItem");
    endHttpRequestAndOpenSessionInViewFilter();
    endHttpSession();
    // Verify if null property
    beginHttpSession();
    beginHttpRequestAndOpenSessionInViewFilter();
    tester.startPage(CmsPage.class);
    tester.assertRenderedPage(CmsPage.class);
    tester.assertLabel("form:content:table:rows:3:cells:1:cell", "TestAttackItem");
    tester.assertLabel("form:content:table:rows:3:cells:2:cell:link:label", "Details");
    // Click link
    tester.clickLink("form:content:table:rows:3:cells:2:cell:link");
    tester.assertLabel("form:content:table:rows:1:cells:2:cell", "TestAttackItem");
    tester.assertLabel("form:content:table:rows:2:cells:2:cell", "-");
    endHttpRequestAndOpenSessionInViewFilter();
    endHttpSession();
}
