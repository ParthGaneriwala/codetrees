void dropColumn(int colIndex) throws HsqlException {
    HsqlName constNameRemove = null;
    if (table.isText() && !table.isEmpty(session)) {
        throw Trace.error(Trace.OPERATION_NOT_SUPPORTED);
    }
    table.database.schemaManager.checkColumnIsInView(table, table.getColumn(colIndex).columnName.name);
    table.checkColumnInCheckConstraint(table.getColumn(colIndex).columnName.name);
    Table tn = table;
    int[] dropIndexes = null;
    String colName = tn.getColumn(colIndex).columnName.name;
    tn.checkColumnInFKConstraint(colIndex);
    if (table.getPrimaryKey().length == 1 && table.getPrimaryKey()[0] == colIndex) {
        table.checkDropIndex(table.getIndex(0).getName().name, null, true);
        constNameRemove = table.constraintList[0].getName();
        tn = table.moveDefinitionPK(null, false);
    }
    Constraint c = tn.getUniqueConstraintForColumns(new int[] { colIndex });
    if (c != null) {
        Index idx = c.getMainIndex();
        dropIndexes = new int[] { tn.getIndexIndex(idx.getName().name) };
        constNameRemove = c.getName();
    }
    tn = tn.moveDefinition(dropIndexes, null, colIndex, -1);
    tn.moveData(session, table, colIndex, -1);
    tn.updateConstraintsTables(session, table, colIndex, -1);
    int i = table.database.schemaManager.getTableIndex(table);
    table.database.schemaManager.setTable(i, tn);
    table = tn;
    table.database.schemaManager.recompileViews(table);
    if (constNameRemove != null) {
        table.removeConstraint(constNameRemove.name);
        table.database.schemaManager.removeConstraintName(constNameRemove.name, table.getName());
    }
}
