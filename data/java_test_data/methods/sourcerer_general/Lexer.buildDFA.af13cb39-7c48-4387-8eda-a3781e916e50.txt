private int buildDFA(ESet startSet, ESet bolSet) {
    int j, a;
    TreeMap<ESet, Integer> statesSet = new TreeMap<ESet, Integer>();
    ECS ecs = getECS();
    int groupCount = ecs.getGroupCount();
    int[] lookup = ecs.getLookup();
    int Mark;
    ESet s0 = eClosure(startSet);
    ESet s1 = eClosure(bolSet);
    int dfaBase = m_dfa.size();
    int esetBase = m_dfaStates.size();
    // initially, e_closure (s0) is the only state in _Dstates and it is unmarked
    m_dfaStates.add(s0);
    statesSet.put(s0, new Integer(m_dfaStates.size() - 1));
    if (m_bolStates) {
        m_dfaStates.add(s1);
        statesSet.put(s1, new Integer(m_dfaStates.size() - 1));
    }
    // while there is an unmarked state T in _Dstates
    for (Mark = esetBase; Mark < m_dfaStates.size(); Mark++) {
        // mark T;
        ESet T = m_dfaStates.get(Mark);
        NFA n = T.isAccept();
        DFARow row = new DFARow(groupCount);
        if (// set row accept conditions and values
        n != null) {
            row.setCaseValue(n.caseValue);
        } else {
            // this state is not an accept state
            // row.accept = 0;
            row.setCaseValue(0);
            // mark that there is a state that is non-accepting
            if (Mark > esetBase) {
                if (Mark > esetBase + 1 || !m_bolStates) {
                    m_backup = true;
                    for (NFA nfa : T.getSet()) {
                        NFA s = nfa.last();
                        m_backupCases[s.caseValue] = true;
                    }
                }
            }
        }
        // for each input symbol a do
        for (j = 0; j < groupCount; ++j) {
            a = lookup[j];
            // U := e_closure (move (T, a));
            ESet U = eClosure(move(T, a));
            if (U.getSet().size() == 0) {
                row.setState(j, 0);
                continue;
            }
            // if U is not in _Dstates
            // add U as an unmarked state to _Dstates
            int toState;
            Integer value = statesSet.get(U);
            if (value == null) {
                m_dfaStates.add(U);
                statesSet.put(U, new Integer(m_dfaStates.size() - 1));
                toState = m_dfaStates.size() - 1;
                U.setStateId(toState);
            } else {
                toState = value.intValue();
            }
            // Dtran[T, a] := U
            row.setState(j, toState);
        }
        // add to the DFA table
        m_dfa.add(row);
    }
    return dfaBase;
}
