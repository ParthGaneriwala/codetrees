private void replaceChildren(Segment segment, OutputDocument document) {
    // 迭代子元素，逐个查找
    List elements = segment.getChildElements();
    if (elements != null) {
        for (Iterator elementIterator = elements.iterator(); elementIterator.hasNext(); ) {
            Element element = (Element) elementIterator.next();
            if (element != null) {
                // ---- 标签属性处理 ----
                List blockDirectiveNames = new ArrayList();
                List blockDirectiveValues = new ArrayList();
                List blockDirectiveAttributes = new ArrayList();
                String lineDirectiveName = null;
                String lineDirectiveValue = null;
                // 迭代标签属性，查找指令属性
                Attributes attributes = element.getAttributes();
                if (attributes != null) {
                    for (Iterator attributeIterator = attributes.iterator(); attributeIterator.hasNext(); ) {
                        Attribute attribute = (Attribute) attributeIterator.next();
                        if (attribute != null) {
                            String name = attribute.getName();
                            if (name != null && name.startsWith(namespace + ":")) {
                                // 识别名称空间
                                String directiveName = name.substring(namespace.length() + 1);
                                if (directiveName.matches("^[a-z|A-Z|0-9|_|\\.]+$")) {
                                    // 符合命名
                                    String value = attribute.getValue();
                                    if (isBlockDirective(directiveName)) {
                                        blockDirectiveNames.add(directiveName);
                                        blockDirectiveValues.add(value);
                                        blockDirectiveAttributes.add(attribute);
                                    } else {
                                        if (lineDirectiveName != null)
                                            throw new RuntimeException("一个标签上只能有一个<b>行指令</b>属性! 出现两个行指令属性: " + lineDirectiveName + "和" + directiveName + ", 请检查标签:" + element.getStartTag().toString());
                                        lineDirectiveName = directiveName;
                                        lineDirectiveValue = value;
                                    }
                                }
                            }
                        }
                    }
                }
                // ---- 块指令处理 ----
                if (blockDirectiveNames.size() > 0) {
                    StringBuffer buf = new StringBuffer();
                    for (int i = 0; i < blockDirectiveNames.size(); i++) {
                        // 按顺序添加块指令
                        String blockDirectiveName = (String) blockDirectiveNames.get(i);
                        String blockDirectiveValue = (String) blockDirectiveValues.get(i);
                        buf.append(syntax.getDirectiveLeader());
                        buf.append(blockDirectiveName);
                        buf.append(syntax.getExpressionBegin());
                        buf.append(blockDirectiveValue);
                        buf.append(syntax.getExpressionEnd());
                    }
                    // 插入块指令
                    document.insert(element.getBegin(), buf.toString());
                }
                // ---- 行指令处理 ----
                if (lineDirectiveName != null) {
                    // 如果是行指令, 替换整个标签内容.
                    StringBuffer buf = new StringBuffer();
                    buf.append(syntax.getDirectiveLeader());
                    buf.append(lineDirectiveName);
                    buf.append(syntax.getExpressionBegin());
                    buf.append(lineDirectiveValue);
                    buf.append(syntax.getExpressionEnd());
                    // 替换为行指令
                    document.replace(element.getBegin(), element.getEnd(), buf.toString());
                } else {
                    // 否则表示全为块指令
                    for (int i = 0; i < blockDirectiveAttributes.size(); i++) {
                        Attribute attribute = (Attribute) blockDirectiveAttributes.get(i);
                        // 移除属性
                        document.remove(attribute);
                    }
                    // 递归处理子标签
                    replaceChildren(element, document);
                }
                // ---- 结束指令处理 ----
                if (blockDirectiveNames.size() > 0) {
                    StringBuffer buf = new StringBuffer();
                    for (int i = blockDirectiveNames.size() - 1; i >= 0; i--) {
                        // 倒序添加结束指令
                        String blockDirectiveName = (String) blockDirectiveNames.get(i);
                        buf.append(syntax.getDirectiveLeader());
                        buf.append(syntax.getEndDirectiveName());
                        buf.append(syntax.getExpressionBegin());
                        buf.append(blockDirectiveName);
                        buf.append(syntax.getExpressionEnd());
                    }
                    // 插入结束指令
                    document.insert(element.getEnd(), buf.toString());
                }
                // 清理临时容器
                blockDirectiveNames.clear();
                blockDirectiveValues.clear();
                blockDirectiveAttributes.clear();
            }
        }
    }
}
