public void actionPerformed(ActionEvent event) {
    // System.out.println("action performed is "+event.getActionCommand());
    if (event.getActionCommand().equals("InterferenceGraph")) {
        System.out.println("action performed is " + event.getActionCommand());
        GraphWindow graphWindow = null;
        if (treeOfCFGs.getLeadSelectionRow() < 1) {
            JOptionPane.showMessageDialog(mainFrame, "Please select one of the CFGs generated.");
            return;
        }
        // Added by Shreesha -> Create cfg with one instruction per node
        // and use that to create the interference graph
        ControlFlowGraph chosenCFG = cfgs.get(treeOfCFGs.getLeadSelectionRow() - 1);
        CFGLinearizationDFS cfgLinearizationDFS = new CFGLinearizationDFS();
        Vector<AssemblyInstruction> instrs = ((Vector<AssemblyInstruction>) cfgLinearizationDFS.execute(chosenCFG, chosenCFG.getStartNode()));
        writeInstructionsToFile(new File("outfile.txt"), instrs);
        ControlFlowGraph flowGraph = new ControlFlowGraph(instrs, true);
        InterferenceGraph ig = new InterferenceGraph((flowGraph));
        ig.saveInterferenceGraphInFile(new File("ig_outfile.txt"));
        graphWindow = new GraphWindow(ig);
        if (graphWindow == null)
            return;
        graphWindow.applyAlgorithm("Spring");
        graphWindow.setVisible(true);
    } else if (event.getActionCommand().equals("DominatorTree")) {
        if (treeOfCFGs.getLeadSelectionRow() < 1) {
            JOptionPane.showMessageDialog(mainFrame, "Please select one of the CFGs generated.");
            return;
        }
        GraphWindow graphWindow = null;
        dt = createDominatorTree(cfgs.get(treeOfCFGs.getLeadSelectionRow() - 1));
        DDominatorTree dDominatorTree = new DDominatorTree(dt);
        dDominatorTree.constructDominatorTreeDisplayInfo();
        DomGraph domGraph = dDominatorTree.getDomGraph();
        domGraph.display();
        graphWindow = new GraphWindow(domGraph);
        if (graphWindow != null) {
            graphWindow.applyAlgorithm("Tree");
            graphWindow.setVisible(true);
        }
    }
}
