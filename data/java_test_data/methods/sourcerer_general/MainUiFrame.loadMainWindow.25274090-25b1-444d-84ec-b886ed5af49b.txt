public final void loadMainWindow() {
    Vector<RtmList> listEntries = new Vector<RtmList>();
    try {
        listEntries = fRtmService.getLists();
    } catch (RtmException rtme) {
        rtme.printStackTrace();
    }
    Map<String, TasksVector> tasksMap = new HashMap<String, TasksVector>();
    try {
        fSorter.clear();
        tasksMap = fRtmService.getTaskList();
        for (RtmList currentList : listEntries) {
            TasksVector currentTasks = tasksMap.get(currentList.getId());
            if (currentTasks != null) {
                currentList.setTasks(currentTasks);
                fSorter.addTaskList(currentTasks);
                if (currentTasks.size() == 0) {
                    currentList.setExpanded(false);
                }
            } else {
                TasksVector newVector = new TasksVector();
                tasksMap.put(currentList.getId(), newVector);
                currentList.setTasks(newVector);
                currentList.setExpanded(false);
            }
        }
    } catch (RtmException rtme) {
        rtme.printStackTrace();
    }
    TaskListPanel taskListPanel = new TaskListPanel();
    taskListPanel.setTaskListModel(new RtmTaskListModel(tasksMap, listEntries));
    this.getMainContentPanel().removeAll();
    this.getMainContentPanel().add(taskListPanel, BorderLayout.CENTER);
    this.validate();
}
