protected void onRender(Element parent, int index) {
    super.onRender(parent, index);
    System.out.println("---onRender GoodsTypeList---");
    List<String> wantedFields = new ArrayList<String>();
    wantedFields.add(GoodsTypeForm.ID);
    wantedFields.add(GoodsTypeForm.NAME);
    wantedFields.add(GoodsTypeForm.ATTRIBUTEGROUP);
    wantedFields.add(GoodsTypeForm.ATTRCOUNT);
    wantedFields.add(GoodsTypeForm.ENABLED);
    loader = new PagingListService().getLoader(ModelNames.GOODSTYPE, wantedFields);
    final ListStore<BeanObject> store = new ListStore<BeanObject>(loader);
    // store.addStoreListener(new StoreListener<BeanObject>() {
    // public void storeUpdate(StoreEvent<BeanObject> se) {
    // System.out.println("storeUpdate-----  se: "+se.toString());
    // }
    // });
    toolBar = new PagingToolBar(pageSize);
    toolBar.bind(loader);
    List<ColumnConfig> columns = new ArrayList<ColumnConfig>();
    // columns.add(new ColumnConfig(IGoodsType.NAME, "商品类型名称", 150));
    ColumnConfig col = new ColumnConfig(GoodsTypeForm.NAME, "商品类型名称", 150);
    col.setEditor(new CellEditor(GoodsTypeForm.getNameField(Resources.constants.GoodsTypeList_ColumnName())));
    columns.add(col);
    columns.add(new ColumnConfig(GoodsTypeForm.ATTRIBUTEGROUP, "属性分组", 120));
    columns.add(new ColumnConfig(GoodsTypeForm.ATTRCOUNT, "属性数", 80));
    CheckColumnConfig ccc1 = new CheckColumnConfig(GoodsTypeForm.ENABLED, "状态", 80);
    ccc1.setFixed(false);
    columns.add(ccc1);
    ColumnConfig actcol = new ColumnConfig("Action", Resources.constants.action(), 150);
    columns.add(actcol);
    ColumnModel cm = new ColumnModel(columns);
    Grid<BeanObject> grid = new EditorGrid<BeanObject>(store, cm);
    grid.setLoadMask(true);
    grid.setBorders(true);
    // grid.setSelectionModel(smRowSelection);
    // grid.setAutoExpandColumn("forum");
    ActionCellRenderer render = new ActionCellRenderer(grid);
    ActionCellRenderer.ActionInfo act = null;
    act = new ActionCellRenderer.ActionInfo();
    act.setText("属性列表 ");
    act.setAction("getAttrList($id)");
    render.addAction(act);
    act = new ActionCellRenderer.ActionInfo();
    act.setText("编辑 ");
    act.setAction("editGoodsType($id)");
    render.addAction(act);
    act = new ActionCellRenderer.ActionInfo();
    act.setText(" 删除");
    act.setAction("deleteGoodsType($id)");
    act.setTooltip(Resources.constants.GoodsList_action_delete());
    render.addAction(act);
    actcol.setRenderer(render);
    ContentPanel panel = new ContentPanel();
    panel.setFrame(true);
    panel.setCollapsible(true);
    panel.setAnimCollapse(false);
    panel.setButtonAlign(HorizontalAlignment.CENTER);
    panel.setIconStyle("icon-table");
    panel.setHeading("Paging Grid");
    panel.setLayout(new FitLayout());
    panel.add(grid);
    panel.setSize(750, 350);
    panel.setBottomComponent(toolBar);
    panel.setButtonAlign(HorizontalAlignment.CENTER);
    panel.addButton(new Button(Resources.constants.reset(), new SelectionListener<ButtonEvent>() {

        public void componentSelected(ButtonEvent ce) {
            store.rejectChanges();
        }
    }));
    panel.addButton(new Button(Resources.constants.save(), new SelectionListener<ButtonEvent>() {

        public void componentSelected(ButtonEvent ce) {
            List<Record> changed = store.getModifiedRecords();
            // TODO transactional ?  what happen if one record failed to update?
            for (Record rec : changed) {
                BeanObject bean = (BeanObject) rec.getModel();
                update(bean, null);
            }
            // this is to remove the mark from the UI only, will not handle committing to database
            store.commitChanges();
        }
    }));
    panel.addButton(new com.extjs.gxt.ui.client.widget.button.Button("添加类型", new SelectionListener<ButtonEvent>() {

        public void componentSelected(ButtonEvent ce) {
            newGoodsType();
        }
    }));
    add(panel);
}
