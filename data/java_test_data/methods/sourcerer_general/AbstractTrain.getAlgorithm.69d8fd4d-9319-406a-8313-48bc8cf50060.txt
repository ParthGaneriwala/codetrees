private JIntObjectTuple<IAlgorithm> getAlgorithm() {
    Element eTrain = getElement(e_config, TAG_CLASSIFY);
    Element element = getElement(eTrain, TAG_CLASSIFY_ALGORITHM);
    String name = element.getAttribute("name").trim();
    StringBuilder options = new StringBuilder();
    IAlgorithm algorithm = null;
    String tmp;
    if (name.equals(IAlgorithm.LIBLINEAR_L2)) {
        byte lossType = 1;
        double c = 0.1, eps = 0.1, bias = -1;
        if ((tmp = element.getAttribute("l").trim()).length() > 0)
            lossType = Byte.parseByte(tmp);
        if ((tmp = element.getAttribute("c").trim()).length() > 0)
            c = Double.parseDouble(tmp);
        if ((tmp = element.getAttribute("e").trim()).length() > 0)
            eps = Double.parseDouble(tmp);
        if ((tmp = element.getAttribute("b").trim()).length() > 0)
            bias = Double.parseDouble(tmp);
        algorithm = new LibLinearL2(lossType, c, eps, bias);
        options.append("loss_type = ");
        options.append(lossType);
        options.append(", c = ");
        options.append(c);
        options.append(", eps = ");
        options.append(eps);
        options.append(", bias = ");
        options.append(bias);
    } else if (name.equals(IAlgorithm.RRM)) {
        int k = 40;
        double mu = 1.0, eta = 0.001, c = 0.1;
        if ((tmp = element.getAttribute("k").trim()).length() > 0)
            k = Integer.parseInt(tmp);
        if ((tmp = element.getAttribute("m").trim()).length() > 0)
            mu = Double.parseDouble(tmp);
        if ((tmp = element.getAttribute("e").trim()).length() > 0)
            eta = Double.parseDouble(tmp);
        if ((tmp = element.getAttribute("c").trim()).length() > 0)
            c = Double.parseDouble(tmp);
        algorithm = new RRM(k, mu, eta, c);
        options.append("K = ");
        options.append(k);
        options.append(", mu = ");
        options.append(mu);
        options.append(", eta = ");
        options.append(eta);
        options.append(", c = ");
        options.append(c);
    }
    int numThreads = 1;
    element = getElement(eTrain, "threads");
    if (element != null)
        numThreads = Integer.parseInt(element.getTextContent().trim());
    System.out.println("\n* Train model");
    System.out.println("- algorithm: " + name);
    System.out.println("- options  : " + options.toString());
    System.out.println("- threads  : " + numThreads);
    System.out.println();
    return new JIntObjectTuple<IAlgorithm>(numThreads, algorithm);
}
