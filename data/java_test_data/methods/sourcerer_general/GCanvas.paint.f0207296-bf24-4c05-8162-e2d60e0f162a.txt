public void paint(Graphics g) {
    // super.paint(g);
    // cast to 2D
    Graphics2D g2D = (Graphics2D) g;
    g2D.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
    g2D.setStroke(new BasicStroke(2f));
    g2D.setFont(new Font("Arial Bold", Font.BOLD, 12));
    // g2D.setBackground(Color.white);
    // Stroke s = new BasicStroke(1);
    // g2D.setStroke(s);
    // g2D.setColor(Color.white);
    // IProblem problem = new LayoutProblem();
    double x1, x2, y1, y2, w, h, scale;
    int xx, yy, width, height, widthMax, heightMax, margin;
    x1 = problem.getLowerLimit(0);
    x2 = problem.getUpperLimit(0);
    y1 = problem.getLowerLimit(1);
    y2 = problem.getUpperLimit(1);
    w = Math.abs(x2 - x1);
    h = Math.abs(y2 - y1);
    // Calculating the positions and sizes
    widthMax = getWidth();
    heightMax = getHeight();
    // = 20px
    margin = 20;
    // Resizing the image
    width = (widthMax - margin);
    height = (int) Math.round((h * (widthMax - margin)) / w);
    if (height > (heightMax - margin)) {
        height = (heightMax - margin);
        width = (int) Math.round((w * (heightMax - margin)) / h);
    }
    scale = width / w;
    xx = (int) Math.round(margin / 2.0);
    yy = (int) Math.round(margin / 2.0);
    g2D.setColor(Color.WHITE);
    g2D.fillRect(xx, yy, width, height);
    g2D.setColor(Color.LIGHT_GRAY);
    g2D.drawRect(xx, yy, (int) Math.ceil(w * scale), (int) Math.ceil(h * scale));
    // Drawing the map restrictions
    for (LayoutMapRestriction mapRestriction : mapRestrictions) {
        g2D.fillRect((int) Math.round((mapRestriction.getX1() * scale) + xx), (int) Math.round((mapRestriction.getY1() * scale) + yy), (int) Math.round(mapRestriction.getW() * scale), (int) Math.round(mapRestriction.getH() * scale));
    }
    double x, y, p;
    int pos;
    LayoutMachine machine1, machine2;
    g2D.setColor(Color.BLACK);
    // Updating the position of all machines
    for (int i = 0; i < machines.size(); i++) {
        x = solution[((i * 3) + 0)];
        y = solution[((i * 3) + 1)];
        p = solution[((i * 3) + 2)];
        pos = convertPosition(p);
        machine1 = machines.get(i);
        machine1.updatePosition(x, y, pos);
        drawRectangle(g2D, (float) Math.round(((machine1.getX1() * scale) + xx)), (float) Math.round(((machine1.getY1() * scale) + yy)), (float) Math.round(((machine1.getX2() - machine1.getX1()) * scale)), (float) Math.round(((machine1.getY2() - machine1.getY1()) * scale)));
        g2D.setFont(new Font("Arial", 0, 20));
        g2D.drawString(machine1.getName(), Math.round((machine1.getCenterX() * scale) + xx - 10), Math.round((machine1.getCenterY() * scale) + yy + 10));
    }
    g2D.setColor(Color.RED);
    // Creating the links
    int posSaida, posEntrada;
    for (LayoutLink machineLink : machinesLinks) {
        x1 = 0.0;
        x2 = 0.0;
        y1 = 0.0;
        y2 = 0.0;
        machine1 = machines.get(machineLink.getSourceIndex());
        machine2 = machines.get(machineLink.getDestIndex());
        // Get the current position of the machines
        posSaida = (machine1.getPosition() + machineLink.getSourceSide()) % 4;
        posEntrada = (machine2.getPosition() + machineLink.getDestSide()) % 4;
        switch(posSaida) {
            case LayoutMachine.TOP:
                x1 = machine1.getCenterX();
                y1 = machine1.getY1();
                break;
            case LayoutMachine.BOTTOM:
                x1 = machine1.getCenterX();
                y1 = machine1.getY2();
                break;
            case LayoutMachine.LEFT:
                x1 = machine1.getX1();
                y1 = machine1.getCenterY();
                break;
            case LayoutMachine.RIGHT:
                x1 = machine1.getX2();
                y1 = machine1.getCenterY();
                break;
        }
        switch(posEntrada) {
            case LayoutMachine.TOP:
                x2 = machine2.getCenterX();
                y2 = machine2.getY1();
                break;
            case LayoutMachine.BOTTOM:
                x2 = machine2.getCenterX();
                y2 = machine2.getY2();
                break;
            case LayoutMachine.LEFT:
                x2 = machine2.getX1();
                y2 = machine2.getCenterY();
                break;
            case LayoutMachine.RIGHT:
                x2 = machine2.getX2();
                y2 = machine2.getCenterY();
                break;
        }
        g2D.drawLine((int) Math.round((x1 * scale) + xx), (int) Math.round((y1 * scale) + yy), (int) Math.round((x2 * scale) + xx), (int) Math.round((y2 * scale) + yy));
    }
}
