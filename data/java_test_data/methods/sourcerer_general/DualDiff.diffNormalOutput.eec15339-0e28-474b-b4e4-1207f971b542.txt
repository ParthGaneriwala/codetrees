public static void diffNormalOutput(View view) {
    if (!DualDiff.isEnabledFor(view)) {
        view.getToolkit().beep();
        return;
    }
    DualDiff dualDiff = DualDiff.getDualDiffFor(view);
    // Generate the script
    Buffer buf0 = dualDiff.editPane0.getBuffer();
    Buffer buf1 = dualDiff.editPane1.getBuffer();
    FileLine[] fileLines0 = dualDiff.getFileLines(buf0);
    FileLine[] fileLines1 = dualDiff.getFileLines(buf1);
    Diff d = new Diff(fileLines0, fileLines1);
    Diff.change script = d.diff_2(false);
    // Files are identical: return
    if (script == null) {
        GUIUtilities.message(view, "jdiff.identical-files", null);
        return;
    }
    // Generate the normal output
    StringWriter sw = new StringWriter();
    DiffOutput diffOutput = new DiffNormalOutput(fileLines0, fileLines1);
    diffOutput.setOut(new BufferedWriter(sw));
    diffOutput.setLineSeparator("\n");
    try {
        diffOutput.writeScript(script);
    } catch (IOException ioe) {
        Log.log(Log.DEBUG, DualDiff.class, ioe);
    }
    // Get/create the output view and create a new buffer
    View outputView = jEdit.getFirstView();
    for (; outputView != null; outputView = outputView.getNext()) {
        if (!DualDiff.isEnabledFor(outputView)) {
            break;
        }
    }
    if (outputView == null) {
        outputView = jEdit.newView(view, view.getBuffer());
    }
    Buffer outputBuffer = jEdit.newFile(outputView);
    // Insert the normal output into the buffer
    String s = sw.toString();
    outputBuffer.insert(0, s);
    // adds one extra newline so we remove it
    if (s.endsWith("\n") && outputBuffer.getLength() > 0) {
        outputBuffer.remove(outputBuffer.getLength() - 1, 1);
    }
}
