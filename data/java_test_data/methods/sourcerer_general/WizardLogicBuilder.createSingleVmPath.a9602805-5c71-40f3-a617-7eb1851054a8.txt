private PreviewAndOptionPath createSingleVmPath(PageImpl<?> basePage, OptionalSwitcher<Boolean> switcher, final ValueSource<? extends Optional<? extends List<ScriptTargetMapping>>> selectedVmValue) {
    // This path consists of 1 page
    final PageImpl<PushChangesWizard.V8PreviewPageElements> v8PreviewPage = pageSet.getV8PreviewPage();
    // All logic is inside a dedicated scope, which gets enabled only when user chooses exactly
    // one VM on a previous page. The scope enablement is synchronized with these pages becoming
    // available to user.
    ScopeEnabler scopeEnabler = new NextPageEnabler(basePage, v8PreviewPage);
    Scope scope = switcher.addScope(Boolean.TRUE, scopeEnabler);
    // A value of the single vm, that must be always available within this scope.
    final ValueProcessor<ScriptTargetMapping> singleVmValue = createProcessor(new Gettable<ScriptTargetMapping>() {

        public ScriptTargetMapping getValue() {
            // Value targets should be normal (by switcher condition).
            return selectedVmValue.getValue().getNormal().get(0);
        }
    });
    updater.addConsumer(scope, singleVmValue);
    updater.addSource(scope, singleVmValue);
    updater.addDependency(singleVmValue, selectedVmValue);
    // A complex asynchronous value source that feeds update preview data from V8.
    // The data is in raw format.
    final PreviewLoader previewRawResultValue = new PreviewLoader(updater, singleVmValue);
    previewRawResultValue.registerSelf(scope);
    // previewRawResultValue is trigged only when page is actually visible to user.
    v8PreviewPage.addListener(new PageListener() {

        public void onSetVisible(boolean visible) {
            previewRawResultValue.setActive(visible);
        }
    });
    // Parses raw preview value and converts it into a form suitable for the viewer; also handles
    // errors that become warnings.
    final ValueProcessor<Optional<? extends LiveEditDiffViewer.Input>> previewValue = createProcessor(handleErrors(new NormalExpression<LiveEditDiffViewer.Input>() {

        @Calculate
        public Optional<? extends LiveEditDiffViewer.Input> calculate(ChangeDescription previewRawResultParam) {
            ScriptTargetMapping filePair = singleVmValue.getValue();
            ChangeDescription changeDescription = previewRawResultParam;
            Optional<LiveEditDiffViewer.Input> result;
            if (changeDescription == null) {
                result = createOptional(null);
            } else {
                try {
                    LiveEditDiffViewer.Input viewerInput = PushResultParser.createViewerInput(changeDescription, filePair, true);
                    result = createOptional(viewerInput);
                } catch (RuntimeException e) {
                    ChromiumDebugPlugin.log(e);
                    result = createErrorOptional(new Message("Error in getting preview: " + e.toString(), MessagePriority.WARNING));
                }
            }
            return result;
        }

        @DependencyGetter
        public ValueSource<Optional<UpdatableScript.ChangeDescription>> previewRawResultValueSource() {
            return previewRawResultValue;
        }
    }));
    updater.addConsumer(scope, previewValue);
    updater.addSource(scope, previewValue);
    updater.addDependency(previewValue, previewRawResultValue);
    updater.addDependency(previewValue, singleVmValue);
    // A simple consumer that sets preview data to the viewer.
    ValueConsumer v8PreviewInputSetter = new ValueConsumer() {

        public void update(Updater updater) {
            Optional<? extends LiveEditDiffViewer.Input> previewOptional = previewValue.getValue();
            LiveEditDiffViewer.Input viewerInput;
            if (previewOptional.isNormal()) {
                viewerInput = previewOptional.getNormal();
            } else {
                viewerInput = null;
            }
            v8PreviewPage.getPageElements().getPreviewViewer().setInput(viewerInput);
        }
    };
    updater.addConsumer(scope, v8PreviewInputSetter);
    updater.addDependency(v8PreviewInputSetter, previewValue);
    // A warning generator that collects them from v8 preview loader.
    final ValueProcessor<Optional<Void>> warningValue = createProcessor(new Gettable<Optional<Void>>() {

        public Optional<Void> getValue() {
            Optional<?> previewResult = previewValue.getValue();
            if (previewResult.isNormal()) {
                return createOptional(null);
            } else {
                return createErrorOptional(previewResult.errorMessages());
            }
        }
    });
    updater.addConsumer(scope, warningValue);
    updater.addSource(scope, warningValue);
    updater.addDependency(warningValue, previewValue);
    // A finisher delegate source, that does not actually depend on most of the code above.
    final ValueProcessor<? extends Optional<FinisherDelegate>> wizardFinisher = createProcessor((new Gettable<Optional<FinisherDelegate>>() {

        public Optional<FinisherDelegate> getValue() {
            FinisherDelegate finisher = new PushChangesWizard.SingleVmFinisher(singleVmValue.getValue());
            return createOptional(finisher);
        }
    }));
    updater.addSource(scope, wizardFinisher);
    updater.addConsumer(scope, wizardFinisher);
    updater.addDependency(wizardFinisher, singleVmValue);
    return new PreviewAndOptionPath() {

        public ValueSource<? extends Optional<FinisherDelegate>> getFinisherDelegateValue() {
            return wizardFinisher;
        }

        public ValueSource<Optional<Void>> getWarningValue() {
            return warningValue;
        }
    };
}
