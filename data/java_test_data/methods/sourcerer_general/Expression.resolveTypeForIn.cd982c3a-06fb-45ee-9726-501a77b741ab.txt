void resolveTypeForIn(Session session) throws HsqlException {
    if (eArg2.exprType == QUERY) {
        if (eArg.isParam) {
            eArg.dataType = eArg2.dataType;
        }
        isQueryCorrelated = !eArg2.subQuery.isResolved;
    } else {
        Expression[] vl = eArg2.valueList;
        int len = vl.length;
        if (eArg.isParam) {
            if (vl[0].isParam) {
                throw Trace.error(Trace.UNRESOLVED_PARAMETER_TYPE, Trace.Expression_resolveTypeForIn2);
            }
            Expression e = vl[0];
            int dt = e.dataType;
            // should never be Types.NULL when all is said and done
            if (dt == Types.NULL) {
            // do nothing...
            } else {
                if (eArg.dataType == Types.NULL) {
                    eArg.dataType = dt;
                }
                if (eArg2.dataType == Types.NULL) {
                    eArg2.dataType = dt;
                }
            }
            for (int i = 1; i < len; i++) {
                e = vl[i];
                if (e.isParam) {
                    if (e.dataType == Types.NULL && dt != Types.NULL) {
                        e.dataType = dt;
                    }
                } else {
                    e.resolveTypes(session);
                }
            }
        } else {
            int dt = eArg.dataType;
            if (eArg2.dataType == Types.NULL && dt != Types.NULL) {
                eArg2.dataType = dt;
            }
            for (int i = 0; i < len; i++) {
                Expression e = vl[i];
                if (e.isParam) {
                    if (e.dataType == Types.NULL && dt != Types.NULL) {
                        e.dataType = dt;
                    }
                } else {
                    e.resolveTypes(session);
                }
            }
        }
        eArg2.isFixedConstantValueList = eArg2.dataType != Types.VARCHAR_IGNORECASE;
        for (int i = 0; i < len; i++) {
            if (!vl[i].isFixedConstant()) {
                eArg2.isFixedConstantValueList = false;
                isQueryCorrelated = true;
                break;
            }
        }
        if (eArg2.isFixedConstantValueList) {
            eArg2.hList = new HashSet();
            for (int i = 0; i < len; i++) {
                try {
                    Object value = eArg2.valueList[i].getValue(session);
                    value = Column.convertObject(value, eArg2.dataType);
                    if (eArg2.dataType == Types.CHAR && value != null) {
                        value = Library.rtrim((String) value);
                    }
                    eArg2.hList.add(value);
                } catch (HsqlException e) {
                }
            }
        }
    }
}
