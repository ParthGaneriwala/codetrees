public void doView(RenderRequest request, RenderResponse response) throws PortletException, IOException {
    try {
        String defaultView = PROJECT_CATEGORY_VIEW_PAGE;
        // Determine the application's instance id
        int instanceId = PortalUtils.getInstance(request).getId();
        // Get preferences
        boolean autoSetPageTitle = Boolean.parseBoolean(request.getPreferences().getValue(PREF_AUTO_SET_PAGE_TITLE, "false"));
        String categoryValue = request.getPreferences().getValue(PREF_CATEGORY_NAME, PortalUtils.getPageView(request));
        LOG.debug("Category: " + categoryValue);
        if (categoryValue == null) {
        // @todo return a list of top-level categories to choose from
        }
        String title = request.getPreferences().getValue(PREF_TITLE, null);
        title = StringUtils.replace(title, "${category}", categoryValue);
        request.setAttribute(TITLE, title);
        LOG.debug("Title: " + title);
        String hasMoreUrl = request.getPreferences().getValue(PREF_HAS_MORE_URL, null);
        hasMoreUrl = StringUtils.replace(hasMoreUrl, "${category}", categoryValue);
        request.setAttribute(HAS_MORE_URL, hasMoreUrl);
        LOG.debug("HasMoreURL: " + hasMoreUrl);
        request.setAttribute(HAS_MORE_TITLE, request.getPreferences().getValue(PREF_HAS_MORE_TITLE, "Browse more categories"));
        boolean showSubcategories = Boolean.parseBoolean(request.getPreferences().getValue(PREF_SHOW_SUBCATEGORIES, "false"));
        boolean showProjects = Boolean.parseBoolean(request.getPreferences().getValue(PREF_SHOW_PROJECTS, "false"));
        // Base the selected subcategory off of the URL
        String subCategoryString = PortalUtils.getPageParameter(request);
        // convert the space back to a space
        subCategoryString = ProjectCategory.getCategoryNameFromNormalizedCategoryName(subCategoryString);
        LOG.debug("Subcategory: " + subCategoryString);
        // Get the top-level category
        ProjectCategoryList categories = (ProjectCategoryList) request.getAttribute(Constants.REQUEST_TAB_CATEGORY_LIST);
        ProjectCategory category = categories.getFromValue(categoryValue);
        request.setAttribute(PROJECT_CATEGORY, category);
        // Determine the database connection to use
        Connection db = PortalUtils.useConnection(request);
        // Determine the subcategory to use for showing projects
        ProjectCategory subCategory = null;
        if (showSubcategories && subCategoryString != null) {
            ProjectCategoryList subCategories = new ProjectCategoryList();
            subCategories.setParentCategoryId(category.getId());
            subCategories.setCategoryDescriptionLowerCase(subCategoryString);
            subCategories.setEnabled(true);
            subCategories.buildList(db);
            if (subCategories.size() > 0) {
                subCategory = subCategories.get(0);
                request.setAttribute(PROJECT_SUB_CATEGORY, subCategory);
            }
        }
        // This portlet can retrieve state data from other portlets
        boolean showThisPortlet = true;
        for (String event : PortalUtils.getDashboardPortlet(request).getConsumeDataEvents()) {
            // Detects if another instance of this portlet is showing categories
            if (event.equals("subcategory")) {
                String subcategoryBeingShownByAnotherPortlet = (String) PortalUtils.getGeneratedData(request, event);
                LOG.debug("Consumed a subcategory: " + subcategoryBeingShownByAnotherPortlet);
                if (!StringUtils.hasText(subcategoryBeingShownByAnotherPortlet)) {
                    showThisPortlet = false;
                    defaultView = null;
                }
            }
        }
        // This portlet can provide state data to other portlets
        for (String event : PortalUtils.getDashboardPortlet(request).getGenerateDataEvents()) {
            if (event.toLowerCase().equals("subcategory") && subCategory != null) {
                PortalUtils.setGeneratedData(request, event, subCategory.getDescription());
                LOG.debug("SetData: " + event + " - " + PortalUtils.getGeneratedData(request, event));
            } else if (event.toLowerCase().equals("category") && category != null) {
                PortalUtils.setGeneratedData(request, event, category.getDescription());
                LOG.debug("SetData: " + event + " - " + PortalUtils.getGeneratedData(request, event));
            }
        }
        // Generate a page title
        if (autoSetPageTitle) {
            DashboardPage dashboardPage = PortalUtils.getDashboardPage(request);
            String pageTitle = null;
            if (dashboardPage != null) {
                // Set the title
                if (subCategory != null) {
                    pageTitle = subCategory.getLabel() + " - " + category.getLabel();
                } else if (category != null) {
                    pageTitle = category.getLabel();
                }
                if (pageTitle != null) {
                    request.setAttribute(Constants.REQUEST_GENERATED_TITLE, pageTitle);
                }
                // Set the category
                if (category != null) {
                    request.setAttribute(Constants.REQUEST_GENERATED_CATEGORY, category.getDescription());
                }
            }
        }
        if (showThisPortlet) {
            if (showProjects && (subCategoryString != null || !showSubcategories)) {
                request.setAttribute(PREF_SHOW_CATEGORY_LANDING_PAGE_LINK, request.getPreferences().getValue(PREF_SHOW_CATEGORY_LANDING_PAGE_LINK, "false"));
                // Show the projects
                boolean hasPaging = "true".equals(request.getPreferences().getValue(PREF_HAS_PAGING, "false"));
                PagedListInfo projectListInfo = new PagedListInfo();
                if (hasPaging) {
                    // Use paged data for sorting
                    String limit = request.getPreferences().getValue(PREF_PROJECT_LIMIT, "-1");
                    request.setAttribute(RECORD_LIMIT, limit);
                    projectListInfo.setItemsPerPage(limit);
                    if (showSubcategories) {
                        String pageNumber = null;
                        String[] params = PortalUtils.getPageParameters(request);
                        if (params != null) {
                            // E.g., {url}/page/${page name}/${project category}/${project sub category}/${page number}
                            if (params.length == 2) {
                                pageNumber = params[1];
                            }
                        }
                        if (StringUtils.hasText(pageNumber) && StringUtils.isNumber(pageNumber)) {
                            projectListInfo.setCurrentPage(Integer.parseInt(pageNumber));
                        }
                    } else {
                        String pageNumber = null;
                        String[] params = PortalUtils.getPageParameters(request);
                        if (params != null) {
                            // E.g., {url}/page/${page name}/${project category}/${page number}
                            if (params.length == 1) {
                                pageNumber = params[0];
                            }
                        }
                        if (StringUtils.hasText(pageNumber) && StringUtils.isNumber(pageNumber)) {
                            projectListInfo.setCurrentPage(Integer.parseInt(pageNumber));
                        }
                    }
                } else {
                    projectListInfo.setItemsPerPage(-1);
                }
                request.setAttribute(HAS_PAGING, request.getPreferences().getValue(PREF_HAS_PAGING, "false"));
                projectListInfo.setColumnToSortBy("titleLower");
                projectListInfo.setContextPath(request.getContextPath());
                // Get portal items
                IIndexerSearch searcher = (IIndexerSearch) request.getAttribute(SEARCHER);
                if (searcher == null) {
                    LOG.error("SEARCHER IS NULL!");
                }
                String queryString = (String) request.getAttribute(BASE_QUERY_STRING);
                queryString += "AND (type:project) " + (instanceId > -1 ? "AND (instanceId:" + instanceId + ") " : "") + "AND (projectCategoryId:" + category.getId() + ") ";
                if (subCategory != null) {
                    queryString += "AND (projectCategoryId1:" + subCategory.getId() + ") ";
                }
                // Determine which listings to show based on whether user is logged in
                if (PortalUtils.getUser(request).getId() > 0) {
                    queryString += "AND ((guests:1) OR (participants:1)) ";
                } else {
                    queryString += "AND (guests:1) ";
                }
                IndexerQueryResultList hits = new IndexerQueryResultList(queryString);
                hits.setPagedListInfo(projectListInfo);
                searcher.search(hits);
                request.setAttribute("hits", hits);
                defaultView = PROJECT_VIEW_PAGE;
            } else {
                int columns = Integer.parseInt(request.getPreferences().getValue(PREF_COLUMNS, "1"));
                // Use paged list for limiting number of records, and for counting all
                String limit = request.getPreferences().getValue(PREF_LIMIT, "-1");
                PagedListInfo pagedListInfo = new PagedListInfo();
                pagedListInfo.setItemsPerPage(Integer.parseInt(limit));
                ProjectCategoryList subCategories = new ProjectCategoryList();
                subCategories.setPagedListInfo(pagedListInfo);
                if (category != null) {
                    subCategories.setParentCategoryId(category.getId());
                    subCategories.setEnabled(true);
                    subCategories.buildList(db);
                }
                request.setAttribute(PREF_COLUMNS, columns);
                request.setAttribute(PROJECT_SUBCATEGORY_LIST, subCategories);
                request.setAttribute(HAS_MORE, String.valueOf(pagedListInfo.getNumberOfPages() > 1));
                if (subCategories.size() == 0) {
                    defaultView = null;
                }
            }
        }
        if (defaultView != null) {
            PortletContext context = getPortletContext();
            PortletRequestDispatcher requestDispatcher = context.getRequestDispatcher(defaultView);
            requestDispatcher.include(request, response);
        }
    } catch (Exception e) {
        LOG.error("Exception", e);
        throw new PortletException(e.getMessage());
    }
}
