public void testUpdateProjectCRMConnectionAttributes() throws Exception {
    String title = "API Test Project";
    int newProjectId = -1;
    {
        ArrayList<String> meta = new ArrayList<String>();
        meta.add("id");
        api.setTransactionMeta(meta);
        // Insert a new project (features are set when the project is inserted)
        DataRecord record = new DataRecord();
        record.setName("project");
        record.setAction(DataRecord.INSERT);
        record.addField("title", title);
        record.addField("shortDescription", "API Test Project CRM Connection information");
        record.addField("requestDate", new Date());
        record.addField("enteredBy", USER_ID);
        record.addField("modifiedBy", USER_ID);
        record.addField("groupId", GROUP_ID);
        api.save(record);
        processTheTransactions(api, packetContext);
        assertFalse("API reported a transaction error: " + api.getLastResponse(), api.hasError());
        newProjectId = Integer.parseInt(api.getResponseValue("id"));
        assertTrue(newProjectId > 0);
        ProjectCRM projectCRM = new ProjectCRM(db, newProjectId);
        assertNull(projectCRM.getConcursiveCRMUrl());
        assertNull(projectCRM.getConcursiveCRMClient());
        assertNull(projectCRM.getConcursiveCRMCode());
        assertNull(projectCRM.getConcursiveCRMDomain());
    }
    {
        DataRecord record = new DataRecord();
        record.setName("projectCRM");
        record.setAction(DataRecord.UPDATE);
        record.addField("id", newProjectId);
        record.addField("concursiveCRMUrl", "TEST");
        record.addField("concursiveCRMDomain", "TEST");
        record.addField("concursiveCRMCode", "TEST");
        record.addField("concursiveCRMClient", "TEST");
        record.addField("modifiedBy", USER_ID);
        api.save(record);
        processTheTransactions(api, packetContext);
        assertFalse("API reported a transaction error: " + api.getLastResponse(), api.hasError());
        ProjectCRM projectCRM = new ProjectCRM(db, newProjectId);
        assertTrue("TEST".equals(projectCRM.getConcursiveCRMUrl()));
        assertTrue("TEST".equals(projectCRM.getConcursiveCRMClient()));
        assertTrue("TEST".equals(projectCRM.getConcursiveCRMCode()));
        assertTrue("TEST".equals(projectCRM.getConcursiveCRMDomain()));
        Project project = new Project(db, newProjectId);
        project.delete(db, null);
    }
}
