public static synchronized boolean sendMail(String[] to, String[] cc, String[] bcc, String subject, String text) {
    Properties props = new Properties();
    // Properties props=System.getProperties();
    props.put("mail.smtp.user", userName);
    props.put("mail.smtp.host", host);
    if (!"".equals(port))
        props.put("mail.smtp.port", port);
    if (!"".equals(starttls))
        props.put("mail.smtp.starttls.enable", starttls);
    props.put("mail.smtp.auth", auth);
    if (!"".equals(port))
        props.put("mail.smtp.socketFactory.port", port);
    if (!"".equals(socketFactoryClass))
        props.put("mail.smtp.socketFactory.class", socketFactoryClass);
    if (!"".equals(fallback))
        props.put("mail.smtp.socketFactory.fallback", fallback);
    try {
        Session session = Session.getDefaultInstance(props, null);
        MimeMessage msg = new MimeMessage(session);
        msg.setText(text);
        msg.setSubject(subject);
        for (int i = 0; i < to.length; i++) {
            msg.addRecipient(Message.RecipientType.TO, new InternetAddress(to[i]));
        }
        for (int i = 0; i < cc.length; i++) {
            msg.addRecipient(Message.RecipientType.CC, new InternetAddress(cc[i]));
        }
        for (int i = 0; i < bcc.length; i++) {
            msg.addRecipient(Message.RecipientType.BCC, new InternetAddress(bcc[i]));
        }
        msg.saveChanges();
        Transport transport = session.getTransport("smtp");
        transport.connect(host, userName, passWord);
        transport.sendMessage(msg, msg.getAllRecipients());
        transport.close();
        return true;
    } catch (Exception mex) {
        mex.printStackTrace();
        return false;
    }
}
