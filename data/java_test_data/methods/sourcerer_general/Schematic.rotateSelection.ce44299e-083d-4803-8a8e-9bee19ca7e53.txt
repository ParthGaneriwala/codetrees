public void rotateSelection(int dir) {
    SObject object;
    boolean checkpoint = false;
    int index;
    int rx, ry;
    if (selection.size() == 0)
        return;
    if (!selectionContained())
        return;
    if (!rotate) {
        /*
             * Rotation started. Checkpoint the objects.
             */
        rotate = true;
        checkpoint = true;
        transaction(0);
    }
    if (selection.size() == 1) {
        object = (SObject) selection.get(0);
        if (checkpoint)
            checkpoint(object, 0);
        object.rotate(dir);
    } else {
        /*
             * Selection contains multiple objects.  If these objects are 
             * capable of being rotated (the selection is 'self contained') then 
             * find the center of mass for all these objects and rotate them 
             * around this point.
             */
        if (checkpoint) {
            /*
                 * Calculate the center of mass point only initially to minimize
                 * roundoff errors.  TODO: find a way to eliminate these errors
                 */
            center.x = 0;
            center.y = 0;
            for (index = 0; index < selection.size(); index++) {
                object = (SObject) selection.get(index);
                center.x += object.center().x;
                center.y += object.center().y;
            }
            center.x /= (float) selection.size();
            center.y /= (float) selection.size();
        }
        for (index = 0; index < selection.size(); index++) {
            object = (SObject) selection.get(index);
            if (checkpoint)
                checkpoint(object, 0);
            object.rotate(dir, Math.round(center.x), Math.round(center.y));
        }
    }
}
