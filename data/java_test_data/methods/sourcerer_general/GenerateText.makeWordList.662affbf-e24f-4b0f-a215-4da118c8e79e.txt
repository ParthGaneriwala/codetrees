@SuppressWarnings("unchecked")
private static long[] makeWordList(ContextClusters clusters) {
    final int nrWords = allOvertFactors.length;
    long[] words = new long[nrWords];
    double[] probs = new double[nrWords];
    ArrayList<LanguageModel> lms = bigramForest.getModels();
    final int nrModels = lms.size();
    final int nrTotalModels = Experiment.getInstance().getNumLMs();
    Decoder decoder = bigramForest.getDecoder();
    for (int pos = 0; pos < nrWords; ++pos) {
        long word = allOvertFactors[pos];
        RequestBundle<Key, OnDiskCompactProbTree> bundle = new RequestBundle<Key, OnDiskCompactProbTree>(decoder.getStorage());
        BinaryTree<HistoryTreePayload>[] requestNodes = new BinaryTree[nrTotalModels];
        for (byte i = 0; i < nrModels; ++i) {
            LanguageModel lm = lms.get(i);
            int clusterid = clusters.getClusters()[i];
            requestNodes[lm.getIdNum()] = lm.getNodes()[clusterid];
            Key key = new Key(lm.getIdNum(), clusterid, word);
            bundle.request(key);
        }
        try {
            bundle.sync();
        } catch (InterruptedException e) {
        }
        OnDiskCompactProbTree probTree = decoder.computeProbTree(requestNodes, word, bundle.getResults(), null);
        double prob = probTree == null ? 0 : probTree.getProb();
        int idx = Arrays.binarySearch(probs, 0, pos, prob);
        if (idx < 0) {
            idx = -idx - 1;
        }
        if (idx < pos) {
            System.arraycopy(probs, idx, probs, idx + 1, pos - idx);
            System.arraycopy(words, idx, words, idx + 1, pos - idx);
        }
        probs[idx] = prob;
        words[idx] = word;
    }
    // reverse
    long[] w = new long[nrWords];
    for (int i = 0; i < nrWords; ++i) {
        w[i] = words[nrWords - 1 - i];
    }
    return w;
}
