private static String getDataAsStringFromServer(String postURL, ArrayList<String[]> alParams) {
    String responseString = null;
    HttpClient client = null;
    HttpPost post = null;
    HttpResponse responsePOST = null;
    try {
        client = new DefaultHttpClient();
        post = new HttpPost(postURL);
        post.addHeader("Accept-Encoding", "gzip");
        List<NameValuePair> params = new ArrayList<NameValuePair>(2);
        for (int i = 0; i < alParams.size(); i++) {
            String[] param = alParams.get(i);
            params.add(new BasicNameValuePair(param[0], param[1]));
        }
        UrlEncodedFormEntity ent = new UrlEncodedFormEntity(params);
        post.setEntity(ent);
        responsePOST = client.execute(post);
        StatusLine status = responsePOST.getStatusLine();
        // 404 = not found
        int statusCode = status.getStatusCode();
        Log.i("getDataAsStringFromServer", "statusCode: " + statusCode);
        if (statusCode == Konstanten.HTTP_FILE_NOT_FOUND) {
            return String.valueOf(statusCode);
        }
        // GZIP Daten entpacken
        ByteArrayOutputStream streamBuilder = new ByteArrayOutputStream();
        InputStream instream = responsePOST.getEntity().getContent();
        Header contentEncoding = responsePOST.getFirstHeader("Content-Encoding");
        if (contentEncoding != null && contentEncoding.getValue().equalsIgnoreCase("gzip")) {
            instream = new GZIPInputStream(instream);
        }
        int bytesRead;
        byte[] tempBuffer = new byte[8192 * 2];
        while ((bytesRead = instream.read(tempBuffer)) != -1) {
            streamBuilder.write(tempBuffer, 0, bytesRead);
        }
        responseString = streamBuilder.toString();
    } catch (Exception e) {
        Log.e("getDataFromServer ERROR", e.getMessage());
    }
    return responseString;
}
