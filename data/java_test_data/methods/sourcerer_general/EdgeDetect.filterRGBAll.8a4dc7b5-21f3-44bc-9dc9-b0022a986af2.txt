public synchronized void filterRGBAll(int width, int height, int[][] rgbPixels) {
    int[][] newPixels = new int[height][width];
    long sum1, sum2;
    double sum;
    int r, g, b;
    // First and last rows are black.
    try {
        for (int col = 0; col < width; ++col) {
            newPixels[0][col] = 0xff000000;
            newPixels[height - 1][col] = 0xff000000;
        }
    } catch (RuntimeException e) {
        throw e;
    }
    try {
        for (int row = 1; row < height - 1; ++row) {
            // First and last columns are black too.
            newPixels[row][0] = 0xff000000;
            newPixels[row][width - 1] = 0xff000000;
            // The real pixels.
            for (int col = 1; col < width - 1; ++col) {
                sum1 = rgbModel.getRed(rgbPixels[row - 1][col + 1]) - rgbModel.getRed(rgbPixels[row - 1][col - 1]) + 2 * (rgbModel.getRed(rgbPixels[row][col + 1]) - rgbModel.getRed(rgbPixels[row][col - 1])) + rgbModel.getRed(rgbPixels[row + 1][col + 1]) - rgbModel.getRed(rgbPixels[row + 1][col - 1]);
                sum2 = (rgbModel.getRed(rgbPixels[row + 1][col - 1]) + 2 * rgbModel.getRed(rgbPixels[row + 1][col]) + rgbModel.getRed(rgbPixels[row + 1][col + 1])) - (rgbModel.getRed(rgbPixels[row - 1][col - 1]) + 2 * rgbModel.getRed(rgbPixels[row - 1][col]) + rgbModel.getRed(rgbPixels[row - 1][col + 1]));
                sum = Math.sqrt((double) (sum1 * sum1 + sum2 * sum2)) / SCALE;
                r = Math.min((int) sum, 255);
                sum1 = rgbModel.getGreen(rgbPixels[row - 1][col + 1]) - rgbModel.getGreen(rgbPixels[row - 1][col - 1]) + 2 * (rgbModel.getGreen(rgbPixels[row][col + 1]) - rgbModel.getGreen(rgbPixels[row][col - 1])) + rgbModel.getGreen(rgbPixels[row + 1][col + 1]) - rgbModel.getGreen(rgbPixels[row + 1][col - 1]);
                sum2 = (rgbModel.getGreen(rgbPixels[row + 1][col - 1]) + 2 * rgbModel.getGreen(rgbPixels[row + 1][col]) + rgbModel.getGreen(rgbPixels[row + 1][col + 1])) - (rgbModel.getGreen(rgbPixels[row - 1][col - 1]) + 2 * rgbModel.getGreen(rgbPixels[row - 1][col]) + rgbModel.getGreen(rgbPixels[row - 1][col + 1]));
                sum = Math.sqrt((double) (sum1 * sum1 + sum2 * sum2)) / SCALE;
                g = Math.min((int) sum, 255);
                sum1 = rgbModel.getBlue(rgbPixels[row - 1][col + 1]) - rgbModel.getBlue(rgbPixels[row - 1][col - 1]) + 2 * (rgbModel.getBlue(rgbPixels[row][col + 1]) - rgbModel.getBlue(rgbPixels[row][col - 1])) + rgbModel.getBlue(rgbPixels[row + 1][col + 1]) - rgbModel.getBlue(rgbPixels[row + 1][col - 1]);
                sum2 = (rgbModel.getBlue(rgbPixels[row + 1][col - 1]) + 2 * rgbModel.getBlue(rgbPixels[row + 1][col]) + rgbModel.getBlue(rgbPixels[row + 1][col + 1])) - (rgbModel.getBlue(rgbPixels[row - 1][col - 1]) + 2 * rgbModel.getBlue(rgbPixels[row - 1][col]) + rgbModel.getBlue(rgbPixels[row - 1][col + 1]));
                sum = Math.sqrt((double) (sum1 * sum1 + sum2 * sum2)) / SCALE;
                b = Math.min((int) sum, 255);
                newPixels[row][col] = 0xff000000 | (r << 16) | (g << 8) | b;
            }
        }
    } catch (RuntimeException e) {
        throw e;
    }
    setPixels(width, height, newPixels);
}
