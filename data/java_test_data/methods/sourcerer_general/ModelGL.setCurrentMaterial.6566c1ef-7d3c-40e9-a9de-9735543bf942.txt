public void setCurrentMaterial(GL gl, Material material) {
    if (material.getAmbientReflectivity() != null) {
        float[] ambientRefl = new float[] { 0, 0, 0, 1.0f };
        System.arraycopy(material.getAmbientReflectivity(), 0, ambientRefl, 0, 3);
        gl.glMaterialfv(GL.GL_FRONT_AND_BACK, GL.GL_AMBIENT, ambientRefl, 0);
    } else
        gl.glMaterialfv(GL.GL_FRONT_AND_BACK, GL.GL_AMBIENT, DEFAULT_AMBIENT_REFLECTANCE, 0);
    if (material.getDifuseReflectivity() != null) {
        float[] diffuseRefl = new float[] { 0, 0, 0, 1.0f };
        System.arraycopy(material.getDifuseReflectivity(), 0, diffuseRefl, 0, 3);
        gl.glMaterialfv(GL.GL_FRONT_AND_BACK, GL.GL_DIFFUSE, diffuseRefl, 0);
    } else
        gl.glMaterialfv(GL.GL_FRONT_AND_BACK, GL.GL_DIFFUSE, DEFAULT_DIFFUSE_REFLECTANCE, 0);
    if (material.getSpectralReflectivity() != null) {
        float[] spectralRefl = new float[] { 0, 0, 0, 1.0f };
        System.arraycopy(material.getSpectralReflectivity(), 0, spectralRefl, 0, 3);
        gl.glMaterialfv(GL.GL_FRONT_AND_BACK, GL.GL_SPECULAR, spectralRefl, 0);
    } else
        gl.glMaterialfv(GL.GL_FRONT_AND_BACK, GL.GL_SPECULAR, DEFAULT_SPECULAR_REFLECTANCE, 0);
    if (material.getSpectralExponent() != null) {
        float spectralExp = material.getSpectralExponent();
        gl.glMaterialf(GL.GL_FRONT_AND_BACK, GL.GL_SHININESS, spectralExp);
    } else
        gl.glMaterialf(GL.GL_FRONT_AND_BACK, GL.GL_SHININESS, DEFAULT_SHININESS);
    if (material.getColorMapFile() != null) {
        Texture materialTexture = TextureManager.getTexture(material.getColorMapFile());
        if (materialTexture != currentTexture) {
            if (currentTexture == null) {
                gl.glDisable(GL.GL_LIGHTING);
                gl.glEnable(GL.GL_TEXTURE_2D);
            }
            currentTexture = materialTexture;
            materialTexture.bind();
        // setDefaultMaterial(gl);
        }
    } else {
        if (currentTexture != null) {
            gl.glDisable(GL.GL_TEXTURE_2D);
            gl.glEnable(GL.GL_LIGHTING);
        }
    }
}
