@Override
public void run() {
    try {
        iniciaTemporizador();
        /*
				 * FOCO DO PROGRAMA 
				 */
        Visitante visitante = new Visitante();
        visitante.visitarPagina(pagina);
        for (LinkPro link : pagina.getListaLinks()) {
            if (verificarPaginaPertenceSitio(link.getDestino().getUrl(), job) && !job.getListaLink().contains(link.getDestino().getUrl())) {
                job.getListaLink().add(link.getDestino().getUrl());
            } else {
                logger.debug("Url descartada " + link.getDestino().getUrl());
            }
        }
        try {
            synchronized (pagina) {
                analista.verificarFormulario(pagina, job);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        /*
				 * Grava a pagina no HD 
				 */
        {
            String pathPagina = arquivista.criarPagina(pagina, job);
            arquivista.baixarArquivos(pagina, job);
            // chama a pagina de trabalho para avaliacao e possiveis retificacoes
            if (pathPagina != null) {
                // Retificador
                // tenta fazer consertos automaticamente
                // verbose.println(2, "retificando acessibilidade " + pagina.getUrl());
                // codHtml=retificador.consertarErroAcessibilidade(codHtml);
                // verbose.println(2, "retificando html " + pagina.getUrl());
                // codHtml=retificador.consertarErroHtml(codHtml);
                // Avaliar a pagina
                logger.info("avaliando " + pagina.getUrl());
                Avaliador avaliador = new Avaliador();
                avaliador.avaliarHtml(pagina.getCodTrabalho());
                RelatorioAcessibilidadePro relatorio = avaliador.getRelatorio();
                relatorio.setDataGerada(dataGerada);
                relatorio.setPagina(pagina);
                relatorioDao.create(relatorio);
            // escreve  na pagina de trabalho as modificacoes realizadas // no momento nï¿½o modifica
            // pagina.setCodTrabalho(codHtml);
            }
            // apenas links alterados
            arquivista.criarPaginaTrabalho(pagina, job);
        }
        // DesignerTemplate.getInstance(job).retirarTemplate(pagina);
        conteudista.retirarConteudo(pagina, padraoApresentacao);
        parar(null);
    } catch (ConnectException e) {
        try {
            parar("ConnectException: " + e.getMessage());
        } catch (Exception e2) {
        }
    } catch (UnknownHostException e) {
        try {
            parar("UnknownHostException");
        } catch (Exception e2) {
        }
    } catch (Exception e) {
        try {
            parar(e.getClass().getName() + " " + e.getMessage());
            logger.error("Erro inesperado ", e);
        } catch (Exception e2) {
            parar("erro interno");
        }
        if (e != null && e.getMessage() != null && !e.getMessage().equals("Erro 404")) {
        // logger.error("Erro inesperado ", e);
        }
    } finally {
        temporizador.interrupt();
    }
}
