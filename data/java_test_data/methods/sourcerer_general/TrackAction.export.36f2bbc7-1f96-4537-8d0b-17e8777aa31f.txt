public ActionForward export(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
    if (log.isDebugEnabled()) {
        log.debug("Entering 'export' method");
    }
    StringBuffer sqlBuff = new StringBuffer(62);
    TrackForm trackForm = initManufacturerList(form);
    String m = request.getParameter("m");
    List datas = new ArrayList();
    sqlBuff.append(" select m.company, t.createdDate, v.userName, v.company, v.email, v.mobile ");
    sqlBuff.append(" from TrackHis t,  Manufacturer m, Visitor v");
    sqlBuff.append(" where ");
    // sqlBuff.append ("       t.readerId = 'W1A001'");
    sqlBuff.append("       t.readerId = m.manufacturerId");
    sqlBuff.append("   and t.tagId = v.tagId");
    if (StringUtils.isNotEmpty(m)) {
        sqlBuff.append("   and t.readerId = '" + m + "'");
    }
    String sql = sqlBuff.toString();
    if (sql.indexOf("=") == -1 && sql.indexOf("<") == -1 && sql.indexOf(">") == -1) {
        sql += " 1 = 1 ";
    }
    if (sql.trim().lastIndexOf("and") == sql.trim().length() - 3) {
        sql = sql.substring(0, sql.lastIndexOf("and"));
    }
    // System.out.println("++++++++sql = " + sql);
    TrackHisManager mgr = (TrackHisManager) getBean("trackHisManager");
    datas = mgr.getTrackHiss(sql.trim());
    String filename = "expo2007_" + System.currentTimeMillis() + ".xls";
    File file = new File("c:\\" + filename);
    WritableWorkbook wwb = null;
    try {
        wwb = Workbook.createWorkbook(file);
        // 创建工作表
        jxl.write.WritableSheet ws = wwb.createSheet("Sheet1", 0);
        Label labelM = new Label(0, 0, "展商");
        ws.addCell(labelM);
        Label labelV = new Label(1, 0, "专业观众");
        ws.addCell(labelV);
        Label labelC = new Label(2, 0, "公司");
        ws.addCell(labelC);
        Label labelE = new Label(3, 0, "邮件");
        ws.addCell(labelE);
        Label labelT = new Label(4, 0, "手机");
        ws.addCell(labelT);
        Label labelD = new Label(5, 0, "来访时间");
        ws.addCell(labelD);
        if (datas != null) {
            for (int i = 0; i < datas.size(); i++) {
                Object[] o = (Object[]) datas.get(i);
                Label tlabelM = new Label(0, i + 1, o[0].toString());
                ws.addCell(tlabelM);
                Label tlabelV = new Label(1, i + 1, o[2].toString());
                ws.addCell(tlabelV);
                Label tlabelC = new Label(2, i + 1, o[3].toString());
                ws.addCell(tlabelC);
                Label tlabelE = new Label(3, i + 1, o[4].toString());
                ws.addCell(tlabelE);
                Label tlabelT = new Label(4, i + 1, o[5].toString());
                ws.addCell(tlabelT);
                Label tlabelD = new Label(5, i + 1, formateCreatedDate((Date) o[1]));
                ws.addCell(tlabelD);
            }
        }
    } catch (Exception e) {
        // logger.error("export excel error:" + e);
        e.printStackTrace();
    } finally {
        if (wwb != null) {
            wwb.write();
            wwb.close();
        }
    }
    BufferedInputStream br = new BufferedInputStream(new FileInputStream(file));
    byte[] buf = new byte[1024];
    int len = 0;
    response.reset();
    response.setContentType("application/octet-stream;charset=UTF-8");
    response.setHeader("Content-Disposition", "attachment; filename=" + filename);
    OutputStream out = response.getOutputStream();
    while ((len = br.read(buf)) > 0) {
        out.write(buf, 0, len);
    }
    br.close();
    out.close();
    file.delete();
    return mapping.findForward("list");
}
