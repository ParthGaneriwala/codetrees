public void updateGroupPositions(OverlapGroup group) {
    // TODO: implement a better algorithm
    PriorityQueue<Range> byTo = new PriorityQueue<Range>(11, Range.byTo);
    byTo.addAll(group.getFromPriorityQueue());
    PriorityQueue<Range> byFrom = new PriorityQueue<Range>(group.getFromPriorityQueue());
    // get max collision count
    int maxcolls = 0;
    int colls = 0;
    while (!byFrom.isEmpty()) {
        if (byFrom.peek().getFrom() < byTo.peek().getTo()) {
            colls++;
            byFrom.remove();
        } else {
            colls--;
            byTo.remove();
        }
        if (colls > maxcolls)
            maxcolls = colls;
    }
    byTo = new PriorityQueue<Range>(11, Range.byTo);
    byTo.addAll(group.getFromPriorityQueue());
    byFrom = new PriorityQueue<Range>(group.getFromPriorityQueue());
    int spotheight = (int) (height / (double) maxcolls);
    PriorityQueue<Integer> spots = new PriorityQueue<Integer>();
    for (int i = 0; i < maxcolls; i++) spots.add(i * spotheight);
    while (!byFrom.isEmpty()) {
        if (byFrom.peek().getFrom() < byTo.peek().getTo()) {
            Range r = byFrom.remove();
            RangeInfo i = rangeMapping.get(r);
            i.height = spotheight;
            i.top = spots.remove();
            // check whether we can grab additional spots
            if (byFrom.size() == 0 || byFrom.peek().getFrom() >= r.getTo()) {
                List<Integer> additionalSpots = new ArrayList<Integer>();
                while (spots.size() > 0 && spots.peek() == i.top + spotheight * (additionalSpots.size() + 1)) {
                    additionalSpots.add(spots.remove());
                }
                i.height += additionalSpots.size() * spotheight;
                for (Integer spot : additionalSpots) {
                    spots.add(spot);
                }
            }
        } else {
            Range r = byTo.remove();
            RangeInfo i = rangeMapping.get(r);
            spots.add(i.top);
        }
    }
}
