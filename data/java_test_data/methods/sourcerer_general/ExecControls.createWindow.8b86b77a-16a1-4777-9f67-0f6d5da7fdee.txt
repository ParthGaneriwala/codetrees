private void createWindow() {
    setIconImage(BlueJTheme.getIconImage());
    setJMenuBar(makeMenuBar());
    // has BorderLayout by default
    JPanel contentPane = (JPanel) getContentPane();
    contentPane.setLayout(new BorderLayout(6, 6));
    contentPane.setBorder(BorderFactory.createEmptyBorder(8, 8, 8, 8));
    // Create the control button panel
    JPanel buttonBox = new JPanel();
    {
        buttonBox.setLayout(new GridLayout(1, 0));
        stopButton = addButton(new StopAction(), buttonBox);
        stepButton = addButton(new StepAction(), buttonBox);
        stepIntoButton = addButton(new StepIntoAction(), buttonBox);
        continueButton = addButton(new ContinueAction(), buttonBox);
        // terminate is always on
        terminateButton = addButton(new TerminateAction(), buttonBox);
        terminateButton.setEnabled(true);
    }
    contentPane.add(buttonBox, BorderLayout.SOUTH);
    // create a mouse listener to monitor for double clicks
    MouseListener mouseListener = new MouseAdapter() {

        public void mouseClicked(MouseEvent e) {
            if (e.getClickCount() == 2) {
                listDoubleClick(e);
            }
        }
    };
    // create static variable panel
    JScrollPane staticScrollPane = new JScrollPane();
    {
        staticList = new JList(new DefaultListModel());
        {
            staticList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            staticList.addListSelectionListener(this);
            staticList.setVisibleRowCount(3);
            staticList.setFixedCellWidth(150);
            staticList.addMouseListener(mouseListener);
        }
        staticScrollPane.setViewportView(staticList);
        JLabel lbl = new JLabel(staticTitle);
        lbl.setOpaque(true);
        staticScrollPane.setColumnHeaderView(lbl);
    }
    // create instance variable panel
    JScrollPane instanceScrollPane = new JScrollPane();
    {
        instanceList = new JList(new DefaultListModel());
        {
            instanceList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            instanceList.addListSelectionListener(this);
            instanceList.setVisibleRowCount(4);
            instanceList.setFixedCellWidth(150);
            instanceList.addMouseListener(mouseListener);
        }
        instanceScrollPane.setViewportView(instanceList);
        JLabel lbl = new JLabel(instanceTitle);
        lbl.setOpaque(true);
        instanceScrollPane.setColumnHeaderView(lbl);
    }
    // create local variable panel
    JScrollPane localScrollPane = new JScrollPane();
    {
        localList = new JList(new DefaultListModel());
        {
            localList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            localList.addListSelectionListener(this);
            localList.setVisibleRowCount(4);
            localList.setFixedCellWidth(150);
            localList.addMouseListener(mouseListener);
        }
        localScrollPane.setViewportView(localList);
        JLabel lbl = new JLabel(localTitle);
        lbl.setOpaque(true);
        localScrollPane.setColumnHeaderView(lbl);
    }
    // Create variable display area
    JSplitPane innerVarPane = new JSplitPane(JSplitPane.VERTICAL_SPLIT, staticScrollPane, instanceScrollPane);
    innerVarPane.setDividerSize(6);
    innerVarPane.setBorder(null);
    JSplitPane varPane = new JSplitPane(JSplitPane.VERTICAL_SPLIT, innerVarPane, localScrollPane);
    varPane.setDividerSize(6);
    varPane.setBorder(null);
    // Create stack listing panel
    stackList = new JList(new DefaultListModel());
    stackList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    stackList.addListSelectionListener(this);
    stackList.setFixedCellWidth(150);
    JScrollPane stackScrollPane = new JScrollPane(stackList);
    JLabel lbl = new JLabel(stackTitle);
    lbl.setOpaque(true);
    stackScrollPane.setColumnHeaderView(lbl);
    JSplitPane splitPane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT, stackScrollPane, varPane);
    splitPane.setDividerSize(6);
    splitPane.setBorder(null);
    // Create thread panel
    JPanel threadPanel = new JPanel(new BorderLayout());
    MouseListener treeMouseListener = new MouseAdapter() {

        public void mousePressed(MouseEvent e) {
            TreePath selPath = threadTree.getPathForLocation(e.getX(), e.getY());
            if (selPath != null) {
                DefaultMutableTreeNode node = (DefaultMutableTreeNode) selPath.getLastPathComponent();
                if (node != null) {
                    DebuggerThread dt = threadModel.getNodeAsDebuggerThread(node);
                    if (dt != null)
                        setSelectedThread(dt);
                }
            }
        }
    };
    threadModel = debugger.getThreadTreeModel();
    threadModel.setSyncMechanism(new SyncMechanism() {

        public void invokeLater(Runnable r) {
            if (EventQueue.isDispatchThread())
                r.run();
            else
                EventQueue.invokeLater(r);
        }
    });
    threadModel.addTreeModelListener(this);
    threadTree = new JTree(threadModel);
    {
        threadTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
        threadTree.setVisibleRowCount(5);
        threadTree.setShowsRootHandles(false);
        threadTree.setRootVisible(false);
        threadTree.addTreeSelectionListener(this);
        threadTree.addMouseListener(treeMouseListener);
    }
    JScrollPane threadScrollPane = new JScrollPane(threadTree);
    lbl = new JLabel(threadTitle);
    lbl.setOpaque(true);
    threadScrollPane.setColumnHeaderView(lbl);
    threadPanel.add(threadScrollPane, BorderLayout.CENTER);
    // threadPanel.setMinimumSize(new Dimension(100,100));
    flipPanel = new JPanel();
    {
        flipPanel.setLayout(cardLayout = new CardLayout());
        flipPanel.add(splitPane, "split");
        JPanel tempPanel = new JPanel();
        JLabel infoLabel = new JLabel(Config.getString("debugger.threadRunning"));
        infoLabel.setForeground(Color.gray);
        tempPanel.add(infoLabel);
        flipPanel.add(tempPanel, "blank");
    }
    /* JSplitPane */
    mainPanel = new JSplitPane(JSplitPane.VERTICAL_SPLIT, threadPanel, flipPanel);
    mainPanel.setDividerSize(6);
    contentPane.add(mainPanel, BorderLayout.CENTER);
    // Close Action when close button is pressed
    addWindowListener(new WindowAdapter() {

        public void windowClosing(WindowEvent event) {
            Window win = (Window) event.getSource();
            win.setVisible(false);
        }
    });
    // save position when window is moved
    addComponentListener(new ComponentAdapter() {

        public void componentMoved(ComponentEvent event) {
            Config.putLocation("bluej.debugger", getLocation());
        }
    });
    setLocation(Config.getLocation("bluej.debugger"));
    pack();
}
