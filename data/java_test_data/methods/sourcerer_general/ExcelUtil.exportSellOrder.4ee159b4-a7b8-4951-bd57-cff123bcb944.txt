public static void exportSellOrder(Order order, String filename) throws IOException {
    FileOutputStream fos = null;
    try {
        HSSFWorkbook workBook = new HSSFWorkbook();
        // ��������������
        HSSFSheet orderSheet = workBook.createSheet(ORDER_SHEET_NAME);
        // ��������������ͷ
        HSSFRow orderRow = orderSheet.createRow(0);
        for (int i = 0; i < orderSheetHeader.length; i++) {
            HSSFCellUtil.createCell(orderRow, i, orderSheetHeader[i]);
        }
        // ��䶩������������
        HSSFRow orderDataRow = orderSheet.createRow(1);
        // ID
        HSSFCellUtil.createCell(orderDataRow, 0, null);
        // Code
        HSSFCellUtil.createCell(orderDataRow, 1, DateUtil.getDateStrByFormat("yyyyMMdd", order.getOrderDate()));
        // iVtid
        HSSFCellUtil.createCell(orderDataRow, 2, String.valueOf(order.getiVtid()));
        // �������ͱ���
        HSSFCellUtil.createCell(orderDataRow, 3, order.getSaleType().getId());
        // ������������
        HSSFCellUtil.createCell(orderDataRow, 4, order.getSaleType().getName());
        // ҵ����������
        HSSFCellUtil.createCell(orderDataRow, 5, order.getBusinessType());
        // ��������
        HSSFCellUtil.createCell(orderDataRow, 6, DateUtil.getDateStrByFormat("yyyy-MM-dd", order.getOrderDate()));
        // �ͻ�����
        HSSFCellUtil.createCell(orderDataRow, 7, order.getC().getId());
        // �ͻ����
        HSSFCellUtil.createCell(orderDataRow, 8, order.getC().getName());
        // ���۲��ű���
        HSSFCellUtil.createCell(orderDataRow, 9, order.getP().getDept().getId());
        // ���۲�������
        HSSFCellUtil.createCell(orderDataRow, 10, order.getP().getDept().getName());
        // �Ƶ��˱���
        HSSFCellUtil.createCell(orderDataRow, 11, order.getP().getId());
        // �Ƶ�������
        HSSFCellUtil.createCell(orderDataRow, 12, order.getP().getName());
        // ��ע
        HSSFCellUtil.createCell(orderDataRow, 13, order.getRemark());
        // ����������ϸ
        HSSFSheet orderDetailSheet = workBook.createSheet(ORDER_DETAIL_SHEET_NAME);
        // ����������ϸ������ͷ
        HSSFRow orderDetailRow = orderDetailSheet.createRow(0);
        for (int i = 0; i < orderDetailSheetHeader.length; i++) {
            HSSFCellUtil.createCell(orderDetailRow, i, orderDetailSheetHeader[i]);
        }
        // ��䶩����ϸ����
        ArrayList<OrderDetail> ods = order.getOds();
        for (int i = 0; i < ods.size(); i++) {
            OrderDetail od = ods.get(i);
            HSSFRow orderDetailDataRow = orderDetailSheet.createRow(i + 1);
            // no
            HSSFCellUtil.createCell(orderDetailDataRow, 0, String.valueOf(od.getNo()));
            // id
            HSSFCellUtil.createCell(orderDetailDataRow, 1, null);
            // �������
            HSSFCellUtil.createCell(orderDetailDataRow, 2, od.getInventory().getId());
            // �������
            HSSFCellUtil.createCell(orderDetailDataRow, 3, od.getInventory().getName());
            // ���
            HSSFCellUtil.createCell(orderDetailDataRow, 4, od.getInventory().getStandard());
            // ���װ
            UserDefine packing = od.getPacking();
            HSSFCellUtil.createCell(orderDetailDataRow, 5, packing == null ? "" : packing.toString());
            // ����
            HSSFCellUtil.createCell(orderDetailDataRow, 6, String.valueOf(od.getPiece()));
            // ����
            HSSFCellUtil.createCell(orderDetailDataRow, 7, String.valueOf(od.getCount()));
            // ��˰����
            BigDecimal price = od.getPrice();
            HSSFCellUtil.createCell(orderDetailDataRow, 8, price == null ? "" : String.valueOf(price.toString()));
            // ��˰�ϼ�
            HSSFCellUtil.createCell(orderDetailDataRow, 9, String.valueOf(od.getSum()));
            // Ԥ��������
            HSSFCellUtil.createCell(orderDetailDataRow, 10, DateUtil.getDateStrByFormat("yyyy-MM-dd", od.getSendDate()));
        }
        fos = new FileOutputStream(filename);
        workBook.write(fos);
    } catch (IOException ex) {
        Logger.getLogger(ExcelUtil.class.getName()).log(Level.SEVERE, null, ex);
        throw ex;
    } finally {
        try {
            if (fos != null) {
                fos.close();
            }
            fos = null;
        } catch (IOException ex) {
            Logger.getLogger(ExcelUtil.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
