/*public static void update200DayMovingAverage(){
		System.out.println("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
		System.out.println("Inside of 200 day MA.");
		Session session = HibernateUtil.getSession();
		session.beginTransaction();
		List stocks = CommodityHelper.getAllStocks(session);
		Iterator iter = stocks.iterator();
		while(iter.hasNext()){
			Commodity commodity = (Commodity)iter.next();
			String sql = "select hist.* from Daily_Quote_history hist where hist.commodity_id = :commodityId order by hist.date";
			List history = session.createSQLQuery(sql)
					.addEntity("hist",DailyQuoteHistory.class)
					.setInteger("commodityId",commodity.getCommodityId()).list();
			updateMovingAverage(200, history, session);
			//LinkedList quotes = new LinkedList();
		}
		session.getTransaction().commit();
	}*/
@SuppressWarnings("unchecked")
public static void updateMovingAverages() {
    System.out.println("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    System.out.println("Inside of Moving Averages Calculations.");
    Session session = HibernateUtil.getSession();
    List stocks = CommodityHelper.getAllStocks(session);
    List<DailyQuoteHistory> history;
    Commodity commodity;
    Iterator iter = stocks.iterator();
    while (iter.hasNext()) {
        session.beginTransaction();
        commodity = (Commodity) iter.next();
        String sql = "select hist.* from Daily_Quote_history hist where hist.commodity_id = :commodityId order by hist.date";
        history = session.createSQLQuery(sql).addEntity("hist", DailyQuoteHistory.class).setInteger("commodityId", commodity.getCommodityId()).list();
        System.out.println("Calculating: " + commodity.getSymbol());
        MemoryUsage mu = ManagementFactory.getMemoryMXBean().getHeapMemoryUsage();
        System.out.println(mu.getUsed() + ":" + mu.getMax());
        updateMovingAverage(200, history, session);
        updateMovingAverage(100, history, session);
        updateMovingAverage(50, history, session);
        updateMovingAverage(21, history, session);
        updateMovingAverage(9, history, session);
        updateMovingAverage(12, history, session);
        updateMovingAverage(26, history, session);
        updateMovingAverage(20, history, session);
        updateMovingAverage(10, history, session);
        updateMovingAverage(6, history, session);
        updateMovingAverage(5, history, session);
        updateRateOfChange(history, session);
        updateMFI(history, session);
        updateQuoteHistLoop(history, session);
        // updateMACD(history,session);
        // TODO: Figure out what is causing the null pointer error in MACD.
        System.gc();
        session.getTransaction().commit();
        session.flush();
        session.clear();
    }
}
