public String addOrRemoveFromFavorite() {
    FacesContext context = FacesContext.getCurrentInstance();
    inFavorite = ((String) context.getExternalContext().getRequestParameterMap().get("Favorite"));
    if (inFavorite == null) {
        System.out.println("nullFavorites-------------------------------------------------");
        return "loginFailure";
    }
    if (inFavorite.equals("not a user"))
        return "loginFailure";
    if (inFavorite.equals("add to favorite")) {
        Session session = HibernateUtil.getSession();
        Transaction transaction = session.beginTransaction();
        Users user = (Users) Contexts.getSession().getAttribute("user");
        Recipes rec = (Recipes) Contexts.getSession().getAttribute("recipe");
        Favorites fav = new Favorites();
        fav.setRecipe(rec);
        fav.setUser(user);
        fav.setPersonalNote("");
        session.save(fav);
        transaction.commit();
        session.flush();
        session.close();
        inFavorite = "remove from favorite";
        peersonalNote = "there is no personal note";
        return "done";
    }
    if (inFavorite.equals("remove from favorite")) {
        Session session = HibernateUtil.getSession();
        Transaction transaction = session.beginTransaction();
        Users user = (Users) Contexts.getSession().getAttribute("user");
        Recipes rec = (Recipes) Contexts.getSession().getAttribute("recipe");
        Query up = session.createQuery("delete from Favorites where user.id = :user and recipe.id = :recipe");
        up.setParameter("user", user.getUserId());
        up.setParameter("recipe", rec.getRecipeId());
        up.executeUpdate();
        transaction.commit();
        session.flush();
        session.close();
        inFavorite = "add to favorite";
        peersonalNote = "there is no personal note";
        return "done";
    }
    return "done";
}
