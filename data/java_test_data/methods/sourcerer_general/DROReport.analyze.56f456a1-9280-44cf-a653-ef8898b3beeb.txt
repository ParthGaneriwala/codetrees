@Override
protected void analyze() throws SQLException {
    // Vector<Integer> delays = new Vector<Integer>();
    // delays.add(50);
    Statement statement = _resultsDB.createStatement();
    statement.execute("SELECT TrialType, TrialNum, CumPercentCorrect, CorrectPosition, Response, Item1, Item2, Item3, Item4, Item5, Item6, IncorrectCorrections as incCorr " + "FROM TrialResults WHERE" + // ProbeDelay = " + delays.get(0) + " AND "
    " TRANSFER <> -1 ORDER BY TrialNum ASC");
    ResultSet rs = statement.getResultSet();
    int correctLastTrial = -10;
    while (rs.next()) {
        trial_counter++;
        String item1 = rs.getString("Item1").substring(0, 4);
        String item2 = rs.getString("Item2").substring(0, 4);
        String item3 = rs.getString("Item3").substring(0, 4);
        int trialNumber = rs.getInt("TrialNum");
        int choice = rs.getInt("Response");
        int correctChoice = rs.getInt("Item6");
        // int changeToPos = rs.getInt("CorrectPosition");
        // int corrections = rs.getInt("incCorr");
        // int loc1 = rs.getInt("Item4");
        // int loc2 = rs.getInt("Item5");
        boolean isCorrect;
        int currentCumulative = rs.getInt("CumPercentCorrect");
        if (currentCumulative >= correctLastTrial) {
            overall_correct++;
            isCorrect = true;
        } else
            isCorrect = false;
        correctLastTrial = currentCumulative;
        if (rs.getString("TrialType").equalsIgnoreCase("DRO")) {
            dro_trial_counter++;
            if (isCorrect) {
                dro_trial_correct++;
            }
        } else {
            nodro_trial_counter++;
            if (isCorrect)
                nodro_trial_correct++;
        }
    }
}
