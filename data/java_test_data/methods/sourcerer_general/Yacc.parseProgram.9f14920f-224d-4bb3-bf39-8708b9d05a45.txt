/**
 * ****************************************************************************************
 */
public void parseProgram() {
    lop = new Output(lexList.get(lxpos));
    flag = new Output();
    while (lop.getType() == Lex.CONST) {
        // ����const��ͷ������parseConst()���ӳ���
        if (!parseConst()) {
            return;
        }
    }
    do {
        if (lop.getType() == Lex.INT) {
            // ����int��ͷʱ
            if (next() && lop.getType() == Lex.IDSY) {
                // ������һ����Ϊ�յĴʣ���Ϊ��ʶ��ʱ
                // ��flag���µ�ǰ�ı�ʶ��
                flag = lop;
                if (next() && (lop.getType() == Lex.COMMA || lop.getType() == Lex.SEMICOLON)) {
                    // ���ɹ�������һ������Ϊ���Ż�ֺ�ʱ����parseVar()�ӳ���
                    if (parseVar()) {
                        // ȷʵΪ���������flag��������һѭ��
                        flag.setType(-1);
                        flag.setWord(null);
                        flag.setLine(-1);
                        continue;
                    } else {
                        // ���Ǳ���˵��ʱ����
                        return;
                    }
                } else if (lop.getType() == Lex.Lpar) {
                    if (parseFunc()) {
                        // ��ȷ��Ϊ��������ʱ
                        if (!checkret) {
                            error = true;
                            errorList.add(Error.report(Error.ERR_RETLACK, lop.getLine(), null));
                            return;
                        }
                        flag.setType(-1);
                        flag.setWord(null);
                        flag.setLine(-1);
                        continue;
                    } else {
                        return;
                    }
                } else {
                    error = true;
                    errorList.add(Error.report(Error.ERR_NOTBE, lop.getLine(), "ȫ�ֱ���˵��"));
                    return;
                }
            } else {
                return;
            }
        } else if (lop.getType() == Lex.VOID) {
            // ����void��ͷʱ
            flag = lop;
            if (next() && lop.getType() == Lex.MAIN) {
                // �ɹ�������һ�ʣ���Ϊmainʱ������parseMain()�ӳ���
                if (next() && parseMain(Function.R_VOID)) {
                    if (next()) {
                        error = true;
                        errorList.add(Error.report(Error.ERR_UNRECEIVE, lop.getLine(), null));
                    }
                    return;
                }
                return;
            } else {
                // ����mainʱ������parseFunc()�ӳ���
                if (parseFunc()) {
                    flag.setLine(-1);
                    flag.setType(-1);
                    flag.setWord(null);
                    continue;
                } else {
                    return;
                }
            }
        } else if (lop.getType() == Lex.MAIN) {
            flag = lop;
            if (next() && parseMain(-1)) {
                if (next()) {
                    error = true;
                    errorList.add(Error.report(Error.ERR_UNRECEIVE, lop.getLine(), null));
                }
                return;
            }
            return;
        }
        error = true;
        errorList.add(Error.report(Error.ERR_ABNORMAL, lop.getLine(), null));
        if (funcList.isEmpty() || !"main".equals(funcList.getLast().getName())) {
            errorList.add(Error.report(Error.ERR_MAINLACK, lop.getLine(), null));
        }
        return;
    } while (true);
}
