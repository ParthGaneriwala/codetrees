private void erfc2Internal() {
    // -x� -1
    // e   x   /      1      3       3*5     3*5*7                // erfc(x) = -------- | 1 - --- + ------ - ------ + ------ - ... |
    // sqrt(pi) \     2x�        2        3        4       /
    // (2x�)    (2x�)    (2x�)
    // Calculate iteration stop criteria
    {
        tmp1.mantissa = this.mantissa;
        tmp1.exponent = this.exponent;
        tmp1.sign = this.sign;
    }
    ;
    tmp1.sqr();
    // 1/0.694
    {
        tmp2.sign = (byte) 0;
        tmp2.exponent = 0x40000000;
        tmp2.mantissa = 0x5c3811b4bfd0c8abL;
    }
    // 1/0.694
    ;
    tmp2.mul(tmp1);
    tmp2.sub(HALF);
    // number of accurate digits = x*x/0.694-0.5
    int digits = tmp2.toInteger();
    if (digits > 64)
        digits = 64;
    tmp1.scalbn(1);
    int dxq = tmp1.toInteger() + 1;
    {
        tmp1.mantissa = this.mantissa;
        tmp1.exponent = this.exponent;
        tmp1.sign = this.sign;
    }
    ;
    recip();
    {
        tmp2.mantissa = this.mantissa;
        tmp2.exponent = this.exponent;
        tmp2.sign = this.sign;
    }
    ;
    {
        tmp3.mantissa = this.mantissa;
        tmp3.exponent = this.exponent;
        tmp3.sign = this.sign;
    }
    ;
    tmp3.sqr();
    tmp3.neg();
    tmp3.scalbn(-1);
    {
        this.mantissa = ONE.mantissa;
        this.exponent = ONE.exponent;
        this.sign = ONE.sign;
    }
    ;
    {
        tmp4.mantissa = ONE.mantissa;
        tmp4.exponent = ONE.exponent;
        tmp4.sign = ONE.sign;
    }
    ;
    int i = 1;
    do {
        tmp4.mul(2 * i - 1);
        tmp4.mul(tmp3);
        add(tmp4);
        i++;
    } while (tmp4.exponent - 0x40000000 > -(digits + 2) && 2 * i - 1 < dxq);
    mul(tmp2);
    tmp1.sqr();
    tmp1.neg();
    tmp1.exp();
    mul(tmp1);
    // 1/sqrt(pi)
    {
        tmp1.sign = (byte) 0;
        tmp1.exponent = 0x3fffffff;
        tmp1.mantissa = 0x48375d410a6db447L;
    }
    // 1/sqrt(pi)
    ;
    mul(tmp1);
}
