private static void parseIHDR(byte[] data, int offset, int length) {
    // System.out.println("Parsing head info width length " + length +
    // " offset " + offset);
    int index = offset;
    tmpWidth = readInt(data, index);
    index += IHDR_WIDTH_LENGTH;
    tmpHeight = readInt(data, index);
    index += IHDR_HEIGHT_LENGTH;
    int bitDepth = data[index];
    index += IHDR_BIT_DEPTH_LENGTH;
    int colorType = data[index];
    index += IHDR_COLOR_TYPE_LENGTH;
    int compressionMethod = data[index];
    index += IHDR_COMPRESSION_METHOD_LENGTH;
    int filterMethod = data[index];
    index += IHDR_FILTER_METHOD_LENGTH;
    int interlaceMethod = data[index];
    index += IHDR_INTERLACE_METHOD_LENGTH;
    System.out.println("IHDR width " + tmpWidth + " height " + tmpHeight + " bit depth " + bitDepth + " color type " + colorType + " compression method " + compressionMethod + " filter method " + filterMethod + " interlace method " + interlaceMethod);
    // verify the head info
    boolean legalColorType = false;
    for (int i = 0; i < LEGAL_COLOR_TYPE.length; i++) {
        if (colorType == LEGAL_COLOR_TYPE[i]) {
            legalColorType = true;
            break;
        }
    }
    if (!legalColorType) {
        throw new IllegalArgumentException("color type illegal :" + colorType);
    }
    boolean legalBitDepth = false;
    next_color_type: for (int i = 0; i < LEGAL_BIT_DEPTH.length; i++) {
        if (LEGAL_BIT_DEPTH[i][0] == colorType) {
            for (int j = 1; j < LEGAL_BIT_DEPTH[i].length; j++) {
                if (bitDepth == LEGAL_BIT_DEPTH[i][j]) {
                    legalBitDepth = true;
                    break next_color_type;
                }
            }
        }
    }
    if (!legalBitDepth) {
        throw new IllegalArgumentException("bit depth illegal :" + bitDepth);
    }
}
