public LineStripArray getWonderLines(int start, int lines, int limit, int ceiling, double ratio) {
    double XFactor = (1 / (double) lines) * ratio;
    double YFactor = (1 / (double) ceiling) * ratio;
    double ZFactor = (1 / (double) limit) * ratio;
    int[] stripVertexCounts = new int[lines];
    int[][] wonderArray = new int[lines][limit];
    int points = 0;
    for (int n = 0; n < lines; n++) {
        int[] pattern = JWondrous.wondrousnessPattern(n + start, limit, 3);
        stripVertexCounts[n] = pattern.length;
        for (int i = 0; i < pattern.length; i++) {
            if (pattern[i] < ceiling)
                wonderArray[n][i] = pattern[i];
            else
                wonderArray[n][i] = ceiling;
        }
        points += pattern.length;
    }
    WonderLines = new LineStripArray(points, GeometryArray.COORDINATES | GeometryArray.NORMALS | GeometryArray.COLOR_3, stripVertexCounts);
    WonderLines.setCapability(GeometryArray.ALLOW_COLOR_WRITE);
    WonderCols = new Color3f[points];
    int c = 0;
    for (int n = 0; n < lines; n++) for (int i = 0; i < stripVertexCounts[n]; i++) {
        Point3d p = new Point3d(n * XFactor, wonderArray[n][i] * YFactor, i * ZFactor);
        WonderLines.setCoordinate(c, p);
        float r = n / (float) lines;
        float g = i / (float) stripVertexCounts[n];
        float b = wonderArray[n][i] / (float) ceiling;
        WonderCols[c] = new Color3f(r, g, b);
        WonderLines.setNormal(c, new Vector3f(p));
        c++;
    }
    WonderLines.setColors(0, WonderCols);
    return WonderLines;
}
