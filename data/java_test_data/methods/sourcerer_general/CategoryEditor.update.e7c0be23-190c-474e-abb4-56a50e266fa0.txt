public static TicketCategoryList update(Connection db, HttpServletRequest request) throws SQLException {
    // Work from the request items
    int parentId = Integer.parseInt(request.getParameter("categoryId"));
    int catLevel = Integer.parseInt(request.getParameter("catLevel"));
    int projectId = -1;
    try {
        projectId = Integer.parseInt(request.getParameter("projectId"));
    } catch (Exception e) {
    // Not in a project
    }
    // Load the base set
    TicketCategoryList categoryList = new TicketCategoryList();
    categoryList.setParentCode(parentId);
    categoryList.setCatLevel(catLevel);
    categoryList.setEnabledState(Constants.UNDEFINED);
    categoryList.setProjectId(projectId);
    categoryList.buildList(db);
    // Perform the comparison
    // Parse the request for items
    String[] params = request.getParameterValues("selectedList");
    String[] names = new String[params.length];
    int j = 0;
    StringTokenizer st = new StringTokenizer(request.getParameter("selectNames"), "^");
    while (st.hasMoreTokens()) {
        names[j] = (String) st.nextToken();
        if (System.getProperty("DEBUG") != null) {
            System.out.println("CategoryEditor-> " + params[j] + " Item: " + names[j]);
        }
        j++;
    }
    // Put into something manageable
    ArrayList arrayList = new ArrayList();
    for (int i = 0; i < params.length; i++) {
        if (System.getProperty("DEBUG") != null) {
            System.out.println("CategoryEditor-> Name: " + names[i]);
            System.out.println("CategoryEditor-> Param: " + params[i]);
        }
        arrayList.add(params[i]);
    }
    // BEGIN TRANSACTION
    // Disable removed items
    Iterator items = categoryList.iterator();
    while (items.hasNext()) {
        TicketCategory thisCategory = (TicketCategory) items.next();
        // If item is not in the passed array, then disable the entry
        if (!arrayList.contains(String.valueOf(thisCategory.getId()))) {
            thisCategory.setEnabled(false);
            thisCategory.update(db);
            items.remove();
        }
    }
    // Iterate through the array
    for (int i = 0; i < params.length; i++) {
        if (System.getProperty("DEBUG") != null) {
            System.out.println("CategoryEditor-> Name: " + names[i]);
            System.out.println("CategoryEditor-> Param: " + params[i]);
        }
        if (params[i].startsWith("*")) {
            // TODO: Check to see if a previously disabled entry has the same name,
            // and enable it
            // New item, add it at the correct position
            TicketCategory thisCategory = new TicketCategory();
            // thisCategory.setProjectId(projectId);
            thisCategory.setCategoryLevel(catLevel);
            thisCategory.setDescription(names[i]);
            thisCategory.setLevel(i);
            thisCategory.setParentCode(parentId);
            thisCategory.setProjectId(projectId);
            thisCategory.insert(db);
            categoryList.add(thisCategory);
        } else {
            // Existing item, update the name and position
            updateName(db, Integer.parseInt(params[i]), names[i]);
            updateLevel(db, Integer.parseInt(params[i]), i);
        }
    }
    // END TRANSACTION
    return categoryList;
}
