@Test
public void testBasic() throws Exception {
    ContextExtractor<Token> extractor = new ContextExtractor<Token>(Token.class, new SpannedTextExtractor(), new Preceding(2), new Preceding(3, 6), new Covered(), new FirstCovered(1), new FirstCovered(1, 3), new LastCovered(1), new LastCovered(1, 3), new Following(1, 3), new Following(3, 5));
    this.tokenBuilder.buildTokens(this.jCas, "The quick brown fox jumped over the lazy dog.", "The quick brown fox jumped over the lazy dog .", "DT JJ JJ NN VBD IN DT JJ NN .");
    Chunk chunk = new Chunk(this.jCas, 20, 31);
    chunk.addToIndexes();
    Assert.assertEquals("jumped over", chunk.getCoveredText());
    List<Feature> features = extractor.extract(this.jCas, chunk);
    Assert.assertEquals(17, features.size());
    Iterator<Feature> iter = features.iterator();
    this.assertFeature("Preceding_0_2_1", "brown", iter.next());
    this.assertFeature("Preceding_0_2_0", "fox", iter.next());
    this.assertFeature("Preceding_3_6_5", "OOB2", iter.next());
    this.assertFeature("Preceding_3_6_4", "OOB1", iter.next());
    this.assertFeature("Preceding_3_6_3", "The", iter.next());
    this.assertFeature("Covered_0", "jumped", iter.next());
    this.assertFeature("Covered_1", "over", iter.next());
    this.assertFeature("FirstCovered_0_1_0", "jumped", iter.next());
    this.assertFeature("FirstCovered_1_3_1", "over", iter.next());
    this.assertFeature("FirstCovered_1_3_2", "OOB1", iter.next());
    this.assertFeature("LastCovered_0_1_0", "over", iter.next());
    this.assertFeature("LastCovered_1_3_2", "OOB1", iter.next());
    this.assertFeature("LastCovered_1_3_1", "jumped", iter.next());
    this.assertFeature("Following_1_3_1", "lazy", iter.next());
    this.assertFeature("Following_1_3_2", "dog", iter.next());
    this.assertFeature("Following_3_5_3", ".", iter.next());
    this.assertFeature("Following_3_5_4", "OOB1", iter.next());
}
