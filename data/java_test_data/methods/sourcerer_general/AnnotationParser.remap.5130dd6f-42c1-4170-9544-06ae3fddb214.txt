/**
 * method for remapping annotation to reduced ontology e.g. GOSlim, and explicitly including genes in all parental categories
 */
public Annotation remap(Annotation annotation, Ontology ontology) {
    Annotation parsedAnnotation = new Annotation(annotation.getSpecies(), annotation.getType(), annotation.getCurator());
    HashMap annMap = annotation.getMap();
    Iterator it = annMap.keySet().iterator();
    maxValue = annMap.keySet().size();
    int currentProgress = 0;
    try {
        while (it.hasNext()) {
            // Calculate Percentage.  This must be a value between 0..100.
            int percentComplete = (int) (((double) currentProgress / maxValue) * 100);
            // Estimate Time Remaining
            long timeRemaining = maxValue - currentProgress;
            // This automatically updates the UI Component w/ progress bar.
            if (taskMonitor != null) {
                taskMonitor.setPercentCompleted(percentComplete);
                taskMonitor.setStatus("Parsing Annotation " + currentProgress + " of " + maxValue);
                taskMonitor.setEstimatedTimeRemaining(timeRemaining);
            }
            currentProgress++;
            parentsSet = new HashSet();
            String node = it.next() + "";
            // array with go labels for gene it.next().
            int[] goID;
            goID = annotation.getClassifications(node);
            for (int t = 0; t < goID.length; t++) {
                if (ontology.getTerm(goID[t]) != null) {
                    parsedAnnotation.add(node, goID[t]);
                }
                // CHECK IF goID EXISTS IN fullOntology...
                if (fullOntology.getTerm(goID[t]) != null) {
                    up(node, goID[t], parsedAnnotation, ontology, fullOntology);
                } else {
                    // System.out.println ("Orphan found " + goID[t]) ;
                    orphansFound = true;
                }
            }
            if (interrupted) {
                status = false;
                throw new InterruptedException();
            }
        }
    } catch (InterruptedException e) {
        taskMonitor.setException(e, "Annotation Parse cancelled");
    }
    return parsedAnnotation;
}
