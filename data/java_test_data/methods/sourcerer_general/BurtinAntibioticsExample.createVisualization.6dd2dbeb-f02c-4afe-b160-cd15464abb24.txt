private void createVisualization(Antibiotics[] antibiotics) {
    /* Basic dimensions. */
    int width = 700;
    final int height = 700;
    int innerRadius = 90;
    int outerRadius = 300 - 10;
    /* Colors. */
    final Map<String, String> drugColor = new HashMap<String, String>();
    drugColor.put("Penicillin", "rgb(10, 50, 100)");
    drugColor.put("Streptomycin", "rgb(200, 70, 50)");
    drugColor.put("Neomycin", "black");
    final Map<String, String> gramColor = new HashMap<String, String>();
    gramColor.put("positive", "rgba(174, 174, 184, .8)");
    gramColor.put("negative", "rgba(230, 130, 110, .8)");
    /* Burtin's radius encoding is, as far as I can tell, sqrt(log(mic)). */
    double min = Math.sqrt(Math.log(.001 * 1E4));
    double max = Math.sqrt(Math.log(1000 * 1E4));
    final double a = (outerRadius - innerRadius) / (min - max);
    final double b = innerRadius - a * max;
    /*
         * The pie is split into equal sections for each bacteria, with a blank
         * section at the top for the grid labels. Each wedge is further
         * subdivided to make room for the three antibiotics, equispaced.
         */
    final double bigAngle = 2.0 * Math.PI / (antibiotics.length + 1);
    final double smallAngle = bigAngle / 7;
    /* The root panel. */
    PVPanel vis = getPVPanel().width(width).height(height).bottom(100);
    /* Background wedges to indicate gram staining color. */
    PVWedge bg = vis.add(PV.Wedge).data(antibiotics).left(width / 2).top(height / 2).innerRadius(innerRadius).outerRadius(outerRadius).angle(bigAngle).startAngle(new JsDoubleFunction() {

        public double f(JsArgs args) {
            PVMark _this = args.getThis();
            return _this.index() * bigAngle + bigAngle / 2 - Math.PI / 2;
        }
    }).fillStyle(new JsStringFunction() {

        public String f(JsArgs args) {
            Antibiotics d = args.getObject(0);
            return gramColor.get(d.gram);
        }
    });
    /* Antibiotics. */
    bg.add(PV.Wedge).angle(smallAngle).startAngle(new JsDoubleFunction() {

        public double f(JsArgs args) {
            PVWedge _this = args.getThis();
            return _this.proto().startAngle() + smallAngle;
        }
    }).outerRadius(new JsDoubleFunction() {

        public double f(JsArgs args) {
            Antibiotics d = args.getObject();
            return radius(d.penicillin, a, b);
        }
    }).fillStyle(drugColor.get("Penicillin")).add(PV.Wedge).startAngle(new JsDoubleFunction() {

        public double f(JsArgs args) {
            PVWedge _this = args.getThis();
            return _this.proto().startAngle() + 2 * smallAngle;
        }
    }).outerRadius(new JsDoubleFunction() {

        public double f(JsArgs args) {
            Antibiotics d = args.getObject();
            return radius(d.streptomycin, a, b);
        }
    }).fillStyle(drugColor.get("Streptomycin")).add(PV.Wedge).outerRadius(new JsDoubleFunction() {

        public double f(JsArgs args) {
            Antibiotics d = args.getObject();
            return radius(d.neomycin, a, b);
        }
    }).fillStyle(drugColor.get("Neomycin"));
    /* Circular grid lines. */
    bg.add(PV.Dot).data(PV.range(-3, 4)).fillStyle((String) null).strokeStyle("#eee").lineWidth(1).size(new JsDoubleFunction() {

        public double f(JsArgs args) {
            int i = args.getInt();
            return Math.pow(radius(Math.pow(10, i), a, b), 2);
        }
    }).anchor(TOP).add(PV.Label).visible(new JsBooleanFunction() {

        public boolean f(JsArgs args) {
            int i = args.getInt();
            return i < 3;
        }
    }).textBaseline(MIDDLE).text(new JsStringFunction() {

        public String f(JsArgs args) {
            int i = args.getInt();
            return JsUtils.toFixed(Math.pow(10, i), (i > 0) ? 0 : -i);
        }
    });
    /* Radial grid lines. */
    bg.add(PV.Wedge).data(PV.range(antibiotics.length + 1)).innerRadius(innerRadius - 10).outerRadius(outerRadius + 10).fillStyle((String) null).strokeStyle("black").angle(0);
    /* Labels. */
    bg.anchor(OUTER).add(PV.Label).textAlign(CENTER).text(new JsStringFunction() {

        public String f(JsArgs args) {
            Antibiotics d = args.getObject();
            return d.bacteria;
        }
    });
    /* Antibiotic legend. */
    vis.add(PV.Bar).data(drugColor.keySet()).right(width / 2 + 3).top(new JsDoubleFunction() {

        public double f(JsArgs args) {
            PVMark _this = args.getThis();
            return height / 2 - 28 + _this.index() * 18;
        }
    }).fillStyle(new JsStringFunction() {

        public String f(JsArgs args) {
            String d = args.getObject();
            return drugColor.get(d);
        }
    }).width(36).height(12).anchor(RIGHT).add(PV.Label).textMargin(6).textAlign(LEFT);
    /* Gram-stain legend. */
    vis.add(PV.Dot).data(gramColor.keySet()).left(width / 2 - 20).bottom(new JsDoubleFunction() {

        public double f(JsArgs args) {
            PVMark _this = args.getThis();
            return -60 + _this.index() * 18;
        }
    }).fillStyle(new JsStringFunction() {

        public String f(JsArgs args) {
            String d = args.getObject();
            return gramColor.get(d);
        }
    }).strokeStyle((String) null).size(30).anchor(RIGHT).add(PV.Label).textMargin(6).textAlign(LEFT).text(new JsStringFunction() {

        public String f(JsArgs args) {
            String d = args.getObject();
            return "Gram-" + d;
        }
    });
}
