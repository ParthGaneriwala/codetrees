public CheckResult checkSite(String uri) {
    long[] tmpResult;
    URL url;
    // log the requested URI
    logger.info("Checking Site: \"" + uri + "\"");
    state = CheckResultStateET.OK;
    // create correct URL
    if (!uri.toLowerCase().startsWith("http://")) {
        uri = "http://" + uri;
    }
    // initialize result
    CheckResult result = new CheckResult();
    result.setURI(uri);
    // create url from uri string
    try {
        url = new URL(uri);
        // process the url
        tmpResult = processURL(url);
        result.setSiteSizeKB(tmpResult[0] / 1024);
        result.setTimeInSec(tmpResult[1]);
        result.setState(state);
    } catch (MalformedURLException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    }
    String[] otherFiles = siteContent.toLowerCase().split("src");
    if ((otherFiles.length > 1) && !(uri.endsWith(".js"))) {
        // leave the first part of the string untouched
        for (int i = 1; i < otherFiles.length; i++) {
            otherFiles[i] = otherFiles[i].split(" ")[0];
            otherFiles[i] = otherFiles[i].split(">")[0];
            otherFiles[i] = otherFiles[i].split("}")[0];
            if (otherFiles[i].indexOf("\"") > 0) {
                otherFiles[i] = otherFiles[i].split("\"")[1];
            } else {
                otherFiles[i] = otherFiles[i].split("\'")[1];
            }
        }
        // special command to get rid of the first entry
        otherFiles[0] = otherFiles[1];
        otherFiles = deleteDoubleEntries(otherFiles);
        for (int i = 0; i < otherFiles.length; i++) {
            if (!otherFiles[i].toLowerCase().startsWith("http://")) {
                otherFiles[i] = uri + otherFiles[i];
            }
            // reset the site content variable
            siteContent = new String();
            // check the site
            CheckResult tmpCheckResult = checkSite(otherFiles[i]);
            // add the result to the referred files
            CheckResult[] tmpRefFiles = result.getReferredFilesCheckResult();
            if (tmpRefFiles == null) {
                tmpRefFiles = new CheckResult[1];
                tmpRefFiles[0] = tmpCheckResult;
                result.setReferredFilesCheckResult(tmpRefFiles);
            } else {
                CheckResult[] tmpNewRefFiles = new CheckResult[tmpRefFiles.length + 1];
                for (int j = 0; j < tmpRefFiles.length; j++) {
                    tmpNewRefFiles[j] = tmpRefFiles[j];
                }
                tmpNewRefFiles[tmpRefFiles.length] = tmpCheckResult;
                result.setReferredFilesCheckResult(tmpNewRefFiles);
            }
        }
    }
    // return the result
    return result;
}
