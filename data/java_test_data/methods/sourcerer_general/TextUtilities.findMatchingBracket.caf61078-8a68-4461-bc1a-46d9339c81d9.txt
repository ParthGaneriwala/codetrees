// }}}
// {{{ findMatchingBracket() method
public static int findMatchingBracket(JEditBuffer buffer, int line, int offset) {
    if (offset < 0 || offset >= buffer.getLineLength(line)) {
        throw new ArrayIndexOutOfBoundsException(offset + ":" + buffer.getLineLength(line));
    }
    Segment lineText = new Segment();
    buffer.getLineText(line, lineText);
    char c = lineText.array[lineText.offset + offset];
    // false - backwards, true - forwards
    boolean[] direction = new boolean[1];
    // corresponding character
    char cprime = getComplementaryBracket(c, direction);
    if (cprime == '\0') {
        // c is no bracket
        return -1;
    }
    // 1 because we've already 'seen' the first bracket
    int count = 1;
    DefaultTokenHandler tokenHandler = new DefaultTokenHandler();
    buffer.markTokens(line, tokenHandler);
    // Get the syntax token at 'offset'
    // only tokens with the same type will be checked for
    // the corresponding bracket
    byte idOfBracket = getTokenAtOffset(tokenHandler.getTokens(), offset).id;
    boolean haveTokens = true;
    int startLine = line;
    // {{{ Forward search
    if (direction[0]) {
        offset++;
        for (; ; ) {
            for (int i = offset; i < lineText.count; i++) {
                char ch = lineText.array[lineText.offset + i];
                if (ch == c) {
                    if (!haveTokens) {
                        tokenHandler.init();
                        buffer.markTokens(line, tokenHandler);
                        haveTokens = true;
                    }
                    if (getTokenAtOffset(tokenHandler.getTokens(), i).id == idOfBracket)
                        count++;
                } else if (ch == cprime) {
                    if (!haveTokens) {
                        tokenHandler.init();
                        buffer.markTokens(line, tokenHandler);
                        haveTokens = true;
                    }
                    if (getTokenAtOffset(tokenHandler.getTokens(), i).id == idOfBracket) {
                        count--;
                        if (count == 0)
                            return buffer.getLineStartOffset(line) + i;
                    }
                }
            }
            // {{{ Go on to next line
            line++;
            if (line >= buffer.getLineCount() || (line - startLine) > BRACKET_MATCH_LIMIT)
                break;
            buffer.getLineText(line, lineText);
            offset = 0;
            haveTokens = false;
        // }}}
        }
    } else // }}}
    // {{{ Backward search
    {
        offset--;
        for (; ; ) {
            for (int i = offset; i >= 0; i--) {
                char ch = lineText.array[lineText.offset + i];
                if (ch == c) {
                    if (!haveTokens) {
                        tokenHandler.init();
                        buffer.markTokens(line, tokenHandler);
                        haveTokens = true;
                    }
                    if (getTokenAtOffset(tokenHandler.getTokens(), i).id == idOfBracket)
                        count++;
                } else if (ch == cprime) {
                    if (!haveTokens) {
                        tokenHandler.init();
                        buffer.markTokens(line, tokenHandler);
                        haveTokens = true;
                    }
                    if (getTokenAtOffset(tokenHandler.getTokens(), i).id == idOfBracket) {
                        count--;
                        if (count == 0)
                            return buffer.getLineStartOffset(line) + i;
                    }
                }
            }
            // {{{ Go on to previous line
            line--;
            if (line < 0 || (startLine - line) > BRACKET_MATCH_LIMIT)
                break;
            buffer.getLineText(line, lineText);
            offset = lineText.count - 1;
            haveTokens = false;
        // }}}
        }
    }
    // Nothing found
    return -1;
}
