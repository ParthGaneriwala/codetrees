private ExpTreenode simplifyPoly(ExpTreenode tempnode, String var, NumericTolerances tol) {
    if (tempnode == null)
        return null;
    ExpTreenode t = tempnode.clone();
    // Expand
    simplified = true;
    while (simplified) {
        simplified = false;
        t = expand(t, var);
    }
    // Combine single terms
    simplified = true;
    while (simplified) {
        simplified = false;
        t = combineSingleTerms(t, var);
    }
    // Combine like terms into an ArrayList
    ArrayList PolyTerms = new ArrayList();
    buildPolyTerms(t, var, PolyTerms, 1);
    for (int i = 0; i < PolyTerms.size(); i++) {
        ComplexNumber coeff = (ComplexNumber) ((ArrayList) PolyTerms.get(i)).get(1);
        long deg = ((Long) ((ArrayList) PolyTerms.get(i)).get(0)).longValue();
    }
    for (int i = 0; i < PolyTerms.size() - 1; i++) for (int j = 0; j < PolyTerms.size() - 1 - i; j++) if (((Long) ((ArrayList) PolyTerms.get(j + 1)).get(0)).longValue() < ((Long) ((ArrayList) PolyTerms.get(j)).get(0)).longValue()) {
        Object e1 = PolyTerms.get(j + 1);
        Object e2 = PolyTerms.get(j);
        PolyTerms.set(j, e1);
        PolyTerms.set(j + 1, e2);
    }
    // Build polynomial
    t = null;
    for (int i = 0; i < PolyTerms.size(); i++) {
        ComplexNumber coeff = (ComplexNumber) ((ArrayList) PolyTerms.get(i)).get(1);
        long deg = ((Long) ((ArrayList) PolyTerms.get(i)).get(0)).longValue();
        if (!coeff.isZero()) {
            if (deg == 0) {
                if (t == null)
                    t = new ExpTreenode(coeff);
                else {
                    if (coeff.hasNegativeFirstTerm())
                        t = new ExpTreenode("-", null, t, new ExpTreenode(coeff.negate()));
                    else
                        t = new ExpTreenode("+", null, t, new ExpTreenode(coeff));
                }
            } else if (deg == 1) {
                if (t == null) {
                    if (coeff.isOne())
                        t = new ExpTreenode(var);
                    else
                        t = new ExpTreenode("*", null, new ExpTreenode(coeff), new ExpTreenode(var));
                } else {
                    ExpTreenode newTerm = null;
                    if (coeff.hasNegativeFirstTerm()) {
                        newTerm = new ExpTreenode("*", null, new ExpTreenode(coeff.negate()), new ExpTreenode(var));
                        t = new ExpTreenode("-", null, t, newTerm);
                    } else {
                        newTerm = new ExpTreenode("*", null, new ExpTreenode(coeff), new ExpTreenode(var));
                        t = new ExpTreenode("+", null, t, newTerm);
                    }
                }
            } else // deg > 1
            {
                if (t == null) {
                    if (coeff.isOne())
                        t = new ExpTreenode("^", null, new ExpTreenode(var), new ExpTreenode(new ComplexNumber(deg, 0)));
                    else {
                        ExpTreenode varpow = new ExpTreenode("^", null, new ExpTreenode(var), new ExpTreenode(new ComplexNumber(deg, 0)));
                        t = new ExpTreenode("*", null, new ExpTreenode(coeff), varpow);
                    }
                } else {
                    ExpTreenode newTerm = null;
                    if (coeff.hasNegativeFirstTerm()) {
                        ExpTreenode varpow = new ExpTreenode("^", null, new ExpTreenode(var), new ExpTreenode(new ComplexNumber(deg, 0)));
                        newTerm = new ExpTreenode("*", null, new ExpTreenode(coeff.negate()), varpow);
                        t = new ExpTreenode("-", null, t, newTerm);
                    } else {
                        ExpTreenode varpow = new ExpTreenode("^", null, new ExpTreenode(var), new ExpTreenode(new ComplexNumber(deg, 0)));
                        newTerm = new ExpTreenode("*", null, new ExpTreenode(coeff), varpow);
                        t = new ExpTreenode("+", null, t, newTerm);
                    }
                }
            }
        }
    }
    if (t == null)
        t = new ExpTreenode(ComplexNumber.makeZero());
    return t;
}
