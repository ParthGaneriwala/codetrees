public void initLayout() {
    setLayout((new GridLayout(1, true)));
    _parent = new Composite(this, SWT.BORDER);
    _parent.setLayout((new GridLayout(1, true)));
    topComposite = new Composite(_parent, SWT.BORDER);
    GridLayout gl_topComp = new GridLayout(2, false);
    topComposite.setLayout(gl_topComp);
    GridData gdLyt = new GridData(GridData.FILL_HORIZONTAL);
    gdLyt.horizontalAlignment = SWT.FILL;
    topComposite.setLayoutData(gdLyt);
    /*
		 * Tool Name CLabel Settings (displays 'Streaming Tool')  
		 */
    toolNameLabel = new CLabel(topComposite, SWT.LEFT);
    toolIcon = // $NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
    Activator.imageDescriptorFromPlugin("lead.streamingTool.server", ("icons" + File.separator + "StreamingTool.png")).createImage();
    toolNameLabel.setImage(toolIcon);
    // $NON-NLS-1$
    toolNameLabel.setText(Messages.getString("StreamingComposite.Streaming"));
    /* END OF: Tool Name CLabel (displays 'Streaming Tool')  */
    /*
		 * ****************************************************************
		 * TOOLBAR LAYOUT MAKING CODE LINEs...
		 * ****************************************************************
		 */
    ToolBarManager streamingToolBar = new ToolBarManager(SWT.HORIZONTAL | SWT.FLAT);
    createEmptyLabel(7);
    streamingToolBar.add(emptyLabel);
    createMediaSourceComboControlContrib();
    streamingToolBar.add(mediaSourceComboControlContrib);
    streamingToolBar.add(new Separator());
    createResetVideoSizeAction();
    streamingToolBar.add(resetVideoAction);
    createFullScreenVideoAction();
    streamingToolBar.add(fullScreenVideoAction);
    createVideoZoomINAction();
    streamingToolBar.add(videoZoomINAction);
    createVideoZoomOUTAction();
    streamingToolBar.add(videoZoomOUTAction);
    streamingToolBar.add(new Separator());
    createRtmpTunnelEnableAction();
    streamingToolBar.add(rtmpTunnelEnable);
    createSharedSeekingAction();
    streamingToolBar.add(toggleSharedSeeking);
    streamingToolBar.add(new Separator());
    streamingToolBar.add(emptyLabel);
    createInfoButtonAction();
    streamingToolBar.add(infoButtonAction);
    streamingToolBar.createControl(topComposite);
    /* 
		 * ****************************************************************
		 * END OF: TOOLBAR LAYOUT MAKING CODE LINEs...
		 * **************************************************************** 
		 */
    /*
		 * STATUS BAR LAYOUT CODE...
		 */
    toolStatusBar = new ToolStatusBar(_parent, SWT.NONE);
    toolStatusBar.setMainCompositeCombo(this.mediaSourceCombo);
    /* 
		 * 'flashPlayer' Composite : contains ShockwaveFlash OLE Component widget
		 */
    Layout flashPlayerLayout = new Layout() {

        @Override
        protected Point computeSize(Composite composite, int hint, int hint2, boolean flushCache) {
            return new Point(550, 410);
        }

        @Override
        protected void layout(Composite composite, boolean flushCache) {
            _parent.layout();
        }
    };
    flashPlayer = new FlashPlayer(_parent, SWT.NONE);
    flashPlayer.setLayout(flashPlayerLayout);
    flashPlayer.setStreamingService(service);
    // flashPlayer.setStreamingComposite(this);
    // $NON-NLS-1$
    streamingController = new StreamingController(flashPlayer, service, this, "0.1");
    // flashPlayer.setStreamingController(streamingController);
    service.setStreamingController(streamingController);
    SWFPath = StreamingSettings.getFlashPlayerPath();
    // loads an empty media content to init the swf-flash player
    // $NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$
    flashPlayer.loadRemoteRTMPMovie(SWFPath, "rtmp://127.0.0.1/CoffeeStreaming", "", "rtmp", "0.1");
    StreamingService.clientBroadCaster = "";
    // END OF  'flashPlayer' Composite Settings
    LoadRTMPMedia("", null, false, false);
    applyTheme();
}
