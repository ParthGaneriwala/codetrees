// **************************************************************************
// PUBLIC METHODS
// **************************************************************************
public NewickTree constructTree(DistanceMatrix inDistanceMatrix) {
    int nodeIndex = 1;
    Map<String, PhyloNode> nodeMap = new HashMap<String, PhyloNode>();
    DistanceMatrix matrix = inDistanceMatrix.clone();
    NewickTree tree = new NewickTree();
    while (matrix.size() > 1) {
        Edge<String> shortestEdge = matrix.getShortestEdge();
        String minKey1 = shortestEdge.getFrom();
        String minKey2 = shortestEdge.getTo();
        float minDistance = shortestEdge.getDistance();
        String newNodeName = "_" + (nodeIndex++);
        PhyloNode newNode = new PhyloNode();
        nodeMap.put(newNodeName, newNode);
        if (!nodeMap.containsKey(minKey1)) {
            PhyloNode childNode = new PhyloNode().setLabel(minKey1);
            newNode.addEdge(childNode, minDistance / 2);
        } else {
            float distance = (minDistance / 2) - nodeMap.get(minKey1).getMaxDistanceToLeaf();
            newNode.addEdge(nodeMap.get(minKey1), distance);
            nodeMap.remove(minKey1);
        }
        if (!nodeMap.containsKey(minKey2)) {
            PhyloNode childNode = new PhyloNode().setLabel(minKey2);
            newNode.addEdge(childNode, minDistance / 2);
        } else {
            float distance = (minDistance / 2) - nodeMap.get(minKey2).getMaxDistanceToLeaf();
            newNode.addEdge(nodeMap.get(minKey2), distance);
            nodeMap.remove(minKey2);
        }
        // Reduce the matrix
        matrix.addKey(newNodeName);
        for (String key : matrix.keySet()) {
            if (key.equals(minKey1) || key.equals(minKey2) || key.equals(newNodeName))
                continue;
            float avgDistance = (matrix.getDistance(minKey1, key) + matrix.getDistance(minKey2, key)) / 2;
            matrix.setDistance(newNodeName, key, avgDistance);
        }
        matrix.removeKey(minKey1);
        matrix.removeKey(minKey2);
    }
    tree.setRootNode(nodeMap.get(matrix.keySet().iterator().next()));
    tree.orderByNodeCount();
    return tree;
}
