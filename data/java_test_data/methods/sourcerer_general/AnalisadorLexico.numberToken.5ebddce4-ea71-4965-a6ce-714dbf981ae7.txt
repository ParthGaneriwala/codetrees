private Token numberToken(StringBuilder simbol, char ch) {
    int type = (simbol.length() == 0) ? Code.LIT_INTEIRO : Code.LIT_REAL;
    boolean isNumber = true;
    try {
        // Adiciona todos os digitos sequenciais a simbol
        while (isDigit(ch)) {
            simbol.append(ch);
            ch = nextChar();
        }
        // Testa se encontrou um '.' e simbol ainda nao possui nenhum '.'
        if (ch == '.' && simbol.charAt(0) != '.') {
            ch = nextChar();
            // Caso seja '..' devolve os pontos e retorna o token anterior
            if (ch == '.') {
                doubleUnget();
                return new Token(Code.LIT_INTEIRO, simbol.toString());
            } else // Senao adiciona o '.' e continua a formar do token
            {
                simbol.append('.');
                type = Code.LIT_REAL;
            }
        }
        // Adiciona todos os digitos sequenciais depois do '.' a simbol
        while (isDigit(ch)) {
            simbol.append(ch);
            ch = nextChar();
        }
        // Caso encontre um 'e', vericica se o numero esta completo
        if (ch == 'e') {
            type = Code.LIT_REAL;
            isNumber = false;
            simbol.append('e');
            ch = nextChar();
            // Pega um possivel sinal apos o 'e'
            if (ch == '+' || ch == '-') {
                simbol.append(ch);
                ch = nextChar();
            }
            // Se encontrar um numero, adiciona ele a simbol
            if (isDigit(ch)) {
                isNumber = true;
                while (isDigit(ch)) {
                    simbol.append(ch);
                    ch = nextChar();
                }
            } else // Senao pega toda a palavra e transmite como erro
            {
                isNumber = false;
                while (next != ' ' && next != '\t' && next != '\n' && next != '\r') {
                    simbol.append(ch);
                    ch = nextChar();
                }
            }
        }
        if (isLetter(ch) || ch == '.') {
            isNumber = false;
            // Pega toda a palavra e transmite como erro
            while (next != ' ' && next != '\t' && next != '\n' && next != '\r') {
                simbol.append(ch);
                ch = nextChar();
            }
        }
    } finally {
        unget();
        if (isNumber) {
            return new Token(type, simbol.toString());
        } else {
            return new Token(Code.ERRO, simbol.toString());
        }
    }
}
