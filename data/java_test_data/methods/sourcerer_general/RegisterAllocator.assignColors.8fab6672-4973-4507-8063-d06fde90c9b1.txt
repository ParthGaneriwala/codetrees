private HashMap assignColors(Stack selectStack, HashMap selectedTempVsAdjTemps, HashSet spilledNodes, HashMap coalescedVsList) {
    interferenceGraph.reset();
    HashSet usedColors = new HashSet();
    HashMap tempVsNewNode = new HashMap();
    HashMap tempVsColor = new HashMap();
    while (!selectStack.isEmpty()) {
        Temp temp = (Temp) selectStack.pop();
        Node newNode = interferenceGraph.newInterferenceGraphNode(temp);
        tempVsNewNode.put(temp, newNode);
        HashSet adjTemps = (HashSet) selectedTempVsAdjTemps.get(temp);
        // Find out the colors that CANNOT be used for this new node; these will be the
        // colors of the adjacent nodes of the new temp
        Iterator iter = adjTemps.iterator();
        HashSet prohibitedColorsForNewNode = new HashSet();
        while (iter.hasNext()) {
            Temp adjTemp = (Temp) iter.next();
            prohibitedColorsForNewNode.add(tempVsColor.get(adjTemp));
        }
        if (prohibitedColorsForNewNode.size() >= numberOfRegisters) {
            // become an actual spill) and re-try
            return null;
        }
        // Must try to use an already used color; iterate through the usedColors set and find
        // if there is one such color
        Iterator iter1 = usedColors.iterator();
        String colorToUse = null;
        while (iter1.hasNext()) {
            String usedColor = (String) iter1.next();
            if (!prohibitedColorsForNewNode.contains(usedColor)) {
                colorToUse = usedColor;
                break;
            }
        }
        if (colorToUse == null) {
            // Get the first non-used color
            colorToUse = (String) colors.remove(0);
        }
        tempVsColor.put(temp, colorToUse);
        // If temp is a coalesced temporary, add it's children also to the tempVsColor map
        HashSet coalescedTemps = getCoalescedTemps(temp, coalescedVsList);
        Iterator coalTempIter = coalescedTemps.iterator();
        while (coalTempIter.hasNext()) tempVsColor.put((Temp) coalTempIter.next(), colorToUse);
        usedColors.add(colorToUse);
    }
    return tempVsColor;
}
