private void baixarCss(PaginaPro pagina, JobPro job) {
    Matcher mat = patCss.matcher(pagina.getCodOriginal());
    while (mat.find()) {
        String tag = mat.group();
        try {
            String type = regras.getAtributo(tag, "type");
            if (type.toLowerCase().equals("text/css")) {
                String href = regras.getAtributo(tag, "href");
                ArquivoPro arquivo = baixarCadastrarArquivo(normalizarUrl(pagina.getUrl(), href), "css", job, pagina);
                if (arquivo != null && !href.equals("")) {
                    arrumarLink(pagina, href, "templates" + File.separatorChar + coordenador.getSitioCms().getNuSitio() + File.separatorChar + "css" + File.separatorChar + arquivo.getIdArquivo() + "_a_" + G_File.getName(arquivo.getPathLocal()));
                    baixarArquivoCss(arquivo, job, pagina);
                }
            }
        } catch (Exception e) {
            logger.error("Erro ao baixar " + tag, e);
        }
    }
    mat = patUrlCss.matcher(pagina.getCodOriginal());
    while (mat.find()) {
        String tag = mat.group();
        try {
            int ini = tag.indexOf("(") + 1;
            int fim = tag.indexOf(")");
            // pode continuar, nao ha problemas a inexistencia de '(' .
            if (fim == -1)
                continue;
            // throw new Exception("')' not found in '"+tag+"'.");
            String href = tag.subSequence(ini, fim).toString().trim();
            if (href.endsWith(".css")) {
                ArquivoPro arquivo = baixarCadastrarArquivo(normalizarUrl(pagina.getUrl(), href), "css", job, pagina);
                if (arquivo != null) {
                    arrumarLink(pagina, href, "templates" + File.separatorChar + coordenador.getSitioCms().getNuSitio() + File.separatorChar + "css" + File.separatorChar + arquivo.getIdArquivo() + "_a_" + G_File.getName(arquivo.getUrl()));
                    baixarArquivoCss(arquivo, job, pagina);
                }
            }
        } catch (Exception e) {
            logger.error("Erro ao baixar " + tag, e);
        }
    }
    mat = patUrlCss2.matcher(pagina.getCodOriginal());
    while (mat.find()) {
        String tag = mat.group();
        try {
            String href = mat.group(2).trim();
            ArquivoPro arquivo = baixarCadastrarArquivo(normalizarUrl(pagina.getUrl(), href), "css", job, pagina);
            if (arquivo != null && !href.equals("")) {
                arrumarLink(pagina, href, "css/" + arquivo.getIdArquivo() + "_a_" + G_File.getName(arquivo.getUrl()));
                baixarArquivoCss(arquivo, job, pagina);
            }
        } catch (Exception e) {
            logger.error("Erro ao baixar " + tag, e);
        }
    }
}
