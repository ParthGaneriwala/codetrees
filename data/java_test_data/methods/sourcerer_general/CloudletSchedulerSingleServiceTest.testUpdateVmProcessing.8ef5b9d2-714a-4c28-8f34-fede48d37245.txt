public void testUpdateVmProcessing(UtilizationModel utilizationModel) {
    Cloudlet cloudlet = new Cloudlet(0, CLOUDLET_LENGTH, PES_NUMBER, CLOUDLET_FILE_SIZE, CLOUDLET_OUTPUT_SIZE, utilizationModel, utilizationModel, utilizationModel);
    cloudlet.setResourceParameter(0, 0, 0);
    List<Double> mipsShare = new ArrayList<Double>();
    mipsShare.add(MIPS / 4);
    mipsShare.add(MIPS / 4);
    mipsShare.add(MIPS / 4);
    mipsShare.add(MIPS / 4);
    vmScheduler.setCurrentMipsShare(mipsShare);
    vmScheduler.cloudletSubmit(cloudlet);
    double totalCurrentMipsForCloudlet = MIPS / 4 * PES_NUMBER;
    double utilization1 = utilizationModel.getUtilization(0);
    double requestedMips1 = (int) (utilization1 * PES_NUMBER * MIPS);
    if (requestedMips1 > totalCurrentMipsForCloudlet) {
        requestedMips1 = totalCurrentMipsForCloudlet;
    }
    double expectedCompletiontime1 = ((double) CLOUDLET_LENGTH * PES_NUMBER) / requestedMips1;
    double actualCompletionTime1 = vmScheduler.updateVmProcessing(0, mipsShare);
    assertEquals(expectedCompletiontime1, actualCompletionTime1, 0);
    double utilization2 = utilizationModel.getUtilization(1);
    double requestedMips2 = (int) (utilization2 * PES_NUMBER * MIPS);
    if (requestedMips2 > totalCurrentMipsForCloudlet) {
        requestedMips2 = totalCurrentMipsForCloudlet;
    }
    double expectedCompletiontime2 = 1 + ((CLOUDLET_LENGTH * PES_NUMBER - requestedMips1 * 1)) / requestedMips2;
    double actualCompletionTime2 = vmScheduler.updateVmProcessing(1, mipsShare);
    assertEquals(expectedCompletiontime2, actualCompletionTime2, 0);
    assertFalse(vmScheduler.isFinishedCloudlets());
    assertEquals(0, vmScheduler.updateVmProcessing(CLOUDLET_LENGTH, mipsShare), 0);
    assertTrue(vmScheduler.isFinishedCloudlets());
}
