public List<OUTCOME_TYPE> viterbi(List<List<Feature>> features) throws CleartkProcessingException {
    List<ScoredOutcome<List<OUTCOME_TYPE>>> nbestSequences = new ArrayList<ScoredOutcome<List<OUTCOME_TYPE>>>();
    if (features == null || features.size() == 0) {
        return Collections.emptyList();
    }
    List<ScoredOutcome<OUTCOME_TYPE>> scoredOutcomes = delegatedClassifier.score(features.get(0), stackSize);
    for (ScoredOutcome<OUTCOME_TYPE> scoredOutcome : scoredOutcomes) {
        double score = scoredOutcome.getScore();
        List<OUTCOME_TYPE> sequence = new ArrayList<OUTCOME_TYPE>();
        sequence.add(scoredOutcome.getOutcome());
        nbestSequences.add(new ScoredOutcome<List<OUTCOME_TYPE>>(sequence, score));
    }
    Map<OUTCOME_TYPE, Double> l = new HashMap<OUTCOME_TYPE, Double>();
    Map<OUTCOME_TYPE, List<OUTCOME_TYPE>> m = new HashMap<OUTCOME_TYPE, List<OUTCOME_TYPE>>();
    for (int i = 1; i < features.size(); i++) {
        List<Feature> instanceFeatures = features.get(i);
        l.clear();
        m.clear();
        for (ScoredOutcome<List<OUTCOME_TYPE>> scoredSequence : nbestSequences) {
            // add features from previous outcomes from each scoredSequence
            // in returnValues
            int outcomeFeaturesCount = 0;
            List<Object> previousOutcomes = new ArrayList<Object>(scoredSequence.getOutcome());
            for (OutcomeFeatureExtractor outcomeFeatureExtractor : outcomeFeatureExtractors) {
                List<Feature> outcomeFeatures = outcomeFeatureExtractor.extractFeatures(previousOutcomes);
                instanceFeatures.addAll(outcomeFeatures);
                outcomeFeaturesCount += outcomeFeatures.size();
            }
            // score the instance features using the features added by the
            // outcomeFeatureExtractors
            scoredOutcomes = delegatedClassifier.score(instanceFeatures, stackSize);
            // remove the added features from previous outcomes for this
            // scoredSequence
            instanceFeatures = instanceFeatures.subList(0, instanceFeatures.size() - outcomeFeaturesCount);
            for (ScoredOutcome<OUTCOME_TYPE> scoredOutcome : scoredOutcomes) {
                if (!l.containsKey(scoredOutcome.getOutcome())) {
                    double score = scoredSequence.getScore();
                    if (addScores) {
                        score = score + scoredOutcome.getScore();
                    } else {
                        score = score * scoredOutcome.getScore();
                    }
                    l.put(scoredOutcome.getOutcome(), score);
                    m.put(scoredOutcome.getOutcome(), new ArrayList<OUTCOME_TYPE>(scoredSequence.getOutcome()));
                } else {
                    double newScore = scoredSequence.getScore();
                    if (addScores) {
                        newScore = newScore + scoredOutcome.getScore();
                    } else {
                        newScore = newScore * scoredOutcome.getScore();
                    }
                    double bestScore = l.get(scoredOutcome.getOutcome());
                    if (newScore > bestScore) {
                        l.put(scoredOutcome.getOutcome(), newScore);
                        m.put(scoredOutcome.getOutcome(), new ArrayList<OUTCOME_TYPE>(scoredSequence.getOutcome()));
                    }
                }
            }
        }
        nbestSequences.clear();
        for (OUTCOME_TYPE outcome : l.keySet()) {
            List<OUTCOME_TYPE> outcomeSequence = m.get(outcome);
            outcomeSequence.add(outcome);
            double score = l.get(outcome);
            ScoredOutcome<List<OUTCOME_TYPE>> returnValue = new ScoredOutcome<List<OUTCOME_TYPE>>(outcomeSequence, score);
            nbestSequences.add(returnValue);
        }
        Collections.sort(nbestSequences);
    }
    Collections.sort(nbestSequences);
    if (nbestSequences.size() > 0) {
        return nbestSequences.get(0).getOutcome();
    }
    return null;
}
