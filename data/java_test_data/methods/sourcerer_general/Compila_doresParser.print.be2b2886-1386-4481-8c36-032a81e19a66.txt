// $ANTLR start "print"
public final Compila_doresParser.print_return print() throws RecognitionException {
    Compila_doresParser.print_return retval = new Compila_doresParser.print_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token PRINT108 = null;
    Compila_doresParser.list_expression_return list_expression109 = null;
    CommonTree PRINT108_tree = null;
    try {
        // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:182:2: ( ( PRINT list_expression ) )
        // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:182:4: ( PRINT list_expression )
        {
            root_0 = (CommonTree) adaptor.nil();
            // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:182:4: ( PRINT list_expression )
            // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:182:5: PRINT list_expression
            {
                PRINT108 = (Token) match(input, PRINT, FOLLOW_PRINT_in_print1275);
                PRINT108_tree = (CommonTree) adaptor.create(PRINT108);
                root_0 = (CommonTree) adaptor.becomeRoot(PRINT108_tree, root_0);
                pushFollow(FOLLOW_list_expression_in_print1278);
                list_expression109 = list_expression();
                state._fsp--;
                adaptor.addChild(root_0, list_expression109.getTree());
            }
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
