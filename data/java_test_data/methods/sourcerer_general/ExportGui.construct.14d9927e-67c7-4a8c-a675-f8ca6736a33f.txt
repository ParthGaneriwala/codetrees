public Boolean construct() {
    try {
        JOptionPane.showMessageDialog(new JFrame(), "All the selected proteins that will be saved will be vizualised very breafly", "Info", JOptionPane.INFORMATION_MESSAGE);
        // step 1 create a document
        Document document = new Document(PageSize.A4, 50, 50, 50, 50);
        // step 2 create a writer
        PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(lPath));
        // step 3 open the document
        document.open();
        // step 4 create the PDFContenteByte
        PdfContentByte cb = writer.getDirectContent();
        // step 5 set the selected protein as the filtered proteins
        iParent.setFilteredProteins(iProteinsToExport);
        // step 6 load every selected protein
        for (int i = 0; i < iProteinsToExport.size(); i++) {
            // select the protein
            iParent.getProteinList().setSelectedIndex(i);
            iParent.loadProtein(true);
            // get the protein
            QuantitativeProtein lProtein = (QuantitativeProtein) iParent.getProteinList().getSelectedValue();
            // get the types
            String[] lTypes = lProtein.getTypes();
            // wait a second to load every panel correctly
            lThreadGui.sleep(1000);
            // create differen fonts
            com.lowagie.text.Font lTitleFont = FontFactory.getFont(FontFactory.TIMES_ROMAN, 24, 0);
            com.lowagie.text.Font lTitleFontBlue = FontFactory.getFont(FontFactory.TIMES_ROMAN, 24, 0, new Color(0x00, 0x00, 0xFF));
            com.lowagie.text.Font lTitleFontOrange = FontFactory.getFont(FontFactory.TIMES_ROMAN, 24, 0, new Color(0xFF, 0xBC, 0x00));
            com.lowagie.text.Font lNormalFont = FontFactory.getFont(FontFactory.TIMES_ROMAN, 12, 0);
            com.lowagie.text.Font lNormalFontGreen = FontFactory.getFont(FontFactory.TIMES_ROMAN, 12, 0, new Color(0x00, 0xFF, 0x00));
            com.lowagie.text.Font lNormalFontRed = FontFactory.getFont(FontFactory.TIMES_ROMAN, 12, 0, new Color(0xFF, 0x00, 0x00));
            // add the protein info
            document.add(new Paragraph("Protein info", lTitleFont));
            document.add(new Paragraph("   Protein accession : " + lProtein.toString(), lNormalFont));
            for (int j = 0; j < lTypes.length; j++) {
                document.add(new Paragraph("   Protein mean for " + lTypes[j] + " : " + lProtein.getProteinRatio(lTypes[j]), lNormalFont));
                document.add(new Paragraph("   Peptide grouped protein mean for " + lTypes[j] + " : " + lProtein.getGroupedProteinRatio(lTypes[j]), lNormalFont));
            }
            // add the ratio info
            Vector<QuantitativePeptideGroup> lPeptideGroups = lProtein.getPeptideGroups(true);
            for (int k = 0; k < lPeptideGroups.size(); k++) {
                Vector<RatioGroup> lGroup = lPeptideGroups.get(k).getRatioGroups();
                if (lGroup.get(0).getProteinAccessions().length == 1) {
                    document.add(new Paragraph((k + 1) + ". " + lGroup.get(0).getPeptideSequence(), lTitleFontBlue));
                } else {
                    document.add(new Paragraph((k + 1) + ". " + lGroup.get(0).getPeptideSequence(), lTitleFontOrange));
                }
                for (int j = 0; j < lGroup.size(); j++) {
                    RatioGroup lRatioGroup = lGroup.get(j);
                    if (lRatioGroup.getParentCollection().getRoverSource() == RoverSource.DISTILLER_QUANT_TOOLBOX_MS_LIMS || lRatioGroup.getParentCollection().getRoverSource() == RoverSource.DISTILLER_QUANT_TOOLBOX_ROV) {
                        DistillerRatioGroup lDistillerRatioGroup = (DistillerRatioGroup) lRatioGroup;
                        document.add(new Paragraph(" Correlation: " + lDistillerRatioGroup.getCorrelation() + "   fraction: " + lDistillerRatioGroup.getFraction(), lNormalFont));
                    }
                    for (int l = 0; l < lRatioGroup.getNumberOfRatios(); l++) {
                        if (lRatioGroup.getParentCollection().getRoverSource() == RoverSource.DISTILLER_QUANT_TOOLBOX_MS_LIMS || lRatioGroup.getParentCollection().getRoverSource() == RoverSource.DISTILLER_QUANT_TOOLBOX_ROV) {
                            DistillerRatio lRatio = (DistillerRatio) lRatioGroup.getRatio(l);
                            HashMap lStatMeas = iQuantitativeValidationSingelton.getReferenceSet().getStatisticalMeasermentForRatio(lRatio.getType(), lRatio);
                            String lRatioWrite = "   " + lRatio.getType() + "     " + lRatio.getRatio(iQuantitativeValidationSingelton.isLog2()) + "  Quality:  " + lRatio.getQuality() + "  Z-score:  " + String.valueOf(Math.round((Double) lStatMeas.get("significance") * 1000.0) / 1000.0) + "  P-value:  " + String.valueOf(Math.round(iQuantitativeValidationSingelton.calculateTwoSidedPvalueForZvalue((Double) lStatMeas.get("significance")) * 1000.0) / 1000.0);
                            if (lRatio.getValid()) {
                                document.add(new Paragraph(" " + lRatioWrite, lNormalFontGreen));
                            } else {
                                document.add(new Paragraph(" " + lRatioWrite, lNormalFontRed));
                                for (int m = 0; m < lRatio.getNotValidState().size(); m++) {
                                    document.add(new Paragraph("      " + lRatio.getNotValidState().get(m) + "   limit: " + lRatio.getNotValidExtraInfo().get(m), lNormalFont));
                                }
                            }
                        } else if (lRatioGroup.getParentCollection().getRoverSource() == RoverSource.MAX_QUANT || lRatioGroup.getParentCollection().getRoverSource() == RoverSource.MAX_QUANT_NO_SIGN || lRatioGroup.getParentCollection().getRoverSource() == RoverSource.MAX_QUANT_MS_LIMS) {
                            MaxQuantRatio lRatio = (MaxQuantRatio) lRatioGroup.getRatio(l);
                            HashMap lStatMeas = iQuantitativeValidationSingelton.getReferenceSet().getStatisticalMeasermentForRatio(lRatio.getType(), lRatio);
                            String lRatioWrite = "   " + lRatio.getType() + "     " + lRatio.getRatio(iQuantitativeValidationSingelton.isLog2()) + "  PEP:  " + ((MaxQuantRatioGroup) lRatio.getParentRatioGroup()).getPEP() + "  Z-score:  " + String.valueOf(Math.round((Double) lStatMeas.get("significance") * 1000.0) / 1000.0) + "  P-value:  " + String.valueOf(Math.round(iQuantitativeValidationSingelton.calculateTwoSidedPvalueForZvalue((Double) lStatMeas.get("significance")) * 1000.0) / 1000.0);
                            if (lRatio.getValid()) {
                                document.add(new Paragraph(" " + lRatioWrite, lNormalFontGreen));
                            } else {
                                document.add(new Paragraph(" " + lRatioWrite, lNormalFontRed));
                            }
                        } else {
                            Ratio lRatio = lRatioGroup.getRatio(l);
                            if (lRatio.getValid()) {
                                document.add(new Paragraph("   " + lRatio.getType() + "     " + lRatio.getRatio(iQuantitativeValidationSingelton.isLog2()), lNormalFontGreen));
                            } else {
                                document.add(new Paragraph("   " + lRatio.getType() + "     " + lRatio.getRatio(iQuantitativeValidationSingelton.isLog2()), lNormalFontRed));
                            }
                        }
                    }
                }
            }
            // create a new page
            document.setPageSize(new Rectangle(iParent.getProteinBar().getWidth(), iParent.getProteinBar().getHeight()));
            document.newPage();
            // save the protein bar
            Graphics2D g2ProteinBar = cb.createGraphicsShapes(iParent.getProteinBar().getWidth(), iParent.getProteinBar().getHeight());
            iParent.getProteinBar().paintAll(g2ProteinBar);
            g2ProteinBar.dispose();
            // create a new page and set the page size smaller
            document.setPageSize(new Rectangle(450, 450));
            document.newPage();
            // save every chart on a different page
            for (int j = 0; j < iParent.getChartPanels().length; j++) {
                PdfTemplate tp = cb.createTemplate(450, 450);
                Graphics2D g2d = tp.createGraphics(450, 450, new DefaultFontMapper());
                Rectangle2D r2d = new Rectangle2D.Double(0, 0, 450, 450);
                iParent.getChartPanels()[j].draw(g2d, r2d);
                g2d.dispose();
                cb.addTemplate(tp, 0, 0);
                if (j == iParent.getChartPanels().length - 1) {
                    // it's the last panel, set it back to the normal size
                    document.setPageSize(PageSize.A4);
                }
                document.newPage();
            }
        }
        // step 7 close the document
        document.close();
    } catch (InterruptedException e) {
        logger.error(e.getMessage(), e);
    } catch (DocumentException e) {
        logger.error(e.getMessage(), e);
    } catch (FileNotFoundException e) {
        logger.error(e.getMessage(), e);
    }
    // step 7.2 dispose the iText components.
    return true;
}
