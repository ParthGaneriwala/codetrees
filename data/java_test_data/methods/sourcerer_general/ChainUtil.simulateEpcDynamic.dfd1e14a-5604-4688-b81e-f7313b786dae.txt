public static void simulateEpcDynamic(EPC epc, String userData, JspWriter out) {
    EPCDynamicManager epcDynamicmgr = (EPCDynamicManager) SpringUtil.getBean("epcDynamicManager");
    EPCDynamic epcDynamic = (EPCDynamic) epcDynamicmgr.getEpcDynamic(epc);
    int fromValue = epcDynamic.getEpcDynamicSeekFrom();
    int toValue = epcDynamic.getEpcDynamicSeekTo();
    Set epcDynamicValues = epcDynamic.getEpcDynamicValues();
    Iterator epcDynamicValuesIte = epcDynamicValues.iterator();
    String value;
    try {
        while (epcDynamicValuesIte.hasNext()) {
            EPCDynamicValue epcDynamicValue = (EPCDynamicValue) epcDynamicValuesIte.next();
            value = epcDynamicValue.getEpcDynamicValue();
            if (userData.substring(fromValue, toValue).equals(value)) {
                if (epcDynamicValue.getEpcCustom() != null) {
                    EPCCustom epcCustom = epcDynamicValue.getEpcCustom();
                    String epcDataType = epcCustom.getEpc().getEpcDataType();
                    if (Constants.USER_DATA_TYPE_BINARY.equals(epc.getEpcDataType())) {
                        if (!Constants.USER_DATA_TYPE_BINARY.equals(epcDataType)) {
                            userData = ConvertUtil.binaryString2hexString(userData);
                        }
                    } else {
                        if (Constants.USER_DATA_TYPE_HEX.equals(epc.getEpcDataType())) {
                            if (!Constants.USER_DATA_TYPE_HEX.equals(epcDataType)) {
                                userData = ConvertUtil.hexString2binaryString(userData);
                            }
                        }
                    }
                    Set epcCustomStructures = epcCustom.getEpcCustomStructures();
                    Iterator epcCustomStructuresIte = epcCustomStructures.iterator();
                    while (epcCustomStructuresIte.hasNext()) {
                        EPCCustomStructure epcStructure = (EPCCustomStructure) epcCustomStructuresIte.next();
                        String name = epcStructure.getEpcCustomStructureName();
                        int from = epcStructure.getEpcCustomStructureSeekFrom();
                        int to = epcStructure.getEpcCustomStructureSeekTo();
                        String data = userData.substring(from, to);
                        out.print(Constants.SEPARATOR_USER);
                        out.print(name);
                        out.print(Constants.SEPARATOR_USER);
                        out.print(":  ");
                        out.print(data);
                        out.print("<br>");
                    }
                } else {
                    if (epcDynamicValue.getEpcStandard() != null) {
                        EPCStandard epcStandard = epcDynamicValue.getEpcStandard();
                        Set epcStandardStructures = epcStandard.getEpcStandardStructures();
                        Iterator epcStandardStructuresIte = epcStandardStructures.iterator();
                        String epcDataType = epcStandard.getEpc().getEpcDataType();
                        if (Constants.USER_DATA_TYPE_BINARY.equals(epc.getEpcDataType())) {
                            if (!Constants.USER_DATA_TYPE_BINARY.equals(epcDataType)) {
                                userData = ConvertUtil.binaryString2hexString(userData);
                            }
                        } else {
                            if (Constants.USER_DATA_TYPE_HEX.equals(epc.getEpcDataType())) {
                                if (!Constants.USER_DATA_TYPE_HEX.equals(epcDataType)) {
                                    userData = ConvertUtil.hexString2binaryString(userData);
                                }
                            }
                        }
                        while (epcStandardStructuresIte.hasNext()) {
                            EPCStandardStructure epcStructure = (EPCStandardStructure) epcStandardStructuresIte.next();
                            String name = epcStructure.getEpcStandardStructureName();
                            int from = epcStructure.getEpcStandardStructureSeekFrom();
                            int to = epcStructure.getEpcStandardStructureSeekTo();
                            if (from == 0) {
                                String header = userData.substring(from, to);
                                if (!epcStandard.getEpcStandardHeaderValue().equals(header)) {
                                    out.print("EPC header doesn't match!");
                                    break;
                                }
                            }
                            String data = userData.substring(from, to);
                            out.print(Constants.SEPARATOR_USER);
                            out.print(name);
                            out.print(Constants.SEPARATOR_USER);
                            out.print(":  ");
                            out.print(data);
                            out.print("<br>");
                        }
                    }
                }
            }
        }
    } catch (Exception e) {
        log.error("simulateEPCDynamic():" + e.getMessage());
    }
}
