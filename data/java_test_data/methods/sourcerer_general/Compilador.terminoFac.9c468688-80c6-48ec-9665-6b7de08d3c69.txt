private sintetizados terminoFac(tipo tipoH, boolean porValorH, String idPredefH) throws ErrorLexico, ErrorArchivo, ErrorSintactico, ErrorSemantico, Exception {
    sintetizados s = new sintetizados();
    sintetizados sFac, sTerF;
    boolean esMult = true;
    if ((numeroTokenActual == Token.MULTIPLICACION) || (numeroTokenActual == Token.DIV) || (numeroTokenActual == Token.AND)) {
        if (!porValorH) {
            throw new ErrorSemantico(ErrorSemantico.PARAM_REF, getNumeroLinea(), getNumeroColumna());
        } else {
            if ((numeroTokenActual == Token.MULTIPLICACION) || (numeroTokenActual == Token.DIV)) {
                if (numeroTokenActual == Token.MULTIPLICACION) {
                    match(Token.MULTIPLICACION);
                } else {
                    // es DIV
                    match(Token.DIV);
                    esMult = false;
                }
                sFac = factor(porValorH, idPredefH);
                if (compatibles(tipoH, sFac.getTipoS())) {
                    if (esMult) {
                        generador.genInstSinArg("", generador.MULT);
                    } else {
                        generador.genInstSinArg("", generador.DIVC);
                        generador.genInstSinArg("", generador.DIVI);
                    }
                    generador.genInst2ArgCte("", generador.CONT, -TS.getMaxMepa(), TS.getMaxMepa() - 1);
                    sTerF = terminoFac(sFac.getTipoS(), porValorH, idPredefH);
                    if ((sTerF.getTipoS() instanceof Entero) || (sTerF.getTipoS() instanceof Subrango)) {
                        s.setTipoS(new Entero(TS.getNivelActual()));
                    } else {
                        String e1, e2;
                        e1 = ErrorSemantico.construirMsj(sFac.getTipoS().toString());
                        e2 = ErrorSemantico.construirMsj(sTerF.getTipoS().toString());
                        throw new ErrorSemantico(ErrorSemantico.TIPO_INCOMP, getNumeroLinea(), getNumeroColumna(), e1, e2);
                    }
                } else {
                    String e1, e2;
                    e1 = ErrorSemantico.construirMsj(tipoH.toString());
                    e2 = ErrorSemantico.construirMsj(sFac.getTipoS().toString());
                    throw new ErrorSemantico(ErrorSemantico.TIPO_INCOMP, getNumeroLinea(), getNumeroColumna(), e1, e2);
                }
            } else {
                // es AND
                match(Token.AND);
                sFac = factor(porValorH, idPredefH);
                if (compatibles(tipoH, sFac.getTipoS())) {
                    if (sFac.getTipoS() instanceof Booleano) {
                        generador.genInstSinArg("", generador.CONJ);
                        sTerF = terminoFac(sFac.getTipoS(), porValorH, idPredefH);
                        if (sTerF.getTipoS() instanceof Booleano) {
                            s.setTipoS(new Booleano(TS.getNivelActual()));
                        } else {
                            String e1, e2;
                            e1 = ErrorSemantico.construirMsj(tipoH.toString());
                            e2 = ErrorSemantico.construirMsj(sTerF.getTipoS().toString());
                            throw new ErrorSemantico(ErrorSemantico.TIPO_INCOMP, getNumeroLinea(), getNumeroColumna(), e1, e2);
                        }
                    } else {
                        String e1, e2;
                        e1 = ErrorSemantico.construirMsj(tipoH.toString());
                        e2 = ErrorSemantico.construirMsj(sFac.getTipoS().toString());
                        throw new ErrorSemantico(ErrorSemantico.TIPO_INCOMP, getNumeroLinea(), getNumeroColumna(), e1, e2);
                    }
                } else {
                    String e1, e2;
                    e1 = ErrorSemantico.construirMsj(tipoH.toString());
                    e2 = ErrorSemantico.construirMsj(sFac.getTipoS().toString());
                    throw new ErrorSemantico(ErrorSemantico.TIPO_INCOMP, getNumeroLinea(), getNumeroColumna(), e1, e2);
                }
            }
        }
    } else {
        s.setTipoS(tipoH);
    }
    return s;
}
