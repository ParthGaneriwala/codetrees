public void saveOrder(HttpServletRequest request, Float price) throws IOException, ServletException {
    try {
        // save order
        SessionContainer sessionContainer = getSessionContainer(request);
        ShoppingCart cart = sessionContainer.getCart();
        Customer customer = sessionContainer.getCustomer();
        customer = customerService.findByEmail(customer.getEmail());
        Order order = new Order();
        order.setCustomer(customer);
        order.setOrderNumber(new Double(Math.random() * System.currentTimeMillis()).toString().substring(3, 8));
        List<Item> orderItems = new ArrayList<Item>();
        List<Item> items = cart.getItems();
        Map<Integer, Integer> temp = new HashMap<Integer, Integer>();
        Map<String, Integer> itemContentMap = new HashMap<String, Integer>();
        StringBuffer itemsContent = new StringBuffer();
        List<Item> printPhotosItems = cart.getPrintPhotosItems();
        for (Item item : items) {
            Integer id = item.getProduct().getId();
            String name = item.getProduct().getName();
            Integer quantity = item.getQuantity();
            if (!temp.containsKey(id)) {
                itemContentMap.put(name, quantity);
                temp.put(id, id);
            } else {
                Integer oldQuantity = itemContentMap.get(name);
                Integer newQuantity = oldQuantity + item.getQuantity();
                itemContentMap.put(name, newQuantity);
            }
            orderItems.add(item);
            item.setOrder(order);
        }
        for (Item item : printPhotosItems) {
            Integer id = item.getProduct().getId();
            String name = item.getProduct().getName();
            Integer quantity = item.getQuantity();
            if (!temp.containsKey(id)) {
                itemContentMap.put(name, quantity);
                temp.put(id, id);
            } else {
                Integer oldQuantity = itemContentMap.get(name);
                Integer newQuantity = oldQuantity + item.getQuantity();
                itemContentMap.put(name, newQuantity);
            }
            orderItems.add(item);
            item.setOrder(order);
        }
        Set<Map.Entry<String, Integer>> sets = itemContentMap.entrySet();
        for (Map.Entry entry : sets) {
            itemsContent.append(entry.getKey());
            itemsContent.append("  ");
            itemsContent.append("数量：" + entry.getValue() + ";  ");
        }
        String content = itemsContent.toString();
        if (content.length() < 2) {
            content = "";
        } else {
            Integer endIndex = content.lastIndexOf(";");
            if (endIndex > 0) {
                content = content.substring(0, endIndex);
            }
        }
        StringBuffer expectedMethod = new StringBuffer();
        if ("1".equals(cart.getAdjustColor())) {
            expectedMethod.append("颜色由冲印师调整; ");
        } else {
            expectedMethod.append("不动颜色; ");
        }
        if ("1".equals(cart.getAdjustTailor())) {
            expectedMethod.append("由冲印师进行剪裁处理");
        } else {
            expectedMethod.append("不剪裁，留白边处理");
        }
        order.setSendMethod(cart.getSendMethod());
        order.setAddress(cart.getAddress());
        order.setStatus("0");
        order.setItemsContent(itemsContent.toString());
        order.setItems(orderItems);
        order.setCreateDate(new Date());
        order.setCouponContent(cart.getCouponContent());
        order.setGiftContent(cart.getGiftContent());
        order.setPrice(price);
        order.setExpectedMethod(expectedMethod.toString());
        order.setSendPrice(cart.getFreight());
        Map<Integer, Coupon> couponsMap = sessionContainer.getCart().getCoupons();
        orderService.saveOrder(order, couponsMap);
        sessionContainer.setCurrentOrderNumber(order.getOrderNumber());
        // 生成订单后,清空购物车
        sessionContainer.getCart().clear();
    } catch (Exception ex) {
        throw new ServletException(ex);
    }
}
