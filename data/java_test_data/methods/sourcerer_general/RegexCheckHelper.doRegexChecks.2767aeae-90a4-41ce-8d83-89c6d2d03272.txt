public static String doRegexChecks(File fileFocusTree, String abbrevFile_DE, String abbrevFile_EN, String abbrevFile_IT) throws Exception {
    /*
     * Check abbrev files alone
     */
    testResults = testResults + "\n\nChecking macro file " + abbrevFile_DE + " ...";
    // make an URL
    helper_DE = new BobHelper(abbrevFile_DE, "abbrevFile_DE");
    if (helper_DE.checkAllRegexesInMacroMap() == true) {
        Pair[] longestMacros = helper_DE.get3OverallLongestMacros();
        testResults = testResults + "The 3 longest macros:\n" + longestMacros[0].getMacro() + " -> " + longestMacros[0].getLength() + "\n" + longestMacros[1].getMacro() + " -> " + longestMacros[1].getLength() + "\n" + longestMacros[2].getMacro() + " -> " + longestMacros[2].getLength() + "\n";
        testResults = testResults + "+++ OK: German macro file is correct.\n";
    } else {
        testResults = testResults + "+++ ERROR: German macro file contains " + "errors.\n";
    }
    testResults = testResults + "\n\nChecking macro file " + abbrevFile_EN + " ...";
    // make an URL
    helper_EN = new BobHelper(abbrevFile_EN, "abbrevFile_EN");
    if (helper_EN.checkAllRegexesInMacroMap() == true) {
        Pair[] longestMacros = helper_EN.get3OverallLongestMacros();
        testResults = testResults + "The 3 longest macros:\n" + longestMacros[0].getMacro() + " -> " + longestMacros[0].getLength() + "\n" + longestMacros[1].getMacro() + " -> " + longestMacros[1].getLength() + "\n" + longestMacros[2].getMacro() + " -> " + longestMacros[2].getLength() + "\n";
        testResults = testResults + "+++ OK: English macro file is correct.\n";
    } else {
        testResults = testResults + "+++ ERROR: English macro file contains " + "errors.\n";
    }
    testResults = testResults + "\n\nChecking macro file " + abbrevFile_IT + " ...";
    // make an URL
    helper_IT = new BobHelper(abbrevFile_IT, "abbrevFile_IT");
    if (helper_IT.checkAllRegexesInMacroMap() == true) {
        Pair[] longestMacros = helper_IT.get3OverallLongestMacros();
        testResults = testResults + "The 3 longest macros:\n" + longestMacros[0].getMacro() + " -> " + longestMacros[0].getLength() + "\n" + longestMacros[1].getMacro() + " -> " + longestMacros[1].getLength() + "\n" + longestMacros[2].getMacro() + " -> " + longestMacros[2].getLength() + "\n";
        testResults = testResults + "+++ OK: Italian macro file is correct.\n";
    } else {
        testResults = testResults + "+++ ERROR: Italian macro file contains " + "errors.\n";
    }
    /*
     * Now check the topic tree
     */
    testResults = testResults + "\n\nChecking all question patterns in the Topic " + "Tree ...\n";
    DefaultHandler handler = new RegexCheckHelper();
    // ContentHandler handler = new Regex();
    SAXParserFactory factory = SAXParserFactory.newInstance();
    // try {
    // out = new OutputStreamWriter(System.out, "UTF8");
    // parse the input
    SAXParser saxParser = factory.newSAXParser();
    saxParser.parse(fileFocusTree, handler);
    // } catch (ParserConfigurationException e) {
    // System.err.println(e.toString());
    // }
    // System.exit(1);
    testResults = testResults + "\n\nFinished checking all question patterns in the topic tree.\n";
    return testResults;
}
