public void actionPerformed(ActionEvent e) {
    // Handle open button action.
    if (e.getSource() == jMenuOpen1) {
        // Kill main thread
        if (mainThread != null) {
            mainThread.stop();
            // Even though stop is not considered safe sense we clear the state of the program
            // After stoping this thread no data should be corrupted
            mainThread = null;
            System.out.println("Main Thread killed");
        }
        // Reset App (clear for new test)
        resetApp();
        // Sets user defined directories, so changes to text boxes
        // at runtime do not affect variables
        setUserDirectories();
        // Setup file chooser
        JFileChooser chooser = new JFileChooser();
        // Setup filter to only allow .condor and .dag files
        FileChooserFilter filter = new FileChooserFilter();
        filter.addExtension("condor");
        filter.addExtension("dag");
        filter.addExtension("sav");
        filter.setDescription("Condor or DAGMAN File");
        // Remove all files option from file chooser
        chooser.removeChoosableFileFilter(chooser.getFileFilter());
        // Set condor/dag filter
        chooser.setFileFilter(filter);
        int returnVal = chooser.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            GlobalVar.setLoadedFile(chooser.getSelectedFile());
            // Add loaded file path to status list and blank separator
            statusListModel.addElement("Loaded File: " + GlobalVar.getLoadedFile().toString());
            // Create Status Line
            statusListModel.addElement("---------------------------------------");
            // Create Blank Line
            statusListModel.addElement("---------------------------------------");
            // Deal With Dagman File
            if (GlobalVar.getLoadedFile().toString().contains(".dag")) {
                System.out.println("Dagman File Loaded");
                GlobalVar.setDag(true);
                // Parse dagman
                GlobalVar.setJobParse(new DagmanParser(GlobalVar.getLoadedFile().toString()));
                GlobalVar.getDagParser().parse();
            // Add all nodes to status list
            // for (int i = 0; i < GlobalVar.getDagParser().getNodeList().size(); i++) {
            // statusListModel.addElement("Job: " + GlobalVar.getDagParser().getNodeList().get(i).getName());
            // Set id
            // GlobalVar.getDagParser().getNodeList().get(i).setStatusID(i + 3); // +3 because list starts with
            // loaded file and 2 blank
            // space
            // }
            // refreshStatusList();
            } else // Deal with condor file
            if (GlobalVar.getLoadedFile().toString().contains(".condor")) {
                System.out.println("Condor File Loaded");
                // Parse condor file
                CondorParser conParse = new CondorParser(GlobalVar.getLoadedFile().getAbsolutePath());
                ArrayList<ArrayList<Token>> conList = conParse.parse();
                GlobalVar.setDag(false);
                // Create Job list
                GlobalVar.setCondorJobs(new ArrayList<Node>());
                // Generate Nodes and add to condor Jobs
                for (int i = 0; i < conList.size(); i++) {
                    // File name generate in
                    Node tNode = new Node(GlobalVar.getLoadedFile().getName() + i, null);
                    // +3 because list starts with loaded file and 2 blank space
                    tNode.setStatusID(0, i + 3);
                    tNode.setConList(conList.get(i));
                    GlobalVar.getCondorJobs().add(tNode);
                    statusListModel.addElement("");
                }
            // refreshStatusList();
            } else if (GlobalVar.getLoadedFile().toString().contains(".sav")) {
                System.out.println("Loading App State");
                setRunning();
                appState tState = appState.loadState(GlobalVar.getLoadedFile().getAbsolutePath());
                GlobalVar.setState(tState);
                refreshStatusList();
                GlobalVar.setFreshRun(false);
                // Spawn main thread
                try {
                    // Set instance of main thread and start it
                    mainThread = new Thread(new MainClass());
                    mainThread.start();
                } catch (Exception err) {
                    System.out.println("File Open Failed");
                }
            }
        } else {
            System.out.println("Could not recognize input file");
            GlobalVar.setLoadedFile(null);
        }
    } else // Handle execute button
    if (e.getSource() == cmdGo) {
        if (GlobalVar.getLoadedFile() != null) {
            // Check if a file is loaded
            System.out.println("Execute Pressed");
            // Sets user defined directories, so changes to text boxes
            // at runtime do not affect variables
            setUserDirectories();
            try {
                // Set instance of main thread and start it
                mainThread = new Thread(new MainClass());
                mainThread.start();
            } catch (Exception err) {
                System.out.println("File Open Failed");
            }
            setRunning();
            // Update status info
            GlobalVar.setAppStatus("Executing");
        } else {
            JOptionPane.showMessageDialog(null, "No supported File Loaded");
        }
    } else if (e.getSource() == jMenuStop) {
        GlobalVar.setStopFlag(true);
        JOptionPane.showMessageDialog(null, "Stopping Program");
        // inform user that clean up is commencing
        jMenuStop.setEnabled(false);
        while (GlobalVar.getStopFlag()) {
            // Waits to reset app once clean-up method finishes
            try {
                // poll every 1.5 seconds
                Thread.sleep(1500);
            } catch (InterruptedException ec) {
                // TODO Auto-generated catch block
                ec.printStackTrace();
            }
        }
        // Kill main thread
        if (mainThread != null) {
            mainThread.stop();
            // Even though stop is not considered safe sense we clear the state of the program
            // After stoping this thread no data should be corrupted
            mainThread = null;
            System.out.println("Main Thread killed");
        }
        // Reset App (clear for new test)
        resetApp();
    } else if (e.getSource() == jMenuStopSave) {
        GlobalVar.setStopFlag(true);
        GlobalVar.setCleanRun(false);
        // Setup file chooser
        JFileChooser chooser = new JFileChooser();
        // Setup filter to only allow .condor and .dag files
        FileChooserFilter filter = new FileChooserFilter();
        filter.addExtension("sav");
        filter.setDescription("Save Program State");
        // Remove all files option from file chooser
        chooser.removeChoosableFileFilter(chooser.getFileFilter());
        // Set condor/dag filter
        chooser.setFileFilter(filter);
        int returnVal = chooser.showSaveDialog(null);
        File saveFile = null;
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            saveFile = chooser.getSelectedFile();
        }
        JOptionPane.showMessageDialog(null, "Stopping And Saving");
        // inform user that clean up is commencing
        jMenuStopSave.setEnabled(false);
        while (GlobalVar.getStopFlag()) {
            // Waits to reset app once clean-up method finishes
            try {
                // poll every 1.5 seconds
                Thread.sleep(1500);
            } catch (InterruptedException ec) {
                // TODO Auto-generated catch block
                ec.printStackTrace();
            }
        }
        // Save state
        appState currentState = new appState();
        currentState.setState();
        currentState.writeState(saveFile.getAbsolutePath());
        // Kill main thread
        if (mainThread != null) {
            mainThread.stop();
            // Even though stop is not considered safe sense we clear the state of the program
            // After stoping this thread no data should be corrupted
            mainThread = null;
            System.out.println("Main Thread killed");
        }
        // Reset App (clear for new test)
        resetApp();
    } else // Handle test button
    if (e.getSource() == cmdTest) {
        System.out.println("Compatibility Tester");
        // Sets user defined directories, so changes to text boxes
        // at runtime do not affect variables
        setUserDirectories();
        String report = "";
        if (GlobalVar.getLoadedFile() != null) {
            // Check if a file is loaded
            try {
                if (GlobalVar.isDag()) {
                    // Dagman file
                    report = "These tags are either not fully supported by the program, by JSDL, or the GenesisII Grid:\n" + CompatibilityChecker.testFile(GlobalVar.getLoadedFile(), GlobalVar.getDagParser().getNodeList());
                    JOptionPane.showMessageDialog(null, report, "Compatibility Report", JOptionPane.WARNING_MESSAGE);
                } else {
                    // Condor File
                    report = "These tags are either not fully supported by the program, by JSDL, or the GenesisII Grid:\n" + CompatibilityChecker.testFile(GlobalVar.getLoadedFile(), null);
                    JOptionPane.showMessageDialog(null, report, "Compatibility Report", JOptionPane.WARNING_MESSAGE);
                }
            } catch (FileNotFoundException e1) {
                // TODO Auto-generated catch block
                e1.printStackTrace();
            }
        } else {
            // Error no supported file loaded
            JOptionPane.showMessageDialog(null, "No supported File Loaded");
        }
    }
}
