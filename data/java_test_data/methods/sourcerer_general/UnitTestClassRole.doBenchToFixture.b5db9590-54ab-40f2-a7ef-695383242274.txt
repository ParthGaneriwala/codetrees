public void doBenchToFixture(PkgMgrFrame pmf, ClassTarget ct) {
    if (pmf.getObjectBench().getObjectCount() == 0)
        return;
    Editor ed = ct.getEditor();
    try {
        UnitTestAnalyzer uta = analyzeUnitTest(ct);
        // find all the fields declared in this unit test class
        List<SourceSpan> variables = uta.getFieldSpans();
        // if we already have fields, ask if we are sure we want to get rid of them
        if (variables != null && variables.size() > 0) {
            if (DialogManager.askQuestion(null, "unittest-fixture-present") == 1) {
                return;
            }
        }
        // numbers for the following ones
        if (variables != null) {
            // start iterating from the last element
            ListIterator<SourceSpan> it = variables.listIterator(variables.size());
            while (it.hasPrevious()) {
                SourceSpan variableSpan = (SourceSpan) it.previous();
                ed.setSelection(variableSpan.getStartLine(), variableSpan.getStartColumn(), variableSpan.getEndLine(), variableSpan.getEndColumn());
                ed.insertText("", false);
            }
            // to get correct locations for rewriting setUp(), we need to reparse
            // (TODO: intelligently keep track of changes to the editor and modify
            // line numbers accordingly - avoid this reparse)
            uta = analyzeUnitTest(ct);
        }
        // find a location to insert new methods
        SourceLocation fixtureInsertLocation = uta.getFixtureInsertLocation();
        // make it worse by trying to edit the source
        if (fixtureInsertLocation == null)
            return;
        // find the curly brackets for the setUp() method
        SourceSpan setupSpan = uta.getMethodBlockSpan("setUp");
        // rewrite the setUp() method of the unit test (if it exists)
        if (setupSpan != null) {
            ed.setSelection(setupSpan.getStartLine(), setupSpan.getStartColumn(), setupSpan.getEndLine(), setupSpan.getEndColumn());
        } else {
            // otherwise, we will be inserting a brand new setUp() method
            ed.setSelection(fixtureInsertLocation.getLine(), fixtureInsertLocation.getColumn(), 1);
            ed.insertText("{\n\tpublic void setUp()\n\t", false);
        }
        // insert the code for our setUp() method
        ed.insertText("{\n" + pmf.getObjectBench().getFixtureSetup() + "\t}", false);
        // insert our new fixture declarations
        ed.setSelection(fixtureInsertLocation.getLine(), fixtureInsertLocation.getColumn(), 1);
        ed.insertText("{\n" + pmf.getObjectBench().getFixtureDeclaration(), false);
        ed.save();
    } catch (IOException ioe) {
        PkgMgrFrame.showMessageWithText(pmf.getPackage(), "generic-file-save-error", ioe.getLocalizedMessage());
    }
    pmf.getPackage().compileQuiet(ct);
    pmf.getProject().removeClassLoader();
    pmf.getProject().newRemoteClassLoaderLeavingBreakpoints();
}
