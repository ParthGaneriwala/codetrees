public void register(ContainerBuilder builder, LocatableProperties props) {
    alias(ObjectFactory.class, StrutsConstants.STRUTS_OBJECTFACTORY, builder, props);
    alias(XWorkConverter.class, StrutsConstants.STRUTS_XWORKCONVERTER, builder, props);
    alias(TextProvider.class, StrutsConstants.STRUTS_XWORKTEXTPROVIDER, builder, props);
    alias(ActionProxyFactory.class, StrutsConstants.STRUTS_ACTIONPROXYFACTORY, builder, props);
    alias(ObjectTypeDeterminer.class, StrutsConstants.STRUTS_OBJECTTYPEDETERMINER, builder, props);
    alias(ActionMapper.class, StrutsConstants.STRUTS_MAPPER_CLASS, builder, props);
    alias(MultiPartRequest.class, StrutsConstants.STRUTS_MULTIPART_PARSER, builder, props, Scope.DEFAULT);
    alias(FreemarkerManager.class, StrutsConstants.STRUTS_FREEMARKER_MANAGER_CLASSNAME, builder, props);
    alias(VelocityManager.class, StrutsConstants.STRUTS_VELOCITY_MANAGER_CLASSNAME, builder, props);
    if ("true".equalsIgnoreCase(props.getProperty(StrutsConstants.STRUTS_DEVMODE))) {
        props.setProperty(StrutsConstants.STRUTS_I18N_RELOAD, "true");
        props.setProperty(StrutsConstants.STRUTS_CONFIGURATION_XML_RELOAD, "true");
        props.setProperty(StrutsConstants.STRUTS_FREEMARKER_TEMPLATES_CACHE, "false");
        // Convert struts properties into ones that xwork expects
        props.setProperty("devMode", "true");
    } else {
        props.setProperty("devMode", "false");
    }
    // TODO: This should be moved to XWork after 2.0.4
    // struts.custom.i18n.resources
    LocalizedTextUtil.addDefaultResourceBundle("org/apache/struts2/struts-messages");
    String bundles = props.getProperty(StrutsConstants.STRUTS_CUSTOM_I18N_RESOURCES);
    if (bundles != null && bundles.length() > 0) {
        StringTokenizer customBundles = new StringTokenizer(props.getProperty(StrutsConstants.STRUTS_CUSTOM_I18N_RESOURCES), ", ");
        while (customBundles.hasMoreTokens()) {
            String name = customBundles.nextToken();
            try {
                LOG.info("Loading global messages from " + name);
                LocalizedTextUtil.addDefaultResourceBundle(name);
            } catch (Exception e) {
                LOG.error("Could not find messages file " + name + ".properties. Skipping");
            }
        }
    }
}
