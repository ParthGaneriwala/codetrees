public ActionForward apaga(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
    ActionMessages mens = new ActionMessages();
    List<String> parametersMessage = new ArrayList<String>();
    try {
        Long idUsuario = (Long) ((LazyValidatorForm) form).get(PROPRIEDADE_ID_USUARIO);
        Usuario usuario = (Usuario) ((LazyValidatorForm) form).get(PROPRIEDADE_USUARIO);
        usuario.setId(idUsuario);
        usuario = (Usuario) this.getUsuarioService().pesquisa(usuario);
        ((LazyValidatorForm) form).set(PROPRIEDADE_USUARIO, usuario);
        ((LazyValidatorForm) form).set(PROPRIEDADE_ID_USUARIO, usuario.getId());
        String[] listaRemove = (String[]) ((LazyValidatorForm) form).get(Constantes.PROPRIEDADE_LISTA_ENTITY_REMOVE);
        Long[] ids = new Long[listaRemove.length];
        for (int i = 0; i < listaRemove.length; i++) {
            String string = listaRemove[i];
            ids[i] = Long.valueOf(string.trim());
        }
        this.getUsuarioService().removeGrupos(usuario, ids);
        parametersMessage.clear();
        parametersMessage.add("apagado");
        mens.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("mensagem.crud.sucesso", parametersMessage.toArray()));
        request.setAttribute(Constantes.MENSAGEM_SUCESSO, mens);
    } catch (EntityExistsServiceException ex) {
        mens.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("erro.EntityExistsServiceException.Delete"));
        request.setAttribute(Constantes.MENSAGEM_ERRO, mens);
    } catch (ServiceException ex) {
        Logger.getLogger(UsuarioGrupoAction.class.getName()).log(Level.SEVERE, null, ex);
        parametersMessage.clear();
        parametersMessage.add(ex.getMessage());
        mens.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("erro.fatal", parametersMessage.toArray()));
        request.setAttribute(Constantes.MENSAGEM_ERRO, mens);
    }
    return mapping.findForward(Constantes.FORWARD_SUCESSO);
}
