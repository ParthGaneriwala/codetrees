public static RotateResult rotate(Image img, double angle) {
    // Transfer image to a buffered image which we can manipulate
    int w = img.getWidth(null);
    int h = img.getHeight(null);
    BufferedImage bimg = new BufferedImage(w, h, BufferedImage.TYPE_INT_ARGB);
    Graphics g = bimg.getGraphics();
    g.drawImage(img, 0, 0, null);
    // Compute the size of the destination image
    // See http://stackoverflow.com/questions/2352804/how-do-i-prevent-clipping-when-rotating-an-image-in-c
    double theta = Math.toRadians(angle);
    double cos = Math.abs(Math.cos(theta));
    double sin = Math.abs(Math.sin(theta));
    int W = (int) (w * cos + h * sin + 0.5);
    int H = (int) (w * sin + h * cos + 0.5);
    BufferedImage dimg = dimg = new BufferedImage(W, H, bimg.getType());
    // Rotate the destination buffer where we'll draw the image
    Graphics2D g2d = dimg.createGraphics();
    g2d.rotate(theta, W / 2, H / 2);
    // Compute the origin inside the destination image where we will draw
    // the rotated image. See above reference
    int ox = (int) (W - w) / 2;
    int oy = (int) (H - h) / 2;
    // Draw the image in it's rotated / translated form
    g2d.translate(ox, oy);
    g2d.drawImage(bimg, null, 0, 0);
    // Get the affine transform parameters
    AffineTransform at = g2d.getTransform();
    double[] matrix = new double[6];
    at.getMatrix(matrix);
    // Return the result
    return new RotateResult(dimg, matrix);
}
