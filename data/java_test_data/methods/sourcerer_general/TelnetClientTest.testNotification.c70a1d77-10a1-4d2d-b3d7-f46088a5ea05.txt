public void testNotification() throws Exception {
    byte[] buffread1 = new byte[6];
    byte[] send1 = { (byte) TelnetCommand.IAC, (byte) TelnetCommand.DO, (byte) 15, (byte) TelnetCommand.IAC, (byte) TelnetCommand.WILL, (byte) 15 };
    byte[] buffread2 = new byte[9];
    byte[] send2 = { (byte) TelnetCommand.IAC, (byte) TelnetCommand.DO, (byte) TelnetOption.TERMINAL_TYPE, (byte) TelnetCommand.IAC, (byte) TelnetCommand.DONT, (byte) TelnetOption.ECHO, (byte) TelnetCommand.IAC, (byte) TelnetCommand.DO, (byte) TelnetOption.SUPPRESS_GO_AHEAD, (byte) TelnetCommand.IAC, (byte) TelnetCommand.WONT, (byte) TelnetOption.SUPPRESS_GO_AHEAD };
    byte[] buffread2b = new byte[11];
    numdo = 0;
    numdont = 0;
    numwill = 0;
    numwont = 0;
    OPTIONS.client.registerNotifHandler(this);
    InputStream is1 = STANDARD.server.getInputStream();
    OutputStream os1 = STANDARD.server.getOutputStream();
    is1.skip(is1.available());
    os1.write(send1);
    os1.flush();
    Thread.sleep(500);
    if (is1.available() > 0) {
        is1.read(buffread1);
    }
    InputStream is2 = OPTIONS.server.getInputStream();
    OutputStream os2 = OPTIONS.server.getOutputStream();
    Thread.sleep(500);
    is2.skip(is2.available());
    os2.write(send2);
    os2.flush();
    Thread.sleep(500);
    if (is2.available() > 0) {
        is2.read(buffread2);
        Thread.sleep(1000);
        if (is2.available() > 0) {
            is2.read(buffread2b);
        }
    }
    assertTrue(numdo == 2);
    assertTrue(numdont == 1);
    assertTrue(numwont == 1);
    assertTrue(numwill == 0);
}
