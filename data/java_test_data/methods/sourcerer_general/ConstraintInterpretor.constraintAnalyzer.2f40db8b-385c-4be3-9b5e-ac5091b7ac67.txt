public void constraintAnalyzer(ComponentInstance c, Document_Root DR, FenetreGUI FG) {
    for (int n = 0; n < c.getInterface().size(); n++) {
        List<Services> ls = c.getInterface().get(n).getService();
        // System.out.println("nb de services dans cette interface : " + ls.size());
        for (int s = 0; s < ls.size(); s++) {
            if (ls.get(s).getKind() == ServiceKind.CONSTRAINT_CHECK) {
                // contrainte
                BodyType constraintB = ls.get(s).getBody();
                // determination du contexte
                ComponentInstance compBody = getComponentInstanceWithConstraint(constraintB, DR);
                if (compBody.equals("null") || compBody.equals("")) {
                    JLabel JError = new JLabel("Le corps de la contrainte est vide !");
                    JError.setForeground(Color.red);
                    FG.contentError.add(JError);
                    return;
                }
                ComponentInstance CompDest = getListComponentInstanceLinkWithComp(compBody, DR);
                System.out.println("composant destination : " + CompDest);
                // contexte de la contrainte
                ComponentInstance CompContext = CompDest;
                // traitement des contraintes sans argument
                if (ls.get(s).getArg() == null || ls.get(s).getArg().size() == 0) {
                    this.cstFound = true;
                    System.out.println("contrainte sans argument");
                    System.out.println("requete : " + constraintB.getValue());
                    Object resultat = null;
                    try {
                        org.eclipse.emf.ocl.query.Query qocl = QueryFactory.eINSTANCE.createQuery(constraintB.getValue(), CompContext.eClass());
                        resultat = qocl.evaluate(CompContext);
                    } catch (java.lang.IllegalArgumentException e) {
                        JLabel JError = new JLabel("Erreur : " + e.getMessage() + " pour le service '" + ls.get(s).getName() + "' du composant '" + c.getName() + "'");
                        JError.setForeground(Color.red);
                        FG.contentError.add(JError);
                        return;
                    }
                    FG.content.add(new JLabel("''" + constraintB.getValue() + "''"));
                    FG.contentArg.add(new JLabel("aucun"));
                    JLabel JRes = new JLabel(resultat.toString());
                    if (resultat.toString().equals("true")) {
                        JRes.setForeground(Color.green);
                    } else if (resultat.toString().equals("false")) {
                        JRes.setForeground(Color.red);
                    }
                    FG.contentRes.add(JRes);
                    FG.contentW.add(Box.createVerticalStrut(20));
                    System.out.println("resultat : " + resultat);
                } else {
                    this.cstFound = true;
                    // traitement des contraintes avec arguments
                    // liste des arguments
                    List<Arg> listArg = ls.get(s).getArg();
                    if (allArgumentsPresents(constraintB.getValue(), listArg)) {
                        String listParam = null;
                        listParam = getListParamWithService(ls.get(s), DR);
                        if (listParam.equals("") || listParam.equals("null")) {
                            JLabel JError = new JLabel("La liste des valeurs pour les parametres est vide !");
                            JError.setForeground(Color.red);
                            FG.contentError.add(JError);
                            return;
                        }
                        /*if(listParam != null){
							System.out.println("les arguments :" + listArg + " ont pour valeurs : " + listParam);
						}*/
                        // valeurs des arguments
                        StringTokenizer listParamST = new StringTokenizer(listParam, " ");
                        ArrayList<String> listP = new ArrayList<String>();
                        listP = transformST(listParamST);
                        // requete
                        String requeteOriginale = constraintB.getValue();
                        if (listP.size() != listArg.size()) {
                            // System.out.println("Arg !=");
                            JLabel JError = new JLabel("Le nombre d'arguments et de valeurs d'argument est différent!");
                            JError.setForeground(Color.red);
                            FG.contentError.add(JError);
                            return;
                        }
                        String requeteResultante = getListArgQ(listArg, listP, requeteOriginale, DR, FG);
                        String correspondanceAV = correspondanceArgValue(listArg, listP);
                        System.out.println("requete modif : " + requeteResultante);
                        // requeteModif = "ComponentInstance.allInstances()";
                        // System.out.println("listArgQ : " + listArgQ);
                        // System.out.println("eclassifier : " + listArgQ.get(0).getClass().toString());
                        System.out.println("contexte : " + CompContext);
                        org.eclipse.emf.ocl.query.Query qocl = null;
                        Object resultat = null;
                        try {
                            qocl = QueryFactory.eINSTANCE.createQuery(requeteResultante, CompContext.eClass());
                            resultat = qocl.evaluate(CompContext);
                        } catch (java.lang.IllegalArgumentException e) {
                            JLabel JError = new JLabel("Erreur : " + e.getMessage() + " pour le service '" + ls.get(s).getName() + "' du composant '" + c.getName() + "'");
                            JError.setForeground(Color.red);
                            FG.contentError.add(JError);
                            return;
                        }
                        /*catch(java.lang.IllegalArgumentException e){
							
						}*/
                        FG.content.add(new JLabel("''" + constraintB.getValue() + "''"));
                        FG.contentArg.add(new JLabel("[" + correspondanceAV + "]"));
                        JLabel JRes = new JLabel(resultat.toString());
                        if (resultat.toString().equals("true")) {
                            JRes.setForeground(Color.green);
                        } else if (resultat.toString().equals("false")) {
                            JRes.setForeground(Color.red);
                        } else {
                            JRes = new JLabel("Non booleen");
                            JRes.setForeground(Color.red);
                        }
                        FG.contentRes.add(JRes);
                        FG.contentW.add(Box.createVerticalStrut(20));
                        System.out.println("resultat : " + resultat);
                    } else {
                        FG.content.add(new JLabel("Les arguments du modèle ne correspondent pas à ceux de la contrainte !"));
                        System.out.println("Les arguments du modèle ne correspondent pas à ceux de la contrainte !");
                    }
                }
            }
        }
    }
}
