// $ANTLR start "expression1"
public final CompiladoresParser.expression1_return expression1() throws RecognitionException {
    CompiladoresParser.expression1_return retval = new CompiladoresParser.expression1_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token AND119 = null;
    CompiladoresParser.expression2_return expression2118 = null;
    CompiladoresParser.expression2_return expression2120 = null;
    CommonTree AND119_tree = null;
    try {
        dbg.enterRule(getGrammarFileName(), "expression1");
        if (getRuleLevel() == 0) {
            dbg.commence();
        }
        incRuleLevel();
        dbg.location(166, 1);
        try {
            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:166:15: ( expression2 ( AND expression2 )* )
            dbg.enterAlt(1);
            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:166:17: expression2 ( AND expression2 )*
            {
                root_0 = (CommonTree) adaptor.nil();
                dbg.location(166, 17);
                pushFollow(FOLLOW_expression2_in_expression11343);
                expression2118 = expression2();
                state._fsp--;
                adaptor.addChild(root_0, expression2118.getTree());
                dbg.location(166, 29);
                // /home/CIN/fmm/Desktop/grammar/Compiladores.g:166:29: ( AND expression2 )*
                try {
                    dbg.enterSubRule(28);
                    loop28: do {
                        int alt28 = 2;
                        try {
                            dbg.enterDecision(28);
                            int LA28_0 = input.LA(1);
                            if ((LA28_0 == AND)) {
                                alt28 = 1;
                            }
                        } finally {
                            dbg.exitDecision(28);
                        }
                        switch(alt28) {
                            case 1:
                                dbg.enterAlt(1);
                                // /home/CIN/fmm/Desktop/grammar/Compiladores.g:166:30: AND expression2
                                {
                                    dbg.location(166, 33);
                                    AND119 = (Token) match(input, AND, FOLLOW_AND_in_expression11346);
                                    AND119_tree = (CommonTree) adaptor.create(AND119);
                                    root_0 = (CommonTree) adaptor.becomeRoot(AND119_tree, root_0);
                                    dbg.location(166, 35);
                                    pushFollow(FOLLOW_expression2_in_expression11349);
                                    expression2120 = expression2();
                                    state._fsp--;
                                    adaptor.addChild(root_0, expression2120.getTree());
                                }
                                break;
                            default:
                                break loop28;
                        }
                    } while (true);
                } finally {
                    dbg.exitSubRule(28);
                }
            }
            retval.stop = input.LT(-1);
            retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
        }
        dbg.location(166, 48);
    } finally {
        dbg.exitRule(getGrammarFileName(), "expression1");
        decRuleLevel();
        if (getRuleLevel() == 0) {
            dbg.terminate();
        }
    }
    return retval;
}
