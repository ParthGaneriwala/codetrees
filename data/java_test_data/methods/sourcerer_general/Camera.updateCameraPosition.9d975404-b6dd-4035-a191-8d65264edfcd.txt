private void updateCameraPosition(World world, float smooth, float additionalDistance, boolean reverse) {
    if (targetModel != null) {
        float turnAngle = 0f;
        if (reverse) {
            turnAngle = 180f;
        }
        if (cameraMode == FOLLOW) {
            float distanceX = (targetModel.getPositionX() - positionX);
            float distanceZ = (targetModel.getPositionZ() - positionZ);
            float atan = 0f;
            float targetRotationY = 0f;
            if (distanceZ != 0) {
                atan = distanceX / distanceZ;
            } else {
                atan = Float.MAX_VALUE;
            }
            targetRotationY = (float) Math.toDegrees(Math.atan(atan));
            if (distanceZ >= 0) {
                targetRotationY += 180;
            }
            setRotation(0f, targetRotationY, 0f);
            distance = (float) Math.sqrt((distanceX * distanceX) + (distanceZ * distanceZ));
            cameraSpeed = (distance - cameraDistance) / 10f;
            positionX -= (float) Math.sin(Math.toRadians(rotationY)) * cameraSpeed;
            positionZ -= (float) Math.cos(Math.toRadians(rotationY)) * cameraSpeed;
            positionY = targetModel.getPositionY() + cameraHeight;
            setPosition(positionX, positionY, positionZ);
        }
        if (cameraMode == THIRD_PERSON) {
            float targetPositionX = targetModel.getPositionX();
            float targetPositionZ = targetModel.getPositionZ();
            boolean correction = true;
            while (correction) {
                correction = false;
                if (targetModel.getRotationY() + turnAngle > rotationY && targetModel.getRotationY() + turnAngle > rotationY + 180) {
                    rotationY += 360;
                    correction = true;
                }
                if (targetModel.getRotationY() + turnAngle < rotationY && targetModel.getRotationY() + turnAngle < rotationY - 180) {
                    rotationY -= 360;
                    correction = true;
                }
            }
            distance = (float) Math.sqrt(((targetModel.getPositionX() - positionX) * (targetModel.getPositionX() - positionX)) + ((targetModel.getPositionZ() - positionZ) * (targetModel.getPositionZ() - positionZ)));
            targetPositionX += (float) Math.sin(Math.toRadians(rotationY)) * (cameraDistance + additionalDistance);
            targetPositionZ += (float) Math.cos(Math.toRadians(rotationY)) * (cameraDistance + additionalDistance);
            float targetPositionY = targetModel.getPositionY() + cameraHeight;
            if (world != null && world.getActiveTerrain(positionX, positionZ) != null) {
                targetPositionY = world.getActiveTerrain(positionX, positionZ).getPositionY(positionX, positionZ) + cameraHeight;
            }
            setPosition(targetPositionX, (getPositionY() * smooth + targetPositionY) / (smooth + 1), targetPositionZ);
            float targetRotationX = (float) Math.cos(Math.toRadians(getRotationY())) * (float) Math.toDegrees(Math.atan((getPositionY() - targetModel.getPositionY() - centerAboveTarget) / (cameraDistance + additionalDistance))) * -1;
            float targetRotationZ = (float) Math.sin(Math.toRadians(getRotationY())) * (float) Math.toDegrees(Math.atan((getPositionY() - targetModel.getPositionY() - centerAboveTarget) / (cameraDistance + additionalDistance)));
            setRotation(targetRotationX, (getRotationY() * smooth + targetModel.getRotationY() + turnAngle) / (smooth + 1), targetRotationZ);
        }
        if (cameraMode == FIRST_PERSON) {
            float targetRotationX = targetModel.getRotationX();
            float targetRotationZ = targetModel.getRotationZ();
            while (targetRotationX > 180) {
                targetRotationX -= 360;
            }
            while (targetRotationZ > 180) {
                targetRotationZ -= 360;
            }
            setRotation((getRotationX() * smooth + targetRotationX) / (smooth + 1), targetModel.getRotationY(), (getRotationZ() * smooth + targetRotationZ) / (smooth + 1));
            positionX = targetModel.getPositionX();
            positionZ = targetModel.getPositionZ();
            positionY = targetModel.getPositionY() + higherThanTargetModel;
            setPosition(positionX, positionY, positionZ);
        }
        if (cameraMode == STATIC) {
            distance = (float) Math.sqrt(((targetModel.getPositionX() - positionX) * (targetModel.getPositionX() - positionX)) + ((targetModel.getPositionZ() - positionZ) * (targetModel.getPositionZ() - positionZ)));
            float targetRotationX = (float) Math.cos(Math.toRadians(getRotationY())) * (float) Math.toDegrees(Math.atan((getPositionY() - targetModel.getPositionY()) / (distance))) * -1;
            float targetRotationZ = (float) Math.sin(Math.toRadians(getRotationY())) * (float) Math.toDegrees(Math.atan((getPositionY() - targetModel.getPositionY()) / (distance)));
            if (targetModel.getPositionZ() - getPositionZ() != 0f) {
                if (targetModel.getPositionZ() >= positionZ) {
                    setRotation(targetRotationX, (float) Math.toDegrees(Math.atan((((targetModel.getPositionX() - getPositionX())) / ((targetModel.getPositionZ() - getPositionZ()))))) + 180, targetRotationZ);
                } else {
                    setRotation(targetRotationX, (float) Math.toDegrees(Math.atan((((targetModel.getPositionX() - getPositionX())) / ((targetModel.getPositionZ() - getPositionZ()))))), targetRotationZ);
                }
            }
            setPosition(positionX, positionY, positionZ);
        }
    }
}
