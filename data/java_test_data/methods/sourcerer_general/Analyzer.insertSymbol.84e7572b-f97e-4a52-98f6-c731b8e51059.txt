private void insertSymbol(SynNode node, boolean insert) {
    while (node != null) {
        SymTable previousTable = null;
        if (node instanceof VarDeclNode && insert) {
            VarDeclNode temp = (VarDeclNode) node;
            if (Tables.lookupVarSymbol(temp.getName(), false, this.tables) == null) {
                TypeNode type = (TypeNode) temp.getChild(VarDeclNode.TYPE);
                Integer value;
                if (temp.getChildCount() == 2) {
                    NumNode num = (NumNode) temp.getChild(VarDeclNode.SIZE);
                    value = (Integer) num.getValue();
                } else
                    value = new Integer(1);
                if (type.getType() != Type.VOID)
                    if (value.intValue() > 0)
                        this.currentTable.addSymbol(new Symbol(temp));
                    else
                        this.putError(temp.getLineNo(), "'" + value.intValue() + "' no es una longitud " + "valida para " + "arreglos, variable: '" + temp.getName() + "'");
                else
                    this.putError(temp.getLineNo(), "'vacio' no es un tipo valido para variables: '" + temp.getName() + "'");
            } else
                this.putError(temp.getLineNo(), "Duplicado de variable '" + temp.getName() + "'");
        } else if (node instanceof ParamNode && insert) {
            ParamNode temp = (ParamNode) node;
            if (Tables.lookupVarSymbol(temp.getName(), false, this.tables) == null) {
                TypeNode type = (TypeNode) temp.getChild(ParamNode.TYPE);
                if (type.getType() != Type.VOID)
                    this.currentTable.addSymbol(new Symbol(temp));
                else
                    this.putError(temp.getLineNo(), "'vacio' no es un tipo valido para parametros: '" + temp.getName() + "'");
            } else
                this.putError(temp.getLineNo(), "Duplicado de parametro '" + temp.getName() + "'");
        } else if (node instanceof FuncDeclNode) {
            FuncDeclNode temp = (FuncDeclNode) node;
            FuncSymbol fs = new FuncSymbol(temp);
            if (Tables.lookupFuncSymbol(fs.getName(), this.tables) == null) {
                previousTable = this.currentTable;
                this.currentTable.addSymbol(fs);
                SymTable func = new SymTable(this.currentTable.getName() + "." + fs.getName(), FUNC_SCOPE);
                this.tables.add(func);
                this.currentTable = func;
                insert = true;
            } else {
                this.putError(temp.getLineNo(), "Duplicado de funcion '" + fs.getName() + "'");
                insert = false;
            }
        } else if (node instanceof IfNode) {
            previousTable = this.currentTable;
            SymTable stmt = new SymTable(this.currentTable.getName() + ".if", this.currentTable.getScopeLevel() + 1);
            this.tables.add(stmt);
            this.currentTable = stmt;
        } else if (node instanceof ElseNode) {
            previousTable = this.currentTable;
            SymTable stmt = new SymTable(this.currentTable.getName() + ".else", this.currentTable.getScopeLevel() + 1);
            this.tables.add(stmt);
            this.currentTable = stmt;
        } else if (node instanceof ForNode) {
            previousTable = this.currentTable;
            SymTable stmt = new SymTable(this.currentTable.getName() + ".for", this.currentTable.getScopeLevel() + 1);
            this.tables.add(stmt);
            this.currentTable = stmt;
        } else if (node instanceof WhileNode) {
            previousTable = this.currentTable;
            SymTable stmt = new SymTable(this.currentTable.getName() + ".while", this.currentTable.getScopeLevel() + 1);
            this.tables.add(stmt);
            this.currentTable = stmt;
        }
        for (int i = 0; i < node.getChildCount(); i++) this.insertSymbol(node.getChild(i), insert);
        if (previousTable != null) {
            this.currentTable.setActive(false);
            this.currentTable = previousTable;
        }
        node = node.getSibling();
    }
}
