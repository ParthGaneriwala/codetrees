public void nextClicked() {
    // check if we are using ms_lims
    if (iParent.getUseMs_lims()) {
        // we are using ms_lims
        if (iProject == null) {
            iFeasableToProceed = false;
            iNotFeasableReason = "No project was selected";
            return;
        } else {
            iFeasableToProceed = true;
            iNotFeasableReason = null;
        }
        iParent.addSelectedProject(iProject);
        iParent.addFiles(null);
    } else {
        iParent.addSelectedProject(null);
        // we are using files
        Vector<File> lSelectedFiles = new Vector<File>();
        // for the moment we may proceed
        iFeasableToProceed = true;
        iNotFeasableReason = null;
        // check the files if the RoverSource is ITRAQ_ROV because we must have for every .mgf file the corresponding .rov file
        if (RoverSource.ITRAQ_ROV == iRoverSource) {
            Vector<File> lMgfFiles = new Vector<File>();
            Vector<File> lRovFiles = new Vector<File>();
            for (int i = 0; i < iFiles.size(); i++) {
                if (iFiles.get(i).getAbsolutePath().endsWith(".mgf")) {
                    lMgfFiles.add(iFiles.get(i));
                } else if (iFiles.get(i).getAbsolutePath().endsWith(".rov")) {
                    lRovFiles.add(iFiles.get(i));
                }
            }
            // check if you have a .rov file for every mgf file
            for (int i = 0; i < lMgfFiles.size(); i++) {
                boolean lRovFound = false;
                String lMgfFileName = lMgfFiles.get(i).getName().substring(0, lMgfFiles.get(i).getName().indexOf("."));
                for (int j = 0; j < lRovFiles.size(); j++) {
                    String lRovFileName = lRovFiles.get(j).getName().substring(0, lRovFiles.get(j).getName().indexOf("."));
                    if (lRovFileName.indexOf(lMgfFileName) > -1) {
                        lRovFound = true;
                        // add the .rov file
                        lSelectedFiles.add(lRovFiles.get(j));
                        // add the .mgf file
                        lSelectedFiles.add(lMgfFiles.get(i));
                        j = lRovFiles.size();
                    }
                }
                if (!lRovFound) {
                    // no rov file was found for this mgf file
                    iFeasableToProceed = false;
                    if (iNotFeasableReason == null) {
                        iNotFeasableReason = "Could not find the corresponding .rov file for the mgf file '" + lMgfFileName + "'.";
                    } else {
                        iNotFeasableReason = iNotFeasableReason + "\nCould not find the corresponding .rov file for the mgf file '" + lMgfFileName + "'.";
                    }
                }
            }
            if (!iFeasableToProceed) {
                return;
            }
        } else {
            lSelectedFiles = iFiles;
        }
        // check if some files were selected
        if (lSelectedFiles.size() == 0) {
            // no files were selected
            iFeasableToProceed = false;
            if (RoverSource.ITRAQ_ROV == iRoverSource) {
                iNotFeasableReason = "No correct (.mgf and .rov) files were selected.";
            } else if (RoverSource.MS_QUANT == iRoverSource) {
                iNotFeasableReason = "No correct (.txt) files were selected.";
            } else if (RoverSource.MAX_QUANT == iRoverSource) {
                iNotFeasableReason = "No correct (.txt) files were selected.";
            } else if (RoverSource.CENSUS == iRoverSource) {
                iNotFeasableReason = "No correct .txt and .xml file were selected.";
            } else if (RoverSource.THERMO_MSF_FILES == iRoverSource) {
                iNotFeasableReason = "No correct .msf files were selected.";
            } else {
                iNotFeasableReason = "No correct (.rov) files were selected.";
            }
            return;
        }
        // if it's maxquant we must find a evidence and a msms file
        if (RoverSource.MAX_QUANT == iRoverSource) {
            boolean lEvidenceFound = false;
            boolean lMsMsFound = false;
            for (int i = 0; i < lSelectedFiles.size(); i++) {
                if (lSelectedFiles.get(i).getName().startsWith("evidence")) {
                    lEvidenceFound = true;
                }
                if (lSelectedFiles.get(i).getName().equalsIgnoreCase("msms.txt")) {
                    lMsMsFound = true;
                }
            }
            if (!lEvidenceFound && !lMsMsFound) {
                iFeasableToProceed = false;
                iNotFeasableReason = "The evidence.txt or the msms.txt file could not be found";
                return;
            }
        }
        // if it's census we must find a .txt and a .xml file
        if (RoverSource.CENSUS == iRoverSource) {
            boolean lXmlFound = false;
            boolean lTxtFound = false;
            for (int i = 0; i < lSelectedFiles.size(); i++) {
                if (lSelectedFiles.get(i).getName().endsWith(".xml")) {
                    lXmlFound = true;
                }
                if (lSelectedFiles.get(i).getName().endsWith(".txt")) {
                    lTxtFound = true;
                }
            }
            if (!lTxtFound && !lXmlFound) {
                iFeasableToProceed = false;
                iNotFeasableReason = "No .xml AND .txt file could be found";
                return;
            }
        }
        if (lSelectedFiles.size() != 2 && RoverSource.MAX_QUANT == iRoverSource || RoverSource.CENSUS == iRoverSource) {
            iFeasableToProceed = false;
            iNotFeasableReason = "You have to select two files!";
            return;
        }
        // set the files to the parent
        iParent.addFiles((Vector<File>) lSelectedFiles.clone());
        iFeasableToProceed = true;
        iNotFeasableReason = null;
    }
}
