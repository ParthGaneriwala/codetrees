void reopen() throws HsqlException {
    boolean isNew;
    setState(DATABASE_OPENING);
    try {
        databaseProperties = new HsqlDatabaseProperties(this);
        isNew = !DatabaseURL.isFileBasedDatabaseType(sType) || !databaseProperties.checkFileExists();
        if (isNew && urlProperties.isPropertyTrue("ifexists")) {
            throw Trace.error(Trace.DATABASE_NOT_EXISTS, sName);
        }
        databaseProperties.load();
        databaseProperties.setURLProperties(urlProperties);
        compiledStatementManager.reset();
        nameManager = new HsqlNameManager();
        granteeManager = new GranteeManager(this);
        userManager = new UserManager(this);
        hAlias = Library.getAliasMap();
        schemaManager = new SchemaManager(this);
        bReferentialIntegrity = true;
        sessionManager = new SessionManager(this);
        txManager = new TransactionManager(this);
        collation = new Collation();
        dbInfo = DatabaseInformation.newDatabaseInformation(this);
        databaseProperties.setDatabaseVariables();
        if (DatabaseURL.isFileBasedDatabaseType(sType)) {
            logger.openLog(this);
        }
        if (isNew) {
            sessionManager.getSysSession().sqlExecuteDirectNoPreChecks("CREATE USER SA PASSWORD \"\" ADMIN");
            logger.synchLogForce();
        }
        dbInfo.setWithContent(true);
    } catch (Throwable e) {
        logger.closeLog(Database.CLOSEMODE_IMMEDIATELY);
        logger.releaseLock();
        setState(DATABASE_SHUTDOWN);
        clearStructures();
        DatabaseManager.removeDatabase(this);
        if (!(e instanceof HsqlException)) {
            e = Trace.error(Trace.GENERAL_ERROR, e.toString());
        }
        throw (HsqlException) e;
    }
    setState(DATABASE_ONLINE);
}
