public boolean postMeData(long uId, int geoId, String type, String fName, int timesToTry) {
    // see if someone wants us to stop:
    if (stopSendingData) {
        return false;
    }
    int result = -1;
    try {
        URL url = new URL(URL_D);
        HttpsURLConnection conn = (HttpsURLConnection) url.openConnection();
        conn.setRequestMethod("POST");
        conn.setDoOutput(true);
        conn.setSSLSocketFactory(promiscuouSockets);
        conn.connect();
        try {
            OutputStream out = conn.getOutputStream();
            DataOutputStream outWriter = new DataOutputStream(out);
            outWriter.writeUTF("" + uId);
            outWriter.writeUTF("" + geoId);
            outWriter.writeUTF(type);
            final BufferedInputStream buf = new BufferedInputStream(new FileInputStream(new File(fName)));
            byte[] buffer = new byte[1000];
            for (int i = buf.read(buffer); i >= 0; i = buf.read(buffer)) {
                outWriter.write(buffer, 0, i);
            }
            // outWriter.write(data);
            outWriter.close();
            out.close();
            result = conn.getResponseCode();
        } finally {
            conn.disconnect();
        }
    } catch (MalformedURLException ex) {
        CSLog.e(TAG, ex.toString());
        result = -1;
    } catch (IOException ex) {
        CSLog.e(TAG, ex.toString());
        result = -2;
    } catch (Exception e) {
        CSLog.e(TAG, e.toString());
        result = -3;
    }
    // we know that the server sends us a HttpServletResponse.SC_CREATED (201) if things go well
    if (result != 201) {
        // see if we have any times left to try:
        if (timesToTry > 0) {
            publishProgress("retrying...");
            return postMeData(uId, geoId, type, fName, --timesToTry);
        } else {
            return false;
        }
    } else {
        return true;
    }
}
