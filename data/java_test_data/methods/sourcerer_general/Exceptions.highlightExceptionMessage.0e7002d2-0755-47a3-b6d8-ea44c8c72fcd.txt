// ----------------------------------------------------------
public static String highlightExceptionMessage(Throwable exception) {
    String message = escapeHtml(exception.getMessage());
    // System.out.println("highlighting:" + message);
    if (exception instanceof bsh.EvalError) {
        Matcher m = BAD_AT_EXPRESSION.matcher(message);
        if (m.find()) {
            String expr = m.group(1);
            String attrMessage = "Error evaluating attribute expression: " + "<span style=\"color:red;font-weight:bold\"><code>@{" + expr + "}</code></span>\n";
            String details = message.substring(m.end());
            // For token parsing errors
            m = TOKEN_PARSING_MSG.matcher(details);
            if (m.find()) {
                details = "Parsing error " + m.group(1).toLowerCase() + details.substring(m.end());
            }
            m = LINE_AND_COLUMN_INFO.matcher(details);
            details = m.replaceFirst("");
            if (details.startsWith(" : Void assignment")) {
                if (expr.indexOf(')') >= 0) {
                    details = "A <code>void</code> method was called " + "where a value was expected.";
                } else {
                    details = "Unrecognized variable name \"<b>" + expr + "</b>\"";
                }
            }
            message = attrMessage + details;
        }
        m = VARIABLE_VALUE.matcher(message);
        if (m.find()) {
            message = message.substring(0, m.start(1)) + "<span style=\"color:red;font-weight:bold\"><code>" + m.group(1) + "</code></span>" + message.substring(m.end(1), m.start(2)) + "<b><code>" + m.group(2) + "</code></b>" + message.substring(m.end(2));
        }
        m = METHOD_INVOCATION_MSG.matcher(message);
        System.out.println("checking " + message);
        if (m.find()) {
            System.out.println("found!");
            message = message.substring(0, m.start()) + message.substring(m.start() + 2, m.start(1)) + "<span style=\"color:red;font-weight:bold\"><code>" + m.group(1) + "</code></span>" + message.substring(m.end(1), m.start(2)) + "<b><code>" + m.group(2) + "</code></b>" + message.substring(m.end(2));
        }
        // System.out.println(" after first step:" + message);
        // message = message.replaceAll("((^| : )([^:]+)):", "$2<b>$3</b>:");
        // message = message.replaceAll(" :\\s+", "<br/>\n");
        // message = message.replaceAll("\n\\s*:\\s+", "\n");
        // message = message.replaceAll("[ \t]", "&nbsp;");
        // message = LINE_AND_COLUMN_INFO.matcher(message).replaceAll(
        // "<span style=\"color:red\">$1</span>");
        message = message.replaceAll("\n", "<br/>\n");
        message = message.replaceAll("(\\sclass)(&#039;)", "$1 $2");
    // message = message.replaceAll("<span-style=", "<span style=");
    } else if (exception instanceof org.xml.sax.SAXParseException) {
        String quote = escapeHtml("\"");
        message = message.replaceAll("([Ee]lement\\s+(type\\s+)?" + quote + "[^\\s]*" + quote + ")", "<b>$1</b>");
        message = message.replaceAll("((matching\\s+)?end-tag\\s+" + quote + "[^\\s]*" + quote + ")", "<b>$1</b>");
        message = message.replaceAll("\\s*This\\s+error\\s+is\\s+called\\s+a\\s+" + "SAXParseException\\.\\s*$", "");
    } else if (exception instanceof org.zkoss.zk.ui.metainfo.PropertyNotFoundException && message != null) {
        Matcher m = BAD_TAG_ATTRIBUTE.matcher(message);
        if (m.matches()) {
            String varName = m.group(1);
            String tagName = m.group(2);
            if (varName.length() > 0) {
                varName = varName.substring(0, 1).toLowerCase() + varName.substring(1);
            }
            int pos = tagName.lastIndexOf('.');
            if (pos > 0) {
                tagName = tagName.substring(pos + 1);
            }
            if (tagName.length() > 0) {
                tagName = tagName.substring(0, 1).toLowerCase() + tagName.substring(1);
            }
            message = "Unrecognized attribute " + "<span style=\"color:red;font-weight:bold\"><code>" + varName + "</code></span> on tag <b><code>&lt;" + tagName + "&gt;</code></b>";
        }
    }
    return message;
}
