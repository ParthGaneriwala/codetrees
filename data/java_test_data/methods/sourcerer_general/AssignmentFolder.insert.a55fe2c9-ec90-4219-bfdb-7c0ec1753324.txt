public boolean insert(Connection db) throws SQLException {
    if (!isValid()) {
        return false;
    }
    StringBuffer sql = new StringBuffer();
    sql.append("INSERT INTO project_assignments_folder " + "(requirement_id, parent_id, name, description, ");
    if (entered != null) {
        sql.append("entered, ");
    }
    if (modified != null) {
        sql.append("modified, ");
    }
    sql.append("enteredBy, modifiedBy) ");
    sql.append("VALUES (?, ?, ?, ?, ");
    if (entered != null) {
        sql.append("?, ");
    }
    if (modified != null) {
        sql.append("?, ");
    }
    sql.append("?, ?) ");
    int i = 0;
    PreparedStatement pst = db.prepareStatement(sql.toString());
    DatabaseUtils.setInt(pst, ++i, requirementId);
    DatabaseUtils.setInt(pst, ++i, parentId);
    pst.setString(++i, name);
    pst.setString(++i, description);
    if (entered != null) {
        pst.setTimestamp(++i, entered);
    }
    if (modified != null) {
        pst.setTimestamp(++i, modified);
    }
    pst.setInt(++i, enteredBy);
    pst.setInt(++i, modifiedBy);
    pst.execute();
    pst.close();
    id = DatabaseUtils.getCurrVal(db, "project_assignmen_folder_id_seq", -1);
    // Record the position of this entry
    RequirementMapItem mapItem = new RequirementMapItem();
    mapItem.setProjectId(projectId);
    mapItem.setRequirementId(requirementId);
    mapItem.setFolderId(id);
    mapItem.setIndent(indent);
    mapItem.setPrevIndent(prevIndent);
    mapItem.setPrevMapId(prevMapId);
    mapItem.append(db);
    indent = mapItem.getIndent();
    prevIndent = mapItem.getIndent();
    prevMapId = mapItem.getId();
    return true;
}
