private void addTree(JCas jCas, Sentence sentence, List<Token> tokens, DepTree tree) {
    DependencyNode[] nodes = new DependencyNode[tree.size()];
    DependencyNode rootNode = new TopDependencyNode(jCas, sentence.getBegin(), sentence.getEnd());
    rootNode.addToIndexes();
    nodes[0] = rootNode;
    for (int i = 0; i < tokens.size(); i++) {
        Token token = tokens.get(i);
        nodes[i + 1] = new DependencyNode(jCas, token.getBegin(), token.getEnd());
    }
    Map<DependencyNode, List<DependencyRelation>> headRelations;
    headRelations = new HashMap<DependencyNode, List<DependencyRelation>>();
    Map<DependencyNode, List<DependencyRelation>> childRelations;
    childRelations = new HashMap<DependencyNode, List<DependencyRelation>>();
    for (int i = 0; i < tree.size(); i++) {
        DepNode parserNode = tree.get(i);
        if (parserNode.hasHead) {
            int headIndex = parserNode.headId;
            DependencyNode node = nodes[i];
            DependencyNode headNode = nodes[headIndex];
            DependencyRelation rel = new DependencyRelation(jCas);
            rel.setChild(node);
            rel.setHead(headNode);
            rel.setRelation(parserNode.deprel);
            if (!headRelations.containsKey(node)) {
                headRelations.put(node, new ArrayList<DependencyRelation>());
            }
            headRelations.get(node).add(rel);
            if (!childRelations.containsKey(headNode)) {
                childRelations.put(headNode, new ArrayList<DependencyRelation>());
            }
            childRelations.get(headNode).add(rel);
        }
    }
    // finalize nodes: add links between nodes and relations
    for (DependencyNode node : nodes) {
        node.setHeadRelations(UIMAUtil.toFSArray(jCas, headRelations.get(node)));
        node.setChildRelations(UIMAUtil.toFSArray(jCas, childRelations.get(node)));
        node.addToIndexes();
    }
}
