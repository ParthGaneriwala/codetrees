private ASMCodeFragment stringsForPrintf() {
    ASMCodeFragment frag = new ASMCodeFragment(GENERATES_VOID);
    frag.add(DLabel, EAT_LOCATION_ZERO);
    // this is used to caculate modulo
    frag.add(DataZ, 8);
    // ////////////////String operations here////////////
    // buffer
    frag.add(DLabel, STRING_CONCAT_BUFFER);
    frag.add(DataZ, 256);
    // buffer2
    frag.add(DLabel, STRING_CONCAT_BUFFER_VICE);
    frag.add(DataZ, 256);
    // from
    frag.add(DLabel, STRING_FROM_ADDR);
    // 4 ???????
    frag.add(DataZ, 4);
    // to
    frag.add(DLabel, STRING_TO_ADDR);
    // this is used to handle string
    frag.add(DataZ, 4);
    frag.add(DLabel, PC_BUFFER);
    frag.add(DataZ, 4);
    // used to store pc for concat routine
    frag.add(DLabel, PC_BUFFER_CONCAT);
    // every routine should have a local pc store
    frag.add(DataZ, 4);
    // ////////////////String operations here////////////
    // used to store pc for concat routine
    frag.add(DLabel, INC_DEC_OFFSET_PARAMETER);
    // STRING_LENGTH_BUFFER
    frag.add(DataZ, 4);
    // used to store pc for concat routine
    frag.add(DLabel, INC_DEC_BASE_PARAMETER);
    // S
    frag.add(DataZ, 4);
    // used to store the length of a string
    frag.add(DLabel, STRING_LENGTH_BUFFER);
    frag.add(DataZ, 4);
    frag.add(DLabel, RUNTIME_RECURSIVE_ERROR);
    frag.add(DataS, "Run-time Error: Recursive routines are not allowed in routines! \n" + "If you wanna use recursive routines " + "please use keyword \"walrus\" to declare the routine!");
    frag.add(DLabel, CONTROL_STACK_POINT);
    frag.add(DataZ, 4);
    frag.add(DLabel, CONTROL_STACK_POINT_VAR);
    frag.add(DataZ, 4);
    // frame stack pointer
    frag.add(DLabel, FRAME_CURRETNT_SP);
    frag.add(DataZ, 4);
    frag.add(DLabel, FRAME_NEXT_FREE_SP);
    frag.add(DataZ, 4);
    frag.add(DLabel, TRUE_PRINT_VALUE);
    frag.add(DataS, "true");
    frag.add(DLabel, FALSE_PRINT_VALUE);
    frag.add(DataS, "false");
    frag.add(DLabel, INTEGER_PRINT_FORMAT);
    frag.add(DataS, "%d");
    frag.add(DLabel, FLOAT_PRINT_FORMAT);
    frag.add(DataS, "%f");
    frag.add(DLabel, STRING_PRINT_FORMAT);
    frag.add(DataS, "%s");
    frag.add(DLabel, NEWLINE_PRINT_FORMAT);
    frag.add(DataS, "\n");
    return frag;
}
