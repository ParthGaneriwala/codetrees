public boolean insert(Connection db) throws SQLException {
    if (!isValid()) {
        return false;
    }
    boolean commit = db.getAutoCommit();
    try {
        if (commit) {
            db.setAutoCommit(false);
        }
        StringBuffer sql = new StringBuffer();
        sql.append("INSERT INTO project_wiki " + "(" + (id > -1 ? "wiki_id, " : "") + "project_id, subject, content, read_count, enabled, read_only, template_id, ");
        if (entered != null) {
            sql.append("entered, ");
        }
        if (modified != null) {
            sql.append("modified, ");
        }
        sql.append("enteredby, modifiedby) ");
        sql.append("VALUES (?, ?, ?, ?, ?, ?, ?, ");
        if (id > -1) {
            sql.append("?, ");
        }
        if (entered != null) {
            sql.append("?, ");
        }
        if (modified != null) {
            sql.append("?, ");
        }
        sql.append("?, ?) ");
        int i = 0;
        // Insert the page
        PreparedStatement pst = db.prepareStatement(sql.toString());
        if (id > -1) {
            pst.setInt(++i, id);
        }
        pst.setInt(++i, projectId);
        pst.setString(++i, subject);
        pst.setString(++i, content);
        pst.setInt(++i, readCount);
        pst.setBoolean(++i, enabled);
        pst.setBoolean(++i, readOnly);
        DatabaseUtils.setInt(pst, ++i, templateId);
        if (entered != null) {
            pst.setTimestamp(++i, entered);
        }
        if (modified != null) {
            pst.setTimestamp(++i, modified);
        }
        pst.setInt(++i, enteredBy);
        pst.setInt(++i, modifiedBy);
        pst.execute();
        pst.close();
        id = DatabaseUtils.getCurrVal(db, "project_wiki_wiki_id_seq", id);
        // TODO: Skip this if a restore is underway
        if (!isApiRestore()) {
            // Insert the version
            WikiVersion.insert(db, this);
            // Update the page links used
            WikiUtils.updatePageLinks(db, this);
        }
        if (commit) {
            db.commit();
        }
    } catch (SQLException e) {
        if (commit) {
            db.rollback();
        }
        throw new SQLException(e.getMessage());
    } finally {
        if (commit) {
            db.setAutoCommit(true);
        }
    }
    return true;
}
