public TranslatedExpAndType translateIfExp(IfExp ifExpression) {
    Exp test = ifExpression.getTest();
    Exp thenClause = ifExpression.getThenClause();
    Exp elseClause = ifExpression.getElseClause();
    TranslatedExpAndType transExpAndTypeThen = translateExpression(thenClause);
    TypeEntry ifExprType = transExpAndTypeThen.getTypeEntry();
    TranslatedExpAndType transExpAndTypeElse = null;
    TypeEntry elseExprType = null;
    if (elseClause != null) {
        transExpAndTypeElse = translateExpression(elseClause);
        elseExprType = transExpAndTypeElse.getTypeEntry();
    }
    TranslatedExpAndType transTest = translateExpression(test);
    if (!(transTest.getTypeEntry() instanceof IntTypeEntry)) {
        semanticAnalyzerError = true;
        errorHandler.addError(test.getPosition(), ErrorHandler.IF_TEST_EXPR + ErrorHandler.MUST_BE_INT.trim());
    }
    if (elseClause != null) {
        if (ifExprType != elseExprType) {
            semanticAnalyzerError = true;
            errorHandler.addError(test.getPosition(), ErrorHandler.IF_THEN_ELSE_TYPE_INCOMPATIBLE);
        }
    }
    TranslatedExpAndType translatedExpAndType = new TranslatedExpAndType();
    if (!semanticAnalyzerError) {
        // No error during semantic processing - translate it to the intermediate representation
        AssemType assemTypeIf = transExpAndTypeThen.getAssemType();
        AssemType assemTypeTest = transTest.getAssemType();
        AssemType assemTypeElse = null;
        if (// There is an else clause
        transExpAndTypeElse != null)
            assemTypeElse = transExpAndTypeElse.getAssemType();
        AssemType assemIf = translatingMediator.translateIfStm(assemTypeTest, assemTypeIf, assemTypeElse);
        translatedExpAndType.setAssemType(assemIf);
    }
    translatedExpAndType.setEntry(ifExprType);
    return translatedExpAndType;
}
