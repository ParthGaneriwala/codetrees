private List<OWLOntologyChange> updateClosure() {
    // in reality, only one feature gets updated at once, which should work fine
    // but this should also handle the cases where multiple features have been changed before a commit
    // this really needs testing for all combinations
    List<OWLOntologyChange> changes = new ArrayList<OWLOntologyChange>();
    boolean createNewClosureOnNewProp = false;
    boolean removeOldClosureOnOldProp = false;
    boolean createNewClosureOnOldProp = false;
    boolean removeOldClosureOnNewProp = false;
    if (closed) {
        if (!originallyClosed) {
            removeOldClosureOnNewProp = true;
            createNewClosureOnNewProp = true;
        }
        if (filler != originalFiller) {
            removeOldClosureOnOldProp = true;
            createNewClosureOnNewProp = true;
        }
        if (prop != originalProperty) {
            removeOldClosureOnOldProp = true;
            removeOldClosureOnNewProp = true;
            createNewClosureOnOldProp = true;
            createNewClosureOnNewProp = true;
        }
    } else {
        // not closed
        if (originallyClosed) {
            removeOldClosureOnOldProp = true;
        }
        if (prop != originalProperty) {
        // removeOldClosureOnNewProp = true; // arguably the user should notice the highlighting
        }
    }
    OWLDataFactory df = mngr.getOWLDataFactory();
    if (removeOldClosureOnOldProp) {
        // removeRows old closure on old prop
        OWLObjectAllValuesFrom oldClosure = closureUtils.getClosureAxiom(subject, (OWLObjectProperty) originalProperty, originalFiller);
        if (oldClosure != null) {
            OWLAxiom subclassAxiom = df.getOWLSubClassOfAxiom(subject, oldClosure);
            changes.addAll(getDeleteAxiomFromAllOntologies(subclassAxiom));
        }
    }
    if (removeOldClosureOnNewProp) {
        // removeRows old closure axioms along new prop
        for (OWLObjectAllValuesFrom closure : closureUtils.getCandidateClosureAxioms(subject, (OWLObjectProperty) prop)) {
            OWLAxiom subclassAxiom = df.getOWLSubClassOfAxiom(subject, closure);
            changes.addAll(getDeleteAxiomFromAllOntologies(subclassAxiom));
        }
    }
    if (createNewClosureOnNewProp) {
        // create new closure on new prop
        Set<OWLClassExpression> fillers = factory.getFillers((OWLObjectProperty) prop);
        if (!fillers.isEmpty()) {
            OWLObjectAllValuesFrom newClosure = closureUtils.createClosureAxiom((OWLObjectProperty) prop, fillers);
            changes.add(new AddAxiom(mngr.getActiveOntology(), df.getOWLSubClassOfAxiom(subject, newClosure)));
        }
    }
    if (createNewClosureOnOldProp) {
        // create new closure on old prop
        Set<OWLClassExpression> fillers = factory.getFillers((OWLObjectProperty) originalProperty);
        if (!fillers.isEmpty()) {
            OWLObjectAllValuesFrom newClosure = closureUtils.createClosureAxiom((OWLObjectProperty) originalProperty, fillers);
            changes.add(new AddAxiom(mngr.getActiveOntology(), df.getOWLSubClassOfAxiom(subject, newClosure)));
        }
    }
    return changes;
}
