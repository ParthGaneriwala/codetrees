public static void main(String[] args) throws Exception {
    String htmlContent = FileUtils.readFileToString(new File("/home/wangtao/tmp/test.htm"), "utf-8");
    Document doc = HtmlDomUtil.createDocument(htmlContent);
    final Set<String> textSet = new HashSet<String>();
    String str1 = "上市首日肯定破发";
    textSet.add(str1);
    String str2 = "上证所公告 5.43";
    textSet.add(str2);
    List<Node> nodeList1 = new ArrayList<Node>();
    List<Node> nodeList2 = new ArrayList<Node>();
    final Map<String, List<Node>> map = new HashMap<String, List<Node>>(2);
    map.put(str1, nodeList1);
    map.put(str2, nodeList2);
    HtmlDomUtil.walk(doc, new NodeHandler() {

        @Override
        public void handleNode(Node node) {
            if (Node.TEXT_NODE == node.getNodeType()) {
                String c = node.getTextContent().trim();
                if (StringUtils.isBlank(c)) {
                    return;
                }
                if (textSet.contains(c)) {
                    List<Node> list = map.get(c);
                    list.add(node);
                    Node parent = node.getParentNode();
                    while (true) {
                        if (parent == null) {
                            break;
                        }
                        list.add(parent);
                        // System.out.println(parent.getNodeName());
                        parent = parent.getParentNode();
                    }
                }
            }
        }

        @Override
        public void post() {
        }
    });
    List<List<Node>> lists = new ArrayList<List<Node>>();
    for (Map.Entry<String, List<Node>> entry : map.entrySet()) {
        lists.add(entry.getValue());
    }
    int size = -1;
    for (List<Node> list : lists) {
        if (size == -1) {
            size = list.size();
        } else {
            if (size != list.size()) {
                throw new RuntimeException("选中的每个node的深度不一致。");
            }
        }
    }
    List<Node> result = new ArrayList<Node>();
    List<Node> list1 = lists.get(0);
    for (int i = list1.size() - 1; i >= 0; i--) {
        boolean same = true;
        Node n = list1.get(i);
        for (int j = 1; j < lists.size(); j++) {
            Node nd = lists.get(j).get(i);
            if (!nd.equals(n)) {
                same = false;
                break;
            }
        }
        if (same) {
            result.add(n);
        } else {
            break;
        }
    }
    for (Node n : result) {
        System.out.print(n.getNodeName() + " ");
        NamedNodeMap attrMap = n.getAttributes();
        if (attrMap == null) {
            continue;
        }
        for (int i = 0; i < attrMap.getLength(); i++) {
            Node attr = attrMap.item(i);
            System.out.print(attr.getNodeName() + ":" + attr.getNodeValue() + ";");
        }
        System.out.println();
    }
}
