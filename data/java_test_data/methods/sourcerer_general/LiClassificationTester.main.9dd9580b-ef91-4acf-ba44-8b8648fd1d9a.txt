public static void main(String[] args) {
    // read in the training data
    File f;
    String[][] values;
    try {
        f = new File("D:/synthLandscan/randomStarts/momentData/GAMLitestData.csv");
        FileReader in = new FileReader(f);
        CSVParser csvp = new CSVParser(in);
        values = csvp.getAllValues();
    } catch (FileNotFoundException fnfe) {
        throw new RuntimeException("No file!  " + fnfe.getMessage());
    } catch (IOException ioe) {
        throw new RuntimeException("IO Exception!  " + ioe.getMessage());
    }
    int numInvs = values[1].length - 1;
    // to see if leaving one or two invariants out improves classification (Auroop from ORNL's suggestion)
    boolean[] include = new boolean[numInvs];
    for (int i = 0; i < include.length; i++) {
        include[i] = true;
    }
    int numInvsUsed = 0;
    for (int i = 0; i < include.length; i++) {
        if (include[i]) {
            numInvsUsed++;
        }
    }
    ClassedArray[] matrix = new ClassedArray[values.length - 1];
    for (int i = 1; i < values.length; i++) {
        // was values[i].length - 1
        double[] data = new double[numInvsUsed];
        // because I can't assume it will be data[j]--some values of j might be skipped by the include array
        int index = 0;
        for (int j = 0; j < values[i].length - 1; j++) {
            if (include[j]) {
                data[index] = Double.parseDouble(values[i][j]);
                index++;
            }
        }
        ClassedArray ca = new ClassedArray();
        ca.setArray(data);
        ca.setKlass(values[i][values[i].length - 1]);
        matrix[i - 1] = ca;
    }
    ClassedArray[] z = new ClassedArray[matrix.length];
    double[] means = new double[matrix[0].getArray().length];
    double[] stdevs = new double[matrix[0].getArray().length];
    double[] logMeans = new double[matrix[0].getArray().length];
    double[] logStDevs = new double[matrix[0].getArray().length];
    // if the mean is within tolerance of 0 and the standard deviation is within tolerance of 1, then assume it's already standardized.
    double tolerance = 0.001;
    // compute means
    double[] sums = new double[means.length];
    double[] logSums = new double[logMeans.length];
    for (int i = 0; i < matrix.length; i++) {
        double[] snuh = matrix[i].getArray();
        for (int j = 0; j < snuh.length; j++) {
            sums[j] = sums[j] + snuh[j];
            logSums[j] = logSums[j] + Math.log(Math.abs(snuh[j]));
        }
    }
    for (int k = 0; k < means.length; k++) {
        means[k] = sums[k] / matrix.length;
        logMeans[k] = logSums[k] / matrix.length;
    }
    // compute stdevs
    Arrays.fill(sums, 0);
    Arrays.fill(logSums, 0);
    for (int i = 0; i < matrix.length; i++) {
        double[] snuh = matrix[i].getArray();
        for (int j = 0; j < snuh.length; j++) {
            sums[j] = sums[j] + ((snuh[j] - means[j]) * (snuh[j] - means[j]));
            logSums[j] = logSums[j] + ((snuh[j] - logMeans[j]) * (snuh[j] - logMeans[j]));
        }
    }
    for (int k = 0; k < stdevs.length; k++) {
        stdevs[k] = Math.sqrt(sums[k] / matrix.length);
        logStDevs[k] = Math.sqrt(logSums[k] / matrix.length);
    }
    // compute standardized values (if needed)
    double[][] zMatrix = new double[matrix.length][means.length];
    for (int i = 0; i < means.length; i++) {
        boolean standardized = (Math.abs(means[i]) < tolerance) && (Math.abs(stdevs[i] - 1) < tolerance);
        for (int j = 0; j < matrix.length; j++) {
            if (standardized) {
                zMatrix[j][i] = matrix[j].getArray()[i];
            } else {
                zMatrix[j][i] = (matrix[j].getArray()[i] - means[i]) / stdevs[i];
            }
        }
    }
    for (int k = 0; k < matrix.length; k++) {
        ClassedArray ca = new ClassedArray();
        ca.setArray(zMatrix[k]);
        ca.setKlass(matrix[k].getKlass());
        z[k] = ca;
    }
    double[] medianDistances = new double[maxK];
    if (useSimpleKNN) {
    // intentionally empty
    } else {
        medianDistances = medianDistances(z, maxK);
    }
    // didn't think the initialization would take 100 lines...  But the training data
    // and classifier should now be ready.
    int[] modes = new int[] { SetClassifier.MODE, SetClassifier.AVERAGE, SetClassifier.SIMPLE_DS, SetClassifier.PROP_BEL_TRANS, SetClassifier.COMBINED_AVERAGE, SetClassifier.MODIFIED_AVERAGE, SetClassifier.TREE_PBT };
    String[] modeStrings = { "mode", "average", "simple DS", "prop bel trans", "comb. ave.", "modified ave.", "tree prop bel trans" };
    // read in the moment data
    File f2;
    String[][] momentValues;
    String[] types = new String[] { "inf", "road", "wind", "river", "airport" };
    String[] classNames = DissUtils.extractClassNames(z);
    int allIndex = 0;
    for (int type = 0; type < types.length; type++) {
        System.out.println("GAMLi: " + useSimpleKNN + ": " + types[type]);
        try {
            f2 = new File("D:/synthLandscan/randomStarts/" + types[type] + "/run200/GAMLiMoments.csv");
            if (f2.exists()) {
                FileReader reader = new FileReader(f2);
                CSVParser csvp = new CSVParser(reader);
                momentValues = csvp.getAllValues();
            } else {
                momentValues = new String[40][];
                for (int x = 0; x < 40; x++) {
                    File next = new File("D:/synthLandscan/randomStarts/" + types[type] + "/run200/GAMLiMoments" + x + ".csv");
                    FileReader reader = new FileReader(next);
                    CSVParser csvp = new CSVParser(reader);
                    String[][] localValues = csvp.getAllValues();
                    momentValues[x] = localValues[0];
                }
            }
        } catch (FileNotFoundException fnfe) {
            throw new RuntimeException("No file!  " + fnfe.getMessage());
        } catch (IOException ioe) {
            throw new RuntimeException("IO Exception!  " + ioe.getMessage());
        }
        double[][] moments = new double[momentValues.length][momentValues[0].length - 1];
        for (int i = 0; i < momentValues.length; i++) {
            for (int j = 0; j < momentValues[i].length - 1; j++) {
                moments[i][j] = Double.parseDouble(momentValues[i][j]);
            }
        }
        // classify the set using each of the set classification methods
        double[][] zMoments = new double[moments.length][];
        String[][] neighborClasses = new String[moments.length][maxK];
        double[][] neighborDists = new double[moments.length][maxK];
        for (int i = 0; i < moments.length; i++) {
            // standardize all the moment sets in this track
            zMoments[i] = standardizeMe(moments[i], means, stdevs);
            // find the maxK neighbors for each of the moment sets of this track
            neighborClasses[i] = neighborClasses(zMoments[i], z, maxK);
            // find the maxK distances for each of the moments sets of this track
            neighborDists[i] = neighborDistances(zMoments[i], z, maxK);
        }
        for (int kForKNN = 2; kForKNN < maxK + 1; kForKNN++) {
            // allClassifications[kForKNN-2][allIndex] = new double[modes.length][];
            double[][] timeStepClassProbs = new double[zMoments.length][];
            String[] timeStepClassWinners = new String[zMoments.length];
            // classify each of the moment sets individually
            for (int step = 0; step < zMoments.length; step++) {
                if (useSimpleKNN) {
                    timeStepClassProbs[step] = classifyProbSimple(zMoments[step], neighborClasses[step], classNames, kForKNN);
                } else {
                    timeStepClassProbs[step] = classifyProbDW(zMoments[step], neighborClasses[step], neighborDists[step], medianDistances, classNames, kForKNN);
                }
                timeStepClassWinners[step] = classify(timeStepClassProbs[step], classNames);
            }
            // combine for a track classification using each mode
            double[][] thisTrackClassifications = new double[modes.length][];
            for (int modeIndex = 0; modeIndex < modes.length; modeIndex++) {
                int mode = modes[modeIndex];
                // store the track classifications for each mode in the appropriate slot in allClassifications
                thisTrackClassifications[modeIndex] = StaticEvidenceCombiner.combineEvidence(timeStepClassProbs, timeStepClassWinners, classNames, mode);
            }
            System.out.println("finished GAMLi simple=" + useSimpleKNN + " k=" + kForKNN + " track#200 allIndex=" + allIndex);
        }
        // end for kForKNN
        allIndex++;
    }
// end for type
}
