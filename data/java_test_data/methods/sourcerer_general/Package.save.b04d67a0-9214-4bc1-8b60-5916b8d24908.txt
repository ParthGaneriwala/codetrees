public void save(Properties frameProperties) {
    /* create the directory if it doesn't exist */
    File dir = getPath();
    if (!dir.exists()) {
        if (!dir.mkdir()) {
            Debug.reportError("Error creating directory " + dir);
            return;
        }
    }
    SortedProperties props = new SortedProperties();
    String javaMEflag = lastSavedProps.getProperty("package.isJavaMEproject", "false");
    if (javaMEflag.equals("true"))
        props.put("package.isJavaMEproject", "true");
    if (frameProperties != null)
        props.putAll(frameProperties);
    // save targets and dependencies in package
    props.put("package.numDependencies", String.valueOf(usesArrows.size()));
    int t_count = 0;
    Iterator<Target> t_enum = targets.iterator();
    for (int i = 0; t_enum.hasNext(); i++) {
        Target t = t_enum.next();
        // should we save this target
        if (t.isSaveable()) {
            t.save(props, "target" + (t_count + 1));
            t_count++;
        }
    }
    props.put("package.numTargets", String.valueOf(t_count));
    // Take special care of ReadmeTarget
    // see ReadmeTarget.isSaveable for explanation
    Target t = getTarget(ReadmeTarget.README_ID);
    t.save(props, "readme");
    for (int i = 0; i < usesArrows.size(); i++) {
        // uses arrows
        Dependency d = (Dependency) usesArrows.get(i);
        d.save(props, "dependency" + (i + 1));
    }
    try {
        packageFile.save(props);
    } catch (IOException e) {
        Debug.reportError("Exception when saving package file : " + e);
        return;
    }
    lastSavedProps = props;
    return;
}
