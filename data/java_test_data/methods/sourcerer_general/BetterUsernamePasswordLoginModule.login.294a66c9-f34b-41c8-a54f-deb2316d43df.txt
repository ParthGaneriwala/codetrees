@SuppressWarnings("unchecked")
public boolean login() throws LoginException {
    // See if shared credentials exist
    if (super.login()) {
        // Setup our view of the user
        Object username = sharedState.get("javax.security.auth.login.name");
        if (username instanceof Principal) {
            this.identity = (Principal) username;
        } else {
            String name = username.toString();
            try {
                this.identity = this.createIdentity(name);
            } catch (Exception ex) {
                log.debug("Failed to create principal", ex);
                throw new LoginException("Failed to create principal: " + ex.getMessage());
            }
        }
        Object password = sharedState.get("javax.security.auth.login.password");
        if (password instanceof char[])
            this.credential = (char[]) password;
        else if (password != null) {
            String tmp = password.toString();
            this.credential = tmp.toCharArray();
        }
        return true;
    }
    super.loginOk = false;
    // Get username and pw from callbacks
    String[] info = this.getUsernameAndPassword();
    String username = info[0];
    String password = info[1];
    if (username == null && password == null) {
        this.identity = unauthenticatedIdentity;
    } else {
        this.validate(username, password);
        try {
            this.identity = this.createIdentity(username);
        } catch (Exception ex) {
            log.debug("Failed to create principal", ex);
            throw new LoginException("Failed to create principal: " + ex.getMessage());
        }
    }
    if (this.getUseFirstPass()) {
        // Add the username and password to the shared state map
        this.sharedState.put("javax.security.auth.login.name", username);
        this.sharedState.put("javax.security.auth.login.password", this.credential);
    }
    super.loginOk = true;
    if (log.isDebugEnabled())
        log.debug("User '" + identity + "' authenticated.");
    return true;
}
