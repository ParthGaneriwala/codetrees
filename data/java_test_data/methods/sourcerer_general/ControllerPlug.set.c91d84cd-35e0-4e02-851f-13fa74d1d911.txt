public void set(final Object theObject, final String theName, final int theType, final int theParameterType, final Class<?>[] theAcceptClassList) {
    _myObject = theObject;
    _myName = theName;
    _myType = theType;
    _myParameterType = theParameterType;
    _myAcceptClassList = theAcceptClassList;
    Class<?> myClass = theObject.getClass();
    /* check for methods */
    if (_myType == ControlP5Constants.METHOD) {
        try {
            Method[] myMethods = myClass.getDeclaredMethods();
            for (int i = 0; i < myMethods.length; i++) {
                if ((myMethods[i].getName()).equals(theName)) {
                    if (myMethods[i].getParameterTypes().length == 1) {
                        for (int j = 0; j < _myAcceptClassList.length; j++) {
                            if (myMethods[i].getParameterTypes()[0] == _myAcceptClassList[j]) {
                                _myParameterClass = myMethods[i].getParameterTypes()[0];
                                break;
                            }
                        }
                    } else if (myMethods[i].getParameterTypes().length == 0) {
                        _myParameterClass = null;
                        break;
                    }
                    break;
                }
            }
            Class<?>[] myArgs = (_myParameterClass == null) ? new Class[] {} : new Class[] { _myParameterClass };
            _myMethod = myClass.getDeclaredMethod(_myName, myArgs);
            _myMethod.setAccessible(true);
        } catch (SecurityException e) {
            printSecurityWarning(e);
        } catch (NoSuchMethodException e) {
            ControlP5.logger().warning(" plug() failed. If function " + theName + " does exist, make it public. " + e);
        }
    /* check for controlEvent */
    } else if (_myType == ControlP5Constants.EVENT) {
        try {
            _myMethod = _myObject.getClass().getMethod(_myName, new Class[] { ControlEvent.class });
            _myMethod.setAccessible(true);
            _myParameterClass = ControlEvent.class;
        } catch (SecurityException e) {
            printSecurityWarning(e);
        } catch (NoSuchMethodException e) {
            ControlP5.logger().warning(" plug() failed. If function " + theName + " does exist, make it public. " + e);
        }
    /* check for fields */
    } else if (_myType == ControlP5Constants.FIELD) {
        for (int i = 0; i < myClass.getDeclaredFields().length; i++) {
            if (myClass.getDeclaredFields()[i].getName().equals(_myName)) {
                _myParameterClass = myClass.getDeclaredFields()[i].getType();
            }
        }
        if (_myParameterClass != null) {
            /**
             * note. when running in applet mode. for some reason
             * setAccessible(true) works for methods but not for fields.
             * theAccessControlException is thrown. therefore, make fields in your
             * code public.
             */
            try {
                _myField = myClass.getDeclaredField(_myName);
                try {
                    _myField.setAccessible(true);
                } catch (java.security.AccessControlException e) {
                    printSecurityWarning(e);
                }
                try {
                    _myValue = (_myField.get(theObject));
                } catch (Exception ex) {
                    printSecurityWarning(ex);
                }
            } catch (NoSuchFieldException e) {
                ControlP5.logger().warning(e.toString());
            }
        }
    }
}
