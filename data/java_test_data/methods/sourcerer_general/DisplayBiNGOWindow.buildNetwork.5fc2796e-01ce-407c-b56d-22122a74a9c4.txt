/**
 * Method that builds up the new network.
 *
 * @return CyNetwork the network that was built.
 */
public CyNetwork buildNetwork() {
    HashSet set;
    if (testMap != null) {
        set = new HashSet(testMap.keySet());
    } else {
        set = new HashSet(mapSmallX.keySet());
    }
    Iterator iterator = set.iterator();
    // put the edges in a set of Strings
    HashSet sifSet = new HashSet();
    // some GO labels might have multiple termIds, which need to be canonicalized.
    // (for safety, has also been taken care of in BiNGOOntologyFlatFilereader)
    HashMap nameMap = new HashMap();
    CyNetwork network = Cytoscape.createNetwork(clusterName);
    while (iterator.hasNext()) {
        int termID = new Integer(iterator.next().toString()).intValue();
        // ifs for determining GO coverage of graphs.
        if (categoriesString.equals(CATEGORY_ALL) || (categoriesString.equals(CATEGORY_BEFORE_CORRECTION) && new BigDecimal(testMap.get(new Integer(termID)).toString()).compareTo(new BigDecimal(alpha)) < 0) || (categoriesString.equals(CATEGORY_CORRECTION) && new BigDecimal(correctionMap.get(termID + "").toString()).compareTo(new BigDecimal(alpha)) < 0)) {
            int[][] paths = ontology.getAllHierarchyPaths(termID);
            int previousNode;
            for (int i = 0; i < paths.length; i++) {
                previousNode = paths[i][0];
                // for singleton nodes
                if ((paths.length == 1) && (paths[i].length == 1)) {
                    sifSet.add(previousNode + "\n");
                }
                // first substring added to any map value will be null
                nameMap.put(ontology.getTerm(previousNode).getName(), nameMap.get(ontology.getTerm(previousNode).getName()) + " " + previousNode);
                for (int j = 1; j < paths[i].length; j++) {
                    // first substring added to any map value will be null
                    nameMap.put(ontology.getTerm(paths[i][j]).getName(), nameMap.get(ontology.getTerm(paths[i][j]).getName()) + " " + paths[i][j]);
                    sifSet.add(previousNode + " pp " + paths[i][j] + "\n");
                    previousNode = paths[i][j];
                }
            }
        }
    }
    // canonicalize nodes.
    HashMap termIdMap = makeTermIdMap(nameMap);
    // canonicalize edges and build network.
    Iterator sifIterator = sifSet.iterator();
    while (sifIterator.hasNext()) {
        String writeString = sifIterator.next().toString();
        StringTokenizer st = new StringTokenizer(writeString);
        String firstTermId = termIdMap.get(st.nextToken()).toString();
        if (st.hasMoreTokens()) {
            st.nextToken();
            String secondTermId = termIdMap.get(st.nextToken()).toString();
            Node node1 = (Node) Cytoscape.getCyNode(firstTermId, true);
            // add actionlistener for feedback to original network (the one you analyze)
            Node node2 = (Node) Cytoscape.getCyNode(secondTermId, true);
            // network build procedure does not allow duplicate edges
            Edge edge = (Edge) Cytoscape.getCyEdge(node1, node2, Semantics.INTERACTION, "pp", true);
            network.addNode(node1);
            network.addNode(node2);
            network.addEdge(edge);
        } else {
            // singular nodes
            Node node1 = (Node) Cytoscape.getCyNode(firstTermId, true);
            network.addNode(node1);
        }
    }
    return network;
}
