double computeTreeScore(QuartetTree qt, TreeEdge te, int d, double[][] dm) {
    double Ct = 0;
    htPath.clear();
    double count = 0;
    ArrayList alQuartets = null;
    boolean full = false;
    if (edgeScoreHistory[eiTable[te.q1.id][te.q2.id]] == 0) {
        if (oldEdge == null) {
            full = true;
        } else {
            for (int i = 0; i < dm.length; i++) {
                scoreHistory[labels[i]][eiTable[te.q1.id][te.q2.id]] += scoreHistory[labels[i]][eiTable[oldEdge.q1.id][oldEdge.q2.id]];
            }
            edgeScoreHistory[eiTable[te.q1.id][te.q2.id]] = edgeScoreHistory[eiTable[oldEdge.q1.id][oldEdge.q2.id]];
        }
    }
    alQuartets = quartetLists[d - 4];
    double historyScore = computeHistoryScore(d, te, dm);
    Quartet q = new Quartet(0, 0, 0, 0, new double[1][1]);
    QNode[] qNodes = new QNode[node_count];
    endNodes = new QNode[N];
    for (int i = 0; i < node_count; i++) {
        qNodes[i] = this.qNodes[i];
        if (this.qNodes[i].label != -1) {
            endNodes[this.qNodes[i].label] = this.qNodes[i];
        }
    }
    for (int i = 0; i < alQuartets.size(); i++) {
        Quartet q2 = (Quartet) alQuartets.get(i);
        q.nodes[0] = labels[q2.nodes[0]];
        q.nodes[1] = labels[q2.nodes[1]];
        q.nodes[2] = labels[q2.nodes[2]];
        q.nodes[3] = labels[q2.nodes[3]];
        if (q2.K <= partK) {
            if (q2.consistent) {
                Ct += dm[q.nodes[0]][q.nodes[1]] + dm[q.nodes[2]][q.nodes[3]];
                updateQuartetCosts(q2, d, te, dm);
                count++;
            }
            part_q++;
        } else {
            if (isConsistent(q)) {
                Ct += dm[q.nodes[0]][q.nodes[1]] + dm[q.nodes[2]][q.nodes[3]];
                updateQuartetCosts(q2, d, te, dm);
                count++;
            }
            q2.consistent = q.consistent;
            q2.K = q.K;
            non_part_q++;
        }
        step_count++;
    }
    double Ct2 = 0;
    if (full) {
        Ct2 = Ct + last_tree_score;
    } else {
        // scoreHistory[d][eiTable[te.q1.id][te.q2.id]];
        Ct2 = Ct + last_tree_score + historyScore;
    }
    return Ct2;
}
