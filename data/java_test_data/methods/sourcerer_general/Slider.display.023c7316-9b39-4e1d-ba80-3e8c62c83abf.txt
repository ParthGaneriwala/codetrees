public void display(PApplet theApplet, Controller theController) {
    theApplet.fill(color.getBackground());
    theApplet.noStroke();
    if ((color.getBackground() >> 24 & 0xff) > 0) {
        theApplet.rect(0, 0, width, height);
    }
    theApplet.fill(getIsInside() ? color.getActive() : color.getForeground());
    if (_myDirection == HORIZONTAL) {
        if (_mySliderMode == FIX) {
            theApplet.rect(0, 0, _myValuePosition, height);
        } else {
            if (isShowTickMarks) {
                theApplet.triangle(_myValuePosition, 0, _myValuePosition + _mySliderbarSize, 0, _myValuePosition + _mySliderbarSize / 2, getHeight());
            } else {
                theApplet.rect(_myValuePosition, 0, _mySliderbarSize, height);
            }
        }
        theApplet.fill(255);
    } else {
        if (_mySliderMode == FIX) {
            theApplet.rect(0, height, width, -_myValuePosition);
        } else {
            if (isShowTickMarks) {
                theApplet.triangle(width, height - _myValuePosition, width, height - _myValuePosition - _mySliderbarSize, 0, height - _myValuePosition - _mySliderbarSize / 2);
            } else {
                theApplet.rect(0, height - _myValuePosition - _mySliderbarSize, width, _mySliderbarSize);
            }
        }
    }
    if (isLabelVisible) {
        int py = 0;
        int px = 0;
        if (_myDirection == HORIZONTAL) {
            _myCaptionLabel.draw(theApplet, width + 3, height / 2 - 3);
            switch(alignValueLabel) {
                case (TOP):
                    py = -10;
                    break;
                case (CENTER):
                default:
                    py = height / 2 - 3;
                    px = 3;
                    break;
                case (BOTTOM):
                    py = height + 3;
                    break;
            }
            _myValueLabel.draw(theApplet, (valueLabelPositioning == FIX) ? px : (int) (_myValuePosition), py);
        } else {
            _myCaptionLabel.draw(theApplet, 0, height + 3);
            switch(alignValueLabel) {
                case (TOP):
                default:
                    py = -10;
                    break;
                case (CENTER):
                    py = height / 2 - 3;
                    px = 3;
                    break;
                case (BOTTOM):
                    py = height + 3;
                    break;
            }
            _myValueLabel.draw(theApplet, (valueLabelPositioning == FIX) ? 0 : width + 4, (valueLabelPositioning == FIX) ? py : -(int) _myValuePosition + height - 8);
        }
    }
    if (isShowTickMarks) {
        theApplet.pushStyle();
        theApplet.pushMatrix();
        float n = (_myDirection == HORIZONTAL) ? getWidth() : getHeight();
        if (_myDirection == HORIZONTAL) {
            theApplet.translate((_mySliderMode == FIX) ? 0 : _mySliderbarSize / 2, getHeight());
        } else {
            theApplet.translate(-4, (_mySliderMode == FIX) ? 0 : _mySliderbarSize / 2);
        }
        float x = (n - ((_mySliderMode == FIX) ? 0 : _mySliderbarSize)) / (_myTickMarks.size() - 1);
        for (TickMark tm : _myTickMarks) {
            tm.draw(theApplet, _myDirection);
            if (_myDirection == HORIZONTAL) {
                theApplet.translate(x, 0);
            } else {
                theApplet.translate(0, x);
            }
        }
        theApplet.popMatrix();
        theApplet.popStyle();
    }
}
