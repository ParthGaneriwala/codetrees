public void createPartControl(Composite parent) {
    // ((ApplicationWindow)PlatformUI.getWorkbench().getActiveWorkbenchWindow()).setStatus("You are not Blocked!!");
    parent.setLayout((new GridLayout(1, true)));
    _parent = new Composite(parent, SWT.BORDER);
    _parent.setLayout((new GridLayout(1, true)));
    topComposite = new Composite(_parent, SWT.BORDER);
    GridLayout gl_topComp = new GridLayout(2, false);
    topComposite.setLayout(gl_topComp);
    GridData gdLyt = new GridData(GridData.FILL_HORIZONTAL);
    gdLyt.horizontalAlignment = SWT.FILL;
    topComposite.setLayoutData(gdLyt);
    // Tool Label with icon
    labelToolName = new CLabel(topComposite, SWT.LEFT);
    toolIcon = // $NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
    Activator.imageDescriptorFromPlugin("lead.streamingTool.client", ("icons" + File.separator + "StreamingTool.png")).createImage();
    labelToolName.setImage(toolIcon);
    // $NON-NLS-1$
    labelToolName.setText("Streaming Tool");
    /*
		 * ****************************************************************
		 * TOOLBAR LAYOUT MAKING CODE LINEs...
		 * ****************************************************************
		 */
    ToolBarManager streamingToolBar = new ToolBarManager(SWT.HORIZONTAL | SWT.FLAT);
    createEmptyLabel(2);
    streamingToolBar.add(emptyLabel);
    streamingToolBar.add(new Separator());
    streamingToolBar.add(emptyLabel);
    streamingToolBar.add(emptyLabel);
    createResetVideoSizeAction();
    streamingToolBar.add(resetVideoAction);
    createVideoZoomINAction();
    streamingToolBar.add(videoZoomINAction);
    createVideoZoomOUTAction();
    streamingToolBar.add(videoZoomOUTAction);
    streamingToolBar.add(emptyLabel);
    streamingToolBar.add(emptyLabel);
    streamingToolBar.add(emptyLabel);
    streamingToolBar.createControl(topComposite);
    /*
		 * STATUS BAR LAYOUT CODE...
		 */
    toolStatusBar = new ToolStatusBar(_parent, SWT.NONE);
    /* 
		 * 'flashPlayer' Composite : contains ShockwaveFlash OLE Component widget
		 */
    Layout flashPlayerLayout = new Layout() {

        @Override
        protected Point computeSize(Composite composite, int hint, int hint2, boolean flushCache) {
            return new Point(500, 400);
        }

        @Override
        protected void layout(Composite composite, boolean flushCache) {
            _parent.layout();
        }
    };
    flashPlayer = new FlashPlayer(_parent, SWT.NONE);
    flashPlayer.setLayout(flashPlayerLayout);
    String SWFPlayerPath = StreamingSettings.getFlashPlayerPath();
    flashPlayer.loadRemoteRTMPMovie(SWFPlayerPath, "rtmp://", "", "rtmp", "0.1");
    // Sets the 'Streaming Controller' for the flashPlayer widgets...
    streamingController = new StreamingController(flashPlayer, this.service, this, "0.1");
    service.setStreamingController(streamingController);
    flashPlayer.setStreamingController(streamingController);
    /* 
		 * *******************************************************************
		 */
    DisposeListener disposeListener = new DisposeListener() {

        public void widgetDisposed(DisposeEvent e) {
            PlatformUI.getWorkbench().getDisplay().syncExec(new Runnable() {

                public void run() {
                    service.sendExitMessage();
                    System.out.println("\n\n <<<<<<<<<<<<<<< EXIT MESSAGE SENT TO THE SERVER! >>>>>>>>>>>>>>>>\n\n");
                    System.out.flush();
                    dispose();
                }
            });
        }
    };
    this.addDisposeListener(disposeListener);
    // this.service.setStreamingComposite(this);
    applyTheme();
}
