protected void processMatcher(Matcher aMatcher) {
    // $NON-NLS-1$
    boolean isDateNegative = "-".equals(aMatcher.group(1));
    String yearStr = aMatcher.group(2);
    String monthStr = aMatcher.group(3);
    String dayStr = aMatcher.group(4);
    String hourStr = aMatcher.group(5);
    String minuteStr = aMatcher.group(6);
    String secondStr = aMatcher.group(7);
    String fracSecondStr = aMatcher.group(9);
    if (AeUtil.isNullOrEmpty(fracSecondStr))
        // $NON-NLS-1$
        fracSecondStr = "0";
    String tzStr = aMatcher.group(10);
    // $NON-NLS-1$
    boolean isUTC = (AeUtil.isNullOrEmpty(tzStr)) || ("Z".equals(tzStr));
    String tzHr = null;
    String tzMin = null;
    char tzDir = '+';
    if (!isUTC) {
        tzDir = aMatcher.group(12).charAt(0);
        tzHr = aMatcher.group(13);
        tzMin = aMatcher.group(14);
    }
    int year = new Integer(yearStr).intValue();
    int era = GregorianCalendar.AD;
    if (isDateNegative) {
        era = GregorianCalendar.BC;
    }
    int millis = 0;
    if (fracSecondStr != null) {
        // $NON-NLS-1$
        millis = (int) (1000F * new Float("0." + fracSecondStr).floatValue());
    }
    TimeZone tz = createTimeZone(tzHr, tzMin, tzDir);
    setTimeZone(tz);
    setCalendar(new GregorianCalendar());
    getCalendar().setTimeZone(tz);
    getCalendar().set(Calendar.ERA, era);
    getCalendar().set(Calendar.YEAR, year);
    getCalendar().set(Calendar.MONTH, new Integer(monthStr).intValue() - 1);
    getCalendar().set(Calendar.DAY_OF_MONTH, new Integer(dayStr).intValue());
    getCalendar().set(Calendar.HOUR_OF_DAY, new Integer(hourStr).intValue());
    getCalendar().set(Calendar.MINUTE, new Integer(minuteStr).intValue());
    getCalendar().set(Calendar.SECOND, new Integer(secondStr).intValue());
    getCalendar().set(Calendar.MILLISECOND, millis);
    // Need to update the internal Calendar data structures by asking for the time in millis
    // because they are not updated until some internal data is queried.
    long time = getCalendar().getTimeInMillis();
    // Now set the time zone to UTC - the next time someone asks for any calendar field, the
    // internal data structures will be updated.
    getCalendar().setTimeZone(sUTCTimeZone);
    setTimeZone(sUTCTimeZone);
    // Work around a GNU Classpath bug: the GNU Calendar implementation
    // doesn't recalcuate its fields after setting the time zone, so always
    // set the time after the time zone.
    getCalendar().setTimeInMillis(time);
}
