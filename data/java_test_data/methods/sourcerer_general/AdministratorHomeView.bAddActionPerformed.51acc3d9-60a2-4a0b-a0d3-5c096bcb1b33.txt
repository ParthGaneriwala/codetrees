// GEN-LAST:event_tfEventNameActionPerformed
private void bAddActionPerformed(java.awt.event.ActionEvent evt) {
    // GEN-FIRST:event_bAddActionPerformed
    // TODO add your handling code here:
    String str;
    int newid;
    if (!StringHelper.validateString(this.tfEventName.getText())) {
        JOptionPane.showMessageDialog(this, "Invalid characters in Name");
    } else if (StringHelper.limit(this.tfEventName.getText())) {
        JOptionPane.showMessageDialog(this, "Event name cannot be greater than 45 characters, Please re-enter");
        this.tfEventName.setText("");
    } else if (StringHelper.limit(this.tfKeyword.getText())) {
        JOptionPane.showMessageDialog(this, "Keyword cannot be greater than 45 characters, Please re-enter");
        this.tfKeyword.setText("");
    } else if (this.tfEventName.getText().equals("") || this.tfStartDate.getText().equals("") || this.tfStartTime.getText().equals("") || this.tfStartDate.getText().equals("") || this.tfEndTime.getText().equals("") || this.taDescription.getText().isEmpty() || this.tfKeyword.getText().isEmpty() || this.tfType1.getText().isEmpty()) {
        JOptionPane.showMessageDialog(this, "All fields are mandatory");
    } else if (!StringHelper.isValidDate(this.tfStartDate.getText())) {
        JOptionPane.showMessageDialog(this, "Please enter proper Start Date");
    } else if (!StringHelper.isValidTime(this.tfStartTime.getText())) {
        JOptionPane.showMessageDialog(this, "Please enter proper Start Time");
    } else if (!StringHelper.isValidDate(this.tfEndDate.getText())) {
        JOptionPane.showMessageDialog(this, "Please enter proper End Date");
    } else if (!StringHelper.isValidTime(this.tfEndTime.getText())) {
        JOptionPane.showMessageDialog(this, "Please entere proper End time");
    } else
        try {
            if (!comparedates()) {
                JOptionPane.showMessageDialog(this, "Start date-time cannot be greater than End date-time");
            } else if (!compareschedule()) {
                JOptionPane.showMessageDialog(this, "The venue is already booked at this date-time, please" + " select some other date-time");
            } else if (this.cbVenue.getSelectedItem().equals("")) {
                JOptionPane.showMessageDialog(this, "Please select venue");
            } else if (!validateTicketRate()) {
                JOptionPane.showMessageDialog(this, "Please enter ticket rates correctly to add event");
            } else {
                Event event = new Event();
                event.setName(this.tfEventName.getText());
                str = this.tfStartDate.getText() + " " + this.tfStartTime.getText();
                try {
                    event.setBeginDateTime(StringHelper.strTotime(str));
                } catch (ParseException ex) {
                    Logger.getLogger(AdministratorHomeView.class.getName()).log(Level.SEVERE, null, ex);
                }
                str = "";
                str = this.tfEndDate.getText() + " " + this.tfEndTime.getText();
                try {
                    event.setEndDateTime(StringHelper.strTotime(str));
                } catch (ParseException ex) {
                    Logger.getLogger(AdministratorHomeView.class.getName()).log(Level.SEVERE, null, ex);
                }
                event.setDescription(this.taDescription.getText());
                Venue venue = (Venue) this.cbVenue.getSelectedItem();
                event.setVenueID(venue.getVenueID());
                event.setCancelled(false);
                event.setType(this.tfType1.getText());
                event.setKeywords(this.tfKeyword.getText());
                event.setPrice(getprice());
                EventController eventcont = new EventController();
                newid = eventcont.addEvent(event);
                if (newid != 0) {
                    event.setEventID(newid);
                    JOptionPane.showMessageDialog(this, "Event added Successfully!!");
                } else {
                    JOptionPane.showMessageDialog(this, "Error adding event");
                }
                if (TicketRateobj(event)) {
                    JOptionPane.showMessageDialog(this, "TicketRate added successfully");
                } else {
                    eventcont.deleteEvent(event);
                    JOptionPane.showMessageDialog(this, "Error adding TicketRate");
                }
            }
        } catch (ParseException ex) {
            Logger.getLogger(AdministratorHomeView.class.getName()).log(Level.SEVERE, null, ex);
        }
}
