public synchronized ContextHandler getContextHandlerByName(String name) {
    ContextHandler toBeCreated = null;
    if (name.equals(ContextHandlerManager.BT_FINDER)) {
        if (this._btFinder != null) {
            return this._btFinder;
        }
        try {
            this._btFinder = new BlueToothFinder();
            this._btFinder.startHandling();
            toBeCreated = this._btFinder;
        } catch (RuntimeException e) {
            // e.printStackTrace();
            this._btFinder = null;
            Alert alert = new Alert(BT_FINDER, "Unable to load " + BT_FINDER + "!\n The computation will continue without that handler.", null, AlertType.ERROR);
            Display.getDisplay(this._currentMIDlet).setCurrent(alert, Display.getDisplay(this._currentMIDlet).getCurrent());
        }
    } else if (name.equals(ContextHandlerManager.GPS_LOCATION)) {
        if (this._gpsLocation != null) {
            return this._gpsLocation;
        }
        try {
            this._gpsLocation = new GPSLocation();
            this._gpsLocation.startHandling();
            toBeCreated = this._gpsLocation;
        } catch (RuntimeException e) {
            // e.printStackTrace();
            this._gpsLocation = null;
            Alert alert = new Alert(GPS_LOCATION, "Unable to load " + GPS_LOCATION + "!\n The computation will continue without that handler.", null, AlertType.ERROR);
            Display.getDisplay(this._currentMIDlet).setCurrent(alert, Display.getDisplay(this._currentMIDlet).getCurrent());
        }
    } else if (name.equals(ContextHandlerManager.TIME)) {
        if (this._timeHandler != null) {
            return this._timeHandler;
        }
        try {
            this._timeHandler = new TimeHandler();
            this._timeHandler.startHandling();
            toBeCreated = this._timeHandler;
        } catch (RuntimeException e) {
            // e.printStackTrace();
            this._timeHandler = null;
            Alert alert = new Alert(TIME, "Unable to load " + TIME + "!\n The computation will continue without that handler.", null, AlertType.ERROR);
            Display.getDisplay(this._currentMIDlet).setCurrent(alert, Display.getDisplay(this._currentMIDlet).getCurrent());
        }
    } else if (name.equals(ContextHandlerManager.ACTIVITY_STATUS_HANDLER)) {
        if (this._activityStatusHandler != null) {
            return this._activityStatusHandler;
        }
        try {
            this._activityStatusHandler = new ActivityStatusHandler();
            this._activityStatusHandler.startHandling();
            toBeCreated = this._activityStatusHandler;
        } catch (RuntimeException e) {
            // e.printStackTrace();
            Alert alert = new Alert(ACTIVITY_STATUS_HANDLER, "Unable to load " + ACTIVITY_STATUS_HANDLER + "!\n The computation will continue without that handler.", null, AlertType.ERROR);
            Display.getDisplay(this._currentMIDlet).setCurrent(alert, Display.getDisplay(this._currentMIDlet).getCurrent());
        }
    } else if (name.equals(ContextHandlerManager.FILE_SYSTEM_HANDLER)) {
        if (this._fileSystemHandler != null) {
            return this._fileSystemHandler;
        }
        try {
            this._fileSystemHandler = new FileSystemHandler();
            this._fileSystemHandler.startHandling();
            toBeCreated = this._fileSystemHandler;
        } catch (RuntimeException e) {
            // e.printStackTrace();
            Alert alert = new Alert(FILE_SYSTEM_HANDLER, "Unable to load " + FILE_SYSTEM_HANDLER + "!\n The computation will continue without that handler.", null, AlertType.ERROR);
            Display.getDisplay(this._currentMIDlet).setCurrent(alert, Display.getDisplay(this._currentMIDlet).getCurrent());
        }
    } else {
    // return null;
    }
    // add frontend to the container
    if (toBeCreated != null && this._currentMIDlet instanceof FrontendContainer) {
        ((FrontendContainer) this._currentMIDlet).addFrontend(toBeCreated.getFrontEnd());
    }
    return toBeCreated;
}
