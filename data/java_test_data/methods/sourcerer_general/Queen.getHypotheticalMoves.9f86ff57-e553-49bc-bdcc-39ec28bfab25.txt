public List<Point> getHypotheticalMoves() {
    List<Point> moves = new ArrayList<Point>();
    Point p = parent.getPosition();
    // Need to compute 4 directions separately to check
    // if the move path hits a piece. You can't attack through
    // other pieces, so stop.
    p.x++;
    while (p.x < 8) {
        moves.add(new Point(p));
        if (parent.getParentBoard().get(p).getContents() != null) {
            break;
        }
        p.x++;
    }
    p = parent.getPosition();
    p.x--;
    while (p.x >= 0) {
        moves.add(new Point(p));
        if (parent.getParentBoard().get(p).getContents() != null) {
            break;
        }
        p.x--;
    }
    p = parent.getPosition();
    p.y++;
    while (p.y < 8) {
        moves.add(new Point(p));
        if (parent.getParentBoard().get(p).getContents() != null) {
            break;
        }
        p.y++;
    }
    p = parent.getPosition();
    p.y--;
    while (p.y >= 0) {
        moves.add(new Point(p));
        if (parent.getParentBoard().get(p).getContents() != null) {
            break;
        }
        p.y--;
    }
    // diagonals
    p = parent.getPosition();
    p.x++;
    p.y++;
    while (p.x < 8 && p.y < 8) {
        moves.add(new Point(p));
        if (parent.getParentBoard().get(p).getContents() != null) {
            break;
        }
        p.x++;
        p.y++;
    }
    p = parent.getPosition();
    p.x--;
    p.y++;
    while (p.x >= 0 && p.y < 8) {
        moves.add(new Point(p));
        if (parent.getParentBoard().get(p).getContents() != null) {
            break;
        }
        p.x--;
        p.y++;
    }
    p = parent.getPosition();
    p.x--;
    p.y--;
    while (p.y >= 0 && p.x >= 0) {
        moves.add(new Point(p));
        if (parent.getParentBoard().get(p).getContents() != null) {
            break;
        }
        p.x--;
        p.y--;
    }
    p = parent.getPosition();
    p.y--;
    p.x++;
    while (p.y >= 0 && p.x < 8) {
        moves.add(new Point(p));
        if (parent.getParentBoard().get(p).getContents() != null) {
            break;
        }
        p.y--;
        p.x++;
    }
    return moves;
}
