@Test
public void test() throws UIMAException {
    this.assumeBigMemoryTestsEnabled();
    this.logger.info(BIG_MEMORY_TEST_MESSAGE);
    TokenBuilder<Token, Sentence> tokenBuilder = new TokenBuilder<Token, Sentence>(Token.class, Sentence.class, "pos", "stem");
    tokenBuilder.buildTokens(this.jCas, "The dog chased the fox down the road.", "The dog chased the fox down the road .", "DT NN VBD DT NN IN DT NN .");
    AnalysisEngineDescription desc = MaltParser.getDescription();
    AnalysisEngine engine = AnalysisEngineFactory.createPrimitive(desc);
    engine.process(this.jCas);
    engine.collectionProcessComplete();
    // The -det-> dog
    // dog -nsubj-> chased
    // chased -> ROOT
    // the -det-> fox
    // fox -dobj-> chased
    // down -advmod-> chased
    // the -det-> road
    // road -pobj-> down
    // . -punct-> chased
    Collection<DependencyNode> nodes;
    nodes = JCasUtil.select(jCas, DependencyNode.class);
    // check node spans
    String[] texts = "The dog chased the fox down the road .".split(" ");
    assertEquals(texts.length, nodes.size());
    Iterator<DependencyNode> nodesIter = nodes.iterator();
    for (int i = 0; i < texts.length; ++i) {
        assertEquals(texts[i], nodesIter.next().getCoveredText());
    }
    // node aliases
    nodesIter = nodes.iterator();
    DependencyNode the1 = nodesIter.next();
    DependencyNode dog = nodesIter.next();
    DependencyNode chased = nodesIter.next();
    DependencyNode the2 = nodesIter.next();
    DependencyNode fox = nodesIter.next();
    DependencyNode down = nodesIter.next();
    DependencyNode the3 = nodesIter.next();
    DependencyNode road = nodesIter.next();
    DependencyNode period = nodesIter.next();
    // check node heads and dependency types
    assertEquals(1, the1.getHeadRelations().size());
    assertEquals(dog, the1.getHeadRelations(0).getHead());
    assertEquals("det", the1.getHeadRelations(0).getRelation());
    assertEquals(1, dog.getHeadRelations().size());
    assertEquals(chased, dog.getHeadRelations(0).getHead());
    assertEquals("nsubj", dog.getHeadRelations(0).getRelation());
    assertEquals(0, chased.getHeadRelations().size());
    assertTrue(chased instanceof TopDependencyNode);
    assertEquals(1, the2.getHeadRelations().size());
    assertEquals(fox, the2.getHeadRelations(0).getHead());
    assertEquals("det", the2.getHeadRelations(0).getRelation());
    assertEquals(1, fox.getHeadRelations().size());
    assertEquals(chased, fox.getHeadRelations(0).getHead());
    assertEquals("dobj", fox.getHeadRelations(0).getRelation());
    assertEquals(1, down.getHeadRelations().size());
    assertEquals(chased, down.getHeadRelations(0).getHead());
    assertEquals("advmod", down.getHeadRelations(0).getRelation());
    assertEquals(1, the3.getHeadRelations().size());
    assertEquals(road, the3.getHeadRelations(0).getHead());
    assertEquals("det", the3.getHeadRelations(0).getRelation());
    assertEquals(1, road.getHeadRelations().size());
    assertEquals(down, road.getHeadRelations(0).getHead());
    assertEquals("pobj", road.getHeadRelations(0).getRelation());
    assertEquals(1, period.getHeadRelations().size());
    assertEquals(chased, period.getHeadRelations(0).getHead());
    assertEquals("punct", period.getHeadRelations(0).getRelation());
    // check node children
    List<DependencyNode> emptyList = Collections.emptyList();
    assertEquals(emptyList, getChildren(the1));
    assertEquals(Arrays.asList(the1), getChildren(dog));
    assertEquals(Arrays.asList(dog, fox, down, period), getChildren(chased));
    assertEquals(emptyList, getChildren(the2));
    assertEquals(Arrays.asList(the2), getChildren(fox));
    assertEquals(Arrays.asList(road), getChildren(down));
    assertEquals(emptyList, getChildren(the3));
    assertEquals(Arrays.asList(the3), getChildren(road));
    assertEquals(emptyList, getChildren(period));
// check node parents
// TODO
}
