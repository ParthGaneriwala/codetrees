public void offerService() throws Exception {
    LOG.info("using BLOCKREPORT_INTERVAL of " + blockReportInterval + "msec" + " Initial delay: " + initialBlockReportDelay + "msec");
    while (shouldRun) {
        try {
            long startTime = now();
            if (startTime - lastHeartbeat > heartBeatInterval) {
                // 
                // All heartbeat messages include following info:
                // -- Datanode name
                // -- data transfer port
                // -- Total capacity
                // -- Bytes remaining
                // 
                lastHeartbeat = startTime;
                DatanodeCommand cmd = namenode.sendHeartbeat(dnRegistration, data.getCapacity(), data.getDfsUsed(), data.getRemaining(), xmitsInProgress, getXceiverCount());
                myMetrics.heartbeats.inc(now() - startTime);
                // LOG.info("Just sent heartbeat, with name " + localName);
                if (!processCommand(cmd))
                    continue;
            }
            // check if there are newly received blocks
            Block[] blockArray = null;
            String[] delHintArray = null;
            synchronized (receivedBlockList) {
                synchronized (delHints) {
                    int numBlocks = receivedBlockList.size();
                    if (numBlocks > 0) {
                        if (numBlocks != delHints.size()) {
                            LOG.warn("Panic: receiveBlockList and delHints are not of the same length");
                        }
                        // 
                        // Send newly-received blockids to namenode
                        // 
                        blockArray = receivedBlockList.toArray(new Block[numBlocks]);
                        delHintArray = delHints.toArray(new String[numBlocks]);
                    }
                }
            }
            if (blockArray != null) {
                if (delHintArray == null || delHintArray.length != blockArray.length) {
                    LOG.warn("Panic: block array & delHintArray are not the same");
                }
                namenode.blockReceived(dnRegistration, blockArray, delHintArray);
                synchronized (receivedBlockList) {
                    synchronized (delHints) {
                        for (int i = 0; i < blockArray.length; i++) {
                            receivedBlockList.remove(blockArray[i]);
                            delHints.remove(delHintArray[i]);
                        }
                    }
                }
            }
            // send block report
            if (startTime - lastBlockReport > blockReportInterval) {
                // 
                // Send latest blockinfo report if timer has expired.
                // Get back a list of local block(s) that are obsolete
                // and can be safely GC'ed.
                // 
                long brStartTime = now();
                Block[] bReport = data.getBlockReport();
                DatanodeCommand cmd = namenode.blockReport(dnRegistration, BlockListAsLongs.convertToArrayLongs(bReport));
                long brTime = now() - brStartTime;
                myMetrics.blockReports.inc(brTime);
                LOG.info("BlockReport of " + bReport.length + " blocks got processed in " + brTime + " msecs");
                // 
                if (resetBlockReportTime) {
                    lastBlockReport = startTime - R.nextInt((int) (blockReportInterval));
                    resetBlockReportTime = false;
                } else {
                    lastBlockReport = startTime;
                }
                processCommand(cmd);
            }
            // start block scanner
            if (blockScanner != null && blockScannerThread == null && upgradeManager.isUpgradeCompleted()) {
                LOG.info("Starting Periodic block scanner.");
                blockScannerThread = new Daemon(blockScanner);
                blockScannerThread.start();
            }
            // 
            // There is no work to do;  sleep until hearbeat timer elapses,
            // or work arrives, and then iterate again.
            // 
            long waitTime = heartBeatInterval - (System.currentTimeMillis() - lastHeartbeat);
            synchronized (receivedBlockList) {
                if (waitTime > 0 && receivedBlockList.size() == 0) {
                    try {
                        receivedBlockList.wait(waitTime);
                    } catch (InterruptedException ie) {
                    }
                }
            }
        // synchronized
        } catch (RemoteException re) {
            String reClass = re.getClassName();
            if (UnregisteredDatanodeException.class.getName().equals(reClass) || DisallowedDatanodeException.class.getName().equals(reClass) || IncorrectVersionException.class.getName().equals(reClass)) {
                LOG.warn("DataNode is shutting down: " + StringUtils.stringifyException(re));
                shutdown();
                return;
            }
            LOG.warn(StringUtils.stringifyException(re));
        } catch (IOException e) {
            LOG.warn(StringUtils.stringifyException(e));
        }
    }
// while (shouldRun)
}
