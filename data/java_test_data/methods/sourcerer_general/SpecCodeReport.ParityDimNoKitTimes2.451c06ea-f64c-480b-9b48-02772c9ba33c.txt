public static List<KitTimesBean> ParityDimNoKitTimes2(String field, String type) {
    List<KitTimesBean> ktbList = new ArrayList<KitTimesBean>();
    Map<Long, String> map = MapResultService.getMsHistoryMap();
    List<Map.Entry<Long, String>> infoIds = new ArrayList<Map.Entry<Long, String>>(map.entrySet());
    // 排序
    Collections.sort(infoIds, new Comparator<Map.Entry<Long, String>>() {

        public int compare(Map.Entry<Long, String> o1, Map.Entry<Long, String> o2) {
            return (int) (o1.getKey() - o2.getKey());
        }
    });
    // 号码上次出现位置
    Map<String, Integer> numSepMap = new HashMap<String, Integer>();
    // 计算相同号码出现间隔
    for (int i = 0; i < infoIds.size(); i++) {
        Map.Entry<Long, String> v = infoIds.get(i);
        int maxInv = 0;
        int totalInv = 0;
        int timesInv = 1;
        String vVal = "";
        if (CodeType.isEven(v.getValue())) {
            if (CodeType.isBig(v.getValue())) {
                vVal = "even_big";
            } else {
                vVal = "even_small";
            }
        } else {
            if (CodeType.isBig(v.getValue())) {
                vVal = "odd_big";
            } else {
                vVal = "odd_small";
            }
        }
        if (numSepMap.containsKey(vVal)) {
            int iVal = numSepMap.remove(vVal);
            int iInv = i - iVal;
            maxInv = iInv;
            if (numSepMap.containsKey("MAX_" + vVal)) {
                int tMaxInv = numSepMap.remove("MAX_" + vVal);
                if (maxInv < tMaxInv) {
                    maxInv = tMaxInv;
                }
            }
            if (numSepMap.containsKey("TIMES_" + vVal)) {
                timesInv = numSepMap.remove("TIMES_" + vVal);
                timesInv = timesInv + 1;
            }
            if (numSepMap.containsKey("Total_" + vVal)) {
                totalInv = numSepMap.remove("Total_" + vVal);
            }
            totalInv = totalInv + iInv;
            numSepMap.put("MAX_" + vVal, maxInv);
            numSepMap.put("TIMES_" + vVal, timesInv);
        }
        numSepMap.put(vVal, i);
    }
    ktbList.add(new KitTimesBean(1, numSepMap.get("MAX_even_big"), Double.parseDouble(numSepMap.get("TIMES_even_big").toString())));
    ktbList.add(new KitTimesBean(2, numSepMap.get("MAX_even_small"), Double.parseDouble(numSepMap.get("TIMES_even_small").toString())));
    ktbList.add(new KitTimesBean(3, numSepMap.get("MAX_odd_big"), Double.parseDouble(numSepMap.get("TIMES_odd_big").toString())));
    ktbList.add(new KitTimesBean(4, numSepMap.get("MAX_odd_small"), Double.parseDouble(numSepMap.get("TIMES_odd_small").toString())));
    return ktbList;
}
