public void predict(String inputFile, String outputFile) throws Exception {
    AbstractReader<DepNode, DepTree> reader = null;
    if (s_format.equals(AbstractReader.FORMAT_RAW))
        reader = new RawReader(inputFile, g_tokenizer);
    else if (s_format.equals(AbstractReader.FORMAT_POS))
        reader = new PosReader(inputFile);
    else if (s_format.equals(AbstractReader.FORMAT_DEP))
        reader = new DepReader(inputFile, true);
    else if (s_format.equals(AbstractReader.FORMAT_CONLLX))
        reader = new CoNLLXReader(inputFile, true);
    else if (s_format.equals(AbstractReader.FORMAT_SRL))
        reader = new SRLReader(inputFile, false);
    reader.setLanguage(s_language);
    PrintStream fout = IOUtil.createPrintFileStream(outputFile);
    DepTree tree;
    int n = 0;
    System.out.println("\n* Predict");
    while (true) {
        tree = reader.nextTree();
        if (tree == null)
            break;
        if (s_format.equals(AbstractReader.FORMAT_RAW)) {
            g_postagger.postag(tree);
            g_lemmatizer.lemmatize(tree);
            g_parser.parse(tree);
        } else if (s_format.equals(AbstractReader.FORMAT_POS)) {
            g_lemmatizer.lemmatize(tree);
            g_parser.parse(tree);
        }
        if (!s_format.equals(AbstractReader.FORMAT_SRL))
            tree.setPredicates(s_language);
        g_labeler.parse(tree);
        n++;
        fout.println(tree + "\n");
        if (n % 100 == 0)
            System.out.print("\r- labeling: " + n);
    }
    System.out.println("\r- labeling: " + n);
    fout.close();
    reader.close();
}
