public GenericBean processAction(ActionRequest request, ActionResponse response) throws Exception {
    // Determine the project container to use
    Project project = findProject(request);
    if (project == null) {
        throw new Exception("Project is null");
    }
    // Check the user's permissions
    User user = getUser(request);
    if (!ProjectUtils.hasAccess(project.getId(), user, "project-reviews-add")) {
        throw new PortletException("Unauthorized to add in this project");
    }
    // Populate any info from the request
    ProjectRating thisProjectRating = (ProjectRating) getFormBean(request, ProjectRating.class);
    // Set default values when saving records
    thisProjectRating.setProjectId(project.getId());
    thisProjectRating.setModifiedBy(user.getId());
    // Determine the database connection to use
    Connection db = useConnection(request);
    // Save the record
    boolean isNew = false;
    ProjectRating previousRating = null;
    if (thisProjectRating.getId() == -1) {
        // This appears to be a new review
        isNew = true;
        thisProjectRating.setEnteredBy(user.getId());
    } else {
        // Load the previous record
        previousRating = new ProjectRating(db, thisProjectRating.getId());
        thisProjectRating.setEnteredBy(previousRating.getEnteredBy());
        // Verify the record matches the specified project
        if (previousRating.getProjectId() != project.getId()) {
            throw new PortletException("Mismatched projectId found");
        }
    }
    boolean result = ProjectRating.save(db, thisProjectRating);
    if (!result) {
        return thisProjectRating;
    }
    // trigger the workflow
    if (isNew) {
        PortalUtils.processInsertHook(request, thisProjectRating);
    } else {
        PortalUtils.processUpdateHook(request, previousRating, thisProjectRating);
    }
    // Index the saved rating
    thisProjectRating = new ProjectRating(db, thisProjectRating.getId());
    indexAddItem(request, thisProjectRating);
    // Get the user's old tags and merge them with any new ones
    UserTagLogList tagLogList = new UserTagLogList();
    tagLogList.setUserId(thisProjectRating.getEnteredBy());
    tagLogList.setLinkModuleId(Constants.PROJECT_REVIEW_FILES);
    tagLogList.setLinkItemId(project.getId());
    tagLogList.buildList(db);
    // Merge the tags for updating
    String tags = request.getParameter("tags");
    tagLogList.updateTags(db, tags);
    // This call will close panels and perform redirects
    return (PortalUtils.performRefresh(request, response, "/show/reviews"));
}
