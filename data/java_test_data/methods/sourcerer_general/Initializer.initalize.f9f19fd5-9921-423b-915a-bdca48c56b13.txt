public static void initalize(String... initialPlayers) {
    Float initialChips = (float) UserService.initialEndowment;
    Object[] initialVars = { 0, 0.0f, false, false, false, false, false, false, 1, 1, 0, initialChips, 0, 0, 0, 0, 0, 0, 0, 1.0f, 0 };
    Object[] chips = new Float[initialPlayers.length];
    Object[] futures = new Integer[initialPlayers.length];
    Object[] players = new String[initialPlayers.length + 1];
    Object[] playerVars = new Object[initialVars.length * initialPlayers.length];
    for (int i = 0; i < chips.length; i++) {
        players[i] = initialPlayers[i];
        chips[i] = initialChips;
        futures[i] = 0;
        System.arraycopy(initialVars, 0, playerVars, i * initialVars.length, initialVars.length);
    }
    players[initialPlayers.length] = "ffinalplaya";
    createDataDB("BBWebServer/transactions.db", -1, 0);
    createDataDB("playerdata.db", players);
    createDataDB("chipdata.db", chips);
    createDataDB("futures.db", futures);
    createDataDB("orderbook.db", 99999);
    createDataDB("playervars.db", playerVars);
    createDataDB("rollover.db", new DataInit() {

        public void init(DataOutputStream db) throws IOException {
            for (int i = 0; i < BettingBot.maxbots + BettingBot.maxevents; i++) {
                db.writeInt(0);
            }
        }
    });
    createDataDB("jackpot.db", BettingBot.initialSlotJackpot);
    createDataDB("weekstat.db", new DataInit() {

        public void init(DataOutputStream db) throws IOException {
            // circulationWeek
            db.writeInt(0);
            // numberRegWeek
            db.writeInt(0);
            // stdevWeek
            db.writeInt(0);
            // skewnessWeek
            db.writeDouble(0);
            // kurtosisWeek
            db.writeDouble(0);
            // inequalityWeek
            db.writeDouble(0);
            // averageWeek
            db.writeDouble(0);
            // medianWeek
            db.writeDouble(0);
            // circulationLast
            db.writeInt(0);
            // numberRegLast
            db.writeInt(0);
            // stdevLast
            db.writeInt(0);
            // skewnessLast
            db.writeDouble(0);
            // kurtosisLast
            db.writeDouble(0);
            // inequalityLast
            db.writeDouble(0);
            // averageLast
            db.writeDouble(0);
            // medianLast
            db.writeDouble(0);
        }
    });
    for (int i = 1; i <= BettingBot.maxevents; i++) {
        String event = "event" + i;
        ;
        createDataDB(event + ".bk", "none");
        createDataDB(event + ".b2", 9998);
        createDataDB(event + ".b3", 9998);
    }
    createDataDB("champs.db", new DataInit() {

        public void init(DataOutputStream db) throws IOException {
            // weekwinner
            db.writeBytes("none");
            db.writeByte('\n');
            // monthwinner
            db.writeBytes("none");
            db.writeByte('\n');
            db.writeBytes("EndOfFileBBrec");
        }
    });
    createDataDB("chipmonth.db", new DataInit() {

        public void init(DataOutputStream db) throws IOException {
            // monthmonth
            db.writeInt(0);
            // monthday
            db.writeInt(0);
            // monthhour
            db.writeInt(0);
            // monthminute
            db.writeInt(0);
            // monthnumber
            db.writeInt(0);
        }
    });
    createDataDB("chipweek.db", new DataInit() {

        public void init(DataOutputStream db) throws IOException {
            // weekday3
            db.writeInt(0);
            // weekday2
            db.writeInt(0);
            // weekhour
            db.writeInt(0);
            // weekminute
            db.writeInt(0);
            // weeknumber
            db.writeInt(0);
        }
    });
    createDataDB("autoreco.bk", new DataInit() {

        public void init(DataOutputStream db) throws IOException {
            for (int i = 0; i < BettingBot.maxbots; i++) {
                // probablyTeam[i]=inff.readBoolean();
                db.writeBoolean(false);
                // probableStatus[i]=inff.readInt();
                db.writeInt(0);
                // probableNumber[i]=inff.readLine();
                db.writeBytes("NA\n");
            }
        }
    });
    createDataDB("records.db", new DataInit() {

        public void init(DataOutputStream db) throws IOException {
            // Historic Record
            // holder
            db.writeBytes("default\n");
            // player
            db.writeBytes("default\n");
            // date
            db.writeBytes("default\n");
            // Historic Second Record
            // holder
            db.writeBytes("default\n");
            // player
            db.writeBytes("default\n");
            // date
            db.writeBytes("default\n");
            // Historic Place Record
            // holder
            db.writeBytes("default\n");
            // player
            db.writeBytes("default\n");
            // date
            db.writeBytes("default\n");
            // Historic AntiPlace Record
            // holder
            db.writeBytes("default\n");
            // player
            db.writeBytes("default\n");
            // date
            db.writeBytes("default\n");
            // Historic Anti Record
            // holder
            db.writeBytes("default\n");
            // player
            db.writeBytes("default\n");
            // date
            db.writeBytes("default\n");
            // Historic Anti Second Record
            // holder
            db.writeBytes("default\n");
            // player
            db.writeBytes("default\n");
            // date
            db.writeBytes("default\n");
            // Historic Double Record
            // holder
            db.writeBytes("default\n");
            // player1
            db.writeBytes("default\n");
            // player2
            db.writeBytes("default\n");
            // date
            db.writeBytes("default\n");
            // Historic Tricast Record
            // holder
            db.writeBytes("default\n");
            // date
            db.writeBytes("default\n");
            // Historic Highest Odds
            // player
            db.writeBytes("default\n");
            // bot
            db.writeBytes("default\n");
            // date
            db.writeBytes("default\n");
            // Historic Highest Second Odds
            // player
            db.writeBytes("default\n");
            // bot
            db.writeBytes("default\n");
            // date
            db.writeBytes("default\n");
            // Historic Highest Place Odds
            // player
            db.writeBytes("default\n");
            // bot
            db.writeBytes("default\n");
            // date
            db.writeBytes("default\n");
            // Historic Highest Double Odds
            // player1
            db.writeBytes("default\n");
            // player2
            db.writeBytes("default\n");
            // bot
            db.writeBytes("default\n");
            // date
            db.writeBytes("default\n");
            // Historic Highest Tricast Odds Bet
            // bot
            db.writeBytes("default\n");
            // date
            db.writeBytes("default\n");
            // Historic Highest Pool
            // date
            db.writeBytes("default\n");
            // Historic Highest Rollover
            // date
            db.writeBytes("default\n");
            // Historic Record High
            db.writeInt(0);
            // Historic Second Record High
            db.writeInt(0);
            // Historic Place Record High
            db.writeInt(0);
            // Historic Anti Record High
            db.writeFloat(0.0f);
            // Historic Anti Second Record High
            db.writeFloat(0.0f);
            // Historic Anti Place Record High
            db.writeFloat(0.0f);
            // Historic Double Record High
            db.writeInt(0);
            // Historic Tricast Record High
            db.writeInt(0);
            // Historic Highest Odds High
            db.writeInt(0);
            // Historic Highest Second Odds High
            db.writeInt(0);
            // Historic Highest Place Odds High
            db.writeInt(0);
            // Historic Highest Double Odds High
            db.writeInt(0);
            // Historic Highest Tricast Odds High
            db.writeInt(0);
            // Historic Highest Pool High
            db.writeFloat(0.0f);
            // Historic Highest Rollover High
            db.writeInt(0);
        }
    });
}
