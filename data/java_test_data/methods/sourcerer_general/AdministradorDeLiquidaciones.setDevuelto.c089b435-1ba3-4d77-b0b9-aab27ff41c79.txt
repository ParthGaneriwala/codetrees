/* Control de recibos */
public static void setDevuelto(int numeroRecibo, int idZona, boolean valor) throws ValidadorException {
    Liquidacion ultimaLiq = AdministradorDeLiquidaciones.getUltimaLiquidacion();
    Session s = HibernateUtil.getSession();
    Query q = s.createQuery("from Recibo r where r.numeroRecibo = " + numeroRecibo);
    Recibo recibo = (Recibo) q.uniqueResult();
    if (recibo == null)
        throw new ValidadorException("No existe un recibo con ese n�mero en la base de datos");
    if (recibo.getLiquidacion().getIdLiq() != ultimaLiq.getIdLiq())
        throw new ValidadorException("El recibo no pertenece a la �ltima liquidaci�n.");
    if (recibo.getSocio().getZona().getIdZona() != idZona)
        throw new ValidadorException("El recibo no pertenece a la zona seleccionada.");
    if (valor == false) {
        int mesActual = recibo.getMes();
        int anioActual = recibo.getAnio();
        mesActual--;
        if (mesActual == 0) {
            mesActual = 12;
            anioActual--;
        }
        List recibos = ultimaLiq.getRecibosFor(recibo.getSocio());
        Iterator i = recibos.iterator();
        while (i.hasNext()) {
            Recibo r = (Recibo) i.next();
            if (r.getMes() == mesActual && r.getAnio() == anioActual && r.isDevuelto())
                throw new ValidadorException("Primero debe pagar el recibo del mes anterior.");
        }
    } else if (valor == true) {
        int mesActual = recibo.getMes();
        int anioActual = recibo.getAnio();
        mesActual++;
        if (mesActual == 13) {
            mesActual = 1;
            anioActual++;
        }
        List recibos = ultimaLiq.getRecibosFor(recibo.getSocio());
        Iterator i = recibos.iterator();
        while (i.hasNext()) {
            Recibo r = (Recibo) i.next();
            if (r.getMes() == mesActual && r.getAnio() == anioActual && !r.isDevuelto())
                throw new ValidadorException("Primero debe devolver el recibo del mes siguiente.");
        }
    }
    recibo.setDevuelto(valor);
    s.beginTransaction();
    s.update(recibo);
    s.getTransaction().commit();
}
