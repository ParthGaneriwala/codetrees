private void escribirArchivoMoraCiclica(ID idEmpresa) throws Exception {
    try {
        List<Ciclo__c> ciclos = this.obtenerCiclosAbiertos(idEmpresa);
        String mesAno1 = null;
        String mesAno2 = null;
        int mes1 = -1;
        int mes2 = -1;
        // Se eliminan los ciclos de recuperaciones y se obtienen los 2 o 1 ciclo para la mora ciclica
        for (Iterator<Ciclo__c> iterCiclos = ciclos.iterator(); iterCiclos.hasNext(); ) {
            Ciclo__c ciclo = iterCiclos.next();
            int cicloDeCobro = Util.obtenerCicloCobro(ciclo.getTC_Ciclo__c());
            if (cicloDeCobro >= Constantes.CICLO_60) {
                iterCiclos.remove();
            } else {
                String mesAno = Util.obtenerMesAnoCobro(ciclo.getTC_Ciclo__c());
                if (mesAno1 == null) {
                    mesAno1 = mesAno;
                } else {
                    if (!mesAno.equalsIgnoreCase(mesAno1)) {
                        if (mesAno2 == null) {
                            mesAno2 = mesAno;
                        }
                    }
                }
            }
        }
        // Determina cual mes es menor y los acomoda
        if (mesAno2 != null && mesAno1 != null) {
            if (Util.obtenerAnoCobro(mesAno1).equals(Util.obtenerAnoCobro(mesAno2))) {
                if (Integer.parseInt(Util.obtenerMesCobro(mesAno1)) > Integer.parseInt(Util.obtenerMesCobro(mesAno2))) {
                    String mesAnoTemp = mesAno1;
                    mesAno1 = mesAno2;
                    mesAno1 = mesAnoTemp;
                }
            } else {
                if (Integer.parseInt(Util.obtenerAnoCobro(mesAno1)) > Integer.parseInt(Util.obtenerAnoCobro(mesAno2))) {
                    String mesAnoTemp = mesAno1;
                    mesAno1 = mesAno2;
                    mesAno1 = mesAnoTemp;
                }
            }
        }
        // Se obtienen los ciclos por el mes y ano correspondientes
        List<Ciclo__c> ciclosRehabMes1 = new ArrayList<Ciclo__c>();
        if (mesAno1 != null) {
            mes1 = Integer.parseInt(Util.obtenerMesCobro(mesAno1));
            ciclosRehabMes1 = this.obtenerCiclosMes(idEmpresa, mesAno1);
        }
        List<Ciclo__c> ciclosRehabMes2 = new ArrayList<Ciclo__c>();
        if (mesAno2 != null) {
            mes2 = Integer.parseInt(Util.obtenerMesCobro(mesAno2));
            ciclosRehabMes2 = this.obtenerCiclosMes(idEmpresa, mesAno2);
        }
        for (Iterator<Ciclo__c> iterCiclos = ciclosRehabMes1.iterator(); iterCiclos.hasNext(); ) {
            Ciclo__c ciclo = iterCiclos.next();
            int cicloDeCobro = Integer.parseInt(ciclo.getTC_Ciclo__c().substring(6, 8));
            if (cicloDeCobro >= Constantes.CICLO_60) {
                iterCiclos.remove();
            }
        }
        for (Iterator<Ciclo__c> iterCiclos = ciclosRehabMes2.iterator(); iterCiclos.hasNext(); ) {
            Ciclo__c ciclo = iterCiclos.next();
            int cicloDeCobro = Integer.parseInt(ciclo.getTC_Ciclo__c().substring(6, 8));
            if (cicloDeCobro >= Constantes.CICLO_60) {
                iterCiclos.remove();
            }
        }
        List<Map<Integer, ReporteMoraCiclica>> morasCiclicas1 = new ArrayList<Map<Integer, ReporteMoraCiclica>>();
        if (mes1 > -1) {
            morasCiclicas1 = this.generarMoraCiclica(ciclosRehabMes1);
        }
        List<Map<Integer, ReporteMoraCiclica>> morasCiclicas2 = new ArrayList<Map<Integer, ReporteMoraCiclica>>();
        if (mes2 > -1) {
            morasCiclicas2 = this.generarMoraCiclica(ciclosRehabMes2);
        }
        this.generarExcel(morasCiclicas1, mes1, morasCiclicas2, mes2);
        logger.info("       HORA FIN: " + new Date());
    } catch (Exception e) {
        logger.error(e);
        throw e;
    }
}
