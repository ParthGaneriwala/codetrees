protected void simpleInitGame() {
    setupPhysics();
    getPhysicsSpace().addToUpdateCallbacks(new PhysicsUpdateCallback() {

        public void beforeStep(PhysicsSpace space, float time) {
            checkBuoyantObjects();
        }

        public void afterStep(PhysicsSpace space, float time) {
        }
    });
    showPhysics = true;
    display.setTitle("Water Test");
    cam.setFrustumPerspective(45.0f, (float) display.getWidth() / (float) display.getHeight(), 1f, farPlane);
    cam.setLocation(new Vector3f(100, 50, 100));
    cam.lookAt(new Vector3f(0, 0, 0), Vector3f.UNIT_Y);
    cam.update();
    setupKeyBindings();
    setupFog();
    Node reflectedNode = new Node("reflectNode");
    buildSkyBox();
    reflectedNode.attachChild(skybox);
    reflectedNode.attachChild(createObjects());
    rootNode.attachChild(reflectedNode);
    // populateMarble();
    waterEffectRenderPass = new WaterRenderPass(cam, 4, true, true);
    waterEffectRenderPass.setClipBias(0.5f);
    waterEffectRenderPass.setWaterMaxAmplitude(5f);
    // setting to default value just to show
    waterEffectRenderPass.setWaterPlane(new Plane(new Vector3f(0.0f, 1.0f, 0.0f), 0.0f));
    waterHeightGenerator = new WaterHeightGenerator();
    waterHeightGenerator.setHeightbig(5f);
    waterHeightGenerator.setScalexbig(waterHeightGenerator.getScalexbig());
    waterHeightGenerator.setScaleybig(waterHeightGenerator.getScaleybig());
    waterHeightGenerator.setSpeedbig(waterHeightGenerator.getSpeedbig());
    // waterHeightGenerator.getHeight(x, z, t)
    this.heightTimer = Timer.getTimer();
    projectedGrid = new ProjectedGrid("ProjectedGrid", cam, 100, 70, 0.01f, waterHeightGenerator);
    waterEffectRenderPass.setWaterEffectOnSpatial(projectedGrid);
    // floor.attachChild(visualFloor);
    rootNode.attachChild(projectedGrid);
    // or implement your own waves like this(or in a separate class)...
    // projectedGrid = new ProjectedGrid( "ProjectedGrid", cam, 50, 50, 0.01f, new HeightGenerator() {
    // public float getHeight( float x, float z, float time ) {
    // return FastMath.sin(x*0.05f+time*2.0f)+FastMath.cos(z*0.1f+time*4.0f)*2;
    // }
    // } );
    // rootNode.attachChild( projectedGrid );
    createDebugQuads();
    rootNode.attachChild(debugQuadsNode);
    waterEffectRenderPass.setReflectedScene(reflectedNode);
    waterEffectRenderPass.setSkybox(skybox);
    pManager.add(waterEffectRenderPass);
    RenderPass rootPass = new RenderPass();
    rootPass.add(rootNode);
    pManager.add(rootPass);
    RenderPass fpsPass = new RenderPass();
    fpsPass.add(fpsNode);
    pManager.add(fpsPass);
    rootNode.setCullMode(SceneElement.CULL_NEVER);
    rootNode.setRenderQueueMode(Renderer.QUEUE_OPAQUE);
    fpsNode.setRenderQueueMode(Renderer.QUEUE_OPAQUE);
}
