public String toXml(String rootNodeName) {
    String xml = super.toXml(rootNodeName);
    Document doc = (Document) XmlHelper.xmlFromString(xml);
    // create new root element to contain the x and y values of the separator
    Element root = doc.getDocumentElement();
    Element pos = doc.createElement("Position");
    Element xElement = doc.createElement("X");
    Element yElement = doc.createElement("Y");
    Text xText = doc.createTextNode("" + this.getBounds().x);
    Text yText = doc.createTextNode("" + this.getBounds().y);
    xElement.appendChild(xText);
    yElement.appendChild(yText);
    pos.appendChild(xElement);
    pos.appendChild(yElement);
    root.appendChild(pos);
    // create a new element to house the "incoming" streams
    Element inStream = doc.createElement("InStreams");
    // iterate through the object's incoming streams
    Iterator<IChild> it = this.inStreams.iterator();
    while (it.hasNext()) {
        IChild currentChild = it.next();
        String xmlStr = ((IXmlOperations) currentChild).toXml();
        Text t = doc.createTextNode(xmlStr);
        inStream.appendChild(t);
    }
    // append to the root node
    root.appendChild(inStream);
    // rename "children" tag to "OutStream" in order to make the tag
    // more descriptive
    Node n = doc.getElementsByTagName("Children").item(0);
    n.getParentNode().removeChild(n);
    // list of children
    List<IChild> children = this.getChildren();
    Iterator i = children.iterator();
    String newXml = "";
    newXml += "<OutStreams>";
    while (i.hasNext()) {
        newXml += ((IXmlOperations) i.next()).toXml();
    }
    newXml += "</OutStreams>";
    // create a new text node to append to the document
    Text t = doc.createTextNode(newXml);
    root.appendChild(t);
    xml = XmlHelper.xmlToString(doc);
    xml = xml.replaceAll("(\\&gt\\;)+", ">");
    xml = xml.replaceAll("(\\&lt\\;)+", "<");
    return xml;
}
