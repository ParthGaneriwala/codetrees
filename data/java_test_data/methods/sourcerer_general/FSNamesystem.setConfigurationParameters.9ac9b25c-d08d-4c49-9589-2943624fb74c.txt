private void setConfigurationParameters(Configuration conf) throws IOException {
    fsNamesystemObject = this;
    try {
        fsOwner = UnixUserGroupInformation.login(conf);
    } catch (LoginException e) {
        throw new IOException(StringUtils.stringifyException(e));
    }
    LOG.info("fsOwner=" + fsOwner);
    this.supergroup = conf.get("dfs.permissions.supergroup", "supergroup");
    this.isPermissionEnabled = conf.getBoolean("dfs.permissions", true);
    LOG.info("supergroup=" + supergroup);
    LOG.info("isPermissionEnabled=" + isPermissionEnabled);
    short filePermission = (short) conf.getInt("dfs.upgrade.permission", 0777);
    this.defaultPermission = PermissionStatus.createImmutable(fsOwner.getUserName(), supergroup, new FsPermission(filePermission));
    this.replicator = new ReplicationTargetChooser(conf.getBoolean("dfs.replication.considerLoad", true), this, clusterMap);
    this.defaultReplication = conf.getInt("dfs.replication", 3);
    this.maxReplication = conf.getInt("dfs.replication.max", 512);
    this.minReplication = conf.getInt("dfs.replication.min", 1);
    if (minReplication <= 0)
        throw new IOException("Unexpected configuration parameters: dfs.replication.min = " + minReplication + " must be greater than 0");
    if (maxReplication >= (int) Short.MAX_VALUE)
        throw new IOException("Unexpected configuration parameters: dfs.replication.max = " + maxReplication + " must be less than " + (Short.MAX_VALUE));
    if (maxReplication < minReplication)
        throw new IOException("Unexpected configuration parameters: dfs.replication.min = " + minReplication + " must be less than dfs.replication.max = " + maxReplication);
    this.maxReplicationStreams = conf.getInt("dfs.max-repl-streams", 2);
    long heartbeatInterval = conf.getLong("dfs.heartbeat.interval", 3) * 1000;
    this.heartbeatRecheckInterval = conf.getInt("heartbeat.recheck.interval", // 5 minutes
    5 * 60 * 1000);
    this.heartbeatExpireInterval = 2 * heartbeatRecheckInterval + 10 * heartbeatInterval;
    this.replicationRecheckInterval = conf.getInt("dfs.replication.interval", 3) * 1000L;
    this.decommissionRecheckInterval = conf.getInt("dfs.namenode.decommission.interval", 5 * 60) * 1000L;
    this.defaultBlockSize = conf.getLong("dfs.block.size", DEFAULT_BLOCK_SIZE);
    this.maxFsObjects = conf.getLong("dfs.max.objects", 0);
    this.blockInvalidateLimit = Math.max(this.blockInvalidateLimit, 20 * (int) (heartbeatInterval / 1000));
    this.accessTimePrecision = conf.getLong("dfs.access.time.precision", 0);
}
