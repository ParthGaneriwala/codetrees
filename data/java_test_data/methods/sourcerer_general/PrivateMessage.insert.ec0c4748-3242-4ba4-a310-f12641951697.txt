public boolean insert(Connection db) throws SQLException {
    if (!isValid()) {
        return false;
    }
    Exception errorMessage = null;
    boolean commit = db.getAutoCommit();
    try {
        if (commit) {
            db.setAutoCommit(false);
        }
        StringBuffer sql = new StringBuffer();
        sql.append("INSERT INTO project_private_message " + "(" + (id > -1 ? "message_id," : "") + "project_id, " + "parent_id, " + "link_module_id, " + "link_item_id, " + "body, " + (entered != null ? "entered, " : "") + "enteredby, " + (readDate != null ? "read_date, " : "") + "read_by, " + (lastReplyDate != null ? "last_reply_date, " : "") + "link_project_id, " + "deleted_by_entered_by, " + "deleted_by_user_id )");
        sql.append("VALUES (");
        if (id > -1) {
            sql.append("?, ");
        }
        if (entered != null) {
            sql.append("?, ");
        }
        if (readDate != null) {
            sql.append("?, ");
        }
        if (lastReplyDate != null) {
            sql.append("?, ");
        }
        sql.append("?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
        int i = 0;
        PreparedStatement pst = db.prepareStatement(sql.toString());
        if (id > -1) {
            pst.setInt(++i, id);
        }
        DatabaseUtils.setInt(pst, ++i, projectId);
        DatabaseUtils.setInt(pst, ++i, parentId);
        DatabaseUtils.setInt(pst, ++i, linkModuleId);
        DatabaseUtils.setInt(pst, ++i, linkItemId);
        pst.setString(++i, body);
        if (entered != null) {
            pst.setTimestamp(++i, entered);
        }
        DatabaseUtils.setInt(pst, ++i, enteredBy);
        if (readDate != null) {
            pst.setTimestamp(++i, readDate);
        }
        DatabaseUtils.setInt(pst, ++i, readBy);
        if (lastReplyDate != null) {
            pst.setTimestamp(++i, lastReplyDate);
        }
        DatabaseUtils.setInt(pst, ++i, linkProjectId);
        pst.setBoolean(++i, deletedByEnteredBy);
        pst.setBoolean(++i, deletedByUserId);
        pst.execute();
        pst.close();
        id = DatabaseUtils.getCurrVal(db, "project_private_message_message_id_seq", id);
        if (commit) {
            db.commit();
        }
    } catch (Exception e) {
        errorMessage = e;
        if (commit) {
            db.rollback();
        }
    } finally {
        if (commit) {
            db.setAutoCommit(true);
        }
    }
    if (errorMessage != null) {
        throw new SQLException(errorMessage.getMessage());
    }
    return true;
}
