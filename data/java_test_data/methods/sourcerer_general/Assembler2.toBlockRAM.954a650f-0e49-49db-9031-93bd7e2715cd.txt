public String toBlockRAM(String name) {
    StringBuffer b = new StringBuffer();
    b.append("/*\n" + " * " + name + " generated by KCAsm at " + (new Date()).toString() + "\n" + " */\n\n" + "module " + name + "(address, instruction, clk);\n");
    b.append("input [9:0] address;\n" + "output [17:0] instruction;\n" + "input clk;\n" + "RAMB16_S18 ram_1024_x_18(\n" + "	.DI (16'b0),\n" + "	.DIP (2'b0),\n" + "	.EN (1'b1),\n" + "	.WE (1'b0),\n" + "	.SSR (1'b0),\n" + "	.CLK (clk),\n" + "	.ADDR (address),\n" + "	.DO (instruction[15:0]),\n" + "	.DOP (instruction[17:16])\n" + ");\n" + "// synthesis translate_off\n");
    String[] hn = new String[0x40 + 0x08];
    // INIT
    for (int i = 0; i < 0x40; ++i) {
        String h = "";
        for (int j = 0; j < 16; ++j) h = String.format("%04X", program[j + i * 16] & 0xffff) + h;
        hn[i] = h;
    }
    // INITP
    for (int i = 0; i < 0x08; ++i) {
        String h = "";
        for (int j = 0; j < 64; ++j) h = String.format("%X", (program[i * 128 + j * 2 + 1] >> 14) & 0xc | (program[i * 128 + j * 2] >> 16) & 0x3) + h;
        hn[0x40 + i] = h;
    }
    b.append("/*\tsynthesis\n");
    for (int i = 0; i < 0x40; ++i) b.append("\tinit_" + String.format("%02X", i) + " = \"" + hn[i] + "\"\n");
    for (int i = 0; i < 0x08; ++i) b.append("\tinitp_" + String.format("%02X", i) + " = \"" + hn[0x40 + i] + "\"\n");
    b.append("*/\n");
    b.append("// synthesis translate_off\n");
    for (int i = 0; i < 0x40; ++i) b.append("defparam ram_1024_x_18.INIT_" + String.format("%02X", i) + " = 256'h" + hn[i] + ";\n");
    for (int i = 0; i < 0x08; ++i) b.append("defparam ram_1024_x_18.INITP_" + String.format("%02X", i) + " = 256'h" + hn[0x40 + i] + ";\n");
    b.append("// synthesis translate_on\n");
    for (int i = 0; i < 0x40; ++i) b.append("// synthesis attribute INIT_" + String.format("%02X", i) + " of ram_1024_x_18 is \"" + hn[i] + "\"\n");
    for (int i = 0; i < 0x08; ++i) b.append("// synthesis attribute INITP_" + String.format("%02X", i) + " of ram_1024_x_18 is \"" + hn[0x40 + i] + "\"\n");
    b.append("endmodule\n");
    return b.toString();
}
