private void processSetCssNameMapping(NodeTraversal t, Node n, Node parent) {
    Node left = n.getFirstChild();
    Node arg = left.getNext();
    if (verifySetCssNameMapping(t, left, arg)) {
        // Translate OBJECTLIT into SubstitutionMap. All keys and
        // values must be strings, or an error will be thrown.
        final Map<String, String> cssNames = Maps.newHashMap();
        for (Node key = arg.getFirstChild(); key != null; key = key.getNext()) {
            Node value = key.getFirstChild();
            if (key.getType() != Token.STRING || value == null || value.getType() != Token.STRING) {
                compiler.report(t.makeError(n, NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR));
                return;
            }
            cssNames.put(key.getString(), value.getString());
        }
        String styleStr = "BY_PART";
        if (arg.getNext() != null) {
            styleStr = arg.getNext().getString();
        }
        final CssRenamingMap.Style style;
        try {
            style = CssRenamingMap.Style.valueOf(styleStr);
        } catch (IllegalArgumentException e) {
            compiler.report(t.makeError(n, INVALID_STYLE_ERROR, styleStr));
            return;
        }
        if (style == CssRenamingMap.Style.BY_PART) {
            // Make sure that no keys contain -'s
            List<String> errors = Lists.newArrayList();
            for (String key : cssNames.keySet()) {
                if (key.contains("-")) {
                    errors.add(key);
                }
            }
            if (errors.size() != 0) {
                compiler.report(t.makeError(n, INVALID_CSS_RENAMING_MAP, errors.toString()));
            }
        } else if (style == CssRenamingMap.Style.BY_WHOLE) {
            // Verifying things is a lot trickier here. We just do a quick
            // n^2 check over the map which makes sure that if "a-b" in
            // the map, then map(a-b) = map(a)-map(b).
            // To speed things up, only consider cases where len(b) <= 10
            List<String> errors = Lists.newArrayList();
            for (Map.Entry<String, String> b : cssNames.entrySet()) {
                if (b.getKey().length() > 10)
                    continue;
                for (Map.Entry<String, String> a : cssNames.entrySet()) {
                    String combined = cssNames.get(a.getKey() + "-" + b.getKey());
                    if (combined != null && !combined.equals(a.getValue() + "-" + b.getValue())) {
                        errors.add("map(" + a.getKey() + "-" + b.getKey() + ") != map(" + a.getKey() + ")-map(" + b.getKey() + ")");
                    }
                }
            }
            if (errors.size() != 0) {
                compiler.report(t.makeError(n, INVALID_CSS_RENAMING_MAP, errors.toString()));
            }
        }
        CssRenamingMap cssRenamingMap = new CssRenamingMap() {

            @Override
            public String get(String value) {
                if (cssNames.containsKey(value)) {
                    return cssNames.get(value);
                } else {
                    return value;
                }
            }

            @Override
            public CssRenamingMap.Style getStyle() {
                return style;
            }
        };
        compiler.setCssRenamingMap(cssRenamingMap);
        parent.getParent().removeChild(parent);
        compiler.reportCodeChange();
    }
}
