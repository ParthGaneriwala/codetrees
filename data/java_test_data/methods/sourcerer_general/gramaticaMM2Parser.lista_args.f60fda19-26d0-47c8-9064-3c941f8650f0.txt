// $ANTLR start "lista_args"
public final gramaticaMM2Parser.lista_args_return lista_args() throws RecognitionException {
    gramaticaMM2Parser.lista_args_return retval = new gramaticaMM2Parser.lista_args_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token COMMA146 = null;
    gramaticaMM2Parser.expressao_return expressao145 = null;
    gramaticaMM2Parser.expressao_return expressao147 = null;
    CommonTree COMMA146_tree = null;
    RewriteRuleTokenStream stream_COMMA = new RewriteRuleTokenStream(adaptor, "token COMMA");
    RewriteRuleSubtreeStream stream_expressao = new RewriteRuleSubtreeStream(adaptor, "rule expressao");
    try {
        // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:134:12: ( expressao ( COMMA expressao )* -> ^( LIST_ARGS ( expressao )+ ) )
        // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:134:14: expressao ( COMMA expressao )*
        {
            pushFollow(FOLLOW_expressao_in_lista_args1391);
            expressao145 = expressao();
            state._fsp--;
            stream_expressao.add(expressao145.getTree());
            // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:134:23: ( COMMA expressao )*
            loop23: do {
                int alt23 = 2;
                int LA23_0 = input.LA(1);
                if ((LA23_0 == COMMA)) {
                    alt23 = 1;
                }
                switch(alt23) {
                    case 1:
                        // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:134:24: COMMA expressao
                        {
                            COMMA146 = (Token) match(input, COMMA, FOLLOW_COMMA_in_lista_args1393);
                            stream_COMMA.add(COMMA146);
                            pushFollow(FOLLOW_expressao_in_lista_args1395);
                            expressao147 = expressao();
                            state._fsp--;
                            stream_expressao.add(expressao147.getTree());
                        }
                        break;
                    default:
                        break loop23;
                }
            } while (true);
            // AST REWRITE
            // elements: expressao
            // token labels:
            // rule labels: retval
            // token list labels:
            // rule list labels:
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", retval != null ? retval.tree : null);
            root_0 = (CommonTree) adaptor.nil();
            // 134:42: -> ^( LIST_ARGS ( expressao )+ )
            {
                // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:134:45: ^( LIST_ARGS ( expressao )+ )
                {
                    CommonTree root_1 = (CommonTree) adaptor.nil();
                    root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(LIST_ARGS, "LIST_ARGS"), root_1);
                    if (!(stream_expressao.hasNext())) {
                        throw new RewriteEarlyExitException();
                    }
                    while (stream_expressao.hasNext()) {
                        adaptor.addChild(root_1, stream_expressao.nextTree());
                    }
                    stream_expressao.reset();
                    adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
