// protected void loadPackages(Element rootElement) throws ConfigurationException {
// NodeList packageList = rootElement.getElementsByTagName("package");
// 
// for (int i = 0; i < packageList.getLength(); i++) {
// Element packageElement = (Element) packageList.item(i);
// addPackage(packageElement);
// }
private List loadConfigurationFiles(String fileName, Element includeElement) {
    List<Document> docs = new ArrayList<Document>();
    if (!includedFileNames.contains(fileName)) {
        if (LOG.isDebugEnabled()) {
            LOG.debug("Loading action configurations from: " + fileName);
        }
        includedFileNames.add(fileName);
        Iterator<URL> urls = null;
        Document doc = null;
        InputStream is = null;
        IOException ioException = null;
        try {
            urls = getConfigurationUrls(fileName);
        } catch (IOException ex) {
            ioException = ex;
        }
        if (urls == null || !urls.hasNext()) {
            if (errorIfMissing) {
                throw new ConfigurationException("Could not open files of the name " + fileName, ioException);
            } else {
                if (LOG.isDebugEnabled()) {
                    LOG.debug("Unable to locate configuration files of the name " + fileName + ", skipping");
                }
                return docs;
            }
        }
        URL url = null;
        while (urls.hasNext()) {
            try {
                url = urls.next();
                is = FileManager.loadFile(url);
                InputSource in = new InputSource(is);
                in.setSystemId(url.toString());
                doc = DomHelper.parse(in, dtdMappings);
            } catch (XWorkException e) {
                if (includeElement != null) {
                    throw new ConfigurationException(e, includeElement);
                } else {
                    throw new ConfigurationException(e);
                }
            } catch (Exception e) {
                final String s = "Caught exception while loading file " + fileName;
                throw new ConfigurationException(s, e, includeElement);
            } finally {
                if (is != null) {
                    try {
                        is.close();
                    } catch (IOException e) {
                        LOG.error("Unable to close input stream", e);
                    }
                }
            }
            Element rootElement = doc.getDocumentElement();
            NodeList children = rootElement.getChildNodes();
            int childSize = children.getLength();
            for (int i = 0; i < childSize; i++) {
                Node childNode = children.item(i);
                if (childNode instanceof Element) {
                    Element child = (Element) childNode;
                    final String nodeName = child.getNodeName();
                    if (nodeName.equals("include")) {
                        String includeFileName = child.getAttribute("file");
                        docs.addAll(loadConfigurationFiles(includeFileName, child));
                    }
                }
            }
            docs.add(doc);
            loadedFileUrls.add(url.toString());
        }
        if (LOG.isDebugEnabled()) {
            LOG.debug("Loaded action configuration from: " + fileName);
        }
    }
    return docs;
}
