// $ANTLR start "array_call"
public final MyGrammarParser.array_call_return array_call() throws RecognitionException {
    MyGrammarParser.array_call_return retval = new MyGrammarParser.array_call_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token IDENTIFIER146 = null;
    Token ECONCH147 = null;
    Token DCONCH149 = null;
    MyGrammarParser.value_number_return value_number148 = null;
    CommonTree IDENTIFIER146_tree = null;
    CommonTree ECONCH147_tree = null;
    CommonTree DCONCH149_tree = null;
    RewriteRuleTokenStream stream_ECONCH = new RewriteRuleTokenStream(adaptor, "token ECONCH");
    RewriteRuleTokenStream stream_DCONCH = new RewriteRuleTokenStream(adaptor, "token DCONCH");
    RewriteRuleTokenStream stream_IDENTIFIER = new RewriteRuleTokenStream(adaptor, "token IDENTIFIER");
    RewriteRuleSubtreeStream stream_value_number = new RewriteRuleSubtreeStream(adaptor, "rule value_number");
    try {
        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:256:11: ( IDENTIFIER ECONCH value_number DCONCH -> ^( ARRAY_CALL IDENTIFIER value_number ) )
        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:256:13: IDENTIFIER ECONCH value_number DCONCH
        {
            IDENTIFIER146 = (Token) match(input, IDENTIFIER, FOLLOW_IDENTIFIER_in_array_call2095);
            stream_IDENTIFIER.add(IDENTIFIER146);
            ECONCH147 = (Token) match(input, ECONCH, FOLLOW_ECONCH_in_array_call2097);
            stream_ECONCH.add(ECONCH147);
            pushFollow(FOLLOW_value_number_in_array_call2099);
            value_number148 = value_number();
            state._fsp--;
            stream_value_number.add(value_number148.getTree());
            DCONCH149 = (Token) match(input, DCONCH, FOLLOW_DCONCH_in_array_call2101);
            stream_DCONCH.add(DCONCH149);
            // AST REWRITE
            // elements: value_number, IDENTIFIER
            // token labels:
            // rule labels: retval
            // token list labels:
            // rule list labels:
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", retval != null ? retval.tree : null);
            root_0 = (CommonTree) adaptor.nil();
            // 256:51: -> ^( ARRAY_CALL IDENTIFIER value_number )
            {
                // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:256:54: ^( ARRAY_CALL IDENTIFIER value_number )
                {
                    CommonTree root_1 = (CommonTree) adaptor.nil();
                    root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(ARRAY_CALL, "ARRAY_CALL"), root_1);
                    adaptor.addChild(root_1, stream_IDENTIFIER.nextNode());
                    adaptor.addChild(root_1, stream_value_number.nextTree());
                    adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
