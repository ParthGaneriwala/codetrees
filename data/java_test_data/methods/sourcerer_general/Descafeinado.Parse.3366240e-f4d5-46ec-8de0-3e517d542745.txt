/**
 * ************************************************************
 * This class will run the engine, and needs a file called config.dat
 * in the current directory. This file should contain two lines,
 * The first should be the absolute path name to the .cgt file, the second
 * should be the source file you wish to parse.
 * @param args Array of arguments.
 * *************************************************************
 */
public void Parse() {
    java.awt.EventQueue.invokeLater(new Runnable() {

        public void run() {
            new Editor().setVisible(true);
        }
    });
    String textToParse = "C:/Documents and Settings/Administrador/Mis documentos/Dave's Files/La U/Ciclo 8/Compiladores 2/Compis/Miniproyecto/file1";
    String compiledGrammar = "C:/Documents and Settings/Administrador/Mis documentos/Dave's Files/La U/Ciclo 8/Compiladores 2/Compis/Miniproyecto/decaf2r.cgt";
    /**
     * try
     * {
     * //buffR = new BufferedReader(new FileReader(new File("C:/Documents and Settings/Administrador/Mis documentos/Dave's Files/La U/Ciclo 8/Compiladores 2/Compis/Miniproyecto/src/config.dat")));
     * //compiledGrammar = buffR.readLine();
     * //textToParse = buffR.readLine();
     *
     * buffR.close();
     * }
     * catch(FileNotFoundException fnfex)
     * {
     * System.out.println("Config File was not found.\n\n" +
     * "Please place it in the current directory.");
     * System.exit(1);
     * }
     * catch(IOException ioex)
     * {
     * System.out.println("An error occured while reading config.dat.\n\n" +
     * "Please re-try ensuring the file can be read.");
     * System.exit(1);
     * }
     */
    GOLDParser parser = new GOLDParser();
    try {
        parser.loadCompiledGrammar(compiledGrammar);
        parser.openFile(textToParse);
    } catch (ParserException parse) {
        System.out.println("**PARSER ERROR**\n" + parse.toString());
        System.exit(1);
    }
    boolean done = false;
    int response = -1;
    while (!done) {
        try {
            response = parser.parse();
        } catch (ParserException parse) {
            System.out.println("**PARSER ERROR**\n" + parse.toString());
            System.exit(1);
        }
        switch(response) {
            case gpMsgTokenRead:
                /* A token was read by the parser. The Token Object can be accessed
                      through the CurrentToken() property:  Parser.CurrentToken */
                break;
            case gpMsgReduction:
                switch(parser.currentReduction().getParentRule().getTableIndex()) {
                    case RuleConstants.RULE_PROGRAM_CLASS_ID_LBRACE_RBRACE:
                        // <program> ::= class id '{' <declaration> '}'
                        break;
                    case RuleConstants.RULE_DECLARATION:
                        // <declaration> ::= <structDeclaration>
                        break;
                    case RuleConstants.RULE_DECLARATION2:
                        // <declaration> ::= <varDeclaration>
                        break;
                    case RuleConstants.RULE_DECLARATION3:
                        // <declaration> ::= <methodDeclaration>
                        break;
                    case RuleConstants.RULE_VARDECLARATION_ID_SEMI:
                        // <varDeclaration> ::= <varType> id ';'
                        break;
                    case RuleConstants.RULE_VARDECLARATION_ID_LBRACKET_NUM_RBRACKET_SEMI:
                        // <varDeclaration> ::= <varType> id '[' num ']' ';'
                        break;
                    case RuleConstants.RULE_STRUCTDECLARATION_STRUCT_ID_LBRACE_RBRACE:
                        // <structDeclaration> ::= struct id '{' <varDeclaration> '}'
                        break;
                    case RuleConstants.RULE_VARTYPE_INT:
                        // <varType> ::= int
                        break;
                    case RuleConstants.RULE_VARTYPE_CHAR:
                        // <varType> ::= char
                        break;
                    case RuleConstants.RULE_VARTYPE_BOOLEAN:
                        // <varType> ::= boolean
                        break;
                    case RuleConstants.RULE_VARTYPE_STRUCT_ID:
                        // <varType> ::= struct id
                        break;
                    case RuleConstants.RULE_VARTYPE:
                        // <varType> ::= <structDeclaration>
                        break;
                    case RuleConstants.RULE_VARTYPE_VOID:
                        // <varType> ::= void
                        break;
                    case RuleConstants.RULE_METHODDECLARATION:
                        // <methodDeclaration> ::= <methodFirm> <Block>
                        break;
                    case RuleConstants.RULE_METHODFIRM_INT_ID_LPARAN_RPARAN:
                        // <methodFirm> ::= int id '(' <formalParameters> ')'
                        break;
                    case RuleConstants.RULE_METHODFIRM_CHAR_ID_LPARAN_RPARAN:
                        // <methodFirm> ::= char id '(' <formalParameters> ')'
                        break;
                    case RuleConstants.RULE_METHODFIRM_BOOLEAN_ID_LPARAN_RPARAN:
                        // <methodFirm> ::= boolean id '(' <formalParameters> ')'
                        break;
                    case RuleConstants.RULE_METHODFIRM_VOID_ID_LPARAN_RPARAN:
                        // <methodFirm> ::= void id '(' <formalParameters> ')'
                        break;
                    case RuleConstants.RULE_METHODFIRM_INT_ID_LPARAN_RPARAN2:
                        // <methodFirm> ::= int id '(' ')'
                        break;
                    case RuleConstants.RULE_METHODFIRM_CHAR_ID_LPARAN_RPARAN2:
                        // <methodFirm> ::= char id '(' ')'
                        break;
                    case RuleConstants.RULE_METHODFIRM_BOOLEAN_ID_LPARAN_RPARAN2:
                        // <methodFirm> ::= boolean id '(' ')'
                        break;
                    case RuleConstants.RULE_METHODFIRM_VOID_ID_LPARAN_RPARAN2:
                        // <methodFirm> ::= void id '(' ')'
                        break;
                    case RuleConstants.RULE_FORMALPARAMETERS_COMMA:
                        // <formalParameters> ::= <formalParameters> ',' <parameter>
                        break;
                    case RuleConstants.RULE_FORMALPARAMETERS:
                        // <formalParameters> ::= <parameter>
                        break;
                    case RuleConstants.RULE_PARAMETER_ID:
                        // <parameter> ::= <parameterType> id
                        break;
                    case RuleConstants.RULE_PARAMETER_ID_LBRACKET_RBRACKET:
                        // <parameter> ::= <parameterType> id '[' ']'
                        break;
                    case RuleConstants.RULE_PARAMETERTYPE_INT:
                        // <parameterType> ::= int
                        break;
                    case RuleConstants.RULE_PARAMETERTYPE_CHAR:
                        // <parameterType> ::= char
                        break;
                    case RuleConstants.RULE_PARAMETERTYPE_BOOLEAN:
                        // <parameterType> ::= boolean
                        break;
                    case RuleConstants.RULE_BLOCK_LBRACE_RBRACE:
                        // <Block> ::= '{' <varDeclaration> <statement> '}'
                        break;
                    case RuleConstants.RULE_STATEMENT_IF_LPARAN_RPARAN_ELSE:
                        // <statement> ::= if '(' <expression> ')' <Block> else <Block>
                        break;
                    case RuleConstants.RULE_STATEMENT_WHILE_LPARAN_RPARAN:
                        // <statement> ::= while '(' <expression> ')' <Block>
                        break;
                    case RuleConstants.RULE_STATEMENT_RETURN_SEMI:
                        // <statement> ::= return <expression> ';'
                        break;
                    case RuleConstants.RULE_STATEMENT_SEMI:
                        // <statement> ::= <methodCall> ';'
                        break;
                    case RuleConstants.RULE_STATEMENT:
                        // <statement> ::= <Block>
                        break;
                    case RuleConstants.RULE_STATEMENT_EQ:
                        // <statement> ::= <location> '=' <expression>
                        break;
                    case RuleConstants.RULE_STATEMENT_SEMI2:
                        // <statement> ::= <expression> ';'
                        break;
                    case RuleConstants.RULE_LOCATION_ID:
                        // <location> ::= id
                        break;
                    case RuleConstants.RULE_LOCATION_ID_LBRACKET_RBRACKET_DOT:
                        // <location> ::= id '[' <expression> ']' '.' <location>
                        break;
                    case RuleConstants.RULE_EXPRESSION:
                        // <expression> ::= <location>
                        break;
                    case RuleConstants.RULE_EXPRESSION2:
                        // <expression> ::= <methodCall>
                        break;
                    case RuleConstants.RULE_EXPRESSION3:
                        // <expression> ::= <literal>
                        break;
                    case RuleConstants.RULE_EXPRESSION4:
                        // <expression> ::= <expression> <op> <expression>
                        break;
                    case RuleConstants.RULE_EXPRESSION_MINUS:
                        // <expression> ::= '-' <expression>
                        break;
                    case RuleConstants.RULE_EXPRESSION_EXCLAM:
                        // <expression> ::= '!' <expression>
                        break;
                    case RuleConstants.RULE_EXPRESSION_LPARAN_RPARAN:
                        // <expression> ::= '(' <expression> ')'
                        break;
                    case RuleConstants.RULE_METHODCALL_ID_LPARAN_RPARAN:
                        // <methodCall> ::= id '(' <arg> ')'
                        break;
                    case RuleConstants.RULE_ARG:
                        // <arg> ::= <expression>
                        break;
                    case RuleConstants.RULE_OP:
                        // <op> ::= <arith_op>
                        break;
                    case RuleConstants.RULE_OP2:
                        // <op> ::= <rel_op>
                        break;
                    case RuleConstants.RULE_OP3:
                        // <op> ::= <eq_op>
                        break;
                    case RuleConstants.RULE_OP4:
                        // <op> ::= <cond_op>
                        break;
                    case RuleConstants.RULE_ARITH_OP_PLUS:
                        // <arith_op> ::= '+'
                        break;
                    case RuleConstants.RULE_ARITH_OP_MINUS:
                        // <arith_op> ::= '-'
                        break;
                    case RuleConstants.RULE_ARITH_OP_TIMES:
                        // <arith_op> ::= '*'
                        break;
                    case RuleConstants.RULE_ARITH_OP_DIV:
                        // <arith_op> ::= '/'
                        break;
                    case RuleConstants.RULE_ARITH_OP_PERCENT:
                        // <arith_op> ::= '%'
                        break;
                    case RuleConstants.RULE_REL_OP_LT:
                        // <rel_op> ::= '<'
                        break;
                    case RuleConstants.RULE_REL_OP_GT:
                        // <rel_op> ::= '>'
                        break;
                    case RuleConstants.RULE_REL_OP_LTEQ:
                        // <rel_op> ::= '<='
                        break;
                    case RuleConstants.RULE_REL_OP_GTEQ:
                        // <rel_op> ::= '>='
                        break;
                    case RuleConstants.RULE_EQ_OP_EQEQ:
                        // <eq_op> ::= '=='
                        break;
                    case RuleConstants.RULE_EQ_OP_EXCLAMEQ:
                        // <eq_op> ::= '!='
                        break;
                    case RuleConstants.RULE_COND_OP_AMPAMP:
                        // <cond_op> ::= '&&'
                        break;
                    case RuleConstants.RULE_COND_OP_PIPEPIPE:
                        // <cond_op> ::= ' ||'
                        break;
                    case RuleConstants.RULE_LITERAL:
                        // <literal> ::= <int_literal>
                        break;
                    case RuleConstants.RULE_LITERAL2:
                        // <literal> ::= <char_literal>
                        break;
                    case RuleConstants.RULE_LITERAL3:
                        // <literal> ::= <bool_literal>
                        break;
                    case RuleConstants.RULE_INT_LITERAL_NUM:
                        // <int_literal> ::= num
                        break;
                    case RuleConstants.RULE_CHAR_LITERAL_APOST_CHAR_APOST:
                        // <char_literal> ::= '' ' char ' ''
                        break;
                    case RuleConstants.RULE_BOOL_LITERAL_TRUE:
                        // <bool_literal> ::= true
                        break;
                    case RuleConstants.RULE_BOOL_LITERAL_FALSE:
                        // <bool_literal> ::= false
                        break;
                }
                // Parser.Reduction = //Object you created to store the rule
                // ************************************** log file
                System.out.println("gpMsgReduction");
                Reduction myRed = parser.currentReduction();
                System.out.println(myRed.getParentRule().getText());
                break;
            case gpMsgAccept:
                /* The program was accepted by the parsing engine */
                // ************************************** log file
                System.out.println("gpMsgAccept");
                // ************************************** end log
                done = true;
                break;
            case gpMsgLexicalError:
                /* Place code here to handle a illegal or unrecognized token
                           To recover, pop the token from the stack: Parser.PopInputToken */
                // ************************************** log file
                System.out.println("gpMsgLexicalError");
                // ************************************** end log
                parser.popInputToken();
                break;
            case gpMsgNotLoadedError:
                /* Load the Compiled Grammar Table file first. */
                // ************************************** log file
                System.out.println("gpMsgNotLoadedError");
                // ************************************** end log
                done = true;
                break;
            case gpMsgSyntaxError:
                /* This is a syntax error: the source has produced a token that was
                           not expected by the LALR State Machine. The expected tokens are stored
                           into the Tokens() list. To recover, push one of the
                              expected tokens onto the parser's input queue (the first in this case):
                           You should limit the number of times this type of recovery can take
                           place. */
                done = true;
                Token theTok = parser.currentToken();
                System.out.println("Token not expected: " + (String) theTok.getData());
                // ************************************** log file
                System.out.println("gpMsgSyntaxError");
                break;
            case gpMsgCommentError:
                /* The end of the input was reached while reading a comment.
                             This is caused by a comment that was not terminated */
                // ************************************** log file
                System.out.println("gpMsgCommentError");
                // ************************************** end log
                done = true;
                break;
            case gpMsgInternalError:
                /* Something horrid happened inside the parser. You cannot recover */
                // ************************************** log file
                System.out.println("gpMsgInternalError");
                // ************************************** end log
                done = true;
                break;
        }
        showTree(this.arbol, getRoot(), parser.currentReduction());
    }
    try {
        parser.closeFile();
    } catch (ParserException parse) {
        System.out.println("**PARSER ERROR**\n" + parse.toString());
        System.exit(1);
    }
}
