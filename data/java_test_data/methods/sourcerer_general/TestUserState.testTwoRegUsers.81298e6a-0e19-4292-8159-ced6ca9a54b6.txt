@Test
@DirtiesContext
public void testTwoRegUsers() throws Exception {
    configureMinimalGame();
    // U1 no real base, first level
    beginHttpSession();
    beginHttpRequestAndOpenSessionInViewFilter();
    userService.createUser("U1", "test", "test", "test");
    userService.login("U1", "test");
    movableService.getGameInfo();
    // Verify
    List<UserState> userStates = userService.getAllUserStates();
    Assert.assertEquals(1, userStates.size());
    UserState userStateTest = getRegUserState("U1");
    Assert.assertTrue(userStateTest.isOnline());
    Assert.assertNotNull(userStateTest.getSessionId());
    Assert.assertEquals(userStateTest.getCurrentAbstractLevel().getLevel().getName(), TEST_LEVEL_1_SIMULATED);
    endHttpRequestAndOpenSessionInViewFilter();
    endHttpSession();
    // Verify
    userStates = userService.getAllUserStates();
    Assert.assertEquals(1, userStates.size());
    userStateTest = getRegUserState("U1");
    Assert.assertFalse(userStateTest.isOnline());
    Assert.assertNull(userStateTest.getSessionId());
    Assert.assertEquals(userStateTest.getCurrentAbstractLevel().getLevel().getName(), TEST_LEVEL_1_SIMULATED);
    // U2 real base, second level
    beginHttpSession();
    beginHttpRequestAndOpenSessionInViewFilter();
    userService.createUser("U2", "test", "test", "test");
    userService.login("U2", "test");
    movableService.getGameInfo();
    movableService.sendTutorialProgress(TutorialConfig.TYPE.TUTORIAL, "", "", 0, 0);
    // Verify
    userStates = userService.getAllUserStates();
    Assert.assertEquals(2, userStates.size());
    userStateTest = getRegUserState("U1");
    Assert.assertFalse(userStateTest.isOnline());
    Assert.assertNull(userStateTest.getSessionId());
    Assert.assertEquals(userStateTest.getCurrentAbstractLevel().getLevel().getName(), TEST_LEVEL_1_SIMULATED);
    userStateTest = getRegUserState("U2");
    Assert.assertTrue(userStateTest.isOnline());
    Assert.assertNotNull(userStateTest.getSessionId());
    Assert.assertEquals(userStateTest.getCurrentAbstractLevel().getLevel().getName(), TEST_LEVEL_2_REAL);
    endHttpRequestAndOpenSessionInViewFilter();
    endHttpSession();
    // Unregistered base, fist level
    beginHttpSession();
    beginHttpRequestAndOpenSessionInViewFilter();
    movableService.getGameInfo();
    // Verify
    userStates = userService.getAllUserStates();
    Assert.assertEquals(3, userStates.size());
    userStateTest = getRegUserState("U1");
    Assert.assertFalse(userStateTest.isOnline());
    Assert.assertNull(userStateTest.getSessionId());
    Assert.assertEquals(userStateTest.getCurrentAbstractLevel().getLevel().getName(), TEST_LEVEL_1_SIMULATED);
    userStateTest = getRegUserState("U2");
    Assert.assertFalse(userStateTest.isOnline());
    Assert.assertNull(userStateTest.getSessionId());
    Assert.assertEquals(userStateTest.getCurrentAbstractLevel().getLevel().getName(), TEST_LEVEL_2_REAL);
    userStateTest = getUnregUserState();
    Assert.assertTrue(userStateTest.isOnline());
    Assert.assertNotNull(userStateTest.getSessionId());
    Assert.assertEquals(userStateTest.getCurrentAbstractLevel().getLevel().getName(), TEST_LEVEL_1_SIMULATED);
    endHttpRequestAndOpenSessionInViewFilter();
    endHttpSession();
    // Verify
    userStates = userService.getAllUserStates();
    Assert.assertEquals(2, userStates.size());
    userStateTest = getRegUserState("U1");
    Assert.assertFalse(userStateTest.isOnline());
    Assert.assertNull(userStateTest.getSessionId());
    Assert.assertEquals(userStateTest.getCurrentAbstractLevel().getLevel().getName(), TEST_LEVEL_1_SIMULATED);
    userStateTest = getRegUserState("U2");
    Assert.assertFalse(userStateTest.isOnline());
    Assert.assertNull(userStateTest.getSessionId());
    Assert.assertEquals(userStateTest.getCurrentAbstractLevel().getLevel().getName(), TEST_LEVEL_2_REAL);
}
