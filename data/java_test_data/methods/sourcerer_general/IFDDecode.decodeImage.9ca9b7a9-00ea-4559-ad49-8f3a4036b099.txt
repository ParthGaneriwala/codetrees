void decodeImage() throws JimiException, IOException {
    if (planarconfiguration == TIFTags.PLANARCONFIG_SEPARATE)
        throw new JimiException("Seperate planar config not supported");
    if (compression == TIFTags.COMPRESSION_OJPEG || compression == TIFTags.COMPRESSION_JPEG)
        throw new JimiException("TIFF JPG format not supported");
    // therefore if in int and negative assume rowsperstrip is == imagelength
    if ((rowsperstrip & 0x80000000) != 0)
        rowsperstrip = imagelength;
    if (tilewidth == 0) {
        stripsperimage = ((imagelength + rowsperstrip - 1) / rowsperstrip);
    } else // tiled image
    {
        tilesacross = (imagewidth + tilewidth - 1) / tilewidth;
        tilesdown = (imagelength + tilelength - 1) / tilelength;
        tilesperimage = tilesacross * tilesdown;
        if (tileoffsets == null) {
            tileoffsets = stripoffsets;
            tilebytecounts = stripbytecounts;
        }
    }
    // check required information for given image type available.
    switch(photometricinterpretation) {
        case TIFTags.PHOTOMETRIC_WHITEISZERO:
            break;
        case TIFTags.PHOTOMETRIC_BLACKISZERO:
            break;
        case TIFTags.PHOTOMETRIC_RGB:
            break;
        case TIFTags.PHOTOMETRIC_PALETTE:
            break;
        case TIFTags.PHOTOMETRIC_MASK:
            throw new JimiException("photometric MASK unsupported");
        case TIFTags.PHOTOMETRIC_SEPERATED:
            throw new JimiException("photometric SEPERATED unsupported");
        case TIFTags.PHOTOMETRIC_YCBCR:
            throw new JimiException("photometric YCBCR unsupported");
        case TIFTags.PHOTOMETRIC_CIELAB:
            throw new JimiException("photometric CIELAB unsupported");
        default:
            throw new JimiException("Photometric Interpretation invalid " + photometricinterpretation);
    }
    // check image output dimensions for orientation of image.
    switch(orientation) {
        case TIFTags.ORIENTATION_TOPLEFT:
        case TIFTags.ORIENTATION_TOPRIGHT:
        case TIFTags.ORIENTATION_BOTRIGHT:
        case TIFTags.ORIENTATION_BOTLEFT:
            ji.setSize(imagewidth, imagelength);
            break;
        case TIFTags.ORIENTATION_LEFTTOP:
        case TIFTags.ORIENTATION_RIGHTTOP:
        case TIFTags.ORIENTATION_RIGHTBOT:
        case TIFTags.ORIENTATION_LEFTBOT:
            ji.setSize(imagelength, imagewidth);
            ji.setHints(ImageConsumer.RANDOMPIXELORDER);
            ji.setProperty("fixedaspect", Boolean.TRUE);
            break;
    }
    ji.setProperty("xres", new Float(xres));
    ji.setProperty("yres", new Float(yres));
    ColorModel cm = createColorModel();
    ji.setColorModel(cm);
    // create space in JimiImage
    ji.setPixels();
    if ((photometricinterpretation == TIFTags.PHOTOMETRIC_BLACKISZERO || photometricinterpretation == TIFTags.PHOTOMETRIC_WHITEISZERO || photometricinterpretation == TIFTags.PHOTOMETRIC_PALETTE) && samplesperpixel == 1) {
        if (tilewidth == 0)
            decodeStrips();
        else
            decodeTiles();
    } else {
        // only suport LZW or no compression for true color images
        if (compression == TIFTags.COMPRESSION_NONE || compression == TIFTags.COMPRESSION_PACKBITS || compression == TIFTags.COMPRESSION_LZW) {
            // no compression
            if (tilewidth == 0)
                decodeStrips();
            else
                decodeTiles();
        } else
            throw new JimiException("Unsupported compression " + compression);
    }
}
