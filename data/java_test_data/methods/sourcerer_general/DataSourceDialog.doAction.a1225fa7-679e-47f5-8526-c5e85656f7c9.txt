protected void doAction(boolean closeWindowAfterAction) {
    int selectedTab = tabbedPane.getSelectedIndex();
    if (selectedTab == 0) {
        String protocolSelection = "edu.calpoly.schmapster.server.protocol." + (String) dataSourceProtocolComboBox.getSelectedItem();
        if (dataSourceProtocolComboBox.getSelectedIndex() < 0) {
            JOptionPane.showMessageDialog(null, "Please select a protocol.", "Alert", JOptionPane.ERROR_MESSAGE);
        } else {
            try {
                // Get class of string name
                Class c = Class.forName(protocolSelection);
                // Get simple methods we want to call
                // This assumes we know the
                // interface the reflected class is using. Pass in
                // method name and paramter type list.
                Method runDialog = c.getMethod("runDialog", new Class[] { Frame.class });
                // invoke the methods and print out what we get back. Pass in
                // object to call method on and parameters. Should print the
                // default
                // values, "Gordon" and "dog"
                DataSource dsToAdd = (DataSource) runDialog.invoke("runDialog", new Object[] { mParent });
                if (dsToAdd != null)
                    mHandler.addProxyDataSource(dsToAdd);
                if (closeWindowAfterAction) {
                    setVisible(false);
                }
            } catch (ClassNotFoundException e) {
                e.printStackTrace(System.err);
            } catch (IllegalAccessException e) {
                e.printStackTrace(System.err);
            } catch (IllegalArgumentException e) {
                e.printStackTrace(System.err);
            } catch (InvocationTargetException e) {
                e.printStackTrace(System.err);
            } catch (NoSuchMethodException e) {
                e.printStackTrace(System.err);
            } catch (DatabaseException de) {
                de.printStackTrace();
            }
        }
    /*
          * String dsName = dataSourceNameField[0].getText(); String dsProtocol =
          * dataSourceProtocolField[0].getText(); String dsAttributes =
          * dataSourceAttributesField[0].getText(); if(dsName.equals("") ||
          * dsProtocol.equals("") || dsAttributes.equals("")){
          * JOptionPane.showMessageDialog(null, "Please complete all fields.",
          * "Alert", JOptionPane.ERROR_MESSAGE); } else { DataSource dsToAdd =
          * new DataSource(dsName, dsProtocol, new
          * ProtocolAttributes(dsAttributes)); try{
          * ProxyDbAdminHandler.requestAddDataSource(dsToAdd);
          * if(closeWindowAfterAction){ setVisible(false); } resetFields(); }
          * catch (UserPermissionException e){
          *
          * JOptionPane.showMessageDialog(null, "You do not have significant
          * permissions for that action. The application will now exit.\n" +
          * "Please contact an Administrator for details.", "Alert",
          * JOptionPane.ERROR_MESSAGE); try {
          * Connection.getConnection().userLogout(Connection.getCurrentUser()); }
          * catch (RemoteException e1) { e1.printStackTrace(); }
          *
          * System.exit(0); } }
          */
    } else if (selectedTab == 1) {
        String dsName = dataSourceNameField[1].getText();
        String dsProtocol = dataSourceProtocolField[1].getText();
        String dsAttributes = dataSourceAttributesField[1].getText();
        if (dsName.equals("") || dsProtocol.equals("") || dsAttributes.equals("")) {
            JOptionPane.showMessageDialog(null, "Please complete all fields.", "Alert", JOptionPane.ERROR_MESSAGE);
        } else {
            DataSource newDs = new DataSource(dsName, dsProtocol, new ProtocolAttributes(dsAttributes));
            try {
                mHandler.modifyProxyDataSource(dataSourceNameToModify, newDs);
            } catch (DatabaseException de) {
                de.printStackTrace();
            }
            if (closeWindowAfterAction) {
                setVisible(false);
            }
            resetFields();
        }
    } else if (selectedTab == 2) {
        if (dataSourceToDelete == null) {
            JOptionPane.showMessageDialog(null, "Please select a data source to delete.", "Alert", JOptionPane.ERROR_MESSAGE);
        } else {
            try {
                mHandler.removeProxyDataSource(dataSourceToDelete.getName());
            } catch (DatabaseException de) {
                de.printStackTrace();
            }
            if (closeWindowAfterAction) {
                setVisible(false);
            }
            resetFields();
        }
    }
}
