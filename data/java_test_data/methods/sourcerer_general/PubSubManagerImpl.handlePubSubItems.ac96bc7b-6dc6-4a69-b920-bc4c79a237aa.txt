private Iq handlePubSubItems(JID from, XmlStanza stanza, Iq iq, PubSubExtension pubSubExtension) {
    Iq iqResponse = null;
    Iq.Type type = iq.getType();
    if (type != Iq.Type.get) {
        iqResponse = PacketUtils.createErrorIq(iq);
        iqResponse.setError(new XmppError(XmppError.Condition.bad_request));
        if (iqResponse.getFrom() == null) {
            iqResponse.setFrom(new JID(null, getSubDomain(), null));
        }
        return iqResponse;
    }
    PubSubItems pubSubItems = (PubSubItems) stanza;
    String nodeId = pubSubItems.getNode();
    String subId = pubSubItems.getSubId();
    int maxItems = pubSubItems.getMaxItems();
    String itemId = null;
    if (!pubSubItems.getItems().isEmpty()) {
        itemId = pubSubItems.getItems().get(0).getId();
    }
    try {
        Collection<PubSubItem> items = pubSubEngine.getPubSubItems(from.toBareJID(), nodeId, subId, itemId, (maxItems == 0 ? PubSubManagerImpl.this.getMaxItems() : maxItems));
        PubSubExtension pubSubExtensionResponse = new PubSubExtension(pubSubExtension.getNamespace());
        PubSubItems pubSubItemsResponse = new PubSubItems(nodeId);
        pubSubItemsResponse.setSubId(subId);
        pubSubItemsResponse.setMaxItems(maxItems);
        for (PubSubItem pubSubItem : items) {
            PubSubItems.Item item = new PubSubItems.Item(pubSubItem.getItemId());
            item.setPayload(pubSubItem.getPayload());
            pubSubItemsResponse.addItem(item);
        }
        pubSubExtensionResponse.addStanza(pubSubItemsResponse);
        iqResponse = PacketUtils.createResultIq(iq);
        iqResponse.addExtension(pubSubExtensionResponse);
    } catch (NodeNotExistException e) {
        iqResponse = PacketUtils.createErrorIq(iq);
        iqResponse.setError(new XmppError(XmppError.Condition.item_not_found));
    } catch (CannotAccessException e) {
        iqResponse = PacketUtils.createErrorIq(iq);
        iqResponse.setError(new XmppError(XmppError.Condition.not_authorized));
    } catch (InvalidSubIdException e) {
        iqResponse = PacketUtils.createErrorIq(iq);
        XmppError error = new XmppError(XmppError.Condition.no_acceptable);
        error.addOtherCondition("invalid-subid", "http://jabber.org/protocol/pubsub#errors");
        iqResponse.setError(error);
    } catch (Exception e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
        iqResponse = PacketUtils.createErrorIq(iq);
        iqResponse.setError(new XmppError(XmppError.Condition.internal_server_error));
    }
    return iqResponse;
}
