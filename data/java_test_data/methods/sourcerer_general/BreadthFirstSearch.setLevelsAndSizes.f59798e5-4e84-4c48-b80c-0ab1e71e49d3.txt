public void setLevelsAndSizes(DiGraph graph, Node startNode) {
    // BFS traversal
    // Create a list of levels
    levels = new Vector<BFSLevel>();
    // Create a map of nodes against thier sizes
    nodesVsDrawingParameters = new HashMap<Node, DrawingParameters>();
    // Set of visited nodes
    HashSet<Node> visitedNodes = new HashSet<Node>();
    // Create the first level and place the start node in it; add the first level to
    // the list of levels
    BFSLevel bfsLevel0 = new BFSLevel();
    bfsLevel0.addNode(startNode);
    levels.add(bfsLevel0);
    int levelNum = 0;
    BFSLevel currLevel = bfsLevel0;
    // Calculate the size of the start node and store it. Also store the height of the node
    Dimension sizeOfStartNode = getSize(startNode);
    int heightofStartNode = sizeOfStartNode.height;
    layersVsHeights.put(bfsLevel0, new Integer(heightofStartNode));
    int maxNumNodes = 1;
    while (!currLevel.isEmpty()) {
        // Create the next level
        BFSLevel nextLevel = new BFSLevel();
        // and add it to the list of levels
        levels.add(nextLevel);
        Vector<Node> currLevelNodes = currLevel.getNodes();
        int numNodesInCurrLevel = currLevelNodes.size();
        // Traverse through each node at the current level
        int maxHeightOfNextLayer = 0;
        for (int i = 0; i < numNodesInCurrLevel; i++) {
            Node node = currLevelNodes.elementAt(i);
            Vector outgoingEdges = graph.getOutgoingEdges(node);
            int numOutgoingEdges = 0;
            if (outgoingEdges != null)
                numOutgoingEdges = outgoingEdges.size();
            if (numOutgoingEdges == 2) {
                Edge leftEdge = (Edge) outgoingEdges.elementAt(0);
                Edge rightEdge = (Edge) outgoingEdges.elementAt(1);
                Node leftChildNode = leftEdge.getOppositeNode(node);
                Node rightChildNode = rightEdge.getOppositeNode(node);
                if (!crossEdge(leftChildNode, rightChildNode)) {
                    // The child nodes have no edge between them
                    maxHeightOfNextLayer = addNodeToLevel(nextLevel, leftChildNode, maxHeightOfNextLayer, visitedNodes);
                    maxHeightOfNextLayer = addNodeToLevel(nextLevel, leftChildNode, maxHeightOfNextLayer, visitedNodes);
                }
            } else if (numOutgoingEdges == 1) {
                Edge outEdge = (Edge) outgoingEdges.elementAt(0);
                Node childNode = outEdge.getOppositeNode(node);
                // Check the number of children of the child node; if there are two of them,
                // identify the other parent and ensure that the this other parent is in the same level
                // as the current node or in some level preceding it.
                Vector edgesFromAbove = childNode.getInComingEdges();
                if (edgesFromAbove.size() == 2) {
                    // The child node has two parents; get the other parent of this child node
                    Node otherParent = null;
                    Edge leftEdgeFromAbove = (Edge) edgesFromAbove.elementAt(0);
                    Edge rightEdgeFromAbove = (Edge) edgesFromAbove.elementAt(1);
                    if (node == leftEdgeFromAbove.getOppositeNode(childNode))
                        otherParent = rightEdgeFromAbove.getOppositeNode(childNode);
                    else
                        otherParent = leftEdgeFromAbove.getOppositeNode(childNode);
                    // node to the next level
                    if (nodeInLevelOrPrecedingLevels(otherParent, levelNum)) {
                        // Add the child node to the next level if not already added
                        maxHeightOfNextLayer = addNodeToLevel(nextLevel, childNode, maxHeightOfNextLayer, visitedNodes);
                    }
                } else {
                    // The current node is the only parent of this child node
                    maxHeightOfNextLayer = addNodeToLevel(nextLevel, childNode, maxHeightOfNextLayer, visitedNodes);
                }
            }
        }
        levelNum++;
        // Set the current layer to the next layer
        currLevel = nextLevel;
        layersVsHeights.put(currLevel, new Integer(maxHeightOfNextLayer));
        // Set the maximum number of nodes
        Vector<Node> nodesInLevel = currLevel.getNodes();
        int numNodesInLevel = nodesInLevel.size();
        if (numNodesInLevel > maxNumNodes)
            maxNumNodes = numNodesInLevel;
    }
    // Set the index of the widest layer
    setIndexOfLowestLevelWithMaxNodes(maxNumNodes);
    maxNumNodesInLevel = maxNumNodes;
}
