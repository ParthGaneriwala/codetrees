@Test
public void testExtractLeft() throws Throwable {
    WindowExtractor leftEx03 = new WindowExtractor(Token.class, new SpannedTextExtractor(), WindowFeature.ORIENTATION_LEFT, 0, 3);
    WindowExtractor leftEx24 = new WindowExtractor(Token.class, new SpannedTextExtractor(), WindowFeature.ORIENTATION_LEFT, 2, 4);
    // feature extraction on "island" in "...because the island was only..."
    tokenBuilder.buildTokens(jCas, "it , because the island was only");
    Token token = JCasUtil.selectByIndex(jCas, Token.class, 4);
    assertEquals("island", token.getCoveredText());
    List<Feature> features = leftEx03.extract(jCas, token, Sentence.class);
    assertEquals(3, features.size());
    WindowFeature feature = (WindowFeature) features.get(0);
    assertEquals(WindowFeature.ORIENTATION_LEFT, feature.getOrientation());
    assertEquals(0, feature.getPosition());
    assertEquals("the", feature.getValue().toString().toString());
    assertEquals("Window_L0", feature.getName());
    feature = (WindowFeature) features.get(1);
    assertEquals(WindowFeature.ORIENTATION_LEFT, feature.getOrientation());
    assertEquals(1, feature.getPosition());
    assertEquals("because", feature.getValue().toString());
    assertEquals("Window_L1", feature.getName());
    feature = (WindowFeature) features.get(2);
    assertEquals(WindowFeature.ORIENTATION_LEFT, feature.getOrientation());
    assertEquals(2, feature.getPosition());
    assertEquals(",", feature.getValue().toString());
    assertEquals("Window_L2", feature.getName());
    features = leftEx24.extract(jCas, token, Sentence.class);
    assertEquals(2, features.size());
    feature = (WindowFeature) features.get(0);
    assertEquals(",", feature.getValue().toString());
    assertEquals(WindowFeature.ORIENTATION_LEFT, feature.getOrientation());
    assertEquals(2, feature.getPosition());
    feature = (WindowFeature) features.get(1);
    assertEquals("it", feature.getValue().toString());
    // Feature extraction on "place" in "...This place was a tolerable..."
    jCas.reset();
    tokenBuilder.buildTokens(jCas, "a mile wide .\nThis place was a tolerable long");
    token = JCasUtil.selectByIndex(jCas, Token.class, 5);
    assertEquals("place", token.getCoveredText());
    features = leftEx03.extract(jCas, token, Sentence.class);
    assertEquals(3, features.size());
    feature = (WindowFeature) features.get(0);
    assertEquals(WindowFeature.ORIENTATION_LEFT, feature.getOrientation());
    assertEquals(0, feature.getPosition());
    assertEquals("This", feature.getValue().toString());
    feature = (WindowFeature) features.get(1);
    assertEquals(WindowFeature.ORIENTATION_LEFT, feature.getOrientation());
    assertEquals(1, feature.getPosition());
    assertNull(feature.getWindowedFeature());
    assertEquals(1, feature.getOutOfBoundsDistance());
    feature = (WindowFeature) features.get(2);
    assertEquals(WindowFeature.ORIENTATION_LEFT, feature.getOrientation());
    assertEquals(2, feature.getPosition());
    assertEquals(2, feature.getOutOfBoundsDistance());
    features = leftEx24.extract(jCas, token, Sentence.class);
    assertEquals(2, features.size());
    feature = (WindowFeature) features.get(0);
    assertEquals(2, feature.getOutOfBoundsDistance());
    feature = (WindowFeature) features.get(1);
    assertEquals(3, feature.getOutOfBoundsDistance());
    // Feature extraction on the first word of the file
    jCas.reset();
    tokenBuilder.buildTokens(jCas, "text obtained from");
    token = JCasUtil.selectByIndex(jCas, Token.class, 0);
    assertEquals("text", token.getCoveredText());
    features = leftEx03.extract(jCas, token, Sentence.class);
    assertEquals(3, features.size());
    assertEquals(1, ((WindowFeature) features.get(0)).getOutOfBoundsDistance());
    assertEquals(2, ((WindowFeature) features.get(1)).getOutOfBoundsDistance());
    assertEquals(3, ((WindowFeature) features.get(2)).getOutOfBoundsDistance());
    features = leftEx24.extract(jCas, token, Sentence.class);
    assertEquals(2, features.size());
    assertEquals(3, ((WindowFeature) features.get(0)).getOutOfBoundsDistance());
    assertEquals(4, ((WindowFeature) features.get(1)).getOutOfBoundsDistance());
    // Feature extraction on the last word of the file
    jCas.reset();
    tokenBuilder.buildTokens(jCas, "and cooked dinner .");
    token = JCasUtil.selectByIndex(jCas, Token.class, -1);
    assertEquals(".", token.getCoveredText());
    features = leftEx03.extract(jCas, token, Sentence.class);
    assertEquals(3, features.size());
    assertEquals("dinner", features.get(0).getValue().toString());
    assertEquals("cooked", features.get(1).getValue().toString());
    assertEquals("and", features.get(2).getValue().toString());
    int end = jCas.getDocumentText().length();
    token = new Token(jCas, end, end);
    token.addToIndexes();
    assertEquals("", token.getCoveredText());
    features = leftEx03.extract(jCas, token, Sentence.class);
    assertEquals(3, features.size());
    assertEquals(".", features.get(0).getValue().toString());
    assertEquals("dinner", features.get(1).getValue().toString());
    assertEquals("cooked", features.get(2).getValue().toString());
}
