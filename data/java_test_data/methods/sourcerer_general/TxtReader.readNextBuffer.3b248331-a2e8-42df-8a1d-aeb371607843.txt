public void readNextBuffer() {
    // Analysis of data on the screen
    if (mMyLines.size() != 0 && mCurrentLine != 0) {
        /**
         * At present, the length of the line before the data
         */
        int beforeDataLength = mMyLines.get(mCurrentLine).beforeLineLength;
        /**
         * The current display buffer length
         */
        int totalDisplayBufferLength = mDisplayBuffer.length;
        /**
         * Screen data
         */
        mScreenData = new byte[totalDisplayBufferLength - beforeDataLength];
        /**
         * Copy the data from mDisplayBuffer to screen buffer
         */
        System.arraycopy(mDisplayBuffer, beforeDataLength, mScreenData, 0, mScreenData.length);
    }
    // Analysis of data on end
    /**
     * Ends data length
     */
    int endBufferLength = 0;
    if (null != mEndBuffer) {
        /**
         * Get the ends data length
         */
        endBufferLength = mEndBuffer.length;
    }
    // Read data from file
    byte[] readData = new byte[0];
    if (null != mReadFile)
        /**
         * Start read data
         */
        readData = mReadFile.read(mReadLength);
    /**
     * Read end?
     */
    if (readData.length != mReadLength) {
        /**
         * set the mEndOfDoc true
         */
        mEndOfDoc = true;
        /**
         * display buffer length is:current screen data length + ends data length + actual length of data
         */
        int displayBufferLength = mScreenData.length + endBufferLength + readData.length;
        mDisplayBuffer = new byte[displayBufferLength];
        /**
         * Add screen data  to display buffer
         */
        System.arraycopy(mScreenData, 0, mDisplayBuffer, 0, mScreenData.length);
        /**
         * Add end data  to display buffer
         */
        System.arraycopy(mEndBuffer, 0, mDisplayBuffer, mScreenData.length, mEndBuffer.length);
        /**
         * Will read all the data into the display buffer
         */
        System.arraycopy(readData, 0, mDisplayBuffer, displayBufferLength - readData.length, readData.length);
        readData = null;
        System.gc();
        return;
    }
    /**
     * Did not read the final document, it is necessary to analyze the tail of data through \n
     */
    mEndOfDoc = false;
    // Analysis of data from the rear
    /**
     * end For the logo to read data from the first time after the forward \ n Position
     */
    int end = readData.length;
    if (end > 0) {
        while (true) {
            if (end < 1) {
                break;
            }
            int v = readData[end - 1] & 0xff;
            if (v == 10) {
                // \n
                break;
            }
            end--;
        }
    }
    if (0 == end) {
        // The event of a serious error, even in the absence of a 16K data carriage return
        System.exit(-1);
    }
    // All the data integration
    /**
     * Add to display the data in the buffer length: the length of the data screen, the last legacy of the length of the data, analysis of the \ n location
     */
    int displayBufferLength = mScreenData.length + endBufferLength + end;
    mDisplayBuffer = new byte[displayBufferLength];
    /**
     * Add screen data to display buffer
     */
    System.arraycopy(mScreenData, 0, mDisplayBuffer, 0, mScreenData.length);
    /**
     * Add ends data to display buffer
     */
    System.arraycopy(mEndBuffer, 0, mDisplayBuffer, mScreenData.length, mEndBuffer.length);
    /**
     * Will read all the data into the display buffer
     */
    System.arraycopy(readData, 0, mDisplayBuffer, displayBufferLength - end, end);
    /**
     * Analysis of the data after the remaining length
     */
    int remainDataLength = mReadLength - end;
    /**
     * Regenerate the tail of the data buffer
     */
    mEndBuffer = new byte[remainDataLength];
    /**
     * Analysis of data to the tail to tail into the buffer
     */
    System.arraycopy(readData, end, mEndBuffer, 0, remainDataLength);
    readData = null;
    System.gc();
}
