@Test
public void testGetCandidateChildren() {
    createChildParentTasks();
    Task task5 = new Task("5", task4.getGroupName(), "5", false, true, "5", defaultTimerSchedule);
    taskDAO.save(task5);
    Task task6 = new Task("6", "differentGroup", "6", false, true, "6", defaultTimerSchedule);
    taskDAO.save(task6);
    // nobody else is in the same group as 6, so should be no candidates
    Set<Task> candidates = taskDAO.findCandidateChildren(task6);
    assertEquals(0, candidates.size());
    candidates = taskDAO.findCandidateChildren(task4);
    assertEquals(1, candidates.size());
    assertTrue(candidates.contains(task5));
    // now join 4 and 5
    task4.addChildTask(task5);
    taskDAO.save(task4);
    candidates = taskDAO.findCandidateChildren(task4);
    assertEquals(0, candidates.size());
    candidates = taskDAO.findCandidateChildren(task5);
    assertEquals(0, candidates.size());
    candidates = taskDAO.findCandidateChildren(task2);
    assertEquals(2, candidates.size());
    assertTrue(candidates.contains(task5));
    assertTrue(candidates.contains(task3));
    candidates = taskDAO.findCandidateChildren(task3);
    assertEquals(2, candidates.size());
    assertTrue(candidates.contains(task5));
    assertTrue(candidates.contains(task2));
    candidates = taskDAO.findCandidateChildren(task1);
    assertEquals(2, candidates.size());
    assertTrue(candidates.contains(task5));
    assertTrue(candidates.contains(task4));
}
