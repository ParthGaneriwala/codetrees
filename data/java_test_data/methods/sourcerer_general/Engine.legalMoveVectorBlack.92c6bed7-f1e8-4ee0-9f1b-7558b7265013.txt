public final Vector legalMoveVectorBlack(int[][] Position) {
    Vector legalMoves = new Vector(50);
    for (int i = 0; i < 8; i++) {
        for (int j = 0; j < 8; j++) {
            if (Position[i][j] == -kingValue) {
                // weisser KÖNIG, schliesse Züge welche den König im Schach lassen am Schluss aus
                if ((i + 1 > 7) || (j + 1 > 7)) {
                // brettrand
                } else {
                    if (Position[i + 1][j + 1] < 0) {
                    // besetzt
                    } else {
                        legalMoves.addElement(new Move(i, j, i + 1, j + 1, Position[i + 1][j + 1], false));
                    }
                }
                if ((i - 1 < 0) || (j - 1) < 0) {
                // brettrand
                } else {
                    if (Position[i - 1][j - 1] < 0) {
                    // besetzt
                    } else {
                        legalMoves.addElement(new Move(i, j, i - 1, j - 1, Position[i - 1][j - 1], false));
                    // nothing
                    }
                }
                if ((i + 1 > 7) || (j - 1 < 0)) {
                // brettrand
                } else {
                    if (Position[i + 1][j - 1] < 0) {
                    // besetzt
                    } else {
                        legalMoves.addElement(new Move(i, j, i + 1, j - 1, Position[i + 1][j - 1], false));
                    // nothing
                    }
                }
                if ((i - 1 < 0) || (j + 1 > 7)) {
                // brettrand
                } else {
                    if (Position[i - 1][j + 1] < 0) {
                    // besetzt
                    } else {
                        legalMoves.addElement(new Move(i, j, i - 1, j + 1, Position[i - 1][j + 1], false));
                    // nothing
                    }
                }
                if (i + 1 > 7) {
                // brettrand
                } else {
                    if (Position[i + 1][j] < 0) {
                    // besetzt
                    } else {
                        legalMoves.addElement(new Move(i, j, i + 1, j, Position[i + 1][j], false));
                    // nothing
                    }
                }
                if (i - 1 < 0) {
                // brettrand
                } else {
                    if (Position[i - 1][j] < 0) {
                    // besetzt
                    } else {
                        legalMoves.addElement(new Move(i, j, i - 1, j, Position[i - 1][j], false));
                    // nothing
                    }
                }
                if (j + 1 > 7) {
                // brettrand
                } else {
                    if (Position[i][j + 1] < 0) {
                    // besetzt
                    } else {
                        legalMoves.addElement(new Move(i, j, i, j + 1, Position[i][j + 1], false));
                    // nothing
                    }
                }
                if (j - 1 < 0) {
                // brettrand
                } else {
                    if (Position[i][j - 1] < 0) {
                    // besetzt
                    } else {
                        legalMoves.addElement(new Move(i, j, i, j - 1, Position[i][j - 1], false));
                    // nothing
                    }
                }
            } else if (Position[i][j] == -fersValue) {
                // weisser FERS
                if ((i + 1 > 7) || (j + 1 > 7)) {
                // brettrand
                } else {
                    if (Position[i + 1][j + 1] < 0) {
                    // besetzt
                    } else {
                        legalMoves.addElement(new Move(i, j, i + 1, j + 1, Position[i + 1][j + 1], false));
                    // nothing
                    }
                }
                if ((i - 1 < 0) || (j - 1) < 0) {
                // brettrand
                } else {
                    if (Position[i - 1][j - 1] < 0) {
                    // besetzt
                    } else {
                        legalMoves.addElement(new Move(i, j, i - 1, j - 1, Position[i - 1][j - 1], false));
                    // nothing
                    }
                }
                if ((i + 1 > 7) || (j - 1 < 0)) {
                // brettrand
                } else {
                    if (Position[i + 1][j - 1] < 0) {
                    // besetzt
                    } else {
                        legalMoves.addElement(new Move(i, j, i + 1, j - 1, Position[i + 1][j - 1], false));
                    // nothing
                    }
                }
                if ((i - 1 < 0) || (j + 1 > 7)) {
                // brettrand
                } else {
                    if (Position[i - 1][j + 1] < 0) {
                    // besetzt
                    } else {
                        legalMoves.addElement(new Move(i, j, i - 1, j + 1, Position[i - 1][j + 1], false));
                    // nothing
                    }
                }
            } else if (Position[i][j] == -elephantValue) {
                // weisser ELEFANT
                if ((i + 2 > 7) || (j + 2 > 7)) {
                // brettrand
                } else {
                    if (Position[i + 2][j + 2] < 0) {
                    // besetzt
                    } else {
                        legalMoves.addElement(new Move(i, j, i + 2, j + 2, Position[i + 2][j + 2], false));
                    // nothing
                    }
                }
                if ((i + 2 > 7) || (j - 2 < 0)) {
                // brettrand
                } else {
                    if (Position[i + 2][j - 2] < 0) {
                    // besetzt
                    } else {
                        legalMoves.addElement(new Move(i, j, i + 2, j - 2, Position[i + 2][j - 2], false));
                    // nothing
                    }
                }
                if ((i - 2 < 0) || (j + 2 > 7)) {
                // brettrand
                } else {
                    if (Position[i - 2][j + 2] < 0) {
                    // besetzt
                    } else {
                        legalMoves.addElement(new Move(i, j, i - 2, j + 2, Position[i - 2][j + 2], false));
                    // nothing
                    }
                }
                if ((i - 2 < 0) || (j - 2 < 0)) {
                // brettrand
                } else {
                    if (Position[i - 2][j - 2] < 0) {
                    // besetzt
                    } else {
                        legalMoves.addElement(new Move(i, j, i - 2, j - 2, Position[i - 2][j - 2], false));
                    // nothing
                    }
                }
            } else if (Position[i][j] == -knightValue) {
                // weisser SPRINGER
                if ((i + 1 > 7) || (j + 2 > 7)) {
                // brettrand
                } else {
                    if (Position[i + 1][j + 2] < 0) {
                    // besetzt
                    } else {
                        legalMoves.addElement(new Move(i, j, i + 1, j + 2, Position[i + 1][j + 2], false));
                    // nothing
                    }
                }
                if ((i - 1 < 0) || (j - 2 < 0)) {
                // brettrand
                } else {
                    if (Position[i - 1][j - 2] < 0) {
                    // besetzt
                    } else {
                        legalMoves.addElement(new Move(i, j, i - 1, j - 2, Position[i - 1][j - 2], false));
                    // nothing
                    }
                }
                if ((i + 2 > 7) || (j - 1 < 0)) {
                // brettrand
                } else {
                    if (Position[i + 2][j - 1] < 0) {
                    // besetzt
                    } else {
                        legalMoves.addElement(new Move(i, j, i + 2, j - 1, Position[i + 2][j - 1], false));
                    // nothing
                    }
                }
                if ((i - 1 < 0) || (j + 2 > 7)) {
                // brettrand
                } else {
                    if (Position[i - 1][j + 2] < 0) {
                    // besetzt
                    } else {
                        legalMoves.addElement(new Move(i, j, i - 1, j + 2, Position[i - 1][j + 2], false));
                    // nothing
                    }
                }
                if ((i + 2 > 7) || (j + 1 > 7)) {
                // brettrand
                } else {
                    if (Position[i + 2][j + 1] < 0) {
                    // besetzt
                    } else {
                        legalMoves.addElement(new Move(i, j, i + 2, j + 1, Position[i + 2][j + 1], false));
                    // nothing
                    }
                }
                if ((i - 2 < 0) || (j + 1 > 7)) {
                // brettrand
                } else {
                    if (Position[i - 2][j + 1] < 0) {
                    // besetzt
                    } else {
                        legalMoves.addElement(new Move(i, j, i - 2, j + 1, Position[i - 2][j + 1], false));
                    // nothing
                    }
                }
                if ((i + 1 > 7) || (j - 2 < 0)) {
                // brettrand
                } else {
                    if (Position[i + 1][j - 2] < 0) {
                    // besetzt
                    } else {
                        legalMoves.addElement(new Move(i, j, i + 1, j - 2, Position[i + 1][j - 2], false));
                    // nothing
                    }
                }
                if ((i - 2 < 0) || (j - 1 < 0)) {
                // brettrand
                } else {
                    if (Position[i - 2][j - 1] < 0) {
                    // besetzt
                    } else {
                        legalMoves.addElement(new Move(i, j, i - 2, j - 1, Position[i - 2][j - 1], false));
                    // nothing
                    }
                }
            } else if (Position[i][j] == -rookValue) {
                // weisser TURM
                for (int column = 1; column < 8; column++) {
                    if (i + column > 7) {
                        break;
                    } else {
                        if (Position[i + column][j] < 0) {
                            // von eigener Figur besetzt
                            break;
                        }
                        if (Position[i + column][j] > 0) {
                            // von fremder Figur besetzt
                            legalMoves.addElement(new Move(i, j, i + column, j, Position[i + column][j], false));
                            // nothing
                            break;
                        }
                        if (Position[i + column][j] == 0) {
                            // unbesetzt
                            legalMoves.addElement(new Move(i, j, i + column, j, 0, false));
                        // nothing
                        }
                    }
                }
                for (int column = 1; column < 8; column++) {
                    if (i - column < 0) {
                        break;
                    } else {
                        if (Position[i - column][j] < 0) {
                            // von eigener Figur besetzt
                            break;
                        }
                        if (Position[i - column][j] > 0) {
                            // von fremder Figur besetzt
                            legalMoves.addElement(new Move(i, j, i - column, j, Position[i - column][j], false));
                            // nothing
                            break;
                        }
                        if (Position[i - column][j] == 0) {
                            // unbesetzt
                            legalMoves.addElement(new Move(i, j, i - column, j, 0, false));
                        // nothing
                        }
                    }
                }
                for (int row = 1; row < 8; row++) {
                    if (j + row > 7) {
                        break;
                    } else {
                        if (Position[i][j + row] < 0) {
                            // von eigener Figur besetzt
                            break;
                        }
                        if (Position[i][j + row] > 0) {
                            // von fremder Figur besetzt
                            legalMoves.addElement(new Move(i, j, i, j + row, Position[i][j + row], false));
                            // nothing
                            break;
                        }
                        if (Position[i][j + row] == 0) {
                            // unbesetzt
                            legalMoves.addElement(new Move(i, j, i, j + row, 0, false));
                        // nothing
                        }
                    }
                }
                for (int row = 1; row < 8; row++) {
                    if (j - row < 0) {
                        break;
                    } else {
                        if (Position[i][j - row] < 0) {
                            // von eigener Figur besetzt
                            break;
                        }
                        if (Position[i][j - row] > 0) {
                            // von fremder Figur besetzt
                            legalMoves.addElement(new Move(i, j, i, j - row, Position[i][j - row], false));
                            // nothing
                            break;
                        }
                        if (Position[i][j - row] == 0) {
                            // unbesetzt
                            legalMoves.addElement(new Move(i, j, i, j - row, 0, false));
                        // nothing
                        }
                    }
                }
            } else if (Position[i][j] == -pawnValue) {
                // weisser BAUER, brettrand check unnötig
                if (Position[i][j - 1] == 0) {
                    // Vorgehen möglich
                    if (j == 1) {
                        legalMoves.addElement(new Move(i, j, i, j - 1, 0, true));
                    // nothing
                    } else {
                        legalMoves.addElement(new Move(i, j, i, j - 1, 0, false));
                    // nothing
                    }
                }
                if (i + 1 < 8) {
                    if (Position[i + 1][j - 1] > 0) {
                        if (j == 1) {
                            legalMoves.addElement(new Move(i, j, i + 1, j - 1, Position[i + 1][j - 1], true));
                        // nothing
                        } else {
                            legalMoves.addElement(new Move(i, j, i + 1, j - 1, Position[i + 1][j - 1], false));
                        // nothing
                        }
                    }
                }
                if (i - 1 > -1) {
                    if (Position[i - 1][j - 1] > 0) {
                        if (j == 1) {
                            legalMoves.addElement(new Move(i, j, i - 1, j - 1, Position[i - 1][j - 1], true));
                        // nothing
                        } else {
                            legalMoves.addElement(new Move(i, j, i - 1, j - 1, Position[i - 1][j - 1], false));
                        // nothing
                        }
                    }
                }
            }
        }
    }
    return legalMoves;
}
