private double trainDepParser(byte flag, String outputFile, JarArchiveOutputStream zout) throws Exception {
    AbstractDepParser parser = null;
    OneVsAllDecoder decoder = null;
    PrintStream fout = null;
    if (flag == ShiftPopParser.FLAG_TRAIN_LEXICON) {
        System.out.println("\n* Save lexica");
        if (s_depParser.equals(AbstractDepParser.ALG_SHIFT_EAGER))
            parser = new ShiftEagerParser(flag, s_featureXml);
        else if (s_depParser.equals(AbstractDepParser.ALG_SHIFT_POP))
            parser = new ShiftPopParser(flag, s_featureXml);
    } else if (flag == ShiftPopParser.FLAG_TRAIN_INSTANCE) {
        System.out.println("\n* Print training instances");
        System.out.println("- loading lexica");
        if (s_depParser.equals(AbstractDepParser.ALG_SHIFT_EAGER))
            parser = new ShiftEagerParser(flag, t_xml, ENTRY_LEXICA);
        else if (s_depParser.equals(AbstractDepParser.ALG_SHIFT_POP))
            parser = new ShiftPopParser(flag, t_xml, ENTRY_LEXICA);
    } else if (flag == ShiftPopParser.FLAG_PREDICT || flag == ShiftPopParser.FLAG_TRAIN_BOOST) {
        if (flag == ShiftPopParser.FLAG_PREDICT) {
            System.out.println("\n* Predict");
            fout = IOUtil.createPrintFileStream(outputFile);
        } else
            System.out.println("\n* Train boost");
        decoder = new OneVsAllDecoder(m_model);
        if (s_depParser.equals(AbstractDepParser.ALG_SHIFT_EAGER))
            parser = new ShiftEagerParser(flag, t_xml, t_map, decoder);
        else if (s_depParser.equals(AbstractDepParser.ALG_SHIFT_POP))
            parser = new ShiftPopParser(flag, t_xml, t_map, decoder);
    }
    String inputFile;
    boolean isTrain;
    if (flag == ShiftPopParser.FLAG_PREDICT) {
        inputFile = s_devFile;
        isTrain = false;
    } else {
        inputFile = s_trainFile;
        isTrain = true;
    }
    AbstractReader<DepNode, DepTree> reader = new DepReader(inputFile, isTrain);
    DepTree tree;
    int n;
    parser.setLanguage(s_language);
    reader.setLanguage(s_language);
    for (n = 0; (tree = reader.nextTree()) != null; n++) {
        parser.parse(tree);
        if (flag == ShiftPopParser.FLAG_PREDICT)
            fout.println(tree + "\n");
        if (n % 1000 == 0)
            System.out.printf("\r- parsing: %dK", n / 1000);
    }
    System.out.println("\r- parsing: " + n);
    if (flag == ShiftPopParser.FLAG_TRAIN_LEXICON) {
        System.out.println("- saving");
        parser.saveTags(ENTRY_LEXICA);
        t_xml = parser.getDepFtrXml();
    } else if (flag == ShiftPopParser.FLAG_TRAIN_INSTANCE) {
        t_map = parser.getDepFtrMap();
        a_yx = parser.a_trans;
    } else if (flag == ShiftPopParser.FLAG_PREDICT) {
        fout.close();
        String[] args = { "-g", s_devFile, "-s", outputFile };
        String log = "\n* Development accuracy\n";
        System.out.print(log);
        DepEvaluate eval = new DepEvaluate(args);
        s_build.append(log);
        s_build.append("- LAS: " + eval.getLas() + "\n");
        s_build.append("- UAS: " + eval.getUas() + "\n");
        s_build.append("- LS : " + eval.getLs() + "\n");
        return eval.getLas();
    } else if (flag == AbstractParser.FLAG_TRAIN_BOOST) {
        a_yx = parser.a_trans;
    }
    return 0;
}
