private Compartment createCompartment(CompilationUnit unit) {
    Compartment result = null;
    List types = unit.types();
    TypeDeclaration typeDec = (TypeDeclaration) types.get(0);
    String compartName = typeDec.getName().toString();
    if (typeDec.isInterface()) {
        result = new BInterface();
    } else {
        result = new BClass();
    }
    result.setName(compartName);
    // ��ӷ���������
    MethodDeclaration[] methodDecs = typeDec.getMethods();
    FieldDeclaration[] fields = typeDec.getFields();
    BAttribute[] attributes = createAttributes(fields);
    BMethod[] methods = createMethods(methodDecs);
    for (int i = 0; i < attributes.length; i++) {
        result.addChild(attributes[i]);
    }
    for (int i = 0; i < methods.length; i++) {
        result.addChild(methods[i]);
    }
    // ��Ӹ���
    if (typeDec.getSuperclassType() != null) {
        String filePath = this.projectPath + typeDec.getSuperclassType().toString() + ".java";
        Compartment parent = this.isExisted(filePath);
        if (parent != null) {
            createRelationship(result, parent, this.extendsRelationship);
        } else {
            parent = this.getCompartmentFromCompilationUnit(filePath);
            createRelationship(result, parent, this.extendsRelationship);
        }
    }
    // ��ӽӿ�
    if (typeDec.superInterfaceTypes().size() > 0) {
        System.out.println("superInterfaceTypes().toString() == " + typeDec.superInterfaceTypes().toString());
        Type tempInterface;
        for (int i = 0; i < typeDec.superInterfaceTypes().size(); i++) {
            tempInterface = (Type) typeDec.superInterfaceTypes().get(i);
            String filePath = this.projectPath + tempInterface.toString() + ".java";
            Compartment parent = this.isExisted(filePath);
            if (parent != null) {
                createRelationship(result, parent, this.implementsRelationship);
            } else {
                parent = this.getCompartmentFromCompilationUnit(filePath);
                createRelationship(result, parent, this.implementsRelationship);
            }
        }
    }
    return result;
}
