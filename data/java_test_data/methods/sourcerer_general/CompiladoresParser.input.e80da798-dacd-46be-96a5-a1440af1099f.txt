// $ANTLR start "input"
public final CompiladoresParser.input_return input() throws RecognitionException {
    CompiladoresParser.input_return retval = new CompiladoresParser.input_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token INPUT106 = null;
    CompiladoresParser.list_id_return list_id107 = null;
    CommonTree INPUT106_tree = null;
    try {
        dbg.enterRule(getGrammarFileName(), "input");
        if (getRuleLevel() == 0) {
            dbg.commence();
        }
        incRuleLevel();
        dbg.location(154, 1);
        try {
            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:154:9: ( INPUT list_id )
            dbg.enterAlt(1);
            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:154:11: INPUT list_id
            {
                root_0 = (CommonTree) adaptor.nil();
                dbg.location(154, 16);
                INPUT106 = (Token) match(input, INPUT, FOLLOW_INPUT_in_input1237);
                INPUT106_tree = (CommonTree) adaptor.create(INPUT106);
                root_0 = (CommonTree) adaptor.becomeRoot(INPUT106_tree, root_0);
                dbg.location(154, 18);
                pushFollow(FOLLOW_list_id_in_input1240);
                list_id107 = list_id();
                state._fsp--;
                adaptor.addChild(root_0, list_id107.getTree());
            }
            retval.stop = input.LT(-1);
            retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
        }
        dbg.location(154, 25);
    } finally {
        dbg.exitRule(getGrammarFileName(), "input");
        decRuleLevel();
        if (getRuleLevel() == 0) {
            dbg.terminate();
        }
    }
    return retval;
}
