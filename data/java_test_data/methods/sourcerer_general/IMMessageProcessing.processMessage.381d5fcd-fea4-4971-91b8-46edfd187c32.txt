public void processMessage(Request request, ServerTransaction serverTransaction) {
    try {
        System.out.println("EWRWERWEREWR " + request.toString());
        SipProvider sipProvider = imUA.getSipProvider();
        MessageFactory messageFactory = imUA.getMessageFactory();
        HeaderFactory headerFactory = imUA.getHeaderFactory();
        AddressFactory addressFactory = imUA.getAddressFactory();
        InstantMessagingGUI instantMessagingGUI = imUA.getInstantMessagingGUI();
        ListenerInstantMessaging listenerInstantMessaging = instantMessagingGUI.getListenerInstantMessaging();
        ChatSessionManager chatSessionManager = listenerInstantMessaging.getChatSessionManager();
        ChatSession chatSession = null;
        String fromURL = IMUtilities.getKey(request, "From");
        if (chatSessionManager.hasAlreadyChatSession(fromURL))
            chatSession = chatSessionManager.getChatSession(fromURL);
        else {
            chatSession = chatSessionManager.createChatSession(fromURL);
            ContactHeader contacthader = (ContactHeader) request.getHeader(ContactHeader.NAME);
            String toIp = contacthader.getAddress().getURI().toString();
            // ����toip
            toIp = toIp.substring(4);
            String toIMport = toIp;
            int i = 0;
            for (i = 0; i < toIp.length(); i++) if (toIp.charAt(i) == ':')
                break;
            toIp = toIp.substring(0, i);
            // ���û��Է���IP��ַ�浽chatsession
            chatSession.setToIMaddress(toIp);
            toIMport = toIMport.substring(i);
            for (i = 0; i < toIMport.length(); i++) if (toIMport.charAt(i) == ';')
                break;
            toIMport = toIMport.substring(1, i);
            System.out.println("�˿�" + toIMport);
            chatSession.setToIMport(toIMport);
        }
        DebugIM.println("IMMessageProcessing, processMEssage(), ChatSession:" + chatSession);
        DebugIM.println("Processing MESSAGE in progress...");
        // Send an OK
        Response response = messageFactory.createResponse(Response.OK, request);
        // Contact header:
        SipURI sipURI = addressFactory.createSipURI(null, imUA.getIMAddress());
        sipURI.setPort(imUA.getIMPort());
        sipURI.setTransportParam(imUA.getIMProtocol());
        Address contactAddress = addressFactory.createAddress(sipURI);
        ContactHeader contactHeader = headerFactory.createContactHeader(contactAddress);
        response.setHeader(contactHeader);
        ToHeader toHeader = (ToHeader) response.getHeader(ToHeader.NAME);
        if (toHeader.getTag() == null) {
            // It is the first message without a TO tag
            toHeader.setTag(new Integer((int) (Math.random() * 10000)).toString());
        }
        if (chatSession.isEstablishedSession()) {
            DebugIM.println("The Session already exists");
            serverTransaction.sendResponse(response);
            DebugIM.println("OK replied to the MESSAGE:\n" + response.toString());
        } else {
            DebugIM.println("The Session does not exists yet. ");
            serverTransaction.sendResponse(response);
            DebugIM.println("OK replied to the MESSAGE:\n" + response);
            Dialog dialog = serverTransaction.getDialog();
            if (dialog == null) {
                DebugIM.println("ERROR, IMProcessing, processMessage(), the dialog is null");
                return;
            }
            // We need to store the dialog:
            chatSession.setDialog(dialog);
            chatSession.setEstablishedSession(true);
            DebugIM.println("The DIALOG object has been stored in the ChatSession");
        }
        Object content = request.getContent();
        String text = null;
        if (content instanceof String)
            text = (String) content;
        else if (content instanceof byte[]) {
            text = new String((byte[]) content);
        } else {
        }
        if (text != null) {
            chatSession.displayRemoteText(text);
        }
    } catch (Exception ex) {
        ex.printStackTrace();
    }
}
