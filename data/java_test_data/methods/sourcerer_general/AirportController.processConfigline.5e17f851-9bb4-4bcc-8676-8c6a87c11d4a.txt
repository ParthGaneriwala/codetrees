public void processConfigline(String[] configline) {
    // get the model in order to process it
    // 
    ControlTower controlTower = (ControlTower) this.getModel();
    // Airspace airspace = (Airspace)airportModel.getAirportModel().getAirspace();
    // config will specify planes and airport config
    // overrides
    // 
    // all config lines specify an entity to be created or altered
    // using a switch statement to determine which path to take
    // 
    String p = "//.*";
    if ((configline.length > 0 && configline[0].matches(p)) || configline[0].length() == 0) {
    // nothing to do , comment or empty line
    } else {
        String delimeter = ",";
        String[] entity = configline[0].split(delimeter);
        if (configline.length > 0) {
            GlobalLog.info(entity[0]);
        }
        if (entity.length > 0) {
            if (entity[0].matches(AIRPLANE) && entity.length >= 10) {
                GlobalLog.info("read one " + AIRPLANE + "from config file.");
                // create an airplane
                // Airplane(id, airline, currentState,
                // currentResource, gate,
                // targetLandingTime, targetTakeoffTime,
                // fuelCapacity, fuelRemaining)
                String airline = entity[2];
                String id = entity[1];
                String currentState = entity[3];
                String[] resourceSearch = entity[4].split(" ");
                AirportResource currentResource = controlTower.getAirportModel().getResource(resourceSearch[0], entity[4]);
                String[] gateId = entity[7].split(" ");
                long targetLandingTime = Long.parseLong(entity[5]);
                if (targetLandingTime > 0) {
                    targetLandingTime += System.currentTimeMillis() + Long.parseLong(entity[10]);
                }
                long targetTakeoffTime = Long.parseLong(entity[6]);
                if (targetTakeoffTime > 0) {
                    targetTakeoffTime += System.currentTimeMillis() + Long.parseLong(entity[10]);
                }
                String fuelCapacity = entity[8];
                String fuelRemaining = entity[9];
                Gate gate = (Gate) (controlTower.getAirportModel().getResource(gateId[0], entity[7]));
                if (gate != null) {
                    Airplane a = new Airplane(Integer.parseInt(id), airline, currentState, currentResource, gate, targetLandingTime, targetTakeoffTime, Float.parseFloat(fuelCapacity), Float.parseFloat(fuelRemaining));
                    if (entity.length >= 11) {
                        a.setDelayStartUntil(System.currentTimeMillis() + Integer.parseInt(entity[10]));
                    }
                    a.setControlTower(controlTower);
                    controlTower.addPlane(a);
                    new Thread(a).start();
                }
            // at this time to pass a reference to the gate
            // should consider passing only a string id ref to the
            // airplane constructor
            // simpler and easier to code in file parsing
            // Gate mygate = airport.getGate(gate);
            // 
            // had to implement airport.model.AirportModel.getGate(String s)
            // in order to build the airplane from the params passed
            // 
            } else if (entity[0].matches(RUNWAY) && entity.length == 2) {
                GlobalLog.info("read one " + RUNWAY + "from config file.");
                Runway r = new Runway(1, entity[1]);
                controlTower.getAirportModel().addResource(r);
                controlTower.getAirportModel().setOtherRunWays();
            // running into difficulty due to the setOtherRunway method
            // in order to correctly utilize this should have reference to both
            // runway, here we only have one
            // implemented airport.model.AirportModel.setOtherRunWays()
            // create a runway or alter a runway
            // currently only creating a runway not altering it
            } else if (entity[0].matches(GATE) && entity.length == 3) {
                Gate g = new Gate(1, entity[1], entity[2]);
                controlTower.getAirportModel().addResource(g);
                GlobalLog.info("read one " + GATE + "from config file.");
            // create a gate or alter a gate
            } else if (entity[0].matches(HANGAR) && entity.length == 3) {
                Hangar h = new Hangar(Integer.parseInt(entity[1]), entity[2]);
                controlTower.getAirportModel().addResource(h);
                GlobalLog.info("read one " + HANGAR + "from config file.");
            // create a hangar or alter a hangar
            } else if (entity[0].matches(AIRSPACE) && entity.length == 3) {
                Airspace a = new Airspace(Integer.parseInt(entity[1]), entity[2]);
                controlTower.getAirportModel().addResource(a);
                GlobalLog.info("read one " + AIRSPACE + "from config file.");
            // create an airspace or alter an airspace
            } else if (entity[0].matches(HOLDINGPATTERN) && entity.length == 3) {
                HoldingPattern h = new HoldingPattern(Integer.parseInt(entity[1]), entity[2]);
                controlTower.getAirportModel().addResource(h);
                GlobalLog.info("read one " + HOLDINGPATTERN + "from config file.");
            // create a holding pattern or alter a holding pattern
            } else {
                GlobalLog.info("unknown operation " + entity[0]);
            }
        }
    }
}
