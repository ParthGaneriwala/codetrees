public static void svm_save_model(String model_file_name, svm_model model) throws IOException {
    DataOutputStream fp = new DataOutputStream(new BufferedOutputStream(new FileOutputStream(model_file_name)));
    svm_parameter param = model.param;
    fp.writeBytes("svm_type " + svm_type_table[param.svm_type] + "\n");
    fp.writeBytes("kernel_type " + kernel_type_table[param.kernel_type] + "\n");
    if (param.kernel_type == svm_parameter.POLY)
        fp.writeBytes("degree " + param.degree + "\n");
    if (param.kernel_type == svm_parameter.POLY || param.kernel_type == svm_parameter.RBF || param.kernel_type == svm_parameter.SIGMOID)
        fp.writeBytes("gamma " + param.gamma + "\n");
    if (param.kernel_type == svm_parameter.POLY || param.kernel_type == svm_parameter.SIGMOID)
        fp.writeBytes("coef0 " + param.coef0 + "\n");
    int nr_class = model.nr_class;
    int l = model.l;
    fp.writeBytes("nr_class " + nr_class + "\n");
    fp.writeBytes("total_sv " + l + "\n");
    {
        fp.writeBytes("rho");
        for (int i = 0; i < nr_class * (nr_class - 1) / 2; i++) fp.writeBytes(" " + model.rho[i]);
        fp.writeBytes("\n");
    }
    if (model.label != null) {
        fp.writeBytes("label");
        for (int i = 0; i < nr_class; i++) fp.writeBytes(" " + model.label[i]);
        fp.writeBytes("\n");
    }
    if (// regression has probA only
    model.probA != null) {
        fp.writeBytes("probA");
        for (int i = 0; i < nr_class * (nr_class - 1) / 2; i++) fp.writeBytes(" " + model.probA[i]);
        fp.writeBytes("\n");
    }
    if (model.probB != null) {
        fp.writeBytes("probB");
        for (int i = 0; i < nr_class * (nr_class - 1) / 2; i++) fp.writeBytes(" " + model.probB[i]);
        fp.writeBytes("\n");
    }
    if (model.nSV != null) {
        fp.writeBytes("nr_sv");
        for (int i = 0; i < nr_class; i++) fp.writeBytes(" " + model.nSV[i]);
        fp.writeBytes("\n");
    }
    fp.writeBytes("SV\n");
    double[][] sv_coef = model.sv_coef;
    svm_node[][] SV = model.SV;
    for (int i = 0; i < l; i++) {
        for (int j = 0; j < nr_class - 1; j++) fp.writeBytes(sv_coef[j][i] + " ");
        svm_node[] p = SV[i];
        if (param.kernel_type == svm_parameter.PRECOMPUTED)
            fp.writeBytes("0:" + (int) (p[0].value));
        else
            for (int j = 0; j < p.length; j++) fp.writeBytes(p[j].index + ":" + p[j].value + " ");
        fp.writeBytes("\n");
    }
    fp.close();
}
