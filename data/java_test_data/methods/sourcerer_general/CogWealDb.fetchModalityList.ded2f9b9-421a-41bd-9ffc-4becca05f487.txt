public ArrayList<IModal> fetchModalityList(String widgetName, int imageHeight, int imageWidth) {
    ArrayList<IModal> modalityList = new ArrayList<IModal>();
    try {
        String modalityQuery = "select * " + "from widget_modality_set_view " + "where widget = '" + widgetName + "'";
        Log.d(TAG, "fetchModalitySet query: " + modalityQuery);
        Cursor modalityCursor = mDb.rawQuery(modalityQuery, null);
        int modalityCount = modalityCursor.count();
        Log.d(TAG, "modalityCount: " + modalityCount);
        modalityCursor.first();
        for (int i = 0; i < modalityCount; ++i) {
            Log.d(TAG, "modality index: " + i);
            // Rows returned:
            // widget|modality_set|modality|
            // persistent|
            // modality_data|modality_type|ordinal
            // 
            String modality = modalityCursor.getString(2);
            int persistent = modalityCursor.getInt(3);
            String modalityData = modalityCursor.getString(4);
            Log.d(TAG, "modality_data: " + modalityData);
            String modalityType = modalityCursor.getString(5);
            boolean isPersistent = false;
            if (persistent != 0) {
                isPersistent = true;
            }
            boolean isVisual = false;
            boolean isAuditory = false;
            Cursor modeCursor = mDb.rawQuery("select * " + "from modality_mode_view " + "where modality = '" + modality + "'", null);
            modeCursor.first();
            while (!modeCursor.isAfterLast()) {
                Log.d(TAG, "fetchModalityList i: " + i);
                // Returns the following rows:
                // modality|mode
                String modeName = modeCursor.getString(1);
                if (modeName.equals("Visual")) {
                    isVisual = true;
                }
                if (modeName.equals("Auditory")) {
                    isAuditory = true;
                }
                modeCursor.next();
            }
            if (!modalityType.equalsIgnoreCase("Text")) {
                modalityData = mResourceDir + "/" + modalityData;
            }
            // more than one mode.
            if (isVisual) {
                // VisualModality textModality = new VisualModality(context, tv);
                VisualModality vm = new VisualModality(mContext);
                vm.setPersistence(isPersistent);
                if (modalityType.equalsIgnoreCase("Text")) {
                    TextView tv = new TextView(mContext);
                    tv.setText(modalityData);
                    vm.addChild(tv);
                }
                if (modalityType.equalsIgnoreCase("Icon") || modalityType.equalsIgnoreCase("Photograph")) {
                    Log.d(TAG, "Loading bitmap from file " + modalityData);
                    ImageView iv = new ImageView(mContext);
                    File imageFile = new File(modalityData);
                    if (!imageFile.exists()) {
                        Log.d(TAG, "File not found: " + imageFile);
                        modalityCursor.next();
                        continue;
                    }
                    // Grab image file from file system.
                    Bitmap myBitmap = BitmapFactory.decodeFile(modalityData);
                    Bitmap scaledBitmap = scaleBitmap(myBitmap, imageHeight, imageWidth);
                    Drawable bd = new BitmapDrawable(scaledBitmap);
                    iv.setImageDrawable(bd);
                    // FIXME - We need to control the scaling of the graphic
                    // (based on settings in the database), but the following
                    // code (lifted from the Gallery1 demo application) does
                    // nothing.
                    // iv.setImageBitmap(myBitmap);
                    // iv.setScaleType(ImageView.ScaleType.FIT_XY);
                    // iv.setLayoutParams(new Gallery.LayoutParams(16, 16));
                    // Log.d(TAG, "Set up a tiny button.");
                    vm.addChild(iv);
                }
                modalityList.add(vm);
            }
            if (isAuditory) {
                Log.d(TAG, "Loading audio from file " + modalityData);
                File audioFile = new File(modalityData);
                if (!audioFile.exists()) {
                    Log.d(TAG, "File not found: " + audioFile);
                    modalityCursor.next();
                    continue;
                }
                AudioModality am = new AudioModality(mContext, modalityData);
                modalityList.add(am);
            }
            modalityCursor.next();
        }
    } catch (SQLException e) {
        Log.e("booga", e.toString());
    }
    return modalityList;
}
