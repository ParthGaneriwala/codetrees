private void munchMove(MOVE m) {
    if (m.dst instanceof MEM) {
        MEM mem1 = (MEM) m.dst;
        Exp e2 = m.src;
        if (mem1.exp instanceof BINOP) {
            BINOP binop = (BINOP) mem1.exp;
            if (binop.right instanceof CONST) {
                CONST constant = (CONST) binop.right;
                Temp t1, t2;
                t1 = munchExp(binop.left);
                t2 = munchExp(e2);
                emit(new Assem.OPER("STORE M[ `d0  + " + constant.value + "] <- `s0\n", L(t1, null), L(t2, null), null));
            } else if (binop.left instanceof CONST) {
                CONST constant = (CONST) binop.left;
                Temp t1, t2;
                t1 = munchExp(binop.right);
                t2 = munchExp(e2);
                emit(new Assem.OPER("STORE M[ `d0 + " + constant.value + "] <- `s0\n", L(t1, null), L(t2, null), null));
            }
        // fim else..if
        } else if (e2 instanceof MEM) {
            MEM mem2 = (MEM) e2;
            Temp t1, t2;
            t1 = munchExp(mem1.exp);
            t2 = munchExp(mem2.exp);
            emit(new Assem.MOVE("MOVEM M[`d0] <- M[`s0]\n", t1, t2));
        } else if (mem1.exp instanceof CONST) {
            CONST constant = (CONST) mem1.exp;
            Temp t1;
            t1 = munchExp(e2);
            emit(new Assem.OPER("STORE M[r0 + " + constant.value + "] <- `s0\n", null, L(t1, null), null));
        } else {
            Temp t1, t2;
            t1 = munchExp(mem1.exp);
            t2 = munchExp(e2);
            emit(new Assem.OPER("STORE M[`d0] <- `s0\n", L(t1, null), L(t2, null), null));
        }
    // fim if..else
    } else if (m.dst instanceof TEMP) {
        TEMP temp = (TEMP) m.dst;
        Temp t1;
        t1 = munchExp(m.src);
        emit(new Assem.OPER("ADD `d0 <- r0 + `s0\n", L(temp.temp, null), L(t1, null), null));
    }
}
