public DominatorTree getDominatorTree(DiGraph graph, Node startNode) {
    // Get the spanning tree from the input graph
    spanningTreeDFS = new SpanningTreeDFS();
    this.graph = graph;
    this.startNode = startNode;
    spanningTree = (SpanningTree) spanningTreeDFS.execute(graph, startNode);
    HashMap semiDomVsNodes = new HashMap();
    // Loop through nodes in the graph starting with the highest depth first number and
    // going backwards through to the root (excluding the root)
    int numNodes = graph.getNumNodes();
    for (int i = numNodes - 1; i > 0; i--) {
        Node graphNode = spanningTree.getVisitedNode(i);
        Node parent = spanningTree.getParentInTree(graphNode);
        // Initialize the semidominator to the parent
        Node semiDominator = parent;
        Node temp = null;
        Vector predecessors = graphNode.getPredecessors();
        int numPredecessors = predecessors.size();
        int dfNumOfNode = spanningTree.getDepthFirstNumber(graphNode);
        for (int j = 0; j < numPredecessors; j++) {
            Node prdNode = (Node) predecessors.elementAt(j);
            int dfNumOfPred = spanningTree.getDepthFirstNumber(prdNode);
            if (// Predecessor is an ancestor
            dfNumOfPred <= dfNumOfNode)
                temp = prdNode;
            else
                // Predecessor is an NOT an ancestor
                temp = (Node) semidominators.get(ancestorWithLowestSemi(prdNode));
            if (spanningTree.getDepthFirstNumber(temp) < spanningTree.getDepthFirstNumber(semiDominator))
                semiDominator = temp;
        }
        // Put the semidominator determined above into the semidominator bucket (HashMap)
        semidominators.put(graphNode, semiDominator);
        addToSemiDominatorBucket(semiDomVsNodes, semiDominator, graphNode);
        link(parent, graphNode);
        // Calculate the immediate dominator
        Vector childrenOfSemiDominator = (Vector) semiDomVsNodes.get(parent);
        int numChildren = 0;
        if (childrenOfSemiDominator != null)
            numChildren = childrenOfSemiDominator.size();
        for (int k = 0; k < numChildren; k++) {
            Node child = (Node) childrenOfSemiDominator.elementAt(k);
            Node prevNode = ancestorWithLowestSemi(child);
            if (semidominators.get(prevNode) == semidominators.get(child))
                immediateDominators.put(child, parent);
            else
                sameDominators.put(child, prevNode);
        }
    }
    // Deferred dominator calculations
    for (int m = 1; m < numNodes; m++) {
        Node node = graph.getNode(m);
        Node sameNode = (Node) sameDominators.get(node);
        if (sameNode != null)
            immediateDominators.put(node, (Node) immediateDominators.get(sameNode));
    }
    // Create the dominator tree
    return createDominatorTree();
}
