StatementCommand compileSetDatabaseProperty() {
    read();
    String name;
    checkDatabaseUpdateAuthorisation();
    switch(token.tokenType) {
        case Tokens.COLLATION:
            {
                read();
                checkIsSimpleName();
                name = token.tokenString;
                read();
                Object[] args = new Object[] { name };
                return new StatementCommand(StatementTypes.SET_DATABASE_SQL_COLLATION, args, null, null);
            }
        case Tokens.DEFAULT:
            {
                return compileSetDefault();
            }
        case Tokens.EVENT:
            {
                read();
                readThis(Tokens.LOG);
                readThis(Tokens.LEVEL);
                Integer value = readIntegerObject();
                Object[] args = new Object[] { value };
                return new StatementCommand(StatementTypes.SET_DATABASE_FILES_EVENT_LOG, args, null, null);
            }
        case Tokens.GC:
            {
                read();
                Integer size = readIntegerObject();
                Object[] args = new Object[] { size };
                return new StatementCommand(StatementTypes.SET_DATABASE_GC, args, null, null);
            }
        case Tokens.REFERENTIAL:
            {
                read();
                readThis(Tokens.INTEGRITY);
                boolean mode = processTrueOrFalse();
                Object[] args = new Object[] { Boolean.valueOf(mode) };
                return new StatementCommand(StatementTypes.SET_DATABASE_SQL_REFERENTIAL_INTEGRITY, args, null, null);
            }
        case Tokens.SQL:
            {
                read();
                int type = 0;
                Boolean flag = null;
                switch(token.tokenType) {
                    case Tokens.REFERENCES:
                        read();
                        type = StatementTypes.SET_DATABASE_SQL_REFERENCES;
                        flag = processTrueOrFalseObject();
                        break;
                    case Tokens.SIZE:
                        read();
                        type = StatementTypes.SET_DATABASE_SQL_STRICT_SIZE;
                        flag = processTrueOrFalseObject();
                        break;
                    case Tokens.NAMES:
                        read();
                        type = StatementTypes.SET_DATABASE_SQL_STRICT_NAMES;
                        flag = processTrueOrFalseObject();
                        break;
                    default:
                        unexpectedToken();
                }
                Object[] args = new Object[] { flag };
                return new StatementCommand(type, args, null, null);
            }
        case Tokens.TEXT:
            {
                read();
                readThis(Tokens.TABLE);
                readThis(Tokens.DEFAULTS);
                String source = readQuotedString();
                Object[] args = new Object[] { source };
                return new StatementCommand(StatementTypes.SET_DATABASE_TEXT_SOURCE, args, null, null);
            }
        case Tokens.TRANSACTION:
            {
                read();
                readThis(Tokens.CONTROL);
                int mode = TransactionManager.LOCKS;
                switch(token.tokenType) {
                    case Tokens.MVCC:
                        read();
                        mode = TransactionManager.MVCC;
                        break;
                    case Tokens.MVLOCKS:
                        read();
                        mode = TransactionManager.MVLOCKS;
                        break;
                    case Tokens.LOCKS:
                        read();
                        mode = TransactionManager.LOCKS;
                        break;
                }
                Object[] args = new Object[] { ValuePool.getInt(mode) };
                StatementCommand cs = new StatementCommand(StatementTypes.SET_DATABASE_TRANSACTION_CONTROL, args, null, null);
                HsqlName[] names = database.schemaManager.getCatalogAndBaseTableNames();
                cs.writeTableNames = names;
                return cs;
            }
        case Tokens.UNIQUE:
            {
                read();
                readThis(Tokens.NAME);
                isUndelimitedSimpleName();
                name = token.tokenString;
                read();
                /**
                 * @todo - only digits, letters and underscore
                 */
                if (name.length() != 16) {
                    throw Error.error(ErrorCode.X_42555);
                }
                if (!Charset.isInSet(name, Charset.unquotedIdentifier) || !Charset.startsWith(name, Charset.uppercaseLetters)) {
                    throw Error.error(ErrorCode.X_42501);
                }
                Object[] args = new Object[] { name };
                return new StatementCommand(StatementTypes.SET_DATABASE_UNIQUE_NAME, args, null, null);
            }
        default:
            {
                throw unexpectedToken();
            }
    }
}
