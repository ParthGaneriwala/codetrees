private void handleUnsubscribed(SmManager smManager, OnlineUser onlineUser, UserResource userResource, Presence presence) {
    JID to = presence.getTo();
    if (to == null || to.getResource() != null) {
        Presence presenceError = PacketUtils.createErrorPresence(presence);
        XmppError error = new XmppError(XmppError.Condition.bad_request);
        presenceError.setError(error);
        userResource.sendToSelfClient(presenceError);
        return;
    }
    String username = onlineUser.getNode();
    try {
        IqRoster iqRoster = getIqRoster(username);
        IqRoster.Item iqRosterItem = iqRoster.getRosterItem(to);
        if (iqRosterItem == null) {
            return;
        }
        RosterItem item = new RosterItem();
        item.setUsername(username);
        item.setRosterJID(to);
        item.setNickname(iqRosterItem.getName());
        item.setGroups(iqRosterItem.getGroupNames());
        IqRoster.Subscription subs = iqRosterItem.getSubscription();
        IqRoster.Ask ask = iqRosterItem.getAsk();
        item.setAsk(ask == null ? null : RosterItem.Ask.valueOf(ask.toString()));
        if (subs == IqRoster.Subscription.from || subs == IqRoster.Subscription.both) {
            if (subs == IqRoster.Subscription.from) {
                iqRosterItem.setSubscription(IqRoster.Subscription.none);
                item.setSubscription(RosterItem.Subscription.none);
            } else {
                iqRosterItem.setSubscription(IqRoster.Subscription.to);
                item.setSubscription(RosterItem.Subscription.to);
            }
            updateRosterItem(item);
            notifyResourceRosterChanged(onlineUser, userResource, iqRosterItem);
            presence.setFrom(new JID(username, smManager.getDomain(), null));
            userResource.sendToOtherUser(presence);
            notifyAllResourceUnavailableState(smManager, onlineUser, userResource, to);
        }
    } catch (Exception e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    }
}
