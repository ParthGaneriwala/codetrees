private ArrayList<ActionAPMAssociation> initializeActions() {
    if (model == null) {
        throw new RuntimeException("model is null");
    }
    if (model.getAvatar() == null) {
        throw new RuntimeException("model.getAvatar is null");
    }
    // Get Actions from model
    Entity avatar = model.getAvatar();
    Action<DirectionParams> moveAction = avatar.getMovementAction();
    Action<UsableItemParams> itemAction = avatar.getUseItemAction();
    Collection<Action<SpatialParams>> spatialActions = avatar.getSpatialActions();
    // List to store associations between Actions and APMs (Action Performed
    // Managers)
    ArrayList<ActionAPMAssociation> actionAPMAssociations = new ArrayList<ActionAPMAssociation>();
    // Temporary APM object to be added to actionAPMAssociations
    ActionPerformedManager<? extends ActionParams> apm;
    // Create ActionPerformedManagers (apm) for Actions w/DirectionParams
    apm = new ActionPerformedManager<DirectionParams>(moveAction, new DirectionParams(new Vector2D(0, 1)));
    gameKeyRecognizer.setKeyForKeyManager(apm, KeyBindingID.MOVE_UP_LEFT);
    apm = new ActionPerformedManager<DirectionParams>(moveAction, new DirectionParams(new Vector2D(1, 1)));
    gameKeyRecognizer.setKeyForKeyManager(apm, KeyBindingID.MOVE_UP);
    apm = new ActionPerformedManager<DirectionParams>(moveAction, new DirectionParams(new Vector2D(1, 0)));
    gameKeyRecognizer.setKeyForKeyManager(apm, KeyBindingID.MOVE_UP_RIGHT);
    apm = new ActionPerformedManager<DirectionParams>(moveAction, new DirectionParams(new Vector2D(1, -1)));
    gameKeyRecognizer.setKeyForKeyManager(apm, KeyBindingID.MOVE_RIGHT);
    apm = new ActionPerformedManager<DirectionParams>(moveAction, new DirectionParams(new Vector2D(0, -1)));
    gameKeyRecognizer.setKeyForKeyManager(apm, KeyBindingID.MOVE_DOWN_RIGHT);
    apm = new ActionPerformedManager<DirectionParams>(moveAction, new DirectionParams(new Vector2D(-1, -1)));
    gameKeyRecognizer.setKeyForKeyManager(apm, KeyBindingID.MOVE_DOWN);
    apm = new ActionPerformedManager<DirectionParams>(moveAction, new DirectionParams(new Vector2D(-1, 0)));
    gameKeyRecognizer.setKeyForKeyManager(apm, KeyBindingID.MOVE_DOWN_LEFT);
    apm = new ActionPerformedManager<DirectionParams>(moveAction, new DirectionParams(new Vector2D(-1, 1)));
    gameKeyRecognizer.setKeyForKeyManager(apm, KeyBindingID.MOVE_LEFT);
    // Create ActionPerformedManagers for Actions w/SpatialParams
    if (spatialActions != null)
        for (Action<SpatialParams> spatialAction : spatialActions) {
            apm = new ActionPerformedManager<SpatialParams>(spatialAction, new SpatialParams(model.getGameMap()));
            actionAPMAssociations.add(new ActionAPMAssociation(spatialAction, apm));
        // keyRecognizer.setKeyForKeyManager(apm,
        // KeyBindingID.getCorrespondingKeyBindingID(spatialAction.getActionID()));
        // TODO we need a way to tell the keyRecognizer about this...
        }
    // Return ArrayList of Action/APM Associations
    return actionAPMAssociations;
}
