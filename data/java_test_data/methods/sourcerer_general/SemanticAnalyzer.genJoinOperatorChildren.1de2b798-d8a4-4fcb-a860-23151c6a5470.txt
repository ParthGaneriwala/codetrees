private OperatorInfo genJoinOperatorChildren(QBJoinTree join, OperatorInfo left, OperatorInfo[] right) {
    RowResolver outputRS = new RowResolver();
    // all children are base classes
    Operator<?>[] rightOps = new Operator[right.length];
    int pos = 0;
    int outputPos = 0;
    HashMap<Byte, ArrayList<exprNodeDesc>> exprMap = new HashMap<Byte, ArrayList<exprNodeDesc>>();
    for (OperatorInfo input : right) {
        ArrayList<exprNodeDesc> keyDesc = new ArrayList<exprNodeDesc>();
        if (input == null)
            input = left;
        Byte tag = Byte.valueOf((byte) (((reduceSinkDesc) (input.getOp().getConf())).getTag()));
        RowResolver inputRS = input.getRowResolver();
        Iterator<String> keysIter = inputRS.getTableNames().iterator();
        while (keysIter.hasNext()) {
            String key = keysIter.next();
            HashMap<String, ColumnInfo> map = inputRS.getFieldMap(key);
            Iterator<String> fNamesIter = map.keySet().iterator();
            while (fNamesIter.hasNext()) {
                String field = fNamesIter.next();
                ColumnInfo valueInfo = inputRS.get(key, field);
                keyDesc.add(new exprNodeColumnDesc(valueInfo.getType(), valueInfo.getInternalName()));
                if (outputRS.get(key, field) == null)
                    outputRS.put(key, field, new ColumnInfo((Integer.valueOf(outputPos++)).toString(), valueInfo.getType(), valueInfo.getIsVirtual()));
            }
        }
        exprMap.put(tag, keyDesc);
        rightOps[pos++] = input.getOp();
    }
    org.apache.org.fit.hiai.hadoop.hive.ql.plan.joinCond[] joinCondns = new org.apache.org.fit.hiai.hadoop.hive.ql.plan.joinCond[join.getJoinCond().length];
    for (int i = 0; i < join.getJoinCond().length; i++) {
        joinCond condn = join.getJoinCond()[i];
        joinCondns[i] = new org.apache.org.fit.hiai.hadoop.hive.ql.plan.joinCond(condn);
    }
    return new OperatorInfo(OperatorFactory.getAndMakeChild(new joinDesc(exprMap, joinCondns), new RowSchema(outputRS.getColumnInfos()), rightOps), outputRS);
}
