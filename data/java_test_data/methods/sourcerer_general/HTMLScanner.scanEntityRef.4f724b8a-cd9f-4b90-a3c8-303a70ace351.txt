// scanName():String
protected int scanEntityRef(XMLStringBuffer str, boolean content) throws IOException {
    str.clear();
    str.append('&');
    while (true) {
        int c = read();
        if (c == ';') {
            str.append(';');
            break;
        }
        if (c == -1) {
            if (fReportErrors) {
                fErrorReporter.reportWarning("HTML1004", null);
            }
            if (content && fDocumentHandler != null && fElementCount >= fElementDepth) {
                fEndLineNumber = fCurrentEntity.lineNumber;
                fEndColumnNumber = fCurrentEntity.columnNumber;
                fDocumentHandler.characters(str, locationAugs());
            }
            return -1;
        }
        if (!Character.isLetterOrDigit((char) c) && c != '#') {
            if (fReportErrors) {
                fErrorReporter.reportWarning("HTML1004", null);
            }
            fCurrentEntity.offset--;
            fCurrentEntity.columnNumber--;
            if (content && fDocumentHandler != null && fElementCount >= fElementDepth) {
                fEndLineNumber = fCurrentEntity.lineNumber;
                fEndColumnNumber = fCurrentEntity.columnNumber;
                fDocumentHandler.characters(str, locationAugs());
            }
            return -1;
        }
        str.append((char) c);
    }
    if (str.length == 1) {
        if (content && fDocumentHandler != null && fElementCount >= fElementDepth) {
            fEndLineNumber = fCurrentEntity.lineNumber;
            fEndColumnNumber = fCurrentEntity.columnNumber;
            fDocumentHandler.characters(str, locationAugs());
        }
        return -1;
    }
    String name = str.toString().substring(1, str.length - 1);
    if (name.startsWith("#")) {
        int value = -1;
        try {
            if (name.startsWith("#x")) {
                value = Integer.parseInt(name.substring(2), 16);
            } else {
                value = Integer.parseInt(name.substring(1));
            }
            /* PATCH: Asgeir Asgeirsson */
            if (fFixWindowsCharRefs && fIso8859Encoding) {
                value = fixWindowsCharacter(value);
            }
            if (content && fDocumentHandler != null && fElementCount >= fElementDepth) {
                fEndLineNumber = fCurrentEntity.lineNumber;
                fEndColumnNumber = fCurrentEntity.columnNumber;
                if (fNotifyCharRefs) {
                    XMLResourceIdentifier id = resourceId();
                    String encoding = null;
                    fDocumentHandler.startGeneralEntity(name, id, encoding, locationAugs());
                }
                str.clear();
                str.append((char) value);
                fDocumentHandler.characters(str, locationAugs());
                if (fNotifyCharRefs) {
                    fDocumentHandler.endGeneralEntity(name, locationAugs());
                }
            }
        } catch (NumberFormatException e) {
            if (fReportErrors) {
                fErrorReporter.reportError("HTML1005", new Object[] { name });
            }
            if (content && fDocumentHandler != null && fElementCount >= fElementDepth) {
                fEndLineNumber = fCurrentEntity.lineNumber;
                fEndColumnNumber = fCurrentEntity.columnNumber;
                fDocumentHandler.characters(str, locationAugs());
            }
        }
        return value;
    }
    int c = HTMLEntities.get(name);
    if (c == -1) {
        if (fReportErrors) {
            fErrorReporter.reportWarning("HTML1006", new Object[] { name });
        }
        if (content && fDocumentHandler != null && fElementCount >= fElementDepth) {
            fEndLineNumber = fCurrentEntity.lineNumber;
            fEndColumnNumber = fCurrentEntity.columnNumber;
            fDocumentHandler.characters(str, locationAugs());
        }
        return -1;
    }
    if (content && fDocumentHandler != null && fElementCount >= fElementDepth) {
        fEndLineNumber = fCurrentEntity.lineNumber;
        fEndColumnNumber = fCurrentEntity.columnNumber;
        boolean notify = fNotifyHtmlBuiltinRefs || (fNotifyXmlBuiltinRefs && builtinXmlRef(name));
        if (notify) {
            XMLResourceIdentifier id = resourceId();
            String encoding = null;
            fDocumentHandler.startGeneralEntity(name, id, encoding, locationAugs());
        }
        str.clear();
        str.append((char) c);
        fDocumentHandler.characters(str, locationAugs());
        if (notify) {
            fDocumentHandler.endGeneralEntity(name, locationAugs());
        }
    }
    return c;
}
