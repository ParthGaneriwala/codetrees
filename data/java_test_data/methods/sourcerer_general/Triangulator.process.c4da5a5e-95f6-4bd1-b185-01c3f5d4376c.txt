private boolean process(PointList contour, PointList result) {
    /* allocate and initialize list of Vertices in polygon */
    int n = contour.size();
    if (n < 3)
        return false;
    int[] V = new int[n];
    if (0.0f < area(contour)) {
        for (int v = 0; v < n; v++) V[v] = v;
    } else {
        for (int v = 0; v < n; v++) V[v] = (n - 1) - v;
    }
    int nv = n;
    /* remove nv-2 Vertices, creating 1 triangle every time */
    int count = 2 * nv;
    for (int m = 0, v = nv - 1; nv > 2; ) {
        /* if we loop, it is probably a non-simple polygon */
        if (0 >= (count--)) {
            // ** Triangulate: ERROR - probable bad polygon!
            return false;
        }
        /* three consecutive vertices in current polygon, <u,v,w> */
        int u = v;
        if (nv <= u)
            u = 0;
        /* previous */
        v = u + 1;
        if (nv <= v)
            v = 0;
        /* new v */
        int w = v + 1;
        if (nv <= w)
            w = 0;
        if (snip(contour, u, v, w, nv, V)) {
            int a, b, c, s, t;
            /* true names of the vertices */
            a = V[u];
            b = V[v];
            c = V[w];
            /* output Triangle */
            result.add(contour.get(a));
            result.add(contour.get(b));
            result.add(contour.get(c));
            m++;
            /* remove v from remaining polygon */
            for (s = v, t = v + 1; t < nv; s++, t++) {
                V[s] = V[t];
            }
            nv--;
            /* resest error detection counter */
            count = 2 * nv;
        }
    }
    return true;
}
