// ~ Methods ...............................................................
@Override
@SuppressWarnings("unchecked")
public void doAfterCompose(Component component) throws Exception {
    super.doAfterCompose(component);
    path = null;
    uploadUsersWindow = (Window) component;
    hasHeaderRowCheckbox = (Checkbox) component.getFellow("hasHeaderRowCheckbox");
    csvTable = (Listbox) component.getFellow("csvTable");
    // createUserDirectoriesCheckbox = (Checkbox)component.getFellow(
    // "createUserDirectoriesCheckbox" );
    userDirectoryLocation = (Bandbox) component.getFellow("userDirectoryLocation");
    directoryTree = (Tree) component.getFellow("directoryTree");
    addUsersToGroupCheckbox = (Checkbox) component.getFellow("addUsersToGroupCheckbox");
    groupToAddUsers = (Combobox) component.getFellow("groupToAddUsers");
    // okButton = (Button) component.getFellow("okButton");
    authPolicy = (Listbox) component.getFellow("authPolicy");
    Media csvMedia = (Media) Executions.getCurrent().getArg().get("csvMedia");
    if (csvMedia != null) {
        parseCsvMedia(csvMedia);
    }
    FileManagerModel fileModel = new FileManagerModel();
    directoryTree.setModel(new CSPathDirectoryTreeModel(fileModel));
    directoryTree.setTreeitemRenderer(new CSPathTreeitemRenderer());
    List<GrantedAuthority> groups = PermissionsManager.getInstance().getGroupList();
    for (GrantedAuthority group : groups) {
        Comboitem item = new Comboitem();
        item.setValue(group);
        item.setLabel(group.getAuthority());
        groupToAddUsers.getItems().add(item);
    }
}
