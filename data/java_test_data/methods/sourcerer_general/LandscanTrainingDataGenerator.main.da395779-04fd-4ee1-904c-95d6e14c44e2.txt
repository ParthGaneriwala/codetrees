public static void main(String[] args) {
    // String[] types = new String[]{"inf", "road", "wind"};
    String[] types = new String[] { "airport" };
    MomentGenerator mg = new MomentGenerator();
    // for the first ten tracks of each type (or whichever ones, really
    for (int run = 40; run < 50; run++) {
        // for each of the three types
        for (int type = 0; type < types.length; type++) {
            // if ((run != 2) || (type != 0)){
            String thisType = types[type];
            double[][] moments = new double[40][];
            // get the track length from the summary
            int length = 0;
            try {
                File summary = new File("D:/synthLandscan/" + thisType + "/run" + run + "/summary.csv");
                FileReader in = new FileReader(summary);
                CSVParser csvp = new CSVParser(in);
                String[][] values = csvp.getAllValues();
                length = (values.length - 2) * 5;
            } catch (IOException ioe) {
                System.out.println("what the? " + ioe.getMessage());
            }
            // for 200 evenly-spaced time steps (reduce to 100 in case of time issues, 40 for test data)
            for (int step = 0; step < 40; step++) {
                double interval = (double) length / 40d;
                int time = nearestMultipleOfFive((int) Math.round(interval * step));
                // if ((run != 2) || (type != 1) || (step > 81)){
                File file = new File("D:/synthLandscan/" + thisType + "/run" + run + "/" + thisType + "PAtime" + time + ".csv");
                float[][] raster;
                // run GAM & get a coverage out of it (or use the base raster)
                raster = FZRasterFromFile(file);
                mg.setRaster(raster);
                // calculate moments
                double[] temp = mg.calculateMomentInvariants();
                moments[step] = new double[temp.length];
                for (int blob = 0; blob < temp.length; blob++) {
                    moments[step][blob] = temp[blob];
                }
                System.out.println("finished moments for type " + thisType + ", run " + run + ", step " + step);
                try {
                    File momentFile = new File("D:/synthLandscan/" + thisType + "/run" + run + "/FZMoments" + step + ".csv");
                    FileWriter momentWriter = new FileWriter(momentFile);
                    momentWriter.write("" + temp[0]);
                    for (int l = 1; l < temp.length; l++) {
                        momentWriter.write("," + temp[l]);
                    }
                    momentWriter.write('\n');
                    momentWriter.close();
                } catch (IOException ioe) {
                    System.out.println("IOException writing moment file.  " + ioe.getMessage());
                }
            // }
            }
            // stash away for safekeeping and repeat, repeat, repeat!
            try {
                File momentFile = new File("D:/synthLandscan/" + thisType + "/run" + run + "/FZMoments.csv");
                FileWriter momentWriter = new FileWriter(momentFile);
                for (int k = 0; k < moments.length; k++) {
                    momentWriter.write("" + moments[k][0]);
                    for (int l = 1; l < moments[k].length; l++) {
                        momentWriter.write("," + moments[k][l]);
                    }
                    momentWriter.write('\n');
                }
                momentWriter.close();
            } catch (IOException ioe) {
                System.out.println("IOException writing moment file.  " + ioe.getMessage());
            }
        // }
        }
    // end for (int type...
    }
// end for (int run...
}
