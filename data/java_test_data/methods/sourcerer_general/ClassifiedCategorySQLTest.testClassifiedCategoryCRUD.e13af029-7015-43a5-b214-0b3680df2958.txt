public void testClassifiedCategoryCRUD() throws SQLException {
    // Insert classified category
    ClassifiedCategory classifiedCategory = new ClassifiedCategory();
    classifiedCategory.setItemName("Classified category SQL Test");
    classifiedCategory.setLevel("10");
    classifiedCategory.setEnabled(true);
    assertNotNull(classifiedCategory);
    boolean result = classifiedCategory.insert(db);
    assertTrue("Classified category was not inserted", result);
    assertTrue("Inserted classified category did not have an id", classifiedCategory.getId() > -1);
    // Update classified category
    // Try updating without reloading the classified category
    assertTrue("Classified category to update does not have an id", classifiedCategory.getId() > -1);
    int updateCount = classifiedCategory.update(db);
    // Reload the classified category, then update
    assertTrue(classifiedCategory.getId() > -1);
    classifiedCategory = new ClassifiedCategory(db, classifiedCategory.getId());
    classifiedCategory.setItemName("Classified Category SQL Test Updated Classified");
    updateCount = classifiedCategory.update(db);
    assertTrue("The classified category was not updated by the database", updateCount == 1);
    // Find the previously set classified
    int classifiedCategoryId = classifiedCategory.getId();
    classifiedCategory = null;
    ClassifiedCategoryList classifiedCategoryList = new ClassifiedCategoryList();
    classifiedCategoryList.setEnabled(Constants.TRUE);
    classifiedCategoryList.buildList(db);
    assertTrue(classifiedCategoryList.size() > 0);
    Iterator i = classifiedCategoryList.iterator();
    while (i.hasNext()) {
        ClassifiedCategory thisClassifiedCategory = (ClassifiedCategory) i.next();
        if (thisClassifiedCategory.getId() == classifiedCategoryId) {
            classifiedCategory = thisClassifiedCategory;
            break;
        }
    }
    assertNotNull(classifiedCategory);
    classifiedCategory.delete(db, (String) null);
    classifiedCategoryId = classifiedCategory.getId();
    classifiedCategory = null;
    // Try to find the previously deleted classified category
    classifiedCategoryList = new ClassifiedCategoryList();
    classifiedCategoryList.setCode(classifiedCategoryId);
    classifiedCategoryList.buildList(db);
    Iterator ij = classifiedCategoryList.iterator();
    while (ij.hasNext()) {
        ClassifiedCategory thisClassifiedCategory = (ClassifiedCategory) ij.next();
        if (thisClassifiedCategory.getId() == classifiedCategoryId) {
            assertNull("Classified category exists when it shouldn't", thisClassifiedCategory);
        }
    }
}
