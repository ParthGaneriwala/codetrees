private void pair(final List<Obs> testObservations, final List<Obs> resultObservations) {
    while (CollectionUtils.isNotEmpty(testObservations) && CollectionUtils.isNotEmpty(resultObservations)) {
        Obs testObservation = testObservations.get(0);
        Obs resultObservation = resultObservations.get(0);
        Date testDate = testObservation.getObsDatetime();
        Date resultDate = resultObservation.getObsDatetime();
        OrderedObs orderedObs = new OrderedObs();
        Obs removedObs = null;
        if (testDate.before(resultDate)) {
            // test ordered obs created before the result comes from the lab system
            if (resultDate.after(DateUtils.addDays(testDate, 1))) {
                // test ordered and obs result from the lab system are more than a day apart, make the status no order
                removedObs = resultObservations.remove(0);
                orderedObs.setStatus(Status.STATUS_NO_ORDER);
            } else {
                // the test order and obs result from lab are less than a day apart, remove the test and display the obs result
                testObservations.remove(0);
                resultObservations.remove(0);
            }
        } else {
            // test ordered obs created after or on the same day the lab result comes from the lab system
            if (testDate.after(resultDate)) {
                // the test ordered comes after the result, make the status no result
                removedObs = testObservations.remove(0);
                orderedObs.setStatus(Status.STATUS_NO_RESULT);
            } else {
                // the test order and obs result from lab are on the same day, remove the test and display the obs result
                testObservations.remove(0);
                resultObservations.remove(0);
            }
        }
        if (removedObs != null) {
            orderedObs.setObs(removedObs);
            // if the obs have encounter, then pull some info from the encounter
            Encounter encounter = removedObs.getEncounter();
            if (encounter != null) {
                encounter = Context.getEncounterService().getEncounter(encounter.getEncounterId());
                orderedObs.setLocation(encounter.getLocation());
                orderedObs.setProvider(encounter.getProvider());
            }
            Context.getService(UtilService.class).saveOrderedObs(orderedObs);
        }
    }
    while (CollectionUtils.isNotEmpty(resultObservations)) {
        Obs removedObs = resultObservations.remove(0);
        OrderedObs orderedObs = new OrderedObs();
        orderedObs.setObs(removedObs);
        orderedObs.setStatus(Status.STATUS_NO_ORDER);
        // if the obs have encounter, then pull some info from the encounter
        Encounter encounter = removedObs.getEncounter();
        if (encounter != null) {
            encounter = Context.getEncounterService().getEncounter(encounter.getEncounterId());
            orderedObs.setLocation(encounter.getLocation());
            orderedObs.setProvider(encounter.getProvider());
        }
        Context.getService(UtilService.class).saveOrderedObs(orderedObs);
    }
    while (CollectionUtils.isNotEmpty(testObservations)) {
        Obs removedObs = testObservations.remove(0);
        OrderedObs orderedObs = new OrderedObs();
        orderedObs.setObs(removedObs);
        orderedObs.setStatus(Status.STATUS_NO_RESULT);
        // if the obs have encounter, then pull some info from the encounter
        Encounter encounter = removedObs.getEncounter();
        if (encounter != null) {
            encounter = Context.getEncounterService().getEncounter(encounter.getEncounterId());
            orderedObs.setLocation(encounter.getLocation());
            orderedObs.setProvider(encounter.getProvider());
        }
        Context.getService(UtilService.class).saveOrderedObs(orderedObs);
    }
    Context.flushSession();
    Context.clearSession();
}
