// fim de classe ReceiveMsgReplyBehaviour
protected void setup() {
    String tipo = "";
    // buscar argumentos
    Object[] args = getArguments();
    if (args != null && args.length > 0)
        tipo = (String) args[0];
    else {
        System.out.println("Nao especificou o tipo");
        doDelete();
    }
    DFAgentDescription dfd = new DFAgentDescription();
    ServiceDescription sd = new ServiceDescription();
    // Exemplo "Vendedor"
    sd.setType("Agente " + tipo);
    // Exemplo "Batata"
    sd.setName(getName());
    dfd.setName(getAID());
    dfd.addServices(sd);
    try {
        DFService.register(this, dfd);
    } catch (FIPAException e) {
        System.out.println(getLocalName() + "erro no registo em DF. " + e.getMessage());
        doDelete();
    }
    ReceiveMsgReplyBehaviour Behaviour1 = new ReceiveMsgReplyBehaviour(this);
    addBehaviour(Behaviour1);
    if (tipo.equals("pong")) {
        DFAgentDescription template = new DFAgentDescription();
        ServiceDescription sdt = new ServiceDescription();
        sdt.setType("Agente ping");
        template.addServices(sdt);
        ACLMessage msg = new ACLMessage(ACLMessage.INFORM);
        try {
            // Procura por agentes do tipo PING
            // Retorna todos os agentes que disponibilizam o serviï¿½o "Agente ping"
            DFAgentDescription[] result = DFService.search(this, template);
            for (int i = 0; i < result.length; ++i) msg.addReceiver(result[i].getName());
            msg.setContent("pong");
            send(msg);
        } catch (FIPAException fe) {
            fe.printStackTrace();
        }
    }
// fim do if
}
