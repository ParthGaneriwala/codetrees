public boolean insert(Connection db) throws SQLException {
    if (!isValid()) {
        return false;
    }
    Exception errorMessage = null;
    boolean commit = db.getAutoCommit();
    try {
        if (commit) {
            db.setAutoCommit(false);
        }
        StringBuffer sql = new StringBuffer();
        sql.append("INSERT INTO project_classified " + "(" + (id > -1 ? "classified_id, " : "") + "project_category_id, " + "classified_category_id, " + "project_id, " + "title, " + "description, " + "amount, " + "amount_currency, " + "publish_date, " + "expiration_date, " + "enabled, " + "read_count, " + "read_date, " + "rating_count, " + "rating_value, " + "rating_avg, " + "enteredby, " + "modifiedby ");
        if (entered != null) {
            sql.append(", entered ");
        }
        if (modified != null) {
            sql.append(", modified ");
        }
        sql.append(") VALUES (");
        if (id > -1) {
            sql.append("?, ");
        }
        sql.append("?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?  ");
        if (entered != null) {
            sql.append(",? ");
        }
        if (modified != null) {
            sql.append(",? ");
        }
        sql.append(")");
        int i = 0;
        PreparedStatement pst = db.prepareStatement(sql.toString());
        if (id > -1) {
            pst.setInt(++i, id);
        }
        DatabaseUtils.setInt(pst, ++i, projectCategoryId);
        DatabaseUtils.setInt(pst, ++i, categoryId);
        DatabaseUtils.setInt(pst, ++i, projectId);
        pst.setString(++i, title);
        pst.setString(++i, description);
        DatabaseUtils.setDouble(pst, ++i, amount);
        pst.setString(++i, amountCurrency);
        pst.setTimestamp(++i, publishDate);
        pst.setTimestamp(++i, expirationDate);
        pst.setBoolean(++i, enabled);
        DatabaseUtils.setInt(pst, ++i, readCount);
        pst.setTimestamp(++i, readDate);
        DatabaseUtils.setInt(pst, ++i, ratingCount);
        DatabaseUtils.setInt(pst, ++i, ratingValue);
        DatabaseUtils.setDouble(pst, ++i, ratingAvg);
        pst.setInt(++i, enteredBy);
        pst.setInt(++i, modifiedBy);
        if (entered != null) {
            pst.setTimestamp(++i, entered);
        }
        if (modified != null) {
            pst.setTimestamp(++i, modified);
        }
        pst.execute();
        pst.close();
        id = DatabaseUtils.getCurrVal(db, "project_classified_classified_id_seq", id);
        if (attachmentList != null) {
            FileItemList.convertTempFiles(db, Constants.PROJECT_CLASSIFIEDS_FILES, this.getModifiedBy(), id, attachmentList);
        }
        if (commit) {
            db.commit();
        }
    } catch (Exception e) {
        errorMessage = e;
        if (commit) {
            db.rollback();
        }
    } finally {
        if (commit) {
            db.setAutoCommit(true);
        }
    }
    if (errorMessage != null) {
        throw new SQLException(errorMessage.getMessage());
    }
    return true;
}
