public Synset createSynset(POS pos, String line) {
    TokenizerParser tokenizer = new TokenizerParser(line, " ");
    long offset = tokenizer.nextLong();
    // lex_filenum
    tokenizer.nextToken();
    String synsetPOS = tokenizer.nextToken();
    boolean isAdjectiveCluster = false;
    if (synsetPOS.equals("s")) {
        isAdjectiveCluster = true;
    }
    SynsetProxy proxy = new SynsetProxy(pos);
    int wordCount = tokenizer.nextHexInt();
    Word[] words = new Word[wordCount];
    for (int i = 0; i < wordCount; i++) {
        String lemma = tokenizer.nextToken();
        // lex id
        tokenizer.nextHexInt();
        words[i] = createWord(proxy, i, lemma);
    }
    int pointerCount = tokenizer.nextInt();
    Pointer[] pointers = new Pointer[pointerCount];
    for (int i = 0; i < pointerCount; i++) {
        String pt = tokenizer.nextToken();
        PointerType pointerType = PointerType.getPointerTypeForKey(pt);
        long targetOffset = tokenizer.nextLong();
        POS targetPOS = POS.getPOSForKey(tokenizer.nextToken());
        int linkIndices = tokenizer.nextHexInt();
        int sourceIndex = linkIndices / 256;
        int targetIndex = linkIndices & 255;
        PointerTarget source = (sourceIndex == 0) ? (PointerTarget) proxy : (PointerTarget) words[sourceIndex - 1];
        pointers[i] = new Pointer(source, i, pointerType, targetPOS, targetOffset, targetIndex);
    }
    if (pos == POS.VERB) {
        int verbFrameCount = tokenizer.nextInt();
        for (int i = 0; i < verbFrameCount; i++) {
            // "+"
            tokenizer.nextToken();
            int frameNumber = tokenizer.nextInt();
            int wordIndex = tokenizer.nextHexInt();
            if (wordIndex > 0) {
                ((MutableVerb) words[wordIndex - 1]).setVerbFrameFlag(frameNumber);
            } else {
                for (int j = 0; j < words.length; ++j) ((MutableVerb) words[j]).setVerbFrameFlag(frameNumber);
            }
        }
    }
    String gloss = null;
    int index = line.indexOf('|');
    if (index > 0) {
        gloss = line.substring(index + 2).trim();
    }
    BitSet verbFrames = new BitSet();
    for (int i = 0; i < words.length; i++) if (words[i] instanceof Verb)
        verbFrames.or(((Verb) words[i]).getVerbFrameFlags());
    Synset synset = new Synset(pos, offset, words, pointers, gloss, verbFrames, isAdjectiveCluster);
    proxy.setSource(synset);
    if (_log.isLevelEnabled(MessageLogLevel.TRACE)) {
        _log.log(MessageLogLevel.TRACE, "PRINCETON_INFO_002", new Object[] { pos, new Long(offset) });
    }
    return proxy;
}
