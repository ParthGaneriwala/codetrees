private void createTechnicalInfoControls(final Composite parent, ChromiumLineBreakpoint breakpoint) {
    final List<TargetInfo> list = new ArrayList<TargetInfo>();
    for (ConnectedTargetData connected : DebugTargetImpl.getAllConnectedTargetDatas()) {
        WorkspaceBridge workspaceRelations = connected.getWorkspaceRelations();
        BreakpointHandler breakpointHandler = workspaceRelations.getBreakpointHandler();
        Breakpoint sdkBreakpoint = breakpointHandler.getSdkBreakpoint(breakpoint);
        list.add(new TargetInfo(connected, sdkBreakpoint));
    }
    new Label(parent, SWT.NONE).setText(Messages.BreakpointTechnicalInfoPage_CHOOSE_LAUNCH);
    String[] launchLabels = new String[list.size()];
    for (int i = 0; i < launchLabels.length; i++) {
        TargetInfo targetInfo = list.get(i);
        DebugTargetImpl debugTarget = targetInfo.connectedTargetData.getDebugTarget();
        launchLabels[i] = debugTarget.getLaunch().getLaunchConfiguration().getName();
    }
    final Combo typesCombo = new Combo(parent, SWT.READ_ONLY);
    typesCombo.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    typesCombo.setFont(parent.getFont());
    typesCombo.setItems(launchLabels);
    if (launchLabels.length == 0) {
        return;
    }
    typesCombo.select(0);
    // Padding.
    new Label(parent, SWT.NONE);
    class BreakpointProperties {

        final Text text;

        {
            Composite c = JsLineBreakpointPage.createComposite(parent, 2, 1);
            text = ScriptFilePage.createTextField(c, Messages.BreakpointTechnicalInfoPage_TARGET);
        }

        void fillIn(int pos) {
            TargetInfo info = list.get(pos);
            String value;
            if (info.sdkBreakpoint == null) {
                value = Messages.BreakpointTechnicalInfoPage_NOT_SET;
            } else {
                Breakpoint.Target target = info.sdkBreakpoint.getTarget();
                value = target.accept(ChromiumDebugPluginUtil.BREAKPOINT_TARGET_TO_STRING);
            }
            text.setText(value);
        }
    }
    final BreakpointProperties breakpointProperties = new BreakpointProperties();
    breakpointProperties.fillIn(0);
    typesCombo.addSelectionListener(new SelectionListener() {

        public void widgetDefaultSelected(SelectionEvent e) {
        }

        public void widgetSelected(SelectionEvent e) {
            int index = typesCombo.getSelectionIndex();
            breakpointProperties.fillIn(index);
        }
    });
}
