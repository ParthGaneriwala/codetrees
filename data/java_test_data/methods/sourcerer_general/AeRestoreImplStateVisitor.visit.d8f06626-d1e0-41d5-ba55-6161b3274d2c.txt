public void visit(AeActivityScopeImpl aImpl) throws AeBusinessProcessException {
    Element element = getImplState().getElement(aImpl);
    // $NON-NLS-1$
    boolean hasImplicitCompensationHandler = "true".equals(getImplState().getAttribute(aImpl, STATE_HASIMPLICITCOMPENSATIONHANDLER));
    // $NON-NLS-1$
    boolean hasImplicitTerminationHandler = "true".equals(getImplState().getAttribute(aImpl, STATE_HASIMPLICITTERMINATIONHANDLER));
    // $NON-NLS-1$
    boolean hasImplicitFaultHandler = "true".equals(getImplState().getAttribute(aImpl, STATE_HASIMPLICITFAULTHANDLER));
    // $NON-NLS-1$
    boolean normalCompletion = "true".equals(getImplState().getAttribute(aImpl, STATE_NORMALCOMPLETION));
    // $NON-NLS-1$
    boolean hasCoordinations = "true".equals(getImplState().getAttribute(aImpl, STATE_HASCOORDINATIONS));
    // $NON-NLS-1$
    boolean snapshotRecorded = "true".equals(getImplState().getAttribute(aImpl, STATE_SNAPSHOTRECORDED));
    String faultHandlerPath = getAttribute(element, STATE_FAULTHANDLERPATH);
    aImpl.setNormalCompletion(normalCompletion);
    aImpl.setSnapshotRecorded(snapshotRecorded);
    if (hasImplicitCompensationHandler) {
        // Calling getCompensationHandler() will create the implicit
        // compensation handler if necessary. Create the implicit compensation
        // handler now, so that traverse() will see it.
        aImpl.getCompensationHandler();
    }
    if (hasImplicitTerminationHandler) {
        // Calling getTerminationHandler() will create the implicit
        // termination handler if necessary. Create the implicit termination
        // handler now, so that traverse() will see it.
        aImpl.getTerminationHandler();
    }
    if (hasImplicitFaultHandler) {
        // The implicit fault handler's fault will be restored when the fault
        // handler is traversed.
        aImpl.setFaultHandler(aImpl.createImplicitFaultHandler(null));
    } else if (AeUtil.notNullOrEmpty(faultHandlerPath)) {
        // One of our faultHandlers is executing. Set that instance on the scope.
        for (Iterator iter = aImpl.getFaultHandlersIterator(); iter.hasNext(); ) {
            AeDefaultFaultHandler fh = (AeDefaultFaultHandler) iter.next();
            if (fh.getLocationPath().equals(faultHandlerPath)) {
                aImpl.setFaultHandler(fh);
                break;
            }
        }
    }
    if (hasCoordinations) {
        // calling getCoordinationContainer creates the container.
        // this container will be visited by this traverser (via getChildrenForStateChange() )
        aImpl.getCoordinationContainer();
        // make a note that a scope had a coordinated invoke.
        // this flag will be use to set the process's isCoordinating state (for legacy compatibility).
        mScopeHadCoordination = true;
    }
    // Restore the scope's variables and correlation sets.
    if (aImpl.getVariableContainer() != null)
        restoreVariables(element, aImpl.getVariableContainer());
    restoreScopeCorrelationSets(element, aImpl);
    restoreScopePartnerLinks(element, aImpl);
    // the comp info for this impl is restored by another visitor
    traverse(aImpl);
}
