public int collide(Contact[] contacts, Body bodyA, Body bodyB) {
    Line line = (Line) bodyA.getShape();
    Polygon poly = (Polygon) bodyB.getShape();
    // TODO: this can be optimized using matrix multiplications and moving
    // only one shape
    // specifically the line, because it has only two vertices
    Vector2f[] vertsA = line.getVertices(bodyA.getPosition(), bodyA.getRotation());
    Vector2f[] vertsB = poly.getVertices(bodyB.getPosition(), bodyB.getRotation());
    Vector2f pos = poly.getCentroid(bodyB.getPosition(), bodyB.getRotation());
    // using the z axis of a 3d cross product we determine on what side B is
    boolean isLeftOf = 0 > (pos.x - vertsA[0].x) * (vertsA[1].y - vertsA[0].y) - (vertsA[1].x - vertsA[0].x) * (pos.y - vertsA[0].y);
    // direction
    if (isLeftOf) {
        Vector2f tmp = vertsA[0];
        vertsA[0] = vertsA[1];
        vertsA[1] = tmp;
    }
    // we use the line's normal for our sweepline projection
    Vector2f normal = new Vector2f(vertsA[1]);
    normal.sub(vertsA[0]);
    normal.set(normal.y, -normal.x);
    EdgeSweep sweep = new EdgeSweep(normal);
    sweep.insert(0, true, vertsA[0].dot(normal));
    sweep.insert(0, true, vertsA[1].dot(normal));
    sweep.addVerticesToSweep(false, vertsB);
    int[][] collEdgeCands = sweep.getOverlappingEdges();
    IntersectionGatherer intGath = new IntersectionGatherer(vertsA, vertsB);
    for (int i = 0; i < collEdgeCands.length; i++) intGath.intersect(collEdgeCands[i][0], collEdgeCands[i][1]);
    Intersection[] intersections = intGath.getIntersections();
    return populateContacts(contacts, vertsA, vertsB, intersections);
}
