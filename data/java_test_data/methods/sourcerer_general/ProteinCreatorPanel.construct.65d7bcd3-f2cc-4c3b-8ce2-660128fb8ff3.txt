public Boolean construct() {
    // get stuff from the parent
    Vector<String> lProteinAccessions = iParent.getProteinAccessions();
    Vector<String> lRatioTypesList = iParent.getNewRatioTypes();
    String[] lRatioTypes = new String[lRatioTypesList.size()];
    lRatioTypesList.toArray(lRatioTypes);
    Vector<String> lComponentTypesList = iParent.getNewComponentsType();
    String[] lComponentTypes = new String[lComponentTypesList.size()];
    lComponentTypesList.toArray(lComponentTypes);
    Vector<RatioGroupCollection> lCollections = iParent.getCollections();
    Vector<QuantitativeProtein> lQuantProtein = new Vector<QuantitativeProtein>();
    progressBar.setIndeterminate(true);
    progressBar.setStringPainted(true);
    progressBar.setString("Creating proteins ... ");
    // 1. create all the distiller proteins
    for (int i = 0; i < lProteinAccessions.size(); i++) {
        lQuantProtein.add(new QuantitativeProtein(lProteinAccessions.get(i), lRatioTypes));
    }
    // 9. couple the distiller ratio groups to the distiller proteins
    for (int i = 0; i < lCollections.size(); i++) {
        for (int j = 0; j < lCollections.get(i).size(); j++) {
            // get the ratio group
            RatioGroup lRatioGroup = lCollections.get(i).get(j);
            // get all the protein accession linked to this ratiogroup
            String[] lAccessions = lRatioGroup.getProteinAccessions();
            for (int k = 0; k < lAccessions.length; k++) {
                for (int l = 0; l < lQuantProtein.size(); l++) {
                    if (lAccessions[k].equalsIgnoreCase(lQuantProtein.get(l).getAccession())) {
                        // add the ratio group to the protein if the accession is the same
                        lQuantProtein.get(l).addRatioGroup(lRatioGroup);
                    }
                }
            }
        }
    // ToDo delete me
    // i = i + 40;
    // ToDo delete me
    }
    progressBar.setString("Calculating razor peptides ... ");
    calculateRazorPeptides(lQuantProtein);
    iQuantitativeValidationSingelton.setAllProteins(lQuantProtein);
    progressBar.setString("Doing location and scale normalization ... ");
    doNormalization(lQuantProtein, lRatioTypesList);
    progressBar.setString("Creating reference set ... ");
    // 10. create a reference set with the "household" proteins with the most ratiogroups
    ReferenceSet lReferenceSet = new ReferenceSet(new ArrayList<QuantitativeProtein>(), lRatioTypes, lComponentTypes);
    // sort by the ratio group numbers
    Collections.sort(lQuantProtein, new QuantitativeProteinSorterByRatioGroupNumbers());
    // get the reference set size from the singelton
    int lReferenceSetSize = iQuantitativeValidationSingelton.getNumberOfProteinsInReferenceSet();
    if (iQuantitativeValidationSingelton.getReferenceSetEnum() == ReferenceSetEnum.ALL) {
        lReferenceSetSize = lQuantProtein.size();
    }
    if (lReferenceSetSize > lQuantProtein.size()) {
        lReferenceSetSize = lQuantProtein.size();
    }
    for (int i = 0; i < lReferenceSetSize; i++) {
        lReferenceSet.addReferenceProtein(lQuantProtein.get(i));
    }
    // set the refernce set
    iQuantitativeValidationSingelton.setReferenceSet(lReferenceSet);
    // lReferenceSet.calculateStatisticsByRandomSampling();
    // sort by the protein accession
    Collections.sort(lQuantProtein, new QuantitativeProteinSorterByAccession());
    progressBar.setIndeterminate(false);
    downloadProteinSequences(lQuantProtein);
    // _____Do garbage collection______
    System.gc();
    iParent.setQuantitativeProtein(lQuantProtein);
    progressBar.setIndeterminate(true);
    progressBar.setStringPainted(true);
    // _____Do garbage collection______
    System.gc();
    // show gui
    JOptionPane.showMessageDialog(iParent, "All the data is loaded, ready to validate!", "INFO", JOptionPane.INFORMATION_MESSAGE);
    iQuantitativeValidationSingelton.setAllProteins(iParent.getQuantitativeProtein());
    QuantitationValidationGUI gui = new QuantitationValidationGUI(iParent.getQuantitativeProtein(), iParent.getMs_limsConnection(), iParent.isStandAlone());
    gui.setVisible(true);
    return true;
}
