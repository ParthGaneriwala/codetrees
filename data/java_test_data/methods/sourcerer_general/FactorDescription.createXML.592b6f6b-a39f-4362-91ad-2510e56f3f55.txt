protected Element createXML(Document doc) {
    Element elem = doc.createElement(XML_ELEMENT_NAME);
    elem.setAttribute(XML_ATTR_ID_NAME, id);
    elem.setAttribute(XML_ATTR_NAME_NAME, name);
    elem.setAttribute(XML_ATTR_IS_OVERT_NAME, isOvert() ? "yes" : "no");
    if (parent == null) {
        if (dictionary.isOpen()) {
            bits = 0;
            int len = dictionary.size();
            while ((1 << bits) < len) ++bits;
        }
    } else {
        if (parent.dictionary.isOpen()) {
            int longestDictionary = 0;
            for (int i = 0; i < dictionaries.size(); ++i) {
                Dictionary dictionary = dictionaries.get(i);
                if (dictionary == null)
                    continue;
                if (longestDictionary < dictionary.size()) {
                    longestDictionary = dictionary.size();
                }
            }
            bits = 0;
            if (longestDictionary > 0) {
                while ((1 << bits) < longestDictionary) ++bits;
            }
        }
    }
    elem.setAttribute(XML_ATTR_BITS_NAME, Byte.toString(bits));
    if (isOvert() && wordToOvertFactor != null) {
        Element e = doc.createElement(XML_WORD_TO_OVERT_FACTOR);
        e.setTextContent(wordToOvertFactor.getClass().getCanonicalName());
        elem.appendChild(e);
        try {
            Method storeMethod = wordToOvertFactor.getClass().getDeclaredMethod("store", Element.class);
            try {
                storeMethod.invoke(wordToOvertFactor, elem);
            } catch (IllegalArgumentException e1) {
                e1.printStackTrace();
            } catch (IllegalAccessException e1) {
                e1.printStackTrace();
            } catch (InvocationTargetException e1) {
                e1.printStackTrace();
            }
        } catch (NoSuchMethodException e1) {
        // no problem, it's optional
        }
    }
    if (parent == null) {
        elem.appendChild(dictionary.createXML(doc));
    } else {
        elem.setAttribute(XML_ATTR_PARENT_ID_NAME, parent.getId());
        for (int i = 0; i < dictionaries.size(); ++i) {
            Dictionary dictionary = dictionaries.get(i);
            if (dictionary == null)
                continue;
            // don't include special values into dependent vocabularies
            Element dict = dictionary.createXML(doc, false);
            dict.setAttribute(Dictionary.XML_ATTR_PARENT_VAL_NAME, parent.getDictionary().getWord(i));
            elem.appendChild(dict);
        }
    }
    return elem;
}
