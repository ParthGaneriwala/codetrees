private void touch(Curve.Point p) {
    // Note: getTouchedPoint always returns NEW touched point
    Curve.Point prevTouchedPoint = touchedPoint;
    touchedPoint = p;
    Curve cAnnotation = getSystemCurve(HOVER_ANNOTATION_ID);
    Curve cCursor = getSystemCurve(HOVER_CURSOR_ID);
    Curve cTouched = (null == p) ? null : p.getParent();
    if (null != touchedHoverWidget) {
        // free up resources allocated to previous hover widget
        if (!insideHoverCleanup) {
            try {
                insideHoverCleanup = true;
                touchedHoverWidget.hoverCleanup(prevTouchedPoint);
            } finally {
                insideHoverCleanup = false;
            }
        }
    }
    // with hoverCleanup out of the way, switch to new hover widget
    touchedHoverWidget = (null == cTouched) ? null : cTouched.getSymbol().getHoverWidget();
    if (null == touchedHoverWidget) {
        if (null != p) {
            // no hover-widget, just use expanded hover-template
            String hovertext = p.getHovertext();
            cAnnotation.getPoint(0).setAnnotationText(hovertext, cTouched.getSymbol().getHoverAnnotation().widthUpperBound, cTouched.getSymbol().getHoverAnnotation().heightUpperBound);
        }
    } else {
        // touched curve has custom hover widget; update it, etc.
        if (!insideHoverUpdate) {
            try {
                insideHoverUpdate = true;
                touchedHoverWidget.hoverUpdate(p);
            } finally {
                insideHoverUpdate = false;
            }
        }
        cAnnotation.getPoint(0).setAnnotationWidget((Widget) touchedHoverWidget, cTouched.getSymbol().getHoverAnnotation().widthUpperBound, cTouched.getSymbol().getHoverAnnotation().heightUpperBound);
    }
    if (null == p) {
        // no longer touching anything
        cAnnotation.setVisible(false);
        cCursor.setVisible(false);
    } else {
        if (!cTouched.getSymbol().getHoverAnnotationEnabled()) {
            cAnnotation.setVisible(false);
        } else {
            cAnnotation.setVisible(true);
            cAnnotation.setXShift(cTouched.getXShift());
            cAnnotation.setYShift(cTouched.getYShift());
            cAnnotation.setYAxis(cTouched.getYAxis());
            cAnnotation.getPoint(0).setX(p.getX());
            cAnnotation.getPoint(0).setY(p.getY());
            cAnnotation.getSymbol().copy(cTouched.getSymbol());
            // the symbol isn't needed, so make it transparent
            // and zap any images (can't make it 0-sized since
            // annotation placement is size-dependent)
            cAnnotation.getSymbol().setImageURL(GChart.DEFAULT_BLANK_IMAGE_URL_FULLPATH);
            cAnnotation.getSymbol().setBackgroundColor("transparent");
            cAnnotation.getSymbol().setBorderColor(TRANSPARENT_BORDER_COLOR);
            if (null != cTouched.getSymbol().getHoverAnnotationSymbolType())
                cAnnotation.getSymbol().setSymbolType(cTouched.getSymbol().getHoverAnnotationSymbolType());
            // else just stick with the touched symbol's type
            // copy the hover annotations specs (including
            // hover widget ref or HTML defined above)
            // to the annotation curve's point
            cAnnotation.getPoint(0).setAnnotationFontColor(cTouched.getSymbol().getHoverFontColor());
            cAnnotation.getPoint(0).setAnnotationFontSize(cTouched.getSymbol().getHoverFontSize());
            cAnnotation.getPoint(0).setAnnotationFontFamily(cTouched.getSymbol().getHoverFontFamily());
            cAnnotation.getPoint(0).setAnnotationFontStyle(cTouched.getSymbol().getHoverFontStyle());
            cAnnotation.getPoint(0).setAnnotationFontWeight(cTouched.getSymbol().getHoverFontWeight());
            cAnnotation.getPoint(0).setAnnotationLocation(cTouched.getSymbol().getHoverLocation());
            cAnnotation.getPoint(0).setAnnotationXShift(cTouched.getSymbol().getHoverXShift());
            cAnnotation.getPoint(0).setAnnotationYShift(cTouched.getSymbol().getHoverYShift());
        }
        if (!cTouched.getSymbol().getHoverSelectionEnabled()) {
            cCursor.setVisible(false);
        } else {
            cCursor.setVisible(true);
            cCursor.setXShift(cTouched.getXShift());
            cCursor.setYShift(cTouched.getYShift());
            cCursor.setYAxis(cTouched.getYAxis());
            // place cursor curve's point where touched point is:
            cCursor.getPoint(0).setX(p.getX());
            cCursor.getPoint(0).setY(p.getY());
            // cursor gets (mostly) same props as touched symbol
            cCursor.getSymbol().copy(cTouched.getSymbol());
            if (null != cTouched.getSymbol().getHoverSelectionSymbolType())
                cCursor.getSymbol().setSymbolType(cTouched.getSymbol().getHoverSelectionSymbolType());
            double fillSpacing = cTouched.getSymbol().getHoverSelectionFillSpacing();
            if (!(fillSpacing != fillSpacing))
                cCursor.getSymbol().setFillSpacing(fillSpacing);
            int fillThickness = cTouched.getSymbol().getHoverSelectionFillThickness();
            if (GChart.NAI != fillThickness)
                cCursor.getSymbol().setFillThickness(fillThickness);
            if (GChart.NAI != cTouched.getSymbol().getHoverSelectionHeight())
                cCursor.getSymbol().setHeight(cTouched.getSymbol().getHoverSelectionHeight());
            if (GChart.NAI != cTouched.getSymbol().getHoverSelectionWidth())
                cCursor.getSymbol().setWidth(cTouched.getSymbol().getHoverSelectionWidth());
            cCursor.getSymbol().setImageURL(cTouched.getSymbol().getHoverSelectionImageURL());
            cCursor.getSymbol().setBackgroundColor(cTouched.getSymbol().getHoverSelectionBackgroundColor());
            cCursor.getSymbol().setBorderColor(cTouched.getSymbol().getHoverSelectionBorderColor());
            cCursor.getSymbol().setBorderStyle(cTouched.getSymbol().getHoverSelectionBorderStyle());
            int borderWidth = cTouched.getSymbol().getHoverSelectionBorderWidth();
            cCursor.getSymbol().setBorderWidth(borderWidth);
        }
    }
}
