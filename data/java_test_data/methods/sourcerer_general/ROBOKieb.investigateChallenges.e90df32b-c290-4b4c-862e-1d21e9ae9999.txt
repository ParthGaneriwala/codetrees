public void investigateChallenges() {
    Challenge invChall = null;
    boolean onList = false;
    int challNumber = 0;
    String challenger = "";
    String sorryMess = "! Sorry, but your match request does not fit the format of the sim. Just do 'play " + simGiver[currentSimGiver] + "', please. If this does not allow you, you might be uneligible (guest or out of rating range).";
    for (int i = 0; i < currentChallenges.size(); i++) {
        invChall = (Challenge) (currentChallenges.elementAt(i));
        challenger = invChall.getOpponent().toString();
        challNumber = findNameInList(simParticipant, challenger);
        if ((invChall.getTimeOdds()) || (invChall.getTime() != simTime[currentSimGiver]) || (invChall.getInc() != simInc[currentSimGiver]) || (invChall.getWild() != simWild[currentSimGiver]) || (invChall.getColor() != simColor[currentSimGiver]) || ((invChall.getGuest()) && (!(simAllowUnreg[currentSimGiver]))) || ((invChall.getOppRating() > simMaxRating[currentSimGiver]) && (!(invChall.getGuest()))) || ((invChall.getOppRating() < simMinRating[currentSimGiver]) && (!(invChall.getGuest()))) || (invChall.getRated() ^ simRated[currentSimGiver])) {
            // sendLine("tell kiebitz Color: "+invChall.getColor()+" vs "+simColor[currentSimGiver]+" Guest: "+(invChall.getGuest())+", oppRating "+invChall.getOppRating()+" vs "+simMinRating[currentSimGiver]+" and "+simMaxRating[currentSimGiver]+" ratedcomp "+(invChall.getRated()^simRated[currentSimGiver])+".");
            if (challNumber > -1) {
                simParticipant.removeElementAt(challNumber);
                sendLine("spoof " + simGiver[currentSimGiver] + " -sim " + challenger);
            }
            sendLine("spoof " + simGiver[currentSimGiver] + " decline " + challenger);
            sendLine("tell " + challenger + sorryMess);
        } else {
            sendLine("spoof " + simGiver[currentSimGiver] + " +sim " + challenger);
            simParticipant.addElement(challenger);
            sendLine("qchanplus " + challenger + " " + simchannel);
            String ratedExpression = "u";
            if (simRated[currentSimGiver]) {
                ratedExpression = "r";
            }
            sendLine("qset " + challenger + " tourney " + simGiver[currentSimGiver] + " * " + simGiver[currentSimGiver] + " " + simTime[currentSimGiver] + " " + simInc[currentSimGiver] + " " + ratedExpression + " w" + simWild[currentSimGiver]);
            sendLine("tell " + challenger + "! You are now on the sim list of " + simGiver[currentSimGiver] + " as player " + simParticipant.size() + ". Watch channel " + simchannel + ". Do not toggle open or type 'match'. If you need to leave, type 'tell ROBOKieb leavesim'.");
            sendLine("tell " + simchannel + " " + challenger + " joined " + simGiver[currentSimGiver] + "'s sim. Currently " + simParticipant.size() + " players.");
            sendLine("qmatch " + challenger + " " + simGiver[currentSimGiver]);
            if ((simParticipant.size() + 2 > simMaxPlayer[currentSimGiver]) && (simParticipant.size() < simMaxPlayer[currentSimGiver])) {
                sendLine("tell " + simchannel + " ATTENTION! Just one more player and the sim will start automatically!");
                sendLine("tell " + simGiver[currentSimGiver] + " ATTENTION! Your sim will start with the NEXT player! Be ready.");
            }
            if (simParticipant.size() + 1 > simMaxPlayer[currentSimGiver]) {
                simStatus = 3;
                sendLine("tell " + simchannel + " *** SIM STARTING NOW! *** Good luck everyone!");
                sendLine("spoof " + simGiver[currentSimGiver] + " startsim");
                break;
            }
        }
    }
    currentChallenges.removeAllElements();
}
