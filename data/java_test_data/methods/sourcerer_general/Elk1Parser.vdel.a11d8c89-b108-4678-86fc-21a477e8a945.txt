// routine------------------------------------------------------------------------------------------
private ParseNode vdel() {
    // might be a "type" or "@AT"
    ParseNode parent;
    IdentifierNode rightIdChild;
    // might be Operator or Keyword
    ParseNode leftExprChild;
    if (nowReadingsymbol.isTypeKeyword()) {
        // match type
        parent = new TypeNode(nowReadingsymbol);
        readToken();
        if (nowReadingsymbol.isTerminal(IdentifierToken.class)) {
            // match id
            rightIdChild = new IdentifierNode(nowReadingsymbol);
            // no expr() so need readToken by itself here in this method
            readToken();
            if (nowReadingsymbol.isPuctuation(PunctuationSymbol.SEMICOLON)) {
                // might be the end of file
                if (!isEndOfFile()) {
                    // isEndOfFile �����ò�ֹ���ж�EOF���о��Ƕ�ȡ��һ��
                    // still lack of some error checking !!
                    // after isEndOfFile() might be end of block
                    isEndOfCurrentBlock();
                    isEndOfCurrentLoop();
                }
                parent.appendChild(rightIdChild);
                // type id;
                return parent;
            } else if (nowReadingsymbol.isOperator(Operator.ASSIGN)) {
                readToken();
                // now the nowReading points to the first token in the expr
                // ��ʵ����getConcreteTypwNodeҲ���Ҿ���
                leftExprChild = getConcreteTypwNode(expr());
                // ��ʱ��������˵
                parent.appendChild(leftExprChild);
                parent.appendChild(rightIdChild);
                // after expr() nowReading should points to semicolon
                if (nowReadingsymbol.isPuctuation(PunctuationSymbol.SEMICOLON)) {
                    if (!isEndOfFile()) {
                        isEndOfCurrentBlock();
                        isEndOfCurrentLoop();
                    }
                } else {
                    error("The declaration sytax is wrong!" + " at line " + nowReading.getLocation().getLineNumber());
                }
                // type id = expr;
                return parent;
            } else {
                error("The declaration sytax is wrong!" + " at line " + nowReading.getLocation().getLineNumber());
            }
        } else if (nowReadingsymbol.isOperator(Operator.LINDEXING)) {
            // array type declaration
            PunctuationToken colon = PunctuationToken.make(null, ":", PunctuationSymbol.COLON);
            PunctuationSymbolNode colonNode = new PunctuationSymbolNode(new TokenGrammarSymbol(colon));
            readToken();
            if (nowReadingsymbol.isTerminal(NumberToken.class)) {
                // for number node
                ParseNode num;
                IdentifierNode indexedId;
                num = new NumberNode(nowReadingsymbol);
                parent.appendChild(num);
                readToken();
                if (nowReadingsymbol.isOperator(Operator.RINDEXING))
                    // get the next token after ]    //eat ]
                    readToken();
                else
                    error("The array declaration sytax is wrong!" + " at line " + nowReading.getLocation().getLineNumber());
                while (!nowReadingsymbol.isTerminal(IdentifierToken.class)) {
                    // if not Id then must be [
                    if (nowReadingsymbol.isOperator(Operator.LINDEXING)) {
                        // get the next token after [
                        readToken();
                        if (nowReadingsymbol.isTerminal(NumberToken.class)) {
                            num = new NumberNode(nowReadingsymbol);
                            parent.appendChild(num);
                            readToken();
                            if (nowReadingsymbol.isOperator(Operator.RINDEXING))
                                // get the next token after ]    //eat ]
                                readToken();
                            else
                                error("The array declaration sytax is wrong!" + " at line " + nowReading.getLocation().getLineNumber());
                        } else {
                            error("The array declaration sytax is wrong!" + " at line " + nowReading.getLocation().getLineNumber());
                        }
                    } else
                        error("The array declaration sytax is wrong!" + " at line " + nowReading.getLocation().getLineNumber());
                }
                // now nowReadingsymbol must be id
                indexedId = new IdentifierNode(nowReadingsymbol);
                parent.appendChild(indexedId);
                // indicate an array
                parent.appendChild(colonNode);
                readToken();
                if (nowReadingsymbol.isPuctuation(PunctuationSymbol.SEMICOLON)) {
                    if (!isEndOfFile()) {
                        isEndOfCurrentBlock();
                        isEndOfCurrentLoop();
                    }
                } else {
                    error("The declaration sytax is wrong!" + " at line " + nowReading.getLocation().getLineNumber());
                }
                // int [2][2] id;
                return parent;
            } else {
                // error
                error("The array declaration sytax is wrong!" + " at line " + nowReading.getLocation().getLineNumber());
            }
        } else {
            // syntax checking
            error("The declaration sytax is wrong!" + " at line " + nowReading.getLocation().getLineNumber());
        }
    } else if (nowReadingsymbol.isOperator(Operator.AT)) {
        // match @
        parent = new BinaryOperatorNode(nowReadingsymbol);
        readToken();
        if (nowReadingsymbol.isTerminal(IdentifierToken.class)) {
            // match id
            rightIdChild = new IdentifierNode(nowReadingsymbol);
            readToken();
            if (nowReadingsymbol.isOperator(Operator.ASSIGN)) {
                readToken();
                leftExprChild = getConcreteTypwNode(expr());
                parent.appendChild(leftExprChild);
                parent.appendChild(rightIdChild);
                if (nowReadingsymbol.isPuctuation(PunctuationSymbol.SEMICOLON)) {
                    if (!isEndOfFile()) {
                        isEndOfCurrentBlock();
                        isEndOfCurrentLoop();
                    }
                } else {
                    error("The declaration sytax is wrong!" + " at line " + nowReading.getLocation().getLineNumber());
                }
                // @ id = expr;
                return parent;
            } else {
                error("The declaration sytax is wrong!" + " at line " + nowReading.getLocation().getLineNumber());
            }
        } else {
            // syntax checking
            error("The declaration sytax is wrong!" + " at line " + nowReading.getLocation().getLineNumber());
        }
    } else {
        error("The declaration sytax is wrong!" + " at line " + nowReading.getLocation().getLineNumber());
    }
    return null;
}
