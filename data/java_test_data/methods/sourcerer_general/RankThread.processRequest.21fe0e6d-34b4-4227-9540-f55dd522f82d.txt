private void processRequest() throws IOException {
    InputStreamReader inStreamReader = new InputStreamReader(sock.getInputStream());
    BufferedReader request = new BufferedReader(inStreamReader);
    DataOutputStream out = new DataOutputStream(sock.getOutputStream());
    try {
        // request line, e.g., GET /index.html HTML/1.1
        StringTokenizer request_tokens = new StringTokenizer(request.readLine());
        String method = request_tokens.nextToken();
        String[] pathAndQuery = request_tokens.nextToken().split("\\?", 2);
        String path = pathAndQuery[0];
        String query = "";
        String queryTerm = "";
        if (pathAndQuery.length > 1) {
            query = pathAndQuery[1];
            String[] queryParts = query.split("=");
            queryTerm = queryParts[1];
        }
        String protocol = request_tokens.nextToken();
        // headers, e.g., blah-blah: Blah blah blah
        HashMap<String, String> headers = new HashMap<String, String>();
        String nextLine = request.readLine();
        while (!nextLine.equals("")) {
            StringTokenizer header_parts = new StringTokenizer(nextLine, ":");
            headers.put(header_parts.nextToken().trim(), header_parts.nextToken().trim());
            nextLine = request.readLine();
        }
        if (method.equals("POST")) {
            int contentLength = Integer.parseInt(headers.get("Content-Length"));
            StringBuffer sb = new StringBuffer();
            int bytesRead = 0;
            char[] buf = new char[256];
            while (bytesRead < contentLength) {
                int numRead = request.read(buf, 0, 256);
                sb.append(buf);
                bytesRead += numRead;
            }
            Scanner scanner = new Scanner(sb.toString());
            String the_url = scanner.nextLine();
            Double the_rank = Double.parseDouble(scanner.nextLine());
            P2PCache.addPageRank(the_url, the_rank);
            // print request
            System.out.println(method + " " + path + " " + query);
            String responseCode = "HTTP/1.0 200 OK";
            out.writeBytes(responseCode);
            out.write(EOL);
            out.writeBytes("Content-Type: text/html; charset=UTF-8");
            out.writeBytes("Connection: close");
            out.write(EOL);
            out.write(EOL);
            out.writeBytes("Done.");
            out.write(EOL);
            out.write(EOL);
        } else {
            // GET request
            // assemble list of urls
            // Sample response:
            // HTTP/1.0 200 OK
            // Content-Type: text/html; charset=UTF-8
            // Connection: close
            // 
            // [url] [linksTo] [linksTo] [linksTo] ...
            // [url] [linksTo] [linksTo] [linksTo] ...
            // ...
            // 
            // End sample response.
            StringBuffer theResponse = new StringBuffer();
            for (String s : P2PCache.urlIndex.keySet()) {
                theResponse.append(s + " ");
                for (String u : P2PCache.urlIndex.get(s).linksTo) {
                    theResponse.append(u + " ");
                }
                theResponse.append("\n");
            }
            // print request
            System.out.println(method + " " + path + " " + query);
            out.writeBytes(theResponse.toString());
            out.write(EOL);
            out.write(EOL);
        }
    } catch (Exception e) {
        e.printStackTrace();
        return;
    }
    request.close();
    out.flush();
    out.close();
    sock.close();
    return;
}
