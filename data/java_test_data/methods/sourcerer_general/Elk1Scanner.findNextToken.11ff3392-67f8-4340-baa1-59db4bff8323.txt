private void findNextToken() {
    LocatedChar ch = nextNonWhitespaceChar();
    if (isDigit(ch) || ch.getCharacter() == '.') {
        TextLocation location = ch.getLocation();
        if (isDigit(ch)) {
            // TextLocation location = ch.getLocation();
            String beforeDot = getBeforeDotPart(ch);
            if (isFloat())
                scanFnumber(location, beforeDot);
            else
                scanNumber(location, beforeDot);
        } else
            scanFnumber(location, ".");
    } else if (isLowercase(ch) || isUppercase(ch) || isUnderline(ch)) {
        TextLocation location = ch.getLocation();
        String lexeme = getThisSting(ch);
        if (lexeme.equals("tofloat") || lexeme.equals("toint"))
            scanKeyword(location, lexeme);
        else if (lexeme.equals("true") || lexeme.equals("false"))
            scanBoolean(location, lexeme);
        else if (lexeme.equals("int") || lexeme.equals("float") || lexeme.equals("boolean") || lexeme.equals("string"))
            scanType(location, lexeme);
        else if (lexeme.equals("length"))
            scanKeyword(location, lexeme);
        else // if then else
        if (lexeme.equals("if"))
            scanKeyword(location, lexeme);
        else if (lexeme.equals("then"))
            scanKeyword(location, lexeme);
        else if (lexeme.equals("else"))
            scanKeyword(location, lexeme);
        else // loop:
        if (lexeme.equals("leave"))
            scanKeyword(location, lexeme);
        else if (lexeme.equals("stay"))
            scanKeyword(location, lexeme);
        else if (lexeme.equals("loop"))
            scanKeyword(location, lexeme);
        else if (lexeme.equals("index"))
            scanKeyword(location, lexeme);
        else if (lexeme.equals("in"))
            scanKeyword(location, lexeme);
        else // routine:
        if (lexeme.equals("routine"))
            scanKeyword(location, lexeme);
        else if (lexeme.equals("call"))
            scanKeyword(location, lexeme);
        else if (lexeme.equals("return"))
            scanKeyword(location, lexeme);
        else // walrus:
        if (lexeme.equals("walrus"))
            scanKeyword(location, lexeme);
        else if (lexeme.equals("print")) {
            // ���ڱ�����print�ڲ�ʵ�ֻ����ã�
            nextToken = OperatorToken.make(location, "!", Operator.PRINT);
        } else
            scanIdentifier(location, lexeme);
    } else if (isOperatorStart(ch)) {
        if (ch.getCharacter() == '/') {
            LocatedChar secondCharAfterOneSlach = input.next();
            if (secondCharAfterOneSlach.getCharacter() == '/') {
                // so just treat "//" as comments not two divides
                scanComment(ch.getLocation().getLineNumber());
            } else {
                input.pushback(secondCharAfterOneSlach);
                scanOperator(ch);
            }
        } else
            scanOperator(ch);
    } else if (isPunctuation(ch)) {
        scanPunctuation(ch);
    } else if (ch.getCharacter() == '"') {
        scanString(ch);
    } else if (ch.getCharacter() == '{') {
        LocatedChar localc = input.next();
        if (localc.getCharacter() == '{')
            scanLoopStatement(ch);
        else {
            input.pushback(localc);
            scanBlockStatement(ch);
        }
    } else if (ch.getCharacter() == '}') {
        LocatedChar localc = input.next();
        if (localc.getCharacter() == '}')
            scanLoopStatement(ch);
        else {
            input.pushback(localc);
            scanBlockStatement(ch);
        }
    } else if (isEndOfInput(ch)) {
        nextToken = NullToken.make(ch.getLocation());
    } else {
        lexicalError(ch);
        findNextToken();
    }
}
