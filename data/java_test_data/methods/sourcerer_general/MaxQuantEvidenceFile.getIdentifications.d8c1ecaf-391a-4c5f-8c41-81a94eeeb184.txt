public HashMap<Integer, DefaultPeptideIdentification> getIdentifications() throws IOException {
    // 1.read the msms file
    // create reader
    FileReader lMsmsReader = new FileReader(iMsmsFile);
    LineNumberReader lnMsmsreader = new LineNumberReader(lMsmsReader);
    // boolean that indicates if we have read the header
    boolean lMsMsHeaderParsed = false;
    // hashmap with the header titles and their positions
    HashMap lMsmsHeaderMap = new HashMap();
    HashMap<Integer, DefaultPeptideIdentification> lIdentificationsMap = new HashMap<Integer, DefaultPeptideIdentification>();
    int lCounter = 0;
    String[] lColumns;
    String lMsmsLine = "";
    // read it
    while ((lMsmsLine = lnMsmsreader.readLine()) != null) {
        if (!lMsMsHeaderParsed) {
            // we will parse the header
            String[] lHeader = lMsmsLine.split("\t");
            for (int i = 0; i < lHeader.length; i++) {
                lMsmsHeaderMap.put(lHeader[i], i);
            }
            // set the header parsed true
            lMsMsHeaderParsed = true;
        } else {
            lCounter = lCounter + 1;
            lColumns = lMsmsLine.split("\t");
            // first create the DefaultPeptideIdentification
            DefaultPeptideIdentification lIdentification = new DefaultPeptideIdentification();
            // set the id
            lIdentification.setId(Integer.valueOf(lColumns[(Integer) lMsmsHeaderMap.get("id")]));
            // set the accession and possible isoforms
            String lAccessions = new String(lColumns[(Integer) lMsmsHeaderMap.get("Proteins")]);
            String lIsoforms = "";
            if (lAccessions.indexOf(";") > 0) {
                // we found some isoforms
                String[] lTempIsoforms = lAccessions.split(";");
                // get the main identification accession
                lAccessions = new String(lTempIsoforms[0]);
                for (int i = 1; i < lTempIsoforms.length; i++) {
                    lIsoforms = lIsoforms + lTempIsoforms[i] + " ,";
                }
            }
            // set the identifications
            lIdentification.setAccession(lAccessions);
            // set the isoforms
            lIdentification.setIsoforms(lIsoforms);
            // set the (modified) sequence
            lIdentification.setSequence(new String(lColumns[(Integer) lMsmsHeaderMap.get("Sequence")]));
            lIdentification.setModified_sequence(new String(lColumns[(Integer) lMsmsHeaderMap.get("Modified Sequence")]));
            // set the charge
            lIdentification.setCharge(Integer.valueOf(lColumns[(Integer) lMsmsHeaderMap.get("Charge")]));
            // set the masses
            lIdentification.setPrecursor(Double.valueOf(lColumns[(Integer) lMsmsHeaderMap.get("m/z")]));
            // get the mass error
            String lMassErrorString = new String(lColumns[(Integer) lMsmsHeaderMap.get("Simple Mass Error [ppm]")]);
            double lMassError = 0.0;
            if (lMassErrorString.indexOf("-") > -1) {
                lMassError = Double.valueOf(lMassErrorString.substring(1));
            } else {
                lMassError = Double.valueOf(lMassErrorString);
            }
            // get the cal mass
            double lCalMass = Double.valueOf(lColumns[(Integer) lMsmsHeaderMap.get("Mass")]);
            // recalculate the obsereved mass
            double lExpMass = (lCalMass * 1000000.0) / (lMassError + 1000000.0);
            // set exp and cal mass
            lIdentification.setExp_mass(lExpMass);
            lIdentification.setCal_mass(lCalMass);
            // set the score
            if (lMsmsHeaderMap.get("Mascot Score") != null) {
                lIdentification.setScore((Double.valueOf(lColumns[(Integer) lMsmsHeaderMap.get("Mascot Score")]).longValue()));
            } else {
                lIdentification.setScore((Double.valueOf(lColumns[(Integer) lMsmsHeaderMap.get("Score")]).longValue()));
            }
            lIdentification.setPep(Double.valueOf(lColumns[(Integer) lMsmsHeaderMap.get("PEP")]).doubleValue());
            // set the type
            String lType = new String(lColumns[(Integer) lMsmsHeaderMap.get("SILAC State")]);
            boolean lSILAC = true;
            if (lType.length() == 0) {
                lSILAC = false;
            }
            lIdentification.setType(lType);
            // set the title
            lIdentification.setSpectrumFileName(new String(lColumns[(Integer) lMsmsHeaderMap.get("Raw File")]) + ".MQ." + new String(lColumns[(Integer) lMsmsHeaderMap.get("Scan Number")]) + "." + lColumns[(Integer) lMsmsHeaderMap.get("Charge")]);
            lIdentificationsMap.put(lIdentification.getId(), lIdentification);
            if (lCounter % 50000 == 0) {
                logger.info("Found " + lCounter + " MSMS lines!");
                Runtime r = Runtime.getRuntime();
                r.gc();
            }
        }
    }
    lMsmsReader.close();
    return lIdentificationsMap;
}
