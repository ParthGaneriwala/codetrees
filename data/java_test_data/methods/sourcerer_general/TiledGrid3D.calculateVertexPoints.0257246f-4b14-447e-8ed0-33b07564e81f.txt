public void calculateVertexPoints() {
    float width = (float) texture.pixelsWide();
    float height = (float) texture.pixelsHigh();
    int numQuads = gridSize.x * gridSize.y;
    ByteBuffer vfb = ByteBuffer.allocateDirect(CCQuad3.size * numQuads * 4);
    vfb.order(ByteOrder.nativeOrder());
    vertices = vfb.asFloatBuffer();
    ByteBuffer ofb = ByteBuffer.allocateDirect(CCQuad3.size * numQuads * 4);
    ofb.order(ByteOrder.nativeOrder());
    originalVertices = ofb.asFloatBuffer();
    ByteBuffer tfb = ByteBuffer.allocateDirect(CCQuad2.size * numQuads * 4);
    tfb.order(ByteOrder.nativeOrder());
    texCoordinates = tfb.asFloatBuffer();
    ByteBuffer isb = ByteBuffer.allocateDirect(6 * numQuads * 2);
    isb.order(ByteOrder.nativeOrder());
    indices = isb.asShortBuffer();
    for (int x = 0; x < gridSize.x; x++) {
        for (int y = 0; y < gridSize.y; y++) {
            float x1 = x * step.x;
            float x2 = x1 + step.x;
            float y1 = y * step.y;
            float y2 = y1 + step.y;
            vertices.put(x1);
            vertices.put(y1);
            vertices.put(0);
            vertices.put(x2);
            vertices.put(y1);
            vertices.put(0);
            vertices.put(x1);
            vertices.put(y2);
            vertices.put(0);
            vertices.put(x2);
            vertices.put(y2);
            vertices.put(0);
            texCoordinates.put(x1 / width);
            texCoordinates.put(y1 / height);
            texCoordinates.put(x2 / width);
            texCoordinates.put(y1 / height);
            texCoordinates.put(x1 / width);
            texCoordinates.put(y2 / height);
            texCoordinates.put(x2 / width);
            texCoordinates.put(y2 / height);
        }
    }
    vertices.position(0);
    texCoordinates.position(0);
    for (int x = 0; x < numQuads; x++) {
        indices.put(x * 6 + 0, (short) (x * 4 + 0));
        indices.put(x * 6 + 1, (short) (x * 4 + 1));
        indices.put(x * 6 + 2, (short) (x * 4 + 2));
        indices.put(x * 6 + 3, (short) (x * 4 + 1));
        indices.put(x * 6 + 4, (short) (x * 4 + 2));
        indices.put(x * 6 + 5, (short) (x * 4 + 3));
    }
    originalVertices.put(vertices);
    originalVertices.position(0);
}
