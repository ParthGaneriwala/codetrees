public CustomPaletteBuilder buildPalette() {
    reduceList = new ColorNode[maxLevel + 1];
    for (int i = 0; i < reduceList.length; i++) {
        reduceList[i] = null;
    }
    numNodes = 0;
    maxNodes = 0;
    root = null;
    currSize = 0;
    currLevel = maxLevel;
    final int minx = src.getMinX();
    final int miny = src.getMinY();
    int w = src.getWidth();
    int h = src.getHeight();
    final int maxx = w + minx;
    final int maxy = h + miny;
    final boolean discriminantTransparency = transparency != Transparency.OPAQUE;
    final int[] rgba = new int[numBands];
    final int transpBand = numBands - 1;
    for (int y = miny; y < maxy; y++) {
        if ((subsampley > 1) && ((y % subsampley) != 0)) {
            continue;
        }
        for (int x = minx; x < maxx; x++) {
            if ((subsampleX > 1) && ((x % subsampleX) != 0)) {
                continue;
            }
            getSrcColor(x, y, rgba);
            /*
				 * If transparency of given image is not opaque we assume all
				 * colors with alpha less than 1.0 as fully transparent.
				 */
            if (discriminantTransparency && (rgba[transpBand] != 0xff)) {
                transColor = insertNode(transColor, rgba, 0);
            } else {
                root = insertNode(root, rgba, 0);
            }
            if (currSize > requiredSize) {
                reduceTree();
            }
        }
    }
    return this;
}
