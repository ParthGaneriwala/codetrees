protected List load() throws IOException, AclFormatException {
    if (!aclFile.exists()) {
        throw new IOException("File '" + aclFile.getAbsolutePath() + "' is not present");
    }
    if (!aclFile.isFile()) {
        throw new IOException("'" + aclFile.getAbsolutePath() + "' is not a regular file");
    }
    if (!aclFile.canRead()) {
        throw new IOException("'" + aclFile.getAbsolutePath() + "' is not accessible");
    }
    String line;
    String ruleTypeString;
    StringTokenizer toker;
    String addrString, bitString = null;
    int slashIndex;
    int linenum = 0;
    byte[] addr;
    boolean allow;
    int bits;
    BufferedReader br = new BufferedReader(new FileReader(aclFile));
    List newAcls = new ArrayList();
    try {
        while ((line = br.readLine()) != null) {
            linenum++;
            line = line.trim();
            if (line.length() < 1) {
                continue;
            }
            if (line.charAt(0) == '#') {
                continue;
            }
            toker = new StringTokenizer(line);
            try {
                if (toker.countTokens() != 2) {
                    throw new InternalException();
                }
                ruleTypeString = toker.nextToken();
                addrString = toker.nextToken();
                slashIndex = addrString.indexOf('/');
                if (slashIndex > -1) {
                    bitString = addrString.substring(slashIndex + 1);
                    addrString = addrString.substring(0, slashIndex);
                }
                addr = InetAddress.getByName(addrString).getAddress();
                bits = (bitString == null) ? (addr.length * 8) : Integer.parseInt(bitString);
                if (ruleTypeString.equalsIgnoreCase("allow")) {
                    allow = true;
                } else if (ruleTypeString.equalsIgnoreCase("permit")) {
                    allow = true;
                } else if (ruleTypeString.equalsIgnoreCase("accept")) {
                    allow = true;
                } else if (ruleTypeString.equalsIgnoreCase("prohibit")) {
                    allow = false;
                } else if (ruleTypeString.equalsIgnoreCase("deny")) {
                    allow = false;
                } else if (ruleTypeString.equalsIgnoreCase("reject")) {
                    allow = false;
                } else {
                    throw new InternalException();
                }
            } catch (NumberFormatException nfe) {
                throw new AclFormatException("Syntax error at ACL file '" + aclFile.getAbsolutePath() + "', line " + linenum);
            } catch (InternalException ie) {
                throw new AclFormatException("Syntax error at ACL file '" + aclFile.getAbsolutePath() + "', line " + linenum);
            }
            try {
                newAcls.add(new AclEntry(addr, bits, allow));
            } catch (AclFormatException afe) {
                throw new AclFormatException("Syntax error at ACL file '" + aclFile.getAbsolutePath() + "', line " + linenum + ": " + afe.getMessage());
            }
        }
    } finally {
        br.close();
    }
    newAcls.add(PROHIBIT_ALL_IPV4);
    newAcls.add(PROHIBIT_ALL_IPV6);
    lastLoadTime = new java.util.Date().getTime();
    return newAcls;
}
