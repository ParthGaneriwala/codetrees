private SortedMultiMap createExcludeFromTreeMultiMap(final Object mFrom, final SortedMultiMap mMultiMap, final Object mTo) {
    return new AbstractSortedMultiMap() {

        public int numKeys() {
            return mMultiMap.numKeys() - (mMap.containsKey(mFrom) ? 1 : 0);
        }

        public boolean isEmpty() {
            return mMultiMap.isEmpty() || mMultiMap.numKeys() == 1 && mMap.containsKey(mFrom);
        }

        public boolean containsKey(Object key) {
            return mFrom.equals(key) ? false : mMultiMap.containsKey(key);
        }

        public boolean containsValue(Object value) {
            if (mMultiMap.containsKey(mFrom)) {
                Iterator keys = mMultiMap.keySet().iterator();
                for (keys.next(); keys.hasNext(); ) if (mMultiMap.get(keys.next()).contains(value))
                    return true;
                return false;
            }
            return mMultiMap.containsValue(value);
        }

        public boolean containsValueSet(Set valueSet) {
            if (mMultiMap.containsKey(mFrom)) {
                Iterator keys = mMultiMap.keySet().iterator();
                for (keys.next(); keys.hasNext(); ) if (mMultiMap.get(keys.next()).equals(valueSet))
                    return true;
                return false;
            }
            return mMultiMap.containsValueSet(valueSet);
        }

        public Set get(Object key) {
            return mFrom.equals(key) ? new HashSet() : mMultiMap.get(key);
        }

        public Set addValue(Object key, Object value) {
            if (mFrom.equals(key))
                throw new IllegalArgumentException(mFrom + " is out of range");
            return mMultiMap.addValue(key, value);
        }

        public Set addValues(Object key, Collection values) {
            if (mFrom.equals(key))
                throw new IllegalArgumentException(mFrom + " is out of range");
            return mMultiMap.addValues(key, values);
        }

        public Set putValue(Object key, Object value) {
            if (mFrom.equals(key))
                throw new IllegalArgumentException(mFrom + " is out of range");
            return mMultiMap.putValue(key, value);
        }

        public Set putValues(Object key, Collection values) {
            if (mFrom.equals(key))
                throw new IllegalArgumentException(mFrom + " is out of range");
            return mMultiMap.putValues(key, values);
        }

        public Set removeKey(Object key) {
            if (mFrom.equals(key))
                throw new IllegalArgumentException(mFrom + " is out of range");
            return mMultiMap.removeKey(key);
        }

        public Set removeValue(Object key, Object value) {
            if (mFrom.equals(key))
                throw new IllegalArgumentException(mFrom + " is out of range");
            return mMultiMap.removeValue(key, value);
        }

        public Set removeValues(Object key, Collection values) {
            if (mFrom.equals(key))
                throw new IllegalArgumentException(mFrom + " is out of range");
            return mMultiMap.removeValues(key, values);
        }

        public Set removeValue(Object value) {
            Set values = (Set) mMap.remove(mFrom);
            Set altered = mMultiMap.removeValue(value);
            if (values != null)
                mMap.put(mFrom, values);
            return altered;
        }

        public Set removeValues(Collection values) {
            Set valueSet = (Set) mMap.remove(mFrom);
            Set altered = mMultiMap.removeValues(values);
            if (values != null)
                mMap.put(mFrom, valueSet);
            return altered;
        }

        public void clear() {
            Set values = (Set) mMap.remove(mFrom);
            mMultiMap.clear();
            if (values != null)
                mMap.put(mFrom, values);
        }

        public Set keySet() {
            Set keySet = new TreeSet(mMultiMap.keySet());
            keySet.remove(mFrom);
            return keySet;
        }

        public Set valueSet() {
            if (mMultiMap.containsKey(mFrom)) {
                Set valueSet = new HashSet();
                Iterator keys = mMultiMap.keySet().iterator();
                for (keys.next(); keys.hasNext(); ) valueSet.addAll(mMultiMap.get(keys.next()));
                return valueSet;
            }
            return mMultiMap.valueSet();
        }

        public Collection valueSets() {
            if (mMultiMap.containsKey(mFrom)) {
                Collection valueSet = new ArrayList();
                Iterator keys = mMultiMap.keySet().iterator();
                for (keys.next(); keys.hasNext(); ) valueSet.add(mMultiMap.get(keys.next()));
                return valueSet;
            }
            return mMultiMap.valueSets();
        }

        public Comparator comparator() {
            return TreeMultiMap.this.comparator();
        }

        public SortedMultiMap subMultiMap(Object from, boolean includeFrom, Object to, boolean includeTo) {
            if (mFrom != null && comparator().compare(mFrom, from) >= 0)
                throw new IllegalArgumentException(from + " is out of range");
            if (mTo != null && comparator().compare(mTo, to) <= 0)
                throw new IllegalArgumentException(to + " is out of range");
            return TreeMultiMap.this.subMultiMap(from, includeFrom, to, includeTo);
        }

        public SortedMultiMap headMultiMap(Object to, boolean inclusive) {
            if (mFrom != null && comparator().compare(mFrom, to) >= 0)
                throw new IllegalArgumentException(to + " is out of range");
            if (mTo != null && comparator().compare(mTo, to) <= 0)
                throw new IllegalArgumentException(to + " is out of range");
            if (mFrom != null)
                return TreeMultiMap.this.subMultiMap(mFrom, true, to, inclusive);
            else
                return TreeMultiMap.this.headMultiMap(to, inclusive);
        }

        public SortedMultiMap tailMultiMap(Object from, boolean inclusive) {
            if (mFrom != null && comparator().compare(mFrom, from) >= 0)
                throw new IllegalArgumentException(from + " is out of range");
            if (mTo != null && comparator().compare(mTo, from) <= 0)
                throw new IllegalArgumentException(from + " is out of range");
            if (mTo != null)
                return TreeMultiMap.this.subMultiMap(from, inclusive, mTo, false);
            else
                return TreeMultiMap.this.tailMultiMap(from, inclusive);
        }

        public Object firstKey() {
            if (mFrom.equals(mMultiMap.firstKey())) {
                Iterator keys = mMultiMap.keySet().iterator();
                keys.next();
                return keys.next();
            }
            return mMultiMap.firstKey();
        }

        public Object lastKey() {
            return mMultiMap.lastKey();
        }
    };
}
