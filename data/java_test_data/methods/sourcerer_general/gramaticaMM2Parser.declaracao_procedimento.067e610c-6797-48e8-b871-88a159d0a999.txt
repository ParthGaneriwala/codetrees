// $ANTLR start "declaracao_procedimento"
public final gramaticaMM2Parser.declaracao_procedimento_return declaracao_procedimento() throws RecognitionException {
    gramaticaMM2Parser.declaracao_procedimento_return retval = new gramaticaMM2Parser.declaracao_procedimento_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token PROCEDURE14 = null;
    Token LEFT_PAREN16 = null;
    Token RIGHT_PAREN18 = null;
    Token SEMICOLON19 = null;
    Token SEMICOLON23 = null;
    gramaticaMM2Parser.id_return id15 = null;
    gramaticaMM2Parser.lista_parametros_return lista_parametros17 = null;
    gramaticaMM2Parser.declaracao_variaveis_return declaracao_variaveis20 = null;
    gramaticaMM2Parser.corpo_return corpo21 = null;
    gramaticaMM2Parser.id_return id22 = null;
    CommonTree PROCEDURE14_tree = null;
    CommonTree LEFT_PAREN16_tree = null;
    CommonTree RIGHT_PAREN18_tree = null;
    CommonTree SEMICOLON19_tree = null;
    CommonTree SEMICOLON23_tree = null;
    RewriteRuleTokenStream stream_LEFT_PAREN = new RewriteRuleTokenStream(adaptor, "token LEFT_PAREN");
    RewriteRuleTokenStream stream_RIGHT_PAREN = new RewriteRuleTokenStream(adaptor, "token RIGHT_PAREN");
    RewriteRuleTokenStream stream_SEMICOLON = new RewriteRuleTokenStream(adaptor, "token SEMICOLON");
    RewriteRuleTokenStream stream_PROCEDURE = new RewriteRuleTokenStream(adaptor, "token PROCEDURE");
    RewriteRuleSubtreeStream stream_id = new RewriteRuleSubtreeStream(adaptor, "rule id");
    RewriteRuleSubtreeStream stream_corpo = new RewriteRuleSubtreeStream(adaptor, "rule corpo");
    RewriteRuleSubtreeStream stream_declaracao_variaveis = new RewriteRuleSubtreeStream(adaptor, "rule declaracao_variaveis");
    RewriteRuleSubtreeStream stream_lista_parametros = new RewriteRuleSubtreeStream(adaptor, "rule lista_parametros");
    try {
        // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:91:26: ( PROCEDURE id LEFT_PAREN ( lista_parametros | ) RIGHT_PAREN SEMICOLON ( declaracao_variaveis )* corpo id SEMICOLON -> ^( DECLAR_PROC id ( lista_parametros )? ( declaracao_variaveis )* corpo id ) )
        // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:91:28: PROCEDURE id LEFT_PAREN ( lista_parametros | ) RIGHT_PAREN SEMICOLON ( declaracao_variaveis )* corpo id SEMICOLON
        {
            PROCEDURE14 = (Token) match(input, PROCEDURE, FOLLOW_PROCEDURE_in_declaracao_procedimento681);
            stream_PROCEDURE.add(PROCEDURE14);
            pushFollow(FOLLOW_id_in_declaracao_procedimento683);
            id15 = id();
            state._fsp--;
            stream_id.add(id15.getTree());
            LEFT_PAREN16 = (Token) match(input, LEFT_PAREN, FOLLOW_LEFT_PAREN_in_declaracao_procedimento685);
            stream_LEFT_PAREN.add(LEFT_PAREN16);
            // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:91:52: ( lista_parametros | )
            int alt3 = 2;
            int LA3_0 = input.LA(1);
            if ((LA3_0 == LETTER)) {
                alt3 = 1;
            } else if ((LA3_0 == RIGHT_PAREN)) {
                alt3 = 2;
            } else {
                NoViableAltException nvae = new NoViableAltException("", 3, 0, input);
                throw nvae;
            }
            switch(alt3) {
                case 1:
                    // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:91:53: lista_parametros
                    {
                        pushFollow(FOLLOW_lista_parametros_in_declaracao_procedimento688);
                        lista_parametros17 = lista_parametros();
                        state._fsp--;
                        stream_lista_parametros.add(lista_parametros17.getTree());
                    }
                    break;
                case 2:
                    // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:91:70:
                    {
                    }
                    break;
            }
            RIGHT_PAREN18 = (Token) match(input, RIGHT_PAREN, FOLLOW_RIGHT_PAREN_in_declaracao_procedimento692);
            stream_RIGHT_PAREN.add(RIGHT_PAREN18);
            SEMICOLON19 = (Token) match(input, SEMICOLON, FOLLOW_SEMICOLON_in_declaracao_procedimento694);
            stream_SEMICOLON.add(SEMICOLON19);
            // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:91:94: ( declaracao_variaveis )*
            loop4: do {
                int alt4 = 2;
                int LA4_0 = input.LA(1);
                if ((LA4_0 == VAR)) {
                    alt4 = 1;
                }
                switch(alt4) {
                    case 1:
                        // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:91:94: declaracao_variaveis
                        {
                            pushFollow(FOLLOW_declaracao_variaveis_in_declaracao_procedimento696);
                            declaracao_variaveis20 = declaracao_variaveis();
                            state._fsp--;
                            stream_declaracao_variaveis.add(declaracao_variaveis20.getTree());
                        }
                        break;
                    default:
                        break loop4;
                }
            } while (true);
            pushFollow(FOLLOW_corpo_in_declaracao_procedimento699);
            corpo21 = corpo();
            state._fsp--;
            stream_corpo.add(corpo21.getTree());
            pushFollow(FOLLOW_id_in_declaracao_procedimento701);
            id22 = id();
            state._fsp--;
            stream_id.add(id22.getTree());
            SEMICOLON23 = (Token) match(input, SEMICOLON, FOLLOW_SEMICOLON_in_declaracao_procedimento703);
            stream_SEMICOLON.add(SEMICOLON23);
            // AST REWRITE
            // elements: corpo, id, id, lista_parametros, declaracao_variaveis
            // token labels:
            // rule labels: retval
            // token list labels:
            // rule list labels:
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", retval != null ? retval.tree : null);
            root_0 = (CommonTree) adaptor.nil();
            // 92:2: -> ^( DECLAR_PROC id ( lista_parametros )? ( declaracao_variaveis )* corpo id )
            {
                // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:92:5: ^( DECLAR_PROC id ( lista_parametros )? ( declaracao_variaveis )* corpo id )
                {
                    CommonTree root_1 = (CommonTree) adaptor.nil();
                    root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(DECLAR_PROC, "DECLAR_PROC"), root_1);
                    adaptor.addChild(root_1, stream_id.nextTree());
                    // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:92:22: ( lista_parametros )?
                    if (stream_lista_parametros.hasNext()) {
                        adaptor.addChild(root_1, stream_lista_parametros.nextTree());
                    }
                    stream_lista_parametros.reset();
                    // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:92:40: ( declaracao_variaveis )*
                    while (stream_declaracao_variaveis.hasNext()) {
                        adaptor.addChild(root_1, stream_declaracao_variaveis.nextTree());
                    }
                    stream_declaracao_variaveis.reset();
                    adaptor.addChild(root_1, stream_corpo.nextTree());
                    adaptor.addChild(root_1, stream_id.nextTree());
                    adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
