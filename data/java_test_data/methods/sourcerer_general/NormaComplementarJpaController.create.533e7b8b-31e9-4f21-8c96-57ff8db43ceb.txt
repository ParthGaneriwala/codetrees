public void create(NormaComplementar normaComplementar) throws PreexistingEntityException, Exception {
    if (normaComplementar.getBibliografia() == null) {
        normaComplementar.setBibliografia(new HashSet<Bibliografia>());
    }
    if (normaComplementar.getPonto() == null) {
        normaComplementar.setPonto(new HashSet<Ponto>());
    }
    if (normaComplementar.getSorteio() == null) {
        normaComplementar.setSorteio(new HashSet<Sorteio>());
    }
    EntityManager em = null;
    try {
        em = getEntityManager();
        em.getTransaction().begin();
        Set<Bibliografia> attachedBibliografia = new HashSet<Bibliografia>();
        for (Bibliografia bibliografiaBibliografiaToAttach : normaComplementar.getBibliografia()) {
            bibliografiaBibliografiaToAttach = em.getReference(bibliografiaBibliografiaToAttach.getClass(), bibliografiaBibliografiaToAttach.getId());
            attachedBibliografia.add(bibliografiaBibliografiaToAttach);
        }
        normaComplementar.setBibliografia(attachedBibliografia);
        Set<Ponto> attachedPonto = new HashSet<Ponto>();
        for (Ponto pontoPontoToAttach : normaComplementar.getPonto()) {
            pontoPontoToAttach = em.getReference(pontoPontoToAttach.getClass(), pontoPontoToAttach.getId());
            attachedPonto.add(pontoPontoToAttach);
        }
        normaComplementar.setPonto(attachedPonto);
        Set<Sorteio> attachedSorteio = new HashSet<Sorteio>();
        for (Sorteio sorteioSorteioToAttach : normaComplementar.getSorteio()) {
            sorteioSorteioToAttach = em.getReference(sorteioSorteioToAttach.getClass(), sorteioSorteioToAttach.getId());
            attachedSorteio.add(sorteioSorteioToAttach);
        }
        normaComplementar.setSorteio(attachedSorteio);
        em.persist(normaComplementar);
        for (Bibliografia bibliografiaBibliografia : normaComplementar.getBibliografia()) {
            NormaComplementar oldNormaComplementarOfBibliografiaBibliografia = bibliografiaBibliografia.getNormaComplementar();
            bibliografiaBibliografia.setNormaComplementar(normaComplementar);
            bibliografiaBibliografia = em.merge(bibliografiaBibliografia);
            if (oldNormaComplementarOfBibliografiaBibliografia != null) {
                oldNormaComplementarOfBibliografiaBibliografia.getBibliografia().remove(bibliografiaBibliografia);
                oldNormaComplementarOfBibliografiaBibliografia = em.merge(oldNormaComplementarOfBibliografiaBibliografia);
            }
        }
        for (Ponto pontoPonto : normaComplementar.getPonto()) {
            NormaComplementar oldNormaComplementarOfPontoPonto = pontoPonto.getNormaComplementar();
            pontoPonto.setNormaComplementar(normaComplementar);
            pontoPonto = em.merge(pontoPonto);
            if (oldNormaComplementarOfPontoPonto != null) {
                oldNormaComplementarOfPontoPonto.getPonto().remove(pontoPonto);
                oldNormaComplementarOfPontoPonto = em.merge(oldNormaComplementarOfPontoPonto);
            }
        }
        for (Sorteio sorteioSorteio : normaComplementar.getSorteio()) {
            NormaComplementar oldNormaComplementarOfSorteioSorteio = sorteioSorteio.getNormaComplementar();
            sorteioSorteio.setNormaComplementar(normaComplementar);
            sorteioSorteio = em.merge(sorteioSorteio);
            if (oldNormaComplementarOfSorteioSorteio != null) {
                oldNormaComplementarOfSorteioSorteio.getSorteio().remove(sorteioSorteio);
                oldNormaComplementarOfSorteioSorteio = em.merge(oldNormaComplementarOfSorteioSorteio);
            }
        }
        em.getTransaction().commit();
    } catch (Exception ex) {
        if (findNormaComplementar(normaComplementar.getId()) != null) {
            throw new PreexistingEntityException("NormaComplementar " + normaComplementar + " already exists.", ex);
        }
        throw ex;
    } finally {
        if (em != null) {
            em.close();
        }
    }
}
