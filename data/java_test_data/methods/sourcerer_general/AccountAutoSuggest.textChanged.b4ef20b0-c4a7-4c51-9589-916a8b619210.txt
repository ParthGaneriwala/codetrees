public void textChanged(String text) {
    // nothing has really changed, so don't do anything
    if (needle.equals(text))
        return;
    if (text.length() < 1)
        hide();
    if (needle.length() < 1)
        show();
    this.needle = text;
    int size = suggestions.size();
    // minimum word length for an item to be a suggestion candidate
    int minLen = needle.length();
    // end of where we will compare two strings
    int endIdx = 0;
    // how many matches we currently have
    int suggestionIdx = 0;
    System.out.println("size: " + size + " minlen: " + minLen);
    ArrayList newSuggestions = new ArrayList();
    for (int i = 0; i < size; i++) {
        String haystack = (String) suggestions.get(i);
        if (haystack.length() < minLen)
            continue;
        endIdx = (haystack.length() > minLen) ? minLen : haystack.length();
        // if both strings start with the same text, this should
        // be added to the suggestion box
        System.out.println("n:" + needle);
        if (needle.equalsIgnoreCase(haystack.substring(0, endIdx))) {
            System.out.println("Adding: " + haystack);
            newSuggestions.add(haystack);
            // let the listener know of our "first choice" this time
            if (suggestionIdx == 0 && listener != null)
                listener.onSuggestionChanged(haystack);
            suggestionIdx++;
        }
        // if we've reached it
        if (maxItems > 0 && suggestionIdx >= maxItems)
            break;
    }
    if (newSuggestions.size() < suggestionTable.getRowCount())
        clearSuggestionTable();
    for (int i = 0; i < newSuggestions.size(); i++) {
        System.out.println("Adding: " + (String) newSuggestions.get(i));
        suggestionTable.setText(i, 0, (String) newSuggestions.get(i));
    }
    cellIdx = 0;
    suggestionTable.highLight(cellIdx);
}
