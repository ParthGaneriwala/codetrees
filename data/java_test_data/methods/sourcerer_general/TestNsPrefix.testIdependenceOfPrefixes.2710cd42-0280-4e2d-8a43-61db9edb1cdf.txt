public void testIdependenceOfPrefixes() throws java.lang.Exception {
    String testPrefix1 = "testPrefix1";
    String testURI1 = "http://someTestURI1#";
    String testPrefix2 = "testPrefix2";
    String testURI2 = "http://someTestURI2#";
    String testPrefix3 = "testPrefix3";
    String testURI3 = "http://someTestURI3#";
    IDBConnection conn = TestConnection.makeAndCleanTestConnection();
    // Create a first model with a set of prefixes
    ModelRDB m = ModelRDB.createModel(conn);
    // brand new model should have no prefixes
    assertEquals(0, m.getNsPrefixMap().size());
    m.setNsPrefix(testPrefix1, testURI1);
    m.setNsPrefix(testPrefix2, testURI2);
    assertEquals(2, m.getNsPrefixMap().size());
    assertEquals(testURI1, m.getNsPrefixURI(testPrefix1));
    assertEquals(testURI2, m.getNsPrefixURI(testPrefix2));
    // Create a second model with an overlapping set of prefixes
    ModelRDB m2 = ModelRDB.createModel(conn, "secondGraph");
    // brand new model should have no prefixes
    assertEquals(0, m2.getNsPrefixMap().size());
    m2.setNsPrefix(testPrefix2, testURI2);
    m2.setNsPrefix(testPrefix3, testURI3);
    // Verify second model has the correct contents
    assertEquals(2, m2.getNsPrefixMap().size());
    assertEquals(testURI2, m2.getNsPrefixURI(testPrefix2));
    assertEquals(testURI3, m2.getNsPrefixURI(testPrefix3));
    // Verify that first model was unchanged.
    assertEquals(2, m.getNsPrefixMap().size());
    assertEquals(testURI1, m.getNsPrefixURI(testPrefix1));
    assertEquals(testURI2, m.getNsPrefixURI(testPrefix2));
    // Now remove the second model
    m2.remove();
    m2.close();
    m2 = null;
    // Verify that first model was still unchanged.
    assertEquals(2, m.getNsPrefixMap().size());
    assertEquals(testURI1, m.getNsPrefixURI(testPrefix1));
    assertEquals(testURI2, m.getNsPrefixURI(testPrefix2));
    // Now close and reopen the first Model and check the prefix was persisted
    m.close();
    m = null;
    ModelRDB m3 = ModelRDB.open(conn);
    assertEquals(2, m3.getNsPrefixMap().size());
    assertEquals(testURI1, m3.getNsPrefixURI(testPrefix1));
    assertEquals(testURI2, m3.getNsPrefixURI(testPrefix2));
    m3.close();
    conn.close();
}
