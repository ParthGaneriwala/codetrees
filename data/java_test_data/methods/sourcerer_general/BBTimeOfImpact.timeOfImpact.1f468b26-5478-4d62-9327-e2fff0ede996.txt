// / Compute the time when two shapes begin to touch or touch at a closer distance.
// / TOI considers the shape radii. It attempts to have the radii overlap by the tolerance.
// / Iterations terminate with the overlap is within 0.5 * tolerance. The tolerance should be
// / smaller than sum of the shape radii.
// / @warning the sweeps must have the same time interval.
// / @return the fraction between [0,1] in which the shapes first touch.
public static float timeOfImpact(final BBTOIInput input) {
    ++toiCalls;
    final BBDistanceProxy proxyA = input.proxyA;
    final BBDistanceProxy proxyB = input.proxyB;
    BBSweep sweepA = input.sweepA;
    BBSweep sweepB = input.sweepB;
    assert (sweepA.t0 == sweepB.t0);
    assert (1.0f - sweepA.t0 > FLT_EPSILON);
    float radius = proxyA.m_radius + proxyB.m_radius;
    float tolerance = input.tolerance;
    float alpha = 0.0f;
    // TODO_ERIN BBSettings
    final int k_maxIterations = 1000;
    int iter = 0;
    float target = 0.0f;
    // Prepare input for distance query.
    BBSimplexCache cache = new BBSimplexCache();
    cache.count = 0;
    BBDistanceInput distanceInput = new BBDistanceInput();
    distanceInput.proxyA = input.proxyA;
    distanceInput.proxyB = input.proxyB;
    distanceInput.useRadii = false;
    for (; ; ) {
        BBTransform xfA = new BBTransform(), xfB = new BBTransform();
        sweepA.getTransform(xfA, alpha);
        sweepB.getTransform(xfB, alpha);
        // Get the distance between shapes.
        distanceInput.transformA = xfA;
        distanceInput.transformB = xfB;
        BBDistanceOutput distanceOutput = new BBDistanceOutput();
        BBDistance.distance(distanceOutput, cache, distanceInput);
        if (distanceOutput.distance <= 0.0f) {
            alpha = 1.0f;
            break;
        }
        BBSeparationFunction fcn = new BBSeparationFunction();
        fcn.initialize(cache, proxyA, xfA, proxyB, xfB);
        float separation = fcn.evaluate(xfA, xfB);
        if (separation <= 0.0f) {
            alpha = 1.0f;
            break;
        }
        if (iter == 0) {
            // to create additional clearance.
            if (separation > radius) {
                target = max(radius - tolerance, 0.75f * radius);
            } else {
                target = max(separation - tolerance, 0.02f * radius);
            }
        }
        if (separation - target < 0.5f * tolerance) {
            if (iter == 0) {
                alpha = 1.0f;
                break;
            }
            break;
        }
        // Compute 1D root of: f(x) - target = 0
        float newAlpha = alpha;
        {
            float x1 = alpha, x2 = 1.0f;
            float f1 = separation;
            sweepA.getTransform(xfA, x2);
            sweepB.getTransform(xfB, x2);
            float f2 = fcn.evaluate(xfA, xfB);
            // If intervals don't overlap at t2, then we are done.
            if (f2 >= target) {
                alpha = 1.0f;
                break;
            }
            // Determine when intervals intersect.
            int rootIterCount = 0;
            for (; ; ) {
                // Use a mix of the secant rule and bisection.
                float x;
                if ((rootIterCount & 1) != 0) {
                    // Secant rule to improve convergence.
                    x = x1 + (target - f1) * (x2 - x1) / (f2 - f1);
                } else {
                    // Bisection to guarantee progress.
                    x = 0.5f * (x1 + x2);
                }
                sweepA.getTransform(xfA, x);
                sweepB.getTransform(xfB, x);
                float f = fcn.evaluate(xfA, xfB);
                if (abs(f - target) < 0.025f * tolerance) {
                    newAlpha = x;
                    break;
                }
                // Ensure we continue to bracket the root.
                if (f > target) {
                    x1 = x;
                    f1 = f;
                } else {
                    x2 = x;
                    f2 = f;
                }
                ++rootIterCount;
                ++toiRootIters;
                if (rootIterCount == 50) {
                    break;
                }
            }
            toiMaxRootIters = max(toiMaxRootIters, rootIterCount);
        }
        // Ensure significant advancement.
        if (newAlpha < (1.0f + 100.0f * FLT_EPSILON) * alpha) {
            break;
        }
        alpha = newAlpha;
        ++iter;
        ++toiIters;
        if (iter == k_maxIterations) {
            break;
        }
    }
    toiMaxIters = max(toiMaxIters, iter);
    return alpha;
}
