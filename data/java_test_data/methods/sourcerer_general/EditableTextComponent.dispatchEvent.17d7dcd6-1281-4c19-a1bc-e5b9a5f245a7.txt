public boolean dispatchEvent(Event event) {
    if (event instanceof KeyEvent) {
        KeyEvent kev = (KeyEvent) event;
        if (kev.getType() == KeyEvent.KEY_PRESSED) {
            int modifiers = kev.getModifiers();
            int cmd = _keymap.lookupMapping(modifiers, kev.getKeyCode());
            switch(cmd) {
                case KeyMap.NO_MAPPING:
                    char c = kev.getKeyChar();
                    // (the ctrl+alt combination is AltGr, used on international keyboards)
                    if ((modifiers & ~(KeyEvent.SHIFT_DOWN_MASK | KeyEvent.ALT_DOWN_MASK)) == 0 || modifiers == (KeyEvent.CTRL_DOWN_MASK | KeyEvent.ALT_DOWN_MASK)) {
                        c = insertChar(c);
                        if (c != 0) {
                            replaceSelectedText(String.valueOf(c), Character.isLetterOrDigit(c) ? CompoundType.WORD_CHAR : CompoundType.NONWORD_CHAR);
                            return true;
                        }
                    }
                    break;
                case ACTION:
                    emitEvent(new ActionEvent(this, event.getWhen(), modifiers, "", getText()));
                    return true;
                default:
                    if (processCommand(cmd)) {
                        return true;
                    }
                    break;
            }
        }
    } else if (event instanceof MouseEvent && // don't adjust the cursor/selection if we have no text
    _text.getLength() > 0 && hasGlyphs()) {
        MouseEvent mev = (MouseEvent) event;
        int type = mev.getType();
        if (type != MouseEvent.MOUSE_PRESSED && type != MouseEvent.MOUSE_DRAGGED && type != MouseEvent.MOUSE_CLICKED) {
            // avoid calculating the position on every mouse move
            return super.dispatchEvent(event);
        }
        Insets insets = getInsets();
        int mx = mev.getX() - getAbsoluteX() - insets.left, my = mev.getY() - getAbsoluteY() - insets.bottom;
        int pos = getPosition(mx, my);
        if (type == MouseEvent.MOUSE_PRESSED) {
            // if pressed inside the selection, wait for click
            if (!selectionContains(pos)) {
                setCursorPos(pos);
            }
            return true;
        } else if (type == MouseEvent.MOUSE_DRAGGED) {
            setSelection(pos, _selp);
            return true;
        } else if (type == MouseEvent.MOUSE_CLICKED) {
            int count = (mev.getClickCount() - 1) % 3;
            if (count == 0) {
                setCursorPos(pos);
            } else if (count == 1) {
                IntTuple extents = _text.getWordExtents(pos);
                setSelection(extents.left, extents.right);
            } else {
                // count == 2
                setSelection(_text.getLength(), 0);
            }
            return true;
        }
    } else if (event instanceof FocusEvent) {
        FocusEvent fev = (FocusEvent) event;
        switch(fev.getType()) {
            case FocusEvent.FOCUS_GAINED:
                gainedFocus();
                break;
            case FocusEvent.FOCUS_LOST:
                lostFocus();
                break;
        }
    }
    return super.dispatchEvent(event);
}
