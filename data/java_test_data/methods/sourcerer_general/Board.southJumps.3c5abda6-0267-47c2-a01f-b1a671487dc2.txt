public boolean southJumps(int movingColor, int movingSouth, int otherColor, int theKings, int empty, int jumpMask, int capturedMask, int moveDistance, int capturedDistance, ArrayList<Board> moves) {
    boolean couldJumpAgain = false;
    int jumpers = southJumpers(movingSouth, otherColor, empty, jumpMask, capturedMask, moveDistance, capturedDistance);
    while (jumpers != 0) {
        // Pick out the least significant jumper
        int jumper = jumpers & (-jumpers);
        // Remove it
        jumpers ^= jumper;
        // Remove it from the moving color
        int newMovingColor = movingColor ^ jumper;
        int jumperNewPos = jumper << moveDistance;
        // Place the jumper at its new position
        newMovingColor |= jumperNewPos;
        // Get the king bit for the jumper
        int jumperKing = theKings & jumper;
        // Remove the king bit from its old position (if there was a king)
        int newKings = theKings & (~jumperKing);
        // Place the king bit at the jumper's new position
        int kingNewPos = jumperKing << moveDistance;
        newKings |= kingNewPos;
        // Remove the captured piece
        int capturedPos = jumper << capturedDistance;
        int newOtherColor = otherColor ^ capturedPos;
        // Remove a captured king (if there was one)
        newKings &= ~capturedPos;
        // Add the from square and captured square to empty
        // and remove the destination square
        int newEmpty = (empty & (~jumperNewPos)) | jumper | capturedPos;
        // If the jumper reaches the end of the board, make it king
        int becomeKing = (jumperNewPos ^ kingNewPos) & BOTTOM_ROW;
        newKings |= becomeKing;
        // Newly crowned kings can't jump further
        if (becomeKing == 0) {
            int newMovingNorth;
            int newMovingSouth;
            if (blackToMove) {
                newMovingNorth = kingNewPos;
                newMovingSouth = jumperNewPos;
            } else {
                newMovingNorth = jumperNewPos;
                newMovingSouth = kingNewPos;
            }
            // jumper
            if (newMovingNorth != 0) {
                couldJumpAgain |= northJumps(newMovingColor, newMovingNorth, newOtherColor, newKings, newEmpty, EVEN_JUMP_NW, ODD_NW, 9, 4, moves);
                couldJumpAgain |= northJumps(newMovingColor, newMovingNorth, newOtherColor, newKings, newEmpty, ODD_JUMP_NW, EVEN_NW, 9, 5, moves);
                couldJumpAgain |= northJumps(newMovingColor, newMovingNorth, newOtherColor, newKings, newEmpty, EVEN_JUMP_NE, ODD_NE, 7, 3, moves);
                couldJumpAgain |= northJumps(newMovingColor, newMovingNorth, newOtherColor, newKings, newEmpty, ODD_JUMP_NE, EVEN_NE, 7, 4, moves);
            }
            if (newMovingSouth != 0) {
                couldJumpAgain |= southJumps(newMovingColor, newMovingSouth, newOtherColor, newKings, newEmpty, EVEN_JUMP_SW, ODD_SW, 7, 4, moves);
                couldJumpAgain |= southJumps(newMovingColor, newMovingSouth, newOtherColor, newKings, newEmpty, ODD_JUMP_SW, EVEN_SW, 7, 3, moves);
                couldJumpAgain |= southJumps(newMovingColor, newMovingSouth, newOtherColor, newKings, newEmpty, EVEN_JUMP_SE, ODD_SE, 9, 5, moves);
                couldJumpAgain |= southJumps(newMovingColor, newMovingSouth, newOtherColor, newKings, newEmpty, ODD_JUMP_SE, EVEN_SE, 9, 4, moves);
            }
        }
        // If this jumper couldn't jump further, add this jump as a move
        if (!couldJumpAgain) {
            boolean newBlackToMove = !blackToMove;
            if (blackToMove) {
                moves.add(new Board(newMovingColor, newOtherColor, newKings, newBlackToMove));
            } else {
                moves.add(new Board(newOtherColor, newMovingColor, newKings, newBlackToMove));
            }
            couldJumpAgain = true;
        }
    }
    return couldJumpAgain;
}
