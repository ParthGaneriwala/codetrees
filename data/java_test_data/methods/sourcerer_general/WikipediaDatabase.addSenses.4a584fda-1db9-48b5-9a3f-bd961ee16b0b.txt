protected void addSenses(Vector<int[]> senses) {
    if (this.senses == null) {
        this.linkCount = 0;
        this.senses = new int[senses.size()][2];
        int i = 0;
        for (int[] sense : senses) {
            this.senses[i] = sense;
            linkCount = linkCount + sense[1];
            i++;
        }
        return;
    }
    // merge the senses
    HashMap<Integer, int[]> senseData = new HashMap<Integer, int[]>();
    for (int[] sense : this.senses) {
        int[] sd = { sense[1], sense[2] };
        senseData.put(sense[0], sd);
    }
    for (int[] sense : senses) {
        int[] sd = senseData.get(sense[0]);
        if (sd == null) {
            sd = new int[2];
            sd[0] = sense[1];
            sd[1] = sense[2];
        } else {
            sd[0] = sd[0] + sense[1];
            sd[1] = Math.max(sd[1], sense[2]);
        }
        senseData.put(sense[0], sd);
        linkCount = linkCount + sense[1];
    }
    // sort the merged senses
    TreeSet<Sense> orderedSenses = new TreeSet<Sense>();
    for (Integer senseId : senseData.keySet()) {
        int[] sd = senseData.get(senseId);
        orderedSenses.add(new Sense(senseId, sd[0], sd[1]));
    }
    // store
    this.senses = new int[orderedSenses.size()][3];
    int index = 0;
    for (Sense sense : orderedSenses) {
        int[] s = { sense.id, sense.count, sense.type };
        this.senses[index] = s;
        index++;
    }
}
