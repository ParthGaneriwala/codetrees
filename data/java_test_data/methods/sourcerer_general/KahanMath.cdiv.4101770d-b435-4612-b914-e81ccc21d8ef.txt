public static double[] cdiv(double u, double v, double x, double y) {
    double[] uv = corner(u, v);
    u = uv[0];
    v = uv[1];
    double[] xy = corner(x, y);
    x = xy[0];
    y = xy[1];
    if (u != u || v != v || x != x || y != y) {
        return new double[] { 0.0 * u * x * x * y, 0.0 * u * x * x * y };
    }
    int L = (int) Math.round(logb(Double.MAX_VALUE) / 2.0 - 1.0);
    double h = logb(Math.max(Math.abs(x), Math.abs(y)));
    if (Double.isInfinite(h)) {
        h = Math.copySign(8 * L, h);
    }
    int K = L - (int) Math.round(h);
    x = Math.scalb(x, K);
    y = Math.scalb(y, K);
    h = logb(Math.max(Math.abs(u), Math.abs(v)));
    if (Double.isInfinite(h)) {
        h = Math.copySign(8 * L, h);
    }
    int J = L - (int) Math.round(h);
    u = Math.scalb(u, J);
    v = Math.scalb(v, J);
    double d = x * x + y * y;
    if (d == Double.POSITIVE_INFINITY || d == 0.0) {
        if (Math.abs(x) == d) {
            x = Math.copySign(1.0, x);
        }
        if (y != 0.0) {
            y = Math.copySign(1.0, y);
        }
    }
    double[] ef = cmult(u, v, x, -y);
    double e = ef[0];
    double f = ef[1];
    e = Math.scalb(e / d, K - J);
    f = Math.scalb(f / d, K - J);
    return new double[] { e, f };
}
