@Test(timeout = 5000)
public void testSuspendResume() throws Exception {
    final Breakpoint[] bp = new Breakpoint[1];
    final String[] failure = new String[1];
    {
        final CountDownLatch latch = new CountDownLatch(1);
        Breakpoint.Target target = new Breakpoint.Target.ScriptName("file:///C:/1.js");
        browserTab.setBreakpoint(target, 18, 3, true, null, new BreakpointCallback() {

            public void failure(String errorMessage) {
                failure[0] = errorMessage == null ? "" : errorMessage;
                latch.countDown();
            }

            public void success(Breakpoint breakpoint) {
                bp[0] = breakpoint;
                latch.countDown();
            }
        }, null);
        latch.await();
    }
    assertNull("Failed to set a breakpoint: " + failure[0], failure[0]);
    assertNotNull("Breakpoint not set", bp[0]);
    {
        CountDownLatch latch = expectSuspend();
        messageResponder.hitBreakpoints(Collections.singleton(bp[0].getId()));
        latch.await();
    }
    assertNotNull("suspended() not invoked after the break event", suspendContext);
    Collection<? extends Breakpoint> breakpointsHit = suspendContext.getBreakpointsHit();
    assertEquals(1, breakpointsHit.size());
    Breakpoint bpHit = breakpointsHit.iterator().next();
    TestUtil.assertBreakpointsEqual(bp[0], bpHit);
    resume();
    {
        CountDownLatch latch = expectSuspend();
        messageResponder.hitBreakpoints(Collections.<Long>emptySet());
        latch.await();
    }
    assertNotNull("suspended() not invoked after the break event", suspendContext);
    breakpointsHit = suspendContext.getBreakpointsHit();
    assertTrue(breakpointsHit.isEmpty());
    resume();
}
