private void devolver(HttpServletRequest request, HttpServletResponse response, PedidoDAO pedidoDAO) throws DAOFactoryException, ValidacaoException {
    String id = request.getParameter("id");
    DAOFactory dao = DAOFactory.getInstance(DAOFactory.MYSQLDB);
    Connection conn = dao.getConnection();
    LimpezaDAO limpezaDAO = dao.criarLimpezaDAO();
    MaterialDAO materialDAO = dao.criarMaterialDAO();
    limpezaDAO.setConnection(conn);
    pedidoDAO.setConnection(conn);
    materialDAO.setConnection(conn);
    try {
        conn.setAutoCommit(false);
    } catch (SQLException e1) {
        // TODO Auto-generated catch block
        e1.printStackTrace();
    }
    try {
        int idPedido = Integer.parseInt(id);
        Pedido pedido = pedidoDAO.listar(idPedido);
        pedido.setStatusPedido(Pedido.STATUS_DEVOLVIDO);
        pedidoDAO.alterar(pedido);
        // TODO SETAR A LIMPEZA
        Limpeza limpeza = null;
        limpezaDAO.incluirLimpeza(limpeza);
        for (ItemPedido itemPed : pedido.getLstItens()) {
            Material material = itemPed.getMaterial();
            // TODO calcular a quantidade
            int qtdeNova = 0;
            // TODO
            material.setQtdDispMaterial(qtdeNova);
            materialDAO.update(material);
        }
        conn.commit();
    } catch (NumberFormatException e0) {
        throw new ValidacaoException("Erro de conversao: " + e0.getMessage());
    } catch (Exception e) {
        try {
            conn.rollback();
        } catch (SQLException e1) {
            // TODO Auto-generated catch block
            e1.printStackTrace();
        }
    } finally {
        try {
            conn.close();
        } catch (SQLException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }
}
