// $ANTLR start "declaration"
public final CompiladoresParser.declaration_return declaration() throws RecognitionException {
    CompiladoresParser.declaration_return retval = new CompiladoresParser.declaration_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token EOL14 = null;
    CompiladoresParser.type_return type12 = null;
    CompiladoresParser.list_id_return list_id13 = null;
    CommonTree EOL14_tree = null;
    RewriteRuleTokenStream stream_EOL = new RewriteRuleTokenStream(adaptor, "token EOL");
    RewriteRuleSubtreeStream stream_type = new RewriteRuleSubtreeStream(adaptor, "rule type");
    RewriteRuleSubtreeStream stream_list_id = new RewriteRuleSubtreeStream(adaptor, "rule list_id");
    try {
        dbg.enterRule(getGrammarFileName(), "declaration");
        if (getRuleLevel() == 0) {
            dbg.commence();
        }
        incRuleLevel();
        dbg.location(84, 1);
        try {
            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:84:14: ( type list_id ( EOL )+ -> ^( type list_id ) )
            dbg.enterAlt(1);
            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:84:16: type list_id ( EOL )+
            {
                dbg.location(84, 16);
                pushFollow(FOLLOW_type_in_declaration528);
                type12 = type();
                state._fsp--;
                stream_type.add(type12.getTree());
                dbg.location(84, 21);
                pushFollow(FOLLOW_list_id_in_declaration530);
                list_id13 = list_id();
                state._fsp--;
                stream_list_id.add(list_id13.getTree());
                dbg.location(84, 29);
                // /home/CIN/fmm/Desktop/grammar/Compiladores.g:84:29: ( EOL )+
                int cnt6 = 0;
                try {
                    dbg.enterSubRule(6);
                    loop6: do {
                        int alt6 = 2;
                        try {
                            dbg.enterDecision(6);
                            int LA6_0 = input.LA(1);
                            if ((LA6_0 == EOL)) {
                                alt6 = 1;
                            }
                        } finally {
                            dbg.exitDecision(6);
                        }
                        switch(alt6) {
                            case 1:
                                dbg.enterAlt(1);
                                // /home/CIN/fmm/Desktop/grammar/Compiladores.g:84:29: EOL
                                {
                                    dbg.location(84, 29);
                                    EOL14 = (Token) match(input, EOL, FOLLOW_EOL_in_declaration532);
                                    stream_EOL.add(EOL14);
                                }
                                break;
                            default:
                                if (cnt6 >= 1)
                                    break loop6;
                                EarlyExitException eee = new EarlyExitException(6, input);
                                dbg.recognitionException(eee);
                                throw eee;
                        }
                        cnt6++;
                    } while (true);
                } finally {
                    dbg.exitSubRule(6);
                }
                // AST REWRITE
                // elements: type, list_id
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                retval.tree = root_0;
                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.tree : null);
                root_0 = (CommonTree) adaptor.nil();
                // 85:4: -> ^( type list_id )
                {
                    dbg.location(85, 7);
                    // /home/CIN/fmm/Desktop/grammar/Compiladores.g:85:7: ^( type list_id )
                    {
                        CommonTree root_1 = (CommonTree) adaptor.nil();
                        dbg.location(85, 9);
                        root_1 = (CommonTree) adaptor.becomeRoot(stream_type.nextNode(), root_1);
                        dbg.location(85, 14);
                        adaptor.addChild(root_1, stream_list_id.nextTree());
                        adaptor.addChild(root_0, root_1);
                    }
                }
                retval.tree = root_0;
            }
            retval.stop = input.LT(-1);
            retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
        }
        dbg.location(86, 4);
    } finally {
        dbg.exitRule(getGrammarFileName(), "declaration");
        decRuleLevel();
        if (getRuleLevel() == 0) {
            dbg.terminate();
        }
    }
    return retval;
}
