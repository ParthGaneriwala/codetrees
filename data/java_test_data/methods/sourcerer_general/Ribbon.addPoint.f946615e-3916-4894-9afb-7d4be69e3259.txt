public void addPoint(CCPoint location, float w) {
    w = w * 0.5f;
    // if this is the first point added, cache it and return
    if (!mPastFirstPoint) {
        mLastWidth = w;
        mLastLocation = location;
        mPastFirstPoint = true;
        return;
    }
    CCPoint sub = CCPoint.ccpSub(mLastLocation, location);
    float r = CCPoint.ccpToAngle(sub) + (float) Math.PI * 2;
    CCPoint p1 = CCPoint.ccpAdd(rotatePoint(CCPoint.ccp(-w, 0), r), location);
    CCPoint p2 = CCPoint.ccpAdd(rotatePoint(CCPoint.ccp(w, 0), r), location);
    float len = (float) Math.sqrt((float) Math.pow(mLastLocation.x - location.x, 2) + (float) Math.pow(mLastLocation.y - location.y, 2));
    float tend = mTexVPos + len / textureLength_;
    RibbonSegment seg;
    // grab last segment
    seg = mSegments.get(mSegments.size() - 1);
    // lets kill old segments
    for (RibbonSegment seg2 : mSegments) {
        if (seg2 != seg && seg2.finished) {
            dSegments.add(seg2);
        }
    }
    mSegments.removeAll(dSegments);
    // is the segment full?
    if (seg.end >= 50)
        mSegments.removeAll(dSegments);
    // grab last segment and appent to it if it's not full
    seg = mSegments.get(mSegments.size() - 1);
    // is the segment full?
    if (seg.end >= 50) {
        RibbonSegment newSeg;
        // grab it from the cache if we can
        if (dSegments.size() > 0) {
            newSeg = dSegments.get(0);
            dSegments.remove(newSeg);
            newSeg.reset();
        } else {
            newSeg = new RibbonSegment();
        }
        newSeg.creationTime[0] = seg.creationTime[seg.end - 1];
        int v = (seg.end - 1) * 6;
        int c = (seg.end - 1) * 4;
        newSeg.verts[0] = seg.verts[v];
        newSeg.verts[1] = seg.verts[v + 1];
        newSeg.verts[2] = seg.verts[v + 2];
        newSeg.verts[3] = seg.verts[v + 3];
        newSeg.verts[4] = seg.verts[v + 4];
        newSeg.verts[5] = seg.verts[v + 5];
        newSeg.coords[0] = seg.coords[c];
        newSeg.coords[1] = seg.coords[c + 1];
        newSeg.coords[2] = seg.coords[c + 2];
        newSeg.coords[3] = seg.coords[c + 3];
        newSeg.end++;
        seg = newSeg;
        mSegments.add(seg);
    }
    if (seg.end == 0) {
        // first edge has to get rotation from the first real polygon
        CCPoint lp1 = CCPoint.ccpAdd(rotatePoint(CCPoint.ccp(-mLastWidth, 0), r), mLastLocation);
        CCPoint lp2 = CCPoint.ccpAdd(rotatePoint(CCPoint.ccp(+mLastWidth, 0), r), mLastLocation);
        seg.creationTime[0] = mCurTime - mDelta;
        seg.verts[0] = lp1.x;
        seg.verts[1] = lp1.y;
        seg.verts[2] = 0.0f;
        seg.verts[3] = lp2.x;
        seg.verts[4] = lp2.y;
        seg.verts[5] = 0.0f;
        seg.coords[0] = 0.0f;
        seg.coords[1] = mTexVPos;
        seg.coords[2] = 1.0f;
        seg.coords[3] = mTexVPos;
        seg.end++;
    }
    int v = seg.end * 6;
    int c = seg.end * 4;
    // add new vertex
    seg.creationTime[seg.end] = mCurTime;
    seg.verts[v] = p1.x;
    seg.verts[v + 1] = p1.y;
    seg.verts[v + 2] = 0.0f;
    seg.verts[v + 3] = p2.x;
    seg.verts[v + 4] = p2.y;
    seg.verts[v + 5] = 0.0f;
    seg.coords[c] = 0.0f;
    seg.coords[c + 1] = tend;
    seg.coords[c + 2] = 1.0f;
    seg.coords[c + 3] = tend;
    mTexVPos = tend;
    mLastLocation = location;
    mLastPoint1 = p1;
    mLastPoint2 = p2;
    mLastWidth = w;
    seg.end++;
}
