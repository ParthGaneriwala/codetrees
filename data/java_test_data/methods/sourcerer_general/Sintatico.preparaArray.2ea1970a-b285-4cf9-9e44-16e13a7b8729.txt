private void preparaArray(ArrayList<String> pArray) {
    Stack<String> vStackAspas = new Stack<String>();
    for (int i = 0; i < pArray.size(); i++) {
        if (pArray.get(i).equals("\"")) {
            if (vStackAspas.isEmpty()) {
                vStackAspas.push(pArray.get(i));
            } else {
                vStackAspas.pop();
            }
        }
        if (vStackAspas.isEmpty()) {
            if (pArray.get(i).equals("=")) {
                pArray.set(i, pArray.get(i - 1));
                pArray.set(i - 1, "=");
            } else if (Funcoes.isExpressaoLogica(pArray.get(i))) {
                String vAux = pArray.get(i - 1);
                pArray.set(i - 1, pArray.get(i));
                pArray.set(i, vAux);
            } else if (Funcoes.isOperacao(pArray.get(i))) {
                int a, j, vIndexInicial;
                if (pArray.get(i - 2).equals(Constantes.LPAREN) && !pArray.get(i - 3).equals(Constantes.DS_STM_PRINT)) {
                    j = i - 2;
                } else {
                    j = i - 1;
                }
                if (pArray.get(i - 3).equals(Constantes.DS_STM_PRINT)) {
                    a = 1;
                } else {
                    a = 0;
                }
                vIndexInicial = j;
                String vExpressao = "";
                Stack<String> vParenteses = new Stack<String>();
                vParenteses.push(Constantes.LPAREN);
                for (; j < pArray.size() - a; j++) {
                    String vStrToken = pArray.get(j);
                    if (vStrToken.equals(Constantes.LPAREN))
                        vParenteses.push(Constantes.LPAREN);
                    if (vStrToken.equals(Constantes.RPAREN)) {
                        vParenteses.pop();
                        if (vParenteses.isEmpty())
                            break;
                    }
                    if (!Funcoes.isStatement(vStrToken) && !vStrToken.equals(Constantes.DS_ASSIGN)) {
                        vExpressao = vExpressao + vStrToken + Constantes.CD_SEPARADOR;
                        continue;
                    }
                    break;
                }
                vExpressao = vExpressao.substring(0, vExpressao.length() - 3);
                // Volta para posicao original para realocar os itens no
                // array
                // dos tokens
                j = vIndexInicial;
                // Avalia as expressï¿½es quanto a prioridade
                Aplicacao vAplicacao = new Aplicacao();
                String[] vResultadoPrioridadeExpressao = vAplicacao.posToInfixa(vExpressao);
                for (int k = 0; k < vResultadoPrioridadeExpressao.length; k++) {
                    String vToken = vResultadoPrioridadeExpressao[k];
                    if (vToken == null || vToken.equals("")) {
                        pArray.remove(j);
                    } else {
                        pArray.set(j, vToken);
                        j++;
                    }
                }
                i = j;
            }
        }
    }
}
