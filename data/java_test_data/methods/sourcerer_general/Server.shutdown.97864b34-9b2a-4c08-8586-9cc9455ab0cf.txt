protected synchronized void shutdown(boolean error) {
    if (serverState == ServerConstants.SERVER_STATE_SHUTDOWN) {
        return;
    }
    StopWatch sw;
    printWithThread("shutdown() entered");
    sw = new StopWatch();
    print("Initiating shutdown sequence...");
    releaseServerSocket();
    DatabaseManager.deRegisterServer(this);
    if (dbPath != null) {
        for (int i = 0; i < dbPath.length; i++) {
            releaseDatabase(dbID[i]);
        }
    }
    // running connection threads
    if (serverConnectionThreadGroup != null) {
        if (!serverConnectionThreadGroup.isDestroyed()) {
            for (int i = 0; serverConnectionThreadGroup.activeCount() > 0; i++) {
                int count;
                try {
                    Thread.sleep(100);
                } catch (Exception e) {
                // e.getMessage();
                }
            }
            try {
                serverConnectionThreadGroup.destroy();
                printWithThread(serverConnectionThreadGroup.getName() + " destroyed");
            } catch (Throwable t) {
                printWithThread(serverConnectionThreadGroup.getName() + " not destroyed");
                printWithThread(t.toString());
            }
        }
        serverConnectionThreadGroup = null;
    }
    serverThread = null;
    setState(ServerConstants.SERVER_STATE_SHUTDOWN);
    print(sw.elapsedTimeToMessage("Shutdown sequence completed"));
    if (isNoSystemExit()) {
        printWithTimestamp("SHUTDOWN : System.exit() was not called");
        printWithThread("shutdown() exited");
    } else {
        printWithTimestamp("SHUTDOWN : System.exit() is called next");
        printWithThread("shutdown() exiting...");
        try {
            System.exit(0);
        } catch (Throwable t) {
            printWithThread(t.toString());
        }
    }
}
