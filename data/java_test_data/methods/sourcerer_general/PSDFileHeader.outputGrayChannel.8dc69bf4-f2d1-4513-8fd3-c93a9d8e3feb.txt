void outputGrayChannel(int channel, AdaptiveRasterImage ji, DataOutputStream out, int compression) throws JimiException, IOException {
    int row;
    int len;
    byte[] rowBuf = new byte[cols_];
    byte[] rowBufC = null;
    byte[] packedBuf = null;
    if (// compression buffer if required
    compression != 0)
        rowBufC = new byte[cols_ + (cols_ / 128) + 1];
    int pixelSize = ji.getColorModel().getPixelSize();
    // default for DirectColorModel
    boolean whiteIsZero = false;
    ColorModel cm = ji.getColorModel();
    byte[] buf;
    for (row = 0; row < rows_; ++row) {
        encoder_.setProgress((row * 100) / rows_);
        ji.getChannel(channel, row, rowBuf, 0);
        // convert 2 to 7 bit grayscale upto 8 bit for save.
        if (pixelSize == 1) {
            // BITMAP format output.
            if (packedBuf == null)
                packedBuf = new byte[(rowBuf.length / 8) + ((rowBuf.length % 8) != 0 ? 1 : 0)];
            JimiUtil.packPixels(1, rowBuf, packedBuf);
            // for there BITMAP color mode file format
            if (!whiteIsZero) {
                for (int i = packedBuf.length; --i >= 0; ) packedBuf[i] = (byte) (~packedBuf[i]);
            }
            if (compression == 0)
                out.write(packedBuf);
            else {
                len = Packbits.packbits(packedBuf, rowBufC);
                if (SLLTable_ != null)
                    SLLTable_[sllOffset_++] = (short) len;
                else
                    out.write(rowBufC, 0, len);
            }
        } else // pixelSize 2 to 8
        {
            if (pixelSize < 8)
                JimiUtil.pixelDepthChange(pixelSize, rowBuf, 8);
            // for there GRAYSCALE color mode file format
            if (whiteIsZero) {
                for (int i = rowBuf.length; --i >= 0; ) rowBuf[i] = (byte) (~rowBuf[i]);
            }
            if (compression == 0)
                // output 8 bit grayscale data
                out.write(rowBuf);
            else {
                len = Packbits.packbits(rowBuf, rowBufC);
                if (SLLTable_ != null)
                    SLLTable_[sllOffset_++] = (short) len;
                else
                    out.write(rowBufC, 0, len);
            }
        }
    }
}
