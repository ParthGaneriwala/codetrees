public JSONObject sendMail(final JSONObject requestJSONObject, final HttpServletRequest request) throws ActionException {
    final JSONObject ret = new JSONObject();
    try {
        final String contactorName = requestJSONObject.getString(Contact.CONTACTOR_NAME);
        final String contactorEmail = requestJSONObject.getString(Contact.CONTACTOR_EMAIL_ADDRESS);
        final String contactorMessage = requestJSONObject.getString(Contact.CONTACTOR_MESSAGE);
        final String contatorCapCode = requestJSONObject.getString(Contact.CAP_CODE);
        final String actualCapCode = request.getSession().getAttribute(CaptchaServlet.CAP_STRING).toString();
        final String contactorPhone = requestJSONObject.getString(Contact.CONTACTOR_PHONE_NUMBER);
        boolean isValid = true;
        final Locale locale = Locales.getLocale(request);
        final JSONObject messages = new JSONObject();
        ret.put(Keys.MESSAGES, messages);
        if (!isValid(contactorName)) {
            messagesFill(messages, Message.NAME_CANNOT_BE_NULL, locale);
            isValid = false;
        }
        if (!isValid(contactorEmail)) {
            messagesFill(messages, Message.EMAIL_CANNOT_BE_NULL, locale);
            isValid = false;
        } else {
            if (!checkValidEmailAddress(contactorEmail)) {
                messagesFill(messages, Message.ILLEGAL_EMAIL_ADDRESS, locale);
                isValid = false;
            }
        }
        if (!isValid(contactorMessage)) {
            messagesFill(messages, Message.MESSAGE_CANNOT_BE_NULL, locale);
            isValid = false;
        }
        if (!isValid(contatorCapCode)) {
            messagesFill(messages, Message.CAPCODE_CANNOT_BE_NULL, locale);
            isValid = false;
        } else {
            if (!actualCapCode.equalsIgnoreCase(contatorCapCode)) {
                messagesFill(messages, Message.CAPCODE_INCORRECT, locale);
                isValid = false;
            }
        }
        if (isValid) {
            final String messageBody = genMessageBody(contactorName, contactorEmail, contactorPhone, contactorMessage);
            final Thread task = new Thread(new EmailSender(MAIL_ACCOUNT_CONFIG.getString(User.USER_NAME), MAIL_ACCOUNT_CONFIG.getString(User.USER_PASSWORD), // email from
            MAIL_ACCOUNT_CONFIG.getString(User.USER_NAME), // email to
            MAIL_ACCOUNT_CONFIG.getString(User.USER_NAME), messageBody, "Visitor message from co-soft.info"));
            try {
                messagesFill(messages, Message.MAIL_SENT, locale);
                ret.put(Keys.STATUS_CODE, StatusCodes.EMAIL_SENT_SUCC);
                task.join(TIMEOUT);
                LOGGER.info("Mail sending[sessionId=" + request.getSession().getId() + "]....");
                task.start();
            } catch (final InterruptedException e) {
                messagesFill(messages, Message.MAIL_SENT_FAIL, locale);
                ret.put(Keys.STATUS_CODE, StatusCodes.EMAIL_SENT_FAIL_);
            }
        } else {
            ret.put(Keys.STATUS_CODE, com.cs.web.FwkStatusCodes.INPUT_INVALID);
        }
    } catch (final JSONException e) {
        LOGGER.error(e.getMessage(), e);
        throw new ActionException(e);
    }
    LOGGER.info("Mail sent[ret=" + ret + ", sessionId=" + request.getSession().getId() + "]");
    return ret;
}
