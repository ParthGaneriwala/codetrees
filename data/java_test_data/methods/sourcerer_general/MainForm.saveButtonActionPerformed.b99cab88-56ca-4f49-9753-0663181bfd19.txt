// GEN-LAST:event_cancelButtonActionPerformed
private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {
    // save general settings value in xml file generalsetting.xml
    if (selectedButton.equals("filesystemButton")) {
        int n = JOptionPane.showConfirmDialog(null, "Do You Want To Save?", projectName, JOptionPane.YES_NO_OPTION);
        if (n == 0) {
            new Thread() {

                @Override
                public void run() {
                    CreatXMLFile createXmlFileObject = new CreatXMLFile();
                    HashMap selectedNode = TestFileTree.getSelectedNodes();
                    Object[] objArr = selectedNode.keySet().toArray();
                    int len = objArr.length;
                    HashMap map = new HashMap();
                    for (int i = 0; i < len; i++) {
                        map.put(objArr[i].toString(), "false");
                    }
                    CreatXMLFile.writeXmlFile(System.getProperty("user.home") + "/" + projectName + "/FilesToUpload.xml", map);
                    MainDialog statusObj = MainDialog.getInstance();
                    statusObj.setVisible(true);
                }
            }.start();
        }
    } else if (selectedButton.equals("backupsetButton") || selectedButton.equals("")) {
        int n = JOptionPane.showConfirmDialog(null, "Do You Want To Save?", projectName, JOptionPane.YES_NO_OPTION);
        if (n == 0) {
            new Thread() {

                @Override
                public void run() {
                    HashMap map = new HashMap();
                    DefaultTableModel model = (DefaultTableModel) MainForm.backupsetLeftTable.getModel();
                    int row = model.getRowCount();
                    for (int i = 0; i < row; i++) {
                        if ((Boolean) model.getValueAt(i, 0)) {
                            String filename = model.getValueAt(i, 1).toString();
                            getFileName(new File(System.getProperty("user.home")) + "/" + filename, map);
                        }
                    }
                    CreatXMLFile.writeXmlFile(new File(System.getProperty("user.home")) + "/" + projectName + "/BackUpSet.xml", map);
                // MainDialog statusObj = new MainDialog();
                // statusObj.setVisible(true);
                }
            }.start();
        }
    } else if (selectedButton.equals("restoreButton")) {
        int len = table_RestoreInfo.length;
        HashMap map = new HashMap();
        for (int i = 0; i < len; i++) {
            map.put(table_RestoreInfo[i][0], false);
        }
        CreatXMLFile.writeXmlFile(System.getProperty("user.home") + "/" + projectName + "/Restore.xml", map);
    }
    if (optionTabbedPane.getSelectedIndex() == 0) {
        boolean status = false, warn = false;
        int alert;
        if (backupStatusCheckBox.isSelected() == true) {
            status = true;
        }
        if (warnCheckBox.isSelected() == true) {
            warn = true;
        }
        // get JSpinner value
        String alert1 = alertSpinner.getValue().toString();
        alert = Integer.parseInt(alert1);
        // call XmlGeneralStore class constucter
        XmlGeneralStore generals = new XmlGeneralStore();
        String filename = "genaralsettings.xml";
        generals.setStatus(status);
        generals.setQuotaWarning(warn);
        generals.setAlertDays(alert);
        try {
            generals.writeGeneralXml(filename);
        } catch (ParserConfigurationException ex) {
            Logger.LogText(ex.toString());
        }
    } else if (optionTabbedPane.getSelectedIndex() == 1) {
        // save performance settings value in xml file performancesetting.xml
        boolean bandwidth = false, throttle = false, throttlehour = false;
        int throttlefrom, throttleto, limit;
        if (enableCheckBox.isSelected() == true) {
            bandwidth = true;
        }
        if (throttleRadioButton.isSelected() == true) {
            throttle = true;
        }
        if (throttlehrsRadioButton.isSelected() == true) {
            throttlehour = true;
        }
        // get Jslider value
        limit = enableSlider.getValue();
        // get JSpinner value
        String throttlefromtemp = timefromSpinner.getValue().toString();
        throttlefrom = Integer.parseInt(throttlefromtemp);
        String throttletotemp = timetoSpinner.getValue().toString();
        throttleto = Integer.parseInt(throttletotemp);
        // call XmlPerformanceStore class constructer
        XmlPerformanceStore performance = new XmlPerformanceStore();
        String filename = "performancesettings.xml";
        performance.setBandwidth(bandwidth);
        performance.setLimit(limit);
        performance.setThrottle(throttle);
        performance.setThrottlefrom(throttlefrom);
        performance.setThrottlehour(throttlehour);
        performance.setThrottleto(throttleto);
        try {
            performance.writeGeneralXml(filename);
        } catch (ParserConfigurationException ex) {
        // Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    } else if (optionTabbedPane.getSelectedIndex() == 3) {
        // save advanced settings value in xml file advancedsetting.xml
        boolean update = false, virtual = false, log = false;
        if (updateCheckBox.isSelected() == true) {
            update = true;
        }
        if (virtualdriveCheckBox.isSelected() == true) {
            virtual = true;
        }
        if (autoLogCheckBox.isSelected() == true) {
            log = true;
        }
        // call XmlAdvancedStore class constructer
        XmlAdvancedStore advanced = new XmlAdvancedStore();
        advanced.setLog(log);
        advanced.setUpdate(update);
        advanced.setVirtualDrive(virtual);
        String filename = "advancedsettings.xml";
        try {
            advanced.writeGeneralXml(filename);
        } catch (ParserConfigurationException ex) {
        // Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    } else if (optionTabbedPane.getSelectedIndex() == 2) {
        // save scheduling settings value in xml file schedulingsetting.xml
        boolean auto_backup = false, scheduled = false;
        String schedul_parameter = "Daily";
        int cpu_work, idle_time, backup_times, schedul_back_at, schedul_back_days;
        if (autobackupRadioButton.isSelected() == true) {
            auto_backup = true;
        }
        if (scheduleComboBox.getSelectedIndex() == 1) {
            schedul_parameter = "Weekly";
        }
        if (schedulebackuptimeRadioButton.isSelected() == true) {
            scheduled = true;
        }
        // get JSpinner value
        String cpu_worktemp = CPUstatusSpinner.getValue().toString();
        cpu_work = Integer.parseInt(cpu_worktemp);
        String idle_timetemp = CPUidleSpinner.getValue().toString();
        idle_time = Integer.parseInt(idle_timetemp);
        String backup_timestemp = NumoftimeSpinner.getValue().toString();
        backup_times = Integer.parseInt(backup_timestemp);
        String schedul_back_attemp = backuptimeSpinner.getValue().toString();
        schedul_back_at = Integer.parseInt(schedul_back_attemp);
        String schedul_back_daystemp = daySpinner.getValue().toString();
        schedul_back_days = Integer.parseInt(schedul_back_daystemp);
        // call XmlSchedulingStore class constructer
        XmlSchedulingStore scheduling = XmlSchedulingStore.getnstance();
        scheduling.setAutomatic(auto_backup);
        scheduling.setCPU_WorkTime(cpu_work);
        scheduling.setIdle_Time(idle_time);
        scheduling.setBackUp_Times(backup_times);
        scheduling.setSelectedDay(onDayCombo.getSelectedItem().toString());
        scheduling.setSchedulued_BackUp(scheduled);
        scheduling.setScheduling_Parameter(schedul_parameter);
        scheduling.setScheduling_BackUp_At(schedul_back_at);
        scheduling.setScheduling_BackUp_Days(schedul_back_days);
        String filename = "schedulingsettings.xml";
        try {
            scheduling.writeGeneralXml(filename);
        } catch (ParserConfigurationException ex) {
        // Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
// optionPanel.setVisible(false);
}
