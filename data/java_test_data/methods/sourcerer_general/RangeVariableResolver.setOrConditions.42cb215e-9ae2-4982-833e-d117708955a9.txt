private boolean setOrConditions(RangeVariableConditions conditions, ExpressionLogical orExpression, int rangeVarIndex) {
    HsqlArrayList orExprList = new HsqlArrayList();
    decomposeOrConditions(orExpression, orExprList);
    RangeVariableConditions[] conditionsArray = new RangeVariableConditions[orExprList.size()];
    for (int i = 0; i < orExprList.size(); i++) {
        HsqlArrayList exprList = new HsqlArrayList();
        Expression e = (Expression) orExprList.get(i);
        decomposeAndConditions(e, exprList);
        RangeVariableConditions c = new RangeVariableConditions(conditions);
        setIndexConditions(c, exprList, rangeVarIndex, false);
        conditionsArray[i] = c;
        if (!c.hasIndexCondition()) {
            // deep OR
            return false;
        }
    }
    Expression e = null;
    for (int i = 0; i < conditionsArray.length; i++) {
        RangeVariableConditions c = conditionsArray[i];
        conditionsArray[i].excludeConditions = e;
        if (i > 1) {
            Expression lastExpr = conditionsArray[i - 1].excludeConditions;
            e = new ExpressionLogical(OpTypes.OR, e, lastExpr);
        }
        if (c.indexCond != null) {
            for (int k = 0; k < c.indexedColumnCount; k++) {
                e = ExpressionLogical.andExpressions(e, c.indexCond[k]);
            }
        }
        e = ExpressionLogical.andExpressions(e, c.indexEndCondition);
        e = ExpressionLogical.andExpressions(e, c.nonIndexCondition);
    }
    if (e != null) {
    // return false;
    }
    if (conditions.isJoin) {
        conditions.rangeVar.joinConditions = conditionsArray;
        conditionsArray = new RangeVariableConditions[orExprList.size()];
        ArrayUtil.fillArray(conditionsArray, conditions.rangeVar.whereConditions[0]);
        conditions.rangeVar.whereConditions = conditionsArray;
    } else {
        conditions.rangeVar.whereConditions = conditionsArray;
        conditionsArray = new RangeVariableConditions[orExprList.size()];
        ArrayUtil.fillArray(conditionsArray, conditions.rangeVar.joinConditions[0]);
        conditions.rangeVar.joinConditions = conditionsArray;
    }
    return true;
}
