int deflateInit2(ZStream strm, int level, int method, int windowBits, int memLevel, int strategy) {
    int noheader = 0;
    // byte[] my_version=ZLIB_VERSION;
    // 
    // if (version == null || version[0] != my_version[0]
    // || stream_size != sizeof(z_stream)) {
    // return Z_VERSION_ERROR;
    // }
    strm.msg = null;
    if (level == Z_DEFAULT_COMPRESSION)
        level = 6;
    if (windowBits < 0) {
        // undocumented feature: suppress zlib header
        noheader = 1;
        windowBits = -windowBits;
    }
    if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method != Z_DEFLATED || windowBits < 9 || windowBits > 15 || level < 0 || level > 9 || strategy < 0 || strategy > Z_HUFFMAN_ONLY) {
        return Z_STREAM_ERROR;
    }
    strm.dstate = (Deflate) this;
    this.noheader = noheader;
    w_bits = windowBits;
    w_size = 1 << w_bits;
    w_mask = w_size - 1;
    hash_bits = memLevel + 7;
    hash_size = 1 << hash_bits;
    hash_mask = hash_size - 1;
    hash_shift = ((hash_bits + MIN_MATCH - 1) / MIN_MATCH);
    window = new byte[w_size * 2];
    prev = new short[w_size];
    head = new short[hash_size];
    // 16K elements by default
    lit_bufsize = 1 << (memLevel + 6);
    // We overlay pending_buf and d_buf+l_buf. This works since the average
    // output size for (length,distance) codes is <= 24 bits.
    pending_buf = new byte[lit_bufsize * 4];
    pending_buf_size = lit_bufsize * 4;
    d_buf = lit_bufsize / 2;
    l_buf = (1 + 2) * lit_bufsize;
    this.level = level;
    // System.out.println("level="+level);
    this.strategy = strategy;
    this.method = (byte) method;
    return deflateReset(strm);
}
