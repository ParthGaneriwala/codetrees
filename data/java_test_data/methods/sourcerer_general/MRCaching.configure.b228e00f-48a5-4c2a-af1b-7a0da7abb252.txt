public void configure(JobConf jconf) {
    conf = jconf;
    try {
        Path[] localArchives = DistributedCache.getLocalCacheArchives(conf);
        Path[] localFiles = DistributedCache.getLocalCacheFiles(conf);
        // read the cached files (unzipped, unjarred and text)
        // and put it into a single file TEST_ROOT_DIR/test.txt
        String TEST_ROOT_DIR = jconf.get("test.build.data", "/tmp");
        Path file = new Path("file:///", TEST_ROOT_DIR);
        FileSystem fs = FileSystem.getLocal(conf);
        if (!fs.mkdirs(file)) {
            throw new IOException("Mkdirs failed to create " + file.toString());
        }
        Path fileOut = new Path(file, "test.txt");
        fs.delete(fileOut, true);
        DataOutputStream out = fs.create(fileOut);
        for (int i = 0; i < localArchives.length; i++) {
            // read out the files from these archives
            File f = new File(localArchives[i].toString());
            File txt = new File(f, "test.txt");
            FileInputStream fin = new FileInputStream(txt);
            DataInputStream din = new DataInputStream(fin);
            String str = din.readLine();
            din.close();
            out.writeBytes(str);
            out.writeBytes("\n");
        }
        for (int i = 0; i < localFiles.length; i++) {
            // read out the files from these archives
            File txt = new File(localFiles[i].toString());
            FileInputStream fin = new FileInputStream(txt);
            DataInputStream din = new DataInputStream(fin);
            String str = din.readLine();
            out.writeBytes(str);
            out.writeBytes("\n");
        }
        out.close();
    } catch (IOException ie) {
        System.out.println(StringUtils.stringifyException(ie));
    }
}
