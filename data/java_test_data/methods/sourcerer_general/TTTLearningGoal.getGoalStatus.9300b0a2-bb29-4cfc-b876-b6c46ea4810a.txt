public int getGoalStatus(edu.unisa.chris.orientation.StateInstance state) {
    TTTStateInstance tttsi = (TTTStateInstance) state;
    int toReturn = CHRISConstants.GOAL_ACTIVE;
    if (!(tttsi.wins == wins && tttsi.losses == losses && tttsi.draws == draws)) {
        if (tttsi.wins > wins)
            toReturn = CHRISConstants.GOAL_ACHIEVED;
        else if (tttsi.losses > losses)
            toReturn = CHRISConstants.GOAL_FAILED;
        else
            toReturn = CHRISConstants.GOAL_IMPOSSIBLE;
        wins = tttsi.wins;
        losses = tttsi.losses;
        draws = tttsi.draws;
    }
    if (toReturn != CHRISConstants.GOAL_ACTIVE) {
        rotations = 0;
    }
    int plays = wins + losses + draws;
    if (learning == CHRISConstants.LEARNING_PASSIVE && plays == 1000) {
        skillControl = false;
        learning = CHRISConstants.LEARNING_ACTIVE;
    }
    if (skillControl == false && learning == CHRISConstants.LEARNING_ACTIVE) {
        if (plays < 500) {
            double m = -0.2 / 500;
            double c = 0.5;
            exploration = m * plays + c;
        } else if (plays > 500 && plays < 1000) {
            double m = -0.1 / 500;
            double c = 0.3 - m * 500;
            exploration = m * plays + c;
        } else if (plays > 1000 && plays < 2000) {
            double m = -0.1 / 1000;
            double c = 0.2 - m * 1000;
            exploration = m * plays + c;
            stepSizeParameter = 0.08;
        } else if (plays > 2000 && plays < 3000) {
            double m = -0.09 / 1000;
            double c = 0.1 - m * 2000;
            exploration = m * plays + c;
            stepSizeParameter = 0.05;
        } else if (plays > 3000 && plays < 4000) {
            double m = -0.01 / 1000;
            double c = 0.01 - m * 3000;
            exploration = m * plays + c;
            stepSizeParameter = 0.02;
        } else {
            exploration = 0;
            stepSizeParameter = 0.0;
        }
    }
    return toReturn;
}
