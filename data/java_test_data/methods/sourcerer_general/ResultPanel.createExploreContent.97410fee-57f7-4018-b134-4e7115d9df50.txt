private JPanel createExploreContent(int selectedRow) {
    JPanel panel = new JPanel();
    panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
    // Node attributes Panel
    JPanel nodeAttributesPanel = new JPanel(new BorderLayout());
    nodeAttributesPanel.setBorder(BorderFactory.createTitledBorder("Node Attribute"));
    String[] availableAttributes = Cytoscape.getNodeAttributes().getAttributeNames();
    Arrays.sort(availableAttributes, String.CASE_INSENSITIVE_ORDER);
    String[] attributesList = new String[availableAttributes.length];
    System.arraycopy(availableAttributes, 0, attributesList, 0, availableAttributes.length);
    JComboBox nodeAttributes = new JComboBox(attributesList);
    nodeAttributes.setToolTipText("Choose the attribute name you want to look into");
    // Create a table listing the node attributes and their enumerations
    ResultPanel.EnumeratorTableModel modelEnumerator;
    modelEnumerator = new ResultPanel.EnumeratorTableModel(new HashMap());
    JTable enumerationsTable = new JTable(modelEnumerator);
    JScrollPane tableScrollPane = new JScrollPane(enumerationsTable);
    tableScrollPane.getViewport().setBackground(Color.WHITE);
    enumerationsTable.setPreferredScrollableViewportSize(new Dimension(100, picSize));
    enumerationsTable.setGridColor(Color.LIGHT_GRAY);
    enumerationsTable.setFont(new Font(enumerationsTable.getFont().getFontName(), Font.PLAIN, 11));
    enumerationsTable.setDefaultRenderer(StringBuffer.class, new ResultPanel.JTextAreaRenderer(0));
    enumerationsTable.setFocusable(false);
    // Create a combo box that lists all the available node attributes for enumeration
    nodeAttributes.addActionListener(new ResultPanel.enumerateAction(enumerationsTable, modelEnumerator, selectedRow));
    nodeAttributesPanel.add(nodeAttributes, BorderLayout.NORTH);
    nodeAttributesPanel.add(tableScrollPane, BorderLayout.SOUTH);
    // The sizeSliderPanle
    JPanel sizePanel = new JPanel(new BorderLayout());
    sizePanel.setBorder(BorderFactory.createTitledBorder("Size Slider"));
    // A slider to manipulate node score cutoff
    // TODO: note here,we need to modify the codes, or we can just remove this panel simpley
    JSlider sizeSlider = new JSlider(JSlider.HORIZONTAL, 0, 1000, (int) (currentParamsCopy.getNodeScoreCutoff() * 1000)) {

        public JToolTip createToolTip() {
            return new MyTipTool();
        }
    };
    sizeSlider.addChangeListener(new ResultPanel.SizeAction(selectedRow, nodeAttributes));
    sizeSlider.setMajorTickSpacing(200);
    sizeSlider.setMinorTickSpacing(50);
    sizeSlider.setPaintTicks(true);
    sizeSlider.setPaintLabels(true);
    Hashtable labelTable = new Hashtable();
    labelTable.put(new Integer(0), new JLabel("Min"));
    labelTable.put(new Integer(1000), new JLabel("Max"));
    // TODO: note here,we need to modify the codes, or we can just remove this panel simpley
    // TODO: there may be some other situation like this ,we need to find out them
    // Make a special label for the initial position
    labelTable.put(new Integer((int) (currentParamsCopy.getNodeScoreCutoff() * 1000)), new JLabel("^"));
    sizeSlider.setLabelTable(labelTable);
    sizeSlider.setFont(new Font("Arial", Font.PLAIN, 8));
    String sizeTip = "Move the slider to change the size of the complex";
    sizeSlider.setToolTipText(sizeTip);
    sizePanel.add(sizeSlider, BorderLayout.NORTH);
    // JPanel bottomExplorePanel = createBottomExplorePanel(selectedRow);
    JButton createChildButton = new JButton("Create SubNetwork");
    createChildButton.addActionListener(new ResultPanel.CreateChildAction(this, selectedRow));
    createChildButton.setToolTipText("create a network for this complex");
    JPanel buttonPanel = new JPanel();
    buttonPanel.setLayout(new BorderLayout());
    buttonPanel.add(createChildButton, BorderLayout.SOUTH);
    JPanel bottom = new JPanel();
    bottom.setLayout(new BorderLayout());
    if (alg.getParams().getAlgorithm().equals(ParameterSet.MCODE))
        bottom.add(sizePanel, BorderLayout.CENTER);
    bottom.add(buttonPanel, BorderLayout.EAST);
    /*}
		else
			bottom.add(buttonPanel);*/
    panel.add(nodeAttributesPanel);
    panel.add(bottom);
    return panel;
}
