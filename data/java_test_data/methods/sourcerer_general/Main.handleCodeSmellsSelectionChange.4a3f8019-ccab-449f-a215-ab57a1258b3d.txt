private void handleCodeSmellsSelectionChange() {
    if (codeSmellGroups.getSelectedItem().equals("Bloaters")) {
        if (codeSmells.getSelectedItem() == null) {
        } else if (codeSmells.getSelectedItem().equals("Long Method")) {
            refactorings.clear();
            String[] items = new String[] { "Extract Method", "Introduce Parameter Object", "Decompose Conditional If", "Preserve Whole Object", "Replace Method with Method Object", "Replace Temp with Query" };
            addItems(refactorings, items);
        } else if (codeSmells.getSelectedItem().equals("Large Class")) {
            refactorings.clear();
            String[] items = new String[] { "Extract Class", "Extract Subclass", "Extract Interface", "Replace Data Value with Object" };
            addItems(refactorings, items);
        } else if (codeSmells.getSelectedItem().equals("Primitive Obsession")) {
            refactorings.clear();
            String[] items = new String[] { "Replace Data Value with Objects", "Introduce Parameter Object", "Extract Class", "Replace Type Code with Class", "Replace Type Code with Subclass", "Replace Array with Object" };
            addItems(refactorings, items);
        } else if (codeSmells.getSelectedItem().equals("Long Parameter List")) {
            refactorings.clear();
            String[] items = new String[] { "Replace Parameter with Method", "Introduce Parameter Object", "Preserve Whole Object" };
            addItems(refactorings, items);
        } else if (codeSmells.getSelectedItem().equals("DataClumps")) {
            refactorings.clear();
            String[] items = new String[] { "Extract Class", "Preserve Whole Object", "Introduce Parameter Object" };
            addItems(refactorings, items);
        }
    } else if (codeSmellGroups.getSelectedItem().equals("Object-Orientation Abusers")) {
        if (codeSmells.getSelectedItem() == null) {
        } else if (codeSmells.getSelectedItem().equals("Switch Statements")) {
            refactorings.clear();
            String[] items = new String[] { "Replace Conditional with Polymorphism", "Replace Type Code with Subclass", "Replace Type Code with State/Strategy", "Replace Parameter with Explicit Methods" };
            addItems(refactorings, items);
        } else if (codeSmells.getSelectedItem().equals("Temporary Field")) {
            refactorings.clear();
            refactorings.addElement("Extract Class");
        } else if (codeSmells.getSelectedItem().equals("Refused Request")) {
            refactorings.clear();
            String[] items = new String[] { "Push Down Field", "Push Down Method", "Replace Inheritance with Delegation" };
            addItems(refactorings, items);
        } else if (codeSmells.getSelectedItem().equals("Alternative Class with Different Interface")) {
            refactorings.clear();
            String[] items = new String[] { "Rename Method", "Move Method" };
            addItems(refactorings, items);
        }
    } else if (codeSmellGroups.getSelectedItem().equals("Change Preventers")) {
        if (codeSmells.getSelectedItem() == null) {
        } else if (codeSmells.getSelectedItem().equals("Divergent Change")) {
            refactorings.clear();
            refactorings.addElement("Extract Class");
        } else if (codeSmells.getSelectedItem().equals("Shotgun Surgery")) {
            refactorings.clear();
            String[] items = new String[] { "Move Method", "Move Field", "Inline Class" };
            addItems(refactorings, items);
        } else if (codeSmells.getSelectedItem().equals("Parallel Inheritance Hierarchies")) {
            refactorings.clear();
            String[] items = new String[] { "Move Method", "Move Field" };
            addItems(refactorings, items);
        }
    } else if (codeSmellGroups.getSelectedItem().equals("Dispensables")) {
        if (codeSmells.getSelectedItem() == null) {
        } else if (codeSmells.getSelectedItem().equals("Lazy Class")) {
            refactorings.clear();
            String[] items = new String[] { "Collapse Hierarchy", "Inline Class", "Inline Singleton" };
            addItems(refactorings, items);
        } else if (codeSmells.getSelectedItem().equals("Data Class")) {
            refactorings.clear();
            String[] items = new String[] { "Move Method", "Encapsulate Field", "Encapsulate Collection" };
            addItems(refactorings, items);
        } else if (codeSmells.getSelectedItem().equals("Duplicate Code")) {
            refactorings.clear();
            refactorings.addElement("Extract Method");
        } else if (codeSmells.getSelectedItem().equals("Dead Code")) {
            refactorings.clear();
            String[] items = new String[] { "Source Control", "Delete It" };
            addItems(refactorings, items);
        } else if (codeSmells.getSelectedItem().equals("Speculative Generality")) {
            refactorings.clear();
            String[] items = new String[] { "Collapse Hierarchy", "Rename Method", "Remove Parameter", "Inline Class" };
            addItems(refactorings, items);
        }
    } else if (codeSmellGroups.getSelectedItem().equals("Couplers")) {
        if (codeSmells.getSelectedItem() == null) {
        } else if (codeSmells.getSelectedItem().equals("Feature Envy")) {
            refactorings.clear();
            String[] items = new String[] { "Extract Method", "Move Method", "Move Field" };
            addItems(refactorings, items);
        } else if (codeSmells.getSelectedItem().equals("Inappropriate Intimacy")) {
            refactorings.clear();
            String[] items = new String[] { "Move Method", "Move Field", "Change Bidirectional Association to Unidirectional Association", "Extract Class", "Extract Delegate", "Replace Inheritance with Delegation" };
            addItems(refactorings, items);
        } else if (codeSmells.getSelectedItem().equals("Message Chains")) {
            refactorings.clear();
            String[] items = new String[] { "Hide Delegate", "Extract Method", "Move Method" };
            addItems(refactorings, items);
        } else if (codeSmells.getSelectedItem().equals("Middle Man")) {
            refactorings.clear();
            String[] items = new String[] { "Remove Middle Man", "Inline Method", "Replace Delegation with Inheritance" };
            addItems(refactorings, items);
        }
    }
}
