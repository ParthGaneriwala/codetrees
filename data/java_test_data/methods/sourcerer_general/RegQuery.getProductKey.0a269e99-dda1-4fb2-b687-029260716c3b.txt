public static String getProductKey() {
    String fullPID = "";
    String encodedKey = "";
    if (queryRegistry(PRODUCT_KEY_CMD, REGBINARY_TOKEN) != null) {
        fullPID = queryRegistry(PRODUCT_KEY_CMD, REGBINARY_TOKEN);
    }
    // This is what we have to work with:
    encodedKey = fullPID.substring(104, 134);
    System.out.println(encodedKey);
    // ################### CONSTANTS ###################
    // This little guy holds all the possible characters in the Product Key
    final char[] digits = { 'B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', // 0    1    2    3    4    5    6    7
    'M', 'P', 'Q', 'R', 'T', 'V', 'W', 'X', // 8    9    10   11   12   13   14   15
    'Y', '2', '3', '4', '6', '7', '8', '9' };
    // 16   17   18   19   20   21   22   23
    // D_LEN is the length of the decoded product key
    final int D_LEN = 29;
    // S_LEN is the length of the encoded product key in Bytes - a total of
    // 30 in chars (remember, 0 through 15 is a total of 16).
    final int S_LEN = 15;
    /* The longs were originally of type 'cardinal' in Pascal, which
         * is a fancy term for unsigned int. Java doesn't do unsigned.
         * My solution? Promote and Pray.
         *
         * A note from http://mindprod.com/jgloss/unsigned.html :
         * "In Java bytes, shorts, ints and longs are all considered signed. 
         * The only unsigned type is the 16-bit char. To use the sign bit as 
         * an additional data bit you have to promote to the next bigger data 
         * type with sign extension then mask off the high order bits.
         * To get the effect of a 32-bit unsigned:
         * ---------------------------
         * int i;                    |
         * // ...                    |
         * long l = i & 0xffffffffL; |
         * ---------------------------
         */
    int[] hexDigitalPID = new int[D_LEN];
    char[] des = new char[D_LEN + 1];
    int i = 0;
    int n = 0;
    int tmp = 0;
    // 0xffffffffL & (long)tmp;
    int hn = 0;
    // 0xffffffffL & (long)tmp;
    int value = 0;
    String rval = "";
    for (i = 0; i <= 14; ++i) {
        hexDigitalPID[i] = Integer.decode("0x" + encodedKey.substring(i * 2, (i * 2) + 2)).intValue();
    }
    for (i = 0; i <= 14; ++i) {
        System.out.println("hexDigitalPID[" + i + "] = " + hexDigitalPID[i]);
    }
    // ########################## BEGIN MAIN ALGORITHM ###############################
    for (i = D_LEN - 1; i >= 0; --i) {
        if (((i + 1) % 6) == 0) {
            des[i] = '-';
        } else {
            hn = 0;
            for (n = S_LEN - 1; n >= 0; --n) {
                hn = ((hn << 8) + hexDigitalPID[n]);
                hexDigitalPID[n] = (hn / 24);
                hn = (hn % 24);
            }
            // Now use hn to get the ascii value from the list
            des[i] = digits[hn];
        }
    }
    // ########################## END MAIN ALGORITHM ###############################
    des[D_LEN] = '\n';
    for (i = 0; des[i] != '\n'; ++i) {
        rval += des[i];
    }
    return rval;
}
