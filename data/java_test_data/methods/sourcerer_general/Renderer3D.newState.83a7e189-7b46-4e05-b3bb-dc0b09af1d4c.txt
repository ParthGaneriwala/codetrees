public void newState(VehicleState vs) {
    Sphere s = new Sphere(30, createAppearance());
    Obj3D dest = null;
    if (vs != null) {
        Point3d p = vs.getDestination();
        if (p != null) {
            dest = destination.get(vs.getId());
            if (dest == null) {
                dest = new Obj3D();
                TransformGroup tg = new TransformGroup();
                tg.addChild(s);
                dest.setModel3D(tg);
                dest.setPos(p);
                addObj3D(dest);
                destination.put(vs.getId(), dest);
            } else {
                dest.setPos(p);
            }
        } else {
            dest = destination.get(vs.getId());
            if (dest != null) {
                removeObj3D(dest);
            }
        }
    }
    Obj3D found = Vehicles.get(vs.getId());
    if (found != null) {
        found.setPos(vs.getPoint());
        // System.out.println("point"+vs.getPoint());
        found.setYaw(vs.getYaw());
        found.destination = vs.getDestination();
    /*
			if (vs.getDestination()==null)
			{
				found.loiter=true;
			}
			else
				found.loiter=false;
			*/
    // System.out.println("Moved the object to "+vs.getPoint());
    } else {
        Obj3D vhe = new Obj3D();
        /*File file=null;
			System.out.println(vs.getModel());
			if (getClass().getClassLoader().getResource(vs.getModel()) != null) 
				file=new File(getClass().getClassLoader().getResource(vs.getModel()).getFile());			
			else
				file=new File(getClass().getClassLoader().getResource("models/apv.3ds").getFile());
			
			Inspector3DS loader  = new Inspector3DS(file.getAbsolutePath());
			loader.parseIt(); // process the file
			TransformGroup theModel1  = loader.getModel(); // get the resulting 3D
			*/
        /*TransformGroup theModel1  = new TransformGroup();
			if(vs.getModel().equals("apv"))
				theModel1=(TransformGroup) APVModel.cloneTree();
			if(vs.getModel().equals("lusitania"))
				theModel1=(TransformGroup) APVModel.cloneTree();
			if(vs.getModel().equals(""))
				theModel1=(TransformGroup) APVModel.cloneTree();
			*/
        TransformGroup theModel1 = null;
        for (Enumeration<String> enuma = models.keys(); enuma.hasMoreElements(); ) {
            String id = enuma.nextElement();
            if (id.equals(vs.getId())) {
                theModel1 = (TransformGroup) models.get(vs.getId()).cloneTree();
            }
        }
        if (theModel1 == null) {
            theModel1 = (TransformGroup) models.get("apv").cloneTree();
        }
        /*System.err.println("##############################################\n" +
					"##############################################\n" +
					"##############################################\n" +
					"##############################################\n" +
					"##############################################\n" +
					"##############################################\n" +
					"##############################################\n" +
					"##############################################\n" +
					theModel1);
			//theModel1.addChild(s);
			*/
        /*TransformGroup tg=new TransformGroup();
			tg.addChild(new Sphere(2));
			Transform3D r=new Transform3D();
			r.set(new Vector3d(3, 0, 0));
			tg.setTransform(r);
			vhe.addTG(tg);*/
        vhe.setModel3D(theModel1);
        vhe.setPos(vs.getPoint());
        vhe.setYaw(vs.getYaw());
        Vehicles.put(vs.getId(), vhe);
        addObj3D(vhe);
    }
}
