private Statement compileBackup() {
    read();
    readThis(Tokens.DATABASE);
    readThis(Tokens.TO);
    String path = readQuotedString();
    // Default to non-blocking
    Boolean blockingMode = null;
    // Default to non-script
    Boolean scriptMode = null;
    // Defaults to compressed
    Boolean compression = null;
    outerLoop: while (true) {
        switch(token.tokenType) {
            case Tokens.BLOCKING:
                if (blockingMode != null) {
                    throw unexpectedToken();
                }
                blockingMode = Boolean.TRUE;
                read();
                break;
            case Tokens.SCRIPT:
                if (scriptMode != null) {
                    throw unexpectedToken();
                }
                scriptMode = Boolean.TRUE;
                read();
                break;
            case Tokens.COMPRESSED:
                if (compression != null) {
                    throw unexpectedToken();
                }
                compression = Boolean.TRUE;
                read();
                break;
            case Tokens.NOT:
                read();
                if (token.tokenType == Tokens.COMPRESSED) {
                    if (compression != null) {
                        throw unexpectedToken();
                    }
                    compression = Boolean.FALSE;
                    read();
                } else if (token.tokenType == Tokens.BLOCKING) {
                    blockingMode = Boolean.FALSE;
                    read();
                } else {
                    throw unexpectedToken();
                }
                break;
            default:
                break outerLoop;
        }
    }
    /**
     * @todo: This block is TEMPORARY.  Will be removed when we implement
     * Non-Blocking and SCRIPT mode.
     */
    if (scriptMode != null) {
        throw unsupportedFeature("SCRIPT");
    }
    scriptMode = Boolean.FALSE;
    if (blockingMode == null) {
        throw unexpectedTokenRequire("BLOCKING");
    }
    if (compression == null) {
        compression = Boolean.TRUE;
    }
    Object[] args = new Object[] { path, blockingMode, scriptMode, compression };
    Statement cs = new StatementCommand(StatementTypes.DATABASE_BACKUP, args);
    HsqlName[] names = database.schemaManager.getCatalogAndBaseTableNames();
    cs.writeTableNames = names;
    return cs;
}
