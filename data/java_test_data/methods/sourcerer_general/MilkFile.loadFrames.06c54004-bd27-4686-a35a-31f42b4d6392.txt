private void loadFrames() throws IOException {
    float multiplier = file.readFloat();
    // Current Time ignored
    file.readFloat();
    iTotalFrames = file.readInt();
    nNumJoints = file.readUnsignedShort();
    byte[] inName = new byte[32];
    myJoints = new MilkJoint[nNumJoints];
    Transform3D converter = new Transform3D();
    Vector3d eulerVec = new Vector3d();
    Vector3d translation = new Vector3d();
    for (int i = 0; i < nNumJoints; i++) {
        myJoints[i] = new MilkJoint();
        myJoints[i].keyframeRot = new Quat4f[iTotalFrames];
        myJoints[i].keyframePos = new Vector3f[iTotalFrames];
        // flags
        file.readByte();
        file.readFully(inName);
        myJoints[i].name = cutAtNull(inName);
        file.readFully(inName);
        String compare = cutAtNull(inName);
        myJoints[i].parentIndex = -1;
        for (int j = 0; j < i; j++) if (myJoints[j].name.equals(compare))
            myJoints[i].parentIndex = j;
        eulerVec.set(file.readFloat(), file.readFloat(), file.readFloat());
        translation.set(file.readFloat(), file.readFloat(), file.readFloat());
        myJoints[i].localRefMatrix.setEuler(eulerVec);
        myJoints[i].localRefMatrix.setTranslation(translation);
        int numRot = file.readUnsignedShort();
        int numPos = file.readUnsignedShort();
        int myTime;
        for (int j = 0; j < numRot; j++) {
            float letsSee = file.readFloat();
            myTime = (int) (multiplier * letsSee - 1);
            eulerVec.set(file.readFloat(), file.readFloat(), file.readFloat());
            converter.setEuler(eulerVec);
            myJoints[i].keyframeRot[myTime] = new Quat4f();
            // myJoints[i].keyframeRot[myTime].set(converter.rot);
            converter.get(myJoints[i].keyframeRot[myTime]);
        }
        for (int j = 0; j < numPos; j++) {
            myTime = (int) (multiplier * file.readFloat() - 1);
            myJoints[i].keyframePos[myTime] = new Vector3f(file.readFloat(), file.readFloat(), file.readFloat());
        }
    }
}
