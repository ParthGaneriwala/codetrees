private void analiseNode(Node n) {
    String[] symbol = { n.getSymbol() };
    Instruction[] valid;
    if (// Analise the oper
    n.isOper()) {
        // See the number of valid instructions
        valid = iTable.validOptions(symbol);
        if (// If there's only one instruction possible
        this.iArrSize(valid) == 1) {
            this.selectedI[this.selectedPoint] = iTable.iSearch(symbol);
            this.levelSelection[this.selectedPoint] = n.getLevel();
            ++this.selectedPoint;
            for (int c = 0; c < n.numberOfChilds(); ++c) {
                analiseNode(n.getChild(c));
            }
        } else if (// If there are more possible instructions
        this.iArrSize(valid) > 1) {
            if (// If the two childs are vars
            n.getChild(0).isVar() && n.getChild(1).isVar()) {
                this.selectedI[this.selectedPoint] = iTable.iSearch(symbol);
                this.levelSelection[this.selectedPoint] = n.getLevel();
                ++this.selectedPoint;
                return;
            } else if (// If first child is var and the second an oper
            n.getChild(0).isVar() && n.getChild(1).isOper()) {
                if (// If the sequence is completed on the next levels
                analiseNode(n.getChild(1), symbol, 1)) {
                    return;
                } else // If there isn't a sequence
                {
                    this.selectedI[this.selectedPoint] = iTable.iSearch(symbol);
                    this.levelSelection[this.selectedPoint] = n.getLevel();
                    ++this.selectedPoint;
                    analiseNode(n.getChild(1));
                    return;
                }
            } else if (n.getChild(0).isOper()) {
                if (// If the sequence is completed on the next levels
                analiseNode(n.getChild(0), symbol, 1)) {
                    analiseNode(n.getChild(1));
                    return;
                } else // If there isn't a sequence on the first child
                {
                    if (// Search a sequence on the second child
                    analiseNode(n.getChild(1), symbol, 1)) {
                        if (// If the first child is an oper and didn't succeeded finding a sequence
                        n.getChild(0).isOper()) {
                            analiseNode(n.getChild(0));
                        }
                        return;
                    } else // If there isn't a sequence
                    {
                        this.selectedI[this.selectedPoint] = iTable.iSearch(symbol);
                        this.levelSelection[this.selectedPoint] = n.getLevel();
                        ++this.selectedPoint;
                        analiseNode(n.getChild(0));
                        analiseNode(n.getChild(1));
                        return;
                    }
                }
            }
        } else if (// If the value is not valid
        this.iArrSize(valid) < 1) {
            String[] err = { "ERR" };
            // ERROR
            Instruction ERR = new Instruction("ERROR", -1, err);
            this.selectedI[this.selectedPoint] = ERR;
            this.levelSelection[this.selectedPoint] = n.getLevel();
            ++selectedPoint;
            return;
        }
    } else if (// If the node is a var
    n.isVar()) {
        if (// It cannot have childs
        n.hasChilds()) {
            String[] err = { "ERR" };
            // ERROR
            Instruction ERR = new Instruction("ERROR", -1, err);
            this.selectedI[this.selectedPoint] = ERR;
            this.levelSelection[this.selectedPoint] = n.getLevel();
            ++selectedPoint;
        }
        // It's the end of the branch.
        return;
    }
}
