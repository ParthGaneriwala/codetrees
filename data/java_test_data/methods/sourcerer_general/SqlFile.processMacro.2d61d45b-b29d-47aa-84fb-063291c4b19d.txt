private void processMacro(Token defToken) throws BadSpecial {
    Matcher matcher;
    Token macroToken;
    if (defToken.val.length() < 1) {
        throw new BadSpecial(SqltoolRB.macro_tip.getString());
    }
    switch(defToken.val.charAt(0)) {
        case '?':
            stdprintln(SqltoolRB.macro_help.getString());
            break;
        case '=':
            String defString = defToken.val;
            defString = defString.substring(1).trim();
            if (defString.length() < 1) {
                for (Map.Entry<String, Token> entry : shared.macros.entrySet()) {
                    stdprintln(entry.getKey() + " = " + entry.getValue().reconstitute());
                }
                break;
            }
            int newType = -1;
            StringBuffer newVal = new StringBuffer();
            matcher = editMacroPattern.matcher(defString);
            if (matcher.matches()) {
                if (buffer == null) {
                    stdprintln(nobufferYetString);
                    return;
                }
                newVal.append(buffer.val);
                if (matcher.groupCount() > 1 && matcher.group(2) != null && matcher.group(2).length() > 0)
                    newVal.append(matcher.group(2));
                newType = buffer.type;
            } else {
                matcher = spMacroPattern.matcher(defString);
                if (matcher.matches()) {
                    newVal.append(matcher.group(3));
                    newType = (matcher.group(2).equals("*") ? Token.PL_TYPE : Token.SPECIAL_TYPE);
                } else {
                    matcher = sqlMacroPattern.matcher(defString);
                    if (!matcher.matches())
                        throw new BadSpecial(SqltoolRB.macro_malformat.getString());
                    newVal.append(matcher.group(2));
                    newType = Token.SQL_TYPE;
                }
            }
            if (newVal.length() < 1)
                throw new BadSpecial(SqltoolRB.macrodef_empty.getString());
            if (newVal.charAt(newVal.length() - 1) == ';')
                throw new BadSpecial(SqltoolRB.macrodef_semi.getString());
            shared.macros.put(matcher.group(1), new Token(newType, newVal, defToken.line));
            break;
        default:
            matcher = useMacroPattern.matcher(defToken.val);
            if (!matcher.matches())
                throw new BadSpecial(SqltoolRB.macro_malformat.getString());
            macroToken = shared.macros.get(matcher.group(1));
            if (macroToken == null)
                throw new BadSpecial(SqltoolRB.macro_undefined.getString(matcher.group(1)));
            setBuf(macroToken);
            buffer.line = defToken.line;
            if (matcher.groupCount() > 1 && matcher.group(2) != null && matcher.group(2).length() > 0)
                buffer.val += matcher.group(2);
            preempt = matcher.group(matcher.groupCount()).equals(";");
    }
}
