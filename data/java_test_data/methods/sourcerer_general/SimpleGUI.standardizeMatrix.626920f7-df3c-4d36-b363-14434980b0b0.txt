public ClassedArray[] standardizeMatrix(ClassedArray[] in) {
    // this is not in DissUtils because I want access to the means and standard deviations later, too.
    ClassedArray[] out = new ClassedArray[in.length];
    means = new double[in[0].getArray().length];
    stdevs = new double[in[0].getArray().length];
    // if the mean is within tolerance of 0 and the standard deviation is within tolerance of 1, then assume it's already standardized.
    double tolerance = 0.001;
    // compute means
    double[] sums = new double[means.length];
    for (int i = 0; i < in.length; i++) {
        double[] snuh = in[i].getArray();
        for (int j = 0; j < snuh.length; j++) {
            sums[j] = sums[j] + snuh[j];
        }
    }
    for (int k = 0; k < means.length; k++) {
        means[k] = sums[k] / in.length;
    }
    // compute stdevs
    Arrays.fill(sums, 0);
    for (int i = 0; i < in.length; i++) {
        double[] snuh = in[i].getArray();
        for (int j = 0; j < snuh.length; j++) {
            sums[j] = sums[j] + ((snuh[j] - means[j]) * (snuh[j] - means[j]));
        }
    }
    for (int k = 0; k < stdevs.length; k++) {
        stdevs[k] = Math.sqrt(sums[k] / in.length);
    }
    // compute standardized values (if needed)
    double[][] matrix = new double[in.length][means.length];
    for (int i = 0; i < means.length; i++) {
        boolean standardized = (Math.abs(means[i]) > tolerance) && (Math.abs(stdevs[i] - 1) > tolerance);
        for (int j = 0; j < in.length; j++) {
            if (standardized) {
                matrix[j][i] = in[j].getArray()[i];
            } else {
                matrix[j][i] = (in[j].getArray()[i] - means[i]) / stdevs[i];
            }
        }
    }
    for (int k = 0; k < in.length; k++) {
        ClassedArray ca = new ClassedArray();
        ca.setArray(matrix[k]);
        ca.setKlass(in[k].getKlass());
        out[k] = ca;
    }
    return out;
}
