public void testListBuiltins() {
    String ruleSrc = "[(a r ?n) <- (a p ?l), listLength(?l, ?n)]" + "[(a s ?e) <- (a p ?l), listEntry(?l, 1, ?e)]";
    List rules = Rule.parseRules(ruleSrc);
    Graph data = Factory.createGraphMem();
    data.add(new Triple(a, p, Util.makeList(new Node[] { C1, C2, C3 }, data)));
    InfGraph infgraph = makeInfGraph(rules, data);
    TestUtil.assertIteratorValues(this, infgraph.find(new Triple(a, r, Node.ANY)), new Triple[] { new Triple(a, r, Util.makeIntNode(3)) });
    TestUtil.assertIteratorValues(this, infgraph.find(new Triple(a, s, Node.ANY)), new Triple[] { new Triple(a, s, C2) });
    rules = Rule.parseRules("[(a s b) <- (a p ?l), (a, q, ?j) listEqual(?l, ?j)]" + "[(a s c) <- (a p ?l), (a, q, ?j) listNotEqual(?l, ?j)]" + "[(a s d) <- (a p ?l), (a, r, ?j) listEqual(?l, ?j)]" + "[(a s e) <- (a p ?l), (a, r, ?j) listNotEqual(?l, ?j)]");
    data = Factory.createGraphMem();
    data.add(new Triple(a, p, Util.makeList(new Node[] { C1, Util.makeIntNode(3), C3 }, data)));
    data.add(new Triple(a, q, Util.makeList(new Node[] { C3, C1, Util.makeLongNode(3) }, data)));
    data.add(new Triple(a, r, Util.makeList(new Node[] { C3, C1, Util.makeLongNode(2) }, data)));
    infgraph = makeInfGraph(rules, data);
    TestUtil.assertIteratorValues(this, infgraph.find(new Triple(a, s, Node.ANY)), new Triple[] { new Triple(a, s, b), new Triple(a, s, e) });
    rules = Rule.parseRules("[(b r ?j) <- (a p ?l), (a, q, ?j) listContains(?l, ?j)]" + "[(b s ?j) <- (a p ?l), (a, q, ?j) listNotContains(?l, ?j)]");
    data = Factory.createGraphMem();
    data.add(new Triple(a, p, Util.makeList(new Node[] { C1, Util.makeIntNode(3), C3 }, data)));
    data.add(new Triple(a, q, C1));
    data.add(new Triple(a, q, Util.makeLongNode(3)));
    ;
    data.add(new Triple(a, q, C2));
    infgraph = makeInfGraph(rules, data);
    TestUtil.assertIteratorValues(this, infgraph.find(new Triple(b, Node.ANY, Node.ANY)), new Triple[] { new Triple(b, r, C1), new Triple(b, r, Util.makeIntNode(3)), new Triple(b, s, C2) });
}
