protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
    // establish CORBA connection
    try {
        // get CORBA client parameters from web.xml
        String params = getServletContext().getInitParameter("params");
        String[] args = params.split("  *");
        // create and initialize the ORB
        ORB orb = ORB.init(args, null);
        // get the root naming context
        org.omg.CORBA.Object objRef = orb.resolve_initial_references("NameService");
        // Use NamingContextExt instead of NamingContext. This is
        // part of the Interoperable naming Service.
        NamingContextExt ncRef = NamingContextExtHelper.narrow(objRef);
        // resolve the Object Reference in Naming
        String name = "BusinessLogic";
        businessLogic = BusinessLogicHelper.narrow(ncRef.resolve_str(name));
        System.out.println("Obtained a handle on server object: " + businessLogic);
    } catch (Exception e) {
        System.out.println("ERROR : " + e);
        e.printStackTrace(System.out);
    }
    try {
        // get inputs from the user
        int orderId = Integer.parseInt(request.getParameter("orderId"));
        String result = businessLogic.track(orderId);
        // notify that the order was placed
        response.setContentType("text/html");
        PrintWriter out = response.getWriter();
        out.println("<h2> Your order status: </h2>");
        if (result.equals("NEW")) {
            out.println("Not yet picked up");
        } else if (result.equals("DELIVERED")) {
            out.println("Your order was delivered");
        } else {
            out.println("In transit, current location: " + result);
        }
    } catch (Exception e) {
        // in case of invalid inputs
        PrintWriter out = response.getWriter();
        out.println("Check for invalid inputs");
    }
}
