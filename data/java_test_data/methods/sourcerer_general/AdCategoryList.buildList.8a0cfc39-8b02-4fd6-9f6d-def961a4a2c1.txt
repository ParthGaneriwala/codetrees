public void buildList(Connection db) throws SQLException {
    PreparedStatement pst = null;
    ResultSet rs = null;
    int items = -1;
    StringBuffer sqlSelect = new StringBuffer();
    StringBuffer sqlCount = new StringBuffer();
    StringBuffer sqlFilter = new StringBuffer();
    StringBuffer sqlOrder = new StringBuffer();
    // Need to build a base SQL statement for counting records
    sqlCount.append("SELECT COUNT(*) AS recordcount " + "FROM ad_category ac " + "LEFT JOIN lookup_project_category lpc ON (lpc.code = ac.project_category_id) " + "WHERE ac.code > -1 ");
    createFilter(db, sqlFilter);
    if (pagedListInfo == null) {
        pagedListInfo = new PagedListInfo();
        pagedListInfo.setItemsPerPage(0);
    }
    // Get the total number of records matching filter
    pst = db.prepareStatement(sqlCount.toString() + sqlFilter.toString());
    items = prepareFilter(pst);
    rs = pst.executeQuery();
    if (rs.next()) {
        int maxRecords = rs.getInt("recordcount");
        pagedListInfo.setMaxRecords(maxRecords);
    }
    rs.close();
    pst.close();
    // Determine the offset, based on the filter, for the first record to show
    if (!pagedListInfo.getCurrentLetter().equals("")) {
        pst = db.prepareStatement(sqlCount.toString() + sqlFilter.toString() + "AND lower(item_name) < ? ");
        items = prepareFilter(pst);
        pst.setString(++items, pagedListInfo.getCurrentLetter().toLowerCase());
        rs = pst.executeQuery();
        if (rs.next()) {
            int offsetCount = rs.getInt("recordcount");
            pagedListInfo.setCurrentOffset(offsetCount);
        }
        rs.close();
        pst.close();
    }
    // Determine column to sort by
    pagedListInfo.setDefaultSort("lpc.description,level,item_name", null);
    pagedListInfo.appendSqlTail(db, sqlOrder);
    // Need to build a base SQL statement for returning records
    pagedListInfo.appendSqlSelectHead(db, sqlSelect);
    sqlSelect.append("ac.*, lpc.description " + "FROM ad_category ac " + "LEFT JOIN lookup_project_category lpc ON (lpc.code = ac.project_category_id) " + "WHERE ac.code > -1 ");
    pst = db.prepareStatement(sqlSelect.toString() + sqlFilter.toString() + sqlOrder.toString());
    items = prepareFilter(pst);
    rs = pst.executeQuery();
    if (pagedListInfo != null) {
        pagedListInfo.doManualOffset(db, rs);
    }
    int count = 0;
    while (rs.next()) {
        if (pagedListInfo != null && pagedListInfo.getItemsPerPage() > 0 && DatabaseUtils.getType(db) == DatabaseUtils.MSSQL && count >= pagedListInfo.getItemsPerPage()) {
            break;
        }
        ++count;
        AdCategory thisAdCategory = new AdCategory(rs);
        this.add(thisAdCategory);
    }
    rs.close();
    pst.close();
    if (buildLogos) {
        buildLogos(db);
    }
}
