// $ANTLR start "list_expression"
public final Compila_doresParser.list_expression_return list_expression() throws RecognitionException {
    Compila_doresParser.list_expression_return retval = new Compila_doresParser.list_expression_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token COMMA127 = null;
    Compila_doresParser.expression_return expression126 = null;
    Compila_doresParser.expression_return expression128 = null;
    CommonTree COMMA127_tree = null;
    try {
        // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:207:2: ( expression ( COMMA expression )* )
        // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:207:4: expression ( COMMA expression )*
        {
            root_0 = (CommonTree) adaptor.nil();
            pushFollow(FOLLOW_expression_in_list_expression1414);
            expression126 = expression();
            state._fsp--;
            adaptor.addChild(root_0, expression126.getTree());
            // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:207:15: ( COMMA expression )*
            loop30: do {
                int alt30 = 2;
                int LA30_0 = input.LA(1);
                if ((LA30_0 == COMMA)) {
                    alt30 = 1;
                }
                switch(alt30) {
                    case 1:
                        // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:207:16: COMMA expression
                        {
                            COMMA127 = (Token) match(input, COMMA, FOLLOW_COMMA_in_list_expression1417);
                            pushFollow(FOLLOW_expression_in_list_expression1420);
                            expression128 = expression();
                            state._fsp--;
                            adaptor.addChild(root_0, expression128.getTree());
                        }
                        break;
                    default:
                        break loop30;
                }
            } while (true);
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
