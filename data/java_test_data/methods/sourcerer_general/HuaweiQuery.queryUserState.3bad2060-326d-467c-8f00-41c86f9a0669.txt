public MobileApnState queryUserState(String sgsnid, String msisdn, String random) {
    MobileApnState state = new MobileApnState();
    state.setMobile(msisdn);
    state.setSgsnid(sgsnid);
    state.setStatus("noattch");
    list.clear();
    // 加入到命令输出列表中,定时显示到浏览器上
    SHQueryService.QUERY_RESULT.put(msisdn + "," + random, list);
    try {
        SubscriberData subdata = this.queryHuaweiSubData(sgsnid, msisdn, random);
        state.setSubdata(subdata);
        state.setStatus(subdata.getMobilityState());
        if (subdata.getMobilityState() != null && !subdata.getMobilityState().equals("noattach")) {
            List<SubscribedPDP> subpdps = this.queryHuaweiSubPdps(sgsnid, msisdn, random, subdata.getImsi());
            for (SubscribedPDP pdp : subpdps) {
                state.addSubpdp(pdp);
                if (pdp.getIsused()) {
                    // 得到激活的apn的数据
                    ActiveApn aa = this.queryHuaweiActiveApn(sgsnid, msisdn, random, subdata.getImsi(), pdp.getId());
                    state.setActiveapn(aa);
                }
            }
        }
        SHQueryService.QUERY_RESULT.get(msisdn + "," + random).add("isover");
    } catch (Exception e) {
        _LOG.error("华为状态有误:", e);
        state.setHasexception(true);
        java.io.Writer sw = new java.io.StringWriter();
        try {
            java.io.PrintWriter pw = new java.io.PrintWriter(sw, true);
            e.printStackTrace(pw);
            pw.flush();
            pw.close();
            sw.flush();
            sw.close();
            String s = sw.toString();
            if (s.length() > 2000)
                state.setException(s.substring(0, 2000));
            else
                state.setException(sw.toString());
        } catch (Exception ee) {
            _LOG.error("关闭StringWriter有误", ee);
        }
    }
    state.toWebString();
    return state;
}
