// this method is inaccesible. It will read a portion of the
// database file and create a new Object or an integer depending
// on what the next field is, which is identified by the number of
// the byte - which itself is given in the EntryContentConstants
// interface. Please do NOT edit this method! Nasty things will
private void readEntry() throws IOException {
    Integer intA;
    int t1 = 0, t2 = 0;
    boolean found = false;
    while (!found) {
        t1 = buff.read();
        if (t1 != 0) {
            found = true;
        }
    }
    switch(t1) {
        case entryContentEmpty:
            // do nuffin, There are no additional bytes
            Object empty = new Object();
            entryList.addElement(empty);
            break;
        case entryContentInteger:
            // a very complicated piece of code, to construct
            // an integer from two bytes. It means constructing
            // a binary representation in two Strings, then
            // calculating the binary value and storing it as a
            // integer. Very nasty. Very messy. Do NOT edit!
            byte b1 = (byte) buff.read();
            byte b2 = (byte) buff.read();
            String binar = "";
            if ((b1 < 0) & (b2 == 0)) {
                String tmpStr = Integer.toBinaryString((int) b1);
                binar = tmpStr.substring(tmpStr.length() - 8);
            } else {
                if (b1 < 0) {
                    String tmpStr = Integer.toBinaryString((int) b2);
                    binar = tmpStr;
                    tmpStr = Integer.toBinaryString((int) b1);
                    binar += tmpStr.substring(tmpStr.length() - 8);
                } else {
                    if (b2 == 0) {
                        binar = Integer.toBinaryString((int) b1);
                    } else {
                        binar = Integer.toBinaryString((int) b1);
                        int len = binar.length();
                        int leadingZeros = 8 - len;
                        for (int i = 0; i < leadingZeros; i++) {
                            binar = "0" + binar;
                        }
                        binar = Integer.toBinaryString((int) b2) + binar;
                    }
                }
            }
            int realInt = 0;
            int multiplier = 1;
            for (int i = (binar.length() - 1); i >= 0; i--) {
                if (binar.charAt(i) == '1') {
                    realInt += multiplier;
                }
                multiplier = multiplier * 2;
            }
            intA = new Integer(realInt);
            entryList.addElement(intA);
            break;
        case entryContentString:
            boolean done = false;
            String str = "";
            do {
                int c1 = buff.read();
                int c2 = buff.read();
                if (c1 == 0) {
                    done = true;
                } else {
                    char ch = (char) c1;
                    str += ch;
                }
            } while (!done);
            entryList.addElement(str);
            break;
        case entryContentBoolean:
            Boolean bool;
            int boolI = buff.read();
            if (boolI == 1) {
                bool = new Boolean(true);
            } else {
                bool = new Boolean(false);
            }
            entryList.addElement(bool);
            break;
        case entryContentByte:
            int byte1 = buff.read();
            intA = new Integer(byte1);
            entryList.addElement(intA);
            break;
    }
}
