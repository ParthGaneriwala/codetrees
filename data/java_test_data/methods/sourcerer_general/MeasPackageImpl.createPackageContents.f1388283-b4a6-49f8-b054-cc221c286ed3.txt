public void createPackageContents() {
    if (isCreated)
        return;
    isCreated = true;
    // Create classes and their features
    accumulatorEClass = createEClass(ACCUMULATOR);
    createEReference(accumulatorEClass, ACCUMULATOR__MAX_VALUE);
    measurementEClass = createEClass(MEASUREMENT);
    createEReference(measurementEClass, MEASUREMENT__MEASUREMENT_TYPE);
    createEAttribute(measurementEClass, MEASUREMENT__UNIT_MULTIPLIER);
    createEAttribute(measurementEClass, MEASUREMENT__UNIT_SYMBOL);
    accumulatorLimitEClass = createEClass(ACCUMULATOR_LIMIT);
    createEReference(accumulatorLimitEClass, ACCUMULATOR_LIMIT__VALUE);
    limitEClass = createEClass(LIMIT);
    accumulatorLimitSetEClass = createEClass(ACCUMULATOR_LIMIT_SET);
    limitSetEClass = createEClass(LIMIT_SET);
    createEReference(limitSetEClass, LIMIT_SET__IS_PERCENTAGE_LIMITS);
    accumulatorValueEClass = createEClass(ACCUMULATOR_VALUE);
    createEReference(accumulatorValueEClass, ACCUMULATOR_VALUE__VALUE);
    measurementValueEClass = createEClass(MEASUREMENT_VALUE);
    createEReference(measurementValueEClass, MEASUREMENT_VALUE__SENSOR_ACCURACY);
    createEReference(measurementValueEClass, MEASUREMENT_VALUE__TIME_STAMP);
    analogEClass = createEClass(ANALOG);
    createEReference(analogEClass, ANALOG__MAX_VALUE);
    createEReference(analogEClass, ANALOG__MIN_VALUE);
    createEReference(analogEClass, ANALOG__NORMAL_VALUE);
    createEReference(analogEClass, ANALOG__POSITIVE_FLOW_IN);
    analogLimitEClass = createEClass(ANALOG_LIMIT);
    createEReference(analogLimitEClass, ANALOG_LIMIT__VALUE);
    analogLimitSetEClass = createEClass(ANALOG_LIMIT_SET);
    analogValueEClass = createEClass(ANALOG_VALUE);
    createEReference(analogValueEClass, ANALOG_VALUE__VALUE);
    commandEClass = createEClass(COMMAND);
    createEReference(commandEClass, COMMAND__NORMAL_VALUE);
    createEReference(commandEClass, COMMAND__VALUE);
    controlEClass = createEClass(CONTROL);
    createEReference(controlEClass, CONTROL__OPERATION_IN_PROGRESS);
    createEReference(controlEClass, CONTROL__TIME_STAMP);
    createEAttribute(controlEClass, CONTROL__UNIT_MULTIPLIER);
    createEAttribute(controlEClass, CONTROL__UNIT_SYMBOL);
    controlTypeEClass = createEClass(CONTROL_TYPE);
    currentTransformerEClass = createEClass(CURRENT_TRANSFORMER);
    createEReference(currentTransformerEClass, CURRENT_TRANSFORMER__ACCURACY_CLASS);
    createEReference(currentTransformerEClass, CURRENT_TRANSFORMER__ACCURACY_LIMIT);
    createEReference(currentTransformerEClass, CURRENT_TRANSFORMER__CORE_COUNT);
    createEReference(currentTransformerEClass, CURRENT_TRANSFORMER__CT_CLASS);
    createEReference(currentTransformerEClass, CURRENT_TRANSFORMER__MAX_RATIO);
    createEReference(currentTransformerEClass, CURRENT_TRANSFORMER__USAGE);
    discreteEClass = createEClass(DISCRETE);
    createEReference(discreteEClass, DISCRETE__MAX_VALUE);
    createEReference(discreteEClass, DISCRETE__MIN_VALUE);
    createEReference(discreteEClass, DISCRETE__NORMAL_VALUE);
    discreteValueEClass = createEClass(DISCRETE_VALUE);
    createEReference(discreteValueEClass, DISCRETE_VALUE__VALUE);
    measurementValueQualityEClass = createEClass(MEASUREMENT_VALUE_QUALITY);
    quality61850EClass = createEClass(QUALITY61850);
    createEReference(quality61850EClass, QUALITY61850__BAD_REFERENCE);
    createEReference(quality61850EClass, QUALITY61850__ESTIMATOR_REPLACED);
    createEReference(quality61850EClass, QUALITY61850__FAILURE);
    createEReference(quality61850EClass, QUALITY61850__OLD_DATA);
    createEReference(quality61850EClass, QUALITY61850__OPERATOR_BLOCKED);
    createEReference(quality61850EClass, QUALITY61850__OSCILLATORY);
    createEReference(quality61850EClass, QUALITY61850__OUT_OF_RANGE);
    createEReference(quality61850EClass, QUALITY61850__OVER_FLOW);
    createEAttribute(quality61850EClass, QUALITY61850__SOURCE);
    createEReference(quality61850EClass, QUALITY61850__SUSPECT);
    createEReference(quality61850EClass, QUALITY61850__TEST);
    createEAttribute(quality61850EClass, QUALITY61850__VALIDITY);
    measurementValueSourceEClass = createEClass(MEASUREMENT_VALUE_SOURCE);
    potentialTransformerEClass = createEClass(POTENTIAL_TRANSFORMER);
    createEReference(potentialTransformerEClass, POTENTIAL_TRANSFORMER__ACCURACY_CLASS);
    createEReference(potentialTransformerEClass, POTENTIAL_TRANSFORMER__NOMINAL_RATIO);
    createEReference(potentialTransformerEClass, POTENTIAL_TRANSFORMER__PT_CLASS);
    setPointEClass = createEClass(SET_POINT);
    createEReference(setPointEClass, SET_POINT__MAX_VALUE);
    createEReference(setPointEClass, SET_POINT__MIN_VALUE);
    createEReference(setPointEClass, SET_POINT__NORMAL_VALUE);
    createEReference(setPointEClass, SET_POINT__VALUE);
    stringMeasurementEClass = createEClass(STRING_MEASUREMENT);
    stringMeasurementValueEClass = createEClass(STRING_MEASUREMENT_VALUE);
    createEReference(stringMeasurementValueEClass, STRING_MEASUREMENT_VALUE__VALUE);
    valueAliasSetEClass = createEClass(VALUE_ALIAS_SET);
    valueToAliasEClass = createEClass(VALUE_TO_ALIAS);
    createEReference(valueToAliasEClass, VALUE_TO_ALIAS__VALUE);
    // Create enums
    validityEEnum = createEEnum(VALIDITY);
}
