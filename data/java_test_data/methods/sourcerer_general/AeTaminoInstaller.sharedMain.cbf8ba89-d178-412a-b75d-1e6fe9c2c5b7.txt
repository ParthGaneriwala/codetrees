protected static void sharedMain(String[] aArgs, Class aInstallerClass) {
    try {
        Map params = new HashMap();
        // $NON-NLS-1$
        Pattern p = Pattern.compile("-([^=]+)=(.*)");
        for (int i = 0; i < aArgs.length; i++) {
            String param = aArgs[i];
            Matcher m = p.matcher(param);
            if (m.matches()) {
                String key = m.group(1);
                String val = m.group(2);
                key = (String) sKeyLookup.get(key);
                if (key != null) {
                    params.put(key, val);
                }
            }
        }
        // $NON-NLS-1$ //$NON-NLS-2$
        sVerbose = "true".equals(params.get("_Verbose_"));
        // $NON-NLS-1$
        String schemaPath = (String) params.get("_Schema_");
        if (schemaPath == null) {
            // $NON-NLS-1$
            throw new AeException(AeMessages.getString("AeTaminoInstaller.NO_SCHEMA_PATH_FOUND_ERROR"));
        }
        File schemaFile = new File(schemaPath);
        if (!schemaFile.isFile())
            // $NON-NLS-1$
            throw new AeException(AeMessages.getString("AeTaminoInstaller.COULD_NOT_FIND_FILE_ERROR") + schemaPath);
        AeTaminoSchema schema = new AeTaminoSchema(schemaFile);
        // $NON-NLS-1$
        params.put("Collection", schema.getCollectionName());
        AeTaminoConfig config = new AeTaminoConfig(Collections.EMPTY_MAP);
        AeTaminoDataSource.MAIN = new AeTaminoDataSource(params);
        AeXMLDBPerformanceLogger.init(null);
        Constructor ctor = aInstallerClass.getConstructor(new Class[] { AeTaminoSchema.class, AeTaminoConfig.class, Map.class, IAeXMLDBStorageImpl.class });
        Object[] ctorArgs = new Object[] { schema, config, params, new AeTaminoStorageImpl(AeTaminoDataSource.MAIN) };
        AeTaminoInstaller installer = (AeTaminoInstaller) ctor.newInstance(ctorArgs);
        // $NON-NLS-1$ //$NON-NLS-2$
        installer.install("true".equals(params.get("_Drop_")));
    } catch (Throwable t) {
        t.printStackTrace();
    }
}
