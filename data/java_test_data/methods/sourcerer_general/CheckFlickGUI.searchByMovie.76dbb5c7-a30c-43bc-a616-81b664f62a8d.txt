protected static void searchByMovie() {
    // disposing all composites
    cleanAllComposites();
    searchByMovie = new Composite(shell.getShell(), SWT.BORDER);
    Calendar toDay = Calendar.getInstance();
    final int year = toDay.get(Calendar.YEAR);
    searchByMovie.setLocation(2, 145);
    searchByMovie.setLayout(new FillLayout());
    if ((bar != null) && !(bar.isDisposed()))
        bar.dispose();
    bar = new ExpandBar(searchByMovie, SWT.V_SCROLL);
    bar.setBackground(new Color(display, 177, 200, 231));
    Image image = ImageCache.getImage("search_48.png");
    Color frontColor = new Color(display, 222, 235, 247);
    // Main item
    final Composite composite = new Composite(bar, SWT.NONE);
    composite.setBackground(frontColor);
    GridLayout layout = new GridLayout(7, false);
    layout.marginLeft = layout.marginTop = layout.marginRight = layout.marginBottom = 5;
    layout.verticalSpacing = 10;
    composite.setLayout(layout);
    Label label = new Label(composite, SWT.NONE);
    label.setText("Movie Name");
    label.setBackground(frontColor);
    final Button checkWildCard = new Button(composite, SWT.CHECK);
    checkWildCard.setText("Wildcard");
    checkWildCard.setSelection(true);
    checkWildCard.setBackground(frontColor);
    final Text nameText = new Text(composite, SWT.SINGLE | SWT.FILL | SWT.BORDER);
    label = new Label(composite, SWT.NONE);
    label.setText("Movie Year	From");
    label.setBackground(frontColor);
    final Spinner yearFrom = new Spinner(composite, SWT.BORDER);
    yearFrom.setMinimum(1880);
    yearFrom.setMaximum(year + 100);
    yearFrom.setSelection(1880);
    yearFrom.setPageIncrement(1);
    yearFrom.pack();
    label = new Label(composite, SWT.NONE);
    label.setText("To");
    label.setBackground(frontColor);
    final Spinner yearTo = new Spinner(composite, SWT.BORDER);
    yearTo.setMinimum(1880);
    yearTo.setMaximum(year + 100);
    yearTo.setSelection(year + 100);
    yearTo.setPageIncrement(1);
    yearTo.pack();
    Label movieGenres = new Label(composite, SWT.NONE);
    movieGenres.setText("Movie Genre");
    movieGenres.setBackground(frontColor);
    final Combo genresCombo = new Combo(composite, SWT.READ_ONLY);
    String[] genresString = new String[genresList.size() + 1];
    genresString[0] = "";
    for (int i = 0; i < genresList.size(); i++) {
        genresString[i + 1] = genresList.get(i).getName();
    }
    genresCombo.setItems(genresString);
    label = new Label(composite, SWT.NONE);
    label.setText("Movie Language");
    label.setBackground(frontColor);
    final Combo langCombo = new Combo(composite, SWT.READ_ONLY);
    String[] langString = new String[langList.size() + 1];
    langString[0] = "";
    for (int i = 0; i < langList.size(); i++) {
        langString[i + 1] = langList.get(i).getName();
    }
    langCombo.setItems(langString);
    GridData gridData = new GridData();
    gridData.horizontalAlignment = GridData.FILL;
    gridData.horizontalSpan = 4;
    langCombo.setLayoutData(gridData);
    Button button = new Button(composite, SWT.PUSH);
    button.setText("Search");
    ExpandItem item0 = new ExpandItem(bar, SWT.NONE, 0);
    item0.setText("Search for movie");
    item0.setHeight(composite.computeSize(SWT.DEFAULT, SWT.DEFAULT).y);
    item0.setControl(composite);
    item0.setImage(image);
    button.setBackground(frontColor);
    item0.setExpanded(true);
    bar.setSpacing(8);
    searchByMovie.setSize((shell.getShell().getSize().x) - 5, (shell.getShell().getSize().y) / 3);
    // listener for the search button
    button.addSelectionListener(new SelectionListener() {

        public void widgetDefaultSelected(SelectionEvent e) {
        }

        public void widgetSelected(SelectionEvent e) {
            // creating the filter to search by
            List<AbsFilter> list = new ArrayList<AbsFilter>();
            ;
            if (nameText.getText() != "" && nameText.getText().length() > 0) {
                // Search without wildcard
                if (checkWildCard.getSelection())
                    list.add(dm.getFilter(SearchEntitiesEnum.MOVIE_NAME_WILDCARD, nameText.getText()));
                else
                    list.add(dm.getFilter(SearchEntitiesEnum.MOVIE_NAME, nameText.getText()));
            }
            if (genresCombo.getText() != "") {
                list.add(dm.getFilter(SearchEntitiesEnum.MOVIE_GENRE, getID(genresList, genresCombo.getText())));
            }
            if (langCombo.getText() != "") {
                list.add(dm.getFilter(SearchEntitiesEnum.MOVIE_LANGUAGES, getID(langList, langCombo.getText())));
            }
            // search by year only if the years parameters were changed
            if ((Integer.parseInt(yearFrom.getText()) != 1880) || ((Integer.parseInt(yearTo.getText()) != (year + 100))))
                list.add(dm.getFilter(SearchEntitiesEnum.MOVIE_YEAR, yearFrom.getText(), yearTo.getText()));
            // Change the tab name to searching
            shell.getRibbonTabFolder().getTabs().get(0).setName("Busy");
            shell.redrawContents();
            // search for movies
            try {
                pool.execute(DataManager.search(SearchEntitiesEnum.MOVIES, list));
            } catch (InterruptedException e1) {
                e1.printStackTrace();
            }
        }
    });
}
