@RequestMapping(value = "/search.html", method = RequestMethod.POST)
public String searchPost(@RequestParam(value = "ln", required = false) String name, @RequestParam(value = Parameter_Days, required = false) String days, @RequestParam(value = Parameter_ReturnNum, required = false) String returnNum, @RequestParam(value = Parameter_PageNo, required = false) String pageNo, ModelMap model) {
    // 链接名称
    name = StringUtils.trimToEmpty(name);
    // 查询时间范围，默认为1天之内
    int ds = 1;
    if (NumberUtils.isDigits(days)) {
        ds = Integer.valueOf(days);
    }
    // 计算查询最热门链接的开始日期
    Date startDate = null;
    if (ds != 0) {
        startDate = DateUtils.addDays(new Date(), 0 - ds);
    }
    // 返回数目
    int rn = Page.EVERY_PAGE_30;
    if (NumberUtils.isDigits(returnNum)) {
        rn = Integer.valueOf(returnNum);
    }
    // 翻页页码
    if (StringUtils.isEmpty(pageNo) || !NumberUtils.isDigits(pageNo)) {
        pageNo = "1";
    }
    // 计算分页
    Page page = null;
    int count = searchService.countLinksForFront(name, startDate, null);
    if (count > rn) {
        // 需要分页
        page = PageUtils.createPage(Integer.valueOf(pageNo), rn, count);
        String name_encode = "";
        try {
            name_encode = URLEncoder.encode(name, "UTF-8");
        } catch (UnsupportedEncodingException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        StringBuffer url = new StringBuffer("search.html?ln=").append(name_encode).append("&ds=").append(ds).append("&rn=").append(rn).append("&pn=");
        // 链接名称
        page.setUrl(url.toString());
        model.addAttribute(Return_Page, page);
    }
    // 结果
    model.addAttribute(Return_HotLinks, searchService.getHotLinksForFront(name, startDate, null, page));
    // 最新热门关键词
    model.addAttribute(Return_Keywords, searchService.getKeywords(10));
    // 返回查询链接名称
    model.addAttribute("ln", name);
    // 返回查询范围参数
    model.addAttribute(Parameter_Days, ds);
    // 查询记录数
    model.addAttribute(Return_TotalRecords, count);
    // 查询范围的url
    model.addAttribute(Return_Url_For_Date, "search.html?ln=" + name + "&ds=");
    return "search";
}
