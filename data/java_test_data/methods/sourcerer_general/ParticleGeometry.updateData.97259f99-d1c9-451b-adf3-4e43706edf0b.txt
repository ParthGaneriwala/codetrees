// documentation inherited
@Override
protected void updateData() {
    // get everything in local variables
    Particle[] particles = _particles;
    float[] data = _data;
    int stride = _stride;
    int segments = _segments;
    Vector3f position = _position, n = _n;
    boolean normals = (_normalOffset >= 0);
    // figure out the texture coordinate parameters
    int udivs = _config.textureDivisionsS;
    float uscale = 1f / udivs;
    float vscale = 1f / _config.textureDivisionsT;
    // update the living particles
    float tscale = 1f / segments;
    int texCoordIdx = _texCoordOffset;
    int colorIdx = _colorOffset;
    int normalIdx = _normalOffset;
    int vertexIdx = _vertexOffset;
    for (int ii = 0, nn = _living.value; ii < nn; ii++) {
        Particle particle = particles[ii];
        // determine the texture coordinate offsets
        int frame = FloatMath.round(particle.getFrame());
        float uoff = (frame % udivs) * uscale, voff = (frame / udivs) * vscale;
        // extract the color
        Color4f color = particle.getColor();
        float cr = color.r, cg = color.g, cb = color.b, ca = color.a;
        // write the initial segments, then the final one
        if (normals) {
            particle.getOrientation().transformUnitZ(n);
            float nx = n.x, ny = n.y, nz = n.z;
            for (int jj = 0; jj <= segments; jj++) {
                float frac = jj * tscale;
                particle.getPosition(frac, position);
                texCoordIdx = write(data, texCoordIdx, stride, uoff + frac * uscale, voff);
                colorIdx = write(data, colorIdx, stride, cr, cg, cb, ca);
                normalIdx = write(data, normalIdx, stride, nx, ny, nz);
                vertexIdx = write(data, vertexIdx, stride, position);
            }
        } else {
            for (int jj = 0; jj <= segments; jj++) {
                float frac = jj * tscale;
                particle.getPosition(frac, position);
                texCoordIdx = write(data, texCoordIdx, stride, uoff + frac * uscale, voff);
                colorIdx = write(data, colorIdx, stride, cr, cg, cb, ca);
                vertexIdx = write(data, vertexIdx, stride, position);
            }
        }
    }
}
