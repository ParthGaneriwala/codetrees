/**
 * 批量删除前的校验
 *
 * @ param: HttpServletRequest request
 * @ param: ValidatedResult vr 校验结果存放器
 * @ param: String[] params 配置参数
 */
public void validing(HttpServletRequest request, ValidatedResult vr, String[] params) {
    logger.info("开始进行角色删除前校验");
    String[] ids = request.getParameterValues("ids");
    // 错误信息
    StringBuffer sb = new StringBuffer(ids.length * 8);
    // 错误信息
    StringBuffer sb1 = new StringBuffer(ids.length * 8);
    RoleManager roleManager = (RoleManager) this.getBean("roleManager");
    List roles = new Vector(ids.length);
    for (int i = 0; i < ids.length; i++) {
        Role role = (Role) roleManager.get(ids[i]);
        if (role.getValidSubRoles().size() != 0) {
            sb.append(role.getName());
            sb.append(" ");
            continue;
        }
        if (role.getPosts().size() > 0) {
            sb1.append(role.getName());
            sb1.append(" ");
            continue;
        }
        role.setStatus(RoleStatus.BLANK_OUT);
        roles.add(role);
    }
    String errMess = sb.toString();
    if (errMess.length() != 0) {
        // 将错误信息封装给校验结果器
        logger.debug("输出校验失败信息");
        vr.setErrMess("ids", "必须先删除 " + errMess + " 下面的子角色");
        return;
    }
    String errMess1 = sb1.toString();
    if (errMess1.length() != 0) {
        // 将错误信息封装给校验结果器
        logger.debug("输出校验失败信息");
        vr.setErrMess("ids", "必须先删除 " + errMess1 + " 下面的岗位");
        return;
    }
    if (vr.isAllValidated()) {
        // 校验成功,执行删除操作
        logger.debug("校验成功,继续");
        // 给DelServices使用
        request.setAttribute(Role.class.getName(), roles.get(0));
    }
}
