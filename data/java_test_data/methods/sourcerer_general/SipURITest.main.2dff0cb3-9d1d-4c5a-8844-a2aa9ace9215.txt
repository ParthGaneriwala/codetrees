public static void main(String[] args) throws ServletParseException {
    boolean impl2 = "SipURIImpl2".equals(args[0]);
    long initStat = System.nanoTime();
    System.out.println("Use SipURIImpl2:" + impl2);
    Runtime r = Runtime.getRuntime();
    System.out.println("Total memory: " + r.totalMemory() / 1048576 + "Mo");
    System.out.println("Free memory:  " + r.freeMemory() / 1048576 + "Mo");
    System.out.println("Used memory:  " + (r.totalMemory() - r.freeMemory()) / 1048576 + "Mo");
    System.out.println("Max memory:   " + r.maxMemory() / 1048576 + "Mo\n");
    String[] uris = { "sip:carol@chicago.com;user=phone;lr", "sip:carol@chicago.com", "sip:carol:aa@chicago.com;lr?subject=toto" };
    int nbTest = 200000;
    SipURI[] parsed = new SipURI[nbTest];
    for (int j = 0; j < uris.length; j++) {
        System.out.println("Perf on uri " + uris[j]);
        long start = System.nanoTime();
        for (int i = 0; i < nbTest; i++) {
            if (impl2)
                new SipURIImpl(uris[j]).toString();
            else
                new SipURIImpl(uris[j]).toString();
        }
        long time2 = (System.nanoTime() - start);
        System.out.println("SipURI2 Took: " + time2 / 1000000 + "ms");
        start = System.nanoTime();
        for (int i = 0; i < nbTest; i++) {
            SipURI uri;
            if (impl2)
                uri = new SipURIImpl(uris[j]);
            else
                uri = new SipURIImpl(uris[j]);
            parsed[i] = uri;
            uri.setLrParam(true);
            uri.toString();
        }
        time2 = (System.nanoTime() - start);
        System.out.println("SipURI2 Took (with modif): " + time2 / 1000000 + "ms");
        System.out.println("Total memory: " + r.totalMemory() / 1048576 + "Mo");
        System.out.println("Free memory:  " + r.freeMemory() / 1048576 + "Mo");
        System.out.println("Used memory:  " + (r.totalMemory() - r.freeMemory()) / 1048576 + "Mo");
        System.out.println("Max memory:   " + r.maxMemory() / 1048576 + "Mo\n");
    }
    System.out.println("Test Took: " + (System.nanoTime() - initStat) / 1000000000 + "s");
}
