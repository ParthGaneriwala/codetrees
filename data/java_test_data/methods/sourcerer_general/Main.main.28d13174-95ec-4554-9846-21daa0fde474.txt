/**
 * @param args the command line arguments
 */
public static void main(String[] args) {
    final String BENVENUTO = "Benvenuto! Questo programma ti permetterà di effettuare una simulazione\n di due macchine a stati" + " finiti cooperanti tra loro.\nPer prima cosa scegli l'opzione desiderata:\n";
    final String TIPOINPUT = "TIPO DI INPUT";
    final String[] SCELTAINPUT = { "Da tastiera, per salvataggio", "Da tastiera, per l'esecuzione", "Da file xml, per esecuzione", "Esci" };
    final String MESS_FINALE = "CIAO E GRAZIE!";
    final String XML_NOT = "-- File xml inesistente o non formattato correttamente!!! --\nDescrizione dell'errore:\n";
    final String XML_DEF = "fsm.xml";
    final String SALVA_SIM = "Vuoi salvare la simulazione? ";
    final String ESECUZIONE = "ESECUZIONE SIMULAZIONE:";
    final String SALV_CORR = "Simulazione salvata correttamente!";
    MyMenu menuInput = new MyMenu(TIPOINPUT, SCELTAINPUT);
    Simulazione s = null;
    Interazione i = new Interazione();
    int selezione = 0;
    System.out.println(BENVENUTO);
    boolean continua = true;
    while (continua) {
        // serve per azzerare le eventuali simulazioni relative a sessioni precedenti
        s = null;
        Input in = null;
        selezione = menuInput.scegli();
        switch(selezione) {
            case 1:
                {
                    // Lettura da tastiera per salvataggio
                    in = new InputTast();
                    // leggiSimulazione è un metodo della classe Input,da cui ereditano le classi InputTast e InputXML
                    s = in.leggiSimulazione();
                    break;
                }
            case 2:
                {
                    // Lettura da tastiera per esecuzione
                    in = new InputTast();
                    s = in.leggiSimulazione();
                    break;
                }
            case 3:
                {
                    // Lettura da XML per esecuzione
                    String url = Servizio.leggiString("Inserire il percorso del file xml da leggere (" + XML_DEF + ")> ");
                    if (url.equals(""))
                        url = XML_DEF;
                    try {
                        // l'uri del file xml dovrà essere passato da tastiera, invio per il default
                        in = new InputXML(url);
                        System.out.println("-- Simulazione creata con successo!!! --");
                        s = in.leggiSimulazione();
                    } catch (Exception ex) {
                        System.out.println(XML_NOT + ex.toString());
                    }
                    break;
                }
            case 4:
                {
                    // provoca l'uscita dal ciclo while del main menu e quindi la fine del programma
                    continua = false;
                    break;
                }
        }
        if (// se la fase di input è andata a buon fine si procede
        continua && s != null) {
            if (selezione != 1)
                System.out.println("\n\n" + ESECUZIONE);
            // esecuzione vera e propria
            boolean fineEsecuzione = false;
            while (// l'esecuzione è fatta solo per le selezioni 2 e 3 del menu; se si è scelto 1 si passa subito al salvataggio
            !fineEsecuzione && selezione != 1) fineEsecuzione = i.selezioneTransizioneDaFarScattare(s);
            // alla fine di un'esecuzione è sempre richiesto se si vuole salvare
            boolean salva = Servizio.yesOrNo(SALVA_SIM);
            if (salva) {
                String url = Servizio.leggiString("Inserire il percorso dove salvare il file xml della simulazione (" + XML_DEF + ")> ");
                if (url.equals(""))
                    url = XML_DEF;
                OutputXML.salvaSimulazione(s, url);
                System.out.println(SALV_CORR);
            }
        }
    // if
    }
    // while
    System.out.println(MESS_FINALE);
}
