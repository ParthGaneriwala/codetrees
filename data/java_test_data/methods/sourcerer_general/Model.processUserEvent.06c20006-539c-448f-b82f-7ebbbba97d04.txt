private void processUserEvent(UserEvent userEvent, Set<PlayerObject> playerObjects) {
    for (PlayerObject playerObject : playerObjects) {
        System.out.println("Ordering: " + playerObject);
        switch(userEvent.getEventType()) {
            case MoveNorthEast:
                {
                    if (!playerObject.canDo(ActionType.MOVE))
                        break;
                    MoveAction move = new MoveAction(playerObject, Direction.Northeast);
                    if (move.execute() == ActionResult.FAILURE)
                        playerObject.addTask(move);
                    break;
                }
            case MoveNorth:
                {
                    if (!playerObject.canDo(ActionType.MOVE))
                        break;
                    MoveAction move = new MoveAction(playerObject, Direction.North);
                    if (move.execute() == ActionResult.FAILURE)
                        playerObject.addTask(move);
                    break;
                }
            case MoveNorthWest:
                {
                    if (!playerObject.canDo(ActionType.MOVE))
                        break;
                    MoveAction move = new MoveAction(playerObject, Direction.Northwest);
                    if (move.execute() == ActionResult.FAILURE)
                        playerObject.addTask(move);
                    break;
                }
            case MoveWest:
                {
                    if (!playerObject.canDo(ActionType.MOVE))
                        break;
                    MoveAction move = new MoveAction(playerObject, Direction.West);
                    if (move.execute() == ActionResult.FAILURE)
                        playerObject.addTask(move);
                    break;
                }
            case MoveEast:
                {
                    if (!playerObject.canDo(ActionType.MOVE))
                        break;
                    MoveAction move = new MoveAction(playerObject, Direction.East);
                    if (move.execute() == ActionResult.FAILURE)
                        playerObject.addTask(move);
                    break;
                }
            case MoveSouthWest:
                {
                    if (!playerObject.canDo(ActionType.MOVE))
                        break;
                    MoveAction move = new MoveAction(playerObject, Direction.Southwest);
                    if (move.execute() == ActionResult.FAILURE)
                        playerObject.addTask(move);
                    break;
                }
            case MoveSouth:
                {
                    if (!playerObject.canDo(ActionType.MOVE))
                        break;
                    MoveAction move = new MoveAction(playerObject, Direction.South);
                    if (move.execute() == ActionResult.FAILURE)
                        playerObject.addTask(move);
                    break;
                }
            case MoveSouthEast:
                {
                    if (!playerObject.canDo(ActionType.MOVE))
                        break;
                    MoveAction move = new MoveAction(playerObject, Direction.Southeast);
                    if (move.execute() == ActionResult.FAILURE)
                        playerObject.addTask(move);
                    break;
                }
            case Attack:
                {
                    if (!playerObject.canDo(ActionType.ATTACK))
                        break;
                    AttackAction aa = new AttackAction((Attack) playerObject, userEvent.getCoordinates());
                    aa.execute();
                    break;
                }
            case BuildColonist:
                {
                    if (!playerObject.canDo(ActionType.BUILD))
                        break;
                    BuildAction ba = new BuildAction((Build) playerObject, this.currentPlayer.createUnit(UnitType.COLONIST));
                    ba.execute();
                    break;
                }
            case BuildScoutSniper:
                {
                    if (!playerObject.canDo(ActionType.BUILD))
                        break;
                    BuildAction ba = new BuildAction((Build) playerObject, this.currentPlayer.createUnit(UnitType.EXPLORER));
                    ba.execute();
                    break;
                }
            case BuildEngineer:
                {
                    if (!playerObject.canDo(ActionType.BUILD))
                        break;
                    BuildAction ba = new BuildAction((Build) playerObject, this.currentPlayer.createUnit(UnitType.COLONIST));
                    ba.execute();
                    break;
                }
            case BuildRifleman:
                {
                    if (!playerObject.canDo(ActionType.BUILD))
                        break;
                    BuildAction ba = new BuildAction((Build) playerObject, this.currentPlayer.createUnit(UnitType.RANGED));
                    ba.execute();
                    break;
                }
            case BuildFlamethrower:
                {
                    if (!playerObject.canDo(ActionType.BUILD))
                        break;
                    BuildAction ba = new BuildAction((Build) playerObject, this.currentPlayer.createUnit(UnitType.MELEE));
                    ba.execute();
                    break;
                }
            case BuildAPC:
                {
                    if (!playerObject.canDo(ActionType.BUILD))
                        break;
                    BuildAction ba = new BuildAction((Build) playerObject, this.currentPlayer.createUnit(UnitType.APC));
                    ba.execute();
                    break;
                }
            case BuildSpy:
                {
                    if (!playerObject.canDo(ActionType.BUILD))
                        break;
                    BuildAction ba = new BuildAction((Build) playerObject, this.currentPlayer.createUnit(UnitType.SPY));
                    ba.execute();
                    break;
                }
            case BuildBase:
                {
                    if (!playerObject.canDo(ActionType.BUILD))
                        break;
                    ArrayList<Unit> objects = currentPlayer.getUnits();
                    int index = objects.indexOf(currentSelection);
                    BuildAction ba = new BuildAction((Build) playerObject, this.currentPlayer.createBase());
                    ba.execute();
                    if (index >= 0) {
                        currentSelection = objects.get((index + 1) % objects.size());
                        currentPlayer.notify("Current unit: " + currentSelection.getName());
                    }
                    break;
                }
            case DetectTrap:
                {
                    if (!playerObject.canDo(ActionType.DETECTTRAP))
                        break;
                    DetectTrapAction dt = new DetectTrapAction((DetectTrap) playerObject);
                    dt.execute();
                    break;
                }
            case DisamarmTrap:
                {
                    if (!playerObject.canDo(ActionType.DISARMTRAP))
                        break;
                    DisarmTrapAction dt = new DisarmTrapAction((DisarmTrap) playerObject);
                    dt.execute();
                    break;
                }
            case Harvest:
                {
                    if (!playerObject.canDo(ActionType.HARVEST))
                        break;
                    HarvestAction ha = new HarvestAction((Harvest) playerObject);
                    ha.execute();
                    break;
                }
            case LayTrap:
                {
                    if (!playerObject.canDo(ActionType.LAYTRAP))
                        break;
                    LayTrapAction lta = new LayTrapAction((LayTrap) playerObject);
                    lta.execute();
                    break;
                }
            case Sneak:
                {
                    if (!playerObject.canDo(ActionType.SNEAK))
                        break;
                    Sneak sneak = (Sneak) playerObject;
                    Action a;
                    if (sneak.isSneaking())
                        a = new UnsneakAction(sneak);
                    else
                        a = new SneakAction(sneak);
                    a.execute();
                    break;
                }
            case UseItem:
                {
                    if (playerObject.getPlayerObjectType() != PlayerObjectType.UNIT)
                        break;
                    UseItemAction uia = new UseItemAction(playerObject);
                    uia.execute();
                    break;
                }
            case PickUpItem:
                {
                    if (playerObject.getPlayerObjectType() != PlayerObjectType.UNIT)
                        break;
                    ((Unit) playerObject).pickupItem();
                    break;
                }
            case DropItem:
                {
                    if (playerObject.getPlayerObjectType() != PlayerObjectType.UNIT)
                        break;
                    ((Unit) playerObject).dropItem();
                    break;
                }
            case ConvertIron:
                {
                    this.currentPlayer.convertIron(1);
                    break;
                }
            case MakeArmy:
                {
                }
            case NextUnit:
                {
                    ArrayList<Unit> objects = currentPlayer.getUnits();
                    int index;
                    if (currentSelection.getPlayerObjectType() == PlayerObjectType.UNIT)
                        index = objects.indexOf(currentSelection);
                    else
                        index = 0;
                    if (index >= 0) {
                        currentSelection = objects.get((index + 1) % objects.size());
                        currentPlayer.notify("Current unit: " + currentSelection.getName());
                    }
                    break;
                }
            case NextBase:
                {
                    ArrayList<Base> objects = currentPlayer.getBases();
                    int index;
                    if (currentSelection.getPlayerObjectType() == PlayerObjectType.BASE)
                        index = objects.indexOf(currentSelection);
                    else
                        index = 0;
                    if (index >= 0) {
                        currentSelection = objects.get((index + 1) % objects.size());
                        currentPlayer.notify("Current base: " + currentSelection.getName());
                    }
                    break;
                }
            case Load:
                {
                    if (playerObject.canDo(ActionType.LOAD)) {
                        ((Transport) playerObject).load();
                    }
                    break;
                }
            case Unload:
                {
                    if (playerObject.canDo(ActionType.UNLOAD)) {
                        ((Transport) playerObject).unload();
                    }
                    break;
                }
            case Observe:
                {
                    if (playerObject.canDo(ActionType.OBSERVE)) {
                        ((Observe) playerObject).observe(userEvent.getCoordinates());
                    }
                    break;
                }
            case BaseResearch:
                {
                    currentPlayer.setResearching(TechType.BASEUPGRADE);
                    break;
                }
            case UnitResearch:
                {
                    currentPlayer.setResearching(TechType.UNITUPGRADE);
                    break;
                }
            case BaseHeal:
                {
                    if (playerObject.canDo(ActionType.HEAL)) {
                        ((Heal) playerObject).heal();
                    }
                    break;
                }
            case SetRallyPoint:
                {
                    if (((PlayerObject) playerObject).getPlayerObjectType() == PlayerObjectType.BASE) {
                        ((Base) playerObject).setRallyPoint(userEvent.getCoordinates());
                    }
                    break;
                }
            case EndTurn:
                {
                    endPlayerTurn();
                    break;
                }
        }
        if (currentPlayer.getObjects().size() <= 0)
            this.endPlayerTurn();
        if (currentSelection.getIsDestroyed()) {
            resetCurrentSelection();
        }
        currentSelection.exploreMap();
        this.signalModelUpdate();
    }
}
