public List<String> getDecision(Individual i) {
    List<String> decisions = new LinkedList<String>();
    if ((int) (i.getStock()) < (i.getSize() * 10 * RATE)) {
        // search food!
        dbg(i, "je vais chercher la bouffe");
        for (Pair<Position, String> p : l) {
            try {
                System.out.println(p.getFirst());
                Cell c = antWorldView.getNeighbor(p.getFirst().getFirst(), p.getFirst().getSecond(), i);
                if (c.containsFood()) {
                    dbg(i, "j'ai de la bouffe a cote de moi => j'y vais");
                    // throw pheromone good way
                    decisions.add("Phero : 0");
                    decisions.add(p.getSecond());
                    return decisions;
                }
            } catch (AccessForbiddenException e) {
                e.printStackTrace();
            } catch (AccessOutsideWorldException e) {
            }
        }
        // FIND A WAY OF FOOD PHERO 1
        for (Pair<Position, String> p : l) {
            Cell c = null;
            try {
                c = antWorldView.getNeighbor(p.getFirst().getFirst(), p.getFirst().getSecond(), i);
                Collection<Pheromone> phero = c.getPheromones(i);
                Iterator<Pheromone> it = phero.iterator();
                while (it.hasNext()) {
                    if (it.next().getType() == 1 && p.getFirst().getFirst() + i.current_position.getFirst() != i.previous_position.getFirst() && p.getFirst().getSecond() + i.current_position.getFirst() != i.previous_position.getSecond()) {
                        decisions.add("Phero : 0");
                        decisions.add(p.getSecond());
                        return decisions;
                    }
                }
            } catch (AccessForbiddenException e) {
                e.printStackTrace();
            } catch (AccessOutsideWorldException e) {
            }
        }
        // ENDFOR
        // if there is no food in the neighborhood
        // RANDOM WAY
        decisions.add("Phero : 0");
        decisions.add(getRandomMoveDecision(i));
        return decisions;
    } else // END SEARCH FOOD
    {
        // RETURN TO THE COLONY
        dbg(i, "j'ai de le plein de bouffe => je rentre");
        for (Pair<Position, String> p : l) {
            if (antWorldView.IsMyColonyPosition(i, new Position(p.getFirst().getFirst() + i.getCurrentPosition().getFirst(), p.getFirst().getSecond() + i.getCurrentPosition().getSecond()))) {
                // if I'm returning to my colony and
                // it next to my current cell =>
                // I can return to y colony
                decisions.add("Phero : 1");
                decisions.add(p.getSecond());
                return decisions;
            }
        }
        // go to a cell containing a pheromone 0
        for (Pair<Position, String> p : l) {
            Cell c = null;
            try {
                c = antWorldView.getNeighbor(p.getFirst().getFirst(), p.getFirst().getSecond(), i);
                Collection<Pheromone> phero = c.getPheromones(i);
                Iterator<Pheromone> it = phero.iterator();
                while (it.hasNext()) {
                    if (it.next().getType() == 0 && p.getFirst().getFirst() + i.current_position.getFirst() != i.previous_position.getFirst() && p.getFirst().getSecond() + i.current_position.getFirst() != i.previous_position.getSecond()) {
                        decisions.add("Phero : 1");
                        decisions.add(p.getSecond());
                        return decisions;
                    }
                }
            } catch (AccessForbiddenException e) {
                e.printStackTrace();
            } catch (AccessOutsideWorldException e) {
            }
        }
        // ENDFOR
        // ELSE if the individual isn't near its colony, check the
        // pheromones
        // indicate the road of the food
        decisions.add("Phero : 1");
        decisions.add(getRandomMoveDecision(i));
        return decisions;
    }
}
