int longest_match(int cur_match) {
    // max hash chain length
    int chain_length = max_chain_length;
    // current string
    int scan = strstart;
    // matched string
    int match;
    // length of current match
    int len;
    // best match length so far
    int best_len = prev_length;
    int limit = strstart > (w_size - MIN_LOOKAHEAD) ? strstart - (w_size - MIN_LOOKAHEAD) : 0;
    int nice_match = this.nice_match;
    // Stop when cur_match becomes <= limit. To simplify the code,
    // we prevent matches with the string of window index 0.
    int wmask = w_mask;
    int strend = strstart + MAX_MATCH;
    byte scan_end1 = window[scan + best_len - 1];
    byte scan_end = window[scan + best_len];
    // Do not waste too much time if we already have a good match:
    if (prev_length >= good_match) {
        chain_length >>= 2;
    }
    // to make deflate deterministic.
    if (nice_match > lookahead)
        nice_match = lookahead;
    do {
        match = cur_match;
        // or if the match length is less than 2:
        if (window[match + best_len] != scan_end || window[match + best_len - 1] != scan_end1 || window[match] != window[scan] || window[++match] != window[scan + 1])
            continue;
        // The check at best_len-1 can be removed because it will be made
        // again later. (This heuristic is not always a win.)
        // It is not necessary to compare scan[2] and match[2] since they
        // are always equal when the other bytes match, given that
        // the hash keys are equal and that HASH_BITS >= 8.
        scan += 2;
        match++;
        // the 256th check will be made at strstart+258.
        do {
        } while (window[++scan] == window[++match] && window[++scan] == window[++match] && window[++scan] == window[++match] && window[++scan] == window[++match] && window[++scan] == window[++match] && window[++scan] == window[++match] && window[++scan] == window[++match] && window[++scan] == window[++match] && scan < strend);
        len = MAX_MATCH - (int) (strend - scan);
        scan = strend - MAX_MATCH;
        if (len > best_len) {
            match_start = cur_match;
            best_len = len;
            if (len >= nice_match)
                break;
            scan_end1 = window[scan + best_len - 1];
            scan_end = window[scan + best_len];
        }
    } while ((cur_match = (prev[cur_match & wmask] & 0xffff)) > limit && --chain_length != 0);
    if (best_len <= lookahead)
        return best_len;
    return lookahead;
}
