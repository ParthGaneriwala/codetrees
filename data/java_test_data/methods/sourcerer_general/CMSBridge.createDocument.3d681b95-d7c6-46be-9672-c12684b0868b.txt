public String createDocument(String ticket, String documentType, String objectName, String linkPath, String contentSourcePath, String languageCode) throws Exception {
    // Function is supposed to be called with the "concrete" object type
    String strLogicalType = documentType.replaceFirst("_c_", "_l_");
    String strConcreteType = documentType;
    String strLogicalnodeId = null;
    String strConcretenodeId = null;
    logger.debug("BEGIN - " + new Exception().getStackTrace()[0].getMethodName());
    // Check if linkPath exists
    String strLinkPathId = repository.getObjectByPath(ticket, linkPath);
    if (isValid(strLinkPathId)) {
        // Create a logical document
        strLogicalnodeId = repository.createNode(ticket, strLogicalType, objectName, linkPath, null, null);
        CMSThirdParty thirdParty = new CMSThirdParty();
        String strUDI = thirdParty.getUID();
        if ((strUDI != null) && (strUDI.length() > 0)) {
            logger.debug(" strUDI = " + strUDI);
            EPLogical logicalDoc = getDocumentById(ticket, strLogicalnodeId);
            if (logicalDoc != null) {
                logicalDoc.setAttributeValue(ATTR_DOC_UID, strUDI);
                // *** usefull ???
                if (contentSourcePath.length() > 0) {
                    // File f = new File(contentSourcePath);
                    FileInputStream fileIS = new FileInputStream(contentSourcePath);
                    String strMimeType = getMimeType(contentSourcePath);
                    String strDosExtension = "";
                    int pos = contentSourcePath.lastIndexOf(".");
                    if (pos > 0)
                        strDosExtension = contentSourcePath.substring(pos);
                    // commented for testing. LINGUISTIC_VERSIONS_LOCATION +  "/" + strUDI.replaceAll(":", ";");
                    String strConcreteLinkPath = linkPath;
                    String strConcreteLinkPathId = repository.getObjectByPath(ticket, strConcreteLinkPath);
                    if (strConcreteLinkPathId == null) {
                    // TODO: Loop to create full folder structure
                    // strConcreteLinkPathId = repository.createFolder(ticket, "folder", strUDI.replaceAll(":", ";"), LINGUISTIC_VERSIONS_LOCATION);
                    }
                    // Create the Concrete Object
                    strConcretenodeId = repository.createNode(ticket, strConcreteType, objectName + "_" + languageCode + strDosExtension, strConcreteLinkPath, fileIS, strMimeType);
                    EPConcrete concreteDoc = getNodeById(ticket, strConcretenodeId);
                    if (concreteDoc != null) {
                        concreteDoc.setAttributeValue(ATTR_DOC_UID, strUDI);
                        concreteDoc.setAttributeValue("ep_original", "true");
                        concreteDoc.setAttributeValue("ep_language_code", languageCode.toLowerCase());
                        concreteDoc.save();
                    }
                }
                // link both
                if ((strLogicalnodeId != null) && (strConcretenodeId != null)) {
                    boolean blnResult = logicalDoc.linkLinguisticVersion(strConcretenodeId, languageCode);
                    logger.debug(" linkLinguisticVersion = " + blnResult);
                }
            // *** usefull ???
            }
        }
    }
    logger.debug("END   - " + new Exception().getStackTrace()[0].getMethodName());
    return strLogicalnodeId;
}
