public static Comparable[] QueryGIndex(Comparable[] iComparable, int inMemorySize) throws Exception {
    statistics();
    Query.indexTables(inMemorySize);
    // set up the starting time of the execution
    // {0:not check; 1:constraint violated; 2:checked and not violated}
    int constraintStatus = 0;
    Calendar rightNow1 = Calendar.getInstance();
    File outputFile = new File(Utils.FILEPATH_OUTPUT + "gIndex.out");
    Table table1 = new Lineitem();
    Table table2 = m_orders.clone();
    Table table3 = m_part.clone();
    Table tmpT;
    Table hackT = new Custom("", new File("./"), new String[0], new int[0], new int[0], new boolean[0]);
    Comparable l_orderkey = iComparable[table1.getIndex(Lineitem.FIELD_L_ORDERKEY)];
    Comparable l_partkey = iComparable[table1.getIndex(Lineitem.FIELD_L_PARTKEY)];
    Comparable l_linenumber = iComparable[table1.getIndex(Lineitem.FIELD_L_LINENUMBER)];
    File lineitemFile = table1.getFile();
    String errorMsg = "No Error";
    double sum = 0;
    StringBuffer qp = new StringBuffer();
    // boolean orderConstraint = true; // 'true' means value of L_orderkey does not exist in Order table, false means the value is found, the constraint is not violated.
    // while (orderConstraint) {
    long t1 = System.nanoTime();
    boolean orderConstraint = SQL.valueExist(table2, new Comparable[] { l_orderkey }, new int[] { table2.getIndex(Orders.FIELD_O_ORDERKEY) }, inMemorySize);
    long t2 = System.nanoTime();
    hackT.setExecutionTime((t2 - t1) / Utils.NANO);
    qp.append(getQPEntry(table2, null, hackT, "Index Value Exists", new String[] { Orders.FIELD_O_ORDERKEY }));
    sum += hackT.getExecutionTime();
    boolean partConstraint = true;
    boolean primaryConstraint = true;
    if (orderConstraint == false) {
        constraintStatus = 1;
        errorMsg = "Insert record's orderkey value, " + l_orderkey + ", violates the constraint!";
    } else {
        t1 = System.nanoTime();
        partConstraint = SQL.valueExist(table3, new Comparable[] { l_partkey }, new int[] { table3.getIndex(Part.FIELD_P_PARTKEY) }, inMemorySize);
        t2 = System.nanoTime();
        hackT.setExecutionTime((t2 - t1) / Utils.NANO);
        qp.append(getQPEntry(table3, null, hackT, "Index Value Exists", new String[] { Part.FIELD_P_PARTKEY }));
        sum += hackT.getExecutionTime();
        if (partConstraint == false) {
            constraintStatus = 1;
            errorMsg = "Insert record's partkey value, " + l_partkey + ", violates the constraint!";
        } else {
            t1 = System.nanoTime();
            primaryConstraint = SQL.valueExist(table1, new Comparable[] { l_orderkey, l_linenumber }, new int[] { table1.getIndex(Lineitem.FIELD_L_ORDERKEY), table1.getIndex(Lineitem.FIELD_L_LINENUMBER) }, inMemorySize);
            t2 = System.nanoTime();
            hackT.setExecutionTime((t2 - t1) / Utils.NANO);
            qp.append(getQPEntry(table2, null, hackT, "Index Value Exists", new String[] { Lineitem.FIELD_L_ORDERKEY, Lineitem.FIELD_L_LINENUMBER }));
            sum += hackT.getExecutionTime();
            if (primaryConstraint == true) {
                constraintStatus = 1;
                errorMsg = "Insert record's orderkey(" + l_orderkey + ") and linenumber(" + l_linenumber + "), violates the constraint of Lineitem table!";
            } else {
                constraintStatus = 2;
            }
        }
    }
    if (constraintStatus == 1) {
        // Calendar rightNow2 = Calendar.getInstance();
        // long time2 = rightNow1.getTime().getTime();
        // totalTime = time2 - time1;
        errorMsg = "The insert sentence violates the constraints!" + errorMsg;
    } else if (constraintStatus == 2) {
        t1 = System.nanoTime();
        SQL.insertrecord(table1, lineitemFile, iComparable);
        t2 = System.nanoTime();
        hackT.setExecutionTime((t2 - t1) / Utils.NANO);
        qp.append(getQPEntry(table2, null, hackT, "Insert Record", new String[0]));
        sum += hackT.getExecutionTime();
        Calendar rightNow2 = Calendar.getInstance();
        errorMsg = "Insert successful, one record is affected.";
    }
    qp.append("Total: " + sum);
    SQL.writeMsgFile(outputFile, errorMsg + "\n" + qp.toString());
    Comparable[] tmp = new Comparable[] { new Boolean(orderConstraint), new Boolean(partConstraint), new Boolean(primaryConstraint), new Integer(constraintStatus) };
    ProjectGUI.getInstance().update("Memory Execution: QueryG done", 0);
    System.out.println("Done G");
    return tmp;
}
