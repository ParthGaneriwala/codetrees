public void signIn(String localSipURL) {
    try {
        DebugIM.println();
        DebugIM.println("process REGISTER (SignIn) in progress for : " + localSipURL);
        logger.info("process REGISTER (SignIn) in progress for : " + localSipURL);
        // ��IMUserAgent���sip��stack,Protocol,Provider,�Ѿ���Ϣ��һЩ����
        // Э��
        String imProtocol = imUA.getIMProtocol();
        SipStack sipStack = imUA.getSipStack();
        SipProvider sipProvider = imUA.getSipProvider();
        MessageFactory messageFactory = imUA.getMessageFactory();
        HeaderFactory headerFactory = imUA.getHeaderFactory();
        AddressFactory addressFactory = imUA.getAddressFactory();
        // Request-URI:
        // Error: RFC 3261, 10.2 states that the Request-URI should
        // be "sip:domain.com" the domain on which we register.
        int atIndex = localSipURL.indexOf('@');
        // nist.gov
        String sipDomain = localSipURL.substring(atIndex + 1);
        SipURI requestURI = addressFactory.createSipURI(null, sipDomain);
        // port���������ý���Ķ˿�
        // port:4000
        requestURI.setPort(imUA.getRegistrarPort());
        logger.info("sip:" + sipDomain + ":" + imUA.getRegistrarPort());
        // Call-ID:
        callIdCounter++;
        CallIdHeader callIdHeader = headerFactory.createCallIdHeader("nist-sip-im-register-callId" + callIdCounter);
        logger.info("Call-ID:nist-sip-im-register-callId" + callIdCounter);
        // CSeq:
        cseq++;
        CSeqHeader cseqHeader = headerFactory.createCSeqHeader(cseq, "REGISTER");
        logger.info("CSeq:" + cseq + "REGISTER");
        // To header:
        Address toAddress = addressFactory.createAddress(localSipURL);
        ToHeader toHeader = headerFactory.createToHeader(toAddress, null);
        logger.info("To header:" + toHeader.toString());
        // From Header:
        Address fromAddress = addressFactory.createAddress(localSipURL);
        String fromTag = Utils.generateTag();
        FromHeader fromHeader = headerFactory.createFromHeader(fromAddress, fromTag);
        logger.info("From:" + fromHeader.toString() + fromTag);
        // Via header
        // ����Э��,���ͷ���֧����(���ڴ�����������зַ�����ʱ��Ǹ���֧)
        String branchId = Utils.generateBranchId();
        ViaHeader viaHeader = headerFactory.createViaHeader(imUA.getIMAddress(), imUA.getIMPort(), imProtocol, branchId);
        Vector<ViaHeader> viaList = new Vector<ViaHeader>();
        viaList.addElement(viaHeader);
        logger.info(viaHeader.toString());
        // MaxForwards header:
        MaxForwardsHeader maxForwardsHeader = headerFactory.createMaxForwardsHeader(10);
        // request
        Request request = messageFactory.createRequest(requestURI, "REGISTER", callIdHeader, cseqHeader, fromHeader, toHeader, viaList, maxForwardsHeader);
        logger.info("request:" + request.toString());
        // Contact header:
        // �����Ժ���Ҫʱ��ֱ��ͨѶ��ַ
        SipURI sipURI = addressFactory.createSipURI(null, imUA.getIMAddress());
        sipURI.setPort(imUA.getIMPort());
        sipURI.setTransportParam(imUA.getIMProtocol());
        Address contactAddress = addressFactory.createAddress(sipURI);
        ContactHeader contactHeader = headerFactory.createContactHeader(contactAddress);
        // add to request
        request.setHeader(contactHeader);
        logger.info("ContactHeader:" + contactHeader.toString());
        // ProxyAuthorization header if not null:
        ProxyAuthorizationHeader proxyAuthHeader = imUA.getProxyAuthorizationHeader();
        if (proxyAuthHeader != null)
            request.setHeader(proxyAuthHeader);
        // Allow header. With PUBLISH, to indicate that we'd
        // like to have an server-sided PA.
        // The Allow header field lists the
        // set of methods supported by the User Agent generating the
        // message.
        String methods = Request.INVITE + ", " + Request.SUBSCRIBE + ", " + Request.NOTIFY + ", " + Request.MESSAGE + ", " + Request.INFO + ", " + Request.NOTIFY + ", " + Request.PUBLISH;
        AllowHeader allowHeader = headerFactory.createAllowHeader(methods);
        request.setHeader(allowHeader);
        logger.info("allowHeader:" + allowHeader.toString());
        ClientTransaction clientTransaction = sipProvider.getNewClientTransaction(request);
        clientTransaction.sendRequest();
        DebugIM.println("REGISTER sent:\n" + request);
        logger.info("REGISTER sent:\n" + request);
        DebugIM.println();
    } catch (Exception ex) {
        ex.printStackTrace();
    }
}
