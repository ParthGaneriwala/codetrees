@SuppressWarnings("unused")
private String parseResponse(String resp) {
    StringBuffer sb = new StringBuffer(50);
    if (resp.length() == 0)
        sb.append("no response");
    else {
        try {
            String header = resp.substring(0, 2);
            /*
        if (header.equals(this.HOPELA_RESP_HEADER) || resp.substring(0,4).equals("00" + this.HOPELA_RESP_HEADER))
        {
          int index;
          while(resp.length() > 0)
          {
            index = indexOf(resp,this.HOPELA_RESP_TAIL);
            if (index < 0)
            {
              //sb.append(HOPELA_ERR_COMMENT_LENGTH);
              break;
            }
            String temp = resp.substring(0,index + 4);
            if (!tailCheck(temp))
            {
              //sb.append(HOPELA_ERR_COMMENT_CHECK);
              break;
            }
            sb.append("ANT-");
            sb.append(parseASCII2Char(temp.substring(2, 6)));
            sb.append(" TAG-");
            sb.append(parseASCII2Char(temp.substring(6, temp.length() - 4)));
            sb.append("\r\n");
            if (resp.length() > temp.length())
              resp = resp.substring(temp.length());
            else
              break;
            if (!resp.substring(0,2).equals(this.HOPELA_RESP_HEADER))
              break;
          }
        }
        */
            if (header.equals(Hopela2214Driver.HOPELA_RESP_BOOT_ERR))
                sb.append(checkError(resp.substring(6, 8)));
            else if (header.equals(Hopela2214Driver.HOPELA_RESP_BOOT_SUCC)) {
                int length = Integer.parseInt(resp.substring(2, 4), 16);
                if (resp.length() != length * 2 + 4)
                    sb.append(HOPELA_ERR_COMMENT_LENGTH);
                else {
                    if (!tailCheck(resp))
                        sb.append(HOPELA_ERR_COMMENT_CHECK);
                    else {
                        String cmd = resp.substring(4, 6);
                        if (cmd.equals(Hopela2214Driver.HOPELA_CMD_GET_READER_VERSION)) {
                            sb.append("Type:");
                            sb.append(Integer.parseInt(resp.substring(6, 8), 16));
                            sb.append(Integer.parseInt(resp.substring(8, 10), 16));
                            sb.append(" Ver:");
                            sb.append(Integer.parseInt(resp.substring(10, 12), 16));
                            sb.append(".");
                            sb.append(Integer.parseInt(resp.substring(12, 14), 16));
                        } else if (cmd.equals(Hopela2214Driver.HOPELA_CMD_SET_BAUD))
                            sb.append("Set baud OK");
                        else if (cmd.equals(Hopela2214Driver.HOPELA_CMD_SET_POWER))
                            sb.append("Set power OK");
                        else if (cmd.equals(Hopela2214Driver.HOPELA_CMD_SET_FREQUENCY))
                            sb.append("Set frequency OK");
                        else if (cmd.equals(Hopela2214Driver.HOPELA_CMD_GET_WORK_PARA)) {
                            sb.append("Baud rate:");
                            String temp = resp.substring(6, 8);
                            if (temp.equals(Hopela2214Driver.HOPELA_BAUD_600))
                                sb.append("600bps");
                            else if (temp.equals(Hopela2214Driver.HOPELA_BAUD_1200))
                                sb.append("1200bps");
                            else if (temp.equals(Hopela2214Driver.HOPELA_BAUD_2400))
                                sb.append("2400bps");
                            else if (temp.equals(Hopela2214Driver.HOPELA_BAUD_4800))
                                sb.append("4800bps");
                            else if (temp.equals(Hopela2214Driver.HOPELA_BAUD_9600))
                                sb.append("9600bps");
                            else if (temp.equals(Hopela2214Driver.HOPELA_BAUD_19200))
                                sb.append("19200bps");
                            else if (temp.equals(Hopela2214Driver.HOPELA_BAUD_38400))
                                sb.append("38400bps");
                            else if (temp.equals(Hopela2214Driver.HOPELA_BAUD_57600))
                                sb.append("57600bps");
                            else if (temp.equals(Hopela2214Driver.HOPELA_BAUD_115200))
                                sb.append("115200bps");
                            sb.append("\r\nOutput power:");
                            sb.append(Integer.parseInt(resp.substring(8, 10), 16));
                            sb.append("\r\nFreq min:");
                            sb.append(String.valueOf(902.6 + (double) (Integer.parseInt(resp.substring(10, 12), 16) - 1) * 0.4).substring(0, 5) + "Mhz");
                            sb.append("\r\nFreq max:");
                            sb.append(String.valueOf(902.6 + (double) (Integer.parseInt(resp.substring(40, 42), 16) - 1) * 0.4).substring(0, 5) + "Mhz");
                            sb.append("\r\nAntenna:");
                            sb.append(parseAntenna(resp.substring(12, 14)));
                            sb.append("\r\nWork mode:");
                            sb.append(parseWorkMode(resp.substring(14, 16)));
                            sb.append("\r\nRead interval:");
                            sb.append(parseReadInterval(resp.substring(16, 18)));
                            sb.append("\r\nCard output mode:");
                            sb.append(resp.substring(18, 20).equals(Hopela2214Driver.HOPELA_READ_TAG_OUTPUT_DIRECT) ? "direct" : "standard");
                            sb.append("\r\nTrigger mode:");
                            sb.append(resp.substring(20, 22).equals(Hopela2214Driver.HOPELA_TRIGGER_MODE_HIGH) ? "high" : "low");
                            sb.append("\r\nCard saved address:");
                            sb.append(resp.substring(22, 24).equals("0") ? "ID" : "user defined");
                            sb.append("\r\nCard output format:");
                            sb.append(parseOutputFormat(resp.substring(26, 28)));
                            sb.append("\r\nMax tags of reading once:");
                            sb.append(Integer.parseInt(resp.substring(28, 30), 16));
                            sb.append("\r\nOutput power2:");
                            sb.append(Integer.parseInt(resp.substring(30, 32), 16));
                            sb.append("\r\nTag support:");
                            sb.append(parseTagType(resp.substring(32, 34)));
                            sb.append("\r\nWiegand pulse width:");
                            sb.append(Integer.parseInt(resp.substring(34, 36), 16));
                            sb.append("\r\nWiegand pulse interval:");
                            sb.append(Integer.parseInt(resp.substring(36, 38), 16));
                            sb.append("\r\nCard output address:");
                            sb.append(Integer.parseInt(resp.substring(38, 40), 16));
                            sb.append("\r\nSignal send mode:");
                            sb.append(Integer.parseInt(resp.substring(66, 68), 16));
                            sb.append("\r\nModulation set:");
                            sb.append(Integer.parseInt(resp.substring(68, 70), 16));
                        } else if (cmd.equals(Hopela2214Driver.HOPELA_CMD_SET_RELAY))
                            sb.append("Set relay OK");
                        else if (cmd.equals(Hopela2214Driver.HOPELA_CMD_SET_ANTENNA))
                            sb.append("Set antenna OK");
                        else if (cmd.equals(Hopela2214Driver.HOPELA_CMD_READ_FACTORY))
                            sb.append("Restore factory setting OK");
                        else if (cmd.equals(Hopela2214Driver.HOPELA_CMD_REBOOT))
                            sb.append("Reboot OK");
                        else if (cmd.equals(Hopela2214Driver.HOPELA_CMD_SET_WORK_PARA))
                            sb.append("Apply OK");
                        else if (cmd.equals(Hopela2214Driver.HOPELA_CMD_WRITE_BLOCK))
                            sb.append("Write block OK");
                        else if (cmd.equals(Hopela2214Driver.HOPELA_CMD_INVENTORY)) {
                            sb.append("Read OK\r\n");
                            String temp = resp.substring(6, 8);
                            int count = Integer.parseInt(temp, 16);
                            if (count > 0) {
                                sb.append("Tag count is ");
                                sb.append(count);
                                sb.append("\r\n");
                                temp = resp.substring(8, resp.length() - 2);
                                for (int i = 0; i < count; i++) {
                                    int word = Integer.parseInt(temp.substring(0, 2), 16);
                                    sb.append(String.valueOf(i + 1));
                                    sb.append(".   ");
                                    sb.append(temp.substring(2, 2 + word * 4));
                                    if (i != count - 1)
                                        sb.append("\r\n");
                                    temp = temp.substring(2 + word * 4);
                                }
                            }
                        } else if (cmd.equals(Hopela2214Driver.HOPELA_CMD_GET_BLOCK)) {
                            sb.append("Block data:");
                            sb.append(resp.substring(6, resp.length() - 2));
                        } else if (cmd.equals(Hopela2214Driver.HOPELA_CMD_WRITE_EPC))
                            sb.append("Write EPC OK");
                    }
                }
            } else
                sb.append("unknown response");
        } catch (Exception ex) {
            sb.append("unknown err:" + ex.getMessage());
        }
    }
    return sb.toString();
}
