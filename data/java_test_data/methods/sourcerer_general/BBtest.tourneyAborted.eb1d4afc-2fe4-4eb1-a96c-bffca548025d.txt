public void tourneyAborted(int botaborted) {
    Vector<Integer> individualTicket = new Vector<Integer>();
    for (int j = 0; j < activecount; j++) {
        float payedbacktotal = 0;
        for (int k = 0; k < Mapbet[j].size(); k++) {
            int madebot = Mapbot[j].elementAt(k);
            if (madebot == botaborted) {
                float madebet = Mapbet[j].elementAt(k);
                actualchips[recoverID[j]] = actualchips[recoverID[j]] + madebet;
                payedbacktotal = payedbacktotal + madebet;
                Mapbot[j].removeElementAt(k);
                Mapfirst[j].removeElementAt(k);
                Mapsecond[j].removeElementAt(k);
                Mapbet[j].removeElementAt(k);
                Maprunner[j].removeElementAt(k);
                k = k - 1;
            }
        }
        if (Tricastticket[j] == null) {
        // ignore
        } else {
            if (Tricastticket[j].size() == 0) {
            // ignore
            } else {
                for (int i = 0; i < Tricastticket[j].size(); i++) {
                    individualTicket = (Tricastticket[j].elementAt(i));
                    int tribot = individualTicket.elementAt(0);
                    if (tribot == botaborted) {
                        int tritotal = individualTicket.elementAt(2);
                        actualchips[recoverID[j]] = actualchips[recoverID[j]] + tritotal;
                        payedbacktotal = payedbacktotal + tritotal;
                        Tricastticket[j].removeElementAt(i);
                        i = i - 1;
                    }
                }
            }
        }
        if (payedbacktotal > 0) {
            if (messagevar[recoverID[j]]) {
                sendLine("message " + activehandle[j] + " As tourney " + events[botaborted].BotList + " was aborted, I pay you back your open bets. Total " + ((int) Math.floor(payedbacktotal)) + " chips.");
            }
            tell(activehandle[j], "As tourney " + events[botaborted].BotList + " was aborted, I pay you back your open bets. Total " + ((int) Math.floor(payedbacktotal)) + " chips.");
        }
    }
    events[botaborted].inProgress = false;
    /* no idea why this must be here??? */
    gridcheckattempt[botaborted] = false;
    events[botaborted].tripool = 0;
    // bottofinalize=botaborted;
    aborthappened = true;
    ClearBotFinalize(botaborted);
}
