protected void configureGraphicalViewer() {
    super.configureGraphicalViewer();
    GraphicalViewer viewer = getGraphicalViewer();
    viewer.setEditPartFactory(new EditpartFactory());
    // ScalableFreeformRootEditPart rep = new ScalableFreeformRootEditPart();
    // viewer.setRootEditPart(rep);
    ChemeRootEditPart rootEditPart = new ChemeRootEditPart();
    viewer.setRootEditPart(rootEditPart);
    /*
		 * I tried to add a A selection listener that would reorder/bring to the top
		 * the elements that were most recently selected. nfortunately this does not work well
		 * Part of the problem here is that the z order of figures is closely tied to the 
		 * order of parts AND the order of model elements. The latter cannot be trivially removed 
		 * and added to the model if they are connected to other processors. I have no good 
		 * solution as of 10-20-2007
		 */
    // viewer.addSelectionChangedListener(new ISelectionChangedListener()
    // {
    // 
    // public void selectionChanged(SelectionChangedEvent event)
    // {
    // if(event.getSelection() instanceof StructuredSelection)
    // {
    // Iterator itr = ((StructuredSelection)event.getSelection()).iterator();
    // GraphicalEditPart current = null;
    // 
    // //get each element/part/figure (depending on the level you try to manage) of the new selection
    // while(itr.hasNext())
    // {
    // //Do remove it from the list and add it to the back/top
    // current = (GraphicalEditPart)itr.next();
    // 
    // if(current.getModel() instanceof IChild)
    // {
    // IChild child = (IChild)current.getModel();
    // 
    // child.getParent().remove(child);
    // child.getParent().add(child);
    // }
    // }
    // }
    // }
    // });
    /*----------------------------------------------------------------------
		 * Zooming!
		 * Note that, since the zooming requires a valid zoom manager, which is
		 * associated with a root edit part, and that root edit part is not 
		 * created until this function is called, the installation of zoom actions
		 * is delayed till now rather than handled in the framework called 
		 * createActions().
		 */
    // rootEditPart.getZoomManager();
    ZoomManager manager = ((ScalableFreeformRootEditPart) viewer.getRootEditPart()).getZoomManager();
    setupZoomContributors(manager);
    setupZoomProperties(manager);
    setupZoomActions(manager);
    /*----------------------------------------------------------------------
		 * Snapping to geometry!
		 * Note that, since the snap to geometry bit needs a valid graphical 
		 * viewer, the associated actions are set up here by calling 
		 * setupSnapToGeometryActions() rather than in the framework called 
		 * createActions().
		 */
    setupSnapToGeometryProperties();
    setupSnapToGeometryActions();
    viewer.addDropTargetListener(new DataEditDropTargetListener(viewer));
    ContextMenuProvider provider = new ProcessContextMenuProvider(viewer, getActionRegistry());
    viewer.setContextMenu(provider);
    getSite().registerContextMenu("cheme.ProcessEditor", provider, viewer);
    // initialize actions
    createActions();
    /*
		 * Just handling key input to the editor.
		 */
    KeyHandler keyHandler = new KeyHandler();
    keyHandler.put(KeyStroke.getPressed(SWT.DEL, 127, 0), getActionRegistry().getAction(ActionFactory.DELETE.getId()));
    keyHandler.put(KeyStroke.getPressed('z', SWT.CTRL), getActionRegistry().getAction(ActionFactory.UNDO.getId()));
    keyHandler.put(KeyStroke.getPressed(' ', 0), getActionRegistry().getAction(GEFActionConstants.DIRECT_EDIT));
    keyHandler.put(KeyStroke.getPressed(SWT.F2, 0), getActionRegistry().getAction(GEFActionConstants.DIRECT_EDIT));
    ChemeGraphicalKeyHandler graphicalViewerKeyHandler = new ChemeGraphicalKeyHandler(viewer);
    KeyHandler parentKeyHandler = graphicalViewerKeyHandler.setParent(keyHandler);
    viewer.setKeyHandler(parentKeyHandler);
}
