// $ANTLR start "while_statement"
public final CompiladoresParser.while_statement_return while_statement() throws RecognitionException {
    CompiladoresParser.while_statement_return retval = new CompiladoresParser.while_statement_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token DO92 = null;
    Token WHILE93 = null;
    Token EOL95 = null;
    Token LOOP97 = null;
    CompiladoresParser.expression_return expression94 = null;
    CompiladoresParser.block_return block96 = null;
    CommonTree DO92_tree = null;
    CommonTree WHILE93_tree = null;
    CommonTree EOL95_tree = null;
    CommonTree LOOP97_tree = null;
    RewriteRuleTokenStream stream_DO = new RewriteRuleTokenStream(adaptor, "token DO");
    RewriteRuleTokenStream stream_EOL = new RewriteRuleTokenStream(adaptor, "token EOL");
    RewriteRuleTokenStream stream_WHILE = new RewriteRuleTokenStream(adaptor, "token WHILE");
    RewriteRuleTokenStream stream_LOOP = new RewriteRuleTokenStream(adaptor, "token LOOP");
    RewriteRuleSubtreeStream stream_expression = new RewriteRuleSubtreeStream(adaptor, "rule expression");
    RewriteRuleSubtreeStream stream_block = new RewriteRuleSubtreeStream(adaptor, "rule block");
    try {
        dbg.enterRule(getGrammarFileName(), "while_statement");
        if (getRuleLevel() == 0) {
            dbg.commence();
        }
        incRuleLevel();
        dbg.location(144, 1);
        try {
            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:144:18: ( DO WHILE expression ( EOL )+ block LOOP -> ^( WHILE ^( TEST expression ) ( block )* ) )
            dbg.enterAlt(1);
            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:144:20: DO WHILE expression ( EOL )+ block LOOP
            {
                dbg.location(144, 20);
                DO92 = (Token) match(input, DO, FOLLOW_DO_in_while_statement1139);
                stream_DO.add(DO92);
                dbg.location(144, 23);
                WHILE93 = (Token) match(input, WHILE, FOLLOW_WHILE_in_while_statement1141);
                stream_WHILE.add(WHILE93);
                dbg.location(144, 29);
                pushFollow(FOLLOW_expression_in_while_statement1143);
                expression94 = expression();
                state._fsp--;
                stream_expression.add(expression94.getTree());
                dbg.location(144, 40);
                // /home/CIN/fmm/Desktop/grammar/Compiladores.g:144:40: ( EOL )+
                int cnt23 = 0;
                try {
                    dbg.enterSubRule(23);
                    loop23: do {
                        int alt23 = 2;
                        try {
                            dbg.enterDecision(23);
                            int LA23_0 = input.LA(1);
                            if ((LA23_0 == EOL)) {
                                alt23 = 1;
                            }
                        } finally {
                            dbg.exitDecision(23);
                        }
                        switch(alt23) {
                            case 1:
                                dbg.enterAlt(1);
                                // /home/CIN/fmm/Desktop/grammar/Compiladores.g:144:40: EOL
                                {
                                    dbg.location(144, 40);
                                    EOL95 = (Token) match(input, EOL, FOLLOW_EOL_in_while_statement1145);
                                    stream_EOL.add(EOL95);
                                }
                                break;
                            default:
                                if (cnt23 >= 1)
                                    break loop23;
                                EarlyExitException eee = new EarlyExitException(23, input);
                                dbg.recognitionException(eee);
                                throw eee;
                        }
                        cnt23++;
                    } while (true);
                } finally {
                    dbg.exitSubRule(23);
                }
                dbg.location(144, 45);
                pushFollow(FOLLOW_block_in_while_statement1148);
                block96 = block();
                state._fsp--;
                stream_block.add(block96.getTree());
                dbg.location(144, 51);
                LOOP97 = (Token) match(input, LOOP, FOLLOW_LOOP_in_while_statement1150);
                stream_LOOP.add(LOOP97);
                // AST REWRITE
                // elements: expression, WHILE, block
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                retval.tree = root_0;
                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.tree : null);
                root_0 = (CommonTree) adaptor.nil();
                // 145:4: -> ^( WHILE ^( TEST expression ) ( block )* )
                {
                    dbg.location(145, 7);
                    // /home/CIN/fmm/Desktop/grammar/Compiladores.g:145:7: ^( WHILE ^( TEST expression ) ( block )* )
                    {
                        CommonTree root_1 = (CommonTree) adaptor.nil();
                        dbg.location(145, 9);
                        root_1 = (CommonTree) adaptor.becomeRoot(stream_WHILE.nextNode(), root_1);
                        dbg.location(145, 15);
                        // /home/CIN/fmm/Desktop/grammar/Compiladores.g:145:15: ^( TEST expression )
                        {
                            CommonTree root_2 = (CommonTree) adaptor.nil();
                            dbg.location(145, 17);
                            root_2 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(TEST, "TEST"), root_2);
                            dbg.location(145, 22);
                            adaptor.addChild(root_2, stream_expression.nextTree());
                            adaptor.addChild(root_1, root_2);
                        }
                        dbg.location(145, 34);
                        // /home/CIN/fmm/Desktop/grammar/Compiladores.g:145:34: ( block )*
                        while (stream_block.hasNext()) {
                            dbg.location(145, 34);
                            adaptor.addChild(root_1, stream_block.nextTree());
                        }
                        stream_block.reset();
                        adaptor.addChild(root_0, root_1);
                    }
                }
                retval.tree = root_0;
            }
            retval.stop = input.LT(-1);
            retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
        }
        dbg.location(146, 4);
    } finally {
        dbg.exitRule(getGrammarFileName(), "while_statement");
        decRuleLevel();
        if (getRuleLevel() == 0) {
            dbg.terminate();
        }
    }
    return retval;
}
