static void executa(byte modoExec, String dirEntrada, String dirSaida, String arqSaida, String arquivo, boolean bBSI, boolean bMes) {
    // Entrada de dados
    FileReader entrada = null;
    // Arvore de programa
    NoArvorePrograma no;
    // try-catch gigante que pega o programa inteiro
    try {
        // Pelo modo de execu��o.... EXECUTA!!! =P~~
        switch(modoExec) {
            case // Identifica��o
            MODO_ID:
                System.out.println(strID);
                break;
            case // Ajuda
            MODO_AJUDA:
                System.out.println(strAjuda);
                break;
            case // L�xico
            MODO_LEXICO:
                // Prepara a entrada do fonte
                try {
                    entrada = new FileReader(dirEntrada + arquivo);
                } catch (FileNotFoundException exc) {
                }
                // Prepara o nome do arquivo de sa�da para a an�lise
                if (arqSaida != null)
                    arqSaida = dirSaida + arqSaida;
                else
                    arqSaida = dirSaida + arquivo.substring(0, arquivo.length() - 4);
                // Executa o modo l�xico
                analisaLexicamente(arquivo, entrada, arqSaida);
                entrada.close();
                break;
            case // Sint�tico
            MODO_SINTATICO:
                // Prepara a entrada do fonte
                try {
                    entrada = new FileReader(dirEntrada + arquivo);
                } catch (FileNotFoundException exc) {
                }
                // Prepara o nome do arquivo de sa�da para a an�lise
                if (arqSaida != null)
                    arqSaida = dirSaida + arqSaida;
                else
                    arqSaida = dirSaida + arquivo.substring(0, arquivo.length() - 4);
                // Executa o modo sint�tico
                no = analisaSintaticamente(arquivo, entrada, arqSaida);
                entrada.close();
                if (bBSI)
                    realizaPercursoAP(no);
                break;
            case // Sem�tico
            MODO_SEMANTICO:
                // Prepara a entrada do fonte
                try {
                    entrada = new FileReader(dirEntrada + arquivo);
                } catch (FileNotFoundException exc) {
                }
                // Prepara o nome do arquivo de sa�da para a an�lise
                if (arqSaida != null)
                    arqSaida = dirSaida + arqSaida;
                else
                    arqSaida = dirSaida + arquivo.substring(0, arquivo.length() - 4);
                // Executa o modo sint�tico
                no = analisaSintaticamente(arquivo, entrada, arqSaida);
                entrada.close();
                if (bBSI)
                    realizaPercursoAP(no);
                analisaSemanticamente(no, arqSaida);
                break;
            case MODO_COMPLETO:
                // Prepara a entrada do fonte
                try {
                    entrada = new FileReader(dirEntrada + arquivo);
                } catch (FileNotFoundException exc) {
                }
                // Prepara o nome do arquivo de sa�da para a an�lise
                if (arqSaida != null)
                    arqSaida = dirSaida + arqSaida;
                else
                    arqSaida = dirSaida + arquivo.substring(0, arquivo.length() - 4);
                // Executa o modo sint�tico
                no = analisaSintaticamente(arquivo, entrada, arqSaida);
                entrada.close();
                if (bBSI)
                    realizaPercursoAP(no);
                if (analisaSemanticamente(no, arqSaida))
                    geraCodigo(no, arqSaida, bMes);
                break;
        }
    } catch (// Qualquer exce��o do programa
    Exception exc) {
        System.err.println("Erro critico:\n\t" + exc.getMessage());
    }
}
