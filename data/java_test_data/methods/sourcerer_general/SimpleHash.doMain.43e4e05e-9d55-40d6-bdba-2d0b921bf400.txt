static int doMain(Class<? extends AbstractHash> clazz, String[] args) {
    String simple = clazz.getSimpleName();
    int index = simple.indexOf("Hash");
    String type = simple.substring(0, index).toUpperCase();
    if (args == null || args.length < 1 || args.length > 7) {
        printMainUsage(clazz, type);
        return -1;
    }
    boolean hex = true;
    String salt = null;
    int times = 1;
    String text = args[args.length - 1];
    for (int i = 0; i < args.length; i++) {
        String arg = args[i];
        if (arg.equals("-base64")) {
            hex = false;
        } else if (arg.equals("-salt")) {
            if ((i + 1) >= (args.length - 1)) {
                String msg = "Salt argument must be followed by a salt value.  The final argument is " + "reserved for the value to hash.";
                System.out.println(msg);
                printMainUsage(clazz, type);
                return -1;
            }
            salt = args[i + 1];
        } else if (arg.equals("-times")) {
            if ((i + 1) >= (args.length - 1)) {
                String msg = "Times argument must be followed by an integer value.  The final argument is " + "reserved for the value to hash";
                System.out.println(msg);
                printMainUsage(clazz, type);
                return -1;
            }
            try {
                times = Integer.valueOf(args[i + 1]);
            } catch (NumberFormatException e) {
                String msg = "Times argument must be followed by an integer value.";
                System.out.println(msg);
                printMainUsage(clazz, type);
                return -1;
            }
        }
    }
    Hash hash = new Md2Hash(text, salt, times);
    String hashed = hex ? hash.toHex() : hash.toBase64();
    System.out.print(hex ? "Hex: " : "Base64: ");
    System.out.println(hashed);
    return 0;
}
