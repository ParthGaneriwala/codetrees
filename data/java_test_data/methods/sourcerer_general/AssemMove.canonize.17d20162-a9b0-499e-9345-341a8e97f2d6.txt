public AssemStm canonize() {
    AssemStm retStm = null;
    AssemSeqExp destSeqExp = dst.canonize();
    AssemSeqExp srcSeqExp = src.canonize();
    AssemStm destSeqExpStm = destSeqExp.getStm();
    AssemStm srcSeqExpStm = srcSeqExp.getStm();
    AssemExp destSeqExpExp = destSeqExp.getExp();
    AssemStm stm = null;
    if (destSeqExpStm == null) {
        if (destSeqExpExp instanceof AssemMemory) {
            AssemMemory mem = (AssemMemory) destSeqExpExp;
            Temp temp = new Temp();
            AssemTemp assemTemp = new AssemTemp(temp);
            AssemMove newMoveStm = new AssemMove(assemTemp, mem.getMemExp());
            stm = new AssemSeq(newMoveStm, srcSeqExpStm);
            retStm = new AssemSeq(stm, new AssemMove(new AssemMemory(assemTemp), srcSeqExp.getExp()));
        } else {
            stm = srcSeqExpStm;
            retStm = new AssemSeq(stm, new AssemMove(destSeqExpExp, srcSeqExp.getExp()));
        }
    } else {
        if (destSeqExpExp instanceof AssemMemory) {
            AssemMemory mem = (AssemMemory) destSeqExpExp;
            Temp temp = new Temp();
            AssemTemp assemTemp = new AssemTemp(temp);
            AssemMove newMoveStm = new AssemMove(assemTemp, mem.getMemExp());
            AssemSeq tempSeq = new AssemSeq(destSeqExpStm, newMoveStm);
            stm = new AssemSeq(tempSeq, srcSeqExpStm);
            retStm = new AssemSeq(stm, new AssemMove(new AssemMemory(assemTemp), srcSeqExp.getExp()));
        } else {
            if (// stm = new MipsAssemSeq(destSeqExpStm, newMoveStm);
            srcSeqExpStm == null)
                retStm = destSeqExpStm;
            else {
                retStm = new AssemSeq(destSeqExpStm, srcSeqExpStm);
            }
        }
    }
    // return new MipsAssemSeq(stm, new MipsAssemMove(destSeqExpExp, srcSeqExp.getExp()));
    return retStm;
}
