public void testSelectAndUpdateProjectPermissions() throws Exception {
    {
        // Add Meta Info to get project id back
        ArrayList<String> meta = new ArrayList<String>();
        meta.add("id");
        api.setTransactionMeta(meta);
        // Insert a project, which also inserts permissions for a project
        DataRecord record = new DataRecord();
        record.setName("project");
        record.setAction(DataRecord.INSERT);
        record.addField("title", "PermissionAPITest Project");
        record.addField("shortDescription", "API Test Project short description");
        record.addField("requestDate", new Date());
        record.addField("enteredBy", USER_ID);
        record.addField("modifiedBy", USER_ID);
        record.addField("groupId", GROUP_ID);
        api.save(record);
        processTheTransactions(api, packetContext);
        assertFalse("API reported a transaction error: " + api.getLastResponse(), api.hasError());
    }
    int newProjectId = api.getResponseValueAsInt("id");
    assertTrue(newProjectId > -1);
    {
        // Get a list of permissions for the new project
        ArrayList<String> meta = new ArrayList<String>();
        meta.add("id");
        meta.add("projectId");
        meta.add("permissionId");
        meta.add("userLevel");
        meta.add("name");
        api.setTransactionMeta(meta);
        // Get just the permission for assigning tickets
        DataRecord record = new DataRecord();
        record.setName("projectPermissionList");
        record.setAction(DataRecord.SELECT);
        record.addField("projectId", newProjectId);
        record.addField("name", "project-tickets-assign");
        api.save(record);
        processTheTransactions(api, packetContext);
        assertFalse("API reported a transaction error: " + api.getLastResponse(), api.hasError());
        assertTrue("Retrieved too many permissions, should have been 1", api.getRecordCount() == 1);
    }
    int permissionIdToUpdate = api.getResponseValueAsInt("id");
    int currentUserLevel = api.getResponseValueAsInt("userLevel");
    assertTrue(currentUserLevel > -1);
    assertTrue(permissionIdToUpdate > -1);
    {
        // Get the id of a "Guest"
        ArrayList<String> meta = new ArrayList<String>();
        meta.add("id");
        meta.add("description");
        meta.add("level");
        api.setTransactionMeta(meta);
        DataRecord record = new DataRecord();
        record.setName("lookupRoleList");
        record.setAction(DataRecord.SELECT);
        // NOTE: This filter does not currently work, so all records are returned
        api.save(record);
        processTheTransactions(api, packetContext);
    }
    int guestCodeLevel = -1;
    for (DataRecord thisRecord : api.getRecords()) {
        if (thisRecord.getValueAsInt("level") == TeamMember.GUEST) {
            guestCodeLevel = thisRecord.getValueAsInt("id");
        }
    }
    assertTrue(guestCodeLevel > -1);
    {
        // Update the permission to "Guest"
        DataRecord record = new DataRecord();
        record.setName("projectPermission");
        record.setAction(DataRecord.UPDATE);
        record.addField("id", permissionIdToUpdate);
        record.addField("userLevel", guestCodeLevel);
        api.save(record);
        processTheTransactions(api, packetContext);
        assertFalse("API reported a transaction error: " + api.getLastResponse(), api.hasError());
    }
    {
        // Get the updated permission
        ArrayList<String> meta = new ArrayList<String>();
        meta.add("id");
        meta.add("projectId");
        meta.add("permissionId");
        meta.add("userLevel");
        meta.add("name");
        api.setTransactionMeta(meta);
        // Get the permission for assigning tickets
        DataRecord record = new DataRecord();
        record.setName("projectPermissionList");
        record.setAction(DataRecord.SELECT);
        record.addField("id", permissionIdToUpdate);
        record.addField("name", "project-tickets-assign");
        api.save(record);
        processTheTransactions(api, packetContext);
        assertFalse("API reported a transaction error: " + api.getLastResponse(), api.hasError());
        assertTrue("Retrieved too many permissions, should have been 1", api.getRecordCount() == 1);
    }
    int newUserLevel = api.getResponseValueAsInt("userLevel");
    assertTrue(currentUserLevel != newUserLevel && currentUserLevel > -1 && newUserLevel > -1);
    // Cleanup everything by deleting the project
    Project thisProject = new Project(db, newProjectId);
    assertTrue(thisProject.delete(db, null));
}
