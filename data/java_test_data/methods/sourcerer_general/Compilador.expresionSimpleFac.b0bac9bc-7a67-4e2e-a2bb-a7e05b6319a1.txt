private sintetizados expresionSimpleFac(tipo tipoH, boolean porValorH, String idPredH) throws ErrorLexico, ErrorArchivo, ErrorSintactico, ErrorSemantico, Exception {
    sintetizados sintTer, sintESF;
    sintetizados sint = new sintetizados();
    String e;
    if (numeroTokenActual == Token.OR) {
        match(Token.OR);
        sintTer = termino(porValorH, idPredH);
        if (compatibles(sintTer.getTipoS(), tipoH)) {
            if (sintTer.getTipoS() instanceof Booleano) {
                // ojo al piojo again, qu� onda?? en suma y resta hay que controlar que el tipo t�rmino sea Entero o Subrango
                generador.genInstSinArg("", generador.DISJ);
                sintESF = expresionSimpleFac(sintTer.getTipoS(), porValorH, idPredH);
                if (sintESF.getTipoS() instanceof Booleano) {
                    sint.setTipoS(new Booleano(TS.getNivelActual()));
                } else {
                    String e1, e2;
                    e1 = ErrorSemantico.construirMsj(sintTer.getTipoS().toString());
                    e2 = ErrorSemantico.construirMsj(sintESF.getTipoS().toString());
                    throw new ErrorSemantico(ErrorSemantico.TIPO_INCOMP, getNumeroLinea(), getNumeroColumna(), e1, e2);
                }
            } else {
                String e1, e2;
                e1 = ErrorSemantico.construirMsj(tipoH.toString());
                e2 = ErrorSemantico.construirMsj(sintTer.getTipoS().toString());
                throw new ErrorSemantico(ErrorSemantico.TIPO_INCOMP, getNumeroLinea(), getNumeroColumna(), e1, e2);
            }
        } else {
            String e1, e2;
            e1 = ErrorSemantico.construirMsj(tipoH.toString());
            e2 = ErrorSemantico.construirMsj(sintTer.getTipoS().toString());
            throw new ErrorSemantico(ErrorSemantico.TIPO_INCOMP, getNumeroLinea(), getNumeroColumna(), e1, e2);
        }
    } else if (numeroTokenActual == Token.SUMA) {
        match(Token.SUMA);
        if (!porValorH) {
            throw new ErrorSemantico(ErrorSemantico.PARAM_REF, getNumeroLinea(), getNumeroColumna());
        }
        sintTer = termino(porValorH, idPredH);
        if (compatibles(sintTer.getTipoS(), tipoH)) {
            generador.genInstSinArg("", generador.SUMA);
            generador.genInst2ArgCte("", generador.CONT, -TS.getMaxMepa(), TS.getMaxMepa() - 1);
            sintESF = expresionSimpleFac(sintTer.getTipoS(), porValorH, idPredH);
            if ((sintESF.getTipoS() instanceof Entero) || (sintESF.getTipoS() instanceof Subrango)) {
                sint.setTipoS(new Entero(TS.getNivelActual()));
            } else {
                String e1, e2;
                e1 = ErrorSemantico.construirMsj(sintTer.getTipoS().toString());
                e2 = ErrorSemantico.construirMsj(sintESF.getTipoS().toString());
                throw new ErrorSemantico(ErrorSemantico.TIPO_INCOMP, getNumeroLinea(), getNumeroColumna(), e1, e2);
            }
        } else {
            String e1, e2;
            e1 = ErrorSemantico.construirMsj(tipoH.toString());
            e2 = ErrorSemantico.construirMsj(sintTer.getTipoS().toString());
            throw new ErrorSemantico(ErrorSemantico.TIPO_INCOMP, getNumeroLinea(), getNumeroColumna(), e1, e2);
        }
    } else if (numeroTokenActual == Token.RESTA) {
        match(Token.RESTA);
        if (!porValorH) {
            throw new ErrorSemantico(ErrorSemantico.PARAM_REF, getNumeroLinea(), getNumeroColumna());
        }
        sintTer = termino(porValorH, idPredH);
        if (compatibles(sintTer.getTipoS(), tipoH)) {
            generador.genInstSinArg("", generador.SUST);
            generador.genInst2ArgCte("", generador.CONT, -TS.getMaxMepa(), TS.getMaxMepa() - 1);
            sintESF = expresionSimpleFac(sintTer.getTipoS(), porValorH, idPredH);
            if ((sintESF.getTipoS() instanceof Entero) || (sintESF.getTipoS() instanceof Subrango)) {
                sint.setTipoS(new Entero(TS.getNivelActual()));
            } else {
                String e1, e2;
                e1 = ErrorSemantico.construirMsj(sintTer.getTipoS().toString());
                e2 = ErrorSemantico.construirMsj(sintESF.getTipoS().toString());
                throw new ErrorSemantico(ErrorSemantico.TIPO_INCOMP, getNumeroLinea(), getNumeroColumna(), e1, e2);
            }
        } else {
            String e1, e2;
            e1 = ErrorSemantico.construirMsj(tipoH.toString());
            e2 = ErrorSemantico.construirMsj(sintTer.getTipoS().toString());
            throw new ErrorSemantico(ErrorSemantico.TIPO_INCOMP, getNumeroLinea(), getNumeroColumna(), e1, e2);
        }
    } else {
        // lambda
        sint.setTipoS(tipoH);
    }
    return sint;
}
