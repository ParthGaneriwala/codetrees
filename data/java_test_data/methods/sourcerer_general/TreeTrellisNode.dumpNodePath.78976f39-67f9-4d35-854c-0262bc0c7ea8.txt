public void dumpNodePath(OutputStream os, boolean includeDeadEnd) {
    OutputStreamWriter out = new OutputStreamWriter(os);
    DecimalFormat nf = new DecimalFormat("0.###E0");
    nf.setMaximumFractionDigits(3);
    ArrayDeque<TreeTrellisNode> nodes = new ArrayDeque<TreeTrellisNode>(time + 2);
    for (TreeTrellisNode node = this; node.getPreviousNode() != null; node = node.getPreviousNode()) {
        nodes.addFirst(node);
    }
    HashSet<TrellisNodeItem> deadEnds = new HashSet<TrellisNodeItem>();
    try {
        out.append("digraph Trellis {\n");
        out.append("  rankdir=LR\n;");
        for (TreeTrellisNode node : nodes) {
            out.append(String.format("// time=%d, word=%s\n", node.time, FactorTuple.toStringNoNull(node.currentWord)));
            deadEnds.clear();
            for (TrellisNodeItem item : node.items.keySet()) {
                if (!includeDeadEnd && node != this) {
                    if (item.getNextItems() == null || item.getNextItems().size() == 0) {
                        // drop items which have to continuation in the next slice
                        deadEnds.add(item);
                        continue;
                    }
                }
                out.append("  N" + item.toString());
                out.append(" [label=\"N" + item.toString());
                /*
					if (!item.clusterid.isEmpty()) {
						out.append(" (" + item.clusterid + ")");
					}
					*/
                try {
                    String prefix = item.tree.getPrefix().toString();
                    if (!prefix.isEmpty()) {
                        out.append("\\nprefix=");
                        out.append(prefix);
                    }
                } catch (UnsupportedOperationException e) {
                // item.tree.getPrefix() will throw this if it's a ghost
                }
                out.append("\\nprev=" + nf.format(item.getPrevProb() * Math.pow(10.0, node.getCumulativeLogScale() - node.getLogScale())));
                out.append("\\nprob=" + nf.format(item.tree.getTotalProb() * Math.pow(10.0, node.getLogScale())) + "\"];\n");
            }
            out.append(" {rank=same;");
            for (TrellisNodeItem item : node.items.keySet()) {
                if (includeDeadEnd || !deadEnds.contains(item)) {
                    out.append("  N" + item.toString());
                }
            }
            out.append("};\n");
            for (TrellisNodeItem item : node.items.keySet()) {
                if (!includeDeadEnd && deadEnds.contains(item)) {
                    continue;
                }
                Set<TrellisNodeItem> prevLinks = item.getPrevItems();
                if (prevLinks != null) {
                    out.append("N" + item.toString() + " -> {");
                    for (TrellisNodeItem prev : prevLinks) {
                        out.append(" N" + prev.toString());
                    }
                    out.append("};\n");
                }
                Set<TrellisNodeItem> nextLinks = item.getNextItems();
                if (nextLinks != null) {
                    out.append("N" + item.toString() + " -> {");
                    for (TrellisNodeItem next : nextLinks) {
                        out.append(" N" + next.toString());
                    }
                    out.append("};\n");
                }
            }
        }
        out.append("}\n");
        out.flush();
    } catch (IOException e) {
    }
}
