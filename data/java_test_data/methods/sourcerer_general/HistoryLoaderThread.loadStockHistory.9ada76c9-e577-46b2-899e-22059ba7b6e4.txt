/*public static void main(String args[]) {
        (new HistoryLoaderThread()).start();
    }*/
private void loadStockHistory(Commodity commodity, Calendar maxFetch) {
    // private void loadStockHistory(Commodity commodity, Long commodityId, EntityManager em, Calendar maxFetch) throws Exception{
    HistoryLoader hl = new HistoryLoader();
    EntityManager em = HibernateUtil.getEntityManager();
    EntityTransaction tx = em.getTransaction();
    tx.begin();
    Commodity newCommodity = (Commodity) em.find(Commodity.class, commodity.getCommodityId());
    System.out.println("History Loader Stock Symbol: " + newCommodity.getSymbol());
    String symbol = newCommodity.getSymbol();
    String url = hl.getCorrectYahooUrlDates(newCommodity.getQuoteSource().getUrl(), CommodityHelper.getLastHistoryDate(newCommodity, em));
    WebTools webTools = new WebTools();
    String page = webTools.getWebPage(url, symbol, useProxy);
    // TODO: Load just a days quote for EOD processing.
    if (page != null) {
        long start = System.currentTimeMillis();
        List<DailyQuoteHistory> list = parseQuoteHistory(page);
        long end = System.currentTimeMillis();
        // System.out.println("Time to parse page: " + (end-start));
        // Iterator<DailyQuoteHistory> quotesHist = list.iterator();
        long startPersist = System.currentTimeMillis();
        newCommodity.setLastHistoryFetch(maxFetch.getTime());
        for (DailyQuoteHistory quote : list) {
            quote.setCommodity(newCommodity);
            try {
                em.persist(quote);
            } catch (Exception ex) {
                System.out.println("Error2 Saving:" + ex.getMessage());
                System.out.println("Going to close Transaction");
                System.out.println("Failed on this date: " + quote.getDate());
                System.out.println("Transaction closed");
                if (ex.getMessage().contains("com.mysql.jdbc.exceptions.MySQLIntegrityConstraintViolationException")) {
                    System.out.println("Error3 Saving:" + ex.getMessage());
                }
            }
        }
        // Commodity newCommodity = (Commodity)em.find(Commodity.class, commodity.getCommodityId());
        newCommodity.setLastHistoryFetch(CommodityHelper.getLastHistoryDate(newCommodity, em));
        em.persist(newCommodity);
        em.flush();
        tx.commit();
        em.clear();
        long endPersist = System.currentTimeMillis();
        // System.out.println("Time to persist: " + (endPersist - startPersist));
        list = null;
    } else {
        tx.commit();
    }
    page = null;
}
