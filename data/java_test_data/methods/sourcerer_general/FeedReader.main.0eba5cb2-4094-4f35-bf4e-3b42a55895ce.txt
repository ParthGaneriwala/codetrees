public static void main(String[] args) {
    boolean ok = false;
    if (args.length == 1) {
        try {
            URL feedUrl = new URL(args[0]);
            FeedFetcherCache feedInfoCache = HashMapFeedInfoCache.getInstance();
            FeedFetcher fetcher = new HttpURLFeedFetcher(feedInfoCache);
            FetcherEventListenerImpl listener = new FetcherEventListenerImpl();
            fetcher.addFetcherEventListener(listener);
            System.err.println("Retrieving feed " + feedUrl);
            // Retrieve the feed.
            // We will browse a Feed Polled Event and then a
            // Feed Retrieved event (assuming the feed is valid)
            SyndFeed feed = fetcher.retrieveFeed(feedUrl);
            System.err.println(feedUrl + " retrieved");
            System.err.println(feedUrl + " has a title: " + feed.getTitle() + " and contains " + feed.getEntries().size() + " entries.");
            // We will now retrieve the feed again. If the feed is unmodified
            // and the server supports conditional gets, we will browse a "Feed
            // Unchanged" event after the Feed Polled event
            System.err.println("Polling " + feedUrl + " again to test conditional browse support.");
            SyndFeed feed2 = fetcher.retrieveFeed(feedUrl);
            System.err.println("If a \"Feed Unchanged\" event fired then the server supports conditional gets.");
            ok = true;
        } catch (Exception ex) {
            System.out.println("ERROR: " + ex.getMessage());
            ex.printStackTrace();
        }
    }
    if (!ok) {
        System.out.println();
        System.out.println("FeedReader reads and prints any RSS/Atom feed type.");
        System.out.println("The first parameter must be the URL of the feed to read.");
        System.out.println();
    }
}
