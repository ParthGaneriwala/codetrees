public static void initialize() throws Exception {
    createEmptyDirs(new String[] { TEST_ROOT_DIR.toString() });
    Configuration config = new Configuration();
    config.set("dfs.name.dir", namenodeStorage.toString());
    config.set("dfs.data.dir", datanodeStorage.toString());
    MiniDFSCluster cluster = null;
    try {
        // format data-node
        createEmptyDirs(new String[] { datanodeStorage.toString() });
        // format and start NameNode and start DataNode
        NameNode.format(config);
        cluster = new MiniDFSCluster(config, 1, StartupOption.REGULAR);
        NameNode namenode = cluster.getNameNode();
        namenodeStorageNamespaceID = namenode.versionRequest().getNamespaceID();
        namenodeStorageFsscTime = namenode.versionRequest().getCTime();
        FileSystem fs = FileSystem.get(config);
        Path baseDir = new Path("/TestUpgrade");
        fs.mkdirs(baseDir);
        // write some files
        int bufferSize = 4096;
        byte[] buffer = new byte[bufferSize];
        for (int i = 0; i < bufferSize; i++) buffer[i] = (byte) ('0' + i % 50);
        writeFile(fs, new Path(baseDir, "file1"), buffer, bufferSize);
        writeFile(fs, new Path(baseDir, "file2"), buffer, bufferSize);
        // save image
        namenode.getFSImage().saveFSImage();
        namenode.getFSImage().getEditLog().open();
        // write more files
        writeFile(fs, new Path(baseDir, "file3"), buffer, bufferSize);
        writeFile(fs, new Path(baseDir, "file4"), buffer, bufferSize);
    } finally {
        // shutdown
        if (cluster != null)
            cluster.shutdown();
        FileUtil.fullyDelete(new File(namenodeStorage, "in_use.lock"));
        FileUtil.fullyDelete(new File(datanodeStorage, "in_use.lock"));
    }
    namenodeStorageChecksum = checksumContents(NAME_NODE, new File(namenodeStorage, "current"));
    datanodeStorageChecksum = checksumContents(DATA_NODE, new File(datanodeStorage, "current"));
}
