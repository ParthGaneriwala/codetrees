private Statement[][] getList(RDFNode r, Resource list, Property first, Property rest, Resource nil) {
    Vector rslt = new Vector();
    Set seen = new HashSet();
    RDFNode next = r;
    // We walk down the list and check each member.
    try {
        while (!next.equals(nil)) {
            Statement[] elt = new Statement[list == null ? 2 : 3];
            if (next instanceof Literal)
                return null;
            Resource res = (Resource) next;
            // construction.
            if (!isGenuineAnon(res))
                return null;
            // The occurs check - cyclic loop rather than a list.
            if (seen.contains(next))
                return null;
            seen.add(next);
            // We must have exactly three properties.
            StmtIterator ss = res.listProperties();
            try {
                while (ss.hasNext()) {
                    Statement s = ss.nextStatement();
                    Property p = s.getPredicate();
                    int ix;
                    RDFNode obj = s.getObject();
                    if (doneSet.contains(s))
                        return null;
                    if (!(obj instanceof Resource)) {
                        return null;
                    }
                    if (p.equals(RDF.type)) {
                        ix = 2;
                        if (!obj.equals(list))
                            return null;
                    } else if (p.equals(first)) {
                        ix = 0;
                    } else if (p.equals(rest)) {
                        ix = 1;
                        next = obj;
                    } else {
                        return null;
                    }
                    if (elt[ix] != null)
                        return null;
                    elt[ix] = s;
                }
            } finally {
                ss.close();
            }
            for (int i = 0; i < elt.length; i++) if (elt[i] == null)
                // didn't have the three required elements.
                return null;
            rslt.add(elt);
        }
        if (rslt.size() == 0)
            return null;
    } finally {
    }
    Statement[][] array = new Statement[rslt.size()][];
    rslt.copyInto(array);
    return array;
}
