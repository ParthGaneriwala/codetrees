public void store(DataCollectionInfo info, Map params) {
    // to do, think hard about anonymizing data
    // collection but being able to track
    // where results come from...
    long reportTime = System.currentTimeMillis();
    // need to change this to be extracted from request
    long rootcoltime = System.currentTimeMillis();
    String reporterId = "anonymous";
    Map<String, Type> types = info.getDataKeyTypes();
    for (Object key : params.keySet()) {
        String keystr = "" + key;
        Object val = params.get(key);
        // as arrays..which is annoying...
        if (val instanceof Object[]) {
            val = ((Object[]) val)[0];
        }
        Type type = types.get(keystr);
        try {
            if (type != null) {
                type.assertValid(info, keystr, val);
            } else {
                log.severe("There was no data mapping found for key " + keystr);
                // TODO if there is no type for this key, we are
                return;
            // likely
            // receiving really data for an outdated collection plan,
            // where
            // someone (for some reason) decided to remove that Type
            // from
            // the server. I don't know what we should do in this
            // situation
            // - should we save the data in a temporary location, save
            // what
            // we can, etc? For now, I am just kind of saving the data
            // and
            // ignoring any data validation, but this is almost
            // certainly
            // not the appropriate long-term solution. The other
            // explanations for their not being a type found for this
            // key string are that someone forgot to register it with
            // the
            // TypeManager, or that a client is being malicious
            }
        } catch (ValidationException e) {
            // TODO handle the validation exception...
            log.log(Level.SEVERE, "Validation exception when checking " + keystr, e.getCause());
            return;
        }
    }
    PersistenceManager pm = PMF.get().getPersistenceManager();
    Report report = new Report();
    report.setDataCollectionId(info.getId());
    report.setReporterId(reporterId);
    report.setReportTime(reportTime);
    report.setCollectionTime(rootcoltime);
    pm.makePersistent(report);
    // Transaction tx = null;
    try {
        // Store everything using a
        // transaction to make sure we
        // don't end up with partial
        // reports!
        // tx = pm.currentTransaction();
        // tx.begin();
        long coltime = System.currentTimeMillis();
        for (Object key : params.keySet()) {
            String keystr = "" + key;
            Object val = params.get(key);
            // as arrays..which is annoying...
            if (val instanceof Object[]) {
                val = ((Object[]) val)[0];
            }
            Type type = types.get(keystr);
            if (params.containsKey(keystr + "._collectionTime")) {
                try {
                    String time = (String) params.get(keystr + "._collectionTime");
                // to do, parse this time
                } catch (Exception e) {
                // I think we can ignore invalid collection times...
                }
            }
            Persister p = type.getPersister();
            p.persist(pm, info, report.getId(), keystr, val, coltime, reportTime, reporterId);
        }
    // tx.commit();
    } catch (Exception e) {
        // if (tx.isActive()) {
        // tx.rollback();
        // }
        e.printStackTrace();
    }
    pm.close();
}
