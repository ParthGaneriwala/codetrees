@Test
public void test1() throws Exception {
    String treebankParse = "( (X (NP (NP (NML (NN Complex ) (NN trait )) (NN analysis )) (PP (IN of ) (NP (DT the ) (NN mouse ) (NN striatum )))) (: : ) (S (NP-SBJ (JJ independent ) (NNS QTLs )) (VP (VBP modulate ) (NP (NP (NN volume )) (CC and ) (NP (NN neuron ) (NN number)))))) )";
    String expectedText = "Complex trait analysis of the mouse striatum: independent QTLs modulate volume and neuron number";
    TopTreebankNode topNode = TreebankFormatParser.parse(treebankParse);
    assertEquals(expectedText, topNode.getText());
    TreebankNode node = topNode.getTerminal(0);
    assertEquals("NN", node.getType());
    assertEquals("Complex", node.getText());
    node = topNode.getTerminal(1);
    assertEquals("NN", node.getType());
    assertEquals("trait", node.getText());
    int i = 0;
    assertEquals("Complex", topNode.getTerminal(i++).getText());
    assertEquals("trait", topNode.getTerminal(i++).getText());
    assertEquals("analysis", topNode.getTerminal(i++).getText());
    assertEquals("of", topNode.getTerminal(i++).getText());
    assertEquals("the", topNode.getTerminal(i++).getText());
    assertEquals("mouse", topNode.getTerminal(i++).getText());
    assertEquals("striatum", topNode.getTerminal(i++).getText());
    assertEquals(":", topNode.getTerminal(i++).getText());
    assertEquals("independent", topNode.getTerminal(i++).getText());
    assertEquals("QTLs", topNode.getTerminal(i++).getText());
    assertEquals("modulate", topNode.getTerminal(i++).getText());
    assertEquals("volume", topNode.getTerminal(i++).getText());
    assertEquals("and", topNode.getTerminal(i++).getText());
    assertEquals("neuron", topNode.getTerminal(i++).getText());
    assertEquals("number", topNode.getTerminal(i++).getText());
    i = 0;
    node = topNode.getTerminal(i++);
    assertEquals("Complex", expectedText.substring(node.getTextBegin(), node.getTextEnd()));
    node = topNode.getTerminal(i++);
    assertEquals("trait", expectedText.substring(node.getTextBegin(), node.getTextEnd()));
    node = topNode.getTerminal(i++);
    assertEquals("analysis", expectedText.substring(node.getTextBegin(), node.getTextEnd()));
    node = topNode.getTerminal(i++);
    assertEquals("of", expectedText.substring(node.getTextBegin(), node.getTextEnd()));
    node = topNode.getTerminal(i++);
    assertEquals("the", expectedText.substring(node.getTextBegin(), node.getTextEnd()));
    node = topNode.getTerminal(i++);
    assertEquals("mouse", expectedText.substring(node.getTextBegin(), node.getTextEnd()));
    node = topNode.getTerminal(i++);
    assertEquals("striatum", expectedText.substring(node.getTextBegin(), node.getTextEnd()));
    node = topNode.getTerminal(i++);
    assertEquals(":", expectedText.substring(node.getTextBegin(), node.getTextEnd()));
    node = topNode.getTerminal(i++);
    assertEquals("independent", expectedText.substring(node.getTextBegin(), node.getTextEnd()));
    node = topNode.getTerminal(i++);
    assertEquals("QTLs", expectedText.substring(node.getTextBegin(), node.getTextEnd()));
    node = topNode.getTerminal(i++);
    assertEquals("modulate", expectedText.substring(node.getTextBegin(), node.getTextEnd()));
    node = topNode.getTerminal(i++);
    assertEquals("volume", expectedText.substring(node.getTextBegin(), node.getTextEnd()));
    node = topNode.getTerminal(i++);
    assertEquals("and", expectedText.substring(node.getTextBegin(), node.getTextEnd()));
    node = topNode.getTerminal(i++);
    assertEquals("neuron", expectedText.substring(node.getTextBegin(), node.getTextEnd()));
    node = topNode.getTerminal(i++);
    assertEquals("number", expectedText.substring(node.getTextBegin(), node.getTextEnd()));
}
