public void testGetCostOfSeats() throws Exception {
    // populating the database.
    dbHelper.insertShow(1, "show", -1, -1);
    dbHelper.insertPerformance(1, new Date(), -1, 1);
    dbHelper.insertSeatClass(1, "code", "description");
    dbHelper.insertPriceBand(1, new BigDecimal(1.0), -1, 1);
    dbHelper.insertSeat(1, "seat1", -1, -1);
    dbHelper.insertSeat(2, "seat2", 1, -1);
    dbHelper.setRightSeatForSeat(1, 2);
    dbHelper.insertSeat(3, "seat3", 2, -1);
    dbHelper.setRightSeatForSeat(2, 3);
    dbHelper.insertSeatStatus(1, 1, -1, 1);
    dbHelper.insertSeatStatus(1, 2, -1, 1);
    dbHelper.insertSeatStatus(1, 3, -1, 1);
    // creating the domain model objects
    Show show = new Show("show");
    show.setId(1);
    Performance performance = new Performance(1, show, new Date(), null);
    Seat seat1 = new Seat("setat1");
    seat1.setId(1);
    Seat seat2 = new Seat("setat1");
    seat2.setId(2);
    Seat seat3 = new Seat("setat1");
    seat3.setId(3);
    seat1.setRightSide(seat2);
    seat2.setLeftSide(seat1);
    seat2.setRightSide(seat3);
    seat3.setLeftSide(seat2);
    Seat[] seats = new Seat[] { seat1, seat2, seat3 };
    // executing the tested method.
    BigDecimal cost = dao.getCostOfSeats(performance, seats);
    // assertions.
    assertEquals("the cost of the seats", 3.0, cost.doubleValue(), 0.001);
}
