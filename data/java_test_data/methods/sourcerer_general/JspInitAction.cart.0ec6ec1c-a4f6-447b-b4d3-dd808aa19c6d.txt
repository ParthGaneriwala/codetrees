public ActionForward cart(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
    if (log.isDebugEnabled()) {
        log.debug("entering 'cart' method...");
    }
    request.setAttribute("categories", categoryManager.getTopCategoryList());
    String id = request.getParameter("id");
    Session session = getSession(request);
    String action = request.getParameter("action");
    if (id == null || id.trim().length() == 0) {
        if (action != null) {
            if (action.equals("clear")) {
                cartManager.removeCarts(session);
                return new ActionForward("/dispatch.do?page=home");
            } else {
                return new ActionForward("/dispatch.do?page=home");
            }
        }
        List<Cart> carts = cartManager.getCartList(session);
        request.setAttribute("carts", carts);
        return mapping.findForward("cart");
    }
    if (action != null) {
        if (action.equals("delete")) {
            cartManager.removeCart(id);
            List<Cart> carts = cartManager.getCartList(session);
            request.setAttribute("carts", carts);
            return mapping.findForward("cart");
        } else {
            System.out.println("Not sure action is: " + action);
            return new ActionForward("/dispatch.do?page=home");
        }
    }
    Goods goods = goodsManager.getGoods(id);
    if (goods == null) {
        ActionMessages errors = new ActionMessages();
        errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("goods.missing"));
        saveErrors(request, errors);
        return new ActionForward("/dispatch.do?page=goods&id=" + id);
    }
    request.setAttribute("goods", goods);
    String snum = request.getParameter("number");
    int num = 1;
    if (snum != null) {
        try {
            num = Integer.parseInt(snum);
        } catch (Exception e) {
            ActionMessages errors = new ActionMessages();
            errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("invalid.number", snum));
            saveErrors(request, errors);
            return new ActionForward("/dispatch.do?page=goods&id=" + id);
        }
    }
    if (num <= 0) {
        ActionMessages errors = new ActionMessages();
        errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("invalid.number", snum));
        saveErrors(request, errors);
        return new ActionForward("/dispatch.do?page=goods&id=" + id);
    }
    Cart cart = new Cart();
    cart.setGoods(goods);
    cart.setGift(goods.isAloneSale());
    cart.setRealGoods(goods.isRealGoods());
    cart.setMarketPrice(goods.getMarketPrice());
    cart.setGoodsNumber(num);
    cart.setGoodsName(goods.getName());
    cart.setGoodsSN(goods.getSN());
    cart.setGoodsPrice(goods.getShopPrice());
    cart.setSession(session);
    cartManager.saveCart(cart);
    List<Cart> carts = cartManager.getCartList(session);
    request.setAttribute("carts", carts);
    return mapping.findForward("cart");
}
