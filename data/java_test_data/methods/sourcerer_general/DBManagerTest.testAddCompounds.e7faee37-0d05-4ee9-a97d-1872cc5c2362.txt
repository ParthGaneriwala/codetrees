@Test
public void testAddCompounds() throws SQLException, ClassNotFoundException {
    DatabaseTests.setupTestDatabase();
    DBManager dbm = new DBManager();
    dbm.openDatabaseConnection();
    List<Compound> compounds = new ArrayList<Compound>();
    Compound comp1 = new Compound(0, 0);
    List<String> names1 = new ArrayList<String>();
    names1.add("name11");
    names1.add("name12");
    names1.add("name13");
    comp1.setNames(names1);
    comp1.setProperty("ownerid", 1L);
    comp1.setProperty("tags", "tags test1");
    comp1.setProperty("smiles", "Test Smiles 1");
    comp1.setProperty("links", "test link 1");
    comp1.setProperty("notes", "test note 1");
    compounds.add(comp1);
    Compound comp2 = new Compound(0, 0);
    List<String> names2 = new ArrayList<String>();
    names2.add("name21");
    names2.add("name22");
    names2.add("name23");
    comp2.setNames(names2);
    comp2.setProperty("ownerid", 2L);
    // comp2.setProperty("tags", "tags test2"); // Test adding a compound without all fields (tags)
    comp2.setProperty("smiles", "Test Smiles 2");
    byte[] byt = new byte[8];
    Arrays.fill(byt, 0, 4, (byte) 0);
    Arrays.fill(byt, 4, 8, (byte) 5);
    comp2.setProperty("structure", byt);
    comp2.setProperty("links", "test link 2");
    comp2.setProperty("notes", "test note 2");
    compounds.add(comp2);
    Compound comp3 = new Compound(0, 0);
    List<String> names3 = new ArrayList<String>();
    // Should allow duplicate names
    names3.add("name11");
    names3.add("name32");
    names3.add("name33");
    comp3.setNames(names3);
    comp3.setProperty("ownerid", 3L);
    comp3.setProperty("tags", "tags test3");
    comp3.setProperty("smiles", "Test Smiles 3");
    // comp3.setProperty("links", "test link 3"); // Test adding a compound without all fields (links)
    comp3.setProperty("notes", "test note 3");
    compounds.add(comp3);
    dbm.addCompounds(compounds);
    // Check database directly
    Connection conn = DatabaseTests.getNewConnection();
    Statement st = conn.createStatement();
    // ORDER BY guid ASC;");
    ResultSet rs = st.executeQuery("SELECT * FROM compounds");
    rs.next();
    rs.next();
    assertTrue(rs.getInt(1) == 2);
    assertTrue(rs.getInt(2) == 1);
    assertTrue(rs.getString(3).equals("tags test1"));
    assertTrue(rs.getString(4).equals("Test Smiles 1"));
    assertTrue(rs.getString(6).equals("test link 1"));
    assertTrue(rs.getString(7).equals("test note 1"));
    rs.next();
    assertTrue(rs.getInt(1) == 3);
    assertTrue(rs.getInt(2) == 2);
    assertTrue(rs.getString(3) == null);
    assertTrue(rs.getString(4).equals("Test Smiles 2"));
    assertTrue(Arrays.equals(rs.getBytes(5), byt));
    assertTrue(rs.getString(6).equals("test link 2"));
    assertTrue(rs.getString(7).equals("test note 2"));
    rs.next();
    assertTrue(rs.getInt(1) == 4);
    assertTrue(rs.getInt(2) == 3);
    assertTrue(rs.getString(3).equals("tags test3"));
    assertTrue(rs.getString(4).equals("Test Smiles 3"));
    assertTrue(rs.getString(6) == null);
    assertTrue(rs.getString(7).equals("test note 3"));
    rs.close();
    rs = st.executeQuery("SELECT * FROM compound_names");
    rs.next();
    rs.next();
    assertTrue(rs.getString(2).equals("name11"));
    rs.next();
    assertTrue(rs.getString(2).equals("name12"));
    rs.next();
    assertTrue(rs.getString(2).equals("name13"));
    rs.next();
    assertTrue(rs.getString(2).equals("name21"));
    rs.next();
    assertTrue(rs.getString(2).equals("name22"));
    rs.next();
    assertTrue(rs.getString(2).equals("name23"));
    rs.next();
    assertTrue(rs.getString(2).equals("name11"));
    rs.next();
    assertTrue(rs.getString(2).equals("name32"));
    rs.next();
    assertTrue(rs.getString(2).equals("name33"));
    rs.close();
    st.close();
    conn.close();
}
