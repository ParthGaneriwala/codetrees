private Temp munchBinop(BINOP e) throws Exception {
    // BINOP(PLUS, e1, CONST(i))
    if (e.binop == BINOP.PLUS && e.right instanceof CONST) {
        Temp r = new Temp();
        List<Temp> d = new List<Temp>(r, null);
        List<Temp> s = new List<Temp>(munchExp(e.left), null);
        emit(new OPER("ADDI " + r + " <- " + s.get(0) + " + " + ((CONST) e.right).value, d, s, null, new Integer(((CONST) e.right).value)));
        return r;
    } else // BINOP(PLUS, CONST(i), e1)
    if (e.binop == BINOP.PLUS && e.left instanceof CONST) {
        Temp r = new Temp();
        List<Temp> d = new List<Temp>(r, null);
        List<Temp> s = new List<Temp>(munchExp(e.right), null);
        emit(new OPER("ADDI " + r + " <- " + s.get(0) + " + " + ((CONST) e.left).value, d, s, null, new Integer(((CONST) e.left).value)));
        return r;
    } else // BINOP(ADD, e1, e2)
    if (e.binop == BINOP.PLUS) {
        Temp r = new Temp();
        List<Temp> d = new List<Temp>(r, null);
        List<Temp> s = new List<Temp>(munchExp(e.left), new List<Temp>(munchExp(e.right), null));
        emit(new OPER("ADD " + r + " <- " + s.get(0) + " + " + s.get(1), d, s, null, null));
        return r;
    } else // BINOP(MINUS, e1, CONST(i))
    if (e.binop == BINOP.MINUS && e.right instanceof CONST) {
        Temp r = new Temp();
        List<Temp> d = new List<Temp>(r, null);
        List<Temp> s = new List<Temp>(munchExp(e.left), null);
        emit(new OPER("SUBI " + r + " <- " + s.get(0) + "-" + ((CONST) e.right).value, d, s, null, new Integer(((CONST) e.right).value)));
        return r;
    } else // BINOP(MINUS, e1, e2)
    if (e.binop == BINOP.MINUS) {
        Temp r = new Temp();
        List<Temp> d = new List<Temp>(r, null);
        List<Temp> s = new List<Temp>(munchExp(e.left), new List<Temp>(munchExp(e.right), null));
        emit(new OPER("SUB " + r + " <- " + s.get(0) + " - " + s.get(1), d, s, null, null));
        return r;
    } else // BINOP(MUL, e1, e2)
    {
        Temp r = new Temp();
        List<Temp> d = new List<Temp>(r, null);
        List<Temp> s = new List<Temp>(munchExp(e.left), new List<Temp>(munchExp(e.right), null));
        emit(new OPER("MUL " + r + " <- " + s.get(0) + " * " + s.get(1), d, s, null, null));
        return r;
    }
}
